
c:/Users/Anders/Documents/ParticleProjects/IOT2/IOT-5/target/5.0.1/argon/IOT-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000079bc  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb9dc  000bb9dc  0000b9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001dc  2003e338  000bba00  0000e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002dc  2003e518  2003e518  0001e518  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bbbdc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bbbe0  000bbbe0  0001bbe0  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bbbe6  000bbbe6  0001bbe6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bbc0a  000bbc0a  0001bc0a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0016ec2d  00000000  00000000  0001bc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00017d51  00000000  00000000  0018a83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000465bb  00000000  00000000  001a258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000032f8  00000000  00000000  001e8b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c770  00000000  00000000  001ebe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e897  00000000  00000000  001f85af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004c400  00000000  00000000  00236e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00158d3a  00000000  00000000  00283246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000af8c  00000000  00000000  003dbf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2uiz>:
   b48f8:	004a      	lsls	r2, r1, #1
   b48fa:	d211      	bcs.n	b4920 <__aeabi_d2uiz+0x28>
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d211      	bcs.n	b4926 <__aeabi_d2uiz+0x2e>
   b4902:	d50d      	bpl.n	b4920 <__aeabi_d2uiz+0x28>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d40e      	bmi.n	b492c <__aeabi_d2uiz+0x34>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	4770      	bx	lr
   b4920:	f04f 0000 	mov.w	r0, #0
   b4924:	4770      	bx	lr
   b4926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492a:	d102      	bne.n	b4932 <__aeabi_d2uiz+0x3a>
   b492c:	f04f 30ff 	mov.w	r0, #4294967295
   b4930:	4770      	bx	lr
   b4932:	f04f 0000 	mov.w	r0, #0
   b4936:	4770      	bx	lr

000b4938 <__aeabi_d2f>:
   b4938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b493c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4940:	bf24      	itt	cs
   b4942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b494a:	d90d      	bls.n	b4968 <__aeabi_d2f+0x30>
   b494c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b495c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4960:	bf08      	it	eq
   b4962:	f020 0001 	biceq.w	r0, r0, #1
   b4966:	4770      	bx	lr
   b4968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b496c:	d121      	bne.n	b49b2 <__aeabi_d2f+0x7a>
   b496e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4972:	bfbc      	itt	lt
   b4974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4978:	4770      	bxlt	lr
   b497a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b497e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4982:	f1c2 0218 	rsb	r2, r2, #24
   b4986:	f1c2 0c20 	rsb	ip, r2, #32
   b498a:	fa10 f30c 	lsls.w	r3, r0, ip
   b498e:	fa20 f002 	lsr.w	r0, r0, r2
   b4992:	bf18      	it	ne
   b4994:	f040 0001 	orrne.w	r0, r0, #1
   b4998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b499c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49a4:	ea40 000c 	orr.w	r0, r0, ip
   b49a8:	fa23 f302 	lsr.w	r3, r3, r2
   b49ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49b0:	e7cc      	b.n	b494c <__aeabi_d2f+0x14>
   b49b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49b6:	d107      	bne.n	b49c8 <__aeabi_d2f+0x90>
   b49b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49bc:	bf1e      	ittt	ne
   b49be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49c6:	4770      	bxne	lr
   b49c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49d4:	4770      	bx	lr
   b49d6:	bf00      	nop

000b49d8 <__aeabi_d2ulz>:
   b49d8:	b5d0      	push	{r4, r6, r7, lr}
   b49da:	4b0c      	ldr	r3, [pc, #48]	; (b4a0c <__aeabi_d2ulz+0x34>)
   b49dc:	2200      	movs	r2, #0
   b49de:	4606      	mov	r6, r0
   b49e0:	460f      	mov	r7, r1
   b49e2:	f7ff fcd9 	bl	b4398 <__aeabi_dmul>
   b49e6:	f7ff ff87 	bl	b48f8 <__aeabi_d2uiz>
   b49ea:	4604      	mov	r4, r0
   b49ec:	f7ff fc5a 	bl	b42a4 <__aeabi_ui2d>
   b49f0:	4b07      	ldr	r3, [pc, #28]	; (b4a10 <__aeabi_d2ulz+0x38>)
   b49f2:	2200      	movs	r2, #0
   b49f4:	f7ff fcd0 	bl	b4398 <__aeabi_dmul>
   b49f8:	4602      	mov	r2, r0
   b49fa:	460b      	mov	r3, r1
   b49fc:	4630      	mov	r0, r6
   b49fe:	4639      	mov	r1, r7
   b4a00:	f7ff fb12 	bl	b4028 <__aeabi_dsub>
   b4a04:	f7ff ff78 	bl	b48f8 <__aeabi_d2uiz>
   b4a08:	4621      	mov	r1, r4
   b4a0a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a0c:	3df00000 	.word	0x3df00000
   b4a10:	41f00000 	.word	0x41f00000
	...

000b4a20 <memchr>:
   b4a20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a24:	2a10      	cmp	r2, #16
   b4a26:	db2b      	blt.n	b4a80 <memchr+0x60>
   b4a28:	f010 0f07 	tst.w	r0, #7
   b4a2c:	d008      	beq.n	b4a40 <memchr+0x20>
   b4a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a32:	3a01      	subs	r2, #1
   b4a34:	428b      	cmp	r3, r1
   b4a36:	d02d      	beq.n	b4a94 <memchr+0x74>
   b4a38:	f010 0f07 	tst.w	r0, #7
   b4a3c:	b342      	cbz	r2, b4a90 <memchr+0x70>
   b4a3e:	d1f6      	bne.n	b4a2e <memchr+0xe>
   b4a40:	b4f0      	push	{r4, r5, r6, r7}
   b4a42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4a46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b4a4a:	f022 0407 	bic.w	r4, r2, #7
   b4a4e:	f07f 0700 	mvns.w	r7, #0
   b4a52:	2300      	movs	r3, #0
   b4a54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4a58:	3c08      	subs	r4, #8
   b4a5a:	ea85 0501 	eor.w	r5, r5, r1
   b4a5e:	ea86 0601 	eor.w	r6, r6, r1
   b4a62:	fa85 f547 	uadd8	r5, r5, r7
   b4a66:	faa3 f587 	sel	r5, r3, r7
   b4a6a:	fa86 f647 	uadd8	r6, r6, r7
   b4a6e:	faa5 f687 	sel	r6, r5, r7
   b4a72:	b98e      	cbnz	r6, b4a98 <memchr+0x78>
   b4a74:	d1ee      	bne.n	b4a54 <memchr+0x34>
   b4a76:	bcf0      	pop	{r4, r5, r6, r7}
   b4a78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a7c:	f002 0207 	and.w	r2, r2, #7
   b4a80:	b132      	cbz	r2, b4a90 <memchr+0x70>
   b4a82:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a86:	3a01      	subs	r2, #1
   b4a88:	ea83 0301 	eor.w	r3, r3, r1
   b4a8c:	b113      	cbz	r3, b4a94 <memchr+0x74>
   b4a8e:	d1f8      	bne.n	b4a82 <memchr+0x62>
   b4a90:	2000      	movs	r0, #0
   b4a92:	4770      	bx	lr
   b4a94:	3801      	subs	r0, #1
   b4a96:	4770      	bx	lr
   b4a98:	2d00      	cmp	r5, #0
   b4a9a:	bf06      	itte	eq
   b4a9c:	4635      	moveq	r5, r6
   b4a9e:	3803      	subeq	r0, #3
   b4aa0:	3807      	subne	r0, #7
   b4aa2:	f015 0f01 	tst.w	r5, #1
   b4aa6:	d107      	bne.n	b4ab8 <memchr+0x98>
   b4aa8:	3001      	adds	r0, #1
   b4aaa:	f415 7f80 	tst.w	r5, #256	; 0x100
   b4aae:	bf02      	ittt	eq
   b4ab0:	3001      	addeq	r0, #1
   b4ab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b4ab6:	3001      	addeq	r0, #1
   b4ab8:	bcf0      	pop	{r4, r5, r6, r7}
   b4aba:	3801      	subs	r0, #1
   b4abc:	4770      	bx	lr
   b4abe:	bf00      	nop

000b4ac0 <strcmp>:
   b4ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ac8:	2a01      	cmp	r2, #1
   b4aca:	bf28      	it	cs
   b4acc:	429a      	cmpcs	r2, r3
   b4ace:	d0f7      	beq.n	b4ac0 <strcmp>
   b4ad0:	1ad0      	subs	r0, r2, r3
   b4ad2:	4770      	bx	lr

000b4ad4 <strlen>:
   b4ad4:	4603      	mov	r3, r0
   b4ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4ada:	2a00      	cmp	r2, #0
   b4adc:	d1fb      	bne.n	b4ad6 <strlen+0x2>
   b4ade:	1a18      	subs	r0, r3, r0
   b4ae0:	3801      	subs	r0, #1
   b4ae2:	4770      	bx	lr

000b4ae4 <__aeabi_d2lz>:
   b4ae4:	b538      	push	{r3, r4, r5, lr}
   b4ae6:	2200      	movs	r2, #0
   b4ae8:	2300      	movs	r3, #0
   b4aea:	4604      	mov	r4, r0
   b4aec:	460d      	mov	r5, r1
   b4aee:	f7ff fec5 	bl	b487c <__aeabi_dcmplt>
   b4af2:	b928      	cbnz	r0, b4b00 <__aeabi_d2lz+0x1c>
   b4af4:	4620      	mov	r0, r4
   b4af6:	4629      	mov	r1, r5
   b4af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4afc:	f7ff bf6c 	b.w	b49d8 <__aeabi_d2ulz>
   b4b00:	4620      	mov	r0, r4
   b4b02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4b06:	f7ff ff67 	bl	b49d8 <__aeabi_d2ulz>
   b4b0a:	4240      	negs	r0, r0
   b4b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b10:	bd38      	pop	{r3, r4, r5, pc}
   b4b12:	bf00      	nop

000b4b14 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b14:	4809      	ldr	r0, [pc, #36]	; (b4b3c <module_user_pre_init+0x28>)
   b4b16:	490a      	ldr	r1, [pc, #40]	; (b4b40 <module_user_pre_init+0x2c>)
   b4b18:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4b1a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b1c:	d005      	beq.n	b4b2a <module_user_pre_init+0x16>
   b4b1e:	4a09      	ldr	r2, [pc, #36]	; (b4b44 <module_user_pre_init+0x30>)
   b4b20:	4282      	cmp	r2, r0
   b4b22:	d002      	beq.n	b4b2a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4b24:	1a12      	subs	r2, r2, r0
   b4b26:	f004 f975 	bl	b8e14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4b2a:	4807      	ldr	r0, [pc, #28]	; (b4b48 <module_user_pre_init+0x34>)
   b4b2c:	4a07      	ldr	r2, [pc, #28]	; (b4b4c <module_user_pre_init+0x38>)
   b4b2e:	2100      	movs	r1, #0
   b4b30:	1a12      	subs	r2, r2, r0
   b4b32:	f004 f997 	bl	b8e64 <memset>
    return &link_global_data_start;
}
   b4b36:	4801      	ldr	r0, [pc, #4]	; (b4b3c <module_user_pre_init+0x28>)
   b4b38:	bd08      	pop	{r3, pc}
   b4b3a:	bf00      	nop
   b4b3c:	2003e338 	.word	0x2003e338
   b4b40:	000bba00 	.word	0x000bba00
   b4b44:	2003e514 	.word	0x2003e514
   b4b48:	2003e518 	.word	0x2003e518
   b4b4c:	2003e7f4 	.word	0x2003e7f4

000b4b50 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4b50:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b52:	4e07      	ldr	r6, [pc, #28]	; (b4b70 <module_user_init+0x20>)
   b4b54:	4c07      	ldr	r4, [pc, #28]	; (b4b74 <module_user_init+0x24>)
    module_user_init_hook();
   b4b56:	f002 fb07 	bl	b7168 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b5a:	1ba4      	subs	r4, r4, r6
   b4b5c:	08a4      	lsrs	r4, r4, #2
   b4b5e:	2500      	movs	r5, #0
   b4b60:	42ac      	cmp	r4, r5
   b4b62:	d100      	bne.n	b4b66 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b64:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b66:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b6a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b6c:	3501      	adds	r5, #1
   b4b6e:	e7f7      	b.n	b4b60 <module_user_init+0x10>
   b4b70:	000bb9b4 	.word	0x000bb9b4
   b4b74:	000bb9dc 	.word	0x000bb9dc

000b4b78 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b78:	f000 b828 	b.w	b4bcc <setup>

000b4b7c <module_user_loop>:
}

void module_user_loop() {
   b4b7c:	b508      	push	{r3, lr}
    loop();
   b4b7e:	f000 f8f1 	bl	b4d64 <loop>
    _post_loop();
}
   b4b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b86:	f002 baa7 	b.w	b70d8 <_post_loop>

000b4b8a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b8a:	f001 be77 	b.w	b687c <malloc>

000b4b8e <_Znaj>:
   b4b8e:	f001 be75 	b.w	b687c <malloc>

000b4b92 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4b92:	f001 be7b 	b.w	b688c <free>

000b4b96 <_ZdaPv>:
   b4b96:	f001 be79 	b.w	b688c <free>

000b4b9a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b9a:	f001 be77 	b.w	b688c <free>

000b4b9e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b9e:	7800      	ldrb	r0, [r0, #0]
   b4ba0:	fab0 f080 	clz	r0, r0
   b4ba4:	0940      	lsrs	r0, r0, #5
   b4ba6:	4770      	bx	lr

000b4ba8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ba8:	2301      	movs	r3, #1
   b4baa:	7003      	strb	r3, [r0, #0]
   b4bac:	4770      	bx	lr

000b4bae <_Z12mqttCallbackPcPhj>:

void mqttCallback(char *topic, byte *payload, unsigned int length)
{
    // The MQTT client will call this function, when receiving a message on a subscribed topic.
    // This provides a way to send instructions - for example to trigger a price update.
}
   b4bae:	4770      	bx	lr

000b4bb0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4bb0:	b40e      	push	{r1, r2, r3}
   b4bb2:	b503      	push	{r0, r1, lr}
   b4bb4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4bb6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4bb8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4bbc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4bbe:	f002 f916 	bl	b6dee <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4bc2:	b002      	add	sp, #8
   b4bc4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bc8:	b003      	add	sp, #12
   b4bca:	4770      	bx	lr

000b4bcc <setup>:
{
   b4bcc:	b510      	push	{r4, lr}
   b4bce:	b088      	sub	sp, #32
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4bd0:	f001 fe2c 	bl	b682c <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4bd4:	b910      	cbnz	r0, b4bdc <setup+0x10>
            spark_process();
   b4bd6:	f001 fe21 	bl	b681c <spark_process>
        while (_while() && !_condition()) {
   b4bda:	e7f9      	b.n	b4bd0 <setup+0x4>
   b4bdc:	f001 fe26 	bl	b682c <spark_cloud_flag_connected>
    wattSensor.initSensor();
   b4be0:	481a      	ldr	r0, [pc, #104]	; (b4c4c <setup+0x80>)
   b4be2:	f000 ff77 	bl	b5ad4 <_ZN6Sensor10initSensorEv>
    Serial.printf("Return value: %d\n", mqttClient.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt"));
   b4be6:	f002 fe7f 	bl	b78e8 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4bea:	4919      	ldr	r1, [pc, #100]	; (b4c50 <setup+0x84>)
   b4bec:	4604      	mov	r4, r0
   b4bee:	a804      	add	r0, sp, #16
   b4bf0:	f001 ffc0 	bl	b6b74 <_ZN6StringC1EPK19__FlashStringHelper>
   b4bf4:	f002 f9db 	bl	b6fae <_ZN9TimeClass3nowEv>
   b4bf8:	220a      	movs	r2, #10
   b4bfa:	4601      	mov	r1, r0
   b4bfc:	4668      	mov	r0, sp
   b4bfe:	f002 f80b 	bl	b6c18 <_ZN6StringC1Elh>
   b4c02:	4669      	mov	r1, sp
   b4c04:	a804      	add	r0, sp, #16
   b4c06:	f002 f831 	bl	b6c6c <_ZplRK15StringSumHelperRK6String>
   b4c0a:	4b12      	ldr	r3, [pc, #72]	; (b4c54 <setup+0x88>)
   b4c0c:	6801      	ldr	r1, [r0, #0]
   b4c0e:	4812      	ldr	r0, [pc, #72]	; (b4c58 <setup+0x8c>)
   b4c10:	461a      	mov	r2, r3
   b4c12:	f001 f9a7 	bl	b5f64 <_ZN4MQTT7connectEPKcS1_S1_>
   b4c16:	4911      	ldr	r1, [pc, #68]	; (b4c5c <setup+0x90>)
   b4c18:	4602      	mov	r2, r0
   b4c1a:	4620      	mov	r0, r4
   b4c1c:	f7ff ffc8 	bl	b4bb0 <_ZN5Print6printfEPKcz>
   b4c20:	4668      	mov	r0, sp
   b4c22:	f001 ff5c 	bl	b6ade <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4c26:	a804      	add	r0, sp, #16
   b4c28:	f001 ff59 	bl	b6ade <_ZN6StringD1Ev>
    if (mqttClient.isConnected())
   b4c2c:	480a      	ldr	r0, [pc, #40]	; (b4c58 <setup+0x8c>)
   b4c2e:	f001 f8a9 	bl	b5d84 <_ZN4MQTT11isConnectedEv>
   b4c32:	b120      	cbz	r0, b4c3e <setup+0x72>
        mqttClient.publish("power/get", "Argon Booting.");
   b4c34:	4a0a      	ldr	r2, [pc, #40]	; (b4c60 <setup+0x94>)
   b4c36:	490b      	ldr	r1, [pc, #44]	; (b4c64 <setup+0x98>)
   b4c38:	4807      	ldr	r0, [pc, #28]	; (b4c58 <setup+0x8c>)
   b4c3a:	f001 fa1e 	bl	b607a <_ZN4MQTT7publishEPKcS1_>
    prices.initSubscriptions();
   b4c3e:	480a      	ldr	r0, [pc, #40]	; (b4c68 <setup+0x9c>)
}
   b4c40:	b008      	add	sp, #32
   b4c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prices.initSubscriptions();
   b4c46:	f000 bb99 	b.w	b537c <_ZN10PriceClass17initSubscriptionsEv>
   b4c4a:	bf00      	nop
   b4c4c:	2003e5dc 	.word	0x2003e5dc
   b4c50:	000baf2c 	.word	0x000baf2c
   b4c54:	000baf39 	.word	0x000baf39
   b4c58:	2003e51c 	.word	0x2003e51c
   b4c5c:	000baf3e 	.word	0x000baf3e
   b4c60:	000baf50 	.word	0x000baf50
   b4c64:	000baf5f 	.word	0x000baf5f
   b4c68:	2003e57c 	.word	0x2003e57c

000b4c6c <_Z13mqttKeepAlivev>:

void mqttKeepAlive()
{
   b4c6c:	b500      	push	{lr}
    if (mqttClient.isConnected())
   b4c6e:	4817      	ldr	r0, [pc, #92]	; (b4ccc <_Z13mqttKeepAlivev+0x60>)
{
   b4c70:	b089      	sub	sp, #36	; 0x24
    if (mqttClient.isConnected())
   b4c72:	f001 f887 	bl	b5d84 <_ZN4MQTT11isConnectedEv>
   b4c76:	b128      	cbz	r0, b4c84 <_Z13mqttKeepAlivev+0x18>
    {
        mqttClient.loop();
   b4c78:	4814      	ldr	r0, [pc, #80]	; (b4ccc <_Z13mqttKeepAlivev+0x60>)
    else
    {
        Serial.printf("Client disconnected - trying to reconnect:\n");
        mqttClient.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
    }
}
   b4c7a:	b009      	add	sp, #36	; 0x24
   b4c7c:	f85d eb04 	ldr.w	lr, [sp], #4
        mqttClient.loop();
   b4c80:	f001 ba57 	b.w	b6132 <_ZN4MQTT4loopEv>
        Serial.printf("Client disconnected - trying to reconnect:\n");
   b4c84:	f002 fe30 	bl	b78e8 <_Z16_fetch_usbserialv>
   b4c88:	4911      	ldr	r1, [pc, #68]	; (b4cd0 <_Z13mqttKeepAlivev+0x64>)
   b4c8a:	f7ff ff91 	bl	b4bb0 <_ZN5Print6printfEPKcz>
	StringSumHelper(const char *p) : String(p) {}
   b4c8e:	4911      	ldr	r1, [pc, #68]	; (b4cd4 <_Z13mqttKeepAlivev+0x68>)
   b4c90:	4668      	mov	r0, sp
   b4c92:	f001 ff6f 	bl	b6b74 <_ZN6StringC1EPK19__FlashStringHelper>
        mqttClient.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b4c96:	f002 f98a 	bl	b6fae <_ZN9TimeClass3nowEv>
   b4c9a:	220a      	movs	r2, #10
   b4c9c:	4601      	mov	r1, r0
   b4c9e:	a804      	add	r0, sp, #16
   b4ca0:	f001 ffba 	bl	b6c18 <_ZN6StringC1Elh>
   b4ca4:	a904      	add	r1, sp, #16
   b4ca6:	4668      	mov	r0, sp
   b4ca8:	f001 ffe0 	bl	b6c6c <_ZplRK15StringSumHelperRK6String>
   b4cac:	4b0a      	ldr	r3, [pc, #40]	; (b4cd8 <_Z13mqttKeepAlivev+0x6c>)
   b4cae:	6801      	ldr	r1, [r0, #0]
   b4cb0:	4806      	ldr	r0, [pc, #24]	; (b4ccc <_Z13mqttKeepAlivev+0x60>)
   b4cb2:	461a      	mov	r2, r3
   b4cb4:	f001 f956 	bl	b5f64 <_ZN4MQTT7connectEPKcS1_S1_>
   b4cb8:	a804      	add	r0, sp, #16
   b4cba:	f001 ff10 	bl	b6ade <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4cbe:	4668      	mov	r0, sp
   b4cc0:	f001 ff0d 	bl	b6ade <_ZN6StringD1Ev>
}
   b4cc4:	b009      	add	sp, #36	; 0x24
   b4cc6:	f85d fb04 	ldr.w	pc, [sp], #4
   b4cca:	bf00      	nop
   b4ccc:	2003e51c 	.word	0x2003e51c
   b4cd0:	000baf69 	.word	0x000baf69
   b4cd4:	000baf2c 	.word	0x000baf2c
   b4cd8:	000baf39 	.word	0x000baf39

000b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4cdc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4cde:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4ce0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4ce2:	b17c      	cbz	r4, b4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4ce4:	6863      	ldr	r3, [r4, #4]
   b4ce6:	3b01      	subs	r3, #1
   b4ce8:	6063      	str	r3, [r4, #4]
   b4cea:	b95b      	cbnz	r3, b4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4cec:	6823      	ldr	r3, [r4, #0]
   b4cee:	4620      	mov	r0, r4
   b4cf0:	689b      	ldr	r3, [r3, #8]
   b4cf2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4cf4:	68a3      	ldr	r3, [r4, #8]
   b4cf6:	3b01      	subs	r3, #1
   b4cf8:	60a3      	str	r3, [r4, #8]
   b4cfa:	b91b      	cbnz	r3, b4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4cfc:	6823      	ldr	r3, [r4, #0]
   b4cfe:	4620      	mov	r0, r4
   b4d00:	68db      	ldr	r3, [r3, #12]
   b4d02:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4d04:	4628      	mov	r0, r5
   b4d06:	bd38      	pop	{r3, r4, r5, pc}

000b4d08 <_Z12publishPoweri>:

#endif
}

void publishPower(int currentPower)
{
   b4d08:	b500      	push	{lr}
   b4d0a:	b089      	sub	sp, #36	; 0x24
   b4d0c:	4602      	mov	r2, r0
    String powerString = String::format("%d", currentPower);
   b4d0e:	4910      	ldr	r1, [pc, #64]	; (b4d50 <_Z12publishPoweri+0x48>)
   b4d10:	a804      	add	r0, sp, #16
   b4d12:	f001 ffb7 	bl	b6c84 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4d16:	4b0f      	ldr	r3, [pc, #60]	; (b4d54 <_Z12publishPoweri+0x4c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4d18:	9a04      	ldr	r2, [sp, #16]
   b4d1a:	781b      	ldrb	r3, [r3, #0]
   b4d1c:	490e      	ldr	r1, [pc, #56]	; (b4d58 <_Z12publishPoweri+0x50>)
   b4d1e:	f88d 3000 	strb.w	r3, [sp]
   b4d22:	a802      	add	r0, sp, #8
   b4d24:	233c      	movs	r3, #60	; 0x3c
   b4d26:	f002 fb8b 	bl	b7440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4d2a:	a803      	add	r0, sp, #12
   b4d2c:	f7ff ffd6 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Power", powerString);

#ifdef USE_MQTT
    if (mqttClient.isConnected())
   b4d30:	480a      	ldr	r0, [pc, #40]	; (b4d5c <_Z12publishPoweri+0x54>)
   b4d32:	f001 f827 	bl	b5d84 <_ZN4MQTT11isConnectedEv>
   b4d36:	b120      	cbz	r0, b4d42 <_Z12publishPoweri+0x3a>
    {
        mqttClient.publish("power", powerString);
   b4d38:	9a04      	ldr	r2, [sp, #16]
   b4d3a:	4909      	ldr	r1, [pc, #36]	; (b4d60 <_Z12publishPoweri+0x58>)
   b4d3c:	4807      	ldr	r0, [pc, #28]	; (b4d5c <_Z12publishPoweri+0x54>)
   b4d3e:	f001 f99c 	bl	b607a <_ZN4MQTT7publishEPKcS1_>
    String powerString = String::format("%d", currentPower);
   b4d42:	a804      	add	r0, sp, #16
   b4d44:	f001 fecb 	bl	b6ade <_ZN6StringD1Ev>
    }

#endif
   b4d48:	b009      	add	sp, #36	; 0x24
   b4d4a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4d4e:	bf00      	nop
   b4d50:	000bb254 	.word	0x000bb254
   b4d54:	2003e518 	.word	0x2003e518
   b4d58:	000baf95 	.word	0x000baf95
   b4d5c:	2003e51c 	.word	0x2003e51c
   b4d60:	000baf9b 	.word	0x000baf9b

000b4d64 <loop>:
{
   b4d64:	b500      	push	{lr}
    if (prices.isMessageDataReady())
   b4d66:	4816      	ldr	r0, [pc, #88]	; (b4dc0 <loop+0x5c>)
{
   b4d68:	b08b      	sub	sp, #44	; 0x2c
    if (prices.isMessageDataReady())
   b4d6a:	f000 fab1 	bl	b52d0 <_ZN10PriceClass18isMessageDataReadyEv>
   b4d6e:	b110      	cbz	r0, b4d76 <loop+0x12>
        prices.assembleMessageData();
   b4d70:	4813      	ldr	r0, [pc, #76]	; (b4dc0 <loop+0x5c>)
   b4d72:	f000 fc51 	bl	b5618 <_ZN10PriceClass19assembleMessageDataEv>
    if (prices.pricesUpdated())
   b4d76:	4812      	ldr	r0, [pc, #72]	; (b4dc0 <loop+0x5c>)
   b4d78:	f000 faa8 	bl	b52cc <_ZN10PriceClass13pricesUpdatedEv>
   b4d7c:	b168      	cbz	r0, b4d9a <loop+0x36>
        String priceString = prices.getLowPriceIntervals().c_str();
   b4d7e:	4910      	ldr	r1, [pc, #64]	; (b4dc0 <loop+0x5c>)
   b4d80:	a804      	add	r0, sp, #16
   b4d82:	f000 fb51 	bl	b5428 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>
   b4d86:	9904      	ldr	r1, [sp, #16]
   b4d88:	4668      	mov	r0, sp
   b4d8a:	f001 fef3 	bl	b6b74 <_ZN6StringC1EPK19__FlashStringHelper>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   b4d8e:	a804      	add	r0, sp, #16
   b4d90:	f003 fd0a 	bl	b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4d94:	4668      	mov	r0, sp
   b4d96:	f001 fea2 	bl	b6ade <_ZN6StringD1Ev>
    if (wattSensor.checkForNewReading())
   b4d9a:	480a      	ldr	r0, [pc, #40]	; (b4dc4 <loop+0x60>)
   b4d9c:	f000 fed0 	bl	b5b40 <_ZN6Sensor18checkForNewReadingEv>
   b4da0:	b120      	cbz	r0, b4dac <loop+0x48>
        publishPower(wattSensor.getCurrentReading());
   b4da2:	4808      	ldr	r0, [pc, #32]	; (b4dc4 <loop+0x60>)
   b4da4:	f000 fec8 	bl	b5b38 <_ZN6Sensor17getCurrentReadingEv>
   b4da8:	f7ff ffae 	bl	b4d08 <_Z12publishPoweri>
    mqttKeepAlive();
   b4dac:	f7ff ff5e 	bl	b4c6c <_Z13mqttKeepAlivev>
    delay(1000);
   b4db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b4db4:	b00b      	add	sp, #44	; 0x2c
   b4db6:	f85d eb04 	ldr.w	lr, [sp], #4
    delay(1000);
   b4dba:	f002 b94b 	b.w	b7054 <delay>
   b4dbe:	bf00      	nop
   b4dc0:	2003e57c 	.word	0x2003e57c
   b4dc4:	2003e5dc 	.word	0x2003e5dc

000b4dc8 <_GLOBAL__sub_I_prices>:
   b4dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
   b4dca:	4b0d      	ldr	r3, [pc, #52]	; (b4e00 <_GLOBAL__sub_I_prices+0x38>)
PriceClass prices;
   b4dcc:	480d      	ldr	r0, [pc, #52]	; (b4e04 <_GLOBAL__sub_I_prices+0x3c>)
   b4dce:	2400      	movs	r4, #0
   b4dd0:	701c      	strb	r4, [r3, #0]
   b4dd2:	f000 f915 	bl	b5000 <_ZN10PriceClassC1Ev>
MQTT mqttClient(MQTT_HOST, PORT, 512, 30, mqttCallback);
   b4dd6:	4b0c      	ldr	r3, [pc, #48]	; (b4e08 <_GLOBAL__sub_I_prices+0x40>)
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	231e      	movs	r3, #30
   b4ddc:	9300      	str	r3, [sp, #0]
   b4dde:	490b      	ldr	r1, [pc, #44]	; (b4e0c <_GLOBAL__sub_I_prices+0x44>)
   b4de0:	9402      	str	r4, [sp, #8]
   b4de2:	f44f 7300 	mov.w	r3, #512	; 0x200
   b4de6:	f240 725b 	movw	r2, #1883	; 0x75b
   b4dea:	4809      	ldr	r0, [pc, #36]	; (b4e10 <_GLOBAL__sub_I_prices+0x48>)
   b4dec:	f000 feee 	bl	b5bcc <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
SYSTEM_THREAD(ENABLED);
   b4df0:	4621      	mov	r1, r4
   b4df2:	2001      	movs	r0, #1
   b4df4:	b004      	add	sp, #16
   b4df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b4dfa:	f001 bc7b 	b.w	b66f4 <system_thread_set_state>
   b4dfe:	bf00      	nop
   b4e00:	2003e518 	.word	0x2003e518
   b4e04:	2003e57c 	.word	0x2003e57c
   b4e08:	000b4baf 	.word	0x000b4baf
   b4e0c:	000bafa1 	.word	0x000bafa1
   b4e10:	2003e51c 	.word	0x2003e51c

000b4e14 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4e14:	6943      	ldr	r3, [r0, #20]
   b4e16:	b113      	cbz	r3, b4e1e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4e18:	6983      	ldr	r3, [r0, #24]
   b4e1a:	300c      	adds	r0, #12
   b4e1c:	4718      	bx	r3
            callback();
        }
    }
   b4e1e:	4770      	bx	lr

000b4e20 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4e20:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4e22:	2100      	movs	r1, #0
   b4e24:	4604      	mov	r4, r0
   b4e26:	4608      	mov	r0, r1
   b4e28:	f001 faf4 	bl	b6414 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4e2c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4e2e:	4620      	mov	r0, r4
   b4e30:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4e32:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4e34:	f001 fb06 	bl	b6444 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4e38:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4e3a:	b10c      	cbz	r4, b4e40 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4e3c:	2301      	movs	r3, #1
   b4e3e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4e40:	2100      	movs	r1, #0
   b4e42:	2001      	movs	r0, #1
   b4e44:	f001 fae6 	bl	b6414 <os_thread_scheduling>
            }
        }
        if (t) {
   b4e48:	b12c      	cbz	r4, b4e56 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4e4a:	6823      	ldr	r3, [r4, #0]
   b4e4c:	4620      	mov	r0, r4
   b4e4e:	689b      	ldr	r3, [r3, #8]
   b4e50:	4798      	blx	r3
            t->running = false;
   b4e52:	2300      	movs	r3, #0
   b4e54:	7123      	strb	r3, [r4, #4]
        }
    }
   b4e56:	b002      	add	sp, #8
   b4e58:	bd10      	pop	{r4, pc}

000b4e5a <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4e5a:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   b4e5c:	6803      	ldr	r3, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
   b4e5e:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4e60:	685c      	ldr	r4, [r3, #4]
   b4e62:	689d      	ldr	r5, [r3, #8]
   b4e64:	681b      	ldr	r3, [r3, #0]
   b4e66:	6812      	ldr	r2, [r2, #0]
   b4e68:	1066      	asrs	r6, r4, #1
   b4e6a:	eb05 0064 	add.w	r0, r5, r4, asr #1
   b4e6e:	07e4      	lsls	r4, r4, #31
   b4e70:	bf44      	itt	mi
   b4e72:	59ac      	ldrmi	r4, [r5, r6]
   b4e74:	58e3      	ldrmi	r3, [r4, r3]
      }
   b4e76:	bc70      	pop	{r4, r5, r6}
   b4e78:	4718      	bx	r3

000b4e7a <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4e7a:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4e7c:	6803      	ldr	r3, [r0, #0]
   b4e7e:	685a      	ldr	r2, [r3, #4]
   b4e80:	6899      	ldr	r1, [r3, #8]
   b4e82:	681b      	ldr	r3, [r3, #0]
   b4e84:	1054      	asrs	r4, r2, #1
   b4e86:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4e8a:	07d2      	lsls	r2, r2, #31
   b4e8c:	bf48      	it	mi
   b4e8e:	590a      	ldrmi	r2, [r1, r4]
      }
   b4e90:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4e94:	bf48      	it	mi
   b4e96:	58d3      	ldrmi	r3, [r2, r3]
   b4e98:	4718      	bx	r3

000b4e9a <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b4e9a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4e9c:	b538      	push	{r3, r4, r5, lr}
   b4e9e:	4604      	mov	r4, r0
	switch (__op)
   b4ea0:	d102      	bne.n	b4ea8 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4ea2:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4ea4:	6023      	str	r3, [r4, #0]
	}
   b4ea6:	e003      	b.n	b4eb0 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b4ea8:	2a02      	cmp	r2, #2
   b4eaa:	d003      	beq.n	b4eb4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b4eac:	2a03      	cmp	r2, #3
   b4eae:	d00d      	beq.n	b4ecc <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b4eb0:	2000      	movs	r0, #0
   b4eb2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4eb4:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4eb6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4eb8:	f7ff fe67 	bl	b4b8a <_Znwj>
   b4ebc:	4603      	mov	r3, r0
   b4ebe:	2800      	cmp	r0, #0
   b4ec0:	d0f0      	beq.n	b4ea4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b4ec2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4eca:	e7eb      	b.n	b4ea4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4ecc:	6800      	ldr	r0, [r0, #0]
   b4ece:	2800      	cmp	r0, #0
   b4ed0:	d0ee      	beq.n	b4eb0 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b4ed2:	210c      	movs	r1, #12
   b4ed4:	f7ff fe61 	bl	b4b9a <_ZdlPvj>
   b4ed8:	e7ea      	b.n	b4eb0 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b4eda <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4eda:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4edc:	b538      	push	{r3, r4, r5, lr}
   b4ede:	4604      	mov	r4, r0
	switch (__op)
   b4ee0:	d102      	bne.n	b4ee8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4ee2:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4ee4:	6023      	str	r3, [r4, #0]
	}
   b4ee6:	e003      	b.n	b4ef0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4ee8:	2a02      	cmp	r2, #2
   b4eea:	d003      	beq.n	b4ef4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4eec:	2a03      	cmp	r2, #3
   b4eee:	d00d      	beq.n	b4f0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4ef0:	2000      	movs	r0, #0
   b4ef2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4ef4:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4ef6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4ef8:	f7ff fe47 	bl	b4b8a <_Znwj>
   b4efc:	4603      	mov	r3, r0
   b4efe:	2800      	cmp	r0, #0
   b4f00:	d0f0      	beq.n	b4ee4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b4f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4f06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4f0a:	e7eb      	b.n	b4ee4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4f0c:	6800      	ldr	r0, [r0, #0]
   b4f0e:	2800      	cmp	r0, #0
   b4f10:	d0ee      	beq.n	b4ef0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b4f12:	210c      	movs	r1, #12
   b4f14:	f7ff fe41 	bl	b4b9a <_ZdlPvj>
   b4f18:	e7ea      	b.n	b4ef0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b4f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>:
       *  @brief  Append a C string.
       *  @param __s  The C string to append.
       *  @return  Reference to this string.
       */
      basic_string&
      append(const _CharT* __s)
   b4f1c:	b513      	push	{r0, r1, r4, lr}
   b4f1e:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4f20:	4608      	mov	r0, r1
   b4f22:	9101      	str	r1, [sp, #4]
   b4f24:	f7ff fdd6 	bl	b4ad4 <strlen>
	if (this->max_size() - (this->size() - __n1) < __n2)
   b4f28:	6863      	ldr	r3, [r4, #4]
   b4f2a:	9901      	ldr	r1, [sp, #4]
   b4f2c:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
   b4f30:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
   b4f34:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   b4f38:	333f      	adds	r3, #63	; 0x3f
   b4f3a:	4298      	cmp	r0, r3
   b4f3c:	4602      	mov	r2, r0
   b4f3e:	d902      	bls.n	b4f46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x2a>
	  __throw_length_error(__N(__s));
   b4f40:	4804      	ldr	r0, [pc, #16]	; (b4f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x38>)
   b4f42:	f003 fb3f 	bl	b85c4 <_ZSt20__throw_length_errorPKc>
      {
	__glibcxx_requires_string(__s);
	const size_type __n = traits_type::length(__s);
	_M_check_length(size_type(0), __n, "basic_string::append");
	return _M_append(__s, __n);
   b4f46:	4620      	mov	r0, r4
      }
   b4f48:	b002      	add	sp, #8
   b4f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _M_append(__s, __n);
   b4f4e:	f003 bd45 	b.w	b89dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
   b4f52:	bf00      	nop
   b4f54:	000bafaf 	.word	0x000bafaf

000b4f58 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4f58:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4f5a:	6880      	ldr	r0, [r0, #8]
   b4f5c:	b130      	cbz	r0, b4f6c <_ZN5Timer4stopEj.isra.0+0x14>
   b4f5e:	2300      	movs	r3, #0
   b4f60:	e9cd 1300 	strd	r1, r3, [sp]
   b4f64:	461a      	mov	r2, r3
   b4f66:	2102      	movs	r1, #2
   b4f68:	f001 fa74 	bl	b6454 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4f6c:	b003      	add	sp, #12
   b4f6e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f72 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4f72:	b538      	push	{r3, r4, r5, lr}
   b4f74:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b4f76:	b16c      	cbz	r4, b4f94 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x22>
	{
	  _M_erase(_S_right(__x));
   b4f78:	68e0      	ldr	r0, [r4, #12]
   b4f7a:	f7ff fffa 	bl	b4f72 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { _M_dispose(); }
   b4f7e:	f104 0014 	add.w	r0, r4, #20
      { return static_cast<_Link_type>(__x->_M_left); }
   b4f82:	68a5      	ldr	r5, [r4, #8]
   b4f84:	f003 fc10 	bl	b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4f88:	4620      	mov	r0, r4
   b4f8a:	212c      	movs	r1, #44	; 0x2c
   b4f8c:	f7ff fe05 	bl	b4b9a <_ZdlPvj>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   b4f90:	462c      	mov	r4, r5
      }
   b4f92:	e7f0      	b.n	b4f76 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
	}
    }
   b4f94:	bd38      	pop	{r3, r4, r5, pc}

000b4f96 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4f96:	b510      	push	{r4, lr}
      if (_M_manager)
   b4f98:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4f9a:	4604      	mov	r4, r0
      if (_M_manager)
   b4f9c:	b113      	cbz	r3, b4fa4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4f9e:	2203      	movs	r2, #3
   b4fa0:	4601      	mov	r1, r0
   b4fa2:	4798      	blx	r3
    }
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	bd10      	pop	{r4, pc}

000b4fa8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4fa8:	b538      	push	{r3, r4, r5, lr}
   b4faa:	4b0f      	ldr	r3, [pc, #60]	; (b4fe8 <_ZN5TimerD1Ev+0x40>)
   b4fac:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4fae:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4fb0:	4604      	mov	r4, r0
        if (handle) {
   b4fb2:	b19b      	cbz	r3, b4fdc <_ZN5TimerD1Ev+0x34>
            stop();
   b4fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4fb8:	f7ff ffce 	bl	b4f58 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4fbc:	68a0      	ldr	r0, [r4, #8]
   b4fbe:	2100      	movs	r1, #0
   b4fc0:	f001 fa70 	bl	b64a4 <os_timer_set_id>
            while (running) {
   b4fc4:	7923      	ldrb	r3, [r4, #4]
   b4fc6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4fca:	b113      	cbz	r3, b4fd2 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4fcc:	f001 fa1a 	bl	b6404 <os_thread_yield>
            while (running) {
   b4fd0:	e7f8      	b.n	b4fc4 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b4fd2:	68a0      	ldr	r0, [r4, #8]
   b4fd4:	4629      	mov	r1, r5
   b4fd6:	f001 fa2d 	bl	b6434 <os_timer_destroy>
            handle = nullptr;
   b4fda:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4fdc:	f104 000c 	add.w	r0, r4, #12
   b4fe0:	f7ff ffd9 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
    }
   b4fe4:	4620      	mov	r0, r4
   b4fe6:	bd38      	pop	{r3, r4, r5, pc}
   b4fe8:	000bb118 	.word	0x000bb118

000b4fec <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4fec:	b510      	push	{r4, lr}
   b4fee:	4604      	mov	r4, r0
    }
   b4ff0:	f7ff ffda 	bl	b4fa8 <_ZN5TimerD1Ev>
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	211c      	movs	r1, #28
   b4ff8:	f7ff fdcf 	bl	b4b9a <_ZdlPvj>
   b4ffc:	4620      	mov	r0, r4
   b4ffe:	bd10      	pop	{r4, pc}

000b5000 <_ZN10PriceClassC1Ev>:
#define PRICE_INDEX 20
#define MILLISEC_HOUR 3600000
#define MILLISEC_MINUTE 60000

// Constructor
PriceClass::PriceClass()
   b5000:	b5f0      	push	{r4, r5, r6, r7, lr}
	  : _Node_allocator()
   b5002:	1d03      	adds	r3, r0, #4
      _M_header._M_color = _S_red;
   b5004:	2500      	movs	r5, #0
      _M_header._M_left = &_M_header;
   b5006:	e9c0 5302 	strd	r5, r3, [r0, #8]
      _M_node_count = 0;
   b500a:	e9c0 3504 	strd	r3, r5, [r0, #16]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b500e:	f100 034c 	add.w	r3, r0, #76	; 0x4c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5012:	e9c0 5507 	strd	r5, r5, [r0, #28]
   b5016:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
   b501a:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
      { _M_string_length = __length; }
   b501e:	e9c0 3511 	strd	r3, r5, [r0, #68]	; 0x44
      _M_header._M_color = _S_red;
   b5022:	7105      	strb	r5, [r0, #4]
    : newPricesReceived{false},
      messageDataReady{false}
   b5024:	8305      	strh	r5, [r0, #24]
      { __c1 = __c2; }
   b5026:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
PriceClass::PriceClass()
   b502a:	b089      	sub	sp, #36	; 0x24
   b502c:	4604      	mov	r4, r0
{
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b502e:	201c      	movs	r0, #28
   b5030:	f7ff fdab 	bl	b4b8a <_Znwj>
   b5034:	4606      	mov	r6, r0
   b5036:	2800      	cmp	r0, #0
   b5038:	d033      	beq.n	b50a2 <_ZN10PriceClassC1Ev+0xa2>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b503a:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b503c:	9506      	str	r5, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b503e:	f7ff fda4 	bl	b4b8a <_Znwj>
   b5042:	b118      	cbz	r0, b504c <_ZN10PriceClassC1Ev+0x4c>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5044:	4b19      	ldr	r3, [pc, #100]	; (b50ac <_ZN10PriceClassC1Ev+0xac>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5046:	6084      	str	r4, [r0, #8]
   b5048:	e9c0 3500 	strd	r3, r5, [r0]
   b504c:	9004      	str	r0, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b504e:	ad04      	add	r5, sp, #16
   b5050:	e895 0003 	ldmia.w	r5, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5054:	4b16      	ldr	r3, [pc, #88]	; (b50b0 <_ZN10PriceClassC1Ev+0xb0>)
   b5056:	6033      	str	r3, [r6, #0]
   b5058:	2300      	movs	r3, #0
   b505a:	7133      	strb	r3, [r6, #4]
   b505c:	60b3      	str	r3, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
   b505e:	f106 020c 	add.w	r2, r6, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5062:	af02      	add	r7, sp, #8
   b5064:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5068:	e892 0003 	ldmia.w	r2, {r0, r1}
   b506c:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5070:	e897 0003 	ldmia.w	r7, {r0, r1}
   b5074:	e882 0003 	stmia.w	r2, {r0, r1}
   b5078:	4a0e      	ldr	r2, [pc, #56]	; (b50b4 <_ZN10PriceClassC1Ev+0xb4>)
   b507a:	6172      	str	r2, [r6, #20]
      __a = _GLIBCXX_MOVE(__b);
   b507c:	69b2      	ldr	r2, [r6, #24]
   b507e:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b5080:	4a0d      	ldr	r2, [pc, #52]	; (b50b8 <_ZN10PriceClassC1Ev+0xb8>)
   b5082:	61b2      	str	r2, [r6, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5084:	9306      	str	r3, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5086:	9301      	str	r3, [sp, #4]
   b5088:	2301      	movs	r3, #1
   b508a:	9300      	str	r3, [sp, #0]
   b508c:	4a0b      	ldr	r2, [pc, #44]	; (b50bc <_ZN10PriceClassC1Ev+0xbc>)
   b508e:	4633      	mov	r3, r6
   b5090:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5094:	f106 0008 	add.w	r0, r6, #8
   b5098:	f001 f9c4 	bl	b6424 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b509c:	4628      	mov	r0, r5
   b509e:	f7ff ff7a 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
}
   b50a2:	4620      	mov	r0, r4
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b50a4:	65e6      	str	r6, [r4, #92]	; 0x5c
}
   b50a6:	b009      	add	sp, #36	; 0x24
   b50a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b50aa:	bf00      	nop
   b50ac:	000b5261 	.word	0x000b5261
   b50b0:	000bb118 	.word	0x000bb118
   b50b4:	000b4edb 	.word	0x000b4edb
   b50b8:	000b4e7b 	.word	0x000b4e7b
   b50bc:	000b4e21 	.word	0x000b4e21

000b50c0 <_ZN10PriceClass18requestPriceUpdateEi>:
// #####################################################################
/// @brief This method makes a publish request, to fire off the webhook,
// which in turn will fire off the "prices" event, when data is ready.
// #####################################################################
void PriceClass::requestPriceUpdate(int day)
{
   b50c0:	b570      	push	{r4, r5, r6, lr}
   b50c2:	b0a0      	sub	sp, #128	; 0x80
   b50c4:	460c      	mov	r4, r1
   b50c6:	4605      	mov	r5, r0
    String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b50c8:	f001 ffae 	bl	b7028 <_ZN9TimeClass4yearEv>
   b50cc:	4940      	ldr	r1, [pc, #256]	; (b51d0 <_ZN10PriceClass18requestPriceUpdateEi+0x110>)
   b50ce:	4602      	mov	r2, r0
   b50d0:	a808      	add	r0, sp, #32
   b50d2:	f001 fdd7 	bl	b6c84 <_ZN6String6formatEPKcz>
	StringSumHelper(const String &s) : String(s) {}
   b50d6:	a908      	add	r1, sp, #32
   b50d8:	a810      	add	r0, sp, #64	; 0x40
   b50da:	f001 fd6e 	bl	b6bba <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b50de:	f001 ff9b 	bl	b7018 <_ZN9TimeClass5monthEv>
   b50e2:	493c      	ldr	r1, [pc, #240]	; (b51d4 <_ZN10PriceClass18requestPriceUpdateEi+0x114>)
   b50e4:	4602      	mov	r2, r0
   b50e6:	a80c      	add	r0, sp, #48	; 0x30
   b50e8:	f001 fdcc 	bl	b6c84 <_ZN6String6formatEPKcz>
   b50ec:	a90c      	add	r1, sp, #48	; 0x30
   b50ee:	a810      	add	r0, sp, #64	; 0x40
   b50f0:	f001 fdbc 	bl	b6c6c <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day\": \"%02d\", ", day) +
   b50f4:	4622      	mov	r2, r4
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b50f6:	4606      	mov	r6, r0
                  String::format("\"day\": \"%02d\", ", day) +
   b50f8:	4937      	ldr	r1, [pc, #220]	; (b51d8 <_ZN10PriceClass18requestPriceUpdateEi+0x118>)
   b50fa:	a814      	add	r0, sp, #80	; 0x50
   b50fc:	f001 fdc2 	bl	b6c84 <_ZN6String6formatEPKcz>
   b5100:	a914      	add	r1, sp, #80	; 0x50
   b5102:	4630      	mov	r0, r6
   b5104:	f001 fdb2 	bl	b6c6c <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b5108:	1ca2      	adds	r2, r4, #2
   b510a:	4934      	ldr	r1, [pc, #208]	; (b51dc <_ZN10PriceClass18requestPriceUpdateEi+0x11c>)
                  String::format("\"day\": \"%02d\", ", day) +
   b510c:	4606      	mov	r6, r0
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b510e:	a818      	add	r0, sp, #96	; 0x60
   b5110:	f001 fdb8 	bl	b6c84 <_ZN6String6formatEPKcz>
   b5114:	a918      	add	r1, sp, #96	; 0x60
   b5116:	4630      	mov	r0, r6
   b5118:	f001 fda8 	bl	b6c6c <_ZplRK15StringSumHelperRK6String>
   b511c:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b511e:	f001 ff57 	bl	b6fd0 <_ZN9TimeClass4hourEv>
   b5122:	492f      	ldr	r1, [pc, #188]	; (b51e0 <_ZN10PriceClass18requestPriceUpdateEi+0x120>)
   b5124:	4602      	mov	r2, r0
   b5126:	a81c      	add	r0, sp, #112	; 0x70
   b5128:	f001 fdac 	bl	b6c84 <_ZN6String6formatEPKcz>
   b512c:	a91c      	add	r1, sp, #112	; 0x70
   b512e:	4620      	mov	r0, r4
   b5130:	f001 fd9c 	bl	b6c6c <_ZplRK15StringSumHelperRK6String>
   b5134:	4601      	mov	r1, r0
   b5136:	a804      	add	r0, sp, #16
   b5138:	f001 fd3f 	bl	b6bba <_ZN6StringC1ERKS_>
   b513c:	a81c      	add	r0, sp, #112	; 0x70
   b513e:	f001 fcce 	bl	b6ade <_ZN6StringD1Ev>
   b5142:	a818      	add	r0, sp, #96	; 0x60
   b5144:	f001 fccb 	bl	b6ade <_ZN6StringD1Ev>
   b5148:	a814      	add	r0, sp, #80	; 0x50
   b514a:	f001 fcc8 	bl	b6ade <_ZN6StringD1Ev>
   b514e:	a80c      	add	r0, sp, #48	; 0x30
   b5150:	f001 fcc5 	bl	b6ade <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5154:	a810      	add	r0, sp, #64	; 0x40
   b5156:	f001 fcc2 	bl	b6ade <_ZN6StringD1Ev>
   b515a:	a808      	add	r0, sp, #32
   b515c:	f001 fcbf 	bl	b6ade <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5160:	4b20      	ldr	r3, [pc, #128]	; (b51e4 <_ZN10PriceClass18requestPriceUpdateEi+0x124>)
   b5162:	9a04      	ldr	r2, [sp, #16]
   b5164:	781b      	ldrb	r3, [r3, #0]
   b5166:	f88d 3000 	strb.w	r3, [sp]
   b516a:	491f      	ldr	r1, [pc, #124]	; (b51e8 <_ZN10PriceClass18requestPriceUpdateEi+0x128>)
   b516c:	233c      	movs	r3, #60	; 0x3c
   b516e:	a81c      	add	r0, sp, #112	; 0x70
   b5170:	f002 f966 	bl	b7440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b5174:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   b5176:	b17c      	cbz	r4, b5198 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
      if (--_M_use_count == 0)
   b5178:	6863      	ldr	r3, [r4, #4]
   b517a:	3b01      	subs	r3, #1
   b517c:	6063      	str	r3, [r4, #4]
   b517e:	b95b      	cbnz	r3, b5198 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
          _M_dispose();
   b5180:	6823      	ldr	r3, [r4, #0]
   b5182:	4620      	mov	r0, r4
   b5184:	689b      	ldr	r3, [r3, #8]
   b5186:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5188:	68a3      	ldr	r3, [r4, #8]
   b518a:	3b01      	subs	r3, #1
   b518c:	60a3      	str	r3, [r4, #8]
   b518e:	b91b      	cbnz	r3, b5198 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
            _M_destroy();
   b5190:	6823      	ldr	r3, [r4, #0]
   b5192:	4620      	mov	r0, r4
   b5194:	68db      	ldr	r3, [r3, #12]
   b5196:	4798      	blx	r3
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b5198:	f001 ff09 	bl	b6fae <_ZN9TimeClass3nowEv>
   b519c:	4602      	mov	r2, r0
   b519e:	17c3      	asrs	r3, r0, #31
   b51a0:	a81c      	add	r0, sp, #112	; 0x70
   b51a2:	f001 feab 	bl	b6efc <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b51a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	return __builtin_strlen(__s);
   b51a8:	9303      	str	r3, [sp, #12]
   b51aa:	4618      	mov	r0, r3
   b51ac:	f7ff fc92 	bl	b4ad4 <strlen>
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
   b51b0:	9b03      	ldr	r3, [sp, #12]
   b51b2:	6caa      	ldr	r2, [r5, #72]	; 0x48
   b51b4:	9000      	str	r0, [sp, #0]
   b51b6:	2100      	movs	r1, #0
   b51b8:	f105 0044 	add.w	r0, r5, #68	; 0x44
   b51bc:	f003 fb90 	bl	b88e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>

    // Trigger the integration
    Particle.publish("elpriser", data);
    lastUpdate = Time.timeStr();
   b51c0:	a81c      	add	r0, sp, #112	; 0x70
   b51c2:	f001 fc8c 	bl	b6ade <_ZN6StringD1Ev>
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b51c6:	a804      	add	r0, sp, #16
   b51c8:	f001 fc89 	bl	b6ade <_ZN6StringD1Ev>
}
   b51cc:	b020      	add	sp, #128	; 0x80
   b51ce:	bd70      	pop	{r4, r5, r6, pc}
   b51d0:	000bafc4 	.word	0x000bafc4
   b51d4:	000bafd5 	.word	0x000bafd5
   b51d8:	000bafe7 	.word	0x000bafe7
   b51dc:	000baff7 	.word	0x000baff7
   b51e0:	000bb00b 	.word	0x000bb00b
   b51e4:	2003e5e8 	.word	0x2003e5e8
   b51e8:	000bb01c 	.word	0x000bb01c

000b51ec <_ZN10PriceClass28getpricesSubscriptionHandlerEPKcS1_>:
{
   b51ec:	b510      	push	{r4, lr}
   b51ee:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b51f0:	f001 ff06 	bl	b7000 <_ZN9TimeClass3dayEv>
   b51f4:	4601      	mov	r1, r0
   b51f6:	4620      	mov	r0, r4
}
   b51f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b51fc:	f7ff bf60 	b.w	b50c0 <_ZN10PriceClass18requestPriceUpdateEi>

000b5200 <_ZN10PriceClass12updatePricesEv>:

// ####################################################################
/// @brief This is a public method, for requesting an update on prices.
// ####################################################################
void PriceClass::updatePrices()
{
   b5200:	b510      	push	{r4, lr}
   b5202:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b5204:	f001 fefc 	bl	b7000 <_ZN9TimeClass3dayEv>
   b5208:	4601      	mov	r1, r0
   b520a:	4620      	mov	r0, r4
}
   b520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b5210:	f7ff bf56 	b.w	b50c0 <_ZN10PriceClass18requestPriceUpdateEi>

000b5214 <_ZN10PriceClass14timedCountDownEj>:

// ##########################################################################
/// @brief Small method for setting the timer period, and starting the timer.
// ##########################################################################
void PriceClass::timedCountDown(uint period)
{
   b5214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5216:	4604      	mov	r4, r0
   b5218:	9103      	str	r1, [sp, #12]
    updateTimer->stop();
   b521a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b521c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5220:	f7ff fe9a 	bl	b4f58 <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b5224:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   b5226:	6890      	ldr	r0, [r2, #8]
   b5228:	b140      	cbz	r0, b523c <_ZN10PriceClass14timedCountDownEj+0x28>
   b522a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b522e:	2200      	movs	r2, #0
   b5230:	e9cd 1200 	strd	r1, r2, [sp]
   b5234:	9b03      	ldr	r3, [sp, #12]
   b5236:	2103      	movs	r1, #3
   b5238:	f001 f90c 	bl	b6454 <os_timer_change>
    updateTimer->changePeriod(period);
    updateTimer->start();
   b523c:	6de4      	ldr	r4, [r4, #92]	; 0x5c
        stop(fromISR);
   b523e:	2100      	movs	r1, #0
   b5240:	4620      	mov	r0, r4
   b5242:	f7ff fe89 	bl	b4f58 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b5246:	68a0      	ldr	r0, [r4, #8]
   b5248:	b140      	cbz	r0, b525c <_ZN10PriceClass14timedCountDownEj+0x48>
   b524a:	2300      	movs	r3, #0
   b524c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5250:	e9cd 2300 	strd	r2, r3, [sp]
   b5254:	4619      	mov	r1, r3
   b5256:	461a      	mov	r2, r3
   b5258:	f001 f8fc 	bl	b6454 <os_timer_change>
}
   b525c:	b004      	add	sp, #16
   b525e:	bd10      	pop	{r4, pc}

000b5260 <_ZN10PriceClass11timedUpdateEv>:
{
   b5260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5262:	4605      	mov	r5, r0
    uint8_t hourNow = Time.hour();
   b5264:	f001 feb4 	bl	b6fd0 <_ZN9TimeClass4hourEv>
   b5268:	b2c4      	uxtb	r4, r0
    if (hourNow == 11 || hourNow == 23)
   b526a:	2c0b      	cmp	r4, #11
   b526c:	d001      	beq.n	b5272 <_ZN10PriceClass11timedUpdateEv+0x12>
   b526e:	2c17      	cmp	r4, #23
   b5270:	d110      	bne.n	b5294 <_ZN10PriceClass11timedUpdateEv+0x34>
        timerPeriod = (12 * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b5272:	f001 feb9 	bl	b6fe8 <_ZN9TimeClass6minuteEv>
        timedCountDown(timerPeriod);
   b5276:	4b12      	ldr	r3, [pc, #72]	; (b52c0 <_ZN10PriceClass11timedUpdateEv+0x60>)
   b5278:	4912      	ldr	r1, [pc, #72]	; (b52c4 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b527a:	fb01 3100 	mla	r1, r1, r0, r3
   b527e:	4628      	mov	r0, r5
   b5280:	f7ff ffc8 	bl	b5214 <_ZN10PriceClass14timedCountDownEj>
        requestPriceUpdate(Time.day());
   b5284:	f001 febc 	bl	b7000 <_ZN9TimeClass3dayEv>
   b5288:	4601      	mov	r1, r0
   b528a:	4628      	mov	r0, r5
}
   b528c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        requestPriceUpdate(Time.day());
   b5290:	f7ff bf16 	b.w	b50c0 <_ZN10PriceClass18requestPriceUpdateEi>
        if (hourNow < 11)
   b5294:	2c0a      	cmp	r4, #10
   b5296:	4f0b      	ldr	r7, [pc, #44]	; (b52c4 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b5298:	4e0b      	ldr	r6, [pc, #44]	; (b52c8 <_ZN10PriceClass11timedUpdateEv+0x68>)
   b529a:	d80b      	bhi.n	b52b4 <_ZN10PriceClass11timedUpdateEv+0x54>
            timerPeriod = ((11 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b529c:	f001 fea4 	bl	b6fe8 <_ZN9TimeClass6minuteEv>
   b52a0:	f1c4 040b 	rsb	r4, r4, #11
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b52a4:	4378      	muls	r0, r7
            timedCountDown(timerPeriod);
   b52a6:	fb06 0104 	mla	r1, r6, r4, r0
   b52aa:	4628      	mov	r0, r5
}
   b52ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            timedCountDown(timerPeriod);
   b52b0:	f7ff bfb0 	b.w	b5214 <_ZN10PriceClass14timedCountDownEj>
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b52b4:	f001 fe98 	bl	b6fe8 <_ZN9TimeClass6minuteEv>
   b52b8:	f1c4 0417 	rsb	r4, r4, #23
   b52bc:	e7f2      	b.n	b52a4 <_ZN10PriceClass11timedUpdateEv+0x44>
   b52be:	bf00      	nop
   b52c0:	02932e00 	.word	0x02932e00
   b52c4:	ffff15a0 	.word	0xffff15a0
   b52c8:	0036ee80 	.word	0x0036ee80

000b52cc <_ZN10PriceClass13pricesUpdatedEv>:
/// @brief Method for checking if new price data has not yet been read.
// ####################################################################
bool PriceClass::pricesUpdated()
{
    return newPricesReceived;
}
   b52cc:	7e00      	ldrb	r0, [r0, #24]
   b52ce:	4770      	bx	lr

000b52d0 <_ZN10PriceClass18isMessageDataReadyEv>:

bool PriceClass::isMessageDataReady()
{
    return messageDataReady;
   b52d0:	7e40      	ldrb	r0, [r0, #25]
   b52d2:	4770      	bx	lr

000b52d4 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b52d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b52d6:	2300      	movs	r3, #0
   b52d8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b52da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b52dc:	4604      	mov	r4, r0
   b52de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b52e0:	b12b      	cbz	r3, b52ee <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b52e2:	2202      	movs	r2, #2
   b52e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b52e6:	68eb      	ldr	r3, [r5, #12]
   b52e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b52ea:	68ab      	ldr	r3, [r5, #8]
   b52ec:	60a3      	str	r3, [r4, #8]
    }
   b52ee:	4620      	mov	r0, r4
   b52f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b52f4 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
   b52f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b52f6:	b091      	sub	sp, #68	; 0x44
   b52f8:	ad02      	add	r5, sp, #8
   b52fa:	e885 0006 	stmia.w	r5, {r1, r2}
   b52fe:	4606      	mov	r6, r0
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5300:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5304:	ac05      	add	r4, sp, #20
   b5306:	e884 0005 	stmia.w	r4, {r0, r2}
   b530a:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b530c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b530e:	2300      	movs	r3, #0
   b5310:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5312:	f7ff fc3a 	bl	b4b8a <_Znwj>
   b5316:	4602      	mov	r2, r0
   b5318:	b120      	cbz	r0, b5324 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x30>
      _Bind(_Bind&&) = default;
   b531a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b531e:	e882 0003 	stmia.w	r2, {r0, r1}
   b5322:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b5324:	4b12      	ldr	r3, [pc, #72]	; (b5370 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x7c>)
   b5326:	930b      	str	r3, [sp, #44]	; 0x2c
        return subscribe_wiring(eventName, handler, scope);
   b5328:	a908      	add	r1, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b532a:	4b12      	ldr	r3, [pc, #72]	; (b5374 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x80>)
   b532c:	930a      	str	r3, [sp, #40]	; 0x28
   b532e:	a80c      	add	r0, sp, #48	; 0x30
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5330:	9208      	str	r2, [sp, #32]
   b5332:	f7ff ffcf 	bl	b52d4 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    static particle::Future<bool> publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags);

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   b5336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b5338:	b18b      	cbz	r3, b535e <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   b533a:	2010      	movs	r0, #16
   b533c:	f7ff fc25 	bl	b4b8a <_Znwj>
   b5340:	4604      	mov	r4, r0
   b5342:	b160      	cbz	r0, b535e <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
   b5344:	a90c      	add	r1, sp, #48	; 0x30
   b5346:	f7ff ffc5 	bl	b52d4 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-function-type"
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   b534a:	2300      	movs	r3, #0
   b534c:	e9cd 3300 	strd	r3, r3, [sp]
   b5350:	4909      	ldr	r1, [pc, #36]	; (b5378 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x84>)
   b5352:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b5356:	4622      	mov	r2, r4
   b5358:	4630      	mov	r0, r6
   b535a:	f001 fa77 	bl	b684c <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   b535e:	a80c      	add	r0, sp, #48	; 0x30
   b5360:	f7ff fe19 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
   b5364:	a808      	add	r0, sp, #32
   b5366:	f7ff fe16 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
    }
   b536a:	b011      	add	sp, #68	; 0x44
   b536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b536e:	bf00      	nop
   b5370:	000b4e5b 	.word	0x000b4e5b
   b5374:	000b4e9b 	.word	0x000b4e9b
   b5378:	000b7257 	.word	0x000b7257

000b537c <_ZN10PriceClass17initSubscriptionsEv>:
{
   b537c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b537e:	b085      	sub	sp, #20
   b5380:	2700      	movs	r7, #0
    return subscribe(name, handler, ALL_DEVICES);
}

template<typename T>
inline bool CloudClass::subscribe(const char* name, void (T::*handler)(const char*, const char*), T* instance) {
    return subscribe(name, handler, instance, ALL_DEVICES);
   b5382:	2601      	movs	r6, #1
   b5384:	4b0f      	ldr	r3, [pc, #60]	; (b53c4 <_ZN10PriceClass17initSubscriptionsEv+0x48>)
   b5386:	9302      	str	r3, [sp, #8]
   b5388:	9703      	str	r7, [sp, #12]
   b538a:	9600      	str	r6, [sp, #0]
   b538c:	ad02      	add	r5, sp, #8
   b538e:	4604      	mov	r4, r0
   b5390:	e895 0006 	ldmia.w	r5, {r1, r2}
   b5394:	4603      	mov	r3, r0
   b5396:	480c      	ldr	r0, [pc, #48]	; (b53c8 <_ZN10PriceClass17initSubscriptionsEv+0x4c>)
   b5398:	f7ff ffac 	bl	b52f4 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    Particle.subscribe("get_prices", &PriceClass::getpricesSubscriptionHandler, this);
   b539c:	4b0b      	ldr	r3, [pc, #44]	; (b53cc <_ZN10PriceClass17initSubscriptionsEv+0x50>)
   b539e:	9600      	str	r6, [sp, #0]
   b53a0:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b53a4:	480a      	ldr	r0, [pc, #40]	; (b53d0 <_ZN10PriceClass17initSubscriptionsEv+0x54>)
   b53a6:	e895 0006 	ldmia.w	r5, {r1, r2}
   b53aa:	4623      	mov	r3, r4
   b53ac:	f7ff ffa2 	bl	b52f4 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    updatePrices();
   b53b0:	4620      	mov	r0, r4
   b53b2:	f7ff ff25 	bl	b5200 <_ZN10PriceClass12updatePricesEv>
    timedUpdate();
   b53b6:	4620      	mov	r0, r4
}
   b53b8:	b005      	add	sp, #20
   b53ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    timedUpdate();
   b53be:	f7ff bf4f 	b.w	b5260 <_ZN10PriceClass11timedUpdateEv>
   b53c2:	bf00      	nop
   b53c4:	000b58dd 	.word	0x000b58dd
   b53c8:	000bb053 	.word	0x000bb053
   b53cc:	000b51ed 	.word	0x000b51ed
   b53d0:	000bb04f 	.word	0x000bb04f

000b53d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b53d4:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b53d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b53da:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b53dc:	6003      	str	r3, [r0, #0]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b53de:	460d      	mov	r5, r1
   b53e0:	b1e1      	cbz	r1, b541c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x48>
   b53e2:	4608      	mov	r0, r1
   b53e4:	f7ff fb76 	bl	b4ad4 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b53e8:	280f      	cmp	r0, #15
   b53ea:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b53ee:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b53f0:	d907      	bls.n	b5402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b53f2:	2200      	movs	r2, #0
   b53f4:	a901      	add	r1, sp, #4
   b53f6:	4620      	mov	r0, r4
   b53f8:	f003 f9b4 	bl	b8764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b53fc:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b53fe:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b5400:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b5402:	6820      	ldr	r0, [r4, #0]
   b5404:	4632      	mov	r2, r6
   b5406:	4629      	mov	r1, r5
   b5408:	f003 fa14 	bl	b8834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b540c:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b540e:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b5410:	6063      	str	r3, [r4, #4]
   b5412:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b5414:	4620      	mov	r0, r4
   b5416:	54d1      	strb	r1, [r2, r3]
   b5418:	b002      	add	sp, #8
   b541a:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b541c:	4801      	ldr	r0, [pc, #4]	; (b5424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
   b541e:	f003 f8cb 	bl	b85b8 <_ZSt19__throw_logic_errorPKc>
   b5422:	bf00      	nop
   b5424:	000bb025 	.word	0x000bb025

000b5428 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>:
{
   b5428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!newPricesReceived)
   b542c:	7e0b      	ldrb	r3, [r1, #24]
{
   b542e:	b08c      	sub	sp, #48	; 0x30
   b5430:	4604      	mov	r4, r0
   b5432:	460e      	mov	r6, r1
    if (!newPricesReceived)
   b5434:	b93b      	cbnz	r3, b5446 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x1e>
        return "No prices yet";
   b5436:	493e      	ldr	r1, [pc, #248]	; (b5530 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x108>)
   b5438:	aa06      	add	r2, sp, #24
   b543a:	f7ff ffcb 	bl	b53d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
}
   b543e:	4620      	mov	r0, r4
   b5440:	b00c      	add	sp, #48	; 0x30
   b5442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b5446:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b5448:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b553c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x114>
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b544c:	781d      	ldrb	r5, [r3, #0]
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b544e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b5540 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x118>
    std::string lowHourIntervals{(String)lastIndexedHour};
   b5452:	220a      	movs	r2, #10
   b5454:	4629      	mov	r1, r5
   b5456:	a802      	add	r0, sp, #8
   b5458:	f001 fbcc 	bl	b6bf4 <_ZN6StringC1Ehh>
   b545c:	9902      	ldr	r1, [sp, #8]
   b545e:	aa01      	add	r2, sp, #4
   b5460:	a806      	add	r0, sp, #24
   b5462:	f7ff ffb7 	bl	b53d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b5466:	a802      	add	r0, sp, #8
   b5468:	f001 fb39 	bl	b6ade <_ZN6StringD1Ev>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b546c:	e9d6 790a 	ldrd	r7, r9, [r6, #40]	; 0x28
   b5470:	3708      	adds	r7, #8
    for (const auto &item : lowPriceHours)
   b5472:	f1a7 0308 	sub.w	r3, r7, #8
   b5476:	4599      	cmp	r9, r3
   b5478:	d020      	beq.n	b54bc <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x94>
        if (item.hour > lastIndexedHour + 1)
   b547a:	f817 3c08 	ldrb.w	r3, [r7, #-8]
   b547e:	1c6a      	adds	r2, r5, #1
   b5480:	4293      	cmp	r3, r2
   b5482:	dd0f      	ble.n	b54a4 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x7c>
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b5484:	462a      	mov	r2, r5
   b5486:	4641      	mov	r1, r8
   b5488:	a802      	add	r0, sp, #8
   b548a:	f001 fbfb 	bl	b6c84 <_ZN6String6formatEPKcz>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b548e:	a806      	add	r0, sp, #24
   b5490:	9902      	ldr	r1, [sp, #8]
   b5492:	f7ff fd43 	bl	b4f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b5496:	a802      	add	r0, sp, #8
   b5498:	f001 fb21 	bl	b6ade <_ZN6StringD1Ev>
        lastIndexedHour = item.hour;
   b549c:	f817 5c08 	ldrb.w	r5, [r7, #-8]
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b54a0:	3708      	adds	r7, #8
      {
	++_M_current;
	return *this;
   b54a2:	e7e6      	b.n	b5472 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x4a>
        else if (item.hour < lastIndexedHour)
   b54a4:	42ab      	cmp	r3, r5
   b54a6:	d2f9      	bcs.n	b549c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x74>
            if (item.hour + 24 > lastIndexedHour + 1)
   b54a8:	f103 0216 	add.w	r2, r3, #22
   b54ac:	42aa      	cmp	r2, r5
   b54ae:	dae9      	bge.n	b5484 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x5c>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b54b0:	461a      	mov	r2, r3
   b54b2:	4651      	mov	r1, sl
   b54b4:	a802      	add	r0, sp, #8
   b54b6:	f001 fbe5 	bl	b6c84 <_ZN6String6formatEPKcz>
   b54ba:	e7e8      	b.n	b548e <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x66>
    lowHourIntervals.append(String::format(" to %02d", lastIndexedHour));
   b54bc:	462a      	mov	r2, r5
   b54be:	491d      	ldr	r1, [pc, #116]	; (b5534 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x10c>)
   b54c0:	a802      	add	r0, sp, #8
   b54c2:	f001 fbdf 	bl	b6c84 <_ZN6String6formatEPKcz>
   b54c6:	9902      	ldr	r1, [sp, #8]
   b54c8:	a806      	add	r0, sp, #24
   b54ca:	f7ff fd27 	bl	b4f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b54ce:	a802      	add	r0, sp, #8
   b54d0:	f001 fb05 	bl	b6ade <_ZN6StringD1Ev>
    newPricesReceived = false;
   b54d4:	2300      	movs	r3, #0
   b54d6:	7633      	strb	r3, [r6, #24]
    Serial.println("Low Price Intervals:");
   b54d8:	f002 fa06 	bl	b78e8 <_Z16_fetch_usbserialv>
   b54dc:	4916      	ldr	r1, [pc, #88]	; (b5538 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x110>)
   b54de:	f001 fc5e 	bl	b6d9e <_ZN5Print7printlnEPKc>
    Serial.println(lowHourIntervals.c_str());
   b54e2:	f002 fa01 	bl	b78e8 <_Z16_fetch_usbserialv>
   b54e6:	9906      	ldr	r1, [sp, #24]
   b54e8:	f001 fc59 	bl	b6d9e <_ZN5Print7printlnEPKc>
      { return _M_dataplus._M_p; }
   b54ec:	9a06      	ldr	r2, [sp, #24]
	if (__str._M_is_local())
   b54ee:	ad08      	add	r5, sp, #32
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b54f0:	f104 0308 	add.w	r3, r4, #8
	if (__str._M_is_local())
   b54f4:	42aa      	cmp	r2, r5
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b54f6:	6023      	str	r3, [r4, #0]
	if (__str._M_is_local())
   b54f8:	d115      	bne.n	b5526 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xfe>
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   b54fa:	462e      	mov	r6, r5
   b54fc:	af0c      	add	r7, sp, #48	; 0x30
   b54fe:	4632      	mov	r2, r6
   b5500:	ca03      	ldmia	r2!, {r0, r1}
   b5502:	42ba      	cmp	r2, r7
   b5504:	6018      	str	r0, [r3, #0]
   b5506:	6059      	str	r1, [r3, #4]
   b5508:	4616      	mov	r6, r2
   b550a:	f103 0308 	add.w	r3, r3, #8
   b550e:	d1f6      	bne.n	b54fe <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xd6>
      { _M_string_length = __length; }
   b5510:	9b07      	ldr	r3, [sp, #28]
   b5512:	6063      	str	r3, [r4, #4]
      { _M_dispose(); }
   b5514:	a806      	add	r0, sp, #24
      { _M_string_length = __length; }
   b5516:	2300      	movs	r3, #0
      { _M_dataplus._M_p = __p; }
   b5518:	9506      	str	r5, [sp, #24]
      { _M_string_length = __length; }
   b551a:	9307      	str	r3, [sp, #28]
      { __c1 = __c2; }
   b551c:	f88d 3020 	strb.w	r3, [sp, #32]
      { _M_dispose(); }
   b5520:	f003 f942 	bl	b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5524:	e78b      	b.n	b543e <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x16>
      { _M_allocated_capacity = __capacity; }
   b5526:	9b08      	ldr	r3, [sp, #32]
      { _M_dataplus._M_p = __p; }
   b5528:	6022      	str	r2, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b552a:	60a3      	str	r3, [r4, #8]
   b552c:	e7f0      	b.n	b5510 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xe8>
   b552e:	bf00      	nop
   b5530:	000bb05a 	.word	0x000bb05a
   b5534:	000bb084 	.word	0x000bb084
   b5538:	000bb08d 	.word	0x000bb08d
   b553c:	000bb077 	.word	0x000bb077
   b5540:	000bb068 	.word	0x000bb068

000b5544 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b5544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5548:	e9d0 8900 	ldrd	r8, r9, [r0]
   b554c:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b554e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5552:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b5556:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b555a:	4607      	mov	r7, r0
   b555c:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b555e:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5562:	d102      	bne.n	b556a <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5564:	4820      	ldr	r0, [pc, #128]	; (b55e8 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
   b5566:	f003 f82d 	bl	b85c4 <_ZSt20__throw_length_errorPKc>
   b556a:	2c01      	cmp	r4, #1
   b556c:	4622      	mov	r2, r4
   b556e:	bf38      	it	cc
   b5570:	2201      	movcc	r2, #1
   b5572:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b5574:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5578:	d231      	bcs.n	b55de <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b557a:	b394      	cbz	r4, b55e2 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
   b557c:	429c      	cmp	r4, r3
   b557e:	bf28      	it	cs
   b5580:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5582:	00e0      	lsls	r0, r4, #3
   b5584:	f7ff fb01 	bl	b4b8a <_Znwj>
   b5588:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b558a:	1973      	adds	r3, r6, r5
   b558c:	bf1c      	itt	ne
   b558e:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5592:	e9c3 0100 	strdne	r0, r1, [r3]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b5596:	2d00      	cmp	r5, #0
   b5598:	dd04      	ble.n	b55a4 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b559a:	462a      	mov	r2, r5
   b559c:	4641      	mov	r1, r8
   b559e:	4630      	mov	r0, r6
   b55a0:	f003 fc46 	bl	b8e30 <memmove>
      ptrdiff_t __count = __last - __first;
   b55a4:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b55a8:	3508      	adds	r5, #8
      if (__count > 0)
   b55aa:	f1b9 0f00 	cmp.w	r9, #0
   b55ae:	4435      	add	r5, r6
   b55b0:	dd04      	ble.n	b55bc <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b55b2:	464a      	mov	r2, r9
   b55b4:	4651      	mov	r1, sl
   b55b6:	4628      	mov	r0, r5
   b55b8:	f003 fc2c 	bl	b8e14 <memcpy>
      return __result + __count;
   b55bc:	444d      	add	r5, r9
	if (__p)
   b55be:	f1b8 0f00 	cmp.w	r8, #0
   b55c2:	d005      	beq.n	b55d0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b55c4:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b55c6:	4640      	mov	r0, r8
   b55c8:	eba1 0108 	sub.w	r1, r1, r8
   b55cc:	f7ff fae5 	bl	b4b9a <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b55d0:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b55d4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b55d8:	60bc      	str	r4, [r7, #8]
    }
   b55da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b55de:	461c      	mov	r4, r3
   b55e0:	e7cf      	b.n	b5582 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b55e2:	4626      	mov	r6, r4
   b55e4:	e7d1      	b.n	b558a <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
   b55e6:	bf00      	nop
   b55e8:	000bb0a2 	.word	0x000bb0a2

000b55ec <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
   b55ec:	b510      	push	{r4, lr}
   b55ee:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b55f0:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   b55f4:	428c      	cmp	r4, r1
      push_back(const value_type& __x)
   b55f6:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b55f8:	d008      	beq.n	b560c <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b55fa:	b11c      	cbz	r4, b5604 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x18>
   b55fc:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5600:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5604:	685a      	ldr	r2, [r3, #4]
   b5606:	3208      	adds	r2, #8
   b5608:	605a      	str	r2, [r3, #4]
      }
   b560a:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   b560c:	4621      	mov	r1, r4
   b560e:	f7ff ff99 	bl	b5544 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   b5612:	e7fa      	b.n	b560a <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x1e>
   b5614:	0000      	movs	r0, r0
	...

000b5618 <_ZN10PriceClass19assembleMessageDataEv>:
{
   b5618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b561c:	ed2d 8b02 	vpush	{d8}
    if (!messageDataReady)
   b5620:	7e43      	ldrb	r3, [r0, #25]
{
   b5622:	b091      	sub	sp, #68	; 0x44
   b5624:	4604      	mov	r4, r0
    if (!messageDataReady)
   b5626:	b94b      	cbnz	r3, b563c <_ZN10PriceClass19assembleMessageDataEv+0x24>
        Serial.println("Message data isn't ready yet.");
   b5628:	f002 f95e 	bl	b78e8 <_Z16_fetch_usbserialv>
   b562c:	498e      	ldr	r1, [pc, #568]	; (b5868 <_ZN10PriceClass19assembleMessageDataEv+0x250>)
}
   b562e:	b011      	add	sp, #68	; 0x44
   b5630:	ecbd 8b02 	vpop	{d8}
   b5634:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("Message data isn't ready yet.");
   b5638:	f001 bbb1 	b.w	b6d9e <_ZN5Print7printlnEPKc>
    std::string message = "";
   b563c:	498b      	ldr	r1, [pc, #556]	; (b586c <_ZN10PriceClass19assembleMessageDataEv+0x254>)
   b563e:	aa0a      	add	r2, sp, #40	; 0x28
   b5640:	a804      	add	r0, sp, #16
   b5642:	f7ff fec7 	bl	b53d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
      { return iterator(this->_M_impl._M_header._M_left); }
   b5646:	68e5      	ldr	r5, [r4, #12]
      { return iterator(&this->_M_impl._M_header); }
   b5648:	1d27      	adds	r7, r4, #4
    for (const auto &item : messageParts)
   b564a:	42af      	cmp	r7, r5
   b564c:	d009      	beq.n	b5662 <_ZN10PriceClass19assembleMessageDataEv+0x4a>
      { return _M_append(__str._M_data(), __str.size()); }
   b564e:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   b5652:	a804      	add	r0, sp, #16
   b5654:	f003 f9c2 	bl	b89dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
	_M_node = _Rb_tree_increment(_M_node);
   b5658:	4628      	mov	r0, r5
   b565a:	f002 ff4b 	bl	b84f4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b565e:	4605      	mov	r5, r0
	return *this;
   b5660:	e7f3      	b.n	b564a <_ZN10PriceClass19assembleMessageDataEv+0x32>
    Serial.println("Message assembled.");
   b5662:	f002 f941 	bl	b78e8 <_Z16_fetch_usbserialv>
   b5666:	4982      	ldr	r1, [pc, #520]	; (b5870 <_ZN10PriceClass19assembleMessageDataEv+0x258>)
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b5668:	eddf 8a82 	vldr	s17, [pc, #520]	; b5874 <_ZN10PriceClass19assembleMessageDataEv+0x25c>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b566c:	f8df 8208 	ldr.w	r8, [pc, #520]	; b5878 <_ZN10PriceClass19assembleMessageDataEv+0x260>
    Serial.println("Message assembled.");
   b5670:	f001 fb95 	bl	b6d9e <_ZN5Print7printlnEPKc>
      {
	_M_check(__pos, "basic_string::erase");
	if (__n == npos)
	  this->_M_set_length(__pos);
	else if (__n != 0)
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b5674:	9a05      	ldr	r2, [sp, #20]
   b5676:	2a01      	cmp	r2, #1
   b5678:	bf28      	it	cs
   b567a:	2201      	movcs	r2, #1
   b567c:	2100      	movs	r1, #0
   b567e:	a804      	add	r0, sp, #16
   b5680:	f003 f919 	bl	b88b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b5684:	2200      	movs	r2, #0
   b5686:	497c      	ldr	r1, [pc, #496]	; (b5878 <_ZN10PriceClass19assembleMessageDataEv+0x260>)
   b5688:	a804      	add	r0, sp, #16
   b568a:	f003 f9fa 	bl	b8a82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b568e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
   b5692:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b5694:	bf18      	it	ne
   b5696:	6223      	strne	r3, [r4, #32]
    currentHighest.price = 0;
   b5698:	2300      	movs	r3, #0
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b569a:	3001      	adds	r0, #1
    currentHighest.price = 0;
   b569c:	63a3      	str	r3, [r4, #56]	; 0x38
    currentLowest.price = 100;
   b569e:	4b77      	ldr	r3, [pc, #476]	; (b587c <_ZN10PriceClass19assembleMessageDataEv+0x264>)
   b56a0:	6423      	str	r3, [r4, #64]	; 0x40
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b56a2:	b2c5      	uxtb	r5, r0
    currentHourPrices.clear();
   b56a4:	f104 091c 	add.w	r9, r4, #28
    while (bangIndex > 0)
   b56a8:	2d00      	cmp	r5, #0
   b56aa:	f000 8093 	beq.w	b57d4 <_ZN10PriceClass19assembleMessageDataEv+0x1bc>
        indexedHourPrice.hour = stoi(message.substr(HOUR_INDEX, 2));                                      // Hour (hh) converted to int.
   b56ae:	2302      	movs	r3, #2
   b56b0:	220b      	movs	r2, #11
   b56b2:	a904      	add	r1, sp, #16
   b56b4:	a80a      	add	r0, sp, #40	; 0x28
   b56b6:	f003 fa3d 	bl	b8b34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b56ba:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b56be:	f001 f915 	bl	b68ec <__errno>
   b56c2:	f8d0 b000 	ldr.w	fp, [r0]
   b56c6:	f001 f911 	bl	b68ec <__errno>
   b56ca:	2300      	movs	r3, #0
   b56cc:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b56ce:	220a      	movs	r2, #10
   b56d0:	a901      	add	r1, sp, #4
   b56d2:	4650      	mov	r0, sl
   b56d4:	f004 fb38 	bl	b9d48 <strtol>

      if (__endptr == __str)
   b56d8:	9b01      	ldr	r3, [sp, #4]
   b56da:	459a      	cmp	sl, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b56dc:	4606      	mov	r6, r0
      if (__endptr == __str)
   b56de:	d102      	bne.n	b56e6 <_ZN10PriceClass19assembleMessageDataEv+0xce>
	std::__throw_invalid_argument(__name);
   b56e0:	4867      	ldr	r0, [pc, #412]	; (b5880 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b56e2:	f002 ff6c 	bl	b85be <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
   b56e6:	f001 f901 	bl	b68ec <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b56ea:	6803      	ldr	r3, [r0, #0]
   b56ec:	2b22      	cmp	r3, #34	; 0x22
   b56ee:	d102      	bne.n	b56f6 <_ZN10PriceClass19assembleMessageDataEv+0xde>
	std::__throw_out_of_range(__name);
   b56f0:	4863      	ldr	r0, [pc, #396]	; (b5880 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b56f2:	f002 ff6a 	bl	b85ca <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b56f6:	f001 f8f9 	bl	b68ec <__errno>
   b56fa:	6803      	ldr	r3, [r0, #0]
   b56fc:	b91b      	cbnz	r3, b5706 <_ZN10PriceClass19assembleMessageDataEv+0xee>
   b56fe:	f001 f8f5 	bl	b68ec <__errno>
   b5702:	f8c0 b000 	str.w	fp, [r0]
      { _M_dispose(); }
   b5706:	a80a      	add	r0, sp, #40	; 0x28
   b5708:	f88d 6008 	strb.w	r6, [sp, #8]
   b570c:	f003 f84c 	bl	b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b5710:	f1a5 0315 	sub.w	r3, r5, #21
   b5714:	2214      	movs	r2, #20
   b5716:	a904      	add	r1, sp, #16
   b5718:	a80a      	add	r0, sp, #40	; 0x28
   b571a:	f003 fa0b 	bl	b8b34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b571e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b5720:	f001 f8e4 	bl	b68ec <__errno>
   b5724:	f8d0 a000 	ldr.w	sl, [r0]
   b5728:	f001 f8e0 	bl	b68ec <__errno>
   b572c:	2300      	movs	r3, #0
   b572e:	6003      	str	r3, [r0, #0]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5730:	a901      	add	r1, sp, #4
   b5732:	4630      	mov	r0, r6
   b5734:	f004 fa2a 	bl	b9b8c <strtof>
      if (__endptr == __str)
   b5738:	9b01      	ldr	r3, [sp, #4]
   b573a:	429e      	cmp	r6, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b573c:	eeb0 8a40 	vmov.f32	s16, s0
      if (__endptr == __str)
   b5740:	d101      	bne.n	b5746 <_ZN10PriceClass19assembleMessageDataEv+0x12e>
	std::__throw_invalid_argument(__name);
   b5742:	4850      	ldr	r0, [pc, #320]	; (b5884 <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b5744:	e7cd      	b.n	b56e2 <_ZN10PriceClass19assembleMessageDataEv+0xca>
      else if (errno == ERANGE
   b5746:	f001 f8d1 	bl	b68ec <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b574a:	6803      	ldr	r3, [r0, #0]
   b574c:	2b22      	cmp	r3, #34	; 0x22
   b574e:	d101      	bne.n	b5754 <_ZN10PriceClass19assembleMessageDataEv+0x13c>
	std::__throw_out_of_range(__name);
   b5750:	484c      	ldr	r0, [pc, #304]	; (b5884 <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b5752:	e7ce      	b.n	b56f2 <_ZN10PriceClass19assembleMessageDataEv+0xda>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b5754:	f001 f8ca 	bl	b68ec <__errno>
   b5758:	6803      	ldr	r3, [r0, #0]
   b575a:	b91b      	cbnz	r3, b5764 <_ZN10PriceClass19assembleMessageDataEv+0x14c>
   b575c:	f001 f8c6 	bl	b68ec <__errno>
   b5760:	f8c0 a000 	str.w	sl, [r0]
   b5764:	eec8 7a28 	vdiv.f32	s15, s16, s17
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b5768:	ae02      	add	r6, sp, #8
   b576a:	a80a      	add	r0, sp, #40	; 0x28
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b576c:	edcd 7a03 	vstr	s15, [sp, #12]
   b5770:	f003 f81a 	bl	b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b5774:	4631      	mov	r1, r6
   b5776:	4648      	mov	r0, r9
   b5778:	f7ff ff38 	bl	b55ec <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
        if (indexedHourPrice.price > currentHighest.price)
   b577c:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   b5780:	eddd 7a03 	vldr	s15, [sp, #12]
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b5784:	9a05      	ldr	r2, [sp, #20]
   b5786:	eef4 7ac7 	vcmpe.f32	s15, s14
   b578a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentHighest = indexedHourPrice;
   b578e:	bfc2      	ittt	gt
   b5790:	e9d6 0100 	ldrdgt	r0, r1, [r6]
   b5794:	f104 0334 	addgt.w	r3, r4, #52	; 0x34
   b5798:	e9c3 0100 	strdgt	r0, r1, [r3]
        if (indexedHourPrice.price < currentLowest.price)
   b579c:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   b57a0:	eef4 7ac7 	vcmpe.f32	s15, s14
   b57a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentLowest = indexedHourPrice;
   b57a8:	bf42      	ittt	mi
   b57aa:	e9d6 0100 	ldrdmi	r0, r1, [r6]
   b57ae:	f104 033c 	addmi.w	r3, r4, #60	; 0x3c
   b57b2:	e9c3 0100 	strdmi	r0, r1, [r3]
   b57b6:	42aa      	cmp	r2, r5
   b57b8:	bf28      	it	cs
   b57ba:	462a      	movcs	r2, r5
   b57bc:	2100      	movs	r1, #0
   b57be:	a804      	add	r0, sp, #16
   b57c0:	f003 f879 	bl	b88b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b57c4:	2200      	movs	r2, #0
   b57c6:	4641      	mov	r1, r8
   b57c8:	a804      	add	r0, sp, #16
   b57ca:	f003 f95a 	bl	b8a82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b57ce:	3001      	adds	r0, #1
   b57d0:	b2c5      	uxtb	r5, r0
    while (bangIndex > 0)
   b57d2:	e769      	b.n	b56a8 <_ZN10PriceClass19assembleMessageDataEv+0x90>
    double difference = currentHighest.price - currentLowest.price;
   b57d4:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
   b57d8:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   b57dc:	ee77 7ac8 	vsub.f32	s15, s15, s16
            lowPriceHours.push_back(item);
   b57e0:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    double difference = currentHighest.price - currentLowest.price;
   b57e4:	ee17 0a90 	vmov	r0, s15
   b57e8:	f7fe fd7e 	bl	b42e8 <__aeabi_f2d>
    double lowThreshold = currentLowest.price + difference * LOW_THRESHOLD_FACTOR;
   b57ec:	a31c      	add	r3, pc, #112	; (adr r3, b5860 <_ZN10PriceClass19assembleMessageDataEv+0x248>)
   b57ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57f2:	f7fe fdd1 	bl	b4398 <__aeabi_dmul>
   b57f6:	4680      	mov	r8, r0
   b57f8:	ee18 0a10 	vmov	r0, s16
   b57fc:	4689      	mov	r9, r1
   b57fe:	f7fe fd73 	bl	b42e8 <__aeabi_f2d>
   b5802:	4602      	mov	r2, r0
   b5804:	460b      	mov	r3, r1
   b5806:	4640      	mov	r0, r8
   b5808:	4649      	mov	r1, r9
   b580a:	f7fe fc0f 	bl	b402c <__adddf3>
   b580e:	e9d4 5607 	ldrd	r5, r6, [r4, #28]
   b5812:	4680      	mov	r8, r0
   b5814:	4689      	mov	r9, r1
    for (const auto &item : currentHourPrices)
   b5816:	42ae      	cmp	r6, r5
   b5818:	d00f      	beq.n	b583a <_ZN10PriceClass19assembleMessageDataEv+0x222>
        if (item.price < lowThreshold)
   b581a:	6868      	ldr	r0, [r5, #4]
   b581c:	f7fe fd64 	bl	b42e8 <__aeabi_f2d>
   b5820:	4602      	mov	r2, r0
   b5822:	460b      	mov	r3, r1
   b5824:	4640      	mov	r0, r8
   b5826:	4649      	mov	r1, r9
   b5828:	f7ff f846 	bl	b48b8 <__aeabi_dcmpgt>
   b582c:	b118      	cbz	r0, b5836 <_ZN10PriceClass19assembleMessageDataEv+0x21e>
            lowPriceHours.push_back(item);
   b582e:	4629      	mov	r1, r5
   b5830:	4650      	mov	r0, sl
   b5832:	f7ff fedb 	bl	b55ec <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
      operator++() _GLIBCXX_NOEXCEPT
   b5836:	3508      	adds	r5, #8
	return *this;
   b5838:	e7ed      	b.n	b5816 <_ZN10PriceClass19assembleMessageDataEv+0x1fe>
    messageDataReady = false;
   b583a:	2500      	movs	r5, #0
	_M_erase(_M_begin());
   b583c:	68a0      	ldr	r0, [r4, #8]
   b583e:	7665      	strb	r5, [r4, #25]
   b5840:	f7ff fb97 	bl	b4f72 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
    newPricesReceived = true;
   b5844:	2301      	movs	r3, #1
      _M_header._M_left = &_M_header;
   b5846:	e9c4 5702 	strd	r5, r7, [r4, #8]
      _M_node_count = 0;
   b584a:	e9c4 7504 	strd	r7, r5, [r4, #16]
   b584e:	7623      	strb	r3, [r4, #24]
      { _M_dispose(); }
   b5850:	a804      	add	r0, sp, #16
   b5852:	f002 ffa9 	bl	b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
   b5856:	b011      	add	sp, #68	; 0x44
   b5858:	ecbd 8b02 	vpop	{d8}
   b585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5860:	33333333 	.word	0x33333333
   b5864:	3fd33333 	.word	0x3fd33333
   b5868:	000bb0bc 	.word	0x000bb0bc
   b586c:	000baf94 	.word	0x000baf94
   b5870:	000bb0da 	.word	0x000bb0da
   b5874:	447a0000 	.word	0x447a0000
   b5878:	000bb0ed 	.word	0x000bb0ed
   b587c:	42c80000 	.word	0x42c80000
   b5880:	000bb0ef 	.word	0x000bb0ef
   b5884:	000bb0f4 	.word	0x000bb0f4

000b5888 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b588a:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b588c:	4616      	mov	r6, r2
   b588e:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b5890:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b5892:	2201      	movs	r2, #1
      while (__x != 0)
   b5894:	b163      	cbz	r3, b58b0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x28>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5896:	7c1d      	ldrb	r5, [r3, #16]
   b5898:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b589a:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b589e:	4295      	cmp	r5, r2
   b58a0:	bf88      	it	hi
   b58a2:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b58a4:	461d      	mov	r5, r3
   b58a6:	bf96      	itet	ls
   b58a8:	2200      	movls	r2, #0
   b58aa:	463b      	movhi	r3, r7
   b58ac:	4603      	movls	r3, r0
   b58ae:	e7f1      	b.n	b5894 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xc>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b58b0:	b192      	cbz	r2, b58d8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x50>
	{
	  if (__j == begin())
   b58b2:	68ca      	ldr	r2, [r1, #12]
   b58b4:	42aa      	cmp	r2, r5
   b58b6:	d103      	bne.n	b58c0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b58b8:	e9c4 3500 	strd	r3, r5, [r4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b58bc:	4620      	mov	r0, r4
   b58be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b58c0:	4628      	mov	r0, r5
   b58c2:	f002 fe19 	bl	b84f8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b58c6:	7833      	ldrb	r3, [r6, #0]
   b58c8:	7c02      	ldrb	r2, [r0, #16]
   b58ca:	429a      	cmp	r2, r3
   b58cc:	f04f 0300 	mov.w	r3, #0
   b58d0:	d3f2      	bcc.n	b58b8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b58d2:	e9c4 0300 	strd	r0, r3, [r4]
   b58d6:	e7f1      	b.n	b58bc <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x34>
   b58d8:	4628      	mov	r0, r5
   b58da:	e7f4      	b.n	b58c6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x3e>

000b58dc <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_>:
{
   b58dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    messageDataReady = false;
   b58e0:	2300      	movs	r3, #0
   b58e2:	7643      	strb	r3, [r0, #25]
      { return &this->_M_impl._M_header; }
   b58e4:	f100 0a04 	add.w	sl, r0, #4
    messageParts[pricesEvent[7]] = data;
   b58e8:	f891 8007 	ldrb.w	r8, [r1, #7]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b58ec:	6887      	ldr	r7, [r0, #8]
{
   b58ee:	b086      	sub	sp, #24
   b58f0:	4605      	mov	r5, r0
   b58f2:	4691      	mov	r9, r2
      { return &this->_M_impl._M_header; }
   b58f4:	4654      	mov	r4, sl
      while (__x != 0)
   b58f6:	b147      	cbz	r7, b590a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x2e>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b58f8:	7c39      	ldrb	r1, [r7, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b58fa:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b58fe:	4541      	cmp	r1, r8
   b5900:	bf2a      	itet	cs
   b5902:	463c      	movcs	r4, r7
   b5904:	4617      	movcc	r7, r2
   b5906:	461f      	movcs	r7, r3
   b5908:	e7f5      	b.n	b58f6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x1a>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b590a:	45a2      	cmp	sl, r4
   b590c:	d002      	beq.n	b5914 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x38>
   b590e:	7c23      	ldrb	r3, [r4, #16]
   b5910:	4543      	cmp	r3, r8
   b5912:	d931      	bls.n	b5978 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5914:	202c      	movs	r0, #44	; 0x2c
   b5916:	f7ff f938 	bl	b4b8a <_Znwj>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b591a:	f100 031c 	add.w	r3, r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b591e:	6143      	str	r3, [r0, #20]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b5920:	45a2      	cmp	sl, r4
      { _M_string_length = __length; }
   b5922:	f04f 0300 	mov.w	r3, #0
   b5926:	4606      	mov	r6, r0
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b5928:	f880 8010 	strb.w	r8, [r0, #16]
   b592c:	6183      	str	r3, [r0, #24]
   b592e:	7703      	strb	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b5930:	f100 0210 	add.w	r2, r0, #16
   b5934:	d13c      	bne.n	b59b0 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xd4>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b5936:	696b      	ldr	r3, [r5, #20]
   b5938:	b11b      	cbz	r3, b5942 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x66>
   b593a:	6929      	ldr	r1, [r5, #16]
   b593c:	7c0b      	ldrb	r3, [r1, #16]
   b593e:	4543      	cmp	r3, r8
   b5940:	d309      	bcc.n	b5956 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x7a>
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   b5942:	4629      	mov	r1, r5
   b5944:	a804      	add	r0, sp, #16
   b5946:	f7ff ff9f 	bl	b5888 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b594a:	e9dd 4104 	ldrd	r4, r1, [sp, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b594e:	2900      	cmp	r1, #0
   b5950:	d068      	beq.n	b5a24 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5952:	2c00      	cmp	r4, #0
   b5954:	d164      	bne.n	b5a20 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b5956:	458a      	cmp	sl, r1
   b5958:	d062      	beq.n	b5a20 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
			    || _M_impl._M_key_compare(_S_key(__z),
   b595a:	7c30      	ldrb	r0, [r6, #16]
   b595c:	7c0b      	ldrb	r3, [r1, #16]
   b595e:	4298      	cmp	r0, r3
   b5960:	bf2c      	ite	cs
   b5962:	2000      	movcs	r0, #0
   b5964:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b5966:	4653      	mov	r3, sl
   b5968:	460a      	mov	r2, r1
   b596a:	4631      	mov	r1, r6
   b596c:	f002 fdc6 	bl	b84fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b5970:	696b      	ldr	r3, [r5, #20]
   b5972:	3301      	adds	r3, #1
   b5974:	616b      	str	r3, [r5, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b5976:	4634      	mov	r4, r6
	return __builtin_strlen(__s);
   b5978:	4648      	mov	r0, r9
   b597a:	f7ff f8ab 	bl	b4ad4 <strlen>
	return _M_replace(size_type(0), this->size(), __s,
   b597e:	9000      	str	r0, [sp, #0]
   b5980:	69a2      	ldr	r2, [r4, #24]
   b5982:	464b      	mov	r3, r9
   b5984:	2100      	movs	r1, #0
   b5986:	f104 0014 	add.w	r0, r4, #20
   b598a:	f002 ffa9 	bl	b88e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
    if (strlen(data) < 512)
   b598e:	4648      	mov	r0, r9
   b5990:	f7ff f8a0 	bl	b4ad4 <strlen>
   b5994:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   b5998:	d24e      	bcs.n	b5a38 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x15c>
        newPricesReceived = false; // New prices not assembled yet.
   b599a:	f44f 7380 	mov.w	r3, #256	; 0x100
   b599e:	832b      	strh	r3, [r5, #24]
        Serial.println("Message Data Received.");
   b59a0:	f001 ffa2 	bl	b78e8 <_Z16_fetch_usbserialv>
   b59a4:	4926      	ldr	r1, [pc, #152]	; (b5a40 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x164>)
}
   b59a6:	b006      	add	sp, #24
   b59a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Serial.println("Message Data Received.");
   b59ac:	f001 b9f7 	b.w	b6d9e <_ZN5Print7printlnEPKc>
      { return __x < __y; }
   b59b0:	7c23      	ldrb	r3, [r4, #16]
   b59b2:	9203      	str	r2, [sp, #12]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b59b4:	4598      	cmp	r8, r3
   b59b6:	d218      	bcs.n	b59ea <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10e>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b59b8:	68eb      	ldr	r3, [r5, #12]
   b59ba:	429c      	cmp	r4, r3
   b59bc:	d009      	beq.n	b59d2 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
	_M_node = _Rb_tree_decrement(_M_node);
   b59be:	4620      	mov	r0, r4
   b59c0:	f002 fd9a 	bl	b84f8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b59c4:	7c03      	ldrb	r3, [r0, #16]
   b59c6:	9a03      	ldr	r2, [sp, #12]
   b59c8:	4543      	cmp	r3, r8
   b59ca:	d205      	bcs.n	b59d8 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xfc>
      { return static_cast<_Link_type>(__x->_M_right); }
   b59cc:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b59ce:	b953      	cbnz	r3, b59e6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10a>
   b59d0:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b59d2:	4621      	mov	r1, r4
   b59d4:	461c      	mov	r4, r3
   b59d6:	e7ba      	b.n	b594e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b59d8:	4629      	mov	r1, r5
   b59da:	a804      	add	r0, sp, #16
   b59dc:	f7ff ff54 	bl	b5888 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b59e0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   b59e4:	e7f5      	b.n	b59d2 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
   b59e6:	4623      	mov	r3, r4
   b59e8:	e7f3      	b.n	b59d2 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b59ea:	d91b      	bls.n	b5a24 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
	  if (__pos._M_node == _M_rightmost())
   b59ec:	6929      	ldr	r1, [r5, #16]
   b59ee:	428c      	cmp	r4, r1
   b59f0:	d00b      	beq.n	b5a0a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
	_M_node = _Rb_tree_increment(_M_node);
   b59f2:	4620      	mov	r0, r4
   b59f4:	f002 fd7e 	bl	b84f4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b59f8:	7c03      	ldrb	r3, [r0, #16]
   b59fa:	9a03      	ldr	r2, [sp, #12]
   b59fc:	4543      	cmp	r3, r8
	_M_node = _Rb_tree_increment(_M_node);
   b59fe:	4607      	mov	r7, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5a00:	d905      	bls.n	b5a0e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x132>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5a02:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b5a04:	b953      	cbnz	r3, b5a1c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x140>
   b5a06:	4621      	mov	r1, r4
   b5a08:	461f      	mov	r7, r3
   b5a0a:	463c      	mov	r4, r7
   b5a0c:	e79f      	b.n	b594e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5a0e:	4629      	mov	r1, r5
   b5a10:	a804      	add	r0, sp, #16
   b5a12:	f7ff ff39 	bl	b5888 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5a16:	e9dd 7104 	ldrd	r7, r1, [sp, #16]
   b5a1a:	e7f6      	b.n	b5a0a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
   b5a1c:	4601      	mov	r1, r0
   b5a1e:	e7f4      	b.n	b5a0a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5a20:	2001      	movs	r0, #1
   b5a22:	e7a0      	b.n	b5966 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x8a>
      { _M_dispose(); }
   b5a24:	f106 0014 	add.w	r0, r6, #20
   b5a28:	f002 febe 	bl	b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	::operator delete(__p
   b5a2c:	4630      	mov	r0, r6
   b5a2e:	212c      	movs	r1, #44	; 0x2c
   b5a30:	f7ff f8b3 	bl	b4b9a <_ZdlPvj>
   b5a34:	4626      	mov	r6, r4
   b5a36:	e79e      	b.n	b5976 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9a>
}
   b5a38:	b006      	add	sp, #24
   b5a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5a3e:	bf00      	nop
   b5a40:	000bb0f9 	.word	0x000bb0f9

000b5a44 <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
        val_(val) {
   b5a44:	4b01      	ldr	r3, [pc, #4]	; (b5a4c <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b5a46:	2200      	movs	r2, #0
   b5a48:	701a      	strb	r2, [r3, #0]
   b5a4a:	4770      	bx	lr
   b5a4c:	2003e5e8 	.word	0x2003e5e8

000b5a50 <_ZN6Sensor9sensorISREv>:
/// @brief Sensor Interrupt Service Rutine - run when sensor activates the sensor pin.
// This updates the time since last activation, and the time difference (delta) is
// used to calculate a power reading.
// ###################################################################################
void Sensor::sensorISR(void)
{
   b5a50:	b510      	push	{r4, lr}
   b5a52:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5a54:	f000 fcbe 	bl	b63d4 <HAL_Timer_Get_Milli_Seconds>
    unsigned long timeNow = millis();
    unsigned long delta = timeNow - lastReadTime;
   b5a58:	6823      	ldr	r3, [r4, #0]
   b5a5a:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b5a5c:	2b64      	cmp	r3, #100	; 0x64
   b5a5e:	d906      	bls.n	b5a6e <_ZN6Sensor9sensorISREv+0x1e>
    {
        currentPowerReading = WATT_CONVERSION_CONSTANT / delta;
   b5a60:	4a03      	ldr	r2, [pc, #12]	; (b5a70 <_ZN6Sensor9sensorISREv+0x20>)
   b5a62:	fbb2 f3f3 	udiv	r3, r2, r3
        lastReadTime = timeNow;
   b5a66:	e9c4 0300 	strd	r0, r3, [r4]
        newReadingAvaliable = true;
   b5a6a:	2301      	movs	r3, #1
   b5a6c:	7223      	strb	r3, [r4, #8]
    }
}
   b5a6e:	bd10      	pop	{r4, pc}
   b5a70:	0036ee80 	.word	0x0036ee80

000b5a74 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5a74:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b5a76:	6803      	ldr	r3, [r0, #0]
   b5a78:	685a      	ldr	r2, [r3, #4]
   b5a7a:	6899      	ldr	r1, [r3, #8]
   b5a7c:	681b      	ldr	r3, [r3, #0]
   b5a7e:	1054      	asrs	r4, r2, #1
   b5a80:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b5a84:	07d2      	lsls	r2, r2, #31
   b5a86:	bf48      	it	mi
   b5a88:	590a      	ldrmi	r2, [r1, r4]
      }
   b5a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5a8e:	bf48      	it	mi
   b5a90:	58d3      	ldrmi	r3, [r2, r3]
   b5a92:	4718      	bx	r3

000b5a94 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b5a94:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5a96:	b538      	push	{r3, r4, r5, lr}
   b5a98:	4604      	mov	r4, r0
	switch (__op)
   b5a9a:	d102      	bne.n	b5aa2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5a9c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5a9e:	6023      	str	r3, [r4, #0]
	}
   b5aa0:	e003      	b.n	b5aaa <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b5aa2:	2a02      	cmp	r2, #2
   b5aa4:	d003      	beq.n	b5aae <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b5aa6:	2a03      	cmp	r2, #3
   b5aa8:	d00d      	beq.n	b5ac6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b5aaa:	2000      	movs	r0, #0
   b5aac:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5aae:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b5ab0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5ab2:	f7ff f86a 	bl	b4b8a <_Znwj>
   b5ab6:	4603      	mov	r3, r0
   b5ab8:	2800      	cmp	r0, #0
   b5aba:	d0f0      	beq.n	b5a9e <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b5abc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5ac0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5ac4:	e7eb      	b.n	b5a9e <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5ac6:	6800      	ldr	r0, [r0, #0]
   b5ac8:	2800      	cmp	r0, #0
   b5aca:	d0ee      	beq.n	b5aaa <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b5acc:	210c      	movs	r1, #12
   b5ace:	f7ff f864 	bl	b4b9a <_ZdlPvj>
   b5ad2:	e7ea      	b.n	b5aaa <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b5ad4 <_ZN6Sensor10initSensorEv>:

// ##############################################################
/// @brief Initialization. Sets up the sensor pin, and interrupt.
// ##############################################################
void Sensor::initSensor()
{
   b5ad4:	b530      	push	{r4, r5, lr}
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5ad6:	2103      	movs	r1, #3
{
   b5ad8:	b087      	sub	sp, #28
   b5ada:	4604      	mov	r4, r0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5adc:	2008      	movs	r0, #8
   b5ade:	f002 fc27 	bl	b8330 <pinMode>
    _Function_base() : _M_manager(nullptr) { }
   b5ae2:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ae4:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5ae6:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ae8:	f7ff f84f 	bl	b4b8a <_Znwj>
   b5aec:	b118      	cbz	r0, b5af6 <_ZN6Sensor10initSensorEv+0x22>
   b5aee:	4b0f      	ldr	r3, [pc, #60]	; (b5b2c <_ZN6Sensor10initSensorEv+0x58>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5af0:	6084      	str	r4, [r0, #8]
   b5af2:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b5af6:	4b0e      	ldr	r3, [pc, #56]	; (b5b30 <_ZN6Sensor10initSensorEv+0x5c>)
   b5af8:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5afa:	4b0e      	ldr	r3, [pc, #56]	; (b5b34 <_ZN6Sensor10initSensorEv+0x60>)
   b5afc:	9304      	str	r3, [sp, #16]
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b5afe:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5b00:	9002      	str	r0, [sp, #8]
   b5b02:	9300      	str	r3, [sp, #0]
   b5b04:	2201      	movs	r2, #1
   b5b06:	f04f 33ff 	mov.w	r3, #4294967295
   b5b0a:	a902      	add	r1, sp, #8
   b5b0c:	2008      	movs	r0, #8
   b5b0e:	f001 ff3f 	bl	b7990 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b5b12:	9b04      	ldr	r3, [sp, #16]
   b5b14:	b11b      	cbz	r3, b5b1e <_ZN6Sensor10initSensorEv+0x4a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5b16:	a902      	add	r1, sp, #8
   b5b18:	2203      	movs	r2, #3
   b5b1a:	4608      	mov	r0, r1
   b5b1c:	4798      	blx	r3
   b5b1e:	f000 fc59 	bl	b63d4 <HAL_Timer_Get_Milli_Seconds>
    attachInterrupt(KW_SENSOR_PIN, &Sensor::sensorISR, this, RISING); // Attach interrup that will be called when rising
    lastReadTime = millis();
    newReadingAvaliable = false;
   b5b22:	2300      	movs	r3, #0
    lastReadTime = millis();
   b5b24:	6020      	str	r0, [r4, #0]
    newReadingAvaliable = false;
   b5b26:	7223      	strb	r3, [r4, #8]
}
   b5b28:	b007      	add	sp, #28
   b5b2a:	bd30      	pop	{r4, r5, pc}
   b5b2c:	000b5a51 	.word	0x000b5a51
   b5b30:	000b5a75 	.word	0x000b5a75
   b5b34:	000b5a95 	.word	0x000b5a95

000b5b38 <_ZN6Sensor17getCurrentReadingEv>:
// ###############################################################
/// @brief Method for getting the current calculated power reading
// ###############################################################
int Sensor::getCurrentReading()
{
    newReadingAvaliable = false;
   b5b38:	2300      	movs	r3, #0
   b5b3a:	7203      	strb	r3, [r0, #8]
    return currentPowerReading;
}
   b5b3c:	6840      	ldr	r0, [r0, #4]
   b5b3e:	4770      	bx	lr

000b5b40 <_ZN6Sensor18checkForNewReadingEv>:
// Since the last one was read.
// ##################################################################
bool Sensor::checkForNewReading()
{
    return newReadingAvaliable;
   b5b40:	7a00      	ldrb	r0, [r0, #8]
   b5b42:	4770      	bx	lr

000b5b44 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5b44:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5b48:	b510      	push	{r4, lr}
   b5b4a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5b4c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5b4e:	b113      	cbz	r3, b5b56 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5b50:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5b52:	f000 fc8f 	bl	b6474 <os_mutex_lock>
#endif
#endif
#endif
        }
   b5b56:	4620      	mov	r0, r4
   b5b58:	bd10      	pop	{r4, pc}

000b5b5a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5b5a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5b5c:	6803      	ldr	r3, [r0, #0]
   b5b5e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5b62:	4604      	mov	r4, r0
            if (mqtt->thread)
   b5b64:	b112      	cbz	r2, b5b6c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5b66:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5b68:	f000 fc8c 	bl	b6484 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	bd10      	pop	{r4, pc}

000b5b70 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b72:	461f      	mov	r7, r3
   b5b74:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5b78:	4604      	mov	r4, r0
   b5b7a:	460d      	mov	r5, r1
   b5b7c:	4616      	mov	r6, r2
    if (thread) {
   b5b7e:	b12b      	cbz	r3, b5b8c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5b80:	2301      	movs	r3, #1
   b5b82:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b5b86:	3058      	adds	r0, #88	; 0x58
   b5b88:	f000 fc6c 	bl	b6464 <os_mutex_create>
    }
    this->callback = callback;
   b5b8c:	9b08      	ldr	r3, [sp, #32]
   b5b8e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5b90:	2300      	movs	r3, #0
   b5b92:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b5b94:	b106      	cbz	r6, b5b98 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b5b96:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5b98:	b125      	cbz	r5, b5ba4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5b9a:	4629      	mov	r1, r5
   b5b9c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5ba0:	f001 f816 	bl	b6bd0 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b5ba4:	9b06      	ldr	r3, [sp, #24]
   b5ba6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5ba8:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5baa:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5bac:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5bb0:	2bff      	cmp	r3, #255	; 0xff
   b5bb2:	bfb8      	it	lt
   b5bb4:	23ff      	movlt	r3, #255	; 0xff
   b5bb6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5bba:	b108      	cbz	r0, b5bc0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5bbc:	f7fe ffeb 	bl	b4b96 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5bc0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5bc4:	f7fe ffe3 	bl	b4b8e <_Znaj>
   b5bc8:	61e0      	str	r0, [r4, #28]
}
   b5bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bcc <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b5bcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5bd0:	4604      	mov	r4, r0
            bool thread) {
   b5bd2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b5bd4:	4617      	mov	r7, r2
   b5bd6:	4698      	mov	r8, r3
   b5bd8:	460e      	mov	r6, r1
            bool thread) {
   b5bda:	f002 fa67 	bl	b80ac <_ZN9TCPClientC1Ev>
   b5bde:	490d      	ldr	r1, [pc, #52]	; (b5c14 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b5be0:	61e5      	str	r5, [r4, #28]
   b5be2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5be6:	f000 ffc5 	bl	b6b74 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5bea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b5bee:	9303      	str	r3, [sp, #12]
   b5bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b5bf2:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5bf4:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b5bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5bfa:	9300      	str	r3, [sp, #0]
   b5bfc:	4620      	mov	r0, r4
            bool thread) {
   b5bfe:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5c02:	463b      	mov	r3, r7
   b5c04:	462a      	mov	r2, r5
   b5c06:	4631      	mov	r1, r6
   b5c08:	f7ff ffb2 	bl	b5b70 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	b004      	add	sp, #16
   b5c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5c14:	000baf94 	.word	0x000baf94

000b5c18 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5c18:	b510      	push	{r4, lr}
   b5c1a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5c1c:	4620      	mov	r0, r4
   b5c1e:	f002 f9a1 	bl	b7f64 <_ZN9TCPClient9availableEv>
   b5c22:	2800      	cmp	r0, #0
   b5c24:	d0fa      	beq.n	b5c1c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5c26:	4620      	mov	r0, r4
   b5c28:	f001 ffaa 	bl	b7b80 <_ZN9TCPClient4readEv>
}
   b5c2c:	b2c0      	uxtb	r0, r0
   b5c2e:	bd10      	pop	{r4, pc}

000b5c30 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5c34:	4605      	mov	r5, r0
   b5c36:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5c38:	f7ff ffee 	bl	b5c18 <_ZN4MQTT8readByteEv>
   b5c3c:	69eb      	ldr	r3, [r5, #28]
   b5c3e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5c40:	69eb      	ldr	r3, [r5, #28]
   b5c42:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5c46:	f04f 0901 	mov.w	r9, #1
   b5c4a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5c4e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5c50:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5c52:	4628      	mov	r0, r5
   b5c54:	f7ff ffe0 	bl	b5c18 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5c58:	4626      	mov	r6, r4
   b5c5a:	69eb      	ldr	r3, [r5, #28]
   b5c5c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5c5e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b5c62:	fb13 f309 	smulbb	r3, r3, r9
   b5c66:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5c68:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5c6a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5c6c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5c6e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5c70:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5c74:	d4ed      	bmi.n	b5c52 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5c76:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5c78:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5c7c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5c80:	d11e      	bne.n	b5cc0 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b5c82:	4628      	mov	r0, r5
   b5c84:	f7ff ffc8 	bl	b5c18 <_ZN4MQTT8readByteEv>
   b5c88:	69eb      	ldr	r3, [r5, #28]
   b5c8a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5c8c:	4628      	mov	r0, r5
   b5c8e:	f7ff ffc3 	bl	b5c18 <_ZN4MQTT8readByteEv>
   b5c92:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b5c94:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b5c96:	b2b6      	uxth	r6, r6
   b5c98:	69eb      	ldr	r3, [r5, #28]
   b5c9a:	b2a4      	uxth	r4, r4
   b5c9c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5c9e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5ca0:	b2b6      	uxth	r6, r6
   b5ca2:	42be      	cmp	r6, r7
   b5ca4:	d20e      	bcs.n	b5cc4 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b5ca6:	4628      	mov	r0, r5
   b5ca8:	f7ff ffb6 	bl	b5c18 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5cac:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5cb0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b5cb2:	bf84      	itt	hi
   b5cb4:	69eb      	ldrhi	r3, [r5, #28]
   b5cb6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5cb8:	3401      	adds	r4, #1
   b5cba:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5cbc:	3601      	adds	r6, #1
   b5cbe:	e7ef      	b.n	b5ca0 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5cc0:	2600      	movs	r6, #0
   b5cc2:	e7ed      	b.n	b5ca0 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5cc4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5cc8:	42a3      	cmp	r3, r4
   b5cca:	bf2c      	ite	cs
   b5ccc:	4620      	movcs	r0, r4
   b5cce:	2000      	movcc	r0, #0
   b5cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5cd4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5cd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5cd8:	4615      	mov	r5, r2
   b5cda:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5cdc:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5cde:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5ce0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5ce2:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5ce4:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5ce6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5cea:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5cee:	f103 0401 	add.w	r4, r3, #1
   b5cf2:	4403      	add	r3, r0
            digit |= 0x80;
   b5cf4:	bf88      	it	hi
   b5cf6:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b5cfa:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b5cfe:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b5d02:	b2e4      	uxtb	r4, r4
   b5d04:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5d08:	d81e      	bhi.n	b5d48 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5d0a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5d0e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b5d12:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5d14:	4622      	mov	r2, r4
   b5d16:	a901      	add	r1, sp, #4
   b5d18:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5d1a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5d1e:	f003 f879 	bl	b8e14 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b5d22:	1c72      	adds	r2, r6, #1
   b5d24:	4422      	add	r2, r4
   b5d26:	4641      	mov	r1, r8
   b5d28:	4638      	mov	r0, r7
   b5d2a:	f001 ff14 	bl	b7b56 <_ZN9TCPClient5writeEPKhj>
   b5d2e:	4605      	mov	r5, r0
   b5d30:	f000 fb50 	bl	b63d4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5d34:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b5d36:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5d38:	4432      	add	r2, r6
   b5d3a:	b2a8      	uxth	r0, r5
}
   b5d3c:	1a13      	subs	r3, r2, r0
   b5d3e:	4258      	negs	r0, r3
   b5d40:	4158      	adcs	r0, r3
   b5d42:	b002      	add	sp, #8
   b5d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5d48:	4623      	mov	r3, r4
   b5d4a:	e7ca      	b.n	b5ce2 <_ZN4MQTT5writeEhPht+0xe>

000b5d4c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5d4c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d50:	4605      	mov	r5, r0
    pos += 2;
   b5d52:	b298      	uxth	r0, r3
   b5d54:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5d56:	5cce      	ldrb	r6, [r1, r3]
   b5d58:	b29c      	uxth	r4, r3
   b5d5a:	b156      	cbz	r6, b5d72 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5d5c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b5d60:	4584      	cmp	ip, r0
   b5d62:	f103 0701 	add.w	r7, r3, #1
   b5d66:	d904      	bls.n	b5d72 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5d68:	1c44      	adds	r4, r0, #1
   b5d6a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5d6c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b5d6e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b5d70:	e7f1      	b.n	b5d56 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b5d72:	b299      	uxth	r1, r3
   b5d74:	1a41      	subs	r1, r0, r1
   b5d76:	440a      	add	r2, r1
   b5d78:	0a21      	lsrs	r1, r4, #8
   b5d7a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b5d7e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b5d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5d84 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b5d84:	b538      	push	{r3, r4, r5, lr}
   b5d86:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5d88:	f002 f80e 	bl	b7da8 <_ZN9TCPClient9connectedEv>
   b5d8c:	2800      	cmp	r0, #0
   b5d8e:	bf14      	ite	ne
   b5d90:	2501      	movne	r5, #1
   b5d92:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b5d94:	d102      	bne.n	b5d9c <_ZN4MQTT11isConnectedEv+0x18>
   b5d96:	4620      	mov	r0, r4
   b5d98:	f002 f93e 	bl	b8018 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5d9c:	4628      	mov	r0, r5
   b5d9e:	bd38      	pop	{r3, r4, r5, pc}

000b5da0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b5da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5da4:	b088      	sub	sp, #32
   b5da6:	4604      	mov	r4, r0
   b5da8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5dac:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5db0:	4689      	mov	r9, r1
   b5db2:	4617      	mov	r7, r2
   b5db4:	461e      	mov	r6, r3
    if (!isConnected()) {
   b5db6:	f7ff ffe5 	bl	b5d84 <_ZN4MQTT11isConnectedEv>
   b5dba:	4605      	mov	r5, r0
   b5dbc:	2800      	cmp	r0, #0
   b5dbe:	f040 80cd 	bne.w	b5f5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b5dc2:	4621      	mov	r1, r4
   b5dc4:	a801      	add	r0, sp, #4
   b5dc6:	f7ff febd 	bl	b5b44 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b5dca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5dcc:	2900      	cmp	r1, #0
   b5dce:	f040 8088 	bne.w	b5ee2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b5dd2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5dd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5dd8:	462b      	mov	r3, r5
   b5dda:	4620      	mov	r0, r4
   b5ddc:	f001 ff66 	bl	b7cac <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5de0:	2800      	cmp	r0, #0
   b5de2:	d07a      	beq.n	b5eda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5de4:	2301      	movs	r3, #1
   b5de6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5de8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5dec:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b5dee:	2b04      	cmp	r3, #4
   b5df0:	4b5b      	ldr	r3, [pc, #364]	; (b5f60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b5df2:	f040 8081 	bne.w	b5ef8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b5df6:	6818      	ldr	r0, [r3, #0]
   b5df8:	8899      	ldrh	r1, [r3, #4]
   b5dfa:	799b      	ldrb	r3, [r3, #6]
   b5dfc:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5e00:	f88d 300e 	strb.w	r3, [sp, #14]
   b5e04:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5e06:	f8c2 0005 	str.w	r0, [r2, #5]
   b5e0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5e0e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5e12:	f8a2 1009 	strh.w	r1, [r2, #9]
   b5e16:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5e18:	230c      	movs	r3, #12
            if (willTopic) {
   b5e1a:	f1b8 0f00 	cmp.w	r8, #0
   b5e1e:	f000 8081 	beq.w	b5f24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5e22:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b5e26:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b5e2a:	0140      	lsls	r0, r0, #5
   b5e2c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5e30:	f040 0006 	orr.w	r0, r0, #6
   b5e34:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b5e36:	f1ba 0f00 	cmp.w	sl, #0
   b5e3a:	d101      	bne.n	b5e40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5e3c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5e40:	b11f      	cbz	r7, b5e4a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5e42:	2e00      	cmp	r6, #0
   b5e44:	d170      	bne.n	b5f28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b5e46:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b5e4a:	69e2      	ldr	r2, [r4, #28]
   b5e4c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b5e4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5e50:	69e1      	ldr	r1, [r4, #28]
   b5e52:	1c58      	adds	r0, r3, #1
   b5e54:	1212      	asrs	r2, r2, #8
   b5e56:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b5e58:	1c9a      	adds	r2, r3, #2
   b5e5a:	69e1      	ldr	r1, [r4, #28]
   b5e5c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5e5e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5e60:	3303      	adds	r3, #3
   b5e62:	69e2      	ldr	r2, [r4, #28]
   b5e64:	4649      	mov	r1, r9
   b5e66:	4620      	mov	r0, r4
   b5e68:	f7ff ff70 	bl	b5d4c <_ZN4MQTT11writeStringEPKcPht>
   b5e6c:	4603      	mov	r3, r0
            if (willTopic) {
   b5e6e:	f1b8 0f00 	cmp.w	r8, #0
   b5e72:	d00b      	beq.n	b5e8c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5e74:	69e2      	ldr	r2, [r4, #28]
   b5e76:	4641      	mov	r1, r8
   b5e78:	4620      	mov	r0, r4
   b5e7a:	f7ff ff67 	bl	b5d4c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b5e7e:	69e2      	ldr	r2, [r4, #28]
   b5e80:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b5e82:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b5e84:	4620      	mov	r0, r4
   b5e86:	f7ff ff61 	bl	b5d4c <_ZN4MQTT11writeStringEPKcPht>
   b5e8a:	4603      	mov	r3, r0
            if(user != NULL) {
   b5e8c:	b167      	cbz	r7, b5ea8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5e8e:	69e2      	ldr	r2, [r4, #28]
   b5e90:	4639      	mov	r1, r7
   b5e92:	4620      	mov	r0, r4
   b5e94:	f7ff ff5a 	bl	b5d4c <_ZN4MQTT11writeStringEPKcPht>
   b5e98:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5e9a:	b12e      	cbz	r6, b5ea8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5e9c:	69e2      	ldr	r2, [r4, #28]
   b5e9e:	4631      	mov	r1, r6
   b5ea0:	4620      	mov	r0, r4
   b5ea2:	f7ff ff53 	bl	b5d4c <_ZN4MQTT11writeStringEPKcPht>
   b5ea6:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5ea8:	3b05      	subs	r3, #5
   b5eaa:	69e2      	ldr	r2, [r4, #28]
   b5eac:	b29b      	uxth	r3, r3
   b5eae:	2110      	movs	r1, #16
   b5eb0:	4620      	mov	r0, r4
   b5eb2:	f7ff ff0f 	bl	b5cd4 <_ZN4MQTT5writeEhPht>
   b5eb6:	f000 fa8d 	bl	b63d4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5eba:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5ebe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5ec2:	4620      	mov	r0, r4
   b5ec4:	f002 f84e 	bl	b7f64 <_ZN9TCPClient9availableEv>
   b5ec8:	bb88      	cbnz	r0, b5f2e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5eca:	f000 fa83 	bl	b63d4 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5ece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5ed0:	1ac0      	subs	r0, r0, r3
   b5ed2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5ed4:	4373      	muls	r3, r6
   b5ed6:	4298      	cmp	r0, r3
   b5ed8:	d9f3      	bls.n	b5ec2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5eda:	4620      	mov	r0, r4
   b5edc:	f002 f89c 	bl	b8018 <_ZN9TCPClient4stopEv>
   b5ee0:	e035      	b.n	b5f4e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5ee2:	a802      	add	r0, sp, #8
   b5ee4:	f001 fc96 	bl	b7814 <_ZN9IPAddressC1EPKh>
   b5ee8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5eec:	462b      	mov	r3, r5
   b5eee:	a902      	add	r1, sp, #8
   b5ef0:	4620      	mov	r0, r4
   b5ef2:	f001 ffbb 	bl	b7e6c <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5ef6:	e773      	b.n	b5de0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5ef8:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5efc:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5f00:	7bdb      	ldrb	r3, [r3, #15]
   b5f02:	f10d 0c08 	add.w	ip, sp, #8
   b5f06:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5f0a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5f0e:	ab02      	add	r3, sp, #8
   b5f10:	cb03      	ldmia	r3!, {r0, r1}
   b5f12:	f8c2 0005 	str.w	r0, [r2, #5]
   b5f16:	f8c2 1009 	str.w	r1, [r2, #9]
   b5f1a:	f89c 3000 	ldrb.w	r3, [ip]
   b5f1e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5f20:	230e      	movs	r3, #14
   b5f22:	e77a      	b.n	b5e1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5f24:	2002      	movs	r0, #2
   b5f26:	e786      	b.n	b5e36 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5f28:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5f2c:	e78d      	b.n	b5e4a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5f2e:	a902      	add	r1, sp, #8
   b5f30:	4620      	mov	r0, r4
   b5f32:	f7ff fe7d 	bl	b5c30 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b5f36:	2804      	cmp	r0, #4
   b5f38:	d1cf      	bne.n	b5eda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b5f3a:	69e3      	ldr	r3, [r4, #28]
   b5f3c:	78de      	ldrb	r6, [r3, #3]
   b5f3e:	2e00      	cmp	r6, #0
   b5f40:	d1cb      	bne.n	b5eda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b5f42:	f000 fa47 	bl	b63d4 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b5f46:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b5f48:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b5f4a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b5f4e:	a801      	add	r0, sp, #4
   b5f50:	f7ff fe03 	bl	b5b5a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5f54:	4628      	mov	r0, r5
   b5f56:	b008      	add	sp, #32
   b5f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5f5c:	2500      	movs	r5, #0
   b5f5e:	e7f9      	b.n	b5f54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b5f60:	000baf08 	.word	0x000baf08

000b5f64 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b5f64:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b5f66:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b5f6a:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b5f6c:	2401      	movs	r4, #1
   b5f6e:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b5f72:	2400      	movs	r4, #0
   b5f74:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b5f78:	e9cd 4400 	strd	r4, r4, [sp]
   b5f7c:	f7ff ff10 	bl	b5da0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b5f80:	b006      	add	sp, #24
   b5f82:	bd10      	pop	{r4, pc}

000b5f84 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f88:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b5f8c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5f90:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b5f94:	4604      	mov	r4, r0
   b5f96:	468b      	mov	fp, r1
   b5f98:	4616      	mov	r6, r2
   b5f9a:	461f      	mov	r7, r3
    if (isConnected()) {
   b5f9c:	f7ff fef2 	bl	b5d84 <_ZN4MQTT11isConnectedEv>
   b5fa0:	4682      	mov	sl, r0
   b5fa2:	2800      	cmp	r0, #0
   b5fa4:	d051      	beq.n	b604a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b5fa6:	4621      	mov	r1, r4
   b5fa8:	a801      	add	r0, sp, #4
   b5faa:	f7ff fdcb 	bl	b5b44 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b5fae:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b5fb2:	69e0      	ldr	r0, [r4, #28]
   b5fb4:	2100      	movs	r1, #0
   b5fb6:	f002 ff55 	bl	b8e64 <memset>
        length = writeString(topic, buffer, length);
   b5fba:	2305      	movs	r3, #5
   b5fbc:	69e2      	ldr	r2, [r4, #28]
   b5fbe:	4659      	mov	r1, fp
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	f7ff fec3 	bl	b5d4c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b5fc6:	1e6b      	subs	r3, r5, #1
   b5fc8:	2b01      	cmp	r3, #1
   b5fca:	d815      	bhi.n	b5ff8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5fcc:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5fce:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5fd0:	3101      	adds	r1, #1
   b5fd2:	b289      	uxth	r1, r1
   b5fd4:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5fd6:	0a09      	lsrs	r1, r1, #8
   b5fd8:	5419      	strb	r1, [r3, r0]
   b5fda:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5fdc:	69e3      	ldr	r3, [r4, #28]
   b5fde:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5fe0:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5fe2:	3002      	adds	r0, #2
   b5fe4:	5499      	strb	r1, [r3, r2]
   b5fe6:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5fe8:	f1b8 0f00 	cmp.w	r8, #0
   b5fec:	d004      	beq.n	b5ff8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b5fee:	8c23      	ldrh	r3, [r4, #32]
   b5ff0:	1c5a      	adds	r2, r3, #1
   b5ff2:	8422      	strh	r2, [r4, #32]
   b5ff4:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5ff8:	2100      	movs	r1, #0
   b5ffa:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5ffc:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b5ffe:	69e2      	ldr	r2, [r4, #28]
   b6000:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6002:	d90a      	bls.n	b601a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6004:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6008:	459c      	cmp	ip, r3
   b600a:	d906      	bls.n	b601a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b600c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6010:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6014:	3101      	adds	r1, #1
   b6016:	b289      	uxth	r1, r1
   b6018:	e7ef      	b.n	b5ffa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b601a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b601e:	2900      	cmp	r1, #0
   b6020:	bf0c      	ite	eq
   b6022:	2130      	moveq	r1, #48	; 0x30
   b6024:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b6026:	f1b9 0f00 	cmp.w	r9, #0
   b602a:	d001      	beq.n	b6030 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b602c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b6030:	2d02      	cmp	r5, #2
   b6032:	d10e      	bne.n	b6052 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b6034:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b6038:	3b05      	subs	r3, #5
   b603a:	b29b      	uxth	r3, r3
   b603c:	4620      	mov	r0, r4
   b603e:	f7ff fe49 	bl	b5cd4 <_ZN4MQTT5writeEhPht>
   b6042:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b6044:	a801      	add	r0, sp, #4
   b6046:	f7ff fd88 	bl	b5b5a <_ZN4MQTT11MutexLockerD1Ev>
}
   b604a:	4650      	mov	r0, sl
   b604c:	b003      	add	sp, #12
   b604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b6052:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b6054:	bf08      	it	eq
   b6056:	f041 0102 	orreq.w	r1, r1, #2
   b605a:	e7ed      	b.n	b6038 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b605c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b605c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b605e:	9c08      	ldr	r4, [sp, #32]
   b6060:	9403      	str	r4, [sp, #12]
   b6062:	2400      	movs	r4, #0
   b6064:	9402      	str	r4, [sp, #8]
   b6066:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b606a:	9401      	str	r4, [sp, #4]
   b606c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b6070:	9400      	str	r4, [sp, #0]
   b6072:	f7ff ff87 	bl	b5f84 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b6076:	b004      	add	sp, #16
   b6078:	bd10      	pop	{r4, pc}

000b607a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b607a:	b530      	push	{r4, r5, lr}
   b607c:	b087      	sub	sp, #28
   b607e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6080:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b6082:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6084:	9204      	str	r2, [sp, #16]
   b6086:	f7fe fd25 	bl	b4ad4 <strlen>
   b608a:	2500      	movs	r5, #0
   b608c:	4603      	mov	r3, r0
   b608e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6092:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6096:	9500      	str	r5, [sp, #0]
   b6098:	4620      	mov	r0, r4
   b609a:	f7ff ffdf 	bl	b605c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b609e:	b007      	add	sp, #28
   b60a0:	bd30      	pop	{r4, r5, pc}

000b60a2 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b60a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b60a4:	4604      	mov	r4, r0
   b60a6:	460e      	mov	r6, r1
    if (isConnected()) {
   b60a8:	f7ff fe6c 	bl	b5d84 <_ZN4MQTT11isConnectedEv>
   b60ac:	4605      	mov	r5, r0
   b60ae:	b1c8      	cbz	r0, b60e4 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b60b0:	4621      	mov	r1, r4
   b60b2:	a801      	add	r0, sp, #4
   b60b4:	f7ff fd46 	bl	b5b44 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b60b8:	69e3      	ldr	r3, [r4, #28]
   b60ba:	2262      	movs	r2, #98	; 0x62
   b60bc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b60be:	69e3      	ldr	r3, [r4, #28]
   b60c0:	2202      	movs	r2, #2
   b60c2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b60c4:	69e3      	ldr	r3, [r4, #28]
   b60c6:	0a32      	lsrs	r2, r6, #8
   b60c8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b60ca:	69e3      	ldr	r3, [r4, #28]
   b60cc:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b60ce:	69e1      	ldr	r1, [r4, #28]
   b60d0:	2204      	movs	r2, #4
   b60d2:	4620      	mov	r0, r4
   b60d4:	f001 fd3f 	bl	b7b56 <_ZN9TCPClient5writeEPKhj>
   b60d8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b60da:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b60dc:	bf18      	it	ne
   b60de:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b60e0:	f7ff fd3b 	bl	b5b5a <_ZN4MQTT11MutexLockerD1Ev>
}
   b60e4:	4628      	mov	r0, r5
   b60e6:	b002      	add	sp, #8
   b60e8:	bd70      	pop	{r4, r5, r6, pc}

000b60ea <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b60ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b60ec:	4604      	mov	r4, r0
   b60ee:	460e      	mov	r6, r1
    if (isConnected()) {
   b60f0:	f7ff fe48 	bl	b5d84 <_ZN4MQTT11isConnectedEv>
   b60f4:	4605      	mov	r5, r0
   b60f6:	b1c8      	cbz	r0, b612c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b60f8:	4621      	mov	r1, r4
   b60fa:	a801      	add	r0, sp, #4
   b60fc:	f7ff fd22 	bl	b5b44 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b6100:	69e3      	ldr	r3, [r4, #28]
   b6102:	2272      	movs	r2, #114	; 0x72
   b6104:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6106:	69e3      	ldr	r3, [r4, #28]
   b6108:	2202      	movs	r2, #2
   b610a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b610c:	69e3      	ldr	r3, [r4, #28]
   b610e:	0a32      	lsrs	r2, r6, #8
   b6110:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6112:	69e3      	ldr	r3, [r4, #28]
   b6114:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6116:	69e1      	ldr	r1, [r4, #28]
   b6118:	2204      	movs	r2, #4
   b611a:	4620      	mov	r0, r4
   b611c:	f001 fd1b 	bl	b7b56 <_ZN9TCPClient5writeEPKhj>
   b6120:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6122:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6124:	bf18      	it	ne
   b6126:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6128:	f7ff fd17 	bl	b5b5a <_ZN4MQTT11MutexLockerD1Ev>
}
   b612c:	4628      	mov	r0, r5
   b612e:	b002      	add	sp, #8
   b6130:	bd70      	pop	{r4, r5, r6, pc}

000b6132 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b6132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6136:	ed2d 8b02 	vpush	{d8}
   b613a:	b087      	sub	sp, #28
   b613c:	af00      	add	r7, sp, #0
   b613e:	4604      	mov	r4, r0
    if (isConnected()) {
   b6140:	f7ff fe20 	bl	b5d84 <_ZN4MQTT11isConnectedEv>
   b6144:	4681      	mov	r9, r0
   b6146:	b1f8      	cbz	r0, b6188 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b6148:	4621      	mov	r1, r4
   b614a:	f107 0014 	add.w	r0, r7, #20
   b614e:	f7ff fcf9 	bl	b5b44 <_ZN4MQTT11MutexLockerC1EPS_>
   b6152:	f000 f93f 	bl	b63d4 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b6156:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b615c:	4353      	muls	r3, r2
   b615e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6160:	1a82      	subs	r2, r0, r2
   b6162:	429a      	cmp	r2, r3
   b6164:	4606      	mov	r6, r0
   b6166:	d803      	bhi.n	b6170 <_ZN4MQTT4loopEv+0x3e>
   b6168:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b616a:	1a82      	subs	r2, r0, r2
   b616c:	4293      	cmp	r3, r2
   b616e:	d221      	bcs.n	b61b4 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b6170:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b6174:	b17b      	cbz	r3, b6196 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b6176:	4620      	mov	r0, r4
   b6178:	f001 ff4e 	bl	b8018 <_ZN9TCPClient4stopEv>
                return false;
   b617c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6180:	f107 0014 	add.w	r0, r7, #20
   b6184:	f7ff fce9 	bl	b5b5a <_ZN4MQTT11MutexLockerD1Ev>
}
   b6188:	4648      	mov	r0, r9
   b618a:	371c      	adds	r7, #28
   b618c:	46bd      	mov	sp, r7
   b618e:	ecbd 8b02 	vpop	{d8}
   b6192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6196:	69e2      	ldr	r2, [r4, #28]
   b6198:	21c0      	movs	r1, #192	; 0xc0
   b619a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b619c:	69e2      	ldr	r2, [r4, #28]
   b619e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b61a0:	69e1      	ldr	r1, [r4, #28]
   b61a2:	2202      	movs	r2, #2
   b61a4:	4620      	mov	r0, r4
   b61a6:	f001 fcd6 	bl	b7b56 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b61aa:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b61ae:	2301      	movs	r3, #1
   b61b0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b61b4:	4620      	mov	r0, r4
   b61b6:	f001 fed5 	bl	b7f64 <_ZN9TCPClient9availableEv>
   b61ba:	2800      	cmp	r0, #0
   b61bc:	d0e0      	beq.n	b6180 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b61be:	f107 0113 	add.w	r1, r7, #19
   b61c2:	4620      	mov	r0, r4
   b61c4:	f7ff fd34 	bl	b5c30 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b61c8:	4683      	mov	fp, r0
   b61ca:	2800      	cmp	r0, #0
   b61cc:	d0d8      	beq.n	b6180 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b61ce:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b61d0:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b61d2:	7819      	ldrb	r1, [r3, #0]
   b61d4:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b61d8:	2a30      	cmp	r2, #48	; 0x30
   b61da:	d17f      	bne.n	b62dc <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b61dc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b61e0:	f1ba 0f00 	cmp.w	sl, #0
   b61e4:	d0cc      	beq.n	b6180 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b61e6:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b61ea:	466a      	mov	r2, sp
   b61ec:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b61f0:	eb03 020c 	add.w	r2, r3, ip
   b61f4:	7851      	ldrb	r1, [r2, #1]
   b61f6:	7895      	ldrb	r5, [r2, #2]
   b61f8:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b61fc:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b61fe:	f105 0208 	add.w	r2, r5, #8
   b6202:	4669      	mov	r1, sp
   b6204:	08d2      	lsrs	r2, r2, #3
   b6206:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b620a:	4695      	mov	sp, r2
   b620c:	f10c 0203 	add.w	r2, ip, #3
   b6210:	60fa      	str	r2, [r7, #12]
   b6212:	eb03 0e02 	add.w	lr, r3, r2
   b6216:	eb0d 0205 	add.w	r2, sp, r5
   b621a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b621c:	f8c7 d008 	str.w	sp, [r7, #8]
   b6220:	607a      	str	r2, [r7, #4]
   b6222:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b6226:	428a      	cmp	r2, r1
   b6228:	d006      	beq.n	b6238 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b622a:	460a      	mov	r2, r1
   b622c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b6230:	f802 8b01 	strb.w	r8, [r2], #1
   b6234:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b6236:	e7f4      	b.n	b6222 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b6238:	2200      	movs	r2, #0
   b623a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b623c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6240:	68f9      	ldr	r1, [r7, #12]
   b6242:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6246:	ebab 020c 	sub.w	r2, fp, ip
   b624a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b624c:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b6250:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6254:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6256:	d125      	bne.n	b62a4 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6258:	f813 e001 	ldrb.w	lr, [r3, r1]
   b625c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b625e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6260:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b6264:	f10c 0105 	add.w	r1, ip, #5
   b6268:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b626a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b626c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b6270:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b6272:	69e3      	ldr	r3, [r4, #28]
   b6274:	2240      	movs	r2, #64	; 0x40
   b6276:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6278:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b627a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b627e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b6282:	69e3      	ldr	r3, [r4, #28]
   b6284:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6288:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b628a:	69e3      	ldr	r3, [r4, #28]
   b628c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6290:	69e1      	ldr	r1, [r4, #28]
   b6292:	2204      	movs	r2, #4
   b6294:	4620      	mov	r0, r4
   b6296:	f001 fc5e 	bl	b7b56 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b629a:	6266      	str	r6, [r4, #36]	; 0x24
   b629c:	ee18 3a10 	vmov	r3, s16
   b62a0:	469d      	mov	sp, r3
   b62a2:	e76d      	b.n	b6180 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b62a4:	f1b8 0f04 	cmp.w	r8, #4
   b62a8:	d115      	bne.n	b62d6 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b62aa:	f813 e001 	ldrb.w	lr, [r3, r1]
   b62ae:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b62b0:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b62b2:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b62b6:	f10c 0105 	add.w	r1, ip, #5
   b62ba:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b62bc:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b62be:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b62c2:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b62c4:	69e3      	ldr	r3, [r4, #28]
   b62c6:	2250      	movs	r2, #80	; 0x50
   b62c8:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b62ca:	69e3      	ldr	r3, [r4, #28]
   b62cc:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b62ce:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b62d2:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b62d4:	e7d5      	b.n	b6282 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b62d6:	4419      	add	r1, r3
   b62d8:	47d0      	blx	sl
   b62da:	e7df      	b.n	b629c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b62dc:	2a50      	cmp	r2, #80	; 0x50
   b62de:	d108      	bne.n	b62f2 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b62e0:	789a      	ldrb	r2, [r3, #2]
   b62e2:	78d9      	ldrb	r1, [r3, #3]
   b62e4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b62e8:	b289      	uxth	r1, r1
   b62ea:	4620      	mov	r0, r4
   b62ec:	f7ff fed9 	bl	b60a2 <_ZN4MQTT14publishReleaseEt>
   b62f0:	e746      	b.n	b6180 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b62f2:	2a40      	cmp	r2, #64	; 0x40
   b62f4:	d112      	bne.n	b631c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b62f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b62f8:	2a00      	cmp	r2, #0
   b62fa:	f43f af41 	beq.w	b6180 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b62fe:	f1bb 0f04 	cmp.w	fp, #4
   b6302:	f47f af3d 	bne.w	b6180 <_ZN4MQTT4loopEv+0x4e>
   b6306:	f011 0f06 	tst.w	r1, #6
   b630a:	f47f af39 	bne.w	b6180 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b630e:	7899      	ldrb	r1, [r3, #2]
   b6310:	78d8      	ldrb	r0, [r3, #3]
   b6312:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6316:	b280      	uxth	r0, r0
   b6318:	4790      	blx	r2
   b631a:	e731      	b.n	b6180 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b631c:	2a60      	cmp	r2, #96	; 0x60
   b631e:	d108      	bne.n	b6332 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6320:	789a      	ldrb	r2, [r3, #2]
   b6322:	78d9      	ldrb	r1, [r3, #3]
   b6324:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6328:	b289      	uxth	r1, r1
   b632a:	4620      	mov	r0, r4
   b632c:	f7ff fedd 	bl	b60ea <_ZN4MQTT15publishCompleteEt>
   b6330:	e726      	b.n	b6180 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6332:	2a70      	cmp	r2, #112	; 0x70
   b6334:	d0df      	beq.n	b62f6 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6336:	2a90      	cmp	r2, #144	; 0x90
   b6338:	f43f af22 	beq.w	b6180 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b633c:	2ac0      	cmp	r2, #192	; 0xc0
   b633e:	d10a      	bne.n	b6356 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6340:	22d0      	movs	r2, #208	; 0xd0
   b6342:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6344:	69e3      	ldr	r3, [r4, #28]
   b6346:	2200      	movs	r2, #0
   b6348:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b634a:	69e1      	ldr	r1, [r4, #28]
   b634c:	2202      	movs	r2, #2
   b634e:	4620      	mov	r0, r4
   b6350:	f001 fc01 	bl	b7b56 <_ZN9TCPClient5writeEPKhj>
   b6354:	e714      	b.n	b6180 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6356:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6358:	bf04      	itt	eq
   b635a:	2300      	moveq	r3, #0
   b635c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6360:	e70e      	b.n	b6180 <_ZN4MQTT4loopEv+0x4e>
	...

000b6364 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <netdb_freeaddrinfo+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	689b      	ldr	r3, [r3, #8]
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	00030268 	.word	0x00030268

000b6374 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <netdb_getaddrinfo+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	68db      	ldr	r3, [r3, #12]
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	00030268 	.word	0x00030268

000b6384 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <hal_gpio_mode+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	689b      	ldr	r3, [r3, #8]
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	0003022c 	.word	0x0003022c

000b6394 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <hal_interrupt_attach+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	699b      	ldr	r3, [r3, #24]
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	0003022c 	.word	0x0003022c

000b63a4 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <hal_interrupt_detach+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	69db      	ldr	r3, [r3, #28]
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	0003022c 	.word	0x0003022c

000b63b4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <if_index_to_name+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	695b      	ldr	r3, [r3, #20]
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	0003026c 	.word	0x0003026c

000b63c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <HAL_RNG_GetRandomNumber+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	685b      	ldr	r3, [r3, #4]
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	00030218 	.word	0x00030218

000b63d4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	695b      	ldr	r3, [r3, #20]
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	00030218 	.word	0x00030218

000b63e4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <hal_rtc_time_is_valid+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	00030218 	.word	0x00030218

000b63f4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <hal_rtc_get_time+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	00030218 	.word	0x00030218

000b6404 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <os_thread_yield+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	68db      	ldr	r3, [r3, #12]
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	00030248 	.word	0x00030248

000b6414 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <os_thread_scheduling+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	69db      	ldr	r3, [r3, #28]
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	00030248 	.word	0x00030248

000b6424 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <os_timer_create+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	6a1b      	ldr	r3, [r3, #32]
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	00030248 	.word	0x00030248

000b6434 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <os_timer_destroy+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	00030248 	.word	0x00030248

000b6444 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <os_timer_get_id+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	00030248 	.word	0x00030248

000b6454 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <os_timer_change+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	00030248 	.word	0x00030248

000b6464 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <os_mutex_create+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	00030248 	.word	0x00030248

000b6474 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <os_mutex_lock+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	00030248 	.word	0x00030248

000b6484 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <os_mutex_unlock+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	00030248 	.word	0x00030248

000b6494 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <os_mutex_recursive_create+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	00030248 	.word	0x00030248

000b64a4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <os_timer_set_id+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030248 	.word	0x00030248

000b64b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <inet_inet_ntop+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	695b      	ldr	r3, [r3, #20]
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030264 	.word	0x00030264

000b64c4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <inet_htonl+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6a1b      	ldr	r3, [r3, #32]
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030264 	.word	0x00030264

000b64d4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <inet_htons+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030264 	.word	0x00030264

000b64e4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <hal_usart_write+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	68db      	ldr	r3, [r3, #12]
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	0003023c 	.word	0x0003023c

000b64f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <hal_usart_available+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	691b      	ldr	r3, [r3, #16]
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	0003023c 	.word	0x0003023c

000b6504 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <hal_usart_read+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	695b      	ldr	r3, [r3, #20]
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	0003023c 	.word	0x0003023c

000b6514 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <hal_usart_peek+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	699b      	ldr	r3, [r3, #24]
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	0003023c 	.word	0x0003023c

000b6524 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <hal_usart_flush+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	69db      	ldr	r3, [r3, #28]
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	0003023c 	.word	0x0003023c

000b6534 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <hal_usart_is_enabled+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	6a1b      	ldr	r3, [r3, #32]
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	0003023c 	.word	0x0003023c

000b6544 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <hal_usart_available_data_for_write+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	0003023c 	.word	0x0003023c

000b6554 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <hal_usart_init_ex+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	0003023c 	.word	0x0003023c

000b6564 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <hal_i2c_write+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	6a1b      	ldr	r3, [r3, #32]
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	00030228 	.word	0x00030228

000b6574 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <hal_i2c_available+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	00030228 	.word	0x00030228

000b6584 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <hal_i2c_read+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	00030228 	.word	0x00030228

000b6594 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <hal_i2c_peek+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	00030228 	.word	0x00030228

000b65a4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <hal_i2c_flush+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	00030228 	.word	0x00030228

000b65b4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <hal_i2c_is_enabled+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	00030228 	.word	0x00030228

000b65c4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <hal_i2c_init+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	00030228 	.word	0x00030228

000b65d4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <sock_setsockopt+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	699b      	ldr	r3, [r3, #24]
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	00030238 	.word	0x00030238

000b65e4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <sock_close+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	69db      	ldr	r3, [r3, #28]
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	00030238 	.word	0x00030238

000b65f4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <sock_connect+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	6a1b      	ldr	r3, [r3, #32]
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	00030238 	.word	0x00030238

000b6604 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <sock_recv+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	00030238 	.word	0x00030238

000b6614 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6614:	b508      	push	{r3, lr}
   b6616:	4b02      	ldr	r3, [pc, #8]	; (b6620 <sock_send+0xc>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b661c:	9301      	str	r3, [sp, #4]
   b661e:	bd08      	pop	{r3, pc}
   b6620:	00030238 	.word	0x00030238

000b6624 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6624:	b508      	push	{r3, lr}
   b6626:	4b02      	ldr	r3, [pc, #8]	; (b6630 <sock_socket+0xc>)
   b6628:	681b      	ldr	r3, [r3, #0]
   b662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b662c:	9301      	str	r3, [sp, #4]
   b662e:	bd08      	pop	{r3, pc}
   b6630:	00030238 	.word	0x00030238

000b6634 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6634:	b508      	push	{r3, lr}
   b6636:	4b02      	ldr	r3, [pc, #8]	; (b6640 <hal_spi_init+0xc>)
   b6638:	681b      	ldr	r3, [r3, #0]
   b663a:	69db      	ldr	r3, [r3, #28]
   b663c:	9301      	str	r3, [sp, #4]
   b663e:	bd08      	pop	{r3, pc}
   b6640:	00030230 	.word	0x00030230

000b6644 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6644:	b508      	push	{r3, lr}
   b6646:	4b02      	ldr	r3, [pc, #8]	; (b6650 <hal_spi_is_enabled+0xc>)
   b6648:	681b      	ldr	r3, [r3, #0]
   b664a:	6a1b      	ldr	r3, [r3, #32]
   b664c:	9301      	str	r3, [sp, #4]
   b664e:	bd08      	pop	{r3, pc}
   b6650:	00030230 	.word	0x00030230

000b6654 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6654:	b508      	push	{r3, lr}
   b6656:	4b02      	ldr	r3, [pc, #8]	; (b6660 <HAL_USB_USART_Init+0xc>)
   b6658:	681b      	ldr	r3, [r3, #0]
   b665a:	681b      	ldr	r3, [r3, #0]
   b665c:	9301      	str	r3, [sp, #4]
   b665e:	bd08      	pop	{r3, pc}
   b6660:	0003024c 	.word	0x0003024c

000b6664 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6664:	b508      	push	{r3, lr}
   b6666:	4b02      	ldr	r3, [pc, #8]	; (b6670 <HAL_USB_USART_Available_Data+0xc>)
   b6668:	681b      	ldr	r3, [r3, #0]
   b666a:	691b      	ldr	r3, [r3, #16]
   b666c:	9301      	str	r3, [sp, #4]
   b666e:	bd08      	pop	{r3, pc}
   b6670:	0003024c 	.word	0x0003024c

000b6674 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6674:	b508      	push	{r3, lr}
   b6676:	4b02      	ldr	r3, [pc, #8]	; (b6680 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6678:	681b      	ldr	r3, [r3, #0]
   b667a:	695b      	ldr	r3, [r3, #20]
   b667c:	9301      	str	r3, [sp, #4]
   b667e:	bd08      	pop	{r3, pc}
   b6680:	0003024c 	.word	0x0003024c

000b6684 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6684:	b508      	push	{r3, lr}
   b6686:	4b02      	ldr	r3, [pc, #8]	; (b6690 <HAL_USB_USART_Receive_Data+0xc>)
   b6688:	681b      	ldr	r3, [r3, #0]
   b668a:	699b      	ldr	r3, [r3, #24]
   b668c:	9301      	str	r3, [sp, #4]
   b668e:	bd08      	pop	{r3, pc}
   b6690:	0003024c 	.word	0x0003024c

000b6694 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6694:	b508      	push	{r3, lr}
   b6696:	4b02      	ldr	r3, [pc, #8]	; (b66a0 <HAL_USB_USART_Send_Data+0xc>)
   b6698:	681b      	ldr	r3, [r3, #0]
   b669a:	69db      	ldr	r3, [r3, #28]
   b669c:	9301      	str	r3, [sp, #4]
   b669e:	bd08      	pop	{r3, pc}
   b66a0:	0003024c 	.word	0x0003024c

000b66a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b66a4:	b508      	push	{r3, lr}
   b66a6:	4b02      	ldr	r3, [pc, #8]	; (b66b0 <HAL_USB_USART_Flush_Data+0xc>)
   b66a8:	681b      	ldr	r3, [r3, #0]
   b66aa:	6a1b      	ldr	r3, [r3, #32]
   b66ac:	9301      	str	r3, [sp, #4]
   b66ae:	bd08      	pop	{r3, pc}
   b66b0:	0003024c 	.word	0x0003024c

000b66b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b66b4:	b508      	push	{r3, lr}
   b66b6:	4b02      	ldr	r3, [pc, #8]	; (b66c0 <log_message+0xc>)
   b66b8:	681b      	ldr	r3, [r3, #0]
   b66ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b66bc:	9301      	str	r3, [sp, #4]
   b66be:	bd08      	pop	{r3, pc}
   b66c0:	00030260 	.word	0x00030260

000b66c4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b66c4:	b508      	push	{r3, lr}
   b66c6:	4b02      	ldr	r3, [pc, #8]	; (b66d0 <system_mode+0xc>)
   b66c8:	681b      	ldr	r3, [r3, #0]
   b66ca:	681b      	ldr	r3, [r3, #0]
   b66cc:	9301      	str	r3, [sp, #4]
   b66ce:	bd08      	pop	{r3, pc}
   b66d0:	00030220 	.word	0x00030220

000b66d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b66d4:	b508      	push	{r3, lr}
   b66d6:	4b02      	ldr	r3, [pc, #8]	; (b66e0 <set_system_mode+0xc>)
   b66d8:	681b      	ldr	r3, [r3, #0]
   b66da:	685b      	ldr	r3, [r3, #4]
   b66dc:	9301      	str	r3, [sp, #4]
   b66de:	bd08      	pop	{r3, pc}
   b66e0:	00030220 	.word	0x00030220

000b66e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b66e4:	b508      	push	{r3, lr}
   b66e6:	4b02      	ldr	r3, [pc, #8]	; (b66f0 <system_delay_ms+0xc>)
   b66e8:	681b      	ldr	r3, [r3, #0]
   b66ea:	695b      	ldr	r3, [r3, #20]
   b66ec:	9301      	str	r3, [sp, #4]
   b66ee:	bd08      	pop	{r3, pc}
   b66f0:	00030220 	.word	0x00030220

000b66f4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b66f4:	b508      	push	{r3, lr}
   b66f6:	4b02      	ldr	r3, [pc, #8]	; (b6700 <system_thread_set_state+0xc>)
   b66f8:	681b      	ldr	r3, [r3, #0]
   b66fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b66fc:	9301      	str	r3, [sp, #4]
   b66fe:	bd08      	pop	{r3, pc}
   b6700:	00030220 	.word	0x00030220

000b6704 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6704:	b508      	push	{r3, lr}
   b6706:	4b02      	ldr	r3, [pc, #8]	; (b6710 <application_thread_current+0xc>)
   b6708:	681b      	ldr	r3, [r3, #0]
   b670a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b670c:	9301      	str	r3, [sp, #4]
   b670e:	bd08      	pop	{r3, pc}
   b6710:	00030220 	.word	0x00030220

000b6714 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6714:	b508      	push	{r3, lr}
   b6716:	4b02      	ldr	r3, [pc, #8]	; (b6720 <application_thread_invoke+0xc>)
   b6718:	681b      	ldr	r3, [r3, #0]
   b671a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b671c:	9301      	str	r3, [sp, #4]
   b671e:	bd08      	pop	{r3, pc}
   b6720:	00030220 	.word	0x00030220

000b6724 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6724:	b508      	push	{r3, lr}
   b6726:	4b02      	ldr	r3, [pc, #8]	; (b6730 <system_thread_get_state+0xc>)
   b6728:	681b      	ldr	r3, [r3, #0]
   b672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b672c:	9301      	str	r3, [sp, #4]
   b672e:	bd08      	pop	{r3, pc}
   b6730:	00030220 	.word	0x00030220

000b6734 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6734:	b508      	push	{r3, lr}
   b6736:	4b03      	ldr	r3, [pc, #12]	; (b6744 <system_ctrl_set_app_request_handler+0x10>)
   b6738:	681b      	ldr	r3, [r3, #0]
   b673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b673e:	9301      	str	r3, [sp, #4]
   b6740:	bd08      	pop	{r3, pc}
   b6742:	0000      	.short	0x0000
   b6744:	00030220 	.word	0x00030220

000b6748 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6748:	b508      	push	{r3, lr}
   b674a:	4b03      	ldr	r3, [pc, #12]	; (b6758 <system_ctrl_set_result+0x10>)
   b674c:	681b      	ldr	r3, [r3, #0]
   b674e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6752:	9301      	str	r3, [sp, #4]
   b6754:	bd08      	pop	{r3, pc}
   b6756:	0000      	.short	0x0000
   b6758:	00030220 	.word	0x00030220

000b675c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b675c:	b508      	push	{r3, lr}
   b675e:	4b02      	ldr	r3, [pc, #8]	; (b6768 <network_connect+0xc>)
   b6760:	681b      	ldr	r3, [r3, #0]
   b6762:	685b      	ldr	r3, [r3, #4]
   b6764:	9301      	str	r3, [sp, #4]
   b6766:	bd08      	pop	{r3, pc}
   b6768:	00030240 	.word	0x00030240

000b676c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b676c:	b508      	push	{r3, lr}
   b676e:	4b02      	ldr	r3, [pc, #8]	; (b6778 <network_connecting+0xc>)
   b6770:	681b      	ldr	r3, [r3, #0]
   b6772:	689b      	ldr	r3, [r3, #8]
   b6774:	9301      	str	r3, [sp, #4]
   b6776:	bd08      	pop	{r3, pc}
   b6778:	00030240 	.word	0x00030240

000b677c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b677c:	b508      	push	{r3, lr}
   b677e:	4b02      	ldr	r3, [pc, #8]	; (b6788 <network_disconnect+0xc>)
   b6780:	681b      	ldr	r3, [r3, #0]
   b6782:	68db      	ldr	r3, [r3, #12]
   b6784:	9301      	str	r3, [sp, #4]
   b6786:	bd08      	pop	{r3, pc}
   b6788:	00030240 	.word	0x00030240

000b678c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b678c:	b508      	push	{r3, lr}
   b678e:	4b02      	ldr	r3, [pc, #8]	; (b6798 <network_ready+0xc>)
   b6790:	681b      	ldr	r3, [r3, #0]
   b6792:	691b      	ldr	r3, [r3, #16]
   b6794:	9301      	str	r3, [sp, #4]
   b6796:	bd08      	pop	{r3, pc}
   b6798:	00030240 	.word	0x00030240

000b679c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b679c:	b508      	push	{r3, lr}
   b679e:	4b02      	ldr	r3, [pc, #8]	; (b67a8 <network_on+0xc>)
   b67a0:	681b      	ldr	r3, [r3, #0]
   b67a2:	695b      	ldr	r3, [r3, #20]
   b67a4:	9301      	str	r3, [sp, #4]
   b67a6:	bd08      	pop	{r3, pc}
   b67a8:	00030240 	.word	0x00030240

000b67ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b67ac:	b508      	push	{r3, lr}
   b67ae:	4b02      	ldr	r3, [pc, #8]	; (b67b8 <network_off+0xc>)
   b67b0:	681b      	ldr	r3, [r3, #0]
   b67b2:	699b      	ldr	r3, [r3, #24]
   b67b4:	9301      	str	r3, [sp, #4]
   b67b6:	bd08      	pop	{r3, pc}
   b67b8:	00030240 	.word	0x00030240

000b67bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b67bc:	b508      	push	{r3, lr}
   b67be:	4b02      	ldr	r3, [pc, #8]	; (b67c8 <network_listen+0xc>)
   b67c0:	681b      	ldr	r3, [r3, #0]
   b67c2:	69db      	ldr	r3, [r3, #28]
   b67c4:	9301      	str	r3, [sp, #4]
   b67c6:	bd08      	pop	{r3, pc}
   b67c8:	00030240 	.word	0x00030240

000b67cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b67cc:	b508      	push	{r3, lr}
   b67ce:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <network_listening+0xc>)
   b67d0:	681b      	ldr	r3, [r3, #0]
   b67d2:	6a1b      	ldr	r3, [r3, #32]
   b67d4:	9301      	str	r3, [sp, #4]
   b67d6:	bd08      	pop	{r3, pc}
   b67d8:	00030240 	.word	0x00030240

000b67dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b67dc:	b508      	push	{r3, lr}
   b67de:	4b02      	ldr	r3, [pc, #8]	; (b67e8 <network_set_listen_timeout+0xc>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67e4:	9301      	str	r3, [sp, #4]
   b67e6:	bd08      	pop	{r3, pc}
   b67e8:	00030240 	.word	0x00030240

000b67ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b02      	ldr	r3, [pc, #8]	; (b67f8 <network_get_listen_timeout+0xc>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b67f4:	9301      	str	r3, [sp, #4]
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	00030240 	.word	0x00030240

000b67fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b67fc:	b508      	push	{r3, lr}
   b67fe:	4b02      	ldr	r3, [pc, #8]	; (b6808 <network_is_on+0xc>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6804:	9301      	str	r3, [sp, #4]
   b6806:	bd08      	pop	{r3, pc}
   b6808:	00030240 	.word	0x00030240

000b680c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <network_is_off+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	00030240 	.word	0x00030240

000b681c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <spark_process+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	689b      	ldr	r3, [r3, #8]
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	00030244 	.word	0x00030244

000b682c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b682c:	b508      	push	{r3, lr}
   b682e:	4b02      	ldr	r3, [pc, #8]	; (b6838 <spark_cloud_flag_connected+0xc>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	695b      	ldr	r3, [r3, #20]
   b6834:	9301      	str	r3, [sp, #4]
   b6836:	bd08      	pop	{r3, pc}
   b6838:	00030244 	.word	0x00030244

000b683c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b683c:	b508      	push	{r3, lr}
   b683e:	4b02      	ldr	r3, [pc, #8]	; (b6848 <spark_send_event+0xc>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	6a1b      	ldr	r3, [r3, #32]
   b6844:	9301      	str	r3, [sp, #4]
   b6846:	bd08      	pop	{r3, pc}
   b6848:	00030244 	.word	0x00030244

000b684c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b684c:	b508      	push	{r3, lr}
   b684e:	4b02      	ldr	r3, [pc, #8]	; (b6858 <spark_subscribe+0xc>)
   b6850:	681b      	ldr	r3, [r3, #0]
   b6852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6854:	9301      	str	r3, [sp, #4]
   b6856:	bd08      	pop	{r3, pc}
   b6858:	00030244 	.word	0x00030244

000b685c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b685c:	b508      	push	{r3, lr}
   b685e:	4b02      	ldr	r3, [pc, #8]	; (b6868 <spark_sync_time_pending+0xc>)
   b6860:	681b      	ldr	r3, [r3, #0]
   b6862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6864:	9301      	str	r3, [sp, #4]
   b6866:	bd08      	pop	{r3, pc}
   b6868:	00030244 	.word	0x00030244

000b686c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b686c:	b508      	push	{r3, lr}
   b686e:	4b02      	ldr	r3, [pc, #8]	; (b6878 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6870:	681b      	ldr	r3, [r3, #0]
   b6872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6874:	9301      	str	r3, [sp, #4]
   b6876:	bd08      	pop	{r3, pc}
   b6878:	00030244 	.word	0x00030244

000b687c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b687c:	b508      	push	{r3, lr}
   b687e:	4b02      	ldr	r3, [pc, #8]	; (b6888 <malloc+0xc>)
   b6880:	681b      	ldr	r3, [r3, #0]
   b6882:	681b      	ldr	r3, [r3, #0]
   b6884:	9301      	str	r3, [sp, #4]
   b6886:	bd08      	pop	{r3, pc}
   b6888:	0003021c 	.word	0x0003021c

000b688c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b688c:	b508      	push	{r3, lr}
   b688e:	4b02      	ldr	r3, [pc, #8]	; (b6898 <free+0xc>)
   b6890:	681b      	ldr	r3, [r3, #0]
   b6892:	685b      	ldr	r3, [r3, #4]
   b6894:	9301      	str	r3, [sp, #4]
   b6896:	bd08      	pop	{r3, pc}
   b6898:	0003021c 	.word	0x0003021c

000b689c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b689c:	b508      	push	{r3, lr}
   b689e:	4b02      	ldr	r3, [pc, #8]	; (b68a8 <realloc+0xc>)
   b68a0:	681b      	ldr	r3, [r3, #0]
   b68a2:	689b      	ldr	r3, [r3, #8]
   b68a4:	9301      	str	r3, [sp, #4]
   b68a6:	bd08      	pop	{r3, pc}
   b68a8:	0003021c 	.word	0x0003021c

000b68ac <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b68ac:	b508      	push	{r3, lr}
   b68ae:	4b02      	ldr	r3, [pc, #8]	; (b68b8 <siprintf+0xc>)
   b68b0:	681b      	ldr	r3, [r3, #0]
   b68b2:	691b      	ldr	r3, [r3, #16]
   b68b4:	9301      	str	r3, [sp, #4]
   b68b6:	bd08      	pop	{r3, pc}
   b68b8:	0003021c 	.word	0x0003021c

000b68bc <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b68bc:	b508      	push	{r3, lr}
   b68be:	4b02      	ldr	r3, [pc, #8]	; (b68c8 <vsnprintf+0xc>)
   b68c0:	681b      	ldr	r3, [r3, #0]
   b68c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b68c4:	9301      	str	r3, [sp, #4]
   b68c6:	bd08      	pop	{r3, pc}
   b68c8:	0003021c 	.word	0x0003021c

000b68cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b68cc:	b508      	push	{r3, lr}
   b68ce:	4b02      	ldr	r3, [pc, #8]	; (b68d8 <abort+0xc>)
   b68d0:	681b      	ldr	r3, [r3, #0]
   b68d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b68d4:	9301      	str	r3, [sp, #4]
   b68d6:	bd08      	pop	{r3, pc}
   b68d8:	0003021c 	.word	0x0003021c

000b68dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b68dc:	b508      	push	{r3, lr}
   b68de:	4b02      	ldr	r3, [pc, #8]	; (b68e8 <_malloc_r+0xc>)
   b68e0:	681b      	ldr	r3, [r3, #0]
   b68e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b68e4:	9301      	str	r3, [sp, #4]
   b68e6:	bd08      	pop	{r3, pc}
   b68e8:	0003021c 	.word	0x0003021c

000b68ec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b68ec:	b508      	push	{r3, lr}
   b68ee:	4b02      	ldr	r3, [pc, #8]	; (b68f8 <__errno+0xc>)
   b68f0:	681b      	ldr	r3, [r3, #0]
   b68f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b68f4:	9301      	str	r3, [sp, #4]
   b68f6:	bd08      	pop	{r3, pc}
   b68f8:	0003021c 	.word	0x0003021c

000b68fc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b68fc:	b508      	push	{r3, lr}
   b68fe:	4b02      	ldr	r3, [pc, #8]	; (b6908 <__assert_func+0xc>)
   b6900:	681b      	ldr	r3, [r3, #0]
   b6902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6904:	9301      	str	r3, [sp, #4]
   b6906:	bd08      	pop	{r3, pc}
   b6908:	0003021c 	.word	0x0003021c

000b690c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b690c:	b508      	push	{r3, lr}
   b690e:	4b02      	ldr	r3, [pc, #8]	; (b6918 <newlib_impure_ptr_callback+0xc>)
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6914:	9301      	str	r3, [sp, #4]
   b6916:	bd08      	pop	{r3, pc}
   b6918:	0003021c 	.word	0x0003021c

000b691c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b691c:	b508      	push	{r3, lr}
   b691e:	4b02      	ldr	r3, [pc, #8]	; (b6928 <localtime_r+0xc>)
   b6920:	681b      	ldr	r3, [r3, #0]
   b6922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6924:	9301      	str	r3, [sp, #4]
   b6926:	bd08      	pop	{r3, pc}
   b6928:	0003021c 	.word	0x0003021c

000b692c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b692c:	2200      	movs	r2, #0
   b692e:	6840      	ldr	r0, [r0, #4]
   b6930:	4611      	mov	r1, r2
   b6932:	f7ff bf4b 	b.w	b67cc <network_listening>

000b6936 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6936:	2200      	movs	r2, #0
   b6938:	6840      	ldr	r0, [r0, #4]
   b693a:	4611      	mov	r1, r2
   b693c:	f7ff bf56 	b.w	b67ec <network_get_listen_timeout>

000b6940 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6940:	6840      	ldr	r0, [r0, #4]
   b6942:	2200      	movs	r2, #0
   b6944:	f7ff bf4a 	b.w	b67dc <network_set_listen_timeout>

000b6948 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6948:	6840      	ldr	r0, [r0, #4]
   b694a:	2200      	movs	r2, #0
   b694c:	f081 0101 	eor.w	r1, r1, #1
   b6950:	f7ff bf34 	b.w	b67bc <network_listen>

000b6954 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6954:	2300      	movs	r3, #0
   b6956:	6840      	ldr	r0, [r0, #4]
   b6958:	461a      	mov	r2, r3
   b695a:	4619      	mov	r1, r3
   b695c:	f7ff bf26 	b.w	b67ac <network_off>

000b6960 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6960:	2300      	movs	r3, #0
   b6962:	6840      	ldr	r0, [r0, #4]
   b6964:	461a      	mov	r2, r3
   b6966:	4619      	mov	r1, r3
   b6968:	f7ff bf18 	b.w	b679c <network_on>

000b696c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b696c:	2200      	movs	r2, #0
   b696e:	6840      	ldr	r0, [r0, #4]
   b6970:	4611      	mov	r1, r2
   b6972:	f7ff bf0b 	b.w	b678c <network_ready>

000b6976 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6976:	2200      	movs	r2, #0
   b6978:	6840      	ldr	r0, [r0, #4]
   b697a:	4611      	mov	r1, r2
   b697c:	f7ff bef6 	b.w	b676c <network_connecting>

000b6980 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6980:	6840      	ldr	r0, [r0, #4]
   b6982:	2200      	movs	r2, #0
   b6984:	2102      	movs	r1, #2
   b6986:	f7ff bef9 	b.w	b677c <network_disconnect>

000b698a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b698a:	2300      	movs	r3, #0
   b698c:	6840      	ldr	r0, [r0, #4]
   b698e:	461a      	mov	r2, r3
   b6990:	f7ff bee4 	b.w	b675c <network_connect>

000b6994 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6994:	4b02      	ldr	r3, [pc, #8]	; (b69a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6996:	2203      	movs	r2, #3
   b6998:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b699a:	4a02      	ldr	r2, [pc, #8]	; (b69a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b699c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b699e:	4770      	bx	lr
   b69a0:	2003e5ec 	.word	0x2003e5ec
   b69a4:	000bb12c 	.word	0x000bb12c

000b69a8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b69a8:	b510      	push	{r4, lr}
   b69aa:	4604      	mov	r4, r0
   b69ac:	4608      	mov	r0, r1
{
    _spi = spi;
   b69ae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b69b0:	f7ff fe40 	bl	b6634 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b69b4:	2300      	movs	r3, #0
   b69b6:	6063      	str	r3, [r4, #4]
}
   b69b8:	4620      	mov	r0, r4
   b69ba:	bd10      	pop	{r4, pc}

000b69bc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b69bc:	4b05      	ldr	r3, [pc, #20]	; (b69d4 <_GLOBAL__sub_I_System+0x18>)
   b69be:	2202      	movs	r2, #2
   b69c0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b69c2:	4b05      	ldr	r3, [pc, #20]	; (b69d8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b69c4:	4a05      	ldr	r2, [pc, #20]	; (b69dc <_GLOBAL__sub_I_System+0x20>)
   b69c6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b69c8:	2000      	movs	r0, #0
   b69ca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b69ce:	f7ff be81 	b.w	b66d4 <set_system_mode>
   b69d2:	bf00      	nop
   b69d4:	2003e600 	.word	0x2003e600
   b69d8:	2003e5f4 	.word	0x2003e5f4
   b69dc:	ffff0000 	.word	0xffff0000

000b69e0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b69e0:	b510      	push	{r4, lr}
   b69e2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b69e4:	f7fe f876 	bl	b4ad4 <strlen>
   b69e8:	3801      	subs	r0, #1
   b69ea:	1823      	adds	r3, r4, r0
   b69ec:	4620      	mov	r0, r4
	while(i<j){
   b69ee:	4283      	cmp	r3, r0
   b69f0:	d906      	bls.n	b6a00 <_Z11str_reversePc+0x20>
		c = *i;
   b69f2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b69f4:	7819      	ldrb	r1, [r3, #0]
   b69f6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b69fa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b69fe:	e7f6      	b.n	b69ee <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6a00:	bd10      	pop	{r4, pc}

000b6a02 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b6a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b6a06:	1e93      	subs	r3, r2, #2
{
   b6a08:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b6a0a:	2b22      	cmp	r3, #34	; 0x22
   b6a0c:	f04f 0300 	mov.w	r3, #0
{
   b6a10:	460d      	mov	r5, r1
   b6a12:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b6a14:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b6a18:	d927      	bls.n	b6a6a <ltoa+0x68>

      if (10 == base && N < 0L)
   b6a1a:	2800      	cmp	r0, #0
   b6a1c:	da2a      	bge.n	b6a74 <ltoa+0x72>
      {
            *head++ = '-';
   b6a1e:	462e      	mov	r6, r5
   b6a20:	232d      	movs	r3, #45	; 0x2d
   b6a22:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b6a26:	4240      	negs	r0, r0
   b6a28:	240a      	movs	r4, #10
      *tail-- = '\0';
   b6a2a:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b6a2e:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b6a32:	4622      	mov	r2, r4
   b6a34:	4601      	mov	r1, r0
   b6a36:	a801      	add	r0, sp, #4
   b6a38:	f002 f9c8 	bl	b8dcc <ldiv>
   b6a3c:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b6a3e:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b6a40:	2b09      	cmp	r3, #9
   b6a42:	bfcc      	ite	gt
   b6a44:	2237      	movgt	r2, #55	; 0x37
   b6a46:	2230      	movle	r2, #48	; 0x30
   b6a48:	fa52 f383 	uxtab	r3, r2, r3
   b6a4c:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b6a50:	f108 0801 	add.w	r8, r8, #1
   b6a54:	2800      	cmp	r0, #0
   b6a56:	d1ec      	bne.n	b6a32 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b6a58:	4642      	mov	r2, r8
   b6a5a:	1c79      	adds	r1, r7, #1
   b6a5c:	4630      	mov	r0, r6
   b6a5e:	f002 f9d9 	bl	b8e14 <memcpy>
      return str;
}
   b6a62:	4628      	mov	r0, r5
   b6a64:	b00c      	add	sp, #48	; 0x30
   b6a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b6a6a:	2a0a      	cmp	r2, #10
   b6a6c:	d0d5      	beq.n	b6a1a <ltoa+0x18>
      if (uarg)
   b6a6e:	b118      	cbz	r0, b6a78 <ltoa+0x76>
   b6a70:	462e      	mov	r6, r5
   b6a72:	e7da      	b.n	b6a2a <ltoa+0x28>
   b6a74:	240a      	movs	r4, #10
   b6a76:	e7fa      	b.n	b6a6e <ltoa+0x6c>
      else  *tail-- = '0';
   b6a78:	2330      	movs	r3, #48	; 0x30
   b6a7a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b6a7e:	462e      	mov	r6, r5
   b6a80:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b6a84:	f04f 0802 	mov.w	r8, #2
   b6a88:	e7e6      	b.n	b6a58 <ltoa+0x56>

000b6a8a <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b6a8a:	b570      	push	{r4, r5, r6, lr}
   b6a8c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b6a8e:	1e91      	subs	r1, r2, #2
   b6a90:	2922      	cmp	r1, #34	; 0x22
   b6a92:	d81d      	bhi.n	b6ad0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6a94:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6a96:	b930      	cbnz	r0, b6aa6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6a98:	4423      	add	r3, r4
            *ptr++ = '0';
   b6a9a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6a9c:	429d      	cmp	r5, r3
   b6a9e:	d210      	bcs.n	b6ac2 <ultoa+0x38>
            *ptr++ = '0';
   b6aa0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6aa4:	e7fa      	b.n	b6a9c <ultoa+0x12>
            result.quot = a/radix;
   b6aa6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b6aaa:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6aae:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6ab0:	2809      	cmp	r0, #9
                *ptr += '0';
   b6ab2:	bf94      	ite	ls
   b6ab4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b6ab6:	3157      	addhi	r1, #87	; 0x57
   b6ab8:	b2c9      	uxtb	r1, r1
   b6aba:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6abe:	4630      	mov	r0, r6
	while(a){
   b6ac0:	e7e9      	b.n	b6a96 <ultoa+0xc>

	*ptr = '\0';
   b6ac2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6ac4:	4620      	mov	r0, r4
	*ptr = '\0';
   b6ac6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6ac8:	f7ff ff8a 	bl	b69e0 <_Z11str_reversePc>
	return buffer;
   b6acc:	4620      	mov	r0, r4
}
   b6ace:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6ad0:	2000      	movs	r0, #0
   b6ad2:	e7fc      	b.n	b6ace <ultoa+0x44>

000b6ad4 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b6ad4:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b6ad6:	2301      	movs	r3, #1
   b6ad8:	f7ff ffd7 	bl	b6a8a <ultoa>
}
   b6adc:	bd08      	pop	{r3, pc}

000b6ade <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6ade:	b510      	push	{r4, lr}
   b6ae0:	4604      	mov	r4, r0
{
	free(buffer);
   b6ae2:	6800      	ldr	r0, [r0, #0]
   b6ae4:	f7ff fed2 	bl	b688c <free>
}
   b6ae8:	4620      	mov	r0, r4
   b6aea:	bd10      	pop	{r4, pc}

000b6aec <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6aec:	b510      	push	{r4, lr}
   b6aee:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6af0:	6800      	ldr	r0, [r0, #0]
   b6af2:	b108      	cbz	r0, b6af8 <_ZN6String10invalidateEv+0xc>
   b6af4:	f7ff feca 	bl	b688c <free>
	buffer = NULL;
   b6af8:	2300      	movs	r3, #0
	capacity = len = 0;
   b6afa:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6afe:	6023      	str	r3, [r4, #0]
}
   b6b00:	bd10      	pop	{r4, pc}

000b6b02 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6b02:	b538      	push	{r3, r4, r5, lr}
   b6b04:	4604      	mov	r4, r0
   b6b06:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6b08:	6800      	ldr	r0, [r0, #0]
   b6b0a:	3101      	adds	r1, #1
   b6b0c:	f7ff fec6 	bl	b689c <realloc>
	if (newbuffer) {
   b6b10:	b110      	cbz	r0, b6b18 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6b12:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6b16:	2001      	movs	r0, #1
	}
	return 0;
}
   b6b18:	bd38      	pop	{r3, r4, r5, pc}

000b6b1a <_ZN6String7reserveEj>:
{
   b6b1a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6b1c:	6803      	ldr	r3, [r0, #0]
{
   b6b1e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6b20:	b123      	cbz	r3, b6b2c <_ZN6String7reserveEj+0x12>
   b6b22:	6843      	ldr	r3, [r0, #4]
   b6b24:	428b      	cmp	r3, r1
   b6b26:	d301      	bcc.n	b6b2c <_ZN6String7reserveEj+0x12>
   b6b28:	2001      	movs	r0, #1
}
   b6b2a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	f7ff ffe8 	bl	b6b02 <_ZN6String12changeBufferEj>
   b6b32:	2800      	cmp	r0, #0
   b6b34:	d0f9      	beq.n	b6b2a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6b36:	68a3      	ldr	r3, [r4, #8]
   b6b38:	2b00      	cmp	r3, #0
   b6b3a:	d1f5      	bne.n	b6b28 <_ZN6String7reserveEj+0xe>
   b6b3c:	6822      	ldr	r2, [r4, #0]
   b6b3e:	7013      	strb	r3, [r2, #0]
   b6b40:	e7f2      	b.n	b6b28 <_ZN6String7reserveEj+0xe>

000b6b42 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6b42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b44:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6b46:	4611      	mov	r1, r2
   b6b48:	9201      	str	r2, [sp, #4]
{
   b6b4a:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6b4c:	f7ff ffe5 	bl	b6b1a <_ZN6String7reserveEj>
   b6b50:	9a01      	ldr	r2, [sp, #4]
   b6b52:	b928      	cbnz	r0, b6b60 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6b54:	4620      	mov	r0, r4
   b6b56:	f7ff ffc9 	bl	b6aec <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6b5a:	4620      	mov	r0, r4
   b6b5c:	b003      	add	sp, #12
   b6b5e:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6b60:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6b62:	4629      	mov	r1, r5
   b6b64:	6820      	ldr	r0, [r4, #0]
   b6b66:	f002 f955 	bl	b8e14 <memcpy>
	buffer[len] = 0;
   b6b6a:	6822      	ldr	r2, [r4, #0]
   b6b6c:	68a3      	ldr	r3, [r4, #8]
   b6b6e:	2100      	movs	r1, #0
   b6b70:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6b72:	e7f2      	b.n	b6b5a <_ZN6String4copyEPKcj+0x18>

000b6b74 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6b74:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6b76:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6b78:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6b7c:	4604      	mov	r4, r0
	len = 0;
   b6b7e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6b80:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6b82:	b141      	cbz	r1, b6b96 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6b84:	4608      	mov	r0, r1
   b6b86:	9101      	str	r1, [sp, #4]
   b6b88:	f7fd ffa4 	bl	b4ad4 <strlen>
   b6b8c:	9901      	ldr	r1, [sp, #4]
   b6b8e:	4602      	mov	r2, r0
   b6b90:	4620      	mov	r0, r4
   b6b92:	f7ff ffd6 	bl	b6b42 <_ZN6String4copyEPKcj>
}
   b6b96:	4620      	mov	r0, r4
   b6b98:	b002      	add	sp, #8
   b6b9a:	bd10      	pop	{r4, pc}

000b6b9c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6b9c:	4288      	cmp	r0, r1
{
   b6b9e:	b510      	push	{r4, lr}
   b6ba0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6ba2:	d005      	beq.n	b6bb0 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6ba4:	680b      	ldr	r3, [r1, #0]
   b6ba6:	b12b      	cbz	r3, b6bb4 <_ZN6StringaSERKS_+0x18>
   b6ba8:	688a      	ldr	r2, [r1, #8]
   b6baa:	4619      	mov	r1, r3
   b6bac:	f7ff ffc9 	bl	b6b42 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	bd10      	pop	{r4, pc}
	else invalidate();
   b6bb4:	f7ff ff9a 	bl	b6aec <_ZN6String10invalidateEv>
   b6bb8:	e7fa      	b.n	b6bb0 <_ZN6StringaSERKS_+0x14>

000b6bba <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6bba:	b510      	push	{r4, lr}
	buffer = NULL;
   b6bbc:	2300      	movs	r3, #0
String::String(const String &value)
   b6bbe:	4604      	mov	r4, r0
	capacity = 0;
   b6bc0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6bc4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6bc6:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6bc8:	f7ff ffe8 	bl	b6b9c <_ZN6StringaSERKS_>
}
   b6bcc:	4620      	mov	r0, r4
   b6bce:	bd10      	pop	{r4, pc}

000b6bd0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6bd0:	b513      	push	{r0, r1, r4, lr}
   b6bd2:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6bd4:	b159      	cbz	r1, b6bee <_ZN6StringaSEPKc+0x1e>
   b6bd6:	4608      	mov	r0, r1
   b6bd8:	9101      	str	r1, [sp, #4]
   b6bda:	f7fd ff7b 	bl	b4ad4 <strlen>
   b6bde:	9901      	ldr	r1, [sp, #4]
   b6be0:	4602      	mov	r2, r0
   b6be2:	4620      	mov	r0, r4
   b6be4:	f7ff ffad 	bl	b6b42 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6be8:	4620      	mov	r0, r4
   b6bea:	b002      	add	sp, #8
   b6bec:	bd10      	pop	{r4, pc}
	else invalidate();
   b6bee:	f7ff ff7d 	bl	b6aec <_ZN6String10invalidateEv>
   b6bf2:	e7f9      	b.n	b6be8 <_ZN6StringaSEPKc+0x18>

000b6bf4 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b6bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6bf6:	4604      	mov	r4, r0
	buffer = NULL;
   b6bf8:	2300      	movs	r3, #0
	capacity = 0;
   b6bfa:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6bfe:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6c00:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b6c02:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b6c04:	a901      	add	r1, sp, #4
   b6c06:	f7ff ff65 	bl	b6ad4 <utoa>
	*this = buf;
   b6c0a:	a901      	add	r1, sp, #4
   b6c0c:	4620      	mov	r0, r4
   b6c0e:	f7ff ffdf 	bl	b6bd0 <_ZN6StringaSEPKc>
}
   b6c12:	4620      	mov	r0, r4
   b6c14:	b004      	add	sp, #16
   b6c16:	bd10      	pop	{r4, pc}

000b6c18 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b6c18:	b510      	push	{r4, lr}
   b6c1a:	4604      	mov	r4, r0
   b6c1c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6c1e:	2300      	movs	r3, #0
	capacity = 0;
   b6c20:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6c24:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6c26:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b6c28:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b6c2a:	a901      	add	r1, sp, #4
   b6c2c:	f7ff fee9 	bl	b6a02 <ltoa>
	*this = buf;
   b6c30:	a901      	add	r1, sp, #4
   b6c32:	4620      	mov	r0, r4
   b6c34:	f7ff ffcc 	bl	b6bd0 <_ZN6StringaSEPKc>
}
   b6c38:	4620      	mov	r0, r4
   b6c3a:	b00a      	add	sp, #40	; 0x28
   b6c3c:	bd10      	pop	{r4, pc}

000b6c3e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6c3e:	b570      	push	{r4, r5, r6, lr}
   b6c40:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6c42:	460e      	mov	r6, r1
   b6c44:	b909      	cbnz	r1, b6c4a <_ZN6String6concatEPKcj+0xc>
   b6c46:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6c48:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6c4a:	b16a      	cbz	r2, b6c68 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6c4c:	6884      	ldr	r4, [r0, #8]
   b6c4e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6c50:	4621      	mov	r1, r4
   b6c52:	f7ff ff62 	bl	b6b1a <_ZN6String7reserveEj>
   b6c56:	2800      	cmp	r0, #0
   b6c58:	d0f5      	beq.n	b6c46 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6c5a:	6828      	ldr	r0, [r5, #0]
   b6c5c:	68ab      	ldr	r3, [r5, #8]
   b6c5e:	4631      	mov	r1, r6
   b6c60:	4418      	add	r0, r3
   b6c62:	f002 f935 	bl	b8ed0 <strcpy>
	len = newlen;
   b6c66:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6c68:	2001      	movs	r0, #1
   b6c6a:	e7ed      	b.n	b6c48 <_ZN6String6concatEPKcj+0xa>

000b6c6c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6c6c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6c6e:	688a      	ldr	r2, [r1, #8]
   b6c70:	6809      	ldr	r1, [r1, #0]
{
   b6c72:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6c74:	f7ff ffe3 	bl	b6c3e <_ZN6String6concatEPKcj>
   b6c78:	b910      	cbnz	r0, b6c80 <_ZplRK15StringSumHelperRK6String+0x14>
   b6c7a:	4620      	mov	r0, r4
   b6c7c:	f7ff ff36 	bl	b6aec <_ZN6String10invalidateEv>
	return a;
}
   b6c80:	4620      	mov	r0, r4
   b6c82:	bd10      	pop	{r4, pc}

000b6c84 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6c84:	b40e      	push	{r1, r2, r3}
   b6c86:	b570      	push	{r4, r5, r6, lr}
   b6c88:	b087      	sub	sp, #28
   b6c8a:	ad0b      	add	r5, sp, #44	; 0x2c
   b6c8c:	4604      	mov	r4, r0
   b6c8e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6c92:	9201      	str	r2, [sp, #4]
   b6c94:	462b      	mov	r3, r5
   b6c96:	2105      	movs	r1, #5
   b6c98:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6c9a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6c9c:	f7ff fe0e 	bl	b68bc <vsnprintf>
    va_end(marker);

    String result;
   b6ca0:	490b      	ldr	r1, [pc, #44]	; (b6cd0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6ca2:	4606      	mov	r6, r0
    String result;
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	f7ff ff65 	bl	b6b74 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b6caa:	4631      	mov	r1, r6
   b6cac:	4620      	mov	r0, r4
   b6cae:	f7ff ff34 	bl	b6b1a <_ZN6String7reserveEj>
    if (result.buffer) {
   b6cb2:	6820      	ldr	r0, [r4, #0]
   b6cb4:	b130      	cbz	r0, b6cc4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6cb6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b6cb8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6cba:	462b      	mov	r3, r5
   b6cbc:	1c71      	adds	r1, r6, #1
   b6cbe:	f7ff fdfd 	bl	b68bc <vsnprintf>
        va_end(marker);
        result.len = n;
   b6cc2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6cc4:	4620      	mov	r0, r4
   b6cc6:	b007      	add	sp, #28
   b6cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6ccc:	b003      	add	sp, #12
   b6cce:	4770      	bx	lr
   b6cd0:	000baf94 	.word	0x000baf94

000b6cd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6cd4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6cd6:	6843      	ldr	r3, [r0, #4]
   b6cd8:	3b01      	subs	r3, #1
    {
   b6cda:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6cdc:	6043      	str	r3, [r0, #4]
   b6cde:	b963      	cbnz	r3, b6cfa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6ce0:	6803      	ldr	r3, [r0, #0]
   b6ce2:	689b      	ldr	r3, [r3, #8]
   b6ce4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6ce6:	68a3      	ldr	r3, [r4, #8]
   b6ce8:	3b01      	subs	r3, #1
   b6cea:	60a3      	str	r3, [r4, #8]
   b6cec:	b92b      	cbnz	r3, b6cfa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6cee:	6823      	ldr	r3, [r4, #0]
   b6cf0:	4620      	mov	r0, r4
   b6cf2:	68db      	ldr	r3, [r3, #12]
    }
   b6cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6cf8:	4718      	bx	r3
    }
   b6cfa:	bd10      	pop	{r4, pc}

000b6cfc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6cfc:	b513      	push	{r0, r1, r4, lr}
   b6cfe:	460b      	mov	r3, r1
   b6d00:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6d02:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6d06:	466c      	mov	r4, sp
   b6d08:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6d0c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6d10:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6d14:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6d18:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6d1c:	b002      	add	sp, #8
   b6d1e:	bd10      	pop	{r4, pc}

000b6d20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6d20:	4802      	ldr	r0, [pc, #8]	; (b6d2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6d22:	2300      	movs	r3, #0
   b6d24:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6d26:	f7ff bbb5 	b.w	b6494 <os_mutex_recursive_create>
   b6d2a:	bf00      	nop
   b6d2c:	2003e604 	.word	0x2003e604

000b6d30 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d32:	4606      	mov	r6, r0
   b6d34:	460d      	mov	r5, r1
  size_t n = 0;
   b6d36:	188f      	adds	r7, r1, r2
   b6d38:	2400      	movs	r4, #0
  while (size--) {
   b6d3a:	42bd      	cmp	r5, r7
   b6d3c:	d00c      	beq.n	b6d58 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6d3e:	6833      	ldr	r3, [r6, #0]
   b6d40:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6d44:	689b      	ldr	r3, [r3, #8]
   b6d46:	4630      	mov	r0, r6
   b6d48:	4798      	blx	r3
     if (chunk>=0)
   b6d4a:	1e03      	subs	r3, r0, #0
   b6d4c:	db01      	blt.n	b6d52 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6d4e:	441c      	add	r4, r3
  while (size--) {
   b6d50:	e7f3      	b.n	b6d3a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6d52:	2c00      	cmp	r4, #0
   b6d54:	bf08      	it	eq
   b6d56:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6d58:	4620      	mov	r0, r4
   b6d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d5c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6d5c:	b513      	push	{r0, r1, r4, lr}
   b6d5e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6d60:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6d62:	b159      	cbz	r1, b6d7c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6d64:	9101      	str	r1, [sp, #4]
   b6d66:	f7fd feb5 	bl	b4ad4 <strlen>
   b6d6a:	6823      	ldr	r3, [r4, #0]
   b6d6c:	9901      	ldr	r1, [sp, #4]
   b6d6e:	68db      	ldr	r3, [r3, #12]
   b6d70:	4602      	mov	r2, r0
   b6d72:	4620      	mov	r0, r4
    }
   b6d74:	b002      	add	sp, #8
   b6d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6d7a:	4718      	bx	r3
    }
   b6d7c:	b002      	add	sp, #8
   b6d7e:	bd10      	pop	{r4, pc}

000b6d80 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6d80:	6803      	ldr	r3, [r0, #0]
   b6d82:	689b      	ldr	r3, [r3, #8]
   b6d84:	4718      	bx	r3

000b6d86 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6d86:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6d88:	210d      	movs	r1, #13
{
   b6d8a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6d8c:	f7ff fff8 	bl	b6d80 <_ZN5Print5printEc>
  n += print('\n');
   b6d90:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6d92:	4604      	mov	r4, r0
  n += print('\n');
   b6d94:	4628      	mov	r0, r5
   b6d96:	f7ff fff3 	bl	b6d80 <_ZN5Print5printEc>
  return n;
}
   b6d9a:	4420      	add	r0, r4
   b6d9c:	bd38      	pop	{r3, r4, r5, pc}

000b6d9e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6d9e:	b538      	push	{r3, r4, r5, lr}
   b6da0:	4605      	mov	r5, r0
  return write(str);
   b6da2:	f7ff ffdb 	bl	b6d5c <_ZN5Print5writeEPKc>
   b6da6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6da8:	4628      	mov	r0, r5
   b6daa:	f7ff ffec 	bl	b6d86 <_ZN5Print7printlnEv>
  return n;
}
   b6dae:	4420      	add	r0, r4
   b6db0:	bd38      	pop	{r3, r4, r5, pc}

000b6db2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6db2:	b530      	push	{r4, r5, lr}
   b6db4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6db6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6db8:	2a01      	cmp	r2, #1
  *str = '\0';
   b6dba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6dbe:	bf98      	it	ls
   b6dc0:	220a      	movls	r2, #10
   b6dc2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6dc4:	460d      	mov	r5, r1
   b6dc6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6dca:	fb01 5312 	mls	r3, r1, r2, r5
   b6dce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6dd2:	2b09      	cmp	r3, #9
   b6dd4:	bf94      	ite	ls
   b6dd6:	3330      	addls	r3, #48	; 0x30
   b6dd8:	3337      	addhi	r3, #55	; 0x37
   b6dda:	b2db      	uxtb	r3, r3
  } while(n);
   b6ddc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6dde:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6de2:	d9ef      	bls.n	b6dc4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6de4:	4621      	mov	r1, r4
   b6de6:	f7ff ffb9 	bl	b6d5c <_ZN5Print5writeEPKc>
}
   b6dea:	b00b      	add	sp, #44	; 0x2c
   b6dec:	bd30      	pop	{r4, r5, pc}

000b6dee <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6df2:	b086      	sub	sp, #24
   b6df4:	af00      	add	r7, sp, #0
   b6df6:	4605      	mov	r5, r0
   b6df8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6dfa:	1d38      	adds	r0, r7, #4
   b6dfc:	2114      	movs	r1, #20
{
   b6dfe:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6e00:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e02:	f7ff fd5b 	bl	b68bc <vsnprintf>

    if (n<bufsize)
   b6e06:	2813      	cmp	r0, #19
   b6e08:	d80e      	bhi.n	b6e28 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6e0a:	1d39      	adds	r1, r7, #4
   b6e0c:	4628      	mov	r0, r5
   b6e0e:	f7ff ffa5 	bl	b6d5c <_ZN5Print5writeEPKc>
   b6e12:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6e14:	b11e      	cbz	r6, b6e1e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6e16:	4628      	mov	r0, r5
   b6e18:	f7ff ffb5 	bl	b6d86 <_ZN5Print7printlnEv>
   b6e1c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6e1e:	4620      	mov	r0, r4
   b6e20:	3718      	adds	r7, #24
   b6e22:	46bd      	mov	sp, r7
   b6e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6e28:	f100 0308 	add.w	r3, r0, #8
   b6e2c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6e30:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6e32:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6e36:	4622      	mov	r2, r4
   b6e38:	1c41      	adds	r1, r0, #1
   b6e3a:	683b      	ldr	r3, [r7, #0]
   b6e3c:	4668      	mov	r0, sp
   b6e3e:	f7ff fd3d 	bl	b68bc <vsnprintf>
  return write(str);
   b6e42:	4669      	mov	r1, sp
   b6e44:	4628      	mov	r0, r5
   b6e46:	f7ff ff89 	bl	b6d5c <_ZN5Print5writeEPKc>
   b6e4a:	4604      	mov	r4, r0
   b6e4c:	46c5      	mov	sp, r8
   b6e4e:	e7e1      	b.n	b6e14 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6e50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6e50:	4b01      	ldr	r3, [pc, #4]	; (b6e58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6e52:	4a02      	ldr	r2, [pc, #8]	; (b6e5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6e54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6e56:	4770      	bx	lr
   b6e58:	2003e608 	.word	0x2003e608
   b6e5c:	000bb168 	.word	0x000bb168

000b6e60 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b6e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b6e64:	4a15      	ldr	r2, [pc, #84]	; (b6ebc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b6e66:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6ec8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b6e6a:	e9d2 6300 	ldrd	r6, r3, [r2]
   b6e6e:	1980      	adds	r0, r0, r6
   b6e70:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b6e74:	4b12      	ldr	r3, [pc, #72]	; (b6ec0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b6e76:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b6e7a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b6e7e:	1986      	adds	r6, r0, r6
   b6e80:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b6e84:	42bb      	cmp	r3, r7
   b6e86:	bf08      	it	eq
   b6e88:	42b2      	cmpeq	r2, r6
{
   b6e8a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b6e8c:	d013      	beq.n	b6eb6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b6e8e:	a903      	add	r1, sp, #12
   b6e90:	4668      	mov	r0, sp
   b6e92:	e9cd 6700 	strd	r6, r7, [sp]
   b6e96:	f7ff fd41 	bl	b691c <localtime_r>
	calendar_time.tm_year += 1900;
   b6e9a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6e9c:	4d09      	ldr	r5, [pc, #36]	; (b6ec4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b6e9e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6ea2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b6ea4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b6eae:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6eb2:	6823      	ldr	r3, [r4, #0]
   b6eb4:	602b      	str	r3, [r5, #0]
    }
}
   b6eb6:	b00c      	add	sp, #48	; 0x30
   b6eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6ebc:	2003e640 	.word	0x2003e640
   b6ec0:	2003e638 	.word	0x2003e638
   b6ec4:	2003e610 	.word	0x2003e610
   b6ec8:	2003e648 	.word	0x2003e648

000b6ecc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b6ecc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6ece:	2000      	movs	r0, #0
   b6ed0:	f7ff fcc4 	bl	b685c <spark_sync_time_pending>
   b6ed4:	b128      	cbz	r0, b6ee2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6ed6:	f7ff fca9 	bl	b682c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6eda:	f080 0001 	eor.w	r0, r0, #1
   b6ede:	b2c0      	uxtb	r0, r0
    }
   b6ee0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6ee2:	2001      	movs	r0, #1
   b6ee4:	e7fc      	b.n	b6ee0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b6ee8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b6ee8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b6eea:	f7ff ffb9 	bl	b6e60 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <_ZN9TimeClass5monthEx+0x10>)
   b6ef0:	6918      	ldr	r0, [r3, #16]
}
   b6ef2:	3001      	adds	r0, #1
   b6ef4:	bd08      	pop	{r3, pc}
   b6ef6:	bf00      	nop
   b6ef8:	2003e610 	.word	0x2003e610

000b6efc <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b6efc:	b530      	push	{r4, r5, lr}
   b6efe:	b093      	sub	sp, #76	; 0x4c
   b6f00:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b6f04:	4b19      	ldr	r3, [pc, #100]	; (b6f6c <_ZN9TimeClass7timeStrEx+0x70>)
{
   b6f06:	4604      	mov	r4, r0
    t += time_zone_cache;
   b6f08:	e9d3 1000 	ldrd	r1, r0, [r3]
   b6f0c:	9b01      	ldr	r3, [sp, #4]
   b6f0e:	1852      	adds	r2, r2, r1
   b6f10:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b6f14:	4816      	ldr	r0, [pc, #88]	; (b6f70 <_ZN9TimeClass7timeStrEx+0x74>)
   b6f16:	e9d0 1000 	ldrd	r1, r0, [r0]
   b6f1a:	1852      	adds	r2, r2, r1
   b6f1c:	eb43 0300 	adc.w	r3, r3, r0
   b6f20:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b6f24:	2224      	movs	r2, #36	; 0x24
   b6f26:	eb0d 0002 	add.w	r0, sp, r2
   b6f2a:	2100      	movs	r1, #0
   b6f2c:	f001 ff9a 	bl	b8e64 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b6f30:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b6f32:	a909      	add	r1, sp, #36	; 0x24
   b6f34:	4668      	mov	r0, sp
   b6f36:	f7ff fcf1 	bl	b691c <localtime_r>
    char ascstr[26] = {};
   b6f3a:	2216      	movs	r2, #22
   b6f3c:	4629      	mov	r1, r5
   b6f3e:	a803      	add	r0, sp, #12
   b6f40:	9502      	str	r5, [sp, #8]
   b6f42:	f001 ff8f 	bl	b8e64 <memset>
    asctime_r(&calendar_time, ascstr);
   b6f46:	a902      	add	r1, sp, #8
   b6f48:	a809      	add	r0, sp, #36	; 0x24
   b6f4a:	f001 ff13 	bl	b8d74 <asctime_r>
    int len = strlen(ascstr);
   b6f4e:	a802      	add	r0, sp, #8
   b6f50:	f7fd fdc0 	bl	b4ad4 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b6f54:	ab12      	add	r3, sp, #72	; 0x48
   b6f56:	4418      	add	r0, r3
    return String(ascstr);
   b6f58:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b6f5a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b6f5e:	4620      	mov	r0, r4
   b6f60:	f7ff fe08 	bl	b6b74 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6f64:	4620      	mov	r0, r4
   b6f66:	b013      	add	sp, #76	; 0x4c
   b6f68:	bd30      	pop	{r4, r5, pc}
   b6f6a:	bf00      	nop
   b6f6c:	2003e640 	.word	0x2003e640
   b6f70:	2003e638 	.word	0x2003e638

000b6f74 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b6f74:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6f76:	2000      	movs	r0, #0
   b6f78:	f7ff fa34 	bl	b63e4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6f7c:	4604      	mov	r4, r0
   b6f7e:	b9a0      	cbnz	r0, b6faa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6f80:	f7ff fba0 	bl	b66c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6f84:	2801      	cmp	r0, #1
   b6f86:	d110      	bne.n	b6faa <_ZN9TimeClass7isValidEv+0x36>
   b6f88:	4620      	mov	r0, r4
   b6f8a:	f7ff fbcb 	bl	b6724 <system_thread_get_state>
   b6f8e:	b960      	cbnz	r0, b6faa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6f90:	f7ff ff9c 	bl	b6ecc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6f94:	b910      	cbnz	r0, b6f9c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6f96:	f7ff fc41 	bl	b681c <spark_process>
        while (_while() && !_condition()) {
   b6f9a:	e7f9      	b.n	b6f90 <_ZN9TimeClass7isValidEv+0x1c>
   b6f9c:	f7ff ff96 	bl	b6ecc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b6fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6fa4:	2000      	movs	r0, #0
   b6fa6:	f7ff ba1d 	b.w	b63e4 <hal_rtc_time_is_valid>
}
   b6faa:	4620      	mov	r0, r4
   b6fac:	bd10      	pop	{r4, pc}

000b6fae <_ZN9TimeClass3nowEv>:
{
   b6fae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b6fb0:	f7ff ffe0 	bl	b6f74 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6fb4:	2210      	movs	r2, #16
   b6fb6:	2100      	movs	r1, #0
   b6fb8:	4668      	mov	r0, sp
   b6fba:	f001 ff53 	bl	b8e64 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b6fbe:	2100      	movs	r1, #0
   b6fc0:	4668      	mov	r0, sp
   b6fc2:	f7ff fa17 	bl	b63f4 <hal_rtc_get_time>
}
   b6fc6:	9800      	ldr	r0, [sp, #0]
   b6fc8:	b005      	add	sp, #20
   b6fca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6fd0 <_ZN9TimeClass4hourEv>:
{
   b6fd0:	b508      	push	{r3, lr}
	return hour(now());
   b6fd2:	f7ff ffec 	bl	b6fae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6fd6:	17c1      	asrs	r1, r0, #31
   b6fd8:	f7ff ff42 	bl	b6e60 <_ZL22Refresh_UnixTime_Cachex>
}
   b6fdc:	4b01      	ldr	r3, [pc, #4]	; (b6fe4 <_ZN9TimeClass4hourEv+0x14>)
   b6fde:	6898      	ldr	r0, [r3, #8]
   b6fe0:	bd08      	pop	{r3, pc}
   b6fe2:	bf00      	nop
   b6fe4:	2003e610 	.word	0x2003e610

000b6fe8 <_ZN9TimeClass6minuteEv>:
{
   b6fe8:	b508      	push	{r3, lr}
	return minute(now());
   b6fea:	f7ff ffe0 	bl	b6fae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6fee:	17c1      	asrs	r1, r0, #31
   b6ff0:	f7ff ff36 	bl	b6e60 <_ZL22Refresh_UnixTime_Cachex>
}
   b6ff4:	4b01      	ldr	r3, [pc, #4]	; (b6ffc <_ZN9TimeClass6minuteEv+0x14>)
   b6ff6:	6858      	ldr	r0, [r3, #4]
   b6ff8:	bd08      	pop	{r3, pc}
   b6ffa:	bf00      	nop
   b6ffc:	2003e610 	.word	0x2003e610

000b7000 <_ZN9TimeClass3dayEv>:
{
   b7000:	b508      	push	{r3, lr}
	return day(now());
   b7002:	f7ff ffd4 	bl	b6fae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7006:	17c1      	asrs	r1, r0, #31
   b7008:	f7ff ff2a 	bl	b6e60 <_ZL22Refresh_UnixTime_Cachex>
}
   b700c:	4b01      	ldr	r3, [pc, #4]	; (b7014 <_ZN9TimeClass3dayEv+0x14>)
   b700e:	68d8      	ldr	r0, [r3, #12]
   b7010:	bd08      	pop	{r3, pc}
   b7012:	bf00      	nop
   b7014:	2003e610 	.word	0x2003e610

000b7018 <_ZN9TimeClass5monthEv>:
{
   b7018:	b508      	push	{r3, lr}
	return month(now());
   b701a:	f7ff ffc8 	bl	b6fae <_ZN9TimeClass3nowEv>
}
   b701e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b7022:	17c1      	asrs	r1, r0, #31
   b7024:	f7ff bf60 	b.w	b6ee8 <_ZN9TimeClass5monthEx>

000b7028 <_ZN9TimeClass4yearEv>:
{
   b7028:	b508      	push	{r3, lr}
	return year(now());
   b702a:	f7ff ffc0 	bl	b6fae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b702e:	17c1      	asrs	r1, r0, #31
   b7030:	f7ff ff16 	bl	b6e60 <_ZL22Refresh_UnixTime_Cachex>
}
   b7034:	4b01      	ldr	r3, [pc, #4]	; (b703c <_ZN9TimeClass4yearEv+0x14>)
   b7036:	6958      	ldr	r0, [r3, #20]
   b7038:	bd08      	pop	{r3, pc}
   b703a:	bf00      	nop
   b703c:	2003e610 	.word	0x2003e610

000b7040 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7040:	4b02      	ldr	r3, [pc, #8]	; (b704c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7042:	681a      	ldr	r2, [r3, #0]
   b7044:	4b02      	ldr	r3, [pc, #8]	; (b7050 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7046:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7048:	4770      	bx	lr
   b704a:	bf00      	nop
   b704c:	2003e338 	.word	0x2003e338
   b7050:	2003e60c 	.word	0x2003e60c

000b7054 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7054:	2100      	movs	r1, #0
   b7056:	f7ff bb45 	b.w	b66e4 <system_delay_ms>
	...

000b705c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b705c:	b510      	push	{r4, lr}
   b705e:	4b04      	ldr	r3, [pc, #16]	; (b7070 <_ZN9TCPClientD1Ev+0x14>)
   b7060:	6003      	str	r3, [r0, #0]
   b7062:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7064:	6980      	ldr	r0, [r0, #24]
   b7066:	b108      	cbz	r0, b706c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b7068:	f7ff fe34 	bl	b6cd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b706c:	4620      	mov	r0, r4
   b706e:	bd10      	pop	{r4, pc}
   b7070:	000bb27c 	.word	0x000bb27c

000b7074 <_ZN9TCPClientD0Ev>:
   b7074:	b510      	push	{r4, lr}
   b7076:	4604      	mov	r4, r0
   b7078:	f7ff fff0 	bl	b705c <_ZN9TCPClientD1Ev>
   b707c:	4620      	mov	r0, r4
   b707e:	211c      	movs	r1, #28
   b7080:	f7fd fd8b 	bl	b4b9a <_ZdlPvj>
   b7084:	4620      	mov	r0, r4
   b7086:	bd10      	pop	{r4, pc}

000b7088 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7088:	4b01      	ldr	r3, [pc, #4]	; (b7090 <_GLOBAL__sub_I_RGB+0x8>)
   b708a:	2200      	movs	r2, #0
   b708c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b708e:	4770      	bx	lr
   b7090:	2003e650 	.word	0x2003e650

000b7094 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7094:	4b01      	ldr	r3, [pc, #4]	; (b709c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7096:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7098:	4770      	bx	lr
   b709a:	bf00      	nop
   b709c:	2003e33c 	.word	0x2003e33c

000b70a0 <serialEventRun>:
{
   b70a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b70a2:	4b0b      	ldr	r3, [pc, #44]	; (b70d0 <serialEventRun+0x30>)
   b70a4:	b143      	cbz	r3, b70b8 <serialEventRun+0x18>
   b70a6:	f000 fc1f 	bl	b78e8 <_Z16_fetch_usbserialv>
   b70aa:	6803      	ldr	r3, [r0, #0]
   b70ac:	691b      	ldr	r3, [r3, #16]
   b70ae:	4798      	blx	r3
   b70b0:	2800      	cmp	r0, #0
   b70b2:	dd01      	ble.n	b70b8 <serialEventRun+0x18>
        serialEvent();
   b70b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b70b8:	4b06      	ldr	r3, [pc, #24]	; (b70d4 <serialEventRun+0x34>)
   b70ba:	b143      	cbz	r3, b70ce <serialEventRun+0x2e>
   b70bc:	f001 f964 	bl	b8388 <_Z22__fetch_global_Serial1v>
   b70c0:	6803      	ldr	r3, [r0, #0]
   b70c2:	691b      	ldr	r3, [r3, #16]
   b70c4:	4798      	blx	r3
   b70c6:	2800      	cmp	r0, #0
   b70c8:	dd01      	ble.n	b70ce <serialEventRun+0x2e>
        serialEvent1();
   b70ca:	f3af 8000 	nop.w
}
   b70ce:	bd08      	pop	{r3, pc}
	...

000b70d8 <_post_loop>:
{
   b70d8:	b508      	push	{r3, lr}
	serialEventRun();
   b70da:	f7ff ffe1 	bl	b70a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b70de:	f7ff f979 	bl	b63d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b70e2:	4b01      	ldr	r3, [pc, #4]	; (b70e8 <_post_loop+0x10>)
   b70e4:	6018      	str	r0, [r3, #0]
}
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	2003e744 	.word	0x2003e744

000b70ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b70ec:	4805      	ldr	r0, [pc, #20]	; (b7104 <_Z33system_initialize_user_backup_ramv+0x18>)
   b70ee:	4a06      	ldr	r2, [pc, #24]	; (b7108 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b70f0:	4906      	ldr	r1, [pc, #24]	; (b710c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b70f2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b70f4:	1a12      	subs	r2, r2, r0
   b70f6:	f001 fe8d 	bl	b8e14 <memcpy>
    __backup_sram_signature = signature;
   b70fa:	4b05      	ldr	r3, [pc, #20]	; (b7110 <_Z33system_initialize_user_backup_ramv+0x24>)
   b70fc:	4a05      	ldr	r2, [pc, #20]	; (b7114 <_Z33system_initialize_user_backup_ramv+0x28>)
   b70fe:	601a      	str	r2, [r3, #0]
}
   b7100:	bd08      	pop	{r3, pc}
   b7102:	bf00      	nop
   b7104:	2003f400 	.word	0x2003f400
   b7108:	2003f404 	.word	0x2003f404
   b710c:	000bbbdc 	.word	0x000bbbdc
   b7110:	2003f400 	.word	0x2003f400
   b7114:	9a271c1e 	.word	0x9a271c1e

000b7118 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7118:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b711a:	2300      	movs	r3, #0
   b711c:	9300      	str	r3, [sp, #0]
   b711e:	461a      	mov	r2, r3
   b7120:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7124:	f7ff fb10 	bl	b6748 <system_ctrl_set_result>
}
   b7128:	b003      	add	sp, #12
   b712a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7130 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7130:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7132:	8843      	ldrh	r3, [r0, #2]
   b7134:	2b0a      	cmp	r3, #10
   b7136:	d008      	beq.n	b714a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7138:	2b50      	cmp	r3, #80	; 0x50
   b713a:	d10b      	bne.n	b7154 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b713c:	4b09      	ldr	r3, [pc, #36]	; (b7164 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b713e:	681b      	ldr	r3, [r3, #0]
   b7140:	b14b      	cbz	r3, b7156 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7142:	b003      	add	sp, #12
   b7144:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7148:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b714a:	f7ff ffe5 	bl	b7118 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b714e:	b003      	add	sp, #12
   b7150:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7154:	2300      	movs	r3, #0
   b7156:	9300      	str	r3, [sp, #0]
   b7158:	461a      	mov	r2, r3
   b715a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b715e:	f7ff faf3 	bl	b6748 <system_ctrl_set_result>
}
   b7162:	e7f4      	b.n	b714e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7164:	2003e664 	.word	0x2003e664

000b7168 <module_user_init_hook>:
{
   b7168:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b716a:	4812      	ldr	r0, [pc, #72]	; (b71b4 <module_user_init_hook+0x4c>)
   b716c:	2100      	movs	r1, #0
   b716e:	f7ff fbcd 	bl	b690c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7172:	4b11      	ldr	r3, [pc, #68]	; (b71b8 <module_user_init_hook+0x50>)
   b7174:	681a      	ldr	r2, [r3, #0]
   b7176:	4b11      	ldr	r3, [pc, #68]	; (b71bc <module_user_init_hook+0x54>)
   b7178:	429a      	cmp	r2, r3
   b717a:	4b11      	ldr	r3, [pc, #68]	; (b71c0 <module_user_init_hook+0x58>)
   b717c:	bf0c      	ite	eq
   b717e:	2201      	moveq	r2, #1
   b7180:	2200      	movne	r2, #0
   b7182:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7184:	d001      	beq.n	b718a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7186:	f7ff ffb1 	bl	b70ec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b718a:	f7ff f91b 	bl	b63c4 <HAL_RNG_GetRandomNumber>
   b718e:	4604      	mov	r4, r0
    srand(seed);
   b7190:	f001 fe70 	bl	b8e74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7194:	4b0b      	ldr	r3, [pc, #44]	; (b71c4 <module_user_init_hook+0x5c>)
   b7196:	b113      	cbz	r3, b719e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7198:	4620      	mov	r0, r4
   b719a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b719e:	2100      	movs	r1, #0
   b71a0:	4808      	ldr	r0, [pc, #32]	; (b71c4 <module_user_init_hook+0x5c>)
   b71a2:	f7ff fb63 	bl	b686c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b71a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b71aa:	4807      	ldr	r0, [pc, #28]	; (b71c8 <module_user_init_hook+0x60>)
   b71ac:	2100      	movs	r1, #0
   b71ae:	f7ff bac1 	b.w	b6734 <system_ctrl_set_app_request_handler>
   b71b2:	bf00      	nop
   b71b4:	000b7095 	.word	0x000b7095
   b71b8:	2003f400 	.word	0x2003f400
   b71bc:	9a271c1e 	.word	0x9a271c1e
   b71c0:	2003e660 	.word	0x2003e660
   b71c4:	00000000 	.word	0x00000000
   b71c8:	000b7131 	.word	0x000b7131

000b71cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b71cc:	4770      	bx	lr

000b71ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b71ce:	2000      	movs	r0, #0
   b71d0:	4770      	bx	lr

000b71d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b71d2:	b510      	push	{r4, lr}
   b71d4:	2110      	movs	r1, #16
   b71d6:	4604      	mov	r4, r0
   b71d8:	f7fd fcdf 	bl	b4b9a <_ZdlPvj>
   b71dc:	4620      	mov	r0, r4
   b71de:	bd10      	pop	{r4, pc}

000b71e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b71e0:	b508      	push	{r3, lr}
      { delete this; }
   b71e2:	f7ff fff6 	bl	b71d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b71e6:	bd08      	pop	{r3, pc}

000b71e8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b71e8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b71ea:	2200      	movs	r2, #0
   b71ec:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b71f0:	6002      	str	r2, [r0, #0]
   b71f2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b71f4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b71f6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b71f8:	680c      	ldr	r4, [r1, #0]
   b71fa:	8085      	strh	r5, [r0, #4]
   b71fc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b71fe:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7200:	bd30      	pop	{r4, r5, pc}

000b7202 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7202:	b510      	push	{r4, lr}
   b7204:	4604      	mov	r4, r0
    free((void*)msg_);
   b7206:	6800      	ldr	r0, [r0, #0]
   b7208:	f7ff fb40 	bl	b688c <free>
}
   b720c:	4620      	mov	r0, r4
   b720e:	bd10      	pop	{r4, pc}

000b7210 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7210:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7212:	68c4      	ldr	r4, [r0, #12]
   b7214:	b1f4      	cbz	r4, b7254 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7216:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7218:	2b02      	cmp	r3, #2
   b721a:	d103      	bne.n	b7224 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b721c:	f104 000c 	add.w	r0, r4, #12
   b7220:	f7ff ffef 	bl	b7202 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7224:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7226:	b135      	cbz	r5, b7236 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7228:	4628      	mov	r0, r5
   b722a:	f7fd feb4 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
   b722e:	2110      	movs	r1, #16
   b7230:	4628      	mov	r0, r5
   b7232:	f7fd fcb2 	bl	b4b9a <_ZdlPvj>
   b7236:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7238:	b135      	cbz	r5, b7248 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b723a:	4628      	mov	r0, r5
   b723c:	f7fd feab 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
   b7240:	2110      	movs	r1, #16
   b7242:	4628      	mov	r0, r5
   b7244:	f7fd fca9 	bl	b4b9a <_ZdlPvj>
   b7248:	4620      	mov	r0, r4
   b724a:	2114      	movs	r1, #20
   b724c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7250:	f7fd bca3 	b.w	b4b9a <_ZdlPvj>
   b7254:	bd38      	pop	{r3, r4, r5, pc}

000b7256 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   b7256:	b507      	push	{r0, r1, r2, lr}
   b7258:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   b725c:	6882      	ldr	r2, [r0, #8]
   b725e:	b90a      	cbnz	r2, b7264 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   b7260:	f001 f9d2 	bl	b8608 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7264:	68c3      	ldr	r3, [r0, #12]
   b7266:	aa01      	add	r2, sp, #4
   b7268:	4669      	mov	r1, sp
   b726a:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   b726c:	b003      	add	sp, #12
   b726e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7272 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7272:	680b      	ldr	r3, [r1, #0]
   b7274:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7276:	684b      	ldr	r3, [r1, #4]
   b7278:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b727a:	b113      	cbz	r3, b7282 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b727c:	685a      	ldr	r2, [r3, #4]
   b727e:	3201      	adds	r2, #1
   b7280:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7282:	4770      	bx	lr

000b7284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7284:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7286:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7288:	4668      	mov	r0, sp
   b728a:	460d      	mov	r5, r1
   b728c:	f7ff fff1 	bl	b7272 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7290:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7292:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7294:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7296:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7298:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b729a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b729c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b729e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b72a0:	f7fd fd1c 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b72a4:	b135      	cbz	r5, b72b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b72a6:	1d28      	adds	r0, r5, #4
   b72a8:	f7fd fd18 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b72ac:	2108      	movs	r1, #8
   b72ae:	4628      	mov	r0, r5
   b72b0:	f7fd fc73 	bl	b4b9a <_ZdlPvj>
        return p;
    }
   b72b4:	4620      	mov	r0, r4
   b72b6:	b003      	add	sp, #12
   b72b8:	bd30      	pop	{r4, r5, pc}

000b72ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b72ba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b72bc:	b510      	push	{r4, lr}
      if (_M_empty())
   b72be:	b90a      	cbnz	r2, b72c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b72c0:	f001 f9a2 	bl	b8608 <_ZSt25__throw_bad_function_callv>
    }
   b72c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b72c8:	68c3      	ldr	r3, [r0, #12]
   b72ca:	4718      	bx	r3

000b72cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b72cc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b72ce:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b72d0:	f100 0110 	add.w	r1, r0, #16
   b72d4:	f7ff fff1 	bl	b72ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b72d8:	bd08      	pop	{r3, pc}

000b72da <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b72da:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b72dc:	b510      	push	{r4, lr}
      if (_M_empty())
   b72de:	b90a      	cbnz	r2, b72e4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b72e0:	f001 f992 	bl	b8608 <_ZSt25__throw_bad_function_callv>
    }
   b72e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b72e8:	68c3      	ldr	r3, [r0, #12]
   b72ea:	4718      	bx	r3

000b72ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b72ec:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b72ee:	6800      	ldr	r0, [r0, #0]
   b72f0:	f100 0110 	add.w	r1, r0, #16
   b72f4:	f7ff fff1 	bl	b72da <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b72f8:	bd08      	pop	{r3, pc}
	...

000b72fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b72fc:	b538      	push	{r3, r4, r5, lr}
   b72fe:	2300      	movs	r3, #0
   b7300:	4604      	mov	r4, r0
   b7302:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7304:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7306:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7308:	f7fd fc3f 	bl	b4b8a <_Znwj>
   b730c:	b128      	cbz	r0, b731a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b730e:	2301      	movs	r3, #1
   b7310:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7314:	4b02      	ldr	r3, [pc, #8]	; (b7320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7316:	6003      	str	r3, [r0, #0]
   b7318:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b731a:	6020      	str	r0, [r4, #0]
	}
   b731c:	4620      	mov	r0, r4
   b731e:	bd38      	pop	{r3, r4, r5, pc}
   b7320:	000bb190 	.word	0x000bb190

000b7324 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7324:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7326:	2300      	movs	r3, #0
   b7328:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b732a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b732c:	4604      	mov	r4, r0
   b732e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7330:	b12b      	cbz	r3, b733e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7332:	2202      	movs	r2, #2
   b7334:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7336:	68eb      	ldr	r3, [r5, #12]
   b7338:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b733a:	68ab      	ldr	r3, [r5, #8]
   b733c:	60a3      	str	r3, [r4, #8]
    }
   b733e:	4620      	mov	r0, r4
   b7340:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7344:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7346:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7348:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b734a:	4668      	mov	r0, sp
   b734c:	f7ff ff4c 	bl	b71e8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7350:	f04f 0302 	mov.w	r3, #2
   b7354:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7358:	2a00      	cmp	r2, #0
   b735a:	d103      	bne.n	b7364 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b735c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7360:	2900      	cmp	r1, #0
   b7362:	d1f7      	bne.n	b7354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7364:	d125      	bne.n	b73b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7366:	f104 050c 	add.w	r5, r4, #12
   b736a:	4669      	mov	r1, sp
   b736c:	4628      	mov	r0, r5
   b736e:	f7ff ff3b 	bl	b71e8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7372:	f3bf 8f5b 	dmb	ish
   b7376:	2301      	movs	r3, #1
   b7378:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b737a:	2000      	movs	r0, #0
   b737c:	f104 0308 	add.w	r3, r4, #8
   b7380:	f3bf 8f5b 	dmb	ish
   b7384:	e853 6f00 	ldrex	r6, [r3]
   b7388:	e843 0200 	strex	r2, r0, [r3]
   b738c:	2a00      	cmp	r2, #0
   b738e:	d1f9      	bne.n	b7384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7390:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7394:	b16e      	cbz	r6, b73b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7396:	f7ff f9b5 	bl	b6704 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b739a:	b178      	cbz	r0, b73bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b739c:	4629      	mov	r1, r5
   b739e:	4630      	mov	r0, r6
   b73a0:	f7ff ff8b 	bl	b72ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b73a4:	4630      	mov	r0, r6
   b73a6:	f7fd fdf6 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b73aa:	2110      	movs	r1, #16
   b73ac:	4630      	mov	r0, r6
   b73ae:	f7fd fbf4 	bl	b4b9a <_ZdlPvj>
        p_->setError(std::move(error));
   b73b2:	4668      	mov	r0, sp
   b73b4:	f7ff ff25 	bl	b7202 <_ZN8particle5ErrorD1Ev>
    }
   b73b8:	b009      	add	sp, #36	; 0x24
   b73ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b73bc:	4631      	mov	r1, r6
   b73be:	a802      	add	r0, sp, #8
   b73c0:	f7ff ffb0 	bl	b7324 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b73c4:	68e0      	ldr	r0, [r4, #12]
   b73c6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b73ca:	b108      	cbz	r0, b73d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b73cc:	f001 fd88 	bl	b8ee0 <strdup>
        type_(type) {
   b73d0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b73d2:	2010      	movs	r0, #16
   b73d4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b73d8:	f7fd fbd7 	bl	b4b8a <_Znwj>
   b73dc:	4605      	mov	r5, r0
   b73de:	b1e8      	cbz	r0, b741c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b73e0:	2700      	movs	r7, #0
   b73e2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b73e4:	2018      	movs	r0, #24
   b73e6:	f7fd fbd0 	bl	b4b8a <_Znwj>
   b73ea:	4604      	mov	r4, r0
   b73ec:	b188      	cbz	r0, b7412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b73ee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b73f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b73f2:	a802      	add	r0, sp, #8
   b73f4:	f7ff fc82 	bl	b6cfc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b73fa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b73fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7400:	9204      	str	r2, [sp, #16]
   b7402:	a906      	add	r1, sp, #24
   b7404:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7406:	60e3      	str	r3, [r4, #12]
   b7408:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b740c:	9205      	str	r2, [sp, #20]
   b740e:	f7ff feeb 	bl	b71e8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7412:	4b08      	ldr	r3, [pc, #32]	; (b7434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7414:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7416:	4b08      	ldr	r3, [pc, #32]	; (b7438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7418:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b741a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b741c:	a806      	add	r0, sp, #24
   b741e:	f7ff fef0 	bl	b7202 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7422:	a802      	add	r0, sp, #8
   b7424:	f7fd fdb7 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7428:	2200      	movs	r2, #0
   b742a:	4629      	mov	r1, r5
   b742c:	4803      	ldr	r0, [pc, #12]	; (b743c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b742e:	f7ff f971 	bl	b6714 <application_thread_invoke>
   b7432:	e7b7      	b.n	b73a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b7434:	000b72cd 	.word	0x000b72cd
   b7438:	000b7551 	.word	0x000b7551
   b743c:	000b7a99 	.word	0x000b7a99

000b7440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7444:	b08b      	sub	sp, #44	; 0x2c
   b7446:	4605      	mov	r5, r0
   b7448:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b744c:	460f      	mov	r7, r1
   b744e:	4690      	mov	r8, r2
   b7450:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7452:	f7ff f9eb 	bl	b682c <spark_cloud_flag_connected>
   b7456:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7458:	4683      	mov	fp, r0
   b745a:	bb38      	cbnz	r0, b74ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b745c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7460:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7462:	a905      	add	r1, sp, #20
   b7464:	4630      	mov	r0, r6
   b7466:	f8ad 3018 	strh.w	r3, [sp, #24]
   b746a:	f7ff febd 	bl	b71e8 <_ZN8particle5ErrorC1EOS0_>
   b746e:	2014      	movs	r0, #20
   b7470:	f7fd fb8b 	bl	b4b8a <_Znwj>
   b7474:	4604      	mov	r4, r0
   b7476:	b148      	cbz	r0, b748c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7478:	2302      	movs	r3, #2
   b747a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b747c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b747e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7482:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b7484:	4631      	mov	r1, r6
   b7486:	300c      	adds	r0, #12
   b7488:	f7ff feae 	bl	b71e8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b748c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b748e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7490:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7494:	f7ff ff32 	bl	b72fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7498:	4630      	mov	r0, r6
   b749a:	f7ff feb2 	bl	b7202 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b749e:	a805      	add	r0, sp, #20
   b74a0:	f7ff feaf 	bl	b7202 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b74a4:	4628      	mov	r0, r5
   b74a6:	b00b      	add	sp, #44	; 0x2c
   b74a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b74ac:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b74ae:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b74b0:	2014      	movs	r0, #20
   b74b2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b74b6:	9307      	str	r3, [sp, #28]
   b74b8:	f7fd fb67 	bl	b4b8a <_Znwj>
   b74bc:	4601      	mov	r1, r0
   b74be:	b118      	cbz	r0, b74c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b74c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b74c4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b74c6:	7044      	strb	r4, [r0, #1]
   b74c8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b74ca:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b74cc:	f7ff ff16 	bl	b72fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b74d0:	4b1e      	ldr	r3, [pc, #120]	; (b754c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b74d2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b74d4:	2008      	movs	r0, #8
   b74d6:	f7fd fb58 	bl	b4b8a <_Znwj>
   b74da:	4604      	mov	r4, r0
   b74dc:	b110      	cbz	r0, b74e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b74de:	a903      	add	r1, sp, #12
   b74e0:	f7ff fec7 	bl	b7272 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b74e4:	9600      	str	r6, [sp, #0]
   b74e6:	fa5f f38a 	uxtb.w	r3, sl
   b74ea:	464a      	mov	r2, r9
   b74ec:	4641      	mov	r1, r8
   b74ee:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b74f0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b74f2:	f7ff f9a3 	bl	b683c <spark_send_event>
   b74f6:	b9b8      	cbnz	r0, b7528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b74f8:	9b03      	ldr	r3, [sp, #12]
   b74fa:	785b      	ldrb	r3, [r3, #1]
   b74fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7500:	b993      	cbnz	r3, b7528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b7502:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b7506:	a905      	add	r1, sp, #20
   b7508:	a803      	add	r0, sp, #12
   b750a:	9205      	str	r2, [sp, #20]
   b750c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7510:	f7ff ff18 	bl	b7344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7514:	a805      	add	r0, sp, #20
   b7516:	f7ff fe74 	bl	b7202 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b751a:	a805      	add	r0, sp, #20
   b751c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b751e:	f7ff feb1 	bl	b7284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b7522:	a806      	add	r0, sp, #24
   b7524:	f7fd fbda 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7528:	a903      	add	r1, sp, #12
   b752a:	a805      	add	r0, sp, #20
   b752c:	f7ff fea1 	bl	b7272 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7530:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7532:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7534:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b7536:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b7538:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b753a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b753c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b753e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b7540:	f7fd fbcc 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7544:	a804      	add	r0, sp, #16
   b7546:	f7fd fbc9 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b754a:	e7ab      	b.n	b74a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b754c:	000b75cd 	.word	0x000b75cd

000b7550 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b7550:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7554:	4605      	mov	r5, r0
	switch (__op)
   b7556:	d103      	bne.n	b7560 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7558:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b755a:	6003      	str	r3, [r0, #0]
      }
   b755c:	2000      	movs	r0, #0
   b755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b7560:	2a02      	cmp	r2, #2
   b7562:	d010      	beq.n	b7586 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b7564:	2a03      	cmp	r2, #3
   b7566:	d1f9      	bne.n	b755c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7568:	6804      	ldr	r4, [r0, #0]
   b756a:	2c00      	cmp	r4, #0
   b756c:	d0f6      	beq.n	b755c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b756e:	f104 0010 	add.w	r0, r4, #16
   b7572:	f7ff fe46 	bl	b7202 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7576:	4620      	mov	r0, r4
   b7578:	f7fd fd0d 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b757c:	2118      	movs	r1, #24
   b757e:	4620      	mov	r0, r4
   b7580:	f7fd fb0b 	bl	b4b9a <_ZdlPvj>
   b7584:	e7ea      	b.n	b755c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7586:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b7588:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b758a:	f7fd fafe 	bl	b4b8a <_Znwj>
   b758e:	4604      	mov	r4, r0
   b7590:	b150      	cbz	r0, b75a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b7592:	4631      	mov	r1, r6
   b7594:	f7ff fec6 	bl	b7324 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7598:	6930      	ldr	r0, [r6, #16]
   b759a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b759e:	b108      	cbz	r0, b75a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b75a0:	f001 fc9e 	bl	b8ee0 <strdup>
        type_(type) {
   b75a4:	6120      	str	r0, [r4, #16]
   b75a6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b75a8:	602c      	str	r4, [r5, #0]
	}
   b75aa:	e7d7      	b.n	b755c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b75ac <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b75ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b75ae:	2300      	movs	r3, #0
   b75b0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b75b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b75b4:	4604      	mov	r4, r0
   b75b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b75b8:	b12b      	cbz	r3, b75c6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b75ba:	2202      	movs	r2, #2
   b75bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b75be:	68eb      	ldr	r3, [r5, #12]
   b75c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b75c2:	68ab      	ldr	r3, [r5, #8]
   b75c4:	60a3      	str	r3, [r4, #8]
    }
   b75c6:	4620      	mov	r0, r4
   b75c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b75cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b75cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b75ce:	b089      	sub	sp, #36	; 0x24
   b75d0:	4604      	mov	r4, r0
   b75d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b75d4:	a801      	add	r0, sp, #4
   b75d6:	4611      	mov	r1, r2
   b75d8:	f7ff fe54 	bl	b7284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b75dc:	b1a4      	cbz	r4, b7608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b75de:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b75e0:	b11d      	cbz	r5, b75ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b75e2:	4628      	mov	r0, r5
   b75e4:	f001 fc7c 	bl	b8ee0 <strdup>
   b75e8:	4605      	mov	r5, r0
   b75ea:	a801      	add	r0, sp, #4
   b75ec:	a903      	add	r1, sp, #12
        type_(type) {
   b75ee:	9503      	str	r5, [sp, #12]
   b75f0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b75f4:	f7ff fea6 	bl	b7344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b75f8:	a803      	add	r0, sp, #12
   b75fa:	f7ff fe02 	bl	b7202 <_ZN8particle5ErrorD1Ev>
   b75fe:	a802      	add	r0, sp, #8
   b7600:	f7fd fb6c 	bl	b4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7604:	b009      	add	sp, #36	; 0x24
   b7606:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b7608:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b760a:	2301      	movs	r3, #1
   b760c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b7610:	2a00      	cmp	r2, #0
   b7612:	d103      	bne.n	b761c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b7614:	e8c5 3f41 	strexb	r1, r3, [r5]
   b7618:	2900      	cmp	r1, #0
   b761a:	d1f7      	bne.n	b760c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b761c:	d1ef      	bne.n	b75fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b761e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b7620:	f3bf 8f5b 	dmb	ish
   b7624:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7626:	1d2b      	adds	r3, r5, #4
   b7628:	f3bf 8f5b 	dmb	ish
   b762c:	e853 6f00 	ldrex	r6, [r3]
   b7630:	e843 4200 	strex	r2, r4, [r3]
   b7634:	2a00      	cmp	r2, #0
   b7636:	d1f9      	bne.n	b762c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b7638:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b763c:	2e00      	cmp	r6, #0
   b763e:	d0de      	beq.n	b75fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b7640:	4620      	mov	r0, r4
   b7642:	f7ff f85f 	bl	b6704 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7646:	4607      	mov	r7, r0
   b7648:	b160      	cbz	r0, b7664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b764a:	f105 010c 	add.w	r1, r5, #12
   b764e:	4630      	mov	r0, r6
   b7650:	f7ff fe43 	bl	b72da <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b7654:	4630      	mov	r0, r6
   b7656:	f7fd fc9e 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b765a:	2110      	movs	r1, #16
   b765c:	4630      	mov	r0, r6
   b765e:	f7fd fa9c 	bl	b4b9a <_ZdlPvj>
   b7662:	e7cc      	b.n	b75fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7664:	4631      	mov	r1, r6
   b7666:	a803      	add	r0, sp, #12
   b7668:	f7ff ffa0 	bl	b75ac <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b766c:	7b2b      	ldrb	r3, [r5, #12]
   b766e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7672:	2010      	movs	r0, #16
   b7674:	f7fd fa89 	bl	b4b8a <_Znwj>
   b7678:	4605      	mov	r5, r0
   b767a:	b1d0      	cbz	r0, b76b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b767c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b767e:	2014      	movs	r0, #20
   b7680:	f7fd fa83 	bl	b4b8a <_Znwj>
   b7684:	4604      	mov	r4, r0
   b7686:	b178      	cbz	r0, b76a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b7688:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b768a:	4601      	mov	r1, r0
   b768c:	a803      	add	r0, sp, #12
   b768e:	f7ff fb35 	bl	b6cfc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7692:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7694:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7696:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7698:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b769a:	9205      	str	r2, [sp, #20]
   b769c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b769e:	60e3      	str	r3, [r4, #12]
   b76a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b76a4:	9206      	str	r2, [sp, #24]
   b76a6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b76a8:	4b06      	ldr	r3, [pc, #24]	; (b76c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b76aa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b76ac:	4b06      	ldr	r3, [pc, #24]	; (b76c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b76ae:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b76b0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b76b2:	a803      	add	r0, sp, #12
   b76b4:	f7fd fc6f 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b76b8:	2200      	movs	r2, #0
   b76ba:	4629      	mov	r1, r5
   b76bc:	4803      	ldr	r0, [pc, #12]	; (b76cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b76be:	f7ff f829 	bl	b6714 <application_thread_invoke>
   b76c2:	e7c7      	b.n	b7654 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b76c4:	000b72ed 	.word	0x000b72ed
   b76c8:	000b76d1 	.word	0x000b76d1
   b76cc:	000b7a99 	.word	0x000b7a99

000b76d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b76d0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b76d2:	b570      	push	{r4, r5, r6, lr}
   b76d4:	4604      	mov	r4, r0
	switch (__op)
   b76d6:	d103      	bne.n	b76e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b76d8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b76da:	6003      	str	r3, [r0, #0]
      }
   b76dc:	2000      	movs	r0, #0
   b76de:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b76e0:	2a02      	cmp	r2, #2
   b76e2:	d00c      	beq.n	b76fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b76e4:	2a03      	cmp	r2, #3
   b76e6:	d1f9      	bne.n	b76dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b76e8:	6804      	ldr	r4, [r0, #0]
   b76ea:	2c00      	cmp	r4, #0
   b76ec:	d0f6      	beq.n	b76dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b76ee:	4620      	mov	r0, r4
   b76f0:	f7fd fc51 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b76f4:	2114      	movs	r1, #20
   b76f6:	4620      	mov	r0, r4
   b76f8:	f7fd fa4f 	bl	b4b9a <_ZdlPvj>
   b76fc:	e7ee      	b.n	b76dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b76fe:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7700:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7702:	f7fd fa42 	bl	b4b8a <_Znwj>
   b7706:	4605      	mov	r5, r0
   b7708:	b120      	cbz	r0, b7714 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b770a:	4631      	mov	r1, r6
   b770c:	f7ff ff4e 	bl	b75ac <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7710:	7c33      	ldrb	r3, [r6, #16]
   b7712:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7714:	6025      	str	r5, [r4, #0]
	}
   b7716:	e7e1      	b.n	b76dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7718 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7718:	4770      	bx	lr

000b771a <_ZN9IPAddressD0Ev>:
   b771a:	b510      	push	{r4, lr}
   b771c:	2118      	movs	r1, #24
   b771e:	4604      	mov	r4, r0
   b7720:	f7fd fa3b 	bl	b4b9a <_ZdlPvj>
   b7724:	4620      	mov	r0, r4
   b7726:	bd10      	pop	{r4, pc}

000b7728 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7728:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b772a:	7d03      	ldrb	r3, [r0, #20]
   b772c:	2b06      	cmp	r3, #6
{
   b772e:	b08d      	sub	sp, #52	; 0x34
   b7730:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7732:	f100 0704 	add.w	r7, r0, #4
   b7736:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b773a:	d012      	beq.n	b7762 <_ZNK9IPAddress7printToER5Print+0x3a>
   b773c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7740:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7744:	220a      	movs	r2, #10
   b7746:	4630      	mov	r0, r6
   b7748:	f7ff fb33 	bl	b6db2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b774c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b774e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7750:	d019      	beq.n	b7786 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7752:	2c00      	cmp	r4, #0
   b7754:	d0f4      	beq.n	b7740 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7756:	212e      	movs	r1, #46	; 0x2e
   b7758:	4630      	mov	r0, r6
   b775a:	f7ff fb11 	bl	b6d80 <_ZN5Print5printEc>
   b775e:	4404      	add	r4, r0
   b7760:	e7ee      	b.n	b7740 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7762:	232f      	movs	r3, #47	; 0x2f
   b7764:	466a      	mov	r2, sp
   b7766:	4639      	mov	r1, r7
   b7768:	200a      	movs	r0, #10
		buf[0] = 0;
   b776a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b776e:	f7fe fea1 	bl	b64b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7772:	4668      	mov	r0, sp
   b7774:	f7fd f9ae 	bl	b4ad4 <strlen>
   b7778:	6833      	ldr	r3, [r6, #0]
   b777a:	4602      	mov	r2, r0
   b777c:	68db      	ldr	r3, [r3, #12]
   b777e:	4669      	mov	r1, sp
   b7780:	4630      	mov	r0, r6
   b7782:	4798      	blx	r3
   b7784:	4604      	mov	r4, r0
    }
    return n;
}
   b7786:	4620      	mov	r0, r4
   b7788:	b00d      	add	sp, #52	; 0x34
   b778a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b778c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b778c:	b510      	push	{r4, lr}
   b778e:	4b05      	ldr	r3, [pc, #20]	; (b77a4 <_ZN9IPAddressC1Ev+0x18>)
   b7790:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7792:	2211      	movs	r2, #17
   b7794:	f840 3b04 	str.w	r3, [r0], #4
   b7798:	2100      	movs	r1, #0
   b779a:	f001 fb63 	bl	b8e64 <memset>
}
   b779e:	4620      	mov	r0, r4
   b77a0:	bd10      	pop	{r4, pc}
   b77a2:	bf00      	nop
   b77a4:	000bb1ac 	.word	0x000bb1ac

000b77a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b77a8:	4603      	mov	r3, r0
   b77aa:	4a07      	ldr	r2, [pc, #28]	; (b77c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b77ac:	b510      	push	{r4, lr}
   b77ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b77b2:	f101 0210 	add.w	r2, r1, #16
   b77b6:	f851 4b04 	ldr.w	r4, [r1], #4
   b77ba:	f843 4b04 	str.w	r4, [r3], #4
   b77be:	4291      	cmp	r1, r2
   b77c0:	d1f9      	bne.n	b77b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b77c2:	780a      	ldrb	r2, [r1, #0]
   b77c4:	701a      	strb	r2, [r3, #0]
}
   b77c6:	bd10      	pop	{r4, pc}
   b77c8:	000bb1ac 	.word	0x000bb1ac

000b77cc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b77cc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b77ce:	2b04      	cmp	r3, #4
   b77d0:	d104      	bne.n	b77dc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b77d2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b77d4:	3800      	subs	r0, #0
   b77d6:	bf18      	it	ne
   b77d8:	2001      	movne	r0, #1
   b77da:	4770      	bx	lr
    } else if (version() == 6) {
   b77dc:	2b06      	cmp	r3, #6
   b77de:	d107      	bne.n	b77f0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b77e0:	6843      	ldr	r3, [r0, #4]
   b77e2:	b93b      	cbnz	r3, b77f4 <_ZNK9IPAddresscvbEv+0x28>
   b77e4:	6883      	ldr	r3, [r0, #8]
   b77e6:	b92b      	cbnz	r3, b77f4 <_ZNK9IPAddresscvbEv+0x28>
   b77e8:	68c3      	ldr	r3, [r0, #12]
   b77ea:	b91b      	cbnz	r3, b77f4 <_ZNK9IPAddresscvbEv+0x28>
   b77ec:	6900      	ldr	r0, [r0, #16]
   b77ee:	e7f1      	b.n	b77d4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b77f0:	2000      	movs	r0, #0
   b77f2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b77f4:	2001      	movs	r0, #1
}
   b77f6:	4770      	bx	lr

000b77f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b77f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b77fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b77fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7802:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7806:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b780a:	2304      	movs	r3, #4
   b780c:	6041      	str	r1, [r0, #4]
   b780e:	7503      	strb	r3, [r0, #20]
}
   b7810:	bd10      	pop	{r4, pc}
	...

000b7814 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7814:	b507      	push	{r0, r1, r2, lr}
   b7816:	4b06      	ldr	r3, [pc, #24]	; (b7830 <_ZN9IPAddressC1EPKh+0x1c>)
   b7818:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b781a:	78cb      	ldrb	r3, [r1, #3]
   b781c:	9300      	str	r3, [sp, #0]
   b781e:	788b      	ldrb	r3, [r1, #2]
   b7820:	784a      	ldrb	r2, [r1, #1]
   b7822:	7809      	ldrb	r1, [r1, #0]
   b7824:	f7ff ffe8 	bl	b77f8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7828:	b003      	add	sp, #12
   b782a:	f85d fb04 	ldr.w	pc, [sp], #4
   b782e:	bf00      	nop
   b7830:	000bb1ac 	.word	0x000bb1ac

000b7834 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7834:	7441      	strb	r1, [r0, #17]
}
   b7836:	4770      	bx	lr

000b7838 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7838:	4770      	bx	lr

000b783a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b783a:	4770      	bx	lr

000b783c <_ZN9USBSerial4readEv>:
{
   b783c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b783e:	2100      	movs	r1, #0
   b7840:	7c00      	ldrb	r0, [r0, #16]
   b7842:	f7fe ff1f 	bl	b6684 <HAL_USB_USART_Receive_Data>
}
   b7846:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b784a:	bd08      	pop	{r3, pc}

000b784c <_ZN9USBSerial4peekEv>:
{
   b784c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b784e:	2101      	movs	r1, #1
   b7850:	7c00      	ldrb	r0, [r0, #16]
   b7852:	f7fe ff17 	bl	b6684 <HAL_USB_USART_Receive_Data>
}
   b7856:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b785a:	bd08      	pop	{r3, pc}

000b785c <_ZN9USBSerial17availableForWriteEv>:
{
   b785c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b785e:	7c00      	ldrb	r0, [r0, #16]
   b7860:	f7fe ff08 	bl	b6674 <HAL_USB_USART_Available_Data_For_Write>
}
   b7864:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7868:	bd08      	pop	{r3, pc}

000b786a <_ZN9USBSerial9availableEv>:
{
   b786a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b786c:	7c00      	ldrb	r0, [r0, #16]
   b786e:	f7fe fef9 	bl	b6664 <HAL_USB_USART_Available_Data>
}
   b7872:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7876:	bd08      	pop	{r3, pc}

000b7878 <_ZN9USBSerial5writeEh>:
{
   b7878:	b513      	push	{r0, r1, r4, lr}
   b787a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b787c:	7c00      	ldrb	r0, [r0, #16]
{
   b787e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7880:	f7fe fef8 	bl	b6674 <HAL_USB_USART_Available_Data_For_Write>
   b7884:	2800      	cmp	r0, #0
   b7886:	9901      	ldr	r1, [sp, #4]
   b7888:	dc01      	bgt.n	b788e <_ZN9USBSerial5writeEh+0x16>
   b788a:	7c60      	ldrb	r0, [r4, #17]
   b788c:	b120      	cbz	r0, b7898 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b788e:	7c20      	ldrb	r0, [r4, #16]
   b7890:	f7fe ff00 	bl	b6694 <HAL_USB_USART_Send_Data>
   b7894:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7898:	b002      	add	sp, #8
   b789a:	bd10      	pop	{r4, pc}

000b789c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b789c:	7c00      	ldrb	r0, [r0, #16]
   b789e:	f7fe bf01 	b.w	b66a4 <HAL_USB_USART_Flush_Data>

000b78a2 <_ZN9USBSerialD0Ev>:
   b78a2:	b510      	push	{r4, lr}
   b78a4:	2114      	movs	r1, #20
   b78a6:	4604      	mov	r4, r0
   b78a8:	f7fd f977 	bl	b4b9a <_ZdlPvj>
   b78ac:	4620      	mov	r0, r4
   b78ae:	bd10      	pop	{r4, pc}

000b78b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b78b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b78b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b78b6:	4604      	mov	r4, r0
   b78b8:	4608      	mov	r0, r1
   b78ba:	2100      	movs	r1, #0
   b78bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b78c0:	4b04      	ldr	r3, [pc, #16]	; (b78d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b78c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b78c4:	2301      	movs	r3, #1
  _serial = serial;
   b78c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b78c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b78ca:	4611      	mov	r1, r2
   b78cc:	f7fe fec2 	bl	b6654 <HAL_USB_USART_Init>
}
   b78d0:	4620      	mov	r0, r4
   b78d2:	bd10      	pop	{r4, pc}
   b78d4:	000bb1c0 	.word	0x000bb1c0

000b78d8 <_Z19acquireSerialBufferv>:
{
   b78d8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b78da:	2214      	movs	r2, #20
{
   b78dc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b78de:	2100      	movs	r1, #0
   b78e0:	f001 fac0 	bl	b8e64 <memset>
}
   b78e4:	4620      	mov	r0, r4
   b78e6:	bd10      	pop	{r4, pc}

000b78e8 <_Z16_fetch_usbserialv>:
{
   b78e8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b78ea:	4c0f      	ldr	r4, [pc, #60]	; (b7928 <_Z16_fetch_usbserialv+0x40>)
{
   b78ec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b78ee:	a803      	add	r0, sp, #12
   b78f0:	f7ff fff2 	bl	b78d8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b78f4:	7821      	ldrb	r1, [r4, #0]
   b78f6:	f3bf 8f5b 	dmb	ish
   b78fa:	f011 0101 	ands.w	r1, r1, #1
   b78fe:	d10f      	bne.n	b7920 <_Z16_fetch_usbserialv+0x38>
   b7900:	4620      	mov	r0, r4
   b7902:	9101      	str	r1, [sp, #4]
   b7904:	f7fd f94b 	bl	b4b9e <__cxa_guard_acquire>
   b7908:	9901      	ldr	r1, [sp, #4]
   b790a:	b148      	cbz	r0, b7920 <_Z16_fetch_usbserialv+0x38>
   b790c:	aa03      	add	r2, sp, #12
   b790e:	4807      	ldr	r0, [pc, #28]	; (b792c <_Z16_fetch_usbserialv+0x44>)
   b7910:	f7ff ffce 	bl	b78b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7914:	4620      	mov	r0, r4
   b7916:	f7fd f947 	bl	b4ba8 <__cxa_guard_release>
   b791a:	4805      	ldr	r0, [pc, #20]	; (b7930 <_Z16_fetch_usbserialv+0x48>)
   b791c:	f001 fa50 	bl	b8dc0 <atexit>
	return _usbserial;
}
   b7920:	4802      	ldr	r0, [pc, #8]	; (b792c <_Z16_fetch_usbserialv+0x44>)
   b7922:	b008      	add	sp, #32
   b7924:	bd10      	pop	{r4, pc}
   b7926:	bf00      	nop
   b7928:	2003e668 	.word	0x2003e668
   b792c:	2003e66c 	.word	0x2003e66c
   b7930:	000b7839 	.word	0x000b7839

000b7934 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
   b7934:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b7936:	b510      	push	{r4, lr}
   b7938:	b90a      	cbnz	r2, b793e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b793a:	f000 fe65 	bl	b8608 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b793e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7942:	68c3      	ldr	r3, [r0, #12]
   b7944:	4718      	bx	r3
	...

000b7948 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b7948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b794a:	4f10      	ldr	r7, [pc, #64]	; (b798c <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b794c:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b7950:	4606      	mov	r6, r0
   b7952:	460d      	mov	r5, r1
    delete handlers[pin];
   b7954:	b134      	cbz	r4, b7964 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b7956:	4620      	mov	r0, r4
   b7958:	f7fd fb1d 	bl	b4f96 <_ZNSt14_Function_baseD1Ev>
   b795c:	2110      	movs	r1, #16
   b795e:	4620      	mov	r0, r4
   b7960:	f7fd f91b 	bl	b4b9a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b7964:	2010      	movs	r0, #16
   b7966:	f7fd f910 	bl	b4b8a <_Znwj>
   b796a:	4604      	mov	r4, r0
   b796c:	b150      	cbz	r0, b7984 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b796e:	2300      	movs	r3, #0
   b7970:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7972:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b7974:	b133      	cbz	r3, b7984 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7976:	2202      	movs	r2, #2
   b7978:	4629      	mov	r1, r5
   b797a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b797c:	68eb      	ldr	r3, [r5, #12]
   b797e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7980:	68ab      	ldr	r3, [r5, #8]
   b7982:	60a3      	str	r3, [r4, #8]
   b7984:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b7988:	4620      	mov	r0, r4
   b798a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b798c:	2003e680 	.word	0x2003e680

000b7990 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b7990:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7992:	b087      	sub	sp, #28
   b7994:	4605      	mov	r5, r0
   b7996:	9103      	str	r1, [sp, #12]
   b7998:	4617      	mov	r7, r2
   b799a:	461e      	mov	r6, r3
    hal_interrupt_detach(pin);
   b799c:	f7fe fd02 	bl	b63a4 <hal_interrupt_detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b79a0:	9903      	ldr	r1, [sp, #12]
   b79a2:	4628      	mov	r0, r5
   b79a4:	f7ff ffd0 	bl	b7948 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b79a8:	4604      	mov	r4, r0
   b79aa:	b1e8      	cbz	r0, b79e8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        hal_interrupt_extra_configuration_t extra = {};
   b79ac:	2100      	movs	r1, #0
  if (priority >= 0) {
   b79ae:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b79b0:	f04f 0304 	mov.w	r3, #4
        hal_interrupt_extra_configuration_t extra = {};
   b79b4:	f8ad 1015 	strh.w	r1, [sp, #21]
   b79b8:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b79bc:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b79c0:	bfa2      	ittt	ge
   b79c2:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b79c4:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b79c8:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b79cc:	9100      	str	r1, [sp, #0]
   b79ce:	4602      	mov	r2, r0
   b79d0:	4907      	ldr	r1, [pc, #28]	; (b79f0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b79d2:	bfa8      	it	ge
   b79d4:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b79d8:	463b      	mov	r3, r7
   b79da:	4628      	mov	r0, r5
   b79dc:	f7fe fcda 	bl	b6394 <hal_interrupt_attach>
   b79e0:	b110      	cbz	r0, b79e8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b79e2:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b79e4:	b007      	add	sp, #28
   b79e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b79e8:	1e20      	subs	r0, r4, #0
   b79ea:	bf18      	it	ne
   b79ec:	2001      	movne	r0, #1
   b79ee:	e7f9      	b.n	b79e4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b79f0:	000b7935 	.word	0x000b7935

000b79f4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b79f4:	4770      	bx	lr

000b79f6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b79f6:	7441      	strb	r1, [r0, #17]
}
   b79f8:	4770      	bx	lr

000b79fa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b79fa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b79fc:	7c00      	ldrb	r0, [r0, #16]
   b79fe:	f7fe fda1 	bl	b6544 <hal_usart_available_data_for_write>
}
   b7a02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a06:	bd08      	pop	{r3, pc}

000b7a08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7a08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7a0a:	7c00      	ldrb	r0, [r0, #16]
   b7a0c:	f7fe fd72 	bl	b64f4 <hal_usart_available>
}
   b7a10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a14:	bd08      	pop	{r3, pc}

000b7a16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7a16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7a18:	7c00      	ldrb	r0, [r0, #16]
   b7a1a:	f7fe fd7b 	bl	b6514 <hal_usart_peek>
}
   b7a1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a22:	bd08      	pop	{r3, pc}

000b7a24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7a24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7a26:	7c00      	ldrb	r0, [r0, #16]
   b7a28:	f7fe fd6c 	bl	b6504 <hal_usart_read>
}
   b7a2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a30:	bd08      	pop	{r3, pc}

000b7a32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7a32:	7c00      	ldrb	r0, [r0, #16]
   b7a34:	f7fe bd76 	b.w	b6524 <hal_usart_flush>

000b7a38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a3a:	7c45      	ldrb	r5, [r0, #17]
{
   b7a3c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a3e:	b12d      	cbz	r5, b7a4c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7a40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7a42:	b003      	add	sp, #12
   b7a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7a48:	f7fe bd4c 	b.w	b64e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a4c:	7c00      	ldrb	r0, [r0, #16]
   b7a4e:	9101      	str	r1, [sp, #4]
   b7a50:	f7fe fd78 	bl	b6544 <hal_usart_available_data_for_write>
   b7a54:	2800      	cmp	r0, #0
   b7a56:	9901      	ldr	r1, [sp, #4]
   b7a58:	dcf2      	bgt.n	b7a40 <_ZN11USARTSerial5writeEh+0x8>
}
   b7a5a:	4628      	mov	r0, r5
   b7a5c:	b003      	add	sp, #12
   b7a5e:	bd30      	pop	{r4, r5, pc}

000b7a60 <_ZN11USARTSerialD0Ev>:
   b7a60:	b510      	push	{r4, lr}
   b7a62:	2114      	movs	r1, #20
   b7a64:	4604      	mov	r4, r0
   b7a66:	f7fd f898 	bl	b4b9a <_ZdlPvj>
   b7a6a:	4620      	mov	r0, r4
   b7a6c:	bd10      	pop	{r4, pc}
	...

000b7a70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7a70:	b510      	push	{r4, lr}
   b7a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7a76:	4604      	mov	r4, r0
   b7a78:	4608      	mov	r0, r1
   b7a7a:	4611      	mov	r1, r2
   b7a7c:	2200      	movs	r2, #0
   b7a7e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7a82:	4b04      	ldr	r3, [pc, #16]	; (b7a94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7a84:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7a86:	2301      	movs	r3, #1
  _serial = serial;
   b7a88:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7a8a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7a8c:	f7fe fd62 	bl	b6554 <hal_usart_init_ex>
}
   b7a90:	4620      	mov	r0, r4
   b7a92:	bd10      	pop	{r4, pc}
   b7a94:	000bb1f0 	.word	0x000bb1f0

000b7a98 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b7a98:	b510      	push	{r4, lr}
      if (_M_empty())
   b7a9a:	6883      	ldr	r3, [r0, #8]
   b7a9c:	4604      	mov	r4, r0
   b7a9e:	b90b      	cbnz	r3, b7aa4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b7aa0:	f000 fdb2 	bl	b8608 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7aa4:	68c3      	ldr	r3, [r0, #12]
   b7aa6:	4798      	blx	r3
      if (_M_manager)
   b7aa8:	68a3      	ldr	r3, [r4, #8]
   b7aaa:	b11b      	cbz	r3, b7ab4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7aac:	2203      	movs	r2, #3
   b7aae:	4621      	mov	r1, r4
   b7ab0:	4620      	mov	r0, r4
   b7ab2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7ab4:	4620      	mov	r0, r4
   b7ab6:	2110      	movs	r1, #16
}
   b7ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7abc:	f7fd b86d 	b.w	b4b9a <_ZdlPvj>

000b7ac0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7ac0:	4770      	bx	lr

000b7ac2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ac4:	4606      	mov	r6, r0
   b7ac6:	4615      	mov	r5, r2
   b7ac8:	460c      	mov	r4, r1
   b7aca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7acc:	42bc      	cmp	r4, r7
   b7ace:	d006      	beq.n	b7ade <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7ad0:	6833      	ldr	r3, [r6, #0]
   b7ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7ad6:	689b      	ldr	r3, [r3, #8]
   b7ad8:	4630      	mov	r0, r6
   b7ada:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7adc:	e7f6      	b.n	b7acc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7ade:	4628      	mov	r0, r5
   b7ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ae2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7ae2:	7c00      	ldrb	r0, [r0, #16]
   b7ae4:	2200      	movs	r2, #0
   b7ae6:	f7fe bd3d 	b.w	b6564 <hal_i2c_write>

000b7aea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7aea:	7c00      	ldrb	r0, [r0, #16]
   b7aec:	2100      	movs	r1, #0
   b7aee:	f7fe bd41 	b.w	b6574 <hal_i2c_available>

000b7af2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7af2:	7c00      	ldrb	r0, [r0, #16]
   b7af4:	2100      	movs	r1, #0
   b7af6:	f7fe bd45 	b.w	b6584 <hal_i2c_read>

000b7afa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7afa:	7c00      	ldrb	r0, [r0, #16]
   b7afc:	2100      	movs	r1, #0
   b7afe:	f7fe bd49 	b.w	b6594 <hal_i2c_peek>

000b7b02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7b02:	7c00      	ldrb	r0, [r0, #16]
   b7b04:	2100      	movs	r1, #0
   b7b06:	f7fe bd4d 	b.w	b65a4 <hal_i2c_flush>

000b7b0a <_ZN7TwoWireD0Ev>:
   b7b0a:	b510      	push	{r4, lr}
   b7b0c:	2114      	movs	r1, #20
   b7b0e:	4604      	mov	r4, r0
   b7b10:	f7fd f843 	bl	b4b9a <_ZdlPvj>
   b7b14:	4620      	mov	r0, r4
   b7b16:	bd10      	pop	{r4, pc}

000b7b18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7b18:	b510      	push	{r4, lr}
   b7b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b1e:	4604      	mov	r4, r0
   b7b20:	4608      	mov	r0, r1
   b7b22:	2100      	movs	r1, #0
   b7b24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b28:	4b03      	ldr	r3, [pc, #12]	; (b7b38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7b2a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7b2c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7b2e:	4611      	mov	r1, r2
   b7b30:	f7fe fd48 	bl	b65c4 <hal_i2c_init>
}
   b7b34:	4620      	mov	r0, r4
   b7b36:	bd10      	pop	{r4, pc}
   b7b38:	000bb220 	.word	0x000bb220

000b7b3c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7b3c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7b3e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7b40:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7b44:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7b46:	2201      	movs	r2, #1
   b7b48:	f04f 33ff 	mov.w	r3, #4294967295
   b7b4c:	f10d 0107 	add.w	r1, sp, #7
   b7b50:	47a0      	blx	r4
}
   b7b52:	b002      	add	sp, #8
   b7b54:	bd10      	pop	{r4, pc}

000b7b56 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7b56:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7b58:	6803      	ldr	r3, [r0, #0]
   b7b5a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7b5c:	f04f 33ff 	mov.w	r3, #4294967295
   b7b60:	46a4      	mov	ip, r4
}
   b7b62:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7b66:	4760      	bx	ip

000b7b68 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7b68:	b513      	push	{r0, r1, r4, lr}
   b7b6a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7b6c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7b6e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7b72:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7b74:	f10d 0107 	add.w	r1, sp, #7
   b7b78:	2201      	movs	r2, #1
   b7b7a:	47a0      	blx	r4
}
   b7b7c:	b002      	add	sp, #8
   b7b7e:	bd10      	pop	{r4, pc}

000b7b80 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7b80:	b510      	push	{r4, lr}
   b7b82:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7b84:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b88:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7b8c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7b8e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7b90:	d008      	beq.n	b7ba4 <_ZN9TCPClient4readEv+0x24>
   b7b92:	6963      	ldr	r3, [r4, #20]
   b7b94:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7b98:	1c51      	adds	r1, r2, #1
   b7b9a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7b9e:	4413      	add	r3, r2
   b7ba0:	7918      	ldrb	r0, [r3, #4]
}
   b7ba2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7ba4:	6803      	ldr	r3, [r0, #0]
   b7ba6:	691b      	ldr	r3, [r3, #16]
   b7ba8:	4798      	blx	r3
   b7baa:	2800      	cmp	r0, #0
   b7bac:	d1f1      	bne.n	b7b92 <_ZN9TCPClient4readEv+0x12>
   b7bae:	f04f 30ff 	mov.w	r0, #4294967295
   b7bb2:	e7f6      	b.n	b7ba2 <_ZN9TCPClient4readEv+0x22>

000b7bb4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7bb4:	4770      	bx	lr

000b7bb6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7bb6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7bb8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7bba:	43c0      	mvns	r0, r0
   b7bbc:	0fc0      	lsrs	r0, r0, #31
   b7bbe:	4770      	bx	lr

000b7bc0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7bc0:	4770      	bx	lr
	...

000b7bc4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7bc4:	4b06      	ldr	r3, [pc, #24]	; (b7be0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7bc6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7bc8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7bca:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7bce:	d005      	beq.n	b7bdc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7bd0:	4608      	mov	r0, r1
   b7bd2:	f000 fd1d 	bl	b8610 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7bd6:	2800      	cmp	r0, #0
   b7bd8:	bf08      	it	eq
   b7bda:	2400      	moveq	r4, #0
      }
   b7bdc:	4620      	mov	r0, r4
   b7bde:	bd10      	pop	{r4, pc}
   b7be0:	000bb160 	.word	0x000bb160

000b7be4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7be4:	b510      	push	{r4, lr}
   b7be6:	21ac      	movs	r1, #172	; 0xac
   b7be8:	4604      	mov	r4, r0
   b7bea:	f7fc ffd6 	bl	b4b9a <_ZdlPvj>
   b7bee:	4620      	mov	r0, r4
   b7bf0:	bd10      	pop	{r4, pc}

000b7bf2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7bf2:	21ac      	movs	r1, #172	; 0xac
   b7bf4:	f7fc bfd1 	b.w	b4b9a <_ZdlPvj>

000b7bf8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7bfc:	f04f 0800 	mov.w	r8, #0
   b7c00:	b086      	sub	sp, #24
   b7c02:	461c      	mov	r4, r3
   b7c04:	f8c0 8004 	str.w	r8, [r0, #4]
   b7c08:	4605      	mov	r5, r0
   b7c0a:	460e      	mov	r6, r1
   b7c0c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7c0e:	4641      	mov	r1, r8
   b7c10:	2210      	movs	r2, #16
   b7c12:	a802      	add	r0, sp, #8
   b7c14:	f001 f926 	bl	b8e64 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7c18:	1c63      	adds	r3, r4, #1
   b7c1a:	d009      	beq.n	b7c30 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c20:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7c24:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7c28:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7c2c:	435c      	muls	r4, r3
   b7c2e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7c30:	6968      	ldr	r0, [r5, #20]
   b7c32:	2310      	movs	r3, #16
   b7c34:	9300      	str	r3, [sp, #0]
   b7c36:	6800      	ldr	r0, [r0, #0]
   b7c38:	ab02      	add	r3, sp, #8
   b7c3a:	f241 0205 	movw	r2, #4101	; 0x1005
   b7c3e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7c42:	f7fe fcc7 	bl	b65d4 <sock_setsockopt>
    if (ret < 0) {
   b7c46:	2800      	cmp	r0, #0
   b7c48:	da07      	bge.n	b7c5a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7c4a:	f7fe fe4f 	bl	b68ec <__errno>
   b7c4e:	6803      	ldr	r3, [r0, #0]
   b7c50:	606b      	str	r3, [r5, #4]
        return 0;
   b7c52:	2000      	movs	r0, #0
}
   b7c54:	b006      	add	sp, #24
   b7c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7c5a:	6968      	ldr	r0, [r5, #20]
   b7c5c:	2300      	movs	r3, #0
   b7c5e:	6800      	ldr	r0, [r0, #0]
   b7c60:	463a      	mov	r2, r7
   b7c62:	4631      	mov	r1, r6
   b7c64:	f7fe fcd6 	bl	b6614 <sock_send>
    if (ret < 0) {
   b7c68:	1e03      	subs	r3, r0, #0
   b7c6a:	dbee      	blt.n	b7c4a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7c6c:	4618      	mov	r0, r3
   b7c6e:	e7f1      	b.n	b7c54 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7c70 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7c70:	b530      	push	{r4, r5, lr}
   b7c72:	b087      	sub	sp, #28
   b7c74:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7c76:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7c78:	4668      	mov	r0, sp
   b7c7a:	f7ff fdcb 	bl	b7814 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7c80:	3404      	adds	r4, #4
   b7c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7c84:	682b      	ldr	r3, [r5, #0]
   b7c86:	7023      	strb	r3, [r4, #0]
    }
   b7c88:	b007      	add	sp, #28
   b7c8a:	bd30      	pop	{r4, r5, pc}

000b7c8c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7c8c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7c8e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7c90:	4b05      	ldr	r3, [pc, #20]	; (b7ca8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7c92:	4604      	mov	r4, r0
   b7c94:	358c      	adds	r5, #140	; 0x8c
   b7c96:	f844 3b04 	str.w	r3, [r4], #4
   b7c9a:	4606      	mov	r6, r0
   b7c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ca0:	682b      	ldr	r3, [r5, #0]
   b7ca2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7ca4:	4630      	mov	r0, r6
   b7ca6:	bd70      	pop	{r4, r5, r6, pc}
   b7ca8:	000bb1ac 	.word	0x000bb1ac

000b7cac <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7cb0:	4698      	mov	r8, r3
    stop();
   b7cb2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7cb4:	b093      	sub	sp, #76	; 0x4c
   b7cb6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7cb8:	2400      	movs	r4, #0
    stop();
   b7cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7cbc:	4606      	mov	r6, r0
   b7cbe:	4617      	mov	r7, r2
    stop();
   b7cc0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7cc2:	4628      	mov	r0, r5
   b7cc4:	466b      	mov	r3, sp
   b7cc6:	4622      	mov	r2, r4
   b7cc8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7cca:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7ccc:	f7fe fb52 	bl	b6374 <netdb_getaddrinfo>
   b7cd0:	4605      	mov	r5, r0
   b7cd2:	2800      	cmp	r0, #0
   b7cd4:	d163      	bne.n	b7d9e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7cd6:	9b00      	ldr	r3, [sp, #0]
   b7cd8:	2b00      	cmp	r3, #0
   b7cda:	d04b      	beq.n	b7d74 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7cdc:	695b      	ldr	r3, [r3, #20]
   b7cde:	2b00      	cmp	r3, #0
   b7ce0:	d048      	beq.n	b7d74 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7ce2:	a806      	add	r0, sp, #24
   b7ce4:	f7ff fd52 	bl	b778c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7ce8:	9b00      	ldr	r3, [sp, #0]
   b7cea:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7cec:	7863      	ldrb	r3, [r4, #1]
   b7cee:	2b02      	cmp	r3, #2
   b7cf0:	d104      	bne.n	b7cfc <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7cf2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7cf4:	a806      	add	r0, sp, #24
   b7cf6:	f7ff ffbb 	bl	b7c70 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7cfa:	e026      	b.n	b7d4a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7cfc:	2b0a      	cmp	r3, #10
   b7cfe:	d124      	bne.n	b7d4a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7d00:	2211      	movs	r2, #17
   b7d02:	4629      	mov	r1, r5
   b7d04:	a801      	add	r0, sp, #4
   b7d06:	f001 f8ad 	bl	b8e64 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7d0a:	68a3      	ldr	r3, [r4, #8]
   b7d0c:	2b00      	cmp	r3, #0
   b7d0e:	d038      	beq.n	b7d82 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7d10:	f104 0308 	add.w	r3, r4, #8
   b7d14:	f10d 0c04 	add.w	ip, sp, #4
   b7d18:	3418      	adds	r4, #24
   b7d1a:	6818      	ldr	r0, [r3, #0]
   b7d1c:	6859      	ldr	r1, [r3, #4]
   b7d1e:	4662      	mov	r2, ip
   b7d20:	c203      	stmia	r2!, {r0, r1}
   b7d22:	3308      	adds	r3, #8
   b7d24:	42a3      	cmp	r3, r4
   b7d26:	4694      	mov	ip, r2
   b7d28:	d1f7      	bne.n	b7d1a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7d2a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7d2c:	a901      	add	r1, sp, #4
   b7d2e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7d30:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7d34:	f7ff fd38 	bl	b77a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7d38:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7d3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7d40:	ac07      	add	r4, sp, #28
   b7d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7d44:	f8dc 3000 	ldr.w	r3, [ip]
   b7d48:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7d4a:	a806      	add	r0, sp, #24
   b7d4c:	f7ff fd3e 	bl	b77cc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7d50:	b180      	cbz	r0, b7d74 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7d52:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7d54:	ad07      	add	r5, sp, #28
   b7d56:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7d5a:	4b12      	ldr	r3, [pc, #72]	; (b7da4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7d5c:	930c      	str	r3, [sp, #48]	; 0x30
   b7d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d60:	ac0d      	add	r4, sp, #52	; 0x34
   b7d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7d64:	682b      	ldr	r3, [r5, #0]
   b7d66:	7023      	strb	r3, [r4, #0]
   b7d68:	463a      	mov	r2, r7
   b7d6a:	4643      	mov	r3, r8
   b7d6c:	a90c      	add	r1, sp, #48	; 0x30
   b7d6e:	4630      	mov	r0, r6
   b7d70:	47c8      	blx	r9
   b7d72:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7d74:	9800      	ldr	r0, [sp, #0]
   b7d76:	f7fe faf5 	bl	b6364 <netdb_freeaddrinfo>
}
   b7d7a:	4628      	mov	r0, r5
   b7d7c:	b013      	add	sp, #76	; 0x4c
   b7d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7d82:	68e3      	ldr	r3, [r4, #12]
   b7d84:	2b00      	cmp	r3, #0
   b7d86:	d1c3      	bne.n	b7d10 <_ZN9TCPClient7connectEPKctm+0x64>
   b7d88:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7d8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7d90:	f7fe fb98 	bl	b64c4 <inet_htonl>
   b7d94:	4581      	cmp	r9, r0
   b7d96:	d1bb      	bne.n	b7d10 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7d98:	f104 0114 	add.w	r1, r4, #20
   b7d9c:	e7aa      	b.n	b7cf4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7d9e:	4625      	mov	r5, r4
   b7da0:	e7e8      	b.n	b7d74 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7da2:	bf00      	nop
   b7da4:	000bb1ac 	.word	0x000bb1ac

000b7da8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7da8:	b538      	push	{r3, r4, r5, lr}
   b7daa:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7dac:	681a      	ldr	r2, [r3, #0]
   b7dae:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7db0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7db2:	da10      	bge.n	b7dd6 <_ZN9TCPClient9connectedEv+0x2e>
   b7db4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7db8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7dbc:	429a      	cmp	r2, r3
   b7dbe:	d10a      	bne.n	b7dd6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7dc0:	6803      	ldr	r3, [r0, #0]
   b7dc2:	691b      	ldr	r3, [r3, #16]
   b7dc4:	4798      	blx	r3
        if (!rv) {
   b7dc6:	4604      	mov	r4, r0
   b7dc8:	b928      	cbnz	r0, b7dd6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7dca:	682b      	ldr	r3, [r5, #0]
   b7dcc:	4628      	mov	r0, r5
   b7dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7dd0:	4798      	blx	r3
        rv = available();
   b7dd2:	4620      	mov	r0, r4
}
   b7dd4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7dd6:	2001      	movs	r0, #1
   b7dd8:	e7fc      	b.n	b7dd4 <_ZN9TCPClient9connectedEv+0x2c>

000b7dda <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7dda:	b510      	push	{r4, lr}
   b7ddc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7dde:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7de2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7de6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7de8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7dea:	d005      	beq.n	b7df8 <_ZN9TCPClient4peekEv+0x1e>
   b7dec:	6963      	ldr	r3, [r4, #20]
   b7dee:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7df2:	4413      	add	r3, r2
   b7df4:	7918      	ldrb	r0, [r3, #4]
}
   b7df6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7df8:	6803      	ldr	r3, [r0, #0]
   b7dfa:	691b      	ldr	r3, [r3, #16]
   b7dfc:	4798      	blx	r3
   b7dfe:	2800      	cmp	r0, #0
   b7e00:	d1f4      	bne.n	b7dec <_ZN9TCPClient4peekEv+0x12>
   b7e02:	f04f 30ff 	mov.w	r0, #4294967295
   b7e06:	e7f6      	b.n	b7df6 <_ZN9TCPClient4peekEv+0x1c>

000b7e08 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e0a:	6943      	ldr	r3, [r0, #20]
   b7e0c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7e0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7e12:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7e16:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7e18:	4605      	mov	r5, r0
   b7e1a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7e1c:	d016      	beq.n	b7e4c <_ZN9TCPClient4readEPhj+0x44>
   b7e1e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7e20:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7e24:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7e28:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7e2a:	42bc      	cmp	r4, r7
   b7e2c:	bf28      	it	cs
   b7e2e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7e30:	3304      	adds	r3, #4
   b7e32:	4622      	mov	r2, r4
   b7e34:	4419      	add	r1, r3
   b7e36:	4630      	mov	r0, r6
   b7e38:	f000 ffec 	bl	b8e14 <memcpy>
   b7e3c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7e3e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7e42:	4423      	add	r3, r4
   b7e44:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7e48:	4620      	mov	r0, r4
   b7e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7e4c:	6803      	ldr	r3, [r0, #0]
   b7e4e:	691b      	ldr	r3, [r3, #16]
   b7e50:	4798      	blx	r3
   b7e52:	2800      	cmp	r0, #0
   b7e54:	d1e3      	bne.n	b7e1e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7e56:	f04f 34ff 	mov.w	r4, #4294967295
   b7e5a:	e7f5      	b.n	b7e48 <_ZN9TCPClient4readEPhj+0x40>

000b7e5c <_ZN9TCPClient12flush_bufferEv>:
   b7e5c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7e5e:	2300      	movs	r3, #0
   b7e60:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7e64:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7e66:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7e6a:	4770      	bx	lr

000b7e6c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7e70:	461f      	mov	r7, r3
    stop();
   b7e72:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7e74:	460c      	mov	r4, r1
    stop();
   b7e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7e78:	b08a      	sub	sp, #40	; 0x28
   b7e7a:	4605      	mov	r5, r0
   b7e7c:	4616      	mov	r6, r2
    stop();
   b7e7e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7e80:	7d23      	ldrb	r3, [r4, #20]
   b7e82:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7e86:	2b04      	cmp	r3, #4
   b7e88:	bf0c      	ite	eq
   b7e8a:	2002      	moveq	r0, #2
   b7e8c:	200a      	movne	r0, #10
   b7e8e:	2206      	movs	r2, #6
   b7e90:	2101      	movs	r1, #1
   b7e92:	f7fe fbc7 	bl	b6624 <sock_socket>
   b7e96:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7e9a:	696b      	ldr	r3, [r5, #20]
   b7e9c:	681b      	ldr	r3, [r3, #0]
   b7e9e:	2b00      	cmp	r3, #0
   b7ea0:	da08      	bge.n	b7eb4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7ea2:	682b      	ldr	r3, [r5, #0]
   b7ea4:	4628      	mov	r0, r5
   b7ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7ea8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7eaa:	4798      	blx	r3
}
   b7eac:	4620      	mov	r0, r4
   b7eae:	b00a      	add	sp, #40	; 0x28
   b7eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7eb4:	4628      	mov	r0, r5
   b7eb6:	f7ff ffd1 	bl	b7e5c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7eba:	b1b7      	cbz	r7, b7eea <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7ebc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7ebe:	a903      	add	r1, sp, #12
   b7ec0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7ec2:	9303      	str	r3, [sp, #12]
   b7ec4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7ec8:	f7fe fa74 	bl	b63b4 <if_index_to_name>
   b7ecc:	2800      	cmp	r0, #0
   b7ece:	d1e8      	bne.n	b7ea2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7ed0:	6968      	ldr	r0, [r5, #20]
   b7ed2:	2306      	movs	r3, #6
   b7ed4:	9300      	str	r3, [sp, #0]
   b7ed6:	6800      	ldr	r0, [r0, #0]
   b7ed8:	ab03      	add	r3, sp, #12
   b7eda:	f241 020b 	movw	r2, #4107	; 0x100b
   b7ede:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7ee2:	f7fe fb77 	bl	b65d4 <sock_setsockopt>
   b7ee6:	2800      	cmp	r0, #0
   b7ee8:	d1db      	bne.n	b7ea2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7eea:	221c      	movs	r2, #28
   b7eec:	2100      	movs	r1, #0
   b7eee:	a803      	add	r0, sp, #12
   b7ef0:	f000 ffb8 	bl	b8e64 <memset>
    if (ip.version() == 4) {
   b7ef4:	7d23      	ldrb	r3, [r4, #20]
   b7ef6:	2b04      	cmp	r3, #4
   b7ef8:	d11d      	bne.n	b7f36 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7efa:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7efe:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7f00:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7f04:	f7fe fae6 	bl	b64d4 <inet_htons>
   b7f08:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7f0c:	6860      	ldr	r0, [r4, #4]
   b7f0e:	f7fe fad9 	bl	b64c4 <inet_htonl>
   b7f12:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7f14:	696b      	ldr	r3, [r5, #20]
   b7f16:	221c      	movs	r2, #28
   b7f18:	6818      	ldr	r0, [r3, #0]
   b7f1a:	a903      	add	r1, sp, #12
   b7f1c:	f7fe fb6a 	bl	b65f4 <sock_connect>
   b7f20:	2800      	cmp	r0, #0
   b7f22:	d1be      	bne.n	b7ea2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7f24:	3404      	adds	r4, #4
   b7f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7f28:	696d      	ldr	r5, [r5, #20]
   b7f2a:	358c      	adds	r5, #140	; 0x8c
   b7f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7f2e:	6823      	ldr	r3, [r4, #0]
   b7f30:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7f32:	2401      	movs	r4, #1
   b7f34:	e7ba      	b.n	b7eac <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7f36:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7f3a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7f3c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7f40:	f7fe fac8 	bl	b64d4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7f44:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7f46:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7f4a:	1d23      	adds	r3, r4, #4
   b7f4c:	f104 0714 	add.w	r7, r4, #20
   b7f50:	6818      	ldr	r0, [r3, #0]
   b7f52:	6859      	ldr	r1, [r3, #4]
   b7f54:	4632      	mov	r2, r6
   b7f56:	c203      	stmia	r2!, {r0, r1}
   b7f58:	3308      	adds	r3, #8
   b7f5a:	42bb      	cmp	r3, r7
   b7f5c:	4616      	mov	r6, r2
   b7f5e:	d1f7      	bne.n	b7f50 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7f60:	e7d8      	b.n	b7f14 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7f64 <_ZN9TCPClient9availableEv>:
{
   b7f64:	b530      	push	{r4, r5, lr}
   b7f66:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7f68:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7f6c:	b08b      	sub	sp, #44	; 0x2c
   b7f6e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7f70:	b12b      	cbz	r3, b7f7e <_ZN9TCPClient9availableEv+0x1a>
   b7f72:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7f76:	429a      	cmp	r2, r3
   b7f78:	d101      	bne.n	b7f7e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7f7a:	f7ff ff6f 	bl	b7e5c <_ZN9TCPClient12flush_bufferEv>
   b7f7e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7f80:	6808      	ldr	r0, [r1, #0]
   b7f82:	2800      	cmp	r0, #0
   b7f84:	db18      	blt.n	b7fb8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7f86:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7f8a:	2d7f      	cmp	r5, #127	; 0x7f
   b7f8c:	d814      	bhi.n	b7fb8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7f8e:	3104      	adds	r1, #4
   b7f90:	2308      	movs	r3, #8
   b7f92:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7f96:	4429      	add	r1, r5
   b7f98:	f7fe fb34 	bl	b6604 <sock_recv>
            if (ret > 0) {
   b7f9c:	2800      	cmp	r0, #0
   b7f9e:	dd13      	ble.n	b7fc8 <_ZN9TCPClient9availableEv+0x64>
   b7fa0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7fa2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7fa6:	b90a      	cbnz	r2, b7fac <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7fa8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7fac:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7fae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7fb2:	4410      	add	r0, r2
   b7fb4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7fb8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7fba:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7fbe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7fc2:	1ac0      	subs	r0, r0, r3
   b7fc4:	b00b      	add	sp, #44	; 0x2c
   b7fc6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7fc8:	f7fe fc90 	bl	b68ec <__errno>
   b7fcc:	6803      	ldr	r3, [r0, #0]
   b7fce:	2b0b      	cmp	r3, #11
   b7fd0:	d0f2      	beq.n	b7fb8 <_ZN9TCPClient9availableEv+0x54>
   b7fd2:	f7fe fc8b 	bl	b68ec <__errno>
   b7fd6:	6803      	ldr	r3, [r0, #0]
   b7fd8:	2b0b      	cmp	r3, #11
   b7fda:	d0ed      	beq.n	b7fb8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7fdc:	2320      	movs	r3, #32
   b7fde:	2500      	movs	r5, #0
   b7fe0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7fe4:	f7fe fc82 	bl	b68ec <__errno>
   b7fe8:	6803      	ldr	r3, [r0, #0]
   b7fea:	9301      	str	r3, [sp, #4]
   b7fec:	4b08      	ldr	r3, [pc, #32]	; (b8010 <_ZN9TCPClient9availableEv+0xac>)
   b7fee:	4909      	ldr	r1, [pc, #36]	; (b8014 <_ZN9TCPClient9availableEv+0xb0>)
   b7ff0:	9300      	str	r3, [sp, #0]
   b7ff2:	aa02      	add	r2, sp, #8
   b7ff4:	462b      	mov	r3, r5
   b7ff6:	2032      	movs	r0, #50	; 0x32
   b7ff8:	f7fe fb5c 	bl	b66b4 <log_message>
                    sock_close(d_->sock);
   b7ffc:	6963      	ldr	r3, [r4, #20]
   b7ffe:	6818      	ldr	r0, [r3, #0]
   b8000:	f7fe faf0 	bl	b65e4 <sock_close>
   b8004:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8006:	f04f 32ff 	mov.w	r2, #4294967295
   b800a:	601a      	str	r2, [r3, #0]
   b800c:	e7d4      	b.n	b7fb8 <_ZN9TCPClient9availableEv+0x54>
   b800e:	bf00      	nop
   b8010:	000bb247 	.word	0x000bb247
   b8014:	000bb240 	.word	0x000bb240

000b8018 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8018:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b801a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b801c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b801e:	6818      	ldr	r0, [r3, #0]
   b8020:	2800      	cmp	r0, #0
   b8022:	db01      	blt.n	b8028 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8024:	f7fe fade 	bl	b65e4 <sock_close>
   b8028:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b802a:	f04f 32ff 	mov.w	r2, #4294967295
   b802e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8030:	6960      	ldr	r0, [r4, #20]
   b8032:	2211      	movs	r2, #17
   b8034:	2100      	movs	r1, #0
   b8036:	308c      	adds	r0, #140	; 0x8c
   b8038:	f000 ff14 	bl	b8e64 <memset>
    flush_buffer();
   b803c:	4620      	mov	r0, r4
}
   b803e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8042:	f7ff bf0b 	b.w	b7e5c <_ZN9TCPClient12flush_bufferEv>

000b8046 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8046:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8048:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b804a:	4604      	mov	r4, r0
          total(0) {
   b804c:	6001      	str	r1, [r0, #0]
   b804e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8052:	3088      	adds	r0, #136	; 0x88
   b8054:	f7ff fb9a 	bl	b778c <_ZN9IPAddressC1Ev>
}
   b8058:	4620      	mov	r0, r4
   b805a:	bd10      	pop	{r4, pc}

000b805c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b805c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b805e:	2300      	movs	r3, #0
   b8060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8064:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8068:	4a0e      	ldr	r2, [pc, #56]	; (b80a4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b806a:	6103      	str	r3, [r0, #16]
   b806c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b806e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8070:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8072:	20ac      	movs	r0, #172	; 0xac
   b8074:	9101      	str	r1, [sp, #4]
   b8076:	f7fc fd88 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b807a:	1e05      	subs	r5, r0, #0
   b807c:	f105 060c 	add.w	r6, r5, #12
   b8080:	d008      	beq.n	b8094 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8082:	2301      	movs	r3, #1
   b8084:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8088:	4b07      	ldr	r3, [pc, #28]	; (b80a8 <_ZN9TCPClientC1Ei+0x4c>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b808a:	9901      	ldr	r1, [sp, #4]
   b808c:	602b      	str	r3, [r5, #0]
   b808e:	4630      	mov	r0, r6
   b8090:	f7ff ffd9 	bl	b8046 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8094:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8096:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b809a:	f7ff fedf 	bl	b7e5c <_ZN9TCPClient12flush_bufferEv>
}
   b809e:	b002      	add	sp, #8
   b80a0:	bd70      	pop	{r4, r5, r6, pc}
   b80a2:	bf00      	nop
   b80a4:	000bb27c 	.word	0x000bb27c
   b80a8:	000bb260 	.word	0x000bb260

000b80ac <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b80ac:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b80ae:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b80b2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b80b4:	f7ff ffd2 	bl	b805c <_ZN9TCPClientC1Ei>
}
   b80b8:	4620      	mov	r0, r4
   b80ba:	bd10      	pop	{r4, pc}

000b80bc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b80bc:	b510      	push	{r4, lr}
   b80be:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b80c0:	6800      	ldr	r0, [r0, #0]
   b80c2:	2800      	cmp	r0, #0
   b80c4:	db01      	blt.n	b80ca <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b80c6:	f7fe fa8d 	bl	b65e4 <sock_close>
    }
}
   b80ca:	4620      	mov	r0, r4
   b80cc:	bd10      	pop	{r4, pc}

000b80ce <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b80ce:	300c      	adds	r0, #12
   b80d0:	f7ff bff4 	b.w	b80bc <_ZN9TCPClient4DataD1Ev>

000b80d4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b80d4:	2200      	movs	r2, #0
   b80d6:	6840      	ldr	r0, [r0, #4]
   b80d8:	4611      	mov	r1, r2
   b80da:	f7fe bb57 	b.w	b678c <network_ready>

000b80de <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b80de:	2200      	movs	r2, #0
   b80e0:	6840      	ldr	r0, [r0, #4]
   b80e2:	4611      	mov	r1, r2
   b80e4:	f7fe bb72 	b.w	b67cc <network_listening>

000b80e8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b80e8:	2200      	movs	r2, #0
   b80ea:	6840      	ldr	r0, [r0, #4]
   b80ec:	4611      	mov	r1, r2
   b80ee:	f7fe bb7d 	b.w	b67ec <network_get_listen_timeout>

000b80f2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b80f2:	6840      	ldr	r0, [r0, #4]
   b80f4:	2200      	movs	r2, #0
   b80f6:	f7fe bb71 	b.w	b67dc <network_set_listen_timeout>

000b80fa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b80fa:	6840      	ldr	r0, [r0, #4]
   b80fc:	2200      	movs	r2, #0
   b80fe:	f081 0101 	eor.w	r1, r1, #1
   b8102:	f7fe bb5b 	b.w	b67bc <network_listen>

000b8106 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8106:	2300      	movs	r3, #0
   b8108:	6840      	ldr	r0, [r0, #4]
   b810a:	461a      	mov	r2, r3
   b810c:	4619      	mov	r1, r3
   b810e:	f7fe bb4d 	b.w	b67ac <network_off>

000b8112 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8112:	2300      	movs	r3, #0
   b8114:	6840      	ldr	r0, [r0, #4]
   b8116:	461a      	mov	r2, r3
   b8118:	4619      	mov	r1, r3
   b811a:	f7fe bb3f 	b.w	b679c <network_on>

000b811e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b811e:	2200      	movs	r2, #0
   b8120:	6840      	ldr	r0, [r0, #4]
   b8122:	4611      	mov	r1, r2
   b8124:	f7fe bb22 	b.w	b676c <network_connecting>

000b8128 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8128:	6840      	ldr	r0, [r0, #4]
   b812a:	2200      	movs	r2, #0
   b812c:	2102      	movs	r1, #2
   b812e:	f7fe bb25 	b.w	b677c <network_disconnect>

000b8132 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8132:	2300      	movs	r3, #0
   b8134:	6840      	ldr	r0, [r0, #4]
   b8136:	461a      	mov	r2, r3
   b8138:	f7fe bb10 	b.w	b675c <network_connect>

000b813c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b813c:	4b02      	ldr	r3, [pc, #8]	; (b8148 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b813e:	2204      	movs	r2, #4
   b8140:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8142:	4a02      	ldr	r2, [pc, #8]	; (b814c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8144:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8146:	4770      	bx	lr
   b8148:	2003e710 	.word	0x2003e710
   b814c:	000bb2c8 	.word	0x000bb2c8

000b8150 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8150:	2300      	movs	r3, #0
   b8152:	6840      	ldr	r0, [r0, #4]
   b8154:	461a      	mov	r2, r3
   b8156:	f7fe bb01 	b.w	b675c <network_connect>

000b815a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b815a:	6840      	ldr	r0, [r0, #4]
   b815c:	2200      	movs	r2, #0
   b815e:	2102      	movs	r1, #2
   b8160:	f7fe bb0c 	b.w	b677c <network_disconnect>

000b8164 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8164:	2200      	movs	r2, #0
   b8166:	6840      	ldr	r0, [r0, #4]
   b8168:	4611      	mov	r1, r2
   b816a:	f7fe baff 	b.w	b676c <network_connecting>

000b816e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b816e:	2200      	movs	r2, #0
   b8170:	6840      	ldr	r0, [r0, #4]
   b8172:	4611      	mov	r1, r2
   b8174:	f7fe bb0a 	b.w	b678c <network_ready>

000b8178 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8178:	2300      	movs	r3, #0
   b817a:	6840      	ldr	r0, [r0, #4]
   b817c:	461a      	mov	r2, r3
   b817e:	4619      	mov	r1, r3
   b8180:	f7fe bb0c 	b.w	b679c <network_on>

000b8184 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8184:	2300      	movs	r3, #0
   b8186:	6840      	ldr	r0, [r0, #4]
   b8188:	461a      	mov	r2, r3
   b818a:	4619      	mov	r1, r3
   b818c:	f7fe bb0e 	b.w	b67ac <network_off>

000b8190 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8190:	6840      	ldr	r0, [r0, #4]
   b8192:	2100      	movs	r1, #0
   b8194:	f7fe bb32 	b.w	b67fc <network_is_on>

000b8198 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8198:	6840      	ldr	r0, [r0, #4]
   b819a:	2100      	movs	r1, #0
   b819c:	f7fe bb36 	b.w	b680c <network_is_off>

000b81a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b81a0:	6840      	ldr	r0, [r0, #4]
   b81a2:	2200      	movs	r2, #0
   b81a4:	f081 0101 	eor.w	r1, r1, #1
   b81a8:	f7fe bb08 	b.w	b67bc <network_listen>

000b81ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b81ac:	6840      	ldr	r0, [r0, #4]
   b81ae:	2200      	movs	r2, #0
   b81b0:	f7fe bb14 	b.w	b67dc <network_set_listen_timeout>

000b81b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b81b4:	2200      	movs	r2, #0
   b81b6:	6840      	ldr	r0, [r0, #4]
   b81b8:	4611      	mov	r1, r2
   b81ba:	f7fe bb17 	b.w	b67ec <network_get_listen_timeout>

000b81be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b81be:	2200      	movs	r2, #0
   b81c0:	6840      	ldr	r0, [r0, #4]
   b81c2:	4611      	mov	r1, r2
   b81c4:	f7fe bb02 	b.w	b67cc <network_listening>

000b81c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b81c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b81cc:	b095      	sub	sp, #84	; 0x54
   b81ce:	4614      	mov	r4, r2
   b81d0:	460d      	mov	r5, r1
   b81d2:	4607      	mov	r7, r0
    IPAddress addr;
   b81d4:	f7ff fada 	bl	b778c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b81d8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b81da:	221c      	movs	r2, #28
   b81dc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b81de:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b81e0:	f000 fe40 	bl	b8e64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b81e4:	2340      	movs	r3, #64	; 0x40
   b81e6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b81e8:	4620      	mov	r0, r4
   b81ea:	466b      	mov	r3, sp
   b81ec:	aa0c      	add	r2, sp, #48	; 0x30
   b81ee:	2100      	movs	r1, #0
   b81f0:	f7fe f8c0 	bl	b6374 <netdb_getaddrinfo>
    if (!r) {
   b81f4:	4604      	mov	r4, r0
   b81f6:	2800      	cmp	r0, #0
   b81f8:	d14b      	bne.n	b8292 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b81fa:	4602      	mov	r2, r0
   b81fc:	2101      	movs	r1, #1
   b81fe:	6868      	ldr	r0, [r5, #4]
   b8200:	f7fe fac4 	bl	b678c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8204:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8206:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8208:	4622      	mov	r2, r4
   b820a:	6868      	ldr	r0, [r5, #4]
   b820c:	f7fe fabe 	bl	b678c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8210:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8212:	4681      	mov	r9, r0
        bool ok = false;
   b8214:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8216:	2e00      	cmp	r6, #0
   b8218:	d03b      	beq.n	b8292 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b821a:	2900      	cmp	r1, #0
   b821c:	d139      	bne.n	b8292 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b821e:	6873      	ldr	r3, [r6, #4]
   b8220:	2b02      	cmp	r3, #2
   b8222:	d003      	beq.n	b822c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8224:	2b0a      	cmp	r3, #10
   b8226:	d011      	beq.n	b824c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8228:	69f6      	ldr	r6, [r6, #28]
   b822a:	e7f4      	b.n	b8216 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b822c:	f1b8 0f00 	cmp.w	r8, #0
   b8230:	d0fa      	beq.n	b8228 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8232:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8234:	a806      	add	r0, sp, #24
   b8236:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8238:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b823a:	f7ff faeb 	bl	b7814 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b823e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8240:	1d3c      	adds	r4, r7, #4
   b8242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8244:	682b      	ldr	r3, [r5, #0]
   b8246:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8248:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b824a:	e7ed      	b.n	b8228 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b824c:	f1b9 0f00 	cmp.w	r9, #0
   b8250:	d0ea      	beq.n	b8228 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8252:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8254:	2210      	movs	r2, #16
   b8256:	a801      	add	r0, sp, #4
   b8258:	f000 fe04 	bl	b8e64 <memset>
                    a.v = 6;
   b825c:	2306      	movs	r3, #6
   b825e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8262:	ad01      	add	r5, sp, #4
   b8264:	f104 0308 	add.w	r3, r4, #8
   b8268:	3418      	adds	r4, #24
   b826a:	6818      	ldr	r0, [r3, #0]
   b826c:	6859      	ldr	r1, [r3, #4]
   b826e:	462a      	mov	r2, r5
   b8270:	c203      	stmia	r2!, {r0, r1}
   b8272:	3308      	adds	r3, #8
   b8274:	42a3      	cmp	r3, r4
   b8276:	4615      	mov	r5, r2
   b8278:	d1f7      	bne.n	b826a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b827a:	a901      	add	r1, sp, #4
   b827c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b827e:	ad07      	add	r5, sp, #28
   b8280:	f7ff fa92 	bl	b77a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8286:	1d3c      	adds	r4, r7, #4
   b8288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b828a:	682b      	ldr	r3, [r5, #0]
   b828c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b828e:	4649      	mov	r1, r9
   b8290:	e7ca      	b.n	b8228 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8292:	9800      	ldr	r0, [sp, #0]
   b8294:	f7fe f866 	bl	b6364 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8298:	4638      	mov	r0, r7
   b829a:	b015      	add	sp, #84	; 0x54
   b829c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b82a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b82a0:	4b02      	ldr	r3, [pc, #8]	; (b82ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b82a2:	4a03      	ldr	r2, [pc, #12]	; (b82b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b82a4:	601a      	str	r2, [r3, #0]
   b82a6:	2200      	movs	r2, #0
   b82a8:	605a      	str	r2, [r3, #4]

} // spark
   b82aa:	4770      	bx	lr
   b82ac:	2003e718 	.word	0x2003e718
   b82b0:	000bb304 	.word	0x000bb304

000b82b4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b82b4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b82b6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b82b8:	d902      	bls.n	b82c0 <pinAvailable+0xc>
    return false;
   b82ba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b82bc:	b002      	add	sp, #8
   b82be:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b82c0:	f1a0 030b 	sub.w	r3, r0, #11
   b82c4:	2b02      	cmp	r3, #2
   b82c6:	d81a      	bhi.n	b82fe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b82c8:	4c17      	ldr	r4, [pc, #92]	; (b8328 <pinAvailable+0x74>)
   b82ca:	7821      	ldrb	r1, [r4, #0]
   b82cc:	f3bf 8f5b 	dmb	ish
   b82d0:	f011 0101 	ands.w	r1, r1, #1
   b82d4:	d10b      	bne.n	b82ee <pinAvailable+0x3a>
   b82d6:	4620      	mov	r0, r4
   b82d8:	9101      	str	r1, [sp, #4]
   b82da:	f7fc fc60 	bl	b4b9e <__cxa_guard_acquire>
   b82de:	9901      	ldr	r1, [sp, #4]
   b82e0:	b128      	cbz	r0, b82ee <pinAvailable+0x3a>
   b82e2:	4812      	ldr	r0, [pc, #72]	; (b832c <pinAvailable+0x78>)
   b82e4:	f7fe fb60 	bl	b69a8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b82e8:	4620      	mov	r0, r4
   b82ea:	f7fc fc5d 	bl	b4ba8 <__cxa_guard_release>
   b82ee:	4b0f      	ldr	r3, [pc, #60]	; (b832c <pinAvailable+0x78>)
   b82f0:	7818      	ldrb	r0, [r3, #0]
   b82f2:	f7fe f9a7 	bl	b6644 <hal_spi_is_enabled>
   b82f6:	2800      	cmp	r0, #0
   b82f8:	d1df      	bne.n	b82ba <pinAvailable+0x6>
  return true; // 'pin' is available
   b82fa:	2001      	movs	r0, #1
   b82fc:	e7de      	b.n	b82bc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b82fe:	2801      	cmp	r0, #1
   b8300:	d809      	bhi.n	b8316 <pinAvailable+0x62>
   b8302:	f000 f87d 	bl	b8400 <_Z19__fetch_global_Wirev>
   b8306:	2100      	movs	r1, #0
   b8308:	7c00      	ldrb	r0, [r0, #16]
   b830a:	f7fe f953 	bl	b65b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b830e:	f080 0001 	eor.w	r0, r0, #1
   b8312:	b2c0      	uxtb	r0, r0
   b8314:	e7d2      	b.n	b82bc <pinAvailable+0x8>
   b8316:	3809      	subs	r0, #9
   b8318:	2801      	cmp	r0, #1
   b831a:	d8ee      	bhi.n	b82fa <pinAvailable+0x46>
   b831c:	f000 f834 	bl	b8388 <_Z22__fetch_global_Serial1v>
   b8320:	7c00      	ldrb	r0, [r0, #16]
   b8322:	f7fe f907 	bl	b6534 <hal_usart_is_enabled>
   b8326:	e7f2      	b.n	b830e <pinAvailable+0x5a>
   b8328:	2003e720 	.word	0x2003e720
   b832c:	2003e724 	.word	0x2003e724

000b8330 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8330:	2823      	cmp	r0, #35	; 0x23
{
   b8332:	b538      	push	{r3, r4, r5, lr}
   b8334:	4604      	mov	r4, r0
   b8336:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8338:	d80a      	bhi.n	b8350 <pinMode+0x20>
   b833a:	29ff      	cmp	r1, #255	; 0xff
   b833c:	d008      	beq.n	b8350 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b833e:	f7ff ffb9 	bl	b82b4 <pinAvailable>
   b8342:	b128      	cbz	r0, b8350 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8344:	4629      	mov	r1, r5
   b8346:	4620      	mov	r0, r4
}
   b8348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b834c:	f7fe b81a 	b.w	b6384 <hal_gpio_mode>
}
   b8350:	bd38      	pop	{r3, r4, r5, pc}

000b8352 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8352:	4770      	bx	lr

000b8354 <_Z20acquireSerial1Bufferv>:
{
   b8354:	b538      	push	{r3, r4, r5, lr}
   b8356:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8358:	2514      	movs	r5, #20
   b835a:	462a      	mov	r2, r5
   b835c:	2100      	movs	r1, #0
   b835e:	f000 fd81 	bl	b8e64 <memset>
   b8362:	8025      	strh	r5, [r4, #0]
   b8364:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8366:	4907      	ldr	r1, [pc, #28]	; (b8384 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8368:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b836a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b836c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b836e:	f000 f86b 	bl	b8448 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8372:	4904      	ldr	r1, [pc, #16]	; (b8384 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8374:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8376:	4628      	mov	r0, r5
   b8378:	f000 f866 	bl	b8448 <_ZnajRKSt9nothrow_t>
    };
   b837c:	60e0      	str	r0, [r4, #12]
}
   b837e:	4620      	mov	r0, r4
   b8380:	bd38      	pop	{r3, r4, r5, pc}
   b8382:	bf00      	nop
   b8384:	000bb338 	.word	0x000bb338

000b8388 <_Z22__fetch_global_Serial1v>:
{
   b8388:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b838a:	4d0e      	ldr	r5, [pc, #56]	; (b83c4 <_Z22__fetch_global_Serial1v+0x3c>)
   b838c:	7829      	ldrb	r1, [r5, #0]
   b838e:	f3bf 8f5b 	dmb	ish
   b8392:	f011 0401 	ands.w	r4, r1, #1
{
   b8396:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8398:	d111      	bne.n	b83be <_Z22__fetch_global_Serial1v+0x36>
   b839a:	4628      	mov	r0, r5
   b839c:	f7fc fbff 	bl	b4b9e <__cxa_guard_acquire>
   b83a0:	b168      	cbz	r0, b83be <_Z22__fetch_global_Serial1v+0x36>
   b83a2:	a801      	add	r0, sp, #4
   b83a4:	f7ff ffd6 	bl	b8354 <_Z20acquireSerial1Bufferv>
   b83a8:	aa01      	add	r2, sp, #4
   b83aa:	4621      	mov	r1, r4
   b83ac:	4806      	ldr	r0, [pc, #24]	; (b83c8 <_Z22__fetch_global_Serial1v+0x40>)
   b83ae:	f7ff fb5f 	bl	b7a70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b83b2:	4628      	mov	r0, r5
   b83b4:	f7fc fbf8 	bl	b4ba8 <__cxa_guard_release>
   b83b8:	4804      	ldr	r0, [pc, #16]	; (b83cc <_Z22__fetch_global_Serial1v+0x44>)
   b83ba:	f000 fd01 	bl	b8dc0 <atexit>
    return serial1;
}
   b83be:	4802      	ldr	r0, [pc, #8]	; (b83c8 <_Z22__fetch_global_Serial1v+0x40>)
   b83c0:	b007      	add	sp, #28
   b83c2:	bd30      	pop	{r4, r5, pc}
   b83c4:	2003e72c 	.word	0x2003e72c
   b83c8:	2003e730 	.word	0x2003e730
   b83cc:	000b8353 	.word	0x000b8353

000b83d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b83d0:	4770      	bx	lr
	...

000b83d4 <_Z17acquireWireBufferv>:
{
   b83d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b83d6:	2520      	movs	r5, #32
   b83d8:	2314      	movs	r3, #20
{
   b83da:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b83dc:	6003      	str	r3, [r0, #0]
   b83de:	6085      	str	r5, [r0, #8]
   b83e0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b83e2:	4906      	ldr	r1, [pc, #24]	; (b83fc <_Z17acquireWireBufferv+0x28>)
   b83e4:	4628      	mov	r0, r5
   b83e6:	f000 f82f 	bl	b8448 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b83ea:	4904      	ldr	r1, [pc, #16]	; (b83fc <_Z17acquireWireBufferv+0x28>)
	};
   b83ec:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b83ee:	4628      	mov	r0, r5
   b83f0:	f000 f82a 	bl	b8448 <_ZnajRKSt9nothrow_t>
	};
   b83f4:	60e0      	str	r0, [r4, #12]
}
   b83f6:	4620      	mov	r0, r4
   b83f8:	bd38      	pop	{r3, r4, r5, pc}
   b83fa:	bf00      	nop
   b83fc:	000bb338 	.word	0x000bb338

000b8400 <_Z19__fetch_global_Wirev>:
{
   b8400:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8402:	4d0e      	ldr	r5, [pc, #56]	; (b843c <_Z19__fetch_global_Wirev+0x3c>)
   b8404:	7829      	ldrb	r1, [r5, #0]
   b8406:	f3bf 8f5b 	dmb	ish
   b840a:	f011 0401 	ands.w	r4, r1, #1
{
   b840e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8410:	d111      	bne.n	b8436 <_Z19__fetch_global_Wirev+0x36>
   b8412:	4628      	mov	r0, r5
   b8414:	f7fc fbc3 	bl	b4b9e <__cxa_guard_acquire>
   b8418:	b168      	cbz	r0, b8436 <_Z19__fetch_global_Wirev+0x36>
   b841a:	a801      	add	r0, sp, #4
   b841c:	f7ff ffda 	bl	b83d4 <_Z17acquireWireBufferv>
   b8420:	aa01      	add	r2, sp, #4
   b8422:	4621      	mov	r1, r4
   b8424:	4806      	ldr	r0, [pc, #24]	; (b8440 <_Z19__fetch_global_Wirev+0x40>)
   b8426:	f7ff fb77 	bl	b7b18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b842a:	4628      	mov	r0, r5
   b842c:	f7fc fbbc 	bl	b4ba8 <__cxa_guard_release>
   b8430:	4804      	ldr	r0, [pc, #16]	; (b8444 <_Z19__fetch_global_Wirev+0x44>)
   b8432:	f000 fcc5 	bl	b8dc0 <atexit>
	return wire;
}
   b8436:	4802      	ldr	r0, [pc, #8]	; (b8440 <_Z19__fetch_global_Wirev+0x40>)
   b8438:	b007      	add	sp, #28
   b843a:	bd30      	pop	{r4, r5, pc}
   b843c:	2003e748 	.word	0x2003e748
   b8440:	2003e74c 	.word	0x2003e74c
   b8444:	000b83d1 	.word	0x000b83d1

000b8448 <_ZnajRKSt9nothrow_t>:
   b8448:	f7fc bba1 	b.w	b4b8e <_Znaj>

000b844c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b844c:	68c3      	ldr	r3, [r0, #12]
   b844e:	689a      	ldr	r2, [r3, #8]
   b8450:	60c2      	str	r2, [r0, #12]
   b8452:	b510      	push	{r4, lr}
   b8454:	b102      	cbz	r2, b8458 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b8456:	6050      	str	r0, [r2, #4]
   b8458:	6842      	ldr	r2, [r0, #4]
   b845a:	605a      	str	r2, [r3, #4]
   b845c:	680c      	ldr	r4, [r1, #0]
   b845e:	4284      	cmp	r4, r0
   b8460:	d103      	bne.n	b846a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b8462:	600b      	str	r3, [r1, #0]
   b8464:	6098      	str	r0, [r3, #8]
   b8466:	6043      	str	r3, [r0, #4]
   b8468:	bd10      	pop	{r4, pc}
   b846a:	6891      	ldr	r1, [r2, #8]
   b846c:	4281      	cmp	r1, r0
   b846e:	bf0c      	ite	eq
   b8470:	6093      	streq	r3, [r2, #8]
   b8472:	60d3      	strne	r3, [r2, #12]
   b8474:	e7f6      	b.n	b8464 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b8476 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b8476:	6883      	ldr	r3, [r0, #8]
   b8478:	68da      	ldr	r2, [r3, #12]
   b847a:	6082      	str	r2, [r0, #8]
   b847c:	b510      	push	{r4, lr}
   b847e:	b102      	cbz	r2, b8482 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b8480:	6050      	str	r0, [r2, #4]
   b8482:	6842      	ldr	r2, [r0, #4]
   b8484:	605a      	str	r2, [r3, #4]
   b8486:	680c      	ldr	r4, [r1, #0]
   b8488:	4284      	cmp	r4, r0
   b848a:	d103      	bne.n	b8494 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b848c:	600b      	str	r3, [r1, #0]
   b848e:	60d8      	str	r0, [r3, #12]
   b8490:	6043      	str	r3, [r0, #4]
   b8492:	bd10      	pop	{r4, pc}
   b8494:	68d1      	ldr	r1, [r2, #12]
   b8496:	4281      	cmp	r1, r0
   b8498:	bf0c      	ite	eq
   b849a:	60d3      	streq	r3, [r2, #12]
   b849c:	6093      	strne	r3, [r2, #8]
   b849e:	e7f6      	b.n	b848e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b84a0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b84a0:	68c3      	ldr	r3, [r0, #12]
   b84a2:	b123      	cbz	r3, b84ae <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b84a4:	4618      	mov	r0, r3
   b84a6:	689b      	ldr	r3, [r3, #8]
   b84a8:	2b00      	cmp	r3, #0
   b84aa:	d1fb      	bne.n	b84a4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b84ac:	4770      	bx	lr
   b84ae:	6843      	ldr	r3, [r0, #4]
   b84b0:	68da      	ldr	r2, [r3, #12]
   b84b2:	4282      	cmp	r2, r0
   b84b4:	d102      	bne.n	b84bc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b84b6:	4618      	mov	r0, r3
   b84b8:	685b      	ldr	r3, [r3, #4]
   b84ba:	e7f9      	b.n	b84b0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b84bc:	68c2      	ldr	r2, [r0, #12]
   b84be:	4293      	cmp	r3, r2
   b84c0:	bf18      	it	ne
   b84c2:	4618      	movne	r0, r3
   b84c4:	4770      	bx	lr

000b84c6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b84c6:	7803      	ldrb	r3, [r0, #0]
   b84c8:	b933      	cbnz	r3, b84d8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b84ca:	6843      	ldr	r3, [r0, #4]
   b84cc:	685b      	ldr	r3, [r3, #4]
   b84ce:	4283      	cmp	r3, r0
   b84d0:	d102      	bne.n	b84d8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b84d2:	68db      	ldr	r3, [r3, #12]
   b84d4:	4618      	mov	r0, r3
   b84d6:	4770      	bx	lr
   b84d8:	6882      	ldr	r2, [r0, #8]
   b84da:	b122      	cbz	r2, b84e6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b84dc:	4613      	mov	r3, r2
   b84de:	68d2      	ldr	r2, [r2, #12]
   b84e0:	2a00      	cmp	r2, #0
   b84e2:	d1fb      	bne.n	b84dc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b84e4:	e7f6      	b.n	b84d4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b84e6:	6843      	ldr	r3, [r0, #4]
   b84e8:	689a      	ldr	r2, [r3, #8]
   b84ea:	4282      	cmp	r2, r0
   b84ec:	d1f2      	bne.n	b84d4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b84ee:	4618      	mov	r0, r3
   b84f0:	685b      	ldr	r3, [r3, #4]
   b84f2:	e7f9      	b.n	b84e8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b84f4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b84f4:	f7ff bfd4 	b.w	b84a0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b84f8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b84f8:	f7ff bfe5 	b.w	b84c6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b84fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b84fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8500:	461e      	mov	r6, r3
   b8502:	f103 0804 	add.w	r8, r3, #4
   b8506:	2300      	movs	r3, #0
   b8508:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b850c:	460c      	mov	r4, r1
   b850e:	604a      	str	r2, [r1, #4]
   b8510:	700b      	strb	r3, [r1, #0]
   b8512:	b300      	cbz	r0, b8556 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b8514:	4296      	cmp	r6, r2
   b8516:	6091      	str	r1, [r2, #8]
   b8518:	d118      	bne.n	b854c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b851a:	6071      	str	r1, [r6, #4]
   b851c:	60f4      	str	r4, [r6, #12]
   b851e:	2701      	movs	r7, #1
   b8520:	f04f 0900 	mov.w	r9, #0
   b8524:	6873      	ldr	r3, [r6, #4]
   b8526:	42a3      	cmp	r3, r4
   b8528:	d03f      	beq.n	b85aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b852a:	6860      	ldr	r0, [r4, #4]
   b852c:	7802      	ldrb	r2, [r0, #0]
   b852e:	2a00      	cmp	r2, #0
   b8530:	d13b      	bne.n	b85aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8532:	6845      	ldr	r5, [r0, #4]
   b8534:	68ab      	ldr	r3, [r5, #8]
   b8536:	4298      	cmp	r0, r3
   b8538:	d123      	bne.n	b8582 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b853a:	68eb      	ldr	r3, [r5, #12]
   b853c:	b183      	cbz	r3, b8560 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b853e:	781a      	ldrb	r2, [r3, #0]
   b8540:	b972      	cbnz	r2, b8560 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8542:	7007      	strb	r7, [r0, #0]
   b8544:	701f      	strb	r7, [r3, #0]
   b8546:	702a      	strb	r2, [r5, #0]
   b8548:	462c      	mov	r4, r5
   b854a:	e7eb      	b.n	b8524 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b854c:	68b3      	ldr	r3, [r6, #8]
   b854e:	4293      	cmp	r3, r2
   b8550:	d1e5      	bne.n	b851e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8552:	60b1      	str	r1, [r6, #8]
   b8554:	e7e3      	b.n	b851e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8556:	60d1      	str	r1, [r2, #12]
   b8558:	68f3      	ldr	r3, [r6, #12]
   b855a:	4293      	cmp	r3, r2
   b855c:	d1df      	bne.n	b851e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b855e:	e7dd      	b.n	b851c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b8560:	68c3      	ldr	r3, [r0, #12]
   b8562:	42a3      	cmp	r3, r4
   b8564:	d103      	bne.n	b856e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b8566:	4641      	mov	r1, r8
   b8568:	f7ff ff70 	bl	b844c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b856c:	4604      	mov	r4, r0
   b856e:	6863      	ldr	r3, [r4, #4]
   b8570:	4641      	mov	r1, r8
   b8572:	701f      	strb	r7, [r3, #0]
   b8574:	4628      	mov	r0, r5
   b8576:	f885 9000 	strb.w	r9, [r5]
   b857a:	f7ff ff7c 	bl	b8476 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b857e:	4625      	mov	r5, r4
   b8580:	e7e2      	b.n	b8548 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b8582:	b113      	cbz	r3, b858a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b8584:	781a      	ldrb	r2, [r3, #0]
   b8586:	2a00      	cmp	r2, #0
   b8588:	d0db      	beq.n	b8542 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b858a:	6883      	ldr	r3, [r0, #8]
   b858c:	42a3      	cmp	r3, r4
   b858e:	d103      	bne.n	b8598 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b8590:	4641      	mov	r1, r8
   b8592:	f7ff ff70 	bl	b8476 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8596:	4604      	mov	r4, r0
   b8598:	6863      	ldr	r3, [r4, #4]
   b859a:	4641      	mov	r1, r8
   b859c:	701f      	strb	r7, [r3, #0]
   b859e:	4628      	mov	r0, r5
   b85a0:	f885 9000 	strb.w	r9, [r5]
   b85a4:	f7ff ff52 	bl	b844c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b85a8:	e7e9      	b.n	b857e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b85aa:	2201      	movs	r2, #1
   b85ac:	701a      	strb	r2, [r3, #0]
   b85ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b85b2 <_ZSt17__throw_bad_allocv>:
   b85b2:	b508      	push	{r3, lr}
   b85b4:	f7fe f98a 	bl	b68cc <abort>

000b85b8 <_ZSt19__throw_logic_errorPKc>:
   b85b8:	b508      	push	{r3, lr}
   b85ba:	f7fe f987 	bl	b68cc <abort>

000b85be <_ZSt24__throw_invalid_argumentPKc>:
   b85be:	b508      	push	{r3, lr}
   b85c0:	f7fe f984 	bl	b68cc <abort>

000b85c4 <_ZSt20__throw_length_errorPKc>:
   b85c4:	b508      	push	{r3, lr}
   b85c6:	f7fe f981 	bl	b68cc <abort>

000b85ca <_ZSt20__throw_out_of_rangePKc>:
   b85ca:	b508      	push	{r3, lr}
   b85cc:	f7fe f97e 	bl	b68cc <abort>

000b85d0 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b85d0:	b40f      	push	{r0, r1, r2, r3}
   b85d2:	b580      	push	{r7, lr}
   b85d4:	b084      	sub	sp, #16
   b85d6:	af00      	add	r7, sp, #0
   b85d8:	f107 0418 	add.w	r4, r7, #24
   b85dc:	f854 2b04 	ldr.w	r2, [r4], #4
   b85e0:	607a      	str	r2, [r7, #4]
   b85e2:	4610      	mov	r0, r2
   b85e4:	f7fc fa76 	bl	b4ad4 <strlen>
   b85e8:	f200 2307 	addw	r3, r0, #519	; 0x207
   b85ec:	f023 0307 	bic.w	r3, r3, #7
   b85f0:	ebad 0d03 	sub.w	sp, sp, r3
   b85f4:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b85f8:	687a      	ldr	r2, [r7, #4]
   b85fa:	60fc      	str	r4, [r7, #12]
   b85fc:	4623      	mov	r3, r4
   b85fe:	4668      	mov	r0, sp
   b8600:	f000 f85e 	bl	b86c0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b8604:	f7fe f962 	bl	b68cc <abort>

000b8608 <_ZSt25__throw_bad_function_callv>:
   b8608:	b508      	push	{r3, lr}
   b860a:	f7fe f95f 	bl	b68cc <abort>
	...

000b8610 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8610:	4901      	ldr	r1, [pc, #4]	; (b8618 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8612:	f000 bb99 	b.w	b8d48 <_ZNKSt9type_infoeqERKS_>
   b8616:	bf00      	nop
   b8618:	000bb354 	.word	0x000bb354

000b861c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b861c:	b580      	push	{r7, lr}
   b861e:	b09c      	sub	sp, #112	; 0x70
   b8620:	4606      	mov	r6, r0
   b8622:	af00      	add	r7, sp, #0
   b8624:	460c      	mov	r4, r1
   b8626:	1ba4      	subs	r4, r4, r6
   b8628:	490e      	ldr	r1, [pc, #56]	; (b8664 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b862a:	2269      	movs	r2, #105	; 0x69
   b862c:	1d38      	adds	r0, r7, #4
   b862e:	f000 fbf1 	bl	b8e14 <memcpy>
   b8632:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b8636:	f023 0307 	bic.w	r3, r3, #7
   b863a:	ebad 0d03 	sub.w	sp, sp, r3
   b863e:	466d      	mov	r5, sp
   b8640:	2268      	movs	r2, #104	; 0x68
   b8642:	1d39      	adds	r1, r7, #4
   b8644:	4628      	mov	r0, r5
   b8646:	f000 fbe5 	bl	b8e14 <memcpy>
   b864a:	4622      	mov	r2, r4
   b864c:	4631      	mov	r1, r6
   b864e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b8652:	442c      	add	r4, r5
   b8654:	f000 fbde 	bl	b8e14 <memcpy>
   b8658:	2300      	movs	r3, #0
   b865a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b865e:	4628      	mov	r0, r5
   b8660:	f7ff ffaa 	bl	b85b8 <_ZSt19__throw_logic_errorPKc>
   b8664:	000bb35c 	.word	0x000bb35c

000b8668 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b8668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b866c:	af00      	add	r7, sp, #0
   b866e:	b084      	sub	sp, #16
   b8670:	466d      	mov	r5, sp
   b8672:	f105 040c 	add.w	r4, r5, #12
   b8676:	f8df 8044 	ldr.w	r8, [pc, #68]	; b86bc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b867a:	4623      	mov	r3, r4
   b867c:	f04f 0c0a 	mov.w	ip, #10
   b8680:	fbb2 f6fc 	udiv	r6, r2, ip
   b8684:	fb0c 2e16 	mls	lr, ip, r6, r2
   b8688:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b868c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b8690:	4696      	mov	lr, r2
   b8692:	f1be 0f09 	cmp.w	lr, #9
   b8696:	4632      	mov	r2, r6
   b8698:	d8f2      	bhi.n	b8680 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b869a:	1ae4      	subs	r4, r4, r3
   b869c:	428c      	cmp	r4, r1
   b869e:	d809      	bhi.n	b86b4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b86a0:	f1c4 030c 	rsb	r3, r4, #12
   b86a4:	4622      	mov	r2, r4
   b86a6:	18e9      	adds	r1, r5, r3
   b86a8:	f000 fbb4 	bl	b8e14 <memcpy>
   b86ac:	4620      	mov	r0, r4
   b86ae:	46bd      	mov	sp, r7
   b86b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b86b4:	f04f 34ff 	mov.w	r4, #4294967295
   b86b8:	e7f8      	b.n	b86ac <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b86ba:	bf00      	nop
   b86bc:	000bb3c5 	.word	0x000bb3c5

000b86c0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b86c0:	3901      	subs	r1, #1
   b86c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b86c6:	4607      	mov	r7, r0
   b86c8:	4615      	mov	r5, r2
   b86ca:	eb00 0801 	add.w	r8, r0, r1
   b86ce:	4604      	mov	r4, r0
   b86d0:	782a      	ldrb	r2, [r5, #0]
   b86d2:	b392      	cbz	r2, b873a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b86d4:	4544      	cmp	r4, r8
   b86d6:	d22a      	bcs.n	b872e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b86d8:	2a25      	cmp	r2, #37	; 0x25
   b86da:	d107      	bne.n	b86ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b86dc:	786a      	ldrb	r2, [r5, #1]
   b86de:	2a73      	cmp	r2, #115	; 0x73
   b86e0:	d009      	beq.n	b86f6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b86e2:	2a7a      	cmp	r2, #122	; 0x7a
   b86e4:	d012      	beq.n	b870c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b86e6:	2a25      	cmp	r2, #37	; 0x25
   b86e8:	d100      	bne.n	b86ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b86ea:	3501      	adds	r5, #1
   b86ec:	f815 2b01 	ldrb.w	r2, [r5], #1
   b86f0:	f804 2b01 	strb.w	r2, [r4], #1
   b86f4:	e7ec      	b.n	b86d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b86f6:	f853 2b04 	ldr.w	r2, [r3], #4
   b86fa:	3a01      	subs	r2, #1
   b86fc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b8700:	b1c9      	cbz	r1, b8736 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b8702:	4544      	cmp	r4, r8
   b8704:	d013      	beq.n	b872e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8706:	f804 1b01 	strb.w	r1, [r4], #1
   b870a:	e7f7      	b.n	b86fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b870c:	78aa      	ldrb	r2, [r5, #2]
   b870e:	2a75      	cmp	r2, #117	; 0x75
   b8710:	d1ec      	bne.n	b86ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8712:	461e      	mov	r6, r3
   b8714:	eba8 0104 	sub.w	r1, r8, r4
   b8718:	f856 2b04 	ldr.w	r2, [r6], #4
   b871c:	4620      	mov	r0, r4
   b871e:	f7ff ffa3 	bl	b8668 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b8722:	2800      	cmp	r0, #0
   b8724:	dd03      	ble.n	b872e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8726:	4404      	add	r4, r0
   b8728:	3503      	adds	r5, #3
   b872a:	4633      	mov	r3, r6
   b872c:	e7d0      	b.n	b86d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b872e:	4621      	mov	r1, r4
   b8730:	4638      	mov	r0, r7
   b8732:	f7ff ff73 	bl	b861c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b8736:	3502      	adds	r5, #2
   b8738:	e7ca      	b.n	b86d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b873a:	7022      	strb	r2, [r4, #0]
   b873c:	1be0      	subs	r0, r4, r7
   b873e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8742 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b8742:	b10a      	cbz	r2, b8748 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b8744:	f000 bb66 	b.w	b8e14 <memcpy>
   b8748:	4770      	bx	lr

000b874a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b874a:	b10a      	cbz	r2, b8750 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b874c:	f000 bb52 	b.w	b8df4 <memcmp>
   b8750:	4610      	mov	r0, r2
   b8752:	4770      	bx	lr

000b8754 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b8754:	4613      	mov	r3, r2
   b8756:	460a      	mov	r2, r1
   b8758:	b111      	cbz	r1, b8760 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b875a:	7819      	ldrb	r1, [r3, #0]
   b875c:	f7fc b960 	b.w	b4a20 <memchr>
   b8760:	4608      	mov	r0, r1
   b8762:	4770      	bx	lr

000b8764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b8764:	b508      	push	{r3, lr}
   b8766:	680b      	ldr	r3, [r1, #0]
   b8768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b876c:	d302      	bcc.n	b8774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b876e:	480d      	ldr	r0, [pc, #52]	; (b87a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b8770:	f7ff ff28 	bl	b85c4 <_ZSt20__throw_length_errorPKc>
   b8774:	4293      	cmp	r3, r2
   b8776:	d90b      	bls.n	b8790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8778:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b877c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b8780:	d206      	bcs.n	b8790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8782:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b8786:	bf2a      	itet	cs
   b8788:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b878c:	6008      	strcc	r0, [r1, #0]
   b878e:	600b      	strcs	r3, [r1, #0]
   b8790:	6808      	ldr	r0, [r1, #0]
   b8792:	3001      	adds	r0, #1
   b8794:	d501      	bpl.n	b879a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b8796:	f7ff ff0c 	bl	b85b2 <_ZSt17__throw_bad_allocv>
   b879a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b879e:	f7fc b9f4 	b.w	b4b8a <_Znwj>
   b87a2:	bf00      	nop
   b87a4:	000bb3d0 	.word	0x000bb3d0

000b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b87a8:	f850 3b08 	ldr.w	r3, [r0], #8
   b87ac:	4283      	cmp	r3, r0
   b87ae:	d002      	beq.n	b87b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b87b0:	4618      	mov	r0, r3
   b87b2:	f7fc b9ee 	b.w	b4b92 <_ZdlPv>
   b87b6:	4770      	bx	lr

000b87b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b87b8:	b508      	push	{r3, lr}
   b87ba:	4603      	mov	r3, r0
   b87bc:	4608      	mov	r0, r1
   b87be:	685b      	ldr	r3, [r3, #4]
   b87c0:	4298      	cmp	r0, r3
   b87c2:	4611      	mov	r1, r2
   b87c4:	d903      	bls.n	b87ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b87c6:	4602      	mov	r2, r0
   b87c8:	4801      	ldr	r0, [pc, #4]	; (b87d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b87ca:	f7ff ff01 	bl	b85d0 <_ZSt24__throw_out_of_range_fmtPKcz>
   b87ce:	bd08      	pop	{r3, pc}
   b87d0:	000bb3e8 	.word	0x000bb3e8

000b87d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   b87d4:	6840      	ldr	r0, [r0, #4]
   b87d6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   b87da:	3901      	subs	r1, #1
   b87dc:	1a09      	subs	r1, r1, r0
   b87de:	4291      	cmp	r1, r2
   b87e0:	b508      	push	{r3, lr}
   b87e2:	d202      	bcs.n	b87ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   b87e4:	4618      	mov	r0, r3
   b87e6:	f7ff feed 	bl	b85c4 <_ZSt20__throw_length_errorPKc>
   b87ea:	bd08      	pop	{r3, pc}

000b87ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   b87ec:	6803      	ldr	r3, [r0, #0]
   b87ee:	428b      	cmp	r3, r1
   b87f0:	d806      	bhi.n	b8800 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   b87f2:	6840      	ldr	r0, [r0, #4]
   b87f4:	4418      	add	r0, r3
   b87f6:	4281      	cmp	r1, r0
   b87f8:	bf94      	ite	ls
   b87fa:	2000      	movls	r0, #0
   b87fc:	2001      	movhi	r0, #1
   b87fe:	4770      	bx	lr
   b8800:	2001      	movs	r0, #1
   b8802:	4770      	bx	lr

000b8804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b8804:	2a01      	cmp	r2, #1
   b8806:	b410      	push	{r4}
   b8808:	d104      	bne.n	b8814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b880a:	780a      	ldrb	r2, [r1, #0]
   b880c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8810:	7002      	strb	r2, [r0, #0]
   b8812:	4770      	bx	lr
   b8814:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8818:	f7ff bf93 	b.w	b8742 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b881c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b881c:	2a01      	cmp	r2, #1
   b881e:	b430      	push	{r4, r5}
   b8820:	d103      	bne.n	b882a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b8822:	780b      	ldrb	r3, [r1, #0]
   b8824:	7003      	strb	r3, [r0, #0]
   b8826:	bc30      	pop	{r4, r5}
   b8828:	4770      	bx	lr
   b882a:	2a00      	cmp	r2, #0
   b882c:	d0fb      	beq.n	b8826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b882e:	bc30      	pop	{r4, r5}
   b8830:	f000 bafe 	b.w	b8e30 <memmove>

000b8834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b8834:	b508      	push	{r3, lr}
   b8836:	1a52      	subs	r2, r2, r1
   b8838:	f7ff ffe4 	bl	b8804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b883c:	bd08      	pop	{r3, pc}

000b883e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b883e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8842:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b8844:	461f      	mov	r7, r3
   b8846:	6843      	ldr	r3, [r0, #4]
   b8848:	eb01 0802 	add.w	r8, r1, r2
   b884c:	1ab2      	subs	r2, r6, r2
   b884e:	441a      	add	r2, r3
   b8850:	eba3 0908 	sub.w	r9, r3, r8
   b8854:	4603      	mov	r3, r0
   b8856:	9201      	str	r2, [sp, #4]
   b8858:	f853 2b08 	ldr.w	r2, [r3], #8
   b885c:	429a      	cmp	r2, r3
   b885e:	bf18      	it	ne
   b8860:	6882      	ldrne	r2, [r0, #8]
   b8862:	460d      	mov	r5, r1
   b8864:	bf08      	it	eq
   b8866:	220f      	moveq	r2, #15
   b8868:	a901      	add	r1, sp, #4
   b886a:	4604      	mov	r4, r0
   b886c:	f7ff ff7a 	bl	b8764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b8870:	4682      	mov	sl, r0
   b8872:	b11d      	cbz	r5, b887c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b8874:	6821      	ldr	r1, [r4, #0]
   b8876:	462a      	mov	r2, r5
   b8878:	f7ff ffc4 	bl	b8804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b887c:	b137      	cbz	r7, b888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b887e:	b12e      	cbz	r6, b888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b8880:	4632      	mov	r2, r6
   b8882:	4639      	mov	r1, r7
   b8884:	eb0a 0005 	add.w	r0, sl, r5
   b8888:	f7ff ffbc 	bl	b8804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b888c:	f1b9 0f00 	cmp.w	r9, #0
   b8890:	d007      	beq.n	b88a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b8892:	6821      	ldr	r1, [r4, #0]
   b8894:	4435      	add	r5, r6
   b8896:	464a      	mov	r2, r9
   b8898:	4441      	add	r1, r8
   b889a:	eb0a 0005 	add.w	r0, sl, r5
   b889e:	f7ff ffb1 	bl	b8804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b88a2:	4620      	mov	r0, r4
   b88a4:	f7ff ff80 	bl	b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b88a8:	9b01      	ldr	r3, [sp, #4]
   b88aa:	f8c4 a000 	str.w	sl, [r4]
   b88ae:	60a3      	str	r3, [r4, #8]
   b88b0:	b002      	add	sp, #8
   b88b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b88b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
   b88b6:	b538      	push	{r3, r4, r5, lr}
   b88b8:	4604      	mov	r4, r0
   b88ba:	4615      	mov	r5, r2
   b88bc:	4608      	mov	r0, r1
   b88be:	4411      	add	r1, r2
   b88c0:	6862      	ldr	r2, [r4, #4]
   b88c2:	1a52      	subs	r2, r2, r1
   b88c4:	d005      	beq.n	b88d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b88c6:	b125      	cbz	r5, b88d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b88c8:	6823      	ldr	r3, [r4, #0]
   b88ca:	4419      	add	r1, r3
   b88cc:	4418      	add	r0, r3
   b88ce:	f7ff ffa5 	bl	b881c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b88d2:	6862      	ldr	r2, [r4, #4]
   b88d4:	6823      	ldr	r3, [r4, #0]
   b88d6:	1b55      	subs	r5, r2, r5
   b88d8:	2200      	movs	r2, #0
   b88da:	6065      	str	r5, [r4, #4]
   b88dc:	555a      	strb	r2, [r3, r5]
   b88de:	bd38      	pop	{r3, r4, r5, pc}

000b88e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   b88e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b88e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b88e6:	4614      	mov	r4, r2
   b88e8:	4680      	mov	r8, r0
   b88ea:	462a      	mov	r2, r5
   b88ec:	4689      	mov	r9, r1
   b88ee:	461f      	mov	r7, r3
   b88f0:	4621      	mov	r1, r4
   b88f2:	4b39      	ldr	r3, [pc, #228]	; (b89d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   b88f4:	f7ff ff6e 	bl	b87d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   b88f8:	4642      	mov	r2, r8
   b88fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b88fe:	f852 6b08 	ldr.w	r6, [r2], #8
   b8902:	4296      	cmp	r6, r2
   b8904:	bf18      	it	ne
   b8906:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   b890a:	eba5 0b04 	sub.w	fp, r5, r4
   b890e:	eb03 0a0b 	add.w	sl, r3, fp
   b8912:	bf08      	it	eq
   b8914:	220f      	moveq	r2, #15
   b8916:	4552      	cmp	r2, sl
   b8918:	d351      	bcc.n	b89be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   b891a:	444e      	add	r6, r9
   b891c:	4639      	mov	r1, r7
   b891e:	44a1      	add	r9, r4
   b8920:	4640      	mov	r0, r8
   b8922:	eba3 0909 	sub.w	r9, r3, r9
   b8926:	f7ff ff61 	bl	b87ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   b892a:	b180      	cbz	r0, b894e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   b892c:	f1b9 0f00 	cmp.w	r9, #0
   b8930:	d006      	beq.n	b8940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8932:	42ac      	cmp	r4, r5
   b8934:	d004      	beq.n	b8940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8936:	464a      	mov	r2, r9
   b8938:	1931      	adds	r1, r6, r4
   b893a:	1970      	adds	r0, r6, r5
   b893c:	f7ff ff6e 	bl	b881c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8940:	b315      	cbz	r5, b8988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8942:	462a      	mov	r2, r5
   b8944:	4639      	mov	r1, r7
   b8946:	4630      	mov	r0, r6
   b8948:	f7ff ff5c 	bl	b8804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b894c:	e01c      	b.n	b8988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b894e:	b135      	cbz	r5, b895e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   b8950:	42ac      	cmp	r4, r5
   b8952:	d33c      	bcc.n	b89ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   b8954:	462a      	mov	r2, r5
   b8956:	4639      	mov	r1, r7
   b8958:	4630      	mov	r0, r6
   b895a:	f7ff ff5f 	bl	b881c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b895e:	f1b9 0f00 	cmp.w	r9, #0
   b8962:	d011      	beq.n	b8988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8964:	42ac      	cmp	r4, r5
   b8966:	d00f      	beq.n	b8988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8968:	464a      	mov	r2, r9
   b896a:	1931      	adds	r1, r6, r4
   b896c:	1970      	adds	r0, r6, r5
   b896e:	f7ff ff55 	bl	b881c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8972:	42ac      	cmp	r4, r5
   b8974:	d208      	bcs.n	b8988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8976:	4434      	add	r4, r6
   b8978:	197b      	adds	r3, r7, r5
   b897a:	429c      	cmp	r4, r3
   b897c:	d30f      	bcc.n	b899e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   b897e:	462a      	mov	r2, r5
   b8980:	4639      	mov	r1, r7
   b8982:	4630      	mov	r0, r6
   b8984:	f7ff ff4a 	bl	b881c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8988:	f8d8 3000 	ldr.w	r3, [r8]
   b898c:	f8c8 a004 	str.w	sl, [r8, #4]
   b8990:	2200      	movs	r2, #0
   b8992:	4640      	mov	r0, r8
   b8994:	f803 200a 	strb.w	r2, [r3, sl]
   b8998:	b003      	add	sp, #12
   b899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b899e:	42bc      	cmp	r4, r7
   b89a0:	d803      	bhi.n	b89aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   b89a2:	462a      	mov	r2, r5
   b89a4:	eb07 010b 	add.w	r1, r7, fp
   b89a8:	e7cd      	b.n	b8946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   b89aa:	1be4      	subs	r4, r4, r7
   b89ac:	4622      	mov	r2, r4
   b89ae:	4639      	mov	r1, r7
   b89b0:	4630      	mov	r0, r6
   b89b2:	f7ff ff33 	bl	b881c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b89b6:	1b2a      	subs	r2, r5, r4
   b89b8:	1971      	adds	r1, r6, r5
   b89ba:	1930      	adds	r0, r6, r4
   b89bc:	e7c4      	b.n	b8948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   b89be:	9500      	str	r5, [sp, #0]
   b89c0:	463b      	mov	r3, r7
   b89c2:	4622      	mov	r2, r4
   b89c4:	4649      	mov	r1, r9
   b89c6:	4640      	mov	r0, r8
   b89c8:	f7ff ff39 	bl	b883e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b89cc:	e7dc      	b.n	b8988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b89ce:	f1b9 0f00 	cmp.w	r9, #0
   b89d2:	d0d0      	beq.n	b8976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   b89d4:	e7c8      	b.n	b8968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   b89d6:	bf00      	nop
   b89d8:	000bb41f 	.word	0x000bb41f

000b89dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
   b89dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b89de:	4604      	mov	r4, r0
   b89e0:	4623      	mov	r3, r4
   b89e2:	6840      	ldr	r0, [r0, #4]
   b89e4:	f853 6b08 	ldr.w	r6, [r3], #8
   b89e8:	429e      	cmp	r6, r3
   b89ea:	bf18      	it	ne
   b89ec:	68a3      	ldrne	r3, [r4, #8]
   b89ee:	eb00 0502 	add.w	r5, r0, r2
   b89f2:	bf08      	it	eq
   b89f4:	230f      	moveq	r3, #15
   b89f6:	429d      	cmp	r5, r3
   b89f8:	d80a      	bhi.n	b8a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
   b89fa:	b112      	cbz	r2, b8a02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
   b89fc:	4430      	add	r0, r6
   b89fe:	f7ff ff01 	bl	b8804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8a02:	6823      	ldr	r3, [r4, #0]
   b8a04:	6065      	str	r5, [r4, #4]
   b8a06:	2200      	movs	r2, #0
   b8a08:	4620      	mov	r0, r4
   b8a0a:	555a      	strb	r2, [r3, r5]
   b8a0c:	b002      	add	sp, #8
   b8a0e:	bd70      	pop	{r4, r5, r6, pc}
   b8a10:	9200      	str	r2, [sp, #0]
   b8a12:	460b      	mov	r3, r1
   b8a14:	2200      	movs	r2, #0
   b8a16:	4601      	mov	r1, r0
   b8a18:	4620      	mov	r0, r4
   b8a1a:	f7ff ff10 	bl	b883e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b8a1e:	e7f0      	b.n	b8a02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

000b8a20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b8a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8a24:	460e      	mov	r6, r1
   b8a26:	461d      	mov	r5, r3
   b8a28:	6841      	ldr	r1, [r0, #4]
   b8a2a:	b923      	cbnz	r3, b8a36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b8a2c:	4291      	cmp	r1, r2
   b8a2e:	d221      	bcs.n	b8a74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b8a30:	f04f 32ff 	mov.w	r2, #4294967295
   b8a34:	e01e      	b.n	b8a74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b8a36:	4291      	cmp	r1, r2
   b8a38:	d9fa      	bls.n	b8a30 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8a3a:	f8d0 8000 	ldr.w	r8, [r0]
   b8a3e:	7833      	ldrb	r3, [r6, #0]
   b8a40:	f88d 3007 	strb.w	r3, [sp, #7]
   b8a44:	eb08 0701 	add.w	r7, r8, r1
   b8a48:	eb08 0002 	add.w	r0, r8, r2
   b8a4c:	1a89      	subs	r1, r1, r2
   b8a4e:	f1c5 0901 	rsb	r9, r5, #1
   b8a52:	42a9      	cmp	r1, r5
   b8a54:	d3ec      	bcc.n	b8a30 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8a56:	f10d 0207 	add.w	r2, sp, #7
   b8a5a:	4449      	add	r1, r9
   b8a5c:	f7ff fe7a 	bl	b8754 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b8a60:	4604      	mov	r4, r0
   b8a62:	2800      	cmp	r0, #0
   b8a64:	d0e4      	beq.n	b8a30 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8a66:	462a      	mov	r2, r5
   b8a68:	4631      	mov	r1, r6
   b8a6a:	f7ff fe6e 	bl	b874a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b8a6e:	b928      	cbnz	r0, b8a7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b8a70:	eba4 0208 	sub.w	r2, r4, r8
   b8a74:	4610      	mov	r0, r2
   b8a76:	b003      	add	sp, #12
   b8a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8a7c:	1c60      	adds	r0, r4, #1
   b8a7e:	1a39      	subs	r1, r7, r0
   b8a80:	e7e7      	b.n	b8a52 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b8a82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b8a82:	b513      	push	{r0, r1, r4, lr}
   b8a84:	4604      	mov	r4, r0
   b8a86:	4608      	mov	r0, r1
   b8a88:	9201      	str	r2, [sp, #4]
   b8a8a:	9100      	str	r1, [sp, #0]
   b8a8c:	f7fc f822 	bl	b4ad4 <strlen>
   b8a90:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8a94:	4603      	mov	r3, r0
   b8a96:	4620      	mov	r0, r4
   b8a98:	f7ff ffc2 	bl	b8a20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b8a9c:	b002      	add	sp, #8
   b8a9e:	bd10      	pop	{r4, pc}

000b8aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   b8aa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8aa2:	4604      	mov	r4, r0
   b8aa4:	4616      	mov	r6, r2
   b8aa6:	460d      	mov	r5, r1
   b8aa8:	b919      	cbnz	r1, b8ab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b8aaa:	b112      	cbz	r2, b8ab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b8aac:	480d      	ldr	r0, [pc, #52]	; (b8ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   b8aae:	f7ff fd83 	bl	b85b8 <_ZSt19__throw_logic_errorPKc>
   b8ab2:	1b73      	subs	r3, r6, r5
   b8ab4:	2b0f      	cmp	r3, #15
   b8ab6:	9301      	str	r3, [sp, #4]
   b8ab8:	d907      	bls.n	b8aca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   b8aba:	2200      	movs	r2, #0
   b8abc:	a901      	add	r1, sp, #4
   b8abe:	4620      	mov	r0, r4
   b8ac0:	f7ff fe50 	bl	b8764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b8ac4:	9b01      	ldr	r3, [sp, #4]
   b8ac6:	6020      	str	r0, [r4, #0]
   b8ac8:	60a3      	str	r3, [r4, #8]
   b8aca:	4632      	mov	r2, r6
   b8acc:	4629      	mov	r1, r5
   b8ace:	6820      	ldr	r0, [r4, #0]
   b8ad0:	f7ff feb0 	bl	b8834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   b8ad4:	9b01      	ldr	r3, [sp, #4]
   b8ad6:	6822      	ldr	r2, [r4, #0]
   b8ad8:	6063      	str	r3, [r4, #4]
   b8ada:	2100      	movs	r1, #0
   b8adc:	54d1      	strb	r1, [r2, r3]
   b8ade:	b002      	add	sp, #8
   b8ae0:	bd70      	pop	{r4, r5, r6, pc}
   b8ae2:	bf00      	nop
   b8ae4:	000bb025 	.word	0x000bb025

000b8ae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   b8ae8:	b508      	push	{r3, lr}
   b8aea:	f04f 0300 	mov.w	r3, #0
   b8aee:	f7ff ffd7 	bl	b8aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   b8af2:	bd08      	pop	{r3, pc}

000b8af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   b8af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8af8:	460d      	mov	r5, r1
   b8afa:	4617      	mov	r7, r2
   b8afc:	4698      	mov	r8, r3
   b8afe:	f100 0308 	add.w	r3, r0, #8
   b8b02:	4604      	mov	r4, r0
   b8b04:	6003      	str	r3, [r0, #0]
   b8b06:	4639      	mov	r1, r7
   b8b08:	4a09      	ldr	r2, [pc, #36]	; (b8b30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   b8b0a:	4628      	mov	r0, r5
   b8b0c:	f7ff fe54 	bl	b87b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b8b10:	682e      	ldr	r6, [r5, #0]
   b8b12:	686a      	ldr	r2, [r5, #4]
   b8b14:	1831      	adds	r1, r6, r0
   b8b16:	1bd2      	subs	r2, r2, r7
   b8b18:	4620      	mov	r0, r4
   b8b1a:	4542      	cmp	r2, r8
   b8b1c:	bf94      	ite	ls
   b8b1e:	188a      	addls	r2, r1, r2
   b8b20:	eb01 0208 	addhi.w	r2, r1, r8
   b8b24:	f7ff ffe0 	bl	b8ae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   b8b28:	4620      	mov	r0, r4
   b8b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8b2e:	bf00      	nop
   b8b30:	000bb438 	.word	0x000bb438

000b8b34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   b8b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b36:	460d      	mov	r5, r1
   b8b38:	4604      	mov	r4, r0
   b8b3a:	4611      	mov	r1, r2
   b8b3c:	4628      	mov	r0, r5
   b8b3e:	4a06      	ldr	r2, [pc, #24]	; (b8b58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   b8b40:	9301      	str	r3, [sp, #4]
   b8b42:	f7ff fe39 	bl	b87b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b8b46:	9b01      	ldr	r3, [sp, #4]
   b8b48:	4602      	mov	r2, r0
   b8b4a:	4629      	mov	r1, r5
   b8b4c:	4620      	mov	r0, r4
   b8b4e:	f7ff ffd1 	bl	b8af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   b8b52:	4620      	mov	r0, r4
   b8b54:	b003      	add	sp, #12
   b8b56:	bd30      	pop	{r4, r5, pc}
   b8b58:	000bb453 	.word	0x000bb453

000b8b5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8b5e:	2400      	movs	r4, #0
   b8b60:	2310      	movs	r3, #16
   b8b62:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8b66:	6803      	ldr	r3, [r0, #0]
   b8b68:	4615      	mov	r5, r2
   b8b6a:	699e      	ldr	r6, [r3, #24]
   b8b6c:	6812      	ldr	r2, [r2, #0]
   b8b6e:	466b      	mov	r3, sp
   b8b70:	e9cd 4400 	strd	r4, r4, [sp]
   b8b74:	47b0      	blx	r6
   b8b76:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8b7a:	f003 0306 	and.w	r3, r3, #6
   b8b7e:	2b06      	cmp	r3, #6
   b8b80:	bf03      	ittte	eq
   b8b82:	9b00      	ldreq	r3, [sp, #0]
   b8b84:	602b      	streq	r3, [r5, #0]
   b8b86:	2001      	moveq	r0, #1
   b8b88:	4620      	movne	r0, r4
   b8b8a:	b004      	add	sp, #16
   b8b8c:	bd70      	pop	{r4, r5, r6, pc}

000b8b8e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8b8e:	9800      	ldr	r0, [sp, #0]
   b8b90:	4290      	cmp	r0, r2
   b8b92:	bf14      	ite	ne
   b8b94:	2001      	movne	r0, #1
   b8b96:	2006      	moveq	r0, #6
   b8b98:	4770      	bx	lr
	...

000b8b9c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8b9c:	b510      	push	{r4, lr}
   b8b9e:	4b03      	ldr	r3, [pc, #12]	; (b8bac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8ba0:	6003      	str	r3, [r0, #0]
   b8ba2:	4604      	mov	r4, r0
   b8ba4:	f000 f8cd 	bl	b8d42 <_ZNSt9type_infoD1Ev>
   b8ba8:	4620      	mov	r0, r4
   b8baa:	bd10      	pop	{r4, pc}
   b8bac:	000bb4a0 	.word	0x000bb4a0

000b8bb0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8bb0:	b510      	push	{r4, lr}
   b8bb2:	4604      	mov	r4, r0
   b8bb4:	f7ff fff2 	bl	b8b9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8bb8:	4620      	mov	r0, r4
   b8bba:	2108      	movs	r1, #8
   b8bbc:	f7fb ffed 	bl	b4b9a <_ZdlPvj>
   b8bc0:	4620      	mov	r0, r4
   b8bc2:	bd10      	pop	{r4, pc}

000b8bc4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8bc8:	461f      	mov	r7, r3
   b8bca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8bce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8bd2:	4598      	cmp	r8, r3
   b8bd4:	4606      	mov	r6, r0
   b8bd6:	4615      	mov	r5, r2
   b8bd8:	d107      	bne.n	b8bea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8bda:	9907      	ldr	r1, [sp, #28]
   b8bdc:	f000 f8b4 	bl	b8d48 <_ZNKSt9type_infoeqERKS_>
   b8be0:	b118      	cbz	r0, b8bea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8be2:	7165      	strb	r5, [r4, #5]
   b8be4:	2000      	movs	r0, #0
   b8be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8bea:	4639      	mov	r1, r7
   b8bec:	4630      	mov	r0, r6
   b8bee:	f000 f8ab 	bl	b8d48 <_ZNKSt9type_infoeqERKS_>
   b8bf2:	2800      	cmp	r0, #0
   b8bf4:	d0f6      	beq.n	b8be4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8bf6:	2301      	movs	r3, #1
   b8bf8:	f8c4 8000 	str.w	r8, [r4]
   b8bfc:	7125      	strb	r5, [r4, #4]
   b8bfe:	71a3      	strb	r3, [r4, #6]
   b8c00:	e7f0      	b.n	b8be4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8c02 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8c02:	b538      	push	{r3, r4, r5, lr}
   b8c04:	4615      	mov	r5, r2
   b8c06:	461c      	mov	r4, r3
   b8c08:	f000 f89e 	bl	b8d48 <_ZNKSt9type_infoeqERKS_>
   b8c0c:	b120      	cbz	r0, b8c18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8c0e:	2308      	movs	r3, #8
   b8c10:	60e3      	str	r3, [r4, #12]
   b8c12:	2306      	movs	r3, #6
   b8c14:	6025      	str	r5, [r4, #0]
   b8c16:	7123      	strb	r3, [r4, #4]
   b8c18:	bd38      	pop	{r3, r4, r5, pc}

000b8c1a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c1c:	4605      	mov	r5, r0
   b8c1e:	460c      	mov	r4, r1
   b8c20:	9201      	str	r2, [sp, #4]
   b8c22:	461e      	mov	r6, r3
   b8c24:	f000 f890 	bl	b8d48 <_ZNKSt9type_infoeqERKS_>
   b8c28:	b950      	cbnz	r0, b8c40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8c2a:	2e03      	cmp	r6, #3
   b8c2c:	d808      	bhi.n	b8c40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8c2e:	6823      	ldr	r3, [r4, #0]
   b8c30:	9a01      	ldr	r2, [sp, #4]
   b8c32:	695b      	ldr	r3, [r3, #20]
   b8c34:	4629      	mov	r1, r5
   b8c36:	4620      	mov	r0, r4
   b8c38:	b002      	add	sp, #8
   b8c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8c3e:	4718      	bx	r3
   b8c40:	b002      	add	sp, #8
   b8c42:	bd70      	pop	{r4, r5, r6, pc}

000b8c44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8c44:	b510      	push	{r4, lr}
   b8c46:	4b03      	ldr	r3, [pc, #12]	; (b8c54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8c48:	6003      	str	r3, [r0, #0]
   b8c4a:	4604      	mov	r4, r0
   b8c4c:	f7ff ffa6 	bl	b8b9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8c50:	4620      	mov	r0, r4
   b8c52:	bd10      	pop	{r4, pc}
   b8c54:	000bb500 	.word	0x000bb500

000b8c58 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8c58:	b510      	push	{r4, lr}
   b8c5a:	4604      	mov	r4, r0
   b8c5c:	f7ff fff2 	bl	b8c44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8c60:	4620      	mov	r0, r4
   b8c62:	210c      	movs	r1, #12
   b8c64:	f7fb ff99 	bl	b4b9a <_ZdlPvj>
   b8c68:	4620      	mov	r0, r4
   b8c6a:	bd10      	pop	{r4, pc}

000b8c6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8c6e:	9f08      	ldr	r7, [sp, #32]
   b8c70:	4297      	cmp	r7, r2
   b8c72:	4605      	mov	r5, r0
   b8c74:	460e      	mov	r6, r1
   b8c76:	4614      	mov	r4, r2
   b8c78:	d00a      	beq.n	b8c90 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8c7a:	68a8      	ldr	r0, [r5, #8]
   b8c7c:	6802      	ldr	r2, [r0, #0]
   b8c7e:	9708      	str	r7, [sp, #32]
   b8c80:	6a15      	ldr	r5, [r2, #32]
   b8c82:	4631      	mov	r1, r6
   b8c84:	4622      	mov	r2, r4
   b8c86:	46ac      	mov	ip, r5
   b8c88:	b003      	add	sp, #12
   b8c8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8c8e:	4760      	bx	ip
   b8c90:	4619      	mov	r1, r3
   b8c92:	9301      	str	r3, [sp, #4]
   b8c94:	f000 f858 	bl	b8d48 <_ZNKSt9type_infoeqERKS_>
   b8c98:	9b01      	ldr	r3, [sp, #4]
   b8c9a:	2800      	cmp	r0, #0
   b8c9c:	d0ed      	beq.n	b8c7a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8c9e:	2006      	movs	r0, #6
   b8ca0:	b003      	add	sp, #12
   b8ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8ca4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8ca4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ca8:	460d      	mov	r5, r1
   b8caa:	4619      	mov	r1, r3
   b8cac:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8cb0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8cb4:	4681      	mov	r9, r0
   b8cb6:	4617      	mov	r7, r2
   b8cb8:	4698      	mov	r8, r3
   b8cba:	f000 f845 	bl	b8d48 <_ZNKSt9type_infoeqERKS_>
   b8cbe:	b190      	cbz	r0, b8ce6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8cc0:	2d00      	cmp	r5, #0
   b8cc2:	6034      	str	r4, [r6, #0]
   b8cc4:	7137      	strb	r7, [r6, #4]
   b8cc6:	db09      	blt.n	b8cdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8cc8:	1961      	adds	r1, r4, r5
   b8cca:	458a      	cmp	sl, r1
   b8ccc:	bf0c      	ite	eq
   b8cce:	2106      	moveq	r1, #6
   b8cd0:	2101      	movne	r1, #1
   b8cd2:	71b1      	strb	r1, [r6, #6]
   b8cd4:	2000      	movs	r0, #0
   b8cd6:	b001      	add	sp, #4
   b8cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8cdc:	3502      	adds	r5, #2
   b8cde:	d1f9      	bne.n	b8cd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8ce0:	2301      	movs	r3, #1
   b8ce2:	71b3      	strb	r3, [r6, #6]
   b8ce4:	e7f6      	b.n	b8cd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8ce6:	4554      	cmp	r4, sl
   b8ce8:	d106      	bne.n	b8cf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8cea:	4659      	mov	r1, fp
   b8cec:	4648      	mov	r0, r9
   b8cee:	f000 f82b 	bl	b8d48 <_ZNKSt9type_infoeqERKS_>
   b8cf2:	b108      	cbz	r0, b8cf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8cf4:	7177      	strb	r7, [r6, #5]
   b8cf6:	e7ed      	b.n	b8cd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8cf8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8cfc:	6803      	ldr	r3, [r0, #0]
   b8cfe:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8d02:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8d06:	69dc      	ldr	r4, [r3, #28]
   b8d08:	463a      	mov	r2, r7
   b8d0a:	4643      	mov	r3, r8
   b8d0c:	4629      	mov	r1, r5
   b8d0e:	46a4      	mov	ip, r4
   b8d10:	b001      	add	sp, #4
   b8d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d16:	4760      	bx	ip

000b8d18 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8d1c:	4607      	mov	r7, r0
   b8d1e:	460c      	mov	r4, r1
   b8d20:	4615      	mov	r5, r2
   b8d22:	461e      	mov	r6, r3
   b8d24:	f7ff ff6d 	bl	b8c02 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8d28:	b948      	cbnz	r0, b8d3e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8d2a:	68b8      	ldr	r0, [r7, #8]
   b8d2c:	6803      	ldr	r3, [r0, #0]
   b8d2e:	699f      	ldr	r7, [r3, #24]
   b8d30:	462a      	mov	r2, r5
   b8d32:	4633      	mov	r3, r6
   b8d34:	4621      	mov	r1, r4
   b8d36:	46bc      	mov	ip, r7
   b8d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8d3c:	4760      	bx	ip
   b8d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8d42 <_ZNSt9type_infoD1Ev>:
   b8d42:	4770      	bx	lr

000b8d44 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8d44:	2000      	movs	r0, #0
   b8d46:	4770      	bx	lr

000b8d48 <_ZNKSt9type_infoeqERKS_>:
   b8d48:	4281      	cmp	r1, r0
   b8d4a:	b508      	push	{r3, lr}
   b8d4c:	d00e      	beq.n	b8d6c <_ZNKSt9type_infoeqERKS_+0x24>
   b8d4e:	6840      	ldr	r0, [r0, #4]
   b8d50:	7803      	ldrb	r3, [r0, #0]
   b8d52:	2b2a      	cmp	r3, #42	; 0x2a
   b8d54:	d00c      	beq.n	b8d70 <_ZNKSt9type_infoeqERKS_+0x28>
   b8d56:	6849      	ldr	r1, [r1, #4]
   b8d58:	780b      	ldrb	r3, [r1, #0]
   b8d5a:	2b2a      	cmp	r3, #42	; 0x2a
   b8d5c:	bf08      	it	eq
   b8d5e:	3101      	addeq	r1, #1
   b8d60:	f7fb feae 	bl	b4ac0 <strcmp>
   b8d64:	fab0 f080 	clz	r0, r0
   b8d68:	0940      	lsrs	r0, r0, #5
   b8d6a:	bd08      	pop	{r3, pc}
   b8d6c:	2001      	movs	r0, #1
   b8d6e:	e7fc      	b.n	b8d6a <_ZNKSt9type_infoeqERKS_+0x22>
   b8d70:	2000      	movs	r0, #0
   b8d72:	e7fa      	b.n	b8d6a <_ZNKSt9type_infoeqERKS_+0x22>

000b8d74 <asctime_r>:
   b8d74:	b510      	push	{r4, lr}
   b8d76:	460c      	mov	r4, r1
   b8d78:	6941      	ldr	r1, [r0, #20]
   b8d7a:	6903      	ldr	r3, [r0, #16]
   b8d7c:	6982      	ldr	r2, [r0, #24]
   b8d7e:	b086      	sub	sp, #24
   b8d80:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b8d84:	9104      	str	r1, [sp, #16]
   b8d86:	6801      	ldr	r1, [r0, #0]
   b8d88:	9103      	str	r1, [sp, #12]
   b8d8a:	6841      	ldr	r1, [r0, #4]
   b8d8c:	9102      	str	r1, [sp, #8]
   b8d8e:	6881      	ldr	r1, [r0, #8]
   b8d90:	9101      	str	r1, [sp, #4]
   b8d92:	68c1      	ldr	r1, [r0, #12]
   b8d94:	9100      	str	r1, [sp, #0]
   b8d96:	4907      	ldr	r1, [pc, #28]	; (b8db4 <asctime_r+0x40>)
   b8d98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8d9c:	440b      	add	r3, r1
   b8d9e:	4906      	ldr	r1, [pc, #24]	; (b8db8 <asctime_r+0x44>)
   b8da0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b8da4:	440a      	add	r2, r1
   b8da6:	4620      	mov	r0, r4
   b8da8:	4904      	ldr	r1, [pc, #16]	; (b8dbc <asctime_r+0x48>)
   b8daa:	f7fd fd7f 	bl	b68ac <siprintf>
   b8dae:	4620      	mov	r0, r4
   b8db0:	b006      	add	sp, #24
   b8db2:	bd10      	pop	{r4, pc}
   b8db4:	000bb56e 	.word	0x000bb56e
   b8db8:	000bb559 	.word	0x000bb559
   b8dbc:	000bb539 	.word	0x000bb539

000b8dc0 <atexit>:
   b8dc0:	2300      	movs	r3, #0
   b8dc2:	4601      	mov	r1, r0
   b8dc4:	461a      	mov	r2, r3
   b8dc6:	4618      	mov	r0, r3
   b8dc8:	f000 bfc8 	b.w	b9d5c <__register_exitproc>

000b8dcc <ldiv>:
   b8dcc:	2900      	cmp	r1, #0
   b8dce:	b510      	push	{r4, lr}
   b8dd0:	fb91 f4f2 	sdiv	r4, r1, r2
   b8dd4:	fb02 1314 	mls	r3, r2, r4, r1
   b8dd8:	db06      	blt.n	b8de8 <ldiv+0x1c>
   b8dda:	2b00      	cmp	r3, #0
   b8ddc:	da01      	bge.n	b8de2 <ldiv+0x16>
   b8dde:	3401      	adds	r4, #1
   b8de0:	1a9b      	subs	r3, r3, r2
   b8de2:	e9c0 4300 	strd	r4, r3, [r0]
   b8de6:	bd10      	pop	{r4, pc}
   b8de8:	2b00      	cmp	r3, #0
   b8dea:	bfc4      	itt	gt
   b8dec:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b8df0:	189b      	addgt	r3, r3, r2
   b8df2:	e7f6      	b.n	b8de2 <ldiv+0x16>

000b8df4 <memcmp>:
   b8df4:	b510      	push	{r4, lr}
   b8df6:	3901      	subs	r1, #1
   b8df8:	4402      	add	r2, r0
   b8dfa:	4290      	cmp	r0, r2
   b8dfc:	d101      	bne.n	b8e02 <memcmp+0xe>
   b8dfe:	2000      	movs	r0, #0
   b8e00:	e005      	b.n	b8e0e <memcmp+0x1a>
   b8e02:	7803      	ldrb	r3, [r0, #0]
   b8e04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8e08:	42a3      	cmp	r3, r4
   b8e0a:	d001      	beq.n	b8e10 <memcmp+0x1c>
   b8e0c:	1b18      	subs	r0, r3, r4
   b8e0e:	bd10      	pop	{r4, pc}
   b8e10:	3001      	adds	r0, #1
   b8e12:	e7f2      	b.n	b8dfa <memcmp+0x6>

000b8e14 <memcpy>:
   b8e14:	440a      	add	r2, r1
   b8e16:	4291      	cmp	r1, r2
   b8e18:	f100 33ff 	add.w	r3, r0, #4294967295
   b8e1c:	d100      	bne.n	b8e20 <memcpy+0xc>
   b8e1e:	4770      	bx	lr
   b8e20:	b510      	push	{r4, lr}
   b8e22:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8e26:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8e2a:	4291      	cmp	r1, r2
   b8e2c:	d1f9      	bne.n	b8e22 <memcpy+0xe>
   b8e2e:	bd10      	pop	{r4, pc}

000b8e30 <memmove>:
   b8e30:	4288      	cmp	r0, r1
   b8e32:	b510      	push	{r4, lr}
   b8e34:	eb01 0402 	add.w	r4, r1, r2
   b8e38:	d902      	bls.n	b8e40 <memmove+0x10>
   b8e3a:	4284      	cmp	r4, r0
   b8e3c:	4623      	mov	r3, r4
   b8e3e:	d807      	bhi.n	b8e50 <memmove+0x20>
   b8e40:	1e43      	subs	r3, r0, #1
   b8e42:	42a1      	cmp	r1, r4
   b8e44:	d008      	beq.n	b8e58 <memmove+0x28>
   b8e46:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8e4e:	e7f8      	b.n	b8e42 <memmove+0x12>
   b8e50:	4402      	add	r2, r0
   b8e52:	4601      	mov	r1, r0
   b8e54:	428a      	cmp	r2, r1
   b8e56:	d100      	bne.n	b8e5a <memmove+0x2a>
   b8e58:	bd10      	pop	{r4, pc}
   b8e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8e62:	e7f7      	b.n	b8e54 <memmove+0x24>

000b8e64 <memset>:
   b8e64:	4402      	add	r2, r0
   b8e66:	4603      	mov	r3, r0
   b8e68:	4293      	cmp	r3, r2
   b8e6a:	d100      	bne.n	b8e6e <memset+0xa>
   b8e6c:	4770      	bx	lr
   b8e6e:	f803 1b01 	strb.w	r1, [r3], #1
   b8e72:	e7f9      	b.n	b8e68 <memset+0x4>

000b8e74 <srand>:
   b8e74:	b538      	push	{r3, r4, r5, lr}
   b8e76:	4b10      	ldr	r3, [pc, #64]	; (b8eb8 <srand+0x44>)
   b8e78:	681d      	ldr	r5, [r3, #0]
   b8e7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8e7c:	4604      	mov	r4, r0
   b8e7e:	b9b3      	cbnz	r3, b8eae <srand+0x3a>
   b8e80:	2018      	movs	r0, #24
   b8e82:	f7fd fcfb 	bl	b687c <malloc>
   b8e86:	4602      	mov	r2, r0
   b8e88:	63a8      	str	r0, [r5, #56]	; 0x38
   b8e8a:	b920      	cbnz	r0, b8e96 <srand+0x22>
   b8e8c:	4b0b      	ldr	r3, [pc, #44]	; (b8ebc <srand+0x48>)
   b8e8e:	480c      	ldr	r0, [pc, #48]	; (b8ec0 <srand+0x4c>)
   b8e90:	2142      	movs	r1, #66	; 0x42
   b8e92:	f7fd fd33 	bl	b68fc <__assert_func>
   b8e96:	490b      	ldr	r1, [pc, #44]	; (b8ec4 <srand+0x50>)
   b8e98:	4b0b      	ldr	r3, [pc, #44]	; (b8ec8 <srand+0x54>)
   b8e9a:	e9c0 1300 	strd	r1, r3, [r0]
   b8e9e:	4b0b      	ldr	r3, [pc, #44]	; (b8ecc <srand+0x58>)
   b8ea0:	6083      	str	r3, [r0, #8]
   b8ea2:	230b      	movs	r3, #11
   b8ea4:	8183      	strh	r3, [r0, #12]
   b8ea6:	2100      	movs	r1, #0
   b8ea8:	2001      	movs	r0, #1
   b8eaa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8eae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8eb0:	2200      	movs	r2, #0
   b8eb2:	611c      	str	r4, [r3, #16]
   b8eb4:	615a      	str	r2, [r3, #20]
   b8eb6:	bd38      	pop	{r3, r4, r5, pc}
   b8eb8:	2003e33c 	.word	0x2003e33c
   b8ebc:	000bb592 	.word	0x000bb592
   b8ec0:	000bb5a9 	.word	0x000bb5a9
   b8ec4:	abcd330e 	.word	0xabcd330e
   b8ec8:	e66d1234 	.word	0xe66d1234
   b8ecc:	0005deec 	.word	0x0005deec

000b8ed0 <strcpy>:
   b8ed0:	4603      	mov	r3, r0
   b8ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8ed6:	f803 2b01 	strb.w	r2, [r3], #1
   b8eda:	2a00      	cmp	r2, #0
   b8edc:	d1f9      	bne.n	b8ed2 <strcpy+0x2>
   b8ede:	4770      	bx	lr

000b8ee0 <strdup>:
   b8ee0:	4b02      	ldr	r3, [pc, #8]	; (b8eec <strdup+0xc>)
   b8ee2:	4601      	mov	r1, r0
   b8ee4:	6818      	ldr	r0, [r3, #0]
   b8ee6:	f000 b803 	b.w	b8ef0 <_strdup_r>
   b8eea:	bf00      	nop
   b8eec:	2003e33c 	.word	0x2003e33c

000b8ef0 <_strdup_r>:
   b8ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8ef2:	4604      	mov	r4, r0
   b8ef4:	4608      	mov	r0, r1
   b8ef6:	460d      	mov	r5, r1
   b8ef8:	f7fb fdec 	bl	b4ad4 <strlen>
   b8efc:	1c42      	adds	r2, r0, #1
   b8efe:	4611      	mov	r1, r2
   b8f00:	4620      	mov	r0, r4
   b8f02:	9201      	str	r2, [sp, #4]
   b8f04:	f7fd fcea 	bl	b68dc <_malloc_r>
   b8f08:	4604      	mov	r4, r0
   b8f0a:	b118      	cbz	r0, b8f14 <_strdup_r+0x24>
   b8f0c:	9a01      	ldr	r2, [sp, #4]
   b8f0e:	4629      	mov	r1, r5
   b8f10:	f7ff ff80 	bl	b8e14 <memcpy>
   b8f14:	4620      	mov	r0, r4
   b8f16:	b003      	add	sp, #12
   b8f18:	bd30      	pop	{r4, r5, pc}

000b8f1a <strncmp>:
   b8f1a:	b510      	push	{r4, lr}
   b8f1c:	b17a      	cbz	r2, b8f3e <strncmp+0x24>
   b8f1e:	4603      	mov	r3, r0
   b8f20:	3901      	subs	r1, #1
   b8f22:	1884      	adds	r4, r0, r2
   b8f24:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8f28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8f2c:	4290      	cmp	r0, r2
   b8f2e:	d101      	bne.n	b8f34 <strncmp+0x1a>
   b8f30:	42a3      	cmp	r3, r4
   b8f32:	d101      	bne.n	b8f38 <strncmp+0x1e>
   b8f34:	1a80      	subs	r0, r0, r2
   b8f36:	bd10      	pop	{r4, pc}
   b8f38:	2800      	cmp	r0, #0
   b8f3a:	d1f3      	bne.n	b8f24 <strncmp+0xa>
   b8f3c:	e7fa      	b.n	b8f34 <strncmp+0x1a>
   b8f3e:	4610      	mov	r0, r2
   b8f40:	e7f9      	b.n	b8f36 <strncmp+0x1c>

000b8f42 <sulp>:
   b8f42:	b570      	push	{r4, r5, r6, lr}
   b8f44:	4604      	mov	r4, r0
   b8f46:	460d      	mov	r5, r1
   b8f48:	ec45 4b10 	vmov	d0, r4, r5
   b8f4c:	4616      	mov	r6, r2
   b8f4e:	f001 fe5f 	bl	bac10 <__ulp>
   b8f52:	ec51 0b10 	vmov	r0, r1, d0
   b8f56:	b17e      	cbz	r6, b8f78 <sulp+0x36>
   b8f58:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8f5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8f60:	2b00      	cmp	r3, #0
   b8f62:	dd09      	ble.n	b8f78 <sulp+0x36>
   b8f64:	051b      	lsls	r3, r3, #20
   b8f66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8f6a:	2400      	movs	r4, #0
   b8f6c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b8f70:	4622      	mov	r2, r4
   b8f72:	462b      	mov	r3, r5
   b8f74:	f7fb fa10 	bl	b4398 <__aeabi_dmul>
   b8f78:	bd70      	pop	{r4, r5, r6, pc}
   b8f7a:	0000      	movs	r0, r0
   b8f7c:	0000      	movs	r0, r0
	...

000b8f80 <_strtod_l>:
   b8f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f84:	ed2d 8b02 	vpush	{d8}
   b8f88:	b09d      	sub	sp, #116	; 0x74
   b8f8a:	461f      	mov	r7, r3
   b8f8c:	2300      	movs	r3, #0
   b8f8e:	9318      	str	r3, [sp, #96]	; 0x60
   b8f90:	4ba2      	ldr	r3, [pc, #648]	; (b921c <_strtod_l+0x29c>)
   b8f92:	9213      	str	r2, [sp, #76]	; 0x4c
   b8f94:	681b      	ldr	r3, [r3, #0]
   b8f96:	9305      	str	r3, [sp, #20]
   b8f98:	4604      	mov	r4, r0
   b8f9a:	4618      	mov	r0, r3
   b8f9c:	4688      	mov	r8, r1
   b8f9e:	f7fb fd99 	bl	b4ad4 <strlen>
   b8fa2:	f04f 0a00 	mov.w	sl, #0
   b8fa6:	4605      	mov	r5, r0
   b8fa8:	f04f 0b00 	mov.w	fp, #0
   b8fac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8fb2:	781a      	ldrb	r2, [r3, #0]
   b8fb4:	2a2b      	cmp	r2, #43	; 0x2b
   b8fb6:	d04e      	beq.n	b9056 <_strtod_l+0xd6>
   b8fb8:	d83b      	bhi.n	b9032 <_strtod_l+0xb2>
   b8fba:	2a0d      	cmp	r2, #13
   b8fbc:	d834      	bhi.n	b9028 <_strtod_l+0xa8>
   b8fbe:	2a08      	cmp	r2, #8
   b8fc0:	d834      	bhi.n	b902c <_strtod_l+0xac>
   b8fc2:	2a00      	cmp	r2, #0
   b8fc4:	d03e      	beq.n	b9044 <_strtod_l+0xc4>
   b8fc6:	2300      	movs	r3, #0
   b8fc8:	930a      	str	r3, [sp, #40]	; 0x28
   b8fca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b8fcc:	7833      	ldrb	r3, [r6, #0]
   b8fce:	2b30      	cmp	r3, #48	; 0x30
   b8fd0:	f040 80b0 	bne.w	b9134 <_strtod_l+0x1b4>
   b8fd4:	7873      	ldrb	r3, [r6, #1]
   b8fd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8fda:	2b58      	cmp	r3, #88	; 0x58
   b8fdc:	d168      	bne.n	b90b0 <_strtod_l+0x130>
   b8fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8fe0:	9301      	str	r3, [sp, #4]
   b8fe2:	ab18      	add	r3, sp, #96	; 0x60
   b8fe4:	9702      	str	r7, [sp, #8]
   b8fe6:	9300      	str	r3, [sp, #0]
   b8fe8:	4a8d      	ldr	r2, [pc, #564]	; (b9220 <_strtod_l+0x2a0>)
   b8fea:	ab19      	add	r3, sp, #100	; 0x64
   b8fec:	a917      	add	r1, sp, #92	; 0x5c
   b8fee:	4620      	mov	r0, r4
   b8ff0:	f000 ff7e 	bl	b9ef0 <__gethex>
   b8ff4:	f010 0707 	ands.w	r7, r0, #7
   b8ff8:	4605      	mov	r5, r0
   b8ffa:	d005      	beq.n	b9008 <_strtod_l+0x88>
   b8ffc:	2f06      	cmp	r7, #6
   b8ffe:	d12c      	bne.n	b905a <_strtod_l+0xda>
   b9000:	3601      	adds	r6, #1
   b9002:	2300      	movs	r3, #0
   b9004:	9617      	str	r6, [sp, #92]	; 0x5c
   b9006:	930a      	str	r3, [sp, #40]	; 0x28
   b9008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b900a:	2b00      	cmp	r3, #0
   b900c:	f040 8590 	bne.w	b9b30 <_strtod_l+0xbb0>
   b9010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9012:	b1eb      	cbz	r3, b9050 <_strtod_l+0xd0>
   b9014:	4652      	mov	r2, sl
   b9016:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b901a:	ec43 2b10 	vmov	d0, r2, r3
   b901e:	b01d      	add	sp, #116	; 0x74
   b9020:	ecbd 8b02 	vpop	{d8}
   b9024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9028:	2a20      	cmp	r2, #32
   b902a:	d1cc      	bne.n	b8fc6 <_strtod_l+0x46>
   b902c:	3301      	adds	r3, #1
   b902e:	9317      	str	r3, [sp, #92]	; 0x5c
   b9030:	e7be      	b.n	b8fb0 <_strtod_l+0x30>
   b9032:	2a2d      	cmp	r2, #45	; 0x2d
   b9034:	d1c7      	bne.n	b8fc6 <_strtod_l+0x46>
   b9036:	2201      	movs	r2, #1
   b9038:	920a      	str	r2, [sp, #40]	; 0x28
   b903a:	1c5a      	adds	r2, r3, #1
   b903c:	9217      	str	r2, [sp, #92]	; 0x5c
   b903e:	785b      	ldrb	r3, [r3, #1]
   b9040:	2b00      	cmp	r3, #0
   b9042:	d1c2      	bne.n	b8fca <_strtod_l+0x4a>
   b9044:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9046:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b904a:	2b00      	cmp	r3, #0
   b904c:	f040 856e 	bne.w	b9b2c <_strtod_l+0xbac>
   b9050:	4652      	mov	r2, sl
   b9052:	465b      	mov	r3, fp
   b9054:	e7e1      	b.n	b901a <_strtod_l+0x9a>
   b9056:	2200      	movs	r2, #0
   b9058:	e7ee      	b.n	b9038 <_strtod_l+0xb8>
   b905a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b905c:	b13a      	cbz	r2, b906e <_strtod_l+0xee>
   b905e:	2135      	movs	r1, #53	; 0x35
   b9060:	a81a      	add	r0, sp, #104	; 0x68
   b9062:	f001 fee0 	bl	bae26 <__copybits>
   b9066:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9068:	4620      	mov	r0, r4
   b906a:	f001 fa9f 	bl	ba5ac <_Bfree>
   b906e:	3f01      	subs	r7, #1
   b9070:	2f04      	cmp	r7, #4
   b9072:	d806      	bhi.n	b9082 <_strtod_l+0x102>
   b9074:	e8df f007 	tbb	[pc, r7]
   b9078:	1714030a 	.word	0x1714030a
   b907c:	0a          	.byte	0x0a
   b907d:	00          	.byte	0x00
   b907e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b9082:	0728      	lsls	r0, r5, #28
   b9084:	d5c0      	bpl.n	b9008 <_strtod_l+0x88>
   b9086:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b908a:	e7bd      	b.n	b9008 <_strtod_l+0x88>
   b908c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9090:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b9092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b9096:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b909a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b909e:	e7f0      	b.n	b9082 <_strtod_l+0x102>
   b90a0:	f8df b180 	ldr.w	fp, [pc, #384]	; b9224 <_strtod_l+0x2a4>
   b90a4:	e7ed      	b.n	b9082 <_strtod_l+0x102>
   b90a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b90aa:	f04f 3aff 	mov.w	sl, #4294967295
   b90ae:	e7e8      	b.n	b9082 <_strtod_l+0x102>
   b90b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b90b2:	1c5a      	adds	r2, r3, #1
   b90b4:	9217      	str	r2, [sp, #92]	; 0x5c
   b90b6:	785b      	ldrb	r3, [r3, #1]
   b90b8:	2b30      	cmp	r3, #48	; 0x30
   b90ba:	d0f9      	beq.n	b90b0 <_strtod_l+0x130>
   b90bc:	2b00      	cmp	r3, #0
   b90be:	d0a3      	beq.n	b9008 <_strtod_l+0x88>
   b90c0:	2301      	movs	r3, #1
   b90c2:	f04f 0900 	mov.w	r9, #0
   b90c6:	9304      	str	r3, [sp, #16]
   b90c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b90ca:	9308      	str	r3, [sp, #32]
   b90cc:	f8cd 901c 	str.w	r9, [sp, #28]
   b90d0:	464f      	mov	r7, r9
   b90d2:	220a      	movs	r2, #10
   b90d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b90d6:	7806      	ldrb	r6, [r0, #0]
   b90d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b90dc:	b2d9      	uxtb	r1, r3
   b90de:	2909      	cmp	r1, #9
   b90e0:	d92a      	bls.n	b9138 <_strtod_l+0x1b8>
   b90e2:	9905      	ldr	r1, [sp, #20]
   b90e4:	462a      	mov	r2, r5
   b90e6:	f7ff ff18 	bl	b8f1a <strncmp>
   b90ea:	b398      	cbz	r0, b9154 <_strtod_l+0x1d4>
   b90ec:	2000      	movs	r0, #0
   b90ee:	4632      	mov	r2, r6
   b90f0:	463d      	mov	r5, r7
   b90f2:	9005      	str	r0, [sp, #20]
   b90f4:	4603      	mov	r3, r0
   b90f6:	2a65      	cmp	r2, #101	; 0x65
   b90f8:	d001      	beq.n	b90fe <_strtod_l+0x17e>
   b90fa:	2a45      	cmp	r2, #69	; 0x45
   b90fc:	d118      	bne.n	b9130 <_strtod_l+0x1b0>
   b90fe:	b91d      	cbnz	r5, b9108 <_strtod_l+0x188>
   b9100:	9a04      	ldr	r2, [sp, #16]
   b9102:	4302      	orrs	r2, r0
   b9104:	d09e      	beq.n	b9044 <_strtod_l+0xc4>
   b9106:	2500      	movs	r5, #0
   b9108:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b910c:	f108 0201 	add.w	r2, r8, #1
   b9110:	9217      	str	r2, [sp, #92]	; 0x5c
   b9112:	f898 2001 	ldrb.w	r2, [r8, #1]
   b9116:	2a2b      	cmp	r2, #43	; 0x2b
   b9118:	d075      	beq.n	b9206 <_strtod_l+0x286>
   b911a:	2a2d      	cmp	r2, #45	; 0x2d
   b911c:	d07b      	beq.n	b9216 <_strtod_l+0x296>
   b911e:	f04f 0c00 	mov.w	ip, #0
   b9122:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b9126:	2909      	cmp	r1, #9
   b9128:	f240 8082 	bls.w	b9230 <_strtod_l+0x2b0>
   b912c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9130:	2600      	movs	r6, #0
   b9132:	e09d      	b.n	b9270 <_strtod_l+0x2f0>
   b9134:	2300      	movs	r3, #0
   b9136:	e7c4      	b.n	b90c2 <_strtod_l+0x142>
   b9138:	2f08      	cmp	r7, #8
   b913a:	bfd8      	it	le
   b913c:	9907      	ldrle	r1, [sp, #28]
   b913e:	f100 0001 	add.w	r0, r0, #1
   b9142:	bfda      	itte	le
   b9144:	fb02 3301 	mlale	r3, r2, r1, r3
   b9148:	9307      	strle	r3, [sp, #28]
   b914a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b914e:	3701      	adds	r7, #1
   b9150:	9017      	str	r0, [sp, #92]	; 0x5c
   b9152:	e7bf      	b.n	b90d4 <_strtod_l+0x154>
   b9154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9156:	195a      	adds	r2, r3, r5
   b9158:	9217      	str	r2, [sp, #92]	; 0x5c
   b915a:	5d5a      	ldrb	r2, [r3, r5]
   b915c:	2f00      	cmp	r7, #0
   b915e:	d037      	beq.n	b91d0 <_strtod_l+0x250>
   b9160:	9005      	str	r0, [sp, #20]
   b9162:	463d      	mov	r5, r7
   b9164:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9168:	2b09      	cmp	r3, #9
   b916a:	d912      	bls.n	b9192 <_strtod_l+0x212>
   b916c:	2301      	movs	r3, #1
   b916e:	e7c2      	b.n	b90f6 <_strtod_l+0x176>
   b9170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9172:	1c5a      	adds	r2, r3, #1
   b9174:	9217      	str	r2, [sp, #92]	; 0x5c
   b9176:	785a      	ldrb	r2, [r3, #1]
   b9178:	3001      	adds	r0, #1
   b917a:	2a30      	cmp	r2, #48	; 0x30
   b917c:	d0f8      	beq.n	b9170 <_strtod_l+0x1f0>
   b917e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b9182:	2b08      	cmp	r3, #8
   b9184:	f200 84d9 	bhi.w	b9b3a <_strtod_l+0xbba>
   b9188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b918a:	9005      	str	r0, [sp, #20]
   b918c:	2000      	movs	r0, #0
   b918e:	9308      	str	r3, [sp, #32]
   b9190:	4605      	mov	r5, r0
   b9192:	3a30      	subs	r2, #48	; 0x30
   b9194:	f100 0301 	add.w	r3, r0, #1
   b9198:	d014      	beq.n	b91c4 <_strtod_l+0x244>
   b919a:	9905      	ldr	r1, [sp, #20]
   b919c:	4419      	add	r1, r3
   b919e:	9105      	str	r1, [sp, #20]
   b91a0:	462b      	mov	r3, r5
   b91a2:	eb00 0e05 	add.w	lr, r0, r5
   b91a6:	210a      	movs	r1, #10
   b91a8:	4573      	cmp	r3, lr
   b91aa:	d113      	bne.n	b91d4 <_strtod_l+0x254>
   b91ac:	182b      	adds	r3, r5, r0
   b91ae:	2b08      	cmp	r3, #8
   b91b0:	f105 0501 	add.w	r5, r5, #1
   b91b4:	4405      	add	r5, r0
   b91b6:	dc1c      	bgt.n	b91f2 <_strtod_l+0x272>
   b91b8:	9907      	ldr	r1, [sp, #28]
   b91ba:	230a      	movs	r3, #10
   b91bc:	fb03 2301 	mla	r3, r3, r1, r2
   b91c0:	9307      	str	r3, [sp, #28]
   b91c2:	2300      	movs	r3, #0
   b91c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b91c6:	1c51      	adds	r1, r2, #1
   b91c8:	9117      	str	r1, [sp, #92]	; 0x5c
   b91ca:	7852      	ldrb	r2, [r2, #1]
   b91cc:	4618      	mov	r0, r3
   b91ce:	e7c9      	b.n	b9164 <_strtod_l+0x1e4>
   b91d0:	4638      	mov	r0, r7
   b91d2:	e7d2      	b.n	b917a <_strtod_l+0x1fa>
   b91d4:	2b08      	cmp	r3, #8
   b91d6:	dc04      	bgt.n	b91e2 <_strtod_l+0x262>
   b91d8:	9e07      	ldr	r6, [sp, #28]
   b91da:	434e      	muls	r6, r1
   b91dc:	9607      	str	r6, [sp, #28]
   b91de:	3301      	adds	r3, #1
   b91e0:	e7e2      	b.n	b91a8 <_strtod_l+0x228>
   b91e2:	f103 0c01 	add.w	ip, r3, #1
   b91e6:	f1bc 0f10 	cmp.w	ip, #16
   b91ea:	bfd8      	it	le
   b91ec:	fb01 f909 	mulle.w	r9, r1, r9
   b91f0:	e7f5      	b.n	b91de <_strtod_l+0x25e>
   b91f2:	2d10      	cmp	r5, #16
   b91f4:	bfdc      	itt	le
   b91f6:	230a      	movle	r3, #10
   b91f8:	fb03 2909 	mlale	r9, r3, r9, r2
   b91fc:	e7e1      	b.n	b91c2 <_strtod_l+0x242>
   b91fe:	2300      	movs	r3, #0
   b9200:	9305      	str	r3, [sp, #20]
   b9202:	2301      	movs	r3, #1
   b9204:	e77c      	b.n	b9100 <_strtod_l+0x180>
   b9206:	f04f 0c00 	mov.w	ip, #0
   b920a:	f108 0202 	add.w	r2, r8, #2
   b920e:	9217      	str	r2, [sp, #92]	; 0x5c
   b9210:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9214:	e785      	b.n	b9122 <_strtod_l+0x1a2>
   b9216:	f04f 0c01 	mov.w	ip, #1
   b921a:	e7f6      	b.n	b920a <_strtod_l+0x28a>
   b921c:	000bb820 	.word	0x000bb820
   b9220:	000bb634 	.word	0x000bb634
   b9224:	7ff00000 	.word	0x7ff00000
   b9228:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b922a:	1c51      	adds	r1, r2, #1
   b922c:	9117      	str	r1, [sp, #92]	; 0x5c
   b922e:	7852      	ldrb	r2, [r2, #1]
   b9230:	2a30      	cmp	r2, #48	; 0x30
   b9232:	d0f9      	beq.n	b9228 <_strtod_l+0x2a8>
   b9234:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9238:	2908      	cmp	r1, #8
   b923a:	f63f af79 	bhi.w	b9130 <_strtod_l+0x1b0>
   b923e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b9242:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9244:	9206      	str	r2, [sp, #24]
   b9246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9248:	1c51      	adds	r1, r2, #1
   b924a:	9117      	str	r1, [sp, #92]	; 0x5c
   b924c:	7852      	ldrb	r2, [r2, #1]
   b924e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b9252:	2e09      	cmp	r6, #9
   b9254:	d937      	bls.n	b92c6 <_strtod_l+0x346>
   b9256:	9e06      	ldr	r6, [sp, #24]
   b9258:	1b89      	subs	r1, r1, r6
   b925a:	2908      	cmp	r1, #8
   b925c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9260:	dc02      	bgt.n	b9268 <_strtod_l+0x2e8>
   b9262:	4576      	cmp	r6, lr
   b9264:	bfa8      	it	ge
   b9266:	4676      	movge	r6, lr
   b9268:	f1bc 0f00 	cmp.w	ip, #0
   b926c:	d000      	beq.n	b9270 <_strtod_l+0x2f0>
   b926e:	4276      	negs	r6, r6
   b9270:	2d00      	cmp	r5, #0
   b9272:	d14d      	bne.n	b9310 <_strtod_l+0x390>
   b9274:	9904      	ldr	r1, [sp, #16]
   b9276:	4301      	orrs	r1, r0
   b9278:	f47f aec6 	bne.w	b9008 <_strtod_l+0x88>
   b927c:	2b00      	cmp	r3, #0
   b927e:	f47f aee1 	bne.w	b9044 <_strtod_l+0xc4>
   b9282:	2a69      	cmp	r2, #105	; 0x69
   b9284:	d027      	beq.n	b92d6 <_strtod_l+0x356>
   b9286:	dc24      	bgt.n	b92d2 <_strtod_l+0x352>
   b9288:	2a49      	cmp	r2, #73	; 0x49
   b928a:	d024      	beq.n	b92d6 <_strtod_l+0x356>
   b928c:	2a4e      	cmp	r2, #78	; 0x4e
   b928e:	f47f aed9 	bne.w	b9044 <_strtod_l+0xc4>
   b9292:	499f      	ldr	r1, [pc, #636]	; (b9510 <_strtod_l+0x590>)
   b9294:	a817      	add	r0, sp, #92	; 0x5c
   b9296:	f001 f883 	bl	ba3a0 <__match>
   b929a:	2800      	cmp	r0, #0
   b929c:	f43f aed2 	beq.w	b9044 <_strtod_l+0xc4>
   b92a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92a2:	781b      	ldrb	r3, [r3, #0]
   b92a4:	2b28      	cmp	r3, #40	; 0x28
   b92a6:	d12d      	bne.n	b9304 <_strtod_l+0x384>
   b92a8:	499a      	ldr	r1, [pc, #616]	; (b9514 <_strtod_l+0x594>)
   b92aa:	aa1a      	add	r2, sp, #104	; 0x68
   b92ac:	a817      	add	r0, sp, #92	; 0x5c
   b92ae:	f001 f88b 	bl	ba3c8 <__hexnan>
   b92b2:	2805      	cmp	r0, #5
   b92b4:	d126      	bne.n	b9304 <_strtod_l+0x384>
   b92b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b92b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b92bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b92c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b92c4:	e6a0      	b.n	b9008 <_strtod_l+0x88>
   b92c6:	210a      	movs	r1, #10
   b92c8:	fb01 2e0e 	mla	lr, r1, lr, r2
   b92cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b92d0:	e7b9      	b.n	b9246 <_strtod_l+0x2c6>
   b92d2:	2a6e      	cmp	r2, #110	; 0x6e
   b92d4:	e7db      	b.n	b928e <_strtod_l+0x30e>
   b92d6:	4990      	ldr	r1, [pc, #576]	; (b9518 <_strtod_l+0x598>)
   b92d8:	a817      	add	r0, sp, #92	; 0x5c
   b92da:	f001 f861 	bl	ba3a0 <__match>
   b92de:	2800      	cmp	r0, #0
   b92e0:	f43f aeb0 	beq.w	b9044 <_strtod_l+0xc4>
   b92e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92e6:	498d      	ldr	r1, [pc, #564]	; (b951c <_strtod_l+0x59c>)
   b92e8:	3b01      	subs	r3, #1
   b92ea:	a817      	add	r0, sp, #92	; 0x5c
   b92ec:	9317      	str	r3, [sp, #92]	; 0x5c
   b92ee:	f001 f857 	bl	ba3a0 <__match>
   b92f2:	b910      	cbnz	r0, b92fa <_strtod_l+0x37a>
   b92f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92f6:	3301      	adds	r3, #1
   b92f8:	9317      	str	r3, [sp, #92]	; 0x5c
   b92fa:	f8df b230 	ldr.w	fp, [pc, #560]	; b952c <_strtod_l+0x5ac>
   b92fe:	f04f 0a00 	mov.w	sl, #0
   b9302:	e681      	b.n	b9008 <_strtod_l+0x88>
   b9304:	4886      	ldr	r0, [pc, #536]	; (b9520 <_strtod_l+0x5a0>)
   b9306:	f001 fde3 	bl	baed0 <nan>
   b930a:	ec5b ab10 	vmov	sl, fp, d0
   b930e:	e67b      	b.n	b9008 <_strtod_l+0x88>
   b9310:	9b05      	ldr	r3, [sp, #20]
   b9312:	9807      	ldr	r0, [sp, #28]
   b9314:	1af3      	subs	r3, r6, r3
   b9316:	2f00      	cmp	r7, #0
   b9318:	bf08      	it	eq
   b931a:	462f      	moveq	r7, r5
   b931c:	2d10      	cmp	r5, #16
   b931e:	9306      	str	r3, [sp, #24]
   b9320:	46a8      	mov	r8, r5
   b9322:	bfa8      	it	ge
   b9324:	f04f 0810 	movge.w	r8, #16
   b9328:	f7fa ffbc 	bl	b42a4 <__aeabi_ui2d>
   b932c:	2d09      	cmp	r5, #9
   b932e:	4682      	mov	sl, r0
   b9330:	468b      	mov	fp, r1
   b9332:	dd13      	ble.n	b935c <_strtod_l+0x3dc>
   b9334:	4b7b      	ldr	r3, [pc, #492]	; (b9524 <_strtod_l+0x5a4>)
   b9336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b933a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b933e:	f7fb f82b 	bl	b4398 <__aeabi_dmul>
   b9342:	4682      	mov	sl, r0
   b9344:	4648      	mov	r0, r9
   b9346:	468b      	mov	fp, r1
   b9348:	f7fa ffac 	bl	b42a4 <__aeabi_ui2d>
   b934c:	4602      	mov	r2, r0
   b934e:	460b      	mov	r3, r1
   b9350:	4650      	mov	r0, sl
   b9352:	4659      	mov	r1, fp
   b9354:	f7fa fe6a 	bl	b402c <__adddf3>
   b9358:	4682      	mov	sl, r0
   b935a:	468b      	mov	fp, r1
   b935c:	2d0f      	cmp	r5, #15
   b935e:	dc38      	bgt.n	b93d2 <_strtod_l+0x452>
   b9360:	9b06      	ldr	r3, [sp, #24]
   b9362:	2b00      	cmp	r3, #0
   b9364:	f43f ae50 	beq.w	b9008 <_strtod_l+0x88>
   b9368:	dd24      	ble.n	b93b4 <_strtod_l+0x434>
   b936a:	2b16      	cmp	r3, #22
   b936c:	dc0b      	bgt.n	b9386 <_strtod_l+0x406>
   b936e:	496d      	ldr	r1, [pc, #436]	; (b9524 <_strtod_l+0x5a4>)
   b9370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9374:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9378:	4652      	mov	r2, sl
   b937a:	465b      	mov	r3, fp
   b937c:	f7fb f80c 	bl	b4398 <__aeabi_dmul>
   b9380:	4682      	mov	sl, r0
   b9382:	468b      	mov	fp, r1
   b9384:	e640      	b.n	b9008 <_strtod_l+0x88>
   b9386:	9a06      	ldr	r2, [sp, #24]
   b9388:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b938c:	4293      	cmp	r3, r2
   b938e:	db20      	blt.n	b93d2 <_strtod_l+0x452>
   b9390:	4c64      	ldr	r4, [pc, #400]	; (b9524 <_strtod_l+0x5a4>)
   b9392:	f1c5 050f 	rsb	r5, r5, #15
   b9396:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b939a:	4652      	mov	r2, sl
   b939c:	465b      	mov	r3, fp
   b939e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b93a2:	f7fa fff9 	bl	b4398 <__aeabi_dmul>
   b93a6:	9b06      	ldr	r3, [sp, #24]
   b93a8:	1b5d      	subs	r5, r3, r5
   b93aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b93ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   b93b2:	e7e3      	b.n	b937c <_strtod_l+0x3fc>
   b93b4:	9b06      	ldr	r3, [sp, #24]
   b93b6:	3316      	adds	r3, #22
   b93b8:	db0b      	blt.n	b93d2 <_strtod_l+0x452>
   b93ba:	9b05      	ldr	r3, [sp, #20]
   b93bc:	1b9e      	subs	r6, r3, r6
   b93be:	4b59      	ldr	r3, [pc, #356]	; (b9524 <_strtod_l+0x5a4>)
   b93c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b93c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   b93c8:	4650      	mov	r0, sl
   b93ca:	4659      	mov	r1, fp
   b93cc:	f7fb f90e 	bl	b45ec <__aeabi_ddiv>
   b93d0:	e7d6      	b.n	b9380 <_strtod_l+0x400>
   b93d2:	9b06      	ldr	r3, [sp, #24]
   b93d4:	eba5 0808 	sub.w	r8, r5, r8
   b93d8:	4498      	add	r8, r3
   b93da:	f1b8 0f00 	cmp.w	r8, #0
   b93de:	dd74      	ble.n	b94ca <_strtod_l+0x54a>
   b93e0:	f018 030f 	ands.w	r3, r8, #15
   b93e4:	d00a      	beq.n	b93fc <_strtod_l+0x47c>
   b93e6:	494f      	ldr	r1, [pc, #316]	; (b9524 <_strtod_l+0x5a4>)
   b93e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b93ec:	4652      	mov	r2, sl
   b93ee:	465b      	mov	r3, fp
   b93f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b93f4:	f7fa ffd0 	bl	b4398 <__aeabi_dmul>
   b93f8:	4682      	mov	sl, r0
   b93fa:	468b      	mov	fp, r1
   b93fc:	f038 080f 	bics.w	r8, r8, #15
   b9400:	d04f      	beq.n	b94a2 <_strtod_l+0x522>
   b9402:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9406:	dd22      	ble.n	b944e <_strtod_l+0x4ce>
   b9408:	2500      	movs	r5, #0
   b940a:	462e      	mov	r6, r5
   b940c:	9507      	str	r5, [sp, #28]
   b940e:	9505      	str	r5, [sp, #20]
   b9410:	2322      	movs	r3, #34	; 0x22
   b9412:	f8df b118 	ldr.w	fp, [pc, #280]	; b952c <_strtod_l+0x5ac>
   b9416:	6023      	str	r3, [r4, #0]
   b9418:	f04f 0a00 	mov.w	sl, #0
   b941c:	9b07      	ldr	r3, [sp, #28]
   b941e:	2b00      	cmp	r3, #0
   b9420:	f43f adf2 	beq.w	b9008 <_strtod_l+0x88>
   b9424:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9426:	4620      	mov	r0, r4
   b9428:	f001 f8c0 	bl	ba5ac <_Bfree>
   b942c:	9905      	ldr	r1, [sp, #20]
   b942e:	4620      	mov	r0, r4
   b9430:	f001 f8bc 	bl	ba5ac <_Bfree>
   b9434:	4631      	mov	r1, r6
   b9436:	4620      	mov	r0, r4
   b9438:	f001 f8b8 	bl	ba5ac <_Bfree>
   b943c:	9907      	ldr	r1, [sp, #28]
   b943e:	4620      	mov	r0, r4
   b9440:	f001 f8b4 	bl	ba5ac <_Bfree>
   b9444:	4629      	mov	r1, r5
   b9446:	4620      	mov	r0, r4
   b9448:	f001 f8b0 	bl	ba5ac <_Bfree>
   b944c:	e5dc      	b.n	b9008 <_strtod_l+0x88>
   b944e:	4b36      	ldr	r3, [pc, #216]	; (b9528 <_strtod_l+0x5a8>)
   b9450:	9304      	str	r3, [sp, #16]
   b9452:	2300      	movs	r3, #0
   b9454:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9458:	4650      	mov	r0, sl
   b945a:	4659      	mov	r1, fp
   b945c:	4699      	mov	r9, r3
   b945e:	f1b8 0f01 	cmp.w	r8, #1
   b9462:	dc21      	bgt.n	b94a8 <_strtod_l+0x528>
   b9464:	b10b      	cbz	r3, b946a <_strtod_l+0x4ea>
   b9466:	4682      	mov	sl, r0
   b9468:	468b      	mov	fp, r1
   b946a:	4b2f      	ldr	r3, [pc, #188]	; (b9528 <_strtod_l+0x5a8>)
   b946c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9470:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9474:	4652      	mov	r2, sl
   b9476:	465b      	mov	r3, fp
   b9478:	e9d9 0100 	ldrd	r0, r1, [r9]
   b947c:	f7fa ff8c 	bl	b4398 <__aeabi_dmul>
   b9480:	4b2a      	ldr	r3, [pc, #168]	; (b952c <_strtod_l+0x5ac>)
   b9482:	460a      	mov	r2, r1
   b9484:	400b      	ands	r3, r1
   b9486:	492a      	ldr	r1, [pc, #168]	; (b9530 <_strtod_l+0x5b0>)
   b9488:	428b      	cmp	r3, r1
   b948a:	4682      	mov	sl, r0
   b948c:	d8bc      	bhi.n	b9408 <_strtod_l+0x488>
   b948e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9492:	428b      	cmp	r3, r1
   b9494:	bf86      	itte	hi
   b9496:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9534 <_strtod_l+0x5b4>
   b949a:	f04f 3aff 	movhi.w	sl, #4294967295
   b949e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b94a2:	2300      	movs	r3, #0
   b94a4:	9304      	str	r3, [sp, #16]
   b94a6:	e084      	b.n	b95b2 <_strtod_l+0x632>
   b94a8:	f018 0f01 	tst.w	r8, #1
   b94ac:	d005      	beq.n	b94ba <_strtod_l+0x53a>
   b94ae:	9b04      	ldr	r3, [sp, #16]
   b94b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b94b4:	f7fa ff70 	bl	b4398 <__aeabi_dmul>
   b94b8:	2301      	movs	r3, #1
   b94ba:	9a04      	ldr	r2, [sp, #16]
   b94bc:	3208      	adds	r2, #8
   b94be:	f109 0901 	add.w	r9, r9, #1
   b94c2:	ea4f 0868 	mov.w	r8, r8, asr #1
   b94c6:	9204      	str	r2, [sp, #16]
   b94c8:	e7c9      	b.n	b945e <_strtod_l+0x4de>
   b94ca:	d0ea      	beq.n	b94a2 <_strtod_l+0x522>
   b94cc:	f1c8 0800 	rsb	r8, r8, #0
   b94d0:	f018 020f 	ands.w	r2, r8, #15
   b94d4:	d00a      	beq.n	b94ec <_strtod_l+0x56c>
   b94d6:	4b13      	ldr	r3, [pc, #76]	; (b9524 <_strtod_l+0x5a4>)
   b94d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b94dc:	4650      	mov	r0, sl
   b94de:	4659      	mov	r1, fp
   b94e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b94e4:	f7fb f882 	bl	b45ec <__aeabi_ddiv>
   b94e8:	4682      	mov	sl, r0
   b94ea:	468b      	mov	fp, r1
   b94ec:	ea5f 1828 	movs.w	r8, r8, asr #4
   b94f0:	d0d7      	beq.n	b94a2 <_strtod_l+0x522>
   b94f2:	f1b8 0f1f 	cmp.w	r8, #31
   b94f6:	dd1f      	ble.n	b9538 <_strtod_l+0x5b8>
   b94f8:	2500      	movs	r5, #0
   b94fa:	462e      	mov	r6, r5
   b94fc:	9507      	str	r5, [sp, #28]
   b94fe:	9505      	str	r5, [sp, #20]
   b9500:	2322      	movs	r3, #34	; 0x22
   b9502:	f04f 0a00 	mov.w	sl, #0
   b9506:	f04f 0b00 	mov.w	fp, #0
   b950a:	6023      	str	r3, [r4, #0]
   b950c:	e786      	b.n	b941c <_strtod_l+0x49c>
   b950e:	bf00      	nop
   b9510:	000bb62f 	.word	0x000bb62f
   b9514:	000bb648 	.word	0x000bb648
   b9518:	000bb626 	.word	0x000bb626
   b951c:	000bb629 	.word	0x000bb629
   b9520:	000baf94 	.word	0x000baf94
   b9524:	000bb8e0 	.word	0x000bb8e0
   b9528:	000bb8b8 	.word	0x000bb8b8
   b952c:	7ff00000 	.word	0x7ff00000
   b9530:	7ca00000 	.word	0x7ca00000
   b9534:	7fefffff 	.word	0x7fefffff
   b9538:	f018 0310 	ands.w	r3, r8, #16
   b953c:	bf18      	it	ne
   b953e:	236a      	movne	r3, #106	; 0x6a
   b9540:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b98f0 <_strtod_l+0x970>
   b9544:	9304      	str	r3, [sp, #16]
   b9546:	4650      	mov	r0, sl
   b9548:	4659      	mov	r1, fp
   b954a:	2300      	movs	r3, #0
   b954c:	f018 0f01 	tst.w	r8, #1
   b9550:	d004      	beq.n	b955c <_strtod_l+0x5dc>
   b9552:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9556:	f7fa ff1f 	bl	b4398 <__aeabi_dmul>
   b955a:	2301      	movs	r3, #1
   b955c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9560:	f109 0908 	add.w	r9, r9, #8
   b9564:	d1f2      	bne.n	b954c <_strtod_l+0x5cc>
   b9566:	b10b      	cbz	r3, b956c <_strtod_l+0x5ec>
   b9568:	4682      	mov	sl, r0
   b956a:	468b      	mov	fp, r1
   b956c:	9b04      	ldr	r3, [sp, #16]
   b956e:	b1c3      	cbz	r3, b95a2 <_strtod_l+0x622>
   b9570:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9574:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9578:	2b00      	cmp	r3, #0
   b957a:	4659      	mov	r1, fp
   b957c:	dd11      	ble.n	b95a2 <_strtod_l+0x622>
   b957e:	2b1f      	cmp	r3, #31
   b9580:	f340 8124 	ble.w	b97cc <_strtod_l+0x84c>
   b9584:	2b34      	cmp	r3, #52	; 0x34
   b9586:	bfde      	ittt	le
   b9588:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b958c:	f04f 33ff 	movle.w	r3, #4294967295
   b9590:	fa03 f202 	lslle.w	r2, r3, r2
   b9594:	f04f 0a00 	mov.w	sl, #0
   b9598:	bfcc      	ite	gt
   b959a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b959e:	ea02 0b01 	andle.w	fp, r2, r1
   b95a2:	2200      	movs	r2, #0
   b95a4:	2300      	movs	r3, #0
   b95a6:	4650      	mov	r0, sl
   b95a8:	4659      	mov	r1, fp
   b95aa:	f7fb f95d 	bl	b4868 <__aeabi_dcmpeq>
   b95ae:	2800      	cmp	r0, #0
   b95b0:	d1a2      	bne.n	b94f8 <_strtod_l+0x578>
   b95b2:	9b07      	ldr	r3, [sp, #28]
   b95b4:	9300      	str	r3, [sp, #0]
   b95b6:	9908      	ldr	r1, [sp, #32]
   b95b8:	462b      	mov	r3, r5
   b95ba:	463a      	mov	r2, r7
   b95bc:	4620      	mov	r0, r4
   b95be:	f001 f85d 	bl	ba67c <__s2b>
   b95c2:	9007      	str	r0, [sp, #28]
   b95c4:	2800      	cmp	r0, #0
   b95c6:	f43f af1f 	beq.w	b9408 <_strtod_l+0x488>
   b95ca:	9b05      	ldr	r3, [sp, #20]
   b95cc:	1b9e      	subs	r6, r3, r6
   b95ce:	9b06      	ldr	r3, [sp, #24]
   b95d0:	2b00      	cmp	r3, #0
   b95d2:	bfb4      	ite	lt
   b95d4:	4633      	movlt	r3, r6
   b95d6:	2300      	movge	r3, #0
   b95d8:	930c      	str	r3, [sp, #48]	; 0x30
   b95da:	9b06      	ldr	r3, [sp, #24]
   b95dc:	2500      	movs	r5, #0
   b95de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b95e2:	9312      	str	r3, [sp, #72]	; 0x48
   b95e4:	462e      	mov	r6, r5
   b95e6:	9b07      	ldr	r3, [sp, #28]
   b95e8:	4620      	mov	r0, r4
   b95ea:	6859      	ldr	r1, [r3, #4]
   b95ec:	f000 ff9e 	bl	ba52c <_Balloc>
   b95f0:	9005      	str	r0, [sp, #20]
   b95f2:	2800      	cmp	r0, #0
   b95f4:	f43f af0c 	beq.w	b9410 <_strtod_l+0x490>
   b95f8:	9b07      	ldr	r3, [sp, #28]
   b95fa:	691a      	ldr	r2, [r3, #16]
   b95fc:	3202      	adds	r2, #2
   b95fe:	f103 010c 	add.w	r1, r3, #12
   b9602:	0092      	lsls	r2, r2, #2
   b9604:	300c      	adds	r0, #12
   b9606:	f7ff fc05 	bl	b8e14 <memcpy>
   b960a:	ec4b ab10 	vmov	d0, sl, fp
   b960e:	aa1a      	add	r2, sp, #104	; 0x68
   b9610:	a919      	add	r1, sp, #100	; 0x64
   b9612:	4620      	mov	r0, r4
   b9614:	f001 fb78 	bl	bad08 <__d2b>
   b9618:	ec4b ab18 	vmov	d8, sl, fp
   b961c:	9018      	str	r0, [sp, #96]	; 0x60
   b961e:	2800      	cmp	r0, #0
   b9620:	f43f aef6 	beq.w	b9410 <_strtod_l+0x490>
   b9624:	2101      	movs	r1, #1
   b9626:	4620      	mov	r0, r4
   b9628:	f001 f8c2 	bl	ba7b0 <__i2b>
   b962c:	4606      	mov	r6, r0
   b962e:	2800      	cmp	r0, #0
   b9630:	f43f aeee 	beq.w	b9410 <_strtod_l+0x490>
   b9634:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9636:	9904      	ldr	r1, [sp, #16]
   b9638:	2b00      	cmp	r3, #0
   b963a:	bfab      	itete	ge
   b963c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b963e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9640:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9642:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9646:	bfac      	ite	ge
   b9648:	eb03 0902 	addge.w	r9, r3, r2
   b964c:	1ad7      	sublt	r7, r2, r3
   b964e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9650:	eba3 0801 	sub.w	r8, r3, r1
   b9654:	4490      	add	r8, r2
   b9656:	4ba1      	ldr	r3, [pc, #644]	; (b98dc <_strtod_l+0x95c>)
   b9658:	f108 38ff 	add.w	r8, r8, #4294967295
   b965c:	4598      	cmp	r8, r3
   b965e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9662:	f280 80c7 	bge.w	b97f4 <_strtod_l+0x874>
   b9666:	eba3 0308 	sub.w	r3, r3, r8
   b966a:	2b1f      	cmp	r3, #31
   b966c:	eba2 0203 	sub.w	r2, r2, r3
   b9670:	f04f 0101 	mov.w	r1, #1
   b9674:	f300 80b1 	bgt.w	b97da <_strtod_l+0x85a>
   b9678:	fa01 f303 	lsl.w	r3, r1, r3
   b967c:	930d      	str	r3, [sp, #52]	; 0x34
   b967e:	2300      	movs	r3, #0
   b9680:	9308      	str	r3, [sp, #32]
   b9682:	eb09 0802 	add.w	r8, r9, r2
   b9686:	9b04      	ldr	r3, [sp, #16]
   b9688:	45c1      	cmp	r9, r8
   b968a:	4417      	add	r7, r2
   b968c:	441f      	add	r7, r3
   b968e:	464b      	mov	r3, r9
   b9690:	bfa8      	it	ge
   b9692:	4643      	movge	r3, r8
   b9694:	42bb      	cmp	r3, r7
   b9696:	bfa8      	it	ge
   b9698:	463b      	movge	r3, r7
   b969a:	2b00      	cmp	r3, #0
   b969c:	bfc2      	ittt	gt
   b969e:	eba8 0803 	subgt.w	r8, r8, r3
   b96a2:	1aff      	subgt	r7, r7, r3
   b96a4:	eba9 0903 	subgt.w	r9, r9, r3
   b96a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b96aa:	2b00      	cmp	r3, #0
   b96ac:	dd17      	ble.n	b96de <_strtod_l+0x75e>
   b96ae:	4631      	mov	r1, r6
   b96b0:	461a      	mov	r2, r3
   b96b2:	4620      	mov	r0, r4
   b96b4:	f001 f93c 	bl	ba930 <__pow5mult>
   b96b8:	4606      	mov	r6, r0
   b96ba:	2800      	cmp	r0, #0
   b96bc:	f43f aea8 	beq.w	b9410 <_strtod_l+0x490>
   b96c0:	4601      	mov	r1, r0
   b96c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b96c4:	4620      	mov	r0, r4
   b96c6:	f001 f889 	bl	ba7dc <__multiply>
   b96ca:	900b      	str	r0, [sp, #44]	; 0x2c
   b96cc:	2800      	cmp	r0, #0
   b96ce:	f43f ae9f 	beq.w	b9410 <_strtod_l+0x490>
   b96d2:	9918      	ldr	r1, [sp, #96]	; 0x60
   b96d4:	4620      	mov	r0, r4
   b96d6:	f000 ff69 	bl	ba5ac <_Bfree>
   b96da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b96dc:	9318      	str	r3, [sp, #96]	; 0x60
   b96de:	f1b8 0f00 	cmp.w	r8, #0
   b96e2:	f300 808c 	bgt.w	b97fe <_strtod_l+0x87e>
   b96e6:	9b06      	ldr	r3, [sp, #24]
   b96e8:	2b00      	cmp	r3, #0
   b96ea:	dd08      	ble.n	b96fe <_strtod_l+0x77e>
   b96ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b96ee:	9905      	ldr	r1, [sp, #20]
   b96f0:	4620      	mov	r0, r4
   b96f2:	f001 f91d 	bl	ba930 <__pow5mult>
   b96f6:	9005      	str	r0, [sp, #20]
   b96f8:	2800      	cmp	r0, #0
   b96fa:	f43f ae89 	beq.w	b9410 <_strtod_l+0x490>
   b96fe:	2f00      	cmp	r7, #0
   b9700:	dd08      	ble.n	b9714 <_strtod_l+0x794>
   b9702:	9905      	ldr	r1, [sp, #20]
   b9704:	463a      	mov	r2, r7
   b9706:	4620      	mov	r0, r4
   b9708:	f001 f96c 	bl	ba9e4 <__lshift>
   b970c:	9005      	str	r0, [sp, #20]
   b970e:	2800      	cmp	r0, #0
   b9710:	f43f ae7e 	beq.w	b9410 <_strtod_l+0x490>
   b9714:	f1b9 0f00 	cmp.w	r9, #0
   b9718:	dd08      	ble.n	b972c <_strtod_l+0x7ac>
   b971a:	4631      	mov	r1, r6
   b971c:	464a      	mov	r2, r9
   b971e:	4620      	mov	r0, r4
   b9720:	f001 f960 	bl	ba9e4 <__lshift>
   b9724:	4606      	mov	r6, r0
   b9726:	2800      	cmp	r0, #0
   b9728:	f43f ae72 	beq.w	b9410 <_strtod_l+0x490>
   b972c:	9a05      	ldr	r2, [sp, #20]
   b972e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9730:	4620      	mov	r0, r4
   b9732:	f001 f9e3 	bl	baafc <__mdiff>
   b9736:	4605      	mov	r5, r0
   b9738:	2800      	cmp	r0, #0
   b973a:	f43f ae69 	beq.w	b9410 <_strtod_l+0x490>
   b973e:	68c3      	ldr	r3, [r0, #12]
   b9740:	930b      	str	r3, [sp, #44]	; 0x2c
   b9742:	2300      	movs	r3, #0
   b9744:	60c3      	str	r3, [r0, #12]
   b9746:	4631      	mov	r1, r6
   b9748:	f001 f9bc 	bl	baac4 <__mcmp>
   b974c:	2800      	cmp	r0, #0
   b974e:	da60      	bge.n	b9812 <_strtod_l+0x892>
   b9750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9752:	ea53 030a 	orrs.w	r3, r3, sl
   b9756:	f040 8082 	bne.w	b985e <_strtod_l+0x8de>
   b975a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b975e:	2b00      	cmp	r3, #0
   b9760:	d17d      	bne.n	b985e <_strtod_l+0x8de>
   b9762:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9766:	0d1b      	lsrs	r3, r3, #20
   b9768:	051b      	lsls	r3, r3, #20
   b976a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b976e:	d976      	bls.n	b985e <_strtod_l+0x8de>
   b9770:	696b      	ldr	r3, [r5, #20]
   b9772:	b913      	cbnz	r3, b977a <_strtod_l+0x7fa>
   b9774:	692b      	ldr	r3, [r5, #16]
   b9776:	2b01      	cmp	r3, #1
   b9778:	dd71      	ble.n	b985e <_strtod_l+0x8de>
   b977a:	4629      	mov	r1, r5
   b977c:	2201      	movs	r2, #1
   b977e:	4620      	mov	r0, r4
   b9780:	f001 f930 	bl	ba9e4 <__lshift>
   b9784:	4631      	mov	r1, r6
   b9786:	4605      	mov	r5, r0
   b9788:	f001 f99c 	bl	baac4 <__mcmp>
   b978c:	2800      	cmp	r0, #0
   b978e:	dd66      	ble.n	b985e <_strtod_l+0x8de>
   b9790:	9904      	ldr	r1, [sp, #16]
   b9792:	4a53      	ldr	r2, [pc, #332]	; (b98e0 <_strtod_l+0x960>)
   b9794:	465b      	mov	r3, fp
   b9796:	2900      	cmp	r1, #0
   b9798:	f000 8081 	beq.w	b989e <_strtod_l+0x91e>
   b979c:	ea02 010b 	and.w	r1, r2, fp
   b97a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b97a4:	dc7b      	bgt.n	b989e <_strtod_l+0x91e>
   b97a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b97aa:	f77f aea9 	ble.w	b9500 <_strtod_l+0x580>
   b97ae:	4b4d      	ldr	r3, [pc, #308]	; (b98e4 <_strtod_l+0x964>)
   b97b0:	4650      	mov	r0, sl
   b97b2:	4659      	mov	r1, fp
   b97b4:	2200      	movs	r2, #0
   b97b6:	f7fa fdef 	bl	b4398 <__aeabi_dmul>
   b97ba:	460b      	mov	r3, r1
   b97bc:	4303      	orrs	r3, r0
   b97be:	bf08      	it	eq
   b97c0:	2322      	moveq	r3, #34	; 0x22
   b97c2:	4682      	mov	sl, r0
   b97c4:	468b      	mov	fp, r1
   b97c6:	bf08      	it	eq
   b97c8:	6023      	streq	r3, [r4, #0]
   b97ca:	e62b      	b.n	b9424 <_strtod_l+0x4a4>
   b97cc:	f04f 32ff 	mov.w	r2, #4294967295
   b97d0:	fa02 f303 	lsl.w	r3, r2, r3
   b97d4:	ea03 0a0a 	and.w	sl, r3, sl
   b97d8:	e6e3      	b.n	b95a2 <_strtod_l+0x622>
   b97da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b97de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b97e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b97e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b97ea:	fa01 f308 	lsl.w	r3, r1, r8
   b97ee:	9308      	str	r3, [sp, #32]
   b97f0:	910d      	str	r1, [sp, #52]	; 0x34
   b97f2:	e746      	b.n	b9682 <_strtod_l+0x702>
   b97f4:	2300      	movs	r3, #0
   b97f6:	9308      	str	r3, [sp, #32]
   b97f8:	2301      	movs	r3, #1
   b97fa:	930d      	str	r3, [sp, #52]	; 0x34
   b97fc:	e741      	b.n	b9682 <_strtod_l+0x702>
   b97fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9800:	4642      	mov	r2, r8
   b9802:	4620      	mov	r0, r4
   b9804:	f001 f8ee 	bl	ba9e4 <__lshift>
   b9808:	9018      	str	r0, [sp, #96]	; 0x60
   b980a:	2800      	cmp	r0, #0
   b980c:	f47f af6b 	bne.w	b96e6 <_strtod_l+0x766>
   b9810:	e5fe      	b.n	b9410 <_strtod_l+0x490>
   b9812:	465f      	mov	r7, fp
   b9814:	d16e      	bne.n	b98f4 <_strtod_l+0x974>
   b9816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9818:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b981c:	b342      	cbz	r2, b9870 <_strtod_l+0x8f0>
   b981e:	4a32      	ldr	r2, [pc, #200]	; (b98e8 <_strtod_l+0x968>)
   b9820:	4293      	cmp	r3, r2
   b9822:	d128      	bne.n	b9876 <_strtod_l+0x8f6>
   b9824:	9b04      	ldr	r3, [sp, #16]
   b9826:	4651      	mov	r1, sl
   b9828:	b1eb      	cbz	r3, b9866 <_strtod_l+0x8e6>
   b982a:	4b2d      	ldr	r3, [pc, #180]	; (b98e0 <_strtod_l+0x960>)
   b982c:	403b      	ands	r3, r7
   b982e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9832:	f04f 32ff 	mov.w	r2, #4294967295
   b9836:	d819      	bhi.n	b986c <_strtod_l+0x8ec>
   b9838:	0d1b      	lsrs	r3, r3, #20
   b983a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b983e:	fa02 f303 	lsl.w	r3, r2, r3
   b9842:	4299      	cmp	r1, r3
   b9844:	d117      	bne.n	b9876 <_strtod_l+0x8f6>
   b9846:	4b29      	ldr	r3, [pc, #164]	; (b98ec <_strtod_l+0x96c>)
   b9848:	429f      	cmp	r7, r3
   b984a:	d102      	bne.n	b9852 <_strtod_l+0x8d2>
   b984c:	3101      	adds	r1, #1
   b984e:	f43f addf 	beq.w	b9410 <_strtod_l+0x490>
   b9852:	4b23      	ldr	r3, [pc, #140]	; (b98e0 <_strtod_l+0x960>)
   b9854:	403b      	ands	r3, r7
   b9856:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b985a:	f04f 0a00 	mov.w	sl, #0
   b985e:	9b04      	ldr	r3, [sp, #16]
   b9860:	2b00      	cmp	r3, #0
   b9862:	d1a4      	bne.n	b97ae <_strtod_l+0x82e>
   b9864:	e5de      	b.n	b9424 <_strtod_l+0x4a4>
   b9866:	f04f 33ff 	mov.w	r3, #4294967295
   b986a:	e7ea      	b.n	b9842 <_strtod_l+0x8c2>
   b986c:	4613      	mov	r3, r2
   b986e:	e7e8      	b.n	b9842 <_strtod_l+0x8c2>
   b9870:	ea53 030a 	orrs.w	r3, r3, sl
   b9874:	d08c      	beq.n	b9790 <_strtod_l+0x810>
   b9876:	9b08      	ldr	r3, [sp, #32]
   b9878:	b1db      	cbz	r3, b98b2 <_strtod_l+0x932>
   b987a:	423b      	tst	r3, r7
   b987c:	d0ef      	beq.n	b985e <_strtod_l+0x8de>
   b987e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9880:	9a04      	ldr	r2, [sp, #16]
   b9882:	4650      	mov	r0, sl
   b9884:	4659      	mov	r1, fp
   b9886:	b1c3      	cbz	r3, b98ba <_strtod_l+0x93a>
   b9888:	f7ff fb5b 	bl	b8f42 <sulp>
   b988c:	4602      	mov	r2, r0
   b988e:	460b      	mov	r3, r1
   b9890:	ec51 0b18 	vmov	r0, r1, d8
   b9894:	f7fa fbca 	bl	b402c <__adddf3>
   b9898:	4682      	mov	sl, r0
   b989a:	468b      	mov	fp, r1
   b989c:	e7df      	b.n	b985e <_strtod_l+0x8de>
   b989e:	4013      	ands	r3, r2
   b98a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b98a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b98a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b98ac:	f04f 3aff 	mov.w	sl, #4294967295
   b98b0:	e7d5      	b.n	b985e <_strtod_l+0x8de>
   b98b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b98b4:	ea13 0f0a 	tst.w	r3, sl
   b98b8:	e7e0      	b.n	b987c <_strtod_l+0x8fc>
   b98ba:	f7ff fb42 	bl	b8f42 <sulp>
   b98be:	4602      	mov	r2, r0
   b98c0:	460b      	mov	r3, r1
   b98c2:	ec51 0b18 	vmov	r0, r1, d8
   b98c6:	f7fa fbaf 	bl	b4028 <__aeabi_dsub>
   b98ca:	2200      	movs	r2, #0
   b98cc:	2300      	movs	r3, #0
   b98ce:	4682      	mov	sl, r0
   b98d0:	468b      	mov	fp, r1
   b98d2:	f7fa ffc9 	bl	b4868 <__aeabi_dcmpeq>
   b98d6:	2800      	cmp	r0, #0
   b98d8:	d0c1      	beq.n	b985e <_strtod_l+0x8de>
   b98da:	e611      	b.n	b9500 <_strtod_l+0x580>
   b98dc:	fffffc02 	.word	0xfffffc02
   b98e0:	7ff00000 	.word	0x7ff00000
   b98e4:	39500000 	.word	0x39500000
   b98e8:	000fffff 	.word	0x000fffff
   b98ec:	7fefffff 	.word	0x7fefffff
   b98f0:	000bb660 	.word	0x000bb660
   b98f4:	4631      	mov	r1, r6
   b98f6:	4628      	mov	r0, r5
   b98f8:	f001 fa62 	bl	badc0 <__ratio>
   b98fc:	ec59 8b10 	vmov	r8, r9, d0
   b9900:	ee10 0a10 	vmov	r0, s0
   b9904:	2200      	movs	r2, #0
   b9906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b990a:	4649      	mov	r1, r9
   b990c:	f7fa ffc0 	bl	b4890 <__aeabi_dcmple>
   b9910:	2800      	cmp	r0, #0
   b9912:	d07a      	beq.n	b9a0a <_strtod_l+0xa8a>
   b9914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9916:	2b00      	cmp	r3, #0
   b9918:	d04a      	beq.n	b99b0 <_strtod_l+0xa30>
   b991a:	4b95      	ldr	r3, [pc, #596]	; (b9b70 <_strtod_l+0xbf0>)
   b991c:	2200      	movs	r2, #0
   b991e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9922:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9b70 <_strtod_l+0xbf0>
   b9926:	f04f 0800 	mov.w	r8, #0
   b992a:	4b92      	ldr	r3, [pc, #584]	; (b9b74 <_strtod_l+0xbf4>)
   b992c:	403b      	ands	r3, r7
   b992e:	930d      	str	r3, [sp, #52]	; 0x34
   b9930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9932:	4b91      	ldr	r3, [pc, #580]	; (b9b78 <_strtod_l+0xbf8>)
   b9934:	429a      	cmp	r2, r3
   b9936:	f040 80b0 	bne.w	b9a9a <_strtod_l+0xb1a>
   b993a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b993e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9942:	ec4b ab10 	vmov	d0, sl, fp
   b9946:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b994a:	f001 f961 	bl	bac10 <__ulp>
   b994e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9952:	ec53 2b10 	vmov	r2, r3, d0
   b9956:	f7fa fd1f 	bl	b4398 <__aeabi_dmul>
   b995a:	4652      	mov	r2, sl
   b995c:	465b      	mov	r3, fp
   b995e:	f7fa fb65 	bl	b402c <__adddf3>
   b9962:	460b      	mov	r3, r1
   b9964:	4983      	ldr	r1, [pc, #524]	; (b9b74 <_strtod_l+0xbf4>)
   b9966:	4a85      	ldr	r2, [pc, #532]	; (b9b7c <_strtod_l+0xbfc>)
   b9968:	4019      	ands	r1, r3
   b996a:	4291      	cmp	r1, r2
   b996c:	4682      	mov	sl, r0
   b996e:	d960      	bls.n	b9a32 <_strtod_l+0xab2>
   b9970:	ee18 3a90 	vmov	r3, s17
   b9974:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9978:	4293      	cmp	r3, r2
   b997a:	d104      	bne.n	b9986 <_strtod_l+0xa06>
   b997c:	ee18 3a10 	vmov	r3, s16
   b9980:	3301      	adds	r3, #1
   b9982:	f43f ad45 	beq.w	b9410 <_strtod_l+0x490>
   b9986:	f8df b200 	ldr.w	fp, [pc, #512]	; b9b88 <_strtod_l+0xc08>
   b998a:	f04f 3aff 	mov.w	sl, #4294967295
   b998e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9990:	4620      	mov	r0, r4
   b9992:	f000 fe0b 	bl	ba5ac <_Bfree>
   b9996:	9905      	ldr	r1, [sp, #20]
   b9998:	4620      	mov	r0, r4
   b999a:	f000 fe07 	bl	ba5ac <_Bfree>
   b999e:	4631      	mov	r1, r6
   b99a0:	4620      	mov	r0, r4
   b99a2:	f000 fe03 	bl	ba5ac <_Bfree>
   b99a6:	4629      	mov	r1, r5
   b99a8:	4620      	mov	r0, r4
   b99aa:	f000 fdff 	bl	ba5ac <_Bfree>
   b99ae:	e61a      	b.n	b95e6 <_strtod_l+0x666>
   b99b0:	f1ba 0f00 	cmp.w	sl, #0
   b99b4:	d11b      	bne.n	b99ee <_strtod_l+0xa6e>
   b99b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b99ba:	b9f3      	cbnz	r3, b99fa <_strtod_l+0xa7a>
   b99bc:	4b6c      	ldr	r3, [pc, #432]	; (b9b70 <_strtod_l+0xbf0>)
   b99be:	2200      	movs	r2, #0
   b99c0:	4640      	mov	r0, r8
   b99c2:	4649      	mov	r1, r9
   b99c4:	f7fa ff5a 	bl	b487c <__aeabi_dcmplt>
   b99c8:	b9d0      	cbnz	r0, b9a00 <_strtod_l+0xa80>
   b99ca:	4640      	mov	r0, r8
   b99cc:	4649      	mov	r1, r9
   b99ce:	4b6c      	ldr	r3, [pc, #432]	; (b9b80 <_strtod_l+0xc00>)
   b99d0:	2200      	movs	r2, #0
   b99d2:	f7fa fce1 	bl	b4398 <__aeabi_dmul>
   b99d6:	4680      	mov	r8, r0
   b99d8:	4689      	mov	r9, r1
   b99da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b99de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b99e2:	9315      	str	r3, [sp, #84]	; 0x54
   b99e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b99e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b99ec:	e79d      	b.n	b992a <_strtod_l+0x9aa>
   b99ee:	f1ba 0f01 	cmp.w	sl, #1
   b99f2:	d102      	bne.n	b99fa <_strtod_l+0xa7a>
   b99f4:	2f00      	cmp	r7, #0
   b99f6:	f43f ad83 	beq.w	b9500 <_strtod_l+0x580>
   b99fa:	4b62      	ldr	r3, [pc, #392]	; (b9b84 <_strtod_l+0xc04>)
   b99fc:	2200      	movs	r2, #0
   b99fe:	e78e      	b.n	b991e <_strtod_l+0x99e>
   b9a00:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9b80 <_strtod_l+0xc00>
   b9a04:	f04f 0800 	mov.w	r8, #0
   b9a08:	e7e7      	b.n	b99da <_strtod_l+0xa5a>
   b9a0a:	4b5d      	ldr	r3, [pc, #372]	; (b9b80 <_strtod_l+0xc00>)
   b9a0c:	4640      	mov	r0, r8
   b9a0e:	4649      	mov	r1, r9
   b9a10:	2200      	movs	r2, #0
   b9a12:	f7fa fcc1 	bl	b4398 <__aeabi_dmul>
   b9a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9a18:	4680      	mov	r8, r0
   b9a1a:	4689      	mov	r9, r1
   b9a1c:	b933      	cbnz	r3, b9a2c <_strtod_l+0xaac>
   b9a1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9a22:	900e      	str	r0, [sp, #56]	; 0x38
   b9a24:	930f      	str	r3, [sp, #60]	; 0x3c
   b9a26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9a2a:	e7dd      	b.n	b99e8 <_strtod_l+0xa68>
   b9a2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9a30:	e7f9      	b.n	b9a26 <_strtod_l+0xaa6>
   b9a32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9a36:	9b04      	ldr	r3, [sp, #16]
   b9a38:	2b00      	cmp	r3, #0
   b9a3a:	d1a8      	bne.n	b998e <_strtod_l+0xa0e>
   b9a3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9a42:	0d1b      	lsrs	r3, r3, #20
   b9a44:	051b      	lsls	r3, r3, #20
   b9a46:	429a      	cmp	r2, r3
   b9a48:	d1a1      	bne.n	b998e <_strtod_l+0xa0e>
   b9a4a:	4640      	mov	r0, r8
   b9a4c:	4649      	mov	r1, r9
   b9a4e:	f7fb f849 	bl	b4ae4 <__aeabi_d2lz>
   b9a52:	f7fa fc73 	bl	b433c <__aeabi_l2d>
   b9a56:	4602      	mov	r2, r0
   b9a58:	460b      	mov	r3, r1
   b9a5a:	4640      	mov	r0, r8
   b9a5c:	4649      	mov	r1, r9
   b9a5e:	f7fa fae3 	bl	b4028 <__aeabi_dsub>
   b9a62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9a68:	ea43 030a 	orr.w	r3, r3, sl
   b9a6c:	4313      	orrs	r3, r2
   b9a6e:	4680      	mov	r8, r0
   b9a70:	4689      	mov	r9, r1
   b9a72:	d055      	beq.n	b9b20 <_strtod_l+0xba0>
   b9a74:	a336      	add	r3, pc, #216	; (adr r3, b9b50 <_strtod_l+0xbd0>)
   b9a76:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a7a:	f7fa feff 	bl	b487c <__aeabi_dcmplt>
   b9a7e:	2800      	cmp	r0, #0
   b9a80:	f47f acd0 	bne.w	b9424 <_strtod_l+0x4a4>
   b9a84:	a334      	add	r3, pc, #208	; (adr r3, b9b58 <_strtod_l+0xbd8>)
   b9a86:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a8a:	4640      	mov	r0, r8
   b9a8c:	4649      	mov	r1, r9
   b9a8e:	f7fa ff13 	bl	b48b8 <__aeabi_dcmpgt>
   b9a92:	2800      	cmp	r0, #0
   b9a94:	f43f af7b 	beq.w	b998e <_strtod_l+0xa0e>
   b9a98:	e4c4      	b.n	b9424 <_strtod_l+0x4a4>
   b9a9a:	9b04      	ldr	r3, [sp, #16]
   b9a9c:	b333      	cbz	r3, b9aec <_strtod_l+0xb6c>
   b9a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9aa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9aa4:	d822      	bhi.n	b9aec <_strtod_l+0xb6c>
   b9aa6:	a32e      	add	r3, pc, #184	; (adr r3, b9b60 <_strtod_l+0xbe0>)
   b9aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9aac:	4640      	mov	r0, r8
   b9aae:	4649      	mov	r1, r9
   b9ab0:	f7fa feee 	bl	b4890 <__aeabi_dcmple>
   b9ab4:	b1a0      	cbz	r0, b9ae0 <_strtod_l+0xb60>
   b9ab6:	4649      	mov	r1, r9
   b9ab8:	4640      	mov	r0, r8
   b9aba:	f7fa ff1d 	bl	b48f8 <__aeabi_d2uiz>
   b9abe:	2801      	cmp	r0, #1
   b9ac0:	bf38      	it	cc
   b9ac2:	2001      	movcc	r0, #1
   b9ac4:	f7fa fbee 	bl	b42a4 <__aeabi_ui2d>
   b9ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9aca:	4680      	mov	r8, r0
   b9acc:	4689      	mov	r9, r1
   b9ace:	bb23      	cbnz	r3, b9b1a <_strtod_l+0xb9a>
   b9ad0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9ad4:	9010      	str	r0, [sp, #64]	; 0x40
   b9ad6:	9311      	str	r3, [sp, #68]	; 0x44
   b9ad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b9adc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9ae2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9ae4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9ae8:	1a9b      	subs	r3, r3, r2
   b9aea:	9309      	str	r3, [sp, #36]	; 0x24
   b9aec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9af0:	eeb0 0a48 	vmov.f32	s0, s16
   b9af4:	eef0 0a68 	vmov.f32	s1, s17
   b9af8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9afc:	f001 f888 	bl	bac10 <__ulp>
   b9b00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9b04:	ec53 2b10 	vmov	r2, r3, d0
   b9b08:	f7fa fc46 	bl	b4398 <__aeabi_dmul>
   b9b0c:	ec53 2b18 	vmov	r2, r3, d8
   b9b10:	f7fa fa8c 	bl	b402c <__adddf3>
   b9b14:	4682      	mov	sl, r0
   b9b16:	468b      	mov	fp, r1
   b9b18:	e78d      	b.n	b9a36 <_strtod_l+0xab6>
   b9b1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9b1e:	e7db      	b.n	b9ad8 <_strtod_l+0xb58>
   b9b20:	a311      	add	r3, pc, #68	; (adr r3, b9b68 <_strtod_l+0xbe8>)
   b9b22:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b26:	f7fa fea9 	bl	b487c <__aeabi_dcmplt>
   b9b2a:	e7b2      	b.n	b9a92 <_strtod_l+0xb12>
   b9b2c:	2300      	movs	r3, #0
   b9b2e:	930a      	str	r3, [sp, #40]	; 0x28
   b9b30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9b34:	6013      	str	r3, [r2, #0]
   b9b36:	f7ff ba6b 	b.w	b9010 <_strtod_l+0x90>
   b9b3a:	2a65      	cmp	r2, #101	; 0x65
   b9b3c:	f43f ab5f 	beq.w	b91fe <_strtod_l+0x27e>
   b9b40:	2a45      	cmp	r2, #69	; 0x45
   b9b42:	f43f ab5c 	beq.w	b91fe <_strtod_l+0x27e>
   b9b46:	2301      	movs	r3, #1
   b9b48:	f7ff bb94 	b.w	b9274 <_strtod_l+0x2f4>
   b9b4c:	f3af 8000 	nop.w
   b9b50:	94a03595 	.word	0x94a03595
   b9b54:	3fdfffff 	.word	0x3fdfffff
   b9b58:	35afe535 	.word	0x35afe535
   b9b5c:	3fe00000 	.word	0x3fe00000
   b9b60:	ffc00000 	.word	0xffc00000
   b9b64:	41dfffff 	.word	0x41dfffff
   b9b68:	94a03595 	.word	0x94a03595
   b9b6c:	3fcfffff 	.word	0x3fcfffff
   b9b70:	3ff00000 	.word	0x3ff00000
   b9b74:	7ff00000 	.word	0x7ff00000
   b9b78:	7fe00000 	.word	0x7fe00000
   b9b7c:	7c9fffff 	.word	0x7c9fffff
   b9b80:	3fe00000 	.word	0x3fe00000
   b9b84:	bff00000 	.word	0xbff00000
   b9b88:	7fefffff 	.word	0x7fefffff

000b9b8c <strtof>:
   b9b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9b90:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b9c40 <strtof+0xb4>
   b9b94:	4b26      	ldr	r3, [pc, #152]	; (b9c30 <strtof+0xa4>)
   b9b96:	460a      	mov	r2, r1
   b9b98:	ed2d 8b02 	vpush	{d8}
   b9b9c:	4601      	mov	r1, r0
   b9b9e:	f8d8 0000 	ldr.w	r0, [r8]
   b9ba2:	f7ff f9ed 	bl	b8f80 <_strtod_l>
   b9ba6:	ec55 4b10 	vmov	r4, r5, d0
   b9baa:	ee10 2a10 	vmov	r2, s0
   b9bae:	ee10 0a10 	vmov	r0, s0
   b9bb2:	462b      	mov	r3, r5
   b9bb4:	4629      	mov	r1, r5
   b9bb6:	f7fa fe89 	bl	b48cc <__aeabi_dcmpun>
   b9bba:	b190      	cbz	r0, b9be2 <strtof+0x56>
   b9bbc:	2d00      	cmp	r5, #0
   b9bbe:	481d      	ldr	r0, [pc, #116]	; (b9c34 <strtof+0xa8>)
   b9bc0:	da09      	bge.n	b9bd6 <strtof+0x4a>
   b9bc2:	f001 f98d 	bl	baee0 <nanf>
   b9bc6:	eeb1 8a40 	vneg.f32	s16, s0
   b9bca:	eeb0 0a48 	vmov.f32	s0, s16
   b9bce:	ecbd 8b02 	vpop	{d8}
   b9bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9bd6:	ecbd 8b02 	vpop	{d8}
   b9bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9bde:	f001 b97f 	b.w	baee0 <nanf>
   b9be2:	4620      	mov	r0, r4
   b9be4:	4629      	mov	r1, r5
   b9be6:	f7fa fea7 	bl	b4938 <__aeabi_d2f>
   b9bea:	ee08 0a10 	vmov	s16, r0
   b9bee:	eddf 7a12 	vldr	s15, [pc, #72]	; b9c38 <strtof+0xac>
   b9bf2:	eeb0 7ac8 	vabs.f32	s14, s16
   b9bf6:	eeb4 7a67 	vcmp.f32	s14, s15
   b9bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9bfe:	dde4      	ble.n	b9bca <strtof+0x3e>
   b9c00:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   b9c04:	4b0d      	ldr	r3, [pc, #52]	; (b9c3c <strtof+0xb0>)
   b9c06:	f04f 32ff 	mov.w	r2, #4294967295
   b9c0a:	4620      	mov	r0, r4
   b9c0c:	4639      	mov	r1, r7
   b9c0e:	f7fa fe5d 	bl	b48cc <__aeabi_dcmpun>
   b9c12:	b940      	cbnz	r0, b9c26 <strtof+0x9a>
   b9c14:	4b09      	ldr	r3, [pc, #36]	; (b9c3c <strtof+0xb0>)
   b9c16:	f04f 32ff 	mov.w	r2, #4294967295
   b9c1a:	4620      	mov	r0, r4
   b9c1c:	4639      	mov	r1, r7
   b9c1e:	f7fa fe37 	bl	b4890 <__aeabi_dcmple>
   b9c22:	2800      	cmp	r0, #0
   b9c24:	d0d1      	beq.n	b9bca <strtof+0x3e>
   b9c26:	f8d8 3000 	ldr.w	r3, [r8]
   b9c2a:	2222      	movs	r2, #34	; 0x22
   b9c2c:	601a      	str	r2, [r3, #0]
   b9c2e:	e7cc      	b.n	b9bca <strtof+0x3e>
   b9c30:	2003e3a8 	.word	0x2003e3a8
   b9c34:	000baf94 	.word	0x000baf94
   b9c38:	7f7fffff 	.word	0x7f7fffff
   b9c3c:	7fefffff 	.word	0x7fefffff
   b9c40:	2003e33c 	.word	0x2003e33c

000b9c44 <_strtol_l.constprop.0>:
   b9c44:	2b01      	cmp	r3, #1
   b9c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9c4a:	d001      	beq.n	b9c50 <_strtol_l.constprop.0+0xc>
   b9c4c:	2b24      	cmp	r3, #36	; 0x24
   b9c4e:	d906      	bls.n	b9c5e <_strtol_l.constprop.0+0x1a>
   b9c50:	f7fc fe4c 	bl	b68ec <__errno>
   b9c54:	2316      	movs	r3, #22
   b9c56:	6003      	str	r3, [r0, #0]
   b9c58:	2000      	movs	r0, #0
   b9c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9c5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9d44 <_strtol_l.constprop.0+0x100>
   b9c62:	460d      	mov	r5, r1
   b9c64:	462e      	mov	r6, r5
   b9c66:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9c6a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9c6e:	f017 0708 	ands.w	r7, r7, #8
   b9c72:	d1f7      	bne.n	b9c64 <_strtol_l.constprop.0+0x20>
   b9c74:	2c2d      	cmp	r4, #45	; 0x2d
   b9c76:	d132      	bne.n	b9cde <_strtol_l.constprop.0+0x9a>
   b9c78:	782c      	ldrb	r4, [r5, #0]
   b9c7a:	2701      	movs	r7, #1
   b9c7c:	1cb5      	adds	r5, r6, #2
   b9c7e:	2b00      	cmp	r3, #0
   b9c80:	d05b      	beq.n	b9d3a <_strtol_l.constprop.0+0xf6>
   b9c82:	2b10      	cmp	r3, #16
   b9c84:	d109      	bne.n	b9c9a <_strtol_l.constprop.0+0x56>
   b9c86:	2c30      	cmp	r4, #48	; 0x30
   b9c88:	d107      	bne.n	b9c9a <_strtol_l.constprop.0+0x56>
   b9c8a:	782c      	ldrb	r4, [r5, #0]
   b9c8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9c90:	2c58      	cmp	r4, #88	; 0x58
   b9c92:	d14d      	bne.n	b9d30 <_strtol_l.constprop.0+0xec>
   b9c94:	786c      	ldrb	r4, [r5, #1]
   b9c96:	2310      	movs	r3, #16
   b9c98:	3502      	adds	r5, #2
   b9c9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9c9e:	f108 38ff 	add.w	r8, r8, #4294967295
   b9ca2:	f04f 0c00 	mov.w	ip, #0
   b9ca6:	fbb8 f9f3 	udiv	r9, r8, r3
   b9caa:	4666      	mov	r6, ip
   b9cac:	fb03 8a19 	mls	sl, r3, r9, r8
   b9cb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9cb4:	f1be 0f09 	cmp.w	lr, #9
   b9cb8:	d816      	bhi.n	b9ce8 <_strtol_l.constprop.0+0xa4>
   b9cba:	4674      	mov	r4, lr
   b9cbc:	42a3      	cmp	r3, r4
   b9cbe:	dd24      	ble.n	b9d0a <_strtol_l.constprop.0+0xc6>
   b9cc0:	f1bc 0f00 	cmp.w	ip, #0
   b9cc4:	db1e      	blt.n	b9d04 <_strtol_l.constprop.0+0xc0>
   b9cc6:	45b1      	cmp	r9, r6
   b9cc8:	d31c      	bcc.n	b9d04 <_strtol_l.constprop.0+0xc0>
   b9cca:	d101      	bne.n	b9cd0 <_strtol_l.constprop.0+0x8c>
   b9ccc:	45a2      	cmp	sl, r4
   b9cce:	db19      	blt.n	b9d04 <_strtol_l.constprop.0+0xc0>
   b9cd0:	fb06 4603 	mla	r6, r6, r3, r4
   b9cd4:	f04f 0c01 	mov.w	ip, #1
   b9cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9cdc:	e7e8      	b.n	b9cb0 <_strtol_l.constprop.0+0x6c>
   b9cde:	2c2b      	cmp	r4, #43	; 0x2b
   b9ce0:	bf04      	itt	eq
   b9ce2:	782c      	ldrbeq	r4, [r5, #0]
   b9ce4:	1cb5      	addeq	r5, r6, #2
   b9ce6:	e7ca      	b.n	b9c7e <_strtol_l.constprop.0+0x3a>
   b9ce8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9cec:	f1be 0f19 	cmp.w	lr, #25
   b9cf0:	d801      	bhi.n	b9cf6 <_strtol_l.constprop.0+0xb2>
   b9cf2:	3c37      	subs	r4, #55	; 0x37
   b9cf4:	e7e2      	b.n	b9cbc <_strtol_l.constprop.0+0x78>
   b9cf6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9cfa:	f1be 0f19 	cmp.w	lr, #25
   b9cfe:	d804      	bhi.n	b9d0a <_strtol_l.constprop.0+0xc6>
   b9d00:	3c57      	subs	r4, #87	; 0x57
   b9d02:	e7db      	b.n	b9cbc <_strtol_l.constprop.0+0x78>
   b9d04:	f04f 3cff 	mov.w	ip, #4294967295
   b9d08:	e7e6      	b.n	b9cd8 <_strtol_l.constprop.0+0x94>
   b9d0a:	f1bc 0f00 	cmp.w	ip, #0
   b9d0e:	da05      	bge.n	b9d1c <_strtol_l.constprop.0+0xd8>
   b9d10:	2322      	movs	r3, #34	; 0x22
   b9d12:	6003      	str	r3, [r0, #0]
   b9d14:	4646      	mov	r6, r8
   b9d16:	b942      	cbnz	r2, b9d2a <_strtol_l.constprop.0+0xe6>
   b9d18:	4630      	mov	r0, r6
   b9d1a:	e79e      	b.n	b9c5a <_strtol_l.constprop.0+0x16>
   b9d1c:	b107      	cbz	r7, b9d20 <_strtol_l.constprop.0+0xdc>
   b9d1e:	4276      	negs	r6, r6
   b9d20:	2a00      	cmp	r2, #0
   b9d22:	d0f9      	beq.n	b9d18 <_strtol_l.constprop.0+0xd4>
   b9d24:	f1bc 0f00 	cmp.w	ip, #0
   b9d28:	d000      	beq.n	b9d2c <_strtol_l.constprop.0+0xe8>
   b9d2a:	1e69      	subs	r1, r5, #1
   b9d2c:	6011      	str	r1, [r2, #0]
   b9d2e:	e7f3      	b.n	b9d18 <_strtol_l.constprop.0+0xd4>
   b9d30:	2430      	movs	r4, #48	; 0x30
   b9d32:	2b00      	cmp	r3, #0
   b9d34:	d1b1      	bne.n	b9c9a <_strtol_l.constprop.0+0x56>
   b9d36:	2308      	movs	r3, #8
   b9d38:	e7af      	b.n	b9c9a <_strtol_l.constprop.0+0x56>
   b9d3a:	2c30      	cmp	r4, #48	; 0x30
   b9d3c:	d0a5      	beq.n	b9c8a <_strtol_l.constprop.0+0x46>
   b9d3e:	230a      	movs	r3, #10
   b9d40:	e7ab      	b.n	b9c9a <_strtol_l.constprop.0+0x56>
   b9d42:	bf00      	nop
   b9d44:	000bb689 	.word	0x000bb689

000b9d48 <strtol>:
   b9d48:	4613      	mov	r3, r2
   b9d4a:	460a      	mov	r2, r1
   b9d4c:	4601      	mov	r1, r0
   b9d4e:	4802      	ldr	r0, [pc, #8]	; (b9d58 <strtol+0x10>)
   b9d50:	6800      	ldr	r0, [r0, #0]
   b9d52:	f7ff bf77 	b.w	b9c44 <_strtol_l.constprop.0>
   b9d56:	bf00      	nop
   b9d58:	2003e33c 	.word	0x2003e33c

000b9d5c <__register_exitproc>:
   b9d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9d60:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9e1c <__register_exitproc+0xc0>
   b9d64:	4606      	mov	r6, r0
   b9d66:	f8d8 0000 	ldr.w	r0, [r8]
   b9d6a:	461f      	mov	r7, r3
   b9d6c:	460d      	mov	r5, r1
   b9d6e:	4691      	mov	r9, r2
   b9d70:	f000 fbc6 	bl	ba500 <__retarget_lock_acquire_recursive>
   b9d74:	4b25      	ldr	r3, [pc, #148]	; (b9e0c <__register_exitproc+0xb0>)
   b9d76:	681c      	ldr	r4, [r3, #0]
   b9d78:	b934      	cbnz	r4, b9d88 <__register_exitproc+0x2c>
   b9d7a:	4c25      	ldr	r4, [pc, #148]	; (b9e10 <__register_exitproc+0xb4>)
   b9d7c:	601c      	str	r4, [r3, #0]
   b9d7e:	4b25      	ldr	r3, [pc, #148]	; (b9e14 <__register_exitproc+0xb8>)
   b9d80:	b113      	cbz	r3, b9d88 <__register_exitproc+0x2c>
   b9d82:	681b      	ldr	r3, [r3, #0]
   b9d84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9d88:	6863      	ldr	r3, [r4, #4]
   b9d8a:	2b1f      	cmp	r3, #31
   b9d8c:	dd07      	ble.n	b9d9e <__register_exitproc+0x42>
   b9d8e:	f8d8 0000 	ldr.w	r0, [r8]
   b9d92:	f000 fbb7 	bl	ba504 <__retarget_lock_release_recursive>
   b9d96:	f04f 30ff 	mov.w	r0, #4294967295
   b9d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9d9e:	b34e      	cbz	r6, b9df4 <__register_exitproc+0x98>
   b9da0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9da4:	b988      	cbnz	r0, b9dca <__register_exitproc+0x6e>
   b9da6:	4b1c      	ldr	r3, [pc, #112]	; (b9e18 <__register_exitproc+0xbc>)
   b9da8:	b923      	cbnz	r3, b9db4 <__register_exitproc+0x58>
   b9daa:	f8d8 0000 	ldr.w	r0, [r8]
   b9dae:	f000 fba8 	bl	ba502 <__retarget_lock_release>
   b9db2:	e7f0      	b.n	b9d96 <__register_exitproc+0x3a>
   b9db4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9db8:	f7fc fd60 	bl	b687c <malloc>
   b9dbc:	2800      	cmp	r0, #0
   b9dbe:	d0f4      	beq.n	b9daa <__register_exitproc+0x4e>
   b9dc0:	2300      	movs	r3, #0
   b9dc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9dc6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9dca:	6863      	ldr	r3, [r4, #4]
   b9dcc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9dd0:	2201      	movs	r2, #1
   b9dd2:	409a      	lsls	r2, r3
   b9dd4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9dd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9ddc:	4313      	orrs	r3, r2
   b9dde:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9de2:	2e02      	cmp	r6, #2
   b9de4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9de8:	bf02      	ittt	eq
   b9dea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9dee:	4313      	orreq	r3, r2
   b9df0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9df4:	6863      	ldr	r3, [r4, #4]
   b9df6:	f8d8 0000 	ldr.w	r0, [r8]
   b9dfa:	1c5a      	adds	r2, r3, #1
   b9dfc:	3302      	adds	r3, #2
   b9dfe:	6062      	str	r2, [r4, #4]
   b9e00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9e04:	f000 fb7e 	bl	ba504 <__retarget_lock_release_recursive>
   b9e08:	2000      	movs	r0, #0
   b9e0a:	e7c6      	b.n	b9d9a <__register_exitproc+0x3e>
   b9e0c:	2003e7ec 	.word	0x2003e7ec
   b9e10:	2003e760 	.word	0x2003e760
   b9e14:	00000000 	.word	0x00000000
   b9e18:	000b687d 	.word	0x000b687d
   b9e1c:	2003e3a0 	.word	0x2003e3a0

000b9e20 <rshift>:
   b9e20:	6903      	ldr	r3, [r0, #16]
   b9e22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9e2a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9e2e:	f100 0414 	add.w	r4, r0, #20
   b9e32:	dd45      	ble.n	b9ec0 <rshift+0xa0>
   b9e34:	f011 011f 	ands.w	r1, r1, #31
   b9e38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9e3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9e40:	d10c      	bne.n	b9e5c <rshift+0x3c>
   b9e42:	f100 0710 	add.w	r7, r0, #16
   b9e46:	4629      	mov	r1, r5
   b9e48:	42b1      	cmp	r1, r6
   b9e4a:	d334      	bcc.n	b9eb6 <rshift+0x96>
   b9e4c:	1a9b      	subs	r3, r3, r2
   b9e4e:	009b      	lsls	r3, r3, #2
   b9e50:	1eea      	subs	r2, r5, #3
   b9e52:	4296      	cmp	r6, r2
   b9e54:	bf38      	it	cc
   b9e56:	2300      	movcc	r3, #0
   b9e58:	4423      	add	r3, r4
   b9e5a:	e015      	b.n	b9e88 <rshift+0x68>
   b9e5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9e60:	f1c1 0820 	rsb	r8, r1, #32
   b9e64:	40cf      	lsrs	r7, r1
   b9e66:	f105 0e04 	add.w	lr, r5, #4
   b9e6a:	46a1      	mov	r9, r4
   b9e6c:	4576      	cmp	r6, lr
   b9e6e:	46f4      	mov	ip, lr
   b9e70:	d815      	bhi.n	b9e9e <rshift+0x7e>
   b9e72:	1a9a      	subs	r2, r3, r2
   b9e74:	0092      	lsls	r2, r2, #2
   b9e76:	3a04      	subs	r2, #4
   b9e78:	3501      	adds	r5, #1
   b9e7a:	42ae      	cmp	r6, r5
   b9e7c:	bf38      	it	cc
   b9e7e:	2200      	movcc	r2, #0
   b9e80:	18a3      	adds	r3, r4, r2
   b9e82:	50a7      	str	r7, [r4, r2]
   b9e84:	b107      	cbz	r7, b9e88 <rshift+0x68>
   b9e86:	3304      	adds	r3, #4
   b9e88:	1b1a      	subs	r2, r3, r4
   b9e8a:	42a3      	cmp	r3, r4
   b9e8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9e90:	bf08      	it	eq
   b9e92:	2300      	moveq	r3, #0
   b9e94:	6102      	str	r2, [r0, #16]
   b9e96:	bf08      	it	eq
   b9e98:	6143      	streq	r3, [r0, #20]
   b9e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9e9e:	f8dc c000 	ldr.w	ip, [ip]
   b9ea2:	fa0c fc08 	lsl.w	ip, ip, r8
   b9ea6:	ea4c 0707 	orr.w	r7, ip, r7
   b9eaa:	f849 7b04 	str.w	r7, [r9], #4
   b9eae:	f85e 7b04 	ldr.w	r7, [lr], #4
   b9eb2:	40cf      	lsrs	r7, r1
   b9eb4:	e7da      	b.n	b9e6c <rshift+0x4c>
   b9eb6:	f851 cb04 	ldr.w	ip, [r1], #4
   b9eba:	f847 cf04 	str.w	ip, [r7, #4]!
   b9ebe:	e7c3      	b.n	b9e48 <rshift+0x28>
   b9ec0:	4623      	mov	r3, r4
   b9ec2:	e7e1      	b.n	b9e88 <rshift+0x68>

000b9ec4 <__hexdig_fun>:
   b9ec4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9ec8:	2b09      	cmp	r3, #9
   b9eca:	d802      	bhi.n	b9ed2 <__hexdig_fun+0xe>
   b9ecc:	3820      	subs	r0, #32
   b9ece:	b2c0      	uxtb	r0, r0
   b9ed0:	4770      	bx	lr
   b9ed2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9ed6:	2b05      	cmp	r3, #5
   b9ed8:	d801      	bhi.n	b9ede <__hexdig_fun+0x1a>
   b9eda:	3847      	subs	r0, #71	; 0x47
   b9edc:	e7f7      	b.n	b9ece <__hexdig_fun+0xa>
   b9ede:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9ee2:	2b05      	cmp	r3, #5
   b9ee4:	d801      	bhi.n	b9eea <__hexdig_fun+0x26>
   b9ee6:	3827      	subs	r0, #39	; 0x27
   b9ee8:	e7f1      	b.n	b9ece <__hexdig_fun+0xa>
   b9eea:	2000      	movs	r0, #0
   b9eec:	4770      	bx	lr
	...

000b9ef0 <__gethex>:
   b9ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ef4:	ed2d 8b02 	vpush	{d8}
   b9ef8:	b089      	sub	sp, #36	; 0x24
   b9efa:	ee08 0a10 	vmov	s16, r0
   b9efe:	9304      	str	r3, [sp, #16]
   b9f00:	4bb4      	ldr	r3, [pc, #720]	; (ba1d4 <__gethex+0x2e4>)
   b9f02:	681b      	ldr	r3, [r3, #0]
   b9f04:	9301      	str	r3, [sp, #4]
   b9f06:	4618      	mov	r0, r3
   b9f08:	468b      	mov	fp, r1
   b9f0a:	4690      	mov	r8, r2
   b9f0c:	f7fa fde2 	bl	b4ad4 <strlen>
   b9f10:	9b01      	ldr	r3, [sp, #4]
   b9f12:	f8db 2000 	ldr.w	r2, [fp]
   b9f16:	4403      	add	r3, r0
   b9f18:	4682      	mov	sl, r0
   b9f1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9f1e:	9305      	str	r3, [sp, #20]
   b9f20:	1c93      	adds	r3, r2, #2
   b9f22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b9f26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9f2a:	32fe      	adds	r2, #254	; 0xfe
   b9f2c:	18d1      	adds	r1, r2, r3
   b9f2e:	461f      	mov	r7, r3
   b9f30:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9f34:	9100      	str	r1, [sp, #0]
   b9f36:	2830      	cmp	r0, #48	; 0x30
   b9f38:	d0f8      	beq.n	b9f2c <__gethex+0x3c>
   b9f3a:	f7ff ffc3 	bl	b9ec4 <__hexdig_fun>
   b9f3e:	4604      	mov	r4, r0
   b9f40:	2800      	cmp	r0, #0
   b9f42:	d13a      	bne.n	b9fba <__gethex+0xca>
   b9f44:	9901      	ldr	r1, [sp, #4]
   b9f46:	4652      	mov	r2, sl
   b9f48:	4638      	mov	r0, r7
   b9f4a:	f7fe ffe6 	bl	b8f1a <strncmp>
   b9f4e:	4605      	mov	r5, r0
   b9f50:	2800      	cmp	r0, #0
   b9f52:	d168      	bne.n	ba026 <__gethex+0x136>
   b9f54:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9f58:	eb07 060a 	add.w	r6, r7, sl
   b9f5c:	f7ff ffb2 	bl	b9ec4 <__hexdig_fun>
   b9f60:	2800      	cmp	r0, #0
   b9f62:	d062      	beq.n	ba02a <__gethex+0x13a>
   b9f64:	4633      	mov	r3, r6
   b9f66:	7818      	ldrb	r0, [r3, #0]
   b9f68:	2830      	cmp	r0, #48	; 0x30
   b9f6a:	461f      	mov	r7, r3
   b9f6c:	f103 0301 	add.w	r3, r3, #1
   b9f70:	d0f9      	beq.n	b9f66 <__gethex+0x76>
   b9f72:	f7ff ffa7 	bl	b9ec4 <__hexdig_fun>
   b9f76:	2301      	movs	r3, #1
   b9f78:	fab0 f480 	clz	r4, r0
   b9f7c:	0964      	lsrs	r4, r4, #5
   b9f7e:	4635      	mov	r5, r6
   b9f80:	9300      	str	r3, [sp, #0]
   b9f82:	463a      	mov	r2, r7
   b9f84:	4616      	mov	r6, r2
   b9f86:	3201      	adds	r2, #1
   b9f88:	7830      	ldrb	r0, [r6, #0]
   b9f8a:	f7ff ff9b 	bl	b9ec4 <__hexdig_fun>
   b9f8e:	2800      	cmp	r0, #0
   b9f90:	d1f8      	bne.n	b9f84 <__gethex+0x94>
   b9f92:	9901      	ldr	r1, [sp, #4]
   b9f94:	4652      	mov	r2, sl
   b9f96:	4630      	mov	r0, r6
   b9f98:	f7fe ffbf 	bl	b8f1a <strncmp>
   b9f9c:	b980      	cbnz	r0, b9fc0 <__gethex+0xd0>
   b9f9e:	b94d      	cbnz	r5, b9fb4 <__gethex+0xc4>
   b9fa0:	eb06 050a 	add.w	r5, r6, sl
   b9fa4:	462a      	mov	r2, r5
   b9fa6:	4616      	mov	r6, r2
   b9fa8:	3201      	adds	r2, #1
   b9faa:	7830      	ldrb	r0, [r6, #0]
   b9fac:	f7ff ff8a 	bl	b9ec4 <__hexdig_fun>
   b9fb0:	2800      	cmp	r0, #0
   b9fb2:	d1f8      	bne.n	b9fa6 <__gethex+0xb6>
   b9fb4:	1bad      	subs	r5, r5, r6
   b9fb6:	00ad      	lsls	r5, r5, #2
   b9fb8:	e004      	b.n	b9fc4 <__gethex+0xd4>
   b9fba:	2400      	movs	r4, #0
   b9fbc:	4625      	mov	r5, r4
   b9fbe:	e7e0      	b.n	b9f82 <__gethex+0x92>
   b9fc0:	2d00      	cmp	r5, #0
   b9fc2:	d1f7      	bne.n	b9fb4 <__gethex+0xc4>
   b9fc4:	7833      	ldrb	r3, [r6, #0]
   b9fc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9fca:	2b50      	cmp	r3, #80	; 0x50
   b9fcc:	d13b      	bne.n	ba046 <__gethex+0x156>
   b9fce:	7873      	ldrb	r3, [r6, #1]
   b9fd0:	2b2b      	cmp	r3, #43	; 0x2b
   b9fd2:	d02c      	beq.n	ba02e <__gethex+0x13e>
   b9fd4:	2b2d      	cmp	r3, #45	; 0x2d
   b9fd6:	d02e      	beq.n	ba036 <__gethex+0x146>
   b9fd8:	1c71      	adds	r1, r6, #1
   b9fda:	f04f 0900 	mov.w	r9, #0
   b9fde:	7808      	ldrb	r0, [r1, #0]
   b9fe0:	f7ff ff70 	bl	b9ec4 <__hexdig_fun>
   b9fe4:	1e43      	subs	r3, r0, #1
   b9fe6:	b2db      	uxtb	r3, r3
   b9fe8:	2b18      	cmp	r3, #24
   b9fea:	d82c      	bhi.n	ba046 <__gethex+0x156>
   b9fec:	f1a0 0210 	sub.w	r2, r0, #16
   b9ff0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b9ff4:	f7ff ff66 	bl	b9ec4 <__hexdig_fun>
   b9ff8:	1e43      	subs	r3, r0, #1
   b9ffa:	b2db      	uxtb	r3, r3
   b9ffc:	2b18      	cmp	r3, #24
   b9ffe:	d91d      	bls.n	ba03c <__gethex+0x14c>
   ba000:	f1b9 0f00 	cmp.w	r9, #0
   ba004:	d000      	beq.n	ba008 <__gethex+0x118>
   ba006:	4252      	negs	r2, r2
   ba008:	4415      	add	r5, r2
   ba00a:	f8cb 1000 	str.w	r1, [fp]
   ba00e:	b1e4      	cbz	r4, ba04a <__gethex+0x15a>
   ba010:	9b00      	ldr	r3, [sp, #0]
   ba012:	2b00      	cmp	r3, #0
   ba014:	bf14      	ite	ne
   ba016:	2700      	movne	r7, #0
   ba018:	2706      	moveq	r7, #6
   ba01a:	4638      	mov	r0, r7
   ba01c:	b009      	add	sp, #36	; 0x24
   ba01e:	ecbd 8b02 	vpop	{d8}
   ba022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba026:	463e      	mov	r6, r7
   ba028:	4625      	mov	r5, r4
   ba02a:	2401      	movs	r4, #1
   ba02c:	e7ca      	b.n	b9fc4 <__gethex+0xd4>
   ba02e:	f04f 0900 	mov.w	r9, #0
   ba032:	1cb1      	adds	r1, r6, #2
   ba034:	e7d3      	b.n	b9fde <__gethex+0xee>
   ba036:	f04f 0901 	mov.w	r9, #1
   ba03a:	e7fa      	b.n	ba032 <__gethex+0x142>
   ba03c:	230a      	movs	r3, #10
   ba03e:	fb03 0202 	mla	r2, r3, r2, r0
   ba042:	3a10      	subs	r2, #16
   ba044:	e7d4      	b.n	b9ff0 <__gethex+0x100>
   ba046:	4631      	mov	r1, r6
   ba048:	e7df      	b.n	ba00a <__gethex+0x11a>
   ba04a:	1bf3      	subs	r3, r6, r7
   ba04c:	3b01      	subs	r3, #1
   ba04e:	4621      	mov	r1, r4
   ba050:	2b07      	cmp	r3, #7
   ba052:	dc0b      	bgt.n	ba06c <__gethex+0x17c>
   ba054:	ee18 0a10 	vmov	r0, s16
   ba058:	f000 fa68 	bl	ba52c <_Balloc>
   ba05c:	4604      	mov	r4, r0
   ba05e:	b940      	cbnz	r0, ba072 <__gethex+0x182>
   ba060:	4b5d      	ldr	r3, [pc, #372]	; (ba1d8 <__gethex+0x2e8>)
   ba062:	4602      	mov	r2, r0
   ba064:	21de      	movs	r1, #222	; 0xde
   ba066:	485d      	ldr	r0, [pc, #372]	; (ba1dc <__gethex+0x2ec>)
   ba068:	f7fc fc48 	bl	b68fc <__assert_func>
   ba06c:	3101      	adds	r1, #1
   ba06e:	105b      	asrs	r3, r3, #1
   ba070:	e7ee      	b.n	ba050 <__gethex+0x160>
   ba072:	f100 0914 	add.w	r9, r0, #20
   ba076:	f04f 0b00 	mov.w	fp, #0
   ba07a:	f1ca 0301 	rsb	r3, sl, #1
   ba07e:	f8cd 9008 	str.w	r9, [sp, #8]
   ba082:	f8cd b000 	str.w	fp, [sp]
   ba086:	9306      	str	r3, [sp, #24]
   ba088:	42b7      	cmp	r7, r6
   ba08a:	d340      	bcc.n	ba10e <__gethex+0x21e>
   ba08c:	9802      	ldr	r0, [sp, #8]
   ba08e:	9b00      	ldr	r3, [sp, #0]
   ba090:	f840 3b04 	str.w	r3, [r0], #4
   ba094:	eba0 0009 	sub.w	r0, r0, r9
   ba098:	1080      	asrs	r0, r0, #2
   ba09a:	0146      	lsls	r6, r0, #5
   ba09c:	6120      	str	r0, [r4, #16]
   ba09e:	4618      	mov	r0, r3
   ba0a0:	f000 fb36 	bl	ba710 <__hi0bits>
   ba0a4:	1a30      	subs	r0, r6, r0
   ba0a6:	f8d8 6000 	ldr.w	r6, [r8]
   ba0aa:	42b0      	cmp	r0, r6
   ba0ac:	dd63      	ble.n	ba176 <__gethex+0x286>
   ba0ae:	1b87      	subs	r7, r0, r6
   ba0b0:	4639      	mov	r1, r7
   ba0b2:	4620      	mov	r0, r4
   ba0b4:	f000 feda 	bl	bae6c <__any_on>
   ba0b8:	4682      	mov	sl, r0
   ba0ba:	b1a8      	cbz	r0, ba0e8 <__gethex+0x1f8>
   ba0bc:	1e7b      	subs	r3, r7, #1
   ba0be:	1159      	asrs	r1, r3, #5
   ba0c0:	f003 021f 	and.w	r2, r3, #31
   ba0c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba0c8:	f04f 0a01 	mov.w	sl, #1
   ba0cc:	fa0a f202 	lsl.w	r2, sl, r2
   ba0d0:	420a      	tst	r2, r1
   ba0d2:	d009      	beq.n	ba0e8 <__gethex+0x1f8>
   ba0d4:	4553      	cmp	r3, sl
   ba0d6:	dd05      	ble.n	ba0e4 <__gethex+0x1f4>
   ba0d8:	1eb9      	subs	r1, r7, #2
   ba0da:	4620      	mov	r0, r4
   ba0dc:	f000 fec6 	bl	bae6c <__any_on>
   ba0e0:	2800      	cmp	r0, #0
   ba0e2:	d145      	bne.n	ba170 <__gethex+0x280>
   ba0e4:	f04f 0a02 	mov.w	sl, #2
   ba0e8:	4639      	mov	r1, r7
   ba0ea:	4620      	mov	r0, r4
   ba0ec:	f7ff fe98 	bl	b9e20 <rshift>
   ba0f0:	443d      	add	r5, r7
   ba0f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba0f6:	42ab      	cmp	r3, r5
   ba0f8:	da4c      	bge.n	ba194 <__gethex+0x2a4>
   ba0fa:	ee18 0a10 	vmov	r0, s16
   ba0fe:	4621      	mov	r1, r4
   ba100:	f000 fa54 	bl	ba5ac <_Bfree>
   ba104:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba106:	2300      	movs	r3, #0
   ba108:	6013      	str	r3, [r2, #0]
   ba10a:	27a3      	movs	r7, #163	; 0xa3
   ba10c:	e785      	b.n	ba01a <__gethex+0x12a>
   ba10e:	1e73      	subs	r3, r6, #1
   ba110:	9a05      	ldr	r2, [sp, #20]
   ba112:	9303      	str	r3, [sp, #12]
   ba114:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba118:	4293      	cmp	r3, r2
   ba11a:	d019      	beq.n	ba150 <__gethex+0x260>
   ba11c:	f1bb 0f20 	cmp.w	fp, #32
   ba120:	d107      	bne.n	ba132 <__gethex+0x242>
   ba122:	9b02      	ldr	r3, [sp, #8]
   ba124:	9a00      	ldr	r2, [sp, #0]
   ba126:	f843 2b04 	str.w	r2, [r3], #4
   ba12a:	9302      	str	r3, [sp, #8]
   ba12c:	2300      	movs	r3, #0
   ba12e:	9300      	str	r3, [sp, #0]
   ba130:	469b      	mov	fp, r3
   ba132:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba136:	f7ff fec5 	bl	b9ec4 <__hexdig_fun>
   ba13a:	9b00      	ldr	r3, [sp, #0]
   ba13c:	f000 000f 	and.w	r0, r0, #15
   ba140:	fa00 f00b 	lsl.w	r0, r0, fp
   ba144:	4303      	orrs	r3, r0
   ba146:	9300      	str	r3, [sp, #0]
   ba148:	f10b 0b04 	add.w	fp, fp, #4
   ba14c:	9b03      	ldr	r3, [sp, #12]
   ba14e:	e00d      	b.n	ba16c <__gethex+0x27c>
   ba150:	9b03      	ldr	r3, [sp, #12]
   ba152:	9a06      	ldr	r2, [sp, #24]
   ba154:	4413      	add	r3, r2
   ba156:	42bb      	cmp	r3, r7
   ba158:	d3e0      	bcc.n	ba11c <__gethex+0x22c>
   ba15a:	4618      	mov	r0, r3
   ba15c:	9901      	ldr	r1, [sp, #4]
   ba15e:	9307      	str	r3, [sp, #28]
   ba160:	4652      	mov	r2, sl
   ba162:	f7fe feda 	bl	b8f1a <strncmp>
   ba166:	9b07      	ldr	r3, [sp, #28]
   ba168:	2800      	cmp	r0, #0
   ba16a:	d1d7      	bne.n	ba11c <__gethex+0x22c>
   ba16c:	461e      	mov	r6, r3
   ba16e:	e78b      	b.n	ba088 <__gethex+0x198>
   ba170:	f04f 0a03 	mov.w	sl, #3
   ba174:	e7b8      	b.n	ba0e8 <__gethex+0x1f8>
   ba176:	da0a      	bge.n	ba18e <__gethex+0x29e>
   ba178:	1a37      	subs	r7, r6, r0
   ba17a:	4621      	mov	r1, r4
   ba17c:	ee18 0a10 	vmov	r0, s16
   ba180:	463a      	mov	r2, r7
   ba182:	f000 fc2f 	bl	ba9e4 <__lshift>
   ba186:	1bed      	subs	r5, r5, r7
   ba188:	4604      	mov	r4, r0
   ba18a:	f100 0914 	add.w	r9, r0, #20
   ba18e:	f04f 0a00 	mov.w	sl, #0
   ba192:	e7ae      	b.n	ba0f2 <__gethex+0x202>
   ba194:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba198:	42a8      	cmp	r0, r5
   ba19a:	dd72      	ble.n	ba282 <__gethex+0x392>
   ba19c:	1b45      	subs	r5, r0, r5
   ba19e:	42ae      	cmp	r6, r5
   ba1a0:	dc36      	bgt.n	ba210 <__gethex+0x320>
   ba1a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba1a6:	2b02      	cmp	r3, #2
   ba1a8:	d02a      	beq.n	ba200 <__gethex+0x310>
   ba1aa:	2b03      	cmp	r3, #3
   ba1ac:	d02c      	beq.n	ba208 <__gethex+0x318>
   ba1ae:	2b01      	cmp	r3, #1
   ba1b0:	d11c      	bne.n	ba1ec <__gethex+0x2fc>
   ba1b2:	42ae      	cmp	r6, r5
   ba1b4:	d11a      	bne.n	ba1ec <__gethex+0x2fc>
   ba1b6:	2e01      	cmp	r6, #1
   ba1b8:	d112      	bne.n	ba1e0 <__gethex+0x2f0>
   ba1ba:	9a04      	ldr	r2, [sp, #16]
   ba1bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba1c0:	6013      	str	r3, [r2, #0]
   ba1c2:	2301      	movs	r3, #1
   ba1c4:	6123      	str	r3, [r4, #16]
   ba1c6:	f8c9 3000 	str.w	r3, [r9]
   ba1ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba1cc:	2762      	movs	r7, #98	; 0x62
   ba1ce:	601c      	str	r4, [r3, #0]
   ba1d0:	e723      	b.n	ba01a <__gethex+0x12a>
   ba1d2:	bf00      	nop
   ba1d4:	000bb820 	.word	0x000bb820
   ba1d8:	000bb789 	.word	0x000bb789
   ba1dc:	000bb79a 	.word	0x000bb79a
   ba1e0:	1e71      	subs	r1, r6, #1
   ba1e2:	4620      	mov	r0, r4
   ba1e4:	f000 fe42 	bl	bae6c <__any_on>
   ba1e8:	2800      	cmp	r0, #0
   ba1ea:	d1e6      	bne.n	ba1ba <__gethex+0x2ca>
   ba1ec:	ee18 0a10 	vmov	r0, s16
   ba1f0:	4621      	mov	r1, r4
   ba1f2:	f000 f9db 	bl	ba5ac <_Bfree>
   ba1f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba1f8:	2300      	movs	r3, #0
   ba1fa:	6013      	str	r3, [r2, #0]
   ba1fc:	2750      	movs	r7, #80	; 0x50
   ba1fe:	e70c      	b.n	ba01a <__gethex+0x12a>
   ba200:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba202:	2b00      	cmp	r3, #0
   ba204:	d1f2      	bne.n	ba1ec <__gethex+0x2fc>
   ba206:	e7d8      	b.n	ba1ba <__gethex+0x2ca>
   ba208:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba20a:	2b00      	cmp	r3, #0
   ba20c:	d1d5      	bne.n	ba1ba <__gethex+0x2ca>
   ba20e:	e7ed      	b.n	ba1ec <__gethex+0x2fc>
   ba210:	1e6f      	subs	r7, r5, #1
   ba212:	f1ba 0f00 	cmp.w	sl, #0
   ba216:	d131      	bne.n	ba27c <__gethex+0x38c>
   ba218:	b127      	cbz	r7, ba224 <__gethex+0x334>
   ba21a:	4639      	mov	r1, r7
   ba21c:	4620      	mov	r0, r4
   ba21e:	f000 fe25 	bl	bae6c <__any_on>
   ba222:	4682      	mov	sl, r0
   ba224:	117b      	asrs	r3, r7, #5
   ba226:	2101      	movs	r1, #1
   ba228:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba22c:	f007 071f 	and.w	r7, r7, #31
   ba230:	fa01 f707 	lsl.w	r7, r1, r7
   ba234:	421f      	tst	r7, r3
   ba236:	4629      	mov	r1, r5
   ba238:	4620      	mov	r0, r4
   ba23a:	bf18      	it	ne
   ba23c:	f04a 0a02 	orrne.w	sl, sl, #2
   ba240:	1b76      	subs	r6, r6, r5
   ba242:	f7ff fded 	bl	b9e20 <rshift>
   ba246:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba24a:	2702      	movs	r7, #2
   ba24c:	f1ba 0f00 	cmp.w	sl, #0
   ba250:	d048      	beq.n	ba2e4 <__gethex+0x3f4>
   ba252:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba256:	2b02      	cmp	r3, #2
   ba258:	d015      	beq.n	ba286 <__gethex+0x396>
   ba25a:	2b03      	cmp	r3, #3
   ba25c:	d017      	beq.n	ba28e <__gethex+0x39e>
   ba25e:	2b01      	cmp	r3, #1
   ba260:	d109      	bne.n	ba276 <__gethex+0x386>
   ba262:	f01a 0f02 	tst.w	sl, #2
   ba266:	d006      	beq.n	ba276 <__gethex+0x386>
   ba268:	f8d9 0000 	ldr.w	r0, [r9]
   ba26c:	ea4a 0a00 	orr.w	sl, sl, r0
   ba270:	f01a 0f01 	tst.w	sl, #1
   ba274:	d10e      	bne.n	ba294 <__gethex+0x3a4>
   ba276:	f047 0710 	orr.w	r7, r7, #16
   ba27a:	e033      	b.n	ba2e4 <__gethex+0x3f4>
   ba27c:	f04f 0a01 	mov.w	sl, #1
   ba280:	e7d0      	b.n	ba224 <__gethex+0x334>
   ba282:	2701      	movs	r7, #1
   ba284:	e7e2      	b.n	ba24c <__gethex+0x35c>
   ba286:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba288:	f1c3 0301 	rsb	r3, r3, #1
   ba28c:	9315      	str	r3, [sp, #84]	; 0x54
   ba28e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba290:	2b00      	cmp	r3, #0
   ba292:	d0f0      	beq.n	ba276 <__gethex+0x386>
   ba294:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba298:	f104 0314 	add.w	r3, r4, #20
   ba29c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba2a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba2a4:	f04f 0c00 	mov.w	ip, #0
   ba2a8:	4618      	mov	r0, r3
   ba2aa:	f853 2b04 	ldr.w	r2, [r3], #4
   ba2ae:	f1b2 3fff 	cmp.w	r2, #4294967295
   ba2b2:	d01c      	beq.n	ba2ee <__gethex+0x3fe>
   ba2b4:	3201      	adds	r2, #1
   ba2b6:	6002      	str	r2, [r0, #0]
   ba2b8:	2f02      	cmp	r7, #2
   ba2ba:	f104 0314 	add.w	r3, r4, #20
   ba2be:	d13f      	bne.n	ba340 <__gethex+0x450>
   ba2c0:	f8d8 2000 	ldr.w	r2, [r8]
   ba2c4:	3a01      	subs	r2, #1
   ba2c6:	42b2      	cmp	r2, r6
   ba2c8:	d10a      	bne.n	ba2e0 <__gethex+0x3f0>
   ba2ca:	1171      	asrs	r1, r6, #5
   ba2cc:	2201      	movs	r2, #1
   ba2ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba2d2:	f006 061f 	and.w	r6, r6, #31
   ba2d6:	fa02 f606 	lsl.w	r6, r2, r6
   ba2da:	421e      	tst	r6, r3
   ba2dc:	bf18      	it	ne
   ba2de:	4617      	movne	r7, r2
   ba2e0:	f047 0720 	orr.w	r7, r7, #32
   ba2e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba2e6:	601c      	str	r4, [r3, #0]
   ba2e8:	9b04      	ldr	r3, [sp, #16]
   ba2ea:	601d      	str	r5, [r3, #0]
   ba2ec:	e695      	b.n	ba01a <__gethex+0x12a>
   ba2ee:	4299      	cmp	r1, r3
   ba2f0:	f843 cc04 	str.w	ip, [r3, #-4]
   ba2f4:	d8d8      	bhi.n	ba2a8 <__gethex+0x3b8>
   ba2f6:	68a3      	ldr	r3, [r4, #8]
   ba2f8:	459b      	cmp	fp, r3
   ba2fa:	db19      	blt.n	ba330 <__gethex+0x440>
   ba2fc:	6861      	ldr	r1, [r4, #4]
   ba2fe:	ee18 0a10 	vmov	r0, s16
   ba302:	3101      	adds	r1, #1
   ba304:	f000 f912 	bl	ba52c <_Balloc>
   ba308:	4681      	mov	r9, r0
   ba30a:	b918      	cbnz	r0, ba314 <__gethex+0x424>
   ba30c:	4b1a      	ldr	r3, [pc, #104]	; (ba378 <__gethex+0x488>)
   ba30e:	4602      	mov	r2, r0
   ba310:	2184      	movs	r1, #132	; 0x84
   ba312:	e6a8      	b.n	ba066 <__gethex+0x176>
   ba314:	6922      	ldr	r2, [r4, #16]
   ba316:	3202      	adds	r2, #2
   ba318:	f104 010c 	add.w	r1, r4, #12
   ba31c:	0092      	lsls	r2, r2, #2
   ba31e:	300c      	adds	r0, #12
   ba320:	f7fe fd78 	bl	b8e14 <memcpy>
   ba324:	4621      	mov	r1, r4
   ba326:	ee18 0a10 	vmov	r0, s16
   ba32a:	f000 f93f 	bl	ba5ac <_Bfree>
   ba32e:	464c      	mov	r4, r9
   ba330:	6923      	ldr	r3, [r4, #16]
   ba332:	1c5a      	adds	r2, r3, #1
   ba334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba338:	6122      	str	r2, [r4, #16]
   ba33a:	2201      	movs	r2, #1
   ba33c:	615a      	str	r2, [r3, #20]
   ba33e:	e7bb      	b.n	ba2b8 <__gethex+0x3c8>
   ba340:	6922      	ldr	r2, [r4, #16]
   ba342:	455a      	cmp	r2, fp
   ba344:	dd0b      	ble.n	ba35e <__gethex+0x46e>
   ba346:	2101      	movs	r1, #1
   ba348:	4620      	mov	r0, r4
   ba34a:	f7ff fd69 	bl	b9e20 <rshift>
   ba34e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba352:	3501      	adds	r5, #1
   ba354:	42ab      	cmp	r3, r5
   ba356:	f6ff aed0 	blt.w	ba0fa <__gethex+0x20a>
   ba35a:	2701      	movs	r7, #1
   ba35c:	e7c0      	b.n	ba2e0 <__gethex+0x3f0>
   ba35e:	f016 061f 	ands.w	r6, r6, #31
   ba362:	d0fa      	beq.n	ba35a <__gethex+0x46a>
   ba364:	4453      	add	r3, sl
   ba366:	f1c6 0620 	rsb	r6, r6, #32
   ba36a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba36e:	f000 f9cf 	bl	ba710 <__hi0bits>
   ba372:	42b0      	cmp	r0, r6
   ba374:	dbe7      	blt.n	ba346 <__gethex+0x456>
   ba376:	e7f0      	b.n	ba35a <__gethex+0x46a>
   ba378:	000bb789 	.word	0x000bb789

000ba37c <L_shift>:
   ba37c:	f1c2 0208 	rsb	r2, r2, #8
   ba380:	0092      	lsls	r2, r2, #2
   ba382:	b570      	push	{r4, r5, r6, lr}
   ba384:	f1c2 0620 	rsb	r6, r2, #32
   ba388:	6843      	ldr	r3, [r0, #4]
   ba38a:	6804      	ldr	r4, [r0, #0]
   ba38c:	fa03 f506 	lsl.w	r5, r3, r6
   ba390:	432c      	orrs	r4, r5
   ba392:	40d3      	lsrs	r3, r2
   ba394:	6004      	str	r4, [r0, #0]
   ba396:	f840 3f04 	str.w	r3, [r0, #4]!
   ba39a:	4288      	cmp	r0, r1
   ba39c:	d3f4      	bcc.n	ba388 <L_shift+0xc>
   ba39e:	bd70      	pop	{r4, r5, r6, pc}

000ba3a0 <__match>:
   ba3a0:	b530      	push	{r4, r5, lr}
   ba3a2:	6803      	ldr	r3, [r0, #0]
   ba3a4:	3301      	adds	r3, #1
   ba3a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba3aa:	b914      	cbnz	r4, ba3b2 <__match+0x12>
   ba3ac:	6003      	str	r3, [r0, #0]
   ba3ae:	2001      	movs	r0, #1
   ba3b0:	bd30      	pop	{r4, r5, pc}
   ba3b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba3b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba3ba:	2d19      	cmp	r5, #25
   ba3bc:	bf98      	it	ls
   ba3be:	3220      	addls	r2, #32
   ba3c0:	42a2      	cmp	r2, r4
   ba3c2:	d0f0      	beq.n	ba3a6 <__match+0x6>
   ba3c4:	2000      	movs	r0, #0
   ba3c6:	e7f3      	b.n	ba3b0 <__match+0x10>

000ba3c8 <__hexnan>:
   ba3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3cc:	680b      	ldr	r3, [r1, #0]
   ba3ce:	115e      	asrs	r6, r3, #5
   ba3d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba3d4:	f013 031f 	ands.w	r3, r3, #31
   ba3d8:	b087      	sub	sp, #28
   ba3da:	bf18      	it	ne
   ba3dc:	3604      	addne	r6, #4
   ba3de:	2500      	movs	r5, #0
   ba3e0:	1f37      	subs	r7, r6, #4
   ba3e2:	4690      	mov	r8, r2
   ba3e4:	6802      	ldr	r2, [r0, #0]
   ba3e6:	9301      	str	r3, [sp, #4]
   ba3e8:	4682      	mov	sl, r0
   ba3ea:	f846 5c04 	str.w	r5, [r6, #-4]
   ba3ee:	46b9      	mov	r9, r7
   ba3f0:	463c      	mov	r4, r7
   ba3f2:	9502      	str	r5, [sp, #8]
   ba3f4:	46ab      	mov	fp, r5
   ba3f6:	7851      	ldrb	r1, [r2, #1]
   ba3f8:	1c53      	adds	r3, r2, #1
   ba3fa:	9303      	str	r3, [sp, #12]
   ba3fc:	b341      	cbz	r1, ba450 <__hexnan+0x88>
   ba3fe:	4608      	mov	r0, r1
   ba400:	9205      	str	r2, [sp, #20]
   ba402:	9104      	str	r1, [sp, #16]
   ba404:	f7ff fd5e 	bl	b9ec4 <__hexdig_fun>
   ba408:	2800      	cmp	r0, #0
   ba40a:	d14f      	bne.n	ba4ac <__hexnan+0xe4>
   ba40c:	9904      	ldr	r1, [sp, #16]
   ba40e:	9a05      	ldr	r2, [sp, #20]
   ba410:	2920      	cmp	r1, #32
   ba412:	d818      	bhi.n	ba446 <__hexnan+0x7e>
   ba414:	9b02      	ldr	r3, [sp, #8]
   ba416:	459b      	cmp	fp, r3
   ba418:	dd13      	ble.n	ba442 <__hexnan+0x7a>
   ba41a:	454c      	cmp	r4, r9
   ba41c:	d206      	bcs.n	ba42c <__hexnan+0x64>
   ba41e:	2d07      	cmp	r5, #7
   ba420:	dc04      	bgt.n	ba42c <__hexnan+0x64>
   ba422:	462a      	mov	r2, r5
   ba424:	4649      	mov	r1, r9
   ba426:	4620      	mov	r0, r4
   ba428:	f7ff ffa8 	bl	ba37c <L_shift>
   ba42c:	4544      	cmp	r4, r8
   ba42e:	d950      	bls.n	ba4d2 <__hexnan+0x10a>
   ba430:	2300      	movs	r3, #0
   ba432:	f1a4 0904 	sub.w	r9, r4, #4
   ba436:	f844 3c04 	str.w	r3, [r4, #-4]
   ba43a:	f8cd b008 	str.w	fp, [sp, #8]
   ba43e:	464c      	mov	r4, r9
   ba440:	461d      	mov	r5, r3
   ba442:	9a03      	ldr	r2, [sp, #12]
   ba444:	e7d7      	b.n	ba3f6 <__hexnan+0x2e>
   ba446:	2929      	cmp	r1, #41	; 0x29
   ba448:	d156      	bne.n	ba4f8 <__hexnan+0x130>
   ba44a:	3202      	adds	r2, #2
   ba44c:	f8ca 2000 	str.w	r2, [sl]
   ba450:	f1bb 0f00 	cmp.w	fp, #0
   ba454:	d050      	beq.n	ba4f8 <__hexnan+0x130>
   ba456:	454c      	cmp	r4, r9
   ba458:	d206      	bcs.n	ba468 <__hexnan+0xa0>
   ba45a:	2d07      	cmp	r5, #7
   ba45c:	dc04      	bgt.n	ba468 <__hexnan+0xa0>
   ba45e:	462a      	mov	r2, r5
   ba460:	4649      	mov	r1, r9
   ba462:	4620      	mov	r0, r4
   ba464:	f7ff ff8a 	bl	ba37c <L_shift>
   ba468:	4544      	cmp	r4, r8
   ba46a:	d934      	bls.n	ba4d6 <__hexnan+0x10e>
   ba46c:	f1a8 0204 	sub.w	r2, r8, #4
   ba470:	4623      	mov	r3, r4
   ba472:	f853 1b04 	ldr.w	r1, [r3], #4
   ba476:	f842 1f04 	str.w	r1, [r2, #4]!
   ba47a:	429f      	cmp	r7, r3
   ba47c:	d2f9      	bcs.n	ba472 <__hexnan+0xaa>
   ba47e:	1b3b      	subs	r3, r7, r4
   ba480:	f023 0303 	bic.w	r3, r3, #3
   ba484:	3304      	adds	r3, #4
   ba486:	3401      	adds	r4, #1
   ba488:	3e03      	subs	r6, #3
   ba48a:	42b4      	cmp	r4, r6
   ba48c:	bf88      	it	hi
   ba48e:	2304      	movhi	r3, #4
   ba490:	4443      	add	r3, r8
   ba492:	2200      	movs	r2, #0
   ba494:	f843 2b04 	str.w	r2, [r3], #4
   ba498:	429f      	cmp	r7, r3
   ba49a:	d2fb      	bcs.n	ba494 <__hexnan+0xcc>
   ba49c:	683b      	ldr	r3, [r7, #0]
   ba49e:	b91b      	cbnz	r3, ba4a8 <__hexnan+0xe0>
   ba4a0:	4547      	cmp	r7, r8
   ba4a2:	d127      	bne.n	ba4f4 <__hexnan+0x12c>
   ba4a4:	2301      	movs	r3, #1
   ba4a6:	603b      	str	r3, [r7, #0]
   ba4a8:	2005      	movs	r0, #5
   ba4aa:	e026      	b.n	ba4fa <__hexnan+0x132>
   ba4ac:	3501      	adds	r5, #1
   ba4ae:	2d08      	cmp	r5, #8
   ba4b0:	f10b 0b01 	add.w	fp, fp, #1
   ba4b4:	dd06      	ble.n	ba4c4 <__hexnan+0xfc>
   ba4b6:	4544      	cmp	r4, r8
   ba4b8:	d9c3      	bls.n	ba442 <__hexnan+0x7a>
   ba4ba:	2300      	movs	r3, #0
   ba4bc:	f844 3c04 	str.w	r3, [r4, #-4]
   ba4c0:	2501      	movs	r5, #1
   ba4c2:	3c04      	subs	r4, #4
   ba4c4:	6822      	ldr	r2, [r4, #0]
   ba4c6:	f000 000f 	and.w	r0, r0, #15
   ba4ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ba4ce:	6022      	str	r2, [r4, #0]
   ba4d0:	e7b7      	b.n	ba442 <__hexnan+0x7a>
   ba4d2:	2508      	movs	r5, #8
   ba4d4:	e7b5      	b.n	ba442 <__hexnan+0x7a>
   ba4d6:	9b01      	ldr	r3, [sp, #4]
   ba4d8:	2b00      	cmp	r3, #0
   ba4da:	d0df      	beq.n	ba49c <__hexnan+0xd4>
   ba4dc:	f04f 32ff 	mov.w	r2, #4294967295
   ba4e0:	f1c3 0320 	rsb	r3, r3, #32
   ba4e4:	fa22 f303 	lsr.w	r3, r2, r3
   ba4e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ba4ec:	401a      	ands	r2, r3
   ba4ee:	f846 2c04 	str.w	r2, [r6, #-4]
   ba4f2:	e7d3      	b.n	ba49c <__hexnan+0xd4>
   ba4f4:	3f04      	subs	r7, #4
   ba4f6:	e7d1      	b.n	ba49c <__hexnan+0xd4>
   ba4f8:	2004      	movs	r0, #4
   ba4fa:	b007      	add	sp, #28
   ba4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba500 <__retarget_lock_acquire_recursive>:
   ba500:	4770      	bx	lr

000ba502 <__retarget_lock_release>:
   ba502:	4770      	bx	lr

000ba504 <__retarget_lock_release_recursive>:
   ba504:	4770      	bx	lr

000ba506 <__ascii_mbtowc>:
   ba506:	b082      	sub	sp, #8
   ba508:	b901      	cbnz	r1, ba50c <__ascii_mbtowc+0x6>
   ba50a:	a901      	add	r1, sp, #4
   ba50c:	b142      	cbz	r2, ba520 <__ascii_mbtowc+0x1a>
   ba50e:	b14b      	cbz	r3, ba524 <__ascii_mbtowc+0x1e>
   ba510:	7813      	ldrb	r3, [r2, #0]
   ba512:	600b      	str	r3, [r1, #0]
   ba514:	7812      	ldrb	r2, [r2, #0]
   ba516:	1e10      	subs	r0, r2, #0
   ba518:	bf18      	it	ne
   ba51a:	2001      	movne	r0, #1
   ba51c:	b002      	add	sp, #8
   ba51e:	4770      	bx	lr
   ba520:	4610      	mov	r0, r2
   ba522:	e7fb      	b.n	ba51c <__ascii_mbtowc+0x16>
   ba524:	f06f 0001 	mvn.w	r0, #1
   ba528:	e7f8      	b.n	ba51c <__ascii_mbtowc+0x16>
	...

000ba52c <_Balloc>:
   ba52c:	b570      	push	{r4, r5, r6, lr}
   ba52e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba530:	4604      	mov	r4, r0
   ba532:	460d      	mov	r5, r1
   ba534:	b976      	cbnz	r6, ba554 <_Balloc+0x28>
   ba536:	2010      	movs	r0, #16
   ba538:	f7fc f9a0 	bl	b687c <malloc>
   ba53c:	4602      	mov	r2, r0
   ba53e:	6260      	str	r0, [r4, #36]	; 0x24
   ba540:	b920      	cbnz	r0, ba54c <_Balloc+0x20>
   ba542:	4b18      	ldr	r3, [pc, #96]	; (ba5a4 <_Balloc+0x78>)
   ba544:	4818      	ldr	r0, [pc, #96]	; (ba5a8 <_Balloc+0x7c>)
   ba546:	2166      	movs	r1, #102	; 0x66
   ba548:	f7fc f9d8 	bl	b68fc <__assert_func>
   ba54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba550:	6006      	str	r6, [r0, #0]
   ba552:	60c6      	str	r6, [r0, #12]
   ba554:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba556:	68f3      	ldr	r3, [r6, #12]
   ba558:	b183      	cbz	r3, ba57c <_Balloc+0x50>
   ba55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba55c:	68db      	ldr	r3, [r3, #12]
   ba55e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ba562:	b9b8      	cbnz	r0, ba594 <_Balloc+0x68>
   ba564:	2101      	movs	r1, #1
   ba566:	fa01 f605 	lsl.w	r6, r1, r5
   ba56a:	1d72      	adds	r2, r6, #5
   ba56c:	0092      	lsls	r2, r2, #2
   ba56e:	4620      	mov	r0, r4
   ba570:	f000 fc9d 	bl	baeae <_calloc_r>
   ba574:	b160      	cbz	r0, ba590 <_Balloc+0x64>
   ba576:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ba57a:	e00e      	b.n	ba59a <_Balloc+0x6e>
   ba57c:	2221      	movs	r2, #33	; 0x21
   ba57e:	2104      	movs	r1, #4
   ba580:	4620      	mov	r0, r4
   ba582:	f000 fc94 	bl	baeae <_calloc_r>
   ba586:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba588:	60f0      	str	r0, [r6, #12]
   ba58a:	68db      	ldr	r3, [r3, #12]
   ba58c:	2b00      	cmp	r3, #0
   ba58e:	d1e4      	bne.n	ba55a <_Balloc+0x2e>
   ba590:	2000      	movs	r0, #0
   ba592:	bd70      	pop	{r4, r5, r6, pc}
   ba594:	6802      	ldr	r2, [r0, #0]
   ba596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ba59a:	2300      	movs	r3, #0
   ba59c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ba5a0:	e7f7      	b.n	ba592 <_Balloc+0x66>
   ba5a2:	bf00      	nop
   ba5a4:	000bb592 	.word	0x000bb592
   ba5a8:	000bb834 	.word	0x000bb834

000ba5ac <_Bfree>:
   ba5ac:	b570      	push	{r4, r5, r6, lr}
   ba5ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba5b0:	4605      	mov	r5, r0
   ba5b2:	460c      	mov	r4, r1
   ba5b4:	b976      	cbnz	r6, ba5d4 <_Bfree+0x28>
   ba5b6:	2010      	movs	r0, #16
   ba5b8:	f7fc f960 	bl	b687c <malloc>
   ba5bc:	4602      	mov	r2, r0
   ba5be:	6268      	str	r0, [r5, #36]	; 0x24
   ba5c0:	b920      	cbnz	r0, ba5cc <_Bfree+0x20>
   ba5c2:	4b09      	ldr	r3, [pc, #36]	; (ba5e8 <_Bfree+0x3c>)
   ba5c4:	4809      	ldr	r0, [pc, #36]	; (ba5ec <_Bfree+0x40>)
   ba5c6:	218a      	movs	r1, #138	; 0x8a
   ba5c8:	f7fc f998 	bl	b68fc <__assert_func>
   ba5cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba5d0:	6006      	str	r6, [r0, #0]
   ba5d2:	60c6      	str	r6, [r0, #12]
   ba5d4:	b13c      	cbz	r4, ba5e6 <_Bfree+0x3a>
   ba5d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ba5d8:	6862      	ldr	r2, [r4, #4]
   ba5da:	68db      	ldr	r3, [r3, #12]
   ba5dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ba5e0:	6021      	str	r1, [r4, #0]
   ba5e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ba5e6:	bd70      	pop	{r4, r5, r6, pc}
   ba5e8:	000bb592 	.word	0x000bb592
   ba5ec:	000bb834 	.word	0x000bb834

000ba5f0 <__multadd>:
   ba5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba5f4:	690d      	ldr	r5, [r1, #16]
   ba5f6:	4607      	mov	r7, r0
   ba5f8:	460c      	mov	r4, r1
   ba5fa:	461e      	mov	r6, r3
   ba5fc:	f101 0c14 	add.w	ip, r1, #20
   ba600:	2000      	movs	r0, #0
   ba602:	f8dc 3000 	ldr.w	r3, [ip]
   ba606:	b299      	uxth	r1, r3
   ba608:	fb02 6101 	mla	r1, r2, r1, r6
   ba60c:	0c1e      	lsrs	r6, r3, #16
   ba60e:	0c0b      	lsrs	r3, r1, #16
   ba610:	fb02 3306 	mla	r3, r2, r6, r3
   ba614:	b289      	uxth	r1, r1
   ba616:	3001      	adds	r0, #1
   ba618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   ba61c:	4285      	cmp	r5, r0
   ba61e:	f84c 1b04 	str.w	r1, [ip], #4
   ba622:	ea4f 4613 	mov.w	r6, r3, lsr #16
   ba626:	dcec      	bgt.n	ba602 <__multadd+0x12>
   ba628:	b30e      	cbz	r6, ba66e <__multadd+0x7e>
   ba62a:	68a3      	ldr	r3, [r4, #8]
   ba62c:	42ab      	cmp	r3, r5
   ba62e:	dc19      	bgt.n	ba664 <__multadd+0x74>
   ba630:	6861      	ldr	r1, [r4, #4]
   ba632:	4638      	mov	r0, r7
   ba634:	3101      	adds	r1, #1
   ba636:	f7ff ff79 	bl	ba52c <_Balloc>
   ba63a:	4680      	mov	r8, r0
   ba63c:	b928      	cbnz	r0, ba64a <__multadd+0x5a>
   ba63e:	4602      	mov	r2, r0
   ba640:	4b0c      	ldr	r3, [pc, #48]	; (ba674 <__multadd+0x84>)
   ba642:	480d      	ldr	r0, [pc, #52]	; (ba678 <__multadd+0x88>)
   ba644:	21b5      	movs	r1, #181	; 0xb5
   ba646:	f7fc f959 	bl	b68fc <__assert_func>
   ba64a:	6922      	ldr	r2, [r4, #16]
   ba64c:	3202      	adds	r2, #2
   ba64e:	f104 010c 	add.w	r1, r4, #12
   ba652:	0092      	lsls	r2, r2, #2
   ba654:	300c      	adds	r0, #12
   ba656:	f7fe fbdd 	bl	b8e14 <memcpy>
   ba65a:	4621      	mov	r1, r4
   ba65c:	4638      	mov	r0, r7
   ba65e:	f7ff ffa5 	bl	ba5ac <_Bfree>
   ba662:	4644      	mov	r4, r8
   ba664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ba668:	3501      	adds	r5, #1
   ba66a:	615e      	str	r6, [r3, #20]
   ba66c:	6125      	str	r5, [r4, #16]
   ba66e:	4620      	mov	r0, r4
   ba670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba674:	000bb789 	.word	0x000bb789
   ba678:	000bb834 	.word	0x000bb834

000ba67c <__s2b>:
   ba67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba680:	460c      	mov	r4, r1
   ba682:	4615      	mov	r5, r2
   ba684:	461f      	mov	r7, r3
   ba686:	2209      	movs	r2, #9
   ba688:	3308      	adds	r3, #8
   ba68a:	4606      	mov	r6, r0
   ba68c:	fb93 f3f2 	sdiv	r3, r3, r2
   ba690:	2100      	movs	r1, #0
   ba692:	2201      	movs	r2, #1
   ba694:	429a      	cmp	r2, r3
   ba696:	db09      	blt.n	ba6ac <__s2b+0x30>
   ba698:	4630      	mov	r0, r6
   ba69a:	f7ff ff47 	bl	ba52c <_Balloc>
   ba69e:	b940      	cbnz	r0, ba6b2 <__s2b+0x36>
   ba6a0:	4602      	mov	r2, r0
   ba6a2:	4b19      	ldr	r3, [pc, #100]	; (ba708 <__s2b+0x8c>)
   ba6a4:	4819      	ldr	r0, [pc, #100]	; (ba70c <__s2b+0x90>)
   ba6a6:	21ce      	movs	r1, #206	; 0xce
   ba6a8:	f7fc f928 	bl	b68fc <__assert_func>
   ba6ac:	0052      	lsls	r2, r2, #1
   ba6ae:	3101      	adds	r1, #1
   ba6b0:	e7f0      	b.n	ba694 <__s2b+0x18>
   ba6b2:	9b08      	ldr	r3, [sp, #32]
   ba6b4:	6143      	str	r3, [r0, #20]
   ba6b6:	2d09      	cmp	r5, #9
   ba6b8:	f04f 0301 	mov.w	r3, #1
   ba6bc:	6103      	str	r3, [r0, #16]
   ba6be:	dd16      	ble.n	ba6ee <__s2b+0x72>
   ba6c0:	f104 0909 	add.w	r9, r4, #9
   ba6c4:	46c8      	mov	r8, r9
   ba6c6:	442c      	add	r4, r5
   ba6c8:	f818 3b01 	ldrb.w	r3, [r8], #1
   ba6cc:	4601      	mov	r1, r0
   ba6ce:	3b30      	subs	r3, #48	; 0x30
   ba6d0:	220a      	movs	r2, #10
   ba6d2:	4630      	mov	r0, r6
   ba6d4:	f7ff ff8c 	bl	ba5f0 <__multadd>
   ba6d8:	45a0      	cmp	r8, r4
   ba6da:	d1f5      	bne.n	ba6c8 <__s2b+0x4c>
   ba6dc:	f1a5 0408 	sub.w	r4, r5, #8
   ba6e0:	444c      	add	r4, r9
   ba6e2:	1b2d      	subs	r5, r5, r4
   ba6e4:	1963      	adds	r3, r4, r5
   ba6e6:	42bb      	cmp	r3, r7
   ba6e8:	db04      	blt.n	ba6f4 <__s2b+0x78>
   ba6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba6ee:	340a      	adds	r4, #10
   ba6f0:	2509      	movs	r5, #9
   ba6f2:	e7f6      	b.n	ba6e2 <__s2b+0x66>
   ba6f4:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba6f8:	4601      	mov	r1, r0
   ba6fa:	3b30      	subs	r3, #48	; 0x30
   ba6fc:	220a      	movs	r2, #10
   ba6fe:	4630      	mov	r0, r6
   ba700:	f7ff ff76 	bl	ba5f0 <__multadd>
   ba704:	e7ee      	b.n	ba6e4 <__s2b+0x68>
   ba706:	bf00      	nop
   ba708:	000bb789 	.word	0x000bb789
   ba70c:	000bb834 	.word	0x000bb834

000ba710 <__hi0bits>:
   ba710:	0c03      	lsrs	r3, r0, #16
   ba712:	041b      	lsls	r3, r3, #16
   ba714:	b9d3      	cbnz	r3, ba74c <__hi0bits+0x3c>
   ba716:	0400      	lsls	r0, r0, #16
   ba718:	2310      	movs	r3, #16
   ba71a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ba71e:	bf04      	itt	eq
   ba720:	0200      	lsleq	r0, r0, #8
   ba722:	3308      	addeq	r3, #8
   ba724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ba728:	bf04      	itt	eq
   ba72a:	0100      	lsleq	r0, r0, #4
   ba72c:	3304      	addeq	r3, #4
   ba72e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ba732:	bf04      	itt	eq
   ba734:	0080      	lsleq	r0, r0, #2
   ba736:	3302      	addeq	r3, #2
   ba738:	2800      	cmp	r0, #0
   ba73a:	db05      	blt.n	ba748 <__hi0bits+0x38>
   ba73c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ba740:	f103 0301 	add.w	r3, r3, #1
   ba744:	bf08      	it	eq
   ba746:	2320      	moveq	r3, #32
   ba748:	4618      	mov	r0, r3
   ba74a:	4770      	bx	lr
   ba74c:	2300      	movs	r3, #0
   ba74e:	e7e4      	b.n	ba71a <__hi0bits+0xa>

000ba750 <__lo0bits>:
   ba750:	6803      	ldr	r3, [r0, #0]
   ba752:	f013 0207 	ands.w	r2, r3, #7
   ba756:	4601      	mov	r1, r0
   ba758:	d00b      	beq.n	ba772 <__lo0bits+0x22>
   ba75a:	07da      	lsls	r2, r3, #31
   ba75c:	d423      	bmi.n	ba7a6 <__lo0bits+0x56>
   ba75e:	0798      	lsls	r0, r3, #30
   ba760:	bf49      	itett	mi
   ba762:	085b      	lsrmi	r3, r3, #1
   ba764:	089b      	lsrpl	r3, r3, #2
   ba766:	2001      	movmi	r0, #1
   ba768:	600b      	strmi	r3, [r1, #0]
   ba76a:	bf5c      	itt	pl
   ba76c:	600b      	strpl	r3, [r1, #0]
   ba76e:	2002      	movpl	r0, #2
   ba770:	4770      	bx	lr
   ba772:	b298      	uxth	r0, r3
   ba774:	b9a8      	cbnz	r0, ba7a2 <__lo0bits+0x52>
   ba776:	0c1b      	lsrs	r3, r3, #16
   ba778:	2010      	movs	r0, #16
   ba77a:	b2da      	uxtb	r2, r3
   ba77c:	b90a      	cbnz	r2, ba782 <__lo0bits+0x32>
   ba77e:	3008      	adds	r0, #8
   ba780:	0a1b      	lsrs	r3, r3, #8
   ba782:	071a      	lsls	r2, r3, #28
   ba784:	bf04      	itt	eq
   ba786:	091b      	lsreq	r3, r3, #4
   ba788:	3004      	addeq	r0, #4
   ba78a:	079a      	lsls	r2, r3, #30
   ba78c:	bf04      	itt	eq
   ba78e:	089b      	lsreq	r3, r3, #2
   ba790:	3002      	addeq	r0, #2
   ba792:	07da      	lsls	r2, r3, #31
   ba794:	d403      	bmi.n	ba79e <__lo0bits+0x4e>
   ba796:	085b      	lsrs	r3, r3, #1
   ba798:	f100 0001 	add.w	r0, r0, #1
   ba79c:	d005      	beq.n	ba7aa <__lo0bits+0x5a>
   ba79e:	600b      	str	r3, [r1, #0]
   ba7a0:	4770      	bx	lr
   ba7a2:	4610      	mov	r0, r2
   ba7a4:	e7e9      	b.n	ba77a <__lo0bits+0x2a>
   ba7a6:	2000      	movs	r0, #0
   ba7a8:	4770      	bx	lr
   ba7aa:	2020      	movs	r0, #32
   ba7ac:	4770      	bx	lr
	...

000ba7b0 <__i2b>:
   ba7b0:	b510      	push	{r4, lr}
   ba7b2:	460c      	mov	r4, r1
   ba7b4:	2101      	movs	r1, #1
   ba7b6:	f7ff feb9 	bl	ba52c <_Balloc>
   ba7ba:	4602      	mov	r2, r0
   ba7bc:	b928      	cbnz	r0, ba7ca <__i2b+0x1a>
   ba7be:	4b05      	ldr	r3, [pc, #20]	; (ba7d4 <__i2b+0x24>)
   ba7c0:	4805      	ldr	r0, [pc, #20]	; (ba7d8 <__i2b+0x28>)
   ba7c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   ba7c6:	f7fc f899 	bl	b68fc <__assert_func>
   ba7ca:	2301      	movs	r3, #1
   ba7cc:	6144      	str	r4, [r0, #20]
   ba7ce:	6103      	str	r3, [r0, #16]
   ba7d0:	bd10      	pop	{r4, pc}
   ba7d2:	bf00      	nop
   ba7d4:	000bb789 	.word	0x000bb789
   ba7d8:	000bb834 	.word	0x000bb834

000ba7dc <__multiply>:
   ba7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba7e0:	4691      	mov	r9, r2
   ba7e2:	690a      	ldr	r2, [r1, #16]
   ba7e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba7e8:	429a      	cmp	r2, r3
   ba7ea:	bfb8      	it	lt
   ba7ec:	460b      	movlt	r3, r1
   ba7ee:	460c      	mov	r4, r1
   ba7f0:	bfbc      	itt	lt
   ba7f2:	464c      	movlt	r4, r9
   ba7f4:	4699      	movlt	r9, r3
   ba7f6:	6927      	ldr	r7, [r4, #16]
   ba7f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba7fc:	68a3      	ldr	r3, [r4, #8]
   ba7fe:	6861      	ldr	r1, [r4, #4]
   ba800:	eb07 060a 	add.w	r6, r7, sl
   ba804:	42b3      	cmp	r3, r6
   ba806:	b085      	sub	sp, #20
   ba808:	bfb8      	it	lt
   ba80a:	3101      	addlt	r1, #1
   ba80c:	f7ff fe8e 	bl	ba52c <_Balloc>
   ba810:	b930      	cbnz	r0, ba820 <__multiply+0x44>
   ba812:	4602      	mov	r2, r0
   ba814:	4b44      	ldr	r3, [pc, #272]	; (ba928 <__multiply+0x14c>)
   ba816:	4845      	ldr	r0, [pc, #276]	; (ba92c <__multiply+0x150>)
   ba818:	f240 115d 	movw	r1, #349	; 0x15d
   ba81c:	f7fc f86e 	bl	b68fc <__assert_func>
   ba820:	f100 0514 	add.w	r5, r0, #20
   ba824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   ba828:	462b      	mov	r3, r5
   ba82a:	2200      	movs	r2, #0
   ba82c:	4543      	cmp	r3, r8
   ba82e:	d321      	bcc.n	ba874 <__multiply+0x98>
   ba830:	f104 0314 	add.w	r3, r4, #20
   ba834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ba838:	f109 0314 	add.w	r3, r9, #20
   ba83c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   ba840:	9202      	str	r2, [sp, #8]
   ba842:	1b3a      	subs	r2, r7, r4
   ba844:	3a15      	subs	r2, #21
   ba846:	f022 0203 	bic.w	r2, r2, #3
   ba84a:	3204      	adds	r2, #4
   ba84c:	f104 0115 	add.w	r1, r4, #21
   ba850:	428f      	cmp	r7, r1
   ba852:	bf38      	it	cc
   ba854:	2204      	movcc	r2, #4
   ba856:	9201      	str	r2, [sp, #4]
   ba858:	9a02      	ldr	r2, [sp, #8]
   ba85a:	9303      	str	r3, [sp, #12]
   ba85c:	429a      	cmp	r2, r3
   ba85e:	d80c      	bhi.n	ba87a <__multiply+0x9e>
   ba860:	2e00      	cmp	r6, #0
   ba862:	dd03      	ble.n	ba86c <__multiply+0x90>
   ba864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ba868:	2b00      	cmp	r3, #0
   ba86a:	d05a      	beq.n	ba922 <__multiply+0x146>
   ba86c:	6106      	str	r6, [r0, #16]
   ba86e:	b005      	add	sp, #20
   ba870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba874:	f843 2b04 	str.w	r2, [r3], #4
   ba878:	e7d8      	b.n	ba82c <__multiply+0x50>
   ba87a:	f8b3 a000 	ldrh.w	sl, [r3]
   ba87e:	f1ba 0f00 	cmp.w	sl, #0
   ba882:	d024      	beq.n	ba8ce <__multiply+0xf2>
   ba884:	f104 0e14 	add.w	lr, r4, #20
   ba888:	46a9      	mov	r9, r5
   ba88a:	f04f 0c00 	mov.w	ip, #0
   ba88e:	f85e 2b04 	ldr.w	r2, [lr], #4
   ba892:	f8d9 1000 	ldr.w	r1, [r9]
   ba896:	fa1f fb82 	uxth.w	fp, r2
   ba89a:	b289      	uxth	r1, r1
   ba89c:	fb0a 110b 	mla	r1, sl, fp, r1
   ba8a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   ba8a4:	f8d9 2000 	ldr.w	r2, [r9]
   ba8a8:	4461      	add	r1, ip
   ba8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba8ae:	fb0a c20b 	mla	r2, sl, fp, ip
   ba8b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   ba8b6:	b289      	uxth	r1, r1
   ba8b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   ba8bc:	4577      	cmp	r7, lr
   ba8be:	f849 1b04 	str.w	r1, [r9], #4
   ba8c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba8c6:	d8e2      	bhi.n	ba88e <__multiply+0xb2>
   ba8c8:	9a01      	ldr	r2, [sp, #4]
   ba8ca:	f845 c002 	str.w	ip, [r5, r2]
   ba8ce:	9a03      	ldr	r2, [sp, #12]
   ba8d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   ba8d4:	3304      	adds	r3, #4
   ba8d6:	f1b9 0f00 	cmp.w	r9, #0
   ba8da:	d020      	beq.n	ba91e <__multiply+0x142>
   ba8dc:	6829      	ldr	r1, [r5, #0]
   ba8de:	f104 0c14 	add.w	ip, r4, #20
   ba8e2:	46ae      	mov	lr, r5
   ba8e4:	f04f 0a00 	mov.w	sl, #0
   ba8e8:	f8bc b000 	ldrh.w	fp, [ip]
   ba8ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
   ba8f0:	fb09 220b 	mla	r2, r9, fp, r2
   ba8f4:	4492      	add	sl, r2
   ba8f6:	b289      	uxth	r1, r1
   ba8f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   ba8fc:	f84e 1b04 	str.w	r1, [lr], #4
   ba900:	f85c 2b04 	ldr.w	r2, [ip], #4
   ba904:	f8be 1000 	ldrh.w	r1, [lr]
   ba908:	0c12      	lsrs	r2, r2, #16
   ba90a:	fb09 1102 	mla	r1, r9, r2, r1
   ba90e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   ba912:	4567      	cmp	r7, ip
   ba914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   ba918:	d8e6      	bhi.n	ba8e8 <__multiply+0x10c>
   ba91a:	9a01      	ldr	r2, [sp, #4]
   ba91c:	50a9      	str	r1, [r5, r2]
   ba91e:	3504      	adds	r5, #4
   ba920:	e79a      	b.n	ba858 <__multiply+0x7c>
   ba922:	3e01      	subs	r6, #1
   ba924:	e79c      	b.n	ba860 <__multiply+0x84>
   ba926:	bf00      	nop
   ba928:	000bb789 	.word	0x000bb789
   ba92c:	000bb834 	.word	0x000bb834

000ba930 <__pow5mult>:
   ba930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba934:	4615      	mov	r5, r2
   ba936:	f012 0203 	ands.w	r2, r2, #3
   ba93a:	4606      	mov	r6, r0
   ba93c:	460f      	mov	r7, r1
   ba93e:	d007      	beq.n	ba950 <__pow5mult+0x20>
   ba940:	4c25      	ldr	r4, [pc, #148]	; (ba9d8 <__pow5mult+0xa8>)
   ba942:	3a01      	subs	r2, #1
   ba944:	2300      	movs	r3, #0
   ba946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ba94a:	f7ff fe51 	bl	ba5f0 <__multadd>
   ba94e:	4607      	mov	r7, r0
   ba950:	10ad      	asrs	r5, r5, #2
   ba952:	d03d      	beq.n	ba9d0 <__pow5mult+0xa0>
   ba954:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba956:	b97c      	cbnz	r4, ba978 <__pow5mult+0x48>
   ba958:	2010      	movs	r0, #16
   ba95a:	f7fb ff8f 	bl	b687c <malloc>
   ba95e:	4602      	mov	r2, r0
   ba960:	6270      	str	r0, [r6, #36]	; 0x24
   ba962:	b928      	cbnz	r0, ba970 <__pow5mult+0x40>
   ba964:	4b1d      	ldr	r3, [pc, #116]	; (ba9dc <__pow5mult+0xac>)
   ba966:	481e      	ldr	r0, [pc, #120]	; (ba9e0 <__pow5mult+0xb0>)
   ba968:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   ba96c:	f7fb ffc6 	bl	b68fc <__assert_func>
   ba970:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba974:	6004      	str	r4, [r0, #0]
   ba976:	60c4      	str	r4, [r0, #12]
   ba978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ba97c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ba980:	b94c      	cbnz	r4, ba996 <__pow5mult+0x66>
   ba982:	f240 2171 	movw	r1, #625	; 0x271
   ba986:	4630      	mov	r0, r6
   ba988:	f7ff ff12 	bl	ba7b0 <__i2b>
   ba98c:	2300      	movs	r3, #0
   ba98e:	f8c8 0008 	str.w	r0, [r8, #8]
   ba992:	4604      	mov	r4, r0
   ba994:	6003      	str	r3, [r0, #0]
   ba996:	f04f 0900 	mov.w	r9, #0
   ba99a:	07eb      	lsls	r3, r5, #31
   ba99c:	d50a      	bpl.n	ba9b4 <__pow5mult+0x84>
   ba99e:	4639      	mov	r1, r7
   ba9a0:	4622      	mov	r2, r4
   ba9a2:	4630      	mov	r0, r6
   ba9a4:	f7ff ff1a 	bl	ba7dc <__multiply>
   ba9a8:	4639      	mov	r1, r7
   ba9aa:	4680      	mov	r8, r0
   ba9ac:	4630      	mov	r0, r6
   ba9ae:	f7ff fdfd 	bl	ba5ac <_Bfree>
   ba9b2:	4647      	mov	r7, r8
   ba9b4:	106d      	asrs	r5, r5, #1
   ba9b6:	d00b      	beq.n	ba9d0 <__pow5mult+0xa0>
   ba9b8:	6820      	ldr	r0, [r4, #0]
   ba9ba:	b938      	cbnz	r0, ba9cc <__pow5mult+0x9c>
   ba9bc:	4622      	mov	r2, r4
   ba9be:	4621      	mov	r1, r4
   ba9c0:	4630      	mov	r0, r6
   ba9c2:	f7ff ff0b 	bl	ba7dc <__multiply>
   ba9c6:	6020      	str	r0, [r4, #0]
   ba9c8:	f8c0 9000 	str.w	r9, [r0]
   ba9cc:	4604      	mov	r4, r0
   ba9ce:	e7e4      	b.n	ba99a <__pow5mult+0x6a>
   ba9d0:	4638      	mov	r0, r7
   ba9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba9d6:	bf00      	nop
   ba9d8:	000bb9a8 	.word	0x000bb9a8
   ba9dc:	000bb592 	.word	0x000bb592
   ba9e0:	000bb834 	.word	0x000bb834

000ba9e4 <__lshift>:
   ba9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba9e8:	460c      	mov	r4, r1
   ba9ea:	6849      	ldr	r1, [r1, #4]
   ba9ec:	6923      	ldr	r3, [r4, #16]
   ba9ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ba9f2:	68a3      	ldr	r3, [r4, #8]
   ba9f4:	4607      	mov	r7, r0
   ba9f6:	4691      	mov	r9, r2
   ba9f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ba9fc:	f108 0601 	add.w	r6, r8, #1
   baa00:	42b3      	cmp	r3, r6
   baa02:	db0b      	blt.n	baa1c <__lshift+0x38>
   baa04:	4638      	mov	r0, r7
   baa06:	f7ff fd91 	bl	ba52c <_Balloc>
   baa0a:	4605      	mov	r5, r0
   baa0c:	b948      	cbnz	r0, baa22 <__lshift+0x3e>
   baa0e:	4602      	mov	r2, r0
   baa10:	4b2a      	ldr	r3, [pc, #168]	; (baabc <__lshift+0xd8>)
   baa12:	482b      	ldr	r0, [pc, #172]	; (baac0 <__lshift+0xdc>)
   baa14:	f240 11d9 	movw	r1, #473	; 0x1d9
   baa18:	f7fb ff70 	bl	b68fc <__assert_func>
   baa1c:	3101      	adds	r1, #1
   baa1e:	005b      	lsls	r3, r3, #1
   baa20:	e7ee      	b.n	baa00 <__lshift+0x1c>
   baa22:	2300      	movs	r3, #0
   baa24:	f100 0114 	add.w	r1, r0, #20
   baa28:	f100 0210 	add.w	r2, r0, #16
   baa2c:	4618      	mov	r0, r3
   baa2e:	4553      	cmp	r3, sl
   baa30:	db37      	blt.n	baaa2 <__lshift+0xbe>
   baa32:	6920      	ldr	r0, [r4, #16]
   baa34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   baa38:	f104 0314 	add.w	r3, r4, #20
   baa3c:	f019 091f 	ands.w	r9, r9, #31
   baa40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   baa44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   baa48:	d02f      	beq.n	baaaa <__lshift+0xc6>
   baa4a:	f1c9 0e20 	rsb	lr, r9, #32
   baa4e:	468a      	mov	sl, r1
   baa50:	f04f 0c00 	mov.w	ip, #0
   baa54:	681a      	ldr	r2, [r3, #0]
   baa56:	fa02 f209 	lsl.w	r2, r2, r9
   baa5a:	ea42 020c 	orr.w	r2, r2, ip
   baa5e:	f84a 2b04 	str.w	r2, [sl], #4
   baa62:	f853 2b04 	ldr.w	r2, [r3], #4
   baa66:	4298      	cmp	r0, r3
   baa68:	fa22 fc0e 	lsr.w	ip, r2, lr
   baa6c:	d8f2      	bhi.n	baa54 <__lshift+0x70>
   baa6e:	1b03      	subs	r3, r0, r4
   baa70:	3b15      	subs	r3, #21
   baa72:	f023 0303 	bic.w	r3, r3, #3
   baa76:	3304      	adds	r3, #4
   baa78:	f104 0215 	add.w	r2, r4, #21
   baa7c:	4290      	cmp	r0, r2
   baa7e:	bf38      	it	cc
   baa80:	2304      	movcc	r3, #4
   baa82:	f841 c003 	str.w	ip, [r1, r3]
   baa86:	f1bc 0f00 	cmp.w	ip, #0
   baa8a:	d001      	beq.n	baa90 <__lshift+0xac>
   baa8c:	f108 0602 	add.w	r6, r8, #2
   baa90:	3e01      	subs	r6, #1
   baa92:	4638      	mov	r0, r7
   baa94:	612e      	str	r6, [r5, #16]
   baa96:	4621      	mov	r1, r4
   baa98:	f7ff fd88 	bl	ba5ac <_Bfree>
   baa9c:	4628      	mov	r0, r5
   baa9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   baaa2:	f842 0f04 	str.w	r0, [r2, #4]!
   baaa6:	3301      	adds	r3, #1
   baaa8:	e7c1      	b.n	baa2e <__lshift+0x4a>
   baaaa:	3904      	subs	r1, #4
   baaac:	f853 2b04 	ldr.w	r2, [r3], #4
   baab0:	f841 2f04 	str.w	r2, [r1, #4]!
   baab4:	4298      	cmp	r0, r3
   baab6:	d8f9      	bhi.n	baaac <__lshift+0xc8>
   baab8:	e7ea      	b.n	baa90 <__lshift+0xac>
   baaba:	bf00      	nop
   baabc:	000bb789 	.word	0x000bb789
   baac0:	000bb834 	.word	0x000bb834

000baac4 <__mcmp>:
   baac4:	b530      	push	{r4, r5, lr}
   baac6:	6902      	ldr	r2, [r0, #16]
   baac8:	690c      	ldr	r4, [r1, #16]
   baaca:	1b12      	subs	r2, r2, r4
   baacc:	d10e      	bne.n	baaec <__mcmp+0x28>
   baace:	f100 0314 	add.w	r3, r0, #20
   baad2:	3114      	adds	r1, #20
   baad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   baad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   baadc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   baae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   baae4:	42a5      	cmp	r5, r4
   baae6:	d003      	beq.n	baaf0 <__mcmp+0x2c>
   baae8:	d305      	bcc.n	baaf6 <__mcmp+0x32>
   baaea:	2201      	movs	r2, #1
   baaec:	4610      	mov	r0, r2
   baaee:	bd30      	pop	{r4, r5, pc}
   baaf0:	4283      	cmp	r3, r0
   baaf2:	d3f3      	bcc.n	baadc <__mcmp+0x18>
   baaf4:	e7fa      	b.n	baaec <__mcmp+0x28>
   baaf6:	f04f 32ff 	mov.w	r2, #4294967295
   baafa:	e7f7      	b.n	baaec <__mcmp+0x28>

000baafc <__mdiff>:
   baafc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bab00:	460c      	mov	r4, r1
   bab02:	4606      	mov	r6, r0
   bab04:	4611      	mov	r1, r2
   bab06:	4620      	mov	r0, r4
   bab08:	4690      	mov	r8, r2
   bab0a:	f7ff ffdb 	bl	baac4 <__mcmp>
   bab0e:	1e05      	subs	r5, r0, #0
   bab10:	d110      	bne.n	bab34 <__mdiff+0x38>
   bab12:	4629      	mov	r1, r5
   bab14:	4630      	mov	r0, r6
   bab16:	f7ff fd09 	bl	ba52c <_Balloc>
   bab1a:	b930      	cbnz	r0, bab2a <__mdiff+0x2e>
   bab1c:	4b3a      	ldr	r3, [pc, #232]	; (bac08 <__mdiff+0x10c>)
   bab1e:	4602      	mov	r2, r0
   bab20:	f240 2132 	movw	r1, #562	; 0x232
   bab24:	4839      	ldr	r0, [pc, #228]	; (bac0c <__mdiff+0x110>)
   bab26:	f7fb fee9 	bl	b68fc <__assert_func>
   bab2a:	2301      	movs	r3, #1
   bab2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bab30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bab34:	bfa4      	itt	ge
   bab36:	4643      	movge	r3, r8
   bab38:	46a0      	movge	r8, r4
   bab3a:	4630      	mov	r0, r6
   bab3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bab40:	bfa6      	itte	ge
   bab42:	461c      	movge	r4, r3
   bab44:	2500      	movge	r5, #0
   bab46:	2501      	movlt	r5, #1
   bab48:	f7ff fcf0 	bl	ba52c <_Balloc>
   bab4c:	b920      	cbnz	r0, bab58 <__mdiff+0x5c>
   bab4e:	4b2e      	ldr	r3, [pc, #184]	; (bac08 <__mdiff+0x10c>)
   bab50:	4602      	mov	r2, r0
   bab52:	f44f 7110 	mov.w	r1, #576	; 0x240
   bab56:	e7e5      	b.n	bab24 <__mdiff+0x28>
   bab58:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bab5c:	6926      	ldr	r6, [r4, #16]
   bab5e:	60c5      	str	r5, [r0, #12]
   bab60:	f104 0914 	add.w	r9, r4, #20
   bab64:	f108 0514 	add.w	r5, r8, #20
   bab68:	f100 0e14 	add.w	lr, r0, #20
   bab6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bab70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bab74:	f108 0210 	add.w	r2, r8, #16
   bab78:	46f2      	mov	sl, lr
   bab7a:	2100      	movs	r1, #0
   bab7c:	f859 3b04 	ldr.w	r3, [r9], #4
   bab80:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bab84:	fa1f f883 	uxth.w	r8, r3
   bab88:	fa11 f18b 	uxtah	r1, r1, fp
   bab8c:	0c1b      	lsrs	r3, r3, #16
   bab8e:	eba1 0808 	sub.w	r8, r1, r8
   bab92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bab96:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bab9a:	fa1f f888 	uxth.w	r8, r8
   bab9e:	1419      	asrs	r1, r3, #16
   baba0:	454e      	cmp	r6, r9
   baba2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   baba6:	f84a 3b04 	str.w	r3, [sl], #4
   babaa:	d8e7      	bhi.n	bab7c <__mdiff+0x80>
   babac:	1b33      	subs	r3, r6, r4
   babae:	3b15      	subs	r3, #21
   babb0:	f023 0303 	bic.w	r3, r3, #3
   babb4:	3304      	adds	r3, #4
   babb6:	3415      	adds	r4, #21
   babb8:	42a6      	cmp	r6, r4
   babba:	bf38      	it	cc
   babbc:	2304      	movcc	r3, #4
   babbe:	441d      	add	r5, r3
   babc0:	4473      	add	r3, lr
   babc2:	469e      	mov	lr, r3
   babc4:	462e      	mov	r6, r5
   babc6:	4566      	cmp	r6, ip
   babc8:	d30e      	bcc.n	babe8 <__mdiff+0xec>
   babca:	f10c 0203 	add.w	r2, ip, #3
   babce:	1b52      	subs	r2, r2, r5
   babd0:	f022 0203 	bic.w	r2, r2, #3
   babd4:	3d03      	subs	r5, #3
   babd6:	45ac      	cmp	ip, r5
   babd8:	bf38      	it	cc
   babda:	2200      	movcc	r2, #0
   babdc:	441a      	add	r2, r3
   babde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   babe2:	b17b      	cbz	r3, bac04 <__mdiff+0x108>
   babe4:	6107      	str	r7, [r0, #16]
   babe6:	e7a3      	b.n	bab30 <__mdiff+0x34>
   babe8:	f856 8b04 	ldr.w	r8, [r6], #4
   babec:	fa11 f288 	uxtah	r2, r1, r8
   babf0:	1414      	asrs	r4, r2, #16
   babf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   babf6:	b292      	uxth	r2, r2
   babf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   babfc:	f84e 2b04 	str.w	r2, [lr], #4
   bac00:	1421      	asrs	r1, r4, #16
   bac02:	e7e0      	b.n	babc6 <__mdiff+0xca>
   bac04:	3f01      	subs	r7, #1
   bac06:	e7ea      	b.n	babde <__mdiff+0xe2>
   bac08:	000bb789 	.word	0x000bb789
   bac0c:	000bb834 	.word	0x000bb834

000bac10 <__ulp>:
   bac10:	b082      	sub	sp, #8
   bac12:	ed8d 0b00 	vstr	d0, [sp]
   bac16:	9b01      	ldr	r3, [sp, #4]
   bac18:	4912      	ldr	r1, [pc, #72]	; (bac64 <__ulp+0x54>)
   bac1a:	4019      	ands	r1, r3
   bac1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bac20:	2900      	cmp	r1, #0
   bac22:	dd05      	ble.n	bac30 <__ulp+0x20>
   bac24:	2200      	movs	r2, #0
   bac26:	460b      	mov	r3, r1
   bac28:	ec43 2b10 	vmov	d0, r2, r3
   bac2c:	b002      	add	sp, #8
   bac2e:	4770      	bx	lr
   bac30:	4249      	negs	r1, r1
   bac32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bac36:	ea4f 5021 	mov.w	r0, r1, asr #20
   bac3a:	f04f 0200 	mov.w	r2, #0
   bac3e:	f04f 0300 	mov.w	r3, #0
   bac42:	da04      	bge.n	bac4e <__ulp+0x3e>
   bac44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bac48:	fa41 f300 	asr.w	r3, r1, r0
   bac4c:	e7ec      	b.n	bac28 <__ulp+0x18>
   bac4e:	f1a0 0114 	sub.w	r1, r0, #20
   bac52:	291e      	cmp	r1, #30
   bac54:	bfda      	itte	le
   bac56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bac5a:	fa20 f101 	lsrle.w	r1, r0, r1
   bac5e:	2101      	movgt	r1, #1
   bac60:	460a      	mov	r2, r1
   bac62:	e7e1      	b.n	bac28 <__ulp+0x18>
   bac64:	7ff00000 	.word	0x7ff00000

000bac68 <__b2d>:
   bac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac6a:	6905      	ldr	r5, [r0, #16]
   bac6c:	f100 0714 	add.w	r7, r0, #20
   bac70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bac74:	1f2e      	subs	r6, r5, #4
   bac76:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bac7a:	4620      	mov	r0, r4
   bac7c:	f7ff fd48 	bl	ba710 <__hi0bits>
   bac80:	f1c0 0320 	rsb	r3, r0, #32
   bac84:	280a      	cmp	r0, #10
   bac86:	f8df c07c 	ldr.w	ip, [pc, #124]	; bad04 <__b2d+0x9c>
   bac8a:	600b      	str	r3, [r1, #0]
   bac8c:	dc14      	bgt.n	bacb8 <__b2d+0x50>
   bac8e:	f1c0 0e0b 	rsb	lr, r0, #11
   bac92:	fa24 f10e 	lsr.w	r1, r4, lr
   bac96:	42b7      	cmp	r7, r6
   bac98:	ea41 030c 	orr.w	r3, r1, ip
   bac9c:	bf34      	ite	cc
   bac9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   baca2:	2100      	movcs	r1, #0
   baca4:	3015      	adds	r0, #21
   baca6:	fa04 f000 	lsl.w	r0, r4, r0
   bacaa:	fa21 f10e 	lsr.w	r1, r1, lr
   bacae:	ea40 0201 	orr.w	r2, r0, r1
   bacb2:	ec43 2b10 	vmov	d0, r2, r3
   bacb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bacb8:	42b7      	cmp	r7, r6
   bacba:	bf3a      	itte	cc
   bacbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bacc0:	f1a5 0608 	subcc.w	r6, r5, #8
   bacc4:	2100      	movcs	r1, #0
   bacc6:	380b      	subs	r0, #11
   bacc8:	d017      	beq.n	bacfa <__b2d+0x92>
   bacca:	f1c0 0c20 	rsb	ip, r0, #32
   bacce:	fa04 f500 	lsl.w	r5, r4, r0
   bacd2:	42be      	cmp	r6, r7
   bacd4:	fa21 f40c 	lsr.w	r4, r1, ip
   bacd8:	ea45 0504 	orr.w	r5, r5, r4
   bacdc:	bf8c      	ite	hi
   bacde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bace2:	2400      	movls	r4, #0
   bace4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bace8:	fa01 f000 	lsl.w	r0, r1, r0
   bacec:	fa24 f40c 	lsr.w	r4, r4, ip
   bacf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bacf4:	ea40 0204 	orr.w	r2, r0, r4
   bacf8:	e7db      	b.n	bacb2 <__b2d+0x4a>
   bacfa:	ea44 030c 	orr.w	r3, r4, ip
   bacfe:	460a      	mov	r2, r1
   bad00:	e7d7      	b.n	bacb2 <__b2d+0x4a>
   bad02:	bf00      	nop
   bad04:	3ff00000 	.word	0x3ff00000

000bad08 <__d2b>:
   bad08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bad0c:	4689      	mov	r9, r1
   bad0e:	2101      	movs	r1, #1
   bad10:	ec57 6b10 	vmov	r6, r7, d0
   bad14:	4690      	mov	r8, r2
   bad16:	f7ff fc09 	bl	ba52c <_Balloc>
   bad1a:	4604      	mov	r4, r0
   bad1c:	b930      	cbnz	r0, bad2c <__d2b+0x24>
   bad1e:	4602      	mov	r2, r0
   bad20:	4b25      	ldr	r3, [pc, #148]	; (badb8 <__d2b+0xb0>)
   bad22:	4826      	ldr	r0, [pc, #152]	; (badbc <__d2b+0xb4>)
   bad24:	f240 310a 	movw	r1, #778	; 0x30a
   bad28:	f7fb fde8 	bl	b68fc <__assert_func>
   bad2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bad30:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bad34:	bb35      	cbnz	r5, bad84 <__d2b+0x7c>
   bad36:	2e00      	cmp	r6, #0
   bad38:	9301      	str	r3, [sp, #4]
   bad3a:	d028      	beq.n	bad8e <__d2b+0x86>
   bad3c:	4668      	mov	r0, sp
   bad3e:	9600      	str	r6, [sp, #0]
   bad40:	f7ff fd06 	bl	ba750 <__lo0bits>
   bad44:	9900      	ldr	r1, [sp, #0]
   bad46:	b300      	cbz	r0, bad8a <__d2b+0x82>
   bad48:	9a01      	ldr	r2, [sp, #4]
   bad4a:	f1c0 0320 	rsb	r3, r0, #32
   bad4e:	fa02 f303 	lsl.w	r3, r2, r3
   bad52:	430b      	orrs	r3, r1
   bad54:	40c2      	lsrs	r2, r0
   bad56:	6163      	str	r3, [r4, #20]
   bad58:	9201      	str	r2, [sp, #4]
   bad5a:	9b01      	ldr	r3, [sp, #4]
   bad5c:	61a3      	str	r3, [r4, #24]
   bad5e:	2b00      	cmp	r3, #0
   bad60:	bf14      	ite	ne
   bad62:	2202      	movne	r2, #2
   bad64:	2201      	moveq	r2, #1
   bad66:	6122      	str	r2, [r4, #16]
   bad68:	b1d5      	cbz	r5, bada0 <__d2b+0x98>
   bad6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bad6e:	4405      	add	r5, r0
   bad70:	f8c9 5000 	str.w	r5, [r9]
   bad74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bad78:	f8c8 0000 	str.w	r0, [r8]
   bad7c:	4620      	mov	r0, r4
   bad7e:	b003      	add	sp, #12
   bad80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bad84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bad88:	e7d5      	b.n	bad36 <__d2b+0x2e>
   bad8a:	6161      	str	r1, [r4, #20]
   bad8c:	e7e5      	b.n	bad5a <__d2b+0x52>
   bad8e:	a801      	add	r0, sp, #4
   bad90:	f7ff fcde 	bl	ba750 <__lo0bits>
   bad94:	9b01      	ldr	r3, [sp, #4]
   bad96:	6163      	str	r3, [r4, #20]
   bad98:	2201      	movs	r2, #1
   bad9a:	6122      	str	r2, [r4, #16]
   bad9c:	3020      	adds	r0, #32
   bad9e:	e7e3      	b.n	bad68 <__d2b+0x60>
   bada0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bada4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bada8:	f8c9 0000 	str.w	r0, [r9]
   badac:	6918      	ldr	r0, [r3, #16]
   badae:	f7ff fcaf 	bl	ba710 <__hi0bits>
   badb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   badb6:	e7df      	b.n	bad78 <__d2b+0x70>
   badb8:	000bb789 	.word	0x000bb789
   badbc:	000bb834 	.word	0x000bb834

000badc0 <__ratio>:
   badc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   badc4:	4688      	mov	r8, r1
   badc6:	4669      	mov	r1, sp
   badc8:	4681      	mov	r9, r0
   badca:	f7ff ff4d 	bl	bac68 <__b2d>
   badce:	a901      	add	r1, sp, #4
   badd0:	4640      	mov	r0, r8
   badd2:	ec55 4b10 	vmov	r4, r5, d0
   badd6:	f7ff ff47 	bl	bac68 <__b2d>
   badda:	f8d9 3010 	ldr.w	r3, [r9, #16]
   badde:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bade2:	eba3 0c02 	sub.w	ip, r3, r2
   bade6:	e9dd 3200 	ldrd	r3, r2, [sp]
   badea:	1a9b      	subs	r3, r3, r2
   badec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   badf0:	ec51 0b10 	vmov	r0, r1, d0
   badf4:	2b00      	cmp	r3, #0
   badf6:	bfd6      	itet	le
   badf8:	460a      	movle	r2, r1
   badfa:	462a      	movgt	r2, r5
   badfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bae00:	468b      	mov	fp, r1
   bae02:	462f      	mov	r7, r5
   bae04:	bfd4      	ite	le
   bae06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bae0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bae0e:	4620      	mov	r0, r4
   bae10:	ee10 2a10 	vmov	r2, s0
   bae14:	465b      	mov	r3, fp
   bae16:	4639      	mov	r1, r7
   bae18:	f7f9 fbe8 	bl	b45ec <__aeabi_ddiv>
   bae1c:	ec41 0b10 	vmov	d0, r0, r1
   bae20:	b003      	add	sp, #12
   bae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bae26 <__copybits>:
   bae26:	3901      	subs	r1, #1
   bae28:	b570      	push	{r4, r5, r6, lr}
   bae2a:	1149      	asrs	r1, r1, #5
   bae2c:	6914      	ldr	r4, [r2, #16]
   bae2e:	3101      	adds	r1, #1
   bae30:	f102 0314 	add.w	r3, r2, #20
   bae34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bae38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bae3c:	1f05      	subs	r5, r0, #4
   bae3e:	42a3      	cmp	r3, r4
   bae40:	d30c      	bcc.n	bae5c <__copybits+0x36>
   bae42:	1aa3      	subs	r3, r4, r2
   bae44:	3b11      	subs	r3, #17
   bae46:	f023 0303 	bic.w	r3, r3, #3
   bae4a:	3211      	adds	r2, #17
   bae4c:	42a2      	cmp	r2, r4
   bae4e:	bf88      	it	hi
   bae50:	2300      	movhi	r3, #0
   bae52:	4418      	add	r0, r3
   bae54:	2300      	movs	r3, #0
   bae56:	4288      	cmp	r0, r1
   bae58:	d305      	bcc.n	bae66 <__copybits+0x40>
   bae5a:	bd70      	pop	{r4, r5, r6, pc}
   bae5c:	f853 6b04 	ldr.w	r6, [r3], #4
   bae60:	f845 6f04 	str.w	r6, [r5, #4]!
   bae64:	e7eb      	b.n	bae3e <__copybits+0x18>
   bae66:	f840 3b04 	str.w	r3, [r0], #4
   bae6a:	e7f4      	b.n	bae56 <__copybits+0x30>

000bae6c <__any_on>:
   bae6c:	f100 0214 	add.w	r2, r0, #20
   bae70:	6900      	ldr	r0, [r0, #16]
   bae72:	114b      	asrs	r3, r1, #5
   bae74:	4298      	cmp	r0, r3
   bae76:	b510      	push	{r4, lr}
   bae78:	db11      	blt.n	bae9e <__any_on+0x32>
   bae7a:	dd0a      	ble.n	bae92 <__any_on+0x26>
   bae7c:	f011 011f 	ands.w	r1, r1, #31
   bae80:	d007      	beq.n	bae92 <__any_on+0x26>
   bae82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bae86:	fa24 f001 	lsr.w	r0, r4, r1
   bae8a:	fa00 f101 	lsl.w	r1, r0, r1
   bae8e:	428c      	cmp	r4, r1
   bae90:	d10b      	bne.n	baeaa <__any_on+0x3e>
   bae92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bae96:	4293      	cmp	r3, r2
   bae98:	d803      	bhi.n	baea2 <__any_on+0x36>
   bae9a:	2000      	movs	r0, #0
   bae9c:	bd10      	pop	{r4, pc}
   bae9e:	4603      	mov	r3, r0
   baea0:	e7f7      	b.n	bae92 <__any_on+0x26>
   baea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   baea6:	2900      	cmp	r1, #0
   baea8:	d0f5      	beq.n	bae96 <__any_on+0x2a>
   baeaa:	2001      	movs	r0, #1
   baeac:	e7f6      	b.n	bae9c <__any_on+0x30>

000baeae <_calloc_r>:
   baeae:	b513      	push	{r0, r1, r4, lr}
   baeb0:	434a      	muls	r2, r1
   baeb2:	4611      	mov	r1, r2
   baeb4:	9201      	str	r2, [sp, #4]
   baeb6:	f7fb fd11 	bl	b68dc <_malloc_r>
   baeba:	4604      	mov	r4, r0
   baebc:	b118      	cbz	r0, baec6 <_calloc_r+0x18>
   baebe:	9a01      	ldr	r2, [sp, #4]
   baec0:	2100      	movs	r1, #0
   baec2:	f7fd ffcf 	bl	b8e64 <memset>
   baec6:	4620      	mov	r0, r4
   baec8:	b002      	add	sp, #8
   baeca:	bd10      	pop	{r4, pc}
   baecc:	0000      	movs	r0, r0
	...

000baed0 <nan>:
   baed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; baed8 <nan+0x8>
   baed4:	4770      	bx	lr
   baed6:	bf00      	nop
   baed8:	00000000 	.word	0x00000000
   baedc:	7ff80000 	.word	0x7ff80000

000baee0 <nanf>:
   baee0:	ed9f 0a01 	vldr	s0, [pc, #4]	; baee8 <nanf+0x8>
   baee4:	4770      	bx	lr
   baee6:	bf00      	nop
   baee8:	7fc00000 	.word	0x7fc00000

000baeec <__ascii_wctomb>:
   baeec:	b149      	cbz	r1, baf02 <__ascii_wctomb+0x16>
   baeee:	2aff      	cmp	r2, #255	; 0xff
   baef0:	bf85      	ittet	hi
   baef2:	238a      	movhi	r3, #138	; 0x8a
   baef4:	6003      	strhi	r3, [r0, #0]
   baef6:	700a      	strbls	r2, [r1, #0]
   baef8:	f04f 30ff 	movhi.w	r0, #4294967295
   baefc:	bf98      	it	ls
   baefe:	2001      	movls	r0, #1
   baf00:	4770      	bx	lr
   baf02:	4608      	mov	r0, r1
   baf04:	4770      	bx	lr

000baf06 <link_code_end>:
	...

000baf08 <link_const_data_start>:
   baf08:	514d0400 	.word	0x514d0400
   baf0c:	00045454 	.word	0x00045454
   baf10:	49514d06 	.word	0x49514d06
   baf14:	03706473 	.word	0x03706473

000baf18 <dynalib_user>:
   baf18:	000b4b15 000b4b51 000b4b79 000b4b7d     .K..QK..yK..}K..
   baf28:	00000000 72617073 696c636b 5f746e65     ....sparkclient_
   baf38:	74716d00 65520074 6e727574 6c617620     .mqtt.Return val
   baf48:	203a6575 000a6425 6f677241 6f42206e     ue: %d..Argon Bo
   baf58:	6e69746f 70002e67 7265776f 7465672f     oting..power/get
   baf68:	696c4300 20746e65 63736964 656e6e6f     .Client disconne
   baf78:	64657463 74202d20 6e697972 6f742067     cted - trying to
   baf88:	63657220 656e6e6f 0a3a7463 776f5000      reconnect:..Pow
   baf98:	70007265 7265776f 32393100 3836312e     er.power.192.168
   bafa8:	312e312e 62003230 63697361 7274735f     .1.102.basic_str
   bafb8:	3a676e69 7070613a 00646e65 7922207b     ing::append.{ "y
   bafc8:	22726165 2522203a 202c2264 6f6d2200     ear": "%d", ."mo
   bafd8:	2268746e 2522203a 22643230 2200202c     nth": "%02d", ."
   bafe8:	22796164 2522203a 22643230 2200202c     day": "%02d", ."
   baff8:	5f796164 226f7774 2522203a 22643230     day_two": "%02d"
   bb008:	2200202c 72756f68 22203a22 64323025     , ."hour": "%02d
   bb018:	007d2022 72706c65 72657369 73616200     " }.elpriser.bas
   bb028:	735f6369 6e697274 5f3a3a67 6f635f4d     ic_string::_M_co
   bb038:	7274736e 20746375 6c6c756e 746f6e20     nstruct null not
   bb048:	6c617620 67006469 705f7465 65636972      valid.get_price
   bb058:	6f4e0073 69727020 20736563 00746579     s.No prices yet.
   bb068:	206f7420 64323025 3025202c 20006432      to %02d, %02d. 
   bb078:	32206f74 25202c34 00643230 206f7420     to 24, %02d. to 
   bb088:	64323025 776f4c00 69725020 49206563     %02d.Low Price I
   bb098:	7265746e 736c6176 6576003a 726f7463     ntervals:.vector
   bb0a8:	4d5f3a3a 6165725f 636f6c6c 736e695f     ::_M_realloc_ins
   bb0b8:	00747265 7373654d 20656761 61746164     ert.Message data
   bb0c8:	6e736920 72207427 79646165 74657920      isn't ready yet
   bb0d8:	654d002e 67617373 73612065 626d6573     ..Message assemb
   bb0e8:	2e64656c 73002100 00696f74 666f7473     led..!.stoi.stof
   bb0f8:	73654d00 65676173 74614420 65522061     .Message Data Re
   bb108:	76696563 002e6465                       ceived..

000bb110 <_ZTV5Timer>:
	...
   bb118:	000b4fa9 000b4fed 000b4e15              .O...O...N..

000bb124 <_ZTVN5spark13EthernetClassE>:
	...
   bb12c:	000b698b 000b6981 000b6977 000b696d     .i...i..wi..mi..
   bb13c:	000b6961 000b6955 000b8191 000b8199     ai..Ui..........
   bb14c:	000b6949 000b6941 000b6937 000b692d     Ii..Ai..7i..-i..
   bb15c:	000b81c9                                ....

000bb160 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bb168:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bb178:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bb188 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb190:	000b71cd 000b71d3 000b7211 000b71e1     .q...q...r...q..
   bb1a0:	000b71cf                                .q..

000bb1a4 <_ZTV9IPAddress>:
	...
   bb1ac:	000b7729 000b7719 000b771b              )w...w...w..

000bb1b8 <_ZTV9USBSerial>:
	...
   bb1c0:	000b783b 000b78a3 000b7879 000b6d31     ;x...x..yx..1m..
   bb1d0:	000b786b 000b783d 000b784d 000b789d     kx..=x..Mx...x..
   bb1e0:	000b785d 000b7835                       ]x..5x..

000bb1e8 <_ZTV11USARTSerial>:
	...
   bb1f0:	000b79f5 000b7a61 000b7a39 000b6d31     .y..az..9z..1m..
   bb200:	000b7a09 000b7a25 000b7a17 000b7a33     .z..%z...z..3z..
   bb210:	000b79f7 000b79fb                       .y...y..

000bb218 <_ZTV7TwoWire>:
	...
   bb220:	000b7ac1 000b7b0b 000b7ae3 000b7ac3     .z...{...z...z..
   bb230:	000b7aeb 000b7af3 000b7afb 000b7b03     .z...z...z...{..
   bb240:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   bb250:	203d2072 00006425                       r = %d..

000bb258 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb260:	000b7bc1 000b7be5 000b80cf 000b7bf3     .{...{.......{..
   bb270:	000b7bc5                                .{..

000bb274 <_ZTV9TCPClient>:
	...
   bb27c:	000b705d 000b7075 000b7b3d 000b7b57     ]p..up..={..W{..
   bb28c:	000b7f65 000b7b81 000b7ddb 000b7bb5     e....{...}...{..
   bb29c:	000b7e6d 000b7cad 000b7e09 000b8019     m~...|...~......
   bb2ac:	000b7da9 000b7bb7 000b7b69 000b7bf9     .}...{..i{...{..
   bb2bc:	000b7c8d                                .|..

000bb2c0 <_ZTVN5spark9WiFiClassE>:
	...
   bb2c8:	000b8133 000b8129 000b811f 000b80d5     3...)...........
   bb2d8:	000b8113 000b8107 000b8191 000b8199     ................
   bb2e8:	000b80fb 000b80f3 000b80e9 000b80df     ................
   bb2f8:	000b81c9                                ....

000bb2fc <_ZTVN5spark12NetworkClassE>:
	...
   bb304:	000b8151 000b815b 000b8165 000b816f     Q...[...e...o...
   bb314:	000b8179 000b8185 000b8191 000b8199     y...............
   bb324:	000b81a1 000b81ad 000b81b5 000b81bf     ................
   bb334:	000b81c9                                ....

000bb338 <_ZSt7nothrow>:
	...

000bb339 <_ZTSSt19_Sp_make_shared_tag>:
   bb339:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bb349:	5f646572 00676174                        red_tag....

000bb354 <_ZTISt19_Sp_make_shared_tag>:
   bb354:	000bb4a0 000bb339 20746f6e 756f6e65     ....9...not enou
   bb364:	73206867 65636170 726f6620 726f6620     gh space for for
   bb374:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   bb384:	7361656c 75732065 74696d62 6c756620     lease submit ful
   bb394:	7562206c 65722067 74726f70 20746120     l bug report at 
   bb3a4:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   bb3b4:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   bb3c4:	32313000 36353433 00393837 69736162     .0123456789.basi
   bb3d4:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   bb3e4:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
   bb3f4:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
   bb404:	2d736968 7a69733e 20292865 69687728     his->size() (whi
   bb414:	69206863 7a252073 62002975 63697361     ch is %zu).basic
   bb424:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
   bb434:	00656361 69736162 74735f63 676e6972     ace.basic_string
   bb444:	61623a3a 5f636973 69727473 6200676e     ::basic_string.b
   bb454:	63697361 7274735f 3a676e69 6275733a     asic_string::sub
   bb464:	00727473                                str.

000bb468 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb468:	000bb500 000bb474 000bb524              ....t...$...

000bb474 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb474:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bb484:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bb494:	00000045                                E...

000bb498 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb498:	00000000 000bb468 000b8b9d 000b8bb1     ....h...........
   bb4a8:	000b8d45 000b8d45 000b8c1b 000b8b5d     E...E.......]...
   bb4b8:	000b8c03 000b8bc5 000b8b8f              ............

000bb4c4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb4c4:	000bb500 000bb4d0 000bb468              ........h...

000bb4d0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb4d0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bb4e0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bb4f0:	456f666e 00000000                       nfoE....

000bb4f8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb4f8:	00000000 000bb4c4 000b8c45 000b8c59     ........E...Y...
   bb508:	000b8d45 000b8d45 000b8c1b 000b8b5d     E...E.......]...
   bb518:	000b8d19 000b8ca5 000b8c6d              ........m...

000bb524 <_ZTISt9type_info>:
   bb524:	000bb4a0 000bb52c                       ....,...

000bb52c <_ZTSSt9type_info>:
   bb52c:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   bb53c:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   bb54c:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000bb559 <day_name.1>:
   bb559:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bb569:	61536972                                 riSat

000bb56e <mon_name.0>:
   bb56e:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bb57e:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bb58e:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bb59e:	63757320 64656563 2f006465 2f746e6d      succeeded./mnt/
   bb5ae:	6b726f77 63617073 6f772f65 70736b72     workspace/worksp
   bb5be:	2f656361 2d434347 702d3031 6c657069     ace/GCC-10-pipel
   bb5ce:	2f656e69 6b6e656a 2d736e69 2d434347     ine/jenkins-GCC-
   bb5de:	702d3031 6c657069 2d656e69 325f3834     10-pipeline-48_2
   bb5ee:	31303230 5f343231 36303631 36303831     0201124_16061806
   bb5fe:	732f3134 6e2f6372 696c7765 656e2f62     41/src/newlib/ne
   bb60e:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
   bb61e:	6e61722f 00632e64 6900666e 7974696e     /rand.c.nf.inity
   bb62e:	006e6100                                 .an...

000bb634 <fpi.1>:
   bb634:	00000035 fffffbce 000003cb 00000001     5...............
   bb644:	00000000                                ....

000bb648 <fpinan.0>:
   bb648:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bb660 <tinytens>:
   bb660:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bb670:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bb680:	64ac6f43 11680628                       Co.d(.h.

000bb688 <_ctype_>:
   bb688:	20202000 20202020 28282020 20282828     .         ((((( 
   bb698:	20202020 20202020 20202020 20202020                     
   bb6a8:	10108820 10101010 10101010 10101010      ...............
   bb6b8:	04040410 04040404 10040404 10101010     ................
   bb6c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bb6d8:	01010101 01010101 01010101 10101010     ................
   bb6e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bb6f8:	02020202 02020202 02020202 10101010     ................
   bb708:	00000020 00000000 00000000 00000000      ...............
	...
   bb788:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bb798:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bb7a8:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bb7b8:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bb7c8:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bb7d8:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bb7e8:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bb7f8:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bb808:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bb818:	78656874 0000632e                       thex.c..

000bb820 <_C_numeric_locale>:
   bb820:	000bb0eb 000baf94 2003e3a4 4f500043     ........... C.PO
   bb830:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bb840:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bb850:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bb860:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bb870:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bb880:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bb890:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bb8a0:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bb8b0:	00000063 00000000                       c.......

000bb8b8 <__mprec_bigtens>:
   bb8b8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bb8c8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bb8d8:	7f73bf3c 75154fdd                       <.s..O.u

000bb8e0 <__mprec_tens>:
   bb8e0:	00000000 3ff00000 00000000 40240000     .......?......$@
   bb8f0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bb900:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bb910:	00000000 412e8480 00000000 416312d0     .......A......cA
   bb920:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bb930:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bb940:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bb950:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bb960:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bb970:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bb980:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bb990:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bb9a0:	79d99db4 44ea7843                       ...yCx.D

000bb9a8 <p05.0>:
   bb9a8:	00000005 00000019 0000007d              ........}...

000bb9b4 <link_const_data_end>:
   bb9b4:	000b4dc9 	.word	0x000b4dc9
   bb9b8:	000b5a45 	.word	0x000b5a45
   bb9bc:	000b6995 	.word	0x000b6995
   bb9c0:	000b69bd 	.word	0x000b69bd
   bb9c4:	000b6d21 	.word	0x000b6d21
   bb9c8:	000b6e51 	.word	0x000b6e51
   bb9cc:	000b7041 	.word	0x000b7041
   bb9d0:	000b7089 	.word	0x000b7089
   bb9d4:	000b813d 	.word	0x000b813d
   bb9d8:	000b82a1 	.word	0x000b82a1
