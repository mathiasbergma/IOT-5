
c:/Users/mikeh/vscode-particle/Power_monitor/power_monitor/target/5.0.1/argon/power_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009224  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd244  000bd244  0000d244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001f4  2003e290  000bd268  0000e290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000036c  2003e488  2003e488  0001e488  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bd45c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bd460  000bd460  0001d460  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bd466  000bd466  0001d466  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bd48a  000bd48a  0001d48a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00179c3b  00000000  00000000  0001d48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00017ec4  00000000  00000000  001970c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00046871  00000000  00000000  001aef8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003580  00000000  00000000  001f57fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ca98  00000000  00000000  001f8d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e8fa  00000000  00000000  00205816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004cb60  00000000  00000000  00244110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00159b0e  00000000  00000000  00290c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b4f8  00000000  00000000  003ea780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2uiz>:
   b48f8:	004a      	lsls	r2, r1, #1
   b48fa:	d211      	bcs.n	b4920 <__aeabi_d2uiz+0x28>
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d211      	bcs.n	b4926 <__aeabi_d2uiz+0x2e>
   b4902:	d50d      	bpl.n	b4920 <__aeabi_d2uiz+0x28>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d40e      	bmi.n	b492c <__aeabi_d2uiz+0x34>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	4770      	bx	lr
   b4920:	f04f 0000 	mov.w	r0, #0
   b4924:	4770      	bx	lr
   b4926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492a:	d102      	bne.n	b4932 <__aeabi_d2uiz+0x3a>
   b492c:	f04f 30ff 	mov.w	r0, #4294967295
   b4930:	4770      	bx	lr
   b4932:	f04f 0000 	mov.w	r0, #0
   b4936:	4770      	bx	lr

000b4938 <__aeabi_d2f>:
   b4938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b493c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4940:	bf24      	itt	cs
   b4942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b494a:	d90d      	bls.n	b4968 <__aeabi_d2f+0x30>
   b494c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b495c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4960:	bf08      	it	eq
   b4962:	f020 0001 	biceq.w	r0, r0, #1
   b4966:	4770      	bx	lr
   b4968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b496c:	d121      	bne.n	b49b2 <__aeabi_d2f+0x7a>
   b496e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4972:	bfbc      	itt	lt
   b4974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4978:	4770      	bxlt	lr
   b497a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b497e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4982:	f1c2 0218 	rsb	r2, r2, #24
   b4986:	f1c2 0c20 	rsb	ip, r2, #32
   b498a:	fa10 f30c 	lsls.w	r3, r0, ip
   b498e:	fa20 f002 	lsr.w	r0, r0, r2
   b4992:	bf18      	it	ne
   b4994:	f040 0001 	orrne.w	r0, r0, #1
   b4998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b499c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49a4:	ea40 000c 	orr.w	r0, r0, ip
   b49a8:	fa23 f302 	lsr.w	r3, r3, r2
   b49ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49b0:	e7cc      	b.n	b494c <__aeabi_d2f+0x14>
   b49b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49b6:	d107      	bne.n	b49c8 <__aeabi_d2f+0x90>
   b49b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49bc:	bf1e      	ittt	ne
   b49be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49c6:	4770      	bxne	lr
   b49c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49d4:	4770      	bx	lr
   b49d6:	bf00      	nop

000b49d8 <__aeabi_d2ulz>:
   b49d8:	b5d0      	push	{r4, r6, r7, lr}
   b49da:	4b0c      	ldr	r3, [pc, #48]	; (b4a0c <__aeabi_d2ulz+0x34>)
   b49dc:	2200      	movs	r2, #0
   b49de:	4606      	mov	r6, r0
   b49e0:	460f      	mov	r7, r1
   b49e2:	f7ff fcd9 	bl	b4398 <__aeabi_dmul>
   b49e6:	f7ff ff87 	bl	b48f8 <__aeabi_d2uiz>
   b49ea:	4604      	mov	r4, r0
   b49ec:	f7ff fc5a 	bl	b42a4 <__aeabi_ui2d>
   b49f0:	4b07      	ldr	r3, [pc, #28]	; (b4a10 <__aeabi_d2ulz+0x38>)
   b49f2:	2200      	movs	r2, #0
   b49f4:	f7ff fcd0 	bl	b4398 <__aeabi_dmul>
   b49f8:	4602      	mov	r2, r0
   b49fa:	460b      	mov	r3, r1
   b49fc:	4630      	mov	r0, r6
   b49fe:	4639      	mov	r1, r7
   b4a00:	f7ff fb12 	bl	b4028 <__aeabi_dsub>
   b4a04:	f7ff ff78 	bl	b48f8 <__aeabi_d2uiz>
   b4a08:	4621      	mov	r1, r4
   b4a0a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a0c:	3df00000 	.word	0x3df00000
   b4a10:	41f00000 	.word	0x41f00000
	...

000b4a20 <memchr>:
   b4a20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a24:	2a10      	cmp	r2, #16
   b4a26:	db2b      	blt.n	b4a80 <memchr+0x60>
   b4a28:	f010 0f07 	tst.w	r0, #7
   b4a2c:	d008      	beq.n	b4a40 <memchr+0x20>
   b4a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a32:	3a01      	subs	r2, #1
   b4a34:	428b      	cmp	r3, r1
   b4a36:	d02d      	beq.n	b4a94 <memchr+0x74>
   b4a38:	f010 0f07 	tst.w	r0, #7
   b4a3c:	b342      	cbz	r2, b4a90 <memchr+0x70>
   b4a3e:	d1f6      	bne.n	b4a2e <memchr+0xe>
   b4a40:	b4f0      	push	{r4, r5, r6, r7}
   b4a42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4a46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b4a4a:	f022 0407 	bic.w	r4, r2, #7
   b4a4e:	f07f 0700 	mvns.w	r7, #0
   b4a52:	2300      	movs	r3, #0
   b4a54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4a58:	3c08      	subs	r4, #8
   b4a5a:	ea85 0501 	eor.w	r5, r5, r1
   b4a5e:	ea86 0601 	eor.w	r6, r6, r1
   b4a62:	fa85 f547 	uadd8	r5, r5, r7
   b4a66:	faa3 f587 	sel	r5, r3, r7
   b4a6a:	fa86 f647 	uadd8	r6, r6, r7
   b4a6e:	faa5 f687 	sel	r6, r5, r7
   b4a72:	b98e      	cbnz	r6, b4a98 <memchr+0x78>
   b4a74:	d1ee      	bne.n	b4a54 <memchr+0x34>
   b4a76:	bcf0      	pop	{r4, r5, r6, r7}
   b4a78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a7c:	f002 0207 	and.w	r2, r2, #7
   b4a80:	b132      	cbz	r2, b4a90 <memchr+0x70>
   b4a82:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a86:	3a01      	subs	r2, #1
   b4a88:	ea83 0301 	eor.w	r3, r3, r1
   b4a8c:	b113      	cbz	r3, b4a94 <memchr+0x74>
   b4a8e:	d1f8      	bne.n	b4a82 <memchr+0x62>
   b4a90:	2000      	movs	r0, #0
   b4a92:	4770      	bx	lr
   b4a94:	3801      	subs	r0, #1
   b4a96:	4770      	bx	lr
   b4a98:	2d00      	cmp	r5, #0
   b4a9a:	bf06      	itte	eq
   b4a9c:	4635      	moveq	r5, r6
   b4a9e:	3803      	subeq	r0, #3
   b4aa0:	3807      	subne	r0, #7
   b4aa2:	f015 0f01 	tst.w	r5, #1
   b4aa6:	d107      	bne.n	b4ab8 <memchr+0x98>
   b4aa8:	3001      	adds	r0, #1
   b4aaa:	f415 7f80 	tst.w	r5, #256	; 0x100
   b4aae:	bf02      	ittt	eq
   b4ab0:	3001      	addeq	r0, #1
   b4ab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b4ab6:	3001      	addeq	r0, #1
   b4ab8:	bcf0      	pop	{r4, r5, r6, r7}
   b4aba:	3801      	subs	r0, #1
   b4abc:	4770      	bx	lr
   b4abe:	bf00      	nop

000b4ac0 <strcmp>:
   b4ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ac8:	2a01      	cmp	r2, #1
   b4aca:	bf28      	it	cs
   b4acc:	429a      	cmpcs	r2, r3
   b4ace:	d0f7      	beq.n	b4ac0 <strcmp>
   b4ad0:	1ad0      	subs	r0, r2, r3
   b4ad2:	4770      	bx	lr

000b4ad4 <strlen>:
   b4ad4:	4603      	mov	r3, r0
   b4ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4ada:	2a00      	cmp	r2, #0
   b4adc:	d1fb      	bne.n	b4ad6 <strlen+0x2>
   b4ade:	1a18      	subs	r0, r3, r0
   b4ae0:	3801      	subs	r0, #1
   b4ae2:	4770      	bx	lr

000b4ae4 <__aeabi_d2lz>:
   b4ae4:	b538      	push	{r3, r4, r5, lr}
   b4ae6:	2200      	movs	r2, #0
   b4ae8:	2300      	movs	r3, #0
   b4aea:	4604      	mov	r4, r0
   b4aec:	460d      	mov	r5, r1
   b4aee:	f7ff fec5 	bl	b487c <__aeabi_dcmplt>
   b4af2:	b928      	cbnz	r0, b4b00 <__aeabi_d2lz+0x1c>
   b4af4:	4620      	mov	r0, r4
   b4af6:	4629      	mov	r1, r5
   b4af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4afc:	f7ff bf6c 	b.w	b49d8 <__aeabi_d2ulz>
   b4b00:	4620      	mov	r0, r4
   b4b02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4b06:	f7ff ff67 	bl	b49d8 <__aeabi_d2ulz>
   b4b0a:	4240      	negs	r0, r0
   b4b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b10:	bd38      	pop	{r3, r4, r5, pc}
   b4b12:	bf00      	nop

000b4b14 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b14:	4809      	ldr	r0, [pc, #36]	; (b4b3c <module_user_pre_init+0x28>)
   b4b16:	490a      	ldr	r1, [pc, #40]	; (b4b40 <module_user_pre_init+0x2c>)
   b4b18:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4b1a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b1c:	d005      	beq.n	b4b2a <module_user_pre_init+0x16>
   b4b1e:	4a09      	ldr	r2, [pc, #36]	; (b4b44 <module_user_pre_init+0x30>)
   b4b20:	4282      	cmp	r2, r0
   b4b22:	d002      	beq.n	b4b2a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4b24:	1a12      	subs	r2, r2, r0
   b4b26:	f005 fc39 	bl	ba39c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4b2a:	4807      	ldr	r0, [pc, #28]	; (b4b48 <module_user_pre_init+0x34>)
   b4b2c:	4a07      	ldr	r2, [pc, #28]	; (b4b4c <module_user_pre_init+0x38>)
   b4b2e:	2100      	movs	r1, #0
   b4b30:	1a12      	subs	r2, r2, r0
   b4b32:	f005 fc5b 	bl	ba3ec <memset>
    return &link_global_data_start;
}
   b4b36:	4801      	ldr	r0, [pc, #4]	; (b4b3c <module_user_pre_init+0x28>)
   b4b38:	bd08      	pop	{r3, pc}
   b4b3a:	bf00      	nop
   b4b3c:	2003e290 	.word	0x2003e290
   b4b40:	000bd268 	.word	0x000bd268
   b4b44:	2003e484 	.word	0x2003e484
   b4b48:	2003e488 	.word	0x2003e488
   b4b4c:	2003e7f4 	.word	0x2003e7f4

000b4b50 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4b50:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b52:	4e07      	ldr	r6, [pc, #28]	; (b4b70 <module_user_init+0x20>)
   b4b54:	4c07      	ldr	r4, [pc, #28]	; (b4b74 <module_user_init+0x24>)
    module_user_init_hook();
   b4b56:	f003 fdcb 	bl	b86f0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b5a:	1ba4      	subs	r4, r4, r6
   b4b5c:	08a4      	lsrs	r4, r4, #2
   b4b5e:	2500      	movs	r5, #0
   b4b60:	42ac      	cmp	r4, r5
   b4b62:	d100      	bne.n	b4b66 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b64:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b66:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b6a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b6c:	3501      	adds	r5, #1
   b4b6e:	e7f7      	b.n	b4b60 <module_user_init+0x10>
   b4b70:	000bd21c 	.word	0x000bd21c
   b4b74:	000bd244 	.word	0x000bd244

000b4b78 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b78:	f000 b8a6 	b.w	b4cc8 <setup>

000b4b7c <module_user_loop>:
}

void module_user_loop() {
   b4b7c:	b508      	push	{r3, lr}
    loop();
   b4b7e:	f000 f971 	bl	b4e64 <loop>
    _post_loop();
}
   b4b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b86:	f003 bd6b 	b.w	b8660 <_post_loop>

000b4b8a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b8a:	f002 b82b 	b.w	b6be4 <malloc>

000b4b8e <_Znaj>:
   b4b8e:	f002 b829 	b.w	b6be4 <malloc>

000b4b92 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4b92:	f002 b82f 	b.w	b6bf4 <free>

000b4b96 <_ZdaPv>:
   b4b96:	f002 b82d 	b.w	b6bf4 <free>

000b4b9a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b9a:	f002 b82b 	b.w	b6bf4 <free>

000b4b9e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b9e:	7800      	ldrb	r0, [r0, #0]
   b4ba0:	fab0 f080 	clz	r0, r0
   b4ba4:	0940      	lsrs	r0, r0, #5
   b4ba6:	4770      	bx	lr

000b4ba8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ba8:	2301      	movs	r3, #1
   b4baa:	7003      	strb	r3, [r0, #0]
   b4bac:	4770      	bx	lr

000b4bae <_Z12mqttCallbackPcPhj>:

void mqttCallback(char *topic, byte *payload, unsigned int length)
{
    // The MQTT client will call this function, when receiving a message on a subscribed topic.
    // This provides a way to send instructions - for example to trigger a price update.
}
   b4bae:	4770      	bx	lr

000b4bb0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4bb0:	b40e      	push	{r1, r2, r3}
   b4bb2:	b503      	push	{r0, r1, lr}
   b4bb4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4bb6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4bb8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4bbc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4bbe:	f003 fbda 	bl	b8376 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4bc2:	b002      	add	sp, #8
   b4bc4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bc8:	b003      	add	sp, #12
   b4bca:	4770      	bx	lr

000b4bcc <_Z9ble_setupv>:
bool device_connected = false;
bool advertising_BLE = false;



void ble_setup(void){
   b4bcc:	b570      	push	{r4, r5, r6, lr}
   b4bce:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b4bd0:	f002 fd20 	bl	b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bd4:	2102      	movs	r1, #2
   b4bd6:	f002 fd6e 	bl	b76b6 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4bda:	f002 fd1b 	bl	b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bde:	f002 fd63 	bl	b76a8 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4be2:	f002 fd17 	bl	b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4be6:	4a31      	ldr	r2, [pc, #196]	; (b4cac <_Z9ble_setupv+0xe0>)
   b4be8:	4c31      	ldr	r4, [pc, #196]	; (b4cb0 <_Z9ble_setupv+0xe4>)
   b4bea:	4601      	mov	r1, r0
   b4bec:	a80b      	add	r0, sp, #44	; 0x2c
   b4bee:	f003 fa53 	bl	b8098 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4bf2:	a80b      	add	r0, sp, #44	; 0x2c
   b4bf4:	f002 fdfb 	bl	b77ee <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4bf8:	f002 fd0c 	bl	b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bfc:	4a2d      	ldr	r2, [pc, #180]	; (b4cb4 <_Z9ble_setupv+0xe8>)
   b4bfe:	4601      	mov	r1, r0
   b4c00:	a80b      	add	r0, sp, #44	; 0x2c
   b4c02:	f003 fa49 	bl	b8098 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4c06:	a80b      	add	r0, sp, #44	; 0x2c
   b4c08:	f002 fdf1 	bl	b77ee <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4c0c:	f002 fd02 	bl	b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c10:	4a29      	ldr	r2, [pc, #164]	; (b4cb8 <_Z9ble_setupv+0xec>)
   b4c12:	4601      	mov	r1, r0
   b4c14:	a80b      	add	r0, sp, #44	; 0x2c
   b4c16:	f003 fa3f 	bl	b8098 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4c1a:	a80b      	add	r0, sp, #44	; 0x2c
   b4c1c:	f002 fde7 	bl	b77ee <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b4c20:	f002 fcf8 	bl	b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c24:	4a25      	ldr	r2, [pc, #148]	; (b4cbc <_Z9ble_setupv+0xf0>)
   b4c26:	4601      	mov	r1, r0
   b4c28:	a80b      	add	r0, sp, #44	; 0x2c
   b4c2a:	f003 fa35 	bl	b8098 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4c2e:	a80b      	add	r0, sp, #44	; 0x2c
   b4c30:	f002 fddd 	bl	b77ee <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b4c34:	a803      	add	r0, sp, #12
   b4c36:	f002 ff10 	bl	b7a5a <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b4c3a:	4b21      	ldr	r3, [pc, #132]	; (b4cc0 <_Z9ble_setupv+0xf4>)
   b4c3c:	a803      	add	r0, sp, #12
   b4c3e:	6819      	ldr	r1, [r3, #0]
   b4c40:	f002 ff1e 	bl	b7a80 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4c46:	ad06      	add	r5, sp, #24
   b4c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4c4a:	ad06      	add	r5, sp, #24
   b4c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c4e:	6826      	ldr	r6, [r4, #0]
   b4c50:	ac0b      	add	r4, sp, #44	; 0x2c
   b4c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c54:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4c56:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c58:	f002 fb50 	bl	b72fc <_ZNK8particle7BleUuid4typeEv>
   b4c5c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4c5e:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c60:	b9dc      	cbnz	r4, b4c9a <_Z9ble_setupv+0xce>
            uint16_t uuid16 = tempUUID.shorted();
   b4c62:	f002 fb67 	bl	b7334 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4c66:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4c68:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4c6c:	2302      	movs	r3, #2
   b4c6e:	f10d 020a 	add.w	r2, sp, #10
   b4c72:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4c74:	a803      	add	r0, sp, #12
   b4c76:	f002 fee5 	bl	b7a44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4c7a:	f002 fccb 	bl	b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c7e:	2200      	movs	r2, #0
   b4c80:	a903      	add	r1, sp, #12
   b4c82:	f002 fd5f 	bl	b7744 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for client connection...");
   b4c86:	f004 f8f3 	bl	b8e70 <_Z16_fetch_usbserialv>
   b4c8a:	490e      	ldr	r1, [pc, #56]	; (b4cc4 <_Z9ble_setupv+0xf8>)
   b4c8c:	f003 fb4b 	bl	b8326 <_ZN5Print7printlnEPKc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4c90:	9803      	ldr	r0, [sp, #12]
   b4c92:	f001 ffaf 	bl	b6bf4 <free>


}
   b4c96:	b010      	add	sp, #64	; 0x40
   b4c98:	bd70      	pop	{r4, r5, r6, pc}
   b4c9a:	f002 fb4d 	bl	b7338 <_ZNK8particle7BleUuid8rawBytesEv>
   b4c9e:	2300      	movs	r3, #0
   b4ca0:	9300      	str	r3, [sp, #0]
   b4ca2:	4602      	mov	r2, r0
   b4ca4:	2310      	movs	r3, #16
   b4ca6:	2107      	movs	r1, #7
   b4ca8:	e7e4      	b.n	b4c74 <_Z9ble_setupv+0xa8>
   b4caa:	bf00      	nop
   b4cac:	2003e498 	.word	0x2003e498
   b4cb0:	2003e4bc 	.word	0x2003e4bc
   b4cb4:	2003e488 	.word	0x2003e488
   b4cb8:	2003e490 	.word	0x2003e490
   b4cbc:	2003e4a0 	.word	0x2003e4a0
   b4cc0:	2003e29c 	.word	0x2003e29c
   b4cc4:	000bc4e4 	.word	0x000bc4e4

000b4cc8 <setup>:
{
   b4cc8:	b510      	push	{r4, lr}
   b4cca:	b088      	sub	sp, #32
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4ccc:	f001 ff62 	bl	b6b94 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4cd0:	b910      	cbnz	r0, b4cd8 <setup+0x10>
            spark_process();
   b4cd2:	f001 ff57 	bl	b6b84 <spark_process>
        while (_while() && !_condition()) {
   b4cd6:	e7f9      	b.n	b4ccc <setup+0x4>
   b4cd8:	f001 ff5c 	bl	b6b94 <spark_cloud_flag_connected>
    wattSensor.initSensor();
   b4cdc:	481b      	ldr	r0, [pc, #108]	; (b4d4c <setup+0x84>)
   b4cde:	f001 f83d 	bl	b5d5c <_ZN6Sensor10initSensorEv>
    ble_setup();
   b4ce2:	f7ff ff73 	bl	b4bcc <_Z9ble_setupv>
    Serial.printf("Return value: %d\n", mqttClient.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt"));
   b4ce6:	f004 f8c3 	bl	b8e70 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4cea:	4919      	ldr	r1, [pc, #100]	; (b4d50 <setup+0x88>)
   b4cec:	4604      	mov	r4, r0
   b4cee:	a804      	add	r0, sp, #16
   b4cf0:	f002 f8f4 	bl	b6edc <_ZN6StringC1EPK19__FlashStringHelper>
   b4cf4:	f003 fc1f 	bl	b8536 <_ZN9TimeClass3nowEv>
   b4cf8:	220a      	movs	r2, #10
   b4cfa:	4601      	mov	r1, r0
   b4cfc:	4668      	mov	r0, sp
   b4cfe:	f002 f93f 	bl	b6f80 <_ZN6StringC1Elh>
   b4d02:	4669      	mov	r1, sp
   b4d04:	a804      	add	r0, sp, #16
   b4d06:	f002 f965 	bl	b6fd4 <_ZplRK15StringSumHelperRK6String>
   b4d0a:	4b12      	ldr	r3, [pc, #72]	; (b4d54 <setup+0x8c>)
   b4d0c:	6801      	ldr	r1, [r0, #0]
   b4d0e:	4812      	ldr	r0, [pc, #72]	; (b4d58 <setup+0x90>)
   b4d10:	461a      	mov	r2, r3
   b4d12:	f001 fa6b 	bl	b61ec <_ZN4MQTT7connectEPKcS1_S1_>
   b4d16:	4911      	ldr	r1, [pc, #68]	; (b4d5c <setup+0x94>)
   b4d18:	4602      	mov	r2, r0
   b4d1a:	4620      	mov	r0, r4
   b4d1c:	f7ff ff48 	bl	b4bb0 <_ZN5Print6printfEPKcz>
   b4d20:	4668      	mov	r0, sp
   b4d22:	f002 f890 	bl	b6e46 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4d26:	a804      	add	r0, sp, #16
   b4d28:	f002 f88d 	bl	b6e46 <_ZN6StringD1Ev>
    if (mqttClient.isConnected())
   b4d2c:	480a      	ldr	r0, [pc, #40]	; (b4d58 <setup+0x90>)
   b4d2e:	f001 f96d 	bl	b600c <_ZN4MQTT11isConnectedEv>
   b4d32:	b120      	cbz	r0, b4d3e <setup+0x76>
        mqttClient.publish("power/get", "Argon Booting.");
   b4d34:	4a0a      	ldr	r2, [pc, #40]	; (b4d60 <setup+0x98>)
   b4d36:	490b      	ldr	r1, [pc, #44]	; (b4d64 <setup+0x9c>)
   b4d38:	4807      	ldr	r0, [pc, #28]	; (b4d58 <setup+0x90>)
   b4d3a:	f001 fae2 	bl	b6302 <_ZN4MQTT7publishEPKcS1_>
    prices.initSubscriptions();
   b4d3e:	480a      	ldr	r0, [pc, #40]	; (b4d68 <setup+0xa0>)
}
   b4d40:	b008      	add	sp, #32
   b4d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prices.initSubscriptions();
   b4d46:	f000 bc5f 	b.w	b5608 <_ZN10PriceClass17initSubscriptionsEv>
   b4d4a:	bf00      	nop
   b4d4c:	2003e5d0 	.word	0x2003e5d0
   b4d50:	000bc505 	.word	0x000bc505
   b4d54:	000bc512 	.word	0x000bc512
   b4d58:	2003e510 	.word	0x2003e510
   b4d5c:	000bc517 	.word	0x000bc517
   b4d60:	000bc529 	.word	0x000bc529
   b4d64:	000bc538 	.word	0x000bc538
   b4d68:	2003e570 	.word	0x2003e570

000b4d6c <_Z13mqttKeepAlivev>:

void mqttKeepAlive()
{
   b4d6c:	b500      	push	{lr}
    if (mqttClient.isConnected())
   b4d6e:	4817      	ldr	r0, [pc, #92]	; (b4dcc <_Z13mqttKeepAlivev+0x60>)
{
   b4d70:	b089      	sub	sp, #36	; 0x24
    if (mqttClient.isConnected())
   b4d72:	f001 f94b 	bl	b600c <_ZN4MQTT11isConnectedEv>
   b4d76:	b128      	cbz	r0, b4d84 <_Z13mqttKeepAlivev+0x18>
    {
        mqttClient.loop();
   b4d78:	4814      	ldr	r0, [pc, #80]	; (b4dcc <_Z13mqttKeepAlivev+0x60>)
    else
    {
        Serial.printf("Client disconnected - trying to reconnect:\n");
        mqttClient.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
    }
}
   b4d7a:	b009      	add	sp, #36	; 0x24
   b4d7c:	f85d eb04 	ldr.w	lr, [sp], #4
        mqttClient.loop();
   b4d80:	f001 bb1b 	b.w	b63ba <_ZN4MQTT4loopEv>
        Serial.printf("Client disconnected - trying to reconnect:\n");
   b4d84:	f004 f874 	bl	b8e70 <_Z16_fetch_usbserialv>
   b4d88:	4911      	ldr	r1, [pc, #68]	; (b4dd0 <_Z13mqttKeepAlivev+0x64>)
   b4d8a:	f7ff ff11 	bl	b4bb0 <_ZN5Print6printfEPKcz>
	StringSumHelper(const char *p) : String(p) {}
   b4d8e:	4911      	ldr	r1, [pc, #68]	; (b4dd4 <_Z13mqttKeepAlivev+0x68>)
   b4d90:	4668      	mov	r0, sp
   b4d92:	f002 f8a3 	bl	b6edc <_ZN6StringC1EPK19__FlashStringHelper>
        mqttClient.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b4d96:	f003 fbce 	bl	b8536 <_ZN9TimeClass3nowEv>
   b4d9a:	220a      	movs	r2, #10
   b4d9c:	4601      	mov	r1, r0
   b4d9e:	a804      	add	r0, sp, #16
   b4da0:	f002 f8ee 	bl	b6f80 <_ZN6StringC1Elh>
   b4da4:	a904      	add	r1, sp, #16
   b4da6:	4668      	mov	r0, sp
   b4da8:	f002 f914 	bl	b6fd4 <_ZplRK15StringSumHelperRK6String>
   b4dac:	4b0a      	ldr	r3, [pc, #40]	; (b4dd8 <_Z13mqttKeepAlivev+0x6c>)
   b4dae:	6801      	ldr	r1, [r0, #0]
   b4db0:	4806      	ldr	r0, [pc, #24]	; (b4dcc <_Z13mqttKeepAlivev+0x60>)
   b4db2:	461a      	mov	r2, r3
   b4db4:	f001 fa1a 	bl	b61ec <_ZN4MQTT7connectEPKcS1_S1_>
   b4db8:	a804      	add	r0, sp, #16
   b4dba:	f002 f844 	bl	b6e46 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4dbe:	4668      	mov	r0, sp
   b4dc0:	f002 f841 	bl	b6e46 <_ZN6StringD1Ev>
}
   b4dc4:	b009      	add	sp, #36	; 0x24
   b4dc6:	f85d fb04 	ldr.w	pc, [sp], #4
   b4dca:	bf00      	nop
   b4dcc:	2003e510 	.word	0x2003e510
   b4dd0:	000bc542 	.word	0x000bc542
   b4dd4:	000bc505 	.word	0x000bc505
   b4dd8:	000bc512 	.word	0x000bc512

000b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4ddc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4dde:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4de0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4de2:	b17c      	cbz	r4, b4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4de4:	6863      	ldr	r3, [r4, #4]
   b4de6:	3b01      	subs	r3, #1
   b4de8:	6063      	str	r3, [r4, #4]
   b4dea:	b95b      	cbnz	r3, b4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4dec:	6823      	ldr	r3, [r4, #0]
   b4dee:	4620      	mov	r0, r4
   b4df0:	689b      	ldr	r3, [r3, #8]
   b4df2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4df4:	68a3      	ldr	r3, [r4, #8]
   b4df6:	3b01      	subs	r3, #1
   b4df8:	60a3      	str	r3, [r4, #8]
   b4dfa:	b91b      	cbnz	r3, b4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4dfc:	6823      	ldr	r3, [r4, #0]
   b4dfe:	4620      	mov	r0, r4
   b4e00:	68db      	ldr	r3, [r3, #12]
   b4e02:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4e04:	4628      	mov	r0, r5
   b4e06:	bd38      	pop	{r3, r4, r5, pc}

000b4e08 <_Z12publishPoweri>:

#endif
}

void publishPower(int currentPower)
{
   b4e08:	b500      	push	{lr}
   b4e0a:	b089      	sub	sp, #36	; 0x24
   b4e0c:	4602      	mov	r2, r0
    String powerString = String::format("%d", currentPower);
   b4e0e:	4910      	ldr	r1, [pc, #64]	; (b4e50 <_Z12publishPoweri+0x48>)
   b4e10:	a804      	add	r0, sp, #16
   b4e12:	f002 f8eb 	bl	b6fec <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4e16:	4b0f      	ldr	r3, [pc, #60]	; (b4e54 <_Z12publishPoweri+0x4c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4e18:	9a04      	ldr	r2, [sp, #16]
   b4e1a:	781b      	ldrb	r3, [r3, #0]
   b4e1c:	490e      	ldr	r1, [pc, #56]	; (b4e58 <_Z12publishPoweri+0x50>)
   b4e1e:	f88d 3000 	strb.w	r3, [sp]
   b4e22:	a802      	add	r0, sp, #8
   b4e24:	233c      	movs	r3, #60	; 0x3c
   b4e26:	f003 fdcf 	bl	b89c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4e2a:	a803      	add	r0, sp, #12
   b4e2c:	f7ff ffd6 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Power", powerString);

#ifdef USE_MQTT
    if (mqttClient.isConnected())
   b4e30:	480a      	ldr	r0, [pc, #40]	; (b4e5c <_Z12publishPoweri+0x54>)
   b4e32:	f001 f8eb 	bl	b600c <_ZN4MQTT11isConnectedEv>
   b4e36:	b120      	cbz	r0, b4e42 <_Z12publishPoweri+0x3a>
    {
        mqttClient.publish("power", powerString);
   b4e38:	9a04      	ldr	r2, [sp, #16]
   b4e3a:	4909      	ldr	r1, [pc, #36]	; (b4e60 <_Z12publishPoweri+0x58>)
   b4e3c:	4807      	ldr	r0, [pc, #28]	; (b4e5c <_Z12publishPoweri+0x54>)
   b4e3e:	f001 fa60 	bl	b6302 <_ZN4MQTT7publishEPKcS1_>
    String powerString = String::format("%d", currentPower);
   b4e42:	a804      	add	r0, sp, #16
   b4e44:	f001 ffff 	bl	b6e46 <_ZN6StringD1Ev>
    }

#endif
   b4e48:	b009      	add	sp, #36	; 0x24
   b4e4a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e4e:	bf00      	nop
   b4e50:	000bcac0 	.word	0x000bcac0
   b4e54:	2003e50c 	.word	0x2003e50c
   b4e58:	000bc56e 	.word	0x000bc56e
   b4e5c:	2003e510 	.word	0x2003e510
   b4e60:	000bc574 	.word	0x000bc574

000b4e64 <loop>:
{
   b4e64:	b500      	push	{lr}
    if (prices.isMessageDataReady())
   b4e66:	4816      	ldr	r0, [pc, #88]	; (b4ec0 <loop+0x5c>)
{
   b4e68:	b08b      	sub	sp, #44	; 0x2c
    if (prices.isMessageDataReady())
   b4e6a:	f000 fb77 	bl	b555c <_ZN10PriceClass18isMessageDataReadyEv>
   b4e6e:	b110      	cbz	r0, b4e76 <loop+0x12>
        prices.assembleMessageData();
   b4e70:	4813      	ldr	r0, [pc, #76]	; (b4ec0 <loop+0x5c>)
   b4e72:	f000 fd15 	bl	b58a0 <_ZN10PriceClass19assembleMessageDataEv>
    if (prices.pricesUpdated())
   b4e76:	4812      	ldr	r0, [pc, #72]	; (b4ec0 <loop+0x5c>)
   b4e78:	f000 fb6e 	bl	b5558 <_ZN10PriceClass13pricesUpdatedEv>
   b4e7c:	b168      	cbz	r0, b4e9a <loop+0x36>
        String priceString = prices.getLowPriceIntervals().c_str();
   b4e7e:	4910      	ldr	r1, [pc, #64]	; (b4ec0 <loop+0x5c>)
   b4e80:	a804      	add	r0, sp, #16
   b4e82:	f000 fc17 	bl	b56b4 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>
   b4e86:	9904      	ldr	r1, [sp, #16]
   b4e88:	4668      	mov	r0, sp
   b4e8a:	f002 f827 	bl	b6edc <_ZN6StringC1EPK19__FlashStringHelper>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   b4e8e:	a804      	add	r0, sp, #16
   b4e90:	f004 ff4e 	bl	b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4e94:	4668      	mov	r0, sp
   b4e96:	f001 ffd6 	bl	b6e46 <_ZN6StringD1Ev>
    if (wattSensor.checkForNewReading())
   b4e9a:	480a      	ldr	r0, [pc, #40]	; (b4ec4 <loop+0x60>)
   b4e9c:	f000 ff94 	bl	b5dc8 <_ZN6Sensor18checkForNewReadingEv>
   b4ea0:	b120      	cbz	r0, b4eac <loop+0x48>
        publishPower(wattSensor.getCurrentReading());
   b4ea2:	4808      	ldr	r0, [pc, #32]	; (b4ec4 <loop+0x60>)
   b4ea4:	f000 ff8c 	bl	b5dc0 <_ZN6Sensor17getCurrentReadingEv>
   b4ea8:	f7ff ffae 	bl	b4e08 <_Z12publishPoweri>
    mqttKeepAlive();
   b4eac:	f7ff ff5e 	bl	b4d6c <_Z13mqttKeepAlivev>
    delay(1000);
   b4eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b4eb4:	b00b      	add	sp, #44	; 0x2c
   b4eb6:	f85d eb04 	ldr.w	lr, [sp], #4
    delay(1000);
   b4eba:	f003 bb8f 	b.w	b85dc <delay>
   b4ebe:	bf00      	nop
   b4ec0:	2003e570 	.word	0x2003e570
   b4ec4:	2003e5d0 	.word	0x2003e5d0

000b4ec8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4ec8:	b082      	sub	sp, #8
   b4eca:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ecc:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b4ece:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4ed0:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b4ed2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4ed4:	e9c0 3300 	strd	r3, r3, [r0]
   b4ed8:	4606      	mov	r6, r0
   b4eda:	4694      	mov	ip, r2
   b4edc:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ee0:	ac04      	add	r4, sp, #16
   b4ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ee4:	682b      	ldr	r3, [r5, #0]
   b4ee6:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b4ee8:	ad1a      	add	r5, sp, #104	; 0x68
   b4eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4eec:	ac09      	add	r4, sp, #36	; 0x24
   b4eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ef0:	682b      	ldr	r3, [r5, #0]
   b4ef2:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4ef4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4ef6:	9302      	str	r3, [sp, #8]
   b4ef8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b4efa:	9301      	str	r3, [sp, #4]
   b4efc:	ab09      	add	r3, sp, #36	; 0x24
   b4efe:	9300      	str	r3, [sp, #0]
   b4f00:	4630      	mov	r0, r6
   b4f02:	ab04      	add	r3, sp, #16
   b4f04:	4662      	mov	r2, ip
   b4f06:	4639      	mov	r1, r7
   b4f08:	f002 ff9c 	bl	b7e44 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4f0c:	4630      	mov	r0, r6
   b4f0e:	b00f      	add	sp, #60	; 0x3c
   b4f10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4f14:	b002      	add	sp, #8
   b4f16:	4770      	bx	lr

000b4f18 <_GLOBAL__sub_I_argonName>:
   b4f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b4f1c:	4b4b      	ldr	r3, [pc, #300]	; (b504c <_GLOBAL__sub_I_argonName+0x134>)
const BleUuid powermonitorserviceUuid(serviceUuid);
   b4f1e:	4c4c      	ldr	r4, [pc, #304]	; (b5050 <_GLOBAL__sub_I_argonName+0x138>)
const BleUuid wattcharacteristicUuid(watt);
   b4f20:	f8df 916c 	ldr.w	r9, [pc, #364]	; b5090 <_GLOBAL__sub_I_argonName+0x178>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b4f24:	4f4b      	ldr	r7, [pc, #300]	; (b5054 <_GLOBAL__sub_I_argonName+0x13c>)
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b4f26:	f8df b16c 	ldr.w	fp, [pc, #364]	; b5094 <_GLOBAL__sub_I_argonName+0x17c>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b4f2a:	f8df a16c 	ldr.w	sl, [pc, #364]	; b5098 <_GLOBAL__sub_I_argonName+0x180>
   b4f2e:	2500      	movs	r5, #0
   b4f30:	701d      	strb	r5, [r3, #0]
const BleUuid powermonitorserviceUuid(serviceUuid);
   b4f32:	4b49      	ldr	r3, [pc, #292]	; (b5058 <_GLOBAL__sub_I_argonName+0x140>)
   b4f34:	b08d      	sub	sp, #52	; 0x34
   b4f36:	6819      	ldr	r1, [r3, #0]
   b4f38:	4620      	mov	r0, r4
   b4f3a:	f002 fa7d 	bl	b7438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt);
   b4f3e:	4b47      	ldr	r3, [pc, #284]	; (b505c <_GLOBAL__sub_I_argonName+0x144>)
   b4f40:	4648      	mov	r0, r9
   b4f42:	6819      	ldr	r1, [r3, #0]
   b4f44:	f002 fa78 	bl	b7438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b4f48:	4b45      	ldr	r3, [pc, #276]	; (b5060 <_GLOBAL__sub_I_argonName+0x148>)
   b4f4a:	4638      	mov	r0, r7
   b4f4c:	6819      	ldr	r1, [r3, #0]
   b4f4e:	f002 fa73 	bl	b7438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b4f52:	4b44      	ldr	r3, [pc, #272]	; (b5064 <_GLOBAL__sub_I_argonName+0x14c>)
   b4f54:	4658      	mov	r0, fp
   b4f56:	6819      	ldr	r1, [r3, #0]
   b4f58:	f002 fa6e 	bl	b7438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b4f5c:	4b42      	ldr	r3, [pc, #264]	; (b5068 <_GLOBAL__sub_I_argonName+0x150>)
   b4f5e:	4650      	mov	r0, sl
   b4f60:	6819      	ldr	r1, [r3, #0]
   b4f62:	f002 fa69 	bl	b7438 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4f66:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4f6a:	4626      	mov	r6, r4
   b4f6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4f6e:	f04f 0810 	mov.w	r8, #16
   b4f72:	eb0d 0c08 	add.w	ip, sp, r8
   b4f76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4f7a:	6833      	ldr	r3, [r6, #0]
   b4f7c:	f8cc 3000 	str.w	r3, [ip]
   b4f80:	f109 0304 	add.w	r3, r9, #4
   b4f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4f86:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4f8a:	4642      	mov	r2, r8
   b4f8c:	f8d9 3000 	ldr.w	r3, [r9]
   b4f90:	4936      	ldr	r1, [pc, #216]	; (b506c <_GLOBAL__sub_I_argonName+0x154>)
   b4f92:	4837      	ldr	r0, [pc, #220]	; (b5070 <_GLOBAL__sub_I_argonName+0x158>)
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4f94:	f8df 9104 	ldr.w	r9, [pc, #260]	; b509c <_GLOBAL__sub_I_argonName+0x184>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4f98:	f7ff ff96 	bl	b4ec8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4f9c:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4fa0:	46a6      	mov	lr, r4
   b4fa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4fa6:	eb0d 0c08 	add.w	ip, sp, r8
   b4faa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4fae:	6833      	ldr	r3, [r6, #0]
   b4fb0:	f8cc 3000 	str.w	r3, [ip]
   b4fb4:	1d3b      	adds	r3, r7, #4
   b4fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4fb8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4fbc:	4642      	mov	r2, r8
   b4fbe:	683b      	ldr	r3, [r7, #0]
   b4fc0:	482c      	ldr	r0, [pc, #176]	; (b5074 <_GLOBAL__sub_I_argonName+0x15c>)
   b4fc2:	4649      	mov	r1, r9
   b4fc4:	f7ff ff80 	bl	b4ec8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b4fc8:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4fcc:	46a4      	mov	ip, r4
   b4fce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4fd2:	eb0d 0708 	add.w	r7, sp, r8
   b4fd6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4fd8:	6833      	ldr	r3, [r6, #0]
   b4fda:	603b      	str	r3, [r7, #0]
   b4fdc:	f10b 0304 	add.w	r3, fp, #4
   b4fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4fe2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4fe6:	f8db 3000 	ldr.w	r3, [fp]
   b4fea:	4823      	ldr	r0, [pc, #140]	; (b5078 <_GLOBAL__sub_I_argonName+0x160>)
   b4fec:	4642      	mov	r2, r8
   b4fee:	4649      	mov	r1, r9
   b4ff0:	f7ff ff6a 	bl	b4ec8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b4ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4ff6:	eb0d 0708 	add.w	r7, sp, r8
   b4ffa:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4ffe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5000:	6833      	ldr	r3, [r6, #0]
   b5002:	603b      	str	r3, [r7, #0]
   b5004:	f10a 0304 	add.w	r3, sl, #4
   b5008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b500a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b500e:	f8da 3000 	ldr.w	r3, [sl]
   b5012:	481a      	ldr	r0, [pc, #104]	; (b507c <_GLOBAL__sub_I_argonName+0x164>)
   b5014:	4642      	mov	r2, r8
   b5016:	4649      	mov	r1, r9
   b5018:	f7ff ff56 	bl	b4ec8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
PriceClass prices;
   b501c:	4818      	ldr	r0, [pc, #96]	; (b5080 <_GLOBAL__sub_I_argonName+0x168>)
   b501e:	f000 f935 	bl	b528c <_ZN10PriceClassC1Ev>
MQTT mqttClient(MQTT_HOST, PORT, 512, 30, mqttCallback);
   b5022:	4b18      	ldr	r3, [pc, #96]	; (b5084 <_GLOBAL__sub_I_argonName+0x16c>)
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	231e      	movs	r3, #30
   b5028:	9300      	str	r3, [sp, #0]
   b502a:	4917      	ldr	r1, [pc, #92]	; (b5088 <_GLOBAL__sub_I_argonName+0x170>)
   b502c:	9502      	str	r5, [sp, #8]
   b502e:	f44f 7300 	mov.w	r3, #512	; 0x200
   b5032:	f240 725b 	movw	r2, #1883	; 0x75b
   b5036:	4815      	ldr	r0, [pc, #84]	; (b508c <_GLOBAL__sub_I_argonName+0x174>)
   b5038:	f000 ff0c 	bl	b5e54 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
SYSTEM_THREAD(ENABLED);
   b503c:	4629      	mov	r1, r5
   b503e:	2001      	movs	r0, #1
   b5040:	b00d      	add	sp, #52	; 0x34
   b5042:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b5046:	f001 bd09 	b.w	b6a5c <system_thread_set_state>
   b504a:	bf00      	nop
   b504c:	2003e50c 	.word	0x2003e50c
   b5050:	2003e4bc 	.word	0x2003e4bc
   b5054:	2003e4d0 	.word	0x2003e4d0
   b5058:	2003e2a0 	.word	0x2003e2a0
   b505c:	2003e2a4 	.word	0x2003e2a4
   b5060:	2003e290 	.word	0x2003e290
   b5064:	2003e294 	.word	0x2003e294
   b5068:	2003e298 	.word	0x2003e298
   b506c:	000bc57a 	.word	0x000bc57a
   b5070:	2003e498 	.word	0x2003e498
   b5074:	2003e488 	.word	0x2003e488
   b5078:	2003e490 	.word	0x2003e490
   b507c:	2003e4a0 	.word	0x2003e4a0
   b5080:	2003e570 	.word	0x2003e570
   b5084:	000b4baf 	.word	0x000b4baf
   b5088:	000bc58d 	.word	0x000bc58d
   b508c:	2003e510 	.word	0x2003e510
   b5090:	2003e4a8 	.word	0x2003e4a8
   b5094:	2003e4f8 	.word	0x2003e4f8
   b5098:	2003e4e4 	.word	0x2003e4e4
   b509c:	000bc583 	.word	0x000bc583

000b50a0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b50a0:	6943      	ldr	r3, [r0, #20]
   b50a2:	b113      	cbz	r3, b50aa <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b50a4:	6983      	ldr	r3, [r0, #24]
   b50a6:	300c      	adds	r0, #12
   b50a8:	4718      	bx	r3
            callback();
        }
    }
   b50aa:	4770      	bx	lr

000b50ac <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b50ac:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b50ae:	2100      	movs	r1, #0
   b50b0:	4604      	mov	r4, r0
   b50b2:	4608      	mov	r0, r1
   b50b4:	f001 fb4a 	bl	b674c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b50b8:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b50ba:	4620      	mov	r0, r4
   b50bc:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b50be:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b50c0:	f001 fb5c 	bl	b677c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b50c4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b50c6:	b10c      	cbz	r4, b50cc <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b50c8:	2301      	movs	r3, #1
   b50ca:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b50cc:	2100      	movs	r1, #0
   b50ce:	2001      	movs	r0, #1
   b50d0:	f001 fb3c 	bl	b674c <os_thread_scheduling>
            }
        }
        if (t) {
   b50d4:	b12c      	cbz	r4, b50e2 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b50d6:	6823      	ldr	r3, [r4, #0]
   b50d8:	4620      	mov	r0, r4
   b50da:	689b      	ldr	r3, [r3, #8]
   b50dc:	4798      	blx	r3
            t->running = false;
   b50de:	2300      	movs	r3, #0
   b50e0:	7123      	strb	r3, [r4, #4]
        }
    }
   b50e2:	b002      	add	sp, #8
   b50e4:	bd10      	pop	{r4, pc}

000b50e6 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b50e6:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   b50e8:	6803      	ldr	r3, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
   b50ea:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b50ec:	685c      	ldr	r4, [r3, #4]
   b50ee:	689d      	ldr	r5, [r3, #8]
   b50f0:	681b      	ldr	r3, [r3, #0]
   b50f2:	6812      	ldr	r2, [r2, #0]
   b50f4:	1066      	asrs	r6, r4, #1
   b50f6:	eb05 0064 	add.w	r0, r5, r4, asr #1
   b50fa:	07e4      	lsls	r4, r4, #31
   b50fc:	bf44      	itt	mi
   b50fe:	59ac      	ldrmi	r4, [r5, r6]
   b5100:	58e3      	ldrmi	r3, [r4, r3]
      }
   b5102:	bc70      	pop	{r4, r5, r6}
   b5104:	4718      	bx	r3

000b5106 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5106:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b5108:	6803      	ldr	r3, [r0, #0]
   b510a:	685a      	ldr	r2, [r3, #4]
   b510c:	6899      	ldr	r1, [r3, #8]
   b510e:	681b      	ldr	r3, [r3, #0]
   b5110:	1054      	asrs	r4, r2, #1
   b5112:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b5116:	07d2      	lsls	r2, r2, #31
   b5118:	bf48      	it	mi
   b511a:	590a      	ldrmi	r2, [r1, r4]
      }
   b511c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5120:	bf48      	it	mi
   b5122:	58d3      	ldrmi	r3, [r2, r3]
   b5124:	4718      	bx	r3

000b5126 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b5126:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5128:	b538      	push	{r3, r4, r5, lr}
   b512a:	4604      	mov	r4, r0
	switch (__op)
   b512c:	d102      	bne.n	b5134 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b512e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5130:	6023      	str	r3, [r4, #0]
	}
   b5132:	e003      	b.n	b513c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b5134:	2a02      	cmp	r2, #2
   b5136:	d003      	beq.n	b5140 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b5138:	2a03      	cmp	r2, #3
   b513a:	d00d      	beq.n	b5158 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b513c:	2000      	movs	r0, #0
   b513e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5140:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b5142:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5144:	f7ff fd21 	bl	b4b8a <_Znwj>
   b5148:	4603      	mov	r3, r0
   b514a:	2800      	cmp	r0, #0
   b514c:	d0f0      	beq.n	b5130 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b514e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5152:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5156:	e7eb      	b.n	b5130 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5158:	6800      	ldr	r0, [r0, #0]
   b515a:	2800      	cmp	r0, #0
   b515c:	d0ee      	beq.n	b513c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b515e:	210c      	movs	r1, #12
   b5160:	f7ff fd1b 	bl	b4b9a <_ZdlPvj>
   b5164:	e7ea      	b.n	b513c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b5166 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b5166:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5168:	b538      	push	{r3, r4, r5, lr}
   b516a:	4604      	mov	r4, r0
	switch (__op)
   b516c:	d102      	bne.n	b5174 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b516e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5170:	6023      	str	r3, [r4, #0]
	}
   b5172:	e003      	b.n	b517c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b5174:	2a02      	cmp	r2, #2
   b5176:	d003      	beq.n	b5180 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b5178:	2a03      	cmp	r2, #3
   b517a:	d00d      	beq.n	b5198 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b517c:	2000      	movs	r0, #0
   b517e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5180:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b5182:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5184:	f7ff fd01 	bl	b4b8a <_Znwj>
   b5188:	4603      	mov	r3, r0
   b518a:	2800      	cmp	r0, #0
   b518c:	d0f0      	beq.n	b5170 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b518e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5196:	e7eb      	b.n	b5170 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5198:	6800      	ldr	r0, [r0, #0]
   b519a:	2800      	cmp	r0, #0
   b519c:	d0ee      	beq.n	b517c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b519e:	210c      	movs	r1, #12
   b51a0:	f7ff fcfb 	bl	b4b9a <_ZdlPvj>
   b51a4:	e7ea      	b.n	b517c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b51a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>:
       *  @brief  Append a C string.
       *  @param __s  The C string to append.
       *  @return  Reference to this string.
       */
      basic_string&
      append(const _CharT* __s)
   b51a8:	b513      	push	{r0, r1, r4, lr}
   b51aa:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b51ac:	4608      	mov	r0, r1
   b51ae:	9101      	str	r1, [sp, #4]
   b51b0:	f7ff fc90 	bl	b4ad4 <strlen>
	if (this->max_size() - (this->size() - __n1) < __n2)
   b51b4:	6863      	ldr	r3, [r4, #4]
   b51b6:	9901      	ldr	r1, [sp, #4]
   b51b8:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
   b51bc:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
   b51c0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   b51c4:	333f      	adds	r3, #63	; 0x3f
   b51c6:	4298      	cmp	r0, r3
   b51c8:	4602      	mov	r2, r0
   b51ca:	d902      	bls.n	b51d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x2a>
	  __throw_length_error(__N(__s));
   b51cc:	4804      	ldr	r0, [pc, #16]	; (b51e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x38>)
   b51ce:	f004 fcbd 	bl	b9b4c <_ZSt20__throw_length_errorPKc>
      {
	__glibcxx_requires_string(__s);
	const size_type __n = traits_type::length(__s);
	_M_check_length(size_type(0), __n, "basic_string::append");
	return _M_append(__s, __n);
   b51d2:	4620      	mov	r0, r4
      }
   b51d4:	b002      	add	sp, #8
   b51d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _M_append(__s, __n);
   b51da:	f004 bec3 	b.w	b9f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
   b51de:	bf00      	nop
   b51e0:	000bc65c 	.word	0x000bc65c

000b51e4 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b51e4:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b51e6:	6880      	ldr	r0, [r0, #8]
   b51e8:	b130      	cbz	r0, b51f8 <_ZN5Timer4stopEj.isra.0+0x14>
   b51ea:	2300      	movs	r3, #0
   b51ec:	e9cd 1300 	strd	r1, r3, [sp]
   b51f0:	461a      	mov	r2, r3
   b51f2:	2102      	movs	r1, #2
   b51f4:	f001 faca 	bl	b678c <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b51f8:	b003      	add	sp, #12
   b51fa:	f85d fb04 	ldr.w	pc, [sp], #4

000b51fe <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b51fe:	b538      	push	{r3, r4, r5, lr}
   b5200:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b5202:	b16c      	cbz	r4, b5220 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x22>
	{
	  _M_erase(_S_right(__x));
   b5204:	68e0      	ldr	r0, [r4, #12]
   b5206:	f7ff fffa 	bl	b51fe <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { _M_dispose(); }
   b520a:	f104 0014 	add.w	r0, r4, #20
      { return static_cast<_Link_type>(__x->_M_left); }
   b520e:	68a5      	ldr	r5, [r4, #8]
   b5210:	f004 fd8e 	bl	b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5214:	4620      	mov	r0, r4
   b5216:	212c      	movs	r1, #44	; 0x2c
   b5218:	f7ff fcbf 	bl	b4b9a <_ZdlPvj>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   b521c:	462c      	mov	r4, r5
      }
   b521e:	e7f0      	b.n	b5202 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
	}
    }
   b5220:	bd38      	pop	{r3, r4, r5, pc}

000b5222 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5222:	b510      	push	{r4, lr}
      if (_M_manager)
   b5224:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5226:	4604      	mov	r4, r0
      if (_M_manager)
   b5228:	b113      	cbz	r3, b5230 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b522a:	2203      	movs	r2, #3
   b522c:	4601      	mov	r1, r0
   b522e:	4798      	blx	r3
    }
   b5230:	4620      	mov	r0, r4
   b5232:	bd10      	pop	{r4, pc}

000b5234 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b5234:	b538      	push	{r3, r4, r5, lr}
   b5236:	4b0f      	ldr	r3, [pc, #60]	; (b5274 <_ZN5TimerD1Ev+0x40>)
   b5238:	6003      	str	r3, [r0, #0]
        if (handle) {
   b523a:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b523c:	4604      	mov	r4, r0
        if (handle) {
   b523e:	b19b      	cbz	r3, b5268 <_ZN5TimerD1Ev+0x34>
            stop();
   b5240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5244:	f7ff ffce 	bl	b51e4 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b5248:	68a0      	ldr	r0, [r4, #8]
   b524a:	2100      	movs	r1, #0
   b524c:	f001 fad6 	bl	b67fc <os_timer_set_id>
            while (running) {
   b5250:	7923      	ldrb	r3, [r4, #4]
   b5252:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b5256:	b113      	cbz	r3, b525e <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b5258:	f001 fa70 	bl	b673c <os_thread_yield>
            while (running) {
   b525c:	e7f8      	b.n	b5250 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b525e:	68a0      	ldr	r0, [r4, #8]
   b5260:	4629      	mov	r1, r5
   b5262:	f001 fa83 	bl	b676c <os_timer_destroy>
            handle = nullptr;
   b5266:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b5268:	f104 000c 	add.w	r0, r4, #12
   b526c:	f7ff ffd9 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
    }
   b5270:	4620      	mov	r0, r4
   b5272:	bd38      	pop	{r3, r4, r5, pc}
   b5274:	000bc7c4 	.word	0x000bc7c4

000b5278 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b5278:	b510      	push	{r4, lr}
   b527a:	4604      	mov	r4, r0
    }
   b527c:	f7ff ffda 	bl	b5234 <_ZN5TimerD1Ev>
   b5280:	4620      	mov	r0, r4
   b5282:	211c      	movs	r1, #28
   b5284:	f7ff fc89 	bl	b4b9a <_ZdlPvj>
   b5288:	4620      	mov	r0, r4
   b528a:	bd10      	pop	{r4, pc}

000b528c <_ZN10PriceClassC1Ev>:
#define PRICE_INDEX 20
#define MILLISEC_HOUR 3600000
#define MILLISEC_MINUTE 60000

// Constructor
PriceClass::PriceClass()
   b528c:	b5f0      	push	{r4, r5, r6, r7, lr}
	  : _Node_allocator()
   b528e:	1d03      	adds	r3, r0, #4
      _M_header._M_color = _S_red;
   b5290:	2500      	movs	r5, #0
      _M_header._M_left = &_M_header;
   b5292:	e9c0 5302 	strd	r5, r3, [r0, #8]
      _M_node_count = 0;
   b5296:	e9c0 3504 	strd	r3, r5, [r0, #16]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b529a:	f100 034c 	add.w	r3, r0, #76	; 0x4c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b529e:	e9c0 5507 	strd	r5, r5, [r0, #28]
   b52a2:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
   b52a6:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
      { _M_string_length = __length; }
   b52aa:	e9c0 3511 	strd	r3, r5, [r0, #68]	; 0x44
      _M_header._M_color = _S_red;
   b52ae:	7105      	strb	r5, [r0, #4]
    : newPricesReceived{false},
      messageDataReady{false}
   b52b0:	8305      	strh	r5, [r0, #24]
      { __c1 = __c2; }
   b52b2:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
PriceClass::PriceClass()
   b52b6:	b089      	sub	sp, #36	; 0x24
   b52b8:	4604      	mov	r4, r0
{
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b52ba:	201c      	movs	r0, #28
   b52bc:	f7ff fc65 	bl	b4b8a <_Znwj>
   b52c0:	4606      	mov	r6, r0
   b52c2:	2800      	cmp	r0, #0
   b52c4:	d033      	beq.n	b532e <_ZN10PriceClassC1Ev+0xa2>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52c6:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b52c8:	9506      	str	r5, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52ca:	f7ff fc5e 	bl	b4b8a <_Znwj>
   b52ce:	b118      	cbz	r0, b52d8 <_ZN10PriceClassC1Ev+0x4c>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b52d0:	4b19      	ldr	r3, [pc, #100]	; (b5338 <_ZN10PriceClassC1Ev+0xac>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b52d2:	6084      	str	r4, [r0, #8]
   b52d4:	e9c0 3500 	strd	r3, r5, [r0]
   b52d8:	9004      	str	r0, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52da:	ad04      	add	r5, sp, #16
   b52dc:	e895 0003 	ldmia.w	r5, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b52e0:	4b16      	ldr	r3, [pc, #88]	; (b533c <_ZN10PriceClassC1Ev+0xb0>)
   b52e2:	6033      	str	r3, [r6, #0]
   b52e4:	2300      	movs	r3, #0
   b52e6:	7133      	strb	r3, [r6, #4]
   b52e8:	60b3      	str	r3, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
   b52ea:	f106 020c 	add.w	r2, r6, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52ee:	af02      	add	r7, sp, #8
   b52f0:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b52f4:	e892 0003 	ldmia.w	r2, {r0, r1}
   b52f8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b52fc:	e897 0003 	ldmia.w	r7, {r0, r1}
   b5300:	e882 0003 	stmia.w	r2, {r0, r1}
   b5304:	4a0e      	ldr	r2, [pc, #56]	; (b5340 <_ZN10PriceClassC1Ev+0xb4>)
   b5306:	6172      	str	r2, [r6, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5308:	69b2      	ldr	r2, [r6, #24]
   b530a:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b530c:	4a0d      	ldr	r2, [pc, #52]	; (b5344 <_ZN10PriceClassC1Ev+0xb8>)
   b530e:	61b2      	str	r2, [r6, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5310:	9306      	str	r3, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5312:	9301      	str	r3, [sp, #4]
   b5314:	2301      	movs	r3, #1
   b5316:	9300      	str	r3, [sp, #0]
   b5318:	4a0b      	ldr	r2, [pc, #44]	; (b5348 <_ZN10PriceClassC1Ev+0xbc>)
   b531a:	4633      	mov	r3, r6
   b531c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5320:	f106 0008 	add.w	r0, r6, #8
   b5324:	f001 fa1a 	bl	b675c <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5328:	4628      	mov	r0, r5
   b532a:	f7ff ff7a 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
}
   b532e:	4620      	mov	r0, r4
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b5330:	65e6      	str	r6, [r4, #92]	; 0x5c
}
   b5332:	b009      	add	sp, #36	; 0x24
   b5334:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5336:	bf00      	nop
   b5338:	000b54ed 	.word	0x000b54ed
   b533c:	000bc7c4 	.word	0x000bc7c4
   b5340:	000b5167 	.word	0x000b5167
   b5344:	000b5107 	.word	0x000b5107
   b5348:	000b50ad 	.word	0x000b50ad

000b534c <_ZN10PriceClass18requestPriceUpdateEi>:
// #####################################################################
/// @brief This method makes a publish request, to fire off the webhook,
// which in turn will fire off the "prices" event, when data is ready.
// #####################################################################
void PriceClass::requestPriceUpdate(int day)
{
   b534c:	b570      	push	{r4, r5, r6, lr}
   b534e:	b0a0      	sub	sp, #128	; 0x80
   b5350:	460c      	mov	r4, r1
   b5352:	4605      	mov	r5, r0
    String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b5354:	f003 f92c 	bl	b85b0 <_ZN9TimeClass4yearEv>
   b5358:	4940      	ldr	r1, [pc, #256]	; (b545c <_ZN10PriceClass18requestPriceUpdateEi+0x110>)
   b535a:	4602      	mov	r2, r0
   b535c:	a808      	add	r0, sp, #32
   b535e:	f001 fe45 	bl	b6fec <_ZN6String6formatEPKcz>
	StringSumHelper(const String &s) : String(s) {}
   b5362:	a908      	add	r1, sp, #32
   b5364:	a810      	add	r0, sp, #64	; 0x40
   b5366:	f001 fddc 	bl	b6f22 <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b536a:	f003 f919 	bl	b85a0 <_ZN9TimeClass5monthEv>
   b536e:	493c      	ldr	r1, [pc, #240]	; (b5460 <_ZN10PriceClass18requestPriceUpdateEi+0x114>)
   b5370:	4602      	mov	r2, r0
   b5372:	a80c      	add	r0, sp, #48	; 0x30
   b5374:	f001 fe3a 	bl	b6fec <_ZN6String6formatEPKcz>
   b5378:	a90c      	add	r1, sp, #48	; 0x30
   b537a:	a810      	add	r0, sp, #64	; 0x40
   b537c:	f001 fe2a 	bl	b6fd4 <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day\": \"%02d\", ", day) +
   b5380:	4622      	mov	r2, r4
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b5382:	4606      	mov	r6, r0
                  String::format("\"day\": \"%02d\", ", day) +
   b5384:	4937      	ldr	r1, [pc, #220]	; (b5464 <_ZN10PriceClass18requestPriceUpdateEi+0x118>)
   b5386:	a814      	add	r0, sp, #80	; 0x50
   b5388:	f001 fe30 	bl	b6fec <_ZN6String6formatEPKcz>
   b538c:	a914      	add	r1, sp, #80	; 0x50
   b538e:	4630      	mov	r0, r6
   b5390:	f001 fe20 	bl	b6fd4 <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b5394:	1ca2      	adds	r2, r4, #2
   b5396:	4934      	ldr	r1, [pc, #208]	; (b5468 <_ZN10PriceClass18requestPriceUpdateEi+0x11c>)
                  String::format("\"day\": \"%02d\", ", day) +
   b5398:	4606      	mov	r6, r0
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b539a:	a818      	add	r0, sp, #96	; 0x60
   b539c:	f001 fe26 	bl	b6fec <_ZN6String6formatEPKcz>
   b53a0:	a918      	add	r1, sp, #96	; 0x60
   b53a2:	4630      	mov	r0, r6
   b53a4:	f001 fe16 	bl	b6fd4 <_ZplRK15StringSumHelperRK6String>
   b53a8:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b53aa:	f003 f8d5 	bl	b8558 <_ZN9TimeClass4hourEv>
   b53ae:	492f      	ldr	r1, [pc, #188]	; (b546c <_ZN10PriceClass18requestPriceUpdateEi+0x120>)
   b53b0:	4602      	mov	r2, r0
   b53b2:	a81c      	add	r0, sp, #112	; 0x70
   b53b4:	f001 fe1a 	bl	b6fec <_ZN6String6formatEPKcz>
   b53b8:	a91c      	add	r1, sp, #112	; 0x70
   b53ba:	4620      	mov	r0, r4
   b53bc:	f001 fe0a 	bl	b6fd4 <_ZplRK15StringSumHelperRK6String>
   b53c0:	4601      	mov	r1, r0
   b53c2:	a804      	add	r0, sp, #16
   b53c4:	f001 fdad 	bl	b6f22 <_ZN6StringC1ERKS_>
   b53c8:	a81c      	add	r0, sp, #112	; 0x70
   b53ca:	f001 fd3c 	bl	b6e46 <_ZN6StringD1Ev>
   b53ce:	a818      	add	r0, sp, #96	; 0x60
   b53d0:	f001 fd39 	bl	b6e46 <_ZN6StringD1Ev>
   b53d4:	a814      	add	r0, sp, #80	; 0x50
   b53d6:	f001 fd36 	bl	b6e46 <_ZN6StringD1Ev>
   b53da:	a80c      	add	r0, sp, #48	; 0x30
   b53dc:	f001 fd33 	bl	b6e46 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b53e0:	a810      	add	r0, sp, #64	; 0x40
   b53e2:	f001 fd30 	bl	b6e46 <_ZN6StringD1Ev>
   b53e6:	a808      	add	r0, sp, #32
   b53e8:	f001 fd2d 	bl	b6e46 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b53ec:	4b20      	ldr	r3, [pc, #128]	; (b5470 <_ZN10PriceClass18requestPriceUpdateEi+0x124>)
   b53ee:	9a04      	ldr	r2, [sp, #16]
   b53f0:	781b      	ldrb	r3, [r3, #0]
   b53f2:	f88d 3000 	strb.w	r3, [sp]
   b53f6:	491f      	ldr	r1, [pc, #124]	; (b5474 <_ZN10PriceClass18requestPriceUpdateEi+0x128>)
   b53f8:	233c      	movs	r3, #60	; 0x3c
   b53fa:	a81c      	add	r0, sp, #112	; 0x70
   b53fc:	f003 fae4 	bl	b89c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b5400:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   b5402:	b17c      	cbz	r4, b5424 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
      if (--_M_use_count == 0)
   b5404:	6863      	ldr	r3, [r4, #4]
   b5406:	3b01      	subs	r3, #1
   b5408:	6063      	str	r3, [r4, #4]
   b540a:	b95b      	cbnz	r3, b5424 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
          _M_dispose();
   b540c:	6823      	ldr	r3, [r4, #0]
   b540e:	4620      	mov	r0, r4
   b5410:	689b      	ldr	r3, [r3, #8]
   b5412:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5414:	68a3      	ldr	r3, [r4, #8]
   b5416:	3b01      	subs	r3, #1
   b5418:	60a3      	str	r3, [r4, #8]
   b541a:	b91b      	cbnz	r3, b5424 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
            _M_destroy();
   b541c:	6823      	ldr	r3, [r4, #0]
   b541e:	4620      	mov	r0, r4
   b5420:	68db      	ldr	r3, [r3, #12]
   b5422:	4798      	blx	r3
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b5424:	f003 f887 	bl	b8536 <_ZN9TimeClass3nowEv>
   b5428:	4602      	mov	r2, r0
   b542a:	17c3      	asrs	r3, r0, #31
   b542c:	a81c      	add	r0, sp, #112	; 0x70
   b542e:	f003 f829 	bl	b8484 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b5432:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	return __builtin_strlen(__s);
   b5434:	9303      	str	r3, [sp, #12]
   b5436:	4618      	mov	r0, r3
   b5438:	f7ff fb4c 	bl	b4ad4 <strlen>
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
   b543c:	9b03      	ldr	r3, [sp, #12]
   b543e:	6caa      	ldr	r2, [r5, #72]	; 0x48
   b5440:	9000      	str	r0, [sp, #0]
   b5442:	2100      	movs	r1, #0
   b5444:	f105 0044 	add.w	r0, r5, #68	; 0x44
   b5448:	f004 fd0e 	bl	b9e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>

    // Trigger the integration
    Particle.publish("elpriser", data);
    lastUpdate = Time.timeStr();
   b544c:	a81c      	add	r0, sp, #112	; 0x70
   b544e:	f001 fcfa 	bl	b6e46 <_ZN6StringD1Ev>
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b5452:	a804      	add	r0, sp, #16
   b5454:	f001 fcf7 	bl	b6e46 <_ZN6StringD1Ev>
}
   b5458:	b020      	add	sp, #128	; 0x80
   b545a:	bd70      	pop	{r4, r5, r6, pc}
   b545c:	000bc671 	.word	0x000bc671
   b5460:	000bc682 	.word	0x000bc682
   b5464:	000bc694 	.word	0x000bc694
   b5468:	000bc6a4 	.word	0x000bc6a4
   b546c:	000bc6b8 	.word	0x000bc6b8
   b5470:	2003e5dc 	.word	0x2003e5dc
   b5474:	000bc6c9 	.word	0x000bc6c9

000b5478 <_ZN10PriceClass28getpricesSubscriptionHandlerEPKcS1_>:
{
   b5478:	b510      	push	{r4, lr}
   b547a:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b547c:	f003 f884 	bl	b8588 <_ZN9TimeClass3dayEv>
   b5480:	4601      	mov	r1, r0
   b5482:	4620      	mov	r0, r4
}
   b5484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b5488:	f7ff bf60 	b.w	b534c <_ZN10PriceClass18requestPriceUpdateEi>

000b548c <_ZN10PriceClass12updatePricesEv>:

// ####################################################################
/// @brief This is a public method, for requesting an update on prices.
// ####################################################################
void PriceClass::updatePrices()
{
   b548c:	b510      	push	{r4, lr}
   b548e:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b5490:	f003 f87a 	bl	b8588 <_ZN9TimeClass3dayEv>
   b5494:	4601      	mov	r1, r0
   b5496:	4620      	mov	r0, r4
}
   b5498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b549c:	f7ff bf56 	b.w	b534c <_ZN10PriceClass18requestPriceUpdateEi>

000b54a0 <_ZN10PriceClass14timedCountDownEj>:

// ##########################################################################
/// @brief Small method for setting the timer period, and starting the timer.
// ##########################################################################
void PriceClass::timedCountDown(uint period)
{
   b54a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b54a2:	4604      	mov	r4, r0
   b54a4:	9103      	str	r1, [sp, #12]
    updateTimer->stop();
   b54a6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b54a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b54ac:	f7ff fe9a 	bl	b51e4 <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b54b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   b54b2:	6890      	ldr	r0, [r2, #8]
   b54b4:	b140      	cbz	r0, b54c8 <_ZN10PriceClass14timedCountDownEj+0x28>
   b54b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b54ba:	2200      	movs	r2, #0
   b54bc:	e9cd 1200 	strd	r1, r2, [sp]
   b54c0:	9b03      	ldr	r3, [sp, #12]
   b54c2:	2103      	movs	r1, #3
   b54c4:	f001 f962 	bl	b678c <os_timer_change>
    updateTimer->changePeriod(period);
    updateTimer->start();
   b54c8:	6de4      	ldr	r4, [r4, #92]	; 0x5c
        stop(fromISR);
   b54ca:	2100      	movs	r1, #0
   b54cc:	4620      	mov	r0, r4
   b54ce:	f7ff fe89 	bl	b51e4 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b54d2:	68a0      	ldr	r0, [r4, #8]
   b54d4:	b140      	cbz	r0, b54e8 <_ZN10PriceClass14timedCountDownEj+0x48>
   b54d6:	2300      	movs	r3, #0
   b54d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b54dc:	e9cd 2300 	strd	r2, r3, [sp]
   b54e0:	4619      	mov	r1, r3
   b54e2:	461a      	mov	r2, r3
   b54e4:	f001 f952 	bl	b678c <os_timer_change>
}
   b54e8:	b004      	add	sp, #16
   b54ea:	bd10      	pop	{r4, pc}

000b54ec <_ZN10PriceClass11timedUpdateEv>:
{
   b54ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54ee:	4605      	mov	r5, r0
    uint8_t hourNow = Time.hour();
   b54f0:	f003 f832 	bl	b8558 <_ZN9TimeClass4hourEv>
   b54f4:	b2c4      	uxtb	r4, r0
    if (hourNow == 11 || hourNow == 23)
   b54f6:	2c0b      	cmp	r4, #11
   b54f8:	d001      	beq.n	b54fe <_ZN10PriceClass11timedUpdateEv+0x12>
   b54fa:	2c17      	cmp	r4, #23
   b54fc:	d110      	bne.n	b5520 <_ZN10PriceClass11timedUpdateEv+0x34>
        timerPeriod = (12 * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b54fe:	f003 f837 	bl	b8570 <_ZN9TimeClass6minuteEv>
        timedCountDown(timerPeriod);
   b5502:	4b12      	ldr	r3, [pc, #72]	; (b554c <_ZN10PriceClass11timedUpdateEv+0x60>)
   b5504:	4912      	ldr	r1, [pc, #72]	; (b5550 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b5506:	fb01 3100 	mla	r1, r1, r0, r3
   b550a:	4628      	mov	r0, r5
   b550c:	f7ff ffc8 	bl	b54a0 <_ZN10PriceClass14timedCountDownEj>
        requestPriceUpdate(Time.day());
   b5510:	f003 f83a 	bl	b8588 <_ZN9TimeClass3dayEv>
   b5514:	4601      	mov	r1, r0
   b5516:	4628      	mov	r0, r5
}
   b5518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        requestPriceUpdate(Time.day());
   b551c:	f7ff bf16 	b.w	b534c <_ZN10PriceClass18requestPriceUpdateEi>
        if (hourNow < 11)
   b5520:	2c0a      	cmp	r4, #10
   b5522:	4f0b      	ldr	r7, [pc, #44]	; (b5550 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b5524:	4e0b      	ldr	r6, [pc, #44]	; (b5554 <_ZN10PriceClass11timedUpdateEv+0x68>)
   b5526:	d80b      	bhi.n	b5540 <_ZN10PriceClass11timedUpdateEv+0x54>
            timerPeriod = ((11 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b5528:	f003 f822 	bl	b8570 <_ZN9TimeClass6minuteEv>
   b552c:	f1c4 040b 	rsb	r4, r4, #11
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b5530:	4378      	muls	r0, r7
            timedCountDown(timerPeriod);
   b5532:	fb06 0104 	mla	r1, r6, r4, r0
   b5536:	4628      	mov	r0, r5
}
   b5538:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            timedCountDown(timerPeriod);
   b553c:	f7ff bfb0 	b.w	b54a0 <_ZN10PriceClass14timedCountDownEj>
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b5540:	f003 f816 	bl	b8570 <_ZN9TimeClass6minuteEv>
   b5544:	f1c4 0417 	rsb	r4, r4, #23
   b5548:	e7f2      	b.n	b5530 <_ZN10PriceClass11timedUpdateEv+0x44>
   b554a:	bf00      	nop
   b554c:	02932e00 	.word	0x02932e00
   b5550:	ffff15a0 	.word	0xffff15a0
   b5554:	0036ee80 	.word	0x0036ee80

000b5558 <_ZN10PriceClass13pricesUpdatedEv>:
/// @brief Method for checking if new price data has not yet been read.
// ####################################################################
bool PriceClass::pricesUpdated()
{
    return newPricesReceived;
}
   b5558:	7e00      	ldrb	r0, [r0, #24]
   b555a:	4770      	bx	lr

000b555c <_ZN10PriceClass18isMessageDataReadyEv>:

bool PriceClass::isMessageDataReady()
{
    return messageDataReady;
   b555c:	7e40      	ldrb	r0, [r0, #25]
   b555e:	4770      	bx	lr

000b5560 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5560:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5562:	2300      	movs	r3, #0
   b5564:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5566:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5568:	4604      	mov	r4, r0
   b556a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b556c:	b12b      	cbz	r3, b557a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b556e:	2202      	movs	r2, #2
   b5570:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5572:	68eb      	ldr	r3, [r5, #12]
   b5574:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5576:	68ab      	ldr	r3, [r5, #8]
   b5578:	60a3      	str	r3, [r4, #8]
    }
   b557a:	4620      	mov	r0, r4
   b557c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5580 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
   b5580:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5582:	b091      	sub	sp, #68	; 0x44
   b5584:	ad02      	add	r5, sp, #8
   b5586:	e885 0006 	stmia.w	r5, {r1, r2}
   b558a:	4606      	mov	r6, r0
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b558c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5590:	ac05      	add	r4, sp, #20
   b5592:	e884 0005 	stmia.w	r4, {r0, r2}
   b5596:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5598:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b559a:	2300      	movs	r3, #0
   b559c:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b559e:	f7ff faf4 	bl	b4b8a <_Znwj>
   b55a2:	4602      	mov	r2, r0
   b55a4:	b120      	cbz	r0, b55b0 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x30>
      _Bind(_Bind&&) = default;
   b55a6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b55aa:	e882 0003 	stmia.w	r2, {r0, r1}
   b55ae:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b55b0:	4b12      	ldr	r3, [pc, #72]	; (b55fc <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x7c>)
   b55b2:	930b      	str	r3, [sp, #44]	; 0x2c
        return subscribe_wiring(eventName, handler, scope);
   b55b4:	a908      	add	r1, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b55b6:	4b12      	ldr	r3, [pc, #72]	; (b5600 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x80>)
   b55b8:	930a      	str	r3, [sp, #40]	; 0x28
   b55ba:	a80c      	add	r0, sp, #48	; 0x30
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b55bc:	9208      	str	r2, [sp, #32]
   b55be:	f7ff ffcf 	bl	b5560 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    static particle::Future<bool> publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags);

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   b55c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b55c4:	b18b      	cbz	r3, b55ea <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   b55c6:	2010      	movs	r0, #16
   b55c8:	f7ff fadf 	bl	b4b8a <_Znwj>
   b55cc:	4604      	mov	r4, r0
   b55ce:	b160      	cbz	r0, b55ea <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
   b55d0:	a90c      	add	r1, sp, #48	; 0x30
   b55d2:	f7ff ffc5 	bl	b5560 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-function-type"
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   b55d6:	2300      	movs	r3, #0
   b55d8:	e9cd 3300 	strd	r3, r3, [sp]
   b55dc:	4909      	ldr	r1, [pc, #36]	; (b5604 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x84>)
   b55de:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b55e2:	4622      	mov	r2, r4
   b55e4:	4630      	mov	r0, r6
   b55e6:	f001 fae5 	bl	b6bb4 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   b55ea:	a80c      	add	r0, sp, #48	; 0x30
   b55ec:	f7ff fe19 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
   b55f0:	a808      	add	r0, sp, #32
   b55f2:	f7ff fe16 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
    }
   b55f6:	b011      	add	sp, #68	; 0x44
   b55f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b55fa:	bf00      	nop
   b55fc:	000b50e7 	.word	0x000b50e7
   b5600:	000b5127 	.word	0x000b5127
   b5604:	000b87df 	.word	0x000b87df

000b5608 <_ZN10PriceClass17initSubscriptionsEv>:
{
   b5608:	b5f0      	push	{r4, r5, r6, r7, lr}
   b560a:	b085      	sub	sp, #20
   b560c:	2700      	movs	r7, #0
    return subscribe(name, handler, ALL_DEVICES);
}

template<typename T>
inline bool CloudClass::subscribe(const char* name, void (T::*handler)(const char*, const char*), T* instance) {
    return subscribe(name, handler, instance, ALL_DEVICES);
   b560e:	2601      	movs	r6, #1
   b5610:	4b0f      	ldr	r3, [pc, #60]	; (b5650 <_ZN10PriceClass17initSubscriptionsEv+0x48>)
   b5612:	9302      	str	r3, [sp, #8]
   b5614:	9703      	str	r7, [sp, #12]
   b5616:	9600      	str	r6, [sp, #0]
   b5618:	ad02      	add	r5, sp, #8
   b561a:	4604      	mov	r4, r0
   b561c:	e895 0006 	ldmia.w	r5, {r1, r2}
   b5620:	4603      	mov	r3, r0
   b5622:	480c      	ldr	r0, [pc, #48]	; (b5654 <_ZN10PriceClass17initSubscriptionsEv+0x4c>)
   b5624:	f7ff ffac 	bl	b5580 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    Particle.subscribe("get_prices", &PriceClass::getpricesSubscriptionHandler, this);
   b5628:	4b0b      	ldr	r3, [pc, #44]	; (b5658 <_ZN10PriceClass17initSubscriptionsEv+0x50>)
   b562a:	9600      	str	r6, [sp, #0]
   b562c:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b5630:	480a      	ldr	r0, [pc, #40]	; (b565c <_ZN10PriceClass17initSubscriptionsEv+0x54>)
   b5632:	e895 0006 	ldmia.w	r5, {r1, r2}
   b5636:	4623      	mov	r3, r4
   b5638:	f7ff ffa2 	bl	b5580 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    updatePrices();
   b563c:	4620      	mov	r0, r4
   b563e:	f7ff ff25 	bl	b548c <_ZN10PriceClass12updatePricesEv>
    timedUpdate();
   b5642:	4620      	mov	r0, r4
}
   b5644:	b005      	add	sp, #20
   b5646:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    timedUpdate();
   b564a:	f7ff bf4f 	b.w	b54ec <_ZN10PriceClass11timedUpdateEv>
   b564e:	bf00      	nop
   b5650:	000b5b65 	.word	0x000b5b65
   b5654:	000bc700 	.word	0x000bc700
   b5658:	000b5479 	.word	0x000b5479
   b565c:	000bc6fc 	.word	0x000bc6fc

000b5660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5660:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b5664:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5666:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b5668:	6003      	str	r3, [r0, #0]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b566a:	460d      	mov	r5, r1
   b566c:	b1e1      	cbz	r1, b56a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x48>
   b566e:	4608      	mov	r0, r1
   b5670:	f7ff fa30 	bl	b4ad4 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b5674:	280f      	cmp	r0, #15
   b5676:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b567a:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b567c:	d907      	bls.n	b568e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b567e:	2200      	movs	r2, #0
   b5680:	a901      	add	r1, sp, #4
   b5682:	4620      	mov	r0, r4
   b5684:	f004 fb32 	bl	b9cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b5688:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b568a:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b568c:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b568e:	6820      	ldr	r0, [r4, #0]
   b5690:	4632      	mov	r2, r6
   b5692:	4629      	mov	r1, r5
   b5694:	f004 fb92 	bl	b9dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b5698:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b569a:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b569c:	6063      	str	r3, [r4, #4]
   b569e:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b56a0:	4620      	mov	r0, r4
   b56a2:	54d1      	strb	r1, [r2, r3]
   b56a4:	b002      	add	sp, #8
   b56a6:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b56a8:	4801      	ldr	r0, [pc, #4]	; (b56b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
   b56aa:	f004 fa49 	bl	b9b40 <_ZSt19__throw_logic_errorPKc>
   b56ae:	bf00      	nop
   b56b0:	000bc6d2 	.word	0x000bc6d2

000b56b4 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>:
{
   b56b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!newPricesReceived)
   b56b8:	7e0b      	ldrb	r3, [r1, #24]
{
   b56ba:	b08c      	sub	sp, #48	; 0x30
   b56bc:	4604      	mov	r4, r0
   b56be:	460e      	mov	r6, r1
    if (!newPricesReceived)
   b56c0:	b93b      	cbnz	r3, b56d2 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x1e>
        return "No prices yet";
   b56c2:	493e      	ldr	r1, [pc, #248]	; (b57bc <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x108>)
   b56c4:	aa06      	add	r2, sp, #24
   b56c6:	f7ff ffcb 	bl	b5660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
}
   b56ca:	4620      	mov	r0, r4
   b56cc:	b00c      	add	sp, #48	; 0x30
   b56ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b56d2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b56d4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b57c8 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x114>
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b56d8:	781d      	ldrb	r5, [r3, #0]
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b56da:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b57cc <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x118>
    std::string lowHourIntervals{(String)lastIndexedHour};
   b56de:	220a      	movs	r2, #10
   b56e0:	4629      	mov	r1, r5
   b56e2:	a802      	add	r0, sp, #8
   b56e4:	f001 fc3a 	bl	b6f5c <_ZN6StringC1Ehh>
   b56e8:	9902      	ldr	r1, [sp, #8]
   b56ea:	aa01      	add	r2, sp, #4
   b56ec:	a806      	add	r0, sp, #24
   b56ee:	f7ff ffb7 	bl	b5660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b56f2:	a802      	add	r0, sp, #8
   b56f4:	f001 fba7 	bl	b6e46 <_ZN6StringD1Ev>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b56f8:	e9d6 790a 	ldrd	r7, r9, [r6, #40]	; 0x28
   b56fc:	3708      	adds	r7, #8
    for (const auto &item : lowPriceHours)
   b56fe:	f1a7 0308 	sub.w	r3, r7, #8
   b5702:	4599      	cmp	r9, r3
   b5704:	d020      	beq.n	b5748 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x94>
        if (item.hour > lastIndexedHour + 1)
   b5706:	f817 3c08 	ldrb.w	r3, [r7, #-8]
   b570a:	1c6a      	adds	r2, r5, #1
   b570c:	4293      	cmp	r3, r2
   b570e:	dd0f      	ble.n	b5730 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x7c>
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b5710:	462a      	mov	r2, r5
   b5712:	4641      	mov	r1, r8
   b5714:	a802      	add	r0, sp, #8
   b5716:	f001 fc69 	bl	b6fec <_ZN6String6formatEPKcz>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b571a:	a806      	add	r0, sp, #24
   b571c:	9902      	ldr	r1, [sp, #8]
   b571e:	f7ff fd43 	bl	b51a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b5722:	a802      	add	r0, sp, #8
   b5724:	f001 fb8f 	bl	b6e46 <_ZN6StringD1Ev>
        lastIndexedHour = item.hour;
   b5728:	f817 5c08 	ldrb.w	r5, [r7, #-8]
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b572c:	3708      	adds	r7, #8
      {
	++_M_current;
	return *this;
   b572e:	e7e6      	b.n	b56fe <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x4a>
        else if (item.hour < lastIndexedHour)
   b5730:	42ab      	cmp	r3, r5
   b5732:	d2f9      	bcs.n	b5728 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x74>
            if (item.hour + 24 > lastIndexedHour + 1)
   b5734:	f103 0216 	add.w	r2, r3, #22
   b5738:	42aa      	cmp	r2, r5
   b573a:	dae9      	bge.n	b5710 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x5c>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b573c:	461a      	mov	r2, r3
   b573e:	4651      	mov	r1, sl
   b5740:	a802      	add	r0, sp, #8
   b5742:	f001 fc53 	bl	b6fec <_ZN6String6formatEPKcz>
   b5746:	e7e8      	b.n	b571a <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x66>
    lowHourIntervals.append(String::format(" to %02d", lastIndexedHour));
   b5748:	462a      	mov	r2, r5
   b574a:	491d      	ldr	r1, [pc, #116]	; (b57c0 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x10c>)
   b574c:	a802      	add	r0, sp, #8
   b574e:	f001 fc4d 	bl	b6fec <_ZN6String6formatEPKcz>
   b5752:	9902      	ldr	r1, [sp, #8]
   b5754:	a806      	add	r0, sp, #24
   b5756:	f7ff fd27 	bl	b51a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b575a:	a802      	add	r0, sp, #8
   b575c:	f001 fb73 	bl	b6e46 <_ZN6StringD1Ev>
    newPricesReceived = false;
   b5760:	2300      	movs	r3, #0
   b5762:	7633      	strb	r3, [r6, #24]
    Serial.println("Low Price Intervals:");
   b5764:	f003 fb84 	bl	b8e70 <_Z16_fetch_usbserialv>
   b5768:	4916      	ldr	r1, [pc, #88]	; (b57c4 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x110>)
   b576a:	f002 fddc 	bl	b8326 <_ZN5Print7printlnEPKc>
    Serial.println(lowHourIntervals.c_str());
   b576e:	f003 fb7f 	bl	b8e70 <_Z16_fetch_usbserialv>
   b5772:	9906      	ldr	r1, [sp, #24]
   b5774:	f002 fdd7 	bl	b8326 <_ZN5Print7printlnEPKc>
      { return _M_dataplus._M_p; }
   b5778:	9a06      	ldr	r2, [sp, #24]
	if (__str._M_is_local())
   b577a:	ad08      	add	r5, sp, #32
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b577c:	f104 0308 	add.w	r3, r4, #8
	if (__str._M_is_local())
   b5780:	42aa      	cmp	r2, r5
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5782:	6023      	str	r3, [r4, #0]
	if (__str._M_is_local())
   b5784:	d115      	bne.n	b57b2 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xfe>
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   b5786:	462e      	mov	r6, r5
   b5788:	af0c      	add	r7, sp, #48	; 0x30
   b578a:	4632      	mov	r2, r6
   b578c:	ca03      	ldmia	r2!, {r0, r1}
   b578e:	42ba      	cmp	r2, r7
   b5790:	6018      	str	r0, [r3, #0]
   b5792:	6059      	str	r1, [r3, #4]
   b5794:	4616      	mov	r6, r2
   b5796:	f103 0308 	add.w	r3, r3, #8
   b579a:	d1f6      	bne.n	b578a <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xd6>
      { _M_string_length = __length; }
   b579c:	9b07      	ldr	r3, [sp, #28]
   b579e:	6063      	str	r3, [r4, #4]
      { _M_dispose(); }
   b57a0:	a806      	add	r0, sp, #24
      { _M_string_length = __length; }
   b57a2:	2300      	movs	r3, #0
      { _M_dataplus._M_p = __p; }
   b57a4:	9506      	str	r5, [sp, #24]
      { _M_string_length = __length; }
   b57a6:	9307      	str	r3, [sp, #28]
      { __c1 = __c2; }
   b57a8:	f88d 3020 	strb.w	r3, [sp, #32]
      { _M_dispose(); }
   b57ac:	f004 fac0 	bl	b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57b0:	e78b      	b.n	b56ca <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x16>
      { _M_allocated_capacity = __capacity; }
   b57b2:	9b08      	ldr	r3, [sp, #32]
      { _M_dataplus._M_p = __p; }
   b57b4:	6022      	str	r2, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b57b6:	60a3      	str	r3, [r4, #8]
   b57b8:	e7f0      	b.n	b579c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xe8>
   b57ba:	bf00      	nop
   b57bc:	000bc707 	.word	0x000bc707
   b57c0:	000bc731 	.word	0x000bc731
   b57c4:	000bc73a 	.word	0x000bc73a
   b57c8:	000bc724 	.word	0x000bc724
   b57cc:	000bc715 	.word	0x000bc715

000b57d0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b57d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b57d4:	e9d0 8900 	ldrd	r8, r9, [r0]
   b57d8:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b57da:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b57de:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b57e2:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b57e6:	4607      	mov	r7, r0
   b57e8:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b57ea:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b57ee:	d102      	bne.n	b57f6 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b57f0:	4820      	ldr	r0, [pc, #128]	; (b5874 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
   b57f2:	f004 f9ab 	bl	b9b4c <_ZSt20__throw_length_errorPKc>
   b57f6:	2c01      	cmp	r4, #1
   b57f8:	4622      	mov	r2, r4
   b57fa:	bf38      	it	cc
   b57fc:	2201      	movcc	r2, #1
   b57fe:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b5800:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5804:	d231      	bcs.n	b586a <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5806:	b394      	cbz	r4, b586e <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
   b5808:	429c      	cmp	r4, r3
   b580a:	bf28      	it	cs
   b580c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b580e:	00e0      	lsls	r0, r4, #3
   b5810:	f7ff f9bb 	bl	b4b8a <_Znwj>
   b5814:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5816:	1973      	adds	r3, r6, r5
   b5818:	bf1c      	itt	ne
   b581a:	e9db 0100 	ldrdne	r0, r1, [fp]
   b581e:	e9c3 0100 	strdne	r0, r1, [r3]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b5822:	2d00      	cmp	r5, #0
   b5824:	dd04      	ble.n	b5830 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5826:	462a      	mov	r2, r5
   b5828:	4641      	mov	r1, r8
   b582a:	4630      	mov	r0, r6
   b582c:	f004 fdc4 	bl	ba3b8 <memmove>
      ptrdiff_t __count = __last - __first;
   b5830:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b5834:	3508      	adds	r5, #8
      if (__count > 0)
   b5836:	f1b9 0f00 	cmp.w	r9, #0
   b583a:	4435      	add	r5, r6
   b583c:	dd04      	ble.n	b5848 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b583e:	464a      	mov	r2, r9
   b5840:	4651      	mov	r1, sl
   b5842:	4628      	mov	r0, r5
   b5844:	f004 fdaa 	bl	ba39c <memcpy>
      return __result + __count;
   b5848:	444d      	add	r5, r9
	if (__p)
   b584a:	f1b8 0f00 	cmp.w	r8, #0
   b584e:	d005      	beq.n	b585c <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b5850:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5852:	4640      	mov	r0, r8
   b5854:	eba1 0108 	sub.w	r1, r1, r8
   b5858:	f7ff f99f 	bl	b4b9a <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b585c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5860:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5864:	60bc      	str	r4, [r7, #8]
    }
   b5866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b586a:	461c      	mov	r4, r3
   b586c:	e7cf      	b.n	b580e <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b586e:	4626      	mov	r6, r4
   b5870:	e7d1      	b.n	b5816 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
   b5872:	bf00      	nop
   b5874:	000bc74f 	.word	0x000bc74f

000b5878 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
   b5878:	b510      	push	{r4, lr}
   b587a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b587c:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   b5880:	428c      	cmp	r4, r1
      push_back(const value_type& __x)
   b5882:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5884:	d008      	beq.n	b5898 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5886:	b11c      	cbz	r4, b5890 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x18>
   b5888:	e892 0003 	ldmia.w	r2, {r0, r1}
   b588c:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5890:	685a      	ldr	r2, [r3, #4]
   b5892:	3208      	adds	r2, #8
   b5894:	605a      	str	r2, [r3, #4]
      }
   b5896:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   b5898:	4621      	mov	r1, r4
   b589a:	f7ff ff99 	bl	b57d0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   b589e:	e7fa      	b.n	b5896 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x1e>

000b58a0 <_ZN10PriceClass19assembleMessageDataEv>:
{
   b58a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58a4:	ed2d 8b02 	vpush	{d8}
    if (!messageDataReady)
   b58a8:	7e43      	ldrb	r3, [r0, #25]
{
   b58aa:	b091      	sub	sp, #68	; 0x44
   b58ac:	4604      	mov	r4, r0
    if (!messageDataReady)
   b58ae:	b94b      	cbnz	r3, b58c4 <_ZN10PriceClass19assembleMessageDataEv+0x24>
        Serial.println("Message data isn't ready yet.");
   b58b0:	f003 fade 	bl	b8e70 <_Z16_fetch_usbserialv>
   b58b4:	498e      	ldr	r1, [pc, #568]	; (b5af0 <_ZN10PriceClass19assembleMessageDataEv+0x250>)
}
   b58b6:	b011      	add	sp, #68	; 0x44
   b58b8:	ecbd 8b02 	vpop	{d8}
   b58bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("Message data isn't ready yet.");
   b58c0:	f002 bd31 	b.w	b8326 <_ZN5Print7printlnEPKc>
    std::string message = "";
   b58c4:	498b      	ldr	r1, [pc, #556]	; (b5af4 <_ZN10PriceClass19assembleMessageDataEv+0x254>)
   b58c6:	aa0a      	add	r2, sp, #40	; 0x28
   b58c8:	a804      	add	r0, sp, #16
   b58ca:	f7ff fec9 	bl	b5660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
      { return iterator(this->_M_impl._M_header._M_left); }
   b58ce:	68e5      	ldr	r5, [r4, #12]
      { return iterator(&this->_M_impl._M_header); }
   b58d0:	1d27      	adds	r7, r4, #4
    for (const auto &item : messageParts)
   b58d2:	42af      	cmp	r7, r5
   b58d4:	d009      	beq.n	b58ea <_ZN10PriceClass19assembleMessageDataEv+0x4a>
      { return _M_append(__str._M_data(), __str.size()); }
   b58d6:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   b58da:	a804      	add	r0, sp, #16
   b58dc:	f004 fb42 	bl	b9f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
	_M_node = _Rb_tree_increment(_M_node);
   b58e0:	4628      	mov	r0, r5
   b58e2:	f004 f8cb 	bl	b9a7c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b58e6:	4605      	mov	r5, r0
	return *this;
   b58e8:	e7f3      	b.n	b58d2 <_ZN10PriceClass19assembleMessageDataEv+0x32>
    Serial.println("Message assembled.");
   b58ea:	f003 fac1 	bl	b8e70 <_Z16_fetch_usbserialv>
   b58ee:	4982      	ldr	r1, [pc, #520]	; (b5af8 <_ZN10PriceClass19assembleMessageDataEv+0x258>)
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b58f0:	eddf 8a82 	vldr	s17, [pc, #520]	; b5afc <_ZN10PriceClass19assembleMessageDataEv+0x25c>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b58f4:	f8df 8208 	ldr.w	r8, [pc, #520]	; b5b00 <_ZN10PriceClass19assembleMessageDataEv+0x260>
    Serial.println("Message assembled.");
   b58f8:	f002 fd15 	bl	b8326 <_ZN5Print7printlnEPKc>
      {
	_M_check(__pos, "basic_string::erase");
	if (__n == npos)
	  this->_M_set_length(__pos);
	else if (__n != 0)
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b58fc:	9a05      	ldr	r2, [sp, #20]
   b58fe:	2a01      	cmp	r2, #1
   b5900:	bf28      	it	cs
   b5902:	2201      	movcs	r2, #1
   b5904:	2100      	movs	r1, #0
   b5906:	a804      	add	r0, sp, #16
   b5908:	f004 fa99 	bl	b9e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b590c:	2200      	movs	r2, #0
   b590e:	497c      	ldr	r1, [pc, #496]	; (b5b00 <_ZN10PriceClass19assembleMessageDataEv+0x260>)
   b5910:	a804      	add	r0, sp, #16
   b5912:	f004 fb7a 	bl	ba00a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5916:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
   b591a:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b591c:	bf18      	it	ne
   b591e:	6223      	strne	r3, [r4, #32]
    currentHighest.price = 0;
   b5920:	2300      	movs	r3, #0
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b5922:	3001      	adds	r0, #1
    currentHighest.price = 0;
   b5924:	63a3      	str	r3, [r4, #56]	; 0x38
    currentLowest.price = 100;
   b5926:	4b77      	ldr	r3, [pc, #476]	; (b5b04 <_ZN10PriceClass19assembleMessageDataEv+0x264>)
   b5928:	6423      	str	r3, [r4, #64]	; 0x40
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b592a:	b2c5      	uxtb	r5, r0
    currentHourPrices.clear();
   b592c:	f104 091c 	add.w	r9, r4, #28
    while (bangIndex > 0)
   b5930:	2d00      	cmp	r5, #0
   b5932:	f000 8093 	beq.w	b5a5c <_ZN10PriceClass19assembleMessageDataEv+0x1bc>
        indexedHourPrice.hour = stoi(message.substr(HOUR_INDEX, 2));                                      // Hour (hh) converted to int.
   b5936:	2302      	movs	r3, #2
   b5938:	220b      	movs	r2, #11
   b593a:	a904      	add	r1, sp, #16
   b593c:	a80a      	add	r0, sp, #40	; 0x28
   b593e:	f004 fbbd 	bl	ba0bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b5942:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b5946:	f001 f985 	bl	b6c54 <__errno>
   b594a:	f8d0 b000 	ldr.w	fp, [r0]
   b594e:	f001 f981 	bl	b6c54 <__errno>
   b5952:	2300      	movs	r3, #0
   b5954:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5956:	220a      	movs	r2, #10
   b5958:	a901      	add	r1, sp, #4
   b595a:	4650      	mov	r0, sl
   b595c:	f005 fcc4 	bl	bb2e8 <strtol>

      if (__endptr == __str)
   b5960:	9b01      	ldr	r3, [sp, #4]
   b5962:	459a      	cmp	sl, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5964:	4606      	mov	r6, r0
      if (__endptr == __str)
   b5966:	d102      	bne.n	b596e <_ZN10PriceClass19assembleMessageDataEv+0xce>
	std::__throw_invalid_argument(__name);
   b5968:	4867      	ldr	r0, [pc, #412]	; (b5b08 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b596a:	f004 f8ec 	bl	b9b46 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
   b596e:	f001 f971 	bl	b6c54 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b5972:	6803      	ldr	r3, [r0, #0]
   b5974:	2b22      	cmp	r3, #34	; 0x22
   b5976:	d102      	bne.n	b597e <_ZN10PriceClass19assembleMessageDataEv+0xde>
	std::__throw_out_of_range(__name);
   b5978:	4863      	ldr	r0, [pc, #396]	; (b5b08 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b597a:	f004 f8ea 	bl	b9b52 <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b597e:	f001 f969 	bl	b6c54 <__errno>
   b5982:	6803      	ldr	r3, [r0, #0]
   b5984:	b91b      	cbnz	r3, b598e <_ZN10PriceClass19assembleMessageDataEv+0xee>
   b5986:	f001 f965 	bl	b6c54 <__errno>
   b598a:	f8c0 b000 	str.w	fp, [r0]
      { _M_dispose(); }
   b598e:	a80a      	add	r0, sp, #40	; 0x28
   b5990:	f88d 6008 	strb.w	r6, [sp, #8]
   b5994:	f004 f9cc 	bl	b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b5998:	f1a5 0315 	sub.w	r3, r5, #21
   b599c:	2214      	movs	r2, #20
   b599e:	a904      	add	r1, sp, #16
   b59a0:	a80a      	add	r0, sp, #40	; 0x28
   b59a2:	f004 fb8b 	bl	ba0bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b59a6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b59a8:	f001 f954 	bl	b6c54 <__errno>
   b59ac:	f8d0 a000 	ldr.w	sl, [r0]
   b59b0:	f001 f950 	bl	b6c54 <__errno>
   b59b4:	2300      	movs	r3, #0
   b59b6:	6003      	str	r3, [r0, #0]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b59b8:	a901      	add	r1, sp, #4
   b59ba:	4630      	mov	r0, r6
   b59bc:	f005 fbb6 	bl	bb12c <strtof>
      if (__endptr == __str)
   b59c0:	9b01      	ldr	r3, [sp, #4]
   b59c2:	429e      	cmp	r6, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b59c4:	eeb0 8a40 	vmov.f32	s16, s0
      if (__endptr == __str)
   b59c8:	d101      	bne.n	b59ce <_ZN10PriceClass19assembleMessageDataEv+0x12e>
	std::__throw_invalid_argument(__name);
   b59ca:	4850      	ldr	r0, [pc, #320]	; (b5b0c <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b59cc:	e7cd      	b.n	b596a <_ZN10PriceClass19assembleMessageDataEv+0xca>
      else if (errno == ERANGE
   b59ce:	f001 f941 	bl	b6c54 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b59d2:	6803      	ldr	r3, [r0, #0]
   b59d4:	2b22      	cmp	r3, #34	; 0x22
   b59d6:	d101      	bne.n	b59dc <_ZN10PriceClass19assembleMessageDataEv+0x13c>
	std::__throw_out_of_range(__name);
   b59d8:	484c      	ldr	r0, [pc, #304]	; (b5b0c <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b59da:	e7ce      	b.n	b597a <_ZN10PriceClass19assembleMessageDataEv+0xda>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b59dc:	f001 f93a 	bl	b6c54 <__errno>
   b59e0:	6803      	ldr	r3, [r0, #0]
   b59e2:	b91b      	cbnz	r3, b59ec <_ZN10PriceClass19assembleMessageDataEv+0x14c>
   b59e4:	f001 f936 	bl	b6c54 <__errno>
   b59e8:	f8c0 a000 	str.w	sl, [r0]
   b59ec:	eec8 7a28 	vdiv.f32	s15, s16, s17
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b59f0:	ae02      	add	r6, sp, #8
   b59f2:	a80a      	add	r0, sp, #40	; 0x28
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b59f4:	edcd 7a03 	vstr	s15, [sp, #12]
   b59f8:	f004 f99a 	bl	b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b59fc:	4631      	mov	r1, r6
   b59fe:	4648      	mov	r0, r9
   b5a00:	f7ff ff3a 	bl	b5878 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
        if (indexedHourPrice.price > currentHighest.price)
   b5a04:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   b5a08:	eddd 7a03 	vldr	s15, [sp, #12]
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b5a0c:	9a05      	ldr	r2, [sp, #20]
   b5a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentHighest = indexedHourPrice;
   b5a16:	bfc2      	ittt	gt
   b5a18:	e9d6 0100 	ldrdgt	r0, r1, [r6]
   b5a1c:	f104 0334 	addgt.w	r3, r4, #52	; 0x34
   b5a20:	e9c3 0100 	strdgt	r0, r1, [r3]
        if (indexedHourPrice.price < currentLowest.price)
   b5a24:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   b5a28:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentLowest = indexedHourPrice;
   b5a30:	bf42      	ittt	mi
   b5a32:	e9d6 0100 	ldrdmi	r0, r1, [r6]
   b5a36:	f104 033c 	addmi.w	r3, r4, #60	; 0x3c
   b5a3a:	e9c3 0100 	strdmi	r0, r1, [r3]
   b5a3e:	42aa      	cmp	r2, r5
   b5a40:	bf28      	it	cs
   b5a42:	462a      	movcs	r2, r5
   b5a44:	2100      	movs	r1, #0
   b5a46:	a804      	add	r0, sp, #16
   b5a48:	f004 f9f9 	bl	b9e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b5a4c:	2200      	movs	r2, #0
   b5a4e:	4641      	mov	r1, r8
   b5a50:	a804      	add	r0, sp, #16
   b5a52:	f004 fada 	bl	ba00a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b5a56:	3001      	adds	r0, #1
   b5a58:	b2c5      	uxtb	r5, r0
    while (bangIndex > 0)
   b5a5a:	e769      	b.n	b5930 <_ZN10PriceClass19assembleMessageDataEv+0x90>
    double difference = currentHighest.price - currentLowest.price;
   b5a5c:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
   b5a60:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   b5a64:	ee77 7ac8 	vsub.f32	s15, s15, s16
            lowPriceHours.push_back(item);
   b5a68:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    double difference = currentHighest.price - currentLowest.price;
   b5a6c:	ee17 0a90 	vmov	r0, s15
   b5a70:	f7fe fc3a 	bl	b42e8 <__aeabi_f2d>
    double lowThreshold = currentLowest.price + difference * LOW_THRESHOLD_FACTOR;
   b5a74:	a31c      	add	r3, pc, #112	; (adr r3, b5ae8 <_ZN10PriceClass19assembleMessageDataEv+0x248>)
   b5a76:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a7a:	f7fe fc8d 	bl	b4398 <__aeabi_dmul>
   b5a7e:	4680      	mov	r8, r0
   b5a80:	ee18 0a10 	vmov	r0, s16
   b5a84:	4689      	mov	r9, r1
   b5a86:	f7fe fc2f 	bl	b42e8 <__aeabi_f2d>
   b5a8a:	4602      	mov	r2, r0
   b5a8c:	460b      	mov	r3, r1
   b5a8e:	4640      	mov	r0, r8
   b5a90:	4649      	mov	r1, r9
   b5a92:	f7fe facb 	bl	b402c <__adddf3>
   b5a96:	e9d4 5607 	ldrd	r5, r6, [r4, #28]
   b5a9a:	4680      	mov	r8, r0
   b5a9c:	4689      	mov	r9, r1
    for (const auto &item : currentHourPrices)
   b5a9e:	42ae      	cmp	r6, r5
   b5aa0:	d00f      	beq.n	b5ac2 <_ZN10PriceClass19assembleMessageDataEv+0x222>
        if (item.price < lowThreshold)
   b5aa2:	6868      	ldr	r0, [r5, #4]
   b5aa4:	f7fe fc20 	bl	b42e8 <__aeabi_f2d>
   b5aa8:	4602      	mov	r2, r0
   b5aaa:	460b      	mov	r3, r1
   b5aac:	4640      	mov	r0, r8
   b5aae:	4649      	mov	r1, r9
   b5ab0:	f7fe ff02 	bl	b48b8 <__aeabi_dcmpgt>
   b5ab4:	b118      	cbz	r0, b5abe <_ZN10PriceClass19assembleMessageDataEv+0x21e>
            lowPriceHours.push_back(item);
   b5ab6:	4629      	mov	r1, r5
   b5ab8:	4650      	mov	r0, sl
   b5aba:	f7ff fedd 	bl	b5878 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
      operator++() _GLIBCXX_NOEXCEPT
   b5abe:	3508      	adds	r5, #8
	return *this;
   b5ac0:	e7ed      	b.n	b5a9e <_ZN10PriceClass19assembleMessageDataEv+0x1fe>
    messageDataReady = false;
   b5ac2:	2500      	movs	r5, #0
	_M_erase(_M_begin());
   b5ac4:	68a0      	ldr	r0, [r4, #8]
   b5ac6:	7665      	strb	r5, [r4, #25]
   b5ac8:	f7ff fb99 	bl	b51fe <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
    newPricesReceived = true;
   b5acc:	2301      	movs	r3, #1
      _M_header._M_left = &_M_header;
   b5ace:	e9c4 5702 	strd	r5, r7, [r4, #8]
      _M_node_count = 0;
   b5ad2:	e9c4 7504 	strd	r7, r5, [r4, #16]
   b5ad6:	7623      	strb	r3, [r4, #24]
      { _M_dispose(); }
   b5ad8:	a804      	add	r0, sp, #16
   b5ada:	f004 f929 	bl	b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
   b5ade:	b011      	add	sp, #68	; 0x44
   b5ae0:	ecbd 8b02 	vpop	{d8}
   b5ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5ae8:	33333333 	.word	0x33333333
   b5aec:	3fd33333 	.word	0x3fd33333
   b5af0:	000bc769 	.word	0x000bc769
   b5af4:	000bc56d 	.word	0x000bc56d
   b5af8:	000bc787 	.word	0x000bc787
   b5afc:	447a0000 	.word	0x447a0000
   b5b00:	000bc8a2 	.word	0x000bc8a2
   b5b04:	42c80000 	.word	0x42c80000
   b5b08:	000bc79a 	.word	0x000bc79a
   b5b0c:	000bc79f 	.word	0x000bc79f

000b5b10 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5b12:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5b14:	4616      	mov	r6, r2
   b5b16:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b5b18:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b5b1a:	2201      	movs	r2, #1
      while (__x != 0)
   b5b1c:	b163      	cbz	r3, b5b38 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x28>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5b1e:	7c1d      	ldrb	r5, [r3, #16]
   b5b20:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5b22:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b5b26:	4295      	cmp	r5, r2
   b5b28:	bf88      	it	hi
   b5b2a:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5b2c:	461d      	mov	r5, r3
   b5b2e:	bf96      	itet	ls
   b5b30:	2200      	movls	r2, #0
   b5b32:	463b      	movhi	r3, r7
   b5b34:	4603      	movls	r3, r0
   b5b36:	e7f1      	b.n	b5b1c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xc>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b5b38:	b192      	cbz	r2, b5b60 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x50>
	{
	  if (__j == begin())
   b5b3a:	68ca      	ldr	r2, [r1, #12]
   b5b3c:	42aa      	cmp	r2, r5
   b5b3e:	d103      	bne.n	b5b48 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b5b40:	e9c4 3500 	strd	r3, r5, [r4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b5b44:	4620      	mov	r0, r4
   b5b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b5b48:	4628      	mov	r0, r5
   b5b4a:	f003 ff99 	bl	b9a80 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b5b4e:	7833      	ldrb	r3, [r6, #0]
   b5b50:	7c02      	ldrb	r2, [r0, #16]
   b5b52:	429a      	cmp	r2, r3
   b5b54:	f04f 0300 	mov.w	r3, #0
   b5b58:	d3f2      	bcc.n	b5b40 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b5b5a:	e9c4 0300 	strd	r0, r3, [r4]
   b5b5e:	e7f1      	b.n	b5b44 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x34>
   b5b60:	4628      	mov	r0, r5
   b5b62:	e7f4      	b.n	b5b4e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x3e>

000b5b64 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_>:
{
   b5b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    messageDataReady = false;
   b5b68:	2300      	movs	r3, #0
   b5b6a:	7643      	strb	r3, [r0, #25]
      { return &this->_M_impl._M_header; }
   b5b6c:	f100 0a04 	add.w	sl, r0, #4
    messageParts[pricesEvent[7]] = data;
   b5b70:	f891 8007 	ldrb.w	r8, [r1, #7]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5b74:	6887      	ldr	r7, [r0, #8]
{
   b5b76:	b086      	sub	sp, #24
   b5b78:	4605      	mov	r5, r0
   b5b7a:	4691      	mov	r9, r2
      { return &this->_M_impl._M_header; }
   b5b7c:	4654      	mov	r4, sl
      while (__x != 0)
   b5b7e:	b147      	cbz	r7, b5b92 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x2e>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5b80:	7c39      	ldrb	r1, [r7, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5b82:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5b86:	4541      	cmp	r1, r8
   b5b88:	bf2a      	itet	cs
   b5b8a:	463c      	movcs	r4, r7
   b5b8c:	4617      	movcc	r7, r2
   b5b8e:	461f      	movcs	r7, r3
   b5b90:	e7f5      	b.n	b5b7e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x1a>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b5b92:	45a2      	cmp	sl, r4
   b5b94:	d002      	beq.n	b5b9c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x38>
   b5b96:	7c23      	ldrb	r3, [r4, #16]
   b5b98:	4543      	cmp	r3, r8
   b5b9a:	d931      	bls.n	b5c00 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5b9c:	202c      	movs	r0, #44	; 0x2c
   b5b9e:	f7fe fff4 	bl	b4b8a <_Znwj>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5ba2:	f100 031c 	add.w	r3, r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5ba6:	6143      	str	r3, [r0, #20]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b5ba8:	45a2      	cmp	sl, r4
      { _M_string_length = __length; }
   b5baa:	f04f 0300 	mov.w	r3, #0
   b5bae:	4606      	mov	r6, r0
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b5bb0:	f880 8010 	strb.w	r8, [r0, #16]
   b5bb4:	6183      	str	r3, [r0, #24]
   b5bb6:	7703      	strb	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b5bb8:	f100 0210 	add.w	r2, r0, #16
   b5bbc:	d13c      	bne.n	b5c38 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xd4>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b5bbe:	696b      	ldr	r3, [r5, #20]
   b5bc0:	b11b      	cbz	r3, b5bca <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x66>
   b5bc2:	6929      	ldr	r1, [r5, #16]
   b5bc4:	7c0b      	ldrb	r3, [r1, #16]
   b5bc6:	4543      	cmp	r3, r8
   b5bc8:	d309      	bcc.n	b5bde <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x7a>
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   b5bca:	4629      	mov	r1, r5
   b5bcc:	a804      	add	r0, sp, #16
   b5bce:	f7ff ff9f 	bl	b5b10 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5bd2:	e9dd 4104 	ldrd	r4, r1, [sp, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b5bd6:	2900      	cmp	r1, #0
   b5bd8:	d068      	beq.n	b5cac <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5bda:	2c00      	cmp	r4, #0
   b5bdc:	d164      	bne.n	b5ca8 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b5bde:	458a      	cmp	sl, r1
   b5be0:	d062      	beq.n	b5ca8 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5be2:	7c30      	ldrb	r0, [r6, #16]
   b5be4:	7c0b      	ldrb	r3, [r1, #16]
   b5be6:	4298      	cmp	r0, r3
   b5be8:	bf2c      	ite	cs
   b5bea:	2000      	movcs	r0, #0
   b5bec:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b5bee:	4653      	mov	r3, sl
   b5bf0:	460a      	mov	r2, r1
   b5bf2:	4631      	mov	r1, r6
   b5bf4:	f003 ff46 	bl	b9a84 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b5bf8:	696b      	ldr	r3, [r5, #20]
   b5bfa:	3301      	adds	r3, #1
   b5bfc:	616b      	str	r3, [r5, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b5bfe:	4634      	mov	r4, r6
	return __builtin_strlen(__s);
   b5c00:	4648      	mov	r0, r9
   b5c02:	f7fe ff67 	bl	b4ad4 <strlen>
	return _M_replace(size_type(0), this->size(), __s,
   b5c06:	9000      	str	r0, [sp, #0]
   b5c08:	69a2      	ldr	r2, [r4, #24]
   b5c0a:	464b      	mov	r3, r9
   b5c0c:	2100      	movs	r1, #0
   b5c0e:	f104 0014 	add.w	r0, r4, #20
   b5c12:	f004 f929 	bl	b9e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
    if (strlen(data) < 512)
   b5c16:	4648      	mov	r0, r9
   b5c18:	f7fe ff5c 	bl	b4ad4 <strlen>
   b5c1c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   b5c20:	d24e      	bcs.n	b5cc0 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x15c>
        newPricesReceived = false; // New prices not assembled yet.
   b5c22:	f44f 7380 	mov.w	r3, #256	; 0x100
   b5c26:	832b      	strh	r3, [r5, #24]
        Serial.println("Message Data Received.");
   b5c28:	f003 f922 	bl	b8e70 <_Z16_fetch_usbserialv>
   b5c2c:	4926      	ldr	r1, [pc, #152]	; (b5cc8 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x164>)
}
   b5c2e:	b006      	add	sp, #24
   b5c30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Serial.println("Message Data Received.");
   b5c34:	f002 bb77 	b.w	b8326 <_ZN5Print7printlnEPKc>
      { return __x < __y; }
   b5c38:	7c23      	ldrb	r3, [r4, #16]
   b5c3a:	9203      	str	r2, [sp, #12]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b5c3c:	4598      	cmp	r8, r3
   b5c3e:	d218      	bcs.n	b5c72 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10e>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b5c40:	68eb      	ldr	r3, [r5, #12]
   b5c42:	429c      	cmp	r4, r3
   b5c44:	d009      	beq.n	b5c5a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
	_M_node = _Rb_tree_decrement(_M_node);
   b5c46:	4620      	mov	r0, r4
   b5c48:	f003 ff1a 	bl	b9a80 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b5c4c:	7c03      	ldrb	r3, [r0, #16]
   b5c4e:	9a03      	ldr	r2, [sp, #12]
   b5c50:	4543      	cmp	r3, r8
   b5c52:	d205      	bcs.n	b5c60 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xfc>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5c54:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b5c56:	b953      	cbnz	r3, b5c6e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10a>
   b5c58:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b5c5a:	4621      	mov	r1, r4
   b5c5c:	461c      	mov	r4, r3
   b5c5e:	e7ba      	b.n	b5bd6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5c60:	4629      	mov	r1, r5
   b5c62:	a804      	add	r0, sp, #16
   b5c64:	f7ff ff54 	bl	b5b10 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5c68:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   b5c6c:	e7f5      	b.n	b5c5a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
   b5c6e:	4623      	mov	r3, r4
   b5c70:	e7f3      	b.n	b5c5a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b5c72:	d91b      	bls.n	b5cac <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
	  if (__pos._M_node == _M_rightmost())
   b5c74:	6929      	ldr	r1, [r5, #16]
   b5c76:	428c      	cmp	r4, r1
   b5c78:	d00b      	beq.n	b5c92 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
	_M_node = _Rb_tree_increment(_M_node);
   b5c7a:	4620      	mov	r0, r4
   b5c7c:	f003 fefe 	bl	b9a7c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5c80:	7c03      	ldrb	r3, [r0, #16]
   b5c82:	9a03      	ldr	r2, [sp, #12]
   b5c84:	4543      	cmp	r3, r8
	_M_node = _Rb_tree_increment(_M_node);
   b5c86:	4607      	mov	r7, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5c88:	d905      	bls.n	b5c96 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x132>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5c8a:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b5c8c:	b953      	cbnz	r3, b5ca4 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x140>
   b5c8e:	4621      	mov	r1, r4
   b5c90:	461f      	mov	r7, r3
   b5c92:	463c      	mov	r4, r7
   b5c94:	e79f      	b.n	b5bd6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5c96:	4629      	mov	r1, r5
   b5c98:	a804      	add	r0, sp, #16
   b5c9a:	f7ff ff39 	bl	b5b10 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5c9e:	e9dd 7104 	ldrd	r7, r1, [sp, #16]
   b5ca2:	e7f6      	b.n	b5c92 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
   b5ca4:	4601      	mov	r1, r0
   b5ca6:	e7f4      	b.n	b5c92 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5ca8:	2001      	movs	r0, #1
   b5caa:	e7a0      	b.n	b5bee <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x8a>
      { _M_dispose(); }
   b5cac:	f106 0014 	add.w	r0, r6, #20
   b5cb0:	f004 f83e 	bl	b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	::operator delete(__p
   b5cb4:	4630      	mov	r0, r6
   b5cb6:	212c      	movs	r1, #44	; 0x2c
   b5cb8:	f7fe ff6f 	bl	b4b9a <_ZdlPvj>
   b5cbc:	4626      	mov	r6, r4
   b5cbe:	e79e      	b.n	b5bfe <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9a>
}
   b5cc0:	b006      	add	sp, #24
   b5cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5cc6:	bf00      	nop
   b5cc8:	000bc7a4 	.word	0x000bc7a4

000b5ccc <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
        val_(val) {
   b5ccc:	4b01      	ldr	r3, [pc, #4]	; (b5cd4 <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b5cce:	2200      	movs	r2, #0
   b5cd0:	701a      	strb	r2, [r3, #0]
   b5cd2:	4770      	bx	lr
   b5cd4:	2003e5dc 	.word	0x2003e5dc

000b5cd8 <_ZN6Sensor9sensorISREv>:
/// @brief Sensor Interrupt Service Rutine - run when sensor activates the sensor pin.
// This updates the time since last activation, and the time difference (delta) is
// used to calculate a power reading.
// ###################################################################################
void Sensor::sensorISR(void)
{
   b5cd8:	b510      	push	{r4, lr}
   b5cda:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5cdc:	f000 fcc6 	bl	b666c <HAL_Timer_Get_Milli_Seconds>
    unsigned long timeNow = millis();
    unsigned long delta = timeNow - lastReadTime;
   b5ce0:	6823      	ldr	r3, [r4, #0]
   b5ce2:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b5ce4:	2b64      	cmp	r3, #100	; 0x64
   b5ce6:	d906      	bls.n	b5cf6 <_ZN6Sensor9sensorISREv+0x1e>
    {
        currentPowerReading = WATT_CONVERSION_CONSTANT / delta;
   b5ce8:	4a03      	ldr	r2, [pc, #12]	; (b5cf8 <_ZN6Sensor9sensorISREv+0x20>)
   b5cea:	fbb2 f3f3 	udiv	r3, r2, r3
        lastReadTime = timeNow;
   b5cee:	e9c4 0300 	strd	r0, r3, [r4]
        newReadingAvaliable = true;
   b5cf2:	2301      	movs	r3, #1
   b5cf4:	7223      	strb	r3, [r4, #8]
    }
}
   b5cf6:	bd10      	pop	{r4, pc}
   b5cf8:	0036ee80 	.word	0x0036ee80

000b5cfc <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5cfc:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b5cfe:	6803      	ldr	r3, [r0, #0]
   b5d00:	685a      	ldr	r2, [r3, #4]
   b5d02:	6899      	ldr	r1, [r3, #8]
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	1054      	asrs	r4, r2, #1
   b5d08:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b5d0c:	07d2      	lsls	r2, r2, #31
   b5d0e:	bf48      	it	mi
   b5d10:	590a      	ldrmi	r2, [r1, r4]
      }
   b5d12:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5d16:	bf48      	it	mi
   b5d18:	58d3      	ldrmi	r3, [r2, r3]
   b5d1a:	4718      	bx	r3

000b5d1c <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b5d1c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5d1e:	b538      	push	{r3, r4, r5, lr}
   b5d20:	4604      	mov	r4, r0
	switch (__op)
   b5d22:	d102      	bne.n	b5d2a <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5d24:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5d26:	6023      	str	r3, [r4, #0]
	}
   b5d28:	e003      	b.n	b5d32 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b5d2a:	2a02      	cmp	r2, #2
   b5d2c:	d003      	beq.n	b5d36 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b5d2e:	2a03      	cmp	r2, #3
   b5d30:	d00d      	beq.n	b5d4e <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b5d32:	2000      	movs	r0, #0
   b5d34:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5d36:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b5d38:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5d3a:	f7fe ff26 	bl	b4b8a <_Znwj>
   b5d3e:	4603      	mov	r3, r0
   b5d40:	2800      	cmp	r0, #0
   b5d42:	d0f0      	beq.n	b5d26 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b5d44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5d48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5d4c:	e7eb      	b.n	b5d26 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5d4e:	6800      	ldr	r0, [r0, #0]
   b5d50:	2800      	cmp	r0, #0
   b5d52:	d0ee      	beq.n	b5d32 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b5d54:	210c      	movs	r1, #12
   b5d56:	f7fe ff20 	bl	b4b9a <_ZdlPvj>
   b5d5a:	e7ea      	b.n	b5d32 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b5d5c <_ZN6Sensor10initSensorEv>:

// ##############################################################
/// @brief Initialization. Sets up the sensor pin, and interrupt.
// ##############################################################
void Sensor::initSensor()
{
   b5d5c:	b530      	push	{r4, r5, lr}
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5d5e:	2103      	movs	r1, #3
{
   b5d60:	b087      	sub	sp, #28
   b5d62:	4604      	mov	r4, r0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5d64:	2008      	movs	r0, #8
   b5d66:	f003 fda7 	bl	b98b8 <pinMode>
    _Function_base() : _M_manager(nullptr) { }
   b5d6a:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5d6c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5d6e:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5d70:	f7fe ff0b 	bl	b4b8a <_Znwj>
   b5d74:	b118      	cbz	r0, b5d7e <_ZN6Sensor10initSensorEv+0x22>
   b5d76:	4b0f      	ldr	r3, [pc, #60]	; (b5db4 <_ZN6Sensor10initSensorEv+0x58>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5d78:	6084      	str	r4, [r0, #8]
   b5d7a:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b5d7e:	4b0e      	ldr	r3, [pc, #56]	; (b5db8 <_ZN6Sensor10initSensorEv+0x5c>)
   b5d80:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5d82:	4b0e      	ldr	r3, [pc, #56]	; (b5dbc <_ZN6Sensor10initSensorEv+0x60>)
   b5d84:	9304      	str	r3, [sp, #16]
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b5d86:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5d88:	9002      	str	r0, [sp, #8]
   b5d8a:	9300      	str	r3, [sp, #0]
   b5d8c:	2201      	movs	r2, #1
   b5d8e:	f04f 33ff 	mov.w	r3, #4294967295
   b5d92:	a902      	add	r1, sp, #8
   b5d94:	2008      	movs	r0, #8
   b5d96:	f003 f8bf 	bl	b8f18 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b5d9a:	9b04      	ldr	r3, [sp, #16]
   b5d9c:	b11b      	cbz	r3, b5da6 <_ZN6Sensor10initSensorEv+0x4a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5d9e:	a902      	add	r1, sp, #8
   b5da0:	2203      	movs	r2, #3
   b5da2:	4608      	mov	r0, r1
   b5da4:	4798      	blx	r3
   b5da6:	f000 fc61 	bl	b666c <HAL_Timer_Get_Milli_Seconds>
    attachInterrupt(KW_SENSOR_PIN, &Sensor::sensorISR, this, RISING); // Attach interrup that will be called when rising
    lastReadTime = millis();
    newReadingAvaliable = false;
   b5daa:	2300      	movs	r3, #0
    lastReadTime = millis();
   b5dac:	6020      	str	r0, [r4, #0]
    newReadingAvaliable = false;
   b5dae:	7223      	strb	r3, [r4, #8]
}
   b5db0:	b007      	add	sp, #28
   b5db2:	bd30      	pop	{r4, r5, pc}
   b5db4:	000b5cd9 	.word	0x000b5cd9
   b5db8:	000b5cfd 	.word	0x000b5cfd
   b5dbc:	000b5d1d 	.word	0x000b5d1d

000b5dc0 <_ZN6Sensor17getCurrentReadingEv>:
// ###############################################################
/// @brief Method for getting the current calculated power reading
// ###############################################################
int Sensor::getCurrentReading()
{
    newReadingAvaliable = false;
   b5dc0:	2300      	movs	r3, #0
   b5dc2:	7203      	strb	r3, [r0, #8]
    return currentPowerReading;
}
   b5dc4:	6840      	ldr	r0, [r0, #4]
   b5dc6:	4770      	bx	lr

000b5dc8 <_ZN6Sensor18checkForNewReadingEv>:
// Since the last one was read.
// ##################################################################
bool Sensor::checkForNewReading()
{
    return newReadingAvaliable;
   b5dc8:	7a00      	ldrb	r0, [r0, #8]
   b5dca:	4770      	bx	lr

000b5dcc <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5dcc:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5dd0:	b510      	push	{r4, lr}
   b5dd2:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5dd4:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5dd6:	b113      	cbz	r3, b5dde <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5dd8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5dda:	f000 fce7 	bl	b67ac <os_mutex_lock>
#endif
#endif
#endif
        }
   b5dde:	4620      	mov	r0, r4
   b5de0:	bd10      	pop	{r4, pc}

000b5de2 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5de2:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5de4:	6803      	ldr	r3, [r0, #0]
   b5de6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5dea:	4604      	mov	r4, r0
            if (mqtt->thread)
   b5dec:	b112      	cbz	r2, b5df4 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5dee:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5df0:	f000 fce4 	bl	b67bc <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5df4:	4620      	mov	r0, r4
   b5df6:	bd10      	pop	{r4, pc}

000b5df8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5dfa:	461f      	mov	r7, r3
   b5dfc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5e00:	4604      	mov	r4, r0
   b5e02:	460d      	mov	r5, r1
   b5e04:	4616      	mov	r6, r2
    if (thread) {
   b5e06:	b12b      	cbz	r3, b5e14 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5e08:	2301      	movs	r3, #1
   b5e0a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b5e0e:	3058      	adds	r0, #88	; 0x58
   b5e10:	f000 fcc4 	bl	b679c <os_mutex_create>
    }
    this->callback = callback;
   b5e14:	9b08      	ldr	r3, [sp, #32]
   b5e16:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5e18:	2300      	movs	r3, #0
   b5e1a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b5e1c:	b106      	cbz	r6, b5e20 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b5e1e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5e20:	b125      	cbz	r5, b5e2c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5e22:	4629      	mov	r1, r5
   b5e24:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5e28:	f001 f886 	bl	b6f38 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b5e2c:	9b06      	ldr	r3, [sp, #24]
   b5e2e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5e30:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5e32:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5e34:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5e38:	2bff      	cmp	r3, #255	; 0xff
   b5e3a:	bfb8      	it	lt
   b5e3c:	23ff      	movlt	r3, #255	; 0xff
   b5e3e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5e42:	b108      	cbz	r0, b5e48 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5e44:	f7fe fea7 	bl	b4b96 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5e48:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5e4c:	f7fe fe9f 	bl	b4b8e <_Znaj>
   b5e50:	61e0      	str	r0, [r4, #28]
}
   b5e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e54 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b5e54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5e58:	4604      	mov	r4, r0
            bool thread) {
   b5e5a:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b5e5c:	4617      	mov	r7, r2
   b5e5e:	4698      	mov	r8, r3
   b5e60:	460e      	mov	r6, r1
            bool thread) {
   b5e62:	f003 fbe7 	bl	b9634 <_ZN9TCPClientC1Ev>
   b5e66:	490d      	ldr	r1, [pc, #52]	; (b5e9c <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b5e68:	61e5      	str	r5, [r4, #28]
   b5e6a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5e6e:	f001 f835 	bl	b6edc <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5e72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b5e76:	9303      	str	r3, [sp, #12]
   b5e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b5e7a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5e7c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b5e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5e82:	9300      	str	r3, [sp, #0]
   b5e84:	4620      	mov	r0, r4
            bool thread) {
   b5e86:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5e8a:	463b      	mov	r3, r7
   b5e8c:	462a      	mov	r2, r5
   b5e8e:	4631      	mov	r1, r6
   b5e90:	f7ff ffb2 	bl	b5df8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5e94:	4620      	mov	r0, r4
   b5e96:	b004      	add	sp, #16
   b5e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5e9c:	000bc56d 	.word	0x000bc56d

000b5ea0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5ea0:	b510      	push	{r4, lr}
   b5ea2:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5ea4:	4620      	mov	r0, r4
   b5ea6:	f003 fb21 	bl	b94ec <_ZN9TCPClient9availableEv>
   b5eaa:	2800      	cmp	r0, #0
   b5eac:	d0fa      	beq.n	b5ea4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5eae:	4620      	mov	r0, r4
   b5eb0:	f003 f92a 	bl	b9108 <_ZN9TCPClient4readEv>
}
   b5eb4:	b2c0      	uxtb	r0, r0
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5ebc:	4605      	mov	r5, r0
   b5ebe:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5ec0:	f7ff ffee 	bl	b5ea0 <_ZN4MQTT8readByteEv>
   b5ec4:	69eb      	ldr	r3, [r5, #28]
   b5ec6:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5ec8:	69eb      	ldr	r3, [r5, #28]
   b5eca:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5ece:	f04f 0901 	mov.w	r9, #1
   b5ed2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5ed6:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5ed8:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5eda:	4628      	mov	r0, r5
   b5edc:	f7ff ffe0 	bl	b5ea0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5ee0:	4626      	mov	r6, r4
   b5ee2:	69eb      	ldr	r3, [r5, #28]
   b5ee4:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5ee6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b5eea:	fb13 f309 	smulbb	r3, r3, r9
   b5eee:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5ef0:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5ef2:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5ef4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5ef6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5ef8:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5efc:	d4ed      	bmi.n	b5eda <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5efe:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5f00:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5f04:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5f08:	d11e      	bne.n	b5f48 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b5f0a:	4628      	mov	r0, r5
   b5f0c:	f7ff ffc8 	bl	b5ea0 <_ZN4MQTT8readByteEv>
   b5f10:	69eb      	ldr	r3, [r5, #28]
   b5f12:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5f14:	4628      	mov	r0, r5
   b5f16:	f7ff ffc3 	bl	b5ea0 <_ZN4MQTT8readByteEv>
   b5f1a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b5f1c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b5f1e:	b2b6      	uxth	r6, r6
   b5f20:	69eb      	ldr	r3, [r5, #28]
   b5f22:	b2a4      	uxth	r4, r4
   b5f24:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5f26:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5f28:	b2b6      	uxth	r6, r6
   b5f2a:	42be      	cmp	r6, r7
   b5f2c:	d20e      	bcs.n	b5f4c <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b5f2e:	4628      	mov	r0, r5
   b5f30:	f7ff ffb6 	bl	b5ea0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5f34:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5f38:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b5f3a:	bf84      	itt	hi
   b5f3c:	69eb      	ldrhi	r3, [r5, #28]
   b5f3e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5f40:	3401      	adds	r4, #1
   b5f42:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5f44:	3601      	adds	r6, #1
   b5f46:	e7ef      	b.n	b5f28 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5f48:	2600      	movs	r6, #0
   b5f4a:	e7ed      	b.n	b5f28 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5f4c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5f50:	42a3      	cmp	r3, r4
   b5f52:	bf2c      	ite	cs
   b5f54:	4620      	movcs	r0, r4
   b5f56:	2000      	movcc	r0, #0
   b5f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5f5c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5f5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5f60:	4615      	mov	r5, r2
   b5f62:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5f64:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5f66:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5f68:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5f6a:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5f6c:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5f6e:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5f72:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5f76:	f103 0401 	add.w	r4, r3, #1
   b5f7a:	4403      	add	r3, r0
            digit |= 0x80;
   b5f7c:	bf88      	it	hi
   b5f7e:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b5f82:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b5f86:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b5f8a:	b2e4      	uxtb	r4, r4
   b5f8c:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5f90:	d81e      	bhi.n	b5fd0 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5f92:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5f96:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b5f9a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5f9c:	4622      	mov	r2, r4
   b5f9e:	a901      	add	r1, sp, #4
   b5fa0:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5fa2:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5fa6:	f004 f9f9 	bl	ba39c <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b5faa:	1c72      	adds	r2, r6, #1
   b5fac:	4422      	add	r2, r4
   b5fae:	4641      	mov	r1, r8
   b5fb0:	4638      	mov	r0, r7
   b5fb2:	f003 f894 	bl	b90de <_ZN9TCPClient5writeEPKhj>
   b5fb6:	4605      	mov	r5, r0
   b5fb8:	f000 fb58 	bl	b666c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5fbc:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b5fbe:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5fc0:	4432      	add	r2, r6
   b5fc2:	b2a8      	uxth	r0, r5
}
   b5fc4:	1a13      	subs	r3, r2, r0
   b5fc6:	4258      	negs	r0, r3
   b5fc8:	4158      	adcs	r0, r3
   b5fca:	b002      	add	sp, #8
   b5fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5fd0:	4623      	mov	r3, r4
   b5fd2:	e7ca      	b.n	b5f6a <_ZN4MQTT5writeEhPht+0xe>

000b5fd4 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5fd4:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5fd8:	4605      	mov	r5, r0
    pos += 2;
   b5fda:	b298      	uxth	r0, r3
   b5fdc:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5fde:	5cce      	ldrb	r6, [r1, r3]
   b5fe0:	b29c      	uxth	r4, r3
   b5fe2:	b156      	cbz	r6, b5ffa <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5fe4:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b5fe8:	4584      	cmp	ip, r0
   b5fea:	f103 0701 	add.w	r7, r3, #1
   b5fee:	d904      	bls.n	b5ffa <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5ff0:	1c44      	adds	r4, r0, #1
   b5ff2:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5ff4:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b5ff6:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b5ff8:	e7f1      	b.n	b5fde <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b5ffa:	b299      	uxth	r1, r3
   b5ffc:	1a41      	subs	r1, r0, r1
   b5ffe:	440a      	add	r2, r1
   b6000:	0a21      	lsrs	r1, r4, #8
   b6002:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b6006:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b600a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b600c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b600c:	b538      	push	{r3, r4, r5, lr}
   b600e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6010:	f003 f98e 	bl	b9330 <_ZN9TCPClient9connectedEv>
   b6014:	2800      	cmp	r0, #0
   b6016:	bf14      	ite	ne
   b6018:	2501      	movne	r5, #1
   b601a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b601c:	d102      	bne.n	b6024 <_ZN4MQTT11isConnectedEv+0x18>
   b601e:	4620      	mov	r0, r4
   b6020:	f003 fabe 	bl	b95a0 <_ZN9TCPClient4stopEv>
    return rc;
}
   b6024:	4628      	mov	r0, r5
   b6026:	bd38      	pop	{r3, r4, r5, pc}

000b6028 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b602c:	b088      	sub	sp, #32
   b602e:	4604      	mov	r4, r0
   b6030:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b6034:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6038:	4689      	mov	r9, r1
   b603a:	4617      	mov	r7, r2
   b603c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b603e:	f7ff ffe5 	bl	b600c <_ZN4MQTT11isConnectedEv>
   b6042:	4605      	mov	r5, r0
   b6044:	2800      	cmp	r0, #0
   b6046:	f040 80cd 	bne.w	b61e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b604a:	4621      	mov	r1, r4
   b604c:	a801      	add	r0, sp, #4
   b604e:	f7ff febd 	bl	b5dcc <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b6052:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6054:	2900      	cmp	r1, #0
   b6056:	f040 8088 	bne.w	b616a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b605a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b605e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6060:	462b      	mov	r3, r5
   b6062:	4620      	mov	r0, r4
   b6064:	f003 f8e6 	bl	b9234 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6068:	2800      	cmp	r0, #0
   b606a:	d07a      	beq.n	b6162 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b606c:	2301      	movs	r3, #1
   b606e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6070:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6074:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b6076:	2b04      	cmp	r3, #4
   b6078:	4b5b      	ldr	r3, [pc, #364]	; (b61e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b607a:	f040 8081 	bne.w	b6180 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b607e:	6818      	ldr	r0, [r3, #0]
   b6080:	8899      	ldrh	r1, [r3, #4]
   b6082:	799b      	ldrb	r3, [r3, #6]
   b6084:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6088:	f88d 300e 	strb.w	r3, [sp, #14]
   b608c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b608e:	f8c2 0005 	str.w	r0, [r2, #5]
   b6092:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b6096:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b609a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b609e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b60a0:	230c      	movs	r3, #12
            if (willTopic) {
   b60a2:	f1b8 0f00 	cmp.w	r8, #0
   b60a6:	f000 8081 	beq.w	b61ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b60aa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b60ae:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b60b2:	0140      	lsls	r0, r0, #5
   b60b4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b60b8:	f040 0006 	orr.w	r0, r0, #6
   b60bc:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b60be:	f1ba 0f00 	cmp.w	sl, #0
   b60c2:	d101      	bne.n	b60c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b60c4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b60c8:	b11f      	cbz	r7, b60d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b60ca:	2e00      	cmp	r6, #0
   b60cc:	d170      	bne.n	b61b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b60ce:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b60d2:	69e2      	ldr	r2, [r4, #28]
   b60d4:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b60d6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b60d8:	69e1      	ldr	r1, [r4, #28]
   b60da:	1c58      	adds	r0, r3, #1
   b60dc:	1212      	asrs	r2, r2, #8
   b60de:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b60e0:	1c9a      	adds	r2, r3, #2
   b60e2:	69e1      	ldr	r1, [r4, #28]
   b60e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b60e6:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b60e8:	3303      	adds	r3, #3
   b60ea:	69e2      	ldr	r2, [r4, #28]
   b60ec:	4649      	mov	r1, r9
   b60ee:	4620      	mov	r0, r4
   b60f0:	f7ff ff70 	bl	b5fd4 <_ZN4MQTT11writeStringEPKcPht>
   b60f4:	4603      	mov	r3, r0
            if (willTopic) {
   b60f6:	f1b8 0f00 	cmp.w	r8, #0
   b60fa:	d00b      	beq.n	b6114 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b60fc:	69e2      	ldr	r2, [r4, #28]
   b60fe:	4641      	mov	r1, r8
   b6100:	4620      	mov	r0, r4
   b6102:	f7ff ff67 	bl	b5fd4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b6106:	69e2      	ldr	r2, [r4, #28]
   b6108:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b610a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b610c:	4620      	mov	r0, r4
   b610e:	f7ff ff61 	bl	b5fd4 <_ZN4MQTT11writeStringEPKcPht>
   b6112:	4603      	mov	r3, r0
            if(user != NULL) {
   b6114:	b167      	cbz	r7, b6130 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b6116:	69e2      	ldr	r2, [r4, #28]
   b6118:	4639      	mov	r1, r7
   b611a:	4620      	mov	r0, r4
   b611c:	f7ff ff5a 	bl	b5fd4 <_ZN4MQTT11writeStringEPKcPht>
   b6120:	4603      	mov	r3, r0
                if(pass != NULL) {
   b6122:	b12e      	cbz	r6, b6130 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b6124:	69e2      	ldr	r2, [r4, #28]
   b6126:	4631      	mov	r1, r6
   b6128:	4620      	mov	r0, r4
   b612a:	f7ff ff53 	bl	b5fd4 <_ZN4MQTT11writeStringEPKcPht>
   b612e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6130:	3b05      	subs	r3, #5
   b6132:	69e2      	ldr	r2, [r4, #28]
   b6134:	b29b      	uxth	r3, r3
   b6136:	2110      	movs	r1, #16
   b6138:	4620      	mov	r0, r4
   b613a:	f7ff ff0f 	bl	b5f5c <_ZN4MQTT5writeEhPht>
   b613e:	f000 fa95 	bl	b666c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b6142:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6146:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b614a:	4620      	mov	r0, r4
   b614c:	f003 f9ce 	bl	b94ec <_ZN9TCPClient9availableEv>
   b6150:	bb88      	cbnz	r0, b61b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b6152:	f000 fa8b 	bl	b666c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6156:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6158:	1ac0      	subs	r0, r0, r3
   b615a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b615c:	4373      	muls	r3, r6
   b615e:	4298      	cmp	r0, r3
   b6160:	d9f3      	bls.n	b614a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b6162:	4620      	mov	r0, r4
   b6164:	f003 fa1c 	bl	b95a0 <_ZN9TCPClient4stopEv>
   b6168:	e035      	b.n	b61d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b616a:	a802      	add	r0, sp, #8
   b616c:	f002 fe16 	bl	b8d9c <_ZN9IPAddressC1EPKh>
   b6170:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6174:	462b      	mov	r3, r5
   b6176:	a902      	add	r1, sp, #8
   b6178:	4620      	mov	r0, r4
   b617a:	f003 f93b 	bl	b93f4 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b617e:	e773      	b.n	b6068 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6180:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b6184:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6188:	7bdb      	ldrb	r3, [r3, #15]
   b618a:	f10d 0c08 	add.w	ip, sp, #8
   b618e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6192:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b6196:	ab02      	add	r3, sp, #8
   b6198:	cb03      	ldmia	r3!, {r0, r1}
   b619a:	f8c2 0005 	str.w	r0, [r2, #5]
   b619e:	f8c2 1009 	str.w	r1, [r2, #9]
   b61a2:	f89c 3000 	ldrb.w	r3, [ip]
   b61a6:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b61a8:	230e      	movs	r3, #14
   b61aa:	e77a      	b.n	b60a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b61ac:	2002      	movs	r0, #2
   b61ae:	e786      	b.n	b60be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b61b0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b61b4:	e78d      	b.n	b60d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b61b6:	a902      	add	r1, sp, #8
   b61b8:	4620      	mov	r0, r4
   b61ba:	f7ff fe7d 	bl	b5eb8 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b61be:	2804      	cmp	r0, #4
   b61c0:	d1cf      	bne.n	b6162 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b61c2:	69e3      	ldr	r3, [r4, #28]
   b61c4:	78de      	ldrb	r6, [r3, #3]
   b61c6:	2e00      	cmp	r6, #0
   b61c8:	d1cb      	bne.n	b6162 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b61ca:	f000 fa4f 	bl	b666c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b61ce:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b61d0:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b61d2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b61d6:	a801      	add	r0, sp, #4
   b61d8:	f7ff fe03 	bl	b5de2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b61dc:	4628      	mov	r0, r5
   b61de:	b008      	add	sp, #32
   b61e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b61e4:	2500      	movs	r5, #0
   b61e6:	e7f9      	b.n	b61dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b61e8:	000bc4a8 	.word	0x000bc4a8

000b61ec <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b61ec:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b61ee:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b61f2:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b61f4:	2401      	movs	r4, #1
   b61f6:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b61fa:	2400      	movs	r4, #0
   b61fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b6200:	e9cd 4400 	strd	r4, r4, [sp]
   b6204:	f7ff ff10 	bl	b6028 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b6208:	b006      	add	sp, #24
   b620a:	bd10      	pop	{r4, pc}

000b620c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b620c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6210:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b6214:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6218:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b621c:	4604      	mov	r4, r0
   b621e:	468b      	mov	fp, r1
   b6220:	4616      	mov	r6, r2
   b6222:	461f      	mov	r7, r3
    if (isConnected()) {
   b6224:	f7ff fef2 	bl	b600c <_ZN4MQTT11isConnectedEv>
   b6228:	4682      	mov	sl, r0
   b622a:	2800      	cmp	r0, #0
   b622c:	d051      	beq.n	b62d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b622e:	4621      	mov	r1, r4
   b6230:	a801      	add	r0, sp, #4
   b6232:	f7ff fdcb 	bl	b5dcc <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b6236:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b623a:	69e0      	ldr	r0, [r4, #28]
   b623c:	2100      	movs	r1, #0
   b623e:	f004 f8d5 	bl	ba3ec <memset>
        length = writeString(topic, buffer, length);
   b6242:	2305      	movs	r3, #5
   b6244:	69e2      	ldr	r2, [r4, #28]
   b6246:	4659      	mov	r1, fp
   b6248:	4620      	mov	r0, r4
   b624a:	f7ff fec3 	bl	b5fd4 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b624e:	1e6b      	subs	r3, r5, #1
   b6250:	2b01      	cmp	r3, #1
   b6252:	d815      	bhi.n	b6280 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b6254:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6256:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6258:	3101      	adds	r1, #1
   b625a:	b289      	uxth	r1, r1
   b625c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b625e:	0a09      	lsrs	r1, r1, #8
   b6260:	5419      	strb	r1, [r3, r0]
   b6262:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b6264:	69e3      	ldr	r3, [r4, #28]
   b6266:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6268:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b626a:	3002      	adds	r0, #2
   b626c:	5499      	strb	r1, [r3, r2]
   b626e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6270:	f1b8 0f00 	cmp.w	r8, #0
   b6274:	d004      	beq.n	b6280 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b6276:	8c23      	ldrh	r3, [r4, #32]
   b6278:	1c5a      	adds	r2, r3, #1
   b627a:	8422      	strh	r2, [r4, #32]
   b627c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6280:	2100      	movs	r1, #0
   b6282:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6284:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b6286:	69e2      	ldr	r2, [r4, #28]
   b6288:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b628a:	d90a      	bls.n	b62a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b628c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6290:	459c      	cmp	ip, r3
   b6292:	d906      	bls.n	b62a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b6294:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6298:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b629c:	3101      	adds	r1, #1
   b629e:	b289      	uxth	r1, r1
   b62a0:	e7ef      	b.n	b6282 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b62a2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b62a6:	2900      	cmp	r1, #0
   b62a8:	bf0c      	ite	eq
   b62aa:	2130      	moveq	r1, #48	; 0x30
   b62ac:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b62ae:	f1b9 0f00 	cmp.w	r9, #0
   b62b2:	d001      	beq.n	b62b8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b62b4:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b62b8:	2d02      	cmp	r5, #2
   b62ba:	d10e      	bne.n	b62da <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b62bc:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b62c0:	3b05      	subs	r3, #5
   b62c2:	b29b      	uxth	r3, r3
   b62c4:	4620      	mov	r0, r4
   b62c6:	f7ff fe49 	bl	b5f5c <_ZN4MQTT5writeEhPht>
   b62ca:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b62cc:	a801      	add	r0, sp, #4
   b62ce:	f7ff fd88 	bl	b5de2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b62d2:	4650      	mov	r0, sl
   b62d4:	b003      	add	sp, #12
   b62d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b62da:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b62dc:	bf08      	it	eq
   b62de:	f041 0102 	orreq.w	r1, r1, #2
   b62e2:	e7ed      	b.n	b62c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b62e4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b62e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b62e6:	9c08      	ldr	r4, [sp, #32]
   b62e8:	9403      	str	r4, [sp, #12]
   b62ea:	2400      	movs	r4, #0
   b62ec:	9402      	str	r4, [sp, #8]
   b62ee:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b62f2:	9401      	str	r4, [sp, #4]
   b62f4:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b62f8:	9400      	str	r4, [sp, #0]
   b62fa:	f7ff ff87 	bl	b620c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b62fe:	b004      	add	sp, #16
   b6300:	bd10      	pop	{r4, pc}

000b6302 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b6302:	b530      	push	{r4, r5, lr}
   b6304:	b087      	sub	sp, #28
   b6306:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6308:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b630a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b630c:	9204      	str	r2, [sp, #16]
   b630e:	f7fe fbe1 	bl	b4ad4 <strlen>
   b6312:	2500      	movs	r5, #0
   b6314:	4603      	mov	r3, r0
   b6316:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b631a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b631e:	9500      	str	r5, [sp, #0]
   b6320:	4620      	mov	r0, r4
   b6322:	f7ff ffdf 	bl	b62e4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b6326:	b007      	add	sp, #28
   b6328:	bd30      	pop	{r4, r5, pc}

000b632a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b632a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b632c:	4604      	mov	r4, r0
   b632e:	460e      	mov	r6, r1
    if (isConnected()) {
   b6330:	f7ff fe6c 	bl	b600c <_ZN4MQTT11isConnectedEv>
   b6334:	4605      	mov	r5, r0
   b6336:	b1c8      	cbz	r0, b636c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b6338:	4621      	mov	r1, r4
   b633a:	a801      	add	r0, sp, #4
   b633c:	f7ff fd46 	bl	b5dcc <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b6340:	69e3      	ldr	r3, [r4, #28]
   b6342:	2262      	movs	r2, #98	; 0x62
   b6344:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6346:	69e3      	ldr	r3, [r4, #28]
   b6348:	2202      	movs	r2, #2
   b634a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b634c:	69e3      	ldr	r3, [r4, #28]
   b634e:	0a32      	lsrs	r2, r6, #8
   b6350:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6352:	69e3      	ldr	r3, [r4, #28]
   b6354:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6356:	69e1      	ldr	r1, [r4, #28]
   b6358:	2204      	movs	r2, #4
   b635a:	4620      	mov	r0, r4
   b635c:	f002 febf 	bl	b90de <_ZN9TCPClient5writeEPKhj>
   b6360:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6362:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6364:	bf18      	it	ne
   b6366:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6368:	f7ff fd3b 	bl	b5de2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b636c:	4628      	mov	r0, r5
   b636e:	b002      	add	sp, #8
   b6370:	bd70      	pop	{r4, r5, r6, pc}

000b6372 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b6372:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6374:	4604      	mov	r4, r0
   b6376:	460e      	mov	r6, r1
    if (isConnected()) {
   b6378:	f7ff fe48 	bl	b600c <_ZN4MQTT11isConnectedEv>
   b637c:	4605      	mov	r5, r0
   b637e:	b1c8      	cbz	r0, b63b4 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b6380:	4621      	mov	r1, r4
   b6382:	a801      	add	r0, sp, #4
   b6384:	f7ff fd22 	bl	b5dcc <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b6388:	69e3      	ldr	r3, [r4, #28]
   b638a:	2272      	movs	r2, #114	; 0x72
   b638c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b638e:	69e3      	ldr	r3, [r4, #28]
   b6390:	2202      	movs	r2, #2
   b6392:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6394:	69e3      	ldr	r3, [r4, #28]
   b6396:	0a32      	lsrs	r2, r6, #8
   b6398:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b639a:	69e3      	ldr	r3, [r4, #28]
   b639c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b639e:	69e1      	ldr	r1, [r4, #28]
   b63a0:	2204      	movs	r2, #4
   b63a2:	4620      	mov	r0, r4
   b63a4:	f002 fe9b 	bl	b90de <_ZN9TCPClient5writeEPKhj>
   b63a8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b63aa:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b63ac:	bf18      	it	ne
   b63ae:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b63b0:	f7ff fd17 	bl	b5de2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b63b4:	4628      	mov	r0, r5
   b63b6:	b002      	add	sp, #8
   b63b8:	bd70      	pop	{r4, r5, r6, pc}

000b63ba <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b63ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63be:	ed2d 8b02 	vpush	{d8}
   b63c2:	b087      	sub	sp, #28
   b63c4:	af00      	add	r7, sp, #0
   b63c6:	4604      	mov	r4, r0
    if (isConnected()) {
   b63c8:	f7ff fe20 	bl	b600c <_ZN4MQTT11isConnectedEv>
   b63cc:	4681      	mov	r9, r0
   b63ce:	b1f8      	cbz	r0, b6410 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b63d0:	4621      	mov	r1, r4
   b63d2:	f107 0014 	add.w	r0, r7, #20
   b63d6:	f7ff fcf9 	bl	b5dcc <_ZN4MQTT11MutexLockerC1EPS_>
   b63da:	f000 f947 	bl	b666c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b63de:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b63e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b63e4:	4353      	muls	r3, r2
   b63e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b63e8:	1a82      	subs	r2, r0, r2
   b63ea:	429a      	cmp	r2, r3
   b63ec:	4606      	mov	r6, r0
   b63ee:	d803      	bhi.n	b63f8 <_ZN4MQTT4loopEv+0x3e>
   b63f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b63f2:	1a82      	subs	r2, r0, r2
   b63f4:	4293      	cmp	r3, r2
   b63f6:	d221      	bcs.n	b643c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b63f8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b63fc:	b17b      	cbz	r3, b641e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b63fe:	4620      	mov	r0, r4
   b6400:	f003 f8ce 	bl	b95a0 <_ZN9TCPClient4stopEv>
                return false;
   b6404:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6408:	f107 0014 	add.w	r0, r7, #20
   b640c:	f7ff fce9 	bl	b5de2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6410:	4648      	mov	r0, r9
   b6412:	371c      	adds	r7, #28
   b6414:	46bd      	mov	sp, r7
   b6416:	ecbd 8b02 	vpop	{d8}
   b641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b641e:	69e2      	ldr	r2, [r4, #28]
   b6420:	21c0      	movs	r1, #192	; 0xc0
   b6422:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b6424:	69e2      	ldr	r2, [r4, #28]
   b6426:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b6428:	69e1      	ldr	r1, [r4, #28]
   b642a:	2202      	movs	r2, #2
   b642c:	4620      	mov	r0, r4
   b642e:	f002 fe56 	bl	b90de <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b6432:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b6436:	2301      	movs	r3, #1
   b6438:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b643c:	4620      	mov	r0, r4
   b643e:	f003 f855 	bl	b94ec <_ZN9TCPClient9availableEv>
   b6442:	2800      	cmp	r0, #0
   b6444:	d0e0      	beq.n	b6408 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b6446:	f107 0113 	add.w	r1, r7, #19
   b644a:	4620      	mov	r0, r4
   b644c:	f7ff fd34 	bl	b5eb8 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b6450:	4683      	mov	fp, r0
   b6452:	2800      	cmp	r0, #0
   b6454:	d0d8      	beq.n	b6408 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b6456:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b6458:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b645a:	7819      	ldrb	r1, [r3, #0]
   b645c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6460:	2a30      	cmp	r2, #48	; 0x30
   b6462:	d17f      	bne.n	b6564 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b6464:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b6468:	f1ba 0f00 	cmp.w	sl, #0
   b646c:	d0cc      	beq.n	b6408 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b646e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b6472:	466a      	mov	r2, sp
   b6474:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6478:	eb03 020c 	add.w	r2, r3, ip
   b647c:	7851      	ldrb	r1, [r2, #1]
   b647e:	7895      	ldrb	r5, [r2, #2]
   b6480:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b6484:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b6486:	f105 0208 	add.w	r2, r5, #8
   b648a:	4669      	mov	r1, sp
   b648c:	08d2      	lsrs	r2, r2, #3
   b648e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b6492:	4695      	mov	sp, r2
   b6494:	f10c 0203 	add.w	r2, ip, #3
   b6498:	60fa      	str	r2, [r7, #12]
   b649a:	eb03 0e02 	add.w	lr, r3, r2
   b649e:	eb0d 0205 	add.w	r2, sp, r5
   b64a2:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b64a4:	f8c7 d008 	str.w	sp, [r7, #8]
   b64a8:	607a      	str	r2, [r7, #4]
   b64aa:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b64ae:	428a      	cmp	r2, r1
   b64b0:	d006      	beq.n	b64c0 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b64b2:	460a      	mov	r2, r1
   b64b4:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b64b8:	f802 8b01 	strb.w	r8, [r2], #1
   b64bc:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b64be:	e7f4      	b.n	b64aa <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b64c0:	2200      	movs	r2, #0
   b64c2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b64c4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b64c8:	68f9      	ldr	r1, [r7, #12]
   b64ca:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b64ce:	ebab 020c 	sub.w	r2, fp, ip
   b64d2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b64d4:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b64d8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b64dc:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b64de:	d125      	bne.n	b652c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b64e0:	f813 e001 	ldrb.w	lr, [r3, r1]
   b64e4:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b64e6:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b64e8:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b64ec:	f10c 0105 	add.w	r1, ip, #5
   b64f0:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b64f2:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b64f4:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b64f8:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b64fa:	69e3      	ldr	r3, [r4, #28]
   b64fc:	2240      	movs	r2, #64	; 0x40
   b64fe:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6500:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6502:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b6506:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b650a:	69e3      	ldr	r3, [r4, #28]
   b650c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6510:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b6512:	69e3      	ldr	r3, [r4, #28]
   b6514:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6518:	69e1      	ldr	r1, [r4, #28]
   b651a:	2204      	movs	r2, #4
   b651c:	4620      	mov	r0, r4
   b651e:	f002 fdde 	bl	b90de <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b6522:	6266      	str	r6, [r4, #36]	; 0x24
   b6524:	ee18 3a10 	vmov	r3, s16
   b6528:	469d      	mov	sp, r3
   b652a:	e76d      	b.n	b6408 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b652c:	f1b8 0f04 	cmp.w	r8, #4
   b6530:	d115      	bne.n	b655e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6532:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6536:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6538:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b653a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b653e:	f10c 0105 	add.w	r1, ip, #5
   b6542:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6544:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6546:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b654a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b654c:	69e3      	ldr	r3, [r4, #28]
   b654e:	2250      	movs	r2, #80	; 0x50
   b6550:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b6552:	69e3      	ldr	r3, [r4, #28]
   b6554:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6556:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b655a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b655c:	e7d5      	b.n	b650a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b655e:	4419      	add	r1, r3
   b6560:	47d0      	blx	sl
   b6562:	e7df      	b.n	b6524 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b6564:	2a50      	cmp	r2, #80	; 0x50
   b6566:	d108      	bne.n	b657a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6568:	789a      	ldrb	r2, [r3, #2]
   b656a:	78d9      	ldrb	r1, [r3, #3]
   b656c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6570:	b289      	uxth	r1, r1
   b6572:	4620      	mov	r0, r4
   b6574:	f7ff fed9 	bl	b632a <_ZN4MQTT14publishReleaseEt>
   b6578:	e746      	b.n	b6408 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b657a:	2a40      	cmp	r2, #64	; 0x40
   b657c:	d112      	bne.n	b65a4 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b657e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6580:	2a00      	cmp	r2, #0
   b6582:	f43f af41 	beq.w	b6408 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b6586:	f1bb 0f04 	cmp.w	fp, #4
   b658a:	f47f af3d 	bne.w	b6408 <_ZN4MQTT4loopEv+0x4e>
   b658e:	f011 0f06 	tst.w	r1, #6
   b6592:	f47f af39 	bne.w	b6408 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b6596:	7899      	ldrb	r1, [r3, #2]
   b6598:	78d8      	ldrb	r0, [r3, #3]
   b659a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b659e:	b280      	uxth	r0, r0
   b65a0:	4790      	blx	r2
   b65a2:	e731      	b.n	b6408 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b65a4:	2a60      	cmp	r2, #96	; 0x60
   b65a6:	d108      	bne.n	b65ba <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b65a8:	789a      	ldrb	r2, [r3, #2]
   b65aa:	78d9      	ldrb	r1, [r3, #3]
   b65ac:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b65b0:	b289      	uxth	r1, r1
   b65b2:	4620      	mov	r0, r4
   b65b4:	f7ff fedd 	bl	b6372 <_ZN4MQTT15publishCompleteEt>
   b65b8:	e726      	b.n	b6408 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b65ba:	2a70      	cmp	r2, #112	; 0x70
   b65bc:	d0df      	beq.n	b657e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b65be:	2a90      	cmp	r2, #144	; 0x90
   b65c0:	f43f af22 	beq.w	b6408 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b65c4:	2ac0      	cmp	r2, #192	; 0xc0
   b65c6:	d10a      	bne.n	b65de <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b65c8:	22d0      	movs	r2, #208	; 0xd0
   b65ca:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b65cc:	69e3      	ldr	r3, [r4, #28]
   b65ce:	2200      	movs	r2, #0
   b65d0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b65d2:	69e1      	ldr	r1, [r4, #28]
   b65d4:	2202      	movs	r2, #2
   b65d6:	4620      	mov	r0, r4
   b65d8:	f002 fd81 	bl	b90de <_ZN9TCPClient5writeEPKhj>
   b65dc:	e714      	b.n	b6408 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b65de:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b65e0:	bf04      	itt	eq
   b65e2:	2300      	moveq	r3, #0
   b65e4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b65e8:	e70e      	b.n	b6408 <_ZN4MQTT4loopEv+0x4e>
	...

000b65ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b65ec:	b508      	push	{r3, lr}
   b65ee:	4b02      	ldr	r3, [pc, #8]	; (b65f8 <netdb_freeaddrinfo+0xc>)
   b65f0:	681b      	ldr	r3, [r3, #0]
   b65f2:	689b      	ldr	r3, [r3, #8]
   b65f4:	9301      	str	r3, [sp, #4]
   b65f6:	bd08      	pop	{r3, pc}
   b65f8:	00030268 	.word	0x00030268

000b65fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b65fc:	b508      	push	{r3, lr}
   b65fe:	4b02      	ldr	r3, [pc, #8]	; (b6608 <netdb_getaddrinfo+0xc>)
   b6600:	681b      	ldr	r3, [r3, #0]
   b6602:	68db      	ldr	r3, [r3, #12]
   b6604:	9301      	str	r3, [sp, #4]
   b6606:	bd08      	pop	{r3, pc}
   b6608:	00030268 	.word	0x00030268

000b660c <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b660c:	b508      	push	{r3, lr}
   b660e:	4b02      	ldr	r3, [pc, #8]	; (b6618 <hal_gpio_mode+0xc>)
   b6610:	681b      	ldr	r3, [r3, #0]
   b6612:	689b      	ldr	r3, [r3, #8]
   b6614:	9301      	str	r3, [sp, #4]
   b6616:	bd08      	pop	{r3, pc}
   b6618:	0003022c 	.word	0x0003022c

000b661c <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b661c:	b508      	push	{r3, lr}
   b661e:	4b02      	ldr	r3, [pc, #8]	; (b6628 <hal_interrupt_attach+0xc>)
   b6620:	681b      	ldr	r3, [r3, #0]
   b6622:	699b      	ldr	r3, [r3, #24]
   b6624:	9301      	str	r3, [sp, #4]
   b6626:	bd08      	pop	{r3, pc}
   b6628:	0003022c 	.word	0x0003022c

000b662c <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b662c:	b508      	push	{r3, lr}
   b662e:	4b02      	ldr	r3, [pc, #8]	; (b6638 <hal_interrupt_detach+0xc>)
   b6630:	681b      	ldr	r3, [r3, #0]
   b6632:	69db      	ldr	r3, [r3, #28]
   b6634:	9301      	str	r3, [sp, #4]
   b6636:	bd08      	pop	{r3, pc}
   b6638:	0003022c 	.word	0x0003022c

000b663c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b663c:	b508      	push	{r3, lr}
   b663e:	4b02      	ldr	r3, [pc, #8]	; (b6648 <if_index_to_name+0xc>)
   b6640:	681b      	ldr	r3, [r3, #0]
   b6642:	695b      	ldr	r3, [r3, #20]
   b6644:	9301      	str	r3, [sp, #4]
   b6646:	bd08      	pop	{r3, pc}
   b6648:	0003026c 	.word	0x0003026c

000b664c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b664c:	b508      	push	{r3, lr}
   b664e:	4b02      	ldr	r3, [pc, #8]	; (b6658 <HAL_RNG_GetRandomNumber+0xc>)
   b6650:	681b      	ldr	r3, [r3, #0]
   b6652:	685b      	ldr	r3, [r3, #4]
   b6654:	9301      	str	r3, [sp, #4]
   b6656:	bd08      	pop	{r3, pc}
   b6658:	00030218 	.word	0x00030218

000b665c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b665c:	b508      	push	{r3, lr}
   b665e:	4b02      	ldr	r3, [pc, #8]	; (b6668 <HAL_Delay_Microseconds+0xc>)
   b6660:	681b      	ldr	r3, [r3, #0]
   b6662:	68db      	ldr	r3, [r3, #12]
   b6664:	9301      	str	r3, [sp, #4]
   b6666:	bd08      	pop	{r3, pc}
   b6668:	00030218 	.word	0x00030218

000b666c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b666c:	b508      	push	{r3, lr}
   b666e:	4b02      	ldr	r3, [pc, #8]	; (b6678 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6670:	681b      	ldr	r3, [r3, #0]
   b6672:	695b      	ldr	r3, [r3, #20]
   b6674:	9301      	str	r3, [sp, #4]
   b6676:	bd08      	pop	{r3, pc}
   b6678:	00030218 	.word	0x00030218

000b667c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b667c:	b508      	push	{r3, lr}
   b667e:	4b02      	ldr	r3, [pc, #8]	; (b6688 <hal_rtc_time_is_valid+0xc>)
   b6680:	681b      	ldr	r3, [r3, #0]
   b6682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6684:	9301      	str	r3, [sp, #4]
   b6686:	bd08      	pop	{r3, pc}
   b6688:	00030218 	.word	0x00030218

000b668c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b668c:	b508      	push	{r3, lr}
   b668e:	4b02      	ldr	r3, [pc, #8]	; (b6698 <hal_rtc_get_time+0xc>)
   b6690:	681b      	ldr	r3, [r3, #0]
   b6692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6694:	9301      	str	r3, [sp, #4]
   b6696:	bd08      	pop	{r3, pc}
   b6698:	00030218 	.word	0x00030218

000b669c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b669c:	b508      	push	{r3, lr}
   b669e:	4b02      	ldr	r3, [pc, #8]	; (b66a8 <hal_ble_stack_init+0xc>)
   b66a0:	681b      	ldr	r3, [r3, #0]
   b66a2:	689b      	ldr	r3, [r3, #8]
   b66a4:	9301      	str	r3, [sp, #4]
   b66a6:	bd08      	pop	{r3, pc}
   b66a8:	00030278 	.word	0x00030278

000b66ac <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b66ac:	b508      	push	{r3, lr}
   b66ae:	4b02      	ldr	r3, [pc, #8]	; (b66b8 <hal_ble_select_antenna+0xc>)
   b66b0:	681b      	ldr	r3, [r3, #0]
   b66b2:	691b      	ldr	r3, [r3, #16]
   b66b4:	9301      	str	r3, [sp, #4]
   b66b6:	bd08      	pop	{r3, pc}
   b66b8:	00030278 	.word	0x00030278

000b66bc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b66bc:	b508      	push	{r3, lr}
   b66be:	4b02      	ldr	r3, [pc, #8]	; (b66c8 <hal_ble_gap_set_advertising_data+0xc>)
   b66c0:	681b      	ldr	r3, [r3, #0]
   b66c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b66c4:	9301      	str	r3, [sp, #4]
   b66c6:	bd08      	pop	{r3, pc}
   b66c8:	00030278 	.word	0x00030278

000b66cc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b66cc:	b508      	push	{r3, lr}
   b66ce:	4b02      	ldr	r3, [pc, #8]	; (b66d8 <hal_ble_gap_set_scan_response_data+0xc>)
   b66d0:	681b      	ldr	r3, [r3, #0]
   b66d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b66d4:	9301      	str	r3, [sp, #4]
   b66d6:	bd08      	pop	{r3, pc}
   b66d8:	00030278 	.word	0x00030278

000b66dc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b66dc:	b508      	push	{r3, lr}
   b66de:	4b02      	ldr	r3, [pc, #8]	; (b66e8 <hal_ble_gap_start_advertising+0xc>)
   b66e0:	681b      	ldr	r3, [r3, #0]
   b66e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b66e4:	9301      	str	r3, [sp, #4]
   b66e6:	bd08      	pop	{r3, pc}
   b66e8:	00030278 	.word	0x00030278

000b66ec <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b66ec:	b508      	push	{r3, lr}
   b66ee:	4b03      	ldr	r3, [pc, #12]	; (b66fc <hal_ble_gap_disconnect+0x10>)
   b66f0:	681b      	ldr	r3, [r3, #0]
   b66f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b66f6:	9301      	str	r3, [sp, #4]
   b66f8:	bd08      	pop	{r3, pc}
   b66fa:	0000      	.short	0x0000
   b66fc:	00030278 	.word	0x00030278

000b6700 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6700:	b508      	push	{r3, lr}
   b6702:	4b03      	ldr	r3, [pc, #12]	; (b6710 <hal_ble_gatt_server_add_service+0x10>)
   b6704:	681b      	ldr	r3, [r3, #0]
   b6706:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b670a:	9301      	str	r3, [sp, #4]
   b670c:	bd08      	pop	{r3, pc}
   b670e:	0000      	.short	0x0000
   b6710:	00030278 	.word	0x00030278

000b6714 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6714:	b508      	push	{r3, lr}
   b6716:	4b03      	ldr	r3, [pc, #12]	; (b6724 <hal_ble_gatt_server_add_characteristic+0x10>)
   b6718:	681b      	ldr	r3, [r3, #0]
   b671a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b671e:	9301      	str	r3, [sp, #4]
   b6720:	bd08      	pop	{r3, pc}
   b6722:	0000      	.short	0x0000
   b6724:	00030278 	.word	0x00030278

000b6728 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6728:	b508      	push	{r3, lr}
   b672a:	4b03      	ldr	r3, [pc, #12]	; (b6738 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b672c:	681b      	ldr	r3, [r3, #0]
   b672e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6732:	9301      	str	r3, [sp, #4]
   b6734:	bd08      	pop	{r3, pc}
   b6736:	0000      	.short	0x0000
   b6738:	00030278 	.word	0x00030278

000b673c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b673c:	b508      	push	{r3, lr}
   b673e:	4b02      	ldr	r3, [pc, #8]	; (b6748 <os_thread_yield+0xc>)
   b6740:	681b      	ldr	r3, [r3, #0]
   b6742:	68db      	ldr	r3, [r3, #12]
   b6744:	9301      	str	r3, [sp, #4]
   b6746:	bd08      	pop	{r3, pc}
   b6748:	00030248 	.word	0x00030248

000b674c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b674c:	b508      	push	{r3, lr}
   b674e:	4b02      	ldr	r3, [pc, #8]	; (b6758 <os_thread_scheduling+0xc>)
   b6750:	681b      	ldr	r3, [r3, #0]
   b6752:	69db      	ldr	r3, [r3, #28]
   b6754:	9301      	str	r3, [sp, #4]
   b6756:	bd08      	pop	{r3, pc}
   b6758:	00030248 	.word	0x00030248

000b675c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b675c:	b508      	push	{r3, lr}
   b675e:	4b02      	ldr	r3, [pc, #8]	; (b6768 <os_timer_create+0xc>)
   b6760:	681b      	ldr	r3, [r3, #0]
   b6762:	6a1b      	ldr	r3, [r3, #32]
   b6764:	9301      	str	r3, [sp, #4]
   b6766:	bd08      	pop	{r3, pc}
   b6768:	00030248 	.word	0x00030248

000b676c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b676c:	b508      	push	{r3, lr}
   b676e:	4b02      	ldr	r3, [pc, #8]	; (b6778 <os_timer_destroy+0xc>)
   b6770:	681b      	ldr	r3, [r3, #0]
   b6772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6774:	9301      	str	r3, [sp, #4]
   b6776:	bd08      	pop	{r3, pc}
   b6778:	00030248 	.word	0x00030248

000b677c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b677c:	b508      	push	{r3, lr}
   b677e:	4b02      	ldr	r3, [pc, #8]	; (b6788 <os_timer_get_id+0xc>)
   b6780:	681b      	ldr	r3, [r3, #0]
   b6782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6784:	9301      	str	r3, [sp, #4]
   b6786:	bd08      	pop	{r3, pc}
   b6788:	00030248 	.word	0x00030248

000b678c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b678c:	b508      	push	{r3, lr}
   b678e:	4b02      	ldr	r3, [pc, #8]	; (b6798 <os_timer_change+0xc>)
   b6790:	681b      	ldr	r3, [r3, #0]
   b6792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6794:	9301      	str	r3, [sp, #4]
   b6796:	bd08      	pop	{r3, pc}
   b6798:	00030248 	.word	0x00030248

000b679c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b679c:	b508      	push	{r3, lr}
   b679e:	4b02      	ldr	r3, [pc, #8]	; (b67a8 <os_mutex_create+0xc>)
   b67a0:	681b      	ldr	r3, [r3, #0]
   b67a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67a4:	9301      	str	r3, [sp, #4]
   b67a6:	bd08      	pop	{r3, pc}
   b67a8:	00030248 	.word	0x00030248

000b67ac <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b67ac:	b508      	push	{r3, lr}
   b67ae:	4b02      	ldr	r3, [pc, #8]	; (b67b8 <os_mutex_lock+0xc>)
   b67b0:	681b      	ldr	r3, [r3, #0]
   b67b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b67b4:	9301      	str	r3, [sp, #4]
   b67b6:	bd08      	pop	{r3, pc}
   b67b8:	00030248 	.word	0x00030248

000b67bc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b67bc:	b508      	push	{r3, lr}
   b67be:	4b02      	ldr	r3, [pc, #8]	; (b67c8 <os_mutex_unlock+0xc>)
   b67c0:	681b      	ldr	r3, [r3, #0]
   b67c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67c4:	9301      	str	r3, [sp, #4]
   b67c6:	bd08      	pop	{r3, pc}
   b67c8:	00030248 	.word	0x00030248

000b67cc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b67cc:	b508      	push	{r3, lr}
   b67ce:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <os_mutex_recursive_create+0xc>)
   b67d0:	681b      	ldr	r3, [r3, #0]
   b67d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b67d4:	9301      	str	r3, [sp, #4]
   b67d6:	bd08      	pop	{r3, pc}
   b67d8:	00030248 	.word	0x00030248

000b67dc <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b67dc:	b508      	push	{r3, lr}
   b67de:	4b02      	ldr	r3, [pc, #8]	; (b67e8 <os_mutex_recursive_lock+0xc>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b67e4:	9301      	str	r3, [sp, #4]
   b67e6:	bd08      	pop	{r3, pc}
   b67e8:	00030248 	.word	0x00030248

000b67ec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b02      	ldr	r3, [pc, #8]	; (b67f8 <os_mutex_recursive_unlock+0xc>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b67f4:	9301      	str	r3, [sp, #4]
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	00030248 	.word	0x00030248

000b67fc <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b67fc:	b508      	push	{r3, lr}
   b67fe:	4b02      	ldr	r3, [pc, #8]	; (b6808 <os_timer_set_id+0xc>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6804:	9301      	str	r3, [sp, #4]
   b6806:	bd08      	pop	{r3, pc}
   b6808:	00030248 	.word	0x00030248

000b680c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <inet_inet_ntop+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	695b      	ldr	r3, [r3, #20]
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	00030264 	.word	0x00030264

000b681c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <inet_htonl+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	6a1b      	ldr	r3, [r3, #32]
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	00030264 	.word	0x00030264

000b682c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b682c:	b508      	push	{r3, lr}
   b682e:	4b02      	ldr	r3, [pc, #8]	; (b6838 <inet_htons+0xc>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6834:	9301      	str	r3, [sp, #4]
   b6836:	bd08      	pop	{r3, pc}
   b6838:	00030264 	.word	0x00030264

000b683c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b683c:	b508      	push	{r3, lr}
   b683e:	4b02      	ldr	r3, [pc, #8]	; (b6848 <hal_usart_write+0xc>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	68db      	ldr	r3, [r3, #12]
   b6844:	9301      	str	r3, [sp, #4]
   b6846:	bd08      	pop	{r3, pc}
   b6848:	0003023c 	.word	0x0003023c

000b684c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b684c:	b508      	push	{r3, lr}
   b684e:	4b02      	ldr	r3, [pc, #8]	; (b6858 <hal_usart_available+0xc>)
   b6850:	681b      	ldr	r3, [r3, #0]
   b6852:	691b      	ldr	r3, [r3, #16]
   b6854:	9301      	str	r3, [sp, #4]
   b6856:	bd08      	pop	{r3, pc}
   b6858:	0003023c 	.word	0x0003023c

000b685c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b685c:	b508      	push	{r3, lr}
   b685e:	4b02      	ldr	r3, [pc, #8]	; (b6868 <hal_usart_read+0xc>)
   b6860:	681b      	ldr	r3, [r3, #0]
   b6862:	695b      	ldr	r3, [r3, #20]
   b6864:	9301      	str	r3, [sp, #4]
   b6866:	bd08      	pop	{r3, pc}
   b6868:	0003023c 	.word	0x0003023c

000b686c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b686c:	b508      	push	{r3, lr}
   b686e:	4b02      	ldr	r3, [pc, #8]	; (b6878 <hal_usart_peek+0xc>)
   b6870:	681b      	ldr	r3, [r3, #0]
   b6872:	699b      	ldr	r3, [r3, #24]
   b6874:	9301      	str	r3, [sp, #4]
   b6876:	bd08      	pop	{r3, pc}
   b6878:	0003023c 	.word	0x0003023c

000b687c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b687c:	b508      	push	{r3, lr}
   b687e:	4b02      	ldr	r3, [pc, #8]	; (b6888 <hal_usart_flush+0xc>)
   b6880:	681b      	ldr	r3, [r3, #0]
   b6882:	69db      	ldr	r3, [r3, #28]
   b6884:	9301      	str	r3, [sp, #4]
   b6886:	bd08      	pop	{r3, pc}
   b6888:	0003023c 	.word	0x0003023c

000b688c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b688c:	b508      	push	{r3, lr}
   b688e:	4b02      	ldr	r3, [pc, #8]	; (b6898 <hal_usart_is_enabled+0xc>)
   b6890:	681b      	ldr	r3, [r3, #0]
   b6892:	6a1b      	ldr	r3, [r3, #32]
   b6894:	9301      	str	r3, [sp, #4]
   b6896:	bd08      	pop	{r3, pc}
   b6898:	0003023c 	.word	0x0003023c

000b689c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b689c:	b508      	push	{r3, lr}
   b689e:	4b02      	ldr	r3, [pc, #8]	; (b68a8 <hal_usart_available_data_for_write+0xc>)
   b68a0:	681b      	ldr	r3, [r3, #0]
   b68a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b68a4:	9301      	str	r3, [sp, #4]
   b68a6:	bd08      	pop	{r3, pc}
   b68a8:	0003023c 	.word	0x0003023c

000b68ac <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b68ac:	b508      	push	{r3, lr}
   b68ae:	4b02      	ldr	r3, [pc, #8]	; (b68b8 <hal_usart_init_ex+0xc>)
   b68b0:	681b      	ldr	r3, [r3, #0]
   b68b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b68b4:	9301      	str	r3, [sp, #4]
   b68b6:	bd08      	pop	{r3, pc}
   b68b8:	0003023c 	.word	0x0003023c

000b68bc <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b68bc:	b508      	push	{r3, lr}
   b68be:	4b02      	ldr	r3, [pc, #8]	; (b68c8 <hal_i2c_write+0xc>)
   b68c0:	681b      	ldr	r3, [r3, #0]
   b68c2:	6a1b      	ldr	r3, [r3, #32]
   b68c4:	9301      	str	r3, [sp, #4]
   b68c6:	bd08      	pop	{r3, pc}
   b68c8:	00030228 	.word	0x00030228

000b68cc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b68cc:	b508      	push	{r3, lr}
   b68ce:	4b02      	ldr	r3, [pc, #8]	; (b68d8 <hal_i2c_available+0xc>)
   b68d0:	681b      	ldr	r3, [r3, #0]
   b68d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b68d4:	9301      	str	r3, [sp, #4]
   b68d6:	bd08      	pop	{r3, pc}
   b68d8:	00030228 	.word	0x00030228

000b68dc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b68dc:	b508      	push	{r3, lr}
   b68de:	4b02      	ldr	r3, [pc, #8]	; (b68e8 <hal_i2c_read+0xc>)
   b68e0:	681b      	ldr	r3, [r3, #0]
   b68e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b68e4:	9301      	str	r3, [sp, #4]
   b68e6:	bd08      	pop	{r3, pc}
   b68e8:	00030228 	.word	0x00030228

000b68ec <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b68ec:	b508      	push	{r3, lr}
   b68ee:	4b02      	ldr	r3, [pc, #8]	; (b68f8 <hal_i2c_peek+0xc>)
   b68f0:	681b      	ldr	r3, [r3, #0]
   b68f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b68f4:	9301      	str	r3, [sp, #4]
   b68f6:	bd08      	pop	{r3, pc}
   b68f8:	00030228 	.word	0x00030228

000b68fc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b68fc:	b508      	push	{r3, lr}
   b68fe:	4b02      	ldr	r3, [pc, #8]	; (b6908 <hal_i2c_flush+0xc>)
   b6900:	681b      	ldr	r3, [r3, #0]
   b6902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6904:	9301      	str	r3, [sp, #4]
   b6906:	bd08      	pop	{r3, pc}
   b6908:	00030228 	.word	0x00030228

000b690c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b690c:	b508      	push	{r3, lr}
   b690e:	4b02      	ldr	r3, [pc, #8]	; (b6918 <hal_i2c_is_enabled+0xc>)
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6914:	9301      	str	r3, [sp, #4]
   b6916:	bd08      	pop	{r3, pc}
   b6918:	00030228 	.word	0x00030228

000b691c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b691c:	b508      	push	{r3, lr}
   b691e:	4b02      	ldr	r3, [pc, #8]	; (b6928 <hal_i2c_init+0xc>)
   b6920:	681b      	ldr	r3, [r3, #0]
   b6922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6924:	9301      	str	r3, [sp, #4]
   b6926:	bd08      	pop	{r3, pc}
   b6928:	00030228 	.word	0x00030228

000b692c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b692c:	b508      	push	{r3, lr}
   b692e:	4b02      	ldr	r3, [pc, #8]	; (b6938 <sock_setsockopt+0xc>)
   b6930:	681b      	ldr	r3, [r3, #0]
   b6932:	699b      	ldr	r3, [r3, #24]
   b6934:	9301      	str	r3, [sp, #4]
   b6936:	bd08      	pop	{r3, pc}
   b6938:	00030238 	.word	0x00030238

000b693c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b693c:	b508      	push	{r3, lr}
   b693e:	4b02      	ldr	r3, [pc, #8]	; (b6948 <sock_close+0xc>)
   b6940:	681b      	ldr	r3, [r3, #0]
   b6942:	69db      	ldr	r3, [r3, #28]
   b6944:	9301      	str	r3, [sp, #4]
   b6946:	bd08      	pop	{r3, pc}
   b6948:	00030238 	.word	0x00030238

000b694c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b694c:	b508      	push	{r3, lr}
   b694e:	4b02      	ldr	r3, [pc, #8]	; (b6958 <sock_connect+0xc>)
   b6950:	681b      	ldr	r3, [r3, #0]
   b6952:	6a1b      	ldr	r3, [r3, #32]
   b6954:	9301      	str	r3, [sp, #4]
   b6956:	bd08      	pop	{r3, pc}
   b6958:	00030238 	.word	0x00030238

000b695c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b695c:	b508      	push	{r3, lr}
   b695e:	4b02      	ldr	r3, [pc, #8]	; (b6968 <sock_recv+0xc>)
   b6960:	681b      	ldr	r3, [r3, #0]
   b6962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6964:	9301      	str	r3, [sp, #4]
   b6966:	bd08      	pop	{r3, pc}
   b6968:	00030238 	.word	0x00030238

000b696c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b696c:	b508      	push	{r3, lr}
   b696e:	4b02      	ldr	r3, [pc, #8]	; (b6978 <sock_send+0xc>)
   b6970:	681b      	ldr	r3, [r3, #0]
   b6972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6974:	9301      	str	r3, [sp, #4]
   b6976:	bd08      	pop	{r3, pc}
   b6978:	00030238 	.word	0x00030238

000b697c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b697c:	b508      	push	{r3, lr}
   b697e:	4b02      	ldr	r3, [pc, #8]	; (b6988 <sock_socket+0xc>)
   b6980:	681b      	ldr	r3, [r3, #0]
   b6982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6984:	9301      	str	r3, [sp, #4]
   b6986:	bd08      	pop	{r3, pc}
   b6988:	00030238 	.word	0x00030238

000b698c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b698c:	b508      	push	{r3, lr}
   b698e:	4b02      	ldr	r3, [pc, #8]	; (b6998 <hal_spi_init+0xc>)
   b6990:	681b      	ldr	r3, [r3, #0]
   b6992:	69db      	ldr	r3, [r3, #28]
   b6994:	9301      	str	r3, [sp, #4]
   b6996:	bd08      	pop	{r3, pc}
   b6998:	00030230 	.word	0x00030230

000b699c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b699c:	b508      	push	{r3, lr}
   b699e:	4b02      	ldr	r3, [pc, #8]	; (b69a8 <hal_spi_is_enabled+0xc>)
   b69a0:	681b      	ldr	r3, [r3, #0]
   b69a2:	6a1b      	ldr	r3, [r3, #32]
   b69a4:	9301      	str	r3, [sp, #4]
   b69a6:	bd08      	pop	{r3, pc}
   b69a8:	00030230 	.word	0x00030230

000b69ac <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b69ac:	b508      	push	{r3, lr}
   b69ae:	4b02      	ldr	r3, [pc, #8]	; (b69b8 <HAL_USB_USART_Init+0xc>)
   b69b0:	681b      	ldr	r3, [r3, #0]
   b69b2:	681b      	ldr	r3, [r3, #0]
   b69b4:	9301      	str	r3, [sp, #4]
   b69b6:	bd08      	pop	{r3, pc}
   b69b8:	0003024c 	.word	0x0003024c

000b69bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b69bc:	b508      	push	{r3, lr}
   b69be:	4b02      	ldr	r3, [pc, #8]	; (b69c8 <HAL_USB_USART_Available_Data+0xc>)
   b69c0:	681b      	ldr	r3, [r3, #0]
   b69c2:	691b      	ldr	r3, [r3, #16]
   b69c4:	9301      	str	r3, [sp, #4]
   b69c6:	bd08      	pop	{r3, pc}
   b69c8:	0003024c 	.word	0x0003024c

000b69cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b69cc:	b508      	push	{r3, lr}
   b69ce:	4b02      	ldr	r3, [pc, #8]	; (b69d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b69d0:	681b      	ldr	r3, [r3, #0]
   b69d2:	695b      	ldr	r3, [r3, #20]
   b69d4:	9301      	str	r3, [sp, #4]
   b69d6:	bd08      	pop	{r3, pc}
   b69d8:	0003024c 	.word	0x0003024c

000b69dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b69dc:	b508      	push	{r3, lr}
   b69de:	4b02      	ldr	r3, [pc, #8]	; (b69e8 <HAL_USB_USART_Receive_Data+0xc>)
   b69e0:	681b      	ldr	r3, [r3, #0]
   b69e2:	699b      	ldr	r3, [r3, #24]
   b69e4:	9301      	str	r3, [sp, #4]
   b69e6:	bd08      	pop	{r3, pc}
   b69e8:	0003024c 	.word	0x0003024c

000b69ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b69ec:	b508      	push	{r3, lr}
   b69ee:	4b02      	ldr	r3, [pc, #8]	; (b69f8 <HAL_USB_USART_Send_Data+0xc>)
   b69f0:	681b      	ldr	r3, [r3, #0]
   b69f2:	69db      	ldr	r3, [r3, #28]
   b69f4:	9301      	str	r3, [sp, #4]
   b69f6:	bd08      	pop	{r3, pc}
   b69f8:	0003024c 	.word	0x0003024c

000b69fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b69fc:	b508      	push	{r3, lr}
   b69fe:	4b02      	ldr	r3, [pc, #8]	; (b6a08 <HAL_USB_USART_Flush_Data+0xc>)
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	6a1b      	ldr	r3, [r3, #32]
   b6a04:	9301      	str	r3, [sp, #4]
   b6a06:	bd08      	pop	{r3, pc}
   b6a08:	0003024c 	.word	0x0003024c

000b6a0c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6a0c:	b508      	push	{r3, lr}
   b6a0e:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <panic_+0xc>)
   b6a10:	681b      	ldr	r3, [r3, #0]
   b6a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a14:	9301      	str	r3, [sp, #4]
   b6a16:	bd08      	pop	{r3, pc}
   b6a18:	00030260 	.word	0x00030260

000b6a1c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6a1c:	b508      	push	{r3, lr}
   b6a1e:	4b02      	ldr	r3, [pc, #8]	; (b6a28 <log_message+0xc>)
   b6a20:	681b      	ldr	r3, [r3, #0]
   b6a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6a24:	9301      	str	r3, [sp, #4]
   b6a26:	bd08      	pop	{r3, pc}
   b6a28:	00030260 	.word	0x00030260

000b6a2c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6a2c:	b508      	push	{r3, lr}
   b6a2e:	4b02      	ldr	r3, [pc, #8]	; (b6a38 <system_mode+0xc>)
   b6a30:	681b      	ldr	r3, [r3, #0]
   b6a32:	681b      	ldr	r3, [r3, #0]
   b6a34:	9301      	str	r3, [sp, #4]
   b6a36:	bd08      	pop	{r3, pc}
   b6a38:	00030220 	.word	0x00030220

000b6a3c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6a3c:	b508      	push	{r3, lr}
   b6a3e:	4b02      	ldr	r3, [pc, #8]	; (b6a48 <set_system_mode+0xc>)
   b6a40:	681b      	ldr	r3, [r3, #0]
   b6a42:	685b      	ldr	r3, [r3, #4]
   b6a44:	9301      	str	r3, [sp, #4]
   b6a46:	bd08      	pop	{r3, pc}
   b6a48:	00030220 	.word	0x00030220

000b6a4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6a4c:	b508      	push	{r3, lr}
   b6a4e:	4b02      	ldr	r3, [pc, #8]	; (b6a58 <system_delay_ms+0xc>)
   b6a50:	681b      	ldr	r3, [r3, #0]
   b6a52:	695b      	ldr	r3, [r3, #20]
   b6a54:	9301      	str	r3, [sp, #4]
   b6a56:	bd08      	pop	{r3, pc}
   b6a58:	00030220 	.word	0x00030220

000b6a5c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6a5c:	b508      	push	{r3, lr}
   b6a5e:	4b02      	ldr	r3, [pc, #8]	; (b6a68 <system_thread_set_state+0xc>)
   b6a60:	681b      	ldr	r3, [r3, #0]
   b6a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a64:	9301      	str	r3, [sp, #4]
   b6a66:	bd08      	pop	{r3, pc}
   b6a68:	00030220 	.word	0x00030220

000b6a6c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6a6c:	b508      	push	{r3, lr}
   b6a6e:	4b02      	ldr	r3, [pc, #8]	; (b6a78 <application_thread_current+0xc>)
   b6a70:	681b      	ldr	r3, [r3, #0]
   b6a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6a74:	9301      	str	r3, [sp, #4]
   b6a76:	bd08      	pop	{r3, pc}
   b6a78:	00030220 	.word	0x00030220

000b6a7c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6a7c:	b508      	push	{r3, lr}
   b6a7e:	4b02      	ldr	r3, [pc, #8]	; (b6a88 <application_thread_invoke+0xc>)
   b6a80:	681b      	ldr	r3, [r3, #0]
   b6a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6a84:	9301      	str	r3, [sp, #4]
   b6a86:	bd08      	pop	{r3, pc}
   b6a88:	00030220 	.word	0x00030220

000b6a8c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6a8c:	b508      	push	{r3, lr}
   b6a8e:	4b02      	ldr	r3, [pc, #8]	; (b6a98 <system_thread_get_state+0xc>)
   b6a90:	681b      	ldr	r3, [r3, #0]
   b6a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6a94:	9301      	str	r3, [sp, #4]
   b6a96:	bd08      	pop	{r3, pc}
   b6a98:	00030220 	.word	0x00030220

000b6a9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6a9c:	b508      	push	{r3, lr}
   b6a9e:	4b03      	ldr	r3, [pc, #12]	; (b6aac <system_ctrl_set_app_request_handler+0x10>)
   b6aa0:	681b      	ldr	r3, [r3, #0]
   b6aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6aa6:	9301      	str	r3, [sp, #4]
   b6aa8:	bd08      	pop	{r3, pc}
   b6aaa:	0000      	.short	0x0000
   b6aac:	00030220 	.word	0x00030220

000b6ab0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b03      	ldr	r3, [pc, #12]	; (b6ac0 <system_ctrl_set_result+0x10>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6aba:	9301      	str	r3, [sp, #4]
   b6abc:	bd08      	pop	{r3, pc}
   b6abe:	0000      	.short	0x0000
   b6ac0:	00030220 	.word	0x00030220

000b6ac4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6ac4:	b508      	push	{r3, lr}
   b6ac6:	4b02      	ldr	r3, [pc, #8]	; (b6ad0 <network_connect+0xc>)
   b6ac8:	681b      	ldr	r3, [r3, #0]
   b6aca:	685b      	ldr	r3, [r3, #4]
   b6acc:	9301      	str	r3, [sp, #4]
   b6ace:	bd08      	pop	{r3, pc}
   b6ad0:	00030240 	.word	0x00030240

000b6ad4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6ad4:	b508      	push	{r3, lr}
   b6ad6:	4b02      	ldr	r3, [pc, #8]	; (b6ae0 <network_connecting+0xc>)
   b6ad8:	681b      	ldr	r3, [r3, #0]
   b6ada:	689b      	ldr	r3, [r3, #8]
   b6adc:	9301      	str	r3, [sp, #4]
   b6ade:	bd08      	pop	{r3, pc}
   b6ae0:	00030240 	.word	0x00030240

000b6ae4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6ae4:	b508      	push	{r3, lr}
   b6ae6:	4b02      	ldr	r3, [pc, #8]	; (b6af0 <network_disconnect+0xc>)
   b6ae8:	681b      	ldr	r3, [r3, #0]
   b6aea:	68db      	ldr	r3, [r3, #12]
   b6aec:	9301      	str	r3, [sp, #4]
   b6aee:	bd08      	pop	{r3, pc}
   b6af0:	00030240 	.word	0x00030240

000b6af4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6af4:	b508      	push	{r3, lr}
   b6af6:	4b02      	ldr	r3, [pc, #8]	; (b6b00 <network_ready+0xc>)
   b6af8:	681b      	ldr	r3, [r3, #0]
   b6afa:	691b      	ldr	r3, [r3, #16]
   b6afc:	9301      	str	r3, [sp, #4]
   b6afe:	bd08      	pop	{r3, pc}
   b6b00:	00030240 	.word	0x00030240

000b6b04 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b04:	b508      	push	{r3, lr}
   b6b06:	4b02      	ldr	r3, [pc, #8]	; (b6b10 <network_on+0xc>)
   b6b08:	681b      	ldr	r3, [r3, #0]
   b6b0a:	695b      	ldr	r3, [r3, #20]
   b6b0c:	9301      	str	r3, [sp, #4]
   b6b0e:	bd08      	pop	{r3, pc}
   b6b10:	00030240 	.word	0x00030240

000b6b14 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b14:	b508      	push	{r3, lr}
   b6b16:	4b02      	ldr	r3, [pc, #8]	; (b6b20 <network_off+0xc>)
   b6b18:	681b      	ldr	r3, [r3, #0]
   b6b1a:	699b      	ldr	r3, [r3, #24]
   b6b1c:	9301      	str	r3, [sp, #4]
   b6b1e:	bd08      	pop	{r3, pc}
   b6b20:	00030240 	.word	0x00030240

000b6b24 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6b24:	b508      	push	{r3, lr}
   b6b26:	4b02      	ldr	r3, [pc, #8]	; (b6b30 <network_listen+0xc>)
   b6b28:	681b      	ldr	r3, [r3, #0]
   b6b2a:	69db      	ldr	r3, [r3, #28]
   b6b2c:	9301      	str	r3, [sp, #4]
   b6b2e:	bd08      	pop	{r3, pc}
   b6b30:	00030240 	.word	0x00030240

000b6b34 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6b34:	b508      	push	{r3, lr}
   b6b36:	4b02      	ldr	r3, [pc, #8]	; (b6b40 <network_listening+0xc>)
   b6b38:	681b      	ldr	r3, [r3, #0]
   b6b3a:	6a1b      	ldr	r3, [r3, #32]
   b6b3c:	9301      	str	r3, [sp, #4]
   b6b3e:	bd08      	pop	{r3, pc}
   b6b40:	00030240 	.word	0x00030240

000b6b44 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6b44:	b508      	push	{r3, lr}
   b6b46:	4b02      	ldr	r3, [pc, #8]	; (b6b50 <network_set_listen_timeout+0xc>)
   b6b48:	681b      	ldr	r3, [r3, #0]
   b6b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b4c:	9301      	str	r3, [sp, #4]
   b6b4e:	bd08      	pop	{r3, pc}
   b6b50:	00030240 	.word	0x00030240

000b6b54 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6b54:	b508      	push	{r3, lr}
   b6b56:	4b02      	ldr	r3, [pc, #8]	; (b6b60 <network_get_listen_timeout+0xc>)
   b6b58:	681b      	ldr	r3, [r3, #0]
   b6b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b5c:	9301      	str	r3, [sp, #4]
   b6b5e:	bd08      	pop	{r3, pc}
   b6b60:	00030240 	.word	0x00030240

000b6b64 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6b64:	b508      	push	{r3, lr}
   b6b66:	4b02      	ldr	r3, [pc, #8]	; (b6b70 <network_is_on+0xc>)
   b6b68:	681b      	ldr	r3, [r3, #0]
   b6b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b6c:	9301      	str	r3, [sp, #4]
   b6b6e:	bd08      	pop	{r3, pc}
   b6b70:	00030240 	.word	0x00030240

000b6b74 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6b74:	b508      	push	{r3, lr}
   b6b76:	4b02      	ldr	r3, [pc, #8]	; (b6b80 <network_is_off+0xc>)
   b6b78:	681b      	ldr	r3, [r3, #0]
   b6b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6b7c:	9301      	str	r3, [sp, #4]
   b6b7e:	bd08      	pop	{r3, pc}
   b6b80:	00030240 	.word	0x00030240

000b6b84 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6b84:	b508      	push	{r3, lr}
   b6b86:	4b02      	ldr	r3, [pc, #8]	; (b6b90 <spark_process+0xc>)
   b6b88:	681b      	ldr	r3, [r3, #0]
   b6b8a:	689b      	ldr	r3, [r3, #8]
   b6b8c:	9301      	str	r3, [sp, #4]
   b6b8e:	bd08      	pop	{r3, pc}
   b6b90:	00030244 	.word	0x00030244

000b6b94 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6b94:	b508      	push	{r3, lr}
   b6b96:	4b02      	ldr	r3, [pc, #8]	; (b6ba0 <spark_cloud_flag_connected+0xc>)
   b6b98:	681b      	ldr	r3, [r3, #0]
   b6b9a:	695b      	ldr	r3, [r3, #20]
   b6b9c:	9301      	str	r3, [sp, #4]
   b6b9e:	bd08      	pop	{r3, pc}
   b6ba0:	00030244 	.word	0x00030244

000b6ba4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6ba4:	b508      	push	{r3, lr}
   b6ba6:	4b02      	ldr	r3, [pc, #8]	; (b6bb0 <spark_send_event+0xc>)
   b6ba8:	681b      	ldr	r3, [r3, #0]
   b6baa:	6a1b      	ldr	r3, [r3, #32]
   b6bac:	9301      	str	r3, [sp, #4]
   b6bae:	bd08      	pop	{r3, pc}
   b6bb0:	00030244 	.word	0x00030244

000b6bb4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6bb4:	b508      	push	{r3, lr}
   b6bb6:	4b02      	ldr	r3, [pc, #8]	; (b6bc0 <spark_subscribe+0xc>)
   b6bb8:	681b      	ldr	r3, [r3, #0]
   b6bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6bbc:	9301      	str	r3, [sp, #4]
   b6bbe:	bd08      	pop	{r3, pc}
   b6bc0:	00030244 	.word	0x00030244

000b6bc4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6bc4:	b508      	push	{r3, lr}
   b6bc6:	4b02      	ldr	r3, [pc, #8]	; (b6bd0 <spark_sync_time_pending+0xc>)
   b6bc8:	681b      	ldr	r3, [r3, #0]
   b6bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6bcc:	9301      	str	r3, [sp, #4]
   b6bce:	bd08      	pop	{r3, pc}
   b6bd0:	00030244 	.word	0x00030244

000b6bd4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6bd4:	b508      	push	{r3, lr}
   b6bd6:	4b02      	ldr	r3, [pc, #8]	; (b6be0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6bd8:	681b      	ldr	r3, [r3, #0]
   b6bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6bdc:	9301      	str	r3, [sp, #4]
   b6bde:	bd08      	pop	{r3, pc}
   b6be0:	00030244 	.word	0x00030244

000b6be4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6be4:	b508      	push	{r3, lr}
   b6be6:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <malloc+0xc>)
   b6be8:	681b      	ldr	r3, [r3, #0]
   b6bea:	681b      	ldr	r3, [r3, #0]
   b6bec:	9301      	str	r3, [sp, #4]
   b6bee:	bd08      	pop	{r3, pc}
   b6bf0:	0003021c 	.word	0x0003021c

000b6bf4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <free+0xc>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	685b      	ldr	r3, [r3, #4]
   b6bfc:	9301      	str	r3, [sp, #4]
   b6bfe:	bd08      	pop	{r3, pc}
   b6c00:	0003021c 	.word	0x0003021c

000b6c04 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6c04:	b508      	push	{r3, lr}
   b6c06:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <realloc+0xc>)
   b6c08:	681b      	ldr	r3, [r3, #0]
   b6c0a:	689b      	ldr	r3, [r3, #8]
   b6c0c:	9301      	str	r3, [sp, #4]
   b6c0e:	bd08      	pop	{r3, pc}
   b6c10:	0003021c 	.word	0x0003021c

000b6c14 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b6c14:	b508      	push	{r3, lr}
   b6c16:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <siprintf+0xc>)
   b6c18:	681b      	ldr	r3, [r3, #0]
   b6c1a:	691b      	ldr	r3, [r3, #16]
   b6c1c:	9301      	str	r3, [sp, #4]
   b6c1e:	bd08      	pop	{r3, pc}
   b6c20:	0003021c 	.word	0x0003021c

000b6c24 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <vsnprintf+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	0003021c 	.word	0x0003021c

000b6c34 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b02      	ldr	r3, [pc, #8]	; (b6c40 <abort+0xc>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c3c:	9301      	str	r3, [sp, #4]
   b6c3e:	bd08      	pop	{r3, pc}
   b6c40:	0003021c 	.word	0x0003021c

000b6c44 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6c44:	b508      	push	{r3, lr}
   b6c46:	4b02      	ldr	r3, [pc, #8]	; (b6c50 <_malloc_r+0xc>)
   b6c48:	681b      	ldr	r3, [r3, #0]
   b6c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c4c:	9301      	str	r3, [sp, #4]
   b6c4e:	bd08      	pop	{r3, pc}
   b6c50:	0003021c 	.word	0x0003021c

000b6c54 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6c54:	b508      	push	{r3, lr}
   b6c56:	4b02      	ldr	r3, [pc, #8]	; (b6c60 <__errno+0xc>)
   b6c58:	681b      	ldr	r3, [r3, #0]
   b6c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6c5c:	9301      	str	r3, [sp, #4]
   b6c5e:	bd08      	pop	{r3, pc}
   b6c60:	0003021c 	.word	0x0003021c

000b6c64 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6c64:	b508      	push	{r3, lr}
   b6c66:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <__assert_func+0xc>)
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c6c:	9301      	str	r3, [sp, #4]
   b6c6e:	bd08      	pop	{r3, pc}
   b6c70:	0003021c 	.word	0x0003021c

000b6c74 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6c74:	b508      	push	{r3, lr}
   b6c76:	4b02      	ldr	r3, [pc, #8]	; (b6c80 <newlib_impure_ptr_callback+0xc>)
   b6c78:	681b      	ldr	r3, [r3, #0]
   b6c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c7c:	9301      	str	r3, [sp, #4]
   b6c7e:	bd08      	pop	{r3, pc}
   b6c80:	0003021c 	.word	0x0003021c

000b6c84 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6c84:	b508      	push	{r3, lr}
   b6c86:	4b02      	ldr	r3, [pc, #8]	; (b6c90 <localtime_r+0xc>)
   b6c88:	681b      	ldr	r3, [r3, #0]
   b6c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6c8c:	9301      	str	r3, [sp, #4]
   b6c8e:	bd08      	pop	{r3, pc}
   b6c90:	0003021c 	.word	0x0003021c

000b6c94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6c94:	2200      	movs	r2, #0
   b6c96:	6840      	ldr	r0, [r0, #4]
   b6c98:	4611      	mov	r1, r2
   b6c9a:	f7ff bf4b 	b.w	b6b34 <network_listening>

000b6c9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6c9e:	2200      	movs	r2, #0
   b6ca0:	6840      	ldr	r0, [r0, #4]
   b6ca2:	4611      	mov	r1, r2
   b6ca4:	f7ff bf56 	b.w	b6b54 <network_get_listen_timeout>

000b6ca8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6ca8:	6840      	ldr	r0, [r0, #4]
   b6caa:	2200      	movs	r2, #0
   b6cac:	f7ff bf4a 	b.w	b6b44 <network_set_listen_timeout>

000b6cb0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6cb0:	6840      	ldr	r0, [r0, #4]
   b6cb2:	2200      	movs	r2, #0
   b6cb4:	f081 0101 	eor.w	r1, r1, #1
   b6cb8:	f7ff bf34 	b.w	b6b24 <network_listen>

000b6cbc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6cbc:	2300      	movs	r3, #0
   b6cbe:	6840      	ldr	r0, [r0, #4]
   b6cc0:	461a      	mov	r2, r3
   b6cc2:	4619      	mov	r1, r3
   b6cc4:	f7ff bf26 	b.w	b6b14 <network_off>

000b6cc8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6cc8:	2300      	movs	r3, #0
   b6cca:	6840      	ldr	r0, [r0, #4]
   b6ccc:	461a      	mov	r2, r3
   b6cce:	4619      	mov	r1, r3
   b6cd0:	f7ff bf18 	b.w	b6b04 <network_on>

000b6cd4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6cd4:	2200      	movs	r2, #0
   b6cd6:	6840      	ldr	r0, [r0, #4]
   b6cd8:	4611      	mov	r1, r2
   b6cda:	f7ff bf0b 	b.w	b6af4 <network_ready>

000b6cde <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6cde:	2200      	movs	r2, #0
   b6ce0:	6840      	ldr	r0, [r0, #4]
   b6ce2:	4611      	mov	r1, r2
   b6ce4:	f7ff bef6 	b.w	b6ad4 <network_connecting>

000b6ce8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ce8:	6840      	ldr	r0, [r0, #4]
   b6cea:	2200      	movs	r2, #0
   b6cec:	2102      	movs	r1, #2
   b6cee:	f7ff bef9 	b.w	b6ae4 <network_disconnect>

000b6cf2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6cf2:	2300      	movs	r3, #0
   b6cf4:	6840      	ldr	r0, [r0, #4]
   b6cf6:	461a      	mov	r2, r3
   b6cf8:	f7ff bee4 	b.w	b6ac4 <network_connect>

000b6cfc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6cfc:	4b02      	ldr	r3, [pc, #8]	; (b6d08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6cfe:	2203      	movs	r2, #3
   b6d00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6d02:	4a02      	ldr	r2, [pc, #8]	; (b6d0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6d04:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6d06:	4770      	bx	lr
   b6d08:	2003e5e0 	.word	0x2003e5e0
   b6d0c:	000bc7d8 	.word	0x000bc7d8

000b6d10 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6d10:	b510      	push	{r4, lr}
   b6d12:	4604      	mov	r4, r0
   b6d14:	4608      	mov	r0, r1
{
    _spi = spi;
   b6d16:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6d18:	f7ff fe38 	bl	b698c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6d1c:	2300      	movs	r3, #0
   b6d1e:	6063      	str	r3, [r4, #4]
}
   b6d20:	4620      	mov	r0, r4
   b6d22:	bd10      	pop	{r4, pc}

000b6d24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6d24:	4b05      	ldr	r3, [pc, #20]	; (b6d3c <_GLOBAL__sub_I_System+0x18>)
   b6d26:	2202      	movs	r2, #2
   b6d28:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6d2a:	4b05      	ldr	r3, [pc, #20]	; (b6d40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6d2c:	4a05      	ldr	r2, [pc, #20]	; (b6d44 <_GLOBAL__sub_I_System+0x20>)
   b6d2e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6d30:	2000      	movs	r0, #0
   b6d32:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6d36:	f7ff be81 	b.w	b6a3c <set_system_mode>
   b6d3a:	bf00      	nop
   b6d3c:	2003e5f4 	.word	0x2003e5f4
   b6d40:	2003e5e8 	.word	0x2003e5e8
   b6d44:	ffff0000 	.word	0xffff0000

000b6d48 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6d48:	b510      	push	{r4, lr}
   b6d4a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6d4c:	f7fd fec2 	bl	b4ad4 <strlen>
   b6d50:	3801      	subs	r0, #1
   b6d52:	1823      	adds	r3, r4, r0
   b6d54:	4620      	mov	r0, r4
	while(i<j){
   b6d56:	4283      	cmp	r3, r0
   b6d58:	d906      	bls.n	b6d68 <_Z11str_reversePc+0x20>
		c = *i;
   b6d5a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6d5c:	7819      	ldrb	r1, [r3, #0]
   b6d5e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6d62:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6d66:	e7f6      	b.n	b6d56 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6d68:	bd10      	pop	{r4, pc}

000b6d6a <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b6d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b6d6e:	1e93      	subs	r3, r2, #2
{
   b6d70:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b6d72:	2b22      	cmp	r3, #34	; 0x22
   b6d74:	f04f 0300 	mov.w	r3, #0
{
   b6d78:	460d      	mov	r5, r1
   b6d7a:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b6d7c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b6d80:	d927      	bls.n	b6dd2 <ltoa+0x68>

      if (10 == base && N < 0L)
   b6d82:	2800      	cmp	r0, #0
   b6d84:	da2a      	bge.n	b6ddc <ltoa+0x72>
      {
            *head++ = '-';
   b6d86:	462e      	mov	r6, r5
   b6d88:	232d      	movs	r3, #45	; 0x2d
   b6d8a:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b6d8e:	4240      	negs	r0, r0
   b6d90:	240a      	movs	r4, #10
      *tail-- = '\0';
   b6d92:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b6d96:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b6d9a:	4622      	mov	r2, r4
   b6d9c:	4601      	mov	r1, r0
   b6d9e:	a801      	add	r0, sp, #4
   b6da0:	f003 fad8 	bl	ba354 <ldiv>
   b6da4:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b6da6:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b6da8:	2b09      	cmp	r3, #9
   b6daa:	bfcc      	ite	gt
   b6dac:	2237      	movgt	r2, #55	; 0x37
   b6dae:	2230      	movle	r2, #48	; 0x30
   b6db0:	fa52 f383 	uxtab	r3, r2, r3
   b6db4:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b6db8:	f108 0801 	add.w	r8, r8, #1
   b6dbc:	2800      	cmp	r0, #0
   b6dbe:	d1ec      	bne.n	b6d9a <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b6dc0:	4642      	mov	r2, r8
   b6dc2:	1c79      	adds	r1, r7, #1
   b6dc4:	4630      	mov	r0, r6
   b6dc6:	f003 fae9 	bl	ba39c <memcpy>
      return str;
}
   b6dca:	4628      	mov	r0, r5
   b6dcc:	b00c      	add	sp, #48	; 0x30
   b6dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b6dd2:	2a0a      	cmp	r2, #10
   b6dd4:	d0d5      	beq.n	b6d82 <ltoa+0x18>
      if (uarg)
   b6dd6:	b118      	cbz	r0, b6de0 <ltoa+0x76>
   b6dd8:	462e      	mov	r6, r5
   b6dda:	e7da      	b.n	b6d92 <ltoa+0x28>
   b6ddc:	240a      	movs	r4, #10
   b6dde:	e7fa      	b.n	b6dd6 <ltoa+0x6c>
      else  *tail-- = '0';
   b6de0:	2330      	movs	r3, #48	; 0x30
   b6de2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b6de6:	462e      	mov	r6, r5
   b6de8:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b6dec:	f04f 0802 	mov.w	r8, #2
   b6df0:	e7e6      	b.n	b6dc0 <ltoa+0x56>

000b6df2 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b6df2:	b570      	push	{r4, r5, r6, lr}
   b6df4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b6df6:	1e91      	subs	r1, r2, #2
   b6df8:	2922      	cmp	r1, #34	; 0x22
   b6dfa:	d81d      	bhi.n	b6e38 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6dfc:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6dfe:	b930      	cbnz	r0, b6e0e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6e00:	4423      	add	r3, r4
            *ptr++ = '0';
   b6e02:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6e04:	429d      	cmp	r5, r3
   b6e06:	d210      	bcs.n	b6e2a <ultoa+0x38>
            *ptr++ = '0';
   b6e08:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6e0c:	e7fa      	b.n	b6e04 <ultoa+0x12>
            result.quot = a/radix;
   b6e0e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b6e12:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6e16:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6e18:	2809      	cmp	r0, #9
                *ptr += '0';
   b6e1a:	bf94      	ite	ls
   b6e1c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b6e1e:	3157      	addhi	r1, #87	; 0x57
   b6e20:	b2c9      	uxtb	r1, r1
   b6e22:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6e26:	4630      	mov	r0, r6
	while(a){
   b6e28:	e7e9      	b.n	b6dfe <ultoa+0xc>

	*ptr = '\0';
   b6e2a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6e2c:	4620      	mov	r0, r4
	*ptr = '\0';
   b6e2e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6e30:	f7ff ff8a 	bl	b6d48 <_Z11str_reversePc>
	return buffer;
   b6e34:	4620      	mov	r0, r4
}
   b6e36:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6e38:	2000      	movs	r0, #0
   b6e3a:	e7fc      	b.n	b6e36 <ultoa+0x44>

000b6e3c <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b6e3c:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b6e3e:	2301      	movs	r3, #1
   b6e40:	f7ff ffd7 	bl	b6df2 <ultoa>
}
   b6e44:	bd08      	pop	{r3, pc}

000b6e46 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6e46:	b510      	push	{r4, lr}
   b6e48:	4604      	mov	r4, r0
{
	free(buffer);
   b6e4a:	6800      	ldr	r0, [r0, #0]
   b6e4c:	f7ff fed2 	bl	b6bf4 <free>
}
   b6e50:	4620      	mov	r0, r4
   b6e52:	bd10      	pop	{r4, pc}

000b6e54 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6e54:	b510      	push	{r4, lr}
   b6e56:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6e58:	6800      	ldr	r0, [r0, #0]
   b6e5a:	b108      	cbz	r0, b6e60 <_ZN6String10invalidateEv+0xc>
   b6e5c:	f7ff feca 	bl	b6bf4 <free>
	buffer = NULL;
   b6e60:	2300      	movs	r3, #0
	capacity = len = 0;
   b6e62:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6e66:	6023      	str	r3, [r4, #0]
}
   b6e68:	bd10      	pop	{r4, pc}

000b6e6a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6e6a:	b538      	push	{r3, r4, r5, lr}
   b6e6c:	4604      	mov	r4, r0
   b6e6e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6e70:	6800      	ldr	r0, [r0, #0]
   b6e72:	3101      	adds	r1, #1
   b6e74:	f7ff fec6 	bl	b6c04 <realloc>
	if (newbuffer) {
   b6e78:	b110      	cbz	r0, b6e80 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6e7a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6e7e:	2001      	movs	r0, #1
	}
	return 0;
}
   b6e80:	bd38      	pop	{r3, r4, r5, pc}

000b6e82 <_ZN6String7reserveEj>:
{
   b6e82:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6e84:	6803      	ldr	r3, [r0, #0]
{
   b6e86:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6e88:	b123      	cbz	r3, b6e94 <_ZN6String7reserveEj+0x12>
   b6e8a:	6843      	ldr	r3, [r0, #4]
   b6e8c:	428b      	cmp	r3, r1
   b6e8e:	d301      	bcc.n	b6e94 <_ZN6String7reserveEj+0x12>
   b6e90:	2001      	movs	r0, #1
}
   b6e92:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6e94:	4620      	mov	r0, r4
   b6e96:	f7ff ffe8 	bl	b6e6a <_ZN6String12changeBufferEj>
   b6e9a:	2800      	cmp	r0, #0
   b6e9c:	d0f9      	beq.n	b6e92 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6e9e:	68a3      	ldr	r3, [r4, #8]
   b6ea0:	2b00      	cmp	r3, #0
   b6ea2:	d1f5      	bne.n	b6e90 <_ZN6String7reserveEj+0xe>
   b6ea4:	6822      	ldr	r2, [r4, #0]
   b6ea6:	7013      	strb	r3, [r2, #0]
   b6ea8:	e7f2      	b.n	b6e90 <_ZN6String7reserveEj+0xe>

000b6eaa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6eaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6eac:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6eae:	4611      	mov	r1, r2
   b6eb0:	9201      	str	r2, [sp, #4]
{
   b6eb2:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6eb4:	f7ff ffe5 	bl	b6e82 <_ZN6String7reserveEj>
   b6eb8:	9a01      	ldr	r2, [sp, #4]
   b6eba:	b928      	cbnz	r0, b6ec8 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	f7ff ffc9 	bl	b6e54 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6ec2:	4620      	mov	r0, r4
   b6ec4:	b003      	add	sp, #12
   b6ec6:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6ec8:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6eca:	4629      	mov	r1, r5
   b6ecc:	6820      	ldr	r0, [r4, #0]
   b6ece:	f003 fa65 	bl	ba39c <memcpy>
	buffer[len] = 0;
   b6ed2:	6822      	ldr	r2, [r4, #0]
   b6ed4:	68a3      	ldr	r3, [r4, #8]
   b6ed6:	2100      	movs	r1, #0
   b6ed8:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6eda:	e7f2      	b.n	b6ec2 <_ZN6String4copyEPKcj+0x18>

000b6edc <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6edc:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6ede:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6ee0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6ee4:	4604      	mov	r4, r0
	len = 0;
   b6ee6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6ee8:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6eea:	b141      	cbz	r1, b6efe <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6eec:	4608      	mov	r0, r1
   b6eee:	9101      	str	r1, [sp, #4]
   b6ef0:	f7fd fdf0 	bl	b4ad4 <strlen>
   b6ef4:	9901      	ldr	r1, [sp, #4]
   b6ef6:	4602      	mov	r2, r0
   b6ef8:	4620      	mov	r0, r4
   b6efa:	f7ff ffd6 	bl	b6eaa <_ZN6String4copyEPKcj>
}
   b6efe:	4620      	mov	r0, r4
   b6f00:	b002      	add	sp, #8
   b6f02:	bd10      	pop	{r4, pc}

000b6f04 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6f04:	4288      	cmp	r0, r1
{
   b6f06:	b510      	push	{r4, lr}
   b6f08:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6f0a:	d005      	beq.n	b6f18 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6f0c:	680b      	ldr	r3, [r1, #0]
   b6f0e:	b12b      	cbz	r3, b6f1c <_ZN6StringaSERKS_+0x18>
   b6f10:	688a      	ldr	r2, [r1, #8]
   b6f12:	4619      	mov	r1, r3
   b6f14:	f7ff ffc9 	bl	b6eaa <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6f18:	4620      	mov	r0, r4
   b6f1a:	bd10      	pop	{r4, pc}
	else invalidate();
   b6f1c:	f7ff ff9a 	bl	b6e54 <_ZN6String10invalidateEv>
   b6f20:	e7fa      	b.n	b6f18 <_ZN6StringaSERKS_+0x14>

000b6f22 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6f22:	b510      	push	{r4, lr}
	buffer = NULL;
   b6f24:	2300      	movs	r3, #0
String::String(const String &value)
   b6f26:	4604      	mov	r4, r0
	capacity = 0;
   b6f28:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6f2c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6f2e:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6f30:	f7ff ffe8 	bl	b6f04 <_ZN6StringaSERKS_>
}
   b6f34:	4620      	mov	r0, r4
   b6f36:	bd10      	pop	{r4, pc}

000b6f38 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6f38:	b513      	push	{r0, r1, r4, lr}
   b6f3a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6f3c:	b159      	cbz	r1, b6f56 <_ZN6StringaSEPKc+0x1e>
   b6f3e:	4608      	mov	r0, r1
   b6f40:	9101      	str	r1, [sp, #4]
   b6f42:	f7fd fdc7 	bl	b4ad4 <strlen>
   b6f46:	9901      	ldr	r1, [sp, #4]
   b6f48:	4602      	mov	r2, r0
   b6f4a:	4620      	mov	r0, r4
   b6f4c:	f7ff ffad 	bl	b6eaa <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6f50:	4620      	mov	r0, r4
   b6f52:	b002      	add	sp, #8
   b6f54:	bd10      	pop	{r4, pc}
	else invalidate();
   b6f56:	f7ff ff7d 	bl	b6e54 <_ZN6String10invalidateEv>
   b6f5a:	e7f9      	b.n	b6f50 <_ZN6StringaSEPKc+0x18>

000b6f5c <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b6f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6f5e:	4604      	mov	r4, r0
	buffer = NULL;
   b6f60:	2300      	movs	r3, #0
	capacity = 0;
   b6f62:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6f66:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6f68:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b6f6a:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b6f6c:	a901      	add	r1, sp, #4
   b6f6e:	f7ff ff65 	bl	b6e3c <utoa>
	*this = buf;
   b6f72:	a901      	add	r1, sp, #4
   b6f74:	4620      	mov	r0, r4
   b6f76:	f7ff ffdf 	bl	b6f38 <_ZN6StringaSEPKc>
}
   b6f7a:	4620      	mov	r0, r4
   b6f7c:	b004      	add	sp, #16
   b6f7e:	bd10      	pop	{r4, pc}

000b6f80 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b6f80:	b510      	push	{r4, lr}
   b6f82:	4604      	mov	r4, r0
   b6f84:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6f86:	2300      	movs	r3, #0
	capacity = 0;
   b6f88:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6f8c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6f8e:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b6f90:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b6f92:	a901      	add	r1, sp, #4
   b6f94:	f7ff fee9 	bl	b6d6a <ltoa>
	*this = buf;
   b6f98:	a901      	add	r1, sp, #4
   b6f9a:	4620      	mov	r0, r4
   b6f9c:	f7ff ffcc 	bl	b6f38 <_ZN6StringaSEPKc>
}
   b6fa0:	4620      	mov	r0, r4
   b6fa2:	b00a      	add	sp, #40	; 0x28
   b6fa4:	bd10      	pop	{r4, pc}

000b6fa6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6fa6:	b570      	push	{r4, r5, r6, lr}
   b6fa8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6faa:	460e      	mov	r6, r1
   b6fac:	b909      	cbnz	r1, b6fb2 <_ZN6String6concatEPKcj+0xc>
   b6fae:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6fb0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6fb2:	b16a      	cbz	r2, b6fd0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6fb4:	6884      	ldr	r4, [r0, #8]
   b6fb6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6fb8:	4621      	mov	r1, r4
   b6fba:	f7ff ff62 	bl	b6e82 <_ZN6String7reserveEj>
   b6fbe:	2800      	cmp	r0, #0
   b6fc0:	d0f5      	beq.n	b6fae <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6fc2:	6828      	ldr	r0, [r5, #0]
   b6fc4:	68ab      	ldr	r3, [r5, #8]
   b6fc6:	4631      	mov	r1, r6
   b6fc8:	4418      	add	r0, r3
   b6fca:	f003 fa45 	bl	ba458 <strcpy>
	len = newlen;
   b6fce:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6fd0:	2001      	movs	r0, #1
   b6fd2:	e7ed      	b.n	b6fb0 <_ZN6String6concatEPKcj+0xa>

000b6fd4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6fd4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6fd6:	688a      	ldr	r2, [r1, #8]
   b6fd8:	6809      	ldr	r1, [r1, #0]
{
   b6fda:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6fdc:	f7ff ffe3 	bl	b6fa6 <_ZN6String6concatEPKcj>
   b6fe0:	b910      	cbnz	r0, b6fe8 <_ZplRK15StringSumHelperRK6String+0x14>
   b6fe2:	4620      	mov	r0, r4
   b6fe4:	f7ff ff36 	bl	b6e54 <_ZN6String10invalidateEv>
	return a;
}
   b6fe8:	4620      	mov	r0, r4
   b6fea:	bd10      	pop	{r4, pc}

000b6fec <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6fec:	b40e      	push	{r1, r2, r3}
   b6fee:	b570      	push	{r4, r5, r6, lr}
   b6ff0:	b087      	sub	sp, #28
   b6ff2:	ad0b      	add	r5, sp, #44	; 0x2c
   b6ff4:	4604      	mov	r4, r0
   b6ff6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6ffa:	9201      	str	r2, [sp, #4]
   b6ffc:	462b      	mov	r3, r5
   b6ffe:	2105      	movs	r1, #5
   b7000:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b7002:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7004:	f7ff fe0e 	bl	b6c24 <vsnprintf>
    va_end(marker);

    String result;
   b7008:	490b      	ldr	r1, [pc, #44]	; (b7038 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b700a:	4606      	mov	r6, r0
    String result;
   b700c:	4620      	mov	r0, r4
   b700e:	f7ff ff65 	bl	b6edc <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b7012:	4631      	mov	r1, r6
   b7014:	4620      	mov	r0, r4
   b7016:	f7ff ff34 	bl	b6e82 <_ZN6String7reserveEj>
    if (result.buffer) {
   b701a:	6820      	ldr	r0, [r4, #0]
   b701c:	b130      	cbz	r0, b702c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b701e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b7020:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7022:	462b      	mov	r3, r5
   b7024:	1c71      	adds	r1, r6, #1
   b7026:	f7ff fdfd 	bl	b6c24 <vsnprintf>
        va_end(marker);
        result.len = n;
   b702a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b702c:	4620      	mov	r0, r4
   b702e:	b007      	add	sp, #28
   b7030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7034:	b003      	add	sp, #12
   b7036:	4770      	bx	lr
   b7038:	000bc56d 	.word	0x000bc56d

000b703c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b703c:	4770      	bx	lr

000b703e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b703e:	4770      	bx	lr

000b7040 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7040:	4770      	bx	lr

000b7042 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7042:	4770      	bx	lr

000b7044 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7044:	4b06      	ldr	r3, [pc, #24]	; (b7060 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7046:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7048:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b704a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b704e:	d005      	beq.n	b705c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7050:	4608      	mov	r0, r1
   b7052:	f002 fda1 	bl	b9b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7056:	2800      	cmp	r0, #0
   b7058:	bf08      	it	eq
   b705a:	2400      	moveq	r4, #0
      }
   b705c:	4620      	mov	r0, r4
   b705e:	bd10      	pop	{r4, pc}
   b7060:	000bc9ac 	.word	0x000bc9ac

000b7064 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7064:	4b06      	ldr	r3, [pc, #24]	; (b7080 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7066:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7068:	b510      	push	{r4, lr}
   b706a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b706e:	d005      	beq.n	b707c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7070:	4608      	mov	r0, r1
   b7072:	f002 fd91 	bl	b9b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7076:	2800      	cmp	r0, #0
   b7078:	bf08      	it	eq
   b707a:	2400      	moveq	r4, #0
      }
   b707c:	4620      	mov	r0, r4
   b707e:	bd10      	pop	{r4, pc}
   b7080:	000bc9ac 	.word	0x000bc9ac

000b7084 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7084:	4b06      	ldr	r3, [pc, #24]	; (b70a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7086:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7088:	b510      	push	{r4, lr}
   b708a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b708e:	d005      	beq.n	b709c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7090:	4608      	mov	r0, r1
   b7092:	f002 fd81 	bl	b9b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7096:	2800      	cmp	r0, #0
   b7098:	bf08      	it	eq
   b709a:	2400      	moveq	r4, #0
      }
   b709c:	4620      	mov	r0, r4
   b709e:	bd10      	pop	{r4, pc}
   b70a0:	000bc9ac 	.word	0x000bc9ac

000b70a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b70a4:	b510      	push	{r4, lr}
   b70a6:	2168      	movs	r1, #104	; 0x68
   b70a8:	4604      	mov	r4, r0
   b70aa:	f7fd fd76 	bl	b4b9a <_ZdlPvj>
   b70ae:	4620      	mov	r0, r4
   b70b0:	bd10      	pop	{r4, pc}

000b70b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b70b2:	b510      	push	{r4, lr}
   b70b4:	2128      	movs	r1, #40	; 0x28
   b70b6:	4604      	mov	r4, r0
   b70b8:	f7fd fd6f 	bl	b4b9a <_ZdlPvj>
   b70bc:	4620      	mov	r0, r4
   b70be:	bd10      	pop	{r4, pc}

000b70c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b70c0:	b510      	push	{r4, lr}
   b70c2:	2130      	movs	r1, #48	; 0x30
   b70c4:	4604      	mov	r4, r0
   b70c6:	f7fd fd68 	bl	b4b9a <_ZdlPvj>
   b70ca:	4620      	mov	r0, r4
   b70cc:	bd10      	pop	{r4, pc}

000b70ce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b70ce:	2168      	movs	r1, #104	; 0x68
   b70d0:	f7fd bd63 	b.w	b4b9a <_ZdlPvj>

000b70d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b70d4:	2128      	movs	r1, #40	; 0x28
   b70d6:	f7fd bd60 	b.w	b4b9a <_ZdlPvj>

000b70da <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b70da:	2130      	movs	r1, #48	; 0x30
   b70dc:	f7fd bd5d 	b.w	b4b9a <_ZdlPvj>

000b70e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b70e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b70e2:	2500      	movs	r5, #0
   b70e4:	1cec      	adds	r4, r5, #3
   b70e6:	428c      	cmp	r4, r1
   b70e8:	d80d      	bhi.n	b7106 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b70ea:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b70ec:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b70ee:	5d87      	ldrb	r7, [r0, r6]
   b70f0:	4297      	cmp	r7, r2
   b70f2:	d105      	bne.n	b7100 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b70f4:	4426      	add	r6, r4
   b70f6:	42b1      	cmp	r1, r6
   b70f8:	d305      	bcc.n	b7106 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b70fa:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b70fc:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b70fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7100:	3401      	adds	r4, #1
   b7102:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7104:	e7ee      	b.n	b70e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7106:	2000      	movs	r0, #0
   b7108:	e7f9      	b.n	b70fe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b710c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b710c:	4a02      	ldr	r2, [pc, #8]	; (b7118 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b710e:	4903      	ldr	r1, [pc, #12]	; (b711c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7110:	200a      	movs	r0, #10
   b7112:	f7ff bc7b 	b.w	b6a0c <panic_>
   b7116:	bf00      	nop
   b7118:	000b665d 	.word	0x000b665d
   b711c:	000bc80c 	.word	0x000bc80c

000b7120 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7120:	b430      	push	{r4, r5}
   b7122:	460d      	mov	r5, r1
   b7124:	4611      	mov	r1, r2
   b7126:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7128:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b712a:	6809      	ldr	r1, [r1, #0]
   b712c:	6828      	ldr	r0, [r5, #0]
   b712e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7132:	46a4      	mov	ip, r4
      }
   b7134:	bc30      	pop	{r4, r5}
   b7136:	4760      	bx	ip

000b7138 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7138:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b713a:	b538      	push	{r3, r4, r5, lr}
   b713c:	4604      	mov	r4, r0
	switch (__op)
   b713e:	d102      	bne.n	b7146 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7140:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7142:	6023      	str	r3, [r4, #0]
	}
   b7144:	e003      	b.n	b714e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7146:	2a02      	cmp	r2, #2
   b7148:	d003      	beq.n	b7152 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b714a:	2a03      	cmp	r2, #3
   b714c:	d00d      	beq.n	b716a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b714e:	2000      	movs	r0, #0
   b7150:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7152:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7154:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7156:	f7fd fd18 	bl	b4b8a <_Znwj>
   b715a:	4603      	mov	r3, r0
   b715c:	2800      	cmp	r0, #0
   b715e:	d0f0      	beq.n	b7142 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7160:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7164:	e883 0003 	stmia.w	r3, {r0, r1}
   b7168:	e7eb      	b.n	b7142 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b716a:	6800      	ldr	r0, [r0, #0]
   b716c:	2800      	cmp	r0, #0
   b716e:	d0ee      	beq.n	b714e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7170:	2108      	movs	r1, #8
   b7172:	f7fd fd12 	bl	b4b9a <_ZdlPvj>
   b7176:	e7ea      	b.n	b714e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7178 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7178:	b510      	push	{r4, lr}
   b717a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b717c:	3058      	adds	r0, #88	; 0x58
   b717e:	f7fe f850 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7182:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b718a:	f7ff be5c 	b.w	b6e46 <_ZN6StringD1Ev>

000b718e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b718e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7190:	6843      	ldr	r3, [r0, #4]
   b7192:	3b01      	subs	r3, #1
    {
   b7194:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7196:	6043      	str	r3, [r0, #4]
   b7198:	b963      	cbnz	r3, b71b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b719a:	6803      	ldr	r3, [r0, #0]
   b719c:	689b      	ldr	r3, [r3, #8]
   b719e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b71a0:	68a3      	ldr	r3, [r4, #8]
   b71a2:	3b01      	subs	r3, #1
   b71a4:	60a3      	str	r3, [r4, #8]
   b71a6:	b92b      	cbnz	r3, b71b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b71a8:	6823      	ldr	r3, [r4, #0]
   b71aa:	4620      	mov	r0, r4
   b71ac:	68db      	ldr	r3, [r3, #12]
    }
   b71ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b71b2:	4718      	bx	r3
    }
   b71b4:	bd10      	pop	{r4, pc}

000b71b6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b71b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b71ba:	b2da      	uxtb	r2, r3
   b71bc:	2a09      	cmp	r2, #9
   b71be:	d801      	bhi.n	b71c4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b71c0:	4618      	mov	r0, r3
   b71c2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b71c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b71c8:	2b05      	cmp	r3, #5
   b71ca:	d801      	bhi.n	b71d0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b71cc:	3857      	subs	r0, #87	; 0x57
   b71ce:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b71d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b71d4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b71d6:	bf94      	ite	ls
   b71d8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b71da:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b71de:	4770      	bx	lr

000b71e0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b71e0:	b510      	push	{r4, lr}
            locked_(false) {
   b71e2:	2300      	movs	r3, #0
   b71e4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b71e6:	4b04      	ldr	r3, [pc, #16]	; (b71f8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b71e8:	4604      	mov	r4, r0
   b71ea:	6818      	ldr	r0, [r3, #0]
   b71ec:	f7ff faf6 	bl	b67dc <os_mutex_recursive_lock>
        locked_ = true;
   b71f0:	2301      	movs	r3, #1
   b71f2:	7023      	strb	r3, [r4, #0]
    }
   b71f4:	4620      	mov	r0, r4
   b71f6:	bd10      	pop	{r4, pc}
   b71f8:	2003e600 	.word	0x2003e600

000b71fc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b71fc:	b510      	push	{r4, lr}
        if (locked_) {
   b71fe:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7200:	4604      	mov	r4, r0
        if (locked_) {
   b7202:	b11b      	cbz	r3, b720c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7204:	4b02      	ldr	r3, [pc, #8]	; (b7210 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7206:	6818      	ldr	r0, [r3, #0]
   b7208:	f7ff faf0 	bl	b67ec <os_mutex_recursive_unlock>
    }
   b720c:	4620      	mov	r0, r4
   b720e:	bd10      	pop	{r4, pc}
   b7210:	2003e600 	.word	0x2003e600

000b7214 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7214:	b082      	sub	sp, #8
   b7216:	4603      	mov	r3, r0
    address_ = addr;
   b7218:	6808      	ldr	r0, [r1, #0]
   b721a:	6849      	ldr	r1, [r1, #4]
   b721c:	466a      	mov	r2, sp
   b721e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7220:	466a      	mov	r2, sp
   b7222:	ca03      	ldmia	r2!, {r0, r1}
   b7224:	6018      	str	r0, [r3, #0]
}
   b7226:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7228:	6059      	str	r1, [r3, #4]
}
   b722a:	b002      	add	sp, #8
   b722c:	4770      	bx	lr

000b722e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b722e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7230:	7982      	ldrb	r2, [r0, #6]
   b7232:	798b      	ldrb	r3, [r1, #6]
   b7234:	429a      	cmp	r2, r3
   b7236:	d106      	bne.n	b7246 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7238:	2206      	movs	r2, #6
   b723a:	f003 f89f 	bl	ba37c <memcmp>
   b723e:	fab0 f080 	clz	r0, r0
   b7242:	0940      	lsrs	r0, r0, #5
}
   b7244:	bd08      	pop	{r3, pc}
    return false;
   b7246:	2000      	movs	r0, #0
   b7248:	e7fc      	b.n	b7244 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b724a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b724a:	f04f 33ff 	mov.w	r3, #4294967295
   b724e:	6003      	str	r3, [r0, #0]
   b7250:	8083      	strh	r3, [r0, #4]
}
   b7252:	2000      	movs	r0, #0
   b7254:	4770      	bx	lr

000b7256 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7256:	b508      	push	{r3, lr}
   b7258:	4602      	mov	r2, r0
        : address_{} {
   b725a:	2100      	movs	r1, #0
   b725c:	6001      	str	r1, [r0, #0]
   b725e:	6041      	str	r1, [r0, #4]
    clear();
   b7260:	f7ff fff3 	bl	b724a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7264:	7191      	strb	r1, [r2, #6]
}
   b7266:	4610      	mov	r0, r2
   b7268:	bd08      	pop	{r3, pc}
	...

000b726c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b726c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b726e:	2301      	movs	r3, #1
   b7270:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7272:	4b05      	ldr	r3, [pc, #20]	; (b7288 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7274:	4602      	mov	r2, r0
   b7276:	f103 0110 	add.w	r1, r3, #16
   b727a:	f853 4b04 	ldr.w	r4, [r3], #4
   b727e:	f842 4b04 	str.w	r4, [r2], #4
   b7282:	428b      	cmp	r3, r1
   b7284:	d1f9      	bne.n	b727a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7286:	bd10      	pop	{r4, pc}
   b7288:	000bc4be 	.word	0x000bc4be

000b728c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b728c:	b510      	push	{r4, lr}
    if (uuid128) {
   b728e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7290:	4604      	mov	r4, r0
    if (uuid128) {
   b7292:	b1b1      	cbz	r1, b72c2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7294:	2a01      	cmp	r2, #1
   b7296:	f101 0210 	add.w	r2, r1, #16
   b729a:	d10a      	bne.n	b72b2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b729c:	4601      	mov	r1, r0
   b729e:	f853 0b04 	ldr.w	r0, [r3], #4
   b72a2:	f841 0b04 	str.w	r0, [r1], #4
   b72a6:	4293      	cmp	r3, r2
   b72a8:	d1f9      	bne.n	b729e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b72aa:	2301      	movs	r3, #1
   b72ac:	6123      	str	r3, [r4, #16]
}
   b72ae:	4620      	mov	r0, r4
   b72b0:	bd10      	pop	{r4, pc}
   b72b2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b72b4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b72b8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b72bc:	429a      	cmp	r2, r3
   b72be:	d1f9      	bne.n	b72b4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b72c0:	e7f3      	b.n	b72aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b72c2:	2210      	movs	r2, #16
   b72c4:	f003 f892 	bl	ba3ec <memset>
   b72c8:	e7f1      	b.n	b72ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b72ca <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b72ca:	b538      	push	{r3, r4, r5, lr}
   b72cc:	4604      	mov	r4, r0
   b72ce:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b72d0:	461a      	mov	r2, r3
   b72d2:	f7ff ffdb 	bl	b728c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b72d6:	81a5      	strh	r5, [r4, #12]
}
   b72d8:	4620      	mov	r0, r4
   b72da:	bd38      	pop	{r3, r4, r5, pc}

000b72dc <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b72dc:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b72de:	6902      	ldr	r2, [r0, #16]
   b72e0:	b922      	cbnz	r2, b72ec <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b72e2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b72e4:	3800      	subs	r0, #0
   b72e6:	bf18      	it	ne
   b72e8:	2001      	movne	r0, #1
}
   b72ea:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b72ec:	4902      	ldr	r1, [pc, #8]	; (b72f8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b72ee:	2210      	movs	r2, #16
   b72f0:	f003 f844 	bl	ba37c <memcmp>
   b72f4:	e7f6      	b.n	b72e4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b72f6:	bf00      	nop
   b72f8:	000bc9c4 	.word	0x000bc9c4

000b72fc <_ZNK8particle7BleUuid4typeEv>:
}
   b72fc:	6900      	ldr	r0, [r0, #16]
   b72fe:	4770      	bx	lr

000b7300 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7300:	b538      	push	{r3, r4, r5, lr}
   b7302:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7304:	2214      	movs	r2, #20
   b7306:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7308:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b730a:	f003 f86f 	bl	ba3ec <memset>
    if (type_ == BleUuidType::SHORT) {
   b730e:	6923      	ldr	r3, [r4, #16]
   b7310:	b91b      	cbnz	r3, b731a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7312:	89a3      	ldrh	r3, [r4, #12]
   b7314:	802b      	strh	r3, [r5, #0]
}
   b7316:	4628      	mov	r0, r5
   b7318:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b731a:	2301      	movs	r3, #1
   b731c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b731e:	4621      	mov	r1, r4
   b7320:	462b      	mov	r3, r5
   b7322:	f104 0210 	add.w	r2, r4, #16
   b7326:	f851 0b04 	ldr.w	r0, [r1], #4
   b732a:	f843 0b04 	str.w	r0, [r3], #4
   b732e:	4291      	cmp	r1, r2
   b7330:	d1f9      	bne.n	b7326 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7332:	e7f0      	b.n	b7316 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7334 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7334:	8980      	ldrh	r0, [r0, #12]
   b7336:	4770      	bx	lr

000b7338 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7338:	4770      	bx	lr

000b733a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b733a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b733c:	6902      	ldr	r2, [r0, #16]
   b733e:	690b      	ldr	r3, [r1, #16]
   b7340:	429a      	cmp	r2, r3
   b7342:	d106      	bne.n	b7352 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7344:	2210      	movs	r2, #16
   b7346:	f003 f819 	bl	ba37c <memcmp>
   b734a:	fab0 f080 	clz	r0, r0
   b734e:	0940      	lsrs	r0, r0, #5
}
   b7350:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7352:	2000      	movs	r0, #0
   b7354:	e7fc      	b.n	b7350 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7358 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7358:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b735a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b735e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7360:	4b34      	ldr	r3, [pc, #208]	; (b7434 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7362:	460c      	mov	r4, r1
   b7364:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7366:	4602      	mov	r2, r0
   b7368:	f103 0110 	add.w	r1, r3, #16
   b736c:	f853 0b04 	ldr.w	r0, [r3], #4
   b7370:	f842 0b04 	str.w	r0, [r2], #4
   b7374:	428b      	cmp	r3, r1
   b7376:	d1f9      	bne.n	b736c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7378:	b344      	cbz	r4, b73cc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b737a:	2124      	movs	r1, #36	; 0x24
   b737c:	4620      	mov	r0, r4
   b737e:	f003 f8a4 	bl	ba4ca <strnlen>
   b7382:	2804      	cmp	r0, #4
   b7384:	f04f 0500 	mov.w	r5, #0
   b7388:	d123      	bne.n	b73d2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b738a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b738e:	af01      	add	r7, sp, #4
   b7390:	1ca5      	adds	r5, r4, #2
   b7392:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7394:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7398:	f7ff ff0d 	bl	b71b6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b739c:	f1b0 0800 	subs.w	r8, r0, #0
   b73a0:	db12      	blt.n	b73c8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b73a2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b73a6:	f7ff ff06 	bl	b71b6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b73aa:	2800      	cmp	r0, #0
   b73ac:	db0c      	blt.n	b73c8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b73ae:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b73b0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b73b4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b73b6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b73ba:	d1eb      	bne.n	b7394 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b73bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b73c0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b73c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b73c6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b73c8:	2300      	movs	r3, #0
   b73ca:	6133      	str	r3, [r6, #16]
}
   b73cc:	b002      	add	sp, #8
   b73ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b73d2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b73d6:	2124      	movs	r1, #36	; 0x24
   b73d8:	4620      	mov	r0, r4
   b73da:	f003 f876 	bl	ba4ca <strnlen>
   b73de:	42a8      	cmp	r0, r5
   b73e0:	d807      	bhi.n	b73f2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b73e2:	4642      	mov	r2, r8
   b73e4:	2100      	movs	r1, #0
   b73e6:	4630      	mov	r0, r6
}
   b73e8:	b002      	add	sp, #8
   b73ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b73ee:	f002 bffd 	b.w	ba3ec <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b73f2:	f1b8 0f00 	cmp.w	r8, #0
   b73f6:	d0e9      	beq.n	b73cc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b73f8:	5d60      	ldrb	r0, [r4, r5]
   b73fa:	f7ff fedc 	bl	b71b6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b73fe:	0603      	lsls	r3, r0, #24
   b7400:	d415      	bmi.n	b742e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7402:	0100      	lsls	r0, r0, #4
   b7404:	f108 38ff 	add.w	r8, r8, #4294967295
   b7408:	b2c7      	uxtb	r7, r0
   b740a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b740e:	2124      	movs	r1, #36	; 0x24
   b7410:	4620      	mov	r0, r4
   b7412:	f003 f85a 	bl	ba4ca <strnlen>
   b7416:	3501      	adds	r5, #1
   b7418:	42a8      	cmp	r0, r5
   b741a:	d908      	bls.n	b742e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b741c:	5d60      	ldrb	r0, [r4, r5]
   b741e:	f7ff feca 	bl	b71b6 <_ZN8particle11hexToNibbleEc>
   b7422:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7424:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7426:	bfa4      	itt	ge
   b7428:	4338      	orrge	r0, r7
   b742a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b742e:	3501      	adds	r5, #1
   b7430:	e7d1      	b.n	b73d6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7432:	bf00      	nop
   b7434:	000bc4be 	.word	0x000bc4be

000b7438 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7438:	b513      	push	{r0, r1, r4, lr}
   b743a:	4604      	mov	r4, r0
   b743c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b743e:	f7ff ff15 	bl	b726c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7442:	4620      	mov	r0, r4
   b7444:	9901      	ldr	r1, [sp, #4]
   b7446:	f7ff ff87 	bl	b7358 <_ZN8particle7BleUuid9constructEPKc>
}
   b744a:	4620      	mov	r0, r4
   b744c:	b002      	add	sp, #8
   b744e:	bd10      	pop	{r4, pc}

000b7450 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7450:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7452:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7456:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7458:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b745a:	8043      	strh	r3, [r0, #2]
   b745c:	220e      	movs	r2, #14
   b745e:	4629      	mov	r1, r5
   b7460:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7462:	7105      	strb	r5, [r0, #4]
   b7464:	3006      	adds	r0, #6
   b7466:	f002 ffc1 	bl	ba3ec <memset>
   b746a:	f104 0014 	add.w	r0, r4, #20
   b746e:	f7ff fefd 	bl	b726c <_ZN8particle7BleUuidC1Ev>
   b7472:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7476:	f7ff fef9 	bl	b726c <_ZN8particle7BleUuidC1Ev>
   b747a:	4904      	ldr	r1, [pc, #16]	; (b748c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b747c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7480:	f7ff fd2c 	bl	b6edc <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7484:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7486:	4620      	mov	r0, r4
   b7488:	bd38      	pop	{r3, r4, r5, pc}
   b748a:	bf00      	nop
   b748c:	000bc56d 	.word	0x000bc56d

000b7490 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7490:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7492:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7496:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b749a:	4293      	cmp	r3, r2
   b749c:	4618      	mov	r0, r3
   b749e:	d006      	beq.n	b74ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b74a0:	6804      	ldr	r4, [r0, #0]
   b74a2:	8824      	ldrh	r4, [r4, #0]
   b74a4:	428c      	cmp	r4, r1
   b74a6:	f103 0308 	add.w	r3, r3, #8
   b74aa:	d1f6      	bne.n	b749a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b74ac:	bd10      	pop	{r4, pc}
        return nullptr;
   b74ae:	2000      	movs	r0, #0
   b74b0:	e7fc      	b.n	b74ac <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b74b4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b74b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b74b8:	2600      	movs	r6, #0
   b74ba:	6006      	str	r6, [r0, #0]
   b74bc:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b74be:	2028      	movs	r0, #40	; 0x28
   b74c0:	460c      	mov	r4, r1
   b74c2:	f7fd fb62 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b74c6:	1e05      	subs	r5, r0, #0
   b74c8:	f105 080c 	add.w	r8, r5, #12
   b74cc:	d00f      	beq.n	b74ee <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b74ce:	2301      	movs	r3, #1
   b74d0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b74d4:	4b08      	ldr	r3, [pc, #32]	; (b74f8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b74d6:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b74d8:	4640      	mov	r0, r8
   b74da:	f7ff fec7 	bl	b726c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b74de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b74e0:	622e      	str	r6, [r5, #32]
   b74e2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b74e6:	4646      	mov	r6, r8
   b74e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b74ea:	6823      	ldr	r3, [r4, #0]
   b74ec:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b74ee:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b74f2:	4638      	mov	r0, r7
   b74f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b74f8:	000bc97c 	.word	0x000bc97c

000b74fc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b74fc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b74fe:	2500      	movs	r5, #0
   b7500:	6005      	str	r5, [r0, #0]
   b7502:	4606      	mov	r6, r0
   b7504:	2030      	movs	r0, #48	; 0x30
   b7506:	f7fd fb40 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b750a:	4604      	mov	r4, r0
   b750c:	b188      	cbz	r0, b7532 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b750e:	2301      	movs	r3, #1
   b7510:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7514:	4b09      	ldr	r3, [pc, #36]	; (b753c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7516:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7518:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b751c:	8183      	strh	r3, [r0, #12]
   b751e:	300e      	adds	r0, #14
   b7520:	f7ff fe99 	bl	b7256 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7524:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7528:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b752c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7530:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7532:	6074      	str	r4, [r6, #4]
   b7534:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7536:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7538:	4630      	mov	r0, r6
   b753a:	bd70      	pop	{r4, r5, r6, pc}
   b753c:	000bc998 	.word	0x000bc998

000b7540 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7540:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7542:	460d      	mov	r5, r1
   b7544:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7546:	a801      	add	r0, sp, #4
   b7548:	f7ff fe4a 	bl	b71e0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b754c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b754e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7552:	6023      	str	r3, [r4, #0]
   b7554:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7558:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b755a:	a801      	add	r0, sp, #4
   b755c:	f7ff fe4e 	bl	b71fc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7560:	4620      	mov	r0, r4
   b7562:	b003      	add	sp, #12
   b7564:	bd30      	pop	{r4, r5, pc}

000b7566 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7566:	b530      	push	{r4, r5, lr}
   b7568:	4605      	mov	r5, r0
   b756a:	b087      	sub	sp, #28
   b756c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b756e:	a801      	add	r0, sp, #4
   b7570:	f7ff fe36 	bl	b71e0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7574:	682a      	ldr	r2, [r5, #0]
   b7576:	6823      	ldr	r3, [r4, #0]
   b7578:	8812      	ldrh	r2, [r2, #0]
   b757a:	881b      	ldrh	r3, [r3, #0]
   b757c:	429a      	cmp	r2, r3
   b757e:	d10d      	bne.n	b759c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7580:	4629      	mov	r1, r5
   b7582:	a802      	add	r0, sp, #8
   b7584:	f7ff ffdc 	bl	b7540 <_ZNK8particle13BlePeerDevice7addressEv>
   b7588:	4621      	mov	r1, r4
   b758a:	a804      	add	r0, sp, #16
   b758c:	f7ff ffd8 	bl	b7540 <_ZNK8particle13BlePeerDevice7addressEv>
   b7590:	a904      	add	r1, sp, #16
   b7592:	a802      	add	r0, sp, #8
   b7594:	f7ff fe4b 	bl	b722e <_ZNK8particle10BleAddresseqERKS0_>
   b7598:	4604      	mov	r4, r0
   b759a:	b900      	cbnz	r0, b759e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b759c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b759e:	a801      	add	r0, sp, #4
   b75a0:	f7ff fe2c 	bl	b71fc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b75a4:	4620      	mov	r0, r4
   b75a6:	b007      	add	sp, #28
   b75a8:	bd30      	pop	{r4, r5, pc}
	...

000b75ac <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b75ac:	b510      	push	{r4, lr}
   b75ae:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b75b0:	2064      	movs	r0, #100	; 0x64
   b75b2:	f7fd faea 	bl	b4b8a <_Znwj>
   b75b6:	b168      	cbz	r0, b75d4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b75b8:	2300      	movs	r3, #0
   b75ba:	e9c0 3300 	strd	r3, r3, [r0]
   b75be:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b75c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b75c6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b75ca:	6203      	str	r3, [r0, #32]
   b75cc:	62c3      	str	r3, [r0, #44]	; 0x2c
   b75ce:	63c3      	str	r3, [r0, #60]	; 0x3c
   b75d0:	64c3      	str	r3, [r0, #76]	; 0x4c
   b75d2:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b75d4:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b75d6:	b920      	cbnz	r0, b75e2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b75d8:	4a0a      	ldr	r2, [pc, #40]	; (b7604 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b75da:	490b      	ldr	r1, [pc, #44]	; (b7608 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b75dc:	200a      	movs	r0, #10
   b75de:	f7ff fa15 	bl	b6a0c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b75e2:	2000      	movs	r0, #0
   b75e4:	f7ff f85a 	bl	b669c <hal_ble_stack_init>
   b75e8:	b120      	cbz	r0, b75f4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b75ea:	4a06      	ldr	r2, [pc, #24]	; (b7604 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b75ec:	4907      	ldr	r1, [pc, #28]	; (b760c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b75ee:	200a      	movs	r0, #10
   b75f0:	f7ff fa0c 	bl	b6a0c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b75f4:	6821      	ldr	r1, [r4, #0]
   b75f6:	4806      	ldr	r0, [pc, #24]	; (b7610 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b75f8:	2200      	movs	r2, #0
   b75fa:	f7ff f895 	bl	b6728 <hal_ble_set_callback_on_periph_link_events>
}
   b75fe:	4620      	mov	r0, r4
   b7600:	bd10      	pop	{r4, pc}
   b7602:	bf00      	nop
   b7604:	000b665d 	.word	0x000b665d
   b7608:	000bc80c 	.word	0x000bc80c
   b760c:	000bc84a 	.word	0x000bc84a
   b7610:	000b7bb1 	.word	0x000b7bb1

000b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7614:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7616:	4c0a      	ldr	r4, [pc, #40]	; (b7640 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7618:	7823      	ldrb	r3, [r4, #0]
   b761a:	f3bf 8f5b 	dmb	ish
   b761e:	07db      	lsls	r3, r3, #31
   b7620:	d40c      	bmi.n	b763c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7622:	4620      	mov	r0, r4
   b7624:	f7fd fabb 	bl	b4b9e <__cxa_guard_acquire>
   b7628:	b140      	cbz	r0, b763c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b762a:	4806      	ldr	r0, [pc, #24]	; (b7644 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b762c:	f7ff ffbe 	bl	b75ac <_ZN8particle14BleLocalDeviceC1Ev>
   b7630:	4620      	mov	r0, r4
   b7632:	f7fd fab9 	bl	b4ba8 <__cxa_guard_release>
   b7636:	4804      	ldr	r0, [pc, #16]	; (b7648 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7638:	f002 fe86 	bl	ba348 <atexit>
    return instance;
}
   b763c:	4801      	ldr	r0, [pc, #4]	; (b7644 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b763e:	bd10      	pop	{r4, pc}
   b7640:	2003e5f8 	.word	0x2003e5f8
   b7644:	2003e604 	.word	0x2003e604
   b7648:	000b7859 	.word	0x000b7859

000b764c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b764c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b764e:	6803      	ldr	r3, [r0, #0]
   b7650:	3b09      	subs	r3, #9
   b7652:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7654:	b08d      	sub	sp, #52	; 0x34
   b7656:	4604      	mov	r4, r0
   b7658:	460d      	mov	r5, r1
    switch (event->type) {
   b765a:	d811      	bhi.n	b7680 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b765c:	f7ff ffda 	bl	b7614 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7660:	88a1      	ldrh	r1, [r4, #4]
   b7662:	6800      	ldr	r0, [r0, #0]
   b7664:	f7ff ff14 	bl	b7490 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7668:	4603      	mov	r3, r0
   b766a:	b958      	cbnz	r0, b7684 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b766c:	2220      	movs	r2, #32
   b766e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7672:	4a0b      	ldr	r2, [pc, #44]	; (b76a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7674:	9200      	str	r2, [sp, #0]
   b7676:	490b      	ldr	r1, [pc, #44]	; (b76a4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7678:	aa04      	add	r2, sp, #16
   b767a:	2032      	movs	r0, #50	; 0x32
   b767c:	f7ff f9ce 	bl	b6a1c <log_message>
}
   b7680:	b00d      	add	sp, #52	; 0x34
   b7682:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7684:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7686:	2a00      	cmp	r2, #0
   b7688:	d0fa      	beq.n	b7680 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b768a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b768e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7692:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7696:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7698:	aa04      	add	r2, sp, #16
   b769a:	a903      	add	r1, sp, #12
   b769c:	47a0      	blx	r4
}
   b769e:	e7ef      	b.n	b7680 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b76a0:	000bc88c 	.word	0x000bc88c
   b76a4:	000bc823 	.word	0x000bc823

000b76a8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b76a8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b76aa:	2000      	movs	r0, #0
   b76ac:	f7fe fff6 	bl	b669c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b76b0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b76b4:	bd08      	pop	{r3, pc}

000b76b6 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b76b6:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b76b8:	2100      	movs	r1, #0
   b76ba:	f7fe bff7 	b.w	b66ac <hal_ble_select_antenna>

000b76be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b76be:	b919      	cbnz	r1, b76c8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b76c0:	460a      	mov	r2, r1
   b76c2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b76c4:	f7fe bffa 	b.w	b66bc <hal_ble_gap_set_advertising_data>
   b76c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b76cc:	2200      	movs	r2, #0
   b76ce:	e7f9      	b.n	b76c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b76d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b76d0:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b76d2:	1e14      	subs	r4, r2, #0
   b76d4:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b76d6:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b76d8:	db02      	blt.n	b76e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b76da:	1862      	adds	r2, r4, r1
   b76dc:	429a      	cmp	r2, r3
   b76de:	dd00      	ble.n	b76e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b76e0:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b76e2:	682a      	ldr	r2, [r5, #0]
   b76e4:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b76e6:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b76e8:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b76ea:	1a52      	subs	r2, r2, r1
   b76ec:	f002 fe64 	bl	ba3b8 <memmove>
    size_ -= n;
   b76f0:	686a      	ldr	r2, [r5, #4]
   b76f2:	1b12      	subs	r2, r2, r4
   b76f4:	606a      	str	r2, [r5, #4]
}
   b76f6:	bd38      	pop	{r3, r4, r5, pc}

000b76f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b76f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b76fa:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b76fc:	4604      	mov	r4, r0
   b76fe:	460d      	mov	r5, r1
   b7700:	ab01      	add	r3, sp, #4
   b7702:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7706:	f7ff fceb 	bl	b70e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b770a:	4602      	mov	r2, r0
   b770c:	b138      	cbz	r0, b771e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b770e:	9901      	ldr	r1, [sp, #4]
   b7710:	4620      	mov	r0, r4
   b7712:	f7ff ffdd 	bl	b76d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7716:	4629      	mov	r1, r5
   b7718:	4620      	mov	r0, r4
   b771a:	f7ff ffed 	bl	b76f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b771e:	b003      	add	sp, #12
   b7720:	bd30      	pop	{r4, r5, pc}

000b7722 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7722:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7724:	460c      	mov	r4, r1
   b7726:	b929      	cbnz	r1, b7734 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7728:	460a      	mov	r2, r1
   b772a:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7730:	f7fe bfcc 	b.w	b66cc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7734:	2101      	movs	r1, #1
   b7736:	4620      	mov	r0, r4
   b7738:	f7ff ffde 	bl	b76f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b773c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7740:	2200      	movs	r2, #0
   b7742:	e7f3      	b.n	b772c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7744 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7744:	b538      	push	{r3, r4, r5, lr}
   b7746:	4604      	mov	r4, r0
   b7748:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b774a:	f7ff ffb8 	bl	b76be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b774e:	2800      	cmp	r0, #0
   b7750:	db0a      	blt.n	b7768 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7752:	4629      	mov	r1, r5
   b7754:	4620      	mov	r0, r4
   b7756:	f7ff ffe4 	bl	b7722 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b775a:	2800      	cmp	r0, #0
   b775c:	db04      	blt.n	b7768 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b775e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7762:	2000      	movs	r0, #0
   b7764:	f7fe bfba 	b.w	b66dc <hal_ble_gap_start_advertising>
}
   b7768:	bd38      	pop	{r3, r4, r5, pc}
	...

000b776c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b776c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b776e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7770:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7772:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7774:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7776:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7778:	f7fd fa07 	bl	b4b8a <_Znwj>
   b777c:	b118      	cbz	r0, b7786 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
   b777e:	682b      	ldr	r3, [r5, #0]
   b7780:	6003      	str	r3, [r0, #0]
   b7782:	686b      	ldr	r3, [r5, #4]
   b7784:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7786:	4b03      	ldr	r3, [pc, #12]	; (b7794 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7788:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b778a:	4b03      	ldr	r3, [pc, #12]	; (b7798 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b778c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b778e:	60a3      	str	r3, [r4, #8]
      }
   b7790:	4620      	mov	r0, r4
   b7792:	bd38      	pop	{r3, r4, r5, pc}
   b7794:	000b7121 	.word	0x000b7121
   b7798:	000b7139 	.word	0x000b7139

000b779c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b779c:	680b      	ldr	r3, [r1, #0]
   b779e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b77a0:	b113      	cbz	r3, b77a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b77a2:	685a      	ldr	r2, [r3, #4]
   b77a4:	3201      	adds	r2, #1
   b77a6:	605a      	str	r2, [r3, #4]
      }
   b77a8:	4770      	bx	lr

000b77aa <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b77aa:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b77ac:	f851 3b04 	ldr.w	r3, [r1], #4
   b77b0:	4604      	mov	r4, r0
   b77b2:	f840 3b04 	str.w	r3, [r0], #4
   b77b6:	f7ff fff1 	bl	b779c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b77ba:	6823      	ldr	r3, [r4, #0]
   b77bc:	b90b      	cbnz	r3, b77c2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b77be:	f7ff fca5 	bl	b710c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b77c2:	4620      	mov	r0, r4
   b77c4:	bd10      	pop	{r4, pc}

000b77c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b77c6:	b510      	push	{r4, lr}
   b77c8:	f851 3b04 	ldr.w	r3, [r1], #4
   b77cc:	4604      	mov	r4, r0
   b77ce:	f840 3b04 	str.w	r3, [r0], #4
   b77d2:	f7ff ffe3 	bl	b779c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b77d6:	4620      	mov	r0, r4
   b77d8:	bd10      	pop	{r4, pc}

000b77da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b77da:	b510      	push	{r4, lr}
   b77dc:	f851 3b04 	ldr.w	r3, [r1], #4
   b77e0:	4604      	mov	r4, r0
   b77e2:	f840 3b04 	str.w	r3, [r0], #4
   b77e6:	f7ff ffd9 	bl	b779c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b77ea:	4620      	mov	r0, r4
   b77ec:	bd10      	pop	{r4, pc}

000b77ee <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b77ee:	b510      	push	{r4, lr}
   b77f0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b77f2:	3004      	adds	r0, #4
   b77f4:	f7fd faf2 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b77f8:	4620      	mov	r0, r4
   b77fa:	bd10      	pop	{r4, pc}

000b77fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b77fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b77fe:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7802:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7804:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7808:	42ae      	cmp	r6, r5
   b780a:	d004      	beq.n	b7816 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b780c:	1d28      	adds	r0, r5, #4
   b780e:	f7fd fae5 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7812:	3508      	adds	r5, #8
   b7814:	e7f8      	b.n	b7808 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7816:	6820      	ldr	r0, [r4, #0]
   b7818:	f7ff f9ec 	bl	b6bf4 <free>
}
   b781c:	4620      	mov	r0, r4
   b781e:	bd70      	pop	{r4, r5, r6, pc}

000b7820 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7820:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7822:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7826:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7828:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b782c:	42ae      	cmp	r6, r5
   b782e:	d004      	beq.n	b783a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7830:	1d28      	adds	r0, r5, #4
   b7832:	f7fd fad3 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7836:	3508      	adds	r5, #8
   b7838:	e7f8      	b.n	b782c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b783a:	6820      	ldr	r0, [r4, #0]
   b783c:	f7ff f9da 	bl	b6bf4 <free>
}
   b7840:	4620      	mov	r0, r4
   b7842:	bd70      	pop	{r4, r5, r6, pc}

000b7844 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7844:	b510      	push	{r4, lr}
   b7846:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7848:	3024      	adds	r0, #36	; 0x24
   b784a:	f7ff ffe9 	bl	b7820 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b784e:	f104 0018 	add.w	r0, r4, #24
   b7852:	f7ff ffd3 	bl	b77fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7856:	bd10      	pop	{r4, pc}

000b7858 <__tcf_0>:
    static BleLocalDevice instance;
   b7858:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b785a:	4b17      	ldr	r3, [pc, #92]	; (b78b8 <__tcf_0+0x60>)
   b785c:	681c      	ldr	r4, [r3, #0]
   b785e:	b354      	cbz	r4, b78b6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7860:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7864:	f7fd fcdd 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
   b7868:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b786c:	f7fd fcd9 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
   b7870:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7874:	f7fd fcd5 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
   b7878:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b787c:	f7fd fcd1 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7880:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7884:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7888:	42ae      	cmp	r6, r5
   b788a:	d004      	beq.n	b7896 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b788c:	1d28      	adds	r0, r5, #4
   b788e:	f7fd faa5 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7892:	3508      	adds	r5, #8
   b7894:	e7f8      	b.n	b7888 <__tcf_0+0x30>
    ::free(ptr);
   b7896:	69a0      	ldr	r0, [r4, #24]
   b7898:	f7ff f9ac 	bl	b6bf4 <free>
    ~BleLocalDeviceImpl() = default;
   b789c:	f104 000c 	add.w	r0, r4, #12
   b78a0:	f7ff ffbe 	bl	b7820 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b78a4:	4620      	mov	r0, r4
   b78a6:	f7ff ffa9 	bl	b77fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b78aa:	4620      	mov	r0, r4
   b78ac:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b78ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b78b2:	f7fd b972 	b.w	b4b9a <_ZdlPvj>
   b78b6:	bd70      	pop	{r4, r5, r6, pc}
   b78b8:	2003e604 	.word	0x2003e604

000b78bc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b78bc:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b78be:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b78c0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b78c4:	e9c1 3300 	strd	r3, r3, [r1]
   b78c8:	6803      	ldr	r3, [r0, #0]
   b78ca:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b78cc:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b78ce:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b78d0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b78d2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b78d4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b78d6:	f7fd fa81 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b78da:	b002      	add	sp, #8
   b78dc:	bd10      	pop	{r4, pc}

000b78de <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b78de:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b78e0:	b510      	push	{r4, lr}
      if (_M_empty())
   b78e2:	b90a      	cbnz	r2, b78e8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b78e4:	f002 f954 	bl	b9b90 <_ZSt25__throw_bad_function_callv>
    }
   b78e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b78ec:	68c3      	ldr	r3, [r0, #12]
   b78ee:	4718      	bx	r3

000b78f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b78f0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b78f2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b78f4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b78f6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b78f8:	dd03      	ble.n	b7902 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b78fa:	f7ff f983 	bl	b6c04 <realloc>
            if (!d) {
   b78fe:	b918      	cbnz	r0, b7908 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7900:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7902:	f7ff f977 	bl	b6bf4 <free>
        T* d = nullptr;
   b7906:	2000      	movs	r0, #0
        data_ = d;
   b7908:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b790a:	60a5      	str	r5, [r4, #8]
        return true;
   b790c:	2001      	movs	r0, #1
   b790e:	e7f7      	b.n	b7900 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7910 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7910:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7912:	6883      	ldr	r3, [r0, #8]
   b7914:	428b      	cmp	r3, r1
   b7916:	da02      	bge.n	b791e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7918:	f7ff ffea 	bl	b78f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b791c:	bd08      	pop	{r3, pc}
    return true;
   b791e:	2001      	movs	r0, #1
   b7920:	e7fc      	b.n	b791c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7922 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7926:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7928:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b792a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b792c:	4419      	add	r1, r3
   b792e:	6883      	ldr	r3, [r0, #8]
   b7930:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7932:	4604      	mov	r4, r0
   b7934:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7936:	dc12      	bgt.n	b795e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7938:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b793a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b793c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b793e:	1bd2      	subs	r2, r2, r7
   b7940:	4631      	mov	r1, r6
   b7942:	1970      	adds	r0, r6, r5
   b7944:	f002 fd38 	bl	ba3b8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7948:	462a      	mov	r2, r5
   b794a:	4641      	mov	r1, r8
   b794c:	4630      	mov	r0, r6
   b794e:	f002 fd25 	bl	ba39c <memcpy>
    size_ += n;
   b7952:	6863      	ldr	r3, [r4, #4]
   b7954:	442b      	add	r3, r5
   b7956:	6063      	str	r3, [r4, #4]
    return true;
   b7958:	2001      	movs	r0, #1
}
   b795a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b795e:	f7ff ffc7 	bl	b78f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7962:	2800      	cmp	r0, #0
   b7964:	d1e8      	bne.n	b7938 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7966:	e7f8      	b.n	b795a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7968 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b796a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b796c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7970:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7972:	4604      	mov	r4, r0
   b7974:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7976:	da0b      	bge.n	b7990 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7978:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b797a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b797c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b797e:	1b52      	subs	r2, r2, r5
   b7980:	1c48      	adds	r0, r1, #1
   b7982:	f002 fd19 	bl	ba3b8 <memmove>
    new(p) T(std::move(value));
   b7986:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7988:	6863      	ldr	r3, [r4, #4]
   b798a:	3301      	adds	r3, #1
   b798c:	6063      	str	r3, [r4, #4]
}
   b798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7990:	3101      	adds	r1, #1
   b7992:	f7ff ffad 	bl	b78f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7996:	2800      	cmp	r0, #0
   b7998:	d1ee      	bne.n	b7978 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b799a:	e7f8      	b.n	b798e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b799c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b799c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b799e:	6841      	ldr	r1, [r0, #4]
   b79a0:	f7ff bfe2 	b.w	b7968 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b79a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b79a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b79a8:	4604      	mov	r4, r0
   b79aa:	461d      	mov	r5, r3
   b79ac:	460f      	mov	r7, r1
   b79ae:	ab01      	add	r3, sp, #4
   b79b0:	4690      	mov	r8, r2
   b79b2:	460a      	mov	r2, r1
   b79b4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b79b8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b79bc:	f7ff fb90 	bl	b70e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b79c0:	1cae      	adds	r6, r5, #2
   b79c2:	6863      	ldr	r3, [r4, #4]
   b79c4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b79c6:	f1b9 0f00 	cmp.w	r9, #0
   b79ca:	d126      	bne.n	b7a1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b79cc:	b328      	cbz	r0, b7a1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b79ce:	4433      	add	r3, r6
   b79d0:	1a1b      	subs	r3, r3, r0
   b79d2:	2bff      	cmp	r3, #255	; 0xff
   b79d4:	d809      	bhi.n	b79ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b79d6:	9901      	ldr	r1, [sp, #4]
   b79d8:	4620      	mov	r0, r4
   b79da:	f7ff fe79 	bl	b76d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b79de:	6861      	ldr	r1, [r4, #4]
   b79e0:	4620      	mov	r0, r4
   b79e2:	4431      	add	r1, r6
   b79e4:	f7ff ff94 	bl	b7910 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b79e8:	b918      	cbnz	r0, b79f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b79ea:	6860      	ldr	r0, [r4, #4]
}
   b79ec:	b003      	add	sp, #12
   b79ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b79f2:	1c6a      	adds	r2, r5, #1
   b79f4:	9901      	ldr	r1, [sp, #4]
   b79f6:	b2d2      	uxtb	r2, r2
   b79f8:	4620      	mov	r0, r4
   b79fa:	f7ff ffb5 	bl	b7968 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b79fe:	9901      	ldr	r1, [sp, #4]
   b7a00:	463a      	mov	r2, r7
   b7a02:	3101      	adds	r1, #1
   b7a04:	4620      	mov	r0, r4
   b7a06:	f7ff ffaf 	bl	b7968 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7a0a:	9901      	ldr	r1, [sp, #4]
   b7a0c:	462b      	mov	r3, r5
   b7a0e:	4642      	mov	r2, r8
   b7a10:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7a12:	4620      	mov	r0, r4
   b7a14:	f7ff ff85 	bl	b7922 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7a18:	e7e7      	b.n	b79ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7a1a:	18f1      	adds	r1, r6, r3
   b7a1c:	29ff      	cmp	r1, #255	; 0xff
   b7a1e:	d8e4      	bhi.n	b79ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7a20:	4620      	mov	r0, r4
   b7a22:	f7ff ff75 	bl	b7910 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7a26:	2800      	cmp	r0, #0
   b7a28:	d0df      	beq.n	b79ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7a2a:	1c69      	adds	r1, r5, #1
   b7a2c:	b2c9      	uxtb	r1, r1
   b7a2e:	4620      	mov	r0, r4
   b7a30:	f7ff ffb4 	bl	b799c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7a34:	4639      	mov	r1, r7
   b7a36:	4620      	mov	r0, r4
   b7a38:	f7ff ffb0 	bl	b799c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7a3c:	6861      	ldr	r1, [r4, #4]
   b7a3e:	462b      	mov	r3, r5
   b7a40:	4642      	mov	r2, r8
   b7a42:	e7e6      	b.n	b7a12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7a44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7a44:	b430      	push	{r4, r5}
   b7a46:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7a4a:	b11a      	cbz	r2, b7a54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7a4c:	9502      	str	r5, [sp, #8]
}
   b7a4e:	bc30      	pop	{r4, r5}
   b7a50:	f7ff bfa8 	b.w	b79a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7a54:	6840      	ldr	r0, [r0, #4]
}
   b7a56:	bc30      	pop	{r4, r5}
   b7a58:	4770      	bx	lr

000b7a5a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7a5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7a5c:	2300      	movs	r3, #0
   b7a5e:	e9c0 3300 	strd	r3, r3, [r0]
   b7a62:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7a64:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7a66:	9300      	str	r3, [sp, #0]
   b7a68:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7a6a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7a6e:	4619      	mov	r1, r3
   b7a70:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7a74:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7a76:	f7ff ffe5 	bl	b7a44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7a7a:	4620      	mov	r0, r4
   b7a7c:	b004      	add	sp, #16
   b7a7e:	bd10      	pop	{r4, pc}

000b7a80 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7a82:	460a      	mov	r2, r1
   b7a84:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b7a86:	2114      	movs	r1, #20
   b7a88:	4610      	mov	r0, r2
   b7a8a:	9203      	str	r2, [sp, #12]
   b7a8c:	f002 fd1d 	bl	ba4ca <strnlen>
   b7a90:	2100      	movs	r1, #0
   b7a92:	4603      	mov	r3, r0
   b7a94:	9100      	str	r1, [sp, #0]
   b7a96:	9a03      	ldr	r2, [sp, #12]
   b7a98:	2109      	movs	r1, #9
   b7a9a:	4620      	mov	r0, r4
   b7a9c:	f7ff ffd2 	bl	b7a44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7aa0:	b004      	add	sp, #16
   b7aa2:	bd10      	pop	{r4, pc}

000b7aa4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7aa4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7aa8:	4604      	mov	r4, r0
   b7aaa:	460d      	mov	r5, r1
   b7aac:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7aae:	d914      	bls.n	b7ada <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7ab0:	4290      	cmp	r0, r2
   b7ab2:	d213      	bcs.n	b7adc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7ab4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7ab8:	1a75      	subs	r5, r6, r1
   b7aba:	f1a1 0708 	sub.w	r7, r1, #8
   b7abe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7ac0:	42b7      	cmp	r7, r6
   b7ac2:	d018      	beq.n	b7af6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7ac4:	b11c      	cbz	r4, b7ace <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7ac6:	4631      	mov	r1, r6
   b7ac8:	4620      	mov	r0, r4
   b7aca:	f7ff fe86 	bl	b77da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7ace:	1d30      	adds	r0, r6, #4
   b7ad0:	f7fd f984 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7ad4:	3e08      	subs	r6, #8
   b7ad6:	3c08      	subs	r4, #8
   b7ad8:	e7f2      	b.n	b7ac0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7ada:	d00c      	beq.n	b7af6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7adc:	42b5      	cmp	r5, r6
   b7ade:	d00a      	beq.n	b7af6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7ae0:	b11c      	cbz	r4, b7aea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7ae2:	4629      	mov	r1, r5
   b7ae4:	4620      	mov	r0, r4
   b7ae6:	f7ff fe78 	bl	b77da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7aea:	1d28      	adds	r0, r5, #4
   b7aec:	f7fd f976 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7af0:	3508      	adds	r5, #8
   b7af2:	3408      	adds	r4, #8
   b7af4:	e7f2      	b.n	b7adc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7af8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7afa:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7afc:	6846      	ldr	r6, [r0, #4]
   b7afe:	4668      	mov	r0, sp
   b7b00:	f7ff fe6b 	bl	b77da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b04:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7b08:	429f      	cmp	r7, r3
   b7b0a:	db12      	blt.n	b7b32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7b0c:	3701      	adds	r7, #1
        if (n > 0) {
   b7b0e:	2f00      	cmp	r7, #0
   b7b10:	dd29      	ble.n	b7b66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7b12:	00f8      	lsls	r0, r7, #3
   b7b14:	f7ff f866 	bl	b6be4 <malloc>
            if (!d) {
   b7b18:	4605      	mov	r5, r0
   b7b1a:	b1f0      	cbz	r0, b7b5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7b1c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7b20:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7b24:	f7ff ffbe 	bl	b7aa4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7b28:	6820      	ldr	r0, [r4, #0]
   b7b2a:	f7ff f863 	bl	b6bf4 <free>
        data_ = d;
   b7b2e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7b30:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7b32:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7b34:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7b36:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7b3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7b3e:	4631      	mov	r1, r6
   b7b40:	f106 0008 	add.w	r0, r6, #8
   b7b44:	f7ff ffae 	bl	b7aa4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7b48:	b11e      	cbz	r6, b7b52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7b4a:	4669      	mov	r1, sp
   b7b4c:	4630      	mov	r0, r6
   b7b4e:	f7ff fe44 	bl	b77da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7b52:	6863      	ldr	r3, [r4, #4]
   b7b54:	3301      	adds	r3, #1
   b7b56:	6063      	str	r3, [r4, #4]
    return true;
   b7b58:	2501      	movs	r5, #1
   b7b5a:	a801      	add	r0, sp, #4
   b7b5c:	f7fd f93e 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7b60:	4628      	mov	r0, r5
   b7b62:	b003      	add	sp, #12
   b7b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7b66:	2500      	movs	r5, #0
   b7b68:	e7de      	b.n	b7b28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7b6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7b6c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7b70:	4605      	mov	r5, r0
   b7b72:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7b74:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7b78:	42a6      	cmp	r6, r4
   b7b7a:	d005      	beq.n	b7b88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7b7c:	4639      	mov	r1, r7
   b7b7e:	4620      	mov	r0, r4
   b7b80:	f7ff fcf1 	bl	b7566 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7b84:	b108      	cbz	r0, b7b8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7b86:	b914      	cbnz	r4, b7b8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7b8a:	3408      	adds	r4, #8
   b7b8c:	e7f4      	b.n	b7b78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7b8e:	1d20      	adds	r0, r4, #4
   b7b90:	f7fd f924 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7b94:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7b98:	f104 0108 	add.w	r1, r4, #8
   b7b9c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7ba0:	4620      	mov	r0, r4
   b7ba2:	f7ff ff7f 	bl	b7aa4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7ba6:	686b      	ldr	r3, [r5, #4]
   b7ba8:	3b01      	subs	r3, #1
   b7baa:	606b      	str	r3, [r5, #4]
    return true;
   b7bac:	e7ec      	b.n	b7b88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7bb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bb4:	4605      	mov	r5, r0
   b7bb6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7bb8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7bba:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7bbc:	f7ff fb10 	bl	b71e0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7bc0:	682e      	ldr	r6, [r5, #0]
   b7bc2:	1ef3      	subs	r3, r6, #3
   b7bc4:	2b0d      	cmp	r3, #13
   b7bc6:	d83c      	bhi.n	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7bc8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7bcc:	0053000e 	.word	0x0053000e
   b7bd0:	00d1003b 	.word	0x00d1003b
   b7bd4:	003b003b 	.word	0x003b003b
   b7bd8:	003b003b 	.word	0x003b003b
   b7bdc:	009b003b 	.word	0x009b003b
   b7be0:	009b009b 	.word	0x009b009b
   b7be4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7be8:	a804      	add	r0, sp, #16
   b7bea:	f7ff fc87 	bl	b74fc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7bee:	9b04      	ldr	r3, [sp, #16]
   b7bf0:	89aa      	ldrh	r2, [r5, #12]
   b7bf2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7bf4:	6869      	ldr	r1, [r5, #4]
   b7bf6:	9804      	ldr	r0, [sp, #16]
   b7bf8:	3108      	adds	r1, #8
   b7bfa:	3002      	adds	r0, #2
   b7bfc:	f7ff fb0a 	bl	b7214 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7c00:	a904      	add	r1, sp, #16
   b7c02:	a806      	add	r0, sp, #24
   b7c04:	f7ff fde9 	bl	b77da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7c08:	a906      	add	r1, sp, #24
   b7c0a:	f104 0018 	add.w	r0, r4, #24
   b7c0e:	f7ff ff73 	bl	b7af8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7c12:	4605      	mov	r5, r0
   b7c14:	a807      	add	r0, sp, #28
   b7c16:	f7fd f8e1 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c1a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7c1c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7c1e:	b9b5      	cbnz	r5, b7c4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7c20:	4b5d      	ldr	r3, [pc, #372]	; (b7d98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b7c22:	495e      	ldr	r1, [pc, #376]	; (b7d9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7c24:	9300      	str	r3, [sp, #0]
   b7c26:	2032      	movs	r0, #50	; 0x32
   b7c28:	462b      	mov	r3, r5
   b7c2a:	aa06      	add	r2, sp, #24
   b7c2c:	9507      	str	r5, [sp, #28]
   b7c2e:	f7fe fef5 	bl	b6a1c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7c32:	9b04      	ldr	r3, [sp, #16]
   b7c34:	4629      	mov	r1, r5
   b7c36:	8818      	ldrh	r0, [r3, #0]
   b7c38:	f7fe fd58 	bl	b66ec <hal_ble_gap_disconnect>
   b7c3c:	a805      	add	r0, sp, #20
   b7c3e:	f7fd f8cd 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7c42:	a803      	add	r0, sp, #12
   b7c44:	f7ff fada 	bl	b71fc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7c48:	b00e      	add	sp, #56	; 0x38
   b7c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7c4e:	4a54      	ldr	r2, [pc, #336]	; (b7da0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7c50:	9200      	str	r2, [sp, #0]
   b7c52:	2300      	movs	r3, #0
   b7c54:	4951      	ldr	r1, [pc, #324]	; (b7d9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7c56:	9307      	str	r3, [sp, #28]
   b7c58:	aa06      	add	r2, sp, #24
   b7c5a:	2001      	movs	r0, #1
   b7c5c:	f7fe fede 	bl	b6a1c <log_message>
                if (impl->connectedCallback_) {
   b7c60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7c62:	2b00      	cmp	r3, #0
   b7c64:	d0ea      	beq.n	b7c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b7c66:	a904      	add	r1, sp, #16
   b7c68:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7c6c:	f7ff fe37 	bl	b78de <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7c70:	e7e4      	b.n	b7c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7c72:	89a9      	ldrh	r1, [r5, #12]
   b7c74:	4620      	mov	r0, r4
   b7c76:	f7ff fc0b 	bl	b7490 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7c7a:	4606      	mov	r6, r0
   b7c7c:	2800      	cmp	r0, #0
   b7c7e:	d0e0      	beq.n	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7c80:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7c82:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7c86:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7c8a:	8029      	strh	r1, [r5, #0]
   b7c8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7c90:	429a      	cmp	r2, r3
   b7c92:	d003      	beq.n	b7c9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7c94:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7c98:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7c9a:	e7f9      	b.n	b7c90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b7c9c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7ca0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7ca4:	45b8      	cmp	r8, r7
   b7ca6:	d004      	beq.n	b7cb2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7ca8:	1d38      	adds	r0, r7, #4
   b7caa:	f7fd f897 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7cae:	3708      	adds	r7, #8
   b7cb0:	e7f8      	b.n	b7ca4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7cb2:	2300      	movs	r3, #0
   b7cb4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7cb6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7cba:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7cbe:	45b8      	cmp	r8, r7
   b7cc0:	d004      	beq.n	b7ccc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7cc2:	1d38      	adds	r0, r7, #4
   b7cc4:	f7fd f88a 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7cc8:	3708      	adds	r7, #8
   b7cca:	e7f8      	b.n	b7cbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7ccc:	2300      	movs	r3, #0
   b7cce:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7cd0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7cd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7cd4:	b123      	cbz	r3, b7ce0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7cd6:	4631      	mov	r1, r6
   b7cd8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7cdc:	f7ff fdff 	bl	b78de <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7ce0:	2300      	movs	r3, #0
   b7ce2:	2220      	movs	r2, #32
   b7ce4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7ce8:	4a2e      	ldr	r2, [pc, #184]	; (b7da4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7cea:	9200      	str	r2, [sp, #0]
   b7cec:	492b      	ldr	r1, [pc, #172]	; (b7d9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7cee:	aa06      	add	r2, sp, #24
   b7cf0:	2001      	movs	r0, #1
   b7cf2:	f7fe fe93 	bl	b6a1c <log_message>
                    impl->peers_.removeOne(*peer);
   b7cf6:	4631      	mov	r1, r6
   b7cf8:	f104 0018 	add.w	r0, r4, #24
   b7cfc:	f7ff ff35 	bl	b7b6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7d00:	e79f      	b.n	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7d02:	89a9      	ldrh	r1, [r5, #12]
   b7d04:	4620      	mov	r0, r4
   b7d06:	f7ff fbc3 	bl	b7490 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7d0a:	2800      	cmp	r0, #0
   b7d0c:	d099      	beq.n	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7d0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7d10:	2b00      	cmp	r3, #0
   b7d12:	d096      	beq.n	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7d14:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7d16:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7d18:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7d1c:	d001      	beq.n	b7d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7d1e:	2e10      	cmp	r6, #16
   b7d20:	d117      	bne.n	b7d52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b7d22:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7d24:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7d26:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7d28:	2506      	movs	r5, #6
                        };
   b7d2a:	f88d 3015 	strb.w	r3, [sp, #21]
   b7d2e:	9104      	str	r1, [sp, #16]
   b7d30:	f88d 2014 	strb.w	r2, [sp, #20]
   b7d34:	9006      	str	r0, [sp, #24]
   b7d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7d3a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7d3c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7d40:	9508      	str	r5, [sp, #32]
   b7d42:	e883 0003 	stmia.w	r3, {r0, r1}
   b7d46:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7d48:	a906      	add	r1, sp, #24
   b7d4a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7d4e:	4798      	blx	r3
   b7d50:	e777      	b.n	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7d52:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7d54:	bf01      	itttt	eq
   b7d56:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7d58:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7d5a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7d5e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7d60:	bf0f      	iteee	eq
   b7d62:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7d66:	461a      	movne	r2, r3
   b7d68:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7d6a:	461d      	movne	r5, r3
   b7d6c:	e7dd      	b.n	b7d2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7d6e:	89a9      	ldrh	r1, [r5, #12]
   b7d70:	4620      	mov	r0, r4
   b7d72:	f7ff fb8d 	bl	b7490 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7d76:	4601      	mov	r1, r0
   b7d78:	2800      	cmp	r0, #0
   b7d7a:	f43f af62 	beq.w	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7d7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7d80:	2b00      	cmp	r3, #0
   b7d82:	f43f af5e 	beq.w	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7d86:	686b      	ldr	r3, [r5, #4]
   b7d88:	9306      	str	r3, [sp, #24]
   b7d8a:	aa06      	add	r2, sp, #24
   b7d8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7d8e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7d92:	4798      	blx	r3
   b7d94:	e755      	b.n	b7c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7d96:	bf00      	nop
   b7d98:	000bc8a4 	.word	0x000bc8a4
   b7d9c:	000bc823 	.word	0x000bc823
   b7da0:	000bc8ca 	.word	0x000bc8ca
   b7da4:	000bc8e7 	.word	0x000bc8e7

000b7da8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7da8:	b513      	push	{r0, r1, r4, lr}
   b7daa:	460b      	mov	r3, r1
   b7dac:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dae:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7db2:	466c      	mov	r4, sp
   b7db4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7db8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7dbc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7dc0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7dc4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7dc8:	b002      	add	sp, #8
   b7dca:	bd10      	pop	{r4, pc}

000b7dcc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7dcc:	b538      	push	{r3, r4, r5, lr}
   b7dce:	4605      	mov	r5, r0
   b7dd0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7dd2:	f7ff ffe9 	bl	b7da8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dd6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7dd8:	68a2      	ldr	r2, [r4, #8]
   b7dda:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ddc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dde:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7de0:	68e2      	ldr	r2, [r4, #12]
   b7de2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7de4:	60e3      	str	r3, [r4, #12]
      }
   b7de6:	bd38      	pop	{r3, r4, r5, pc}

000b7de8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7de8:	b570      	push	{r4, r5, r6, lr}
   b7dea:	4604      	mov	r4, r0
   b7dec:	b08c      	sub	sp, #48	; 0x30
   b7dee:	460e      	mov	r6, r1
   b7df0:	9201      	str	r2, [sp, #4]
   b7df2:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7df4:	f7ff fb2c 	bl	b7450 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7df8:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7dfa:	9901      	ldr	r1, [sp, #4]
   b7dfc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7e00:	f7ff f89a 	bl	b6f38 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7e04:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7e08:	b1cd      	cbz	r5, b7e3e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7e0c:	9502      	str	r5, [sp, #8]
   b7e0e:	a902      	add	r1, sp, #8
   b7e10:	a804      	add	r0, sp, #16
   b7e12:	9303      	str	r3, [sp, #12]
   b7e14:	f7ff fcaa 	bl	b776c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7e18:	2300      	movs	r3, #0
	__x.swap(*this);
   b7e1a:	a908      	add	r1, sp, #32
   b7e1c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7e1e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7e20:	f7ff ffd4 	bl	b7dcc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7e24:	4631      	mov	r1, r6
   b7e26:	a808      	add	r0, sp, #32
   b7e28:	f7ff ffd0 	bl	b7dcc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7e2c:	a808      	add	r0, sp, #32
   b7e2e:	f7fd f9f8 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
   b7e32:	a804      	add	r0, sp, #16
   b7e34:	f7fd f9f5 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
    }
   b7e38:	4620      	mov	r0, r4
   b7e3a:	b00c      	add	sp, #48	; 0x30
   b7e3c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7e3e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7e40:	e7ea      	b.n	b7e18 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7e44 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e48:	b087      	sub	sp, #28
   b7e4a:	461d      	mov	r5, r3
   b7e4c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7e50:	4680      	mov	r8, r0
   b7e52:	468b      	mov	fp, r1
   b7e54:	4692      	mov	sl, r2
   b7e56:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7e58:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7e5a:	2200      	movs	r2, #0
   b7e5c:	2068      	movs	r0, #104	; 0x68
   b7e5e:	9102      	str	r1, [sp, #8]
   b7e60:	9204      	str	r2, [sp, #16]
   b7e62:	f7fc fe92 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b7e66:	1e06      	subs	r6, r0, #0
   b7e68:	f106 090c 	add.w	r9, r6, #12
   b7e6c:	d018      	beq.n	b7ea0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7e6e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7e70:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7e72:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7e76:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7e78:	4a15      	ldr	r2, [pc, #84]	; (b7ed0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7e7a:	f847 2b20 	str.w	r2, [r7], #32
   b7e7e:	9b03      	ldr	r3, [sp, #12]
   b7e80:	9100      	str	r1, [sp, #0]
   b7e82:	465a      	mov	r2, fp
   b7e84:	4651      	mov	r1, sl
   b7e86:	4648      	mov	r0, r9
   b7e88:	f7ff ffae 	bl	b7de8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e8e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7e90:	682b      	ldr	r3, [r5, #0]
   b7e92:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7e96:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7e9c:	6823      	ldr	r3, [r4, #0]
   b7e9e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7ea0:	a904      	add	r1, sp, #16
   b7ea2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7ea4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7ea8:	f7ff fd08 	bl	b78bc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7eac:	a805      	add	r0, sp, #20
   b7eae:	f7fc ff95 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7eb2:	f8d8 3000 	ldr.w	r3, [r8]
   b7eb6:	b93b      	cbnz	r3, b7ec8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7eb8:	4a06      	ldr	r2, [pc, #24]	; (b7ed4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7eba:	4907      	ldr	r1, [pc, #28]	; (b7ed8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7ebc:	200a      	movs	r0, #10
}
   b7ebe:	b007      	add	sp, #28
   b7ec0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7ec4:	f7fe bda2 	b.w	b6a0c <panic_>
}
   b7ec8:	b007      	add	sp, #28
   b7eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7ece:	bf00      	nop
   b7ed0:	000bc960 	.word	0x000bc960
   b7ed4:	000b665d 	.word	0x000b665d
   b7ed8:	000bc80c 	.word	0x000bc80c

000b7edc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7edc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ee0:	4604      	mov	r4, r0
   b7ee2:	460d      	mov	r5, r1
   b7ee4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7ee6:	d914      	bls.n	b7f12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7ee8:	4290      	cmp	r0, r2
   b7eea:	d213      	bcs.n	b7f14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7eec:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7ef0:	1a75      	subs	r5, r6, r1
   b7ef2:	f1a1 0708 	sub.w	r7, r1, #8
   b7ef6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7ef8:	42b7      	cmp	r7, r6
   b7efa:	d018      	beq.n	b7f2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7efc:	b11c      	cbz	r4, b7f06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7efe:	4631      	mov	r1, r6
   b7f00:	4620      	mov	r0, r4
   b7f02:	f7ff fc60 	bl	b77c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f06:	1d30      	adds	r0, r6, #4
   b7f08:	f7fc ff68 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7f0c:	3e08      	subs	r6, #8
   b7f0e:	3c08      	subs	r4, #8
   b7f10:	e7f2      	b.n	b7ef8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7f12:	d00c      	beq.n	b7f2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f14:	42b5      	cmp	r5, r6
   b7f16:	d00a      	beq.n	b7f2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7f18:	b11c      	cbz	r4, b7f22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7f1a:	4629      	mov	r1, r5
   b7f1c:	4620      	mov	r0, r4
   b7f1e:	f7ff fc52 	bl	b77c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f22:	1d28      	adds	r0, r5, #4
   b7f24:	f7fc ff5a 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7f28:	3508      	adds	r5, #8
   b7f2a:	3408      	adds	r4, #8
   b7f2c:	e7f2      	b.n	b7f14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7f30:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7f32:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7f34:	4605      	mov	r5, r0
        if (n > 0) {
   b7f36:	dd11      	ble.n	b7f5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7f38:	00f0      	lsls	r0, r6, #3
   b7f3a:	f7fe fe53 	bl	b6be4 <malloc>
            if (!d) {
   b7f3e:	4604      	mov	r4, r0
   b7f40:	b158      	cbz	r0, b7f5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7f42:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7f46:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7f4a:	f7ff ffc7 	bl	b7edc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7f4e:	6828      	ldr	r0, [r5, #0]
   b7f50:	f7fe fe50 	bl	b6bf4 <free>
        data_ = d;
   b7f54:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7f56:	60ae      	str	r6, [r5, #8]
        return true;
   b7f58:	2001      	movs	r0, #1
    }
   b7f5a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7f5c:	2400      	movs	r4, #0
   b7f5e:	e7f6      	b.n	b7f4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7f60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f62:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7f64:	6845      	ldr	r5, [r0, #4]
   b7f66:	4668      	mov	r0, sp
   b7f68:	f7ff fc2d 	bl	b77c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f6c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7f70:	4299      	cmp	r1, r3
   b7f72:	da10      	bge.n	b7f96 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7f74:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7f76:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7f78:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7f7c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7f80:	4629      	mov	r1, r5
   b7f82:	f105 0008 	add.w	r0, r5, #8
   b7f86:	f7ff ffa9 	bl	b7edc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7f8a:	b98d      	cbnz	r5, b7fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7f8c:	6863      	ldr	r3, [r4, #4]
   b7f8e:	3301      	adds	r3, #1
   b7f90:	6063      	str	r3, [r4, #4]
    return true;
   b7f92:	2601      	movs	r6, #1
   b7f94:	e006      	b.n	b7fa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f96:	3101      	adds	r1, #1
   b7f98:	4620      	mov	r0, r4
   b7f9a:	f7ff ffc9 	bl	b7f30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7f9e:	4606      	mov	r6, r0
   b7fa0:	2800      	cmp	r0, #0
   b7fa2:	d1e7      	bne.n	b7f74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7fa4:	a801      	add	r0, sp, #4
   b7fa6:	f7fc ff19 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7faa:	4630      	mov	r0, r6
   b7fac:	b002      	add	sp, #8
   b7fae:	bd70      	pop	{r4, r5, r6, pc}
   b7fb0:	4669      	mov	r1, sp
   b7fb2:	4628      	mov	r0, r5
   b7fb4:	f7ff fc07 	bl	b77c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7fb8:	e7e8      	b.n	b7f8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7fba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7fba:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fbe:	4604      	mov	r4, r0
   b7fc0:	460d      	mov	r5, r1
   b7fc2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7fc4:	d914      	bls.n	b7ff0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7fc6:	4290      	cmp	r0, r2
   b7fc8:	d213      	bcs.n	b7ff2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7fca:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7fce:	1a75      	subs	r5, r6, r1
   b7fd0:	f1a1 0708 	sub.w	r7, r1, #8
   b7fd4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7fd6:	42b7      	cmp	r7, r6
   b7fd8:	d018      	beq.n	b800c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7fda:	b11c      	cbz	r4, b7fe4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7fdc:	4631      	mov	r1, r6
   b7fde:	4620      	mov	r0, r4
   b7fe0:	f7ff fbe3 	bl	b77aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7fe4:	1d30      	adds	r0, r6, #4
   b7fe6:	f7fc fef9 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7fea:	3e08      	subs	r6, #8
   b7fec:	3c08      	subs	r4, #8
   b7fee:	e7f2      	b.n	b7fd6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7ff0:	d00c      	beq.n	b800c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7ff2:	42b5      	cmp	r5, r6
   b7ff4:	d00a      	beq.n	b800c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7ff6:	b11c      	cbz	r4, b8000 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7ff8:	4629      	mov	r1, r5
   b7ffa:	4620      	mov	r0, r4
   b7ffc:	f7ff fbd5 	bl	b77aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8000:	1d28      	adds	r0, r5, #4
   b8002:	f7fc feeb 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8006:	3508      	adds	r5, #8
   b8008:	3408      	adds	r4, #8
   b800a:	e7f2      	b.n	b7ff2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b800c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b800e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b800e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8010:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8012:	4605      	mov	r5, r0
        if (n > 0) {
   b8014:	dd11      	ble.n	b803a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8016:	00f0      	lsls	r0, r6, #3
   b8018:	f7fe fde4 	bl	b6be4 <malloc>
            if (!d) {
   b801c:	4604      	mov	r4, r0
   b801e:	b158      	cbz	r0, b8038 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8020:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8024:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8028:	f7ff ffc7 	bl	b7fba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b802c:	6828      	ldr	r0, [r5, #0]
   b802e:	f7fe fde1 	bl	b6bf4 <free>
        data_ = d;
   b8032:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8034:	60ae      	str	r6, [r5, #8]
        return true;
   b8036:	2001      	movs	r0, #1
    }
   b8038:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b803a:	2400      	movs	r4, #0
   b803c:	e7f6      	b.n	b802c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b803e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b803e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8040:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8042:	6845      	ldr	r5, [r0, #4]
   b8044:	4668      	mov	r0, sp
   b8046:	f7ff fbb0 	bl	b77aa <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b804a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b804e:	4299      	cmp	r1, r3
   b8050:	da10      	bge.n	b8074 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8052:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8054:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8056:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b805a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b805e:	4629      	mov	r1, r5
   b8060:	f105 0008 	add.w	r0, r5, #8
   b8064:	f7ff ffa9 	bl	b7fba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8068:	b98d      	cbnz	r5, b808e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b806a:	6863      	ldr	r3, [r4, #4]
   b806c:	3301      	adds	r3, #1
   b806e:	6063      	str	r3, [r4, #4]
    return true;
   b8070:	2601      	movs	r6, #1
   b8072:	e006      	b.n	b8082 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8074:	3101      	adds	r1, #1
   b8076:	4620      	mov	r0, r4
   b8078:	f7ff ffc9 	bl	b800e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b807c:	4606      	mov	r6, r0
   b807e:	2800      	cmp	r0, #0
   b8080:	d1e7      	bne.n	b8052 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8082:	a801      	add	r0, sp, #4
   b8084:	f7fc feaa 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8088:	4630      	mov	r0, r6
   b808a:	b002      	add	sp, #8
   b808c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b808e:	4669      	mov	r1, sp
   b8090:	4628      	mov	r0, r5
   b8092:	f7ff fb8a 	bl	b77aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8096:	e7e8      	b.n	b806a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8098 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b809c:	4617      	mov	r7, r2
   b809e:	b0a1      	sub	sp, #132	; 0x84
   b80a0:	4680      	mov	r8, r0
    WiringBleLock lk;
   b80a2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b80a4:	460e      	mov	r6, r1
    WiringBleLock lk;
   b80a6:	f7ff f89b 	bl	b71e0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b80aa:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b80ac:	7923      	ldrb	r3, [r4, #4]
   b80ae:	b953      	cbnz	r3, b80c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b80b0:	4639      	mov	r1, r7
   b80b2:	4640      	mov	r0, r8
   b80b4:	f7ff fb79 	bl	b77aa <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b80b8:	a80a      	add	r0, sp, #40	; 0x28
   b80ba:	f7ff f89f 	bl	b71fc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b80be:	4640      	mov	r0, r8
   b80c0:	b021      	add	sp, #132	; 0x84
   b80c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b80c6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b80c8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b80cc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b80d0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b80d2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b80d6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b80da:	9b03      	ldr	r3, [sp, #12]
   b80dc:	429d      	cmp	r5, r3
   b80de:	d021      	beq.n	b8124 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b80e0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b80e4:	4658      	mov	r0, fp
   b80e6:	f109 0114 	add.w	r1, r9, #20
   b80ea:	f7ff f926 	bl	b733a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b80ee:	b1b8      	cbz	r0, b8120 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b80f0:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b80f4:	4650      	mov	r0, sl
   b80f6:	f7ff f920 	bl	b733a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b80fa:	b188      	cbz	r0, b8120 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b80fc:	6823      	ldr	r3, [r4, #0]
   b80fe:	f8d9 2000 	ldr.w	r2, [r9]
   b8102:	4053      	eors	r3, r2
   b8104:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8108:	d10a      	bne.n	b8120 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b810a:	2220      	movs	r2, #32
   b810c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8110:	4a5e      	ldr	r2, [pc, #376]	; (b828c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8112:	9200      	str	r2, [sp, #0]
   b8114:	aa15      	add	r2, sp, #84	; 0x54
   b8116:	495e      	ldr	r1, [pc, #376]	; (b8290 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8118:	2032      	movs	r0, #50	; 0x32
   b811a:	f7fe fc7f 	bl	b6a1c <log_message>
   b811e:	e7c7      	b.n	b80b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8120:	3508      	adds	r5, #8
   b8122:	e7da      	b.n	b80da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8124:	4650      	mov	r0, sl
   b8126:	f7ff f8d9 	bl	b72dc <_ZNK8particle7BleUuid7isValidEv>
   b812a:	b960      	cbnz	r0, b8146 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b812c:	4959      	ldr	r1, [pc, #356]	; (b8294 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b812e:	2201      	movs	r2, #1
   b8130:	a815      	add	r0, sp, #84	; 0x54
   b8132:	ad15      	add	r5, sp, #84	; 0x54
   b8134:	f7ff f8aa 	bl	b728c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b813a:	46d4      	mov	ip, sl
   b813c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8140:	682b      	ldr	r3, [r5, #0]
   b8142:	f8cc 3000 	str.w	r3, [ip]
   b8146:	6833      	ldr	r3, [r6, #0]
   b8148:	e9d3 5300 	ldrd	r5, r3, [r3]
   b814c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8150:	455d      	cmp	r5, fp
   b8152:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8154:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8156:	d06e      	beq.n	b8236 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8158:	f855 0b08 	ldr.w	r0, [r5], #8
   b815c:	f7ff f8ed 	bl	b733a <_ZNK8particle7BleUuideqERKS0_>
   b8160:	2800      	cmp	r0, #0
   b8162:	d0f5      	beq.n	b8150 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8164:	f104 0a14 	add.w	sl, r4, #20
   b8168:	4650      	mov	r0, sl
   b816a:	f7ff f8b7 	bl	b72dc <_ZNK8particle7BleUuid7isValidEv>
   b816e:	b988      	cbnz	r0, b8194 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8170:	4b49      	ldr	r3, [pc, #292]	; (b8298 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8172:	4948      	ldr	r1, [pc, #288]	; (b8294 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8174:	881a      	ldrh	r2, [r3, #0]
   b8176:	3201      	adds	r2, #1
   b8178:	b292      	uxth	r2, r2
   b817a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b817c:	a815      	add	r0, sp, #84	; 0x54
   b817e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8180:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8182:	f7ff f8a2 	bl	b72ca <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8188:	46d4      	mov	ip, sl
   b818a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b818e:	682b      	ldr	r3, [r5, #0]
   b8190:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8194:	4b41      	ldr	r3, [pc, #260]	; (b829c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8196:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8198:	2228      	movs	r2, #40	; 0x28
   b819a:	2100      	movs	r1, #0
   b819c:	a816      	add	r0, sp, #88	; 0x58
   b819e:	f002 f925 	bl	ba3ec <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b81a2:	4651      	mov	r1, sl
   b81a4:	a804      	add	r0, sp, #16
   b81a6:	f7ff f8ab 	bl	b7300 <_ZN8particle7BleUuid7halUUIDEv>
   b81aa:	ab04      	add	r3, sp, #16
   b81ac:	aa18      	add	r2, sp, #96	; 0x60
   b81ae:	f10d 0c20 	add.w	ip, sp, #32
   b81b2:	6818      	ldr	r0, [r3, #0]
   b81b4:	6859      	ldr	r1, [r3, #4]
   b81b6:	4615      	mov	r5, r2
   b81b8:	c503      	stmia	r5!, {r0, r1}
   b81ba:	3308      	adds	r3, #8
   b81bc:	4563      	cmp	r3, ip
   b81be:	462a      	mov	r2, r5
   b81c0:	d1f7      	bne.n	b81b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b81c2:	6818      	ldr	r0, [r3, #0]
   b81c4:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b81c6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b81c8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b81cc:	f8d9 3000 	ldr.w	r3, [r9]
   b81d0:	8a9b      	ldrh	r3, [r3, #20]
   b81d2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b81d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b81d8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b81da:	4b31      	ldr	r3, [pc, #196]	; (b82a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b81dc:	2200      	movs	r2, #0
   b81de:	1da1      	adds	r1, r4, #6
   b81e0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b81e2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b81e6:	f7fe fa95 	bl	b6714 <hal_ble_gatt_server_add_characteristic>
   b81ea:	2800      	cmp	r0, #0
   b81ec:	f47f af60 	bne.w	b80b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b81f0:	2301      	movs	r3, #1
   b81f2:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b81f4:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b81f6:	4639      	mov	r1, r7
        return characteristics_;
   b81f8:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b81fa:	a80d      	add	r0, sp, #52	; 0x34
   b81fc:	f7ff fad5 	bl	b77aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8200:	4620      	mov	r0, r4
   b8202:	a90d      	add	r1, sp, #52	; 0x34
   b8204:	f7ff ff1b 	bl	b803e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8208:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b820a:	a80e      	add	r0, sp, #56	; 0x38
   b820c:	f7fc fde6 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8210:	2c00      	cmp	r4, #0
   b8212:	f47f af4d 	bne.w	b80b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8216:	2320      	movs	r3, #32
   b8218:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b821c:	4b21      	ldr	r3, [pc, #132]	; (b82a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b821e:	9300      	str	r3, [sp, #0]
   b8220:	aa0d      	add	r2, sp, #52	; 0x34
   b8222:	4623      	mov	r3, r4
   b8224:	e777      	b.n	b8116 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8226:	4639      	mov	r1, r7
   b8228:	4640      	mov	r0, r8
   b822a:	f7ff fabe 	bl	b77aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b822e:	a80c      	add	r0, sp, #48	; 0x30
   b8230:	f7fc fdd4 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8234:	e740      	b.n	b80b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8236:	a80b      	add	r0, sp, #44	; 0x2c
   b8238:	f7ff f93c 	bl	b74b4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b823c:	4651      	mov	r1, sl
   b823e:	a815      	add	r0, sp, #84	; 0x54
   b8240:	f7ff f85e 	bl	b7300 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8246:	2300      	movs	r3, #0
   b8248:	3214      	adds	r2, #20
   b824a:	a915      	add	r1, sp, #84	; 0x54
   b824c:	2001      	movs	r0, #1
   b824e:	f7fe fa57 	bl	b6700 <hal_ble_gatt_server_add_service>
   b8252:	2800      	cmp	r0, #0
   b8254:	d1e7      	bne.n	b8226 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8256:	6835      	ldr	r5, [r6, #0]
   b8258:	a90b      	add	r1, sp, #44	; 0x2c
   b825a:	a80d      	add	r0, sp, #52	; 0x34
   b825c:	f7ff fab3 	bl	b77c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8260:	4628      	mov	r0, r5
   b8262:	a90d      	add	r1, sp, #52	; 0x34
   b8264:	f7ff fe7c 	bl	b7f60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8268:	4605      	mov	r5, r0
   b826a:	a80e      	add	r0, sp, #56	; 0x38
   b826c:	f7fc fdb6 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8270:	2d00      	cmp	r5, #0
   b8272:	d0d8      	beq.n	b8226 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8274:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8276:	6853      	ldr	r3, [r2, #4]
   b8278:	6812      	ldr	r2, [r2, #0]
   b827a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b827e:	3b01      	subs	r3, #1
   b8280:	a80c      	add	r0, sp, #48	; 0x30
   b8282:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8286:	f7fc fda9 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b828a:	e76b      	b.n	b8164 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b828c:	000bc906 	.word	0x000bc906
   b8290:	000bc823 	.word	0x000bc823
   b8294:	000bc9b4 	.word	0x000bc9b4
   b8298:	2003e5fc 	.word	0x2003e5fc
   b829c:	002c0003 	.word	0x002c0003
   b82a0:	000b764d 	.word	0x000b764d
   b82a4:	000bc931 	.word	0x000bc931

000b82a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b82a8:	4802      	ldr	r0, [pc, #8]	; (b82b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b82aa:	2300      	movs	r3, #0
   b82ac:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b82ae:	f7fe ba8d 	b.w	b67cc <os_mutex_recursive_create>
   b82b2:	bf00      	nop
   b82b4:	2003e600 	.word	0x2003e600

000b82b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b82b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82ba:	4606      	mov	r6, r0
   b82bc:	460d      	mov	r5, r1
  size_t n = 0;
   b82be:	188f      	adds	r7, r1, r2
   b82c0:	2400      	movs	r4, #0
  while (size--) {
   b82c2:	42bd      	cmp	r5, r7
   b82c4:	d00c      	beq.n	b82e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b82c6:	6833      	ldr	r3, [r6, #0]
   b82c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b82cc:	689b      	ldr	r3, [r3, #8]
   b82ce:	4630      	mov	r0, r6
   b82d0:	4798      	blx	r3
     if (chunk>=0)
   b82d2:	1e03      	subs	r3, r0, #0
   b82d4:	db01      	blt.n	b82da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b82d6:	441c      	add	r4, r3
  while (size--) {
   b82d8:	e7f3      	b.n	b82c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b82da:	2c00      	cmp	r4, #0
   b82dc:	bf08      	it	eq
   b82de:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b82e0:	4620      	mov	r0, r4
   b82e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b82e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b82e4:	b513      	push	{r0, r1, r4, lr}
   b82e6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b82e8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b82ea:	b159      	cbz	r1, b8304 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b82ec:	9101      	str	r1, [sp, #4]
   b82ee:	f7fc fbf1 	bl	b4ad4 <strlen>
   b82f2:	6823      	ldr	r3, [r4, #0]
   b82f4:	9901      	ldr	r1, [sp, #4]
   b82f6:	68db      	ldr	r3, [r3, #12]
   b82f8:	4602      	mov	r2, r0
   b82fa:	4620      	mov	r0, r4
    }
   b82fc:	b002      	add	sp, #8
   b82fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8302:	4718      	bx	r3
    }
   b8304:	b002      	add	sp, #8
   b8306:	bd10      	pop	{r4, pc}

000b8308 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8308:	6803      	ldr	r3, [r0, #0]
   b830a:	689b      	ldr	r3, [r3, #8]
   b830c:	4718      	bx	r3

000b830e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b830e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8310:	210d      	movs	r1, #13
{
   b8312:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8314:	f7ff fff8 	bl	b8308 <_ZN5Print5printEc>
  n += print('\n');
   b8318:	210a      	movs	r1, #10
  size_t n = print('\r');
   b831a:	4604      	mov	r4, r0
  n += print('\n');
   b831c:	4628      	mov	r0, r5
   b831e:	f7ff fff3 	bl	b8308 <_ZN5Print5printEc>
  return n;
}
   b8322:	4420      	add	r0, r4
   b8324:	bd38      	pop	{r3, r4, r5, pc}

000b8326 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8326:	b538      	push	{r3, r4, r5, lr}
   b8328:	4605      	mov	r5, r0
  return write(str);
   b832a:	f7ff ffdb 	bl	b82e4 <_ZN5Print5writeEPKc>
   b832e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8330:	4628      	mov	r0, r5
   b8332:	f7ff ffec 	bl	b830e <_ZN5Print7printlnEv>
  return n;
}
   b8336:	4420      	add	r0, r4
   b8338:	bd38      	pop	{r3, r4, r5, pc}

000b833a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b833a:	b530      	push	{r4, r5, lr}
   b833c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b833e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8340:	2a01      	cmp	r2, #1
  *str = '\0';
   b8342:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8346:	bf98      	it	ls
   b8348:	220a      	movls	r2, #10
   b834a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b834c:	460d      	mov	r5, r1
   b834e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8352:	fb01 5312 	mls	r3, r1, r2, r5
   b8356:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b835a:	2b09      	cmp	r3, #9
   b835c:	bf94      	ite	ls
   b835e:	3330      	addls	r3, #48	; 0x30
   b8360:	3337      	addhi	r3, #55	; 0x37
   b8362:	b2db      	uxtb	r3, r3
  } while(n);
   b8364:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8366:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b836a:	d9ef      	bls.n	b834c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b836c:	4621      	mov	r1, r4
   b836e:	f7ff ffb9 	bl	b82e4 <_ZN5Print5writeEPKc>
}
   b8372:	b00b      	add	sp, #44	; 0x2c
   b8374:	bd30      	pop	{r4, r5, pc}

000b8376 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b837a:	b086      	sub	sp, #24
   b837c:	af00      	add	r7, sp, #0
   b837e:	4605      	mov	r5, r0
   b8380:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8382:	1d38      	adds	r0, r7, #4
   b8384:	2114      	movs	r1, #20
{
   b8386:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8388:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b838a:	f7fe fc4b 	bl	b6c24 <vsnprintf>

    if (n<bufsize)
   b838e:	2813      	cmp	r0, #19
   b8390:	d80e      	bhi.n	b83b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8392:	1d39      	adds	r1, r7, #4
   b8394:	4628      	mov	r0, r5
   b8396:	f7ff ffa5 	bl	b82e4 <_ZN5Print5writeEPKc>
   b839a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b839c:	b11e      	cbz	r6, b83a6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b839e:	4628      	mov	r0, r5
   b83a0:	f7ff ffb5 	bl	b830e <_ZN5Print7printlnEv>
   b83a4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b83a6:	4620      	mov	r0, r4
   b83a8:	3718      	adds	r7, #24
   b83aa:	46bd      	mov	sp, r7
   b83ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b83b0:	f100 0308 	add.w	r3, r0, #8
   b83b4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b83b8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b83ba:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b83be:	4622      	mov	r2, r4
   b83c0:	1c41      	adds	r1, r0, #1
   b83c2:	683b      	ldr	r3, [r7, #0]
   b83c4:	4668      	mov	r0, sp
   b83c6:	f7fe fc2d 	bl	b6c24 <vsnprintf>
  return write(str);
   b83ca:	4669      	mov	r1, sp
   b83cc:	4628      	mov	r0, r5
   b83ce:	f7ff ff89 	bl	b82e4 <_ZN5Print5writeEPKc>
   b83d2:	4604      	mov	r4, r0
   b83d4:	46c5      	mov	sp, r8
   b83d6:	e7e1      	b.n	b839c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b83d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b83d8:	4b01      	ldr	r3, [pc, #4]	; (b83e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b83da:	4a02      	ldr	r2, [pc, #8]	; (b83e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b83dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b83de:	4770      	bx	lr
   b83e0:	2003e608 	.word	0x2003e608
   b83e4:	000bc9d4 	.word	0x000bc9d4

000b83e8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b83e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b83ec:	4a15      	ldr	r2, [pc, #84]	; (b8444 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b83ee:	f8df 8060 	ldr.w	r8, [pc, #96]	; b8450 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b83f2:	e9d2 6300 	ldrd	r6, r3, [r2]
   b83f6:	1980      	adds	r0, r0, r6
   b83f8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b83fc:	4b12      	ldr	r3, [pc, #72]	; (b8448 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b83fe:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b8402:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8406:	1986      	adds	r6, r0, r6
   b8408:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b840c:	42bb      	cmp	r3, r7
   b840e:	bf08      	it	eq
   b8410:	42b2      	cmpeq	r2, r6
{
   b8412:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8414:	d013      	beq.n	b843e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8416:	a903      	add	r1, sp, #12
   b8418:	4668      	mov	r0, sp
   b841a:	e9cd 6700 	strd	r6, r7, [sp]
   b841e:	f7fe fc31 	bl	b6c84 <localtime_r>
	calendar_time.tm_year += 1900;
   b8422:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8424:	4d09      	ldr	r5, [pc, #36]	; (b844c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8426:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b842a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b842c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b842e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8436:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b843a:	6823      	ldr	r3, [r4, #0]
   b843c:	602b      	str	r3, [r5, #0]
    }
}
   b843e:	b00c      	add	sp, #48	; 0x30
   b8440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8444:	2003e640 	.word	0x2003e640
   b8448:	2003e638 	.word	0x2003e638
   b844c:	2003e610 	.word	0x2003e610
   b8450:	2003e648 	.word	0x2003e648

000b8454 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8454:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8456:	2000      	movs	r0, #0
   b8458:	f7fe fbb4 	bl	b6bc4 <spark_sync_time_pending>
   b845c:	b128      	cbz	r0, b846a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b845e:	f7fe fb99 	bl	b6b94 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8462:	f080 0001 	eor.w	r0, r0, #1
   b8466:	b2c0      	uxtb	r0, r0
    }
   b8468:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b846a:	2001      	movs	r0, #1
   b846c:	e7fc      	b.n	b8468 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b8470 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b8470:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b8472:	f7ff ffb9 	bl	b83e8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b8476:	4b02      	ldr	r3, [pc, #8]	; (b8480 <_ZN9TimeClass5monthEx+0x10>)
   b8478:	6918      	ldr	r0, [r3, #16]
}
   b847a:	3001      	adds	r0, #1
   b847c:	bd08      	pop	{r3, pc}
   b847e:	bf00      	nop
   b8480:	2003e610 	.word	0x2003e610

000b8484 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8484:	b530      	push	{r4, r5, lr}
   b8486:	b093      	sub	sp, #76	; 0x4c
   b8488:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b848c:	4b19      	ldr	r3, [pc, #100]	; (b84f4 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b848e:	4604      	mov	r4, r0
    t += time_zone_cache;
   b8490:	e9d3 1000 	ldrd	r1, r0, [r3]
   b8494:	9b01      	ldr	r3, [sp, #4]
   b8496:	1852      	adds	r2, r2, r1
   b8498:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b849c:	4816      	ldr	r0, [pc, #88]	; (b84f8 <_ZN9TimeClass7timeStrEx+0x74>)
   b849e:	e9d0 1000 	ldrd	r1, r0, [r0]
   b84a2:	1852      	adds	r2, r2, r1
   b84a4:	eb43 0300 	adc.w	r3, r3, r0
   b84a8:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b84ac:	2224      	movs	r2, #36	; 0x24
   b84ae:	eb0d 0002 	add.w	r0, sp, r2
   b84b2:	2100      	movs	r1, #0
   b84b4:	f001 ff9a 	bl	ba3ec <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b84b8:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b84ba:	a909      	add	r1, sp, #36	; 0x24
   b84bc:	4668      	mov	r0, sp
   b84be:	f7fe fbe1 	bl	b6c84 <localtime_r>
    char ascstr[26] = {};
   b84c2:	2216      	movs	r2, #22
   b84c4:	4629      	mov	r1, r5
   b84c6:	a803      	add	r0, sp, #12
   b84c8:	9502      	str	r5, [sp, #8]
   b84ca:	f001 ff8f 	bl	ba3ec <memset>
    asctime_r(&calendar_time, ascstr);
   b84ce:	a902      	add	r1, sp, #8
   b84d0:	a809      	add	r0, sp, #36	; 0x24
   b84d2:	f001 ff13 	bl	ba2fc <asctime_r>
    int len = strlen(ascstr);
   b84d6:	a802      	add	r0, sp, #8
   b84d8:	f7fc fafc 	bl	b4ad4 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b84dc:	ab12      	add	r3, sp, #72	; 0x48
   b84de:	4418      	add	r0, r3
    return String(ascstr);
   b84e0:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b84e2:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b84e6:	4620      	mov	r0, r4
   b84e8:	f7fe fcf8 	bl	b6edc <_ZN6StringC1EPK19__FlashStringHelper>
}
   b84ec:	4620      	mov	r0, r4
   b84ee:	b013      	add	sp, #76	; 0x4c
   b84f0:	bd30      	pop	{r4, r5, pc}
   b84f2:	bf00      	nop
   b84f4:	2003e640 	.word	0x2003e640
   b84f8:	2003e638 	.word	0x2003e638

000b84fc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b84fc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b84fe:	2000      	movs	r0, #0
   b8500:	f7fe f8bc 	bl	b667c <hal_rtc_time_is_valid>
    if (rtcstate)
   b8504:	4604      	mov	r4, r0
   b8506:	b9a0      	cbnz	r0, b8532 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8508:	f7fe fa90 	bl	b6a2c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b850c:	2801      	cmp	r0, #1
   b850e:	d110      	bne.n	b8532 <_ZN9TimeClass7isValidEv+0x36>
   b8510:	4620      	mov	r0, r4
   b8512:	f7fe fabb 	bl	b6a8c <system_thread_get_state>
   b8516:	b960      	cbnz	r0, b8532 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8518:	f7ff ff9c 	bl	b8454 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b851c:	b910      	cbnz	r0, b8524 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b851e:	f7fe fb31 	bl	b6b84 <spark_process>
        while (_while() && !_condition()) {
   b8522:	e7f9      	b.n	b8518 <_ZN9TimeClass7isValidEv+0x1c>
   b8524:	f7ff ff96 	bl	b8454 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b852c:	2000      	movs	r0, #0
   b852e:	f7fe b8a5 	b.w	b667c <hal_rtc_time_is_valid>
}
   b8532:	4620      	mov	r0, r4
   b8534:	bd10      	pop	{r4, pc}

000b8536 <_ZN9TimeClass3nowEv>:
{
   b8536:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8538:	f7ff ffe0 	bl	b84fc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b853c:	2210      	movs	r2, #16
   b853e:	2100      	movs	r1, #0
   b8540:	4668      	mov	r0, sp
   b8542:	f001 ff53 	bl	ba3ec <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8546:	2100      	movs	r1, #0
   b8548:	4668      	mov	r0, sp
   b854a:	f7fe f89f 	bl	b668c <hal_rtc_get_time>
}
   b854e:	9800      	ldr	r0, [sp, #0]
   b8550:	b005      	add	sp, #20
   b8552:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8558 <_ZN9TimeClass4hourEv>:
{
   b8558:	b508      	push	{r3, lr}
	return hour(now());
   b855a:	f7ff ffec 	bl	b8536 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b855e:	17c1      	asrs	r1, r0, #31
   b8560:	f7ff ff42 	bl	b83e8 <_ZL22Refresh_UnixTime_Cachex>
}
   b8564:	4b01      	ldr	r3, [pc, #4]	; (b856c <_ZN9TimeClass4hourEv+0x14>)
   b8566:	6898      	ldr	r0, [r3, #8]
   b8568:	bd08      	pop	{r3, pc}
   b856a:	bf00      	nop
   b856c:	2003e610 	.word	0x2003e610

000b8570 <_ZN9TimeClass6minuteEv>:
{
   b8570:	b508      	push	{r3, lr}
	return minute(now());
   b8572:	f7ff ffe0 	bl	b8536 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8576:	17c1      	asrs	r1, r0, #31
   b8578:	f7ff ff36 	bl	b83e8 <_ZL22Refresh_UnixTime_Cachex>
}
   b857c:	4b01      	ldr	r3, [pc, #4]	; (b8584 <_ZN9TimeClass6minuteEv+0x14>)
   b857e:	6858      	ldr	r0, [r3, #4]
   b8580:	bd08      	pop	{r3, pc}
   b8582:	bf00      	nop
   b8584:	2003e610 	.word	0x2003e610

000b8588 <_ZN9TimeClass3dayEv>:
{
   b8588:	b508      	push	{r3, lr}
	return day(now());
   b858a:	f7ff ffd4 	bl	b8536 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b858e:	17c1      	asrs	r1, r0, #31
   b8590:	f7ff ff2a 	bl	b83e8 <_ZL22Refresh_UnixTime_Cachex>
}
   b8594:	4b01      	ldr	r3, [pc, #4]	; (b859c <_ZN9TimeClass3dayEv+0x14>)
   b8596:	68d8      	ldr	r0, [r3, #12]
   b8598:	bd08      	pop	{r3, pc}
   b859a:	bf00      	nop
   b859c:	2003e610 	.word	0x2003e610

000b85a0 <_ZN9TimeClass5monthEv>:
{
   b85a0:	b508      	push	{r3, lr}
	return month(now());
   b85a2:	f7ff ffc8 	bl	b8536 <_ZN9TimeClass3nowEv>
}
   b85a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b85aa:	17c1      	asrs	r1, r0, #31
   b85ac:	f7ff bf60 	b.w	b8470 <_ZN9TimeClass5monthEx>

000b85b0 <_ZN9TimeClass4yearEv>:
{
   b85b0:	b508      	push	{r3, lr}
	return year(now());
   b85b2:	f7ff ffc0 	bl	b8536 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b85b6:	17c1      	asrs	r1, r0, #31
   b85b8:	f7ff ff16 	bl	b83e8 <_ZL22Refresh_UnixTime_Cachex>
}
   b85bc:	4b01      	ldr	r3, [pc, #4]	; (b85c4 <_ZN9TimeClass4yearEv+0x14>)
   b85be:	6958      	ldr	r0, [r3, #20]
   b85c0:	bd08      	pop	{r3, pc}
   b85c2:	bf00      	nop
   b85c4:	2003e610 	.word	0x2003e610

000b85c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b85c8:	4b02      	ldr	r3, [pc, #8]	; (b85d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b85ca:	681a      	ldr	r2, [r3, #0]
   b85cc:	4b02      	ldr	r3, [pc, #8]	; (b85d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b85ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b85d0:	4770      	bx	lr
   b85d2:	bf00      	nop
   b85d4:	2003e2a8 	.word	0x2003e2a8
   b85d8:	2003e60c 	.word	0x2003e60c

000b85dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b85dc:	2100      	movs	r1, #0
   b85de:	f7fe ba35 	b.w	b6a4c <system_delay_ms>
	...

000b85e4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b85e4:	b510      	push	{r4, lr}
   b85e6:	4b04      	ldr	r3, [pc, #16]	; (b85f8 <_ZN9TCPClientD1Ev+0x14>)
   b85e8:	6003      	str	r3, [r0, #0]
   b85ea:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b85ec:	6980      	ldr	r0, [r0, #24]
   b85ee:	b108      	cbz	r0, b85f4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b85f0:	f7fe fdcd 	bl	b718e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b85f4:	4620      	mov	r0, r4
   b85f6:	bd10      	pop	{r4, pc}
   b85f8:	000bcae8 	.word	0x000bcae8

000b85fc <_ZN9TCPClientD0Ev>:
   b85fc:	b510      	push	{r4, lr}
   b85fe:	4604      	mov	r4, r0
   b8600:	f7ff fff0 	bl	b85e4 <_ZN9TCPClientD1Ev>
   b8604:	4620      	mov	r0, r4
   b8606:	211c      	movs	r1, #28
   b8608:	f7fc fac7 	bl	b4b9a <_ZdlPvj>
   b860c:	4620      	mov	r0, r4
   b860e:	bd10      	pop	{r4, pc}

000b8610 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8610:	4b01      	ldr	r3, [pc, #4]	; (b8618 <_GLOBAL__sub_I_RGB+0x8>)
   b8612:	2200      	movs	r2, #0
   b8614:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8616:	4770      	bx	lr
   b8618:	2003e650 	.word	0x2003e650

000b861c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b861c:	4b01      	ldr	r3, [pc, #4]	; (b8624 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b861e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8620:	4770      	bx	lr
   b8622:	bf00      	nop
   b8624:	2003e2ac 	.word	0x2003e2ac

000b8628 <serialEventRun>:
{
   b8628:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b862a:	4b0b      	ldr	r3, [pc, #44]	; (b8658 <serialEventRun+0x30>)
   b862c:	b143      	cbz	r3, b8640 <serialEventRun+0x18>
   b862e:	f000 fc1f 	bl	b8e70 <_Z16_fetch_usbserialv>
   b8632:	6803      	ldr	r3, [r0, #0]
   b8634:	691b      	ldr	r3, [r3, #16]
   b8636:	4798      	blx	r3
   b8638:	2800      	cmp	r0, #0
   b863a:	dd01      	ble.n	b8640 <serialEventRun+0x18>
        serialEvent();
   b863c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8640:	4b06      	ldr	r3, [pc, #24]	; (b865c <serialEventRun+0x34>)
   b8642:	b143      	cbz	r3, b8656 <serialEventRun+0x2e>
   b8644:	f001 f964 	bl	b9910 <_Z22__fetch_global_Serial1v>
   b8648:	6803      	ldr	r3, [r0, #0]
   b864a:	691b      	ldr	r3, [r3, #16]
   b864c:	4798      	blx	r3
   b864e:	2800      	cmp	r0, #0
   b8650:	dd01      	ble.n	b8656 <serialEventRun+0x2e>
        serialEvent1();
   b8652:	f3af 8000 	nop.w
}
   b8656:	bd08      	pop	{r3, pc}
	...

000b8660 <_post_loop>:
{
   b8660:	b508      	push	{r3, lr}
	serialEventRun();
   b8662:	f7ff ffe1 	bl	b8628 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8666:	f7fe f801 	bl	b666c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b866a:	4b01      	ldr	r3, [pc, #4]	; (b8670 <_post_loop+0x10>)
   b866c:	6018      	str	r0, [r3, #0]
}
   b866e:	bd08      	pop	{r3, pc}
   b8670:	2003e744 	.word	0x2003e744

000b8674 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8674:	4805      	ldr	r0, [pc, #20]	; (b868c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8676:	4a06      	ldr	r2, [pc, #24]	; (b8690 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8678:	4906      	ldr	r1, [pc, #24]	; (b8694 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b867a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b867c:	1a12      	subs	r2, r2, r0
   b867e:	f001 fe8d 	bl	ba39c <memcpy>
    __backup_sram_signature = signature;
   b8682:	4b05      	ldr	r3, [pc, #20]	; (b8698 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8684:	4a05      	ldr	r2, [pc, #20]	; (b869c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8686:	601a      	str	r2, [r3, #0]
}
   b8688:	bd08      	pop	{r3, pc}
   b868a:	bf00      	nop
   b868c:	2003f400 	.word	0x2003f400
   b8690:	2003f404 	.word	0x2003f404
   b8694:	000bd45c 	.word	0x000bd45c
   b8698:	2003f400 	.word	0x2003f400
   b869c:	9a271c1e 	.word	0x9a271c1e

000b86a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b86a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b86a2:	2300      	movs	r3, #0
   b86a4:	9300      	str	r3, [sp, #0]
   b86a6:	461a      	mov	r2, r3
   b86a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b86ac:	f7fe fa00 	bl	b6ab0 <system_ctrl_set_result>
}
   b86b0:	b003      	add	sp, #12
   b86b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b86b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b86b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b86ba:	8843      	ldrh	r3, [r0, #2]
   b86bc:	2b0a      	cmp	r3, #10
   b86be:	d008      	beq.n	b86d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b86c0:	2b50      	cmp	r3, #80	; 0x50
   b86c2:	d10b      	bne.n	b86dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b86c4:	4b09      	ldr	r3, [pc, #36]	; (b86ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b86c6:	681b      	ldr	r3, [r3, #0]
   b86c8:	b14b      	cbz	r3, b86de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b86ca:	b003      	add	sp, #12
   b86cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b86d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b86d2:	f7ff ffe5 	bl	b86a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b86d6:	b003      	add	sp, #12
   b86d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b86dc:	2300      	movs	r3, #0
   b86de:	9300      	str	r3, [sp, #0]
   b86e0:	461a      	mov	r2, r3
   b86e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b86e6:	f7fe f9e3 	bl	b6ab0 <system_ctrl_set_result>
}
   b86ea:	e7f4      	b.n	b86d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b86ec:	2003e664 	.word	0x2003e664

000b86f0 <module_user_init_hook>:
{
   b86f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b86f2:	4812      	ldr	r0, [pc, #72]	; (b873c <module_user_init_hook+0x4c>)
   b86f4:	2100      	movs	r1, #0
   b86f6:	f7fe fabd 	bl	b6c74 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b86fa:	4b11      	ldr	r3, [pc, #68]	; (b8740 <module_user_init_hook+0x50>)
   b86fc:	681a      	ldr	r2, [r3, #0]
   b86fe:	4b11      	ldr	r3, [pc, #68]	; (b8744 <module_user_init_hook+0x54>)
   b8700:	429a      	cmp	r2, r3
   b8702:	4b11      	ldr	r3, [pc, #68]	; (b8748 <module_user_init_hook+0x58>)
   b8704:	bf0c      	ite	eq
   b8706:	2201      	moveq	r2, #1
   b8708:	2200      	movne	r2, #0
   b870a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b870c:	d001      	beq.n	b8712 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b870e:	f7ff ffb1 	bl	b8674 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8712:	f7fd ff9b 	bl	b664c <HAL_RNG_GetRandomNumber>
   b8716:	4604      	mov	r4, r0
    srand(seed);
   b8718:	f001 fe70 	bl	ba3fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b871c:	4b0b      	ldr	r3, [pc, #44]	; (b874c <module_user_init_hook+0x5c>)
   b871e:	b113      	cbz	r3, b8726 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8720:	4620      	mov	r0, r4
   b8722:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8726:	2100      	movs	r1, #0
   b8728:	4808      	ldr	r0, [pc, #32]	; (b874c <module_user_init_hook+0x5c>)
   b872a:	f7fe fa53 	bl	b6bd4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b872e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8732:	4807      	ldr	r0, [pc, #28]	; (b8750 <module_user_init_hook+0x60>)
   b8734:	2100      	movs	r1, #0
   b8736:	f7fe b9b1 	b.w	b6a9c <system_ctrl_set_app_request_handler>
   b873a:	bf00      	nop
   b873c:	000b861d 	.word	0x000b861d
   b8740:	2003f400 	.word	0x2003f400
   b8744:	9a271c1e 	.word	0x9a271c1e
   b8748:	2003e660 	.word	0x2003e660
   b874c:	00000000 	.word	0x00000000
   b8750:	000b86b9 	.word	0x000b86b9

000b8754 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8754:	4770      	bx	lr

000b8756 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b8756:	2000      	movs	r0, #0
   b8758:	4770      	bx	lr

000b875a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b875a:	b510      	push	{r4, lr}
   b875c:	2110      	movs	r1, #16
   b875e:	4604      	mov	r4, r0
   b8760:	f7fc fa1b 	bl	b4b9a <_ZdlPvj>
   b8764:	4620      	mov	r0, r4
   b8766:	bd10      	pop	{r4, pc}

000b8768 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b8768:	b508      	push	{r3, lr}
      { delete this; }
   b876a:	f7ff fff6 	bl	b875a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b876e:	bd08      	pop	{r3, pc}

000b8770 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b8770:	b530      	push	{r4, r5, lr}
        type_(type) {
   b8772:	2200      	movs	r2, #0
   b8774:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b8778:	6002      	str	r2, [r0, #0]
   b877a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b877c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b877e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8780:	680c      	ldr	r4, [r1, #0]
   b8782:	8085      	strh	r5, [r0, #4]
   b8784:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8786:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b8788:	bd30      	pop	{r4, r5, pc}

000b878a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b878a:	b510      	push	{r4, lr}
   b878c:	4604      	mov	r4, r0
    free((void*)msg_);
   b878e:	6800      	ldr	r0, [r0, #0]
   b8790:	f7fe fa30 	bl	b6bf4 <free>
}
   b8794:	4620      	mov	r0, r4
   b8796:	bd10      	pop	{r4, pc}

000b8798 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8798:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b879a:	68c4      	ldr	r4, [r0, #12]
   b879c:	b1f4      	cbz	r4, b87dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b879e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b87a0:	2b02      	cmp	r3, #2
   b87a2:	d103      	bne.n	b87ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b87a4:	f104 000c 	add.w	r0, r4, #12
   b87a8:	f7ff ffef 	bl	b878a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b87ac:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b87ae:	b135      	cbz	r5, b87be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b87b0:	4628      	mov	r0, r5
   b87b2:	f7fc fd36 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
   b87b6:	2110      	movs	r1, #16
   b87b8:	4628      	mov	r0, r5
   b87ba:	f7fc f9ee 	bl	b4b9a <_ZdlPvj>
   b87be:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b87c0:	b135      	cbz	r5, b87d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b87c2:	4628      	mov	r0, r5
   b87c4:	f7fc fd2d 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
   b87c8:	2110      	movs	r1, #16
   b87ca:	4628      	mov	r0, r5
   b87cc:	f7fc f9e5 	bl	b4b9a <_ZdlPvj>
   b87d0:	4620      	mov	r0, r4
   b87d2:	2114      	movs	r1, #20
   b87d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b87d8:	f7fc b9df 	b.w	b4b9a <_ZdlPvj>
   b87dc:	bd38      	pop	{r3, r4, r5, pc}

000b87de <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   b87de:	b507      	push	{r0, r1, r2, lr}
   b87e0:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   b87e4:	6882      	ldr	r2, [r0, #8]
   b87e6:	b90a      	cbnz	r2, b87ec <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   b87e8:	f001 f9d2 	bl	b9b90 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b87ec:	68c3      	ldr	r3, [r0, #12]
   b87ee:	aa01      	add	r2, sp, #4
   b87f0:	4669      	mov	r1, sp
   b87f2:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   b87f4:	b003      	add	sp, #12
   b87f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b87fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b87fa:	680b      	ldr	r3, [r1, #0]
   b87fc:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b87fe:	684b      	ldr	r3, [r1, #4]
   b8800:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8802:	b113      	cbz	r3, b880a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b8804:	685a      	ldr	r2, [r3, #4]
   b8806:	3201      	adds	r2, #1
   b8808:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b880a:	4770      	bx	lr

000b880c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b880c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b880e:	4604      	mov	r4, r0
   b8810:	4668      	mov	r0, sp
   b8812:	460d      	mov	r5, r1
   b8814:	f7ff fff1 	bl	b87fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8818:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b881a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b881c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b881e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8820:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8822:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b8824:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b8826:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8828:	f7fc fad8 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b882c:	b135      	cbz	r5, b883c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b882e:	1d28      	adds	r0, r5, #4
   b8830:	f7fc fad4 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8834:	2108      	movs	r1, #8
   b8836:	4628      	mov	r0, r5
   b8838:	f7fc f9af 	bl	b4b9a <_ZdlPvj>
        return p;
    }
   b883c:	4620      	mov	r0, r4
   b883e:	b003      	add	sp, #12
   b8840:	bd30      	pop	{r4, r5, pc}

000b8842 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b8842:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8844:	b510      	push	{r4, lr}
      if (_M_empty())
   b8846:	b90a      	cbnz	r2, b884c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b8848:	f001 f9a2 	bl	b9b90 <_ZSt25__throw_bad_function_callv>
    }
   b884c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8850:	68c3      	ldr	r3, [r0, #12]
   b8852:	4718      	bx	r3

000b8854 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8854:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8856:	6800      	ldr	r0, [r0, #0]
   b8858:	f100 0110 	add.w	r1, r0, #16
   b885c:	f7ff fff1 	bl	b8842 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8860:	bd08      	pop	{r3, pc}

000b8862 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b8862:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8864:	b510      	push	{r4, lr}
      if (_M_empty())
   b8866:	b90a      	cbnz	r2, b886c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8868:	f001 f992 	bl	b9b90 <_ZSt25__throw_bad_function_callv>
    }
   b886c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8870:	68c3      	ldr	r3, [r0, #12]
   b8872:	4718      	bx	r3

000b8874 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8874:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8876:	6800      	ldr	r0, [r0, #0]
   b8878:	f100 0110 	add.w	r1, r0, #16
   b887c:	f7ff fff1 	bl	b8862 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8880:	bd08      	pop	{r3, pc}
	...

000b8884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8884:	b538      	push	{r3, r4, r5, lr}
   b8886:	2300      	movs	r3, #0
   b8888:	4604      	mov	r4, r0
   b888a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b888c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b888e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8890:	f7fc f97b 	bl	b4b8a <_Znwj>
   b8894:	b128      	cbz	r0, b88a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8896:	2301      	movs	r3, #1
   b8898:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b889c:	4b02      	ldr	r3, [pc, #8]	; (b88a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b889e:	6003      	str	r3, [r0, #0]
   b88a0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b88a2:	6020      	str	r0, [r4, #0]
	}
   b88a4:	4620      	mov	r0, r4
   b88a6:	bd38      	pop	{r3, r4, r5, pc}
   b88a8:	000bc9fc 	.word	0x000bc9fc

000b88ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b88ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b88ae:	2300      	movs	r3, #0
   b88b0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b88b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b88b4:	4604      	mov	r4, r0
   b88b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b88b8:	b12b      	cbz	r3, b88c6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b88ba:	2202      	movs	r2, #2
   b88bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b88be:	68eb      	ldr	r3, [r5, #12]
   b88c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b88c2:	68ab      	ldr	r3, [r5, #8]
   b88c4:	60a3      	str	r3, [r4, #8]
    }
   b88c6:	4620      	mov	r0, r4
   b88c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b88cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b88cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b88ce:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b88d0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b88d2:	4668      	mov	r0, sp
   b88d4:	f7ff ff4c 	bl	b8770 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b88d8:	f04f 0302 	mov.w	r3, #2
   b88dc:	e8d4 2f4f 	ldrexb	r2, [r4]
   b88e0:	2a00      	cmp	r2, #0
   b88e2:	d103      	bne.n	b88ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b88e4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b88e8:	2900      	cmp	r1, #0
   b88ea:	d1f7      	bne.n	b88dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b88ec:	d125      	bne.n	b893a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b88ee:	f104 050c 	add.w	r5, r4, #12
   b88f2:	4669      	mov	r1, sp
   b88f4:	4628      	mov	r0, r5
   b88f6:	f7ff ff3b 	bl	b8770 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b88fa:	f3bf 8f5b 	dmb	ish
   b88fe:	2301      	movs	r3, #1
   b8900:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8902:	2000      	movs	r0, #0
   b8904:	f104 0308 	add.w	r3, r4, #8
   b8908:	f3bf 8f5b 	dmb	ish
   b890c:	e853 6f00 	ldrex	r6, [r3]
   b8910:	e843 0200 	strex	r2, r0, [r3]
   b8914:	2a00      	cmp	r2, #0
   b8916:	d1f9      	bne.n	b890c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8918:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b891c:	b16e      	cbz	r6, b893a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b891e:	f7fe f8a5 	bl	b6a6c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8922:	b178      	cbz	r0, b8944 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8924:	4629      	mov	r1, r5
   b8926:	4630      	mov	r0, r6
   b8928:	f7ff ff8b 	bl	b8842 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b892c:	4630      	mov	r0, r6
   b892e:	f7fc fc78 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8932:	2110      	movs	r1, #16
   b8934:	4630      	mov	r0, r6
   b8936:	f7fc f930 	bl	b4b9a <_ZdlPvj>
        p_->setError(std::move(error));
   b893a:	4668      	mov	r0, sp
   b893c:	f7ff ff25 	bl	b878a <_ZN8particle5ErrorD1Ev>
    }
   b8940:	b009      	add	sp, #36	; 0x24
   b8942:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8944:	4631      	mov	r1, r6
   b8946:	a802      	add	r0, sp, #8
   b8948:	f7ff ffb0 	bl	b88ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b894c:	68e0      	ldr	r0, [r4, #12]
   b894e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8952:	b108      	cbz	r0, b8958 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b8954:	f001 fd88 	bl	ba468 <strdup>
        type_(type) {
   b8958:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b895a:	2010      	movs	r0, #16
   b895c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8960:	f7fc f913 	bl	b4b8a <_Znwj>
   b8964:	4605      	mov	r5, r0
   b8966:	b1e8      	cbz	r0, b89a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8968:	2700      	movs	r7, #0
   b896a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b896c:	2018      	movs	r0, #24
   b896e:	f7fc f90c 	bl	b4b8a <_Znwj>
   b8972:	4604      	mov	r4, r0
   b8974:	b188      	cbz	r0, b899a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b8976:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8978:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b897a:	a802      	add	r0, sp, #8
   b897c:	f7ff fa14 	bl	b7da8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8980:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8982:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8984:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8986:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8988:	9204      	str	r2, [sp, #16]
   b898a:	a906      	add	r1, sp, #24
   b898c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b898e:	60e3      	str	r3, [r4, #12]
   b8990:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8994:	9205      	str	r2, [sp, #20]
   b8996:	f7ff feeb 	bl	b8770 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b899a:	4b08      	ldr	r3, [pc, #32]	; (b89bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b899c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b899e:	4b08      	ldr	r3, [pc, #32]	; (b89c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b89a0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b89a2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b89a4:	a806      	add	r0, sp, #24
   b89a6:	f7ff fef0 	bl	b878a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b89aa:	a802      	add	r0, sp, #8
   b89ac:	f7fc fc39 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b89b0:	2200      	movs	r2, #0
   b89b2:	4629      	mov	r1, r5
   b89b4:	4803      	ldr	r0, [pc, #12]	; (b89c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b89b6:	f7fe f861 	bl	b6a7c <application_thread_invoke>
   b89ba:	e7b7      	b.n	b892c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b89bc:	000b8855 	.word	0x000b8855
   b89c0:	000b8ad9 	.word	0x000b8ad9
   b89c4:	000b9021 	.word	0x000b9021

000b89c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b89c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b89cc:	b08b      	sub	sp, #44	; 0x2c
   b89ce:	4605      	mov	r5, r0
   b89d0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b89d4:	460f      	mov	r7, r1
   b89d6:	4690      	mov	r8, r2
   b89d8:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b89da:	f7fe f8db 	bl	b6b94 <spark_cloud_flag_connected>
   b89de:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b89e0:	4683      	mov	fp, r0
   b89e2:	bb38      	cbnz	r0, b8a34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b89e4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b89e8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b89ea:	a905      	add	r1, sp, #20
   b89ec:	4630      	mov	r0, r6
   b89ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   b89f2:	f7ff febd 	bl	b8770 <_ZN8particle5ErrorC1EOS0_>
   b89f6:	2014      	movs	r0, #20
   b89f8:	f7fc f8c7 	bl	b4b8a <_Znwj>
   b89fc:	4604      	mov	r4, r0
   b89fe:	b148      	cbz	r0, b8a14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b8a00:	2302      	movs	r3, #2
   b8a02:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8a04:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8a06:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8a0a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8a0c:	4631      	mov	r1, r6
   b8a0e:	300c      	adds	r0, #12
   b8a10:	f7ff feae 	bl	b8770 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8a14:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8a16:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8a18:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8a1c:	f7ff ff32 	bl	b8884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8a20:	4630      	mov	r0, r6
   b8a22:	f7ff feb2 	bl	b878a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8a26:	a805      	add	r0, sp, #20
   b8a28:	f7ff feaf 	bl	b878a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8a2c:	4628      	mov	r0, r5
   b8a2e:	b00b      	add	sp, #44	; 0x2c
   b8a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8a34:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8a36:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8a38:	2014      	movs	r0, #20
   b8a3a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b8a3e:	9307      	str	r3, [sp, #28]
   b8a40:	f7fc f8a3 	bl	b4b8a <_Znwj>
   b8a44:	4601      	mov	r1, r0
   b8a46:	b118      	cbz	r0, b8a50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8a4c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8a4e:	7044      	strb	r4, [r0, #1]
   b8a50:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8a52:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8a54:	f7ff ff16 	bl	b8884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8a58:	4b1e      	ldr	r3, [pc, #120]	; (b8ad4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8a5a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8a5c:	2008      	movs	r0, #8
   b8a5e:	f7fc f894 	bl	b4b8a <_Znwj>
   b8a62:	4604      	mov	r4, r0
   b8a64:	b110      	cbz	r0, b8a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b8a66:	a903      	add	r1, sp, #12
   b8a68:	f7ff fec7 	bl	b87fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8a6c:	9600      	str	r6, [sp, #0]
   b8a6e:	fa5f f38a 	uxtb.w	r3, sl
   b8a72:	464a      	mov	r2, r9
   b8a74:	4641      	mov	r1, r8
   b8a76:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8a78:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8a7a:	f7fe f893 	bl	b6ba4 <spark_send_event>
   b8a7e:	b9b8      	cbnz	r0, b8ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8a80:	9b03      	ldr	r3, [sp, #12]
   b8a82:	785b      	ldrb	r3, [r3, #1]
   b8a84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8a88:	b993      	cbnz	r3, b8ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8a8a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8a8e:	a905      	add	r1, sp, #20
   b8a90:	a803      	add	r0, sp, #12
   b8a92:	9205      	str	r2, [sp, #20]
   b8a94:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8a98:	f7ff ff18 	bl	b88cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8a9c:	a805      	add	r0, sp, #20
   b8a9e:	f7ff fe74 	bl	b878a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b8aa2:	a805      	add	r0, sp, #20
   b8aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8aa6:	f7ff feb1 	bl	b880c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8aaa:	a806      	add	r0, sp, #24
   b8aac:	f7fc f996 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ab0:	a903      	add	r1, sp, #12
   b8ab2:	a805      	add	r0, sp, #20
   b8ab4:	f7ff fea1 	bl	b87fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8ab8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8aba:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8abc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b8abe:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8ac0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8ac2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8ac4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8ac6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8ac8:	f7fc f988 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8acc:	a804      	add	r0, sp, #16
   b8ace:	f7fc f985 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b8ad2:	e7ab      	b.n	b8a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8ad4:	000b8b55 	.word	0x000b8b55

000b8ad8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8ad8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8adc:	4605      	mov	r5, r0
	switch (__op)
   b8ade:	d103      	bne.n	b8ae8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8ae0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8ae2:	6003      	str	r3, [r0, #0]
      }
   b8ae4:	2000      	movs	r0, #0
   b8ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8ae8:	2a02      	cmp	r2, #2
   b8aea:	d010      	beq.n	b8b0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8aec:	2a03      	cmp	r2, #3
   b8aee:	d1f9      	bne.n	b8ae4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8af0:	6804      	ldr	r4, [r0, #0]
   b8af2:	2c00      	cmp	r4, #0
   b8af4:	d0f6      	beq.n	b8ae4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8af6:	f104 0010 	add.w	r0, r4, #16
   b8afa:	f7ff fe46 	bl	b878a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8afe:	4620      	mov	r0, r4
   b8b00:	f7fc fb8f 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8b04:	2118      	movs	r1, #24
   b8b06:	4620      	mov	r0, r4
   b8b08:	f7fc f847 	bl	b4b9a <_ZdlPvj>
   b8b0c:	e7ea      	b.n	b8ae4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8b0e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b8b10:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8b12:	f7fc f83a 	bl	b4b8a <_Znwj>
   b8b16:	4604      	mov	r4, r0
   b8b18:	b150      	cbz	r0, b8b30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b8b1a:	4631      	mov	r1, r6
   b8b1c:	f7ff fec6 	bl	b88ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8b20:	6930      	ldr	r0, [r6, #16]
   b8b22:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8b26:	b108      	cbz	r0, b8b2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8b28:	f001 fc9e 	bl	ba468 <strdup>
        type_(type) {
   b8b2c:	6120      	str	r0, [r4, #16]
   b8b2e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b8b30:	602c      	str	r4, [r5, #0]
	}
   b8b32:	e7d7      	b.n	b8ae4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8b34 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8b34:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8b36:	2300      	movs	r3, #0
   b8b38:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8b3a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8b3c:	4604      	mov	r4, r0
   b8b3e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8b40:	b12b      	cbz	r3, b8b4e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8b42:	2202      	movs	r2, #2
   b8b44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8b46:	68eb      	ldr	r3, [r5, #12]
   b8b48:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8b4a:	68ab      	ldr	r3, [r5, #8]
   b8b4c:	60a3      	str	r3, [r4, #8]
    }
   b8b4e:	4620      	mov	r0, r4
   b8b50:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8b54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8b56:	b089      	sub	sp, #36	; 0x24
   b8b58:	4604      	mov	r4, r0
   b8b5a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8b5c:	a801      	add	r0, sp, #4
   b8b5e:	4611      	mov	r1, r2
   b8b60:	f7ff fe54 	bl	b880c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b8b64:	b1a4      	cbz	r4, b8b90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b8b66:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8b68:	b11d      	cbz	r5, b8b72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b8b6a:	4628      	mov	r0, r5
   b8b6c:	f001 fc7c 	bl	ba468 <strdup>
   b8b70:	4605      	mov	r5, r0
   b8b72:	a801      	add	r0, sp, #4
   b8b74:	a903      	add	r1, sp, #12
        type_(type) {
   b8b76:	9503      	str	r5, [sp, #12]
   b8b78:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8b7c:	f7ff fea6 	bl	b88cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8b80:	a803      	add	r0, sp, #12
   b8b82:	f7ff fe02 	bl	b878a <_ZN8particle5ErrorD1Ev>
   b8b86:	a802      	add	r0, sp, #8
   b8b88:	f7fc f928 	bl	b4ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8b8c:	b009      	add	sp, #36	; 0x24
   b8b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b8b90:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8b92:	2301      	movs	r3, #1
   b8b94:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8b98:	2a00      	cmp	r2, #0
   b8b9a:	d103      	bne.n	b8ba4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8b9c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b8ba0:	2900      	cmp	r1, #0
   b8ba2:	d1f7      	bne.n	b8b94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8ba4:	d1ef      	bne.n	b8b86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8ba6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8ba8:	f3bf 8f5b 	dmb	ish
   b8bac:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8bae:	1d2b      	adds	r3, r5, #4
   b8bb0:	f3bf 8f5b 	dmb	ish
   b8bb4:	e853 6f00 	ldrex	r6, [r3]
   b8bb8:	e843 4200 	strex	r2, r4, [r3]
   b8bbc:	2a00      	cmp	r2, #0
   b8bbe:	d1f9      	bne.n	b8bb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8bc0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8bc4:	2e00      	cmp	r6, #0
   b8bc6:	d0de      	beq.n	b8b86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8bc8:	4620      	mov	r0, r4
   b8bca:	f7fd ff4f 	bl	b6a6c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8bce:	4607      	mov	r7, r0
   b8bd0:	b160      	cbz	r0, b8bec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8bd2:	f105 010c 	add.w	r1, r5, #12
   b8bd6:	4630      	mov	r0, r6
   b8bd8:	f7ff fe43 	bl	b8862 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8bdc:	4630      	mov	r0, r6
   b8bde:	f7fc fb20 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8be2:	2110      	movs	r1, #16
   b8be4:	4630      	mov	r0, r6
   b8be6:	f7fb ffd8 	bl	b4b9a <_ZdlPvj>
   b8bea:	e7cc      	b.n	b8b86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8bec:	4631      	mov	r1, r6
   b8bee:	a803      	add	r0, sp, #12
   b8bf0:	f7ff ffa0 	bl	b8b34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8bf4:	7b2b      	ldrb	r3, [r5, #12]
   b8bf6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8bfa:	2010      	movs	r0, #16
   b8bfc:	f7fb ffc5 	bl	b4b8a <_Znwj>
   b8c00:	4605      	mov	r5, r0
   b8c02:	b1d0      	cbz	r0, b8c3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8c04:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8c06:	2014      	movs	r0, #20
   b8c08:	f7fb ffbf 	bl	b4b8a <_Znwj>
   b8c0c:	4604      	mov	r4, r0
   b8c0e:	b178      	cbz	r0, b8c30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b8c10:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8c12:	4601      	mov	r1, r0
   b8c14:	a803      	add	r0, sp, #12
   b8c16:	f7ff f8c7 	bl	b7da8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c1a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8c1c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c1e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c20:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8c22:	9205      	str	r2, [sp, #20]
   b8c24:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c26:	60e3      	str	r3, [r4, #12]
   b8c28:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8c2c:	9206      	str	r2, [sp, #24]
   b8c2e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8c30:	4b06      	ldr	r3, [pc, #24]	; (b8c4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b8c32:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8c34:	4b06      	ldr	r3, [pc, #24]	; (b8c50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8c36:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8c38:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b8c3a:	a803      	add	r0, sp, #12
   b8c3c:	f7fc faf1 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8c40:	2200      	movs	r2, #0
   b8c42:	4629      	mov	r1, r5
   b8c44:	4803      	ldr	r0, [pc, #12]	; (b8c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b8c46:	f7fd ff19 	bl	b6a7c <application_thread_invoke>
   b8c4a:	e7c7      	b.n	b8bdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b8c4c:	000b8875 	.word	0x000b8875
   b8c50:	000b8c59 	.word	0x000b8c59
   b8c54:	000b9021 	.word	0x000b9021

000b8c58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8c58:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8c5a:	b570      	push	{r4, r5, r6, lr}
   b8c5c:	4604      	mov	r4, r0
	switch (__op)
   b8c5e:	d103      	bne.n	b8c68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8c60:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8c62:	6003      	str	r3, [r0, #0]
      }
   b8c64:	2000      	movs	r0, #0
   b8c66:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b8c68:	2a02      	cmp	r2, #2
   b8c6a:	d00c      	beq.n	b8c86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8c6c:	2a03      	cmp	r2, #3
   b8c6e:	d1f9      	bne.n	b8c64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8c70:	6804      	ldr	r4, [r0, #0]
   b8c72:	2c00      	cmp	r4, #0
   b8c74:	d0f6      	beq.n	b8c64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b8c76:	4620      	mov	r0, r4
   b8c78:	f7fc fad3 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8c7c:	2114      	movs	r1, #20
   b8c7e:	4620      	mov	r0, r4
   b8c80:	f7fb ff8b 	bl	b4b9a <_ZdlPvj>
   b8c84:	e7ee      	b.n	b8c64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8c86:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8c88:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8c8a:	f7fb ff7e 	bl	b4b8a <_Znwj>
   b8c8e:	4605      	mov	r5, r0
   b8c90:	b120      	cbz	r0, b8c9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b8c92:	4631      	mov	r1, r6
   b8c94:	f7ff ff4e 	bl	b8b34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8c98:	7c33      	ldrb	r3, [r6, #16]
   b8c9a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8c9c:	6025      	str	r5, [r4, #0]
	}
   b8c9e:	e7e1      	b.n	b8c64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b8ca0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8ca0:	4770      	bx	lr

000b8ca2 <_ZN9IPAddressD0Ev>:
   b8ca2:	b510      	push	{r4, lr}
   b8ca4:	2118      	movs	r1, #24
   b8ca6:	4604      	mov	r4, r0
   b8ca8:	f7fb ff77 	bl	b4b9a <_ZdlPvj>
   b8cac:	4620      	mov	r0, r4
   b8cae:	bd10      	pop	{r4, pc}

000b8cb0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8cb2:	7d03      	ldrb	r3, [r0, #20]
   b8cb4:	2b06      	cmp	r3, #6
{
   b8cb6:	b08d      	sub	sp, #52	; 0x34
   b8cb8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8cba:	f100 0704 	add.w	r7, r0, #4
   b8cbe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8cc2:	d012      	beq.n	b8cea <_ZNK9IPAddress7printToER5Print+0x3a>
   b8cc4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8cc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8ccc:	220a      	movs	r2, #10
   b8cce:	4630      	mov	r0, r6
   b8cd0:	f7ff fb33 	bl	b833a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8cd4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8cd6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8cd8:	d019      	beq.n	b8d0e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8cda:	2c00      	cmp	r4, #0
   b8cdc:	d0f4      	beq.n	b8cc8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8cde:	212e      	movs	r1, #46	; 0x2e
   b8ce0:	4630      	mov	r0, r6
   b8ce2:	f7ff fb11 	bl	b8308 <_ZN5Print5printEc>
   b8ce6:	4404      	add	r4, r0
   b8ce8:	e7ee      	b.n	b8cc8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8cea:	232f      	movs	r3, #47	; 0x2f
   b8cec:	466a      	mov	r2, sp
   b8cee:	4639      	mov	r1, r7
   b8cf0:	200a      	movs	r0, #10
		buf[0] = 0;
   b8cf2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8cf6:	f7fd fd89 	bl	b680c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8cfa:	4668      	mov	r0, sp
   b8cfc:	f7fb feea 	bl	b4ad4 <strlen>
   b8d00:	6833      	ldr	r3, [r6, #0]
   b8d02:	4602      	mov	r2, r0
   b8d04:	68db      	ldr	r3, [r3, #12]
   b8d06:	4669      	mov	r1, sp
   b8d08:	4630      	mov	r0, r6
   b8d0a:	4798      	blx	r3
   b8d0c:	4604      	mov	r4, r0
    }
    return n;
}
   b8d0e:	4620      	mov	r0, r4
   b8d10:	b00d      	add	sp, #52	; 0x34
   b8d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8d14 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8d14:	b510      	push	{r4, lr}
   b8d16:	4b05      	ldr	r3, [pc, #20]	; (b8d2c <_ZN9IPAddressC1Ev+0x18>)
   b8d18:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8d1a:	2211      	movs	r2, #17
   b8d1c:	f840 3b04 	str.w	r3, [r0], #4
   b8d20:	2100      	movs	r1, #0
   b8d22:	f001 fb63 	bl	ba3ec <memset>
}
   b8d26:	4620      	mov	r0, r4
   b8d28:	bd10      	pop	{r4, pc}
   b8d2a:	bf00      	nop
   b8d2c:	000bca18 	.word	0x000bca18

000b8d30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8d30:	4603      	mov	r3, r0
   b8d32:	4a07      	ldr	r2, [pc, #28]	; (b8d50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8d34:	b510      	push	{r4, lr}
   b8d36:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8d3a:	f101 0210 	add.w	r2, r1, #16
   b8d3e:	f851 4b04 	ldr.w	r4, [r1], #4
   b8d42:	f843 4b04 	str.w	r4, [r3], #4
   b8d46:	4291      	cmp	r1, r2
   b8d48:	d1f9      	bne.n	b8d3e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8d4a:	780a      	ldrb	r2, [r1, #0]
   b8d4c:	701a      	strb	r2, [r3, #0]
}
   b8d4e:	bd10      	pop	{r4, pc}
   b8d50:	000bca18 	.word	0x000bca18

000b8d54 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8d54:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8d56:	2b04      	cmp	r3, #4
   b8d58:	d104      	bne.n	b8d64 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8d5a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8d5c:	3800      	subs	r0, #0
   b8d5e:	bf18      	it	ne
   b8d60:	2001      	movne	r0, #1
   b8d62:	4770      	bx	lr
    } else if (version() == 6) {
   b8d64:	2b06      	cmp	r3, #6
   b8d66:	d107      	bne.n	b8d78 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8d68:	6843      	ldr	r3, [r0, #4]
   b8d6a:	b93b      	cbnz	r3, b8d7c <_ZNK9IPAddresscvbEv+0x28>
   b8d6c:	6883      	ldr	r3, [r0, #8]
   b8d6e:	b92b      	cbnz	r3, b8d7c <_ZNK9IPAddresscvbEv+0x28>
   b8d70:	68c3      	ldr	r3, [r0, #12]
   b8d72:	b91b      	cbnz	r3, b8d7c <_ZNK9IPAddresscvbEv+0x28>
   b8d74:	6900      	ldr	r0, [r0, #16]
   b8d76:	e7f1      	b.n	b8d5c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8d78:	2000      	movs	r0, #0
   b8d7a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8d7c:	2001      	movs	r0, #1
}
   b8d7e:	4770      	bx	lr

000b8d80 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8d80:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8d82:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8d86:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8d8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8d8e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8d92:	2304      	movs	r3, #4
   b8d94:	6041      	str	r1, [r0, #4]
   b8d96:	7503      	strb	r3, [r0, #20]
}
   b8d98:	bd10      	pop	{r4, pc}
	...

000b8d9c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8d9c:	b507      	push	{r0, r1, r2, lr}
   b8d9e:	4b06      	ldr	r3, [pc, #24]	; (b8db8 <_ZN9IPAddressC1EPKh+0x1c>)
   b8da0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8da2:	78cb      	ldrb	r3, [r1, #3]
   b8da4:	9300      	str	r3, [sp, #0]
   b8da6:	788b      	ldrb	r3, [r1, #2]
   b8da8:	784a      	ldrb	r2, [r1, #1]
   b8daa:	7809      	ldrb	r1, [r1, #0]
   b8dac:	f7ff ffe8 	bl	b8d80 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8db0:	b003      	add	sp, #12
   b8db2:	f85d fb04 	ldr.w	pc, [sp], #4
   b8db6:	bf00      	nop
   b8db8:	000bca18 	.word	0x000bca18

000b8dbc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8dbc:	7441      	strb	r1, [r0, #17]
}
   b8dbe:	4770      	bx	lr

000b8dc0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8dc0:	4770      	bx	lr

000b8dc2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8dc2:	4770      	bx	lr

000b8dc4 <_ZN9USBSerial4readEv>:
{
   b8dc4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8dc6:	2100      	movs	r1, #0
   b8dc8:	7c00      	ldrb	r0, [r0, #16]
   b8dca:	f7fd fe07 	bl	b69dc <HAL_USB_USART_Receive_Data>
}
   b8dce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8dd2:	bd08      	pop	{r3, pc}

000b8dd4 <_ZN9USBSerial4peekEv>:
{
   b8dd4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8dd6:	2101      	movs	r1, #1
   b8dd8:	7c00      	ldrb	r0, [r0, #16]
   b8dda:	f7fd fdff 	bl	b69dc <HAL_USB_USART_Receive_Data>
}
   b8dde:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8de2:	bd08      	pop	{r3, pc}

000b8de4 <_ZN9USBSerial17availableForWriteEv>:
{
   b8de4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8de6:	7c00      	ldrb	r0, [r0, #16]
   b8de8:	f7fd fdf0 	bl	b69cc <HAL_USB_USART_Available_Data_For_Write>
}
   b8dec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8df0:	bd08      	pop	{r3, pc}

000b8df2 <_ZN9USBSerial9availableEv>:
{
   b8df2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8df4:	7c00      	ldrb	r0, [r0, #16]
   b8df6:	f7fd fde1 	bl	b69bc <HAL_USB_USART_Available_Data>
}
   b8dfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8dfe:	bd08      	pop	{r3, pc}

000b8e00 <_ZN9USBSerial5writeEh>:
{
   b8e00:	b513      	push	{r0, r1, r4, lr}
   b8e02:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8e04:	7c00      	ldrb	r0, [r0, #16]
{
   b8e06:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8e08:	f7fd fde0 	bl	b69cc <HAL_USB_USART_Available_Data_For_Write>
   b8e0c:	2800      	cmp	r0, #0
   b8e0e:	9901      	ldr	r1, [sp, #4]
   b8e10:	dc01      	bgt.n	b8e16 <_ZN9USBSerial5writeEh+0x16>
   b8e12:	7c60      	ldrb	r0, [r4, #17]
   b8e14:	b120      	cbz	r0, b8e20 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8e16:	7c20      	ldrb	r0, [r4, #16]
   b8e18:	f7fd fde8 	bl	b69ec <HAL_USB_USART_Send_Data>
   b8e1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8e20:	b002      	add	sp, #8
   b8e22:	bd10      	pop	{r4, pc}

000b8e24 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8e24:	7c00      	ldrb	r0, [r0, #16]
   b8e26:	f7fd bde9 	b.w	b69fc <HAL_USB_USART_Flush_Data>

000b8e2a <_ZN9USBSerialD0Ev>:
   b8e2a:	b510      	push	{r4, lr}
   b8e2c:	2114      	movs	r1, #20
   b8e2e:	4604      	mov	r4, r0
   b8e30:	f7fb feb3 	bl	b4b9a <_ZdlPvj>
   b8e34:	4620      	mov	r0, r4
   b8e36:	bd10      	pop	{r4, pc}

000b8e38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8e38:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8e3e:	4604      	mov	r4, r0
   b8e40:	4608      	mov	r0, r1
   b8e42:	2100      	movs	r1, #0
   b8e44:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8e48:	4b04      	ldr	r3, [pc, #16]	; (b8e5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8e4a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8e4c:	2301      	movs	r3, #1
  _serial = serial;
   b8e4e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8e50:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8e52:	4611      	mov	r1, r2
   b8e54:	f7fd fdaa 	bl	b69ac <HAL_USB_USART_Init>
}
   b8e58:	4620      	mov	r0, r4
   b8e5a:	bd10      	pop	{r4, pc}
   b8e5c:	000bca2c 	.word	0x000bca2c

000b8e60 <_Z19acquireSerialBufferv>:
{
   b8e60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8e62:	2214      	movs	r2, #20
{
   b8e64:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8e66:	2100      	movs	r1, #0
   b8e68:	f001 fac0 	bl	ba3ec <memset>
}
   b8e6c:	4620      	mov	r0, r4
   b8e6e:	bd10      	pop	{r4, pc}

000b8e70 <_Z16_fetch_usbserialv>:
{
   b8e70:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8e72:	4c0f      	ldr	r4, [pc, #60]	; (b8eb0 <_Z16_fetch_usbserialv+0x40>)
{
   b8e74:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8e76:	a803      	add	r0, sp, #12
   b8e78:	f7ff fff2 	bl	b8e60 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8e7c:	7821      	ldrb	r1, [r4, #0]
   b8e7e:	f3bf 8f5b 	dmb	ish
   b8e82:	f011 0101 	ands.w	r1, r1, #1
   b8e86:	d10f      	bne.n	b8ea8 <_Z16_fetch_usbserialv+0x38>
   b8e88:	4620      	mov	r0, r4
   b8e8a:	9101      	str	r1, [sp, #4]
   b8e8c:	f7fb fe87 	bl	b4b9e <__cxa_guard_acquire>
   b8e90:	9901      	ldr	r1, [sp, #4]
   b8e92:	b148      	cbz	r0, b8ea8 <_Z16_fetch_usbserialv+0x38>
   b8e94:	aa03      	add	r2, sp, #12
   b8e96:	4807      	ldr	r0, [pc, #28]	; (b8eb4 <_Z16_fetch_usbserialv+0x44>)
   b8e98:	f7ff ffce 	bl	b8e38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8e9c:	4620      	mov	r0, r4
   b8e9e:	f7fb fe83 	bl	b4ba8 <__cxa_guard_release>
   b8ea2:	4805      	ldr	r0, [pc, #20]	; (b8eb8 <_Z16_fetch_usbserialv+0x48>)
   b8ea4:	f001 fa50 	bl	ba348 <atexit>
	return _usbserial;
}
   b8ea8:	4802      	ldr	r0, [pc, #8]	; (b8eb4 <_Z16_fetch_usbserialv+0x44>)
   b8eaa:	b008      	add	sp, #32
   b8eac:	bd10      	pop	{r4, pc}
   b8eae:	bf00      	nop
   b8eb0:	2003e668 	.word	0x2003e668
   b8eb4:	2003e66c 	.word	0x2003e66c
   b8eb8:	000b8dc1 	.word	0x000b8dc1

000b8ebc <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
   b8ebc:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b8ebe:	b510      	push	{r4, lr}
   b8ec0:	b90a      	cbnz	r2, b8ec6 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b8ec2:	f000 fe65 	bl	b9b90 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b8ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8eca:	68c3      	ldr	r3, [r0, #12]
   b8ecc:	4718      	bx	r3
	...

000b8ed0 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b8ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b8ed2:	4f10      	ldr	r7, [pc, #64]	; (b8f14 <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b8ed4:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b8ed8:	4606      	mov	r6, r0
   b8eda:	460d      	mov	r5, r1
    delete handlers[pin];
   b8edc:	b134      	cbz	r4, b8eec <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b8ede:	4620      	mov	r0, r4
   b8ee0:	f7fc f99f 	bl	b5222 <_ZNSt14_Function_baseD1Ev>
   b8ee4:	2110      	movs	r1, #16
   b8ee6:	4620      	mov	r0, r4
   b8ee8:	f7fb fe57 	bl	b4b9a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b8eec:	2010      	movs	r0, #16
   b8eee:	f7fb fe4c 	bl	b4b8a <_Znwj>
   b8ef2:	4604      	mov	r4, r0
   b8ef4:	b150      	cbz	r0, b8f0c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b8ef6:	2300      	movs	r3, #0
   b8ef8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8efa:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b8efc:	b133      	cbz	r3, b8f0c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8efe:	2202      	movs	r2, #2
   b8f00:	4629      	mov	r1, r5
   b8f02:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8f04:	68eb      	ldr	r3, [r5, #12]
   b8f06:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8f08:	68ab      	ldr	r3, [r5, #8]
   b8f0a:	60a3      	str	r3, [r4, #8]
   b8f0c:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b8f10:	4620      	mov	r0, r4
   b8f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8f14:	2003e680 	.word	0x2003e680

000b8f18 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8f18:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8f1a:	b087      	sub	sp, #28
   b8f1c:	4605      	mov	r5, r0
   b8f1e:	9103      	str	r1, [sp, #12]
   b8f20:	4617      	mov	r7, r2
   b8f22:	461e      	mov	r6, r3
    hal_interrupt_detach(pin);
   b8f24:	f7fd fb82 	bl	b662c <hal_interrupt_detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b8f28:	9903      	ldr	r1, [sp, #12]
   b8f2a:	4628      	mov	r0, r5
   b8f2c:	f7ff ffd0 	bl	b8ed0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b8f30:	4604      	mov	r4, r0
   b8f32:	b1e8      	cbz	r0, b8f70 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        hal_interrupt_extra_configuration_t extra = {};
   b8f34:	2100      	movs	r1, #0
  if (priority >= 0) {
   b8f36:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8f38:	f04f 0304 	mov.w	r3, #4
        hal_interrupt_extra_configuration_t extra = {};
   b8f3c:	f8ad 1015 	strh.w	r1, [sp, #21]
   b8f40:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8f44:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b8f48:	bfa2      	ittt	ge
   b8f4a:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b8f4c:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b8f50:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8f54:	9100      	str	r1, [sp, #0]
   b8f56:	4602      	mov	r2, r0
   b8f58:	4907      	ldr	r1, [pc, #28]	; (b8f78 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8f5a:	bfa8      	it	ge
   b8f5c:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8f60:	463b      	mov	r3, r7
   b8f62:	4628      	mov	r0, r5
   b8f64:	f7fd fb5a 	bl	b661c <hal_interrupt_attach>
   b8f68:	b110      	cbz	r0, b8f70 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b8f6a:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b8f6c:	b007      	add	sp, #28
   b8f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b8f70:	1e20      	subs	r0, r4, #0
   b8f72:	bf18      	it	ne
   b8f74:	2001      	movne	r0, #1
   b8f76:	e7f9      	b.n	b8f6c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b8f78:	000b8ebd 	.word	0x000b8ebd

000b8f7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8f7c:	4770      	bx	lr

000b8f7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8f7e:	7441      	strb	r1, [r0, #17]
}
   b8f80:	4770      	bx	lr

000b8f82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8f82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8f84:	7c00      	ldrb	r0, [r0, #16]
   b8f86:	f7fd fc89 	bl	b689c <hal_usart_available_data_for_write>
}
   b8f8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8f8e:	bd08      	pop	{r3, pc}

000b8f90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8f90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8f92:	7c00      	ldrb	r0, [r0, #16]
   b8f94:	f7fd fc5a 	bl	b684c <hal_usart_available>
}
   b8f98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8f9c:	bd08      	pop	{r3, pc}

000b8f9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8f9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8fa0:	7c00      	ldrb	r0, [r0, #16]
   b8fa2:	f7fd fc63 	bl	b686c <hal_usart_peek>
}
   b8fa6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8faa:	bd08      	pop	{r3, pc}

000b8fac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8fac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8fae:	7c00      	ldrb	r0, [r0, #16]
   b8fb0:	f7fd fc54 	bl	b685c <hal_usart_read>
}
   b8fb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8fb8:	bd08      	pop	{r3, pc}

000b8fba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8fba:	7c00      	ldrb	r0, [r0, #16]
   b8fbc:	f7fd bc5e 	b.w	b687c <hal_usart_flush>

000b8fc0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8fc2:	7c45      	ldrb	r5, [r0, #17]
{
   b8fc4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8fc6:	b12d      	cbz	r5, b8fd4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8fc8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8fca:	b003      	add	sp, #12
   b8fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8fd0:	f7fd bc34 	b.w	b683c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8fd4:	7c00      	ldrb	r0, [r0, #16]
   b8fd6:	9101      	str	r1, [sp, #4]
   b8fd8:	f7fd fc60 	bl	b689c <hal_usart_available_data_for_write>
   b8fdc:	2800      	cmp	r0, #0
   b8fde:	9901      	ldr	r1, [sp, #4]
   b8fe0:	dcf2      	bgt.n	b8fc8 <_ZN11USARTSerial5writeEh+0x8>
}
   b8fe2:	4628      	mov	r0, r5
   b8fe4:	b003      	add	sp, #12
   b8fe6:	bd30      	pop	{r4, r5, pc}

000b8fe8 <_ZN11USARTSerialD0Ev>:
   b8fe8:	b510      	push	{r4, lr}
   b8fea:	2114      	movs	r1, #20
   b8fec:	4604      	mov	r4, r0
   b8fee:	f7fb fdd4 	bl	b4b9a <_ZdlPvj>
   b8ff2:	4620      	mov	r0, r4
   b8ff4:	bd10      	pop	{r4, pc}
	...

000b8ff8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8ff8:	b510      	push	{r4, lr}
   b8ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ffe:	4604      	mov	r4, r0
   b9000:	4608      	mov	r0, r1
   b9002:	4611      	mov	r1, r2
   b9004:	2200      	movs	r2, #0
   b9006:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b900a:	4b04      	ldr	r3, [pc, #16]	; (b901c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b900c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b900e:	2301      	movs	r3, #1
  _serial = serial;
   b9010:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9012:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9014:	f7fd fc4a 	bl	b68ac <hal_usart_init_ex>
}
   b9018:	4620      	mov	r0, r4
   b901a:	bd10      	pop	{r4, pc}
   b901c:	000bca5c 	.word	0x000bca5c

000b9020 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9020:	b510      	push	{r4, lr}
      if (_M_empty())
   b9022:	6883      	ldr	r3, [r0, #8]
   b9024:	4604      	mov	r4, r0
   b9026:	b90b      	cbnz	r3, b902c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9028:	f000 fdb2 	bl	b9b90 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b902c:	68c3      	ldr	r3, [r0, #12]
   b902e:	4798      	blx	r3
      if (_M_manager)
   b9030:	68a3      	ldr	r3, [r4, #8]
   b9032:	b11b      	cbz	r3, b903c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9034:	2203      	movs	r2, #3
   b9036:	4621      	mov	r1, r4
   b9038:	4620      	mov	r0, r4
   b903a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b903c:	4620      	mov	r0, r4
   b903e:	2110      	movs	r1, #16
}
   b9040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9044:	f7fb bda9 	b.w	b4b9a <_ZdlPvj>

000b9048 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9048:	4770      	bx	lr

000b904a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b904a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b904c:	4606      	mov	r6, r0
   b904e:	4615      	mov	r5, r2
   b9050:	460c      	mov	r4, r1
   b9052:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9054:	42bc      	cmp	r4, r7
   b9056:	d006      	beq.n	b9066 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9058:	6833      	ldr	r3, [r6, #0]
   b905a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b905e:	689b      	ldr	r3, [r3, #8]
   b9060:	4630      	mov	r0, r6
   b9062:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9064:	e7f6      	b.n	b9054 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9066:	4628      	mov	r0, r5
   b9068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b906a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b906a:	7c00      	ldrb	r0, [r0, #16]
   b906c:	2200      	movs	r2, #0
   b906e:	f7fd bc25 	b.w	b68bc <hal_i2c_write>

000b9072 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9072:	7c00      	ldrb	r0, [r0, #16]
   b9074:	2100      	movs	r1, #0
   b9076:	f7fd bc29 	b.w	b68cc <hal_i2c_available>

000b907a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b907a:	7c00      	ldrb	r0, [r0, #16]
   b907c:	2100      	movs	r1, #0
   b907e:	f7fd bc2d 	b.w	b68dc <hal_i2c_read>

000b9082 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9082:	7c00      	ldrb	r0, [r0, #16]
   b9084:	2100      	movs	r1, #0
   b9086:	f7fd bc31 	b.w	b68ec <hal_i2c_peek>

000b908a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b908a:	7c00      	ldrb	r0, [r0, #16]
   b908c:	2100      	movs	r1, #0
   b908e:	f7fd bc35 	b.w	b68fc <hal_i2c_flush>

000b9092 <_ZN7TwoWireD0Ev>:
   b9092:	b510      	push	{r4, lr}
   b9094:	2114      	movs	r1, #20
   b9096:	4604      	mov	r4, r0
   b9098:	f7fb fd7f 	bl	b4b9a <_ZdlPvj>
   b909c:	4620      	mov	r0, r4
   b909e:	bd10      	pop	{r4, pc}

000b90a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b90a0:	b510      	push	{r4, lr}
   b90a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b90a6:	4604      	mov	r4, r0
   b90a8:	4608      	mov	r0, r1
   b90aa:	2100      	movs	r1, #0
   b90ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b90b0:	4b03      	ldr	r3, [pc, #12]	; (b90c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b90b2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b90b4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b90b6:	4611      	mov	r1, r2
   b90b8:	f7fd fc30 	bl	b691c <hal_i2c_init>
}
   b90bc:	4620      	mov	r0, r4
   b90be:	bd10      	pop	{r4, pc}
   b90c0:	000bca8c 	.word	0x000bca8c

000b90c4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b90c4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b90c6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b90c8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b90cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b90ce:	2201      	movs	r2, #1
   b90d0:	f04f 33ff 	mov.w	r3, #4294967295
   b90d4:	f10d 0107 	add.w	r1, sp, #7
   b90d8:	47a0      	blx	r4
}
   b90da:	b002      	add	sp, #8
   b90dc:	bd10      	pop	{r4, pc}

000b90de <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b90de:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b90e0:	6803      	ldr	r3, [r0, #0]
   b90e2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b90e4:	f04f 33ff 	mov.w	r3, #4294967295
   b90e8:	46a4      	mov	ip, r4
}
   b90ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b90ee:	4760      	bx	ip

000b90f0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b90f0:	b513      	push	{r0, r1, r4, lr}
   b90f2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b90f4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b90f6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b90fa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b90fc:	f10d 0107 	add.w	r1, sp, #7
   b9100:	2201      	movs	r2, #1
   b9102:	47a0      	blx	r4
}
   b9104:	b002      	add	sp, #8
   b9106:	bd10      	pop	{r4, pc}

000b9108 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9108:	b510      	push	{r4, lr}
   b910a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b910c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9110:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9114:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9116:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9118:	d008      	beq.n	b912c <_ZN9TCPClient4readEv+0x24>
   b911a:	6963      	ldr	r3, [r4, #20]
   b911c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9120:	1c51      	adds	r1, r2, #1
   b9122:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9126:	4413      	add	r3, r2
   b9128:	7918      	ldrb	r0, [r3, #4]
}
   b912a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b912c:	6803      	ldr	r3, [r0, #0]
   b912e:	691b      	ldr	r3, [r3, #16]
   b9130:	4798      	blx	r3
   b9132:	2800      	cmp	r0, #0
   b9134:	d1f1      	bne.n	b911a <_ZN9TCPClient4readEv+0x12>
   b9136:	f04f 30ff 	mov.w	r0, #4294967295
   b913a:	e7f6      	b.n	b912a <_ZN9TCPClient4readEv+0x22>

000b913c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b913c:	4770      	bx	lr

000b913e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b913e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9140:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9142:	43c0      	mvns	r0, r0
   b9144:	0fc0      	lsrs	r0, r0, #31
   b9146:	4770      	bx	lr

000b9148 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9148:	4770      	bx	lr
	...

000b914c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b914c:	4b06      	ldr	r3, [pc, #24]	; (b9168 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b914e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9150:	b510      	push	{r4, lr}
   b9152:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9156:	d005      	beq.n	b9164 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9158:	4608      	mov	r0, r1
   b915a:	f000 fd1d 	bl	b9b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b915e:	2800      	cmp	r0, #0
   b9160:	bf08      	it	eq
   b9162:	2400      	moveq	r4, #0
      }
   b9164:	4620      	mov	r0, r4
   b9166:	bd10      	pop	{r4, pc}
   b9168:	000bc9ac 	.word	0x000bc9ac

000b916c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b916c:	b510      	push	{r4, lr}
   b916e:	21ac      	movs	r1, #172	; 0xac
   b9170:	4604      	mov	r4, r0
   b9172:	f7fb fd12 	bl	b4b9a <_ZdlPvj>
   b9176:	4620      	mov	r0, r4
   b9178:	bd10      	pop	{r4, pc}

000b917a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b917a:	21ac      	movs	r1, #172	; 0xac
   b917c:	f7fb bd0d 	b.w	b4b9a <_ZdlPvj>

000b9180 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9184:	f04f 0800 	mov.w	r8, #0
   b9188:	b086      	sub	sp, #24
   b918a:	461c      	mov	r4, r3
   b918c:	f8c0 8004 	str.w	r8, [r0, #4]
   b9190:	4605      	mov	r5, r0
   b9192:	460e      	mov	r6, r1
   b9194:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9196:	4641      	mov	r1, r8
   b9198:	2210      	movs	r2, #16
   b919a:	a802      	add	r0, sp, #8
   b919c:	f001 f926 	bl	ba3ec <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b91a0:	1c63      	adds	r3, r4, #1
   b91a2:	d009      	beq.n	b91b8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b91a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b91a8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b91ac:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b91b0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b91b4:	435c      	muls	r4, r3
   b91b6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b91b8:	6968      	ldr	r0, [r5, #20]
   b91ba:	2310      	movs	r3, #16
   b91bc:	9300      	str	r3, [sp, #0]
   b91be:	6800      	ldr	r0, [r0, #0]
   b91c0:	ab02      	add	r3, sp, #8
   b91c2:	f241 0205 	movw	r2, #4101	; 0x1005
   b91c6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b91ca:	f7fd fbaf 	bl	b692c <sock_setsockopt>
    if (ret < 0) {
   b91ce:	2800      	cmp	r0, #0
   b91d0:	da07      	bge.n	b91e2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b91d2:	f7fd fd3f 	bl	b6c54 <__errno>
   b91d6:	6803      	ldr	r3, [r0, #0]
   b91d8:	606b      	str	r3, [r5, #4]
        return 0;
   b91da:	2000      	movs	r0, #0
}
   b91dc:	b006      	add	sp, #24
   b91de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b91e2:	6968      	ldr	r0, [r5, #20]
   b91e4:	2300      	movs	r3, #0
   b91e6:	6800      	ldr	r0, [r0, #0]
   b91e8:	463a      	mov	r2, r7
   b91ea:	4631      	mov	r1, r6
   b91ec:	f7fd fbbe 	bl	b696c <sock_send>
    if (ret < 0) {
   b91f0:	1e03      	subs	r3, r0, #0
   b91f2:	dbee      	blt.n	b91d2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b91f4:	4618      	mov	r0, r3
   b91f6:	e7f1      	b.n	b91dc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b91f8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b91f8:	b530      	push	{r4, r5, lr}
   b91fa:	b087      	sub	sp, #28
   b91fc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b91fe:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9200:	4668      	mov	r0, sp
   b9202:	f7ff fdcb 	bl	b8d9c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9208:	3404      	adds	r4, #4
   b920a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b920c:	682b      	ldr	r3, [r5, #0]
   b920e:	7023      	strb	r3, [r4, #0]
    }
   b9210:	b007      	add	sp, #28
   b9212:	bd30      	pop	{r4, r5, pc}

000b9214 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9214:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9216:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9218:	4b05      	ldr	r3, [pc, #20]	; (b9230 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b921a:	4604      	mov	r4, r0
   b921c:	358c      	adds	r5, #140	; 0x8c
   b921e:	f844 3b04 	str.w	r3, [r4], #4
   b9222:	4606      	mov	r6, r0
   b9224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9228:	682b      	ldr	r3, [r5, #0]
   b922a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b922c:	4630      	mov	r0, r6
   b922e:	bd70      	pop	{r4, r5, r6, pc}
   b9230:	000bca18 	.word	0x000bca18

000b9234 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9238:	4698      	mov	r8, r3
    stop();
   b923a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b923c:	b093      	sub	sp, #76	; 0x4c
   b923e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9240:	2400      	movs	r4, #0
    stop();
   b9242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9244:	4606      	mov	r6, r0
   b9246:	4617      	mov	r7, r2
    stop();
   b9248:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b924a:	4628      	mov	r0, r5
   b924c:	466b      	mov	r3, sp
   b924e:	4622      	mov	r2, r4
   b9250:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9252:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9254:	f7fd f9d2 	bl	b65fc <netdb_getaddrinfo>
   b9258:	4605      	mov	r5, r0
   b925a:	2800      	cmp	r0, #0
   b925c:	d163      	bne.n	b9326 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b925e:	9b00      	ldr	r3, [sp, #0]
   b9260:	2b00      	cmp	r3, #0
   b9262:	d04b      	beq.n	b92fc <_ZN9TCPClient7connectEPKctm+0xc8>
   b9264:	695b      	ldr	r3, [r3, #20]
   b9266:	2b00      	cmp	r3, #0
   b9268:	d048      	beq.n	b92fc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b926a:	a806      	add	r0, sp, #24
   b926c:	f7ff fd52 	bl	b8d14 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9270:	9b00      	ldr	r3, [sp, #0]
   b9272:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9274:	7863      	ldrb	r3, [r4, #1]
   b9276:	2b02      	cmp	r3, #2
   b9278:	d104      	bne.n	b9284 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b927a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b927c:	a806      	add	r0, sp, #24
   b927e:	f7ff ffbb 	bl	b91f8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b9282:	e026      	b.n	b92d2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9284:	2b0a      	cmp	r3, #10
   b9286:	d124      	bne.n	b92d2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9288:	2211      	movs	r2, #17
   b928a:	4629      	mov	r1, r5
   b928c:	a801      	add	r0, sp, #4
   b928e:	f001 f8ad 	bl	ba3ec <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9292:	68a3      	ldr	r3, [r4, #8]
   b9294:	2b00      	cmp	r3, #0
   b9296:	d038      	beq.n	b930a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9298:	f104 0308 	add.w	r3, r4, #8
   b929c:	f10d 0c04 	add.w	ip, sp, #4
   b92a0:	3418      	adds	r4, #24
   b92a2:	6818      	ldr	r0, [r3, #0]
   b92a4:	6859      	ldr	r1, [r3, #4]
   b92a6:	4662      	mov	r2, ip
   b92a8:	c203      	stmia	r2!, {r0, r1}
   b92aa:	3308      	adds	r3, #8
   b92ac:	42a3      	cmp	r3, r4
   b92ae:	4694      	mov	ip, r2
   b92b0:	d1f7      	bne.n	b92a2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b92b2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b92b4:	a901      	add	r1, sp, #4
   b92b6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b92b8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b92bc:	f7ff fd38 	bl	b8d30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b92c0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b92c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b92c8:	ac07      	add	r4, sp, #28
   b92ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b92cc:	f8dc 3000 	ldr.w	r3, [ip]
   b92d0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b92d2:	a806      	add	r0, sp, #24
   b92d4:	f7ff fd3e 	bl	b8d54 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b92d8:	b180      	cbz	r0, b92fc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b92da:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b92dc:	ad07      	add	r5, sp, #28
   b92de:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b92e2:	4b12      	ldr	r3, [pc, #72]	; (b932c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b92e4:	930c      	str	r3, [sp, #48]	; 0x30
   b92e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b92e8:	ac0d      	add	r4, sp, #52	; 0x34
   b92ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b92ec:	682b      	ldr	r3, [r5, #0]
   b92ee:	7023      	strb	r3, [r4, #0]
   b92f0:	463a      	mov	r2, r7
   b92f2:	4643      	mov	r3, r8
   b92f4:	a90c      	add	r1, sp, #48	; 0x30
   b92f6:	4630      	mov	r0, r6
   b92f8:	47c8      	blx	r9
   b92fa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b92fc:	9800      	ldr	r0, [sp, #0]
   b92fe:	f7fd f975 	bl	b65ec <netdb_freeaddrinfo>
}
   b9302:	4628      	mov	r0, r5
   b9304:	b013      	add	sp, #76	; 0x4c
   b9306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b930a:	68e3      	ldr	r3, [r4, #12]
   b930c:	2b00      	cmp	r3, #0
   b930e:	d1c3      	bne.n	b9298 <_ZN9TCPClient7connectEPKctm+0x64>
   b9310:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9314:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9318:	f7fd fa80 	bl	b681c <inet_htonl>
   b931c:	4581      	cmp	r9, r0
   b931e:	d1bb      	bne.n	b9298 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9320:	f104 0114 	add.w	r1, r4, #20
   b9324:	e7aa      	b.n	b927c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9326:	4625      	mov	r5, r4
   b9328:	e7e8      	b.n	b92fc <_ZN9TCPClient7connectEPKctm+0xc8>
   b932a:	bf00      	nop
   b932c:	000bca18 	.word	0x000bca18

000b9330 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9330:	b538      	push	{r3, r4, r5, lr}
   b9332:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9334:	681a      	ldr	r2, [r3, #0]
   b9336:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9338:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b933a:	da10      	bge.n	b935e <_ZN9TCPClient9connectedEv+0x2e>
   b933c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9340:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9344:	429a      	cmp	r2, r3
   b9346:	d10a      	bne.n	b935e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9348:	6803      	ldr	r3, [r0, #0]
   b934a:	691b      	ldr	r3, [r3, #16]
   b934c:	4798      	blx	r3
        if (!rv) {
   b934e:	4604      	mov	r4, r0
   b9350:	b928      	cbnz	r0, b935e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9352:	682b      	ldr	r3, [r5, #0]
   b9354:	4628      	mov	r0, r5
   b9356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9358:	4798      	blx	r3
        rv = available();
   b935a:	4620      	mov	r0, r4
}
   b935c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b935e:	2001      	movs	r0, #1
   b9360:	e7fc      	b.n	b935c <_ZN9TCPClient9connectedEv+0x2c>

000b9362 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9362:	b510      	push	{r4, lr}
   b9364:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9366:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b936a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b936e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9370:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9372:	d005      	beq.n	b9380 <_ZN9TCPClient4peekEv+0x1e>
   b9374:	6963      	ldr	r3, [r4, #20]
   b9376:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b937a:	4413      	add	r3, r2
   b937c:	7918      	ldrb	r0, [r3, #4]
}
   b937e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9380:	6803      	ldr	r3, [r0, #0]
   b9382:	691b      	ldr	r3, [r3, #16]
   b9384:	4798      	blx	r3
   b9386:	2800      	cmp	r0, #0
   b9388:	d1f4      	bne.n	b9374 <_ZN9TCPClient4peekEv+0x12>
   b938a:	f04f 30ff 	mov.w	r0, #4294967295
   b938e:	e7f6      	b.n	b937e <_ZN9TCPClient4peekEv+0x1c>

000b9390 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9392:	6943      	ldr	r3, [r0, #20]
   b9394:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9396:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b939a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b939e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b93a0:	4605      	mov	r5, r0
   b93a2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b93a4:	d016      	beq.n	b93d4 <_ZN9TCPClient4readEPhj+0x44>
   b93a6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b93a8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b93ac:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b93b0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b93b2:	42bc      	cmp	r4, r7
   b93b4:	bf28      	it	cs
   b93b6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b93b8:	3304      	adds	r3, #4
   b93ba:	4622      	mov	r2, r4
   b93bc:	4419      	add	r1, r3
   b93be:	4630      	mov	r0, r6
   b93c0:	f000 ffec 	bl	ba39c <memcpy>
   b93c4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b93c6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b93ca:	4423      	add	r3, r4
   b93cc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b93d0:	4620      	mov	r0, r4
   b93d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b93d4:	6803      	ldr	r3, [r0, #0]
   b93d6:	691b      	ldr	r3, [r3, #16]
   b93d8:	4798      	blx	r3
   b93da:	2800      	cmp	r0, #0
   b93dc:	d1e3      	bne.n	b93a6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b93de:	f04f 34ff 	mov.w	r4, #4294967295
   b93e2:	e7f5      	b.n	b93d0 <_ZN9TCPClient4readEPhj+0x40>

000b93e4 <_ZN9TCPClient12flush_bufferEv>:
   b93e4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b93e6:	2300      	movs	r3, #0
   b93e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b93ec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b93ee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b93f2:	4770      	bx	lr

000b93f4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b93f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b93f8:	461f      	mov	r7, r3
    stop();
   b93fa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b93fc:	460c      	mov	r4, r1
    stop();
   b93fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9400:	b08a      	sub	sp, #40	; 0x28
   b9402:	4605      	mov	r5, r0
   b9404:	4616      	mov	r6, r2
    stop();
   b9406:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9408:	7d23      	ldrb	r3, [r4, #20]
   b940a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b940e:	2b04      	cmp	r3, #4
   b9410:	bf0c      	ite	eq
   b9412:	2002      	moveq	r0, #2
   b9414:	200a      	movne	r0, #10
   b9416:	2206      	movs	r2, #6
   b9418:	2101      	movs	r1, #1
   b941a:	f7fd faaf 	bl	b697c <sock_socket>
   b941e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9422:	696b      	ldr	r3, [r5, #20]
   b9424:	681b      	ldr	r3, [r3, #0]
   b9426:	2b00      	cmp	r3, #0
   b9428:	da08      	bge.n	b943c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b942a:	682b      	ldr	r3, [r5, #0]
   b942c:	4628      	mov	r0, r5
   b942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9430:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9432:	4798      	blx	r3
}
   b9434:	4620      	mov	r0, r4
   b9436:	b00a      	add	sp, #40	; 0x28
   b9438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b943c:	4628      	mov	r0, r5
   b943e:	f7ff ffd1 	bl	b93e4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9442:	b1b7      	cbz	r7, b9472 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9444:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9446:	a903      	add	r1, sp, #12
   b9448:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b944a:	9303      	str	r3, [sp, #12]
   b944c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9450:	f7fd f8f4 	bl	b663c <if_index_to_name>
   b9454:	2800      	cmp	r0, #0
   b9456:	d1e8      	bne.n	b942a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9458:	6968      	ldr	r0, [r5, #20]
   b945a:	2306      	movs	r3, #6
   b945c:	9300      	str	r3, [sp, #0]
   b945e:	6800      	ldr	r0, [r0, #0]
   b9460:	ab03      	add	r3, sp, #12
   b9462:	f241 020b 	movw	r2, #4107	; 0x100b
   b9466:	f640 71ff 	movw	r1, #4095	; 0xfff
   b946a:	f7fd fa5f 	bl	b692c <sock_setsockopt>
   b946e:	2800      	cmp	r0, #0
   b9470:	d1db      	bne.n	b942a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9472:	221c      	movs	r2, #28
   b9474:	2100      	movs	r1, #0
   b9476:	a803      	add	r0, sp, #12
   b9478:	f000 ffb8 	bl	ba3ec <memset>
    if (ip.version() == 4) {
   b947c:	7d23      	ldrb	r3, [r4, #20]
   b947e:	2b04      	cmp	r3, #4
   b9480:	d11d      	bne.n	b94be <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9482:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9486:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9488:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b948c:	f7fd f9ce 	bl	b682c <inet_htons>
   b9490:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9494:	6860      	ldr	r0, [r4, #4]
   b9496:	f7fd f9c1 	bl	b681c <inet_htonl>
   b949a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b949c:	696b      	ldr	r3, [r5, #20]
   b949e:	221c      	movs	r2, #28
   b94a0:	6818      	ldr	r0, [r3, #0]
   b94a2:	a903      	add	r1, sp, #12
   b94a4:	f7fd fa52 	bl	b694c <sock_connect>
   b94a8:	2800      	cmp	r0, #0
   b94aa:	d1be      	bne.n	b942a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b94ac:	3404      	adds	r4, #4
   b94ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b94b0:	696d      	ldr	r5, [r5, #20]
   b94b2:	358c      	adds	r5, #140	; 0x8c
   b94b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b94b6:	6823      	ldr	r3, [r4, #0]
   b94b8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b94ba:	2401      	movs	r4, #1
   b94bc:	e7ba      	b.n	b9434 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b94be:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b94c2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b94c4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b94c8:	f7fd f9b0 	bl	b682c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b94cc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b94ce:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b94d2:	1d23      	adds	r3, r4, #4
   b94d4:	f104 0714 	add.w	r7, r4, #20
   b94d8:	6818      	ldr	r0, [r3, #0]
   b94da:	6859      	ldr	r1, [r3, #4]
   b94dc:	4632      	mov	r2, r6
   b94de:	c203      	stmia	r2!, {r0, r1}
   b94e0:	3308      	adds	r3, #8
   b94e2:	42bb      	cmp	r3, r7
   b94e4:	4616      	mov	r6, r2
   b94e6:	d1f7      	bne.n	b94d8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b94e8:	e7d8      	b.n	b949c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b94ec <_ZN9TCPClient9availableEv>:
{
   b94ec:	b530      	push	{r4, r5, lr}
   b94ee:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b94f0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b94f4:	b08b      	sub	sp, #44	; 0x2c
   b94f6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b94f8:	b12b      	cbz	r3, b9506 <_ZN9TCPClient9availableEv+0x1a>
   b94fa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b94fe:	429a      	cmp	r2, r3
   b9500:	d101      	bne.n	b9506 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9502:	f7ff ff6f 	bl	b93e4 <_ZN9TCPClient12flush_bufferEv>
   b9506:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9508:	6808      	ldr	r0, [r1, #0]
   b950a:	2800      	cmp	r0, #0
   b950c:	db18      	blt.n	b9540 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b950e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9512:	2d7f      	cmp	r5, #127	; 0x7f
   b9514:	d814      	bhi.n	b9540 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9516:	3104      	adds	r1, #4
   b9518:	2308      	movs	r3, #8
   b951a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b951e:	4429      	add	r1, r5
   b9520:	f7fd fa1c 	bl	b695c <sock_recv>
            if (ret > 0) {
   b9524:	2800      	cmp	r0, #0
   b9526:	dd13      	ble.n	b9550 <_ZN9TCPClient9availableEv+0x64>
   b9528:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b952a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b952e:	b90a      	cbnz	r2, b9534 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9530:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9534:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9536:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b953a:	4410      	add	r0, r2
   b953c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9540:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9542:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9546:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b954a:	1ac0      	subs	r0, r0, r3
   b954c:	b00b      	add	sp, #44	; 0x2c
   b954e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9550:	f7fd fb80 	bl	b6c54 <__errno>
   b9554:	6803      	ldr	r3, [r0, #0]
   b9556:	2b0b      	cmp	r3, #11
   b9558:	d0f2      	beq.n	b9540 <_ZN9TCPClient9availableEv+0x54>
   b955a:	f7fd fb7b 	bl	b6c54 <__errno>
   b955e:	6803      	ldr	r3, [r0, #0]
   b9560:	2b0b      	cmp	r3, #11
   b9562:	d0ed      	beq.n	b9540 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9564:	2320      	movs	r3, #32
   b9566:	2500      	movs	r5, #0
   b9568:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b956c:	f7fd fb72 	bl	b6c54 <__errno>
   b9570:	6803      	ldr	r3, [r0, #0]
   b9572:	9301      	str	r3, [sp, #4]
   b9574:	4b08      	ldr	r3, [pc, #32]	; (b9598 <_ZN9TCPClient9availableEv+0xac>)
   b9576:	4909      	ldr	r1, [pc, #36]	; (b959c <_ZN9TCPClient9availableEv+0xb0>)
   b9578:	9300      	str	r3, [sp, #0]
   b957a:	aa02      	add	r2, sp, #8
   b957c:	462b      	mov	r3, r5
   b957e:	2032      	movs	r0, #50	; 0x32
   b9580:	f7fd fa4c 	bl	b6a1c <log_message>
                    sock_close(d_->sock);
   b9584:	6963      	ldr	r3, [r4, #20]
   b9586:	6818      	ldr	r0, [r3, #0]
   b9588:	f7fd f9d8 	bl	b693c <sock_close>
   b958c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b958e:	f04f 32ff 	mov.w	r2, #4294967295
   b9592:	601a      	str	r2, [r3, #0]
   b9594:	e7d4      	b.n	b9540 <_ZN9TCPClient9availableEv+0x54>
   b9596:	bf00      	nop
   b9598:	000bcab3 	.word	0x000bcab3
   b959c:	000bcaac 	.word	0x000bcaac

000b95a0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b95a0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b95a2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b95a4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b95a6:	6818      	ldr	r0, [r3, #0]
   b95a8:	2800      	cmp	r0, #0
   b95aa:	db01      	blt.n	b95b0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b95ac:	f7fd f9c6 	bl	b693c <sock_close>
   b95b0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b95b2:	f04f 32ff 	mov.w	r2, #4294967295
   b95b6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b95b8:	6960      	ldr	r0, [r4, #20]
   b95ba:	2211      	movs	r2, #17
   b95bc:	2100      	movs	r1, #0
   b95be:	308c      	adds	r0, #140	; 0x8c
   b95c0:	f000 ff14 	bl	ba3ec <memset>
    flush_buffer();
   b95c4:	4620      	mov	r0, r4
}
   b95c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b95ca:	f7ff bf0b 	b.w	b93e4 <_ZN9TCPClient12flush_bufferEv>

000b95ce <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b95ce:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b95d0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b95d2:	4604      	mov	r4, r0
          total(0) {
   b95d4:	6001      	str	r1, [r0, #0]
   b95d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b95da:	3088      	adds	r0, #136	; 0x88
   b95dc:	f7ff fb9a 	bl	b8d14 <_ZN9IPAddressC1Ev>
}
   b95e0:	4620      	mov	r0, r4
   b95e2:	bd10      	pop	{r4, pc}

000b95e4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b95e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b95e6:	2300      	movs	r3, #0
   b95e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b95ec:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b95f0:	4a0e      	ldr	r2, [pc, #56]	; (b962c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b95f2:	6103      	str	r3, [r0, #16]
   b95f4:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b95f6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b95f8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b95fa:	20ac      	movs	r0, #172	; 0xac
   b95fc:	9101      	str	r1, [sp, #4]
   b95fe:	f7fb fac4 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b9602:	1e05      	subs	r5, r0, #0
   b9604:	f105 060c 	add.w	r6, r5, #12
   b9608:	d008      	beq.n	b961c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b960a:	2301      	movs	r3, #1
   b960c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9610:	4b07      	ldr	r3, [pc, #28]	; (b9630 <_ZN9TCPClientC1Ei+0x4c>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9612:	9901      	ldr	r1, [sp, #4]
   b9614:	602b      	str	r3, [r5, #0]
   b9616:	4630      	mov	r0, r6
   b9618:	f7ff ffd9 	bl	b95ce <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b961c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b961e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9622:	f7ff fedf 	bl	b93e4 <_ZN9TCPClient12flush_bufferEv>
}
   b9626:	b002      	add	sp, #8
   b9628:	bd70      	pop	{r4, r5, r6, pc}
   b962a:	bf00      	nop
   b962c:	000bcae8 	.word	0x000bcae8
   b9630:	000bcacc 	.word	0x000bcacc

000b9634 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9634:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9636:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b963a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b963c:	f7ff ffd2 	bl	b95e4 <_ZN9TCPClientC1Ei>
}
   b9640:	4620      	mov	r0, r4
   b9642:	bd10      	pop	{r4, pc}

000b9644 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9644:	b510      	push	{r4, lr}
   b9646:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9648:	6800      	ldr	r0, [r0, #0]
   b964a:	2800      	cmp	r0, #0
   b964c:	db01      	blt.n	b9652 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b964e:	f7fd f975 	bl	b693c <sock_close>
    }
}
   b9652:	4620      	mov	r0, r4
   b9654:	bd10      	pop	{r4, pc}

000b9656 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9656:	300c      	adds	r0, #12
   b9658:	f7ff bff4 	b.w	b9644 <_ZN9TCPClient4DataD1Ev>

000b965c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b965c:	2200      	movs	r2, #0
   b965e:	6840      	ldr	r0, [r0, #4]
   b9660:	4611      	mov	r1, r2
   b9662:	f7fd ba47 	b.w	b6af4 <network_ready>

000b9666 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9666:	2200      	movs	r2, #0
   b9668:	6840      	ldr	r0, [r0, #4]
   b966a:	4611      	mov	r1, r2
   b966c:	f7fd ba62 	b.w	b6b34 <network_listening>

000b9670 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9670:	2200      	movs	r2, #0
   b9672:	6840      	ldr	r0, [r0, #4]
   b9674:	4611      	mov	r1, r2
   b9676:	f7fd ba6d 	b.w	b6b54 <network_get_listen_timeout>

000b967a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b967a:	6840      	ldr	r0, [r0, #4]
   b967c:	2200      	movs	r2, #0
   b967e:	f7fd ba61 	b.w	b6b44 <network_set_listen_timeout>

000b9682 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9682:	6840      	ldr	r0, [r0, #4]
   b9684:	2200      	movs	r2, #0
   b9686:	f081 0101 	eor.w	r1, r1, #1
   b968a:	f7fd ba4b 	b.w	b6b24 <network_listen>

000b968e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b968e:	2300      	movs	r3, #0
   b9690:	6840      	ldr	r0, [r0, #4]
   b9692:	461a      	mov	r2, r3
   b9694:	4619      	mov	r1, r3
   b9696:	f7fd ba3d 	b.w	b6b14 <network_off>

000b969a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b969a:	2300      	movs	r3, #0
   b969c:	6840      	ldr	r0, [r0, #4]
   b969e:	461a      	mov	r2, r3
   b96a0:	4619      	mov	r1, r3
   b96a2:	f7fd ba2f 	b.w	b6b04 <network_on>

000b96a6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b96a6:	2200      	movs	r2, #0
   b96a8:	6840      	ldr	r0, [r0, #4]
   b96aa:	4611      	mov	r1, r2
   b96ac:	f7fd ba12 	b.w	b6ad4 <network_connecting>

000b96b0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b96b0:	6840      	ldr	r0, [r0, #4]
   b96b2:	2200      	movs	r2, #0
   b96b4:	2102      	movs	r1, #2
   b96b6:	f7fd ba15 	b.w	b6ae4 <network_disconnect>

000b96ba <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b96ba:	2300      	movs	r3, #0
   b96bc:	6840      	ldr	r0, [r0, #4]
   b96be:	461a      	mov	r2, r3
   b96c0:	f7fd ba00 	b.w	b6ac4 <network_connect>

000b96c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b96c4:	4b02      	ldr	r3, [pc, #8]	; (b96d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b96c6:	2204      	movs	r2, #4
   b96c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b96ca:	4a02      	ldr	r2, [pc, #8]	; (b96d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b96cc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b96ce:	4770      	bx	lr
   b96d0:	2003e710 	.word	0x2003e710
   b96d4:	000bcb34 	.word	0x000bcb34

000b96d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b96d8:	2300      	movs	r3, #0
   b96da:	6840      	ldr	r0, [r0, #4]
   b96dc:	461a      	mov	r2, r3
   b96de:	f7fd b9f1 	b.w	b6ac4 <network_connect>

000b96e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b96e2:	6840      	ldr	r0, [r0, #4]
   b96e4:	2200      	movs	r2, #0
   b96e6:	2102      	movs	r1, #2
   b96e8:	f7fd b9fc 	b.w	b6ae4 <network_disconnect>

000b96ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b96ec:	2200      	movs	r2, #0
   b96ee:	6840      	ldr	r0, [r0, #4]
   b96f0:	4611      	mov	r1, r2
   b96f2:	f7fd b9ef 	b.w	b6ad4 <network_connecting>

000b96f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b96f6:	2200      	movs	r2, #0
   b96f8:	6840      	ldr	r0, [r0, #4]
   b96fa:	4611      	mov	r1, r2
   b96fc:	f7fd b9fa 	b.w	b6af4 <network_ready>

000b9700 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9700:	2300      	movs	r3, #0
   b9702:	6840      	ldr	r0, [r0, #4]
   b9704:	461a      	mov	r2, r3
   b9706:	4619      	mov	r1, r3
   b9708:	f7fd b9fc 	b.w	b6b04 <network_on>

000b970c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b970c:	2300      	movs	r3, #0
   b970e:	6840      	ldr	r0, [r0, #4]
   b9710:	461a      	mov	r2, r3
   b9712:	4619      	mov	r1, r3
   b9714:	f7fd b9fe 	b.w	b6b14 <network_off>

000b9718 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9718:	6840      	ldr	r0, [r0, #4]
   b971a:	2100      	movs	r1, #0
   b971c:	f7fd ba22 	b.w	b6b64 <network_is_on>

000b9720 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9720:	6840      	ldr	r0, [r0, #4]
   b9722:	2100      	movs	r1, #0
   b9724:	f7fd ba26 	b.w	b6b74 <network_is_off>

000b9728 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9728:	6840      	ldr	r0, [r0, #4]
   b972a:	2200      	movs	r2, #0
   b972c:	f081 0101 	eor.w	r1, r1, #1
   b9730:	f7fd b9f8 	b.w	b6b24 <network_listen>

000b9734 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9734:	6840      	ldr	r0, [r0, #4]
   b9736:	2200      	movs	r2, #0
   b9738:	f7fd ba04 	b.w	b6b44 <network_set_listen_timeout>

000b973c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b973c:	2200      	movs	r2, #0
   b973e:	6840      	ldr	r0, [r0, #4]
   b9740:	4611      	mov	r1, r2
   b9742:	f7fd ba07 	b.w	b6b54 <network_get_listen_timeout>

000b9746 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9746:	2200      	movs	r2, #0
   b9748:	6840      	ldr	r0, [r0, #4]
   b974a:	4611      	mov	r1, r2
   b974c:	f7fd b9f2 	b.w	b6b34 <network_listening>

000b9750 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9754:	b095      	sub	sp, #84	; 0x54
   b9756:	4614      	mov	r4, r2
   b9758:	460d      	mov	r5, r1
   b975a:	4607      	mov	r7, r0
    IPAddress addr;
   b975c:	f7ff fada 	bl	b8d14 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9760:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9762:	221c      	movs	r2, #28
   b9764:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9766:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9768:	f000 fe40 	bl	ba3ec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b976c:	2340      	movs	r3, #64	; 0x40
   b976e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9770:	4620      	mov	r0, r4
   b9772:	466b      	mov	r3, sp
   b9774:	aa0c      	add	r2, sp, #48	; 0x30
   b9776:	2100      	movs	r1, #0
   b9778:	f7fc ff40 	bl	b65fc <netdb_getaddrinfo>
    if (!r) {
   b977c:	4604      	mov	r4, r0
   b977e:	2800      	cmp	r0, #0
   b9780:	d14b      	bne.n	b981a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9782:	4602      	mov	r2, r0
   b9784:	2101      	movs	r1, #1
   b9786:	6868      	ldr	r0, [r5, #4]
   b9788:	f7fd f9b4 	bl	b6af4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b978c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b978e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9790:	4622      	mov	r2, r4
   b9792:	6868      	ldr	r0, [r5, #4]
   b9794:	f7fd f9ae 	bl	b6af4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9798:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b979a:	4681      	mov	r9, r0
        bool ok = false;
   b979c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b979e:	2e00      	cmp	r6, #0
   b97a0:	d03b      	beq.n	b981a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b97a2:	2900      	cmp	r1, #0
   b97a4:	d139      	bne.n	b981a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b97a6:	6873      	ldr	r3, [r6, #4]
   b97a8:	2b02      	cmp	r3, #2
   b97aa:	d003      	beq.n	b97b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b97ac:	2b0a      	cmp	r3, #10
   b97ae:	d011      	beq.n	b97d4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b97b0:	69f6      	ldr	r6, [r6, #28]
   b97b2:	e7f4      	b.n	b979e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b97b4:	f1b8 0f00 	cmp.w	r8, #0
   b97b8:	d0fa      	beq.n	b97b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b97ba:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b97bc:	a806      	add	r0, sp, #24
   b97be:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b97c0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b97c2:	f7ff faeb 	bl	b8d9c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b97c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b97c8:	1d3c      	adds	r4, r7, #4
   b97ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b97cc:	682b      	ldr	r3, [r5, #0]
   b97ce:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b97d0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b97d2:	e7ed      	b.n	b97b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b97d4:	f1b9 0f00 	cmp.w	r9, #0
   b97d8:	d0ea      	beq.n	b97b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b97da:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b97dc:	2210      	movs	r2, #16
   b97de:	a801      	add	r0, sp, #4
   b97e0:	f000 fe04 	bl	ba3ec <memset>
                    a.v = 6;
   b97e4:	2306      	movs	r3, #6
   b97e6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b97ea:	ad01      	add	r5, sp, #4
   b97ec:	f104 0308 	add.w	r3, r4, #8
   b97f0:	3418      	adds	r4, #24
   b97f2:	6818      	ldr	r0, [r3, #0]
   b97f4:	6859      	ldr	r1, [r3, #4]
   b97f6:	462a      	mov	r2, r5
   b97f8:	c203      	stmia	r2!, {r0, r1}
   b97fa:	3308      	adds	r3, #8
   b97fc:	42a3      	cmp	r3, r4
   b97fe:	4615      	mov	r5, r2
   b9800:	d1f7      	bne.n	b97f2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9802:	a901      	add	r1, sp, #4
   b9804:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9806:	ad07      	add	r5, sp, #28
   b9808:	f7ff fa92 	bl	b8d30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b980c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b980e:	1d3c      	adds	r4, r7, #4
   b9810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9812:	682b      	ldr	r3, [r5, #0]
   b9814:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9816:	4649      	mov	r1, r9
   b9818:	e7ca      	b.n	b97b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b981a:	9800      	ldr	r0, [sp, #0]
   b981c:	f7fc fee6 	bl	b65ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9820:	4638      	mov	r0, r7
   b9822:	b015      	add	sp, #84	; 0x54
   b9824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9828 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9828:	4b02      	ldr	r3, [pc, #8]	; (b9834 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b982a:	4a03      	ldr	r2, [pc, #12]	; (b9838 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b982c:	601a      	str	r2, [r3, #0]
   b982e:	2200      	movs	r2, #0
   b9830:	605a      	str	r2, [r3, #4]

} // spark
   b9832:	4770      	bx	lr
   b9834:	2003e718 	.word	0x2003e718
   b9838:	000bcb70 	.word	0x000bcb70

000b983c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b983c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b983e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9840:	d902      	bls.n	b9848 <pinAvailable+0xc>
    return false;
   b9842:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9844:	b002      	add	sp, #8
   b9846:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9848:	f1a0 030b 	sub.w	r3, r0, #11
   b984c:	2b02      	cmp	r3, #2
   b984e:	d81a      	bhi.n	b9886 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9850:	4c17      	ldr	r4, [pc, #92]	; (b98b0 <pinAvailable+0x74>)
   b9852:	7821      	ldrb	r1, [r4, #0]
   b9854:	f3bf 8f5b 	dmb	ish
   b9858:	f011 0101 	ands.w	r1, r1, #1
   b985c:	d10b      	bne.n	b9876 <pinAvailable+0x3a>
   b985e:	4620      	mov	r0, r4
   b9860:	9101      	str	r1, [sp, #4]
   b9862:	f7fb f99c 	bl	b4b9e <__cxa_guard_acquire>
   b9866:	9901      	ldr	r1, [sp, #4]
   b9868:	b128      	cbz	r0, b9876 <pinAvailable+0x3a>
   b986a:	4812      	ldr	r0, [pc, #72]	; (b98b4 <pinAvailable+0x78>)
   b986c:	f7fd fa50 	bl	b6d10 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9870:	4620      	mov	r0, r4
   b9872:	f7fb f999 	bl	b4ba8 <__cxa_guard_release>
   b9876:	4b0f      	ldr	r3, [pc, #60]	; (b98b4 <pinAvailable+0x78>)
   b9878:	7818      	ldrb	r0, [r3, #0]
   b987a:	f7fd f88f 	bl	b699c <hal_spi_is_enabled>
   b987e:	2800      	cmp	r0, #0
   b9880:	d1df      	bne.n	b9842 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9882:	2001      	movs	r0, #1
   b9884:	e7de      	b.n	b9844 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9886:	2801      	cmp	r0, #1
   b9888:	d809      	bhi.n	b989e <pinAvailable+0x62>
   b988a:	f000 f87d 	bl	b9988 <_Z19__fetch_global_Wirev>
   b988e:	2100      	movs	r1, #0
   b9890:	7c00      	ldrb	r0, [r0, #16]
   b9892:	f7fd f83b 	bl	b690c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9896:	f080 0001 	eor.w	r0, r0, #1
   b989a:	b2c0      	uxtb	r0, r0
   b989c:	e7d2      	b.n	b9844 <pinAvailable+0x8>
   b989e:	3809      	subs	r0, #9
   b98a0:	2801      	cmp	r0, #1
   b98a2:	d8ee      	bhi.n	b9882 <pinAvailable+0x46>
   b98a4:	f000 f834 	bl	b9910 <_Z22__fetch_global_Serial1v>
   b98a8:	7c00      	ldrb	r0, [r0, #16]
   b98aa:	f7fc ffef 	bl	b688c <hal_usart_is_enabled>
   b98ae:	e7f2      	b.n	b9896 <pinAvailable+0x5a>
   b98b0:	2003e720 	.word	0x2003e720
   b98b4:	2003e724 	.word	0x2003e724

000b98b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b98b8:	2823      	cmp	r0, #35	; 0x23
{
   b98ba:	b538      	push	{r3, r4, r5, lr}
   b98bc:	4604      	mov	r4, r0
   b98be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b98c0:	d80a      	bhi.n	b98d8 <pinMode+0x20>
   b98c2:	29ff      	cmp	r1, #255	; 0xff
   b98c4:	d008      	beq.n	b98d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b98c6:	f7ff ffb9 	bl	b983c <pinAvailable>
   b98ca:	b128      	cbz	r0, b98d8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b98cc:	4629      	mov	r1, r5
   b98ce:	4620      	mov	r0, r4
}
   b98d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b98d4:	f7fc be9a 	b.w	b660c <hal_gpio_mode>
}
   b98d8:	bd38      	pop	{r3, r4, r5, pc}

000b98da <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b98da:	4770      	bx	lr

000b98dc <_Z20acquireSerial1Bufferv>:
{
   b98dc:	b538      	push	{r3, r4, r5, lr}
   b98de:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b98e0:	2514      	movs	r5, #20
   b98e2:	462a      	mov	r2, r5
   b98e4:	2100      	movs	r1, #0
   b98e6:	f000 fd81 	bl	ba3ec <memset>
   b98ea:	8025      	strh	r5, [r4, #0]
   b98ec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98ee:	4907      	ldr	r1, [pc, #28]	; (b990c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b98f0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98f2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b98f4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98f6:	f000 f86b 	bl	b99d0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98fa:	4904      	ldr	r1, [pc, #16]	; (b990c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b98fc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b98fe:	4628      	mov	r0, r5
   b9900:	f000 f866 	bl	b99d0 <_ZnajRKSt9nothrow_t>
    };
   b9904:	60e0      	str	r0, [r4, #12]
}
   b9906:	4620      	mov	r0, r4
   b9908:	bd38      	pop	{r3, r4, r5, pc}
   b990a:	bf00      	nop
   b990c:	000bcba4 	.word	0x000bcba4

000b9910 <_Z22__fetch_global_Serial1v>:
{
   b9910:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9912:	4d0e      	ldr	r5, [pc, #56]	; (b994c <_Z22__fetch_global_Serial1v+0x3c>)
   b9914:	7829      	ldrb	r1, [r5, #0]
   b9916:	f3bf 8f5b 	dmb	ish
   b991a:	f011 0401 	ands.w	r4, r1, #1
{
   b991e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9920:	d111      	bne.n	b9946 <_Z22__fetch_global_Serial1v+0x36>
   b9922:	4628      	mov	r0, r5
   b9924:	f7fb f93b 	bl	b4b9e <__cxa_guard_acquire>
   b9928:	b168      	cbz	r0, b9946 <_Z22__fetch_global_Serial1v+0x36>
   b992a:	a801      	add	r0, sp, #4
   b992c:	f7ff ffd6 	bl	b98dc <_Z20acquireSerial1Bufferv>
   b9930:	aa01      	add	r2, sp, #4
   b9932:	4621      	mov	r1, r4
   b9934:	4806      	ldr	r0, [pc, #24]	; (b9950 <_Z22__fetch_global_Serial1v+0x40>)
   b9936:	f7ff fb5f 	bl	b8ff8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b993a:	4628      	mov	r0, r5
   b993c:	f7fb f934 	bl	b4ba8 <__cxa_guard_release>
   b9940:	4804      	ldr	r0, [pc, #16]	; (b9954 <_Z22__fetch_global_Serial1v+0x44>)
   b9942:	f000 fd01 	bl	ba348 <atexit>
    return serial1;
}
   b9946:	4802      	ldr	r0, [pc, #8]	; (b9950 <_Z22__fetch_global_Serial1v+0x40>)
   b9948:	b007      	add	sp, #28
   b994a:	bd30      	pop	{r4, r5, pc}
   b994c:	2003e72c 	.word	0x2003e72c
   b9950:	2003e730 	.word	0x2003e730
   b9954:	000b98db 	.word	0x000b98db

000b9958 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9958:	4770      	bx	lr
	...

000b995c <_Z17acquireWireBufferv>:
{
   b995c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b995e:	2520      	movs	r5, #32
   b9960:	2314      	movs	r3, #20
{
   b9962:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9964:	6003      	str	r3, [r0, #0]
   b9966:	6085      	str	r5, [r0, #8]
   b9968:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b996a:	4906      	ldr	r1, [pc, #24]	; (b9984 <_Z17acquireWireBufferv+0x28>)
   b996c:	4628      	mov	r0, r5
   b996e:	f000 f82f 	bl	b99d0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9972:	4904      	ldr	r1, [pc, #16]	; (b9984 <_Z17acquireWireBufferv+0x28>)
	};
   b9974:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9976:	4628      	mov	r0, r5
   b9978:	f000 f82a 	bl	b99d0 <_ZnajRKSt9nothrow_t>
	};
   b997c:	60e0      	str	r0, [r4, #12]
}
   b997e:	4620      	mov	r0, r4
   b9980:	bd38      	pop	{r3, r4, r5, pc}
   b9982:	bf00      	nop
   b9984:	000bcba4 	.word	0x000bcba4

000b9988 <_Z19__fetch_global_Wirev>:
{
   b9988:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b998a:	4d0e      	ldr	r5, [pc, #56]	; (b99c4 <_Z19__fetch_global_Wirev+0x3c>)
   b998c:	7829      	ldrb	r1, [r5, #0]
   b998e:	f3bf 8f5b 	dmb	ish
   b9992:	f011 0401 	ands.w	r4, r1, #1
{
   b9996:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9998:	d111      	bne.n	b99be <_Z19__fetch_global_Wirev+0x36>
   b999a:	4628      	mov	r0, r5
   b999c:	f7fb f8ff 	bl	b4b9e <__cxa_guard_acquire>
   b99a0:	b168      	cbz	r0, b99be <_Z19__fetch_global_Wirev+0x36>
   b99a2:	a801      	add	r0, sp, #4
   b99a4:	f7ff ffda 	bl	b995c <_Z17acquireWireBufferv>
   b99a8:	aa01      	add	r2, sp, #4
   b99aa:	4621      	mov	r1, r4
   b99ac:	4806      	ldr	r0, [pc, #24]	; (b99c8 <_Z19__fetch_global_Wirev+0x40>)
   b99ae:	f7ff fb77 	bl	b90a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b99b2:	4628      	mov	r0, r5
   b99b4:	f7fb f8f8 	bl	b4ba8 <__cxa_guard_release>
   b99b8:	4804      	ldr	r0, [pc, #16]	; (b99cc <_Z19__fetch_global_Wirev+0x44>)
   b99ba:	f000 fcc5 	bl	ba348 <atexit>
	return wire;
}
   b99be:	4802      	ldr	r0, [pc, #8]	; (b99c8 <_Z19__fetch_global_Wirev+0x40>)
   b99c0:	b007      	add	sp, #28
   b99c2:	bd30      	pop	{r4, r5, pc}
   b99c4:	2003e748 	.word	0x2003e748
   b99c8:	2003e74c 	.word	0x2003e74c
   b99cc:	000b9959 	.word	0x000b9959

000b99d0 <_ZnajRKSt9nothrow_t>:
   b99d0:	f7fb b8dd 	b.w	b4b8e <_Znaj>

000b99d4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b99d4:	68c3      	ldr	r3, [r0, #12]
   b99d6:	689a      	ldr	r2, [r3, #8]
   b99d8:	60c2      	str	r2, [r0, #12]
   b99da:	b510      	push	{r4, lr}
   b99dc:	b102      	cbz	r2, b99e0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b99de:	6050      	str	r0, [r2, #4]
   b99e0:	6842      	ldr	r2, [r0, #4]
   b99e2:	605a      	str	r2, [r3, #4]
   b99e4:	680c      	ldr	r4, [r1, #0]
   b99e6:	4284      	cmp	r4, r0
   b99e8:	d103      	bne.n	b99f2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b99ea:	600b      	str	r3, [r1, #0]
   b99ec:	6098      	str	r0, [r3, #8]
   b99ee:	6043      	str	r3, [r0, #4]
   b99f0:	bd10      	pop	{r4, pc}
   b99f2:	6891      	ldr	r1, [r2, #8]
   b99f4:	4281      	cmp	r1, r0
   b99f6:	bf0c      	ite	eq
   b99f8:	6093      	streq	r3, [r2, #8]
   b99fa:	60d3      	strne	r3, [r2, #12]
   b99fc:	e7f6      	b.n	b99ec <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b99fe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b99fe:	6883      	ldr	r3, [r0, #8]
   b9a00:	68da      	ldr	r2, [r3, #12]
   b9a02:	6082      	str	r2, [r0, #8]
   b9a04:	b510      	push	{r4, lr}
   b9a06:	b102      	cbz	r2, b9a0a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b9a08:	6050      	str	r0, [r2, #4]
   b9a0a:	6842      	ldr	r2, [r0, #4]
   b9a0c:	605a      	str	r2, [r3, #4]
   b9a0e:	680c      	ldr	r4, [r1, #0]
   b9a10:	4284      	cmp	r4, r0
   b9a12:	d103      	bne.n	b9a1c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b9a14:	600b      	str	r3, [r1, #0]
   b9a16:	60d8      	str	r0, [r3, #12]
   b9a18:	6043      	str	r3, [r0, #4]
   b9a1a:	bd10      	pop	{r4, pc}
   b9a1c:	68d1      	ldr	r1, [r2, #12]
   b9a1e:	4281      	cmp	r1, r0
   b9a20:	bf0c      	ite	eq
   b9a22:	60d3      	streq	r3, [r2, #12]
   b9a24:	6093      	strne	r3, [r2, #8]
   b9a26:	e7f6      	b.n	b9a16 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b9a28 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b9a28:	68c3      	ldr	r3, [r0, #12]
   b9a2a:	b123      	cbz	r3, b9a36 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b9a2c:	4618      	mov	r0, r3
   b9a2e:	689b      	ldr	r3, [r3, #8]
   b9a30:	2b00      	cmp	r3, #0
   b9a32:	d1fb      	bne.n	b9a2c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b9a34:	4770      	bx	lr
   b9a36:	6843      	ldr	r3, [r0, #4]
   b9a38:	68da      	ldr	r2, [r3, #12]
   b9a3a:	4282      	cmp	r2, r0
   b9a3c:	d102      	bne.n	b9a44 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b9a3e:	4618      	mov	r0, r3
   b9a40:	685b      	ldr	r3, [r3, #4]
   b9a42:	e7f9      	b.n	b9a38 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b9a44:	68c2      	ldr	r2, [r0, #12]
   b9a46:	4293      	cmp	r3, r2
   b9a48:	bf18      	it	ne
   b9a4a:	4618      	movne	r0, r3
   b9a4c:	4770      	bx	lr

000b9a4e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b9a4e:	7803      	ldrb	r3, [r0, #0]
   b9a50:	b933      	cbnz	r3, b9a60 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b9a52:	6843      	ldr	r3, [r0, #4]
   b9a54:	685b      	ldr	r3, [r3, #4]
   b9a56:	4283      	cmp	r3, r0
   b9a58:	d102      	bne.n	b9a60 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b9a5a:	68db      	ldr	r3, [r3, #12]
   b9a5c:	4618      	mov	r0, r3
   b9a5e:	4770      	bx	lr
   b9a60:	6882      	ldr	r2, [r0, #8]
   b9a62:	b122      	cbz	r2, b9a6e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b9a64:	4613      	mov	r3, r2
   b9a66:	68d2      	ldr	r2, [r2, #12]
   b9a68:	2a00      	cmp	r2, #0
   b9a6a:	d1fb      	bne.n	b9a64 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b9a6c:	e7f6      	b.n	b9a5c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b9a6e:	6843      	ldr	r3, [r0, #4]
   b9a70:	689a      	ldr	r2, [r3, #8]
   b9a72:	4282      	cmp	r2, r0
   b9a74:	d1f2      	bne.n	b9a5c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b9a76:	4618      	mov	r0, r3
   b9a78:	685b      	ldr	r3, [r3, #4]
   b9a7a:	e7f9      	b.n	b9a70 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b9a7c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b9a7c:	f7ff bfd4 	b.w	b9a28 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b9a80 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b9a80:	f7ff bfe5 	b.w	b9a4e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b9a84 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b9a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9a88:	461e      	mov	r6, r3
   b9a8a:	f103 0804 	add.w	r8, r3, #4
   b9a8e:	2300      	movs	r3, #0
   b9a90:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b9a94:	460c      	mov	r4, r1
   b9a96:	604a      	str	r2, [r1, #4]
   b9a98:	700b      	strb	r3, [r1, #0]
   b9a9a:	b300      	cbz	r0, b9ade <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b9a9c:	4296      	cmp	r6, r2
   b9a9e:	6091      	str	r1, [r2, #8]
   b9aa0:	d118      	bne.n	b9ad4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b9aa2:	6071      	str	r1, [r6, #4]
   b9aa4:	60f4      	str	r4, [r6, #12]
   b9aa6:	2701      	movs	r7, #1
   b9aa8:	f04f 0900 	mov.w	r9, #0
   b9aac:	6873      	ldr	r3, [r6, #4]
   b9aae:	42a3      	cmp	r3, r4
   b9ab0:	d03f      	beq.n	b9b32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b9ab2:	6860      	ldr	r0, [r4, #4]
   b9ab4:	7802      	ldrb	r2, [r0, #0]
   b9ab6:	2a00      	cmp	r2, #0
   b9ab8:	d13b      	bne.n	b9b32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b9aba:	6845      	ldr	r5, [r0, #4]
   b9abc:	68ab      	ldr	r3, [r5, #8]
   b9abe:	4298      	cmp	r0, r3
   b9ac0:	d123      	bne.n	b9b0a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b9ac2:	68eb      	ldr	r3, [r5, #12]
   b9ac4:	b183      	cbz	r3, b9ae8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b9ac6:	781a      	ldrb	r2, [r3, #0]
   b9ac8:	b972      	cbnz	r2, b9ae8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b9aca:	7007      	strb	r7, [r0, #0]
   b9acc:	701f      	strb	r7, [r3, #0]
   b9ace:	702a      	strb	r2, [r5, #0]
   b9ad0:	462c      	mov	r4, r5
   b9ad2:	e7eb      	b.n	b9aac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b9ad4:	68b3      	ldr	r3, [r6, #8]
   b9ad6:	4293      	cmp	r3, r2
   b9ad8:	d1e5      	bne.n	b9aa6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b9ada:	60b1      	str	r1, [r6, #8]
   b9adc:	e7e3      	b.n	b9aa6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b9ade:	60d1      	str	r1, [r2, #12]
   b9ae0:	68f3      	ldr	r3, [r6, #12]
   b9ae2:	4293      	cmp	r3, r2
   b9ae4:	d1df      	bne.n	b9aa6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b9ae6:	e7dd      	b.n	b9aa4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b9ae8:	68c3      	ldr	r3, [r0, #12]
   b9aea:	42a3      	cmp	r3, r4
   b9aec:	d103      	bne.n	b9af6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b9aee:	4641      	mov	r1, r8
   b9af0:	f7ff ff70 	bl	b99d4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b9af4:	4604      	mov	r4, r0
   b9af6:	6863      	ldr	r3, [r4, #4]
   b9af8:	4641      	mov	r1, r8
   b9afa:	701f      	strb	r7, [r3, #0]
   b9afc:	4628      	mov	r0, r5
   b9afe:	f885 9000 	strb.w	r9, [r5]
   b9b02:	f7ff ff7c 	bl	b99fe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b9b06:	4625      	mov	r5, r4
   b9b08:	e7e2      	b.n	b9ad0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b9b0a:	b113      	cbz	r3, b9b12 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b9b0c:	781a      	ldrb	r2, [r3, #0]
   b9b0e:	2a00      	cmp	r2, #0
   b9b10:	d0db      	beq.n	b9aca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b9b12:	6883      	ldr	r3, [r0, #8]
   b9b14:	42a3      	cmp	r3, r4
   b9b16:	d103      	bne.n	b9b20 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b9b18:	4641      	mov	r1, r8
   b9b1a:	f7ff ff70 	bl	b99fe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b9b1e:	4604      	mov	r4, r0
   b9b20:	6863      	ldr	r3, [r4, #4]
   b9b22:	4641      	mov	r1, r8
   b9b24:	701f      	strb	r7, [r3, #0]
   b9b26:	4628      	mov	r0, r5
   b9b28:	f885 9000 	strb.w	r9, [r5]
   b9b2c:	f7ff ff52 	bl	b99d4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b9b30:	e7e9      	b.n	b9b06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b9b32:	2201      	movs	r2, #1
   b9b34:	701a      	strb	r2, [r3, #0]
   b9b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9b3a <_ZSt17__throw_bad_allocv>:
   b9b3a:	b508      	push	{r3, lr}
   b9b3c:	f7fd f87a 	bl	b6c34 <abort>

000b9b40 <_ZSt19__throw_logic_errorPKc>:
   b9b40:	b508      	push	{r3, lr}
   b9b42:	f7fd f877 	bl	b6c34 <abort>

000b9b46 <_ZSt24__throw_invalid_argumentPKc>:
   b9b46:	b508      	push	{r3, lr}
   b9b48:	f7fd f874 	bl	b6c34 <abort>

000b9b4c <_ZSt20__throw_length_errorPKc>:
   b9b4c:	b508      	push	{r3, lr}
   b9b4e:	f7fd f871 	bl	b6c34 <abort>

000b9b52 <_ZSt20__throw_out_of_rangePKc>:
   b9b52:	b508      	push	{r3, lr}
   b9b54:	f7fd f86e 	bl	b6c34 <abort>

000b9b58 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b9b58:	b40f      	push	{r0, r1, r2, r3}
   b9b5a:	b580      	push	{r7, lr}
   b9b5c:	b084      	sub	sp, #16
   b9b5e:	af00      	add	r7, sp, #0
   b9b60:	f107 0418 	add.w	r4, r7, #24
   b9b64:	f854 2b04 	ldr.w	r2, [r4], #4
   b9b68:	607a      	str	r2, [r7, #4]
   b9b6a:	4610      	mov	r0, r2
   b9b6c:	f7fa ffb2 	bl	b4ad4 <strlen>
   b9b70:	f200 2307 	addw	r3, r0, #519	; 0x207
   b9b74:	f023 0307 	bic.w	r3, r3, #7
   b9b78:	ebad 0d03 	sub.w	sp, sp, r3
   b9b7c:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b9b80:	687a      	ldr	r2, [r7, #4]
   b9b82:	60fc      	str	r4, [r7, #12]
   b9b84:	4623      	mov	r3, r4
   b9b86:	4668      	mov	r0, sp
   b9b88:	f000 f85e 	bl	b9c48 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b9b8c:	f7fd f852 	bl	b6c34 <abort>

000b9b90 <_ZSt25__throw_bad_function_callv>:
   b9b90:	b508      	push	{r3, lr}
   b9b92:	f7fd f84f 	bl	b6c34 <abort>
	...

000b9b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9b98:	4901      	ldr	r1, [pc, #4]	; (b9ba0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9b9a:	f000 bb99 	b.w	ba2d0 <_ZNKSt9type_infoeqERKS_>
   b9b9e:	bf00      	nop
   b9ba0:	000bcbc0 	.word	0x000bcbc0

000b9ba4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b9ba4:	b580      	push	{r7, lr}
   b9ba6:	b09c      	sub	sp, #112	; 0x70
   b9ba8:	4606      	mov	r6, r0
   b9baa:	af00      	add	r7, sp, #0
   b9bac:	460c      	mov	r4, r1
   b9bae:	1ba4      	subs	r4, r4, r6
   b9bb0:	490e      	ldr	r1, [pc, #56]	; (b9bec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b9bb2:	2269      	movs	r2, #105	; 0x69
   b9bb4:	1d38      	adds	r0, r7, #4
   b9bb6:	f000 fbf1 	bl	ba39c <memcpy>
   b9bba:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b9bbe:	f023 0307 	bic.w	r3, r3, #7
   b9bc2:	ebad 0d03 	sub.w	sp, sp, r3
   b9bc6:	466d      	mov	r5, sp
   b9bc8:	2268      	movs	r2, #104	; 0x68
   b9bca:	1d39      	adds	r1, r7, #4
   b9bcc:	4628      	mov	r0, r5
   b9bce:	f000 fbe5 	bl	ba39c <memcpy>
   b9bd2:	4622      	mov	r2, r4
   b9bd4:	4631      	mov	r1, r6
   b9bd6:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b9bda:	442c      	add	r4, r5
   b9bdc:	f000 fbde 	bl	ba39c <memcpy>
   b9be0:	2300      	movs	r3, #0
   b9be2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b9be6:	4628      	mov	r0, r5
   b9be8:	f7ff ffaa 	bl	b9b40 <_ZSt19__throw_logic_errorPKc>
   b9bec:	000bcbc8 	.word	0x000bcbc8

000b9bf0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b9bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9bf4:	af00      	add	r7, sp, #0
   b9bf6:	b084      	sub	sp, #16
   b9bf8:	466d      	mov	r5, sp
   b9bfa:	f105 040c 	add.w	r4, r5, #12
   b9bfe:	f8df 8044 	ldr.w	r8, [pc, #68]	; b9c44 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b9c02:	4623      	mov	r3, r4
   b9c04:	f04f 0c0a 	mov.w	ip, #10
   b9c08:	fbb2 f6fc 	udiv	r6, r2, ip
   b9c0c:	fb0c 2e16 	mls	lr, ip, r6, r2
   b9c10:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b9c14:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b9c18:	4696      	mov	lr, r2
   b9c1a:	f1be 0f09 	cmp.w	lr, #9
   b9c1e:	4632      	mov	r2, r6
   b9c20:	d8f2      	bhi.n	b9c08 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b9c22:	1ae4      	subs	r4, r4, r3
   b9c24:	428c      	cmp	r4, r1
   b9c26:	d809      	bhi.n	b9c3c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b9c28:	f1c4 030c 	rsb	r3, r4, #12
   b9c2c:	4622      	mov	r2, r4
   b9c2e:	18e9      	adds	r1, r5, r3
   b9c30:	f000 fbb4 	bl	ba39c <memcpy>
   b9c34:	4620      	mov	r0, r4
   b9c36:	46bd      	mov	sp, r7
   b9c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9c3c:	f04f 34ff 	mov.w	r4, #4294967295
   b9c40:	e7f8      	b.n	b9c34 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b9c42:	bf00      	nop
   b9c44:	000bcc31 	.word	0x000bcc31

000b9c48 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b9c48:	3901      	subs	r1, #1
   b9c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9c4e:	4607      	mov	r7, r0
   b9c50:	4615      	mov	r5, r2
   b9c52:	eb00 0801 	add.w	r8, r0, r1
   b9c56:	4604      	mov	r4, r0
   b9c58:	782a      	ldrb	r2, [r5, #0]
   b9c5a:	b392      	cbz	r2, b9cc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b9c5c:	4544      	cmp	r4, r8
   b9c5e:	d22a      	bcs.n	b9cb6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9c60:	2a25      	cmp	r2, #37	; 0x25
   b9c62:	d107      	bne.n	b9c74 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b9c64:	786a      	ldrb	r2, [r5, #1]
   b9c66:	2a73      	cmp	r2, #115	; 0x73
   b9c68:	d009      	beq.n	b9c7e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b9c6a:	2a7a      	cmp	r2, #122	; 0x7a
   b9c6c:	d012      	beq.n	b9c94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b9c6e:	2a25      	cmp	r2, #37	; 0x25
   b9c70:	d100      	bne.n	b9c74 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b9c72:	3501      	adds	r5, #1
   b9c74:	f815 2b01 	ldrb.w	r2, [r5], #1
   b9c78:	f804 2b01 	strb.w	r2, [r4], #1
   b9c7c:	e7ec      	b.n	b9c58 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b9c7e:	f853 2b04 	ldr.w	r2, [r3], #4
   b9c82:	3a01      	subs	r2, #1
   b9c84:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b9c88:	b1c9      	cbz	r1, b9cbe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b9c8a:	4544      	cmp	r4, r8
   b9c8c:	d013      	beq.n	b9cb6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9c8e:	f804 1b01 	strb.w	r1, [r4], #1
   b9c92:	e7f7      	b.n	b9c84 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b9c94:	78aa      	ldrb	r2, [r5, #2]
   b9c96:	2a75      	cmp	r2, #117	; 0x75
   b9c98:	d1ec      	bne.n	b9c74 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b9c9a:	461e      	mov	r6, r3
   b9c9c:	eba8 0104 	sub.w	r1, r8, r4
   b9ca0:	f856 2b04 	ldr.w	r2, [r6], #4
   b9ca4:	4620      	mov	r0, r4
   b9ca6:	f7ff ffa3 	bl	b9bf0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b9caa:	2800      	cmp	r0, #0
   b9cac:	dd03      	ble.n	b9cb6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9cae:	4404      	add	r4, r0
   b9cb0:	3503      	adds	r5, #3
   b9cb2:	4633      	mov	r3, r6
   b9cb4:	e7d0      	b.n	b9c58 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b9cb6:	4621      	mov	r1, r4
   b9cb8:	4638      	mov	r0, r7
   b9cba:	f7ff ff73 	bl	b9ba4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b9cbe:	3502      	adds	r5, #2
   b9cc0:	e7ca      	b.n	b9c58 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b9cc2:	7022      	strb	r2, [r4, #0]
   b9cc4:	1be0      	subs	r0, r4, r7
   b9cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9cca <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b9cca:	b10a      	cbz	r2, b9cd0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b9ccc:	f000 bb66 	b.w	ba39c <memcpy>
   b9cd0:	4770      	bx	lr

000b9cd2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b9cd2:	b10a      	cbz	r2, b9cd8 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b9cd4:	f000 bb52 	b.w	ba37c <memcmp>
   b9cd8:	4610      	mov	r0, r2
   b9cda:	4770      	bx	lr

000b9cdc <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b9cdc:	4613      	mov	r3, r2
   b9cde:	460a      	mov	r2, r1
   b9ce0:	b111      	cbz	r1, b9ce8 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b9ce2:	7819      	ldrb	r1, [r3, #0]
   b9ce4:	f7fa be9c 	b.w	b4a20 <memchr>
   b9ce8:	4608      	mov	r0, r1
   b9cea:	4770      	bx	lr

000b9cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b9cec:	b508      	push	{r3, lr}
   b9cee:	680b      	ldr	r3, [r1, #0]
   b9cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b9cf4:	d302      	bcc.n	b9cfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b9cf6:	480d      	ldr	r0, [pc, #52]	; (b9d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b9cf8:	f7ff ff28 	bl	b9b4c <_ZSt20__throw_length_errorPKc>
   b9cfc:	4293      	cmp	r3, r2
   b9cfe:	d90b      	bls.n	b9d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9d00:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b9d04:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b9d08:	d206      	bcs.n	b9d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9d0a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b9d0e:	bf2a      	itet	cs
   b9d10:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b9d14:	6008      	strcc	r0, [r1, #0]
   b9d16:	600b      	strcs	r3, [r1, #0]
   b9d18:	6808      	ldr	r0, [r1, #0]
   b9d1a:	3001      	adds	r0, #1
   b9d1c:	d501      	bpl.n	b9d22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b9d1e:	f7ff ff0c 	bl	b9b3a <_ZSt17__throw_bad_allocv>
   b9d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9d26:	f7fa bf30 	b.w	b4b8a <_Znwj>
   b9d2a:	bf00      	nop
   b9d2c:	000bcc3c 	.word	0x000bcc3c

000b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b9d30:	f850 3b08 	ldr.w	r3, [r0], #8
   b9d34:	4283      	cmp	r3, r0
   b9d36:	d002      	beq.n	b9d3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b9d38:	4618      	mov	r0, r3
   b9d3a:	f7fa bf2a 	b.w	b4b92 <_ZdlPv>
   b9d3e:	4770      	bx	lr

000b9d40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b9d40:	b508      	push	{r3, lr}
   b9d42:	4603      	mov	r3, r0
   b9d44:	4608      	mov	r0, r1
   b9d46:	685b      	ldr	r3, [r3, #4]
   b9d48:	4298      	cmp	r0, r3
   b9d4a:	4611      	mov	r1, r2
   b9d4c:	d903      	bls.n	b9d56 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b9d4e:	4602      	mov	r2, r0
   b9d50:	4801      	ldr	r0, [pc, #4]	; (b9d58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b9d52:	f7ff ff01 	bl	b9b58 <_ZSt24__throw_out_of_range_fmtPKcz>
   b9d56:	bd08      	pop	{r3, pc}
   b9d58:	000bcc54 	.word	0x000bcc54

000b9d5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   b9d5c:	6840      	ldr	r0, [r0, #4]
   b9d5e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   b9d62:	3901      	subs	r1, #1
   b9d64:	1a09      	subs	r1, r1, r0
   b9d66:	4291      	cmp	r1, r2
   b9d68:	b508      	push	{r3, lr}
   b9d6a:	d202      	bcs.n	b9d72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   b9d6c:	4618      	mov	r0, r3
   b9d6e:	f7ff feed 	bl	b9b4c <_ZSt20__throw_length_errorPKc>
   b9d72:	bd08      	pop	{r3, pc}

000b9d74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   b9d74:	6803      	ldr	r3, [r0, #0]
   b9d76:	428b      	cmp	r3, r1
   b9d78:	d806      	bhi.n	b9d88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   b9d7a:	6840      	ldr	r0, [r0, #4]
   b9d7c:	4418      	add	r0, r3
   b9d7e:	4281      	cmp	r1, r0
   b9d80:	bf94      	ite	ls
   b9d82:	2000      	movls	r0, #0
   b9d84:	2001      	movhi	r0, #1
   b9d86:	4770      	bx	lr
   b9d88:	2001      	movs	r0, #1
   b9d8a:	4770      	bx	lr

000b9d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b9d8c:	2a01      	cmp	r2, #1
   b9d8e:	b410      	push	{r4}
   b9d90:	d104      	bne.n	b9d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b9d92:	780a      	ldrb	r2, [r1, #0]
   b9d94:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9d98:	7002      	strb	r2, [r0, #0]
   b9d9a:	4770      	bx	lr
   b9d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9da0:	f7ff bf93 	b.w	b9cca <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b9da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b9da4:	2a01      	cmp	r2, #1
   b9da6:	b430      	push	{r4, r5}
   b9da8:	d103      	bne.n	b9db2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b9daa:	780b      	ldrb	r3, [r1, #0]
   b9dac:	7003      	strb	r3, [r0, #0]
   b9dae:	bc30      	pop	{r4, r5}
   b9db0:	4770      	bx	lr
   b9db2:	2a00      	cmp	r2, #0
   b9db4:	d0fb      	beq.n	b9dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b9db6:	bc30      	pop	{r4, r5}
   b9db8:	f000 bafe 	b.w	ba3b8 <memmove>

000b9dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b9dbc:	b508      	push	{r3, lr}
   b9dbe:	1a52      	subs	r2, r2, r1
   b9dc0:	f7ff ffe4 	bl	b9d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9dc4:	bd08      	pop	{r3, pc}

000b9dc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b9dc6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b9dca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b9dcc:	461f      	mov	r7, r3
   b9dce:	6843      	ldr	r3, [r0, #4]
   b9dd0:	eb01 0802 	add.w	r8, r1, r2
   b9dd4:	1ab2      	subs	r2, r6, r2
   b9dd6:	441a      	add	r2, r3
   b9dd8:	eba3 0908 	sub.w	r9, r3, r8
   b9ddc:	4603      	mov	r3, r0
   b9dde:	9201      	str	r2, [sp, #4]
   b9de0:	f853 2b08 	ldr.w	r2, [r3], #8
   b9de4:	429a      	cmp	r2, r3
   b9de6:	bf18      	it	ne
   b9de8:	6882      	ldrne	r2, [r0, #8]
   b9dea:	460d      	mov	r5, r1
   b9dec:	bf08      	it	eq
   b9dee:	220f      	moveq	r2, #15
   b9df0:	a901      	add	r1, sp, #4
   b9df2:	4604      	mov	r4, r0
   b9df4:	f7ff ff7a 	bl	b9cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b9df8:	4682      	mov	sl, r0
   b9dfa:	b11d      	cbz	r5, b9e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b9dfc:	6821      	ldr	r1, [r4, #0]
   b9dfe:	462a      	mov	r2, r5
   b9e00:	f7ff ffc4 	bl	b9d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9e04:	b137      	cbz	r7, b9e14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b9e06:	b12e      	cbz	r6, b9e14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b9e08:	4632      	mov	r2, r6
   b9e0a:	4639      	mov	r1, r7
   b9e0c:	eb0a 0005 	add.w	r0, sl, r5
   b9e10:	f7ff ffbc 	bl	b9d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9e14:	f1b9 0f00 	cmp.w	r9, #0
   b9e18:	d007      	beq.n	b9e2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b9e1a:	6821      	ldr	r1, [r4, #0]
   b9e1c:	4435      	add	r5, r6
   b9e1e:	464a      	mov	r2, r9
   b9e20:	4441      	add	r1, r8
   b9e22:	eb0a 0005 	add.w	r0, sl, r5
   b9e26:	f7ff ffb1 	bl	b9d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9e2a:	4620      	mov	r0, r4
   b9e2c:	f7ff ff80 	bl	b9d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b9e30:	9b01      	ldr	r3, [sp, #4]
   b9e32:	f8c4 a000 	str.w	sl, [r4]
   b9e36:	60a3      	str	r3, [r4, #8]
   b9e38:	b002      	add	sp, #8
   b9e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b9e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
   b9e3e:	b538      	push	{r3, r4, r5, lr}
   b9e40:	4604      	mov	r4, r0
   b9e42:	4615      	mov	r5, r2
   b9e44:	4608      	mov	r0, r1
   b9e46:	4411      	add	r1, r2
   b9e48:	6862      	ldr	r2, [r4, #4]
   b9e4a:	1a52      	subs	r2, r2, r1
   b9e4c:	d005      	beq.n	b9e5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b9e4e:	b125      	cbz	r5, b9e5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b9e50:	6823      	ldr	r3, [r4, #0]
   b9e52:	4419      	add	r1, r3
   b9e54:	4418      	add	r0, r3
   b9e56:	f7ff ffa5 	bl	b9da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9e5a:	6862      	ldr	r2, [r4, #4]
   b9e5c:	6823      	ldr	r3, [r4, #0]
   b9e5e:	1b55      	subs	r5, r2, r5
   b9e60:	2200      	movs	r2, #0
   b9e62:	6065      	str	r5, [r4, #4]
   b9e64:	555a      	strb	r2, [r3, r5]
   b9e66:	bd38      	pop	{r3, r4, r5, pc}

000b9e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   b9e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b9e6e:	4614      	mov	r4, r2
   b9e70:	4680      	mov	r8, r0
   b9e72:	462a      	mov	r2, r5
   b9e74:	4689      	mov	r9, r1
   b9e76:	461f      	mov	r7, r3
   b9e78:	4621      	mov	r1, r4
   b9e7a:	4b39      	ldr	r3, [pc, #228]	; (b9f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   b9e7c:	f7ff ff6e 	bl	b9d5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   b9e80:	4642      	mov	r2, r8
   b9e82:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b9e86:	f852 6b08 	ldr.w	r6, [r2], #8
   b9e8a:	4296      	cmp	r6, r2
   b9e8c:	bf18      	it	ne
   b9e8e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   b9e92:	eba5 0b04 	sub.w	fp, r5, r4
   b9e96:	eb03 0a0b 	add.w	sl, r3, fp
   b9e9a:	bf08      	it	eq
   b9e9c:	220f      	moveq	r2, #15
   b9e9e:	4552      	cmp	r2, sl
   b9ea0:	d351      	bcc.n	b9f46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   b9ea2:	444e      	add	r6, r9
   b9ea4:	4639      	mov	r1, r7
   b9ea6:	44a1      	add	r9, r4
   b9ea8:	4640      	mov	r0, r8
   b9eaa:	eba3 0909 	sub.w	r9, r3, r9
   b9eae:	f7ff ff61 	bl	b9d74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   b9eb2:	b180      	cbz	r0, b9ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   b9eb4:	f1b9 0f00 	cmp.w	r9, #0
   b9eb8:	d006      	beq.n	b9ec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b9eba:	42ac      	cmp	r4, r5
   b9ebc:	d004      	beq.n	b9ec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b9ebe:	464a      	mov	r2, r9
   b9ec0:	1931      	adds	r1, r6, r4
   b9ec2:	1970      	adds	r0, r6, r5
   b9ec4:	f7ff ff6e 	bl	b9da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9ec8:	b315      	cbz	r5, b9f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9eca:	462a      	mov	r2, r5
   b9ecc:	4639      	mov	r1, r7
   b9ece:	4630      	mov	r0, r6
   b9ed0:	f7ff ff5c 	bl	b9d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9ed4:	e01c      	b.n	b9f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9ed6:	b135      	cbz	r5, b9ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   b9ed8:	42ac      	cmp	r4, r5
   b9eda:	d33c      	bcc.n	b9f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   b9edc:	462a      	mov	r2, r5
   b9ede:	4639      	mov	r1, r7
   b9ee0:	4630      	mov	r0, r6
   b9ee2:	f7ff ff5f 	bl	b9da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9ee6:	f1b9 0f00 	cmp.w	r9, #0
   b9eea:	d011      	beq.n	b9f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9eec:	42ac      	cmp	r4, r5
   b9eee:	d00f      	beq.n	b9f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9ef0:	464a      	mov	r2, r9
   b9ef2:	1931      	adds	r1, r6, r4
   b9ef4:	1970      	adds	r0, r6, r5
   b9ef6:	f7ff ff55 	bl	b9da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9efa:	42ac      	cmp	r4, r5
   b9efc:	d208      	bcs.n	b9f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9efe:	4434      	add	r4, r6
   b9f00:	197b      	adds	r3, r7, r5
   b9f02:	429c      	cmp	r4, r3
   b9f04:	d30f      	bcc.n	b9f26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   b9f06:	462a      	mov	r2, r5
   b9f08:	4639      	mov	r1, r7
   b9f0a:	4630      	mov	r0, r6
   b9f0c:	f7ff ff4a 	bl	b9da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9f10:	f8d8 3000 	ldr.w	r3, [r8]
   b9f14:	f8c8 a004 	str.w	sl, [r8, #4]
   b9f18:	2200      	movs	r2, #0
   b9f1a:	4640      	mov	r0, r8
   b9f1c:	f803 200a 	strb.w	r2, [r3, sl]
   b9f20:	b003      	add	sp, #12
   b9f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9f26:	42bc      	cmp	r4, r7
   b9f28:	d803      	bhi.n	b9f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   b9f2a:	462a      	mov	r2, r5
   b9f2c:	eb07 010b 	add.w	r1, r7, fp
   b9f30:	e7cd      	b.n	b9ece <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   b9f32:	1be4      	subs	r4, r4, r7
   b9f34:	4622      	mov	r2, r4
   b9f36:	4639      	mov	r1, r7
   b9f38:	4630      	mov	r0, r6
   b9f3a:	f7ff ff33 	bl	b9da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9f3e:	1b2a      	subs	r2, r5, r4
   b9f40:	1971      	adds	r1, r6, r5
   b9f42:	1930      	adds	r0, r6, r4
   b9f44:	e7c4      	b.n	b9ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   b9f46:	9500      	str	r5, [sp, #0]
   b9f48:	463b      	mov	r3, r7
   b9f4a:	4622      	mov	r2, r4
   b9f4c:	4649      	mov	r1, r9
   b9f4e:	4640      	mov	r0, r8
   b9f50:	f7ff ff39 	bl	b9dc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b9f54:	e7dc      	b.n	b9f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9f56:	f1b9 0f00 	cmp.w	r9, #0
   b9f5a:	d0d0      	beq.n	b9efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   b9f5c:	e7c8      	b.n	b9ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   b9f5e:	bf00      	nop
   b9f60:	000bcc8b 	.word	0x000bcc8b

000b9f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
   b9f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9f66:	4604      	mov	r4, r0
   b9f68:	4623      	mov	r3, r4
   b9f6a:	6840      	ldr	r0, [r0, #4]
   b9f6c:	f853 6b08 	ldr.w	r6, [r3], #8
   b9f70:	429e      	cmp	r6, r3
   b9f72:	bf18      	it	ne
   b9f74:	68a3      	ldrne	r3, [r4, #8]
   b9f76:	eb00 0502 	add.w	r5, r0, r2
   b9f7a:	bf08      	it	eq
   b9f7c:	230f      	moveq	r3, #15
   b9f7e:	429d      	cmp	r5, r3
   b9f80:	d80a      	bhi.n	b9f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
   b9f82:	b112      	cbz	r2, b9f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
   b9f84:	4430      	add	r0, r6
   b9f86:	f7ff ff01 	bl	b9d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9f8a:	6823      	ldr	r3, [r4, #0]
   b9f8c:	6065      	str	r5, [r4, #4]
   b9f8e:	2200      	movs	r2, #0
   b9f90:	4620      	mov	r0, r4
   b9f92:	555a      	strb	r2, [r3, r5]
   b9f94:	b002      	add	sp, #8
   b9f96:	bd70      	pop	{r4, r5, r6, pc}
   b9f98:	9200      	str	r2, [sp, #0]
   b9f9a:	460b      	mov	r3, r1
   b9f9c:	2200      	movs	r2, #0
   b9f9e:	4601      	mov	r1, r0
   b9fa0:	4620      	mov	r0, r4
   b9fa2:	f7ff ff10 	bl	b9dc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b9fa6:	e7f0      	b.n	b9f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

000b9fa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b9fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9fac:	460e      	mov	r6, r1
   b9fae:	461d      	mov	r5, r3
   b9fb0:	6841      	ldr	r1, [r0, #4]
   b9fb2:	b923      	cbnz	r3, b9fbe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b9fb4:	4291      	cmp	r1, r2
   b9fb6:	d221      	bcs.n	b9ffc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b9fb8:	f04f 32ff 	mov.w	r2, #4294967295
   b9fbc:	e01e      	b.n	b9ffc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b9fbe:	4291      	cmp	r1, r2
   b9fc0:	d9fa      	bls.n	b9fb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b9fc2:	f8d0 8000 	ldr.w	r8, [r0]
   b9fc6:	7833      	ldrb	r3, [r6, #0]
   b9fc8:	f88d 3007 	strb.w	r3, [sp, #7]
   b9fcc:	eb08 0701 	add.w	r7, r8, r1
   b9fd0:	eb08 0002 	add.w	r0, r8, r2
   b9fd4:	1a89      	subs	r1, r1, r2
   b9fd6:	f1c5 0901 	rsb	r9, r5, #1
   b9fda:	42a9      	cmp	r1, r5
   b9fdc:	d3ec      	bcc.n	b9fb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b9fde:	f10d 0207 	add.w	r2, sp, #7
   b9fe2:	4449      	add	r1, r9
   b9fe4:	f7ff fe7a 	bl	b9cdc <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b9fe8:	4604      	mov	r4, r0
   b9fea:	2800      	cmp	r0, #0
   b9fec:	d0e4      	beq.n	b9fb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b9fee:	462a      	mov	r2, r5
   b9ff0:	4631      	mov	r1, r6
   b9ff2:	f7ff fe6e 	bl	b9cd2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b9ff6:	b928      	cbnz	r0, ba004 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b9ff8:	eba4 0208 	sub.w	r2, r4, r8
   b9ffc:	4610      	mov	r0, r2
   b9ffe:	b003      	add	sp, #12
   ba000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba004:	1c60      	adds	r0, r4, #1
   ba006:	1a39      	subs	r1, r7, r0
   ba008:	e7e7      	b.n	b9fda <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000ba00a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   ba00a:	b513      	push	{r0, r1, r4, lr}
   ba00c:	4604      	mov	r4, r0
   ba00e:	4608      	mov	r0, r1
   ba010:	9201      	str	r2, [sp, #4]
   ba012:	9100      	str	r1, [sp, #0]
   ba014:	f7fa fd5e 	bl	b4ad4 <strlen>
   ba018:	e9dd 1200 	ldrd	r1, r2, [sp]
   ba01c:	4603      	mov	r3, r0
   ba01e:	4620      	mov	r0, r4
   ba020:	f7ff ffc2 	bl	b9fa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   ba024:	b002      	add	sp, #8
   ba026:	bd10      	pop	{r4, pc}

000ba028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   ba028:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba02a:	4604      	mov	r4, r0
   ba02c:	4616      	mov	r6, r2
   ba02e:	460d      	mov	r5, r1
   ba030:	b919      	cbnz	r1, ba03a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   ba032:	b112      	cbz	r2, ba03a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   ba034:	480d      	ldr	r0, [pc, #52]	; (ba06c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   ba036:	f7ff fd83 	bl	b9b40 <_ZSt19__throw_logic_errorPKc>
   ba03a:	1b73      	subs	r3, r6, r5
   ba03c:	2b0f      	cmp	r3, #15
   ba03e:	9301      	str	r3, [sp, #4]
   ba040:	d907      	bls.n	ba052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   ba042:	2200      	movs	r2, #0
   ba044:	a901      	add	r1, sp, #4
   ba046:	4620      	mov	r0, r4
   ba048:	f7ff fe50 	bl	b9cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba04c:	9b01      	ldr	r3, [sp, #4]
   ba04e:	6020      	str	r0, [r4, #0]
   ba050:	60a3      	str	r3, [r4, #8]
   ba052:	4632      	mov	r2, r6
   ba054:	4629      	mov	r1, r5
   ba056:	6820      	ldr	r0, [r4, #0]
   ba058:	f7ff feb0 	bl	b9dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   ba05c:	9b01      	ldr	r3, [sp, #4]
   ba05e:	6822      	ldr	r2, [r4, #0]
   ba060:	6063      	str	r3, [r4, #4]
   ba062:	2100      	movs	r1, #0
   ba064:	54d1      	strb	r1, [r2, r3]
   ba066:	b002      	add	sp, #8
   ba068:	bd70      	pop	{r4, r5, r6, pc}
   ba06a:	bf00      	nop
   ba06c:	000bc6d2 	.word	0x000bc6d2

000ba070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   ba070:	b508      	push	{r3, lr}
   ba072:	f04f 0300 	mov.w	r3, #0
   ba076:	f7ff ffd7 	bl	ba028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   ba07a:	bd08      	pop	{r3, pc}

000ba07c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   ba07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba080:	460d      	mov	r5, r1
   ba082:	4617      	mov	r7, r2
   ba084:	4698      	mov	r8, r3
   ba086:	f100 0308 	add.w	r3, r0, #8
   ba08a:	4604      	mov	r4, r0
   ba08c:	6003      	str	r3, [r0, #0]
   ba08e:	4639      	mov	r1, r7
   ba090:	4a09      	ldr	r2, [pc, #36]	; (ba0b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   ba092:	4628      	mov	r0, r5
   ba094:	f7ff fe54 	bl	b9d40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   ba098:	682e      	ldr	r6, [r5, #0]
   ba09a:	686a      	ldr	r2, [r5, #4]
   ba09c:	1831      	adds	r1, r6, r0
   ba09e:	1bd2      	subs	r2, r2, r7
   ba0a0:	4620      	mov	r0, r4
   ba0a2:	4542      	cmp	r2, r8
   ba0a4:	bf94      	ite	ls
   ba0a6:	188a      	addls	r2, r1, r2
   ba0a8:	eb01 0208 	addhi.w	r2, r1, r8
   ba0ac:	f7ff ffe0 	bl	ba070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   ba0b0:	4620      	mov	r0, r4
   ba0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba0b6:	bf00      	nop
   ba0b8:	000bcca4 	.word	0x000bcca4

000ba0bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   ba0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba0be:	460d      	mov	r5, r1
   ba0c0:	4604      	mov	r4, r0
   ba0c2:	4611      	mov	r1, r2
   ba0c4:	4628      	mov	r0, r5
   ba0c6:	4a06      	ldr	r2, [pc, #24]	; (ba0e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   ba0c8:	9301      	str	r3, [sp, #4]
   ba0ca:	f7ff fe39 	bl	b9d40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   ba0ce:	9b01      	ldr	r3, [sp, #4]
   ba0d0:	4602      	mov	r2, r0
   ba0d2:	4629      	mov	r1, r5
   ba0d4:	4620      	mov	r0, r4
   ba0d6:	f7ff ffd1 	bl	ba07c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   ba0da:	4620      	mov	r0, r4
   ba0dc:	b003      	add	sp, #12
   ba0de:	bd30      	pop	{r4, r5, pc}
   ba0e0:	000bccbf 	.word	0x000bccbf

000ba0e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba0e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba0e6:	2400      	movs	r4, #0
   ba0e8:	2310      	movs	r3, #16
   ba0ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba0ee:	6803      	ldr	r3, [r0, #0]
   ba0f0:	4615      	mov	r5, r2
   ba0f2:	699e      	ldr	r6, [r3, #24]
   ba0f4:	6812      	ldr	r2, [r2, #0]
   ba0f6:	466b      	mov	r3, sp
   ba0f8:	e9cd 4400 	strd	r4, r4, [sp]
   ba0fc:	47b0      	blx	r6
   ba0fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba102:	f003 0306 	and.w	r3, r3, #6
   ba106:	2b06      	cmp	r3, #6
   ba108:	bf03      	ittte	eq
   ba10a:	9b00      	ldreq	r3, [sp, #0]
   ba10c:	602b      	streq	r3, [r5, #0]
   ba10e:	2001      	moveq	r0, #1
   ba110:	4620      	movne	r0, r4
   ba112:	b004      	add	sp, #16
   ba114:	bd70      	pop	{r4, r5, r6, pc}

000ba116 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba116:	9800      	ldr	r0, [sp, #0]
   ba118:	4290      	cmp	r0, r2
   ba11a:	bf14      	ite	ne
   ba11c:	2001      	movne	r0, #1
   ba11e:	2006      	moveq	r0, #6
   ba120:	4770      	bx	lr
	...

000ba124 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba124:	b510      	push	{r4, lr}
   ba126:	4b03      	ldr	r3, [pc, #12]	; (ba134 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba128:	6003      	str	r3, [r0, #0]
   ba12a:	4604      	mov	r4, r0
   ba12c:	f000 f8cd 	bl	ba2ca <_ZNSt9type_infoD1Ev>
   ba130:	4620      	mov	r0, r4
   ba132:	bd10      	pop	{r4, pc}
   ba134:	000bcd0c 	.word	0x000bcd0c

000ba138 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba138:	b510      	push	{r4, lr}
   ba13a:	4604      	mov	r4, r0
   ba13c:	f7ff fff2 	bl	ba124 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba140:	4620      	mov	r0, r4
   ba142:	2108      	movs	r1, #8
   ba144:	f7fa fd29 	bl	b4b9a <_ZdlPvj>
   ba148:	4620      	mov	r0, r4
   ba14a:	bd10      	pop	{r4, pc}

000ba14c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba150:	461f      	mov	r7, r3
   ba152:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba156:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba15a:	4598      	cmp	r8, r3
   ba15c:	4606      	mov	r6, r0
   ba15e:	4615      	mov	r5, r2
   ba160:	d107      	bne.n	ba172 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba162:	9907      	ldr	r1, [sp, #28]
   ba164:	f000 f8b4 	bl	ba2d0 <_ZNKSt9type_infoeqERKS_>
   ba168:	b118      	cbz	r0, ba172 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba16a:	7165      	strb	r5, [r4, #5]
   ba16c:	2000      	movs	r0, #0
   ba16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba172:	4639      	mov	r1, r7
   ba174:	4630      	mov	r0, r6
   ba176:	f000 f8ab 	bl	ba2d0 <_ZNKSt9type_infoeqERKS_>
   ba17a:	2800      	cmp	r0, #0
   ba17c:	d0f6      	beq.n	ba16c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba17e:	2301      	movs	r3, #1
   ba180:	f8c4 8000 	str.w	r8, [r4]
   ba184:	7125      	strb	r5, [r4, #4]
   ba186:	71a3      	strb	r3, [r4, #6]
   ba188:	e7f0      	b.n	ba16c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba18a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba18a:	b538      	push	{r3, r4, r5, lr}
   ba18c:	4615      	mov	r5, r2
   ba18e:	461c      	mov	r4, r3
   ba190:	f000 f89e 	bl	ba2d0 <_ZNKSt9type_infoeqERKS_>
   ba194:	b120      	cbz	r0, ba1a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba196:	2308      	movs	r3, #8
   ba198:	60e3      	str	r3, [r4, #12]
   ba19a:	2306      	movs	r3, #6
   ba19c:	6025      	str	r5, [r4, #0]
   ba19e:	7123      	strb	r3, [r4, #4]
   ba1a0:	bd38      	pop	{r3, r4, r5, pc}

000ba1a2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba1a4:	4605      	mov	r5, r0
   ba1a6:	460c      	mov	r4, r1
   ba1a8:	9201      	str	r2, [sp, #4]
   ba1aa:	461e      	mov	r6, r3
   ba1ac:	f000 f890 	bl	ba2d0 <_ZNKSt9type_infoeqERKS_>
   ba1b0:	b950      	cbnz	r0, ba1c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba1b2:	2e03      	cmp	r6, #3
   ba1b4:	d808      	bhi.n	ba1c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba1b6:	6823      	ldr	r3, [r4, #0]
   ba1b8:	9a01      	ldr	r2, [sp, #4]
   ba1ba:	695b      	ldr	r3, [r3, #20]
   ba1bc:	4629      	mov	r1, r5
   ba1be:	4620      	mov	r0, r4
   ba1c0:	b002      	add	sp, #8
   ba1c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba1c6:	4718      	bx	r3
   ba1c8:	b002      	add	sp, #8
   ba1ca:	bd70      	pop	{r4, r5, r6, pc}

000ba1cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba1cc:	b510      	push	{r4, lr}
   ba1ce:	4b03      	ldr	r3, [pc, #12]	; (ba1dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba1d0:	6003      	str	r3, [r0, #0]
   ba1d2:	4604      	mov	r4, r0
   ba1d4:	f7ff ffa6 	bl	ba124 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba1d8:	4620      	mov	r0, r4
   ba1da:	bd10      	pop	{r4, pc}
   ba1dc:	000bcd6c 	.word	0x000bcd6c

000ba1e0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba1e0:	b510      	push	{r4, lr}
   ba1e2:	4604      	mov	r4, r0
   ba1e4:	f7ff fff2 	bl	ba1cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba1e8:	4620      	mov	r0, r4
   ba1ea:	210c      	movs	r1, #12
   ba1ec:	f7fa fcd5 	bl	b4b9a <_ZdlPvj>
   ba1f0:	4620      	mov	r0, r4
   ba1f2:	bd10      	pop	{r4, pc}

000ba1f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba1f6:	9f08      	ldr	r7, [sp, #32]
   ba1f8:	4297      	cmp	r7, r2
   ba1fa:	4605      	mov	r5, r0
   ba1fc:	460e      	mov	r6, r1
   ba1fe:	4614      	mov	r4, r2
   ba200:	d00a      	beq.n	ba218 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba202:	68a8      	ldr	r0, [r5, #8]
   ba204:	6802      	ldr	r2, [r0, #0]
   ba206:	9708      	str	r7, [sp, #32]
   ba208:	6a15      	ldr	r5, [r2, #32]
   ba20a:	4631      	mov	r1, r6
   ba20c:	4622      	mov	r2, r4
   ba20e:	46ac      	mov	ip, r5
   ba210:	b003      	add	sp, #12
   ba212:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba216:	4760      	bx	ip
   ba218:	4619      	mov	r1, r3
   ba21a:	9301      	str	r3, [sp, #4]
   ba21c:	f000 f858 	bl	ba2d0 <_ZNKSt9type_infoeqERKS_>
   ba220:	9b01      	ldr	r3, [sp, #4]
   ba222:	2800      	cmp	r0, #0
   ba224:	d0ed      	beq.n	ba202 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba226:	2006      	movs	r0, #6
   ba228:	b003      	add	sp, #12
   ba22a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba22c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba22c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba230:	460d      	mov	r5, r1
   ba232:	4619      	mov	r1, r3
   ba234:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba238:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba23c:	4681      	mov	r9, r0
   ba23e:	4617      	mov	r7, r2
   ba240:	4698      	mov	r8, r3
   ba242:	f000 f845 	bl	ba2d0 <_ZNKSt9type_infoeqERKS_>
   ba246:	b190      	cbz	r0, ba26e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba248:	2d00      	cmp	r5, #0
   ba24a:	6034      	str	r4, [r6, #0]
   ba24c:	7137      	strb	r7, [r6, #4]
   ba24e:	db09      	blt.n	ba264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba250:	1961      	adds	r1, r4, r5
   ba252:	458a      	cmp	sl, r1
   ba254:	bf0c      	ite	eq
   ba256:	2106      	moveq	r1, #6
   ba258:	2101      	movne	r1, #1
   ba25a:	71b1      	strb	r1, [r6, #6]
   ba25c:	2000      	movs	r0, #0
   ba25e:	b001      	add	sp, #4
   ba260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba264:	3502      	adds	r5, #2
   ba266:	d1f9      	bne.n	ba25c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba268:	2301      	movs	r3, #1
   ba26a:	71b3      	strb	r3, [r6, #6]
   ba26c:	e7f6      	b.n	ba25c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba26e:	4554      	cmp	r4, sl
   ba270:	d106      	bne.n	ba280 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba272:	4659      	mov	r1, fp
   ba274:	4648      	mov	r0, r9
   ba276:	f000 f82b 	bl	ba2d0 <_ZNKSt9type_infoeqERKS_>
   ba27a:	b108      	cbz	r0, ba280 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba27c:	7177      	strb	r7, [r6, #5]
   ba27e:	e7ed      	b.n	ba25c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba280:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba284:	6803      	ldr	r3, [r0, #0]
   ba286:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba28a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba28e:	69dc      	ldr	r4, [r3, #28]
   ba290:	463a      	mov	r2, r7
   ba292:	4643      	mov	r3, r8
   ba294:	4629      	mov	r1, r5
   ba296:	46a4      	mov	ip, r4
   ba298:	b001      	add	sp, #4
   ba29a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba29e:	4760      	bx	ip

000ba2a0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba2a4:	4607      	mov	r7, r0
   ba2a6:	460c      	mov	r4, r1
   ba2a8:	4615      	mov	r5, r2
   ba2aa:	461e      	mov	r6, r3
   ba2ac:	f7ff ff6d 	bl	ba18a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba2b0:	b948      	cbnz	r0, ba2c6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba2b2:	68b8      	ldr	r0, [r7, #8]
   ba2b4:	6803      	ldr	r3, [r0, #0]
   ba2b6:	699f      	ldr	r7, [r3, #24]
   ba2b8:	462a      	mov	r2, r5
   ba2ba:	4633      	mov	r3, r6
   ba2bc:	4621      	mov	r1, r4
   ba2be:	46bc      	mov	ip, r7
   ba2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba2c4:	4760      	bx	ip
   ba2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba2ca <_ZNSt9type_infoD1Ev>:
   ba2ca:	4770      	bx	lr

000ba2cc <_ZNKSt9type_info14__is_pointer_pEv>:
   ba2cc:	2000      	movs	r0, #0
   ba2ce:	4770      	bx	lr

000ba2d0 <_ZNKSt9type_infoeqERKS_>:
   ba2d0:	4281      	cmp	r1, r0
   ba2d2:	b508      	push	{r3, lr}
   ba2d4:	d00e      	beq.n	ba2f4 <_ZNKSt9type_infoeqERKS_+0x24>
   ba2d6:	6840      	ldr	r0, [r0, #4]
   ba2d8:	7803      	ldrb	r3, [r0, #0]
   ba2da:	2b2a      	cmp	r3, #42	; 0x2a
   ba2dc:	d00c      	beq.n	ba2f8 <_ZNKSt9type_infoeqERKS_+0x28>
   ba2de:	6849      	ldr	r1, [r1, #4]
   ba2e0:	780b      	ldrb	r3, [r1, #0]
   ba2e2:	2b2a      	cmp	r3, #42	; 0x2a
   ba2e4:	bf08      	it	eq
   ba2e6:	3101      	addeq	r1, #1
   ba2e8:	f7fa fbea 	bl	b4ac0 <strcmp>
   ba2ec:	fab0 f080 	clz	r0, r0
   ba2f0:	0940      	lsrs	r0, r0, #5
   ba2f2:	bd08      	pop	{r3, pc}
   ba2f4:	2001      	movs	r0, #1
   ba2f6:	e7fc      	b.n	ba2f2 <_ZNKSt9type_infoeqERKS_+0x22>
   ba2f8:	2000      	movs	r0, #0
   ba2fa:	e7fa      	b.n	ba2f2 <_ZNKSt9type_infoeqERKS_+0x22>

000ba2fc <asctime_r>:
   ba2fc:	b510      	push	{r4, lr}
   ba2fe:	460c      	mov	r4, r1
   ba300:	6941      	ldr	r1, [r0, #20]
   ba302:	6903      	ldr	r3, [r0, #16]
   ba304:	6982      	ldr	r2, [r0, #24]
   ba306:	b086      	sub	sp, #24
   ba308:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   ba30c:	9104      	str	r1, [sp, #16]
   ba30e:	6801      	ldr	r1, [r0, #0]
   ba310:	9103      	str	r1, [sp, #12]
   ba312:	6841      	ldr	r1, [r0, #4]
   ba314:	9102      	str	r1, [sp, #8]
   ba316:	6881      	ldr	r1, [r0, #8]
   ba318:	9101      	str	r1, [sp, #4]
   ba31a:	68c1      	ldr	r1, [r0, #12]
   ba31c:	9100      	str	r1, [sp, #0]
   ba31e:	4907      	ldr	r1, [pc, #28]	; (ba33c <asctime_r+0x40>)
   ba320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   ba324:	440b      	add	r3, r1
   ba326:	4906      	ldr	r1, [pc, #24]	; (ba340 <asctime_r+0x44>)
   ba328:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   ba32c:	440a      	add	r2, r1
   ba32e:	4620      	mov	r0, r4
   ba330:	4904      	ldr	r1, [pc, #16]	; (ba344 <asctime_r+0x48>)
   ba332:	f7fc fc6f 	bl	b6c14 <siprintf>
   ba336:	4620      	mov	r0, r4
   ba338:	b006      	add	sp, #24
   ba33a:	bd10      	pop	{r4, pc}
   ba33c:	000bcdda 	.word	0x000bcdda
   ba340:	000bcdc5 	.word	0x000bcdc5
   ba344:	000bcda5 	.word	0x000bcda5

000ba348 <atexit>:
   ba348:	2300      	movs	r3, #0
   ba34a:	4601      	mov	r1, r0
   ba34c:	461a      	mov	r2, r3
   ba34e:	4618      	mov	r0, r3
   ba350:	f000 bfd4 	b.w	bb2fc <__register_exitproc>

000ba354 <ldiv>:
   ba354:	2900      	cmp	r1, #0
   ba356:	b510      	push	{r4, lr}
   ba358:	fb91 f4f2 	sdiv	r4, r1, r2
   ba35c:	fb02 1314 	mls	r3, r2, r4, r1
   ba360:	db06      	blt.n	ba370 <ldiv+0x1c>
   ba362:	2b00      	cmp	r3, #0
   ba364:	da01      	bge.n	ba36a <ldiv+0x16>
   ba366:	3401      	adds	r4, #1
   ba368:	1a9b      	subs	r3, r3, r2
   ba36a:	e9c0 4300 	strd	r4, r3, [r0]
   ba36e:	bd10      	pop	{r4, pc}
   ba370:	2b00      	cmp	r3, #0
   ba372:	bfc4      	itt	gt
   ba374:	f104 34ff 	addgt.w	r4, r4, #4294967295
   ba378:	189b      	addgt	r3, r3, r2
   ba37a:	e7f6      	b.n	ba36a <ldiv+0x16>

000ba37c <memcmp>:
   ba37c:	b510      	push	{r4, lr}
   ba37e:	3901      	subs	r1, #1
   ba380:	4402      	add	r2, r0
   ba382:	4290      	cmp	r0, r2
   ba384:	d101      	bne.n	ba38a <memcmp+0xe>
   ba386:	2000      	movs	r0, #0
   ba388:	e005      	b.n	ba396 <memcmp+0x1a>
   ba38a:	7803      	ldrb	r3, [r0, #0]
   ba38c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba390:	42a3      	cmp	r3, r4
   ba392:	d001      	beq.n	ba398 <memcmp+0x1c>
   ba394:	1b18      	subs	r0, r3, r4
   ba396:	bd10      	pop	{r4, pc}
   ba398:	3001      	adds	r0, #1
   ba39a:	e7f2      	b.n	ba382 <memcmp+0x6>

000ba39c <memcpy>:
   ba39c:	440a      	add	r2, r1
   ba39e:	4291      	cmp	r1, r2
   ba3a0:	f100 33ff 	add.w	r3, r0, #4294967295
   ba3a4:	d100      	bne.n	ba3a8 <memcpy+0xc>
   ba3a6:	4770      	bx	lr
   ba3a8:	b510      	push	{r4, lr}
   ba3aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba3ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba3b2:	4291      	cmp	r1, r2
   ba3b4:	d1f9      	bne.n	ba3aa <memcpy+0xe>
   ba3b6:	bd10      	pop	{r4, pc}

000ba3b8 <memmove>:
   ba3b8:	4288      	cmp	r0, r1
   ba3ba:	b510      	push	{r4, lr}
   ba3bc:	eb01 0402 	add.w	r4, r1, r2
   ba3c0:	d902      	bls.n	ba3c8 <memmove+0x10>
   ba3c2:	4284      	cmp	r4, r0
   ba3c4:	4623      	mov	r3, r4
   ba3c6:	d807      	bhi.n	ba3d8 <memmove+0x20>
   ba3c8:	1e43      	subs	r3, r0, #1
   ba3ca:	42a1      	cmp	r1, r4
   ba3cc:	d008      	beq.n	ba3e0 <memmove+0x28>
   ba3ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba3d2:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba3d6:	e7f8      	b.n	ba3ca <memmove+0x12>
   ba3d8:	4402      	add	r2, r0
   ba3da:	4601      	mov	r1, r0
   ba3dc:	428a      	cmp	r2, r1
   ba3de:	d100      	bne.n	ba3e2 <memmove+0x2a>
   ba3e0:	bd10      	pop	{r4, pc}
   ba3e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba3e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba3ea:	e7f7      	b.n	ba3dc <memmove+0x24>

000ba3ec <memset>:
   ba3ec:	4402      	add	r2, r0
   ba3ee:	4603      	mov	r3, r0
   ba3f0:	4293      	cmp	r3, r2
   ba3f2:	d100      	bne.n	ba3f6 <memset+0xa>
   ba3f4:	4770      	bx	lr
   ba3f6:	f803 1b01 	strb.w	r1, [r3], #1
   ba3fa:	e7f9      	b.n	ba3f0 <memset+0x4>

000ba3fc <srand>:
   ba3fc:	b538      	push	{r3, r4, r5, lr}
   ba3fe:	4b10      	ldr	r3, [pc, #64]	; (ba440 <srand+0x44>)
   ba400:	681d      	ldr	r5, [r3, #0]
   ba402:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba404:	4604      	mov	r4, r0
   ba406:	b9b3      	cbnz	r3, ba436 <srand+0x3a>
   ba408:	2018      	movs	r0, #24
   ba40a:	f7fc fbeb 	bl	b6be4 <malloc>
   ba40e:	4602      	mov	r2, r0
   ba410:	63a8      	str	r0, [r5, #56]	; 0x38
   ba412:	b920      	cbnz	r0, ba41e <srand+0x22>
   ba414:	4b0b      	ldr	r3, [pc, #44]	; (ba444 <srand+0x48>)
   ba416:	480c      	ldr	r0, [pc, #48]	; (ba448 <srand+0x4c>)
   ba418:	2142      	movs	r1, #66	; 0x42
   ba41a:	f7fc fc23 	bl	b6c64 <__assert_func>
   ba41e:	490b      	ldr	r1, [pc, #44]	; (ba44c <srand+0x50>)
   ba420:	4b0b      	ldr	r3, [pc, #44]	; (ba450 <srand+0x54>)
   ba422:	e9c0 1300 	strd	r1, r3, [r0]
   ba426:	4b0b      	ldr	r3, [pc, #44]	; (ba454 <srand+0x58>)
   ba428:	6083      	str	r3, [r0, #8]
   ba42a:	230b      	movs	r3, #11
   ba42c:	8183      	strh	r3, [r0, #12]
   ba42e:	2100      	movs	r1, #0
   ba430:	2001      	movs	r0, #1
   ba432:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba436:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba438:	2200      	movs	r2, #0
   ba43a:	611c      	str	r4, [r3, #16]
   ba43c:	615a      	str	r2, [r3, #20]
   ba43e:	bd38      	pop	{r3, r4, r5, pc}
   ba440:	2003e2ac 	.word	0x2003e2ac
   ba444:	000bcdfe 	.word	0x000bcdfe
   ba448:	000bce15 	.word	0x000bce15
   ba44c:	abcd330e 	.word	0xabcd330e
   ba450:	e66d1234 	.word	0xe66d1234
   ba454:	0005deec 	.word	0x0005deec

000ba458 <strcpy>:
   ba458:	4603      	mov	r3, r0
   ba45a:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba45e:	f803 2b01 	strb.w	r2, [r3], #1
   ba462:	2a00      	cmp	r2, #0
   ba464:	d1f9      	bne.n	ba45a <strcpy+0x2>
   ba466:	4770      	bx	lr

000ba468 <strdup>:
   ba468:	4b02      	ldr	r3, [pc, #8]	; (ba474 <strdup+0xc>)
   ba46a:	4601      	mov	r1, r0
   ba46c:	6818      	ldr	r0, [r3, #0]
   ba46e:	f000 b803 	b.w	ba478 <_strdup_r>
   ba472:	bf00      	nop
   ba474:	2003e2ac 	.word	0x2003e2ac

000ba478 <_strdup_r>:
   ba478:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba47a:	4604      	mov	r4, r0
   ba47c:	4608      	mov	r0, r1
   ba47e:	460d      	mov	r5, r1
   ba480:	f7fa fb28 	bl	b4ad4 <strlen>
   ba484:	1c42      	adds	r2, r0, #1
   ba486:	4611      	mov	r1, r2
   ba488:	4620      	mov	r0, r4
   ba48a:	9201      	str	r2, [sp, #4]
   ba48c:	f7fc fbda 	bl	b6c44 <_malloc_r>
   ba490:	4604      	mov	r4, r0
   ba492:	b118      	cbz	r0, ba49c <_strdup_r+0x24>
   ba494:	9a01      	ldr	r2, [sp, #4]
   ba496:	4629      	mov	r1, r5
   ba498:	f7ff ff80 	bl	ba39c <memcpy>
   ba49c:	4620      	mov	r0, r4
   ba49e:	b003      	add	sp, #12
   ba4a0:	bd30      	pop	{r4, r5, pc}

000ba4a2 <strncmp>:
   ba4a2:	b510      	push	{r4, lr}
   ba4a4:	b17a      	cbz	r2, ba4c6 <strncmp+0x24>
   ba4a6:	4603      	mov	r3, r0
   ba4a8:	3901      	subs	r1, #1
   ba4aa:	1884      	adds	r4, r0, r2
   ba4ac:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba4b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba4b4:	4290      	cmp	r0, r2
   ba4b6:	d101      	bne.n	ba4bc <strncmp+0x1a>
   ba4b8:	42a3      	cmp	r3, r4
   ba4ba:	d101      	bne.n	ba4c0 <strncmp+0x1e>
   ba4bc:	1a80      	subs	r0, r0, r2
   ba4be:	bd10      	pop	{r4, pc}
   ba4c0:	2800      	cmp	r0, #0
   ba4c2:	d1f3      	bne.n	ba4ac <strncmp+0xa>
   ba4c4:	e7fa      	b.n	ba4bc <strncmp+0x1a>
   ba4c6:	4610      	mov	r0, r2
   ba4c8:	e7f9      	b.n	ba4be <strncmp+0x1c>

000ba4ca <strnlen>:
   ba4ca:	b510      	push	{r4, lr}
   ba4cc:	4602      	mov	r2, r0
   ba4ce:	4401      	add	r1, r0
   ba4d0:	428a      	cmp	r2, r1
   ba4d2:	4613      	mov	r3, r2
   ba4d4:	d003      	beq.n	ba4de <strnlen+0x14>
   ba4d6:	781c      	ldrb	r4, [r3, #0]
   ba4d8:	3201      	adds	r2, #1
   ba4da:	2c00      	cmp	r4, #0
   ba4dc:	d1f8      	bne.n	ba4d0 <strnlen+0x6>
   ba4de:	1a18      	subs	r0, r3, r0
   ba4e0:	bd10      	pop	{r4, pc}

000ba4e2 <sulp>:
   ba4e2:	b570      	push	{r4, r5, r6, lr}
   ba4e4:	4604      	mov	r4, r0
   ba4e6:	460d      	mov	r5, r1
   ba4e8:	ec45 4b10 	vmov	d0, r4, r5
   ba4ec:	4616      	mov	r6, r2
   ba4ee:	f001 fe5f 	bl	bc1b0 <__ulp>
   ba4f2:	ec51 0b10 	vmov	r0, r1, d0
   ba4f6:	b17e      	cbz	r6, ba518 <sulp+0x36>
   ba4f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba4fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba500:	2b00      	cmp	r3, #0
   ba502:	dd09      	ble.n	ba518 <sulp+0x36>
   ba504:	051b      	lsls	r3, r3, #20
   ba506:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba50a:	2400      	movs	r4, #0
   ba50c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba510:	4622      	mov	r2, r4
   ba512:	462b      	mov	r3, r5
   ba514:	f7f9 ff40 	bl	b4398 <__aeabi_dmul>
   ba518:	bd70      	pop	{r4, r5, r6, pc}
   ba51a:	0000      	movs	r0, r0
   ba51c:	0000      	movs	r0, r0
	...

000ba520 <_strtod_l>:
   ba520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba524:	ed2d 8b02 	vpush	{d8}
   ba528:	b09d      	sub	sp, #116	; 0x74
   ba52a:	461f      	mov	r7, r3
   ba52c:	2300      	movs	r3, #0
   ba52e:	9318      	str	r3, [sp, #96]	; 0x60
   ba530:	4ba2      	ldr	r3, [pc, #648]	; (ba7bc <_strtod_l+0x29c>)
   ba532:	9213      	str	r2, [sp, #76]	; 0x4c
   ba534:	681b      	ldr	r3, [r3, #0]
   ba536:	9305      	str	r3, [sp, #20]
   ba538:	4604      	mov	r4, r0
   ba53a:	4618      	mov	r0, r3
   ba53c:	4688      	mov	r8, r1
   ba53e:	f7fa fac9 	bl	b4ad4 <strlen>
   ba542:	f04f 0a00 	mov.w	sl, #0
   ba546:	4605      	mov	r5, r0
   ba548:	f04f 0b00 	mov.w	fp, #0
   ba54c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba552:	781a      	ldrb	r2, [r3, #0]
   ba554:	2a2b      	cmp	r2, #43	; 0x2b
   ba556:	d04e      	beq.n	ba5f6 <_strtod_l+0xd6>
   ba558:	d83b      	bhi.n	ba5d2 <_strtod_l+0xb2>
   ba55a:	2a0d      	cmp	r2, #13
   ba55c:	d834      	bhi.n	ba5c8 <_strtod_l+0xa8>
   ba55e:	2a08      	cmp	r2, #8
   ba560:	d834      	bhi.n	ba5cc <_strtod_l+0xac>
   ba562:	2a00      	cmp	r2, #0
   ba564:	d03e      	beq.n	ba5e4 <_strtod_l+0xc4>
   ba566:	2300      	movs	r3, #0
   ba568:	930a      	str	r3, [sp, #40]	; 0x28
   ba56a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba56c:	7833      	ldrb	r3, [r6, #0]
   ba56e:	2b30      	cmp	r3, #48	; 0x30
   ba570:	f040 80b0 	bne.w	ba6d4 <_strtod_l+0x1b4>
   ba574:	7873      	ldrb	r3, [r6, #1]
   ba576:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba57a:	2b58      	cmp	r3, #88	; 0x58
   ba57c:	d168      	bne.n	ba650 <_strtod_l+0x130>
   ba57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba580:	9301      	str	r3, [sp, #4]
   ba582:	ab18      	add	r3, sp, #96	; 0x60
   ba584:	9702      	str	r7, [sp, #8]
   ba586:	9300      	str	r3, [sp, #0]
   ba588:	4a8d      	ldr	r2, [pc, #564]	; (ba7c0 <_strtod_l+0x2a0>)
   ba58a:	ab19      	add	r3, sp, #100	; 0x64
   ba58c:	a917      	add	r1, sp, #92	; 0x5c
   ba58e:	4620      	mov	r0, r4
   ba590:	f000 ff7e 	bl	bb490 <__gethex>
   ba594:	f010 0707 	ands.w	r7, r0, #7
   ba598:	4605      	mov	r5, r0
   ba59a:	d005      	beq.n	ba5a8 <_strtod_l+0x88>
   ba59c:	2f06      	cmp	r7, #6
   ba59e:	d12c      	bne.n	ba5fa <_strtod_l+0xda>
   ba5a0:	3601      	adds	r6, #1
   ba5a2:	2300      	movs	r3, #0
   ba5a4:	9617      	str	r6, [sp, #92]	; 0x5c
   ba5a6:	930a      	str	r3, [sp, #40]	; 0x28
   ba5a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba5aa:	2b00      	cmp	r3, #0
   ba5ac:	f040 8590 	bne.w	bb0d0 <_strtod_l+0xbb0>
   ba5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba5b2:	b1eb      	cbz	r3, ba5f0 <_strtod_l+0xd0>
   ba5b4:	4652      	mov	r2, sl
   ba5b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba5ba:	ec43 2b10 	vmov	d0, r2, r3
   ba5be:	b01d      	add	sp, #116	; 0x74
   ba5c0:	ecbd 8b02 	vpop	{d8}
   ba5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba5c8:	2a20      	cmp	r2, #32
   ba5ca:	d1cc      	bne.n	ba566 <_strtod_l+0x46>
   ba5cc:	3301      	adds	r3, #1
   ba5ce:	9317      	str	r3, [sp, #92]	; 0x5c
   ba5d0:	e7be      	b.n	ba550 <_strtod_l+0x30>
   ba5d2:	2a2d      	cmp	r2, #45	; 0x2d
   ba5d4:	d1c7      	bne.n	ba566 <_strtod_l+0x46>
   ba5d6:	2201      	movs	r2, #1
   ba5d8:	920a      	str	r2, [sp, #40]	; 0x28
   ba5da:	1c5a      	adds	r2, r3, #1
   ba5dc:	9217      	str	r2, [sp, #92]	; 0x5c
   ba5de:	785b      	ldrb	r3, [r3, #1]
   ba5e0:	2b00      	cmp	r3, #0
   ba5e2:	d1c2      	bne.n	ba56a <_strtod_l+0x4a>
   ba5e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba5e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba5ea:	2b00      	cmp	r3, #0
   ba5ec:	f040 856e 	bne.w	bb0cc <_strtod_l+0xbac>
   ba5f0:	4652      	mov	r2, sl
   ba5f2:	465b      	mov	r3, fp
   ba5f4:	e7e1      	b.n	ba5ba <_strtod_l+0x9a>
   ba5f6:	2200      	movs	r2, #0
   ba5f8:	e7ee      	b.n	ba5d8 <_strtod_l+0xb8>
   ba5fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba5fc:	b13a      	cbz	r2, ba60e <_strtod_l+0xee>
   ba5fe:	2135      	movs	r1, #53	; 0x35
   ba600:	a81a      	add	r0, sp, #104	; 0x68
   ba602:	f001 fee0 	bl	bc3c6 <__copybits>
   ba606:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba608:	4620      	mov	r0, r4
   ba60a:	f001 fa9f 	bl	bbb4c <_Bfree>
   ba60e:	3f01      	subs	r7, #1
   ba610:	2f04      	cmp	r7, #4
   ba612:	d806      	bhi.n	ba622 <_strtod_l+0x102>
   ba614:	e8df f007 	tbb	[pc, r7]
   ba618:	1714030a 	.word	0x1714030a
   ba61c:	0a          	.byte	0x0a
   ba61d:	00          	.byte	0x00
   ba61e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba622:	0728      	lsls	r0, r5, #28
   ba624:	d5c0      	bpl.n	ba5a8 <_strtod_l+0x88>
   ba626:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba62a:	e7bd      	b.n	ba5a8 <_strtod_l+0x88>
   ba62c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba630:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba632:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba636:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba63a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba63e:	e7f0      	b.n	ba622 <_strtod_l+0x102>
   ba640:	f8df b180 	ldr.w	fp, [pc, #384]	; ba7c4 <_strtod_l+0x2a4>
   ba644:	e7ed      	b.n	ba622 <_strtod_l+0x102>
   ba646:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba64a:	f04f 3aff 	mov.w	sl, #4294967295
   ba64e:	e7e8      	b.n	ba622 <_strtod_l+0x102>
   ba650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba652:	1c5a      	adds	r2, r3, #1
   ba654:	9217      	str	r2, [sp, #92]	; 0x5c
   ba656:	785b      	ldrb	r3, [r3, #1]
   ba658:	2b30      	cmp	r3, #48	; 0x30
   ba65a:	d0f9      	beq.n	ba650 <_strtod_l+0x130>
   ba65c:	2b00      	cmp	r3, #0
   ba65e:	d0a3      	beq.n	ba5a8 <_strtod_l+0x88>
   ba660:	2301      	movs	r3, #1
   ba662:	f04f 0900 	mov.w	r9, #0
   ba666:	9304      	str	r3, [sp, #16]
   ba668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba66a:	9308      	str	r3, [sp, #32]
   ba66c:	f8cd 901c 	str.w	r9, [sp, #28]
   ba670:	464f      	mov	r7, r9
   ba672:	220a      	movs	r2, #10
   ba674:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba676:	7806      	ldrb	r6, [r0, #0]
   ba678:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba67c:	b2d9      	uxtb	r1, r3
   ba67e:	2909      	cmp	r1, #9
   ba680:	d92a      	bls.n	ba6d8 <_strtod_l+0x1b8>
   ba682:	9905      	ldr	r1, [sp, #20]
   ba684:	462a      	mov	r2, r5
   ba686:	f7ff ff0c 	bl	ba4a2 <strncmp>
   ba68a:	b398      	cbz	r0, ba6f4 <_strtod_l+0x1d4>
   ba68c:	2000      	movs	r0, #0
   ba68e:	4632      	mov	r2, r6
   ba690:	463d      	mov	r5, r7
   ba692:	9005      	str	r0, [sp, #20]
   ba694:	4603      	mov	r3, r0
   ba696:	2a65      	cmp	r2, #101	; 0x65
   ba698:	d001      	beq.n	ba69e <_strtod_l+0x17e>
   ba69a:	2a45      	cmp	r2, #69	; 0x45
   ba69c:	d118      	bne.n	ba6d0 <_strtod_l+0x1b0>
   ba69e:	b91d      	cbnz	r5, ba6a8 <_strtod_l+0x188>
   ba6a0:	9a04      	ldr	r2, [sp, #16]
   ba6a2:	4302      	orrs	r2, r0
   ba6a4:	d09e      	beq.n	ba5e4 <_strtod_l+0xc4>
   ba6a6:	2500      	movs	r5, #0
   ba6a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba6ac:	f108 0201 	add.w	r2, r8, #1
   ba6b0:	9217      	str	r2, [sp, #92]	; 0x5c
   ba6b2:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba6b6:	2a2b      	cmp	r2, #43	; 0x2b
   ba6b8:	d075      	beq.n	ba7a6 <_strtod_l+0x286>
   ba6ba:	2a2d      	cmp	r2, #45	; 0x2d
   ba6bc:	d07b      	beq.n	ba7b6 <_strtod_l+0x296>
   ba6be:	f04f 0c00 	mov.w	ip, #0
   ba6c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba6c6:	2909      	cmp	r1, #9
   ba6c8:	f240 8082 	bls.w	ba7d0 <_strtod_l+0x2b0>
   ba6cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba6d0:	2600      	movs	r6, #0
   ba6d2:	e09d      	b.n	ba810 <_strtod_l+0x2f0>
   ba6d4:	2300      	movs	r3, #0
   ba6d6:	e7c4      	b.n	ba662 <_strtod_l+0x142>
   ba6d8:	2f08      	cmp	r7, #8
   ba6da:	bfd8      	it	le
   ba6dc:	9907      	ldrle	r1, [sp, #28]
   ba6de:	f100 0001 	add.w	r0, r0, #1
   ba6e2:	bfda      	itte	le
   ba6e4:	fb02 3301 	mlale	r3, r2, r1, r3
   ba6e8:	9307      	strle	r3, [sp, #28]
   ba6ea:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba6ee:	3701      	adds	r7, #1
   ba6f0:	9017      	str	r0, [sp, #92]	; 0x5c
   ba6f2:	e7bf      	b.n	ba674 <_strtod_l+0x154>
   ba6f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba6f6:	195a      	adds	r2, r3, r5
   ba6f8:	9217      	str	r2, [sp, #92]	; 0x5c
   ba6fa:	5d5a      	ldrb	r2, [r3, r5]
   ba6fc:	2f00      	cmp	r7, #0
   ba6fe:	d037      	beq.n	ba770 <_strtod_l+0x250>
   ba700:	9005      	str	r0, [sp, #20]
   ba702:	463d      	mov	r5, r7
   ba704:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba708:	2b09      	cmp	r3, #9
   ba70a:	d912      	bls.n	ba732 <_strtod_l+0x212>
   ba70c:	2301      	movs	r3, #1
   ba70e:	e7c2      	b.n	ba696 <_strtod_l+0x176>
   ba710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba712:	1c5a      	adds	r2, r3, #1
   ba714:	9217      	str	r2, [sp, #92]	; 0x5c
   ba716:	785a      	ldrb	r2, [r3, #1]
   ba718:	3001      	adds	r0, #1
   ba71a:	2a30      	cmp	r2, #48	; 0x30
   ba71c:	d0f8      	beq.n	ba710 <_strtod_l+0x1f0>
   ba71e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba722:	2b08      	cmp	r3, #8
   ba724:	f200 84d9 	bhi.w	bb0da <_strtod_l+0xbba>
   ba728:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba72a:	9005      	str	r0, [sp, #20]
   ba72c:	2000      	movs	r0, #0
   ba72e:	9308      	str	r3, [sp, #32]
   ba730:	4605      	mov	r5, r0
   ba732:	3a30      	subs	r2, #48	; 0x30
   ba734:	f100 0301 	add.w	r3, r0, #1
   ba738:	d014      	beq.n	ba764 <_strtod_l+0x244>
   ba73a:	9905      	ldr	r1, [sp, #20]
   ba73c:	4419      	add	r1, r3
   ba73e:	9105      	str	r1, [sp, #20]
   ba740:	462b      	mov	r3, r5
   ba742:	eb00 0e05 	add.w	lr, r0, r5
   ba746:	210a      	movs	r1, #10
   ba748:	4573      	cmp	r3, lr
   ba74a:	d113      	bne.n	ba774 <_strtod_l+0x254>
   ba74c:	182b      	adds	r3, r5, r0
   ba74e:	2b08      	cmp	r3, #8
   ba750:	f105 0501 	add.w	r5, r5, #1
   ba754:	4405      	add	r5, r0
   ba756:	dc1c      	bgt.n	ba792 <_strtod_l+0x272>
   ba758:	9907      	ldr	r1, [sp, #28]
   ba75a:	230a      	movs	r3, #10
   ba75c:	fb03 2301 	mla	r3, r3, r1, r2
   ba760:	9307      	str	r3, [sp, #28]
   ba762:	2300      	movs	r3, #0
   ba764:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba766:	1c51      	adds	r1, r2, #1
   ba768:	9117      	str	r1, [sp, #92]	; 0x5c
   ba76a:	7852      	ldrb	r2, [r2, #1]
   ba76c:	4618      	mov	r0, r3
   ba76e:	e7c9      	b.n	ba704 <_strtod_l+0x1e4>
   ba770:	4638      	mov	r0, r7
   ba772:	e7d2      	b.n	ba71a <_strtod_l+0x1fa>
   ba774:	2b08      	cmp	r3, #8
   ba776:	dc04      	bgt.n	ba782 <_strtod_l+0x262>
   ba778:	9e07      	ldr	r6, [sp, #28]
   ba77a:	434e      	muls	r6, r1
   ba77c:	9607      	str	r6, [sp, #28]
   ba77e:	3301      	adds	r3, #1
   ba780:	e7e2      	b.n	ba748 <_strtod_l+0x228>
   ba782:	f103 0c01 	add.w	ip, r3, #1
   ba786:	f1bc 0f10 	cmp.w	ip, #16
   ba78a:	bfd8      	it	le
   ba78c:	fb01 f909 	mulle.w	r9, r1, r9
   ba790:	e7f5      	b.n	ba77e <_strtod_l+0x25e>
   ba792:	2d10      	cmp	r5, #16
   ba794:	bfdc      	itt	le
   ba796:	230a      	movle	r3, #10
   ba798:	fb03 2909 	mlale	r9, r3, r9, r2
   ba79c:	e7e1      	b.n	ba762 <_strtod_l+0x242>
   ba79e:	2300      	movs	r3, #0
   ba7a0:	9305      	str	r3, [sp, #20]
   ba7a2:	2301      	movs	r3, #1
   ba7a4:	e77c      	b.n	ba6a0 <_strtod_l+0x180>
   ba7a6:	f04f 0c00 	mov.w	ip, #0
   ba7aa:	f108 0202 	add.w	r2, r8, #2
   ba7ae:	9217      	str	r2, [sp, #92]	; 0x5c
   ba7b0:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba7b4:	e785      	b.n	ba6c2 <_strtod_l+0x1a2>
   ba7b6:	f04f 0c01 	mov.w	ip, #1
   ba7ba:	e7f6      	b.n	ba7aa <_strtod_l+0x28a>
   ba7bc:	000bd088 	.word	0x000bd088
   ba7c0:	000bcea0 	.word	0x000bcea0
   ba7c4:	7ff00000 	.word	0x7ff00000
   ba7c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba7ca:	1c51      	adds	r1, r2, #1
   ba7cc:	9117      	str	r1, [sp, #92]	; 0x5c
   ba7ce:	7852      	ldrb	r2, [r2, #1]
   ba7d0:	2a30      	cmp	r2, #48	; 0x30
   ba7d2:	d0f9      	beq.n	ba7c8 <_strtod_l+0x2a8>
   ba7d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba7d8:	2908      	cmp	r1, #8
   ba7da:	f63f af79 	bhi.w	ba6d0 <_strtod_l+0x1b0>
   ba7de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba7e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba7e4:	9206      	str	r2, [sp, #24]
   ba7e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba7e8:	1c51      	adds	r1, r2, #1
   ba7ea:	9117      	str	r1, [sp, #92]	; 0x5c
   ba7ec:	7852      	ldrb	r2, [r2, #1]
   ba7ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba7f2:	2e09      	cmp	r6, #9
   ba7f4:	d937      	bls.n	ba866 <_strtod_l+0x346>
   ba7f6:	9e06      	ldr	r6, [sp, #24]
   ba7f8:	1b89      	subs	r1, r1, r6
   ba7fa:	2908      	cmp	r1, #8
   ba7fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba800:	dc02      	bgt.n	ba808 <_strtod_l+0x2e8>
   ba802:	4576      	cmp	r6, lr
   ba804:	bfa8      	it	ge
   ba806:	4676      	movge	r6, lr
   ba808:	f1bc 0f00 	cmp.w	ip, #0
   ba80c:	d000      	beq.n	ba810 <_strtod_l+0x2f0>
   ba80e:	4276      	negs	r6, r6
   ba810:	2d00      	cmp	r5, #0
   ba812:	d14d      	bne.n	ba8b0 <_strtod_l+0x390>
   ba814:	9904      	ldr	r1, [sp, #16]
   ba816:	4301      	orrs	r1, r0
   ba818:	f47f aec6 	bne.w	ba5a8 <_strtod_l+0x88>
   ba81c:	2b00      	cmp	r3, #0
   ba81e:	f47f aee1 	bne.w	ba5e4 <_strtod_l+0xc4>
   ba822:	2a69      	cmp	r2, #105	; 0x69
   ba824:	d027      	beq.n	ba876 <_strtod_l+0x356>
   ba826:	dc24      	bgt.n	ba872 <_strtod_l+0x352>
   ba828:	2a49      	cmp	r2, #73	; 0x49
   ba82a:	d024      	beq.n	ba876 <_strtod_l+0x356>
   ba82c:	2a4e      	cmp	r2, #78	; 0x4e
   ba82e:	f47f aed9 	bne.w	ba5e4 <_strtod_l+0xc4>
   ba832:	499f      	ldr	r1, [pc, #636]	; (baab0 <_strtod_l+0x590>)
   ba834:	a817      	add	r0, sp, #92	; 0x5c
   ba836:	f001 f883 	bl	bb940 <__match>
   ba83a:	2800      	cmp	r0, #0
   ba83c:	f43f aed2 	beq.w	ba5e4 <_strtod_l+0xc4>
   ba840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba842:	781b      	ldrb	r3, [r3, #0]
   ba844:	2b28      	cmp	r3, #40	; 0x28
   ba846:	d12d      	bne.n	ba8a4 <_strtod_l+0x384>
   ba848:	499a      	ldr	r1, [pc, #616]	; (baab4 <_strtod_l+0x594>)
   ba84a:	aa1a      	add	r2, sp, #104	; 0x68
   ba84c:	a817      	add	r0, sp, #92	; 0x5c
   ba84e:	f001 f88b 	bl	bb968 <__hexnan>
   ba852:	2805      	cmp	r0, #5
   ba854:	d126      	bne.n	ba8a4 <_strtod_l+0x384>
   ba856:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba858:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba85c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba860:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba864:	e6a0      	b.n	ba5a8 <_strtod_l+0x88>
   ba866:	210a      	movs	r1, #10
   ba868:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba86c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba870:	e7b9      	b.n	ba7e6 <_strtod_l+0x2c6>
   ba872:	2a6e      	cmp	r2, #110	; 0x6e
   ba874:	e7db      	b.n	ba82e <_strtod_l+0x30e>
   ba876:	4990      	ldr	r1, [pc, #576]	; (baab8 <_strtod_l+0x598>)
   ba878:	a817      	add	r0, sp, #92	; 0x5c
   ba87a:	f001 f861 	bl	bb940 <__match>
   ba87e:	2800      	cmp	r0, #0
   ba880:	f43f aeb0 	beq.w	ba5e4 <_strtod_l+0xc4>
   ba884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba886:	498d      	ldr	r1, [pc, #564]	; (baabc <_strtod_l+0x59c>)
   ba888:	3b01      	subs	r3, #1
   ba88a:	a817      	add	r0, sp, #92	; 0x5c
   ba88c:	9317      	str	r3, [sp, #92]	; 0x5c
   ba88e:	f001 f857 	bl	bb940 <__match>
   ba892:	b910      	cbnz	r0, ba89a <_strtod_l+0x37a>
   ba894:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba896:	3301      	adds	r3, #1
   ba898:	9317      	str	r3, [sp, #92]	; 0x5c
   ba89a:	f8df b230 	ldr.w	fp, [pc, #560]	; baacc <_strtod_l+0x5ac>
   ba89e:	f04f 0a00 	mov.w	sl, #0
   ba8a2:	e681      	b.n	ba5a8 <_strtod_l+0x88>
   ba8a4:	4886      	ldr	r0, [pc, #536]	; (baac0 <_strtod_l+0x5a0>)
   ba8a6:	f001 fde3 	bl	bc470 <nan>
   ba8aa:	ec5b ab10 	vmov	sl, fp, d0
   ba8ae:	e67b      	b.n	ba5a8 <_strtod_l+0x88>
   ba8b0:	9b05      	ldr	r3, [sp, #20]
   ba8b2:	9807      	ldr	r0, [sp, #28]
   ba8b4:	1af3      	subs	r3, r6, r3
   ba8b6:	2f00      	cmp	r7, #0
   ba8b8:	bf08      	it	eq
   ba8ba:	462f      	moveq	r7, r5
   ba8bc:	2d10      	cmp	r5, #16
   ba8be:	9306      	str	r3, [sp, #24]
   ba8c0:	46a8      	mov	r8, r5
   ba8c2:	bfa8      	it	ge
   ba8c4:	f04f 0810 	movge.w	r8, #16
   ba8c8:	f7f9 fcec 	bl	b42a4 <__aeabi_ui2d>
   ba8cc:	2d09      	cmp	r5, #9
   ba8ce:	4682      	mov	sl, r0
   ba8d0:	468b      	mov	fp, r1
   ba8d2:	dd13      	ble.n	ba8fc <_strtod_l+0x3dc>
   ba8d4:	4b7b      	ldr	r3, [pc, #492]	; (baac4 <_strtod_l+0x5a4>)
   ba8d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba8da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba8de:	f7f9 fd5b 	bl	b4398 <__aeabi_dmul>
   ba8e2:	4682      	mov	sl, r0
   ba8e4:	4648      	mov	r0, r9
   ba8e6:	468b      	mov	fp, r1
   ba8e8:	f7f9 fcdc 	bl	b42a4 <__aeabi_ui2d>
   ba8ec:	4602      	mov	r2, r0
   ba8ee:	460b      	mov	r3, r1
   ba8f0:	4650      	mov	r0, sl
   ba8f2:	4659      	mov	r1, fp
   ba8f4:	f7f9 fb9a 	bl	b402c <__adddf3>
   ba8f8:	4682      	mov	sl, r0
   ba8fa:	468b      	mov	fp, r1
   ba8fc:	2d0f      	cmp	r5, #15
   ba8fe:	dc38      	bgt.n	ba972 <_strtod_l+0x452>
   ba900:	9b06      	ldr	r3, [sp, #24]
   ba902:	2b00      	cmp	r3, #0
   ba904:	f43f ae50 	beq.w	ba5a8 <_strtod_l+0x88>
   ba908:	dd24      	ble.n	ba954 <_strtod_l+0x434>
   ba90a:	2b16      	cmp	r3, #22
   ba90c:	dc0b      	bgt.n	ba926 <_strtod_l+0x406>
   ba90e:	496d      	ldr	r1, [pc, #436]	; (baac4 <_strtod_l+0x5a4>)
   ba910:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba914:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba918:	4652      	mov	r2, sl
   ba91a:	465b      	mov	r3, fp
   ba91c:	f7f9 fd3c 	bl	b4398 <__aeabi_dmul>
   ba920:	4682      	mov	sl, r0
   ba922:	468b      	mov	fp, r1
   ba924:	e640      	b.n	ba5a8 <_strtod_l+0x88>
   ba926:	9a06      	ldr	r2, [sp, #24]
   ba928:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba92c:	4293      	cmp	r3, r2
   ba92e:	db20      	blt.n	ba972 <_strtod_l+0x452>
   ba930:	4c64      	ldr	r4, [pc, #400]	; (baac4 <_strtod_l+0x5a4>)
   ba932:	f1c5 050f 	rsb	r5, r5, #15
   ba936:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba93a:	4652      	mov	r2, sl
   ba93c:	465b      	mov	r3, fp
   ba93e:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba942:	f7f9 fd29 	bl	b4398 <__aeabi_dmul>
   ba946:	9b06      	ldr	r3, [sp, #24]
   ba948:	1b5d      	subs	r5, r3, r5
   ba94a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba94e:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba952:	e7e3      	b.n	ba91c <_strtod_l+0x3fc>
   ba954:	9b06      	ldr	r3, [sp, #24]
   ba956:	3316      	adds	r3, #22
   ba958:	db0b      	blt.n	ba972 <_strtod_l+0x452>
   ba95a:	9b05      	ldr	r3, [sp, #20]
   ba95c:	1b9e      	subs	r6, r3, r6
   ba95e:	4b59      	ldr	r3, [pc, #356]	; (baac4 <_strtod_l+0x5a4>)
   ba960:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba964:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba968:	4650      	mov	r0, sl
   ba96a:	4659      	mov	r1, fp
   ba96c:	f7f9 fe3e 	bl	b45ec <__aeabi_ddiv>
   ba970:	e7d6      	b.n	ba920 <_strtod_l+0x400>
   ba972:	9b06      	ldr	r3, [sp, #24]
   ba974:	eba5 0808 	sub.w	r8, r5, r8
   ba978:	4498      	add	r8, r3
   ba97a:	f1b8 0f00 	cmp.w	r8, #0
   ba97e:	dd74      	ble.n	baa6a <_strtod_l+0x54a>
   ba980:	f018 030f 	ands.w	r3, r8, #15
   ba984:	d00a      	beq.n	ba99c <_strtod_l+0x47c>
   ba986:	494f      	ldr	r1, [pc, #316]	; (baac4 <_strtod_l+0x5a4>)
   ba988:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba98c:	4652      	mov	r2, sl
   ba98e:	465b      	mov	r3, fp
   ba990:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba994:	f7f9 fd00 	bl	b4398 <__aeabi_dmul>
   ba998:	4682      	mov	sl, r0
   ba99a:	468b      	mov	fp, r1
   ba99c:	f038 080f 	bics.w	r8, r8, #15
   ba9a0:	d04f      	beq.n	baa42 <_strtod_l+0x522>
   ba9a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba9a6:	dd22      	ble.n	ba9ee <_strtod_l+0x4ce>
   ba9a8:	2500      	movs	r5, #0
   ba9aa:	462e      	mov	r6, r5
   ba9ac:	9507      	str	r5, [sp, #28]
   ba9ae:	9505      	str	r5, [sp, #20]
   ba9b0:	2322      	movs	r3, #34	; 0x22
   ba9b2:	f8df b118 	ldr.w	fp, [pc, #280]	; baacc <_strtod_l+0x5ac>
   ba9b6:	6023      	str	r3, [r4, #0]
   ba9b8:	f04f 0a00 	mov.w	sl, #0
   ba9bc:	9b07      	ldr	r3, [sp, #28]
   ba9be:	2b00      	cmp	r3, #0
   ba9c0:	f43f adf2 	beq.w	ba5a8 <_strtod_l+0x88>
   ba9c4:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba9c6:	4620      	mov	r0, r4
   ba9c8:	f001 f8c0 	bl	bbb4c <_Bfree>
   ba9cc:	9905      	ldr	r1, [sp, #20]
   ba9ce:	4620      	mov	r0, r4
   ba9d0:	f001 f8bc 	bl	bbb4c <_Bfree>
   ba9d4:	4631      	mov	r1, r6
   ba9d6:	4620      	mov	r0, r4
   ba9d8:	f001 f8b8 	bl	bbb4c <_Bfree>
   ba9dc:	9907      	ldr	r1, [sp, #28]
   ba9de:	4620      	mov	r0, r4
   ba9e0:	f001 f8b4 	bl	bbb4c <_Bfree>
   ba9e4:	4629      	mov	r1, r5
   ba9e6:	4620      	mov	r0, r4
   ba9e8:	f001 f8b0 	bl	bbb4c <_Bfree>
   ba9ec:	e5dc      	b.n	ba5a8 <_strtod_l+0x88>
   ba9ee:	4b36      	ldr	r3, [pc, #216]	; (baac8 <_strtod_l+0x5a8>)
   ba9f0:	9304      	str	r3, [sp, #16]
   ba9f2:	2300      	movs	r3, #0
   ba9f4:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba9f8:	4650      	mov	r0, sl
   ba9fa:	4659      	mov	r1, fp
   ba9fc:	4699      	mov	r9, r3
   ba9fe:	f1b8 0f01 	cmp.w	r8, #1
   baa02:	dc21      	bgt.n	baa48 <_strtod_l+0x528>
   baa04:	b10b      	cbz	r3, baa0a <_strtod_l+0x4ea>
   baa06:	4682      	mov	sl, r0
   baa08:	468b      	mov	fp, r1
   baa0a:	4b2f      	ldr	r3, [pc, #188]	; (baac8 <_strtod_l+0x5a8>)
   baa0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   baa10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   baa14:	4652      	mov	r2, sl
   baa16:	465b      	mov	r3, fp
   baa18:	e9d9 0100 	ldrd	r0, r1, [r9]
   baa1c:	f7f9 fcbc 	bl	b4398 <__aeabi_dmul>
   baa20:	4b2a      	ldr	r3, [pc, #168]	; (baacc <_strtod_l+0x5ac>)
   baa22:	460a      	mov	r2, r1
   baa24:	400b      	ands	r3, r1
   baa26:	492a      	ldr	r1, [pc, #168]	; (baad0 <_strtod_l+0x5b0>)
   baa28:	428b      	cmp	r3, r1
   baa2a:	4682      	mov	sl, r0
   baa2c:	d8bc      	bhi.n	ba9a8 <_strtod_l+0x488>
   baa2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   baa32:	428b      	cmp	r3, r1
   baa34:	bf86      	itte	hi
   baa36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; baad4 <_strtod_l+0x5b4>
   baa3a:	f04f 3aff 	movhi.w	sl, #4294967295
   baa3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   baa42:	2300      	movs	r3, #0
   baa44:	9304      	str	r3, [sp, #16]
   baa46:	e084      	b.n	bab52 <_strtod_l+0x632>
   baa48:	f018 0f01 	tst.w	r8, #1
   baa4c:	d005      	beq.n	baa5a <_strtod_l+0x53a>
   baa4e:	9b04      	ldr	r3, [sp, #16]
   baa50:	e9d3 2300 	ldrd	r2, r3, [r3]
   baa54:	f7f9 fca0 	bl	b4398 <__aeabi_dmul>
   baa58:	2301      	movs	r3, #1
   baa5a:	9a04      	ldr	r2, [sp, #16]
   baa5c:	3208      	adds	r2, #8
   baa5e:	f109 0901 	add.w	r9, r9, #1
   baa62:	ea4f 0868 	mov.w	r8, r8, asr #1
   baa66:	9204      	str	r2, [sp, #16]
   baa68:	e7c9      	b.n	ba9fe <_strtod_l+0x4de>
   baa6a:	d0ea      	beq.n	baa42 <_strtod_l+0x522>
   baa6c:	f1c8 0800 	rsb	r8, r8, #0
   baa70:	f018 020f 	ands.w	r2, r8, #15
   baa74:	d00a      	beq.n	baa8c <_strtod_l+0x56c>
   baa76:	4b13      	ldr	r3, [pc, #76]	; (baac4 <_strtod_l+0x5a4>)
   baa78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   baa7c:	4650      	mov	r0, sl
   baa7e:	4659      	mov	r1, fp
   baa80:	e9d3 2300 	ldrd	r2, r3, [r3]
   baa84:	f7f9 fdb2 	bl	b45ec <__aeabi_ddiv>
   baa88:	4682      	mov	sl, r0
   baa8a:	468b      	mov	fp, r1
   baa8c:	ea5f 1828 	movs.w	r8, r8, asr #4
   baa90:	d0d7      	beq.n	baa42 <_strtod_l+0x522>
   baa92:	f1b8 0f1f 	cmp.w	r8, #31
   baa96:	dd1f      	ble.n	baad8 <_strtod_l+0x5b8>
   baa98:	2500      	movs	r5, #0
   baa9a:	462e      	mov	r6, r5
   baa9c:	9507      	str	r5, [sp, #28]
   baa9e:	9505      	str	r5, [sp, #20]
   baaa0:	2322      	movs	r3, #34	; 0x22
   baaa2:	f04f 0a00 	mov.w	sl, #0
   baaa6:	f04f 0b00 	mov.w	fp, #0
   baaaa:	6023      	str	r3, [r4, #0]
   baaac:	e786      	b.n	ba9bc <_strtod_l+0x49c>
   baaae:	bf00      	nop
   baab0:	000bce9b 	.word	0x000bce9b
   baab4:	000bceb4 	.word	0x000bceb4
   baab8:	000bce92 	.word	0x000bce92
   baabc:	000bce95 	.word	0x000bce95
   baac0:	000bc56d 	.word	0x000bc56d
   baac4:	000bd148 	.word	0x000bd148
   baac8:	000bd120 	.word	0x000bd120
   baacc:	7ff00000 	.word	0x7ff00000
   baad0:	7ca00000 	.word	0x7ca00000
   baad4:	7fefffff 	.word	0x7fefffff
   baad8:	f018 0310 	ands.w	r3, r8, #16
   baadc:	bf18      	it	ne
   baade:	236a      	movne	r3, #106	; 0x6a
   baae0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bae90 <_strtod_l+0x970>
   baae4:	9304      	str	r3, [sp, #16]
   baae6:	4650      	mov	r0, sl
   baae8:	4659      	mov	r1, fp
   baaea:	2300      	movs	r3, #0
   baaec:	f018 0f01 	tst.w	r8, #1
   baaf0:	d004      	beq.n	baafc <_strtod_l+0x5dc>
   baaf2:	e9d9 2300 	ldrd	r2, r3, [r9]
   baaf6:	f7f9 fc4f 	bl	b4398 <__aeabi_dmul>
   baafa:	2301      	movs	r3, #1
   baafc:	ea5f 0868 	movs.w	r8, r8, asr #1
   bab00:	f109 0908 	add.w	r9, r9, #8
   bab04:	d1f2      	bne.n	baaec <_strtod_l+0x5cc>
   bab06:	b10b      	cbz	r3, bab0c <_strtod_l+0x5ec>
   bab08:	4682      	mov	sl, r0
   bab0a:	468b      	mov	fp, r1
   bab0c:	9b04      	ldr	r3, [sp, #16]
   bab0e:	b1c3      	cbz	r3, bab42 <_strtod_l+0x622>
   bab10:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bab14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bab18:	2b00      	cmp	r3, #0
   bab1a:	4659      	mov	r1, fp
   bab1c:	dd11      	ble.n	bab42 <_strtod_l+0x622>
   bab1e:	2b1f      	cmp	r3, #31
   bab20:	f340 8124 	ble.w	bad6c <_strtod_l+0x84c>
   bab24:	2b34      	cmp	r3, #52	; 0x34
   bab26:	bfde      	ittt	le
   bab28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bab2c:	f04f 33ff 	movle.w	r3, #4294967295
   bab30:	fa03 f202 	lslle.w	r2, r3, r2
   bab34:	f04f 0a00 	mov.w	sl, #0
   bab38:	bfcc      	ite	gt
   bab3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bab3e:	ea02 0b01 	andle.w	fp, r2, r1
   bab42:	2200      	movs	r2, #0
   bab44:	2300      	movs	r3, #0
   bab46:	4650      	mov	r0, sl
   bab48:	4659      	mov	r1, fp
   bab4a:	f7f9 fe8d 	bl	b4868 <__aeabi_dcmpeq>
   bab4e:	2800      	cmp	r0, #0
   bab50:	d1a2      	bne.n	baa98 <_strtod_l+0x578>
   bab52:	9b07      	ldr	r3, [sp, #28]
   bab54:	9300      	str	r3, [sp, #0]
   bab56:	9908      	ldr	r1, [sp, #32]
   bab58:	462b      	mov	r3, r5
   bab5a:	463a      	mov	r2, r7
   bab5c:	4620      	mov	r0, r4
   bab5e:	f001 f85d 	bl	bbc1c <__s2b>
   bab62:	9007      	str	r0, [sp, #28]
   bab64:	2800      	cmp	r0, #0
   bab66:	f43f af1f 	beq.w	ba9a8 <_strtod_l+0x488>
   bab6a:	9b05      	ldr	r3, [sp, #20]
   bab6c:	1b9e      	subs	r6, r3, r6
   bab6e:	9b06      	ldr	r3, [sp, #24]
   bab70:	2b00      	cmp	r3, #0
   bab72:	bfb4      	ite	lt
   bab74:	4633      	movlt	r3, r6
   bab76:	2300      	movge	r3, #0
   bab78:	930c      	str	r3, [sp, #48]	; 0x30
   bab7a:	9b06      	ldr	r3, [sp, #24]
   bab7c:	2500      	movs	r5, #0
   bab7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bab82:	9312      	str	r3, [sp, #72]	; 0x48
   bab84:	462e      	mov	r6, r5
   bab86:	9b07      	ldr	r3, [sp, #28]
   bab88:	4620      	mov	r0, r4
   bab8a:	6859      	ldr	r1, [r3, #4]
   bab8c:	f000 ff9e 	bl	bbacc <_Balloc>
   bab90:	9005      	str	r0, [sp, #20]
   bab92:	2800      	cmp	r0, #0
   bab94:	f43f af0c 	beq.w	ba9b0 <_strtod_l+0x490>
   bab98:	9b07      	ldr	r3, [sp, #28]
   bab9a:	691a      	ldr	r2, [r3, #16]
   bab9c:	3202      	adds	r2, #2
   bab9e:	f103 010c 	add.w	r1, r3, #12
   baba2:	0092      	lsls	r2, r2, #2
   baba4:	300c      	adds	r0, #12
   baba6:	f7ff fbf9 	bl	ba39c <memcpy>
   babaa:	ec4b ab10 	vmov	d0, sl, fp
   babae:	aa1a      	add	r2, sp, #104	; 0x68
   babb0:	a919      	add	r1, sp, #100	; 0x64
   babb2:	4620      	mov	r0, r4
   babb4:	f001 fb78 	bl	bc2a8 <__d2b>
   babb8:	ec4b ab18 	vmov	d8, sl, fp
   babbc:	9018      	str	r0, [sp, #96]	; 0x60
   babbe:	2800      	cmp	r0, #0
   babc0:	f43f aef6 	beq.w	ba9b0 <_strtod_l+0x490>
   babc4:	2101      	movs	r1, #1
   babc6:	4620      	mov	r0, r4
   babc8:	f001 f8c2 	bl	bbd50 <__i2b>
   babcc:	4606      	mov	r6, r0
   babce:	2800      	cmp	r0, #0
   babd0:	f43f aeee 	beq.w	ba9b0 <_strtod_l+0x490>
   babd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   babd6:	9904      	ldr	r1, [sp, #16]
   babd8:	2b00      	cmp	r3, #0
   babda:	bfab      	itete	ge
   babdc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   babde:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   babe0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   babe2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   babe6:	bfac      	ite	ge
   babe8:	eb03 0902 	addge.w	r9, r3, r2
   babec:	1ad7      	sublt	r7, r2, r3
   babee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   babf0:	eba3 0801 	sub.w	r8, r3, r1
   babf4:	4490      	add	r8, r2
   babf6:	4ba1      	ldr	r3, [pc, #644]	; (bae7c <_strtod_l+0x95c>)
   babf8:	f108 38ff 	add.w	r8, r8, #4294967295
   babfc:	4598      	cmp	r8, r3
   babfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bac02:	f280 80c7 	bge.w	bad94 <_strtod_l+0x874>
   bac06:	eba3 0308 	sub.w	r3, r3, r8
   bac0a:	2b1f      	cmp	r3, #31
   bac0c:	eba2 0203 	sub.w	r2, r2, r3
   bac10:	f04f 0101 	mov.w	r1, #1
   bac14:	f300 80b1 	bgt.w	bad7a <_strtod_l+0x85a>
   bac18:	fa01 f303 	lsl.w	r3, r1, r3
   bac1c:	930d      	str	r3, [sp, #52]	; 0x34
   bac1e:	2300      	movs	r3, #0
   bac20:	9308      	str	r3, [sp, #32]
   bac22:	eb09 0802 	add.w	r8, r9, r2
   bac26:	9b04      	ldr	r3, [sp, #16]
   bac28:	45c1      	cmp	r9, r8
   bac2a:	4417      	add	r7, r2
   bac2c:	441f      	add	r7, r3
   bac2e:	464b      	mov	r3, r9
   bac30:	bfa8      	it	ge
   bac32:	4643      	movge	r3, r8
   bac34:	42bb      	cmp	r3, r7
   bac36:	bfa8      	it	ge
   bac38:	463b      	movge	r3, r7
   bac3a:	2b00      	cmp	r3, #0
   bac3c:	bfc2      	ittt	gt
   bac3e:	eba8 0803 	subgt.w	r8, r8, r3
   bac42:	1aff      	subgt	r7, r7, r3
   bac44:	eba9 0903 	subgt.w	r9, r9, r3
   bac48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bac4a:	2b00      	cmp	r3, #0
   bac4c:	dd17      	ble.n	bac7e <_strtod_l+0x75e>
   bac4e:	4631      	mov	r1, r6
   bac50:	461a      	mov	r2, r3
   bac52:	4620      	mov	r0, r4
   bac54:	f001 f93c 	bl	bbed0 <__pow5mult>
   bac58:	4606      	mov	r6, r0
   bac5a:	2800      	cmp	r0, #0
   bac5c:	f43f aea8 	beq.w	ba9b0 <_strtod_l+0x490>
   bac60:	4601      	mov	r1, r0
   bac62:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bac64:	4620      	mov	r0, r4
   bac66:	f001 f889 	bl	bbd7c <__multiply>
   bac6a:	900b      	str	r0, [sp, #44]	; 0x2c
   bac6c:	2800      	cmp	r0, #0
   bac6e:	f43f ae9f 	beq.w	ba9b0 <_strtod_l+0x490>
   bac72:	9918      	ldr	r1, [sp, #96]	; 0x60
   bac74:	4620      	mov	r0, r4
   bac76:	f000 ff69 	bl	bbb4c <_Bfree>
   bac7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bac7c:	9318      	str	r3, [sp, #96]	; 0x60
   bac7e:	f1b8 0f00 	cmp.w	r8, #0
   bac82:	f300 808c 	bgt.w	bad9e <_strtod_l+0x87e>
   bac86:	9b06      	ldr	r3, [sp, #24]
   bac88:	2b00      	cmp	r3, #0
   bac8a:	dd08      	ble.n	bac9e <_strtod_l+0x77e>
   bac8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bac8e:	9905      	ldr	r1, [sp, #20]
   bac90:	4620      	mov	r0, r4
   bac92:	f001 f91d 	bl	bbed0 <__pow5mult>
   bac96:	9005      	str	r0, [sp, #20]
   bac98:	2800      	cmp	r0, #0
   bac9a:	f43f ae89 	beq.w	ba9b0 <_strtod_l+0x490>
   bac9e:	2f00      	cmp	r7, #0
   baca0:	dd08      	ble.n	bacb4 <_strtod_l+0x794>
   baca2:	9905      	ldr	r1, [sp, #20]
   baca4:	463a      	mov	r2, r7
   baca6:	4620      	mov	r0, r4
   baca8:	f001 f96c 	bl	bbf84 <__lshift>
   bacac:	9005      	str	r0, [sp, #20]
   bacae:	2800      	cmp	r0, #0
   bacb0:	f43f ae7e 	beq.w	ba9b0 <_strtod_l+0x490>
   bacb4:	f1b9 0f00 	cmp.w	r9, #0
   bacb8:	dd08      	ble.n	baccc <_strtod_l+0x7ac>
   bacba:	4631      	mov	r1, r6
   bacbc:	464a      	mov	r2, r9
   bacbe:	4620      	mov	r0, r4
   bacc0:	f001 f960 	bl	bbf84 <__lshift>
   bacc4:	4606      	mov	r6, r0
   bacc6:	2800      	cmp	r0, #0
   bacc8:	f43f ae72 	beq.w	ba9b0 <_strtod_l+0x490>
   baccc:	9a05      	ldr	r2, [sp, #20]
   bacce:	9918      	ldr	r1, [sp, #96]	; 0x60
   bacd0:	4620      	mov	r0, r4
   bacd2:	f001 f9e3 	bl	bc09c <__mdiff>
   bacd6:	4605      	mov	r5, r0
   bacd8:	2800      	cmp	r0, #0
   bacda:	f43f ae69 	beq.w	ba9b0 <_strtod_l+0x490>
   bacde:	68c3      	ldr	r3, [r0, #12]
   bace0:	930b      	str	r3, [sp, #44]	; 0x2c
   bace2:	2300      	movs	r3, #0
   bace4:	60c3      	str	r3, [r0, #12]
   bace6:	4631      	mov	r1, r6
   bace8:	f001 f9bc 	bl	bc064 <__mcmp>
   bacec:	2800      	cmp	r0, #0
   bacee:	da60      	bge.n	badb2 <_strtod_l+0x892>
   bacf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bacf2:	ea53 030a 	orrs.w	r3, r3, sl
   bacf6:	f040 8082 	bne.w	badfe <_strtod_l+0x8de>
   bacfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bacfe:	2b00      	cmp	r3, #0
   bad00:	d17d      	bne.n	badfe <_strtod_l+0x8de>
   bad02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bad06:	0d1b      	lsrs	r3, r3, #20
   bad08:	051b      	lsls	r3, r3, #20
   bad0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bad0e:	d976      	bls.n	badfe <_strtod_l+0x8de>
   bad10:	696b      	ldr	r3, [r5, #20]
   bad12:	b913      	cbnz	r3, bad1a <_strtod_l+0x7fa>
   bad14:	692b      	ldr	r3, [r5, #16]
   bad16:	2b01      	cmp	r3, #1
   bad18:	dd71      	ble.n	badfe <_strtod_l+0x8de>
   bad1a:	4629      	mov	r1, r5
   bad1c:	2201      	movs	r2, #1
   bad1e:	4620      	mov	r0, r4
   bad20:	f001 f930 	bl	bbf84 <__lshift>
   bad24:	4631      	mov	r1, r6
   bad26:	4605      	mov	r5, r0
   bad28:	f001 f99c 	bl	bc064 <__mcmp>
   bad2c:	2800      	cmp	r0, #0
   bad2e:	dd66      	ble.n	badfe <_strtod_l+0x8de>
   bad30:	9904      	ldr	r1, [sp, #16]
   bad32:	4a53      	ldr	r2, [pc, #332]	; (bae80 <_strtod_l+0x960>)
   bad34:	465b      	mov	r3, fp
   bad36:	2900      	cmp	r1, #0
   bad38:	f000 8081 	beq.w	bae3e <_strtod_l+0x91e>
   bad3c:	ea02 010b 	and.w	r1, r2, fp
   bad40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bad44:	dc7b      	bgt.n	bae3e <_strtod_l+0x91e>
   bad46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bad4a:	f77f aea9 	ble.w	baaa0 <_strtod_l+0x580>
   bad4e:	4b4d      	ldr	r3, [pc, #308]	; (bae84 <_strtod_l+0x964>)
   bad50:	4650      	mov	r0, sl
   bad52:	4659      	mov	r1, fp
   bad54:	2200      	movs	r2, #0
   bad56:	f7f9 fb1f 	bl	b4398 <__aeabi_dmul>
   bad5a:	460b      	mov	r3, r1
   bad5c:	4303      	orrs	r3, r0
   bad5e:	bf08      	it	eq
   bad60:	2322      	moveq	r3, #34	; 0x22
   bad62:	4682      	mov	sl, r0
   bad64:	468b      	mov	fp, r1
   bad66:	bf08      	it	eq
   bad68:	6023      	streq	r3, [r4, #0]
   bad6a:	e62b      	b.n	ba9c4 <_strtod_l+0x4a4>
   bad6c:	f04f 32ff 	mov.w	r2, #4294967295
   bad70:	fa02 f303 	lsl.w	r3, r2, r3
   bad74:	ea03 0a0a 	and.w	sl, r3, sl
   bad78:	e6e3      	b.n	bab42 <_strtod_l+0x622>
   bad7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bad7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bad82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bad86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bad8a:	fa01 f308 	lsl.w	r3, r1, r8
   bad8e:	9308      	str	r3, [sp, #32]
   bad90:	910d      	str	r1, [sp, #52]	; 0x34
   bad92:	e746      	b.n	bac22 <_strtod_l+0x702>
   bad94:	2300      	movs	r3, #0
   bad96:	9308      	str	r3, [sp, #32]
   bad98:	2301      	movs	r3, #1
   bad9a:	930d      	str	r3, [sp, #52]	; 0x34
   bad9c:	e741      	b.n	bac22 <_strtod_l+0x702>
   bad9e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bada0:	4642      	mov	r2, r8
   bada2:	4620      	mov	r0, r4
   bada4:	f001 f8ee 	bl	bbf84 <__lshift>
   bada8:	9018      	str	r0, [sp, #96]	; 0x60
   badaa:	2800      	cmp	r0, #0
   badac:	f47f af6b 	bne.w	bac86 <_strtod_l+0x766>
   badb0:	e5fe      	b.n	ba9b0 <_strtod_l+0x490>
   badb2:	465f      	mov	r7, fp
   badb4:	d16e      	bne.n	bae94 <_strtod_l+0x974>
   badb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   badb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   badbc:	b342      	cbz	r2, bae10 <_strtod_l+0x8f0>
   badbe:	4a32      	ldr	r2, [pc, #200]	; (bae88 <_strtod_l+0x968>)
   badc0:	4293      	cmp	r3, r2
   badc2:	d128      	bne.n	bae16 <_strtod_l+0x8f6>
   badc4:	9b04      	ldr	r3, [sp, #16]
   badc6:	4651      	mov	r1, sl
   badc8:	b1eb      	cbz	r3, bae06 <_strtod_l+0x8e6>
   badca:	4b2d      	ldr	r3, [pc, #180]	; (bae80 <_strtod_l+0x960>)
   badcc:	403b      	ands	r3, r7
   badce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   badd2:	f04f 32ff 	mov.w	r2, #4294967295
   badd6:	d819      	bhi.n	bae0c <_strtod_l+0x8ec>
   badd8:	0d1b      	lsrs	r3, r3, #20
   badda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   badde:	fa02 f303 	lsl.w	r3, r2, r3
   bade2:	4299      	cmp	r1, r3
   bade4:	d117      	bne.n	bae16 <_strtod_l+0x8f6>
   bade6:	4b29      	ldr	r3, [pc, #164]	; (bae8c <_strtod_l+0x96c>)
   bade8:	429f      	cmp	r7, r3
   badea:	d102      	bne.n	badf2 <_strtod_l+0x8d2>
   badec:	3101      	adds	r1, #1
   badee:	f43f addf 	beq.w	ba9b0 <_strtod_l+0x490>
   badf2:	4b23      	ldr	r3, [pc, #140]	; (bae80 <_strtod_l+0x960>)
   badf4:	403b      	ands	r3, r7
   badf6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   badfa:	f04f 0a00 	mov.w	sl, #0
   badfe:	9b04      	ldr	r3, [sp, #16]
   bae00:	2b00      	cmp	r3, #0
   bae02:	d1a4      	bne.n	bad4e <_strtod_l+0x82e>
   bae04:	e5de      	b.n	ba9c4 <_strtod_l+0x4a4>
   bae06:	f04f 33ff 	mov.w	r3, #4294967295
   bae0a:	e7ea      	b.n	bade2 <_strtod_l+0x8c2>
   bae0c:	4613      	mov	r3, r2
   bae0e:	e7e8      	b.n	bade2 <_strtod_l+0x8c2>
   bae10:	ea53 030a 	orrs.w	r3, r3, sl
   bae14:	d08c      	beq.n	bad30 <_strtod_l+0x810>
   bae16:	9b08      	ldr	r3, [sp, #32]
   bae18:	b1db      	cbz	r3, bae52 <_strtod_l+0x932>
   bae1a:	423b      	tst	r3, r7
   bae1c:	d0ef      	beq.n	badfe <_strtod_l+0x8de>
   bae1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bae20:	9a04      	ldr	r2, [sp, #16]
   bae22:	4650      	mov	r0, sl
   bae24:	4659      	mov	r1, fp
   bae26:	b1c3      	cbz	r3, bae5a <_strtod_l+0x93a>
   bae28:	f7ff fb5b 	bl	ba4e2 <sulp>
   bae2c:	4602      	mov	r2, r0
   bae2e:	460b      	mov	r3, r1
   bae30:	ec51 0b18 	vmov	r0, r1, d8
   bae34:	f7f9 f8fa 	bl	b402c <__adddf3>
   bae38:	4682      	mov	sl, r0
   bae3a:	468b      	mov	fp, r1
   bae3c:	e7df      	b.n	badfe <_strtod_l+0x8de>
   bae3e:	4013      	ands	r3, r2
   bae40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bae44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bae48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bae4c:	f04f 3aff 	mov.w	sl, #4294967295
   bae50:	e7d5      	b.n	badfe <_strtod_l+0x8de>
   bae52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bae54:	ea13 0f0a 	tst.w	r3, sl
   bae58:	e7e0      	b.n	bae1c <_strtod_l+0x8fc>
   bae5a:	f7ff fb42 	bl	ba4e2 <sulp>
   bae5e:	4602      	mov	r2, r0
   bae60:	460b      	mov	r3, r1
   bae62:	ec51 0b18 	vmov	r0, r1, d8
   bae66:	f7f9 f8df 	bl	b4028 <__aeabi_dsub>
   bae6a:	2200      	movs	r2, #0
   bae6c:	2300      	movs	r3, #0
   bae6e:	4682      	mov	sl, r0
   bae70:	468b      	mov	fp, r1
   bae72:	f7f9 fcf9 	bl	b4868 <__aeabi_dcmpeq>
   bae76:	2800      	cmp	r0, #0
   bae78:	d0c1      	beq.n	badfe <_strtod_l+0x8de>
   bae7a:	e611      	b.n	baaa0 <_strtod_l+0x580>
   bae7c:	fffffc02 	.word	0xfffffc02
   bae80:	7ff00000 	.word	0x7ff00000
   bae84:	39500000 	.word	0x39500000
   bae88:	000fffff 	.word	0x000fffff
   bae8c:	7fefffff 	.word	0x7fefffff
   bae90:	000bcec8 	.word	0x000bcec8
   bae94:	4631      	mov	r1, r6
   bae96:	4628      	mov	r0, r5
   bae98:	f001 fa62 	bl	bc360 <__ratio>
   bae9c:	ec59 8b10 	vmov	r8, r9, d0
   baea0:	ee10 0a10 	vmov	r0, s0
   baea4:	2200      	movs	r2, #0
   baea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   baeaa:	4649      	mov	r1, r9
   baeac:	f7f9 fcf0 	bl	b4890 <__aeabi_dcmple>
   baeb0:	2800      	cmp	r0, #0
   baeb2:	d07a      	beq.n	bafaa <_strtod_l+0xa8a>
   baeb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baeb6:	2b00      	cmp	r3, #0
   baeb8:	d04a      	beq.n	baf50 <_strtod_l+0xa30>
   baeba:	4b95      	ldr	r3, [pc, #596]	; (bb110 <_strtod_l+0xbf0>)
   baebc:	2200      	movs	r2, #0
   baebe:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baec2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb110 <_strtod_l+0xbf0>
   baec6:	f04f 0800 	mov.w	r8, #0
   baeca:	4b92      	ldr	r3, [pc, #584]	; (bb114 <_strtod_l+0xbf4>)
   baecc:	403b      	ands	r3, r7
   baece:	930d      	str	r3, [sp, #52]	; 0x34
   baed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   baed2:	4b91      	ldr	r3, [pc, #580]	; (bb118 <_strtod_l+0xbf8>)
   baed4:	429a      	cmp	r2, r3
   baed6:	f040 80b0 	bne.w	bb03a <_strtod_l+0xb1a>
   baeda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baede:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   baee2:	ec4b ab10 	vmov	d0, sl, fp
   baee6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   baeea:	f001 f961 	bl	bc1b0 <__ulp>
   baeee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baef2:	ec53 2b10 	vmov	r2, r3, d0
   baef6:	f7f9 fa4f 	bl	b4398 <__aeabi_dmul>
   baefa:	4652      	mov	r2, sl
   baefc:	465b      	mov	r3, fp
   baefe:	f7f9 f895 	bl	b402c <__adddf3>
   baf02:	460b      	mov	r3, r1
   baf04:	4983      	ldr	r1, [pc, #524]	; (bb114 <_strtod_l+0xbf4>)
   baf06:	4a85      	ldr	r2, [pc, #532]	; (bb11c <_strtod_l+0xbfc>)
   baf08:	4019      	ands	r1, r3
   baf0a:	4291      	cmp	r1, r2
   baf0c:	4682      	mov	sl, r0
   baf0e:	d960      	bls.n	bafd2 <_strtod_l+0xab2>
   baf10:	ee18 3a90 	vmov	r3, s17
   baf14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   baf18:	4293      	cmp	r3, r2
   baf1a:	d104      	bne.n	baf26 <_strtod_l+0xa06>
   baf1c:	ee18 3a10 	vmov	r3, s16
   baf20:	3301      	adds	r3, #1
   baf22:	f43f ad45 	beq.w	ba9b0 <_strtod_l+0x490>
   baf26:	f8df b200 	ldr.w	fp, [pc, #512]	; bb128 <_strtod_l+0xc08>
   baf2a:	f04f 3aff 	mov.w	sl, #4294967295
   baf2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   baf30:	4620      	mov	r0, r4
   baf32:	f000 fe0b 	bl	bbb4c <_Bfree>
   baf36:	9905      	ldr	r1, [sp, #20]
   baf38:	4620      	mov	r0, r4
   baf3a:	f000 fe07 	bl	bbb4c <_Bfree>
   baf3e:	4631      	mov	r1, r6
   baf40:	4620      	mov	r0, r4
   baf42:	f000 fe03 	bl	bbb4c <_Bfree>
   baf46:	4629      	mov	r1, r5
   baf48:	4620      	mov	r0, r4
   baf4a:	f000 fdff 	bl	bbb4c <_Bfree>
   baf4e:	e61a      	b.n	bab86 <_strtod_l+0x666>
   baf50:	f1ba 0f00 	cmp.w	sl, #0
   baf54:	d11b      	bne.n	baf8e <_strtod_l+0xa6e>
   baf56:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baf5a:	b9f3      	cbnz	r3, baf9a <_strtod_l+0xa7a>
   baf5c:	4b6c      	ldr	r3, [pc, #432]	; (bb110 <_strtod_l+0xbf0>)
   baf5e:	2200      	movs	r2, #0
   baf60:	4640      	mov	r0, r8
   baf62:	4649      	mov	r1, r9
   baf64:	f7f9 fc8a 	bl	b487c <__aeabi_dcmplt>
   baf68:	b9d0      	cbnz	r0, bafa0 <_strtod_l+0xa80>
   baf6a:	4640      	mov	r0, r8
   baf6c:	4649      	mov	r1, r9
   baf6e:	4b6c      	ldr	r3, [pc, #432]	; (bb120 <_strtod_l+0xc00>)
   baf70:	2200      	movs	r2, #0
   baf72:	f7f9 fa11 	bl	b4398 <__aeabi_dmul>
   baf76:	4680      	mov	r8, r0
   baf78:	4689      	mov	r9, r1
   baf7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   baf7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   baf82:	9315      	str	r3, [sp, #84]	; 0x54
   baf84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   baf88:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baf8c:	e79d      	b.n	baeca <_strtod_l+0x9aa>
   baf8e:	f1ba 0f01 	cmp.w	sl, #1
   baf92:	d102      	bne.n	baf9a <_strtod_l+0xa7a>
   baf94:	2f00      	cmp	r7, #0
   baf96:	f43f ad83 	beq.w	baaa0 <_strtod_l+0x580>
   baf9a:	4b62      	ldr	r3, [pc, #392]	; (bb124 <_strtod_l+0xc04>)
   baf9c:	2200      	movs	r2, #0
   baf9e:	e78e      	b.n	baebe <_strtod_l+0x99e>
   bafa0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb120 <_strtod_l+0xc00>
   bafa4:	f04f 0800 	mov.w	r8, #0
   bafa8:	e7e7      	b.n	baf7a <_strtod_l+0xa5a>
   bafaa:	4b5d      	ldr	r3, [pc, #372]	; (bb120 <_strtod_l+0xc00>)
   bafac:	4640      	mov	r0, r8
   bafae:	4649      	mov	r1, r9
   bafb0:	2200      	movs	r2, #0
   bafb2:	f7f9 f9f1 	bl	b4398 <__aeabi_dmul>
   bafb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bafb8:	4680      	mov	r8, r0
   bafba:	4689      	mov	r9, r1
   bafbc:	b933      	cbnz	r3, bafcc <_strtod_l+0xaac>
   bafbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bafc2:	900e      	str	r0, [sp, #56]	; 0x38
   bafc4:	930f      	str	r3, [sp, #60]	; 0x3c
   bafc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bafca:	e7dd      	b.n	baf88 <_strtod_l+0xa68>
   bafcc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bafd0:	e7f9      	b.n	bafc6 <_strtod_l+0xaa6>
   bafd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bafd6:	9b04      	ldr	r3, [sp, #16]
   bafd8:	2b00      	cmp	r3, #0
   bafda:	d1a8      	bne.n	baf2e <_strtod_l+0xa0e>
   bafdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bafe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bafe2:	0d1b      	lsrs	r3, r3, #20
   bafe4:	051b      	lsls	r3, r3, #20
   bafe6:	429a      	cmp	r2, r3
   bafe8:	d1a1      	bne.n	baf2e <_strtod_l+0xa0e>
   bafea:	4640      	mov	r0, r8
   bafec:	4649      	mov	r1, r9
   bafee:	f7f9 fd79 	bl	b4ae4 <__aeabi_d2lz>
   baff2:	f7f9 f9a3 	bl	b433c <__aeabi_l2d>
   baff6:	4602      	mov	r2, r0
   baff8:	460b      	mov	r3, r1
   baffa:	4640      	mov	r0, r8
   baffc:	4649      	mov	r1, r9
   baffe:	f7f9 f813 	bl	b4028 <__aeabi_dsub>
   bb002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb004:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb008:	ea43 030a 	orr.w	r3, r3, sl
   bb00c:	4313      	orrs	r3, r2
   bb00e:	4680      	mov	r8, r0
   bb010:	4689      	mov	r9, r1
   bb012:	d055      	beq.n	bb0c0 <_strtod_l+0xba0>
   bb014:	a336      	add	r3, pc, #216	; (adr r3, bb0f0 <_strtod_l+0xbd0>)
   bb016:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb01a:	f7f9 fc2f 	bl	b487c <__aeabi_dcmplt>
   bb01e:	2800      	cmp	r0, #0
   bb020:	f47f acd0 	bne.w	ba9c4 <_strtod_l+0x4a4>
   bb024:	a334      	add	r3, pc, #208	; (adr r3, bb0f8 <_strtod_l+0xbd8>)
   bb026:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb02a:	4640      	mov	r0, r8
   bb02c:	4649      	mov	r1, r9
   bb02e:	f7f9 fc43 	bl	b48b8 <__aeabi_dcmpgt>
   bb032:	2800      	cmp	r0, #0
   bb034:	f43f af7b 	beq.w	baf2e <_strtod_l+0xa0e>
   bb038:	e4c4      	b.n	ba9c4 <_strtod_l+0x4a4>
   bb03a:	9b04      	ldr	r3, [sp, #16]
   bb03c:	b333      	cbz	r3, bb08c <_strtod_l+0xb6c>
   bb03e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb040:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb044:	d822      	bhi.n	bb08c <_strtod_l+0xb6c>
   bb046:	a32e      	add	r3, pc, #184	; (adr r3, bb100 <_strtod_l+0xbe0>)
   bb048:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb04c:	4640      	mov	r0, r8
   bb04e:	4649      	mov	r1, r9
   bb050:	f7f9 fc1e 	bl	b4890 <__aeabi_dcmple>
   bb054:	b1a0      	cbz	r0, bb080 <_strtod_l+0xb60>
   bb056:	4649      	mov	r1, r9
   bb058:	4640      	mov	r0, r8
   bb05a:	f7f9 fc4d 	bl	b48f8 <__aeabi_d2uiz>
   bb05e:	2801      	cmp	r0, #1
   bb060:	bf38      	it	cc
   bb062:	2001      	movcc	r0, #1
   bb064:	f7f9 f91e 	bl	b42a4 <__aeabi_ui2d>
   bb068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb06a:	4680      	mov	r8, r0
   bb06c:	4689      	mov	r9, r1
   bb06e:	bb23      	cbnz	r3, bb0ba <_strtod_l+0xb9a>
   bb070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb074:	9010      	str	r0, [sp, #64]	; 0x40
   bb076:	9311      	str	r3, [sp, #68]	; 0x44
   bb078:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb07c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb080:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb084:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb088:	1a9b      	subs	r3, r3, r2
   bb08a:	9309      	str	r3, [sp, #36]	; 0x24
   bb08c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb090:	eeb0 0a48 	vmov.f32	s0, s16
   bb094:	eef0 0a68 	vmov.f32	s1, s17
   bb098:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb09c:	f001 f888 	bl	bc1b0 <__ulp>
   bb0a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb0a4:	ec53 2b10 	vmov	r2, r3, d0
   bb0a8:	f7f9 f976 	bl	b4398 <__aeabi_dmul>
   bb0ac:	ec53 2b18 	vmov	r2, r3, d8
   bb0b0:	f7f8 ffbc 	bl	b402c <__adddf3>
   bb0b4:	4682      	mov	sl, r0
   bb0b6:	468b      	mov	fp, r1
   bb0b8:	e78d      	b.n	bafd6 <_strtod_l+0xab6>
   bb0ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb0be:	e7db      	b.n	bb078 <_strtod_l+0xb58>
   bb0c0:	a311      	add	r3, pc, #68	; (adr r3, bb108 <_strtod_l+0xbe8>)
   bb0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb0c6:	f7f9 fbd9 	bl	b487c <__aeabi_dcmplt>
   bb0ca:	e7b2      	b.n	bb032 <_strtod_l+0xb12>
   bb0cc:	2300      	movs	r3, #0
   bb0ce:	930a      	str	r3, [sp, #40]	; 0x28
   bb0d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb0d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb0d4:	6013      	str	r3, [r2, #0]
   bb0d6:	f7ff ba6b 	b.w	ba5b0 <_strtod_l+0x90>
   bb0da:	2a65      	cmp	r2, #101	; 0x65
   bb0dc:	f43f ab5f 	beq.w	ba79e <_strtod_l+0x27e>
   bb0e0:	2a45      	cmp	r2, #69	; 0x45
   bb0e2:	f43f ab5c 	beq.w	ba79e <_strtod_l+0x27e>
   bb0e6:	2301      	movs	r3, #1
   bb0e8:	f7ff bb94 	b.w	ba814 <_strtod_l+0x2f4>
   bb0ec:	f3af 8000 	nop.w
   bb0f0:	94a03595 	.word	0x94a03595
   bb0f4:	3fdfffff 	.word	0x3fdfffff
   bb0f8:	35afe535 	.word	0x35afe535
   bb0fc:	3fe00000 	.word	0x3fe00000
   bb100:	ffc00000 	.word	0xffc00000
   bb104:	41dfffff 	.word	0x41dfffff
   bb108:	94a03595 	.word	0x94a03595
   bb10c:	3fcfffff 	.word	0x3fcfffff
   bb110:	3ff00000 	.word	0x3ff00000
   bb114:	7ff00000 	.word	0x7ff00000
   bb118:	7fe00000 	.word	0x7fe00000
   bb11c:	7c9fffff 	.word	0x7c9fffff
   bb120:	3fe00000 	.word	0x3fe00000
   bb124:	bff00000 	.word	0xbff00000
   bb128:	7fefffff 	.word	0x7fefffff

000bb12c <strtof>:
   bb12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb130:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bb1e0 <strtof+0xb4>
   bb134:	4b26      	ldr	r3, [pc, #152]	; (bb1d0 <strtof+0xa4>)
   bb136:	460a      	mov	r2, r1
   bb138:	ed2d 8b02 	vpush	{d8}
   bb13c:	4601      	mov	r1, r0
   bb13e:	f8d8 0000 	ldr.w	r0, [r8]
   bb142:	f7ff f9ed 	bl	ba520 <_strtod_l>
   bb146:	ec55 4b10 	vmov	r4, r5, d0
   bb14a:	ee10 2a10 	vmov	r2, s0
   bb14e:	ee10 0a10 	vmov	r0, s0
   bb152:	462b      	mov	r3, r5
   bb154:	4629      	mov	r1, r5
   bb156:	f7f9 fbb9 	bl	b48cc <__aeabi_dcmpun>
   bb15a:	b190      	cbz	r0, bb182 <strtof+0x56>
   bb15c:	2d00      	cmp	r5, #0
   bb15e:	481d      	ldr	r0, [pc, #116]	; (bb1d4 <strtof+0xa8>)
   bb160:	da09      	bge.n	bb176 <strtof+0x4a>
   bb162:	f001 f98d 	bl	bc480 <nanf>
   bb166:	eeb1 8a40 	vneg.f32	s16, s0
   bb16a:	eeb0 0a48 	vmov.f32	s0, s16
   bb16e:	ecbd 8b02 	vpop	{d8}
   bb172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb176:	ecbd 8b02 	vpop	{d8}
   bb17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb17e:	f001 b97f 	b.w	bc480 <nanf>
   bb182:	4620      	mov	r0, r4
   bb184:	4629      	mov	r1, r5
   bb186:	f7f9 fbd7 	bl	b4938 <__aeabi_d2f>
   bb18a:	ee08 0a10 	vmov	s16, r0
   bb18e:	eddf 7a12 	vldr	s15, [pc, #72]	; bb1d8 <strtof+0xac>
   bb192:	eeb0 7ac8 	vabs.f32	s14, s16
   bb196:	eeb4 7a67 	vcmp.f32	s14, s15
   bb19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb19e:	dde4      	ble.n	bb16a <strtof+0x3e>
   bb1a0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bb1a4:	4b0d      	ldr	r3, [pc, #52]	; (bb1dc <strtof+0xb0>)
   bb1a6:	f04f 32ff 	mov.w	r2, #4294967295
   bb1aa:	4620      	mov	r0, r4
   bb1ac:	4639      	mov	r1, r7
   bb1ae:	f7f9 fb8d 	bl	b48cc <__aeabi_dcmpun>
   bb1b2:	b940      	cbnz	r0, bb1c6 <strtof+0x9a>
   bb1b4:	4b09      	ldr	r3, [pc, #36]	; (bb1dc <strtof+0xb0>)
   bb1b6:	f04f 32ff 	mov.w	r2, #4294967295
   bb1ba:	4620      	mov	r0, r4
   bb1bc:	4639      	mov	r1, r7
   bb1be:	f7f9 fb67 	bl	b4890 <__aeabi_dcmple>
   bb1c2:	2800      	cmp	r0, #0
   bb1c4:	d0d1      	beq.n	bb16a <strtof+0x3e>
   bb1c6:	f8d8 3000 	ldr.w	r3, [r8]
   bb1ca:	2222      	movs	r2, #34	; 0x22
   bb1cc:	601a      	str	r2, [r3, #0]
   bb1ce:	e7cc      	b.n	bb16a <strtof+0x3e>
   bb1d0:	2003e318 	.word	0x2003e318
   bb1d4:	000bc56d 	.word	0x000bc56d
   bb1d8:	7f7fffff 	.word	0x7f7fffff
   bb1dc:	7fefffff 	.word	0x7fefffff
   bb1e0:	2003e2ac 	.word	0x2003e2ac

000bb1e4 <_strtol_l.constprop.0>:
   bb1e4:	2b01      	cmp	r3, #1
   bb1e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb1ea:	d001      	beq.n	bb1f0 <_strtol_l.constprop.0+0xc>
   bb1ec:	2b24      	cmp	r3, #36	; 0x24
   bb1ee:	d906      	bls.n	bb1fe <_strtol_l.constprop.0+0x1a>
   bb1f0:	f7fb fd30 	bl	b6c54 <__errno>
   bb1f4:	2316      	movs	r3, #22
   bb1f6:	6003      	str	r3, [r0, #0]
   bb1f8:	2000      	movs	r0, #0
   bb1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb1fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb2e4 <_strtol_l.constprop.0+0x100>
   bb202:	460d      	mov	r5, r1
   bb204:	462e      	mov	r6, r5
   bb206:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb20a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb20e:	f017 0708 	ands.w	r7, r7, #8
   bb212:	d1f7      	bne.n	bb204 <_strtol_l.constprop.0+0x20>
   bb214:	2c2d      	cmp	r4, #45	; 0x2d
   bb216:	d132      	bne.n	bb27e <_strtol_l.constprop.0+0x9a>
   bb218:	782c      	ldrb	r4, [r5, #0]
   bb21a:	2701      	movs	r7, #1
   bb21c:	1cb5      	adds	r5, r6, #2
   bb21e:	2b00      	cmp	r3, #0
   bb220:	d05b      	beq.n	bb2da <_strtol_l.constprop.0+0xf6>
   bb222:	2b10      	cmp	r3, #16
   bb224:	d109      	bne.n	bb23a <_strtol_l.constprop.0+0x56>
   bb226:	2c30      	cmp	r4, #48	; 0x30
   bb228:	d107      	bne.n	bb23a <_strtol_l.constprop.0+0x56>
   bb22a:	782c      	ldrb	r4, [r5, #0]
   bb22c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb230:	2c58      	cmp	r4, #88	; 0x58
   bb232:	d14d      	bne.n	bb2d0 <_strtol_l.constprop.0+0xec>
   bb234:	786c      	ldrb	r4, [r5, #1]
   bb236:	2310      	movs	r3, #16
   bb238:	3502      	adds	r5, #2
   bb23a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb23e:	f108 38ff 	add.w	r8, r8, #4294967295
   bb242:	f04f 0c00 	mov.w	ip, #0
   bb246:	fbb8 f9f3 	udiv	r9, r8, r3
   bb24a:	4666      	mov	r6, ip
   bb24c:	fb03 8a19 	mls	sl, r3, r9, r8
   bb250:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb254:	f1be 0f09 	cmp.w	lr, #9
   bb258:	d816      	bhi.n	bb288 <_strtol_l.constprop.0+0xa4>
   bb25a:	4674      	mov	r4, lr
   bb25c:	42a3      	cmp	r3, r4
   bb25e:	dd24      	ble.n	bb2aa <_strtol_l.constprop.0+0xc6>
   bb260:	f1bc 0f00 	cmp.w	ip, #0
   bb264:	db1e      	blt.n	bb2a4 <_strtol_l.constprop.0+0xc0>
   bb266:	45b1      	cmp	r9, r6
   bb268:	d31c      	bcc.n	bb2a4 <_strtol_l.constprop.0+0xc0>
   bb26a:	d101      	bne.n	bb270 <_strtol_l.constprop.0+0x8c>
   bb26c:	45a2      	cmp	sl, r4
   bb26e:	db19      	blt.n	bb2a4 <_strtol_l.constprop.0+0xc0>
   bb270:	fb06 4603 	mla	r6, r6, r3, r4
   bb274:	f04f 0c01 	mov.w	ip, #1
   bb278:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb27c:	e7e8      	b.n	bb250 <_strtol_l.constprop.0+0x6c>
   bb27e:	2c2b      	cmp	r4, #43	; 0x2b
   bb280:	bf04      	itt	eq
   bb282:	782c      	ldrbeq	r4, [r5, #0]
   bb284:	1cb5      	addeq	r5, r6, #2
   bb286:	e7ca      	b.n	bb21e <_strtol_l.constprop.0+0x3a>
   bb288:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb28c:	f1be 0f19 	cmp.w	lr, #25
   bb290:	d801      	bhi.n	bb296 <_strtol_l.constprop.0+0xb2>
   bb292:	3c37      	subs	r4, #55	; 0x37
   bb294:	e7e2      	b.n	bb25c <_strtol_l.constprop.0+0x78>
   bb296:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb29a:	f1be 0f19 	cmp.w	lr, #25
   bb29e:	d804      	bhi.n	bb2aa <_strtol_l.constprop.0+0xc6>
   bb2a0:	3c57      	subs	r4, #87	; 0x57
   bb2a2:	e7db      	b.n	bb25c <_strtol_l.constprop.0+0x78>
   bb2a4:	f04f 3cff 	mov.w	ip, #4294967295
   bb2a8:	e7e6      	b.n	bb278 <_strtol_l.constprop.0+0x94>
   bb2aa:	f1bc 0f00 	cmp.w	ip, #0
   bb2ae:	da05      	bge.n	bb2bc <_strtol_l.constprop.0+0xd8>
   bb2b0:	2322      	movs	r3, #34	; 0x22
   bb2b2:	6003      	str	r3, [r0, #0]
   bb2b4:	4646      	mov	r6, r8
   bb2b6:	b942      	cbnz	r2, bb2ca <_strtol_l.constprop.0+0xe6>
   bb2b8:	4630      	mov	r0, r6
   bb2ba:	e79e      	b.n	bb1fa <_strtol_l.constprop.0+0x16>
   bb2bc:	b107      	cbz	r7, bb2c0 <_strtol_l.constprop.0+0xdc>
   bb2be:	4276      	negs	r6, r6
   bb2c0:	2a00      	cmp	r2, #0
   bb2c2:	d0f9      	beq.n	bb2b8 <_strtol_l.constprop.0+0xd4>
   bb2c4:	f1bc 0f00 	cmp.w	ip, #0
   bb2c8:	d000      	beq.n	bb2cc <_strtol_l.constprop.0+0xe8>
   bb2ca:	1e69      	subs	r1, r5, #1
   bb2cc:	6011      	str	r1, [r2, #0]
   bb2ce:	e7f3      	b.n	bb2b8 <_strtol_l.constprop.0+0xd4>
   bb2d0:	2430      	movs	r4, #48	; 0x30
   bb2d2:	2b00      	cmp	r3, #0
   bb2d4:	d1b1      	bne.n	bb23a <_strtol_l.constprop.0+0x56>
   bb2d6:	2308      	movs	r3, #8
   bb2d8:	e7af      	b.n	bb23a <_strtol_l.constprop.0+0x56>
   bb2da:	2c30      	cmp	r4, #48	; 0x30
   bb2dc:	d0a5      	beq.n	bb22a <_strtol_l.constprop.0+0x46>
   bb2de:	230a      	movs	r3, #10
   bb2e0:	e7ab      	b.n	bb23a <_strtol_l.constprop.0+0x56>
   bb2e2:	bf00      	nop
   bb2e4:	000bcef1 	.word	0x000bcef1

000bb2e8 <strtol>:
   bb2e8:	4613      	mov	r3, r2
   bb2ea:	460a      	mov	r2, r1
   bb2ec:	4601      	mov	r1, r0
   bb2ee:	4802      	ldr	r0, [pc, #8]	; (bb2f8 <strtol+0x10>)
   bb2f0:	6800      	ldr	r0, [r0, #0]
   bb2f2:	f7ff bf77 	b.w	bb1e4 <_strtol_l.constprop.0>
   bb2f6:	bf00      	nop
   bb2f8:	2003e2ac 	.word	0x2003e2ac

000bb2fc <__register_exitproc>:
   bb2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb300:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb3bc <__register_exitproc+0xc0>
   bb304:	4606      	mov	r6, r0
   bb306:	f8d8 0000 	ldr.w	r0, [r8]
   bb30a:	461f      	mov	r7, r3
   bb30c:	460d      	mov	r5, r1
   bb30e:	4691      	mov	r9, r2
   bb310:	f000 fbc6 	bl	bbaa0 <__retarget_lock_acquire_recursive>
   bb314:	4b25      	ldr	r3, [pc, #148]	; (bb3ac <__register_exitproc+0xb0>)
   bb316:	681c      	ldr	r4, [r3, #0]
   bb318:	b934      	cbnz	r4, bb328 <__register_exitproc+0x2c>
   bb31a:	4c25      	ldr	r4, [pc, #148]	; (bb3b0 <__register_exitproc+0xb4>)
   bb31c:	601c      	str	r4, [r3, #0]
   bb31e:	4b25      	ldr	r3, [pc, #148]	; (bb3b4 <__register_exitproc+0xb8>)
   bb320:	b113      	cbz	r3, bb328 <__register_exitproc+0x2c>
   bb322:	681b      	ldr	r3, [r3, #0]
   bb324:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb328:	6863      	ldr	r3, [r4, #4]
   bb32a:	2b1f      	cmp	r3, #31
   bb32c:	dd07      	ble.n	bb33e <__register_exitproc+0x42>
   bb32e:	f8d8 0000 	ldr.w	r0, [r8]
   bb332:	f000 fbb7 	bl	bbaa4 <__retarget_lock_release_recursive>
   bb336:	f04f 30ff 	mov.w	r0, #4294967295
   bb33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb33e:	b34e      	cbz	r6, bb394 <__register_exitproc+0x98>
   bb340:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb344:	b988      	cbnz	r0, bb36a <__register_exitproc+0x6e>
   bb346:	4b1c      	ldr	r3, [pc, #112]	; (bb3b8 <__register_exitproc+0xbc>)
   bb348:	b923      	cbnz	r3, bb354 <__register_exitproc+0x58>
   bb34a:	f8d8 0000 	ldr.w	r0, [r8]
   bb34e:	f000 fba8 	bl	bbaa2 <__retarget_lock_release>
   bb352:	e7f0      	b.n	bb336 <__register_exitproc+0x3a>
   bb354:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb358:	f7fb fc44 	bl	b6be4 <malloc>
   bb35c:	2800      	cmp	r0, #0
   bb35e:	d0f4      	beq.n	bb34a <__register_exitproc+0x4e>
   bb360:	2300      	movs	r3, #0
   bb362:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb366:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb36a:	6863      	ldr	r3, [r4, #4]
   bb36c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb370:	2201      	movs	r2, #1
   bb372:	409a      	lsls	r2, r3
   bb374:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb378:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb37c:	4313      	orrs	r3, r2
   bb37e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb382:	2e02      	cmp	r6, #2
   bb384:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb388:	bf02      	ittt	eq
   bb38a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb38e:	4313      	orreq	r3, r2
   bb390:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb394:	6863      	ldr	r3, [r4, #4]
   bb396:	f8d8 0000 	ldr.w	r0, [r8]
   bb39a:	1c5a      	adds	r2, r3, #1
   bb39c:	3302      	adds	r3, #2
   bb39e:	6062      	str	r2, [r4, #4]
   bb3a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb3a4:	f000 fb7e 	bl	bbaa4 <__retarget_lock_release_recursive>
   bb3a8:	2000      	movs	r0, #0
   bb3aa:	e7c6      	b.n	bb33a <__register_exitproc+0x3e>
   bb3ac:	2003e7ec 	.word	0x2003e7ec
   bb3b0:	2003e760 	.word	0x2003e760
   bb3b4:	00000000 	.word	0x00000000
   bb3b8:	000b6be5 	.word	0x000b6be5
   bb3bc:	2003e310 	.word	0x2003e310

000bb3c0 <rshift>:
   bb3c0:	6903      	ldr	r3, [r0, #16]
   bb3c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb3c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb3ca:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb3ce:	f100 0414 	add.w	r4, r0, #20
   bb3d2:	dd45      	ble.n	bb460 <rshift+0xa0>
   bb3d4:	f011 011f 	ands.w	r1, r1, #31
   bb3d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb3dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb3e0:	d10c      	bne.n	bb3fc <rshift+0x3c>
   bb3e2:	f100 0710 	add.w	r7, r0, #16
   bb3e6:	4629      	mov	r1, r5
   bb3e8:	42b1      	cmp	r1, r6
   bb3ea:	d334      	bcc.n	bb456 <rshift+0x96>
   bb3ec:	1a9b      	subs	r3, r3, r2
   bb3ee:	009b      	lsls	r3, r3, #2
   bb3f0:	1eea      	subs	r2, r5, #3
   bb3f2:	4296      	cmp	r6, r2
   bb3f4:	bf38      	it	cc
   bb3f6:	2300      	movcc	r3, #0
   bb3f8:	4423      	add	r3, r4
   bb3fa:	e015      	b.n	bb428 <rshift+0x68>
   bb3fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb400:	f1c1 0820 	rsb	r8, r1, #32
   bb404:	40cf      	lsrs	r7, r1
   bb406:	f105 0e04 	add.w	lr, r5, #4
   bb40a:	46a1      	mov	r9, r4
   bb40c:	4576      	cmp	r6, lr
   bb40e:	46f4      	mov	ip, lr
   bb410:	d815      	bhi.n	bb43e <rshift+0x7e>
   bb412:	1a9a      	subs	r2, r3, r2
   bb414:	0092      	lsls	r2, r2, #2
   bb416:	3a04      	subs	r2, #4
   bb418:	3501      	adds	r5, #1
   bb41a:	42ae      	cmp	r6, r5
   bb41c:	bf38      	it	cc
   bb41e:	2200      	movcc	r2, #0
   bb420:	18a3      	adds	r3, r4, r2
   bb422:	50a7      	str	r7, [r4, r2]
   bb424:	b107      	cbz	r7, bb428 <rshift+0x68>
   bb426:	3304      	adds	r3, #4
   bb428:	1b1a      	subs	r2, r3, r4
   bb42a:	42a3      	cmp	r3, r4
   bb42c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb430:	bf08      	it	eq
   bb432:	2300      	moveq	r3, #0
   bb434:	6102      	str	r2, [r0, #16]
   bb436:	bf08      	it	eq
   bb438:	6143      	streq	r3, [r0, #20]
   bb43a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb43e:	f8dc c000 	ldr.w	ip, [ip]
   bb442:	fa0c fc08 	lsl.w	ip, ip, r8
   bb446:	ea4c 0707 	orr.w	r7, ip, r7
   bb44a:	f849 7b04 	str.w	r7, [r9], #4
   bb44e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb452:	40cf      	lsrs	r7, r1
   bb454:	e7da      	b.n	bb40c <rshift+0x4c>
   bb456:	f851 cb04 	ldr.w	ip, [r1], #4
   bb45a:	f847 cf04 	str.w	ip, [r7, #4]!
   bb45e:	e7c3      	b.n	bb3e8 <rshift+0x28>
   bb460:	4623      	mov	r3, r4
   bb462:	e7e1      	b.n	bb428 <rshift+0x68>

000bb464 <__hexdig_fun>:
   bb464:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb468:	2b09      	cmp	r3, #9
   bb46a:	d802      	bhi.n	bb472 <__hexdig_fun+0xe>
   bb46c:	3820      	subs	r0, #32
   bb46e:	b2c0      	uxtb	r0, r0
   bb470:	4770      	bx	lr
   bb472:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb476:	2b05      	cmp	r3, #5
   bb478:	d801      	bhi.n	bb47e <__hexdig_fun+0x1a>
   bb47a:	3847      	subs	r0, #71	; 0x47
   bb47c:	e7f7      	b.n	bb46e <__hexdig_fun+0xa>
   bb47e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb482:	2b05      	cmp	r3, #5
   bb484:	d801      	bhi.n	bb48a <__hexdig_fun+0x26>
   bb486:	3827      	subs	r0, #39	; 0x27
   bb488:	e7f1      	b.n	bb46e <__hexdig_fun+0xa>
   bb48a:	2000      	movs	r0, #0
   bb48c:	4770      	bx	lr
	...

000bb490 <__gethex>:
   bb490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb494:	ed2d 8b02 	vpush	{d8}
   bb498:	b089      	sub	sp, #36	; 0x24
   bb49a:	ee08 0a10 	vmov	s16, r0
   bb49e:	9304      	str	r3, [sp, #16]
   bb4a0:	4bb4      	ldr	r3, [pc, #720]	; (bb774 <__gethex+0x2e4>)
   bb4a2:	681b      	ldr	r3, [r3, #0]
   bb4a4:	9301      	str	r3, [sp, #4]
   bb4a6:	4618      	mov	r0, r3
   bb4a8:	468b      	mov	fp, r1
   bb4aa:	4690      	mov	r8, r2
   bb4ac:	f7f9 fb12 	bl	b4ad4 <strlen>
   bb4b0:	9b01      	ldr	r3, [sp, #4]
   bb4b2:	f8db 2000 	ldr.w	r2, [fp]
   bb4b6:	4403      	add	r3, r0
   bb4b8:	4682      	mov	sl, r0
   bb4ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb4be:	9305      	str	r3, [sp, #20]
   bb4c0:	1c93      	adds	r3, r2, #2
   bb4c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb4c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb4ca:	32fe      	adds	r2, #254	; 0xfe
   bb4cc:	18d1      	adds	r1, r2, r3
   bb4ce:	461f      	mov	r7, r3
   bb4d0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb4d4:	9100      	str	r1, [sp, #0]
   bb4d6:	2830      	cmp	r0, #48	; 0x30
   bb4d8:	d0f8      	beq.n	bb4cc <__gethex+0x3c>
   bb4da:	f7ff ffc3 	bl	bb464 <__hexdig_fun>
   bb4de:	4604      	mov	r4, r0
   bb4e0:	2800      	cmp	r0, #0
   bb4e2:	d13a      	bne.n	bb55a <__gethex+0xca>
   bb4e4:	9901      	ldr	r1, [sp, #4]
   bb4e6:	4652      	mov	r2, sl
   bb4e8:	4638      	mov	r0, r7
   bb4ea:	f7fe ffda 	bl	ba4a2 <strncmp>
   bb4ee:	4605      	mov	r5, r0
   bb4f0:	2800      	cmp	r0, #0
   bb4f2:	d168      	bne.n	bb5c6 <__gethex+0x136>
   bb4f4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb4f8:	eb07 060a 	add.w	r6, r7, sl
   bb4fc:	f7ff ffb2 	bl	bb464 <__hexdig_fun>
   bb500:	2800      	cmp	r0, #0
   bb502:	d062      	beq.n	bb5ca <__gethex+0x13a>
   bb504:	4633      	mov	r3, r6
   bb506:	7818      	ldrb	r0, [r3, #0]
   bb508:	2830      	cmp	r0, #48	; 0x30
   bb50a:	461f      	mov	r7, r3
   bb50c:	f103 0301 	add.w	r3, r3, #1
   bb510:	d0f9      	beq.n	bb506 <__gethex+0x76>
   bb512:	f7ff ffa7 	bl	bb464 <__hexdig_fun>
   bb516:	2301      	movs	r3, #1
   bb518:	fab0 f480 	clz	r4, r0
   bb51c:	0964      	lsrs	r4, r4, #5
   bb51e:	4635      	mov	r5, r6
   bb520:	9300      	str	r3, [sp, #0]
   bb522:	463a      	mov	r2, r7
   bb524:	4616      	mov	r6, r2
   bb526:	3201      	adds	r2, #1
   bb528:	7830      	ldrb	r0, [r6, #0]
   bb52a:	f7ff ff9b 	bl	bb464 <__hexdig_fun>
   bb52e:	2800      	cmp	r0, #0
   bb530:	d1f8      	bne.n	bb524 <__gethex+0x94>
   bb532:	9901      	ldr	r1, [sp, #4]
   bb534:	4652      	mov	r2, sl
   bb536:	4630      	mov	r0, r6
   bb538:	f7fe ffb3 	bl	ba4a2 <strncmp>
   bb53c:	b980      	cbnz	r0, bb560 <__gethex+0xd0>
   bb53e:	b94d      	cbnz	r5, bb554 <__gethex+0xc4>
   bb540:	eb06 050a 	add.w	r5, r6, sl
   bb544:	462a      	mov	r2, r5
   bb546:	4616      	mov	r6, r2
   bb548:	3201      	adds	r2, #1
   bb54a:	7830      	ldrb	r0, [r6, #0]
   bb54c:	f7ff ff8a 	bl	bb464 <__hexdig_fun>
   bb550:	2800      	cmp	r0, #0
   bb552:	d1f8      	bne.n	bb546 <__gethex+0xb6>
   bb554:	1bad      	subs	r5, r5, r6
   bb556:	00ad      	lsls	r5, r5, #2
   bb558:	e004      	b.n	bb564 <__gethex+0xd4>
   bb55a:	2400      	movs	r4, #0
   bb55c:	4625      	mov	r5, r4
   bb55e:	e7e0      	b.n	bb522 <__gethex+0x92>
   bb560:	2d00      	cmp	r5, #0
   bb562:	d1f7      	bne.n	bb554 <__gethex+0xc4>
   bb564:	7833      	ldrb	r3, [r6, #0]
   bb566:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb56a:	2b50      	cmp	r3, #80	; 0x50
   bb56c:	d13b      	bne.n	bb5e6 <__gethex+0x156>
   bb56e:	7873      	ldrb	r3, [r6, #1]
   bb570:	2b2b      	cmp	r3, #43	; 0x2b
   bb572:	d02c      	beq.n	bb5ce <__gethex+0x13e>
   bb574:	2b2d      	cmp	r3, #45	; 0x2d
   bb576:	d02e      	beq.n	bb5d6 <__gethex+0x146>
   bb578:	1c71      	adds	r1, r6, #1
   bb57a:	f04f 0900 	mov.w	r9, #0
   bb57e:	7808      	ldrb	r0, [r1, #0]
   bb580:	f7ff ff70 	bl	bb464 <__hexdig_fun>
   bb584:	1e43      	subs	r3, r0, #1
   bb586:	b2db      	uxtb	r3, r3
   bb588:	2b18      	cmp	r3, #24
   bb58a:	d82c      	bhi.n	bb5e6 <__gethex+0x156>
   bb58c:	f1a0 0210 	sub.w	r2, r0, #16
   bb590:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb594:	f7ff ff66 	bl	bb464 <__hexdig_fun>
   bb598:	1e43      	subs	r3, r0, #1
   bb59a:	b2db      	uxtb	r3, r3
   bb59c:	2b18      	cmp	r3, #24
   bb59e:	d91d      	bls.n	bb5dc <__gethex+0x14c>
   bb5a0:	f1b9 0f00 	cmp.w	r9, #0
   bb5a4:	d000      	beq.n	bb5a8 <__gethex+0x118>
   bb5a6:	4252      	negs	r2, r2
   bb5a8:	4415      	add	r5, r2
   bb5aa:	f8cb 1000 	str.w	r1, [fp]
   bb5ae:	b1e4      	cbz	r4, bb5ea <__gethex+0x15a>
   bb5b0:	9b00      	ldr	r3, [sp, #0]
   bb5b2:	2b00      	cmp	r3, #0
   bb5b4:	bf14      	ite	ne
   bb5b6:	2700      	movne	r7, #0
   bb5b8:	2706      	moveq	r7, #6
   bb5ba:	4638      	mov	r0, r7
   bb5bc:	b009      	add	sp, #36	; 0x24
   bb5be:	ecbd 8b02 	vpop	{d8}
   bb5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb5c6:	463e      	mov	r6, r7
   bb5c8:	4625      	mov	r5, r4
   bb5ca:	2401      	movs	r4, #1
   bb5cc:	e7ca      	b.n	bb564 <__gethex+0xd4>
   bb5ce:	f04f 0900 	mov.w	r9, #0
   bb5d2:	1cb1      	adds	r1, r6, #2
   bb5d4:	e7d3      	b.n	bb57e <__gethex+0xee>
   bb5d6:	f04f 0901 	mov.w	r9, #1
   bb5da:	e7fa      	b.n	bb5d2 <__gethex+0x142>
   bb5dc:	230a      	movs	r3, #10
   bb5de:	fb03 0202 	mla	r2, r3, r2, r0
   bb5e2:	3a10      	subs	r2, #16
   bb5e4:	e7d4      	b.n	bb590 <__gethex+0x100>
   bb5e6:	4631      	mov	r1, r6
   bb5e8:	e7df      	b.n	bb5aa <__gethex+0x11a>
   bb5ea:	1bf3      	subs	r3, r6, r7
   bb5ec:	3b01      	subs	r3, #1
   bb5ee:	4621      	mov	r1, r4
   bb5f0:	2b07      	cmp	r3, #7
   bb5f2:	dc0b      	bgt.n	bb60c <__gethex+0x17c>
   bb5f4:	ee18 0a10 	vmov	r0, s16
   bb5f8:	f000 fa68 	bl	bbacc <_Balloc>
   bb5fc:	4604      	mov	r4, r0
   bb5fe:	b940      	cbnz	r0, bb612 <__gethex+0x182>
   bb600:	4b5d      	ldr	r3, [pc, #372]	; (bb778 <__gethex+0x2e8>)
   bb602:	4602      	mov	r2, r0
   bb604:	21de      	movs	r1, #222	; 0xde
   bb606:	485d      	ldr	r0, [pc, #372]	; (bb77c <__gethex+0x2ec>)
   bb608:	f7fb fb2c 	bl	b6c64 <__assert_func>
   bb60c:	3101      	adds	r1, #1
   bb60e:	105b      	asrs	r3, r3, #1
   bb610:	e7ee      	b.n	bb5f0 <__gethex+0x160>
   bb612:	f100 0914 	add.w	r9, r0, #20
   bb616:	f04f 0b00 	mov.w	fp, #0
   bb61a:	f1ca 0301 	rsb	r3, sl, #1
   bb61e:	f8cd 9008 	str.w	r9, [sp, #8]
   bb622:	f8cd b000 	str.w	fp, [sp]
   bb626:	9306      	str	r3, [sp, #24]
   bb628:	42b7      	cmp	r7, r6
   bb62a:	d340      	bcc.n	bb6ae <__gethex+0x21e>
   bb62c:	9802      	ldr	r0, [sp, #8]
   bb62e:	9b00      	ldr	r3, [sp, #0]
   bb630:	f840 3b04 	str.w	r3, [r0], #4
   bb634:	eba0 0009 	sub.w	r0, r0, r9
   bb638:	1080      	asrs	r0, r0, #2
   bb63a:	0146      	lsls	r6, r0, #5
   bb63c:	6120      	str	r0, [r4, #16]
   bb63e:	4618      	mov	r0, r3
   bb640:	f000 fb36 	bl	bbcb0 <__hi0bits>
   bb644:	1a30      	subs	r0, r6, r0
   bb646:	f8d8 6000 	ldr.w	r6, [r8]
   bb64a:	42b0      	cmp	r0, r6
   bb64c:	dd63      	ble.n	bb716 <__gethex+0x286>
   bb64e:	1b87      	subs	r7, r0, r6
   bb650:	4639      	mov	r1, r7
   bb652:	4620      	mov	r0, r4
   bb654:	f000 feda 	bl	bc40c <__any_on>
   bb658:	4682      	mov	sl, r0
   bb65a:	b1a8      	cbz	r0, bb688 <__gethex+0x1f8>
   bb65c:	1e7b      	subs	r3, r7, #1
   bb65e:	1159      	asrs	r1, r3, #5
   bb660:	f003 021f 	and.w	r2, r3, #31
   bb664:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb668:	f04f 0a01 	mov.w	sl, #1
   bb66c:	fa0a f202 	lsl.w	r2, sl, r2
   bb670:	420a      	tst	r2, r1
   bb672:	d009      	beq.n	bb688 <__gethex+0x1f8>
   bb674:	4553      	cmp	r3, sl
   bb676:	dd05      	ble.n	bb684 <__gethex+0x1f4>
   bb678:	1eb9      	subs	r1, r7, #2
   bb67a:	4620      	mov	r0, r4
   bb67c:	f000 fec6 	bl	bc40c <__any_on>
   bb680:	2800      	cmp	r0, #0
   bb682:	d145      	bne.n	bb710 <__gethex+0x280>
   bb684:	f04f 0a02 	mov.w	sl, #2
   bb688:	4639      	mov	r1, r7
   bb68a:	4620      	mov	r0, r4
   bb68c:	f7ff fe98 	bl	bb3c0 <rshift>
   bb690:	443d      	add	r5, r7
   bb692:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb696:	42ab      	cmp	r3, r5
   bb698:	da4c      	bge.n	bb734 <__gethex+0x2a4>
   bb69a:	ee18 0a10 	vmov	r0, s16
   bb69e:	4621      	mov	r1, r4
   bb6a0:	f000 fa54 	bl	bbb4c <_Bfree>
   bb6a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb6a6:	2300      	movs	r3, #0
   bb6a8:	6013      	str	r3, [r2, #0]
   bb6aa:	27a3      	movs	r7, #163	; 0xa3
   bb6ac:	e785      	b.n	bb5ba <__gethex+0x12a>
   bb6ae:	1e73      	subs	r3, r6, #1
   bb6b0:	9a05      	ldr	r2, [sp, #20]
   bb6b2:	9303      	str	r3, [sp, #12]
   bb6b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb6b8:	4293      	cmp	r3, r2
   bb6ba:	d019      	beq.n	bb6f0 <__gethex+0x260>
   bb6bc:	f1bb 0f20 	cmp.w	fp, #32
   bb6c0:	d107      	bne.n	bb6d2 <__gethex+0x242>
   bb6c2:	9b02      	ldr	r3, [sp, #8]
   bb6c4:	9a00      	ldr	r2, [sp, #0]
   bb6c6:	f843 2b04 	str.w	r2, [r3], #4
   bb6ca:	9302      	str	r3, [sp, #8]
   bb6cc:	2300      	movs	r3, #0
   bb6ce:	9300      	str	r3, [sp, #0]
   bb6d0:	469b      	mov	fp, r3
   bb6d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb6d6:	f7ff fec5 	bl	bb464 <__hexdig_fun>
   bb6da:	9b00      	ldr	r3, [sp, #0]
   bb6dc:	f000 000f 	and.w	r0, r0, #15
   bb6e0:	fa00 f00b 	lsl.w	r0, r0, fp
   bb6e4:	4303      	orrs	r3, r0
   bb6e6:	9300      	str	r3, [sp, #0]
   bb6e8:	f10b 0b04 	add.w	fp, fp, #4
   bb6ec:	9b03      	ldr	r3, [sp, #12]
   bb6ee:	e00d      	b.n	bb70c <__gethex+0x27c>
   bb6f0:	9b03      	ldr	r3, [sp, #12]
   bb6f2:	9a06      	ldr	r2, [sp, #24]
   bb6f4:	4413      	add	r3, r2
   bb6f6:	42bb      	cmp	r3, r7
   bb6f8:	d3e0      	bcc.n	bb6bc <__gethex+0x22c>
   bb6fa:	4618      	mov	r0, r3
   bb6fc:	9901      	ldr	r1, [sp, #4]
   bb6fe:	9307      	str	r3, [sp, #28]
   bb700:	4652      	mov	r2, sl
   bb702:	f7fe fece 	bl	ba4a2 <strncmp>
   bb706:	9b07      	ldr	r3, [sp, #28]
   bb708:	2800      	cmp	r0, #0
   bb70a:	d1d7      	bne.n	bb6bc <__gethex+0x22c>
   bb70c:	461e      	mov	r6, r3
   bb70e:	e78b      	b.n	bb628 <__gethex+0x198>
   bb710:	f04f 0a03 	mov.w	sl, #3
   bb714:	e7b8      	b.n	bb688 <__gethex+0x1f8>
   bb716:	da0a      	bge.n	bb72e <__gethex+0x29e>
   bb718:	1a37      	subs	r7, r6, r0
   bb71a:	4621      	mov	r1, r4
   bb71c:	ee18 0a10 	vmov	r0, s16
   bb720:	463a      	mov	r2, r7
   bb722:	f000 fc2f 	bl	bbf84 <__lshift>
   bb726:	1bed      	subs	r5, r5, r7
   bb728:	4604      	mov	r4, r0
   bb72a:	f100 0914 	add.w	r9, r0, #20
   bb72e:	f04f 0a00 	mov.w	sl, #0
   bb732:	e7ae      	b.n	bb692 <__gethex+0x202>
   bb734:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb738:	42a8      	cmp	r0, r5
   bb73a:	dd72      	ble.n	bb822 <__gethex+0x392>
   bb73c:	1b45      	subs	r5, r0, r5
   bb73e:	42ae      	cmp	r6, r5
   bb740:	dc36      	bgt.n	bb7b0 <__gethex+0x320>
   bb742:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb746:	2b02      	cmp	r3, #2
   bb748:	d02a      	beq.n	bb7a0 <__gethex+0x310>
   bb74a:	2b03      	cmp	r3, #3
   bb74c:	d02c      	beq.n	bb7a8 <__gethex+0x318>
   bb74e:	2b01      	cmp	r3, #1
   bb750:	d11c      	bne.n	bb78c <__gethex+0x2fc>
   bb752:	42ae      	cmp	r6, r5
   bb754:	d11a      	bne.n	bb78c <__gethex+0x2fc>
   bb756:	2e01      	cmp	r6, #1
   bb758:	d112      	bne.n	bb780 <__gethex+0x2f0>
   bb75a:	9a04      	ldr	r2, [sp, #16]
   bb75c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb760:	6013      	str	r3, [r2, #0]
   bb762:	2301      	movs	r3, #1
   bb764:	6123      	str	r3, [r4, #16]
   bb766:	f8c9 3000 	str.w	r3, [r9]
   bb76a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb76c:	2762      	movs	r7, #98	; 0x62
   bb76e:	601c      	str	r4, [r3, #0]
   bb770:	e723      	b.n	bb5ba <__gethex+0x12a>
   bb772:	bf00      	nop
   bb774:	000bd088 	.word	0x000bd088
   bb778:	000bcff1 	.word	0x000bcff1
   bb77c:	000bd002 	.word	0x000bd002
   bb780:	1e71      	subs	r1, r6, #1
   bb782:	4620      	mov	r0, r4
   bb784:	f000 fe42 	bl	bc40c <__any_on>
   bb788:	2800      	cmp	r0, #0
   bb78a:	d1e6      	bne.n	bb75a <__gethex+0x2ca>
   bb78c:	ee18 0a10 	vmov	r0, s16
   bb790:	4621      	mov	r1, r4
   bb792:	f000 f9db 	bl	bbb4c <_Bfree>
   bb796:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb798:	2300      	movs	r3, #0
   bb79a:	6013      	str	r3, [r2, #0]
   bb79c:	2750      	movs	r7, #80	; 0x50
   bb79e:	e70c      	b.n	bb5ba <__gethex+0x12a>
   bb7a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb7a2:	2b00      	cmp	r3, #0
   bb7a4:	d1f2      	bne.n	bb78c <__gethex+0x2fc>
   bb7a6:	e7d8      	b.n	bb75a <__gethex+0x2ca>
   bb7a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb7aa:	2b00      	cmp	r3, #0
   bb7ac:	d1d5      	bne.n	bb75a <__gethex+0x2ca>
   bb7ae:	e7ed      	b.n	bb78c <__gethex+0x2fc>
   bb7b0:	1e6f      	subs	r7, r5, #1
   bb7b2:	f1ba 0f00 	cmp.w	sl, #0
   bb7b6:	d131      	bne.n	bb81c <__gethex+0x38c>
   bb7b8:	b127      	cbz	r7, bb7c4 <__gethex+0x334>
   bb7ba:	4639      	mov	r1, r7
   bb7bc:	4620      	mov	r0, r4
   bb7be:	f000 fe25 	bl	bc40c <__any_on>
   bb7c2:	4682      	mov	sl, r0
   bb7c4:	117b      	asrs	r3, r7, #5
   bb7c6:	2101      	movs	r1, #1
   bb7c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb7cc:	f007 071f 	and.w	r7, r7, #31
   bb7d0:	fa01 f707 	lsl.w	r7, r1, r7
   bb7d4:	421f      	tst	r7, r3
   bb7d6:	4629      	mov	r1, r5
   bb7d8:	4620      	mov	r0, r4
   bb7da:	bf18      	it	ne
   bb7dc:	f04a 0a02 	orrne.w	sl, sl, #2
   bb7e0:	1b76      	subs	r6, r6, r5
   bb7e2:	f7ff fded 	bl	bb3c0 <rshift>
   bb7e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb7ea:	2702      	movs	r7, #2
   bb7ec:	f1ba 0f00 	cmp.w	sl, #0
   bb7f0:	d048      	beq.n	bb884 <__gethex+0x3f4>
   bb7f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb7f6:	2b02      	cmp	r3, #2
   bb7f8:	d015      	beq.n	bb826 <__gethex+0x396>
   bb7fa:	2b03      	cmp	r3, #3
   bb7fc:	d017      	beq.n	bb82e <__gethex+0x39e>
   bb7fe:	2b01      	cmp	r3, #1
   bb800:	d109      	bne.n	bb816 <__gethex+0x386>
   bb802:	f01a 0f02 	tst.w	sl, #2
   bb806:	d006      	beq.n	bb816 <__gethex+0x386>
   bb808:	f8d9 0000 	ldr.w	r0, [r9]
   bb80c:	ea4a 0a00 	orr.w	sl, sl, r0
   bb810:	f01a 0f01 	tst.w	sl, #1
   bb814:	d10e      	bne.n	bb834 <__gethex+0x3a4>
   bb816:	f047 0710 	orr.w	r7, r7, #16
   bb81a:	e033      	b.n	bb884 <__gethex+0x3f4>
   bb81c:	f04f 0a01 	mov.w	sl, #1
   bb820:	e7d0      	b.n	bb7c4 <__gethex+0x334>
   bb822:	2701      	movs	r7, #1
   bb824:	e7e2      	b.n	bb7ec <__gethex+0x35c>
   bb826:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb828:	f1c3 0301 	rsb	r3, r3, #1
   bb82c:	9315      	str	r3, [sp, #84]	; 0x54
   bb82e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb830:	2b00      	cmp	r3, #0
   bb832:	d0f0      	beq.n	bb816 <__gethex+0x386>
   bb834:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb838:	f104 0314 	add.w	r3, r4, #20
   bb83c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb840:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb844:	f04f 0c00 	mov.w	ip, #0
   bb848:	4618      	mov	r0, r3
   bb84a:	f853 2b04 	ldr.w	r2, [r3], #4
   bb84e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bb852:	d01c      	beq.n	bb88e <__gethex+0x3fe>
   bb854:	3201      	adds	r2, #1
   bb856:	6002      	str	r2, [r0, #0]
   bb858:	2f02      	cmp	r7, #2
   bb85a:	f104 0314 	add.w	r3, r4, #20
   bb85e:	d13f      	bne.n	bb8e0 <__gethex+0x450>
   bb860:	f8d8 2000 	ldr.w	r2, [r8]
   bb864:	3a01      	subs	r2, #1
   bb866:	42b2      	cmp	r2, r6
   bb868:	d10a      	bne.n	bb880 <__gethex+0x3f0>
   bb86a:	1171      	asrs	r1, r6, #5
   bb86c:	2201      	movs	r2, #1
   bb86e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb872:	f006 061f 	and.w	r6, r6, #31
   bb876:	fa02 f606 	lsl.w	r6, r2, r6
   bb87a:	421e      	tst	r6, r3
   bb87c:	bf18      	it	ne
   bb87e:	4617      	movne	r7, r2
   bb880:	f047 0720 	orr.w	r7, r7, #32
   bb884:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb886:	601c      	str	r4, [r3, #0]
   bb888:	9b04      	ldr	r3, [sp, #16]
   bb88a:	601d      	str	r5, [r3, #0]
   bb88c:	e695      	b.n	bb5ba <__gethex+0x12a>
   bb88e:	4299      	cmp	r1, r3
   bb890:	f843 cc04 	str.w	ip, [r3, #-4]
   bb894:	d8d8      	bhi.n	bb848 <__gethex+0x3b8>
   bb896:	68a3      	ldr	r3, [r4, #8]
   bb898:	459b      	cmp	fp, r3
   bb89a:	db19      	blt.n	bb8d0 <__gethex+0x440>
   bb89c:	6861      	ldr	r1, [r4, #4]
   bb89e:	ee18 0a10 	vmov	r0, s16
   bb8a2:	3101      	adds	r1, #1
   bb8a4:	f000 f912 	bl	bbacc <_Balloc>
   bb8a8:	4681      	mov	r9, r0
   bb8aa:	b918      	cbnz	r0, bb8b4 <__gethex+0x424>
   bb8ac:	4b1a      	ldr	r3, [pc, #104]	; (bb918 <__gethex+0x488>)
   bb8ae:	4602      	mov	r2, r0
   bb8b0:	2184      	movs	r1, #132	; 0x84
   bb8b2:	e6a8      	b.n	bb606 <__gethex+0x176>
   bb8b4:	6922      	ldr	r2, [r4, #16]
   bb8b6:	3202      	adds	r2, #2
   bb8b8:	f104 010c 	add.w	r1, r4, #12
   bb8bc:	0092      	lsls	r2, r2, #2
   bb8be:	300c      	adds	r0, #12
   bb8c0:	f7fe fd6c 	bl	ba39c <memcpy>
   bb8c4:	4621      	mov	r1, r4
   bb8c6:	ee18 0a10 	vmov	r0, s16
   bb8ca:	f000 f93f 	bl	bbb4c <_Bfree>
   bb8ce:	464c      	mov	r4, r9
   bb8d0:	6923      	ldr	r3, [r4, #16]
   bb8d2:	1c5a      	adds	r2, r3, #1
   bb8d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb8d8:	6122      	str	r2, [r4, #16]
   bb8da:	2201      	movs	r2, #1
   bb8dc:	615a      	str	r2, [r3, #20]
   bb8de:	e7bb      	b.n	bb858 <__gethex+0x3c8>
   bb8e0:	6922      	ldr	r2, [r4, #16]
   bb8e2:	455a      	cmp	r2, fp
   bb8e4:	dd0b      	ble.n	bb8fe <__gethex+0x46e>
   bb8e6:	2101      	movs	r1, #1
   bb8e8:	4620      	mov	r0, r4
   bb8ea:	f7ff fd69 	bl	bb3c0 <rshift>
   bb8ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb8f2:	3501      	adds	r5, #1
   bb8f4:	42ab      	cmp	r3, r5
   bb8f6:	f6ff aed0 	blt.w	bb69a <__gethex+0x20a>
   bb8fa:	2701      	movs	r7, #1
   bb8fc:	e7c0      	b.n	bb880 <__gethex+0x3f0>
   bb8fe:	f016 061f 	ands.w	r6, r6, #31
   bb902:	d0fa      	beq.n	bb8fa <__gethex+0x46a>
   bb904:	4453      	add	r3, sl
   bb906:	f1c6 0620 	rsb	r6, r6, #32
   bb90a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb90e:	f000 f9cf 	bl	bbcb0 <__hi0bits>
   bb912:	42b0      	cmp	r0, r6
   bb914:	dbe7      	blt.n	bb8e6 <__gethex+0x456>
   bb916:	e7f0      	b.n	bb8fa <__gethex+0x46a>
   bb918:	000bcff1 	.word	0x000bcff1

000bb91c <L_shift>:
   bb91c:	f1c2 0208 	rsb	r2, r2, #8
   bb920:	0092      	lsls	r2, r2, #2
   bb922:	b570      	push	{r4, r5, r6, lr}
   bb924:	f1c2 0620 	rsb	r6, r2, #32
   bb928:	6843      	ldr	r3, [r0, #4]
   bb92a:	6804      	ldr	r4, [r0, #0]
   bb92c:	fa03 f506 	lsl.w	r5, r3, r6
   bb930:	432c      	orrs	r4, r5
   bb932:	40d3      	lsrs	r3, r2
   bb934:	6004      	str	r4, [r0, #0]
   bb936:	f840 3f04 	str.w	r3, [r0, #4]!
   bb93a:	4288      	cmp	r0, r1
   bb93c:	d3f4      	bcc.n	bb928 <L_shift+0xc>
   bb93e:	bd70      	pop	{r4, r5, r6, pc}

000bb940 <__match>:
   bb940:	b530      	push	{r4, r5, lr}
   bb942:	6803      	ldr	r3, [r0, #0]
   bb944:	3301      	adds	r3, #1
   bb946:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb94a:	b914      	cbnz	r4, bb952 <__match+0x12>
   bb94c:	6003      	str	r3, [r0, #0]
   bb94e:	2001      	movs	r0, #1
   bb950:	bd30      	pop	{r4, r5, pc}
   bb952:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb956:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb95a:	2d19      	cmp	r5, #25
   bb95c:	bf98      	it	ls
   bb95e:	3220      	addls	r2, #32
   bb960:	42a2      	cmp	r2, r4
   bb962:	d0f0      	beq.n	bb946 <__match+0x6>
   bb964:	2000      	movs	r0, #0
   bb966:	e7f3      	b.n	bb950 <__match+0x10>

000bb968 <__hexnan>:
   bb968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb96c:	680b      	ldr	r3, [r1, #0]
   bb96e:	115e      	asrs	r6, r3, #5
   bb970:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb974:	f013 031f 	ands.w	r3, r3, #31
   bb978:	b087      	sub	sp, #28
   bb97a:	bf18      	it	ne
   bb97c:	3604      	addne	r6, #4
   bb97e:	2500      	movs	r5, #0
   bb980:	1f37      	subs	r7, r6, #4
   bb982:	4690      	mov	r8, r2
   bb984:	6802      	ldr	r2, [r0, #0]
   bb986:	9301      	str	r3, [sp, #4]
   bb988:	4682      	mov	sl, r0
   bb98a:	f846 5c04 	str.w	r5, [r6, #-4]
   bb98e:	46b9      	mov	r9, r7
   bb990:	463c      	mov	r4, r7
   bb992:	9502      	str	r5, [sp, #8]
   bb994:	46ab      	mov	fp, r5
   bb996:	7851      	ldrb	r1, [r2, #1]
   bb998:	1c53      	adds	r3, r2, #1
   bb99a:	9303      	str	r3, [sp, #12]
   bb99c:	b341      	cbz	r1, bb9f0 <__hexnan+0x88>
   bb99e:	4608      	mov	r0, r1
   bb9a0:	9205      	str	r2, [sp, #20]
   bb9a2:	9104      	str	r1, [sp, #16]
   bb9a4:	f7ff fd5e 	bl	bb464 <__hexdig_fun>
   bb9a8:	2800      	cmp	r0, #0
   bb9aa:	d14f      	bne.n	bba4c <__hexnan+0xe4>
   bb9ac:	9904      	ldr	r1, [sp, #16]
   bb9ae:	9a05      	ldr	r2, [sp, #20]
   bb9b0:	2920      	cmp	r1, #32
   bb9b2:	d818      	bhi.n	bb9e6 <__hexnan+0x7e>
   bb9b4:	9b02      	ldr	r3, [sp, #8]
   bb9b6:	459b      	cmp	fp, r3
   bb9b8:	dd13      	ble.n	bb9e2 <__hexnan+0x7a>
   bb9ba:	454c      	cmp	r4, r9
   bb9bc:	d206      	bcs.n	bb9cc <__hexnan+0x64>
   bb9be:	2d07      	cmp	r5, #7
   bb9c0:	dc04      	bgt.n	bb9cc <__hexnan+0x64>
   bb9c2:	462a      	mov	r2, r5
   bb9c4:	4649      	mov	r1, r9
   bb9c6:	4620      	mov	r0, r4
   bb9c8:	f7ff ffa8 	bl	bb91c <L_shift>
   bb9cc:	4544      	cmp	r4, r8
   bb9ce:	d950      	bls.n	bba72 <__hexnan+0x10a>
   bb9d0:	2300      	movs	r3, #0
   bb9d2:	f1a4 0904 	sub.w	r9, r4, #4
   bb9d6:	f844 3c04 	str.w	r3, [r4, #-4]
   bb9da:	f8cd b008 	str.w	fp, [sp, #8]
   bb9de:	464c      	mov	r4, r9
   bb9e0:	461d      	mov	r5, r3
   bb9e2:	9a03      	ldr	r2, [sp, #12]
   bb9e4:	e7d7      	b.n	bb996 <__hexnan+0x2e>
   bb9e6:	2929      	cmp	r1, #41	; 0x29
   bb9e8:	d156      	bne.n	bba98 <__hexnan+0x130>
   bb9ea:	3202      	adds	r2, #2
   bb9ec:	f8ca 2000 	str.w	r2, [sl]
   bb9f0:	f1bb 0f00 	cmp.w	fp, #0
   bb9f4:	d050      	beq.n	bba98 <__hexnan+0x130>
   bb9f6:	454c      	cmp	r4, r9
   bb9f8:	d206      	bcs.n	bba08 <__hexnan+0xa0>
   bb9fa:	2d07      	cmp	r5, #7
   bb9fc:	dc04      	bgt.n	bba08 <__hexnan+0xa0>
   bb9fe:	462a      	mov	r2, r5
   bba00:	4649      	mov	r1, r9
   bba02:	4620      	mov	r0, r4
   bba04:	f7ff ff8a 	bl	bb91c <L_shift>
   bba08:	4544      	cmp	r4, r8
   bba0a:	d934      	bls.n	bba76 <__hexnan+0x10e>
   bba0c:	f1a8 0204 	sub.w	r2, r8, #4
   bba10:	4623      	mov	r3, r4
   bba12:	f853 1b04 	ldr.w	r1, [r3], #4
   bba16:	f842 1f04 	str.w	r1, [r2, #4]!
   bba1a:	429f      	cmp	r7, r3
   bba1c:	d2f9      	bcs.n	bba12 <__hexnan+0xaa>
   bba1e:	1b3b      	subs	r3, r7, r4
   bba20:	f023 0303 	bic.w	r3, r3, #3
   bba24:	3304      	adds	r3, #4
   bba26:	3401      	adds	r4, #1
   bba28:	3e03      	subs	r6, #3
   bba2a:	42b4      	cmp	r4, r6
   bba2c:	bf88      	it	hi
   bba2e:	2304      	movhi	r3, #4
   bba30:	4443      	add	r3, r8
   bba32:	2200      	movs	r2, #0
   bba34:	f843 2b04 	str.w	r2, [r3], #4
   bba38:	429f      	cmp	r7, r3
   bba3a:	d2fb      	bcs.n	bba34 <__hexnan+0xcc>
   bba3c:	683b      	ldr	r3, [r7, #0]
   bba3e:	b91b      	cbnz	r3, bba48 <__hexnan+0xe0>
   bba40:	4547      	cmp	r7, r8
   bba42:	d127      	bne.n	bba94 <__hexnan+0x12c>
   bba44:	2301      	movs	r3, #1
   bba46:	603b      	str	r3, [r7, #0]
   bba48:	2005      	movs	r0, #5
   bba4a:	e026      	b.n	bba9a <__hexnan+0x132>
   bba4c:	3501      	adds	r5, #1
   bba4e:	2d08      	cmp	r5, #8
   bba50:	f10b 0b01 	add.w	fp, fp, #1
   bba54:	dd06      	ble.n	bba64 <__hexnan+0xfc>
   bba56:	4544      	cmp	r4, r8
   bba58:	d9c3      	bls.n	bb9e2 <__hexnan+0x7a>
   bba5a:	2300      	movs	r3, #0
   bba5c:	f844 3c04 	str.w	r3, [r4, #-4]
   bba60:	2501      	movs	r5, #1
   bba62:	3c04      	subs	r4, #4
   bba64:	6822      	ldr	r2, [r4, #0]
   bba66:	f000 000f 	and.w	r0, r0, #15
   bba6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bba6e:	6022      	str	r2, [r4, #0]
   bba70:	e7b7      	b.n	bb9e2 <__hexnan+0x7a>
   bba72:	2508      	movs	r5, #8
   bba74:	e7b5      	b.n	bb9e2 <__hexnan+0x7a>
   bba76:	9b01      	ldr	r3, [sp, #4]
   bba78:	2b00      	cmp	r3, #0
   bba7a:	d0df      	beq.n	bba3c <__hexnan+0xd4>
   bba7c:	f04f 32ff 	mov.w	r2, #4294967295
   bba80:	f1c3 0320 	rsb	r3, r3, #32
   bba84:	fa22 f303 	lsr.w	r3, r2, r3
   bba88:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bba8c:	401a      	ands	r2, r3
   bba8e:	f846 2c04 	str.w	r2, [r6, #-4]
   bba92:	e7d3      	b.n	bba3c <__hexnan+0xd4>
   bba94:	3f04      	subs	r7, #4
   bba96:	e7d1      	b.n	bba3c <__hexnan+0xd4>
   bba98:	2004      	movs	r0, #4
   bba9a:	b007      	add	sp, #28
   bba9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbaa0 <__retarget_lock_acquire_recursive>:
   bbaa0:	4770      	bx	lr

000bbaa2 <__retarget_lock_release>:
   bbaa2:	4770      	bx	lr

000bbaa4 <__retarget_lock_release_recursive>:
   bbaa4:	4770      	bx	lr

000bbaa6 <__ascii_mbtowc>:
   bbaa6:	b082      	sub	sp, #8
   bbaa8:	b901      	cbnz	r1, bbaac <__ascii_mbtowc+0x6>
   bbaaa:	a901      	add	r1, sp, #4
   bbaac:	b142      	cbz	r2, bbac0 <__ascii_mbtowc+0x1a>
   bbaae:	b14b      	cbz	r3, bbac4 <__ascii_mbtowc+0x1e>
   bbab0:	7813      	ldrb	r3, [r2, #0]
   bbab2:	600b      	str	r3, [r1, #0]
   bbab4:	7812      	ldrb	r2, [r2, #0]
   bbab6:	1e10      	subs	r0, r2, #0
   bbab8:	bf18      	it	ne
   bbaba:	2001      	movne	r0, #1
   bbabc:	b002      	add	sp, #8
   bbabe:	4770      	bx	lr
   bbac0:	4610      	mov	r0, r2
   bbac2:	e7fb      	b.n	bbabc <__ascii_mbtowc+0x16>
   bbac4:	f06f 0001 	mvn.w	r0, #1
   bbac8:	e7f8      	b.n	bbabc <__ascii_mbtowc+0x16>
	...

000bbacc <_Balloc>:
   bbacc:	b570      	push	{r4, r5, r6, lr}
   bbace:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbad0:	4604      	mov	r4, r0
   bbad2:	460d      	mov	r5, r1
   bbad4:	b976      	cbnz	r6, bbaf4 <_Balloc+0x28>
   bbad6:	2010      	movs	r0, #16
   bbad8:	f7fb f884 	bl	b6be4 <malloc>
   bbadc:	4602      	mov	r2, r0
   bbade:	6260      	str	r0, [r4, #36]	; 0x24
   bbae0:	b920      	cbnz	r0, bbaec <_Balloc+0x20>
   bbae2:	4b18      	ldr	r3, [pc, #96]	; (bbb44 <_Balloc+0x78>)
   bbae4:	4818      	ldr	r0, [pc, #96]	; (bbb48 <_Balloc+0x7c>)
   bbae6:	2166      	movs	r1, #102	; 0x66
   bbae8:	f7fb f8bc 	bl	b6c64 <__assert_func>
   bbaec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbaf0:	6006      	str	r6, [r0, #0]
   bbaf2:	60c6      	str	r6, [r0, #12]
   bbaf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bbaf6:	68f3      	ldr	r3, [r6, #12]
   bbaf8:	b183      	cbz	r3, bbb1c <_Balloc+0x50>
   bbafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbafc:	68db      	ldr	r3, [r3, #12]
   bbafe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bbb02:	b9b8      	cbnz	r0, bbb34 <_Balloc+0x68>
   bbb04:	2101      	movs	r1, #1
   bbb06:	fa01 f605 	lsl.w	r6, r1, r5
   bbb0a:	1d72      	adds	r2, r6, #5
   bbb0c:	0092      	lsls	r2, r2, #2
   bbb0e:	4620      	mov	r0, r4
   bbb10:	f000 fc9d 	bl	bc44e <_calloc_r>
   bbb14:	b160      	cbz	r0, bbb30 <_Balloc+0x64>
   bbb16:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bbb1a:	e00e      	b.n	bbb3a <_Balloc+0x6e>
   bbb1c:	2221      	movs	r2, #33	; 0x21
   bbb1e:	2104      	movs	r1, #4
   bbb20:	4620      	mov	r0, r4
   bbb22:	f000 fc94 	bl	bc44e <_calloc_r>
   bbb26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbb28:	60f0      	str	r0, [r6, #12]
   bbb2a:	68db      	ldr	r3, [r3, #12]
   bbb2c:	2b00      	cmp	r3, #0
   bbb2e:	d1e4      	bne.n	bbafa <_Balloc+0x2e>
   bbb30:	2000      	movs	r0, #0
   bbb32:	bd70      	pop	{r4, r5, r6, pc}
   bbb34:	6802      	ldr	r2, [r0, #0]
   bbb36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bbb3a:	2300      	movs	r3, #0
   bbb3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bbb40:	e7f7      	b.n	bbb32 <_Balloc+0x66>
   bbb42:	bf00      	nop
   bbb44:	000bcdfe 	.word	0x000bcdfe
   bbb48:	000bd09c 	.word	0x000bd09c

000bbb4c <_Bfree>:
   bbb4c:	b570      	push	{r4, r5, r6, lr}
   bbb4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbb50:	4605      	mov	r5, r0
   bbb52:	460c      	mov	r4, r1
   bbb54:	b976      	cbnz	r6, bbb74 <_Bfree+0x28>
   bbb56:	2010      	movs	r0, #16
   bbb58:	f7fb f844 	bl	b6be4 <malloc>
   bbb5c:	4602      	mov	r2, r0
   bbb5e:	6268      	str	r0, [r5, #36]	; 0x24
   bbb60:	b920      	cbnz	r0, bbb6c <_Bfree+0x20>
   bbb62:	4b09      	ldr	r3, [pc, #36]	; (bbb88 <_Bfree+0x3c>)
   bbb64:	4809      	ldr	r0, [pc, #36]	; (bbb8c <_Bfree+0x40>)
   bbb66:	218a      	movs	r1, #138	; 0x8a
   bbb68:	f7fb f87c 	bl	b6c64 <__assert_func>
   bbb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbb70:	6006      	str	r6, [r0, #0]
   bbb72:	60c6      	str	r6, [r0, #12]
   bbb74:	b13c      	cbz	r4, bbb86 <_Bfree+0x3a>
   bbb76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bbb78:	6862      	ldr	r2, [r4, #4]
   bbb7a:	68db      	ldr	r3, [r3, #12]
   bbb7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bbb80:	6021      	str	r1, [r4, #0]
   bbb82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bbb86:	bd70      	pop	{r4, r5, r6, pc}
   bbb88:	000bcdfe 	.word	0x000bcdfe
   bbb8c:	000bd09c 	.word	0x000bd09c

000bbb90 <__multadd>:
   bbb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbb94:	690d      	ldr	r5, [r1, #16]
   bbb96:	4607      	mov	r7, r0
   bbb98:	460c      	mov	r4, r1
   bbb9a:	461e      	mov	r6, r3
   bbb9c:	f101 0c14 	add.w	ip, r1, #20
   bbba0:	2000      	movs	r0, #0
   bbba2:	f8dc 3000 	ldr.w	r3, [ip]
   bbba6:	b299      	uxth	r1, r3
   bbba8:	fb02 6101 	mla	r1, r2, r1, r6
   bbbac:	0c1e      	lsrs	r6, r3, #16
   bbbae:	0c0b      	lsrs	r3, r1, #16
   bbbb0:	fb02 3306 	mla	r3, r2, r6, r3
   bbbb4:	b289      	uxth	r1, r1
   bbbb6:	3001      	adds	r0, #1
   bbbb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bbbbc:	4285      	cmp	r5, r0
   bbbbe:	f84c 1b04 	str.w	r1, [ip], #4
   bbbc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bbbc6:	dcec      	bgt.n	bbba2 <__multadd+0x12>
   bbbc8:	b30e      	cbz	r6, bbc0e <__multadd+0x7e>
   bbbca:	68a3      	ldr	r3, [r4, #8]
   bbbcc:	42ab      	cmp	r3, r5
   bbbce:	dc19      	bgt.n	bbc04 <__multadd+0x74>
   bbbd0:	6861      	ldr	r1, [r4, #4]
   bbbd2:	4638      	mov	r0, r7
   bbbd4:	3101      	adds	r1, #1
   bbbd6:	f7ff ff79 	bl	bbacc <_Balloc>
   bbbda:	4680      	mov	r8, r0
   bbbdc:	b928      	cbnz	r0, bbbea <__multadd+0x5a>
   bbbde:	4602      	mov	r2, r0
   bbbe0:	4b0c      	ldr	r3, [pc, #48]	; (bbc14 <__multadd+0x84>)
   bbbe2:	480d      	ldr	r0, [pc, #52]	; (bbc18 <__multadd+0x88>)
   bbbe4:	21b5      	movs	r1, #181	; 0xb5
   bbbe6:	f7fb f83d 	bl	b6c64 <__assert_func>
   bbbea:	6922      	ldr	r2, [r4, #16]
   bbbec:	3202      	adds	r2, #2
   bbbee:	f104 010c 	add.w	r1, r4, #12
   bbbf2:	0092      	lsls	r2, r2, #2
   bbbf4:	300c      	adds	r0, #12
   bbbf6:	f7fe fbd1 	bl	ba39c <memcpy>
   bbbfa:	4621      	mov	r1, r4
   bbbfc:	4638      	mov	r0, r7
   bbbfe:	f7ff ffa5 	bl	bbb4c <_Bfree>
   bbc02:	4644      	mov	r4, r8
   bbc04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bbc08:	3501      	adds	r5, #1
   bbc0a:	615e      	str	r6, [r3, #20]
   bbc0c:	6125      	str	r5, [r4, #16]
   bbc0e:	4620      	mov	r0, r4
   bbc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbc14:	000bcff1 	.word	0x000bcff1
   bbc18:	000bd09c 	.word	0x000bd09c

000bbc1c <__s2b>:
   bbc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbc20:	460c      	mov	r4, r1
   bbc22:	4615      	mov	r5, r2
   bbc24:	461f      	mov	r7, r3
   bbc26:	2209      	movs	r2, #9
   bbc28:	3308      	adds	r3, #8
   bbc2a:	4606      	mov	r6, r0
   bbc2c:	fb93 f3f2 	sdiv	r3, r3, r2
   bbc30:	2100      	movs	r1, #0
   bbc32:	2201      	movs	r2, #1
   bbc34:	429a      	cmp	r2, r3
   bbc36:	db09      	blt.n	bbc4c <__s2b+0x30>
   bbc38:	4630      	mov	r0, r6
   bbc3a:	f7ff ff47 	bl	bbacc <_Balloc>
   bbc3e:	b940      	cbnz	r0, bbc52 <__s2b+0x36>
   bbc40:	4602      	mov	r2, r0
   bbc42:	4b19      	ldr	r3, [pc, #100]	; (bbca8 <__s2b+0x8c>)
   bbc44:	4819      	ldr	r0, [pc, #100]	; (bbcac <__s2b+0x90>)
   bbc46:	21ce      	movs	r1, #206	; 0xce
   bbc48:	f7fb f80c 	bl	b6c64 <__assert_func>
   bbc4c:	0052      	lsls	r2, r2, #1
   bbc4e:	3101      	adds	r1, #1
   bbc50:	e7f0      	b.n	bbc34 <__s2b+0x18>
   bbc52:	9b08      	ldr	r3, [sp, #32]
   bbc54:	6143      	str	r3, [r0, #20]
   bbc56:	2d09      	cmp	r5, #9
   bbc58:	f04f 0301 	mov.w	r3, #1
   bbc5c:	6103      	str	r3, [r0, #16]
   bbc5e:	dd16      	ble.n	bbc8e <__s2b+0x72>
   bbc60:	f104 0909 	add.w	r9, r4, #9
   bbc64:	46c8      	mov	r8, r9
   bbc66:	442c      	add	r4, r5
   bbc68:	f818 3b01 	ldrb.w	r3, [r8], #1
   bbc6c:	4601      	mov	r1, r0
   bbc6e:	3b30      	subs	r3, #48	; 0x30
   bbc70:	220a      	movs	r2, #10
   bbc72:	4630      	mov	r0, r6
   bbc74:	f7ff ff8c 	bl	bbb90 <__multadd>
   bbc78:	45a0      	cmp	r8, r4
   bbc7a:	d1f5      	bne.n	bbc68 <__s2b+0x4c>
   bbc7c:	f1a5 0408 	sub.w	r4, r5, #8
   bbc80:	444c      	add	r4, r9
   bbc82:	1b2d      	subs	r5, r5, r4
   bbc84:	1963      	adds	r3, r4, r5
   bbc86:	42bb      	cmp	r3, r7
   bbc88:	db04      	blt.n	bbc94 <__s2b+0x78>
   bbc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbc8e:	340a      	adds	r4, #10
   bbc90:	2509      	movs	r5, #9
   bbc92:	e7f6      	b.n	bbc82 <__s2b+0x66>
   bbc94:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbc98:	4601      	mov	r1, r0
   bbc9a:	3b30      	subs	r3, #48	; 0x30
   bbc9c:	220a      	movs	r2, #10
   bbc9e:	4630      	mov	r0, r6
   bbca0:	f7ff ff76 	bl	bbb90 <__multadd>
   bbca4:	e7ee      	b.n	bbc84 <__s2b+0x68>
   bbca6:	bf00      	nop
   bbca8:	000bcff1 	.word	0x000bcff1
   bbcac:	000bd09c 	.word	0x000bd09c

000bbcb0 <__hi0bits>:
   bbcb0:	0c03      	lsrs	r3, r0, #16
   bbcb2:	041b      	lsls	r3, r3, #16
   bbcb4:	b9d3      	cbnz	r3, bbcec <__hi0bits+0x3c>
   bbcb6:	0400      	lsls	r0, r0, #16
   bbcb8:	2310      	movs	r3, #16
   bbcba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bbcbe:	bf04      	itt	eq
   bbcc0:	0200      	lsleq	r0, r0, #8
   bbcc2:	3308      	addeq	r3, #8
   bbcc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bbcc8:	bf04      	itt	eq
   bbcca:	0100      	lsleq	r0, r0, #4
   bbccc:	3304      	addeq	r3, #4
   bbcce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bbcd2:	bf04      	itt	eq
   bbcd4:	0080      	lsleq	r0, r0, #2
   bbcd6:	3302      	addeq	r3, #2
   bbcd8:	2800      	cmp	r0, #0
   bbcda:	db05      	blt.n	bbce8 <__hi0bits+0x38>
   bbcdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bbce0:	f103 0301 	add.w	r3, r3, #1
   bbce4:	bf08      	it	eq
   bbce6:	2320      	moveq	r3, #32
   bbce8:	4618      	mov	r0, r3
   bbcea:	4770      	bx	lr
   bbcec:	2300      	movs	r3, #0
   bbcee:	e7e4      	b.n	bbcba <__hi0bits+0xa>

000bbcf0 <__lo0bits>:
   bbcf0:	6803      	ldr	r3, [r0, #0]
   bbcf2:	f013 0207 	ands.w	r2, r3, #7
   bbcf6:	4601      	mov	r1, r0
   bbcf8:	d00b      	beq.n	bbd12 <__lo0bits+0x22>
   bbcfa:	07da      	lsls	r2, r3, #31
   bbcfc:	d423      	bmi.n	bbd46 <__lo0bits+0x56>
   bbcfe:	0798      	lsls	r0, r3, #30
   bbd00:	bf49      	itett	mi
   bbd02:	085b      	lsrmi	r3, r3, #1
   bbd04:	089b      	lsrpl	r3, r3, #2
   bbd06:	2001      	movmi	r0, #1
   bbd08:	600b      	strmi	r3, [r1, #0]
   bbd0a:	bf5c      	itt	pl
   bbd0c:	600b      	strpl	r3, [r1, #0]
   bbd0e:	2002      	movpl	r0, #2
   bbd10:	4770      	bx	lr
   bbd12:	b298      	uxth	r0, r3
   bbd14:	b9a8      	cbnz	r0, bbd42 <__lo0bits+0x52>
   bbd16:	0c1b      	lsrs	r3, r3, #16
   bbd18:	2010      	movs	r0, #16
   bbd1a:	b2da      	uxtb	r2, r3
   bbd1c:	b90a      	cbnz	r2, bbd22 <__lo0bits+0x32>
   bbd1e:	3008      	adds	r0, #8
   bbd20:	0a1b      	lsrs	r3, r3, #8
   bbd22:	071a      	lsls	r2, r3, #28
   bbd24:	bf04      	itt	eq
   bbd26:	091b      	lsreq	r3, r3, #4
   bbd28:	3004      	addeq	r0, #4
   bbd2a:	079a      	lsls	r2, r3, #30
   bbd2c:	bf04      	itt	eq
   bbd2e:	089b      	lsreq	r3, r3, #2
   bbd30:	3002      	addeq	r0, #2
   bbd32:	07da      	lsls	r2, r3, #31
   bbd34:	d403      	bmi.n	bbd3e <__lo0bits+0x4e>
   bbd36:	085b      	lsrs	r3, r3, #1
   bbd38:	f100 0001 	add.w	r0, r0, #1
   bbd3c:	d005      	beq.n	bbd4a <__lo0bits+0x5a>
   bbd3e:	600b      	str	r3, [r1, #0]
   bbd40:	4770      	bx	lr
   bbd42:	4610      	mov	r0, r2
   bbd44:	e7e9      	b.n	bbd1a <__lo0bits+0x2a>
   bbd46:	2000      	movs	r0, #0
   bbd48:	4770      	bx	lr
   bbd4a:	2020      	movs	r0, #32
   bbd4c:	4770      	bx	lr
	...

000bbd50 <__i2b>:
   bbd50:	b510      	push	{r4, lr}
   bbd52:	460c      	mov	r4, r1
   bbd54:	2101      	movs	r1, #1
   bbd56:	f7ff feb9 	bl	bbacc <_Balloc>
   bbd5a:	4602      	mov	r2, r0
   bbd5c:	b928      	cbnz	r0, bbd6a <__i2b+0x1a>
   bbd5e:	4b05      	ldr	r3, [pc, #20]	; (bbd74 <__i2b+0x24>)
   bbd60:	4805      	ldr	r0, [pc, #20]	; (bbd78 <__i2b+0x28>)
   bbd62:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbd66:	f7fa ff7d 	bl	b6c64 <__assert_func>
   bbd6a:	2301      	movs	r3, #1
   bbd6c:	6144      	str	r4, [r0, #20]
   bbd6e:	6103      	str	r3, [r0, #16]
   bbd70:	bd10      	pop	{r4, pc}
   bbd72:	bf00      	nop
   bbd74:	000bcff1 	.word	0x000bcff1
   bbd78:	000bd09c 	.word	0x000bd09c

000bbd7c <__multiply>:
   bbd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbd80:	4691      	mov	r9, r2
   bbd82:	690a      	ldr	r2, [r1, #16]
   bbd84:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbd88:	429a      	cmp	r2, r3
   bbd8a:	bfb8      	it	lt
   bbd8c:	460b      	movlt	r3, r1
   bbd8e:	460c      	mov	r4, r1
   bbd90:	bfbc      	itt	lt
   bbd92:	464c      	movlt	r4, r9
   bbd94:	4699      	movlt	r9, r3
   bbd96:	6927      	ldr	r7, [r4, #16]
   bbd98:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbd9c:	68a3      	ldr	r3, [r4, #8]
   bbd9e:	6861      	ldr	r1, [r4, #4]
   bbda0:	eb07 060a 	add.w	r6, r7, sl
   bbda4:	42b3      	cmp	r3, r6
   bbda6:	b085      	sub	sp, #20
   bbda8:	bfb8      	it	lt
   bbdaa:	3101      	addlt	r1, #1
   bbdac:	f7ff fe8e 	bl	bbacc <_Balloc>
   bbdb0:	b930      	cbnz	r0, bbdc0 <__multiply+0x44>
   bbdb2:	4602      	mov	r2, r0
   bbdb4:	4b44      	ldr	r3, [pc, #272]	; (bbec8 <__multiply+0x14c>)
   bbdb6:	4845      	ldr	r0, [pc, #276]	; (bbecc <__multiply+0x150>)
   bbdb8:	f240 115d 	movw	r1, #349	; 0x15d
   bbdbc:	f7fa ff52 	bl	b6c64 <__assert_func>
   bbdc0:	f100 0514 	add.w	r5, r0, #20
   bbdc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbdc8:	462b      	mov	r3, r5
   bbdca:	2200      	movs	r2, #0
   bbdcc:	4543      	cmp	r3, r8
   bbdce:	d321      	bcc.n	bbe14 <__multiply+0x98>
   bbdd0:	f104 0314 	add.w	r3, r4, #20
   bbdd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbdd8:	f109 0314 	add.w	r3, r9, #20
   bbddc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbde0:	9202      	str	r2, [sp, #8]
   bbde2:	1b3a      	subs	r2, r7, r4
   bbde4:	3a15      	subs	r2, #21
   bbde6:	f022 0203 	bic.w	r2, r2, #3
   bbdea:	3204      	adds	r2, #4
   bbdec:	f104 0115 	add.w	r1, r4, #21
   bbdf0:	428f      	cmp	r7, r1
   bbdf2:	bf38      	it	cc
   bbdf4:	2204      	movcc	r2, #4
   bbdf6:	9201      	str	r2, [sp, #4]
   bbdf8:	9a02      	ldr	r2, [sp, #8]
   bbdfa:	9303      	str	r3, [sp, #12]
   bbdfc:	429a      	cmp	r2, r3
   bbdfe:	d80c      	bhi.n	bbe1a <__multiply+0x9e>
   bbe00:	2e00      	cmp	r6, #0
   bbe02:	dd03      	ble.n	bbe0c <__multiply+0x90>
   bbe04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbe08:	2b00      	cmp	r3, #0
   bbe0a:	d05a      	beq.n	bbec2 <__multiply+0x146>
   bbe0c:	6106      	str	r6, [r0, #16]
   bbe0e:	b005      	add	sp, #20
   bbe10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe14:	f843 2b04 	str.w	r2, [r3], #4
   bbe18:	e7d8      	b.n	bbdcc <__multiply+0x50>
   bbe1a:	f8b3 a000 	ldrh.w	sl, [r3]
   bbe1e:	f1ba 0f00 	cmp.w	sl, #0
   bbe22:	d024      	beq.n	bbe6e <__multiply+0xf2>
   bbe24:	f104 0e14 	add.w	lr, r4, #20
   bbe28:	46a9      	mov	r9, r5
   bbe2a:	f04f 0c00 	mov.w	ip, #0
   bbe2e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbe32:	f8d9 1000 	ldr.w	r1, [r9]
   bbe36:	fa1f fb82 	uxth.w	fp, r2
   bbe3a:	b289      	uxth	r1, r1
   bbe3c:	fb0a 110b 	mla	r1, sl, fp, r1
   bbe40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbe44:	f8d9 2000 	ldr.w	r2, [r9]
   bbe48:	4461      	add	r1, ip
   bbe4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbe4e:	fb0a c20b 	mla	r2, sl, fp, ip
   bbe52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbe56:	b289      	uxth	r1, r1
   bbe58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbe5c:	4577      	cmp	r7, lr
   bbe5e:	f849 1b04 	str.w	r1, [r9], #4
   bbe62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbe66:	d8e2      	bhi.n	bbe2e <__multiply+0xb2>
   bbe68:	9a01      	ldr	r2, [sp, #4]
   bbe6a:	f845 c002 	str.w	ip, [r5, r2]
   bbe6e:	9a03      	ldr	r2, [sp, #12]
   bbe70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbe74:	3304      	adds	r3, #4
   bbe76:	f1b9 0f00 	cmp.w	r9, #0
   bbe7a:	d020      	beq.n	bbebe <__multiply+0x142>
   bbe7c:	6829      	ldr	r1, [r5, #0]
   bbe7e:	f104 0c14 	add.w	ip, r4, #20
   bbe82:	46ae      	mov	lr, r5
   bbe84:	f04f 0a00 	mov.w	sl, #0
   bbe88:	f8bc b000 	ldrh.w	fp, [ip]
   bbe8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbe90:	fb09 220b 	mla	r2, r9, fp, r2
   bbe94:	4492      	add	sl, r2
   bbe96:	b289      	uxth	r1, r1
   bbe98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbe9c:	f84e 1b04 	str.w	r1, [lr], #4
   bbea0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbea4:	f8be 1000 	ldrh.w	r1, [lr]
   bbea8:	0c12      	lsrs	r2, r2, #16
   bbeaa:	fb09 1102 	mla	r1, r9, r2, r1
   bbeae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbeb2:	4567      	cmp	r7, ip
   bbeb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbeb8:	d8e6      	bhi.n	bbe88 <__multiply+0x10c>
   bbeba:	9a01      	ldr	r2, [sp, #4]
   bbebc:	50a9      	str	r1, [r5, r2]
   bbebe:	3504      	adds	r5, #4
   bbec0:	e79a      	b.n	bbdf8 <__multiply+0x7c>
   bbec2:	3e01      	subs	r6, #1
   bbec4:	e79c      	b.n	bbe00 <__multiply+0x84>
   bbec6:	bf00      	nop
   bbec8:	000bcff1 	.word	0x000bcff1
   bbecc:	000bd09c 	.word	0x000bd09c

000bbed0 <__pow5mult>:
   bbed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbed4:	4615      	mov	r5, r2
   bbed6:	f012 0203 	ands.w	r2, r2, #3
   bbeda:	4606      	mov	r6, r0
   bbedc:	460f      	mov	r7, r1
   bbede:	d007      	beq.n	bbef0 <__pow5mult+0x20>
   bbee0:	4c25      	ldr	r4, [pc, #148]	; (bbf78 <__pow5mult+0xa8>)
   bbee2:	3a01      	subs	r2, #1
   bbee4:	2300      	movs	r3, #0
   bbee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbeea:	f7ff fe51 	bl	bbb90 <__multadd>
   bbeee:	4607      	mov	r7, r0
   bbef0:	10ad      	asrs	r5, r5, #2
   bbef2:	d03d      	beq.n	bbf70 <__pow5mult+0xa0>
   bbef4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbef6:	b97c      	cbnz	r4, bbf18 <__pow5mult+0x48>
   bbef8:	2010      	movs	r0, #16
   bbefa:	f7fa fe73 	bl	b6be4 <malloc>
   bbefe:	4602      	mov	r2, r0
   bbf00:	6270      	str	r0, [r6, #36]	; 0x24
   bbf02:	b928      	cbnz	r0, bbf10 <__pow5mult+0x40>
   bbf04:	4b1d      	ldr	r3, [pc, #116]	; (bbf7c <__pow5mult+0xac>)
   bbf06:	481e      	ldr	r0, [pc, #120]	; (bbf80 <__pow5mult+0xb0>)
   bbf08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbf0c:	f7fa feaa 	bl	b6c64 <__assert_func>
   bbf10:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbf14:	6004      	str	r4, [r0, #0]
   bbf16:	60c4      	str	r4, [r0, #12]
   bbf18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbf1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbf20:	b94c      	cbnz	r4, bbf36 <__pow5mult+0x66>
   bbf22:	f240 2171 	movw	r1, #625	; 0x271
   bbf26:	4630      	mov	r0, r6
   bbf28:	f7ff ff12 	bl	bbd50 <__i2b>
   bbf2c:	2300      	movs	r3, #0
   bbf2e:	f8c8 0008 	str.w	r0, [r8, #8]
   bbf32:	4604      	mov	r4, r0
   bbf34:	6003      	str	r3, [r0, #0]
   bbf36:	f04f 0900 	mov.w	r9, #0
   bbf3a:	07eb      	lsls	r3, r5, #31
   bbf3c:	d50a      	bpl.n	bbf54 <__pow5mult+0x84>
   bbf3e:	4639      	mov	r1, r7
   bbf40:	4622      	mov	r2, r4
   bbf42:	4630      	mov	r0, r6
   bbf44:	f7ff ff1a 	bl	bbd7c <__multiply>
   bbf48:	4639      	mov	r1, r7
   bbf4a:	4680      	mov	r8, r0
   bbf4c:	4630      	mov	r0, r6
   bbf4e:	f7ff fdfd 	bl	bbb4c <_Bfree>
   bbf52:	4647      	mov	r7, r8
   bbf54:	106d      	asrs	r5, r5, #1
   bbf56:	d00b      	beq.n	bbf70 <__pow5mult+0xa0>
   bbf58:	6820      	ldr	r0, [r4, #0]
   bbf5a:	b938      	cbnz	r0, bbf6c <__pow5mult+0x9c>
   bbf5c:	4622      	mov	r2, r4
   bbf5e:	4621      	mov	r1, r4
   bbf60:	4630      	mov	r0, r6
   bbf62:	f7ff ff0b 	bl	bbd7c <__multiply>
   bbf66:	6020      	str	r0, [r4, #0]
   bbf68:	f8c0 9000 	str.w	r9, [r0]
   bbf6c:	4604      	mov	r4, r0
   bbf6e:	e7e4      	b.n	bbf3a <__pow5mult+0x6a>
   bbf70:	4638      	mov	r0, r7
   bbf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbf76:	bf00      	nop
   bbf78:	000bd210 	.word	0x000bd210
   bbf7c:	000bcdfe 	.word	0x000bcdfe
   bbf80:	000bd09c 	.word	0x000bd09c

000bbf84 <__lshift>:
   bbf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbf88:	460c      	mov	r4, r1
   bbf8a:	6849      	ldr	r1, [r1, #4]
   bbf8c:	6923      	ldr	r3, [r4, #16]
   bbf8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bbf92:	68a3      	ldr	r3, [r4, #8]
   bbf94:	4607      	mov	r7, r0
   bbf96:	4691      	mov	r9, r2
   bbf98:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bbf9c:	f108 0601 	add.w	r6, r8, #1
   bbfa0:	42b3      	cmp	r3, r6
   bbfa2:	db0b      	blt.n	bbfbc <__lshift+0x38>
   bbfa4:	4638      	mov	r0, r7
   bbfa6:	f7ff fd91 	bl	bbacc <_Balloc>
   bbfaa:	4605      	mov	r5, r0
   bbfac:	b948      	cbnz	r0, bbfc2 <__lshift+0x3e>
   bbfae:	4602      	mov	r2, r0
   bbfb0:	4b2a      	ldr	r3, [pc, #168]	; (bc05c <__lshift+0xd8>)
   bbfb2:	482b      	ldr	r0, [pc, #172]	; (bc060 <__lshift+0xdc>)
   bbfb4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bbfb8:	f7fa fe54 	bl	b6c64 <__assert_func>
   bbfbc:	3101      	adds	r1, #1
   bbfbe:	005b      	lsls	r3, r3, #1
   bbfc0:	e7ee      	b.n	bbfa0 <__lshift+0x1c>
   bbfc2:	2300      	movs	r3, #0
   bbfc4:	f100 0114 	add.w	r1, r0, #20
   bbfc8:	f100 0210 	add.w	r2, r0, #16
   bbfcc:	4618      	mov	r0, r3
   bbfce:	4553      	cmp	r3, sl
   bbfd0:	db37      	blt.n	bc042 <__lshift+0xbe>
   bbfd2:	6920      	ldr	r0, [r4, #16]
   bbfd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bbfd8:	f104 0314 	add.w	r3, r4, #20
   bbfdc:	f019 091f 	ands.w	r9, r9, #31
   bbfe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bbfe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bbfe8:	d02f      	beq.n	bc04a <__lshift+0xc6>
   bbfea:	f1c9 0e20 	rsb	lr, r9, #32
   bbfee:	468a      	mov	sl, r1
   bbff0:	f04f 0c00 	mov.w	ip, #0
   bbff4:	681a      	ldr	r2, [r3, #0]
   bbff6:	fa02 f209 	lsl.w	r2, r2, r9
   bbffa:	ea42 020c 	orr.w	r2, r2, ip
   bbffe:	f84a 2b04 	str.w	r2, [sl], #4
   bc002:	f853 2b04 	ldr.w	r2, [r3], #4
   bc006:	4298      	cmp	r0, r3
   bc008:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc00c:	d8f2      	bhi.n	bbff4 <__lshift+0x70>
   bc00e:	1b03      	subs	r3, r0, r4
   bc010:	3b15      	subs	r3, #21
   bc012:	f023 0303 	bic.w	r3, r3, #3
   bc016:	3304      	adds	r3, #4
   bc018:	f104 0215 	add.w	r2, r4, #21
   bc01c:	4290      	cmp	r0, r2
   bc01e:	bf38      	it	cc
   bc020:	2304      	movcc	r3, #4
   bc022:	f841 c003 	str.w	ip, [r1, r3]
   bc026:	f1bc 0f00 	cmp.w	ip, #0
   bc02a:	d001      	beq.n	bc030 <__lshift+0xac>
   bc02c:	f108 0602 	add.w	r6, r8, #2
   bc030:	3e01      	subs	r6, #1
   bc032:	4638      	mov	r0, r7
   bc034:	612e      	str	r6, [r5, #16]
   bc036:	4621      	mov	r1, r4
   bc038:	f7ff fd88 	bl	bbb4c <_Bfree>
   bc03c:	4628      	mov	r0, r5
   bc03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc042:	f842 0f04 	str.w	r0, [r2, #4]!
   bc046:	3301      	adds	r3, #1
   bc048:	e7c1      	b.n	bbfce <__lshift+0x4a>
   bc04a:	3904      	subs	r1, #4
   bc04c:	f853 2b04 	ldr.w	r2, [r3], #4
   bc050:	f841 2f04 	str.w	r2, [r1, #4]!
   bc054:	4298      	cmp	r0, r3
   bc056:	d8f9      	bhi.n	bc04c <__lshift+0xc8>
   bc058:	e7ea      	b.n	bc030 <__lshift+0xac>
   bc05a:	bf00      	nop
   bc05c:	000bcff1 	.word	0x000bcff1
   bc060:	000bd09c 	.word	0x000bd09c

000bc064 <__mcmp>:
   bc064:	b530      	push	{r4, r5, lr}
   bc066:	6902      	ldr	r2, [r0, #16]
   bc068:	690c      	ldr	r4, [r1, #16]
   bc06a:	1b12      	subs	r2, r2, r4
   bc06c:	d10e      	bne.n	bc08c <__mcmp+0x28>
   bc06e:	f100 0314 	add.w	r3, r0, #20
   bc072:	3114      	adds	r1, #20
   bc074:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bc078:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bc07c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bc080:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bc084:	42a5      	cmp	r5, r4
   bc086:	d003      	beq.n	bc090 <__mcmp+0x2c>
   bc088:	d305      	bcc.n	bc096 <__mcmp+0x32>
   bc08a:	2201      	movs	r2, #1
   bc08c:	4610      	mov	r0, r2
   bc08e:	bd30      	pop	{r4, r5, pc}
   bc090:	4283      	cmp	r3, r0
   bc092:	d3f3      	bcc.n	bc07c <__mcmp+0x18>
   bc094:	e7fa      	b.n	bc08c <__mcmp+0x28>
   bc096:	f04f 32ff 	mov.w	r2, #4294967295
   bc09a:	e7f7      	b.n	bc08c <__mcmp+0x28>

000bc09c <__mdiff>:
   bc09c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc0a0:	460c      	mov	r4, r1
   bc0a2:	4606      	mov	r6, r0
   bc0a4:	4611      	mov	r1, r2
   bc0a6:	4620      	mov	r0, r4
   bc0a8:	4690      	mov	r8, r2
   bc0aa:	f7ff ffdb 	bl	bc064 <__mcmp>
   bc0ae:	1e05      	subs	r5, r0, #0
   bc0b0:	d110      	bne.n	bc0d4 <__mdiff+0x38>
   bc0b2:	4629      	mov	r1, r5
   bc0b4:	4630      	mov	r0, r6
   bc0b6:	f7ff fd09 	bl	bbacc <_Balloc>
   bc0ba:	b930      	cbnz	r0, bc0ca <__mdiff+0x2e>
   bc0bc:	4b3a      	ldr	r3, [pc, #232]	; (bc1a8 <__mdiff+0x10c>)
   bc0be:	4602      	mov	r2, r0
   bc0c0:	f240 2132 	movw	r1, #562	; 0x232
   bc0c4:	4839      	ldr	r0, [pc, #228]	; (bc1ac <__mdiff+0x110>)
   bc0c6:	f7fa fdcd 	bl	b6c64 <__assert_func>
   bc0ca:	2301      	movs	r3, #1
   bc0cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc0d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc0d4:	bfa4      	itt	ge
   bc0d6:	4643      	movge	r3, r8
   bc0d8:	46a0      	movge	r8, r4
   bc0da:	4630      	mov	r0, r6
   bc0dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc0e0:	bfa6      	itte	ge
   bc0e2:	461c      	movge	r4, r3
   bc0e4:	2500      	movge	r5, #0
   bc0e6:	2501      	movlt	r5, #1
   bc0e8:	f7ff fcf0 	bl	bbacc <_Balloc>
   bc0ec:	b920      	cbnz	r0, bc0f8 <__mdiff+0x5c>
   bc0ee:	4b2e      	ldr	r3, [pc, #184]	; (bc1a8 <__mdiff+0x10c>)
   bc0f0:	4602      	mov	r2, r0
   bc0f2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc0f6:	e7e5      	b.n	bc0c4 <__mdiff+0x28>
   bc0f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc0fc:	6926      	ldr	r6, [r4, #16]
   bc0fe:	60c5      	str	r5, [r0, #12]
   bc100:	f104 0914 	add.w	r9, r4, #20
   bc104:	f108 0514 	add.w	r5, r8, #20
   bc108:	f100 0e14 	add.w	lr, r0, #20
   bc10c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc110:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc114:	f108 0210 	add.w	r2, r8, #16
   bc118:	46f2      	mov	sl, lr
   bc11a:	2100      	movs	r1, #0
   bc11c:	f859 3b04 	ldr.w	r3, [r9], #4
   bc120:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc124:	fa1f f883 	uxth.w	r8, r3
   bc128:	fa11 f18b 	uxtah	r1, r1, fp
   bc12c:	0c1b      	lsrs	r3, r3, #16
   bc12e:	eba1 0808 	sub.w	r8, r1, r8
   bc132:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc136:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc13a:	fa1f f888 	uxth.w	r8, r8
   bc13e:	1419      	asrs	r1, r3, #16
   bc140:	454e      	cmp	r6, r9
   bc142:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc146:	f84a 3b04 	str.w	r3, [sl], #4
   bc14a:	d8e7      	bhi.n	bc11c <__mdiff+0x80>
   bc14c:	1b33      	subs	r3, r6, r4
   bc14e:	3b15      	subs	r3, #21
   bc150:	f023 0303 	bic.w	r3, r3, #3
   bc154:	3304      	adds	r3, #4
   bc156:	3415      	adds	r4, #21
   bc158:	42a6      	cmp	r6, r4
   bc15a:	bf38      	it	cc
   bc15c:	2304      	movcc	r3, #4
   bc15e:	441d      	add	r5, r3
   bc160:	4473      	add	r3, lr
   bc162:	469e      	mov	lr, r3
   bc164:	462e      	mov	r6, r5
   bc166:	4566      	cmp	r6, ip
   bc168:	d30e      	bcc.n	bc188 <__mdiff+0xec>
   bc16a:	f10c 0203 	add.w	r2, ip, #3
   bc16e:	1b52      	subs	r2, r2, r5
   bc170:	f022 0203 	bic.w	r2, r2, #3
   bc174:	3d03      	subs	r5, #3
   bc176:	45ac      	cmp	ip, r5
   bc178:	bf38      	it	cc
   bc17a:	2200      	movcc	r2, #0
   bc17c:	441a      	add	r2, r3
   bc17e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc182:	b17b      	cbz	r3, bc1a4 <__mdiff+0x108>
   bc184:	6107      	str	r7, [r0, #16]
   bc186:	e7a3      	b.n	bc0d0 <__mdiff+0x34>
   bc188:	f856 8b04 	ldr.w	r8, [r6], #4
   bc18c:	fa11 f288 	uxtah	r2, r1, r8
   bc190:	1414      	asrs	r4, r2, #16
   bc192:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc196:	b292      	uxth	r2, r2
   bc198:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc19c:	f84e 2b04 	str.w	r2, [lr], #4
   bc1a0:	1421      	asrs	r1, r4, #16
   bc1a2:	e7e0      	b.n	bc166 <__mdiff+0xca>
   bc1a4:	3f01      	subs	r7, #1
   bc1a6:	e7ea      	b.n	bc17e <__mdiff+0xe2>
   bc1a8:	000bcff1 	.word	0x000bcff1
   bc1ac:	000bd09c 	.word	0x000bd09c

000bc1b0 <__ulp>:
   bc1b0:	b082      	sub	sp, #8
   bc1b2:	ed8d 0b00 	vstr	d0, [sp]
   bc1b6:	9b01      	ldr	r3, [sp, #4]
   bc1b8:	4912      	ldr	r1, [pc, #72]	; (bc204 <__ulp+0x54>)
   bc1ba:	4019      	ands	r1, r3
   bc1bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc1c0:	2900      	cmp	r1, #0
   bc1c2:	dd05      	ble.n	bc1d0 <__ulp+0x20>
   bc1c4:	2200      	movs	r2, #0
   bc1c6:	460b      	mov	r3, r1
   bc1c8:	ec43 2b10 	vmov	d0, r2, r3
   bc1cc:	b002      	add	sp, #8
   bc1ce:	4770      	bx	lr
   bc1d0:	4249      	negs	r1, r1
   bc1d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc1d6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc1da:	f04f 0200 	mov.w	r2, #0
   bc1de:	f04f 0300 	mov.w	r3, #0
   bc1e2:	da04      	bge.n	bc1ee <__ulp+0x3e>
   bc1e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc1e8:	fa41 f300 	asr.w	r3, r1, r0
   bc1ec:	e7ec      	b.n	bc1c8 <__ulp+0x18>
   bc1ee:	f1a0 0114 	sub.w	r1, r0, #20
   bc1f2:	291e      	cmp	r1, #30
   bc1f4:	bfda      	itte	le
   bc1f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc1fa:	fa20 f101 	lsrle.w	r1, r0, r1
   bc1fe:	2101      	movgt	r1, #1
   bc200:	460a      	mov	r2, r1
   bc202:	e7e1      	b.n	bc1c8 <__ulp+0x18>
   bc204:	7ff00000 	.word	0x7ff00000

000bc208 <__b2d>:
   bc208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc20a:	6905      	ldr	r5, [r0, #16]
   bc20c:	f100 0714 	add.w	r7, r0, #20
   bc210:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc214:	1f2e      	subs	r6, r5, #4
   bc216:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc21a:	4620      	mov	r0, r4
   bc21c:	f7ff fd48 	bl	bbcb0 <__hi0bits>
   bc220:	f1c0 0320 	rsb	r3, r0, #32
   bc224:	280a      	cmp	r0, #10
   bc226:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc2a4 <__b2d+0x9c>
   bc22a:	600b      	str	r3, [r1, #0]
   bc22c:	dc14      	bgt.n	bc258 <__b2d+0x50>
   bc22e:	f1c0 0e0b 	rsb	lr, r0, #11
   bc232:	fa24 f10e 	lsr.w	r1, r4, lr
   bc236:	42b7      	cmp	r7, r6
   bc238:	ea41 030c 	orr.w	r3, r1, ip
   bc23c:	bf34      	ite	cc
   bc23e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc242:	2100      	movcs	r1, #0
   bc244:	3015      	adds	r0, #21
   bc246:	fa04 f000 	lsl.w	r0, r4, r0
   bc24a:	fa21 f10e 	lsr.w	r1, r1, lr
   bc24e:	ea40 0201 	orr.w	r2, r0, r1
   bc252:	ec43 2b10 	vmov	d0, r2, r3
   bc256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc258:	42b7      	cmp	r7, r6
   bc25a:	bf3a      	itte	cc
   bc25c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc260:	f1a5 0608 	subcc.w	r6, r5, #8
   bc264:	2100      	movcs	r1, #0
   bc266:	380b      	subs	r0, #11
   bc268:	d017      	beq.n	bc29a <__b2d+0x92>
   bc26a:	f1c0 0c20 	rsb	ip, r0, #32
   bc26e:	fa04 f500 	lsl.w	r5, r4, r0
   bc272:	42be      	cmp	r6, r7
   bc274:	fa21 f40c 	lsr.w	r4, r1, ip
   bc278:	ea45 0504 	orr.w	r5, r5, r4
   bc27c:	bf8c      	ite	hi
   bc27e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc282:	2400      	movls	r4, #0
   bc284:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc288:	fa01 f000 	lsl.w	r0, r1, r0
   bc28c:	fa24 f40c 	lsr.w	r4, r4, ip
   bc290:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc294:	ea40 0204 	orr.w	r2, r0, r4
   bc298:	e7db      	b.n	bc252 <__b2d+0x4a>
   bc29a:	ea44 030c 	orr.w	r3, r4, ip
   bc29e:	460a      	mov	r2, r1
   bc2a0:	e7d7      	b.n	bc252 <__b2d+0x4a>
   bc2a2:	bf00      	nop
   bc2a4:	3ff00000 	.word	0x3ff00000

000bc2a8 <__d2b>:
   bc2a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc2ac:	4689      	mov	r9, r1
   bc2ae:	2101      	movs	r1, #1
   bc2b0:	ec57 6b10 	vmov	r6, r7, d0
   bc2b4:	4690      	mov	r8, r2
   bc2b6:	f7ff fc09 	bl	bbacc <_Balloc>
   bc2ba:	4604      	mov	r4, r0
   bc2bc:	b930      	cbnz	r0, bc2cc <__d2b+0x24>
   bc2be:	4602      	mov	r2, r0
   bc2c0:	4b25      	ldr	r3, [pc, #148]	; (bc358 <__d2b+0xb0>)
   bc2c2:	4826      	ldr	r0, [pc, #152]	; (bc35c <__d2b+0xb4>)
   bc2c4:	f240 310a 	movw	r1, #778	; 0x30a
   bc2c8:	f7fa fccc 	bl	b6c64 <__assert_func>
   bc2cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc2d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc2d4:	bb35      	cbnz	r5, bc324 <__d2b+0x7c>
   bc2d6:	2e00      	cmp	r6, #0
   bc2d8:	9301      	str	r3, [sp, #4]
   bc2da:	d028      	beq.n	bc32e <__d2b+0x86>
   bc2dc:	4668      	mov	r0, sp
   bc2de:	9600      	str	r6, [sp, #0]
   bc2e0:	f7ff fd06 	bl	bbcf0 <__lo0bits>
   bc2e4:	9900      	ldr	r1, [sp, #0]
   bc2e6:	b300      	cbz	r0, bc32a <__d2b+0x82>
   bc2e8:	9a01      	ldr	r2, [sp, #4]
   bc2ea:	f1c0 0320 	rsb	r3, r0, #32
   bc2ee:	fa02 f303 	lsl.w	r3, r2, r3
   bc2f2:	430b      	orrs	r3, r1
   bc2f4:	40c2      	lsrs	r2, r0
   bc2f6:	6163      	str	r3, [r4, #20]
   bc2f8:	9201      	str	r2, [sp, #4]
   bc2fa:	9b01      	ldr	r3, [sp, #4]
   bc2fc:	61a3      	str	r3, [r4, #24]
   bc2fe:	2b00      	cmp	r3, #0
   bc300:	bf14      	ite	ne
   bc302:	2202      	movne	r2, #2
   bc304:	2201      	moveq	r2, #1
   bc306:	6122      	str	r2, [r4, #16]
   bc308:	b1d5      	cbz	r5, bc340 <__d2b+0x98>
   bc30a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc30e:	4405      	add	r5, r0
   bc310:	f8c9 5000 	str.w	r5, [r9]
   bc314:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc318:	f8c8 0000 	str.w	r0, [r8]
   bc31c:	4620      	mov	r0, r4
   bc31e:	b003      	add	sp, #12
   bc320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc328:	e7d5      	b.n	bc2d6 <__d2b+0x2e>
   bc32a:	6161      	str	r1, [r4, #20]
   bc32c:	e7e5      	b.n	bc2fa <__d2b+0x52>
   bc32e:	a801      	add	r0, sp, #4
   bc330:	f7ff fcde 	bl	bbcf0 <__lo0bits>
   bc334:	9b01      	ldr	r3, [sp, #4]
   bc336:	6163      	str	r3, [r4, #20]
   bc338:	2201      	movs	r2, #1
   bc33a:	6122      	str	r2, [r4, #16]
   bc33c:	3020      	adds	r0, #32
   bc33e:	e7e3      	b.n	bc308 <__d2b+0x60>
   bc340:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc344:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc348:	f8c9 0000 	str.w	r0, [r9]
   bc34c:	6918      	ldr	r0, [r3, #16]
   bc34e:	f7ff fcaf 	bl	bbcb0 <__hi0bits>
   bc352:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc356:	e7df      	b.n	bc318 <__d2b+0x70>
   bc358:	000bcff1 	.word	0x000bcff1
   bc35c:	000bd09c 	.word	0x000bd09c

000bc360 <__ratio>:
   bc360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc364:	4688      	mov	r8, r1
   bc366:	4669      	mov	r1, sp
   bc368:	4681      	mov	r9, r0
   bc36a:	f7ff ff4d 	bl	bc208 <__b2d>
   bc36e:	a901      	add	r1, sp, #4
   bc370:	4640      	mov	r0, r8
   bc372:	ec55 4b10 	vmov	r4, r5, d0
   bc376:	f7ff ff47 	bl	bc208 <__b2d>
   bc37a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc37e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc382:	eba3 0c02 	sub.w	ip, r3, r2
   bc386:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc38a:	1a9b      	subs	r3, r3, r2
   bc38c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc390:	ec51 0b10 	vmov	r0, r1, d0
   bc394:	2b00      	cmp	r3, #0
   bc396:	bfd6      	itet	le
   bc398:	460a      	movle	r2, r1
   bc39a:	462a      	movgt	r2, r5
   bc39c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc3a0:	468b      	mov	fp, r1
   bc3a2:	462f      	mov	r7, r5
   bc3a4:	bfd4      	ite	le
   bc3a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc3aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc3ae:	4620      	mov	r0, r4
   bc3b0:	ee10 2a10 	vmov	r2, s0
   bc3b4:	465b      	mov	r3, fp
   bc3b6:	4639      	mov	r1, r7
   bc3b8:	f7f8 f918 	bl	b45ec <__aeabi_ddiv>
   bc3bc:	ec41 0b10 	vmov	d0, r0, r1
   bc3c0:	b003      	add	sp, #12
   bc3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc3c6 <__copybits>:
   bc3c6:	3901      	subs	r1, #1
   bc3c8:	b570      	push	{r4, r5, r6, lr}
   bc3ca:	1149      	asrs	r1, r1, #5
   bc3cc:	6914      	ldr	r4, [r2, #16]
   bc3ce:	3101      	adds	r1, #1
   bc3d0:	f102 0314 	add.w	r3, r2, #20
   bc3d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc3d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc3dc:	1f05      	subs	r5, r0, #4
   bc3de:	42a3      	cmp	r3, r4
   bc3e0:	d30c      	bcc.n	bc3fc <__copybits+0x36>
   bc3e2:	1aa3      	subs	r3, r4, r2
   bc3e4:	3b11      	subs	r3, #17
   bc3e6:	f023 0303 	bic.w	r3, r3, #3
   bc3ea:	3211      	adds	r2, #17
   bc3ec:	42a2      	cmp	r2, r4
   bc3ee:	bf88      	it	hi
   bc3f0:	2300      	movhi	r3, #0
   bc3f2:	4418      	add	r0, r3
   bc3f4:	2300      	movs	r3, #0
   bc3f6:	4288      	cmp	r0, r1
   bc3f8:	d305      	bcc.n	bc406 <__copybits+0x40>
   bc3fa:	bd70      	pop	{r4, r5, r6, pc}
   bc3fc:	f853 6b04 	ldr.w	r6, [r3], #4
   bc400:	f845 6f04 	str.w	r6, [r5, #4]!
   bc404:	e7eb      	b.n	bc3de <__copybits+0x18>
   bc406:	f840 3b04 	str.w	r3, [r0], #4
   bc40a:	e7f4      	b.n	bc3f6 <__copybits+0x30>

000bc40c <__any_on>:
   bc40c:	f100 0214 	add.w	r2, r0, #20
   bc410:	6900      	ldr	r0, [r0, #16]
   bc412:	114b      	asrs	r3, r1, #5
   bc414:	4298      	cmp	r0, r3
   bc416:	b510      	push	{r4, lr}
   bc418:	db11      	blt.n	bc43e <__any_on+0x32>
   bc41a:	dd0a      	ble.n	bc432 <__any_on+0x26>
   bc41c:	f011 011f 	ands.w	r1, r1, #31
   bc420:	d007      	beq.n	bc432 <__any_on+0x26>
   bc422:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc426:	fa24 f001 	lsr.w	r0, r4, r1
   bc42a:	fa00 f101 	lsl.w	r1, r0, r1
   bc42e:	428c      	cmp	r4, r1
   bc430:	d10b      	bne.n	bc44a <__any_on+0x3e>
   bc432:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc436:	4293      	cmp	r3, r2
   bc438:	d803      	bhi.n	bc442 <__any_on+0x36>
   bc43a:	2000      	movs	r0, #0
   bc43c:	bd10      	pop	{r4, pc}
   bc43e:	4603      	mov	r3, r0
   bc440:	e7f7      	b.n	bc432 <__any_on+0x26>
   bc442:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc446:	2900      	cmp	r1, #0
   bc448:	d0f5      	beq.n	bc436 <__any_on+0x2a>
   bc44a:	2001      	movs	r0, #1
   bc44c:	e7f6      	b.n	bc43c <__any_on+0x30>

000bc44e <_calloc_r>:
   bc44e:	b513      	push	{r0, r1, r4, lr}
   bc450:	434a      	muls	r2, r1
   bc452:	4611      	mov	r1, r2
   bc454:	9201      	str	r2, [sp, #4]
   bc456:	f7fa fbf5 	bl	b6c44 <_malloc_r>
   bc45a:	4604      	mov	r4, r0
   bc45c:	b118      	cbz	r0, bc466 <_calloc_r+0x18>
   bc45e:	9a01      	ldr	r2, [sp, #4]
   bc460:	2100      	movs	r1, #0
   bc462:	f7fd ffc3 	bl	ba3ec <memset>
   bc466:	4620      	mov	r0, r4
   bc468:	b002      	add	sp, #8
   bc46a:	bd10      	pop	{r4, pc}
   bc46c:	0000      	movs	r0, r0
	...

000bc470 <nan>:
   bc470:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc478 <nan+0x8>
   bc474:	4770      	bx	lr
   bc476:	bf00      	nop
   bc478:	00000000 	.word	0x00000000
   bc47c:	7ff80000 	.word	0x7ff80000

000bc480 <nanf>:
   bc480:	ed9f 0a01 	vldr	s0, [pc, #4]	; bc488 <nanf+0x8>
   bc484:	4770      	bx	lr
   bc486:	bf00      	nop
   bc488:	7fc00000 	.word	0x7fc00000

000bc48c <__ascii_wctomb>:
   bc48c:	b149      	cbz	r1, bc4a2 <__ascii_wctomb+0x16>
   bc48e:	2aff      	cmp	r2, #255	; 0xff
   bc490:	bf85      	ittet	hi
   bc492:	238a      	movhi	r3, #138	; 0x8a
   bc494:	6003      	strhi	r3, [r0, #0]
   bc496:	700a      	strbls	r2, [r1, #0]
   bc498:	f04f 30ff 	movhi.w	r0, #4294967295
   bc49c:	bf98      	it	ls
   bc49e:	2001      	movls	r0, #1
   bc4a0:	4770      	bx	lr
   bc4a2:	4608      	mov	r0, r1
   bc4a4:	4770      	bx	lr

000bc4a6 <link_code_end>:
	...

000bc4a8 <link_const_data_start>:
   bc4a8:	514d0400 	.word	0x514d0400
   bc4ac:	00045454 	.word	0x00045454
   bc4b0:	49514d06 	.word	0x49514d06
   bc4b4:	03706473 	.word	0x03706473
   bc4b8:	00000000 	.word	0x00000000
   bc4bc:	34fb0000 	.word	0x34fb0000
   bc4c0:	00805f9b 	.word	0x00805f9b
   bc4c4:	10008000 	.word	0x10008000
	...

000bc4d0 <dynalib_user>:
   bc4d0:	000b4b15 000b4b51 000b4b79 000b4b7d     .K..QK..yK..}K..
   bc4e0:	00000000 74696157 20676e69 20726f66     ....Waiting for 
   bc4f0:	65696c63 6320746e 656e6e6f 6f697463     client connectio
   bc500:	2e2e2e6e 61707300 6c636b72 746e6569     n....sparkclient
   bc510:	716d005f 52007474 72757465 6176206e     _.mqtt.Return va
   bc520:	3a65756c 0a642520 67724100 42206e6f     lue: %d..Argon B
   bc530:	69746f6f 002e676e 65776f70 65672f72     ooting..power/ge
   bc540:	6c430074 746e6569 73696420 6e6e6f63     t.Client disconn
   bc550:	65746365 202d2064 69797274 7420676e     ected - trying t
   bc560:	6572206f 6e6e6f63 3a746365 6f50000a     o reconnect:..Po
   bc570:	00726577 65776f70 61570072 6e207474     wer.power.Watt n
   bc580:	4400776f 54204b4b 7961646f 32393100     ow.DKK Today.192
   bc590:	3836312e 312e312e 62003230 30353234     .168.1.102.b4250
   bc5a0:	2d343034 62346266 3437342d 32622d36     404-fb4b-4746-b2
   bc5b0:	392d3062 65306633 32313136 00366332     b0-93f0e61122c6.
   bc5c0:	35323462 33303430 3462662d 37342d62     b4250403-fb4b-47
   bc5d0:	622d3634 2d306232 30663339 31313665     46-b2b0-93f0e611
   bc5e0:	36633232 32346200 30343035 62662d32     22c6.b4250402-fb
   bc5f0:	342d6234 2d363437 30623262 6633392d     4b-4746-b2b0-93f
   bc600:	31366530 63323231 34620036 34303532     0e61122c6.b42504
   bc610:	662d3130 2d623462 36343734 6232622d     01-fb4b-4746-b2b
   bc620:	33392d30 36653066 32323131 33003663     0-93f0e61122c6.3
   bc630:	31613166 2d363935 66376565 6232342d     f1a1596-ee7f-42b
   bc640:	34382d64 622d3164 39326131 32386634     d-84d1-b1a294f82
   bc650:	00666365 6f677241 004d506e 69736162     ecf.ArgonPM.basi
   bc660:	74735f63 676e6972 70613a3a 646e6570     c_string::append
   bc670:	22207b00 72616579 22203a22 2c226425     .{ "year": "%d",
   bc680:	6d220020 68746e6f 22203a22 64323025      ."month": "%02d
   bc690:	00202c22 79616422 22203a22 64323025     ", ."day": "%02d
   bc6a0:	00202c22 79616422 6f77745f 22203a22     ", ."day_two": "
   bc6b0:	64323025 00202c22 756f6822 203a2272     %02d", ."hour": 
   bc6c0:	32302522 7d202264 706c6500 65736972     "%02d" }.elprise
   bc6d0:	61620072 5f636973 69727473 3a3a676e     r.basic_string::
   bc6e0:	635f4d5f 74736e6f 74637572 6c756e20     _M_construct nul
   bc6f0:	6f6e206c 61762074 0064696c 5f746567     l not valid.get_
   bc700:	63697270 4e007365 7270206f 73656369     prices.No prices
   bc710:	74657920 6f742000 32302520 25202c64      yet. to %02d, %
   bc720:	00643230 206f7420 202c3432 64323025     02d. to 24, %02d
   bc730:	6f742000 32302520 6f4c0064 72502077     . to %02d.Low Pr
   bc740:	20656369 65746e49 6c617672 76003a73     ice Intervals:.v
   bc750:	6f746365 5f3a3a72 65725f4d 6f6c6c61     ector::_M_reallo
   bc760:	6e695f63 74726573 73654d00 65676173     c_insert.Message
   bc770:	74616420 73692061 2074276e 64616572      data isn't read
   bc780:	65792079 4d002e74 61737365 61206567     y yet..Message a
   bc790:	6d657373 64656c62 7473002e 7300696f     ssembled..stoi.s
   bc7a0:	00666f74 7373654d 20656761 61746144     tof.Message Data
   bc7b0:	63655220 65766965 00002e64               Received...

000bc7bc <_ZTV5Timer>:
	...
   bc7c4:	000b5235 000b5279 000b50a1              5R..yR...P..

000bc7d0 <_ZTVN5spark13EthernetClassE>:
	...
   bc7d8:	000b6cf3 000b6ce9 000b6cdf 000b6cd5     .l...l...l...l..
   bc7e8:	000b6cc9 000b6cbd 000b9719 000b9721     .l...l......!...
   bc7f8:	000b6cb1 000b6ca9 000b6c9f 000b6c95     .l...l...l...l..
   bc808:	000b9751 65737341 6f697472 6961466e     Q...AssertionFai
   bc818:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   bc828:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   bc838:	7265766f 20676e69 76726573 73656369     overing services
   bc848:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   bc858:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   bc868:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   bc878:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   bc888:	00454e4f 72656550 76656420 20656369     ONE.Peer device 
   bc898:	6d207369 69737369 0021676e 6c696146     is missing!.Fail
   bc8a8:	74206465 7061206f 646e6570 65657020     ed to append pee
   bc8b8:	65432072 6172746e 6564206c 65636976     r Central device
   bc8c8:	6f43002e 63656e6e 20646574 43207962     ..Connected by C
   bc8d8:	72746e65 64206c61 63697665 44002e65     entral device..D
   bc8e8:	6f637369 63656e6e 20646574 72207962     isconnected by r
   bc8f8:	746f6d65 65642065 65636976 7544002e     emote device..Du
   bc908:	63696c70 64657461 61686320 74636172     plicated charact
   bc918:	73697265 20636974 6e6e6163 6220746f     eristic cannot b
   bc928:	64612065 2e646564 69614600 2064656c     e added..Failed 
   bc938:	61206f74 6e657070 6f6c2064 206c6163     to append local 
   bc948:	72616863 65746361 74736972 002e6369     characteristic..

000bc958 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc960:	000b7043 000b70a5 000b7179 000b70cf     Cp...p..yq...p..
   bc970:	000b7045                                Ep..

000bc974 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc97c:	000b703f 000b70b3 000b7041 000b70d5     ?p...p..Ap...p..
   bc98c:	000b7065                                ep..

000bc990 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc998:	000b703d 000b70c1 000b7845 000b70db     =p...p..Ex...p..
   bc9a8:	000b7085                                .p..

000bc9ac <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bc9b4 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bc9b4:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bc9c4 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bc9c4:	5f9b34fb 80000080 00001000 00000000     .4._............
   bc9d4:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bc9e4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bc9f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc9fc:	000b8755 000b875b 000b8799 000b8769     U...[.......i...
   bca0c:	000b8757                                W...

000bca10 <_ZTV9IPAddress>:
	...
   bca18:	000b8cb1 000b8ca1 000b8ca3              ............

000bca24 <_ZTV9USBSerial>:
	...
   bca2c:	000b8dc3 000b8e2b 000b8e01 000b82b9     ....+...........
   bca3c:	000b8df3 000b8dc5 000b8dd5 000b8e25     ............%...
   bca4c:	000b8de5 000b8dbd                       ........

000bca54 <_ZTV11USARTSerial>:
	...
   bca5c:	000b8f7d 000b8fe9 000b8fc1 000b82b9     }...............
   bca6c:	000b8f91 000b8fad 000b8f9f 000b8fbb     ................
   bca7c:	000b8f7f 000b8f83                       ........

000bca84 <_ZTV7TwoWire>:
	...
   bca8c:	000b9049 000b9093 000b906b 000b904b     I.......k...K...
   bca9c:	000b9073 000b907b 000b9083 000b908b     s...{...........
   bcaac:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   bcabc:	203d2072 00006425                       r = %d..

000bcac4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcacc:	000b9149 000b916d 000b9657 000b917b     I...m...W...{...
   bcadc:	000b914d                                M...

000bcae0 <_ZTV9TCPClient>:
	...
   bcae8:	000b85e5 000b85fd 000b90c5 000b90df     ................
   bcaf8:	000b94ed 000b9109 000b9363 000b913d     ........c...=...
   bcb08:	000b93f5 000b9235 000b9391 000b95a1     ....5...........
   bcb18:	000b9331 000b913f 000b90f1 000b9181     1...?...........
   bcb28:	000b9215                                ....

000bcb2c <_ZTVN5spark9WiFiClassE>:
	...
   bcb34:	000b96bb 000b96b1 000b96a7 000b965d     ............]...
   bcb44:	000b969b 000b968f 000b9719 000b9721     ............!...
   bcb54:	000b9683 000b967b 000b9671 000b9667     ....{...q...g...
   bcb64:	000b9751                                Q...

000bcb68 <_ZTVN5spark12NetworkClassE>:
	...
   bcb70:	000b96d9 000b96e3 000b96ed 000b96f7     ................
   bcb80:	000b9701 000b970d 000b9719 000b9721     ............!...
   bcb90:	000b9729 000b9735 000b973d 000b9747     )...5...=...G...
   bcba0:	000b9751                                Q...

000bcba4 <_ZSt7nothrow>:
	...

000bcba5 <_ZTSSt19_Sp_make_shared_tag>:
   bcba5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bcbb5:	5f646572 00676174                        red_tag....

000bcbc0 <_ZTISt19_Sp_make_shared_tag>:
   bcbc0:	000bcd0c 000bcba5 20746f6e 756f6e65     ........not enou
   bcbd0:	73206867 65636170 726f6620 726f6620     gh space for for
   bcbe0:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   bcbf0:	7361656c 75732065 74696d62 6c756620     lease submit ful
   bcc00:	7562206c 65722067 74726f70 20746120     l bug report at 
   bcc10:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   bcc20:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   bcc30:	32313000 36353433 00393837 69736162     .0123456789.basi
   bcc40:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   bcc50:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
   bcc60:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
   bcc70:	2d736968 7a69733e 20292865 69687728     his->size() (whi
   bcc80:	69206863 7a252073 62002975 63697361     ch is %zu).basic
   bcc90:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
   bcca0:	00656361 69736162 74735f63 676e6972     ace.basic_string
   bccb0:	61623a3a 5f636973 69727473 6200676e     ::basic_string.b
   bccc0:	63697361 7274735f 3a676e69 6275733a     asic_string::sub
   bccd0:	00727473                                str.

000bccd4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bccd4:	000bcd6c 000bcce0 000bcd90              l...........

000bcce0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bcce0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bccf0:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bcd00:	00000045                                E...

000bcd04 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bcd04:	00000000 000bccd4 000ba125 000ba139     ........%...9...
   bcd14:	000ba2cd 000ba2cd 000ba1a3 000ba0e5     ................
   bcd24:	000ba18b 000ba14d 000ba117              ....M.......

000bcd30 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bcd30:	000bcd6c 000bcd3c 000bccd4              l...<.......

000bcd3c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bcd3c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bcd4c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bcd5c:	456f666e 00000000                       nfoE....

000bcd64 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bcd64:	00000000 000bcd30 000ba1cd 000ba1e1     ....0...........
   bcd74:	000ba2cd 000ba2cd 000ba1a3 000ba0e5     ................
   bcd84:	000ba2a1 000ba22d 000ba1f5              ....-.......

000bcd90 <_ZTISt9type_info>:
   bcd90:	000bcd0c 000bcd98                       ........

000bcd98 <_ZTSSt9type_info>:
   bcd98:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   bcda8:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   bcdb8:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000bcdc5 <day_name.1>:
   bcdc5:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bcdd5:	61536972                                 riSat

000bcdda <mon_name.0>:
   bcdda:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bcdea:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bcdfa:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bce0a:	63757320 64656563 2f006465 2f746e6d      succeeded./mnt/
   bce1a:	6b726f77 63617073 6f772f65 70736b72     workspace/worksp
   bce2a:	2f656361 2d434347 702d3031 6c657069     ace/GCC-10-pipel
   bce3a:	2f656e69 6b6e656a 2d736e69 2d434347     ine/jenkins-GCC-
   bce4a:	702d3031 6c657069 2d656e69 325f3834     10-pipeline-48_2
   bce5a:	31303230 5f343231 36303631 36303831     0201124_16061806
   bce6a:	732f3134 6e2f6372 696c7765 656e2f62     41/src/newlib/ne
   bce7a:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
   bce8a:	6e61722f 00632e64 6900666e 7974696e     /rand.c.nf.inity
   bce9a:	006e6100                                 .an...

000bcea0 <fpi.1>:
   bcea0:	00000035 fffffbce 000003cb 00000001     5...............
   bceb0:	00000000                                ....

000bceb4 <fpinan.0>:
   bceb4:	00000034 fffffbce 000003cb 00000001     4...............
   bcec4:	00000000                                ....

000bcec8 <tinytens>:
   bcec8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bced8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bcee8:	64ac6f43 11680628                       Co.d(.h.

000bcef0 <_ctype_>:
   bcef0:	20202000 20202020 28282020 20282828     .         ((((( 
   bcf00:	20202020 20202020 20202020 20202020                     
   bcf10:	10108820 10101010 10101010 10101010      ...............
   bcf20:	04040410 04040404 10040404 10101010     ................
   bcf30:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bcf40:	01010101 01010101 01010101 10101010     ................
   bcf50:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bcf60:	02020202 02020202 02020202 10101010     ................
   bcf70:	00000020 00000000 00000000 00000000      ...............
	...
   bcff0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bd000:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bd010:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bd020:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bd030:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bd040:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bd050:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bd060:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bd070:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bd080:	78656874 0000632e                       thex.c..

000bd088 <_C_numeric_locale>:
   bd088:	000bc503 000bc56d 2003e314 4f500043     ....m...... C.PO
   bd098:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bd0a8:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bd0b8:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bd0c8:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bd0d8:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bd0e8:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bd0f8:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bd108:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bd118:	00000063 00000000                       c.......

000bd120 <__mprec_bigtens>:
   bd120:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bd130:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bd140:	7f73bf3c 75154fdd                       <.s..O.u

000bd148 <__mprec_tens>:
   bd148:	00000000 3ff00000 00000000 40240000     .......?......$@
   bd158:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bd168:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bd178:	00000000 412e8480 00000000 416312d0     .......A......cA
   bd188:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bd198:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bd1a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bd1b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bd1c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bd1d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bd1e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bd1f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bd208:	79d99db4 44ea7843                       ...yCx.D

000bd210 <p05.0>:
   bd210:	00000005 00000019 0000007d              ........}...

000bd21c <link_const_data_end>:
   bd21c:	000b4f19 	.word	0x000b4f19
   bd220:	000b5ccd 	.word	0x000b5ccd
   bd224:	000b6cfd 	.word	0x000b6cfd
   bd228:	000b6d25 	.word	0x000b6d25
   bd22c:	000b82a9 	.word	0x000b82a9
   bd230:	000b83d9 	.word	0x000b83d9
   bd234:	000b85c9 	.word	0x000b85c9
   bd238:	000b8611 	.word	0x000b8611
   bd23c:	000b96c5 	.word	0x000b96c5
   bd240:	000b9829 	.word	0x000b9829
