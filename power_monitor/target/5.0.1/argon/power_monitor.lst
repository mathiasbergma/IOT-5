
c:/Users/mikeh/vscode-particle/Power_monitor/power_monitor/target/5.0.1/argon/power_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000810c  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc12c  000bc12c  0000c12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001f4  2003e2f0  000bc150  0000e2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000030c  2003e4e8  2003e4e8  0001e4e8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bc344  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc348  000bc348  0001c348  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bc34e  000bc34e  0001c34e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc372  000bc372  0001c372  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0015708e  00000000  00000000  0001c376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015008  00000000  00000000  00173404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004029c  00000000  00000000  0018840c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003080  00000000  00000000  001c86a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bb60  00000000  00000000  001cb728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b370  00000000  00000000  001d7288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004436b  00000000  00000000  002125f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00154786  00000000  00000000  00256963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a6b0  00000000  00000000  003ab0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2uiz>:
   b48f8:	004a      	lsls	r2, r1, #1
   b48fa:	d211      	bcs.n	b4920 <__aeabi_d2uiz+0x28>
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d211      	bcs.n	b4926 <__aeabi_d2uiz+0x2e>
   b4902:	d50d      	bpl.n	b4920 <__aeabi_d2uiz+0x28>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d40e      	bmi.n	b492c <__aeabi_d2uiz+0x34>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	4770      	bx	lr
   b4920:	f04f 0000 	mov.w	r0, #0
   b4924:	4770      	bx	lr
   b4926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492a:	d102      	bne.n	b4932 <__aeabi_d2uiz+0x3a>
   b492c:	f04f 30ff 	mov.w	r0, #4294967295
   b4930:	4770      	bx	lr
   b4932:	f04f 0000 	mov.w	r0, #0
   b4936:	4770      	bx	lr

000b4938 <__aeabi_d2f>:
   b4938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b493c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4940:	bf24      	itt	cs
   b4942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b494a:	d90d      	bls.n	b4968 <__aeabi_d2f+0x30>
   b494c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b495c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4960:	bf08      	it	eq
   b4962:	f020 0001 	biceq.w	r0, r0, #1
   b4966:	4770      	bx	lr
   b4968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b496c:	d121      	bne.n	b49b2 <__aeabi_d2f+0x7a>
   b496e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4972:	bfbc      	itt	lt
   b4974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4978:	4770      	bxlt	lr
   b497a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b497e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4982:	f1c2 0218 	rsb	r2, r2, #24
   b4986:	f1c2 0c20 	rsb	ip, r2, #32
   b498a:	fa10 f30c 	lsls.w	r3, r0, ip
   b498e:	fa20 f002 	lsr.w	r0, r0, r2
   b4992:	bf18      	it	ne
   b4994:	f040 0001 	orrne.w	r0, r0, #1
   b4998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b499c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49a4:	ea40 000c 	orr.w	r0, r0, ip
   b49a8:	fa23 f302 	lsr.w	r3, r3, r2
   b49ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49b0:	e7cc      	b.n	b494c <__aeabi_d2f+0x14>
   b49b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49b6:	d107      	bne.n	b49c8 <__aeabi_d2f+0x90>
   b49b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49bc:	bf1e      	ittt	ne
   b49be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49c6:	4770      	bxne	lr
   b49c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49d4:	4770      	bx	lr
   b49d6:	bf00      	nop

000b49d8 <__aeabi_d2ulz>:
   b49d8:	b5d0      	push	{r4, r6, r7, lr}
   b49da:	4b0c      	ldr	r3, [pc, #48]	; (b4a0c <__aeabi_d2ulz+0x34>)
   b49dc:	2200      	movs	r2, #0
   b49de:	4606      	mov	r6, r0
   b49e0:	460f      	mov	r7, r1
   b49e2:	f7ff fcd9 	bl	b4398 <__aeabi_dmul>
   b49e6:	f7ff ff87 	bl	b48f8 <__aeabi_d2uiz>
   b49ea:	4604      	mov	r4, r0
   b49ec:	f7ff fc5a 	bl	b42a4 <__aeabi_ui2d>
   b49f0:	4b07      	ldr	r3, [pc, #28]	; (b4a10 <__aeabi_d2ulz+0x38>)
   b49f2:	2200      	movs	r2, #0
   b49f4:	f7ff fcd0 	bl	b4398 <__aeabi_dmul>
   b49f8:	4602      	mov	r2, r0
   b49fa:	460b      	mov	r3, r1
   b49fc:	4630      	mov	r0, r6
   b49fe:	4639      	mov	r1, r7
   b4a00:	f7ff fb12 	bl	b4028 <__aeabi_dsub>
   b4a04:	f7ff ff78 	bl	b48f8 <__aeabi_d2uiz>
   b4a08:	4621      	mov	r1, r4
   b4a0a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a0c:	3df00000 	.word	0x3df00000
   b4a10:	41f00000 	.word	0x41f00000
	...

000b4a20 <memchr>:
   b4a20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a24:	2a10      	cmp	r2, #16
   b4a26:	db2b      	blt.n	b4a80 <memchr+0x60>
   b4a28:	f010 0f07 	tst.w	r0, #7
   b4a2c:	d008      	beq.n	b4a40 <memchr+0x20>
   b4a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a32:	3a01      	subs	r2, #1
   b4a34:	428b      	cmp	r3, r1
   b4a36:	d02d      	beq.n	b4a94 <memchr+0x74>
   b4a38:	f010 0f07 	tst.w	r0, #7
   b4a3c:	b342      	cbz	r2, b4a90 <memchr+0x70>
   b4a3e:	d1f6      	bne.n	b4a2e <memchr+0xe>
   b4a40:	b4f0      	push	{r4, r5, r6, r7}
   b4a42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4a46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b4a4a:	f022 0407 	bic.w	r4, r2, #7
   b4a4e:	f07f 0700 	mvns.w	r7, #0
   b4a52:	2300      	movs	r3, #0
   b4a54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4a58:	3c08      	subs	r4, #8
   b4a5a:	ea85 0501 	eor.w	r5, r5, r1
   b4a5e:	ea86 0601 	eor.w	r6, r6, r1
   b4a62:	fa85 f547 	uadd8	r5, r5, r7
   b4a66:	faa3 f587 	sel	r5, r3, r7
   b4a6a:	fa86 f647 	uadd8	r6, r6, r7
   b4a6e:	faa5 f687 	sel	r6, r5, r7
   b4a72:	b98e      	cbnz	r6, b4a98 <memchr+0x78>
   b4a74:	d1ee      	bne.n	b4a54 <memchr+0x34>
   b4a76:	bcf0      	pop	{r4, r5, r6, r7}
   b4a78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a7c:	f002 0207 	and.w	r2, r2, #7
   b4a80:	b132      	cbz	r2, b4a90 <memchr+0x70>
   b4a82:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a86:	3a01      	subs	r2, #1
   b4a88:	ea83 0301 	eor.w	r3, r3, r1
   b4a8c:	b113      	cbz	r3, b4a94 <memchr+0x74>
   b4a8e:	d1f8      	bne.n	b4a82 <memchr+0x62>
   b4a90:	2000      	movs	r0, #0
   b4a92:	4770      	bx	lr
   b4a94:	3801      	subs	r0, #1
   b4a96:	4770      	bx	lr
   b4a98:	2d00      	cmp	r5, #0
   b4a9a:	bf06      	itte	eq
   b4a9c:	4635      	moveq	r5, r6
   b4a9e:	3803      	subeq	r0, #3
   b4aa0:	3807      	subne	r0, #7
   b4aa2:	f015 0f01 	tst.w	r5, #1
   b4aa6:	d107      	bne.n	b4ab8 <memchr+0x98>
   b4aa8:	3001      	adds	r0, #1
   b4aaa:	f415 7f80 	tst.w	r5, #256	; 0x100
   b4aae:	bf02      	ittt	eq
   b4ab0:	3001      	addeq	r0, #1
   b4ab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b4ab6:	3001      	addeq	r0, #1
   b4ab8:	bcf0      	pop	{r4, r5, r6, r7}
   b4aba:	3801      	subs	r0, #1
   b4abc:	4770      	bx	lr
   b4abe:	bf00      	nop

000b4ac0 <strcmp>:
   b4ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ac8:	2a01      	cmp	r2, #1
   b4aca:	bf28      	it	cs
   b4acc:	429a      	cmpcs	r2, r3
   b4ace:	d0f7      	beq.n	b4ac0 <strcmp>
   b4ad0:	1ad0      	subs	r0, r2, r3
   b4ad2:	4770      	bx	lr

000b4ad4 <strlen>:
   b4ad4:	4603      	mov	r3, r0
   b4ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4ada:	2a00      	cmp	r2, #0
   b4adc:	d1fb      	bne.n	b4ad6 <strlen+0x2>
   b4ade:	1a18      	subs	r0, r3, r0
   b4ae0:	3801      	subs	r0, #1
   b4ae2:	4770      	bx	lr

000b4ae4 <__aeabi_d2lz>:
   b4ae4:	b538      	push	{r3, r4, r5, lr}
   b4ae6:	2200      	movs	r2, #0
   b4ae8:	2300      	movs	r3, #0
   b4aea:	4604      	mov	r4, r0
   b4aec:	460d      	mov	r5, r1
   b4aee:	f7ff fec5 	bl	b487c <__aeabi_dcmplt>
   b4af2:	b928      	cbnz	r0, b4b00 <__aeabi_d2lz+0x1c>
   b4af4:	4620      	mov	r0, r4
   b4af6:	4629      	mov	r1, r5
   b4af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4afc:	f7ff bf6c 	b.w	b49d8 <__aeabi_d2ulz>
   b4b00:	4620      	mov	r0, r4
   b4b02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4b06:	f7ff ff67 	bl	b49d8 <__aeabi_d2ulz>
   b4b0a:	4240      	negs	r0, r0
   b4b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b10:	bd38      	pop	{r3, r4, r5, pc}
   b4b12:	bf00      	nop

000b4b14 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b14:	4809      	ldr	r0, [pc, #36]	; (b4b3c <module_user_pre_init+0x28>)
   b4b16:	490a      	ldr	r1, [pc, #40]	; (b4b40 <module_user_pre_init+0x2c>)
   b4b18:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4b1a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b1c:	d005      	beq.n	b4b2a <module_user_pre_init+0x16>
   b4b1e:	4a09      	ldr	r2, [pc, #36]	; (b4b44 <module_user_pre_init+0x30>)
   b4b20:	4282      	cmp	r2, r0
   b4b22:	d002      	beq.n	b4b2a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4b24:	1a12      	subs	r2, r2, r0
   b4b26:	f004 fc29 	bl	b937c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4b2a:	4807      	ldr	r0, [pc, #28]	; (b4b48 <module_user_pre_init+0x34>)
   b4b2c:	4a07      	ldr	r2, [pc, #28]	; (b4b4c <module_user_pre_init+0x38>)
   b4b2e:	2100      	movs	r1, #0
   b4b30:	1a12      	subs	r2, r2, r0
   b4b32:	f004 fc4b 	bl	b93cc <memset>
    return &link_global_data_start;
}
   b4b36:	4801      	ldr	r0, [pc, #4]	; (b4b3c <module_user_pre_init+0x28>)
   b4b38:	bd08      	pop	{r3, pc}
   b4b3a:	bf00      	nop
   b4b3c:	2003e2f0 	.word	0x2003e2f0
   b4b40:	000bc150 	.word	0x000bc150
   b4b44:	2003e4e4 	.word	0x2003e4e4
   b4b48:	2003e4e8 	.word	0x2003e4e8
   b4b4c:	2003e7f4 	.word	0x2003e7f4

000b4b50 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4b50:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b52:	4e07      	ldr	r6, [pc, #28]	; (b4b70 <module_user_init+0x20>)
   b4b54:	4c07      	ldr	r4, [pc, #28]	; (b4b74 <module_user_init+0x24>)
    module_user_init_hook();
   b4b56:	f003 f8b1 	bl	b7cbc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b5a:	1ba4      	subs	r4, r4, r6
   b4b5c:	08a4      	lsrs	r4, r4, #2
   b4b5e:	2500      	movs	r5, #0
   b4b60:	42ac      	cmp	r4, r5
   b4b62:	d100      	bne.n	b4b66 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b64:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b66:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b6a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b6c:	3501      	adds	r5, #1
   b4b6e:	e7f7      	b.n	b4b60 <module_user_init+0x10>
   b4b70:	000bc104 	.word	0x000bc104
   b4b74:	000bc12c 	.word	0x000bc12c

000b4b78 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b78:	f000 b896 	b.w	b4ca8 <setup>

000b4b7c <module_user_loop>:
}

void module_user_loop() {
   b4b7c:	b508      	push	{r3, lr}
    loop();
   b4b7e:	f000 f8ab 	bl	b4cd8 <loop>
    _post_loop();
}
   b4b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b86:	f003 b851 	b.w	b7c2c <_post_loop>

000b4b8a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b8a:	f001 bb41 	b.w	b6210 <malloc>

000b4b8e <_Znaj>:
   b4b8e:	f001 bb3f 	b.w	b6210 <malloc>

000b4b92 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4b92:	f001 bb45 	b.w	b6220 <free>

000b4b96 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b96:	f001 bb43 	b.w	b6220 <free>

000b4b9a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b9a:	7800      	ldrb	r0, [r0, #0]
   b4b9c:	fab0 f080 	clz	r0, r0
   b4ba0:	0940      	lsrs	r0, r0, #5
   b4ba2:	4770      	bx	lr

000b4ba4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ba4:	2301      	movs	r3, #1
   b4ba6:	7003      	strb	r3, [r0, #0]
   b4ba8:	4770      	bx	lr
	...

000b4bac <_Z9ble_setupv>:
*/




void ble_setup(void){
   b4bac:	b570      	push	{r4, r5, r6, lr}
   b4bae:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b4bb0:	f002 f856 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bb4:	2102      	movs	r1, #2
   b4bb6:	f002 f8a4 	bl	b6d02 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4bba:	f002 f851 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bbe:	f002 f899 	bl	b6cf4 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4bc2:	f002 f84d 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bc6:	4a31      	ldr	r2, [pc, #196]	; (b4c8c <_Z9ble_setupv+0xe0>)
   b4bc8:	4c31      	ldr	r4, [pc, #196]	; (b4c90 <_Z9ble_setupv+0xe4>)
   b4bca:	4601      	mov	r1, r0
   b4bcc:	a80b      	add	r0, sp, #44	; 0x2c
   b4bce:	f002 fd8f 	bl	b76f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4bd2:	a80b      	add	r0, sp, #44	; 0x2c
   b4bd4:	f002 f937 	bl	b6e46 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4bd8:	f002 f842 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bdc:	4a2d      	ldr	r2, [pc, #180]	; (b4c94 <_Z9ble_setupv+0xe8>)
   b4bde:	4601      	mov	r1, r0
   b4be0:	a80b      	add	r0, sp, #44	; 0x2c
   b4be2:	f002 fd85 	bl	b76f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4be6:	a80b      	add	r0, sp, #44	; 0x2c
   b4be8:	f002 f92d 	bl	b6e46 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4bec:	f002 f838 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bf0:	4a29      	ldr	r2, [pc, #164]	; (b4c98 <_Z9ble_setupv+0xec>)
   b4bf2:	4601      	mov	r1, r0
   b4bf4:	a80b      	add	r0, sp, #44	; 0x2c
   b4bf6:	f002 fd7b 	bl	b76f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4bfa:	a80b      	add	r0, sp, #44	; 0x2c
   b4bfc:	f002 f923 	bl	b6e46 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b4c00:	f002 f82e 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c04:	4a25      	ldr	r2, [pc, #148]	; (b4c9c <_Z9ble_setupv+0xf0>)
   b4c06:	4601      	mov	r1, r0
   b4c08:	a80b      	add	r0, sp, #44	; 0x2c
   b4c0a:	f002 fd71 	bl	b76f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4c0e:	a80b      	add	r0, sp, #44	; 0x2c
   b4c10:	f002 f919 	bl	b6e46 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b4c14:	a803      	add	r0, sp, #12
   b4c16:	f002 fa4c 	bl	b70b2 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b4c1a:	4b21      	ldr	r3, [pc, #132]	; (b4ca0 <_Z9ble_setupv+0xf4>)
   b4c1c:	a803      	add	r0, sp, #12
   b4c1e:	6819      	ldr	r1, [r3, #0]
   b4c20:	f002 fa5a 	bl	b70d8 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4c26:	ad06      	add	r5, sp, #24
   b4c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4c2a:	ad06      	add	r5, sp, #24
   b4c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c2e:	6826      	ldr	r6, [r4, #0]
   b4c30:	ac0b      	add	r4, sp, #44	; 0x2c
   b4c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c34:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4c36:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c38:	f001 fe14 	bl	b6864 <_ZNK8particle7BleUuid4typeEv>
   b4c3c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4c3e:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c40:	b9dc      	cbnz	r4, b4c7a <_Z9ble_setupv+0xce>
            uint16_t uuid16 = tempUUID.shorted();
   b4c42:	f001 fe2b 	bl	b689c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4c46:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4c48:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4c4c:	2302      	movs	r3, #2
   b4c4e:	f10d 020a 	add.w	r2, sp, #10
   b4c52:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4c54:	a803      	add	r0, sp, #12
   b4c56:	f002 fa21 	bl	b709c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4c5a:	f002 f801 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c5e:	2200      	movs	r2, #0
   b4c60:	a903      	add	r1, sp, #12
   b4c62:	f002 f89c 	bl	b6d9e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4c66:	f003 fbd3 	bl	b8410 <_Z16_fetch_usbserialv>
   b4c6a:	490e      	ldr	r1, [pc, #56]	; (b4ca4 <_Z9ble_setupv+0xf8>)
   b4c6c:	f002 fe87 	bl	b797e <_ZN5Print7printlnEPKc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4c70:	9803      	ldr	r0, [sp, #12]
   b4c72:	f001 fad5 	bl	b6220 <free>
}
   b4c76:	b010      	add	sp, #64	; 0x40
   b4c78:	bd70      	pop	{r4, r5, r6, pc}
   b4c7a:	f001 fe11 	bl	b68a0 <_ZNK8particle7BleUuid8rawBytesEv>
   b4c7e:	2300      	movs	r3, #0
   b4c80:	9300      	str	r3, [sp, #0]
   b4c82:	4602      	mov	r2, r0
   b4c84:	2310      	movs	r3, #16
   b4c86:	2107      	movs	r1, #7
   b4c88:	e7e4      	b.n	b4c54 <_Z9ble_setupv+0xa8>
   b4c8a:	bf00      	nop
   b4c8c:	2003e4f8 	.word	0x2003e4f8
   b4c90:	2003e51c 	.word	0x2003e51c
   b4c94:	2003e4e8 	.word	0x2003e4e8
   b4c98:	2003e4f0 	.word	0x2003e4f0
   b4c9c:	2003e500 	.word	0x2003e500
   b4ca0:	2003e2fc 	.word	0x2003e2fc
   b4ca4:	000bb4b4 	.word	0x000bb4b4

000b4ca8 <setup>:

SYSTEM_THREAD(ENABLED);

// ###################### SETUP #################################
void setup()
{
   b4ca8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4caa:	f001 fa89 	bl	b61c0 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4cae:	b910      	cbnz	r0, b4cb6 <setup+0xe>
            spark_process();
   b4cb0:	f001 fa7e 	bl	b61b0 <spark_process>
        while (_while() && !_condition()) {
   b4cb4:	e7f9      	b.n	b4caa <setup+0x2>
   b4cb6:	f001 fa83 	bl	b61c0 <spark_cloud_flag_connected>
    waitUntil(Particle.connected);

    // Set up pin reading.
    wattSensor.initSensor();
   b4cba:	4805      	ldr	r0, [pc, #20]	; (b4cd0 <setup+0x28>)
   b4cbc:	f000 ffa2 	bl	b5c04 <_ZN6Sensor10initSensorEv>

    // setup BLE
    ble_setup();
   b4cc0:	f7ff ff74 	bl	b4bac <_Z9ble_setupv>
    }
#endif

    // Initiate particle subscriptions & request first price update.
    prices.initSubscriptions();
}
   b4cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    prices.initSubscriptions();
   b4cc8:	4802      	ldr	r0, [pc, #8]	; (b4cd4 <setup+0x2c>)
   b4cca:	f000 bbf1 	b.w	b54b0 <_ZN10PriceClass17initSubscriptionsEv>
   b4cce:	bf00      	nop
   b4cd0:	2003e5d0 	.word	0x2003e5d0
   b4cd4:	2003e570 	.word	0x2003e570

000b4cd8 <loop>:

// ##################### MAIN LOOP ##############################
void loop()
{
   b4cd8:	b500      	push	{lr}
    // Is message ready to be man-handled?
    if (prices.isMessageDataReady())
   b4cda:	481e      	ldr	r0, [pc, #120]	; (b4d54 <loop+0x7c>)
{
   b4cdc:	b0c5      	sub	sp, #276	; 0x114
    if (prices.isMessageDataReady())
   b4cde:	f000 fb91 	bl	b5404 <_ZN10PriceClass18isMessageDataReadyEv>
   b4ce2:	b110      	cbz	r0, b4cea <loop+0x12>
        prices.assembleMessageData();
   b4ce4:	481b      	ldr	r0, [pc, #108]	; (b4d54 <loop+0x7c>)
   b4ce6:	f000 fd2f 	bl	b5748 <_ZN10PriceClass19assembleMessageDataEv>

    // Should we publish on mqtt/thingspeak/display?
    if (prices.pricesUpdated())
   b4cea:	481a      	ldr	r0, [pc, #104]	; (b4d54 <loop+0x7c>)
   b4cec:	f000 fb88 	bl	b5400 <_ZN10PriceClass13pricesUpdatedEv>
   b4cf0:	b168      	cbz	r0, b4d0e <loop+0x36>
    {
        String priceString = prices.getLowPriceIntervals().c_str();
   b4cf2:	4918      	ldr	r1, [pc, #96]	; (b4d54 <loop+0x7c>)
   b4cf4:	a804      	add	r0, sp, #16
   b4cf6:	f000 fc31 	bl	b555c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>
   b4cfa:	9904      	ldr	r1, [sp, #16]
   b4cfc:	4668      	mov	r0, sp
   b4cfe:	f001 fbc7 	bl	b6490 <_ZN6StringC1EPK19__FlashStringHelper>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   b4d02:	a804      	add	r0, sp, #16
   b4d04:	f004 f818 	bl	b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4d08:	4668      	mov	r0, sp
   b4d0a:	f001 fb76 	bl	b63fa <_ZN6StringD1Ev>
    }

    if (wattSensor.checkForNewReading())
   b4d0e:	4812      	ldr	r0, [pc, #72]	; (b4d58 <loop+0x80>)
   b4d10:	f000 ffae 	bl	b5c70 <_ZN6Sensor18checkForNewReadingEv>
   b4d14:	b1b8      	cbz	r0, b4d46 <loop+0x6e>
    {
        // publishPower(wattSensor.getCurrentReading());
        if (BLE.connected())
   b4d16:	f001 ffa3 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d1a:	f001 ffff 	bl	b6d1c <_ZNK8particle14BleLocalDevice9connectedEv>
   b4d1e:	b190      	cbz	r0, b4d46 <loop+0x6e>
        {
            char buffer[255];
            sprintf(buffer, "%d", wattSensor.getCurrentReading());;
   b4d20:	480d      	ldr	r0, [pc, #52]	; (b4d58 <loop+0x80>)
   b4d22:	f000 ffa1 	bl	b5c68 <_ZN6Sensor17getCurrentReadingEv>
   b4d26:	490d      	ldr	r1, [pc, #52]	; (b4d5c <loop+0x84>)
   b4d28:	4602      	mov	r2, r0
   b4d2a:	a804      	add	r0, sp, #16
   b4d2c:	f001 fa88 	bl	b6240 <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4d30:	22ff      	movs	r2, #255	; 0xff
   b4d32:	a904      	add	r1, sp, #16
   b4d34:	480a      	ldr	r0, [pc, #40]	; (b4d60 <loop+0x88>)
   b4d36:	2300      	movs	r3, #0
   b4d38:	f001 fe70 	bl	b6a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            WattCharacteristic.setValue(buffer);
            WhrTodayCharacteristic.setValue("here is some text");
   b4d3c:	4909      	ldr	r1, [pc, #36]	; (b4d64 <loop+0x8c>)
   b4d3e:	480a      	ldr	r0, [pc, #40]	; (b4d68 <loop+0x90>)
   b4d40:	2200      	movs	r2, #0
   b4d42:	f001 fecb 	bl	b6adc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
#ifdef USE_MQTT
    mqttKeepAlive();
#endif

    // Waitasecond...
    delay(1000);
   b4d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b4d4a:	b045      	add	sp, #276	; 0x114
   b4d4c:	f85d eb04 	ldr.w	lr, [sp], #4
    delay(1000);
   b4d50:	f002 bf40 	b.w	b7bd4 <delay>
   b4d54:	2003e570 	.word	0x2003e570
   b4d58:	2003e5d0 	.word	0x2003e5d0
   b4d5c:	000bb4d8 	.word	0x000bb4d8
   b4d60:	2003e4f8 	.word	0x2003e4f8
   b4d64:	000bb4db 	.word	0x000bb4db
   b4d68:	2003e500 	.word	0x2003e500

000b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4d6c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4d6e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4d70:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4d72:	b17c      	cbz	r4, b4d94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4d74:	6863      	ldr	r3, [r4, #4]
   b4d76:	3b01      	subs	r3, #1
   b4d78:	6063      	str	r3, [r4, #4]
   b4d7a:	b95b      	cbnz	r3, b4d94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4d7c:	6823      	ldr	r3, [r4, #0]
   b4d7e:	4620      	mov	r0, r4
   b4d80:	689b      	ldr	r3, [r3, #8]
   b4d82:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d84:	68a3      	ldr	r3, [r4, #8]
   b4d86:	3b01      	subs	r3, #1
   b4d88:	60a3      	str	r3, [r4, #8]
   b4d8a:	b91b      	cbnz	r3, b4d94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4d8c:	6823      	ldr	r3, [r4, #0]
   b4d8e:	4620      	mov	r0, r4
   b4d90:	68db      	ldr	r3, [r3, #12]
   b4d92:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4d94:	4628      	mov	r0, r5
   b4d96:	bd38      	pop	{r3, r4, r5, pc}

000b4d98 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4d98:	b082      	sub	sp, #8
   b4d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4d9c:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b4d9e:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4da0:	9315      	str	r3, [sp, #84]	; 0x54
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4da2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4da4:	e9c0 3300 	strd	r3, r3, [r0]
   b4da8:	4606      	mov	r6, r0
   b4daa:	4694      	mov	ip, r2
   b4dac:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4db0:	ac04      	add	r4, sp, #16
   b4db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4db4:	682b      	ldr	r3, [r5, #0]
   b4db6:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b4db8:	ad1a      	add	r5, sp, #104	; 0x68
   b4dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4dbc:	ac09      	add	r4, sp, #36	; 0x24
   b4dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4dc0:	682b      	ldr	r3, [r5, #0]
   b4dc2:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4dc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4dc6:	9302      	str	r3, [sp, #8]
   b4dc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b4dca:	9301      	str	r3, [sp, #4]
   b4dcc:	ab09      	add	r3, sp, #36	; 0x24
   b4dce:	9300      	str	r3, [sp, #0]
   b4dd0:	4630      	mov	r0, r6
   b4dd2:	ab04      	add	r3, sp, #16
   b4dd4:	4662      	mov	r2, ip
   b4dd6:	4639      	mov	r1, r7
   b4dd8:	f002 fb60 	bl	b749c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4ddc:	4630      	mov	r0, r6
   b4dde:	b00f      	add	sp, #60	; 0x3c
   b4de0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4de4:	b002      	add	sp, #8
   b4de6:	4770      	bx	lr

000b4de8 <_GLOBAL__sub_I_argonName>:
    {
        mqttClient.publish("power", powerString);
    }

#endif
   b4de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4dec:	4b44      	ldr	r3, [pc, #272]	; (b4f00 <_GLOBAL__sub_I_argonName+0x118>)
const BleUuid powermonitorserviceUuid(serviceUuid);
   b4dee:	4c45      	ldr	r4, [pc, #276]	; (b4f04 <_GLOBAL__sub_I_argonName+0x11c>)
const BleUuid wattcharacteristicUuid(watt);
   b4df0:	f8df 9144 	ldr.w	r9, [pc, #324]	; b4f38 <_GLOBAL__sub_I_argonName+0x150>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b4df4:	4f44      	ldr	r7, [pc, #272]	; (b4f08 <_GLOBAL__sub_I_argonName+0x120>)
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b4df6:	f8df b144 	ldr.w	fp, [pc, #324]	; b4f3c <_GLOBAL__sub_I_argonName+0x154>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b4dfa:	f8df a144 	ldr.w	sl, [pc, #324]	; b4f40 <_GLOBAL__sub_I_argonName+0x158>
   b4dfe:	2500      	movs	r5, #0
   b4e00:	701d      	strb	r5, [r3, #0]
const BleUuid powermonitorserviceUuid(serviceUuid);
   b4e02:	4b42      	ldr	r3, [pc, #264]	; (b4f0c <_GLOBAL__sub_I_argonName+0x124>)
   b4e04:	b08d      	sub	sp, #52	; 0x34
   b4e06:	6819      	ldr	r1, [r3, #0]
   b4e08:	4620      	mov	r0, r4
   b4e0a:	f001 fdc9 	bl	b69a0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt);
   b4e0e:	4b40      	ldr	r3, [pc, #256]	; (b4f10 <_GLOBAL__sub_I_argonName+0x128>)
   b4e10:	4648      	mov	r0, r9
   b4e12:	6819      	ldr	r1, [r3, #0]
   b4e14:	f001 fdc4 	bl	b69a0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b4e18:	4b3e      	ldr	r3, [pc, #248]	; (b4f14 <_GLOBAL__sub_I_argonName+0x12c>)
   b4e1a:	4638      	mov	r0, r7
   b4e1c:	6819      	ldr	r1, [r3, #0]
   b4e1e:	f001 fdbf 	bl	b69a0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b4e22:	4b3d      	ldr	r3, [pc, #244]	; (b4f18 <_GLOBAL__sub_I_argonName+0x130>)
   b4e24:	4658      	mov	r0, fp
   b4e26:	6819      	ldr	r1, [r3, #0]
   b4e28:	f001 fdba 	bl	b69a0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b4e2c:	4b3b      	ldr	r3, [pc, #236]	; (b4f1c <_GLOBAL__sub_I_argonName+0x134>)
   b4e2e:	4650      	mov	r0, sl
   b4e30:	6819      	ldr	r1, [r3, #0]
   b4e32:	f001 fdb5 	bl	b69a0 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4e36:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4e3a:	4626      	mov	r6, r4
   b4e3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4e3e:	f04f 0810 	mov.w	r8, #16
   b4e42:	eb0d 0c08 	add.w	ip, sp, r8
   b4e46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4e4a:	6833      	ldr	r3, [r6, #0]
   b4e4c:	f8cc 3000 	str.w	r3, [ip]
   b4e50:	f109 0304 	add.w	r3, r9, #4
   b4e54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4e56:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4e5a:	4642      	mov	r2, r8
   b4e5c:	f8d9 3000 	ldr.w	r3, [r9]
   b4e60:	492f      	ldr	r1, [pc, #188]	; (b4f20 <_GLOBAL__sub_I_argonName+0x138>)
   b4e62:	4830      	ldr	r0, [pc, #192]	; (b4f24 <_GLOBAL__sub_I_argonName+0x13c>)
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4e64:	f8df 90dc 	ldr.w	r9, [pc, #220]	; b4f44 <_GLOBAL__sub_I_argonName+0x15c>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4e68:	f7ff ff96 	bl	b4d98 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4e6c:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4e70:	46a6      	mov	lr, r4
   b4e72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4e76:	eb0d 0c08 	add.w	ip, sp, r8
   b4e7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4e7e:	6833      	ldr	r3, [r6, #0]
   b4e80:	f8cc 3000 	str.w	r3, [ip]
   b4e84:	1d3b      	adds	r3, r7, #4
   b4e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4e88:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4e8c:	4642      	mov	r2, r8
   b4e8e:	683b      	ldr	r3, [r7, #0]
   b4e90:	4825      	ldr	r0, [pc, #148]	; (b4f28 <_GLOBAL__sub_I_argonName+0x140>)
   b4e92:	4649      	mov	r1, r9
   b4e94:	f7ff ff80 	bl	b4d98 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b4e98:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4e9c:	46a4      	mov	ip, r4
   b4e9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4ea2:	eb0d 0708 	add.w	r7, sp, r8
   b4ea6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4ea8:	6833      	ldr	r3, [r6, #0]
   b4eaa:	603b      	str	r3, [r7, #0]
   b4eac:	f10b 0304 	add.w	r3, fp, #4
   b4eb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4eb2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4eb6:	f8db 3000 	ldr.w	r3, [fp]
   b4eba:	481c      	ldr	r0, [pc, #112]	; (b4f2c <_GLOBAL__sub_I_argonName+0x144>)
   b4ebc:	4642      	mov	r2, r8
   b4ebe:	4649      	mov	r1, r9
   b4ec0:	f7ff ff6a 	bl	b4d98 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b4ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4ec6:	eb0d 0708 	add.w	r7, sp, r8
   b4eca:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4ece:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4ed0:	6833      	ldr	r3, [r6, #0]
   b4ed2:	603b      	str	r3, [r7, #0]
   b4ed4:	f10a 0304 	add.w	r3, sl, #4
   b4ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4eda:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4ede:	4649      	mov	r1, r9
   b4ee0:	f8da 3000 	ldr.w	r3, [sl]
   b4ee4:	4812      	ldr	r0, [pc, #72]	; (b4f30 <_GLOBAL__sub_I_argonName+0x148>)
   b4ee6:	4642      	mov	r2, r8
   b4ee8:	f7ff ff56 	bl	b4d98 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
PriceClass prices;
   b4eec:	4811      	ldr	r0, [pc, #68]	; (b4f34 <_GLOBAL__sub_I_argonName+0x14c>)
   b4eee:	f000 f921 	bl	b5134 <_ZN10PriceClassC1Ev>
SYSTEM_THREAD(ENABLED);
   b4ef2:	4629      	mov	r1, r5
   b4ef4:	2001      	movs	r0, #1
   b4ef6:	b00d      	add	sp, #52	; 0x34
   b4ef8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b4efc:	f001 b8c4 	b.w	b6088 <system_thread_set_state>
   b4f00:	2003e56c 	.word	0x2003e56c
   b4f04:	2003e51c 	.word	0x2003e51c
   b4f08:	2003e530 	.word	0x2003e530
   b4f0c:	2003e300 	.word	0x2003e300
   b4f10:	2003e304 	.word	0x2003e304
   b4f14:	2003e2f0 	.word	0x2003e2f0
   b4f18:	2003e2f4 	.word	0x2003e2f4
   b4f1c:	2003e2f8 	.word	0x2003e2f8
   b4f20:	000bb4ed 	.word	0x000bb4ed
   b4f24:	2003e4f8 	.word	0x2003e4f8
   b4f28:	2003e4e8 	.word	0x2003e4e8
   b4f2c:	2003e4f0 	.word	0x2003e4f0
   b4f30:	2003e500 	.word	0x2003e500
   b4f34:	2003e570 	.word	0x2003e570
   b4f38:	2003e508 	.word	0x2003e508
   b4f3c:	2003e558 	.word	0x2003e558
   b4f40:	2003e544 	.word	0x2003e544
   b4f44:	000bb4f6 	.word	0x000bb4f6

000b4f48 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4f48:	6943      	ldr	r3, [r0, #20]
   b4f4a:	b113      	cbz	r3, b4f52 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4f4c:	6983      	ldr	r3, [r0, #24]
   b4f4e:	300c      	adds	r0, #12
   b4f50:	4718      	bx	r3
            callback();
        }
    }
   b4f52:	4770      	bx	lr

000b4f54 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4f54:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4f56:	2100      	movs	r1, #0
   b4f58:	4604      	mov	r4, r0
   b4f5a:	4608      	mov	r0, r1
   b4f5c:	f000 ff64 	bl	b5e28 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4f60:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4f62:	4620      	mov	r0, r4
   b4f64:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4f66:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4f68:	f000 ff76 	bl	b5e58 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4f6c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4f6e:	b10c      	cbz	r4, b4f74 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4f70:	2301      	movs	r3, #1
   b4f72:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4f74:	2100      	movs	r1, #0
   b4f76:	2001      	movs	r0, #1
   b4f78:	f000 ff56 	bl	b5e28 <os_thread_scheduling>
            }
        }
        if (t) {
   b4f7c:	b12c      	cbz	r4, b4f8a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4f7e:	6823      	ldr	r3, [r4, #0]
   b4f80:	4620      	mov	r0, r4
   b4f82:	689b      	ldr	r3, [r3, #8]
   b4f84:	4798      	blx	r3
            t->running = false;
   b4f86:	2300      	movs	r3, #0
   b4f88:	7123      	strb	r3, [r4, #4]
        }
    }
   b4f8a:	b002      	add	sp, #8
   b4f8c:	bd10      	pop	{r4, pc}

000b4f8e <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4f8e:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   b4f90:	6803      	ldr	r3, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
   b4f92:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4f94:	685c      	ldr	r4, [r3, #4]
   b4f96:	689d      	ldr	r5, [r3, #8]
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6812      	ldr	r2, [r2, #0]
   b4f9c:	1066      	asrs	r6, r4, #1
   b4f9e:	eb05 0064 	add.w	r0, r5, r4, asr #1
   b4fa2:	07e4      	lsls	r4, r4, #31
   b4fa4:	bf44      	itt	mi
   b4fa6:	59ac      	ldrmi	r4, [r5, r6]
   b4fa8:	58e3      	ldrmi	r3, [r4, r3]
      }
   b4faa:	bc70      	pop	{r4, r5, r6}
   b4fac:	4718      	bx	r3

000b4fae <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4fae:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4fb0:	6803      	ldr	r3, [r0, #0]
   b4fb2:	685a      	ldr	r2, [r3, #4]
   b4fb4:	6899      	ldr	r1, [r3, #8]
   b4fb6:	681b      	ldr	r3, [r3, #0]
   b4fb8:	1054      	asrs	r4, r2, #1
   b4fba:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4fbe:	07d2      	lsls	r2, r2, #31
   b4fc0:	bf48      	it	mi
   b4fc2:	590a      	ldrmi	r2, [r1, r4]
      }
   b4fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4fc8:	bf48      	it	mi
   b4fca:	58d3      	ldrmi	r3, [r2, r3]
   b4fcc:	4718      	bx	r3

000b4fce <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b4fce:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4fd0:	b538      	push	{r3, r4, r5, lr}
   b4fd2:	4604      	mov	r4, r0
	switch (__op)
   b4fd4:	d102      	bne.n	b4fdc <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4fd6:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4fd8:	6023      	str	r3, [r4, #0]
	}
   b4fda:	e003      	b.n	b4fe4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b4fdc:	2a02      	cmp	r2, #2
   b4fde:	d003      	beq.n	b4fe8 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b4fe0:	2a03      	cmp	r2, #3
   b4fe2:	d00d      	beq.n	b5000 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b4fe4:	2000      	movs	r0, #0
   b4fe6:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4fe8:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4fea:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4fec:	f7ff fdcd 	bl	b4b8a <_Znwj>
   b4ff0:	4603      	mov	r3, r0
   b4ff2:	2800      	cmp	r0, #0
   b4ff4:	d0f0      	beq.n	b4fd8 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b4ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4ffe:	e7eb      	b.n	b4fd8 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5000:	6800      	ldr	r0, [r0, #0]
   b5002:	2800      	cmp	r0, #0
   b5004:	d0ee      	beq.n	b4fe4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b5006:	210c      	movs	r1, #12
   b5008:	f7ff fdc5 	bl	b4b96 <_ZdlPvj>
   b500c:	e7ea      	b.n	b4fe4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b500e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b500e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5010:	b538      	push	{r3, r4, r5, lr}
   b5012:	4604      	mov	r4, r0
	switch (__op)
   b5014:	d102      	bne.n	b501c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5016:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5018:	6023      	str	r3, [r4, #0]
	}
   b501a:	e003      	b.n	b5024 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b501c:	2a02      	cmp	r2, #2
   b501e:	d003      	beq.n	b5028 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b5020:	2a03      	cmp	r2, #3
   b5022:	d00d      	beq.n	b5040 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b5024:	2000      	movs	r0, #0
   b5026:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5028:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b502a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b502c:	f7ff fdad 	bl	b4b8a <_Znwj>
   b5030:	4603      	mov	r3, r0
   b5032:	2800      	cmp	r0, #0
   b5034:	d0f0      	beq.n	b5018 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b5036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b503a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b503e:	e7eb      	b.n	b5018 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5040:	6800      	ldr	r0, [r0, #0]
   b5042:	2800      	cmp	r0, #0
   b5044:	d0ee      	beq.n	b5024 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b5046:	210c      	movs	r1, #12
   b5048:	f7ff fda5 	bl	b4b96 <_ZdlPvj>
   b504c:	e7ea      	b.n	b5024 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b5050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>:
       *  @brief  Append a C string.
       *  @param __s  The C string to append.
       *  @return  Reference to this string.
       */
      basic_string&
      append(const _CharT* __s)
   b5050:	b513      	push	{r0, r1, r4, lr}
   b5052:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b5054:	4608      	mov	r0, r1
   b5056:	9101      	str	r1, [sp, #4]
   b5058:	f7ff fd3c 	bl	b4ad4 <strlen>
	if (this->max_size() - (this->size() - __n1) < __n2)
   b505c:	6863      	ldr	r3, [r4, #4]
   b505e:	9901      	ldr	r1, [sp, #4]
   b5060:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
   b5064:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
   b5068:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   b506c:	333f      	adds	r3, #63	; 0x3f
   b506e:	4298      	cmp	r0, r3
   b5070:	4602      	mov	r2, r0
   b5072:	d902      	bls.n	b507a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x2a>
	  __throw_length_error(__N(__s));
   b5074:	4804      	ldr	r0, [pc, #16]	; (b5088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x38>)
   b5076:	f003 fd6d 	bl	b8b54 <_ZSt20__throw_length_errorPKc>
      {
	__glibcxx_requires_string(__s);
	const size_type __n = traits_type::length(__s);
	_M_check_length(size_type(0), __n, "basic_string::append");
	return _M_append(__s, __n);
   b507a:	4620      	mov	r0, r4
      }
   b507c:	b002      	add	sp, #8
   b507e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _M_append(__s, __n);
   b5082:	f003 bf73 	b.w	b8f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
   b5086:	bf00      	nop
   b5088:	000bb5c1 	.word	0x000bb5c1

000b508c <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b508c:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b508e:	6880      	ldr	r0, [r0, #8]
   b5090:	b130      	cbz	r0, b50a0 <_ZN5Timer4stopEj.isra.0+0x14>
   b5092:	2300      	movs	r3, #0
   b5094:	e9cd 1300 	strd	r1, r3, [sp]
   b5098:	461a      	mov	r2, r3
   b509a:	2102      	movs	r1, #2
   b509c:	f000 fee4 	bl	b5e68 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b50a0:	b003      	add	sp, #12
   b50a2:	f85d fb04 	ldr.w	pc, [sp], #4

000b50a6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b50a6:	b538      	push	{r3, r4, r5, lr}
   b50a8:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b50aa:	b16c      	cbz	r4, b50c8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x22>
	{
	  _M_erase(_S_right(__x));
   b50ac:	68e0      	ldr	r0, [r4, #12]
   b50ae:	f7ff fffa 	bl	b50a6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { _M_dispose(); }
   b50b2:	f104 0014 	add.w	r0, r4, #20
      { return static_cast<_Link_type>(__x->_M_left); }
   b50b6:	68a5      	ldr	r5, [r4, #8]
   b50b8:	f003 fe3e 	bl	b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b50bc:	4620      	mov	r0, r4
   b50be:	212c      	movs	r1, #44	; 0x2c
   b50c0:	f7ff fd69 	bl	b4b96 <_ZdlPvj>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   b50c4:	462c      	mov	r4, r5
      }
   b50c6:	e7f0      	b.n	b50aa <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
	}
    }
   b50c8:	bd38      	pop	{r3, r4, r5, pc}

000b50ca <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b50ca:	b510      	push	{r4, lr}
      if (_M_manager)
   b50cc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b50ce:	4604      	mov	r4, r0
      if (_M_manager)
   b50d0:	b113      	cbz	r3, b50d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b50d2:	2203      	movs	r2, #3
   b50d4:	4601      	mov	r1, r0
   b50d6:	4798      	blx	r3
    }
   b50d8:	4620      	mov	r0, r4
   b50da:	bd10      	pop	{r4, pc}

000b50dc <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b50dc:	b538      	push	{r3, r4, r5, lr}
   b50de:	4b0f      	ldr	r3, [pc, #60]	; (b511c <_ZN5TimerD1Ev+0x40>)
   b50e0:	6003      	str	r3, [r0, #0]
        if (handle) {
   b50e2:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b50e4:	4604      	mov	r4, r0
        if (handle) {
   b50e6:	b19b      	cbz	r3, b5110 <_ZN5TimerD1Ev+0x34>
            stop();
   b50e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b50ec:	f7ff ffce 	bl	b508c <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b50f0:	68a0      	ldr	r0, [r4, #8]
   b50f2:	2100      	movs	r1, #0
   b50f4:	f000 fed8 	bl	b5ea8 <os_timer_set_id>
            while (running) {
   b50f8:	7923      	ldrb	r3, [r4, #4]
   b50fa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b50fe:	b113      	cbz	r3, b5106 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b5100:	f000 fe8a 	bl	b5e18 <os_thread_yield>
            while (running) {
   b5104:	e7f8      	b.n	b50f8 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b5106:	68a0      	ldr	r0, [r4, #8]
   b5108:	4629      	mov	r1, r5
   b510a:	f000 fe9d 	bl	b5e48 <os_timer_destroy>
            handle = nullptr;
   b510e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b5110:	f104 000c 	add.w	r0, r4, #12
   b5114:	f7ff ffd9 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
    }
   b5118:	4620      	mov	r0, r4
   b511a:	bd38      	pop	{r3, r4, r5, pc}
   b511c:	000bb728 	.word	0x000bb728

000b5120 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b5120:	b510      	push	{r4, lr}
   b5122:	4604      	mov	r4, r0
    }
   b5124:	f7ff ffda 	bl	b50dc <_ZN5TimerD1Ev>
   b5128:	4620      	mov	r0, r4
   b512a:	211c      	movs	r1, #28
   b512c:	f7ff fd33 	bl	b4b96 <_ZdlPvj>
   b5130:	4620      	mov	r0, r4
   b5132:	bd10      	pop	{r4, pc}

000b5134 <_ZN10PriceClassC1Ev>:
#define PRICE_INDEX 20
#define MILLISEC_HOUR 3600000
#define MILLISEC_MINUTE 60000

// Constructor
PriceClass::PriceClass()
   b5134:	b5f0      	push	{r4, r5, r6, r7, lr}
	  : _Node_allocator()
   b5136:	1d03      	adds	r3, r0, #4
      _M_header._M_color = _S_red;
   b5138:	2500      	movs	r5, #0
      _M_header._M_left = &_M_header;
   b513a:	e9c0 5302 	strd	r5, r3, [r0, #8]
      _M_node_count = 0;
   b513e:	e9c0 3504 	strd	r3, r5, [r0, #16]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5142:	f100 034c 	add.w	r3, r0, #76	; 0x4c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5146:	e9c0 5507 	strd	r5, r5, [r0, #28]
   b514a:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
   b514e:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
      { _M_string_length = __length; }
   b5152:	e9c0 3511 	strd	r3, r5, [r0, #68]	; 0x44
      _M_header._M_color = _S_red;
   b5156:	7105      	strb	r5, [r0, #4]
    : newPricesReceived{false},
      messageDataReady{false}
   b5158:	8305      	strh	r5, [r0, #24]
      { __c1 = __c2; }
   b515a:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
PriceClass::PriceClass()
   b515e:	b089      	sub	sp, #36	; 0x24
   b5160:	4604      	mov	r4, r0
{
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b5162:	201c      	movs	r0, #28
   b5164:	f7ff fd11 	bl	b4b8a <_Znwj>
   b5168:	4606      	mov	r6, r0
   b516a:	2800      	cmp	r0, #0
   b516c:	d033      	beq.n	b51d6 <_ZN10PriceClassC1Ev+0xa2>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b516e:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5170:	9506      	str	r5, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5172:	f7ff fd0a 	bl	b4b8a <_Znwj>
   b5176:	b118      	cbz	r0, b5180 <_ZN10PriceClassC1Ev+0x4c>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5178:	4b19      	ldr	r3, [pc, #100]	; (b51e0 <_ZN10PriceClassC1Ev+0xac>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b517a:	6084      	str	r4, [r0, #8]
   b517c:	e9c0 3500 	strd	r3, r5, [r0]
   b5180:	9004      	str	r0, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5182:	ad04      	add	r5, sp, #16
   b5184:	e895 0003 	ldmia.w	r5, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5188:	4b16      	ldr	r3, [pc, #88]	; (b51e4 <_ZN10PriceClassC1Ev+0xb0>)
   b518a:	6033      	str	r3, [r6, #0]
   b518c:	2300      	movs	r3, #0
   b518e:	7133      	strb	r3, [r6, #4]
   b5190:	60b3      	str	r3, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5192:	f106 020c 	add.w	r2, r6, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5196:	af02      	add	r7, sp, #8
   b5198:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b519c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b51a0:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b51a4:	e897 0003 	ldmia.w	r7, {r0, r1}
   b51a8:	e882 0003 	stmia.w	r2, {r0, r1}
   b51ac:	4a0e      	ldr	r2, [pc, #56]	; (b51e8 <_ZN10PriceClassC1Ev+0xb4>)
   b51ae:	6172      	str	r2, [r6, #20]
      __a = _GLIBCXX_MOVE(__b);
   b51b0:	69b2      	ldr	r2, [r6, #24]
   b51b2:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b51b4:	4a0d      	ldr	r2, [pc, #52]	; (b51ec <_ZN10PriceClassC1Ev+0xb8>)
   b51b6:	61b2      	str	r2, [r6, #24]
      __a = _GLIBCXX_MOVE(__b);
   b51b8:	9306      	str	r3, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b51ba:	9301      	str	r3, [sp, #4]
   b51bc:	2301      	movs	r3, #1
   b51be:	9300      	str	r3, [sp, #0]
   b51c0:	4a0b      	ldr	r2, [pc, #44]	; (b51f0 <_ZN10PriceClassC1Ev+0xbc>)
   b51c2:	4633      	mov	r3, r6
   b51c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b51c8:	f106 0008 	add.w	r0, r6, #8
   b51cc:	f000 fe34 	bl	b5e38 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b51d0:	4628      	mov	r0, r5
   b51d2:	f7ff ff7a 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
}
   b51d6:	4620      	mov	r0, r4
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b51d8:	65e6      	str	r6, [r4, #92]	; 0x5c
}
   b51da:	b009      	add	sp, #36	; 0x24
   b51dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b51de:	bf00      	nop
   b51e0:	000b5395 	.word	0x000b5395
   b51e4:	000bb728 	.word	0x000bb728
   b51e8:	000b500f 	.word	0x000b500f
   b51ec:	000b4faf 	.word	0x000b4faf
   b51f0:	000b4f55 	.word	0x000b4f55

000b51f4 <_ZN10PriceClass18requestPriceUpdateEi>:
// #####################################################################
/// @brief This method makes a publish request, to fire off the webhook,
// which in turn will fire off the "prices" event, when data is ready.
// #####################################################################
void PriceClass::requestPriceUpdate(int day)
{
   b51f4:	b570      	push	{r4, r5, r6, lr}
   b51f6:	b0a0      	sub	sp, #128	; 0x80
   b51f8:	460c      	mov	r4, r1
   b51fa:	4605      	mov	r5, r0
    String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b51fc:	f002 fcd4 	bl	b7ba8 <_ZN9TimeClass4yearEv>
   b5200:	4940      	ldr	r1, [pc, #256]	; (b5304 <_ZN10PriceClass18requestPriceUpdateEi+0x110>)
   b5202:	4602      	mov	r2, r0
   b5204:	a808      	add	r0, sp, #32
   b5206:	f001 f9b9 	bl	b657c <_ZN6String6formatEPKcz>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b520a:	a908      	add	r1, sp, #32
   b520c:	a810      	add	r0, sp, #64	; 0x40
   b520e:	f001 f962 	bl	b64d6 <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b5212:	f002 fcc1 	bl	b7b98 <_ZN9TimeClass5monthEv>
   b5216:	493c      	ldr	r1, [pc, #240]	; (b5308 <_ZN10PriceClass18requestPriceUpdateEi+0x114>)
   b5218:	4602      	mov	r2, r0
   b521a:	a80c      	add	r0, sp, #48	; 0x30
   b521c:	f001 f9ae 	bl	b657c <_ZN6String6formatEPKcz>
   b5220:	a90c      	add	r1, sp, #48	; 0x30
   b5222:	a810      	add	r0, sp, #64	; 0x40
   b5224:	f001 f99d 	bl	b6562 <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day\": \"%02d\", ", day) +
   b5228:	4622      	mov	r2, r4
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b522a:	4606      	mov	r6, r0
                  String::format("\"day\": \"%02d\", ", day) +
   b522c:	4937      	ldr	r1, [pc, #220]	; (b530c <_ZN10PriceClass18requestPriceUpdateEi+0x118>)
   b522e:	a814      	add	r0, sp, #80	; 0x50
   b5230:	f001 f9a4 	bl	b657c <_ZN6String6formatEPKcz>
   b5234:	a914      	add	r1, sp, #80	; 0x50
   b5236:	4630      	mov	r0, r6
   b5238:	f001 f993 	bl	b6562 <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b523c:	1ca2      	adds	r2, r4, #2
   b523e:	4934      	ldr	r1, [pc, #208]	; (b5310 <_ZN10PriceClass18requestPriceUpdateEi+0x11c>)
                  String::format("\"day\": \"%02d\", ", day) +
   b5240:	4606      	mov	r6, r0
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b5242:	a818      	add	r0, sp, #96	; 0x60
   b5244:	f001 f99a 	bl	b657c <_ZN6String6formatEPKcz>
   b5248:	a918      	add	r1, sp, #96	; 0x60
   b524a:	4630      	mov	r0, r6
   b524c:	f001 f989 	bl	b6562 <_ZplRK15StringSumHelperRK6String>
   b5250:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b5252:	f002 fc7d 	bl	b7b50 <_ZN9TimeClass4hourEv>
   b5256:	492f      	ldr	r1, [pc, #188]	; (b5314 <_ZN10PriceClass18requestPriceUpdateEi+0x120>)
   b5258:	4602      	mov	r2, r0
   b525a:	a81c      	add	r0, sp, #112	; 0x70
   b525c:	f001 f98e 	bl	b657c <_ZN6String6formatEPKcz>
   b5260:	a91c      	add	r1, sp, #112	; 0x70
   b5262:	4620      	mov	r0, r4
   b5264:	f001 f97d 	bl	b6562 <_ZplRK15StringSumHelperRK6String>
   b5268:	4601      	mov	r1, r0
   b526a:	a804      	add	r0, sp, #16
   b526c:	f001 f933 	bl	b64d6 <_ZN6StringC1ERKS_>
   b5270:	a81c      	add	r0, sp, #112	; 0x70
   b5272:	f001 f8c2 	bl	b63fa <_ZN6StringD1Ev>
   b5276:	a818      	add	r0, sp, #96	; 0x60
   b5278:	f001 f8bf 	bl	b63fa <_ZN6StringD1Ev>
   b527c:	a814      	add	r0, sp, #80	; 0x50
   b527e:	f001 f8bc 	bl	b63fa <_ZN6StringD1Ev>
   b5282:	a80c      	add	r0, sp, #48	; 0x30
   b5284:	f001 f8b9 	bl	b63fa <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5288:	a810      	add	r0, sp, #64	; 0x40
   b528a:	f001 f8b6 	bl	b63fa <_ZN6StringD1Ev>
   b528e:	a808      	add	r0, sp, #32
   b5290:	f001 f8b3 	bl	b63fa <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5294:	4b20      	ldr	r3, [pc, #128]	; (b5318 <_ZN10PriceClass18requestPriceUpdateEi+0x124>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5296:	9a04      	ldr	r2, [sp, #16]
   b5298:	781b      	ldrb	r3, [r3, #0]
   b529a:	f88d 3000 	strb.w	r3, [sp]
   b529e:	491f      	ldr	r1, [pc, #124]	; (b531c <_ZN10PriceClass18requestPriceUpdateEi+0x128>)
   b52a0:	233c      	movs	r3, #60	; 0x3c
   b52a2:	a81c      	add	r0, sp, #112	; 0x70
   b52a4:	f002 fe76 	bl	b7f94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b52a8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   b52aa:	b17c      	cbz	r4, b52cc <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
      if (--_M_use_count == 0)
   b52ac:	6863      	ldr	r3, [r4, #4]
   b52ae:	3b01      	subs	r3, #1
   b52b0:	6063      	str	r3, [r4, #4]
   b52b2:	b95b      	cbnz	r3, b52cc <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
          _M_dispose();
   b52b4:	6823      	ldr	r3, [r4, #0]
   b52b6:	4620      	mov	r0, r4
   b52b8:	689b      	ldr	r3, [r3, #8]
   b52ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b52bc:	68a3      	ldr	r3, [r4, #8]
   b52be:	3b01      	subs	r3, #1
   b52c0:	60a3      	str	r3, [r4, #8]
   b52c2:	b91b      	cbnz	r3, b52cc <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
            _M_destroy();
   b52c4:	6823      	ldr	r3, [r4, #0]
   b52c6:	4620      	mov	r0, r4
   b52c8:	68db      	ldr	r3, [r3, #12]
   b52ca:	4798      	blx	r3
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b52cc:	f002 fc2f 	bl	b7b2e <_ZN9TimeClass3nowEv>
   b52d0:	4602      	mov	r2, r0
   b52d2:	17c3      	asrs	r3, r0, #31
   b52d4:	a81c      	add	r0, sp, #112	; 0x70
   b52d6:	f002 fbd1 	bl	b7a7c <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b52da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	return __builtin_strlen(__s);
   b52dc:	9303      	str	r3, [sp, #12]
   b52de:	4618      	mov	r0, r3
   b52e0:	f7ff fbf8 	bl	b4ad4 <strlen>
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
   b52e4:	9b03      	ldr	r3, [sp, #12]
   b52e6:	6caa      	ldr	r2, [r5, #72]	; 0x48
   b52e8:	9000      	str	r0, [sp, #0]
   b52ea:	2100      	movs	r1, #0
   b52ec:	f105 0044 	add.w	r0, r5, #68	; 0x44
   b52f0:	f003 fdbe 	bl	b8e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>

    // Trigger the integration
    Particle.publish("elpriser", data);
    lastUpdate = Time.timeStr();
   b52f4:	a81c      	add	r0, sp, #112	; 0x70
   b52f6:	f001 f880 	bl	b63fa <_ZN6StringD1Ev>
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b52fa:	a804      	add	r0, sp, #16
   b52fc:	f001 f87d 	bl	b63fa <_ZN6StringD1Ev>
}
   b5300:	b020      	add	sp, #128	; 0x80
   b5302:	bd70      	pop	{r4, r5, r6, pc}
   b5304:	000bb5d6 	.word	0x000bb5d6
   b5308:	000bb5e7 	.word	0x000bb5e7
   b530c:	000bb5f9 	.word	0x000bb5f9
   b5310:	000bb609 	.word	0x000bb609
   b5314:	000bb61d 	.word	0x000bb61d
   b5318:	2003e5dc 	.word	0x2003e5dc
   b531c:	000bb62e 	.word	0x000bb62e

000b5320 <_ZN10PriceClass28getpricesSubscriptionHandlerEPKcS1_>:
{
   b5320:	b510      	push	{r4, lr}
   b5322:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b5324:	f002 fc2c 	bl	b7b80 <_ZN9TimeClass3dayEv>
   b5328:	4601      	mov	r1, r0
   b532a:	4620      	mov	r0, r4
}
   b532c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b5330:	f7ff bf60 	b.w	b51f4 <_ZN10PriceClass18requestPriceUpdateEi>

000b5334 <_ZN10PriceClass12updatePricesEv>:

// ####################################################################
/// @brief This is a public method, for requesting an update on prices.
// ####################################################################
void PriceClass::updatePrices()
{
   b5334:	b510      	push	{r4, lr}
   b5336:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b5338:	f002 fc22 	bl	b7b80 <_ZN9TimeClass3dayEv>
   b533c:	4601      	mov	r1, r0
   b533e:	4620      	mov	r0, r4
}
   b5340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b5344:	f7ff bf56 	b.w	b51f4 <_ZN10PriceClass18requestPriceUpdateEi>

000b5348 <_ZN10PriceClass14timedCountDownEj>:

// ##########################################################################
/// @brief Small method for setting the timer period, and starting the timer.
// ##########################################################################
void PriceClass::timedCountDown(uint period)
{
   b5348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b534a:	4604      	mov	r4, r0
   b534c:	9103      	str	r1, [sp, #12]
    updateTimer->stop();
   b534e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b5350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5354:	f7ff fe9a 	bl	b508c <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b5358:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   b535a:	6890      	ldr	r0, [r2, #8]
   b535c:	b140      	cbz	r0, b5370 <_ZN10PriceClass14timedCountDownEj+0x28>
   b535e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5362:	2200      	movs	r2, #0
   b5364:	e9cd 1200 	strd	r1, r2, [sp]
   b5368:	9b03      	ldr	r3, [sp, #12]
   b536a:	2103      	movs	r1, #3
   b536c:	f000 fd7c 	bl	b5e68 <os_timer_change>
    updateTimer->changePeriod(period);
    updateTimer->start();
   b5370:	6de4      	ldr	r4, [r4, #92]	; 0x5c
        stop(fromISR);
   b5372:	2100      	movs	r1, #0
   b5374:	4620      	mov	r0, r4
   b5376:	f7ff fe89 	bl	b508c <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b537a:	68a0      	ldr	r0, [r4, #8]
   b537c:	b140      	cbz	r0, b5390 <_ZN10PriceClass14timedCountDownEj+0x48>
   b537e:	2300      	movs	r3, #0
   b5380:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5384:	e9cd 2300 	strd	r2, r3, [sp]
   b5388:	4619      	mov	r1, r3
   b538a:	461a      	mov	r2, r3
   b538c:	f000 fd6c 	bl	b5e68 <os_timer_change>
}
   b5390:	b004      	add	sp, #16
   b5392:	bd10      	pop	{r4, pc}

000b5394 <_ZN10PriceClass11timedUpdateEv>:
{
   b5394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5396:	4605      	mov	r5, r0
    uint8_t hourNow = Time.hour();
   b5398:	f002 fbda 	bl	b7b50 <_ZN9TimeClass4hourEv>
   b539c:	b2c4      	uxtb	r4, r0
    if (hourNow == 11 || hourNow == 23)
   b539e:	2c0b      	cmp	r4, #11
   b53a0:	d001      	beq.n	b53a6 <_ZN10PriceClass11timedUpdateEv+0x12>
   b53a2:	2c17      	cmp	r4, #23
   b53a4:	d110      	bne.n	b53c8 <_ZN10PriceClass11timedUpdateEv+0x34>
        timerPeriod = (12 * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b53a6:	f002 fbdf 	bl	b7b68 <_ZN9TimeClass6minuteEv>
        timedCountDown(timerPeriod);
   b53aa:	4b12      	ldr	r3, [pc, #72]	; (b53f4 <_ZN10PriceClass11timedUpdateEv+0x60>)
   b53ac:	4912      	ldr	r1, [pc, #72]	; (b53f8 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b53ae:	fb01 3100 	mla	r1, r1, r0, r3
   b53b2:	4628      	mov	r0, r5
   b53b4:	f7ff ffc8 	bl	b5348 <_ZN10PriceClass14timedCountDownEj>
        requestPriceUpdate(Time.day());
   b53b8:	f002 fbe2 	bl	b7b80 <_ZN9TimeClass3dayEv>
   b53bc:	4601      	mov	r1, r0
   b53be:	4628      	mov	r0, r5
}
   b53c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        requestPriceUpdate(Time.day());
   b53c4:	f7ff bf16 	b.w	b51f4 <_ZN10PriceClass18requestPriceUpdateEi>
        if (hourNow < 11)
   b53c8:	2c0a      	cmp	r4, #10
   b53ca:	4f0b      	ldr	r7, [pc, #44]	; (b53f8 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b53cc:	4e0b      	ldr	r6, [pc, #44]	; (b53fc <_ZN10PriceClass11timedUpdateEv+0x68>)
   b53ce:	d80b      	bhi.n	b53e8 <_ZN10PriceClass11timedUpdateEv+0x54>
            timerPeriod = ((11 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b53d0:	f002 fbca 	bl	b7b68 <_ZN9TimeClass6minuteEv>
   b53d4:	f1c4 040b 	rsb	r4, r4, #11
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b53d8:	4378      	muls	r0, r7
            timedCountDown(timerPeriod);
   b53da:	fb06 0104 	mla	r1, r6, r4, r0
   b53de:	4628      	mov	r0, r5
}
   b53e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            timedCountDown(timerPeriod);
   b53e4:	f7ff bfb0 	b.w	b5348 <_ZN10PriceClass14timedCountDownEj>
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b53e8:	f002 fbbe 	bl	b7b68 <_ZN9TimeClass6minuteEv>
   b53ec:	f1c4 0417 	rsb	r4, r4, #23
   b53f0:	e7f2      	b.n	b53d8 <_ZN10PriceClass11timedUpdateEv+0x44>
   b53f2:	bf00      	nop
   b53f4:	02932e00 	.word	0x02932e00
   b53f8:	ffff15a0 	.word	0xffff15a0
   b53fc:	0036ee80 	.word	0x0036ee80

000b5400 <_ZN10PriceClass13pricesUpdatedEv>:
/// @brief Method for checking if new price data has not yet been read.
// ####################################################################
bool PriceClass::pricesUpdated()
{
    return newPricesReceived;
}
   b5400:	7e00      	ldrb	r0, [r0, #24]
   b5402:	4770      	bx	lr

000b5404 <_ZN10PriceClass18isMessageDataReadyEv>:

bool PriceClass::isMessageDataReady()
{
    return messageDataReady;
   b5404:	7e40      	ldrb	r0, [r0, #25]
   b5406:	4770      	bx	lr

000b5408 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5408:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b540a:	2300      	movs	r3, #0
   b540c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b540e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5410:	4604      	mov	r4, r0
   b5412:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5414:	b12b      	cbz	r3, b5422 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5416:	2202      	movs	r2, #2
   b5418:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b541a:	68eb      	ldr	r3, [r5, #12]
   b541c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b541e:	68ab      	ldr	r3, [r5, #8]
   b5420:	60a3      	str	r3, [r4, #8]
    }
   b5422:	4620      	mov	r0, r4
   b5424:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5428 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
   b5428:	b5f0      	push	{r4, r5, r6, r7, lr}
   b542a:	b091      	sub	sp, #68	; 0x44
   b542c:	ad02      	add	r5, sp, #8
   b542e:	e885 0006 	stmia.w	r5, {r1, r2}
   b5432:	4606      	mov	r6, r0
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5434:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5438:	ac05      	add	r4, sp, #20
   b543a:	e884 0005 	stmia.w	r4, {r0, r2}
   b543e:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5440:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5442:	2300      	movs	r3, #0
   b5444:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5446:	f7ff fba0 	bl	b4b8a <_Znwj>
   b544a:	4602      	mov	r2, r0
   b544c:	b120      	cbz	r0, b5458 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x30>
      _Bind(_Bind&&) = default;
   b544e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5452:	e882 0003 	stmia.w	r2, {r0, r1}
   b5456:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b5458:	4b12      	ldr	r3, [pc, #72]	; (b54a4 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x7c>)
   b545a:	930b      	str	r3, [sp, #44]	; 0x2c
        return subscribe_wiring(eventName, handler, scope);
   b545c:	a908      	add	r1, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b545e:	4b12      	ldr	r3, [pc, #72]	; (b54a8 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x80>)
   b5460:	930a      	str	r3, [sp, #40]	; 0x28
   b5462:	a80c      	add	r0, sp, #48	; 0x30
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5464:	9208      	str	r2, [sp, #32]
   b5466:	f7ff ffcf 	bl	b5408 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    static particle::Future<bool> publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags);

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   b546a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b546c:	b18b      	cbz	r3, b5492 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   b546e:	2010      	movs	r0, #16
   b5470:	f7ff fb8b 	bl	b4b8a <_Znwj>
   b5474:	4604      	mov	r4, r0
   b5476:	b160      	cbz	r0, b5492 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
   b5478:	a90c      	add	r1, sp, #48	; 0x30
   b547a:	f7ff ffc5 	bl	b5408 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-function-type"
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   b547e:	2300      	movs	r3, #0
   b5480:	e9cd 3300 	strd	r3, r3, [sp]
   b5484:	4909      	ldr	r1, [pc, #36]	; (b54ac <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x84>)
   b5486:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b548a:	4622      	mov	r2, r4
   b548c:	4630      	mov	r0, r6
   b548e:	f000 fea7 	bl	b61e0 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   b5492:	a80c      	add	r0, sp, #48	; 0x30
   b5494:	f7ff fe19 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
   b5498:	a808      	add	r0, sp, #32
   b549a:	f7ff fe16 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
    }
   b549e:	b011      	add	sp, #68	; 0x44
   b54a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b54a2:	bf00      	nop
   b54a4:	000b4f8f 	.word	0x000b4f8f
   b54a8:	000b4fcf 	.word	0x000b4fcf
   b54ac:	000b7dab 	.word	0x000b7dab

000b54b0 <_ZN10PriceClass17initSubscriptionsEv>:
{
   b54b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b54b2:	b085      	sub	sp, #20
   b54b4:	2700      	movs	r7, #0
    return subscribe(name, handler, ALL_DEVICES);
}

template<typename T>
inline bool CloudClass::subscribe(const char* name, void (T::*handler)(const char*, const char*), T* instance) {
    return subscribe(name, handler, instance, ALL_DEVICES);
   b54b6:	2601      	movs	r6, #1
   b54b8:	4b0f      	ldr	r3, [pc, #60]	; (b54f8 <_ZN10PriceClass17initSubscriptionsEv+0x48>)
   b54ba:	9302      	str	r3, [sp, #8]
   b54bc:	9703      	str	r7, [sp, #12]
   b54be:	9600      	str	r6, [sp, #0]
   b54c0:	ad02      	add	r5, sp, #8
   b54c2:	4604      	mov	r4, r0
   b54c4:	e895 0006 	ldmia.w	r5, {r1, r2}
   b54c8:	4603      	mov	r3, r0
   b54ca:	480c      	ldr	r0, [pc, #48]	; (b54fc <_ZN10PriceClass17initSubscriptionsEv+0x4c>)
   b54cc:	f7ff ffac 	bl	b5428 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    Particle.subscribe("get_prices", &PriceClass::getpricesSubscriptionHandler, this);
   b54d0:	4b0b      	ldr	r3, [pc, #44]	; (b5500 <_ZN10PriceClass17initSubscriptionsEv+0x50>)
   b54d2:	9600      	str	r6, [sp, #0]
   b54d4:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b54d8:	480a      	ldr	r0, [pc, #40]	; (b5504 <_ZN10PriceClass17initSubscriptionsEv+0x54>)
   b54da:	e895 0006 	ldmia.w	r5, {r1, r2}
   b54de:	4623      	mov	r3, r4
   b54e0:	f7ff ffa2 	bl	b5428 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    updatePrices();
   b54e4:	4620      	mov	r0, r4
   b54e6:	f7ff ff25 	bl	b5334 <_ZN10PriceClass12updatePricesEv>
    timedUpdate();
   b54ea:	4620      	mov	r0, r4
}
   b54ec:	b005      	add	sp, #20
   b54ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    timedUpdate();
   b54f2:	f7ff bf4f 	b.w	b5394 <_ZN10PriceClass11timedUpdateEv>
   b54f6:	bf00      	nop
   b54f8:	000b5a0d 	.word	0x000b5a0d
   b54fc:	000bb665 	.word	0x000bb665
   b5500:	000b5321 	.word	0x000b5321
   b5504:	000bb661 	.word	0x000bb661

000b5508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5508:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b550c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b550e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b5510:	6003      	str	r3, [r0, #0]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b5512:	460d      	mov	r5, r1
   b5514:	b1e1      	cbz	r1, b5550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x48>
   b5516:	4608      	mov	r0, r1
   b5518:	f7ff fadc 	bl	b4ad4 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b551c:	280f      	cmp	r0, #15
   b551e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b5522:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b5524:	d907      	bls.n	b5536 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b5526:	2200      	movs	r2, #0
   b5528:	a901      	add	r1, sp, #4
   b552a:	4620      	mov	r0, r4
   b552c:	f003 fbe2 	bl	b8cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b5530:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b5532:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b5534:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b5536:	6820      	ldr	r0, [r4, #0]
   b5538:	4632      	mov	r2, r6
   b553a:	4629      	mov	r1, r5
   b553c:	f003 fc42 	bl	b8dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b5540:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b5542:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b5544:	6063      	str	r3, [r4, #4]
   b5546:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b5548:	4620      	mov	r0, r4
   b554a:	54d1      	strb	r1, [r2, r3]
   b554c:	b002      	add	sp, #8
   b554e:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b5550:	4801      	ldr	r0, [pc, #4]	; (b5558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
   b5552:	f003 faf9 	bl	b8b48 <_ZSt19__throw_logic_errorPKc>
   b5556:	bf00      	nop
   b5558:	000bb637 	.word	0x000bb637

000b555c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>:
{
   b555c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!newPricesReceived)
   b5560:	7e0b      	ldrb	r3, [r1, #24]
{
   b5562:	b08c      	sub	sp, #48	; 0x30
   b5564:	4604      	mov	r4, r0
   b5566:	460e      	mov	r6, r1
    if (!newPricesReceived)
   b5568:	b93b      	cbnz	r3, b557a <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x1e>
        return "No prices yet";
   b556a:	493e      	ldr	r1, [pc, #248]	; (b5664 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x108>)
   b556c:	aa06      	add	r2, sp, #24
   b556e:	f7ff ffcb 	bl	b5508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
}
   b5572:	4620      	mov	r0, r4
   b5574:	b00c      	add	sp, #48	; 0x30
   b5576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b557a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b557c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b5670 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x114>
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b5580:	781d      	ldrb	r5, [r3, #0]
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b5582:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b5674 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x118>
    std::string lowHourIntervals{(String)lastIndexedHour};
   b5586:	220a      	movs	r2, #10
   b5588:	4629      	mov	r1, r5
   b558a:	a802      	add	r0, sp, #8
   b558c:	f000 ffc0 	bl	b6510 <_ZN6StringC1Ehh>
   b5590:	9902      	ldr	r1, [sp, #8]
   b5592:	aa01      	add	r2, sp, #4
   b5594:	a806      	add	r0, sp, #24
   b5596:	f7ff ffb7 	bl	b5508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b559a:	a802      	add	r0, sp, #8
   b559c:	f000 ff2d 	bl	b63fa <_ZN6StringD1Ev>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b55a0:	e9d6 790a 	ldrd	r7, r9, [r6, #40]	; 0x28
   b55a4:	3708      	adds	r7, #8
    for (const auto &item : lowPriceHours)
   b55a6:	f1a7 0308 	sub.w	r3, r7, #8
   b55aa:	4599      	cmp	r9, r3
   b55ac:	d020      	beq.n	b55f0 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x94>
        if (item.hour > lastIndexedHour + 1)
   b55ae:	f817 3c08 	ldrb.w	r3, [r7, #-8]
   b55b2:	1c6a      	adds	r2, r5, #1
   b55b4:	4293      	cmp	r3, r2
   b55b6:	dd0f      	ble.n	b55d8 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x7c>
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b55b8:	462a      	mov	r2, r5
   b55ba:	4641      	mov	r1, r8
   b55bc:	a802      	add	r0, sp, #8
   b55be:	f000 ffdd 	bl	b657c <_ZN6String6formatEPKcz>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b55c2:	a806      	add	r0, sp, #24
   b55c4:	9902      	ldr	r1, [sp, #8]
   b55c6:	f7ff fd43 	bl	b5050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b55ca:	a802      	add	r0, sp, #8
   b55cc:	f000 ff15 	bl	b63fa <_ZN6StringD1Ev>
        lastIndexedHour = item.hour;
   b55d0:	f817 5c08 	ldrb.w	r5, [r7, #-8]
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b55d4:	3708      	adds	r7, #8
      {
	++_M_current;
	return *this;
   b55d6:	e7e6      	b.n	b55a6 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x4a>
        else if (item.hour < lastIndexedHour)
   b55d8:	42ab      	cmp	r3, r5
   b55da:	d2f9      	bcs.n	b55d0 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x74>
            if (item.hour + 24 > lastIndexedHour + 1)
   b55dc:	f103 0216 	add.w	r2, r3, #22
   b55e0:	42aa      	cmp	r2, r5
   b55e2:	dae9      	bge.n	b55b8 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x5c>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b55e4:	461a      	mov	r2, r3
   b55e6:	4651      	mov	r1, sl
   b55e8:	a802      	add	r0, sp, #8
   b55ea:	f000 ffc7 	bl	b657c <_ZN6String6formatEPKcz>
   b55ee:	e7e8      	b.n	b55c2 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x66>
    lowHourIntervals.append(String::format(" to %02d", lastIndexedHour));
   b55f0:	462a      	mov	r2, r5
   b55f2:	491d      	ldr	r1, [pc, #116]	; (b5668 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x10c>)
   b55f4:	a802      	add	r0, sp, #8
   b55f6:	f000 ffc1 	bl	b657c <_ZN6String6formatEPKcz>
   b55fa:	9902      	ldr	r1, [sp, #8]
   b55fc:	a806      	add	r0, sp, #24
   b55fe:	f7ff fd27 	bl	b5050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b5602:	a802      	add	r0, sp, #8
   b5604:	f000 fef9 	bl	b63fa <_ZN6StringD1Ev>
    newPricesReceived = false;
   b5608:	2300      	movs	r3, #0
   b560a:	7633      	strb	r3, [r6, #24]
    Serial.println("Low Price Intervals:");
   b560c:	f002 ff00 	bl	b8410 <_Z16_fetch_usbserialv>
   b5610:	4916      	ldr	r1, [pc, #88]	; (b566c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x110>)
   b5612:	f002 f9b4 	bl	b797e <_ZN5Print7printlnEPKc>
    Serial.println(lowHourIntervals.c_str());
   b5616:	f002 fefb 	bl	b8410 <_Z16_fetch_usbserialv>
   b561a:	9906      	ldr	r1, [sp, #24]
   b561c:	f002 f9af 	bl	b797e <_ZN5Print7printlnEPKc>
      { return _M_dataplus._M_p; }
   b5620:	9a06      	ldr	r2, [sp, #24]
	if (__str._M_is_local())
   b5622:	ad08      	add	r5, sp, #32
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5624:	f104 0308 	add.w	r3, r4, #8
	if (__str._M_is_local())
   b5628:	42aa      	cmp	r2, r5
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b562a:	6023      	str	r3, [r4, #0]
	if (__str._M_is_local())
   b562c:	d115      	bne.n	b565a <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xfe>
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   b562e:	462e      	mov	r6, r5
   b5630:	af0c      	add	r7, sp, #48	; 0x30
   b5632:	4632      	mov	r2, r6
   b5634:	ca03      	ldmia	r2!, {r0, r1}
   b5636:	42ba      	cmp	r2, r7
   b5638:	6018      	str	r0, [r3, #0]
   b563a:	6059      	str	r1, [r3, #4]
   b563c:	4616      	mov	r6, r2
   b563e:	f103 0308 	add.w	r3, r3, #8
   b5642:	d1f6      	bne.n	b5632 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xd6>
      { _M_string_length = __length; }
   b5644:	9b07      	ldr	r3, [sp, #28]
   b5646:	6063      	str	r3, [r4, #4]
      { _M_dispose(); }
   b5648:	a806      	add	r0, sp, #24
      { _M_string_length = __length; }
   b564a:	2300      	movs	r3, #0
      { _M_dataplus._M_p = __p; }
   b564c:	9506      	str	r5, [sp, #24]
      { _M_string_length = __length; }
   b564e:	9307      	str	r3, [sp, #28]
      { __c1 = __c2; }
   b5650:	f88d 3020 	strb.w	r3, [sp, #32]
      { _M_dispose(); }
   b5654:	f003 fb70 	bl	b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5658:	e78b      	b.n	b5572 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x16>
      { _M_allocated_capacity = __capacity; }
   b565a:	9b08      	ldr	r3, [sp, #32]
      { _M_dataplus._M_p = __p; }
   b565c:	6022      	str	r2, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b565e:	60a3      	str	r3, [r4, #8]
   b5660:	e7f0      	b.n	b5644 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xe8>
   b5662:	bf00      	nop
   b5664:	000bb66c 	.word	0x000bb66c
   b5668:	000bb696 	.word	0x000bb696
   b566c:	000bb69f 	.word	0x000bb69f
   b5670:	000bb689 	.word	0x000bb689
   b5674:	000bb67a 	.word	0x000bb67a

000b5678 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b5678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b567c:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5680:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b5682:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5686:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b568a:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b568e:	4607      	mov	r7, r0
   b5690:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5692:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5696:	d102      	bne.n	b569e <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5698:	4820      	ldr	r0, [pc, #128]	; (b571c <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
   b569a:	f003 fa5b 	bl	b8b54 <_ZSt20__throw_length_errorPKc>
   b569e:	2c01      	cmp	r4, #1
   b56a0:	4622      	mov	r2, r4
   b56a2:	bf38      	it	cc
   b56a4:	2201      	movcc	r2, #1
   b56a6:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b56a8:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b56ac:	d231      	bcs.n	b5712 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b56ae:	b394      	cbz	r4, b5716 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
   b56b0:	429c      	cmp	r4, r3
   b56b2:	bf28      	it	cs
   b56b4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b56b6:	00e0      	lsls	r0, r4, #3
   b56b8:	f7ff fa67 	bl	b4b8a <_Znwj>
   b56bc:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b56be:	1973      	adds	r3, r6, r5
   b56c0:	bf1c      	itt	ne
   b56c2:	e9db 0100 	ldrdne	r0, r1, [fp]
   b56c6:	e9c3 0100 	strdne	r0, r1, [r3]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b56ca:	2d00      	cmp	r5, #0
   b56cc:	dd04      	ble.n	b56d8 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b56ce:	462a      	mov	r2, r5
   b56d0:	4641      	mov	r1, r8
   b56d2:	4630      	mov	r0, r6
   b56d4:	f003 fe60 	bl	b9398 <memmove>
      ptrdiff_t __count = __last - __first;
   b56d8:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b56dc:	3508      	adds	r5, #8
      if (__count > 0)
   b56de:	f1b9 0f00 	cmp.w	r9, #0
   b56e2:	4435      	add	r5, r6
   b56e4:	dd04      	ble.n	b56f0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b56e6:	464a      	mov	r2, r9
   b56e8:	4651      	mov	r1, sl
   b56ea:	4628      	mov	r0, r5
   b56ec:	f003 fe46 	bl	b937c <memcpy>
      return __result + __count;
   b56f0:	444d      	add	r5, r9
	if (__p)
   b56f2:	f1b8 0f00 	cmp.w	r8, #0
   b56f6:	d005      	beq.n	b5704 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b56f8:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b56fa:	4640      	mov	r0, r8
   b56fc:	eba1 0108 	sub.w	r1, r1, r8
   b5700:	f7ff fa49 	bl	b4b96 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5704:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5708:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b570c:	60bc      	str	r4, [r7, #8]
    }
   b570e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5712:	461c      	mov	r4, r3
   b5714:	e7cf      	b.n	b56b6 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5716:	4626      	mov	r6, r4
   b5718:	e7d1      	b.n	b56be <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
   b571a:	bf00      	nop
   b571c:	000bb6b4 	.word	0x000bb6b4

000b5720 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
   b5720:	b510      	push	{r4, lr}
   b5722:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5724:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   b5728:	428c      	cmp	r4, r1
      push_back(const value_type& __x)
   b572a:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b572c:	d008      	beq.n	b5740 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b572e:	b11c      	cbz	r4, b5738 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x18>
   b5730:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5734:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5738:	685a      	ldr	r2, [r3, #4]
   b573a:	3208      	adds	r2, #8
   b573c:	605a      	str	r2, [r3, #4]
      }
   b573e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   b5740:	4621      	mov	r1, r4
   b5742:	f7ff ff99 	bl	b5678 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   b5746:	e7fa      	b.n	b573e <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x1e>

000b5748 <_ZN10PriceClass19assembleMessageDataEv>:
{
   b5748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b574c:	ed2d 8b02 	vpush	{d8}
    if (!messageDataReady)
   b5750:	7e43      	ldrb	r3, [r0, #25]
{
   b5752:	b091      	sub	sp, #68	; 0x44
   b5754:	4604      	mov	r4, r0
    if (!messageDataReady)
   b5756:	b94b      	cbnz	r3, b576c <_ZN10PriceClass19assembleMessageDataEv+0x24>
        Serial.println("Message data isn't ready yet.");
   b5758:	f002 fe5a 	bl	b8410 <_Z16_fetch_usbserialv>
   b575c:	498e      	ldr	r1, [pc, #568]	; (b5998 <_ZN10PriceClass19assembleMessageDataEv+0x250>)
}
   b575e:	b011      	add	sp, #68	; 0x44
   b5760:	ecbd 8b02 	vpop	{d8}
   b5764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("Message data isn't ready yet.");
   b5768:	f002 b909 	b.w	b797e <_ZN5Print7printlnEPKc>
    std::string message = "";
   b576c:	498b      	ldr	r1, [pc, #556]	; (b599c <_ZN10PriceClass19assembleMessageDataEv+0x254>)
   b576e:	aa0a      	add	r2, sp, #40	; 0x28
   b5770:	a804      	add	r0, sp, #16
   b5772:	f7ff fec9 	bl	b5508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
      { return iterator(this->_M_impl._M_header._M_left); }
   b5776:	68e5      	ldr	r5, [r4, #12]
      { return iterator(&this->_M_impl._M_header); }
   b5778:	1d27      	adds	r7, r4, #4
    for (const auto &item : messageParts)
   b577a:	42af      	cmp	r7, r5
   b577c:	d009      	beq.n	b5792 <_ZN10PriceClass19assembleMessageDataEv+0x4a>
      { return _M_append(__str._M_data(), __str.size()); }
   b577e:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   b5782:	a804      	add	r0, sp, #16
   b5784:	f003 fbf2 	bl	b8f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
	_M_node = _Rb_tree_increment(_M_node);
   b5788:	4628      	mov	r0, r5
   b578a:	f003 f97b 	bl	b8a84 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b578e:	4605      	mov	r5, r0
	return *this;
   b5790:	e7f3      	b.n	b577a <_ZN10PriceClass19assembleMessageDataEv+0x32>
    Serial.println("Message assembled.");
   b5792:	f002 fe3d 	bl	b8410 <_Z16_fetch_usbserialv>
   b5796:	4982      	ldr	r1, [pc, #520]	; (b59a0 <_ZN10PriceClass19assembleMessageDataEv+0x258>)
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b5798:	eddf 8a82 	vldr	s17, [pc, #520]	; b59a4 <_ZN10PriceClass19assembleMessageDataEv+0x25c>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b579c:	f8df 8208 	ldr.w	r8, [pc, #520]	; b59a8 <_ZN10PriceClass19assembleMessageDataEv+0x260>
    Serial.println("Message assembled.");
   b57a0:	f002 f8ed 	bl	b797e <_ZN5Print7printlnEPKc>
      {
	_M_check(__pos, "basic_string::erase");
	if (__n == npos)
	  this->_M_set_length(__pos);
	else if (__n != 0)
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b57a4:	9a05      	ldr	r2, [sp, #20]
   b57a6:	2a01      	cmp	r2, #1
   b57a8:	bf28      	it	cs
   b57aa:	2201      	movcs	r2, #1
   b57ac:	2100      	movs	r1, #0
   b57ae:	a804      	add	r0, sp, #16
   b57b0:	f003 fb49 	bl	b8e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b57b4:	2200      	movs	r2, #0
   b57b6:	497c      	ldr	r1, [pc, #496]	; (b59a8 <_ZN10PriceClass19assembleMessageDataEv+0x260>)
   b57b8:	a804      	add	r0, sp, #16
   b57ba:	f003 fc2a 	bl	b9012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b57be:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
   b57c2:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b57c4:	bf18      	it	ne
   b57c6:	6223      	strne	r3, [r4, #32]
    currentHighest.price = 0;
   b57c8:	2300      	movs	r3, #0
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b57ca:	3001      	adds	r0, #1
    currentHighest.price = 0;
   b57cc:	63a3      	str	r3, [r4, #56]	; 0x38
    currentLowest.price = 100;
   b57ce:	4b77      	ldr	r3, [pc, #476]	; (b59ac <_ZN10PriceClass19assembleMessageDataEv+0x264>)
   b57d0:	6423      	str	r3, [r4, #64]	; 0x40
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b57d2:	b2c5      	uxtb	r5, r0
    currentHourPrices.clear();
   b57d4:	f104 091c 	add.w	r9, r4, #28
    while (bangIndex > 0)
   b57d8:	2d00      	cmp	r5, #0
   b57da:	f000 8093 	beq.w	b5904 <_ZN10PriceClass19assembleMessageDataEv+0x1bc>
        indexedHourPrice.hour = stoi(message.substr(HOUR_INDEX, 2));                                      // Hour (hh) converted to int.
   b57de:	2302      	movs	r3, #2
   b57e0:	220b      	movs	r2, #11
   b57e2:	a904      	add	r1, sp, #16
   b57e4:	a80a      	add	r0, sp, #40	; 0x28
   b57e6:	f003 fc6d 	bl	b90c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b57ea:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b57ee:	f000 fd4f 	bl	b6290 <__errno>
   b57f2:	f8d0 b000 	ldr.w	fp, [r0]
   b57f6:	f000 fd4b 	bl	b6290 <__errno>
   b57fa:	2300      	movs	r3, #0
   b57fc:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b57fe:	220a      	movs	r2, #10
   b5800:	a901      	add	r1, sp, #4
   b5802:	4650      	mov	r0, sl
   b5804:	f004 fd60 	bl	ba2c8 <strtol>

      if (__endptr == __str)
   b5808:	9b01      	ldr	r3, [sp, #4]
   b580a:	459a      	cmp	sl, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b580c:	4606      	mov	r6, r0
      if (__endptr == __str)
   b580e:	d102      	bne.n	b5816 <_ZN10PriceClass19assembleMessageDataEv+0xce>
	std::__throw_invalid_argument(__name);
   b5810:	4867      	ldr	r0, [pc, #412]	; (b59b0 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b5812:	f003 f99c 	bl	b8b4e <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
   b5816:	f000 fd3b 	bl	b6290 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b581a:	6803      	ldr	r3, [r0, #0]
   b581c:	2b22      	cmp	r3, #34	; 0x22
   b581e:	d102      	bne.n	b5826 <_ZN10PriceClass19assembleMessageDataEv+0xde>
	std::__throw_out_of_range(__name);
   b5820:	4863      	ldr	r0, [pc, #396]	; (b59b0 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b5822:	f003 f99a 	bl	b8b5a <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b5826:	f000 fd33 	bl	b6290 <__errno>
   b582a:	6803      	ldr	r3, [r0, #0]
   b582c:	b91b      	cbnz	r3, b5836 <_ZN10PriceClass19assembleMessageDataEv+0xee>
   b582e:	f000 fd2f 	bl	b6290 <__errno>
   b5832:	f8c0 b000 	str.w	fp, [r0]
      { _M_dispose(); }
   b5836:	a80a      	add	r0, sp, #40	; 0x28
   b5838:	f88d 6008 	strb.w	r6, [sp, #8]
   b583c:	f003 fa7c 	bl	b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b5840:	f1a5 0315 	sub.w	r3, r5, #21
   b5844:	2214      	movs	r2, #20
   b5846:	a904      	add	r1, sp, #16
   b5848:	a80a      	add	r0, sp, #40	; 0x28
   b584a:	f003 fc3b 	bl	b90c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b584e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b5850:	f000 fd1e 	bl	b6290 <__errno>
   b5854:	f8d0 a000 	ldr.w	sl, [r0]
   b5858:	f000 fd1a 	bl	b6290 <__errno>
   b585c:	2300      	movs	r3, #0
   b585e:	6003      	str	r3, [r0, #0]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5860:	a901      	add	r1, sp, #4
   b5862:	4630      	mov	r0, r6
   b5864:	f004 fc52 	bl	ba10c <strtof>
      if (__endptr == __str)
   b5868:	9b01      	ldr	r3, [sp, #4]
   b586a:	429e      	cmp	r6, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b586c:	eeb0 8a40 	vmov.f32	s16, s0
      if (__endptr == __str)
   b5870:	d101      	bne.n	b5876 <_ZN10PriceClass19assembleMessageDataEv+0x12e>
	std::__throw_invalid_argument(__name);
   b5872:	4850      	ldr	r0, [pc, #320]	; (b59b4 <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b5874:	e7cd      	b.n	b5812 <_ZN10PriceClass19assembleMessageDataEv+0xca>
      else if (errno == ERANGE
   b5876:	f000 fd0b 	bl	b6290 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b587a:	6803      	ldr	r3, [r0, #0]
   b587c:	2b22      	cmp	r3, #34	; 0x22
   b587e:	d101      	bne.n	b5884 <_ZN10PriceClass19assembleMessageDataEv+0x13c>
	std::__throw_out_of_range(__name);
   b5880:	484c      	ldr	r0, [pc, #304]	; (b59b4 <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b5882:	e7ce      	b.n	b5822 <_ZN10PriceClass19assembleMessageDataEv+0xda>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b5884:	f000 fd04 	bl	b6290 <__errno>
   b5888:	6803      	ldr	r3, [r0, #0]
   b588a:	b91b      	cbnz	r3, b5894 <_ZN10PriceClass19assembleMessageDataEv+0x14c>
   b588c:	f000 fd00 	bl	b6290 <__errno>
   b5890:	f8c0 a000 	str.w	sl, [r0]
   b5894:	eec8 7a28 	vdiv.f32	s15, s16, s17
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b5898:	ae02      	add	r6, sp, #8
   b589a:	a80a      	add	r0, sp, #40	; 0x28
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b589c:	edcd 7a03 	vstr	s15, [sp, #12]
   b58a0:	f003 fa4a 	bl	b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b58a4:	4631      	mov	r1, r6
   b58a6:	4648      	mov	r0, r9
   b58a8:	f7ff ff3a 	bl	b5720 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
        if (indexedHourPrice.price > currentHighest.price)
   b58ac:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   b58b0:	eddd 7a03 	vldr	s15, [sp, #12]
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b58b4:	9a05      	ldr	r2, [sp, #20]
   b58b6:	eef4 7ac7 	vcmpe.f32	s15, s14
   b58ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentHighest = indexedHourPrice;
   b58be:	bfc2      	ittt	gt
   b58c0:	e9d6 0100 	ldrdgt	r0, r1, [r6]
   b58c4:	f104 0334 	addgt.w	r3, r4, #52	; 0x34
   b58c8:	e9c3 0100 	strdgt	r0, r1, [r3]
        if (indexedHourPrice.price < currentLowest.price)
   b58cc:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   b58d0:	eef4 7ac7 	vcmpe.f32	s15, s14
   b58d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentLowest = indexedHourPrice;
   b58d8:	bf42      	ittt	mi
   b58da:	e9d6 0100 	ldrdmi	r0, r1, [r6]
   b58de:	f104 033c 	addmi.w	r3, r4, #60	; 0x3c
   b58e2:	e9c3 0100 	strdmi	r0, r1, [r3]
   b58e6:	42aa      	cmp	r2, r5
   b58e8:	bf28      	it	cs
   b58ea:	462a      	movcs	r2, r5
   b58ec:	2100      	movs	r1, #0
   b58ee:	a804      	add	r0, sp, #16
   b58f0:	f003 faa9 	bl	b8e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b58f4:	2200      	movs	r2, #0
   b58f6:	4641      	mov	r1, r8
   b58f8:	a804      	add	r0, sp, #16
   b58fa:	f003 fb8a 	bl	b9012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b58fe:	3001      	adds	r0, #1
   b5900:	b2c5      	uxtb	r5, r0
    while (bangIndex > 0)
   b5902:	e769      	b.n	b57d8 <_ZN10PriceClass19assembleMessageDataEv+0x90>
    double difference = currentHighest.price - currentLowest.price;
   b5904:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
   b5908:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   b590c:	ee77 7ac8 	vsub.f32	s15, s15, s16
            lowPriceHours.push_back(item);
   b5910:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    double difference = currentHighest.price - currentLowest.price;
   b5914:	ee17 0a90 	vmov	r0, s15
   b5918:	f7fe fce6 	bl	b42e8 <__aeabi_f2d>
    double lowThreshold = currentLowest.price + difference * LOW_THRESHOLD_FACTOR;
   b591c:	a31c      	add	r3, pc, #112	; (adr r3, b5990 <_ZN10PriceClass19assembleMessageDataEv+0x248>)
   b591e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5922:	f7fe fd39 	bl	b4398 <__aeabi_dmul>
   b5926:	4680      	mov	r8, r0
   b5928:	ee18 0a10 	vmov	r0, s16
   b592c:	4689      	mov	r9, r1
   b592e:	f7fe fcdb 	bl	b42e8 <__aeabi_f2d>
   b5932:	4602      	mov	r2, r0
   b5934:	460b      	mov	r3, r1
   b5936:	4640      	mov	r0, r8
   b5938:	4649      	mov	r1, r9
   b593a:	f7fe fb77 	bl	b402c <__adddf3>
   b593e:	e9d4 5607 	ldrd	r5, r6, [r4, #28]
   b5942:	4680      	mov	r8, r0
   b5944:	4689      	mov	r9, r1
    for (const auto &item : currentHourPrices)
   b5946:	42ae      	cmp	r6, r5
   b5948:	d00f      	beq.n	b596a <_ZN10PriceClass19assembleMessageDataEv+0x222>
        if (item.price < lowThreshold)
   b594a:	6868      	ldr	r0, [r5, #4]
   b594c:	f7fe fccc 	bl	b42e8 <__aeabi_f2d>
   b5950:	4602      	mov	r2, r0
   b5952:	460b      	mov	r3, r1
   b5954:	4640      	mov	r0, r8
   b5956:	4649      	mov	r1, r9
   b5958:	f7fe ffae 	bl	b48b8 <__aeabi_dcmpgt>
   b595c:	b118      	cbz	r0, b5966 <_ZN10PriceClass19assembleMessageDataEv+0x21e>
            lowPriceHours.push_back(item);
   b595e:	4629      	mov	r1, r5
   b5960:	4650      	mov	r0, sl
   b5962:	f7ff fedd 	bl	b5720 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
      operator++() _GLIBCXX_NOEXCEPT
   b5966:	3508      	adds	r5, #8
	return *this;
   b5968:	e7ed      	b.n	b5946 <_ZN10PriceClass19assembleMessageDataEv+0x1fe>
    messageDataReady = false;
   b596a:	2500      	movs	r5, #0
	_M_erase(_M_begin());
   b596c:	68a0      	ldr	r0, [r4, #8]
   b596e:	7665      	strb	r5, [r4, #25]
   b5970:	f7ff fb99 	bl	b50a6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
    newPricesReceived = true;
   b5974:	2301      	movs	r3, #1
      _M_header._M_left = &_M_header;
   b5976:	e9c4 5702 	strd	r5, r7, [r4, #8]
      _M_node_count = 0;
   b597a:	e9c4 7504 	strd	r7, r5, [r4, #16]
   b597e:	7623      	strb	r3, [r4, #24]
      { _M_dispose(); }
   b5980:	a804      	add	r0, sp, #16
   b5982:	f003 f9d9 	bl	b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
   b5986:	b011      	add	sp, #68	; 0x44
   b5988:	ecbd 8b02 	vpop	{d8}
   b598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5990:	33333333 	.word	0x33333333
   b5994:	3fd33333 	.word	0x3fd33333
   b5998:	000bb6ce 	.word	0x000bb6ce
   b599c:	000bbca8 	.word	0x000bbca8
   b59a0:	000bb6ec 	.word	0x000bb6ec
   b59a4:	447a0000 	.word	0x447a0000
   b59a8:	000bb806 	.word	0x000bb806
   b59ac:	42c80000 	.word	0x42c80000
   b59b0:	000bb6ff 	.word	0x000bb6ff
   b59b4:	000bb704 	.word	0x000bb704

000b59b8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b59b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b59ba:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b59bc:	4616      	mov	r6, r2
   b59be:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b59c0:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b59c2:	2201      	movs	r2, #1
      while (__x != 0)
   b59c4:	b163      	cbz	r3, b59e0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x28>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b59c6:	7c1d      	ldrb	r5, [r3, #16]
   b59c8:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b59ca:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b59ce:	4295      	cmp	r5, r2
   b59d0:	bf88      	it	hi
   b59d2:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b59d4:	461d      	mov	r5, r3
   b59d6:	bf96      	itet	ls
   b59d8:	2200      	movls	r2, #0
   b59da:	463b      	movhi	r3, r7
   b59dc:	4603      	movls	r3, r0
   b59de:	e7f1      	b.n	b59c4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xc>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b59e0:	b192      	cbz	r2, b5a08 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x50>
	{
	  if (__j == begin())
   b59e2:	68ca      	ldr	r2, [r1, #12]
   b59e4:	42aa      	cmp	r2, r5
   b59e6:	d103      	bne.n	b59f0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b59e8:	e9c4 3500 	strd	r3, r5, [r4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b59ec:	4620      	mov	r0, r4
   b59ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b59f0:	4628      	mov	r0, r5
   b59f2:	f003 f849 	bl	b8a88 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b59f6:	7833      	ldrb	r3, [r6, #0]
   b59f8:	7c02      	ldrb	r2, [r0, #16]
   b59fa:	429a      	cmp	r2, r3
   b59fc:	f04f 0300 	mov.w	r3, #0
   b5a00:	d3f2      	bcc.n	b59e8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b5a02:	e9c4 0300 	strd	r0, r3, [r4]
   b5a06:	e7f1      	b.n	b59ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x34>
   b5a08:	4628      	mov	r0, r5
   b5a0a:	e7f4      	b.n	b59f6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x3e>

000b5a0c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_>:
{
   b5a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    messageDataReady = false;
   b5a10:	2300      	movs	r3, #0
   b5a12:	7643      	strb	r3, [r0, #25]
      { return &this->_M_impl._M_header; }
   b5a14:	f100 0a04 	add.w	sl, r0, #4
    messageParts[pricesEvent[7]] = data;
   b5a18:	f891 8007 	ldrb.w	r8, [r1, #7]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5a1c:	6887      	ldr	r7, [r0, #8]
{
   b5a1e:	b086      	sub	sp, #24
   b5a20:	4605      	mov	r5, r0
   b5a22:	4691      	mov	r9, r2
      { return &this->_M_impl._M_header; }
   b5a24:	4654      	mov	r4, sl
      while (__x != 0)
   b5a26:	b147      	cbz	r7, b5a3a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x2e>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5a28:	7c39      	ldrb	r1, [r7, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5a2a:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5a2e:	4541      	cmp	r1, r8
   b5a30:	bf2a      	itet	cs
   b5a32:	463c      	movcs	r4, r7
   b5a34:	4617      	movcc	r7, r2
   b5a36:	461f      	movcs	r7, r3
   b5a38:	e7f5      	b.n	b5a26 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x1a>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b5a3a:	45a2      	cmp	sl, r4
   b5a3c:	d002      	beq.n	b5a44 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x38>
   b5a3e:	7c23      	ldrb	r3, [r4, #16]
   b5a40:	4543      	cmp	r3, r8
   b5a42:	d931      	bls.n	b5aa8 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5a44:	202c      	movs	r0, #44	; 0x2c
   b5a46:	f7ff f8a0 	bl	b4b8a <_Znwj>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5a4a:	f100 031c 	add.w	r3, r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5a4e:	6143      	str	r3, [r0, #20]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b5a50:	45a2      	cmp	sl, r4
      { _M_string_length = __length; }
   b5a52:	f04f 0300 	mov.w	r3, #0
   b5a56:	4606      	mov	r6, r0
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b5a58:	f880 8010 	strb.w	r8, [r0, #16]
   b5a5c:	6183      	str	r3, [r0, #24]
   b5a5e:	7703      	strb	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b5a60:	f100 0210 	add.w	r2, r0, #16
   b5a64:	d13c      	bne.n	b5ae0 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xd4>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b5a66:	696b      	ldr	r3, [r5, #20]
   b5a68:	b11b      	cbz	r3, b5a72 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x66>
   b5a6a:	6929      	ldr	r1, [r5, #16]
   b5a6c:	7c0b      	ldrb	r3, [r1, #16]
   b5a6e:	4543      	cmp	r3, r8
   b5a70:	d309      	bcc.n	b5a86 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x7a>
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   b5a72:	4629      	mov	r1, r5
   b5a74:	a804      	add	r0, sp, #16
   b5a76:	f7ff ff9f 	bl	b59b8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5a7a:	e9dd 4104 	ldrd	r4, r1, [sp, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b5a7e:	2900      	cmp	r1, #0
   b5a80:	d068      	beq.n	b5b54 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5a82:	2c00      	cmp	r4, #0
   b5a84:	d164      	bne.n	b5b50 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b5a86:	458a      	cmp	sl, r1
   b5a88:	d062      	beq.n	b5b50 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5a8a:	7c30      	ldrb	r0, [r6, #16]
   b5a8c:	7c0b      	ldrb	r3, [r1, #16]
   b5a8e:	4298      	cmp	r0, r3
   b5a90:	bf2c      	ite	cs
   b5a92:	2000      	movcs	r0, #0
   b5a94:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b5a96:	4653      	mov	r3, sl
   b5a98:	460a      	mov	r2, r1
   b5a9a:	4631      	mov	r1, r6
   b5a9c:	f002 fff6 	bl	b8a8c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b5aa0:	696b      	ldr	r3, [r5, #20]
   b5aa2:	3301      	adds	r3, #1
   b5aa4:	616b      	str	r3, [r5, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b5aa6:	4634      	mov	r4, r6
	return __builtin_strlen(__s);
   b5aa8:	4648      	mov	r0, r9
   b5aaa:	f7ff f813 	bl	b4ad4 <strlen>
	return _M_replace(size_type(0), this->size(), __s,
   b5aae:	9000      	str	r0, [sp, #0]
   b5ab0:	69a2      	ldr	r2, [r4, #24]
   b5ab2:	464b      	mov	r3, r9
   b5ab4:	2100      	movs	r1, #0
   b5ab6:	f104 0014 	add.w	r0, r4, #20
   b5aba:	f003 f9d9 	bl	b8e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
    if (strlen(data) < 512)
   b5abe:	4648      	mov	r0, r9
   b5ac0:	f7ff f808 	bl	b4ad4 <strlen>
   b5ac4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   b5ac8:	d24e      	bcs.n	b5b68 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x15c>
        newPricesReceived = false; // New prices not assembled yet.
   b5aca:	f44f 7380 	mov.w	r3, #256	; 0x100
   b5ace:	832b      	strh	r3, [r5, #24]
        Serial.println("Message Data Received.");
   b5ad0:	f002 fc9e 	bl	b8410 <_Z16_fetch_usbserialv>
   b5ad4:	4926      	ldr	r1, [pc, #152]	; (b5b70 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x164>)
}
   b5ad6:	b006      	add	sp, #24
   b5ad8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Serial.println("Message Data Received.");
   b5adc:	f001 bf4f 	b.w	b797e <_ZN5Print7printlnEPKc>
      { return __x < __y; }
   b5ae0:	7c23      	ldrb	r3, [r4, #16]
   b5ae2:	9203      	str	r2, [sp, #12]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b5ae4:	4598      	cmp	r8, r3
   b5ae6:	d218      	bcs.n	b5b1a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10e>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b5ae8:	68eb      	ldr	r3, [r5, #12]
   b5aea:	429c      	cmp	r4, r3
   b5aec:	d009      	beq.n	b5b02 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
	_M_node = _Rb_tree_decrement(_M_node);
   b5aee:	4620      	mov	r0, r4
   b5af0:	f002 ffca 	bl	b8a88 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b5af4:	7c03      	ldrb	r3, [r0, #16]
   b5af6:	9a03      	ldr	r2, [sp, #12]
   b5af8:	4543      	cmp	r3, r8
   b5afa:	d205      	bcs.n	b5b08 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xfc>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5afc:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b5afe:	b953      	cbnz	r3, b5b16 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10a>
   b5b00:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b5b02:	4621      	mov	r1, r4
   b5b04:	461c      	mov	r4, r3
   b5b06:	e7ba      	b.n	b5a7e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5b08:	4629      	mov	r1, r5
   b5b0a:	a804      	add	r0, sp, #16
   b5b0c:	f7ff ff54 	bl	b59b8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5b10:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   b5b14:	e7f5      	b.n	b5b02 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
   b5b16:	4623      	mov	r3, r4
   b5b18:	e7f3      	b.n	b5b02 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b5b1a:	d91b      	bls.n	b5b54 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
	  if (__pos._M_node == _M_rightmost())
   b5b1c:	6929      	ldr	r1, [r5, #16]
   b5b1e:	428c      	cmp	r4, r1
   b5b20:	d00b      	beq.n	b5b3a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
	_M_node = _Rb_tree_increment(_M_node);
   b5b22:	4620      	mov	r0, r4
   b5b24:	f002 ffae 	bl	b8a84 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5b28:	7c03      	ldrb	r3, [r0, #16]
   b5b2a:	9a03      	ldr	r2, [sp, #12]
   b5b2c:	4543      	cmp	r3, r8
	_M_node = _Rb_tree_increment(_M_node);
   b5b2e:	4607      	mov	r7, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5b30:	d905      	bls.n	b5b3e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x132>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5b32:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b5b34:	b953      	cbnz	r3, b5b4c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x140>
   b5b36:	4621      	mov	r1, r4
   b5b38:	461f      	mov	r7, r3
   b5b3a:	463c      	mov	r4, r7
   b5b3c:	e79f      	b.n	b5a7e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5b3e:	4629      	mov	r1, r5
   b5b40:	a804      	add	r0, sp, #16
   b5b42:	f7ff ff39 	bl	b59b8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5b46:	e9dd 7104 	ldrd	r7, r1, [sp, #16]
   b5b4a:	e7f6      	b.n	b5b3a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
   b5b4c:	4601      	mov	r1, r0
   b5b4e:	e7f4      	b.n	b5b3a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5b50:	2001      	movs	r0, #1
   b5b52:	e7a0      	b.n	b5a96 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x8a>
      { _M_dispose(); }
   b5b54:	f106 0014 	add.w	r0, r6, #20
   b5b58:	f003 f8ee 	bl	b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	::operator delete(__p
   b5b5c:	4630      	mov	r0, r6
   b5b5e:	212c      	movs	r1, #44	; 0x2c
   b5b60:	f7ff f819 	bl	b4b96 <_ZdlPvj>
   b5b64:	4626      	mov	r6, r4
   b5b66:	e79e      	b.n	b5aa6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9a>
}
   b5b68:	b006      	add	sp, #24
   b5b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5b6e:	bf00      	nop
   b5b70:	000bb709 	.word	0x000bb709

000b5b74 <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
        val_(val) {
   b5b74:	4b01      	ldr	r3, [pc, #4]	; (b5b7c <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b5b76:	2200      	movs	r2, #0
   b5b78:	701a      	strb	r2, [r3, #0]
   b5b7a:	4770      	bx	lr
   b5b7c:	2003e5dc 	.word	0x2003e5dc

000b5b80 <_ZN6Sensor9sensorISREv>:
/// @brief Sensor Interrupt Service Rutine - run when sensor activates the sensor pin.
// This updates the time since last activation, and the time difference (delta) is
// used to calculate a power reading.
// ###################################################################################
void Sensor::sensorISR(void)
{
   b5b80:	b510      	push	{r4, lr}
   b5b82:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5b84:	f000 f8ae 	bl	b5ce4 <HAL_Timer_Get_Milli_Seconds>
    unsigned long timeNow = millis();
    unsigned long delta = timeNow - lastReadTime;
   b5b88:	6823      	ldr	r3, [r4, #0]
   b5b8a:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b5b8c:	2b64      	cmp	r3, #100	; 0x64
   b5b8e:	d906      	bls.n	b5b9e <_ZN6Sensor9sensorISREv+0x1e>
    {
        currentPowerReading = WATT_CONVERSION_CONSTANT / delta;
   b5b90:	4a03      	ldr	r2, [pc, #12]	; (b5ba0 <_ZN6Sensor9sensorISREv+0x20>)
   b5b92:	fbb2 f3f3 	udiv	r3, r2, r3
        lastReadTime = timeNow;
   b5b96:	e9c4 0300 	strd	r0, r3, [r4]
        newReadingAvaliable = true;
   b5b9a:	2301      	movs	r3, #1
   b5b9c:	7223      	strb	r3, [r4, #8]
    }
}
   b5b9e:	bd10      	pop	{r4, pc}
   b5ba0:	0036ee80 	.word	0x0036ee80

000b5ba4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5ba4:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b5ba6:	6803      	ldr	r3, [r0, #0]
   b5ba8:	685a      	ldr	r2, [r3, #4]
   b5baa:	6899      	ldr	r1, [r3, #8]
   b5bac:	681b      	ldr	r3, [r3, #0]
   b5bae:	1054      	asrs	r4, r2, #1
   b5bb0:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b5bb4:	07d2      	lsls	r2, r2, #31
   b5bb6:	bf48      	it	mi
   b5bb8:	590a      	ldrmi	r2, [r1, r4]
      }
   b5bba:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5bbe:	bf48      	it	mi
   b5bc0:	58d3      	ldrmi	r3, [r2, r3]
   b5bc2:	4718      	bx	r3

000b5bc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b5bc4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5bc6:	b538      	push	{r3, r4, r5, lr}
   b5bc8:	4604      	mov	r4, r0
	switch (__op)
   b5bca:	d102      	bne.n	b5bd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5bcc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5bce:	6023      	str	r3, [r4, #0]
	}
   b5bd0:	e003      	b.n	b5bda <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b5bd2:	2a02      	cmp	r2, #2
   b5bd4:	d003      	beq.n	b5bde <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b5bd6:	2a03      	cmp	r2, #3
   b5bd8:	d00d      	beq.n	b5bf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b5bda:	2000      	movs	r0, #0
   b5bdc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5bde:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b5be0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5be2:	f7fe ffd2 	bl	b4b8a <_Znwj>
   b5be6:	4603      	mov	r3, r0
   b5be8:	2800      	cmp	r0, #0
   b5bea:	d0f0      	beq.n	b5bce <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b5bec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5bf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5bf4:	e7eb      	b.n	b5bce <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5bf6:	6800      	ldr	r0, [r0, #0]
   b5bf8:	2800      	cmp	r0, #0
   b5bfa:	d0ee      	beq.n	b5bda <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b5bfc:	210c      	movs	r1, #12
   b5bfe:	f7fe ffca 	bl	b4b96 <_ZdlPvj>
   b5c02:	e7ea      	b.n	b5bda <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b5c04 <_ZN6Sensor10initSensorEv>:

// ##############################################################
/// @brief Initialization. Sets up the sensor pin, and interrupt.
// ##############################################################
void Sensor::initSensor()
{
   b5c04:	b530      	push	{r4, r5, lr}
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5c06:	2103      	movs	r1, #3
{
   b5c08:	b087      	sub	sp, #28
   b5c0a:	4604      	mov	r4, r0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5c0c:	2008      	movs	r0, #8
   b5c0e:	f002 fe57 	bl	b88c0 <pinMode>
    _Function_base() : _M_manager(nullptr) { }
   b5c12:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c14:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5c16:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c18:	f7fe ffb7 	bl	b4b8a <_Znwj>
   b5c1c:	b118      	cbz	r0, b5c26 <_ZN6Sensor10initSensorEv+0x22>
   b5c1e:	4b0f      	ldr	r3, [pc, #60]	; (b5c5c <_ZN6Sensor10initSensorEv+0x58>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5c20:	6084      	str	r4, [r0, #8]
   b5c22:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b5c26:	4b0e      	ldr	r3, [pc, #56]	; (b5c60 <_ZN6Sensor10initSensorEv+0x5c>)
   b5c28:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5c2a:	4b0e      	ldr	r3, [pc, #56]	; (b5c64 <_ZN6Sensor10initSensorEv+0x60>)
   b5c2c:	9304      	str	r3, [sp, #16]
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b5c2e:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c30:	9002      	str	r0, [sp, #8]
   b5c32:	9300      	str	r3, [sp, #0]
   b5c34:	2201      	movs	r2, #1
   b5c36:	f04f 33ff 	mov.w	r3, #4294967295
   b5c3a:	a902      	add	r1, sp, #8
   b5c3c:	2008      	movs	r0, #8
   b5c3e:	f002 fc3b 	bl	b84b8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b5c42:	9b04      	ldr	r3, [sp, #16]
   b5c44:	b11b      	cbz	r3, b5c4e <_ZN6Sensor10initSensorEv+0x4a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5c46:	a902      	add	r1, sp, #8
   b5c48:	2203      	movs	r2, #3
   b5c4a:	4608      	mov	r0, r1
   b5c4c:	4798      	blx	r3
   b5c4e:	f000 f849 	bl	b5ce4 <HAL_Timer_Get_Milli_Seconds>
    attachInterrupt(KW_SENSOR_PIN, &Sensor::sensorISR, this, RISING); // Attach interrup that will be called when rising
    lastReadTime = millis();
    newReadingAvaliable = false;
   b5c52:	2300      	movs	r3, #0
    lastReadTime = millis();
   b5c54:	6020      	str	r0, [r4, #0]
    newReadingAvaliable = false;
   b5c56:	7223      	strb	r3, [r4, #8]
}
   b5c58:	b007      	add	sp, #28
   b5c5a:	bd30      	pop	{r4, r5, pc}
   b5c5c:	000b5b81 	.word	0x000b5b81
   b5c60:	000b5ba5 	.word	0x000b5ba5
   b5c64:	000b5bc5 	.word	0x000b5bc5

000b5c68 <_ZN6Sensor17getCurrentReadingEv>:
// ###############################################################
/// @brief Method for getting the current calculated power reading
// ###############################################################
int Sensor::getCurrentReading()
{
    newReadingAvaliable = false;
   b5c68:	2300      	movs	r3, #0
   b5c6a:	7203      	strb	r3, [r0, #8]
    return currentPowerReading;
}
   b5c6c:	6840      	ldr	r0, [r0, #4]
   b5c6e:	4770      	bx	lr

000b5c70 <_ZN6Sensor18checkForNewReadingEv>:
// Since the last one was read.
// ##################################################################
bool Sensor::checkForNewReading()
{
    return newReadingAvaliable;
   b5c70:	7a00      	ldrb	r0, [r0, #8]
   b5c72:	4770      	bx	lr

000b5c74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5c74:	b508      	push	{r3, lr}
   b5c76:	4b02      	ldr	r3, [pc, #8]	; (b5c80 <netdb_freeaddrinfo+0xc>)
   b5c78:	681b      	ldr	r3, [r3, #0]
   b5c7a:	689b      	ldr	r3, [r3, #8]
   b5c7c:	9301      	str	r3, [sp, #4]
   b5c7e:	bd08      	pop	{r3, pc}
   b5c80:	00030268 	.word	0x00030268

000b5c84 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5c84:	b508      	push	{r3, lr}
   b5c86:	4b02      	ldr	r3, [pc, #8]	; (b5c90 <netdb_getaddrinfo+0xc>)
   b5c88:	681b      	ldr	r3, [r3, #0]
   b5c8a:	68db      	ldr	r3, [r3, #12]
   b5c8c:	9301      	str	r3, [sp, #4]
   b5c8e:	bd08      	pop	{r3, pc}
   b5c90:	00030268 	.word	0x00030268

000b5c94 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5c94:	b508      	push	{r3, lr}
   b5c96:	4b02      	ldr	r3, [pc, #8]	; (b5ca0 <hal_gpio_mode+0xc>)
   b5c98:	681b      	ldr	r3, [r3, #0]
   b5c9a:	689b      	ldr	r3, [r3, #8]
   b5c9c:	9301      	str	r3, [sp, #4]
   b5c9e:	bd08      	pop	{r3, pc}
   b5ca0:	0003022c 	.word	0x0003022c

000b5ca4 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5ca4:	b508      	push	{r3, lr}
   b5ca6:	4b02      	ldr	r3, [pc, #8]	; (b5cb0 <hal_interrupt_attach+0xc>)
   b5ca8:	681b      	ldr	r3, [r3, #0]
   b5caa:	699b      	ldr	r3, [r3, #24]
   b5cac:	9301      	str	r3, [sp, #4]
   b5cae:	bd08      	pop	{r3, pc}
   b5cb0:	0003022c 	.word	0x0003022c

000b5cb4 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5cb4:	b508      	push	{r3, lr}
   b5cb6:	4b02      	ldr	r3, [pc, #8]	; (b5cc0 <hal_interrupt_detach+0xc>)
   b5cb8:	681b      	ldr	r3, [r3, #0]
   b5cba:	69db      	ldr	r3, [r3, #28]
   b5cbc:	9301      	str	r3, [sp, #4]
   b5cbe:	bd08      	pop	{r3, pc}
   b5cc0:	0003022c 	.word	0x0003022c

000b5cc4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5cc4:	b508      	push	{r3, lr}
   b5cc6:	4b02      	ldr	r3, [pc, #8]	; (b5cd0 <HAL_RNG_GetRandomNumber+0xc>)
   b5cc8:	681b      	ldr	r3, [r3, #0]
   b5cca:	685b      	ldr	r3, [r3, #4]
   b5ccc:	9301      	str	r3, [sp, #4]
   b5cce:	bd08      	pop	{r3, pc}
   b5cd0:	00030218 	.word	0x00030218

000b5cd4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5cd4:	b508      	push	{r3, lr}
   b5cd6:	4b02      	ldr	r3, [pc, #8]	; (b5ce0 <HAL_Delay_Microseconds+0xc>)
   b5cd8:	681b      	ldr	r3, [r3, #0]
   b5cda:	68db      	ldr	r3, [r3, #12]
   b5cdc:	9301      	str	r3, [sp, #4]
   b5cde:	bd08      	pop	{r3, pc}
   b5ce0:	00030218 	.word	0x00030218

000b5ce4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5ce4:	b508      	push	{r3, lr}
   b5ce6:	4b02      	ldr	r3, [pc, #8]	; (b5cf0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5ce8:	681b      	ldr	r3, [r3, #0]
   b5cea:	695b      	ldr	r3, [r3, #20]
   b5cec:	9301      	str	r3, [sp, #4]
   b5cee:	bd08      	pop	{r3, pc}
   b5cf0:	00030218 	.word	0x00030218

000b5cf4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5cf4:	b508      	push	{r3, lr}
   b5cf6:	4b02      	ldr	r3, [pc, #8]	; (b5d00 <hal_rtc_time_is_valid+0xc>)
   b5cf8:	681b      	ldr	r3, [r3, #0]
   b5cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5cfc:	9301      	str	r3, [sp, #4]
   b5cfe:	bd08      	pop	{r3, pc}
   b5d00:	00030218 	.word	0x00030218

000b5d04 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5d04:	b508      	push	{r3, lr}
   b5d06:	4b02      	ldr	r3, [pc, #8]	; (b5d10 <hal_rtc_get_time+0xc>)
   b5d08:	681b      	ldr	r3, [r3, #0]
   b5d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5d0c:	9301      	str	r3, [sp, #4]
   b5d0e:	bd08      	pop	{r3, pc}
   b5d10:	00030218 	.word	0x00030218

000b5d14 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5d14:	b508      	push	{r3, lr}
   b5d16:	4b02      	ldr	r3, [pc, #8]	; (b5d20 <hal_ble_stack_init+0xc>)
   b5d18:	681b      	ldr	r3, [r3, #0]
   b5d1a:	689b      	ldr	r3, [r3, #8]
   b5d1c:	9301      	str	r3, [sp, #4]
   b5d1e:	bd08      	pop	{r3, pc}
   b5d20:	00030278 	.word	0x00030278

000b5d24 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b5d24:	b508      	push	{r3, lr}
   b5d26:	4b02      	ldr	r3, [pc, #8]	; (b5d30 <hal_ble_select_antenna+0xc>)
   b5d28:	681b      	ldr	r3, [r3, #0]
   b5d2a:	691b      	ldr	r3, [r3, #16]
   b5d2c:	9301      	str	r3, [sp, #4]
   b5d2e:	bd08      	pop	{r3, pc}
   b5d30:	00030278 	.word	0x00030278

000b5d34 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5d34:	b508      	push	{r3, lr}
   b5d36:	4b02      	ldr	r3, [pc, #8]	; (b5d40 <hal_ble_gap_set_advertising_data+0xc>)
   b5d38:	681b      	ldr	r3, [r3, #0]
   b5d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5d3c:	9301      	str	r3, [sp, #4]
   b5d3e:	bd08      	pop	{r3, pc}
   b5d40:	00030278 	.word	0x00030278

000b5d44 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5d44:	b508      	push	{r3, lr}
   b5d46:	4b02      	ldr	r3, [pc, #8]	; (b5d50 <hal_ble_gap_set_scan_response_data+0xc>)
   b5d48:	681b      	ldr	r3, [r3, #0]
   b5d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d4c:	9301      	str	r3, [sp, #4]
   b5d4e:	bd08      	pop	{r3, pc}
   b5d50:	00030278 	.word	0x00030278

000b5d54 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5d54:	b508      	push	{r3, lr}
   b5d56:	4b02      	ldr	r3, [pc, #8]	; (b5d60 <hal_ble_gap_start_advertising+0xc>)
   b5d58:	681b      	ldr	r3, [r3, #0]
   b5d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5d5c:	9301      	str	r3, [sp, #4]
   b5d5e:	bd08      	pop	{r3, pc}
   b5d60:	00030278 	.word	0x00030278

000b5d64 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5d64:	b508      	push	{r3, lr}
   b5d66:	4b03      	ldr	r3, [pc, #12]	; (b5d74 <hal_ble_gap_disconnect+0x10>)
   b5d68:	681b      	ldr	r3, [r3, #0]
   b5d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5d6e:	9301      	str	r3, [sp, #4]
   b5d70:	bd08      	pop	{r3, pc}
   b5d72:	0000      	.short	0x0000
   b5d74:	00030278 	.word	0x00030278

000b5d78 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5d78:	b508      	push	{r3, lr}
   b5d7a:	4b03      	ldr	r3, [pc, #12]	; (b5d88 <hal_ble_gatt_server_add_service+0x10>)
   b5d7c:	681b      	ldr	r3, [r3, #0]
   b5d7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5d82:	9301      	str	r3, [sp, #4]
   b5d84:	bd08      	pop	{r3, pc}
   b5d86:	0000      	.short	0x0000
   b5d88:	00030278 	.word	0x00030278

000b5d8c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b03      	ldr	r3, [pc, #12]	; (b5d9c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5d96:	9301      	str	r3, [sp, #4]
   b5d98:	bd08      	pop	{r3, pc}
   b5d9a:	0000      	.short	0x0000
   b5d9c:	00030278 	.word	0x00030278

000b5da0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b03      	ldr	r3, [pc, #12]	; (b5db0 <hal_ble_gatt_client_write_with_response+0x10>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5daa:	9301      	str	r3, [sp, #4]
   b5dac:	bd08      	pop	{r3, pc}
   b5dae:	0000      	.short	0x0000
   b5db0:	00030278 	.word	0x00030278

000b5db4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5db4:	b508      	push	{r3, lr}
   b5db6:	4b03      	ldr	r3, [pc, #12]	; (b5dc4 <hal_ble_gatt_client_write_without_response+0x10>)
   b5db8:	681b      	ldr	r3, [r3, #0]
   b5dba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5dbe:	9301      	str	r3, [sp, #4]
   b5dc0:	bd08      	pop	{r3, pc}
   b5dc2:	0000      	.short	0x0000
   b5dc4:	00030278 	.word	0x00030278

000b5dc8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5dc8:	b508      	push	{r3, lr}
   b5dca:	4b03      	ldr	r3, [pc, #12]	; (b5dd8 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5dcc:	681b      	ldr	r3, [r3, #0]
   b5dce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5dd2:	9301      	str	r3, [sp, #4]
   b5dd4:	bd08      	pop	{r3, pc}
   b5dd6:	0000      	.short	0x0000
   b5dd8:	00030278 	.word	0x00030278

000b5ddc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b03      	ldr	r3, [pc, #12]	; (b5dec <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5de6:	9301      	str	r3, [sp, #4]
   b5de8:	bd08      	pop	{r3, pc}
   b5dea:	0000      	.short	0x0000
   b5dec:	00030278 	.word	0x00030278

000b5df0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b03      	ldr	r3, [pc, #12]	; (b5e00 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5dfa:	9301      	str	r3, [sp, #4]
   b5dfc:	bd08      	pop	{r3, pc}
   b5dfe:	0000      	.short	0x0000
   b5e00:	00030278 	.word	0x00030278

000b5e04 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e04:	b508      	push	{r3, lr}
   b5e06:	4b03      	ldr	r3, [pc, #12]	; (b5e14 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5e08:	681b      	ldr	r3, [r3, #0]
   b5e0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5e0e:	9301      	str	r3, [sp, #4]
   b5e10:	bd08      	pop	{r3, pc}
   b5e12:	0000      	.short	0x0000
   b5e14:	00030278 	.word	0x00030278

000b5e18 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b02      	ldr	r3, [pc, #8]	; (b5e24 <os_thread_yield+0xc>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	68db      	ldr	r3, [r3, #12]
   b5e20:	9301      	str	r3, [sp, #4]
   b5e22:	bd08      	pop	{r3, pc}
   b5e24:	00030248 	.word	0x00030248

000b5e28 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b5e28:	b508      	push	{r3, lr}
   b5e2a:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <os_thread_scheduling+0xc>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	69db      	ldr	r3, [r3, #28]
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	00030248 	.word	0x00030248

000b5e38 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b5e38:	b508      	push	{r3, lr}
   b5e3a:	4b02      	ldr	r3, [pc, #8]	; (b5e44 <os_timer_create+0xc>)
   b5e3c:	681b      	ldr	r3, [r3, #0]
   b5e3e:	6a1b      	ldr	r3, [r3, #32]
   b5e40:	9301      	str	r3, [sp, #4]
   b5e42:	bd08      	pop	{r3, pc}
   b5e44:	00030248 	.word	0x00030248

000b5e48 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b5e48:	b508      	push	{r3, lr}
   b5e4a:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <os_timer_destroy+0xc>)
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e50:	9301      	str	r3, [sp, #4]
   b5e52:	bd08      	pop	{r3, pc}
   b5e54:	00030248 	.word	0x00030248

000b5e58 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b5e58:	b508      	push	{r3, lr}
   b5e5a:	4b02      	ldr	r3, [pc, #8]	; (b5e64 <os_timer_get_id+0xc>)
   b5e5c:	681b      	ldr	r3, [r3, #0]
   b5e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e60:	9301      	str	r3, [sp, #4]
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	00030248 	.word	0x00030248

000b5e68 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <os_timer_change+0xc>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e70:	9301      	str	r3, [sp, #4]
   b5e72:	bd08      	pop	{r3, pc}
   b5e74:	00030248 	.word	0x00030248

000b5e78 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <os_mutex_recursive_create+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	00030248 	.word	0x00030248

000b5e88 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <os_mutex_recursive_lock+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	00030248 	.word	0x00030248

000b5e98 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <os_mutex_recursive_unlock+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	00030248 	.word	0x00030248

000b5ea8 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <os_timer_set_id+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	00030248 	.word	0x00030248

000b5eb8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <inet_inet_ntop+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	695b      	ldr	r3, [r3, #20]
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030264 	.word	0x00030264

000b5ec8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <hal_usart_write+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	68db      	ldr	r3, [r3, #12]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	0003023c 	.word	0x0003023c

000b5ed8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <hal_usart_available+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	691b      	ldr	r3, [r3, #16]
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	0003023c 	.word	0x0003023c

000b5ee8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <hal_usart_read+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	695b      	ldr	r3, [r3, #20]
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	0003023c 	.word	0x0003023c

000b5ef8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <hal_usart_peek+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	699b      	ldr	r3, [r3, #24]
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	0003023c 	.word	0x0003023c

000b5f08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <hal_usart_flush+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	69db      	ldr	r3, [r3, #28]
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	0003023c 	.word	0x0003023c

000b5f18 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <hal_usart_is_enabled+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6a1b      	ldr	r3, [r3, #32]
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	0003023c 	.word	0x0003023c

000b5f28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <hal_usart_available_data_for_write+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	0003023c 	.word	0x0003023c

000b5f38 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <hal_usart_init_ex+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	0003023c 	.word	0x0003023c

000b5f48 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <hal_i2c_write+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	6a1b      	ldr	r3, [r3, #32]
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030228 	.word	0x00030228

000b5f58 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <hal_i2c_available+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030228 	.word	0x00030228

000b5f68 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <hal_i2c_read+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	00030228 	.word	0x00030228

000b5f78 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <hal_i2c_peek+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	00030228 	.word	0x00030228

000b5f88 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <hal_i2c_flush+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	00030228 	.word	0x00030228

000b5f98 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <hal_i2c_is_enabled+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	00030228 	.word	0x00030228

000b5fa8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <hal_i2c_init+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	00030228 	.word	0x00030228

000b5fb8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <hal_spi_init+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	69db      	ldr	r3, [r3, #28]
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	00030230 	.word	0x00030230

000b5fc8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <hal_spi_is_enabled+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6a1b      	ldr	r3, [r3, #32]
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030230 	.word	0x00030230

000b5fd8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <HAL_USB_USART_Init+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	681b      	ldr	r3, [r3, #0]
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	0003024c 	.word	0x0003024c

000b5fe8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <HAL_USB_USART_Available_Data+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	691b      	ldr	r3, [r3, #16]
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	0003024c 	.word	0x0003024c

000b5ff8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	695b      	ldr	r3, [r3, #20]
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	0003024c 	.word	0x0003024c

000b6008 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <HAL_USB_USART_Receive_Data+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	699b      	ldr	r3, [r3, #24]
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	0003024c 	.word	0x0003024c

000b6018 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <HAL_USB_USART_Send_Data+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	69db      	ldr	r3, [r3, #28]
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	0003024c 	.word	0x0003024c

000b6028 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <HAL_USB_USART_Flush_Data+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	6a1b      	ldr	r3, [r3, #32]
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	0003024c 	.word	0x0003024c

000b6038 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <panic_+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	00030260 	.word	0x00030260

000b6048 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <log_message+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	00030260 	.word	0x00030260

000b6058 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <system_mode+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	681b      	ldr	r3, [r3, #0]
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	00030220 	.word	0x00030220

000b6068 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <set_system_mode+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	685b      	ldr	r3, [r3, #4]
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	00030220 	.word	0x00030220

000b6078 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <system_delay_ms+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	695b      	ldr	r3, [r3, #20]
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	00030220 	.word	0x00030220

000b6088 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <system_thread_set_state+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	00030220 	.word	0x00030220

000b6098 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <application_thread_current+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	00030220 	.word	0x00030220

000b60a8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <application_thread_invoke+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	00030220 	.word	0x00030220

000b60b8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <system_thread_get_state+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	00030220 	.word	0x00030220

000b60c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b03      	ldr	r3, [pc, #12]	; (b60d8 <system_ctrl_set_app_request_handler+0x10>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b60d2:	9301      	str	r3, [sp, #4]
   b60d4:	bd08      	pop	{r3, pc}
   b60d6:	0000      	.short	0x0000
   b60d8:	00030220 	.word	0x00030220

000b60dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b60dc:	b508      	push	{r3, lr}
   b60de:	4b03      	ldr	r3, [pc, #12]	; (b60ec <system_ctrl_set_result+0x10>)
   b60e0:	681b      	ldr	r3, [r3, #0]
   b60e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b60e6:	9301      	str	r3, [sp, #4]
   b60e8:	bd08      	pop	{r3, pc}
   b60ea:	0000      	.short	0x0000
   b60ec:	00030220 	.word	0x00030220

000b60f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <network_connect+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	685b      	ldr	r3, [r3, #4]
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030240 	.word	0x00030240

000b6100 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <network_connecting+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	689b      	ldr	r3, [r3, #8]
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030240 	.word	0x00030240

000b6110 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <network_disconnect+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	68db      	ldr	r3, [r3, #12]
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030240 	.word	0x00030240

000b6120 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <network_ready+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	691b      	ldr	r3, [r3, #16]
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030240 	.word	0x00030240

000b6130 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <network_on+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	695b      	ldr	r3, [r3, #20]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030240 	.word	0x00030240

000b6140 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <network_off+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	699b      	ldr	r3, [r3, #24]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030240 	.word	0x00030240

000b6150 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <network_listen+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	69db      	ldr	r3, [r3, #28]
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030240 	.word	0x00030240

000b6160 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <network_listening+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6a1b      	ldr	r3, [r3, #32]
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	00030240 	.word	0x00030240

000b6170 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <network_set_listen_timeout+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	00030240 	.word	0x00030240

000b6180 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <network_get_listen_timeout+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	00030240 	.word	0x00030240

000b6190 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <network_is_on+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030240 	.word	0x00030240

000b61a0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <network_is_off+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030240 	.word	0x00030240

000b61b0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <spark_process+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	689b      	ldr	r3, [r3, #8]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	00030244 	.word	0x00030244

000b61c0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <spark_cloud_flag_connected+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	695b      	ldr	r3, [r3, #20]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	00030244 	.word	0x00030244

000b61d0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <spark_send_event+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	6a1b      	ldr	r3, [r3, #32]
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	00030244 	.word	0x00030244

000b61e0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <spark_subscribe+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	00030244 	.word	0x00030244

000b61f0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <spark_sync_time_pending+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	00030244 	.word	0x00030244

000b6200 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	00030244 	.word	0x00030244

000b6210 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <malloc+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	681b      	ldr	r3, [r3, #0]
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	0003021c 	.word	0x0003021c

000b6220 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <free+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	685b      	ldr	r3, [r3, #4]
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	0003021c 	.word	0x0003021c

000b6230 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <realloc+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	689b      	ldr	r3, [r3, #8]
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	0003021c 	.word	0x0003021c

000b6240 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <sprintf+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	68db      	ldr	r3, [r3, #12]
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	0003021c 	.word	0x0003021c

000b6250 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <siprintf+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	691b      	ldr	r3, [r3, #16]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	0003021c 	.word	0x0003021c

000b6260 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <vsnprintf+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	0003021c 	.word	0x0003021c

000b6270 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <abort+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	0003021c 	.word	0x0003021c

000b6280 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <_malloc_r+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	0003021c 	.word	0x0003021c

000b6290 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <__errno+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	0003021c 	.word	0x0003021c

000b62a0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <__assert_func+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	0003021c 	.word	0x0003021c

000b62b0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <newlib_impure_ptr_callback+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	0003021c 	.word	0x0003021c

000b62c0 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <localtime_r+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	0003021c 	.word	0x0003021c

000b62d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b62d0:	2200      	movs	r2, #0
   b62d2:	6840      	ldr	r0, [r0, #4]
   b62d4:	4611      	mov	r1, r2
   b62d6:	f7ff bf43 	b.w	b6160 <network_listening>

000b62da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b62da:	2200      	movs	r2, #0
   b62dc:	6840      	ldr	r0, [r0, #4]
   b62de:	4611      	mov	r1, r2
   b62e0:	f7ff bf4e 	b.w	b6180 <network_get_listen_timeout>

000b62e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b62e4:	6840      	ldr	r0, [r0, #4]
   b62e6:	2200      	movs	r2, #0
   b62e8:	f7ff bf42 	b.w	b6170 <network_set_listen_timeout>

000b62ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b62ec:	6840      	ldr	r0, [r0, #4]
   b62ee:	2200      	movs	r2, #0
   b62f0:	f081 0101 	eor.w	r1, r1, #1
   b62f4:	f7ff bf2c 	b.w	b6150 <network_listen>

000b62f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b62f8:	2300      	movs	r3, #0
   b62fa:	6840      	ldr	r0, [r0, #4]
   b62fc:	461a      	mov	r2, r3
   b62fe:	4619      	mov	r1, r3
   b6300:	f7ff bf1e 	b.w	b6140 <network_off>

000b6304 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6304:	2300      	movs	r3, #0
   b6306:	6840      	ldr	r0, [r0, #4]
   b6308:	461a      	mov	r2, r3
   b630a:	4619      	mov	r1, r3
   b630c:	f7ff bf10 	b.w	b6130 <network_on>

000b6310 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6310:	2200      	movs	r2, #0
   b6312:	6840      	ldr	r0, [r0, #4]
   b6314:	4611      	mov	r1, r2
   b6316:	f7ff bf03 	b.w	b6120 <network_ready>

000b631a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b631a:	2200      	movs	r2, #0
   b631c:	6840      	ldr	r0, [r0, #4]
   b631e:	4611      	mov	r1, r2
   b6320:	f7ff beee 	b.w	b6100 <network_connecting>

000b6324 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6324:	6840      	ldr	r0, [r0, #4]
   b6326:	2200      	movs	r2, #0
   b6328:	2102      	movs	r1, #2
   b632a:	f7ff bef1 	b.w	b6110 <network_disconnect>

000b632e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b632e:	2300      	movs	r3, #0
   b6330:	6840      	ldr	r0, [r0, #4]
   b6332:	461a      	mov	r2, r3
   b6334:	f7ff bedc 	b.w	b60f0 <network_connect>

000b6338 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6338:	4b02      	ldr	r3, [pc, #8]	; (b6344 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b633a:	2203      	movs	r2, #3
   b633c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b633e:	4a02      	ldr	r2, [pc, #8]	; (b6348 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6340:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6342:	4770      	bx	lr
   b6344:	2003e5e0 	.word	0x2003e5e0
   b6348:	000bb73c 	.word	0x000bb73c

000b634c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b634c:	b510      	push	{r4, lr}
   b634e:	4604      	mov	r4, r0
   b6350:	4608      	mov	r0, r1
{
    _spi = spi;
   b6352:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6354:	f7ff fe30 	bl	b5fb8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6358:	2300      	movs	r3, #0
   b635a:	6063      	str	r3, [r4, #4]
}
   b635c:	4620      	mov	r0, r4
   b635e:	bd10      	pop	{r4, pc}

000b6360 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6360:	4b05      	ldr	r3, [pc, #20]	; (b6378 <_GLOBAL__sub_I_System+0x18>)
   b6362:	2202      	movs	r2, #2
   b6364:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6366:	4b05      	ldr	r3, [pc, #20]	; (b637c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6368:	4a05      	ldr	r2, [pc, #20]	; (b6380 <_GLOBAL__sub_I_System+0x20>)
   b636a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b636c:	2000      	movs	r0, #0
   b636e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6372:	f7ff be79 	b.w	b6068 <set_system_mode>
   b6376:	bf00      	nop
   b6378:	2003e5f4 	.word	0x2003e5f4
   b637c:	2003e5e8 	.word	0x2003e5e8
   b6380:	ffff0000 	.word	0xffff0000

000b6384 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6384:	b510      	push	{r4, lr}
   b6386:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6388:	f7fe fba4 	bl	b4ad4 <strlen>
   b638c:	3801      	subs	r0, #1
   b638e:	1823      	adds	r3, r4, r0
   b6390:	4620      	mov	r0, r4
	while(i<j){
   b6392:	4283      	cmp	r3, r0
   b6394:	d906      	bls.n	b63a4 <_Z11str_reversePc+0x20>
		c = *i;
   b6396:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6398:	7819      	ldrb	r1, [r3, #0]
   b639a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b639e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b63a2:	e7f6      	b.n	b6392 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b63a4:	bd10      	pop	{r4, pc}

000b63a6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b63a6:	b570      	push	{r4, r5, r6, lr}
   b63a8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b63aa:	1e91      	subs	r1, r2, #2
   b63ac:	2922      	cmp	r1, #34	; 0x22
   b63ae:	d81d      	bhi.n	b63ec <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b63b0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b63b2:	b930      	cbnz	r0, b63c2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b63b4:	4423      	add	r3, r4
            *ptr++ = '0';
   b63b6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b63b8:	429d      	cmp	r5, r3
   b63ba:	d210      	bcs.n	b63de <ultoa+0x38>
            *ptr++ = '0';
   b63bc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b63c0:	e7fa      	b.n	b63b8 <ultoa+0x12>
            result.quot = a/radix;
   b63c2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b63c6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b63ca:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b63cc:	2809      	cmp	r0, #9
                *ptr += '0';
   b63ce:	bf94      	ite	ls
   b63d0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b63d2:	3157      	addhi	r1, #87	; 0x57
   b63d4:	b2c9      	uxtb	r1, r1
   b63d6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b63da:	4630      	mov	r0, r6
	while(a){
   b63dc:	e7e9      	b.n	b63b2 <ultoa+0xc>

	*ptr = '\0';
   b63de:	2300      	movs	r3, #0
	str_reverse(buffer);
   b63e0:	4620      	mov	r0, r4
	*ptr = '\0';
   b63e2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b63e4:	f7ff ffce 	bl	b6384 <_Z11str_reversePc>
	return buffer;
   b63e8:	4620      	mov	r0, r4
}
   b63ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b63ec:	2000      	movs	r0, #0
   b63ee:	e7fc      	b.n	b63ea <ultoa+0x44>

000b63f0 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b63f0:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b63f2:	2301      	movs	r3, #1
   b63f4:	f7ff ffd7 	bl	b63a6 <ultoa>
}
   b63f8:	bd08      	pop	{r3, pc}

000b63fa <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b63fa:	b510      	push	{r4, lr}
   b63fc:	4604      	mov	r4, r0
{
	free(buffer);
   b63fe:	6800      	ldr	r0, [r0, #0]
   b6400:	f7ff ff0e 	bl	b6220 <free>
}
   b6404:	4620      	mov	r0, r4
   b6406:	bd10      	pop	{r4, pc}

000b6408 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6408:	b510      	push	{r4, lr}
   b640a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b640c:	6800      	ldr	r0, [r0, #0]
   b640e:	b108      	cbz	r0, b6414 <_ZN6String10invalidateEv+0xc>
   b6410:	f7ff ff06 	bl	b6220 <free>
	buffer = NULL;
   b6414:	2300      	movs	r3, #0
	capacity = len = 0;
   b6416:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b641a:	6023      	str	r3, [r4, #0]
}
   b641c:	bd10      	pop	{r4, pc}

000b641e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b641e:	b538      	push	{r3, r4, r5, lr}
   b6420:	4604      	mov	r4, r0
   b6422:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6424:	6800      	ldr	r0, [r0, #0]
   b6426:	3101      	adds	r1, #1
   b6428:	f7ff ff02 	bl	b6230 <realloc>
	if (newbuffer) {
   b642c:	b110      	cbz	r0, b6434 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b642e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6432:	2001      	movs	r0, #1
	}
	return 0;
}
   b6434:	bd38      	pop	{r3, r4, r5, pc}

000b6436 <_ZN6String7reserveEj>:
{
   b6436:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6438:	6803      	ldr	r3, [r0, #0]
{
   b643a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b643c:	b123      	cbz	r3, b6448 <_ZN6String7reserveEj+0x12>
   b643e:	6843      	ldr	r3, [r0, #4]
   b6440:	428b      	cmp	r3, r1
   b6442:	d301      	bcc.n	b6448 <_ZN6String7reserveEj+0x12>
   b6444:	2001      	movs	r0, #1
}
   b6446:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6448:	4620      	mov	r0, r4
   b644a:	f7ff ffe8 	bl	b641e <_ZN6String12changeBufferEj>
   b644e:	2800      	cmp	r0, #0
   b6450:	d0f9      	beq.n	b6446 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6452:	68a3      	ldr	r3, [r4, #8]
   b6454:	2b00      	cmp	r3, #0
   b6456:	d1f5      	bne.n	b6444 <_ZN6String7reserveEj+0xe>
   b6458:	6822      	ldr	r2, [r4, #0]
   b645a:	7013      	strb	r3, [r2, #0]
   b645c:	e7f2      	b.n	b6444 <_ZN6String7reserveEj+0xe>

000b645e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b645e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6460:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6462:	4611      	mov	r1, r2
   b6464:	9201      	str	r2, [sp, #4]
{
   b6466:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6468:	f7ff ffe5 	bl	b6436 <_ZN6String7reserveEj>
   b646c:	9a01      	ldr	r2, [sp, #4]
   b646e:	b928      	cbnz	r0, b647c <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6470:	4620      	mov	r0, r4
   b6472:	f7ff ffc9 	bl	b6408 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6476:	4620      	mov	r0, r4
   b6478:	b003      	add	sp, #12
   b647a:	bd30      	pop	{r4, r5, pc}
	len = length;
   b647c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b647e:	4629      	mov	r1, r5
   b6480:	6820      	ldr	r0, [r4, #0]
   b6482:	f002 ff7b 	bl	b937c <memcpy>
	buffer[len] = 0;
   b6486:	6822      	ldr	r2, [r4, #0]
   b6488:	68a3      	ldr	r3, [r4, #8]
   b648a:	2100      	movs	r1, #0
   b648c:	54d1      	strb	r1, [r2, r3]
	return *this;
   b648e:	e7f2      	b.n	b6476 <_ZN6String4copyEPKcj+0x18>

000b6490 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6490:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6492:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6494:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6498:	4604      	mov	r4, r0
	len = 0;
   b649a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b649c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b649e:	b141      	cbz	r1, b64b2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b64a0:	4608      	mov	r0, r1
   b64a2:	9101      	str	r1, [sp, #4]
   b64a4:	f7fe fb16 	bl	b4ad4 <strlen>
   b64a8:	9901      	ldr	r1, [sp, #4]
   b64aa:	4602      	mov	r2, r0
   b64ac:	4620      	mov	r0, r4
   b64ae:	f7ff ffd6 	bl	b645e <_ZN6String4copyEPKcj>
}
   b64b2:	4620      	mov	r0, r4
   b64b4:	b002      	add	sp, #8
   b64b6:	bd10      	pop	{r4, pc}

000b64b8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b64b8:	4288      	cmp	r0, r1
{
   b64ba:	b510      	push	{r4, lr}
   b64bc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b64be:	d005      	beq.n	b64cc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b64c0:	680b      	ldr	r3, [r1, #0]
   b64c2:	b12b      	cbz	r3, b64d0 <_ZN6StringaSERKS_+0x18>
   b64c4:	688a      	ldr	r2, [r1, #8]
   b64c6:	4619      	mov	r1, r3
   b64c8:	f7ff ffc9 	bl	b645e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b64cc:	4620      	mov	r0, r4
   b64ce:	bd10      	pop	{r4, pc}
	else invalidate();
   b64d0:	f7ff ff9a 	bl	b6408 <_ZN6String10invalidateEv>
   b64d4:	e7fa      	b.n	b64cc <_ZN6StringaSERKS_+0x14>

000b64d6 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b64d6:	b510      	push	{r4, lr}
	buffer = NULL;
   b64d8:	2300      	movs	r3, #0
String::String(const String &value)
   b64da:	4604      	mov	r4, r0
	capacity = 0;
   b64dc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b64e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b64e2:	7303      	strb	r3, [r0, #12]
	*this = value;
   b64e4:	f7ff ffe8 	bl	b64b8 <_ZN6StringaSERKS_>
}
   b64e8:	4620      	mov	r0, r4
   b64ea:	bd10      	pop	{r4, pc}

000b64ec <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b64ec:	b513      	push	{r0, r1, r4, lr}
   b64ee:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b64f0:	b159      	cbz	r1, b650a <_ZN6StringaSEPKc+0x1e>
   b64f2:	4608      	mov	r0, r1
   b64f4:	9101      	str	r1, [sp, #4]
   b64f6:	f7fe faed 	bl	b4ad4 <strlen>
   b64fa:	9901      	ldr	r1, [sp, #4]
   b64fc:	4602      	mov	r2, r0
   b64fe:	4620      	mov	r0, r4
   b6500:	f7ff ffad 	bl	b645e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6504:	4620      	mov	r0, r4
   b6506:	b002      	add	sp, #8
   b6508:	bd10      	pop	{r4, pc}
	else invalidate();
   b650a:	f7ff ff7d 	bl	b6408 <_ZN6String10invalidateEv>
   b650e:	e7f9      	b.n	b6504 <_ZN6StringaSEPKc+0x18>

000b6510 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b6510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6512:	4604      	mov	r4, r0
	buffer = NULL;
   b6514:	2300      	movs	r3, #0
	capacity = 0;
   b6516:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b651a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b651c:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b651e:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b6520:	a901      	add	r1, sp, #4
   b6522:	f7ff ff65 	bl	b63f0 <utoa>
	*this = buf;
   b6526:	a901      	add	r1, sp, #4
   b6528:	4620      	mov	r0, r4
   b652a:	f7ff ffdf 	bl	b64ec <_ZN6StringaSEPKc>
}
   b652e:	4620      	mov	r0, r4
   b6530:	b004      	add	sp, #16
   b6532:	bd10      	pop	{r4, pc}

000b6534 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6534:	b570      	push	{r4, r5, r6, lr}
   b6536:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6538:	460e      	mov	r6, r1
   b653a:	b909      	cbnz	r1, b6540 <_ZN6String6concatEPKcj+0xc>
   b653c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b653e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6540:	b16a      	cbz	r2, b655e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6542:	6884      	ldr	r4, [r0, #8]
   b6544:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6546:	4621      	mov	r1, r4
   b6548:	f7ff ff75 	bl	b6436 <_ZN6String7reserveEj>
   b654c:	2800      	cmp	r0, #0
   b654e:	d0f5      	beq.n	b653c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6550:	6828      	ldr	r0, [r5, #0]
   b6552:	68ab      	ldr	r3, [r5, #8]
   b6554:	4631      	mov	r1, r6
   b6556:	4418      	add	r0, r3
   b6558:	f002 ff6e 	bl	b9438 <strcpy>
	len = newlen;
   b655c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b655e:	2001      	movs	r0, #1
   b6560:	e7ed      	b.n	b653e <_ZN6String6concatEPKcj+0xa>

000b6562 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6562:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6564:	688a      	ldr	r2, [r1, #8]
   b6566:	6809      	ldr	r1, [r1, #0]
{
   b6568:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b656a:	f7ff ffe3 	bl	b6534 <_ZN6String6concatEPKcj>
   b656e:	b910      	cbnz	r0, b6576 <_ZplRK15StringSumHelperRK6String+0x14>
   b6570:	4620      	mov	r0, r4
   b6572:	f7ff ff49 	bl	b6408 <_ZN6String10invalidateEv>
	return a;
}
   b6576:	4620      	mov	r0, r4
   b6578:	bd10      	pop	{r4, pc}
	...

000b657c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b657c:	b40e      	push	{r1, r2, r3}
   b657e:	b570      	push	{r4, r5, r6, lr}
   b6580:	b087      	sub	sp, #28
   b6582:	ad0b      	add	r5, sp, #44	; 0x2c
   b6584:	4604      	mov	r4, r0
   b6586:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b658a:	9201      	str	r2, [sp, #4]
   b658c:	462b      	mov	r3, r5
   b658e:	2105      	movs	r1, #5
   b6590:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6592:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6594:	f7ff fe64 	bl	b6260 <vsnprintf>
    va_end(marker);

    String result;
   b6598:	490b      	ldr	r1, [pc, #44]	; (b65c8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b659a:	4606      	mov	r6, r0
    String result;
   b659c:	4620      	mov	r0, r4
   b659e:	f7ff ff77 	bl	b6490 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b65a2:	4631      	mov	r1, r6
   b65a4:	4620      	mov	r0, r4
   b65a6:	f7ff ff46 	bl	b6436 <_ZN6String7reserveEj>
    if (result.buffer) {
   b65aa:	6820      	ldr	r0, [r4, #0]
   b65ac:	b130      	cbz	r0, b65bc <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b65ae:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b65b0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b65b2:	462b      	mov	r3, r5
   b65b4:	1c71      	adds	r1, r6, #1
   b65b6:	f7ff fe53 	bl	b6260 <vsnprintf>
        va_end(marker);
        result.len = n;
   b65ba:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b65bc:	4620      	mov	r0, r4
   b65be:	b007      	add	sp, #28
   b65c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b65c4:	b003      	add	sp, #12
   b65c6:	4770      	bx	lr
   b65c8:	000bbca8 	.word	0x000bbca8

000b65cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65cc:	4770      	bx	lr

000b65ce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b65ce:	4770      	bx	lr

000b65d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b65d0:	4770      	bx	lr

000b65d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65d2:	4770      	bx	lr

000b65d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b65d4:	4b06      	ldr	r3, [pc, #24]	; (b65f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b65d6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b65d8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b65da:	f100 040c 	add.w	r4, r0, #12
	    ||
   b65de:	d005      	beq.n	b65ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b65e0:	4608      	mov	r0, r1
   b65e2:	f002 fadd 	bl	b8ba0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b65e6:	2800      	cmp	r0, #0
   b65e8:	bf08      	it	eq
   b65ea:	2400      	moveq	r4, #0
      }
   b65ec:	4620      	mov	r0, r4
   b65ee:	bd10      	pop	{r4, pc}
   b65f0:	000bb910 	.word	0x000bb910

000b65f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b65f4:	4b06      	ldr	r3, [pc, #24]	; (b6610 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b65f6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b65f8:	b510      	push	{r4, lr}
   b65fa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b65fe:	d005      	beq.n	b660c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6600:	4608      	mov	r0, r1
   b6602:	f002 facd 	bl	b8ba0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6606:	2800      	cmp	r0, #0
   b6608:	bf08      	it	eq
   b660a:	2400      	moveq	r4, #0
      }
   b660c:	4620      	mov	r0, r4
   b660e:	bd10      	pop	{r4, pc}
   b6610:	000bb910 	.word	0x000bb910

000b6614 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6614:	4b06      	ldr	r3, [pc, #24]	; (b6630 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6616:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6618:	b510      	push	{r4, lr}
   b661a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b661e:	d005      	beq.n	b662c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6620:	4608      	mov	r0, r1
   b6622:	f002 fabd 	bl	b8ba0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6626:	2800      	cmp	r0, #0
   b6628:	bf08      	it	eq
   b662a:	2400      	moveq	r4, #0
      }
   b662c:	4620      	mov	r0, r4
   b662e:	bd10      	pop	{r4, pc}
   b6630:	000bb910 	.word	0x000bb910

000b6634 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6634:	b510      	push	{r4, lr}
   b6636:	2168      	movs	r1, #104	; 0x68
   b6638:	4604      	mov	r4, r0
   b663a:	f7fe faac 	bl	b4b96 <_ZdlPvj>
   b663e:	4620      	mov	r0, r4
   b6640:	bd10      	pop	{r4, pc}

000b6642 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6642:	b510      	push	{r4, lr}
   b6644:	2128      	movs	r1, #40	; 0x28
   b6646:	4604      	mov	r4, r0
   b6648:	f7fe faa5 	bl	b4b96 <_ZdlPvj>
   b664c:	4620      	mov	r0, r4
   b664e:	bd10      	pop	{r4, pc}

000b6650 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6650:	b510      	push	{r4, lr}
   b6652:	2130      	movs	r1, #48	; 0x30
   b6654:	4604      	mov	r4, r0
   b6656:	f7fe fa9e 	bl	b4b96 <_ZdlPvj>
   b665a:	4620      	mov	r0, r4
   b665c:	bd10      	pop	{r4, pc}

000b665e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b665e:	2168      	movs	r1, #104	; 0x68
   b6660:	f7fe ba99 	b.w	b4b96 <_ZdlPvj>

000b6664 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6664:	2128      	movs	r1, #40	; 0x28
   b6666:	f7fe ba96 	b.w	b4b96 <_ZdlPvj>

000b666a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b666a:	2130      	movs	r1, #48	; 0x30
   b666c:	f7fe ba93 	b.w	b4b96 <_ZdlPvj>

000b6670 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6670:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6672:	2500      	movs	r5, #0
   b6674:	1cec      	adds	r4, r5, #3
   b6676:	428c      	cmp	r4, r1
   b6678:	d80d      	bhi.n	b6696 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b667a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b667c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b667e:	5d87      	ldrb	r7, [r0, r6]
   b6680:	4297      	cmp	r7, r2
   b6682:	d105      	bne.n	b6690 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6684:	4426      	add	r6, r4
   b6686:	42b1      	cmp	r1, r6
   b6688:	d305      	bcc.n	b6696 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b668a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b668c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b668e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6690:	3401      	adds	r4, #1
   b6692:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6694:	e7ee      	b.n	b6674 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6696:	2000      	movs	r0, #0
   b6698:	e7f9      	b.n	b668e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b669c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b669c:	4a02      	ldr	r2, [pc, #8]	; (b66a8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b669e:	4903      	ldr	r1, [pc, #12]	; (b66ac <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b66a0:	200a      	movs	r0, #10
   b66a2:	f7ff bcc9 	b.w	b6038 <panic_>
   b66a6:	bf00      	nop
   b66a8:	000b5cd5 	.word	0x000b5cd5
   b66ac:	000bb770 	.word	0x000bb770

000b66b0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b66b0:	b430      	push	{r4, r5}
   b66b2:	460d      	mov	r5, r1
   b66b4:	4611      	mov	r1, r2
   b66b6:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b66b8:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b66ba:	6809      	ldr	r1, [r1, #0]
   b66bc:	6828      	ldr	r0, [r5, #0]
   b66be:	e9d3 4300 	ldrd	r4, r3, [r3]
   b66c2:	46a4      	mov	ip, r4
      }
   b66c4:	bc30      	pop	{r4, r5}
   b66c6:	4760      	bx	ip

000b66c8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b66c8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b66ca:	b538      	push	{r3, r4, r5, lr}
   b66cc:	4604      	mov	r4, r0
	switch (__op)
   b66ce:	d102      	bne.n	b66d6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b66d0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b66d2:	6023      	str	r3, [r4, #0]
	}
   b66d4:	e003      	b.n	b66de <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b66d6:	2a02      	cmp	r2, #2
   b66d8:	d003      	beq.n	b66e2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b66da:	2a03      	cmp	r2, #3
   b66dc:	d00d      	beq.n	b66fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b66de:	2000      	movs	r0, #0
   b66e0:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b66e2:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b66e4:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b66e6:	f7fe fa50 	bl	b4b8a <_Znwj>
   b66ea:	4603      	mov	r3, r0
   b66ec:	2800      	cmp	r0, #0
   b66ee:	d0f0      	beq.n	b66d2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b66f0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b66f4:	e883 0003 	stmia.w	r3, {r0, r1}
   b66f8:	e7eb      	b.n	b66d2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b66fa:	6800      	ldr	r0, [r0, #0]
   b66fc:	2800      	cmp	r0, #0
   b66fe:	d0ee      	beq.n	b66de <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6700:	2108      	movs	r1, #8
   b6702:	f7fe fa48 	bl	b4b96 <_ZdlPvj>
   b6706:	e7ea      	b.n	b66de <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6708 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6708:	b510      	push	{r4, lr}
   b670a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b670c:	3058      	adds	r0, #88	; 0x58
   b670e:	f7fe fcdc 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6712:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b671a:	f7ff be6e 	b.w	b63fa <_ZN6StringD1Ev>

000b671e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b671e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6722:	b2da      	uxtb	r2, r3
   b6724:	2a09      	cmp	r2, #9
   b6726:	d801      	bhi.n	b672c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6728:	4618      	mov	r0, r3
   b672a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b672c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6730:	2b05      	cmp	r3, #5
   b6732:	d801      	bhi.n	b6738 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6734:	3857      	subs	r0, #87	; 0x57
   b6736:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6738:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b673c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b673e:	bf94      	ite	ls
   b6740:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6742:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b6746:	4770      	bx	lr

000b6748 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6748:	b510      	push	{r4, lr}
            locked_(false) {
   b674a:	2300      	movs	r3, #0
   b674c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b674e:	4b04      	ldr	r3, [pc, #16]	; (b6760 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6750:	4604      	mov	r4, r0
   b6752:	6818      	ldr	r0, [r3, #0]
   b6754:	f7ff fb98 	bl	b5e88 <os_mutex_recursive_lock>
        locked_ = true;
   b6758:	2301      	movs	r3, #1
   b675a:	7023      	strb	r3, [r4, #0]
    }
   b675c:	4620      	mov	r0, r4
   b675e:	bd10      	pop	{r4, pc}
   b6760:	2003e600 	.word	0x2003e600

000b6764 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6764:	b510      	push	{r4, lr}
        if (locked_) {
   b6766:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6768:	4604      	mov	r4, r0
        if (locked_) {
   b676a:	b11b      	cbz	r3, b6774 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b676c:	4b02      	ldr	r3, [pc, #8]	; (b6778 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b676e:	6818      	ldr	r0, [r3, #0]
   b6770:	f7ff fb92 	bl	b5e98 <os_mutex_recursive_unlock>
    }
   b6774:	4620      	mov	r0, r4
   b6776:	bd10      	pop	{r4, pc}
   b6778:	2003e600 	.word	0x2003e600

000b677c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b677c:	b082      	sub	sp, #8
   b677e:	4603      	mov	r3, r0
    address_ = addr;
   b6780:	6808      	ldr	r0, [r1, #0]
   b6782:	6849      	ldr	r1, [r1, #4]
   b6784:	466a      	mov	r2, sp
   b6786:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6788:	466a      	mov	r2, sp
   b678a:	ca03      	ldmia	r2!, {r0, r1}
   b678c:	6018      	str	r0, [r3, #0]
}
   b678e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6790:	6059      	str	r1, [r3, #4]
}
   b6792:	b002      	add	sp, #8
   b6794:	4770      	bx	lr

000b6796 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6796:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6798:	7982      	ldrb	r2, [r0, #6]
   b679a:	798b      	ldrb	r3, [r1, #6]
   b679c:	429a      	cmp	r2, r3
   b679e:	d106      	bne.n	b67ae <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b67a0:	2206      	movs	r2, #6
   b67a2:	f002 fddb 	bl	b935c <memcmp>
   b67a6:	fab0 f080 	clz	r0, r0
   b67aa:	0940      	lsrs	r0, r0, #5
}
   b67ac:	bd08      	pop	{r3, pc}
    return false;
   b67ae:	2000      	movs	r0, #0
   b67b0:	e7fc      	b.n	b67ac <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b67b2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b67b2:	f04f 33ff 	mov.w	r3, #4294967295
   b67b6:	6003      	str	r3, [r0, #0]
   b67b8:	8083      	strh	r3, [r0, #4]
}
   b67ba:	2000      	movs	r0, #0
   b67bc:	4770      	bx	lr

000b67be <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b67be:	b508      	push	{r3, lr}
   b67c0:	4602      	mov	r2, r0
        : address_{} {
   b67c2:	2100      	movs	r1, #0
   b67c4:	6001      	str	r1, [r0, #0]
   b67c6:	6041      	str	r1, [r0, #4]
    clear();
   b67c8:	f7ff fff3 	bl	b67b2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b67cc:	7191      	strb	r1, [r2, #6]
}
   b67ce:	4610      	mov	r0, r2
   b67d0:	bd08      	pop	{r3, pc}
	...

000b67d4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b67d4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b67d6:	2301      	movs	r3, #1
   b67d8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b67da:	4b05      	ldr	r3, [pc, #20]	; (b67f0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b67dc:	4602      	mov	r2, r0
   b67de:	f103 0110 	add.w	r1, r3, #16
   b67e2:	f853 4b04 	ldr.w	r4, [r3], #4
   b67e6:	f842 4b04 	str.w	r4, [r2], #4
   b67ea:	428b      	cmp	r3, r1
   b67ec:	d1f9      	bne.n	b67e2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b67ee:	bd10      	pop	{r4, pc}
   b67f0:	000bb48e 	.word	0x000bb48e

000b67f4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b67f4:	b510      	push	{r4, lr}
    if (uuid128) {
   b67f6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b67f8:	4604      	mov	r4, r0
    if (uuid128) {
   b67fa:	b1b1      	cbz	r1, b682a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b67fc:	2a01      	cmp	r2, #1
   b67fe:	f101 0210 	add.w	r2, r1, #16
   b6802:	d10a      	bne.n	b681a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6804:	4601      	mov	r1, r0
   b6806:	f853 0b04 	ldr.w	r0, [r3], #4
   b680a:	f841 0b04 	str.w	r0, [r1], #4
   b680e:	4293      	cmp	r3, r2
   b6810:	d1f9      	bne.n	b6806 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6812:	2301      	movs	r3, #1
   b6814:	6123      	str	r3, [r4, #16]
}
   b6816:	4620      	mov	r0, r4
   b6818:	bd10      	pop	{r4, pc}
   b681a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b681c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6820:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6824:	429a      	cmp	r2, r3
   b6826:	d1f9      	bne.n	b681c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6828:	e7f3      	b.n	b6812 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b682a:	2210      	movs	r2, #16
   b682c:	f002 fdce 	bl	b93cc <memset>
   b6830:	e7f1      	b.n	b6816 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6832 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6832:	b538      	push	{r3, r4, r5, lr}
   b6834:	4604      	mov	r4, r0
   b6836:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6838:	461a      	mov	r2, r3
   b683a:	f7ff ffdb 	bl	b67f4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b683e:	81a5      	strh	r5, [r4, #12]
}
   b6840:	4620      	mov	r0, r4
   b6842:	bd38      	pop	{r3, r4, r5, pc}

000b6844 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6844:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6846:	6902      	ldr	r2, [r0, #16]
   b6848:	b922      	cbnz	r2, b6854 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b684a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b684c:	3800      	subs	r0, #0
   b684e:	bf18      	it	ne
   b6850:	2001      	movne	r0, #1
}
   b6852:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6854:	4902      	ldr	r1, [pc, #8]	; (b6860 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6856:	2210      	movs	r2, #16
   b6858:	f002 fd80 	bl	b935c <memcmp>
   b685c:	e7f6      	b.n	b684c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b685e:	bf00      	nop
   b6860:	000bb928 	.word	0x000bb928

000b6864 <_ZNK8particle7BleUuid4typeEv>:
}
   b6864:	6900      	ldr	r0, [r0, #16]
   b6866:	4770      	bx	lr

000b6868 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6868:	b538      	push	{r3, r4, r5, lr}
   b686a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b686c:	2214      	movs	r2, #20
   b686e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6870:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6872:	f002 fdab 	bl	b93cc <memset>
    if (type_ == BleUuidType::SHORT) {
   b6876:	6923      	ldr	r3, [r4, #16]
   b6878:	b91b      	cbnz	r3, b6882 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b687a:	89a3      	ldrh	r3, [r4, #12]
   b687c:	802b      	strh	r3, [r5, #0]
}
   b687e:	4628      	mov	r0, r5
   b6880:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6882:	2301      	movs	r3, #1
   b6884:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6886:	4621      	mov	r1, r4
   b6888:	462b      	mov	r3, r5
   b688a:	f104 0210 	add.w	r2, r4, #16
   b688e:	f851 0b04 	ldr.w	r0, [r1], #4
   b6892:	f843 0b04 	str.w	r0, [r3], #4
   b6896:	4291      	cmp	r1, r2
   b6898:	d1f9      	bne.n	b688e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b689a:	e7f0      	b.n	b687e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b689c <_ZNK8particle7BleUuid7shortedEv>:
}
   b689c:	8980      	ldrh	r0, [r0, #12]
   b689e:	4770      	bx	lr

000b68a0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b68a0:	4770      	bx	lr

000b68a2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b68a2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b68a4:	6902      	ldr	r2, [r0, #16]
   b68a6:	690b      	ldr	r3, [r1, #16]
   b68a8:	429a      	cmp	r2, r3
   b68aa:	d106      	bne.n	b68ba <_ZNK8particle7BleUuideqERKS0_+0x18>
   b68ac:	2210      	movs	r2, #16
   b68ae:	f002 fd55 	bl	b935c <memcmp>
   b68b2:	fab0 f080 	clz	r0, r0
   b68b6:	0940      	lsrs	r0, r0, #5
}
   b68b8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b68ba:	2000      	movs	r0, #0
   b68bc:	e7fc      	b.n	b68b8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b68c0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b68c0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b68c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b68c6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b68c8:	4b34      	ldr	r3, [pc, #208]	; (b699c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b68ca:	460c      	mov	r4, r1
   b68cc:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b68ce:	4602      	mov	r2, r0
   b68d0:	f103 0110 	add.w	r1, r3, #16
   b68d4:	f853 0b04 	ldr.w	r0, [r3], #4
   b68d8:	f842 0b04 	str.w	r0, [r2], #4
   b68dc:	428b      	cmp	r3, r1
   b68de:	d1f9      	bne.n	b68d4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b68e0:	b344      	cbz	r4, b6934 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b68e2:	2124      	movs	r1, #36	; 0x24
   b68e4:	4620      	mov	r0, r4
   b68e6:	f002 fde0 	bl	b94aa <strnlen>
   b68ea:	2804      	cmp	r0, #4
   b68ec:	f04f 0500 	mov.w	r5, #0
   b68f0:	d123      	bne.n	b693a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b68f2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b68f6:	af01      	add	r7, sp, #4
   b68f8:	1ca5      	adds	r5, r4, #2
   b68fa:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b68fc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6900:	f7ff ff0d 	bl	b671e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6904:	f1b0 0800 	subs.w	r8, r0, #0
   b6908:	db12      	blt.n	b6930 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b690a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b690e:	f7ff ff06 	bl	b671e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6912:	2800      	cmp	r0, #0
   b6914:	db0c      	blt.n	b6930 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6916:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6918:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b691c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b691e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6922:	d1eb      	bne.n	b68fc <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6924:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6928:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b692a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b692e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6930:	2300      	movs	r3, #0
   b6932:	6133      	str	r3, [r6, #16]
}
   b6934:	b002      	add	sp, #8
   b6936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b693a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b693e:	2124      	movs	r1, #36	; 0x24
   b6940:	4620      	mov	r0, r4
   b6942:	f002 fdb2 	bl	b94aa <strnlen>
   b6946:	42a8      	cmp	r0, r5
   b6948:	d807      	bhi.n	b695a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b694a:	4642      	mov	r2, r8
   b694c:	2100      	movs	r1, #0
   b694e:	4630      	mov	r0, r6
}
   b6950:	b002      	add	sp, #8
   b6952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6956:	f002 bd39 	b.w	b93cc <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b695a:	f1b8 0f00 	cmp.w	r8, #0
   b695e:	d0e9      	beq.n	b6934 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6960:	5d60      	ldrb	r0, [r4, r5]
   b6962:	f7ff fedc 	bl	b671e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6966:	0603      	lsls	r3, r0, #24
   b6968:	d415      	bmi.n	b6996 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b696a:	0100      	lsls	r0, r0, #4
   b696c:	f108 38ff 	add.w	r8, r8, #4294967295
   b6970:	b2c7      	uxtb	r7, r0
   b6972:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6976:	2124      	movs	r1, #36	; 0x24
   b6978:	4620      	mov	r0, r4
   b697a:	f002 fd96 	bl	b94aa <strnlen>
   b697e:	3501      	adds	r5, #1
   b6980:	42a8      	cmp	r0, r5
   b6982:	d908      	bls.n	b6996 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6984:	5d60      	ldrb	r0, [r4, r5]
   b6986:	f7ff feca 	bl	b671e <_ZN8particle11hexToNibbleEc>
   b698a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b698c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b698e:	bfa4      	itt	ge
   b6990:	4338      	orrge	r0, r7
   b6992:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6996:	3501      	adds	r5, #1
   b6998:	e7d1      	b.n	b693e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b699a:	bf00      	nop
   b699c:	000bb48e 	.word	0x000bb48e

000b69a0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b69a0:	b513      	push	{r0, r1, r4, lr}
   b69a2:	4604      	mov	r4, r0
   b69a4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b69a6:	f7ff ff15 	bl	b67d4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b69aa:	4620      	mov	r0, r4
   b69ac:	9901      	ldr	r1, [sp, #4]
   b69ae:	f7ff ff87 	bl	b68c0 <_ZN8particle7BleUuid9constructEPKc>
}
   b69b2:	4620      	mov	r0, r4
   b69b4:	b002      	add	sp, #8
   b69b6:	bd10      	pop	{r4, pc}

000b69b8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b69b8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b69ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b69be:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b69c0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b69c2:	8043      	strh	r3, [r0, #2]
   b69c4:	220e      	movs	r2, #14
   b69c6:	4629      	mov	r1, r5
   b69c8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b69ca:	7105      	strb	r5, [r0, #4]
   b69cc:	3006      	adds	r0, #6
   b69ce:	f002 fcfd 	bl	b93cc <memset>
   b69d2:	f104 0014 	add.w	r0, r4, #20
   b69d6:	f7ff fefd 	bl	b67d4 <_ZN8particle7BleUuidC1Ev>
   b69da:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b69de:	f7ff fef9 	bl	b67d4 <_ZN8particle7BleUuidC1Ev>
   b69e2:	4904      	ldr	r1, [pc, #16]	; (b69f4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b69e4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b69e8:	f7ff fd52 	bl	b6490 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b69ec:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b69ee:	4620      	mov	r0, r4
   b69f0:	bd38      	pop	{r3, r4, r5, pc}
   b69f2:	bf00      	nop
   b69f4:	000bbca8 	.word	0x000bbca8

000b69f8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b69f8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b69fa:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b69fe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6a02:	4293      	cmp	r3, r2
   b6a04:	4618      	mov	r0, r3
   b6a06:	d006      	beq.n	b6a16 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6a08:	6804      	ldr	r4, [r0, #0]
   b6a0a:	8824      	ldrh	r4, [r4, #0]
   b6a0c:	428c      	cmp	r4, r1
   b6a0e:	f103 0308 	add.w	r3, r3, #8
   b6a12:	d1f6      	bne.n	b6a02 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6a14:	bd10      	pop	{r4, pc}
        return nullptr;
   b6a16:	2000      	movs	r0, #0
   b6a18:	e7fc      	b.n	b6a14 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a1e:	4606      	mov	r6, r0
   b6a20:	b085      	sub	sp, #20
   b6a22:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6a24:	460d      	mov	r5, r1
   b6a26:	2900      	cmp	r1, #0
   b6a28:	d050      	beq.n	b6acc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6a2a:	2a00      	cmp	r2, #0
   b6a2c:	d04e      	beq.n	b6acc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6a2e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6a30:	7823      	ldrb	r3, [r4, #0]
   b6a32:	2af4      	cmp	r2, #244	; 0xf4
   b6a34:	bf28      	it	cs
   b6a36:	22f4      	movcs	r2, #244	; 0xf4
   b6a38:	b343      	cbz	r3, b6a8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6a3a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6a3c:	0798      	lsls	r0, r3, #30
   b6a3e:	d509      	bpl.n	b6a54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6a40:	89a0      	ldrh	r0, [r4, #12]
   b6a42:	9203      	str	r2, [sp, #12]
   b6a44:	2300      	movs	r3, #0
   b6a46:	f7ff f9a1 	bl	b5d8c <hal_ble_gatt_server_set_characteristic_value>
   b6a4a:	2800      	cmp	r0, #0
   b6a4c:	9a03      	ldr	r2, [sp, #12]
   b6a4e:	da03      	bge.n	b6a58 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6a50:	b005      	add	sp, #20
   b6a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6a54:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6a58:	6834      	ldr	r4, [r6, #0]
   b6a5a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6a5c:	06d9      	lsls	r1, r3, #27
   b6a5e:	d509      	bpl.n	b6a74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6a60:	2f01      	cmp	r7, #1
   b6a62:	d007      	beq.n	b6a74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a64:	89a0      	ldrh	r0, [r4, #12]
   b6a66:	2300      	movs	r3, #0
   b6a68:	4629      	mov	r1, r5
}
   b6a6a:	b005      	add	sp, #20
   b6a6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a70:	f7ff b9be 	b.w	b5df0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6a74:	069b      	lsls	r3, r3, #26
   b6a76:	d5eb      	bpl.n	b6a50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6a78:	2f02      	cmp	r7, #2
   b6a7a:	d0e9      	beq.n	b6a50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a7c:	89a0      	ldrh	r0, [r4, #12]
   b6a7e:	2300      	movs	r3, #0
   b6a80:	4629      	mov	r1, r5
}
   b6a82:	b005      	add	sp, #20
   b6a84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a88:	f7ff b9bc 	b.w	b5e04 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6a8c:	8860      	ldrh	r0, [r4, #2]
   b6a8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6a92:	4288      	cmp	r0, r1
   b6a94:	d01c      	beq.n	b6ad0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6a96:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6a98:	074e      	lsls	r6, r1, #29
   b6a9a:	d501      	bpl.n	b6aa0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6a9c:	2f01      	cmp	r7, #1
   b6a9e:	d104      	bne.n	b6aaa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6aa0:	070b      	lsls	r3, r1, #28
   b6aa2:	d409      	bmi.n	b6ab8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6aa4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6aa8:	e7d2      	b.n	b6a50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6aaa:	89a1      	ldrh	r1, [r4, #12]
   b6aac:	9300      	str	r3, [sp, #0]
   b6aae:	4613      	mov	r3, r2
   b6ab0:	462a      	mov	r2, r5
   b6ab2:	f7ff f97f 	bl	b5db4 <hal_ble_gatt_client_write_without_response>
   b6ab6:	e7cb      	b.n	b6a50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6ab8:	2f02      	cmp	r7, #2
   b6aba:	d0f3      	beq.n	b6aa4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6abc:	2300      	movs	r3, #0
   b6abe:	89a1      	ldrh	r1, [r4, #12]
   b6ac0:	9300      	str	r3, [sp, #0]
   b6ac2:	4613      	mov	r3, r2
   b6ac4:	462a      	mov	r2, r5
   b6ac6:	f7ff f96b 	bl	b5da0 <hal_ble_gatt_client_write_with_response>
   b6aca:	e7c1      	b.n	b6a50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6acc:	4802      	ldr	r0, [pc, #8]	; (b6ad8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6ace:	e7bf      	b.n	b6a50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6ad0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6ad4:	e7bc      	b.n	b6a50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6ad6:	bf00      	nop
   b6ad8:	fffffef2 	.word	0xfffffef2

000b6adc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6ade:	460c      	mov	r4, r1
   b6ae0:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6ae2:	21f4      	movs	r1, #244	; 0xf4
   b6ae4:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6ae6:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6ae8:	f002 fcdf 	bl	b94aa <strnlen>
   b6aec:	9b01      	ldr	r3, [sp, #4]
   b6aee:	4602      	mov	r2, r0
   b6af0:	4621      	mov	r1, r4
   b6af2:	4628      	mov	r0, r5
}
   b6af4:	b003      	add	sp, #12
   b6af6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6afa:	f7ff bf8f 	b.w	b6a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b6b00 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6b04:	2600      	movs	r6, #0
   b6b06:	6006      	str	r6, [r0, #0]
   b6b08:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6b0a:	2028      	movs	r0, #40	; 0x28
   b6b0c:	460c      	mov	r4, r1
   b6b0e:	f7fe f83c 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b6b12:	1e05      	subs	r5, r0, #0
   b6b14:	f105 080c 	add.w	r8, r5, #12
   b6b18:	d00f      	beq.n	b6b3a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6b1a:	2301      	movs	r3, #1
   b6b1c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6b20:	4b08      	ldr	r3, [pc, #32]	; (b6b44 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6b22:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6b24:	4640      	mov	r0, r8
   b6b26:	f7ff fe55 	bl	b67d4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6b2c:	622e      	str	r6, [r5, #32]
   b6b2e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6b32:	4646      	mov	r6, r8
   b6b34:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6b36:	6823      	ldr	r3, [r4, #0]
   b6b38:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6b3a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6b3e:	4638      	mov	r0, r7
   b6b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6b44:	000bb8e0 	.word	0x000bb8e0

000b6b48 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6b48:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6b4a:	2500      	movs	r5, #0
   b6b4c:	6005      	str	r5, [r0, #0]
   b6b4e:	4606      	mov	r6, r0
   b6b50:	2030      	movs	r0, #48	; 0x30
   b6b52:	f7fe f81a 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b6b56:	4604      	mov	r4, r0
   b6b58:	b188      	cbz	r0, b6b7e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6b5a:	2301      	movs	r3, #1
   b6b5c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6b60:	4b09      	ldr	r3, [pc, #36]	; (b6b88 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6b62:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6b68:	8183      	strh	r3, [r0, #12]
   b6b6a:	300e      	adds	r0, #14
   b6b6c:	f7ff fe27 	bl	b67be <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6b70:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6b74:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6b78:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6b7c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6b7e:	6074      	str	r4, [r6, #4]
   b6b80:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6b82:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6b84:	4630      	mov	r0, r6
   b6b86:	bd70      	pop	{r4, r5, r6, pc}
   b6b88:	000bb8fc 	.word	0x000bb8fc

000b6b8c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b8e:	460d      	mov	r5, r1
   b6b90:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6b92:	a801      	add	r0, sp, #4
   b6b94:	f7ff fdd8 	bl	b6748 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6b98:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6b9a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6b9e:	6023      	str	r3, [r4, #0]
   b6ba0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6ba4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6ba6:	a801      	add	r0, sp, #4
   b6ba8:	f7ff fddc 	bl	b6764 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6bac:	4620      	mov	r0, r4
   b6bae:	b003      	add	sp, #12
   b6bb0:	bd30      	pop	{r4, r5, pc}

000b6bb2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6bb2:	b530      	push	{r4, r5, lr}
   b6bb4:	4605      	mov	r5, r0
   b6bb6:	b087      	sub	sp, #28
   b6bb8:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6bba:	a801      	add	r0, sp, #4
   b6bbc:	f7ff fdc4 	bl	b6748 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6bc0:	682a      	ldr	r2, [r5, #0]
   b6bc2:	6823      	ldr	r3, [r4, #0]
   b6bc4:	8812      	ldrh	r2, [r2, #0]
   b6bc6:	881b      	ldrh	r3, [r3, #0]
   b6bc8:	429a      	cmp	r2, r3
   b6bca:	d10d      	bne.n	b6be8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6bcc:	4629      	mov	r1, r5
   b6bce:	a802      	add	r0, sp, #8
   b6bd0:	f7ff ffdc 	bl	b6b8c <_ZNK8particle13BlePeerDevice7addressEv>
   b6bd4:	4621      	mov	r1, r4
   b6bd6:	a804      	add	r0, sp, #16
   b6bd8:	f7ff ffd8 	bl	b6b8c <_ZNK8particle13BlePeerDevice7addressEv>
   b6bdc:	a904      	add	r1, sp, #16
   b6bde:	a802      	add	r0, sp, #8
   b6be0:	f7ff fdd9 	bl	b6796 <_ZNK8particle10BleAddresseqERKS0_>
   b6be4:	4604      	mov	r4, r0
   b6be6:	b900      	cbnz	r0, b6bea <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6be8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6bea:	a801      	add	r0, sp, #4
   b6bec:	f7ff fdba 	bl	b6764 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6bf0:	4620      	mov	r0, r4
   b6bf2:	b007      	add	sp, #28
   b6bf4:	bd30      	pop	{r4, r5, pc}
	...

000b6bf8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6bf8:	b510      	push	{r4, lr}
   b6bfa:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6bfc:	2064      	movs	r0, #100	; 0x64
   b6bfe:	f7fd ffc4 	bl	b4b8a <_Znwj>
   b6c02:	b168      	cbz	r0, b6c20 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6c04:	2300      	movs	r3, #0
   b6c06:	e9c0 3300 	strd	r3, r3, [r0]
   b6c0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6c12:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6c16:	6203      	str	r3, [r0, #32]
   b6c18:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6c1a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6c1c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6c1e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6c20:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6c22:	b920      	cbnz	r0, b6c2e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6c24:	4a0a      	ldr	r2, [pc, #40]	; (b6c50 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6c26:	490b      	ldr	r1, [pc, #44]	; (b6c54 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6c28:	200a      	movs	r0, #10
   b6c2a:	f7ff fa05 	bl	b6038 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6c2e:	2000      	movs	r0, #0
   b6c30:	f7ff f870 	bl	b5d14 <hal_ble_stack_init>
   b6c34:	b120      	cbz	r0, b6c40 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6c36:	4a06      	ldr	r2, [pc, #24]	; (b6c50 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6c38:	4907      	ldr	r1, [pc, #28]	; (b6c58 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6c3a:	200a      	movs	r0, #10
   b6c3c:	f7ff f9fc 	bl	b6038 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6c40:	6821      	ldr	r1, [r4, #0]
   b6c42:	4806      	ldr	r0, [pc, #24]	; (b6c5c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6c44:	2200      	movs	r2, #0
   b6c46:	f7ff f8c9 	bl	b5ddc <hal_ble_set_callback_on_periph_link_events>
}
   b6c4a:	4620      	mov	r0, r4
   b6c4c:	bd10      	pop	{r4, pc}
   b6c4e:	bf00      	nop
   b6c50:	000b5cd5 	.word	0x000b5cd5
   b6c54:	000bb770 	.word	0x000bb770
   b6c58:	000bb7ae 	.word	0x000bb7ae
   b6c5c:	000b7209 	.word	0x000b7209

000b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6c60:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6c62:	4c0a      	ldr	r4, [pc, #40]	; (b6c8c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6c64:	7823      	ldrb	r3, [r4, #0]
   b6c66:	f3bf 8f5b 	dmb	ish
   b6c6a:	07db      	lsls	r3, r3, #31
   b6c6c:	d40c      	bmi.n	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6c6e:	4620      	mov	r0, r4
   b6c70:	f7fd ff93 	bl	b4b9a <__cxa_guard_acquire>
   b6c74:	b140      	cbz	r0, b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6c76:	4806      	ldr	r0, [pc, #24]	; (b6c90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6c78:	f7ff ffbe 	bl	b6bf8 <_ZN8particle14BleLocalDeviceC1Ev>
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	f7fd ff91 	bl	b4ba4 <__cxa_guard_release>
   b6c82:	4804      	ldr	r0, [pc, #16]	; (b6c94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6c84:	f002 fb64 	bl	b9350 <atexit>
    return instance;
}
   b6c88:	4801      	ldr	r0, [pc, #4]	; (b6c90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6c8a:	bd10      	pop	{r4, pc}
   b6c8c:	2003e5f8 	.word	0x2003e5f8
   b6c90:	2003e604 	.word	0x2003e604
   b6c94:	000b6eb1 	.word	0x000b6eb1

000b6c98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6c98:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6c9a:	6803      	ldr	r3, [r0, #0]
   b6c9c:	3b09      	subs	r3, #9
   b6c9e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6ca0:	b08d      	sub	sp, #52	; 0x34
   b6ca2:	4604      	mov	r4, r0
   b6ca4:	460d      	mov	r5, r1
    switch (event->type) {
   b6ca6:	d811      	bhi.n	b6ccc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6ca8:	f7ff ffda 	bl	b6c60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6cac:	88a1      	ldrh	r1, [r4, #4]
   b6cae:	6800      	ldr	r0, [r0, #0]
   b6cb0:	f7ff fea2 	bl	b69f8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6cb4:	4603      	mov	r3, r0
   b6cb6:	b958      	cbnz	r0, b6cd0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6cb8:	2220      	movs	r2, #32
   b6cba:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6cbe:	4a0b      	ldr	r2, [pc, #44]	; (b6cec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6cc0:	9200      	str	r2, [sp, #0]
   b6cc2:	490b      	ldr	r1, [pc, #44]	; (b6cf0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6cc4:	aa04      	add	r2, sp, #16
   b6cc6:	2032      	movs	r0, #50	; 0x32
   b6cc8:	f7ff f9be 	bl	b6048 <log_message>
}
   b6ccc:	b00d      	add	sp, #52	; 0x34
   b6cce:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6cd0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6cd2:	2a00      	cmp	r2, #0
   b6cd4:	d0fa      	beq.n	b6ccc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6cd6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6cda:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6cde:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6ce2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6ce4:	aa04      	add	r2, sp, #16
   b6ce6:	a903      	add	r1, sp, #12
   b6ce8:	47a0      	blx	r4
}
   b6cea:	e7ef      	b.n	b6ccc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6cec:	000bb7f0 	.word	0x000bb7f0
   b6cf0:	000bb787 	.word	0x000bb787

000b6cf4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6cf4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6cf6:	2000      	movs	r0, #0
   b6cf8:	f7ff f80c 	bl	b5d14 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6cfc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6d00:	bd08      	pop	{r3, pc}

000b6d02 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b6d02:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b6d04:	2100      	movs	r1, #0
   b6d06:	f7ff b80d 	b.w	b5d24 <hal_ble_select_antenna>

000b6d0a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6d0a:	b919      	cbnz	r1, b6d14 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6d0c:	460a      	mov	r2, r1
   b6d0e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6d10:	f7ff b810 	b.w	b5d34 <hal_ble_gap_set_advertising_data>
   b6d14:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6d18:	2200      	movs	r2, #0
   b6d1a:	e7f9      	b.n	b6d10 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6d1c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6d1c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6d1e:	69d8      	ldr	r0, [r3, #28]
}
   b6d20:	2800      	cmp	r0, #0
   b6d22:	bfd4      	ite	le
   b6d24:	2000      	movle	r0, #0
   b6d26:	2001      	movgt	r0, #1
   b6d28:	4770      	bx	lr

000b6d2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6d2a:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6d2c:	1e14      	subs	r4, r2, #0
   b6d2e:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6d30:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6d32:	db02      	blt.n	b6d3a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6d34:	1862      	adds	r2, r4, r1
   b6d36:	429a      	cmp	r2, r3
   b6d38:	dd00      	ble.n	b6d3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6d3a:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6d3c:	682a      	ldr	r2, [r5, #0]
   b6d3e:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6d40:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6d42:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6d44:	1a52      	subs	r2, r2, r1
   b6d46:	f002 fb27 	bl	b9398 <memmove>
    size_ -= n;
   b6d4a:	686a      	ldr	r2, [r5, #4]
   b6d4c:	1b12      	subs	r2, r2, r4
   b6d4e:	606a      	str	r2, [r5, #4]
}
   b6d50:	bd38      	pop	{r3, r4, r5, pc}

000b6d52 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6d52:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6d54:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6d56:	4604      	mov	r4, r0
   b6d58:	460d      	mov	r5, r1
   b6d5a:	ab01      	add	r3, sp, #4
   b6d5c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6d60:	f7ff fc86 	bl	b6670 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6d64:	4602      	mov	r2, r0
   b6d66:	b138      	cbz	r0, b6d78 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6d68:	9901      	ldr	r1, [sp, #4]
   b6d6a:	4620      	mov	r0, r4
   b6d6c:	f7ff ffdd 	bl	b6d2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6d70:	4629      	mov	r1, r5
   b6d72:	4620      	mov	r0, r4
   b6d74:	f7ff ffed 	bl	b6d52 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6d78:	b003      	add	sp, #12
   b6d7a:	bd30      	pop	{r4, r5, pc}

000b6d7c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6d7c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6d7e:	460c      	mov	r4, r1
   b6d80:	b929      	cbnz	r1, b6d8e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6d82:	460a      	mov	r2, r1
   b6d84:	4608      	mov	r0, r1
}
   b6d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6d8a:	f7fe bfdb 	b.w	b5d44 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6d8e:	2101      	movs	r1, #1
   b6d90:	4620      	mov	r0, r4
   b6d92:	f7ff ffde 	bl	b6d52 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6d96:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6d9a:	2200      	movs	r2, #0
   b6d9c:	e7f3      	b.n	b6d86 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6d9e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6d9e:	b538      	push	{r3, r4, r5, lr}
   b6da0:	4604      	mov	r4, r0
   b6da2:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6da4:	f7ff ffb1 	bl	b6d0a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6da8:	2800      	cmp	r0, #0
   b6daa:	db0a      	blt.n	b6dc2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6dac:	4629      	mov	r1, r5
   b6dae:	4620      	mov	r0, r4
   b6db0:	f7ff ffe4 	bl	b6d7c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6db4:	2800      	cmp	r0, #0
   b6db6:	db04      	blt.n	b6dc2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b6db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6dbc:	2000      	movs	r0, #0
   b6dbe:	f7fe bfc9 	b.w	b5d54 <hal_ble_gap_start_advertising>
}
   b6dc2:	bd38      	pop	{r3, r4, r5, pc}

000b6dc4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6dc4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6dc6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6dc8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6dca:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6dcc:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6dce:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6dd0:	f7fd fedb 	bl	b4b8a <_Znwj>
   b6dd4:	b118      	cbz	r0, b6dde <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
   b6dd6:	682b      	ldr	r3, [r5, #0]
   b6dd8:	6003      	str	r3, [r0, #0]
   b6dda:	686b      	ldr	r3, [r5, #4]
   b6ddc:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6dde:	4b03      	ldr	r3, [pc, #12]	; (b6dec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6de0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6de2:	4b03      	ldr	r3, [pc, #12]	; (b6df0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6de4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6de6:	60a3      	str	r3, [r4, #8]
      }
   b6de8:	4620      	mov	r0, r4
   b6dea:	bd38      	pop	{r3, r4, r5, pc}
   b6dec:	000b66b1 	.word	0x000b66b1
   b6df0:	000b66c9 	.word	0x000b66c9

000b6df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6df4:	680b      	ldr	r3, [r1, #0]
   b6df6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6df8:	b113      	cbz	r3, b6e00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6dfa:	685a      	ldr	r2, [r3, #4]
   b6dfc:	3201      	adds	r2, #1
   b6dfe:	605a      	str	r2, [r3, #4]
      }
   b6e00:	4770      	bx	lr

000b6e02 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6e02:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6e04:	f851 3b04 	ldr.w	r3, [r1], #4
   b6e08:	4604      	mov	r4, r0
   b6e0a:	f840 3b04 	str.w	r3, [r0], #4
   b6e0e:	f7ff fff1 	bl	b6df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6e12:	6823      	ldr	r3, [r4, #0]
   b6e14:	b90b      	cbnz	r3, b6e1a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6e16:	f7ff fc41 	bl	b669c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6e1a:	4620      	mov	r0, r4
   b6e1c:	bd10      	pop	{r4, pc}

000b6e1e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6e1e:	b510      	push	{r4, lr}
   b6e20:	f851 3b04 	ldr.w	r3, [r1], #4
   b6e24:	4604      	mov	r4, r0
   b6e26:	f840 3b04 	str.w	r3, [r0], #4
   b6e2a:	f7ff ffe3 	bl	b6df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6e2e:	4620      	mov	r0, r4
   b6e30:	bd10      	pop	{r4, pc}

000b6e32 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6e32:	b510      	push	{r4, lr}
   b6e34:	f851 3b04 	ldr.w	r3, [r1], #4
   b6e38:	4604      	mov	r4, r0
   b6e3a:	f840 3b04 	str.w	r3, [r0], #4
   b6e3e:	f7ff ffd9 	bl	b6df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6e42:	4620      	mov	r0, r4
   b6e44:	bd10      	pop	{r4, pc}

000b6e46 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6e46:	b510      	push	{r4, lr}
   b6e48:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6e4a:	3004      	adds	r0, #4
   b6e4c:	f7fd ff8e 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6e50:	4620      	mov	r0, r4
   b6e52:	bd10      	pop	{r4, pc}

000b6e54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6e54:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6e56:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6e5a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6e5c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6e60:	42ae      	cmp	r6, r5
   b6e62:	d004      	beq.n	b6e6e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6e64:	1d28      	adds	r0, r5, #4
   b6e66:	f7fd ff81 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e6a:	3508      	adds	r5, #8
   b6e6c:	e7f8      	b.n	b6e60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6e6e:	6820      	ldr	r0, [r4, #0]
   b6e70:	f7ff f9d6 	bl	b6220 <free>
}
   b6e74:	4620      	mov	r0, r4
   b6e76:	bd70      	pop	{r4, r5, r6, pc}

000b6e78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6e78:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6e7a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6e7e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6e80:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6e84:	42ae      	cmp	r6, r5
   b6e86:	d004      	beq.n	b6e92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6e88:	1d28      	adds	r0, r5, #4
   b6e8a:	f7fd ff6f 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e8e:	3508      	adds	r5, #8
   b6e90:	e7f8      	b.n	b6e84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6e92:	6820      	ldr	r0, [r4, #0]
   b6e94:	f7ff f9c4 	bl	b6220 <free>
}
   b6e98:	4620      	mov	r0, r4
   b6e9a:	bd70      	pop	{r4, r5, r6, pc}

000b6e9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6e9c:	b510      	push	{r4, lr}
   b6e9e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6ea0:	3024      	adds	r0, #36	; 0x24
   b6ea2:	f7ff ffe9 	bl	b6e78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6ea6:	f104 0018 	add.w	r0, r4, #24
   b6eaa:	f7ff ffd3 	bl	b6e54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6eae:	bd10      	pop	{r4, pc}

000b6eb0 <__tcf_0>:
    static BleLocalDevice instance;
   b6eb0:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6eb2:	4b17      	ldr	r3, [pc, #92]	; (b6f10 <__tcf_0+0x60>)
   b6eb4:	681c      	ldr	r4, [r3, #0]
   b6eb6:	b354      	cbz	r4, b6f0e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6eb8:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6ebc:	f7fe f905 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
   b6ec0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6ec4:	f7fe f901 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
   b6ec8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6ecc:	f7fe f8fd 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
   b6ed0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6ed4:	f7fe f8f9 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6ed8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6edc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6ee0:	42ae      	cmp	r6, r5
   b6ee2:	d004      	beq.n	b6eee <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6ee4:	1d28      	adds	r0, r5, #4
   b6ee6:	f7fd ff41 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6eea:	3508      	adds	r5, #8
   b6eec:	e7f8      	b.n	b6ee0 <__tcf_0+0x30>
    ::free(ptr);
   b6eee:	69a0      	ldr	r0, [r4, #24]
   b6ef0:	f7ff f996 	bl	b6220 <free>
    ~BleLocalDeviceImpl() = default;
   b6ef4:	f104 000c 	add.w	r0, r4, #12
   b6ef8:	f7ff ffbe 	bl	b6e78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6efc:	4620      	mov	r0, r4
   b6efe:	f7ff ffa9 	bl	b6e54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6f02:	4620      	mov	r0, r4
   b6f04:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6f0a:	f7fd be44 	b.w	b4b96 <_ZdlPvj>
   b6f0e:	bd70      	pop	{r4, r5, r6, pc}
   b6f10:	2003e604 	.word	0x2003e604

000b6f14 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6f14:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6f16:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6f18:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6f1c:	e9c1 3300 	strd	r3, r3, [r1]
   b6f20:	6803      	ldr	r3, [r0, #0]
   b6f22:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f24:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6f26:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6f28:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6f2a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6f2c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6f2e:	f7fd ff1d 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6f32:	b002      	add	sp, #8
   b6f34:	bd10      	pop	{r4, pc}

000b6f36 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6f36:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6f38:	b510      	push	{r4, lr}
      if (_M_empty())
   b6f3a:	b90a      	cbnz	r2, b6f40 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6f3c:	f001 fe2c 	bl	b8b98 <_ZSt25__throw_bad_function_callv>
    }
   b6f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f44:	68c3      	ldr	r3, [r0, #12]
   b6f46:	4718      	bx	r3

000b6f48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6f48:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6f4a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6f4c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6f4e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6f50:	dd03      	ble.n	b6f5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6f52:	f7ff f96d 	bl	b6230 <realloc>
            if (!d) {
   b6f56:	b918      	cbnz	r0, b6f60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6f58:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6f5a:	f7ff f961 	bl	b6220 <free>
        T* d = nullptr;
   b6f5e:	2000      	movs	r0, #0
        data_ = d;
   b6f60:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6f62:	60a5      	str	r5, [r4, #8]
        return true;
   b6f64:	2001      	movs	r0, #1
   b6f66:	e7f7      	b.n	b6f58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6f68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6f68:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6f6a:	6883      	ldr	r3, [r0, #8]
   b6f6c:	428b      	cmp	r3, r1
   b6f6e:	da02      	bge.n	b6f76 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6f70:	f7ff ffea 	bl	b6f48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6f74:	bd08      	pop	{r3, pc}
    return true;
   b6f76:	2001      	movs	r0, #1
   b6f78:	e7fc      	b.n	b6f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6f7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6f7e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6f80:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6f82:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6f84:	4419      	add	r1, r3
   b6f86:	6883      	ldr	r3, [r0, #8]
   b6f88:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6f8a:	4604      	mov	r4, r0
   b6f8c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6f8e:	dc12      	bgt.n	b6fb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6f90:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f92:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f94:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f96:	1bd2      	subs	r2, r2, r7
   b6f98:	4631      	mov	r1, r6
   b6f9a:	1970      	adds	r0, r6, r5
   b6f9c:	f002 f9fc 	bl	b9398 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6fa0:	462a      	mov	r2, r5
   b6fa2:	4641      	mov	r1, r8
   b6fa4:	4630      	mov	r0, r6
   b6fa6:	f002 f9e9 	bl	b937c <memcpy>
    size_ += n;
   b6faa:	6863      	ldr	r3, [r4, #4]
   b6fac:	442b      	add	r3, r5
   b6fae:	6063      	str	r3, [r4, #4]
    return true;
   b6fb0:	2001      	movs	r0, #1
}
   b6fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6fb6:	f7ff ffc7 	bl	b6f48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6fba:	2800      	cmp	r0, #0
   b6fbc:	d1e8      	bne.n	b6f90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6fbe:	e7f8      	b.n	b6fb2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6fc0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fc2:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6fc4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6fc8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6fca:	4604      	mov	r4, r0
   b6fcc:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6fce:	da0b      	bge.n	b6fe8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6fd0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6fd2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6fd4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6fd6:	1b52      	subs	r2, r2, r5
   b6fd8:	1c48      	adds	r0, r1, #1
   b6fda:	f002 f9dd 	bl	b9398 <memmove>
    new(p) T(std::move(value));
   b6fde:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6fe0:	6863      	ldr	r3, [r4, #4]
   b6fe2:	3301      	adds	r3, #1
   b6fe4:	6063      	str	r3, [r4, #4]
}
   b6fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6fe8:	3101      	adds	r1, #1
   b6fea:	f7ff ffad 	bl	b6f48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6fee:	2800      	cmp	r0, #0
   b6ff0:	d1ee      	bne.n	b6fd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6ff2:	e7f8      	b.n	b6fe6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6ff4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6ff4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6ff6:	6841      	ldr	r1, [r0, #4]
   b6ff8:	f7ff bfe2 	b.w	b6fc0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6ffc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7000:	4604      	mov	r4, r0
   b7002:	461d      	mov	r5, r3
   b7004:	460f      	mov	r7, r1
   b7006:	ab01      	add	r3, sp, #4
   b7008:	4690      	mov	r8, r2
   b700a:	460a      	mov	r2, r1
   b700c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7010:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7014:	f7ff fb2c 	bl	b6670 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7018:	1cae      	adds	r6, r5, #2
   b701a:	6863      	ldr	r3, [r4, #4]
   b701c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b701e:	f1b9 0f00 	cmp.w	r9, #0
   b7022:	d126      	bne.n	b7072 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7024:	b328      	cbz	r0, b7072 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7026:	4433      	add	r3, r6
   b7028:	1a1b      	subs	r3, r3, r0
   b702a:	2bff      	cmp	r3, #255	; 0xff
   b702c:	d809      	bhi.n	b7042 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b702e:	9901      	ldr	r1, [sp, #4]
   b7030:	4620      	mov	r0, r4
   b7032:	f7ff fe7a 	bl	b6d2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7036:	6861      	ldr	r1, [r4, #4]
   b7038:	4620      	mov	r0, r4
   b703a:	4431      	add	r1, r6
   b703c:	f7ff ff94 	bl	b6f68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7040:	b918      	cbnz	r0, b704a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7042:	6860      	ldr	r0, [r4, #4]
}
   b7044:	b003      	add	sp, #12
   b7046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b704a:	1c6a      	adds	r2, r5, #1
   b704c:	9901      	ldr	r1, [sp, #4]
   b704e:	b2d2      	uxtb	r2, r2
   b7050:	4620      	mov	r0, r4
   b7052:	f7ff ffb5 	bl	b6fc0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7056:	9901      	ldr	r1, [sp, #4]
   b7058:	463a      	mov	r2, r7
   b705a:	3101      	adds	r1, #1
   b705c:	4620      	mov	r0, r4
   b705e:	f7ff ffaf 	bl	b6fc0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7062:	9901      	ldr	r1, [sp, #4]
   b7064:	462b      	mov	r3, r5
   b7066:	4642      	mov	r2, r8
   b7068:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b706a:	4620      	mov	r0, r4
   b706c:	f7ff ff85 	bl	b6f7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7070:	e7e7      	b.n	b7042 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7072:	18f1      	adds	r1, r6, r3
   b7074:	29ff      	cmp	r1, #255	; 0xff
   b7076:	d8e4      	bhi.n	b7042 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7078:	4620      	mov	r0, r4
   b707a:	f7ff ff75 	bl	b6f68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b707e:	2800      	cmp	r0, #0
   b7080:	d0df      	beq.n	b7042 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7082:	1c69      	adds	r1, r5, #1
   b7084:	b2c9      	uxtb	r1, r1
   b7086:	4620      	mov	r0, r4
   b7088:	f7ff ffb4 	bl	b6ff4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b708c:	4639      	mov	r1, r7
   b708e:	4620      	mov	r0, r4
   b7090:	f7ff ffb0 	bl	b6ff4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7094:	6861      	ldr	r1, [r4, #4]
   b7096:	462b      	mov	r3, r5
   b7098:	4642      	mov	r2, r8
   b709a:	e7e6      	b.n	b706a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b709c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b709c:	b430      	push	{r4, r5}
   b709e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b70a2:	b11a      	cbz	r2, b70ac <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b70a4:	9502      	str	r5, [sp, #8]
}
   b70a6:	bc30      	pop	{r4, r5}
   b70a8:	f7ff bfa8 	b.w	b6ffc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b70ac:	6840      	ldr	r0, [r0, #4]
}
   b70ae:	bc30      	pop	{r4, r5}
   b70b0:	4770      	bx	lr

000b70b2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b70b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b70b4:	2300      	movs	r3, #0
   b70b6:	e9c0 3300 	strd	r3, r3, [r0]
   b70ba:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b70bc:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b70be:	9300      	str	r3, [sp, #0]
   b70c0:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b70c2:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b70c6:	4619      	mov	r1, r3
   b70c8:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b70cc:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b70ce:	f7ff ffe5 	bl	b709c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b70d2:	4620      	mov	r0, r4
   b70d4:	b004      	add	sp, #16
   b70d6:	bd10      	pop	{r4, pc}

000b70d8 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b70d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b70da:	460a      	mov	r2, r1
   b70dc:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b70de:	2114      	movs	r1, #20
   b70e0:	4610      	mov	r0, r2
   b70e2:	9203      	str	r2, [sp, #12]
   b70e4:	f002 f9e1 	bl	b94aa <strnlen>
   b70e8:	2100      	movs	r1, #0
   b70ea:	4603      	mov	r3, r0
   b70ec:	9100      	str	r1, [sp, #0]
   b70ee:	9a03      	ldr	r2, [sp, #12]
   b70f0:	2109      	movs	r1, #9
   b70f2:	4620      	mov	r0, r4
   b70f4:	f7ff ffd2 	bl	b709c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b70f8:	b004      	add	sp, #16
   b70fa:	bd10      	pop	{r4, pc}

000b70fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b70fc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b70fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7100:	4604      	mov	r4, r0
   b7102:	460d      	mov	r5, r1
   b7104:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7106:	d914      	bls.n	b7132 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7108:	4290      	cmp	r0, r2
   b710a:	d213      	bcs.n	b7134 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b710c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7110:	1a75      	subs	r5, r6, r1
   b7112:	f1a1 0708 	sub.w	r7, r1, #8
   b7116:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7118:	42b7      	cmp	r7, r6
   b711a:	d018      	beq.n	b714e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b711c:	b11c      	cbz	r4, b7126 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b711e:	4631      	mov	r1, r6
   b7120:	4620      	mov	r0, r4
   b7122:	f7ff fe86 	bl	b6e32 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7126:	1d30      	adds	r0, r6, #4
   b7128:	f7fd fe20 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b712c:	3e08      	subs	r6, #8
   b712e:	3c08      	subs	r4, #8
   b7130:	e7f2      	b.n	b7118 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7132:	d00c      	beq.n	b714e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7134:	42b5      	cmp	r5, r6
   b7136:	d00a      	beq.n	b714e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7138:	b11c      	cbz	r4, b7142 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b713a:	4629      	mov	r1, r5
   b713c:	4620      	mov	r0, r4
   b713e:	f7ff fe78 	bl	b6e32 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7142:	1d28      	adds	r0, r5, #4
   b7144:	f7fd fe12 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7148:	3508      	adds	r5, #8
   b714a:	3408      	adds	r4, #8
   b714c:	e7f2      	b.n	b7134 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b714e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7150 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7152:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7154:	6846      	ldr	r6, [r0, #4]
   b7156:	4668      	mov	r0, sp
   b7158:	f7ff fe6b 	bl	b6e32 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b715c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7160:	429f      	cmp	r7, r3
   b7162:	db12      	blt.n	b718a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7164:	3701      	adds	r7, #1
        if (n > 0) {
   b7166:	2f00      	cmp	r7, #0
   b7168:	dd29      	ble.n	b71be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b716a:	00f8      	lsls	r0, r7, #3
   b716c:	f7ff f850 	bl	b6210 <malloc>
            if (!d) {
   b7170:	4605      	mov	r5, r0
   b7172:	b1f0      	cbz	r0, b71b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7174:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7178:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b717c:	f7ff ffbe 	bl	b70fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7180:	6820      	ldr	r0, [r4, #0]
   b7182:	f7ff f84d 	bl	b6220 <free>
        data_ = d;
   b7186:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7188:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b718a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b718c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b718e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7192:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7196:	4631      	mov	r1, r6
   b7198:	f106 0008 	add.w	r0, r6, #8
   b719c:	f7ff ffae 	bl	b70fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b71a0:	b11e      	cbz	r6, b71aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b71a2:	4669      	mov	r1, sp
   b71a4:	4630      	mov	r0, r6
   b71a6:	f7ff fe44 	bl	b6e32 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b71aa:	6863      	ldr	r3, [r4, #4]
   b71ac:	3301      	adds	r3, #1
   b71ae:	6063      	str	r3, [r4, #4]
    return true;
   b71b0:	2501      	movs	r5, #1
   b71b2:	a801      	add	r0, sp, #4
   b71b4:	f7fd fdda 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b71b8:	4628      	mov	r0, r5
   b71ba:	b003      	add	sp, #12
   b71bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b71be:	2500      	movs	r5, #0
   b71c0:	e7de      	b.n	b7180 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b71c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b71c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b71c4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b71c8:	4605      	mov	r5, r0
   b71ca:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b71cc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b71d0:	42a6      	cmp	r6, r4
   b71d2:	d005      	beq.n	b71e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b71d4:	4639      	mov	r1, r7
   b71d6:	4620      	mov	r0, r4
   b71d8:	f7ff fceb 	bl	b6bb2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b71dc:	b108      	cbz	r0, b71e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b71de:	b914      	cbnz	r4, b71e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b71e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b71e2:	3408      	adds	r4, #8
   b71e4:	e7f4      	b.n	b71d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b71e6:	1d20      	adds	r0, r4, #4
   b71e8:	f7fd fdc0 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b71ec:	e9d5 3200 	ldrd	r3, r2, [r5]
   b71f0:	f104 0108 	add.w	r1, r4, #8
   b71f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b71f8:	4620      	mov	r0, r4
   b71fa:	f7ff ff7f 	bl	b70fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b71fe:	686b      	ldr	r3, [r5, #4]
   b7200:	3b01      	subs	r3, #1
   b7202:	606b      	str	r3, [r5, #4]
    return true;
   b7204:	e7ec      	b.n	b71e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7208 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b720c:	4605      	mov	r5, r0
   b720e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7210:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7212:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7214:	f7ff fa98 	bl	b6748 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7218:	682e      	ldr	r6, [r5, #0]
   b721a:	1ef3      	subs	r3, r6, #3
   b721c:	2b0d      	cmp	r3, #13
   b721e:	d83c      	bhi.n	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7220:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7224:	0053000e 	.word	0x0053000e
   b7228:	00d1003b 	.word	0x00d1003b
   b722c:	003b003b 	.word	0x003b003b
   b7230:	003b003b 	.word	0x003b003b
   b7234:	009b003b 	.word	0x009b003b
   b7238:	009b009b 	.word	0x009b009b
   b723c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7240:	a804      	add	r0, sp, #16
   b7242:	f7ff fc81 	bl	b6b48 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7246:	9b04      	ldr	r3, [sp, #16]
   b7248:	89aa      	ldrh	r2, [r5, #12]
   b724a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b724c:	6869      	ldr	r1, [r5, #4]
   b724e:	9804      	ldr	r0, [sp, #16]
   b7250:	3108      	adds	r1, #8
   b7252:	3002      	adds	r0, #2
   b7254:	f7ff fa92 	bl	b677c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7258:	a904      	add	r1, sp, #16
   b725a:	a806      	add	r0, sp, #24
   b725c:	f7ff fde9 	bl	b6e32 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7260:	a906      	add	r1, sp, #24
   b7262:	f104 0018 	add.w	r0, r4, #24
   b7266:	f7ff ff73 	bl	b7150 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b726a:	4605      	mov	r5, r0
   b726c:	a807      	add	r0, sp, #28
   b726e:	f7fd fd7d 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7272:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7274:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7276:	b9b5      	cbnz	r5, b72a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7278:	4b5d      	ldr	r3, [pc, #372]	; (b73f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b727a:	495e      	ldr	r1, [pc, #376]	; (b73f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b727c:	9300      	str	r3, [sp, #0]
   b727e:	2032      	movs	r0, #50	; 0x32
   b7280:	462b      	mov	r3, r5
   b7282:	aa06      	add	r2, sp, #24
   b7284:	9507      	str	r5, [sp, #28]
   b7286:	f7fe fedf 	bl	b6048 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b728a:	9b04      	ldr	r3, [sp, #16]
   b728c:	4629      	mov	r1, r5
   b728e:	8818      	ldrh	r0, [r3, #0]
   b7290:	f7fe fd68 	bl	b5d64 <hal_ble_gap_disconnect>
   b7294:	a805      	add	r0, sp, #20
   b7296:	f7fd fd69 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b729a:	a803      	add	r0, sp, #12
   b729c:	f7ff fa62 	bl	b6764 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b72a0:	b00e      	add	sp, #56	; 0x38
   b72a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b72a6:	4a54      	ldr	r2, [pc, #336]	; (b73f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b72a8:	9200      	str	r2, [sp, #0]
   b72aa:	2300      	movs	r3, #0
   b72ac:	4951      	ldr	r1, [pc, #324]	; (b73f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b72ae:	9307      	str	r3, [sp, #28]
   b72b0:	aa06      	add	r2, sp, #24
   b72b2:	2001      	movs	r0, #1
   b72b4:	f7fe fec8 	bl	b6048 <log_message>
                if (impl->connectedCallback_) {
   b72b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b72ba:	2b00      	cmp	r3, #0
   b72bc:	d0ea      	beq.n	b7294 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b72be:	a904      	add	r1, sp, #16
   b72c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b72c4:	f7ff fe37 	bl	b6f36 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b72c8:	e7e4      	b.n	b7294 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b72ca:	89a9      	ldrh	r1, [r5, #12]
   b72cc:	4620      	mov	r0, r4
   b72ce:	f7ff fb93 	bl	b69f8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b72d2:	4606      	mov	r6, r0
   b72d4:	2800      	cmp	r0, #0
   b72d6:	d0e0      	beq.n	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b72d8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b72da:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b72de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b72e2:	8029      	strh	r1, [r5, #0]
   b72e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b72e8:	429a      	cmp	r2, r3
   b72ea:	d003      	beq.n	b72f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b72ec:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b72f0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b72f2:	e7f9      	b.n	b72e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b72f4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b72f8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b72fc:	45b8      	cmp	r8, r7
   b72fe:	d004      	beq.n	b730a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7300:	1d38      	adds	r0, r7, #4
   b7302:	f7fd fd33 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7306:	3708      	adds	r7, #8
   b7308:	e7f8      	b.n	b72fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b730a:	2300      	movs	r3, #0
   b730c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b730e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7312:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7316:	45b8      	cmp	r8, r7
   b7318:	d004      	beq.n	b7324 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b731a:	1d38      	adds	r0, r7, #4
   b731c:	f7fd fd26 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7320:	3708      	adds	r7, #8
   b7322:	e7f8      	b.n	b7316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7324:	2300      	movs	r3, #0
   b7326:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7328:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b732a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b732c:	b123      	cbz	r3, b7338 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b732e:	4631      	mov	r1, r6
   b7330:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7334:	f7ff fdff 	bl	b6f36 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7338:	2300      	movs	r3, #0
   b733a:	2220      	movs	r2, #32
   b733c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7340:	4a2e      	ldr	r2, [pc, #184]	; (b73fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7342:	9200      	str	r2, [sp, #0]
   b7344:	492b      	ldr	r1, [pc, #172]	; (b73f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7346:	aa06      	add	r2, sp, #24
   b7348:	2001      	movs	r0, #1
   b734a:	f7fe fe7d 	bl	b6048 <log_message>
                    impl->peers_.removeOne(*peer);
   b734e:	4631      	mov	r1, r6
   b7350:	f104 0018 	add.w	r0, r4, #24
   b7354:	f7ff ff35 	bl	b71c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7358:	e79f      	b.n	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b735a:	89a9      	ldrh	r1, [r5, #12]
   b735c:	4620      	mov	r0, r4
   b735e:	f7ff fb4b 	bl	b69f8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7362:	2800      	cmp	r0, #0
   b7364:	d099      	beq.n	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7366:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7368:	2b00      	cmp	r3, #0
   b736a:	d096      	beq.n	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b736c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b736e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7370:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7374:	d001      	beq.n	b737a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7376:	2e10      	cmp	r6, #16
   b7378:	d117      	bne.n	b73aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b737a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b737c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b737e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7380:	2506      	movs	r5, #6
                        };
   b7382:	f88d 3015 	strb.w	r3, [sp, #21]
   b7386:	9104      	str	r1, [sp, #16]
   b7388:	f88d 2014 	strb.w	r2, [sp, #20]
   b738c:	9006      	str	r0, [sp, #24]
   b738e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7392:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7394:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7398:	9508      	str	r5, [sp, #32]
   b739a:	e883 0003 	stmia.w	r3, {r0, r1}
   b739e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b73a0:	a906      	add	r1, sp, #24
   b73a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b73a6:	4798      	blx	r3
   b73a8:	e777      	b.n	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b73aa:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b73ac:	bf01      	itttt	eq
   b73ae:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b73b0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b73b2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b73b6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b73b8:	bf0f      	iteee	eq
   b73ba:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b73be:	461a      	movne	r2, r3
   b73c0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b73c2:	461d      	movne	r5, r3
   b73c4:	e7dd      	b.n	b7382 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b73c6:	89a9      	ldrh	r1, [r5, #12]
   b73c8:	4620      	mov	r0, r4
   b73ca:	f7ff fb15 	bl	b69f8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b73ce:	4601      	mov	r1, r0
   b73d0:	2800      	cmp	r0, #0
   b73d2:	f43f af62 	beq.w	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b73d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b73d8:	2b00      	cmp	r3, #0
   b73da:	f43f af5e 	beq.w	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b73de:	686b      	ldr	r3, [r5, #4]
   b73e0:	9306      	str	r3, [sp, #24]
   b73e2:	aa06      	add	r2, sp, #24
   b73e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b73e6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b73ea:	4798      	blx	r3
   b73ec:	e755      	b.n	b729a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b73ee:	bf00      	nop
   b73f0:	000bb808 	.word	0x000bb808
   b73f4:	000bb787 	.word	0x000bb787
   b73f8:	000bb82e 	.word	0x000bb82e
   b73fc:	000bb84b 	.word	0x000bb84b

000b7400 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7400:	b513      	push	{r0, r1, r4, lr}
   b7402:	460b      	mov	r3, r1
   b7404:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7406:	e9d0 0100 	ldrd	r0, r1, [r0]
   b740a:	466c      	mov	r4, sp
   b740c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7410:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7414:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7418:	e894 0003 	ldmia.w	r4, {r0, r1}
   b741c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7420:	b002      	add	sp, #8
   b7422:	bd10      	pop	{r4, pc}

000b7424 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7424:	b538      	push	{r3, r4, r5, lr}
   b7426:	4605      	mov	r5, r0
   b7428:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b742a:	f7ff ffe9 	bl	b7400 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b742e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7430:	68a2      	ldr	r2, [r4, #8]
   b7432:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7434:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7436:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7438:	68e2      	ldr	r2, [r4, #12]
   b743a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b743c:	60e3      	str	r3, [r4, #12]
      }
   b743e:	bd38      	pop	{r3, r4, r5, pc}

000b7440 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7440:	b570      	push	{r4, r5, r6, lr}
   b7442:	4604      	mov	r4, r0
   b7444:	b08c      	sub	sp, #48	; 0x30
   b7446:	460e      	mov	r6, r1
   b7448:	9201      	str	r2, [sp, #4]
   b744a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b744c:	f7ff fab4 	bl	b69b8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7450:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7452:	9901      	ldr	r1, [sp, #4]
   b7454:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7458:	f7ff f848 	bl	b64ec <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b745c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7460:	b1cd      	cbz	r5, b7496 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7462:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7464:	9502      	str	r5, [sp, #8]
   b7466:	a902      	add	r1, sp, #8
   b7468:	a804      	add	r0, sp, #16
   b746a:	9303      	str	r3, [sp, #12]
   b746c:	f7ff fcaa 	bl	b6dc4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7470:	2300      	movs	r3, #0
	__x.swap(*this);
   b7472:	a908      	add	r1, sp, #32
   b7474:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7476:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7478:	f7ff ffd4 	bl	b7424 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b747c:	4631      	mov	r1, r6
   b747e:	a808      	add	r0, sp, #32
   b7480:	f7ff ffd0 	bl	b7424 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7484:	a808      	add	r0, sp, #32
   b7486:	f7fd fe20 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
   b748a:	a804      	add	r0, sp, #16
   b748c:	f7fd fe1d 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
    }
   b7490:	4620      	mov	r0, r4
   b7492:	b00c      	add	sp, #48	; 0x30
   b7494:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7496:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7498:	e7ea      	b.n	b7470 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b749c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b74a0:	b087      	sub	sp, #28
   b74a2:	461d      	mov	r5, r3
   b74a4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b74a8:	4680      	mov	r8, r0
   b74aa:	468b      	mov	fp, r1
   b74ac:	4692      	mov	sl, r2
   b74ae:	9912      	ldr	r1, [sp, #72]	; 0x48
   b74b0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b74b2:	2200      	movs	r2, #0
   b74b4:	2068      	movs	r0, #104	; 0x68
   b74b6:	9102      	str	r1, [sp, #8]
   b74b8:	9204      	str	r2, [sp, #16]
   b74ba:	f7fd fb66 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b74be:	1e06      	subs	r6, r0, #0
   b74c0:	f106 090c 	add.w	r9, r6, #12
   b74c4:	d018      	beq.n	b74f8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b74c6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b74c8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b74ca:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b74ce:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b74d0:	4a15      	ldr	r2, [pc, #84]	; (b7528 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b74d2:	f847 2b20 	str.w	r2, [r7], #32
   b74d6:	9b03      	ldr	r3, [sp, #12]
   b74d8:	9100      	str	r1, [sp, #0]
   b74da:	465a      	mov	r2, fp
   b74dc:	4651      	mov	r1, sl
   b74de:	4648      	mov	r0, r9
   b74e0:	f7ff ffae 	bl	b7440 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b74e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74e6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b74e8:	682b      	ldr	r3, [r5, #0]
   b74ea:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b74ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b74ee:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b74f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b74f4:	6823      	ldr	r3, [r4, #0]
   b74f6:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b74f8:	a904      	add	r1, sp, #16
   b74fa:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b74fc:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7500:	f7ff fd08 	bl	b6f14 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7504:	a805      	add	r0, sp, #20
   b7506:	f7fd fc31 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b750a:	f8d8 3000 	ldr.w	r3, [r8]
   b750e:	b93b      	cbnz	r3, b7520 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7510:	4a06      	ldr	r2, [pc, #24]	; (b752c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7512:	4907      	ldr	r1, [pc, #28]	; (b7530 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7514:	200a      	movs	r0, #10
}
   b7516:	b007      	add	sp, #28
   b7518:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b751c:	f7fe bd8c 	b.w	b6038 <panic_>
}
   b7520:	b007      	add	sp, #28
   b7522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7526:	bf00      	nop
   b7528:	000bb8c4 	.word	0x000bb8c4
   b752c:	000b5cd5 	.word	0x000b5cd5
   b7530:	000bb770 	.word	0x000bb770

000b7534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7534:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7538:	4604      	mov	r4, r0
   b753a:	460d      	mov	r5, r1
   b753c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b753e:	d914      	bls.n	b756a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7540:	4290      	cmp	r0, r2
   b7542:	d213      	bcs.n	b756c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7544:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7548:	1a75      	subs	r5, r6, r1
   b754a:	f1a1 0708 	sub.w	r7, r1, #8
   b754e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7550:	42b7      	cmp	r7, r6
   b7552:	d018      	beq.n	b7586 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7554:	b11c      	cbz	r4, b755e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7556:	4631      	mov	r1, r6
   b7558:	4620      	mov	r0, r4
   b755a:	f7ff fc60 	bl	b6e1e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b755e:	1d30      	adds	r0, r6, #4
   b7560:	f7fd fc04 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7564:	3e08      	subs	r6, #8
   b7566:	3c08      	subs	r4, #8
   b7568:	e7f2      	b.n	b7550 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b756a:	d00c      	beq.n	b7586 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b756c:	42b5      	cmp	r5, r6
   b756e:	d00a      	beq.n	b7586 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7570:	b11c      	cbz	r4, b757a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7572:	4629      	mov	r1, r5
   b7574:	4620      	mov	r0, r4
   b7576:	f7ff fc52 	bl	b6e1e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b757a:	1d28      	adds	r0, r5, #4
   b757c:	f7fd fbf6 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7580:	3508      	adds	r5, #8
   b7582:	3408      	adds	r4, #8
   b7584:	e7f2      	b.n	b756c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7588 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7588:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b758a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b758c:	4605      	mov	r5, r0
        if (n > 0) {
   b758e:	dd11      	ble.n	b75b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7590:	00f0      	lsls	r0, r6, #3
   b7592:	f7fe fe3d 	bl	b6210 <malloc>
            if (!d) {
   b7596:	4604      	mov	r4, r0
   b7598:	b158      	cbz	r0, b75b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b759a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b759e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b75a2:	f7ff ffc7 	bl	b7534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b75a6:	6828      	ldr	r0, [r5, #0]
   b75a8:	f7fe fe3a 	bl	b6220 <free>
        data_ = d;
   b75ac:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b75ae:	60ae      	str	r6, [r5, #8]
        return true;
   b75b0:	2001      	movs	r0, #1
    }
   b75b2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b75b4:	2400      	movs	r4, #0
   b75b6:	e7f6      	b.n	b75a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b75b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b75b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b75ba:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b75bc:	6845      	ldr	r5, [r0, #4]
   b75be:	4668      	mov	r0, sp
   b75c0:	f7ff fc2d 	bl	b6e1e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75c4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b75c8:	4299      	cmp	r1, r3
   b75ca:	da10      	bge.n	b75ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b75cc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b75ce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b75d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b75d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b75d8:	4629      	mov	r1, r5
   b75da:	f105 0008 	add.w	r0, r5, #8
   b75de:	f7ff ffa9 	bl	b7534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b75e2:	b98d      	cbnz	r5, b7608 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b75e4:	6863      	ldr	r3, [r4, #4]
   b75e6:	3301      	adds	r3, #1
   b75e8:	6063      	str	r3, [r4, #4]
    return true;
   b75ea:	2601      	movs	r6, #1
   b75ec:	e006      	b.n	b75fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75ee:	3101      	adds	r1, #1
   b75f0:	4620      	mov	r0, r4
   b75f2:	f7ff ffc9 	bl	b7588 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b75f6:	4606      	mov	r6, r0
   b75f8:	2800      	cmp	r0, #0
   b75fa:	d1e7      	bne.n	b75cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b75fc:	a801      	add	r0, sp, #4
   b75fe:	f7fd fbb5 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7602:	4630      	mov	r0, r6
   b7604:	b002      	add	sp, #8
   b7606:	bd70      	pop	{r4, r5, r6, pc}
   b7608:	4669      	mov	r1, sp
   b760a:	4628      	mov	r0, r5
   b760c:	f7ff fc07 	bl	b6e1e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7610:	e7e8      	b.n	b75e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7612 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7612:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7616:	4604      	mov	r4, r0
   b7618:	460d      	mov	r5, r1
   b761a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b761c:	d914      	bls.n	b7648 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b761e:	4290      	cmp	r0, r2
   b7620:	d213      	bcs.n	b764a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7622:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7626:	1a75      	subs	r5, r6, r1
   b7628:	f1a1 0708 	sub.w	r7, r1, #8
   b762c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b762e:	42b7      	cmp	r7, r6
   b7630:	d018      	beq.n	b7664 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7632:	b11c      	cbz	r4, b763c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7634:	4631      	mov	r1, r6
   b7636:	4620      	mov	r0, r4
   b7638:	f7ff fbe3 	bl	b6e02 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b763c:	1d30      	adds	r0, r6, #4
   b763e:	f7fd fb95 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7642:	3e08      	subs	r6, #8
   b7644:	3c08      	subs	r4, #8
   b7646:	e7f2      	b.n	b762e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7648:	d00c      	beq.n	b7664 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b764a:	42b5      	cmp	r5, r6
   b764c:	d00a      	beq.n	b7664 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b764e:	b11c      	cbz	r4, b7658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7650:	4629      	mov	r1, r5
   b7652:	4620      	mov	r0, r4
   b7654:	f7ff fbd5 	bl	b6e02 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7658:	1d28      	adds	r0, r5, #4
   b765a:	f7fd fb87 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b765e:	3508      	adds	r5, #8
   b7660:	3408      	adds	r4, #8
   b7662:	e7f2      	b.n	b764a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7666 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7666:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7668:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b766a:	4605      	mov	r5, r0
        if (n > 0) {
   b766c:	dd11      	ble.n	b7692 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b766e:	00f0      	lsls	r0, r6, #3
   b7670:	f7fe fdce 	bl	b6210 <malloc>
            if (!d) {
   b7674:	4604      	mov	r4, r0
   b7676:	b158      	cbz	r0, b7690 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7678:	e9d5 1200 	ldrd	r1, r2, [r5]
   b767c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7680:	f7ff ffc7 	bl	b7612 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7684:	6828      	ldr	r0, [r5, #0]
   b7686:	f7fe fdcb 	bl	b6220 <free>
        data_ = d;
   b768a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b768c:	60ae      	str	r6, [r5, #8]
        return true;
   b768e:	2001      	movs	r0, #1
    }
   b7690:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7692:	2400      	movs	r4, #0
   b7694:	e7f6      	b.n	b7684 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7696 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7696:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7698:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b769a:	6845      	ldr	r5, [r0, #4]
   b769c:	4668      	mov	r0, sp
   b769e:	f7ff fbb0 	bl	b6e02 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76a2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b76a6:	4299      	cmp	r1, r3
   b76a8:	da10      	bge.n	b76cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b76aa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b76ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b76ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b76b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b76b6:	4629      	mov	r1, r5
   b76b8:	f105 0008 	add.w	r0, r5, #8
   b76bc:	f7ff ffa9 	bl	b7612 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b76c0:	b98d      	cbnz	r5, b76e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b76c2:	6863      	ldr	r3, [r4, #4]
   b76c4:	3301      	adds	r3, #1
   b76c6:	6063      	str	r3, [r4, #4]
    return true;
   b76c8:	2601      	movs	r6, #1
   b76ca:	e006      	b.n	b76da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76cc:	3101      	adds	r1, #1
   b76ce:	4620      	mov	r0, r4
   b76d0:	f7ff ffc9 	bl	b7666 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b76d4:	4606      	mov	r6, r0
   b76d6:	2800      	cmp	r0, #0
   b76d8:	d1e7      	bne.n	b76aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b76da:	a801      	add	r0, sp, #4
   b76dc:	f7fd fb46 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b76e0:	4630      	mov	r0, r6
   b76e2:	b002      	add	sp, #8
   b76e4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b76e6:	4669      	mov	r1, sp
   b76e8:	4628      	mov	r0, r5
   b76ea:	f7ff fb8a 	bl	b6e02 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b76ee:	e7e8      	b.n	b76c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b76f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b76f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76f4:	4617      	mov	r7, r2
   b76f6:	b0a1      	sub	sp, #132	; 0x84
   b76f8:	4680      	mov	r8, r0
    WiringBleLock lk;
   b76fa:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b76fc:	460e      	mov	r6, r1
    WiringBleLock lk;
   b76fe:	f7ff f823 	bl	b6748 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7702:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7704:	7923      	ldrb	r3, [r4, #4]
   b7706:	b953      	cbnz	r3, b771e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7708:	4639      	mov	r1, r7
   b770a:	4640      	mov	r0, r8
   b770c:	f7ff fb79 	bl	b6e02 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7710:	a80a      	add	r0, sp, #40	; 0x28
   b7712:	f7ff f827 	bl	b6764 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7716:	4640      	mov	r0, r8
   b7718:	b021      	add	sp, #132	; 0x84
   b771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b771e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7720:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7724:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7728:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b772a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b772e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7732:	9b03      	ldr	r3, [sp, #12]
   b7734:	429d      	cmp	r5, r3
   b7736:	d021      	beq.n	b777c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7738:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b773c:	4658      	mov	r0, fp
   b773e:	f109 0114 	add.w	r1, r9, #20
   b7742:	f7ff f8ae 	bl	b68a2 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7746:	b1b8      	cbz	r0, b7778 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7748:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b774c:	4650      	mov	r0, sl
   b774e:	f7ff f8a8 	bl	b68a2 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7752:	b188      	cbz	r0, b7778 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7754:	6823      	ldr	r3, [r4, #0]
   b7756:	f8d9 2000 	ldr.w	r2, [r9]
   b775a:	4053      	eors	r3, r2
   b775c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7760:	d10a      	bne.n	b7778 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7762:	2220      	movs	r2, #32
   b7764:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7768:	4a5e      	ldr	r2, [pc, #376]	; (b78e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b776a:	9200      	str	r2, [sp, #0]
   b776c:	aa15      	add	r2, sp, #84	; 0x54
   b776e:	495e      	ldr	r1, [pc, #376]	; (b78e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7770:	2032      	movs	r0, #50	; 0x32
   b7772:	f7fe fc69 	bl	b6048 <log_message>
   b7776:	e7c7      	b.n	b7708 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7778:	3508      	adds	r5, #8
   b777a:	e7da      	b.n	b7732 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b777c:	4650      	mov	r0, sl
   b777e:	f7ff f861 	bl	b6844 <_ZNK8particle7BleUuid7isValidEv>
   b7782:	b960      	cbnz	r0, b779e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b7784:	4959      	ldr	r1, [pc, #356]	; (b78ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7786:	2201      	movs	r2, #1
   b7788:	a815      	add	r0, sp, #84	; 0x54
   b778a:	ad15      	add	r5, sp, #84	; 0x54
   b778c:	f7ff f832 	bl	b67f4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7792:	46d4      	mov	ip, sl
   b7794:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7798:	682b      	ldr	r3, [r5, #0]
   b779a:	f8cc 3000 	str.w	r3, [ip]
   b779e:	6833      	ldr	r3, [r6, #0]
   b77a0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b77a4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b77a8:	455d      	cmp	r5, fp
   b77aa:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b77ac:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b77ae:	d06e      	beq.n	b788e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b77b0:	f855 0b08 	ldr.w	r0, [r5], #8
   b77b4:	f7ff f875 	bl	b68a2 <_ZNK8particle7BleUuideqERKS0_>
   b77b8:	2800      	cmp	r0, #0
   b77ba:	d0f5      	beq.n	b77a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b77bc:	f104 0a14 	add.w	sl, r4, #20
   b77c0:	4650      	mov	r0, sl
   b77c2:	f7ff f83f 	bl	b6844 <_ZNK8particle7BleUuid7isValidEv>
   b77c6:	b988      	cbnz	r0, b77ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b77c8:	4b49      	ldr	r3, [pc, #292]	; (b78f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b77ca:	4948      	ldr	r1, [pc, #288]	; (b78ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b77cc:	881a      	ldrh	r2, [r3, #0]
   b77ce:	3201      	adds	r2, #1
   b77d0:	b292      	uxth	r2, r2
   b77d2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b77d4:	a815      	add	r0, sp, #84	; 0x54
   b77d6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b77d8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b77da:	f7ff f82a 	bl	b6832 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b77de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77e0:	46d4      	mov	ip, sl
   b77e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b77e6:	682b      	ldr	r3, [r5, #0]
   b77e8:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b77ec:	4b41      	ldr	r3, [pc, #260]	; (b78f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b77ee:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b77f0:	2228      	movs	r2, #40	; 0x28
   b77f2:	2100      	movs	r1, #0
   b77f4:	a816      	add	r0, sp, #88	; 0x58
   b77f6:	f001 fde9 	bl	b93cc <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b77fa:	4651      	mov	r1, sl
   b77fc:	a804      	add	r0, sp, #16
   b77fe:	f7ff f833 	bl	b6868 <_ZN8particle7BleUuid7halUUIDEv>
   b7802:	ab04      	add	r3, sp, #16
   b7804:	aa18      	add	r2, sp, #96	; 0x60
   b7806:	f10d 0c20 	add.w	ip, sp, #32
   b780a:	6818      	ldr	r0, [r3, #0]
   b780c:	6859      	ldr	r1, [r3, #4]
   b780e:	4615      	mov	r5, r2
   b7810:	c503      	stmia	r5!, {r0, r1}
   b7812:	3308      	adds	r3, #8
   b7814:	4563      	cmp	r3, ip
   b7816:	462a      	mov	r2, r5
   b7818:	d1f7      	bne.n	b780a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b781a:	6818      	ldr	r0, [r3, #0]
   b781c:	6028      	str	r0, [r5, #0]
    return value_;
   b781e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7820:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7824:	f8d9 3000 	ldr.w	r3, [r9]
   b7828:	8a9b      	ldrh	r3, [r3, #20]
   b782a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b782e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7830:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7832:	4b31      	ldr	r3, [pc, #196]	; (b78f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7834:	2200      	movs	r2, #0
   b7836:	1da1      	adds	r1, r4, #6
   b7838:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b783a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b783e:	f7fe fac3 	bl	b5dc8 <hal_ble_gatt_server_add_characteristic>
   b7842:	2800      	cmp	r0, #0
   b7844:	f47f af60 	bne.w	b7708 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7848:	2301      	movs	r3, #1
   b784a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b784c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b784e:	4639      	mov	r1, r7
        return characteristics_;
   b7850:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7852:	a80d      	add	r0, sp, #52	; 0x34
   b7854:	f7ff fad5 	bl	b6e02 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7858:	4620      	mov	r0, r4
   b785a:	a90d      	add	r1, sp, #52	; 0x34
   b785c:	f7ff ff1b 	bl	b7696 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7860:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7862:	a80e      	add	r0, sp, #56	; 0x38
   b7864:	f7fd fa82 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7868:	2c00      	cmp	r4, #0
   b786a:	f47f af4d 	bne.w	b7708 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b786e:	2320      	movs	r3, #32
   b7870:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7874:	4b21      	ldr	r3, [pc, #132]	; (b78fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7876:	9300      	str	r3, [sp, #0]
   b7878:	aa0d      	add	r2, sp, #52	; 0x34
   b787a:	4623      	mov	r3, r4
   b787c:	e777      	b.n	b776e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b787e:	4639      	mov	r1, r7
   b7880:	4640      	mov	r0, r8
   b7882:	f7ff fabe 	bl	b6e02 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7886:	a80c      	add	r0, sp, #48	; 0x30
   b7888:	f7fd fa70 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b788c:	e740      	b.n	b7710 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b788e:	a80b      	add	r0, sp, #44	; 0x2c
   b7890:	f7ff f936 	bl	b6b00 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7894:	4651      	mov	r1, sl
   b7896:	a815      	add	r0, sp, #84	; 0x54
   b7898:	f7fe ffe6 	bl	b6868 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b789c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b789e:	2300      	movs	r3, #0
   b78a0:	3214      	adds	r2, #20
   b78a2:	a915      	add	r1, sp, #84	; 0x54
   b78a4:	2001      	movs	r0, #1
   b78a6:	f7fe fa67 	bl	b5d78 <hal_ble_gatt_server_add_service>
   b78aa:	2800      	cmp	r0, #0
   b78ac:	d1e7      	bne.n	b787e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b78ae:	6835      	ldr	r5, [r6, #0]
   b78b0:	a90b      	add	r1, sp, #44	; 0x2c
   b78b2:	a80d      	add	r0, sp, #52	; 0x34
   b78b4:	f7ff fab3 	bl	b6e1e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b78b8:	4628      	mov	r0, r5
   b78ba:	a90d      	add	r1, sp, #52	; 0x34
   b78bc:	f7ff fe7c 	bl	b75b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b78c0:	4605      	mov	r5, r0
   b78c2:	a80e      	add	r0, sp, #56	; 0x38
   b78c4:	f7fd fa52 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78c8:	2d00      	cmp	r5, #0
   b78ca:	d0d8      	beq.n	b787e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b78cc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b78ce:	6853      	ldr	r3, [r2, #4]
   b78d0:	6812      	ldr	r2, [r2, #0]
   b78d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b78d6:	3b01      	subs	r3, #1
   b78d8:	a80c      	add	r0, sp, #48	; 0x30
   b78da:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b78de:	f7fd fa45 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78e2:	e76b      	b.n	b77bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b78e4:	000bb86a 	.word	0x000bb86a
   b78e8:	000bb787 	.word	0x000bb787
   b78ec:	000bb918 	.word	0x000bb918
   b78f0:	2003e5fc 	.word	0x2003e5fc
   b78f4:	002c0003 	.word	0x002c0003
   b78f8:	000b6c99 	.word	0x000b6c99
   b78fc:	000bb895 	.word	0x000bb895

000b7900 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7900:	4802      	ldr	r0, [pc, #8]	; (b790c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7902:	2300      	movs	r3, #0
   b7904:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7906:	f7fe bab7 	b.w	b5e78 <os_mutex_recursive_create>
   b790a:	bf00      	nop
   b790c:	2003e600 	.word	0x2003e600

000b7910 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7912:	4606      	mov	r6, r0
   b7914:	460d      	mov	r5, r1
  size_t n = 0;
   b7916:	188f      	adds	r7, r1, r2
   b7918:	2400      	movs	r4, #0
  while (size--) {
   b791a:	42bd      	cmp	r5, r7
   b791c:	d00c      	beq.n	b7938 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b791e:	6833      	ldr	r3, [r6, #0]
   b7920:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7924:	689b      	ldr	r3, [r3, #8]
   b7926:	4630      	mov	r0, r6
   b7928:	4798      	blx	r3
     if (chunk>=0)
   b792a:	1e03      	subs	r3, r0, #0
   b792c:	db01      	blt.n	b7932 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b792e:	441c      	add	r4, r3
  while (size--) {
   b7930:	e7f3      	b.n	b791a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7932:	2c00      	cmp	r4, #0
   b7934:	bf08      	it	eq
   b7936:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7938:	4620      	mov	r0, r4
   b793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b793c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b793c:	b513      	push	{r0, r1, r4, lr}
   b793e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7940:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7942:	b159      	cbz	r1, b795c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7944:	9101      	str	r1, [sp, #4]
   b7946:	f7fd f8c5 	bl	b4ad4 <strlen>
   b794a:	6823      	ldr	r3, [r4, #0]
   b794c:	9901      	ldr	r1, [sp, #4]
   b794e:	68db      	ldr	r3, [r3, #12]
   b7950:	4602      	mov	r2, r0
   b7952:	4620      	mov	r0, r4
    }
   b7954:	b002      	add	sp, #8
   b7956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b795a:	4718      	bx	r3
    }
   b795c:	b002      	add	sp, #8
   b795e:	bd10      	pop	{r4, pc}

000b7960 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b7960:	6803      	ldr	r3, [r0, #0]
   b7962:	689b      	ldr	r3, [r3, #8]
   b7964:	4718      	bx	r3

000b7966 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7966:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7968:	210d      	movs	r1, #13
{
   b796a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b796c:	f7ff fff8 	bl	b7960 <_ZN5Print5printEc>
  n += print('\n');
   b7970:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7972:	4604      	mov	r4, r0
  n += print('\n');
   b7974:	4628      	mov	r0, r5
   b7976:	f7ff fff3 	bl	b7960 <_ZN5Print5printEc>
  return n;
}
   b797a:	4420      	add	r0, r4
   b797c:	bd38      	pop	{r3, r4, r5, pc}

000b797e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b797e:	b538      	push	{r3, r4, r5, lr}
   b7980:	4605      	mov	r5, r0
  return write(str);
   b7982:	f7ff ffdb 	bl	b793c <_ZN5Print5writeEPKc>
   b7986:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7988:	4628      	mov	r0, r5
   b798a:	f7ff ffec 	bl	b7966 <_ZN5Print7printlnEv>
  return n;
}
   b798e:	4420      	add	r0, r4
   b7990:	bd38      	pop	{r3, r4, r5, pc}

000b7992 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7992:	b530      	push	{r4, r5, lr}
   b7994:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7996:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7998:	2a01      	cmp	r2, #1
  *str = '\0';
   b799a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b799e:	bf98      	it	ls
   b79a0:	220a      	movls	r2, #10
   b79a2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b79a4:	460d      	mov	r5, r1
   b79a6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b79aa:	fb01 5312 	mls	r3, r1, r2, r5
   b79ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79b2:	2b09      	cmp	r3, #9
   b79b4:	bf94      	ite	ls
   b79b6:	3330      	addls	r3, #48	; 0x30
   b79b8:	3337      	addhi	r3, #55	; 0x37
   b79ba:	b2db      	uxtb	r3, r3
  } while(n);
   b79bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79be:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b79c2:	d9ef      	bls.n	b79a4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b79c4:	4621      	mov	r1, r4
   b79c6:	f7ff ffb9 	bl	b793c <_ZN5Print5writeEPKc>
}
   b79ca:	b00b      	add	sp, #44	; 0x2c
   b79cc:	bd30      	pop	{r4, r5, pc}
	...

000b79d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b79d0:	4b01      	ldr	r3, [pc, #4]	; (b79d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b79d2:	4a02      	ldr	r2, [pc, #8]	; (b79dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b79d4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b79d6:	4770      	bx	lr
   b79d8:	2003e608 	.word	0x2003e608
   b79dc:	000bb938 	.word	0x000bb938

000b79e0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b79e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b79e4:	4a15      	ldr	r2, [pc, #84]	; (b7a3c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b79e6:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7a48 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b79ea:	e9d2 6300 	ldrd	r6, r3, [r2]
   b79ee:	1980      	adds	r0, r0, r6
   b79f0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b79f4:	4b12      	ldr	r3, [pc, #72]	; (b7a40 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b79f6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b79fa:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b79fe:	1986      	adds	r6, r0, r6
   b7a00:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7a04:	42bb      	cmp	r3, r7
   b7a06:	bf08      	it	eq
   b7a08:	42b2      	cmpeq	r2, r6
{
   b7a0a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7a0c:	d013      	beq.n	b7a36 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7a0e:	a903      	add	r1, sp, #12
   b7a10:	4668      	mov	r0, sp
   b7a12:	e9cd 6700 	strd	r6, r7, [sp]
   b7a16:	f7fe fc53 	bl	b62c0 <localtime_r>
	calendar_time.tm_year += 1900;
   b7a1a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a1c:	4d09      	ldr	r5, [pc, #36]	; (b7a44 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7a1e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a22:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7a24:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7a2e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a32:	6823      	ldr	r3, [r4, #0]
   b7a34:	602b      	str	r3, [r5, #0]
    }
}
   b7a36:	b00c      	add	sp, #48	; 0x30
   b7a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7a3c:	2003e640 	.word	0x2003e640
   b7a40:	2003e638 	.word	0x2003e638
   b7a44:	2003e610 	.word	0x2003e610
   b7a48:	2003e648 	.word	0x2003e648

000b7a4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7a4c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a4e:	2000      	movs	r0, #0
   b7a50:	f7fe fbce 	bl	b61f0 <spark_sync_time_pending>
   b7a54:	b128      	cbz	r0, b7a62 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7a56:	f7fe fbb3 	bl	b61c0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a5a:	f080 0001 	eor.w	r0, r0, #1
   b7a5e:	b2c0      	uxtb	r0, r0
    }
   b7a60:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a62:	2001      	movs	r0, #1
   b7a64:	e7fc      	b.n	b7a60 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b7a68 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b7a68:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b7a6a:	f7ff ffb9 	bl	b79e0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b7a6e:	4b02      	ldr	r3, [pc, #8]	; (b7a78 <_ZN9TimeClass5monthEx+0x10>)
   b7a70:	6918      	ldr	r0, [r3, #16]
}
   b7a72:	3001      	adds	r0, #1
   b7a74:	bd08      	pop	{r3, pc}
   b7a76:	bf00      	nop
   b7a78:	2003e610 	.word	0x2003e610

000b7a7c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b7a7c:	b530      	push	{r4, r5, lr}
   b7a7e:	b093      	sub	sp, #76	; 0x4c
   b7a80:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b7a84:	4b19      	ldr	r3, [pc, #100]	; (b7aec <_ZN9TimeClass7timeStrEx+0x70>)
{
   b7a86:	4604      	mov	r4, r0
    t += time_zone_cache;
   b7a88:	e9d3 1000 	ldrd	r1, r0, [r3]
   b7a8c:	9b01      	ldr	r3, [sp, #4]
   b7a8e:	1852      	adds	r2, r2, r1
   b7a90:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b7a94:	4816      	ldr	r0, [pc, #88]	; (b7af0 <_ZN9TimeClass7timeStrEx+0x74>)
   b7a96:	e9d0 1000 	ldrd	r1, r0, [r0]
   b7a9a:	1852      	adds	r2, r2, r1
   b7a9c:	eb43 0300 	adc.w	r3, r3, r0
   b7aa0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b7aa4:	2224      	movs	r2, #36	; 0x24
   b7aa6:	eb0d 0002 	add.w	r0, sp, r2
   b7aaa:	2100      	movs	r1, #0
   b7aac:	f001 fc8e 	bl	b93cc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b7ab0:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b7ab2:	a909      	add	r1, sp, #36	; 0x24
   b7ab4:	4668      	mov	r0, sp
   b7ab6:	f7fe fc03 	bl	b62c0 <localtime_r>
    char ascstr[26] = {};
   b7aba:	2216      	movs	r2, #22
   b7abc:	4629      	mov	r1, r5
   b7abe:	a803      	add	r0, sp, #12
   b7ac0:	9502      	str	r5, [sp, #8]
   b7ac2:	f001 fc83 	bl	b93cc <memset>
    asctime_r(&calendar_time, ascstr);
   b7ac6:	a902      	add	r1, sp, #8
   b7ac8:	a809      	add	r0, sp, #36	; 0x24
   b7aca:	f001 fc1b 	bl	b9304 <asctime_r>
    int len = strlen(ascstr);
   b7ace:	a802      	add	r0, sp, #8
   b7ad0:	f7fd f800 	bl	b4ad4 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b7ad4:	ab12      	add	r3, sp, #72	; 0x48
   b7ad6:	4418      	add	r0, r3
    return String(ascstr);
   b7ad8:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b7ada:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b7ade:	4620      	mov	r0, r4
   b7ae0:	f7fe fcd6 	bl	b6490 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7ae4:	4620      	mov	r0, r4
   b7ae6:	b013      	add	sp, #76	; 0x4c
   b7ae8:	bd30      	pop	{r4, r5, pc}
   b7aea:	bf00      	nop
   b7aec:	2003e640 	.word	0x2003e640
   b7af0:	2003e638 	.word	0x2003e638

000b7af4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7af4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7af6:	2000      	movs	r0, #0
   b7af8:	f7fe f8fc 	bl	b5cf4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7afc:	4604      	mov	r4, r0
   b7afe:	b9a0      	cbnz	r0, b7b2a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7b00:	f7fe faaa 	bl	b6058 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7b04:	2801      	cmp	r0, #1
   b7b06:	d110      	bne.n	b7b2a <_ZN9TimeClass7isValidEv+0x36>
   b7b08:	4620      	mov	r0, r4
   b7b0a:	f7fe fad5 	bl	b60b8 <system_thread_get_state>
   b7b0e:	b960      	cbnz	r0, b7b2a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7b10:	f7ff ff9c 	bl	b7a4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7b14:	b910      	cbnz	r0, b7b1c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7b16:	f7fe fb4b 	bl	b61b0 <spark_process>
        while (_while() && !_condition()) {
   b7b1a:	e7f9      	b.n	b7b10 <_ZN9TimeClass7isValidEv+0x1c>
   b7b1c:	f7ff ff96 	bl	b7a4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7b24:	2000      	movs	r0, #0
   b7b26:	f7fe b8e5 	b.w	b5cf4 <hal_rtc_time_is_valid>
}
   b7b2a:	4620      	mov	r0, r4
   b7b2c:	bd10      	pop	{r4, pc}

000b7b2e <_ZN9TimeClass3nowEv>:
{
   b7b2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7b30:	f7ff ffe0 	bl	b7af4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7b34:	2210      	movs	r2, #16
   b7b36:	2100      	movs	r1, #0
   b7b38:	4668      	mov	r0, sp
   b7b3a:	f001 fc47 	bl	b93cc <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7b3e:	2100      	movs	r1, #0
   b7b40:	4668      	mov	r0, sp
   b7b42:	f7fe f8df 	bl	b5d04 <hal_rtc_get_time>
}
   b7b46:	9800      	ldr	r0, [sp, #0]
   b7b48:	b005      	add	sp, #20
   b7b4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b50 <_ZN9TimeClass4hourEv>:
{
   b7b50:	b508      	push	{r3, lr}
	return hour(now());
   b7b52:	f7ff ffec 	bl	b7b2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b56:	17c1      	asrs	r1, r0, #31
   b7b58:	f7ff ff42 	bl	b79e0 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b5c:	4b01      	ldr	r3, [pc, #4]	; (b7b64 <_ZN9TimeClass4hourEv+0x14>)
   b7b5e:	6898      	ldr	r0, [r3, #8]
   b7b60:	bd08      	pop	{r3, pc}
   b7b62:	bf00      	nop
   b7b64:	2003e610 	.word	0x2003e610

000b7b68 <_ZN9TimeClass6minuteEv>:
{
   b7b68:	b508      	push	{r3, lr}
	return minute(now());
   b7b6a:	f7ff ffe0 	bl	b7b2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b6e:	17c1      	asrs	r1, r0, #31
   b7b70:	f7ff ff36 	bl	b79e0 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b74:	4b01      	ldr	r3, [pc, #4]	; (b7b7c <_ZN9TimeClass6minuteEv+0x14>)
   b7b76:	6858      	ldr	r0, [r3, #4]
   b7b78:	bd08      	pop	{r3, pc}
   b7b7a:	bf00      	nop
   b7b7c:	2003e610 	.word	0x2003e610

000b7b80 <_ZN9TimeClass3dayEv>:
{
   b7b80:	b508      	push	{r3, lr}
	return day(now());
   b7b82:	f7ff ffd4 	bl	b7b2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b86:	17c1      	asrs	r1, r0, #31
   b7b88:	f7ff ff2a 	bl	b79e0 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b8c:	4b01      	ldr	r3, [pc, #4]	; (b7b94 <_ZN9TimeClass3dayEv+0x14>)
   b7b8e:	68d8      	ldr	r0, [r3, #12]
   b7b90:	bd08      	pop	{r3, pc}
   b7b92:	bf00      	nop
   b7b94:	2003e610 	.word	0x2003e610

000b7b98 <_ZN9TimeClass5monthEv>:
{
   b7b98:	b508      	push	{r3, lr}
	return month(now());
   b7b9a:	f7ff ffc8 	bl	b7b2e <_ZN9TimeClass3nowEv>
}
   b7b9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b7ba2:	17c1      	asrs	r1, r0, #31
   b7ba4:	f7ff bf60 	b.w	b7a68 <_ZN9TimeClass5monthEx>

000b7ba8 <_ZN9TimeClass4yearEv>:
{
   b7ba8:	b508      	push	{r3, lr}
	return year(now());
   b7baa:	f7ff ffc0 	bl	b7b2e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7bae:	17c1      	asrs	r1, r0, #31
   b7bb0:	f7ff ff16 	bl	b79e0 <_ZL22Refresh_UnixTime_Cachex>
}
   b7bb4:	4b01      	ldr	r3, [pc, #4]	; (b7bbc <_ZN9TimeClass4yearEv+0x14>)
   b7bb6:	6958      	ldr	r0, [r3, #20]
   b7bb8:	bd08      	pop	{r3, pc}
   b7bba:	bf00      	nop
   b7bbc:	2003e610 	.word	0x2003e610

000b7bc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7bc0:	4b02      	ldr	r3, [pc, #8]	; (b7bcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7bc2:	681a      	ldr	r2, [r3, #0]
   b7bc4:	4b02      	ldr	r3, [pc, #8]	; (b7bd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7bc6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7bc8:	4770      	bx	lr
   b7bca:	bf00      	nop
   b7bcc:	2003e308 	.word	0x2003e308
   b7bd0:	2003e60c 	.word	0x2003e60c

000b7bd4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7bd4:	2100      	movs	r1, #0
   b7bd6:	f7fe ba4f 	b.w	b6078 <system_delay_ms>
	...

000b7bdc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7bdc:	4b01      	ldr	r3, [pc, #4]	; (b7be4 <_GLOBAL__sub_I_RGB+0x8>)
   b7bde:	2200      	movs	r2, #0
   b7be0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7be2:	4770      	bx	lr
   b7be4:	2003e650 	.word	0x2003e650

000b7be8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7be8:	4b01      	ldr	r3, [pc, #4]	; (b7bf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7bea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7bec:	4770      	bx	lr
   b7bee:	bf00      	nop
   b7bf0:	2003e30c 	.word	0x2003e30c

000b7bf4 <serialEventRun>:
{
   b7bf4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7bf6:	4b0b      	ldr	r3, [pc, #44]	; (b7c24 <serialEventRun+0x30>)
   b7bf8:	b143      	cbz	r3, b7c0c <serialEventRun+0x18>
   b7bfa:	f000 fc09 	bl	b8410 <_Z16_fetch_usbserialv>
   b7bfe:	6803      	ldr	r3, [r0, #0]
   b7c00:	691b      	ldr	r3, [r3, #16]
   b7c02:	4798      	blx	r3
   b7c04:	2800      	cmp	r0, #0
   b7c06:	dd01      	ble.n	b7c0c <serialEventRun+0x18>
        serialEvent();
   b7c08:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7c0c:	4b06      	ldr	r3, [pc, #24]	; (b7c28 <serialEventRun+0x34>)
   b7c0e:	b143      	cbz	r3, b7c22 <serialEventRun+0x2e>
   b7c10:	f000 fe82 	bl	b8918 <_Z22__fetch_global_Serial1v>
   b7c14:	6803      	ldr	r3, [r0, #0]
   b7c16:	691b      	ldr	r3, [r3, #16]
   b7c18:	4798      	blx	r3
   b7c1a:	2800      	cmp	r0, #0
   b7c1c:	dd01      	ble.n	b7c22 <serialEventRun+0x2e>
        serialEvent1();
   b7c1e:	f3af 8000 	nop.w
}
   b7c22:	bd08      	pop	{r3, pc}
	...

000b7c2c <_post_loop>:
{
   b7c2c:	b508      	push	{r3, lr}
	serialEventRun();
   b7c2e:	f7ff ffe1 	bl	b7bf4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7c32:	f7fe f857 	bl	b5ce4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7c36:	4b01      	ldr	r3, [pc, #4]	; (b7c3c <_post_loop+0x10>)
   b7c38:	6018      	str	r0, [r3, #0]
}
   b7c3a:	bd08      	pop	{r3, pc}
   b7c3c:	2003e744 	.word	0x2003e744

000b7c40 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c40:	4805      	ldr	r0, [pc, #20]	; (b7c58 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7c42:	4a06      	ldr	r2, [pc, #24]	; (b7c5c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7c44:	4906      	ldr	r1, [pc, #24]	; (b7c60 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7c46:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c48:	1a12      	subs	r2, r2, r0
   b7c4a:	f001 fb97 	bl	b937c <memcpy>
    __backup_sram_signature = signature;
   b7c4e:	4b05      	ldr	r3, [pc, #20]	; (b7c64 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7c50:	4a05      	ldr	r2, [pc, #20]	; (b7c68 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7c52:	601a      	str	r2, [r3, #0]
}
   b7c54:	bd08      	pop	{r3, pc}
   b7c56:	bf00      	nop
   b7c58:	2003f400 	.word	0x2003f400
   b7c5c:	2003f404 	.word	0x2003f404
   b7c60:	000bc344 	.word	0x000bc344
   b7c64:	2003f400 	.word	0x2003f400
   b7c68:	9a271c1e 	.word	0x9a271c1e

000b7c6c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7c6c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7c6e:	2300      	movs	r3, #0
   b7c70:	9300      	str	r3, [sp, #0]
   b7c72:	461a      	mov	r2, r3
   b7c74:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7c78:	f7fe fa30 	bl	b60dc <system_ctrl_set_result>
}
   b7c7c:	b003      	add	sp, #12
   b7c7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7c84 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7c84:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7c86:	8843      	ldrh	r3, [r0, #2]
   b7c88:	2b0a      	cmp	r3, #10
   b7c8a:	d008      	beq.n	b7c9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7c8c:	2b50      	cmp	r3, #80	; 0x50
   b7c8e:	d10b      	bne.n	b7ca8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7c90:	4b09      	ldr	r3, [pc, #36]	; (b7cb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7c92:	681b      	ldr	r3, [r3, #0]
   b7c94:	b14b      	cbz	r3, b7caa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7c96:	b003      	add	sp, #12
   b7c98:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7c9c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7c9e:	f7ff ffe5 	bl	b7c6c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7ca2:	b003      	add	sp, #12
   b7ca4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7ca8:	2300      	movs	r3, #0
   b7caa:	9300      	str	r3, [sp, #0]
   b7cac:	461a      	mov	r2, r3
   b7cae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7cb2:	f7fe fa13 	bl	b60dc <system_ctrl_set_result>
}
   b7cb6:	e7f4      	b.n	b7ca2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7cb8:	2003e664 	.word	0x2003e664

000b7cbc <module_user_init_hook>:
{
   b7cbc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7cbe:	4812      	ldr	r0, [pc, #72]	; (b7d08 <module_user_init_hook+0x4c>)
   b7cc0:	2100      	movs	r1, #0
   b7cc2:	f7fe faf5 	bl	b62b0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7cc6:	4b11      	ldr	r3, [pc, #68]	; (b7d0c <module_user_init_hook+0x50>)
   b7cc8:	681a      	ldr	r2, [r3, #0]
   b7cca:	4b11      	ldr	r3, [pc, #68]	; (b7d10 <module_user_init_hook+0x54>)
   b7ccc:	429a      	cmp	r2, r3
   b7cce:	4b11      	ldr	r3, [pc, #68]	; (b7d14 <module_user_init_hook+0x58>)
   b7cd0:	bf0c      	ite	eq
   b7cd2:	2201      	moveq	r2, #1
   b7cd4:	2200      	movne	r2, #0
   b7cd6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7cd8:	d001      	beq.n	b7cde <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7cda:	f7ff ffb1 	bl	b7c40 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7cde:	f7fd fff1 	bl	b5cc4 <HAL_RNG_GetRandomNumber>
   b7ce2:	4604      	mov	r4, r0
    srand(seed);
   b7ce4:	f001 fb7a 	bl	b93dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7ce8:	4b0b      	ldr	r3, [pc, #44]	; (b7d18 <module_user_init_hook+0x5c>)
   b7cea:	b113      	cbz	r3, b7cf2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7cec:	4620      	mov	r0, r4
   b7cee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7cf2:	2100      	movs	r1, #0
   b7cf4:	4808      	ldr	r0, [pc, #32]	; (b7d18 <module_user_init_hook+0x5c>)
   b7cf6:	f7fe fa83 	bl	b6200 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7cfe:	4807      	ldr	r0, [pc, #28]	; (b7d1c <module_user_init_hook+0x60>)
   b7d00:	2100      	movs	r1, #0
   b7d02:	f7fe b9e1 	b.w	b60c8 <system_ctrl_set_app_request_handler>
   b7d06:	bf00      	nop
   b7d08:	000b7be9 	.word	0x000b7be9
   b7d0c:	2003f400 	.word	0x2003f400
   b7d10:	9a271c1e 	.word	0x9a271c1e
   b7d14:	2003e660 	.word	0x2003e660
   b7d18:	00000000 	.word	0x00000000
   b7d1c:	000b7c85 	.word	0x000b7c85

000b7d20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7d20:	4770      	bx	lr

000b7d22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7d22:	2000      	movs	r0, #0
   b7d24:	4770      	bx	lr

000b7d26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7d26:	b510      	push	{r4, lr}
   b7d28:	2110      	movs	r1, #16
   b7d2a:	4604      	mov	r4, r0
   b7d2c:	f7fc ff33 	bl	b4b96 <_ZdlPvj>
   b7d30:	4620      	mov	r0, r4
   b7d32:	bd10      	pop	{r4, pc}

000b7d34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7d34:	b508      	push	{r3, lr}
      { delete this; }
   b7d36:	f7ff fff6 	bl	b7d26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7d3a:	bd08      	pop	{r3, pc}

000b7d3c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7d3c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7d3e:	2200      	movs	r2, #0
   b7d40:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7d44:	6002      	str	r2, [r0, #0]
   b7d46:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7d48:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d4a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7d4c:	680c      	ldr	r4, [r1, #0]
   b7d4e:	8085      	strh	r5, [r0, #4]
   b7d50:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d52:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7d54:	bd30      	pop	{r4, r5, pc}

000b7d56 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7d56:	b510      	push	{r4, lr}
   b7d58:	4604      	mov	r4, r0
    free((void*)msg_);
   b7d5a:	6800      	ldr	r0, [r0, #0]
   b7d5c:	f7fe fa60 	bl	b6220 <free>
}
   b7d60:	4620      	mov	r0, r4
   b7d62:	bd10      	pop	{r4, pc}

000b7d64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7d64:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7d66:	68c4      	ldr	r4, [r0, #12]
   b7d68:	b1f4      	cbz	r4, b7da8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7d6a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7d6c:	2b02      	cmp	r3, #2
   b7d6e:	d103      	bne.n	b7d78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7d70:	f104 000c 	add.w	r0, r4, #12
   b7d74:	f7ff ffef 	bl	b7d56 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7d78:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7d7a:	b135      	cbz	r5, b7d8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7d7c:	4628      	mov	r0, r5
   b7d7e:	f7fd f9a4 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
   b7d82:	2110      	movs	r1, #16
   b7d84:	4628      	mov	r0, r5
   b7d86:	f7fc ff06 	bl	b4b96 <_ZdlPvj>
   b7d8a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7d8c:	b135      	cbz	r5, b7d9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7d8e:	4628      	mov	r0, r5
   b7d90:	f7fd f99b 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
   b7d94:	2110      	movs	r1, #16
   b7d96:	4628      	mov	r0, r5
   b7d98:	f7fc fefd 	bl	b4b96 <_ZdlPvj>
   b7d9c:	4620      	mov	r0, r4
   b7d9e:	2114      	movs	r1, #20
   b7da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7da4:	f7fc bef7 	b.w	b4b96 <_ZdlPvj>
   b7da8:	bd38      	pop	{r3, r4, r5, pc}

000b7daa <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   b7daa:	b507      	push	{r0, r1, r2, lr}
   b7dac:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   b7db0:	6882      	ldr	r2, [r0, #8]
   b7db2:	b90a      	cbnz	r2, b7db8 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   b7db4:	f000 fef0 	bl	b8b98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7db8:	68c3      	ldr	r3, [r0, #12]
   b7dba:	aa01      	add	r2, sp, #4
   b7dbc:	4669      	mov	r1, sp
   b7dbe:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   b7dc0:	b003      	add	sp, #12
   b7dc2:	f85d fb04 	ldr.w	pc, [sp], #4

000b7dc6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7dc6:	680b      	ldr	r3, [r1, #0]
   b7dc8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7dca:	684b      	ldr	r3, [r1, #4]
   b7dcc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7dce:	b113      	cbz	r3, b7dd6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7dd0:	685a      	ldr	r2, [r3, #4]
   b7dd2:	3201      	adds	r2, #1
   b7dd4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7dd6:	4770      	bx	lr

000b7dd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7dda:	4604      	mov	r4, r0
   b7ddc:	4668      	mov	r0, sp
   b7dde:	460d      	mov	r5, r1
   b7de0:	f7ff fff1 	bl	b7dc6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7de4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7de6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7de8:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7dea:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7dec:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7dee:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7df0:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b7df2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7df4:	f7fc ffba 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7df8:	b135      	cbz	r5, b7e08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7dfa:	1d28      	adds	r0, r5, #4
   b7dfc:	f7fc ffb6 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e00:	2108      	movs	r1, #8
   b7e02:	4628      	mov	r0, r5
   b7e04:	f7fc fec7 	bl	b4b96 <_ZdlPvj>
        return p;
    }
   b7e08:	4620      	mov	r0, r4
   b7e0a:	b003      	add	sp, #12
   b7e0c:	bd30      	pop	{r4, r5, pc}

000b7e0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b7e0e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7e10:	b510      	push	{r4, lr}
      if (_M_empty())
   b7e12:	b90a      	cbnz	r2, b7e18 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7e14:	f000 fec0 	bl	b8b98 <_ZSt25__throw_bad_function_callv>
    }
   b7e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7e1c:	68c3      	ldr	r3, [r0, #12]
   b7e1e:	4718      	bx	r3

000b7e20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7e20:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7e22:	6800      	ldr	r0, [r0, #0]
   b7e24:	f100 0110 	add.w	r1, r0, #16
   b7e28:	f7ff fff1 	bl	b7e0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7e2c:	bd08      	pop	{r3, pc}

000b7e2e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7e2e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7e30:	b510      	push	{r4, lr}
      if (_M_empty())
   b7e32:	b90a      	cbnz	r2, b7e38 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7e34:	f000 feb0 	bl	b8b98 <_ZSt25__throw_bad_function_callv>
    }
   b7e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7e3c:	68c3      	ldr	r3, [r0, #12]
   b7e3e:	4718      	bx	r3

000b7e40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7e40:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7e42:	6800      	ldr	r0, [r0, #0]
   b7e44:	f100 0110 	add.w	r1, r0, #16
   b7e48:	f7ff fff1 	bl	b7e2e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7e4c:	bd08      	pop	{r3, pc}
	...

000b7e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7e50:	b538      	push	{r3, r4, r5, lr}
   b7e52:	2300      	movs	r3, #0
   b7e54:	4604      	mov	r4, r0
   b7e56:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e58:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7e5a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e5c:	f7fc fe95 	bl	b4b8a <_Znwj>
   b7e60:	b128      	cbz	r0, b7e6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7e62:	2301      	movs	r3, #1
   b7e64:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7e68:	4b02      	ldr	r3, [pc, #8]	; (b7e74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7e6a:	6003      	str	r3, [r0, #0]
   b7e6c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e6e:	6020      	str	r0, [r4, #0]
	}
   b7e70:	4620      	mov	r0, r4
   b7e72:	bd38      	pop	{r3, r4, r5, pc}
   b7e74:	000bb960 	.word	0x000bb960

000b7e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7e78:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7e7a:	2300      	movs	r3, #0
   b7e7c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7e7e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7e80:	4604      	mov	r4, r0
   b7e82:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7e84:	b12b      	cbz	r3, b7e92 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7e86:	2202      	movs	r2, #2
   b7e88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7e8a:	68eb      	ldr	r3, [r5, #12]
   b7e8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7e8e:	68ab      	ldr	r3, [r5, #8]
   b7e90:	60a3      	str	r3, [r4, #8]
    }
   b7e92:	4620      	mov	r0, r4
   b7e94:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7e9a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b7e9c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b7e9e:	4668      	mov	r0, sp
   b7ea0:	f7ff ff4c 	bl	b7d3c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7ea4:	f04f 0302 	mov.w	r3, #2
   b7ea8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7eac:	2a00      	cmp	r2, #0
   b7eae:	d103      	bne.n	b7eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b7eb0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7eb4:	2900      	cmp	r1, #0
   b7eb6:	d1f7      	bne.n	b7ea8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7eb8:	d125      	bne.n	b7f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7eba:	f104 050c 	add.w	r5, r4, #12
   b7ebe:	4669      	mov	r1, sp
   b7ec0:	4628      	mov	r0, r5
   b7ec2:	f7ff ff3b 	bl	b7d3c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7ec6:	f3bf 8f5b 	dmb	ish
   b7eca:	2301      	movs	r3, #1
   b7ecc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7ece:	2000      	movs	r0, #0
   b7ed0:	f104 0308 	add.w	r3, r4, #8
   b7ed4:	f3bf 8f5b 	dmb	ish
   b7ed8:	e853 6f00 	ldrex	r6, [r3]
   b7edc:	e843 0200 	strex	r2, r0, [r3]
   b7ee0:	2a00      	cmp	r2, #0
   b7ee2:	d1f9      	bne.n	b7ed8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7ee4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7ee8:	b16e      	cbz	r6, b7f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7eea:	f7fe f8d5 	bl	b6098 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7eee:	b178      	cbz	r0, b7f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7ef0:	4629      	mov	r1, r5
   b7ef2:	4630      	mov	r0, r6
   b7ef4:	f7ff ff8b 	bl	b7e0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7ef8:	4630      	mov	r0, r6
   b7efa:	f7fd f8e6 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7efe:	2110      	movs	r1, #16
   b7f00:	4630      	mov	r0, r6
   b7f02:	f7fc fe48 	bl	b4b96 <_ZdlPvj>
        p_->setError(std::move(error));
   b7f06:	4668      	mov	r0, sp
   b7f08:	f7ff ff25 	bl	b7d56 <_ZN8particle5ErrorD1Ev>
    }
   b7f0c:	b009      	add	sp, #36	; 0x24
   b7f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7f10:	4631      	mov	r1, r6
   b7f12:	a802      	add	r0, sp, #8
   b7f14:	f7ff ffb0 	bl	b7e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7f18:	68e0      	ldr	r0, [r4, #12]
   b7f1a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7f1e:	b108      	cbz	r0, b7f24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7f20:	f001 fa92 	bl	b9448 <strdup>
        type_(type) {
   b7f24:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7f26:	2010      	movs	r0, #16
   b7f28:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7f2c:	f7fc fe2d 	bl	b4b8a <_Znwj>
   b7f30:	4605      	mov	r5, r0
   b7f32:	b1e8      	cbz	r0, b7f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7f34:	2700      	movs	r7, #0
   b7f36:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7f38:	2018      	movs	r0, #24
   b7f3a:	f7fc fe26 	bl	b4b8a <_Znwj>
   b7f3e:	4604      	mov	r4, r0
   b7f40:	b188      	cbz	r0, b7f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7f42:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7f44:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7f46:	a802      	add	r0, sp, #8
   b7f48:	f7ff fa5a 	bl	b7400 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f4c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7f4e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f50:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f52:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7f54:	9204      	str	r2, [sp, #16]
   b7f56:	a906      	add	r1, sp, #24
   b7f58:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f5a:	60e3      	str	r3, [r4, #12]
   b7f5c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7f60:	9205      	str	r2, [sp, #20]
   b7f62:	f7ff feeb 	bl	b7d3c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7f66:	4b08      	ldr	r3, [pc, #32]	; (b7f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7f68:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7f6a:	4b08      	ldr	r3, [pc, #32]	; (b7f8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7f6c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7f6e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7f70:	a806      	add	r0, sp, #24
   b7f72:	f7ff fef0 	bl	b7d56 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7f76:	a802      	add	r0, sp, #8
   b7f78:	f7fd f8a7 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7f7c:	2200      	movs	r2, #0
   b7f7e:	4629      	mov	r1, r5
   b7f80:	4803      	ldr	r0, [pc, #12]	; (b7f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b7f82:	f7fe f891 	bl	b60a8 <application_thread_invoke>
   b7f86:	e7b7      	b.n	b7ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b7f88:	000b7e21 	.word	0x000b7e21
   b7f8c:	000b80a5 	.word	0x000b80a5
   b7f90:	000b85c1 	.word	0x000b85c1

000b7f94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f98:	b08b      	sub	sp, #44	; 0x2c
   b7f9a:	4605      	mov	r5, r0
   b7f9c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b7fa0:	460f      	mov	r7, r1
   b7fa2:	4690      	mov	r8, r2
   b7fa4:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7fa6:	f7fe f90b 	bl	b61c0 <spark_cloud_flag_connected>
   b7faa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7fac:	4683      	mov	fp, r0
   b7fae:	bb38      	cbnz	r0, b8000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b7fb0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7fb4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7fb6:	a905      	add	r1, sp, #20
   b7fb8:	4630      	mov	r0, r6
   b7fba:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7fbe:	f7ff febd 	bl	b7d3c <_ZN8particle5ErrorC1EOS0_>
   b7fc2:	2014      	movs	r0, #20
   b7fc4:	f7fc fde1 	bl	b4b8a <_Znwj>
   b7fc8:	4604      	mov	r4, r0
   b7fca:	b148      	cbz	r0, b7fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7fcc:	2302      	movs	r3, #2
   b7fce:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7fd0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7fd2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7fd6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b7fd8:	4631      	mov	r1, r6
   b7fda:	300c      	adds	r0, #12
   b7fdc:	f7ff feae 	bl	b7d3c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7fe0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b7fe2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7fe4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7fe8:	f7ff ff32 	bl	b7e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7fec:	4630      	mov	r0, r6
   b7fee:	f7ff feb2 	bl	b7d56 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b7ff2:	a805      	add	r0, sp, #20
   b7ff4:	f7ff feaf 	bl	b7d56 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b7ff8:	4628      	mov	r0, r5
   b7ffa:	b00b      	add	sp, #44	; 0x2c
   b7ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8000:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8002:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8004:	2014      	movs	r0, #20
   b8006:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b800a:	9307      	str	r3, [sp, #28]
   b800c:	f7fc fdbd 	bl	b4b8a <_Znwj>
   b8010:	4601      	mov	r1, r0
   b8012:	b118      	cbz	r0, b801c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8014:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8018:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b801a:	7044      	strb	r4, [r0, #1]
   b801c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b801e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8020:	f7ff ff16 	bl	b7e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8024:	4b1e      	ldr	r3, [pc, #120]	; (b80a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8026:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8028:	2008      	movs	r0, #8
   b802a:	f7fc fdae 	bl	b4b8a <_Znwj>
   b802e:	4604      	mov	r4, r0
   b8030:	b110      	cbz	r0, b8038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b8032:	a903      	add	r1, sp, #12
   b8034:	f7ff fec7 	bl	b7dc6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8038:	9600      	str	r6, [sp, #0]
   b803a:	fa5f f38a 	uxtb.w	r3, sl
   b803e:	464a      	mov	r2, r9
   b8040:	4641      	mov	r1, r8
   b8042:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8044:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8046:	f7fe f8c3 	bl	b61d0 <spark_send_event>
   b804a:	b9b8      	cbnz	r0, b807c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b804c:	9b03      	ldr	r3, [sp, #12]
   b804e:	785b      	ldrb	r3, [r3, #1]
   b8050:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8054:	b993      	cbnz	r3, b807c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8056:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b805a:	a905      	add	r1, sp, #20
   b805c:	a803      	add	r0, sp, #12
   b805e:	9205      	str	r2, [sp, #20]
   b8060:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8064:	f7ff ff18 	bl	b7e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8068:	a805      	add	r0, sp, #20
   b806a:	f7ff fe74 	bl	b7d56 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b806e:	a805      	add	r0, sp, #20
   b8070:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8072:	f7ff feb1 	bl	b7dd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8076:	a806      	add	r0, sp, #24
   b8078:	f7fc fe78 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b807c:	a903      	add	r1, sp, #12
   b807e:	a805      	add	r0, sp, #20
   b8080:	f7ff fea1 	bl	b7dc6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8084:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8086:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8088:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b808a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b808c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b808e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8090:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8092:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8094:	f7fc fe6a 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8098:	a804      	add	r0, sp, #16
   b809a:	f7fc fe67 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b809e:	e7ab      	b.n	b7ff8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b80a0:	000b8121 	.word	0x000b8121

000b80a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b80a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b80a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80a8:	4605      	mov	r5, r0
	switch (__op)
   b80aa:	d103      	bne.n	b80b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b80ac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b80ae:	6003      	str	r3, [r0, #0]
      }
   b80b0:	2000      	movs	r0, #0
   b80b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b80b4:	2a02      	cmp	r2, #2
   b80b6:	d010      	beq.n	b80da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b80b8:	2a03      	cmp	r2, #3
   b80ba:	d1f9      	bne.n	b80b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b80bc:	6804      	ldr	r4, [r0, #0]
   b80be:	2c00      	cmp	r4, #0
   b80c0:	d0f6      	beq.n	b80b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b80c2:	f104 0010 	add.w	r0, r4, #16
   b80c6:	f7ff fe46 	bl	b7d56 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b80ca:	4620      	mov	r0, r4
   b80cc:	f7fc fffd 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b80d0:	2118      	movs	r1, #24
   b80d2:	4620      	mov	r0, r4
   b80d4:	f7fc fd5f 	bl	b4b96 <_ZdlPvj>
   b80d8:	e7ea      	b.n	b80b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b80da:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b80dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b80de:	f7fc fd54 	bl	b4b8a <_Znwj>
   b80e2:	4604      	mov	r4, r0
   b80e4:	b150      	cbz	r0, b80fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b80e6:	4631      	mov	r1, r6
   b80e8:	f7ff fec6 	bl	b7e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b80ec:	6930      	ldr	r0, [r6, #16]
   b80ee:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b80f2:	b108      	cbz	r0, b80f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b80f4:	f001 f9a8 	bl	b9448 <strdup>
        type_(type) {
   b80f8:	6120      	str	r0, [r4, #16]
   b80fa:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b80fc:	602c      	str	r4, [r5, #0]
	}
   b80fe:	e7d7      	b.n	b80b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8100 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8100:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8102:	2300      	movs	r3, #0
   b8104:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8106:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8108:	4604      	mov	r4, r0
   b810a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b810c:	b12b      	cbz	r3, b811a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b810e:	2202      	movs	r2, #2
   b8110:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8112:	68eb      	ldr	r3, [r5, #12]
   b8114:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8116:	68ab      	ldr	r3, [r5, #8]
   b8118:	60a3      	str	r3, [r4, #8]
    }
   b811a:	4620      	mov	r0, r4
   b811c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8120 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8120:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8122:	b089      	sub	sp, #36	; 0x24
   b8124:	4604      	mov	r4, r0
   b8126:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8128:	a801      	add	r0, sp, #4
   b812a:	4611      	mov	r1, r2
   b812c:	f7ff fe54 	bl	b7dd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b8130:	b1a4      	cbz	r4, b815c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b8132:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8134:	b11d      	cbz	r5, b813e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b8136:	4628      	mov	r0, r5
   b8138:	f001 f986 	bl	b9448 <strdup>
   b813c:	4605      	mov	r5, r0
   b813e:	a801      	add	r0, sp, #4
   b8140:	a903      	add	r1, sp, #12
        type_(type) {
   b8142:	9503      	str	r5, [sp, #12]
   b8144:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8148:	f7ff fea6 	bl	b7e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b814c:	a803      	add	r0, sp, #12
   b814e:	f7ff fe02 	bl	b7d56 <_ZN8particle5ErrorD1Ev>
   b8152:	a802      	add	r0, sp, #8
   b8154:	f7fc fe0a 	bl	b4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8158:	b009      	add	sp, #36	; 0x24
   b815a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b815c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b815e:	2301      	movs	r3, #1
   b8160:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8164:	2a00      	cmp	r2, #0
   b8166:	d103      	bne.n	b8170 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8168:	e8c5 3f41 	strexb	r1, r3, [r5]
   b816c:	2900      	cmp	r1, #0
   b816e:	d1f7      	bne.n	b8160 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8170:	d1ef      	bne.n	b8152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8172:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8174:	f3bf 8f5b 	dmb	ish
   b8178:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b817a:	1d2b      	adds	r3, r5, #4
   b817c:	f3bf 8f5b 	dmb	ish
   b8180:	e853 6f00 	ldrex	r6, [r3]
   b8184:	e843 4200 	strex	r2, r4, [r3]
   b8188:	2a00      	cmp	r2, #0
   b818a:	d1f9      	bne.n	b8180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b818c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8190:	2e00      	cmp	r6, #0
   b8192:	d0de      	beq.n	b8152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8194:	4620      	mov	r0, r4
   b8196:	f7fd ff7f 	bl	b6098 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b819a:	4607      	mov	r7, r0
   b819c:	b160      	cbz	r0, b81b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b819e:	f105 010c 	add.w	r1, r5, #12
   b81a2:	4630      	mov	r0, r6
   b81a4:	f7ff fe43 	bl	b7e2e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b81a8:	4630      	mov	r0, r6
   b81aa:	f7fc ff8e 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b81ae:	2110      	movs	r1, #16
   b81b0:	4630      	mov	r0, r6
   b81b2:	f7fc fcf0 	bl	b4b96 <_ZdlPvj>
   b81b6:	e7cc      	b.n	b8152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b81b8:	4631      	mov	r1, r6
   b81ba:	a803      	add	r0, sp, #12
   b81bc:	f7ff ffa0 	bl	b8100 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b81c0:	7b2b      	ldrb	r3, [r5, #12]
   b81c2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b81c6:	2010      	movs	r0, #16
   b81c8:	f7fc fcdf 	bl	b4b8a <_Znwj>
   b81cc:	4605      	mov	r5, r0
   b81ce:	b1d0      	cbz	r0, b8206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b81d0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81d2:	2014      	movs	r0, #20
   b81d4:	f7fc fcd9 	bl	b4b8a <_Znwj>
   b81d8:	4604      	mov	r4, r0
   b81da:	b178      	cbz	r0, b81fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b81dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b81de:	4601      	mov	r1, r0
   b81e0:	a803      	add	r0, sp, #12
   b81e2:	f7ff f90d 	bl	b7400 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b81e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b81e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b81ea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b81ec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b81ee:	9205      	str	r2, [sp, #20]
   b81f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b81f2:	60e3      	str	r3, [r4, #12]
   b81f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b81f8:	9206      	str	r2, [sp, #24]
   b81fa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b81fc:	4b06      	ldr	r3, [pc, #24]	; (b8218 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b81fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8200:	4b06      	ldr	r3, [pc, #24]	; (b821c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8202:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8204:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b8206:	a803      	add	r0, sp, #12
   b8208:	f7fc ff5f 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b820c:	2200      	movs	r2, #0
   b820e:	4629      	mov	r1, r5
   b8210:	4803      	ldr	r0, [pc, #12]	; (b8220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b8212:	f7fd ff49 	bl	b60a8 <application_thread_invoke>
   b8216:	e7c7      	b.n	b81a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b8218:	000b7e41 	.word	0x000b7e41
   b821c:	000b8225 	.word	0x000b8225
   b8220:	000b85c1 	.word	0x000b85c1

000b8224 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8224:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8226:	b570      	push	{r4, r5, r6, lr}
   b8228:	4604      	mov	r4, r0
	switch (__op)
   b822a:	d103      	bne.n	b8234 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b822c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b822e:	6003      	str	r3, [r0, #0]
      }
   b8230:	2000      	movs	r0, #0
   b8232:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b8234:	2a02      	cmp	r2, #2
   b8236:	d00c      	beq.n	b8252 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8238:	2a03      	cmp	r2, #3
   b823a:	d1f9      	bne.n	b8230 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b823c:	6804      	ldr	r4, [r0, #0]
   b823e:	2c00      	cmp	r4, #0
   b8240:	d0f6      	beq.n	b8230 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b8242:	4620      	mov	r0, r4
   b8244:	f7fc ff41 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8248:	2114      	movs	r1, #20
   b824a:	4620      	mov	r0, r4
   b824c:	f7fc fca3 	bl	b4b96 <_ZdlPvj>
   b8250:	e7ee      	b.n	b8230 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8252:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8254:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8256:	f7fc fc98 	bl	b4b8a <_Znwj>
   b825a:	4605      	mov	r5, r0
   b825c:	b120      	cbz	r0, b8268 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b825e:	4631      	mov	r1, r6
   b8260:	f7ff ff4e 	bl	b8100 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8264:	7c33      	ldrb	r3, [r6, #16]
   b8266:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8268:	6025      	str	r5, [r4, #0]
	}
   b826a:	e7e1      	b.n	b8230 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b826c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b826c:	4770      	bx	lr

000b826e <_ZN9IPAddressD0Ev>:
   b826e:	b510      	push	{r4, lr}
   b8270:	2118      	movs	r1, #24
   b8272:	4604      	mov	r4, r0
   b8274:	f7fc fc8f 	bl	b4b96 <_ZdlPvj>
   b8278:	4620      	mov	r0, r4
   b827a:	bd10      	pop	{r4, pc}

000b827c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b827c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b827e:	7d03      	ldrb	r3, [r0, #20]
   b8280:	2b06      	cmp	r3, #6
{
   b8282:	b08d      	sub	sp, #52	; 0x34
   b8284:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8286:	f100 0704 	add.w	r7, r0, #4
   b828a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b828e:	d012      	beq.n	b82b6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8290:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8294:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8298:	220a      	movs	r2, #10
   b829a:	4630      	mov	r0, r6
   b829c:	f7ff fb79 	bl	b7992 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b82a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b82a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b82a4:	d019      	beq.n	b82da <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b82a6:	2c00      	cmp	r4, #0
   b82a8:	d0f4      	beq.n	b8294 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b82aa:	212e      	movs	r1, #46	; 0x2e
   b82ac:	4630      	mov	r0, r6
   b82ae:	f7ff fb57 	bl	b7960 <_ZN5Print5printEc>
   b82b2:	4404      	add	r4, r0
   b82b4:	e7ee      	b.n	b8294 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b82b6:	232f      	movs	r3, #47	; 0x2f
   b82b8:	466a      	mov	r2, sp
   b82ba:	4639      	mov	r1, r7
   b82bc:	200a      	movs	r0, #10
		buf[0] = 0;
   b82be:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b82c2:	f7fd fdf9 	bl	b5eb8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b82c6:	4668      	mov	r0, sp
   b82c8:	f7fc fc04 	bl	b4ad4 <strlen>
   b82cc:	6833      	ldr	r3, [r6, #0]
   b82ce:	4602      	mov	r2, r0
   b82d0:	68db      	ldr	r3, [r3, #12]
   b82d2:	4669      	mov	r1, sp
   b82d4:	4630      	mov	r0, r6
   b82d6:	4798      	blx	r3
   b82d8:	4604      	mov	r4, r0
    }
    return n;
}
   b82da:	4620      	mov	r0, r4
   b82dc:	b00d      	add	sp, #52	; 0x34
   b82de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b82e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b82e0:	b510      	push	{r4, lr}
   b82e2:	4b05      	ldr	r3, [pc, #20]	; (b82f8 <_ZN9IPAddressC1Ev+0x18>)
   b82e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b82e6:	2211      	movs	r2, #17
   b82e8:	f840 3b04 	str.w	r3, [r0], #4
   b82ec:	2100      	movs	r1, #0
   b82ee:	f001 f86d 	bl	b93cc <memset>
}
   b82f2:	4620      	mov	r0, r4
   b82f4:	bd10      	pop	{r4, pc}
   b82f6:	bf00      	nop
   b82f8:	000bb97c 	.word	0x000bb97c

000b82fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b82fc:	4603      	mov	r3, r0
   b82fe:	4a07      	ldr	r2, [pc, #28]	; (b831c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8300:	b510      	push	{r4, lr}
   b8302:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8306:	f101 0210 	add.w	r2, r1, #16
   b830a:	f851 4b04 	ldr.w	r4, [r1], #4
   b830e:	f843 4b04 	str.w	r4, [r3], #4
   b8312:	4291      	cmp	r1, r2
   b8314:	d1f9      	bne.n	b830a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8316:	780a      	ldrb	r2, [r1, #0]
   b8318:	701a      	strb	r2, [r3, #0]
}
   b831a:	bd10      	pop	{r4, pc}
   b831c:	000bb97c 	.word	0x000bb97c

000b8320 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8320:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8322:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8326:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b832a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b832e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8332:	2304      	movs	r3, #4
   b8334:	6041      	str	r1, [r0, #4]
   b8336:	7503      	strb	r3, [r0, #20]
}
   b8338:	bd10      	pop	{r4, pc}
	...

000b833c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b833c:	b507      	push	{r0, r1, r2, lr}
   b833e:	4b06      	ldr	r3, [pc, #24]	; (b8358 <_ZN9IPAddressC1EPKh+0x1c>)
   b8340:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8342:	78cb      	ldrb	r3, [r1, #3]
   b8344:	9300      	str	r3, [sp, #0]
   b8346:	788b      	ldrb	r3, [r1, #2]
   b8348:	784a      	ldrb	r2, [r1, #1]
   b834a:	7809      	ldrb	r1, [r1, #0]
   b834c:	f7ff ffe8 	bl	b8320 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8350:	b003      	add	sp, #12
   b8352:	f85d fb04 	ldr.w	pc, [sp], #4
   b8356:	bf00      	nop
   b8358:	000bb97c 	.word	0x000bb97c

000b835c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b835c:	7441      	strb	r1, [r0, #17]
}
   b835e:	4770      	bx	lr

000b8360 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8360:	4770      	bx	lr

000b8362 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8362:	4770      	bx	lr

000b8364 <_ZN9USBSerial4readEv>:
{
   b8364:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8366:	2100      	movs	r1, #0
   b8368:	7c00      	ldrb	r0, [r0, #16]
   b836a:	f7fd fe4d 	bl	b6008 <HAL_USB_USART_Receive_Data>
}
   b836e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8372:	bd08      	pop	{r3, pc}

000b8374 <_ZN9USBSerial4peekEv>:
{
   b8374:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8376:	2101      	movs	r1, #1
   b8378:	7c00      	ldrb	r0, [r0, #16]
   b837a:	f7fd fe45 	bl	b6008 <HAL_USB_USART_Receive_Data>
}
   b837e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8382:	bd08      	pop	{r3, pc}

000b8384 <_ZN9USBSerial17availableForWriteEv>:
{
   b8384:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8386:	7c00      	ldrb	r0, [r0, #16]
   b8388:	f7fd fe36 	bl	b5ff8 <HAL_USB_USART_Available_Data_For_Write>
}
   b838c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8390:	bd08      	pop	{r3, pc}

000b8392 <_ZN9USBSerial9availableEv>:
{
   b8392:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8394:	7c00      	ldrb	r0, [r0, #16]
   b8396:	f7fd fe27 	bl	b5fe8 <HAL_USB_USART_Available_Data>
}
   b839a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b839e:	bd08      	pop	{r3, pc}

000b83a0 <_ZN9USBSerial5writeEh>:
{
   b83a0:	b513      	push	{r0, r1, r4, lr}
   b83a2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b83a4:	7c00      	ldrb	r0, [r0, #16]
{
   b83a6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b83a8:	f7fd fe26 	bl	b5ff8 <HAL_USB_USART_Available_Data_For_Write>
   b83ac:	2800      	cmp	r0, #0
   b83ae:	9901      	ldr	r1, [sp, #4]
   b83b0:	dc01      	bgt.n	b83b6 <_ZN9USBSerial5writeEh+0x16>
   b83b2:	7c60      	ldrb	r0, [r4, #17]
   b83b4:	b120      	cbz	r0, b83c0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b83b6:	7c20      	ldrb	r0, [r4, #16]
   b83b8:	f7fd fe2e 	bl	b6018 <HAL_USB_USART_Send_Data>
   b83bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b83c0:	b002      	add	sp, #8
   b83c2:	bd10      	pop	{r4, pc}

000b83c4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b83c4:	7c00      	ldrb	r0, [r0, #16]
   b83c6:	f7fd be2f 	b.w	b6028 <HAL_USB_USART_Flush_Data>

000b83ca <_ZN9USBSerialD0Ev>:
   b83ca:	b510      	push	{r4, lr}
   b83cc:	2114      	movs	r1, #20
   b83ce:	4604      	mov	r4, r0
   b83d0:	f7fc fbe1 	bl	b4b96 <_ZdlPvj>
   b83d4:	4620      	mov	r0, r4
   b83d6:	bd10      	pop	{r4, pc}

000b83d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b83d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b83da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b83de:	4604      	mov	r4, r0
   b83e0:	4608      	mov	r0, r1
   b83e2:	2100      	movs	r1, #0
   b83e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b83e8:	4b04      	ldr	r3, [pc, #16]	; (b83fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b83ea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b83ec:	2301      	movs	r3, #1
  _serial = serial;
   b83ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b83f0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b83f2:	4611      	mov	r1, r2
   b83f4:	f7fd fdf0 	bl	b5fd8 <HAL_USB_USART_Init>
}
   b83f8:	4620      	mov	r0, r4
   b83fa:	bd10      	pop	{r4, pc}
   b83fc:	000bb990 	.word	0x000bb990

000b8400 <_Z19acquireSerialBufferv>:
{
   b8400:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8402:	2214      	movs	r2, #20
{
   b8404:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8406:	2100      	movs	r1, #0
   b8408:	f000 ffe0 	bl	b93cc <memset>
}
   b840c:	4620      	mov	r0, r4
   b840e:	bd10      	pop	{r4, pc}

000b8410 <_Z16_fetch_usbserialv>:
{
   b8410:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8412:	4c0f      	ldr	r4, [pc, #60]	; (b8450 <_Z16_fetch_usbserialv+0x40>)
{
   b8414:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8416:	a803      	add	r0, sp, #12
   b8418:	f7ff fff2 	bl	b8400 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b841c:	7821      	ldrb	r1, [r4, #0]
   b841e:	f3bf 8f5b 	dmb	ish
   b8422:	f011 0101 	ands.w	r1, r1, #1
   b8426:	d10f      	bne.n	b8448 <_Z16_fetch_usbserialv+0x38>
   b8428:	4620      	mov	r0, r4
   b842a:	9101      	str	r1, [sp, #4]
   b842c:	f7fc fbb5 	bl	b4b9a <__cxa_guard_acquire>
   b8430:	9901      	ldr	r1, [sp, #4]
   b8432:	b148      	cbz	r0, b8448 <_Z16_fetch_usbserialv+0x38>
   b8434:	aa03      	add	r2, sp, #12
   b8436:	4807      	ldr	r0, [pc, #28]	; (b8454 <_Z16_fetch_usbserialv+0x44>)
   b8438:	f7ff ffce 	bl	b83d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b843c:	4620      	mov	r0, r4
   b843e:	f7fc fbb1 	bl	b4ba4 <__cxa_guard_release>
   b8442:	4805      	ldr	r0, [pc, #20]	; (b8458 <_Z16_fetch_usbserialv+0x48>)
   b8444:	f000 ff84 	bl	b9350 <atexit>
	return _usbserial;
}
   b8448:	4802      	ldr	r0, [pc, #8]	; (b8454 <_Z16_fetch_usbserialv+0x44>)
   b844a:	b008      	add	sp, #32
   b844c:	bd10      	pop	{r4, pc}
   b844e:	bf00      	nop
   b8450:	2003e668 	.word	0x2003e668
   b8454:	2003e66c 	.word	0x2003e66c
   b8458:	000b8361 	.word	0x000b8361

000b845c <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
   b845c:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b845e:	b510      	push	{r4, lr}
   b8460:	b90a      	cbnz	r2, b8466 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b8462:	f000 fb99 	bl	b8b98 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b8466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b846a:	68c3      	ldr	r3, [r0, #12]
   b846c:	4718      	bx	r3
	...

000b8470 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b8470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b8472:	4f10      	ldr	r7, [pc, #64]	; (b84b4 <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b8474:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b8478:	4606      	mov	r6, r0
   b847a:	460d      	mov	r5, r1
    delete handlers[pin];
   b847c:	b134      	cbz	r4, b848c <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b847e:	4620      	mov	r0, r4
   b8480:	f7fc fe23 	bl	b50ca <_ZNSt14_Function_baseD1Ev>
   b8484:	2110      	movs	r1, #16
   b8486:	4620      	mov	r0, r4
   b8488:	f7fc fb85 	bl	b4b96 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b848c:	2010      	movs	r0, #16
   b848e:	f7fc fb7c 	bl	b4b8a <_Znwj>
   b8492:	4604      	mov	r4, r0
   b8494:	b150      	cbz	r0, b84ac <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b8496:	2300      	movs	r3, #0
   b8498:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b849a:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b849c:	b133      	cbz	r3, b84ac <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b849e:	2202      	movs	r2, #2
   b84a0:	4629      	mov	r1, r5
   b84a2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b84a4:	68eb      	ldr	r3, [r5, #12]
   b84a6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b84a8:	68ab      	ldr	r3, [r5, #8]
   b84aa:	60a3      	str	r3, [r4, #8]
   b84ac:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b84b0:	4620      	mov	r0, r4
   b84b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b84b4:	2003e680 	.word	0x2003e680

000b84b8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b84b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b84ba:	b087      	sub	sp, #28
   b84bc:	4605      	mov	r5, r0
   b84be:	9103      	str	r1, [sp, #12]
   b84c0:	4617      	mov	r7, r2
   b84c2:	461e      	mov	r6, r3
    hal_interrupt_detach(pin);
   b84c4:	f7fd fbf6 	bl	b5cb4 <hal_interrupt_detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b84c8:	9903      	ldr	r1, [sp, #12]
   b84ca:	4628      	mov	r0, r5
   b84cc:	f7ff ffd0 	bl	b8470 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b84d0:	4604      	mov	r4, r0
   b84d2:	b1e8      	cbz	r0, b8510 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        hal_interrupt_extra_configuration_t extra = {};
   b84d4:	2100      	movs	r1, #0
  if (priority >= 0) {
   b84d6:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b84d8:	f04f 0304 	mov.w	r3, #4
        hal_interrupt_extra_configuration_t extra = {};
   b84dc:	f8ad 1015 	strh.w	r1, [sp, #21]
   b84e0:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b84e4:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b84e8:	bfa2      	ittt	ge
   b84ea:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b84ec:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b84f0:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b84f4:	9100      	str	r1, [sp, #0]
   b84f6:	4602      	mov	r2, r0
   b84f8:	4907      	ldr	r1, [pc, #28]	; (b8518 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b84fa:	bfa8      	it	ge
   b84fc:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8500:	463b      	mov	r3, r7
   b8502:	4628      	mov	r0, r5
   b8504:	f7fd fbce 	bl	b5ca4 <hal_interrupt_attach>
   b8508:	b110      	cbz	r0, b8510 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b850a:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b850c:	b007      	add	sp, #28
   b850e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b8510:	1e20      	subs	r0, r4, #0
   b8512:	bf18      	it	ne
   b8514:	2001      	movne	r0, #1
   b8516:	e7f9      	b.n	b850c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b8518:	000b845d 	.word	0x000b845d

000b851c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b851c:	4770      	bx	lr

000b851e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b851e:	7441      	strb	r1, [r0, #17]
}
   b8520:	4770      	bx	lr

000b8522 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8522:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8524:	7c00      	ldrb	r0, [r0, #16]
   b8526:	f7fd fcff 	bl	b5f28 <hal_usart_available_data_for_write>
}
   b852a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b852e:	bd08      	pop	{r3, pc}

000b8530 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8530:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8532:	7c00      	ldrb	r0, [r0, #16]
   b8534:	f7fd fcd0 	bl	b5ed8 <hal_usart_available>
}
   b8538:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b853c:	bd08      	pop	{r3, pc}

000b853e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b853e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8540:	7c00      	ldrb	r0, [r0, #16]
   b8542:	f7fd fcd9 	bl	b5ef8 <hal_usart_peek>
}
   b8546:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b854a:	bd08      	pop	{r3, pc}

000b854c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b854c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b854e:	7c00      	ldrb	r0, [r0, #16]
   b8550:	f7fd fcca 	bl	b5ee8 <hal_usart_read>
}
   b8554:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8558:	bd08      	pop	{r3, pc}

000b855a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b855a:	7c00      	ldrb	r0, [r0, #16]
   b855c:	f7fd bcd4 	b.w	b5f08 <hal_usart_flush>

000b8560 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8560:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8562:	7c45      	ldrb	r5, [r0, #17]
{
   b8564:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8566:	b12d      	cbz	r5, b8574 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8568:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b856a:	b003      	add	sp, #12
   b856c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8570:	f7fd bcaa 	b.w	b5ec8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8574:	7c00      	ldrb	r0, [r0, #16]
   b8576:	9101      	str	r1, [sp, #4]
   b8578:	f7fd fcd6 	bl	b5f28 <hal_usart_available_data_for_write>
   b857c:	2800      	cmp	r0, #0
   b857e:	9901      	ldr	r1, [sp, #4]
   b8580:	dcf2      	bgt.n	b8568 <_ZN11USARTSerial5writeEh+0x8>
}
   b8582:	4628      	mov	r0, r5
   b8584:	b003      	add	sp, #12
   b8586:	bd30      	pop	{r4, r5, pc}

000b8588 <_ZN11USARTSerialD0Ev>:
   b8588:	b510      	push	{r4, lr}
   b858a:	2114      	movs	r1, #20
   b858c:	4604      	mov	r4, r0
   b858e:	f7fc fb02 	bl	b4b96 <_ZdlPvj>
   b8592:	4620      	mov	r0, r4
   b8594:	bd10      	pop	{r4, pc}
	...

000b8598 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8598:	b510      	push	{r4, lr}
   b859a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b859e:	4604      	mov	r4, r0
   b85a0:	4608      	mov	r0, r1
   b85a2:	4611      	mov	r1, r2
   b85a4:	2200      	movs	r2, #0
   b85a6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b85aa:	4b04      	ldr	r3, [pc, #16]	; (b85bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b85ac:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b85ae:	2301      	movs	r3, #1
  _serial = serial;
   b85b0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b85b2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b85b4:	f7fd fcc0 	bl	b5f38 <hal_usart_init_ex>
}
   b85b8:	4620      	mov	r0, r4
   b85ba:	bd10      	pop	{r4, pc}
   b85bc:	000bb9c0 	.word	0x000bb9c0

000b85c0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b85c0:	b510      	push	{r4, lr}
      if (_M_empty())
   b85c2:	6883      	ldr	r3, [r0, #8]
   b85c4:	4604      	mov	r4, r0
   b85c6:	b90b      	cbnz	r3, b85cc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b85c8:	f000 fae6 	bl	b8b98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b85cc:	68c3      	ldr	r3, [r0, #12]
   b85ce:	4798      	blx	r3
      if (_M_manager)
   b85d0:	68a3      	ldr	r3, [r4, #8]
   b85d2:	b11b      	cbz	r3, b85dc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b85d4:	2203      	movs	r2, #3
   b85d6:	4621      	mov	r1, r4
   b85d8:	4620      	mov	r0, r4
   b85da:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b85dc:	4620      	mov	r0, r4
   b85de:	2110      	movs	r1, #16
}
   b85e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b85e4:	f7fc bad7 	b.w	b4b96 <_ZdlPvj>

000b85e8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b85e8:	4770      	bx	lr

000b85ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b85ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b85ec:	4606      	mov	r6, r0
   b85ee:	4615      	mov	r5, r2
   b85f0:	460c      	mov	r4, r1
   b85f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b85f4:	42bc      	cmp	r4, r7
   b85f6:	d006      	beq.n	b8606 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b85f8:	6833      	ldr	r3, [r6, #0]
   b85fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b85fe:	689b      	ldr	r3, [r3, #8]
   b8600:	4630      	mov	r0, r6
   b8602:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8604:	e7f6      	b.n	b85f4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8606:	4628      	mov	r0, r5
   b8608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b860a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b860a:	7c00      	ldrb	r0, [r0, #16]
   b860c:	2200      	movs	r2, #0
   b860e:	f7fd bc9b 	b.w	b5f48 <hal_i2c_write>

000b8612 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8612:	7c00      	ldrb	r0, [r0, #16]
   b8614:	2100      	movs	r1, #0
   b8616:	f7fd bc9f 	b.w	b5f58 <hal_i2c_available>

000b861a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b861a:	7c00      	ldrb	r0, [r0, #16]
   b861c:	2100      	movs	r1, #0
   b861e:	f7fd bca3 	b.w	b5f68 <hal_i2c_read>

000b8622 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8622:	7c00      	ldrb	r0, [r0, #16]
   b8624:	2100      	movs	r1, #0
   b8626:	f7fd bca7 	b.w	b5f78 <hal_i2c_peek>

000b862a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b862a:	7c00      	ldrb	r0, [r0, #16]
   b862c:	2100      	movs	r1, #0
   b862e:	f7fd bcab 	b.w	b5f88 <hal_i2c_flush>

000b8632 <_ZN7TwoWireD0Ev>:
   b8632:	b510      	push	{r4, lr}
   b8634:	2114      	movs	r1, #20
   b8636:	4604      	mov	r4, r0
   b8638:	f7fc faad 	bl	b4b96 <_ZdlPvj>
   b863c:	4620      	mov	r0, r4
   b863e:	bd10      	pop	{r4, pc}

000b8640 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8640:	b510      	push	{r4, lr}
   b8642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8646:	4604      	mov	r4, r0
   b8648:	4608      	mov	r0, r1
   b864a:	2100      	movs	r1, #0
   b864c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8650:	4b03      	ldr	r3, [pc, #12]	; (b8660 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8652:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8654:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8656:	4611      	mov	r1, r2
   b8658:	f7fd fca6 	bl	b5fa8 <hal_i2c_init>
}
   b865c:	4620      	mov	r0, r4
   b865e:	bd10      	pop	{r4, pc}
   b8660:	000bb9f0 	.word	0x000bb9f0

000b8664 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8664:	2200      	movs	r2, #0
   b8666:	6840      	ldr	r0, [r0, #4]
   b8668:	4611      	mov	r1, r2
   b866a:	f7fd bd59 	b.w	b6120 <network_ready>

000b866e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b866e:	2200      	movs	r2, #0
   b8670:	6840      	ldr	r0, [r0, #4]
   b8672:	4611      	mov	r1, r2
   b8674:	f7fd bd74 	b.w	b6160 <network_listening>

000b8678 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8678:	2200      	movs	r2, #0
   b867a:	6840      	ldr	r0, [r0, #4]
   b867c:	4611      	mov	r1, r2
   b867e:	f7fd bd7f 	b.w	b6180 <network_get_listen_timeout>

000b8682 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8682:	6840      	ldr	r0, [r0, #4]
   b8684:	2200      	movs	r2, #0
   b8686:	f7fd bd73 	b.w	b6170 <network_set_listen_timeout>

000b868a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b868a:	6840      	ldr	r0, [r0, #4]
   b868c:	2200      	movs	r2, #0
   b868e:	f081 0101 	eor.w	r1, r1, #1
   b8692:	f7fd bd5d 	b.w	b6150 <network_listen>

000b8696 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8696:	2300      	movs	r3, #0
   b8698:	6840      	ldr	r0, [r0, #4]
   b869a:	461a      	mov	r2, r3
   b869c:	4619      	mov	r1, r3
   b869e:	f7fd bd4f 	b.w	b6140 <network_off>

000b86a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b86a2:	2300      	movs	r3, #0
   b86a4:	6840      	ldr	r0, [r0, #4]
   b86a6:	461a      	mov	r2, r3
   b86a8:	4619      	mov	r1, r3
   b86aa:	f7fd bd41 	b.w	b6130 <network_on>

000b86ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b86ae:	2200      	movs	r2, #0
   b86b0:	6840      	ldr	r0, [r0, #4]
   b86b2:	4611      	mov	r1, r2
   b86b4:	f7fd bd24 	b.w	b6100 <network_connecting>

000b86b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b86b8:	6840      	ldr	r0, [r0, #4]
   b86ba:	2200      	movs	r2, #0
   b86bc:	2102      	movs	r1, #2
   b86be:	f7fd bd27 	b.w	b6110 <network_disconnect>

000b86c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b86c2:	2300      	movs	r3, #0
   b86c4:	6840      	ldr	r0, [r0, #4]
   b86c6:	461a      	mov	r2, r3
   b86c8:	f7fd bd12 	b.w	b60f0 <network_connect>

000b86cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b86cc:	4b02      	ldr	r3, [pc, #8]	; (b86d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b86ce:	2204      	movs	r2, #4
   b86d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b86d2:	4a02      	ldr	r2, [pc, #8]	; (b86dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b86d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b86d6:	4770      	bx	lr
   b86d8:	2003e710 	.word	0x2003e710
   b86dc:	000bba18 	.word	0x000bba18

000b86e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b86e0:	2300      	movs	r3, #0
   b86e2:	6840      	ldr	r0, [r0, #4]
   b86e4:	461a      	mov	r2, r3
   b86e6:	f7fd bd03 	b.w	b60f0 <network_connect>

000b86ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b86ea:	6840      	ldr	r0, [r0, #4]
   b86ec:	2200      	movs	r2, #0
   b86ee:	2102      	movs	r1, #2
   b86f0:	f7fd bd0e 	b.w	b6110 <network_disconnect>

000b86f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b86f4:	2200      	movs	r2, #0
   b86f6:	6840      	ldr	r0, [r0, #4]
   b86f8:	4611      	mov	r1, r2
   b86fa:	f7fd bd01 	b.w	b6100 <network_connecting>

000b86fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b86fe:	2200      	movs	r2, #0
   b8700:	6840      	ldr	r0, [r0, #4]
   b8702:	4611      	mov	r1, r2
   b8704:	f7fd bd0c 	b.w	b6120 <network_ready>

000b8708 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8708:	2300      	movs	r3, #0
   b870a:	6840      	ldr	r0, [r0, #4]
   b870c:	461a      	mov	r2, r3
   b870e:	4619      	mov	r1, r3
   b8710:	f7fd bd0e 	b.w	b6130 <network_on>

000b8714 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8714:	2300      	movs	r3, #0
   b8716:	6840      	ldr	r0, [r0, #4]
   b8718:	461a      	mov	r2, r3
   b871a:	4619      	mov	r1, r3
   b871c:	f7fd bd10 	b.w	b6140 <network_off>

000b8720 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8720:	6840      	ldr	r0, [r0, #4]
   b8722:	2100      	movs	r1, #0
   b8724:	f7fd bd34 	b.w	b6190 <network_is_on>

000b8728 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8728:	6840      	ldr	r0, [r0, #4]
   b872a:	2100      	movs	r1, #0
   b872c:	f7fd bd38 	b.w	b61a0 <network_is_off>

000b8730 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8730:	6840      	ldr	r0, [r0, #4]
   b8732:	2200      	movs	r2, #0
   b8734:	f081 0101 	eor.w	r1, r1, #1
   b8738:	f7fd bd0a 	b.w	b6150 <network_listen>

000b873c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b873c:	6840      	ldr	r0, [r0, #4]
   b873e:	2200      	movs	r2, #0
   b8740:	f7fd bd16 	b.w	b6170 <network_set_listen_timeout>

000b8744 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8744:	2200      	movs	r2, #0
   b8746:	6840      	ldr	r0, [r0, #4]
   b8748:	4611      	mov	r1, r2
   b874a:	f7fd bd19 	b.w	b6180 <network_get_listen_timeout>

000b874e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b874e:	2200      	movs	r2, #0
   b8750:	6840      	ldr	r0, [r0, #4]
   b8752:	4611      	mov	r1, r2
   b8754:	f7fd bd04 	b.w	b6160 <network_listening>

000b8758 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b875c:	b095      	sub	sp, #84	; 0x54
   b875e:	4614      	mov	r4, r2
   b8760:	460d      	mov	r5, r1
   b8762:	4607      	mov	r7, r0
    IPAddress addr;
   b8764:	f7ff fdbc 	bl	b82e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8768:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b876a:	221c      	movs	r2, #28
   b876c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b876e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8770:	f000 fe2c 	bl	b93cc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8774:	2340      	movs	r3, #64	; 0x40
   b8776:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8778:	4620      	mov	r0, r4
   b877a:	466b      	mov	r3, sp
   b877c:	aa0c      	add	r2, sp, #48	; 0x30
   b877e:	2100      	movs	r1, #0
   b8780:	f7fd fa80 	bl	b5c84 <netdb_getaddrinfo>
    if (!r) {
   b8784:	4604      	mov	r4, r0
   b8786:	2800      	cmp	r0, #0
   b8788:	d14b      	bne.n	b8822 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b878a:	4602      	mov	r2, r0
   b878c:	2101      	movs	r1, #1
   b878e:	6868      	ldr	r0, [r5, #4]
   b8790:	f7fd fcc6 	bl	b6120 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8794:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8796:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8798:	4622      	mov	r2, r4
   b879a:	6868      	ldr	r0, [r5, #4]
   b879c:	f7fd fcc0 	bl	b6120 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87a2:	4681      	mov	r9, r0
        bool ok = false;
   b87a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87a6:	2e00      	cmp	r6, #0
   b87a8:	d03b      	beq.n	b8822 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b87aa:	2900      	cmp	r1, #0
   b87ac:	d139      	bne.n	b8822 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b87ae:	6873      	ldr	r3, [r6, #4]
   b87b0:	2b02      	cmp	r3, #2
   b87b2:	d003      	beq.n	b87bc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b87b4:	2b0a      	cmp	r3, #10
   b87b6:	d011      	beq.n	b87dc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87b8:	69f6      	ldr	r6, [r6, #28]
   b87ba:	e7f4      	b.n	b87a6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b87bc:	f1b8 0f00 	cmp.w	r8, #0
   b87c0:	d0fa      	beq.n	b87b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b87c2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b87c4:	a806      	add	r0, sp, #24
   b87c6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b87c8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b87ca:	f7ff fdb7 	bl	b833c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b87ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87d0:	1d3c      	adds	r4, r7, #4
   b87d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b87d4:	682b      	ldr	r3, [r5, #0]
   b87d6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b87d8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b87da:	e7ed      	b.n	b87b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b87dc:	f1b9 0f00 	cmp.w	r9, #0
   b87e0:	d0ea      	beq.n	b87b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b87e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b87e4:	2210      	movs	r2, #16
   b87e6:	a801      	add	r0, sp, #4
   b87e8:	f000 fdf0 	bl	b93cc <memset>
                    a.v = 6;
   b87ec:	2306      	movs	r3, #6
   b87ee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b87f2:	ad01      	add	r5, sp, #4
   b87f4:	f104 0308 	add.w	r3, r4, #8
   b87f8:	3418      	adds	r4, #24
   b87fa:	6818      	ldr	r0, [r3, #0]
   b87fc:	6859      	ldr	r1, [r3, #4]
   b87fe:	462a      	mov	r2, r5
   b8800:	c203      	stmia	r2!, {r0, r1}
   b8802:	3308      	adds	r3, #8
   b8804:	42a3      	cmp	r3, r4
   b8806:	4615      	mov	r5, r2
   b8808:	d1f7      	bne.n	b87fa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b880a:	a901      	add	r1, sp, #4
   b880c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b880e:	ad07      	add	r5, sp, #28
   b8810:	f7ff fd74 	bl	b82fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8816:	1d3c      	adds	r4, r7, #4
   b8818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b881a:	682b      	ldr	r3, [r5, #0]
   b881c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b881e:	4649      	mov	r1, r9
   b8820:	e7ca      	b.n	b87b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8822:	9800      	ldr	r0, [sp, #0]
   b8824:	f7fd fa26 	bl	b5c74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8828:	4638      	mov	r0, r7
   b882a:	b015      	add	sp, #84	; 0x54
   b882c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8830 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8830:	4b02      	ldr	r3, [pc, #8]	; (b883c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8832:	4a03      	ldr	r2, [pc, #12]	; (b8840 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8834:	601a      	str	r2, [r3, #0]
   b8836:	2200      	movs	r2, #0
   b8838:	605a      	str	r2, [r3, #4]

} // spark
   b883a:	4770      	bx	lr
   b883c:	2003e718 	.word	0x2003e718
   b8840:	000bba54 	.word	0x000bba54

000b8844 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8844:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8846:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8848:	d902      	bls.n	b8850 <pinAvailable+0xc>
    return false;
   b884a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b884c:	b002      	add	sp, #8
   b884e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8850:	f1a0 030b 	sub.w	r3, r0, #11
   b8854:	2b02      	cmp	r3, #2
   b8856:	d81a      	bhi.n	b888e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8858:	4c17      	ldr	r4, [pc, #92]	; (b88b8 <pinAvailable+0x74>)
   b885a:	7821      	ldrb	r1, [r4, #0]
   b885c:	f3bf 8f5b 	dmb	ish
   b8860:	f011 0101 	ands.w	r1, r1, #1
   b8864:	d10b      	bne.n	b887e <pinAvailable+0x3a>
   b8866:	4620      	mov	r0, r4
   b8868:	9101      	str	r1, [sp, #4]
   b886a:	f7fc f996 	bl	b4b9a <__cxa_guard_acquire>
   b886e:	9901      	ldr	r1, [sp, #4]
   b8870:	b128      	cbz	r0, b887e <pinAvailable+0x3a>
   b8872:	4812      	ldr	r0, [pc, #72]	; (b88bc <pinAvailable+0x78>)
   b8874:	f7fd fd6a 	bl	b634c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8878:	4620      	mov	r0, r4
   b887a:	f7fc f993 	bl	b4ba4 <__cxa_guard_release>
   b887e:	4b0f      	ldr	r3, [pc, #60]	; (b88bc <pinAvailable+0x78>)
   b8880:	7818      	ldrb	r0, [r3, #0]
   b8882:	f7fd fba1 	bl	b5fc8 <hal_spi_is_enabled>
   b8886:	2800      	cmp	r0, #0
   b8888:	d1df      	bne.n	b884a <pinAvailable+0x6>
  return true; // 'pin' is available
   b888a:	2001      	movs	r0, #1
   b888c:	e7de      	b.n	b884c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b888e:	2801      	cmp	r0, #1
   b8890:	d809      	bhi.n	b88a6 <pinAvailable+0x62>
   b8892:	f000 f87d 	bl	b8990 <_Z19__fetch_global_Wirev>
   b8896:	2100      	movs	r1, #0
   b8898:	7c00      	ldrb	r0, [r0, #16]
   b889a:	f7fd fb7d 	bl	b5f98 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b889e:	f080 0001 	eor.w	r0, r0, #1
   b88a2:	b2c0      	uxtb	r0, r0
   b88a4:	e7d2      	b.n	b884c <pinAvailable+0x8>
   b88a6:	3809      	subs	r0, #9
   b88a8:	2801      	cmp	r0, #1
   b88aa:	d8ee      	bhi.n	b888a <pinAvailable+0x46>
   b88ac:	f000 f834 	bl	b8918 <_Z22__fetch_global_Serial1v>
   b88b0:	7c00      	ldrb	r0, [r0, #16]
   b88b2:	f7fd fb31 	bl	b5f18 <hal_usart_is_enabled>
   b88b6:	e7f2      	b.n	b889e <pinAvailable+0x5a>
   b88b8:	2003e720 	.word	0x2003e720
   b88bc:	2003e724 	.word	0x2003e724

000b88c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88c0:	2823      	cmp	r0, #35	; 0x23
{
   b88c2:	b538      	push	{r3, r4, r5, lr}
   b88c4:	4604      	mov	r4, r0
   b88c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88c8:	d80a      	bhi.n	b88e0 <pinMode+0x20>
   b88ca:	29ff      	cmp	r1, #255	; 0xff
   b88cc:	d008      	beq.n	b88e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b88ce:	f7ff ffb9 	bl	b8844 <pinAvailable>
   b88d2:	b128      	cbz	r0, b88e0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b88d4:	4629      	mov	r1, r5
   b88d6:	4620      	mov	r0, r4
}
   b88d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b88dc:	f7fd b9da 	b.w	b5c94 <hal_gpio_mode>
}
   b88e0:	bd38      	pop	{r3, r4, r5, pc}

000b88e2 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b88e2:	4770      	bx	lr

000b88e4 <_Z20acquireSerial1Bufferv>:
{
   b88e4:	b538      	push	{r3, r4, r5, lr}
   b88e6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b88e8:	2514      	movs	r5, #20
   b88ea:	462a      	mov	r2, r5
   b88ec:	2100      	movs	r1, #0
   b88ee:	f000 fd6d 	bl	b93cc <memset>
   b88f2:	8025      	strh	r5, [r4, #0]
   b88f4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b88f6:	4907      	ldr	r1, [pc, #28]	; (b8914 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b88f8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b88fa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b88fc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b88fe:	f000 f86b 	bl	b89d8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8902:	4904      	ldr	r1, [pc, #16]	; (b8914 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8904:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8906:	4628      	mov	r0, r5
   b8908:	f000 f866 	bl	b89d8 <_ZnajRKSt9nothrow_t>
    };
   b890c:	60e0      	str	r0, [r4, #12]
}
   b890e:	4620      	mov	r0, r4
   b8910:	bd38      	pop	{r3, r4, r5, pc}
   b8912:	bf00      	nop
   b8914:	000bba88 	.word	0x000bba88

000b8918 <_Z22__fetch_global_Serial1v>:
{
   b8918:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b891a:	4d0e      	ldr	r5, [pc, #56]	; (b8954 <_Z22__fetch_global_Serial1v+0x3c>)
   b891c:	7829      	ldrb	r1, [r5, #0]
   b891e:	f3bf 8f5b 	dmb	ish
   b8922:	f011 0401 	ands.w	r4, r1, #1
{
   b8926:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8928:	d111      	bne.n	b894e <_Z22__fetch_global_Serial1v+0x36>
   b892a:	4628      	mov	r0, r5
   b892c:	f7fc f935 	bl	b4b9a <__cxa_guard_acquire>
   b8930:	b168      	cbz	r0, b894e <_Z22__fetch_global_Serial1v+0x36>
   b8932:	a801      	add	r0, sp, #4
   b8934:	f7ff ffd6 	bl	b88e4 <_Z20acquireSerial1Bufferv>
   b8938:	aa01      	add	r2, sp, #4
   b893a:	4621      	mov	r1, r4
   b893c:	4806      	ldr	r0, [pc, #24]	; (b8958 <_Z22__fetch_global_Serial1v+0x40>)
   b893e:	f7ff fe2b 	bl	b8598 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8942:	4628      	mov	r0, r5
   b8944:	f7fc f92e 	bl	b4ba4 <__cxa_guard_release>
   b8948:	4804      	ldr	r0, [pc, #16]	; (b895c <_Z22__fetch_global_Serial1v+0x44>)
   b894a:	f000 fd01 	bl	b9350 <atexit>
    return serial1;
}
   b894e:	4802      	ldr	r0, [pc, #8]	; (b8958 <_Z22__fetch_global_Serial1v+0x40>)
   b8950:	b007      	add	sp, #28
   b8952:	bd30      	pop	{r4, r5, pc}
   b8954:	2003e72c 	.word	0x2003e72c
   b8958:	2003e730 	.word	0x2003e730
   b895c:	000b88e3 	.word	0x000b88e3

000b8960 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8960:	4770      	bx	lr
	...

000b8964 <_Z17acquireWireBufferv>:
{
   b8964:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8966:	2520      	movs	r5, #32
   b8968:	2314      	movs	r3, #20
{
   b896a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b896c:	6003      	str	r3, [r0, #0]
   b896e:	6085      	str	r5, [r0, #8]
   b8970:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8972:	4906      	ldr	r1, [pc, #24]	; (b898c <_Z17acquireWireBufferv+0x28>)
   b8974:	4628      	mov	r0, r5
   b8976:	f000 f82f 	bl	b89d8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b897a:	4904      	ldr	r1, [pc, #16]	; (b898c <_Z17acquireWireBufferv+0x28>)
	};
   b897c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b897e:	4628      	mov	r0, r5
   b8980:	f000 f82a 	bl	b89d8 <_ZnajRKSt9nothrow_t>
	};
   b8984:	60e0      	str	r0, [r4, #12]
}
   b8986:	4620      	mov	r0, r4
   b8988:	bd38      	pop	{r3, r4, r5, pc}
   b898a:	bf00      	nop
   b898c:	000bba88 	.word	0x000bba88

000b8990 <_Z19__fetch_global_Wirev>:
{
   b8990:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8992:	4d0e      	ldr	r5, [pc, #56]	; (b89cc <_Z19__fetch_global_Wirev+0x3c>)
   b8994:	7829      	ldrb	r1, [r5, #0]
   b8996:	f3bf 8f5b 	dmb	ish
   b899a:	f011 0401 	ands.w	r4, r1, #1
{
   b899e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b89a0:	d111      	bne.n	b89c6 <_Z19__fetch_global_Wirev+0x36>
   b89a2:	4628      	mov	r0, r5
   b89a4:	f7fc f8f9 	bl	b4b9a <__cxa_guard_acquire>
   b89a8:	b168      	cbz	r0, b89c6 <_Z19__fetch_global_Wirev+0x36>
   b89aa:	a801      	add	r0, sp, #4
   b89ac:	f7ff ffda 	bl	b8964 <_Z17acquireWireBufferv>
   b89b0:	aa01      	add	r2, sp, #4
   b89b2:	4621      	mov	r1, r4
   b89b4:	4806      	ldr	r0, [pc, #24]	; (b89d0 <_Z19__fetch_global_Wirev+0x40>)
   b89b6:	f7ff fe43 	bl	b8640 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b89ba:	4628      	mov	r0, r5
   b89bc:	f7fc f8f2 	bl	b4ba4 <__cxa_guard_release>
   b89c0:	4804      	ldr	r0, [pc, #16]	; (b89d4 <_Z19__fetch_global_Wirev+0x44>)
   b89c2:	f000 fcc5 	bl	b9350 <atexit>
	return wire;
}
   b89c6:	4802      	ldr	r0, [pc, #8]	; (b89d0 <_Z19__fetch_global_Wirev+0x40>)
   b89c8:	b007      	add	sp, #28
   b89ca:	bd30      	pop	{r4, r5, pc}
   b89cc:	2003e748 	.word	0x2003e748
   b89d0:	2003e74c 	.word	0x2003e74c
   b89d4:	000b8961 	.word	0x000b8961

000b89d8 <_ZnajRKSt9nothrow_t>:
   b89d8:	f7fc b8d9 	b.w	b4b8e <_Znaj>

000b89dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b89dc:	68c3      	ldr	r3, [r0, #12]
   b89de:	689a      	ldr	r2, [r3, #8]
   b89e0:	60c2      	str	r2, [r0, #12]
   b89e2:	b510      	push	{r4, lr}
   b89e4:	b102      	cbz	r2, b89e8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b89e6:	6050      	str	r0, [r2, #4]
   b89e8:	6842      	ldr	r2, [r0, #4]
   b89ea:	605a      	str	r2, [r3, #4]
   b89ec:	680c      	ldr	r4, [r1, #0]
   b89ee:	4284      	cmp	r4, r0
   b89f0:	d103      	bne.n	b89fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b89f2:	600b      	str	r3, [r1, #0]
   b89f4:	6098      	str	r0, [r3, #8]
   b89f6:	6043      	str	r3, [r0, #4]
   b89f8:	bd10      	pop	{r4, pc}
   b89fa:	6891      	ldr	r1, [r2, #8]
   b89fc:	4281      	cmp	r1, r0
   b89fe:	bf0c      	ite	eq
   b8a00:	6093      	streq	r3, [r2, #8]
   b8a02:	60d3      	strne	r3, [r2, #12]
   b8a04:	e7f6      	b.n	b89f4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b8a06 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b8a06:	6883      	ldr	r3, [r0, #8]
   b8a08:	68da      	ldr	r2, [r3, #12]
   b8a0a:	6082      	str	r2, [r0, #8]
   b8a0c:	b510      	push	{r4, lr}
   b8a0e:	b102      	cbz	r2, b8a12 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b8a10:	6050      	str	r0, [r2, #4]
   b8a12:	6842      	ldr	r2, [r0, #4]
   b8a14:	605a      	str	r2, [r3, #4]
   b8a16:	680c      	ldr	r4, [r1, #0]
   b8a18:	4284      	cmp	r4, r0
   b8a1a:	d103      	bne.n	b8a24 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b8a1c:	600b      	str	r3, [r1, #0]
   b8a1e:	60d8      	str	r0, [r3, #12]
   b8a20:	6043      	str	r3, [r0, #4]
   b8a22:	bd10      	pop	{r4, pc}
   b8a24:	68d1      	ldr	r1, [r2, #12]
   b8a26:	4281      	cmp	r1, r0
   b8a28:	bf0c      	ite	eq
   b8a2a:	60d3      	streq	r3, [r2, #12]
   b8a2c:	6093      	strne	r3, [r2, #8]
   b8a2e:	e7f6      	b.n	b8a1e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b8a30 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b8a30:	68c3      	ldr	r3, [r0, #12]
   b8a32:	b123      	cbz	r3, b8a3e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b8a34:	4618      	mov	r0, r3
   b8a36:	689b      	ldr	r3, [r3, #8]
   b8a38:	2b00      	cmp	r3, #0
   b8a3a:	d1fb      	bne.n	b8a34 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b8a3c:	4770      	bx	lr
   b8a3e:	6843      	ldr	r3, [r0, #4]
   b8a40:	68da      	ldr	r2, [r3, #12]
   b8a42:	4282      	cmp	r2, r0
   b8a44:	d102      	bne.n	b8a4c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b8a46:	4618      	mov	r0, r3
   b8a48:	685b      	ldr	r3, [r3, #4]
   b8a4a:	e7f9      	b.n	b8a40 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b8a4c:	68c2      	ldr	r2, [r0, #12]
   b8a4e:	4293      	cmp	r3, r2
   b8a50:	bf18      	it	ne
   b8a52:	4618      	movne	r0, r3
   b8a54:	4770      	bx	lr

000b8a56 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b8a56:	7803      	ldrb	r3, [r0, #0]
   b8a58:	b933      	cbnz	r3, b8a68 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b8a5a:	6843      	ldr	r3, [r0, #4]
   b8a5c:	685b      	ldr	r3, [r3, #4]
   b8a5e:	4283      	cmp	r3, r0
   b8a60:	d102      	bne.n	b8a68 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b8a62:	68db      	ldr	r3, [r3, #12]
   b8a64:	4618      	mov	r0, r3
   b8a66:	4770      	bx	lr
   b8a68:	6882      	ldr	r2, [r0, #8]
   b8a6a:	b122      	cbz	r2, b8a76 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b8a6c:	4613      	mov	r3, r2
   b8a6e:	68d2      	ldr	r2, [r2, #12]
   b8a70:	2a00      	cmp	r2, #0
   b8a72:	d1fb      	bne.n	b8a6c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b8a74:	e7f6      	b.n	b8a64 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b8a76:	6843      	ldr	r3, [r0, #4]
   b8a78:	689a      	ldr	r2, [r3, #8]
   b8a7a:	4282      	cmp	r2, r0
   b8a7c:	d1f2      	bne.n	b8a64 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b8a7e:	4618      	mov	r0, r3
   b8a80:	685b      	ldr	r3, [r3, #4]
   b8a82:	e7f9      	b.n	b8a78 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b8a84 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b8a84:	f7ff bfd4 	b.w	b8a30 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b8a88 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b8a88:	f7ff bfe5 	b.w	b8a56 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b8a8c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b8a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8a90:	461e      	mov	r6, r3
   b8a92:	f103 0804 	add.w	r8, r3, #4
   b8a96:	2300      	movs	r3, #0
   b8a98:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b8a9c:	460c      	mov	r4, r1
   b8a9e:	604a      	str	r2, [r1, #4]
   b8aa0:	700b      	strb	r3, [r1, #0]
   b8aa2:	b300      	cbz	r0, b8ae6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b8aa4:	4296      	cmp	r6, r2
   b8aa6:	6091      	str	r1, [r2, #8]
   b8aa8:	d118      	bne.n	b8adc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b8aaa:	6071      	str	r1, [r6, #4]
   b8aac:	60f4      	str	r4, [r6, #12]
   b8aae:	2701      	movs	r7, #1
   b8ab0:	f04f 0900 	mov.w	r9, #0
   b8ab4:	6873      	ldr	r3, [r6, #4]
   b8ab6:	42a3      	cmp	r3, r4
   b8ab8:	d03f      	beq.n	b8b3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8aba:	6860      	ldr	r0, [r4, #4]
   b8abc:	7802      	ldrb	r2, [r0, #0]
   b8abe:	2a00      	cmp	r2, #0
   b8ac0:	d13b      	bne.n	b8b3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8ac2:	6845      	ldr	r5, [r0, #4]
   b8ac4:	68ab      	ldr	r3, [r5, #8]
   b8ac6:	4298      	cmp	r0, r3
   b8ac8:	d123      	bne.n	b8b12 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b8aca:	68eb      	ldr	r3, [r5, #12]
   b8acc:	b183      	cbz	r3, b8af0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8ace:	781a      	ldrb	r2, [r3, #0]
   b8ad0:	b972      	cbnz	r2, b8af0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8ad2:	7007      	strb	r7, [r0, #0]
   b8ad4:	701f      	strb	r7, [r3, #0]
   b8ad6:	702a      	strb	r2, [r5, #0]
   b8ad8:	462c      	mov	r4, r5
   b8ada:	e7eb      	b.n	b8ab4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b8adc:	68b3      	ldr	r3, [r6, #8]
   b8ade:	4293      	cmp	r3, r2
   b8ae0:	d1e5      	bne.n	b8aae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8ae2:	60b1      	str	r1, [r6, #8]
   b8ae4:	e7e3      	b.n	b8aae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8ae6:	60d1      	str	r1, [r2, #12]
   b8ae8:	68f3      	ldr	r3, [r6, #12]
   b8aea:	4293      	cmp	r3, r2
   b8aec:	d1df      	bne.n	b8aae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8aee:	e7dd      	b.n	b8aac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b8af0:	68c3      	ldr	r3, [r0, #12]
   b8af2:	42a3      	cmp	r3, r4
   b8af4:	d103      	bne.n	b8afe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b8af6:	4641      	mov	r1, r8
   b8af8:	f7ff ff70 	bl	b89dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8afc:	4604      	mov	r4, r0
   b8afe:	6863      	ldr	r3, [r4, #4]
   b8b00:	4641      	mov	r1, r8
   b8b02:	701f      	strb	r7, [r3, #0]
   b8b04:	4628      	mov	r0, r5
   b8b06:	f885 9000 	strb.w	r9, [r5]
   b8b0a:	f7ff ff7c 	bl	b8a06 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8b0e:	4625      	mov	r5, r4
   b8b10:	e7e2      	b.n	b8ad8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b8b12:	b113      	cbz	r3, b8b1a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b8b14:	781a      	ldrb	r2, [r3, #0]
   b8b16:	2a00      	cmp	r2, #0
   b8b18:	d0db      	beq.n	b8ad2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b8b1a:	6883      	ldr	r3, [r0, #8]
   b8b1c:	42a3      	cmp	r3, r4
   b8b1e:	d103      	bne.n	b8b28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b8b20:	4641      	mov	r1, r8
   b8b22:	f7ff ff70 	bl	b8a06 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8b26:	4604      	mov	r4, r0
   b8b28:	6863      	ldr	r3, [r4, #4]
   b8b2a:	4641      	mov	r1, r8
   b8b2c:	701f      	strb	r7, [r3, #0]
   b8b2e:	4628      	mov	r0, r5
   b8b30:	f885 9000 	strb.w	r9, [r5]
   b8b34:	f7ff ff52 	bl	b89dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8b38:	e7e9      	b.n	b8b0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b8b3a:	2201      	movs	r2, #1
   b8b3c:	701a      	strb	r2, [r3, #0]
   b8b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8b42 <_ZSt17__throw_bad_allocv>:
   b8b42:	b508      	push	{r3, lr}
   b8b44:	f7fd fb94 	bl	b6270 <abort>

000b8b48 <_ZSt19__throw_logic_errorPKc>:
   b8b48:	b508      	push	{r3, lr}
   b8b4a:	f7fd fb91 	bl	b6270 <abort>

000b8b4e <_ZSt24__throw_invalid_argumentPKc>:
   b8b4e:	b508      	push	{r3, lr}
   b8b50:	f7fd fb8e 	bl	b6270 <abort>

000b8b54 <_ZSt20__throw_length_errorPKc>:
   b8b54:	b508      	push	{r3, lr}
   b8b56:	f7fd fb8b 	bl	b6270 <abort>

000b8b5a <_ZSt20__throw_out_of_rangePKc>:
   b8b5a:	b508      	push	{r3, lr}
   b8b5c:	f7fd fb88 	bl	b6270 <abort>

000b8b60 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b8b60:	b40f      	push	{r0, r1, r2, r3}
   b8b62:	b580      	push	{r7, lr}
   b8b64:	b084      	sub	sp, #16
   b8b66:	af00      	add	r7, sp, #0
   b8b68:	f107 0418 	add.w	r4, r7, #24
   b8b6c:	f854 2b04 	ldr.w	r2, [r4], #4
   b8b70:	607a      	str	r2, [r7, #4]
   b8b72:	4610      	mov	r0, r2
   b8b74:	f7fb ffae 	bl	b4ad4 <strlen>
   b8b78:	f200 2307 	addw	r3, r0, #519	; 0x207
   b8b7c:	f023 0307 	bic.w	r3, r3, #7
   b8b80:	ebad 0d03 	sub.w	sp, sp, r3
   b8b84:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b8b88:	687a      	ldr	r2, [r7, #4]
   b8b8a:	60fc      	str	r4, [r7, #12]
   b8b8c:	4623      	mov	r3, r4
   b8b8e:	4668      	mov	r0, sp
   b8b90:	f000 f85e 	bl	b8c50 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b8b94:	f7fd fb6c 	bl	b6270 <abort>

000b8b98 <_ZSt25__throw_bad_function_callv>:
   b8b98:	b508      	push	{r3, lr}
   b8b9a:	f7fd fb69 	bl	b6270 <abort>
	...

000b8ba0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8ba0:	4901      	ldr	r1, [pc, #4]	; (b8ba8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8ba2:	f000 bb99 	b.w	b92d8 <_ZNKSt9type_infoeqERKS_>
   b8ba6:	bf00      	nop
   b8ba8:	000bbaa4 	.word	0x000bbaa4

000b8bac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b8bac:	b580      	push	{r7, lr}
   b8bae:	b09c      	sub	sp, #112	; 0x70
   b8bb0:	4606      	mov	r6, r0
   b8bb2:	af00      	add	r7, sp, #0
   b8bb4:	460c      	mov	r4, r1
   b8bb6:	1ba4      	subs	r4, r4, r6
   b8bb8:	490e      	ldr	r1, [pc, #56]	; (b8bf4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b8bba:	2269      	movs	r2, #105	; 0x69
   b8bbc:	1d38      	adds	r0, r7, #4
   b8bbe:	f000 fbdd 	bl	b937c <memcpy>
   b8bc2:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b8bc6:	f023 0307 	bic.w	r3, r3, #7
   b8bca:	ebad 0d03 	sub.w	sp, sp, r3
   b8bce:	466d      	mov	r5, sp
   b8bd0:	2268      	movs	r2, #104	; 0x68
   b8bd2:	1d39      	adds	r1, r7, #4
   b8bd4:	4628      	mov	r0, r5
   b8bd6:	f000 fbd1 	bl	b937c <memcpy>
   b8bda:	4622      	mov	r2, r4
   b8bdc:	4631      	mov	r1, r6
   b8bde:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b8be2:	442c      	add	r4, r5
   b8be4:	f000 fbca 	bl	b937c <memcpy>
   b8be8:	2300      	movs	r3, #0
   b8bea:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b8bee:	4628      	mov	r0, r5
   b8bf0:	f7ff ffaa 	bl	b8b48 <_ZSt19__throw_logic_errorPKc>
   b8bf4:	000bbaac 	.word	0x000bbaac

000b8bf8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b8bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8bfc:	af00      	add	r7, sp, #0
   b8bfe:	b084      	sub	sp, #16
   b8c00:	466d      	mov	r5, sp
   b8c02:	f105 040c 	add.w	r4, r5, #12
   b8c06:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8c4c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b8c0a:	4623      	mov	r3, r4
   b8c0c:	f04f 0c0a 	mov.w	ip, #10
   b8c10:	fbb2 f6fc 	udiv	r6, r2, ip
   b8c14:	fb0c 2e16 	mls	lr, ip, r6, r2
   b8c18:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b8c1c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b8c20:	4696      	mov	lr, r2
   b8c22:	f1be 0f09 	cmp.w	lr, #9
   b8c26:	4632      	mov	r2, r6
   b8c28:	d8f2      	bhi.n	b8c10 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b8c2a:	1ae4      	subs	r4, r4, r3
   b8c2c:	428c      	cmp	r4, r1
   b8c2e:	d809      	bhi.n	b8c44 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b8c30:	f1c4 030c 	rsb	r3, r4, #12
   b8c34:	4622      	mov	r2, r4
   b8c36:	18e9      	adds	r1, r5, r3
   b8c38:	f000 fba0 	bl	b937c <memcpy>
   b8c3c:	4620      	mov	r0, r4
   b8c3e:	46bd      	mov	sp, r7
   b8c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8c44:	f04f 34ff 	mov.w	r4, #4294967295
   b8c48:	e7f8      	b.n	b8c3c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b8c4a:	bf00      	nop
   b8c4c:	000bbb15 	.word	0x000bbb15

000b8c50 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b8c50:	3901      	subs	r1, #1
   b8c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c56:	4607      	mov	r7, r0
   b8c58:	4615      	mov	r5, r2
   b8c5a:	eb00 0801 	add.w	r8, r0, r1
   b8c5e:	4604      	mov	r4, r0
   b8c60:	782a      	ldrb	r2, [r5, #0]
   b8c62:	b392      	cbz	r2, b8cca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b8c64:	4544      	cmp	r4, r8
   b8c66:	d22a      	bcs.n	b8cbe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8c68:	2a25      	cmp	r2, #37	; 0x25
   b8c6a:	d107      	bne.n	b8c7c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8c6c:	786a      	ldrb	r2, [r5, #1]
   b8c6e:	2a73      	cmp	r2, #115	; 0x73
   b8c70:	d009      	beq.n	b8c86 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b8c72:	2a7a      	cmp	r2, #122	; 0x7a
   b8c74:	d012      	beq.n	b8c9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b8c76:	2a25      	cmp	r2, #37	; 0x25
   b8c78:	d100      	bne.n	b8c7c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8c7a:	3501      	adds	r5, #1
   b8c7c:	f815 2b01 	ldrb.w	r2, [r5], #1
   b8c80:	f804 2b01 	strb.w	r2, [r4], #1
   b8c84:	e7ec      	b.n	b8c60 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8c86:	f853 2b04 	ldr.w	r2, [r3], #4
   b8c8a:	3a01      	subs	r2, #1
   b8c8c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b8c90:	b1c9      	cbz	r1, b8cc6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b8c92:	4544      	cmp	r4, r8
   b8c94:	d013      	beq.n	b8cbe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8c96:	f804 1b01 	strb.w	r1, [r4], #1
   b8c9a:	e7f7      	b.n	b8c8c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b8c9c:	78aa      	ldrb	r2, [r5, #2]
   b8c9e:	2a75      	cmp	r2, #117	; 0x75
   b8ca0:	d1ec      	bne.n	b8c7c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8ca2:	461e      	mov	r6, r3
   b8ca4:	eba8 0104 	sub.w	r1, r8, r4
   b8ca8:	f856 2b04 	ldr.w	r2, [r6], #4
   b8cac:	4620      	mov	r0, r4
   b8cae:	f7ff ffa3 	bl	b8bf8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b8cb2:	2800      	cmp	r0, #0
   b8cb4:	dd03      	ble.n	b8cbe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8cb6:	4404      	add	r4, r0
   b8cb8:	3503      	adds	r5, #3
   b8cba:	4633      	mov	r3, r6
   b8cbc:	e7d0      	b.n	b8c60 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8cbe:	4621      	mov	r1, r4
   b8cc0:	4638      	mov	r0, r7
   b8cc2:	f7ff ff73 	bl	b8bac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b8cc6:	3502      	adds	r5, #2
   b8cc8:	e7ca      	b.n	b8c60 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8cca:	7022      	strb	r2, [r4, #0]
   b8ccc:	1be0      	subs	r0, r4, r7
   b8cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8cd2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b8cd2:	b10a      	cbz	r2, b8cd8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b8cd4:	f000 bb52 	b.w	b937c <memcpy>
   b8cd8:	4770      	bx	lr

000b8cda <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b8cda:	b10a      	cbz	r2, b8ce0 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b8cdc:	f000 bb3e 	b.w	b935c <memcmp>
   b8ce0:	4610      	mov	r0, r2
   b8ce2:	4770      	bx	lr

000b8ce4 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b8ce4:	4613      	mov	r3, r2
   b8ce6:	460a      	mov	r2, r1
   b8ce8:	b111      	cbz	r1, b8cf0 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b8cea:	7819      	ldrb	r1, [r3, #0]
   b8cec:	f7fb be98 	b.w	b4a20 <memchr>
   b8cf0:	4608      	mov	r0, r1
   b8cf2:	4770      	bx	lr

000b8cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b8cf4:	b508      	push	{r3, lr}
   b8cf6:	680b      	ldr	r3, [r1, #0]
   b8cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b8cfc:	d302      	bcc.n	b8d04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b8cfe:	480d      	ldr	r0, [pc, #52]	; (b8d34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b8d00:	f7ff ff28 	bl	b8b54 <_ZSt20__throw_length_errorPKc>
   b8d04:	4293      	cmp	r3, r2
   b8d06:	d90b      	bls.n	b8d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8d08:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b8d0c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b8d10:	d206      	bcs.n	b8d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8d12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b8d16:	bf2a      	itet	cs
   b8d18:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b8d1c:	6008      	strcc	r0, [r1, #0]
   b8d1e:	600b      	strcs	r3, [r1, #0]
   b8d20:	6808      	ldr	r0, [r1, #0]
   b8d22:	3001      	adds	r0, #1
   b8d24:	d501      	bpl.n	b8d2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b8d26:	f7ff ff0c 	bl	b8b42 <_ZSt17__throw_bad_allocv>
   b8d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8d2e:	f7fb bf2c 	b.w	b4b8a <_Znwj>
   b8d32:	bf00      	nop
   b8d34:	000bbb20 	.word	0x000bbb20

000b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b8d38:	f850 3b08 	ldr.w	r3, [r0], #8
   b8d3c:	4283      	cmp	r3, r0
   b8d3e:	d002      	beq.n	b8d46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b8d40:	4618      	mov	r0, r3
   b8d42:	f7fb bf26 	b.w	b4b92 <_ZdlPv>
   b8d46:	4770      	bx	lr

000b8d48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b8d48:	b508      	push	{r3, lr}
   b8d4a:	4603      	mov	r3, r0
   b8d4c:	4608      	mov	r0, r1
   b8d4e:	685b      	ldr	r3, [r3, #4]
   b8d50:	4298      	cmp	r0, r3
   b8d52:	4611      	mov	r1, r2
   b8d54:	d903      	bls.n	b8d5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b8d56:	4602      	mov	r2, r0
   b8d58:	4801      	ldr	r0, [pc, #4]	; (b8d60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b8d5a:	f7ff ff01 	bl	b8b60 <_ZSt24__throw_out_of_range_fmtPKcz>
   b8d5e:	bd08      	pop	{r3, pc}
   b8d60:	000bbb38 	.word	0x000bbb38

000b8d64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   b8d64:	6840      	ldr	r0, [r0, #4]
   b8d66:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   b8d6a:	3901      	subs	r1, #1
   b8d6c:	1a09      	subs	r1, r1, r0
   b8d6e:	4291      	cmp	r1, r2
   b8d70:	b508      	push	{r3, lr}
   b8d72:	d202      	bcs.n	b8d7a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   b8d74:	4618      	mov	r0, r3
   b8d76:	f7ff feed 	bl	b8b54 <_ZSt20__throw_length_errorPKc>
   b8d7a:	bd08      	pop	{r3, pc}

000b8d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   b8d7c:	6803      	ldr	r3, [r0, #0]
   b8d7e:	428b      	cmp	r3, r1
   b8d80:	d806      	bhi.n	b8d90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   b8d82:	6840      	ldr	r0, [r0, #4]
   b8d84:	4418      	add	r0, r3
   b8d86:	4281      	cmp	r1, r0
   b8d88:	bf94      	ite	ls
   b8d8a:	2000      	movls	r0, #0
   b8d8c:	2001      	movhi	r0, #1
   b8d8e:	4770      	bx	lr
   b8d90:	2001      	movs	r0, #1
   b8d92:	4770      	bx	lr

000b8d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b8d94:	2a01      	cmp	r2, #1
   b8d96:	b410      	push	{r4}
   b8d98:	d104      	bne.n	b8da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b8d9a:	780a      	ldrb	r2, [r1, #0]
   b8d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8da0:	7002      	strb	r2, [r0, #0]
   b8da2:	4770      	bx	lr
   b8da4:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8da8:	f7ff bf93 	b.w	b8cd2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b8dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b8dac:	2a01      	cmp	r2, #1
   b8dae:	b430      	push	{r4, r5}
   b8db0:	d103      	bne.n	b8dba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b8db2:	780b      	ldrb	r3, [r1, #0]
   b8db4:	7003      	strb	r3, [r0, #0]
   b8db6:	bc30      	pop	{r4, r5}
   b8db8:	4770      	bx	lr
   b8dba:	2a00      	cmp	r2, #0
   b8dbc:	d0fb      	beq.n	b8db6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b8dbe:	bc30      	pop	{r4, r5}
   b8dc0:	f000 baea 	b.w	b9398 <memmove>

000b8dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b8dc4:	b508      	push	{r3, lr}
   b8dc6:	1a52      	subs	r2, r2, r1
   b8dc8:	f7ff ffe4 	bl	b8d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8dcc:	bd08      	pop	{r3, pc}

000b8dce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b8dce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8dd2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b8dd4:	461f      	mov	r7, r3
   b8dd6:	6843      	ldr	r3, [r0, #4]
   b8dd8:	eb01 0802 	add.w	r8, r1, r2
   b8ddc:	1ab2      	subs	r2, r6, r2
   b8dde:	441a      	add	r2, r3
   b8de0:	eba3 0908 	sub.w	r9, r3, r8
   b8de4:	4603      	mov	r3, r0
   b8de6:	9201      	str	r2, [sp, #4]
   b8de8:	f853 2b08 	ldr.w	r2, [r3], #8
   b8dec:	429a      	cmp	r2, r3
   b8dee:	bf18      	it	ne
   b8df0:	6882      	ldrne	r2, [r0, #8]
   b8df2:	460d      	mov	r5, r1
   b8df4:	bf08      	it	eq
   b8df6:	220f      	moveq	r2, #15
   b8df8:	a901      	add	r1, sp, #4
   b8dfa:	4604      	mov	r4, r0
   b8dfc:	f7ff ff7a 	bl	b8cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b8e00:	4682      	mov	sl, r0
   b8e02:	b11d      	cbz	r5, b8e0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b8e04:	6821      	ldr	r1, [r4, #0]
   b8e06:	462a      	mov	r2, r5
   b8e08:	f7ff ffc4 	bl	b8d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8e0c:	b137      	cbz	r7, b8e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b8e0e:	b12e      	cbz	r6, b8e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b8e10:	4632      	mov	r2, r6
   b8e12:	4639      	mov	r1, r7
   b8e14:	eb0a 0005 	add.w	r0, sl, r5
   b8e18:	f7ff ffbc 	bl	b8d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8e1c:	f1b9 0f00 	cmp.w	r9, #0
   b8e20:	d007      	beq.n	b8e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b8e22:	6821      	ldr	r1, [r4, #0]
   b8e24:	4435      	add	r5, r6
   b8e26:	464a      	mov	r2, r9
   b8e28:	4441      	add	r1, r8
   b8e2a:	eb0a 0005 	add.w	r0, sl, r5
   b8e2e:	f7ff ffb1 	bl	b8d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8e32:	4620      	mov	r0, r4
   b8e34:	f7ff ff80 	bl	b8d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b8e38:	9b01      	ldr	r3, [sp, #4]
   b8e3a:	f8c4 a000 	str.w	sl, [r4]
   b8e3e:	60a3      	str	r3, [r4, #8]
   b8e40:	b002      	add	sp, #8
   b8e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
   b8e46:	b538      	push	{r3, r4, r5, lr}
   b8e48:	4604      	mov	r4, r0
   b8e4a:	4615      	mov	r5, r2
   b8e4c:	4608      	mov	r0, r1
   b8e4e:	4411      	add	r1, r2
   b8e50:	6862      	ldr	r2, [r4, #4]
   b8e52:	1a52      	subs	r2, r2, r1
   b8e54:	d005      	beq.n	b8e62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b8e56:	b125      	cbz	r5, b8e62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b8e58:	6823      	ldr	r3, [r4, #0]
   b8e5a:	4419      	add	r1, r3
   b8e5c:	4418      	add	r0, r3
   b8e5e:	f7ff ffa5 	bl	b8dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8e62:	6862      	ldr	r2, [r4, #4]
   b8e64:	6823      	ldr	r3, [r4, #0]
   b8e66:	1b55      	subs	r5, r2, r5
   b8e68:	2200      	movs	r2, #0
   b8e6a:	6065      	str	r5, [r4, #4]
   b8e6c:	555a      	strb	r2, [r3, r5]
   b8e6e:	bd38      	pop	{r3, r4, r5, pc}

000b8e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   b8e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b8e76:	4614      	mov	r4, r2
   b8e78:	4680      	mov	r8, r0
   b8e7a:	462a      	mov	r2, r5
   b8e7c:	4689      	mov	r9, r1
   b8e7e:	461f      	mov	r7, r3
   b8e80:	4621      	mov	r1, r4
   b8e82:	4b39      	ldr	r3, [pc, #228]	; (b8f68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   b8e84:	f7ff ff6e 	bl	b8d64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   b8e88:	4642      	mov	r2, r8
   b8e8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8e8e:	f852 6b08 	ldr.w	r6, [r2], #8
   b8e92:	4296      	cmp	r6, r2
   b8e94:	bf18      	it	ne
   b8e96:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   b8e9a:	eba5 0b04 	sub.w	fp, r5, r4
   b8e9e:	eb03 0a0b 	add.w	sl, r3, fp
   b8ea2:	bf08      	it	eq
   b8ea4:	220f      	moveq	r2, #15
   b8ea6:	4552      	cmp	r2, sl
   b8ea8:	d351      	bcc.n	b8f4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   b8eaa:	444e      	add	r6, r9
   b8eac:	4639      	mov	r1, r7
   b8eae:	44a1      	add	r9, r4
   b8eb0:	4640      	mov	r0, r8
   b8eb2:	eba3 0909 	sub.w	r9, r3, r9
   b8eb6:	f7ff ff61 	bl	b8d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   b8eba:	b180      	cbz	r0, b8ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   b8ebc:	f1b9 0f00 	cmp.w	r9, #0
   b8ec0:	d006      	beq.n	b8ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8ec2:	42ac      	cmp	r4, r5
   b8ec4:	d004      	beq.n	b8ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8ec6:	464a      	mov	r2, r9
   b8ec8:	1931      	adds	r1, r6, r4
   b8eca:	1970      	adds	r0, r6, r5
   b8ecc:	f7ff ff6e 	bl	b8dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8ed0:	b315      	cbz	r5, b8f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8ed2:	462a      	mov	r2, r5
   b8ed4:	4639      	mov	r1, r7
   b8ed6:	4630      	mov	r0, r6
   b8ed8:	f7ff ff5c 	bl	b8d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8edc:	e01c      	b.n	b8f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8ede:	b135      	cbz	r5, b8eee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   b8ee0:	42ac      	cmp	r4, r5
   b8ee2:	d33c      	bcc.n	b8f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   b8ee4:	462a      	mov	r2, r5
   b8ee6:	4639      	mov	r1, r7
   b8ee8:	4630      	mov	r0, r6
   b8eea:	f7ff ff5f 	bl	b8dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8eee:	f1b9 0f00 	cmp.w	r9, #0
   b8ef2:	d011      	beq.n	b8f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8ef4:	42ac      	cmp	r4, r5
   b8ef6:	d00f      	beq.n	b8f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8ef8:	464a      	mov	r2, r9
   b8efa:	1931      	adds	r1, r6, r4
   b8efc:	1970      	adds	r0, r6, r5
   b8efe:	f7ff ff55 	bl	b8dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8f02:	42ac      	cmp	r4, r5
   b8f04:	d208      	bcs.n	b8f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8f06:	4434      	add	r4, r6
   b8f08:	197b      	adds	r3, r7, r5
   b8f0a:	429c      	cmp	r4, r3
   b8f0c:	d30f      	bcc.n	b8f2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   b8f0e:	462a      	mov	r2, r5
   b8f10:	4639      	mov	r1, r7
   b8f12:	4630      	mov	r0, r6
   b8f14:	f7ff ff4a 	bl	b8dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8f18:	f8d8 3000 	ldr.w	r3, [r8]
   b8f1c:	f8c8 a004 	str.w	sl, [r8, #4]
   b8f20:	2200      	movs	r2, #0
   b8f22:	4640      	mov	r0, r8
   b8f24:	f803 200a 	strb.w	r2, [r3, sl]
   b8f28:	b003      	add	sp, #12
   b8f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f2e:	42bc      	cmp	r4, r7
   b8f30:	d803      	bhi.n	b8f3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   b8f32:	462a      	mov	r2, r5
   b8f34:	eb07 010b 	add.w	r1, r7, fp
   b8f38:	e7cd      	b.n	b8ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   b8f3a:	1be4      	subs	r4, r4, r7
   b8f3c:	4622      	mov	r2, r4
   b8f3e:	4639      	mov	r1, r7
   b8f40:	4630      	mov	r0, r6
   b8f42:	f7ff ff33 	bl	b8dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8f46:	1b2a      	subs	r2, r5, r4
   b8f48:	1971      	adds	r1, r6, r5
   b8f4a:	1930      	adds	r0, r6, r4
   b8f4c:	e7c4      	b.n	b8ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   b8f4e:	9500      	str	r5, [sp, #0]
   b8f50:	463b      	mov	r3, r7
   b8f52:	4622      	mov	r2, r4
   b8f54:	4649      	mov	r1, r9
   b8f56:	4640      	mov	r0, r8
   b8f58:	f7ff ff39 	bl	b8dce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b8f5c:	e7dc      	b.n	b8f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8f5e:	f1b9 0f00 	cmp.w	r9, #0
   b8f62:	d0d0      	beq.n	b8f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   b8f64:	e7c8      	b.n	b8ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   b8f66:	bf00      	nop
   b8f68:	000bbb6f 	.word	0x000bbb6f

000b8f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
   b8f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8f6e:	4604      	mov	r4, r0
   b8f70:	4623      	mov	r3, r4
   b8f72:	6840      	ldr	r0, [r0, #4]
   b8f74:	f853 6b08 	ldr.w	r6, [r3], #8
   b8f78:	429e      	cmp	r6, r3
   b8f7a:	bf18      	it	ne
   b8f7c:	68a3      	ldrne	r3, [r4, #8]
   b8f7e:	eb00 0502 	add.w	r5, r0, r2
   b8f82:	bf08      	it	eq
   b8f84:	230f      	moveq	r3, #15
   b8f86:	429d      	cmp	r5, r3
   b8f88:	d80a      	bhi.n	b8fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
   b8f8a:	b112      	cbz	r2, b8f92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
   b8f8c:	4430      	add	r0, r6
   b8f8e:	f7ff ff01 	bl	b8d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8f92:	6823      	ldr	r3, [r4, #0]
   b8f94:	6065      	str	r5, [r4, #4]
   b8f96:	2200      	movs	r2, #0
   b8f98:	4620      	mov	r0, r4
   b8f9a:	555a      	strb	r2, [r3, r5]
   b8f9c:	b002      	add	sp, #8
   b8f9e:	bd70      	pop	{r4, r5, r6, pc}
   b8fa0:	9200      	str	r2, [sp, #0]
   b8fa2:	460b      	mov	r3, r1
   b8fa4:	2200      	movs	r2, #0
   b8fa6:	4601      	mov	r1, r0
   b8fa8:	4620      	mov	r0, r4
   b8faa:	f7ff ff10 	bl	b8dce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b8fae:	e7f0      	b.n	b8f92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

000b8fb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b8fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8fb4:	460e      	mov	r6, r1
   b8fb6:	461d      	mov	r5, r3
   b8fb8:	6841      	ldr	r1, [r0, #4]
   b8fba:	b923      	cbnz	r3, b8fc6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b8fbc:	4291      	cmp	r1, r2
   b8fbe:	d221      	bcs.n	b9004 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b8fc0:	f04f 32ff 	mov.w	r2, #4294967295
   b8fc4:	e01e      	b.n	b9004 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b8fc6:	4291      	cmp	r1, r2
   b8fc8:	d9fa      	bls.n	b8fc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8fca:	f8d0 8000 	ldr.w	r8, [r0]
   b8fce:	7833      	ldrb	r3, [r6, #0]
   b8fd0:	f88d 3007 	strb.w	r3, [sp, #7]
   b8fd4:	eb08 0701 	add.w	r7, r8, r1
   b8fd8:	eb08 0002 	add.w	r0, r8, r2
   b8fdc:	1a89      	subs	r1, r1, r2
   b8fde:	f1c5 0901 	rsb	r9, r5, #1
   b8fe2:	42a9      	cmp	r1, r5
   b8fe4:	d3ec      	bcc.n	b8fc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8fe6:	f10d 0207 	add.w	r2, sp, #7
   b8fea:	4449      	add	r1, r9
   b8fec:	f7ff fe7a 	bl	b8ce4 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b8ff0:	4604      	mov	r4, r0
   b8ff2:	2800      	cmp	r0, #0
   b8ff4:	d0e4      	beq.n	b8fc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8ff6:	462a      	mov	r2, r5
   b8ff8:	4631      	mov	r1, r6
   b8ffa:	f7ff fe6e 	bl	b8cda <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b8ffe:	b928      	cbnz	r0, b900c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b9000:	eba4 0208 	sub.w	r2, r4, r8
   b9004:	4610      	mov	r0, r2
   b9006:	b003      	add	sp, #12
   b9008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b900c:	1c60      	adds	r0, r4, #1
   b900e:	1a39      	subs	r1, r7, r0
   b9010:	e7e7      	b.n	b8fe2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b9012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b9012:	b513      	push	{r0, r1, r4, lr}
   b9014:	4604      	mov	r4, r0
   b9016:	4608      	mov	r0, r1
   b9018:	9201      	str	r2, [sp, #4]
   b901a:	9100      	str	r1, [sp, #0]
   b901c:	f7fb fd5a 	bl	b4ad4 <strlen>
   b9020:	e9dd 1200 	ldrd	r1, r2, [sp]
   b9024:	4603      	mov	r3, r0
   b9026:	4620      	mov	r0, r4
   b9028:	f7ff ffc2 	bl	b8fb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b902c:	b002      	add	sp, #8
   b902e:	bd10      	pop	{r4, pc}

000b9030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   b9030:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9032:	4604      	mov	r4, r0
   b9034:	4616      	mov	r6, r2
   b9036:	460d      	mov	r5, r1
   b9038:	b919      	cbnz	r1, b9042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b903a:	b112      	cbz	r2, b9042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b903c:	480d      	ldr	r0, [pc, #52]	; (b9074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   b903e:	f7ff fd83 	bl	b8b48 <_ZSt19__throw_logic_errorPKc>
   b9042:	1b73      	subs	r3, r6, r5
   b9044:	2b0f      	cmp	r3, #15
   b9046:	9301      	str	r3, [sp, #4]
   b9048:	d907      	bls.n	b905a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   b904a:	2200      	movs	r2, #0
   b904c:	a901      	add	r1, sp, #4
   b904e:	4620      	mov	r0, r4
   b9050:	f7ff fe50 	bl	b8cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b9054:	9b01      	ldr	r3, [sp, #4]
   b9056:	6020      	str	r0, [r4, #0]
   b9058:	60a3      	str	r3, [r4, #8]
   b905a:	4632      	mov	r2, r6
   b905c:	4629      	mov	r1, r5
   b905e:	6820      	ldr	r0, [r4, #0]
   b9060:	f7ff feb0 	bl	b8dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   b9064:	9b01      	ldr	r3, [sp, #4]
   b9066:	6822      	ldr	r2, [r4, #0]
   b9068:	6063      	str	r3, [r4, #4]
   b906a:	2100      	movs	r1, #0
   b906c:	54d1      	strb	r1, [r2, r3]
   b906e:	b002      	add	sp, #8
   b9070:	bd70      	pop	{r4, r5, r6, pc}
   b9072:	bf00      	nop
   b9074:	000bb637 	.word	0x000bb637

000b9078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   b9078:	b508      	push	{r3, lr}
   b907a:	f04f 0300 	mov.w	r3, #0
   b907e:	f7ff ffd7 	bl	b9030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   b9082:	bd08      	pop	{r3, pc}

000b9084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   b9084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9088:	460d      	mov	r5, r1
   b908a:	4617      	mov	r7, r2
   b908c:	4698      	mov	r8, r3
   b908e:	f100 0308 	add.w	r3, r0, #8
   b9092:	4604      	mov	r4, r0
   b9094:	6003      	str	r3, [r0, #0]
   b9096:	4639      	mov	r1, r7
   b9098:	4a09      	ldr	r2, [pc, #36]	; (b90c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   b909a:	4628      	mov	r0, r5
   b909c:	f7ff fe54 	bl	b8d48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b90a0:	682e      	ldr	r6, [r5, #0]
   b90a2:	686a      	ldr	r2, [r5, #4]
   b90a4:	1831      	adds	r1, r6, r0
   b90a6:	1bd2      	subs	r2, r2, r7
   b90a8:	4620      	mov	r0, r4
   b90aa:	4542      	cmp	r2, r8
   b90ac:	bf94      	ite	ls
   b90ae:	188a      	addls	r2, r1, r2
   b90b0:	eb01 0208 	addhi.w	r2, r1, r8
   b90b4:	f7ff ffe0 	bl	b9078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   b90b8:	4620      	mov	r0, r4
   b90ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b90be:	bf00      	nop
   b90c0:	000bbb88 	.word	0x000bbb88

000b90c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   b90c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90c6:	460d      	mov	r5, r1
   b90c8:	4604      	mov	r4, r0
   b90ca:	4611      	mov	r1, r2
   b90cc:	4628      	mov	r0, r5
   b90ce:	4a06      	ldr	r2, [pc, #24]	; (b90e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   b90d0:	9301      	str	r3, [sp, #4]
   b90d2:	f7ff fe39 	bl	b8d48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b90d6:	9b01      	ldr	r3, [sp, #4]
   b90d8:	4602      	mov	r2, r0
   b90da:	4629      	mov	r1, r5
   b90dc:	4620      	mov	r0, r4
   b90de:	f7ff ffd1 	bl	b9084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   b90e2:	4620      	mov	r0, r4
   b90e4:	b003      	add	sp, #12
   b90e6:	bd30      	pop	{r4, r5, pc}
   b90e8:	000bbba3 	.word	0x000bbba3

000b90ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b90ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b90ee:	2400      	movs	r4, #0
   b90f0:	2310      	movs	r3, #16
   b90f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b90f6:	6803      	ldr	r3, [r0, #0]
   b90f8:	4615      	mov	r5, r2
   b90fa:	699e      	ldr	r6, [r3, #24]
   b90fc:	6812      	ldr	r2, [r2, #0]
   b90fe:	466b      	mov	r3, sp
   b9100:	e9cd 4400 	strd	r4, r4, [sp]
   b9104:	47b0      	blx	r6
   b9106:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b910a:	f003 0306 	and.w	r3, r3, #6
   b910e:	2b06      	cmp	r3, #6
   b9110:	bf03      	ittte	eq
   b9112:	9b00      	ldreq	r3, [sp, #0]
   b9114:	602b      	streq	r3, [r5, #0]
   b9116:	2001      	moveq	r0, #1
   b9118:	4620      	movne	r0, r4
   b911a:	b004      	add	sp, #16
   b911c:	bd70      	pop	{r4, r5, r6, pc}

000b911e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b911e:	9800      	ldr	r0, [sp, #0]
   b9120:	4290      	cmp	r0, r2
   b9122:	bf14      	ite	ne
   b9124:	2001      	movne	r0, #1
   b9126:	2006      	moveq	r0, #6
   b9128:	4770      	bx	lr
	...

000b912c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b912c:	b510      	push	{r4, lr}
   b912e:	4b03      	ldr	r3, [pc, #12]	; (b913c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9130:	6003      	str	r3, [r0, #0]
   b9132:	4604      	mov	r4, r0
   b9134:	f000 f8cd 	bl	b92d2 <_ZNSt9type_infoD1Ev>
   b9138:	4620      	mov	r0, r4
   b913a:	bd10      	pop	{r4, pc}
   b913c:	000bbbf0 	.word	0x000bbbf0

000b9140 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9140:	b510      	push	{r4, lr}
   b9142:	4604      	mov	r4, r0
   b9144:	f7ff fff2 	bl	b912c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9148:	4620      	mov	r0, r4
   b914a:	2108      	movs	r1, #8
   b914c:	f7fb fd23 	bl	b4b96 <_ZdlPvj>
   b9150:	4620      	mov	r0, r4
   b9152:	bd10      	pop	{r4, pc}

000b9154 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9158:	461f      	mov	r7, r3
   b915a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b915e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9162:	4598      	cmp	r8, r3
   b9164:	4606      	mov	r6, r0
   b9166:	4615      	mov	r5, r2
   b9168:	d107      	bne.n	b917a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b916a:	9907      	ldr	r1, [sp, #28]
   b916c:	f000 f8b4 	bl	b92d8 <_ZNKSt9type_infoeqERKS_>
   b9170:	b118      	cbz	r0, b917a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9172:	7165      	strb	r5, [r4, #5]
   b9174:	2000      	movs	r0, #0
   b9176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b917a:	4639      	mov	r1, r7
   b917c:	4630      	mov	r0, r6
   b917e:	f000 f8ab 	bl	b92d8 <_ZNKSt9type_infoeqERKS_>
   b9182:	2800      	cmp	r0, #0
   b9184:	d0f6      	beq.n	b9174 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9186:	2301      	movs	r3, #1
   b9188:	f8c4 8000 	str.w	r8, [r4]
   b918c:	7125      	strb	r5, [r4, #4]
   b918e:	71a3      	strb	r3, [r4, #6]
   b9190:	e7f0      	b.n	b9174 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9192 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9192:	b538      	push	{r3, r4, r5, lr}
   b9194:	4615      	mov	r5, r2
   b9196:	461c      	mov	r4, r3
   b9198:	f000 f89e 	bl	b92d8 <_ZNKSt9type_infoeqERKS_>
   b919c:	b120      	cbz	r0, b91a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b919e:	2308      	movs	r3, #8
   b91a0:	60e3      	str	r3, [r4, #12]
   b91a2:	2306      	movs	r3, #6
   b91a4:	6025      	str	r5, [r4, #0]
   b91a6:	7123      	strb	r3, [r4, #4]
   b91a8:	bd38      	pop	{r3, r4, r5, pc}

000b91aa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b91aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b91ac:	4605      	mov	r5, r0
   b91ae:	460c      	mov	r4, r1
   b91b0:	9201      	str	r2, [sp, #4]
   b91b2:	461e      	mov	r6, r3
   b91b4:	f000 f890 	bl	b92d8 <_ZNKSt9type_infoeqERKS_>
   b91b8:	b950      	cbnz	r0, b91d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b91ba:	2e03      	cmp	r6, #3
   b91bc:	d808      	bhi.n	b91d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b91be:	6823      	ldr	r3, [r4, #0]
   b91c0:	9a01      	ldr	r2, [sp, #4]
   b91c2:	695b      	ldr	r3, [r3, #20]
   b91c4:	4629      	mov	r1, r5
   b91c6:	4620      	mov	r0, r4
   b91c8:	b002      	add	sp, #8
   b91ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b91ce:	4718      	bx	r3
   b91d0:	b002      	add	sp, #8
   b91d2:	bd70      	pop	{r4, r5, r6, pc}

000b91d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b91d4:	b510      	push	{r4, lr}
   b91d6:	4b03      	ldr	r3, [pc, #12]	; (b91e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b91d8:	6003      	str	r3, [r0, #0]
   b91da:	4604      	mov	r4, r0
   b91dc:	f7ff ffa6 	bl	b912c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b91e0:	4620      	mov	r0, r4
   b91e2:	bd10      	pop	{r4, pc}
   b91e4:	000bbc50 	.word	0x000bbc50

000b91e8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b91e8:	b510      	push	{r4, lr}
   b91ea:	4604      	mov	r4, r0
   b91ec:	f7ff fff2 	bl	b91d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b91f0:	4620      	mov	r0, r4
   b91f2:	210c      	movs	r1, #12
   b91f4:	f7fb fccf 	bl	b4b96 <_ZdlPvj>
   b91f8:	4620      	mov	r0, r4
   b91fa:	bd10      	pop	{r4, pc}

000b91fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b91fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b91fe:	9f08      	ldr	r7, [sp, #32]
   b9200:	4297      	cmp	r7, r2
   b9202:	4605      	mov	r5, r0
   b9204:	460e      	mov	r6, r1
   b9206:	4614      	mov	r4, r2
   b9208:	d00a      	beq.n	b9220 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b920a:	68a8      	ldr	r0, [r5, #8]
   b920c:	6802      	ldr	r2, [r0, #0]
   b920e:	9708      	str	r7, [sp, #32]
   b9210:	6a15      	ldr	r5, [r2, #32]
   b9212:	4631      	mov	r1, r6
   b9214:	4622      	mov	r2, r4
   b9216:	46ac      	mov	ip, r5
   b9218:	b003      	add	sp, #12
   b921a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b921e:	4760      	bx	ip
   b9220:	4619      	mov	r1, r3
   b9222:	9301      	str	r3, [sp, #4]
   b9224:	f000 f858 	bl	b92d8 <_ZNKSt9type_infoeqERKS_>
   b9228:	9b01      	ldr	r3, [sp, #4]
   b922a:	2800      	cmp	r0, #0
   b922c:	d0ed      	beq.n	b920a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b922e:	2006      	movs	r0, #6
   b9230:	b003      	add	sp, #12
   b9232:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9234 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9234:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9238:	460d      	mov	r5, r1
   b923a:	4619      	mov	r1, r3
   b923c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9240:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9244:	4681      	mov	r9, r0
   b9246:	4617      	mov	r7, r2
   b9248:	4698      	mov	r8, r3
   b924a:	f000 f845 	bl	b92d8 <_ZNKSt9type_infoeqERKS_>
   b924e:	b190      	cbz	r0, b9276 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9250:	2d00      	cmp	r5, #0
   b9252:	6034      	str	r4, [r6, #0]
   b9254:	7137      	strb	r7, [r6, #4]
   b9256:	db09      	blt.n	b926c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9258:	1961      	adds	r1, r4, r5
   b925a:	458a      	cmp	sl, r1
   b925c:	bf0c      	ite	eq
   b925e:	2106      	moveq	r1, #6
   b9260:	2101      	movne	r1, #1
   b9262:	71b1      	strb	r1, [r6, #6]
   b9264:	2000      	movs	r0, #0
   b9266:	b001      	add	sp, #4
   b9268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b926c:	3502      	adds	r5, #2
   b926e:	d1f9      	bne.n	b9264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9270:	2301      	movs	r3, #1
   b9272:	71b3      	strb	r3, [r6, #6]
   b9274:	e7f6      	b.n	b9264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9276:	4554      	cmp	r4, sl
   b9278:	d106      	bne.n	b9288 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b927a:	4659      	mov	r1, fp
   b927c:	4648      	mov	r0, r9
   b927e:	f000 f82b 	bl	b92d8 <_ZNKSt9type_infoeqERKS_>
   b9282:	b108      	cbz	r0, b9288 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9284:	7177      	strb	r7, [r6, #5]
   b9286:	e7ed      	b.n	b9264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9288:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b928c:	6803      	ldr	r3, [r0, #0]
   b928e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9292:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9296:	69dc      	ldr	r4, [r3, #28]
   b9298:	463a      	mov	r2, r7
   b929a:	4643      	mov	r3, r8
   b929c:	4629      	mov	r1, r5
   b929e:	46a4      	mov	ip, r4
   b92a0:	b001      	add	sp, #4
   b92a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b92a6:	4760      	bx	ip

000b92a8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b92a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b92ac:	4607      	mov	r7, r0
   b92ae:	460c      	mov	r4, r1
   b92b0:	4615      	mov	r5, r2
   b92b2:	461e      	mov	r6, r3
   b92b4:	f7ff ff6d 	bl	b9192 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b92b8:	b948      	cbnz	r0, b92ce <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b92ba:	68b8      	ldr	r0, [r7, #8]
   b92bc:	6803      	ldr	r3, [r0, #0]
   b92be:	699f      	ldr	r7, [r3, #24]
   b92c0:	462a      	mov	r2, r5
   b92c2:	4633      	mov	r3, r6
   b92c4:	4621      	mov	r1, r4
   b92c6:	46bc      	mov	ip, r7
   b92c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b92cc:	4760      	bx	ip
   b92ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b92d2 <_ZNSt9type_infoD1Ev>:
   b92d2:	4770      	bx	lr

000b92d4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b92d4:	2000      	movs	r0, #0
   b92d6:	4770      	bx	lr

000b92d8 <_ZNKSt9type_infoeqERKS_>:
   b92d8:	4281      	cmp	r1, r0
   b92da:	b508      	push	{r3, lr}
   b92dc:	d00e      	beq.n	b92fc <_ZNKSt9type_infoeqERKS_+0x24>
   b92de:	6840      	ldr	r0, [r0, #4]
   b92e0:	7803      	ldrb	r3, [r0, #0]
   b92e2:	2b2a      	cmp	r3, #42	; 0x2a
   b92e4:	d00c      	beq.n	b9300 <_ZNKSt9type_infoeqERKS_+0x28>
   b92e6:	6849      	ldr	r1, [r1, #4]
   b92e8:	780b      	ldrb	r3, [r1, #0]
   b92ea:	2b2a      	cmp	r3, #42	; 0x2a
   b92ec:	bf08      	it	eq
   b92ee:	3101      	addeq	r1, #1
   b92f0:	f7fb fbe6 	bl	b4ac0 <strcmp>
   b92f4:	fab0 f080 	clz	r0, r0
   b92f8:	0940      	lsrs	r0, r0, #5
   b92fa:	bd08      	pop	{r3, pc}
   b92fc:	2001      	movs	r0, #1
   b92fe:	e7fc      	b.n	b92fa <_ZNKSt9type_infoeqERKS_+0x22>
   b9300:	2000      	movs	r0, #0
   b9302:	e7fa      	b.n	b92fa <_ZNKSt9type_infoeqERKS_+0x22>

000b9304 <asctime_r>:
   b9304:	b510      	push	{r4, lr}
   b9306:	460c      	mov	r4, r1
   b9308:	6941      	ldr	r1, [r0, #20]
   b930a:	6903      	ldr	r3, [r0, #16]
   b930c:	6982      	ldr	r2, [r0, #24]
   b930e:	b086      	sub	sp, #24
   b9310:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b9314:	9104      	str	r1, [sp, #16]
   b9316:	6801      	ldr	r1, [r0, #0]
   b9318:	9103      	str	r1, [sp, #12]
   b931a:	6841      	ldr	r1, [r0, #4]
   b931c:	9102      	str	r1, [sp, #8]
   b931e:	6881      	ldr	r1, [r0, #8]
   b9320:	9101      	str	r1, [sp, #4]
   b9322:	68c1      	ldr	r1, [r0, #12]
   b9324:	9100      	str	r1, [sp, #0]
   b9326:	4907      	ldr	r1, [pc, #28]	; (b9344 <asctime_r+0x40>)
   b9328:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b932c:	440b      	add	r3, r1
   b932e:	4906      	ldr	r1, [pc, #24]	; (b9348 <asctime_r+0x44>)
   b9330:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9334:	440a      	add	r2, r1
   b9336:	4620      	mov	r0, r4
   b9338:	4904      	ldr	r1, [pc, #16]	; (b934c <asctime_r+0x48>)
   b933a:	f7fc ff89 	bl	b6250 <siprintf>
   b933e:	4620      	mov	r0, r4
   b9340:	b006      	add	sp, #24
   b9342:	bd10      	pop	{r4, pc}
   b9344:	000bbcbe 	.word	0x000bbcbe
   b9348:	000bbca9 	.word	0x000bbca9
   b934c:	000bbc89 	.word	0x000bbc89

000b9350 <atexit>:
   b9350:	2300      	movs	r3, #0
   b9352:	4601      	mov	r1, r0
   b9354:	461a      	mov	r2, r3
   b9356:	4618      	mov	r0, r3
   b9358:	f000 bfc0 	b.w	ba2dc <__register_exitproc>

000b935c <memcmp>:
   b935c:	b510      	push	{r4, lr}
   b935e:	3901      	subs	r1, #1
   b9360:	4402      	add	r2, r0
   b9362:	4290      	cmp	r0, r2
   b9364:	d101      	bne.n	b936a <memcmp+0xe>
   b9366:	2000      	movs	r0, #0
   b9368:	e005      	b.n	b9376 <memcmp+0x1a>
   b936a:	7803      	ldrb	r3, [r0, #0]
   b936c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9370:	42a3      	cmp	r3, r4
   b9372:	d001      	beq.n	b9378 <memcmp+0x1c>
   b9374:	1b18      	subs	r0, r3, r4
   b9376:	bd10      	pop	{r4, pc}
   b9378:	3001      	adds	r0, #1
   b937a:	e7f2      	b.n	b9362 <memcmp+0x6>

000b937c <memcpy>:
   b937c:	440a      	add	r2, r1
   b937e:	4291      	cmp	r1, r2
   b9380:	f100 33ff 	add.w	r3, r0, #4294967295
   b9384:	d100      	bne.n	b9388 <memcpy+0xc>
   b9386:	4770      	bx	lr
   b9388:	b510      	push	{r4, lr}
   b938a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b938e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9392:	4291      	cmp	r1, r2
   b9394:	d1f9      	bne.n	b938a <memcpy+0xe>
   b9396:	bd10      	pop	{r4, pc}

000b9398 <memmove>:
   b9398:	4288      	cmp	r0, r1
   b939a:	b510      	push	{r4, lr}
   b939c:	eb01 0402 	add.w	r4, r1, r2
   b93a0:	d902      	bls.n	b93a8 <memmove+0x10>
   b93a2:	4284      	cmp	r4, r0
   b93a4:	4623      	mov	r3, r4
   b93a6:	d807      	bhi.n	b93b8 <memmove+0x20>
   b93a8:	1e43      	subs	r3, r0, #1
   b93aa:	42a1      	cmp	r1, r4
   b93ac:	d008      	beq.n	b93c0 <memmove+0x28>
   b93ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   b93b2:	f803 2f01 	strb.w	r2, [r3, #1]!
   b93b6:	e7f8      	b.n	b93aa <memmove+0x12>
   b93b8:	4402      	add	r2, r0
   b93ba:	4601      	mov	r1, r0
   b93bc:	428a      	cmp	r2, r1
   b93be:	d100      	bne.n	b93c2 <memmove+0x2a>
   b93c0:	bd10      	pop	{r4, pc}
   b93c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b93c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b93ca:	e7f7      	b.n	b93bc <memmove+0x24>

000b93cc <memset>:
   b93cc:	4402      	add	r2, r0
   b93ce:	4603      	mov	r3, r0
   b93d0:	4293      	cmp	r3, r2
   b93d2:	d100      	bne.n	b93d6 <memset+0xa>
   b93d4:	4770      	bx	lr
   b93d6:	f803 1b01 	strb.w	r1, [r3], #1
   b93da:	e7f9      	b.n	b93d0 <memset+0x4>

000b93dc <srand>:
   b93dc:	b538      	push	{r3, r4, r5, lr}
   b93de:	4b10      	ldr	r3, [pc, #64]	; (b9420 <srand+0x44>)
   b93e0:	681d      	ldr	r5, [r3, #0]
   b93e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b93e4:	4604      	mov	r4, r0
   b93e6:	b9b3      	cbnz	r3, b9416 <srand+0x3a>
   b93e8:	2018      	movs	r0, #24
   b93ea:	f7fc ff11 	bl	b6210 <malloc>
   b93ee:	4602      	mov	r2, r0
   b93f0:	63a8      	str	r0, [r5, #56]	; 0x38
   b93f2:	b920      	cbnz	r0, b93fe <srand+0x22>
   b93f4:	4b0b      	ldr	r3, [pc, #44]	; (b9424 <srand+0x48>)
   b93f6:	480c      	ldr	r0, [pc, #48]	; (b9428 <srand+0x4c>)
   b93f8:	2142      	movs	r1, #66	; 0x42
   b93fa:	f7fc ff51 	bl	b62a0 <__assert_func>
   b93fe:	490b      	ldr	r1, [pc, #44]	; (b942c <srand+0x50>)
   b9400:	4b0b      	ldr	r3, [pc, #44]	; (b9430 <srand+0x54>)
   b9402:	e9c0 1300 	strd	r1, r3, [r0]
   b9406:	4b0b      	ldr	r3, [pc, #44]	; (b9434 <srand+0x58>)
   b9408:	6083      	str	r3, [r0, #8]
   b940a:	230b      	movs	r3, #11
   b940c:	8183      	strh	r3, [r0, #12]
   b940e:	2100      	movs	r1, #0
   b9410:	2001      	movs	r0, #1
   b9412:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9416:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9418:	2200      	movs	r2, #0
   b941a:	611c      	str	r4, [r3, #16]
   b941c:	615a      	str	r2, [r3, #20]
   b941e:	bd38      	pop	{r3, r4, r5, pc}
   b9420:	2003e30c 	.word	0x2003e30c
   b9424:	000bbce2 	.word	0x000bbce2
   b9428:	000bbcf9 	.word	0x000bbcf9
   b942c:	abcd330e 	.word	0xabcd330e
   b9430:	e66d1234 	.word	0xe66d1234
   b9434:	0005deec 	.word	0x0005deec

000b9438 <strcpy>:
   b9438:	4603      	mov	r3, r0
   b943a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b943e:	f803 2b01 	strb.w	r2, [r3], #1
   b9442:	2a00      	cmp	r2, #0
   b9444:	d1f9      	bne.n	b943a <strcpy+0x2>
   b9446:	4770      	bx	lr

000b9448 <strdup>:
   b9448:	4b02      	ldr	r3, [pc, #8]	; (b9454 <strdup+0xc>)
   b944a:	4601      	mov	r1, r0
   b944c:	6818      	ldr	r0, [r3, #0]
   b944e:	f000 b803 	b.w	b9458 <_strdup_r>
   b9452:	bf00      	nop
   b9454:	2003e30c 	.word	0x2003e30c

000b9458 <_strdup_r>:
   b9458:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b945a:	4604      	mov	r4, r0
   b945c:	4608      	mov	r0, r1
   b945e:	460d      	mov	r5, r1
   b9460:	f7fb fb38 	bl	b4ad4 <strlen>
   b9464:	1c42      	adds	r2, r0, #1
   b9466:	4611      	mov	r1, r2
   b9468:	4620      	mov	r0, r4
   b946a:	9201      	str	r2, [sp, #4]
   b946c:	f7fc ff08 	bl	b6280 <_malloc_r>
   b9470:	4604      	mov	r4, r0
   b9472:	b118      	cbz	r0, b947c <_strdup_r+0x24>
   b9474:	9a01      	ldr	r2, [sp, #4]
   b9476:	4629      	mov	r1, r5
   b9478:	f7ff ff80 	bl	b937c <memcpy>
   b947c:	4620      	mov	r0, r4
   b947e:	b003      	add	sp, #12
   b9480:	bd30      	pop	{r4, r5, pc}

000b9482 <strncmp>:
   b9482:	b510      	push	{r4, lr}
   b9484:	b17a      	cbz	r2, b94a6 <strncmp+0x24>
   b9486:	4603      	mov	r3, r0
   b9488:	3901      	subs	r1, #1
   b948a:	1884      	adds	r4, r0, r2
   b948c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9490:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9494:	4290      	cmp	r0, r2
   b9496:	d101      	bne.n	b949c <strncmp+0x1a>
   b9498:	42a3      	cmp	r3, r4
   b949a:	d101      	bne.n	b94a0 <strncmp+0x1e>
   b949c:	1a80      	subs	r0, r0, r2
   b949e:	bd10      	pop	{r4, pc}
   b94a0:	2800      	cmp	r0, #0
   b94a2:	d1f3      	bne.n	b948c <strncmp+0xa>
   b94a4:	e7fa      	b.n	b949c <strncmp+0x1a>
   b94a6:	4610      	mov	r0, r2
   b94a8:	e7f9      	b.n	b949e <strncmp+0x1c>

000b94aa <strnlen>:
   b94aa:	b510      	push	{r4, lr}
   b94ac:	4602      	mov	r2, r0
   b94ae:	4401      	add	r1, r0
   b94b0:	428a      	cmp	r2, r1
   b94b2:	4613      	mov	r3, r2
   b94b4:	d003      	beq.n	b94be <strnlen+0x14>
   b94b6:	781c      	ldrb	r4, [r3, #0]
   b94b8:	3201      	adds	r2, #1
   b94ba:	2c00      	cmp	r4, #0
   b94bc:	d1f8      	bne.n	b94b0 <strnlen+0x6>
   b94be:	1a18      	subs	r0, r3, r0
   b94c0:	bd10      	pop	{r4, pc}

000b94c2 <sulp>:
   b94c2:	b570      	push	{r4, r5, r6, lr}
   b94c4:	4604      	mov	r4, r0
   b94c6:	460d      	mov	r5, r1
   b94c8:	ec45 4b10 	vmov	d0, r4, r5
   b94cc:	4616      	mov	r6, r2
   b94ce:	f001 fe5f 	bl	bb190 <__ulp>
   b94d2:	ec51 0b10 	vmov	r0, r1, d0
   b94d6:	b17e      	cbz	r6, b94f8 <sulp+0x36>
   b94d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b94dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b94e0:	2b00      	cmp	r3, #0
   b94e2:	dd09      	ble.n	b94f8 <sulp+0x36>
   b94e4:	051b      	lsls	r3, r3, #20
   b94e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b94ea:	2400      	movs	r4, #0
   b94ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b94f0:	4622      	mov	r2, r4
   b94f2:	462b      	mov	r3, r5
   b94f4:	f7fa ff50 	bl	b4398 <__aeabi_dmul>
   b94f8:	bd70      	pop	{r4, r5, r6, pc}
   b94fa:	0000      	movs	r0, r0
   b94fc:	0000      	movs	r0, r0
	...

000b9500 <_strtod_l>:
   b9500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9504:	ed2d 8b02 	vpush	{d8}
   b9508:	b09d      	sub	sp, #116	; 0x74
   b950a:	461f      	mov	r7, r3
   b950c:	2300      	movs	r3, #0
   b950e:	9318      	str	r3, [sp, #96]	; 0x60
   b9510:	4ba2      	ldr	r3, [pc, #648]	; (b979c <_strtod_l+0x29c>)
   b9512:	9213      	str	r2, [sp, #76]	; 0x4c
   b9514:	681b      	ldr	r3, [r3, #0]
   b9516:	9305      	str	r3, [sp, #20]
   b9518:	4604      	mov	r4, r0
   b951a:	4618      	mov	r0, r3
   b951c:	4688      	mov	r8, r1
   b951e:	f7fb fad9 	bl	b4ad4 <strlen>
   b9522:	f04f 0a00 	mov.w	sl, #0
   b9526:	4605      	mov	r5, r0
   b9528:	f04f 0b00 	mov.w	fp, #0
   b952c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9532:	781a      	ldrb	r2, [r3, #0]
   b9534:	2a2b      	cmp	r2, #43	; 0x2b
   b9536:	d04e      	beq.n	b95d6 <_strtod_l+0xd6>
   b9538:	d83b      	bhi.n	b95b2 <_strtod_l+0xb2>
   b953a:	2a0d      	cmp	r2, #13
   b953c:	d834      	bhi.n	b95a8 <_strtod_l+0xa8>
   b953e:	2a08      	cmp	r2, #8
   b9540:	d834      	bhi.n	b95ac <_strtod_l+0xac>
   b9542:	2a00      	cmp	r2, #0
   b9544:	d03e      	beq.n	b95c4 <_strtod_l+0xc4>
   b9546:	2300      	movs	r3, #0
   b9548:	930a      	str	r3, [sp, #40]	; 0x28
   b954a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b954c:	7833      	ldrb	r3, [r6, #0]
   b954e:	2b30      	cmp	r3, #48	; 0x30
   b9550:	f040 80b0 	bne.w	b96b4 <_strtod_l+0x1b4>
   b9554:	7873      	ldrb	r3, [r6, #1]
   b9556:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b955a:	2b58      	cmp	r3, #88	; 0x58
   b955c:	d168      	bne.n	b9630 <_strtod_l+0x130>
   b955e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9560:	9301      	str	r3, [sp, #4]
   b9562:	ab18      	add	r3, sp, #96	; 0x60
   b9564:	9702      	str	r7, [sp, #8]
   b9566:	9300      	str	r3, [sp, #0]
   b9568:	4a8d      	ldr	r2, [pc, #564]	; (b97a0 <_strtod_l+0x2a0>)
   b956a:	ab19      	add	r3, sp, #100	; 0x64
   b956c:	a917      	add	r1, sp, #92	; 0x5c
   b956e:	4620      	mov	r0, r4
   b9570:	f000 ff7e 	bl	ba470 <__gethex>
   b9574:	f010 0707 	ands.w	r7, r0, #7
   b9578:	4605      	mov	r5, r0
   b957a:	d005      	beq.n	b9588 <_strtod_l+0x88>
   b957c:	2f06      	cmp	r7, #6
   b957e:	d12c      	bne.n	b95da <_strtod_l+0xda>
   b9580:	3601      	adds	r6, #1
   b9582:	2300      	movs	r3, #0
   b9584:	9617      	str	r6, [sp, #92]	; 0x5c
   b9586:	930a      	str	r3, [sp, #40]	; 0x28
   b9588:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b958a:	2b00      	cmp	r3, #0
   b958c:	f040 8590 	bne.w	ba0b0 <_strtod_l+0xbb0>
   b9590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9592:	b1eb      	cbz	r3, b95d0 <_strtod_l+0xd0>
   b9594:	4652      	mov	r2, sl
   b9596:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b959a:	ec43 2b10 	vmov	d0, r2, r3
   b959e:	b01d      	add	sp, #116	; 0x74
   b95a0:	ecbd 8b02 	vpop	{d8}
   b95a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b95a8:	2a20      	cmp	r2, #32
   b95aa:	d1cc      	bne.n	b9546 <_strtod_l+0x46>
   b95ac:	3301      	adds	r3, #1
   b95ae:	9317      	str	r3, [sp, #92]	; 0x5c
   b95b0:	e7be      	b.n	b9530 <_strtod_l+0x30>
   b95b2:	2a2d      	cmp	r2, #45	; 0x2d
   b95b4:	d1c7      	bne.n	b9546 <_strtod_l+0x46>
   b95b6:	2201      	movs	r2, #1
   b95b8:	920a      	str	r2, [sp, #40]	; 0x28
   b95ba:	1c5a      	adds	r2, r3, #1
   b95bc:	9217      	str	r2, [sp, #92]	; 0x5c
   b95be:	785b      	ldrb	r3, [r3, #1]
   b95c0:	2b00      	cmp	r3, #0
   b95c2:	d1c2      	bne.n	b954a <_strtod_l+0x4a>
   b95c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b95c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b95ca:	2b00      	cmp	r3, #0
   b95cc:	f040 856e 	bne.w	ba0ac <_strtod_l+0xbac>
   b95d0:	4652      	mov	r2, sl
   b95d2:	465b      	mov	r3, fp
   b95d4:	e7e1      	b.n	b959a <_strtod_l+0x9a>
   b95d6:	2200      	movs	r2, #0
   b95d8:	e7ee      	b.n	b95b8 <_strtod_l+0xb8>
   b95da:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b95dc:	b13a      	cbz	r2, b95ee <_strtod_l+0xee>
   b95de:	2135      	movs	r1, #53	; 0x35
   b95e0:	a81a      	add	r0, sp, #104	; 0x68
   b95e2:	f001 fee0 	bl	bb3a6 <__copybits>
   b95e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b95e8:	4620      	mov	r0, r4
   b95ea:	f001 fa9f 	bl	bab2c <_Bfree>
   b95ee:	3f01      	subs	r7, #1
   b95f0:	2f04      	cmp	r7, #4
   b95f2:	d806      	bhi.n	b9602 <_strtod_l+0x102>
   b95f4:	e8df f007 	tbb	[pc, r7]
   b95f8:	1714030a 	.word	0x1714030a
   b95fc:	0a          	.byte	0x0a
   b95fd:	00          	.byte	0x00
   b95fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b9602:	0728      	lsls	r0, r5, #28
   b9604:	d5c0      	bpl.n	b9588 <_strtod_l+0x88>
   b9606:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b960a:	e7bd      	b.n	b9588 <_strtod_l+0x88>
   b960c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9610:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b9612:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b9616:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b961a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b961e:	e7f0      	b.n	b9602 <_strtod_l+0x102>
   b9620:	f8df b180 	ldr.w	fp, [pc, #384]	; b97a4 <_strtod_l+0x2a4>
   b9624:	e7ed      	b.n	b9602 <_strtod_l+0x102>
   b9626:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b962a:	f04f 3aff 	mov.w	sl, #4294967295
   b962e:	e7e8      	b.n	b9602 <_strtod_l+0x102>
   b9630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9632:	1c5a      	adds	r2, r3, #1
   b9634:	9217      	str	r2, [sp, #92]	; 0x5c
   b9636:	785b      	ldrb	r3, [r3, #1]
   b9638:	2b30      	cmp	r3, #48	; 0x30
   b963a:	d0f9      	beq.n	b9630 <_strtod_l+0x130>
   b963c:	2b00      	cmp	r3, #0
   b963e:	d0a3      	beq.n	b9588 <_strtod_l+0x88>
   b9640:	2301      	movs	r3, #1
   b9642:	f04f 0900 	mov.w	r9, #0
   b9646:	9304      	str	r3, [sp, #16]
   b9648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b964a:	9308      	str	r3, [sp, #32]
   b964c:	f8cd 901c 	str.w	r9, [sp, #28]
   b9650:	464f      	mov	r7, r9
   b9652:	220a      	movs	r2, #10
   b9654:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b9656:	7806      	ldrb	r6, [r0, #0]
   b9658:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b965c:	b2d9      	uxtb	r1, r3
   b965e:	2909      	cmp	r1, #9
   b9660:	d92a      	bls.n	b96b8 <_strtod_l+0x1b8>
   b9662:	9905      	ldr	r1, [sp, #20]
   b9664:	462a      	mov	r2, r5
   b9666:	f7ff ff0c 	bl	b9482 <strncmp>
   b966a:	b398      	cbz	r0, b96d4 <_strtod_l+0x1d4>
   b966c:	2000      	movs	r0, #0
   b966e:	4632      	mov	r2, r6
   b9670:	463d      	mov	r5, r7
   b9672:	9005      	str	r0, [sp, #20]
   b9674:	4603      	mov	r3, r0
   b9676:	2a65      	cmp	r2, #101	; 0x65
   b9678:	d001      	beq.n	b967e <_strtod_l+0x17e>
   b967a:	2a45      	cmp	r2, #69	; 0x45
   b967c:	d118      	bne.n	b96b0 <_strtod_l+0x1b0>
   b967e:	b91d      	cbnz	r5, b9688 <_strtod_l+0x188>
   b9680:	9a04      	ldr	r2, [sp, #16]
   b9682:	4302      	orrs	r2, r0
   b9684:	d09e      	beq.n	b95c4 <_strtod_l+0xc4>
   b9686:	2500      	movs	r5, #0
   b9688:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b968c:	f108 0201 	add.w	r2, r8, #1
   b9690:	9217      	str	r2, [sp, #92]	; 0x5c
   b9692:	f898 2001 	ldrb.w	r2, [r8, #1]
   b9696:	2a2b      	cmp	r2, #43	; 0x2b
   b9698:	d075      	beq.n	b9786 <_strtod_l+0x286>
   b969a:	2a2d      	cmp	r2, #45	; 0x2d
   b969c:	d07b      	beq.n	b9796 <_strtod_l+0x296>
   b969e:	f04f 0c00 	mov.w	ip, #0
   b96a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b96a6:	2909      	cmp	r1, #9
   b96a8:	f240 8082 	bls.w	b97b0 <_strtod_l+0x2b0>
   b96ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b96b0:	2600      	movs	r6, #0
   b96b2:	e09d      	b.n	b97f0 <_strtod_l+0x2f0>
   b96b4:	2300      	movs	r3, #0
   b96b6:	e7c4      	b.n	b9642 <_strtod_l+0x142>
   b96b8:	2f08      	cmp	r7, #8
   b96ba:	bfd8      	it	le
   b96bc:	9907      	ldrle	r1, [sp, #28]
   b96be:	f100 0001 	add.w	r0, r0, #1
   b96c2:	bfda      	itte	le
   b96c4:	fb02 3301 	mlale	r3, r2, r1, r3
   b96c8:	9307      	strle	r3, [sp, #28]
   b96ca:	fb02 3909 	mlagt	r9, r2, r9, r3
   b96ce:	3701      	adds	r7, #1
   b96d0:	9017      	str	r0, [sp, #92]	; 0x5c
   b96d2:	e7bf      	b.n	b9654 <_strtod_l+0x154>
   b96d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b96d6:	195a      	adds	r2, r3, r5
   b96d8:	9217      	str	r2, [sp, #92]	; 0x5c
   b96da:	5d5a      	ldrb	r2, [r3, r5]
   b96dc:	2f00      	cmp	r7, #0
   b96de:	d037      	beq.n	b9750 <_strtod_l+0x250>
   b96e0:	9005      	str	r0, [sp, #20]
   b96e2:	463d      	mov	r5, r7
   b96e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b96e8:	2b09      	cmp	r3, #9
   b96ea:	d912      	bls.n	b9712 <_strtod_l+0x212>
   b96ec:	2301      	movs	r3, #1
   b96ee:	e7c2      	b.n	b9676 <_strtod_l+0x176>
   b96f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b96f2:	1c5a      	adds	r2, r3, #1
   b96f4:	9217      	str	r2, [sp, #92]	; 0x5c
   b96f6:	785a      	ldrb	r2, [r3, #1]
   b96f8:	3001      	adds	r0, #1
   b96fa:	2a30      	cmp	r2, #48	; 0x30
   b96fc:	d0f8      	beq.n	b96f0 <_strtod_l+0x1f0>
   b96fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b9702:	2b08      	cmp	r3, #8
   b9704:	f200 84d9 	bhi.w	ba0ba <_strtod_l+0xbba>
   b9708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b970a:	9005      	str	r0, [sp, #20]
   b970c:	2000      	movs	r0, #0
   b970e:	9308      	str	r3, [sp, #32]
   b9710:	4605      	mov	r5, r0
   b9712:	3a30      	subs	r2, #48	; 0x30
   b9714:	f100 0301 	add.w	r3, r0, #1
   b9718:	d014      	beq.n	b9744 <_strtod_l+0x244>
   b971a:	9905      	ldr	r1, [sp, #20]
   b971c:	4419      	add	r1, r3
   b971e:	9105      	str	r1, [sp, #20]
   b9720:	462b      	mov	r3, r5
   b9722:	eb00 0e05 	add.w	lr, r0, r5
   b9726:	210a      	movs	r1, #10
   b9728:	4573      	cmp	r3, lr
   b972a:	d113      	bne.n	b9754 <_strtod_l+0x254>
   b972c:	182b      	adds	r3, r5, r0
   b972e:	2b08      	cmp	r3, #8
   b9730:	f105 0501 	add.w	r5, r5, #1
   b9734:	4405      	add	r5, r0
   b9736:	dc1c      	bgt.n	b9772 <_strtod_l+0x272>
   b9738:	9907      	ldr	r1, [sp, #28]
   b973a:	230a      	movs	r3, #10
   b973c:	fb03 2301 	mla	r3, r3, r1, r2
   b9740:	9307      	str	r3, [sp, #28]
   b9742:	2300      	movs	r3, #0
   b9744:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9746:	1c51      	adds	r1, r2, #1
   b9748:	9117      	str	r1, [sp, #92]	; 0x5c
   b974a:	7852      	ldrb	r2, [r2, #1]
   b974c:	4618      	mov	r0, r3
   b974e:	e7c9      	b.n	b96e4 <_strtod_l+0x1e4>
   b9750:	4638      	mov	r0, r7
   b9752:	e7d2      	b.n	b96fa <_strtod_l+0x1fa>
   b9754:	2b08      	cmp	r3, #8
   b9756:	dc04      	bgt.n	b9762 <_strtod_l+0x262>
   b9758:	9e07      	ldr	r6, [sp, #28]
   b975a:	434e      	muls	r6, r1
   b975c:	9607      	str	r6, [sp, #28]
   b975e:	3301      	adds	r3, #1
   b9760:	e7e2      	b.n	b9728 <_strtod_l+0x228>
   b9762:	f103 0c01 	add.w	ip, r3, #1
   b9766:	f1bc 0f10 	cmp.w	ip, #16
   b976a:	bfd8      	it	le
   b976c:	fb01 f909 	mulle.w	r9, r1, r9
   b9770:	e7f5      	b.n	b975e <_strtod_l+0x25e>
   b9772:	2d10      	cmp	r5, #16
   b9774:	bfdc      	itt	le
   b9776:	230a      	movle	r3, #10
   b9778:	fb03 2909 	mlale	r9, r3, r9, r2
   b977c:	e7e1      	b.n	b9742 <_strtod_l+0x242>
   b977e:	2300      	movs	r3, #0
   b9780:	9305      	str	r3, [sp, #20]
   b9782:	2301      	movs	r3, #1
   b9784:	e77c      	b.n	b9680 <_strtod_l+0x180>
   b9786:	f04f 0c00 	mov.w	ip, #0
   b978a:	f108 0202 	add.w	r2, r8, #2
   b978e:	9217      	str	r2, [sp, #92]	; 0x5c
   b9790:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9794:	e785      	b.n	b96a2 <_strtod_l+0x1a2>
   b9796:	f04f 0c01 	mov.w	ip, #1
   b979a:	e7f6      	b.n	b978a <_strtod_l+0x28a>
   b979c:	000bbf70 	.word	0x000bbf70
   b97a0:	000bbd84 	.word	0x000bbd84
   b97a4:	7ff00000 	.word	0x7ff00000
   b97a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b97aa:	1c51      	adds	r1, r2, #1
   b97ac:	9117      	str	r1, [sp, #92]	; 0x5c
   b97ae:	7852      	ldrb	r2, [r2, #1]
   b97b0:	2a30      	cmp	r2, #48	; 0x30
   b97b2:	d0f9      	beq.n	b97a8 <_strtod_l+0x2a8>
   b97b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b97b8:	2908      	cmp	r1, #8
   b97ba:	f63f af79 	bhi.w	b96b0 <_strtod_l+0x1b0>
   b97be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b97c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b97c4:	9206      	str	r2, [sp, #24]
   b97c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b97c8:	1c51      	adds	r1, r2, #1
   b97ca:	9117      	str	r1, [sp, #92]	; 0x5c
   b97cc:	7852      	ldrb	r2, [r2, #1]
   b97ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b97d2:	2e09      	cmp	r6, #9
   b97d4:	d937      	bls.n	b9846 <_strtod_l+0x346>
   b97d6:	9e06      	ldr	r6, [sp, #24]
   b97d8:	1b89      	subs	r1, r1, r6
   b97da:	2908      	cmp	r1, #8
   b97dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b97e0:	dc02      	bgt.n	b97e8 <_strtod_l+0x2e8>
   b97e2:	4576      	cmp	r6, lr
   b97e4:	bfa8      	it	ge
   b97e6:	4676      	movge	r6, lr
   b97e8:	f1bc 0f00 	cmp.w	ip, #0
   b97ec:	d000      	beq.n	b97f0 <_strtod_l+0x2f0>
   b97ee:	4276      	negs	r6, r6
   b97f0:	2d00      	cmp	r5, #0
   b97f2:	d14d      	bne.n	b9890 <_strtod_l+0x390>
   b97f4:	9904      	ldr	r1, [sp, #16]
   b97f6:	4301      	orrs	r1, r0
   b97f8:	f47f aec6 	bne.w	b9588 <_strtod_l+0x88>
   b97fc:	2b00      	cmp	r3, #0
   b97fe:	f47f aee1 	bne.w	b95c4 <_strtod_l+0xc4>
   b9802:	2a69      	cmp	r2, #105	; 0x69
   b9804:	d027      	beq.n	b9856 <_strtod_l+0x356>
   b9806:	dc24      	bgt.n	b9852 <_strtod_l+0x352>
   b9808:	2a49      	cmp	r2, #73	; 0x49
   b980a:	d024      	beq.n	b9856 <_strtod_l+0x356>
   b980c:	2a4e      	cmp	r2, #78	; 0x4e
   b980e:	f47f aed9 	bne.w	b95c4 <_strtod_l+0xc4>
   b9812:	499f      	ldr	r1, [pc, #636]	; (b9a90 <_strtod_l+0x590>)
   b9814:	a817      	add	r0, sp, #92	; 0x5c
   b9816:	f001 f883 	bl	ba920 <__match>
   b981a:	2800      	cmp	r0, #0
   b981c:	f43f aed2 	beq.w	b95c4 <_strtod_l+0xc4>
   b9820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9822:	781b      	ldrb	r3, [r3, #0]
   b9824:	2b28      	cmp	r3, #40	; 0x28
   b9826:	d12d      	bne.n	b9884 <_strtod_l+0x384>
   b9828:	499a      	ldr	r1, [pc, #616]	; (b9a94 <_strtod_l+0x594>)
   b982a:	aa1a      	add	r2, sp, #104	; 0x68
   b982c:	a817      	add	r0, sp, #92	; 0x5c
   b982e:	f001 f88b 	bl	ba948 <__hexnan>
   b9832:	2805      	cmp	r0, #5
   b9834:	d126      	bne.n	b9884 <_strtod_l+0x384>
   b9836:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9838:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b983c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9840:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9844:	e6a0      	b.n	b9588 <_strtod_l+0x88>
   b9846:	210a      	movs	r1, #10
   b9848:	fb01 2e0e 	mla	lr, r1, lr, r2
   b984c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9850:	e7b9      	b.n	b97c6 <_strtod_l+0x2c6>
   b9852:	2a6e      	cmp	r2, #110	; 0x6e
   b9854:	e7db      	b.n	b980e <_strtod_l+0x30e>
   b9856:	4990      	ldr	r1, [pc, #576]	; (b9a98 <_strtod_l+0x598>)
   b9858:	a817      	add	r0, sp, #92	; 0x5c
   b985a:	f001 f861 	bl	ba920 <__match>
   b985e:	2800      	cmp	r0, #0
   b9860:	f43f aeb0 	beq.w	b95c4 <_strtod_l+0xc4>
   b9864:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9866:	498d      	ldr	r1, [pc, #564]	; (b9a9c <_strtod_l+0x59c>)
   b9868:	3b01      	subs	r3, #1
   b986a:	a817      	add	r0, sp, #92	; 0x5c
   b986c:	9317      	str	r3, [sp, #92]	; 0x5c
   b986e:	f001 f857 	bl	ba920 <__match>
   b9872:	b910      	cbnz	r0, b987a <_strtod_l+0x37a>
   b9874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9876:	3301      	adds	r3, #1
   b9878:	9317      	str	r3, [sp, #92]	; 0x5c
   b987a:	f8df b230 	ldr.w	fp, [pc, #560]	; b9aac <_strtod_l+0x5ac>
   b987e:	f04f 0a00 	mov.w	sl, #0
   b9882:	e681      	b.n	b9588 <_strtod_l+0x88>
   b9884:	4886      	ldr	r0, [pc, #536]	; (b9aa0 <_strtod_l+0x5a0>)
   b9886:	f001 fde3 	bl	bb450 <nan>
   b988a:	ec5b ab10 	vmov	sl, fp, d0
   b988e:	e67b      	b.n	b9588 <_strtod_l+0x88>
   b9890:	9b05      	ldr	r3, [sp, #20]
   b9892:	9807      	ldr	r0, [sp, #28]
   b9894:	1af3      	subs	r3, r6, r3
   b9896:	2f00      	cmp	r7, #0
   b9898:	bf08      	it	eq
   b989a:	462f      	moveq	r7, r5
   b989c:	2d10      	cmp	r5, #16
   b989e:	9306      	str	r3, [sp, #24]
   b98a0:	46a8      	mov	r8, r5
   b98a2:	bfa8      	it	ge
   b98a4:	f04f 0810 	movge.w	r8, #16
   b98a8:	f7fa fcfc 	bl	b42a4 <__aeabi_ui2d>
   b98ac:	2d09      	cmp	r5, #9
   b98ae:	4682      	mov	sl, r0
   b98b0:	468b      	mov	fp, r1
   b98b2:	dd13      	ble.n	b98dc <_strtod_l+0x3dc>
   b98b4:	4b7b      	ldr	r3, [pc, #492]	; (b9aa4 <_strtod_l+0x5a4>)
   b98b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b98ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b98be:	f7fa fd6b 	bl	b4398 <__aeabi_dmul>
   b98c2:	4682      	mov	sl, r0
   b98c4:	4648      	mov	r0, r9
   b98c6:	468b      	mov	fp, r1
   b98c8:	f7fa fcec 	bl	b42a4 <__aeabi_ui2d>
   b98cc:	4602      	mov	r2, r0
   b98ce:	460b      	mov	r3, r1
   b98d0:	4650      	mov	r0, sl
   b98d2:	4659      	mov	r1, fp
   b98d4:	f7fa fbaa 	bl	b402c <__adddf3>
   b98d8:	4682      	mov	sl, r0
   b98da:	468b      	mov	fp, r1
   b98dc:	2d0f      	cmp	r5, #15
   b98de:	dc38      	bgt.n	b9952 <_strtod_l+0x452>
   b98e0:	9b06      	ldr	r3, [sp, #24]
   b98e2:	2b00      	cmp	r3, #0
   b98e4:	f43f ae50 	beq.w	b9588 <_strtod_l+0x88>
   b98e8:	dd24      	ble.n	b9934 <_strtod_l+0x434>
   b98ea:	2b16      	cmp	r3, #22
   b98ec:	dc0b      	bgt.n	b9906 <_strtod_l+0x406>
   b98ee:	496d      	ldr	r1, [pc, #436]	; (b9aa4 <_strtod_l+0x5a4>)
   b98f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b98f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b98f8:	4652      	mov	r2, sl
   b98fa:	465b      	mov	r3, fp
   b98fc:	f7fa fd4c 	bl	b4398 <__aeabi_dmul>
   b9900:	4682      	mov	sl, r0
   b9902:	468b      	mov	fp, r1
   b9904:	e640      	b.n	b9588 <_strtod_l+0x88>
   b9906:	9a06      	ldr	r2, [sp, #24]
   b9908:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b990c:	4293      	cmp	r3, r2
   b990e:	db20      	blt.n	b9952 <_strtod_l+0x452>
   b9910:	4c64      	ldr	r4, [pc, #400]	; (b9aa4 <_strtod_l+0x5a4>)
   b9912:	f1c5 050f 	rsb	r5, r5, #15
   b9916:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b991a:	4652      	mov	r2, sl
   b991c:	465b      	mov	r3, fp
   b991e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9922:	f7fa fd39 	bl	b4398 <__aeabi_dmul>
   b9926:	9b06      	ldr	r3, [sp, #24]
   b9928:	1b5d      	subs	r5, r3, r5
   b992a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b992e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9932:	e7e3      	b.n	b98fc <_strtod_l+0x3fc>
   b9934:	9b06      	ldr	r3, [sp, #24]
   b9936:	3316      	adds	r3, #22
   b9938:	db0b      	blt.n	b9952 <_strtod_l+0x452>
   b993a:	9b05      	ldr	r3, [sp, #20]
   b993c:	1b9e      	subs	r6, r3, r6
   b993e:	4b59      	ldr	r3, [pc, #356]	; (b9aa4 <_strtod_l+0x5a4>)
   b9940:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9944:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9948:	4650      	mov	r0, sl
   b994a:	4659      	mov	r1, fp
   b994c:	f7fa fe4e 	bl	b45ec <__aeabi_ddiv>
   b9950:	e7d6      	b.n	b9900 <_strtod_l+0x400>
   b9952:	9b06      	ldr	r3, [sp, #24]
   b9954:	eba5 0808 	sub.w	r8, r5, r8
   b9958:	4498      	add	r8, r3
   b995a:	f1b8 0f00 	cmp.w	r8, #0
   b995e:	dd74      	ble.n	b9a4a <_strtod_l+0x54a>
   b9960:	f018 030f 	ands.w	r3, r8, #15
   b9964:	d00a      	beq.n	b997c <_strtod_l+0x47c>
   b9966:	494f      	ldr	r1, [pc, #316]	; (b9aa4 <_strtod_l+0x5a4>)
   b9968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b996c:	4652      	mov	r2, sl
   b996e:	465b      	mov	r3, fp
   b9970:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9974:	f7fa fd10 	bl	b4398 <__aeabi_dmul>
   b9978:	4682      	mov	sl, r0
   b997a:	468b      	mov	fp, r1
   b997c:	f038 080f 	bics.w	r8, r8, #15
   b9980:	d04f      	beq.n	b9a22 <_strtod_l+0x522>
   b9982:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9986:	dd22      	ble.n	b99ce <_strtod_l+0x4ce>
   b9988:	2500      	movs	r5, #0
   b998a:	462e      	mov	r6, r5
   b998c:	9507      	str	r5, [sp, #28]
   b998e:	9505      	str	r5, [sp, #20]
   b9990:	2322      	movs	r3, #34	; 0x22
   b9992:	f8df b118 	ldr.w	fp, [pc, #280]	; b9aac <_strtod_l+0x5ac>
   b9996:	6023      	str	r3, [r4, #0]
   b9998:	f04f 0a00 	mov.w	sl, #0
   b999c:	9b07      	ldr	r3, [sp, #28]
   b999e:	2b00      	cmp	r3, #0
   b99a0:	f43f adf2 	beq.w	b9588 <_strtod_l+0x88>
   b99a4:	9918      	ldr	r1, [sp, #96]	; 0x60
   b99a6:	4620      	mov	r0, r4
   b99a8:	f001 f8c0 	bl	bab2c <_Bfree>
   b99ac:	9905      	ldr	r1, [sp, #20]
   b99ae:	4620      	mov	r0, r4
   b99b0:	f001 f8bc 	bl	bab2c <_Bfree>
   b99b4:	4631      	mov	r1, r6
   b99b6:	4620      	mov	r0, r4
   b99b8:	f001 f8b8 	bl	bab2c <_Bfree>
   b99bc:	9907      	ldr	r1, [sp, #28]
   b99be:	4620      	mov	r0, r4
   b99c0:	f001 f8b4 	bl	bab2c <_Bfree>
   b99c4:	4629      	mov	r1, r5
   b99c6:	4620      	mov	r0, r4
   b99c8:	f001 f8b0 	bl	bab2c <_Bfree>
   b99cc:	e5dc      	b.n	b9588 <_strtod_l+0x88>
   b99ce:	4b36      	ldr	r3, [pc, #216]	; (b9aa8 <_strtod_l+0x5a8>)
   b99d0:	9304      	str	r3, [sp, #16]
   b99d2:	2300      	movs	r3, #0
   b99d4:	ea4f 1828 	mov.w	r8, r8, asr #4
   b99d8:	4650      	mov	r0, sl
   b99da:	4659      	mov	r1, fp
   b99dc:	4699      	mov	r9, r3
   b99de:	f1b8 0f01 	cmp.w	r8, #1
   b99e2:	dc21      	bgt.n	b9a28 <_strtod_l+0x528>
   b99e4:	b10b      	cbz	r3, b99ea <_strtod_l+0x4ea>
   b99e6:	4682      	mov	sl, r0
   b99e8:	468b      	mov	fp, r1
   b99ea:	4b2f      	ldr	r3, [pc, #188]	; (b9aa8 <_strtod_l+0x5a8>)
   b99ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b99f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b99f4:	4652      	mov	r2, sl
   b99f6:	465b      	mov	r3, fp
   b99f8:	e9d9 0100 	ldrd	r0, r1, [r9]
   b99fc:	f7fa fccc 	bl	b4398 <__aeabi_dmul>
   b9a00:	4b2a      	ldr	r3, [pc, #168]	; (b9aac <_strtod_l+0x5ac>)
   b9a02:	460a      	mov	r2, r1
   b9a04:	400b      	ands	r3, r1
   b9a06:	492a      	ldr	r1, [pc, #168]	; (b9ab0 <_strtod_l+0x5b0>)
   b9a08:	428b      	cmp	r3, r1
   b9a0a:	4682      	mov	sl, r0
   b9a0c:	d8bc      	bhi.n	b9988 <_strtod_l+0x488>
   b9a0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9a12:	428b      	cmp	r3, r1
   b9a14:	bf86      	itte	hi
   b9a16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9ab4 <_strtod_l+0x5b4>
   b9a1a:	f04f 3aff 	movhi.w	sl, #4294967295
   b9a1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9a22:	2300      	movs	r3, #0
   b9a24:	9304      	str	r3, [sp, #16]
   b9a26:	e084      	b.n	b9b32 <_strtod_l+0x632>
   b9a28:	f018 0f01 	tst.w	r8, #1
   b9a2c:	d005      	beq.n	b9a3a <_strtod_l+0x53a>
   b9a2e:	9b04      	ldr	r3, [sp, #16]
   b9a30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a34:	f7fa fcb0 	bl	b4398 <__aeabi_dmul>
   b9a38:	2301      	movs	r3, #1
   b9a3a:	9a04      	ldr	r2, [sp, #16]
   b9a3c:	3208      	adds	r2, #8
   b9a3e:	f109 0901 	add.w	r9, r9, #1
   b9a42:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9a46:	9204      	str	r2, [sp, #16]
   b9a48:	e7c9      	b.n	b99de <_strtod_l+0x4de>
   b9a4a:	d0ea      	beq.n	b9a22 <_strtod_l+0x522>
   b9a4c:	f1c8 0800 	rsb	r8, r8, #0
   b9a50:	f018 020f 	ands.w	r2, r8, #15
   b9a54:	d00a      	beq.n	b9a6c <_strtod_l+0x56c>
   b9a56:	4b13      	ldr	r3, [pc, #76]	; (b9aa4 <_strtod_l+0x5a4>)
   b9a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9a5c:	4650      	mov	r0, sl
   b9a5e:	4659      	mov	r1, fp
   b9a60:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a64:	f7fa fdc2 	bl	b45ec <__aeabi_ddiv>
   b9a68:	4682      	mov	sl, r0
   b9a6a:	468b      	mov	fp, r1
   b9a6c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9a70:	d0d7      	beq.n	b9a22 <_strtod_l+0x522>
   b9a72:	f1b8 0f1f 	cmp.w	r8, #31
   b9a76:	dd1f      	ble.n	b9ab8 <_strtod_l+0x5b8>
   b9a78:	2500      	movs	r5, #0
   b9a7a:	462e      	mov	r6, r5
   b9a7c:	9507      	str	r5, [sp, #28]
   b9a7e:	9505      	str	r5, [sp, #20]
   b9a80:	2322      	movs	r3, #34	; 0x22
   b9a82:	f04f 0a00 	mov.w	sl, #0
   b9a86:	f04f 0b00 	mov.w	fp, #0
   b9a8a:	6023      	str	r3, [r4, #0]
   b9a8c:	e786      	b.n	b999c <_strtod_l+0x49c>
   b9a8e:	bf00      	nop
   b9a90:	000bbd7f 	.word	0x000bbd7f
   b9a94:	000bbd98 	.word	0x000bbd98
   b9a98:	000bbd76 	.word	0x000bbd76
   b9a9c:	000bbd79 	.word	0x000bbd79
   b9aa0:	000bbca8 	.word	0x000bbca8
   b9aa4:	000bc030 	.word	0x000bc030
   b9aa8:	000bc008 	.word	0x000bc008
   b9aac:	7ff00000 	.word	0x7ff00000
   b9ab0:	7ca00000 	.word	0x7ca00000
   b9ab4:	7fefffff 	.word	0x7fefffff
   b9ab8:	f018 0310 	ands.w	r3, r8, #16
   b9abc:	bf18      	it	ne
   b9abe:	236a      	movne	r3, #106	; 0x6a
   b9ac0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9e70 <_strtod_l+0x970>
   b9ac4:	9304      	str	r3, [sp, #16]
   b9ac6:	4650      	mov	r0, sl
   b9ac8:	4659      	mov	r1, fp
   b9aca:	2300      	movs	r3, #0
   b9acc:	f018 0f01 	tst.w	r8, #1
   b9ad0:	d004      	beq.n	b9adc <_strtod_l+0x5dc>
   b9ad2:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9ad6:	f7fa fc5f 	bl	b4398 <__aeabi_dmul>
   b9ada:	2301      	movs	r3, #1
   b9adc:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9ae0:	f109 0908 	add.w	r9, r9, #8
   b9ae4:	d1f2      	bne.n	b9acc <_strtod_l+0x5cc>
   b9ae6:	b10b      	cbz	r3, b9aec <_strtod_l+0x5ec>
   b9ae8:	4682      	mov	sl, r0
   b9aea:	468b      	mov	fp, r1
   b9aec:	9b04      	ldr	r3, [sp, #16]
   b9aee:	b1c3      	cbz	r3, b9b22 <_strtod_l+0x622>
   b9af0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9af4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9af8:	2b00      	cmp	r3, #0
   b9afa:	4659      	mov	r1, fp
   b9afc:	dd11      	ble.n	b9b22 <_strtod_l+0x622>
   b9afe:	2b1f      	cmp	r3, #31
   b9b00:	f340 8124 	ble.w	b9d4c <_strtod_l+0x84c>
   b9b04:	2b34      	cmp	r3, #52	; 0x34
   b9b06:	bfde      	ittt	le
   b9b08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9b0c:	f04f 33ff 	movle.w	r3, #4294967295
   b9b10:	fa03 f202 	lslle.w	r2, r3, r2
   b9b14:	f04f 0a00 	mov.w	sl, #0
   b9b18:	bfcc      	ite	gt
   b9b1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9b1e:	ea02 0b01 	andle.w	fp, r2, r1
   b9b22:	2200      	movs	r2, #0
   b9b24:	2300      	movs	r3, #0
   b9b26:	4650      	mov	r0, sl
   b9b28:	4659      	mov	r1, fp
   b9b2a:	f7fa fe9d 	bl	b4868 <__aeabi_dcmpeq>
   b9b2e:	2800      	cmp	r0, #0
   b9b30:	d1a2      	bne.n	b9a78 <_strtod_l+0x578>
   b9b32:	9b07      	ldr	r3, [sp, #28]
   b9b34:	9300      	str	r3, [sp, #0]
   b9b36:	9908      	ldr	r1, [sp, #32]
   b9b38:	462b      	mov	r3, r5
   b9b3a:	463a      	mov	r2, r7
   b9b3c:	4620      	mov	r0, r4
   b9b3e:	f001 f85d 	bl	babfc <__s2b>
   b9b42:	9007      	str	r0, [sp, #28]
   b9b44:	2800      	cmp	r0, #0
   b9b46:	f43f af1f 	beq.w	b9988 <_strtod_l+0x488>
   b9b4a:	9b05      	ldr	r3, [sp, #20]
   b9b4c:	1b9e      	subs	r6, r3, r6
   b9b4e:	9b06      	ldr	r3, [sp, #24]
   b9b50:	2b00      	cmp	r3, #0
   b9b52:	bfb4      	ite	lt
   b9b54:	4633      	movlt	r3, r6
   b9b56:	2300      	movge	r3, #0
   b9b58:	930c      	str	r3, [sp, #48]	; 0x30
   b9b5a:	9b06      	ldr	r3, [sp, #24]
   b9b5c:	2500      	movs	r5, #0
   b9b5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9b62:	9312      	str	r3, [sp, #72]	; 0x48
   b9b64:	462e      	mov	r6, r5
   b9b66:	9b07      	ldr	r3, [sp, #28]
   b9b68:	4620      	mov	r0, r4
   b9b6a:	6859      	ldr	r1, [r3, #4]
   b9b6c:	f000 ff9e 	bl	baaac <_Balloc>
   b9b70:	9005      	str	r0, [sp, #20]
   b9b72:	2800      	cmp	r0, #0
   b9b74:	f43f af0c 	beq.w	b9990 <_strtod_l+0x490>
   b9b78:	9b07      	ldr	r3, [sp, #28]
   b9b7a:	691a      	ldr	r2, [r3, #16]
   b9b7c:	3202      	adds	r2, #2
   b9b7e:	f103 010c 	add.w	r1, r3, #12
   b9b82:	0092      	lsls	r2, r2, #2
   b9b84:	300c      	adds	r0, #12
   b9b86:	f7ff fbf9 	bl	b937c <memcpy>
   b9b8a:	ec4b ab10 	vmov	d0, sl, fp
   b9b8e:	aa1a      	add	r2, sp, #104	; 0x68
   b9b90:	a919      	add	r1, sp, #100	; 0x64
   b9b92:	4620      	mov	r0, r4
   b9b94:	f001 fb78 	bl	bb288 <__d2b>
   b9b98:	ec4b ab18 	vmov	d8, sl, fp
   b9b9c:	9018      	str	r0, [sp, #96]	; 0x60
   b9b9e:	2800      	cmp	r0, #0
   b9ba0:	f43f aef6 	beq.w	b9990 <_strtod_l+0x490>
   b9ba4:	2101      	movs	r1, #1
   b9ba6:	4620      	mov	r0, r4
   b9ba8:	f001 f8c2 	bl	bad30 <__i2b>
   b9bac:	4606      	mov	r6, r0
   b9bae:	2800      	cmp	r0, #0
   b9bb0:	f43f aeee 	beq.w	b9990 <_strtod_l+0x490>
   b9bb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9bb6:	9904      	ldr	r1, [sp, #16]
   b9bb8:	2b00      	cmp	r3, #0
   b9bba:	bfab      	itete	ge
   b9bbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9bbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9bc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9bc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9bc6:	bfac      	ite	ge
   b9bc8:	eb03 0902 	addge.w	r9, r3, r2
   b9bcc:	1ad7      	sublt	r7, r2, r3
   b9bce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9bd0:	eba3 0801 	sub.w	r8, r3, r1
   b9bd4:	4490      	add	r8, r2
   b9bd6:	4ba1      	ldr	r3, [pc, #644]	; (b9e5c <_strtod_l+0x95c>)
   b9bd8:	f108 38ff 	add.w	r8, r8, #4294967295
   b9bdc:	4598      	cmp	r8, r3
   b9bde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9be2:	f280 80c7 	bge.w	b9d74 <_strtod_l+0x874>
   b9be6:	eba3 0308 	sub.w	r3, r3, r8
   b9bea:	2b1f      	cmp	r3, #31
   b9bec:	eba2 0203 	sub.w	r2, r2, r3
   b9bf0:	f04f 0101 	mov.w	r1, #1
   b9bf4:	f300 80b1 	bgt.w	b9d5a <_strtod_l+0x85a>
   b9bf8:	fa01 f303 	lsl.w	r3, r1, r3
   b9bfc:	930d      	str	r3, [sp, #52]	; 0x34
   b9bfe:	2300      	movs	r3, #0
   b9c00:	9308      	str	r3, [sp, #32]
   b9c02:	eb09 0802 	add.w	r8, r9, r2
   b9c06:	9b04      	ldr	r3, [sp, #16]
   b9c08:	45c1      	cmp	r9, r8
   b9c0a:	4417      	add	r7, r2
   b9c0c:	441f      	add	r7, r3
   b9c0e:	464b      	mov	r3, r9
   b9c10:	bfa8      	it	ge
   b9c12:	4643      	movge	r3, r8
   b9c14:	42bb      	cmp	r3, r7
   b9c16:	bfa8      	it	ge
   b9c18:	463b      	movge	r3, r7
   b9c1a:	2b00      	cmp	r3, #0
   b9c1c:	bfc2      	ittt	gt
   b9c1e:	eba8 0803 	subgt.w	r8, r8, r3
   b9c22:	1aff      	subgt	r7, r7, r3
   b9c24:	eba9 0903 	subgt.w	r9, r9, r3
   b9c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9c2a:	2b00      	cmp	r3, #0
   b9c2c:	dd17      	ble.n	b9c5e <_strtod_l+0x75e>
   b9c2e:	4631      	mov	r1, r6
   b9c30:	461a      	mov	r2, r3
   b9c32:	4620      	mov	r0, r4
   b9c34:	f001 f93c 	bl	baeb0 <__pow5mult>
   b9c38:	4606      	mov	r6, r0
   b9c3a:	2800      	cmp	r0, #0
   b9c3c:	f43f aea8 	beq.w	b9990 <_strtod_l+0x490>
   b9c40:	4601      	mov	r1, r0
   b9c42:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9c44:	4620      	mov	r0, r4
   b9c46:	f001 f889 	bl	bad5c <__multiply>
   b9c4a:	900b      	str	r0, [sp, #44]	; 0x2c
   b9c4c:	2800      	cmp	r0, #0
   b9c4e:	f43f ae9f 	beq.w	b9990 <_strtod_l+0x490>
   b9c52:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9c54:	4620      	mov	r0, r4
   b9c56:	f000 ff69 	bl	bab2c <_Bfree>
   b9c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9c5c:	9318      	str	r3, [sp, #96]	; 0x60
   b9c5e:	f1b8 0f00 	cmp.w	r8, #0
   b9c62:	f300 808c 	bgt.w	b9d7e <_strtod_l+0x87e>
   b9c66:	9b06      	ldr	r3, [sp, #24]
   b9c68:	2b00      	cmp	r3, #0
   b9c6a:	dd08      	ble.n	b9c7e <_strtod_l+0x77e>
   b9c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9c6e:	9905      	ldr	r1, [sp, #20]
   b9c70:	4620      	mov	r0, r4
   b9c72:	f001 f91d 	bl	baeb0 <__pow5mult>
   b9c76:	9005      	str	r0, [sp, #20]
   b9c78:	2800      	cmp	r0, #0
   b9c7a:	f43f ae89 	beq.w	b9990 <_strtod_l+0x490>
   b9c7e:	2f00      	cmp	r7, #0
   b9c80:	dd08      	ble.n	b9c94 <_strtod_l+0x794>
   b9c82:	9905      	ldr	r1, [sp, #20]
   b9c84:	463a      	mov	r2, r7
   b9c86:	4620      	mov	r0, r4
   b9c88:	f001 f96c 	bl	baf64 <__lshift>
   b9c8c:	9005      	str	r0, [sp, #20]
   b9c8e:	2800      	cmp	r0, #0
   b9c90:	f43f ae7e 	beq.w	b9990 <_strtod_l+0x490>
   b9c94:	f1b9 0f00 	cmp.w	r9, #0
   b9c98:	dd08      	ble.n	b9cac <_strtod_l+0x7ac>
   b9c9a:	4631      	mov	r1, r6
   b9c9c:	464a      	mov	r2, r9
   b9c9e:	4620      	mov	r0, r4
   b9ca0:	f001 f960 	bl	baf64 <__lshift>
   b9ca4:	4606      	mov	r6, r0
   b9ca6:	2800      	cmp	r0, #0
   b9ca8:	f43f ae72 	beq.w	b9990 <_strtod_l+0x490>
   b9cac:	9a05      	ldr	r2, [sp, #20]
   b9cae:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9cb0:	4620      	mov	r0, r4
   b9cb2:	f001 f9e3 	bl	bb07c <__mdiff>
   b9cb6:	4605      	mov	r5, r0
   b9cb8:	2800      	cmp	r0, #0
   b9cba:	f43f ae69 	beq.w	b9990 <_strtod_l+0x490>
   b9cbe:	68c3      	ldr	r3, [r0, #12]
   b9cc0:	930b      	str	r3, [sp, #44]	; 0x2c
   b9cc2:	2300      	movs	r3, #0
   b9cc4:	60c3      	str	r3, [r0, #12]
   b9cc6:	4631      	mov	r1, r6
   b9cc8:	f001 f9bc 	bl	bb044 <__mcmp>
   b9ccc:	2800      	cmp	r0, #0
   b9cce:	da60      	bge.n	b9d92 <_strtod_l+0x892>
   b9cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9cd2:	ea53 030a 	orrs.w	r3, r3, sl
   b9cd6:	f040 8082 	bne.w	b9dde <_strtod_l+0x8de>
   b9cda:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9cde:	2b00      	cmp	r3, #0
   b9ce0:	d17d      	bne.n	b9dde <_strtod_l+0x8de>
   b9ce2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9ce6:	0d1b      	lsrs	r3, r3, #20
   b9ce8:	051b      	lsls	r3, r3, #20
   b9cea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9cee:	d976      	bls.n	b9dde <_strtod_l+0x8de>
   b9cf0:	696b      	ldr	r3, [r5, #20]
   b9cf2:	b913      	cbnz	r3, b9cfa <_strtod_l+0x7fa>
   b9cf4:	692b      	ldr	r3, [r5, #16]
   b9cf6:	2b01      	cmp	r3, #1
   b9cf8:	dd71      	ble.n	b9dde <_strtod_l+0x8de>
   b9cfa:	4629      	mov	r1, r5
   b9cfc:	2201      	movs	r2, #1
   b9cfe:	4620      	mov	r0, r4
   b9d00:	f001 f930 	bl	baf64 <__lshift>
   b9d04:	4631      	mov	r1, r6
   b9d06:	4605      	mov	r5, r0
   b9d08:	f001 f99c 	bl	bb044 <__mcmp>
   b9d0c:	2800      	cmp	r0, #0
   b9d0e:	dd66      	ble.n	b9dde <_strtod_l+0x8de>
   b9d10:	9904      	ldr	r1, [sp, #16]
   b9d12:	4a53      	ldr	r2, [pc, #332]	; (b9e60 <_strtod_l+0x960>)
   b9d14:	465b      	mov	r3, fp
   b9d16:	2900      	cmp	r1, #0
   b9d18:	f000 8081 	beq.w	b9e1e <_strtod_l+0x91e>
   b9d1c:	ea02 010b 	and.w	r1, r2, fp
   b9d20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b9d24:	dc7b      	bgt.n	b9e1e <_strtod_l+0x91e>
   b9d26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b9d2a:	f77f aea9 	ble.w	b9a80 <_strtod_l+0x580>
   b9d2e:	4b4d      	ldr	r3, [pc, #308]	; (b9e64 <_strtod_l+0x964>)
   b9d30:	4650      	mov	r0, sl
   b9d32:	4659      	mov	r1, fp
   b9d34:	2200      	movs	r2, #0
   b9d36:	f7fa fb2f 	bl	b4398 <__aeabi_dmul>
   b9d3a:	460b      	mov	r3, r1
   b9d3c:	4303      	orrs	r3, r0
   b9d3e:	bf08      	it	eq
   b9d40:	2322      	moveq	r3, #34	; 0x22
   b9d42:	4682      	mov	sl, r0
   b9d44:	468b      	mov	fp, r1
   b9d46:	bf08      	it	eq
   b9d48:	6023      	streq	r3, [r4, #0]
   b9d4a:	e62b      	b.n	b99a4 <_strtod_l+0x4a4>
   b9d4c:	f04f 32ff 	mov.w	r2, #4294967295
   b9d50:	fa02 f303 	lsl.w	r3, r2, r3
   b9d54:	ea03 0a0a 	and.w	sl, r3, sl
   b9d58:	e6e3      	b.n	b9b22 <_strtod_l+0x622>
   b9d5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b9d5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b9d62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b9d66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b9d6a:	fa01 f308 	lsl.w	r3, r1, r8
   b9d6e:	9308      	str	r3, [sp, #32]
   b9d70:	910d      	str	r1, [sp, #52]	; 0x34
   b9d72:	e746      	b.n	b9c02 <_strtod_l+0x702>
   b9d74:	2300      	movs	r3, #0
   b9d76:	9308      	str	r3, [sp, #32]
   b9d78:	2301      	movs	r3, #1
   b9d7a:	930d      	str	r3, [sp, #52]	; 0x34
   b9d7c:	e741      	b.n	b9c02 <_strtod_l+0x702>
   b9d7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d80:	4642      	mov	r2, r8
   b9d82:	4620      	mov	r0, r4
   b9d84:	f001 f8ee 	bl	baf64 <__lshift>
   b9d88:	9018      	str	r0, [sp, #96]	; 0x60
   b9d8a:	2800      	cmp	r0, #0
   b9d8c:	f47f af6b 	bne.w	b9c66 <_strtod_l+0x766>
   b9d90:	e5fe      	b.n	b9990 <_strtod_l+0x490>
   b9d92:	465f      	mov	r7, fp
   b9d94:	d16e      	bne.n	b9e74 <_strtod_l+0x974>
   b9d96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9d98:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9d9c:	b342      	cbz	r2, b9df0 <_strtod_l+0x8f0>
   b9d9e:	4a32      	ldr	r2, [pc, #200]	; (b9e68 <_strtod_l+0x968>)
   b9da0:	4293      	cmp	r3, r2
   b9da2:	d128      	bne.n	b9df6 <_strtod_l+0x8f6>
   b9da4:	9b04      	ldr	r3, [sp, #16]
   b9da6:	4651      	mov	r1, sl
   b9da8:	b1eb      	cbz	r3, b9de6 <_strtod_l+0x8e6>
   b9daa:	4b2d      	ldr	r3, [pc, #180]	; (b9e60 <_strtod_l+0x960>)
   b9dac:	403b      	ands	r3, r7
   b9dae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9db2:	f04f 32ff 	mov.w	r2, #4294967295
   b9db6:	d819      	bhi.n	b9dec <_strtod_l+0x8ec>
   b9db8:	0d1b      	lsrs	r3, r3, #20
   b9dba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9dbe:	fa02 f303 	lsl.w	r3, r2, r3
   b9dc2:	4299      	cmp	r1, r3
   b9dc4:	d117      	bne.n	b9df6 <_strtod_l+0x8f6>
   b9dc6:	4b29      	ldr	r3, [pc, #164]	; (b9e6c <_strtod_l+0x96c>)
   b9dc8:	429f      	cmp	r7, r3
   b9dca:	d102      	bne.n	b9dd2 <_strtod_l+0x8d2>
   b9dcc:	3101      	adds	r1, #1
   b9dce:	f43f addf 	beq.w	b9990 <_strtod_l+0x490>
   b9dd2:	4b23      	ldr	r3, [pc, #140]	; (b9e60 <_strtod_l+0x960>)
   b9dd4:	403b      	ands	r3, r7
   b9dd6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9dda:	f04f 0a00 	mov.w	sl, #0
   b9dde:	9b04      	ldr	r3, [sp, #16]
   b9de0:	2b00      	cmp	r3, #0
   b9de2:	d1a4      	bne.n	b9d2e <_strtod_l+0x82e>
   b9de4:	e5de      	b.n	b99a4 <_strtod_l+0x4a4>
   b9de6:	f04f 33ff 	mov.w	r3, #4294967295
   b9dea:	e7ea      	b.n	b9dc2 <_strtod_l+0x8c2>
   b9dec:	4613      	mov	r3, r2
   b9dee:	e7e8      	b.n	b9dc2 <_strtod_l+0x8c2>
   b9df0:	ea53 030a 	orrs.w	r3, r3, sl
   b9df4:	d08c      	beq.n	b9d10 <_strtod_l+0x810>
   b9df6:	9b08      	ldr	r3, [sp, #32]
   b9df8:	b1db      	cbz	r3, b9e32 <_strtod_l+0x932>
   b9dfa:	423b      	tst	r3, r7
   b9dfc:	d0ef      	beq.n	b9dde <_strtod_l+0x8de>
   b9dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9e00:	9a04      	ldr	r2, [sp, #16]
   b9e02:	4650      	mov	r0, sl
   b9e04:	4659      	mov	r1, fp
   b9e06:	b1c3      	cbz	r3, b9e3a <_strtod_l+0x93a>
   b9e08:	f7ff fb5b 	bl	b94c2 <sulp>
   b9e0c:	4602      	mov	r2, r0
   b9e0e:	460b      	mov	r3, r1
   b9e10:	ec51 0b18 	vmov	r0, r1, d8
   b9e14:	f7fa f90a 	bl	b402c <__adddf3>
   b9e18:	4682      	mov	sl, r0
   b9e1a:	468b      	mov	fp, r1
   b9e1c:	e7df      	b.n	b9dde <_strtod_l+0x8de>
   b9e1e:	4013      	ands	r3, r2
   b9e20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9e24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9e28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9e2c:	f04f 3aff 	mov.w	sl, #4294967295
   b9e30:	e7d5      	b.n	b9dde <_strtod_l+0x8de>
   b9e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9e34:	ea13 0f0a 	tst.w	r3, sl
   b9e38:	e7e0      	b.n	b9dfc <_strtod_l+0x8fc>
   b9e3a:	f7ff fb42 	bl	b94c2 <sulp>
   b9e3e:	4602      	mov	r2, r0
   b9e40:	460b      	mov	r3, r1
   b9e42:	ec51 0b18 	vmov	r0, r1, d8
   b9e46:	f7fa f8ef 	bl	b4028 <__aeabi_dsub>
   b9e4a:	2200      	movs	r2, #0
   b9e4c:	2300      	movs	r3, #0
   b9e4e:	4682      	mov	sl, r0
   b9e50:	468b      	mov	fp, r1
   b9e52:	f7fa fd09 	bl	b4868 <__aeabi_dcmpeq>
   b9e56:	2800      	cmp	r0, #0
   b9e58:	d0c1      	beq.n	b9dde <_strtod_l+0x8de>
   b9e5a:	e611      	b.n	b9a80 <_strtod_l+0x580>
   b9e5c:	fffffc02 	.word	0xfffffc02
   b9e60:	7ff00000 	.word	0x7ff00000
   b9e64:	39500000 	.word	0x39500000
   b9e68:	000fffff 	.word	0x000fffff
   b9e6c:	7fefffff 	.word	0x7fefffff
   b9e70:	000bbdb0 	.word	0x000bbdb0
   b9e74:	4631      	mov	r1, r6
   b9e76:	4628      	mov	r0, r5
   b9e78:	f001 fa62 	bl	bb340 <__ratio>
   b9e7c:	ec59 8b10 	vmov	r8, r9, d0
   b9e80:	ee10 0a10 	vmov	r0, s0
   b9e84:	2200      	movs	r2, #0
   b9e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9e8a:	4649      	mov	r1, r9
   b9e8c:	f7fa fd00 	bl	b4890 <__aeabi_dcmple>
   b9e90:	2800      	cmp	r0, #0
   b9e92:	d07a      	beq.n	b9f8a <_strtod_l+0xa8a>
   b9e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9e96:	2b00      	cmp	r3, #0
   b9e98:	d04a      	beq.n	b9f30 <_strtod_l+0xa30>
   b9e9a:	4b95      	ldr	r3, [pc, #596]	; (ba0f0 <_strtod_l+0xbf0>)
   b9e9c:	2200      	movs	r2, #0
   b9e9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9ea2:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba0f0 <_strtod_l+0xbf0>
   b9ea6:	f04f 0800 	mov.w	r8, #0
   b9eaa:	4b92      	ldr	r3, [pc, #584]	; (ba0f4 <_strtod_l+0xbf4>)
   b9eac:	403b      	ands	r3, r7
   b9eae:	930d      	str	r3, [sp, #52]	; 0x34
   b9eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9eb2:	4b91      	ldr	r3, [pc, #580]	; (ba0f8 <_strtod_l+0xbf8>)
   b9eb4:	429a      	cmp	r2, r3
   b9eb6:	f040 80b0 	bne.w	ba01a <_strtod_l+0xb1a>
   b9eba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9ebe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9ec2:	ec4b ab10 	vmov	d0, sl, fp
   b9ec6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9eca:	f001 f961 	bl	bb190 <__ulp>
   b9ece:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9ed2:	ec53 2b10 	vmov	r2, r3, d0
   b9ed6:	f7fa fa5f 	bl	b4398 <__aeabi_dmul>
   b9eda:	4652      	mov	r2, sl
   b9edc:	465b      	mov	r3, fp
   b9ede:	f7fa f8a5 	bl	b402c <__adddf3>
   b9ee2:	460b      	mov	r3, r1
   b9ee4:	4983      	ldr	r1, [pc, #524]	; (ba0f4 <_strtod_l+0xbf4>)
   b9ee6:	4a85      	ldr	r2, [pc, #532]	; (ba0fc <_strtod_l+0xbfc>)
   b9ee8:	4019      	ands	r1, r3
   b9eea:	4291      	cmp	r1, r2
   b9eec:	4682      	mov	sl, r0
   b9eee:	d960      	bls.n	b9fb2 <_strtod_l+0xab2>
   b9ef0:	ee18 3a90 	vmov	r3, s17
   b9ef4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9ef8:	4293      	cmp	r3, r2
   b9efa:	d104      	bne.n	b9f06 <_strtod_l+0xa06>
   b9efc:	ee18 3a10 	vmov	r3, s16
   b9f00:	3301      	adds	r3, #1
   b9f02:	f43f ad45 	beq.w	b9990 <_strtod_l+0x490>
   b9f06:	f8df b200 	ldr.w	fp, [pc, #512]	; ba108 <_strtod_l+0xc08>
   b9f0a:	f04f 3aff 	mov.w	sl, #4294967295
   b9f0e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9f10:	4620      	mov	r0, r4
   b9f12:	f000 fe0b 	bl	bab2c <_Bfree>
   b9f16:	9905      	ldr	r1, [sp, #20]
   b9f18:	4620      	mov	r0, r4
   b9f1a:	f000 fe07 	bl	bab2c <_Bfree>
   b9f1e:	4631      	mov	r1, r6
   b9f20:	4620      	mov	r0, r4
   b9f22:	f000 fe03 	bl	bab2c <_Bfree>
   b9f26:	4629      	mov	r1, r5
   b9f28:	4620      	mov	r0, r4
   b9f2a:	f000 fdff 	bl	bab2c <_Bfree>
   b9f2e:	e61a      	b.n	b9b66 <_strtod_l+0x666>
   b9f30:	f1ba 0f00 	cmp.w	sl, #0
   b9f34:	d11b      	bne.n	b9f6e <_strtod_l+0xa6e>
   b9f36:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9f3a:	b9f3      	cbnz	r3, b9f7a <_strtod_l+0xa7a>
   b9f3c:	4b6c      	ldr	r3, [pc, #432]	; (ba0f0 <_strtod_l+0xbf0>)
   b9f3e:	2200      	movs	r2, #0
   b9f40:	4640      	mov	r0, r8
   b9f42:	4649      	mov	r1, r9
   b9f44:	f7fa fc9a 	bl	b487c <__aeabi_dcmplt>
   b9f48:	b9d0      	cbnz	r0, b9f80 <_strtod_l+0xa80>
   b9f4a:	4640      	mov	r0, r8
   b9f4c:	4649      	mov	r1, r9
   b9f4e:	4b6c      	ldr	r3, [pc, #432]	; (ba100 <_strtod_l+0xc00>)
   b9f50:	2200      	movs	r2, #0
   b9f52:	f7fa fa21 	bl	b4398 <__aeabi_dmul>
   b9f56:	4680      	mov	r8, r0
   b9f58:	4689      	mov	r9, r1
   b9f5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b9f5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b9f62:	9315      	str	r3, [sp, #84]	; 0x54
   b9f64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9f68:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9f6c:	e79d      	b.n	b9eaa <_strtod_l+0x9aa>
   b9f6e:	f1ba 0f01 	cmp.w	sl, #1
   b9f72:	d102      	bne.n	b9f7a <_strtod_l+0xa7a>
   b9f74:	2f00      	cmp	r7, #0
   b9f76:	f43f ad83 	beq.w	b9a80 <_strtod_l+0x580>
   b9f7a:	4b62      	ldr	r3, [pc, #392]	; (ba104 <_strtod_l+0xc04>)
   b9f7c:	2200      	movs	r2, #0
   b9f7e:	e78e      	b.n	b9e9e <_strtod_l+0x99e>
   b9f80:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba100 <_strtod_l+0xc00>
   b9f84:	f04f 0800 	mov.w	r8, #0
   b9f88:	e7e7      	b.n	b9f5a <_strtod_l+0xa5a>
   b9f8a:	4b5d      	ldr	r3, [pc, #372]	; (ba100 <_strtod_l+0xc00>)
   b9f8c:	4640      	mov	r0, r8
   b9f8e:	4649      	mov	r1, r9
   b9f90:	2200      	movs	r2, #0
   b9f92:	f7fa fa01 	bl	b4398 <__aeabi_dmul>
   b9f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9f98:	4680      	mov	r8, r0
   b9f9a:	4689      	mov	r9, r1
   b9f9c:	b933      	cbnz	r3, b9fac <_strtod_l+0xaac>
   b9f9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9fa2:	900e      	str	r0, [sp, #56]	; 0x38
   b9fa4:	930f      	str	r3, [sp, #60]	; 0x3c
   b9fa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9faa:	e7dd      	b.n	b9f68 <_strtod_l+0xa68>
   b9fac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9fb0:	e7f9      	b.n	b9fa6 <_strtod_l+0xaa6>
   b9fb2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9fb6:	9b04      	ldr	r3, [sp, #16]
   b9fb8:	2b00      	cmp	r3, #0
   b9fba:	d1a8      	bne.n	b9f0e <_strtod_l+0xa0e>
   b9fbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9fc2:	0d1b      	lsrs	r3, r3, #20
   b9fc4:	051b      	lsls	r3, r3, #20
   b9fc6:	429a      	cmp	r2, r3
   b9fc8:	d1a1      	bne.n	b9f0e <_strtod_l+0xa0e>
   b9fca:	4640      	mov	r0, r8
   b9fcc:	4649      	mov	r1, r9
   b9fce:	f7fa fd89 	bl	b4ae4 <__aeabi_d2lz>
   b9fd2:	f7fa f9b3 	bl	b433c <__aeabi_l2d>
   b9fd6:	4602      	mov	r2, r0
   b9fd8:	460b      	mov	r3, r1
   b9fda:	4640      	mov	r0, r8
   b9fdc:	4649      	mov	r1, r9
   b9fde:	f7fa f823 	bl	b4028 <__aeabi_dsub>
   b9fe2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9fe4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9fe8:	ea43 030a 	orr.w	r3, r3, sl
   b9fec:	4313      	orrs	r3, r2
   b9fee:	4680      	mov	r8, r0
   b9ff0:	4689      	mov	r9, r1
   b9ff2:	d055      	beq.n	ba0a0 <_strtod_l+0xba0>
   b9ff4:	a336      	add	r3, pc, #216	; (adr r3, ba0d0 <_strtod_l+0xbd0>)
   b9ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ffa:	f7fa fc3f 	bl	b487c <__aeabi_dcmplt>
   b9ffe:	2800      	cmp	r0, #0
   ba000:	f47f acd0 	bne.w	b99a4 <_strtod_l+0x4a4>
   ba004:	a334      	add	r3, pc, #208	; (adr r3, ba0d8 <_strtod_l+0xbd8>)
   ba006:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba00a:	4640      	mov	r0, r8
   ba00c:	4649      	mov	r1, r9
   ba00e:	f7fa fc53 	bl	b48b8 <__aeabi_dcmpgt>
   ba012:	2800      	cmp	r0, #0
   ba014:	f43f af7b 	beq.w	b9f0e <_strtod_l+0xa0e>
   ba018:	e4c4      	b.n	b99a4 <_strtod_l+0x4a4>
   ba01a:	9b04      	ldr	r3, [sp, #16]
   ba01c:	b333      	cbz	r3, ba06c <_strtod_l+0xb6c>
   ba01e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba020:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba024:	d822      	bhi.n	ba06c <_strtod_l+0xb6c>
   ba026:	a32e      	add	r3, pc, #184	; (adr r3, ba0e0 <_strtod_l+0xbe0>)
   ba028:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba02c:	4640      	mov	r0, r8
   ba02e:	4649      	mov	r1, r9
   ba030:	f7fa fc2e 	bl	b4890 <__aeabi_dcmple>
   ba034:	b1a0      	cbz	r0, ba060 <_strtod_l+0xb60>
   ba036:	4649      	mov	r1, r9
   ba038:	4640      	mov	r0, r8
   ba03a:	f7fa fc5d 	bl	b48f8 <__aeabi_d2uiz>
   ba03e:	2801      	cmp	r0, #1
   ba040:	bf38      	it	cc
   ba042:	2001      	movcc	r0, #1
   ba044:	f7fa f92e 	bl	b42a4 <__aeabi_ui2d>
   ba048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba04a:	4680      	mov	r8, r0
   ba04c:	4689      	mov	r9, r1
   ba04e:	bb23      	cbnz	r3, ba09a <_strtod_l+0xb9a>
   ba050:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba054:	9010      	str	r0, [sp, #64]	; 0x40
   ba056:	9311      	str	r3, [sp, #68]	; 0x44
   ba058:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba05c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba060:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba062:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba064:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba068:	1a9b      	subs	r3, r3, r2
   ba06a:	9309      	str	r3, [sp, #36]	; 0x24
   ba06c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba070:	eeb0 0a48 	vmov.f32	s0, s16
   ba074:	eef0 0a68 	vmov.f32	s1, s17
   ba078:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba07c:	f001 f888 	bl	bb190 <__ulp>
   ba080:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba084:	ec53 2b10 	vmov	r2, r3, d0
   ba088:	f7fa f986 	bl	b4398 <__aeabi_dmul>
   ba08c:	ec53 2b18 	vmov	r2, r3, d8
   ba090:	f7f9 ffcc 	bl	b402c <__adddf3>
   ba094:	4682      	mov	sl, r0
   ba096:	468b      	mov	fp, r1
   ba098:	e78d      	b.n	b9fb6 <_strtod_l+0xab6>
   ba09a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba09e:	e7db      	b.n	ba058 <_strtod_l+0xb58>
   ba0a0:	a311      	add	r3, pc, #68	; (adr r3, ba0e8 <_strtod_l+0xbe8>)
   ba0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0a6:	f7fa fbe9 	bl	b487c <__aeabi_dcmplt>
   ba0aa:	e7b2      	b.n	ba012 <_strtod_l+0xb12>
   ba0ac:	2300      	movs	r3, #0
   ba0ae:	930a      	str	r3, [sp, #40]	; 0x28
   ba0b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba0b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba0b4:	6013      	str	r3, [r2, #0]
   ba0b6:	f7ff ba6b 	b.w	b9590 <_strtod_l+0x90>
   ba0ba:	2a65      	cmp	r2, #101	; 0x65
   ba0bc:	f43f ab5f 	beq.w	b977e <_strtod_l+0x27e>
   ba0c0:	2a45      	cmp	r2, #69	; 0x45
   ba0c2:	f43f ab5c 	beq.w	b977e <_strtod_l+0x27e>
   ba0c6:	2301      	movs	r3, #1
   ba0c8:	f7ff bb94 	b.w	b97f4 <_strtod_l+0x2f4>
   ba0cc:	f3af 8000 	nop.w
   ba0d0:	94a03595 	.word	0x94a03595
   ba0d4:	3fdfffff 	.word	0x3fdfffff
   ba0d8:	35afe535 	.word	0x35afe535
   ba0dc:	3fe00000 	.word	0x3fe00000
   ba0e0:	ffc00000 	.word	0xffc00000
   ba0e4:	41dfffff 	.word	0x41dfffff
   ba0e8:	94a03595 	.word	0x94a03595
   ba0ec:	3fcfffff 	.word	0x3fcfffff
   ba0f0:	3ff00000 	.word	0x3ff00000
   ba0f4:	7ff00000 	.word	0x7ff00000
   ba0f8:	7fe00000 	.word	0x7fe00000
   ba0fc:	7c9fffff 	.word	0x7c9fffff
   ba100:	3fe00000 	.word	0x3fe00000
   ba104:	bff00000 	.word	0xbff00000
   ba108:	7fefffff 	.word	0x7fefffff

000ba10c <strtof>:
   ba10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba110:	f8df 80ac 	ldr.w	r8, [pc, #172]	; ba1c0 <strtof+0xb4>
   ba114:	4b26      	ldr	r3, [pc, #152]	; (ba1b0 <strtof+0xa4>)
   ba116:	460a      	mov	r2, r1
   ba118:	ed2d 8b02 	vpush	{d8}
   ba11c:	4601      	mov	r1, r0
   ba11e:	f8d8 0000 	ldr.w	r0, [r8]
   ba122:	f7ff f9ed 	bl	b9500 <_strtod_l>
   ba126:	ec55 4b10 	vmov	r4, r5, d0
   ba12a:	ee10 2a10 	vmov	r2, s0
   ba12e:	ee10 0a10 	vmov	r0, s0
   ba132:	462b      	mov	r3, r5
   ba134:	4629      	mov	r1, r5
   ba136:	f7fa fbc9 	bl	b48cc <__aeabi_dcmpun>
   ba13a:	b190      	cbz	r0, ba162 <strtof+0x56>
   ba13c:	2d00      	cmp	r5, #0
   ba13e:	481d      	ldr	r0, [pc, #116]	; (ba1b4 <strtof+0xa8>)
   ba140:	da09      	bge.n	ba156 <strtof+0x4a>
   ba142:	f001 f98d 	bl	bb460 <nanf>
   ba146:	eeb1 8a40 	vneg.f32	s16, s0
   ba14a:	eeb0 0a48 	vmov.f32	s0, s16
   ba14e:	ecbd 8b02 	vpop	{d8}
   ba152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba156:	ecbd 8b02 	vpop	{d8}
   ba15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba15e:	f001 b97f 	b.w	bb460 <nanf>
   ba162:	4620      	mov	r0, r4
   ba164:	4629      	mov	r1, r5
   ba166:	f7fa fbe7 	bl	b4938 <__aeabi_d2f>
   ba16a:	ee08 0a10 	vmov	s16, r0
   ba16e:	eddf 7a12 	vldr	s15, [pc, #72]	; ba1b8 <strtof+0xac>
   ba172:	eeb0 7ac8 	vabs.f32	s14, s16
   ba176:	eeb4 7a67 	vcmp.f32	s14, s15
   ba17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba17e:	dde4      	ble.n	ba14a <strtof+0x3e>
   ba180:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   ba184:	4b0d      	ldr	r3, [pc, #52]	; (ba1bc <strtof+0xb0>)
   ba186:	f04f 32ff 	mov.w	r2, #4294967295
   ba18a:	4620      	mov	r0, r4
   ba18c:	4639      	mov	r1, r7
   ba18e:	f7fa fb9d 	bl	b48cc <__aeabi_dcmpun>
   ba192:	b940      	cbnz	r0, ba1a6 <strtof+0x9a>
   ba194:	4b09      	ldr	r3, [pc, #36]	; (ba1bc <strtof+0xb0>)
   ba196:	f04f 32ff 	mov.w	r2, #4294967295
   ba19a:	4620      	mov	r0, r4
   ba19c:	4639      	mov	r1, r7
   ba19e:	f7fa fb77 	bl	b4890 <__aeabi_dcmple>
   ba1a2:	2800      	cmp	r0, #0
   ba1a4:	d0d1      	beq.n	ba14a <strtof+0x3e>
   ba1a6:	f8d8 3000 	ldr.w	r3, [r8]
   ba1aa:	2222      	movs	r2, #34	; 0x22
   ba1ac:	601a      	str	r2, [r3, #0]
   ba1ae:	e7cc      	b.n	ba14a <strtof+0x3e>
   ba1b0:	2003e378 	.word	0x2003e378
   ba1b4:	000bbca8 	.word	0x000bbca8
   ba1b8:	7f7fffff 	.word	0x7f7fffff
   ba1bc:	7fefffff 	.word	0x7fefffff
   ba1c0:	2003e30c 	.word	0x2003e30c

000ba1c4 <_strtol_l.constprop.0>:
   ba1c4:	2b01      	cmp	r3, #1
   ba1c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba1ca:	d001      	beq.n	ba1d0 <_strtol_l.constprop.0+0xc>
   ba1cc:	2b24      	cmp	r3, #36	; 0x24
   ba1ce:	d906      	bls.n	ba1de <_strtol_l.constprop.0+0x1a>
   ba1d0:	f7fc f85e 	bl	b6290 <__errno>
   ba1d4:	2316      	movs	r3, #22
   ba1d6:	6003      	str	r3, [r0, #0]
   ba1d8:	2000      	movs	r0, #0
   ba1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba1de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba2c4 <_strtol_l.constprop.0+0x100>
   ba1e2:	460d      	mov	r5, r1
   ba1e4:	462e      	mov	r6, r5
   ba1e6:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba1ea:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba1ee:	f017 0708 	ands.w	r7, r7, #8
   ba1f2:	d1f7      	bne.n	ba1e4 <_strtol_l.constprop.0+0x20>
   ba1f4:	2c2d      	cmp	r4, #45	; 0x2d
   ba1f6:	d132      	bne.n	ba25e <_strtol_l.constprop.0+0x9a>
   ba1f8:	782c      	ldrb	r4, [r5, #0]
   ba1fa:	2701      	movs	r7, #1
   ba1fc:	1cb5      	adds	r5, r6, #2
   ba1fe:	2b00      	cmp	r3, #0
   ba200:	d05b      	beq.n	ba2ba <_strtol_l.constprop.0+0xf6>
   ba202:	2b10      	cmp	r3, #16
   ba204:	d109      	bne.n	ba21a <_strtol_l.constprop.0+0x56>
   ba206:	2c30      	cmp	r4, #48	; 0x30
   ba208:	d107      	bne.n	ba21a <_strtol_l.constprop.0+0x56>
   ba20a:	782c      	ldrb	r4, [r5, #0]
   ba20c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba210:	2c58      	cmp	r4, #88	; 0x58
   ba212:	d14d      	bne.n	ba2b0 <_strtol_l.constprop.0+0xec>
   ba214:	786c      	ldrb	r4, [r5, #1]
   ba216:	2310      	movs	r3, #16
   ba218:	3502      	adds	r5, #2
   ba21a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba21e:	f108 38ff 	add.w	r8, r8, #4294967295
   ba222:	f04f 0c00 	mov.w	ip, #0
   ba226:	fbb8 f9f3 	udiv	r9, r8, r3
   ba22a:	4666      	mov	r6, ip
   ba22c:	fb03 8a19 	mls	sl, r3, r9, r8
   ba230:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba234:	f1be 0f09 	cmp.w	lr, #9
   ba238:	d816      	bhi.n	ba268 <_strtol_l.constprop.0+0xa4>
   ba23a:	4674      	mov	r4, lr
   ba23c:	42a3      	cmp	r3, r4
   ba23e:	dd24      	ble.n	ba28a <_strtol_l.constprop.0+0xc6>
   ba240:	f1bc 0f00 	cmp.w	ip, #0
   ba244:	db1e      	blt.n	ba284 <_strtol_l.constprop.0+0xc0>
   ba246:	45b1      	cmp	r9, r6
   ba248:	d31c      	bcc.n	ba284 <_strtol_l.constprop.0+0xc0>
   ba24a:	d101      	bne.n	ba250 <_strtol_l.constprop.0+0x8c>
   ba24c:	45a2      	cmp	sl, r4
   ba24e:	db19      	blt.n	ba284 <_strtol_l.constprop.0+0xc0>
   ba250:	fb06 4603 	mla	r6, r6, r3, r4
   ba254:	f04f 0c01 	mov.w	ip, #1
   ba258:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba25c:	e7e8      	b.n	ba230 <_strtol_l.constprop.0+0x6c>
   ba25e:	2c2b      	cmp	r4, #43	; 0x2b
   ba260:	bf04      	itt	eq
   ba262:	782c      	ldrbeq	r4, [r5, #0]
   ba264:	1cb5      	addeq	r5, r6, #2
   ba266:	e7ca      	b.n	ba1fe <_strtol_l.constprop.0+0x3a>
   ba268:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba26c:	f1be 0f19 	cmp.w	lr, #25
   ba270:	d801      	bhi.n	ba276 <_strtol_l.constprop.0+0xb2>
   ba272:	3c37      	subs	r4, #55	; 0x37
   ba274:	e7e2      	b.n	ba23c <_strtol_l.constprop.0+0x78>
   ba276:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba27a:	f1be 0f19 	cmp.w	lr, #25
   ba27e:	d804      	bhi.n	ba28a <_strtol_l.constprop.0+0xc6>
   ba280:	3c57      	subs	r4, #87	; 0x57
   ba282:	e7db      	b.n	ba23c <_strtol_l.constprop.0+0x78>
   ba284:	f04f 3cff 	mov.w	ip, #4294967295
   ba288:	e7e6      	b.n	ba258 <_strtol_l.constprop.0+0x94>
   ba28a:	f1bc 0f00 	cmp.w	ip, #0
   ba28e:	da05      	bge.n	ba29c <_strtol_l.constprop.0+0xd8>
   ba290:	2322      	movs	r3, #34	; 0x22
   ba292:	6003      	str	r3, [r0, #0]
   ba294:	4646      	mov	r6, r8
   ba296:	b942      	cbnz	r2, ba2aa <_strtol_l.constprop.0+0xe6>
   ba298:	4630      	mov	r0, r6
   ba29a:	e79e      	b.n	ba1da <_strtol_l.constprop.0+0x16>
   ba29c:	b107      	cbz	r7, ba2a0 <_strtol_l.constprop.0+0xdc>
   ba29e:	4276      	negs	r6, r6
   ba2a0:	2a00      	cmp	r2, #0
   ba2a2:	d0f9      	beq.n	ba298 <_strtol_l.constprop.0+0xd4>
   ba2a4:	f1bc 0f00 	cmp.w	ip, #0
   ba2a8:	d000      	beq.n	ba2ac <_strtol_l.constprop.0+0xe8>
   ba2aa:	1e69      	subs	r1, r5, #1
   ba2ac:	6011      	str	r1, [r2, #0]
   ba2ae:	e7f3      	b.n	ba298 <_strtol_l.constprop.0+0xd4>
   ba2b0:	2430      	movs	r4, #48	; 0x30
   ba2b2:	2b00      	cmp	r3, #0
   ba2b4:	d1b1      	bne.n	ba21a <_strtol_l.constprop.0+0x56>
   ba2b6:	2308      	movs	r3, #8
   ba2b8:	e7af      	b.n	ba21a <_strtol_l.constprop.0+0x56>
   ba2ba:	2c30      	cmp	r4, #48	; 0x30
   ba2bc:	d0a5      	beq.n	ba20a <_strtol_l.constprop.0+0x46>
   ba2be:	230a      	movs	r3, #10
   ba2c0:	e7ab      	b.n	ba21a <_strtol_l.constprop.0+0x56>
   ba2c2:	bf00      	nop
   ba2c4:	000bbdd9 	.word	0x000bbdd9

000ba2c8 <strtol>:
   ba2c8:	4613      	mov	r3, r2
   ba2ca:	460a      	mov	r2, r1
   ba2cc:	4601      	mov	r1, r0
   ba2ce:	4802      	ldr	r0, [pc, #8]	; (ba2d8 <strtol+0x10>)
   ba2d0:	6800      	ldr	r0, [r0, #0]
   ba2d2:	f7ff bf77 	b.w	ba1c4 <_strtol_l.constprop.0>
   ba2d6:	bf00      	nop
   ba2d8:	2003e30c 	.word	0x2003e30c

000ba2dc <__register_exitproc>:
   ba2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba2e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba39c <__register_exitproc+0xc0>
   ba2e4:	4606      	mov	r6, r0
   ba2e6:	f8d8 0000 	ldr.w	r0, [r8]
   ba2ea:	461f      	mov	r7, r3
   ba2ec:	460d      	mov	r5, r1
   ba2ee:	4691      	mov	r9, r2
   ba2f0:	f000 fbc6 	bl	baa80 <__retarget_lock_acquire_recursive>
   ba2f4:	4b25      	ldr	r3, [pc, #148]	; (ba38c <__register_exitproc+0xb0>)
   ba2f6:	681c      	ldr	r4, [r3, #0]
   ba2f8:	b934      	cbnz	r4, ba308 <__register_exitproc+0x2c>
   ba2fa:	4c25      	ldr	r4, [pc, #148]	; (ba390 <__register_exitproc+0xb4>)
   ba2fc:	601c      	str	r4, [r3, #0]
   ba2fe:	4b25      	ldr	r3, [pc, #148]	; (ba394 <__register_exitproc+0xb8>)
   ba300:	b113      	cbz	r3, ba308 <__register_exitproc+0x2c>
   ba302:	681b      	ldr	r3, [r3, #0]
   ba304:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba308:	6863      	ldr	r3, [r4, #4]
   ba30a:	2b1f      	cmp	r3, #31
   ba30c:	dd07      	ble.n	ba31e <__register_exitproc+0x42>
   ba30e:	f8d8 0000 	ldr.w	r0, [r8]
   ba312:	f000 fbb7 	bl	baa84 <__retarget_lock_release_recursive>
   ba316:	f04f 30ff 	mov.w	r0, #4294967295
   ba31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba31e:	b34e      	cbz	r6, ba374 <__register_exitproc+0x98>
   ba320:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba324:	b988      	cbnz	r0, ba34a <__register_exitproc+0x6e>
   ba326:	4b1c      	ldr	r3, [pc, #112]	; (ba398 <__register_exitproc+0xbc>)
   ba328:	b923      	cbnz	r3, ba334 <__register_exitproc+0x58>
   ba32a:	f8d8 0000 	ldr.w	r0, [r8]
   ba32e:	f000 fba8 	bl	baa82 <__retarget_lock_release>
   ba332:	e7f0      	b.n	ba316 <__register_exitproc+0x3a>
   ba334:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba338:	f7fb ff6a 	bl	b6210 <malloc>
   ba33c:	2800      	cmp	r0, #0
   ba33e:	d0f4      	beq.n	ba32a <__register_exitproc+0x4e>
   ba340:	2300      	movs	r3, #0
   ba342:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba346:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba34a:	6863      	ldr	r3, [r4, #4]
   ba34c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba350:	2201      	movs	r2, #1
   ba352:	409a      	lsls	r2, r3
   ba354:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba358:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba35c:	4313      	orrs	r3, r2
   ba35e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba362:	2e02      	cmp	r6, #2
   ba364:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba368:	bf02      	ittt	eq
   ba36a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba36e:	4313      	orreq	r3, r2
   ba370:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba374:	6863      	ldr	r3, [r4, #4]
   ba376:	f8d8 0000 	ldr.w	r0, [r8]
   ba37a:	1c5a      	adds	r2, r3, #1
   ba37c:	3302      	adds	r3, #2
   ba37e:	6062      	str	r2, [r4, #4]
   ba380:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba384:	f000 fb7e 	bl	baa84 <__retarget_lock_release_recursive>
   ba388:	2000      	movs	r0, #0
   ba38a:	e7c6      	b.n	ba31a <__register_exitproc+0x3e>
   ba38c:	2003e7ec 	.word	0x2003e7ec
   ba390:	2003e760 	.word	0x2003e760
   ba394:	00000000 	.word	0x00000000
   ba398:	000b6211 	.word	0x000b6211
   ba39c:	2003e370 	.word	0x2003e370

000ba3a0 <rshift>:
   ba3a0:	6903      	ldr	r3, [r0, #16]
   ba3a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba3a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba3aa:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba3ae:	f100 0414 	add.w	r4, r0, #20
   ba3b2:	dd45      	ble.n	ba440 <rshift+0xa0>
   ba3b4:	f011 011f 	ands.w	r1, r1, #31
   ba3b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba3bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba3c0:	d10c      	bne.n	ba3dc <rshift+0x3c>
   ba3c2:	f100 0710 	add.w	r7, r0, #16
   ba3c6:	4629      	mov	r1, r5
   ba3c8:	42b1      	cmp	r1, r6
   ba3ca:	d334      	bcc.n	ba436 <rshift+0x96>
   ba3cc:	1a9b      	subs	r3, r3, r2
   ba3ce:	009b      	lsls	r3, r3, #2
   ba3d0:	1eea      	subs	r2, r5, #3
   ba3d2:	4296      	cmp	r6, r2
   ba3d4:	bf38      	it	cc
   ba3d6:	2300      	movcc	r3, #0
   ba3d8:	4423      	add	r3, r4
   ba3da:	e015      	b.n	ba408 <rshift+0x68>
   ba3dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba3e0:	f1c1 0820 	rsb	r8, r1, #32
   ba3e4:	40cf      	lsrs	r7, r1
   ba3e6:	f105 0e04 	add.w	lr, r5, #4
   ba3ea:	46a1      	mov	r9, r4
   ba3ec:	4576      	cmp	r6, lr
   ba3ee:	46f4      	mov	ip, lr
   ba3f0:	d815      	bhi.n	ba41e <rshift+0x7e>
   ba3f2:	1a9a      	subs	r2, r3, r2
   ba3f4:	0092      	lsls	r2, r2, #2
   ba3f6:	3a04      	subs	r2, #4
   ba3f8:	3501      	adds	r5, #1
   ba3fa:	42ae      	cmp	r6, r5
   ba3fc:	bf38      	it	cc
   ba3fe:	2200      	movcc	r2, #0
   ba400:	18a3      	adds	r3, r4, r2
   ba402:	50a7      	str	r7, [r4, r2]
   ba404:	b107      	cbz	r7, ba408 <rshift+0x68>
   ba406:	3304      	adds	r3, #4
   ba408:	1b1a      	subs	r2, r3, r4
   ba40a:	42a3      	cmp	r3, r4
   ba40c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba410:	bf08      	it	eq
   ba412:	2300      	moveq	r3, #0
   ba414:	6102      	str	r2, [r0, #16]
   ba416:	bf08      	it	eq
   ba418:	6143      	streq	r3, [r0, #20]
   ba41a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba41e:	f8dc c000 	ldr.w	ip, [ip]
   ba422:	fa0c fc08 	lsl.w	ip, ip, r8
   ba426:	ea4c 0707 	orr.w	r7, ip, r7
   ba42a:	f849 7b04 	str.w	r7, [r9], #4
   ba42e:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba432:	40cf      	lsrs	r7, r1
   ba434:	e7da      	b.n	ba3ec <rshift+0x4c>
   ba436:	f851 cb04 	ldr.w	ip, [r1], #4
   ba43a:	f847 cf04 	str.w	ip, [r7, #4]!
   ba43e:	e7c3      	b.n	ba3c8 <rshift+0x28>
   ba440:	4623      	mov	r3, r4
   ba442:	e7e1      	b.n	ba408 <rshift+0x68>

000ba444 <__hexdig_fun>:
   ba444:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba448:	2b09      	cmp	r3, #9
   ba44a:	d802      	bhi.n	ba452 <__hexdig_fun+0xe>
   ba44c:	3820      	subs	r0, #32
   ba44e:	b2c0      	uxtb	r0, r0
   ba450:	4770      	bx	lr
   ba452:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba456:	2b05      	cmp	r3, #5
   ba458:	d801      	bhi.n	ba45e <__hexdig_fun+0x1a>
   ba45a:	3847      	subs	r0, #71	; 0x47
   ba45c:	e7f7      	b.n	ba44e <__hexdig_fun+0xa>
   ba45e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba462:	2b05      	cmp	r3, #5
   ba464:	d801      	bhi.n	ba46a <__hexdig_fun+0x26>
   ba466:	3827      	subs	r0, #39	; 0x27
   ba468:	e7f1      	b.n	ba44e <__hexdig_fun+0xa>
   ba46a:	2000      	movs	r0, #0
   ba46c:	4770      	bx	lr
	...

000ba470 <__gethex>:
   ba470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba474:	ed2d 8b02 	vpush	{d8}
   ba478:	b089      	sub	sp, #36	; 0x24
   ba47a:	ee08 0a10 	vmov	s16, r0
   ba47e:	9304      	str	r3, [sp, #16]
   ba480:	4bb4      	ldr	r3, [pc, #720]	; (ba754 <__gethex+0x2e4>)
   ba482:	681b      	ldr	r3, [r3, #0]
   ba484:	9301      	str	r3, [sp, #4]
   ba486:	4618      	mov	r0, r3
   ba488:	468b      	mov	fp, r1
   ba48a:	4690      	mov	r8, r2
   ba48c:	f7fa fb22 	bl	b4ad4 <strlen>
   ba490:	9b01      	ldr	r3, [sp, #4]
   ba492:	f8db 2000 	ldr.w	r2, [fp]
   ba496:	4403      	add	r3, r0
   ba498:	4682      	mov	sl, r0
   ba49a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba49e:	9305      	str	r3, [sp, #20]
   ba4a0:	1c93      	adds	r3, r2, #2
   ba4a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba4a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba4aa:	32fe      	adds	r2, #254	; 0xfe
   ba4ac:	18d1      	adds	r1, r2, r3
   ba4ae:	461f      	mov	r7, r3
   ba4b0:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba4b4:	9100      	str	r1, [sp, #0]
   ba4b6:	2830      	cmp	r0, #48	; 0x30
   ba4b8:	d0f8      	beq.n	ba4ac <__gethex+0x3c>
   ba4ba:	f7ff ffc3 	bl	ba444 <__hexdig_fun>
   ba4be:	4604      	mov	r4, r0
   ba4c0:	2800      	cmp	r0, #0
   ba4c2:	d13a      	bne.n	ba53a <__gethex+0xca>
   ba4c4:	9901      	ldr	r1, [sp, #4]
   ba4c6:	4652      	mov	r2, sl
   ba4c8:	4638      	mov	r0, r7
   ba4ca:	f7fe ffda 	bl	b9482 <strncmp>
   ba4ce:	4605      	mov	r5, r0
   ba4d0:	2800      	cmp	r0, #0
   ba4d2:	d168      	bne.n	ba5a6 <__gethex+0x136>
   ba4d4:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba4d8:	eb07 060a 	add.w	r6, r7, sl
   ba4dc:	f7ff ffb2 	bl	ba444 <__hexdig_fun>
   ba4e0:	2800      	cmp	r0, #0
   ba4e2:	d062      	beq.n	ba5aa <__gethex+0x13a>
   ba4e4:	4633      	mov	r3, r6
   ba4e6:	7818      	ldrb	r0, [r3, #0]
   ba4e8:	2830      	cmp	r0, #48	; 0x30
   ba4ea:	461f      	mov	r7, r3
   ba4ec:	f103 0301 	add.w	r3, r3, #1
   ba4f0:	d0f9      	beq.n	ba4e6 <__gethex+0x76>
   ba4f2:	f7ff ffa7 	bl	ba444 <__hexdig_fun>
   ba4f6:	2301      	movs	r3, #1
   ba4f8:	fab0 f480 	clz	r4, r0
   ba4fc:	0964      	lsrs	r4, r4, #5
   ba4fe:	4635      	mov	r5, r6
   ba500:	9300      	str	r3, [sp, #0]
   ba502:	463a      	mov	r2, r7
   ba504:	4616      	mov	r6, r2
   ba506:	3201      	adds	r2, #1
   ba508:	7830      	ldrb	r0, [r6, #0]
   ba50a:	f7ff ff9b 	bl	ba444 <__hexdig_fun>
   ba50e:	2800      	cmp	r0, #0
   ba510:	d1f8      	bne.n	ba504 <__gethex+0x94>
   ba512:	9901      	ldr	r1, [sp, #4]
   ba514:	4652      	mov	r2, sl
   ba516:	4630      	mov	r0, r6
   ba518:	f7fe ffb3 	bl	b9482 <strncmp>
   ba51c:	b980      	cbnz	r0, ba540 <__gethex+0xd0>
   ba51e:	b94d      	cbnz	r5, ba534 <__gethex+0xc4>
   ba520:	eb06 050a 	add.w	r5, r6, sl
   ba524:	462a      	mov	r2, r5
   ba526:	4616      	mov	r6, r2
   ba528:	3201      	adds	r2, #1
   ba52a:	7830      	ldrb	r0, [r6, #0]
   ba52c:	f7ff ff8a 	bl	ba444 <__hexdig_fun>
   ba530:	2800      	cmp	r0, #0
   ba532:	d1f8      	bne.n	ba526 <__gethex+0xb6>
   ba534:	1bad      	subs	r5, r5, r6
   ba536:	00ad      	lsls	r5, r5, #2
   ba538:	e004      	b.n	ba544 <__gethex+0xd4>
   ba53a:	2400      	movs	r4, #0
   ba53c:	4625      	mov	r5, r4
   ba53e:	e7e0      	b.n	ba502 <__gethex+0x92>
   ba540:	2d00      	cmp	r5, #0
   ba542:	d1f7      	bne.n	ba534 <__gethex+0xc4>
   ba544:	7833      	ldrb	r3, [r6, #0]
   ba546:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba54a:	2b50      	cmp	r3, #80	; 0x50
   ba54c:	d13b      	bne.n	ba5c6 <__gethex+0x156>
   ba54e:	7873      	ldrb	r3, [r6, #1]
   ba550:	2b2b      	cmp	r3, #43	; 0x2b
   ba552:	d02c      	beq.n	ba5ae <__gethex+0x13e>
   ba554:	2b2d      	cmp	r3, #45	; 0x2d
   ba556:	d02e      	beq.n	ba5b6 <__gethex+0x146>
   ba558:	1c71      	adds	r1, r6, #1
   ba55a:	f04f 0900 	mov.w	r9, #0
   ba55e:	7808      	ldrb	r0, [r1, #0]
   ba560:	f7ff ff70 	bl	ba444 <__hexdig_fun>
   ba564:	1e43      	subs	r3, r0, #1
   ba566:	b2db      	uxtb	r3, r3
   ba568:	2b18      	cmp	r3, #24
   ba56a:	d82c      	bhi.n	ba5c6 <__gethex+0x156>
   ba56c:	f1a0 0210 	sub.w	r2, r0, #16
   ba570:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba574:	f7ff ff66 	bl	ba444 <__hexdig_fun>
   ba578:	1e43      	subs	r3, r0, #1
   ba57a:	b2db      	uxtb	r3, r3
   ba57c:	2b18      	cmp	r3, #24
   ba57e:	d91d      	bls.n	ba5bc <__gethex+0x14c>
   ba580:	f1b9 0f00 	cmp.w	r9, #0
   ba584:	d000      	beq.n	ba588 <__gethex+0x118>
   ba586:	4252      	negs	r2, r2
   ba588:	4415      	add	r5, r2
   ba58a:	f8cb 1000 	str.w	r1, [fp]
   ba58e:	b1e4      	cbz	r4, ba5ca <__gethex+0x15a>
   ba590:	9b00      	ldr	r3, [sp, #0]
   ba592:	2b00      	cmp	r3, #0
   ba594:	bf14      	ite	ne
   ba596:	2700      	movne	r7, #0
   ba598:	2706      	moveq	r7, #6
   ba59a:	4638      	mov	r0, r7
   ba59c:	b009      	add	sp, #36	; 0x24
   ba59e:	ecbd 8b02 	vpop	{d8}
   ba5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba5a6:	463e      	mov	r6, r7
   ba5a8:	4625      	mov	r5, r4
   ba5aa:	2401      	movs	r4, #1
   ba5ac:	e7ca      	b.n	ba544 <__gethex+0xd4>
   ba5ae:	f04f 0900 	mov.w	r9, #0
   ba5b2:	1cb1      	adds	r1, r6, #2
   ba5b4:	e7d3      	b.n	ba55e <__gethex+0xee>
   ba5b6:	f04f 0901 	mov.w	r9, #1
   ba5ba:	e7fa      	b.n	ba5b2 <__gethex+0x142>
   ba5bc:	230a      	movs	r3, #10
   ba5be:	fb03 0202 	mla	r2, r3, r2, r0
   ba5c2:	3a10      	subs	r2, #16
   ba5c4:	e7d4      	b.n	ba570 <__gethex+0x100>
   ba5c6:	4631      	mov	r1, r6
   ba5c8:	e7df      	b.n	ba58a <__gethex+0x11a>
   ba5ca:	1bf3      	subs	r3, r6, r7
   ba5cc:	3b01      	subs	r3, #1
   ba5ce:	4621      	mov	r1, r4
   ba5d0:	2b07      	cmp	r3, #7
   ba5d2:	dc0b      	bgt.n	ba5ec <__gethex+0x17c>
   ba5d4:	ee18 0a10 	vmov	r0, s16
   ba5d8:	f000 fa68 	bl	baaac <_Balloc>
   ba5dc:	4604      	mov	r4, r0
   ba5de:	b940      	cbnz	r0, ba5f2 <__gethex+0x182>
   ba5e0:	4b5d      	ldr	r3, [pc, #372]	; (ba758 <__gethex+0x2e8>)
   ba5e2:	4602      	mov	r2, r0
   ba5e4:	21de      	movs	r1, #222	; 0xde
   ba5e6:	485d      	ldr	r0, [pc, #372]	; (ba75c <__gethex+0x2ec>)
   ba5e8:	f7fb fe5a 	bl	b62a0 <__assert_func>
   ba5ec:	3101      	adds	r1, #1
   ba5ee:	105b      	asrs	r3, r3, #1
   ba5f0:	e7ee      	b.n	ba5d0 <__gethex+0x160>
   ba5f2:	f100 0914 	add.w	r9, r0, #20
   ba5f6:	f04f 0b00 	mov.w	fp, #0
   ba5fa:	f1ca 0301 	rsb	r3, sl, #1
   ba5fe:	f8cd 9008 	str.w	r9, [sp, #8]
   ba602:	f8cd b000 	str.w	fp, [sp]
   ba606:	9306      	str	r3, [sp, #24]
   ba608:	42b7      	cmp	r7, r6
   ba60a:	d340      	bcc.n	ba68e <__gethex+0x21e>
   ba60c:	9802      	ldr	r0, [sp, #8]
   ba60e:	9b00      	ldr	r3, [sp, #0]
   ba610:	f840 3b04 	str.w	r3, [r0], #4
   ba614:	eba0 0009 	sub.w	r0, r0, r9
   ba618:	1080      	asrs	r0, r0, #2
   ba61a:	0146      	lsls	r6, r0, #5
   ba61c:	6120      	str	r0, [r4, #16]
   ba61e:	4618      	mov	r0, r3
   ba620:	f000 fb36 	bl	bac90 <__hi0bits>
   ba624:	1a30      	subs	r0, r6, r0
   ba626:	f8d8 6000 	ldr.w	r6, [r8]
   ba62a:	42b0      	cmp	r0, r6
   ba62c:	dd63      	ble.n	ba6f6 <__gethex+0x286>
   ba62e:	1b87      	subs	r7, r0, r6
   ba630:	4639      	mov	r1, r7
   ba632:	4620      	mov	r0, r4
   ba634:	f000 feda 	bl	bb3ec <__any_on>
   ba638:	4682      	mov	sl, r0
   ba63a:	b1a8      	cbz	r0, ba668 <__gethex+0x1f8>
   ba63c:	1e7b      	subs	r3, r7, #1
   ba63e:	1159      	asrs	r1, r3, #5
   ba640:	f003 021f 	and.w	r2, r3, #31
   ba644:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba648:	f04f 0a01 	mov.w	sl, #1
   ba64c:	fa0a f202 	lsl.w	r2, sl, r2
   ba650:	420a      	tst	r2, r1
   ba652:	d009      	beq.n	ba668 <__gethex+0x1f8>
   ba654:	4553      	cmp	r3, sl
   ba656:	dd05      	ble.n	ba664 <__gethex+0x1f4>
   ba658:	1eb9      	subs	r1, r7, #2
   ba65a:	4620      	mov	r0, r4
   ba65c:	f000 fec6 	bl	bb3ec <__any_on>
   ba660:	2800      	cmp	r0, #0
   ba662:	d145      	bne.n	ba6f0 <__gethex+0x280>
   ba664:	f04f 0a02 	mov.w	sl, #2
   ba668:	4639      	mov	r1, r7
   ba66a:	4620      	mov	r0, r4
   ba66c:	f7ff fe98 	bl	ba3a0 <rshift>
   ba670:	443d      	add	r5, r7
   ba672:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba676:	42ab      	cmp	r3, r5
   ba678:	da4c      	bge.n	ba714 <__gethex+0x2a4>
   ba67a:	ee18 0a10 	vmov	r0, s16
   ba67e:	4621      	mov	r1, r4
   ba680:	f000 fa54 	bl	bab2c <_Bfree>
   ba684:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba686:	2300      	movs	r3, #0
   ba688:	6013      	str	r3, [r2, #0]
   ba68a:	27a3      	movs	r7, #163	; 0xa3
   ba68c:	e785      	b.n	ba59a <__gethex+0x12a>
   ba68e:	1e73      	subs	r3, r6, #1
   ba690:	9a05      	ldr	r2, [sp, #20]
   ba692:	9303      	str	r3, [sp, #12]
   ba694:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba698:	4293      	cmp	r3, r2
   ba69a:	d019      	beq.n	ba6d0 <__gethex+0x260>
   ba69c:	f1bb 0f20 	cmp.w	fp, #32
   ba6a0:	d107      	bne.n	ba6b2 <__gethex+0x242>
   ba6a2:	9b02      	ldr	r3, [sp, #8]
   ba6a4:	9a00      	ldr	r2, [sp, #0]
   ba6a6:	f843 2b04 	str.w	r2, [r3], #4
   ba6aa:	9302      	str	r3, [sp, #8]
   ba6ac:	2300      	movs	r3, #0
   ba6ae:	9300      	str	r3, [sp, #0]
   ba6b0:	469b      	mov	fp, r3
   ba6b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba6b6:	f7ff fec5 	bl	ba444 <__hexdig_fun>
   ba6ba:	9b00      	ldr	r3, [sp, #0]
   ba6bc:	f000 000f 	and.w	r0, r0, #15
   ba6c0:	fa00 f00b 	lsl.w	r0, r0, fp
   ba6c4:	4303      	orrs	r3, r0
   ba6c6:	9300      	str	r3, [sp, #0]
   ba6c8:	f10b 0b04 	add.w	fp, fp, #4
   ba6cc:	9b03      	ldr	r3, [sp, #12]
   ba6ce:	e00d      	b.n	ba6ec <__gethex+0x27c>
   ba6d0:	9b03      	ldr	r3, [sp, #12]
   ba6d2:	9a06      	ldr	r2, [sp, #24]
   ba6d4:	4413      	add	r3, r2
   ba6d6:	42bb      	cmp	r3, r7
   ba6d8:	d3e0      	bcc.n	ba69c <__gethex+0x22c>
   ba6da:	4618      	mov	r0, r3
   ba6dc:	9901      	ldr	r1, [sp, #4]
   ba6de:	9307      	str	r3, [sp, #28]
   ba6e0:	4652      	mov	r2, sl
   ba6e2:	f7fe fece 	bl	b9482 <strncmp>
   ba6e6:	9b07      	ldr	r3, [sp, #28]
   ba6e8:	2800      	cmp	r0, #0
   ba6ea:	d1d7      	bne.n	ba69c <__gethex+0x22c>
   ba6ec:	461e      	mov	r6, r3
   ba6ee:	e78b      	b.n	ba608 <__gethex+0x198>
   ba6f0:	f04f 0a03 	mov.w	sl, #3
   ba6f4:	e7b8      	b.n	ba668 <__gethex+0x1f8>
   ba6f6:	da0a      	bge.n	ba70e <__gethex+0x29e>
   ba6f8:	1a37      	subs	r7, r6, r0
   ba6fa:	4621      	mov	r1, r4
   ba6fc:	ee18 0a10 	vmov	r0, s16
   ba700:	463a      	mov	r2, r7
   ba702:	f000 fc2f 	bl	baf64 <__lshift>
   ba706:	1bed      	subs	r5, r5, r7
   ba708:	4604      	mov	r4, r0
   ba70a:	f100 0914 	add.w	r9, r0, #20
   ba70e:	f04f 0a00 	mov.w	sl, #0
   ba712:	e7ae      	b.n	ba672 <__gethex+0x202>
   ba714:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba718:	42a8      	cmp	r0, r5
   ba71a:	dd72      	ble.n	ba802 <__gethex+0x392>
   ba71c:	1b45      	subs	r5, r0, r5
   ba71e:	42ae      	cmp	r6, r5
   ba720:	dc36      	bgt.n	ba790 <__gethex+0x320>
   ba722:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba726:	2b02      	cmp	r3, #2
   ba728:	d02a      	beq.n	ba780 <__gethex+0x310>
   ba72a:	2b03      	cmp	r3, #3
   ba72c:	d02c      	beq.n	ba788 <__gethex+0x318>
   ba72e:	2b01      	cmp	r3, #1
   ba730:	d11c      	bne.n	ba76c <__gethex+0x2fc>
   ba732:	42ae      	cmp	r6, r5
   ba734:	d11a      	bne.n	ba76c <__gethex+0x2fc>
   ba736:	2e01      	cmp	r6, #1
   ba738:	d112      	bne.n	ba760 <__gethex+0x2f0>
   ba73a:	9a04      	ldr	r2, [sp, #16]
   ba73c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba740:	6013      	str	r3, [r2, #0]
   ba742:	2301      	movs	r3, #1
   ba744:	6123      	str	r3, [r4, #16]
   ba746:	f8c9 3000 	str.w	r3, [r9]
   ba74a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba74c:	2762      	movs	r7, #98	; 0x62
   ba74e:	601c      	str	r4, [r3, #0]
   ba750:	e723      	b.n	ba59a <__gethex+0x12a>
   ba752:	bf00      	nop
   ba754:	000bbf70 	.word	0x000bbf70
   ba758:	000bbed9 	.word	0x000bbed9
   ba75c:	000bbeea 	.word	0x000bbeea
   ba760:	1e71      	subs	r1, r6, #1
   ba762:	4620      	mov	r0, r4
   ba764:	f000 fe42 	bl	bb3ec <__any_on>
   ba768:	2800      	cmp	r0, #0
   ba76a:	d1e6      	bne.n	ba73a <__gethex+0x2ca>
   ba76c:	ee18 0a10 	vmov	r0, s16
   ba770:	4621      	mov	r1, r4
   ba772:	f000 f9db 	bl	bab2c <_Bfree>
   ba776:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba778:	2300      	movs	r3, #0
   ba77a:	6013      	str	r3, [r2, #0]
   ba77c:	2750      	movs	r7, #80	; 0x50
   ba77e:	e70c      	b.n	ba59a <__gethex+0x12a>
   ba780:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba782:	2b00      	cmp	r3, #0
   ba784:	d1f2      	bne.n	ba76c <__gethex+0x2fc>
   ba786:	e7d8      	b.n	ba73a <__gethex+0x2ca>
   ba788:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba78a:	2b00      	cmp	r3, #0
   ba78c:	d1d5      	bne.n	ba73a <__gethex+0x2ca>
   ba78e:	e7ed      	b.n	ba76c <__gethex+0x2fc>
   ba790:	1e6f      	subs	r7, r5, #1
   ba792:	f1ba 0f00 	cmp.w	sl, #0
   ba796:	d131      	bne.n	ba7fc <__gethex+0x38c>
   ba798:	b127      	cbz	r7, ba7a4 <__gethex+0x334>
   ba79a:	4639      	mov	r1, r7
   ba79c:	4620      	mov	r0, r4
   ba79e:	f000 fe25 	bl	bb3ec <__any_on>
   ba7a2:	4682      	mov	sl, r0
   ba7a4:	117b      	asrs	r3, r7, #5
   ba7a6:	2101      	movs	r1, #1
   ba7a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba7ac:	f007 071f 	and.w	r7, r7, #31
   ba7b0:	fa01 f707 	lsl.w	r7, r1, r7
   ba7b4:	421f      	tst	r7, r3
   ba7b6:	4629      	mov	r1, r5
   ba7b8:	4620      	mov	r0, r4
   ba7ba:	bf18      	it	ne
   ba7bc:	f04a 0a02 	orrne.w	sl, sl, #2
   ba7c0:	1b76      	subs	r6, r6, r5
   ba7c2:	f7ff fded 	bl	ba3a0 <rshift>
   ba7c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba7ca:	2702      	movs	r7, #2
   ba7cc:	f1ba 0f00 	cmp.w	sl, #0
   ba7d0:	d048      	beq.n	ba864 <__gethex+0x3f4>
   ba7d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba7d6:	2b02      	cmp	r3, #2
   ba7d8:	d015      	beq.n	ba806 <__gethex+0x396>
   ba7da:	2b03      	cmp	r3, #3
   ba7dc:	d017      	beq.n	ba80e <__gethex+0x39e>
   ba7de:	2b01      	cmp	r3, #1
   ba7e0:	d109      	bne.n	ba7f6 <__gethex+0x386>
   ba7e2:	f01a 0f02 	tst.w	sl, #2
   ba7e6:	d006      	beq.n	ba7f6 <__gethex+0x386>
   ba7e8:	f8d9 0000 	ldr.w	r0, [r9]
   ba7ec:	ea4a 0a00 	orr.w	sl, sl, r0
   ba7f0:	f01a 0f01 	tst.w	sl, #1
   ba7f4:	d10e      	bne.n	ba814 <__gethex+0x3a4>
   ba7f6:	f047 0710 	orr.w	r7, r7, #16
   ba7fa:	e033      	b.n	ba864 <__gethex+0x3f4>
   ba7fc:	f04f 0a01 	mov.w	sl, #1
   ba800:	e7d0      	b.n	ba7a4 <__gethex+0x334>
   ba802:	2701      	movs	r7, #1
   ba804:	e7e2      	b.n	ba7cc <__gethex+0x35c>
   ba806:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba808:	f1c3 0301 	rsb	r3, r3, #1
   ba80c:	9315      	str	r3, [sp, #84]	; 0x54
   ba80e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba810:	2b00      	cmp	r3, #0
   ba812:	d0f0      	beq.n	ba7f6 <__gethex+0x386>
   ba814:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba818:	f104 0314 	add.w	r3, r4, #20
   ba81c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba820:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba824:	f04f 0c00 	mov.w	ip, #0
   ba828:	4618      	mov	r0, r3
   ba82a:	f853 2b04 	ldr.w	r2, [r3], #4
   ba82e:	f1b2 3fff 	cmp.w	r2, #4294967295
   ba832:	d01c      	beq.n	ba86e <__gethex+0x3fe>
   ba834:	3201      	adds	r2, #1
   ba836:	6002      	str	r2, [r0, #0]
   ba838:	2f02      	cmp	r7, #2
   ba83a:	f104 0314 	add.w	r3, r4, #20
   ba83e:	d13f      	bne.n	ba8c0 <__gethex+0x450>
   ba840:	f8d8 2000 	ldr.w	r2, [r8]
   ba844:	3a01      	subs	r2, #1
   ba846:	42b2      	cmp	r2, r6
   ba848:	d10a      	bne.n	ba860 <__gethex+0x3f0>
   ba84a:	1171      	asrs	r1, r6, #5
   ba84c:	2201      	movs	r2, #1
   ba84e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba852:	f006 061f 	and.w	r6, r6, #31
   ba856:	fa02 f606 	lsl.w	r6, r2, r6
   ba85a:	421e      	tst	r6, r3
   ba85c:	bf18      	it	ne
   ba85e:	4617      	movne	r7, r2
   ba860:	f047 0720 	orr.w	r7, r7, #32
   ba864:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba866:	601c      	str	r4, [r3, #0]
   ba868:	9b04      	ldr	r3, [sp, #16]
   ba86a:	601d      	str	r5, [r3, #0]
   ba86c:	e695      	b.n	ba59a <__gethex+0x12a>
   ba86e:	4299      	cmp	r1, r3
   ba870:	f843 cc04 	str.w	ip, [r3, #-4]
   ba874:	d8d8      	bhi.n	ba828 <__gethex+0x3b8>
   ba876:	68a3      	ldr	r3, [r4, #8]
   ba878:	459b      	cmp	fp, r3
   ba87a:	db19      	blt.n	ba8b0 <__gethex+0x440>
   ba87c:	6861      	ldr	r1, [r4, #4]
   ba87e:	ee18 0a10 	vmov	r0, s16
   ba882:	3101      	adds	r1, #1
   ba884:	f000 f912 	bl	baaac <_Balloc>
   ba888:	4681      	mov	r9, r0
   ba88a:	b918      	cbnz	r0, ba894 <__gethex+0x424>
   ba88c:	4b1a      	ldr	r3, [pc, #104]	; (ba8f8 <__gethex+0x488>)
   ba88e:	4602      	mov	r2, r0
   ba890:	2184      	movs	r1, #132	; 0x84
   ba892:	e6a8      	b.n	ba5e6 <__gethex+0x176>
   ba894:	6922      	ldr	r2, [r4, #16]
   ba896:	3202      	adds	r2, #2
   ba898:	f104 010c 	add.w	r1, r4, #12
   ba89c:	0092      	lsls	r2, r2, #2
   ba89e:	300c      	adds	r0, #12
   ba8a0:	f7fe fd6c 	bl	b937c <memcpy>
   ba8a4:	4621      	mov	r1, r4
   ba8a6:	ee18 0a10 	vmov	r0, s16
   ba8aa:	f000 f93f 	bl	bab2c <_Bfree>
   ba8ae:	464c      	mov	r4, r9
   ba8b0:	6923      	ldr	r3, [r4, #16]
   ba8b2:	1c5a      	adds	r2, r3, #1
   ba8b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba8b8:	6122      	str	r2, [r4, #16]
   ba8ba:	2201      	movs	r2, #1
   ba8bc:	615a      	str	r2, [r3, #20]
   ba8be:	e7bb      	b.n	ba838 <__gethex+0x3c8>
   ba8c0:	6922      	ldr	r2, [r4, #16]
   ba8c2:	455a      	cmp	r2, fp
   ba8c4:	dd0b      	ble.n	ba8de <__gethex+0x46e>
   ba8c6:	2101      	movs	r1, #1
   ba8c8:	4620      	mov	r0, r4
   ba8ca:	f7ff fd69 	bl	ba3a0 <rshift>
   ba8ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba8d2:	3501      	adds	r5, #1
   ba8d4:	42ab      	cmp	r3, r5
   ba8d6:	f6ff aed0 	blt.w	ba67a <__gethex+0x20a>
   ba8da:	2701      	movs	r7, #1
   ba8dc:	e7c0      	b.n	ba860 <__gethex+0x3f0>
   ba8de:	f016 061f 	ands.w	r6, r6, #31
   ba8e2:	d0fa      	beq.n	ba8da <__gethex+0x46a>
   ba8e4:	4453      	add	r3, sl
   ba8e6:	f1c6 0620 	rsb	r6, r6, #32
   ba8ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba8ee:	f000 f9cf 	bl	bac90 <__hi0bits>
   ba8f2:	42b0      	cmp	r0, r6
   ba8f4:	dbe7      	blt.n	ba8c6 <__gethex+0x456>
   ba8f6:	e7f0      	b.n	ba8da <__gethex+0x46a>
   ba8f8:	000bbed9 	.word	0x000bbed9

000ba8fc <L_shift>:
   ba8fc:	f1c2 0208 	rsb	r2, r2, #8
   ba900:	0092      	lsls	r2, r2, #2
   ba902:	b570      	push	{r4, r5, r6, lr}
   ba904:	f1c2 0620 	rsb	r6, r2, #32
   ba908:	6843      	ldr	r3, [r0, #4]
   ba90a:	6804      	ldr	r4, [r0, #0]
   ba90c:	fa03 f506 	lsl.w	r5, r3, r6
   ba910:	432c      	orrs	r4, r5
   ba912:	40d3      	lsrs	r3, r2
   ba914:	6004      	str	r4, [r0, #0]
   ba916:	f840 3f04 	str.w	r3, [r0, #4]!
   ba91a:	4288      	cmp	r0, r1
   ba91c:	d3f4      	bcc.n	ba908 <L_shift+0xc>
   ba91e:	bd70      	pop	{r4, r5, r6, pc}

000ba920 <__match>:
   ba920:	b530      	push	{r4, r5, lr}
   ba922:	6803      	ldr	r3, [r0, #0]
   ba924:	3301      	adds	r3, #1
   ba926:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba92a:	b914      	cbnz	r4, ba932 <__match+0x12>
   ba92c:	6003      	str	r3, [r0, #0]
   ba92e:	2001      	movs	r0, #1
   ba930:	bd30      	pop	{r4, r5, pc}
   ba932:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba936:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba93a:	2d19      	cmp	r5, #25
   ba93c:	bf98      	it	ls
   ba93e:	3220      	addls	r2, #32
   ba940:	42a2      	cmp	r2, r4
   ba942:	d0f0      	beq.n	ba926 <__match+0x6>
   ba944:	2000      	movs	r0, #0
   ba946:	e7f3      	b.n	ba930 <__match+0x10>

000ba948 <__hexnan>:
   ba948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba94c:	680b      	ldr	r3, [r1, #0]
   ba94e:	115e      	asrs	r6, r3, #5
   ba950:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba954:	f013 031f 	ands.w	r3, r3, #31
   ba958:	b087      	sub	sp, #28
   ba95a:	bf18      	it	ne
   ba95c:	3604      	addne	r6, #4
   ba95e:	2500      	movs	r5, #0
   ba960:	1f37      	subs	r7, r6, #4
   ba962:	4690      	mov	r8, r2
   ba964:	6802      	ldr	r2, [r0, #0]
   ba966:	9301      	str	r3, [sp, #4]
   ba968:	4682      	mov	sl, r0
   ba96a:	f846 5c04 	str.w	r5, [r6, #-4]
   ba96e:	46b9      	mov	r9, r7
   ba970:	463c      	mov	r4, r7
   ba972:	9502      	str	r5, [sp, #8]
   ba974:	46ab      	mov	fp, r5
   ba976:	7851      	ldrb	r1, [r2, #1]
   ba978:	1c53      	adds	r3, r2, #1
   ba97a:	9303      	str	r3, [sp, #12]
   ba97c:	b341      	cbz	r1, ba9d0 <__hexnan+0x88>
   ba97e:	4608      	mov	r0, r1
   ba980:	9205      	str	r2, [sp, #20]
   ba982:	9104      	str	r1, [sp, #16]
   ba984:	f7ff fd5e 	bl	ba444 <__hexdig_fun>
   ba988:	2800      	cmp	r0, #0
   ba98a:	d14f      	bne.n	baa2c <__hexnan+0xe4>
   ba98c:	9904      	ldr	r1, [sp, #16]
   ba98e:	9a05      	ldr	r2, [sp, #20]
   ba990:	2920      	cmp	r1, #32
   ba992:	d818      	bhi.n	ba9c6 <__hexnan+0x7e>
   ba994:	9b02      	ldr	r3, [sp, #8]
   ba996:	459b      	cmp	fp, r3
   ba998:	dd13      	ble.n	ba9c2 <__hexnan+0x7a>
   ba99a:	454c      	cmp	r4, r9
   ba99c:	d206      	bcs.n	ba9ac <__hexnan+0x64>
   ba99e:	2d07      	cmp	r5, #7
   ba9a0:	dc04      	bgt.n	ba9ac <__hexnan+0x64>
   ba9a2:	462a      	mov	r2, r5
   ba9a4:	4649      	mov	r1, r9
   ba9a6:	4620      	mov	r0, r4
   ba9a8:	f7ff ffa8 	bl	ba8fc <L_shift>
   ba9ac:	4544      	cmp	r4, r8
   ba9ae:	d950      	bls.n	baa52 <__hexnan+0x10a>
   ba9b0:	2300      	movs	r3, #0
   ba9b2:	f1a4 0904 	sub.w	r9, r4, #4
   ba9b6:	f844 3c04 	str.w	r3, [r4, #-4]
   ba9ba:	f8cd b008 	str.w	fp, [sp, #8]
   ba9be:	464c      	mov	r4, r9
   ba9c0:	461d      	mov	r5, r3
   ba9c2:	9a03      	ldr	r2, [sp, #12]
   ba9c4:	e7d7      	b.n	ba976 <__hexnan+0x2e>
   ba9c6:	2929      	cmp	r1, #41	; 0x29
   ba9c8:	d156      	bne.n	baa78 <__hexnan+0x130>
   ba9ca:	3202      	adds	r2, #2
   ba9cc:	f8ca 2000 	str.w	r2, [sl]
   ba9d0:	f1bb 0f00 	cmp.w	fp, #0
   ba9d4:	d050      	beq.n	baa78 <__hexnan+0x130>
   ba9d6:	454c      	cmp	r4, r9
   ba9d8:	d206      	bcs.n	ba9e8 <__hexnan+0xa0>
   ba9da:	2d07      	cmp	r5, #7
   ba9dc:	dc04      	bgt.n	ba9e8 <__hexnan+0xa0>
   ba9de:	462a      	mov	r2, r5
   ba9e0:	4649      	mov	r1, r9
   ba9e2:	4620      	mov	r0, r4
   ba9e4:	f7ff ff8a 	bl	ba8fc <L_shift>
   ba9e8:	4544      	cmp	r4, r8
   ba9ea:	d934      	bls.n	baa56 <__hexnan+0x10e>
   ba9ec:	f1a8 0204 	sub.w	r2, r8, #4
   ba9f0:	4623      	mov	r3, r4
   ba9f2:	f853 1b04 	ldr.w	r1, [r3], #4
   ba9f6:	f842 1f04 	str.w	r1, [r2, #4]!
   ba9fa:	429f      	cmp	r7, r3
   ba9fc:	d2f9      	bcs.n	ba9f2 <__hexnan+0xaa>
   ba9fe:	1b3b      	subs	r3, r7, r4
   baa00:	f023 0303 	bic.w	r3, r3, #3
   baa04:	3304      	adds	r3, #4
   baa06:	3401      	adds	r4, #1
   baa08:	3e03      	subs	r6, #3
   baa0a:	42b4      	cmp	r4, r6
   baa0c:	bf88      	it	hi
   baa0e:	2304      	movhi	r3, #4
   baa10:	4443      	add	r3, r8
   baa12:	2200      	movs	r2, #0
   baa14:	f843 2b04 	str.w	r2, [r3], #4
   baa18:	429f      	cmp	r7, r3
   baa1a:	d2fb      	bcs.n	baa14 <__hexnan+0xcc>
   baa1c:	683b      	ldr	r3, [r7, #0]
   baa1e:	b91b      	cbnz	r3, baa28 <__hexnan+0xe0>
   baa20:	4547      	cmp	r7, r8
   baa22:	d127      	bne.n	baa74 <__hexnan+0x12c>
   baa24:	2301      	movs	r3, #1
   baa26:	603b      	str	r3, [r7, #0]
   baa28:	2005      	movs	r0, #5
   baa2a:	e026      	b.n	baa7a <__hexnan+0x132>
   baa2c:	3501      	adds	r5, #1
   baa2e:	2d08      	cmp	r5, #8
   baa30:	f10b 0b01 	add.w	fp, fp, #1
   baa34:	dd06      	ble.n	baa44 <__hexnan+0xfc>
   baa36:	4544      	cmp	r4, r8
   baa38:	d9c3      	bls.n	ba9c2 <__hexnan+0x7a>
   baa3a:	2300      	movs	r3, #0
   baa3c:	f844 3c04 	str.w	r3, [r4, #-4]
   baa40:	2501      	movs	r5, #1
   baa42:	3c04      	subs	r4, #4
   baa44:	6822      	ldr	r2, [r4, #0]
   baa46:	f000 000f 	and.w	r0, r0, #15
   baa4a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   baa4e:	6022      	str	r2, [r4, #0]
   baa50:	e7b7      	b.n	ba9c2 <__hexnan+0x7a>
   baa52:	2508      	movs	r5, #8
   baa54:	e7b5      	b.n	ba9c2 <__hexnan+0x7a>
   baa56:	9b01      	ldr	r3, [sp, #4]
   baa58:	2b00      	cmp	r3, #0
   baa5a:	d0df      	beq.n	baa1c <__hexnan+0xd4>
   baa5c:	f04f 32ff 	mov.w	r2, #4294967295
   baa60:	f1c3 0320 	rsb	r3, r3, #32
   baa64:	fa22 f303 	lsr.w	r3, r2, r3
   baa68:	f856 2c04 	ldr.w	r2, [r6, #-4]
   baa6c:	401a      	ands	r2, r3
   baa6e:	f846 2c04 	str.w	r2, [r6, #-4]
   baa72:	e7d3      	b.n	baa1c <__hexnan+0xd4>
   baa74:	3f04      	subs	r7, #4
   baa76:	e7d1      	b.n	baa1c <__hexnan+0xd4>
   baa78:	2004      	movs	r0, #4
   baa7a:	b007      	add	sp, #28
   baa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baa80 <__retarget_lock_acquire_recursive>:
   baa80:	4770      	bx	lr

000baa82 <__retarget_lock_release>:
   baa82:	4770      	bx	lr

000baa84 <__retarget_lock_release_recursive>:
   baa84:	4770      	bx	lr

000baa86 <__ascii_mbtowc>:
   baa86:	b082      	sub	sp, #8
   baa88:	b901      	cbnz	r1, baa8c <__ascii_mbtowc+0x6>
   baa8a:	a901      	add	r1, sp, #4
   baa8c:	b142      	cbz	r2, baaa0 <__ascii_mbtowc+0x1a>
   baa8e:	b14b      	cbz	r3, baaa4 <__ascii_mbtowc+0x1e>
   baa90:	7813      	ldrb	r3, [r2, #0]
   baa92:	600b      	str	r3, [r1, #0]
   baa94:	7812      	ldrb	r2, [r2, #0]
   baa96:	1e10      	subs	r0, r2, #0
   baa98:	bf18      	it	ne
   baa9a:	2001      	movne	r0, #1
   baa9c:	b002      	add	sp, #8
   baa9e:	4770      	bx	lr
   baaa0:	4610      	mov	r0, r2
   baaa2:	e7fb      	b.n	baa9c <__ascii_mbtowc+0x16>
   baaa4:	f06f 0001 	mvn.w	r0, #1
   baaa8:	e7f8      	b.n	baa9c <__ascii_mbtowc+0x16>
	...

000baaac <_Balloc>:
   baaac:	b570      	push	{r4, r5, r6, lr}
   baaae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   baab0:	4604      	mov	r4, r0
   baab2:	460d      	mov	r5, r1
   baab4:	b976      	cbnz	r6, baad4 <_Balloc+0x28>
   baab6:	2010      	movs	r0, #16
   baab8:	f7fb fbaa 	bl	b6210 <malloc>
   baabc:	4602      	mov	r2, r0
   baabe:	6260      	str	r0, [r4, #36]	; 0x24
   baac0:	b920      	cbnz	r0, baacc <_Balloc+0x20>
   baac2:	4b18      	ldr	r3, [pc, #96]	; (bab24 <_Balloc+0x78>)
   baac4:	4818      	ldr	r0, [pc, #96]	; (bab28 <_Balloc+0x7c>)
   baac6:	2166      	movs	r1, #102	; 0x66
   baac8:	f7fb fbea 	bl	b62a0 <__assert_func>
   baacc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   baad0:	6006      	str	r6, [r0, #0]
   baad2:	60c6      	str	r6, [r0, #12]
   baad4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   baad6:	68f3      	ldr	r3, [r6, #12]
   baad8:	b183      	cbz	r3, baafc <_Balloc+0x50>
   baada:	6a63      	ldr	r3, [r4, #36]	; 0x24
   baadc:	68db      	ldr	r3, [r3, #12]
   baade:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   baae2:	b9b8      	cbnz	r0, bab14 <_Balloc+0x68>
   baae4:	2101      	movs	r1, #1
   baae6:	fa01 f605 	lsl.w	r6, r1, r5
   baaea:	1d72      	adds	r2, r6, #5
   baaec:	0092      	lsls	r2, r2, #2
   baaee:	4620      	mov	r0, r4
   baaf0:	f000 fc9d 	bl	bb42e <_calloc_r>
   baaf4:	b160      	cbz	r0, bab10 <_Balloc+0x64>
   baaf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   baafa:	e00e      	b.n	bab1a <_Balloc+0x6e>
   baafc:	2221      	movs	r2, #33	; 0x21
   baafe:	2104      	movs	r1, #4
   bab00:	4620      	mov	r0, r4
   bab02:	f000 fc94 	bl	bb42e <_calloc_r>
   bab06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bab08:	60f0      	str	r0, [r6, #12]
   bab0a:	68db      	ldr	r3, [r3, #12]
   bab0c:	2b00      	cmp	r3, #0
   bab0e:	d1e4      	bne.n	baada <_Balloc+0x2e>
   bab10:	2000      	movs	r0, #0
   bab12:	bd70      	pop	{r4, r5, r6, pc}
   bab14:	6802      	ldr	r2, [r0, #0]
   bab16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bab1a:	2300      	movs	r3, #0
   bab1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bab20:	e7f7      	b.n	bab12 <_Balloc+0x66>
   bab22:	bf00      	nop
   bab24:	000bbce2 	.word	0x000bbce2
   bab28:	000bbf84 	.word	0x000bbf84

000bab2c <_Bfree>:
   bab2c:	b570      	push	{r4, r5, r6, lr}
   bab2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bab30:	4605      	mov	r5, r0
   bab32:	460c      	mov	r4, r1
   bab34:	b976      	cbnz	r6, bab54 <_Bfree+0x28>
   bab36:	2010      	movs	r0, #16
   bab38:	f7fb fb6a 	bl	b6210 <malloc>
   bab3c:	4602      	mov	r2, r0
   bab3e:	6268      	str	r0, [r5, #36]	; 0x24
   bab40:	b920      	cbnz	r0, bab4c <_Bfree+0x20>
   bab42:	4b09      	ldr	r3, [pc, #36]	; (bab68 <_Bfree+0x3c>)
   bab44:	4809      	ldr	r0, [pc, #36]	; (bab6c <_Bfree+0x40>)
   bab46:	218a      	movs	r1, #138	; 0x8a
   bab48:	f7fb fbaa 	bl	b62a0 <__assert_func>
   bab4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bab50:	6006      	str	r6, [r0, #0]
   bab52:	60c6      	str	r6, [r0, #12]
   bab54:	b13c      	cbz	r4, bab66 <_Bfree+0x3a>
   bab56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bab58:	6862      	ldr	r2, [r4, #4]
   bab5a:	68db      	ldr	r3, [r3, #12]
   bab5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bab60:	6021      	str	r1, [r4, #0]
   bab62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bab66:	bd70      	pop	{r4, r5, r6, pc}
   bab68:	000bbce2 	.word	0x000bbce2
   bab6c:	000bbf84 	.word	0x000bbf84

000bab70 <__multadd>:
   bab70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bab74:	690d      	ldr	r5, [r1, #16]
   bab76:	4607      	mov	r7, r0
   bab78:	460c      	mov	r4, r1
   bab7a:	461e      	mov	r6, r3
   bab7c:	f101 0c14 	add.w	ip, r1, #20
   bab80:	2000      	movs	r0, #0
   bab82:	f8dc 3000 	ldr.w	r3, [ip]
   bab86:	b299      	uxth	r1, r3
   bab88:	fb02 6101 	mla	r1, r2, r1, r6
   bab8c:	0c1e      	lsrs	r6, r3, #16
   bab8e:	0c0b      	lsrs	r3, r1, #16
   bab90:	fb02 3306 	mla	r3, r2, r6, r3
   bab94:	b289      	uxth	r1, r1
   bab96:	3001      	adds	r0, #1
   bab98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bab9c:	4285      	cmp	r5, r0
   bab9e:	f84c 1b04 	str.w	r1, [ip], #4
   baba2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   baba6:	dcec      	bgt.n	bab82 <__multadd+0x12>
   baba8:	b30e      	cbz	r6, babee <__multadd+0x7e>
   babaa:	68a3      	ldr	r3, [r4, #8]
   babac:	42ab      	cmp	r3, r5
   babae:	dc19      	bgt.n	babe4 <__multadd+0x74>
   babb0:	6861      	ldr	r1, [r4, #4]
   babb2:	4638      	mov	r0, r7
   babb4:	3101      	adds	r1, #1
   babb6:	f7ff ff79 	bl	baaac <_Balloc>
   babba:	4680      	mov	r8, r0
   babbc:	b928      	cbnz	r0, babca <__multadd+0x5a>
   babbe:	4602      	mov	r2, r0
   babc0:	4b0c      	ldr	r3, [pc, #48]	; (babf4 <__multadd+0x84>)
   babc2:	480d      	ldr	r0, [pc, #52]	; (babf8 <__multadd+0x88>)
   babc4:	21b5      	movs	r1, #181	; 0xb5
   babc6:	f7fb fb6b 	bl	b62a0 <__assert_func>
   babca:	6922      	ldr	r2, [r4, #16]
   babcc:	3202      	adds	r2, #2
   babce:	f104 010c 	add.w	r1, r4, #12
   babd2:	0092      	lsls	r2, r2, #2
   babd4:	300c      	adds	r0, #12
   babd6:	f7fe fbd1 	bl	b937c <memcpy>
   babda:	4621      	mov	r1, r4
   babdc:	4638      	mov	r0, r7
   babde:	f7ff ffa5 	bl	bab2c <_Bfree>
   babe2:	4644      	mov	r4, r8
   babe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   babe8:	3501      	adds	r5, #1
   babea:	615e      	str	r6, [r3, #20]
   babec:	6125      	str	r5, [r4, #16]
   babee:	4620      	mov	r0, r4
   babf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   babf4:	000bbed9 	.word	0x000bbed9
   babf8:	000bbf84 	.word	0x000bbf84

000babfc <__s2b>:
   babfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bac00:	460c      	mov	r4, r1
   bac02:	4615      	mov	r5, r2
   bac04:	461f      	mov	r7, r3
   bac06:	2209      	movs	r2, #9
   bac08:	3308      	adds	r3, #8
   bac0a:	4606      	mov	r6, r0
   bac0c:	fb93 f3f2 	sdiv	r3, r3, r2
   bac10:	2100      	movs	r1, #0
   bac12:	2201      	movs	r2, #1
   bac14:	429a      	cmp	r2, r3
   bac16:	db09      	blt.n	bac2c <__s2b+0x30>
   bac18:	4630      	mov	r0, r6
   bac1a:	f7ff ff47 	bl	baaac <_Balloc>
   bac1e:	b940      	cbnz	r0, bac32 <__s2b+0x36>
   bac20:	4602      	mov	r2, r0
   bac22:	4b19      	ldr	r3, [pc, #100]	; (bac88 <__s2b+0x8c>)
   bac24:	4819      	ldr	r0, [pc, #100]	; (bac8c <__s2b+0x90>)
   bac26:	21ce      	movs	r1, #206	; 0xce
   bac28:	f7fb fb3a 	bl	b62a0 <__assert_func>
   bac2c:	0052      	lsls	r2, r2, #1
   bac2e:	3101      	adds	r1, #1
   bac30:	e7f0      	b.n	bac14 <__s2b+0x18>
   bac32:	9b08      	ldr	r3, [sp, #32]
   bac34:	6143      	str	r3, [r0, #20]
   bac36:	2d09      	cmp	r5, #9
   bac38:	f04f 0301 	mov.w	r3, #1
   bac3c:	6103      	str	r3, [r0, #16]
   bac3e:	dd16      	ble.n	bac6e <__s2b+0x72>
   bac40:	f104 0909 	add.w	r9, r4, #9
   bac44:	46c8      	mov	r8, r9
   bac46:	442c      	add	r4, r5
   bac48:	f818 3b01 	ldrb.w	r3, [r8], #1
   bac4c:	4601      	mov	r1, r0
   bac4e:	3b30      	subs	r3, #48	; 0x30
   bac50:	220a      	movs	r2, #10
   bac52:	4630      	mov	r0, r6
   bac54:	f7ff ff8c 	bl	bab70 <__multadd>
   bac58:	45a0      	cmp	r8, r4
   bac5a:	d1f5      	bne.n	bac48 <__s2b+0x4c>
   bac5c:	f1a5 0408 	sub.w	r4, r5, #8
   bac60:	444c      	add	r4, r9
   bac62:	1b2d      	subs	r5, r5, r4
   bac64:	1963      	adds	r3, r4, r5
   bac66:	42bb      	cmp	r3, r7
   bac68:	db04      	blt.n	bac74 <__s2b+0x78>
   bac6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bac6e:	340a      	adds	r4, #10
   bac70:	2509      	movs	r5, #9
   bac72:	e7f6      	b.n	bac62 <__s2b+0x66>
   bac74:	f814 3b01 	ldrb.w	r3, [r4], #1
   bac78:	4601      	mov	r1, r0
   bac7a:	3b30      	subs	r3, #48	; 0x30
   bac7c:	220a      	movs	r2, #10
   bac7e:	4630      	mov	r0, r6
   bac80:	f7ff ff76 	bl	bab70 <__multadd>
   bac84:	e7ee      	b.n	bac64 <__s2b+0x68>
   bac86:	bf00      	nop
   bac88:	000bbed9 	.word	0x000bbed9
   bac8c:	000bbf84 	.word	0x000bbf84

000bac90 <__hi0bits>:
   bac90:	0c03      	lsrs	r3, r0, #16
   bac92:	041b      	lsls	r3, r3, #16
   bac94:	b9d3      	cbnz	r3, baccc <__hi0bits+0x3c>
   bac96:	0400      	lsls	r0, r0, #16
   bac98:	2310      	movs	r3, #16
   bac9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bac9e:	bf04      	itt	eq
   baca0:	0200      	lsleq	r0, r0, #8
   baca2:	3308      	addeq	r3, #8
   baca4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   baca8:	bf04      	itt	eq
   bacaa:	0100      	lsleq	r0, r0, #4
   bacac:	3304      	addeq	r3, #4
   bacae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bacb2:	bf04      	itt	eq
   bacb4:	0080      	lsleq	r0, r0, #2
   bacb6:	3302      	addeq	r3, #2
   bacb8:	2800      	cmp	r0, #0
   bacba:	db05      	blt.n	bacc8 <__hi0bits+0x38>
   bacbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bacc0:	f103 0301 	add.w	r3, r3, #1
   bacc4:	bf08      	it	eq
   bacc6:	2320      	moveq	r3, #32
   bacc8:	4618      	mov	r0, r3
   bacca:	4770      	bx	lr
   baccc:	2300      	movs	r3, #0
   bacce:	e7e4      	b.n	bac9a <__hi0bits+0xa>

000bacd0 <__lo0bits>:
   bacd0:	6803      	ldr	r3, [r0, #0]
   bacd2:	f013 0207 	ands.w	r2, r3, #7
   bacd6:	4601      	mov	r1, r0
   bacd8:	d00b      	beq.n	bacf2 <__lo0bits+0x22>
   bacda:	07da      	lsls	r2, r3, #31
   bacdc:	d423      	bmi.n	bad26 <__lo0bits+0x56>
   bacde:	0798      	lsls	r0, r3, #30
   bace0:	bf49      	itett	mi
   bace2:	085b      	lsrmi	r3, r3, #1
   bace4:	089b      	lsrpl	r3, r3, #2
   bace6:	2001      	movmi	r0, #1
   bace8:	600b      	strmi	r3, [r1, #0]
   bacea:	bf5c      	itt	pl
   bacec:	600b      	strpl	r3, [r1, #0]
   bacee:	2002      	movpl	r0, #2
   bacf0:	4770      	bx	lr
   bacf2:	b298      	uxth	r0, r3
   bacf4:	b9a8      	cbnz	r0, bad22 <__lo0bits+0x52>
   bacf6:	0c1b      	lsrs	r3, r3, #16
   bacf8:	2010      	movs	r0, #16
   bacfa:	b2da      	uxtb	r2, r3
   bacfc:	b90a      	cbnz	r2, bad02 <__lo0bits+0x32>
   bacfe:	3008      	adds	r0, #8
   bad00:	0a1b      	lsrs	r3, r3, #8
   bad02:	071a      	lsls	r2, r3, #28
   bad04:	bf04      	itt	eq
   bad06:	091b      	lsreq	r3, r3, #4
   bad08:	3004      	addeq	r0, #4
   bad0a:	079a      	lsls	r2, r3, #30
   bad0c:	bf04      	itt	eq
   bad0e:	089b      	lsreq	r3, r3, #2
   bad10:	3002      	addeq	r0, #2
   bad12:	07da      	lsls	r2, r3, #31
   bad14:	d403      	bmi.n	bad1e <__lo0bits+0x4e>
   bad16:	085b      	lsrs	r3, r3, #1
   bad18:	f100 0001 	add.w	r0, r0, #1
   bad1c:	d005      	beq.n	bad2a <__lo0bits+0x5a>
   bad1e:	600b      	str	r3, [r1, #0]
   bad20:	4770      	bx	lr
   bad22:	4610      	mov	r0, r2
   bad24:	e7e9      	b.n	bacfa <__lo0bits+0x2a>
   bad26:	2000      	movs	r0, #0
   bad28:	4770      	bx	lr
   bad2a:	2020      	movs	r0, #32
   bad2c:	4770      	bx	lr
	...

000bad30 <__i2b>:
   bad30:	b510      	push	{r4, lr}
   bad32:	460c      	mov	r4, r1
   bad34:	2101      	movs	r1, #1
   bad36:	f7ff feb9 	bl	baaac <_Balloc>
   bad3a:	4602      	mov	r2, r0
   bad3c:	b928      	cbnz	r0, bad4a <__i2b+0x1a>
   bad3e:	4b05      	ldr	r3, [pc, #20]	; (bad54 <__i2b+0x24>)
   bad40:	4805      	ldr	r0, [pc, #20]	; (bad58 <__i2b+0x28>)
   bad42:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bad46:	f7fb faab 	bl	b62a0 <__assert_func>
   bad4a:	2301      	movs	r3, #1
   bad4c:	6144      	str	r4, [r0, #20]
   bad4e:	6103      	str	r3, [r0, #16]
   bad50:	bd10      	pop	{r4, pc}
   bad52:	bf00      	nop
   bad54:	000bbed9 	.word	0x000bbed9
   bad58:	000bbf84 	.word	0x000bbf84

000bad5c <__multiply>:
   bad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bad60:	4691      	mov	r9, r2
   bad62:	690a      	ldr	r2, [r1, #16]
   bad64:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bad68:	429a      	cmp	r2, r3
   bad6a:	bfb8      	it	lt
   bad6c:	460b      	movlt	r3, r1
   bad6e:	460c      	mov	r4, r1
   bad70:	bfbc      	itt	lt
   bad72:	464c      	movlt	r4, r9
   bad74:	4699      	movlt	r9, r3
   bad76:	6927      	ldr	r7, [r4, #16]
   bad78:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bad7c:	68a3      	ldr	r3, [r4, #8]
   bad7e:	6861      	ldr	r1, [r4, #4]
   bad80:	eb07 060a 	add.w	r6, r7, sl
   bad84:	42b3      	cmp	r3, r6
   bad86:	b085      	sub	sp, #20
   bad88:	bfb8      	it	lt
   bad8a:	3101      	addlt	r1, #1
   bad8c:	f7ff fe8e 	bl	baaac <_Balloc>
   bad90:	b930      	cbnz	r0, bada0 <__multiply+0x44>
   bad92:	4602      	mov	r2, r0
   bad94:	4b44      	ldr	r3, [pc, #272]	; (baea8 <__multiply+0x14c>)
   bad96:	4845      	ldr	r0, [pc, #276]	; (baeac <__multiply+0x150>)
   bad98:	f240 115d 	movw	r1, #349	; 0x15d
   bad9c:	f7fb fa80 	bl	b62a0 <__assert_func>
   bada0:	f100 0514 	add.w	r5, r0, #20
   bada4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bada8:	462b      	mov	r3, r5
   badaa:	2200      	movs	r2, #0
   badac:	4543      	cmp	r3, r8
   badae:	d321      	bcc.n	badf4 <__multiply+0x98>
   badb0:	f104 0314 	add.w	r3, r4, #20
   badb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   badb8:	f109 0314 	add.w	r3, r9, #20
   badbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   badc0:	9202      	str	r2, [sp, #8]
   badc2:	1b3a      	subs	r2, r7, r4
   badc4:	3a15      	subs	r2, #21
   badc6:	f022 0203 	bic.w	r2, r2, #3
   badca:	3204      	adds	r2, #4
   badcc:	f104 0115 	add.w	r1, r4, #21
   badd0:	428f      	cmp	r7, r1
   badd2:	bf38      	it	cc
   badd4:	2204      	movcc	r2, #4
   badd6:	9201      	str	r2, [sp, #4]
   badd8:	9a02      	ldr	r2, [sp, #8]
   badda:	9303      	str	r3, [sp, #12]
   baddc:	429a      	cmp	r2, r3
   badde:	d80c      	bhi.n	badfa <__multiply+0x9e>
   bade0:	2e00      	cmp	r6, #0
   bade2:	dd03      	ble.n	badec <__multiply+0x90>
   bade4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bade8:	2b00      	cmp	r3, #0
   badea:	d05a      	beq.n	baea2 <__multiply+0x146>
   badec:	6106      	str	r6, [r0, #16]
   badee:	b005      	add	sp, #20
   badf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   badf4:	f843 2b04 	str.w	r2, [r3], #4
   badf8:	e7d8      	b.n	badac <__multiply+0x50>
   badfa:	f8b3 a000 	ldrh.w	sl, [r3]
   badfe:	f1ba 0f00 	cmp.w	sl, #0
   bae02:	d024      	beq.n	bae4e <__multiply+0xf2>
   bae04:	f104 0e14 	add.w	lr, r4, #20
   bae08:	46a9      	mov	r9, r5
   bae0a:	f04f 0c00 	mov.w	ip, #0
   bae0e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bae12:	f8d9 1000 	ldr.w	r1, [r9]
   bae16:	fa1f fb82 	uxth.w	fp, r2
   bae1a:	b289      	uxth	r1, r1
   bae1c:	fb0a 110b 	mla	r1, sl, fp, r1
   bae20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bae24:	f8d9 2000 	ldr.w	r2, [r9]
   bae28:	4461      	add	r1, ip
   bae2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bae2e:	fb0a c20b 	mla	r2, sl, fp, ip
   bae32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bae36:	b289      	uxth	r1, r1
   bae38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bae3c:	4577      	cmp	r7, lr
   bae3e:	f849 1b04 	str.w	r1, [r9], #4
   bae42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bae46:	d8e2      	bhi.n	bae0e <__multiply+0xb2>
   bae48:	9a01      	ldr	r2, [sp, #4]
   bae4a:	f845 c002 	str.w	ip, [r5, r2]
   bae4e:	9a03      	ldr	r2, [sp, #12]
   bae50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bae54:	3304      	adds	r3, #4
   bae56:	f1b9 0f00 	cmp.w	r9, #0
   bae5a:	d020      	beq.n	bae9e <__multiply+0x142>
   bae5c:	6829      	ldr	r1, [r5, #0]
   bae5e:	f104 0c14 	add.w	ip, r4, #20
   bae62:	46ae      	mov	lr, r5
   bae64:	f04f 0a00 	mov.w	sl, #0
   bae68:	f8bc b000 	ldrh.w	fp, [ip]
   bae6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bae70:	fb09 220b 	mla	r2, r9, fp, r2
   bae74:	4492      	add	sl, r2
   bae76:	b289      	uxth	r1, r1
   bae78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bae7c:	f84e 1b04 	str.w	r1, [lr], #4
   bae80:	f85c 2b04 	ldr.w	r2, [ip], #4
   bae84:	f8be 1000 	ldrh.w	r1, [lr]
   bae88:	0c12      	lsrs	r2, r2, #16
   bae8a:	fb09 1102 	mla	r1, r9, r2, r1
   bae8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bae92:	4567      	cmp	r7, ip
   bae94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bae98:	d8e6      	bhi.n	bae68 <__multiply+0x10c>
   bae9a:	9a01      	ldr	r2, [sp, #4]
   bae9c:	50a9      	str	r1, [r5, r2]
   bae9e:	3504      	adds	r5, #4
   baea0:	e79a      	b.n	badd8 <__multiply+0x7c>
   baea2:	3e01      	subs	r6, #1
   baea4:	e79c      	b.n	bade0 <__multiply+0x84>
   baea6:	bf00      	nop
   baea8:	000bbed9 	.word	0x000bbed9
   baeac:	000bbf84 	.word	0x000bbf84

000baeb0 <__pow5mult>:
   baeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baeb4:	4615      	mov	r5, r2
   baeb6:	f012 0203 	ands.w	r2, r2, #3
   baeba:	4606      	mov	r6, r0
   baebc:	460f      	mov	r7, r1
   baebe:	d007      	beq.n	baed0 <__pow5mult+0x20>
   baec0:	4c25      	ldr	r4, [pc, #148]	; (baf58 <__pow5mult+0xa8>)
   baec2:	3a01      	subs	r2, #1
   baec4:	2300      	movs	r3, #0
   baec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   baeca:	f7ff fe51 	bl	bab70 <__multadd>
   baece:	4607      	mov	r7, r0
   baed0:	10ad      	asrs	r5, r5, #2
   baed2:	d03d      	beq.n	baf50 <__pow5mult+0xa0>
   baed4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   baed6:	b97c      	cbnz	r4, baef8 <__pow5mult+0x48>
   baed8:	2010      	movs	r0, #16
   baeda:	f7fb f999 	bl	b6210 <malloc>
   baede:	4602      	mov	r2, r0
   baee0:	6270      	str	r0, [r6, #36]	; 0x24
   baee2:	b928      	cbnz	r0, baef0 <__pow5mult+0x40>
   baee4:	4b1d      	ldr	r3, [pc, #116]	; (baf5c <__pow5mult+0xac>)
   baee6:	481e      	ldr	r0, [pc, #120]	; (baf60 <__pow5mult+0xb0>)
   baee8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   baeec:	f7fb f9d8 	bl	b62a0 <__assert_func>
   baef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   baef4:	6004      	str	r4, [r0, #0]
   baef6:	60c4      	str	r4, [r0, #12]
   baef8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   baefc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   baf00:	b94c      	cbnz	r4, baf16 <__pow5mult+0x66>
   baf02:	f240 2171 	movw	r1, #625	; 0x271
   baf06:	4630      	mov	r0, r6
   baf08:	f7ff ff12 	bl	bad30 <__i2b>
   baf0c:	2300      	movs	r3, #0
   baf0e:	f8c8 0008 	str.w	r0, [r8, #8]
   baf12:	4604      	mov	r4, r0
   baf14:	6003      	str	r3, [r0, #0]
   baf16:	f04f 0900 	mov.w	r9, #0
   baf1a:	07eb      	lsls	r3, r5, #31
   baf1c:	d50a      	bpl.n	baf34 <__pow5mult+0x84>
   baf1e:	4639      	mov	r1, r7
   baf20:	4622      	mov	r2, r4
   baf22:	4630      	mov	r0, r6
   baf24:	f7ff ff1a 	bl	bad5c <__multiply>
   baf28:	4639      	mov	r1, r7
   baf2a:	4680      	mov	r8, r0
   baf2c:	4630      	mov	r0, r6
   baf2e:	f7ff fdfd 	bl	bab2c <_Bfree>
   baf32:	4647      	mov	r7, r8
   baf34:	106d      	asrs	r5, r5, #1
   baf36:	d00b      	beq.n	baf50 <__pow5mult+0xa0>
   baf38:	6820      	ldr	r0, [r4, #0]
   baf3a:	b938      	cbnz	r0, baf4c <__pow5mult+0x9c>
   baf3c:	4622      	mov	r2, r4
   baf3e:	4621      	mov	r1, r4
   baf40:	4630      	mov	r0, r6
   baf42:	f7ff ff0b 	bl	bad5c <__multiply>
   baf46:	6020      	str	r0, [r4, #0]
   baf48:	f8c0 9000 	str.w	r9, [r0]
   baf4c:	4604      	mov	r4, r0
   baf4e:	e7e4      	b.n	baf1a <__pow5mult+0x6a>
   baf50:	4638      	mov	r0, r7
   baf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   baf56:	bf00      	nop
   baf58:	000bc0f8 	.word	0x000bc0f8
   baf5c:	000bbce2 	.word	0x000bbce2
   baf60:	000bbf84 	.word	0x000bbf84

000baf64 <__lshift>:
   baf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   baf68:	460c      	mov	r4, r1
   baf6a:	6849      	ldr	r1, [r1, #4]
   baf6c:	6923      	ldr	r3, [r4, #16]
   baf6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   baf72:	68a3      	ldr	r3, [r4, #8]
   baf74:	4607      	mov	r7, r0
   baf76:	4691      	mov	r9, r2
   baf78:	ea4f 1a62 	mov.w	sl, r2, asr #5
   baf7c:	f108 0601 	add.w	r6, r8, #1
   baf80:	42b3      	cmp	r3, r6
   baf82:	db0b      	blt.n	baf9c <__lshift+0x38>
   baf84:	4638      	mov	r0, r7
   baf86:	f7ff fd91 	bl	baaac <_Balloc>
   baf8a:	4605      	mov	r5, r0
   baf8c:	b948      	cbnz	r0, bafa2 <__lshift+0x3e>
   baf8e:	4602      	mov	r2, r0
   baf90:	4b2a      	ldr	r3, [pc, #168]	; (bb03c <__lshift+0xd8>)
   baf92:	482b      	ldr	r0, [pc, #172]	; (bb040 <__lshift+0xdc>)
   baf94:	f240 11d9 	movw	r1, #473	; 0x1d9
   baf98:	f7fb f982 	bl	b62a0 <__assert_func>
   baf9c:	3101      	adds	r1, #1
   baf9e:	005b      	lsls	r3, r3, #1
   bafa0:	e7ee      	b.n	baf80 <__lshift+0x1c>
   bafa2:	2300      	movs	r3, #0
   bafa4:	f100 0114 	add.w	r1, r0, #20
   bafa8:	f100 0210 	add.w	r2, r0, #16
   bafac:	4618      	mov	r0, r3
   bafae:	4553      	cmp	r3, sl
   bafb0:	db37      	blt.n	bb022 <__lshift+0xbe>
   bafb2:	6920      	ldr	r0, [r4, #16]
   bafb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bafb8:	f104 0314 	add.w	r3, r4, #20
   bafbc:	f019 091f 	ands.w	r9, r9, #31
   bafc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bafc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bafc8:	d02f      	beq.n	bb02a <__lshift+0xc6>
   bafca:	f1c9 0e20 	rsb	lr, r9, #32
   bafce:	468a      	mov	sl, r1
   bafd0:	f04f 0c00 	mov.w	ip, #0
   bafd4:	681a      	ldr	r2, [r3, #0]
   bafd6:	fa02 f209 	lsl.w	r2, r2, r9
   bafda:	ea42 020c 	orr.w	r2, r2, ip
   bafde:	f84a 2b04 	str.w	r2, [sl], #4
   bafe2:	f853 2b04 	ldr.w	r2, [r3], #4
   bafe6:	4298      	cmp	r0, r3
   bafe8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bafec:	d8f2      	bhi.n	bafd4 <__lshift+0x70>
   bafee:	1b03      	subs	r3, r0, r4
   baff0:	3b15      	subs	r3, #21
   baff2:	f023 0303 	bic.w	r3, r3, #3
   baff6:	3304      	adds	r3, #4
   baff8:	f104 0215 	add.w	r2, r4, #21
   baffc:	4290      	cmp	r0, r2
   baffe:	bf38      	it	cc
   bb000:	2304      	movcc	r3, #4
   bb002:	f841 c003 	str.w	ip, [r1, r3]
   bb006:	f1bc 0f00 	cmp.w	ip, #0
   bb00a:	d001      	beq.n	bb010 <__lshift+0xac>
   bb00c:	f108 0602 	add.w	r6, r8, #2
   bb010:	3e01      	subs	r6, #1
   bb012:	4638      	mov	r0, r7
   bb014:	612e      	str	r6, [r5, #16]
   bb016:	4621      	mov	r1, r4
   bb018:	f7ff fd88 	bl	bab2c <_Bfree>
   bb01c:	4628      	mov	r0, r5
   bb01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb022:	f842 0f04 	str.w	r0, [r2, #4]!
   bb026:	3301      	adds	r3, #1
   bb028:	e7c1      	b.n	bafae <__lshift+0x4a>
   bb02a:	3904      	subs	r1, #4
   bb02c:	f853 2b04 	ldr.w	r2, [r3], #4
   bb030:	f841 2f04 	str.w	r2, [r1, #4]!
   bb034:	4298      	cmp	r0, r3
   bb036:	d8f9      	bhi.n	bb02c <__lshift+0xc8>
   bb038:	e7ea      	b.n	bb010 <__lshift+0xac>
   bb03a:	bf00      	nop
   bb03c:	000bbed9 	.word	0x000bbed9
   bb040:	000bbf84 	.word	0x000bbf84

000bb044 <__mcmp>:
   bb044:	b530      	push	{r4, r5, lr}
   bb046:	6902      	ldr	r2, [r0, #16]
   bb048:	690c      	ldr	r4, [r1, #16]
   bb04a:	1b12      	subs	r2, r2, r4
   bb04c:	d10e      	bne.n	bb06c <__mcmp+0x28>
   bb04e:	f100 0314 	add.w	r3, r0, #20
   bb052:	3114      	adds	r1, #20
   bb054:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb05c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb060:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb064:	42a5      	cmp	r5, r4
   bb066:	d003      	beq.n	bb070 <__mcmp+0x2c>
   bb068:	d305      	bcc.n	bb076 <__mcmp+0x32>
   bb06a:	2201      	movs	r2, #1
   bb06c:	4610      	mov	r0, r2
   bb06e:	bd30      	pop	{r4, r5, pc}
   bb070:	4283      	cmp	r3, r0
   bb072:	d3f3      	bcc.n	bb05c <__mcmp+0x18>
   bb074:	e7fa      	b.n	bb06c <__mcmp+0x28>
   bb076:	f04f 32ff 	mov.w	r2, #4294967295
   bb07a:	e7f7      	b.n	bb06c <__mcmp+0x28>

000bb07c <__mdiff>:
   bb07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb080:	460c      	mov	r4, r1
   bb082:	4606      	mov	r6, r0
   bb084:	4611      	mov	r1, r2
   bb086:	4620      	mov	r0, r4
   bb088:	4690      	mov	r8, r2
   bb08a:	f7ff ffdb 	bl	bb044 <__mcmp>
   bb08e:	1e05      	subs	r5, r0, #0
   bb090:	d110      	bne.n	bb0b4 <__mdiff+0x38>
   bb092:	4629      	mov	r1, r5
   bb094:	4630      	mov	r0, r6
   bb096:	f7ff fd09 	bl	baaac <_Balloc>
   bb09a:	b930      	cbnz	r0, bb0aa <__mdiff+0x2e>
   bb09c:	4b3a      	ldr	r3, [pc, #232]	; (bb188 <__mdiff+0x10c>)
   bb09e:	4602      	mov	r2, r0
   bb0a0:	f240 2132 	movw	r1, #562	; 0x232
   bb0a4:	4839      	ldr	r0, [pc, #228]	; (bb18c <__mdiff+0x110>)
   bb0a6:	f7fb f8fb 	bl	b62a0 <__assert_func>
   bb0aa:	2301      	movs	r3, #1
   bb0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb0b4:	bfa4      	itt	ge
   bb0b6:	4643      	movge	r3, r8
   bb0b8:	46a0      	movge	r8, r4
   bb0ba:	4630      	mov	r0, r6
   bb0bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb0c0:	bfa6      	itte	ge
   bb0c2:	461c      	movge	r4, r3
   bb0c4:	2500      	movge	r5, #0
   bb0c6:	2501      	movlt	r5, #1
   bb0c8:	f7ff fcf0 	bl	baaac <_Balloc>
   bb0cc:	b920      	cbnz	r0, bb0d8 <__mdiff+0x5c>
   bb0ce:	4b2e      	ldr	r3, [pc, #184]	; (bb188 <__mdiff+0x10c>)
   bb0d0:	4602      	mov	r2, r0
   bb0d2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb0d6:	e7e5      	b.n	bb0a4 <__mdiff+0x28>
   bb0d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb0dc:	6926      	ldr	r6, [r4, #16]
   bb0de:	60c5      	str	r5, [r0, #12]
   bb0e0:	f104 0914 	add.w	r9, r4, #20
   bb0e4:	f108 0514 	add.w	r5, r8, #20
   bb0e8:	f100 0e14 	add.w	lr, r0, #20
   bb0ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb0f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb0f4:	f108 0210 	add.w	r2, r8, #16
   bb0f8:	46f2      	mov	sl, lr
   bb0fa:	2100      	movs	r1, #0
   bb0fc:	f859 3b04 	ldr.w	r3, [r9], #4
   bb100:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb104:	fa1f f883 	uxth.w	r8, r3
   bb108:	fa11 f18b 	uxtah	r1, r1, fp
   bb10c:	0c1b      	lsrs	r3, r3, #16
   bb10e:	eba1 0808 	sub.w	r8, r1, r8
   bb112:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb116:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb11a:	fa1f f888 	uxth.w	r8, r8
   bb11e:	1419      	asrs	r1, r3, #16
   bb120:	454e      	cmp	r6, r9
   bb122:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb126:	f84a 3b04 	str.w	r3, [sl], #4
   bb12a:	d8e7      	bhi.n	bb0fc <__mdiff+0x80>
   bb12c:	1b33      	subs	r3, r6, r4
   bb12e:	3b15      	subs	r3, #21
   bb130:	f023 0303 	bic.w	r3, r3, #3
   bb134:	3304      	adds	r3, #4
   bb136:	3415      	adds	r4, #21
   bb138:	42a6      	cmp	r6, r4
   bb13a:	bf38      	it	cc
   bb13c:	2304      	movcc	r3, #4
   bb13e:	441d      	add	r5, r3
   bb140:	4473      	add	r3, lr
   bb142:	469e      	mov	lr, r3
   bb144:	462e      	mov	r6, r5
   bb146:	4566      	cmp	r6, ip
   bb148:	d30e      	bcc.n	bb168 <__mdiff+0xec>
   bb14a:	f10c 0203 	add.w	r2, ip, #3
   bb14e:	1b52      	subs	r2, r2, r5
   bb150:	f022 0203 	bic.w	r2, r2, #3
   bb154:	3d03      	subs	r5, #3
   bb156:	45ac      	cmp	ip, r5
   bb158:	bf38      	it	cc
   bb15a:	2200      	movcc	r2, #0
   bb15c:	441a      	add	r2, r3
   bb15e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb162:	b17b      	cbz	r3, bb184 <__mdiff+0x108>
   bb164:	6107      	str	r7, [r0, #16]
   bb166:	e7a3      	b.n	bb0b0 <__mdiff+0x34>
   bb168:	f856 8b04 	ldr.w	r8, [r6], #4
   bb16c:	fa11 f288 	uxtah	r2, r1, r8
   bb170:	1414      	asrs	r4, r2, #16
   bb172:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb176:	b292      	uxth	r2, r2
   bb178:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb17c:	f84e 2b04 	str.w	r2, [lr], #4
   bb180:	1421      	asrs	r1, r4, #16
   bb182:	e7e0      	b.n	bb146 <__mdiff+0xca>
   bb184:	3f01      	subs	r7, #1
   bb186:	e7ea      	b.n	bb15e <__mdiff+0xe2>
   bb188:	000bbed9 	.word	0x000bbed9
   bb18c:	000bbf84 	.word	0x000bbf84

000bb190 <__ulp>:
   bb190:	b082      	sub	sp, #8
   bb192:	ed8d 0b00 	vstr	d0, [sp]
   bb196:	9b01      	ldr	r3, [sp, #4]
   bb198:	4912      	ldr	r1, [pc, #72]	; (bb1e4 <__ulp+0x54>)
   bb19a:	4019      	ands	r1, r3
   bb19c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb1a0:	2900      	cmp	r1, #0
   bb1a2:	dd05      	ble.n	bb1b0 <__ulp+0x20>
   bb1a4:	2200      	movs	r2, #0
   bb1a6:	460b      	mov	r3, r1
   bb1a8:	ec43 2b10 	vmov	d0, r2, r3
   bb1ac:	b002      	add	sp, #8
   bb1ae:	4770      	bx	lr
   bb1b0:	4249      	negs	r1, r1
   bb1b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb1b6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb1ba:	f04f 0200 	mov.w	r2, #0
   bb1be:	f04f 0300 	mov.w	r3, #0
   bb1c2:	da04      	bge.n	bb1ce <__ulp+0x3e>
   bb1c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb1c8:	fa41 f300 	asr.w	r3, r1, r0
   bb1cc:	e7ec      	b.n	bb1a8 <__ulp+0x18>
   bb1ce:	f1a0 0114 	sub.w	r1, r0, #20
   bb1d2:	291e      	cmp	r1, #30
   bb1d4:	bfda      	itte	le
   bb1d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb1da:	fa20 f101 	lsrle.w	r1, r0, r1
   bb1de:	2101      	movgt	r1, #1
   bb1e0:	460a      	mov	r2, r1
   bb1e2:	e7e1      	b.n	bb1a8 <__ulp+0x18>
   bb1e4:	7ff00000 	.word	0x7ff00000

000bb1e8 <__b2d>:
   bb1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb1ea:	6905      	ldr	r5, [r0, #16]
   bb1ec:	f100 0714 	add.w	r7, r0, #20
   bb1f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb1f4:	1f2e      	subs	r6, r5, #4
   bb1f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb1fa:	4620      	mov	r0, r4
   bb1fc:	f7ff fd48 	bl	bac90 <__hi0bits>
   bb200:	f1c0 0320 	rsb	r3, r0, #32
   bb204:	280a      	cmp	r0, #10
   bb206:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb284 <__b2d+0x9c>
   bb20a:	600b      	str	r3, [r1, #0]
   bb20c:	dc14      	bgt.n	bb238 <__b2d+0x50>
   bb20e:	f1c0 0e0b 	rsb	lr, r0, #11
   bb212:	fa24 f10e 	lsr.w	r1, r4, lr
   bb216:	42b7      	cmp	r7, r6
   bb218:	ea41 030c 	orr.w	r3, r1, ip
   bb21c:	bf34      	ite	cc
   bb21e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb222:	2100      	movcs	r1, #0
   bb224:	3015      	adds	r0, #21
   bb226:	fa04 f000 	lsl.w	r0, r4, r0
   bb22a:	fa21 f10e 	lsr.w	r1, r1, lr
   bb22e:	ea40 0201 	orr.w	r2, r0, r1
   bb232:	ec43 2b10 	vmov	d0, r2, r3
   bb236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb238:	42b7      	cmp	r7, r6
   bb23a:	bf3a      	itte	cc
   bb23c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb240:	f1a5 0608 	subcc.w	r6, r5, #8
   bb244:	2100      	movcs	r1, #0
   bb246:	380b      	subs	r0, #11
   bb248:	d017      	beq.n	bb27a <__b2d+0x92>
   bb24a:	f1c0 0c20 	rsb	ip, r0, #32
   bb24e:	fa04 f500 	lsl.w	r5, r4, r0
   bb252:	42be      	cmp	r6, r7
   bb254:	fa21 f40c 	lsr.w	r4, r1, ip
   bb258:	ea45 0504 	orr.w	r5, r5, r4
   bb25c:	bf8c      	ite	hi
   bb25e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb262:	2400      	movls	r4, #0
   bb264:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb268:	fa01 f000 	lsl.w	r0, r1, r0
   bb26c:	fa24 f40c 	lsr.w	r4, r4, ip
   bb270:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb274:	ea40 0204 	orr.w	r2, r0, r4
   bb278:	e7db      	b.n	bb232 <__b2d+0x4a>
   bb27a:	ea44 030c 	orr.w	r3, r4, ip
   bb27e:	460a      	mov	r2, r1
   bb280:	e7d7      	b.n	bb232 <__b2d+0x4a>
   bb282:	bf00      	nop
   bb284:	3ff00000 	.word	0x3ff00000

000bb288 <__d2b>:
   bb288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb28c:	4689      	mov	r9, r1
   bb28e:	2101      	movs	r1, #1
   bb290:	ec57 6b10 	vmov	r6, r7, d0
   bb294:	4690      	mov	r8, r2
   bb296:	f7ff fc09 	bl	baaac <_Balloc>
   bb29a:	4604      	mov	r4, r0
   bb29c:	b930      	cbnz	r0, bb2ac <__d2b+0x24>
   bb29e:	4602      	mov	r2, r0
   bb2a0:	4b25      	ldr	r3, [pc, #148]	; (bb338 <__d2b+0xb0>)
   bb2a2:	4826      	ldr	r0, [pc, #152]	; (bb33c <__d2b+0xb4>)
   bb2a4:	f240 310a 	movw	r1, #778	; 0x30a
   bb2a8:	f7fa fffa 	bl	b62a0 <__assert_func>
   bb2ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb2b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb2b4:	bb35      	cbnz	r5, bb304 <__d2b+0x7c>
   bb2b6:	2e00      	cmp	r6, #0
   bb2b8:	9301      	str	r3, [sp, #4]
   bb2ba:	d028      	beq.n	bb30e <__d2b+0x86>
   bb2bc:	4668      	mov	r0, sp
   bb2be:	9600      	str	r6, [sp, #0]
   bb2c0:	f7ff fd06 	bl	bacd0 <__lo0bits>
   bb2c4:	9900      	ldr	r1, [sp, #0]
   bb2c6:	b300      	cbz	r0, bb30a <__d2b+0x82>
   bb2c8:	9a01      	ldr	r2, [sp, #4]
   bb2ca:	f1c0 0320 	rsb	r3, r0, #32
   bb2ce:	fa02 f303 	lsl.w	r3, r2, r3
   bb2d2:	430b      	orrs	r3, r1
   bb2d4:	40c2      	lsrs	r2, r0
   bb2d6:	6163      	str	r3, [r4, #20]
   bb2d8:	9201      	str	r2, [sp, #4]
   bb2da:	9b01      	ldr	r3, [sp, #4]
   bb2dc:	61a3      	str	r3, [r4, #24]
   bb2de:	2b00      	cmp	r3, #0
   bb2e0:	bf14      	ite	ne
   bb2e2:	2202      	movne	r2, #2
   bb2e4:	2201      	moveq	r2, #1
   bb2e6:	6122      	str	r2, [r4, #16]
   bb2e8:	b1d5      	cbz	r5, bb320 <__d2b+0x98>
   bb2ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb2ee:	4405      	add	r5, r0
   bb2f0:	f8c9 5000 	str.w	r5, [r9]
   bb2f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb2f8:	f8c8 0000 	str.w	r0, [r8]
   bb2fc:	4620      	mov	r0, r4
   bb2fe:	b003      	add	sp, #12
   bb300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb308:	e7d5      	b.n	bb2b6 <__d2b+0x2e>
   bb30a:	6161      	str	r1, [r4, #20]
   bb30c:	e7e5      	b.n	bb2da <__d2b+0x52>
   bb30e:	a801      	add	r0, sp, #4
   bb310:	f7ff fcde 	bl	bacd0 <__lo0bits>
   bb314:	9b01      	ldr	r3, [sp, #4]
   bb316:	6163      	str	r3, [r4, #20]
   bb318:	2201      	movs	r2, #1
   bb31a:	6122      	str	r2, [r4, #16]
   bb31c:	3020      	adds	r0, #32
   bb31e:	e7e3      	b.n	bb2e8 <__d2b+0x60>
   bb320:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb324:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb328:	f8c9 0000 	str.w	r0, [r9]
   bb32c:	6918      	ldr	r0, [r3, #16]
   bb32e:	f7ff fcaf 	bl	bac90 <__hi0bits>
   bb332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb336:	e7df      	b.n	bb2f8 <__d2b+0x70>
   bb338:	000bbed9 	.word	0x000bbed9
   bb33c:	000bbf84 	.word	0x000bbf84

000bb340 <__ratio>:
   bb340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb344:	4688      	mov	r8, r1
   bb346:	4669      	mov	r1, sp
   bb348:	4681      	mov	r9, r0
   bb34a:	f7ff ff4d 	bl	bb1e8 <__b2d>
   bb34e:	a901      	add	r1, sp, #4
   bb350:	4640      	mov	r0, r8
   bb352:	ec55 4b10 	vmov	r4, r5, d0
   bb356:	f7ff ff47 	bl	bb1e8 <__b2d>
   bb35a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb35e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb362:	eba3 0c02 	sub.w	ip, r3, r2
   bb366:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb36a:	1a9b      	subs	r3, r3, r2
   bb36c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb370:	ec51 0b10 	vmov	r0, r1, d0
   bb374:	2b00      	cmp	r3, #0
   bb376:	bfd6      	itet	le
   bb378:	460a      	movle	r2, r1
   bb37a:	462a      	movgt	r2, r5
   bb37c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb380:	468b      	mov	fp, r1
   bb382:	462f      	mov	r7, r5
   bb384:	bfd4      	ite	le
   bb386:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb38a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb38e:	4620      	mov	r0, r4
   bb390:	ee10 2a10 	vmov	r2, s0
   bb394:	465b      	mov	r3, fp
   bb396:	4639      	mov	r1, r7
   bb398:	f7f9 f928 	bl	b45ec <__aeabi_ddiv>
   bb39c:	ec41 0b10 	vmov	d0, r0, r1
   bb3a0:	b003      	add	sp, #12
   bb3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb3a6 <__copybits>:
   bb3a6:	3901      	subs	r1, #1
   bb3a8:	b570      	push	{r4, r5, r6, lr}
   bb3aa:	1149      	asrs	r1, r1, #5
   bb3ac:	6914      	ldr	r4, [r2, #16]
   bb3ae:	3101      	adds	r1, #1
   bb3b0:	f102 0314 	add.w	r3, r2, #20
   bb3b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb3b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb3bc:	1f05      	subs	r5, r0, #4
   bb3be:	42a3      	cmp	r3, r4
   bb3c0:	d30c      	bcc.n	bb3dc <__copybits+0x36>
   bb3c2:	1aa3      	subs	r3, r4, r2
   bb3c4:	3b11      	subs	r3, #17
   bb3c6:	f023 0303 	bic.w	r3, r3, #3
   bb3ca:	3211      	adds	r2, #17
   bb3cc:	42a2      	cmp	r2, r4
   bb3ce:	bf88      	it	hi
   bb3d0:	2300      	movhi	r3, #0
   bb3d2:	4418      	add	r0, r3
   bb3d4:	2300      	movs	r3, #0
   bb3d6:	4288      	cmp	r0, r1
   bb3d8:	d305      	bcc.n	bb3e6 <__copybits+0x40>
   bb3da:	bd70      	pop	{r4, r5, r6, pc}
   bb3dc:	f853 6b04 	ldr.w	r6, [r3], #4
   bb3e0:	f845 6f04 	str.w	r6, [r5, #4]!
   bb3e4:	e7eb      	b.n	bb3be <__copybits+0x18>
   bb3e6:	f840 3b04 	str.w	r3, [r0], #4
   bb3ea:	e7f4      	b.n	bb3d6 <__copybits+0x30>

000bb3ec <__any_on>:
   bb3ec:	f100 0214 	add.w	r2, r0, #20
   bb3f0:	6900      	ldr	r0, [r0, #16]
   bb3f2:	114b      	asrs	r3, r1, #5
   bb3f4:	4298      	cmp	r0, r3
   bb3f6:	b510      	push	{r4, lr}
   bb3f8:	db11      	blt.n	bb41e <__any_on+0x32>
   bb3fa:	dd0a      	ble.n	bb412 <__any_on+0x26>
   bb3fc:	f011 011f 	ands.w	r1, r1, #31
   bb400:	d007      	beq.n	bb412 <__any_on+0x26>
   bb402:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb406:	fa24 f001 	lsr.w	r0, r4, r1
   bb40a:	fa00 f101 	lsl.w	r1, r0, r1
   bb40e:	428c      	cmp	r4, r1
   bb410:	d10b      	bne.n	bb42a <__any_on+0x3e>
   bb412:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb416:	4293      	cmp	r3, r2
   bb418:	d803      	bhi.n	bb422 <__any_on+0x36>
   bb41a:	2000      	movs	r0, #0
   bb41c:	bd10      	pop	{r4, pc}
   bb41e:	4603      	mov	r3, r0
   bb420:	e7f7      	b.n	bb412 <__any_on+0x26>
   bb422:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb426:	2900      	cmp	r1, #0
   bb428:	d0f5      	beq.n	bb416 <__any_on+0x2a>
   bb42a:	2001      	movs	r0, #1
   bb42c:	e7f6      	b.n	bb41c <__any_on+0x30>

000bb42e <_calloc_r>:
   bb42e:	b513      	push	{r0, r1, r4, lr}
   bb430:	434a      	muls	r2, r1
   bb432:	4611      	mov	r1, r2
   bb434:	9201      	str	r2, [sp, #4]
   bb436:	f7fa ff23 	bl	b6280 <_malloc_r>
   bb43a:	4604      	mov	r4, r0
   bb43c:	b118      	cbz	r0, bb446 <_calloc_r+0x18>
   bb43e:	9a01      	ldr	r2, [sp, #4]
   bb440:	2100      	movs	r1, #0
   bb442:	f7fd ffc3 	bl	b93cc <memset>
   bb446:	4620      	mov	r0, r4
   bb448:	b002      	add	sp, #8
   bb44a:	bd10      	pop	{r4, pc}
   bb44c:	0000      	movs	r0, r0
	...

000bb450 <nan>:
   bb450:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb458 <nan+0x8>
   bb454:	4770      	bx	lr
   bb456:	bf00      	nop
   bb458:	00000000 	.word	0x00000000
   bb45c:	7ff80000 	.word	0x7ff80000

000bb460 <nanf>:
   bb460:	ed9f 0a01 	vldr	s0, [pc, #4]	; bb468 <nanf+0x8>
   bb464:	4770      	bx	lr
   bb466:	bf00      	nop
   bb468:	7fc00000 	.word	0x7fc00000

000bb46c <__ascii_wctomb>:
   bb46c:	b149      	cbz	r1, bb482 <__ascii_wctomb+0x16>
   bb46e:	2aff      	cmp	r2, #255	; 0xff
   bb470:	bf85      	ittet	hi
   bb472:	238a      	movhi	r3, #138	; 0x8a
   bb474:	6003      	strhi	r3, [r0, #0]
   bb476:	700a      	strbls	r2, [r1, #0]
   bb478:	f04f 30ff 	movhi.w	r0, #4294967295
   bb47c:	bf98      	it	ls
   bb47e:	2001      	movls	r0, #1
   bb480:	4770      	bx	lr
   bb482:	4608      	mov	r0, r1
   bb484:	4770      	bx	lr

000bb486 <link_code_end>:
	...

000bb488 <link_const_data_start>:
   bb488:	00000000 	.word	0x00000000
   bb48c:	34fb0000 	.word	0x34fb0000
   bb490:	00805f9b 	.word	0x00805f9b
   bb494:	10008000 	.word	0x10008000
	...

000bb4a0 <dynalib_user>:
   bb4a0:	000b4b15 000b4b51 000b4b79 000b4b7d     .K..QK..yK..}K..
   bb4b0:	00000000 74696157 20676e69 20726f66     ....Waiting for 
   bb4c0:	63454c42 6e65696c 6f632074 63656e6e     BLEclient connec
   bb4d0:	6e6f6974 002e2e2e 68006425 20657265     tion....%d.here 
   bb4e0:	73207369 20656d6f 74786574 74615700     is some text.Wat
   bb4f0:	6f6e2074 4b440077 6f54204b 00796164     t now.DKK Today.
   bb500:	35323462 34303430 3462662d 37342d62     b4250404-fb4b-47
   bb510:	622d3634 2d306232 30663339 31313665     46-b2b0-93f0e611
   bb520:	36633232 32346200 30343035 62662d33     22c6.b4250403-fb
   bb530:	342d6234 2d363437 30623262 6633392d     4b-4746-b2b0-93f
   bb540:	31366530 63323231 34620036 34303532     0e61122c6.b42504
   bb550:	662d3230 2d623462 36343734 6232622d     02-fb4b-4746-b2b
   bb560:	33392d30 36653066 32323131 62003663     0-93f0e61122c6.b
   bb570:	30353234 2d313034 62346266 3437342d     4250401-fb4b-474
   bb580:	32622d36 392d3062 65306633 32313136     6-b2b0-93f0e6112
   bb590:	00366332 61316633 36393531 3765652d     2c6.3f1a1596-ee7
   bb5a0:	32342d66 382d6462 2d316434 32613162     f-42bd-84d1-b1a2
   bb5b0:	38663439 66636532 67724100 4d506e6f     94f82ecf.ArgonPM
   bb5c0:	73616200 735f6369 6e697274 613a3a67     .basic_string::a
   bb5d0:	6e657070 207b0064 61657922 203a2272     ppend.{ "year": 
   bb5e0:	22642522 2200202c 746e6f6d 203a2268     "%d", ."month": 
   bb5f0:	32302522 202c2264 61642200 203a2279     "%02d", ."day": 
   bb600:	32302522 202c2264 61642200 77745f79     "%02d", ."day_tw
   bb610:	203a226f 32302522 202c2264 6f682200     o": "%02d", ."ho
   bb620:	3a227275 30252220 20226432 6c65007d     ur": "%02d" }.el
   bb630:	73697270 62007265 63697361 7274735f     priser.basic_str
   bb640:	3a676e69 5f4d5f3a 736e6f63 63757274     ing::_M_construc
   bb650:	756e2074 6e206c6c 7620746f 64696c61     t null not valid
   bb660:	74656700 6972705f 00736563 70206f4e     .get_prices.No p
   bb670:	65636972 65792073 74200074 3025206f     rices yet. to %0
   bb680:	202c6432 64323025 6f742000 2c343220     2d, %02d. to 24,
   bb690:	32302520 74200064 3025206f 4c006432      %02d. to %02d.L
   bb6a0:	5020776f 65636972 746e4920 61767265     ow Price Interva
   bb6b0:	003a736c 74636576 3a3a726f 725f4d5f     ls:.vector::_M_r
   bb6c0:	6c6c6165 695f636f 7265736e 654d0074     ealloc_insert.Me
   bb6d0:	67617373 61642065 69206174 74276e73     ssage data isn't
   bb6e0:	61657220 79207964 002e7465 7373654d      ready yet..Mess
   bb6f0:	20656761 65737361 656c626d 73002e64     age assembled..s
   bb700:	00696f74 666f7473 73654d00 65676173     toi.stof.Message
   bb710:	74614420 65522061 76696563 002e6465      Data Received..

000bb720 <_ZTV5Timer>:
	...
   bb728:	000b50dd 000b5121 000b4f49              .P..!Q..IO..

000bb734 <_ZTVN5spark13EthernetClassE>:
	...
   bb73c:	000b632f 000b6325 000b631b 000b6311     /c..%c...c...c..
   bb74c:	000b6305 000b62f9 000b8721 000b8729     .c...b..!...)...
   bb75c:	000b62ed 000b62e5 000b62db 000b62d1     .b...b...b...b..
   bb76c:	000b8759 65737341 6f697472 6961466e     Y...AssertionFai
   bb77c:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   bb78c:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   bb79c:	7265766f 20676e69 76726573 73656369     overing services
   bb7ac:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   bb7bc:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   bb7cc:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   bb7dc:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   bb7ec:	00454e4f 72656550 76656420 20656369     ONE.Peer device 
   bb7fc:	6d207369 69737369 0021676e 6c696146     is missing!.Fail
   bb80c:	74206465 7061206f 646e6570 65657020     ed to append pee
   bb81c:	65432072 6172746e 6564206c 65636976     r Central device
   bb82c:	6f43002e 63656e6e 20646574 43207962     ..Connected by C
   bb83c:	72746e65 64206c61 63697665 44002e65     entral device..D
   bb84c:	6f637369 63656e6e 20646574 72207962     isconnected by r
   bb85c:	746f6d65 65642065 65636976 7544002e     emote device..Du
   bb86c:	63696c70 64657461 61686320 74636172     plicated charact
   bb87c:	73697265 20636974 6e6e6163 6220746f     eristic cannot b
   bb88c:	64612065 2e646564 69614600 2064656c     e added..Failed 
   bb89c:	61206f74 6e657070 6f6c2064 206c6163     to append local 
   bb8ac:	72616863 65746361 74736972 002e6369     characteristic..

000bb8bc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb8c4:	000b65d3 000b6635 000b6709 000b665f     .e..5f...g.._f..
   bb8d4:	000b65d5                                .e..

000bb8d8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb8e0:	000b65cf 000b6643 000b65d1 000b6665     .e..Cf...e..ef..
   bb8f0:	000b65f5                                .e..

000bb8f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb8fc:	000b65cd 000b6651 000b6e9d 000b666b     .e..Qf...n..kf..
   bb90c:	000b6615                                .f..

000bb910 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bb918 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bb918:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bb928 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bb928:	5f9b34fb 80000080 00001000 00000000     .4._............
   bb938:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bb948:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bb958 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb960:	000b7d21 000b7d27 000b7d65 000b7d35     !}..'}..e}..5}..
   bb970:	000b7d23                                #}..

000bb974 <_ZTV9IPAddress>:
	...
   bb97c:	000b827d 000b826d 000b826f              }...m...o...

000bb988 <_ZTV9USBSerial>:
	...
   bb990:	000b8363 000b83cb 000b83a1 000b7911     c............y..
   bb9a0:	000b8393 000b8365 000b8375 000b83c5     ....e...u.......
   bb9b0:	000b8385 000b835d                       ....]...

000bb9b8 <_ZTV11USARTSerial>:
	...
   bb9c0:	000b851d 000b8589 000b8561 000b7911     ........a....y..
   bb9d0:	000b8531 000b854d 000b853f 000b855b     1...M...?...[...
   bb9e0:	000b851f 000b8523                       ....#...

000bb9e8 <_ZTV7TwoWire>:
	...
   bb9f0:	000b85e9 000b8633 000b860b 000b85eb     ....3...........
   bba00:	000b8613 000b861b 000b8623 000b862b     ........#...+...

000bba10 <_ZTVN5spark9WiFiClassE>:
	...
   bba18:	000b86c3 000b86b9 000b86af 000b8665     ............e...
   bba28:	000b86a3 000b8697 000b8721 000b8729     ........!...)...
   bba38:	000b868b 000b8683 000b8679 000b866f     ........y...o...
   bba48:	000b8759                                Y...

000bba4c <_ZTVN5spark12NetworkClassE>:
	...
   bba54:	000b86e1 000b86eb 000b86f5 000b86ff     ................
   bba64:	000b8709 000b8715 000b8721 000b8729     ........!...)...
   bba74:	000b8731 000b873d 000b8745 000b874f     1...=...E...O...
   bba84:	000b8759                                Y...

000bba88 <_ZSt7nothrow>:
	...

000bba89 <_ZTSSt19_Sp_make_shared_tag>:
   bba89:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bba99:	5f646572 00676174                        red_tag....

000bbaa4 <_ZTISt19_Sp_make_shared_tag>:
   bbaa4:	000bbbf0 000bba89 20746f6e 756f6e65     ........not enou
   bbab4:	73206867 65636170 726f6620 726f6620     gh space for for
   bbac4:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   bbad4:	7361656c 75732065 74696d62 6c756620     lease submit ful
   bbae4:	7562206c 65722067 74726f70 20746120     l bug report at 
   bbaf4:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   bbb04:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   bbb14:	32313000 36353433 00393837 69736162     .0123456789.basi
   bbb24:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   bbb34:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
   bbb44:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
   bbb54:	2d736968 7a69733e 20292865 69687728     his->size() (whi
   bbb64:	69206863 7a252073 62002975 63697361     ch is %zu).basic
   bbb74:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
   bbb84:	00656361 69736162 74735f63 676e6972     ace.basic_string
   bbb94:	61623a3a 5f636973 69727473 6200676e     ::basic_string.b
   bbba4:	63697361 7274735f 3a676e69 6275733a     asic_string::sub
   bbbb4:	00727473                                str.

000bbbb8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bbbb8:	000bbc50 000bbbc4 000bbc74              P.......t...

000bbbc4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bbbc4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bbbd4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bbbe4:	00000045                                E...

000bbbe8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bbbe8:	00000000 000bbbb8 000b912d 000b9141     ........-...A...
   bbbf8:	000b92d5 000b92d5 000b91ab 000b90ed     ................
   bbc08:	000b9193 000b9155 000b911f              ....U.......

000bbc14 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bbc14:	000bbc50 000bbc20 000bbbb8              P... .......

000bbc20 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bbc20:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bbc30:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bbc40:	456f666e 00000000                       nfoE....

000bbc48 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bbc48:	00000000 000bbc14 000b91d5 000b91e9     ................
   bbc58:	000b92d5 000b92d5 000b91ab 000b90ed     ................
   bbc68:	000b92a9 000b9235 000b91fd              ....5.......

000bbc74 <_ZTISt9type_info>:
   bbc74:	000bbbf0 000bbc7c                       ....|...

000bbc7c <_ZTSSt9type_info>:
   bbc7c:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   bbc8c:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   bbc9c:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000bbca9 <day_name.1>:
   bbca9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bbcb9:	61536972                                 riSat

000bbcbe <mon_name.0>:
   bbcbe:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bbcce:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bbcde:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bbcee:	63757320 64656563 2f006465 2f746e6d      succeeded./mnt/
   bbcfe:	6b726f77 63617073 6f772f65 70736b72     workspace/worksp
   bbd0e:	2f656361 2d434347 702d3031 6c657069     ace/GCC-10-pipel
   bbd1e:	2f656e69 6b6e656a 2d736e69 2d434347     ine/jenkins-GCC-
   bbd2e:	702d3031 6c657069 2d656e69 325f3834     10-pipeline-48_2
   bbd3e:	31303230 5f343231 36303631 36303831     0201124_16061806
   bbd4e:	732f3134 6e2f6372 696c7765 656e2f62     41/src/newlib/ne
   bbd5e:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
   bbd6e:	6e61722f 00632e64 6900666e 7974696e     /rand.c.nf.inity
   bbd7e:	006e6100                                 .an...

000bbd84 <fpi.1>:
   bbd84:	00000035 fffffbce 000003cb 00000001     5...............
   bbd94:	00000000                                ....

000bbd98 <fpinan.0>:
   bbd98:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bbdb0 <tinytens>:
   bbdb0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bbdc0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bbdd0:	64ac6f43 11680628                       Co.d(.h.

000bbdd8 <_ctype_>:
   bbdd8:	20202000 20202020 28282020 20282828     .         ((((( 
   bbde8:	20202020 20202020 20202020 20202020                     
   bbdf8:	10108820 10101010 10101010 10101010      ...............
   bbe08:	04040410 04040404 10040404 10101010     ................
   bbe18:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bbe28:	01010101 01010101 01010101 10101010     ................
   bbe38:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bbe48:	02020202 02020202 02020202 10101010     ................
   bbe58:	00000020 00000000 00000000 00000000      ...............
	...
   bbed8:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bbee8:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bbef8:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bbf08:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bbf18:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bbf28:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bbf38:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bbf48:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bbf58:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bbf68:	78656874 0000632e                       thex.c..

000bbf70 <_C_numeric_locale>:
   bbf70:	000bb4d6 000bbca8 2003e374 4f500043     ........t.. C.PO
   bbf80:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bbf90:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bbfa0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bbfb0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bbfc0:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bbfd0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bbfe0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bbff0:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bc000:	00000063 00000000                       c.......

000bc008 <__mprec_bigtens>:
   bc008:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bc018:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bc028:	7f73bf3c 75154fdd                       <.s..O.u

000bc030 <__mprec_tens>:
   bc030:	00000000 3ff00000 00000000 40240000     .......?......$@
   bc040:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bc050:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bc060:	00000000 412e8480 00000000 416312d0     .......A......cA
   bc070:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bc080:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bc090:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bc0a0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bc0b0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bc0c0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bc0d0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bc0e0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bc0f0:	79d99db4 44ea7843                       ...yCx.D

000bc0f8 <p05.0>:
   bc0f8:	00000005 00000019 0000007d              ........}...

000bc104 <link_const_data_end>:
   bc104:	000b4de9 	.word	0x000b4de9
   bc108:	000b5b75 	.word	0x000b5b75
   bc10c:	000b6339 	.word	0x000b6339
   bc110:	000b6361 	.word	0x000b6361
   bc114:	000b7901 	.word	0x000b7901
   bc118:	000b79d1 	.word	0x000b79d1
   bc11c:	000b7bc1 	.word	0x000b7bc1
   bc120:	000b7bdd 	.word	0x000b7bdd
   bc124:	000b86cd 	.word	0x000b86cd
   bc128:	000b8831 	.word	0x000b8831
