
c:/Users/mikeh/IOT_Project/Power_monitor/power_monitor/target/5.0.1/argon/power_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a434  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be454  000be454  0000e454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000210  2003e1e8  000be478  0001e1e8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003fc  2003e3f8  2003e3f8  0003e3f8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000be688  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000be68c  000be68c  0002e68c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000be692  000be692  0002e692  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000be6b6  000be6b6  0002e6b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00183b11  00000000  00000000  0002e6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00018efe  00000000  00000000  001b21cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004ad63  00000000  00000000  001cb0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003958  00000000  00000000  00215e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ce28  00000000  00000000  00219784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043289  00000000  00000000  002265ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00053108  00000000  00000000  00269835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015c8db  00000000  00000000  002bc93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c0b4  00000000  00000000  00419218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_f2lz>:
   b4a28:	ee07 0a90 	vmov	s15, r0
   b4a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a34:	d401      	bmi.n	b4a3a <__aeabi_f2lz+0x12>
   b4a36:	f000 b80b 	b.w	b4a50 <__aeabi_f2ulz>
   b4a3a:	eef1 7a67 	vneg.f32	s15, s15
   b4a3e:	b508      	push	{r3, lr}
   b4a40:	ee17 0a90 	vmov	r0, s15
   b4a44:	f000 f804 	bl	b4a50 <__aeabi_f2ulz>
   b4a48:	4240      	negs	r0, r0
   b4a4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a4e:	bd08      	pop	{r3, pc}

000b4a50 <__aeabi_f2ulz>:
   b4a50:	b5d0      	push	{r4, r6, r7, lr}
   b4a52:	f7ff fc49 	bl	b42e8 <__aeabi_f2d>
   b4a56:	4b0c      	ldr	r3, [pc, #48]	; (b4a88 <__aeabi_f2ulz+0x38>)
   b4a58:	2200      	movs	r2, #0
   b4a5a:	4606      	mov	r6, r0
   b4a5c:	460f      	mov	r7, r1
   b4a5e:	f7ff fc9b 	bl	b4398 <__aeabi_dmul>
   b4a62:	f7ff ff71 	bl	b4948 <__aeabi_d2uiz>
   b4a66:	4604      	mov	r4, r0
   b4a68:	f7ff fc1c 	bl	b42a4 <__aeabi_ui2d>
   b4a6c:	4b07      	ldr	r3, [pc, #28]	; (b4a8c <__aeabi_f2ulz+0x3c>)
   b4a6e:	2200      	movs	r2, #0
   b4a70:	f7ff fc92 	bl	b4398 <__aeabi_dmul>
   b4a74:	4602      	mov	r2, r0
   b4a76:	460b      	mov	r3, r1
   b4a78:	4630      	mov	r0, r6
   b4a7a:	4639      	mov	r1, r7
   b4a7c:	f7ff fad4 	bl	b4028 <__aeabi_dsub>
   b4a80:	f7ff ff62 	bl	b4948 <__aeabi_d2uiz>
   b4a84:	4621      	mov	r1, r4
   b4a86:	bdd0      	pop	{r4, r6, r7, pc}
   b4a88:	3df00000 	.word	0x3df00000
   b4a8c:	41f00000 	.word	0x41f00000

000b4a90 <__aeabi_d2ulz>:
   b4a90:	b5d0      	push	{r4, r6, r7, lr}
   b4a92:	4b0c      	ldr	r3, [pc, #48]	; (b4ac4 <__aeabi_d2ulz+0x34>)
   b4a94:	2200      	movs	r2, #0
   b4a96:	4606      	mov	r6, r0
   b4a98:	460f      	mov	r7, r1
   b4a9a:	f7ff fc7d 	bl	b4398 <__aeabi_dmul>
   b4a9e:	f7ff ff53 	bl	b4948 <__aeabi_d2uiz>
   b4aa2:	4604      	mov	r4, r0
   b4aa4:	f7ff fbfe 	bl	b42a4 <__aeabi_ui2d>
   b4aa8:	4b07      	ldr	r3, [pc, #28]	; (b4ac8 <__aeabi_d2ulz+0x38>)
   b4aaa:	2200      	movs	r2, #0
   b4aac:	f7ff fc74 	bl	b4398 <__aeabi_dmul>
   b4ab0:	4602      	mov	r2, r0
   b4ab2:	460b      	mov	r3, r1
   b4ab4:	4630      	mov	r0, r6
   b4ab6:	4639      	mov	r1, r7
   b4ab8:	f7ff fab6 	bl	b4028 <__aeabi_dsub>
   b4abc:	f7ff ff44 	bl	b4948 <__aeabi_d2uiz>
   b4ac0:	4621      	mov	r1, r4
   b4ac2:	bdd0      	pop	{r4, r6, r7, pc}
   b4ac4:	3df00000 	.word	0x3df00000
   b4ac8:	41f00000 	.word	0x41f00000
   b4acc:	00000000 	.word	0x00000000

000b4ad0 <memchr>:
   b4ad0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4ad4:	2a10      	cmp	r2, #16
   b4ad6:	db2b      	blt.n	b4b30 <memchr+0x60>
   b4ad8:	f010 0f07 	tst.w	r0, #7
   b4adc:	d008      	beq.n	b4af0 <memchr+0x20>
   b4ade:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4ae2:	3a01      	subs	r2, #1
   b4ae4:	428b      	cmp	r3, r1
   b4ae6:	d02d      	beq.n	b4b44 <memchr+0x74>
   b4ae8:	f010 0f07 	tst.w	r0, #7
   b4aec:	b342      	cbz	r2, b4b40 <memchr+0x70>
   b4aee:	d1f6      	bne.n	b4ade <memchr+0xe>
   b4af0:	b4f0      	push	{r4, r5, r6, r7}
   b4af2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4af6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b4afa:	f022 0407 	bic.w	r4, r2, #7
   b4afe:	f07f 0700 	mvns.w	r7, #0
   b4b02:	2300      	movs	r3, #0
   b4b04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4b08:	3c08      	subs	r4, #8
   b4b0a:	ea85 0501 	eor.w	r5, r5, r1
   b4b0e:	ea86 0601 	eor.w	r6, r6, r1
   b4b12:	fa85 f547 	uadd8	r5, r5, r7
   b4b16:	faa3 f587 	sel	r5, r3, r7
   b4b1a:	fa86 f647 	uadd8	r6, r6, r7
   b4b1e:	faa5 f687 	sel	r6, r5, r7
   b4b22:	b98e      	cbnz	r6, b4b48 <memchr+0x78>
   b4b24:	d1ee      	bne.n	b4b04 <memchr+0x34>
   b4b26:	bcf0      	pop	{r4, r5, r6, r7}
   b4b28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4b2c:	f002 0207 	and.w	r2, r2, #7
   b4b30:	b132      	cbz	r2, b4b40 <memchr+0x70>
   b4b32:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4b36:	3a01      	subs	r2, #1
   b4b38:	ea83 0301 	eor.w	r3, r3, r1
   b4b3c:	b113      	cbz	r3, b4b44 <memchr+0x74>
   b4b3e:	d1f8      	bne.n	b4b32 <memchr+0x62>
   b4b40:	2000      	movs	r0, #0
   b4b42:	4770      	bx	lr
   b4b44:	3801      	subs	r0, #1
   b4b46:	4770      	bx	lr
   b4b48:	2d00      	cmp	r5, #0
   b4b4a:	bf06      	itte	eq
   b4b4c:	4635      	moveq	r5, r6
   b4b4e:	3803      	subeq	r0, #3
   b4b50:	3807      	subne	r0, #7
   b4b52:	f015 0f01 	tst.w	r5, #1
   b4b56:	d107      	bne.n	b4b68 <memchr+0x98>
   b4b58:	3001      	adds	r0, #1
   b4b5a:	f415 7f80 	tst.w	r5, #256	; 0x100
   b4b5e:	bf02      	ittt	eq
   b4b60:	3001      	addeq	r0, #1
   b4b62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b4b66:	3001      	addeq	r0, #1
   b4b68:	bcf0      	pop	{r4, r5, r6, r7}
   b4b6a:	3801      	subs	r0, #1
   b4b6c:	4770      	bx	lr
   b4b6e:	bf00      	nop

000b4b70 <strcmp>:
   b4b70:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4b74:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4b78:	2a01      	cmp	r2, #1
   b4b7a:	bf28      	it	cs
   b4b7c:	429a      	cmpcs	r2, r3
   b4b7e:	d0f7      	beq.n	b4b70 <strcmp>
   b4b80:	1ad0      	subs	r0, r2, r3
   b4b82:	4770      	bx	lr

000b4b84 <strlen>:
   b4b84:	4603      	mov	r3, r0
   b4b86:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4b8a:	2a00      	cmp	r2, #0
   b4b8c:	d1fb      	bne.n	b4b86 <strlen+0x2>
   b4b8e:	1a18      	subs	r0, r3, r0
   b4b90:	3801      	subs	r0, #1
   b4b92:	4770      	bx	lr

000b4b94 <__aeabi_d2lz>:
   b4b94:	b538      	push	{r3, r4, r5, lr}
   b4b96:	2200      	movs	r2, #0
   b4b98:	2300      	movs	r3, #0
   b4b9a:	4604      	mov	r4, r0
   b4b9c:	460d      	mov	r5, r1
   b4b9e:	f7ff fe6d 	bl	b487c <__aeabi_dcmplt>
   b4ba2:	b928      	cbnz	r0, b4bb0 <__aeabi_d2lz+0x1c>
   b4ba4:	4620      	mov	r0, r4
   b4ba6:	4629      	mov	r1, r5
   b4ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4bac:	f7ff bf70 	b.w	b4a90 <__aeabi_d2ulz>
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4bb6:	f7ff ff6b 	bl	b4a90 <__aeabi_d2ulz>
   b4bba:	4240      	negs	r0, r0
   b4bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4bc0:	bd38      	pop	{r3, r4, r5, pc}
   b4bc2:	bf00      	nop

000b4bc4 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4bc4:	4809      	ldr	r0, [pc, #36]	; (b4bec <module_user_pre_init+0x28>)
   b4bc6:	490a      	ldr	r1, [pc, #40]	; (b4bf0 <module_user_pre_init+0x2c>)
   b4bc8:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4bca:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4bcc:	d005      	beq.n	b4bda <module_user_pre_init+0x16>
   b4bce:	4a09      	ldr	r2, [pc, #36]	; (b4bf4 <module_user_pre_init+0x30>)
   b4bd0:	4282      	cmp	r2, r0
   b4bd2:	d002      	beq.n	b4bda <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4bd4:	1a12      	subs	r2, r2, r0
   b4bd6:	f006 fc5d 	bl	bb494 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4bda:	4807      	ldr	r0, [pc, #28]	; (b4bf8 <module_user_pre_init+0x34>)
   b4bdc:	4a07      	ldr	r2, [pc, #28]	; (b4bfc <module_user_pre_init+0x38>)
   b4bde:	2100      	movs	r1, #0
   b4be0:	1a12      	subs	r2, r2, r0
   b4be2:	f006 fc7f 	bl	bb4e4 <memset>
    return &link_global_data_start;
}
   b4be6:	4801      	ldr	r0, [pc, #4]	; (b4bec <module_user_pre_init+0x28>)
   b4be8:	bd08      	pop	{r3, pc}
   b4bea:	bf00      	nop
   b4bec:	2003e1e8 	.word	0x2003e1e8
   b4bf0:	000be478 	.word	0x000be478
   b4bf4:	2003e3f8 	.word	0x2003e3f8
   b4bf8:	2003e3f8 	.word	0x2003e3f8
   b4bfc:	2003e7f4 	.word	0x2003e7f4

000b4c00 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4c00:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4c02:	4e07      	ldr	r6, [pc, #28]	; (b4c20 <module_user_init+0x20>)
   b4c04:	4c07      	ldr	r4, [pc, #28]	; (b4c24 <module_user_init+0x24>)
    module_user_init_hook();
   b4c06:	f005 f8cf 	bl	b9da8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4c0a:	1ba4      	subs	r4, r4, r6
   b4c0c:	08a4      	lsrs	r4, r4, #2
   b4c0e:	2500      	movs	r5, #0
   b4c10:	42ac      	cmp	r4, r5
   b4c12:	d100      	bne.n	b4c16 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4c14:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4c16:	f856 3b04 	ldr.w	r3, [r6], #4
   b4c1a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4c1c:	3501      	adds	r5, #1
   b4c1e:	e7f7      	b.n	b4c10 <module_user_init+0x10>
   b4c20:	000be424 	.word	0x000be424
   b4c24:	000be454 	.word	0x000be454

000b4c28 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4c28:	f001 b902 	b.w	b5e30 <setup>

000b4c2c <module_user_loop>:
}

void module_user_loop() {
   b4c2c:	b508      	push	{r3, lr}
    loop();
   b4c2e:	f001 f81f 	bl	b5c70 <loop>
    _post_loop();
}
   b4c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4c36:	f005 b86f 	b.w	b9d18 <_post_loop>

000b4c3a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4c3a:	f002 bfe7 	b.w	b7c0c <malloc>

000b4c3e <_Znaj>:
   b4c3e:	f002 bfe5 	b.w	b7c0c <malloc>

000b4c42 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4c42:	f002 bfeb 	b.w	b7c1c <free>

000b4c46 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4c46:	f002 bfe9 	b.w	b7c1c <free>

000b4c4a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4c4a:	7800      	ldrb	r0, [r0, #0]
   b4c4c:	fab0 f080 	clz	r0, r0
   b4c50:	0940      	lsrs	r0, r0, #5
   b4c52:	4770      	bx	lr

000b4c54 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4c54:	2301      	movs	r3, #1
   b4c56:	7003      	strb	r3, [r0, #0]
   b4c58:	4770      	bx	lr

000b4c5a <parse_hex4>:
static unsigned parse_hex4(const unsigned char * const input)
{
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
   b4c5a:	2200      	movs	r2, #0
{
   b4c5c:	b510      	push	{r4, lr}
   b4c5e:	4604      	mov	r4, r0
    unsigned int h = 0;
   b4c60:	4610      	mov	r0, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
   b4c62:	5ca1      	ldrb	r1, [r4, r2]
   b4c64:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   b4c68:	2b09      	cmp	r3, #9
   b4c6a:	d80b      	bhi.n	b4c84 <parse_hex4+0x2a>
        {
            h += (unsigned int) input[i] - '0';
   b4c6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
   b4c70:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   b4c72:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   b4c76:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
   b4c7a:	bf18      	it	ne
   b4c7c:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   b4c7e:	2a04      	cmp	r2, #4
   b4c80:	d1ef      	bne.n	b4c62 <parse_hex4+0x8>
        }
    }

    return h;
}
   b4c82:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   b4c84:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   b4c88:	2b05      	cmp	r3, #5
   b4c8a:	d802      	bhi.n	b4c92 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   b4c8c:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   b4c90:	e7ee      	b.n	b4c70 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   b4c92:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   b4c96:	2b05      	cmp	r3, #5
   b4c98:	d802      	bhi.n	b4ca0 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   b4c9a:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   b4c9e:	e7e7      	b.n	b4c70 <parse_hex4+0x16>
            return 0;
   b4ca0:	2000      	movs	r0, #0
   b4ca2:	e7ee      	b.n	b4c82 <parse_hex4+0x28>

000b4ca4 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
   b4ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b4ca8:	680a      	ldr	r2, [r1, #0]
   b4caa:	688b      	ldr	r3, [r1, #8]
{
   b4cac:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b4cae:	1c5d      	adds	r5, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
   b4cb0:	18d0      	adds	r0, r2, r3
   b4cb2:	5cd3      	ldrb	r3, [r2, r3]
   b4cb4:	2b22      	cmp	r3, #34	; 0x22
{
   b4cb6:	468a      	mov	sl, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b4cb8:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   b4cba:	f040 80dd 	bne.w	b4e78 <parse_string+0x1d4>

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   b4cbe:	684c      	ldr	r4, [r1, #4]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b4cc0:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   b4cc2:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   b4cc4:	1ab9      	subs	r1, r7, r2
   b4cc6:	42a1      	cmp	r1, r4
   b4cc8:	f080 80d6 	bcs.w	b4e78 <parse_string+0x1d4>
   b4ccc:	7839      	ldrb	r1, [r7, #0]
   b4cce:	2922      	cmp	r1, #34	; 0x22
   b4cd0:	d10e      	bne.n	b4cf0 <parse_string+0x4c>
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   b4cd2:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   b4cd6:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   b4cd8:	f8da 2010 	ldr.w	r2, [sl, #16]
   b4cdc:	4418      	add	r0, r3
   b4cde:	4790      	blx	r2
        if (output == NULL)
   b4ce0:	4683      	mov	fp, r0
   b4ce2:	2800      	cmp	r0, #0
   b4ce4:	f000 80c8 	beq.w	b4e78 <parse_string+0x1d4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   b4ce8:	f8df 9198 	ldr.w	r9, [pc, #408]	; b4e84 <parse_string+0x1e0>
   b4cec:	4604      	mov	r4, r0
   b4cee:	e00f      	b.n	b4d10 <parse_string+0x6c>
            if (input_end[0] == '\\')
   b4cf0:	295c      	cmp	r1, #92	; 0x5c
   b4cf2:	d105      	bne.n	b4d00 <parse_string+0x5c>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   b4cf4:	3701      	adds	r7, #1
   b4cf6:	1ab9      	subs	r1, r7, r2
   b4cf8:	428c      	cmp	r4, r1
   b4cfa:	f240 80bd 	bls.w	b4e78 <parse_string+0x1d4>
                skipped_bytes++;
   b4cfe:	3301      	adds	r3, #1
            input_end++;
   b4d00:	3701      	adds	r7, #1
   b4d02:	e7df      	b.n	b4cc4 <parse_string+0x20>

    output_pointer = output;
    /* loop through the string literal */
    while (input_pointer < input_end)
    {
        if (*input_pointer != '\\')
   b4d04:	782b      	ldrb	r3, [r5, #0]
   b4d06:	2b5c      	cmp	r3, #92	; 0x5c
   b4d08:	d012      	beq.n	b4d30 <parse_string+0x8c>
        {
            *output_pointer++ = *input_pointer++;
   b4d0a:	f804 3b01 	strb.w	r3, [r4], #1
   b4d0e:	3501      	adds	r5, #1
    while (input_pointer < input_end)
   b4d10:	42bd      	cmp	r5, r7
   b4d12:	d3f7      	bcc.n	b4d04 <parse_string+0x60>
            input_pointer += sequence_length;
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
   b4d14:	2300      	movs	r3, #0
   b4d16:	7023      	strb	r3, [r4, #0]

    item->type = cJSON_String;
   b4d18:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
   b4d1a:	e9c8 3b03 	strd	r3, fp, [r8, #12]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   b4d1e:	f8da 3000 	ldr.w	r3, [sl]
   b4d22:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
   b4d24:	3301      	adds	r3, #1
   b4d26:	f8ca 3008 	str.w	r3, [sl, #8]

    return true;
   b4d2a:	2001      	movs	r0, #1
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
}
   b4d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   b4d30:	1b7a      	subs	r2, r7, r5
   b4d32:	2a00      	cmp	r2, #0
   b4d34:	dd0d      	ble.n	b4d52 <parse_string+0xae>
            switch (input_pointer[1])
   b4d36:	786b      	ldrb	r3, [r5, #1]
   b4d38:	2b75      	cmp	r3, #117	; 0x75
   b4d3a:	d80a      	bhi.n	b4d52 <parse_string+0xae>
   b4d3c:	2b6d      	cmp	r3, #109	; 0x6d
   b4d3e:	d812      	bhi.n	b4d66 <parse_string+0xc2>
   b4d40:	2b62      	cmp	r3, #98	; 0x62
   b4d42:	d02b      	beq.n	b4d9c <parse_string+0xf8>
   b4d44:	d826      	bhi.n	b4d94 <parse_string+0xf0>
   b4d46:	2b2f      	cmp	r3, #47	; 0x2f
   b4d48:	d029      	beq.n	b4d9e <parse_string+0xfa>
   b4d4a:	2b5c      	cmp	r3, #92	; 0x5c
   b4d4c:	d027      	beq.n	b4d9e <parse_string+0xfa>
   b4d4e:	2b22      	cmp	r3, #34	; 0x22
   b4d50:	d025      	beq.n	b4d9e <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   b4d52:	f8da 3014 	ldr.w	r3, [sl, #20]
   b4d56:	4658      	mov	r0, fp
   b4d58:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   b4d5a:	f8da 0000 	ldr.w	r0, [sl]
   b4d5e:	1a28      	subs	r0, r5, r0
   b4d60:	f8ca 0008 	str.w	r0, [sl, #8]
   b4d64:	e08b      	b.n	b4e7e <parse_string+0x1da>
   b4d66:	3b6e      	subs	r3, #110	; 0x6e
   b4d68:	2b07      	cmp	r3, #7
   b4d6a:	d8f2      	bhi.n	b4d52 <parse_string+0xae>
   b4d6c:	a101      	add	r1, pc, #4	; (adr r1, b4d74 <parse_string+0xd0>)
   b4d6e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   b4d72:	bf00      	nop
   b4d74:	000b4da9 	.word	0x000b4da9
   b4d78:	000b4d53 	.word	0x000b4d53
   b4d7c:	000b4d53 	.word	0x000b4d53
   b4d80:	000b4d53 	.word	0x000b4d53
   b4d84:	000b4dad 	.word	0x000b4dad
   b4d88:	000b4d53 	.word	0x000b4d53
   b4d8c:	000b4db1 	.word	0x000b4db1
   b4d90:	000b4db5 	.word	0x000b4db5
            switch (input_pointer[1])
   b4d94:	2b66      	cmp	r3, #102	; 0x66
   b4d96:	d1dc      	bne.n	b4d52 <parse_string+0xae>
                    *output_pointer++ = '\f';
   b4d98:	230c      	movs	r3, #12
   b4d9a:	e000      	b.n	b4d9e <parse_string+0xfa>
                    *output_pointer++ = '\b';
   b4d9c:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   b4d9e:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   b4da2:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   b4da4:	441d      	add	r5, r3
   b4da6:	e7b3      	b.n	b4d10 <parse_string+0x6c>
                    *output_pointer++ = '\n';
   b4da8:	230a      	movs	r3, #10
   b4daa:	e7f8      	b.n	b4d9e <parse_string+0xfa>
                    *output_pointer++ = '\r';
   b4dac:	230d      	movs	r3, #13
   b4dae:	e7f6      	b.n	b4d9e <parse_string+0xfa>
                    *output_pointer++ = '\t';
   b4db0:	2309      	movs	r3, #9
   b4db2:	e7f4      	b.n	b4d9e <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   b4db4:	2a05      	cmp	r2, #5
   b4db6:	ddcc      	ble.n	b4d52 <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   b4db8:	1ca8      	adds	r0, r5, #2
   b4dba:	f7ff ff4e 	bl	b4c5a <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   b4dbe:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   b4dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   b4dc6:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   b4dc8:	d3c3      	bcc.n	b4d52 <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   b4dca:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   b4dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b4dd2:	d22d      	bcs.n	b4e30 <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   b4dd4:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   b4dd6:	1afb      	subs	r3, r7, r3
   b4dd8:	2b05      	cmp	r3, #5
   b4dda:	ddba      	ble.n	b4d52 <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   b4ddc:	79ab      	ldrb	r3, [r5, #6]
   b4dde:	2b5c      	cmp	r3, #92	; 0x5c
   b4de0:	d1b7      	bne.n	b4d52 <parse_string+0xae>
   b4de2:	79eb      	ldrb	r3, [r5, #7]
   b4de4:	2b75      	cmp	r3, #117	; 0x75
   b4de6:	d1b4      	bne.n	b4d52 <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   b4de8:	f105 0008 	add.w	r0, r5, #8
   b4dec:	f7ff ff35 	bl	b4c5a <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   b4df0:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   b4df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b4df8:	d2ab      	bcs.n	b4d52 <parse_string+0xae>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   b4dfa:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   b4dfe:	f3c0 0009 	ubfx	r0, r0, #0, #10
   b4e02:	4330      	orrs	r0, r6
   b4e04:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
   b4e08:	230c      	movs	r3, #12
        first_byte_mark = 0xF0; /* 11110000 */
   b4e0a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   b4e0e:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b4e10:	f100 3eff 	add.w	lr, r0, #4294967295
   b4e14:	fa54 fe8e 	uxtab	lr, r4, lr
   b4e18:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   b4e1a:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b4e1c:	d124      	bne.n	b4e68 <parse_string+0x1c4>
    if (utf8_length > 1)
   b4e1e:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   b4e20:	bf14      	ite	ne
   b4e22:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   b4e26:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   b4e2a:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   b4e2c:	4404      	add	r4, r0
                    if (sequence_length == 0)
   b4e2e:	e7b9      	b.n	b4da4 <parse_string+0x100>
    if (codepoint < 0x80)
   b4e30:	287f      	cmp	r0, #127	; 0x7f
   b4e32:	d90a      	bls.n	b4e4a <parse_string+0x1a6>
    else if (codepoint < 0x800)
   b4e34:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   b4e38:	d30c      	bcc.n	b4e54 <parse_string+0x1b0>
    else if (codepoint < 0x10000)
   b4e3a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   b4e3e:	d30e      	bcc.n	b4e5e <parse_string+0x1ba>
    else if (codepoint <= 0x10FFFF)
   b4e40:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   b4e44:	d285      	bcs.n	b4d52 <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   b4e46:	2306      	movs	r3, #6
   b4e48:	e7df      	b.n	b4e0a <parse_string+0x166>
   b4e4a:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   b4e4c:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   b4e50:	2001      	movs	r0, #1
   b4e52:	e7dd      	b.n	b4e10 <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   b4e54:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   b4e56:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   b4e5a:	2002      	movs	r0, #2
   b4e5c:	e7d8      	b.n	b4e10 <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   b4e5e:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   b4e60:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   b4e64:	2003      	movs	r0, #3
   b4e66:	e7d3      	b.n	b4e10 <parse_string+0x16c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   b4e68:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   b4e6c:	f062 017f 	orn	r1, r2, #127	; 0x7f
   b4e70:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
   b4e74:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b4e76:	e7cf      	b.n	b4e18 <parse_string+0x174>
    if (input_pointer != NULL)
   b4e78:	2d00      	cmp	r5, #0
   b4e7a:	f47f af6e 	bne.w	b4d5a <parse_string+0xb6>
    return false;
   b4e7e:	2000      	movs	r0, #0
   b4e80:	e754      	b.n	b4d2c <parse_string+0x88>
   b4e82:	bf00      	nop
   b4e84:	000ffc00 	.word	0x000ffc00

000b4e88 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
   b4e88:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   b4e8a:	b140      	cbz	r0, b4e9e <buffer_skip_whitespace+0x16>
   b4e8c:	6801      	ldr	r1, [r0, #0]
   b4e8e:	b171      	cbz	r1, b4eae <buffer_skip_whitespace+0x26>
    {
        return NULL;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   b4e90:	6842      	ldr	r2, [r0, #4]
   b4e92:	6883      	ldr	r3, [r0, #8]
   b4e94:	4293      	cmp	r3, r2
   b4e96:	d206      	bcs.n	b4ea6 <buffer_skip_whitespace+0x1e>
   b4e98:	5ccc      	ldrb	r4, [r1, r3]
   b4e9a:	2c20      	cmp	r4, #32
   b4e9c:	d900      	bls.n	b4ea0 <buffer_skip_whitespace+0x18>
    {
        buffer->offset--;
    }

    return buffer;
}
   b4e9e:	bd10      	pop	{r4, pc}
       buffer->offset++;
   b4ea0:	3301      	adds	r3, #1
   b4ea2:	6083      	str	r3, [r0, #8]
   b4ea4:	e7f5      	b.n	b4e92 <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   b4ea6:	d1fa      	bne.n	b4e9e <buffer_skip_whitespace+0x16>
        buffer->offset--;
   b4ea8:	3a01      	subs	r2, #1
   b4eaa:	6082      	str	r2, [r0, #8]
   b4eac:	e7f7      	b.n	b4e9e <buffer_skip_whitespace+0x16>
        return NULL;
   b4eae:	4608      	mov	r0, r1
   b4eb0:	e7f5      	b.n	b4e9e <buffer_skip_whitespace+0x16>

000b4eb2 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
    cJSON *current_child = NULL;

    if (array == NULL)
   b4eb2:	b110      	cbz	r0, b4eba <get_array_item+0x8>
    {
        return NULL;
    }

    current_child = array->child;
   b4eb4:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   b4eb6:	b100      	cbz	r0, b4eba <get_array_item+0x8>
   b4eb8:	b901      	cbnz	r1, b4ebc <get_array_item+0xa>
        index--;
        current_child = current_child->next;
    }

    return current_child;
}
   b4eba:	4770      	bx	lr
        current_child = current_child->next;
   b4ebc:	6800      	ldr	r0, [r0, #0]
        index--;
   b4ebe:	3901      	subs	r1, #1
        current_child = current_child->next;
   b4ec0:	e7f9      	b.n	b4eb6 <get_array_item+0x4>

000b4ec2 <update_offset>:
{
   b4ec2:	b538      	push	{r3, r4, r5, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   b4ec4:	4604      	mov	r4, r0
   b4ec6:	b138      	cbz	r0, b4ed8 <update_offset+0x16>
   b4ec8:	6800      	ldr	r0, [r0, #0]
   b4eca:	b128      	cbz	r0, b4ed8 <update_offset+0x16>
    buffer_pointer = buffer->buffer + buffer->offset;
   b4ecc:	68a5      	ldr	r5, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   b4ece:	4428      	add	r0, r5
   b4ed0:	f7ff fe58 	bl	b4b84 <strlen>
   b4ed4:	4428      	add	r0, r5
   b4ed6:	60a0      	str	r0, [r4, #8]
}
   b4ed8:	bd38      	pop	{r3, r4, r5, pc}

000b4eda <ensure>:
{
   b4eda:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   b4edc:	4604      	mov	r4, r0
   b4ede:	b1b8      	cbz	r0, b4f10 <ensure+0x36>
   b4ee0:	6805      	ldr	r5, [r0, #0]
   b4ee2:	b165      	cbz	r5, b4efe <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   b4ee4:	6843      	ldr	r3, [r0, #4]
   b4ee6:	b113      	cbz	r3, b4eee <ensure+0x14>
   b4ee8:	6882      	ldr	r2, [r0, #8]
   b4eea:	4293      	cmp	r3, r2
   b4eec:	d910      	bls.n	b4f10 <ensure+0x36>
    if (needed > INT_MAX)
   b4eee:	2900      	cmp	r1, #0
   b4ef0:	db0e      	blt.n	b4f10 <ensure+0x36>
    needed += p->offset + 1;
   b4ef2:	68a2      	ldr	r2, [r4, #8]
   b4ef4:	1c4e      	adds	r6, r1, #1
   b4ef6:	4416      	add	r6, r2
    if (needed <= p->length)
   b4ef8:	42b3      	cmp	r3, r6
   b4efa:	d302      	bcc.n	b4f02 <ensure+0x28>
        return p->buffer + p->offset;
   b4efc:	4415      	add	r5, r2
}
   b4efe:	4628      	mov	r0, r5
   b4f00:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   b4f02:	6923      	ldr	r3, [r4, #16]
   b4f04:	b923      	cbnz	r3, b4f10 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   b4f06:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   b4f0a:	d303      	bcc.n	b4f14 <ensure+0x3a>
        if (needed <= INT_MAX)
   b4f0c:	2e00      	cmp	r6, #0
   b4f0e:	da0f      	bge.n	b4f30 <ensure+0x56>
        return NULL;
   b4f10:	2500      	movs	r5, #0
   b4f12:	e7f4      	b.n	b4efe <ensure+0x24>
        newsize = needed * 2;
   b4f14:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   b4f16:	6a23      	ldr	r3, [r4, #32]
   b4f18:	b16b      	cbz	r3, b4f36 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   b4f1a:	4628      	mov	r0, r5
   b4f1c:	4631      	mov	r1, r6
   b4f1e:	4798      	blx	r3
        if (newbuffer == NULL)
   b4f20:	4605      	mov	r5, r0
   b4f22:	b9b0      	cbnz	r0, b4f52 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   b4f24:	69e3      	ldr	r3, [r4, #28]
   b4f26:	6820      	ldr	r0, [r4, #0]
   b4f28:	4798      	blx	r3
            p->buffer = NULL;
   b4f2a:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   b4f2e:	e7e6      	b.n	b4efe <ensure+0x24>
            newsize = INT_MAX;
   b4f30:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   b4f34:	e7ef      	b.n	b4f16 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   b4f36:	69a3      	ldr	r3, [r4, #24]
   b4f38:	4630      	mov	r0, r6
   b4f3a:	4798      	blx	r3
        if (!newbuffer)
   b4f3c:	4605      	mov	r5, r0
   b4f3e:	2800      	cmp	r0, #0
   b4f40:	d0f0      	beq.n	b4f24 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   b4f42:	68a2      	ldr	r2, [r4, #8]
   b4f44:	6821      	ldr	r1, [r4, #0]
   b4f46:	3201      	adds	r2, #1
   b4f48:	f006 faa4 	bl	bb494 <memcpy>
        p->hooks.deallocate(p->buffer);
   b4f4c:	69e3      	ldr	r3, [r4, #28]
   b4f4e:	6820      	ldr	r0, [r4, #0]
   b4f50:	4798      	blx	r3
    return newbuffer + p->offset;
   b4f52:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   b4f54:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   b4f58:	441d      	add	r5, r3
   b4f5a:	e7d0      	b.n	b4efe <ensure+0x24>

000b4f5c <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
   b4f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f5e:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
   b4f60:	4604      	mov	r4, r0
   b4f62:	2800      	cmp	r0, #0
   b4f64:	d034      	beq.n	b4fd0 <get_object_item+0x74>
   b4f66:	2900      	cmp	r1, #0
   b4f68:	d031      	beq.n	b4fce <get_object_item+0x72>
    {
        return NULL;
    }

    current_element = object->child;
   b4f6a:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   b4f6c:	b9fa      	cbnz	r2, b4fae <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   b4f6e:	4e19      	ldr	r6, [pc, #100]	; (b4fd4 <get_object_item+0x78>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   b4f70:	b374      	cbz	r4, b4fd0 <get_object_item+0x74>
   b4f72:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   b4f74:	b1c3      	cbz	r3, b4fa8 <get_object_item+0x4c>
    if (string1 == string2)
   b4f76:	42ab      	cmp	r3, r5
   b4f78:	d021      	beq.n	b4fbe <get_object_item+0x62>
   b4f7a:	f105 3cff 	add.w	ip, r5, #4294967295
   b4f7e:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   b4f80:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   b4f84:	5d8a      	ldrb	r2, [r1, r6]
   b4f86:	f002 0203 	and.w	r2, r2, #3
   b4f8a:	2a01      	cmp	r2, #1
   b4f8c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   b4f90:	5cb0      	ldrb	r0, [r6, r2]
   b4f92:	f000 0003 	and.w	r0, r0, #3
   b4f96:	460f      	mov	r7, r1
   b4f98:	bf08      	it	eq
   b4f9a:	f101 0720 	addeq.w	r7, r1, #32
   b4f9e:	2801      	cmp	r0, #1
   b4fa0:	bf08      	it	eq
   b4fa2:	3220      	addeq	r2, #32
   b4fa4:	4297      	cmp	r7, r2
   b4fa6:	d00f      	beq.n	b4fc8 <get_object_item+0x6c>
        {
            current_element = current_element->next;
   b4fa8:	6824      	ldr	r4, [r4, #0]
   b4faa:	e7e1      	b.n	b4f70 <get_object_item+0x14>
            current_element = current_element->next;
   b4fac:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   b4fae:	b17c      	cbz	r4, b4fd0 <get_object_item+0x74>
   b4fb0:	6a21      	ldr	r1, [r4, #32]
   b4fb2:	b121      	cbz	r1, b4fbe <get_object_item+0x62>
   b4fb4:	4628      	mov	r0, r5
   b4fb6:	f7ff fddb 	bl	b4b70 <strcmp>
   b4fba:	2800      	cmp	r0, #0
   b4fbc:	d1f6      	bne.n	b4fac <get_object_item+0x50>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
   b4fbe:	6a23      	ldr	r3, [r4, #32]
        return NULL;
   b4fc0:	2b00      	cmp	r3, #0
   b4fc2:	bf08      	it	eq
   b4fc4:	2400      	moveq	r4, #0
   b4fc6:	e003      	b.n	b4fd0 <get_object_item+0x74>
        if (*string1 == '\0')
   b4fc8:	2900      	cmp	r1, #0
   b4fca:	d1d9      	bne.n	b4f80 <get_object_item+0x24>
   b4fcc:	e7f7      	b.n	b4fbe <get_object_item+0x62>
        return NULL;
   b4fce:	460c      	mov	r4, r1
        return NULL;
    }

    return current_element;
}
   b4fd0:	4620      	mov	r0, r4
   b4fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4fd4:	000be007 	.word	0x000be007

000b4fd8 <add_item_to_array>:

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
    cJSON *child = NULL;

    if ((item == NULL) || (array == NULL))
   b4fd8:	b161      	cbz	r1, b4ff4 <add_item_to_array+0x1c>
   b4fda:	b160      	cbz	r0, b4ff6 <add_item_to_array+0x1e>
    {
        return false;
    }

    child = array->child;
   b4fdc:	6883      	ldr	r3, [r0, #8]

    if (child == NULL)
   b4fde:	b913      	cbnz	r3, b4fe6 <add_item_to_array+0xe>
    {
        /* list is empty, start new one */
        array->child = item;
   b4fe0:	6081      	str	r1, [r0, #8]
}
   b4fe2:	2001      	movs	r0, #1
   b4fe4:	4770      	bx	lr
    }
    else
    {
        /* append to the end */
        while (child->next)
   b4fe6:	461a      	mov	r2, r3
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	2b00      	cmp	r3, #0
   b4fec:	d1fb      	bne.n	b4fe6 <add_item_to_array+0xe>
    prev->next = item;
   b4fee:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   b4ff0:	604a      	str	r2, [r1, #4]
   b4ff2:	e7f6      	b.n	b4fe2 <add_item_to_array+0xa>
        return false;
   b4ff4:	4608      	mov	r0, r1
        }
        suffix_object(child, item);
    }

    return true;
}
   b4ff6:	4770      	bx	lr

000b4ff8 <print_string_ptr>:
{
   b4ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ffc:	4606      	mov	r6, r0
    if (output_buffer == NULL)
   b4ffe:	4608      	mov	r0, r1
   b5000:	b911      	cbnz	r1, b5008 <print_string_ptr+0x10>
        return false;
   b5002:	2000      	movs	r0, #0
}
   b5004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   b5008:	b336      	cbz	r6, b5058 <print_string_ptr+0x60>
   b500a:	4f44      	ldr	r7, [pc, #272]	; (b511c <print_string_ptr+0x124>)
   b500c:	4631      	mov	r1, r6
    size_t escape_characters = 0;
   b500e:	f04f 0a00 	mov.w	sl, #0
   b5012:	2401      	movs	r4, #1
   b5014:	460d      	mov	r5, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   b5016:	f811 3b01 	ldrb.w	r3, [r1], #1
   b501a:	bb3b      	cbnz	r3, b506c <print_string_ptr+0x74>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   b501c:	1bad      	subs	r5, r5, r6
   b501e:	4455      	add	r5, sl
    output = ensure(output_buffer, output_length + sizeof("\"\""));
   b5020:	1ce9      	adds	r1, r5, #3
   b5022:	f7ff ff5a 	bl	b4eda <ensure>
    if (output == NULL)
   b5026:	4607      	mov	r7, r0
   b5028:	2800      	cmp	r0, #0
   b502a:	d0ea      	beq.n	b5002 <print_string_ptr+0xa>
    if (escape_characters == 0)
   b502c:	f04f 0b22 	mov.w	fp, #34	; 0x22
        memcpy(output + 1, input, output_length);
   b5030:	1c44      	adds	r4, r0, #1
        output[output_length + 1] = '\"';
   b5032:	f105 0901 	add.w	r9, r5, #1
        output[output_length + 2] = '\0';
   b5036:	f105 0802 	add.w	r8, r5, #2
        output[0] = '\"';
   b503a:	f880 b000 	strb.w	fp, [r0]
    if (escape_characters == 0)
   b503e:	f1ba 0f00 	cmp.w	sl, #0
   b5042:	d129      	bne.n	b5098 <print_string_ptr+0xa0>
        memcpy(output + 1, input, output_length);
   b5044:	462a      	mov	r2, r5
   b5046:	4631      	mov	r1, r6
   b5048:	4620      	mov	r0, r4
   b504a:	f006 fa23 	bl	bb494 <memcpy>
        output[output_length + 1] = '\"';
   b504e:	f807 b009 	strb.w	fp, [r7, r9]
        output[output_length + 2] = '\0';
   b5052:	f807 a008 	strb.w	sl, [r7, r8]
        return true;
   b5056:	e007      	b.n	b5068 <print_string_ptr+0x70>
        output = ensure(output_buffer, sizeof("\"\""));
   b5058:	2103      	movs	r1, #3
   b505a:	f7ff ff3e 	bl	b4eda <ensure>
        if (output == NULL)
   b505e:	2800      	cmp	r0, #0
   b5060:	d0cf      	beq.n	b5002 <print_string_ptr+0xa>
        strcpy((char*)output, "\"\"");
   b5062:	492f      	ldr	r1, [pc, #188]	; (b5120 <print_string_ptr+0x128>)
   b5064:	f006 fa74 	bl	bb550 <strcpy>
    return true;
   b5068:	2001      	movs	r0, #1
   b506a:	e7cb      	b.n	b5004 <print_string_ptr+0xc>
        switch (*input_pointer)
   b506c:	2b22      	cmp	r3, #34	; 0x22
   b506e:	d80b      	bhi.n	b5088 <print_string_ptr+0x90>
   b5070:	2b07      	cmp	r3, #7
   b5072:	d90c      	bls.n	b508e <print_string_ptr+0x96>
   b5074:	f1a3 0208 	sub.w	r2, r3, #8
   b5078:	b2d2      	uxtb	r2, r2
   b507a:	fa04 f202 	lsl.w	r2, r4, r2
   b507e:	423a      	tst	r2, r7
   b5080:	d005      	beq.n	b508e <print_string_ptr+0x96>
                escape_characters++;
   b5082:	f10a 0a01 	add.w	sl, sl, #1
                break;
   b5086:	e7c5      	b.n	b5014 <print_string_ptr+0x1c>
        switch (*input_pointer)
   b5088:	2b5c      	cmp	r3, #92	; 0x5c
   b508a:	d1c3      	bne.n	b5014 <print_string_ptr+0x1c>
   b508c:	e7f9      	b.n	b5082 <print_string_ptr+0x8a>
                if (*input_pointer < 32)
   b508e:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   b5090:	bf98      	it	ls
   b5092:	f10a 0a05 	addls.w	sl, sl, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   b5096:	e7bd      	b.n	b5014 <print_string_ptr+0x1c>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b5098:	f8df b088 	ldr.w	fp, [pc, #136]	; b5124 <print_string_ptr+0x12c>
   b509c:	3e01      	subs	r6, #1
            *output_pointer++ = '\\';
   b509e:	255c      	movs	r5, #92	; 0x5c
                    *output_pointer = 't';
   b50a0:	f04f 0a74 	mov.w	sl, #116	; 0x74
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b50a4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   b50a8:	b92b      	cbnz	r3, b50b6 <print_string_ptr+0xbe>
    output[output_length + 1] = '\"';
   b50aa:	2222      	movs	r2, #34	; 0x22
   b50ac:	f807 2009 	strb.w	r2, [r7, r9]
    output[output_length + 2] = '\0';
   b50b0:	f807 3008 	strb.w	r3, [r7, r8]
   b50b4:	e7d8      	b.n	b5068 <print_string_ptr+0x70>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   b50b6:	2b1f      	cmp	r3, #31
   b50b8:	d907      	bls.n	b50ca <print_string_ptr+0xd2>
   b50ba:	2b22      	cmp	r3, #34	; 0x22
   b50bc:	d005      	beq.n	b50ca <print_string_ptr+0xd2>
   b50be:	2b5c      	cmp	r3, #92	; 0x5c
   b50c0:	d003      	beq.n	b50ca <print_string_ptr+0xd2>
            *output_pointer = *input_pointer;
   b50c2:	7023      	strb	r3, [r4, #0]
   b50c4:	4620      	mov	r0, r4
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b50c6:	1c44      	adds	r4, r0, #1
   b50c8:	e7ec      	b.n	b50a4 <print_string_ptr+0xac>
            *output_pointer++ = '\\';
   b50ca:	4620      	mov	r0, r4
   b50cc:	f800 5b01 	strb.w	r5, [r0], #1
            switch (*input_pointer)
   b50d0:	7832      	ldrb	r2, [r6, #0]
   b50d2:	2a0d      	cmp	r2, #13
   b50d4:	d80a      	bhi.n	b50ec <print_string_ptr+0xf4>
   b50d6:	2a07      	cmp	r2, #7
   b50d8:	d91a      	bls.n	b5110 <print_string_ptr+0x118>
   b50da:	f1a2 0308 	sub.w	r3, r2, #8
   b50de:	2b05      	cmp	r3, #5
   b50e0:	d816      	bhi.n	b5110 <print_string_ptr+0x118>
   b50e2:	e8df f003 	tbb	[pc, r3]
   b50e6:	1209      	.short	0x1209
   b50e8:	100c150e 	.word	0x100c150e
   b50ec:	2a22      	cmp	r2, #34	; 0x22
   b50ee:	d001      	beq.n	b50f4 <print_string_ptr+0xfc>
   b50f0:	2a5c      	cmp	r2, #92	; 0x5c
   b50f2:	d10d      	bne.n	b5110 <print_string_ptr+0x118>
                    *output_pointer = '\"';
   b50f4:	7062      	strb	r2, [r4, #1]
                    break;
   b50f6:	e7e6      	b.n	b50c6 <print_string_ptr+0xce>
                    *output_pointer = 'b';
   b50f8:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 'f';
   b50fa:	7063      	strb	r3, [r4, #1]
                    break;
   b50fc:	e7e3      	b.n	b50c6 <print_string_ptr+0xce>
                    *output_pointer = 'f';
   b50fe:	2366      	movs	r3, #102	; 0x66
   b5100:	e7fb      	b.n	b50fa <print_string_ptr+0x102>
                    *output_pointer = 'n';
   b5102:	236e      	movs	r3, #110	; 0x6e
   b5104:	e7f9      	b.n	b50fa <print_string_ptr+0x102>
                    *output_pointer = 'r';
   b5106:	2372      	movs	r3, #114	; 0x72
   b5108:	e7f7      	b.n	b50fa <print_string_ptr+0x102>
                    *output_pointer = 't';
   b510a:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   b510e:	e7da      	b.n	b50c6 <print_string_ptr+0xce>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b5110:	4659      	mov	r1, fp
   b5112:	f002 fd93 	bl	b7c3c <sprintf>
                    output_pointer += 4;
   b5116:	1d60      	adds	r0, r4, #5
                    break;
   b5118:	e7d5      	b.n	b50c6 <print_string_ptr+0xce>
   b511a:	bf00      	nop
   b511c:	04000037 	.word	0x04000037
   b5120:	000bd5e4 	.word	0x000bd5e4
   b5124:	000bd5e7 	.word	0x000bd5e7

000b5128 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   b5128:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   b512a:	4605      	mov	r5, r0
   b512c:	b180      	cbz	r0, b5150 <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   b512e:	f7ff fd29 	bl	b4b84 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   b5132:	4b08      	ldr	r3, [pc, #32]	; (b5154 <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   b5134:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   b5136:	681b      	ldr	r3, [r3, #0]
   b5138:	9201      	str	r2, [sp, #4]
   b513a:	4610      	mov	r0, r2
   b513c:	4798      	blx	r3
    if (copy == NULL)
   b513e:	4604      	mov	r4, r0
   b5140:	b118      	cbz	r0, b514a <cJSON_strdup.constprop.0+0x22>
    memcpy(copy, string, length);
   b5142:	9a01      	ldr	r2, [sp, #4]
   b5144:	4629      	mov	r1, r5
   b5146:	f006 f9a5 	bl	bb494 <memcpy>
}
   b514a:	4620      	mov	r0, r4
   b514c:	b003      	add	sp, #12
   b514e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   b5150:	4604      	mov	r4, r0
   b5152:	e7fa      	b.n	b514a <cJSON_strdup.constprop.0+0x22>
   b5154:	2003e1e8 	.word	0x2003e1e8

000b5158 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   b5158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b515a:	460d      	mov	r5, r1
   b515c:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   b515e:	4607      	mov	r7, r0
   b5160:	b1f0      	cbz	r0, b51a0 <add_item_to_object.constprop.0+0x48>
   b5162:	b1e9      	cbz	r1, b51a0 <add_item_to_object.constprop.0+0x48>
   b5164:	b1e2      	cbz	r2, b51a0 <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   b5166:	b193      	cbz	r3, b518e <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   b5168:	68d6      	ldr	r6, [r2, #12]
   b516a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b516e:	68e3      	ldr	r3, [r4, #12]
   b5170:	059b      	lsls	r3, r3, #22
   b5172:	d404      	bmi.n	b517e <add_item_to_object.constprop.0+0x26>
   b5174:	6a20      	ldr	r0, [r4, #32]
   b5176:	b110      	cbz	r0, b517e <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   b5178:	4b0a      	ldr	r3, [pc, #40]	; (b51a4 <add_item_to_object.constprop.0+0x4c>)
   b517a:	685b      	ldr	r3, [r3, #4]
   b517c:	4798      	blx	r3
    }

    item->string = new_key;
   b517e:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   b5180:	60e6      	str	r6, [r4, #12]

    return add_item_to_array(object, item);
   b5182:	4621      	mov	r1, r4
   b5184:	4638      	mov	r0, r7
}
   b5186:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   b518a:	f7ff bf25 	b.w	b4fd8 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   b518e:	4608      	mov	r0, r1
   b5190:	f7ff ffca 	bl	b5128 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   b5194:	4605      	mov	r5, r0
   b5196:	b118      	cbz	r0, b51a0 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   b5198:	68e6      	ldr	r6, [r4, #12]
   b519a:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   b519e:	e7e6      	b.n	b516e <add_item_to_object.constprop.0+0x16>
}
   b51a0:	2000      	movs	r0, #0
   b51a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b51a4:	2003e1e8 	.word	0x2003e1e8

000b51a8 <print_value>:
{
   b51a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b51ac:	460c      	mov	r4, r1
   b51ae:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   b51b0:	4606      	mov	r6, r0
   b51b2:	b908      	cbnz	r0, b51b8 <print_value+0x10>
    switch ((item->type) & 0xFF)
   b51b4:	2500      	movs	r5, #0
   b51b6:	e05d      	b.n	b5274 <print_value+0xcc>
    if ((item == NULL) || (output_buffer == NULL))
   b51b8:	2900      	cmp	r1, #0
   b51ba:	d0fb      	beq.n	b51b4 <print_value+0xc>
    switch ((item->type) & 0xFF)
   b51bc:	7b05      	ldrb	r5, [r0, #12]
   b51be:	2d10      	cmp	r5, #16
   b51c0:	f000 80c1 	beq.w	b5346 <print_value+0x19e>
   b51c4:	dc18      	bgt.n	b51f8 <print_value+0x50>
   b51c6:	1e6b      	subs	r3, r5, #1
   b51c8:	2b07      	cmp	r3, #7
   b51ca:	d8f3      	bhi.n	b51b4 <print_value+0xc>
   b51cc:	2b07      	cmp	r3, #7
   b51ce:	d8f1      	bhi.n	b51b4 <print_value+0xc>
   b51d0:	a201      	add	r2, pc, #4	; (adr r2, b51d8 <print_value+0x30>)
   b51d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   b51d6:	bf00      	nop
   b51d8:	000b5263 	.word	0x000b5263
   b51dc:	000b527d 	.word	0x000b527d
   b51e0:	000b51b5 	.word	0x000b51b5
   b51e4:	000b524d 	.word	0x000b524d
   b51e8:	000b51b5 	.word	0x000b51b5
   b51ec:	000b51b5 	.word	0x000b51b5
   b51f0:	000b51b5 	.word	0x000b51b5
   b51f4:	000b528d 	.word	0x000b528d
   b51f8:	2d40      	cmp	r5, #64	; 0x40
   b51fa:	f000 80d3 	beq.w	b53a4 <print_value+0x1fc>
   b51fe:	2d80      	cmp	r5, #128	; 0x80
   b5200:	f000 808d 	beq.w	b531e <print_value+0x176>
   b5204:	2d20      	cmp	r5, #32
   b5206:	d1d5      	bne.n	b51b4 <print_value+0xc>
            return print_array(item, output_buffer);
   b5208:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   b520a:	2101      	movs	r1, #1
   b520c:	4620      	mov	r0, r4
   b520e:	f7ff fe64 	bl	b4eda <ensure>
    if (output_pointer == NULL)
   b5212:	2800      	cmp	r0, #0
   b5214:	d0ce      	beq.n	b51b4 <print_value+0xc>
    *output_pointer = '[';
   b5216:	235b      	movs	r3, #91	; 0x5b
   b5218:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   b521a:	68a3      	ldr	r3, [r4, #8]
   b521c:	3301      	adds	r3, #1
   b521e:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   b5220:	68e3      	ldr	r3, [r4, #12]
   b5222:	3301      	adds	r3, #1
   b5224:	60e3      	str	r3, [r4, #12]
            *output_pointer++ = ',';
   b5226:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   b5228:	f04f 0800 	mov.w	r8, #0
    while (current_element != NULL)
   b522c:	2e00      	cmp	r6, #0
   b522e:	f040 8090 	bne.w	b5352 <print_value+0x1aa>
    output_pointer = ensure(output_buffer, 2);
   b5232:	2102      	movs	r1, #2
   b5234:	4620      	mov	r0, r4
   b5236:	f7ff fe50 	bl	b4eda <ensure>
    if (output_pointer == NULL)
   b523a:	2800      	cmp	r0, #0
   b523c:	d0ba      	beq.n	b51b4 <print_value+0xc>
    *output_pointer++ = ']';
   b523e:	235d      	movs	r3, #93	; 0x5d
   b5240:	7003      	strb	r3, [r0, #0]
    *output_pointer = '\0';
   b5242:	7046      	strb	r6, [r0, #1]
    output_buffer->depth--;
   b5244:	68e3      	ldr	r3, [r4, #12]
   b5246:	3b01      	subs	r3, #1
   b5248:	60e3      	str	r3, [r4, #12]
   b524a:	e008      	b.n	b525e <print_value+0xb6>
            output = ensure(output_buffer, 5);
   b524c:	2105      	movs	r1, #5
   b524e:	4620      	mov	r0, r4
   b5250:	f7ff fe43 	bl	b4eda <ensure>
            if (output == NULL)
   b5254:	2800      	cmp	r0, #0
   b5256:	d0ad      	beq.n	b51b4 <print_value+0xc>
            strcpy((char*)output, "null");
   b5258:	49a1      	ldr	r1, [pc, #644]	; (b54e0 <print_value+0x338>)
            strcpy((char*)output, "true");
   b525a:	f006 f979 	bl	bb550 <strcpy>
    return true;
   b525e:	2501      	movs	r5, #1
   b5260:	e008      	b.n	b5274 <print_value+0xcc>
            output = ensure(output_buffer, 6);
   b5262:	2106      	movs	r1, #6
   b5264:	4620      	mov	r0, r4
   b5266:	f7ff fe38 	bl	b4eda <ensure>
            if (output == NULL)
   b526a:	2800      	cmp	r0, #0
   b526c:	d0a2      	beq.n	b51b4 <print_value+0xc>
            strcpy((char*)output, "false");
   b526e:	499d      	ldr	r1, [pc, #628]	; (b54e4 <print_value+0x33c>)
   b5270:	f006 f96e 	bl	bb550 <strcpy>
}
   b5274:	4628      	mov	r0, r5
   b5276:	b00d      	add	sp, #52	; 0x34
   b5278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            output = ensure(output_buffer, 5);
   b527c:	2105      	movs	r1, #5
   b527e:	4620      	mov	r0, r4
   b5280:	f7ff fe2b 	bl	b4eda <ensure>
            if (output == NULL)
   b5284:	2800      	cmp	r0, #0
   b5286:	d095      	beq.n	b51b4 <print_value+0xc>
            strcpy((char*)output, "true");
   b5288:	4997      	ldr	r1, [pc, #604]	; (b54e8 <print_value+0x340>)
   b528a:	e7e6      	b.n	b525a <print_value+0xb2>
    double d = item->valuedouble;
   b528c:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    if ((d * 0) != 0)
   b5290:	2200      	movs	r2, #0
   b5292:	2300      	movs	r3, #0
   b5294:	4630      	mov	r0, r6
   b5296:	4639      	mov	r1, r7
   b5298:	f7ff f87e 	bl	b4398 <__aeabi_dmul>
   b529c:	2200      	movs	r2, #0
   b529e:	2300      	movs	r3, #0
   b52a0:	f7ff fae2 	bl	b4868 <__aeabi_dcmpeq>
   b52a4:	b9b0      	cbnz	r0, b52d4 <print_value+0x12c>
        length = sprintf((char*)number_buffer, "null");
   b52a6:	498e      	ldr	r1, [pc, #568]	; (b54e0 <print_value+0x338>)
   b52a8:	a805      	add	r0, sp, #20
   b52aa:	f006 f951 	bl	bb550 <strcpy>
   b52ae:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   b52b0:	1c69      	adds	r1, r5, #1
   b52b2:	4620      	mov	r0, r4
   b52b4:	f7ff fe11 	bl	b4eda <ensure>
    if (output_pointer == NULL)
   b52b8:	2800      	cmp	r0, #0
   b52ba:	f43f af7b 	beq.w	b51b4 <print_value+0xc>
   b52be:	4602      	mov	r2, r0
   b52c0:	ab05      	add	r3, sp, #20
   b52c2:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   b52c4:	4296      	cmp	r6, r2
   b52c6:	d125      	bne.n	b5314 <print_value+0x16c>
    output_pointer[i] = '\0';
   b52c8:	2300      	movs	r3, #0
   b52ca:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   b52cc:	68a0      	ldr	r0, [r4, #8]
   b52ce:	4428      	add	r0, r5
   b52d0:	60a0      	str	r0, [r4, #8]
    return true;
   b52d2:	e7c4      	b.n	b525e <print_value+0xb6>
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b52d4:	4985      	ldr	r1, [pc, #532]	; (b54ec <print_value+0x344>)
   b52d6:	4632      	mov	r2, r6
   b52d8:	463b      	mov	r3, r7
   b52da:	a805      	add	r0, sp, #20
   b52dc:	f002 fcae 	bl	b7c3c <sprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b52e0:	4983      	ldr	r1, [pc, #524]	; (b54f0 <print_value+0x348>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b52e2:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b52e4:	aa02      	add	r2, sp, #8
   b52e6:	a805      	add	r0, sp, #20
   b52e8:	f002 fcb8 	bl	b7c5c <sscanf>
   b52ec:	2801      	cmp	r0, #1
   b52ee:	d106      	bne.n	b52fe <print_value+0x156>
   b52f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b52f4:	4630      	mov	r0, r6
   b52f6:	4639      	mov	r1, r7
   b52f8:	f7ff fab6 	bl	b4868 <__aeabi_dcmpeq>
   b52fc:	b930      	cbnz	r0, b530c <print_value+0x164>
            length = sprintf((char*)number_buffer, "%1.17g", d);
   b52fe:	497d      	ldr	r1, [pc, #500]	; (b54f4 <print_value+0x34c>)
   b5300:	4632      	mov	r2, r6
   b5302:	463b      	mov	r3, r7
   b5304:	a805      	add	r0, sp, #20
   b5306:	f002 fc99 	bl	b7c3c <sprintf>
   b530a:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   b530c:	2d19      	cmp	r5, #25
   b530e:	f63f af51 	bhi.w	b51b4 <print_value+0xc>
   b5312:	e7cd      	b.n	b52b0 <print_value+0x108>
        if (number_buffer[i] == decimal_point)
   b5314:	f813 1b01 	ldrb.w	r1, [r3], #1
            output_pointer[i] = '.';
   b5318:	7011      	strb	r1, [r2, #0]
    for (i = 0; i < ((size_t)length); i++)
   b531a:	3201      	adds	r2, #1
   b531c:	e7d2      	b.n	b52c4 <print_value+0x11c>
            if (item->valuestring == NULL)
   b531e:	6900      	ldr	r0, [r0, #16]
   b5320:	2800      	cmp	r0, #0
   b5322:	f43f af47 	beq.w	b51b4 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   b5326:	f7ff fc2d 	bl	b4b84 <strlen>
   b532a:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   b532c:	4611      	mov	r1, r2
   b532e:	4620      	mov	r0, r4
   b5330:	9201      	str	r2, [sp, #4]
   b5332:	f7ff fdd2 	bl	b4eda <ensure>
            if (output == NULL)
   b5336:	2800      	cmp	r0, #0
   b5338:	f43f af3c 	beq.w	b51b4 <print_value+0xc>
            memcpy(output, item->valuestring, raw_length);
   b533c:	9a01      	ldr	r2, [sp, #4]
   b533e:	6931      	ldr	r1, [r6, #16]
   b5340:	f006 f8a8 	bl	bb494 <memcpy>
            return true;
   b5344:	e78b      	b.n	b525e <print_value+0xb6>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b5346:	6900      	ldr	r0, [r0, #16]
}
   b5348:	b00d      	add	sp, #52	; 0x34
   b534a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b534e:	f7ff be53 	b.w	b4ff8 <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   b5352:	4621      	mov	r1, r4
   b5354:	4630      	mov	r0, r6
   b5356:	f7ff ff27 	bl	b51a8 <print_value>
   b535a:	2800      	cmp	r0, #0
   b535c:	f43f af2a 	beq.w	b51b4 <print_value+0xc>
        update_offset(output_buffer);
   b5360:	4620      	mov	r0, r4
   b5362:	f7ff fdae 	bl	b4ec2 <update_offset>
        if (current_element->next)
   b5366:	6833      	ldr	r3, [r6, #0]
   b5368:	b1bb      	cbz	r3, b539a <print_value+0x1f2>
            length = (size_t) (output_buffer->format ? 2 : 1);
   b536a:	6963      	ldr	r3, [r4, #20]
   b536c:	2b00      	cmp	r3, #0
   b536e:	bf14      	ite	ne
   b5370:	f04f 0902 	movne.w	r9, #2
   b5374:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   b5378:	f109 0101 	add.w	r1, r9, #1
   b537c:	4620      	mov	r0, r4
   b537e:	f7ff fdac 	bl	b4eda <ensure>
            if (output_pointer == NULL)
   b5382:	2800      	cmp	r0, #0
   b5384:	f43f af16 	beq.w	b51b4 <print_value+0xc>
            *output_pointer++ = ',';
   b5388:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   b538a:	6963      	ldr	r3, [r4, #20]
   b538c:	b93b      	cbnz	r3, b539e <print_value+0x1f6>
            *output_pointer++ = ',';
   b538e:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   b5390:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   b5394:	68a3      	ldr	r3, [r4, #8]
   b5396:	444b      	add	r3, r9
   b5398:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   b539a:	6836      	ldr	r6, [r6, #0]
   b539c:	e746      	b.n	b522c <print_value+0x84>
                *output_pointer++ = ' ';
   b539e:	1c83      	adds	r3, r0, #2
   b53a0:	7045      	strb	r5, [r0, #1]
   b53a2:	e7f5      	b.n	b5390 <print_value+0x1e8>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   b53a4:	694b      	ldr	r3, [r1, #20]
   b53a6:	6885      	ldr	r5, [r0, #8]
   b53a8:	2b00      	cmp	r3, #0
   b53aa:	bf14      	ite	ne
   b53ac:	2702      	movne	r7, #2
   b53ae:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   b53b0:	1c79      	adds	r1, r7, #1
   b53b2:	4620      	mov	r0, r4
   b53b4:	f7ff fd91 	bl	b4eda <ensure>
    if (output_pointer == NULL)
   b53b8:	2800      	cmp	r0, #0
   b53ba:	f43f aefb 	beq.w	b51b4 <print_value+0xc>
    *output_pointer++ = '{';
   b53be:	237b      	movs	r3, #123	; 0x7b
   b53c0:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   b53c2:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   b53c4:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   b53c6:	3201      	adds	r2, #1
   b53c8:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   b53ca:	b10b      	cbz	r3, b53d0 <print_value+0x228>
        *output_pointer++ = '\n';
   b53cc:	230a      	movs	r3, #10
   b53ce:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   b53d0:	68a3      	ldr	r3, [r4, #8]
   b53d2:	443b      	add	r3, r7
   b53d4:	60a3      	str	r3, [r4, #8]
                *output_pointer++ = '\t';
   b53d6:	2609      	movs	r6, #9
        *output_pointer++ = ':';
   b53d8:	273a      	movs	r7, #58	; 0x3a
        if (output_buffer->format)
   b53da:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   b53dc:	b995      	cbnz	r5, b5404 <print_value+0x25c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b53de:	2b00      	cmp	r3, #0
   b53e0:	d070      	beq.n	b54c4 <print_value+0x31c>
   b53e2:	68e1      	ldr	r1, [r4, #12]
   b53e4:	3101      	adds	r1, #1
   b53e6:	4620      	mov	r0, r4
   b53e8:	f7ff fd77 	bl	b4eda <ensure>
    if (output_pointer == NULL)
   b53ec:	2800      	cmp	r0, #0
   b53ee:	f43f aee1 	beq.w	b51b4 <print_value+0xc>
    if (output_buffer->format)
   b53f2:	6963      	ldr	r3, [r4, #20]
   b53f4:	2b00      	cmp	r3, #0
   b53f6:	d16f      	bne.n	b54d8 <print_value+0x330>
   b53f8:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   b53fa:	227d      	movs	r2, #125	; 0x7d
   b53fc:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   b53fe:	2200      	movs	r2, #0
   b5400:	705a      	strb	r2, [r3, #1]
   b5402:	e71f      	b.n	b5244 <print_value+0x9c>
        if (output_buffer->format)
   b5404:	b173      	cbz	r3, b5424 <print_value+0x27c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   b5406:	68e1      	ldr	r1, [r4, #12]
   b5408:	4620      	mov	r0, r4
   b540a:	f7ff fd66 	bl	b4eda <ensure>
            if (output_pointer == NULL)
   b540e:	2800      	cmp	r0, #0
   b5410:	f43f aed0 	beq.w	b51b4 <print_value+0xc>
   b5414:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   b5416:	68e1      	ldr	r1, [r4, #12]
   b5418:	1a13      	subs	r3, r2, r0
   b541a:	4299      	cmp	r1, r3
   b541c:	d84f      	bhi.n	b54be <print_value+0x316>
            output_buffer->offset += output_buffer->depth;
   b541e:	68a3      	ldr	r3, [r4, #8]
   b5420:	440b      	add	r3, r1
   b5422:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   b5424:	6a28      	ldr	r0, [r5, #32]
   b5426:	4621      	mov	r1, r4
   b5428:	f7ff fde6 	bl	b4ff8 <print_string_ptr>
   b542c:	2800      	cmp	r0, #0
   b542e:	f43f aec1 	beq.w	b51b4 <print_value+0xc>
        update_offset(output_buffer);
   b5432:	4620      	mov	r0, r4
   b5434:	f7ff fd45 	bl	b4ec2 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   b5438:	6963      	ldr	r3, [r4, #20]
   b543a:	2b00      	cmp	r3, #0
   b543c:	bf14      	ite	ne
   b543e:	f04f 0802 	movne.w	r8, #2
   b5442:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   b5446:	4641      	mov	r1, r8
   b5448:	4620      	mov	r0, r4
   b544a:	f7ff fd46 	bl	b4eda <ensure>
        if (output_pointer == NULL)
   b544e:	2800      	cmp	r0, #0
   b5450:	f43f aeb0 	beq.w	b51b4 <print_value+0xc>
        *output_pointer++ = ':';
   b5454:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   b5456:	6963      	ldr	r3, [r4, #20]
   b5458:	b103      	cbz	r3, b545c <print_value+0x2b4>
            *output_pointer++ = '\t';
   b545a:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   b545c:	68a3      	ldr	r3, [r4, #8]
   b545e:	4443      	add	r3, r8
   b5460:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   b5462:	4621      	mov	r1, r4
   b5464:	4628      	mov	r0, r5
   b5466:	f7ff fe9f 	bl	b51a8 <print_value>
   b546a:	2800      	cmp	r0, #0
   b546c:	f43f aea2 	beq.w	b51b4 <print_value+0xc>
        update_offset(output_buffer);
   b5470:	4620      	mov	r0, r4
   b5472:	f7ff fd26 	bl	b4ec2 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   b5476:	682b      	ldr	r3, [r5, #0]
   b5478:	6962      	ldr	r2, [r4, #20]
   b547a:	f1b3 0800 	subs.w	r8, r3, #0
   b547e:	bf18      	it	ne
   b5480:	f04f 0801 	movne.w	r8, #1
   b5484:	2a00      	cmp	r2, #0
   b5486:	bf18      	it	ne
   b5488:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   b548c:	f108 0101 	add.w	r1, r8, #1
   b5490:	4620      	mov	r0, r4
   b5492:	f7ff fd22 	bl	b4eda <ensure>
        if (output_pointer == NULL)
   b5496:	2800      	cmp	r0, #0
   b5498:	f43f ae8c 	beq.w	b51b4 <print_value+0xc>
        if (current_item->next)
   b549c:	682b      	ldr	r3, [r5, #0]
   b549e:	b113      	cbz	r3, b54a6 <print_value+0x2fe>
            *output_pointer++ = ',';
   b54a0:	232c      	movs	r3, #44	; 0x2c
   b54a2:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   b54a6:	6963      	ldr	r3, [r4, #20]
   b54a8:	b113      	cbz	r3, b54b0 <print_value+0x308>
            *output_pointer++ = '\n';
   b54aa:	230a      	movs	r3, #10
   b54ac:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   b54b0:	2300      	movs	r3, #0
   b54b2:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   b54b4:	68a3      	ldr	r3, [r4, #8]
   b54b6:	4443      	add	r3, r8
   b54b8:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   b54ba:	682d      	ldr	r5, [r5, #0]
   b54bc:	e78d      	b.n	b53da <print_value+0x232>
                *output_pointer++ = '\t';
   b54be:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   b54c2:	e7a8      	b.n	b5416 <print_value+0x26e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b54c4:	2102      	movs	r1, #2
   b54c6:	e78e      	b.n	b53e6 <print_value+0x23e>
            *output_pointer++ = '\t';
   b54c8:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   b54cc:	68e2      	ldr	r2, [r4, #12]
   b54ce:	1a19      	subs	r1, r3, r0
   b54d0:	3a01      	subs	r2, #1
   b54d2:	4291      	cmp	r1, r2
   b54d4:	d3f8      	bcc.n	b54c8 <print_value+0x320>
   b54d6:	e790      	b.n	b53fa <print_value+0x252>
   b54d8:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   b54da:	2509      	movs	r5, #9
   b54dc:	e7f6      	b.n	b54cc <print_value+0x324>
   b54de:	bf00      	nop
   b54e0:	000bd5ed 	.word	0x000bd5ed
   b54e4:	000bdaa5 	.word	0x000bdaa5
   b54e8:	000bd5f2 	.word	0x000bd5f2
   b54ec:	000bd5f7 	.word	0x000bd5f7
   b54f0:	000bd5fe 	.word	0x000bd5fe
   b54f4:	000bd602 	.word	0x000bd602

000b54f8 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b54f8:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b54fa:	4d23      	ldr	r5, [pc, #140]	; (b5588 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b54fc:	b08a      	sub	sp, #40	; 0x28
   b54fe:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   b5500:	2224      	movs	r2, #36	; 0x24
   b5502:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5504:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   b5506:	a801      	add	r0, sp, #4
   b5508:	f005 ffec 	bl	bb4e4 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b550c:	682b      	ldr	r3, [r5, #0]
   b550e:	f44f 7080 	mov.w	r0, #256	; 0x100
   b5512:	4798      	blx	r3
    buffer->length = default_buffer_size;
   b5514:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5518:	4603      	mov	r3, r0
   b551a:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   b551c:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   b551e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    buffer->format = format;
   b5522:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   b5524:	ae0a      	add	r6, sp, #40	; 0x28
   b5526:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   b552a:	b17b      	cbz	r3, b554c <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   b552c:	a901      	add	r1, sp, #4
   b552e:	4620      	mov	r0, r4
   b5530:	f7ff fe3a 	bl	b51a8 <print_value>
   b5534:	b150      	cbz	r0, b554c <print.constprop.0+0x54>
    update_offset(buffer);
   b5536:	a801      	add	r0, sp, #4
   b5538:	f7ff fcc3 	bl	b4ec2 <update_offset>
    if (hooks->reallocate != NULL)
   b553c:	68ae      	ldr	r6, [r5, #8]
   b553e:	9903      	ldr	r1, [sp, #12]
   b5540:	b15e      	cbz	r6, b555a <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   b5542:	9801      	ldr	r0, [sp, #4]
   b5544:	3101      	adds	r1, #1
   b5546:	47b0      	blx	r6
        if (printed == NULL) {
   b5548:	4604      	mov	r4, r0
   b554a:	b9d0      	cbnz	r0, b5582 <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   b554c:	9c01      	ldr	r4, [sp, #4]
   b554e:	b1c4      	cbz	r4, b5582 <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   b5550:	4620      	mov	r0, r4
   b5552:	686b      	ldr	r3, [r5, #4]
   b5554:	4798      	blx	r3
    return NULL;
   b5556:	2400      	movs	r4, #0
   b5558:	e013      	b.n	b5582 <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   b555a:	682b      	ldr	r3, [r5, #0]
   b555c:	1c48      	adds	r0, r1, #1
   b555e:	4798      	blx	r3
        if (printed == NULL)
   b5560:	4604      	mov	r4, r0
   b5562:	2800      	cmp	r0, #0
   b5564:	d0f2      	beq.n	b554c <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   b5566:	9a03      	ldr	r2, [sp, #12]
   b5568:	9b02      	ldr	r3, [sp, #8]
   b556a:	9901      	ldr	r1, [sp, #4]
   b556c:	3201      	adds	r2, #1
   b556e:	429a      	cmp	r2, r3
   b5570:	bf28      	it	cs
   b5572:	461a      	movcs	r2, r3
   b5574:	f005 ff8e 	bl	bb494 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   b5578:	9b03      	ldr	r3, [sp, #12]
   b557a:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   b557c:	9801      	ldr	r0, [sp, #4]
   b557e:	686b      	ldr	r3, [r5, #4]
   b5580:	4798      	blx	r3
}
   b5582:	4620      	mov	r0, r4
   b5584:	b00a      	add	sp, #40	; 0x28
   b5586:	bd70      	pop	{r4, r5, r6, pc}
   b5588:	2003e1e8 	.word	0x2003e1e8

000b558c <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   b558c:	b510      	push	{r4, lr}
   b558e:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   b5590:	2028      	movs	r0, #40	; 0x28
   b5592:	4798      	blx	r3
    if (node)
   b5594:	4604      	mov	r4, r0
   b5596:	b118      	cbz	r0, b55a0 <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
   b5598:	2228      	movs	r2, #40	; 0x28
   b559a:	2100      	movs	r1, #0
   b559c:	f005 ffa2 	bl	bb4e4 <memset>
}
   b55a0:	4620      	mov	r0, r4
   b55a2:	bd10      	pop	{r4, pc}

000b55a4 <cJSON_Delete>:
{
   b55a4:	b570      	push	{r4, r5, r6, lr}
   b55a6:	4d10      	ldr	r5, [pc, #64]	; (b55e8 <cJSON_Delete+0x44>)
   b55a8:	4604      	mov	r4, r0
    while (item != NULL)
   b55aa:	b904      	cbnz	r4, b55ae <cJSON_Delete+0xa>
}
   b55ac:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b55ae:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   b55b0:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b55b2:	05d9      	lsls	r1, r3, #23
   b55b4:	d403      	bmi.n	b55be <cJSON_Delete+0x1a>
   b55b6:	68a0      	ldr	r0, [r4, #8]
   b55b8:	b968      	cbnz	r0, b55d6 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b55ba:	6920      	ldr	r0, [r4, #16]
   b55bc:	b988      	cbnz	r0, b55e2 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b55be:	68e3      	ldr	r3, [r4, #12]
   b55c0:	059b      	lsls	r3, r3, #22
   b55c2:	d403      	bmi.n	b55cc <cJSON_Delete+0x28>
   b55c4:	6a20      	ldr	r0, [r4, #32]
   b55c6:	b108      	cbz	r0, b55cc <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   b55c8:	686b      	ldr	r3, [r5, #4]
   b55ca:	4798      	blx	r3
        global_hooks.deallocate(item);
   b55cc:	4620      	mov	r0, r4
   b55ce:	686b      	ldr	r3, [r5, #4]
   b55d0:	4798      	blx	r3
        item = next;
   b55d2:	4634      	mov	r4, r6
   b55d4:	e7e9      	b.n	b55aa <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   b55d6:	f7ff ffe5 	bl	b55a4 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b55da:	68e3      	ldr	r3, [r4, #12]
   b55dc:	05da      	lsls	r2, r3, #23
   b55de:	d5ec      	bpl.n	b55ba <cJSON_Delete+0x16>
   b55e0:	e7ed      	b.n	b55be <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   b55e2:	686b      	ldr	r3, [r5, #4]
   b55e4:	4798      	blx	r3
   b55e6:	e7ea      	b.n	b55be <cJSON_Delete+0x1a>
   b55e8:	2003e1e8 	.word	0x2003e1e8
   b55ec:	00000000 	.word	0x00000000

000b55f0 <parse_value>:
{
   b55f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b55f4:	4606      	mov	r6, r0
   b55f6:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   b55f8:	460c      	mov	r4, r1
   b55fa:	b909      	cbnz	r1, b5600 <parse_value+0x10>
    return false;
   b55fc:	2000      	movs	r0, #0
   b55fe:	e023      	b.n	b5648 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   b5600:	680f      	ldr	r7, [r1, #0]
   b5602:	2f00      	cmp	r7, #0
   b5604:	d0fa      	beq.n	b55fc <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   b5606:	688d      	ldr	r5, [r1, #8]
   b5608:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b560c:	f105 0904 	add.w	r9, r5, #4
   b5610:	45c1      	cmp	r9, r8
   b5612:	d80b      	bhi.n	b562c <parse_value+0x3c>
   b5614:	4990      	ldr	r1, [pc, #576]	; (b5858 <parse_value+0x268>)
   b5616:	2204      	movs	r2, #4
   b5618:	1978      	adds	r0, r7, r5
   b561a:	f005 ffbe 	bl	bb59a <strncmp>
   b561e:	b928      	cbnz	r0, b562c <parse_value+0x3c>
        item->type = cJSON_NULL;
   b5620:	2304      	movs	r3, #4
   b5622:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   b5624:	68a3      	ldr	r3, [r4, #8]
   b5626:	3304      	adds	r3, #4
    input_buffer->offset++;
   b5628:	60a3      	str	r3, [r4, #8]
   b562a:	e082      	b.n	b5732 <parse_value+0x142>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   b562c:	1d6b      	adds	r3, r5, #5
   b562e:	4598      	cmp	r8, r3
   b5630:	d30d      	bcc.n	b564e <parse_value+0x5e>
   b5632:	498a      	ldr	r1, [pc, #552]	; (b585c <parse_value+0x26c>)
   b5634:	2205      	movs	r2, #5
   b5636:	1978      	adds	r0, r7, r5
   b5638:	f005 ffaf 	bl	bb59a <strncmp>
   b563c:	b938      	cbnz	r0, b564e <parse_value+0x5e>
        item->type = cJSON_False;
   b563e:	2001      	movs	r0, #1
   b5640:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   b5642:	68a2      	ldr	r2, [r4, #8]
   b5644:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   b5646:	60a2      	str	r2, [r4, #8]
}
   b5648:	b012      	add	sp, #72	; 0x48
   b564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   b564e:	45c1      	cmp	r9, r8
   b5650:	d80c      	bhi.n	b566c <parse_value+0x7c>
   b5652:	4983      	ldr	r1, [pc, #524]	; (b5860 <parse_value+0x270>)
   b5654:	2204      	movs	r2, #4
   b5656:	1978      	adds	r0, r7, r5
   b5658:	f005 ff9f 	bl	bb59a <strncmp>
   b565c:	b930      	cbnz	r0, b566c <parse_value+0x7c>
        item->type = cJSON_True;
   b565e:	2302      	movs	r3, #2
        item->valueint = 1;
   b5660:	2001      	movs	r0, #1
        item->type = cJSON_True;
   b5662:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   b5664:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   b5666:	68a2      	ldr	r2, [r4, #8]
   b5668:	3204      	adds	r2, #4
   b566a:	e7ec      	b.n	b5646 <parse_value+0x56>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   b566c:	4545      	cmp	r5, r8
   b566e:	d2c5      	bcs.n	b55fc <parse_value+0xc>
   b5670:	5d7b      	ldrb	r3, [r7, r5]
   b5672:	2b22      	cmp	r3, #34	; 0x22
   b5674:	eb07 0005 	add.w	r0, r7, r5
   b5678:	d106      	bne.n	b5688 <parse_value+0x98>
        return parse_string(item, input_buffer);
   b567a:	4621      	mov	r1, r4
   b567c:	4630      	mov	r0, r6
}
   b567e:	b012      	add	sp, #72	; 0x48
   b5680:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
   b5684:	f7ff bb0e 	b.w	b4ca4 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   b5688:	2b2d      	cmp	r3, #45	; 0x2d
   b568a:	d003      	beq.n	b5694 <parse_value+0xa4>
   b568c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b5690:	2a09      	cmp	r2, #9
   b5692:	d863      	bhi.n	b575c <parse_value+0x16c>
    unsigned char *after_end = NULL;
   b5694:	2300      	movs	r3, #0
   b5696:	aa02      	add	r2, sp, #8
   b5698:	9301      	str	r3, [sp, #4]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   b569a:	eba8 0505 	sub.w	r5, r8, r5
   b569e:	4617      	mov	r7, r2
                number_c_string[i] = decimal_point;
   b56a0:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
        switch (buffer_at_offset(input_buffer)[i])
   b56a4:	f810 1b01 	ldrb.w	r1, [r0], #1
   b56a8:	2939      	cmp	r1, #57	; 0x39
   b56aa:	d810      	bhi.n	b56ce <parse_value+0xde>
   b56ac:	292a      	cmp	r1, #42	; 0x2a
   b56ae:	d91b      	bls.n	b56e8 <parse_value+0xf8>
   b56b0:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
   b56b4:	f1bc 0f0e 	cmp.w	ip, #14
   b56b8:	d816      	bhi.n	b56e8 <parse_value+0xf8>
   b56ba:	e8df f00c 	tbb	[pc, ip]
   b56be:	150d      	.short	0x150d
   b56c0:	0d153c0d 	.word	0x0d153c0d
   b56c4:	0d0d0d0d 	.word	0x0d0d0d0d
   b56c8:	0d0d0d0d 	.word	0x0d0d0d0d
   b56cc:	0d          	.byte	0x0d
   b56cd:	00          	.byte	0x00
   b56ce:	f001 0cdf 	and.w	ip, r1, #223	; 0xdf
   b56d2:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   b56d6:	d107      	bne.n	b56e8 <parse_value+0xf8>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   b56d8:	7011      	strb	r1, [r2, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   b56da:	3301      	adds	r3, #1
   b56dc:	2b3f      	cmp	r3, #63	; 0x3f
   b56de:	f102 0201 	add.w	r2, r2, #1
   b56e2:	d001      	beq.n	b56e8 <parse_value+0xf8>
   b56e4:	42ab      	cmp	r3, r5
   b56e6:	d1dd      	bne.n	b56a4 <parse_value+0xb4>
    number_c_string[i] = '\0';
   b56e8:	aa12      	add	r2, sp, #72	; 0x48
   b56ea:	4413      	add	r3, r2
   b56ec:	2500      	movs	r5, #0
   b56ee:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   b56f2:	a901      	add	r1, sp, #4
   b56f4:	4638      	mov	r0, r7
   b56f6:	f006 fd95 	bl	bc224 <strtod>
    if (number_c_string == after_end)
   b56fa:	f8dd a004 	ldr.w	sl, [sp, #4]
   b56fe:	45ba      	cmp	sl, r7
    number = strtod((const char*)number_c_string, (char**)&after_end);
   b5700:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   b5704:	f43f af7a 	beq.w	b55fc <parse_value+0xc>
    item->valuedouble = number;
   b5708:	ed86 0b06 	vstr	d0, [r6, #24]
    if (number >= INT_MAX)
   b570c:	a350      	add	r3, pc, #320	; (adr r3, b5850 <parse_value+0x260>)
   b570e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5712:	ee10 0a10 	vmov	r0, s0
   b5716:	4649      	mov	r1, r9
   b5718:	f7ff f8c4 	bl	b48a4 <__aeabi_dcmpge>
   b571c:	b170      	cbz	r0, b573c <parse_value+0x14c>
        item->valueint = INT_MAX;
   b571e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   b5722:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   b5724:	2308      	movs	r3, #8
   b5726:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   b5728:	ebaa 0a07 	sub.w	sl, sl, r7
   b572c:	68a7      	ldr	r7, [r4, #8]
   b572e:	4457      	add	r7, sl
   b5730:	60a7      	str	r7, [r4, #8]
    return true;
   b5732:	2001      	movs	r0, #1
   b5734:	e788      	b.n	b5648 <parse_value+0x58>
                number_c_string[i] = decimal_point;
   b5736:	f882 e000 	strb.w	lr, [r2]
                break;
   b573a:	e7ce      	b.n	b56da <parse_value+0xea>
    else if (number <= (double)INT_MIN)
   b573c:	4b49      	ldr	r3, [pc, #292]	; (b5864 <parse_value+0x274>)
   b573e:	2200      	movs	r2, #0
   b5740:	4640      	mov	r0, r8
   b5742:	4649      	mov	r1, r9
   b5744:	f7ff f8a4 	bl	b4890 <__aeabi_dcmple>
   b5748:	b110      	cbz	r0, b5750 <parse_value+0x160>
        item->valueint = INT_MIN;
   b574a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   b574e:	e7e8      	b.n	b5722 <parse_value+0x132>
        item->valueint = (int)number;
   b5750:	4640      	mov	r0, r8
   b5752:	4649      	mov	r1, r9
   b5754:	f7ff f8d0 	bl	b48f8 <__aeabi_d2iz>
   b5758:	6170      	str	r0, [r6, #20]
   b575a:	e7e3      	b.n	b5724 <parse_value+0x134>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   b575c:	2b5b      	cmp	r3, #91	; 0x5b
   b575e:	d150      	bne.n	b5802 <parse_value+0x212>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   b5760:	68e3      	ldr	r3, [r4, #12]
   b5762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b5766:	f4bf af49 	bcs.w	b55fc <parse_value+0xc>
    input_buffer->depth++;
   b576a:	3301      	adds	r3, #1
   b576c:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   b576e:	5d7b      	ldrb	r3, [r7, r5]
   b5770:	2b5b      	cmp	r3, #91	; 0x5b
   b5772:	f47f af43 	bne.w	b55fc <parse_value+0xc>
    input_buffer->offset++;
   b5776:	3501      	adds	r5, #1
   b5778:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   b577a:	4620      	mov	r0, r4
   b577c:	f7ff fb84 	bl	b4e88 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   b5780:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b5784:	4293      	cmp	r3, r2
   b5786:	d25d      	bcs.n	b5844 <parse_value+0x254>
   b5788:	6822      	ldr	r2, [r4, #0]
   b578a:	5cd2      	ldrb	r2, [r2, r3]
   b578c:	2a5d      	cmp	r2, #93	; 0x5d
   b578e:	d109      	bne.n	b57a4 <parse_value+0x1b4>
    cJSON *head = NULL; /* head of the linked list */
   b5790:	2700      	movs	r7, #0
    input_buffer->depth--;
   b5792:	68e3      	ldr	r3, [r4, #12]
   b5794:	3b01      	subs	r3, #1
   b5796:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   b5798:	2320      	movs	r3, #32
    item->child = head;
   b579a:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   b579e:	68a3      	ldr	r3, [r4, #8]
   b57a0:	3301      	adds	r3, #1
   b57a2:	e741      	b.n	b5628 <parse_value+0x38>
    input_buffer->offset--;
   b57a4:	3b01      	subs	r3, #1
    cJSON *current_item = NULL;
   b57a6:	2500      	movs	r5, #0
    input_buffer->offset--;
   b57a8:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* head of the linked list */
   b57aa:	462f      	mov	r7, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   b57ac:	6920      	ldr	r0, [r4, #16]
   b57ae:	f7ff feed 	bl	b558c <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   b57b2:	46a8      	mov	r8, r5
   b57b4:	4605      	mov	r5, r0
   b57b6:	2800      	cmp	r0, #0
   b57b8:	f000 809b 	beq.w	b58f2 <parse_value+0x302>
        if (head == NULL)
   b57bc:	b1ff      	cbz	r7, b57fe <parse_value+0x20e>
            current_item->next = new_item;
   b57be:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   b57c2:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   b57c6:	68a3      	ldr	r3, [r4, #8]
   b57c8:	3301      	adds	r3, #1
   b57ca:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b57cc:	4620      	mov	r0, r4
   b57ce:	f7ff fb5b 	bl	b4e88 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   b57d2:	4621      	mov	r1, r4
   b57d4:	4628      	mov	r0, r5
   b57d6:	f7ff ff0b 	bl	b55f0 <parse_value>
   b57da:	2800      	cmp	r0, #0
   b57dc:	f000 808c 	beq.w	b58f8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b57e0:	4620      	mov	r0, r4
   b57e2:	f7ff fb51 	bl	b4e88 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   b57e6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b57ea:	4293      	cmp	r3, r2
   b57ec:	f080 8084 	bcs.w	b58f8 <parse_value+0x308>
   b57f0:	6822      	ldr	r2, [r4, #0]
   b57f2:	5cd3      	ldrb	r3, [r2, r3]
   b57f4:	2b2c      	cmp	r3, #44	; 0x2c
   b57f6:	d0d9      	beq.n	b57ac <parse_value+0x1bc>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   b57f8:	2b5d      	cmp	r3, #93	; 0x5d
   b57fa:	d17d      	bne.n	b58f8 <parse_value+0x308>
   b57fc:	e7c9      	b.n	b5792 <parse_value+0x1a2>
   b57fe:	4607      	mov	r7, r0
   b5800:	e7e1      	b.n	b57c6 <parse_value+0x1d6>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   b5802:	2b7b      	cmp	r3, #123	; 0x7b
   b5804:	f47f aefa 	bne.w	b55fc <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   b5808:	68e3      	ldr	r3, [r4, #12]
   b580a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b580e:	f4bf aef5 	bcs.w	b55fc <parse_value+0xc>
    input_buffer->depth++;
   b5812:	3301      	adds	r3, #1
   b5814:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   b5816:	5d7b      	ldrb	r3, [r7, r5]
   b5818:	2b7b      	cmp	r3, #123	; 0x7b
   b581a:	f47f aeef 	bne.w	b55fc <parse_value+0xc>
    input_buffer->offset++;
   b581e:	3501      	adds	r5, #1
   b5820:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   b5822:	4620      	mov	r0, r4
   b5824:	f7ff fb30 	bl	b4e88 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   b5828:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b582c:	4293      	cmp	r3, r2
   b582e:	d209      	bcs.n	b5844 <parse_value+0x254>
   b5830:	6822      	ldr	r2, [r4, #0]
   b5832:	5cd2      	ldrb	r2, [r2, r3]
   b5834:	2a7d      	cmp	r2, #125	; 0x7d
   b5836:	d117      	bne.n	b5868 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
   b5838:	2700      	movs	r7, #0
    input_buffer->depth--;
   b583a:	68e3      	ldr	r3, [r4, #12]
   b583c:	3b01      	subs	r3, #1
   b583e:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   b5840:	2340      	movs	r3, #64	; 0x40
   b5842:	e7aa      	b.n	b579a <parse_value+0x1aa>
        input_buffer->offset--;
   b5844:	3b01      	subs	r3, #1
   b5846:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   b5848:	e6d8      	b.n	b55fc <parse_value+0xc>
   b584a:	bf00      	nop
   b584c:	f3af 8000 	nop.w
   b5850:	ffc00000 	.word	0xffc00000
   b5854:	41dfffff 	.word	0x41dfffff
   b5858:	000bd5ed 	.word	0x000bd5ed
   b585c:	000bdaa5 	.word	0x000bdaa5
   b5860:	000bd5f2 	.word	0x000bd5f2
   b5864:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   b5868:	2500      	movs	r5, #0
    input_buffer->offset--;
   b586a:	3b01      	subs	r3, #1
   b586c:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* linked list head */
   b586e:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   b5870:	46a8      	mov	r8, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   b5872:	6920      	ldr	r0, [r4, #16]
   b5874:	f7ff fe8a 	bl	b558c <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   b5878:	46a9      	mov	r9, r5
   b587a:	4605      	mov	r5, r0
   b587c:	2800      	cmp	r0, #0
   b587e:	d038      	beq.n	b58f2 <parse_value+0x302>
        if (head == NULL)
   b5880:	b3af      	cbz	r7, b58ee <parse_value+0x2fe>
            current_item->next = new_item;
   b5882:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   b5886:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   b588a:	68a3      	ldr	r3, [r4, #8]
   b588c:	3301      	adds	r3, #1
   b588e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b5890:	4620      	mov	r0, r4
   b5892:	f7ff faf9 	bl	b4e88 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   b5896:	4621      	mov	r1, r4
   b5898:	4628      	mov	r0, r5
   b589a:	f7ff fa03 	bl	b4ca4 <parse_string>
   b589e:	b358      	cbz	r0, b58f8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b58a0:	4620      	mov	r0, r4
   b58a2:	f7ff faf1 	bl	b4e88 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   b58a6:	692b      	ldr	r3, [r5, #16]
   b58a8:	622b      	str	r3, [r5, #32]
        current_item->valuestring = NULL;
   b58aa:	f8c5 8010 	str.w	r8, [r5, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   b58ae:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b58b2:	4293      	cmp	r3, r2
   b58b4:	d220      	bcs.n	b58f8 <parse_value+0x308>
   b58b6:	6822      	ldr	r2, [r4, #0]
   b58b8:	5cd2      	ldrb	r2, [r2, r3]
   b58ba:	2a3a      	cmp	r2, #58	; 0x3a
   b58bc:	d11c      	bne.n	b58f8 <parse_value+0x308>
        input_buffer->offset++;
   b58be:	3301      	adds	r3, #1
   b58c0:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b58c2:	4620      	mov	r0, r4
   b58c4:	f7ff fae0 	bl	b4e88 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   b58c8:	4621      	mov	r1, r4
   b58ca:	4628      	mov	r0, r5
   b58cc:	f7ff fe90 	bl	b55f0 <parse_value>
   b58d0:	b190      	cbz	r0, b58f8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b58d2:	4620      	mov	r0, r4
   b58d4:	f7ff fad8 	bl	b4e88 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   b58d8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b58dc:	4293      	cmp	r3, r2
   b58de:	d20b      	bcs.n	b58f8 <parse_value+0x308>
   b58e0:	6822      	ldr	r2, [r4, #0]
   b58e2:	5cd3      	ldrb	r3, [r2, r3]
   b58e4:	2b2c      	cmp	r3, #44	; 0x2c
   b58e6:	d0c4      	beq.n	b5872 <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   b58e8:	2b7d      	cmp	r3, #125	; 0x7d
   b58ea:	d105      	bne.n	b58f8 <parse_value+0x308>
   b58ec:	e7a5      	b.n	b583a <parse_value+0x24a>
   b58ee:	4607      	mov	r7, r0
   b58f0:	e7cb      	b.n	b588a <parse_value+0x29a>
    if (head != NULL)
   b58f2:	2f00      	cmp	r7, #0
   b58f4:	f43f ae82 	beq.w	b55fc <parse_value+0xc>
        cJSON_Delete(head);
   b58f8:	4638      	mov	r0, r7
   b58fa:	f7ff fe53 	bl	b55a4 <cJSON_Delete>
   b58fe:	e67d      	b.n	b55fc <parse_value+0xc>

000b5900 <cJSON_ParseWithOpts>:
{
   b5900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    global_error.json = NULL;
   b5904:	4f30      	ldr	r7, [pc, #192]	; (b59c8 <cJSON_ParseWithOpts+0xc8>)
{
   b5906:	b089      	sub	sp, #36	; 0x24
   b5908:	4605      	mov	r5, r0
   b590a:	460e      	mov	r6, r1
   b590c:	4690      	mov	r8, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   b590e:	2100      	movs	r1, #0
   b5910:	221c      	movs	r2, #28
   b5912:	a801      	add	r0, sp, #4
    global_error.json = NULL;
   b5914:	f04f 0900 	mov.w	r9, #0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   b5918:	f005 fde4 	bl	bb4e4 <memset>
    global_error.position = 0;
   b591c:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL)
   b5920:	2d00      	cmp	r5, #0
   b5922:	d048      	beq.n	b59b6 <cJSON_ParseWithOpts+0xb6>
    buffer.length = strlen((const char*)value) + sizeof("");
   b5924:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   b5926:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   b5928:	f7ff f92c 	bl	b4b84 <strlen>
    buffer.hooks = global_hooks;
   b592c:	4b27      	ldr	r3, [pc, #156]	; (b59cc <cJSON_ParseWithOpts+0xcc>)
    buffer.length = strlen((const char*)value) + sizeof("");
   b592e:	3001      	adds	r0, #1
   b5930:	9002      	str	r0, [sp, #8]
    buffer.hooks = global_hooks;
   b5932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b5936:	ab08      	add	r3, sp, #32
   b5938:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   b593c:	f7ff fe26 	bl	b558c <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   b5940:	4604      	mov	r4, r0
   b5942:	b368      	cbz	r0, b59a0 <cJSON_ParseWithOpts+0xa0>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   b5944:	9801      	ldr	r0, [sp, #4]
   b5946:	b170      	cbz	r0, b5966 <cJSON_ParseWithOpts+0x66>
   b5948:	9b03      	ldr	r3, [sp, #12]
   b594a:	b95b      	cbnz	r3, b5964 <cJSON_ParseWithOpts+0x64>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   b594c:	9b02      	ldr	r3, [sp, #8]
   b594e:	2b04      	cmp	r3, #4
   b5950:	d906      	bls.n	b5960 <cJSON_ParseWithOpts+0x60>
   b5952:	491f      	ldr	r1, [pc, #124]	; (b59d0 <cJSON_ParseWithOpts+0xd0>)
   b5954:	2203      	movs	r2, #3
   b5956:	f005 fe20 	bl	bb59a <strncmp>
   b595a:	b908      	cbnz	r0, b5960 <cJSON_ParseWithOpts+0x60>
        buffer->offset += 3;
   b595c:	2303      	movs	r3, #3
   b595e:	9303      	str	r3, [sp, #12]
    return buffer;
   b5960:	a801      	add	r0, sp, #4
   b5962:	e000      	b.n	b5966 <cJSON_ParseWithOpts+0x66>
        return NULL;
   b5964:	4648      	mov	r0, r9
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   b5966:	f7ff fa8f 	bl	b4e88 <buffer_skip_whitespace>
   b596a:	4601      	mov	r1, r0
   b596c:	4620      	mov	r0, r4
   b596e:	f7ff fe3f 	bl	b55f0 <parse_value>
   b5972:	b190      	cbz	r0, b599a <cJSON_ParseWithOpts+0x9a>
    if (require_null_terminated)
   b5974:	f1b8 0f00 	cmp.w	r8, #0
   b5978:	d104      	bne.n	b5984 <cJSON_ParseWithOpts+0x84>
    if (return_parse_end)
   b597a:	b9f6      	cbnz	r6, b59ba <cJSON_ParseWithOpts+0xba>
}
   b597c:	4620      	mov	r0, r4
   b597e:	b009      	add	sp, #36	; 0x24
   b5980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buffer_skip_whitespace(&buffer);
   b5984:	a801      	add	r0, sp, #4
   b5986:	f7ff fa7f 	bl	b4e88 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   b598a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b598e:	4293      	cmp	r3, r2
   b5990:	d203      	bcs.n	b599a <cJSON_ParseWithOpts+0x9a>
   b5992:	9a01      	ldr	r2, [sp, #4]
   b5994:	5cd3      	ldrb	r3, [r2, r3]
   b5996:	2b00      	cmp	r3, #0
   b5998:	d0ef      	beq.n	b597a <cJSON_ParseWithOpts+0x7a>
        cJSON_Delete(item);
   b599a:	4620      	mov	r0, r4
   b599c:	f7ff fe02 	bl	b55a4 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   b59a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b59a4:	429a      	cmp	r2, r3
   b59a6:	d30d      	bcc.n	b59c4 <cJSON_ParseWithOpts+0xc4>
        else if (buffer.length > 0)
   b59a8:	b103      	cbz	r3, b59ac <cJSON_ParseWithOpts+0xac>
            local_error.position = buffer.length - 1;
   b59aa:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   b59ac:	b10e      	cbz	r6, b59b2 <cJSON_ParseWithOpts+0xb2>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   b59ae:	18ea      	adds	r2, r5, r3
   b59b0:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   b59b2:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   b59b6:	2400      	movs	r4, #0
   b59b8:	e7e0      	b.n	b597c <cJSON_ParseWithOpts+0x7c>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   b59ba:	9b01      	ldr	r3, [sp, #4]
   b59bc:	9a03      	ldr	r2, [sp, #12]
   b59be:	4413      	add	r3, r2
   b59c0:	6033      	str	r3, [r6, #0]
   b59c2:	e7db      	b.n	b597c <cJSON_ParseWithOpts+0x7c>
   b59c4:	4613      	mov	r3, r2
   b59c6:	e7f1      	b.n	b59ac <cJSON_ParseWithOpts+0xac>
   b59c8:	2003e3f8 	.word	0x2003e3f8
   b59cc:	2003e1e8 	.word	0x2003e1e8
   b59d0:	000bd609 	.word	0x000bd609

000b59d4 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   b59d4:	2200      	movs	r2, #0
   b59d6:	4611      	mov	r1, r2
   b59d8:	f7ff bf92 	b.w	b5900 <cJSON_ParseWithOpts>

000b59dc <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   b59dc:	2100      	movs	r1, #0
   b59de:	f7ff bd8b 	b.w	b54f8 <print.constprop.0>

000b59e2 <cJSON_GetArraySize>:
    if (array == NULL)
   b59e2:	b110      	cbz	r0, b59ea <cJSON_GetArraySize+0x8>
    child = array->child;
   b59e4:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   b59e6:	2000      	movs	r0, #0
    while(child != NULL)
   b59e8:	b903      	cbnz	r3, b59ec <cJSON_GetArraySize+0xa>
}
   b59ea:	4770      	bx	lr
        child = child->next;
   b59ec:	681b      	ldr	r3, [r3, #0]
        size++;
   b59ee:	3001      	adds	r0, #1
        child = child->next;
   b59f0:	e7fa      	b.n	b59e8 <cJSON_GetArraySize+0x6>

000b59f2 <cJSON_GetArrayItem>:
    if (index < 0)
   b59f2:	2900      	cmp	r1, #0
   b59f4:	db01      	blt.n	b59fa <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   b59f6:	f7ff ba5c 	b.w	b4eb2 <get_array_item>
}
   b59fa:	2000      	movs	r0, #0
   b59fc:	4770      	bx	lr

000b59fe <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
   b59fe:	2201      	movs	r2, #1
   b5a00:	f7ff baac 	b.w	b4f5c <get_object_item>

000b5a04 <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   b5a04:	f7ff bae8 	b.w	b4fd8 <add_item_to_array>

000b5a08 <cJSON_ReplaceItemViaPointer>:
        newitem->prev->next = newitem;
    }
}

CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
{
   b5a08:	b510      	push	{r4, lr}
    if ((parent == NULL) || (replacement == NULL) || (item == NULL))
   b5a0a:	b1d0      	cbz	r0, b5a42 <cJSON_ReplaceItemViaPointer+0x3a>
   b5a0c:	b1c2      	cbz	r2, b5a40 <cJSON_ReplaceItemViaPointer+0x38>
   b5a0e:	b1c9      	cbz	r1, b5a44 <cJSON_ReplaceItemViaPointer+0x3c>
    {
        return false;
    }

    if (replacement == item)
   b5a10:	428a      	cmp	r2, r1
   b5a12:	d013      	beq.n	b5a3c <cJSON_ReplaceItemViaPointer+0x34>
    {
        return true;
    }

    replacement->next = item->next;
   b5a14:	680b      	ldr	r3, [r1, #0]
   b5a16:	6013      	str	r3, [r2, #0]
    replacement->prev = item->prev;
   b5a18:	684c      	ldr	r4, [r1, #4]
   b5a1a:	6054      	str	r4, [r2, #4]

    if (replacement->next != NULL)
   b5a1c:	b103      	cbz	r3, b5a20 <cJSON_ReplaceItemViaPointer+0x18>
    {
        replacement->next->prev = replacement;
   b5a1e:	605a      	str	r2, [r3, #4]
    }
    if (replacement->prev != NULL)
   b5a20:	6853      	ldr	r3, [r2, #4]
   b5a22:	b103      	cbz	r3, b5a26 <cJSON_ReplaceItemViaPointer+0x1e>
    {
        replacement->prev->next = replacement;
   b5a24:	601a      	str	r2, [r3, #0]
    }
    if (parent->child == item)
   b5a26:	6883      	ldr	r3, [r0, #8]
   b5a28:	4299      	cmp	r1, r3
    {
        parent->child = replacement;
    }

    item->next = NULL;
   b5a2a:	f04f 0300 	mov.w	r3, #0
        parent->child = replacement;
   b5a2e:	bf08      	it	eq
   b5a30:	6082      	streq	r2, [r0, #8]
    item->prev = NULL;
   b5a32:	e9c1 3300 	strd	r3, r3, [r1]
    cJSON_Delete(item);
   b5a36:	4608      	mov	r0, r1
   b5a38:	f7ff fdb4 	bl	b55a4 <cJSON_Delete>
        return true;
   b5a3c:	2001      	movs	r0, #1
   b5a3e:	e000      	b.n	b5a42 <cJSON_ReplaceItemViaPointer+0x3a>
        return false;
   b5a40:	4610      	mov	r0, r2

    return true;
}
   b5a42:	bd10      	pop	{r4, pc}
        return false;
   b5a44:	4608      	mov	r0, r1
   b5a46:	e7fc      	b.n	b5a42 <cJSON_ReplaceItemViaPointer+0x3a>

000b5a48 <cJSON_CreateNull>:
    replace_item_in_object(object, string, newitem, true);
}

/* Create basic types: */
CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)
{
   b5a48:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b5a4a:	4b04      	ldr	r3, [pc, #16]	; (b5a5c <cJSON_CreateNull+0x14>)
   b5a4c:	6818      	ldr	r0, [r3, #0]
   b5a4e:	f7ff fd9d 	bl	b558c <cJSON_New_Item.isra.0>
    if(item)
   b5a52:	b108      	cbz	r0, b5a58 <cJSON_CreateNull+0x10>
    {
        item->type = cJSON_NULL;
   b5a54:	2304      	movs	r3, #4
   b5a56:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b5a58:	bd08      	pop	{r3, pc}
   b5a5a:	bf00      	nop
   b5a5c:	2003e1e8 	.word	0x2003e1e8

000b5a60 <cJSON_AddNullToObject>:
{
   b5a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5a62:	4605      	mov	r5, r0
   b5a64:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   b5a66:	f7ff ffef 	bl	b5a48 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, false))
   b5a6a:	9901      	ldr	r1, [sp, #4]
   b5a6c:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   b5a6e:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, false))
   b5a70:	2300      	movs	r3, #0
   b5a72:	4628      	mov	r0, r5
   b5a74:	f7ff fb70 	bl	b5158 <add_item_to_object.constprop.0>
   b5a78:	4605      	mov	r5, r0
   b5a7a:	b918      	cbnz	r0, b5a84 <cJSON_AddNullToObject+0x24>
    cJSON_Delete(null);
   b5a7c:	4620      	mov	r0, r4
   b5a7e:	f7ff fd91 	bl	b55a4 <cJSON_Delete>
    return NULL;
   b5a82:	462c      	mov	r4, r5
}
   b5a84:	4620      	mov	r0, r4
   b5a86:	b003      	add	sp, #12
   b5a88:	bd30      	pop	{r4, r5, pc}
	...

000b5a8c <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   b5a8c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b5a8e:	4b04      	ldr	r3, [pc, #16]	; (b5aa0 <cJSON_CreateArray+0x14>)
   b5a90:	6818      	ldr	r0, [r3, #0]
   b5a92:	f7ff fd7b 	bl	b558c <cJSON_New_Item.isra.0>
    if(item)
   b5a96:	b108      	cbz	r0, b5a9c <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   b5a98:	2320      	movs	r3, #32
   b5a9a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b5a9c:	bd08      	pop	{r3, pc}
   b5a9e:	bf00      	nop
   b5aa0:	2003e1e8 	.word	0x2003e1e8

000b5aa4 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   b5aa4:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b5aa6:	4b04      	ldr	r3, [pc, #16]	; (b5ab8 <cJSON_CreateObject+0x14>)
   b5aa8:	6818      	ldr	r0, [r3, #0]
   b5aaa:	f7ff fd6f 	bl	b558c <cJSON_New_Item.isra.0>
    if (item)
   b5aae:	b108      	cbz	r0, b5ab4 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   b5ab0:	2340      	movs	r3, #64	; 0x40
   b5ab2:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b5ab4:	bd08      	pop	{r3, pc}
   b5ab6:	bf00      	nop
   b5ab8:	2003e1e8 	.word	0x2003e1e8

000b5abc <cJSON_IsInvalid>:
    *into = '\0';
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)
{
    if (item == NULL)
   b5abc:	b118      	cbz	r0, b5ac6 <cJSON_IsInvalid+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Invalid;
   b5abe:	7b00      	ldrb	r0, [r0, #12]
   b5ac0:	fab0 f080 	clz	r0, r0
   b5ac4:	0940      	lsrs	r0, r0, #5
}
   b5ac6:	4770      	bx	lr

000b5ac8 <cJSON_IsBool>:
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   b5ac8:	b120      	cbz	r0, b5ad4 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   b5aca:	68c0      	ldr	r0, [r0, #12]
   b5acc:	f010 0003 	ands.w	r0, r0, #3
   b5ad0:	bf18      	it	ne
   b5ad2:	2001      	movne	r0, #1
}
   b5ad4:	4770      	bx	lr

000b5ad6 <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   b5ad6:	b118      	cbz	r0, b5ae0 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   b5ad8:	7b00      	ldrb	r0, [r0, #12]
   b5ada:	1f03      	subs	r3, r0, #4
   b5adc:	4258      	negs	r0, r3
   b5ade:	4158      	adcs	r0, r3
}
   b5ae0:	4770      	bx	lr

000b5ae2 <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   b5ae2:	b120      	cbz	r0, b5aee <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   b5ae4:	7b00      	ldrb	r0, [r0, #12]
   b5ae6:	f1a0 0308 	sub.w	r3, r0, #8
   b5aea:	4258      	negs	r0, r3
   b5aec:	4158      	adcs	r0, r3
}
   b5aee:	4770      	bx	lr

000b5af0 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   b5af0:	b120      	cbz	r0, b5afc <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   b5af2:	7b00      	ldrb	r0, [r0, #12]
   b5af4:	f1a0 0310 	sub.w	r3, r0, #16
   b5af8:	4258      	negs	r0, r3
   b5afa:	4158      	adcs	r0, r3
}
   b5afc:	4770      	bx	lr

000b5afe <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
    if (item == NULL)
   b5afe:	b120      	cbz	r0, b5b0a <cJSON_IsArray+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Array;
   b5b00:	7b00      	ldrb	r0, [r0, #12]
   b5b02:	f1a0 0320 	sub.w	r3, r0, #32
   b5b06:	4258      	negs	r0, r3
   b5b08:	4158      	adcs	r0, r3
}
   b5b0a:	4770      	bx	lr

000b5b0c <cJSON_IsObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   b5b0c:	b120      	cbz	r0, b5b18 <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   b5b0e:	7b00      	ldrb	r0, [r0, #12]
   b5b10:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   b5b14:	4258      	negs	r0, r3
   b5b16:	4158      	adcs	r0, r3
}
   b5b18:	4770      	bx	lr
	...

000b5b1c <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   b5b1c:	4b01      	ldr	r3, [pc, #4]	; (b5b24 <cJSON_free+0x8>)
   b5b1e:	685b      	ldr	r3, [r3, #4]
   b5b20:	4718      	bx	r3
   b5b22:	bf00      	nop
   b5b24:	2003e1e8 	.word	0x2003e1e8

000b5b28 <replace_item_in_object.isra.0>:
static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
   b5b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b2a:	4606      	mov	r6, r0
   b5b2c:	460d      	mov	r5, r1
   b5b2e:	461f      	mov	r7, r3
    if ((replacement == NULL) || (string == NULL))
   b5b30:	4614      	mov	r4, r2
   b5b32:	b1da      	cbz	r2, b5b6c <replace_item_in_object.isra.0+0x44>
   b5b34:	b1d1      	cbz	r1, b5b6c <replace_item_in_object.isra.0+0x44>
    if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
   b5b36:	68d3      	ldr	r3, [r2, #12]
   b5b38:	059b      	lsls	r3, r3, #22
   b5b3a:	d403      	bmi.n	b5b44 <replace_item_in_object.isra.0+0x1c>
   b5b3c:	6a10      	ldr	r0, [r2, #32]
   b5b3e:	b108      	cbz	r0, b5b44 <replace_item_in_object.isra.0+0x1c>
        cJSON_free(replacement->string);
   b5b40:	f7ff ffec 	bl	b5b1c <cJSON_free>
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   b5b44:	4628      	mov	r0, r5
   b5b46:	f7ff faef 	bl	b5128 <cJSON_strdup.constprop.0>
    replacement->type &= ~cJSON_StringIsConst;
   b5b4a:	68e3      	ldr	r3, [r4, #12]
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   b5b4c:	6220      	str	r0, [r4, #32]
    replacement->type &= ~cJSON_StringIsConst;
   b5b4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b5b52:	463a      	mov	r2, r7
   b5b54:	4629      	mov	r1, r5
    replacement->type &= ~cJSON_StringIsConst;
   b5b56:	60e3      	str	r3, [r4, #12]
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b5b58:	4630      	mov	r0, r6
   b5b5a:	f7ff f9ff 	bl	b4f5c <get_object_item>
   b5b5e:	4622      	mov	r2, r4
   b5b60:	4601      	mov	r1, r0
   b5b62:	4630      	mov	r0, r6
}
   b5b64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b5b68:	f7ff bf4e 	b.w	b5a08 <cJSON_ReplaceItemViaPointer>
}
   b5b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b6e <cJSON_ReplaceItemInObjectCaseSensitive>:
    replace_item_in_object(object, string, newitem, true);
   b5b6e:	2301      	movs	r3, #1
   b5b70:	f7ff bfda 	b.w	b5b28 <replace_item_in_object.isra.0>

000b5b74 <_Z9ble_setupv>:
*/




void ble_setup(void){
   b5b74:	b570      	push	{r4, r5, r6, lr}
   b5b76:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b5b78:	f003 f8a4 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b7c:	2102      	movs	r1, #2
   b5b7e:	f003 f8f2 	bl	b8d66 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b5b82:	f003 f89f 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b86:	f003 f8e7 	bl	b8d58 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b5b8a:	f003 f89b 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b8e:	4a31      	ldr	r2, [pc, #196]	; (b5c54 <_Z9ble_setupv+0xe0>)
   b5b90:	4c31      	ldr	r4, [pc, #196]	; (b5c58 <_Z9ble_setupv+0xe4>)
   b5b92:	4601      	mov	r1, r0
   b5b94:	a80b      	add	r0, sp, #44	; 0x2c
   b5b96:	f003 fddd 	bl	b9754 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5b9a:	a80b      	add	r0, sp, #44	; 0x2c
   b5b9c:	f003 f985 	bl	b8eaa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b5ba0:	f003 f890 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ba4:	4a2d      	ldr	r2, [pc, #180]	; (b5c5c <_Z9ble_setupv+0xe8>)
   b5ba6:	4601      	mov	r1, r0
   b5ba8:	a80b      	add	r0, sp, #44	; 0x2c
   b5baa:	f003 fdd3 	bl	b9754 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5bae:	a80b      	add	r0, sp, #44	; 0x2c
   b5bb0:	f003 f97b 	bl	b8eaa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b5bb4:	f003 f886 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5bb8:	4a29      	ldr	r2, [pc, #164]	; (b5c60 <_Z9ble_setupv+0xec>)
   b5bba:	4601      	mov	r1, r0
   b5bbc:	a80b      	add	r0, sp, #44	; 0x2c
   b5bbe:	f003 fdc9 	bl	b9754 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5bc2:	a80b      	add	r0, sp, #44	; 0x2c
   b5bc4:	f003 f971 	bl	b8eaa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b5bc8:	f003 f87c 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5bcc:	4a25      	ldr	r2, [pc, #148]	; (b5c64 <_Z9ble_setupv+0xf0>)
   b5bce:	4601      	mov	r1, r0
   b5bd0:	a80b      	add	r0, sp, #44	; 0x2c
   b5bd2:	f003 fdbf 	bl	b9754 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5bd6:	a80b      	add	r0, sp, #44	; 0x2c
   b5bd8:	f003 f967 	bl	b8eaa <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b5bdc:	a803      	add	r0, sp, #12
   b5bde:	f003 fa9a 	bl	b9116 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b5be2:	4b21      	ldr	r3, [pc, #132]	; (b5c68 <_Z9ble_setupv+0xf4>)
   b5be4:	a803      	add	r0, sp, #12
   b5be6:	6819      	ldr	r1, [r3, #0]
   b5be8:	f003 faa8 	bl	b913c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b5bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5bee:	ad06      	add	r5, sp, #24
   b5bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b5bf2:	ad06      	add	r5, sp, #24
   b5bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bf6:	6826      	ldr	r6, [r4, #0]
   b5bf8:	ac0b      	add	r4, sp, #44	; 0x2c
   b5bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5bfc:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b5bfe:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5c00:	f002 fe5e 	bl	b88c0 <_ZNK8particle7BleUuid4typeEv>
   b5c04:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5c06:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5c08:	b9dc      	cbnz	r4, b5c42 <_Z9ble_setupv+0xce>
            uint16_t uuid16 = tempUUID.shorted();
   b5c0a:	f002 fe75 	bl	b88f8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5c0e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5c10:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5c14:	2302      	movs	r3, #2
   b5c16:	f10d 020a 	add.w	r2, sp, #10
   b5c1a:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5c1c:	a803      	add	r0, sp, #12
   b5c1e:	f003 fa6f 	bl	b9100 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b5c22:	f003 f84f 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5c26:	2200      	movs	r2, #0
   b5c28:	a903      	add	r1, sp, #12
   b5c2a:	f003 f8ea 	bl	b8e02 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b5c2e:	f004 fc7b 	bl	ba528 <_Z16_fetch_usbserialv>
   b5c32:	490e      	ldr	r1, [pc, #56]	; (b5c6c <_Z9ble_setupv+0xf8>)
   b5c34:	f003 fed9 	bl	b99ea <_ZN5Print7printlnEPKc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5c38:	9803      	ldr	r0, [sp, #12]
   b5c3a:	f001 ffef 	bl	b7c1c <free>
}
   b5c3e:	b010      	add	sp, #64	; 0x40
   b5c40:	bd70      	pop	{r4, r5, r6, pc}
   b5c42:	f002 fe5b 	bl	b88fc <_ZNK8particle7BleUuid8rawBytesEv>
   b5c46:	2300      	movs	r3, #0
   b5c48:	9300      	str	r3, [sp, #0]
   b5c4a:	4602      	mov	r2, r0
   b5c4c:	2310      	movs	r3, #16
   b5c4e:	2107      	movs	r1, #7
   b5c50:	e7e4      	b.n	b5c1c <_Z9ble_setupv+0xa8>
   b5c52:	bf00      	nop
   b5c54:	2003e414 	.word	0x2003e414
   b5c58:	2003e438 	.word	0x2003e438
   b5c5c:	2003e400 	.word	0x2003e400
   b5c60:	2003e408 	.word	0x2003e408
   b5c64:	2003e41c 	.word	0x2003e41c
   b5c68:	2003e200 	.word	0x2003e200
   b5c6c:	000bd60d 	.word	0x000bd60d

000b5c70 <loop>:
    ask_for_todays_prices();
}

// ##################### MAIN LOOP ##############################
void loop()
{
   b5c70:	b510      	push	{r4, lr}
    // Is message ready to be man-handled?
    if (prices.isMessageDataReady())
   b5c72:	4828      	ldr	r0, [pc, #160]	; (b5d14 <loop+0xa4>)
{
   b5c74:	b0c4      	sub	sp, #272	; 0x110
    if (prices.isMessageDataReady())
   b5c76:	f000 fd41 	bl	b66fc <_ZN10PriceClass18isMessageDataReadyEv>
   b5c7a:	b110      	cbz	r0, b5c82 <loop+0x12>
        prices.assembleMessageData();
   b5c7c:	4825      	ldr	r0, [pc, #148]	; (b5d14 <loop+0xa4>)
   b5c7e:	f000 fedf 	bl	b6a40 <_ZN10PriceClass19assembleMessageDataEv>

    // Should we publish on mqtt/thingspeak/display?
    if (prices.pricesUpdated())
   b5c82:	4824      	ldr	r0, [pc, #144]	; (b5d14 <loop+0xa4>)
   b5c84:	f000 fd38 	bl	b66f8 <_ZN10PriceClass13pricesUpdatedEv>
   b5c88:	b168      	cbz	r0, b5ca6 <loop+0x36>
    {
        String priceString = prices.getLowPriceIntervals().c_str();
   b5c8a:	4922      	ldr	r1, [pc, #136]	; (b5d14 <loop+0xa4>)
   b5c8c:	a804      	add	r0, sp, #16
   b5c8e:	f000 fde1 	bl	b6854 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>
   b5c92:	9904      	ldr	r1, [sp, #16]
   b5c94:	4668      	mov	r0, sp
   b5c96:	f002 fbee 	bl	b8476 <_ZN6StringC1EPK19__FlashStringHelper>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   b5c9a:	a804      	add	r0, sp, #16
   b5c9c:	f005 f8d8 	bl	bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5ca0:	4668      	mov	r0, sp
   b5ca2:	f002 fb9d 	bl	b83e0 <_ZN6StringD1Ev>
    }

    if (wattSensor.checkForNewReading())
   b5ca6:	481c      	ldr	r0, [pc, #112]	; (b5d18 <loop+0xa8>)
   b5ca8:	f001 f95e 	bl	b6f68 <_ZN6Sensor18checkForNewReadingEv>
   b5cac:	b308      	cbz	r0, b5cf2 <loop+0x82>
    {
        // publishPower(wattSensor.getCurrentReading());
        if (BLE.connected())
   b5cae:	f003 f809 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5cb2:	f003 f865 	bl	b8d80 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5cb6:	b1e0      	cbz	r0, b5cf2 <loop+0x82>
        {
            char buffer[255];
            sprintf(buffer, "{\"watt\":%d}", wattSensor.getCurrentReading());
   b5cb8:	4817      	ldr	r0, [pc, #92]	; (b5d18 <loop+0xa8>)
   b5cba:	f001 f951 	bl	b6f60 <_ZN6Sensor17getCurrentReadingEv>
   b5cbe:	4917      	ldr	r1, [pc, #92]	; (b5d1c <loop+0xac>)
   b5cc0:	4602      	mov	r2, r0
   b5cc2:	a804      	add	r0, sp, #16
   b5cc4:	f001 ffba 	bl	b7c3c <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5cc8:	2300      	movs	r3, #0
   b5cca:	22ff      	movs	r2, #255	; 0xff
   b5ccc:	a904      	add	r1, sp, #16
   b5cce:	4814      	ldr	r0, [pc, #80]	; (b5d20 <loop+0xb0>)
   b5cd0:	f002 fed2 	bl	b8a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            WattCharacteristic.setValue(buffer);
            DkkTodayCharacteristic.setValue(pricestoday_Json);
   b5cd4:	4913      	ldr	r1, [pc, #76]	; (b5d24 <loop+0xb4>)
   b5cd6:	4814      	ldr	r0, [pc, #80]	; (b5d28 <loop+0xb8>)
   b5cd8:	2200      	movs	r2, #0
   b5cda:	f002 ff2d 	bl	b8b38 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
            //DkkTodayCharacteristic.setValue("{\"pricestoday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
            DkkTomorrowCharacteristic.setValue("{\"pricestomorrow\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b5cde:	4913      	ldr	r1, [pc, #76]	; (b5d2c <loop+0xbc>)
   b5ce0:	4813      	ldr	r0, [pc, #76]	; (b5d30 <loop+0xc0>)
   b5ce2:	2200      	movs	r2, #0
   b5ce4:	f002 ff2d 	bl	b8b42 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
            WhrTodayCharacteristic.setValue("{\"WHr_today\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b5ce8:	4912      	ldr	r1, [pc, #72]	; (b5d34 <loop+0xc4>)
   b5cea:	4813      	ldr	r0, [pc, #76]	; (b5d38 <loop+0xc8>)
   b5cec:	2200      	movs	r2, #0
   b5cee:	f002 ff28 	bl	b8b42 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        }
    }

    if(NewpricesToday){
   b5cf2:	4c12      	ldr	r4, [pc, #72]	; (b5d3c <loop+0xcc>)
   b5cf4:	7823      	ldrb	r3, [r4, #0]
   b5cf6:	b133      	cbz	r3, b5d06 <loop+0x96>
        DkkTodayCharacteristic.setValue(pricestoday_Json);
   b5cf8:	490a      	ldr	r1, [pc, #40]	; (b5d24 <loop+0xb4>)
   b5cfa:	480b      	ldr	r0, [pc, #44]	; (b5d28 <loop+0xb8>)
   b5cfc:	2200      	movs	r2, #0
   b5cfe:	f002 ff1b 	bl	b8b38 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        NewpricesToday = false;
   b5d02:	2300      	movs	r3, #0
   b5d04:	7023      	strb	r3, [r4, #0]
#ifdef USE_MQTT
    mqttKeepAlive();
#endif

    // Waitasecond...
    delay(1000);
   b5d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b5d0a:	b044      	add	sp, #272	; 0x110
   b5d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(1000);
   b5d10:	f003 bfd6 	b.w	b9cc0 <delay>
   b5d14:	2003e490 	.word	0x2003e490
   b5d18:	2003e5c0 	.word	0x2003e5c0
   b5d1c:	000bd631 	.word	0x000bd631
   b5d20:	2003e414 	.word	0x2003e414
   b5d24:	2003e4f0 	.word	0x2003e4f0
   b5d28:	2003e400 	.word	0x2003e400
   b5d2c:	000bd63d 	.word	0x000bd63d
   b5d30:	2003e408 	.word	0x2003e408
   b5d34:	000bd691 	.word	0x000bd691
   b5d38:	2003e41c 	.word	0x2003e41c
   b5d3c:	2003e410 	.word	0x2003e410

000b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5d40:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5d42:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5d44:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5d46:	b17c      	cbz	r4, b5d68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5d48:	6863      	ldr	r3, [r4, #4]
   b5d4a:	3b01      	subs	r3, #1
   b5d4c:	6063      	str	r3, [r4, #4]
   b5d4e:	b95b      	cbnz	r3, b5d68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5d50:	6823      	ldr	r3, [r4, #0]
   b5d52:	4620      	mov	r0, r4
   b5d54:	689b      	ldr	r3, [r3, #8]
   b5d56:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d58:	68a3      	ldr	r3, [r4, #8]
   b5d5a:	3b01      	subs	r3, #1
   b5d5c:	60a3      	str	r3, [r4, #8]
   b5d5e:	b91b      	cbnz	r3, b5d68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5d60:	6823      	ldr	r3, [r4, #0]
   b5d62:	4620      	mov	r0, r4
   b5d64:	68db      	ldr	r3, [r3, #12]
   b5d66:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5d68:	4628      	mov	r0, r5
   b5d6a:	bd38      	pop	{r3, r4, r5, pc}

000b5d6c <_Z21ask_for_todays_pricesv>:
    }

#endif
}

void ask_for_todays_prices(void){
   b5d6c:	b510      	push	{r4, lr}
   b5d6e:	b09a      	sub	sp, #104	; 0x68
String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b5d70:	f003 ff90 	bl	b9c94 <_ZN9TimeClass4yearEv>
   b5d74:	4928      	ldr	r1, [pc, #160]	; (b5e18 <_Z21ask_for_todays_pricesv+0xac>)
   b5d76:	4602      	mov	r2, r0
   b5d78:	a806      	add	r0, sp, #24
   b5d7a:	f002 fc2d 	bl	b85d8 <_ZN6String6formatEPKcz>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b5d7e:	a906      	add	r1, sp, #24
   b5d80:	a80e      	add	r0, sp, #56	; 0x38
   b5d82:	f002 fbb8 	bl	b84f6 <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b5d86:	f003 ff7d 	bl	b9c84 <_ZN9TimeClass5monthEv>
   b5d8a:	4924      	ldr	r1, [pc, #144]	; (b5e1c <_Z21ask_for_todays_pricesv+0xb0>)
   b5d8c:	4602      	mov	r2, r0
   b5d8e:	a80a      	add	r0, sp, #40	; 0x28
   b5d90:	f002 fc22 	bl	b85d8 <_ZN6String6formatEPKcz>
   b5d94:	a90a      	add	r1, sp, #40	; 0x28
   b5d96:	a80e      	add	r0, sp, #56	; 0x38
   b5d98:	f002 fbff 	bl	b859a <_ZplRK15StringSumHelperRK6String>
   b5d9c:	4604      	mov	r4, r0
                  String::format("\"day\": \"%02d\", ", Time.day()) +
   b5d9e:	f003 ff65 	bl	b9c6c <_ZN9TimeClass3dayEv>
   b5da2:	491f      	ldr	r1, [pc, #124]	; (b5e20 <_Z21ask_for_todays_pricesv+0xb4>)
   b5da4:	4602      	mov	r2, r0
   b5da6:	a812      	add	r0, sp, #72	; 0x48
   b5da8:	f002 fc16 	bl	b85d8 <_ZN6String6formatEPKcz>
   b5dac:	a912      	add	r1, sp, #72	; 0x48
   b5dae:	4620      	mov	r0, r4
   b5db0:	f002 fbf3 	bl	b859a <_ZplRK15StringSumHelperRK6String>
   b5db4:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b5db6:	f003 ff41 	bl	b9c3c <_ZN9TimeClass4hourEv>
   b5dba:	491a      	ldr	r1, [pc, #104]	; (b5e24 <_Z21ask_for_todays_pricesv+0xb8>)
   b5dbc:	4602      	mov	r2, r0
   b5dbe:	a816      	add	r0, sp, #88	; 0x58
   b5dc0:	f002 fc0a 	bl	b85d8 <_ZN6String6formatEPKcz>
   b5dc4:	a916      	add	r1, sp, #88	; 0x58
   b5dc6:	4620      	mov	r0, r4
   b5dc8:	f002 fbe7 	bl	b859a <_ZplRK15StringSumHelperRK6String>
   b5dcc:	4601      	mov	r1, r0
   b5dce:	a802      	add	r0, sp, #8
   b5dd0:	f002 fb91 	bl	b84f6 <_ZN6StringC1ERKS_>
   b5dd4:	a816      	add	r0, sp, #88	; 0x58
   b5dd6:	f002 fb03 	bl	b83e0 <_ZN6StringD1Ev>
   b5dda:	a812      	add	r0, sp, #72	; 0x48
   b5ddc:	f002 fb00 	bl	b83e0 <_ZN6StringD1Ev>
   b5de0:	a80a      	add	r0, sp, #40	; 0x28
   b5de2:	f002 fafd 	bl	b83e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5de6:	a80e      	add	r0, sp, #56	; 0x38
   b5de8:	f002 fafa 	bl	b83e0 <_ZN6StringD1Ev>
   b5dec:	a806      	add	r0, sp, #24
   b5dee:	f002 faf7 	bl	b83e0 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5df2:	4b0d      	ldr	r3, [pc, #52]	; (b5e28 <_Z21ask_for_todays_pricesv+0xbc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5df4:	9a02      	ldr	r2, [sp, #8]
   b5df6:	781b      	ldrb	r3, [r3, #0]
   b5df8:	490c      	ldr	r1, [pc, #48]	; (b5e2c <_Z21ask_for_todays_pricesv+0xc0>)
   b5dfa:	f88d 3000 	strb.w	r3, [sp]
   b5dfe:	a816      	add	r0, sp, #88	; 0x58
   b5e00:	233c      	movs	r3, #60	; 0x3c
   b5e02:	f004 f93d 	bl	ba080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5e06:	a817      	add	r0, sp, #92	; 0x5c
   b5e08:	f7ff ff9a 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5e0c:	a802      	add	r0, sp, #8
   b5e0e:	f002 fae7 	bl	b83e0 <_ZN6StringD1Ev>

    // Trigger the integration
    Particle.publish("pricestoday", data, PRIVATE);
}
   b5e12:	b01a      	add	sp, #104	; 0x68
   b5e14:	bd10      	pop	{r4, pc}
   b5e16:	bf00      	nop
   b5e18:	000bd6e0 	.word	0x000bd6e0
   b5e1c:	000bd6f1 	.word	0x000bd6f1
   b5e20:	000bd703 	.word	0x000bd703
   b5e24:	000bd713 	.word	0x000bd713
   b5e28:	2003e489 	.word	0x2003e489
   b5e2c:	000bd724 	.word	0x000bd724

000b5e30 <setup>:
{
   b5e30:	b513      	push	{r0, r1, r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e32:	f001 fec3 	bl	b7bbc <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5e36:	b910      	cbnz	r0, b5e3e <setup+0xe>
            spark_process();
   b5e38:	f001 feb8 	bl	b7bac <spark_process>
        while (_while() && !_condition()) {
   b5e3c:	e7f9      	b.n	b5e32 <setup+0x2>
   b5e3e:	f001 febd 	bl	b7bbc <spark_cloud_flag_connected>
    ntpTime = new NtpTime(15,ntp_denmark);  // Do an ntp update every 15 minutes;
   b5e42:	20bc      	movs	r0, #188	; 0xbc
   b5e44:	f7fe fef9 	bl	b4c3a <_Znwj>
   b5e48:	4604      	mov	r4, r0
   b5e4a:	b120      	cbz	r0, b5e56 <setup+0x26>
   b5e4c:	4b12      	ldr	r3, [pc, #72]	; (b5e98 <setup+0x68>)
   b5e4e:	210f      	movs	r1, #15
   b5e50:	681a      	ldr	r2, [r3, #0]
   b5e52:	f001 f8e9 	bl	b7028 <_ZN7NtpTimeC1EiPc>
   b5e56:	4b11      	ldr	r3, [pc, #68]	; (b5e9c <setup+0x6c>)
    ntpTime->start();
   b5e58:	4620      	mov	r0, r4
    ntpTime = new NtpTime(15,ntp_denmark);  // Do an ntp update every 15 minutes;
   b5e5a:	601c      	str	r4, [r3, #0]
    ntpTime->start();
   b5e5c:	f001 f92a 	bl	b70b4 <_ZN7NtpTime5startEv>
    Time.zone(1);
   b5e60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b5e64:	f003 fe40 	bl	b9ae8 <_ZN9TimeClass4zoneEf>
    Time.beginDST();
   b5e68:	f003 fe5e 	bl	b9b28 <_ZN9TimeClass8beginDSTEv>
    wattSensor.initSensor();
   b5e6c:	480c      	ldr	r0, [pc, #48]	; (b5ea0 <setup+0x70>)
   b5e6e:	f001 f845 	bl	b6efc <_ZN6Sensor10initSensorEv>
    ble_setup();
   b5e72:	f7ff fe7f 	bl	b5b74 <_Z9ble_setupv>
    prices.initSubscriptions();
   b5e76:	480b      	ldr	r0, [pc, #44]	; (b5ea4 <setup+0x74>)
   b5e78:	f000 fc96 	bl	b67a8 <_ZN10PriceClass17initSubscriptionsEv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5e7c:	2300      	movs	r3, #0
   b5e7e:	e9cd 3300 	strd	r3, r3, [sp]
   b5e82:	4909      	ldr	r1, [pc, #36]	; (b5ea8 <setup+0x78>)
   b5e84:	4809      	ldr	r0, [pc, #36]	; (b5eac <setup+0x7c>)
   b5e86:	461a      	mov	r2, r3
   b5e88:	f001 fea8 	bl	b7bdc <spark_subscribe>
}
   b5e8c:	b002      	add	sp, #8
   b5e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ask_for_todays_prices();
   b5e92:	f7ff bf6b 	b.w	b5d6c <_Z21ask_for_todays_pricesv>
   b5e96:	bf00      	nop
   b5e98:	2003e204 	.word	0x2003e204
   b5e9c:	2003e48c 	.word	0x2003e48c
   b5ea0:	2003e5c0 	.word	0x2003e5c0
   b5ea4:	2003e490 	.word	0x2003e490
   b5ea8:	000b6089 	.word	0x000b6089
   b5eac:	000bd730 	.word	0x000bd730

000b5eb0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5eb0:	b082      	sub	sp, #8
   b5eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5eb4:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b5eb6:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5eb8:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b5eba:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5ebc:	e9c0 3300 	strd	r3, r3, [r0]
   b5ec0:	4606      	mov	r6, r0
   b5ec2:	4694      	mov	ip, r2
   b5ec4:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b5ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ec8:	ac04      	add	r4, sp, #16
   b5eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ecc:	682b      	ldr	r3, [r5, #0]
   b5ece:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b5ed0:	ad1a      	add	r5, sp, #104	; 0x68
   b5ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ed4:	ac09      	add	r4, sp, #36	; 0x24
   b5ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ed8:	682b      	ldr	r3, [r5, #0]
   b5eda:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5edc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b5ede:	9302      	str	r3, [sp, #8]
   b5ee0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b5ee2:	9301      	str	r3, [sp, #4]
   b5ee4:	ab09      	add	r3, sp, #36	; 0x24
   b5ee6:	9300      	str	r3, [sp, #0]
   b5ee8:	4630      	mov	r0, r6
   b5eea:	ab04      	add	r3, sp, #16
   b5eec:	4662      	mov	r2, ip
   b5eee:	4639      	mov	r1, r7
   b5ef0:	f003 fb06 	bl	b9500 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5ef4:	4630      	mov	r0, r6
   b5ef6:	b00f      	add	sp, #60	; 0x3c
   b5ef8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5efc:	b002      	add	sp, #8
   b5efe:	4770      	bx	lr

000b5f00 <_GLOBAL__sub_I_argonName>:
        val_(val) {
   b5f00:	4b4c      	ldr	r3, [pc, #304]	; (b6034 <_GLOBAL__sub_I_argonName+0x134>)
    

    NewpricesToday=true;
    //Serial.println(pricestoday);

   b5f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f06:	2500      	movs	r5, #0
   b5f08:	701d      	strb	r5, [r3, #0]
   b5f0a:	4b4b      	ldr	r3, [pc, #300]	; (b6038 <_GLOBAL__sub_I_argonName+0x138>)
const BleUuid powermonitorserviceUuid(serviceUuid);
   b5f0c:	4c4b      	ldr	r4, [pc, #300]	; (b603c <_GLOBAL__sub_I_argonName+0x13c>)
const BleUuid wattcharacteristicUuid(watt);
   b5f0e:	f8df 8164 	ldr.w	r8, [pc, #356]	; b6074 <_GLOBAL__sub_I_argonName+0x174>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b5f12:	f8df b164 	ldr.w	fp, [pc, #356]	; b6078 <_GLOBAL__sub_I_argonName+0x178>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b5f16:	f8df a164 	ldr.w	sl, [pc, #356]	; b607c <_GLOBAL__sub_I_argonName+0x17c>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b5f1a:	f8df 9164 	ldr.w	r9, [pc, #356]	; b6080 <_GLOBAL__sub_I_argonName+0x180>
   b5f1e:	f04f 0201 	mov.w	r2, #1
   b5f22:	701a      	strb	r2, [r3, #0]
const BleUuid powermonitorserviceUuid(serviceUuid);
   b5f24:	4b46      	ldr	r3, [pc, #280]	; (b6040 <_GLOBAL__sub_I_argonName+0x140>)
   b5f26:	b08d      	sub	sp, #52	; 0x34
   b5f28:	6819      	ldr	r1, [r3, #0]
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	f002 fd66 	bl	b89fc <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt);
   b5f30:	4b44      	ldr	r3, [pc, #272]	; (b6044 <_GLOBAL__sub_I_argonName+0x144>)
   b5f32:	4640      	mov	r0, r8
   b5f34:	6819      	ldr	r1, [r3, #0]
   b5f36:	f002 fd61 	bl	b89fc <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b5f3a:	4b43      	ldr	r3, [pc, #268]	; (b6048 <_GLOBAL__sub_I_argonName+0x148>)
   b5f3c:	4658      	mov	r0, fp
   b5f3e:	6819      	ldr	r1, [r3, #0]
   b5f40:	f002 fd5c 	bl	b89fc <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b5f44:	4b41      	ldr	r3, [pc, #260]	; (b604c <_GLOBAL__sub_I_argonName+0x14c>)
   b5f46:	4650      	mov	r0, sl
   b5f48:	6819      	ldr	r1, [r3, #0]
   b5f4a:	f002 fd57 	bl	b89fc <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b5f4e:	4b40      	ldr	r3, [pc, #256]	; (b6050 <_GLOBAL__sub_I_argonName+0x150>)
   b5f50:	4648      	mov	r0, r9
   b5f52:	6819      	ldr	r1, [r3, #0]
   b5f54:	f002 fd52 	bl	b89fc <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5f58:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5f5c:	4626      	mov	r6, r4
   b5f5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5f60:	2710      	movs	r7, #16
   b5f62:	eb0d 0c07 	add.w	ip, sp, r7
   b5f66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5f6a:	6833      	ldr	r3, [r6, #0]
   b5f6c:	f8cc 3000 	str.w	r3, [ip]
   b5f70:	f108 0304 	add.w	r3, r8, #4
   b5f74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5f76:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5f7a:	463a      	mov	r2, r7
   b5f7c:	f8d8 3000 	ldr.w	r3, [r8]
   b5f80:	4934      	ldr	r1, [pc, #208]	; (b6054 <_GLOBAL__sub_I_argonName+0x154>)
   b5f82:	4835      	ldr	r0, [pc, #212]	; (b6058 <_GLOBAL__sub_I_argonName+0x158>)
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b5f84:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b6084 <_GLOBAL__sub_I_argonName+0x184>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5f88:	f7ff ff92 	bl	b5eb0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b5f8c:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5f90:	46a6      	mov	lr, r4
   b5f92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5f96:	eb0d 0c07 	add.w	ip, sp, r7
   b5f9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5f9e:	6833      	ldr	r3, [r6, #0]
   b5fa0:	f8cc 3000 	str.w	r3, [ip]
   b5fa4:	f10b 0304 	add.w	r3, fp, #4
   b5fa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5faa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5fae:	f8db 3000 	ldr.w	r3, [fp]
   b5fb2:	482a      	ldr	r0, [pc, #168]	; (b605c <_GLOBAL__sub_I_argonName+0x15c>)
   b5fb4:	463a      	mov	r2, r7
   b5fb6:	4641      	mov	r1, r8
   b5fb8:	f7ff ff7a 	bl	b5eb0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b5fbc:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5fc0:	46a6      	mov	lr, r4
   b5fc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5fc6:	eb0d 0c07 	add.w	ip, sp, r7
   b5fca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5fce:	6833      	ldr	r3, [r6, #0]
   b5fd0:	f8cc 3000 	str.w	r3, [ip]
   b5fd4:	f10a 0304 	add.w	r3, sl, #4
   b5fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5fda:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5fde:	f8da 3000 	ldr.w	r3, [sl]
   b5fe2:	481f      	ldr	r0, [pc, #124]	; (b6060 <_GLOBAL__sub_I_argonName+0x160>)
   b5fe4:	463a      	mov	r2, r7
   b5fe6:	4641      	mov	r1, r8
   b5fe8:	f7ff ff62 	bl	b5eb0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b5fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5fee:	eb0d 0c07 	add.w	ip, sp, r7
   b5ff2:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5ff6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5ffa:	6833      	ldr	r3, [r6, #0]
   b5ffc:	f8cc 3000 	str.w	r3, [ip]
   b6000:	f109 0304 	add.w	r3, r9, #4
   b6004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b6006:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b600a:	f8d9 3000 	ldr.w	r3, [r9]
   b600e:	4815      	ldr	r0, [pc, #84]	; (b6064 <_GLOBAL__sub_I_argonName+0x164>)
   b6010:	463a      	mov	r2, r7
   b6012:	4641      	mov	r1, r8
   b6014:	f7ff ff4c 	bl	b5eb0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
String pricestoday_Json;
   b6018:	4913      	ldr	r1, [pc, #76]	; (b6068 <_GLOBAL__sub_I_argonName+0x168>)
   b601a:	4814      	ldr	r0, [pc, #80]	; (b606c <_GLOBAL__sub_I_argonName+0x16c>)
   b601c:	f002 fa2b 	bl	b8476 <_ZN6StringC1EPK19__FlashStringHelper>
PriceClass prices;
   b6020:	4813      	ldr	r0, [pc, #76]	; (b6070 <_GLOBAL__sub_I_argonName+0x170>)
   b6022:	f000 fa03 	bl	b642c <_ZN10PriceClassC1Ev>
SYSTEM_THREAD(ENABLED);
   b6026:	4629      	mov	r1, r5
   b6028:	2001      	movs	r0, #1
   b602a:	b00d      	add	sp, #52	; 0x34
   b602c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b6030:	f001 bd20 	b.w	b7a74 <system_thread_set_state>
   b6034:	2003e488 	.word	0x2003e488
   b6038:	2003e489 	.word	0x2003e489
   b603c:	2003e438 	.word	0x2003e438
   b6040:	2003e208 	.word	0x2003e208
   b6044:	2003e20c 	.word	0x2003e20c
   b6048:	2003e1f4 	.word	0x2003e1f4
   b604c:	2003e1f8 	.word	0x2003e1f8
   b6050:	2003e1fc 	.word	0x2003e1fc
   b6054:	000bd740 	.word	0x000bd740
   b6058:	2003e414 	.word	0x2003e414
   b605c:	2003e400 	.word	0x2003e400
   b6060:	2003e408 	.word	0x2003e408
   b6064:	2003e41c 	.word	0x2003e41c
   b6068:	000bdfcc 	.word	0x000bdfcc
   b606c:	2003e4f0 	.word	0x2003e4f0
   b6070:	2003e490 	.word	0x2003e490
   b6074:	2003e424 	.word	0x2003e424
   b6078:	2003e44c 	.word	0x2003e44c
   b607c:	2003e474 	.word	0x2003e474
   b6080:	2003e460 	.word	0x2003e460
   b6084:	000bd749 	.word	0x000bd749

000b6088 <_Z30pricetoday_SubscriptionHandlerPKcS0_>:
void pricetoday_SubscriptionHandler(const char *event, const char *data){
   b6088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b608c:	b095      	sub	sp, #84	; 0x54
   b608e:	460c      	mov	r4, r1
    String jsonbuff = String::format("{\"pricestoday\":[") +
   b6090:	a804      	add	r0, sp, #16
   b6092:	4960      	ldr	r1, [pc, #384]	; (b6214 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x18c>)
   b6094:	f002 faa0 	bl	b85d8 <_ZN6String6formatEPKcz>
	StringSumHelper(const String &s) : String(s) {}
   b6098:	a904      	add	r1, sp, #16
   b609a:	a80c      	add	r0, sp, #48	; 0x30
   b609c:	f002 fa2b 	bl	b84f6 <_ZN6StringC1ERKS_>
                    String::format(data) +
   b60a0:	4621      	mov	r1, r4
   b60a2:	a808      	add	r0, sp, #32
   b60a4:	f002 fa98 	bl	b85d8 <_ZN6String6formatEPKcz>
   b60a8:	a908      	add	r1, sp, #32
   b60aa:	a80c      	add	r0, sp, #48	; 0x30
   b60ac:	f002 fa75 	bl	b859a <_ZplRK15StringSumHelperRK6String>
                    String::format("0]}");
   b60b0:	4959      	ldr	r1, [pc, #356]	; (b6218 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x190>)
                    String::format(data) +
   b60b2:	4604      	mov	r4, r0
                    String::format("0]}");
   b60b4:	a810      	add	r0, sp, #64	; 0x40
   b60b6:	f002 fa8f 	bl	b85d8 <_ZN6String6formatEPKcz>
   b60ba:	a910      	add	r1, sp, #64	; 0x40
   b60bc:	4620      	mov	r0, r4
   b60be:	f002 fa6c 	bl	b859a <_ZplRK15StringSumHelperRK6String>
   b60c2:	4601      	mov	r1, r0
   b60c4:	4668      	mov	r0, sp
   b60c6:	f002 fa16 	bl	b84f6 <_ZN6StringC1ERKS_>
   b60ca:	a810      	add	r0, sp, #64	; 0x40
   b60cc:	f002 f988 	bl	b83e0 <_ZN6StringD1Ev>
   b60d0:	a808      	add	r0, sp, #32
   b60d2:	f002 f985 	bl	b83e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b60d6:	a80c      	add	r0, sp, #48	; 0x30
   b60d8:	f002 f982 	bl	b83e0 <_ZN6StringD1Ev>
   b60dc:	a804      	add	r0, sp, #16
   b60de:	f002 f97f 	bl	b83e0 <_ZN6StringD1Ev>
    JSONVar myObject = JSON.parse(jsonbuff);
   b60e2:	494e      	ldr	r1, [pc, #312]	; (b621c <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x194>)
   b60e4:	466a      	mov	r2, sp
   b60e6:	a804      	add	r0, sp, #16
   b60e8:	f001 f926 	bl	b7338 <_ZN9JSONClass5parseERK6String>
    if (JSON.typeof(myObject) == "undefined")
   b60ec:	494b      	ldr	r1, [pc, #300]	; (b621c <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x194>)
   b60ee:	aa04      	add	r2, sp, #16
   b60f0:	a810      	add	r0, sp, #64	; 0x40
   b60f2:	f001 f928 	bl	b7346 <_ZN9JSONClass7typeof_ERK7JSONVar>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b60f6:	494a      	ldr	r1, [pc, #296]	; (b6220 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x198>)
   b60f8:	a810      	add	r0, sp, #64	; 0x40
   b60fa:	f002 fa5a 	bl	b85b2 <_ZNK6String6equalsEPKc>
   b60fe:	4604      	mov	r4, r0
   b6100:	a810      	add	r0, sp, #64	; 0x40
   b6102:	f002 f96d 	bl	b83e0 <_ZN6StringD1Ev>
   b6106:	b16c      	cbz	r4, b6124 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x9c>
        Serial.println("Parsing todays prices input failed!");
   b6108:	f004 fa0e 	bl	ba528 <_Z16_fetch_usbserialv>
   b610c:	4945      	ldr	r1, [pc, #276]	; (b6224 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x19c>)
   b610e:	f003 fc6c 	bl	b99ea <_ZN5Print7printlnEPKc>
    JSONVar myObject = JSON.parse(jsonbuff);
   b6112:	a804      	add	r0, sp, #16
   b6114:	f001 f926 	bl	b7364 <_ZN7JSONVarD1Ev>
                    String::format("0]}");
   b6118:	4668      	mov	r0, sp
   b611a:	f002 f961 	bl	b83e0 <_ZN6StringD1Ev>
   b611e:	b015      	add	sp, #84	; 0x54
   b6120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (myObject.hasOwnProperty("pricestoday"))
   b6124:	4940      	ldr	r1, [pc, #256]	; (b6228 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1a0>)
   b6126:	a804      	add	r0, sp, #16
   b6128:	f001 f966 	bl	b73f8 <_ZNK7JSONVar14hasOwnPropertyEPKc>
   b612c:	2800      	cmp	r0, #0
   b612e:	d06d      	beq.n	b620c <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x184>
        pricestoday_Json = String::format("{\"pricestoday\":[");
   b6130:	4938      	ldr	r1, [pc, #224]	; (b6214 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x18c>)
            pricestoday_Json += String::format("%d,",(int)myArray[h]);
   b6132:	f8df 8108 	ldr.w	r8, [pc, #264]	; b623c <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1b4>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6136:	f8df 90f8 	ldr.w	r9, [pc, #248]	; b6230 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1a8>
            pricetoday_arr[h] = myArray[h];
   b613a:	4f3c      	ldr	r7, [pc, #240]	; (b622c <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1a4>)
        pricestoday_Json = String::format("{\"pricestoday\":[");
   b613c:	a810      	add	r0, sp, #64	; 0x40
   b613e:	f002 fa4b 	bl	b85d8 <_ZN6String6formatEPKcz>
   b6142:	a910      	add	r1, sp, #64	; 0x40
   b6144:	483a      	ldr	r0, [pc, #232]	; (b6230 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1a8>)
   b6146:	f002 f9e1 	bl	b850c <_ZN6StringaSEOS_>
   b614a:	a810      	add	r0, sp, #64	; 0x40
   b614c:	f002 f948 	bl	b83e0 <_ZN6StringD1Ev>
        JSONVar myArray = myObject["pricestoday"];
   b6150:	4a35      	ldr	r2, [pc, #212]	; (b6228 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1a0>)
   b6152:	a904      	add	r1, sp, #16
   b6154:	a808      	add	r0, sp, #32
   b6156:	f001 f9d5 	bl	b7504 <_ZN7JSONVarixEPKc>
        int maxbuf =0;
   b615a:	4625      	mov	r5, r4
            pricestoday_Json += String::format("%d,",(int)myArray[h]);
   b615c:	4622      	mov	r2, r4
   b615e:	a908      	add	r1, sp, #32
   b6160:	a80c      	add	r0, sp, #48	; 0x30
   b6162:	f001 f9ef 	bl	b7544 <_ZN7JSONVarixEi>
   b6166:	a80c      	add	r0, sp, #48	; 0x30
   b6168:	f001 f927 	bl	b73ba <_ZNK7JSONVarcviEv>
   b616c:	4641      	mov	r1, r8
   b616e:	4602      	mov	r2, r0
   b6170:	a810      	add	r0, sp, #64	; 0x40
   b6172:	f002 fa31 	bl	b85d8 <_ZN6String6formatEPKcz>
   b6176:	a910      	add	r1, sp, #64	; 0x40
   b6178:	4648      	mov	r0, r9
   b617a:	f002 fa0a 	bl	b8592 <_ZN6String6concatERKS_>
   b617e:	a810      	add	r0, sp, #64	; 0x40
   b6180:	f002 f92e 	bl	b83e0 <_ZN6StringD1Ev>
   b6184:	a80c      	add	r0, sp, #48	; 0x30
   b6186:	f001 f8ed 	bl	b7364 <_ZN7JSONVarD1Ev>
            pricetoday_arr[h] = myArray[h];
   b618a:	4622      	mov	r2, r4
   b618c:	a908      	add	r1, sp, #32
   b618e:	a810      	add	r0, sp, #64	; 0x40
   b6190:	f001 f9d8 	bl	b7544 <_ZN7JSONVarixEi>
   b6194:	a810      	add	r0, sp, #64	; 0x40
   b6196:	f001 f91b 	bl	b73d0 <_ZNK7JSONVarcvdEv>
   b619a:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   b619e:	ed83 0b00 	vstr	d0, [r3]
   b61a2:	a810      	add	r0, sp, #64	; 0x40
   b61a4:	f001 f8de 	bl	b7364 <_ZN7JSONVarD1Ev>
            if (maxbuf<(int)myArray[h]){
   b61a8:	4622      	mov	r2, r4
   b61aa:	a908      	add	r1, sp, #32
   b61ac:	a810      	add	r0, sp, #64	; 0x40
   b61ae:	f001 f9c9 	bl	b7544 <_ZN7JSONVarixEi>
   b61b2:	a810      	add	r0, sp, #64	; 0x40
   b61b4:	f001 f901 	bl	b73ba <_ZNK7JSONVarcviEv>
   b61b8:	4606      	mov	r6, r0
   b61ba:	a810      	add	r0, sp, #64	; 0x40
   b61bc:	f001 f8d2 	bl	b7364 <_ZN7JSONVarD1Ev>
   b61c0:	42ae      	cmp	r6, r5
   b61c2:	dd0b      	ble.n	b61dc <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x154>
                maxbuf=(int)myArray[h];
   b61c4:	4622      	mov	r2, r4
   b61c6:	a908      	add	r1, sp, #32
   b61c8:	a810      	add	r0, sp, #64	; 0x40
   b61ca:	f001 f9bb 	bl	b7544 <_ZN7JSONVarixEi>
   b61ce:	a810      	add	r0, sp, #64	; 0x40
   b61d0:	f001 f8f3 	bl	b73ba <_ZNK7JSONVarcviEv>
   b61d4:	4605      	mov	r5, r0
   b61d6:	a810      	add	r0, sp, #64	; 0x40
   b61d8:	f001 f8c4 	bl	b7364 <_ZN7JSONVarD1Ev>
        for (size_t h = 0; h < 24; h++)
   b61dc:	3401      	adds	r4, #1
   b61de:	2c18      	cmp	r4, #24
   b61e0:	d1bc      	bne.n	b615c <_Z30pricetoday_SubscriptionHandlerPKcS0_+0xd4>
   b61e2:	4c13      	ldr	r4, [pc, #76]	; (b6230 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1a8>)
        pricestoday_Json += String::format("%d]}",maxbuf);
   b61e4:	4913      	ldr	r1, [pc, #76]	; (b6234 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1ac>)
   b61e6:	462a      	mov	r2, r5
   b61e8:	a810      	add	r0, sp, #64	; 0x40
   b61ea:	f002 f9f5 	bl	b85d8 <_ZN6String6formatEPKcz>
   b61ee:	a910      	add	r1, sp, #64	; 0x40
   b61f0:	4620      	mov	r0, r4
   b61f2:	f002 f9ce 	bl	b8592 <_ZN6String6concatERKS_>
   b61f6:	a810      	add	r0, sp, #64	; 0x40
   b61f8:	f002 f8f2 	bl	b83e0 <_ZN6StringD1Ev>
        Serial.println(pricestoday_Json);
   b61fc:	f004 f994 	bl	ba528 <_Z16_fetch_usbserialv>
   b6200:	6821      	ldr	r1, [r4, #0]
   b6202:	f003 fbf2 	bl	b99ea <_ZN5Print7printlnEPKc>
        JSONVar myArray = myObject["pricestoday"];
   b6206:	a808      	add	r0, sp, #32
   b6208:	f001 f8ac 	bl	b7364 <_ZN7JSONVarD1Ev>
    NewpricesToday=true;
   b620c:	4b0a      	ldr	r3, [pc, #40]	; (b6238 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x1b0>)
   b620e:	2201      	movs	r2, #1
   b6210:	701a      	strb	r2, [r3, #0]
   b6212:	e77e      	b.n	b6112 <_Z30pricetoday_SubscriptionHandlerPKcS0_+0x8a>
   b6214:	000bd753 	.word	0x000bd753
   b6218:	000bd764 	.word	0x000bd764
   b621c:	2003e5d0 	.word	0x2003e5d0
   b6220:	000bd768 	.word	0x000bd768
   b6224:	000bd772 	.word	0x000bd772
   b6228:	000bd724 	.word	0x000bd724
   b622c:	2003e500 	.word	0x2003e500
   b6230:	2003e4f0 	.word	0x2003e4f0
   b6234:	000bd79a 	.word	0x000bd79a
   b6238:	2003e410 	.word	0x2003e410
   b623c:	000bd796 	.word	0x000bd796

000b6240 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b6240:	6943      	ldr	r3, [r0, #20]
   b6242:	b113      	cbz	r3, b624a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6244:	6983      	ldr	r3, [r0, #24]
   b6246:	300c      	adds	r0, #12
   b6248:	4718      	bx	r3
            callback();
        }
    }
   b624a:	4770      	bx	lr

000b624c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b624c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b624e:	2100      	movs	r1, #0
   b6250:	4604      	mov	r4, r0
   b6252:	4608      	mov	r0, r1
   b6254:	f001 fa96 	bl	b7784 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b6258:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b625a:	4620      	mov	r0, r4
   b625c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b625e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b6260:	f001 faa8 	bl	b77b4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b6264:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b6266:	b10c      	cbz	r4, b626c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b6268:	2301      	movs	r3, #1
   b626a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b626c:	2100      	movs	r1, #0
   b626e:	2001      	movs	r0, #1
   b6270:	f001 fa88 	bl	b7784 <os_thread_scheduling>
            }
        }
        if (t) {
   b6274:	b12c      	cbz	r4, b6282 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b6276:	6823      	ldr	r3, [r4, #0]
   b6278:	4620      	mov	r0, r4
   b627a:	689b      	ldr	r3, [r3, #8]
   b627c:	4798      	blx	r3
            t->running = false;
   b627e:	2300      	movs	r3, #0
   b6280:	7123      	strb	r3, [r4, #4]
        }
    }
   b6282:	b002      	add	sp, #8
   b6284:	bd10      	pop	{r4, pc}

000b6286 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6286:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   b6288:	6803      	ldr	r3, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
   b628a:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b628c:	685c      	ldr	r4, [r3, #4]
   b628e:	689d      	ldr	r5, [r3, #8]
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	6812      	ldr	r2, [r2, #0]
   b6294:	1066      	asrs	r6, r4, #1
   b6296:	eb05 0064 	add.w	r0, r5, r4, asr #1
   b629a:	07e4      	lsls	r4, r4, #31
   b629c:	bf44      	itt	mi
   b629e:	59ac      	ldrmi	r4, [r5, r6]
   b62a0:	58e3      	ldrmi	r3, [r4, r3]
      }
   b62a2:	bc70      	pop	{r4, r5, r6}
   b62a4:	4718      	bx	r3

000b62a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b62a6:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b62a8:	6803      	ldr	r3, [r0, #0]
   b62aa:	685a      	ldr	r2, [r3, #4]
   b62ac:	6899      	ldr	r1, [r3, #8]
   b62ae:	681b      	ldr	r3, [r3, #0]
   b62b0:	1054      	asrs	r4, r2, #1
   b62b2:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b62b6:	07d2      	lsls	r2, r2, #31
   b62b8:	bf48      	it	mi
   b62ba:	590a      	ldrmi	r2, [r1, r4]
      }
   b62bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   b62c0:	bf48      	it	mi
   b62c2:	58d3      	ldrmi	r3, [r2, r3]
   b62c4:	4718      	bx	r3

000b62c6 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b62c6:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b62c8:	b538      	push	{r3, r4, r5, lr}
   b62ca:	4604      	mov	r4, r0
	switch (__op)
   b62cc:	d102      	bne.n	b62d4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b62ce:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b62d0:	6023      	str	r3, [r4, #0]
	}
   b62d2:	e003      	b.n	b62dc <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b62d4:	2a02      	cmp	r2, #2
   b62d6:	d003      	beq.n	b62e0 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b62d8:	2a03      	cmp	r2, #3
   b62da:	d00d      	beq.n	b62f8 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b62dc:	2000      	movs	r0, #0
   b62de:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b62e0:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b62e2:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b62e4:	f7fe fca9 	bl	b4c3a <_Znwj>
   b62e8:	4603      	mov	r3, r0
   b62ea:	2800      	cmp	r0, #0
   b62ec:	d0f0      	beq.n	b62d0 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b62ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b62f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b62f6:	e7eb      	b.n	b62d0 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b62f8:	6800      	ldr	r0, [r0, #0]
   b62fa:	2800      	cmp	r0, #0
   b62fc:	d0ee      	beq.n	b62dc <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b62fe:	210c      	movs	r1, #12
   b6300:	f7fe fca1 	bl	b4c46 <_ZdlPvj>
   b6304:	e7ea      	b.n	b62dc <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6306 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b6306:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6308:	b538      	push	{r3, r4, r5, lr}
   b630a:	4604      	mov	r4, r0
	switch (__op)
   b630c:	d102      	bne.n	b6314 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b630e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6310:	6023      	str	r3, [r4, #0]
	}
   b6312:	e003      	b.n	b631c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b6314:	2a02      	cmp	r2, #2
   b6316:	d003      	beq.n	b6320 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b6318:	2a03      	cmp	r2, #3
   b631a:	d00d      	beq.n	b6338 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b631c:	2000      	movs	r0, #0
   b631e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6320:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6322:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6324:	f7fe fc89 	bl	b4c3a <_Znwj>
   b6328:	4603      	mov	r3, r0
   b632a:	2800      	cmp	r0, #0
   b632c:	d0f0      	beq.n	b6310 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b632e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6332:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6336:	e7eb      	b.n	b6310 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6338:	6800      	ldr	r0, [r0, #0]
   b633a:	2800      	cmp	r0, #0
   b633c:	d0ee      	beq.n	b631c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b633e:	210c      	movs	r1, #12
   b6340:	f7fe fc81 	bl	b4c46 <_ZdlPvj>
   b6344:	e7ea      	b.n	b631c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b6348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>:
       *  @brief  Append a C string.
       *  @param __s  The C string to append.
       *  @return  Reference to this string.
       */
      basic_string&
      append(const _CharT* __s)
   b6348:	b513      	push	{r0, r1, r4, lr}
   b634a:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b634c:	4608      	mov	r0, r1
   b634e:	9101      	str	r1, [sp, #4]
   b6350:	f7fe fc18 	bl	b4b84 <strlen>
	if (this->max_size() - (this->size() - __n1) < __n2)
   b6354:	6863      	ldr	r3, [r4, #4]
   b6356:	9901      	ldr	r1, [sp, #4]
   b6358:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
   b635c:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
   b6360:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   b6364:	333f      	adds	r3, #63	; 0x3f
   b6366:	4298      	cmp	r0, r3
   b6368:	4602      	mov	r2, r0
   b636a:	d902      	bls.n	b6372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x2a>
	  __throw_length_error(__N(__s));
   b636c:	4804      	ldr	r0, [pc, #16]	; (b6380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x38>)
   b636e:	f004 fc7d 	bl	bac6c <_ZSt20__throw_length_errorPKc>
      {
	__glibcxx_requires_string(__s);
	const size_type __n = traits_type::length(__s);
	_M_check_length(size_type(0), __n, "basic_string::append");
	return _M_append(__s, __n);
   b6372:	4620      	mov	r0, r4
      }
   b6374:	b002      	add	sp, #8
   b6376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _M_append(__s, __n);
   b637a:	f004 be83 	b.w	bb084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
   b637e:	bf00      	nop
   b6380:	000bd870 	.word	0x000bd870

000b6384 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b6384:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b6386:	6880      	ldr	r0, [r0, #8]
   b6388:	b130      	cbz	r0, b6398 <_ZN5Timer4stopEj.isra.0+0x14>
   b638a:	2300      	movs	r3, #0
   b638c:	e9cd 1300 	strd	r1, r3, [sp]
   b6390:	461a      	mov	r2, r3
   b6392:	2102      	movs	r1, #2
   b6394:	f001 fa16 	bl	b77c4 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b6398:	b003      	add	sp, #12
   b639a:	f85d fb04 	ldr.w	pc, [sp], #4

000b639e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b639e:	b538      	push	{r3, r4, r5, lr}
   b63a0:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b63a2:	b16c      	cbz	r4, b63c0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x22>
	{
	  _M_erase(_S_right(__x));
   b63a4:	68e0      	ldr	r0, [r4, #12]
   b63a6:	f7ff fffa 	bl	b639e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { _M_dispose(); }
   b63aa:	f104 0014 	add.w	r0, r4, #20
      { return static_cast<_Link_type>(__x->_M_left); }
   b63ae:	68a5      	ldr	r5, [r4, #8]
   b63b0:	f004 fd4e 	bl	bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b63b4:	4620      	mov	r0, r4
   b63b6:	212c      	movs	r1, #44	; 0x2c
   b63b8:	f7fe fc45 	bl	b4c46 <_ZdlPvj>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   b63bc:	462c      	mov	r4, r5
      }
   b63be:	e7f0      	b.n	b63a2 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
	}
    }
   b63c0:	bd38      	pop	{r3, r4, r5, pc}

000b63c2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b63c2:	b510      	push	{r4, lr}
      if (_M_manager)
   b63c4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b63c6:	4604      	mov	r4, r0
      if (_M_manager)
   b63c8:	b113      	cbz	r3, b63d0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b63ca:	2203      	movs	r2, #3
   b63cc:	4601      	mov	r1, r0
   b63ce:	4798      	blx	r3
    }
   b63d0:	4620      	mov	r0, r4
   b63d2:	bd10      	pop	{r4, pc}

000b63d4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b63d4:	b538      	push	{r3, r4, r5, lr}
   b63d6:	4b0f      	ldr	r3, [pc, #60]	; (b6414 <_ZN5TimerD1Ev+0x40>)
   b63d8:	6003      	str	r3, [r0, #0]
        if (handle) {
   b63da:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b63dc:	4604      	mov	r4, r0
        if (handle) {
   b63de:	b19b      	cbz	r3, b6408 <_ZN5TimerD1Ev+0x34>
            stop();
   b63e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b63e4:	f7ff ffce 	bl	b6384 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b63e8:	68a0      	ldr	r0, [r4, #8]
   b63ea:	2100      	movs	r1, #0
   b63ec:	f001 fa0a 	bl	b7804 <os_timer_set_id>
            while (running) {
   b63f0:	7923      	ldrb	r3, [r4, #4]
   b63f2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b63f6:	b113      	cbz	r3, b63fe <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b63f8:	f001 f9bc 	bl	b7774 <os_thread_yield>
            while (running) {
   b63fc:	e7f8      	b.n	b63f0 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b63fe:	68a0      	ldr	r0, [r4, #8]
   b6400:	4629      	mov	r1, r5
   b6402:	f001 f9cf 	bl	b77a4 <os_timer_destroy>
            handle = nullptr;
   b6406:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b6408:	f104 000c 	add.w	r0, r4, #12
   b640c:	f7ff ffd9 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
    }
   b6410:	4620      	mov	r0, r4
   b6412:	bd38      	pop	{r3, r4, r5, pc}
   b6414:	000bd994 	.word	0x000bd994

000b6418 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b6418:	b510      	push	{r4, lr}
   b641a:	4604      	mov	r4, r0
    }
   b641c:	f7ff ffda 	bl	b63d4 <_ZN5TimerD1Ev>
   b6420:	4620      	mov	r0, r4
   b6422:	211c      	movs	r1, #28
   b6424:	f7fe fc0f 	bl	b4c46 <_ZdlPvj>
   b6428:	4620      	mov	r0, r4
   b642a:	bd10      	pop	{r4, pc}

000b642c <_ZN10PriceClassC1Ev>:
#define PRICE_INDEX 20
#define MILLISEC_HOUR 3600000
#define MILLISEC_MINUTE 60000

// Constructor
PriceClass::PriceClass()
   b642c:	b5f0      	push	{r4, r5, r6, r7, lr}
	  : _Node_allocator()
   b642e:	1d03      	adds	r3, r0, #4
      _M_header._M_color = _S_red;
   b6430:	2500      	movs	r5, #0
      _M_header._M_left = &_M_header;
   b6432:	e9c0 5302 	strd	r5, r3, [r0, #8]
      _M_node_count = 0;
   b6436:	e9c0 3504 	strd	r3, r5, [r0, #16]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b643a:	f100 034c 	add.w	r3, r0, #76	; 0x4c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b643e:	e9c0 5507 	strd	r5, r5, [r0, #28]
   b6442:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
   b6446:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
      { _M_string_length = __length; }
   b644a:	e9c0 3511 	strd	r3, r5, [r0, #68]	; 0x44
      _M_header._M_color = _S_red;
   b644e:	7105      	strb	r5, [r0, #4]
    : newPricesReceived{false},
      messageDataReady{false}
   b6450:	8305      	strh	r5, [r0, #24]
      { __c1 = __c2; }
   b6452:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
PriceClass::PriceClass()
   b6456:	b089      	sub	sp, #36	; 0x24
   b6458:	4604      	mov	r4, r0
{
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b645a:	201c      	movs	r0, #28
   b645c:	f7fe fbed 	bl	b4c3a <_Znwj>
   b6460:	4606      	mov	r6, r0
   b6462:	2800      	cmp	r0, #0
   b6464:	d033      	beq.n	b64ce <_ZN10PriceClassC1Ev+0xa2>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6466:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6468:	9506      	str	r5, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b646a:	f7fe fbe6 	bl	b4c3a <_Znwj>
   b646e:	b118      	cbz	r0, b6478 <_ZN10PriceClassC1Ev+0x4c>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6470:	4b19      	ldr	r3, [pc, #100]	; (b64d8 <_ZN10PriceClassC1Ev+0xac>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6472:	6084      	str	r4, [r0, #8]
   b6474:	e9c0 3500 	strd	r3, r5, [r0]
   b6478:	9004      	str	r0, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b647a:	ad04      	add	r5, sp, #16
   b647c:	e895 0003 	ldmia.w	r5, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b6480:	4b16      	ldr	r3, [pc, #88]	; (b64dc <_ZN10PriceClassC1Ev+0xb0>)
   b6482:	6033      	str	r3, [r6, #0]
   b6484:	2300      	movs	r3, #0
   b6486:	7133      	strb	r3, [r6, #4]
   b6488:	60b3      	str	r3, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
   b648a:	f106 020c 	add.w	r2, r6, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b648e:	af02      	add	r7, sp, #8
   b6490:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6494:	e892 0003 	ldmia.w	r2, {r0, r1}
   b6498:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b649c:	e897 0003 	ldmia.w	r7, {r0, r1}
   b64a0:	e882 0003 	stmia.w	r2, {r0, r1}
   b64a4:	4a0e      	ldr	r2, [pc, #56]	; (b64e0 <_ZN10PriceClassC1Ev+0xb4>)
   b64a6:	6172      	str	r2, [r6, #20]
      __a = _GLIBCXX_MOVE(__b);
   b64a8:	69b2      	ldr	r2, [r6, #24]
   b64aa:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b64ac:	4a0d      	ldr	r2, [pc, #52]	; (b64e4 <_ZN10PriceClassC1Ev+0xb8>)
   b64ae:	61b2      	str	r2, [r6, #24]
      __a = _GLIBCXX_MOVE(__b);
   b64b0:	9306      	str	r3, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b64b2:	9301      	str	r3, [sp, #4]
   b64b4:	2301      	movs	r3, #1
   b64b6:	9300      	str	r3, [sp, #0]
   b64b8:	4a0b      	ldr	r2, [pc, #44]	; (b64e8 <_ZN10PriceClassC1Ev+0xbc>)
   b64ba:	4633      	mov	r3, r6
   b64bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b64c0:	f106 0008 	add.w	r0, r6, #8
   b64c4:	f001 f966 	bl	b7794 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b64c8:	4628      	mov	r0, r5
   b64ca:	f7ff ff7a 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
}
   b64ce:	4620      	mov	r0, r4
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b64d0:	65e6      	str	r6, [r4, #92]	; 0x5c
}
   b64d2:	b009      	add	sp, #36	; 0x24
   b64d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b64d6:	bf00      	nop
   b64d8:	000b668d 	.word	0x000b668d
   b64dc:	000bd994 	.word	0x000bd994
   b64e0:	000b6307 	.word	0x000b6307
   b64e4:	000b62a7 	.word	0x000b62a7
   b64e8:	000b624d 	.word	0x000b624d

000b64ec <_ZN10PriceClass18requestPriceUpdateEi>:
// #####################################################################
/// @brief This method makes a publish request, to fire off the webhook,
// which in turn will fire off the "prices" event, when data is ready.
// #####################################################################
void PriceClass::requestPriceUpdate(int day)
{
   b64ec:	b570      	push	{r4, r5, r6, lr}
   b64ee:	b0a0      	sub	sp, #128	; 0x80
   b64f0:	460c      	mov	r4, r1
   b64f2:	4605      	mov	r5, r0
    String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b64f4:	f003 fbce 	bl	b9c94 <_ZN9TimeClass4yearEv>
   b64f8:	4940      	ldr	r1, [pc, #256]	; (b65fc <_ZN10PriceClass18requestPriceUpdateEi+0x110>)
   b64fa:	4602      	mov	r2, r0
   b64fc:	a808      	add	r0, sp, #32
   b64fe:	f002 f86b 	bl	b85d8 <_ZN6String6formatEPKcz>
	StringSumHelper(const String &s) : String(s) {}
   b6502:	a908      	add	r1, sp, #32
   b6504:	a810      	add	r0, sp, #64	; 0x40
   b6506:	f001 fff6 	bl	b84f6 <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b650a:	f003 fbbb 	bl	b9c84 <_ZN9TimeClass5monthEv>
   b650e:	493c      	ldr	r1, [pc, #240]	; (b6600 <_ZN10PriceClass18requestPriceUpdateEi+0x114>)
   b6510:	4602      	mov	r2, r0
   b6512:	a80c      	add	r0, sp, #48	; 0x30
   b6514:	f002 f860 	bl	b85d8 <_ZN6String6formatEPKcz>
   b6518:	a90c      	add	r1, sp, #48	; 0x30
   b651a:	a810      	add	r0, sp, #64	; 0x40
   b651c:	f002 f83d 	bl	b859a <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day\": \"%02d\", ", day) +
   b6520:	4622      	mov	r2, r4
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b6522:	4606      	mov	r6, r0
                  String::format("\"day\": \"%02d\", ", day) +
   b6524:	4937      	ldr	r1, [pc, #220]	; (b6604 <_ZN10PriceClass18requestPriceUpdateEi+0x118>)
   b6526:	a814      	add	r0, sp, #80	; 0x50
   b6528:	f002 f856 	bl	b85d8 <_ZN6String6formatEPKcz>
   b652c:	a914      	add	r1, sp, #80	; 0x50
   b652e:	4630      	mov	r0, r6
   b6530:	f002 f833 	bl	b859a <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b6534:	1ca2      	adds	r2, r4, #2
   b6536:	4934      	ldr	r1, [pc, #208]	; (b6608 <_ZN10PriceClass18requestPriceUpdateEi+0x11c>)
                  String::format("\"day\": \"%02d\", ", day) +
   b6538:	4606      	mov	r6, r0
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b653a:	a818      	add	r0, sp, #96	; 0x60
   b653c:	f002 f84c 	bl	b85d8 <_ZN6String6formatEPKcz>
   b6540:	a918      	add	r1, sp, #96	; 0x60
   b6542:	4630      	mov	r0, r6
   b6544:	f002 f829 	bl	b859a <_ZplRK15StringSumHelperRK6String>
   b6548:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b654a:	f003 fb77 	bl	b9c3c <_ZN9TimeClass4hourEv>
   b654e:	492f      	ldr	r1, [pc, #188]	; (b660c <_ZN10PriceClass18requestPriceUpdateEi+0x120>)
   b6550:	4602      	mov	r2, r0
   b6552:	a81c      	add	r0, sp, #112	; 0x70
   b6554:	f002 f840 	bl	b85d8 <_ZN6String6formatEPKcz>
   b6558:	a91c      	add	r1, sp, #112	; 0x70
   b655a:	4620      	mov	r0, r4
   b655c:	f002 f81d 	bl	b859a <_ZplRK15StringSumHelperRK6String>
   b6560:	4601      	mov	r1, r0
   b6562:	a804      	add	r0, sp, #16
   b6564:	f001 ffc7 	bl	b84f6 <_ZN6StringC1ERKS_>
   b6568:	a81c      	add	r0, sp, #112	; 0x70
   b656a:	f001 ff39 	bl	b83e0 <_ZN6StringD1Ev>
   b656e:	a818      	add	r0, sp, #96	; 0x60
   b6570:	f001 ff36 	bl	b83e0 <_ZN6StringD1Ev>
   b6574:	a814      	add	r0, sp, #80	; 0x50
   b6576:	f001 ff33 	bl	b83e0 <_ZN6StringD1Ev>
   b657a:	a80c      	add	r0, sp, #48	; 0x30
   b657c:	f001 ff30 	bl	b83e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b6580:	a810      	add	r0, sp, #64	; 0x40
   b6582:	f001 ff2d 	bl	b83e0 <_ZN6StringD1Ev>
   b6586:	a808      	add	r0, sp, #32
   b6588:	f001 ff2a 	bl	b83e0 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b658c:	4b20      	ldr	r3, [pc, #128]	; (b6610 <_ZN10PriceClass18requestPriceUpdateEi+0x124>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b658e:	9a04      	ldr	r2, [sp, #16]
   b6590:	781b      	ldrb	r3, [r3, #0]
   b6592:	f88d 3000 	strb.w	r3, [sp]
   b6596:	491f      	ldr	r1, [pc, #124]	; (b6614 <_ZN10PriceClass18requestPriceUpdateEi+0x128>)
   b6598:	233c      	movs	r3, #60	; 0x3c
   b659a:	a81c      	add	r0, sp, #112	; 0x70
   b659c:	f003 fd70 	bl	ba080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b65a0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   b65a2:	b17c      	cbz	r4, b65c4 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
      if (--_M_use_count == 0)
   b65a4:	6863      	ldr	r3, [r4, #4]
   b65a6:	3b01      	subs	r3, #1
   b65a8:	6063      	str	r3, [r4, #4]
   b65aa:	b95b      	cbnz	r3, b65c4 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
          _M_dispose();
   b65ac:	6823      	ldr	r3, [r4, #0]
   b65ae:	4620      	mov	r0, r4
   b65b0:	689b      	ldr	r3, [r3, #8]
   b65b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b65b4:	68a3      	ldr	r3, [r4, #8]
   b65b6:	3b01      	subs	r3, #1
   b65b8:	60a3      	str	r3, [r4, #8]
   b65ba:	b91b      	cbnz	r3, b65c4 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
            _M_destroy();
   b65bc:	6823      	ldr	r3, [r4, #0]
   b65be:	4620      	mov	r0, r4
   b65c0:	68db      	ldr	r3, [r3, #12]
   b65c2:	4798      	blx	r3
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b65c4:	f003 fb29 	bl	b9c1a <_ZN9TimeClass3nowEv>
   b65c8:	4602      	mov	r2, r0
   b65ca:	17c3      	asrs	r3, r0, #31
   b65cc:	a81c      	add	r0, sp, #112	; 0x70
   b65ce:	f003 facb 	bl	b9b68 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b65d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	return __builtin_strlen(__s);
   b65d4:	9303      	str	r3, [sp, #12]
   b65d6:	4618      	mov	r0, r3
   b65d8:	f7fe fad4 	bl	b4b84 <strlen>
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
   b65dc:	9b03      	ldr	r3, [sp, #12]
   b65de:	6caa      	ldr	r2, [r5, #72]	; 0x48
   b65e0:	9000      	str	r0, [sp, #0]
   b65e2:	2100      	movs	r1, #0
   b65e4:	f105 0044 	add.w	r0, r5, #68	; 0x44
   b65e8:	f004 fcce 	bl	baf88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>

    // Trigger the integration
    Particle.publish("elpriser", data);
    lastUpdate = Time.timeStr();
   b65ec:	a81c      	add	r0, sp, #112	; 0x70
   b65ee:	f001 fef7 	bl	b83e0 <_ZN6StringD1Ev>
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b65f2:	a804      	add	r0, sp, #16
   b65f4:	f001 fef4 	bl	b83e0 <_ZN6StringD1Ev>
}
   b65f8:	b020      	add	sp, #128	; 0x80
   b65fa:	bd70      	pop	{r4, r5, r6, pc}
   b65fc:	000bd6e0 	.word	0x000bd6e0
   b6600:	000bd6f1 	.word	0x000bd6f1
   b6604:	000bd703 	.word	0x000bd703
   b6608:	000bd885 	.word	0x000bd885
   b660c:	000bd713 	.word	0x000bd713
   b6610:	2003e5cc 	.word	0x2003e5cc
   b6614:	000bd899 	.word	0x000bd899

000b6618 <_ZN10PriceClass28getpricesSubscriptionHandlerEPKcS1_>:
{
   b6618:	b510      	push	{r4, lr}
   b661a:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b661c:	f003 fb26 	bl	b9c6c <_ZN9TimeClass3dayEv>
   b6620:	4601      	mov	r1, r0
   b6622:	4620      	mov	r0, r4
}
   b6624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b6628:	f7ff bf60 	b.w	b64ec <_ZN10PriceClass18requestPriceUpdateEi>

000b662c <_ZN10PriceClass12updatePricesEv>:

// ####################################################################
/// @brief This is a public method, for requesting an update on prices.
// ####################################################################
void PriceClass::updatePrices()
{
   b662c:	b510      	push	{r4, lr}
   b662e:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b6630:	f003 fb1c 	bl	b9c6c <_ZN9TimeClass3dayEv>
   b6634:	4601      	mov	r1, r0
   b6636:	4620      	mov	r0, r4
}
   b6638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b663c:	f7ff bf56 	b.w	b64ec <_ZN10PriceClass18requestPriceUpdateEi>

000b6640 <_ZN10PriceClass14timedCountDownEj>:

// ##########################################################################
/// @brief Small method for setting the timer period, and starting the timer.
// ##########################################################################
void PriceClass::timedCountDown(uint period)
{
   b6640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6642:	4604      	mov	r4, r0
   b6644:	9103      	str	r1, [sp, #12]
    updateTimer->stop();
   b6646:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b6648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b664c:	f7ff fe9a 	bl	b6384 <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b6650:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   b6652:	6890      	ldr	r0, [r2, #8]
   b6654:	b140      	cbz	r0, b6668 <_ZN10PriceClass14timedCountDownEj+0x28>
   b6656:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b665a:	2200      	movs	r2, #0
   b665c:	e9cd 1200 	strd	r1, r2, [sp]
   b6660:	9b03      	ldr	r3, [sp, #12]
   b6662:	2103      	movs	r1, #3
   b6664:	f001 f8ae 	bl	b77c4 <os_timer_change>
    updateTimer->changePeriod(period);
    updateTimer->start();
   b6668:	6de4      	ldr	r4, [r4, #92]	; 0x5c
        stop(fromISR);
   b666a:	2100      	movs	r1, #0
   b666c:	4620      	mov	r0, r4
   b666e:	f7ff fe89 	bl	b6384 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b6672:	68a0      	ldr	r0, [r4, #8]
   b6674:	b140      	cbz	r0, b6688 <_ZN10PriceClass14timedCountDownEj+0x48>
   b6676:	2300      	movs	r3, #0
   b6678:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b667c:	e9cd 2300 	strd	r2, r3, [sp]
   b6680:	4619      	mov	r1, r3
   b6682:	461a      	mov	r2, r3
   b6684:	f001 f89e 	bl	b77c4 <os_timer_change>
}
   b6688:	b004      	add	sp, #16
   b668a:	bd10      	pop	{r4, pc}

000b668c <_ZN10PriceClass11timedUpdateEv>:
{
   b668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b668e:	4605      	mov	r5, r0
    uint8_t hourNow = Time.hour();
   b6690:	f003 fad4 	bl	b9c3c <_ZN9TimeClass4hourEv>
   b6694:	b2c4      	uxtb	r4, r0
    if (hourNow == 11 || hourNow == 23)
   b6696:	2c0b      	cmp	r4, #11
   b6698:	d001      	beq.n	b669e <_ZN10PriceClass11timedUpdateEv+0x12>
   b669a:	2c17      	cmp	r4, #23
   b669c:	d110      	bne.n	b66c0 <_ZN10PriceClass11timedUpdateEv+0x34>
        timerPeriod = (12 * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b669e:	f003 fad9 	bl	b9c54 <_ZN9TimeClass6minuteEv>
        timedCountDown(timerPeriod);
   b66a2:	4b12      	ldr	r3, [pc, #72]	; (b66ec <_ZN10PriceClass11timedUpdateEv+0x60>)
   b66a4:	4912      	ldr	r1, [pc, #72]	; (b66f0 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b66a6:	fb01 3100 	mla	r1, r1, r0, r3
   b66aa:	4628      	mov	r0, r5
   b66ac:	f7ff ffc8 	bl	b6640 <_ZN10PriceClass14timedCountDownEj>
        requestPriceUpdate(Time.day());
   b66b0:	f003 fadc 	bl	b9c6c <_ZN9TimeClass3dayEv>
   b66b4:	4601      	mov	r1, r0
   b66b6:	4628      	mov	r0, r5
}
   b66b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        requestPriceUpdate(Time.day());
   b66bc:	f7ff bf16 	b.w	b64ec <_ZN10PriceClass18requestPriceUpdateEi>
        if (hourNow < 11)
   b66c0:	2c0a      	cmp	r4, #10
   b66c2:	4f0b      	ldr	r7, [pc, #44]	; (b66f0 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b66c4:	4e0b      	ldr	r6, [pc, #44]	; (b66f4 <_ZN10PriceClass11timedUpdateEv+0x68>)
   b66c6:	d80b      	bhi.n	b66e0 <_ZN10PriceClass11timedUpdateEv+0x54>
            timerPeriod = ((11 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b66c8:	f003 fac4 	bl	b9c54 <_ZN9TimeClass6minuteEv>
   b66cc:	f1c4 040b 	rsb	r4, r4, #11
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b66d0:	4378      	muls	r0, r7
            timedCountDown(timerPeriod);
   b66d2:	fb06 0104 	mla	r1, r6, r4, r0
   b66d6:	4628      	mov	r0, r5
}
   b66d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            timedCountDown(timerPeriod);
   b66dc:	f7ff bfb0 	b.w	b6640 <_ZN10PriceClass14timedCountDownEj>
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b66e0:	f003 fab8 	bl	b9c54 <_ZN9TimeClass6minuteEv>
   b66e4:	f1c4 0417 	rsb	r4, r4, #23
   b66e8:	e7f2      	b.n	b66d0 <_ZN10PriceClass11timedUpdateEv+0x44>
   b66ea:	bf00      	nop
   b66ec:	02932e00 	.word	0x02932e00
   b66f0:	ffff15a0 	.word	0xffff15a0
   b66f4:	0036ee80 	.word	0x0036ee80

000b66f8 <_ZN10PriceClass13pricesUpdatedEv>:
/// @brief Method for checking if new price data has not yet been read.
// ####################################################################
bool PriceClass::pricesUpdated()
{
    return newPricesReceived;
}
   b66f8:	7e00      	ldrb	r0, [r0, #24]
   b66fa:	4770      	bx	lr

000b66fc <_ZN10PriceClass18isMessageDataReadyEv>:

bool PriceClass::isMessageDataReady()
{
    return messageDataReady;
   b66fc:	7e40      	ldrb	r0, [r0, #25]
   b66fe:	4770      	bx	lr

000b6700 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6700:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6702:	2300      	movs	r3, #0
   b6704:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6706:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6708:	4604      	mov	r4, r0
   b670a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b670c:	b12b      	cbz	r3, b671a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b670e:	2202      	movs	r2, #2
   b6710:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6712:	68eb      	ldr	r3, [r5, #12]
   b6714:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6716:	68ab      	ldr	r3, [r5, #8]
   b6718:	60a3      	str	r3, [r4, #8]
    }
   b671a:	4620      	mov	r0, r4
   b671c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6720 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
   b6720:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6722:	b091      	sub	sp, #68	; 0x44
   b6724:	ad02      	add	r5, sp, #8
   b6726:	e885 0006 	stmia.w	r5, {r1, r2}
   b672a:	4606      	mov	r6, r0
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b672c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6730:	ac05      	add	r4, sp, #20
   b6732:	e884 0005 	stmia.w	r4, {r0, r2}
   b6736:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6738:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b673a:	2300      	movs	r3, #0
   b673c:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b673e:	f7fe fa7c 	bl	b4c3a <_Znwj>
   b6742:	4602      	mov	r2, r0
   b6744:	b120      	cbz	r0, b6750 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x30>
      _Bind(_Bind&&) = default;
   b6746:	e894 0003 	ldmia.w	r4, {r0, r1}
   b674a:	e882 0003 	stmia.w	r2, {r0, r1}
   b674e:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b6750:	4b12      	ldr	r3, [pc, #72]	; (b679c <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x7c>)
   b6752:	930b      	str	r3, [sp, #44]	; 0x2c
        return subscribe_wiring(eventName, handler, scope);
   b6754:	a908      	add	r1, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b6756:	4b12      	ldr	r3, [pc, #72]	; (b67a0 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x80>)
   b6758:	930a      	str	r3, [sp, #40]	; 0x28
   b675a:	a80c      	add	r0, sp, #48	; 0x30
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b675c:	9208      	str	r2, [sp, #32]
   b675e:	f7ff ffcf 	bl	b6700 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    static particle::Future<bool> publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags);

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   b6762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b6764:	b18b      	cbz	r3, b678a <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   b6766:	2010      	movs	r0, #16
   b6768:	f7fe fa67 	bl	b4c3a <_Znwj>
   b676c:	4604      	mov	r4, r0
   b676e:	b160      	cbz	r0, b678a <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
   b6770:	a90c      	add	r1, sp, #48	; 0x30
   b6772:	f7ff ffc5 	bl	b6700 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-function-type"
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   b6776:	2300      	movs	r3, #0
   b6778:	e9cd 3300 	strd	r3, r3, [sp]
   b677c:	4909      	ldr	r1, [pc, #36]	; (b67a4 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x84>)
   b677e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b6782:	4622      	mov	r2, r4
   b6784:	4630      	mov	r0, r6
   b6786:	f001 fa29 	bl	b7bdc <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   b678a:	a80c      	add	r0, sp, #48	; 0x30
   b678c:	f7ff fe19 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
   b6790:	a808      	add	r0, sp, #32
   b6792:	f7ff fe16 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
    }
   b6796:	b011      	add	sp, #68	; 0x44
   b6798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b679a:	bf00      	nop
   b679c:	000b6287 	.word	0x000b6287
   b67a0:	000b62c7 	.word	0x000b62c7
   b67a4:	000b9e97 	.word	0x000b9e97

000b67a8 <_ZN10PriceClass17initSubscriptionsEv>:
{
   b67a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b67aa:	b085      	sub	sp, #20
   b67ac:	2700      	movs	r7, #0
    return subscribe(name, handler, ALL_DEVICES);
}

template<typename T>
inline bool CloudClass::subscribe(const char* name, void (T::*handler)(const char*, const char*), T* instance) {
    return subscribe(name, handler, instance, ALL_DEVICES);
   b67ae:	2601      	movs	r6, #1
   b67b0:	4b0f      	ldr	r3, [pc, #60]	; (b67f0 <_ZN10PriceClass17initSubscriptionsEv+0x48>)
   b67b2:	9302      	str	r3, [sp, #8]
   b67b4:	9703      	str	r7, [sp, #12]
   b67b6:	9600      	str	r6, [sp, #0]
   b67b8:	ad02      	add	r5, sp, #8
   b67ba:	4604      	mov	r4, r0
   b67bc:	e895 0006 	ldmia.w	r5, {r1, r2}
   b67c0:	4603      	mov	r3, r0
   b67c2:	480c      	ldr	r0, [pc, #48]	; (b67f4 <_ZN10PriceClass17initSubscriptionsEv+0x4c>)
   b67c4:	f7ff ffac 	bl	b6720 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    Particle.subscribe("get_prices", &PriceClass::getpricesSubscriptionHandler, this);
   b67c8:	4b0b      	ldr	r3, [pc, #44]	; (b67f8 <_ZN10PriceClass17initSubscriptionsEv+0x50>)
   b67ca:	9600      	str	r6, [sp, #0]
   b67cc:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b67d0:	480a      	ldr	r0, [pc, #40]	; (b67fc <_ZN10PriceClass17initSubscriptionsEv+0x54>)
   b67d2:	e895 0006 	ldmia.w	r5, {r1, r2}
   b67d6:	4623      	mov	r3, r4
   b67d8:	f7ff ffa2 	bl	b6720 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    updatePrices();
   b67dc:	4620      	mov	r0, r4
   b67de:	f7ff ff25 	bl	b662c <_ZN10PriceClass12updatePricesEv>
    timedUpdate();
   b67e2:	4620      	mov	r0, r4
}
   b67e4:	b005      	add	sp, #20
   b67e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    timedUpdate();
   b67ea:	f7ff bf4f 	b.w	b668c <_ZN10PriceClass11timedUpdateEv>
   b67ee:	bf00      	nop
   b67f0:	000b6d05 	.word	0x000b6d05
   b67f4:	000bd8d0 	.word	0x000bd8d0
   b67f8:	000b6619 	.word	0x000b6619
   b67fc:	000bd8cc 	.word	0x000bd8cc

000b6800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b6800:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b6804:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6806:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b6808:	6003      	str	r3, [r0, #0]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b680a:	460d      	mov	r5, r1
   b680c:	b1e1      	cbz	r1, b6848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x48>
   b680e:	4608      	mov	r0, r1
   b6810:	f7fe f9b8 	bl	b4b84 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b6814:	280f      	cmp	r0, #15
   b6816:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b681a:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b681c:	d907      	bls.n	b682e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b681e:	2200      	movs	r2, #0
   b6820:	a901      	add	r1, sp, #4
   b6822:	4620      	mov	r0, r4
   b6824:	f004 faf2 	bl	bae0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b6828:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b682a:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b682c:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b682e:	6820      	ldr	r0, [r4, #0]
   b6830:	4632      	mov	r2, r6
   b6832:	4629      	mov	r1, r5
   b6834:	f004 fb52 	bl	baedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b6838:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b683a:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b683c:	6063      	str	r3, [r4, #4]
   b683e:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b6840:	4620      	mov	r0, r4
   b6842:	54d1      	strb	r1, [r2, r3]
   b6844:	b002      	add	sp, #8
   b6846:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b6848:	4801      	ldr	r0, [pc, #4]	; (b6850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
   b684a:	f004 fa09 	bl	bac60 <_ZSt19__throw_logic_errorPKc>
   b684e:	bf00      	nop
   b6850:	000bd8a2 	.word	0x000bd8a2

000b6854 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>:
{
   b6854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!newPricesReceived)
   b6858:	7e0b      	ldrb	r3, [r1, #24]
{
   b685a:	b08c      	sub	sp, #48	; 0x30
   b685c:	4604      	mov	r4, r0
   b685e:	460e      	mov	r6, r1
    if (!newPricesReceived)
   b6860:	b93b      	cbnz	r3, b6872 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x1e>
        return "No prices yet";
   b6862:	493e      	ldr	r1, [pc, #248]	; (b695c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x108>)
   b6864:	aa06      	add	r2, sp, #24
   b6866:	f7ff ffcb 	bl	b6800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
}
   b686a:	4620      	mov	r0, r4
   b686c:	b00c      	add	sp, #48	; 0x30
   b686e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b6872:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b6874:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b6968 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x114>
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b6878:	781d      	ldrb	r5, [r3, #0]
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b687a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b696c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x118>
    std::string lowHourIntervals{(String)lastIndexedHour};
   b687e:	220a      	movs	r2, #10
   b6880:	4629      	mov	r1, r5
   b6882:	a802      	add	r0, sp, #8
   b6884:	f001 fe5c 	bl	b8540 <_ZN6StringC1Ehh>
   b6888:	9902      	ldr	r1, [sp, #8]
   b688a:	aa01      	add	r2, sp, #4
   b688c:	a806      	add	r0, sp, #24
   b688e:	f7ff ffb7 	bl	b6800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b6892:	a802      	add	r0, sp, #8
   b6894:	f001 fda4 	bl	b83e0 <_ZN6StringD1Ev>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b6898:	e9d6 790a 	ldrd	r7, r9, [r6, #40]	; 0x28
   b689c:	3708      	adds	r7, #8
    for (const auto &item : lowPriceHours)
   b689e:	f1a7 0308 	sub.w	r3, r7, #8
   b68a2:	4599      	cmp	r9, r3
   b68a4:	d020      	beq.n	b68e8 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x94>
        if (item.hour > lastIndexedHour + 1)
   b68a6:	f817 3c08 	ldrb.w	r3, [r7, #-8]
   b68aa:	1c6a      	adds	r2, r5, #1
   b68ac:	4293      	cmp	r3, r2
   b68ae:	dd0f      	ble.n	b68d0 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x7c>
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b68b0:	462a      	mov	r2, r5
   b68b2:	4641      	mov	r1, r8
   b68b4:	a802      	add	r0, sp, #8
   b68b6:	f001 fe8f 	bl	b85d8 <_ZN6String6formatEPKcz>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b68ba:	a806      	add	r0, sp, #24
   b68bc:	9902      	ldr	r1, [sp, #8]
   b68be:	f7ff fd43 	bl	b6348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b68c2:	a802      	add	r0, sp, #8
   b68c4:	f001 fd8c 	bl	b83e0 <_ZN6StringD1Ev>
        lastIndexedHour = item.hour;
   b68c8:	f817 5c08 	ldrb.w	r5, [r7, #-8]
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b68cc:	3708      	adds	r7, #8
      {
	++_M_current;
	return *this;
   b68ce:	e7e6      	b.n	b689e <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x4a>
        else if (item.hour < lastIndexedHour)
   b68d0:	42ab      	cmp	r3, r5
   b68d2:	d2f9      	bcs.n	b68c8 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x74>
            if (item.hour + 24 > lastIndexedHour + 1)
   b68d4:	f103 0216 	add.w	r2, r3, #22
   b68d8:	42aa      	cmp	r2, r5
   b68da:	dae9      	bge.n	b68b0 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x5c>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b68dc:	461a      	mov	r2, r3
   b68de:	4651      	mov	r1, sl
   b68e0:	a802      	add	r0, sp, #8
   b68e2:	f001 fe79 	bl	b85d8 <_ZN6String6formatEPKcz>
   b68e6:	e7e8      	b.n	b68ba <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x66>
    lowHourIntervals.append(String::format(" to %02d", lastIndexedHour));
   b68e8:	462a      	mov	r2, r5
   b68ea:	491d      	ldr	r1, [pc, #116]	; (b6960 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x10c>)
   b68ec:	a802      	add	r0, sp, #8
   b68ee:	f001 fe73 	bl	b85d8 <_ZN6String6formatEPKcz>
   b68f2:	9902      	ldr	r1, [sp, #8]
   b68f4:	a806      	add	r0, sp, #24
   b68f6:	f7ff fd27 	bl	b6348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b68fa:	a802      	add	r0, sp, #8
   b68fc:	f001 fd70 	bl	b83e0 <_ZN6StringD1Ev>
    newPricesReceived = false;
   b6900:	2300      	movs	r3, #0
   b6902:	7633      	strb	r3, [r6, #24]
    Serial.println("Low Price Intervals:");
   b6904:	f003 fe10 	bl	ba528 <_Z16_fetch_usbserialv>
   b6908:	4916      	ldr	r1, [pc, #88]	; (b6964 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x110>)
   b690a:	f003 f86e 	bl	b99ea <_ZN5Print7printlnEPKc>
    Serial.println(lowHourIntervals.c_str());
   b690e:	f003 fe0b 	bl	ba528 <_Z16_fetch_usbserialv>
   b6912:	9906      	ldr	r1, [sp, #24]
   b6914:	f003 f869 	bl	b99ea <_ZN5Print7printlnEPKc>
      { return _M_dataplus._M_p; }
   b6918:	9a06      	ldr	r2, [sp, #24]
	if (__str._M_is_local())
   b691a:	ad08      	add	r5, sp, #32
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b691c:	f104 0308 	add.w	r3, r4, #8
	if (__str._M_is_local())
   b6920:	42aa      	cmp	r2, r5
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6922:	6023      	str	r3, [r4, #0]
	if (__str._M_is_local())
   b6924:	d115      	bne.n	b6952 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xfe>
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   b6926:	462e      	mov	r6, r5
   b6928:	af0c      	add	r7, sp, #48	; 0x30
   b692a:	4632      	mov	r2, r6
   b692c:	ca03      	ldmia	r2!, {r0, r1}
   b692e:	42ba      	cmp	r2, r7
   b6930:	6018      	str	r0, [r3, #0]
   b6932:	6059      	str	r1, [r3, #4]
   b6934:	4616      	mov	r6, r2
   b6936:	f103 0308 	add.w	r3, r3, #8
   b693a:	d1f6      	bne.n	b692a <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xd6>
      { _M_string_length = __length; }
   b693c:	9b07      	ldr	r3, [sp, #28]
   b693e:	6063      	str	r3, [r4, #4]
      { _M_dispose(); }
   b6940:	a806      	add	r0, sp, #24
      { _M_string_length = __length; }
   b6942:	2300      	movs	r3, #0
      { _M_dataplus._M_p = __p; }
   b6944:	9506      	str	r5, [sp, #24]
      { _M_string_length = __length; }
   b6946:	9307      	str	r3, [sp, #28]
      { __c1 = __c2; }
   b6948:	f88d 3020 	strb.w	r3, [sp, #32]
      { _M_dispose(); }
   b694c:	f004 fa80 	bl	bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6950:	e78b      	b.n	b686a <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x16>
      { _M_allocated_capacity = __capacity; }
   b6952:	9b08      	ldr	r3, [sp, #32]
      { _M_dataplus._M_p = __p; }
   b6954:	6022      	str	r2, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b6956:	60a3      	str	r3, [r4, #8]
   b6958:	e7f0      	b.n	b693c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xe8>
   b695a:	bf00      	nop
   b695c:	000bd8d7 	.word	0x000bd8d7
   b6960:	000bd901 	.word	0x000bd901
   b6964:	000bd90a 	.word	0x000bd90a
   b6968:	000bd8f4 	.word	0x000bd8f4
   b696c:	000bd8e5 	.word	0x000bd8e5

000b6970 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b6970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6974:	e9d0 8900 	ldrd	r8, r9, [r0]
   b6978:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b697a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b697e:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b6982:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b6986:	4607      	mov	r7, r0
   b6988:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b698a:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b698e:	d102      	bne.n	b6996 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b6990:	4820      	ldr	r0, [pc, #128]	; (b6a14 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
   b6992:	f004 f96b 	bl	bac6c <_ZSt20__throw_length_errorPKc>
   b6996:	2c01      	cmp	r4, #1
   b6998:	4622      	mov	r2, r4
   b699a:	bf38      	it	cc
   b699c:	2201      	movcc	r2, #1
   b699e:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b69a0:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b69a4:	d231      	bcs.n	b6a0a <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b69a6:	b394      	cbz	r4, b6a0e <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
   b69a8:	429c      	cmp	r4, r3
   b69aa:	bf28      	it	cs
   b69ac:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b69ae:	00e0      	lsls	r0, r4, #3
   b69b0:	f7fe f943 	bl	b4c3a <_Znwj>
   b69b4:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b69b6:	1973      	adds	r3, r6, r5
   b69b8:	bf1c      	itt	ne
   b69ba:	e9db 0100 	ldrdne	r0, r1, [fp]
   b69be:	e9c3 0100 	strdne	r0, r1, [r3]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b69c2:	2d00      	cmp	r5, #0
   b69c4:	dd04      	ble.n	b69d0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b69c6:	462a      	mov	r2, r5
   b69c8:	4641      	mov	r1, r8
   b69ca:	4630      	mov	r0, r6
   b69cc:	f004 fd70 	bl	bb4b0 <memmove>
      ptrdiff_t __count = __last - __first;
   b69d0:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b69d4:	3508      	adds	r5, #8
      if (__count > 0)
   b69d6:	f1b9 0f00 	cmp.w	r9, #0
   b69da:	4435      	add	r5, r6
   b69dc:	dd04      	ble.n	b69e8 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b69de:	464a      	mov	r2, r9
   b69e0:	4651      	mov	r1, sl
   b69e2:	4628      	mov	r0, r5
   b69e4:	f004 fd56 	bl	bb494 <memcpy>
      return __result + __count;
   b69e8:	444d      	add	r5, r9
	if (__p)
   b69ea:	f1b8 0f00 	cmp.w	r8, #0
   b69ee:	d005      	beq.n	b69fc <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b69f0:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b69f2:	4640      	mov	r0, r8
   b69f4:	eba1 0108 	sub.w	r1, r1, r8
   b69f8:	f7fe f925 	bl	b4c46 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b69fc:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b6a00:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b6a04:	60bc      	str	r4, [r7, #8]
    }
   b6a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6a0a:	461c      	mov	r4, r3
   b6a0c:	e7cf      	b.n	b69ae <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6a0e:	4626      	mov	r6, r4
   b6a10:	e7d1      	b.n	b69b6 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
   b6a12:	bf00      	nop
   b6a14:	000bd91f 	.word	0x000bd91f

000b6a18 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
   b6a18:	b510      	push	{r4, lr}
   b6a1a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6a1c:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   b6a20:	428c      	cmp	r4, r1
      push_back(const value_type& __x)
   b6a22:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6a24:	d008      	beq.n	b6a38 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6a26:	b11c      	cbz	r4, b6a30 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x18>
   b6a28:	e892 0003 	ldmia.w	r2, {r0, r1}
   b6a2c:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b6a30:	685a      	ldr	r2, [r3, #4]
   b6a32:	3208      	adds	r2, #8
   b6a34:	605a      	str	r2, [r3, #4]
      }
   b6a36:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   b6a38:	4621      	mov	r1, r4
   b6a3a:	f7ff ff99 	bl	b6970 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   b6a3e:	e7fa      	b.n	b6a36 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x1e>

000b6a40 <_ZN10PriceClass19assembleMessageDataEv>:
{
   b6a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a44:	ed2d 8b02 	vpush	{d8}
    if (!messageDataReady)
   b6a48:	7e43      	ldrb	r3, [r0, #25]
{
   b6a4a:	b091      	sub	sp, #68	; 0x44
   b6a4c:	4604      	mov	r4, r0
    if (!messageDataReady)
   b6a4e:	b94b      	cbnz	r3, b6a64 <_ZN10PriceClass19assembleMessageDataEv+0x24>
        Serial.println("Message data isn't ready yet.");
   b6a50:	f003 fd6a 	bl	ba528 <_Z16_fetch_usbserialv>
   b6a54:	498e      	ldr	r1, [pc, #568]	; (b6c90 <_ZN10PriceClass19assembleMessageDataEv+0x250>)
}
   b6a56:	b011      	add	sp, #68	; 0x44
   b6a58:	ecbd 8b02 	vpop	{d8}
   b6a5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("Message data isn't ready yet.");
   b6a60:	f002 bfc3 	b.w	b99ea <_ZN5Print7printlnEPKc>
    std::string message = "";
   b6a64:	498b      	ldr	r1, [pc, #556]	; (b6c94 <_ZN10PriceClass19assembleMessageDataEv+0x254>)
   b6a66:	aa0a      	add	r2, sp, #40	; 0x28
   b6a68:	a804      	add	r0, sp, #16
   b6a6a:	f7ff fec9 	bl	b6800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
      { return iterator(this->_M_impl._M_header._M_left); }
   b6a6e:	68e5      	ldr	r5, [r4, #12]
      { return iterator(&this->_M_impl._M_header); }
   b6a70:	1d27      	adds	r7, r4, #4
    for (const auto &item : messageParts)
   b6a72:	42af      	cmp	r7, r5
   b6a74:	d009      	beq.n	b6a8a <_ZN10PriceClass19assembleMessageDataEv+0x4a>
      { return _M_append(__str._M_data(), __str.size()); }
   b6a76:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   b6a7a:	a804      	add	r0, sp, #16
   b6a7c:	f004 fb02 	bl	bb084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
	_M_node = _Rb_tree_increment(_M_node);
   b6a80:	4628      	mov	r0, r5
   b6a82:	f004 f88b 	bl	bab9c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b6a86:	4605      	mov	r5, r0
	return *this;
   b6a88:	e7f3      	b.n	b6a72 <_ZN10PriceClass19assembleMessageDataEv+0x32>
    Serial.println("Message assembled.");
   b6a8a:	f003 fd4d 	bl	ba528 <_Z16_fetch_usbserialv>
   b6a8e:	4982      	ldr	r1, [pc, #520]	; (b6c98 <_ZN10PriceClass19assembleMessageDataEv+0x258>)
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b6a90:	eddf 8a82 	vldr	s17, [pc, #520]	; b6c9c <_ZN10PriceClass19assembleMessageDataEv+0x25c>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b6a94:	f8df 8208 	ldr.w	r8, [pc, #520]	; b6ca0 <_ZN10PriceClass19assembleMessageDataEv+0x260>
    Serial.println("Message assembled.");
   b6a98:	f002 ffa7 	bl	b99ea <_ZN5Print7printlnEPKc>
      {
	_M_check(__pos, "basic_string::erase");
	if (__n == npos)
	  this->_M_set_length(__pos);
	else if (__n != 0)
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b6a9c:	9a05      	ldr	r2, [sp, #20]
   b6a9e:	2a01      	cmp	r2, #1
   b6aa0:	bf28      	it	cs
   b6aa2:	2201      	movcs	r2, #1
   b6aa4:	2100      	movs	r1, #0
   b6aa6:	a804      	add	r0, sp, #16
   b6aa8:	f004 fa59 	bl	baf5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b6aac:	2200      	movs	r2, #0
   b6aae:	497c      	ldr	r1, [pc, #496]	; (b6ca0 <_ZN10PriceClass19assembleMessageDataEv+0x260>)
   b6ab0:	a804      	add	r0, sp, #16
   b6ab2:	f004 fb3a 	bl	bb12a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6ab6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
   b6aba:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b6abc:	bf18      	it	ne
   b6abe:	6223      	strne	r3, [r4, #32]
    currentHighest.price = 0;
   b6ac0:	2300      	movs	r3, #0
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b6ac2:	3001      	adds	r0, #1
    currentHighest.price = 0;
   b6ac4:	63a3      	str	r3, [r4, #56]	; 0x38
    currentLowest.price = 100;
   b6ac6:	4b77      	ldr	r3, [pc, #476]	; (b6ca4 <_ZN10PriceClass19assembleMessageDataEv+0x264>)
   b6ac8:	6423      	str	r3, [r4, #64]	; 0x40
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b6aca:	b2c5      	uxtb	r5, r0
    currentHourPrices.clear();
   b6acc:	f104 091c 	add.w	r9, r4, #28
    while (bangIndex > 0)
   b6ad0:	2d00      	cmp	r5, #0
   b6ad2:	f000 8093 	beq.w	b6bfc <_ZN10PriceClass19assembleMessageDataEv+0x1bc>
        indexedHourPrice.hour = stoi(message.substr(HOUR_INDEX, 2));                                      // Hour (hh) converted to int.
   b6ad6:	2302      	movs	r3, #2
   b6ad8:	220b      	movs	r2, #11
   b6ada:	a904      	add	r1, sp, #16
   b6adc:	a80a      	add	r0, sp, #40	; 0x28
   b6ade:	f004 fb7d 	bl	bb1dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b6ae2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b6ae6:	f001 f8d9 	bl	b7c9c <__errno>
   b6aea:	f8d0 b000 	ldr.w	fp, [r0]
   b6aee:	f001 f8d5 	bl	b7c9c <__errno>
   b6af2:	2300      	movs	r3, #0
   b6af4:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b6af6:	220a      	movs	r2, #10
   b6af8:	a901      	add	r1, sp, #4
   b6afa:	4650      	mov	r0, sl
   b6afc:	f005 fc7c 	bl	bc3f8 <strtol>

      if (__endptr == __str)
   b6b00:	9b01      	ldr	r3, [sp, #4]
   b6b02:	459a      	cmp	sl, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b6b04:	4606      	mov	r6, r0
      if (__endptr == __str)
   b6b06:	d102      	bne.n	b6b0e <_ZN10PriceClass19assembleMessageDataEv+0xce>
	std::__throw_invalid_argument(__name);
   b6b08:	4867      	ldr	r0, [pc, #412]	; (b6ca8 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b6b0a:	f004 f8ac 	bl	bac66 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
   b6b0e:	f001 f8c5 	bl	b7c9c <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b6b12:	6803      	ldr	r3, [r0, #0]
   b6b14:	2b22      	cmp	r3, #34	; 0x22
   b6b16:	d102      	bne.n	b6b1e <_ZN10PriceClass19assembleMessageDataEv+0xde>
	std::__throw_out_of_range(__name);
   b6b18:	4863      	ldr	r0, [pc, #396]	; (b6ca8 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b6b1a:	f004 f8aa 	bl	bac72 <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b6b1e:	f001 f8bd 	bl	b7c9c <__errno>
   b6b22:	6803      	ldr	r3, [r0, #0]
   b6b24:	b91b      	cbnz	r3, b6b2e <_ZN10PriceClass19assembleMessageDataEv+0xee>
   b6b26:	f001 f8b9 	bl	b7c9c <__errno>
   b6b2a:	f8c0 b000 	str.w	fp, [r0]
      { _M_dispose(); }
   b6b2e:	a80a      	add	r0, sp, #40	; 0x28
   b6b30:	f88d 6008 	strb.w	r6, [sp, #8]
   b6b34:	f004 f98c 	bl	bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b6b38:	f1a5 0315 	sub.w	r3, r5, #21
   b6b3c:	2214      	movs	r2, #20
   b6b3e:	a904      	add	r1, sp, #16
   b6b40:	a80a      	add	r0, sp, #40	; 0x28
   b6b42:	f004 fb4b 	bl	bb1dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b6b46:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b6b48:	f001 f8a8 	bl	b7c9c <__errno>
   b6b4c:	f8d0 a000 	ldr.w	sl, [r0]
   b6b50:	f001 f8a4 	bl	b7c9c <__errno>
   b6b54:	2300      	movs	r3, #0
   b6b56:	6003      	str	r3, [r0, #0]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b6b58:	a901      	add	r1, sp, #4
   b6b5a:	4630      	mov	r0, r6
   b6b5c:	f005 fb6e 	bl	bc23c <strtof>
      if (__endptr == __str)
   b6b60:	9b01      	ldr	r3, [sp, #4]
   b6b62:	429e      	cmp	r6, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b6b64:	eeb0 8a40 	vmov.f32	s16, s0
      if (__endptr == __str)
   b6b68:	d101      	bne.n	b6b6e <_ZN10PriceClass19assembleMessageDataEv+0x12e>
	std::__throw_invalid_argument(__name);
   b6b6a:	4850      	ldr	r0, [pc, #320]	; (b6cac <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b6b6c:	e7cd      	b.n	b6b0a <_ZN10PriceClass19assembleMessageDataEv+0xca>
      else if (errno == ERANGE
   b6b6e:	f001 f895 	bl	b7c9c <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b6b72:	6803      	ldr	r3, [r0, #0]
   b6b74:	2b22      	cmp	r3, #34	; 0x22
   b6b76:	d101      	bne.n	b6b7c <_ZN10PriceClass19assembleMessageDataEv+0x13c>
	std::__throw_out_of_range(__name);
   b6b78:	484c      	ldr	r0, [pc, #304]	; (b6cac <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b6b7a:	e7ce      	b.n	b6b1a <_ZN10PriceClass19assembleMessageDataEv+0xda>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b6b7c:	f001 f88e 	bl	b7c9c <__errno>
   b6b80:	6803      	ldr	r3, [r0, #0]
   b6b82:	b91b      	cbnz	r3, b6b8c <_ZN10PriceClass19assembleMessageDataEv+0x14c>
   b6b84:	f001 f88a 	bl	b7c9c <__errno>
   b6b88:	f8c0 a000 	str.w	sl, [r0]
   b6b8c:	eec8 7a28 	vdiv.f32	s15, s16, s17
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b6b90:	ae02      	add	r6, sp, #8
   b6b92:	a80a      	add	r0, sp, #40	; 0x28
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b6b94:	edcd 7a03 	vstr	s15, [sp, #12]
   b6b98:	f004 f95a 	bl	bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b6b9c:	4631      	mov	r1, r6
   b6b9e:	4648      	mov	r0, r9
   b6ba0:	f7ff ff3a 	bl	b6a18 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
        if (indexedHourPrice.price > currentHighest.price)
   b6ba4:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   b6ba8:	eddd 7a03 	vldr	s15, [sp, #12]
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b6bac:	9a05      	ldr	r2, [sp, #20]
   b6bae:	eef4 7ac7 	vcmpe.f32	s15, s14
   b6bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentHighest = indexedHourPrice;
   b6bb6:	bfc2      	ittt	gt
   b6bb8:	e9d6 0100 	ldrdgt	r0, r1, [r6]
   b6bbc:	f104 0334 	addgt.w	r3, r4, #52	; 0x34
   b6bc0:	e9c3 0100 	strdgt	r0, r1, [r3]
        if (indexedHourPrice.price < currentLowest.price)
   b6bc4:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   b6bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
   b6bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentLowest = indexedHourPrice;
   b6bd0:	bf42      	ittt	mi
   b6bd2:	e9d6 0100 	ldrdmi	r0, r1, [r6]
   b6bd6:	f104 033c 	addmi.w	r3, r4, #60	; 0x3c
   b6bda:	e9c3 0100 	strdmi	r0, r1, [r3]
   b6bde:	42aa      	cmp	r2, r5
   b6be0:	bf28      	it	cs
   b6be2:	462a      	movcs	r2, r5
   b6be4:	2100      	movs	r1, #0
   b6be6:	a804      	add	r0, sp, #16
   b6be8:	f004 f9b9 	bl	baf5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b6bec:	2200      	movs	r2, #0
   b6bee:	4641      	mov	r1, r8
   b6bf0:	a804      	add	r0, sp, #16
   b6bf2:	f004 fa9a 	bl	bb12a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b6bf6:	3001      	adds	r0, #1
   b6bf8:	b2c5      	uxtb	r5, r0
    while (bangIndex > 0)
   b6bfa:	e769      	b.n	b6ad0 <_ZN10PriceClass19assembleMessageDataEv+0x90>
    double difference = currentHighest.price - currentLowest.price;
   b6bfc:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
   b6c00:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   b6c04:	ee77 7ac8 	vsub.f32	s15, s15, s16
            lowPriceHours.push_back(item);
   b6c08:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    double difference = currentHighest.price - currentLowest.price;
   b6c0c:	ee17 0a90 	vmov	r0, s15
   b6c10:	f7fd fb6a 	bl	b42e8 <__aeabi_f2d>
    double lowThreshold = currentLowest.price + difference * LOW_THRESHOLD_FACTOR;
   b6c14:	a31c      	add	r3, pc, #112	; (adr r3, b6c88 <_ZN10PriceClass19assembleMessageDataEv+0x248>)
   b6c16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c1a:	f7fd fbbd 	bl	b4398 <__aeabi_dmul>
   b6c1e:	4680      	mov	r8, r0
   b6c20:	ee18 0a10 	vmov	r0, s16
   b6c24:	4689      	mov	r9, r1
   b6c26:	f7fd fb5f 	bl	b42e8 <__aeabi_f2d>
   b6c2a:	4602      	mov	r2, r0
   b6c2c:	460b      	mov	r3, r1
   b6c2e:	4640      	mov	r0, r8
   b6c30:	4649      	mov	r1, r9
   b6c32:	f7fd f9fb 	bl	b402c <__adddf3>
   b6c36:	e9d4 5607 	ldrd	r5, r6, [r4, #28]
   b6c3a:	4680      	mov	r8, r0
   b6c3c:	4689      	mov	r9, r1
    for (const auto &item : currentHourPrices)
   b6c3e:	42ae      	cmp	r6, r5
   b6c40:	d00f      	beq.n	b6c62 <_ZN10PriceClass19assembleMessageDataEv+0x222>
        if (item.price < lowThreshold)
   b6c42:	6868      	ldr	r0, [r5, #4]
   b6c44:	f7fd fb50 	bl	b42e8 <__aeabi_f2d>
   b6c48:	4602      	mov	r2, r0
   b6c4a:	460b      	mov	r3, r1
   b6c4c:	4640      	mov	r0, r8
   b6c4e:	4649      	mov	r1, r9
   b6c50:	f7fd fe32 	bl	b48b8 <__aeabi_dcmpgt>
   b6c54:	b118      	cbz	r0, b6c5e <_ZN10PriceClass19assembleMessageDataEv+0x21e>
            lowPriceHours.push_back(item);
   b6c56:	4629      	mov	r1, r5
   b6c58:	4650      	mov	r0, sl
   b6c5a:	f7ff fedd 	bl	b6a18 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
      operator++() _GLIBCXX_NOEXCEPT
   b6c5e:	3508      	adds	r5, #8
	return *this;
   b6c60:	e7ed      	b.n	b6c3e <_ZN10PriceClass19assembleMessageDataEv+0x1fe>
    messageDataReady = false;
   b6c62:	2500      	movs	r5, #0
	_M_erase(_M_begin());
   b6c64:	68a0      	ldr	r0, [r4, #8]
   b6c66:	7665      	strb	r5, [r4, #25]
   b6c68:	f7ff fb99 	bl	b639e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
    newPricesReceived = true;
   b6c6c:	2301      	movs	r3, #1
      _M_header._M_left = &_M_header;
   b6c6e:	e9c4 5702 	strd	r5, r7, [r4, #8]
      _M_node_count = 0;
   b6c72:	e9c4 7504 	strd	r7, r5, [r4, #16]
   b6c76:	7623      	strb	r3, [r4, #24]
      { _M_dispose(); }
   b6c78:	a804      	add	r0, sp, #16
   b6c7a:	f004 f8e9 	bl	bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
   b6c7e:	b011      	add	sp, #68	; 0x44
   b6c80:	ecbd 8b02 	vpop	{d8}
   b6c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6c88:	33333333 	.word	0x33333333
   b6c8c:	3fd33333 	.word	0x3fd33333
   b6c90:	000bd939 	.word	0x000bd939
   b6c94:	000bdfcc 	.word	0x000bdfcc
   b6c98:	000bd957 	.word	0x000bd957
   b6c9c:	447a0000 	.word	0x447a0000
   b6ca0:	000bd794 	.word	0x000bd794
   b6ca4:	42c80000 	.word	0x42c80000
   b6ca8:	000bd96a 	.word	0x000bd96a
   b6cac:	000bd96f 	.word	0x000bd96f

000b6cb0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b6cb2:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6cb4:	4616      	mov	r6, r2
   b6cb6:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b6cb8:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b6cba:	2201      	movs	r2, #1
      while (__x != 0)
   b6cbc:	b163      	cbz	r3, b6cd8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x28>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b6cbe:	7c1d      	ldrb	r5, [r3, #16]
   b6cc0:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b6cc2:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b6cc6:	4295      	cmp	r5, r2
   b6cc8:	bf88      	it	hi
   b6cca:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b6ccc:	461d      	mov	r5, r3
   b6cce:	bf96      	itet	ls
   b6cd0:	2200      	movls	r2, #0
   b6cd2:	463b      	movhi	r3, r7
   b6cd4:	4603      	movls	r3, r0
   b6cd6:	e7f1      	b.n	b6cbc <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xc>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b6cd8:	b192      	cbz	r2, b6d00 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x50>
	{
	  if (__j == begin())
   b6cda:	68ca      	ldr	r2, [r1, #12]
   b6cdc:	42aa      	cmp	r2, r5
   b6cde:	d103      	bne.n	b6ce8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b6ce0:	e9c4 3500 	strd	r3, r5, [r4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b6ce8:	4628      	mov	r0, r5
   b6cea:	f003 ff59 	bl	baba0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b6cee:	7833      	ldrb	r3, [r6, #0]
   b6cf0:	7c02      	ldrb	r2, [r0, #16]
   b6cf2:	429a      	cmp	r2, r3
   b6cf4:	f04f 0300 	mov.w	r3, #0
   b6cf8:	d3f2      	bcc.n	b6ce0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b6cfa:	e9c4 0300 	strd	r0, r3, [r4]
   b6cfe:	e7f1      	b.n	b6ce4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x34>
   b6d00:	4628      	mov	r0, r5
   b6d02:	e7f4      	b.n	b6cee <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x3e>

000b6d04 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_>:
{
   b6d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    messageDataReady = false;
   b6d08:	2300      	movs	r3, #0
   b6d0a:	7643      	strb	r3, [r0, #25]
      { return &this->_M_impl._M_header; }
   b6d0c:	f100 0a04 	add.w	sl, r0, #4
    messageParts[pricesEvent[7]] = data;
   b6d10:	f891 8007 	ldrb.w	r8, [r1, #7]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b6d14:	6887      	ldr	r7, [r0, #8]
{
   b6d16:	b086      	sub	sp, #24
   b6d18:	4605      	mov	r5, r0
   b6d1a:	4691      	mov	r9, r2
      { return &this->_M_impl._M_header; }
   b6d1c:	4654      	mov	r4, sl
      while (__x != 0)
   b6d1e:	b147      	cbz	r7, b6d32 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x2e>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b6d20:	7c39      	ldrb	r1, [r7, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b6d22:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b6d26:	4541      	cmp	r1, r8
   b6d28:	bf2a      	itet	cs
   b6d2a:	463c      	movcs	r4, r7
   b6d2c:	4617      	movcc	r7, r2
   b6d2e:	461f      	movcs	r7, r3
   b6d30:	e7f5      	b.n	b6d1e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x1a>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b6d32:	45a2      	cmp	sl, r4
   b6d34:	d002      	beq.n	b6d3c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x38>
   b6d36:	7c23      	ldrb	r3, [r4, #16]
   b6d38:	4543      	cmp	r3, r8
   b6d3a:	d931      	bls.n	b6da0 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6d3c:	202c      	movs	r0, #44	; 0x2c
   b6d3e:	f7fd ff7c 	bl	b4c3a <_Znwj>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b6d42:	f100 031c 	add.w	r3, r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6d46:	6143      	str	r3, [r0, #20]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b6d48:	45a2      	cmp	sl, r4
      { _M_string_length = __length; }
   b6d4a:	f04f 0300 	mov.w	r3, #0
   b6d4e:	4606      	mov	r6, r0
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b6d50:	f880 8010 	strb.w	r8, [r0, #16]
   b6d54:	6183      	str	r3, [r0, #24]
   b6d56:	7703      	strb	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b6d58:	f100 0210 	add.w	r2, r0, #16
   b6d5c:	d13c      	bne.n	b6dd8 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xd4>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b6d5e:	696b      	ldr	r3, [r5, #20]
   b6d60:	b11b      	cbz	r3, b6d6a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x66>
   b6d62:	6929      	ldr	r1, [r5, #16]
   b6d64:	7c0b      	ldrb	r3, [r1, #16]
   b6d66:	4543      	cmp	r3, r8
   b6d68:	d309      	bcc.n	b6d7e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x7a>
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   b6d6a:	4629      	mov	r1, r5
   b6d6c:	a804      	add	r0, sp, #16
   b6d6e:	f7ff ff9f 	bl	b6cb0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b6d72:	e9dd 4104 	ldrd	r4, r1, [sp, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b6d76:	2900      	cmp	r1, #0
   b6d78:	d068      	beq.n	b6e4c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
			    || _M_impl._M_key_compare(_S_key(__z),
   b6d7a:	2c00      	cmp	r4, #0
   b6d7c:	d164      	bne.n	b6e48 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b6d7e:	458a      	cmp	sl, r1
   b6d80:	d062      	beq.n	b6e48 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
			    || _M_impl._M_key_compare(_S_key(__z),
   b6d82:	7c30      	ldrb	r0, [r6, #16]
   b6d84:	7c0b      	ldrb	r3, [r1, #16]
   b6d86:	4298      	cmp	r0, r3
   b6d88:	bf2c      	ite	cs
   b6d8a:	2000      	movcs	r0, #0
   b6d8c:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b6d8e:	4653      	mov	r3, sl
   b6d90:	460a      	mov	r2, r1
   b6d92:	4631      	mov	r1, r6
   b6d94:	f003 ff06 	bl	baba4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b6d98:	696b      	ldr	r3, [r5, #20]
   b6d9a:	3301      	adds	r3, #1
   b6d9c:	616b      	str	r3, [r5, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b6d9e:	4634      	mov	r4, r6
	return __builtin_strlen(__s);
   b6da0:	4648      	mov	r0, r9
   b6da2:	f7fd feef 	bl	b4b84 <strlen>
	return _M_replace(size_type(0), this->size(), __s,
   b6da6:	9000      	str	r0, [sp, #0]
   b6da8:	69a2      	ldr	r2, [r4, #24]
   b6daa:	464b      	mov	r3, r9
   b6dac:	2100      	movs	r1, #0
   b6dae:	f104 0014 	add.w	r0, r4, #20
   b6db2:	f004 f8e9 	bl	baf88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
    if (strlen(data) < 512)
   b6db6:	4648      	mov	r0, r9
   b6db8:	f7fd fee4 	bl	b4b84 <strlen>
   b6dbc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   b6dc0:	d24e      	bcs.n	b6e60 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x15c>
        newPricesReceived = false; // New prices not assembled yet.
   b6dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
   b6dc6:	832b      	strh	r3, [r5, #24]
        Serial.println("Message Data Received.");
   b6dc8:	f003 fbae 	bl	ba528 <_Z16_fetch_usbserialv>
   b6dcc:	4926      	ldr	r1, [pc, #152]	; (b6e68 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x164>)
}
   b6dce:	b006      	add	sp, #24
   b6dd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Serial.println("Message Data Received.");
   b6dd4:	f002 be09 	b.w	b99ea <_ZN5Print7printlnEPKc>
      { return __x < __y; }
   b6dd8:	7c23      	ldrb	r3, [r4, #16]
   b6dda:	9203      	str	r2, [sp, #12]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b6ddc:	4598      	cmp	r8, r3
   b6dde:	d218      	bcs.n	b6e12 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10e>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b6de0:	68eb      	ldr	r3, [r5, #12]
   b6de2:	429c      	cmp	r4, r3
   b6de4:	d009      	beq.n	b6dfa <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
	_M_node = _Rb_tree_decrement(_M_node);
   b6de6:	4620      	mov	r0, r4
   b6de8:	f003 feda 	bl	baba0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b6dec:	7c03      	ldrb	r3, [r0, #16]
   b6dee:	9a03      	ldr	r2, [sp, #12]
   b6df0:	4543      	cmp	r3, r8
   b6df2:	d205      	bcs.n	b6e00 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xfc>
      { return static_cast<_Link_type>(__x->_M_right); }
   b6df4:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b6df6:	b953      	cbnz	r3, b6e0e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10a>
   b6df8:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b6dfa:	4621      	mov	r1, r4
   b6dfc:	461c      	mov	r4, r3
   b6dfe:	e7ba      	b.n	b6d76 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b6e00:	4629      	mov	r1, r5
   b6e02:	a804      	add	r0, sp, #16
   b6e04:	f7ff ff54 	bl	b6cb0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b6e08:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   b6e0c:	e7f5      	b.n	b6dfa <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
   b6e0e:	4623      	mov	r3, r4
   b6e10:	e7f3      	b.n	b6dfa <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b6e12:	d91b      	bls.n	b6e4c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
	  if (__pos._M_node == _M_rightmost())
   b6e14:	6929      	ldr	r1, [r5, #16]
   b6e16:	428c      	cmp	r4, r1
   b6e18:	d00b      	beq.n	b6e32 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
	_M_node = _Rb_tree_increment(_M_node);
   b6e1a:	4620      	mov	r0, r4
   b6e1c:	f003 febe 	bl	bab9c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b6e20:	7c03      	ldrb	r3, [r0, #16]
   b6e22:	9a03      	ldr	r2, [sp, #12]
   b6e24:	4543      	cmp	r3, r8
	_M_node = _Rb_tree_increment(_M_node);
   b6e26:	4607      	mov	r7, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b6e28:	d905      	bls.n	b6e36 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x132>
      { return static_cast<_Link_type>(__x->_M_right); }
   b6e2a:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b6e2c:	b953      	cbnz	r3, b6e44 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x140>
   b6e2e:	4621      	mov	r1, r4
   b6e30:	461f      	mov	r7, r3
   b6e32:	463c      	mov	r4, r7
   b6e34:	e79f      	b.n	b6d76 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b6e36:	4629      	mov	r1, r5
   b6e38:	a804      	add	r0, sp, #16
   b6e3a:	f7ff ff39 	bl	b6cb0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b6e3e:	e9dd 7104 	ldrd	r7, r1, [sp, #16]
   b6e42:	e7f6      	b.n	b6e32 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
   b6e44:	4601      	mov	r1, r0
   b6e46:	e7f4      	b.n	b6e32 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
			    || _M_impl._M_key_compare(_S_key(__z),
   b6e48:	2001      	movs	r0, #1
   b6e4a:	e7a0      	b.n	b6d8e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x8a>
      { _M_dispose(); }
   b6e4c:	f106 0014 	add.w	r0, r6, #20
   b6e50:	f003 fffe 	bl	bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	::operator delete(__p
   b6e54:	4630      	mov	r0, r6
   b6e56:	212c      	movs	r1, #44	; 0x2c
   b6e58:	f7fd fef5 	bl	b4c46 <_ZdlPvj>
   b6e5c:	4626      	mov	r6, r4
   b6e5e:	e79e      	b.n	b6d9e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9a>
}
   b6e60:	b006      	add	sp, #24
   b6e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6e66:	bf00      	nop
   b6e68:	000bd974 	.word	0x000bd974

000b6e6c <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
        val_(val) {
   b6e6c:	4b01      	ldr	r3, [pc, #4]	; (b6e74 <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b6e6e:	2200      	movs	r2, #0
   b6e70:	701a      	strb	r2, [r3, #0]
   b6e72:	4770      	bx	lr
   b6e74:	2003e5cc 	.word	0x2003e5cc

000b6e78 <_ZN6Sensor9sensorISREv>:
/// @brief Sensor Interrupt Service Rutine - run when sensor activates the sensor pin.
// This updates the time since last activation, and the time difference (delta) is
// used to calculate a power reading.
// ###################################################################################
void Sensor::sensorISR(void)
{
   b6e78:	b510      	push	{r4, lr}
   b6e7a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6e7c:	f000 fbd8 	bl	b7630 <HAL_Timer_Get_Milli_Seconds>
    unsigned long timeNow = millis();
    unsigned long delta = timeNow - lastReadTime;
   b6e80:	6823      	ldr	r3, [r4, #0]
   b6e82:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b6e84:	2b64      	cmp	r3, #100	; 0x64
   b6e86:	d906      	bls.n	b6e96 <_ZN6Sensor9sensorISREv+0x1e>
    {
        currentPowerReading = WATT_CONVERSION_CONSTANT / delta;
   b6e88:	4a03      	ldr	r2, [pc, #12]	; (b6e98 <_ZN6Sensor9sensorISREv+0x20>)
   b6e8a:	fbb2 f3f3 	udiv	r3, r2, r3
        lastReadTime = timeNow;
   b6e8e:	e9c4 0300 	strd	r0, r3, [r4]
        newReadingAvaliable = true;
   b6e92:	2301      	movs	r3, #1
   b6e94:	7223      	strb	r3, [r4, #8]
    }
}
   b6e96:	bd10      	pop	{r4, pc}
   b6e98:	0036ee80 	.word	0x0036ee80

000b6e9c <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6e9c:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b6e9e:	6803      	ldr	r3, [r0, #0]
   b6ea0:	685a      	ldr	r2, [r3, #4]
   b6ea2:	6899      	ldr	r1, [r3, #8]
   b6ea4:	681b      	ldr	r3, [r3, #0]
   b6ea6:	1054      	asrs	r4, r2, #1
   b6ea8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b6eac:	07d2      	lsls	r2, r2, #31
   b6eae:	bf48      	it	mi
   b6eb0:	590a      	ldrmi	r2, [r1, r4]
      }
   b6eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6eb6:	bf48      	it	mi
   b6eb8:	58d3      	ldrmi	r3, [r2, r3]
   b6eba:	4718      	bx	r3

000b6ebc <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b6ebc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6ebe:	b538      	push	{r3, r4, r5, lr}
   b6ec0:	4604      	mov	r4, r0
	switch (__op)
   b6ec2:	d102      	bne.n	b6eca <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6ec4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6ec6:	6023      	str	r3, [r4, #0]
	}
   b6ec8:	e003      	b.n	b6ed2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b6eca:	2a02      	cmp	r2, #2
   b6ecc:	d003      	beq.n	b6ed6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b6ece:	2a03      	cmp	r2, #3
   b6ed0:	d00d      	beq.n	b6eee <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b6ed2:	2000      	movs	r0, #0
   b6ed4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6ed6:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6ed8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6eda:	f7fd feae 	bl	b4c3a <_Znwj>
   b6ede:	4603      	mov	r3, r0
   b6ee0:	2800      	cmp	r0, #0
   b6ee2:	d0f0      	beq.n	b6ec6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b6ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6ee8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6eec:	e7eb      	b.n	b6ec6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6eee:	6800      	ldr	r0, [r0, #0]
   b6ef0:	2800      	cmp	r0, #0
   b6ef2:	d0ee      	beq.n	b6ed2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b6ef4:	210c      	movs	r1, #12
   b6ef6:	f7fd fea6 	bl	b4c46 <_ZdlPvj>
   b6efa:	e7ea      	b.n	b6ed2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b6efc <_ZN6Sensor10initSensorEv>:

// ##############################################################
/// @brief Initialization. Sets up the sensor pin, and interrupt.
// ##############################################################
void Sensor::initSensor()
{
   b6efc:	b530      	push	{r4, r5, lr}
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b6efe:	2103      	movs	r1, #3
{
   b6f00:	b087      	sub	sp, #28
   b6f02:	4604      	mov	r4, r0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b6f04:	2008      	movs	r0, #8
   b6f06:	f003 fd67 	bl	ba9d8 <pinMode>
    _Function_base() : _M_manager(nullptr) { }
   b6f0a:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f0c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6f0e:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f10:	f7fd fe93 	bl	b4c3a <_Znwj>
   b6f14:	b118      	cbz	r0, b6f1e <_ZN6Sensor10initSensorEv+0x22>
   b6f16:	4b0f      	ldr	r3, [pc, #60]	; (b6f54 <_ZN6Sensor10initSensorEv+0x58>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6f18:	6084      	str	r4, [r0, #8]
   b6f1a:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f1e:	4b0e      	ldr	r3, [pc, #56]	; (b6f58 <_ZN6Sensor10initSensorEv+0x5c>)
   b6f20:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b6f22:	4b0e      	ldr	r3, [pc, #56]	; (b6f5c <_ZN6Sensor10initSensorEv+0x60>)
   b6f24:	9304      	str	r3, [sp, #16]
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b6f26:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f28:	9002      	str	r0, [sp, #8]
   b6f2a:	9300      	str	r3, [sp, #0]
   b6f2c:	2201      	movs	r2, #1
   b6f2e:	f04f 33ff 	mov.w	r3, #4294967295
   b6f32:	a902      	add	r1, sp, #8
   b6f34:	2008      	movs	r0, #8
   b6f36:	f003 fb4b 	bl	ba5d0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b6f3a:	9b04      	ldr	r3, [sp, #16]
   b6f3c:	b11b      	cbz	r3, b6f46 <_ZN6Sensor10initSensorEv+0x4a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6f3e:	a902      	add	r1, sp, #8
   b6f40:	2203      	movs	r2, #3
   b6f42:	4608      	mov	r0, r1
   b6f44:	4798      	blx	r3
   b6f46:	f000 fb73 	bl	b7630 <HAL_Timer_Get_Milli_Seconds>
    attachInterrupt(KW_SENSOR_PIN, &Sensor::sensorISR, this, RISING); // Attach interrup that will be called when rising
    lastReadTime = millis();
    newReadingAvaliable = false;
   b6f4a:	2300      	movs	r3, #0
    lastReadTime = millis();
   b6f4c:	6020      	str	r0, [r4, #0]
    newReadingAvaliable = false;
   b6f4e:	7223      	strb	r3, [r4, #8]
}
   b6f50:	b007      	add	sp, #28
   b6f52:	bd30      	pop	{r4, r5, pc}
   b6f54:	000b6e79 	.word	0x000b6e79
   b6f58:	000b6e9d 	.word	0x000b6e9d
   b6f5c:	000b6ebd 	.word	0x000b6ebd

000b6f60 <_ZN6Sensor17getCurrentReadingEv>:
// ###############################################################
/// @brief Method for getting the current calculated power reading
// ###############################################################
int Sensor::getCurrentReading()
{
    newReadingAvaliable = false;
   b6f60:	2300      	movs	r3, #0
   b6f62:	7203      	strb	r3, [r0, #8]
    return currentPowerReading;
}
   b6f64:	6840      	ldr	r0, [r0, #4]
   b6f66:	4770      	bx	lr

000b6f68 <_ZN6Sensor18checkForNewReadingEv>:
// Since the last one was read.
// ##################################################################
bool Sensor::checkForNewReading()
{
    return newReadingAvaliable;
   b6f68:	7a00      	ldrb	r0, [r0, #8]
   b6f6a:	4770      	bx	lr

000b6f6c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6f6c:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b6f6e:	6803      	ldr	r3, [r0, #0]
   b6f70:	685a      	ldr	r2, [r3, #4]
   b6f72:	6899      	ldr	r1, [r3, #8]
   b6f74:	681b      	ldr	r3, [r3, #0]
   b6f76:	1054      	asrs	r4, r2, #1
   b6f78:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b6f7c:	07d2      	lsls	r2, r2, #31
   b6f7e:	bf48      	it	mi
   b6f80:	590a      	ldrmi	r2, [r1, r4]
      }
   b6f82:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6f86:	bf48      	it	mi
   b6f88:	58d3      	ldrmi	r3, [r2, r3]
   b6f8a:	4718      	bx	r3

000b6f8c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b6f8c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6f8e:	b538      	push	{r3, r4, r5, lr}
   b6f90:	4604      	mov	r4, r0
	switch (__op)
   b6f92:	d102      	bne.n	b6f9a <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6f94:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6f96:	6023      	str	r3, [r4, #0]
	}
   b6f98:	e003      	b.n	b6fa2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b6f9a:	2a02      	cmp	r2, #2
   b6f9c:	d003      	beq.n	b6fa6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b6f9e:	2a03      	cmp	r2, #3
   b6fa0:	d00d      	beq.n	b6fbe <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b6fa2:	2000      	movs	r0, #0
   b6fa4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6fa6:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6fa8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6faa:	f7fd fe46 	bl	b4c3a <_Znwj>
   b6fae:	4603      	mov	r3, r0
   b6fb0:	2800      	cmp	r0, #0
   b6fb2:	d0f0      	beq.n	b6f96 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b6fb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6fb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6fbc:	e7eb      	b.n	b6f96 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6fbe:	6800      	ldr	r0, [r0, #0]
   b6fc0:	2800      	cmp	r0, #0
   b6fc2:	d0ee      	beq.n	b6fa2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b6fc4:	210c      	movs	r1, #12
   b6fc6:	f7fd fe3e 	bl	b4c46 <_ZdlPvj>
   b6fca:	e7ea      	b.n	b6fa2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7NtpTimeFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b6fcc <_ZN5Timer12changePeriodEjj.isra.0>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b6fcc:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b6fce:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b6fd0:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b6fd2:	b130      	cbz	r0, b6fe2 <_ZN5Timer12changePeriodEjj.isra.0+0x16>
   b6fd4:	2100      	movs	r1, #0
   b6fd6:	e9cd 2100 	strd	r2, r1, [sp]
   b6fda:	460a      	mov	r2, r1
   b6fdc:	2103      	movs	r1, #3
   b6fde:	f000 fbf1 	bl	b77c4 <os_timer_change>
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b6fe2:	b003      	add	sp, #12
   b6fe4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6fe8 <_ZN7NtpTime4initEiPc>:
{
  this->stop();
}

void NtpTime::init(int _updateMinutes,char* _NTPServer)
{
   b6fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fea:	4604      	mov	r4, r0
  UDPClient = new UDP();
   b6fec:	204c      	movs	r0, #76	; 0x4c
{
   b6fee:	460d      	mov	r5, r1
   b6ff0:	4616      	mov	r6, r2
  UDPClient = new UDP();
   b6ff2:	f7fd fe22 	bl	b4c3a <_Znwj>
   b6ff6:	4607      	mov	r7, r0
   b6ff8:	b108      	cbz	r0, b6ffe <_ZN7NtpTime4initEiPc+0x16>
   b6ffa:	f001 f94f 	bl	b829c <_ZN3UDPC1Ev>
    toWaitState();
  }
}

void NtpTime::setUpdateTimeMinutes(unsigned long intervalMinutes) {
  updateTimeMinutes = max(5, intervalMinutes);
   b6ffe:	2d05      	cmp	r5, #5
   b7000:	bf38      	it	cc
   b7002:	2505      	movcc	r5, #5
  UDPClient = new UDP();
   b7004:	6027      	str	r7, [r4, #0]
  updateTimeMinutes = max(5, intervalMinutes);
   b7006:	67e5      	str	r5, [r4, #124]	; 0x7c
  int strLen = min(serverNameSize,strlen(_NTPServer)+1);
   b7008:	4630      	mov	r0, r6
   b700a:	f7fd fdbb 	bl	b4b84 <strlen>
  memcpy(serverName, _NTPServer, strLen);
   b700e:	68a2      	ldr	r2, [r4, #8]
  int strLen = min(serverNameSize,strlen(_NTPServer)+1);
   b7010:	3001      	adds	r0, #1
  memcpy(serverName, _NTPServer, strLen);
   b7012:	4282      	cmp	r2, r0
   b7014:	bf28      	it	cs
   b7016:	4602      	movcs	r2, r0
   b7018:	4631      	mov	r1, r6
   b701a:	f104 000c 	add.w	r0, r4, #12
}
   b701e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memcpy(serverName, _NTPServer, strLen);
   b7022:	f004 ba37 	b.w	bb494 <memcpy>
	...

000b7028 <_ZN7NtpTimeC1EiPc>:
NtpTime::NtpTime(int _updateMinutes,char* _NTPServer)
   b7028:	b538      	push	{r3, r4, r5, lr}
   b702a:	2340      	movs	r3, #64	; 0x40
   b702c:	6083      	str	r3, [r0, #8]
   b702e:	f240 2501 	movw	r5, #513	; 0x201
   b7032:	2300      	movs	r3, #0
   b7034:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
   b7038:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
   b703c:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
   b7040:	f240 4503 	movw	r5, #1027	; 0x403
   b7044:	4b09      	ldr	r3, [pc, #36]	; (b706c <_ZN7NtpTimeC1EiPc+0x44>)
   b7046:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50
   b704a:	2505      	movs	r5, #5
   b704c:	e9c0 5315 	strd	r5, r3, [r0, #84]	; 0x54
   b7050:	f640 1c56 	movw	ip, #2390	; 0x956
   b7054:	2330      	movs	r3, #48	; 0x30
   b7056:	e9c0 c320 	strd	ip, r3, [r0, #128]	; 0x80
   b705a:	230a      	movs	r3, #10
   b705c:	4604      	mov	r4, r0
   b705e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  init(_updateMinutes,_NTPServer);
   b7062:	f7ff ffc1 	bl	b6fe8 <_ZN7NtpTime4initEiPc>
}
   b7066:	4620      	mov	r0, r4
   b7068:	bd38      	pop	{r3, r4, r5, pc}
   b706a:	bf00      	nop
   b706c:	83aa7e80 	.word	0x83aa7e80

000b7070 <_ZN7NtpTime4waitEv>:
  if(currentState == stateWaiting) //If it's time to update or we haven't yet updated, start an update.
   b7070:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   b7074:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b7078:	429a      	cmp	r2, r3
    currentState = stateIssueRequest;
   b707a:	bf04      	itt	eq
   b707c:	f890 304e 	ldrbeq.w	r3, [r0, #78]	; 0x4e
   b7080:	f880 304c 	strbeq.w	r3, [r0, #76]	; 0x4c
}
   b7084:	4770      	bx	lr

000b7086 <_ZN7NtpTime11toWaitStateEv>:
  currentState = stateWaiting;
   b7086:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
   b708a:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
{
   b708e:	4603      	mov	r3, r0
    timer->changePeriod(updateTimeMinutes * 60000);
   b7090:	6840      	ldr	r0, [r0, #4]
  if(synced)
   b7092:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
   b7096:	b13a      	cbz	r2, b70a8 <_ZN7NtpTime11toWaitStateEv+0x22>
    timer->changePeriod(updateTimeMinutes * 60000);
   b7098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b709a:	f64e 2160 	movw	r1, #60000	; 0xea60
   b709e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b70a2:	4359      	muls	r1, r3
    timer->changePeriod(10000);
   b70a4:	f7ff bf92 	b.w	b6fcc <_ZN5Timer12changePeriodEjj.isra.0>
   b70a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b70ac:	f242 7110 	movw	r1, #10000	; 0x2710
   b70b0:	e7f8      	b.n	b70a4 <_ZN7NtpTime11toWaitStateEv+0x1e>
	...

000b70b4 <_ZN7NtpTime5startEv>:
{
   b70b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b70b6:	4605      	mov	r5, r0
   b70b8:	b089      	sub	sp, #36	; 0x24
  timer = new Timer(10000,&NtpTime::run,*this,FALSE);
   b70ba:	201c      	movs	r0, #28
   b70bc:	f7fd fdbd 	bl	b4c3a <_Znwj>
   b70c0:	4604      	mov	r4, r0
   b70c2:	2800      	cmp	r0, #0
   b70c4:	d033      	beq.n	b712e <_ZN7NtpTime5startEv+0x7a>
    _Function_base() : _M_manager(nullptr) { }
   b70c6:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b70c8:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b70ca:	9606      	str	r6, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b70cc:	f7fd fdb5 	bl	b4c3a <_Znwj>
   b70d0:	b118      	cbz	r0, b70da <_ZN7NtpTime5startEv+0x26>
   b70d2:	4b1a      	ldr	r3, [pc, #104]	; (b713c <_ZN7NtpTime5startEv+0x88>)
   b70d4:	6085      	str	r5, [r0, #8]
   b70d6:	e9c0 3600 	strd	r3, r6, [r0]
   b70da:	9004      	str	r0, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70dc:	ae04      	add	r6, sp, #16
   b70de:	e896 0003 	ldmia.w	r6, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b70e2:	4b17      	ldr	r3, [pc, #92]	; (b7140 <_ZN7NtpTime5startEv+0x8c>)
   b70e4:	6023      	str	r3, [r4, #0]
   b70e6:	2300      	movs	r3, #0
   b70e8:	7123      	strb	r3, [r4, #4]
   b70ea:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b70ec:	f104 020c 	add.w	r2, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70f0:	af02      	add	r7, sp, #8
   b70f2:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b70f6:	e892 0003 	ldmia.w	r2, {r0, r1}
   b70fa:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b70fe:	e897 0003 	ldmia.w	r7, {r0, r1}
   b7102:	e882 0003 	stmia.w	r2, {r0, r1}
   b7106:	4a0f      	ldr	r2, [pc, #60]	; (b7144 <_ZN7NtpTime5startEv+0x90>)
   b7108:	6162      	str	r2, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b710a:	69a2      	ldr	r2, [r4, #24]
   b710c:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b710e:	4a0e      	ldr	r2, [pc, #56]	; (b7148 <_ZN7NtpTime5startEv+0x94>)
   b7110:	61a2      	str	r2, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7112:	9306      	str	r3, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b7114:	e9cd 3300 	strd	r3, r3, [sp]
   b7118:	4a0c      	ldr	r2, [pc, #48]	; (b714c <_ZN7NtpTime5startEv+0x98>)
   b711a:	4623      	mov	r3, r4
   b711c:	f242 7110 	movw	r1, #10000	; 0x2710
   b7120:	f104 0008 	add.w	r0, r4, #8
   b7124:	f000 fb36 	bl	b7794 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b7128:	4630      	mov	r0, r6
   b712a:	f7ff f94a 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
  this->toWaitState();
   b712e:	4628      	mov	r0, r5
  timer = new Timer(10000,&NtpTime::run,*this,FALSE);
   b7130:	606c      	str	r4, [r5, #4]
}
   b7132:	b009      	add	sp, #36	; 0x24
   b7134:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  this->toWaitState();
   b7138:	f7ff bfa5 	b.w	b7086 <_ZN7NtpTime11toWaitStateEv>
   b713c:	000b7307 	.word	0x000b7307
   b7140:	000bd994 	.word	0x000bd994
   b7144:	000b6f8d 	.word	0x000b6f8d
   b7148:	000b6f6d 	.word	0x000b6f6d
   b714c:	000b624d 	.word	0x000b624d

000b7150 <_ZN7NtpTime12issueRequestEv>:
{
   b7150:	b538      	push	{r3, r4, r5, lr}
  if(currentState == stateIssueRequest)
   b7152:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b7156:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   b715a:	429a      	cmp	r2, r3
{
   b715c:	4604      	mov	r4, r0
  if(currentState == stateIssueRequest)
   b715e:	d130      	bne.n	b71c2 <_ZN7NtpTime12issueRequestEv+0x72>
    UDPClient->begin(localPort);
   b7160:	6800      	ldr	r0, [r0, #0]
   b7162:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
   b7166:	6803      	ldr	r3, [r0, #0]
   b7168:	2200      	movs	r2, #0
   b716a:	6a1b      	ldr	r3, [r3, #32]
    memset(packet, 0, packetSize);  //Zero out the UDP packet
   b716c:	f104 0588 	add.w	r5, r4, #136	; 0x88
    UDPClient->begin(localPort);
   b7170:	4798      	blx	r3
    memset(packet, 0, packetSize);  //Zero out the UDP packet
   b7172:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   b7176:	2100      	movs	r1, #0
   b7178:	4628      	mov	r0, r5
   b717a:	f004 f9b3 	bl	bb4e4 <memset>
    UDPClient->beginPacket(serverName, 123); //NTP port 123
   b717e:	4621      	mov	r1, r4
    packet[0] =0x1B;   // Protocol version 3, client request
   b7180:	231b      	movs	r3, #27
   b7182:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    UDPClient->beginPacket(serverName, 123); //NTP port 123
   b7186:	f851 0b0c 	ldr.w	r0, [r1], #12
   b718a:	6803      	ldr	r3, [r0, #0]
   b718c:	227b      	movs	r2, #123	; 0x7b
   b718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7190:	4798      	blx	r3
    UDPClient->write(packet,packetSize);
   b7192:	6820      	ldr	r0, [r4, #0]
   b7194:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   b7198:	6803      	ldr	r3, [r0, #0]
   b719a:	4629      	mov	r1, r5
   b719c:	68db      	ldr	r3, [r3, #12]
   b719e:	4798      	blx	r3
    UDPClient->endPacket();
   b71a0:	6820      	ldr	r0, [r4, #0]
   b71a2:	6803      	ldr	r3, [r0, #0]
   b71a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71a6:	4798      	blx	r3
   b71a8:	f000 fa42 	bl	b7630 <HAL_Timer_Get_Milli_Seconds>
    timer->changePeriod(5);  // check for the response frequently
   b71ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    requestIssuedMillis = millis();
   b71b0:	6620      	str	r0, [r4, #96]	; 0x60
    timer->changePeriod(5);  // check for the response frequently
   b71b2:	2105      	movs	r1, #5
   b71b4:	6860      	ldr	r0, [r4, #4]
   b71b6:	f7ff ff09 	bl	b6fcc <_ZN5Timer12changePeriodEjj.isra.0>
    currentState = stateRequestIssued;
   b71ba:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
   b71be:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
   b71c2:	bd38      	pop	{r3, r4, r5, pc}

000b71c4 <_ZN7NtpTime15receiveResponseEv>:
{
   b71c4:	b510      	push	{r4, lr}
   b71c6:	4604      	mov	r4, r0
  int bytesrecv = UDPClient->parsePacket();
   b71c8:	6800      	ldr	r0, [r0, #0]
   b71ca:	6803      	ldr	r3, [r0, #0]
   b71cc:	2100      	movs	r1, #0
   b71ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71d0:	4798      	blx	r3
  if (bytesrecv>0) {
   b71d2:	2800      	cmp	r0, #0
   b71d4:	dd14      	ble.n	b7200 <_ZN7NtpTime15receiveResponseEv+0x3c>
   b71d6:	f000 fa2b 	bl	b7630 <HAL_Timer_Get_Milli_Seconds>
    UDPClient->read(packet,packetSize);
   b71da:	4621      	mov	r1, r4
    responseReceivedMillis = millis();
   b71dc:	65e0      	str	r0, [r4, #92]	; 0x5c
    UDPClient->read(packet,packetSize);
   b71de:	f851 0b88 	ldr.w	r0, [r1], #136
   b71e2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   b71e6:	6803      	ldr	r3, [r0, #0]
   b71e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b71ea:	4798      	blx	r3
    currentState = stateResponseReceived;
   b71ec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    UDPClient->stop();
   b71f0:	6820      	ldr	r0, [r4, #0]
    currentState = stateResponseReceived;
   b71f2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    UDPClient->stop();
   b71f6:	6803      	ldr	r3, [r0, #0]
   b71f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71fa:	4798      	blx	r3
   b71fc:	2001      	movs	r0, #1
}
   b71fe:	bd10      	pop	{r4, pc}
  bool received = false;
   b7200:	2000      	movs	r0, #0
   b7202:	e7fc      	b.n	b71fe <_ZN7NtpTime15receiveResponseEv+0x3a>

000b7204 <_ZN7NtpTime13requestIssuedEv>:
{
   b7204:	b510      	push	{r4, lr}
  if(currentState == stateRequestIssued)
   b7206:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b720a:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   b720e:	429a      	cmp	r2, r3
{
   b7210:	4604      	mov	r4, r0
  if(currentState == stateRequestIssued)
   b7212:	d112      	bne.n	b723a <_ZN7NtpTime13requestIssuedEv+0x36>
    if(!receiveResponse())
   b7214:	f7ff ffd6 	bl	b71c4 <_ZN7NtpTime15receiveResponseEv>
   b7218:	b978      	cbnz	r0, b723a <_ZN7NtpTime13requestIssuedEv+0x36>
   b721a:	f000 fa09 	bl	b7630 <HAL_Timer_Get_Milli_Seconds>
      if(millis() > (requestIssuedMillis + 500))  // If the request has timed out
   b721e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7220:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   b7224:	4283      	cmp	r3, r0
   b7226:	d208      	bcs.n	b723a <_ZN7NtpTime13requestIssuedEv+0x36>
          UDPClient->stop();
   b7228:	6820      	ldr	r0, [r4, #0]
   b722a:	6803      	ldr	r3, [r0, #0]
   b722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b722e:	4798      	blx	r3
          toWaitState();
   b7230:	4620      	mov	r0, r4
  }
   b7232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          toWaitState();
   b7236:	f7ff bf26 	b.w	b7086 <_ZN7NtpTime11toWaitStateEv>
  }
   b723a:	bd10      	pop	{r4, pc}
   b723c:	0000      	movs	r0, r0
	...

000b7240 <_ZN7NtpTime20toUpdatePendingStateEv>:
{
   b7240:	b510      	push	{r4, lr}
   b7242:	4604      	mov	r4, r0
    NTPMillis = (unsigned long)(((double)NTPFrac)  / 0xffffffff * 1000); //The fractional part of the NTP time in millisecond
   b7244:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b7246:	f7fd f82d 	bl	b42a4 <__aeabi_ui2d>
   b724a:	a312      	add	r3, pc, #72	; (adr r3, b7294 <_ZN7NtpTime20toUpdatePendingStateEv+0x54>)
   b724c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7250:	f7fd f9cc 	bl	b45ec <__aeabi_ddiv>
   b7254:	4b0e      	ldr	r3, [pc, #56]	; (b7290 <_ZN7NtpTime20toUpdatePendingStateEv+0x50>)
   b7256:	2200      	movs	r2, #0
   b7258:	f7fd f89e 	bl	b4398 <__aeabi_dmul>
   b725c:	f7fd fb74 	bl	b4948 <__aeabi_d2uiz>
    NTPMillis += (responseReceivedMillis - requestIssuedMillis)/2; //Adjust forward by half the round trip time.
   b7260:	e9d4 3217 	ldrd	r3, r2, [r4, #92]	; 0x5c
   b7264:	1a9b      	subs	r3, r3, r2
   b7266:	eb00 0053 	add.w	r0, r0, r3, lsr #1
    if(NTPMillis >= 1000)  //adjust for overflow
   b726a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
      NTPTime += 1;
   b726e:	bf29      	itett	cs
   b7270:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
    NTPMillis += (responseReceivedMillis - requestIssuedMillis)/2; //Adjust forward by half the round trip time.
   b7272:	6760      	strcc	r0, [r4, #116]	; 0x74
      NTPTime += 1;
   b7274:	3301      	addcs	r3, #1
      NTPMillis -= 1000;
   b7276:	f5a0 707a 	subcs.w	r0, r0, #1000	; 0x3e8
      NTPTime += 1;
   b727a:	bf28      	it	cs
   b727c:	66a3      	strcs	r3, [r4, #104]	; 0x68
    currentState = stateUpdatePending;
   b727e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
      NTPMillis -= 1000;
   b7282:	bf28      	it	cs
   b7284:	6760      	strcs	r0, [r4, #116]	; 0x74
    currentState = stateUpdatePending;
   b7286:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  }
   b728a:	bd10      	pop	{r4, pc}
   b728c:	f3af 8000 	nop.w
   b7290:	408f4000 	.word	0x408f4000
   b7294:	ffe00000 	.word	0xffe00000
   b7298:	41efffff 	.word	0x41efffff

000b729c <_ZN7NtpTime16responseReceivedEv>:
  if(currentState == stateResponseReceived)
   b729c:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
   b72a0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   b72a4:	4291      	cmp	r1, r2
{
   b72a6:	4603      	mov	r3, r0
  if(currentState == stateResponseReceived)
   b72a8:	d111      	bne.n	b72ce <_ZN7NtpTime16responseReceivedEv+0x32>
    if (packet[1]==0) {
   b72aa:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
   b72ae:	b912      	cbnz	r2, b72b6 <_ZN7NtpTime16responseReceivedEv+0x1a>
      toWaitState();
   b72b0:	4618      	mov	r0, r3
   b72b2:	f7ff bee8 	b.w	b7086 <_ZN7NtpTime11toWaitStateEv>
      NTPTime = packet[40] << 24 | packet[41] << 16 | packet[42] << 8 | packet[43];
   b72b6:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
   b72ba:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
   b72be:	ba12      	rev	r2, r2
   b72c0:	ba09      	rev	r1, r1
   b72c2:	6682      	str	r2, [r0, #104]	; 0x68
      NTPFrac = packet[44] << 24 | packet[45] << 16 | packet[46] << 8 | packet[47];
   b72c4:	66c1      	str	r1, [r0, #108]	; 0x6c
      if(NTPTime == 0)  //If we get a bogus time, just to back to wait state
   b72c6:	2a00      	cmp	r2, #0
   b72c8:	d0f2      	beq.n	b72b0 <_ZN7NtpTime16responseReceivedEv+0x14>
        toUpdatePendingState();
   b72ca:	f7ff bfb9 	b.w	b7240 <_ZN7NtpTime20toUpdatePendingStateEv>
}
   b72ce:	4770      	bx	lr

000b72d0 <_ZN7NtpTime16updateSystemTimeEv>:
{
   b72d0:	b510      	push	{r4, lr}
  if(currentState == stateUpdatePending)
   b72d2:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b72d6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
   b72da:	429a      	cmp	r2, r3
{
   b72dc:	4604      	mov	r4, r0
  if(currentState == stateUpdatePending)
   b72de:	d111      	bne.n	b7304 <_ZN7NtpTime16updateSystemTimeEv+0x34>
    synced = TRUE;
   b72e0:	2301      	movs	r3, #1
   b72e2:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
    Time.setTime(NTPTime - ntpTimeEpochStart + 1);
   b72e6:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b72e8:	4418      	add	r0, r3
   b72ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b72ec:	2100      	movs	r1, #0
   b72ee:	1ac0      	subs	r0, r0, r3
   b72f0:	f002 fc26 	bl	b9b40 <_ZN9TimeClass7setTimeEx>
   b72f4:	f000 f99c 	bl	b7630 <HAL_Timer_Get_Milli_Seconds>
    updateSystemMillis = millis();
   b72f8:	67a0      	str	r0, [r4, #120]	; 0x78
    toWaitState();
   b72fa:	4620      	mov	r0, r4
}
   b72fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    toWaitState();
   b7300:	f7ff bec1 	b.w	b7086 <_ZN7NtpTime11toWaitStateEv>
}
   b7304:	bd10      	pop	{r4, pc}

000b7306 <_ZN7NtpTime3runEv>:
{
   b7306:	b510      	push	{r4, lr}
   b7308:	4604      	mov	r4, r0
    wait();
   b730a:	f7ff feb1 	bl	b7070 <_ZN7NtpTime4waitEv>
    issueRequest();
   b730e:	f7ff ff1f 	bl	b7150 <_ZN7NtpTime12issueRequestEv>
    requestIssued();
   b7312:	4620      	mov	r0, r4
   b7314:	f7ff ff76 	bl	b7204 <_ZN7NtpTime13requestIssuedEv>
    responseReceived();
   b7318:	4620      	mov	r0, r4
   b731a:	f7ff ffbf 	bl	b729c <_ZN7NtpTime16responseReceivedEv>
    updateSystemTime();  //This has to be before response recieved so the timer has a chance to delay.
   b731e:	4620      	mov	r0, r4
}
   b7320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateSystemTime();  //This has to be before response recieved so the timer has a chance to delay.
   b7324:	f7ff bfd4 	b.w	b72d0 <_ZN7NtpTime16updateSystemTimeEv>

000b7328 <_ZN9JSONClassD1Ev>:
#endif
}

JSONClass::~JSONClass()
{
}
   b7328:	4770      	bx	lr

000b732a <_ZN9JSONClassD0Ev>:
JSONClass::~JSONClass()
   b732a:	b510      	push	{r4, lr}
}
   b732c:	2104      	movs	r1, #4
JSONClass::~JSONClass()
   b732e:	4604      	mov	r4, r0
}
   b7330:	f7fd fc89 	bl	b4c46 <_ZdlPvj>
   b7334:	4620      	mov	r0, r4
   b7336:	bd10      	pop	{r4, pc}

000b7338 <_ZN9JSONClass5parseERK6String>:
{
  return JSONVar::parse(s);
}

JSONVar JSONClass::parse(const String& s)
{
   b7338:	b510      	push	{r4, lr}
  return JSONVar::parse(s);
   b733a:	4611      	mov	r1, r2
{
   b733c:	4604      	mov	r4, r0
  return JSONVar::parse(s);
   b733e:	f000 f86b 	bl	b7418 <_ZN7JSONVar5parseERK6String>
}
   b7342:	4620      	mov	r0, r4
   b7344:	bd10      	pop	{r4, pc}

000b7346 <_ZN9JSONClass7typeof_ERK7JSONVar>:
{
  return JSONVar::stringify(value);
}

String JSONClass::typeof(const JSONVar& value)
{
   b7346:	b510      	push	{r4, lr}
  return JSONVar::typeof(value);
   b7348:	4611      	mov	r1, r2
{
   b734a:	4604      	mov	r4, r0
  return JSONVar::typeof(value);
   b734c:	f000 f872 	bl	b7434 <_ZN7JSONVar7typeof_ERKS_>
}
   b7350:	4620      	mov	r0, r4
   b7352:	bd10      	pop	{r4, pc}

000b7354 <_GLOBAL__sub_I__ZN9JSONClassC2Ev>:
JSONClass::JSONClass()
   b7354:	4b01      	ldr	r3, [pc, #4]	; (b735c <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0x8>)
   b7356:	4a02      	ldr	r2, [pc, #8]	; (b7360 <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0xc>)
   b7358:	601a      	str	r2, [r3, #0]

JSONClass JSON;
   b735a:	4770      	bx	lr
   b735c:	2003e5d0 	.word	0x2003e5d0
   b7360:	000bd9a8 	.word	0x000bd9a8

000b7364 <_ZN7JSONVarD1Ev>:
JSONVar::JSONVar() :
  JSONVar(NULL, NULL)
{
}

JSONVar::~JSONVar()
   b7364:	b510      	push	{r4, lr}
   b7366:	4b05      	ldr	r3, [pc, #20]	; (b737c <_ZN7JSONVarD1Ev+0x18>)
   b7368:	6003      	str	r3, [r0, #0]
   b736a:	4604      	mov	r4, r0
{
  if (_json != NULL && _parent == NULL) {
   b736c:	6840      	ldr	r0, [r0, #4]
   b736e:	b118      	cbz	r0, b7378 <_ZN7JSONVarD1Ev+0x14>
   b7370:	68a3      	ldr	r3, [r4, #8]
   b7372:	b90b      	cbnz	r3, b7378 <_ZN7JSONVarD1Ev+0x14>
    cJSON_Delete(_json);
   b7374:	f7fe f916 	bl	b55a4 <cJSON_Delete>

    _json = NULL;
  }
}
   b7378:	4620      	mov	r0, r4
   b737a:	bd10      	pop	{r4, pc}
   b737c:	000bd9dc 	.word	0x000bd9dc

000b7380 <_ZN7JSONVarD0Ev>:
JSONVar::~JSONVar()
   b7380:	b510      	push	{r4, lr}
   b7382:	4604      	mov	r4, r0
}
   b7384:	f7ff ffee 	bl	b7364 <_ZN7JSONVarD1Ev>
   b7388:	4620      	mov	r0, r4
   b738a:	210c      	movs	r1, #12
   b738c:	f7fd fc5b 	bl	b4c46 <_ZdlPvj>
   b7390:	4620      	mov	r0, r4
   b7392:	bd10      	pop	{r4, pc}

000b7394 <_ZNK7JSONVar7printToER5Print>:

size_t JSONVar::printTo(Print& p) const
{
   b7394:	b538      	push	{r3, r4, r5, lr}
  if (_json == NULL) {
   b7396:	6840      	ldr	r0, [r0, #4]
{
   b7398:	460c      	mov	r4, r1
  if (_json == NULL) {
   b739a:	b160      	cbz	r0, b73b6 <_ZNK7JSONVar7printToER5Print+0x22>
    return 0;
  }

  char* s = cJSON_PrintUnformatted(_json);
   b739c:	f7fe fb1e 	bl	b59dc <cJSON_PrintUnformatted>
   b73a0:	4605      	mov	r5, r0

  size_t writen = p.print(s);
   b73a2:	4601      	mov	r1, r0
   b73a4:	4620      	mov	r0, r4
   b73a6:	f002 fb0d 	bl	b99c4 <_ZN5Print5printEPKc>
   b73aa:	4604      	mov	r4, r0

  cJSON_free(s);
   b73ac:	4628      	mov	r0, r5
   b73ae:	f7fe fbb5 	bl	b5b1c <cJSON_free>

  return writen;
}
   b73b2:	4620      	mov	r0, r4
   b73b4:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   b73b6:	4604      	mov	r4, r0
   b73b8:	e7fb      	b.n	b73b2 <_ZNK7JSONVar7printToER5Print+0x1e>

000b73ba <_ZNK7JSONVarcviEv>:
{
  return cJSON_IsBool(_json) && cJSON_IsTrue(_json);
}

JSONVar::operator int() const
{
   b73ba:	b510      	push	{r4, lr}
   b73bc:	4604      	mov	r4, r0
  return cJSON_IsNumber(_json) ? _json->valueint : 0;
   b73be:	6840      	ldr	r0, [r0, #4]
   b73c0:	f7fe fb8f 	bl	b5ae2 <cJSON_IsNumber>
   b73c4:	b108      	cbz	r0, b73ca <_ZNK7JSONVarcviEv+0x10>
   b73c6:	6863      	ldr	r3, [r4, #4]
   b73c8:	6958      	ldr	r0, [r3, #20]
}
   b73ca:	bd10      	pop	{r4, pc}
   b73cc:	0000      	movs	r0, r0
	...

000b73d0 <_ZNK7JSONVarcvdEv>:
{
  return cJSON_IsNumber(_json) ? _json->valueint : 0;
}

JSONVar::operator double() const
{
   b73d0:	b510      	push	{r4, lr}
   b73d2:	4604      	mov	r4, r0
  return cJSON_IsNumber(_json) ? _json->valuedouble : NAN;
   b73d4:	6840      	ldr	r0, [r0, #4]
   b73d6:	f7fe fb84 	bl	b5ae2 <cJSON_IsNumber>
   b73da:	b118      	cbz	r0, b73e4 <_ZNK7JSONVarcvdEv+0x14>
   b73dc:	6863      	ldr	r3, [r4, #4]
   b73de:	ed93 0b06 	vldr	d0, [r3, #24]
}
   b73e2:	bd10      	pop	{r4, pc}
  return cJSON_IsNumber(_json) ? _json->valuedouble : NAN;
   b73e4:	ed9f 0b02 	vldr	d0, [pc, #8]	; b73f0 <_ZNK7JSONVarcvdEv+0x20>
   b73e8:	e7fb      	b.n	b73e2 <_ZNK7JSONVarcvdEv+0x12>
   b73ea:	bf00      	nop
   b73ec:	f3af 8000 	nop.w
   b73f0:	00000000 	.word	0x00000000
   b73f4:	7ff80000 	.word	0x7ff80000

000b73f8 <_ZNK7JSONVar14hasOwnPropertyEPKc>:

  return JSONVar(cJSON_CreateStringArray(keys, length), NULL);
}

bool JSONVar::hasOwnProperty(const char* key) const
{
   b73f8:	b513      	push	{r0, r1, r4, lr}
   b73fa:	4604      	mov	r4, r0
  if (!cJSON_IsObject(_json)) {
   b73fc:	6840      	ldr	r0, [r0, #4]
{
   b73fe:	9101      	str	r1, [sp, #4]
  if (!cJSON_IsObject(_json)) {
   b7400:	f7fe fb84 	bl	b5b0c <cJSON_IsObject>
   b7404:	b130      	cbz	r0, b7414 <_ZNK7JSONVar14hasOwnPropertyEPKc+0x1c>
    return false;
  }

  cJSON* json = cJSON_GetObjectItemCaseSensitive(_json, key);
   b7406:	9901      	ldr	r1, [sp, #4]
   b7408:	6860      	ldr	r0, [r4, #4]
   b740a:	f7fe faf8 	bl	b59fe <cJSON_GetObjectItemCaseSensitive>

  return (json != NULL);
   b740e:	3800      	subs	r0, #0
   b7410:	bf18      	it	ne
   b7412:	2001      	movne	r0, #1
}
   b7414:	b002      	add	sp, #8
   b7416:	bd10      	pop	{r4, pc}

000b7418 <_ZN7JSONVar5parseERK6String>:

  return JSONVar(json, NULL);
}

JSONVar JSONVar::parse(const String& s)
{
   b7418:	b510      	push	{r4, lr}
   b741a:	4604      	mov	r4, r0
  cJSON* json = cJSON_Parse(s);
   b741c:	6808      	ldr	r0, [r1, #0]
   b741e:	f7fe fad9 	bl	b59d4 <cJSON_Parse>
  _parent(parent)
   b7422:	4b03      	ldr	r3, [pc, #12]	; (b7430 <_ZN7JSONVar5parseERK6String+0x18>)
   b7424:	e9c4 3000 	strd	r3, r0, [r4]
   b7428:	2300      	movs	r3, #0
   b742a:	60a3      	str	r3, [r4, #8]
  return parse(s.c_str());
}
   b742c:	4620      	mov	r0, r4
   b742e:	bd10      	pop	{r4, pc}
   b7430:	000bd9dc 	.word	0x000bd9dc

000b7434 <_ZN7JSONVar7typeof_ERKS_>:

  return str;
}

String JSONVar::typeof_(const JSONVar& value)
{
   b7434:	b538      	push	{r3, r4, r5, lr}
  struct cJSON* json = value._json;
   b7436:	684d      	ldr	r5, [r1, #4]
{
   b7438:	4604      	mov	r4, r0

  if (json == NULL ||  cJSON_IsInvalid(json)) {
   b743a:	b92d      	cbnz	r5, b7448 <_ZN7JSONVar7typeof_ERKS_+0x14>
    return "undefined";
   b743c:	4918      	ldr	r1, [pc, #96]	; (b74a0 <_ZN7JSONVar7typeof_ERKS_+0x6c>)
  } else if (cJSON_IsArray(json)) {
    return "array"; // TODO: should this return "object" to be more JS like?
  } else if (cJSON_IsObject(json)) {
    return "object";
  } else {
    return "unknown";
   b743e:	4620      	mov	r0, r4
   b7440:	f001 f819 	bl	b8476 <_ZN6StringC1EPK19__FlashStringHelper>
  }
}
   b7444:	4620      	mov	r0, r4
   b7446:	bd38      	pop	{r3, r4, r5, pc}
  if (json == NULL ||  cJSON_IsInvalid(json)) {
   b7448:	4628      	mov	r0, r5
   b744a:	f7fe fb37 	bl	b5abc <cJSON_IsInvalid>
   b744e:	2800      	cmp	r0, #0
   b7450:	d1f4      	bne.n	b743c <_ZN7JSONVar7typeof_ERKS_+0x8>
  } else if (cJSON_IsBool(json)) {
   b7452:	4628      	mov	r0, r5
   b7454:	f7fe fb38 	bl	b5ac8 <cJSON_IsBool>
   b7458:	b108      	cbz	r0, b745e <_ZN7JSONVar7typeof_ERKS_+0x2a>
    return "boolean";
   b745a:	4912      	ldr	r1, [pc, #72]	; (b74a4 <_ZN7JSONVar7typeof_ERKS_+0x70>)
   b745c:	e7ef      	b.n	b743e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsNull(json)) {
   b745e:	4628      	mov	r0, r5
   b7460:	f7fe fb39 	bl	b5ad6 <cJSON_IsNull>
   b7464:	b108      	cbz	r0, b746a <_ZN7JSONVar7typeof_ERKS_+0x36>
    return "null"; // TODO: should this return "object" to be more JS like?
   b7466:	4910      	ldr	r1, [pc, #64]	; (b74a8 <_ZN7JSONVar7typeof_ERKS_+0x74>)
   b7468:	e7e9      	b.n	b743e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsNumber(json)) {
   b746a:	4628      	mov	r0, r5
   b746c:	f7fe fb39 	bl	b5ae2 <cJSON_IsNumber>
   b7470:	b108      	cbz	r0, b7476 <_ZN7JSONVar7typeof_ERKS_+0x42>
    return "number";
   b7472:	490e      	ldr	r1, [pc, #56]	; (b74ac <_ZN7JSONVar7typeof_ERKS_+0x78>)
   b7474:	e7e3      	b.n	b743e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsString(json)) {
   b7476:	4628      	mov	r0, r5
   b7478:	f7fe fb3a 	bl	b5af0 <cJSON_IsString>
   b747c:	b108      	cbz	r0, b7482 <_ZN7JSONVar7typeof_ERKS_+0x4e>
    return "string";
   b747e:	490c      	ldr	r1, [pc, #48]	; (b74b0 <_ZN7JSONVar7typeof_ERKS_+0x7c>)
   b7480:	e7dd      	b.n	b743e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsArray(json)) {
   b7482:	4628      	mov	r0, r5
   b7484:	f7fe fb3b 	bl	b5afe <cJSON_IsArray>
   b7488:	b108      	cbz	r0, b748e <_ZN7JSONVar7typeof_ERKS_+0x5a>
    return "array"; // TODO: should this return "object" to be more JS like?
   b748a:	490a      	ldr	r1, [pc, #40]	; (b74b4 <_ZN7JSONVar7typeof_ERKS_+0x80>)
   b748c:	e7d7      	b.n	b743e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsObject(json)) {
   b748e:	4628      	mov	r0, r5
   b7490:	f7fe fb3c 	bl	b5b0c <cJSON_IsObject>
   b7494:	b108      	cbz	r0, b749a <_ZN7JSONVar7typeof_ERKS_+0x66>
    return "object";
   b7496:	4908      	ldr	r1, [pc, #32]	; (b74b8 <_ZN7JSONVar7typeof_ERKS_+0x84>)
   b7498:	e7d1      	b.n	b743e <_ZN7JSONVar7typeof_ERKS_+0xa>
    return "unknown";
   b749a:	4908      	ldr	r1, [pc, #32]	; (b74bc <_ZN7JSONVar7typeof_ERKS_+0x88>)
   b749c:	e7cf      	b.n	b743e <_ZN7JSONVar7typeof_ERKS_+0xa>
   b749e:	bf00      	nop
   b74a0:	000bd768 	.word	0x000bd768
   b74a4:	000bd9b0 	.word	0x000bd9b0
   b74a8:	000bd5ed 	.word	0x000bd5ed
   b74ac:	000bd9b8 	.word	0x000bd9b8
   b74b0:	000bdec0 	.word	0x000bdec0
   b74b4:	000bd9bf 	.word	0x000bd9bf
   b74b8:	000bd9c5 	.word	0x000bd9c5
   b74bc:	000bd9cc 	.word	0x000bd9cc

000b74c0 <_ZN7JSONVar11replaceJsonEP5cJSON>:

void JSONVar::replaceJson(struct cJSON* json)
{
   b74c0:	b538      	push	{r3, r4, r5, lr}
  cJSON* old = _json;
   b74c2:	6845      	ldr	r5, [r0, #4]

  _json = json;
   b74c4:	6041      	str	r1, [r0, #4]
{
   b74c6:	4604      	mov	r4, r0

  if (old) {
   b74c8:	b1dd      	cbz	r5, b7502 <_ZN7JSONVar11replaceJsonEP5cJSON+0x42>
    if (_parent) {
   b74ca:	6880      	ldr	r0, [r0, #8]
   b74cc:	b1a0      	cbz	r0, b74f8 <_ZN7JSONVar11replaceJsonEP5cJSON+0x38>
      if (cJSON_IsObject(_parent)) {
   b74ce:	f7fe fb1d 	bl	b5b0c <cJSON_IsObject>
   b74d2:	b130      	cbz	r0, b74e2 <_ZN7JSONVar11replaceJsonEP5cJSON+0x22>
        cJSON_ReplaceItemInObjectCaseSensitive(_parent, old->string, _json);
   b74d4:	6862      	ldr	r2, [r4, #4]
   b74d6:	6a29      	ldr	r1, [r5, #32]
   b74d8:	68a0      	ldr	r0, [r4, #8]
      }
    } else {
      cJSON_Delete(old);
    }
  }
}
   b74da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        cJSON_ReplaceItemInObjectCaseSensitive(_parent, old->string, _json);
   b74de:	f7fe bb46 	b.w	b5b6e <cJSON_ReplaceItemInObjectCaseSensitive>
      } else if (cJSON_IsArray(_parent)) {
   b74e2:	68a0      	ldr	r0, [r4, #8]
   b74e4:	f7fe fb0b 	bl	b5afe <cJSON_IsArray>
   b74e8:	b158      	cbz	r0, b7502 <_ZN7JSONVar11replaceJsonEP5cJSON+0x42>
        cJSON_ReplaceItemViaPointer(_parent, old, _json);
   b74ea:	6862      	ldr	r2, [r4, #4]
   b74ec:	68a0      	ldr	r0, [r4, #8]
   b74ee:	4629      	mov	r1, r5
}
   b74f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        cJSON_ReplaceItemViaPointer(_parent, old, _json);
   b74f4:	f7fe ba88 	b.w	b5a08 <cJSON_ReplaceItemViaPointer>
      cJSON_Delete(old);
   b74f8:	4628      	mov	r0, r5
}
   b74fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      cJSON_Delete(old);
   b74fe:	f7fe b851 	b.w	b55a4 <cJSON_Delete>
}
   b7502:	bd38      	pop	{r3, r4, r5, pc}

000b7504 <_ZN7JSONVarixEPKc>:
{
   b7504:	b570      	push	{r4, r5, r6, lr}
   b7506:	4605      	mov	r5, r0
  if (!cJSON_IsObject(_json)) {
   b7508:	6848      	ldr	r0, [r1, #4]
{
   b750a:	460c      	mov	r4, r1
   b750c:	4616      	mov	r6, r2
  if (!cJSON_IsObject(_json)) {
   b750e:	f7fe fafd 	bl	b5b0c <cJSON_IsObject>
   b7512:	b928      	cbnz	r0, b7520 <_ZN7JSONVarixEPKc+0x1c>
    replaceJson(cJSON_CreateObject());
   b7514:	f7fe fac6 	bl	b5aa4 <cJSON_CreateObject>
   b7518:	4601      	mov	r1, r0
   b751a:	4620      	mov	r0, r4
   b751c:	f7ff ffd0 	bl	b74c0 <_ZN7JSONVar11replaceJsonEP5cJSON>
  cJSON* json = cJSON_GetObjectItemCaseSensitive(_json, key);
   b7520:	6860      	ldr	r0, [r4, #4]
   b7522:	4631      	mov	r1, r6
   b7524:	f7fe fa6b 	bl	b59fe <cJSON_GetObjectItemCaseSensitive>
  if (json == NULL) {
   b7528:	b918      	cbnz	r0, b7532 <_ZN7JSONVarixEPKc+0x2e>
    json = cJSON_AddNullToObject(_json, key);
   b752a:	6860      	ldr	r0, [r4, #4]
   b752c:	4631      	mov	r1, r6
   b752e:	f7fe fa97 	bl	b5a60 <cJSON_AddNullToObject>
  _parent(parent)
   b7532:	4a03      	ldr	r2, [pc, #12]	; (b7540 <_ZN7JSONVarixEPKc+0x3c>)
  return JSONVar(json, _json);    
   b7534:	6863      	ldr	r3, [r4, #4]
  _parent(parent)
   b7536:	60ab      	str	r3, [r5, #8]
   b7538:	e9c5 2000 	strd	r2, r0, [r5]
}
   b753c:	4628      	mov	r0, r5
   b753e:	bd70      	pop	{r4, r5, r6, pc}
   b7540:	000bd9dc 	.word	0x000bd9dc

000b7544 <_ZN7JSONVarixEi>:
{
   b7544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7546:	4606      	mov	r6, r0
  if (!cJSON_IsArray(_json)) {
   b7548:	6848      	ldr	r0, [r1, #4]
{
   b754a:	460d      	mov	r5, r1
   b754c:	4617      	mov	r7, r2
  if (!cJSON_IsArray(_json)) {
   b754e:	f7fe fad6 	bl	b5afe <cJSON_IsArray>
   b7552:	b928      	cbnz	r0, b7560 <_ZN7JSONVarixEi+0x1c>
    replaceJson(cJSON_CreateArray());
   b7554:	f7fe fa9a 	bl	b5a8c <cJSON_CreateArray>
   b7558:	4601      	mov	r1, r0
   b755a:	4628      	mov	r0, r5
   b755c:	f7ff ffb0 	bl	b74c0 <_ZN7JSONVar11replaceJsonEP5cJSON>
  cJSON* json = cJSON_GetArrayItem(_json, index);
   b7560:	6868      	ldr	r0, [r5, #4]
   b7562:	4639      	mov	r1, r7
   b7564:	f7fe fa45 	bl	b59f2 <cJSON_GetArrayItem>
  if (json == NULL) {
   b7568:	4604      	mov	r4, r0
   b756a:	b960      	cbnz	r0, b7586 <_ZN7JSONVarixEi+0x42>
    while (index >= cJSON_GetArraySize(_json)) {
   b756c:	6868      	ldr	r0, [r5, #4]
   b756e:	f7fe fa38 	bl	b59e2 <cJSON_GetArraySize>
   b7572:	42b8      	cmp	r0, r7
   b7574:	dc07      	bgt.n	b7586 <_ZN7JSONVarixEi+0x42>
      json = cJSON_CreateNull();
   b7576:	f7fe fa67 	bl	b5a48 <cJSON_CreateNull>
   b757a:	4604      	mov	r4, r0
      cJSON_AddItemToArray(_json, json);
   b757c:	4601      	mov	r1, r0
   b757e:	6868      	ldr	r0, [r5, #4]
   b7580:	f7fe fa40 	bl	b5a04 <cJSON_AddItemToArray>
    while (index >= cJSON_GetArraySize(_json)) {
   b7584:	e7f2      	b.n	b756c <_ZN7JSONVarixEi+0x28>
  _parent(parent)
   b7586:	4a03      	ldr	r2, [pc, #12]	; (b7594 <_ZN7JSONVarixEi+0x50>)
  return JSONVar(json, _json);
   b7588:	686b      	ldr	r3, [r5, #4]
  _parent(parent)
   b758a:	60b3      	str	r3, [r6, #8]
   b758c:	e9c6 2400 	strd	r2, r4, [r6]
}
   b7590:	4630      	mov	r0, r6
   b7592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7594:	000bd9dc 	.word	0x000bd9dc

000b7598 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_>:
  _parent(parent)
   b7598:	4b03      	ldr	r3, [pc, #12]	; (b75a8 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x10>)
   b759a:	4a04      	ldr	r2, [pc, #16]	; (b75ac <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x14>)
   b759c:	601a      	str	r2, [r3, #0]
   b759e:	2200      	movs	r2, #0
   b75a0:	e9c3 2201 	strd	r2, r2, [r3, #4]

JSONVar undefined;
   b75a4:	4770      	bx	lr
   b75a6:	bf00      	nop
   b75a8:	2003e5d4 	.word	0x2003e5d4
   b75ac:	000bd9dc 	.word	0x000bd9dc

000b75b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b75b0:	b508      	push	{r3, lr}
   b75b2:	4b02      	ldr	r3, [pc, #8]	; (b75bc <netdb_freeaddrinfo+0xc>)
   b75b4:	681b      	ldr	r3, [r3, #0]
   b75b6:	689b      	ldr	r3, [r3, #8]
   b75b8:	9301      	str	r3, [sp, #4]
   b75ba:	bd08      	pop	{r3, pc}
   b75bc:	00030268 	.word	0x00030268

000b75c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b75c0:	b508      	push	{r3, lr}
   b75c2:	4b02      	ldr	r3, [pc, #8]	; (b75cc <netdb_getaddrinfo+0xc>)
   b75c4:	681b      	ldr	r3, [r3, #0]
   b75c6:	68db      	ldr	r3, [r3, #12]
   b75c8:	9301      	str	r3, [sp, #4]
   b75ca:	bd08      	pop	{r3, pc}
   b75cc:	00030268 	.word	0x00030268

000b75d0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b75d0:	b508      	push	{r3, lr}
   b75d2:	4b02      	ldr	r3, [pc, #8]	; (b75dc <hal_gpio_mode+0xc>)
   b75d4:	681b      	ldr	r3, [r3, #0]
   b75d6:	689b      	ldr	r3, [r3, #8]
   b75d8:	9301      	str	r3, [sp, #4]
   b75da:	bd08      	pop	{r3, pc}
   b75dc:	0003022c 	.word	0x0003022c

000b75e0 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b75e0:	b508      	push	{r3, lr}
   b75e2:	4b02      	ldr	r3, [pc, #8]	; (b75ec <hal_interrupt_attach+0xc>)
   b75e4:	681b      	ldr	r3, [r3, #0]
   b75e6:	699b      	ldr	r3, [r3, #24]
   b75e8:	9301      	str	r3, [sp, #4]
   b75ea:	bd08      	pop	{r3, pc}
   b75ec:	0003022c 	.word	0x0003022c

000b75f0 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b75f0:	b508      	push	{r3, lr}
   b75f2:	4b02      	ldr	r3, [pc, #8]	; (b75fc <hal_interrupt_detach+0xc>)
   b75f4:	681b      	ldr	r3, [r3, #0]
   b75f6:	69db      	ldr	r3, [r3, #28]
   b75f8:	9301      	str	r3, [sp, #4]
   b75fa:	bd08      	pop	{r3, pc}
   b75fc:	0003022c 	.word	0x0003022c

000b7600 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7600:	b508      	push	{r3, lr}
   b7602:	4b02      	ldr	r3, [pc, #8]	; (b760c <if_index_to_name+0xc>)
   b7604:	681b      	ldr	r3, [r3, #0]
   b7606:	695b      	ldr	r3, [r3, #20]
   b7608:	9301      	str	r3, [sp, #4]
   b760a:	bd08      	pop	{r3, pc}
   b760c:	0003026c 	.word	0x0003026c

000b7610 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7610:	b508      	push	{r3, lr}
   b7612:	4b02      	ldr	r3, [pc, #8]	; (b761c <HAL_RNG_GetRandomNumber+0xc>)
   b7614:	681b      	ldr	r3, [r3, #0]
   b7616:	685b      	ldr	r3, [r3, #4]
   b7618:	9301      	str	r3, [sp, #4]
   b761a:	bd08      	pop	{r3, pc}
   b761c:	00030218 	.word	0x00030218

000b7620 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7620:	b508      	push	{r3, lr}
   b7622:	4b02      	ldr	r3, [pc, #8]	; (b762c <HAL_Delay_Microseconds+0xc>)
   b7624:	681b      	ldr	r3, [r3, #0]
   b7626:	68db      	ldr	r3, [r3, #12]
   b7628:	9301      	str	r3, [sp, #4]
   b762a:	bd08      	pop	{r3, pc}
   b762c:	00030218 	.word	0x00030218

000b7630 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7630:	b508      	push	{r3, lr}
   b7632:	4b02      	ldr	r3, [pc, #8]	; (b763c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7634:	681b      	ldr	r3, [r3, #0]
   b7636:	695b      	ldr	r3, [r3, #20]
   b7638:	9301      	str	r3, [sp, #4]
   b763a:	bd08      	pop	{r3, pc}
   b763c:	00030218 	.word	0x00030218

000b7640 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b7640:	b508      	push	{r3, lr}
   b7642:	4b02      	ldr	r3, [pc, #8]	; (b764c <hal_rtc_time_is_valid+0xc>)
   b7644:	681b      	ldr	r3, [r3, #0]
   b7646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7648:	9301      	str	r3, [sp, #4]
   b764a:	bd08      	pop	{r3, pc}
   b764c:	00030218 	.word	0x00030218

000b7650 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b7650:	b508      	push	{r3, lr}
   b7652:	4b02      	ldr	r3, [pc, #8]	; (b765c <hal_rtc_get_time+0xc>)
   b7654:	681b      	ldr	r3, [r3, #0]
   b7656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b7658:	9301      	str	r3, [sp, #4]
   b765a:	bd08      	pop	{r3, pc}
   b765c:	00030218 	.word	0x00030218

000b7660 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b7660:	b508      	push	{r3, lr}
   b7662:	4b02      	ldr	r3, [pc, #8]	; (b766c <hal_rtc_set_time+0xc>)
   b7664:	681b      	ldr	r3, [r3, #0]
   b7666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b7668:	9301      	str	r3, [sp, #4]
   b766a:	bd08      	pop	{r3, pc}
   b766c:	00030218 	.word	0x00030218

000b7670 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7670:	b508      	push	{r3, lr}
   b7672:	4b02      	ldr	r3, [pc, #8]	; (b767c <hal_ble_stack_init+0xc>)
   b7674:	681b      	ldr	r3, [r3, #0]
   b7676:	689b      	ldr	r3, [r3, #8]
   b7678:	9301      	str	r3, [sp, #4]
   b767a:	bd08      	pop	{r3, pc}
   b767c:	00030278 	.word	0x00030278

000b7680 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b7680:	b508      	push	{r3, lr}
   b7682:	4b02      	ldr	r3, [pc, #8]	; (b768c <hal_ble_select_antenna+0xc>)
   b7684:	681b      	ldr	r3, [r3, #0]
   b7686:	691b      	ldr	r3, [r3, #16]
   b7688:	9301      	str	r3, [sp, #4]
   b768a:	bd08      	pop	{r3, pc}
   b768c:	00030278 	.word	0x00030278

000b7690 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7690:	b508      	push	{r3, lr}
   b7692:	4b02      	ldr	r3, [pc, #8]	; (b769c <hal_ble_gap_set_advertising_data+0xc>)
   b7694:	681b      	ldr	r3, [r3, #0]
   b7696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7698:	9301      	str	r3, [sp, #4]
   b769a:	bd08      	pop	{r3, pc}
   b769c:	00030278 	.word	0x00030278

000b76a0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b76a0:	b508      	push	{r3, lr}
   b76a2:	4b02      	ldr	r3, [pc, #8]	; (b76ac <hal_ble_gap_set_scan_response_data+0xc>)
   b76a4:	681b      	ldr	r3, [r3, #0]
   b76a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b76a8:	9301      	str	r3, [sp, #4]
   b76aa:	bd08      	pop	{r3, pc}
   b76ac:	00030278 	.word	0x00030278

000b76b0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b76b0:	b508      	push	{r3, lr}
   b76b2:	4b02      	ldr	r3, [pc, #8]	; (b76bc <hal_ble_gap_start_advertising+0xc>)
   b76b4:	681b      	ldr	r3, [r3, #0]
   b76b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b76b8:	9301      	str	r3, [sp, #4]
   b76ba:	bd08      	pop	{r3, pc}
   b76bc:	00030278 	.word	0x00030278

000b76c0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b76c0:	b508      	push	{r3, lr}
   b76c2:	4b03      	ldr	r3, [pc, #12]	; (b76d0 <hal_ble_gap_disconnect+0x10>)
   b76c4:	681b      	ldr	r3, [r3, #0]
   b76c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b76ca:	9301      	str	r3, [sp, #4]
   b76cc:	bd08      	pop	{r3, pc}
   b76ce:	0000      	.short	0x0000
   b76d0:	00030278 	.word	0x00030278

000b76d4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b76d4:	b508      	push	{r3, lr}
   b76d6:	4b03      	ldr	r3, [pc, #12]	; (b76e4 <hal_ble_gatt_server_add_service+0x10>)
   b76d8:	681b      	ldr	r3, [r3, #0]
   b76da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b76de:	9301      	str	r3, [sp, #4]
   b76e0:	bd08      	pop	{r3, pc}
   b76e2:	0000      	.short	0x0000
   b76e4:	00030278 	.word	0x00030278

000b76e8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b76e8:	b508      	push	{r3, lr}
   b76ea:	4b03      	ldr	r3, [pc, #12]	; (b76f8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b76ec:	681b      	ldr	r3, [r3, #0]
   b76ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b76f2:	9301      	str	r3, [sp, #4]
   b76f4:	bd08      	pop	{r3, pc}
   b76f6:	0000      	.short	0x0000
   b76f8:	00030278 	.word	0x00030278

000b76fc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b76fc:	b508      	push	{r3, lr}
   b76fe:	4b03      	ldr	r3, [pc, #12]	; (b770c <hal_ble_gatt_client_write_with_response+0x10>)
   b7700:	681b      	ldr	r3, [r3, #0]
   b7702:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b7706:	9301      	str	r3, [sp, #4]
   b7708:	bd08      	pop	{r3, pc}
   b770a:	0000      	.short	0x0000
   b770c:	00030278 	.word	0x00030278

000b7710 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7710:	b508      	push	{r3, lr}
   b7712:	4b03      	ldr	r3, [pc, #12]	; (b7720 <hal_ble_gatt_client_write_without_response+0x10>)
   b7714:	681b      	ldr	r3, [r3, #0]
   b7716:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b771a:	9301      	str	r3, [sp, #4]
   b771c:	bd08      	pop	{r3, pc}
   b771e:	0000      	.short	0x0000
   b7720:	00030278 	.word	0x00030278

000b7724 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7724:	b508      	push	{r3, lr}
   b7726:	4b03      	ldr	r3, [pc, #12]	; (b7734 <hal_ble_gatt_server_add_characteristic+0x10>)
   b7728:	681b      	ldr	r3, [r3, #0]
   b772a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b772e:	9301      	str	r3, [sp, #4]
   b7730:	bd08      	pop	{r3, pc}
   b7732:	0000      	.short	0x0000
   b7734:	00030278 	.word	0x00030278

000b7738 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b7738:	b508      	push	{r3, lr}
   b773a:	4b03      	ldr	r3, [pc, #12]	; (b7748 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b773c:	681b      	ldr	r3, [r3, #0]
   b773e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7742:	9301      	str	r3, [sp, #4]
   b7744:	bd08      	pop	{r3, pc}
   b7746:	0000      	.short	0x0000
   b7748:	00030278 	.word	0x00030278

000b774c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b774c:	b508      	push	{r3, lr}
   b774e:	4b03      	ldr	r3, [pc, #12]	; (b775c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b7750:	681b      	ldr	r3, [r3, #0]
   b7752:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b7756:	9301      	str	r3, [sp, #4]
   b7758:	bd08      	pop	{r3, pc}
   b775a:	0000      	.short	0x0000
   b775c:	00030278 	.word	0x00030278

000b7760 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7760:	b508      	push	{r3, lr}
   b7762:	4b03      	ldr	r3, [pc, #12]	; (b7770 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b7764:	681b      	ldr	r3, [r3, #0]
   b7766:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b776a:	9301      	str	r3, [sp, #4]
   b776c:	bd08      	pop	{r3, pc}
   b776e:	0000      	.short	0x0000
   b7770:	00030278 	.word	0x00030278

000b7774 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b7774:	b508      	push	{r3, lr}
   b7776:	4b02      	ldr	r3, [pc, #8]	; (b7780 <os_thread_yield+0xc>)
   b7778:	681b      	ldr	r3, [r3, #0]
   b777a:	68db      	ldr	r3, [r3, #12]
   b777c:	9301      	str	r3, [sp, #4]
   b777e:	bd08      	pop	{r3, pc}
   b7780:	00030248 	.word	0x00030248

000b7784 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b7784:	b508      	push	{r3, lr}
   b7786:	4b02      	ldr	r3, [pc, #8]	; (b7790 <os_thread_scheduling+0xc>)
   b7788:	681b      	ldr	r3, [r3, #0]
   b778a:	69db      	ldr	r3, [r3, #28]
   b778c:	9301      	str	r3, [sp, #4]
   b778e:	bd08      	pop	{r3, pc}
   b7790:	00030248 	.word	0x00030248

000b7794 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b7794:	b508      	push	{r3, lr}
   b7796:	4b02      	ldr	r3, [pc, #8]	; (b77a0 <os_timer_create+0xc>)
   b7798:	681b      	ldr	r3, [r3, #0]
   b779a:	6a1b      	ldr	r3, [r3, #32]
   b779c:	9301      	str	r3, [sp, #4]
   b779e:	bd08      	pop	{r3, pc}
   b77a0:	00030248 	.word	0x00030248

000b77a4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b77a4:	b508      	push	{r3, lr}
   b77a6:	4b02      	ldr	r3, [pc, #8]	; (b77b0 <os_timer_destroy+0xc>)
   b77a8:	681b      	ldr	r3, [r3, #0]
   b77aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b77ac:	9301      	str	r3, [sp, #4]
   b77ae:	bd08      	pop	{r3, pc}
   b77b0:	00030248 	.word	0x00030248

000b77b4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b77b4:	b508      	push	{r3, lr}
   b77b6:	4b02      	ldr	r3, [pc, #8]	; (b77c0 <os_timer_get_id+0xc>)
   b77b8:	681b      	ldr	r3, [r3, #0]
   b77ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b77bc:	9301      	str	r3, [sp, #4]
   b77be:	bd08      	pop	{r3, pc}
   b77c0:	00030248 	.word	0x00030248

000b77c4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b77c4:	b508      	push	{r3, lr}
   b77c6:	4b02      	ldr	r3, [pc, #8]	; (b77d0 <os_timer_change+0xc>)
   b77c8:	681b      	ldr	r3, [r3, #0]
   b77ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b77cc:	9301      	str	r3, [sp, #4]
   b77ce:	bd08      	pop	{r3, pc}
   b77d0:	00030248 	.word	0x00030248

000b77d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b77d4:	b508      	push	{r3, lr}
   b77d6:	4b02      	ldr	r3, [pc, #8]	; (b77e0 <os_mutex_recursive_create+0xc>)
   b77d8:	681b      	ldr	r3, [r3, #0]
   b77da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b77dc:	9301      	str	r3, [sp, #4]
   b77de:	bd08      	pop	{r3, pc}
   b77e0:	00030248 	.word	0x00030248

000b77e4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b77e4:	b508      	push	{r3, lr}
   b77e6:	4b02      	ldr	r3, [pc, #8]	; (b77f0 <os_mutex_recursive_lock+0xc>)
   b77e8:	681b      	ldr	r3, [r3, #0]
   b77ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b77ec:	9301      	str	r3, [sp, #4]
   b77ee:	bd08      	pop	{r3, pc}
   b77f0:	00030248 	.word	0x00030248

000b77f4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b77f4:	b508      	push	{r3, lr}
   b77f6:	4b02      	ldr	r3, [pc, #8]	; (b7800 <os_mutex_recursive_unlock+0xc>)
   b77f8:	681b      	ldr	r3, [r3, #0]
   b77fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b77fc:	9301      	str	r3, [sp, #4]
   b77fe:	bd08      	pop	{r3, pc}
   b7800:	00030248 	.word	0x00030248

000b7804 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b7804:	b508      	push	{r3, lr}
   b7806:	4b02      	ldr	r3, [pc, #8]	; (b7810 <os_timer_set_id+0xc>)
   b7808:	681b      	ldr	r3, [r3, #0]
   b780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b780c:	9301      	str	r3, [sp, #4]
   b780e:	bd08      	pop	{r3, pc}
   b7810:	00030248 	.word	0x00030248

000b7814 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7814:	b508      	push	{r3, lr}
   b7816:	4b02      	ldr	r3, [pc, #8]	; (b7820 <inet_inet_ntop+0xc>)
   b7818:	681b      	ldr	r3, [r3, #0]
   b781a:	695b      	ldr	r3, [r3, #20]
   b781c:	9301      	str	r3, [sp, #4]
   b781e:	bd08      	pop	{r3, pc}
   b7820:	00030264 	.word	0x00030264

000b7824 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7824:	b508      	push	{r3, lr}
   b7826:	4b02      	ldr	r3, [pc, #8]	; (b7830 <inet_htonl+0xc>)
   b7828:	681b      	ldr	r3, [r3, #0]
   b782a:	6a1b      	ldr	r3, [r3, #32]
   b782c:	9301      	str	r3, [sp, #4]
   b782e:	bd08      	pop	{r3, pc}
   b7830:	00030264 	.word	0x00030264

000b7834 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b7834:	b508      	push	{r3, lr}
   b7836:	4b02      	ldr	r3, [pc, #8]	; (b7840 <inet_ntohs+0xc>)
   b7838:	681b      	ldr	r3, [r3, #0]
   b783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b783c:	9301      	str	r3, [sp, #4]
   b783e:	bd08      	pop	{r3, pc}
   b7840:	00030264 	.word	0x00030264

000b7844 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7844:	b508      	push	{r3, lr}
   b7846:	4b02      	ldr	r3, [pc, #8]	; (b7850 <inet_htons+0xc>)
   b7848:	681b      	ldr	r3, [r3, #0]
   b784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b784c:	9301      	str	r3, [sp, #4]
   b784e:	bd08      	pop	{r3, pc}
   b7850:	00030264 	.word	0x00030264

000b7854 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7854:	b508      	push	{r3, lr}
   b7856:	4b02      	ldr	r3, [pc, #8]	; (b7860 <hal_usart_write+0xc>)
   b7858:	681b      	ldr	r3, [r3, #0]
   b785a:	68db      	ldr	r3, [r3, #12]
   b785c:	9301      	str	r3, [sp, #4]
   b785e:	bd08      	pop	{r3, pc}
   b7860:	0003023c 	.word	0x0003023c

000b7864 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7864:	b508      	push	{r3, lr}
   b7866:	4b02      	ldr	r3, [pc, #8]	; (b7870 <hal_usart_available+0xc>)
   b7868:	681b      	ldr	r3, [r3, #0]
   b786a:	691b      	ldr	r3, [r3, #16]
   b786c:	9301      	str	r3, [sp, #4]
   b786e:	bd08      	pop	{r3, pc}
   b7870:	0003023c 	.word	0x0003023c

000b7874 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7874:	b508      	push	{r3, lr}
   b7876:	4b02      	ldr	r3, [pc, #8]	; (b7880 <hal_usart_read+0xc>)
   b7878:	681b      	ldr	r3, [r3, #0]
   b787a:	695b      	ldr	r3, [r3, #20]
   b787c:	9301      	str	r3, [sp, #4]
   b787e:	bd08      	pop	{r3, pc}
   b7880:	0003023c 	.word	0x0003023c

000b7884 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7884:	b508      	push	{r3, lr}
   b7886:	4b02      	ldr	r3, [pc, #8]	; (b7890 <hal_usart_peek+0xc>)
   b7888:	681b      	ldr	r3, [r3, #0]
   b788a:	699b      	ldr	r3, [r3, #24]
   b788c:	9301      	str	r3, [sp, #4]
   b788e:	bd08      	pop	{r3, pc}
   b7890:	0003023c 	.word	0x0003023c

000b7894 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7894:	b508      	push	{r3, lr}
   b7896:	4b02      	ldr	r3, [pc, #8]	; (b78a0 <hal_usart_flush+0xc>)
   b7898:	681b      	ldr	r3, [r3, #0]
   b789a:	69db      	ldr	r3, [r3, #28]
   b789c:	9301      	str	r3, [sp, #4]
   b789e:	bd08      	pop	{r3, pc}
   b78a0:	0003023c 	.word	0x0003023c

000b78a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b78a4:	b508      	push	{r3, lr}
   b78a6:	4b02      	ldr	r3, [pc, #8]	; (b78b0 <hal_usart_is_enabled+0xc>)
   b78a8:	681b      	ldr	r3, [r3, #0]
   b78aa:	6a1b      	ldr	r3, [r3, #32]
   b78ac:	9301      	str	r3, [sp, #4]
   b78ae:	bd08      	pop	{r3, pc}
   b78b0:	0003023c 	.word	0x0003023c

000b78b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b78b4:	b508      	push	{r3, lr}
   b78b6:	4b02      	ldr	r3, [pc, #8]	; (b78c0 <hal_usart_available_data_for_write+0xc>)
   b78b8:	681b      	ldr	r3, [r3, #0]
   b78ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b78bc:	9301      	str	r3, [sp, #4]
   b78be:	bd08      	pop	{r3, pc}
   b78c0:	0003023c 	.word	0x0003023c

000b78c4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b78c4:	b508      	push	{r3, lr}
   b78c6:	4b02      	ldr	r3, [pc, #8]	; (b78d0 <hal_usart_init_ex+0xc>)
   b78c8:	681b      	ldr	r3, [r3, #0]
   b78ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b78cc:	9301      	str	r3, [sp, #4]
   b78ce:	bd08      	pop	{r3, pc}
   b78d0:	0003023c 	.word	0x0003023c

000b78d4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b78d4:	b508      	push	{r3, lr}
   b78d6:	4b02      	ldr	r3, [pc, #8]	; (b78e0 <hal_i2c_write+0xc>)
   b78d8:	681b      	ldr	r3, [r3, #0]
   b78da:	6a1b      	ldr	r3, [r3, #32]
   b78dc:	9301      	str	r3, [sp, #4]
   b78de:	bd08      	pop	{r3, pc}
   b78e0:	00030228 	.word	0x00030228

000b78e4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b78e4:	b508      	push	{r3, lr}
   b78e6:	4b02      	ldr	r3, [pc, #8]	; (b78f0 <hal_i2c_available+0xc>)
   b78e8:	681b      	ldr	r3, [r3, #0]
   b78ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b78ec:	9301      	str	r3, [sp, #4]
   b78ee:	bd08      	pop	{r3, pc}
   b78f0:	00030228 	.word	0x00030228

000b78f4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b78f4:	b508      	push	{r3, lr}
   b78f6:	4b02      	ldr	r3, [pc, #8]	; (b7900 <hal_i2c_read+0xc>)
   b78f8:	681b      	ldr	r3, [r3, #0]
   b78fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b78fc:	9301      	str	r3, [sp, #4]
   b78fe:	bd08      	pop	{r3, pc}
   b7900:	00030228 	.word	0x00030228

000b7904 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7904:	b508      	push	{r3, lr}
   b7906:	4b02      	ldr	r3, [pc, #8]	; (b7910 <hal_i2c_peek+0xc>)
   b7908:	681b      	ldr	r3, [r3, #0]
   b790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b790c:	9301      	str	r3, [sp, #4]
   b790e:	bd08      	pop	{r3, pc}
   b7910:	00030228 	.word	0x00030228

000b7914 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7914:	b508      	push	{r3, lr}
   b7916:	4b02      	ldr	r3, [pc, #8]	; (b7920 <hal_i2c_flush+0xc>)
   b7918:	681b      	ldr	r3, [r3, #0]
   b791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b791c:	9301      	str	r3, [sp, #4]
   b791e:	bd08      	pop	{r3, pc}
   b7920:	00030228 	.word	0x00030228

000b7924 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7924:	b508      	push	{r3, lr}
   b7926:	4b02      	ldr	r3, [pc, #8]	; (b7930 <hal_i2c_is_enabled+0xc>)
   b7928:	681b      	ldr	r3, [r3, #0]
   b792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b792c:	9301      	str	r3, [sp, #4]
   b792e:	bd08      	pop	{r3, pc}
   b7930:	00030228 	.word	0x00030228

000b7934 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7934:	b508      	push	{r3, lr}
   b7936:	4b02      	ldr	r3, [pc, #8]	; (b7940 <hal_i2c_init+0xc>)
   b7938:	681b      	ldr	r3, [r3, #0]
   b793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b793c:	9301      	str	r3, [sp, #4]
   b793e:	bd08      	pop	{r3, pc}
   b7940:	00030228 	.word	0x00030228

000b7944 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b7944:	b508      	push	{r3, lr}
   b7946:	4b02      	ldr	r3, [pc, #8]	; (b7950 <sock_bind+0xc>)
   b7948:	681b      	ldr	r3, [r3, #0]
   b794a:	685b      	ldr	r3, [r3, #4]
   b794c:	9301      	str	r3, [sp, #4]
   b794e:	bd08      	pop	{r3, pc}
   b7950:	00030238 	.word	0x00030238

000b7954 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7954:	b508      	push	{r3, lr}
   b7956:	4b02      	ldr	r3, [pc, #8]	; (b7960 <sock_setsockopt+0xc>)
   b7958:	681b      	ldr	r3, [r3, #0]
   b795a:	699b      	ldr	r3, [r3, #24]
   b795c:	9301      	str	r3, [sp, #4]
   b795e:	bd08      	pop	{r3, pc}
   b7960:	00030238 	.word	0x00030238

000b7964 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7964:	b508      	push	{r3, lr}
   b7966:	4b02      	ldr	r3, [pc, #8]	; (b7970 <sock_close+0xc>)
   b7968:	681b      	ldr	r3, [r3, #0]
   b796a:	69db      	ldr	r3, [r3, #28]
   b796c:	9301      	str	r3, [sp, #4]
   b796e:	bd08      	pop	{r3, pc}
   b7970:	00030238 	.word	0x00030238

000b7974 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b7974:	b508      	push	{r3, lr}
   b7976:	4b02      	ldr	r3, [pc, #8]	; (b7980 <sock_recvfrom+0xc>)
   b7978:	681b      	ldr	r3, [r3, #0]
   b797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b797c:	9301      	str	r3, [sp, #4]
   b797e:	bd08      	pop	{r3, pc}
   b7980:	00030238 	.word	0x00030238

000b7984 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b7984:	b508      	push	{r3, lr}
   b7986:	4b02      	ldr	r3, [pc, #8]	; (b7990 <sock_sendto+0xc>)
   b7988:	681b      	ldr	r3, [r3, #0]
   b798a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b798c:	9301      	str	r3, [sp, #4]
   b798e:	bd08      	pop	{r3, pc}
   b7990:	00030238 	.word	0x00030238

000b7994 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7994:	b508      	push	{r3, lr}
   b7996:	4b02      	ldr	r3, [pc, #8]	; (b79a0 <sock_socket+0xc>)
   b7998:	681b      	ldr	r3, [r3, #0]
   b799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b799c:	9301      	str	r3, [sp, #4]
   b799e:	bd08      	pop	{r3, pc}
   b79a0:	00030238 	.word	0x00030238

000b79a4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b79a4:	b508      	push	{r3, lr}
   b79a6:	4b02      	ldr	r3, [pc, #8]	; (b79b0 <hal_spi_init+0xc>)
   b79a8:	681b      	ldr	r3, [r3, #0]
   b79aa:	69db      	ldr	r3, [r3, #28]
   b79ac:	9301      	str	r3, [sp, #4]
   b79ae:	bd08      	pop	{r3, pc}
   b79b0:	00030230 	.word	0x00030230

000b79b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b79b4:	b508      	push	{r3, lr}
   b79b6:	4b02      	ldr	r3, [pc, #8]	; (b79c0 <hal_spi_is_enabled+0xc>)
   b79b8:	681b      	ldr	r3, [r3, #0]
   b79ba:	6a1b      	ldr	r3, [r3, #32]
   b79bc:	9301      	str	r3, [sp, #4]
   b79be:	bd08      	pop	{r3, pc}
   b79c0:	00030230 	.word	0x00030230

000b79c4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b79c4:	b508      	push	{r3, lr}
   b79c6:	4b02      	ldr	r3, [pc, #8]	; (b79d0 <HAL_USB_USART_Init+0xc>)
   b79c8:	681b      	ldr	r3, [r3, #0]
   b79ca:	681b      	ldr	r3, [r3, #0]
   b79cc:	9301      	str	r3, [sp, #4]
   b79ce:	bd08      	pop	{r3, pc}
   b79d0:	0003024c 	.word	0x0003024c

000b79d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b79d4:	b508      	push	{r3, lr}
   b79d6:	4b02      	ldr	r3, [pc, #8]	; (b79e0 <HAL_USB_USART_Available_Data+0xc>)
   b79d8:	681b      	ldr	r3, [r3, #0]
   b79da:	691b      	ldr	r3, [r3, #16]
   b79dc:	9301      	str	r3, [sp, #4]
   b79de:	bd08      	pop	{r3, pc}
   b79e0:	0003024c 	.word	0x0003024c

000b79e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b79e4:	b508      	push	{r3, lr}
   b79e6:	4b02      	ldr	r3, [pc, #8]	; (b79f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b79e8:	681b      	ldr	r3, [r3, #0]
   b79ea:	695b      	ldr	r3, [r3, #20]
   b79ec:	9301      	str	r3, [sp, #4]
   b79ee:	bd08      	pop	{r3, pc}
   b79f0:	0003024c 	.word	0x0003024c

000b79f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b79f4:	b508      	push	{r3, lr}
   b79f6:	4b02      	ldr	r3, [pc, #8]	; (b7a00 <HAL_USB_USART_Receive_Data+0xc>)
   b79f8:	681b      	ldr	r3, [r3, #0]
   b79fa:	699b      	ldr	r3, [r3, #24]
   b79fc:	9301      	str	r3, [sp, #4]
   b79fe:	bd08      	pop	{r3, pc}
   b7a00:	0003024c 	.word	0x0003024c

000b7a04 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7a04:	b508      	push	{r3, lr}
   b7a06:	4b02      	ldr	r3, [pc, #8]	; (b7a10 <HAL_USB_USART_Send_Data+0xc>)
   b7a08:	681b      	ldr	r3, [r3, #0]
   b7a0a:	69db      	ldr	r3, [r3, #28]
   b7a0c:	9301      	str	r3, [sp, #4]
   b7a0e:	bd08      	pop	{r3, pc}
   b7a10:	0003024c 	.word	0x0003024c

000b7a14 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7a14:	b508      	push	{r3, lr}
   b7a16:	4b02      	ldr	r3, [pc, #8]	; (b7a20 <HAL_USB_USART_Flush_Data+0xc>)
   b7a18:	681b      	ldr	r3, [r3, #0]
   b7a1a:	6a1b      	ldr	r3, [r3, #32]
   b7a1c:	9301      	str	r3, [sp, #4]
   b7a1e:	bd08      	pop	{r3, pc}
   b7a20:	0003024c 	.word	0x0003024c

000b7a24 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7a24:	b508      	push	{r3, lr}
   b7a26:	4b02      	ldr	r3, [pc, #8]	; (b7a30 <panic_+0xc>)
   b7a28:	681b      	ldr	r3, [r3, #0]
   b7a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7a2c:	9301      	str	r3, [sp, #4]
   b7a2e:	bd08      	pop	{r3, pc}
   b7a30:	00030260 	.word	0x00030260

000b7a34 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7a34:	b508      	push	{r3, lr}
   b7a36:	4b02      	ldr	r3, [pc, #8]	; (b7a40 <log_message+0xc>)
   b7a38:	681b      	ldr	r3, [r3, #0]
   b7a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7a3c:	9301      	str	r3, [sp, #4]
   b7a3e:	bd08      	pop	{r3, pc}
   b7a40:	00030260 	.word	0x00030260

000b7a44 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7a44:	b508      	push	{r3, lr}
   b7a46:	4b02      	ldr	r3, [pc, #8]	; (b7a50 <system_mode+0xc>)
   b7a48:	681b      	ldr	r3, [r3, #0]
   b7a4a:	681b      	ldr	r3, [r3, #0]
   b7a4c:	9301      	str	r3, [sp, #4]
   b7a4e:	bd08      	pop	{r3, pc}
   b7a50:	00030220 	.word	0x00030220

000b7a54 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7a54:	b508      	push	{r3, lr}
   b7a56:	4b02      	ldr	r3, [pc, #8]	; (b7a60 <set_system_mode+0xc>)
   b7a58:	681b      	ldr	r3, [r3, #0]
   b7a5a:	685b      	ldr	r3, [r3, #4]
   b7a5c:	9301      	str	r3, [sp, #4]
   b7a5e:	bd08      	pop	{r3, pc}
   b7a60:	00030220 	.word	0x00030220

000b7a64 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7a64:	b508      	push	{r3, lr}
   b7a66:	4b02      	ldr	r3, [pc, #8]	; (b7a70 <system_delay_ms+0xc>)
   b7a68:	681b      	ldr	r3, [r3, #0]
   b7a6a:	695b      	ldr	r3, [r3, #20]
   b7a6c:	9301      	str	r3, [sp, #4]
   b7a6e:	bd08      	pop	{r3, pc}
   b7a70:	00030220 	.word	0x00030220

000b7a74 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7a74:	b508      	push	{r3, lr}
   b7a76:	4b02      	ldr	r3, [pc, #8]	; (b7a80 <system_thread_set_state+0xc>)
   b7a78:	681b      	ldr	r3, [r3, #0]
   b7a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7a7c:	9301      	str	r3, [sp, #4]
   b7a7e:	bd08      	pop	{r3, pc}
   b7a80:	00030220 	.word	0x00030220

000b7a84 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7a84:	b508      	push	{r3, lr}
   b7a86:	4b02      	ldr	r3, [pc, #8]	; (b7a90 <application_thread_current+0xc>)
   b7a88:	681b      	ldr	r3, [r3, #0]
   b7a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7a8c:	9301      	str	r3, [sp, #4]
   b7a8e:	bd08      	pop	{r3, pc}
   b7a90:	00030220 	.word	0x00030220

000b7a94 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7a94:	b508      	push	{r3, lr}
   b7a96:	4b02      	ldr	r3, [pc, #8]	; (b7aa0 <application_thread_invoke+0xc>)
   b7a98:	681b      	ldr	r3, [r3, #0]
   b7a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7a9c:	9301      	str	r3, [sp, #4]
   b7a9e:	bd08      	pop	{r3, pc}
   b7aa0:	00030220 	.word	0x00030220

000b7aa4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7aa4:	b508      	push	{r3, lr}
   b7aa6:	4b02      	ldr	r3, [pc, #8]	; (b7ab0 <system_thread_get_state+0xc>)
   b7aa8:	681b      	ldr	r3, [r3, #0]
   b7aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7aac:	9301      	str	r3, [sp, #4]
   b7aae:	bd08      	pop	{r3, pc}
   b7ab0:	00030220 	.word	0x00030220

000b7ab4 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b7ab4:	b508      	push	{r3, lr}
   b7ab6:	4b02      	ldr	r3, [pc, #8]	; (b7ac0 <system_notify_time_changed+0xc>)
   b7ab8:	681b      	ldr	r3, [r3, #0]
   b7aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7abc:	9301      	str	r3, [sp, #4]
   b7abe:	bd08      	pop	{r3, pc}
   b7ac0:	00030220 	.word	0x00030220

000b7ac4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7ac4:	b508      	push	{r3, lr}
   b7ac6:	4b03      	ldr	r3, [pc, #12]	; (b7ad4 <system_ctrl_set_app_request_handler+0x10>)
   b7ac8:	681b      	ldr	r3, [r3, #0]
   b7aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7ace:	9301      	str	r3, [sp, #4]
   b7ad0:	bd08      	pop	{r3, pc}
   b7ad2:	0000      	.short	0x0000
   b7ad4:	00030220 	.word	0x00030220

000b7ad8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7ad8:	b508      	push	{r3, lr}
   b7ada:	4b03      	ldr	r3, [pc, #12]	; (b7ae8 <system_ctrl_set_result+0x10>)
   b7adc:	681b      	ldr	r3, [r3, #0]
   b7ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7ae2:	9301      	str	r3, [sp, #4]
   b7ae4:	bd08      	pop	{r3, pc}
   b7ae6:	0000      	.short	0x0000
   b7ae8:	00030220 	.word	0x00030220

000b7aec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7aec:	b508      	push	{r3, lr}
   b7aee:	4b02      	ldr	r3, [pc, #8]	; (b7af8 <network_connect+0xc>)
   b7af0:	681b      	ldr	r3, [r3, #0]
   b7af2:	685b      	ldr	r3, [r3, #4]
   b7af4:	9301      	str	r3, [sp, #4]
   b7af6:	bd08      	pop	{r3, pc}
   b7af8:	00030240 	.word	0x00030240

000b7afc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <network_connecting+0xc>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	689b      	ldr	r3, [r3, #8]
   b7b04:	9301      	str	r3, [sp, #4]
   b7b06:	bd08      	pop	{r3, pc}
   b7b08:	00030240 	.word	0x00030240

000b7b0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7b0c:	b508      	push	{r3, lr}
   b7b0e:	4b02      	ldr	r3, [pc, #8]	; (b7b18 <network_disconnect+0xc>)
   b7b10:	681b      	ldr	r3, [r3, #0]
   b7b12:	68db      	ldr	r3, [r3, #12]
   b7b14:	9301      	str	r3, [sp, #4]
   b7b16:	bd08      	pop	{r3, pc}
   b7b18:	00030240 	.word	0x00030240

000b7b1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7b1c:	b508      	push	{r3, lr}
   b7b1e:	4b02      	ldr	r3, [pc, #8]	; (b7b28 <network_ready+0xc>)
   b7b20:	681b      	ldr	r3, [r3, #0]
   b7b22:	691b      	ldr	r3, [r3, #16]
   b7b24:	9301      	str	r3, [sp, #4]
   b7b26:	bd08      	pop	{r3, pc}
   b7b28:	00030240 	.word	0x00030240

000b7b2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7b2c:	b508      	push	{r3, lr}
   b7b2e:	4b02      	ldr	r3, [pc, #8]	; (b7b38 <network_on+0xc>)
   b7b30:	681b      	ldr	r3, [r3, #0]
   b7b32:	695b      	ldr	r3, [r3, #20]
   b7b34:	9301      	str	r3, [sp, #4]
   b7b36:	bd08      	pop	{r3, pc}
   b7b38:	00030240 	.word	0x00030240

000b7b3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7b3c:	b508      	push	{r3, lr}
   b7b3e:	4b02      	ldr	r3, [pc, #8]	; (b7b48 <network_off+0xc>)
   b7b40:	681b      	ldr	r3, [r3, #0]
   b7b42:	699b      	ldr	r3, [r3, #24]
   b7b44:	9301      	str	r3, [sp, #4]
   b7b46:	bd08      	pop	{r3, pc}
   b7b48:	00030240 	.word	0x00030240

000b7b4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7b4c:	b508      	push	{r3, lr}
   b7b4e:	4b02      	ldr	r3, [pc, #8]	; (b7b58 <network_listen+0xc>)
   b7b50:	681b      	ldr	r3, [r3, #0]
   b7b52:	69db      	ldr	r3, [r3, #28]
   b7b54:	9301      	str	r3, [sp, #4]
   b7b56:	bd08      	pop	{r3, pc}
   b7b58:	00030240 	.word	0x00030240

000b7b5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7b5c:	b508      	push	{r3, lr}
   b7b5e:	4b02      	ldr	r3, [pc, #8]	; (b7b68 <network_listening+0xc>)
   b7b60:	681b      	ldr	r3, [r3, #0]
   b7b62:	6a1b      	ldr	r3, [r3, #32]
   b7b64:	9301      	str	r3, [sp, #4]
   b7b66:	bd08      	pop	{r3, pc}
   b7b68:	00030240 	.word	0x00030240

000b7b6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7b6c:	b508      	push	{r3, lr}
   b7b6e:	4b02      	ldr	r3, [pc, #8]	; (b7b78 <network_set_listen_timeout+0xc>)
   b7b70:	681b      	ldr	r3, [r3, #0]
   b7b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b74:	9301      	str	r3, [sp, #4]
   b7b76:	bd08      	pop	{r3, pc}
   b7b78:	00030240 	.word	0x00030240

000b7b7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7b7c:	b508      	push	{r3, lr}
   b7b7e:	4b02      	ldr	r3, [pc, #8]	; (b7b88 <network_get_listen_timeout+0xc>)
   b7b80:	681b      	ldr	r3, [r3, #0]
   b7b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b84:	9301      	str	r3, [sp, #4]
   b7b86:	bd08      	pop	{r3, pc}
   b7b88:	00030240 	.word	0x00030240

000b7b8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7b8c:	b508      	push	{r3, lr}
   b7b8e:	4b02      	ldr	r3, [pc, #8]	; (b7b98 <network_is_on+0xc>)
   b7b90:	681b      	ldr	r3, [r3, #0]
   b7b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7b94:	9301      	str	r3, [sp, #4]
   b7b96:	bd08      	pop	{r3, pc}
   b7b98:	00030240 	.word	0x00030240

000b7b9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7b9c:	b508      	push	{r3, lr}
   b7b9e:	4b02      	ldr	r3, [pc, #8]	; (b7ba8 <network_is_off+0xc>)
   b7ba0:	681b      	ldr	r3, [r3, #0]
   b7ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ba4:	9301      	str	r3, [sp, #4]
   b7ba6:	bd08      	pop	{r3, pc}
   b7ba8:	00030240 	.word	0x00030240

000b7bac <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7bac:	b508      	push	{r3, lr}
   b7bae:	4b02      	ldr	r3, [pc, #8]	; (b7bb8 <spark_process+0xc>)
   b7bb0:	681b      	ldr	r3, [r3, #0]
   b7bb2:	689b      	ldr	r3, [r3, #8]
   b7bb4:	9301      	str	r3, [sp, #4]
   b7bb6:	bd08      	pop	{r3, pc}
   b7bb8:	00030244 	.word	0x00030244

000b7bbc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7bbc:	b508      	push	{r3, lr}
   b7bbe:	4b02      	ldr	r3, [pc, #8]	; (b7bc8 <spark_cloud_flag_connected+0xc>)
   b7bc0:	681b      	ldr	r3, [r3, #0]
   b7bc2:	695b      	ldr	r3, [r3, #20]
   b7bc4:	9301      	str	r3, [sp, #4]
   b7bc6:	bd08      	pop	{r3, pc}
   b7bc8:	00030244 	.word	0x00030244

000b7bcc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7bcc:	b508      	push	{r3, lr}
   b7bce:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <spark_send_event+0xc>)
   b7bd0:	681b      	ldr	r3, [r3, #0]
   b7bd2:	6a1b      	ldr	r3, [r3, #32]
   b7bd4:	9301      	str	r3, [sp, #4]
   b7bd6:	bd08      	pop	{r3, pc}
   b7bd8:	00030244 	.word	0x00030244

000b7bdc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b7bdc:	b508      	push	{r3, lr}
   b7bde:	4b02      	ldr	r3, [pc, #8]	; (b7be8 <spark_subscribe+0xc>)
   b7be0:	681b      	ldr	r3, [r3, #0]
   b7be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7be4:	9301      	str	r3, [sp, #4]
   b7be6:	bd08      	pop	{r3, pc}
   b7be8:	00030244 	.word	0x00030244

000b7bec <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7bec:	b508      	push	{r3, lr}
   b7bee:	4b02      	ldr	r3, [pc, #8]	; (b7bf8 <spark_sync_time_pending+0xc>)
   b7bf0:	681b      	ldr	r3, [r3, #0]
   b7bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7bf4:	9301      	str	r3, [sp, #4]
   b7bf6:	bd08      	pop	{r3, pc}
   b7bf8:	00030244 	.word	0x00030244

000b7bfc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7bfc:	b508      	push	{r3, lr}
   b7bfe:	4b02      	ldr	r3, [pc, #8]	; (b7c08 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7c00:	681b      	ldr	r3, [r3, #0]
   b7c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7c04:	9301      	str	r3, [sp, #4]
   b7c06:	bd08      	pop	{r3, pc}
   b7c08:	00030244 	.word	0x00030244

000b7c0c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7c0c:	b508      	push	{r3, lr}
   b7c0e:	4b02      	ldr	r3, [pc, #8]	; (b7c18 <malloc+0xc>)
   b7c10:	681b      	ldr	r3, [r3, #0]
   b7c12:	681b      	ldr	r3, [r3, #0]
   b7c14:	9301      	str	r3, [sp, #4]
   b7c16:	bd08      	pop	{r3, pc}
   b7c18:	0003021c 	.word	0x0003021c

000b7c1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	4b02      	ldr	r3, [pc, #8]	; (b7c28 <free+0xc>)
   b7c20:	681b      	ldr	r3, [r3, #0]
   b7c22:	685b      	ldr	r3, [r3, #4]
   b7c24:	9301      	str	r3, [sp, #4]
   b7c26:	bd08      	pop	{r3, pc}
   b7c28:	0003021c 	.word	0x0003021c

000b7c2c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7c2c:	b508      	push	{r3, lr}
   b7c2e:	4b02      	ldr	r3, [pc, #8]	; (b7c38 <realloc+0xc>)
   b7c30:	681b      	ldr	r3, [r3, #0]
   b7c32:	689b      	ldr	r3, [r3, #8]
   b7c34:	9301      	str	r3, [sp, #4]
   b7c36:	bd08      	pop	{r3, pc}
   b7c38:	0003021c 	.word	0x0003021c

000b7c3c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7c3c:	b508      	push	{r3, lr}
   b7c3e:	4b02      	ldr	r3, [pc, #8]	; (b7c48 <sprintf+0xc>)
   b7c40:	681b      	ldr	r3, [r3, #0]
   b7c42:	68db      	ldr	r3, [r3, #12]
   b7c44:	9301      	str	r3, [sp, #4]
   b7c46:	bd08      	pop	{r3, pc}
   b7c48:	0003021c 	.word	0x0003021c

000b7c4c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b7c4c:	b508      	push	{r3, lr}
   b7c4e:	4b02      	ldr	r3, [pc, #8]	; (b7c58 <siprintf+0xc>)
   b7c50:	681b      	ldr	r3, [r3, #0]
   b7c52:	691b      	ldr	r3, [r3, #16]
   b7c54:	9301      	str	r3, [sp, #4]
   b7c56:	bd08      	pop	{r3, pc}
   b7c58:	0003021c 	.word	0x0003021c

000b7c5c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7c5c:	b508      	push	{r3, lr}
   b7c5e:	4b02      	ldr	r3, [pc, #8]	; (b7c68 <sscanf+0xc>)
   b7c60:	681b      	ldr	r3, [r3, #0]
   b7c62:	695b      	ldr	r3, [r3, #20]
   b7c64:	9301      	str	r3, [sp, #4]
   b7c66:	bd08      	pop	{r3, pc}
   b7c68:	0003021c 	.word	0x0003021c

000b7c6c <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7c6c:	b508      	push	{r3, lr}
   b7c6e:	4b02      	ldr	r3, [pc, #8]	; (b7c78 <vsnprintf+0xc>)
   b7c70:	681b      	ldr	r3, [r3, #0]
   b7c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c74:	9301      	str	r3, [sp, #4]
   b7c76:	bd08      	pop	{r3, pc}
   b7c78:	0003021c 	.word	0x0003021c

000b7c7c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7c7c:	b508      	push	{r3, lr}
   b7c7e:	4b02      	ldr	r3, [pc, #8]	; (b7c88 <abort+0xc>)
   b7c80:	681b      	ldr	r3, [r3, #0]
   b7c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7c84:	9301      	str	r3, [sp, #4]
   b7c86:	bd08      	pop	{r3, pc}
   b7c88:	0003021c 	.word	0x0003021c

000b7c8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7c8c:	b508      	push	{r3, lr}
   b7c8e:	4b02      	ldr	r3, [pc, #8]	; (b7c98 <_malloc_r+0xc>)
   b7c90:	681b      	ldr	r3, [r3, #0]
   b7c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c94:	9301      	str	r3, [sp, #4]
   b7c96:	bd08      	pop	{r3, pc}
   b7c98:	0003021c 	.word	0x0003021c

000b7c9c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7c9c:	b508      	push	{r3, lr}
   b7c9e:	4b02      	ldr	r3, [pc, #8]	; (b7ca8 <__errno+0xc>)
   b7ca0:	681b      	ldr	r3, [r3, #0]
   b7ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7ca4:	9301      	str	r3, [sp, #4]
   b7ca6:	bd08      	pop	{r3, pc}
   b7ca8:	0003021c 	.word	0x0003021c

000b7cac <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7cac:	b508      	push	{r3, lr}
   b7cae:	4b02      	ldr	r3, [pc, #8]	; (b7cb8 <__assert_func+0xc>)
   b7cb0:	681b      	ldr	r3, [r3, #0]
   b7cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7cb4:	9301      	str	r3, [sp, #4]
   b7cb6:	bd08      	pop	{r3, pc}
   b7cb8:	0003021c 	.word	0x0003021c

000b7cbc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7cbc:	b508      	push	{r3, lr}
   b7cbe:	4b02      	ldr	r3, [pc, #8]	; (b7cc8 <newlib_impure_ptr_callback+0xc>)
   b7cc0:	681b      	ldr	r3, [r3, #0]
   b7cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7cc4:	9301      	str	r3, [sp, #4]
   b7cc6:	bd08      	pop	{r3, pc}
   b7cc8:	0003021c 	.word	0x0003021c

000b7ccc <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b7ccc:	b508      	push	{r3, lr}
   b7cce:	4b02      	ldr	r3, [pc, #8]	; (b7cd8 <localtime_r+0xc>)
   b7cd0:	681b      	ldr	r3, [r3, #0]
   b7cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7cd4:	9301      	str	r3, [sp, #4]
   b7cd6:	bd08      	pop	{r3, pc}
   b7cd8:	0003021c 	.word	0x0003021c

000b7cdc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7cdc:	2200      	movs	r2, #0
   b7cde:	6840      	ldr	r0, [r0, #4]
   b7ce0:	4611      	mov	r1, r2
   b7ce2:	f7ff bf3b 	b.w	b7b5c <network_listening>

000b7ce6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ce6:	2200      	movs	r2, #0
   b7ce8:	6840      	ldr	r0, [r0, #4]
   b7cea:	4611      	mov	r1, r2
   b7cec:	f7ff bf46 	b.w	b7b7c <network_get_listen_timeout>

000b7cf0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7cf0:	6840      	ldr	r0, [r0, #4]
   b7cf2:	2200      	movs	r2, #0
   b7cf4:	f7ff bf3a 	b.w	b7b6c <network_set_listen_timeout>

000b7cf8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7cf8:	6840      	ldr	r0, [r0, #4]
   b7cfa:	2200      	movs	r2, #0
   b7cfc:	f081 0101 	eor.w	r1, r1, #1
   b7d00:	f7ff bf24 	b.w	b7b4c <network_listen>

000b7d04 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7d04:	2300      	movs	r3, #0
   b7d06:	6840      	ldr	r0, [r0, #4]
   b7d08:	461a      	mov	r2, r3
   b7d0a:	4619      	mov	r1, r3
   b7d0c:	f7ff bf16 	b.w	b7b3c <network_off>

000b7d10 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7d10:	2300      	movs	r3, #0
   b7d12:	6840      	ldr	r0, [r0, #4]
   b7d14:	461a      	mov	r2, r3
   b7d16:	4619      	mov	r1, r3
   b7d18:	f7ff bf08 	b.w	b7b2c <network_on>

000b7d1c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7d1c:	2200      	movs	r2, #0
   b7d1e:	6840      	ldr	r0, [r0, #4]
   b7d20:	4611      	mov	r1, r2
   b7d22:	f7ff befb 	b.w	b7b1c <network_ready>

000b7d26 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7d26:	2200      	movs	r2, #0
   b7d28:	6840      	ldr	r0, [r0, #4]
   b7d2a:	4611      	mov	r1, r2
   b7d2c:	f7ff bee6 	b.w	b7afc <network_connecting>

000b7d30 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7d30:	6840      	ldr	r0, [r0, #4]
   b7d32:	2200      	movs	r2, #0
   b7d34:	2102      	movs	r1, #2
   b7d36:	f7ff bee9 	b.w	b7b0c <network_disconnect>

000b7d3a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7d3a:	2300      	movs	r3, #0
   b7d3c:	6840      	ldr	r0, [r0, #4]
   b7d3e:	461a      	mov	r2, r3
   b7d40:	f7ff bed4 	b.w	b7aec <network_connect>

000b7d44 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7d44:	4b02      	ldr	r3, [pc, #8]	; (b7d50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7d46:	2203      	movs	r2, #3
   b7d48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7d4a:	4a02      	ldr	r2, [pc, #8]	; (b7d54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7d4c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7d4e:	4770      	bx	lr
   b7d50:	2003e5e0 	.word	0x2003e5e0
   b7d54:	000bd9f0 	.word	0x000bd9f0

000b7d58 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7d58:	b510      	push	{r4, lr}
   b7d5a:	4604      	mov	r4, r0
   b7d5c:	4608      	mov	r0, r1
{
    _spi = spi;
   b7d5e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7d60:	f7ff fe20 	bl	b79a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7d64:	2300      	movs	r3, #0
   b7d66:	6063      	str	r3, [r4, #4]
}
   b7d68:	4620      	mov	r0, r4
   b7d6a:	bd10      	pop	{r4, pc}

000b7d6c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7d6c:	4b05      	ldr	r3, [pc, #20]	; (b7d84 <_GLOBAL__sub_I_System+0x18>)
   b7d6e:	2202      	movs	r2, #2
   b7d70:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7d72:	4b05      	ldr	r3, [pc, #20]	; (b7d88 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7d74:	4a05      	ldr	r2, [pc, #20]	; (b7d8c <_GLOBAL__sub_I_System+0x20>)
   b7d76:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7d78:	2000      	movs	r0, #0
   b7d7a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7d7e:	f7ff be69 	b.w	b7a54 <set_system_mode>
   b7d82:	bf00      	nop
   b7d84:	2003e5f4 	.word	0x2003e5f4
   b7d88:	2003e5e8 	.word	0x2003e5e8
   b7d8c:	ffff0000 	.word	0xffff0000

000b7d90 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7d90:	b510      	push	{r4, lr}
   b7d92:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7d94:	f7fc fef6 	bl	b4b84 <strlen>
   b7d98:	3801      	subs	r0, #1
   b7d9a:	1823      	adds	r3, r4, r0
   b7d9c:	4620      	mov	r0, r4
	while(i<j){
   b7d9e:	4283      	cmp	r3, r0
   b7da0:	d906      	bls.n	b7db0 <_Z11str_reversePc+0x20>
		c = *i;
   b7da2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7da4:	7819      	ldrb	r1, [r3, #0]
   b7da6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7daa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7dae:	e7f6      	b.n	b7d9e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7db0:	bd10      	pop	{r4, pc}

000b7db2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7db2:	b570      	push	{r4, r5, r6, lr}
   b7db4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7db6:	1e91      	subs	r1, r2, #2
   b7db8:	2922      	cmp	r1, #34	; 0x22
   b7dba:	d81d      	bhi.n	b7df8 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7dbc:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7dbe:	b930      	cbnz	r0, b7dce <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7dc0:	4423      	add	r3, r4
            *ptr++ = '0';
   b7dc2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7dc4:	429d      	cmp	r5, r3
   b7dc6:	d210      	bcs.n	b7dea <ultoa+0x38>
            *ptr++ = '0';
   b7dc8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7dcc:	e7fa      	b.n	b7dc4 <ultoa+0x12>
            result.quot = a/radix;
   b7dce:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7dd2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7dd6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7dd8:	2809      	cmp	r0, #9
                *ptr += '0';
   b7dda:	bf94      	ite	ls
   b7ddc:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7dde:	3157      	addhi	r1, #87	; 0x57
   b7de0:	b2c9      	uxtb	r1, r1
   b7de2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7de6:	4630      	mov	r0, r6
	while(a){
   b7de8:	e7e9      	b.n	b7dbe <ultoa+0xc>

	*ptr = '\0';
   b7dea:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7dec:	4620      	mov	r0, r4
	*ptr = '\0';
   b7dee:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7df0:	f7ff ffce 	bl	b7d90 <_Z11str_reversePc>
	return buffer;
   b7df4:	4620      	mov	r0, r4
}
   b7df6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7df8:	2000      	movs	r0, #0
   b7dfa:	e7fc      	b.n	b7df6 <ultoa+0x44>

000b7dfc <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b7dfc:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b7dfe:	2301      	movs	r3, #1
   b7e00:	f7ff ffd7 	bl	b7db2 <ultoa>
}
   b7e04:	bd08      	pop	{r3, pc}

000b7e06 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b7e06:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b7e08:	6804      	ldr	r4, [r0, #0]
   b7e0a:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b7e0c:	46a4      	mov	ip, r4
    }
   b7e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b7e12:	4760      	bx	ip

000b7e14 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b7e14:	6803      	ldr	r3, [r0, #0]
   b7e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7e18:	4718      	bx	r3

000b7e1a <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b7e1a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b7e1c:	4770      	bx	lr

000b7e1e <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b7e1e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b7e20:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b7e22:	1a10      	subs	r0, r2, r0
   b7e24:	4770      	bx	lr
	...

000b7e28 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b7e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7e2a:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b7e2c:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7e2e:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7e30:	4b0c      	ldr	r3, [pc, #48]	; (b7e64 <_ZN3UDP9endPacketEv+0x3c>)
   b7e32:	9302      	str	r3, [sp, #8]
   b7e34:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b7e38:	4604      	mov	r4, r0
   b7e3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7e3c:	ad03      	add	r5, sp, #12
   b7e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7e40:	6833      	ldr	r3, [r6, #0]
   b7e42:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7e44:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b7e46:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b7e48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b7e4a:	9300      	str	r3, [sp, #0]
   b7e4c:	4620      	mov	r0, r4
   b7e4e:	ab02      	add	r3, sp, #8
   b7e50:	47b8      	blx	r7
    flush(); // wait for send to complete
   b7e52:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7e54:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b7e56:	69db      	ldr	r3, [r3, #28]
   b7e58:	4620      	mov	r0, r4
   b7e5a:	4798      	blx	r3
    return result;
}
   b7e5c:	4628      	mov	r0, r5
   b7e5e:	b009      	add	sp, #36	; 0x24
   b7e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7e62:	bf00      	nop
   b7e64:	000bdca0 	.word	0x000bdca0

000b7e68 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b7e68:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b7e6a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b7e6c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b7e70:	68db      	ldr	r3, [r3, #12]
   b7e72:	2201      	movs	r2, #1
   b7e74:	f10d 0107 	add.w	r1, sp, #7
   b7e78:	4798      	blx	r3
}
   b7e7a:	b003      	add	sp, #12
   b7e7c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7e80 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b7e80:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b7e82:	6803      	ldr	r3, [r0, #0]
   b7e84:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b7e86:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b7e88:	4798      	blx	r3
   b7e8a:	b128      	cbz	r0, b7e98 <_ZN3UDP4readEv+0x18>
   b7e8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b7e8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b7e90:	1c59      	adds	r1, r3, #1
   b7e92:	86e1      	strh	r1, [r4, #54]	; 0x36
   b7e94:	5cd0      	ldrb	r0, [r2, r3]
}
   b7e96:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b7e98:	f04f 30ff 	mov.w	r0, #4294967295
   b7e9c:	e7fb      	b.n	b7e96 <_ZN3UDP4readEv+0x16>

000b7e9e <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b7e9e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b7ea0:	6803      	ldr	r3, [r0, #0]
   b7ea2:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b7ea4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b7ea6:	4798      	blx	r3
   b7ea8:	b118      	cbz	r0, b7eb2 <_ZN3UDP4peekEv+0x14>
   b7eaa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b7eac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b7eae:	5cd0      	ldrb	r0, [r2, r3]
}
   b7eb0:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b7eb2:	f04f 30ff 	mov.w	r0, #4294967295
   b7eb6:	e7fb      	b.n	b7eb0 <_ZN3UDP4peekEv+0x12>

000b7eb8 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b7eb8:	4770      	bx	lr

000b7eba <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b7eba:	b410      	push	{r4}
   b7ebc:	4603      	mov	r3, r0
   b7ebe:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b7ec0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b7ec2:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b7ec4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b7ec6:	6803      	ldr	r3, [r0, #0]
   b7ec8:	1a52      	subs	r2, r2, r1
   b7eca:	68db      	ldr	r3, [r3, #12]
   b7ecc:	4421      	add	r1, r4
}
   b7ece:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b7ed2:	4718      	bx	r3

000b7ed4 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b7ed4:	f1a0 0010 	sub.w	r0, r0, #16
   b7ed8:	f7ff bfef 	b.w	b7eba <_ZNK3UDP7printToER5Print>

000b7edc <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b7edc:	b570      	push	{r4, r5, r6, lr}
    stop();
   b7ede:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b7ee0:	b08c      	sub	sp, #48	; 0x30
    stop();
   b7ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b7ee4:	4604      	mov	r4, r0
   b7ee6:	460e      	mov	r6, r1
   b7ee8:	4615      	mov	r5, r2
    stop();
   b7eea:	4798      	blx	r3
    const int one = 1;
   b7eec:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b7eee:	221c      	movs	r2, #28
   b7ef0:	2100      	movs	r1, #0
   b7ef2:	a805      	add	r0, sp, #20
    const int one = 1;
   b7ef4:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b7ef6:	f003 faf5 	bl	bb4e4 <memset>
    saddr.sin6_len = sizeof(saddr);
   b7efa:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b7efe:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b7f00:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b7f04:	f7ff fc9e 	bl	b7844 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b7f08:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b7f0a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b7f0e:	2102      	movs	r1, #2
   b7f10:	200a      	movs	r0, #10
   b7f12:	f7ff fd3f 	bl	b7994 <sock_socket>
    if (_sock < 0) {
   b7f16:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b7f18:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b7f1a:	db25      	blt.n	b7f68 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b7f1c:	2204      	movs	r2, #4
   b7f1e:	9200      	str	r2, [sp, #0]
   b7f20:	ab02      	add	r3, sp, #8
   b7f22:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7f26:	f7ff fd15 	bl	b7954 <sock_setsockopt>
   b7f2a:	b9e8      	cbnz	r0, b7f68 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b7f2c:	b195      	cbz	r5, b7f54 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b7f2e:	9003      	str	r0, [sp, #12]
   b7f30:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b7f34:	a903      	add	r1, sp, #12
   b7f36:	b2e8      	uxtb	r0, r5
   b7f38:	f7ff fb62 	bl	b7600 <if_index_to_name>
   b7f3c:	b9a0      	cbnz	r0, b7f68 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b7f3e:	2306      	movs	r3, #6
   b7f40:	9300      	str	r3, [sp, #0]
   b7f42:	6960      	ldr	r0, [r4, #20]
   b7f44:	ab03      	add	r3, sp, #12
   b7f46:	f241 020b 	movw	r2, #4107	; 0x100b
   b7f4a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7f4e:	f7ff fd01 	bl	b7954 <sock_setsockopt>
   b7f52:	b948      	cbnz	r0, b7f68 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b7f54:	6960      	ldr	r0, [r4, #20]
   b7f56:	221c      	movs	r2, #28
   b7f58:	a905      	add	r1, sp, #20
   b7f5a:	f7ff fcf3 	bl	b7944 <sock_bind>
   b7f5e:	b918      	cbnz	r0, b7f68 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b7f60:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b7f62:	2001      	movs	r0, #1
}
   b7f64:	b00c      	add	sp, #48	; 0x30
   b7f66:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b7f68:	6823      	ldr	r3, [r4, #0]
   b7f6a:	4620      	mov	r0, r4
   b7f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7f6e:	4798      	blx	r3
   b7f70:	2000      	movs	r0, #0
   b7f72:	e7f7      	b.n	b7f64 <_ZN3UDP5beginEtm+0x88>

000b7f74 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b7f74:	b510      	push	{r4, lr}
   b7f76:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b7f78:	6940      	ldr	r0, [r0, #20]
   b7f7a:	2800      	cmp	r0, #0
   b7f7c:	db01      	blt.n	b7f82 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b7f7e:	f7ff fcf1 	bl	b7964 <sock_close>
    _sock = -1;
   b7f82:	f04f 33ff 	mov.w	r3, #4294967295
   b7f86:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b7f88:	2300      	movs	r3, #0
   b7f8a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b7f8c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b7f8e:	bd10      	pop	{r4, pc}

000b7f90 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b7f90:	b570      	push	{r4, r5, r6, lr}
   b7f92:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b7f94:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7f96:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b7f98:	b168      	cbz	r0, b7fb6 <_ZN3UDP5writeEPKhj+0x26>
   b7f9a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b7f9c:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b7f9e:	4294      	cmp	r4, r2
   b7fa0:	bf28      	it	cs
   b7fa2:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b7fa4:	4622      	mov	r2, r4
   b7fa6:	4430      	add	r0, r6
   b7fa8:	f003 fa74 	bl	bb494 <memcpy>
    _offset += size;
   b7fac:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b7fae:	4423      	add	r3, r4
   b7fb0:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b7fb2:	4620      	mov	r0, r4
   b7fb4:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b7fb6:	4604      	mov	r4, r0
   b7fb8:	e7f1      	b.n	b7f9e <_ZN3UDP5writeEPKhj+0xe>

000b7fba <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b7fba:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b7fbc:	6803      	ldr	r3, [r0, #0]
   b7fbe:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b7fc0:	4604      	mov	r4, r0
   b7fc2:	460f      	mov	r7, r1
   b7fc4:	4616      	mov	r6, r2
    if (available()) {
   b7fc6:	4798      	blx	r3
   b7fc8:	b190      	cbz	r0, b7ff0 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b7fca:	6823      	ldr	r3, [r4, #0]
   b7fcc:	4620      	mov	r0, r4
   b7fce:	691b      	ldr	r3, [r3, #16]
   b7fd0:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b7fd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b7fd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b7fd6:	4286      	cmp	r6, r0
   b7fd8:	bfa8      	it	ge
   b7fda:	4606      	movge	r6, r0
   b7fdc:	4419      	add	r1, r3
   b7fde:	4632      	mov	r2, r6
   b7fe0:	4638      	mov	r0, r7
   b7fe2:	f003 fa57 	bl	bb494 <memcpy>
        _offset += read;
   b7fe6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b7fe8:	4433      	add	r3, r6
   b7fea:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b7fec:	4630      	mov	r0, r6
   b7fee:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b7ff0:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b7ff4:	e7fa      	b.n	b7fec <_ZN3UDP4readEPhj+0x32>

000b7ff6 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b7ff6:	b530      	push	{r4, r5, lr}
   b7ff8:	b087      	sub	sp, #28
   b7ffa:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7ffc:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7ffe:	4668      	mov	r0, sp
   b8000:	f002 fa28 	bl	ba454 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8006:	3404      	adds	r4, #4
   b8008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b800a:	682b      	ldr	r3, [r5, #0]
   b800c:	7023      	strb	r3, [r4, #0]
    }
   b800e:	b007      	add	sp, #28
   b8010:	bd30      	pop	{r4, r5, pc}
	...

000b8014 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8014:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8016:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8018:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b801a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b801c:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b801e:	4a0a      	ldr	r2, [pc, #40]	; (b8048 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b8020:	9202      	str	r2, [sp, #8]
   b8022:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b8024:	468c      	mov	ip, r1
   b8026:	4606      	mov	r6, r0
   b8028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b802a:	ad03      	add	r5, sp, #12
   b802c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b802e:	6823      	ldr	r3, [r4, #0]
   b8030:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b8032:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b8036:	9300      	str	r3, [sp, #0]
   b8038:	4672      	mov	r2, lr
   b803a:	ab02      	add	r3, sp, #8
   b803c:	4661      	mov	r1, ip
   b803e:	4630      	mov	r0, r6
   b8040:	47b8      	blx	r7
    }
   b8042:	b009      	add	sp, #36	; 0x24
   b8044:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8046:	bf00      	nop
   b8048:	000bdca0 	.word	0x000bdca0

000b804c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b804c:	b570      	push	{r4, r5, r6, lr}
   b804e:	4604      	mov	r4, r0
   b8050:	4b05      	ldr	r3, [pc, #20]	; (b8068 <_ZN3UDP8remoteIPEv+0x1c>)
   b8052:	f844 3b04 	str.w	r3, [r4], #4
   b8056:	f101 0520 	add.w	r5, r1, #32
   b805a:	4606      	mov	r6, r0
   b805c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b805e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8060:	682b      	ldr	r3, [r5, #0]
   b8062:	7023      	strb	r3, [r4, #0]
   b8064:	4630      	mov	r0, r6
   b8066:	bd70      	pop	{r4, r5, r6, pc}
   b8068:	000bdca0 	.word	0x000bdca0

000b806c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b806c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b806e:	7843      	ldrb	r3, [r0, #1]
   b8070:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b8072:	b08d      	sub	sp, #52	; 0x34
   b8074:	4605      	mov	r5, r0
   b8076:	460c      	mov	r4, r1
   b8078:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b807a:	d104      	bne.n	b8086 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b807c:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b807e:	4620      	mov	r0, r4
   b8080:	f7ff ffb9 	bl	b7ff6 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b8084:	e022      	b.n	b80cc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b8086:	2b0a      	cmp	r3, #10
   b8088:	d125      	bne.n	b80d6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b808a:	2211      	movs	r2, #17
   b808c:	2100      	movs	r1, #0
   b808e:	a801      	add	r0, sp, #4
   b8090:	f003 fa28 	bl	bb4e4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8094:	68ab      	ldr	r3, [r5, #8]
   b8096:	b303      	cbz	r3, b80da <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8098:	f105 0308 	add.w	r3, r5, #8
   b809c:	ae01      	add	r6, sp, #4
   b809e:	f105 0c18 	add.w	ip, r5, #24
   b80a2:	6818      	ldr	r0, [r3, #0]
   b80a4:	6859      	ldr	r1, [r3, #4]
   b80a6:	4632      	mov	r2, r6
   b80a8:	c203      	stmia	r2!, {r0, r1}
   b80aa:	3308      	adds	r3, #8
   b80ac:	4563      	cmp	r3, ip
   b80ae:	4616      	mov	r6, r2
   b80b0:	d1f7      	bne.n	b80a2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b80b2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b80b4:	a901      	add	r1, sp, #4
   b80b6:	a806      	add	r0, sp, #24
   b80b8:	ae07      	add	r6, sp, #28
            a.v = 6;
   b80ba:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b80be:	f002 f993 	bl	ba3e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b80c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b80c4:	3404      	adds	r4, #4
   b80c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b80c8:	6833      	ldr	r3, [r6, #0]
   b80ca:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b80cc:	b11f      	cbz	r7, b80d6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b80ce:	8868      	ldrh	r0, [r5, #2]
   b80d0:	f7ff fbb0 	bl	b7834 <inet_ntohs>
   b80d4:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b80d6:	b00d      	add	sp, #52	; 0x34
   b80d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b80da:	68eb      	ldr	r3, [r5, #12]
   b80dc:	2b00      	cmp	r3, #0
   b80de:	d1db      	bne.n	b8098 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b80e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b80e4:	692e      	ldr	r6, [r5, #16]
   b80e6:	f7ff fb9d 	bl	b7824 <inet_htonl>
   b80ea:	4286      	cmp	r6, r0
   b80ec:	d1d4      	bne.n	b8098 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b80ee:	f105 0114 	add.w	r1, r5, #20
   b80f2:	e7c4      	b.n	b807e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b80f4 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b80f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b80f8:	4617      	mov	r7, r2
   b80fa:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b80fc:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b80fe:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8100:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b8102:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8104:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b8106:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b8108:	f7ff fa5a 	bl	b75c0 <netdb_getaddrinfo>
   b810c:	1e04      	subs	r4, r0, #0
   b810e:	db20      	blt.n	b8152 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b8110:	9b01      	ldr	r3, [sp, #4]
   b8112:	b32b      	cbz	r3, b8160 <_ZN3UDP11beginPacketEPKct+0x6c>
   b8114:	695b      	ldr	r3, [r3, #20]
   b8116:	b31b      	cbz	r3, b8160 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b8118:	a802      	add	r0, sp, #8
   b811a:	f002 f957 	bl	ba3cc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b811e:	9b01      	ldr	r3, [sp, #4]
   b8120:	2200      	movs	r2, #0
   b8122:	6958      	ldr	r0, [r3, #20]
   b8124:	a902      	add	r1, sp, #8
   b8126:	f7ff ffa1 	bl	b806c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b812a:	a802      	add	r0, sp, #8
   b812c:	f002 f96e 	bl	ba40c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8130:	b1b0      	cbz	r0, b8160 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b8132:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8134:	ad03      	add	r5, sp, #12
   b8136:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b813a:	4b0b      	ldr	r3, [pc, #44]	; (b8168 <_ZN3UDP11beginPacketEPKct+0x74>)
   b813c:	9308      	str	r3, [sp, #32]
   b813e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8140:	ac09      	add	r4, sp, #36	; 0x24
   b8142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8144:	682b      	ldr	r3, [r5, #0]
   b8146:	7023      	strb	r3, [r4, #0]
   b8148:	463a      	mov	r2, r7
   b814a:	a908      	add	r1, sp, #32
   b814c:	4630      	mov	r0, r6
   b814e:	47c0      	blx	r8
   b8150:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b8152:	9801      	ldr	r0, [sp, #4]
   b8154:	f7ff fa2c 	bl	b75b0 <netdb_freeaddrinfo>
}
   b8158:	4620      	mov	r0, r4
   b815a:	b00e      	add	sp, #56	; 0x38
   b815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b8160:	f04f 34ff 	mov.w	r4, #4294967295
   b8164:	e7f5      	b.n	b8152 <_ZN3UDP11beginPacketEPKct+0x5e>
   b8166:	bf00      	nop
   b8168:	000bdca0 	.word	0x000bdca0

000b816c <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b8170:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b8174:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b8178:	b090      	sub	sp, #64	; 0x40
   b817a:	4605      	mov	r5, r0
   b817c:	460e      	mov	r6, r1
   b817e:	4690      	mov	r8, r2
   b8180:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b8182:	db3c      	blt.n	b81fe <_ZN3UDP13receivePacketEPhjm+0x92>
   b8184:	2900      	cmp	r1, #0
   b8186:	d03a      	beq.n	b81fe <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b8188:	f04f 0a1c 	mov.w	sl, #28
   b818c:	af09      	add	r7, sp, #36	; 0x24
   b818e:	4652      	mov	r2, sl
   b8190:	2100      	movs	r1, #0
   b8192:	4638      	mov	r0, r7
   b8194:	f003 f9a6 	bl	bb4e4 <memset>
        socklen_t slen = sizeof(saddr);
   b8198:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b819c:	b1dc      	cbz	r4, b81d6 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b819e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b81a2:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b81a6:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b81aa:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b81ac:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b81ae:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b81b0:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b81b4:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b81b6:	9300      	str	r3, [sp, #0]
   b81b8:	f241 0206 	movw	r2, #4102	; 0x1006
   b81bc:	446b      	add	r3, sp
   b81be:	f640 71ff 	movw	r1, #4095	; 0xfff
   b81c2:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b81c4:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b81c6:	f7ff fbc5 	bl	b7954 <sock_setsockopt>
            if (ret) {
   b81ca:	4604      	mov	r4, r0
   b81cc:	b120      	cbz	r0, b81d8 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b81ce:	4620      	mov	r0, r4
   b81d0:	b010      	add	sp, #64	; 0x40
   b81d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b81d6:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b81d8:	ab03      	add	r3, sp, #12
   b81da:	e9cd 7300 	strd	r7, r3, [sp]
   b81de:	6968      	ldr	r0, [r5, #20]
   b81e0:	4623      	mov	r3, r4
   b81e2:	4642      	mov	r2, r8
   b81e4:	4631      	mov	r1, r6
   b81e6:	f7ff fbc5 	bl	b7974 <sock_recvfrom>
        if (ret >= 0) {
   b81ea:	1e04      	subs	r4, r0, #0
   b81ec:	dbef      	blt.n	b81ce <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b81ee:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b81f2:	f105 011c 	add.w	r1, r5, #28
   b81f6:	4638      	mov	r0, r7
   b81f8:	f7ff ff38 	bl	b806c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b81fc:	e7e7      	b.n	b81ce <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b81fe:	f04f 34ff 	mov.w	r4, #4294967295
   b8202:	e7e4      	b.n	b81ce <_ZN3UDP13receivePacketEPhjm+0x62>

000b8204 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b8204:	b538      	push	{r3, r4, r5, lr}
   b8206:	4605      	mov	r5, r0
   b8208:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b820a:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b820c:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b820e:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b8210:	d110      	bne.n	b8234 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b8212:	f640 231c 	movw	r3, #2588	; 0xa1c
   b8216:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b8218:	f7ff fb14 	bl	b7844 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b821c:	3408      	adds	r4, #8
   b821e:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b8220:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b8224:	3514      	adds	r5, #20
   b8226:	f853 2b04 	ldr.w	r2, [r3], #4
   b822a:	f844 2b04 	str.w	r2, [r4], #4
   b822e:	42ab      	cmp	r3, r5
   b8230:	d1f9      	bne.n	b8226 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b8232:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b8234:	2b04      	cmp	r3, #4
   b8236:	d1fc      	bne.n	b8232 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b8238:	f44f 7304 	mov.w	r3, #528	; 0x210
   b823c:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b823e:	f7ff fb01 	bl	b7844 <inet_htons>
   b8242:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b8244:	6868      	ldr	r0, [r5, #4]
   b8246:	f7ff faed 	bl	b7824 <inet_htonl>
   b824a:	6060      	str	r0, [r4, #4]
}
   b824c:	e7f1      	b.n	b8232 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b824e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b824e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8252:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b8254:	af03      	add	r7, sp, #12
   b8256:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b825a:	4698      	mov	r8, r3
   b825c:	4604      	mov	r4, r0
   b825e:	460d      	mov	r5, r1
   b8260:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b8262:	2100      	movs	r1, #0
   b8264:	464a      	mov	r2, r9
   b8266:	4638      	mov	r0, r7
   b8268:	f003 f93c 	bl	bb4e4 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b826c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b8270:	463a      	mov	r2, r7
   b8272:	4640      	mov	r0, r8
   b8274:	f7ff ffc6 	bl	b8204 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b8278:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b827c:	b153      	cbz	r3, b8294 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b827e:	e9cd 7900 	strd	r7, r9, [sp]
   b8282:	6960      	ldr	r0, [r4, #20]
   b8284:	2300      	movs	r3, #0
   b8286:	4632      	mov	r2, r6
   b8288:	4629      	mov	r1, r5
   b828a:	f7ff fb7b 	bl	b7984 <sock_sendto>
}
   b828e:	b00b      	add	sp, #44	; 0x2c
   b8290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b8294:	f04f 30ff 	mov.w	r0, #4294967295
   b8298:	e7f9      	b.n	b828e <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b829c <_ZN3UDPC1Ev>:
UDP::UDP()
   b829c:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b829e:	2500      	movs	r5, #0
   b82a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b82a4:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b82a8:	4b0b      	ldr	r3, [pc, #44]	; (b82d8 <_ZN3UDPC1Ev+0x3c>)
   b82aa:	f103 0208 	add.w	r2, r3, #8
   b82ae:	336c      	adds	r3, #108	; 0x6c
   b82b0:	6103      	str	r3, [r0, #16]
   b82b2:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b82b6:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b82b8:	6002      	str	r2, [r0, #0]
   b82ba:	6143      	str	r3, [r0, #20]
   b82bc:	301c      	adds	r0, #28
   b82be:	f002 f885 	bl	ba3cc <_ZN9IPAddressC1Ev>
   b82c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   b82c6:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b82ca:	86e5      	strh	r5, [r4, #54]	; 0x36
   b82cc:	8725      	strh	r5, [r4, #56]	; 0x38
   b82ce:	63e5      	str	r5, [r4, #60]	; 0x3c
   b82d0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b82d4:	4620      	mov	r0, r4
   b82d6:	bd38      	pop	{r3, r4, r5, pc}
   b82d8:	000bda24 	.word	0x000bda24

000b82dc <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b82dc:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b82de:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b82e2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b82e4:	b123      	cbz	r3, b82f0 <_ZN3UDP13releaseBufferEv+0x14>
   b82e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b82e8:	b110      	cbz	r0, b82f0 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b82ea:	2101      	movs	r1, #1
   b82ec:	f7fc fcab 	bl	b4c46 <_ZdlPvj>
    _buffer = NULL;
   b82f0:	2300      	movs	r3, #0
   b82f2:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b82f4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b82f8:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b82fa:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b82fc:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b82fe:	bd10      	pop	{r4, pc}

000b8300 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b8300:	b570      	push	{r4, r5, r6, lr}
   b8302:	4604      	mov	r4, r0
   b8304:	4616      	mov	r6, r2
   b8306:	460d      	mov	r5, r1
    releaseBuffer();
   b8308:	f7ff ffe8 	bl	b82dc <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b830c:	2300      	movs	r3, #0
    _buffer = buffer;
   b830e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b8310:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b8312:	b12e      	cbz	r6, b8320 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b8314:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b8316:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b8318:	3800      	subs	r0, #0
   b831a:	bf18      	it	ne
   b831c:	2001      	movne	r0, #1
   b831e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b8320:	2d00      	cmp	r5, #0
   b8322:	d0f8      	beq.n	b8316 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b8324:	4628      	mov	r0, r5
   b8326:	f7fc fc8a 	bl	b4c3e <_Znaj>
        _buffer_allocated = true;
   b832a:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b832c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b832e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b8332:	2800      	cmp	r0, #0
   b8334:	d0ef      	beq.n	b8316 <_ZN3UDP9setBufferEjPh+0x16>
   b8336:	e7ed      	b.n	b8314 <_ZN3UDP9setBufferEjPh+0x14>

000b8338 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b8338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b833a:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b833c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b833e:	4605      	mov	r5, r0
   b8340:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b8342:	b91a      	cbnz	r2, b834c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b8344:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b8346:	b109      	cbz	r1, b834c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b8348:	f7ff ffda 	bl	b8300 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b834c:	3404      	adds	r4, #4
   b834e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8350:	f105 0620 	add.w	r6, r5, #32
   b8354:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b8356:	6823      	ldr	r3, [r4, #0]
   b8358:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b835a:	2300      	movs	r3, #0
}
   b835c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b835e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b8360:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b8362:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b8364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8366 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b8366:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b8368:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b836a:	4604      	mov	r4, r0
   b836c:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b836e:	b92a      	cbnz	r2, b837c <_ZN3UDP11parsePacketEm+0x16>
   b8370:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b8372:	b119      	cbz	r1, b837c <_ZN3UDP11parsePacketEm+0x16>
   b8374:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b8376:	f7ff ffc3 	bl	b8300 <_ZN3UDP9setBufferEjPh>
   b837a:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b837c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b837e:	2200      	movs	r2, #0
   b8380:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b8382:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b8384:	b141      	cbz	r1, b8398 <_ZN3UDP11parsePacketEm+0x32>
   b8386:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b8388:	b132      	cbz	r2, b8398 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b838a:	6820      	ldr	r0, [r4, #0]
   b838c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b838e:	4620      	mov	r0, r4
   b8390:	47a8      	blx	r5
        if (result > 0) {
   b8392:	2800      	cmp	r0, #0
            _total = result;
   b8394:	bfc8      	it	gt
   b8396:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b8398:	6823      	ldr	r3, [r4, #0]
   b839a:	691b      	ldr	r3, [r3, #16]
   b839c:	4620      	mov	r0, r4
}
   b839e:	b003      	add	sp, #12
   b83a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b83a4:	4718      	bx	r3
	...

000b83a8 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b83a8:	b510      	push	{r4, lr}
   b83aa:	4b07      	ldr	r3, [pc, #28]	; (b83c8 <_ZN3UDPD1Ev+0x20>)
   b83ac:	f103 0208 	add.w	r2, r3, #8
   b83b0:	336c      	adds	r3, #108	; 0x6c
   b83b2:	4604      	mov	r4, r0
   b83b4:	6002      	str	r2, [r0, #0]
   b83b6:	6103      	str	r3, [r0, #16]
   b83b8:	f7ff fddc 	bl	b7f74 <_ZN3UDP4stopEv>
   b83bc:	4620      	mov	r0, r4
   b83be:	f7ff ff8d 	bl	b82dc <_ZN3UDP13releaseBufferEv>
   b83c2:	4620      	mov	r0, r4
   b83c4:	bd10      	pop	{r4, pc}
   b83c6:	bf00      	nop
   b83c8:	000bda24 	.word	0x000bda24

000b83cc <_ZN3UDPD0Ev>:
   b83cc:	b510      	push	{r4, lr}
   b83ce:	4604      	mov	r4, r0
   b83d0:	f7ff ffea 	bl	b83a8 <_ZN3UDPD1Ev>
   b83d4:	4620      	mov	r0, r4
   b83d6:	214c      	movs	r1, #76	; 0x4c
   b83d8:	f7fc fc35 	bl	b4c46 <_ZdlPvj>
   b83dc:	4620      	mov	r0, r4
   b83de:	bd10      	pop	{r4, pc}

000b83e0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b83e0:	b510      	push	{r4, lr}
   b83e2:	4604      	mov	r4, r0
{
	free(buffer);
   b83e4:	6800      	ldr	r0, [r0, #0]
   b83e6:	f7ff fc19 	bl	b7c1c <free>
}
   b83ea:	4620      	mov	r0, r4
   b83ec:	bd10      	pop	{r4, pc}

000b83ee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b83ee:	b510      	push	{r4, lr}
   b83f0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b83f2:	6800      	ldr	r0, [r0, #0]
   b83f4:	b108      	cbz	r0, b83fa <_ZN6String10invalidateEv+0xc>
   b83f6:	f7ff fc11 	bl	b7c1c <free>
	buffer = NULL;
   b83fa:	2300      	movs	r3, #0
	capacity = len = 0;
   b83fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8400:	6023      	str	r3, [r4, #0]
}
   b8402:	bd10      	pop	{r4, pc}

000b8404 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8404:	b538      	push	{r3, r4, r5, lr}
   b8406:	4604      	mov	r4, r0
   b8408:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b840a:	6800      	ldr	r0, [r0, #0]
   b840c:	3101      	adds	r1, #1
   b840e:	f7ff fc0d 	bl	b7c2c <realloc>
	if (newbuffer) {
   b8412:	b110      	cbz	r0, b841a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8414:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8418:	2001      	movs	r0, #1
	}
	return 0;
}
   b841a:	bd38      	pop	{r3, r4, r5, pc}

000b841c <_ZN6String7reserveEj>:
{
   b841c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b841e:	6803      	ldr	r3, [r0, #0]
{
   b8420:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8422:	b123      	cbz	r3, b842e <_ZN6String7reserveEj+0x12>
   b8424:	6843      	ldr	r3, [r0, #4]
   b8426:	428b      	cmp	r3, r1
   b8428:	d301      	bcc.n	b842e <_ZN6String7reserveEj+0x12>
   b842a:	2001      	movs	r0, #1
}
   b842c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b842e:	4620      	mov	r0, r4
   b8430:	f7ff ffe8 	bl	b8404 <_ZN6String12changeBufferEj>
   b8434:	2800      	cmp	r0, #0
   b8436:	d0f9      	beq.n	b842c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8438:	68a3      	ldr	r3, [r4, #8]
   b843a:	2b00      	cmp	r3, #0
   b843c:	d1f5      	bne.n	b842a <_ZN6String7reserveEj+0xe>
   b843e:	6822      	ldr	r2, [r4, #0]
   b8440:	7013      	strb	r3, [r2, #0]
   b8442:	e7f2      	b.n	b842a <_ZN6String7reserveEj+0xe>

000b8444 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8444:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8446:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8448:	4611      	mov	r1, r2
   b844a:	9201      	str	r2, [sp, #4]
{
   b844c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b844e:	f7ff ffe5 	bl	b841c <_ZN6String7reserveEj>
   b8452:	9a01      	ldr	r2, [sp, #4]
   b8454:	b928      	cbnz	r0, b8462 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8456:	4620      	mov	r0, r4
   b8458:	f7ff ffc9 	bl	b83ee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b845c:	4620      	mov	r0, r4
   b845e:	b003      	add	sp, #12
   b8460:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8462:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8464:	4629      	mov	r1, r5
   b8466:	6820      	ldr	r0, [r4, #0]
   b8468:	f003 f814 	bl	bb494 <memcpy>
	buffer[len] = 0;
   b846c:	6822      	ldr	r2, [r4, #0]
   b846e:	68a3      	ldr	r3, [r4, #8]
   b8470:	2100      	movs	r1, #0
   b8472:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8474:	e7f2      	b.n	b845c <_ZN6String4copyEPKcj+0x18>

000b8476 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8476:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8478:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b847a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b847e:	4604      	mov	r4, r0
	len = 0;
   b8480:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8482:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8484:	b141      	cbz	r1, b8498 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8486:	4608      	mov	r0, r1
   b8488:	9101      	str	r1, [sp, #4]
   b848a:	f7fc fb7b 	bl	b4b84 <strlen>
   b848e:	9901      	ldr	r1, [sp, #4]
   b8490:	4602      	mov	r2, r0
   b8492:	4620      	mov	r0, r4
   b8494:	f7ff ffd6 	bl	b8444 <_ZN6String4copyEPKcj>
}
   b8498:	4620      	mov	r0, r4
   b849a:	b002      	add	sp, #8
   b849c:	bd10      	pop	{r4, pc}

000b849e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b849e:	b538      	push	{r3, r4, r5, lr}
   b84a0:	4605      	mov	r5, r0
	if (buffer) {
   b84a2:	6800      	ldr	r0, [r0, #0]
{
   b84a4:	460c      	mov	r4, r1
	if (buffer) {
   b84a6:	b168      	cbz	r0, b84c4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b84a8:	686a      	ldr	r2, [r5, #4]
   b84aa:	688b      	ldr	r3, [r1, #8]
   b84ac:	429a      	cmp	r2, r3
   b84ae:	d307      	bcc.n	b84c0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b84b0:	6809      	ldr	r1, [r1, #0]
   b84b2:	f003 f84d 	bl	bb550 <strcpy>
			len = rhs.len;
   b84b6:	68a3      	ldr	r3, [r4, #8]
   b84b8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b84ba:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b84bc:	60a3      	str	r3, [r4, #8]
}
   b84be:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b84c0:	f7ff fbac 	bl	b7c1c <free>
	buffer = rhs.buffer;
   b84c4:	6823      	ldr	r3, [r4, #0]
   b84c6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b84c8:	6863      	ldr	r3, [r4, #4]
   b84ca:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b84cc:	68a3      	ldr	r3, [r4, #8]
   b84ce:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b84d0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b84d2:	e9c4 3300 	strd	r3, r3, [r4]
   b84d6:	e7f1      	b.n	b84bc <_ZN6String4moveERS_+0x1e>

000b84d8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b84d8:	4288      	cmp	r0, r1
{
   b84da:	b510      	push	{r4, lr}
   b84dc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b84de:	d005      	beq.n	b84ec <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b84e0:	680b      	ldr	r3, [r1, #0]
   b84e2:	b12b      	cbz	r3, b84f0 <_ZN6StringaSERKS_+0x18>
   b84e4:	688a      	ldr	r2, [r1, #8]
   b84e6:	4619      	mov	r1, r3
   b84e8:	f7ff ffac 	bl	b8444 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b84ec:	4620      	mov	r0, r4
   b84ee:	bd10      	pop	{r4, pc}
	else invalidate();
   b84f0:	f7ff ff7d 	bl	b83ee <_ZN6String10invalidateEv>
   b84f4:	e7fa      	b.n	b84ec <_ZN6StringaSERKS_+0x14>

000b84f6 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b84f6:	b510      	push	{r4, lr}
	buffer = NULL;
   b84f8:	2300      	movs	r3, #0
String::String(const String &value)
   b84fa:	4604      	mov	r4, r0
	capacity = 0;
   b84fc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8500:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8502:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8504:	f7ff ffe8 	bl	b84d8 <_ZN6StringaSERKS_>
}
   b8508:	4620      	mov	r0, r4
   b850a:	bd10      	pop	{r4, pc}

000b850c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b850c:	4288      	cmp	r0, r1
{
   b850e:	b510      	push	{r4, lr}
   b8510:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b8512:	d001      	beq.n	b8518 <_ZN6StringaSEOS_+0xc>
   b8514:	f7ff ffc3 	bl	b849e <_ZN6String4moveERS_>
	return *this;
}
   b8518:	4620      	mov	r0, r4
   b851a:	bd10      	pop	{r4, pc}

000b851c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b851c:	b513      	push	{r0, r1, r4, lr}
   b851e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8520:	b159      	cbz	r1, b853a <_ZN6StringaSEPKc+0x1e>
   b8522:	4608      	mov	r0, r1
   b8524:	9101      	str	r1, [sp, #4]
   b8526:	f7fc fb2d 	bl	b4b84 <strlen>
   b852a:	9901      	ldr	r1, [sp, #4]
   b852c:	4602      	mov	r2, r0
   b852e:	4620      	mov	r0, r4
   b8530:	f7ff ff88 	bl	b8444 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8534:	4620      	mov	r0, r4
   b8536:	b002      	add	sp, #8
   b8538:	bd10      	pop	{r4, pc}
	else invalidate();
   b853a:	f7ff ff58 	bl	b83ee <_ZN6String10invalidateEv>
   b853e:	e7f9      	b.n	b8534 <_ZN6StringaSEPKc+0x18>

000b8540 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b8540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8542:	4604      	mov	r4, r0
	buffer = NULL;
   b8544:	2300      	movs	r3, #0
	capacity = 0;
   b8546:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b854a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b854c:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b854e:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b8550:	a901      	add	r1, sp, #4
   b8552:	f7ff fc53 	bl	b7dfc <utoa>
	*this = buf;
   b8556:	a901      	add	r1, sp, #4
   b8558:	4620      	mov	r0, r4
   b855a:	f7ff ffdf 	bl	b851c <_ZN6StringaSEPKc>
}
   b855e:	4620      	mov	r0, r4
   b8560:	b004      	add	sp, #16
   b8562:	bd10      	pop	{r4, pc}

000b8564 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8564:	b570      	push	{r4, r5, r6, lr}
   b8566:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8568:	460e      	mov	r6, r1
   b856a:	b909      	cbnz	r1, b8570 <_ZN6String6concatEPKcj+0xc>
   b856c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b856e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8570:	b16a      	cbz	r2, b858e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8572:	6884      	ldr	r4, [r0, #8]
   b8574:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8576:	4621      	mov	r1, r4
   b8578:	f7ff ff50 	bl	b841c <_ZN6String7reserveEj>
   b857c:	2800      	cmp	r0, #0
   b857e:	d0f5      	beq.n	b856c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8580:	6828      	ldr	r0, [r5, #0]
   b8582:	68ab      	ldr	r3, [r5, #8]
   b8584:	4631      	mov	r1, r6
   b8586:	4418      	add	r0, r3
   b8588:	f002 ffe2 	bl	bb550 <strcpy>
	len = newlen;
   b858c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b858e:	2001      	movs	r0, #1
   b8590:	e7ed      	b.n	b856e <_ZN6String6concatEPKcj+0xa>

000b8592 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8592:	688a      	ldr	r2, [r1, #8]
   b8594:	6809      	ldr	r1, [r1, #0]
   b8596:	f7ff bfe5 	b.w	b8564 <_ZN6String6concatEPKcj>

000b859a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b859a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b859c:	688a      	ldr	r2, [r1, #8]
   b859e:	6809      	ldr	r1, [r1, #0]
{
   b85a0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b85a2:	f7ff ffdf 	bl	b8564 <_ZN6String6concatEPKcj>
   b85a6:	b910      	cbnz	r0, b85ae <_ZplRK15StringSumHelperRK6String+0x14>
   b85a8:	4620      	mov	r0, r4
   b85aa:	f7ff ff20 	bl	b83ee <_ZN6String10invalidateEv>
	return a;
}
   b85ae:	4620      	mov	r0, r4
   b85b0:	bd10      	pop	{r4, pc}

000b85b2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b85b2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b85b4:	6882      	ldr	r2, [r0, #8]
   b85b6:	b93a      	cbnz	r2, b85c8 <_ZNK6String6equalsEPKc+0x16>
   b85b8:	b121      	cbz	r1, b85c4 <_ZNK6String6equalsEPKc+0x12>
   b85ba:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b85bc:	fab0 f080 	clz	r0, r0
   b85c0:	0940      	lsrs	r0, r0, #5
   b85c2:	e000      	b.n	b85c6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b85c4:	2001      	movs	r0, #1
}
   b85c6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b85c8:	6800      	ldr	r0, [r0, #0]
   b85ca:	b909      	cbnz	r1, b85d0 <_ZNK6String6equalsEPKc+0x1e>
   b85cc:	7800      	ldrb	r0, [r0, #0]
   b85ce:	e7f5      	b.n	b85bc <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b85d0:	f7fc face 	bl	b4b70 <strcmp>
   b85d4:	e7f2      	b.n	b85bc <_ZNK6String6equalsEPKc+0xa>
	...

000b85d8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b85d8:	b40e      	push	{r1, r2, r3}
   b85da:	b570      	push	{r4, r5, r6, lr}
   b85dc:	b087      	sub	sp, #28
   b85de:	ad0b      	add	r5, sp, #44	; 0x2c
   b85e0:	4604      	mov	r4, r0
   b85e2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b85e6:	9201      	str	r2, [sp, #4]
   b85e8:	462b      	mov	r3, r5
   b85ea:	2105      	movs	r1, #5
   b85ec:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b85ee:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b85f0:	f7ff fb3c 	bl	b7c6c <vsnprintf>
    va_end(marker);

    String result;
   b85f4:	490b      	ldr	r1, [pc, #44]	; (b8624 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b85f6:	4606      	mov	r6, r0
    String result;
   b85f8:	4620      	mov	r0, r4
   b85fa:	f7ff ff3c 	bl	b8476 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b85fe:	4631      	mov	r1, r6
   b8600:	4620      	mov	r0, r4
   b8602:	f7ff ff0b 	bl	b841c <_ZN6String7reserveEj>
    if (result.buffer) {
   b8606:	6820      	ldr	r0, [r4, #0]
   b8608:	b130      	cbz	r0, b8618 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b860a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b860c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b860e:	462b      	mov	r3, r5
   b8610:	1c71      	adds	r1, r6, #1
   b8612:	f7ff fb2b 	bl	b7c6c <vsnprintf>
        va_end(marker);
        result.len = n;
   b8616:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b8618:	4620      	mov	r0, r4
   b861a:	b007      	add	sp, #28
   b861c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8620:	b003      	add	sp, #12
   b8622:	4770      	bx	lr
   b8624:	000bdfcc 	.word	0x000bdfcc

000b8628 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8628:	4770      	bx	lr

000b862a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b862a:	4770      	bx	lr

000b862c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b862c:	4770      	bx	lr

000b862e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b862e:	4770      	bx	lr

000b8630 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8630:	4b06      	ldr	r3, [pc, #24]	; (b864c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8632:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8634:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8636:	f100 040c 	add.w	r4, r0, #12
	    ||
   b863a:	d005      	beq.n	b8648 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b863c:	4608      	mov	r0, r1
   b863e:	f002 fb3b 	bl	bacb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8642:	2800      	cmp	r0, #0
   b8644:	bf08      	it	eq
   b8646:	2400      	moveq	r4, #0
      }
   b8648:	4620      	mov	r0, r4
   b864a:	bd10      	pop	{r4, pc}
   b864c:	000bdc34 	.word	0x000bdc34

000b8650 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8650:	4b06      	ldr	r3, [pc, #24]	; (b866c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8652:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8654:	b510      	push	{r4, lr}
   b8656:	f100 040c 	add.w	r4, r0, #12
	    ||
   b865a:	d005      	beq.n	b8668 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b865c:	4608      	mov	r0, r1
   b865e:	f002 fb2b 	bl	bacb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8662:	2800      	cmp	r0, #0
   b8664:	bf08      	it	eq
   b8666:	2400      	moveq	r4, #0
      }
   b8668:	4620      	mov	r0, r4
   b866a:	bd10      	pop	{r4, pc}
   b866c:	000bdc34 	.word	0x000bdc34

000b8670 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8670:	4b06      	ldr	r3, [pc, #24]	; (b868c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8672:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8674:	b510      	push	{r4, lr}
   b8676:	f100 040c 	add.w	r4, r0, #12
	    ||
   b867a:	d005      	beq.n	b8688 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b867c:	4608      	mov	r0, r1
   b867e:	f002 fb1b 	bl	bacb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8682:	2800      	cmp	r0, #0
   b8684:	bf08      	it	eq
   b8686:	2400      	moveq	r4, #0
      }
   b8688:	4620      	mov	r0, r4
   b868a:	bd10      	pop	{r4, pc}
   b868c:	000bdc34 	.word	0x000bdc34

000b8690 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8690:	b510      	push	{r4, lr}
   b8692:	2168      	movs	r1, #104	; 0x68
   b8694:	4604      	mov	r4, r0
   b8696:	f7fc fad6 	bl	b4c46 <_ZdlPvj>
   b869a:	4620      	mov	r0, r4
   b869c:	bd10      	pop	{r4, pc}

000b869e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b869e:	b510      	push	{r4, lr}
   b86a0:	2128      	movs	r1, #40	; 0x28
   b86a2:	4604      	mov	r4, r0
   b86a4:	f7fc facf 	bl	b4c46 <_ZdlPvj>
   b86a8:	4620      	mov	r0, r4
   b86aa:	bd10      	pop	{r4, pc}

000b86ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b86ac:	b510      	push	{r4, lr}
   b86ae:	2130      	movs	r1, #48	; 0x30
   b86b0:	4604      	mov	r4, r0
   b86b2:	f7fc fac8 	bl	b4c46 <_ZdlPvj>
   b86b6:	4620      	mov	r0, r4
   b86b8:	bd10      	pop	{r4, pc}

000b86ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b86ba:	2168      	movs	r1, #104	; 0x68
   b86bc:	f7fc bac3 	b.w	b4c46 <_ZdlPvj>

000b86c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b86c0:	2128      	movs	r1, #40	; 0x28
   b86c2:	f7fc bac0 	b.w	b4c46 <_ZdlPvj>

000b86c6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b86c6:	2130      	movs	r1, #48	; 0x30
   b86c8:	f7fc babd 	b.w	b4c46 <_ZdlPvj>

000b86cc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b86cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b86ce:	2500      	movs	r5, #0
   b86d0:	1cec      	adds	r4, r5, #3
   b86d2:	428c      	cmp	r4, r1
   b86d4:	d80d      	bhi.n	b86f2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b86d6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b86d8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b86da:	5d87      	ldrb	r7, [r0, r6]
   b86dc:	4297      	cmp	r7, r2
   b86de:	d105      	bne.n	b86ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b86e0:	4426      	add	r6, r4
   b86e2:	42b1      	cmp	r1, r6
   b86e4:	d305      	bcc.n	b86f2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b86e6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b86e8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b86ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b86ec:	3401      	adds	r4, #1
   b86ee:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b86f0:	e7ee      	b.n	b86d0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b86f2:	2000      	movs	r0, #0
   b86f4:	e7f9      	b.n	b86ea <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b86f8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b86f8:	4a02      	ldr	r2, [pc, #8]	; (b8704 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b86fa:	4903      	ldr	r1, [pc, #12]	; (b8708 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b86fc:	200a      	movs	r0, #10
   b86fe:	f7ff b991 	b.w	b7a24 <panic_>
   b8702:	bf00      	nop
   b8704:	000b7621 	.word	0x000b7621
   b8708:	000bda94 	.word	0x000bda94

000b870c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b870c:	b430      	push	{r4, r5}
   b870e:	460d      	mov	r5, r1
   b8710:	4611      	mov	r1, r2
   b8712:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b8714:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b8716:	6809      	ldr	r1, [r1, #0]
   b8718:	6828      	ldr	r0, [r5, #0]
   b871a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b871e:	46a4      	mov	ip, r4
      }
   b8720:	bc30      	pop	{r4, r5}
   b8722:	4760      	bx	ip

000b8724 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b8724:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8726:	b538      	push	{r3, r4, r5, lr}
   b8728:	4604      	mov	r4, r0
	switch (__op)
   b872a:	d102      	bne.n	b8732 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b872c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b872e:	6023      	str	r3, [r4, #0]
	}
   b8730:	e003      	b.n	b873a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b8732:	2a02      	cmp	r2, #2
   b8734:	d003      	beq.n	b873e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b8736:	2a03      	cmp	r2, #3
   b8738:	d00d      	beq.n	b8756 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b873a:	2000      	movs	r0, #0
   b873c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b873e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8740:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8742:	f7fc fa7a 	bl	b4c3a <_Znwj>
   b8746:	4603      	mov	r3, r0
   b8748:	2800      	cmp	r0, #0
   b874a:	d0f0      	beq.n	b872e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b874c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8750:	e883 0003 	stmia.w	r3, {r0, r1}
   b8754:	e7eb      	b.n	b872e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8756:	6800      	ldr	r0, [r0, #0]
   b8758:	2800      	cmp	r0, #0
   b875a:	d0ee      	beq.n	b873a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b875c:	2108      	movs	r1, #8
   b875e:	f7fc fa72 	bl	b4c46 <_ZdlPvj>
   b8762:	e7ea      	b.n	b873a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8764 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8764:	b510      	push	{r4, lr}
   b8766:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b8768:	3058      	adds	r0, #88	; 0x58
   b876a:	f7fd fe2a 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b876e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8776:	f7ff be33 	b.w	b83e0 <_ZN6StringD1Ev>

000b877a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b877a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b877e:	b2da      	uxtb	r2, r3
   b8780:	2a09      	cmp	r2, #9
   b8782:	d801      	bhi.n	b8788 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b8784:	4618      	mov	r0, r3
   b8786:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b8788:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b878c:	2b05      	cmp	r3, #5
   b878e:	d801      	bhi.n	b8794 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b8790:	3857      	subs	r0, #87	; 0x57
   b8792:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b8794:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8798:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b879a:	bf94      	ite	ls
   b879c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b879e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b87a2:	4770      	bx	lr

000b87a4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b87a4:	b510      	push	{r4, lr}
            locked_(false) {
   b87a6:	2300      	movs	r3, #0
   b87a8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b87aa:	4b04      	ldr	r3, [pc, #16]	; (b87bc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b87ac:	4604      	mov	r4, r0
   b87ae:	6818      	ldr	r0, [r3, #0]
   b87b0:	f7ff f818 	bl	b77e4 <os_mutex_recursive_lock>
        locked_ = true;
   b87b4:	2301      	movs	r3, #1
   b87b6:	7023      	strb	r3, [r4, #0]
    }
   b87b8:	4620      	mov	r0, r4
   b87ba:	bd10      	pop	{r4, pc}
   b87bc:	2003e600 	.word	0x2003e600

000b87c0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b87c0:	b510      	push	{r4, lr}
        if (locked_) {
   b87c2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b87c4:	4604      	mov	r4, r0
        if (locked_) {
   b87c6:	b11b      	cbz	r3, b87d0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b87c8:	4b02      	ldr	r3, [pc, #8]	; (b87d4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b87ca:	6818      	ldr	r0, [r3, #0]
   b87cc:	f7ff f812 	bl	b77f4 <os_mutex_recursive_unlock>
    }
   b87d0:	4620      	mov	r0, r4
   b87d2:	bd10      	pop	{r4, pc}
   b87d4:	2003e600 	.word	0x2003e600

000b87d8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b87d8:	b082      	sub	sp, #8
   b87da:	4603      	mov	r3, r0
    address_ = addr;
   b87dc:	6808      	ldr	r0, [r1, #0]
   b87de:	6849      	ldr	r1, [r1, #4]
   b87e0:	466a      	mov	r2, sp
   b87e2:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b87e4:	466a      	mov	r2, sp
   b87e6:	ca03      	ldmia	r2!, {r0, r1}
   b87e8:	6018      	str	r0, [r3, #0]
}
   b87ea:	4618      	mov	r0, r3
    address_ = addr.address_;
   b87ec:	6059      	str	r1, [r3, #4]
}
   b87ee:	b002      	add	sp, #8
   b87f0:	4770      	bx	lr

000b87f2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b87f2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b87f4:	7982      	ldrb	r2, [r0, #6]
   b87f6:	798b      	ldrb	r3, [r1, #6]
   b87f8:	429a      	cmp	r2, r3
   b87fa:	d106      	bne.n	b880a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b87fc:	2206      	movs	r2, #6
   b87fe:	f002 fe39 	bl	bb474 <memcmp>
   b8802:	fab0 f080 	clz	r0, r0
   b8806:	0940      	lsrs	r0, r0, #5
}
   b8808:	bd08      	pop	{r3, pc}
    return false;
   b880a:	2000      	movs	r0, #0
   b880c:	e7fc      	b.n	b8808 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b880e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b880e:	f04f 33ff 	mov.w	r3, #4294967295
   b8812:	6003      	str	r3, [r0, #0]
   b8814:	8083      	strh	r3, [r0, #4]
}
   b8816:	2000      	movs	r0, #0
   b8818:	4770      	bx	lr

000b881a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b881a:	b508      	push	{r3, lr}
   b881c:	4602      	mov	r2, r0
        : address_{} {
   b881e:	2100      	movs	r1, #0
   b8820:	6001      	str	r1, [r0, #0]
   b8822:	6041      	str	r1, [r0, #4]
    clear();
   b8824:	f7ff fff3 	bl	b880e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8828:	7191      	strb	r1, [r2, #6]
}
   b882a:	4610      	mov	r0, r2
   b882c:	bd08      	pop	{r3, pc}
	...

000b8830 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b8830:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b8832:	2301      	movs	r3, #1
   b8834:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8836:	4b05      	ldr	r3, [pc, #20]	; (b884c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8838:	4602      	mov	r2, r0
   b883a:	f103 0110 	add.w	r1, r3, #16
   b883e:	f853 4b04 	ldr.w	r4, [r3], #4
   b8842:	f842 4b04 	str.w	r4, [r2], #4
   b8846:	428b      	cmp	r3, r1
   b8848:	d1f9      	bne.n	b883e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b884a:	bd10      	pop	{r4, pc}
   b884c:	000bd5be 	.word	0x000bd5be

000b8850 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8850:	b510      	push	{r4, lr}
    if (uuid128) {
   b8852:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8854:	4604      	mov	r4, r0
    if (uuid128) {
   b8856:	b1b1      	cbz	r1, b8886 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8858:	2a01      	cmp	r2, #1
   b885a:	f101 0210 	add.w	r2, r1, #16
   b885e:	d10a      	bne.n	b8876 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b8860:	4601      	mov	r1, r0
   b8862:	f853 0b04 	ldr.w	r0, [r3], #4
   b8866:	f841 0b04 	str.w	r0, [r1], #4
   b886a:	4293      	cmp	r3, r2
   b886c:	d1f9      	bne.n	b8862 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b886e:	2301      	movs	r3, #1
   b8870:	6123      	str	r3, [r4, #16]
}
   b8872:	4620      	mov	r0, r4
   b8874:	bd10      	pop	{r4, pc}
   b8876:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8878:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b887c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b8880:	429a      	cmp	r2, r3
   b8882:	d1f9      	bne.n	b8878 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8884:	e7f3      	b.n	b886e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8886:	2210      	movs	r2, #16
   b8888:	f002 fe2c 	bl	bb4e4 <memset>
   b888c:	e7f1      	b.n	b8872 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b888e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b888e:	b538      	push	{r3, r4, r5, lr}
   b8890:	4604      	mov	r4, r0
   b8892:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b8894:	461a      	mov	r2, r3
   b8896:	f7ff ffdb 	bl	b8850 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b889a:	81a5      	strh	r5, [r4, #12]
}
   b889c:	4620      	mov	r0, r4
   b889e:	bd38      	pop	{r3, r4, r5, pc}

000b88a0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b88a0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b88a2:	6902      	ldr	r2, [r0, #16]
   b88a4:	b922      	cbnz	r2, b88b0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b88a6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b88a8:	3800      	subs	r0, #0
   b88aa:	bf18      	it	ne
   b88ac:	2001      	movne	r0, #1
}
   b88ae:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b88b0:	4902      	ldr	r1, [pc, #8]	; (b88bc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b88b2:	2210      	movs	r2, #16
   b88b4:	f002 fdde 	bl	bb474 <memcmp>
   b88b8:	e7f6      	b.n	b88a8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b88ba:	bf00      	nop
   b88bc:	000bdc4c 	.word	0x000bdc4c

000b88c0 <_ZNK8particle7BleUuid4typeEv>:
}
   b88c0:	6900      	ldr	r0, [r0, #16]
   b88c2:	4770      	bx	lr

000b88c4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b88c4:	b538      	push	{r3, r4, r5, lr}
   b88c6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b88c8:	2214      	movs	r2, #20
   b88ca:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b88cc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b88ce:	f002 fe09 	bl	bb4e4 <memset>
    if (type_ == BleUuidType::SHORT) {
   b88d2:	6923      	ldr	r3, [r4, #16]
   b88d4:	b91b      	cbnz	r3, b88de <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b88d6:	89a3      	ldrh	r3, [r4, #12]
   b88d8:	802b      	strh	r3, [r5, #0]
}
   b88da:	4628      	mov	r0, r5
   b88dc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b88de:	2301      	movs	r3, #1
   b88e0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b88e2:	4621      	mov	r1, r4
   b88e4:	462b      	mov	r3, r5
   b88e6:	f104 0210 	add.w	r2, r4, #16
   b88ea:	f851 0b04 	ldr.w	r0, [r1], #4
   b88ee:	f843 0b04 	str.w	r0, [r3], #4
   b88f2:	4291      	cmp	r1, r2
   b88f4:	d1f9      	bne.n	b88ea <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b88f6:	e7f0      	b.n	b88da <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b88f8 <_ZNK8particle7BleUuid7shortedEv>:
}
   b88f8:	8980      	ldrh	r0, [r0, #12]
   b88fa:	4770      	bx	lr

000b88fc <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b88fc:	4770      	bx	lr

000b88fe <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b88fe:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8900:	6902      	ldr	r2, [r0, #16]
   b8902:	690b      	ldr	r3, [r1, #16]
   b8904:	429a      	cmp	r2, r3
   b8906:	d106      	bne.n	b8916 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8908:	2210      	movs	r2, #16
   b890a:	f002 fdb3 	bl	bb474 <memcmp>
   b890e:	fab0 f080 	clz	r0, r0
   b8912:	0940      	lsrs	r0, r0, #5
}
   b8914:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8916:	2000      	movs	r0, #0
   b8918:	e7fc      	b.n	b8914 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b891c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b891c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b891e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b8922:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8924:	4b34      	ldr	r3, [pc, #208]	; (b89f8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b8926:	460c      	mov	r4, r1
   b8928:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b892a:	4602      	mov	r2, r0
   b892c:	f103 0110 	add.w	r1, r3, #16
   b8930:	f853 0b04 	ldr.w	r0, [r3], #4
   b8934:	f842 0b04 	str.w	r0, [r2], #4
   b8938:	428b      	cmp	r3, r1
   b893a:	d1f9      	bne.n	b8930 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b893c:	b344      	cbz	r4, b8990 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b893e:	2124      	movs	r1, #36	; 0x24
   b8940:	4620      	mov	r0, r4
   b8942:	f002 fe3e 	bl	bb5c2 <strnlen>
   b8946:	2804      	cmp	r0, #4
   b8948:	f04f 0500 	mov.w	r5, #0
   b894c:	d123      	bne.n	b8996 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b894e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b8952:	af01      	add	r7, sp, #4
   b8954:	1ca5      	adds	r5, r4, #2
   b8956:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8958:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b895c:	f7ff ff0d 	bl	b877a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8960:	f1b0 0800 	subs.w	r8, r0, #0
   b8964:	db12      	blt.n	b898c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b8966:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b896a:	f7ff ff06 	bl	b877a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b896e:	2800      	cmp	r0, #0
   b8970:	db0c      	blt.n	b898c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b8972:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8974:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8978:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b897a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b897e:	d1eb      	bne.n	b8958 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8980:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8984:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8986:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b898a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b898c:	2300      	movs	r3, #0
   b898e:	6133      	str	r3, [r6, #16]
}
   b8990:	b002      	add	sp, #8
   b8992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8996:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b899a:	2124      	movs	r1, #36	; 0x24
   b899c:	4620      	mov	r0, r4
   b899e:	f002 fe10 	bl	bb5c2 <strnlen>
   b89a2:	42a8      	cmp	r0, r5
   b89a4:	d807      	bhi.n	b89b6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b89a6:	4642      	mov	r2, r8
   b89a8:	2100      	movs	r1, #0
   b89aa:	4630      	mov	r0, r6
}
   b89ac:	b002      	add	sp, #8
   b89ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b89b2:	f002 bd97 	b.w	bb4e4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b89b6:	f1b8 0f00 	cmp.w	r8, #0
   b89ba:	d0e9      	beq.n	b8990 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b89bc:	5d60      	ldrb	r0, [r4, r5]
   b89be:	f7ff fedc 	bl	b877a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b89c2:	0603      	lsls	r3, r0, #24
   b89c4:	d415      	bmi.n	b89f2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b89c6:	0100      	lsls	r0, r0, #4
   b89c8:	f108 38ff 	add.w	r8, r8, #4294967295
   b89cc:	b2c7      	uxtb	r7, r0
   b89ce:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b89d2:	2124      	movs	r1, #36	; 0x24
   b89d4:	4620      	mov	r0, r4
   b89d6:	f002 fdf4 	bl	bb5c2 <strnlen>
   b89da:	3501      	adds	r5, #1
   b89dc:	42a8      	cmp	r0, r5
   b89de:	d908      	bls.n	b89f2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b89e0:	5d60      	ldrb	r0, [r4, r5]
   b89e2:	f7ff feca 	bl	b877a <_ZN8particle11hexToNibbleEc>
   b89e6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b89e8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b89ea:	bfa4      	itt	ge
   b89ec:	4338      	orrge	r0, r7
   b89ee:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b89f2:	3501      	adds	r5, #1
   b89f4:	e7d1      	b.n	b899a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b89f6:	bf00      	nop
   b89f8:	000bd5be 	.word	0x000bd5be

000b89fc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b89fc:	b513      	push	{r0, r1, r4, lr}
   b89fe:	4604      	mov	r4, r0
   b8a00:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8a02:	f7ff ff15 	bl	b8830 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b8a06:	4620      	mov	r0, r4
   b8a08:	9901      	ldr	r1, [sp, #4]
   b8a0a:	f7ff ff87 	bl	b891c <_ZN8particle7BleUuid9constructEPKc>
}
   b8a0e:	4620      	mov	r0, r4
   b8a10:	b002      	add	sp, #8
   b8a12:	bd10      	pop	{r4, pc}

000b8a14 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8a14:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8a1a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8a1c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8a1e:	8043      	strh	r3, [r0, #2]
   b8a20:	220e      	movs	r2, #14
   b8a22:	4629      	mov	r1, r5
   b8a24:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8a26:	7105      	strb	r5, [r0, #4]
   b8a28:	3006      	adds	r0, #6
   b8a2a:	f002 fd5b 	bl	bb4e4 <memset>
   b8a2e:	f104 0014 	add.w	r0, r4, #20
   b8a32:	f7ff fefd 	bl	b8830 <_ZN8particle7BleUuidC1Ev>
   b8a36:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8a3a:	f7ff fef9 	bl	b8830 <_ZN8particle7BleUuidC1Ev>
   b8a3e:	4904      	ldr	r1, [pc, #16]	; (b8a50 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8a40:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8a44:	f7ff fd17 	bl	b8476 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8a48:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8a4a:	4620      	mov	r0, r4
   b8a4c:	bd38      	pop	{r3, r4, r5, pc}
   b8a4e:	bf00      	nop
   b8a50:	000bdfcc 	.word	0x000bdfcc

000b8a54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b8a54:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b8a56:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8a5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8a5e:	4293      	cmp	r3, r2
   b8a60:	4618      	mov	r0, r3
   b8a62:	d006      	beq.n	b8a72 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b8a64:	6804      	ldr	r4, [r0, #0]
   b8a66:	8824      	ldrh	r4, [r4, #0]
   b8a68:	428c      	cmp	r4, r1
   b8a6a:	f103 0308 	add.w	r3, r3, #8
   b8a6e:	d1f6      	bne.n	b8a5e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b8a70:	bd10      	pop	{r4, pc}
        return nullptr;
   b8a72:	2000      	movs	r0, #0
   b8a74:	e7fc      	b.n	b8a70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a7a:	4606      	mov	r6, r0
   b8a7c:	b085      	sub	sp, #20
   b8a7e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b8a80:	460d      	mov	r5, r1
   b8a82:	2900      	cmp	r1, #0
   b8a84:	d050      	beq.n	b8b28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b8a86:	2a00      	cmp	r2, #0
   b8a88:	d04e      	beq.n	b8b28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8a8a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b8a8c:	7823      	ldrb	r3, [r4, #0]
   b8a8e:	2af4      	cmp	r2, #244	; 0xf4
   b8a90:	bf28      	it	cs
   b8a92:	22f4      	movcs	r2, #244	; 0xf4
   b8a94:	b343      	cbz	r3, b8ae8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b8a96:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b8a98:	0798      	lsls	r0, r3, #30
   b8a9a:	d509      	bpl.n	b8ab0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b8a9c:	89a0      	ldrh	r0, [r4, #12]
   b8a9e:	9203      	str	r2, [sp, #12]
   b8aa0:	2300      	movs	r3, #0
   b8aa2:	f7fe fe21 	bl	b76e8 <hal_ble_gatt_server_set_characteristic_value>
   b8aa6:	2800      	cmp	r0, #0
   b8aa8:	9a03      	ldr	r2, [sp, #12]
   b8aaa:	da03      	bge.n	b8ab4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b8aac:	b005      	add	sp, #20
   b8aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b8ab0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8ab4:	6834      	ldr	r4, [r6, #0]
   b8ab6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b8ab8:	06d9      	lsls	r1, r3, #27
   b8aba:	d509      	bpl.n	b8ad0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b8abc:	2f01      	cmp	r7, #1
   b8abe:	d007      	beq.n	b8ad0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8ac0:	89a0      	ldrh	r0, [r4, #12]
   b8ac2:	2300      	movs	r3, #0
   b8ac4:	4629      	mov	r1, r5
}
   b8ac6:	b005      	add	sp, #20
   b8ac8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8acc:	f7fe be3e 	b.w	b774c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b8ad0:	069b      	lsls	r3, r3, #26
   b8ad2:	d5eb      	bpl.n	b8aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8ad4:	2f02      	cmp	r7, #2
   b8ad6:	d0e9      	beq.n	b8aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8ad8:	89a0      	ldrh	r0, [r4, #12]
   b8ada:	2300      	movs	r3, #0
   b8adc:	4629      	mov	r1, r5
}
   b8ade:	b005      	add	sp, #20
   b8ae0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8ae4:	f7fe be3c 	b.w	b7760 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b8ae8:	8860      	ldrh	r0, [r4, #2]
   b8aea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8aee:	4288      	cmp	r0, r1
   b8af0:	d01c      	beq.n	b8b2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b8af2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b8af4:	074e      	lsls	r6, r1, #29
   b8af6:	d501      	bpl.n	b8afc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b8af8:	2f01      	cmp	r7, #1
   b8afa:	d104      	bne.n	b8b06 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8afc:	070b      	lsls	r3, r1, #28
   b8afe:	d409      	bmi.n	b8b14 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b8b00:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8b04:	e7d2      	b.n	b8aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8b06:	89a1      	ldrh	r1, [r4, #12]
   b8b08:	9300      	str	r3, [sp, #0]
   b8b0a:	4613      	mov	r3, r2
   b8b0c:	462a      	mov	r2, r5
   b8b0e:	f7fe fdff 	bl	b7710 <hal_ble_gatt_client_write_without_response>
   b8b12:	e7cb      	b.n	b8aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8b14:	2f02      	cmp	r7, #2
   b8b16:	d0f3      	beq.n	b8b00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8b18:	2300      	movs	r3, #0
   b8b1a:	89a1      	ldrh	r1, [r4, #12]
   b8b1c:	9300      	str	r3, [sp, #0]
   b8b1e:	4613      	mov	r3, r2
   b8b20:	462a      	mov	r2, r5
   b8b22:	f7fe fdeb 	bl	b76fc <hal_ble_gatt_client_write_with_response>
   b8b26:	e7c1      	b.n	b8aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8b28:	4802      	ldr	r0, [pc, #8]	; (b8b34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b8b2a:	e7bf      	b.n	b8aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b8b2c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8b30:	e7bc      	b.n	b8aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8b32:	bf00      	nop
   b8b34:	fffffef2 	.word	0xfffffef2

000b8b38 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b8b38:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b8b3a:	688a      	ldr	r2, [r1, #8]
   b8b3c:	6809      	ldr	r1, [r1, #0]
   b8b3e:	f7ff bf9b 	b.w	b8a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b8b42 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b8b42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b44:	460c      	mov	r4, r1
   b8b46:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8b48:	21f4      	movs	r1, #244	; 0xf4
   b8b4a:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b8b4c:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8b4e:	f002 fd38 	bl	bb5c2 <strnlen>
   b8b52:	9b01      	ldr	r3, [sp, #4]
   b8b54:	4602      	mov	r2, r0
   b8b56:	4621      	mov	r1, r4
   b8b58:	4628      	mov	r0, r5
}
   b8b5a:	b003      	add	sp, #12
   b8b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8b60:	f7ff bf8a 	b.w	b8a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b8b64 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8b68:	2600      	movs	r6, #0
   b8b6a:	6006      	str	r6, [r0, #0]
   b8b6c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8b6e:	2028      	movs	r0, #40	; 0x28
   b8b70:	460c      	mov	r4, r1
   b8b72:	f7fc f862 	bl	b4c3a <_Znwj>
	  auto __pi = ::new (__mem)
   b8b76:	1e05      	subs	r5, r0, #0
   b8b78:	f105 080c 	add.w	r8, r5, #12
   b8b7c:	d00f      	beq.n	b8b9e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b8b7e:	2301      	movs	r3, #1
   b8b80:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8b84:	4b08      	ldr	r3, [pc, #32]	; (b8ba8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8b86:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8b88:	4640      	mov	r0, r8
   b8b8a:	f7ff fe51 	bl	b8830 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b8b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8b90:	622e      	str	r6, [r5, #32]
   b8b92:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8b96:	4646      	mov	r6, r8
   b8b98:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b8b9a:	6823      	ldr	r3, [r4, #0]
   b8b9c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b8b9e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8ba2:	4638      	mov	r0, r7
   b8ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8ba8:	000bdc04 	.word	0x000bdc04

000b8bac <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8bac:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8bae:	2500      	movs	r5, #0
   b8bb0:	6005      	str	r5, [r0, #0]
   b8bb2:	4606      	mov	r6, r0
   b8bb4:	2030      	movs	r0, #48	; 0x30
   b8bb6:	f7fc f840 	bl	b4c3a <_Znwj>
	  auto __pi = ::new (__mem)
   b8bba:	4604      	mov	r4, r0
   b8bbc:	b188      	cbz	r0, b8be2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b8bbe:	2301      	movs	r3, #1
   b8bc0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b8bc4:	4b09      	ldr	r3, [pc, #36]	; (b8bec <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b8bc6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8bcc:	8183      	strh	r3, [r0, #12]
   b8bce:	300e      	adds	r0, #14
   b8bd0:	f7ff fe23 	bl	b881a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b8bd4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b8bd8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b8bdc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b8be0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b8be2:	6074      	str	r4, [r6, #4]
   b8be4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b8be6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8be8:	4630      	mov	r0, r6
   b8bea:	bd70      	pop	{r4, r5, r6, pc}
   b8bec:	000bdc20 	.word	0x000bdc20

000b8bf0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b8bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8bf2:	460d      	mov	r5, r1
   b8bf4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8bf6:	a801      	add	r0, sp, #4
   b8bf8:	f7ff fdd4 	bl	b87a4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8bfc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8bfe:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b8c02:	6023      	str	r3, [r4, #0]
   b8c04:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8c08:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8c0a:	a801      	add	r0, sp, #4
   b8c0c:	f7ff fdd8 	bl	b87c0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8c10:	4620      	mov	r0, r4
   b8c12:	b003      	add	sp, #12
   b8c14:	bd30      	pop	{r4, r5, pc}

000b8c16 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b8c16:	b530      	push	{r4, r5, lr}
   b8c18:	4605      	mov	r5, r0
   b8c1a:	b087      	sub	sp, #28
   b8c1c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8c1e:	a801      	add	r0, sp, #4
   b8c20:	f7ff fdc0 	bl	b87a4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8c24:	682a      	ldr	r2, [r5, #0]
   b8c26:	6823      	ldr	r3, [r4, #0]
   b8c28:	8812      	ldrh	r2, [r2, #0]
   b8c2a:	881b      	ldrh	r3, [r3, #0]
   b8c2c:	429a      	cmp	r2, r3
   b8c2e:	d10d      	bne.n	b8c4c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8c30:	4629      	mov	r1, r5
   b8c32:	a802      	add	r0, sp, #8
   b8c34:	f7ff ffdc 	bl	b8bf0 <_ZNK8particle13BlePeerDevice7addressEv>
   b8c38:	4621      	mov	r1, r4
   b8c3a:	a804      	add	r0, sp, #16
   b8c3c:	f7ff ffd8 	bl	b8bf0 <_ZNK8particle13BlePeerDevice7addressEv>
   b8c40:	a904      	add	r1, sp, #16
   b8c42:	a802      	add	r0, sp, #8
   b8c44:	f7ff fdd5 	bl	b87f2 <_ZNK8particle10BleAddresseqERKS0_>
   b8c48:	4604      	mov	r4, r0
   b8c4a:	b900      	cbnz	r0, b8c4e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8c4c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8c4e:	a801      	add	r0, sp, #4
   b8c50:	f7ff fdb6 	bl	b87c0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8c54:	4620      	mov	r0, r4
   b8c56:	b007      	add	sp, #28
   b8c58:	bd30      	pop	{r4, r5, pc}
	...

000b8c5c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8c5c:	b510      	push	{r4, lr}
   b8c5e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8c60:	2064      	movs	r0, #100	; 0x64
   b8c62:	f7fb ffea 	bl	b4c3a <_Znwj>
   b8c66:	b168      	cbz	r0, b8c84 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8c68:	2300      	movs	r3, #0
   b8c6a:	e9c0 3300 	strd	r3, r3, [r0]
   b8c6e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8c76:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b8c7a:	6203      	str	r3, [r0, #32]
   b8c7c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b8c7e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8c80:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8c82:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8c84:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8c86:	b920      	cbnz	r0, b8c92 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8c88:	4a0a      	ldr	r2, [pc, #40]	; (b8cb4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8c8a:	490b      	ldr	r1, [pc, #44]	; (b8cb8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8c8c:	200a      	movs	r0, #10
   b8c8e:	f7fe fec9 	bl	b7a24 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8c92:	2000      	movs	r0, #0
   b8c94:	f7fe fcec 	bl	b7670 <hal_ble_stack_init>
   b8c98:	b120      	cbz	r0, b8ca4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b8c9a:	4a06      	ldr	r2, [pc, #24]	; (b8cb4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8c9c:	4907      	ldr	r1, [pc, #28]	; (b8cbc <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b8c9e:	200a      	movs	r0, #10
   b8ca0:	f7fe fec0 	bl	b7a24 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8ca4:	6821      	ldr	r1, [r4, #0]
   b8ca6:	4806      	ldr	r0, [pc, #24]	; (b8cc0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8ca8:	2200      	movs	r2, #0
   b8caa:	f7fe fd45 	bl	b7738 <hal_ble_set_callback_on_periph_link_events>
}
   b8cae:	4620      	mov	r0, r4
   b8cb0:	bd10      	pop	{r4, pc}
   b8cb2:	bf00      	nop
   b8cb4:	000b7621 	.word	0x000b7621
   b8cb8:	000bda94 	.word	0x000bda94
   b8cbc:	000bdad2 	.word	0x000bdad2
   b8cc0:	000b926d 	.word	0x000b926d

000b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8cc4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b8cc6:	4c0a      	ldr	r4, [pc, #40]	; (b8cf0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8cc8:	7823      	ldrb	r3, [r4, #0]
   b8cca:	f3bf 8f5b 	dmb	ish
   b8cce:	07db      	lsls	r3, r3, #31
   b8cd0:	d40c      	bmi.n	b8cec <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8cd2:	4620      	mov	r0, r4
   b8cd4:	f7fb ffb9 	bl	b4c4a <__cxa_guard_acquire>
   b8cd8:	b140      	cbz	r0, b8cec <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8cda:	4806      	ldr	r0, [pc, #24]	; (b8cf4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8cdc:	f7ff ffbe 	bl	b8c5c <_ZN8particle14BleLocalDeviceC1Ev>
   b8ce0:	4620      	mov	r0, r4
   b8ce2:	f7fb ffb7 	bl	b4c54 <__cxa_guard_release>
   b8ce6:	4804      	ldr	r0, [pc, #16]	; (b8cf8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8ce8:	f002 fbbe 	bl	bb468 <atexit>
    return instance;
}
   b8cec:	4801      	ldr	r0, [pc, #4]	; (b8cf4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8cee:	bd10      	pop	{r4, pc}
   b8cf0:	2003e5f8 	.word	0x2003e5f8
   b8cf4:	2003e604 	.word	0x2003e604
   b8cf8:	000b8f15 	.word	0x000b8f15

000b8cfc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8cfc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b8cfe:	6803      	ldr	r3, [r0, #0]
   b8d00:	3b09      	subs	r3, #9
   b8d02:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8d04:	b08d      	sub	sp, #52	; 0x34
   b8d06:	4604      	mov	r4, r0
   b8d08:	460d      	mov	r5, r1
    switch (event->type) {
   b8d0a:	d811      	bhi.n	b8d30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8d0c:	f7ff ffda 	bl	b8cc4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8d10:	88a1      	ldrh	r1, [r4, #4]
   b8d12:	6800      	ldr	r0, [r0, #0]
   b8d14:	f7ff fe9e 	bl	b8a54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8d18:	4603      	mov	r3, r0
   b8d1a:	b958      	cbnz	r0, b8d34 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8d1c:	2220      	movs	r2, #32
   b8d1e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b8d22:	4a0b      	ldr	r2, [pc, #44]	; (b8d50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8d24:	9200      	str	r2, [sp, #0]
   b8d26:	490b      	ldr	r1, [pc, #44]	; (b8d54 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8d28:	aa04      	add	r2, sp, #16
   b8d2a:	2032      	movs	r0, #50	; 0x32
   b8d2c:	f7fe fe82 	bl	b7a34 <log_message>
}
   b8d30:	b00d      	add	sp, #52	; 0x34
   b8d32:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8d34:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b8d36:	2a00      	cmp	r2, #0
   b8d38:	d0fa      	beq.n	b8d30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8d3a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8d3e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b8d42:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8d46:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8d48:	aa04      	add	r2, sp, #16
   b8d4a:	a903      	add	r1, sp, #12
   b8d4c:	47a0      	blx	r4
}
   b8d4e:	e7ef      	b.n	b8d30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8d50:	000bdb14 	.word	0x000bdb14
   b8d54:	000bdaab 	.word	0x000bdaab

000b8d58 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8d58:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b8d5a:	2000      	movs	r0, #0
   b8d5c:	f7fe fc88 	bl	b7670 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8d60:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8d64:	bd08      	pop	{r3, pc}

000b8d66 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b8d66:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b8d68:	2100      	movs	r1, #0
   b8d6a:	f7fe bc89 	b.w	b7680 <hal_ble_select_antenna>

000b8d6e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b8d6e:	b919      	cbnz	r1, b8d78 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8d70:	460a      	mov	r2, r1
   b8d72:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8d74:	f7fe bc8c 	b.w	b7690 <hal_ble_gap_set_advertising_data>
   b8d78:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8d7c:	2200      	movs	r2, #0
   b8d7e:	e7f9      	b.n	b8d74 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8d80 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b8d80:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b8d82:	69d8      	ldr	r0, [r3, #28]
}
   b8d84:	2800      	cmp	r0, #0
   b8d86:	bfd4      	ite	le
   b8d88:	2000      	movle	r0, #0
   b8d8a:	2001      	movgt	r0, #1
   b8d8c:	4770      	bx	lr

000b8d8e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8d8e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8d90:	1e14      	subs	r4, r2, #0
   b8d92:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8d94:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8d96:	db02      	blt.n	b8d9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8d98:	1862      	adds	r2, r4, r1
   b8d9a:	429a      	cmp	r2, r3
   b8d9c:	dd00      	ble.n	b8da0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8d9e:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8da0:	682a      	ldr	r2, [r5, #0]
   b8da2:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8da4:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8da6:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8da8:	1a52      	subs	r2, r2, r1
   b8daa:	f002 fb81 	bl	bb4b0 <memmove>
    size_ -= n;
   b8dae:	686a      	ldr	r2, [r5, #4]
   b8db0:	1b12      	subs	r2, r2, r4
   b8db2:	606a      	str	r2, [r5, #4]
}
   b8db4:	bd38      	pop	{r3, r4, r5, pc}

000b8db6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8db6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b8db8:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8dba:	4604      	mov	r4, r0
   b8dbc:	460d      	mov	r5, r1
   b8dbe:	ab01      	add	r3, sp, #4
   b8dc0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8dc4:	f7ff fc82 	bl	b86cc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b8dc8:	4602      	mov	r2, r0
   b8dca:	b138      	cbz	r0, b8ddc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b8dcc:	9901      	ldr	r1, [sp, #4]
   b8dce:	4620      	mov	r0, r4
   b8dd0:	f7ff ffdd 	bl	b8d8e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b8dd4:	4629      	mov	r1, r5
   b8dd6:	4620      	mov	r0, r4
   b8dd8:	f7ff ffed 	bl	b8db6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b8ddc:	b003      	add	sp, #12
   b8dde:	bd30      	pop	{r4, r5, pc}

000b8de0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b8de0:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b8de2:	460c      	mov	r4, r1
   b8de4:	b929      	cbnz	r1, b8df2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b8de6:	460a      	mov	r2, r1
   b8de8:	4608      	mov	r0, r1
}
   b8dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8dee:	f7fe bc57 	b.w	b76a0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b8df2:	2101      	movs	r1, #1
   b8df4:	4620      	mov	r0, r4
   b8df6:	f7ff ffde 	bl	b8db6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8dfa:	e9d4 0100 	ldrd	r0, r1, [r4]
   b8dfe:	2200      	movs	r2, #0
   b8e00:	e7f3      	b.n	b8dea <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b8e02 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b8e02:	b538      	push	{r3, r4, r5, lr}
   b8e04:	4604      	mov	r4, r0
   b8e06:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b8e08:	f7ff ffb1 	bl	b8d6e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b8e0c:	2800      	cmp	r0, #0
   b8e0e:	db0a      	blt.n	b8e26 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b8e10:	4629      	mov	r1, r5
   b8e12:	4620      	mov	r0, r4
   b8e14:	f7ff ffe4 	bl	b8de0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b8e18:	2800      	cmp	r0, #0
   b8e1a:	db04      	blt.n	b8e26 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b8e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b8e20:	2000      	movs	r0, #0
   b8e22:	f7fe bc45 	b.w	b76b0 <hal_ble_gap_start_advertising>
}
   b8e26:	bd38      	pop	{r3, r4, r5, pc}

000b8e28 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8e28:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8e2a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8e2c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8e2e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e30:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8e32:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e34:	f7fb ff01 	bl	b4c3a <_Znwj>
   b8e38:	b118      	cbz	r0, b8e42 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
   b8e3a:	682b      	ldr	r3, [r5, #0]
   b8e3c:	6003      	str	r3, [r0, #0]
   b8e3e:	686b      	ldr	r3, [r5, #4]
   b8e40:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8e42:	4b03      	ldr	r3, [pc, #12]	; (b8e50 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8e44:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8e46:	4b03      	ldr	r3, [pc, #12]	; (b8e54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e48:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8e4a:	60a3      	str	r3, [r4, #8]
      }
   b8e4c:	4620      	mov	r0, r4
   b8e4e:	bd38      	pop	{r3, r4, r5, pc}
   b8e50:	000b870d 	.word	0x000b870d
   b8e54:	000b8725 	.word	0x000b8725

000b8e58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8e58:	680b      	ldr	r3, [r1, #0]
   b8e5a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8e5c:	b113      	cbz	r3, b8e64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8e5e:	685a      	ldr	r2, [r3, #4]
   b8e60:	3201      	adds	r2, #1
   b8e62:	605a      	str	r2, [r3, #4]
      }
   b8e64:	4770      	bx	lr

000b8e66 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8e66:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8e68:	f851 3b04 	ldr.w	r3, [r1], #4
   b8e6c:	4604      	mov	r4, r0
   b8e6e:	f840 3b04 	str.w	r3, [r0], #4
   b8e72:	f7ff fff1 	bl	b8e58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8e76:	6823      	ldr	r3, [r4, #0]
   b8e78:	b90b      	cbnz	r3, b8e7e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8e7a:	f7ff fc3d 	bl	b86f8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8e7e:	4620      	mov	r0, r4
   b8e80:	bd10      	pop	{r4, pc}

000b8e82 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8e82:	b510      	push	{r4, lr}
   b8e84:	f851 3b04 	ldr.w	r3, [r1], #4
   b8e88:	4604      	mov	r4, r0
   b8e8a:	f840 3b04 	str.w	r3, [r0], #4
   b8e8e:	f7ff ffe3 	bl	b8e58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8e92:	4620      	mov	r0, r4
   b8e94:	bd10      	pop	{r4, pc}

000b8e96 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8e96:	b510      	push	{r4, lr}
   b8e98:	f851 3b04 	ldr.w	r3, [r1], #4
   b8e9c:	4604      	mov	r4, r0
   b8e9e:	f840 3b04 	str.w	r3, [r0], #4
   b8ea2:	f7ff ffd9 	bl	b8e58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8ea6:	4620      	mov	r0, r4
   b8ea8:	bd10      	pop	{r4, pc}

000b8eaa <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8eaa:	b510      	push	{r4, lr}
   b8eac:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8eae:	3004      	adds	r0, #4
   b8eb0:	f7fc ff46 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8eb4:	4620      	mov	r0, r4
   b8eb6:	bd10      	pop	{r4, pc}

000b8eb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8eb8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8eba:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8ebe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8ec0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8ec4:	42ae      	cmp	r6, r5
   b8ec6:	d004      	beq.n	b8ed2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8ec8:	1d28      	adds	r0, r5, #4
   b8eca:	f7fc ff39 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ece:	3508      	adds	r5, #8
   b8ed0:	e7f8      	b.n	b8ec4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8ed2:	6820      	ldr	r0, [r4, #0]
   b8ed4:	f7fe fea2 	bl	b7c1c <free>
}
   b8ed8:	4620      	mov	r0, r4
   b8eda:	bd70      	pop	{r4, r5, r6, pc}

000b8edc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8edc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8ede:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8ee2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8ee4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8ee8:	42ae      	cmp	r6, r5
   b8eea:	d004      	beq.n	b8ef6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8eec:	1d28      	adds	r0, r5, #4
   b8eee:	f7fc ff27 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ef2:	3508      	adds	r5, #8
   b8ef4:	e7f8      	b.n	b8ee8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8ef6:	6820      	ldr	r0, [r4, #0]
   b8ef8:	f7fe fe90 	bl	b7c1c <free>
}
   b8efc:	4620      	mov	r0, r4
   b8efe:	bd70      	pop	{r4, r5, r6, pc}

000b8f00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8f00:	b510      	push	{r4, lr}
   b8f02:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8f04:	3024      	adds	r0, #36	; 0x24
   b8f06:	f7ff ffe9 	bl	b8edc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8f0a:	f104 0018 	add.w	r0, r4, #24
   b8f0e:	f7ff ffd3 	bl	b8eb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8f12:	bd10      	pop	{r4, pc}

000b8f14 <__tcf_0>:
    static BleLocalDevice instance;
   b8f14:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8f16:	4b17      	ldr	r3, [pc, #92]	; (b8f74 <__tcf_0+0x60>)
   b8f18:	681c      	ldr	r4, [r3, #0]
   b8f1a:	b354      	cbz	r4, b8f72 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8f1c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8f20:	f7fd fa4f 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
   b8f24:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8f28:	f7fd fa4b 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
   b8f2c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8f30:	f7fd fa47 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
   b8f34:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8f38:	f7fd fa43 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8f3c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8f40:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8f44:	42ae      	cmp	r6, r5
   b8f46:	d004      	beq.n	b8f52 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8f48:	1d28      	adds	r0, r5, #4
   b8f4a:	f7fc fef9 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f4e:	3508      	adds	r5, #8
   b8f50:	e7f8      	b.n	b8f44 <__tcf_0+0x30>
    ::free(ptr);
   b8f52:	69a0      	ldr	r0, [r4, #24]
   b8f54:	f7fe fe62 	bl	b7c1c <free>
    ~BleLocalDeviceImpl() = default;
   b8f58:	f104 000c 	add.w	r0, r4, #12
   b8f5c:	f7ff ffbe 	bl	b8edc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8f60:	4620      	mov	r0, r4
   b8f62:	f7ff ffa9 	bl	b8eb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8f66:	4620      	mov	r0, r4
   b8f68:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8f6e:	f7fb be6a 	b.w	b4c46 <_ZdlPvj>
   b8f72:	bd70      	pop	{r4, r5, r6, pc}
   b8f74:	2003e604 	.word	0x2003e604

000b8f78 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8f78:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8f7a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8f7c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8f80:	e9c1 3300 	strd	r3, r3, [r1]
   b8f84:	6803      	ldr	r3, [r0, #0]
   b8f86:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8f88:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8f8a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8f8c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b8f8e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8f90:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b8f92:	f7fc fed5 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8f96:	b002      	add	sp, #8
   b8f98:	bd10      	pop	{r4, pc}

000b8f9a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8f9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8f9c:	b510      	push	{r4, lr}
      if (_M_empty())
   b8f9e:	b90a      	cbnz	r2, b8fa4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8fa0:	f001 fe86 	bl	bacb0 <_ZSt25__throw_bad_function_callv>
    }
   b8fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8fa8:	68c3      	ldr	r3, [r0, #12]
   b8faa:	4718      	bx	r3

000b8fac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8fac:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8fae:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8fb0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8fb2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8fb4:	dd03      	ble.n	b8fbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8fb6:	f7fe fe39 	bl	b7c2c <realloc>
            if (!d) {
   b8fba:	b918      	cbnz	r0, b8fc4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8fbc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8fbe:	f7fe fe2d 	bl	b7c1c <free>
        T* d = nullptr;
   b8fc2:	2000      	movs	r0, #0
        data_ = d;
   b8fc4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8fc6:	60a5      	str	r5, [r4, #8]
        return true;
   b8fc8:	2001      	movs	r0, #1
   b8fca:	e7f7      	b.n	b8fbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8fcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8fcc:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8fce:	6883      	ldr	r3, [r0, #8]
   b8fd0:	428b      	cmp	r3, r1
   b8fd2:	da02      	bge.n	b8fda <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8fd4:	f7ff ffea 	bl	b8fac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8fd8:	bd08      	pop	{r3, pc}
    return true;
   b8fda:	2001      	movs	r0, #1
   b8fdc:	e7fc      	b.n	b8fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8fde <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8fe2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8fe4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8fe6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8fe8:	4419      	add	r1, r3
   b8fea:	6883      	ldr	r3, [r0, #8]
   b8fec:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8fee:	4604      	mov	r4, r0
   b8ff0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8ff2:	dc12      	bgt.n	b901a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8ff4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8ff6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8ff8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8ffa:	1bd2      	subs	r2, r2, r7
   b8ffc:	4631      	mov	r1, r6
   b8ffe:	1970      	adds	r0, r6, r5
   b9000:	f002 fa56 	bl	bb4b0 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b9004:	462a      	mov	r2, r5
   b9006:	4641      	mov	r1, r8
   b9008:	4630      	mov	r0, r6
   b900a:	f002 fa43 	bl	bb494 <memcpy>
    size_ += n;
   b900e:	6863      	ldr	r3, [r4, #4]
   b9010:	442b      	add	r3, r5
   b9012:	6063      	str	r3, [r4, #4]
    return true;
   b9014:	2001      	movs	r0, #1
}
   b9016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b901a:	f7ff ffc7 	bl	b8fac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b901e:	2800      	cmp	r0, #0
   b9020:	d1e8      	bne.n	b8ff4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b9022:	e7f8      	b.n	b9016 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b9024 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9026:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9028:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b902c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b902e:	4604      	mov	r4, r0
   b9030:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9032:	da0b      	bge.n	b904c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b9034:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9036:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9038:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b903a:	1b52      	subs	r2, r2, r5
   b903c:	1c48      	adds	r0, r1, #1
   b903e:	f002 fa37 	bl	bb4b0 <memmove>
    new(p) T(std::move(value));
   b9042:	557e      	strb	r6, [r7, r5]
    ++size_;
   b9044:	6863      	ldr	r3, [r4, #4]
   b9046:	3301      	adds	r3, #1
   b9048:	6063      	str	r3, [r4, #4]
}
   b904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b904c:	3101      	adds	r1, #1
   b904e:	f7ff ffad 	bl	b8fac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9052:	2800      	cmp	r0, #0
   b9054:	d1ee      	bne.n	b9034 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b9056:	e7f8      	b.n	b904a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b9058 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9058:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b905a:	6841      	ldr	r1, [r0, #4]
   b905c:	f7ff bfe2 	b.w	b9024 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b9060 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9064:	4604      	mov	r4, r0
   b9066:	461d      	mov	r5, r3
   b9068:	460f      	mov	r7, r1
   b906a:	ab01      	add	r3, sp, #4
   b906c:	4690      	mov	r8, r2
   b906e:	460a      	mov	r2, r1
   b9070:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9074:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b9078:	f7ff fb28 	bl	b86cc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b907c:	1cae      	adds	r6, r5, #2
   b907e:	6863      	ldr	r3, [r4, #4]
   b9080:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b9082:	f1b9 0f00 	cmp.w	r9, #0
   b9086:	d126      	bne.n	b90d6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b9088:	b328      	cbz	r0, b90d6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b908a:	4433      	add	r3, r6
   b908c:	1a1b      	subs	r3, r3, r0
   b908e:	2bff      	cmp	r3, #255	; 0xff
   b9090:	d809      	bhi.n	b90a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b9092:	9901      	ldr	r1, [sp, #4]
   b9094:	4620      	mov	r0, r4
   b9096:	f7ff fe7a 	bl	b8d8e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b909a:	6861      	ldr	r1, [r4, #4]
   b909c:	4620      	mov	r0, r4
   b909e:	4431      	add	r1, r6
   b90a0:	f7ff ff94 	bl	b8fcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b90a4:	b918      	cbnz	r0, b90ae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b90a6:	6860      	ldr	r0, [r4, #4]
}
   b90a8:	b003      	add	sp, #12
   b90aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b90ae:	1c6a      	adds	r2, r5, #1
   b90b0:	9901      	ldr	r1, [sp, #4]
   b90b2:	b2d2      	uxtb	r2, r2
   b90b4:	4620      	mov	r0, r4
   b90b6:	f7ff ffb5 	bl	b9024 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b90ba:	9901      	ldr	r1, [sp, #4]
   b90bc:	463a      	mov	r2, r7
   b90be:	3101      	adds	r1, #1
   b90c0:	4620      	mov	r0, r4
   b90c2:	f7ff ffaf 	bl	b9024 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b90c6:	9901      	ldr	r1, [sp, #4]
   b90c8:	462b      	mov	r3, r5
   b90ca:	4642      	mov	r2, r8
   b90cc:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b90ce:	4620      	mov	r0, r4
   b90d0:	f7ff ff85 	bl	b8fde <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b90d4:	e7e7      	b.n	b90a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b90d6:	18f1      	adds	r1, r6, r3
   b90d8:	29ff      	cmp	r1, #255	; 0xff
   b90da:	d8e4      	bhi.n	b90a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b90dc:	4620      	mov	r0, r4
   b90de:	f7ff ff75 	bl	b8fcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b90e2:	2800      	cmp	r0, #0
   b90e4:	d0df      	beq.n	b90a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b90e6:	1c69      	adds	r1, r5, #1
   b90e8:	b2c9      	uxtb	r1, r1
   b90ea:	4620      	mov	r0, r4
   b90ec:	f7ff ffb4 	bl	b9058 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b90f0:	4639      	mov	r1, r7
   b90f2:	4620      	mov	r0, r4
   b90f4:	f7ff ffb0 	bl	b9058 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b90f8:	6861      	ldr	r1, [r4, #4]
   b90fa:	462b      	mov	r3, r5
   b90fc:	4642      	mov	r2, r8
   b90fe:	e7e6      	b.n	b90ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b9100 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9100:	b430      	push	{r4, r5}
   b9102:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b9106:	b11a      	cbz	r2, b9110 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b9108:	9502      	str	r5, [sp, #8]
}
   b910a:	bc30      	pop	{r4, r5}
   b910c:	f7ff bfa8 	b.w	b9060 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b9110:	6840      	ldr	r0, [r0, #4]
}
   b9112:	bc30      	pop	{r4, r5}
   b9114:	4770      	bx	lr

000b9116 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b9116:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b9118:	2300      	movs	r3, #0
   b911a:	e9c0 3300 	strd	r3, r3, [r0]
   b911e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9120:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9122:	9300      	str	r3, [sp, #0]
   b9124:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9126:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b912a:	4619      	mov	r1, r3
   b912c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b9130:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9132:	f7ff ffe5 	bl	b9100 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b9136:	4620      	mov	r0, r4
   b9138:	b004      	add	sp, #16
   b913a:	bd10      	pop	{r4, pc}

000b913c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b913c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b913e:	460a      	mov	r2, r1
   b9140:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b9142:	2114      	movs	r1, #20
   b9144:	4610      	mov	r0, r2
   b9146:	9203      	str	r2, [sp, #12]
   b9148:	f002 fa3b 	bl	bb5c2 <strnlen>
   b914c:	2100      	movs	r1, #0
   b914e:	4603      	mov	r3, r0
   b9150:	9100      	str	r1, [sp, #0]
   b9152:	9a03      	ldr	r2, [sp, #12]
   b9154:	2109      	movs	r1, #9
   b9156:	4620      	mov	r0, r4
   b9158:	f7ff ffd2 	bl	b9100 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b915c:	b004      	add	sp, #16
   b915e:	bd10      	pop	{r4, pc}

000b9160 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9160:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9164:	4604      	mov	r4, r0
   b9166:	460d      	mov	r5, r1
   b9168:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b916a:	d914      	bls.n	b9196 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b916c:	4290      	cmp	r0, r2
   b916e:	d213      	bcs.n	b9198 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9170:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9174:	1a75      	subs	r5, r6, r1
   b9176:	f1a1 0708 	sub.w	r7, r1, #8
   b917a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b917c:	42b7      	cmp	r7, r6
   b917e:	d018      	beq.n	b91b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9180:	b11c      	cbz	r4, b918a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9182:	4631      	mov	r1, r6
   b9184:	4620      	mov	r0, r4
   b9186:	f7ff fe86 	bl	b8e96 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b918a:	1d30      	adds	r0, r6, #4
   b918c:	f7fc fdd8 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9190:	3e08      	subs	r6, #8
   b9192:	3c08      	subs	r4, #8
   b9194:	e7f2      	b.n	b917c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9196:	d00c      	beq.n	b91b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9198:	42b5      	cmp	r5, r6
   b919a:	d00a      	beq.n	b91b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b919c:	b11c      	cbz	r4, b91a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b919e:	4629      	mov	r1, r5
   b91a0:	4620      	mov	r0, r4
   b91a2:	f7ff fe78 	bl	b8e96 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b91a6:	1d28      	adds	r0, r5, #4
   b91a8:	f7fc fdca 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b91ac:	3508      	adds	r5, #8
   b91ae:	3408      	adds	r4, #8
   b91b0:	e7f2      	b.n	b9198 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b91b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b91b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b91b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b91b6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b91b8:	6846      	ldr	r6, [r0, #4]
   b91ba:	4668      	mov	r0, sp
   b91bc:	f7ff fe6b 	bl	b8e96 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b91c0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b91c4:	429f      	cmp	r7, r3
   b91c6:	db12      	blt.n	b91ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b91c8:	3701      	adds	r7, #1
        if (n > 0) {
   b91ca:	2f00      	cmp	r7, #0
   b91cc:	dd29      	ble.n	b9222 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b91ce:	00f8      	lsls	r0, r7, #3
   b91d0:	f7fe fd1c 	bl	b7c0c <malloc>
            if (!d) {
   b91d4:	4605      	mov	r5, r0
   b91d6:	b1f0      	cbz	r0, b9216 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b91d8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b91dc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b91e0:	f7ff ffbe 	bl	b9160 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b91e4:	6820      	ldr	r0, [r4, #0]
   b91e6:	f7fe fd19 	bl	b7c1c <free>
        data_ = d;
   b91ea:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b91ec:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b91ee:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b91f0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b91f2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b91f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b91fa:	4631      	mov	r1, r6
   b91fc:	f106 0008 	add.w	r0, r6, #8
   b9200:	f7ff ffae 	bl	b9160 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9204:	b11e      	cbz	r6, b920e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b9206:	4669      	mov	r1, sp
   b9208:	4630      	mov	r0, r6
   b920a:	f7ff fe44 	bl	b8e96 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b920e:	6863      	ldr	r3, [r4, #4]
   b9210:	3301      	adds	r3, #1
   b9212:	6063      	str	r3, [r4, #4]
    return true;
   b9214:	2501      	movs	r5, #1
   b9216:	a801      	add	r0, sp, #4
   b9218:	f7fc fd92 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b921c:	4628      	mov	r0, r5
   b921e:	b003      	add	sp, #12
   b9220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9222:	2500      	movs	r5, #0
   b9224:	e7de      	b.n	b91e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b9226 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b9228:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b922c:	4605      	mov	r5, r0
   b922e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b9230:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9234:	42a6      	cmp	r6, r4
   b9236:	d005      	beq.n	b9244 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b9238:	4639      	mov	r1, r7
   b923a:	4620      	mov	r0, r4
   b923c:	f7ff fceb 	bl	b8c16 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9240:	b108      	cbz	r0, b9246 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9242:	b914      	cbnz	r4, b924a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b9246:	3408      	adds	r4, #8
   b9248:	e7f4      	b.n	b9234 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b924a:	1d20      	adds	r0, r4, #4
   b924c:	f7fc fd78 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b9250:	e9d5 3200 	ldrd	r3, r2, [r5]
   b9254:	f104 0108 	add.w	r1, r4, #8
   b9258:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b925c:	4620      	mov	r0, r4
   b925e:	f7ff ff7f 	bl	b9160 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b9262:	686b      	ldr	r3, [r5, #4]
   b9264:	3b01      	subs	r3, #1
   b9266:	606b      	str	r3, [r5, #4]
    return true;
   b9268:	e7ec      	b.n	b9244 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b926c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b926c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9270:	4605      	mov	r5, r0
   b9272:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b9274:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b9276:	460c      	mov	r4, r1
        WiringBleLock lk;
   b9278:	f7ff fa94 	bl	b87a4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b927c:	682e      	ldr	r6, [r5, #0]
   b927e:	1ef3      	subs	r3, r6, #3
   b9280:	2b0d      	cmp	r3, #13
   b9282:	d83c      	bhi.n	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9284:	e8df f013 	tbh	[pc, r3, lsl #1]
   b9288:	0053000e 	.word	0x0053000e
   b928c:	00d1003b 	.word	0x00d1003b
   b9290:	003b003b 	.word	0x003b003b
   b9294:	003b003b 	.word	0x003b003b
   b9298:	009b003b 	.word	0x009b003b
   b929c:	009b009b 	.word	0x009b009b
   b92a0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b92a4:	a804      	add	r0, sp, #16
   b92a6:	f7ff fc81 	bl	b8bac <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b92aa:	9b04      	ldr	r3, [sp, #16]
   b92ac:	89aa      	ldrh	r2, [r5, #12]
   b92ae:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b92b0:	6869      	ldr	r1, [r5, #4]
   b92b2:	9804      	ldr	r0, [sp, #16]
   b92b4:	3108      	adds	r1, #8
   b92b6:	3002      	adds	r0, #2
   b92b8:	f7ff fa8e 	bl	b87d8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b92bc:	a904      	add	r1, sp, #16
   b92be:	a806      	add	r0, sp, #24
   b92c0:	f7ff fde9 	bl	b8e96 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b92c4:	a906      	add	r1, sp, #24
   b92c6:	f104 0018 	add.w	r0, r4, #24
   b92ca:	f7ff ff73 	bl	b91b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b92ce:	4605      	mov	r5, r0
   b92d0:	a807      	add	r0, sp, #28
   b92d2:	f7fc fd35 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92d6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b92d8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b92da:	b9b5      	cbnz	r5, b930a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b92dc:	4b5d      	ldr	r3, [pc, #372]	; (b9454 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b92de:	495e      	ldr	r1, [pc, #376]	; (b9458 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b92e0:	9300      	str	r3, [sp, #0]
   b92e2:	2032      	movs	r0, #50	; 0x32
   b92e4:	462b      	mov	r3, r5
   b92e6:	aa06      	add	r2, sp, #24
   b92e8:	9507      	str	r5, [sp, #28]
   b92ea:	f7fe fba3 	bl	b7a34 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b92ee:	9b04      	ldr	r3, [sp, #16]
   b92f0:	4629      	mov	r1, r5
   b92f2:	8818      	ldrh	r0, [r3, #0]
   b92f4:	f7fe f9e4 	bl	b76c0 <hal_ble_gap_disconnect>
   b92f8:	a805      	add	r0, sp, #20
   b92fa:	f7fc fd21 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b92fe:	a803      	add	r0, sp, #12
   b9300:	f7ff fa5e 	bl	b87c0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b9304:	b00e      	add	sp, #56	; 0x38
   b9306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b930a:	4a54      	ldr	r2, [pc, #336]	; (b945c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b930c:	9200      	str	r2, [sp, #0]
   b930e:	2300      	movs	r3, #0
   b9310:	4951      	ldr	r1, [pc, #324]	; (b9458 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9312:	9307      	str	r3, [sp, #28]
   b9314:	aa06      	add	r2, sp, #24
   b9316:	2001      	movs	r0, #1
   b9318:	f7fe fb8c 	bl	b7a34 <log_message>
                if (impl->connectedCallback_) {
   b931c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b931e:	2b00      	cmp	r3, #0
   b9320:	d0ea      	beq.n	b92f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b9322:	a904      	add	r1, sp, #16
   b9324:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9328:	f7ff fe37 	bl	b8f9a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b932c:	e7e4      	b.n	b92f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b932e:	89a9      	ldrh	r1, [r5, #12]
   b9330:	4620      	mov	r0, r4
   b9332:	f7ff fb8f 	bl	b8a54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b9336:	4606      	mov	r6, r0
   b9338:	2800      	cmp	r0, #0
   b933a:	d0e0      	beq.n	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b933c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b933e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b9342:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9346:	8029      	strh	r1, [r5, #0]
   b9348:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b934c:	429a      	cmp	r2, r3
   b934e:	d003      	beq.n	b9358 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b9350:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9354:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b9356:	e7f9      	b.n	b934c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b9358:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b935c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9360:	45b8      	cmp	r8, r7
   b9362:	d004      	beq.n	b936e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b9364:	1d38      	adds	r0, r7, #4
   b9366:	f7fc fceb 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b936a:	3708      	adds	r7, #8
   b936c:	e7f8      	b.n	b9360 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b936e:	2300      	movs	r3, #0
   b9370:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b9372:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b9376:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b937a:	45b8      	cmp	r8, r7
   b937c:	d004      	beq.n	b9388 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b937e:	1d38      	adds	r0, r7, #4
   b9380:	f7fc fcde 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9384:	3708      	adds	r7, #8
   b9386:	e7f8      	b.n	b937a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b9388:	2300      	movs	r3, #0
   b938a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b938c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b938e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9390:	b123      	cbz	r3, b939c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b9392:	4631      	mov	r1, r6
   b9394:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9398:	f7ff fdff 	bl	b8f9a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b939c:	2300      	movs	r3, #0
   b939e:	2220      	movs	r2, #32
   b93a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b93a4:	4a2e      	ldr	r2, [pc, #184]	; (b9460 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b93a6:	9200      	str	r2, [sp, #0]
   b93a8:	492b      	ldr	r1, [pc, #172]	; (b9458 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b93aa:	aa06      	add	r2, sp, #24
   b93ac:	2001      	movs	r0, #1
   b93ae:	f7fe fb41 	bl	b7a34 <log_message>
                    impl->peers_.removeOne(*peer);
   b93b2:	4631      	mov	r1, r6
   b93b4:	f104 0018 	add.w	r0, r4, #24
   b93b8:	f7ff ff35 	bl	b9226 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b93bc:	e79f      	b.n	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b93be:	89a9      	ldrh	r1, [r5, #12]
   b93c0:	4620      	mov	r0, r4
   b93c2:	f7ff fb47 	bl	b8a54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b93c6:	2800      	cmp	r0, #0
   b93c8:	d099      	beq.n	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b93ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b93cc:	2b00      	cmp	r3, #0
   b93ce:	d096      	beq.n	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b93d0:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b93d2:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b93d4:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b93d8:	d001      	beq.n	b93de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b93da:	2e10      	cmp	r6, #16
   b93dc:	d117      	bne.n	b940e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b93de:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b93e0:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b93e2:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b93e4:	2506      	movs	r5, #6
                        };
   b93e6:	f88d 3015 	strb.w	r3, [sp, #21]
   b93ea:	9104      	str	r1, [sp, #16]
   b93ec:	f88d 2014 	strb.w	r2, [sp, #20]
   b93f0:	9006      	str	r0, [sp, #24]
   b93f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b93f6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b93f8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b93fc:	9508      	str	r5, [sp, #32]
   b93fe:	e883 0003 	stmia.w	r3, {r0, r1}
   b9402:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9404:	a906      	add	r1, sp, #24
   b9406:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b940a:	4798      	blx	r3
   b940c:	e777      	b.n	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b940e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9410:	bf01      	itttt	eq
   b9412:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b9414:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9416:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b941a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b941c:	bf0f      	iteee	eq
   b941e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b9422:	461a      	movne	r2, r3
   b9424:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b9426:	461d      	movne	r5, r3
   b9428:	e7dd      	b.n	b93e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b942a:	89a9      	ldrh	r1, [r5, #12]
   b942c:	4620      	mov	r0, r4
   b942e:	f7ff fb11 	bl	b8a54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9432:	4601      	mov	r1, r0
   b9434:	2800      	cmp	r0, #0
   b9436:	f43f af62 	beq.w	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b943a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b943c:	2b00      	cmp	r3, #0
   b943e:	f43f af5e 	beq.w	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9442:	686b      	ldr	r3, [r5, #4]
   b9444:	9306      	str	r3, [sp, #24]
   b9446:	aa06      	add	r2, sp, #24
   b9448:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b944a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b944e:	4798      	blx	r3
   b9450:	e755      	b.n	b92fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9452:	bf00      	nop
   b9454:	000bdb2c 	.word	0x000bdb2c
   b9458:	000bdaab 	.word	0x000bdaab
   b945c:	000bdb52 	.word	0x000bdb52
   b9460:	000bdb6f 	.word	0x000bdb6f

000b9464 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9464:	b513      	push	{r0, r1, r4, lr}
   b9466:	460b      	mov	r3, r1
   b9468:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b946a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b946e:	466c      	mov	r4, sp
   b9470:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9474:	e893 0003 	ldmia.w	r3, {r0, r1}
   b9478:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b947c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9480:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9484:	b002      	add	sp, #8
   b9486:	bd10      	pop	{r4, pc}

000b9488 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b9488:	b538      	push	{r3, r4, r5, lr}
   b948a:	4605      	mov	r5, r0
   b948c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b948e:	f7ff ffe9 	bl	b9464 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9492:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9494:	68a2      	ldr	r2, [r4, #8]
   b9496:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9498:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b949a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b949c:	68e2      	ldr	r2, [r4, #12]
   b949e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b94a0:	60e3      	str	r3, [r4, #12]
      }
   b94a2:	bd38      	pop	{r3, r4, r5, pc}

000b94a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b94a4:	b570      	push	{r4, r5, r6, lr}
   b94a6:	4604      	mov	r4, r0
   b94a8:	b08c      	sub	sp, #48	; 0x30
   b94aa:	460e      	mov	r6, r1
   b94ac:	9201      	str	r2, [sp, #4]
   b94ae:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b94b0:	f7ff fab0 	bl	b8a14 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b94b4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b94b6:	9901      	ldr	r1, [sp, #4]
   b94b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b94bc:	f7ff f82e 	bl	b851c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b94c0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b94c4:	b1cd      	cbz	r5, b94fa <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b94c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b94c8:	9502      	str	r5, [sp, #8]
   b94ca:	a902      	add	r1, sp, #8
   b94cc:	a804      	add	r0, sp, #16
   b94ce:	9303      	str	r3, [sp, #12]
   b94d0:	f7ff fcaa 	bl	b8e28 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b94d4:	2300      	movs	r3, #0
	__x.swap(*this);
   b94d6:	a908      	add	r1, sp, #32
   b94d8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b94da:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b94dc:	f7ff ffd4 	bl	b9488 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b94e0:	4631      	mov	r1, r6
   b94e2:	a808      	add	r0, sp, #32
   b94e4:	f7ff ffd0 	bl	b9488 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b94e8:	a808      	add	r0, sp, #32
   b94ea:	f7fc ff6a 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
   b94ee:	a804      	add	r0, sp, #16
   b94f0:	f7fc ff67 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
    }
   b94f4:	4620      	mov	r0, r4
   b94f6:	b00c      	add	sp, #48	; 0x30
   b94f8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b94fa:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b94fc:	e7ea      	b.n	b94d4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b9500 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b9500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9504:	b087      	sub	sp, #28
   b9506:	461d      	mov	r5, r3
   b9508:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b950c:	4680      	mov	r8, r0
   b950e:	468b      	mov	fp, r1
   b9510:	4692      	mov	sl, r2
   b9512:	9912      	ldr	r1, [sp, #72]	; 0x48
   b9514:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9516:	2200      	movs	r2, #0
   b9518:	2068      	movs	r0, #104	; 0x68
   b951a:	9102      	str	r1, [sp, #8]
   b951c:	9204      	str	r2, [sp, #16]
   b951e:	f7fb fb8c 	bl	b4c3a <_Znwj>
	  auto __pi = ::new (__mem)
   b9522:	1e06      	subs	r6, r0, #0
   b9524:	f106 090c 	add.w	r9, r6, #12
   b9528:	d018      	beq.n	b955c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b952a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b952c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b952e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9532:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9534:	4a15      	ldr	r2, [pc, #84]	; (b958c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b9536:	f847 2b20 	str.w	r2, [r7], #32
   b953a:	9b03      	ldr	r3, [sp, #12]
   b953c:	9100      	str	r1, [sp, #0]
   b953e:	465a      	mov	r2, fp
   b9540:	4651      	mov	r1, sl
   b9542:	4648      	mov	r0, r9
   b9544:	f7ff ffae 	bl	b94a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b9548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b954a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b954c:	682b      	ldr	r3, [r5, #0]
   b954e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b9550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9552:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b9556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9558:	6823      	ldr	r3, [r4, #0]
   b955a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b955c:	a904      	add	r1, sp, #16
   b955e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b9560:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b9564:	f7ff fd08 	bl	b8f78 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b9568:	a805      	add	r0, sp, #20
   b956a:	f7fc fbe9 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b956e:	f8d8 3000 	ldr.w	r3, [r8]
   b9572:	b93b      	cbnz	r3, b9584 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b9574:	4a06      	ldr	r2, [pc, #24]	; (b9590 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b9576:	4907      	ldr	r1, [pc, #28]	; (b9594 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b9578:	200a      	movs	r0, #10
}
   b957a:	b007      	add	sp, #28
   b957c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b9580:	f7fe ba50 	b.w	b7a24 <panic_>
}
   b9584:	b007      	add	sp, #28
   b9586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b958a:	bf00      	nop
   b958c:	000bdbe8 	.word	0x000bdbe8
   b9590:	000b7621 	.word	0x000b7621
   b9594:	000bda94 	.word	0x000bda94

000b9598 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9598:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b959a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b959c:	4604      	mov	r4, r0
   b959e:	460d      	mov	r5, r1
   b95a0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b95a2:	d914      	bls.n	b95ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b95a4:	4290      	cmp	r0, r2
   b95a6:	d213      	bcs.n	b95d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b95a8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b95ac:	1a75      	subs	r5, r6, r1
   b95ae:	f1a1 0708 	sub.w	r7, r1, #8
   b95b2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b95b4:	42b7      	cmp	r7, r6
   b95b6:	d018      	beq.n	b95ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b95b8:	b11c      	cbz	r4, b95c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b95ba:	4631      	mov	r1, r6
   b95bc:	4620      	mov	r0, r4
   b95be:	f7ff fc60 	bl	b8e82 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b95c2:	1d30      	adds	r0, r6, #4
   b95c4:	f7fc fbbc 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b95c8:	3e08      	subs	r6, #8
   b95ca:	3c08      	subs	r4, #8
   b95cc:	e7f2      	b.n	b95b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b95ce:	d00c      	beq.n	b95ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b95d0:	42b5      	cmp	r5, r6
   b95d2:	d00a      	beq.n	b95ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b95d4:	b11c      	cbz	r4, b95de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b95d6:	4629      	mov	r1, r5
   b95d8:	4620      	mov	r0, r4
   b95da:	f7ff fc52 	bl	b8e82 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b95de:	1d28      	adds	r0, r5, #4
   b95e0:	f7fc fbae 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b95e4:	3508      	adds	r5, #8
   b95e6:	3408      	adds	r4, #8
   b95e8:	e7f2      	b.n	b95d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b95ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b95ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b95ec:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b95ee:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b95f0:	4605      	mov	r5, r0
        if (n > 0) {
   b95f2:	dd11      	ble.n	b9618 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b95f4:	00f0      	lsls	r0, r6, #3
   b95f6:	f7fe fb09 	bl	b7c0c <malloc>
            if (!d) {
   b95fa:	4604      	mov	r4, r0
   b95fc:	b158      	cbz	r0, b9616 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b95fe:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9602:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9606:	f7ff ffc7 	bl	b9598 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b960a:	6828      	ldr	r0, [r5, #0]
   b960c:	f7fe fb06 	bl	b7c1c <free>
        data_ = d;
   b9610:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9612:	60ae      	str	r6, [r5, #8]
        return true;
   b9614:	2001      	movs	r0, #1
    }
   b9616:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9618:	2400      	movs	r4, #0
   b961a:	e7f6      	b.n	b960a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b961c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b961c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b961e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9620:	6845      	ldr	r5, [r0, #4]
   b9622:	4668      	mov	r0, sp
   b9624:	f7ff fc2d 	bl	b8e82 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9628:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b962c:	4299      	cmp	r1, r3
   b962e:	da10      	bge.n	b9652 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9630:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9632:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9634:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9638:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b963c:	4629      	mov	r1, r5
   b963e:	f105 0008 	add.w	r0, r5, #8
   b9642:	f7ff ffa9 	bl	b9598 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9646:	b98d      	cbnz	r5, b966c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9648:	6863      	ldr	r3, [r4, #4]
   b964a:	3301      	adds	r3, #1
   b964c:	6063      	str	r3, [r4, #4]
    return true;
   b964e:	2601      	movs	r6, #1
   b9650:	e006      	b.n	b9660 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9652:	3101      	adds	r1, #1
   b9654:	4620      	mov	r0, r4
   b9656:	f7ff ffc9 	bl	b95ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b965a:	4606      	mov	r6, r0
   b965c:	2800      	cmp	r0, #0
   b965e:	d1e7      	bne.n	b9630 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9660:	a801      	add	r0, sp, #4
   b9662:	f7fc fb6d 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9666:	4630      	mov	r0, r6
   b9668:	b002      	add	sp, #8
   b966a:	bd70      	pop	{r4, r5, r6, pc}
   b966c:	4669      	mov	r1, sp
   b966e:	4628      	mov	r0, r5
   b9670:	f7ff fc07 	bl	b8e82 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9674:	e7e8      	b.n	b9648 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9676:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b967a:	4604      	mov	r4, r0
   b967c:	460d      	mov	r5, r1
   b967e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9680:	d914      	bls.n	b96ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9682:	4290      	cmp	r0, r2
   b9684:	d213      	bcs.n	b96ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9686:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b968a:	1a75      	subs	r5, r6, r1
   b968c:	f1a1 0708 	sub.w	r7, r1, #8
   b9690:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9692:	42b7      	cmp	r7, r6
   b9694:	d018      	beq.n	b96c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9696:	b11c      	cbz	r4, b96a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9698:	4631      	mov	r1, r6
   b969a:	4620      	mov	r0, r4
   b969c:	f7ff fbe3 	bl	b8e66 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b96a0:	1d30      	adds	r0, r6, #4
   b96a2:	f7fc fb4d 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b96a6:	3e08      	subs	r6, #8
   b96a8:	3c08      	subs	r4, #8
   b96aa:	e7f2      	b.n	b9692 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b96ac:	d00c      	beq.n	b96c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b96ae:	42b5      	cmp	r5, r6
   b96b0:	d00a      	beq.n	b96c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b96b2:	b11c      	cbz	r4, b96bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b96b4:	4629      	mov	r1, r5
   b96b6:	4620      	mov	r0, r4
   b96b8:	f7ff fbd5 	bl	b8e66 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b96bc:	1d28      	adds	r0, r5, #4
   b96be:	f7fc fb3f 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b96c2:	3508      	adds	r5, #8
   b96c4:	3408      	adds	r4, #8
   b96c6:	e7f2      	b.n	b96ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b96c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b96ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b96ca:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b96cc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b96ce:	4605      	mov	r5, r0
        if (n > 0) {
   b96d0:	dd11      	ble.n	b96f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b96d2:	00f0      	lsls	r0, r6, #3
   b96d4:	f7fe fa9a 	bl	b7c0c <malloc>
            if (!d) {
   b96d8:	4604      	mov	r4, r0
   b96da:	b158      	cbz	r0, b96f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b96dc:	e9d5 1200 	ldrd	r1, r2, [r5]
   b96e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b96e4:	f7ff ffc7 	bl	b9676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b96e8:	6828      	ldr	r0, [r5, #0]
   b96ea:	f7fe fa97 	bl	b7c1c <free>
        data_ = d;
   b96ee:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b96f0:	60ae      	str	r6, [r5, #8]
        return true;
   b96f2:	2001      	movs	r0, #1
    }
   b96f4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b96f6:	2400      	movs	r4, #0
   b96f8:	e7f6      	b.n	b96e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b96fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b96fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b96fc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b96fe:	6845      	ldr	r5, [r0, #4]
   b9700:	4668      	mov	r0, sp
   b9702:	f7ff fbb0 	bl	b8e66 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9706:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b970a:	4299      	cmp	r1, r3
   b970c:	da10      	bge.n	b9730 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b970e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9710:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9712:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9716:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b971a:	4629      	mov	r1, r5
   b971c:	f105 0008 	add.w	r0, r5, #8
   b9720:	f7ff ffa9 	bl	b9676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9724:	b98d      	cbnz	r5, b974a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9726:	6863      	ldr	r3, [r4, #4]
   b9728:	3301      	adds	r3, #1
   b972a:	6063      	str	r3, [r4, #4]
    return true;
   b972c:	2601      	movs	r6, #1
   b972e:	e006      	b.n	b973e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9730:	3101      	adds	r1, #1
   b9732:	4620      	mov	r0, r4
   b9734:	f7ff ffc9 	bl	b96ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9738:	4606      	mov	r6, r0
   b973a:	2800      	cmp	r0, #0
   b973c:	d1e7      	bne.n	b970e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b973e:	a801      	add	r0, sp, #4
   b9740:	f7fc fafe 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9744:	4630      	mov	r0, r6
   b9746:	b002      	add	sp, #8
   b9748:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b974a:	4669      	mov	r1, sp
   b974c:	4628      	mov	r0, r5
   b974e:	f7ff fb8a 	bl	b8e66 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9752:	e7e8      	b.n	b9726 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9754 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9758:	4617      	mov	r7, r2
   b975a:	b0a1      	sub	sp, #132	; 0x84
   b975c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b975e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9760:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9762:	f7ff f81f 	bl	b87a4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9766:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9768:	7923      	ldrb	r3, [r4, #4]
   b976a:	b953      	cbnz	r3, b9782 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b976c:	4639      	mov	r1, r7
   b976e:	4640      	mov	r0, r8
   b9770:	f7ff fb79 	bl	b8e66 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9774:	a80a      	add	r0, sp, #40	; 0x28
   b9776:	f7ff f823 	bl	b87c0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b977a:	4640      	mov	r0, r8
   b977c:	b021      	add	sp, #132	; 0x84
   b977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9782:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b9784:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b9788:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b978c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b978e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b9792:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b9796:	9b03      	ldr	r3, [sp, #12]
   b9798:	429d      	cmp	r5, r3
   b979a:	d021      	beq.n	b97e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b979c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b97a0:	4658      	mov	r0, fp
   b97a2:	f109 0114 	add.w	r1, r9, #20
   b97a6:	f7ff f8aa 	bl	b88fe <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b97aa:	b1b8      	cbz	r0, b97dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b97ac:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b97b0:	4650      	mov	r0, sl
   b97b2:	f7ff f8a4 	bl	b88fe <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b97b6:	b188      	cbz	r0, b97dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b97b8:	6823      	ldr	r3, [r4, #0]
   b97ba:	f8d9 2000 	ldr.w	r2, [r9]
   b97be:	4053      	eors	r3, r2
   b97c0:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b97c4:	d10a      	bne.n	b97dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b97c6:	2220      	movs	r2, #32
   b97c8:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b97cc:	4a5e      	ldr	r2, [pc, #376]	; (b9948 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b97ce:	9200      	str	r2, [sp, #0]
   b97d0:	aa15      	add	r2, sp, #84	; 0x54
   b97d2:	495e      	ldr	r1, [pc, #376]	; (b994c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b97d4:	2032      	movs	r0, #50	; 0x32
   b97d6:	f7fe f92d 	bl	b7a34 <log_message>
   b97da:	e7c7      	b.n	b976c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b97dc:	3508      	adds	r5, #8
   b97de:	e7da      	b.n	b9796 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b97e0:	4650      	mov	r0, sl
   b97e2:	f7ff f85d 	bl	b88a0 <_ZNK8particle7BleUuid7isValidEv>
   b97e6:	b960      	cbnz	r0, b9802 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b97e8:	4959      	ldr	r1, [pc, #356]	; (b9950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b97ea:	2201      	movs	r2, #1
   b97ec:	a815      	add	r0, sp, #84	; 0x54
   b97ee:	ad15      	add	r5, sp, #84	; 0x54
   b97f0:	f7ff f82e 	bl	b8850 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b97f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b97f6:	46d4      	mov	ip, sl
   b97f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b97fc:	682b      	ldr	r3, [r5, #0]
   b97fe:	f8cc 3000 	str.w	r3, [ip]
   b9802:	6833      	ldr	r3, [r6, #0]
   b9804:	e9d3 5300 	ldrd	r5, r3, [r3]
   b9808:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b980c:	455d      	cmp	r5, fp
   b980e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b9810:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b9812:	d06e      	beq.n	b98f2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b9814:	f855 0b08 	ldr.w	r0, [r5], #8
   b9818:	f7ff f871 	bl	b88fe <_ZNK8particle7BleUuideqERKS0_>
   b981c:	2800      	cmp	r0, #0
   b981e:	d0f5      	beq.n	b980c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b9820:	f104 0a14 	add.w	sl, r4, #20
   b9824:	4650      	mov	r0, sl
   b9826:	f7ff f83b 	bl	b88a0 <_ZNK8particle7BleUuid7isValidEv>
   b982a:	b988      	cbnz	r0, b9850 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b982c:	4b49      	ldr	r3, [pc, #292]	; (b9954 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b982e:	4948      	ldr	r1, [pc, #288]	; (b9950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9830:	881a      	ldrh	r2, [r3, #0]
   b9832:	3201      	adds	r2, #1
   b9834:	b292      	uxth	r2, r2
   b9836:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9838:	a815      	add	r0, sp, #84	; 0x54
   b983a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b983c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b983e:	f7ff f826 	bl	b888e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9844:	46d4      	mov	ip, sl
   b9846:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b984a:	682b      	ldr	r3, [r5, #0]
   b984c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9850:	4b41      	ldr	r3, [pc, #260]	; (b9958 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9852:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9854:	2228      	movs	r2, #40	; 0x28
   b9856:	2100      	movs	r1, #0
   b9858:	a816      	add	r0, sp, #88	; 0x58
   b985a:	f001 fe43 	bl	bb4e4 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b985e:	4651      	mov	r1, sl
   b9860:	a804      	add	r0, sp, #16
   b9862:	f7ff f82f 	bl	b88c4 <_ZN8particle7BleUuid7halUUIDEv>
   b9866:	ab04      	add	r3, sp, #16
   b9868:	aa18      	add	r2, sp, #96	; 0x60
   b986a:	f10d 0c20 	add.w	ip, sp, #32
   b986e:	6818      	ldr	r0, [r3, #0]
   b9870:	6859      	ldr	r1, [r3, #4]
   b9872:	4615      	mov	r5, r2
   b9874:	c503      	stmia	r5!, {r0, r1}
   b9876:	3308      	adds	r3, #8
   b9878:	4563      	cmp	r3, ip
   b987a:	462a      	mov	r2, r5
   b987c:	d1f7      	bne.n	b986e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b987e:	6818      	ldr	r0, [r3, #0]
   b9880:	6028      	str	r0, [r5, #0]
    return value_;
   b9882:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9884:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9888:	f8d9 3000 	ldr.w	r3, [r9]
   b988c:	8a9b      	ldrh	r3, [r3, #20]
   b988e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b9892:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9894:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b9896:	4b31      	ldr	r3, [pc, #196]	; (b995c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9898:	2200      	movs	r2, #0
   b989a:	1da1      	adds	r1, r4, #6
   b989c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b989e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b98a2:	f7fd ff3f 	bl	b7724 <hal_ble_gatt_server_add_characteristic>
   b98a6:	2800      	cmp	r0, #0
   b98a8:	f47f af60 	bne.w	b976c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b98ac:	2301      	movs	r3, #1
   b98ae:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b98b0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b98b2:	4639      	mov	r1, r7
        return characteristics_;
   b98b4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b98b6:	a80d      	add	r0, sp, #52	; 0x34
   b98b8:	f7ff fad5 	bl	b8e66 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b98bc:	4620      	mov	r0, r4
   b98be:	a90d      	add	r1, sp, #52	; 0x34
   b98c0:	f7ff ff1b 	bl	b96fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b98c4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b98c6:	a80e      	add	r0, sp, #56	; 0x38
   b98c8:	f7fc fa3a 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98cc:	2c00      	cmp	r4, #0
   b98ce:	f47f af4d 	bne.w	b976c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b98d2:	2320      	movs	r3, #32
   b98d4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b98d8:	4b21      	ldr	r3, [pc, #132]	; (b9960 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b98da:	9300      	str	r3, [sp, #0]
   b98dc:	aa0d      	add	r2, sp, #52	; 0x34
   b98de:	4623      	mov	r3, r4
   b98e0:	e777      	b.n	b97d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b98e2:	4639      	mov	r1, r7
   b98e4:	4640      	mov	r0, r8
   b98e6:	f7ff fabe 	bl	b8e66 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b98ea:	a80c      	add	r0, sp, #48	; 0x30
   b98ec:	f7fc fa28 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98f0:	e740      	b.n	b9774 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b98f2:	a80b      	add	r0, sp, #44	; 0x2c
   b98f4:	f7ff f936 	bl	b8b64 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b98f8:	4651      	mov	r1, sl
   b98fa:	a815      	add	r0, sp, #84	; 0x54
   b98fc:	f7fe ffe2 	bl	b88c4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b9900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9902:	2300      	movs	r3, #0
   b9904:	3214      	adds	r2, #20
   b9906:	a915      	add	r1, sp, #84	; 0x54
   b9908:	2001      	movs	r0, #1
   b990a:	f7fd fee3 	bl	b76d4 <hal_ble_gatt_server_add_service>
   b990e:	2800      	cmp	r0, #0
   b9910:	d1e7      	bne.n	b98e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b9912:	6835      	ldr	r5, [r6, #0]
   b9914:	a90b      	add	r1, sp, #44	; 0x2c
   b9916:	a80d      	add	r0, sp, #52	; 0x34
   b9918:	f7ff fab3 	bl	b8e82 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b991c:	4628      	mov	r0, r5
   b991e:	a90d      	add	r1, sp, #52	; 0x34
   b9920:	f7ff fe7c 	bl	b961c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9924:	4605      	mov	r5, r0
   b9926:	a80e      	add	r0, sp, #56	; 0x38
   b9928:	f7fc fa0a 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b992c:	2d00      	cmp	r5, #0
   b992e:	d0d8      	beq.n	b98e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9930:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9932:	6853      	ldr	r3, [r2, #4]
   b9934:	6812      	ldr	r2, [r2, #0]
   b9936:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b993a:	3b01      	subs	r3, #1
   b993c:	a80c      	add	r0, sp, #48	; 0x30
   b993e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9942:	f7fc f9fd 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9946:	e76b      	b.n	b9820 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b9948:	000bdb8e 	.word	0x000bdb8e
   b994c:	000bdaab 	.word	0x000bdaab
   b9950:	000bdc3c 	.word	0x000bdc3c
   b9954:	2003e5fc 	.word	0x2003e5fc
   b9958:	002c0003 	.word	0x002c0003
   b995c:	000b8cfd 	.word	0x000b8cfd
   b9960:	000bdbb9 	.word	0x000bdbb9

000b9964 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9964:	4802      	ldr	r0, [pc, #8]	; (b9970 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9966:	2300      	movs	r3, #0
   b9968:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b996a:	f7fd bf33 	b.w	b77d4 <os_mutex_recursive_create>
   b996e:	bf00      	nop
   b9970:	2003e600 	.word	0x2003e600

000b9974 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9976:	4606      	mov	r6, r0
   b9978:	460d      	mov	r5, r1
  size_t n = 0;
   b997a:	188f      	adds	r7, r1, r2
   b997c:	2400      	movs	r4, #0
  while (size--) {
   b997e:	42bd      	cmp	r5, r7
   b9980:	d00c      	beq.n	b999c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9982:	6833      	ldr	r3, [r6, #0]
   b9984:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9988:	689b      	ldr	r3, [r3, #8]
   b998a:	4630      	mov	r0, r6
   b998c:	4798      	blx	r3
     if (chunk>=0)
   b998e:	1e03      	subs	r3, r0, #0
   b9990:	db01      	blt.n	b9996 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9992:	441c      	add	r4, r3
  while (size--) {
   b9994:	e7f3      	b.n	b997e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9996:	2c00      	cmp	r4, #0
   b9998:	bf08      	it	eq
   b999a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b999c:	4620      	mov	r0, r4
   b999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b99a0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b99a0:	b513      	push	{r0, r1, r4, lr}
   b99a2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b99a4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b99a6:	b159      	cbz	r1, b99c0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b99a8:	9101      	str	r1, [sp, #4]
   b99aa:	f7fb f8eb 	bl	b4b84 <strlen>
   b99ae:	6823      	ldr	r3, [r4, #0]
   b99b0:	9901      	ldr	r1, [sp, #4]
   b99b2:	68db      	ldr	r3, [r3, #12]
   b99b4:	4602      	mov	r2, r0
   b99b6:	4620      	mov	r0, r4
    }
   b99b8:	b002      	add	sp, #8
   b99ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b99be:	4718      	bx	r3
    }
   b99c0:	b002      	add	sp, #8
   b99c2:	bd10      	pop	{r4, pc}

000b99c4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b99c4:	b508      	push	{r3, lr}
  return write(str);
   b99c6:	f7ff ffeb 	bl	b99a0 <_ZN5Print5writeEPKc>
}
   b99ca:	bd08      	pop	{r3, pc}

000b99cc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b99cc:	6803      	ldr	r3, [r0, #0]
   b99ce:	689b      	ldr	r3, [r3, #8]
   b99d0:	4718      	bx	r3

000b99d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b99d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b99d4:	210d      	movs	r1, #13
{
   b99d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b99d8:	f7ff fff8 	bl	b99cc <_ZN5Print5printEc>
  n += print('\n');
   b99dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b99de:	4604      	mov	r4, r0
  n += print('\n');
   b99e0:	4628      	mov	r0, r5
   b99e2:	f7ff fff3 	bl	b99cc <_ZN5Print5printEc>
  return n;
}
   b99e6:	4420      	add	r0, r4
   b99e8:	bd38      	pop	{r3, r4, r5, pc}

000b99ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b99ea:	b538      	push	{r3, r4, r5, lr}
   b99ec:	4605      	mov	r5, r0
  return write(str);
   b99ee:	f7ff ffd7 	bl	b99a0 <_ZN5Print5writeEPKc>
   b99f2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b99f4:	4628      	mov	r0, r5
   b99f6:	f7ff ffec 	bl	b99d2 <_ZN5Print7printlnEv>
  return n;
}
   b99fa:	4420      	add	r0, r4
   b99fc:	bd38      	pop	{r3, r4, r5, pc}

000b99fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b99fe:	b530      	push	{r4, r5, lr}
   b9a00:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9a02:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9a04:	2a01      	cmp	r2, #1
  *str = '\0';
   b9a06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9a0a:	bf98      	it	ls
   b9a0c:	220a      	movls	r2, #10
   b9a0e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9a10:	460d      	mov	r5, r1
   b9a12:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9a16:	fb01 5312 	mls	r3, r1, r2, r5
   b9a1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9a1e:	2b09      	cmp	r3, #9
   b9a20:	bf94      	ite	ls
   b9a22:	3330      	addls	r3, #48	; 0x30
   b9a24:	3337      	addhi	r3, #55	; 0x37
   b9a26:	b2db      	uxtb	r3, r3
  } while(n);
   b9a28:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9a2a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9a2e:	d9ef      	bls.n	b9a10 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9a30:	4621      	mov	r1, r4
   b9a32:	f7ff ffb5 	bl	b99a0 <_ZN5Print5writeEPKc>
}
   b9a36:	b00b      	add	sp, #44	; 0x2c
   b9a38:	bd30      	pop	{r4, r5, pc}
	...

000b9a3c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9a3c:	4b01      	ldr	r3, [pc, #4]	; (b9a44 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9a3e:	4a02      	ldr	r2, [pc, #8]	; (b9a48 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9a40:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9a42:	4770      	bx	lr
   b9a44:	2003e608 	.word	0x2003e608
   b9a48:	000bdc5c 	.word	0x000bdc5c

000b9a4c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b9a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b9a50:	4a15      	ldr	r2, [pc, #84]	; (b9aa8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b9a52:	f8df 8060 	ldr.w	r8, [pc, #96]	; b9ab4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b9a56:	e9d2 6300 	ldrd	r6, r3, [r2]
   b9a5a:	1980      	adds	r0, r0, r6
   b9a5c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b9a60:	4b12      	ldr	r3, [pc, #72]	; (b9aac <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b9a62:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b9a66:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b9a6a:	1986      	adds	r6, r0, r6
   b9a6c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b9a70:	42bb      	cmp	r3, r7
   b9a72:	bf08      	it	eq
   b9a74:	42b2      	cmpeq	r2, r6
{
   b9a76:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b9a78:	d013      	beq.n	b9aa2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b9a7a:	a903      	add	r1, sp, #12
   b9a7c:	4668      	mov	r0, sp
   b9a7e:	e9cd 6700 	strd	r6, r7, [sp]
   b9a82:	f7fe f923 	bl	b7ccc <localtime_r>
	calendar_time.tm_year += 1900;
   b9a86:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9a88:	4d09      	ldr	r5, [pc, #36]	; (b9ab0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b9a8a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9a8e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b9a90:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b9a9a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9a9e:	6823      	ldr	r3, [r4, #0]
   b9aa0:	602b      	str	r3, [r5, #0]
    }
}
   b9aa2:	b00c      	add	sp, #48	; 0x30
   b9aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9aa8:	2003e640 	.word	0x2003e640
   b9aac:	2003e638 	.word	0x2003e638
   b9ab0:	2003e610 	.word	0x2003e610
   b9ab4:	2003e648 	.word	0x2003e648

000b9ab8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b9ab8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9aba:	2000      	movs	r0, #0
   b9abc:	f7fe f896 	bl	b7bec <spark_sync_time_pending>
   b9ac0:	b128      	cbz	r0, b9ace <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9ac2:	f7fe f87b 	bl	b7bbc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9ac6:	f080 0001 	eor.w	r0, r0, #1
   b9aca:	b2c0      	uxtb	r0, r0
    }
   b9acc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9ace:	2001      	movs	r0, #1
   b9ad0:	e7fc      	b.n	b9acc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b9ad4 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b9ad4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b9ad6:	f7ff ffb9 	bl	b9a4c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b9ada:	4b02      	ldr	r3, [pc, #8]	; (b9ae4 <_ZN9TimeClass5monthEx+0x10>)
   b9adc:	6918      	ldr	r0, [r3, #16]
}
   b9ade:	3001      	adds	r0, #1
   b9ae0:	bd08      	pop	{r3, pc}
   b9ae2:	bf00      	nop
   b9ae4:	2003e610 	.word	0x2003e610

000b9ae8 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b9ae8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b9aec:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b9af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b9af4:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b9af6:	d411      	bmi.n	b9b1c <_ZN9TimeClass4zoneEf+0x34>
   b9af8:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b9afc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b9b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9b04:	dc0a      	bgt.n	b9b1c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b9b06:	eddf 7a06 	vldr	s15, [pc, #24]	; b9b20 <_ZN9TimeClass4zoneEf+0x38>
   b9b0a:	ee60 7a27 	vmul.f32	s15, s0, s15
   b9b0e:	ee17 0a90 	vmov	r0, s15
   b9b12:	f7fa ff89 	bl	b4a28 <__aeabi_f2lz>
   b9b16:	4b03      	ldr	r3, [pc, #12]	; (b9b24 <_ZN9TimeClass4zoneEf+0x3c>)
   b9b18:	e9c3 0100 	strd	r0, r1, [r3]
}
   b9b1c:	bd08      	pop	{r3, pc}
   b9b1e:	bf00      	nop
   b9b20:	45610000 	.word	0x45610000
   b9b24:	2003e640 	.word	0x2003e640

000b9b28 <_ZN9TimeClass8beginDSTEv>:
    dst_cache = offset * 3600;
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   b9b28:	4b03      	ldr	r3, [pc, #12]	; (b9b38 <_ZN9TimeClass8beginDSTEv+0x10>)
   b9b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
   b9b2e:	4b03      	ldr	r3, [pc, #12]	; (b9b3c <_ZN9TimeClass8beginDSTEv+0x14>)
   b9b30:	e9c3 0100 	strd	r0, r1, [r3]
}
   b9b34:	4770      	bx	lr
   b9b36:	bf00      	nop
   b9b38:	2003e218 	.word	0x2003e218
   b9b3c:	2003e638 	.word	0x2003e638

000b9b40 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   b9b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9b42:	4602      	mov	r2, r0
   b9b44:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b9b46:	4668      	mov	r0, sp
    struct timeval tv = {
   b9b48:	2100      	movs	r1, #0
    };
   b9b4a:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   b9b4e:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b9b52:	f7fd fd85 	bl	b7660 <hal_rtc_set_time>
   b9b56:	4602      	mov	r2, r0
   b9b58:	b910      	cbnz	r0, b9b60 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   b9b5a:	4601      	mov	r1, r0
   b9b5c:	f7fd ffaa 	bl	b7ab4 <system_notify_time_changed>
    }
}
   b9b60:	b005      	add	sp, #20
   b9b62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9b68 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b9b68:	b530      	push	{r4, r5, lr}
   b9b6a:	b093      	sub	sp, #76	; 0x4c
   b9b6c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b9b70:	4b19      	ldr	r3, [pc, #100]	; (b9bd8 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b9b72:	4604      	mov	r4, r0
    t += time_zone_cache;
   b9b74:	e9d3 1000 	ldrd	r1, r0, [r3]
   b9b78:	9b01      	ldr	r3, [sp, #4]
   b9b7a:	1852      	adds	r2, r2, r1
   b9b7c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b9b80:	4816      	ldr	r0, [pc, #88]	; (b9bdc <_ZN9TimeClass7timeStrEx+0x74>)
   b9b82:	e9d0 1000 	ldrd	r1, r0, [r0]
   b9b86:	1852      	adds	r2, r2, r1
   b9b88:	eb43 0300 	adc.w	r3, r3, r0
   b9b8c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b9b90:	2224      	movs	r2, #36	; 0x24
   b9b92:	eb0d 0002 	add.w	r0, sp, r2
   b9b96:	2100      	movs	r1, #0
   b9b98:	f001 fca4 	bl	bb4e4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b9b9c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b9b9e:	a909      	add	r1, sp, #36	; 0x24
   b9ba0:	4668      	mov	r0, sp
   b9ba2:	f7fe f893 	bl	b7ccc <localtime_r>
    char ascstr[26] = {};
   b9ba6:	2216      	movs	r2, #22
   b9ba8:	4629      	mov	r1, r5
   b9baa:	a803      	add	r0, sp, #12
   b9bac:	9502      	str	r5, [sp, #8]
   b9bae:	f001 fc99 	bl	bb4e4 <memset>
    asctime_r(&calendar_time, ascstr);
   b9bb2:	a902      	add	r1, sp, #8
   b9bb4:	a809      	add	r0, sp, #36	; 0x24
   b9bb6:	f001 fc31 	bl	bb41c <asctime_r>
    int len = strlen(ascstr);
   b9bba:	a802      	add	r0, sp, #8
   b9bbc:	f7fa ffe2 	bl	b4b84 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b9bc0:	ab12      	add	r3, sp, #72	; 0x48
   b9bc2:	4418      	add	r0, r3
    return String(ascstr);
   b9bc4:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b9bc6:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b9bca:	4620      	mov	r0, r4
   b9bcc:	f7fe fc53 	bl	b8476 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9bd0:	4620      	mov	r0, r4
   b9bd2:	b013      	add	sp, #76	; 0x4c
   b9bd4:	bd30      	pop	{r4, r5, pc}
   b9bd6:	bf00      	nop
   b9bd8:	2003e640 	.word	0x2003e640
   b9bdc:	2003e638 	.word	0x2003e638

000b9be0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b9be0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b9be2:	2000      	movs	r0, #0
   b9be4:	f7fd fd2c 	bl	b7640 <hal_rtc_time_is_valid>
    if (rtcstate)
   b9be8:	4604      	mov	r4, r0
   b9bea:	b9a0      	cbnz	r0, b9c16 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b9bec:	f7fd ff2a 	bl	b7a44 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b9bf0:	2801      	cmp	r0, #1
   b9bf2:	d110      	bne.n	b9c16 <_ZN9TimeClass7isValidEv+0x36>
   b9bf4:	4620      	mov	r0, r4
   b9bf6:	f7fd ff55 	bl	b7aa4 <system_thread_get_state>
   b9bfa:	b960      	cbnz	r0, b9c16 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b9bfc:	f7ff ff5c 	bl	b9ab8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b9c00:	b910      	cbnz	r0, b9c08 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b9c02:	f7fd ffd3 	bl	b7bac <spark_process>
        while (_while() && !_condition()) {
   b9c06:	e7f9      	b.n	b9bfc <_ZN9TimeClass7isValidEv+0x1c>
   b9c08:	f7ff ff56 	bl	b9ab8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b9c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b9c10:	2000      	movs	r0, #0
   b9c12:	f7fd bd15 	b.w	b7640 <hal_rtc_time_is_valid>
}
   b9c16:	4620      	mov	r0, r4
   b9c18:	bd10      	pop	{r4, pc}

000b9c1a <_ZN9TimeClass3nowEv>:
{
   b9c1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b9c1c:	f7ff ffe0 	bl	b9be0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b9c20:	2210      	movs	r2, #16
   b9c22:	2100      	movs	r1, #0
   b9c24:	4668      	mov	r0, sp
   b9c26:	f001 fc5d 	bl	bb4e4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b9c2a:	2100      	movs	r1, #0
   b9c2c:	4668      	mov	r0, sp
   b9c2e:	f7fd fd0f 	bl	b7650 <hal_rtc_get_time>
}
   b9c32:	9800      	ldr	r0, [sp, #0]
   b9c34:	b005      	add	sp, #20
   b9c36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9c3c <_ZN9TimeClass4hourEv>:
{
   b9c3c:	b508      	push	{r3, lr}
	return hour(now());
   b9c3e:	f7ff ffec 	bl	b9c1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9c42:	17c1      	asrs	r1, r0, #31
   b9c44:	f7ff ff02 	bl	b9a4c <_ZL22Refresh_UnixTime_Cachex>
}
   b9c48:	4b01      	ldr	r3, [pc, #4]	; (b9c50 <_ZN9TimeClass4hourEv+0x14>)
   b9c4a:	6898      	ldr	r0, [r3, #8]
   b9c4c:	bd08      	pop	{r3, pc}
   b9c4e:	bf00      	nop
   b9c50:	2003e610 	.word	0x2003e610

000b9c54 <_ZN9TimeClass6minuteEv>:
{
   b9c54:	b508      	push	{r3, lr}
	return minute(now());
   b9c56:	f7ff ffe0 	bl	b9c1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9c5a:	17c1      	asrs	r1, r0, #31
   b9c5c:	f7ff fef6 	bl	b9a4c <_ZL22Refresh_UnixTime_Cachex>
}
   b9c60:	4b01      	ldr	r3, [pc, #4]	; (b9c68 <_ZN9TimeClass6minuteEv+0x14>)
   b9c62:	6858      	ldr	r0, [r3, #4]
   b9c64:	bd08      	pop	{r3, pc}
   b9c66:	bf00      	nop
   b9c68:	2003e610 	.word	0x2003e610

000b9c6c <_ZN9TimeClass3dayEv>:
{
   b9c6c:	b508      	push	{r3, lr}
	return day(now());
   b9c6e:	f7ff ffd4 	bl	b9c1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9c72:	17c1      	asrs	r1, r0, #31
   b9c74:	f7ff feea 	bl	b9a4c <_ZL22Refresh_UnixTime_Cachex>
}
   b9c78:	4b01      	ldr	r3, [pc, #4]	; (b9c80 <_ZN9TimeClass3dayEv+0x14>)
   b9c7a:	68d8      	ldr	r0, [r3, #12]
   b9c7c:	bd08      	pop	{r3, pc}
   b9c7e:	bf00      	nop
   b9c80:	2003e610 	.word	0x2003e610

000b9c84 <_ZN9TimeClass5monthEv>:
{
   b9c84:	b508      	push	{r3, lr}
	return month(now());
   b9c86:	f7ff ffc8 	bl	b9c1a <_ZN9TimeClass3nowEv>
}
   b9c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b9c8e:	17c1      	asrs	r1, r0, #31
   b9c90:	f7ff bf20 	b.w	b9ad4 <_ZN9TimeClass5monthEx>

000b9c94 <_ZN9TimeClass4yearEv>:
{
   b9c94:	b508      	push	{r3, lr}
	return year(now());
   b9c96:	f7ff ffc0 	bl	b9c1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9c9a:	17c1      	asrs	r1, r0, #31
   b9c9c:	f7ff fed6 	bl	b9a4c <_ZL22Refresh_UnixTime_Cachex>
}
   b9ca0:	4b01      	ldr	r3, [pc, #4]	; (b9ca8 <_ZN9TimeClass4yearEv+0x14>)
   b9ca2:	6958      	ldr	r0, [r3, #20]
   b9ca4:	bd08      	pop	{r3, pc}
   b9ca6:	bf00      	nop
   b9ca8:	2003e610 	.word	0x2003e610

000b9cac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9cac:	4b02      	ldr	r3, [pc, #8]	; (b9cb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9cae:	681a      	ldr	r2, [r3, #0]
   b9cb0:	4b02      	ldr	r3, [pc, #8]	; (b9cbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9cb2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9cb4:	4770      	bx	lr
   b9cb6:	bf00      	nop
   b9cb8:	2003e210 	.word	0x2003e210
   b9cbc:	2003e60c 	.word	0x2003e60c

000b9cc0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9cc0:	2100      	movs	r1, #0
   b9cc2:	f7fd becf 	b.w	b7a64 <system_delay_ms>
	...

000b9cc8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9cc8:	4b01      	ldr	r3, [pc, #4]	; (b9cd0 <_GLOBAL__sub_I_RGB+0x8>)
   b9cca:	2200      	movs	r2, #0
   b9ccc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9cce:	4770      	bx	lr
   b9cd0:	2003e650 	.word	0x2003e650

000b9cd4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9cd4:	4b01      	ldr	r3, [pc, #4]	; (b9cdc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9cd6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9cd8:	4770      	bx	lr
   b9cda:	bf00      	nop
   b9cdc:	2003e220 	.word	0x2003e220

000b9ce0 <serialEventRun>:
{
   b9ce0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9ce2:	4b0b      	ldr	r3, [pc, #44]	; (b9d10 <serialEventRun+0x30>)
   b9ce4:	b143      	cbz	r3, b9cf8 <serialEventRun+0x18>
   b9ce6:	f000 fc1f 	bl	ba528 <_Z16_fetch_usbserialv>
   b9cea:	6803      	ldr	r3, [r0, #0]
   b9cec:	691b      	ldr	r3, [r3, #16]
   b9cee:	4798      	blx	r3
   b9cf0:	2800      	cmp	r0, #0
   b9cf2:	dd01      	ble.n	b9cf8 <serialEventRun+0x18>
        serialEvent();
   b9cf4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9cf8:	4b06      	ldr	r3, [pc, #24]	; (b9d14 <serialEventRun+0x34>)
   b9cfa:	b143      	cbz	r3, b9d0e <serialEventRun+0x2e>
   b9cfc:	f000 fe98 	bl	baa30 <_Z22__fetch_global_Serial1v>
   b9d00:	6803      	ldr	r3, [r0, #0]
   b9d02:	691b      	ldr	r3, [r3, #16]
   b9d04:	4798      	blx	r3
   b9d06:	2800      	cmp	r0, #0
   b9d08:	dd01      	ble.n	b9d0e <serialEventRun+0x2e>
        serialEvent1();
   b9d0a:	f3af 8000 	nop.w
}
   b9d0e:	bd08      	pop	{r3, pc}
	...

000b9d18 <_post_loop>:
{
   b9d18:	b508      	push	{r3, lr}
	serialEventRun();
   b9d1a:	f7ff ffe1 	bl	b9ce0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9d1e:	f7fd fc87 	bl	b7630 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9d22:	4b01      	ldr	r3, [pc, #4]	; (b9d28 <_post_loop+0x10>)
   b9d24:	6018      	str	r0, [r3, #0]
}
   b9d26:	bd08      	pop	{r3, pc}
   b9d28:	2003e744 	.word	0x2003e744

000b9d2c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9d2c:	4805      	ldr	r0, [pc, #20]	; (b9d44 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9d2e:	4a06      	ldr	r2, [pc, #24]	; (b9d48 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9d30:	4906      	ldr	r1, [pc, #24]	; (b9d4c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9d32:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9d34:	1a12      	subs	r2, r2, r0
   b9d36:	f001 fbad 	bl	bb494 <memcpy>
    __backup_sram_signature = signature;
   b9d3a:	4b05      	ldr	r3, [pc, #20]	; (b9d50 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9d3c:	4a05      	ldr	r2, [pc, #20]	; (b9d54 <_Z33system_initialize_user_backup_ramv+0x28>)
   b9d3e:	601a      	str	r2, [r3, #0]
}
   b9d40:	bd08      	pop	{r3, pc}
   b9d42:	bf00      	nop
   b9d44:	2003f400 	.word	0x2003f400
   b9d48:	2003f404 	.word	0x2003f404
   b9d4c:	000be688 	.word	0x000be688
   b9d50:	2003f400 	.word	0x2003f400
   b9d54:	9a271c1e 	.word	0x9a271c1e

000b9d58 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9d58:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9d5a:	2300      	movs	r3, #0
   b9d5c:	9300      	str	r3, [sp, #0]
   b9d5e:	461a      	mov	r2, r3
   b9d60:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9d64:	f7fd feb8 	bl	b7ad8 <system_ctrl_set_result>
}
   b9d68:	b003      	add	sp, #12
   b9d6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9d70 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9d70:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9d72:	8843      	ldrh	r3, [r0, #2]
   b9d74:	2b0a      	cmp	r3, #10
   b9d76:	d008      	beq.n	b9d8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9d78:	2b50      	cmp	r3, #80	; 0x50
   b9d7a:	d10b      	bne.n	b9d94 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9d7c:	4b09      	ldr	r3, [pc, #36]	; (b9da4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9d7e:	681b      	ldr	r3, [r3, #0]
   b9d80:	b14b      	cbz	r3, b9d96 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9d82:	b003      	add	sp, #12
   b9d84:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9d88:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9d8a:	f7ff ffe5 	bl	b9d58 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9d8e:	b003      	add	sp, #12
   b9d90:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9d94:	2300      	movs	r3, #0
   b9d96:	9300      	str	r3, [sp, #0]
   b9d98:	461a      	mov	r2, r3
   b9d9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9d9e:	f7fd fe9b 	bl	b7ad8 <system_ctrl_set_result>
}
   b9da2:	e7f4      	b.n	b9d8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9da4:	2003e664 	.word	0x2003e664

000b9da8 <module_user_init_hook>:
{
   b9da8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9daa:	4812      	ldr	r0, [pc, #72]	; (b9df4 <module_user_init_hook+0x4c>)
   b9dac:	2100      	movs	r1, #0
   b9dae:	f7fd ff85 	bl	b7cbc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9db2:	4b11      	ldr	r3, [pc, #68]	; (b9df8 <module_user_init_hook+0x50>)
   b9db4:	681a      	ldr	r2, [r3, #0]
   b9db6:	4b11      	ldr	r3, [pc, #68]	; (b9dfc <module_user_init_hook+0x54>)
   b9db8:	429a      	cmp	r2, r3
   b9dba:	4b11      	ldr	r3, [pc, #68]	; (b9e00 <module_user_init_hook+0x58>)
   b9dbc:	bf0c      	ite	eq
   b9dbe:	2201      	moveq	r2, #1
   b9dc0:	2200      	movne	r2, #0
   b9dc2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9dc4:	d001      	beq.n	b9dca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9dc6:	f7ff ffb1 	bl	b9d2c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9dca:	f7fd fc21 	bl	b7610 <HAL_RNG_GetRandomNumber>
   b9dce:	4604      	mov	r4, r0
    srand(seed);
   b9dd0:	f001 fb90 	bl	bb4f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9dd4:	4b0b      	ldr	r3, [pc, #44]	; (b9e04 <module_user_init_hook+0x5c>)
   b9dd6:	b113      	cbz	r3, b9dde <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9dd8:	4620      	mov	r0, r4
   b9dda:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9dde:	2100      	movs	r1, #0
   b9de0:	4808      	ldr	r0, [pc, #32]	; (b9e04 <module_user_init_hook+0x5c>)
   b9de2:	f7fd ff0b 	bl	b7bfc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9dea:	4807      	ldr	r0, [pc, #28]	; (b9e08 <module_user_init_hook+0x60>)
   b9dec:	2100      	movs	r1, #0
   b9dee:	f7fd be69 	b.w	b7ac4 <system_ctrl_set_app_request_handler>
   b9df2:	bf00      	nop
   b9df4:	000b9cd5 	.word	0x000b9cd5
   b9df8:	2003f400 	.word	0x2003f400
   b9dfc:	9a271c1e 	.word	0x9a271c1e
   b9e00:	2003e660 	.word	0x2003e660
   b9e04:	00000000 	.word	0x00000000
   b9e08:	000b9d71 	.word	0x000b9d71

000b9e0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9e0c:	4770      	bx	lr

000b9e0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b9e0e:	2000      	movs	r0, #0
   b9e10:	4770      	bx	lr

000b9e12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9e12:	b510      	push	{r4, lr}
   b9e14:	2110      	movs	r1, #16
   b9e16:	4604      	mov	r4, r0
   b9e18:	f7fa ff15 	bl	b4c46 <_ZdlPvj>
   b9e1c:	4620      	mov	r0, r4
   b9e1e:	bd10      	pop	{r4, pc}

000b9e20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b9e20:	b508      	push	{r3, lr}
      { delete this; }
   b9e22:	f7ff fff6 	bl	b9e12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b9e26:	bd08      	pop	{r3, pc}

000b9e28 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b9e28:	b530      	push	{r4, r5, lr}
        type_(type) {
   b9e2a:	2200      	movs	r2, #0
   b9e2c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b9e30:	6002      	str	r2, [r0, #0]
   b9e32:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9e34:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b9e36:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9e38:	680c      	ldr	r4, [r1, #0]
   b9e3a:	8085      	strh	r5, [r0, #4]
   b9e3c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9e3e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b9e40:	bd30      	pop	{r4, r5, pc}

000b9e42 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b9e42:	b510      	push	{r4, lr}
   b9e44:	4604      	mov	r4, r0
    free((void*)msg_);
   b9e46:	6800      	ldr	r0, [r0, #0]
   b9e48:	f7fd fee8 	bl	b7c1c <free>
}
   b9e4c:	4620      	mov	r0, r4
   b9e4e:	bd10      	pop	{r4, pc}

000b9e50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9e50:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b9e52:	68c4      	ldr	r4, [r0, #12]
   b9e54:	b1f4      	cbz	r4, b9e94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b9e56:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b9e58:	2b02      	cmp	r3, #2
   b9e5a:	d103      	bne.n	b9e64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b9e5c:	f104 000c 	add.w	r0, r4, #12
   b9e60:	f7ff ffef 	bl	b9e42 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b9e64:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b9e66:	b135      	cbz	r5, b9e76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b9e68:	4628      	mov	r0, r5
   b9e6a:	f7fc faaa 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
   b9e6e:	2110      	movs	r1, #16
   b9e70:	4628      	mov	r0, r5
   b9e72:	f7fa fee8 	bl	b4c46 <_ZdlPvj>
   b9e76:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b9e78:	b135      	cbz	r5, b9e88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b9e7a:	4628      	mov	r0, r5
   b9e7c:	f7fc faa1 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
   b9e80:	2110      	movs	r1, #16
   b9e82:	4628      	mov	r0, r5
   b9e84:	f7fa fedf 	bl	b4c46 <_ZdlPvj>
   b9e88:	4620      	mov	r0, r4
   b9e8a:	2114      	movs	r1, #20
   b9e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9e90:	f7fa bed9 	b.w	b4c46 <_ZdlPvj>
   b9e94:	bd38      	pop	{r3, r4, r5, pc}

000b9e96 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   b9e96:	b507      	push	{r0, r1, r2, lr}
   b9e98:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   b9e9c:	6882      	ldr	r2, [r0, #8]
   b9e9e:	b90a      	cbnz	r2, b9ea4 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   b9ea0:	f000 ff06 	bl	bacb0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9ea4:	68c3      	ldr	r3, [r0, #12]
   b9ea6:	aa01      	add	r2, sp, #4
   b9ea8:	4669      	mov	r1, sp
   b9eaa:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   b9eac:	b003      	add	sp, #12
   b9eae:	f85d fb04 	ldr.w	pc, [sp], #4

000b9eb2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9eb2:	680b      	ldr	r3, [r1, #0]
   b9eb4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9eb6:	684b      	ldr	r3, [r1, #4]
   b9eb8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9eba:	b113      	cbz	r3, b9ec2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b9ebc:	685a      	ldr	r2, [r3, #4]
   b9ebe:	3201      	adds	r2, #1
   b9ec0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9ec2:	4770      	bx	lr

000b9ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b9ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9ec6:	4604      	mov	r4, r0
   b9ec8:	4668      	mov	r0, sp
   b9eca:	460d      	mov	r5, r1
   b9ecc:	f7ff fff1 	bl	b9eb2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9ed0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9ed2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9ed4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b9ed6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b9ed8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b9eda:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b9edc:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b9ede:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b9ee0:	f7fb ff2e 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b9ee4:	b135      	cbz	r5, b9ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b9ee6:	1d28      	adds	r0, r5, #4
   b9ee8:	f7fb ff2a 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9eec:	2108      	movs	r1, #8
   b9eee:	4628      	mov	r0, r5
   b9ef0:	f7fa fea9 	bl	b4c46 <_ZdlPvj>
        return p;
    }
   b9ef4:	4620      	mov	r0, r4
   b9ef6:	b003      	add	sp, #12
   b9ef8:	bd30      	pop	{r4, r5, pc}

000b9efa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b9efa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9efc:	b510      	push	{r4, lr}
      if (_M_empty())
   b9efe:	b90a      	cbnz	r2, b9f04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b9f00:	f000 fed6 	bl	bacb0 <_ZSt25__throw_bad_function_callv>
    }
   b9f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9f08:	68c3      	ldr	r3, [r0, #12]
   b9f0a:	4718      	bx	r3

000b9f0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9f0c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b9f0e:	6800      	ldr	r0, [r0, #0]
   b9f10:	f100 0110 	add.w	r1, r0, #16
   b9f14:	f7ff fff1 	bl	b9efa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b9f18:	bd08      	pop	{r3, pc}

000b9f1a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b9f1a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9f1c:	b510      	push	{r4, lr}
      if (_M_empty())
   b9f1e:	b90a      	cbnz	r2, b9f24 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b9f20:	f000 fec6 	bl	bacb0 <_ZSt25__throw_bad_function_callv>
    }
   b9f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9f28:	68c3      	ldr	r3, [r0, #12]
   b9f2a:	4718      	bx	r3

000b9f2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9f2c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b9f2e:	6800      	ldr	r0, [r0, #0]
   b9f30:	f100 0110 	add.w	r1, r0, #16
   b9f34:	f7ff fff1 	bl	b9f1a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b9f38:	bd08      	pop	{r3, pc}
	...

000b9f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b9f3c:	b538      	push	{r3, r4, r5, lr}
   b9f3e:	2300      	movs	r3, #0
   b9f40:	4604      	mov	r4, r0
   b9f42:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9f44:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b9f46:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9f48:	f7fa fe77 	bl	b4c3a <_Znwj>
   b9f4c:	b128      	cbz	r0, b9f5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b9f4e:	2301      	movs	r3, #1
   b9f50:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b9f54:	4b02      	ldr	r3, [pc, #8]	; (b9f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b9f56:	6003      	str	r3, [r0, #0]
   b9f58:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9f5a:	6020      	str	r0, [r4, #0]
	}
   b9f5c:	4620      	mov	r0, r4
   b9f5e:	bd38      	pop	{r3, r4, r5, pc}
   b9f60:	000bdc84 	.word	0x000bdc84

000b9f64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b9f64:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9f66:	2300      	movs	r3, #0
   b9f68:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b9f6a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9f6c:	4604      	mov	r4, r0
   b9f6e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9f70:	b12b      	cbz	r3, b9f7e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9f72:	2202      	movs	r2, #2
   b9f74:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9f76:	68eb      	ldr	r3, [r5, #12]
   b9f78:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9f7a:	68ab      	ldr	r3, [r5, #8]
   b9f7c:	60a3      	str	r3, [r4, #8]
    }
   b9f7e:	4620      	mov	r0, r4
   b9f80:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9f84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b9f84:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9f86:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b9f88:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b9f8a:	4668      	mov	r0, sp
   b9f8c:	f7ff ff4c 	bl	b9e28 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b9f90:	f04f 0302 	mov.w	r3, #2
   b9f94:	e8d4 2f4f 	ldrexb	r2, [r4]
   b9f98:	2a00      	cmp	r2, #0
   b9f9a:	d103      	bne.n	b9fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b9f9c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b9fa0:	2900      	cmp	r1, #0
   b9fa2:	d1f7      	bne.n	b9f94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b9fa4:	d125      	bne.n	b9ff2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b9fa6:	f104 050c 	add.w	r5, r4, #12
   b9faa:	4669      	mov	r1, sp
   b9fac:	4628      	mov	r0, r5
   b9fae:	f7ff ff3b 	bl	b9e28 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b9fb2:	f3bf 8f5b 	dmb	ish
   b9fb6:	2301      	movs	r3, #1
   b9fb8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b9fba:	2000      	movs	r0, #0
   b9fbc:	f104 0308 	add.w	r3, r4, #8
   b9fc0:	f3bf 8f5b 	dmb	ish
   b9fc4:	e853 6f00 	ldrex	r6, [r3]
   b9fc8:	e843 0200 	strex	r2, r0, [r3]
   b9fcc:	2a00      	cmp	r2, #0
   b9fce:	d1f9      	bne.n	b9fc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b9fd0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b9fd4:	b16e      	cbz	r6, b9ff2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b9fd6:	f7fd fd55 	bl	b7a84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b9fda:	b178      	cbz	r0, b9ffc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b9fdc:	4629      	mov	r1, r5
   b9fde:	4630      	mov	r0, r6
   b9fe0:	f7ff ff8b 	bl	b9efa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b9fe4:	4630      	mov	r0, r6
   b9fe6:	f7fc f9ec 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b9fea:	2110      	movs	r1, #16
   b9fec:	4630      	mov	r0, r6
   b9fee:	f7fa fe2a 	bl	b4c46 <_ZdlPvj>
        p_->setError(std::move(error));
   b9ff2:	4668      	mov	r0, sp
   b9ff4:	f7ff ff25 	bl	b9e42 <_ZN8particle5ErrorD1Ev>
    }
   b9ff8:	b009      	add	sp, #36	; 0x24
   b9ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9ffc:	4631      	mov	r1, r6
   b9ffe:	a802      	add	r0, sp, #8
   ba000:	f7ff ffb0 	bl	b9f64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   ba004:	68e0      	ldr	r0, [r4, #12]
   ba006:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba00a:	b108      	cbz	r0, ba010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   ba00c:	f001 faa8 	bl	bb560 <strdup>
        type_(type) {
   ba010:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba012:	2010      	movs	r0, #16
   ba014:	f8ad 501c 	strh.w	r5, [sp, #28]
   ba018:	f7fa fe0f 	bl	b4c3a <_Znwj>
   ba01c:	4605      	mov	r5, r0
   ba01e:	b1e8      	cbz	r0, ba05c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   ba020:	2700      	movs	r7, #0
   ba022:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba024:	2018      	movs	r0, #24
   ba026:	f7fa fe08 	bl	b4c3a <_Znwj>
   ba02a:	4604      	mov	r4, r0
   ba02c:	b188      	cbz	r0, ba052 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   ba02e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   ba030:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba032:	a802      	add	r0, sp, #8
   ba034:	f7ff fa16 	bl	b9464 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba038:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba03a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba03c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba03e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba040:	9204      	str	r2, [sp, #16]
   ba042:	a906      	add	r1, sp, #24
   ba044:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba046:	60e3      	str	r3, [r4, #12]
   ba048:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   ba04c:	9205      	str	r2, [sp, #20]
   ba04e:	f7ff feeb 	bl	b9e28 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   ba052:	4b08      	ldr	r3, [pc, #32]	; (ba074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   ba054:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba056:	4b08      	ldr	r3, [pc, #32]	; (ba078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba058:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba05a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   ba05c:	a806      	add	r0, sp, #24
   ba05e:	f7ff fef0 	bl	b9e42 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   ba062:	a802      	add	r0, sp, #8
   ba064:	f7fc f9ad 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba068:	2200      	movs	r2, #0
   ba06a:	4629      	mov	r1, r5
   ba06c:	4803      	ldr	r0, [pc, #12]	; (ba07c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   ba06e:	f7fd fd11 	bl	b7a94 <application_thread_invoke>
   ba072:	e7b7      	b.n	b9fe4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   ba074:	000b9f0d 	.word	0x000b9f0d
   ba078:	000ba191 	.word	0x000ba191
   ba07c:	000ba6d9 	.word	0x000ba6d9

000ba080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   ba080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba084:	b08b      	sub	sp, #44	; 0x2c
   ba086:	4605      	mov	r5, r0
   ba088:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   ba08c:	460f      	mov	r7, r1
   ba08e:	4690      	mov	r8, r2
   ba090:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba092:	f7fd fd93 	bl	b7bbc <spark_cloud_flag_connected>
   ba096:	ae07      	add	r6, sp, #28
    if (!connected()) {
   ba098:	4683      	mov	fp, r0
   ba09a:	bb38      	cbnz	r0, ba0ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   ba09c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   ba0a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba0a2:	a905      	add	r1, sp, #20
   ba0a4:	4630      	mov	r0, r6
   ba0a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba0aa:	f7ff febd 	bl	b9e28 <_ZN8particle5ErrorC1EOS0_>
   ba0ae:	2014      	movs	r0, #20
   ba0b0:	f7fa fdc3 	bl	b4c3a <_Znwj>
   ba0b4:	4604      	mov	r4, r0
   ba0b6:	b148      	cbz	r0, ba0cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   ba0b8:	2302      	movs	r3, #2
   ba0ba:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba0bc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba0be:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba0c2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   ba0c4:	4631      	mov	r1, r6
   ba0c6:	300c      	adds	r0, #12
   ba0c8:	f7ff feae 	bl	b9e28 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba0cc:	4628      	mov	r0, r5
	: __shared_count(__p)
   ba0ce:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba0d0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   ba0d4:	f7ff ff32 	bl	b9f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba0d8:	4630      	mov	r0, r6
   ba0da:	f7ff feb2 	bl	b9e42 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   ba0de:	a805      	add	r0, sp, #20
   ba0e0:	f7ff feaf 	bl	b9e42 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   ba0e4:	4628      	mov	r0, r5
   ba0e6:	b00b      	add	sp, #44	; 0x2c
   ba0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   ba0ec:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   ba0ee:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   ba0f0:	2014      	movs	r0, #20
   ba0f2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   ba0f6:	9307      	str	r3, [sp, #28]
   ba0f8:	f7fa fd9f 	bl	b4c3a <_Znwj>
   ba0fc:	4601      	mov	r1, r0
   ba0fe:	b118      	cbz	r0, ba108 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba100:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba104:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba106:	7044      	strb	r4, [r0, #1]
   ba108:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba10a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   ba10c:	f7ff ff16 	bl	b9f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   ba110:	4b1e      	ldr	r3, [pc, #120]	; (ba18c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   ba112:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   ba114:	2008      	movs	r0, #8
   ba116:	f7fa fd90 	bl	b4c3a <_Znwj>
   ba11a:	4604      	mov	r4, r0
   ba11c:	b110      	cbz	r0, ba124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   ba11e:	a903      	add	r1, sp, #12
   ba120:	f7ff fec7 	bl	b9eb2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba124:	9600      	str	r6, [sp, #0]
   ba126:	fa5f f38a 	uxtb.w	r3, sl
   ba12a:	464a      	mov	r2, r9
   ba12c:	4641      	mov	r1, r8
   ba12e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   ba130:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba132:	f7fd fd4b 	bl	b7bcc <spark_send_event>
   ba136:	b9b8      	cbnz	r0, ba168 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   ba138:	9b03      	ldr	r3, [sp, #12]
   ba13a:	785b      	ldrb	r3, [r3, #1]
   ba13c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   ba140:	b993      	cbnz	r3, ba168 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   ba142:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   ba146:	a905      	add	r1, sp, #20
   ba148:	a803      	add	r0, sp, #12
   ba14a:	9205      	str	r2, [sp, #20]
   ba14c:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba150:	f7ff ff18 	bl	b9f84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba154:	a805      	add	r0, sp, #20
   ba156:	f7ff fe74 	bl	b9e42 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   ba15a:	a805      	add	r0, sp, #20
   ba15c:	9909      	ldr	r1, [sp, #36]	; 0x24
   ba15e:	f7ff feb1 	bl	b9ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   ba162:	a806      	add	r0, sp, #24
   ba164:	f7fb fdec 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba168:	a903      	add	r1, sp, #12
   ba16a:	a805      	add	r0, sp, #20
   ba16c:	f7ff fea1 	bl	b9eb2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba170:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba172:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba174:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   ba176:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   ba178:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba17a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   ba17c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   ba17e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   ba180:	f7fb fdde 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba184:	a804      	add	r0, sp, #16
   ba186:	f7fb fddb 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   ba18a:	e7ab      	b.n	ba0e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   ba18c:	000ba20d 	.word	0x000ba20d

000ba190 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   ba190:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba194:	4605      	mov	r5, r0
	switch (__op)
   ba196:	d103      	bne.n	ba1a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba198:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba19a:	6003      	str	r3, [r0, #0]
      }
   ba19c:	2000      	movs	r0, #0
   ba19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   ba1a0:	2a02      	cmp	r2, #2
   ba1a2:	d010      	beq.n	ba1c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   ba1a4:	2a03      	cmp	r2, #3
   ba1a6:	d1f9      	bne.n	ba19c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba1a8:	6804      	ldr	r4, [r0, #0]
   ba1aa:	2c00      	cmp	r4, #0
   ba1ac:	d0f6      	beq.n	ba19c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   ba1ae:	f104 0010 	add.w	r0, r4, #16
   ba1b2:	f7ff fe46 	bl	b9e42 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   ba1b6:	4620      	mov	r0, r4
   ba1b8:	f7fc f903 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba1bc:	2118      	movs	r1, #24
   ba1be:	4620      	mov	r0, r4
   ba1c0:	f7fa fd41 	bl	b4c46 <_ZdlPvj>
   ba1c4:	e7ea      	b.n	ba19c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba1c6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   ba1c8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba1ca:	f7fa fd36 	bl	b4c3a <_Znwj>
   ba1ce:	4604      	mov	r4, r0
   ba1d0:	b150      	cbz	r0, ba1e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   ba1d2:	4631      	mov	r1, r6
   ba1d4:	f7ff fec6 	bl	b9f64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   ba1d8:	6930      	ldr	r0, [r6, #16]
   ba1da:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba1de:	b108      	cbz	r0, ba1e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   ba1e0:	f001 f9be 	bl	bb560 <strdup>
        type_(type) {
   ba1e4:	6120      	str	r0, [r4, #16]
   ba1e6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   ba1e8:	602c      	str	r4, [r5, #0]
	}
   ba1ea:	e7d7      	b.n	ba19c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000ba1ec <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   ba1ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba1ee:	2300      	movs	r3, #0
   ba1f0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba1f2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   ba1f4:	4604      	mov	r4, r0
   ba1f6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   ba1f8:	b12b      	cbz	r3, ba206 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba1fa:	2202      	movs	r2, #2
   ba1fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba1fe:	68eb      	ldr	r3, [r5, #12]
   ba200:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba202:	68ab      	ldr	r3, [r5, #8]
   ba204:	60a3      	str	r3, [r4, #8]
    }
   ba206:	4620      	mov	r0, r4
   ba208:	bd38      	pop	{r3, r4, r5, pc}
	...

000ba20c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   ba20c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba20e:	b089      	sub	sp, #36	; 0x24
   ba210:	4604      	mov	r4, r0
   ba212:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   ba214:	a801      	add	r0, sp, #4
   ba216:	4611      	mov	r1, r2
   ba218:	f7ff fe54 	bl	b9ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   ba21c:	b1a4      	cbz	r4, ba248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   ba21e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba220:	b11d      	cbz	r5, ba22a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   ba222:	4628      	mov	r0, r5
   ba224:	f001 f99c 	bl	bb560 <strdup>
   ba228:	4605      	mov	r5, r0
   ba22a:	a801      	add	r0, sp, #4
   ba22c:	a903      	add	r1, sp, #12
        type_(type) {
   ba22e:	9503      	str	r5, [sp, #12]
   ba230:	f8ad 4010 	strh.w	r4, [sp, #16]
   ba234:	f7ff fea6 	bl	b9f84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba238:	a803      	add	r0, sp, #12
   ba23a:	f7ff fe02 	bl	b9e42 <_ZN8particle5ErrorD1Ev>
   ba23e:	a802      	add	r0, sp, #8
   ba240:	f7fb fd7e 	bl	b5d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba244:	b009      	add	sp, #36	; 0x24
   ba246:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   ba248:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba24a:	2301      	movs	r3, #1
   ba24c:	e8d5 2f4f 	ldrexb	r2, [r5]
   ba250:	2a00      	cmp	r2, #0
   ba252:	d103      	bne.n	ba25c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   ba254:	e8c5 3f41 	strexb	r1, r3, [r5]
   ba258:	2900      	cmp	r1, #0
   ba25a:	d1f7      	bne.n	ba24c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   ba25c:	d1ef      	bne.n	ba23e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   ba25e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   ba260:	f3bf 8f5b 	dmb	ish
   ba264:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba266:	1d2b      	adds	r3, r5, #4
   ba268:	f3bf 8f5b 	dmb	ish
   ba26c:	e853 6f00 	ldrex	r6, [r3]
   ba270:	e843 4200 	strex	r2, r4, [r3]
   ba274:	2a00      	cmp	r2, #0
   ba276:	d1f9      	bne.n	ba26c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   ba278:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba27c:	2e00      	cmp	r6, #0
   ba27e:	d0de      	beq.n	ba23e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   ba280:	4620      	mov	r0, r4
   ba282:	f7fd fbff 	bl	b7a84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba286:	4607      	mov	r7, r0
   ba288:	b160      	cbz	r0, ba2a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba28a:	f105 010c 	add.w	r1, r5, #12
   ba28e:	4630      	mov	r0, r6
   ba290:	f7ff fe43 	bl	b9f1a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   ba294:	4630      	mov	r0, r6
   ba296:	f7fc f894 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba29a:	2110      	movs	r1, #16
   ba29c:	4630      	mov	r0, r6
   ba29e:	f7fa fcd2 	bl	b4c46 <_ZdlPvj>
   ba2a2:	e7cc      	b.n	ba23e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba2a4:	4631      	mov	r1, r6
   ba2a6:	a803      	add	r0, sp, #12
   ba2a8:	f7ff ffa0 	bl	ba1ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba2ac:	7b2b      	ldrb	r3, [r5, #12]
   ba2ae:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba2b2:	2010      	movs	r0, #16
   ba2b4:	f7fa fcc1 	bl	b4c3a <_Znwj>
   ba2b8:	4605      	mov	r5, r0
   ba2ba:	b1d0      	cbz	r0, ba2f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   ba2bc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba2be:	2014      	movs	r0, #20
   ba2c0:	f7fa fcbb 	bl	b4c3a <_Znwj>
   ba2c4:	4604      	mov	r4, r0
   ba2c6:	b178      	cbz	r0, ba2e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   ba2c8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba2ca:	4601      	mov	r1, r0
   ba2cc:	a803      	add	r0, sp, #12
   ba2ce:	f7ff f8c9 	bl	b9464 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba2d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba2d4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba2d6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba2d8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   ba2da:	9205      	str	r2, [sp, #20]
   ba2dc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba2de:	60e3      	str	r3, [r4, #12]
   ba2e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   ba2e4:	9206      	str	r2, [sp, #24]
   ba2e6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba2e8:	4b06      	ldr	r3, [pc, #24]	; (ba304 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   ba2ea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba2ec:	4b06      	ldr	r3, [pc, #24]	; (ba308 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba2ee:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba2f0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   ba2f2:	a803      	add	r0, sp, #12
   ba2f4:	f7fc f865 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba2f8:	2200      	movs	r2, #0
   ba2fa:	4629      	mov	r1, r5
   ba2fc:	4803      	ldr	r0, [pc, #12]	; (ba30c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   ba2fe:	f7fd fbc9 	bl	b7a94 <application_thread_invoke>
   ba302:	e7c7      	b.n	ba294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   ba304:	000b9f2d 	.word	0x000b9f2d
   ba308:	000ba311 	.word	0x000ba311
   ba30c:	000ba6d9 	.word	0x000ba6d9

000ba310 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   ba310:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba312:	b570      	push	{r4, r5, r6, lr}
   ba314:	4604      	mov	r4, r0
	switch (__op)
   ba316:	d103      	bne.n	ba320 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba318:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba31a:	6003      	str	r3, [r0, #0]
      }
   ba31c:	2000      	movs	r0, #0
   ba31e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   ba320:	2a02      	cmp	r2, #2
   ba322:	d00c      	beq.n	ba33e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   ba324:	2a03      	cmp	r2, #3
   ba326:	d1f9      	bne.n	ba31c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba328:	6804      	ldr	r4, [r0, #0]
   ba32a:	2c00      	cmp	r4, #0
   ba32c:	d0f6      	beq.n	ba31c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   ba32e:	4620      	mov	r0, r4
   ba330:	f7fc f847 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba334:	2114      	movs	r1, #20
   ba336:	4620      	mov	r0, r4
   ba338:	f7fa fc85 	bl	b4c46 <_ZdlPvj>
   ba33c:	e7ee      	b.n	ba31c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba33e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   ba340:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba342:	f7fa fc7a 	bl	b4c3a <_Znwj>
   ba346:	4605      	mov	r5, r0
   ba348:	b120      	cbz	r0, ba354 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   ba34a:	4631      	mov	r1, r6
   ba34c:	f7ff ff4e 	bl	ba1ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
   ba350:	7c33      	ldrb	r3, [r6, #16]
   ba352:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   ba354:	6025      	str	r5, [r4, #0]
	}
   ba356:	e7e1      	b.n	ba31c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000ba358 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   ba358:	4770      	bx	lr

000ba35a <_ZN9IPAddressD0Ev>:
   ba35a:	b510      	push	{r4, lr}
   ba35c:	2118      	movs	r1, #24
   ba35e:	4604      	mov	r4, r0
   ba360:	f7fa fc71 	bl	b4c46 <_ZdlPvj>
   ba364:	4620      	mov	r0, r4
   ba366:	bd10      	pop	{r4, pc}

000ba368 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba368:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba36a:	7d03      	ldrb	r3, [r0, #20]
   ba36c:	2b06      	cmp	r3, #6
{
   ba36e:	b08d      	sub	sp, #52	; 0x34
   ba370:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba372:	f100 0704 	add.w	r7, r0, #4
   ba376:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba37a:	d012      	beq.n	ba3a2 <_ZNK9IPAddress7printToER5Print+0x3a>
   ba37c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba380:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba384:	220a      	movs	r2, #10
   ba386:	4630      	mov	r0, r6
   ba388:	f7ff fb39 	bl	b99fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba38c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba38e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba390:	d019      	beq.n	ba3c6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba392:	2c00      	cmp	r4, #0
   ba394:	d0f4      	beq.n	ba380 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba396:	212e      	movs	r1, #46	; 0x2e
   ba398:	4630      	mov	r0, r6
   ba39a:	f7ff fb17 	bl	b99cc <_ZN5Print5printEc>
   ba39e:	4404      	add	r4, r0
   ba3a0:	e7ee      	b.n	ba380 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba3a2:	232f      	movs	r3, #47	; 0x2f
   ba3a4:	466a      	mov	r2, sp
   ba3a6:	4639      	mov	r1, r7
   ba3a8:	200a      	movs	r0, #10
		buf[0] = 0;
   ba3aa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba3ae:	f7fd fa31 	bl	b7814 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba3b2:	4668      	mov	r0, sp
   ba3b4:	f7fa fbe6 	bl	b4b84 <strlen>
   ba3b8:	6833      	ldr	r3, [r6, #0]
   ba3ba:	4602      	mov	r2, r0
   ba3bc:	68db      	ldr	r3, [r3, #12]
   ba3be:	4669      	mov	r1, sp
   ba3c0:	4630      	mov	r0, r6
   ba3c2:	4798      	blx	r3
   ba3c4:	4604      	mov	r4, r0
    }
    return n;
}
   ba3c6:	4620      	mov	r0, r4
   ba3c8:	b00d      	add	sp, #52	; 0x34
   ba3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba3cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba3cc:	b510      	push	{r4, lr}
   ba3ce:	4b05      	ldr	r3, [pc, #20]	; (ba3e4 <_ZN9IPAddressC1Ev+0x18>)
   ba3d0:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   ba3d2:	2211      	movs	r2, #17
   ba3d4:	f840 3b04 	str.w	r3, [r0], #4
   ba3d8:	2100      	movs	r1, #0
   ba3da:	f001 f883 	bl	bb4e4 <memset>
}
   ba3de:	4620      	mov	r0, r4
   ba3e0:	bd10      	pop	{r4, pc}
   ba3e2:	bf00      	nop
   ba3e4:	000bdca0 	.word	0x000bdca0

000ba3e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba3e8:	4603      	mov	r3, r0
   ba3ea:	4a07      	ldr	r2, [pc, #28]	; (ba408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba3ec:	b510      	push	{r4, lr}
   ba3ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba3f2:	f101 0210 	add.w	r2, r1, #16
   ba3f6:	f851 4b04 	ldr.w	r4, [r1], #4
   ba3fa:	f843 4b04 	str.w	r4, [r3], #4
   ba3fe:	4291      	cmp	r1, r2
   ba400:	d1f9      	bne.n	ba3f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba402:	780a      	ldrb	r2, [r1, #0]
   ba404:	701a      	strb	r2, [r3, #0]
}
   ba406:	bd10      	pop	{r4, pc}
   ba408:	000bdca0 	.word	0x000bdca0

000ba40c <_ZNK9IPAddresscvbEv>:
    		return address.v;
   ba40c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   ba40e:	2b04      	cmp	r3, #4
   ba410:	d104      	bne.n	ba41c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   ba412:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba414:	3800      	subs	r0, #0
   ba416:	bf18      	it	ne
   ba418:	2001      	movne	r0, #1
   ba41a:	4770      	bx	lr
    } else if (version() == 6) {
   ba41c:	2b06      	cmp	r3, #6
   ba41e:	d107      	bne.n	ba430 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba420:	6843      	ldr	r3, [r0, #4]
   ba422:	b93b      	cbnz	r3, ba434 <_ZNK9IPAddresscvbEv+0x28>
   ba424:	6883      	ldr	r3, [r0, #8]
   ba426:	b92b      	cbnz	r3, ba434 <_ZNK9IPAddresscvbEv+0x28>
   ba428:	68c3      	ldr	r3, [r0, #12]
   ba42a:	b91b      	cbnz	r3, ba434 <_ZNK9IPAddresscvbEv+0x28>
   ba42c:	6900      	ldr	r0, [r0, #16]
   ba42e:	e7f1      	b.n	ba414 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   ba430:	2000      	movs	r0, #0
   ba432:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba434:	2001      	movs	r0, #1
}
   ba436:	4770      	bx	lr

000ba438 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba438:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba43a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba43e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba442:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba446:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba44a:	2304      	movs	r3, #4
   ba44c:	6041      	str	r1, [r0, #4]
   ba44e:	7503      	strb	r3, [r0, #20]
}
   ba450:	bd10      	pop	{r4, pc}
	...

000ba454 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba454:	b507      	push	{r0, r1, r2, lr}
   ba456:	4b06      	ldr	r3, [pc, #24]	; (ba470 <_ZN9IPAddressC1EPKh+0x1c>)
   ba458:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba45a:	78cb      	ldrb	r3, [r1, #3]
   ba45c:	9300      	str	r3, [sp, #0]
   ba45e:	788b      	ldrb	r3, [r1, #2]
   ba460:	784a      	ldrb	r2, [r1, #1]
   ba462:	7809      	ldrb	r1, [r1, #0]
   ba464:	f7ff ffe8 	bl	ba438 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba468:	b003      	add	sp, #12
   ba46a:	f85d fb04 	ldr.w	pc, [sp], #4
   ba46e:	bf00      	nop
   ba470:	000bdca0 	.word	0x000bdca0

000ba474 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba474:	7441      	strb	r1, [r0, #17]
}
   ba476:	4770      	bx	lr

000ba478 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba478:	4770      	bx	lr

000ba47a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba47a:	4770      	bx	lr

000ba47c <_ZN9USBSerial4readEv>:
{
   ba47c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba47e:	2100      	movs	r1, #0
   ba480:	7c00      	ldrb	r0, [r0, #16]
   ba482:	f7fd fab7 	bl	b79f4 <HAL_USB_USART_Receive_Data>
}
   ba486:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba48a:	bd08      	pop	{r3, pc}

000ba48c <_ZN9USBSerial4peekEv>:
{
   ba48c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba48e:	2101      	movs	r1, #1
   ba490:	7c00      	ldrb	r0, [r0, #16]
   ba492:	f7fd faaf 	bl	b79f4 <HAL_USB_USART_Receive_Data>
}
   ba496:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba49a:	bd08      	pop	{r3, pc}

000ba49c <_ZN9USBSerial17availableForWriteEv>:
{
   ba49c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba49e:	7c00      	ldrb	r0, [r0, #16]
   ba4a0:	f7fd faa0 	bl	b79e4 <HAL_USB_USART_Available_Data_For_Write>
}
   ba4a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba4a8:	bd08      	pop	{r3, pc}

000ba4aa <_ZN9USBSerial9availableEv>:
{
   ba4aa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba4ac:	7c00      	ldrb	r0, [r0, #16]
   ba4ae:	f7fd fa91 	bl	b79d4 <HAL_USB_USART_Available_Data>
}
   ba4b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba4b6:	bd08      	pop	{r3, pc}

000ba4b8 <_ZN9USBSerial5writeEh>:
{
   ba4b8:	b513      	push	{r0, r1, r4, lr}
   ba4ba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba4bc:	7c00      	ldrb	r0, [r0, #16]
{
   ba4be:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba4c0:	f7fd fa90 	bl	b79e4 <HAL_USB_USART_Available_Data_For_Write>
   ba4c4:	2800      	cmp	r0, #0
   ba4c6:	9901      	ldr	r1, [sp, #4]
   ba4c8:	dc01      	bgt.n	ba4ce <_ZN9USBSerial5writeEh+0x16>
   ba4ca:	7c60      	ldrb	r0, [r4, #17]
   ba4cc:	b120      	cbz	r0, ba4d8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba4ce:	7c20      	ldrb	r0, [r4, #16]
   ba4d0:	f7fd fa98 	bl	b7a04 <HAL_USB_USART_Send_Data>
   ba4d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba4d8:	b002      	add	sp, #8
   ba4da:	bd10      	pop	{r4, pc}

000ba4dc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba4dc:	7c00      	ldrb	r0, [r0, #16]
   ba4de:	f7fd ba99 	b.w	b7a14 <HAL_USB_USART_Flush_Data>

000ba4e2 <_ZN9USBSerialD0Ev>:
   ba4e2:	b510      	push	{r4, lr}
   ba4e4:	2114      	movs	r1, #20
   ba4e6:	4604      	mov	r4, r0
   ba4e8:	f7fa fbad 	bl	b4c46 <_ZdlPvj>
   ba4ec:	4620      	mov	r0, r4
   ba4ee:	bd10      	pop	{r4, pc}

000ba4f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba4f0:	b510      	push	{r4, lr}
   ba4f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba4f6:	4604      	mov	r4, r0
   ba4f8:	4608      	mov	r0, r1
   ba4fa:	2100      	movs	r1, #0
   ba4fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba500:	4b04      	ldr	r3, [pc, #16]	; (ba514 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba502:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba504:	2301      	movs	r3, #1
  _serial = serial;
   ba506:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba508:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba50a:	4611      	mov	r1, r2
   ba50c:	f7fd fa5a 	bl	b79c4 <HAL_USB_USART_Init>
}
   ba510:	4620      	mov	r0, r4
   ba512:	bd10      	pop	{r4, pc}
   ba514:	000bdcb4 	.word	0x000bdcb4

000ba518 <_Z19acquireSerialBufferv>:
{
   ba518:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba51a:	2214      	movs	r2, #20
{
   ba51c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba51e:	2100      	movs	r1, #0
   ba520:	f000 ffe0 	bl	bb4e4 <memset>
}
   ba524:	4620      	mov	r0, r4
   ba526:	bd10      	pop	{r4, pc}

000ba528 <_Z16_fetch_usbserialv>:
{
   ba528:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba52a:	4c0f      	ldr	r4, [pc, #60]	; (ba568 <_Z16_fetch_usbserialv+0x40>)
{
   ba52c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba52e:	a803      	add	r0, sp, #12
   ba530:	f7ff fff2 	bl	ba518 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba534:	7821      	ldrb	r1, [r4, #0]
   ba536:	f3bf 8f5b 	dmb	ish
   ba53a:	f011 0101 	ands.w	r1, r1, #1
   ba53e:	d10f      	bne.n	ba560 <_Z16_fetch_usbserialv+0x38>
   ba540:	4620      	mov	r0, r4
   ba542:	9101      	str	r1, [sp, #4]
   ba544:	f7fa fb81 	bl	b4c4a <__cxa_guard_acquire>
   ba548:	9901      	ldr	r1, [sp, #4]
   ba54a:	b148      	cbz	r0, ba560 <_Z16_fetch_usbserialv+0x38>
   ba54c:	aa03      	add	r2, sp, #12
   ba54e:	4807      	ldr	r0, [pc, #28]	; (ba56c <_Z16_fetch_usbserialv+0x44>)
   ba550:	f7ff ffce 	bl	ba4f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba554:	4620      	mov	r0, r4
   ba556:	f7fa fb7d 	bl	b4c54 <__cxa_guard_release>
   ba55a:	4805      	ldr	r0, [pc, #20]	; (ba570 <_Z16_fetch_usbserialv+0x48>)
   ba55c:	f000 ff84 	bl	bb468 <atexit>
	return _usbserial;
}
   ba560:	4802      	ldr	r0, [pc, #8]	; (ba56c <_Z16_fetch_usbserialv+0x44>)
   ba562:	b008      	add	sp, #32
   ba564:	bd10      	pop	{r4, pc}
   ba566:	bf00      	nop
   ba568:	2003e668 	.word	0x2003e668
   ba56c:	2003e66c 	.word	0x2003e66c
   ba570:	000ba479 	.word	0x000ba479

000ba574 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
   ba574:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   ba576:	b510      	push	{r4, lr}
   ba578:	b90a      	cbnz	r2, ba57e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   ba57a:	f000 fb99 	bl	bacb0 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   ba57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba582:	68c3      	ldr	r3, [r0, #12]
   ba584:	4718      	bx	r3
	...

000ba588 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   ba588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   ba58a:	4f10      	ldr	r7, [pc, #64]	; (ba5cc <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   ba58c:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   ba590:	4606      	mov	r6, r0
   ba592:	460d      	mov	r5, r1
    delete handlers[pin];
   ba594:	b134      	cbz	r4, ba5a4 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   ba596:	4620      	mov	r0, r4
   ba598:	f7fb ff13 	bl	b63c2 <_ZNSt14_Function_baseD1Ev>
   ba59c:	2110      	movs	r1, #16
   ba59e:	4620      	mov	r0, r4
   ba5a0:	f7fa fb51 	bl	b4c46 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   ba5a4:	2010      	movs	r0, #16
   ba5a6:	f7fa fb48 	bl	b4c3a <_Znwj>
   ba5aa:	4604      	mov	r4, r0
   ba5ac:	b150      	cbz	r0, ba5c4 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   ba5ae:	2300      	movs	r3, #0
   ba5b0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba5b2:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   ba5b4:	b133      	cbz	r3, ba5c4 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba5b6:	2202      	movs	r2, #2
   ba5b8:	4629      	mov	r1, r5
   ba5ba:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba5bc:	68eb      	ldr	r3, [r5, #12]
   ba5be:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba5c0:	68ab      	ldr	r3, [r5, #8]
   ba5c2:	60a3      	str	r3, [r4, #8]
   ba5c4:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   ba5c8:	4620      	mov	r0, r4
   ba5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba5cc:	2003e680 	.word	0x2003e680

000ba5d0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   ba5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba5d2:	b087      	sub	sp, #28
   ba5d4:	4605      	mov	r5, r0
   ba5d6:	9103      	str	r1, [sp, #12]
   ba5d8:	4617      	mov	r7, r2
   ba5da:	461e      	mov	r6, r3
    hal_interrupt_detach(pin);
   ba5dc:	f7fd f808 	bl	b75f0 <hal_interrupt_detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   ba5e0:	9903      	ldr	r1, [sp, #12]
   ba5e2:	4628      	mov	r0, r5
   ba5e4:	f7ff ffd0 	bl	ba588 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   ba5e8:	4604      	mov	r4, r0
   ba5ea:	b1e8      	cbz	r0, ba628 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        hal_interrupt_extra_configuration_t extra = {};
   ba5ec:	2100      	movs	r1, #0
  if (priority >= 0) {
   ba5ee:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   ba5f0:	f04f 0304 	mov.w	r3, #4
        hal_interrupt_extra_configuration_t extra = {};
   ba5f4:	f8ad 1015 	strh.w	r1, [sp, #21]
   ba5f8:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   ba5fc:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   ba600:	bfa2      	ittt	ge
   ba602:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   ba604:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   ba608:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   ba60c:	9100      	str	r1, [sp, #0]
   ba60e:	4602      	mov	r2, r0
   ba610:	4907      	ldr	r1, [pc, #28]	; (ba630 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   ba612:	bfa8      	it	ge
   ba614:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   ba618:	463b      	mov	r3, r7
   ba61a:	4628      	mov	r0, r5
   ba61c:	f7fc ffe0 	bl	b75e0 <hal_interrupt_attach>
   ba620:	b110      	cbz	r0, ba628 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   ba622:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   ba624:	b007      	add	sp, #28
   ba626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   ba628:	1e20      	subs	r0, r4, #0
   ba62a:	bf18      	it	ne
   ba62c:	2001      	movne	r0, #1
   ba62e:	e7f9      	b.n	ba624 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   ba630:	000ba575 	.word	0x000ba575

000ba634 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba634:	4770      	bx	lr

000ba636 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba636:	7441      	strb	r1, [r0, #17]
}
   ba638:	4770      	bx	lr

000ba63a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba63a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba63c:	7c00      	ldrb	r0, [r0, #16]
   ba63e:	f7fd f939 	bl	b78b4 <hal_usart_available_data_for_write>
}
   ba642:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba646:	bd08      	pop	{r3, pc}

000ba648 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba648:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba64a:	7c00      	ldrb	r0, [r0, #16]
   ba64c:	f7fd f90a 	bl	b7864 <hal_usart_available>
}
   ba650:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba654:	bd08      	pop	{r3, pc}

000ba656 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba656:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba658:	7c00      	ldrb	r0, [r0, #16]
   ba65a:	f7fd f913 	bl	b7884 <hal_usart_peek>
}
   ba65e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba662:	bd08      	pop	{r3, pc}

000ba664 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba664:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba666:	7c00      	ldrb	r0, [r0, #16]
   ba668:	f7fd f904 	bl	b7874 <hal_usart_read>
}
   ba66c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba670:	bd08      	pop	{r3, pc}

000ba672 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba672:	7c00      	ldrb	r0, [r0, #16]
   ba674:	f7fd b90e 	b.w	b7894 <hal_usart_flush>

000ba678 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba678:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba67a:	7c45      	ldrb	r5, [r0, #17]
{
   ba67c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba67e:	b12d      	cbz	r5, ba68c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba680:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba682:	b003      	add	sp, #12
   ba684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba688:	f7fd b8e4 	b.w	b7854 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba68c:	7c00      	ldrb	r0, [r0, #16]
   ba68e:	9101      	str	r1, [sp, #4]
   ba690:	f7fd f910 	bl	b78b4 <hal_usart_available_data_for_write>
   ba694:	2800      	cmp	r0, #0
   ba696:	9901      	ldr	r1, [sp, #4]
   ba698:	dcf2      	bgt.n	ba680 <_ZN11USARTSerial5writeEh+0x8>
}
   ba69a:	4628      	mov	r0, r5
   ba69c:	b003      	add	sp, #12
   ba69e:	bd30      	pop	{r4, r5, pc}

000ba6a0 <_ZN11USARTSerialD0Ev>:
   ba6a0:	b510      	push	{r4, lr}
   ba6a2:	2114      	movs	r1, #20
   ba6a4:	4604      	mov	r4, r0
   ba6a6:	f7fa face 	bl	b4c46 <_ZdlPvj>
   ba6aa:	4620      	mov	r0, r4
   ba6ac:	bd10      	pop	{r4, pc}
	...

000ba6b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba6b0:	b510      	push	{r4, lr}
   ba6b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba6b6:	4604      	mov	r4, r0
   ba6b8:	4608      	mov	r0, r1
   ba6ba:	4611      	mov	r1, r2
   ba6bc:	2200      	movs	r2, #0
   ba6be:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba6c2:	4b04      	ldr	r3, [pc, #16]	; (ba6d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba6c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba6c6:	2301      	movs	r3, #1
  _serial = serial;
   ba6c8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba6ca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba6cc:	f7fd f8fa 	bl	b78c4 <hal_usart_init_ex>
}
   ba6d0:	4620      	mov	r0, r4
   ba6d2:	bd10      	pop	{r4, pc}
   ba6d4:	000bdce4 	.word	0x000bdce4

000ba6d8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   ba6d8:	b510      	push	{r4, lr}
      if (_M_empty())
   ba6da:	6883      	ldr	r3, [r0, #8]
   ba6dc:	4604      	mov	r4, r0
   ba6de:	b90b      	cbnz	r3, ba6e4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   ba6e0:	f000 fae6 	bl	bacb0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba6e4:	68c3      	ldr	r3, [r0, #12]
   ba6e6:	4798      	blx	r3
      if (_M_manager)
   ba6e8:	68a3      	ldr	r3, [r4, #8]
   ba6ea:	b11b      	cbz	r3, ba6f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ba6ec:	2203      	movs	r2, #3
   ba6ee:	4621      	mov	r1, r4
   ba6f0:	4620      	mov	r0, r4
   ba6f2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ba6f4:	4620      	mov	r0, r4
   ba6f6:	2110      	movs	r1, #16
}
   ba6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   ba6fc:	f7fa baa3 	b.w	b4c46 <_ZdlPvj>

000ba700 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba700:	4770      	bx	lr

000ba702 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba704:	4606      	mov	r6, r0
   ba706:	4615      	mov	r5, r2
   ba708:	460c      	mov	r4, r1
   ba70a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba70c:	42bc      	cmp	r4, r7
   ba70e:	d006      	beq.n	ba71e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba710:	6833      	ldr	r3, [r6, #0]
   ba712:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba716:	689b      	ldr	r3, [r3, #8]
   ba718:	4630      	mov	r0, r6
   ba71a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba71c:	e7f6      	b.n	ba70c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba71e:	4628      	mov	r0, r5
   ba720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba722 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba722:	7c00      	ldrb	r0, [r0, #16]
   ba724:	2200      	movs	r2, #0
   ba726:	f7fd b8d5 	b.w	b78d4 <hal_i2c_write>

000ba72a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba72a:	7c00      	ldrb	r0, [r0, #16]
   ba72c:	2100      	movs	r1, #0
   ba72e:	f7fd b8d9 	b.w	b78e4 <hal_i2c_available>

000ba732 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba732:	7c00      	ldrb	r0, [r0, #16]
   ba734:	2100      	movs	r1, #0
   ba736:	f7fd b8dd 	b.w	b78f4 <hal_i2c_read>

000ba73a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba73a:	7c00      	ldrb	r0, [r0, #16]
   ba73c:	2100      	movs	r1, #0
   ba73e:	f7fd b8e1 	b.w	b7904 <hal_i2c_peek>

000ba742 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba742:	7c00      	ldrb	r0, [r0, #16]
   ba744:	2100      	movs	r1, #0
   ba746:	f7fd b8e5 	b.w	b7914 <hal_i2c_flush>

000ba74a <_ZN7TwoWireD0Ev>:
   ba74a:	b510      	push	{r4, lr}
   ba74c:	2114      	movs	r1, #20
   ba74e:	4604      	mov	r4, r0
   ba750:	f7fa fa79 	bl	b4c46 <_ZdlPvj>
   ba754:	4620      	mov	r0, r4
   ba756:	bd10      	pop	{r4, pc}

000ba758 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba758:	b510      	push	{r4, lr}
   ba75a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba75e:	4604      	mov	r4, r0
   ba760:	4608      	mov	r0, r1
   ba762:	2100      	movs	r1, #0
   ba764:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba768:	4b03      	ldr	r3, [pc, #12]	; (ba778 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ba76a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ba76c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ba76e:	4611      	mov	r1, r2
   ba770:	f7fd f8e0 	bl	b7934 <hal_i2c_init>
}
   ba774:	4620      	mov	r0, r4
   ba776:	bd10      	pop	{r4, pc}
   ba778:	000bdd14 	.word	0x000bdd14

000ba77c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba77c:	2200      	movs	r2, #0
   ba77e:	6840      	ldr	r0, [r0, #4]
   ba780:	4611      	mov	r1, r2
   ba782:	f7fd b9cb 	b.w	b7b1c <network_ready>

000ba786 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba786:	2200      	movs	r2, #0
   ba788:	6840      	ldr	r0, [r0, #4]
   ba78a:	4611      	mov	r1, r2
   ba78c:	f7fd b9e6 	b.w	b7b5c <network_listening>

000ba790 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba790:	2200      	movs	r2, #0
   ba792:	6840      	ldr	r0, [r0, #4]
   ba794:	4611      	mov	r1, r2
   ba796:	f7fd b9f1 	b.w	b7b7c <network_get_listen_timeout>

000ba79a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba79a:	6840      	ldr	r0, [r0, #4]
   ba79c:	2200      	movs	r2, #0
   ba79e:	f7fd b9e5 	b.w	b7b6c <network_set_listen_timeout>

000ba7a2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba7a2:	6840      	ldr	r0, [r0, #4]
   ba7a4:	2200      	movs	r2, #0
   ba7a6:	f081 0101 	eor.w	r1, r1, #1
   ba7aa:	f7fd b9cf 	b.w	b7b4c <network_listen>

000ba7ae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba7ae:	2300      	movs	r3, #0
   ba7b0:	6840      	ldr	r0, [r0, #4]
   ba7b2:	461a      	mov	r2, r3
   ba7b4:	4619      	mov	r1, r3
   ba7b6:	f7fd b9c1 	b.w	b7b3c <network_off>

000ba7ba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba7ba:	2300      	movs	r3, #0
   ba7bc:	6840      	ldr	r0, [r0, #4]
   ba7be:	461a      	mov	r2, r3
   ba7c0:	4619      	mov	r1, r3
   ba7c2:	f7fd b9b3 	b.w	b7b2c <network_on>

000ba7c6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba7c6:	2200      	movs	r2, #0
   ba7c8:	6840      	ldr	r0, [r0, #4]
   ba7ca:	4611      	mov	r1, r2
   ba7cc:	f7fd b996 	b.w	b7afc <network_connecting>

000ba7d0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba7d0:	6840      	ldr	r0, [r0, #4]
   ba7d2:	2200      	movs	r2, #0
   ba7d4:	2102      	movs	r1, #2
   ba7d6:	f7fd b999 	b.w	b7b0c <network_disconnect>

000ba7da <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba7da:	2300      	movs	r3, #0
   ba7dc:	6840      	ldr	r0, [r0, #4]
   ba7de:	461a      	mov	r2, r3
   ba7e0:	f7fd b984 	b.w	b7aec <network_connect>

000ba7e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba7e4:	4b02      	ldr	r3, [pc, #8]	; (ba7f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba7e6:	2204      	movs	r2, #4
   ba7e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba7ea:	4a02      	ldr	r2, [pc, #8]	; (ba7f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba7ec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba7ee:	4770      	bx	lr
   ba7f0:	2003e710 	.word	0x2003e710
   ba7f4:	000bdd3c 	.word	0x000bdd3c

000ba7f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba7f8:	2300      	movs	r3, #0
   ba7fa:	6840      	ldr	r0, [r0, #4]
   ba7fc:	461a      	mov	r2, r3
   ba7fe:	f7fd b975 	b.w	b7aec <network_connect>

000ba802 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba802:	6840      	ldr	r0, [r0, #4]
   ba804:	2200      	movs	r2, #0
   ba806:	2102      	movs	r1, #2
   ba808:	f7fd b980 	b.w	b7b0c <network_disconnect>

000ba80c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba80c:	2200      	movs	r2, #0
   ba80e:	6840      	ldr	r0, [r0, #4]
   ba810:	4611      	mov	r1, r2
   ba812:	f7fd b973 	b.w	b7afc <network_connecting>

000ba816 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba816:	2200      	movs	r2, #0
   ba818:	6840      	ldr	r0, [r0, #4]
   ba81a:	4611      	mov	r1, r2
   ba81c:	f7fd b97e 	b.w	b7b1c <network_ready>

000ba820 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba820:	2300      	movs	r3, #0
   ba822:	6840      	ldr	r0, [r0, #4]
   ba824:	461a      	mov	r2, r3
   ba826:	4619      	mov	r1, r3
   ba828:	f7fd b980 	b.w	b7b2c <network_on>

000ba82c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba82c:	2300      	movs	r3, #0
   ba82e:	6840      	ldr	r0, [r0, #4]
   ba830:	461a      	mov	r2, r3
   ba832:	4619      	mov	r1, r3
   ba834:	f7fd b982 	b.w	b7b3c <network_off>

000ba838 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba838:	6840      	ldr	r0, [r0, #4]
   ba83a:	2100      	movs	r1, #0
   ba83c:	f7fd b9a6 	b.w	b7b8c <network_is_on>

000ba840 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba840:	6840      	ldr	r0, [r0, #4]
   ba842:	2100      	movs	r1, #0
   ba844:	f7fd b9aa 	b.w	b7b9c <network_is_off>

000ba848 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba848:	6840      	ldr	r0, [r0, #4]
   ba84a:	2200      	movs	r2, #0
   ba84c:	f081 0101 	eor.w	r1, r1, #1
   ba850:	f7fd b97c 	b.w	b7b4c <network_listen>

000ba854 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba854:	6840      	ldr	r0, [r0, #4]
   ba856:	2200      	movs	r2, #0
   ba858:	f7fd b988 	b.w	b7b6c <network_set_listen_timeout>

000ba85c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba85c:	2200      	movs	r2, #0
   ba85e:	6840      	ldr	r0, [r0, #4]
   ba860:	4611      	mov	r1, r2
   ba862:	f7fd b98b 	b.w	b7b7c <network_get_listen_timeout>

000ba866 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba866:	2200      	movs	r2, #0
   ba868:	6840      	ldr	r0, [r0, #4]
   ba86a:	4611      	mov	r1, r2
   ba86c:	f7fd b976 	b.w	b7b5c <network_listening>

000ba870 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba874:	b095      	sub	sp, #84	; 0x54
   ba876:	4614      	mov	r4, r2
   ba878:	460d      	mov	r5, r1
   ba87a:	4607      	mov	r7, r0
    IPAddress addr;
   ba87c:	f7ff fda6 	bl	ba3cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba880:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba882:	221c      	movs	r2, #28
   ba884:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba886:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba888:	f000 fe2c 	bl	bb4e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba88c:	2340      	movs	r3, #64	; 0x40
   ba88e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba890:	4620      	mov	r0, r4
   ba892:	466b      	mov	r3, sp
   ba894:	aa0c      	add	r2, sp, #48	; 0x30
   ba896:	2100      	movs	r1, #0
   ba898:	f7fc fe92 	bl	b75c0 <netdb_getaddrinfo>
    if (!r) {
   ba89c:	4604      	mov	r4, r0
   ba89e:	2800      	cmp	r0, #0
   ba8a0:	d14b      	bne.n	ba93a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba8a2:	4602      	mov	r2, r0
   ba8a4:	2101      	movs	r1, #1
   ba8a6:	6868      	ldr	r0, [r5, #4]
   ba8a8:	f7fd f938 	bl	b7b1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba8ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba8ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba8b0:	4622      	mov	r2, r4
   ba8b2:	6868      	ldr	r0, [r5, #4]
   ba8b4:	f7fd f932 	bl	b7b1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba8b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba8ba:	4681      	mov	r9, r0
        bool ok = false;
   ba8bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba8be:	2e00      	cmp	r6, #0
   ba8c0:	d03b      	beq.n	ba93a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba8c2:	2900      	cmp	r1, #0
   ba8c4:	d139      	bne.n	ba93a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba8c6:	6873      	ldr	r3, [r6, #4]
   ba8c8:	2b02      	cmp	r3, #2
   ba8ca:	d003      	beq.n	ba8d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba8cc:	2b0a      	cmp	r3, #10
   ba8ce:	d011      	beq.n	ba8f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba8d0:	69f6      	ldr	r6, [r6, #28]
   ba8d2:	e7f4      	b.n	ba8be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba8d4:	f1b8 0f00 	cmp.w	r8, #0
   ba8d8:	d0fa      	beq.n	ba8d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba8da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba8dc:	a806      	add	r0, sp, #24
   ba8de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba8e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba8e2:	f7ff fdb7 	bl	ba454 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba8e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba8e8:	1d3c      	adds	r4, r7, #4
   ba8ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba8ec:	682b      	ldr	r3, [r5, #0]
   ba8ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba8f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba8f2:	e7ed      	b.n	ba8d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba8f4:	f1b9 0f00 	cmp.w	r9, #0
   ba8f8:	d0ea      	beq.n	ba8d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba8fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba8fc:	2210      	movs	r2, #16
   ba8fe:	a801      	add	r0, sp, #4
   ba900:	f000 fdf0 	bl	bb4e4 <memset>
                    a.v = 6;
   ba904:	2306      	movs	r3, #6
   ba906:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba90a:	ad01      	add	r5, sp, #4
   ba90c:	f104 0308 	add.w	r3, r4, #8
   ba910:	3418      	adds	r4, #24
   ba912:	6818      	ldr	r0, [r3, #0]
   ba914:	6859      	ldr	r1, [r3, #4]
   ba916:	462a      	mov	r2, r5
   ba918:	c203      	stmia	r2!, {r0, r1}
   ba91a:	3308      	adds	r3, #8
   ba91c:	42a3      	cmp	r3, r4
   ba91e:	4615      	mov	r5, r2
   ba920:	d1f7      	bne.n	ba912 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba922:	a901      	add	r1, sp, #4
   ba924:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba926:	ad07      	add	r5, sp, #28
   ba928:	f7ff fd5e 	bl	ba3e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba92c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba92e:	1d3c      	adds	r4, r7, #4
   ba930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba932:	682b      	ldr	r3, [r5, #0]
   ba934:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba936:	4649      	mov	r1, r9
   ba938:	e7ca      	b.n	ba8d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba93a:	9800      	ldr	r0, [sp, #0]
   ba93c:	f7fc fe38 	bl	b75b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba940:	4638      	mov	r0, r7
   ba942:	b015      	add	sp, #84	; 0x54
   ba944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba948 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba948:	4b02      	ldr	r3, [pc, #8]	; (ba954 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba94a:	4a03      	ldr	r2, [pc, #12]	; (ba958 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba94c:	601a      	str	r2, [r3, #0]
   ba94e:	2200      	movs	r2, #0
   ba950:	605a      	str	r2, [r3, #4]

} // spark
   ba952:	4770      	bx	lr
   ba954:	2003e718 	.word	0x2003e718
   ba958:	000bdd78 	.word	0x000bdd78

000ba95c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ba95c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ba95e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ba960:	d902      	bls.n	ba968 <pinAvailable+0xc>
    return false;
   ba962:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ba964:	b002      	add	sp, #8
   ba966:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba968:	f1a0 030b 	sub.w	r3, r0, #11
   ba96c:	2b02      	cmp	r3, #2
   ba96e:	d81a      	bhi.n	ba9a6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ba970:	4c17      	ldr	r4, [pc, #92]	; (ba9d0 <pinAvailable+0x74>)
   ba972:	7821      	ldrb	r1, [r4, #0]
   ba974:	f3bf 8f5b 	dmb	ish
   ba978:	f011 0101 	ands.w	r1, r1, #1
   ba97c:	d10b      	bne.n	ba996 <pinAvailable+0x3a>
   ba97e:	4620      	mov	r0, r4
   ba980:	9101      	str	r1, [sp, #4]
   ba982:	f7fa f962 	bl	b4c4a <__cxa_guard_acquire>
   ba986:	9901      	ldr	r1, [sp, #4]
   ba988:	b128      	cbz	r0, ba996 <pinAvailable+0x3a>
   ba98a:	4812      	ldr	r0, [pc, #72]	; (ba9d4 <pinAvailable+0x78>)
   ba98c:	f7fd f9e4 	bl	b7d58 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba990:	4620      	mov	r0, r4
   ba992:	f7fa f95f 	bl	b4c54 <__cxa_guard_release>
   ba996:	4b0f      	ldr	r3, [pc, #60]	; (ba9d4 <pinAvailable+0x78>)
   ba998:	7818      	ldrb	r0, [r3, #0]
   ba99a:	f7fd f80b 	bl	b79b4 <hal_spi_is_enabled>
   ba99e:	2800      	cmp	r0, #0
   ba9a0:	d1df      	bne.n	ba962 <pinAvailable+0x6>
  return true; // 'pin' is available
   ba9a2:	2001      	movs	r0, #1
   ba9a4:	e7de      	b.n	ba964 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba9a6:	2801      	cmp	r0, #1
   ba9a8:	d809      	bhi.n	ba9be <pinAvailable+0x62>
   ba9aa:	f000 f87d 	bl	baaa8 <_Z19__fetch_global_Wirev>
   ba9ae:	2100      	movs	r1, #0
   ba9b0:	7c00      	ldrb	r0, [r0, #16]
   ba9b2:	f7fc ffb7 	bl	b7924 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba9b6:	f080 0001 	eor.w	r0, r0, #1
   ba9ba:	b2c0      	uxtb	r0, r0
   ba9bc:	e7d2      	b.n	ba964 <pinAvailable+0x8>
   ba9be:	3809      	subs	r0, #9
   ba9c0:	2801      	cmp	r0, #1
   ba9c2:	d8ee      	bhi.n	ba9a2 <pinAvailable+0x46>
   ba9c4:	f000 f834 	bl	baa30 <_Z22__fetch_global_Serial1v>
   ba9c8:	7c00      	ldrb	r0, [r0, #16]
   ba9ca:	f7fc ff6b 	bl	b78a4 <hal_usart_is_enabled>
   ba9ce:	e7f2      	b.n	ba9b6 <pinAvailable+0x5a>
   ba9d0:	2003e720 	.word	0x2003e720
   ba9d4:	2003e724 	.word	0x2003e724

000ba9d8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba9d8:	2823      	cmp	r0, #35	; 0x23
{
   ba9da:	b538      	push	{r3, r4, r5, lr}
   ba9dc:	4604      	mov	r4, r0
   ba9de:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba9e0:	d80a      	bhi.n	ba9f8 <pinMode+0x20>
   ba9e2:	29ff      	cmp	r1, #255	; 0xff
   ba9e4:	d008      	beq.n	ba9f8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba9e6:	f7ff ffb9 	bl	ba95c <pinAvailable>
   ba9ea:	b128      	cbz	r0, ba9f8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   ba9ec:	4629      	mov	r1, r5
   ba9ee:	4620      	mov	r0, r4
}
   ba9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   ba9f4:	f7fc bdec 	b.w	b75d0 <hal_gpio_mode>
}
   ba9f8:	bd38      	pop	{r3, r4, r5, pc}

000ba9fa <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba9fa:	4770      	bx	lr

000ba9fc <_Z20acquireSerial1Bufferv>:
{
   ba9fc:	b538      	push	{r3, r4, r5, lr}
   ba9fe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   baa00:	2514      	movs	r5, #20
   baa02:	462a      	mov	r2, r5
   baa04:	2100      	movs	r1, #0
   baa06:	f000 fd6d 	bl	bb4e4 <memset>
   baa0a:	8025      	strh	r5, [r4, #0]
   baa0c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baa0e:	4907      	ldr	r1, [pc, #28]	; (baa2c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   baa10:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baa12:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   baa14:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baa16:	f000 f86b 	bl	baaf0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baa1a:	4904      	ldr	r1, [pc, #16]	; (baa2c <_Z20acquireSerial1Bufferv+0x30>)
    };
   baa1c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baa1e:	4628      	mov	r0, r5
   baa20:	f000 f866 	bl	baaf0 <_ZnajRKSt9nothrow_t>
    };
   baa24:	60e0      	str	r0, [r4, #12]
}
   baa26:	4620      	mov	r0, r4
   baa28:	bd38      	pop	{r3, r4, r5, pc}
   baa2a:	bf00      	nop
   baa2c:	000bddac 	.word	0x000bddac

000baa30 <_Z22__fetch_global_Serial1v>:
{
   baa30:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baa32:	4d0e      	ldr	r5, [pc, #56]	; (baa6c <_Z22__fetch_global_Serial1v+0x3c>)
   baa34:	7829      	ldrb	r1, [r5, #0]
   baa36:	f3bf 8f5b 	dmb	ish
   baa3a:	f011 0401 	ands.w	r4, r1, #1
{
   baa3e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baa40:	d111      	bne.n	baa66 <_Z22__fetch_global_Serial1v+0x36>
   baa42:	4628      	mov	r0, r5
   baa44:	f7fa f901 	bl	b4c4a <__cxa_guard_acquire>
   baa48:	b168      	cbz	r0, baa66 <_Z22__fetch_global_Serial1v+0x36>
   baa4a:	a801      	add	r0, sp, #4
   baa4c:	f7ff ffd6 	bl	ba9fc <_Z20acquireSerial1Bufferv>
   baa50:	aa01      	add	r2, sp, #4
   baa52:	4621      	mov	r1, r4
   baa54:	4806      	ldr	r0, [pc, #24]	; (baa70 <_Z22__fetch_global_Serial1v+0x40>)
   baa56:	f7ff fe2b 	bl	ba6b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   baa5a:	4628      	mov	r0, r5
   baa5c:	f7fa f8fa 	bl	b4c54 <__cxa_guard_release>
   baa60:	4804      	ldr	r0, [pc, #16]	; (baa74 <_Z22__fetch_global_Serial1v+0x44>)
   baa62:	f000 fd01 	bl	bb468 <atexit>
    return serial1;
}
   baa66:	4802      	ldr	r0, [pc, #8]	; (baa70 <_Z22__fetch_global_Serial1v+0x40>)
   baa68:	b007      	add	sp, #28
   baa6a:	bd30      	pop	{r4, r5, pc}
   baa6c:	2003e72c 	.word	0x2003e72c
   baa70:	2003e730 	.word	0x2003e730
   baa74:	000ba9fb 	.word	0x000ba9fb

000baa78 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baa78:	4770      	bx	lr
	...

000baa7c <_Z17acquireWireBufferv>:
{
   baa7c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   baa7e:	2520      	movs	r5, #32
   baa80:	2314      	movs	r3, #20
{
   baa82:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   baa84:	6003      	str	r3, [r0, #0]
   baa86:	6085      	str	r5, [r0, #8]
   baa88:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baa8a:	4906      	ldr	r1, [pc, #24]	; (baaa4 <_Z17acquireWireBufferv+0x28>)
   baa8c:	4628      	mov	r0, r5
   baa8e:	f000 f82f 	bl	baaf0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baa92:	4904      	ldr	r1, [pc, #16]	; (baaa4 <_Z17acquireWireBufferv+0x28>)
	};
   baa94:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baa96:	4628      	mov	r0, r5
   baa98:	f000 f82a 	bl	baaf0 <_ZnajRKSt9nothrow_t>
	};
   baa9c:	60e0      	str	r0, [r4, #12]
}
   baa9e:	4620      	mov	r0, r4
   baaa0:	bd38      	pop	{r3, r4, r5, pc}
   baaa2:	bf00      	nop
   baaa4:	000bddac 	.word	0x000bddac

000baaa8 <_Z19__fetch_global_Wirev>:
{
   baaa8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baaaa:	4d0e      	ldr	r5, [pc, #56]	; (baae4 <_Z19__fetch_global_Wirev+0x3c>)
   baaac:	7829      	ldrb	r1, [r5, #0]
   baaae:	f3bf 8f5b 	dmb	ish
   baab2:	f011 0401 	ands.w	r4, r1, #1
{
   baab6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baab8:	d111      	bne.n	baade <_Z19__fetch_global_Wirev+0x36>
   baaba:	4628      	mov	r0, r5
   baabc:	f7fa f8c5 	bl	b4c4a <__cxa_guard_acquire>
   baac0:	b168      	cbz	r0, baade <_Z19__fetch_global_Wirev+0x36>
   baac2:	a801      	add	r0, sp, #4
   baac4:	f7ff ffda 	bl	baa7c <_Z17acquireWireBufferv>
   baac8:	aa01      	add	r2, sp, #4
   baaca:	4621      	mov	r1, r4
   baacc:	4806      	ldr	r0, [pc, #24]	; (baae8 <_Z19__fetch_global_Wirev+0x40>)
   baace:	f7ff fe43 	bl	ba758 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   baad2:	4628      	mov	r0, r5
   baad4:	f7fa f8be 	bl	b4c54 <__cxa_guard_release>
   baad8:	4804      	ldr	r0, [pc, #16]	; (baaec <_Z19__fetch_global_Wirev+0x44>)
   baada:	f000 fcc5 	bl	bb468 <atexit>
	return wire;
}
   baade:	4802      	ldr	r0, [pc, #8]	; (baae8 <_Z19__fetch_global_Wirev+0x40>)
   baae0:	b007      	add	sp, #28
   baae2:	bd30      	pop	{r4, r5, pc}
   baae4:	2003e748 	.word	0x2003e748
   baae8:	2003e74c 	.word	0x2003e74c
   baaec:	000baa79 	.word	0x000baa79

000baaf0 <_ZnajRKSt9nothrow_t>:
   baaf0:	f7fa b8a5 	b.w	b4c3e <_Znaj>

000baaf4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   baaf4:	68c3      	ldr	r3, [r0, #12]
   baaf6:	689a      	ldr	r2, [r3, #8]
   baaf8:	60c2      	str	r2, [r0, #12]
   baafa:	b510      	push	{r4, lr}
   baafc:	b102      	cbz	r2, bab00 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   baafe:	6050      	str	r0, [r2, #4]
   bab00:	6842      	ldr	r2, [r0, #4]
   bab02:	605a      	str	r2, [r3, #4]
   bab04:	680c      	ldr	r4, [r1, #0]
   bab06:	4284      	cmp	r4, r0
   bab08:	d103      	bne.n	bab12 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   bab0a:	600b      	str	r3, [r1, #0]
   bab0c:	6098      	str	r0, [r3, #8]
   bab0e:	6043      	str	r3, [r0, #4]
   bab10:	bd10      	pop	{r4, pc}
   bab12:	6891      	ldr	r1, [r2, #8]
   bab14:	4281      	cmp	r1, r0
   bab16:	bf0c      	ite	eq
   bab18:	6093      	streq	r3, [r2, #8]
   bab1a:	60d3      	strne	r3, [r2, #12]
   bab1c:	e7f6      	b.n	bab0c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000bab1e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   bab1e:	6883      	ldr	r3, [r0, #8]
   bab20:	68da      	ldr	r2, [r3, #12]
   bab22:	6082      	str	r2, [r0, #8]
   bab24:	b510      	push	{r4, lr}
   bab26:	b102      	cbz	r2, bab2a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   bab28:	6050      	str	r0, [r2, #4]
   bab2a:	6842      	ldr	r2, [r0, #4]
   bab2c:	605a      	str	r2, [r3, #4]
   bab2e:	680c      	ldr	r4, [r1, #0]
   bab30:	4284      	cmp	r4, r0
   bab32:	d103      	bne.n	bab3c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   bab34:	600b      	str	r3, [r1, #0]
   bab36:	60d8      	str	r0, [r3, #12]
   bab38:	6043      	str	r3, [r0, #4]
   bab3a:	bd10      	pop	{r4, pc}
   bab3c:	68d1      	ldr	r1, [r2, #12]
   bab3e:	4281      	cmp	r1, r0
   bab40:	bf0c      	ite	eq
   bab42:	60d3      	streq	r3, [r2, #12]
   bab44:	6093      	strne	r3, [r2, #8]
   bab46:	e7f6      	b.n	bab36 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000bab48 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   bab48:	68c3      	ldr	r3, [r0, #12]
   bab4a:	b123      	cbz	r3, bab56 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   bab4c:	4618      	mov	r0, r3
   bab4e:	689b      	ldr	r3, [r3, #8]
   bab50:	2b00      	cmp	r3, #0
   bab52:	d1fb      	bne.n	bab4c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   bab54:	4770      	bx	lr
   bab56:	6843      	ldr	r3, [r0, #4]
   bab58:	68da      	ldr	r2, [r3, #12]
   bab5a:	4282      	cmp	r2, r0
   bab5c:	d102      	bne.n	bab64 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   bab5e:	4618      	mov	r0, r3
   bab60:	685b      	ldr	r3, [r3, #4]
   bab62:	e7f9      	b.n	bab58 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   bab64:	68c2      	ldr	r2, [r0, #12]
   bab66:	4293      	cmp	r3, r2
   bab68:	bf18      	it	ne
   bab6a:	4618      	movne	r0, r3
   bab6c:	4770      	bx	lr

000bab6e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   bab6e:	7803      	ldrb	r3, [r0, #0]
   bab70:	b933      	cbnz	r3, bab80 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   bab72:	6843      	ldr	r3, [r0, #4]
   bab74:	685b      	ldr	r3, [r3, #4]
   bab76:	4283      	cmp	r3, r0
   bab78:	d102      	bne.n	bab80 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   bab7a:	68db      	ldr	r3, [r3, #12]
   bab7c:	4618      	mov	r0, r3
   bab7e:	4770      	bx	lr
   bab80:	6882      	ldr	r2, [r0, #8]
   bab82:	b122      	cbz	r2, bab8e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   bab84:	4613      	mov	r3, r2
   bab86:	68d2      	ldr	r2, [r2, #12]
   bab88:	2a00      	cmp	r2, #0
   bab8a:	d1fb      	bne.n	bab84 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   bab8c:	e7f6      	b.n	bab7c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   bab8e:	6843      	ldr	r3, [r0, #4]
   bab90:	689a      	ldr	r2, [r3, #8]
   bab92:	4282      	cmp	r2, r0
   bab94:	d1f2      	bne.n	bab7c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   bab96:	4618      	mov	r0, r3
   bab98:	685b      	ldr	r3, [r3, #4]
   bab9a:	e7f9      	b.n	bab90 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000bab9c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   bab9c:	f7ff bfd4 	b.w	bab48 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000baba0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   baba0:	f7ff bfe5 	b.w	bab6e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000baba4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   baba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baba8:	461e      	mov	r6, r3
   babaa:	f103 0804 	add.w	r8, r3, #4
   babae:	2300      	movs	r3, #0
   babb0:	e9c1 3302 	strd	r3, r3, [r1, #8]
   babb4:	460c      	mov	r4, r1
   babb6:	604a      	str	r2, [r1, #4]
   babb8:	700b      	strb	r3, [r1, #0]
   babba:	b300      	cbz	r0, babfe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   babbc:	4296      	cmp	r6, r2
   babbe:	6091      	str	r1, [r2, #8]
   babc0:	d118      	bne.n	babf4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   babc2:	6071      	str	r1, [r6, #4]
   babc4:	60f4      	str	r4, [r6, #12]
   babc6:	2701      	movs	r7, #1
   babc8:	f04f 0900 	mov.w	r9, #0
   babcc:	6873      	ldr	r3, [r6, #4]
   babce:	42a3      	cmp	r3, r4
   babd0:	d03f      	beq.n	bac52 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   babd2:	6860      	ldr	r0, [r4, #4]
   babd4:	7802      	ldrb	r2, [r0, #0]
   babd6:	2a00      	cmp	r2, #0
   babd8:	d13b      	bne.n	bac52 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   babda:	6845      	ldr	r5, [r0, #4]
   babdc:	68ab      	ldr	r3, [r5, #8]
   babde:	4298      	cmp	r0, r3
   babe0:	d123      	bne.n	bac2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   babe2:	68eb      	ldr	r3, [r5, #12]
   babe4:	b183      	cbz	r3, bac08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   babe6:	781a      	ldrb	r2, [r3, #0]
   babe8:	b972      	cbnz	r2, bac08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   babea:	7007      	strb	r7, [r0, #0]
   babec:	701f      	strb	r7, [r3, #0]
   babee:	702a      	strb	r2, [r5, #0]
   babf0:	462c      	mov	r4, r5
   babf2:	e7eb      	b.n	babcc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   babf4:	68b3      	ldr	r3, [r6, #8]
   babf6:	4293      	cmp	r3, r2
   babf8:	d1e5      	bne.n	babc6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   babfa:	60b1      	str	r1, [r6, #8]
   babfc:	e7e3      	b.n	babc6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   babfe:	60d1      	str	r1, [r2, #12]
   bac00:	68f3      	ldr	r3, [r6, #12]
   bac02:	4293      	cmp	r3, r2
   bac04:	d1df      	bne.n	babc6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   bac06:	e7dd      	b.n	babc4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   bac08:	68c3      	ldr	r3, [r0, #12]
   bac0a:	42a3      	cmp	r3, r4
   bac0c:	d103      	bne.n	bac16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   bac0e:	4641      	mov	r1, r8
   bac10:	f7ff ff70 	bl	baaf4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bac14:	4604      	mov	r4, r0
   bac16:	6863      	ldr	r3, [r4, #4]
   bac18:	4641      	mov	r1, r8
   bac1a:	701f      	strb	r7, [r3, #0]
   bac1c:	4628      	mov	r0, r5
   bac1e:	f885 9000 	strb.w	r9, [r5]
   bac22:	f7ff ff7c 	bl	bab1e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bac26:	4625      	mov	r5, r4
   bac28:	e7e2      	b.n	babf0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   bac2a:	b113      	cbz	r3, bac32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   bac2c:	781a      	ldrb	r2, [r3, #0]
   bac2e:	2a00      	cmp	r2, #0
   bac30:	d0db      	beq.n	babea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   bac32:	6883      	ldr	r3, [r0, #8]
   bac34:	42a3      	cmp	r3, r4
   bac36:	d103      	bne.n	bac40 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   bac38:	4641      	mov	r1, r8
   bac3a:	f7ff ff70 	bl	bab1e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bac3e:	4604      	mov	r4, r0
   bac40:	6863      	ldr	r3, [r4, #4]
   bac42:	4641      	mov	r1, r8
   bac44:	701f      	strb	r7, [r3, #0]
   bac46:	4628      	mov	r0, r5
   bac48:	f885 9000 	strb.w	r9, [r5]
   bac4c:	f7ff ff52 	bl	baaf4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bac50:	e7e9      	b.n	bac26 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   bac52:	2201      	movs	r2, #1
   bac54:	701a      	strb	r2, [r3, #0]
   bac56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bac5a <_ZSt17__throw_bad_allocv>:
   bac5a:	b508      	push	{r3, lr}
   bac5c:	f7fd f80e 	bl	b7c7c <abort>

000bac60 <_ZSt19__throw_logic_errorPKc>:
   bac60:	b508      	push	{r3, lr}
   bac62:	f7fd f80b 	bl	b7c7c <abort>

000bac66 <_ZSt24__throw_invalid_argumentPKc>:
   bac66:	b508      	push	{r3, lr}
   bac68:	f7fd f808 	bl	b7c7c <abort>

000bac6c <_ZSt20__throw_length_errorPKc>:
   bac6c:	b508      	push	{r3, lr}
   bac6e:	f7fd f805 	bl	b7c7c <abort>

000bac72 <_ZSt20__throw_out_of_rangePKc>:
   bac72:	b508      	push	{r3, lr}
   bac74:	f7fd f802 	bl	b7c7c <abort>

000bac78 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bac78:	b40f      	push	{r0, r1, r2, r3}
   bac7a:	b580      	push	{r7, lr}
   bac7c:	b084      	sub	sp, #16
   bac7e:	af00      	add	r7, sp, #0
   bac80:	f107 0418 	add.w	r4, r7, #24
   bac84:	f854 2b04 	ldr.w	r2, [r4], #4
   bac88:	607a      	str	r2, [r7, #4]
   bac8a:	4610      	mov	r0, r2
   bac8c:	f7f9 ff7a 	bl	b4b84 <strlen>
   bac90:	f200 2307 	addw	r3, r0, #519	; 0x207
   bac94:	f023 0307 	bic.w	r3, r3, #7
   bac98:	ebad 0d03 	sub.w	sp, sp, r3
   bac9c:	f500 7100 	add.w	r1, r0, #512	; 0x200
   baca0:	687a      	ldr	r2, [r7, #4]
   baca2:	60fc      	str	r4, [r7, #12]
   baca4:	4623      	mov	r3, r4
   baca6:	4668      	mov	r0, sp
   baca8:	f000 f85e 	bl	bad68 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bacac:	f7fc ffe6 	bl	b7c7c <abort>

000bacb0 <_ZSt25__throw_bad_function_callv>:
   bacb0:	b508      	push	{r3, lr}
   bacb2:	f7fc ffe3 	bl	b7c7c <abort>
	...

000bacb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bacb8:	4901      	ldr	r1, [pc, #4]	; (bacc0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bacba:	f000 bb99 	b.w	bb3f0 <_ZNKSt9type_infoeqERKS_>
   bacbe:	bf00      	nop
   bacc0:	000bddc8 	.word	0x000bddc8

000bacc4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bacc4:	b580      	push	{r7, lr}
   bacc6:	b09c      	sub	sp, #112	; 0x70
   bacc8:	4606      	mov	r6, r0
   bacca:	af00      	add	r7, sp, #0
   baccc:	460c      	mov	r4, r1
   bacce:	1ba4      	subs	r4, r4, r6
   bacd0:	490e      	ldr	r1, [pc, #56]	; (bad0c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bacd2:	2269      	movs	r2, #105	; 0x69
   bacd4:	1d38      	adds	r0, r7, #4
   bacd6:	f000 fbdd 	bl	bb494 <memcpy>
   bacda:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bacde:	f023 0307 	bic.w	r3, r3, #7
   bace2:	ebad 0d03 	sub.w	sp, sp, r3
   bace6:	466d      	mov	r5, sp
   bace8:	2268      	movs	r2, #104	; 0x68
   bacea:	1d39      	adds	r1, r7, #4
   bacec:	4628      	mov	r0, r5
   bacee:	f000 fbd1 	bl	bb494 <memcpy>
   bacf2:	4622      	mov	r2, r4
   bacf4:	4631      	mov	r1, r6
   bacf6:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bacfa:	442c      	add	r4, r5
   bacfc:	f000 fbca 	bl	bb494 <memcpy>
   bad00:	2300      	movs	r3, #0
   bad02:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bad06:	4628      	mov	r0, r5
   bad08:	f7ff ffaa 	bl	bac60 <_ZSt19__throw_logic_errorPKc>
   bad0c:	000bddd0 	.word	0x000bddd0

000bad10 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bad10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bad14:	af00      	add	r7, sp, #0
   bad16:	b084      	sub	sp, #16
   bad18:	466d      	mov	r5, sp
   bad1a:	f105 040c 	add.w	r4, r5, #12
   bad1e:	f8df 8044 	ldr.w	r8, [pc, #68]	; bad64 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bad22:	4623      	mov	r3, r4
   bad24:	f04f 0c0a 	mov.w	ip, #10
   bad28:	fbb2 f6fc 	udiv	r6, r2, ip
   bad2c:	fb0c 2e16 	mls	lr, ip, r6, r2
   bad30:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bad34:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bad38:	4696      	mov	lr, r2
   bad3a:	f1be 0f09 	cmp.w	lr, #9
   bad3e:	4632      	mov	r2, r6
   bad40:	d8f2      	bhi.n	bad28 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bad42:	1ae4      	subs	r4, r4, r3
   bad44:	428c      	cmp	r4, r1
   bad46:	d809      	bhi.n	bad5c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bad48:	f1c4 030c 	rsb	r3, r4, #12
   bad4c:	4622      	mov	r2, r4
   bad4e:	18e9      	adds	r1, r5, r3
   bad50:	f000 fba0 	bl	bb494 <memcpy>
   bad54:	4620      	mov	r0, r4
   bad56:	46bd      	mov	sp, r7
   bad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bad5c:	f04f 34ff 	mov.w	r4, #4294967295
   bad60:	e7f8      	b.n	bad54 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bad62:	bf00      	nop
   bad64:	000bde39 	.word	0x000bde39

000bad68 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bad68:	3901      	subs	r1, #1
   bad6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bad6e:	4607      	mov	r7, r0
   bad70:	4615      	mov	r5, r2
   bad72:	eb00 0801 	add.w	r8, r0, r1
   bad76:	4604      	mov	r4, r0
   bad78:	782a      	ldrb	r2, [r5, #0]
   bad7a:	b392      	cbz	r2, bade2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bad7c:	4544      	cmp	r4, r8
   bad7e:	d22a      	bcs.n	badd6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bad80:	2a25      	cmp	r2, #37	; 0x25
   bad82:	d107      	bne.n	bad94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bad84:	786a      	ldrb	r2, [r5, #1]
   bad86:	2a73      	cmp	r2, #115	; 0x73
   bad88:	d009      	beq.n	bad9e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bad8a:	2a7a      	cmp	r2, #122	; 0x7a
   bad8c:	d012      	beq.n	badb4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bad8e:	2a25      	cmp	r2, #37	; 0x25
   bad90:	d100      	bne.n	bad94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bad92:	3501      	adds	r5, #1
   bad94:	f815 2b01 	ldrb.w	r2, [r5], #1
   bad98:	f804 2b01 	strb.w	r2, [r4], #1
   bad9c:	e7ec      	b.n	bad78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bad9e:	f853 2b04 	ldr.w	r2, [r3], #4
   bada2:	3a01      	subs	r2, #1
   bada4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bada8:	b1c9      	cbz	r1, badde <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   badaa:	4544      	cmp	r4, r8
   badac:	d013      	beq.n	badd6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   badae:	f804 1b01 	strb.w	r1, [r4], #1
   badb2:	e7f7      	b.n	bada4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   badb4:	78aa      	ldrb	r2, [r5, #2]
   badb6:	2a75      	cmp	r2, #117	; 0x75
   badb8:	d1ec      	bne.n	bad94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   badba:	461e      	mov	r6, r3
   badbc:	eba8 0104 	sub.w	r1, r8, r4
   badc0:	f856 2b04 	ldr.w	r2, [r6], #4
   badc4:	4620      	mov	r0, r4
   badc6:	f7ff ffa3 	bl	bad10 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   badca:	2800      	cmp	r0, #0
   badcc:	dd03      	ble.n	badd6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   badce:	4404      	add	r4, r0
   badd0:	3503      	adds	r5, #3
   badd2:	4633      	mov	r3, r6
   badd4:	e7d0      	b.n	bad78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   badd6:	4621      	mov	r1, r4
   badd8:	4638      	mov	r0, r7
   badda:	f7ff ff73 	bl	bacc4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   badde:	3502      	adds	r5, #2
   bade0:	e7ca      	b.n	bad78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bade2:	7022      	strb	r2, [r4, #0]
   bade4:	1be0      	subs	r0, r4, r7
   bade6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000badea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   badea:	b10a      	cbz	r2, badf0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   badec:	f000 bb52 	b.w	bb494 <memcpy>
   badf0:	4770      	bx	lr

000badf2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   badf2:	b10a      	cbz	r2, badf8 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   badf4:	f000 bb3e 	b.w	bb474 <memcmp>
   badf8:	4610      	mov	r0, r2
   badfa:	4770      	bx	lr

000badfc <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   badfc:	4613      	mov	r3, r2
   badfe:	460a      	mov	r2, r1
   bae00:	b111      	cbz	r1, bae08 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   bae02:	7819      	ldrb	r1, [r3, #0]
   bae04:	f7f9 be64 	b.w	b4ad0 <memchr>
   bae08:	4608      	mov	r0, r1
   bae0a:	4770      	bx	lr

000bae0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   bae0c:	b508      	push	{r3, lr}
   bae0e:	680b      	ldr	r3, [r1, #0]
   bae10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   bae14:	d302      	bcc.n	bae1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   bae16:	480d      	ldr	r0, [pc, #52]	; (bae4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   bae18:	f7ff ff28 	bl	bac6c <_ZSt20__throw_length_errorPKc>
   bae1c:	4293      	cmp	r3, r2
   bae1e:	d90b      	bls.n	bae38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bae20:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   bae24:	ea4f 0042 	mov.w	r0, r2, lsl #1
   bae28:	d206      	bcs.n	bae38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bae2a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   bae2e:	bf2a      	itet	cs
   bae30:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   bae34:	6008      	strcc	r0, [r1, #0]
   bae36:	600b      	strcs	r3, [r1, #0]
   bae38:	6808      	ldr	r0, [r1, #0]
   bae3a:	3001      	adds	r0, #1
   bae3c:	d501      	bpl.n	bae42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   bae3e:	f7ff ff0c 	bl	bac5a <_ZSt17__throw_bad_allocv>
   bae42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bae46:	f7f9 bef8 	b.w	b4c3a <_Znwj>
   bae4a:	bf00      	nop
   bae4c:	000bde44 	.word	0x000bde44

000bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   bae50:	f850 3b08 	ldr.w	r3, [r0], #8
   bae54:	4283      	cmp	r3, r0
   bae56:	d002      	beq.n	bae5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   bae58:	4618      	mov	r0, r3
   bae5a:	f7f9 bef2 	b.w	b4c42 <_ZdlPv>
   bae5e:	4770      	bx	lr

000bae60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   bae60:	b508      	push	{r3, lr}
   bae62:	4603      	mov	r3, r0
   bae64:	4608      	mov	r0, r1
   bae66:	685b      	ldr	r3, [r3, #4]
   bae68:	4298      	cmp	r0, r3
   bae6a:	4611      	mov	r1, r2
   bae6c:	d903      	bls.n	bae76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   bae6e:	4602      	mov	r2, r0
   bae70:	4801      	ldr	r0, [pc, #4]	; (bae78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   bae72:	f7ff ff01 	bl	bac78 <_ZSt24__throw_out_of_range_fmtPKcz>
   bae76:	bd08      	pop	{r3, pc}
   bae78:	000bde5c 	.word	0x000bde5c

000bae7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   bae7c:	6840      	ldr	r0, [r0, #4]
   bae7e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   bae82:	3901      	subs	r1, #1
   bae84:	1a09      	subs	r1, r1, r0
   bae86:	4291      	cmp	r1, r2
   bae88:	b508      	push	{r3, lr}
   bae8a:	d202      	bcs.n	bae92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   bae8c:	4618      	mov	r0, r3
   bae8e:	f7ff feed 	bl	bac6c <_ZSt20__throw_length_errorPKc>
   bae92:	bd08      	pop	{r3, pc}

000bae94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   bae94:	6803      	ldr	r3, [r0, #0]
   bae96:	428b      	cmp	r3, r1
   bae98:	d806      	bhi.n	baea8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   bae9a:	6840      	ldr	r0, [r0, #4]
   bae9c:	4418      	add	r0, r3
   bae9e:	4281      	cmp	r1, r0
   baea0:	bf94      	ite	ls
   baea2:	2000      	movls	r0, #0
   baea4:	2001      	movhi	r0, #1
   baea6:	4770      	bx	lr
   baea8:	2001      	movs	r0, #1
   baeaa:	4770      	bx	lr

000baeac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   baeac:	2a01      	cmp	r2, #1
   baeae:	b410      	push	{r4}
   baeb0:	d104      	bne.n	baebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   baeb2:	780a      	ldrb	r2, [r1, #0]
   baeb4:	f85d 4b04 	ldr.w	r4, [sp], #4
   baeb8:	7002      	strb	r2, [r0, #0]
   baeba:	4770      	bx	lr
   baebc:	f85d 4b04 	ldr.w	r4, [sp], #4
   baec0:	f7ff bf93 	b.w	badea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   baec4:	2a01      	cmp	r2, #1
   baec6:	b430      	push	{r4, r5}
   baec8:	d103      	bne.n	baed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   baeca:	780b      	ldrb	r3, [r1, #0]
   baecc:	7003      	strb	r3, [r0, #0]
   baece:	bc30      	pop	{r4, r5}
   baed0:	4770      	bx	lr
   baed2:	2a00      	cmp	r2, #0
   baed4:	d0fb      	beq.n	baece <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   baed6:	bc30      	pop	{r4, r5}
   baed8:	f000 baea 	b.w	bb4b0 <memmove>

000baedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   baedc:	b508      	push	{r3, lr}
   baede:	1a52      	subs	r2, r2, r1
   baee0:	f7ff ffe4 	bl	baeac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   baee4:	bd08      	pop	{r3, pc}

000baee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   baee6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   baeea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   baeec:	461f      	mov	r7, r3
   baeee:	6843      	ldr	r3, [r0, #4]
   baef0:	eb01 0802 	add.w	r8, r1, r2
   baef4:	1ab2      	subs	r2, r6, r2
   baef6:	441a      	add	r2, r3
   baef8:	eba3 0908 	sub.w	r9, r3, r8
   baefc:	4603      	mov	r3, r0
   baefe:	9201      	str	r2, [sp, #4]
   baf00:	f853 2b08 	ldr.w	r2, [r3], #8
   baf04:	429a      	cmp	r2, r3
   baf06:	bf18      	it	ne
   baf08:	6882      	ldrne	r2, [r0, #8]
   baf0a:	460d      	mov	r5, r1
   baf0c:	bf08      	it	eq
   baf0e:	220f      	moveq	r2, #15
   baf10:	a901      	add	r1, sp, #4
   baf12:	4604      	mov	r4, r0
   baf14:	f7ff ff7a 	bl	bae0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   baf18:	4682      	mov	sl, r0
   baf1a:	b11d      	cbz	r5, baf24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   baf1c:	6821      	ldr	r1, [r4, #0]
   baf1e:	462a      	mov	r2, r5
   baf20:	f7ff ffc4 	bl	baeac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   baf24:	b137      	cbz	r7, baf34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   baf26:	b12e      	cbz	r6, baf34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   baf28:	4632      	mov	r2, r6
   baf2a:	4639      	mov	r1, r7
   baf2c:	eb0a 0005 	add.w	r0, sl, r5
   baf30:	f7ff ffbc 	bl	baeac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   baf34:	f1b9 0f00 	cmp.w	r9, #0
   baf38:	d007      	beq.n	baf4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   baf3a:	6821      	ldr	r1, [r4, #0]
   baf3c:	4435      	add	r5, r6
   baf3e:	464a      	mov	r2, r9
   baf40:	4441      	add	r1, r8
   baf42:	eb0a 0005 	add.w	r0, sl, r5
   baf46:	f7ff ffb1 	bl	baeac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   baf4a:	4620      	mov	r0, r4
   baf4c:	f7ff ff80 	bl	bae50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   baf50:	9b01      	ldr	r3, [sp, #4]
   baf52:	f8c4 a000 	str.w	sl, [r4]
   baf56:	60a3      	str	r3, [r4, #8]
   baf58:	b002      	add	sp, #8
   baf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000baf5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
   baf5e:	b538      	push	{r3, r4, r5, lr}
   baf60:	4604      	mov	r4, r0
   baf62:	4615      	mov	r5, r2
   baf64:	4608      	mov	r0, r1
   baf66:	4411      	add	r1, r2
   baf68:	6862      	ldr	r2, [r4, #4]
   baf6a:	1a52      	subs	r2, r2, r1
   baf6c:	d005      	beq.n	baf7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   baf6e:	b125      	cbz	r5, baf7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   baf70:	6823      	ldr	r3, [r4, #0]
   baf72:	4419      	add	r1, r3
   baf74:	4418      	add	r0, r3
   baf76:	f7ff ffa5 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   baf7a:	6862      	ldr	r2, [r4, #4]
   baf7c:	6823      	ldr	r3, [r4, #0]
   baf7e:	1b55      	subs	r5, r2, r5
   baf80:	2200      	movs	r2, #0
   baf82:	6065      	str	r5, [r4, #4]
   baf84:	555a      	strb	r2, [r3, r5]
   baf86:	bd38      	pop	{r3, r4, r5, pc}

000baf88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   baf88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baf8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   baf8e:	4614      	mov	r4, r2
   baf90:	4680      	mov	r8, r0
   baf92:	462a      	mov	r2, r5
   baf94:	4689      	mov	r9, r1
   baf96:	461f      	mov	r7, r3
   baf98:	4621      	mov	r1, r4
   baf9a:	4b39      	ldr	r3, [pc, #228]	; (bb080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   baf9c:	f7ff ff6e 	bl	bae7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   bafa0:	4642      	mov	r2, r8
   bafa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bafa6:	f852 6b08 	ldr.w	r6, [r2], #8
   bafaa:	4296      	cmp	r6, r2
   bafac:	bf18      	it	ne
   bafae:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   bafb2:	eba5 0b04 	sub.w	fp, r5, r4
   bafb6:	eb03 0a0b 	add.w	sl, r3, fp
   bafba:	bf08      	it	eq
   bafbc:	220f      	moveq	r2, #15
   bafbe:	4552      	cmp	r2, sl
   bafc0:	d351      	bcc.n	bb066 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   bafc2:	444e      	add	r6, r9
   bafc4:	4639      	mov	r1, r7
   bafc6:	44a1      	add	r9, r4
   bafc8:	4640      	mov	r0, r8
   bafca:	eba3 0909 	sub.w	r9, r3, r9
   bafce:	f7ff ff61 	bl	bae94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   bafd2:	b180      	cbz	r0, baff6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   bafd4:	f1b9 0f00 	cmp.w	r9, #0
   bafd8:	d006      	beq.n	bafe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   bafda:	42ac      	cmp	r4, r5
   bafdc:	d004      	beq.n	bafe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   bafde:	464a      	mov	r2, r9
   bafe0:	1931      	adds	r1, r6, r4
   bafe2:	1970      	adds	r0, r6, r5
   bafe4:	f7ff ff6e 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   bafe8:	b315      	cbz	r5, bb030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   bafea:	462a      	mov	r2, r5
   bafec:	4639      	mov	r1, r7
   bafee:	4630      	mov	r0, r6
   baff0:	f7ff ff5c 	bl	baeac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   baff4:	e01c      	b.n	bb030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   baff6:	b135      	cbz	r5, bb006 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   baff8:	42ac      	cmp	r4, r5
   baffa:	d33c      	bcc.n	bb076 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   baffc:	462a      	mov	r2, r5
   baffe:	4639      	mov	r1, r7
   bb000:	4630      	mov	r0, r6
   bb002:	f7ff ff5f 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   bb006:	f1b9 0f00 	cmp.w	r9, #0
   bb00a:	d011      	beq.n	bb030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   bb00c:	42ac      	cmp	r4, r5
   bb00e:	d00f      	beq.n	bb030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   bb010:	464a      	mov	r2, r9
   bb012:	1931      	adds	r1, r6, r4
   bb014:	1970      	adds	r0, r6, r5
   bb016:	f7ff ff55 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   bb01a:	42ac      	cmp	r4, r5
   bb01c:	d208      	bcs.n	bb030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   bb01e:	4434      	add	r4, r6
   bb020:	197b      	adds	r3, r7, r5
   bb022:	429c      	cmp	r4, r3
   bb024:	d30f      	bcc.n	bb046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   bb026:	462a      	mov	r2, r5
   bb028:	4639      	mov	r1, r7
   bb02a:	4630      	mov	r0, r6
   bb02c:	f7ff ff4a 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   bb030:	f8d8 3000 	ldr.w	r3, [r8]
   bb034:	f8c8 a004 	str.w	sl, [r8, #4]
   bb038:	2200      	movs	r2, #0
   bb03a:	4640      	mov	r0, r8
   bb03c:	f803 200a 	strb.w	r2, [r3, sl]
   bb040:	b003      	add	sp, #12
   bb042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb046:	42bc      	cmp	r4, r7
   bb048:	d803      	bhi.n	bb052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   bb04a:	462a      	mov	r2, r5
   bb04c:	eb07 010b 	add.w	r1, r7, fp
   bb050:	e7cd      	b.n	bafee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   bb052:	1be4      	subs	r4, r4, r7
   bb054:	4622      	mov	r2, r4
   bb056:	4639      	mov	r1, r7
   bb058:	4630      	mov	r0, r6
   bb05a:	f7ff ff33 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   bb05e:	1b2a      	subs	r2, r5, r4
   bb060:	1971      	adds	r1, r6, r5
   bb062:	1930      	adds	r0, r6, r4
   bb064:	e7c4      	b.n	baff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   bb066:	9500      	str	r5, [sp, #0]
   bb068:	463b      	mov	r3, r7
   bb06a:	4622      	mov	r2, r4
   bb06c:	4649      	mov	r1, r9
   bb06e:	4640      	mov	r0, r8
   bb070:	f7ff ff39 	bl	baee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   bb074:	e7dc      	b.n	bb030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   bb076:	f1b9 0f00 	cmp.w	r9, #0
   bb07a:	d0d0      	beq.n	bb01e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   bb07c:	e7c8      	b.n	bb010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   bb07e:	bf00      	nop
   bb080:	000bde93 	.word	0x000bde93

000bb084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
   bb084:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb086:	4604      	mov	r4, r0
   bb088:	4623      	mov	r3, r4
   bb08a:	6840      	ldr	r0, [r0, #4]
   bb08c:	f853 6b08 	ldr.w	r6, [r3], #8
   bb090:	429e      	cmp	r6, r3
   bb092:	bf18      	it	ne
   bb094:	68a3      	ldrne	r3, [r4, #8]
   bb096:	eb00 0502 	add.w	r5, r0, r2
   bb09a:	bf08      	it	eq
   bb09c:	230f      	moveq	r3, #15
   bb09e:	429d      	cmp	r5, r3
   bb0a0:	d80a      	bhi.n	bb0b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
   bb0a2:	b112      	cbz	r2, bb0aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
   bb0a4:	4430      	add	r0, r6
   bb0a6:	f7ff ff01 	bl	baeac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb0aa:	6823      	ldr	r3, [r4, #0]
   bb0ac:	6065      	str	r5, [r4, #4]
   bb0ae:	2200      	movs	r2, #0
   bb0b0:	4620      	mov	r0, r4
   bb0b2:	555a      	strb	r2, [r3, r5]
   bb0b4:	b002      	add	sp, #8
   bb0b6:	bd70      	pop	{r4, r5, r6, pc}
   bb0b8:	9200      	str	r2, [sp, #0]
   bb0ba:	460b      	mov	r3, r1
   bb0bc:	2200      	movs	r2, #0
   bb0be:	4601      	mov	r1, r0
   bb0c0:	4620      	mov	r0, r4
   bb0c2:	f7ff ff10 	bl	baee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   bb0c6:	e7f0      	b.n	bb0aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

000bb0c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   bb0c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb0cc:	460e      	mov	r6, r1
   bb0ce:	461d      	mov	r5, r3
   bb0d0:	6841      	ldr	r1, [r0, #4]
   bb0d2:	b923      	cbnz	r3, bb0de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   bb0d4:	4291      	cmp	r1, r2
   bb0d6:	d221      	bcs.n	bb11c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   bb0d8:	f04f 32ff 	mov.w	r2, #4294967295
   bb0dc:	e01e      	b.n	bb11c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   bb0de:	4291      	cmp	r1, r2
   bb0e0:	d9fa      	bls.n	bb0d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   bb0e2:	f8d0 8000 	ldr.w	r8, [r0]
   bb0e6:	7833      	ldrb	r3, [r6, #0]
   bb0e8:	f88d 3007 	strb.w	r3, [sp, #7]
   bb0ec:	eb08 0701 	add.w	r7, r8, r1
   bb0f0:	eb08 0002 	add.w	r0, r8, r2
   bb0f4:	1a89      	subs	r1, r1, r2
   bb0f6:	f1c5 0901 	rsb	r9, r5, #1
   bb0fa:	42a9      	cmp	r1, r5
   bb0fc:	d3ec      	bcc.n	bb0d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   bb0fe:	f10d 0207 	add.w	r2, sp, #7
   bb102:	4449      	add	r1, r9
   bb104:	f7ff fe7a 	bl	badfc <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   bb108:	4604      	mov	r4, r0
   bb10a:	2800      	cmp	r0, #0
   bb10c:	d0e4      	beq.n	bb0d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   bb10e:	462a      	mov	r2, r5
   bb110:	4631      	mov	r1, r6
   bb112:	f7ff fe6e 	bl	badf2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   bb116:	b928      	cbnz	r0, bb124 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   bb118:	eba4 0208 	sub.w	r2, r4, r8
   bb11c:	4610      	mov	r0, r2
   bb11e:	b003      	add	sp, #12
   bb120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb124:	1c60      	adds	r0, r4, #1
   bb126:	1a39      	subs	r1, r7, r0
   bb128:	e7e7      	b.n	bb0fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000bb12a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   bb12a:	b513      	push	{r0, r1, r4, lr}
   bb12c:	4604      	mov	r4, r0
   bb12e:	4608      	mov	r0, r1
   bb130:	9201      	str	r2, [sp, #4]
   bb132:	9100      	str	r1, [sp, #0]
   bb134:	f7f9 fd26 	bl	b4b84 <strlen>
   bb138:	e9dd 1200 	ldrd	r1, r2, [sp]
   bb13c:	4603      	mov	r3, r0
   bb13e:	4620      	mov	r0, r4
   bb140:	f7ff ffc2 	bl	bb0c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   bb144:	b002      	add	sp, #8
   bb146:	bd10      	pop	{r4, pc}

000bb148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   bb148:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb14a:	4604      	mov	r4, r0
   bb14c:	4616      	mov	r6, r2
   bb14e:	460d      	mov	r5, r1
   bb150:	b919      	cbnz	r1, bb15a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   bb152:	b112      	cbz	r2, bb15a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   bb154:	480d      	ldr	r0, [pc, #52]	; (bb18c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   bb156:	f7ff fd83 	bl	bac60 <_ZSt19__throw_logic_errorPKc>
   bb15a:	1b73      	subs	r3, r6, r5
   bb15c:	2b0f      	cmp	r3, #15
   bb15e:	9301      	str	r3, [sp, #4]
   bb160:	d907      	bls.n	bb172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   bb162:	2200      	movs	r2, #0
   bb164:	a901      	add	r1, sp, #4
   bb166:	4620      	mov	r0, r4
   bb168:	f7ff fe50 	bl	bae0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   bb16c:	9b01      	ldr	r3, [sp, #4]
   bb16e:	6020      	str	r0, [r4, #0]
   bb170:	60a3      	str	r3, [r4, #8]
   bb172:	4632      	mov	r2, r6
   bb174:	4629      	mov	r1, r5
   bb176:	6820      	ldr	r0, [r4, #0]
   bb178:	f7ff feb0 	bl	baedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   bb17c:	9b01      	ldr	r3, [sp, #4]
   bb17e:	6822      	ldr	r2, [r4, #0]
   bb180:	6063      	str	r3, [r4, #4]
   bb182:	2100      	movs	r1, #0
   bb184:	54d1      	strb	r1, [r2, r3]
   bb186:	b002      	add	sp, #8
   bb188:	bd70      	pop	{r4, r5, r6, pc}
   bb18a:	bf00      	nop
   bb18c:	000bd8a2 	.word	0x000bd8a2

000bb190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   bb190:	b508      	push	{r3, lr}
   bb192:	f04f 0300 	mov.w	r3, #0
   bb196:	f7ff ffd7 	bl	bb148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   bb19a:	bd08      	pop	{r3, pc}

000bb19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   bb19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb1a0:	460d      	mov	r5, r1
   bb1a2:	4617      	mov	r7, r2
   bb1a4:	4698      	mov	r8, r3
   bb1a6:	f100 0308 	add.w	r3, r0, #8
   bb1aa:	4604      	mov	r4, r0
   bb1ac:	6003      	str	r3, [r0, #0]
   bb1ae:	4639      	mov	r1, r7
   bb1b0:	4a09      	ldr	r2, [pc, #36]	; (bb1d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   bb1b2:	4628      	mov	r0, r5
   bb1b4:	f7ff fe54 	bl	bae60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   bb1b8:	682e      	ldr	r6, [r5, #0]
   bb1ba:	686a      	ldr	r2, [r5, #4]
   bb1bc:	1831      	adds	r1, r6, r0
   bb1be:	1bd2      	subs	r2, r2, r7
   bb1c0:	4620      	mov	r0, r4
   bb1c2:	4542      	cmp	r2, r8
   bb1c4:	bf94      	ite	ls
   bb1c6:	188a      	addls	r2, r1, r2
   bb1c8:	eb01 0208 	addhi.w	r2, r1, r8
   bb1cc:	f7ff ffe0 	bl	bb190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   bb1d0:	4620      	mov	r0, r4
   bb1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb1d6:	bf00      	nop
   bb1d8:	000bdeac 	.word	0x000bdeac

000bb1dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   bb1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb1de:	460d      	mov	r5, r1
   bb1e0:	4604      	mov	r4, r0
   bb1e2:	4611      	mov	r1, r2
   bb1e4:	4628      	mov	r0, r5
   bb1e6:	4a06      	ldr	r2, [pc, #24]	; (bb200 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   bb1e8:	9301      	str	r3, [sp, #4]
   bb1ea:	f7ff fe39 	bl	bae60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   bb1ee:	9b01      	ldr	r3, [sp, #4]
   bb1f0:	4602      	mov	r2, r0
   bb1f2:	4629      	mov	r1, r5
   bb1f4:	4620      	mov	r0, r4
   bb1f6:	f7ff ffd1 	bl	bb19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   bb1fa:	4620      	mov	r0, r4
   bb1fc:	b003      	add	sp, #12
   bb1fe:	bd30      	pop	{r4, r5, pc}
   bb200:	000bdec7 	.word	0x000bdec7

000bb204 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb204:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb206:	2400      	movs	r4, #0
   bb208:	2310      	movs	r3, #16
   bb20a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb20e:	6803      	ldr	r3, [r0, #0]
   bb210:	4615      	mov	r5, r2
   bb212:	699e      	ldr	r6, [r3, #24]
   bb214:	6812      	ldr	r2, [r2, #0]
   bb216:	466b      	mov	r3, sp
   bb218:	e9cd 4400 	strd	r4, r4, [sp]
   bb21c:	47b0      	blx	r6
   bb21e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb222:	f003 0306 	and.w	r3, r3, #6
   bb226:	2b06      	cmp	r3, #6
   bb228:	bf03      	ittte	eq
   bb22a:	9b00      	ldreq	r3, [sp, #0]
   bb22c:	602b      	streq	r3, [r5, #0]
   bb22e:	2001      	moveq	r0, #1
   bb230:	4620      	movne	r0, r4
   bb232:	b004      	add	sp, #16
   bb234:	bd70      	pop	{r4, r5, r6, pc}

000bb236 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb236:	9800      	ldr	r0, [sp, #0]
   bb238:	4290      	cmp	r0, r2
   bb23a:	bf14      	ite	ne
   bb23c:	2001      	movne	r0, #1
   bb23e:	2006      	moveq	r0, #6
   bb240:	4770      	bx	lr
	...

000bb244 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb244:	b510      	push	{r4, lr}
   bb246:	4b03      	ldr	r3, [pc, #12]	; (bb254 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb248:	6003      	str	r3, [r0, #0]
   bb24a:	4604      	mov	r4, r0
   bb24c:	f000 f8cd 	bl	bb3ea <_ZNSt9type_infoD1Ev>
   bb250:	4620      	mov	r0, r4
   bb252:	bd10      	pop	{r4, pc}
   bb254:	000bdf14 	.word	0x000bdf14

000bb258 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb258:	b510      	push	{r4, lr}
   bb25a:	4604      	mov	r4, r0
   bb25c:	f7ff fff2 	bl	bb244 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb260:	4620      	mov	r0, r4
   bb262:	2108      	movs	r1, #8
   bb264:	f7f9 fcef 	bl	b4c46 <_ZdlPvj>
   bb268:	4620      	mov	r0, r4
   bb26a:	bd10      	pop	{r4, pc}

000bb26c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb270:	461f      	mov	r7, r3
   bb272:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb276:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb27a:	4598      	cmp	r8, r3
   bb27c:	4606      	mov	r6, r0
   bb27e:	4615      	mov	r5, r2
   bb280:	d107      	bne.n	bb292 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb282:	9907      	ldr	r1, [sp, #28]
   bb284:	f000 f8b4 	bl	bb3f0 <_ZNKSt9type_infoeqERKS_>
   bb288:	b118      	cbz	r0, bb292 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb28a:	7165      	strb	r5, [r4, #5]
   bb28c:	2000      	movs	r0, #0
   bb28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb292:	4639      	mov	r1, r7
   bb294:	4630      	mov	r0, r6
   bb296:	f000 f8ab 	bl	bb3f0 <_ZNKSt9type_infoeqERKS_>
   bb29a:	2800      	cmp	r0, #0
   bb29c:	d0f6      	beq.n	bb28c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb29e:	2301      	movs	r3, #1
   bb2a0:	f8c4 8000 	str.w	r8, [r4]
   bb2a4:	7125      	strb	r5, [r4, #4]
   bb2a6:	71a3      	strb	r3, [r4, #6]
   bb2a8:	e7f0      	b.n	bb28c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb2aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb2aa:	b538      	push	{r3, r4, r5, lr}
   bb2ac:	4615      	mov	r5, r2
   bb2ae:	461c      	mov	r4, r3
   bb2b0:	f000 f89e 	bl	bb3f0 <_ZNKSt9type_infoeqERKS_>
   bb2b4:	b120      	cbz	r0, bb2c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb2b6:	2308      	movs	r3, #8
   bb2b8:	60e3      	str	r3, [r4, #12]
   bb2ba:	2306      	movs	r3, #6
   bb2bc:	6025      	str	r5, [r4, #0]
   bb2be:	7123      	strb	r3, [r4, #4]
   bb2c0:	bd38      	pop	{r3, r4, r5, pc}

000bb2c2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb2c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb2c4:	4605      	mov	r5, r0
   bb2c6:	460c      	mov	r4, r1
   bb2c8:	9201      	str	r2, [sp, #4]
   bb2ca:	461e      	mov	r6, r3
   bb2cc:	f000 f890 	bl	bb3f0 <_ZNKSt9type_infoeqERKS_>
   bb2d0:	b950      	cbnz	r0, bb2e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb2d2:	2e03      	cmp	r6, #3
   bb2d4:	d808      	bhi.n	bb2e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb2d6:	6823      	ldr	r3, [r4, #0]
   bb2d8:	9a01      	ldr	r2, [sp, #4]
   bb2da:	695b      	ldr	r3, [r3, #20]
   bb2dc:	4629      	mov	r1, r5
   bb2de:	4620      	mov	r0, r4
   bb2e0:	b002      	add	sp, #8
   bb2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb2e6:	4718      	bx	r3
   bb2e8:	b002      	add	sp, #8
   bb2ea:	bd70      	pop	{r4, r5, r6, pc}

000bb2ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb2ec:	b510      	push	{r4, lr}
   bb2ee:	4b03      	ldr	r3, [pc, #12]	; (bb2fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb2f0:	6003      	str	r3, [r0, #0]
   bb2f2:	4604      	mov	r4, r0
   bb2f4:	f7ff ffa6 	bl	bb244 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb2f8:	4620      	mov	r0, r4
   bb2fa:	bd10      	pop	{r4, pc}
   bb2fc:	000bdf74 	.word	0x000bdf74

000bb300 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb300:	b510      	push	{r4, lr}
   bb302:	4604      	mov	r4, r0
   bb304:	f7ff fff2 	bl	bb2ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb308:	4620      	mov	r0, r4
   bb30a:	210c      	movs	r1, #12
   bb30c:	f7f9 fc9b 	bl	b4c46 <_ZdlPvj>
   bb310:	4620      	mov	r0, r4
   bb312:	bd10      	pop	{r4, pc}

000bb314 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb316:	9f08      	ldr	r7, [sp, #32]
   bb318:	4297      	cmp	r7, r2
   bb31a:	4605      	mov	r5, r0
   bb31c:	460e      	mov	r6, r1
   bb31e:	4614      	mov	r4, r2
   bb320:	d00a      	beq.n	bb338 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb322:	68a8      	ldr	r0, [r5, #8]
   bb324:	6802      	ldr	r2, [r0, #0]
   bb326:	9708      	str	r7, [sp, #32]
   bb328:	6a15      	ldr	r5, [r2, #32]
   bb32a:	4631      	mov	r1, r6
   bb32c:	4622      	mov	r2, r4
   bb32e:	46ac      	mov	ip, r5
   bb330:	b003      	add	sp, #12
   bb332:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb336:	4760      	bx	ip
   bb338:	4619      	mov	r1, r3
   bb33a:	9301      	str	r3, [sp, #4]
   bb33c:	f000 f858 	bl	bb3f0 <_ZNKSt9type_infoeqERKS_>
   bb340:	9b01      	ldr	r3, [sp, #4]
   bb342:	2800      	cmp	r0, #0
   bb344:	d0ed      	beq.n	bb322 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb346:	2006      	movs	r0, #6
   bb348:	b003      	add	sp, #12
   bb34a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb34c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb34c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb350:	460d      	mov	r5, r1
   bb352:	4619      	mov	r1, r3
   bb354:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb358:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb35c:	4681      	mov	r9, r0
   bb35e:	4617      	mov	r7, r2
   bb360:	4698      	mov	r8, r3
   bb362:	f000 f845 	bl	bb3f0 <_ZNKSt9type_infoeqERKS_>
   bb366:	b190      	cbz	r0, bb38e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb368:	2d00      	cmp	r5, #0
   bb36a:	6034      	str	r4, [r6, #0]
   bb36c:	7137      	strb	r7, [r6, #4]
   bb36e:	db09      	blt.n	bb384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb370:	1961      	adds	r1, r4, r5
   bb372:	458a      	cmp	sl, r1
   bb374:	bf0c      	ite	eq
   bb376:	2106      	moveq	r1, #6
   bb378:	2101      	movne	r1, #1
   bb37a:	71b1      	strb	r1, [r6, #6]
   bb37c:	2000      	movs	r0, #0
   bb37e:	b001      	add	sp, #4
   bb380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb384:	3502      	adds	r5, #2
   bb386:	d1f9      	bne.n	bb37c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb388:	2301      	movs	r3, #1
   bb38a:	71b3      	strb	r3, [r6, #6]
   bb38c:	e7f6      	b.n	bb37c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb38e:	4554      	cmp	r4, sl
   bb390:	d106      	bne.n	bb3a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb392:	4659      	mov	r1, fp
   bb394:	4648      	mov	r0, r9
   bb396:	f000 f82b 	bl	bb3f0 <_ZNKSt9type_infoeqERKS_>
   bb39a:	b108      	cbz	r0, bb3a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb39c:	7177      	strb	r7, [r6, #5]
   bb39e:	e7ed      	b.n	bb37c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb3a0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb3a4:	6803      	ldr	r3, [r0, #0]
   bb3a6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb3aa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb3ae:	69dc      	ldr	r4, [r3, #28]
   bb3b0:	463a      	mov	r2, r7
   bb3b2:	4643      	mov	r3, r8
   bb3b4:	4629      	mov	r1, r5
   bb3b6:	46a4      	mov	ip, r4
   bb3b8:	b001      	add	sp, #4
   bb3ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3be:	4760      	bx	ip

000bb3c0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb3c4:	4607      	mov	r7, r0
   bb3c6:	460c      	mov	r4, r1
   bb3c8:	4615      	mov	r5, r2
   bb3ca:	461e      	mov	r6, r3
   bb3cc:	f7ff ff6d 	bl	bb2aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb3d0:	b948      	cbnz	r0, bb3e6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb3d2:	68b8      	ldr	r0, [r7, #8]
   bb3d4:	6803      	ldr	r3, [r0, #0]
   bb3d6:	699f      	ldr	r7, [r3, #24]
   bb3d8:	462a      	mov	r2, r5
   bb3da:	4633      	mov	r3, r6
   bb3dc:	4621      	mov	r1, r4
   bb3de:	46bc      	mov	ip, r7
   bb3e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb3e4:	4760      	bx	ip
   bb3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb3ea <_ZNSt9type_infoD1Ev>:
   bb3ea:	4770      	bx	lr

000bb3ec <_ZNKSt9type_info14__is_pointer_pEv>:
   bb3ec:	2000      	movs	r0, #0
   bb3ee:	4770      	bx	lr

000bb3f0 <_ZNKSt9type_infoeqERKS_>:
   bb3f0:	4281      	cmp	r1, r0
   bb3f2:	b508      	push	{r3, lr}
   bb3f4:	d00e      	beq.n	bb414 <_ZNKSt9type_infoeqERKS_+0x24>
   bb3f6:	6840      	ldr	r0, [r0, #4]
   bb3f8:	7803      	ldrb	r3, [r0, #0]
   bb3fa:	2b2a      	cmp	r3, #42	; 0x2a
   bb3fc:	d00c      	beq.n	bb418 <_ZNKSt9type_infoeqERKS_+0x28>
   bb3fe:	6849      	ldr	r1, [r1, #4]
   bb400:	780b      	ldrb	r3, [r1, #0]
   bb402:	2b2a      	cmp	r3, #42	; 0x2a
   bb404:	bf08      	it	eq
   bb406:	3101      	addeq	r1, #1
   bb408:	f7f9 fbb2 	bl	b4b70 <strcmp>
   bb40c:	fab0 f080 	clz	r0, r0
   bb410:	0940      	lsrs	r0, r0, #5
   bb412:	bd08      	pop	{r3, pc}
   bb414:	2001      	movs	r0, #1
   bb416:	e7fc      	b.n	bb412 <_ZNKSt9type_infoeqERKS_+0x22>
   bb418:	2000      	movs	r0, #0
   bb41a:	e7fa      	b.n	bb412 <_ZNKSt9type_infoeqERKS_+0x22>

000bb41c <asctime_r>:
   bb41c:	b510      	push	{r4, lr}
   bb41e:	460c      	mov	r4, r1
   bb420:	6941      	ldr	r1, [r0, #20]
   bb422:	6903      	ldr	r3, [r0, #16]
   bb424:	6982      	ldr	r2, [r0, #24]
   bb426:	b086      	sub	sp, #24
   bb428:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bb42c:	9104      	str	r1, [sp, #16]
   bb42e:	6801      	ldr	r1, [r0, #0]
   bb430:	9103      	str	r1, [sp, #12]
   bb432:	6841      	ldr	r1, [r0, #4]
   bb434:	9102      	str	r1, [sp, #8]
   bb436:	6881      	ldr	r1, [r0, #8]
   bb438:	9101      	str	r1, [sp, #4]
   bb43a:	68c1      	ldr	r1, [r0, #12]
   bb43c:	9100      	str	r1, [sp, #0]
   bb43e:	4907      	ldr	r1, [pc, #28]	; (bb45c <asctime_r+0x40>)
   bb440:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb444:	440b      	add	r3, r1
   bb446:	4906      	ldr	r1, [pc, #24]	; (bb460 <asctime_r+0x44>)
   bb448:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb44c:	440a      	add	r2, r1
   bb44e:	4620      	mov	r0, r4
   bb450:	4904      	ldr	r1, [pc, #16]	; (bb464 <asctime_r+0x48>)
   bb452:	f7fc fbfb 	bl	b7c4c <siprintf>
   bb456:	4620      	mov	r0, r4
   bb458:	b006      	add	sp, #24
   bb45a:	bd10      	pop	{r4, pc}
   bb45c:	000bdfe2 	.word	0x000bdfe2
   bb460:	000bdfcd 	.word	0x000bdfcd
   bb464:	000bdfad 	.word	0x000bdfad

000bb468 <atexit>:
   bb468:	2300      	movs	r3, #0
   bb46a:	4601      	mov	r1, r0
   bb46c:	461a      	mov	r2, r3
   bb46e:	4618      	mov	r0, r3
   bb470:	f000 bfcc 	b.w	bc40c <__register_exitproc>

000bb474 <memcmp>:
   bb474:	b510      	push	{r4, lr}
   bb476:	3901      	subs	r1, #1
   bb478:	4402      	add	r2, r0
   bb47a:	4290      	cmp	r0, r2
   bb47c:	d101      	bne.n	bb482 <memcmp+0xe>
   bb47e:	2000      	movs	r0, #0
   bb480:	e005      	b.n	bb48e <memcmp+0x1a>
   bb482:	7803      	ldrb	r3, [r0, #0]
   bb484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb488:	42a3      	cmp	r3, r4
   bb48a:	d001      	beq.n	bb490 <memcmp+0x1c>
   bb48c:	1b18      	subs	r0, r3, r4
   bb48e:	bd10      	pop	{r4, pc}
   bb490:	3001      	adds	r0, #1
   bb492:	e7f2      	b.n	bb47a <memcmp+0x6>

000bb494 <memcpy>:
   bb494:	440a      	add	r2, r1
   bb496:	4291      	cmp	r1, r2
   bb498:	f100 33ff 	add.w	r3, r0, #4294967295
   bb49c:	d100      	bne.n	bb4a0 <memcpy+0xc>
   bb49e:	4770      	bx	lr
   bb4a0:	b510      	push	{r4, lr}
   bb4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb4a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb4aa:	4291      	cmp	r1, r2
   bb4ac:	d1f9      	bne.n	bb4a2 <memcpy+0xe>
   bb4ae:	bd10      	pop	{r4, pc}

000bb4b0 <memmove>:
   bb4b0:	4288      	cmp	r0, r1
   bb4b2:	b510      	push	{r4, lr}
   bb4b4:	eb01 0402 	add.w	r4, r1, r2
   bb4b8:	d902      	bls.n	bb4c0 <memmove+0x10>
   bb4ba:	4284      	cmp	r4, r0
   bb4bc:	4623      	mov	r3, r4
   bb4be:	d807      	bhi.n	bb4d0 <memmove+0x20>
   bb4c0:	1e43      	subs	r3, r0, #1
   bb4c2:	42a1      	cmp	r1, r4
   bb4c4:	d008      	beq.n	bb4d8 <memmove+0x28>
   bb4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb4ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb4ce:	e7f8      	b.n	bb4c2 <memmove+0x12>
   bb4d0:	4402      	add	r2, r0
   bb4d2:	4601      	mov	r1, r0
   bb4d4:	428a      	cmp	r2, r1
   bb4d6:	d100      	bne.n	bb4da <memmove+0x2a>
   bb4d8:	bd10      	pop	{r4, pc}
   bb4da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb4de:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb4e2:	e7f7      	b.n	bb4d4 <memmove+0x24>

000bb4e4 <memset>:
   bb4e4:	4402      	add	r2, r0
   bb4e6:	4603      	mov	r3, r0
   bb4e8:	4293      	cmp	r3, r2
   bb4ea:	d100      	bne.n	bb4ee <memset+0xa>
   bb4ec:	4770      	bx	lr
   bb4ee:	f803 1b01 	strb.w	r1, [r3], #1
   bb4f2:	e7f9      	b.n	bb4e8 <memset+0x4>

000bb4f4 <srand>:
   bb4f4:	b538      	push	{r3, r4, r5, lr}
   bb4f6:	4b10      	ldr	r3, [pc, #64]	; (bb538 <srand+0x44>)
   bb4f8:	681d      	ldr	r5, [r3, #0]
   bb4fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb4fc:	4604      	mov	r4, r0
   bb4fe:	b9b3      	cbnz	r3, bb52e <srand+0x3a>
   bb500:	2018      	movs	r0, #24
   bb502:	f7fc fb83 	bl	b7c0c <malloc>
   bb506:	4602      	mov	r2, r0
   bb508:	63a8      	str	r0, [r5, #56]	; 0x38
   bb50a:	b920      	cbnz	r0, bb516 <srand+0x22>
   bb50c:	4b0b      	ldr	r3, [pc, #44]	; (bb53c <srand+0x48>)
   bb50e:	480c      	ldr	r0, [pc, #48]	; (bb540 <srand+0x4c>)
   bb510:	2142      	movs	r1, #66	; 0x42
   bb512:	f7fc fbcb 	bl	b7cac <__assert_func>
   bb516:	490b      	ldr	r1, [pc, #44]	; (bb544 <srand+0x50>)
   bb518:	4b0b      	ldr	r3, [pc, #44]	; (bb548 <srand+0x54>)
   bb51a:	e9c0 1300 	strd	r1, r3, [r0]
   bb51e:	4b0b      	ldr	r3, [pc, #44]	; (bb54c <srand+0x58>)
   bb520:	6083      	str	r3, [r0, #8]
   bb522:	230b      	movs	r3, #11
   bb524:	8183      	strh	r3, [r0, #12]
   bb526:	2100      	movs	r1, #0
   bb528:	2001      	movs	r0, #1
   bb52a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb52e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb530:	2200      	movs	r2, #0
   bb532:	611c      	str	r4, [r3, #16]
   bb534:	615a      	str	r2, [r3, #20]
   bb536:	bd38      	pop	{r3, r4, r5, pc}
   bb538:	2003e220 	.word	0x2003e220
   bb53c:	000be107 	.word	0x000be107
   bb540:	000be11e 	.word	0x000be11e
   bb544:	abcd330e 	.word	0xabcd330e
   bb548:	e66d1234 	.word	0xe66d1234
   bb54c:	0005deec 	.word	0x0005deec

000bb550 <strcpy>:
   bb550:	4603      	mov	r3, r0
   bb552:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb556:	f803 2b01 	strb.w	r2, [r3], #1
   bb55a:	2a00      	cmp	r2, #0
   bb55c:	d1f9      	bne.n	bb552 <strcpy+0x2>
   bb55e:	4770      	bx	lr

000bb560 <strdup>:
   bb560:	4b02      	ldr	r3, [pc, #8]	; (bb56c <strdup+0xc>)
   bb562:	4601      	mov	r1, r0
   bb564:	6818      	ldr	r0, [r3, #0]
   bb566:	f000 b803 	b.w	bb570 <_strdup_r>
   bb56a:	bf00      	nop
   bb56c:	2003e220 	.word	0x2003e220

000bb570 <_strdup_r>:
   bb570:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb572:	4604      	mov	r4, r0
   bb574:	4608      	mov	r0, r1
   bb576:	460d      	mov	r5, r1
   bb578:	f7f9 fb04 	bl	b4b84 <strlen>
   bb57c:	1c42      	adds	r2, r0, #1
   bb57e:	4611      	mov	r1, r2
   bb580:	4620      	mov	r0, r4
   bb582:	9201      	str	r2, [sp, #4]
   bb584:	f7fc fb82 	bl	b7c8c <_malloc_r>
   bb588:	4604      	mov	r4, r0
   bb58a:	b118      	cbz	r0, bb594 <_strdup_r+0x24>
   bb58c:	9a01      	ldr	r2, [sp, #4]
   bb58e:	4629      	mov	r1, r5
   bb590:	f7ff ff80 	bl	bb494 <memcpy>
   bb594:	4620      	mov	r0, r4
   bb596:	b003      	add	sp, #12
   bb598:	bd30      	pop	{r4, r5, pc}

000bb59a <strncmp>:
   bb59a:	b510      	push	{r4, lr}
   bb59c:	b17a      	cbz	r2, bb5be <strncmp+0x24>
   bb59e:	4603      	mov	r3, r0
   bb5a0:	3901      	subs	r1, #1
   bb5a2:	1884      	adds	r4, r0, r2
   bb5a4:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb5a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb5ac:	4290      	cmp	r0, r2
   bb5ae:	d101      	bne.n	bb5b4 <strncmp+0x1a>
   bb5b0:	42a3      	cmp	r3, r4
   bb5b2:	d101      	bne.n	bb5b8 <strncmp+0x1e>
   bb5b4:	1a80      	subs	r0, r0, r2
   bb5b6:	bd10      	pop	{r4, pc}
   bb5b8:	2800      	cmp	r0, #0
   bb5ba:	d1f3      	bne.n	bb5a4 <strncmp+0xa>
   bb5bc:	e7fa      	b.n	bb5b4 <strncmp+0x1a>
   bb5be:	4610      	mov	r0, r2
   bb5c0:	e7f9      	b.n	bb5b6 <strncmp+0x1c>

000bb5c2 <strnlen>:
   bb5c2:	b510      	push	{r4, lr}
   bb5c4:	4602      	mov	r2, r0
   bb5c6:	4401      	add	r1, r0
   bb5c8:	428a      	cmp	r2, r1
   bb5ca:	4613      	mov	r3, r2
   bb5cc:	d003      	beq.n	bb5d6 <strnlen+0x14>
   bb5ce:	781c      	ldrb	r4, [r3, #0]
   bb5d0:	3201      	adds	r2, #1
   bb5d2:	2c00      	cmp	r4, #0
   bb5d4:	d1f8      	bne.n	bb5c8 <strnlen+0x6>
   bb5d6:	1a18      	subs	r0, r3, r0
   bb5d8:	bd10      	pop	{r4, pc}

000bb5da <sulp>:
   bb5da:	b570      	push	{r4, r5, r6, lr}
   bb5dc:	4604      	mov	r4, r0
   bb5de:	460d      	mov	r5, r1
   bb5e0:	ec45 4b10 	vmov	d0, r4, r5
   bb5e4:	4616      	mov	r6, r2
   bb5e6:	f001 fe6b 	bl	bd2c0 <__ulp>
   bb5ea:	ec51 0b10 	vmov	r0, r1, d0
   bb5ee:	b17e      	cbz	r6, bb610 <sulp+0x36>
   bb5f0:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb5f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb5f8:	2b00      	cmp	r3, #0
   bb5fa:	dd09      	ble.n	bb610 <sulp+0x36>
   bb5fc:	051b      	lsls	r3, r3, #20
   bb5fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb602:	2400      	movs	r4, #0
   bb604:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb608:	4622      	mov	r2, r4
   bb60a:	462b      	mov	r3, r5
   bb60c:	f7f8 fec4 	bl	b4398 <__aeabi_dmul>
   bb610:	bd70      	pop	{r4, r5, r6, pc}
   bb612:	0000      	movs	r0, r0
   bb614:	0000      	movs	r0, r0
	...

000bb618 <_strtod_l>:
   bb618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb61c:	ed2d 8b02 	vpush	{d8}
   bb620:	b09d      	sub	sp, #116	; 0x74
   bb622:	461f      	mov	r7, r3
   bb624:	2300      	movs	r3, #0
   bb626:	9318      	str	r3, [sp, #96]	; 0x60
   bb628:	4ba2      	ldr	r3, [pc, #648]	; (bb8b4 <_strtod_l+0x29c>)
   bb62a:	9213      	str	r2, [sp, #76]	; 0x4c
   bb62c:	681b      	ldr	r3, [r3, #0]
   bb62e:	9305      	str	r3, [sp, #20]
   bb630:	4604      	mov	r4, r0
   bb632:	4618      	mov	r0, r3
   bb634:	4688      	mov	r8, r1
   bb636:	f7f9 faa5 	bl	b4b84 <strlen>
   bb63a:	f04f 0a00 	mov.w	sl, #0
   bb63e:	4605      	mov	r5, r0
   bb640:	f04f 0b00 	mov.w	fp, #0
   bb644:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb64a:	781a      	ldrb	r2, [r3, #0]
   bb64c:	2a2b      	cmp	r2, #43	; 0x2b
   bb64e:	d04e      	beq.n	bb6ee <_strtod_l+0xd6>
   bb650:	d83b      	bhi.n	bb6ca <_strtod_l+0xb2>
   bb652:	2a0d      	cmp	r2, #13
   bb654:	d834      	bhi.n	bb6c0 <_strtod_l+0xa8>
   bb656:	2a08      	cmp	r2, #8
   bb658:	d834      	bhi.n	bb6c4 <_strtod_l+0xac>
   bb65a:	2a00      	cmp	r2, #0
   bb65c:	d03e      	beq.n	bb6dc <_strtod_l+0xc4>
   bb65e:	2300      	movs	r3, #0
   bb660:	930a      	str	r3, [sp, #40]	; 0x28
   bb662:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb664:	7833      	ldrb	r3, [r6, #0]
   bb666:	2b30      	cmp	r3, #48	; 0x30
   bb668:	f040 80b0 	bne.w	bb7cc <_strtod_l+0x1b4>
   bb66c:	7873      	ldrb	r3, [r6, #1]
   bb66e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb672:	2b58      	cmp	r3, #88	; 0x58
   bb674:	d168      	bne.n	bb748 <_strtod_l+0x130>
   bb676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb678:	9301      	str	r3, [sp, #4]
   bb67a:	ab18      	add	r3, sp, #96	; 0x60
   bb67c:	9702      	str	r7, [sp, #8]
   bb67e:	9300      	str	r3, [sp, #0]
   bb680:	4a8d      	ldr	r2, [pc, #564]	; (bb8b8 <_strtod_l+0x2a0>)
   bb682:	ab19      	add	r3, sp, #100	; 0x64
   bb684:	a917      	add	r1, sp, #92	; 0x5c
   bb686:	4620      	mov	r0, r4
   bb688:	f000 ff8a 	bl	bc5a0 <__gethex>
   bb68c:	f010 0707 	ands.w	r7, r0, #7
   bb690:	4605      	mov	r5, r0
   bb692:	d005      	beq.n	bb6a0 <_strtod_l+0x88>
   bb694:	2f06      	cmp	r7, #6
   bb696:	d12c      	bne.n	bb6f2 <_strtod_l+0xda>
   bb698:	3601      	adds	r6, #1
   bb69a:	2300      	movs	r3, #0
   bb69c:	9617      	str	r6, [sp, #92]	; 0x5c
   bb69e:	930a      	str	r3, [sp, #40]	; 0x28
   bb6a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb6a2:	2b00      	cmp	r3, #0
   bb6a4:	f040 8590 	bne.w	bc1c8 <_strtod_l+0xbb0>
   bb6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb6aa:	b1eb      	cbz	r3, bb6e8 <_strtod_l+0xd0>
   bb6ac:	4652      	mov	r2, sl
   bb6ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb6b2:	ec43 2b10 	vmov	d0, r2, r3
   bb6b6:	b01d      	add	sp, #116	; 0x74
   bb6b8:	ecbd 8b02 	vpop	{d8}
   bb6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb6c0:	2a20      	cmp	r2, #32
   bb6c2:	d1cc      	bne.n	bb65e <_strtod_l+0x46>
   bb6c4:	3301      	adds	r3, #1
   bb6c6:	9317      	str	r3, [sp, #92]	; 0x5c
   bb6c8:	e7be      	b.n	bb648 <_strtod_l+0x30>
   bb6ca:	2a2d      	cmp	r2, #45	; 0x2d
   bb6cc:	d1c7      	bne.n	bb65e <_strtod_l+0x46>
   bb6ce:	2201      	movs	r2, #1
   bb6d0:	920a      	str	r2, [sp, #40]	; 0x28
   bb6d2:	1c5a      	adds	r2, r3, #1
   bb6d4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb6d6:	785b      	ldrb	r3, [r3, #1]
   bb6d8:	2b00      	cmp	r3, #0
   bb6da:	d1c2      	bne.n	bb662 <_strtod_l+0x4a>
   bb6dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb6de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb6e2:	2b00      	cmp	r3, #0
   bb6e4:	f040 856e 	bne.w	bc1c4 <_strtod_l+0xbac>
   bb6e8:	4652      	mov	r2, sl
   bb6ea:	465b      	mov	r3, fp
   bb6ec:	e7e1      	b.n	bb6b2 <_strtod_l+0x9a>
   bb6ee:	2200      	movs	r2, #0
   bb6f0:	e7ee      	b.n	bb6d0 <_strtod_l+0xb8>
   bb6f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb6f4:	b13a      	cbz	r2, bb706 <_strtod_l+0xee>
   bb6f6:	2135      	movs	r1, #53	; 0x35
   bb6f8:	a81a      	add	r0, sp, #104	; 0x68
   bb6fa:	f001 feec 	bl	bd4d6 <__copybits>
   bb6fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb700:	4620      	mov	r0, r4
   bb702:	f001 faab 	bl	bcc5c <_Bfree>
   bb706:	3f01      	subs	r7, #1
   bb708:	2f04      	cmp	r7, #4
   bb70a:	d806      	bhi.n	bb71a <_strtod_l+0x102>
   bb70c:	e8df f007 	tbb	[pc, r7]
   bb710:	1714030a 	.word	0x1714030a
   bb714:	0a          	.byte	0x0a
   bb715:	00          	.byte	0x00
   bb716:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb71a:	0728      	lsls	r0, r5, #28
   bb71c:	d5c0      	bpl.n	bb6a0 <_strtod_l+0x88>
   bb71e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb722:	e7bd      	b.n	bb6a0 <_strtod_l+0x88>
   bb724:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb728:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb72a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb72e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb732:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb736:	e7f0      	b.n	bb71a <_strtod_l+0x102>
   bb738:	f8df b180 	ldr.w	fp, [pc, #384]	; bb8bc <_strtod_l+0x2a4>
   bb73c:	e7ed      	b.n	bb71a <_strtod_l+0x102>
   bb73e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb742:	f04f 3aff 	mov.w	sl, #4294967295
   bb746:	e7e8      	b.n	bb71a <_strtod_l+0x102>
   bb748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb74a:	1c5a      	adds	r2, r3, #1
   bb74c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb74e:	785b      	ldrb	r3, [r3, #1]
   bb750:	2b30      	cmp	r3, #48	; 0x30
   bb752:	d0f9      	beq.n	bb748 <_strtod_l+0x130>
   bb754:	2b00      	cmp	r3, #0
   bb756:	d0a3      	beq.n	bb6a0 <_strtod_l+0x88>
   bb758:	2301      	movs	r3, #1
   bb75a:	f04f 0900 	mov.w	r9, #0
   bb75e:	9304      	str	r3, [sp, #16]
   bb760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb762:	9308      	str	r3, [sp, #32]
   bb764:	f8cd 901c 	str.w	r9, [sp, #28]
   bb768:	464f      	mov	r7, r9
   bb76a:	220a      	movs	r2, #10
   bb76c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb76e:	7806      	ldrb	r6, [r0, #0]
   bb770:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb774:	b2d9      	uxtb	r1, r3
   bb776:	2909      	cmp	r1, #9
   bb778:	d92a      	bls.n	bb7d0 <_strtod_l+0x1b8>
   bb77a:	9905      	ldr	r1, [sp, #20]
   bb77c:	462a      	mov	r2, r5
   bb77e:	f7ff ff0c 	bl	bb59a <strncmp>
   bb782:	b398      	cbz	r0, bb7ec <_strtod_l+0x1d4>
   bb784:	2000      	movs	r0, #0
   bb786:	4632      	mov	r2, r6
   bb788:	463d      	mov	r5, r7
   bb78a:	9005      	str	r0, [sp, #20]
   bb78c:	4603      	mov	r3, r0
   bb78e:	2a65      	cmp	r2, #101	; 0x65
   bb790:	d001      	beq.n	bb796 <_strtod_l+0x17e>
   bb792:	2a45      	cmp	r2, #69	; 0x45
   bb794:	d118      	bne.n	bb7c8 <_strtod_l+0x1b0>
   bb796:	b91d      	cbnz	r5, bb7a0 <_strtod_l+0x188>
   bb798:	9a04      	ldr	r2, [sp, #16]
   bb79a:	4302      	orrs	r2, r0
   bb79c:	d09e      	beq.n	bb6dc <_strtod_l+0xc4>
   bb79e:	2500      	movs	r5, #0
   bb7a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb7a4:	f108 0201 	add.w	r2, r8, #1
   bb7a8:	9217      	str	r2, [sp, #92]	; 0x5c
   bb7aa:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb7ae:	2a2b      	cmp	r2, #43	; 0x2b
   bb7b0:	d075      	beq.n	bb89e <_strtod_l+0x286>
   bb7b2:	2a2d      	cmp	r2, #45	; 0x2d
   bb7b4:	d07b      	beq.n	bb8ae <_strtod_l+0x296>
   bb7b6:	f04f 0c00 	mov.w	ip, #0
   bb7ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb7be:	2909      	cmp	r1, #9
   bb7c0:	f240 8082 	bls.w	bb8c8 <_strtod_l+0x2b0>
   bb7c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb7c8:	2600      	movs	r6, #0
   bb7ca:	e09d      	b.n	bb908 <_strtod_l+0x2f0>
   bb7cc:	2300      	movs	r3, #0
   bb7ce:	e7c4      	b.n	bb75a <_strtod_l+0x142>
   bb7d0:	2f08      	cmp	r7, #8
   bb7d2:	bfd8      	it	le
   bb7d4:	9907      	ldrle	r1, [sp, #28]
   bb7d6:	f100 0001 	add.w	r0, r0, #1
   bb7da:	bfda      	itte	le
   bb7dc:	fb02 3301 	mlale	r3, r2, r1, r3
   bb7e0:	9307      	strle	r3, [sp, #28]
   bb7e2:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb7e6:	3701      	adds	r7, #1
   bb7e8:	9017      	str	r0, [sp, #92]	; 0x5c
   bb7ea:	e7bf      	b.n	bb76c <_strtod_l+0x154>
   bb7ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb7ee:	195a      	adds	r2, r3, r5
   bb7f0:	9217      	str	r2, [sp, #92]	; 0x5c
   bb7f2:	5d5a      	ldrb	r2, [r3, r5]
   bb7f4:	2f00      	cmp	r7, #0
   bb7f6:	d037      	beq.n	bb868 <_strtod_l+0x250>
   bb7f8:	9005      	str	r0, [sp, #20]
   bb7fa:	463d      	mov	r5, r7
   bb7fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb800:	2b09      	cmp	r3, #9
   bb802:	d912      	bls.n	bb82a <_strtod_l+0x212>
   bb804:	2301      	movs	r3, #1
   bb806:	e7c2      	b.n	bb78e <_strtod_l+0x176>
   bb808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb80a:	1c5a      	adds	r2, r3, #1
   bb80c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb80e:	785a      	ldrb	r2, [r3, #1]
   bb810:	3001      	adds	r0, #1
   bb812:	2a30      	cmp	r2, #48	; 0x30
   bb814:	d0f8      	beq.n	bb808 <_strtod_l+0x1f0>
   bb816:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb81a:	2b08      	cmp	r3, #8
   bb81c:	f200 84d9 	bhi.w	bc1d2 <_strtod_l+0xbba>
   bb820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb822:	9005      	str	r0, [sp, #20]
   bb824:	2000      	movs	r0, #0
   bb826:	9308      	str	r3, [sp, #32]
   bb828:	4605      	mov	r5, r0
   bb82a:	3a30      	subs	r2, #48	; 0x30
   bb82c:	f100 0301 	add.w	r3, r0, #1
   bb830:	d014      	beq.n	bb85c <_strtod_l+0x244>
   bb832:	9905      	ldr	r1, [sp, #20]
   bb834:	4419      	add	r1, r3
   bb836:	9105      	str	r1, [sp, #20]
   bb838:	462b      	mov	r3, r5
   bb83a:	eb00 0e05 	add.w	lr, r0, r5
   bb83e:	210a      	movs	r1, #10
   bb840:	4573      	cmp	r3, lr
   bb842:	d113      	bne.n	bb86c <_strtod_l+0x254>
   bb844:	182b      	adds	r3, r5, r0
   bb846:	2b08      	cmp	r3, #8
   bb848:	f105 0501 	add.w	r5, r5, #1
   bb84c:	4405      	add	r5, r0
   bb84e:	dc1c      	bgt.n	bb88a <_strtod_l+0x272>
   bb850:	9907      	ldr	r1, [sp, #28]
   bb852:	230a      	movs	r3, #10
   bb854:	fb03 2301 	mla	r3, r3, r1, r2
   bb858:	9307      	str	r3, [sp, #28]
   bb85a:	2300      	movs	r3, #0
   bb85c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb85e:	1c51      	adds	r1, r2, #1
   bb860:	9117      	str	r1, [sp, #92]	; 0x5c
   bb862:	7852      	ldrb	r2, [r2, #1]
   bb864:	4618      	mov	r0, r3
   bb866:	e7c9      	b.n	bb7fc <_strtod_l+0x1e4>
   bb868:	4638      	mov	r0, r7
   bb86a:	e7d2      	b.n	bb812 <_strtod_l+0x1fa>
   bb86c:	2b08      	cmp	r3, #8
   bb86e:	dc04      	bgt.n	bb87a <_strtod_l+0x262>
   bb870:	9e07      	ldr	r6, [sp, #28]
   bb872:	434e      	muls	r6, r1
   bb874:	9607      	str	r6, [sp, #28]
   bb876:	3301      	adds	r3, #1
   bb878:	e7e2      	b.n	bb840 <_strtod_l+0x228>
   bb87a:	f103 0c01 	add.w	ip, r3, #1
   bb87e:	f1bc 0f10 	cmp.w	ip, #16
   bb882:	bfd8      	it	le
   bb884:	fb01 f909 	mulle.w	r9, r1, r9
   bb888:	e7f5      	b.n	bb876 <_strtod_l+0x25e>
   bb88a:	2d10      	cmp	r5, #16
   bb88c:	bfdc      	itt	le
   bb88e:	230a      	movle	r3, #10
   bb890:	fb03 2909 	mlale	r9, r3, r9, r2
   bb894:	e7e1      	b.n	bb85a <_strtod_l+0x242>
   bb896:	2300      	movs	r3, #0
   bb898:	9305      	str	r3, [sp, #20]
   bb89a:	2301      	movs	r3, #1
   bb89c:	e77c      	b.n	bb798 <_strtod_l+0x180>
   bb89e:	f04f 0c00 	mov.w	ip, #0
   bb8a2:	f108 0202 	add.w	r2, r8, #2
   bb8a6:	9217      	str	r2, [sp, #92]	; 0x5c
   bb8a8:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb8ac:	e785      	b.n	bb7ba <_strtod_l+0x1a2>
   bb8ae:	f04f 0c01 	mov.w	ip, #1
   bb8b2:	e7f6      	b.n	bb8a2 <_strtod_l+0x28a>
   bb8b4:	000be290 	.word	0x000be290
   bb8b8:	000be1a4 	.word	0x000be1a4
   bb8bc:	7ff00000 	.word	0x7ff00000
   bb8c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb8c2:	1c51      	adds	r1, r2, #1
   bb8c4:	9117      	str	r1, [sp, #92]	; 0x5c
   bb8c6:	7852      	ldrb	r2, [r2, #1]
   bb8c8:	2a30      	cmp	r2, #48	; 0x30
   bb8ca:	d0f9      	beq.n	bb8c0 <_strtod_l+0x2a8>
   bb8cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb8d0:	2908      	cmp	r1, #8
   bb8d2:	f63f af79 	bhi.w	bb7c8 <_strtod_l+0x1b0>
   bb8d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb8da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb8dc:	9206      	str	r2, [sp, #24]
   bb8de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb8e0:	1c51      	adds	r1, r2, #1
   bb8e2:	9117      	str	r1, [sp, #92]	; 0x5c
   bb8e4:	7852      	ldrb	r2, [r2, #1]
   bb8e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb8ea:	2e09      	cmp	r6, #9
   bb8ec:	d937      	bls.n	bb95e <_strtod_l+0x346>
   bb8ee:	9e06      	ldr	r6, [sp, #24]
   bb8f0:	1b89      	subs	r1, r1, r6
   bb8f2:	2908      	cmp	r1, #8
   bb8f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb8f8:	dc02      	bgt.n	bb900 <_strtod_l+0x2e8>
   bb8fa:	4576      	cmp	r6, lr
   bb8fc:	bfa8      	it	ge
   bb8fe:	4676      	movge	r6, lr
   bb900:	f1bc 0f00 	cmp.w	ip, #0
   bb904:	d000      	beq.n	bb908 <_strtod_l+0x2f0>
   bb906:	4276      	negs	r6, r6
   bb908:	2d00      	cmp	r5, #0
   bb90a:	d14d      	bne.n	bb9a8 <_strtod_l+0x390>
   bb90c:	9904      	ldr	r1, [sp, #16]
   bb90e:	4301      	orrs	r1, r0
   bb910:	f47f aec6 	bne.w	bb6a0 <_strtod_l+0x88>
   bb914:	2b00      	cmp	r3, #0
   bb916:	f47f aee1 	bne.w	bb6dc <_strtod_l+0xc4>
   bb91a:	2a69      	cmp	r2, #105	; 0x69
   bb91c:	d027      	beq.n	bb96e <_strtod_l+0x356>
   bb91e:	dc24      	bgt.n	bb96a <_strtod_l+0x352>
   bb920:	2a49      	cmp	r2, #73	; 0x49
   bb922:	d024      	beq.n	bb96e <_strtod_l+0x356>
   bb924:	2a4e      	cmp	r2, #78	; 0x4e
   bb926:	f47f aed9 	bne.w	bb6dc <_strtod_l+0xc4>
   bb92a:	499f      	ldr	r1, [pc, #636]	; (bbba8 <_strtod_l+0x590>)
   bb92c:	a817      	add	r0, sp, #92	; 0x5c
   bb92e:	f001 f88f 	bl	bca50 <__match>
   bb932:	2800      	cmp	r0, #0
   bb934:	f43f aed2 	beq.w	bb6dc <_strtod_l+0xc4>
   bb938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb93a:	781b      	ldrb	r3, [r3, #0]
   bb93c:	2b28      	cmp	r3, #40	; 0x28
   bb93e:	d12d      	bne.n	bb99c <_strtod_l+0x384>
   bb940:	499a      	ldr	r1, [pc, #616]	; (bbbac <_strtod_l+0x594>)
   bb942:	aa1a      	add	r2, sp, #104	; 0x68
   bb944:	a817      	add	r0, sp, #92	; 0x5c
   bb946:	f001 f897 	bl	bca78 <__hexnan>
   bb94a:	2805      	cmp	r0, #5
   bb94c:	d126      	bne.n	bb99c <_strtod_l+0x384>
   bb94e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb950:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb954:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb958:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb95c:	e6a0      	b.n	bb6a0 <_strtod_l+0x88>
   bb95e:	210a      	movs	r1, #10
   bb960:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb964:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb968:	e7b9      	b.n	bb8de <_strtod_l+0x2c6>
   bb96a:	2a6e      	cmp	r2, #110	; 0x6e
   bb96c:	e7db      	b.n	bb926 <_strtod_l+0x30e>
   bb96e:	4990      	ldr	r1, [pc, #576]	; (bbbb0 <_strtod_l+0x598>)
   bb970:	a817      	add	r0, sp, #92	; 0x5c
   bb972:	f001 f86d 	bl	bca50 <__match>
   bb976:	2800      	cmp	r0, #0
   bb978:	f43f aeb0 	beq.w	bb6dc <_strtod_l+0xc4>
   bb97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb97e:	498d      	ldr	r1, [pc, #564]	; (bbbb4 <_strtod_l+0x59c>)
   bb980:	3b01      	subs	r3, #1
   bb982:	a817      	add	r0, sp, #92	; 0x5c
   bb984:	9317      	str	r3, [sp, #92]	; 0x5c
   bb986:	f001 f863 	bl	bca50 <__match>
   bb98a:	b910      	cbnz	r0, bb992 <_strtod_l+0x37a>
   bb98c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb98e:	3301      	adds	r3, #1
   bb990:	9317      	str	r3, [sp, #92]	; 0x5c
   bb992:	f8df b230 	ldr.w	fp, [pc, #560]	; bbbc4 <_strtod_l+0x5ac>
   bb996:	f04f 0a00 	mov.w	sl, #0
   bb99a:	e681      	b.n	bb6a0 <_strtod_l+0x88>
   bb99c:	4886      	ldr	r0, [pc, #536]	; (bbbb8 <_strtod_l+0x5a0>)
   bb99e:	f001 fdef 	bl	bd580 <nan>
   bb9a2:	ec5b ab10 	vmov	sl, fp, d0
   bb9a6:	e67b      	b.n	bb6a0 <_strtod_l+0x88>
   bb9a8:	9b05      	ldr	r3, [sp, #20]
   bb9aa:	9807      	ldr	r0, [sp, #28]
   bb9ac:	1af3      	subs	r3, r6, r3
   bb9ae:	2f00      	cmp	r7, #0
   bb9b0:	bf08      	it	eq
   bb9b2:	462f      	moveq	r7, r5
   bb9b4:	2d10      	cmp	r5, #16
   bb9b6:	9306      	str	r3, [sp, #24]
   bb9b8:	46a8      	mov	r8, r5
   bb9ba:	bfa8      	it	ge
   bb9bc:	f04f 0810 	movge.w	r8, #16
   bb9c0:	f7f8 fc70 	bl	b42a4 <__aeabi_ui2d>
   bb9c4:	2d09      	cmp	r5, #9
   bb9c6:	4682      	mov	sl, r0
   bb9c8:	468b      	mov	fp, r1
   bb9ca:	dd13      	ble.n	bb9f4 <_strtod_l+0x3dc>
   bb9cc:	4b7b      	ldr	r3, [pc, #492]	; (bbbbc <_strtod_l+0x5a4>)
   bb9ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb9d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb9d6:	f7f8 fcdf 	bl	b4398 <__aeabi_dmul>
   bb9da:	4682      	mov	sl, r0
   bb9dc:	4648      	mov	r0, r9
   bb9de:	468b      	mov	fp, r1
   bb9e0:	f7f8 fc60 	bl	b42a4 <__aeabi_ui2d>
   bb9e4:	4602      	mov	r2, r0
   bb9e6:	460b      	mov	r3, r1
   bb9e8:	4650      	mov	r0, sl
   bb9ea:	4659      	mov	r1, fp
   bb9ec:	f7f8 fb1e 	bl	b402c <__adddf3>
   bb9f0:	4682      	mov	sl, r0
   bb9f2:	468b      	mov	fp, r1
   bb9f4:	2d0f      	cmp	r5, #15
   bb9f6:	dc38      	bgt.n	bba6a <_strtod_l+0x452>
   bb9f8:	9b06      	ldr	r3, [sp, #24]
   bb9fa:	2b00      	cmp	r3, #0
   bb9fc:	f43f ae50 	beq.w	bb6a0 <_strtod_l+0x88>
   bba00:	dd24      	ble.n	bba4c <_strtod_l+0x434>
   bba02:	2b16      	cmp	r3, #22
   bba04:	dc0b      	bgt.n	bba1e <_strtod_l+0x406>
   bba06:	496d      	ldr	r1, [pc, #436]	; (bbbbc <_strtod_l+0x5a4>)
   bba08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bba0c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bba10:	4652      	mov	r2, sl
   bba12:	465b      	mov	r3, fp
   bba14:	f7f8 fcc0 	bl	b4398 <__aeabi_dmul>
   bba18:	4682      	mov	sl, r0
   bba1a:	468b      	mov	fp, r1
   bba1c:	e640      	b.n	bb6a0 <_strtod_l+0x88>
   bba1e:	9a06      	ldr	r2, [sp, #24]
   bba20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bba24:	4293      	cmp	r3, r2
   bba26:	db20      	blt.n	bba6a <_strtod_l+0x452>
   bba28:	4c64      	ldr	r4, [pc, #400]	; (bbbbc <_strtod_l+0x5a4>)
   bba2a:	f1c5 050f 	rsb	r5, r5, #15
   bba2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bba32:	4652      	mov	r2, sl
   bba34:	465b      	mov	r3, fp
   bba36:	e9d1 0100 	ldrd	r0, r1, [r1]
   bba3a:	f7f8 fcad 	bl	b4398 <__aeabi_dmul>
   bba3e:	9b06      	ldr	r3, [sp, #24]
   bba40:	1b5d      	subs	r5, r3, r5
   bba42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bba46:	e9d4 2300 	ldrd	r2, r3, [r4]
   bba4a:	e7e3      	b.n	bba14 <_strtod_l+0x3fc>
   bba4c:	9b06      	ldr	r3, [sp, #24]
   bba4e:	3316      	adds	r3, #22
   bba50:	db0b      	blt.n	bba6a <_strtod_l+0x452>
   bba52:	9b05      	ldr	r3, [sp, #20]
   bba54:	1b9e      	subs	r6, r3, r6
   bba56:	4b59      	ldr	r3, [pc, #356]	; (bbbbc <_strtod_l+0x5a4>)
   bba58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bba5c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bba60:	4650      	mov	r0, sl
   bba62:	4659      	mov	r1, fp
   bba64:	f7f8 fdc2 	bl	b45ec <__aeabi_ddiv>
   bba68:	e7d6      	b.n	bba18 <_strtod_l+0x400>
   bba6a:	9b06      	ldr	r3, [sp, #24]
   bba6c:	eba5 0808 	sub.w	r8, r5, r8
   bba70:	4498      	add	r8, r3
   bba72:	f1b8 0f00 	cmp.w	r8, #0
   bba76:	dd74      	ble.n	bbb62 <_strtod_l+0x54a>
   bba78:	f018 030f 	ands.w	r3, r8, #15
   bba7c:	d00a      	beq.n	bba94 <_strtod_l+0x47c>
   bba7e:	494f      	ldr	r1, [pc, #316]	; (bbbbc <_strtod_l+0x5a4>)
   bba80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bba84:	4652      	mov	r2, sl
   bba86:	465b      	mov	r3, fp
   bba88:	e9d1 0100 	ldrd	r0, r1, [r1]
   bba8c:	f7f8 fc84 	bl	b4398 <__aeabi_dmul>
   bba90:	4682      	mov	sl, r0
   bba92:	468b      	mov	fp, r1
   bba94:	f038 080f 	bics.w	r8, r8, #15
   bba98:	d04f      	beq.n	bbb3a <_strtod_l+0x522>
   bba9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bba9e:	dd22      	ble.n	bbae6 <_strtod_l+0x4ce>
   bbaa0:	2500      	movs	r5, #0
   bbaa2:	462e      	mov	r6, r5
   bbaa4:	9507      	str	r5, [sp, #28]
   bbaa6:	9505      	str	r5, [sp, #20]
   bbaa8:	2322      	movs	r3, #34	; 0x22
   bbaaa:	f8df b118 	ldr.w	fp, [pc, #280]	; bbbc4 <_strtod_l+0x5ac>
   bbaae:	6023      	str	r3, [r4, #0]
   bbab0:	f04f 0a00 	mov.w	sl, #0
   bbab4:	9b07      	ldr	r3, [sp, #28]
   bbab6:	2b00      	cmp	r3, #0
   bbab8:	f43f adf2 	beq.w	bb6a0 <_strtod_l+0x88>
   bbabc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbabe:	4620      	mov	r0, r4
   bbac0:	f001 f8cc 	bl	bcc5c <_Bfree>
   bbac4:	9905      	ldr	r1, [sp, #20]
   bbac6:	4620      	mov	r0, r4
   bbac8:	f001 f8c8 	bl	bcc5c <_Bfree>
   bbacc:	4631      	mov	r1, r6
   bbace:	4620      	mov	r0, r4
   bbad0:	f001 f8c4 	bl	bcc5c <_Bfree>
   bbad4:	9907      	ldr	r1, [sp, #28]
   bbad6:	4620      	mov	r0, r4
   bbad8:	f001 f8c0 	bl	bcc5c <_Bfree>
   bbadc:	4629      	mov	r1, r5
   bbade:	4620      	mov	r0, r4
   bbae0:	f001 f8bc 	bl	bcc5c <_Bfree>
   bbae4:	e5dc      	b.n	bb6a0 <_strtod_l+0x88>
   bbae6:	4b36      	ldr	r3, [pc, #216]	; (bbbc0 <_strtod_l+0x5a8>)
   bbae8:	9304      	str	r3, [sp, #16]
   bbaea:	2300      	movs	r3, #0
   bbaec:	ea4f 1828 	mov.w	r8, r8, asr #4
   bbaf0:	4650      	mov	r0, sl
   bbaf2:	4659      	mov	r1, fp
   bbaf4:	4699      	mov	r9, r3
   bbaf6:	f1b8 0f01 	cmp.w	r8, #1
   bbafa:	dc21      	bgt.n	bbb40 <_strtod_l+0x528>
   bbafc:	b10b      	cbz	r3, bbb02 <_strtod_l+0x4ea>
   bbafe:	4682      	mov	sl, r0
   bbb00:	468b      	mov	fp, r1
   bbb02:	4b2f      	ldr	r3, [pc, #188]	; (bbbc0 <_strtod_l+0x5a8>)
   bbb04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bbb08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bbb0c:	4652      	mov	r2, sl
   bbb0e:	465b      	mov	r3, fp
   bbb10:	e9d9 0100 	ldrd	r0, r1, [r9]
   bbb14:	f7f8 fc40 	bl	b4398 <__aeabi_dmul>
   bbb18:	4b2a      	ldr	r3, [pc, #168]	; (bbbc4 <_strtod_l+0x5ac>)
   bbb1a:	460a      	mov	r2, r1
   bbb1c:	400b      	ands	r3, r1
   bbb1e:	492a      	ldr	r1, [pc, #168]	; (bbbc8 <_strtod_l+0x5b0>)
   bbb20:	428b      	cmp	r3, r1
   bbb22:	4682      	mov	sl, r0
   bbb24:	d8bc      	bhi.n	bbaa0 <_strtod_l+0x488>
   bbb26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bbb2a:	428b      	cmp	r3, r1
   bbb2c:	bf86      	itte	hi
   bbb2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bbbcc <_strtod_l+0x5b4>
   bbb32:	f04f 3aff 	movhi.w	sl, #4294967295
   bbb36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bbb3a:	2300      	movs	r3, #0
   bbb3c:	9304      	str	r3, [sp, #16]
   bbb3e:	e084      	b.n	bbc4a <_strtod_l+0x632>
   bbb40:	f018 0f01 	tst.w	r8, #1
   bbb44:	d005      	beq.n	bbb52 <_strtod_l+0x53a>
   bbb46:	9b04      	ldr	r3, [sp, #16]
   bbb48:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbb4c:	f7f8 fc24 	bl	b4398 <__aeabi_dmul>
   bbb50:	2301      	movs	r3, #1
   bbb52:	9a04      	ldr	r2, [sp, #16]
   bbb54:	3208      	adds	r2, #8
   bbb56:	f109 0901 	add.w	r9, r9, #1
   bbb5a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bbb5e:	9204      	str	r2, [sp, #16]
   bbb60:	e7c9      	b.n	bbaf6 <_strtod_l+0x4de>
   bbb62:	d0ea      	beq.n	bbb3a <_strtod_l+0x522>
   bbb64:	f1c8 0800 	rsb	r8, r8, #0
   bbb68:	f018 020f 	ands.w	r2, r8, #15
   bbb6c:	d00a      	beq.n	bbb84 <_strtod_l+0x56c>
   bbb6e:	4b13      	ldr	r3, [pc, #76]	; (bbbbc <_strtod_l+0x5a4>)
   bbb70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bbb74:	4650      	mov	r0, sl
   bbb76:	4659      	mov	r1, fp
   bbb78:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbb7c:	f7f8 fd36 	bl	b45ec <__aeabi_ddiv>
   bbb80:	4682      	mov	sl, r0
   bbb82:	468b      	mov	fp, r1
   bbb84:	ea5f 1828 	movs.w	r8, r8, asr #4
   bbb88:	d0d7      	beq.n	bbb3a <_strtod_l+0x522>
   bbb8a:	f1b8 0f1f 	cmp.w	r8, #31
   bbb8e:	dd1f      	ble.n	bbbd0 <_strtod_l+0x5b8>
   bbb90:	2500      	movs	r5, #0
   bbb92:	462e      	mov	r6, r5
   bbb94:	9507      	str	r5, [sp, #28]
   bbb96:	9505      	str	r5, [sp, #20]
   bbb98:	2322      	movs	r3, #34	; 0x22
   bbb9a:	f04f 0a00 	mov.w	sl, #0
   bbb9e:	f04f 0b00 	mov.w	fp, #0
   bbba2:	6023      	str	r3, [r4, #0]
   bbba4:	e786      	b.n	bbab4 <_strtod_l+0x49c>
   bbba6:	bf00      	nop
   bbba8:	000bd9b5 	.word	0x000bd9b5
   bbbac:	000be1b8 	.word	0x000be1b8
   bbbb0:	000be19b 	.word	0x000be19b
   bbbb4:	000be19e 	.word	0x000be19e
   bbbb8:	000bdfcc 	.word	0x000bdfcc
   bbbbc:	000be350 	.word	0x000be350
   bbbc0:	000be328 	.word	0x000be328
   bbbc4:	7ff00000 	.word	0x7ff00000
   bbbc8:	7ca00000 	.word	0x7ca00000
   bbbcc:	7fefffff 	.word	0x7fefffff
   bbbd0:	f018 0310 	ands.w	r3, r8, #16
   bbbd4:	bf18      	it	ne
   bbbd6:	236a      	movne	r3, #106	; 0x6a
   bbbd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbf88 <_strtod_l+0x970>
   bbbdc:	9304      	str	r3, [sp, #16]
   bbbde:	4650      	mov	r0, sl
   bbbe0:	4659      	mov	r1, fp
   bbbe2:	2300      	movs	r3, #0
   bbbe4:	f018 0f01 	tst.w	r8, #1
   bbbe8:	d004      	beq.n	bbbf4 <_strtod_l+0x5dc>
   bbbea:	e9d9 2300 	ldrd	r2, r3, [r9]
   bbbee:	f7f8 fbd3 	bl	b4398 <__aeabi_dmul>
   bbbf2:	2301      	movs	r3, #1
   bbbf4:	ea5f 0868 	movs.w	r8, r8, asr #1
   bbbf8:	f109 0908 	add.w	r9, r9, #8
   bbbfc:	d1f2      	bne.n	bbbe4 <_strtod_l+0x5cc>
   bbbfe:	b10b      	cbz	r3, bbc04 <_strtod_l+0x5ec>
   bbc00:	4682      	mov	sl, r0
   bbc02:	468b      	mov	fp, r1
   bbc04:	9b04      	ldr	r3, [sp, #16]
   bbc06:	b1c3      	cbz	r3, bbc3a <_strtod_l+0x622>
   bbc08:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bbc0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bbc10:	2b00      	cmp	r3, #0
   bbc12:	4659      	mov	r1, fp
   bbc14:	dd11      	ble.n	bbc3a <_strtod_l+0x622>
   bbc16:	2b1f      	cmp	r3, #31
   bbc18:	f340 8124 	ble.w	bbe64 <_strtod_l+0x84c>
   bbc1c:	2b34      	cmp	r3, #52	; 0x34
   bbc1e:	bfde      	ittt	le
   bbc20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bbc24:	f04f 33ff 	movle.w	r3, #4294967295
   bbc28:	fa03 f202 	lslle.w	r2, r3, r2
   bbc2c:	f04f 0a00 	mov.w	sl, #0
   bbc30:	bfcc      	ite	gt
   bbc32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bbc36:	ea02 0b01 	andle.w	fp, r2, r1
   bbc3a:	2200      	movs	r2, #0
   bbc3c:	2300      	movs	r3, #0
   bbc3e:	4650      	mov	r0, sl
   bbc40:	4659      	mov	r1, fp
   bbc42:	f7f8 fe11 	bl	b4868 <__aeabi_dcmpeq>
   bbc46:	2800      	cmp	r0, #0
   bbc48:	d1a2      	bne.n	bbb90 <_strtod_l+0x578>
   bbc4a:	9b07      	ldr	r3, [sp, #28]
   bbc4c:	9300      	str	r3, [sp, #0]
   bbc4e:	9908      	ldr	r1, [sp, #32]
   bbc50:	462b      	mov	r3, r5
   bbc52:	463a      	mov	r2, r7
   bbc54:	4620      	mov	r0, r4
   bbc56:	f001 f869 	bl	bcd2c <__s2b>
   bbc5a:	9007      	str	r0, [sp, #28]
   bbc5c:	2800      	cmp	r0, #0
   bbc5e:	f43f af1f 	beq.w	bbaa0 <_strtod_l+0x488>
   bbc62:	9b05      	ldr	r3, [sp, #20]
   bbc64:	1b9e      	subs	r6, r3, r6
   bbc66:	9b06      	ldr	r3, [sp, #24]
   bbc68:	2b00      	cmp	r3, #0
   bbc6a:	bfb4      	ite	lt
   bbc6c:	4633      	movlt	r3, r6
   bbc6e:	2300      	movge	r3, #0
   bbc70:	930c      	str	r3, [sp, #48]	; 0x30
   bbc72:	9b06      	ldr	r3, [sp, #24]
   bbc74:	2500      	movs	r5, #0
   bbc76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bbc7a:	9312      	str	r3, [sp, #72]	; 0x48
   bbc7c:	462e      	mov	r6, r5
   bbc7e:	9b07      	ldr	r3, [sp, #28]
   bbc80:	4620      	mov	r0, r4
   bbc82:	6859      	ldr	r1, [r3, #4]
   bbc84:	f000 ffaa 	bl	bcbdc <_Balloc>
   bbc88:	9005      	str	r0, [sp, #20]
   bbc8a:	2800      	cmp	r0, #0
   bbc8c:	f43f af0c 	beq.w	bbaa8 <_strtod_l+0x490>
   bbc90:	9b07      	ldr	r3, [sp, #28]
   bbc92:	691a      	ldr	r2, [r3, #16]
   bbc94:	3202      	adds	r2, #2
   bbc96:	f103 010c 	add.w	r1, r3, #12
   bbc9a:	0092      	lsls	r2, r2, #2
   bbc9c:	300c      	adds	r0, #12
   bbc9e:	f7ff fbf9 	bl	bb494 <memcpy>
   bbca2:	ec4b ab10 	vmov	d0, sl, fp
   bbca6:	aa1a      	add	r2, sp, #104	; 0x68
   bbca8:	a919      	add	r1, sp, #100	; 0x64
   bbcaa:	4620      	mov	r0, r4
   bbcac:	f001 fb84 	bl	bd3b8 <__d2b>
   bbcb0:	ec4b ab18 	vmov	d8, sl, fp
   bbcb4:	9018      	str	r0, [sp, #96]	; 0x60
   bbcb6:	2800      	cmp	r0, #0
   bbcb8:	f43f aef6 	beq.w	bbaa8 <_strtod_l+0x490>
   bbcbc:	2101      	movs	r1, #1
   bbcbe:	4620      	mov	r0, r4
   bbcc0:	f001 f8ce 	bl	bce60 <__i2b>
   bbcc4:	4606      	mov	r6, r0
   bbcc6:	2800      	cmp	r0, #0
   bbcc8:	f43f aeee 	beq.w	bbaa8 <_strtod_l+0x490>
   bbccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bbcce:	9904      	ldr	r1, [sp, #16]
   bbcd0:	2b00      	cmp	r3, #0
   bbcd2:	bfab      	itete	ge
   bbcd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bbcd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bbcd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bbcda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bbcde:	bfac      	ite	ge
   bbce0:	eb03 0902 	addge.w	r9, r3, r2
   bbce4:	1ad7      	sublt	r7, r2, r3
   bbce6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bbce8:	eba3 0801 	sub.w	r8, r3, r1
   bbcec:	4490      	add	r8, r2
   bbcee:	4ba1      	ldr	r3, [pc, #644]	; (bbf74 <_strtod_l+0x95c>)
   bbcf0:	f108 38ff 	add.w	r8, r8, #4294967295
   bbcf4:	4598      	cmp	r8, r3
   bbcf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bbcfa:	f280 80c7 	bge.w	bbe8c <_strtod_l+0x874>
   bbcfe:	eba3 0308 	sub.w	r3, r3, r8
   bbd02:	2b1f      	cmp	r3, #31
   bbd04:	eba2 0203 	sub.w	r2, r2, r3
   bbd08:	f04f 0101 	mov.w	r1, #1
   bbd0c:	f300 80b1 	bgt.w	bbe72 <_strtod_l+0x85a>
   bbd10:	fa01 f303 	lsl.w	r3, r1, r3
   bbd14:	930d      	str	r3, [sp, #52]	; 0x34
   bbd16:	2300      	movs	r3, #0
   bbd18:	9308      	str	r3, [sp, #32]
   bbd1a:	eb09 0802 	add.w	r8, r9, r2
   bbd1e:	9b04      	ldr	r3, [sp, #16]
   bbd20:	45c1      	cmp	r9, r8
   bbd22:	4417      	add	r7, r2
   bbd24:	441f      	add	r7, r3
   bbd26:	464b      	mov	r3, r9
   bbd28:	bfa8      	it	ge
   bbd2a:	4643      	movge	r3, r8
   bbd2c:	42bb      	cmp	r3, r7
   bbd2e:	bfa8      	it	ge
   bbd30:	463b      	movge	r3, r7
   bbd32:	2b00      	cmp	r3, #0
   bbd34:	bfc2      	ittt	gt
   bbd36:	eba8 0803 	subgt.w	r8, r8, r3
   bbd3a:	1aff      	subgt	r7, r7, r3
   bbd3c:	eba9 0903 	subgt.w	r9, r9, r3
   bbd40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bbd42:	2b00      	cmp	r3, #0
   bbd44:	dd17      	ble.n	bbd76 <_strtod_l+0x75e>
   bbd46:	4631      	mov	r1, r6
   bbd48:	461a      	mov	r2, r3
   bbd4a:	4620      	mov	r0, r4
   bbd4c:	f001 f948 	bl	bcfe0 <__pow5mult>
   bbd50:	4606      	mov	r6, r0
   bbd52:	2800      	cmp	r0, #0
   bbd54:	f43f aea8 	beq.w	bbaa8 <_strtod_l+0x490>
   bbd58:	4601      	mov	r1, r0
   bbd5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbd5c:	4620      	mov	r0, r4
   bbd5e:	f001 f895 	bl	bce8c <__multiply>
   bbd62:	900b      	str	r0, [sp, #44]	; 0x2c
   bbd64:	2800      	cmp	r0, #0
   bbd66:	f43f ae9f 	beq.w	bbaa8 <_strtod_l+0x490>
   bbd6a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbd6c:	4620      	mov	r0, r4
   bbd6e:	f000 ff75 	bl	bcc5c <_Bfree>
   bbd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbd74:	9318      	str	r3, [sp, #96]	; 0x60
   bbd76:	f1b8 0f00 	cmp.w	r8, #0
   bbd7a:	f300 808c 	bgt.w	bbe96 <_strtod_l+0x87e>
   bbd7e:	9b06      	ldr	r3, [sp, #24]
   bbd80:	2b00      	cmp	r3, #0
   bbd82:	dd08      	ble.n	bbd96 <_strtod_l+0x77e>
   bbd84:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbd86:	9905      	ldr	r1, [sp, #20]
   bbd88:	4620      	mov	r0, r4
   bbd8a:	f001 f929 	bl	bcfe0 <__pow5mult>
   bbd8e:	9005      	str	r0, [sp, #20]
   bbd90:	2800      	cmp	r0, #0
   bbd92:	f43f ae89 	beq.w	bbaa8 <_strtod_l+0x490>
   bbd96:	2f00      	cmp	r7, #0
   bbd98:	dd08      	ble.n	bbdac <_strtod_l+0x794>
   bbd9a:	9905      	ldr	r1, [sp, #20]
   bbd9c:	463a      	mov	r2, r7
   bbd9e:	4620      	mov	r0, r4
   bbda0:	f001 f978 	bl	bd094 <__lshift>
   bbda4:	9005      	str	r0, [sp, #20]
   bbda6:	2800      	cmp	r0, #0
   bbda8:	f43f ae7e 	beq.w	bbaa8 <_strtod_l+0x490>
   bbdac:	f1b9 0f00 	cmp.w	r9, #0
   bbdb0:	dd08      	ble.n	bbdc4 <_strtod_l+0x7ac>
   bbdb2:	4631      	mov	r1, r6
   bbdb4:	464a      	mov	r2, r9
   bbdb6:	4620      	mov	r0, r4
   bbdb8:	f001 f96c 	bl	bd094 <__lshift>
   bbdbc:	4606      	mov	r6, r0
   bbdbe:	2800      	cmp	r0, #0
   bbdc0:	f43f ae72 	beq.w	bbaa8 <_strtod_l+0x490>
   bbdc4:	9a05      	ldr	r2, [sp, #20]
   bbdc6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbdc8:	4620      	mov	r0, r4
   bbdca:	f001 f9ef 	bl	bd1ac <__mdiff>
   bbdce:	4605      	mov	r5, r0
   bbdd0:	2800      	cmp	r0, #0
   bbdd2:	f43f ae69 	beq.w	bbaa8 <_strtod_l+0x490>
   bbdd6:	68c3      	ldr	r3, [r0, #12]
   bbdd8:	930b      	str	r3, [sp, #44]	; 0x2c
   bbdda:	2300      	movs	r3, #0
   bbddc:	60c3      	str	r3, [r0, #12]
   bbdde:	4631      	mov	r1, r6
   bbde0:	f001 f9c8 	bl	bd174 <__mcmp>
   bbde4:	2800      	cmp	r0, #0
   bbde6:	da60      	bge.n	bbeaa <_strtod_l+0x892>
   bbde8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbdea:	ea53 030a 	orrs.w	r3, r3, sl
   bbdee:	f040 8082 	bne.w	bbef6 <_strtod_l+0x8de>
   bbdf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbdf6:	2b00      	cmp	r3, #0
   bbdf8:	d17d      	bne.n	bbef6 <_strtod_l+0x8de>
   bbdfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbdfe:	0d1b      	lsrs	r3, r3, #20
   bbe00:	051b      	lsls	r3, r3, #20
   bbe02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbe06:	d976      	bls.n	bbef6 <_strtod_l+0x8de>
   bbe08:	696b      	ldr	r3, [r5, #20]
   bbe0a:	b913      	cbnz	r3, bbe12 <_strtod_l+0x7fa>
   bbe0c:	692b      	ldr	r3, [r5, #16]
   bbe0e:	2b01      	cmp	r3, #1
   bbe10:	dd71      	ble.n	bbef6 <_strtod_l+0x8de>
   bbe12:	4629      	mov	r1, r5
   bbe14:	2201      	movs	r2, #1
   bbe16:	4620      	mov	r0, r4
   bbe18:	f001 f93c 	bl	bd094 <__lshift>
   bbe1c:	4631      	mov	r1, r6
   bbe1e:	4605      	mov	r5, r0
   bbe20:	f001 f9a8 	bl	bd174 <__mcmp>
   bbe24:	2800      	cmp	r0, #0
   bbe26:	dd66      	ble.n	bbef6 <_strtod_l+0x8de>
   bbe28:	9904      	ldr	r1, [sp, #16]
   bbe2a:	4a53      	ldr	r2, [pc, #332]	; (bbf78 <_strtod_l+0x960>)
   bbe2c:	465b      	mov	r3, fp
   bbe2e:	2900      	cmp	r1, #0
   bbe30:	f000 8081 	beq.w	bbf36 <_strtod_l+0x91e>
   bbe34:	ea02 010b 	and.w	r1, r2, fp
   bbe38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbe3c:	dc7b      	bgt.n	bbf36 <_strtod_l+0x91e>
   bbe3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbe42:	f77f aea9 	ble.w	bbb98 <_strtod_l+0x580>
   bbe46:	4b4d      	ldr	r3, [pc, #308]	; (bbf7c <_strtod_l+0x964>)
   bbe48:	4650      	mov	r0, sl
   bbe4a:	4659      	mov	r1, fp
   bbe4c:	2200      	movs	r2, #0
   bbe4e:	f7f8 faa3 	bl	b4398 <__aeabi_dmul>
   bbe52:	460b      	mov	r3, r1
   bbe54:	4303      	orrs	r3, r0
   bbe56:	bf08      	it	eq
   bbe58:	2322      	moveq	r3, #34	; 0x22
   bbe5a:	4682      	mov	sl, r0
   bbe5c:	468b      	mov	fp, r1
   bbe5e:	bf08      	it	eq
   bbe60:	6023      	streq	r3, [r4, #0]
   bbe62:	e62b      	b.n	bbabc <_strtod_l+0x4a4>
   bbe64:	f04f 32ff 	mov.w	r2, #4294967295
   bbe68:	fa02 f303 	lsl.w	r3, r2, r3
   bbe6c:	ea03 0a0a 	and.w	sl, r3, sl
   bbe70:	e6e3      	b.n	bbc3a <_strtod_l+0x622>
   bbe72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbe76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbe7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbe7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbe82:	fa01 f308 	lsl.w	r3, r1, r8
   bbe86:	9308      	str	r3, [sp, #32]
   bbe88:	910d      	str	r1, [sp, #52]	; 0x34
   bbe8a:	e746      	b.n	bbd1a <_strtod_l+0x702>
   bbe8c:	2300      	movs	r3, #0
   bbe8e:	9308      	str	r3, [sp, #32]
   bbe90:	2301      	movs	r3, #1
   bbe92:	930d      	str	r3, [sp, #52]	; 0x34
   bbe94:	e741      	b.n	bbd1a <_strtod_l+0x702>
   bbe96:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbe98:	4642      	mov	r2, r8
   bbe9a:	4620      	mov	r0, r4
   bbe9c:	f001 f8fa 	bl	bd094 <__lshift>
   bbea0:	9018      	str	r0, [sp, #96]	; 0x60
   bbea2:	2800      	cmp	r0, #0
   bbea4:	f47f af6b 	bne.w	bbd7e <_strtod_l+0x766>
   bbea8:	e5fe      	b.n	bbaa8 <_strtod_l+0x490>
   bbeaa:	465f      	mov	r7, fp
   bbeac:	d16e      	bne.n	bbf8c <_strtod_l+0x974>
   bbeae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbeb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbeb4:	b342      	cbz	r2, bbf08 <_strtod_l+0x8f0>
   bbeb6:	4a32      	ldr	r2, [pc, #200]	; (bbf80 <_strtod_l+0x968>)
   bbeb8:	4293      	cmp	r3, r2
   bbeba:	d128      	bne.n	bbf0e <_strtod_l+0x8f6>
   bbebc:	9b04      	ldr	r3, [sp, #16]
   bbebe:	4651      	mov	r1, sl
   bbec0:	b1eb      	cbz	r3, bbefe <_strtod_l+0x8e6>
   bbec2:	4b2d      	ldr	r3, [pc, #180]	; (bbf78 <_strtod_l+0x960>)
   bbec4:	403b      	ands	r3, r7
   bbec6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbeca:	f04f 32ff 	mov.w	r2, #4294967295
   bbece:	d819      	bhi.n	bbf04 <_strtod_l+0x8ec>
   bbed0:	0d1b      	lsrs	r3, r3, #20
   bbed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbed6:	fa02 f303 	lsl.w	r3, r2, r3
   bbeda:	4299      	cmp	r1, r3
   bbedc:	d117      	bne.n	bbf0e <_strtod_l+0x8f6>
   bbede:	4b29      	ldr	r3, [pc, #164]	; (bbf84 <_strtod_l+0x96c>)
   bbee0:	429f      	cmp	r7, r3
   bbee2:	d102      	bne.n	bbeea <_strtod_l+0x8d2>
   bbee4:	3101      	adds	r1, #1
   bbee6:	f43f addf 	beq.w	bbaa8 <_strtod_l+0x490>
   bbeea:	4b23      	ldr	r3, [pc, #140]	; (bbf78 <_strtod_l+0x960>)
   bbeec:	403b      	ands	r3, r7
   bbeee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bbef2:	f04f 0a00 	mov.w	sl, #0
   bbef6:	9b04      	ldr	r3, [sp, #16]
   bbef8:	2b00      	cmp	r3, #0
   bbefa:	d1a4      	bne.n	bbe46 <_strtod_l+0x82e>
   bbefc:	e5de      	b.n	bbabc <_strtod_l+0x4a4>
   bbefe:	f04f 33ff 	mov.w	r3, #4294967295
   bbf02:	e7ea      	b.n	bbeda <_strtod_l+0x8c2>
   bbf04:	4613      	mov	r3, r2
   bbf06:	e7e8      	b.n	bbeda <_strtod_l+0x8c2>
   bbf08:	ea53 030a 	orrs.w	r3, r3, sl
   bbf0c:	d08c      	beq.n	bbe28 <_strtod_l+0x810>
   bbf0e:	9b08      	ldr	r3, [sp, #32]
   bbf10:	b1db      	cbz	r3, bbf4a <_strtod_l+0x932>
   bbf12:	423b      	tst	r3, r7
   bbf14:	d0ef      	beq.n	bbef6 <_strtod_l+0x8de>
   bbf16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbf18:	9a04      	ldr	r2, [sp, #16]
   bbf1a:	4650      	mov	r0, sl
   bbf1c:	4659      	mov	r1, fp
   bbf1e:	b1c3      	cbz	r3, bbf52 <_strtod_l+0x93a>
   bbf20:	f7ff fb5b 	bl	bb5da <sulp>
   bbf24:	4602      	mov	r2, r0
   bbf26:	460b      	mov	r3, r1
   bbf28:	ec51 0b18 	vmov	r0, r1, d8
   bbf2c:	f7f8 f87e 	bl	b402c <__adddf3>
   bbf30:	4682      	mov	sl, r0
   bbf32:	468b      	mov	fp, r1
   bbf34:	e7df      	b.n	bbef6 <_strtod_l+0x8de>
   bbf36:	4013      	ands	r3, r2
   bbf38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bbf3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bbf40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bbf44:	f04f 3aff 	mov.w	sl, #4294967295
   bbf48:	e7d5      	b.n	bbef6 <_strtod_l+0x8de>
   bbf4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbf4c:	ea13 0f0a 	tst.w	r3, sl
   bbf50:	e7e0      	b.n	bbf14 <_strtod_l+0x8fc>
   bbf52:	f7ff fb42 	bl	bb5da <sulp>
   bbf56:	4602      	mov	r2, r0
   bbf58:	460b      	mov	r3, r1
   bbf5a:	ec51 0b18 	vmov	r0, r1, d8
   bbf5e:	f7f8 f863 	bl	b4028 <__aeabi_dsub>
   bbf62:	2200      	movs	r2, #0
   bbf64:	2300      	movs	r3, #0
   bbf66:	4682      	mov	sl, r0
   bbf68:	468b      	mov	fp, r1
   bbf6a:	f7f8 fc7d 	bl	b4868 <__aeabi_dcmpeq>
   bbf6e:	2800      	cmp	r0, #0
   bbf70:	d0c1      	beq.n	bbef6 <_strtod_l+0x8de>
   bbf72:	e611      	b.n	bbb98 <_strtod_l+0x580>
   bbf74:	fffffc02 	.word	0xfffffc02
   bbf78:	7ff00000 	.word	0x7ff00000
   bbf7c:	39500000 	.word	0x39500000
   bbf80:	000fffff 	.word	0x000fffff
   bbf84:	7fefffff 	.word	0x7fefffff
   bbf88:	000be1d0 	.word	0x000be1d0
   bbf8c:	4631      	mov	r1, r6
   bbf8e:	4628      	mov	r0, r5
   bbf90:	f001 fa6e 	bl	bd470 <__ratio>
   bbf94:	ec59 8b10 	vmov	r8, r9, d0
   bbf98:	ee10 0a10 	vmov	r0, s0
   bbf9c:	2200      	movs	r2, #0
   bbf9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bbfa2:	4649      	mov	r1, r9
   bbfa4:	f7f8 fc74 	bl	b4890 <__aeabi_dcmple>
   bbfa8:	2800      	cmp	r0, #0
   bbfaa:	d07a      	beq.n	bc0a2 <_strtod_l+0xa8a>
   bbfac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbfae:	2b00      	cmp	r3, #0
   bbfb0:	d04a      	beq.n	bc048 <_strtod_l+0xa30>
   bbfb2:	4b95      	ldr	r3, [pc, #596]	; (bc208 <_strtod_l+0xbf0>)
   bbfb4:	2200      	movs	r2, #0
   bbfb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbfba:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc208 <_strtod_l+0xbf0>
   bbfbe:	f04f 0800 	mov.w	r8, #0
   bbfc2:	4b92      	ldr	r3, [pc, #584]	; (bc20c <_strtod_l+0xbf4>)
   bbfc4:	403b      	ands	r3, r7
   bbfc6:	930d      	str	r3, [sp, #52]	; 0x34
   bbfc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbfca:	4b91      	ldr	r3, [pc, #580]	; (bc210 <_strtod_l+0xbf8>)
   bbfcc:	429a      	cmp	r2, r3
   bbfce:	f040 80b0 	bne.w	bc132 <_strtod_l+0xb1a>
   bbfd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbfd6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bbfda:	ec4b ab10 	vmov	d0, sl, fp
   bbfde:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbfe2:	f001 f96d 	bl	bd2c0 <__ulp>
   bbfe6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbfea:	ec53 2b10 	vmov	r2, r3, d0
   bbfee:	f7f8 f9d3 	bl	b4398 <__aeabi_dmul>
   bbff2:	4652      	mov	r2, sl
   bbff4:	465b      	mov	r3, fp
   bbff6:	f7f8 f819 	bl	b402c <__adddf3>
   bbffa:	460b      	mov	r3, r1
   bbffc:	4983      	ldr	r1, [pc, #524]	; (bc20c <_strtod_l+0xbf4>)
   bbffe:	4a85      	ldr	r2, [pc, #532]	; (bc214 <_strtod_l+0xbfc>)
   bc000:	4019      	ands	r1, r3
   bc002:	4291      	cmp	r1, r2
   bc004:	4682      	mov	sl, r0
   bc006:	d960      	bls.n	bc0ca <_strtod_l+0xab2>
   bc008:	ee18 3a90 	vmov	r3, s17
   bc00c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc010:	4293      	cmp	r3, r2
   bc012:	d104      	bne.n	bc01e <_strtod_l+0xa06>
   bc014:	ee18 3a10 	vmov	r3, s16
   bc018:	3301      	adds	r3, #1
   bc01a:	f43f ad45 	beq.w	bbaa8 <_strtod_l+0x490>
   bc01e:	f8df b200 	ldr.w	fp, [pc, #512]	; bc220 <_strtod_l+0xc08>
   bc022:	f04f 3aff 	mov.w	sl, #4294967295
   bc026:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc028:	4620      	mov	r0, r4
   bc02a:	f000 fe17 	bl	bcc5c <_Bfree>
   bc02e:	9905      	ldr	r1, [sp, #20]
   bc030:	4620      	mov	r0, r4
   bc032:	f000 fe13 	bl	bcc5c <_Bfree>
   bc036:	4631      	mov	r1, r6
   bc038:	4620      	mov	r0, r4
   bc03a:	f000 fe0f 	bl	bcc5c <_Bfree>
   bc03e:	4629      	mov	r1, r5
   bc040:	4620      	mov	r0, r4
   bc042:	f000 fe0b 	bl	bcc5c <_Bfree>
   bc046:	e61a      	b.n	bbc7e <_strtod_l+0x666>
   bc048:	f1ba 0f00 	cmp.w	sl, #0
   bc04c:	d11b      	bne.n	bc086 <_strtod_l+0xa6e>
   bc04e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc052:	b9f3      	cbnz	r3, bc092 <_strtod_l+0xa7a>
   bc054:	4b6c      	ldr	r3, [pc, #432]	; (bc208 <_strtod_l+0xbf0>)
   bc056:	2200      	movs	r2, #0
   bc058:	4640      	mov	r0, r8
   bc05a:	4649      	mov	r1, r9
   bc05c:	f7f8 fc0e 	bl	b487c <__aeabi_dcmplt>
   bc060:	b9d0      	cbnz	r0, bc098 <_strtod_l+0xa80>
   bc062:	4640      	mov	r0, r8
   bc064:	4649      	mov	r1, r9
   bc066:	4b6c      	ldr	r3, [pc, #432]	; (bc218 <_strtod_l+0xc00>)
   bc068:	2200      	movs	r2, #0
   bc06a:	f7f8 f995 	bl	b4398 <__aeabi_dmul>
   bc06e:	4680      	mov	r8, r0
   bc070:	4689      	mov	r9, r1
   bc072:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc076:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc07a:	9315      	str	r3, [sp, #84]	; 0x54
   bc07c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc080:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc084:	e79d      	b.n	bbfc2 <_strtod_l+0x9aa>
   bc086:	f1ba 0f01 	cmp.w	sl, #1
   bc08a:	d102      	bne.n	bc092 <_strtod_l+0xa7a>
   bc08c:	2f00      	cmp	r7, #0
   bc08e:	f43f ad83 	beq.w	bbb98 <_strtod_l+0x580>
   bc092:	4b62      	ldr	r3, [pc, #392]	; (bc21c <_strtod_l+0xc04>)
   bc094:	2200      	movs	r2, #0
   bc096:	e78e      	b.n	bbfb6 <_strtod_l+0x99e>
   bc098:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc218 <_strtod_l+0xc00>
   bc09c:	f04f 0800 	mov.w	r8, #0
   bc0a0:	e7e7      	b.n	bc072 <_strtod_l+0xa5a>
   bc0a2:	4b5d      	ldr	r3, [pc, #372]	; (bc218 <_strtod_l+0xc00>)
   bc0a4:	4640      	mov	r0, r8
   bc0a6:	4649      	mov	r1, r9
   bc0a8:	2200      	movs	r2, #0
   bc0aa:	f7f8 f975 	bl	b4398 <__aeabi_dmul>
   bc0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc0b0:	4680      	mov	r8, r0
   bc0b2:	4689      	mov	r9, r1
   bc0b4:	b933      	cbnz	r3, bc0c4 <_strtod_l+0xaac>
   bc0b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc0ba:	900e      	str	r0, [sp, #56]	; 0x38
   bc0bc:	930f      	str	r3, [sp, #60]	; 0x3c
   bc0be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc0c2:	e7dd      	b.n	bc080 <_strtod_l+0xa68>
   bc0c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc0c8:	e7f9      	b.n	bc0be <_strtod_l+0xaa6>
   bc0ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc0ce:	9b04      	ldr	r3, [sp, #16]
   bc0d0:	2b00      	cmp	r3, #0
   bc0d2:	d1a8      	bne.n	bc026 <_strtod_l+0xa0e>
   bc0d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc0da:	0d1b      	lsrs	r3, r3, #20
   bc0dc:	051b      	lsls	r3, r3, #20
   bc0de:	429a      	cmp	r2, r3
   bc0e0:	d1a1      	bne.n	bc026 <_strtod_l+0xa0e>
   bc0e2:	4640      	mov	r0, r8
   bc0e4:	4649      	mov	r1, r9
   bc0e6:	f7f8 fd55 	bl	b4b94 <__aeabi_d2lz>
   bc0ea:	f7f8 f927 	bl	b433c <__aeabi_l2d>
   bc0ee:	4602      	mov	r2, r0
   bc0f0:	460b      	mov	r3, r1
   bc0f2:	4640      	mov	r0, r8
   bc0f4:	4649      	mov	r1, r9
   bc0f6:	f7f7 ff97 	bl	b4028 <__aeabi_dsub>
   bc0fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc0fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc100:	ea43 030a 	orr.w	r3, r3, sl
   bc104:	4313      	orrs	r3, r2
   bc106:	4680      	mov	r8, r0
   bc108:	4689      	mov	r9, r1
   bc10a:	d055      	beq.n	bc1b8 <_strtod_l+0xba0>
   bc10c:	a336      	add	r3, pc, #216	; (adr r3, bc1e8 <_strtod_l+0xbd0>)
   bc10e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc112:	f7f8 fbb3 	bl	b487c <__aeabi_dcmplt>
   bc116:	2800      	cmp	r0, #0
   bc118:	f47f acd0 	bne.w	bbabc <_strtod_l+0x4a4>
   bc11c:	a334      	add	r3, pc, #208	; (adr r3, bc1f0 <_strtod_l+0xbd8>)
   bc11e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc122:	4640      	mov	r0, r8
   bc124:	4649      	mov	r1, r9
   bc126:	f7f8 fbc7 	bl	b48b8 <__aeabi_dcmpgt>
   bc12a:	2800      	cmp	r0, #0
   bc12c:	f43f af7b 	beq.w	bc026 <_strtod_l+0xa0e>
   bc130:	e4c4      	b.n	bbabc <_strtod_l+0x4a4>
   bc132:	9b04      	ldr	r3, [sp, #16]
   bc134:	b333      	cbz	r3, bc184 <_strtod_l+0xb6c>
   bc136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc138:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc13c:	d822      	bhi.n	bc184 <_strtod_l+0xb6c>
   bc13e:	a32e      	add	r3, pc, #184	; (adr r3, bc1f8 <_strtod_l+0xbe0>)
   bc140:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc144:	4640      	mov	r0, r8
   bc146:	4649      	mov	r1, r9
   bc148:	f7f8 fba2 	bl	b4890 <__aeabi_dcmple>
   bc14c:	b1a0      	cbz	r0, bc178 <_strtod_l+0xb60>
   bc14e:	4649      	mov	r1, r9
   bc150:	4640      	mov	r0, r8
   bc152:	f7f8 fbf9 	bl	b4948 <__aeabi_d2uiz>
   bc156:	2801      	cmp	r0, #1
   bc158:	bf38      	it	cc
   bc15a:	2001      	movcc	r0, #1
   bc15c:	f7f8 f8a2 	bl	b42a4 <__aeabi_ui2d>
   bc160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc162:	4680      	mov	r8, r0
   bc164:	4689      	mov	r9, r1
   bc166:	bb23      	cbnz	r3, bc1b2 <_strtod_l+0xb9a>
   bc168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc16c:	9010      	str	r0, [sp, #64]	; 0x40
   bc16e:	9311      	str	r3, [sp, #68]	; 0x44
   bc170:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc174:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc178:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc17a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc17c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc180:	1a9b      	subs	r3, r3, r2
   bc182:	9309      	str	r3, [sp, #36]	; 0x24
   bc184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc188:	eeb0 0a48 	vmov.f32	s0, s16
   bc18c:	eef0 0a68 	vmov.f32	s1, s17
   bc190:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc194:	f001 f894 	bl	bd2c0 <__ulp>
   bc198:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc19c:	ec53 2b10 	vmov	r2, r3, d0
   bc1a0:	f7f8 f8fa 	bl	b4398 <__aeabi_dmul>
   bc1a4:	ec53 2b18 	vmov	r2, r3, d8
   bc1a8:	f7f7 ff40 	bl	b402c <__adddf3>
   bc1ac:	4682      	mov	sl, r0
   bc1ae:	468b      	mov	fp, r1
   bc1b0:	e78d      	b.n	bc0ce <_strtod_l+0xab6>
   bc1b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc1b6:	e7db      	b.n	bc170 <_strtod_l+0xb58>
   bc1b8:	a311      	add	r3, pc, #68	; (adr r3, bc200 <_strtod_l+0xbe8>)
   bc1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc1be:	f7f8 fb5d 	bl	b487c <__aeabi_dcmplt>
   bc1c2:	e7b2      	b.n	bc12a <_strtod_l+0xb12>
   bc1c4:	2300      	movs	r3, #0
   bc1c6:	930a      	str	r3, [sp, #40]	; 0x28
   bc1c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc1ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc1cc:	6013      	str	r3, [r2, #0]
   bc1ce:	f7ff ba6b 	b.w	bb6a8 <_strtod_l+0x90>
   bc1d2:	2a65      	cmp	r2, #101	; 0x65
   bc1d4:	f43f ab5f 	beq.w	bb896 <_strtod_l+0x27e>
   bc1d8:	2a45      	cmp	r2, #69	; 0x45
   bc1da:	f43f ab5c 	beq.w	bb896 <_strtod_l+0x27e>
   bc1de:	2301      	movs	r3, #1
   bc1e0:	f7ff bb94 	b.w	bb90c <_strtod_l+0x2f4>
   bc1e4:	f3af 8000 	nop.w
   bc1e8:	94a03595 	.word	0x94a03595
   bc1ec:	3fdfffff 	.word	0x3fdfffff
   bc1f0:	35afe535 	.word	0x35afe535
   bc1f4:	3fe00000 	.word	0x3fe00000
   bc1f8:	ffc00000 	.word	0xffc00000
   bc1fc:	41dfffff 	.word	0x41dfffff
   bc200:	94a03595 	.word	0x94a03595
   bc204:	3fcfffff 	.word	0x3fcfffff
   bc208:	3ff00000 	.word	0x3ff00000
   bc20c:	7ff00000 	.word	0x7ff00000
   bc210:	7fe00000 	.word	0x7fe00000
   bc214:	7c9fffff 	.word	0x7c9fffff
   bc218:	3fe00000 	.word	0x3fe00000
   bc21c:	bff00000 	.word	0xbff00000
   bc220:	7fefffff 	.word	0x7fefffff

000bc224 <strtod>:
   bc224:	460a      	mov	r2, r1
   bc226:	4601      	mov	r1, r0
   bc228:	4802      	ldr	r0, [pc, #8]	; (bc234 <strtod+0x10>)
   bc22a:	4b03      	ldr	r3, [pc, #12]	; (bc238 <strtod+0x14>)
   bc22c:	6800      	ldr	r0, [r0, #0]
   bc22e:	f7ff b9f3 	b.w	bb618 <_strtod_l>
   bc232:	bf00      	nop
   bc234:	2003e220 	.word	0x2003e220
   bc238:	2003e28c 	.word	0x2003e28c

000bc23c <strtof>:
   bc23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc240:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bc2f0 <strtof+0xb4>
   bc244:	4b26      	ldr	r3, [pc, #152]	; (bc2e0 <strtof+0xa4>)
   bc246:	460a      	mov	r2, r1
   bc248:	ed2d 8b02 	vpush	{d8}
   bc24c:	4601      	mov	r1, r0
   bc24e:	f8d8 0000 	ldr.w	r0, [r8]
   bc252:	f7ff f9e1 	bl	bb618 <_strtod_l>
   bc256:	ec55 4b10 	vmov	r4, r5, d0
   bc25a:	ee10 2a10 	vmov	r2, s0
   bc25e:	ee10 0a10 	vmov	r0, s0
   bc262:	462b      	mov	r3, r5
   bc264:	4629      	mov	r1, r5
   bc266:	f7f8 fb31 	bl	b48cc <__aeabi_dcmpun>
   bc26a:	b190      	cbz	r0, bc292 <strtof+0x56>
   bc26c:	2d00      	cmp	r5, #0
   bc26e:	481d      	ldr	r0, [pc, #116]	; (bc2e4 <strtof+0xa8>)
   bc270:	da09      	bge.n	bc286 <strtof+0x4a>
   bc272:	f001 f98d 	bl	bd590 <nanf>
   bc276:	eeb1 8a40 	vneg.f32	s16, s0
   bc27a:	eeb0 0a48 	vmov.f32	s0, s16
   bc27e:	ecbd 8b02 	vpop	{d8}
   bc282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc286:	ecbd 8b02 	vpop	{d8}
   bc28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bc28e:	f001 b97f 	b.w	bd590 <nanf>
   bc292:	4620      	mov	r0, r4
   bc294:	4629      	mov	r1, r5
   bc296:	f7f8 fb77 	bl	b4988 <__aeabi_d2f>
   bc29a:	ee08 0a10 	vmov	s16, r0
   bc29e:	eddf 7a12 	vldr	s15, [pc, #72]	; bc2e8 <strtof+0xac>
   bc2a2:	eeb0 7ac8 	vabs.f32	s14, s16
   bc2a6:	eeb4 7a67 	vcmp.f32	s14, s15
   bc2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc2ae:	dde4      	ble.n	bc27a <strtof+0x3e>
   bc2b0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bc2b4:	4b0d      	ldr	r3, [pc, #52]	; (bc2ec <strtof+0xb0>)
   bc2b6:	f04f 32ff 	mov.w	r2, #4294967295
   bc2ba:	4620      	mov	r0, r4
   bc2bc:	4639      	mov	r1, r7
   bc2be:	f7f8 fb05 	bl	b48cc <__aeabi_dcmpun>
   bc2c2:	b940      	cbnz	r0, bc2d6 <strtof+0x9a>
   bc2c4:	4b09      	ldr	r3, [pc, #36]	; (bc2ec <strtof+0xb0>)
   bc2c6:	f04f 32ff 	mov.w	r2, #4294967295
   bc2ca:	4620      	mov	r0, r4
   bc2cc:	4639      	mov	r1, r7
   bc2ce:	f7f8 fadf 	bl	b4890 <__aeabi_dcmple>
   bc2d2:	2800      	cmp	r0, #0
   bc2d4:	d0d1      	beq.n	bc27a <strtof+0x3e>
   bc2d6:	f8d8 3000 	ldr.w	r3, [r8]
   bc2da:	2222      	movs	r2, #34	; 0x22
   bc2dc:	601a      	str	r2, [r3, #0]
   bc2de:	e7cc      	b.n	bc27a <strtof+0x3e>
   bc2e0:	2003e28c 	.word	0x2003e28c
   bc2e4:	000bdfcc 	.word	0x000bdfcc
   bc2e8:	7f7fffff 	.word	0x7f7fffff
   bc2ec:	7fefffff 	.word	0x7fefffff
   bc2f0:	2003e220 	.word	0x2003e220

000bc2f4 <_strtol_l.constprop.0>:
   bc2f4:	2b01      	cmp	r3, #1
   bc2f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc2fa:	d001      	beq.n	bc300 <_strtol_l.constprop.0+0xc>
   bc2fc:	2b24      	cmp	r3, #36	; 0x24
   bc2fe:	d906      	bls.n	bc30e <_strtol_l.constprop.0+0x1a>
   bc300:	f7fb fccc 	bl	b7c9c <__errno>
   bc304:	2316      	movs	r3, #22
   bc306:	6003      	str	r3, [r0, #0]
   bc308:	2000      	movs	r0, #0
   bc30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc30e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc3f4 <_strtol_l.constprop.0+0x100>
   bc312:	460d      	mov	r5, r1
   bc314:	462e      	mov	r6, r5
   bc316:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc31a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc31e:	f017 0708 	ands.w	r7, r7, #8
   bc322:	d1f7      	bne.n	bc314 <_strtol_l.constprop.0+0x20>
   bc324:	2c2d      	cmp	r4, #45	; 0x2d
   bc326:	d132      	bne.n	bc38e <_strtol_l.constprop.0+0x9a>
   bc328:	782c      	ldrb	r4, [r5, #0]
   bc32a:	2701      	movs	r7, #1
   bc32c:	1cb5      	adds	r5, r6, #2
   bc32e:	2b00      	cmp	r3, #0
   bc330:	d05b      	beq.n	bc3ea <_strtol_l.constprop.0+0xf6>
   bc332:	2b10      	cmp	r3, #16
   bc334:	d109      	bne.n	bc34a <_strtol_l.constprop.0+0x56>
   bc336:	2c30      	cmp	r4, #48	; 0x30
   bc338:	d107      	bne.n	bc34a <_strtol_l.constprop.0+0x56>
   bc33a:	782c      	ldrb	r4, [r5, #0]
   bc33c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc340:	2c58      	cmp	r4, #88	; 0x58
   bc342:	d14d      	bne.n	bc3e0 <_strtol_l.constprop.0+0xec>
   bc344:	786c      	ldrb	r4, [r5, #1]
   bc346:	2310      	movs	r3, #16
   bc348:	3502      	adds	r5, #2
   bc34a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc34e:	f108 38ff 	add.w	r8, r8, #4294967295
   bc352:	f04f 0c00 	mov.w	ip, #0
   bc356:	fbb8 f9f3 	udiv	r9, r8, r3
   bc35a:	4666      	mov	r6, ip
   bc35c:	fb03 8a19 	mls	sl, r3, r9, r8
   bc360:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc364:	f1be 0f09 	cmp.w	lr, #9
   bc368:	d816      	bhi.n	bc398 <_strtol_l.constprop.0+0xa4>
   bc36a:	4674      	mov	r4, lr
   bc36c:	42a3      	cmp	r3, r4
   bc36e:	dd24      	ble.n	bc3ba <_strtol_l.constprop.0+0xc6>
   bc370:	f1bc 0f00 	cmp.w	ip, #0
   bc374:	db1e      	blt.n	bc3b4 <_strtol_l.constprop.0+0xc0>
   bc376:	45b1      	cmp	r9, r6
   bc378:	d31c      	bcc.n	bc3b4 <_strtol_l.constprop.0+0xc0>
   bc37a:	d101      	bne.n	bc380 <_strtol_l.constprop.0+0x8c>
   bc37c:	45a2      	cmp	sl, r4
   bc37e:	db19      	blt.n	bc3b4 <_strtol_l.constprop.0+0xc0>
   bc380:	fb06 4603 	mla	r6, r6, r3, r4
   bc384:	f04f 0c01 	mov.w	ip, #1
   bc388:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc38c:	e7e8      	b.n	bc360 <_strtol_l.constprop.0+0x6c>
   bc38e:	2c2b      	cmp	r4, #43	; 0x2b
   bc390:	bf04      	itt	eq
   bc392:	782c      	ldrbeq	r4, [r5, #0]
   bc394:	1cb5      	addeq	r5, r6, #2
   bc396:	e7ca      	b.n	bc32e <_strtol_l.constprop.0+0x3a>
   bc398:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc39c:	f1be 0f19 	cmp.w	lr, #25
   bc3a0:	d801      	bhi.n	bc3a6 <_strtol_l.constprop.0+0xb2>
   bc3a2:	3c37      	subs	r4, #55	; 0x37
   bc3a4:	e7e2      	b.n	bc36c <_strtol_l.constprop.0+0x78>
   bc3a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc3aa:	f1be 0f19 	cmp.w	lr, #25
   bc3ae:	d804      	bhi.n	bc3ba <_strtol_l.constprop.0+0xc6>
   bc3b0:	3c57      	subs	r4, #87	; 0x57
   bc3b2:	e7db      	b.n	bc36c <_strtol_l.constprop.0+0x78>
   bc3b4:	f04f 3cff 	mov.w	ip, #4294967295
   bc3b8:	e7e6      	b.n	bc388 <_strtol_l.constprop.0+0x94>
   bc3ba:	f1bc 0f00 	cmp.w	ip, #0
   bc3be:	da05      	bge.n	bc3cc <_strtol_l.constprop.0+0xd8>
   bc3c0:	2322      	movs	r3, #34	; 0x22
   bc3c2:	6003      	str	r3, [r0, #0]
   bc3c4:	4646      	mov	r6, r8
   bc3c6:	b942      	cbnz	r2, bc3da <_strtol_l.constprop.0+0xe6>
   bc3c8:	4630      	mov	r0, r6
   bc3ca:	e79e      	b.n	bc30a <_strtol_l.constprop.0+0x16>
   bc3cc:	b107      	cbz	r7, bc3d0 <_strtol_l.constprop.0+0xdc>
   bc3ce:	4276      	negs	r6, r6
   bc3d0:	2a00      	cmp	r2, #0
   bc3d2:	d0f9      	beq.n	bc3c8 <_strtol_l.constprop.0+0xd4>
   bc3d4:	f1bc 0f00 	cmp.w	ip, #0
   bc3d8:	d000      	beq.n	bc3dc <_strtol_l.constprop.0+0xe8>
   bc3da:	1e69      	subs	r1, r5, #1
   bc3dc:	6011      	str	r1, [r2, #0]
   bc3de:	e7f3      	b.n	bc3c8 <_strtol_l.constprop.0+0xd4>
   bc3e0:	2430      	movs	r4, #48	; 0x30
   bc3e2:	2b00      	cmp	r3, #0
   bc3e4:	d1b1      	bne.n	bc34a <_strtol_l.constprop.0+0x56>
   bc3e6:	2308      	movs	r3, #8
   bc3e8:	e7af      	b.n	bc34a <_strtol_l.constprop.0+0x56>
   bc3ea:	2c30      	cmp	r4, #48	; 0x30
   bc3ec:	d0a5      	beq.n	bc33a <_strtol_l.constprop.0+0x46>
   bc3ee:	230a      	movs	r3, #10
   bc3f0:	e7ab      	b.n	bc34a <_strtol_l.constprop.0+0x56>
   bc3f2:	bf00      	nop
   bc3f4:	000be007 	.word	0x000be007

000bc3f8 <strtol>:
   bc3f8:	4613      	mov	r3, r2
   bc3fa:	460a      	mov	r2, r1
   bc3fc:	4601      	mov	r1, r0
   bc3fe:	4802      	ldr	r0, [pc, #8]	; (bc408 <strtol+0x10>)
   bc400:	6800      	ldr	r0, [r0, #0]
   bc402:	f7ff bf77 	b.w	bc2f4 <_strtol_l.constprop.0>
   bc406:	bf00      	nop
   bc408:	2003e220 	.word	0x2003e220

000bc40c <__register_exitproc>:
   bc40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc410:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc4cc <__register_exitproc+0xc0>
   bc414:	4606      	mov	r6, r0
   bc416:	f8d8 0000 	ldr.w	r0, [r8]
   bc41a:	461f      	mov	r7, r3
   bc41c:	460d      	mov	r5, r1
   bc41e:	4691      	mov	r9, r2
   bc420:	f000 fbc6 	bl	bcbb0 <__retarget_lock_acquire_recursive>
   bc424:	4b25      	ldr	r3, [pc, #148]	; (bc4bc <__register_exitproc+0xb0>)
   bc426:	681c      	ldr	r4, [r3, #0]
   bc428:	b934      	cbnz	r4, bc438 <__register_exitproc+0x2c>
   bc42a:	4c25      	ldr	r4, [pc, #148]	; (bc4c0 <__register_exitproc+0xb4>)
   bc42c:	601c      	str	r4, [r3, #0]
   bc42e:	4b25      	ldr	r3, [pc, #148]	; (bc4c4 <__register_exitproc+0xb8>)
   bc430:	b113      	cbz	r3, bc438 <__register_exitproc+0x2c>
   bc432:	681b      	ldr	r3, [r3, #0]
   bc434:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc438:	6863      	ldr	r3, [r4, #4]
   bc43a:	2b1f      	cmp	r3, #31
   bc43c:	dd07      	ble.n	bc44e <__register_exitproc+0x42>
   bc43e:	f8d8 0000 	ldr.w	r0, [r8]
   bc442:	f000 fbb7 	bl	bcbb4 <__retarget_lock_release_recursive>
   bc446:	f04f 30ff 	mov.w	r0, #4294967295
   bc44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc44e:	b34e      	cbz	r6, bc4a4 <__register_exitproc+0x98>
   bc450:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc454:	b988      	cbnz	r0, bc47a <__register_exitproc+0x6e>
   bc456:	4b1c      	ldr	r3, [pc, #112]	; (bc4c8 <__register_exitproc+0xbc>)
   bc458:	b923      	cbnz	r3, bc464 <__register_exitproc+0x58>
   bc45a:	f8d8 0000 	ldr.w	r0, [r8]
   bc45e:	f000 fba8 	bl	bcbb2 <__retarget_lock_release>
   bc462:	e7f0      	b.n	bc446 <__register_exitproc+0x3a>
   bc464:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc468:	f7fb fbd0 	bl	b7c0c <malloc>
   bc46c:	2800      	cmp	r0, #0
   bc46e:	d0f4      	beq.n	bc45a <__register_exitproc+0x4e>
   bc470:	2300      	movs	r3, #0
   bc472:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc476:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc47a:	6863      	ldr	r3, [r4, #4]
   bc47c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc480:	2201      	movs	r2, #1
   bc482:	409a      	lsls	r2, r3
   bc484:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc488:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc48c:	4313      	orrs	r3, r2
   bc48e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc492:	2e02      	cmp	r6, #2
   bc494:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc498:	bf02      	ittt	eq
   bc49a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc49e:	4313      	orreq	r3, r2
   bc4a0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc4a4:	6863      	ldr	r3, [r4, #4]
   bc4a6:	f8d8 0000 	ldr.w	r0, [r8]
   bc4aa:	1c5a      	adds	r2, r3, #1
   bc4ac:	3302      	adds	r3, #2
   bc4ae:	6062      	str	r2, [r4, #4]
   bc4b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc4b4:	f000 fb7e 	bl	bcbb4 <__retarget_lock_release_recursive>
   bc4b8:	2000      	movs	r0, #0
   bc4ba:	e7c6      	b.n	bc44a <__register_exitproc+0x3e>
   bc4bc:	2003e7ec 	.word	0x2003e7ec
   bc4c0:	2003e760 	.word	0x2003e760
   bc4c4:	00000000 	.word	0x00000000
   bc4c8:	000b7c0d 	.word	0x000b7c0d
   bc4cc:	2003e284 	.word	0x2003e284

000bc4d0 <rshift>:
   bc4d0:	6903      	ldr	r3, [r0, #16]
   bc4d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc4d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc4da:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc4de:	f100 0414 	add.w	r4, r0, #20
   bc4e2:	dd45      	ble.n	bc570 <rshift+0xa0>
   bc4e4:	f011 011f 	ands.w	r1, r1, #31
   bc4e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc4ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc4f0:	d10c      	bne.n	bc50c <rshift+0x3c>
   bc4f2:	f100 0710 	add.w	r7, r0, #16
   bc4f6:	4629      	mov	r1, r5
   bc4f8:	42b1      	cmp	r1, r6
   bc4fa:	d334      	bcc.n	bc566 <rshift+0x96>
   bc4fc:	1a9b      	subs	r3, r3, r2
   bc4fe:	009b      	lsls	r3, r3, #2
   bc500:	1eea      	subs	r2, r5, #3
   bc502:	4296      	cmp	r6, r2
   bc504:	bf38      	it	cc
   bc506:	2300      	movcc	r3, #0
   bc508:	4423      	add	r3, r4
   bc50a:	e015      	b.n	bc538 <rshift+0x68>
   bc50c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc510:	f1c1 0820 	rsb	r8, r1, #32
   bc514:	40cf      	lsrs	r7, r1
   bc516:	f105 0e04 	add.w	lr, r5, #4
   bc51a:	46a1      	mov	r9, r4
   bc51c:	4576      	cmp	r6, lr
   bc51e:	46f4      	mov	ip, lr
   bc520:	d815      	bhi.n	bc54e <rshift+0x7e>
   bc522:	1a9a      	subs	r2, r3, r2
   bc524:	0092      	lsls	r2, r2, #2
   bc526:	3a04      	subs	r2, #4
   bc528:	3501      	adds	r5, #1
   bc52a:	42ae      	cmp	r6, r5
   bc52c:	bf38      	it	cc
   bc52e:	2200      	movcc	r2, #0
   bc530:	18a3      	adds	r3, r4, r2
   bc532:	50a7      	str	r7, [r4, r2]
   bc534:	b107      	cbz	r7, bc538 <rshift+0x68>
   bc536:	3304      	adds	r3, #4
   bc538:	1b1a      	subs	r2, r3, r4
   bc53a:	42a3      	cmp	r3, r4
   bc53c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc540:	bf08      	it	eq
   bc542:	2300      	moveq	r3, #0
   bc544:	6102      	str	r2, [r0, #16]
   bc546:	bf08      	it	eq
   bc548:	6143      	streq	r3, [r0, #20]
   bc54a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc54e:	f8dc c000 	ldr.w	ip, [ip]
   bc552:	fa0c fc08 	lsl.w	ip, ip, r8
   bc556:	ea4c 0707 	orr.w	r7, ip, r7
   bc55a:	f849 7b04 	str.w	r7, [r9], #4
   bc55e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc562:	40cf      	lsrs	r7, r1
   bc564:	e7da      	b.n	bc51c <rshift+0x4c>
   bc566:	f851 cb04 	ldr.w	ip, [r1], #4
   bc56a:	f847 cf04 	str.w	ip, [r7, #4]!
   bc56e:	e7c3      	b.n	bc4f8 <rshift+0x28>
   bc570:	4623      	mov	r3, r4
   bc572:	e7e1      	b.n	bc538 <rshift+0x68>

000bc574 <__hexdig_fun>:
   bc574:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc578:	2b09      	cmp	r3, #9
   bc57a:	d802      	bhi.n	bc582 <__hexdig_fun+0xe>
   bc57c:	3820      	subs	r0, #32
   bc57e:	b2c0      	uxtb	r0, r0
   bc580:	4770      	bx	lr
   bc582:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc586:	2b05      	cmp	r3, #5
   bc588:	d801      	bhi.n	bc58e <__hexdig_fun+0x1a>
   bc58a:	3847      	subs	r0, #71	; 0x47
   bc58c:	e7f7      	b.n	bc57e <__hexdig_fun+0xa>
   bc58e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc592:	2b05      	cmp	r3, #5
   bc594:	d801      	bhi.n	bc59a <__hexdig_fun+0x26>
   bc596:	3827      	subs	r0, #39	; 0x27
   bc598:	e7f1      	b.n	bc57e <__hexdig_fun+0xa>
   bc59a:	2000      	movs	r0, #0
   bc59c:	4770      	bx	lr
	...

000bc5a0 <__gethex>:
   bc5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc5a4:	ed2d 8b02 	vpush	{d8}
   bc5a8:	b089      	sub	sp, #36	; 0x24
   bc5aa:	ee08 0a10 	vmov	s16, r0
   bc5ae:	9304      	str	r3, [sp, #16]
   bc5b0:	4bb4      	ldr	r3, [pc, #720]	; (bc884 <__gethex+0x2e4>)
   bc5b2:	681b      	ldr	r3, [r3, #0]
   bc5b4:	9301      	str	r3, [sp, #4]
   bc5b6:	4618      	mov	r0, r3
   bc5b8:	468b      	mov	fp, r1
   bc5ba:	4690      	mov	r8, r2
   bc5bc:	f7f8 fae2 	bl	b4b84 <strlen>
   bc5c0:	9b01      	ldr	r3, [sp, #4]
   bc5c2:	f8db 2000 	ldr.w	r2, [fp]
   bc5c6:	4403      	add	r3, r0
   bc5c8:	4682      	mov	sl, r0
   bc5ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc5ce:	9305      	str	r3, [sp, #20]
   bc5d0:	1c93      	adds	r3, r2, #2
   bc5d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc5d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc5da:	32fe      	adds	r2, #254	; 0xfe
   bc5dc:	18d1      	adds	r1, r2, r3
   bc5de:	461f      	mov	r7, r3
   bc5e0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc5e4:	9100      	str	r1, [sp, #0]
   bc5e6:	2830      	cmp	r0, #48	; 0x30
   bc5e8:	d0f8      	beq.n	bc5dc <__gethex+0x3c>
   bc5ea:	f7ff ffc3 	bl	bc574 <__hexdig_fun>
   bc5ee:	4604      	mov	r4, r0
   bc5f0:	2800      	cmp	r0, #0
   bc5f2:	d13a      	bne.n	bc66a <__gethex+0xca>
   bc5f4:	9901      	ldr	r1, [sp, #4]
   bc5f6:	4652      	mov	r2, sl
   bc5f8:	4638      	mov	r0, r7
   bc5fa:	f7fe ffce 	bl	bb59a <strncmp>
   bc5fe:	4605      	mov	r5, r0
   bc600:	2800      	cmp	r0, #0
   bc602:	d168      	bne.n	bc6d6 <__gethex+0x136>
   bc604:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc608:	eb07 060a 	add.w	r6, r7, sl
   bc60c:	f7ff ffb2 	bl	bc574 <__hexdig_fun>
   bc610:	2800      	cmp	r0, #0
   bc612:	d062      	beq.n	bc6da <__gethex+0x13a>
   bc614:	4633      	mov	r3, r6
   bc616:	7818      	ldrb	r0, [r3, #0]
   bc618:	2830      	cmp	r0, #48	; 0x30
   bc61a:	461f      	mov	r7, r3
   bc61c:	f103 0301 	add.w	r3, r3, #1
   bc620:	d0f9      	beq.n	bc616 <__gethex+0x76>
   bc622:	f7ff ffa7 	bl	bc574 <__hexdig_fun>
   bc626:	2301      	movs	r3, #1
   bc628:	fab0 f480 	clz	r4, r0
   bc62c:	0964      	lsrs	r4, r4, #5
   bc62e:	4635      	mov	r5, r6
   bc630:	9300      	str	r3, [sp, #0]
   bc632:	463a      	mov	r2, r7
   bc634:	4616      	mov	r6, r2
   bc636:	3201      	adds	r2, #1
   bc638:	7830      	ldrb	r0, [r6, #0]
   bc63a:	f7ff ff9b 	bl	bc574 <__hexdig_fun>
   bc63e:	2800      	cmp	r0, #0
   bc640:	d1f8      	bne.n	bc634 <__gethex+0x94>
   bc642:	9901      	ldr	r1, [sp, #4]
   bc644:	4652      	mov	r2, sl
   bc646:	4630      	mov	r0, r6
   bc648:	f7fe ffa7 	bl	bb59a <strncmp>
   bc64c:	b980      	cbnz	r0, bc670 <__gethex+0xd0>
   bc64e:	b94d      	cbnz	r5, bc664 <__gethex+0xc4>
   bc650:	eb06 050a 	add.w	r5, r6, sl
   bc654:	462a      	mov	r2, r5
   bc656:	4616      	mov	r6, r2
   bc658:	3201      	adds	r2, #1
   bc65a:	7830      	ldrb	r0, [r6, #0]
   bc65c:	f7ff ff8a 	bl	bc574 <__hexdig_fun>
   bc660:	2800      	cmp	r0, #0
   bc662:	d1f8      	bne.n	bc656 <__gethex+0xb6>
   bc664:	1bad      	subs	r5, r5, r6
   bc666:	00ad      	lsls	r5, r5, #2
   bc668:	e004      	b.n	bc674 <__gethex+0xd4>
   bc66a:	2400      	movs	r4, #0
   bc66c:	4625      	mov	r5, r4
   bc66e:	e7e0      	b.n	bc632 <__gethex+0x92>
   bc670:	2d00      	cmp	r5, #0
   bc672:	d1f7      	bne.n	bc664 <__gethex+0xc4>
   bc674:	7833      	ldrb	r3, [r6, #0]
   bc676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc67a:	2b50      	cmp	r3, #80	; 0x50
   bc67c:	d13b      	bne.n	bc6f6 <__gethex+0x156>
   bc67e:	7873      	ldrb	r3, [r6, #1]
   bc680:	2b2b      	cmp	r3, #43	; 0x2b
   bc682:	d02c      	beq.n	bc6de <__gethex+0x13e>
   bc684:	2b2d      	cmp	r3, #45	; 0x2d
   bc686:	d02e      	beq.n	bc6e6 <__gethex+0x146>
   bc688:	1c71      	adds	r1, r6, #1
   bc68a:	f04f 0900 	mov.w	r9, #0
   bc68e:	7808      	ldrb	r0, [r1, #0]
   bc690:	f7ff ff70 	bl	bc574 <__hexdig_fun>
   bc694:	1e43      	subs	r3, r0, #1
   bc696:	b2db      	uxtb	r3, r3
   bc698:	2b18      	cmp	r3, #24
   bc69a:	d82c      	bhi.n	bc6f6 <__gethex+0x156>
   bc69c:	f1a0 0210 	sub.w	r2, r0, #16
   bc6a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc6a4:	f7ff ff66 	bl	bc574 <__hexdig_fun>
   bc6a8:	1e43      	subs	r3, r0, #1
   bc6aa:	b2db      	uxtb	r3, r3
   bc6ac:	2b18      	cmp	r3, #24
   bc6ae:	d91d      	bls.n	bc6ec <__gethex+0x14c>
   bc6b0:	f1b9 0f00 	cmp.w	r9, #0
   bc6b4:	d000      	beq.n	bc6b8 <__gethex+0x118>
   bc6b6:	4252      	negs	r2, r2
   bc6b8:	4415      	add	r5, r2
   bc6ba:	f8cb 1000 	str.w	r1, [fp]
   bc6be:	b1e4      	cbz	r4, bc6fa <__gethex+0x15a>
   bc6c0:	9b00      	ldr	r3, [sp, #0]
   bc6c2:	2b00      	cmp	r3, #0
   bc6c4:	bf14      	ite	ne
   bc6c6:	2700      	movne	r7, #0
   bc6c8:	2706      	moveq	r7, #6
   bc6ca:	4638      	mov	r0, r7
   bc6cc:	b009      	add	sp, #36	; 0x24
   bc6ce:	ecbd 8b02 	vpop	{d8}
   bc6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc6d6:	463e      	mov	r6, r7
   bc6d8:	4625      	mov	r5, r4
   bc6da:	2401      	movs	r4, #1
   bc6dc:	e7ca      	b.n	bc674 <__gethex+0xd4>
   bc6de:	f04f 0900 	mov.w	r9, #0
   bc6e2:	1cb1      	adds	r1, r6, #2
   bc6e4:	e7d3      	b.n	bc68e <__gethex+0xee>
   bc6e6:	f04f 0901 	mov.w	r9, #1
   bc6ea:	e7fa      	b.n	bc6e2 <__gethex+0x142>
   bc6ec:	230a      	movs	r3, #10
   bc6ee:	fb03 0202 	mla	r2, r3, r2, r0
   bc6f2:	3a10      	subs	r2, #16
   bc6f4:	e7d4      	b.n	bc6a0 <__gethex+0x100>
   bc6f6:	4631      	mov	r1, r6
   bc6f8:	e7df      	b.n	bc6ba <__gethex+0x11a>
   bc6fa:	1bf3      	subs	r3, r6, r7
   bc6fc:	3b01      	subs	r3, #1
   bc6fe:	4621      	mov	r1, r4
   bc700:	2b07      	cmp	r3, #7
   bc702:	dc0b      	bgt.n	bc71c <__gethex+0x17c>
   bc704:	ee18 0a10 	vmov	r0, s16
   bc708:	f000 fa68 	bl	bcbdc <_Balloc>
   bc70c:	4604      	mov	r4, r0
   bc70e:	b940      	cbnz	r0, bc722 <__gethex+0x182>
   bc710:	4b5d      	ldr	r3, [pc, #372]	; (bc888 <__gethex+0x2e8>)
   bc712:	4602      	mov	r2, r0
   bc714:	21de      	movs	r1, #222	; 0xde
   bc716:	485d      	ldr	r0, [pc, #372]	; (bc88c <__gethex+0x2ec>)
   bc718:	f7fb fac8 	bl	b7cac <__assert_func>
   bc71c:	3101      	adds	r1, #1
   bc71e:	105b      	asrs	r3, r3, #1
   bc720:	e7ee      	b.n	bc700 <__gethex+0x160>
   bc722:	f100 0914 	add.w	r9, r0, #20
   bc726:	f04f 0b00 	mov.w	fp, #0
   bc72a:	f1ca 0301 	rsb	r3, sl, #1
   bc72e:	f8cd 9008 	str.w	r9, [sp, #8]
   bc732:	f8cd b000 	str.w	fp, [sp]
   bc736:	9306      	str	r3, [sp, #24]
   bc738:	42b7      	cmp	r7, r6
   bc73a:	d340      	bcc.n	bc7be <__gethex+0x21e>
   bc73c:	9802      	ldr	r0, [sp, #8]
   bc73e:	9b00      	ldr	r3, [sp, #0]
   bc740:	f840 3b04 	str.w	r3, [r0], #4
   bc744:	eba0 0009 	sub.w	r0, r0, r9
   bc748:	1080      	asrs	r0, r0, #2
   bc74a:	0146      	lsls	r6, r0, #5
   bc74c:	6120      	str	r0, [r4, #16]
   bc74e:	4618      	mov	r0, r3
   bc750:	f000 fb36 	bl	bcdc0 <__hi0bits>
   bc754:	1a30      	subs	r0, r6, r0
   bc756:	f8d8 6000 	ldr.w	r6, [r8]
   bc75a:	42b0      	cmp	r0, r6
   bc75c:	dd63      	ble.n	bc826 <__gethex+0x286>
   bc75e:	1b87      	subs	r7, r0, r6
   bc760:	4639      	mov	r1, r7
   bc762:	4620      	mov	r0, r4
   bc764:	f000 feda 	bl	bd51c <__any_on>
   bc768:	4682      	mov	sl, r0
   bc76a:	b1a8      	cbz	r0, bc798 <__gethex+0x1f8>
   bc76c:	1e7b      	subs	r3, r7, #1
   bc76e:	1159      	asrs	r1, r3, #5
   bc770:	f003 021f 	and.w	r2, r3, #31
   bc774:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc778:	f04f 0a01 	mov.w	sl, #1
   bc77c:	fa0a f202 	lsl.w	r2, sl, r2
   bc780:	420a      	tst	r2, r1
   bc782:	d009      	beq.n	bc798 <__gethex+0x1f8>
   bc784:	4553      	cmp	r3, sl
   bc786:	dd05      	ble.n	bc794 <__gethex+0x1f4>
   bc788:	1eb9      	subs	r1, r7, #2
   bc78a:	4620      	mov	r0, r4
   bc78c:	f000 fec6 	bl	bd51c <__any_on>
   bc790:	2800      	cmp	r0, #0
   bc792:	d145      	bne.n	bc820 <__gethex+0x280>
   bc794:	f04f 0a02 	mov.w	sl, #2
   bc798:	4639      	mov	r1, r7
   bc79a:	4620      	mov	r0, r4
   bc79c:	f7ff fe98 	bl	bc4d0 <rshift>
   bc7a0:	443d      	add	r5, r7
   bc7a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc7a6:	42ab      	cmp	r3, r5
   bc7a8:	da4c      	bge.n	bc844 <__gethex+0x2a4>
   bc7aa:	ee18 0a10 	vmov	r0, s16
   bc7ae:	4621      	mov	r1, r4
   bc7b0:	f000 fa54 	bl	bcc5c <_Bfree>
   bc7b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc7b6:	2300      	movs	r3, #0
   bc7b8:	6013      	str	r3, [r2, #0]
   bc7ba:	27a3      	movs	r7, #163	; 0xa3
   bc7bc:	e785      	b.n	bc6ca <__gethex+0x12a>
   bc7be:	1e73      	subs	r3, r6, #1
   bc7c0:	9a05      	ldr	r2, [sp, #20]
   bc7c2:	9303      	str	r3, [sp, #12]
   bc7c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc7c8:	4293      	cmp	r3, r2
   bc7ca:	d019      	beq.n	bc800 <__gethex+0x260>
   bc7cc:	f1bb 0f20 	cmp.w	fp, #32
   bc7d0:	d107      	bne.n	bc7e2 <__gethex+0x242>
   bc7d2:	9b02      	ldr	r3, [sp, #8]
   bc7d4:	9a00      	ldr	r2, [sp, #0]
   bc7d6:	f843 2b04 	str.w	r2, [r3], #4
   bc7da:	9302      	str	r3, [sp, #8]
   bc7dc:	2300      	movs	r3, #0
   bc7de:	9300      	str	r3, [sp, #0]
   bc7e0:	469b      	mov	fp, r3
   bc7e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc7e6:	f7ff fec5 	bl	bc574 <__hexdig_fun>
   bc7ea:	9b00      	ldr	r3, [sp, #0]
   bc7ec:	f000 000f 	and.w	r0, r0, #15
   bc7f0:	fa00 f00b 	lsl.w	r0, r0, fp
   bc7f4:	4303      	orrs	r3, r0
   bc7f6:	9300      	str	r3, [sp, #0]
   bc7f8:	f10b 0b04 	add.w	fp, fp, #4
   bc7fc:	9b03      	ldr	r3, [sp, #12]
   bc7fe:	e00d      	b.n	bc81c <__gethex+0x27c>
   bc800:	9b03      	ldr	r3, [sp, #12]
   bc802:	9a06      	ldr	r2, [sp, #24]
   bc804:	4413      	add	r3, r2
   bc806:	42bb      	cmp	r3, r7
   bc808:	d3e0      	bcc.n	bc7cc <__gethex+0x22c>
   bc80a:	4618      	mov	r0, r3
   bc80c:	9901      	ldr	r1, [sp, #4]
   bc80e:	9307      	str	r3, [sp, #28]
   bc810:	4652      	mov	r2, sl
   bc812:	f7fe fec2 	bl	bb59a <strncmp>
   bc816:	9b07      	ldr	r3, [sp, #28]
   bc818:	2800      	cmp	r0, #0
   bc81a:	d1d7      	bne.n	bc7cc <__gethex+0x22c>
   bc81c:	461e      	mov	r6, r3
   bc81e:	e78b      	b.n	bc738 <__gethex+0x198>
   bc820:	f04f 0a03 	mov.w	sl, #3
   bc824:	e7b8      	b.n	bc798 <__gethex+0x1f8>
   bc826:	da0a      	bge.n	bc83e <__gethex+0x29e>
   bc828:	1a37      	subs	r7, r6, r0
   bc82a:	4621      	mov	r1, r4
   bc82c:	ee18 0a10 	vmov	r0, s16
   bc830:	463a      	mov	r2, r7
   bc832:	f000 fc2f 	bl	bd094 <__lshift>
   bc836:	1bed      	subs	r5, r5, r7
   bc838:	4604      	mov	r4, r0
   bc83a:	f100 0914 	add.w	r9, r0, #20
   bc83e:	f04f 0a00 	mov.w	sl, #0
   bc842:	e7ae      	b.n	bc7a2 <__gethex+0x202>
   bc844:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc848:	42a8      	cmp	r0, r5
   bc84a:	dd72      	ble.n	bc932 <__gethex+0x392>
   bc84c:	1b45      	subs	r5, r0, r5
   bc84e:	42ae      	cmp	r6, r5
   bc850:	dc36      	bgt.n	bc8c0 <__gethex+0x320>
   bc852:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc856:	2b02      	cmp	r3, #2
   bc858:	d02a      	beq.n	bc8b0 <__gethex+0x310>
   bc85a:	2b03      	cmp	r3, #3
   bc85c:	d02c      	beq.n	bc8b8 <__gethex+0x318>
   bc85e:	2b01      	cmp	r3, #1
   bc860:	d11c      	bne.n	bc89c <__gethex+0x2fc>
   bc862:	42ae      	cmp	r6, r5
   bc864:	d11a      	bne.n	bc89c <__gethex+0x2fc>
   bc866:	2e01      	cmp	r6, #1
   bc868:	d112      	bne.n	bc890 <__gethex+0x2f0>
   bc86a:	9a04      	ldr	r2, [sp, #16]
   bc86c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc870:	6013      	str	r3, [r2, #0]
   bc872:	2301      	movs	r3, #1
   bc874:	6123      	str	r3, [r4, #16]
   bc876:	f8c9 3000 	str.w	r3, [r9]
   bc87a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc87c:	2762      	movs	r7, #98	; 0x62
   bc87e:	601c      	str	r4, [r3, #0]
   bc880:	e723      	b.n	bc6ca <__gethex+0x12a>
   bc882:	bf00      	nop
   bc884:	000be290 	.word	0x000be290
   bc888:	000be1f8 	.word	0x000be1f8
   bc88c:	000be209 	.word	0x000be209
   bc890:	1e71      	subs	r1, r6, #1
   bc892:	4620      	mov	r0, r4
   bc894:	f000 fe42 	bl	bd51c <__any_on>
   bc898:	2800      	cmp	r0, #0
   bc89a:	d1e6      	bne.n	bc86a <__gethex+0x2ca>
   bc89c:	ee18 0a10 	vmov	r0, s16
   bc8a0:	4621      	mov	r1, r4
   bc8a2:	f000 f9db 	bl	bcc5c <_Bfree>
   bc8a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc8a8:	2300      	movs	r3, #0
   bc8aa:	6013      	str	r3, [r2, #0]
   bc8ac:	2750      	movs	r7, #80	; 0x50
   bc8ae:	e70c      	b.n	bc6ca <__gethex+0x12a>
   bc8b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc8b2:	2b00      	cmp	r3, #0
   bc8b4:	d1f2      	bne.n	bc89c <__gethex+0x2fc>
   bc8b6:	e7d8      	b.n	bc86a <__gethex+0x2ca>
   bc8b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc8ba:	2b00      	cmp	r3, #0
   bc8bc:	d1d5      	bne.n	bc86a <__gethex+0x2ca>
   bc8be:	e7ed      	b.n	bc89c <__gethex+0x2fc>
   bc8c0:	1e6f      	subs	r7, r5, #1
   bc8c2:	f1ba 0f00 	cmp.w	sl, #0
   bc8c6:	d131      	bne.n	bc92c <__gethex+0x38c>
   bc8c8:	b127      	cbz	r7, bc8d4 <__gethex+0x334>
   bc8ca:	4639      	mov	r1, r7
   bc8cc:	4620      	mov	r0, r4
   bc8ce:	f000 fe25 	bl	bd51c <__any_on>
   bc8d2:	4682      	mov	sl, r0
   bc8d4:	117b      	asrs	r3, r7, #5
   bc8d6:	2101      	movs	r1, #1
   bc8d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc8dc:	f007 071f 	and.w	r7, r7, #31
   bc8e0:	fa01 f707 	lsl.w	r7, r1, r7
   bc8e4:	421f      	tst	r7, r3
   bc8e6:	4629      	mov	r1, r5
   bc8e8:	4620      	mov	r0, r4
   bc8ea:	bf18      	it	ne
   bc8ec:	f04a 0a02 	orrne.w	sl, sl, #2
   bc8f0:	1b76      	subs	r6, r6, r5
   bc8f2:	f7ff fded 	bl	bc4d0 <rshift>
   bc8f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc8fa:	2702      	movs	r7, #2
   bc8fc:	f1ba 0f00 	cmp.w	sl, #0
   bc900:	d048      	beq.n	bc994 <__gethex+0x3f4>
   bc902:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc906:	2b02      	cmp	r3, #2
   bc908:	d015      	beq.n	bc936 <__gethex+0x396>
   bc90a:	2b03      	cmp	r3, #3
   bc90c:	d017      	beq.n	bc93e <__gethex+0x39e>
   bc90e:	2b01      	cmp	r3, #1
   bc910:	d109      	bne.n	bc926 <__gethex+0x386>
   bc912:	f01a 0f02 	tst.w	sl, #2
   bc916:	d006      	beq.n	bc926 <__gethex+0x386>
   bc918:	f8d9 0000 	ldr.w	r0, [r9]
   bc91c:	ea4a 0a00 	orr.w	sl, sl, r0
   bc920:	f01a 0f01 	tst.w	sl, #1
   bc924:	d10e      	bne.n	bc944 <__gethex+0x3a4>
   bc926:	f047 0710 	orr.w	r7, r7, #16
   bc92a:	e033      	b.n	bc994 <__gethex+0x3f4>
   bc92c:	f04f 0a01 	mov.w	sl, #1
   bc930:	e7d0      	b.n	bc8d4 <__gethex+0x334>
   bc932:	2701      	movs	r7, #1
   bc934:	e7e2      	b.n	bc8fc <__gethex+0x35c>
   bc936:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc938:	f1c3 0301 	rsb	r3, r3, #1
   bc93c:	9315      	str	r3, [sp, #84]	; 0x54
   bc93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc940:	2b00      	cmp	r3, #0
   bc942:	d0f0      	beq.n	bc926 <__gethex+0x386>
   bc944:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc948:	f104 0314 	add.w	r3, r4, #20
   bc94c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc950:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc954:	f04f 0c00 	mov.w	ip, #0
   bc958:	4618      	mov	r0, r3
   bc95a:	f853 2b04 	ldr.w	r2, [r3], #4
   bc95e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bc962:	d01c      	beq.n	bc99e <__gethex+0x3fe>
   bc964:	3201      	adds	r2, #1
   bc966:	6002      	str	r2, [r0, #0]
   bc968:	2f02      	cmp	r7, #2
   bc96a:	f104 0314 	add.w	r3, r4, #20
   bc96e:	d13f      	bne.n	bc9f0 <__gethex+0x450>
   bc970:	f8d8 2000 	ldr.w	r2, [r8]
   bc974:	3a01      	subs	r2, #1
   bc976:	42b2      	cmp	r2, r6
   bc978:	d10a      	bne.n	bc990 <__gethex+0x3f0>
   bc97a:	1171      	asrs	r1, r6, #5
   bc97c:	2201      	movs	r2, #1
   bc97e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc982:	f006 061f 	and.w	r6, r6, #31
   bc986:	fa02 f606 	lsl.w	r6, r2, r6
   bc98a:	421e      	tst	r6, r3
   bc98c:	bf18      	it	ne
   bc98e:	4617      	movne	r7, r2
   bc990:	f047 0720 	orr.w	r7, r7, #32
   bc994:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc996:	601c      	str	r4, [r3, #0]
   bc998:	9b04      	ldr	r3, [sp, #16]
   bc99a:	601d      	str	r5, [r3, #0]
   bc99c:	e695      	b.n	bc6ca <__gethex+0x12a>
   bc99e:	4299      	cmp	r1, r3
   bc9a0:	f843 cc04 	str.w	ip, [r3, #-4]
   bc9a4:	d8d8      	bhi.n	bc958 <__gethex+0x3b8>
   bc9a6:	68a3      	ldr	r3, [r4, #8]
   bc9a8:	459b      	cmp	fp, r3
   bc9aa:	db19      	blt.n	bc9e0 <__gethex+0x440>
   bc9ac:	6861      	ldr	r1, [r4, #4]
   bc9ae:	ee18 0a10 	vmov	r0, s16
   bc9b2:	3101      	adds	r1, #1
   bc9b4:	f000 f912 	bl	bcbdc <_Balloc>
   bc9b8:	4681      	mov	r9, r0
   bc9ba:	b918      	cbnz	r0, bc9c4 <__gethex+0x424>
   bc9bc:	4b1a      	ldr	r3, [pc, #104]	; (bca28 <__gethex+0x488>)
   bc9be:	4602      	mov	r2, r0
   bc9c0:	2184      	movs	r1, #132	; 0x84
   bc9c2:	e6a8      	b.n	bc716 <__gethex+0x176>
   bc9c4:	6922      	ldr	r2, [r4, #16]
   bc9c6:	3202      	adds	r2, #2
   bc9c8:	f104 010c 	add.w	r1, r4, #12
   bc9cc:	0092      	lsls	r2, r2, #2
   bc9ce:	300c      	adds	r0, #12
   bc9d0:	f7fe fd60 	bl	bb494 <memcpy>
   bc9d4:	4621      	mov	r1, r4
   bc9d6:	ee18 0a10 	vmov	r0, s16
   bc9da:	f000 f93f 	bl	bcc5c <_Bfree>
   bc9de:	464c      	mov	r4, r9
   bc9e0:	6923      	ldr	r3, [r4, #16]
   bc9e2:	1c5a      	adds	r2, r3, #1
   bc9e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc9e8:	6122      	str	r2, [r4, #16]
   bc9ea:	2201      	movs	r2, #1
   bc9ec:	615a      	str	r2, [r3, #20]
   bc9ee:	e7bb      	b.n	bc968 <__gethex+0x3c8>
   bc9f0:	6922      	ldr	r2, [r4, #16]
   bc9f2:	455a      	cmp	r2, fp
   bc9f4:	dd0b      	ble.n	bca0e <__gethex+0x46e>
   bc9f6:	2101      	movs	r1, #1
   bc9f8:	4620      	mov	r0, r4
   bc9fa:	f7ff fd69 	bl	bc4d0 <rshift>
   bc9fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bca02:	3501      	adds	r5, #1
   bca04:	42ab      	cmp	r3, r5
   bca06:	f6ff aed0 	blt.w	bc7aa <__gethex+0x20a>
   bca0a:	2701      	movs	r7, #1
   bca0c:	e7c0      	b.n	bc990 <__gethex+0x3f0>
   bca0e:	f016 061f 	ands.w	r6, r6, #31
   bca12:	d0fa      	beq.n	bca0a <__gethex+0x46a>
   bca14:	4453      	add	r3, sl
   bca16:	f1c6 0620 	rsb	r6, r6, #32
   bca1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bca1e:	f000 f9cf 	bl	bcdc0 <__hi0bits>
   bca22:	42b0      	cmp	r0, r6
   bca24:	dbe7      	blt.n	bc9f6 <__gethex+0x456>
   bca26:	e7f0      	b.n	bca0a <__gethex+0x46a>
   bca28:	000be1f8 	.word	0x000be1f8

000bca2c <L_shift>:
   bca2c:	f1c2 0208 	rsb	r2, r2, #8
   bca30:	0092      	lsls	r2, r2, #2
   bca32:	b570      	push	{r4, r5, r6, lr}
   bca34:	f1c2 0620 	rsb	r6, r2, #32
   bca38:	6843      	ldr	r3, [r0, #4]
   bca3a:	6804      	ldr	r4, [r0, #0]
   bca3c:	fa03 f506 	lsl.w	r5, r3, r6
   bca40:	432c      	orrs	r4, r5
   bca42:	40d3      	lsrs	r3, r2
   bca44:	6004      	str	r4, [r0, #0]
   bca46:	f840 3f04 	str.w	r3, [r0, #4]!
   bca4a:	4288      	cmp	r0, r1
   bca4c:	d3f4      	bcc.n	bca38 <L_shift+0xc>
   bca4e:	bd70      	pop	{r4, r5, r6, pc}

000bca50 <__match>:
   bca50:	b530      	push	{r4, r5, lr}
   bca52:	6803      	ldr	r3, [r0, #0]
   bca54:	3301      	adds	r3, #1
   bca56:	f811 4b01 	ldrb.w	r4, [r1], #1
   bca5a:	b914      	cbnz	r4, bca62 <__match+0x12>
   bca5c:	6003      	str	r3, [r0, #0]
   bca5e:	2001      	movs	r0, #1
   bca60:	bd30      	pop	{r4, r5, pc}
   bca62:	f813 2b01 	ldrb.w	r2, [r3], #1
   bca66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bca6a:	2d19      	cmp	r5, #25
   bca6c:	bf98      	it	ls
   bca6e:	3220      	addls	r2, #32
   bca70:	42a2      	cmp	r2, r4
   bca72:	d0f0      	beq.n	bca56 <__match+0x6>
   bca74:	2000      	movs	r0, #0
   bca76:	e7f3      	b.n	bca60 <__match+0x10>

000bca78 <__hexnan>:
   bca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca7c:	680b      	ldr	r3, [r1, #0]
   bca7e:	115e      	asrs	r6, r3, #5
   bca80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bca84:	f013 031f 	ands.w	r3, r3, #31
   bca88:	b087      	sub	sp, #28
   bca8a:	bf18      	it	ne
   bca8c:	3604      	addne	r6, #4
   bca8e:	2500      	movs	r5, #0
   bca90:	1f37      	subs	r7, r6, #4
   bca92:	4690      	mov	r8, r2
   bca94:	6802      	ldr	r2, [r0, #0]
   bca96:	9301      	str	r3, [sp, #4]
   bca98:	4682      	mov	sl, r0
   bca9a:	f846 5c04 	str.w	r5, [r6, #-4]
   bca9e:	46b9      	mov	r9, r7
   bcaa0:	463c      	mov	r4, r7
   bcaa2:	9502      	str	r5, [sp, #8]
   bcaa4:	46ab      	mov	fp, r5
   bcaa6:	7851      	ldrb	r1, [r2, #1]
   bcaa8:	1c53      	adds	r3, r2, #1
   bcaaa:	9303      	str	r3, [sp, #12]
   bcaac:	b341      	cbz	r1, bcb00 <__hexnan+0x88>
   bcaae:	4608      	mov	r0, r1
   bcab0:	9205      	str	r2, [sp, #20]
   bcab2:	9104      	str	r1, [sp, #16]
   bcab4:	f7ff fd5e 	bl	bc574 <__hexdig_fun>
   bcab8:	2800      	cmp	r0, #0
   bcaba:	d14f      	bne.n	bcb5c <__hexnan+0xe4>
   bcabc:	9904      	ldr	r1, [sp, #16]
   bcabe:	9a05      	ldr	r2, [sp, #20]
   bcac0:	2920      	cmp	r1, #32
   bcac2:	d818      	bhi.n	bcaf6 <__hexnan+0x7e>
   bcac4:	9b02      	ldr	r3, [sp, #8]
   bcac6:	459b      	cmp	fp, r3
   bcac8:	dd13      	ble.n	bcaf2 <__hexnan+0x7a>
   bcaca:	454c      	cmp	r4, r9
   bcacc:	d206      	bcs.n	bcadc <__hexnan+0x64>
   bcace:	2d07      	cmp	r5, #7
   bcad0:	dc04      	bgt.n	bcadc <__hexnan+0x64>
   bcad2:	462a      	mov	r2, r5
   bcad4:	4649      	mov	r1, r9
   bcad6:	4620      	mov	r0, r4
   bcad8:	f7ff ffa8 	bl	bca2c <L_shift>
   bcadc:	4544      	cmp	r4, r8
   bcade:	d950      	bls.n	bcb82 <__hexnan+0x10a>
   bcae0:	2300      	movs	r3, #0
   bcae2:	f1a4 0904 	sub.w	r9, r4, #4
   bcae6:	f844 3c04 	str.w	r3, [r4, #-4]
   bcaea:	f8cd b008 	str.w	fp, [sp, #8]
   bcaee:	464c      	mov	r4, r9
   bcaf0:	461d      	mov	r5, r3
   bcaf2:	9a03      	ldr	r2, [sp, #12]
   bcaf4:	e7d7      	b.n	bcaa6 <__hexnan+0x2e>
   bcaf6:	2929      	cmp	r1, #41	; 0x29
   bcaf8:	d156      	bne.n	bcba8 <__hexnan+0x130>
   bcafa:	3202      	adds	r2, #2
   bcafc:	f8ca 2000 	str.w	r2, [sl]
   bcb00:	f1bb 0f00 	cmp.w	fp, #0
   bcb04:	d050      	beq.n	bcba8 <__hexnan+0x130>
   bcb06:	454c      	cmp	r4, r9
   bcb08:	d206      	bcs.n	bcb18 <__hexnan+0xa0>
   bcb0a:	2d07      	cmp	r5, #7
   bcb0c:	dc04      	bgt.n	bcb18 <__hexnan+0xa0>
   bcb0e:	462a      	mov	r2, r5
   bcb10:	4649      	mov	r1, r9
   bcb12:	4620      	mov	r0, r4
   bcb14:	f7ff ff8a 	bl	bca2c <L_shift>
   bcb18:	4544      	cmp	r4, r8
   bcb1a:	d934      	bls.n	bcb86 <__hexnan+0x10e>
   bcb1c:	f1a8 0204 	sub.w	r2, r8, #4
   bcb20:	4623      	mov	r3, r4
   bcb22:	f853 1b04 	ldr.w	r1, [r3], #4
   bcb26:	f842 1f04 	str.w	r1, [r2, #4]!
   bcb2a:	429f      	cmp	r7, r3
   bcb2c:	d2f9      	bcs.n	bcb22 <__hexnan+0xaa>
   bcb2e:	1b3b      	subs	r3, r7, r4
   bcb30:	f023 0303 	bic.w	r3, r3, #3
   bcb34:	3304      	adds	r3, #4
   bcb36:	3401      	adds	r4, #1
   bcb38:	3e03      	subs	r6, #3
   bcb3a:	42b4      	cmp	r4, r6
   bcb3c:	bf88      	it	hi
   bcb3e:	2304      	movhi	r3, #4
   bcb40:	4443      	add	r3, r8
   bcb42:	2200      	movs	r2, #0
   bcb44:	f843 2b04 	str.w	r2, [r3], #4
   bcb48:	429f      	cmp	r7, r3
   bcb4a:	d2fb      	bcs.n	bcb44 <__hexnan+0xcc>
   bcb4c:	683b      	ldr	r3, [r7, #0]
   bcb4e:	b91b      	cbnz	r3, bcb58 <__hexnan+0xe0>
   bcb50:	4547      	cmp	r7, r8
   bcb52:	d127      	bne.n	bcba4 <__hexnan+0x12c>
   bcb54:	2301      	movs	r3, #1
   bcb56:	603b      	str	r3, [r7, #0]
   bcb58:	2005      	movs	r0, #5
   bcb5a:	e026      	b.n	bcbaa <__hexnan+0x132>
   bcb5c:	3501      	adds	r5, #1
   bcb5e:	2d08      	cmp	r5, #8
   bcb60:	f10b 0b01 	add.w	fp, fp, #1
   bcb64:	dd06      	ble.n	bcb74 <__hexnan+0xfc>
   bcb66:	4544      	cmp	r4, r8
   bcb68:	d9c3      	bls.n	bcaf2 <__hexnan+0x7a>
   bcb6a:	2300      	movs	r3, #0
   bcb6c:	f844 3c04 	str.w	r3, [r4, #-4]
   bcb70:	2501      	movs	r5, #1
   bcb72:	3c04      	subs	r4, #4
   bcb74:	6822      	ldr	r2, [r4, #0]
   bcb76:	f000 000f 	and.w	r0, r0, #15
   bcb7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bcb7e:	6022      	str	r2, [r4, #0]
   bcb80:	e7b7      	b.n	bcaf2 <__hexnan+0x7a>
   bcb82:	2508      	movs	r5, #8
   bcb84:	e7b5      	b.n	bcaf2 <__hexnan+0x7a>
   bcb86:	9b01      	ldr	r3, [sp, #4]
   bcb88:	2b00      	cmp	r3, #0
   bcb8a:	d0df      	beq.n	bcb4c <__hexnan+0xd4>
   bcb8c:	f04f 32ff 	mov.w	r2, #4294967295
   bcb90:	f1c3 0320 	rsb	r3, r3, #32
   bcb94:	fa22 f303 	lsr.w	r3, r2, r3
   bcb98:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bcb9c:	401a      	ands	r2, r3
   bcb9e:	f846 2c04 	str.w	r2, [r6, #-4]
   bcba2:	e7d3      	b.n	bcb4c <__hexnan+0xd4>
   bcba4:	3f04      	subs	r7, #4
   bcba6:	e7d1      	b.n	bcb4c <__hexnan+0xd4>
   bcba8:	2004      	movs	r0, #4
   bcbaa:	b007      	add	sp, #28
   bcbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcbb0 <__retarget_lock_acquire_recursive>:
   bcbb0:	4770      	bx	lr

000bcbb2 <__retarget_lock_release>:
   bcbb2:	4770      	bx	lr

000bcbb4 <__retarget_lock_release_recursive>:
   bcbb4:	4770      	bx	lr

000bcbb6 <__ascii_mbtowc>:
   bcbb6:	b082      	sub	sp, #8
   bcbb8:	b901      	cbnz	r1, bcbbc <__ascii_mbtowc+0x6>
   bcbba:	a901      	add	r1, sp, #4
   bcbbc:	b142      	cbz	r2, bcbd0 <__ascii_mbtowc+0x1a>
   bcbbe:	b14b      	cbz	r3, bcbd4 <__ascii_mbtowc+0x1e>
   bcbc0:	7813      	ldrb	r3, [r2, #0]
   bcbc2:	600b      	str	r3, [r1, #0]
   bcbc4:	7812      	ldrb	r2, [r2, #0]
   bcbc6:	1e10      	subs	r0, r2, #0
   bcbc8:	bf18      	it	ne
   bcbca:	2001      	movne	r0, #1
   bcbcc:	b002      	add	sp, #8
   bcbce:	4770      	bx	lr
   bcbd0:	4610      	mov	r0, r2
   bcbd2:	e7fb      	b.n	bcbcc <__ascii_mbtowc+0x16>
   bcbd4:	f06f 0001 	mvn.w	r0, #1
   bcbd8:	e7f8      	b.n	bcbcc <__ascii_mbtowc+0x16>
	...

000bcbdc <_Balloc>:
   bcbdc:	b570      	push	{r4, r5, r6, lr}
   bcbde:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcbe0:	4604      	mov	r4, r0
   bcbe2:	460d      	mov	r5, r1
   bcbe4:	b976      	cbnz	r6, bcc04 <_Balloc+0x28>
   bcbe6:	2010      	movs	r0, #16
   bcbe8:	f7fb f810 	bl	b7c0c <malloc>
   bcbec:	4602      	mov	r2, r0
   bcbee:	6260      	str	r0, [r4, #36]	; 0x24
   bcbf0:	b920      	cbnz	r0, bcbfc <_Balloc+0x20>
   bcbf2:	4b18      	ldr	r3, [pc, #96]	; (bcc54 <_Balloc+0x78>)
   bcbf4:	4818      	ldr	r0, [pc, #96]	; (bcc58 <_Balloc+0x7c>)
   bcbf6:	2166      	movs	r1, #102	; 0x66
   bcbf8:	f7fb f858 	bl	b7cac <__assert_func>
   bcbfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcc00:	6006      	str	r6, [r0, #0]
   bcc02:	60c6      	str	r6, [r0, #12]
   bcc04:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bcc06:	68f3      	ldr	r3, [r6, #12]
   bcc08:	b183      	cbz	r3, bcc2c <_Balloc+0x50>
   bcc0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcc0c:	68db      	ldr	r3, [r3, #12]
   bcc0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bcc12:	b9b8      	cbnz	r0, bcc44 <_Balloc+0x68>
   bcc14:	2101      	movs	r1, #1
   bcc16:	fa01 f605 	lsl.w	r6, r1, r5
   bcc1a:	1d72      	adds	r2, r6, #5
   bcc1c:	0092      	lsls	r2, r2, #2
   bcc1e:	4620      	mov	r0, r4
   bcc20:	f000 fc9d 	bl	bd55e <_calloc_r>
   bcc24:	b160      	cbz	r0, bcc40 <_Balloc+0x64>
   bcc26:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bcc2a:	e00e      	b.n	bcc4a <_Balloc+0x6e>
   bcc2c:	2221      	movs	r2, #33	; 0x21
   bcc2e:	2104      	movs	r1, #4
   bcc30:	4620      	mov	r0, r4
   bcc32:	f000 fc94 	bl	bd55e <_calloc_r>
   bcc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcc38:	60f0      	str	r0, [r6, #12]
   bcc3a:	68db      	ldr	r3, [r3, #12]
   bcc3c:	2b00      	cmp	r3, #0
   bcc3e:	d1e4      	bne.n	bcc0a <_Balloc+0x2e>
   bcc40:	2000      	movs	r0, #0
   bcc42:	bd70      	pop	{r4, r5, r6, pc}
   bcc44:	6802      	ldr	r2, [r0, #0]
   bcc46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bcc4a:	2300      	movs	r3, #0
   bcc4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bcc50:	e7f7      	b.n	bcc42 <_Balloc+0x66>
   bcc52:	bf00      	nop
   bcc54:	000be107 	.word	0x000be107
   bcc58:	000be2a4 	.word	0x000be2a4

000bcc5c <_Bfree>:
   bcc5c:	b570      	push	{r4, r5, r6, lr}
   bcc5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcc60:	4605      	mov	r5, r0
   bcc62:	460c      	mov	r4, r1
   bcc64:	b976      	cbnz	r6, bcc84 <_Bfree+0x28>
   bcc66:	2010      	movs	r0, #16
   bcc68:	f7fa ffd0 	bl	b7c0c <malloc>
   bcc6c:	4602      	mov	r2, r0
   bcc6e:	6268      	str	r0, [r5, #36]	; 0x24
   bcc70:	b920      	cbnz	r0, bcc7c <_Bfree+0x20>
   bcc72:	4b09      	ldr	r3, [pc, #36]	; (bcc98 <_Bfree+0x3c>)
   bcc74:	4809      	ldr	r0, [pc, #36]	; (bcc9c <_Bfree+0x40>)
   bcc76:	218a      	movs	r1, #138	; 0x8a
   bcc78:	f7fb f818 	bl	b7cac <__assert_func>
   bcc7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcc80:	6006      	str	r6, [r0, #0]
   bcc82:	60c6      	str	r6, [r0, #12]
   bcc84:	b13c      	cbz	r4, bcc96 <_Bfree+0x3a>
   bcc86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bcc88:	6862      	ldr	r2, [r4, #4]
   bcc8a:	68db      	ldr	r3, [r3, #12]
   bcc8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bcc90:	6021      	str	r1, [r4, #0]
   bcc92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bcc96:	bd70      	pop	{r4, r5, r6, pc}
   bcc98:	000be107 	.word	0x000be107
   bcc9c:	000be2a4 	.word	0x000be2a4

000bcca0 <__multadd>:
   bcca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcca4:	690d      	ldr	r5, [r1, #16]
   bcca6:	4607      	mov	r7, r0
   bcca8:	460c      	mov	r4, r1
   bccaa:	461e      	mov	r6, r3
   bccac:	f101 0c14 	add.w	ip, r1, #20
   bccb0:	2000      	movs	r0, #0
   bccb2:	f8dc 3000 	ldr.w	r3, [ip]
   bccb6:	b299      	uxth	r1, r3
   bccb8:	fb02 6101 	mla	r1, r2, r1, r6
   bccbc:	0c1e      	lsrs	r6, r3, #16
   bccbe:	0c0b      	lsrs	r3, r1, #16
   bccc0:	fb02 3306 	mla	r3, r2, r6, r3
   bccc4:	b289      	uxth	r1, r1
   bccc6:	3001      	adds	r0, #1
   bccc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bcccc:	4285      	cmp	r5, r0
   bccce:	f84c 1b04 	str.w	r1, [ip], #4
   bccd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bccd6:	dcec      	bgt.n	bccb2 <__multadd+0x12>
   bccd8:	b30e      	cbz	r6, bcd1e <__multadd+0x7e>
   bccda:	68a3      	ldr	r3, [r4, #8]
   bccdc:	42ab      	cmp	r3, r5
   bccde:	dc19      	bgt.n	bcd14 <__multadd+0x74>
   bcce0:	6861      	ldr	r1, [r4, #4]
   bcce2:	4638      	mov	r0, r7
   bcce4:	3101      	adds	r1, #1
   bcce6:	f7ff ff79 	bl	bcbdc <_Balloc>
   bccea:	4680      	mov	r8, r0
   bccec:	b928      	cbnz	r0, bccfa <__multadd+0x5a>
   bccee:	4602      	mov	r2, r0
   bccf0:	4b0c      	ldr	r3, [pc, #48]	; (bcd24 <__multadd+0x84>)
   bccf2:	480d      	ldr	r0, [pc, #52]	; (bcd28 <__multadd+0x88>)
   bccf4:	21b5      	movs	r1, #181	; 0xb5
   bccf6:	f7fa ffd9 	bl	b7cac <__assert_func>
   bccfa:	6922      	ldr	r2, [r4, #16]
   bccfc:	3202      	adds	r2, #2
   bccfe:	f104 010c 	add.w	r1, r4, #12
   bcd02:	0092      	lsls	r2, r2, #2
   bcd04:	300c      	adds	r0, #12
   bcd06:	f7fe fbc5 	bl	bb494 <memcpy>
   bcd0a:	4621      	mov	r1, r4
   bcd0c:	4638      	mov	r0, r7
   bcd0e:	f7ff ffa5 	bl	bcc5c <_Bfree>
   bcd12:	4644      	mov	r4, r8
   bcd14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bcd18:	3501      	adds	r5, #1
   bcd1a:	615e      	str	r6, [r3, #20]
   bcd1c:	6125      	str	r5, [r4, #16]
   bcd1e:	4620      	mov	r0, r4
   bcd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcd24:	000be1f8 	.word	0x000be1f8
   bcd28:	000be2a4 	.word	0x000be2a4

000bcd2c <__s2b>:
   bcd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcd30:	460c      	mov	r4, r1
   bcd32:	4615      	mov	r5, r2
   bcd34:	461f      	mov	r7, r3
   bcd36:	2209      	movs	r2, #9
   bcd38:	3308      	adds	r3, #8
   bcd3a:	4606      	mov	r6, r0
   bcd3c:	fb93 f3f2 	sdiv	r3, r3, r2
   bcd40:	2100      	movs	r1, #0
   bcd42:	2201      	movs	r2, #1
   bcd44:	429a      	cmp	r2, r3
   bcd46:	db09      	blt.n	bcd5c <__s2b+0x30>
   bcd48:	4630      	mov	r0, r6
   bcd4a:	f7ff ff47 	bl	bcbdc <_Balloc>
   bcd4e:	b940      	cbnz	r0, bcd62 <__s2b+0x36>
   bcd50:	4602      	mov	r2, r0
   bcd52:	4b19      	ldr	r3, [pc, #100]	; (bcdb8 <__s2b+0x8c>)
   bcd54:	4819      	ldr	r0, [pc, #100]	; (bcdbc <__s2b+0x90>)
   bcd56:	21ce      	movs	r1, #206	; 0xce
   bcd58:	f7fa ffa8 	bl	b7cac <__assert_func>
   bcd5c:	0052      	lsls	r2, r2, #1
   bcd5e:	3101      	adds	r1, #1
   bcd60:	e7f0      	b.n	bcd44 <__s2b+0x18>
   bcd62:	9b08      	ldr	r3, [sp, #32]
   bcd64:	6143      	str	r3, [r0, #20]
   bcd66:	2d09      	cmp	r5, #9
   bcd68:	f04f 0301 	mov.w	r3, #1
   bcd6c:	6103      	str	r3, [r0, #16]
   bcd6e:	dd16      	ble.n	bcd9e <__s2b+0x72>
   bcd70:	f104 0909 	add.w	r9, r4, #9
   bcd74:	46c8      	mov	r8, r9
   bcd76:	442c      	add	r4, r5
   bcd78:	f818 3b01 	ldrb.w	r3, [r8], #1
   bcd7c:	4601      	mov	r1, r0
   bcd7e:	3b30      	subs	r3, #48	; 0x30
   bcd80:	220a      	movs	r2, #10
   bcd82:	4630      	mov	r0, r6
   bcd84:	f7ff ff8c 	bl	bcca0 <__multadd>
   bcd88:	45a0      	cmp	r8, r4
   bcd8a:	d1f5      	bne.n	bcd78 <__s2b+0x4c>
   bcd8c:	f1a5 0408 	sub.w	r4, r5, #8
   bcd90:	444c      	add	r4, r9
   bcd92:	1b2d      	subs	r5, r5, r4
   bcd94:	1963      	adds	r3, r4, r5
   bcd96:	42bb      	cmp	r3, r7
   bcd98:	db04      	blt.n	bcda4 <__s2b+0x78>
   bcd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcd9e:	340a      	adds	r4, #10
   bcda0:	2509      	movs	r5, #9
   bcda2:	e7f6      	b.n	bcd92 <__s2b+0x66>
   bcda4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bcda8:	4601      	mov	r1, r0
   bcdaa:	3b30      	subs	r3, #48	; 0x30
   bcdac:	220a      	movs	r2, #10
   bcdae:	4630      	mov	r0, r6
   bcdb0:	f7ff ff76 	bl	bcca0 <__multadd>
   bcdb4:	e7ee      	b.n	bcd94 <__s2b+0x68>
   bcdb6:	bf00      	nop
   bcdb8:	000be1f8 	.word	0x000be1f8
   bcdbc:	000be2a4 	.word	0x000be2a4

000bcdc0 <__hi0bits>:
   bcdc0:	0c03      	lsrs	r3, r0, #16
   bcdc2:	041b      	lsls	r3, r3, #16
   bcdc4:	b9d3      	cbnz	r3, bcdfc <__hi0bits+0x3c>
   bcdc6:	0400      	lsls	r0, r0, #16
   bcdc8:	2310      	movs	r3, #16
   bcdca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bcdce:	bf04      	itt	eq
   bcdd0:	0200      	lsleq	r0, r0, #8
   bcdd2:	3308      	addeq	r3, #8
   bcdd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bcdd8:	bf04      	itt	eq
   bcdda:	0100      	lsleq	r0, r0, #4
   bcddc:	3304      	addeq	r3, #4
   bcdde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcde2:	bf04      	itt	eq
   bcde4:	0080      	lsleq	r0, r0, #2
   bcde6:	3302      	addeq	r3, #2
   bcde8:	2800      	cmp	r0, #0
   bcdea:	db05      	blt.n	bcdf8 <__hi0bits+0x38>
   bcdec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bcdf0:	f103 0301 	add.w	r3, r3, #1
   bcdf4:	bf08      	it	eq
   bcdf6:	2320      	moveq	r3, #32
   bcdf8:	4618      	mov	r0, r3
   bcdfa:	4770      	bx	lr
   bcdfc:	2300      	movs	r3, #0
   bcdfe:	e7e4      	b.n	bcdca <__hi0bits+0xa>

000bce00 <__lo0bits>:
   bce00:	6803      	ldr	r3, [r0, #0]
   bce02:	f013 0207 	ands.w	r2, r3, #7
   bce06:	4601      	mov	r1, r0
   bce08:	d00b      	beq.n	bce22 <__lo0bits+0x22>
   bce0a:	07da      	lsls	r2, r3, #31
   bce0c:	d423      	bmi.n	bce56 <__lo0bits+0x56>
   bce0e:	0798      	lsls	r0, r3, #30
   bce10:	bf49      	itett	mi
   bce12:	085b      	lsrmi	r3, r3, #1
   bce14:	089b      	lsrpl	r3, r3, #2
   bce16:	2001      	movmi	r0, #1
   bce18:	600b      	strmi	r3, [r1, #0]
   bce1a:	bf5c      	itt	pl
   bce1c:	600b      	strpl	r3, [r1, #0]
   bce1e:	2002      	movpl	r0, #2
   bce20:	4770      	bx	lr
   bce22:	b298      	uxth	r0, r3
   bce24:	b9a8      	cbnz	r0, bce52 <__lo0bits+0x52>
   bce26:	0c1b      	lsrs	r3, r3, #16
   bce28:	2010      	movs	r0, #16
   bce2a:	b2da      	uxtb	r2, r3
   bce2c:	b90a      	cbnz	r2, bce32 <__lo0bits+0x32>
   bce2e:	3008      	adds	r0, #8
   bce30:	0a1b      	lsrs	r3, r3, #8
   bce32:	071a      	lsls	r2, r3, #28
   bce34:	bf04      	itt	eq
   bce36:	091b      	lsreq	r3, r3, #4
   bce38:	3004      	addeq	r0, #4
   bce3a:	079a      	lsls	r2, r3, #30
   bce3c:	bf04      	itt	eq
   bce3e:	089b      	lsreq	r3, r3, #2
   bce40:	3002      	addeq	r0, #2
   bce42:	07da      	lsls	r2, r3, #31
   bce44:	d403      	bmi.n	bce4e <__lo0bits+0x4e>
   bce46:	085b      	lsrs	r3, r3, #1
   bce48:	f100 0001 	add.w	r0, r0, #1
   bce4c:	d005      	beq.n	bce5a <__lo0bits+0x5a>
   bce4e:	600b      	str	r3, [r1, #0]
   bce50:	4770      	bx	lr
   bce52:	4610      	mov	r0, r2
   bce54:	e7e9      	b.n	bce2a <__lo0bits+0x2a>
   bce56:	2000      	movs	r0, #0
   bce58:	4770      	bx	lr
   bce5a:	2020      	movs	r0, #32
   bce5c:	4770      	bx	lr
	...

000bce60 <__i2b>:
   bce60:	b510      	push	{r4, lr}
   bce62:	460c      	mov	r4, r1
   bce64:	2101      	movs	r1, #1
   bce66:	f7ff feb9 	bl	bcbdc <_Balloc>
   bce6a:	4602      	mov	r2, r0
   bce6c:	b928      	cbnz	r0, bce7a <__i2b+0x1a>
   bce6e:	4b05      	ldr	r3, [pc, #20]	; (bce84 <__i2b+0x24>)
   bce70:	4805      	ldr	r0, [pc, #20]	; (bce88 <__i2b+0x28>)
   bce72:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bce76:	f7fa ff19 	bl	b7cac <__assert_func>
   bce7a:	2301      	movs	r3, #1
   bce7c:	6144      	str	r4, [r0, #20]
   bce7e:	6103      	str	r3, [r0, #16]
   bce80:	bd10      	pop	{r4, pc}
   bce82:	bf00      	nop
   bce84:	000be1f8 	.word	0x000be1f8
   bce88:	000be2a4 	.word	0x000be2a4

000bce8c <__multiply>:
   bce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce90:	4691      	mov	r9, r2
   bce92:	690a      	ldr	r2, [r1, #16]
   bce94:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bce98:	429a      	cmp	r2, r3
   bce9a:	bfb8      	it	lt
   bce9c:	460b      	movlt	r3, r1
   bce9e:	460c      	mov	r4, r1
   bcea0:	bfbc      	itt	lt
   bcea2:	464c      	movlt	r4, r9
   bcea4:	4699      	movlt	r9, r3
   bcea6:	6927      	ldr	r7, [r4, #16]
   bcea8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bceac:	68a3      	ldr	r3, [r4, #8]
   bceae:	6861      	ldr	r1, [r4, #4]
   bceb0:	eb07 060a 	add.w	r6, r7, sl
   bceb4:	42b3      	cmp	r3, r6
   bceb6:	b085      	sub	sp, #20
   bceb8:	bfb8      	it	lt
   bceba:	3101      	addlt	r1, #1
   bcebc:	f7ff fe8e 	bl	bcbdc <_Balloc>
   bcec0:	b930      	cbnz	r0, bced0 <__multiply+0x44>
   bcec2:	4602      	mov	r2, r0
   bcec4:	4b44      	ldr	r3, [pc, #272]	; (bcfd8 <__multiply+0x14c>)
   bcec6:	4845      	ldr	r0, [pc, #276]	; (bcfdc <__multiply+0x150>)
   bcec8:	f240 115d 	movw	r1, #349	; 0x15d
   bcecc:	f7fa feee 	bl	b7cac <__assert_func>
   bced0:	f100 0514 	add.w	r5, r0, #20
   bced4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bced8:	462b      	mov	r3, r5
   bceda:	2200      	movs	r2, #0
   bcedc:	4543      	cmp	r3, r8
   bcede:	d321      	bcc.n	bcf24 <__multiply+0x98>
   bcee0:	f104 0314 	add.w	r3, r4, #20
   bcee4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bcee8:	f109 0314 	add.w	r3, r9, #20
   bceec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bcef0:	9202      	str	r2, [sp, #8]
   bcef2:	1b3a      	subs	r2, r7, r4
   bcef4:	3a15      	subs	r2, #21
   bcef6:	f022 0203 	bic.w	r2, r2, #3
   bcefa:	3204      	adds	r2, #4
   bcefc:	f104 0115 	add.w	r1, r4, #21
   bcf00:	428f      	cmp	r7, r1
   bcf02:	bf38      	it	cc
   bcf04:	2204      	movcc	r2, #4
   bcf06:	9201      	str	r2, [sp, #4]
   bcf08:	9a02      	ldr	r2, [sp, #8]
   bcf0a:	9303      	str	r3, [sp, #12]
   bcf0c:	429a      	cmp	r2, r3
   bcf0e:	d80c      	bhi.n	bcf2a <__multiply+0x9e>
   bcf10:	2e00      	cmp	r6, #0
   bcf12:	dd03      	ble.n	bcf1c <__multiply+0x90>
   bcf14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bcf18:	2b00      	cmp	r3, #0
   bcf1a:	d05a      	beq.n	bcfd2 <__multiply+0x146>
   bcf1c:	6106      	str	r6, [r0, #16]
   bcf1e:	b005      	add	sp, #20
   bcf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcf24:	f843 2b04 	str.w	r2, [r3], #4
   bcf28:	e7d8      	b.n	bcedc <__multiply+0x50>
   bcf2a:	f8b3 a000 	ldrh.w	sl, [r3]
   bcf2e:	f1ba 0f00 	cmp.w	sl, #0
   bcf32:	d024      	beq.n	bcf7e <__multiply+0xf2>
   bcf34:	f104 0e14 	add.w	lr, r4, #20
   bcf38:	46a9      	mov	r9, r5
   bcf3a:	f04f 0c00 	mov.w	ip, #0
   bcf3e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bcf42:	f8d9 1000 	ldr.w	r1, [r9]
   bcf46:	fa1f fb82 	uxth.w	fp, r2
   bcf4a:	b289      	uxth	r1, r1
   bcf4c:	fb0a 110b 	mla	r1, sl, fp, r1
   bcf50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bcf54:	f8d9 2000 	ldr.w	r2, [r9]
   bcf58:	4461      	add	r1, ip
   bcf5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcf5e:	fb0a c20b 	mla	r2, sl, fp, ip
   bcf62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bcf66:	b289      	uxth	r1, r1
   bcf68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bcf6c:	4577      	cmp	r7, lr
   bcf6e:	f849 1b04 	str.w	r1, [r9], #4
   bcf72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcf76:	d8e2      	bhi.n	bcf3e <__multiply+0xb2>
   bcf78:	9a01      	ldr	r2, [sp, #4]
   bcf7a:	f845 c002 	str.w	ip, [r5, r2]
   bcf7e:	9a03      	ldr	r2, [sp, #12]
   bcf80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bcf84:	3304      	adds	r3, #4
   bcf86:	f1b9 0f00 	cmp.w	r9, #0
   bcf8a:	d020      	beq.n	bcfce <__multiply+0x142>
   bcf8c:	6829      	ldr	r1, [r5, #0]
   bcf8e:	f104 0c14 	add.w	ip, r4, #20
   bcf92:	46ae      	mov	lr, r5
   bcf94:	f04f 0a00 	mov.w	sl, #0
   bcf98:	f8bc b000 	ldrh.w	fp, [ip]
   bcf9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bcfa0:	fb09 220b 	mla	r2, r9, fp, r2
   bcfa4:	4492      	add	sl, r2
   bcfa6:	b289      	uxth	r1, r1
   bcfa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bcfac:	f84e 1b04 	str.w	r1, [lr], #4
   bcfb0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bcfb4:	f8be 1000 	ldrh.w	r1, [lr]
   bcfb8:	0c12      	lsrs	r2, r2, #16
   bcfba:	fb09 1102 	mla	r1, r9, r2, r1
   bcfbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bcfc2:	4567      	cmp	r7, ip
   bcfc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bcfc8:	d8e6      	bhi.n	bcf98 <__multiply+0x10c>
   bcfca:	9a01      	ldr	r2, [sp, #4]
   bcfcc:	50a9      	str	r1, [r5, r2]
   bcfce:	3504      	adds	r5, #4
   bcfd0:	e79a      	b.n	bcf08 <__multiply+0x7c>
   bcfd2:	3e01      	subs	r6, #1
   bcfd4:	e79c      	b.n	bcf10 <__multiply+0x84>
   bcfd6:	bf00      	nop
   bcfd8:	000be1f8 	.word	0x000be1f8
   bcfdc:	000be2a4 	.word	0x000be2a4

000bcfe0 <__pow5mult>:
   bcfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcfe4:	4615      	mov	r5, r2
   bcfe6:	f012 0203 	ands.w	r2, r2, #3
   bcfea:	4606      	mov	r6, r0
   bcfec:	460f      	mov	r7, r1
   bcfee:	d007      	beq.n	bd000 <__pow5mult+0x20>
   bcff0:	4c25      	ldr	r4, [pc, #148]	; (bd088 <__pow5mult+0xa8>)
   bcff2:	3a01      	subs	r2, #1
   bcff4:	2300      	movs	r3, #0
   bcff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bcffa:	f7ff fe51 	bl	bcca0 <__multadd>
   bcffe:	4607      	mov	r7, r0
   bd000:	10ad      	asrs	r5, r5, #2
   bd002:	d03d      	beq.n	bd080 <__pow5mult+0xa0>
   bd004:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd006:	b97c      	cbnz	r4, bd028 <__pow5mult+0x48>
   bd008:	2010      	movs	r0, #16
   bd00a:	f7fa fdff 	bl	b7c0c <malloc>
   bd00e:	4602      	mov	r2, r0
   bd010:	6270      	str	r0, [r6, #36]	; 0x24
   bd012:	b928      	cbnz	r0, bd020 <__pow5mult+0x40>
   bd014:	4b1d      	ldr	r3, [pc, #116]	; (bd08c <__pow5mult+0xac>)
   bd016:	481e      	ldr	r0, [pc, #120]	; (bd090 <__pow5mult+0xb0>)
   bd018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd01c:	f7fa fe46 	bl	b7cac <__assert_func>
   bd020:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd024:	6004      	str	r4, [r0, #0]
   bd026:	60c4      	str	r4, [r0, #12]
   bd028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd02c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd030:	b94c      	cbnz	r4, bd046 <__pow5mult+0x66>
   bd032:	f240 2171 	movw	r1, #625	; 0x271
   bd036:	4630      	mov	r0, r6
   bd038:	f7ff ff12 	bl	bce60 <__i2b>
   bd03c:	2300      	movs	r3, #0
   bd03e:	f8c8 0008 	str.w	r0, [r8, #8]
   bd042:	4604      	mov	r4, r0
   bd044:	6003      	str	r3, [r0, #0]
   bd046:	f04f 0900 	mov.w	r9, #0
   bd04a:	07eb      	lsls	r3, r5, #31
   bd04c:	d50a      	bpl.n	bd064 <__pow5mult+0x84>
   bd04e:	4639      	mov	r1, r7
   bd050:	4622      	mov	r2, r4
   bd052:	4630      	mov	r0, r6
   bd054:	f7ff ff1a 	bl	bce8c <__multiply>
   bd058:	4639      	mov	r1, r7
   bd05a:	4680      	mov	r8, r0
   bd05c:	4630      	mov	r0, r6
   bd05e:	f7ff fdfd 	bl	bcc5c <_Bfree>
   bd062:	4647      	mov	r7, r8
   bd064:	106d      	asrs	r5, r5, #1
   bd066:	d00b      	beq.n	bd080 <__pow5mult+0xa0>
   bd068:	6820      	ldr	r0, [r4, #0]
   bd06a:	b938      	cbnz	r0, bd07c <__pow5mult+0x9c>
   bd06c:	4622      	mov	r2, r4
   bd06e:	4621      	mov	r1, r4
   bd070:	4630      	mov	r0, r6
   bd072:	f7ff ff0b 	bl	bce8c <__multiply>
   bd076:	6020      	str	r0, [r4, #0]
   bd078:	f8c0 9000 	str.w	r9, [r0]
   bd07c:	4604      	mov	r4, r0
   bd07e:	e7e4      	b.n	bd04a <__pow5mult+0x6a>
   bd080:	4638      	mov	r0, r7
   bd082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd086:	bf00      	nop
   bd088:	000be418 	.word	0x000be418
   bd08c:	000be107 	.word	0x000be107
   bd090:	000be2a4 	.word	0x000be2a4

000bd094 <__lshift>:
   bd094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd098:	460c      	mov	r4, r1
   bd09a:	6849      	ldr	r1, [r1, #4]
   bd09c:	6923      	ldr	r3, [r4, #16]
   bd09e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd0a2:	68a3      	ldr	r3, [r4, #8]
   bd0a4:	4607      	mov	r7, r0
   bd0a6:	4691      	mov	r9, r2
   bd0a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd0ac:	f108 0601 	add.w	r6, r8, #1
   bd0b0:	42b3      	cmp	r3, r6
   bd0b2:	db0b      	blt.n	bd0cc <__lshift+0x38>
   bd0b4:	4638      	mov	r0, r7
   bd0b6:	f7ff fd91 	bl	bcbdc <_Balloc>
   bd0ba:	4605      	mov	r5, r0
   bd0bc:	b948      	cbnz	r0, bd0d2 <__lshift+0x3e>
   bd0be:	4602      	mov	r2, r0
   bd0c0:	4b2a      	ldr	r3, [pc, #168]	; (bd16c <__lshift+0xd8>)
   bd0c2:	482b      	ldr	r0, [pc, #172]	; (bd170 <__lshift+0xdc>)
   bd0c4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd0c8:	f7fa fdf0 	bl	b7cac <__assert_func>
   bd0cc:	3101      	adds	r1, #1
   bd0ce:	005b      	lsls	r3, r3, #1
   bd0d0:	e7ee      	b.n	bd0b0 <__lshift+0x1c>
   bd0d2:	2300      	movs	r3, #0
   bd0d4:	f100 0114 	add.w	r1, r0, #20
   bd0d8:	f100 0210 	add.w	r2, r0, #16
   bd0dc:	4618      	mov	r0, r3
   bd0de:	4553      	cmp	r3, sl
   bd0e0:	db37      	blt.n	bd152 <__lshift+0xbe>
   bd0e2:	6920      	ldr	r0, [r4, #16]
   bd0e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd0e8:	f104 0314 	add.w	r3, r4, #20
   bd0ec:	f019 091f 	ands.w	r9, r9, #31
   bd0f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd0f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd0f8:	d02f      	beq.n	bd15a <__lshift+0xc6>
   bd0fa:	f1c9 0e20 	rsb	lr, r9, #32
   bd0fe:	468a      	mov	sl, r1
   bd100:	f04f 0c00 	mov.w	ip, #0
   bd104:	681a      	ldr	r2, [r3, #0]
   bd106:	fa02 f209 	lsl.w	r2, r2, r9
   bd10a:	ea42 020c 	orr.w	r2, r2, ip
   bd10e:	f84a 2b04 	str.w	r2, [sl], #4
   bd112:	f853 2b04 	ldr.w	r2, [r3], #4
   bd116:	4298      	cmp	r0, r3
   bd118:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd11c:	d8f2      	bhi.n	bd104 <__lshift+0x70>
   bd11e:	1b03      	subs	r3, r0, r4
   bd120:	3b15      	subs	r3, #21
   bd122:	f023 0303 	bic.w	r3, r3, #3
   bd126:	3304      	adds	r3, #4
   bd128:	f104 0215 	add.w	r2, r4, #21
   bd12c:	4290      	cmp	r0, r2
   bd12e:	bf38      	it	cc
   bd130:	2304      	movcc	r3, #4
   bd132:	f841 c003 	str.w	ip, [r1, r3]
   bd136:	f1bc 0f00 	cmp.w	ip, #0
   bd13a:	d001      	beq.n	bd140 <__lshift+0xac>
   bd13c:	f108 0602 	add.w	r6, r8, #2
   bd140:	3e01      	subs	r6, #1
   bd142:	4638      	mov	r0, r7
   bd144:	612e      	str	r6, [r5, #16]
   bd146:	4621      	mov	r1, r4
   bd148:	f7ff fd88 	bl	bcc5c <_Bfree>
   bd14c:	4628      	mov	r0, r5
   bd14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd152:	f842 0f04 	str.w	r0, [r2, #4]!
   bd156:	3301      	adds	r3, #1
   bd158:	e7c1      	b.n	bd0de <__lshift+0x4a>
   bd15a:	3904      	subs	r1, #4
   bd15c:	f853 2b04 	ldr.w	r2, [r3], #4
   bd160:	f841 2f04 	str.w	r2, [r1, #4]!
   bd164:	4298      	cmp	r0, r3
   bd166:	d8f9      	bhi.n	bd15c <__lshift+0xc8>
   bd168:	e7ea      	b.n	bd140 <__lshift+0xac>
   bd16a:	bf00      	nop
   bd16c:	000be1f8 	.word	0x000be1f8
   bd170:	000be2a4 	.word	0x000be2a4

000bd174 <__mcmp>:
   bd174:	b530      	push	{r4, r5, lr}
   bd176:	6902      	ldr	r2, [r0, #16]
   bd178:	690c      	ldr	r4, [r1, #16]
   bd17a:	1b12      	subs	r2, r2, r4
   bd17c:	d10e      	bne.n	bd19c <__mcmp+0x28>
   bd17e:	f100 0314 	add.w	r3, r0, #20
   bd182:	3114      	adds	r1, #20
   bd184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd18c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd194:	42a5      	cmp	r5, r4
   bd196:	d003      	beq.n	bd1a0 <__mcmp+0x2c>
   bd198:	d305      	bcc.n	bd1a6 <__mcmp+0x32>
   bd19a:	2201      	movs	r2, #1
   bd19c:	4610      	mov	r0, r2
   bd19e:	bd30      	pop	{r4, r5, pc}
   bd1a0:	4283      	cmp	r3, r0
   bd1a2:	d3f3      	bcc.n	bd18c <__mcmp+0x18>
   bd1a4:	e7fa      	b.n	bd19c <__mcmp+0x28>
   bd1a6:	f04f 32ff 	mov.w	r2, #4294967295
   bd1aa:	e7f7      	b.n	bd19c <__mcmp+0x28>

000bd1ac <__mdiff>:
   bd1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd1b0:	460c      	mov	r4, r1
   bd1b2:	4606      	mov	r6, r0
   bd1b4:	4611      	mov	r1, r2
   bd1b6:	4620      	mov	r0, r4
   bd1b8:	4690      	mov	r8, r2
   bd1ba:	f7ff ffdb 	bl	bd174 <__mcmp>
   bd1be:	1e05      	subs	r5, r0, #0
   bd1c0:	d110      	bne.n	bd1e4 <__mdiff+0x38>
   bd1c2:	4629      	mov	r1, r5
   bd1c4:	4630      	mov	r0, r6
   bd1c6:	f7ff fd09 	bl	bcbdc <_Balloc>
   bd1ca:	b930      	cbnz	r0, bd1da <__mdiff+0x2e>
   bd1cc:	4b3a      	ldr	r3, [pc, #232]	; (bd2b8 <__mdiff+0x10c>)
   bd1ce:	4602      	mov	r2, r0
   bd1d0:	f240 2132 	movw	r1, #562	; 0x232
   bd1d4:	4839      	ldr	r0, [pc, #228]	; (bd2bc <__mdiff+0x110>)
   bd1d6:	f7fa fd69 	bl	b7cac <__assert_func>
   bd1da:	2301      	movs	r3, #1
   bd1dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd1e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd1e4:	bfa4      	itt	ge
   bd1e6:	4643      	movge	r3, r8
   bd1e8:	46a0      	movge	r8, r4
   bd1ea:	4630      	mov	r0, r6
   bd1ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd1f0:	bfa6      	itte	ge
   bd1f2:	461c      	movge	r4, r3
   bd1f4:	2500      	movge	r5, #0
   bd1f6:	2501      	movlt	r5, #1
   bd1f8:	f7ff fcf0 	bl	bcbdc <_Balloc>
   bd1fc:	b920      	cbnz	r0, bd208 <__mdiff+0x5c>
   bd1fe:	4b2e      	ldr	r3, [pc, #184]	; (bd2b8 <__mdiff+0x10c>)
   bd200:	4602      	mov	r2, r0
   bd202:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd206:	e7e5      	b.n	bd1d4 <__mdiff+0x28>
   bd208:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd20c:	6926      	ldr	r6, [r4, #16]
   bd20e:	60c5      	str	r5, [r0, #12]
   bd210:	f104 0914 	add.w	r9, r4, #20
   bd214:	f108 0514 	add.w	r5, r8, #20
   bd218:	f100 0e14 	add.w	lr, r0, #20
   bd21c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd224:	f108 0210 	add.w	r2, r8, #16
   bd228:	46f2      	mov	sl, lr
   bd22a:	2100      	movs	r1, #0
   bd22c:	f859 3b04 	ldr.w	r3, [r9], #4
   bd230:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd234:	fa1f f883 	uxth.w	r8, r3
   bd238:	fa11 f18b 	uxtah	r1, r1, fp
   bd23c:	0c1b      	lsrs	r3, r3, #16
   bd23e:	eba1 0808 	sub.w	r8, r1, r8
   bd242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd246:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd24a:	fa1f f888 	uxth.w	r8, r8
   bd24e:	1419      	asrs	r1, r3, #16
   bd250:	454e      	cmp	r6, r9
   bd252:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd256:	f84a 3b04 	str.w	r3, [sl], #4
   bd25a:	d8e7      	bhi.n	bd22c <__mdiff+0x80>
   bd25c:	1b33      	subs	r3, r6, r4
   bd25e:	3b15      	subs	r3, #21
   bd260:	f023 0303 	bic.w	r3, r3, #3
   bd264:	3304      	adds	r3, #4
   bd266:	3415      	adds	r4, #21
   bd268:	42a6      	cmp	r6, r4
   bd26a:	bf38      	it	cc
   bd26c:	2304      	movcc	r3, #4
   bd26e:	441d      	add	r5, r3
   bd270:	4473      	add	r3, lr
   bd272:	469e      	mov	lr, r3
   bd274:	462e      	mov	r6, r5
   bd276:	4566      	cmp	r6, ip
   bd278:	d30e      	bcc.n	bd298 <__mdiff+0xec>
   bd27a:	f10c 0203 	add.w	r2, ip, #3
   bd27e:	1b52      	subs	r2, r2, r5
   bd280:	f022 0203 	bic.w	r2, r2, #3
   bd284:	3d03      	subs	r5, #3
   bd286:	45ac      	cmp	ip, r5
   bd288:	bf38      	it	cc
   bd28a:	2200      	movcc	r2, #0
   bd28c:	441a      	add	r2, r3
   bd28e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd292:	b17b      	cbz	r3, bd2b4 <__mdiff+0x108>
   bd294:	6107      	str	r7, [r0, #16]
   bd296:	e7a3      	b.n	bd1e0 <__mdiff+0x34>
   bd298:	f856 8b04 	ldr.w	r8, [r6], #4
   bd29c:	fa11 f288 	uxtah	r2, r1, r8
   bd2a0:	1414      	asrs	r4, r2, #16
   bd2a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd2a6:	b292      	uxth	r2, r2
   bd2a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd2ac:	f84e 2b04 	str.w	r2, [lr], #4
   bd2b0:	1421      	asrs	r1, r4, #16
   bd2b2:	e7e0      	b.n	bd276 <__mdiff+0xca>
   bd2b4:	3f01      	subs	r7, #1
   bd2b6:	e7ea      	b.n	bd28e <__mdiff+0xe2>
   bd2b8:	000be1f8 	.word	0x000be1f8
   bd2bc:	000be2a4 	.word	0x000be2a4

000bd2c0 <__ulp>:
   bd2c0:	b082      	sub	sp, #8
   bd2c2:	ed8d 0b00 	vstr	d0, [sp]
   bd2c6:	9b01      	ldr	r3, [sp, #4]
   bd2c8:	4912      	ldr	r1, [pc, #72]	; (bd314 <__ulp+0x54>)
   bd2ca:	4019      	ands	r1, r3
   bd2cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd2d0:	2900      	cmp	r1, #0
   bd2d2:	dd05      	ble.n	bd2e0 <__ulp+0x20>
   bd2d4:	2200      	movs	r2, #0
   bd2d6:	460b      	mov	r3, r1
   bd2d8:	ec43 2b10 	vmov	d0, r2, r3
   bd2dc:	b002      	add	sp, #8
   bd2de:	4770      	bx	lr
   bd2e0:	4249      	negs	r1, r1
   bd2e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd2e6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd2ea:	f04f 0200 	mov.w	r2, #0
   bd2ee:	f04f 0300 	mov.w	r3, #0
   bd2f2:	da04      	bge.n	bd2fe <__ulp+0x3e>
   bd2f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd2f8:	fa41 f300 	asr.w	r3, r1, r0
   bd2fc:	e7ec      	b.n	bd2d8 <__ulp+0x18>
   bd2fe:	f1a0 0114 	sub.w	r1, r0, #20
   bd302:	291e      	cmp	r1, #30
   bd304:	bfda      	itte	le
   bd306:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd30a:	fa20 f101 	lsrle.w	r1, r0, r1
   bd30e:	2101      	movgt	r1, #1
   bd310:	460a      	mov	r2, r1
   bd312:	e7e1      	b.n	bd2d8 <__ulp+0x18>
   bd314:	7ff00000 	.word	0x7ff00000

000bd318 <__b2d>:
   bd318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd31a:	6905      	ldr	r5, [r0, #16]
   bd31c:	f100 0714 	add.w	r7, r0, #20
   bd320:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd324:	1f2e      	subs	r6, r5, #4
   bd326:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd32a:	4620      	mov	r0, r4
   bd32c:	f7ff fd48 	bl	bcdc0 <__hi0bits>
   bd330:	f1c0 0320 	rsb	r3, r0, #32
   bd334:	280a      	cmp	r0, #10
   bd336:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd3b4 <__b2d+0x9c>
   bd33a:	600b      	str	r3, [r1, #0]
   bd33c:	dc14      	bgt.n	bd368 <__b2d+0x50>
   bd33e:	f1c0 0e0b 	rsb	lr, r0, #11
   bd342:	fa24 f10e 	lsr.w	r1, r4, lr
   bd346:	42b7      	cmp	r7, r6
   bd348:	ea41 030c 	orr.w	r3, r1, ip
   bd34c:	bf34      	ite	cc
   bd34e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd352:	2100      	movcs	r1, #0
   bd354:	3015      	adds	r0, #21
   bd356:	fa04 f000 	lsl.w	r0, r4, r0
   bd35a:	fa21 f10e 	lsr.w	r1, r1, lr
   bd35e:	ea40 0201 	orr.w	r2, r0, r1
   bd362:	ec43 2b10 	vmov	d0, r2, r3
   bd366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd368:	42b7      	cmp	r7, r6
   bd36a:	bf3a      	itte	cc
   bd36c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd370:	f1a5 0608 	subcc.w	r6, r5, #8
   bd374:	2100      	movcs	r1, #0
   bd376:	380b      	subs	r0, #11
   bd378:	d017      	beq.n	bd3aa <__b2d+0x92>
   bd37a:	f1c0 0c20 	rsb	ip, r0, #32
   bd37e:	fa04 f500 	lsl.w	r5, r4, r0
   bd382:	42be      	cmp	r6, r7
   bd384:	fa21 f40c 	lsr.w	r4, r1, ip
   bd388:	ea45 0504 	orr.w	r5, r5, r4
   bd38c:	bf8c      	ite	hi
   bd38e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd392:	2400      	movls	r4, #0
   bd394:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd398:	fa01 f000 	lsl.w	r0, r1, r0
   bd39c:	fa24 f40c 	lsr.w	r4, r4, ip
   bd3a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd3a4:	ea40 0204 	orr.w	r2, r0, r4
   bd3a8:	e7db      	b.n	bd362 <__b2d+0x4a>
   bd3aa:	ea44 030c 	orr.w	r3, r4, ip
   bd3ae:	460a      	mov	r2, r1
   bd3b0:	e7d7      	b.n	bd362 <__b2d+0x4a>
   bd3b2:	bf00      	nop
   bd3b4:	3ff00000 	.word	0x3ff00000

000bd3b8 <__d2b>:
   bd3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd3bc:	4689      	mov	r9, r1
   bd3be:	2101      	movs	r1, #1
   bd3c0:	ec57 6b10 	vmov	r6, r7, d0
   bd3c4:	4690      	mov	r8, r2
   bd3c6:	f7ff fc09 	bl	bcbdc <_Balloc>
   bd3ca:	4604      	mov	r4, r0
   bd3cc:	b930      	cbnz	r0, bd3dc <__d2b+0x24>
   bd3ce:	4602      	mov	r2, r0
   bd3d0:	4b25      	ldr	r3, [pc, #148]	; (bd468 <__d2b+0xb0>)
   bd3d2:	4826      	ldr	r0, [pc, #152]	; (bd46c <__d2b+0xb4>)
   bd3d4:	f240 310a 	movw	r1, #778	; 0x30a
   bd3d8:	f7fa fc68 	bl	b7cac <__assert_func>
   bd3dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd3e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd3e4:	bb35      	cbnz	r5, bd434 <__d2b+0x7c>
   bd3e6:	2e00      	cmp	r6, #0
   bd3e8:	9301      	str	r3, [sp, #4]
   bd3ea:	d028      	beq.n	bd43e <__d2b+0x86>
   bd3ec:	4668      	mov	r0, sp
   bd3ee:	9600      	str	r6, [sp, #0]
   bd3f0:	f7ff fd06 	bl	bce00 <__lo0bits>
   bd3f4:	9900      	ldr	r1, [sp, #0]
   bd3f6:	b300      	cbz	r0, bd43a <__d2b+0x82>
   bd3f8:	9a01      	ldr	r2, [sp, #4]
   bd3fa:	f1c0 0320 	rsb	r3, r0, #32
   bd3fe:	fa02 f303 	lsl.w	r3, r2, r3
   bd402:	430b      	orrs	r3, r1
   bd404:	40c2      	lsrs	r2, r0
   bd406:	6163      	str	r3, [r4, #20]
   bd408:	9201      	str	r2, [sp, #4]
   bd40a:	9b01      	ldr	r3, [sp, #4]
   bd40c:	61a3      	str	r3, [r4, #24]
   bd40e:	2b00      	cmp	r3, #0
   bd410:	bf14      	ite	ne
   bd412:	2202      	movne	r2, #2
   bd414:	2201      	moveq	r2, #1
   bd416:	6122      	str	r2, [r4, #16]
   bd418:	b1d5      	cbz	r5, bd450 <__d2b+0x98>
   bd41a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd41e:	4405      	add	r5, r0
   bd420:	f8c9 5000 	str.w	r5, [r9]
   bd424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd428:	f8c8 0000 	str.w	r0, [r8]
   bd42c:	4620      	mov	r0, r4
   bd42e:	b003      	add	sp, #12
   bd430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd438:	e7d5      	b.n	bd3e6 <__d2b+0x2e>
   bd43a:	6161      	str	r1, [r4, #20]
   bd43c:	e7e5      	b.n	bd40a <__d2b+0x52>
   bd43e:	a801      	add	r0, sp, #4
   bd440:	f7ff fcde 	bl	bce00 <__lo0bits>
   bd444:	9b01      	ldr	r3, [sp, #4]
   bd446:	6163      	str	r3, [r4, #20]
   bd448:	2201      	movs	r2, #1
   bd44a:	6122      	str	r2, [r4, #16]
   bd44c:	3020      	adds	r0, #32
   bd44e:	e7e3      	b.n	bd418 <__d2b+0x60>
   bd450:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd454:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd458:	f8c9 0000 	str.w	r0, [r9]
   bd45c:	6918      	ldr	r0, [r3, #16]
   bd45e:	f7ff fcaf 	bl	bcdc0 <__hi0bits>
   bd462:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd466:	e7df      	b.n	bd428 <__d2b+0x70>
   bd468:	000be1f8 	.word	0x000be1f8
   bd46c:	000be2a4 	.word	0x000be2a4

000bd470 <__ratio>:
   bd470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd474:	4688      	mov	r8, r1
   bd476:	4669      	mov	r1, sp
   bd478:	4681      	mov	r9, r0
   bd47a:	f7ff ff4d 	bl	bd318 <__b2d>
   bd47e:	a901      	add	r1, sp, #4
   bd480:	4640      	mov	r0, r8
   bd482:	ec55 4b10 	vmov	r4, r5, d0
   bd486:	f7ff ff47 	bl	bd318 <__b2d>
   bd48a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd48e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd492:	eba3 0c02 	sub.w	ip, r3, r2
   bd496:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd49a:	1a9b      	subs	r3, r3, r2
   bd49c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd4a0:	ec51 0b10 	vmov	r0, r1, d0
   bd4a4:	2b00      	cmp	r3, #0
   bd4a6:	bfd6      	itet	le
   bd4a8:	460a      	movle	r2, r1
   bd4aa:	462a      	movgt	r2, r5
   bd4ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd4b0:	468b      	mov	fp, r1
   bd4b2:	462f      	mov	r7, r5
   bd4b4:	bfd4      	ite	le
   bd4b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd4ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd4be:	4620      	mov	r0, r4
   bd4c0:	ee10 2a10 	vmov	r2, s0
   bd4c4:	465b      	mov	r3, fp
   bd4c6:	4639      	mov	r1, r7
   bd4c8:	f7f7 f890 	bl	b45ec <__aeabi_ddiv>
   bd4cc:	ec41 0b10 	vmov	d0, r0, r1
   bd4d0:	b003      	add	sp, #12
   bd4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd4d6 <__copybits>:
   bd4d6:	3901      	subs	r1, #1
   bd4d8:	b570      	push	{r4, r5, r6, lr}
   bd4da:	1149      	asrs	r1, r1, #5
   bd4dc:	6914      	ldr	r4, [r2, #16]
   bd4de:	3101      	adds	r1, #1
   bd4e0:	f102 0314 	add.w	r3, r2, #20
   bd4e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd4e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd4ec:	1f05      	subs	r5, r0, #4
   bd4ee:	42a3      	cmp	r3, r4
   bd4f0:	d30c      	bcc.n	bd50c <__copybits+0x36>
   bd4f2:	1aa3      	subs	r3, r4, r2
   bd4f4:	3b11      	subs	r3, #17
   bd4f6:	f023 0303 	bic.w	r3, r3, #3
   bd4fa:	3211      	adds	r2, #17
   bd4fc:	42a2      	cmp	r2, r4
   bd4fe:	bf88      	it	hi
   bd500:	2300      	movhi	r3, #0
   bd502:	4418      	add	r0, r3
   bd504:	2300      	movs	r3, #0
   bd506:	4288      	cmp	r0, r1
   bd508:	d305      	bcc.n	bd516 <__copybits+0x40>
   bd50a:	bd70      	pop	{r4, r5, r6, pc}
   bd50c:	f853 6b04 	ldr.w	r6, [r3], #4
   bd510:	f845 6f04 	str.w	r6, [r5, #4]!
   bd514:	e7eb      	b.n	bd4ee <__copybits+0x18>
   bd516:	f840 3b04 	str.w	r3, [r0], #4
   bd51a:	e7f4      	b.n	bd506 <__copybits+0x30>

000bd51c <__any_on>:
   bd51c:	f100 0214 	add.w	r2, r0, #20
   bd520:	6900      	ldr	r0, [r0, #16]
   bd522:	114b      	asrs	r3, r1, #5
   bd524:	4298      	cmp	r0, r3
   bd526:	b510      	push	{r4, lr}
   bd528:	db11      	blt.n	bd54e <__any_on+0x32>
   bd52a:	dd0a      	ble.n	bd542 <__any_on+0x26>
   bd52c:	f011 011f 	ands.w	r1, r1, #31
   bd530:	d007      	beq.n	bd542 <__any_on+0x26>
   bd532:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd536:	fa24 f001 	lsr.w	r0, r4, r1
   bd53a:	fa00 f101 	lsl.w	r1, r0, r1
   bd53e:	428c      	cmp	r4, r1
   bd540:	d10b      	bne.n	bd55a <__any_on+0x3e>
   bd542:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd546:	4293      	cmp	r3, r2
   bd548:	d803      	bhi.n	bd552 <__any_on+0x36>
   bd54a:	2000      	movs	r0, #0
   bd54c:	bd10      	pop	{r4, pc}
   bd54e:	4603      	mov	r3, r0
   bd550:	e7f7      	b.n	bd542 <__any_on+0x26>
   bd552:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd556:	2900      	cmp	r1, #0
   bd558:	d0f5      	beq.n	bd546 <__any_on+0x2a>
   bd55a:	2001      	movs	r0, #1
   bd55c:	e7f6      	b.n	bd54c <__any_on+0x30>

000bd55e <_calloc_r>:
   bd55e:	b513      	push	{r0, r1, r4, lr}
   bd560:	434a      	muls	r2, r1
   bd562:	4611      	mov	r1, r2
   bd564:	9201      	str	r2, [sp, #4]
   bd566:	f7fa fb91 	bl	b7c8c <_malloc_r>
   bd56a:	4604      	mov	r4, r0
   bd56c:	b118      	cbz	r0, bd576 <_calloc_r+0x18>
   bd56e:	9a01      	ldr	r2, [sp, #4]
   bd570:	2100      	movs	r1, #0
   bd572:	f7fd ffb7 	bl	bb4e4 <memset>
   bd576:	4620      	mov	r0, r4
   bd578:	b002      	add	sp, #8
   bd57a:	bd10      	pop	{r4, pc}
   bd57c:	0000      	movs	r0, r0
	...

000bd580 <nan>:
   bd580:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd588 <nan+0x8>
   bd584:	4770      	bx	lr
   bd586:	bf00      	nop
   bd588:	00000000 	.word	0x00000000
   bd58c:	7ff80000 	.word	0x7ff80000

000bd590 <nanf>:
   bd590:	ed9f 0a01 	vldr	s0, [pc, #4]	; bd598 <nanf+0x8>
   bd594:	4770      	bx	lr
   bd596:	bf00      	nop
   bd598:	7fc00000 	.word	0x7fc00000

000bd59c <__ascii_wctomb>:
   bd59c:	b149      	cbz	r1, bd5b2 <__ascii_wctomb+0x16>
   bd59e:	2aff      	cmp	r2, #255	; 0xff
   bd5a0:	bf85      	ittet	hi
   bd5a2:	238a      	movhi	r3, #138	; 0x8a
   bd5a4:	6003      	strhi	r3, [r0, #0]
   bd5a6:	700a      	strbls	r2, [r1, #0]
   bd5a8:	f04f 30ff 	movhi.w	r0, #4294967295
   bd5ac:	bf98      	it	ls
   bd5ae:	2001      	movls	r0, #1
   bd5b0:	4770      	bx	lr
   bd5b2:	4608      	mov	r0, r1
   bd5b4:	4770      	bx	lr

000bd5b6 <link_code_end>:
	...

000bd5b8 <link_const_data_start>:
   bd5b8:	00000000 	.word	0x00000000
   bd5bc:	34fb0000 	.word	0x34fb0000
   bd5c0:	00805f9b 	.word	0x00805f9b
   bd5c4:	10008000 	.word	0x10008000
	...

000bd5d0 <dynalib_user>:
   bd5d0:	000b4bc5 000b4c01 000b4c29 000b4c2d     .K...L..)L..-L..
   bd5e0:	00000000 75002222 78343025 6c756e00     ...."".u%04x.nul
   bd5f0:	7274006c 25006575 35312e31 6c250067     l.true.%1.15g.%l
   bd600:	31250067 6737312e bfbbef00 69615700     g.%1.17g.....Wai
   bd610:	676e6974 726f6620 454c4220 65696c63     ting for BLEclie
   bd620:	6320746e 656e6e6f 6f697463 2e2e2e6e     nt connection...
   bd630:	77227b00 22747461 7d64253a 70227b00     .{"watt":%d}.{"p
   bd640:	65636972 6d6f7473 6f72726f 5b3a2277     ricestomorrow":[
   bd650:	2c322c31 2c342c33 2c362c35 2c382c37     1,2,3,4,5,6,7,8,
   bd660:	30312c39 2c31312c 312c3231 34312c33     9,10,11,12,13,14
   bd670:	2c35312c 312c3631 38312c37 2c39312c     ,15,16,17,18,19,
   bd680:	322c3032 32322c31 2c33322c 7d5d3432     20,21,22,23,24]}
   bd690:	57227b00 745f7248 7961646f 315b3a22     .{"WHr_today":[1
   bd6a0:	332c322c 352c342c 372c362c 392c382c     ,2,3,4,5,6,7,8,9
   bd6b0:	2c30312c 312c3131 33312c32 2c34312c     ,10,11,12,13,14,
   bd6c0:	312c3531 37312c36 2c38312c 322c3931     15,16,17,18,19,2
   bd6d0:	31322c30 2c32322c 322c3332 007d5d34     0,21,22,23,24]}.
   bd6e0:	7922207b 22726165 2522203a 202c2264     { "year": "%d", 
   bd6f0:	6f6d2200 2268746e 2522203a 22643230     ."month": "%02d"
   bd700:	2200202c 22796164 2522203a 22643230     , ."day": "%02d"
   bd710:	2200202c 72756f68 22203a22 64323025     , ."hour": "%02d
   bd720:	007d2022 63697270 6f747365 00796164     " }.pricestoday.
   bd730:	63697270 6f747365 5f796164 006b7361     pricestoday_ask.
   bd740:	74746157 776f6e20 4b4b4400 646f5420     Watt now.DKK Tod
   bd750:	7b007961 69727022 74736563 7961646f     ay.{"pricestoday
   bd760:	005b3a22 007d5d30 65646e75 656e6966     ":[.0]}.undefine
   bd770:	61500064 6e697372 6f742067 73796164     d.Parsing todays
   bd780:	69727020 20736563 75706e69 61662074      prices input fa
   bd790:	64656c69 64250021 6425002c 64007d5d     iled!.%d,.%d]}.d
   bd7a0:	6f702e6b 6e2e6c6f 6f2e7074 62006772     k.pool.ntp.org.b
   bd7b0:	30353234 2d343034 62346266 3437342d     4250404-fb4b-474
   bd7c0:	32622d36 392d3062 65306633 32313136     6-b2b0-93f0e6112
   bd7d0:	00366332 35323462 33303430 3462662d     2c6.b4250403-fb4
   bd7e0:	37342d62 622d3634 2d306232 30663339     b-4746-b2b0-93f0
   bd7f0:	31313665 36633232 32346200 30343035     e61122c6.b425040
   bd800:	62662d32 342d6234 2d363437 30623262     2-fb4b-4746-b2b0
   bd810:	6633392d 31366530 63323231 34620036     -93f0e61122c6.b4
   bd820:	34303532 662d3130 2d623462 36343734     250401-fb4b-4746
   bd830:	6232622d 33392d30 36653066 32323131     -b2b0-93f0e61122
   bd840:	33003663 31613166 2d363935 66376565     c6.3f1a1596-ee7f
   bd850:	6232342d 34382d64 622d3164 39326131     -42bd-84d1-b1a29
   bd860:	32386634 00666365 6f677241 004d506e     4f82ecf.ArgonPM.
   bd870:	69736162 74735f63 676e6972 70613a3a     basic_string::ap
   bd880:	646e6570 61642200 77745f79 203a226f     pend."day_two": 
   bd890:	32302522 202c2264 706c6500 65736972     "%02d", .elprise
   bd8a0:	61620072 5f636973 69727473 3a3a676e     r.basic_string::
   bd8b0:	635f4d5f 74736e6f 74637572 6c756e20     _M_construct nul
   bd8c0:	6f6e206c 61762074 0064696c 5f746567     l not valid.get_
   bd8d0:	63697270 4e007365 7270206f 73656369     prices.No prices
   bd8e0:	74657920 6f742000 32302520 25202c64      yet. to %02d, %
   bd8f0:	00643230 206f7420 202c3432 64323025     02d. to 24, %02d
   bd900:	6f742000 32302520 6f4c0064 72502077     . to %02d.Low Pr
   bd910:	20656369 65746e49 6c617672 76003a73     ice Intervals:.v
   bd920:	6f746365 5f3a3a72 65725f4d 6f6c6c61     ector::_M_reallo
   bd930:	6e695f63 74726573 73654d00 65676173     c_insert.Message
   bd940:	74616420 73692061 2074276e 64616572      data isn't read
   bd950:	65792079 4d002e74 61737365 61206567     y yet..Message a
   bd960:	6d657373 64656c62 7473002e 7300696f     ssembled..stoi.s
   bd970:	00666f74 7373654d 20656761 61746144     tof.Message Data
   bd980:	63655220 65766965 00002e64               Received...

000bd98c <_ZTV5Timer>:
	...
   bd994:	000b63d5 000b6419 000b6241              .c...d..Ab..

000bd9a0 <_ZTV9JSONClass>:
	...
   bd9a8:	000b7329 000b732b 6c6f6f62 006e6165     )s..+s..boolean.
   bd9b8:	626d756e 61007265 79617272 6a626f00     number.array.obj
   bd9c8:	00746365 6e6b6e75 006e776f              ect.unknown.

000bd9d4 <_ZTV7JSONVar>:
	...
   bd9dc:	000b7395 000b7365 000b7381              .s..es...s..

000bd9e8 <_ZTVN5spark13EthernetClassE>:
	...
   bd9f0:	000b7d3b 000b7d31 000b7d27 000b7d1d     ;}..1}..'}...}..
   bda00:	000b7d11 000b7d05 000ba839 000ba841     .}...}..9...A...
   bda10:	000b7cf9 000b7cf1 000b7ce7 000b7cdd     .|...|...|...|..
   bda20:	000ba871                                q...

000bda24 <_ZTV3UDP>:
	...
   bda2c:	000b83a9 000b83cd 000b7e69 000b7f91     ........i~......
   bda3c:	000b7e1f 000b7e81 000b7e9f 000b7eb9     .~...~...~...~..
   bda4c:	000b7edd 000b7f75 000b824f 000b8015     .~..u...O.......
   bda5c:	000b816d 000b7e07 000b8339 000b80f5     m....~..9.......
   bda6c:	000b7e29 000b8367 000b7fbb 000b7e15     )~..g........~..
   bda7c:	000b804d 000b7e1b 000b7ebb fffffff0     M....~...~......
   bda8c:	00000000 000b7ed5 65737341 6f697472     .....~..Assertio
   bda9c:	6961466e 6572756c 6c616620 77006573     nFailure false.w
   bdaac:	6e697269 6c622e67 74530065 20747261     iring.ble.Start 
   bdabc:	63736964 7265766f 20676e69 76726573     discovering serv
   bdacc:	73656369 7341002e 74726573 466e6f69     ices..AssertionF
   bdadc:	756c6961 68206572 625f6c61 735f656c     ailure hal_ble_s
   bdaec:	6b636174 696e695f 756e2874 74706c6c     tack_init(nullpt
   bdafc:	3d202972 5953203d 4d455453 5252455f     r) == SYSTEM_ERR
   bdb0c:	4e5f524f 00454e4f 72656550 76656420     OR_NONE.Peer dev
   bdb1c:	20656369 6d207369 69737369 0021676e     ice is missing!.
   bdb2c:	6c696146 74206465 7061206f 646e6570     Failed to append
   bdb3c:	65657020 65432072 6172746e 6564206c      peer Central de
   bdb4c:	65636976 6f43002e 63656e6e 20646574     vice..Connected 
   bdb5c:	43207962 72746e65 64206c61 63697665     by Central devic
   bdb6c:	44002e65 6f637369 63656e6e 20646574     e..Disconnected 
   bdb7c:	72207962 746f6d65 65642065 65636976     by remote device
   bdb8c:	7544002e 63696c70 64657461 61686320     ..Duplicated cha
   bdb9c:	74636172 73697265 20636974 6e6e6163     racteristic cann
   bdbac:	6220746f 64612065 2e646564 69614600     ot be added..Fai
   bdbbc:	2064656c 61206f74 6e657070 6f6c2064     led to append lo
   bdbcc:	206c6163 72616863 65746361 74736972     cal characterist
   bdbdc:	002e6369                                ic..

000bdbe0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdbe8:	000b862f 000b8691 000b8765 000b86bb     /.......e.......
   bdbf8:	000b8631                                1...

000bdbfc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdc04:	000b862b 000b869f 000b862d 000b86c1     +.......-.......
   bdc14:	000b8651                                Q...

000bdc18 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdc20:	000b8629 000b86ad 000b8f01 000b86c7     )...............
   bdc30:	000b8671                                q...

000bdc34 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bdc3c <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bdc3c:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bdc4c <_ZN8particle7BleUuid9BASE_UUIDE>:
   bdc4c:	5f9b34fb 80000080 00001000 00000000     .4._............
   bdc5c:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bdc6c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bdc7c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdc84:	000b9e0d 000b9e13 000b9e51 000b9e21     ........Q...!...
   bdc94:	000b9e0f                                ....

000bdc98 <_ZTV9IPAddress>:
	...
   bdca0:	000ba369 000ba359 000ba35b              i...Y...[...

000bdcac <_ZTV9USBSerial>:
	...
   bdcb4:	000ba47b 000ba4e3 000ba4b9 000b9975     {...........u...
   bdcc4:	000ba4ab 000ba47d 000ba48d 000ba4dd     ....}...........
   bdcd4:	000ba49d 000ba475                       ....u...

000bdcdc <_ZTV11USARTSerial>:
	...
   bdce4:	000ba635 000ba6a1 000ba679 000b9975     5.......y...u...
   bdcf4:	000ba649 000ba665 000ba657 000ba673     I...e...W...s...
   bdd04:	000ba637 000ba63b                       7...;...

000bdd0c <_ZTV7TwoWire>:
	...
   bdd14:	000ba701 000ba74b 000ba723 000ba703     ....K...#.......
   bdd24:	000ba72b 000ba733 000ba73b 000ba743     +...3...;...C...

000bdd34 <_ZTVN5spark9WiFiClassE>:
	...
   bdd3c:	000ba7db 000ba7d1 000ba7c7 000ba77d     ............}...
   bdd4c:	000ba7bb 000ba7af 000ba839 000ba841     ........9...A...
   bdd5c:	000ba7a3 000ba79b 000ba791 000ba787     ................
   bdd6c:	000ba871                                q...

000bdd70 <_ZTVN5spark12NetworkClassE>:
	...
   bdd78:	000ba7f9 000ba803 000ba80d 000ba817     ................
   bdd88:	000ba821 000ba82d 000ba839 000ba841     !...-...9...A...
   bdd98:	000ba849 000ba855 000ba85d 000ba867     I...U...]...g...
   bdda8:	000ba871                                q...

000bddac <_ZSt7nothrow>:
	...

000bddad <_ZTSSt19_Sp_make_shared_tag>:
   bddad:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bddbd:	5f646572 00676174                        red_tag....

000bddc8 <_ZTISt19_Sp_make_shared_tag>:
   bddc8:	000bdf14 000bddad 20746f6e 756f6e65     ........not enou
   bddd8:	73206867 65636170 726f6620 726f6620     gh space for for
   bdde8:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   bddf8:	7361656c 75732065 74696d62 6c756620     lease submit ful
   bde08:	7562206c 65722067 74726f70 20746120     l bug report at 
   bde18:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   bde28:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   bde38:	32313000 36353433 00393837 69736162     .0123456789.basi
   bde48:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   bde58:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
   bde68:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
   bde78:	2d736968 7a69733e 20292865 69687728     his->size() (whi
   bde88:	69206863 7a252073 62002975 63697361     ch is %zu).basic
   bde98:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
   bdea8:	00656361 69736162 74735f63 676e6972     ace.basic_string
   bdeb8:	61623a3a 5f636973 69727473 6200676e     ::basic_string.b
   bdec8:	63697361 7274735f 3a676e69 6275733a     asic_string::sub
   bded8:	00727473                                str.

000bdedc <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdedc:	000bdf74 000bdee8 000bdf98              t...........

000bdee8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdee8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bdef8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bdf08:	00000045                                E...

000bdf0c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bdf0c:	00000000 000bdedc 000bb245 000bb259     ........E...Y...
   bdf1c:	000bb3ed 000bb3ed 000bb2c3 000bb205     ................
   bdf2c:	000bb2ab 000bb26d 000bb237              ....m...7...

000bdf38 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bdf38:	000bdf74 000bdf44 000bdedc              t...D.......

000bdf44 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bdf44:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bdf54:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bdf64:	456f666e 00000000                       nfoE....

000bdf6c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bdf6c:	00000000 000bdf38 000bb2ed 000bb301     ....8...........
   bdf7c:	000bb3ed 000bb3ed 000bb2c3 000bb205     ................
   bdf8c:	000bb3c1 000bb34d 000bb315              ....M.......

000bdf98 <_ZTISt9type_info>:
   bdf98:	000bdf14 000bdfa0                       ........

000bdfa0 <_ZTSSt9type_info>:
   bdfa0:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   bdfb0:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   bdfc0:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000bdfcd <day_name.1>:
   bdfcd:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bdfdd:	61536972                                 riSat

000bdfe2 <mon_name.0>:
   bdfe2:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bdff2:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   be002:	63654476                                vDec

000be006 <_ctype_>:
   be006:	20202000 20202020 28282020 20282828     .         ((((( 
   be016:	20202020 20202020 20202020 20202020                     
   be026:	10108820 10101010 10101010 10101010      ...............
   be036:	04040410 04040404 10040404 10101010     ................
   be046:	41411010 41414141 01010101 01010101     ..AAAAAA........
   be056:	01010101 01010101 01010101 10101010     ................
   be066:	42421010 42424242 02020202 02020202     ..BBBBBB........
   be076:	02020202 02020202 02020202 10101010     ................
   be086:	00000020 00000000 00000000 00000000      ...............
	...
   be106:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
   be116:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
   be126:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   be136:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   be146:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   be156:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   be166:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   be176:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   be186:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
   be196:	632e646e 00666e00 74696e69               nd.c.nf.inity.

000be1a4 <fpi.1>:
   be1a4:	00000035 fffffbce 000003cb 00000001     5...............
   be1b4:	00000000                                ....

000be1b8 <fpinan.0>:
   be1b8:	00000034 fffffbce 000003cb 00000001     4...............
	...

000be1d0 <tinytens>:
   be1d0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   be1e0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   be1f0:	64ac6f43 11680628 6c6c6142 7320636f     Co.d(.h.Balloc s
   be200:	65636375 64656465 6e6d2f00 6f772f74     ucceeded./mnt/wo
   be210:	70736b72 2f656361 6b726f77 63617073     rkspace/workspac
   be220:	43472f65 30312d43 7069702d 6e696c65     e/GCC-10-pipelin
   be230:	656a2f65 6e696b6e 43472d73 30312d43     e/jenkins-GCC-10
   be240:	7069702d 6e696c65 38342d65 3230325f     -pipeline-48_202
   be250:	32313130 36315f34 38313630 31343630     01124_1606180641
   be260:	6372732f 77656e2f 2f62696c 6c77656e     /src/newlib/newl
   be270:	6c2f6269 2f636269 6c647473 672f6269     ib/libc/stdlib/g
   be280:	616f7464 7465672d 2e786568 00000063     dtoa-gethex.c...

000be290 <_C_numeric_locale>:
   be290:	000bd62f 000bdfcc 2003e288 4f500043     /.......... C.PO
   be2a0:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   be2b0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   be2c0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   be2d0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   be2e0:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   be2f0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   be300:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   be310:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   be320:	00000063 00000000                       c.......

000be328 <__mprec_bigtens>:
   be328:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   be338:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   be348:	7f73bf3c 75154fdd                       <.s..O.u

000be350 <__mprec_tens>:
   be350:	00000000 3ff00000 00000000 40240000     .......?......$@
   be360:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   be370:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   be380:	00000000 412e8480 00000000 416312d0     .......A......cA
   be390:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   be3a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   be3b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   be3c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   be3d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   be3e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   be3f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   be400:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   be410:	79d99db4 44ea7843                       ...yCx.D

000be418 <p05.0>:
   be418:	00000005 00000019 0000007d              ........}...

000be424 <link_const_data_end>:
   be424:	000b5f01 	.word	0x000b5f01
   be428:	000b6e6d 	.word	0x000b6e6d
   be42c:	000b7355 	.word	0x000b7355
   be430:	000b7599 	.word	0x000b7599
   be434:	000b7d45 	.word	0x000b7d45
   be438:	000b7d6d 	.word	0x000b7d6d
   be43c:	000b9965 	.word	0x000b9965
   be440:	000b9a3d 	.word	0x000b9a3d
   be444:	000b9cad 	.word	0x000b9cad
   be448:	000b9cc9 	.word	0x000b9cc9
   be44c:	000ba7e5 	.word	0x000ba7e5
   be450:	000ba949 	.word	0x000ba949
