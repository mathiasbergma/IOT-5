
c:/Users/mikeh/vscode-particle/Power_monitor/power_monitor/target/5.0.1/argon/power_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000821c  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc23c  000bc23c  0000c23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001f4  2003e2f0  000bc260  0000e2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000030c  2003e4e8  2003e4e8  0001e4e8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bc454  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc458  000bc458  0001c458  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bc45e  000bc45e  0001c45e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc482  000bc482  0001c482  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001570e0  00000000  00000000  0001c486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015008  00000000  00000000  00173566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004029c  00000000  00000000  0018856e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003080  00000000  00000000  001c880a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bb60  00000000  00000000  001cb88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b370  00000000  00000000  001d73ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00044379  00000000  00000000  0021275a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00154786  00000000  00000000  00256ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a6b4  00000000  00000000  003ab25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2uiz>:
   b48f8:	004a      	lsls	r2, r1, #1
   b48fa:	d211      	bcs.n	b4920 <__aeabi_d2uiz+0x28>
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d211      	bcs.n	b4926 <__aeabi_d2uiz+0x2e>
   b4902:	d50d      	bpl.n	b4920 <__aeabi_d2uiz+0x28>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d40e      	bmi.n	b492c <__aeabi_d2uiz+0x34>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	4770      	bx	lr
   b4920:	f04f 0000 	mov.w	r0, #0
   b4924:	4770      	bx	lr
   b4926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492a:	d102      	bne.n	b4932 <__aeabi_d2uiz+0x3a>
   b492c:	f04f 30ff 	mov.w	r0, #4294967295
   b4930:	4770      	bx	lr
   b4932:	f04f 0000 	mov.w	r0, #0
   b4936:	4770      	bx	lr

000b4938 <__aeabi_d2f>:
   b4938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b493c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4940:	bf24      	itt	cs
   b4942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b494a:	d90d      	bls.n	b4968 <__aeabi_d2f+0x30>
   b494c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b495c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4960:	bf08      	it	eq
   b4962:	f020 0001 	biceq.w	r0, r0, #1
   b4966:	4770      	bx	lr
   b4968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b496c:	d121      	bne.n	b49b2 <__aeabi_d2f+0x7a>
   b496e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4972:	bfbc      	itt	lt
   b4974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4978:	4770      	bxlt	lr
   b497a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b497e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4982:	f1c2 0218 	rsb	r2, r2, #24
   b4986:	f1c2 0c20 	rsb	ip, r2, #32
   b498a:	fa10 f30c 	lsls.w	r3, r0, ip
   b498e:	fa20 f002 	lsr.w	r0, r0, r2
   b4992:	bf18      	it	ne
   b4994:	f040 0001 	orrne.w	r0, r0, #1
   b4998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b499c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49a4:	ea40 000c 	orr.w	r0, r0, ip
   b49a8:	fa23 f302 	lsr.w	r3, r3, r2
   b49ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49b0:	e7cc      	b.n	b494c <__aeabi_d2f+0x14>
   b49b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49b6:	d107      	bne.n	b49c8 <__aeabi_d2f+0x90>
   b49b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49bc:	bf1e      	ittt	ne
   b49be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49c6:	4770      	bxne	lr
   b49c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49d4:	4770      	bx	lr
   b49d6:	bf00      	nop

000b49d8 <__aeabi_d2ulz>:
   b49d8:	b5d0      	push	{r4, r6, r7, lr}
   b49da:	4b0c      	ldr	r3, [pc, #48]	; (b4a0c <__aeabi_d2ulz+0x34>)
   b49dc:	2200      	movs	r2, #0
   b49de:	4606      	mov	r6, r0
   b49e0:	460f      	mov	r7, r1
   b49e2:	f7ff fcd9 	bl	b4398 <__aeabi_dmul>
   b49e6:	f7ff ff87 	bl	b48f8 <__aeabi_d2uiz>
   b49ea:	4604      	mov	r4, r0
   b49ec:	f7ff fc5a 	bl	b42a4 <__aeabi_ui2d>
   b49f0:	4b07      	ldr	r3, [pc, #28]	; (b4a10 <__aeabi_d2ulz+0x38>)
   b49f2:	2200      	movs	r2, #0
   b49f4:	f7ff fcd0 	bl	b4398 <__aeabi_dmul>
   b49f8:	4602      	mov	r2, r0
   b49fa:	460b      	mov	r3, r1
   b49fc:	4630      	mov	r0, r6
   b49fe:	4639      	mov	r1, r7
   b4a00:	f7ff fb12 	bl	b4028 <__aeabi_dsub>
   b4a04:	f7ff ff78 	bl	b48f8 <__aeabi_d2uiz>
   b4a08:	4621      	mov	r1, r4
   b4a0a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a0c:	3df00000 	.word	0x3df00000
   b4a10:	41f00000 	.word	0x41f00000
	...

000b4a20 <memchr>:
   b4a20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a24:	2a10      	cmp	r2, #16
   b4a26:	db2b      	blt.n	b4a80 <memchr+0x60>
   b4a28:	f010 0f07 	tst.w	r0, #7
   b4a2c:	d008      	beq.n	b4a40 <memchr+0x20>
   b4a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a32:	3a01      	subs	r2, #1
   b4a34:	428b      	cmp	r3, r1
   b4a36:	d02d      	beq.n	b4a94 <memchr+0x74>
   b4a38:	f010 0f07 	tst.w	r0, #7
   b4a3c:	b342      	cbz	r2, b4a90 <memchr+0x70>
   b4a3e:	d1f6      	bne.n	b4a2e <memchr+0xe>
   b4a40:	b4f0      	push	{r4, r5, r6, r7}
   b4a42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4a46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b4a4a:	f022 0407 	bic.w	r4, r2, #7
   b4a4e:	f07f 0700 	mvns.w	r7, #0
   b4a52:	2300      	movs	r3, #0
   b4a54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4a58:	3c08      	subs	r4, #8
   b4a5a:	ea85 0501 	eor.w	r5, r5, r1
   b4a5e:	ea86 0601 	eor.w	r6, r6, r1
   b4a62:	fa85 f547 	uadd8	r5, r5, r7
   b4a66:	faa3 f587 	sel	r5, r3, r7
   b4a6a:	fa86 f647 	uadd8	r6, r6, r7
   b4a6e:	faa5 f687 	sel	r6, r5, r7
   b4a72:	b98e      	cbnz	r6, b4a98 <memchr+0x78>
   b4a74:	d1ee      	bne.n	b4a54 <memchr+0x34>
   b4a76:	bcf0      	pop	{r4, r5, r6, r7}
   b4a78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a7c:	f002 0207 	and.w	r2, r2, #7
   b4a80:	b132      	cbz	r2, b4a90 <memchr+0x70>
   b4a82:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a86:	3a01      	subs	r2, #1
   b4a88:	ea83 0301 	eor.w	r3, r3, r1
   b4a8c:	b113      	cbz	r3, b4a94 <memchr+0x74>
   b4a8e:	d1f8      	bne.n	b4a82 <memchr+0x62>
   b4a90:	2000      	movs	r0, #0
   b4a92:	4770      	bx	lr
   b4a94:	3801      	subs	r0, #1
   b4a96:	4770      	bx	lr
   b4a98:	2d00      	cmp	r5, #0
   b4a9a:	bf06      	itte	eq
   b4a9c:	4635      	moveq	r5, r6
   b4a9e:	3803      	subeq	r0, #3
   b4aa0:	3807      	subne	r0, #7
   b4aa2:	f015 0f01 	tst.w	r5, #1
   b4aa6:	d107      	bne.n	b4ab8 <memchr+0x98>
   b4aa8:	3001      	adds	r0, #1
   b4aaa:	f415 7f80 	tst.w	r5, #256	; 0x100
   b4aae:	bf02      	ittt	eq
   b4ab0:	3001      	addeq	r0, #1
   b4ab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b4ab6:	3001      	addeq	r0, #1
   b4ab8:	bcf0      	pop	{r4, r5, r6, r7}
   b4aba:	3801      	subs	r0, #1
   b4abc:	4770      	bx	lr
   b4abe:	bf00      	nop

000b4ac0 <strcmp>:
   b4ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ac8:	2a01      	cmp	r2, #1
   b4aca:	bf28      	it	cs
   b4acc:	429a      	cmpcs	r2, r3
   b4ace:	d0f7      	beq.n	b4ac0 <strcmp>
   b4ad0:	1ad0      	subs	r0, r2, r3
   b4ad2:	4770      	bx	lr

000b4ad4 <strlen>:
   b4ad4:	4603      	mov	r3, r0
   b4ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4ada:	2a00      	cmp	r2, #0
   b4adc:	d1fb      	bne.n	b4ad6 <strlen+0x2>
   b4ade:	1a18      	subs	r0, r3, r0
   b4ae0:	3801      	subs	r0, #1
   b4ae2:	4770      	bx	lr

000b4ae4 <__aeabi_d2lz>:
   b4ae4:	b538      	push	{r3, r4, r5, lr}
   b4ae6:	2200      	movs	r2, #0
   b4ae8:	2300      	movs	r3, #0
   b4aea:	4604      	mov	r4, r0
   b4aec:	460d      	mov	r5, r1
   b4aee:	f7ff fec5 	bl	b487c <__aeabi_dcmplt>
   b4af2:	b928      	cbnz	r0, b4b00 <__aeabi_d2lz+0x1c>
   b4af4:	4620      	mov	r0, r4
   b4af6:	4629      	mov	r1, r5
   b4af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4afc:	f7ff bf6c 	b.w	b49d8 <__aeabi_d2ulz>
   b4b00:	4620      	mov	r0, r4
   b4b02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4b06:	f7ff ff67 	bl	b49d8 <__aeabi_d2ulz>
   b4b0a:	4240      	negs	r0, r0
   b4b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b10:	bd38      	pop	{r3, r4, r5, pc}
   b4b12:	bf00      	nop

000b4b14 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b14:	4809      	ldr	r0, [pc, #36]	; (b4b3c <module_user_pre_init+0x28>)
   b4b16:	490a      	ldr	r1, [pc, #40]	; (b4b40 <module_user_pre_init+0x2c>)
   b4b18:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4b1a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b1c:	d005      	beq.n	b4b2a <module_user_pre_init+0x16>
   b4b1e:	4a09      	ldr	r2, [pc, #36]	; (b4b44 <module_user_pre_init+0x30>)
   b4b20:	4282      	cmp	r2, r0
   b4b22:	d002      	beq.n	b4b2a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4b24:	1a12      	subs	r2, r2, r0
   b4b26:	f004 fc3d 	bl	b93a4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4b2a:	4807      	ldr	r0, [pc, #28]	; (b4b48 <module_user_pre_init+0x34>)
   b4b2c:	4a07      	ldr	r2, [pc, #28]	; (b4b4c <module_user_pre_init+0x38>)
   b4b2e:	2100      	movs	r1, #0
   b4b30:	1a12      	subs	r2, r2, r0
   b4b32:	f004 fc5f 	bl	b93f4 <memset>
    return &link_global_data_start;
}
   b4b36:	4801      	ldr	r0, [pc, #4]	; (b4b3c <module_user_pre_init+0x28>)
   b4b38:	bd08      	pop	{r3, pc}
   b4b3a:	bf00      	nop
   b4b3c:	2003e2f0 	.word	0x2003e2f0
   b4b40:	000bc260 	.word	0x000bc260
   b4b44:	2003e4e4 	.word	0x2003e4e4
   b4b48:	2003e4e8 	.word	0x2003e4e8
   b4b4c:	2003e7f4 	.word	0x2003e7f4

000b4b50 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4b50:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b52:	4e07      	ldr	r6, [pc, #28]	; (b4b70 <module_user_init+0x20>)
   b4b54:	4c07      	ldr	r4, [pc, #28]	; (b4b74 <module_user_init+0x24>)
    module_user_init_hook();
   b4b56:	f003 f8c5 	bl	b7ce4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b5a:	1ba4      	subs	r4, r4, r6
   b4b5c:	08a4      	lsrs	r4, r4, #2
   b4b5e:	2500      	movs	r5, #0
   b4b60:	42ac      	cmp	r4, r5
   b4b62:	d100      	bne.n	b4b66 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b64:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b66:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b6a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b6c:	3501      	adds	r5, #1
   b4b6e:	e7f7      	b.n	b4b60 <module_user_init+0x10>
   b4b70:	000bc214 	.word	0x000bc214
   b4b74:	000bc23c 	.word	0x000bc23c

000b4b78 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b78:	f000 b896 	b.w	b4ca8 <setup>

000b4b7c <module_user_loop>:
}

void module_user_loop() {
   b4b7c:	b508      	push	{r3, lr}
    loop();
   b4b7e:	f000 f8ab 	bl	b4cd8 <loop>
    _post_loop();
}
   b4b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b86:	f003 b865 	b.w	b7c54 <_post_loop>

000b4b8a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b8a:	f001 bb55 	b.w	b6238 <malloc>

000b4b8e <_Znaj>:
   b4b8e:	f001 bb53 	b.w	b6238 <malloc>

000b4b92 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4b92:	f001 bb59 	b.w	b6248 <free>

000b4b96 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b96:	f001 bb57 	b.w	b6248 <free>

000b4b9a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b9a:	7800      	ldrb	r0, [r0, #0]
   b4b9c:	fab0 f080 	clz	r0, r0
   b4ba0:	0940      	lsrs	r0, r0, #5
   b4ba2:	4770      	bx	lr

000b4ba4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ba4:	2301      	movs	r3, #1
   b4ba6:	7003      	strb	r3, [r0, #0]
   b4ba8:	4770      	bx	lr
	...

000b4bac <_Z9ble_setupv>:
*/




void ble_setup(void){
   b4bac:	b570      	push	{r4, r5, r6, lr}
   b4bae:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b4bb0:	f002 f86a 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bb4:	2102      	movs	r1, #2
   b4bb6:	f002 f8b8 	bl	b6d2a <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4bba:	f002 f865 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bbe:	f002 f8ad 	bl	b6d1c <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4bc2:	f002 f861 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bc6:	4a31      	ldr	r2, [pc, #196]	; (b4c8c <_Z9ble_setupv+0xe0>)
   b4bc8:	4c31      	ldr	r4, [pc, #196]	; (b4c90 <_Z9ble_setupv+0xe4>)
   b4bca:	4601      	mov	r1, r0
   b4bcc:	a80b      	add	r0, sp, #44	; 0x2c
   b4bce:	f002 fda3 	bl	b7718 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4bd2:	a80b      	add	r0, sp, #44	; 0x2c
   b4bd4:	f002 f94b 	bl	b6e6e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4bd8:	f002 f856 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bdc:	4a2d      	ldr	r2, [pc, #180]	; (b4c94 <_Z9ble_setupv+0xe8>)
   b4bde:	4601      	mov	r1, r0
   b4be0:	a80b      	add	r0, sp, #44	; 0x2c
   b4be2:	f002 fd99 	bl	b7718 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4be6:	a80b      	add	r0, sp, #44	; 0x2c
   b4be8:	f002 f941 	bl	b6e6e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4bec:	f002 f84c 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bf0:	4a29      	ldr	r2, [pc, #164]	; (b4c98 <_Z9ble_setupv+0xec>)
   b4bf2:	4601      	mov	r1, r0
   b4bf4:	a80b      	add	r0, sp, #44	; 0x2c
   b4bf6:	f002 fd8f 	bl	b7718 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4bfa:	a80b      	add	r0, sp, #44	; 0x2c
   b4bfc:	f002 f937 	bl	b6e6e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b4c00:	f002 f842 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c04:	4a25      	ldr	r2, [pc, #148]	; (b4c9c <_Z9ble_setupv+0xf0>)
   b4c06:	4601      	mov	r1, r0
   b4c08:	a80b      	add	r0, sp, #44	; 0x2c
   b4c0a:	f002 fd85 	bl	b7718 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4c0e:	a80b      	add	r0, sp, #44	; 0x2c
   b4c10:	f002 f92d 	bl	b6e6e <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b4c14:	a803      	add	r0, sp, #12
   b4c16:	f002 fa60 	bl	b70da <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b4c1a:	4b21      	ldr	r3, [pc, #132]	; (b4ca0 <_Z9ble_setupv+0xf4>)
   b4c1c:	a803      	add	r0, sp, #12
   b4c1e:	6819      	ldr	r1, [r3, #0]
   b4c20:	f002 fa6e 	bl	b7100 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4c26:	ad06      	add	r5, sp, #24
   b4c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4c2a:	ad06      	add	r5, sp, #24
   b4c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c2e:	6826      	ldr	r6, [r4, #0]
   b4c30:	ac0b      	add	r4, sp, #44	; 0x2c
   b4c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c34:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4c36:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c38:	f001 fe28 	bl	b688c <_ZNK8particle7BleUuid4typeEv>
   b4c3c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4c3e:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c40:	b9dc      	cbnz	r4, b4c7a <_Z9ble_setupv+0xce>
            uint16_t uuid16 = tempUUID.shorted();
   b4c42:	f001 fe3f 	bl	b68c4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4c46:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4c48:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4c4c:	2302      	movs	r3, #2
   b4c4e:	f10d 020a 	add.w	r2, sp, #10
   b4c52:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4c54:	a803      	add	r0, sp, #12
   b4c56:	f002 fa35 	bl	b70c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4c5a:	f002 f815 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c5e:	2200      	movs	r2, #0
   b4c60:	a903      	add	r1, sp, #12
   b4c62:	f002 f8b0 	bl	b6dc6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4c66:	f003 fbe7 	bl	b8438 <_Z16_fetch_usbserialv>
   b4c6a:	490e      	ldr	r1, [pc, #56]	; (b4ca4 <_Z9ble_setupv+0xf8>)
   b4c6c:	f002 fe9b 	bl	b79a6 <_ZN5Print7printlnEPKc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4c70:	9803      	ldr	r0, [sp, #12]
   b4c72:	f001 fae9 	bl	b6248 <free>
}
   b4c76:	b010      	add	sp, #64	; 0x40
   b4c78:	bd70      	pop	{r4, r5, r6, pc}
   b4c7a:	f001 fe25 	bl	b68c8 <_ZNK8particle7BleUuid8rawBytesEv>
   b4c7e:	2300      	movs	r3, #0
   b4c80:	9300      	str	r3, [sp, #0]
   b4c82:	4602      	mov	r2, r0
   b4c84:	2310      	movs	r3, #16
   b4c86:	2107      	movs	r1, #7
   b4c88:	e7e4      	b.n	b4c54 <_Z9ble_setupv+0xa8>
   b4c8a:	bf00      	nop
   b4c8c:	2003e4f8 	.word	0x2003e4f8
   b4c90:	2003e51c 	.word	0x2003e51c
   b4c94:	2003e4e8 	.word	0x2003e4e8
   b4c98:	2003e4f0 	.word	0x2003e4f0
   b4c9c:	2003e500 	.word	0x2003e500
   b4ca0:	2003e2fc 	.word	0x2003e2fc
   b4ca4:	000bb4dc 	.word	0x000bb4dc

000b4ca8 <setup>:

SYSTEM_THREAD(ENABLED);

// ###################### SETUP #################################
void setup()
{
   b4ca8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4caa:	f001 fa9d 	bl	b61e8 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4cae:	b910      	cbnz	r0, b4cb6 <setup+0xe>
            spark_process();
   b4cb0:	f001 fa92 	bl	b61d8 <spark_process>
        while (_while() && !_condition()) {
   b4cb4:	e7f9      	b.n	b4caa <setup+0x2>
   b4cb6:	f001 fa97 	bl	b61e8 <spark_cloud_flag_connected>
    waitUntil(Particle.connected);

    // Set up pin reading.
    wattSensor.initSensor();
   b4cba:	4805      	ldr	r0, [pc, #20]	; (b4cd0 <setup+0x28>)
   b4cbc:	f000 ffb6 	bl	b5c2c <_ZN6Sensor10initSensorEv>

    // setup BLE
    ble_setup();
   b4cc0:	f7ff ff74 	bl	b4bac <_Z9ble_setupv>
    }
#endif

    // Initiate particle subscriptions & request first price update.
    prices.initSubscriptions();
}
   b4cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    prices.initSubscriptions();
   b4cc8:	4802      	ldr	r0, [pc, #8]	; (b4cd4 <setup+0x2c>)
   b4cca:	f000 bc03 	b.w	b54d4 <_ZN10PriceClass17initSubscriptionsEv>
   b4cce:	bf00      	nop
   b4cd0:	2003e5d0 	.word	0x2003e5d0
   b4cd4:	2003e570 	.word	0x2003e570

000b4cd8 <loop>:

// ##################### MAIN LOOP ##############################
void loop()
{
   b4cd8:	b500      	push	{lr}
    // Is message ready to be man-handled?
    if (prices.isMessageDataReady())
   b4cda:	4823      	ldr	r0, [pc, #140]	; (b4d68 <loop+0x90>)
{
   b4cdc:	b0c5      	sub	sp, #276	; 0x114
    if (prices.isMessageDataReady())
   b4cde:	f000 fba3 	bl	b5428 <_ZN10PriceClass18isMessageDataReadyEv>
   b4ce2:	b110      	cbz	r0, b4cea <loop+0x12>
        prices.assembleMessageData();
   b4ce4:	4820      	ldr	r0, [pc, #128]	; (b4d68 <loop+0x90>)
   b4ce6:	f000 fd43 	bl	b5770 <_ZN10PriceClass19assembleMessageDataEv>

    // Should we publish on mqtt/thingspeak/display?
    if (prices.pricesUpdated())
   b4cea:	481f      	ldr	r0, [pc, #124]	; (b4d68 <loop+0x90>)
   b4cec:	f000 fb9a 	bl	b5424 <_ZN10PriceClass13pricesUpdatedEv>
   b4cf0:	b168      	cbz	r0, b4d0e <loop+0x36>
    {
        String priceString = prices.getLowPriceIntervals().c_str();
   b4cf2:	491d      	ldr	r1, [pc, #116]	; (b4d68 <loop+0x90>)
   b4cf4:	a804      	add	r0, sp, #16
   b4cf6:	f000 fc43 	bl	b5580 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>
   b4cfa:	9904      	ldr	r1, [sp, #16]
   b4cfc:	4668      	mov	r0, sp
   b4cfe:	f001 fbdb 	bl	b64b8 <_ZN6StringC1EPK19__FlashStringHelper>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   b4d02:	a804      	add	r0, sp, #16
   b4d04:	f004 f82c 	bl	b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4d08:	4668      	mov	r0, sp
   b4d0a:	f001 fb8a 	bl	b6422 <_ZN6StringD1Ev>
    }

    if (wattSensor.checkForNewReading())
   b4d0e:	4817      	ldr	r0, [pc, #92]	; (b4d6c <loop+0x94>)
   b4d10:	f000 ffc2 	bl	b5c98 <_ZN6Sensor18checkForNewReadingEv>
   b4d14:	b308      	cbz	r0, b4d5a <loop+0x82>
    {
        // publishPower(wattSensor.getCurrentReading());
        if (BLE.connected())
   b4d16:	f001 ffb7 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d1a:	f002 f813 	bl	b6d44 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4d1e:	b1e0      	cbz	r0, b4d5a <loop+0x82>
        {
            char buffer[255];
            sprintf(buffer, "{\"watt\":%d}", wattSensor.getCurrentReading());;
   b4d20:	4812      	ldr	r0, [pc, #72]	; (b4d6c <loop+0x94>)
   b4d22:	f000 ffb5 	bl	b5c90 <_ZN6Sensor17getCurrentReadingEv>
   b4d26:	4912      	ldr	r1, [pc, #72]	; (b4d70 <loop+0x98>)
   b4d28:	4602      	mov	r2, r0
   b4d2a:	a804      	add	r0, sp, #16
   b4d2c:	f001 fa9c 	bl	b6268 <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4d30:	2300      	movs	r3, #0
   b4d32:	22ff      	movs	r2, #255	; 0xff
   b4d34:	a904      	add	r1, sp, #16
   b4d36:	480f      	ldr	r0, [pc, #60]	; (b4d74 <loop+0x9c>)
   b4d38:	f001 fe84 	bl	b6a44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            WattCharacteristic.setValue(buffer);
            DkkTodayCharacteristic.setValue("{\"pricestoday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b4d3c:	490e      	ldr	r1, [pc, #56]	; (b4d78 <loop+0xa0>)
   b4d3e:	480f      	ldr	r0, [pc, #60]	; (b4d7c <loop+0xa4>)
   b4d40:	2200      	movs	r2, #0
   b4d42:	f001 fedf 	bl	b6b04 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
            DkkTomorrowCharacteristic.setValue("{\"pricestomorrow\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b4d46:	490e      	ldr	r1, [pc, #56]	; (b4d80 <loop+0xa8>)
   b4d48:	480e      	ldr	r0, [pc, #56]	; (b4d84 <loop+0xac>)
   b4d4a:	2200      	movs	r2, #0
   b4d4c:	f001 feda 	bl	b6b04 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
            WhrTodayCharacteristic.setValue("{\"WHr_today\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b4d50:	490d      	ldr	r1, [pc, #52]	; (b4d88 <loop+0xb0>)
   b4d52:	480e      	ldr	r0, [pc, #56]	; (b4d8c <loop+0xb4>)
   b4d54:	2200      	movs	r2, #0
   b4d56:	f001 fed5 	bl	b6b04 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
#ifdef USE_MQTT
    mqttKeepAlive();
#endif

    // Waitasecond...
    delay(1000);
   b4d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b4d5e:	b045      	add	sp, #276	; 0x114
   b4d60:	f85d eb04 	ldr.w	lr, [sp], #4
    delay(1000);
   b4d64:	f002 bf4a 	b.w	b7bfc <delay>
   b4d68:	2003e570 	.word	0x2003e570
   b4d6c:	2003e5d0 	.word	0x2003e5d0
   b4d70:	000bb500 	.word	0x000bb500
   b4d74:	2003e4f8 	.word	0x2003e4f8
   b4d78:	000bb50c 	.word	0x000bb50c
   b4d7c:	2003e4e8 	.word	0x2003e4e8
   b4d80:	000bb55d 	.word	0x000bb55d
   b4d84:	2003e4f0 	.word	0x2003e4f0
   b4d88:	000bb5b1 	.word	0x000bb5b1
   b4d8c:	2003e500 	.word	0x2003e500

000b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4d90:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4d92:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4d94:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4d96:	b17c      	cbz	r4, b4db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4d98:	6863      	ldr	r3, [r4, #4]
   b4d9a:	3b01      	subs	r3, #1
   b4d9c:	6063      	str	r3, [r4, #4]
   b4d9e:	b95b      	cbnz	r3, b4db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4da0:	6823      	ldr	r3, [r4, #0]
   b4da2:	4620      	mov	r0, r4
   b4da4:	689b      	ldr	r3, [r3, #8]
   b4da6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4da8:	68a3      	ldr	r3, [r4, #8]
   b4daa:	3b01      	subs	r3, #1
   b4dac:	60a3      	str	r3, [r4, #8]
   b4dae:	b91b      	cbnz	r3, b4db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4db0:	6823      	ldr	r3, [r4, #0]
   b4db2:	4620      	mov	r0, r4
   b4db4:	68db      	ldr	r3, [r3, #12]
   b4db6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4db8:	4628      	mov	r0, r5
   b4dba:	bd38      	pop	{r3, r4, r5, pc}

000b4dbc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4dbc:	b082      	sub	sp, #8
   b4dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4dc0:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b4dc2:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4dc4:	9315      	str	r3, [sp, #84]	; 0x54
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4dc6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4dc8:	e9c0 3300 	strd	r3, r3, [r0]
   b4dcc:	4606      	mov	r6, r0
   b4dce:	4694      	mov	ip, r2
   b4dd0:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4dd4:	ac04      	add	r4, sp, #16
   b4dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4dd8:	682b      	ldr	r3, [r5, #0]
   b4dda:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b4ddc:	ad1a      	add	r5, sp, #104	; 0x68
   b4dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4de0:	ac09      	add	r4, sp, #36	; 0x24
   b4de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4de4:	682b      	ldr	r3, [r5, #0]
   b4de6:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4de8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4dea:	9302      	str	r3, [sp, #8]
   b4dec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b4dee:	9301      	str	r3, [sp, #4]
   b4df0:	ab09      	add	r3, sp, #36	; 0x24
   b4df2:	9300      	str	r3, [sp, #0]
   b4df4:	4630      	mov	r0, r6
   b4df6:	ab04      	add	r3, sp, #16
   b4df8:	4662      	mov	r2, ip
   b4dfa:	4639      	mov	r1, r7
   b4dfc:	f002 fb62 	bl	b74c4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4e00:	4630      	mov	r0, r6
   b4e02:	b00f      	add	sp, #60	; 0x3c
   b4e04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4e08:	b002      	add	sp, #8
   b4e0a:	4770      	bx	lr

000b4e0c <_GLOBAL__sub_I_argonName>:
    {
        mqttClient.publish("power", powerString);
    }

#endif
   b4e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e10:	4b44      	ldr	r3, [pc, #272]	; (b4f24 <_GLOBAL__sub_I_argonName+0x118>)
const BleUuid powermonitorserviceUuid(serviceUuid);
   b4e12:	4c45      	ldr	r4, [pc, #276]	; (b4f28 <_GLOBAL__sub_I_argonName+0x11c>)
const BleUuid wattcharacteristicUuid(watt);
   b4e14:	f8df 9144 	ldr.w	r9, [pc, #324]	; b4f5c <_GLOBAL__sub_I_argonName+0x150>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b4e18:	4f44      	ldr	r7, [pc, #272]	; (b4f2c <_GLOBAL__sub_I_argonName+0x120>)
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b4e1a:	f8df b144 	ldr.w	fp, [pc, #324]	; b4f60 <_GLOBAL__sub_I_argonName+0x154>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b4e1e:	f8df a144 	ldr.w	sl, [pc, #324]	; b4f64 <_GLOBAL__sub_I_argonName+0x158>
   b4e22:	2500      	movs	r5, #0
   b4e24:	701d      	strb	r5, [r3, #0]
const BleUuid powermonitorserviceUuid(serviceUuid);
   b4e26:	4b42      	ldr	r3, [pc, #264]	; (b4f30 <_GLOBAL__sub_I_argonName+0x124>)
   b4e28:	b08d      	sub	sp, #52	; 0x34
   b4e2a:	6819      	ldr	r1, [r3, #0]
   b4e2c:	4620      	mov	r0, r4
   b4e2e:	f001 fdcb 	bl	b69c8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt);
   b4e32:	4b40      	ldr	r3, [pc, #256]	; (b4f34 <_GLOBAL__sub_I_argonName+0x128>)
   b4e34:	4648      	mov	r0, r9
   b4e36:	6819      	ldr	r1, [r3, #0]
   b4e38:	f001 fdc6 	bl	b69c8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b4e3c:	4b3e      	ldr	r3, [pc, #248]	; (b4f38 <_GLOBAL__sub_I_argonName+0x12c>)
   b4e3e:	4638      	mov	r0, r7
   b4e40:	6819      	ldr	r1, [r3, #0]
   b4e42:	f001 fdc1 	bl	b69c8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b4e46:	4b3d      	ldr	r3, [pc, #244]	; (b4f3c <_GLOBAL__sub_I_argonName+0x130>)
   b4e48:	4658      	mov	r0, fp
   b4e4a:	6819      	ldr	r1, [r3, #0]
   b4e4c:	f001 fdbc 	bl	b69c8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b4e50:	4b3b      	ldr	r3, [pc, #236]	; (b4f40 <_GLOBAL__sub_I_argonName+0x134>)
   b4e52:	4650      	mov	r0, sl
   b4e54:	6819      	ldr	r1, [r3, #0]
   b4e56:	f001 fdb7 	bl	b69c8 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4e5a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4e5e:	4626      	mov	r6, r4
   b4e60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4e62:	f04f 0810 	mov.w	r8, #16
   b4e66:	eb0d 0c08 	add.w	ip, sp, r8
   b4e6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4e6e:	6833      	ldr	r3, [r6, #0]
   b4e70:	f8cc 3000 	str.w	r3, [ip]
   b4e74:	f109 0304 	add.w	r3, r9, #4
   b4e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4e7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4e7e:	4642      	mov	r2, r8
   b4e80:	f8d9 3000 	ldr.w	r3, [r9]
   b4e84:	492f      	ldr	r1, [pc, #188]	; (b4f44 <_GLOBAL__sub_I_argonName+0x138>)
   b4e86:	4830      	ldr	r0, [pc, #192]	; (b4f48 <_GLOBAL__sub_I_argonName+0x13c>)
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4e88:	f8df 90dc 	ldr.w	r9, [pc, #220]	; b4f68 <_GLOBAL__sub_I_argonName+0x15c>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4e8c:	f7ff ff96 	bl	b4dbc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4e90:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4e94:	46a6      	mov	lr, r4
   b4e96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4e9a:	eb0d 0c08 	add.w	ip, sp, r8
   b4e9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4ea2:	6833      	ldr	r3, [r6, #0]
   b4ea4:	f8cc 3000 	str.w	r3, [ip]
   b4ea8:	1d3b      	adds	r3, r7, #4
   b4eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4eac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4eb0:	4642      	mov	r2, r8
   b4eb2:	683b      	ldr	r3, [r7, #0]
   b4eb4:	4825      	ldr	r0, [pc, #148]	; (b4f4c <_GLOBAL__sub_I_argonName+0x140>)
   b4eb6:	4649      	mov	r1, r9
   b4eb8:	f7ff ff80 	bl	b4dbc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b4ebc:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4ec0:	46a4      	mov	ip, r4
   b4ec2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4ec6:	eb0d 0708 	add.w	r7, sp, r8
   b4eca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4ecc:	6833      	ldr	r3, [r6, #0]
   b4ece:	603b      	str	r3, [r7, #0]
   b4ed0:	f10b 0304 	add.w	r3, fp, #4
   b4ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4ed6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4eda:	f8db 3000 	ldr.w	r3, [fp]
   b4ede:	481c      	ldr	r0, [pc, #112]	; (b4f50 <_GLOBAL__sub_I_argonName+0x144>)
   b4ee0:	4642      	mov	r2, r8
   b4ee2:	4649      	mov	r1, r9
   b4ee4:	f7ff ff6a 	bl	b4dbc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b4ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4eea:	eb0d 0708 	add.w	r7, sp, r8
   b4eee:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4ef2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4ef4:	6833      	ldr	r3, [r6, #0]
   b4ef6:	603b      	str	r3, [r7, #0]
   b4ef8:	f10a 0304 	add.w	r3, sl, #4
   b4efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4efe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4f02:	4649      	mov	r1, r9
   b4f04:	f8da 3000 	ldr.w	r3, [sl]
   b4f08:	4812      	ldr	r0, [pc, #72]	; (b4f54 <_GLOBAL__sub_I_argonName+0x148>)
   b4f0a:	4642      	mov	r2, r8
   b4f0c:	f7ff ff56 	bl	b4dbc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
PriceClass prices;
   b4f10:	4811      	ldr	r0, [pc, #68]	; (b4f58 <_GLOBAL__sub_I_argonName+0x14c>)
   b4f12:	f000 f921 	bl	b5158 <_ZN10PriceClassC1Ev>
SYSTEM_THREAD(ENABLED);
   b4f16:	4629      	mov	r1, r5
   b4f18:	2001      	movs	r0, #1
   b4f1a:	b00d      	add	sp, #52	; 0x34
   b4f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b4f20:	f001 b8c6 	b.w	b60b0 <system_thread_set_state>
   b4f24:	2003e56c 	.word	0x2003e56c
   b4f28:	2003e51c 	.word	0x2003e51c
   b4f2c:	2003e530 	.word	0x2003e530
   b4f30:	2003e300 	.word	0x2003e300
   b4f34:	2003e304 	.word	0x2003e304
   b4f38:	2003e2f0 	.word	0x2003e2f0
   b4f3c:	2003e2f4 	.word	0x2003e2f4
   b4f40:	2003e2f8 	.word	0x2003e2f8
   b4f44:	000bb600 	.word	0x000bb600
   b4f48:	2003e4f8 	.word	0x2003e4f8
   b4f4c:	2003e4e8 	.word	0x2003e4e8
   b4f50:	2003e4f0 	.word	0x2003e4f0
   b4f54:	2003e500 	.word	0x2003e500
   b4f58:	2003e570 	.word	0x2003e570
   b4f5c:	2003e508 	.word	0x2003e508
   b4f60:	2003e558 	.word	0x2003e558
   b4f64:	2003e544 	.word	0x2003e544
   b4f68:	000bb609 	.word	0x000bb609

000b4f6c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4f6c:	6943      	ldr	r3, [r0, #20]
   b4f6e:	b113      	cbz	r3, b4f76 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4f70:	6983      	ldr	r3, [r0, #24]
   b4f72:	300c      	adds	r0, #12
   b4f74:	4718      	bx	r3
            callback();
        }
    }
   b4f76:	4770      	bx	lr

000b4f78 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4f78:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4f7a:	2100      	movs	r1, #0
   b4f7c:	4604      	mov	r4, r0
   b4f7e:	4608      	mov	r0, r1
   b4f80:	f000 ff66 	bl	b5e50 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4f84:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4f86:	4620      	mov	r0, r4
   b4f88:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4f8a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4f8c:	f000 ff78 	bl	b5e80 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4f90:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4f92:	b10c      	cbz	r4, b4f98 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4f94:	2301      	movs	r3, #1
   b4f96:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4f98:	2100      	movs	r1, #0
   b4f9a:	2001      	movs	r0, #1
   b4f9c:	f000 ff58 	bl	b5e50 <os_thread_scheduling>
            }
        }
        if (t) {
   b4fa0:	b12c      	cbz	r4, b4fae <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4fa2:	6823      	ldr	r3, [r4, #0]
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	689b      	ldr	r3, [r3, #8]
   b4fa8:	4798      	blx	r3
            t->running = false;
   b4faa:	2300      	movs	r3, #0
   b4fac:	7123      	strb	r3, [r4, #4]
        }
    }
   b4fae:	b002      	add	sp, #8
   b4fb0:	bd10      	pop	{r4, pc}

000b4fb2 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4fb2:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   b4fb4:	6803      	ldr	r3, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
   b4fb6:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4fb8:	685c      	ldr	r4, [r3, #4]
   b4fba:	689d      	ldr	r5, [r3, #8]
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6812      	ldr	r2, [r2, #0]
   b4fc0:	1066      	asrs	r6, r4, #1
   b4fc2:	eb05 0064 	add.w	r0, r5, r4, asr #1
   b4fc6:	07e4      	lsls	r4, r4, #31
   b4fc8:	bf44      	itt	mi
   b4fca:	59ac      	ldrmi	r4, [r5, r6]
   b4fcc:	58e3      	ldrmi	r3, [r4, r3]
      }
   b4fce:	bc70      	pop	{r4, r5, r6}
   b4fd0:	4718      	bx	r3

000b4fd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4fd2:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4fd4:	6803      	ldr	r3, [r0, #0]
   b4fd6:	685a      	ldr	r2, [r3, #4]
   b4fd8:	6899      	ldr	r1, [r3, #8]
   b4fda:	681b      	ldr	r3, [r3, #0]
   b4fdc:	1054      	asrs	r4, r2, #1
   b4fde:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4fe2:	07d2      	lsls	r2, r2, #31
   b4fe4:	bf48      	it	mi
   b4fe6:	590a      	ldrmi	r2, [r1, r4]
      }
   b4fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4fec:	bf48      	it	mi
   b4fee:	58d3      	ldrmi	r3, [r2, r3]
   b4ff0:	4718      	bx	r3

000b4ff2 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b4ff2:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4ff4:	b538      	push	{r3, r4, r5, lr}
   b4ff6:	4604      	mov	r4, r0
	switch (__op)
   b4ff8:	d102      	bne.n	b5000 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4ffa:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4ffc:	6023      	str	r3, [r4, #0]
	}
   b4ffe:	e003      	b.n	b5008 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b5000:	2a02      	cmp	r2, #2
   b5002:	d003      	beq.n	b500c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b5004:	2a03      	cmp	r2, #3
   b5006:	d00d      	beq.n	b5024 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b5008:	2000      	movs	r0, #0
   b500a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b500c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b500e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5010:	f7ff fdbb 	bl	b4b8a <_Znwj>
   b5014:	4603      	mov	r3, r0
   b5016:	2800      	cmp	r0, #0
   b5018:	d0f0      	beq.n	b4ffc <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b501a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b501e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5022:	e7eb      	b.n	b4ffc <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5024:	6800      	ldr	r0, [r0, #0]
   b5026:	2800      	cmp	r0, #0
   b5028:	d0ee      	beq.n	b5008 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b502a:	210c      	movs	r1, #12
   b502c:	f7ff fdb3 	bl	b4b96 <_ZdlPvj>
   b5030:	e7ea      	b.n	b5008 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b5032 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b5032:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5034:	b538      	push	{r3, r4, r5, lr}
   b5036:	4604      	mov	r4, r0
	switch (__op)
   b5038:	d102      	bne.n	b5040 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b503a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b503c:	6023      	str	r3, [r4, #0]
	}
   b503e:	e003      	b.n	b5048 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b5040:	2a02      	cmp	r2, #2
   b5042:	d003      	beq.n	b504c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b5044:	2a03      	cmp	r2, #3
   b5046:	d00d      	beq.n	b5064 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b5048:	2000      	movs	r0, #0
   b504a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b504c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b504e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5050:	f7ff fd9b 	bl	b4b8a <_Znwj>
   b5054:	4603      	mov	r3, r0
   b5056:	2800      	cmp	r0, #0
   b5058:	d0f0      	beq.n	b503c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b505a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b505e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5062:	e7eb      	b.n	b503c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5064:	6800      	ldr	r0, [r0, #0]
   b5066:	2800      	cmp	r0, #0
   b5068:	d0ee      	beq.n	b5048 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b506a:	210c      	movs	r1, #12
   b506c:	f7ff fd93 	bl	b4b96 <_ZdlPvj>
   b5070:	e7ea      	b.n	b5048 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b5074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>:
       *  @brief  Append a C string.
       *  @param __s  The C string to append.
       *  @return  Reference to this string.
       */
      basic_string&
      append(const _CharT* __s)
   b5074:	b513      	push	{r0, r1, r4, lr}
   b5076:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b5078:	4608      	mov	r0, r1
   b507a:	9101      	str	r1, [sp, #4]
   b507c:	f7ff fd2a 	bl	b4ad4 <strlen>
	if (this->max_size() - (this->size() - __n1) < __n2)
   b5080:	6863      	ldr	r3, [r4, #4]
   b5082:	9901      	ldr	r1, [sp, #4]
   b5084:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
   b5088:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
   b508c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   b5090:	333f      	adds	r3, #63	; 0x3f
   b5092:	4298      	cmp	r0, r3
   b5094:	4602      	mov	r2, r0
   b5096:	d902      	bls.n	b509e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x2a>
	  __throw_length_error(__N(__s));
   b5098:	4804      	ldr	r0, [pc, #16]	; (b50ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x38>)
   b509a:	f003 fd6f 	bl	b8b7c <_ZSt20__throw_length_errorPKc>
      {
	__glibcxx_requires_string(__s);
	const size_type __n = traits_type::length(__s);
	_M_check_length(size_type(0), __n, "basic_string::append");
	return _M_append(__s, __n);
   b509e:	4620      	mov	r0, r4
      }
   b50a0:	b002      	add	sp, #8
   b50a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _M_append(__s, __n);
   b50a6:	f003 bf75 	b.w	b8f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
   b50aa:	bf00      	nop
   b50ac:	000bb6d4 	.word	0x000bb6d4

000b50b0 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b50b0:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b50b2:	6880      	ldr	r0, [r0, #8]
   b50b4:	b130      	cbz	r0, b50c4 <_ZN5Timer4stopEj.isra.0+0x14>
   b50b6:	2300      	movs	r3, #0
   b50b8:	e9cd 1300 	strd	r1, r3, [sp]
   b50bc:	461a      	mov	r2, r3
   b50be:	2102      	movs	r1, #2
   b50c0:	f000 fee6 	bl	b5e90 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b50c4:	b003      	add	sp, #12
   b50c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b50ca <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b50ca:	b538      	push	{r3, r4, r5, lr}
   b50cc:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b50ce:	b16c      	cbz	r4, b50ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x22>
	{
	  _M_erase(_S_right(__x));
   b50d0:	68e0      	ldr	r0, [r4, #12]
   b50d2:	f7ff fffa 	bl	b50ca <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { _M_dispose(); }
   b50d6:	f104 0014 	add.w	r0, r4, #20
      { return static_cast<_Link_type>(__x->_M_left); }
   b50da:	68a5      	ldr	r5, [r4, #8]
   b50dc:	f003 fe40 	bl	b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b50e0:	4620      	mov	r0, r4
   b50e2:	212c      	movs	r1, #44	; 0x2c
   b50e4:	f7ff fd57 	bl	b4b96 <_ZdlPvj>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   b50e8:	462c      	mov	r4, r5
      }
   b50ea:	e7f0      	b.n	b50ce <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
	}
    }
   b50ec:	bd38      	pop	{r3, r4, r5, pc}

000b50ee <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b50ee:	b510      	push	{r4, lr}
      if (_M_manager)
   b50f0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b50f2:	4604      	mov	r4, r0
      if (_M_manager)
   b50f4:	b113      	cbz	r3, b50fc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b50f6:	2203      	movs	r2, #3
   b50f8:	4601      	mov	r1, r0
   b50fa:	4798      	blx	r3
    }
   b50fc:	4620      	mov	r0, r4
   b50fe:	bd10      	pop	{r4, pc}

000b5100 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b5100:	b538      	push	{r3, r4, r5, lr}
   b5102:	4b0f      	ldr	r3, [pc, #60]	; (b5140 <_ZN5TimerD1Ev+0x40>)
   b5104:	6003      	str	r3, [r0, #0]
        if (handle) {
   b5106:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b5108:	4604      	mov	r4, r0
        if (handle) {
   b510a:	b19b      	cbz	r3, b5134 <_ZN5TimerD1Ev+0x34>
            stop();
   b510c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5110:	f7ff ffce 	bl	b50b0 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b5114:	68a0      	ldr	r0, [r4, #8]
   b5116:	2100      	movs	r1, #0
   b5118:	f000 feda 	bl	b5ed0 <os_timer_set_id>
            while (running) {
   b511c:	7923      	ldrb	r3, [r4, #4]
   b511e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b5122:	b113      	cbz	r3, b512a <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b5124:	f000 fe8c 	bl	b5e40 <os_thread_yield>
            while (running) {
   b5128:	e7f8      	b.n	b511c <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b512a:	68a0      	ldr	r0, [r4, #8]
   b512c:	4629      	mov	r1, r5
   b512e:	f000 fe9f 	bl	b5e70 <os_timer_destroy>
            handle = nullptr;
   b5132:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b5134:	f104 000c 	add.w	r0, r4, #12
   b5138:	f7ff ffd9 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
    }
   b513c:	4620      	mov	r0, r4
   b513e:	bd38      	pop	{r3, r4, r5, pc}
   b5140:	000bb83c 	.word	0x000bb83c

000b5144 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b5144:	b510      	push	{r4, lr}
   b5146:	4604      	mov	r4, r0
    }
   b5148:	f7ff ffda 	bl	b5100 <_ZN5TimerD1Ev>
   b514c:	4620      	mov	r0, r4
   b514e:	211c      	movs	r1, #28
   b5150:	f7ff fd21 	bl	b4b96 <_ZdlPvj>
   b5154:	4620      	mov	r0, r4
   b5156:	bd10      	pop	{r4, pc}

000b5158 <_ZN10PriceClassC1Ev>:
#define PRICE_INDEX 20
#define MILLISEC_HOUR 3600000
#define MILLISEC_MINUTE 60000

// Constructor
PriceClass::PriceClass()
   b5158:	b5f0      	push	{r4, r5, r6, r7, lr}
	  : _Node_allocator()
   b515a:	1d03      	adds	r3, r0, #4
      _M_header._M_color = _S_red;
   b515c:	2500      	movs	r5, #0
      _M_header._M_left = &_M_header;
   b515e:	e9c0 5302 	strd	r5, r3, [r0, #8]
      _M_node_count = 0;
   b5162:	e9c0 3504 	strd	r3, r5, [r0, #16]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5166:	f100 034c 	add.w	r3, r0, #76	; 0x4c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b516a:	e9c0 5507 	strd	r5, r5, [r0, #28]
   b516e:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
   b5172:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
      { _M_string_length = __length; }
   b5176:	e9c0 3511 	strd	r3, r5, [r0, #68]	; 0x44
      _M_header._M_color = _S_red;
   b517a:	7105      	strb	r5, [r0, #4]
    : newPricesReceived{false},
      messageDataReady{false}
   b517c:	8305      	strh	r5, [r0, #24]
      { __c1 = __c2; }
   b517e:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
PriceClass::PriceClass()
   b5182:	b089      	sub	sp, #36	; 0x24
   b5184:	4604      	mov	r4, r0
{
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b5186:	201c      	movs	r0, #28
   b5188:	f7ff fcff 	bl	b4b8a <_Znwj>
   b518c:	4606      	mov	r6, r0
   b518e:	2800      	cmp	r0, #0
   b5190:	d033      	beq.n	b51fa <_ZN10PriceClassC1Ev+0xa2>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5192:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5194:	9506      	str	r5, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5196:	f7ff fcf8 	bl	b4b8a <_Znwj>
   b519a:	b118      	cbz	r0, b51a4 <_ZN10PriceClassC1Ev+0x4c>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b519c:	4b19      	ldr	r3, [pc, #100]	; (b5204 <_ZN10PriceClassC1Ev+0xac>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b519e:	6084      	str	r4, [r0, #8]
   b51a0:	e9c0 3500 	strd	r3, r5, [r0]
   b51a4:	9004      	str	r0, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51a6:	ad04      	add	r5, sp, #16
   b51a8:	e895 0003 	ldmia.w	r5, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b51ac:	4b16      	ldr	r3, [pc, #88]	; (b5208 <_ZN10PriceClassC1Ev+0xb0>)
   b51ae:	6033      	str	r3, [r6, #0]
   b51b0:	2300      	movs	r3, #0
   b51b2:	7133      	strb	r3, [r6, #4]
   b51b4:	60b3      	str	r3, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
   b51b6:	f106 020c 	add.w	r2, r6, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51ba:	af02      	add	r7, sp, #8
   b51bc:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b51c0:	e892 0003 	ldmia.w	r2, {r0, r1}
   b51c4:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b51c8:	e897 0003 	ldmia.w	r7, {r0, r1}
   b51cc:	e882 0003 	stmia.w	r2, {r0, r1}
   b51d0:	4a0e      	ldr	r2, [pc, #56]	; (b520c <_ZN10PriceClassC1Ev+0xb4>)
   b51d2:	6172      	str	r2, [r6, #20]
      __a = _GLIBCXX_MOVE(__b);
   b51d4:	69b2      	ldr	r2, [r6, #24]
   b51d6:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b51d8:	4a0d      	ldr	r2, [pc, #52]	; (b5210 <_ZN10PriceClassC1Ev+0xb8>)
   b51da:	61b2      	str	r2, [r6, #24]
      __a = _GLIBCXX_MOVE(__b);
   b51dc:	9306      	str	r3, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b51de:	9301      	str	r3, [sp, #4]
   b51e0:	2301      	movs	r3, #1
   b51e2:	9300      	str	r3, [sp, #0]
   b51e4:	4a0b      	ldr	r2, [pc, #44]	; (b5214 <_ZN10PriceClassC1Ev+0xbc>)
   b51e6:	4633      	mov	r3, r6
   b51e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b51ec:	f106 0008 	add.w	r0, r6, #8
   b51f0:	f000 fe36 	bl	b5e60 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b51f4:	4628      	mov	r0, r5
   b51f6:	f7ff ff7a 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
}
   b51fa:	4620      	mov	r0, r4
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b51fc:	65e6      	str	r6, [r4, #92]	; 0x5c
}
   b51fe:	b009      	add	sp, #36	; 0x24
   b5200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5202:	bf00      	nop
   b5204:	000b53b9 	.word	0x000b53b9
   b5208:	000bb83c 	.word	0x000bb83c
   b520c:	000b5033 	.word	0x000b5033
   b5210:	000b4fd3 	.word	0x000b4fd3
   b5214:	000b4f79 	.word	0x000b4f79

000b5218 <_ZN10PriceClass18requestPriceUpdateEi>:
// #####################################################################
/// @brief This method makes a publish request, to fire off the webhook,
// which in turn will fire off the "prices" event, when data is ready.
// #####################################################################
void PriceClass::requestPriceUpdate(int day)
{
   b5218:	b570      	push	{r4, r5, r6, lr}
   b521a:	b0a0      	sub	sp, #128	; 0x80
   b521c:	460c      	mov	r4, r1
   b521e:	4605      	mov	r5, r0
    String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b5220:	f002 fcd6 	bl	b7bd0 <_ZN9TimeClass4yearEv>
   b5224:	4940      	ldr	r1, [pc, #256]	; (b5328 <_ZN10PriceClass18requestPriceUpdateEi+0x110>)
   b5226:	4602      	mov	r2, r0
   b5228:	a808      	add	r0, sp, #32
   b522a:	f001 f9bb 	bl	b65a4 <_ZN6String6formatEPKcz>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b522e:	a908      	add	r1, sp, #32
   b5230:	a810      	add	r0, sp, #64	; 0x40
   b5232:	f001 f964 	bl	b64fe <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b5236:	f002 fcc3 	bl	b7bc0 <_ZN9TimeClass5monthEv>
   b523a:	493c      	ldr	r1, [pc, #240]	; (b532c <_ZN10PriceClass18requestPriceUpdateEi+0x114>)
   b523c:	4602      	mov	r2, r0
   b523e:	a80c      	add	r0, sp, #48	; 0x30
   b5240:	f001 f9b0 	bl	b65a4 <_ZN6String6formatEPKcz>
   b5244:	a90c      	add	r1, sp, #48	; 0x30
   b5246:	a810      	add	r0, sp, #64	; 0x40
   b5248:	f001 f99f 	bl	b658a <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day\": \"%02d\", ", day) +
   b524c:	4622      	mov	r2, r4
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b524e:	4606      	mov	r6, r0
                  String::format("\"day\": \"%02d\", ", day) +
   b5250:	4937      	ldr	r1, [pc, #220]	; (b5330 <_ZN10PriceClass18requestPriceUpdateEi+0x118>)
   b5252:	a814      	add	r0, sp, #80	; 0x50
   b5254:	f001 f9a6 	bl	b65a4 <_ZN6String6formatEPKcz>
   b5258:	a914      	add	r1, sp, #80	; 0x50
   b525a:	4630      	mov	r0, r6
   b525c:	f001 f995 	bl	b658a <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b5260:	1ca2      	adds	r2, r4, #2
   b5262:	4934      	ldr	r1, [pc, #208]	; (b5334 <_ZN10PriceClass18requestPriceUpdateEi+0x11c>)
                  String::format("\"day\": \"%02d\", ", day) +
   b5264:	4606      	mov	r6, r0
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b5266:	a818      	add	r0, sp, #96	; 0x60
   b5268:	f001 f99c 	bl	b65a4 <_ZN6String6formatEPKcz>
   b526c:	a918      	add	r1, sp, #96	; 0x60
   b526e:	4630      	mov	r0, r6
   b5270:	f001 f98b 	bl	b658a <_ZplRK15StringSumHelperRK6String>
   b5274:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b5276:	f002 fc7f 	bl	b7b78 <_ZN9TimeClass4hourEv>
   b527a:	492f      	ldr	r1, [pc, #188]	; (b5338 <_ZN10PriceClass18requestPriceUpdateEi+0x120>)
   b527c:	4602      	mov	r2, r0
   b527e:	a81c      	add	r0, sp, #112	; 0x70
   b5280:	f001 f990 	bl	b65a4 <_ZN6String6formatEPKcz>
   b5284:	a91c      	add	r1, sp, #112	; 0x70
   b5286:	4620      	mov	r0, r4
   b5288:	f001 f97f 	bl	b658a <_ZplRK15StringSumHelperRK6String>
   b528c:	4601      	mov	r1, r0
   b528e:	a804      	add	r0, sp, #16
   b5290:	f001 f935 	bl	b64fe <_ZN6StringC1ERKS_>
   b5294:	a81c      	add	r0, sp, #112	; 0x70
   b5296:	f001 f8c4 	bl	b6422 <_ZN6StringD1Ev>
   b529a:	a818      	add	r0, sp, #96	; 0x60
   b529c:	f001 f8c1 	bl	b6422 <_ZN6StringD1Ev>
   b52a0:	a814      	add	r0, sp, #80	; 0x50
   b52a2:	f001 f8be 	bl	b6422 <_ZN6StringD1Ev>
   b52a6:	a80c      	add	r0, sp, #48	; 0x30
   b52a8:	f001 f8bb 	bl	b6422 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b52ac:	a810      	add	r0, sp, #64	; 0x40
   b52ae:	f001 f8b8 	bl	b6422 <_ZN6StringD1Ev>
   b52b2:	a808      	add	r0, sp, #32
   b52b4:	f001 f8b5 	bl	b6422 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b52b8:	4b20      	ldr	r3, [pc, #128]	; (b533c <_ZN10PriceClass18requestPriceUpdateEi+0x124>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b52ba:	9a04      	ldr	r2, [sp, #16]
   b52bc:	781b      	ldrb	r3, [r3, #0]
   b52be:	f88d 3000 	strb.w	r3, [sp]
   b52c2:	491f      	ldr	r1, [pc, #124]	; (b5340 <_ZN10PriceClass18requestPriceUpdateEi+0x128>)
   b52c4:	233c      	movs	r3, #60	; 0x3c
   b52c6:	a81c      	add	r0, sp, #112	; 0x70
   b52c8:	f002 fe78 	bl	b7fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b52cc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   b52ce:	b17c      	cbz	r4, b52f0 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
      if (--_M_use_count == 0)
   b52d0:	6863      	ldr	r3, [r4, #4]
   b52d2:	3b01      	subs	r3, #1
   b52d4:	6063      	str	r3, [r4, #4]
   b52d6:	b95b      	cbnz	r3, b52f0 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
          _M_dispose();
   b52d8:	6823      	ldr	r3, [r4, #0]
   b52da:	4620      	mov	r0, r4
   b52dc:	689b      	ldr	r3, [r3, #8]
   b52de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b52e0:	68a3      	ldr	r3, [r4, #8]
   b52e2:	3b01      	subs	r3, #1
   b52e4:	60a3      	str	r3, [r4, #8]
   b52e6:	b91b      	cbnz	r3, b52f0 <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
            _M_destroy();
   b52e8:	6823      	ldr	r3, [r4, #0]
   b52ea:	4620      	mov	r0, r4
   b52ec:	68db      	ldr	r3, [r3, #12]
   b52ee:	4798      	blx	r3
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b52f0:	f002 fc31 	bl	b7b56 <_ZN9TimeClass3nowEv>
   b52f4:	4602      	mov	r2, r0
   b52f6:	17c3      	asrs	r3, r0, #31
   b52f8:	a81c      	add	r0, sp, #112	; 0x70
   b52fa:	f002 fbd3 	bl	b7aa4 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b52fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	return __builtin_strlen(__s);
   b5300:	9303      	str	r3, [sp, #12]
   b5302:	4618      	mov	r0, r3
   b5304:	f7ff fbe6 	bl	b4ad4 <strlen>
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
   b5308:	9b03      	ldr	r3, [sp, #12]
   b530a:	6caa      	ldr	r2, [r5, #72]	; 0x48
   b530c:	9000      	str	r0, [sp, #0]
   b530e:	2100      	movs	r1, #0
   b5310:	f105 0044 	add.w	r0, r5, #68	; 0x44
   b5314:	f003 fdc0 	bl	b8e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>

    // Trigger the integration
    Particle.publish("elpriser", data);
    lastUpdate = Time.timeStr();
   b5318:	a81c      	add	r0, sp, #112	; 0x70
   b531a:	f001 f882 	bl	b6422 <_ZN6StringD1Ev>
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b531e:	a804      	add	r0, sp, #16
   b5320:	f001 f87f 	bl	b6422 <_ZN6StringD1Ev>
}
   b5324:	b020      	add	sp, #128	; 0x80
   b5326:	bd70      	pop	{r4, r5, r6, pc}
   b5328:	000bb6e9 	.word	0x000bb6e9
   b532c:	000bb6fa 	.word	0x000bb6fa
   b5330:	000bb70c 	.word	0x000bb70c
   b5334:	000bb71c 	.word	0x000bb71c
   b5338:	000bb730 	.word	0x000bb730
   b533c:	2003e5dc 	.word	0x2003e5dc
   b5340:	000bb741 	.word	0x000bb741

000b5344 <_ZN10PriceClass28getpricesSubscriptionHandlerEPKcS1_>:
{
   b5344:	b510      	push	{r4, lr}
   b5346:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b5348:	f002 fc2e 	bl	b7ba8 <_ZN9TimeClass3dayEv>
   b534c:	4601      	mov	r1, r0
   b534e:	4620      	mov	r0, r4
}
   b5350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b5354:	f7ff bf60 	b.w	b5218 <_ZN10PriceClass18requestPriceUpdateEi>

000b5358 <_ZN10PriceClass12updatePricesEv>:

// ####################################################################
/// @brief This is a public method, for requesting an update on prices.
// ####################################################################
void PriceClass::updatePrices()
{
   b5358:	b510      	push	{r4, lr}
   b535a:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b535c:	f002 fc24 	bl	b7ba8 <_ZN9TimeClass3dayEv>
   b5360:	4601      	mov	r1, r0
   b5362:	4620      	mov	r0, r4
}
   b5364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b5368:	f7ff bf56 	b.w	b5218 <_ZN10PriceClass18requestPriceUpdateEi>

000b536c <_ZN10PriceClass14timedCountDownEj>:

// ##########################################################################
/// @brief Small method for setting the timer period, and starting the timer.
// ##########################################################################
void PriceClass::timedCountDown(uint period)
{
   b536c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b536e:	4604      	mov	r4, r0
   b5370:	9103      	str	r1, [sp, #12]
    updateTimer->stop();
   b5372:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b5374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5378:	f7ff fe9a 	bl	b50b0 <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b537c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   b537e:	6890      	ldr	r0, [r2, #8]
   b5380:	b140      	cbz	r0, b5394 <_ZN10PriceClass14timedCountDownEj+0x28>
   b5382:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5386:	2200      	movs	r2, #0
   b5388:	e9cd 1200 	strd	r1, r2, [sp]
   b538c:	9b03      	ldr	r3, [sp, #12]
   b538e:	2103      	movs	r1, #3
   b5390:	f000 fd7e 	bl	b5e90 <os_timer_change>
    updateTimer->changePeriod(period);
    updateTimer->start();
   b5394:	6de4      	ldr	r4, [r4, #92]	; 0x5c
        stop(fromISR);
   b5396:	2100      	movs	r1, #0
   b5398:	4620      	mov	r0, r4
   b539a:	f7ff fe89 	bl	b50b0 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b539e:	68a0      	ldr	r0, [r4, #8]
   b53a0:	b140      	cbz	r0, b53b4 <_ZN10PriceClass14timedCountDownEj+0x48>
   b53a2:	2300      	movs	r3, #0
   b53a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b53a8:	e9cd 2300 	strd	r2, r3, [sp]
   b53ac:	4619      	mov	r1, r3
   b53ae:	461a      	mov	r2, r3
   b53b0:	f000 fd6e 	bl	b5e90 <os_timer_change>
}
   b53b4:	b004      	add	sp, #16
   b53b6:	bd10      	pop	{r4, pc}

000b53b8 <_ZN10PriceClass11timedUpdateEv>:
{
   b53b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53ba:	4605      	mov	r5, r0
    uint8_t hourNow = Time.hour();
   b53bc:	f002 fbdc 	bl	b7b78 <_ZN9TimeClass4hourEv>
   b53c0:	b2c4      	uxtb	r4, r0
    if (hourNow == 11 || hourNow == 23)
   b53c2:	2c0b      	cmp	r4, #11
   b53c4:	d001      	beq.n	b53ca <_ZN10PriceClass11timedUpdateEv+0x12>
   b53c6:	2c17      	cmp	r4, #23
   b53c8:	d110      	bne.n	b53ec <_ZN10PriceClass11timedUpdateEv+0x34>
        timerPeriod = (12 * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b53ca:	f002 fbe1 	bl	b7b90 <_ZN9TimeClass6minuteEv>
        timedCountDown(timerPeriod);
   b53ce:	4b12      	ldr	r3, [pc, #72]	; (b5418 <_ZN10PriceClass11timedUpdateEv+0x60>)
   b53d0:	4912      	ldr	r1, [pc, #72]	; (b541c <_ZN10PriceClass11timedUpdateEv+0x64>)
   b53d2:	fb01 3100 	mla	r1, r1, r0, r3
   b53d6:	4628      	mov	r0, r5
   b53d8:	f7ff ffc8 	bl	b536c <_ZN10PriceClass14timedCountDownEj>
        requestPriceUpdate(Time.day());
   b53dc:	f002 fbe4 	bl	b7ba8 <_ZN9TimeClass3dayEv>
   b53e0:	4601      	mov	r1, r0
   b53e2:	4628      	mov	r0, r5
}
   b53e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        requestPriceUpdate(Time.day());
   b53e8:	f7ff bf16 	b.w	b5218 <_ZN10PriceClass18requestPriceUpdateEi>
        if (hourNow < 11)
   b53ec:	2c0a      	cmp	r4, #10
   b53ee:	4f0b      	ldr	r7, [pc, #44]	; (b541c <_ZN10PriceClass11timedUpdateEv+0x64>)
   b53f0:	4e0b      	ldr	r6, [pc, #44]	; (b5420 <_ZN10PriceClass11timedUpdateEv+0x68>)
   b53f2:	d80b      	bhi.n	b540c <_ZN10PriceClass11timedUpdateEv+0x54>
            timerPeriod = ((11 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b53f4:	f002 fbcc 	bl	b7b90 <_ZN9TimeClass6minuteEv>
   b53f8:	f1c4 040b 	rsb	r4, r4, #11
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b53fc:	4378      	muls	r0, r7
            timedCountDown(timerPeriod);
   b53fe:	fb06 0104 	mla	r1, r6, r4, r0
   b5402:	4628      	mov	r0, r5
}
   b5404:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            timedCountDown(timerPeriod);
   b5408:	f7ff bfb0 	b.w	b536c <_ZN10PriceClass14timedCountDownEj>
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b540c:	f002 fbc0 	bl	b7b90 <_ZN9TimeClass6minuteEv>
   b5410:	f1c4 0417 	rsb	r4, r4, #23
   b5414:	e7f2      	b.n	b53fc <_ZN10PriceClass11timedUpdateEv+0x44>
   b5416:	bf00      	nop
   b5418:	02932e00 	.word	0x02932e00
   b541c:	ffff15a0 	.word	0xffff15a0
   b5420:	0036ee80 	.word	0x0036ee80

000b5424 <_ZN10PriceClass13pricesUpdatedEv>:
/// @brief Method for checking if new price data has not yet been read.
// ####################################################################
bool PriceClass::pricesUpdated()
{
    return newPricesReceived;
}
   b5424:	7e00      	ldrb	r0, [r0, #24]
   b5426:	4770      	bx	lr

000b5428 <_ZN10PriceClass18isMessageDataReadyEv>:

bool PriceClass::isMessageDataReady()
{
    return messageDataReady;
   b5428:	7e40      	ldrb	r0, [r0, #25]
   b542a:	4770      	bx	lr

000b542c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b542c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b542e:	2300      	movs	r3, #0
   b5430:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5432:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5434:	4604      	mov	r4, r0
   b5436:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5438:	b12b      	cbz	r3, b5446 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b543a:	2202      	movs	r2, #2
   b543c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b543e:	68eb      	ldr	r3, [r5, #12]
   b5440:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5442:	68ab      	ldr	r3, [r5, #8]
   b5444:	60a3      	str	r3, [r4, #8]
    }
   b5446:	4620      	mov	r0, r4
   b5448:	bd38      	pop	{r3, r4, r5, pc}
	...

000b544c <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
   b544c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b544e:	b091      	sub	sp, #68	; 0x44
   b5450:	ad02      	add	r5, sp, #8
   b5452:	e885 0006 	stmia.w	r5, {r1, r2}
   b5456:	4606      	mov	r6, r0
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5458:	e895 0003 	ldmia.w	r5, {r0, r1}
   b545c:	ac05      	add	r4, sp, #20
   b545e:	e884 0005 	stmia.w	r4, {r0, r2}
   b5462:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5464:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5466:	2300      	movs	r3, #0
   b5468:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b546a:	f7ff fb8e 	bl	b4b8a <_Znwj>
   b546e:	4602      	mov	r2, r0
   b5470:	b120      	cbz	r0, b547c <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x30>
      _Bind(_Bind&&) = default;
   b5472:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5476:	e882 0003 	stmia.w	r2, {r0, r1}
   b547a:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b547c:	4b12      	ldr	r3, [pc, #72]	; (b54c8 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x7c>)
   b547e:	930b      	str	r3, [sp, #44]	; 0x2c
        return subscribe_wiring(eventName, handler, scope);
   b5480:	a908      	add	r1, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b5482:	4b12      	ldr	r3, [pc, #72]	; (b54cc <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x80>)
   b5484:	930a      	str	r3, [sp, #40]	; 0x28
   b5486:	a80c      	add	r0, sp, #48	; 0x30
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5488:	9208      	str	r2, [sp, #32]
   b548a:	f7ff ffcf 	bl	b542c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    static particle::Future<bool> publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags);

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   b548e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b5490:	b18b      	cbz	r3, b54b6 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   b5492:	2010      	movs	r0, #16
   b5494:	f7ff fb79 	bl	b4b8a <_Znwj>
   b5498:	4604      	mov	r4, r0
   b549a:	b160      	cbz	r0, b54b6 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
   b549c:	a90c      	add	r1, sp, #48	; 0x30
   b549e:	f7ff ffc5 	bl	b542c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-function-type"
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   b54a2:	2300      	movs	r3, #0
   b54a4:	e9cd 3300 	strd	r3, r3, [sp]
   b54a8:	4909      	ldr	r1, [pc, #36]	; (b54d0 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x84>)
   b54aa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b54ae:	4622      	mov	r2, r4
   b54b0:	4630      	mov	r0, r6
   b54b2:	f000 fea9 	bl	b6208 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   b54b6:	a80c      	add	r0, sp, #48	; 0x30
   b54b8:	f7ff fe19 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
   b54bc:	a808      	add	r0, sp, #32
   b54be:	f7ff fe16 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
    }
   b54c2:	b011      	add	sp, #68	; 0x44
   b54c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b54c6:	bf00      	nop
   b54c8:	000b4fb3 	.word	0x000b4fb3
   b54cc:	000b4ff3 	.word	0x000b4ff3
   b54d0:	000b7dd3 	.word	0x000b7dd3

000b54d4 <_ZN10PriceClass17initSubscriptionsEv>:
{
   b54d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b54d6:	b085      	sub	sp, #20
   b54d8:	2700      	movs	r7, #0
    return subscribe(name, handler, ALL_DEVICES);
}

template<typename T>
inline bool CloudClass::subscribe(const char* name, void (T::*handler)(const char*, const char*), T* instance) {
    return subscribe(name, handler, instance, ALL_DEVICES);
   b54da:	2601      	movs	r6, #1
   b54dc:	4b0f      	ldr	r3, [pc, #60]	; (b551c <_ZN10PriceClass17initSubscriptionsEv+0x48>)
   b54de:	9302      	str	r3, [sp, #8]
   b54e0:	9703      	str	r7, [sp, #12]
   b54e2:	9600      	str	r6, [sp, #0]
   b54e4:	ad02      	add	r5, sp, #8
   b54e6:	4604      	mov	r4, r0
   b54e8:	e895 0006 	ldmia.w	r5, {r1, r2}
   b54ec:	4603      	mov	r3, r0
   b54ee:	480c      	ldr	r0, [pc, #48]	; (b5520 <_ZN10PriceClass17initSubscriptionsEv+0x4c>)
   b54f0:	f7ff ffac 	bl	b544c <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    Particle.subscribe("get_prices", &PriceClass::getpricesSubscriptionHandler, this);
   b54f4:	4b0b      	ldr	r3, [pc, #44]	; (b5524 <_ZN10PriceClass17initSubscriptionsEv+0x50>)
   b54f6:	9600      	str	r6, [sp, #0]
   b54f8:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b54fc:	480a      	ldr	r0, [pc, #40]	; (b5528 <_ZN10PriceClass17initSubscriptionsEv+0x54>)
   b54fe:	e895 0006 	ldmia.w	r5, {r1, r2}
   b5502:	4623      	mov	r3, r4
   b5504:	f7ff ffa2 	bl	b544c <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    updatePrices();
   b5508:	4620      	mov	r0, r4
   b550a:	f7ff ff25 	bl	b5358 <_ZN10PriceClass12updatePricesEv>
    timedUpdate();
   b550e:	4620      	mov	r0, r4
}
   b5510:	b005      	add	sp, #20
   b5512:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    timedUpdate();
   b5516:	f7ff bf4f 	b.w	b53b8 <_ZN10PriceClass11timedUpdateEv>
   b551a:	bf00      	nop
   b551c:	000b5a35 	.word	0x000b5a35
   b5520:	000bb778 	.word	0x000bb778
   b5524:	000b5345 	.word	0x000b5345
   b5528:	000bb774 	.word	0x000bb774

000b552c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b552c:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b5530:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5532:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b5534:	6003      	str	r3, [r0, #0]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b5536:	460d      	mov	r5, r1
   b5538:	b1e1      	cbz	r1, b5574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x48>
   b553a:	4608      	mov	r0, r1
   b553c:	f7ff faca 	bl	b4ad4 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b5540:	280f      	cmp	r0, #15
   b5542:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b5546:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b5548:	d907      	bls.n	b555a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b554a:	2200      	movs	r2, #0
   b554c:	a901      	add	r1, sp, #4
   b554e:	4620      	mov	r0, r4
   b5550:	f003 fbe4 	bl	b8d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b5554:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b5556:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b5558:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b555a:	6820      	ldr	r0, [r4, #0]
   b555c:	4632      	mov	r2, r6
   b555e:	4629      	mov	r1, r5
   b5560:	f003 fc44 	bl	b8dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b5564:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b5566:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b5568:	6063      	str	r3, [r4, #4]
   b556a:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b556c:	4620      	mov	r0, r4
   b556e:	54d1      	strb	r1, [r2, r3]
   b5570:	b002      	add	sp, #8
   b5572:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b5574:	4801      	ldr	r0, [pc, #4]	; (b557c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
   b5576:	f003 fafb 	bl	b8b70 <_ZSt19__throw_logic_errorPKc>
   b557a:	bf00      	nop
   b557c:	000bb74a 	.word	0x000bb74a

000b5580 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>:
{
   b5580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!newPricesReceived)
   b5584:	7e0b      	ldrb	r3, [r1, #24]
{
   b5586:	b08c      	sub	sp, #48	; 0x30
   b5588:	4604      	mov	r4, r0
   b558a:	460e      	mov	r6, r1
    if (!newPricesReceived)
   b558c:	b93b      	cbnz	r3, b559e <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x1e>
        return "No prices yet";
   b558e:	493e      	ldr	r1, [pc, #248]	; (b5688 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x108>)
   b5590:	aa06      	add	r2, sp, #24
   b5592:	f7ff ffcb 	bl	b552c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
}
   b5596:	4620      	mov	r0, r4
   b5598:	b00c      	add	sp, #48	; 0x30
   b559a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b559e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b55a0:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b5694 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x114>
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b55a4:	781d      	ldrb	r5, [r3, #0]
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b55a6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b5698 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x118>
    std::string lowHourIntervals{(String)lastIndexedHour};
   b55aa:	220a      	movs	r2, #10
   b55ac:	4629      	mov	r1, r5
   b55ae:	a802      	add	r0, sp, #8
   b55b0:	f000 ffc2 	bl	b6538 <_ZN6StringC1Ehh>
   b55b4:	9902      	ldr	r1, [sp, #8]
   b55b6:	aa01      	add	r2, sp, #4
   b55b8:	a806      	add	r0, sp, #24
   b55ba:	f7ff ffb7 	bl	b552c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b55be:	a802      	add	r0, sp, #8
   b55c0:	f000 ff2f 	bl	b6422 <_ZN6StringD1Ev>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b55c4:	e9d6 790a 	ldrd	r7, r9, [r6, #40]	; 0x28
   b55c8:	3708      	adds	r7, #8
    for (const auto &item : lowPriceHours)
   b55ca:	f1a7 0308 	sub.w	r3, r7, #8
   b55ce:	4599      	cmp	r9, r3
   b55d0:	d020      	beq.n	b5614 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x94>
        if (item.hour > lastIndexedHour + 1)
   b55d2:	f817 3c08 	ldrb.w	r3, [r7, #-8]
   b55d6:	1c6a      	adds	r2, r5, #1
   b55d8:	4293      	cmp	r3, r2
   b55da:	dd0f      	ble.n	b55fc <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x7c>
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b55dc:	462a      	mov	r2, r5
   b55de:	4641      	mov	r1, r8
   b55e0:	a802      	add	r0, sp, #8
   b55e2:	f000 ffdf 	bl	b65a4 <_ZN6String6formatEPKcz>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b55e6:	a806      	add	r0, sp, #24
   b55e8:	9902      	ldr	r1, [sp, #8]
   b55ea:	f7ff fd43 	bl	b5074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b55ee:	a802      	add	r0, sp, #8
   b55f0:	f000 ff17 	bl	b6422 <_ZN6StringD1Ev>
        lastIndexedHour = item.hour;
   b55f4:	f817 5c08 	ldrb.w	r5, [r7, #-8]
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b55f8:	3708      	adds	r7, #8
      {
	++_M_current;
	return *this;
   b55fa:	e7e6      	b.n	b55ca <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x4a>
        else if (item.hour < lastIndexedHour)
   b55fc:	42ab      	cmp	r3, r5
   b55fe:	d2f9      	bcs.n	b55f4 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x74>
            if (item.hour + 24 > lastIndexedHour + 1)
   b5600:	f103 0216 	add.w	r2, r3, #22
   b5604:	42aa      	cmp	r2, r5
   b5606:	dae9      	bge.n	b55dc <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x5c>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b5608:	461a      	mov	r2, r3
   b560a:	4651      	mov	r1, sl
   b560c:	a802      	add	r0, sp, #8
   b560e:	f000 ffc9 	bl	b65a4 <_ZN6String6formatEPKcz>
   b5612:	e7e8      	b.n	b55e6 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x66>
    lowHourIntervals.append(String::format(" to %02d", lastIndexedHour));
   b5614:	462a      	mov	r2, r5
   b5616:	491d      	ldr	r1, [pc, #116]	; (b568c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x10c>)
   b5618:	a802      	add	r0, sp, #8
   b561a:	f000 ffc3 	bl	b65a4 <_ZN6String6formatEPKcz>
   b561e:	9902      	ldr	r1, [sp, #8]
   b5620:	a806      	add	r0, sp, #24
   b5622:	f7ff fd27 	bl	b5074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b5626:	a802      	add	r0, sp, #8
   b5628:	f000 fefb 	bl	b6422 <_ZN6StringD1Ev>
    newPricesReceived = false;
   b562c:	2300      	movs	r3, #0
   b562e:	7633      	strb	r3, [r6, #24]
    Serial.println("Low Price Intervals:");
   b5630:	f002 ff02 	bl	b8438 <_Z16_fetch_usbserialv>
   b5634:	4916      	ldr	r1, [pc, #88]	; (b5690 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x110>)
   b5636:	f002 f9b6 	bl	b79a6 <_ZN5Print7printlnEPKc>
    Serial.println(lowHourIntervals.c_str());
   b563a:	f002 fefd 	bl	b8438 <_Z16_fetch_usbserialv>
   b563e:	9906      	ldr	r1, [sp, #24]
   b5640:	f002 f9b1 	bl	b79a6 <_ZN5Print7printlnEPKc>
      { return _M_dataplus._M_p; }
   b5644:	9a06      	ldr	r2, [sp, #24]
	if (__str._M_is_local())
   b5646:	ad08      	add	r5, sp, #32
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5648:	f104 0308 	add.w	r3, r4, #8
	if (__str._M_is_local())
   b564c:	42aa      	cmp	r2, r5
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b564e:	6023      	str	r3, [r4, #0]
	if (__str._M_is_local())
   b5650:	d115      	bne.n	b567e <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xfe>
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   b5652:	462e      	mov	r6, r5
   b5654:	af0c      	add	r7, sp, #48	; 0x30
   b5656:	4632      	mov	r2, r6
   b5658:	ca03      	ldmia	r2!, {r0, r1}
   b565a:	42ba      	cmp	r2, r7
   b565c:	6018      	str	r0, [r3, #0]
   b565e:	6059      	str	r1, [r3, #4]
   b5660:	4616      	mov	r6, r2
   b5662:	f103 0308 	add.w	r3, r3, #8
   b5666:	d1f6      	bne.n	b5656 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xd6>
      { _M_string_length = __length; }
   b5668:	9b07      	ldr	r3, [sp, #28]
   b566a:	6063      	str	r3, [r4, #4]
      { _M_dispose(); }
   b566c:	a806      	add	r0, sp, #24
      { _M_string_length = __length; }
   b566e:	2300      	movs	r3, #0
      { _M_dataplus._M_p = __p; }
   b5670:	9506      	str	r5, [sp, #24]
      { _M_string_length = __length; }
   b5672:	9307      	str	r3, [sp, #28]
      { __c1 = __c2; }
   b5674:	f88d 3020 	strb.w	r3, [sp, #32]
      { _M_dispose(); }
   b5678:	f003 fb72 	bl	b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b567c:	e78b      	b.n	b5596 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x16>
      { _M_allocated_capacity = __capacity; }
   b567e:	9b08      	ldr	r3, [sp, #32]
      { _M_dataplus._M_p = __p; }
   b5680:	6022      	str	r2, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b5682:	60a3      	str	r3, [r4, #8]
   b5684:	e7f0      	b.n	b5668 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xe8>
   b5686:	bf00      	nop
   b5688:	000bb77f 	.word	0x000bb77f
   b568c:	000bb7a9 	.word	0x000bb7a9
   b5690:	000bb7b2 	.word	0x000bb7b2
   b5694:	000bb79c 	.word	0x000bb79c
   b5698:	000bb78d 	.word	0x000bb78d

000b569c <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b569c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b56a0:	e9d0 8900 	ldrd	r8, r9, [r0]
   b56a4:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b56a6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b56aa:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b56ae:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b56b2:	4607      	mov	r7, r0
   b56b4:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b56b6:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b56ba:	d102      	bne.n	b56c2 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b56bc:	4820      	ldr	r0, [pc, #128]	; (b5740 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
   b56be:	f003 fa5d 	bl	b8b7c <_ZSt20__throw_length_errorPKc>
   b56c2:	2c01      	cmp	r4, #1
   b56c4:	4622      	mov	r2, r4
   b56c6:	bf38      	it	cc
   b56c8:	2201      	movcc	r2, #1
   b56ca:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b56cc:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b56d0:	d231      	bcs.n	b5736 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b56d2:	b394      	cbz	r4, b573a <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
   b56d4:	429c      	cmp	r4, r3
   b56d6:	bf28      	it	cs
   b56d8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b56da:	00e0      	lsls	r0, r4, #3
   b56dc:	f7ff fa55 	bl	b4b8a <_Znwj>
   b56e0:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b56e2:	1973      	adds	r3, r6, r5
   b56e4:	bf1c      	itt	ne
   b56e6:	e9db 0100 	ldrdne	r0, r1, [fp]
   b56ea:	e9c3 0100 	strdne	r0, r1, [r3]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b56ee:	2d00      	cmp	r5, #0
   b56f0:	dd04      	ble.n	b56fc <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b56f2:	462a      	mov	r2, r5
   b56f4:	4641      	mov	r1, r8
   b56f6:	4630      	mov	r0, r6
   b56f8:	f003 fe62 	bl	b93c0 <memmove>
      ptrdiff_t __count = __last - __first;
   b56fc:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b5700:	3508      	adds	r5, #8
      if (__count > 0)
   b5702:	f1b9 0f00 	cmp.w	r9, #0
   b5706:	4435      	add	r5, r6
   b5708:	dd04      	ble.n	b5714 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b570a:	464a      	mov	r2, r9
   b570c:	4651      	mov	r1, sl
   b570e:	4628      	mov	r0, r5
   b5710:	f003 fe48 	bl	b93a4 <memcpy>
      return __result + __count;
   b5714:	444d      	add	r5, r9
	if (__p)
   b5716:	f1b8 0f00 	cmp.w	r8, #0
   b571a:	d005      	beq.n	b5728 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b571c:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b571e:	4640      	mov	r0, r8
   b5720:	eba1 0108 	sub.w	r1, r1, r8
   b5724:	f7ff fa37 	bl	b4b96 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5728:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b572c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5730:	60bc      	str	r4, [r7, #8]
    }
   b5732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5736:	461c      	mov	r4, r3
   b5738:	e7cf      	b.n	b56da <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b573a:	4626      	mov	r6, r4
   b573c:	e7d1      	b.n	b56e2 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
   b573e:	bf00      	nop
   b5740:	000bb7c7 	.word	0x000bb7c7

000b5744 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
   b5744:	b510      	push	{r4, lr}
   b5746:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5748:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   b574c:	428c      	cmp	r4, r1
      push_back(const value_type& __x)
   b574e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5750:	d008      	beq.n	b5764 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5752:	b11c      	cbz	r4, b575c <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x18>
   b5754:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5758:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b575c:	685a      	ldr	r2, [r3, #4]
   b575e:	3208      	adds	r2, #8
   b5760:	605a      	str	r2, [r3, #4]
      }
   b5762:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   b5764:	4621      	mov	r1, r4
   b5766:	f7ff ff99 	bl	b569c <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   b576a:	e7fa      	b.n	b5762 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x1e>
   b576c:	0000      	movs	r0, r0
	...

000b5770 <_ZN10PriceClass19assembleMessageDataEv>:
{
   b5770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5774:	ed2d 8b02 	vpush	{d8}
    if (!messageDataReady)
   b5778:	7e43      	ldrb	r3, [r0, #25]
{
   b577a:	b091      	sub	sp, #68	; 0x44
   b577c:	4604      	mov	r4, r0
    if (!messageDataReady)
   b577e:	b94b      	cbnz	r3, b5794 <_ZN10PriceClass19assembleMessageDataEv+0x24>
        Serial.println("Message data isn't ready yet.");
   b5780:	f002 fe5a 	bl	b8438 <_Z16_fetch_usbserialv>
   b5784:	498e      	ldr	r1, [pc, #568]	; (b59c0 <_ZN10PriceClass19assembleMessageDataEv+0x250>)
}
   b5786:	b011      	add	sp, #68	; 0x44
   b5788:	ecbd 8b02 	vpop	{d8}
   b578c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("Message data isn't ready yet.");
   b5790:	f002 b909 	b.w	b79a6 <_ZN5Print7printlnEPKc>
    std::string message = "";
   b5794:	498b      	ldr	r1, [pc, #556]	; (b59c4 <_ZN10PriceClass19assembleMessageDataEv+0x254>)
   b5796:	aa0a      	add	r2, sp, #40	; 0x28
   b5798:	a804      	add	r0, sp, #16
   b579a:	f7ff fec7 	bl	b552c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
      { return iterator(this->_M_impl._M_header._M_left); }
   b579e:	68e5      	ldr	r5, [r4, #12]
      { return iterator(&this->_M_impl._M_header); }
   b57a0:	1d27      	adds	r7, r4, #4
    for (const auto &item : messageParts)
   b57a2:	42af      	cmp	r7, r5
   b57a4:	d009      	beq.n	b57ba <_ZN10PriceClass19assembleMessageDataEv+0x4a>
      { return _M_append(__str._M_data(), __str.size()); }
   b57a6:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   b57aa:	a804      	add	r0, sp, #16
   b57ac:	f003 fbf2 	bl	b8f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
	_M_node = _Rb_tree_increment(_M_node);
   b57b0:	4628      	mov	r0, r5
   b57b2:	f003 f97b 	bl	b8aac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b57b6:	4605      	mov	r5, r0
	return *this;
   b57b8:	e7f3      	b.n	b57a2 <_ZN10PriceClass19assembleMessageDataEv+0x32>
    Serial.println("Message assembled.");
   b57ba:	f002 fe3d 	bl	b8438 <_Z16_fetch_usbserialv>
   b57be:	4982      	ldr	r1, [pc, #520]	; (b59c8 <_ZN10PriceClass19assembleMessageDataEv+0x258>)
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b57c0:	eddf 8a82 	vldr	s17, [pc, #520]	; b59cc <_ZN10PriceClass19assembleMessageDataEv+0x25c>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b57c4:	f8df 8208 	ldr.w	r8, [pc, #520]	; b59d0 <_ZN10PriceClass19assembleMessageDataEv+0x260>
    Serial.println("Message assembled.");
   b57c8:	f002 f8ed 	bl	b79a6 <_ZN5Print7printlnEPKc>
      {
	_M_check(__pos, "basic_string::erase");
	if (__n == npos)
	  this->_M_set_length(__pos);
	else if (__n != 0)
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b57cc:	9a05      	ldr	r2, [sp, #20]
   b57ce:	2a01      	cmp	r2, #1
   b57d0:	bf28      	it	cs
   b57d2:	2201      	movcs	r2, #1
   b57d4:	2100      	movs	r1, #0
   b57d6:	a804      	add	r0, sp, #16
   b57d8:	f003 fb49 	bl	b8e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b57dc:	2200      	movs	r2, #0
   b57de:	497c      	ldr	r1, [pc, #496]	; (b59d0 <_ZN10PriceClass19assembleMessageDataEv+0x260>)
   b57e0:	a804      	add	r0, sp, #16
   b57e2:	f003 fc2a 	bl	b903a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b57e6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
   b57ea:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b57ec:	bf18      	it	ne
   b57ee:	6223      	strne	r3, [r4, #32]
    currentHighest.price = 0;
   b57f0:	2300      	movs	r3, #0
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b57f2:	3001      	adds	r0, #1
    currentHighest.price = 0;
   b57f4:	63a3      	str	r3, [r4, #56]	; 0x38
    currentLowest.price = 100;
   b57f6:	4b77      	ldr	r3, [pc, #476]	; (b59d4 <_ZN10PriceClass19assembleMessageDataEv+0x264>)
   b57f8:	6423      	str	r3, [r4, #64]	; 0x40
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b57fa:	b2c5      	uxtb	r5, r0
    currentHourPrices.clear();
   b57fc:	f104 091c 	add.w	r9, r4, #28
    while (bangIndex > 0)
   b5800:	2d00      	cmp	r5, #0
   b5802:	f000 8093 	beq.w	b592c <_ZN10PriceClass19assembleMessageDataEv+0x1bc>
        indexedHourPrice.hour = stoi(message.substr(HOUR_INDEX, 2));                                      // Hour (hh) converted to int.
   b5806:	2302      	movs	r3, #2
   b5808:	220b      	movs	r2, #11
   b580a:	a904      	add	r1, sp, #16
   b580c:	a80a      	add	r0, sp, #40	; 0x28
   b580e:	f003 fc6d 	bl	b90ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b5812:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b5816:	f000 fd4f 	bl	b62b8 <__errno>
   b581a:	f8d0 b000 	ldr.w	fp, [r0]
   b581e:	f000 fd4b 	bl	b62b8 <__errno>
   b5822:	2300      	movs	r3, #0
   b5824:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5826:	220a      	movs	r2, #10
   b5828:	a901      	add	r1, sp, #4
   b582a:	4650      	mov	r0, sl
   b582c:	f004 fd60 	bl	ba2f0 <strtol>

      if (__endptr == __str)
   b5830:	9b01      	ldr	r3, [sp, #4]
   b5832:	459a      	cmp	sl, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5834:	4606      	mov	r6, r0
      if (__endptr == __str)
   b5836:	d102      	bne.n	b583e <_ZN10PriceClass19assembleMessageDataEv+0xce>
	std::__throw_invalid_argument(__name);
   b5838:	4867      	ldr	r0, [pc, #412]	; (b59d8 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b583a:	f003 f99c 	bl	b8b76 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
   b583e:	f000 fd3b 	bl	b62b8 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b5842:	6803      	ldr	r3, [r0, #0]
   b5844:	2b22      	cmp	r3, #34	; 0x22
   b5846:	d102      	bne.n	b584e <_ZN10PriceClass19assembleMessageDataEv+0xde>
	std::__throw_out_of_range(__name);
   b5848:	4863      	ldr	r0, [pc, #396]	; (b59d8 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b584a:	f003 f99a 	bl	b8b82 <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b584e:	f000 fd33 	bl	b62b8 <__errno>
   b5852:	6803      	ldr	r3, [r0, #0]
   b5854:	b91b      	cbnz	r3, b585e <_ZN10PriceClass19assembleMessageDataEv+0xee>
   b5856:	f000 fd2f 	bl	b62b8 <__errno>
   b585a:	f8c0 b000 	str.w	fp, [r0]
      { _M_dispose(); }
   b585e:	a80a      	add	r0, sp, #40	; 0x28
   b5860:	f88d 6008 	strb.w	r6, [sp, #8]
   b5864:	f003 fa7c 	bl	b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b5868:	f1a5 0315 	sub.w	r3, r5, #21
   b586c:	2214      	movs	r2, #20
   b586e:	a904      	add	r1, sp, #16
   b5870:	a80a      	add	r0, sp, #40	; 0x28
   b5872:	f003 fc3b 	bl	b90ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b5876:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b5878:	f000 fd1e 	bl	b62b8 <__errno>
   b587c:	f8d0 a000 	ldr.w	sl, [r0]
   b5880:	f000 fd1a 	bl	b62b8 <__errno>
   b5884:	2300      	movs	r3, #0
   b5886:	6003      	str	r3, [r0, #0]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5888:	a901      	add	r1, sp, #4
   b588a:	4630      	mov	r0, r6
   b588c:	f004 fc52 	bl	ba134 <strtof>
      if (__endptr == __str)
   b5890:	9b01      	ldr	r3, [sp, #4]
   b5892:	429e      	cmp	r6, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5894:	eeb0 8a40 	vmov.f32	s16, s0
      if (__endptr == __str)
   b5898:	d101      	bne.n	b589e <_ZN10PriceClass19assembleMessageDataEv+0x12e>
	std::__throw_invalid_argument(__name);
   b589a:	4850      	ldr	r0, [pc, #320]	; (b59dc <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b589c:	e7cd      	b.n	b583a <_ZN10PriceClass19assembleMessageDataEv+0xca>
      else if (errno == ERANGE
   b589e:	f000 fd0b 	bl	b62b8 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b58a2:	6803      	ldr	r3, [r0, #0]
   b58a4:	2b22      	cmp	r3, #34	; 0x22
   b58a6:	d101      	bne.n	b58ac <_ZN10PriceClass19assembleMessageDataEv+0x13c>
	std::__throw_out_of_range(__name);
   b58a8:	484c      	ldr	r0, [pc, #304]	; (b59dc <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b58aa:	e7ce      	b.n	b584a <_ZN10PriceClass19assembleMessageDataEv+0xda>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b58ac:	f000 fd04 	bl	b62b8 <__errno>
   b58b0:	6803      	ldr	r3, [r0, #0]
   b58b2:	b91b      	cbnz	r3, b58bc <_ZN10PriceClass19assembleMessageDataEv+0x14c>
   b58b4:	f000 fd00 	bl	b62b8 <__errno>
   b58b8:	f8c0 a000 	str.w	sl, [r0]
   b58bc:	eec8 7a28 	vdiv.f32	s15, s16, s17
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b58c0:	ae02      	add	r6, sp, #8
   b58c2:	a80a      	add	r0, sp, #40	; 0x28
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b58c4:	edcd 7a03 	vstr	s15, [sp, #12]
   b58c8:	f003 fa4a 	bl	b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b58cc:	4631      	mov	r1, r6
   b58ce:	4648      	mov	r0, r9
   b58d0:	f7ff ff38 	bl	b5744 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
        if (indexedHourPrice.price > currentHighest.price)
   b58d4:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   b58d8:	eddd 7a03 	vldr	s15, [sp, #12]
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b58dc:	9a05      	ldr	r2, [sp, #20]
   b58de:	eef4 7ac7 	vcmpe.f32	s15, s14
   b58e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentHighest = indexedHourPrice;
   b58e6:	bfc2      	ittt	gt
   b58e8:	e9d6 0100 	ldrdgt	r0, r1, [r6]
   b58ec:	f104 0334 	addgt.w	r3, r4, #52	; 0x34
   b58f0:	e9c3 0100 	strdgt	r0, r1, [r3]
        if (indexedHourPrice.price < currentLowest.price)
   b58f4:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   b58f8:	eef4 7ac7 	vcmpe.f32	s15, s14
   b58fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentLowest = indexedHourPrice;
   b5900:	bf42      	ittt	mi
   b5902:	e9d6 0100 	ldrdmi	r0, r1, [r6]
   b5906:	f104 033c 	addmi.w	r3, r4, #60	; 0x3c
   b590a:	e9c3 0100 	strdmi	r0, r1, [r3]
   b590e:	42aa      	cmp	r2, r5
   b5910:	bf28      	it	cs
   b5912:	462a      	movcs	r2, r5
   b5914:	2100      	movs	r1, #0
   b5916:	a804      	add	r0, sp, #16
   b5918:	f003 faa9 	bl	b8e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b591c:	2200      	movs	r2, #0
   b591e:	4641      	mov	r1, r8
   b5920:	a804      	add	r0, sp, #16
   b5922:	f003 fb8a 	bl	b903a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b5926:	3001      	adds	r0, #1
   b5928:	b2c5      	uxtb	r5, r0
    while (bangIndex > 0)
   b592a:	e769      	b.n	b5800 <_ZN10PriceClass19assembleMessageDataEv+0x90>
    double difference = currentHighest.price - currentLowest.price;
   b592c:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
   b5930:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   b5934:	ee77 7ac8 	vsub.f32	s15, s15, s16
            lowPriceHours.push_back(item);
   b5938:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    double difference = currentHighest.price - currentLowest.price;
   b593c:	ee17 0a90 	vmov	r0, s15
   b5940:	f7fe fcd2 	bl	b42e8 <__aeabi_f2d>
    double lowThreshold = currentLowest.price + difference * LOW_THRESHOLD_FACTOR;
   b5944:	a31c      	add	r3, pc, #112	; (adr r3, b59b8 <_ZN10PriceClass19assembleMessageDataEv+0x248>)
   b5946:	e9d3 2300 	ldrd	r2, r3, [r3]
   b594a:	f7fe fd25 	bl	b4398 <__aeabi_dmul>
   b594e:	4680      	mov	r8, r0
   b5950:	ee18 0a10 	vmov	r0, s16
   b5954:	4689      	mov	r9, r1
   b5956:	f7fe fcc7 	bl	b42e8 <__aeabi_f2d>
   b595a:	4602      	mov	r2, r0
   b595c:	460b      	mov	r3, r1
   b595e:	4640      	mov	r0, r8
   b5960:	4649      	mov	r1, r9
   b5962:	f7fe fb63 	bl	b402c <__adddf3>
   b5966:	e9d4 5607 	ldrd	r5, r6, [r4, #28]
   b596a:	4680      	mov	r8, r0
   b596c:	4689      	mov	r9, r1
    for (const auto &item : currentHourPrices)
   b596e:	42ae      	cmp	r6, r5
   b5970:	d00f      	beq.n	b5992 <_ZN10PriceClass19assembleMessageDataEv+0x222>
        if (item.price < lowThreshold)
   b5972:	6868      	ldr	r0, [r5, #4]
   b5974:	f7fe fcb8 	bl	b42e8 <__aeabi_f2d>
   b5978:	4602      	mov	r2, r0
   b597a:	460b      	mov	r3, r1
   b597c:	4640      	mov	r0, r8
   b597e:	4649      	mov	r1, r9
   b5980:	f7fe ff9a 	bl	b48b8 <__aeabi_dcmpgt>
   b5984:	b118      	cbz	r0, b598e <_ZN10PriceClass19assembleMessageDataEv+0x21e>
            lowPriceHours.push_back(item);
   b5986:	4629      	mov	r1, r5
   b5988:	4650      	mov	r0, sl
   b598a:	f7ff fedb 	bl	b5744 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
      operator++() _GLIBCXX_NOEXCEPT
   b598e:	3508      	adds	r5, #8
	return *this;
   b5990:	e7ed      	b.n	b596e <_ZN10PriceClass19assembleMessageDataEv+0x1fe>
    messageDataReady = false;
   b5992:	2500      	movs	r5, #0
	_M_erase(_M_begin());
   b5994:	68a0      	ldr	r0, [r4, #8]
   b5996:	7665      	strb	r5, [r4, #25]
   b5998:	f7ff fb97 	bl	b50ca <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
    newPricesReceived = true;
   b599c:	2301      	movs	r3, #1
      _M_header._M_left = &_M_header;
   b599e:	e9c4 5702 	strd	r5, r7, [r4, #8]
      _M_node_count = 0;
   b59a2:	e9c4 7504 	strd	r7, r5, [r4, #16]
   b59a6:	7623      	strb	r3, [r4, #24]
      { _M_dispose(); }
   b59a8:	a804      	add	r0, sp, #16
   b59aa:	f003 f9d9 	bl	b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
   b59ae:	b011      	add	sp, #68	; 0x44
   b59b0:	ecbd 8b02 	vpop	{d8}
   b59b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b59b8:	33333333 	.word	0x33333333
   b59bc:	3fd33333 	.word	0x3fd33333
   b59c0:	000bb7e1 	.word	0x000bb7e1
   b59c4:	000bbdbc 	.word	0x000bbdbc
   b59c8:	000bb7ff 	.word	0x000bb7ff
   b59cc:	447a0000 	.word	0x447a0000
   b59d0:	000bb91a 	.word	0x000bb91a
   b59d4:	42c80000 	.word	0x42c80000
   b59d8:	000bb812 	.word	0x000bb812
   b59dc:	000bb817 	.word	0x000bb817

000b59e0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b59e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b59e2:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b59e4:	4616      	mov	r6, r2
   b59e6:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b59e8:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b59ea:	2201      	movs	r2, #1
      while (__x != 0)
   b59ec:	b163      	cbz	r3, b5a08 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x28>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b59ee:	7c1d      	ldrb	r5, [r3, #16]
   b59f0:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b59f2:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b59f6:	4295      	cmp	r5, r2
   b59f8:	bf88      	it	hi
   b59fa:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b59fc:	461d      	mov	r5, r3
   b59fe:	bf96      	itet	ls
   b5a00:	2200      	movls	r2, #0
   b5a02:	463b      	movhi	r3, r7
   b5a04:	4603      	movls	r3, r0
   b5a06:	e7f1      	b.n	b59ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xc>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b5a08:	b192      	cbz	r2, b5a30 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x50>
	{
	  if (__j == begin())
   b5a0a:	68ca      	ldr	r2, [r1, #12]
   b5a0c:	42aa      	cmp	r2, r5
   b5a0e:	d103      	bne.n	b5a18 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b5a10:	e9c4 3500 	strd	r3, r5, [r4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b5a14:	4620      	mov	r0, r4
   b5a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b5a18:	4628      	mov	r0, r5
   b5a1a:	f003 f849 	bl	b8ab0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b5a1e:	7833      	ldrb	r3, [r6, #0]
   b5a20:	7c02      	ldrb	r2, [r0, #16]
   b5a22:	429a      	cmp	r2, r3
   b5a24:	f04f 0300 	mov.w	r3, #0
   b5a28:	d3f2      	bcc.n	b5a10 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b5a2a:	e9c4 0300 	strd	r0, r3, [r4]
   b5a2e:	e7f1      	b.n	b5a14 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x34>
   b5a30:	4628      	mov	r0, r5
   b5a32:	e7f4      	b.n	b5a1e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x3e>

000b5a34 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_>:
{
   b5a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    messageDataReady = false;
   b5a38:	2300      	movs	r3, #0
   b5a3a:	7643      	strb	r3, [r0, #25]
      { return &this->_M_impl._M_header; }
   b5a3c:	f100 0a04 	add.w	sl, r0, #4
    messageParts[pricesEvent[7]] = data;
   b5a40:	f891 8007 	ldrb.w	r8, [r1, #7]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5a44:	6887      	ldr	r7, [r0, #8]
{
   b5a46:	b086      	sub	sp, #24
   b5a48:	4605      	mov	r5, r0
   b5a4a:	4691      	mov	r9, r2
      { return &this->_M_impl._M_header; }
   b5a4c:	4654      	mov	r4, sl
      while (__x != 0)
   b5a4e:	b147      	cbz	r7, b5a62 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x2e>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5a50:	7c39      	ldrb	r1, [r7, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5a52:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5a56:	4541      	cmp	r1, r8
   b5a58:	bf2a      	itet	cs
   b5a5a:	463c      	movcs	r4, r7
   b5a5c:	4617      	movcc	r7, r2
   b5a5e:	461f      	movcs	r7, r3
   b5a60:	e7f5      	b.n	b5a4e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x1a>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b5a62:	45a2      	cmp	sl, r4
   b5a64:	d002      	beq.n	b5a6c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x38>
   b5a66:	7c23      	ldrb	r3, [r4, #16]
   b5a68:	4543      	cmp	r3, r8
   b5a6a:	d931      	bls.n	b5ad0 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5a6c:	202c      	movs	r0, #44	; 0x2c
   b5a6e:	f7ff f88c 	bl	b4b8a <_Znwj>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5a72:	f100 031c 	add.w	r3, r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5a76:	6143      	str	r3, [r0, #20]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b5a78:	45a2      	cmp	sl, r4
      { _M_string_length = __length; }
   b5a7a:	f04f 0300 	mov.w	r3, #0
   b5a7e:	4606      	mov	r6, r0
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b5a80:	f880 8010 	strb.w	r8, [r0, #16]
   b5a84:	6183      	str	r3, [r0, #24]
   b5a86:	7703      	strb	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b5a88:	f100 0210 	add.w	r2, r0, #16
   b5a8c:	d13c      	bne.n	b5b08 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xd4>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b5a8e:	696b      	ldr	r3, [r5, #20]
   b5a90:	b11b      	cbz	r3, b5a9a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x66>
   b5a92:	6929      	ldr	r1, [r5, #16]
   b5a94:	7c0b      	ldrb	r3, [r1, #16]
   b5a96:	4543      	cmp	r3, r8
   b5a98:	d309      	bcc.n	b5aae <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x7a>
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   b5a9a:	4629      	mov	r1, r5
   b5a9c:	a804      	add	r0, sp, #16
   b5a9e:	f7ff ff9f 	bl	b59e0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5aa2:	e9dd 4104 	ldrd	r4, r1, [sp, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b5aa6:	2900      	cmp	r1, #0
   b5aa8:	d068      	beq.n	b5b7c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5aaa:	2c00      	cmp	r4, #0
   b5aac:	d164      	bne.n	b5b78 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b5aae:	458a      	cmp	sl, r1
   b5ab0:	d062      	beq.n	b5b78 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5ab2:	7c30      	ldrb	r0, [r6, #16]
   b5ab4:	7c0b      	ldrb	r3, [r1, #16]
   b5ab6:	4298      	cmp	r0, r3
   b5ab8:	bf2c      	ite	cs
   b5aba:	2000      	movcs	r0, #0
   b5abc:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b5abe:	4653      	mov	r3, sl
   b5ac0:	460a      	mov	r2, r1
   b5ac2:	4631      	mov	r1, r6
   b5ac4:	f002 fff6 	bl	b8ab4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b5ac8:	696b      	ldr	r3, [r5, #20]
   b5aca:	3301      	adds	r3, #1
   b5acc:	616b      	str	r3, [r5, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b5ace:	4634      	mov	r4, r6
	return __builtin_strlen(__s);
   b5ad0:	4648      	mov	r0, r9
   b5ad2:	f7fe ffff 	bl	b4ad4 <strlen>
	return _M_replace(size_type(0), this->size(), __s,
   b5ad6:	9000      	str	r0, [sp, #0]
   b5ad8:	69a2      	ldr	r2, [r4, #24]
   b5ada:	464b      	mov	r3, r9
   b5adc:	2100      	movs	r1, #0
   b5ade:	f104 0014 	add.w	r0, r4, #20
   b5ae2:	f003 f9d9 	bl	b8e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
    if (strlen(data) < 512)
   b5ae6:	4648      	mov	r0, r9
   b5ae8:	f7fe fff4 	bl	b4ad4 <strlen>
   b5aec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   b5af0:	d24e      	bcs.n	b5b90 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x15c>
        newPricesReceived = false; // New prices not assembled yet.
   b5af2:	f44f 7380 	mov.w	r3, #256	; 0x100
   b5af6:	832b      	strh	r3, [r5, #24]
        Serial.println("Message Data Received.");
   b5af8:	f002 fc9e 	bl	b8438 <_Z16_fetch_usbserialv>
   b5afc:	4926      	ldr	r1, [pc, #152]	; (b5b98 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x164>)
}
   b5afe:	b006      	add	sp, #24
   b5b00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Serial.println("Message Data Received.");
   b5b04:	f001 bf4f 	b.w	b79a6 <_ZN5Print7printlnEPKc>
      { return __x < __y; }
   b5b08:	7c23      	ldrb	r3, [r4, #16]
   b5b0a:	9203      	str	r2, [sp, #12]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b5b0c:	4598      	cmp	r8, r3
   b5b0e:	d218      	bcs.n	b5b42 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10e>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b5b10:	68eb      	ldr	r3, [r5, #12]
   b5b12:	429c      	cmp	r4, r3
   b5b14:	d009      	beq.n	b5b2a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
	_M_node = _Rb_tree_decrement(_M_node);
   b5b16:	4620      	mov	r0, r4
   b5b18:	f002 ffca 	bl	b8ab0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b5b1c:	7c03      	ldrb	r3, [r0, #16]
   b5b1e:	9a03      	ldr	r2, [sp, #12]
   b5b20:	4543      	cmp	r3, r8
   b5b22:	d205      	bcs.n	b5b30 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xfc>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5b24:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b5b26:	b953      	cbnz	r3, b5b3e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10a>
   b5b28:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b5b2a:	4621      	mov	r1, r4
   b5b2c:	461c      	mov	r4, r3
   b5b2e:	e7ba      	b.n	b5aa6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5b30:	4629      	mov	r1, r5
   b5b32:	a804      	add	r0, sp, #16
   b5b34:	f7ff ff54 	bl	b59e0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5b38:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   b5b3c:	e7f5      	b.n	b5b2a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
   b5b3e:	4623      	mov	r3, r4
   b5b40:	e7f3      	b.n	b5b2a <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b5b42:	d91b      	bls.n	b5b7c <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
	  if (__pos._M_node == _M_rightmost())
   b5b44:	6929      	ldr	r1, [r5, #16]
   b5b46:	428c      	cmp	r4, r1
   b5b48:	d00b      	beq.n	b5b62 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
	_M_node = _Rb_tree_increment(_M_node);
   b5b4a:	4620      	mov	r0, r4
   b5b4c:	f002 ffae 	bl	b8aac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5b50:	7c03      	ldrb	r3, [r0, #16]
   b5b52:	9a03      	ldr	r2, [sp, #12]
   b5b54:	4543      	cmp	r3, r8
	_M_node = _Rb_tree_increment(_M_node);
   b5b56:	4607      	mov	r7, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5b58:	d905      	bls.n	b5b66 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x132>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5b5a:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b5b5c:	b953      	cbnz	r3, b5b74 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x140>
   b5b5e:	4621      	mov	r1, r4
   b5b60:	461f      	mov	r7, r3
   b5b62:	463c      	mov	r4, r7
   b5b64:	e79f      	b.n	b5aa6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5b66:	4629      	mov	r1, r5
   b5b68:	a804      	add	r0, sp, #16
   b5b6a:	f7ff ff39 	bl	b59e0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5b6e:	e9dd 7104 	ldrd	r7, r1, [sp, #16]
   b5b72:	e7f6      	b.n	b5b62 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
   b5b74:	4601      	mov	r1, r0
   b5b76:	e7f4      	b.n	b5b62 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5b78:	2001      	movs	r0, #1
   b5b7a:	e7a0      	b.n	b5abe <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x8a>
      { _M_dispose(); }
   b5b7c:	f106 0014 	add.w	r0, r6, #20
   b5b80:	f003 f8ee 	bl	b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	::operator delete(__p
   b5b84:	4630      	mov	r0, r6
   b5b86:	212c      	movs	r1, #44	; 0x2c
   b5b88:	f7ff f805 	bl	b4b96 <_ZdlPvj>
   b5b8c:	4626      	mov	r6, r4
   b5b8e:	e79e      	b.n	b5ace <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9a>
}
   b5b90:	b006      	add	sp, #24
   b5b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5b96:	bf00      	nop
   b5b98:	000bb81c 	.word	0x000bb81c

000b5b9c <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
        val_(val) {
   b5b9c:	4b01      	ldr	r3, [pc, #4]	; (b5ba4 <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b5b9e:	2200      	movs	r2, #0
   b5ba0:	701a      	strb	r2, [r3, #0]
   b5ba2:	4770      	bx	lr
   b5ba4:	2003e5dc 	.word	0x2003e5dc

000b5ba8 <_ZN6Sensor9sensorISREv>:
/// @brief Sensor Interrupt Service Rutine - run when sensor activates the sensor pin.
// This updates the time since last activation, and the time difference (delta) is
// used to calculate a power reading.
// ###################################################################################
void Sensor::sensorISR(void)
{
   b5ba8:	b510      	push	{r4, lr}
   b5baa:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5bac:	f000 f8ae 	bl	b5d0c <HAL_Timer_Get_Milli_Seconds>
    unsigned long timeNow = millis();
    unsigned long delta = timeNow - lastReadTime;
   b5bb0:	6823      	ldr	r3, [r4, #0]
   b5bb2:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b5bb4:	2b64      	cmp	r3, #100	; 0x64
   b5bb6:	d906      	bls.n	b5bc6 <_ZN6Sensor9sensorISREv+0x1e>
    {
        currentPowerReading = WATT_CONVERSION_CONSTANT / delta;
   b5bb8:	4a03      	ldr	r2, [pc, #12]	; (b5bc8 <_ZN6Sensor9sensorISREv+0x20>)
   b5bba:	fbb2 f3f3 	udiv	r3, r2, r3
        lastReadTime = timeNow;
   b5bbe:	e9c4 0300 	strd	r0, r3, [r4]
        newReadingAvaliable = true;
   b5bc2:	2301      	movs	r3, #1
   b5bc4:	7223      	strb	r3, [r4, #8]
    }
}
   b5bc6:	bd10      	pop	{r4, pc}
   b5bc8:	0036ee80 	.word	0x0036ee80

000b5bcc <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5bcc:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b5bce:	6803      	ldr	r3, [r0, #0]
   b5bd0:	685a      	ldr	r2, [r3, #4]
   b5bd2:	6899      	ldr	r1, [r3, #8]
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	1054      	asrs	r4, r2, #1
   b5bd8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b5bdc:	07d2      	lsls	r2, r2, #31
   b5bde:	bf48      	it	mi
   b5be0:	590a      	ldrmi	r2, [r1, r4]
      }
   b5be2:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5be6:	bf48      	it	mi
   b5be8:	58d3      	ldrmi	r3, [r2, r3]
   b5bea:	4718      	bx	r3

000b5bec <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b5bec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5bee:	b538      	push	{r3, r4, r5, lr}
   b5bf0:	4604      	mov	r4, r0
	switch (__op)
   b5bf2:	d102      	bne.n	b5bfa <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5bf4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5bf6:	6023      	str	r3, [r4, #0]
	}
   b5bf8:	e003      	b.n	b5c02 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b5bfa:	2a02      	cmp	r2, #2
   b5bfc:	d003      	beq.n	b5c06 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b5bfe:	2a03      	cmp	r2, #3
   b5c00:	d00d      	beq.n	b5c1e <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b5c02:	2000      	movs	r0, #0
   b5c04:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c06:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b5c08:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c0a:	f7fe ffbe 	bl	b4b8a <_Znwj>
   b5c0e:	4603      	mov	r3, r0
   b5c10:	2800      	cmp	r0, #0
   b5c12:	d0f0      	beq.n	b5bf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b5c14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5c18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5c1c:	e7eb      	b.n	b5bf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5c1e:	6800      	ldr	r0, [r0, #0]
   b5c20:	2800      	cmp	r0, #0
   b5c22:	d0ee      	beq.n	b5c02 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b5c24:	210c      	movs	r1, #12
   b5c26:	f7fe ffb6 	bl	b4b96 <_ZdlPvj>
   b5c2a:	e7ea      	b.n	b5c02 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b5c2c <_ZN6Sensor10initSensorEv>:

// ##############################################################
/// @brief Initialization. Sets up the sensor pin, and interrupt.
// ##############################################################
void Sensor::initSensor()
{
   b5c2c:	b530      	push	{r4, r5, lr}
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5c2e:	2103      	movs	r1, #3
{
   b5c30:	b087      	sub	sp, #28
   b5c32:	4604      	mov	r4, r0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5c34:	2008      	movs	r0, #8
   b5c36:	f002 fe57 	bl	b88e8 <pinMode>
    _Function_base() : _M_manager(nullptr) { }
   b5c3a:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c3c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5c3e:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c40:	f7fe ffa3 	bl	b4b8a <_Znwj>
   b5c44:	b118      	cbz	r0, b5c4e <_ZN6Sensor10initSensorEv+0x22>
   b5c46:	4b0f      	ldr	r3, [pc, #60]	; (b5c84 <_ZN6Sensor10initSensorEv+0x58>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5c48:	6084      	str	r4, [r0, #8]
   b5c4a:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b5c4e:	4b0e      	ldr	r3, [pc, #56]	; (b5c88 <_ZN6Sensor10initSensorEv+0x5c>)
   b5c50:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5c52:	4b0e      	ldr	r3, [pc, #56]	; (b5c8c <_ZN6Sensor10initSensorEv+0x60>)
   b5c54:	9304      	str	r3, [sp, #16]
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b5c56:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c58:	9002      	str	r0, [sp, #8]
   b5c5a:	9300      	str	r3, [sp, #0]
   b5c5c:	2201      	movs	r2, #1
   b5c5e:	f04f 33ff 	mov.w	r3, #4294967295
   b5c62:	a902      	add	r1, sp, #8
   b5c64:	2008      	movs	r0, #8
   b5c66:	f002 fc3b 	bl	b84e0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b5c6a:	9b04      	ldr	r3, [sp, #16]
   b5c6c:	b11b      	cbz	r3, b5c76 <_ZN6Sensor10initSensorEv+0x4a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5c6e:	a902      	add	r1, sp, #8
   b5c70:	2203      	movs	r2, #3
   b5c72:	4608      	mov	r0, r1
   b5c74:	4798      	blx	r3
   b5c76:	f000 f849 	bl	b5d0c <HAL_Timer_Get_Milli_Seconds>
    attachInterrupt(KW_SENSOR_PIN, &Sensor::sensorISR, this, RISING); // Attach interrup that will be called when rising
    lastReadTime = millis();
    newReadingAvaliable = false;
   b5c7a:	2300      	movs	r3, #0
    lastReadTime = millis();
   b5c7c:	6020      	str	r0, [r4, #0]
    newReadingAvaliable = false;
   b5c7e:	7223      	strb	r3, [r4, #8]
}
   b5c80:	b007      	add	sp, #28
   b5c82:	bd30      	pop	{r4, r5, pc}
   b5c84:	000b5ba9 	.word	0x000b5ba9
   b5c88:	000b5bcd 	.word	0x000b5bcd
   b5c8c:	000b5bed 	.word	0x000b5bed

000b5c90 <_ZN6Sensor17getCurrentReadingEv>:
// ###############################################################
/// @brief Method for getting the current calculated power reading
// ###############################################################
int Sensor::getCurrentReading()
{
    newReadingAvaliable = false;
   b5c90:	2300      	movs	r3, #0
   b5c92:	7203      	strb	r3, [r0, #8]
    return currentPowerReading;
}
   b5c94:	6840      	ldr	r0, [r0, #4]
   b5c96:	4770      	bx	lr

000b5c98 <_ZN6Sensor18checkForNewReadingEv>:
// Since the last one was read.
// ##################################################################
bool Sensor::checkForNewReading()
{
    return newReadingAvaliable;
   b5c98:	7a00      	ldrb	r0, [r0, #8]
   b5c9a:	4770      	bx	lr

000b5c9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4b02      	ldr	r3, [pc, #8]	; (b5ca8 <netdb_freeaddrinfo+0xc>)
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	689b      	ldr	r3, [r3, #8]
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	bd08      	pop	{r3, pc}
   b5ca8:	00030268 	.word	0x00030268

000b5cac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5cac:	b508      	push	{r3, lr}
   b5cae:	4b02      	ldr	r3, [pc, #8]	; (b5cb8 <netdb_getaddrinfo+0xc>)
   b5cb0:	681b      	ldr	r3, [r3, #0]
   b5cb2:	68db      	ldr	r3, [r3, #12]
   b5cb4:	9301      	str	r3, [sp, #4]
   b5cb6:	bd08      	pop	{r3, pc}
   b5cb8:	00030268 	.word	0x00030268

000b5cbc <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5cbc:	b508      	push	{r3, lr}
   b5cbe:	4b02      	ldr	r3, [pc, #8]	; (b5cc8 <hal_gpio_mode+0xc>)
   b5cc0:	681b      	ldr	r3, [r3, #0]
   b5cc2:	689b      	ldr	r3, [r3, #8]
   b5cc4:	9301      	str	r3, [sp, #4]
   b5cc6:	bd08      	pop	{r3, pc}
   b5cc8:	0003022c 	.word	0x0003022c

000b5ccc <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5ccc:	b508      	push	{r3, lr}
   b5cce:	4b02      	ldr	r3, [pc, #8]	; (b5cd8 <hal_interrupt_attach+0xc>)
   b5cd0:	681b      	ldr	r3, [r3, #0]
   b5cd2:	699b      	ldr	r3, [r3, #24]
   b5cd4:	9301      	str	r3, [sp, #4]
   b5cd6:	bd08      	pop	{r3, pc}
   b5cd8:	0003022c 	.word	0x0003022c

000b5cdc <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5cdc:	b508      	push	{r3, lr}
   b5cde:	4b02      	ldr	r3, [pc, #8]	; (b5ce8 <hal_interrupt_detach+0xc>)
   b5ce0:	681b      	ldr	r3, [r3, #0]
   b5ce2:	69db      	ldr	r3, [r3, #28]
   b5ce4:	9301      	str	r3, [sp, #4]
   b5ce6:	bd08      	pop	{r3, pc}
   b5ce8:	0003022c 	.word	0x0003022c

000b5cec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5cec:	b508      	push	{r3, lr}
   b5cee:	4b02      	ldr	r3, [pc, #8]	; (b5cf8 <HAL_RNG_GetRandomNumber+0xc>)
   b5cf0:	681b      	ldr	r3, [r3, #0]
   b5cf2:	685b      	ldr	r3, [r3, #4]
   b5cf4:	9301      	str	r3, [sp, #4]
   b5cf6:	bd08      	pop	{r3, pc}
   b5cf8:	00030218 	.word	0x00030218

000b5cfc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5cfc:	b508      	push	{r3, lr}
   b5cfe:	4b02      	ldr	r3, [pc, #8]	; (b5d08 <HAL_Delay_Microseconds+0xc>)
   b5d00:	681b      	ldr	r3, [r3, #0]
   b5d02:	68db      	ldr	r3, [r3, #12]
   b5d04:	9301      	str	r3, [sp, #4]
   b5d06:	bd08      	pop	{r3, pc}
   b5d08:	00030218 	.word	0x00030218

000b5d0c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5d0c:	b508      	push	{r3, lr}
   b5d0e:	4b02      	ldr	r3, [pc, #8]	; (b5d18 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5d10:	681b      	ldr	r3, [r3, #0]
   b5d12:	695b      	ldr	r3, [r3, #20]
   b5d14:	9301      	str	r3, [sp, #4]
   b5d16:	bd08      	pop	{r3, pc}
   b5d18:	00030218 	.word	0x00030218

000b5d1c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <hal_rtc_time_is_valid+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	00030218 	.word	0x00030218

000b5d2c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <hal_rtc_get_time+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	00030218 	.word	0x00030218

000b5d3c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <hal_ble_stack_init+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	689b      	ldr	r3, [r3, #8]
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	00030278 	.word	0x00030278

000b5d4c <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <hal_ble_select_antenna+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	691b      	ldr	r3, [r3, #16]
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	00030278 	.word	0x00030278

000b5d5c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <hal_ble_gap_set_advertising_data+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030278 	.word	0x00030278

000b5d6c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <hal_ble_gap_set_scan_response_data+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030278 	.word	0x00030278

000b5d7c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <hal_ble_gap_start_advertising+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030278 	.word	0x00030278

000b5d8c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b03      	ldr	r3, [pc, #12]	; (b5d9c <hal_ble_gap_disconnect+0x10>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5d96:	9301      	str	r3, [sp, #4]
   b5d98:	bd08      	pop	{r3, pc}
   b5d9a:	0000      	.short	0x0000
   b5d9c:	00030278 	.word	0x00030278

000b5da0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b03      	ldr	r3, [pc, #12]	; (b5db0 <hal_ble_gatt_server_add_service+0x10>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5daa:	9301      	str	r3, [sp, #4]
   b5dac:	bd08      	pop	{r3, pc}
   b5dae:	0000      	.short	0x0000
   b5db0:	00030278 	.word	0x00030278

000b5db4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5db4:	b508      	push	{r3, lr}
   b5db6:	4b03      	ldr	r3, [pc, #12]	; (b5dc4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5db8:	681b      	ldr	r3, [r3, #0]
   b5dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5dbe:	9301      	str	r3, [sp, #4]
   b5dc0:	bd08      	pop	{r3, pc}
   b5dc2:	0000      	.short	0x0000
   b5dc4:	00030278 	.word	0x00030278

000b5dc8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5dc8:	b508      	push	{r3, lr}
   b5dca:	4b03      	ldr	r3, [pc, #12]	; (b5dd8 <hal_ble_gatt_client_write_with_response+0x10>)
   b5dcc:	681b      	ldr	r3, [r3, #0]
   b5dce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5dd2:	9301      	str	r3, [sp, #4]
   b5dd4:	bd08      	pop	{r3, pc}
   b5dd6:	0000      	.short	0x0000
   b5dd8:	00030278 	.word	0x00030278

000b5ddc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b03      	ldr	r3, [pc, #12]	; (b5dec <hal_ble_gatt_client_write_without_response+0x10>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5de6:	9301      	str	r3, [sp, #4]
   b5de8:	bd08      	pop	{r3, pc}
   b5dea:	0000      	.short	0x0000
   b5dec:	00030278 	.word	0x00030278

000b5df0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b03      	ldr	r3, [pc, #12]	; (b5e00 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5dfa:	9301      	str	r3, [sp, #4]
   b5dfc:	bd08      	pop	{r3, pc}
   b5dfe:	0000      	.short	0x0000
   b5e00:	00030278 	.word	0x00030278

000b5e04 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5e04:	b508      	push	{r3, lr}
   b5e06:	4b03      	ldr	r3, [pc, #12]	; (b5e14 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5e08:	681b      	ldr	r3, [r3, #0]
   b5e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5e0e:	9301      	str	r3, [sp, #4]
   b5e10:	bd08      	pop	{r3, pc}
   b5e12:	0000      	.short	0x0000
   b5e14:	00030278 	.word	0x00030278

000b5e18 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b03      	ldr	r3, [pc, #12]	; (b5e28 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5e22:	9301      	str	r3, [sp, #4]
   b5e24:	bd08      	pop	{r3, pc}
   b5e26:	0000      	.short	0x0000
   b5e28:	00030278 	.word	0x00030278

000b5e2c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b03      	ldr	r3, [pc, #12]	; (b5e3c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5e36:	9301      	str	r3, [sp, #4]
   b5e38:	bd08      	pop	{r3, pc}
   b5e3a:	0000      	.short	0x0000
   b5e3c:	00030278 	.word	0x00030278

000b5e40 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <os_thread_yield+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	68db      	ldr	r3, [r3, #12]
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	00030248 	.word	0x00030248

000b5e50 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <os_thread_scheduling+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	69db      	ldr	r3, [r3, #28]
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	00030248 	.word	0x00030248

000b5e60 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <os_timer_create+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	6a1b      	ldr	r3, [r3, #32]
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	00030248 	.word	0x00030248

000b5e70 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <os_timer_destroy+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	00030248 	.word	0x00030248

000b5e80 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <os_timer_get_id+0xc>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e88:	9301      	str	r3, [sp, #4]
   b5e8a:	bd08      	pop	{r3, pc}
   b5e8c:	00030248 	.word	0x00030248

000b5e90 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <os_timer_change+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	00030248 	.word	0x00030248

000b5ea0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <os_mutex_recursive_create+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	00030248 	.word	0x00030248

000b5eb0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <os_mutex_recursive_lock+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	00030248 	.word	0x00030248

000b5ec0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <os_mutex_recursive_unlock+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	00030248 	.word	0x00030248

000b5ed0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <os_timer_set_id+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	00030248 	.word	0x00030248

000b5ee0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b02      	ldr	r3, [pc, #8]	; (b5eec <inet_inet_ntop+0xc>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	695b      	ldr	r3, [r3, #20]
   b5ee8:	9301      	str	r3, [sp, #4]
   b5eea:	bd08      	pop	{r3, pc}
   b5eec:	00030264 	.word	0x00030264

000b5ef0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5ef0:	b508      	push	{r3, lr}
   b5ef2:	4b02      	ldr	r3, [pc, #8]	; (b5efc <hal_usart_write+0xc>)
   b5ef4:	681b      	ldr	r3, [r3, #0]
   b5ef6:	68db      	ldr	r3, [r3, #12]
   b5ef8:	9301      	str	r3, [sp, #4]
   b5efa:	bd08      	pop	{r3, pc}
   b5efc:	0003023c 	.word	0x0003023c

000b5f00 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <hal_usart_available+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	691b      	ldr	r3, [r3, #16]
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	0003023c 	.word	0x0003023c

000b5f10 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <hal_usart_read+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	695b      	ldr	r3, [r3, #20]
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	0003023c 	.word	0x0003023c

000b5f20 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <hal_usart_peek+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	699b      	ldr	r3, [r3, #24]
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	0003023c 	.word	0x0003023c

000b5f30 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <hal_usart_flush+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	69db      	ldr	r3, [r3, #28]
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	0003023c 	.word	0x0003023c

000b5f40 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <hal_usart_is_enabled+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	6a1b      	ldr	r3, [r3, #32]
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	0003023c 	.word	0x0003023c

000b5f50 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <hal_usart_available_data_for_write+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	0003023c 	.word	0x0003023c

000b5f60 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <hal_usart_init_ex+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	0003023c 	.word	0x0003023c

000b5f70 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <hal_i2c_write+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	6a1b      	ldr	r3, [r3, #32]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030228 	.word	0x00030228

000b5f80 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <hal_i2c_available+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030228 	.word	0x00030228

000b5f90 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <hal_i2c_read+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030228 	.word	0x00030228

000b5fa0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <hal_i2c_peek+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	00030228 	.word	0x00030228

000b5fb0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <hal_i2c_flush+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	00030228 	.word	0x00030228

000b5fc0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <hal_i2c_is_enabled+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	00030228 	.word	0x00030228

000b5fd0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <hal_i2c_init+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	00030228 	.word	0x00030228

000b5fe0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <hal_spi_init+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	69db      	ldr	r3, [r3, #28]
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	00030230 	.word	0x00030230

000b5ff0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <hal_spi_is_enabled+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	6a1b      	ldr	r3, [r3, #32]
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	00030230 	.word	0x00030230

000b6000 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <HAL_USB_USART_Init+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	681b      	ldr	r3, [r3, #0]
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	0003024c 	.word	0x0003024c

000b6010 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <HAL_USB_USART_Available_Data+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	691b      	ldr	r3, [r3, #16]
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	0003024c 	.word	0x0003024c

000b6020 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	695b      	ldr	r3, [r3, #20]
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	0003024c 	.word	0x0003024c

000b6030 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <HAL_USB_USART_Receive_Data+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	699b      	ldr	r3, [r3, #24]
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	0003024c 	.word	0x0003024c

000b6040 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <HAL_USB_USART_Send_Data+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	69db      	ldr	r3, [r3, #28]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	0003024c 	.word	0x0003024c

000b6050 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <HAL_USB_USART_Flush_Data+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	6a1b      	ldr	r3, [r3, #32]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	0003024c 	.word	0x0003024c

000b6060 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <panic_+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	00030260 	.word	0x00030260

000b6070 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <log_message+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	00030260 	.word	0x00030260

000b6080 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <system_mode+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	681b      	ldr	r3, [r3, #0]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030220 	.word	0x00030220

000b6090 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <set_system_mode+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	685b      	ldr	r3, [r3, #4]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030220 	.word	0x00030220

000b60a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <system_delay_ms+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	695b      	ldr	r3, [r3, #20]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030220 	.word	0x00030220

000b60b0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <system_thread_set_state+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030220 	.word	0x00030220

000b60c0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <application_thread_current+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030220 	.word	0x00030220

000b60d0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <application_thread_invoke+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030220 	.word	0x00030220

000b60e0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <system_thread_get_state+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030220 	.word	0x00030220

000b60f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b03      	ldr	r3, [pc, #12]	; (b6100 <system_ctrl_set_app_request_handler+0x10>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b60fa:	9301      	str	r3, [sp, #4]
   b60fc:	bd08      	pop	{r3, pc}
   b60fe:	0000      	.short	0x0000
   b6100:	00030220 	.word	0x00030220

000b6104 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b03      	ldr	r3, [pc, #12]	; (b6114 <system_ctrl_set_result+0x10>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b610e:	9301      	str	r3, [sp, #4]
   b6110:	bd08      	pop	{r3, pc}
   b6112:	0000      	.short	0x0000
   b6114:	00030220 	.word	0x00030220

000b6118 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <network_connect+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	685b      	ldr	r3, [r3, #4]
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	00030240 	.word	0x00030240

000b6128 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <network_connecting+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	689b      	ldr	r3, [r3, #8]
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	00030240 	.word	0x00030240

000b6138 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <network_disconnect+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	68db      	ldr	r3, [r3, #12]
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	00030240 	.word	0x00030240

000b6148 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <network_ready+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	691b      	ldr	r3, [r3, #16]
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	00030240 	.word	0x00030240

000b6158 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <network_on+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	695b      	ldr	r3, [r3, #20]
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	00030240 	.word	0x00030240

000b6168 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <network_off+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	699b      	ldr	r3, [r3, #24]
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	00030240 	.word	0x00030240

000b6178 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <network_listen+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	69db      	ldr	r3, [r3, #28]
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	00030240 	.word	0x00030240

000b6188 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <network_listening+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	6a1b      	ldr	r3, [r3, #32]
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	00030240 	.word	0x00030240

000b6198 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <network_set_listen_timeout+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	00030240 	.word	0x00030240

000b61a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <network_get_listen_timeout+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	00030240 	.word	0x00030240

000b61b8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <network_is_on+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	00030240 	.word	0x00030240

000b61c8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <network_is_off+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	00030240 	.word	0x00030240

000b61d8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <spark_process+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	689b      	ldr	r3, [r3, #8]
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	00030244 	.word	0x00030244

000b61e8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <spark_cloud_flag_connected+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	695b      	ldr	r3, [r3, #20]
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	00030244 	.word	0x00030244

000b61f8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <spark_send_event+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	6a1b      	ldr	r3, [r3, #32]
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	00030244 	.word	0x00030244

000b6208 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <spark_subscribe+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	00030244 	.word	0x00030244

000b6218 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <spark_sync_time_pending+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	00030244 	.word	0x00030244

000b6228 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <spark_set_random_seed_from_cloud_handler+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	00030244 	.word	0x00030244

000b6238 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <malloc+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	681b      	ldr	r3, [r3, #0]
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	0003021c 	.word	0x0003021c

000b6248 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <free+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	685b      	ldr	r3, [r3, #4]
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	0003021c 	.word	0x0003021c

000b6258 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <realloc+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	689b      	ldr	r3, [r3, #8]
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	0003021c 	.word	0x0003021c

000b6268 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <sprintf+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	68db      	ldr	r3, [r3, #12]
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	0003021c 	.word	0x0003021c

000b6278 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <siprintf+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	691b      	ldr	r3, [r3, #16]
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	0003021c 	.word	0x0003021c

000b6288 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <vsnprintf+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	0003021c 	.word	0x0003021c

000b6298 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <abort+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	0003021c 	.word	0x0003021c

000b62a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <_malloc_r+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	0003021c 	.word	0x0003021c

000b62b8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <__errno+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	0003021c 	.word	0x0003021c

000b62c8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <__assert_func+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	0003021c 	.word	0x0003021c

000b62d8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <newlib_impure_ptr_callback+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	0003021c 	.word	0x0003021c

000b62e8 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <localtime_r+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	0003021c 	.word	0x0003021c

000b62f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b62f8:	2200      	movs	r2, #0
   b62fa:	6840      	ldr	r0, [r0, #4]
   b62fc:	4611      	mov	r1, r2
   b62fe:	f7ff bf43 	b.w	b6188 <network_listening>

000b6302 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6302:	2200      	movs	r2, #0
   b6304:	6840      	ldr	r0, [r0, #4]
   b6306:	4611      	mov	r1, r2
   b6308:	f7ff bf4e 	b.w	b61a8 <network_get_listen_timeout>

000b630c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b630c:	6840      	ldr	r0, [r0, #4]
   b630e:	2200      	movs	r2, #0
   b6310:	f7ff bf42 	b.w	b6198 <network_set_listen_timeout>

000b6314 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6314:	6840      	ldr	r0, [r0, #4]
   b6316:	2200      	movs	r2, #0
   b6318:	f081 0101 	eor.w	r1, r1, #1
   b631c:	f7ff bf2c 	b.w	b6178 <network_listen>

000b6320 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6320:	2300      	movs	r3, #0
   b6322:	6840      	ldr	r0, [r0, #4]
   b6324:	461a      	mov	r2, r3
   b6326:	4619      	mov	r1, r3
   b6328:	f7ff bf1e 	b.w	b6168 <network_off>

000b632c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b632c:	2300      	movs	r3, #0
   b632e:	6840      	ldr	r0, [r0, #4]
   b6330:	461a      	mov	r2, r3
   b6332:	4619      	mov	r1, r3
   b6334:	f7ff bf10 	b.w	b6158 <network_on>

000b6338 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6338:	2200      	movs	r2, #0
   b633a:	6840      	ldr	r0, [r0, #4]
   b633c:	4611      	mov	r1, r2
   b633e:	f7ff bf03 	b.w	b6148 <network_ready>

000b6342 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6342:	2200      	movs	r2, #0
   b6344:	6840      	ldr	r0, [r0, #4]
   b6346:	4611      	mov	r1, r2
   b6348:	f7ff beee 	b.w	b6128 <network_connecting>

000b634c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b634c:	6840      	ldr	r0, [r0, #4]
   b634e:	2200      	movs	r2, #0
   b6350:	2102      	movs	r1, #2
   b6352:	f7ff bef1 	b.w	b6138 <network_disconnect>

000b6356 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6356:	2300      	movs	r3, #0
   b6358:	6840      	ldr	r0, [r0, #4]
   b635a:	461a      	mov	r2, r3
   b635c:	f7ff bedc 	b.w	b6118 <network_connect>

000b6360 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6360:	4b02      	ldr	r3, [pc, #8]	; (b636c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6362:	2203      	movs	r2, #3
   b6364:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6366:	4a02      	ldr	r2, [pc, #8]	; (b6370 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6368:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b636a:	4770      	bx	lr
   b636c:	2003e5e0 	.word	0x2003e5e0
   b6370:	000bb850 	.word	0x000bb850

000b6374 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6374:	b510      	push	{r4, lr}
   b6376:	4604      	mov	r4, r0
   b6378:	4608      	mov	r0, r1
{
    _spi = spi;
   b637a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b637c:	f7ff fe30 	bl	b5fe0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6380:	2300      	movs	r3, #0
   b6382:	6063      	str	r3, [r4, #4]
}
   b6384:	4620      	mov	r0, r4
   b6386:	bd10      	pop	{r4, pc}

000b6388 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6388:	4b05      	ldr	r3, [pc, #20]	; (b63a0 <_GLOBAL__sub_I_System+0x18>)
   b638a:	2202      	movs	r2, #2
   b638c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b638e:	4b05      	ldr	r3, [pc, #20]	; (b63a4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6390:	4a05      	ldr	r2, [pc, #20]	; (b63a8 <_GLOBAL__sub_I_System+0x20>)
   b6392:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6394:	2000      	movs	r0, #0
   b6396:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b639a:	f7ff be79 	b.w	b6090 <set_system_mode>
   b639e:	bf00      	nop
   b63a0:	2003e5f4 	.word	0x2003e5f4
   b63a4:	2003e5e8 	.word	0x2003e5e8
   b63a8:	ffff0000 	.word	0xffff0000

000b63ac <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b63ac:	b510      	push	{r4, lr}
   b63ae:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b63b0:	f7fe fb90 	bl	b4ad4 <strlen>
   b63b4:	3801      	subs	r0, #1
   b63b6:	1823      	adds	r3, r4, r0
   b63b8:	4620      	mov	r0, r4
	while(i<j){
   b63ba:	4283      	cmp	r3, r0
   b63bc:	d906      	bls.n	b63cc <_Z11str_reversePc+0x20>
		c = *i;
   b63be:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b63c0:	7819      	ldrb	r1, [r3, #0]
   b63c2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b63c6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b63ca:	e7f6      	b.n	b63ba <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b63cc:	bd10      	pop	{r4, pc}

000b63ce <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b63ce:	b570      	push	{r4, r5, r6, lr}
   b63d0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b63d2:	1e91      	subs	r1, r2, #2
   b63d4:	2922      	cmp	r1, #34	; 0x22
   b63d6:	d81d      	bhi.n	b6414 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b63d8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b63da:	b930      	cbnz	r0, b63ea <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b63dc:	4423      	add	r3, r4
            *ptr++ = '0';
   b63de:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b63e0:	429d      	cmp	r5, r3
   b63e2:	d210      	bcs.n	b6406 <ultoa+0x38>
            *ptr++ = '0';
   b63e4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b63e8:	e7fa      	b.n	b63e0 <ultoa+0x12>
            result.quot = a/radix;
   b63ea:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b63ee:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b63f2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b63f4:	2809      	cmp	r0, #9
                *ptr += '0';
   b63f6:	bf94      	ite	ls
   b63f8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b63fa:	3157      	addhi	r1, #87	; 0x57
   b63fc:	b2c9      	uxtb	r1, r1
   b63fe:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6402:	4630      	mov	r0, r6
	while(a){
   b6404:	e7e9      	b.n	b63da <ultoa+0xc>

	*ptr = '\0';
   b6406:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6408:	4620      	mov	r0, r4
	*ptr = '\0';
   b640a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b640c:	f7ff ffce 	bl	b63ac <_Z11str_reversePc>
	return buffer;
   b6410:	4620      	mov	r0, r4
}
   b6412:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6414:	2000      	movs	r0, #0
   b6416:	e7fc      	b.n	b6412 <ultoa+0x44>

000b6418 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b6418:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b641a:	2301      	movs	r3, #1
   b641c:	f7ff ffd7 	bl	b63ce <ultoa>
}
   b6420:	bd08      	pop	{r3, pc}

000b6422 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6422:	b510      	push	{r4, lr}
   b6424:	4604      	mov	r4, r0
{
	free(buffer);
   b6426:	6800      	ldr	r0, [r0, #0]
   b6428:	f7ff ff0e 	bl	b6248 <free>
}
   b642c:	4620      	mov	r0, r4
   b642e:	bd10      	pop	{r4, pc}

000b6430 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6430:	b510      	push	{r4, lr}
   b6432:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6434:	6800      	ldr	r0, [r0, #0]
   b6436:	b108      	cbz	r0, b643c <_ZN6String10invalidateEv+0xc>
   b6438:	f7ff ff06 	bl	b6248 <free>
	buffer = NULL;
   b643c:	2300      	movs	r3, #0
	capacity = len = 0;
   b643e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6442:	6023      	str	r3, [r4, #0]
}
   b6444:	bd10      	pop	{r4, pc}

000b6446 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6446:	b538      	push	{r3, r4, r5, lr}
   b6448:	4604      	mov	r4, r0
   b644a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b644c:	6800      	ldr	r0, [r0, #0]
   b644e:	3101      	adds	r1, #1
   b6450:	f7ff ff02 	bl	b6258 <realloc>
	if (newbuffer) {
   b6454:	b110      	cbz	r0, b645c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6456:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b645a:	2001      	movs	r0, #1
	}
	return 0;
}
   b645c:	bd38      	pop	{r3, r4, r5, pc}

000b645e <_ZN6String7reserveEj>:
{
   b645e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6460:	6803      	ldr	r3, [r0, #0]
{
   b6462:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6464:	b123      	cbz	r3, b6470 <_ZN6String7reserveEj+0x12>
   b6466:	6843      	ldr	r3, [r0, #4]
   b6468:	428b      	cmp	r3, r1
   b646a:	d301      	bcc.n	b6470 <_ZN6String7reserveEj+0x12>
   b646c:	2001      	movs	r0, #1
}
   b646e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6470:	4620      	mov	r0, r4
   b6472:	f7ff ffe8 	bl	b6446 <_ZN6String12changeBufferEj>
   b6476:	2800      	cmp	r0, #0
   b6478:	d0f9      	beq.n	b646e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b647a:	68a3      	ldr	r3, [r4, #8]
   b647c:	2b00      	cmp	r3, #0
   b647e:	d1f5      	bne.n	b646c <_ZN6String7reserveEj+0xe>
   b6480:	6822      	ldr	r2, [r4, #0]
   b6482:	7013      	strb	r3, [r2, #0]
   b6484:	e7f2      	b.n	b646c <_ZN6String7reserveEj+0xe>

000b6486 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6486:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6488:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b648a:	4611      	mov	r1, r2
   b648c:	9201      	str	r2, [sp, #4]
{
   b648e:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6490:	f7ff ffe5 	bl	b645e <_ZN6String7reserveEj>
   b6494:	9a01      	ldr	r2, [sp, #4]
   b6496:	b928      	cbnz	r0, b64a4 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6498:	4620      	mov	r0, r4
   b649a:	f7ff ffc9 	bl	b6430 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b649e:	4620      	mov	r0, r4
   b64a0:	b003      	add	sp, #12
   b64a2:	bd30      	pop	{r4, r5, pc}
	len = length;
   b64a4:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b64a6:	4629      	mov	r1, r5
   b64a8:	6820      	ldr	r0, [r4, #0]
   b64aa:	f002 ff7b 	bl	b93a4 <memcpy>
	buffer[len] = 0;
   b64ae:	6822      	ldr	r2, [r4, #0]
   b64b0:	68a3      	ldr	r3, [r4, #8]
   b64b2:	2100      	movs	r1, #0
   b64b4:	54d1      	strb	r1, [r2, r3]
	return *this;
   b64b6:	e7f2      	b.n	b649e <_ZN6String4copyEPKcj+0x18>

000b64b8 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b64b8:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b64ba:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b64bc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b64c0:	4604      	mov	r4, r0
	len = 0;
   b64c2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b64c4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b64c6:	b141      	cbz	r1, b64da <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b64c8:	4608      	mov	r0, r1
   b64ca:	9101      	str	r1, [sp, #4]
   b64cc:	f7fe fb02 	bl	b4ad4 <strlen>
   b64d0:	9901      	ldr	r1, [sp, #4]
   b64d2:	4602      	mov	r2, r0
   b64d4:	4620      	mov	r0, r4
   b64d6:	f7ff ffd6 	bl	b6486 <_ZN6String4copyEPKcj>
}
   b64da:	4620      	mov	r0, r4
   b64dc:	b002      	add	sp, #8
   b64de:	bd10      	pop	{r4, pc}

000b64e0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b64e0:	4288      	cmp	r0, r1
{
   b64e2:	b510      	push	{r4, lr}
   b64e4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b64e6:	d005      	beq.n	b64f4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b64e8:	680b      	ldr	r3, [r1, #0]
   b64ea:	b12b      	cbz	r3, b64f8 <_ZN6StringaSERKS_+0x18>
   b64ec:	688a      	ldr	r2, [r1, #8]
   b64ee:	4619      	mov	r1, r3
   b64f0:	f7ff ffc9 	bl	b6486 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b64f4:	4620      	mov	r0, r4
   b64f6:	bd10      	pop	{r4, pc}
	else invalidate();
   b64f8:	f7ff ff9a 	bl	b6430 <_ZN6String10invalidateEv>
   b64fc:	e7fa      	b.n	b64f4 <_ZN6StringaSERKS_+0x14>

000b64fe <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b64fe:	b510      	push	{r4, lr}
	buffer = NULL;
   b6500:	2300      	movs	r3, #0
String::String(const String &value)
   b6502:	4604      	mov	r4, r0
	capacity = 0;
   b6504:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6508:	6083      	str	r3, [r0, #8]
	flags = 0;
   b650a:	7303      	strb	r3, [r0, #12]
	*this = value;
   b650c:	f7ff ffe8 	bl	b64e0 <_ZN6StringaSERKS_>
}
   b6510:	4620      	mov	r0, r4
   b6512:	bd10      	pop	{r4, pc}

000b6514 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6514:	b513      	push	{r0, r1, r4, lr}
   b6516:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6518:	b159      	cbz	r1, b6532 <_ZN6StringaSEPKc+0x1e>
   b651a:	4608      	mov	r0, r1
   b651c:	9101      	str	r1, [sp, #4]
   b651e:	f7fe fad9 	bl	b4ad4 <strlen>
   b6522:	9901      	ldr	r1, [sp, #4]
   b6524:	4602      	mov	r2, r0
   b6526:	4620      	mov	r0, r4
   b6528:	f7ff ffad 	bl	b6486 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b652c:	4620      	mov	r0, r4
   b652e:	b002      	add	sp, #8
   b6530:	bd10      	pop	{r4, pc}
	else invalidate();
   b6532:	f7ff ff7d 	bl	b6430 <_ZN6String10invalidateEv>
   b6536:	e7f9      	b.n	b652c <_ZN6StringaSEPKc+0x18>

000b6538 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b6538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b653a:	4604      	mov	r4, r0
	buffer = NULL;
   b653c:	2300      	movs	r3, #0
	capacity = 0;
   b653e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6542:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6544:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b6546:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b6548:	a901      	add	r1, sp, #4
   b654a:	f7ff ff65 	bl	b6418 <utoa>
	*this = buf;
   b654e:	a901      	add	r1, sp, #4
   b6550:	4620      	mov	r0, r4
   b6552:	f7ff ffdf 	bl	b6514 <_ZN6StringaSEPKc>
}
   b6556:	4620      	mov	r0, r4
   b6558:	b004      	add	sp, #16
   b655a:	bd10      	pop	{r4, pc}

000b655c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b655c:	b570      	push	{r4, r5, r6, lr}
   b655e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6560:	460e      	mov	r6, r1
   b6562:	b909      	cbnz	r1, b6568 <_ZN6String6concatEPKcj+0xc>
   b6564:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6566:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6568:	b16a      	cbz	r2, b6586 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b656a:	6884      	ldr	r4, [r0, #8]
   b656c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b656e:	4621      	mov	r1, r4
   b6570:	f7ff ff75 	bl	b645e <_ZN6String7reserveEj>
   b6574:	2800      	cmp	r0, #0
   b6576:	d0f5      	beq.n	b6564 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6578:	6828      	ldr	r0, [r5, #0]
   b657a:	68ab      	ldr	r3, [r5, #8]
   b657c:	4631      	mov	r1, r6
   b657e:	4418      	add	r0, r3
   b6580:	f002 ff6e 	bl	b9460 <strcpy>
	len = newlen;
   b6584:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6586:	2001      	movs	r0, #1
   b6588:	e7ed      	b.n	b6566 <_ZN6String6concatEPKcj+0xa>

000b658a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b658a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b658c:	688a      	ldr	r2, [r1, #8]
   b658e:	6809      	ldr	r1, [r1, #0]
{
   b6590:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6592:	f7ff ffe3 	bl	b655c <_ZN6String6concatEPKcj>
   b6596:	b910      	cbnz	r0, b659e <_ZplRK15StringSumHelperRK6String+0x14>
   b6598:	4620      	mov	r0, r4
   b659a:	f7ff ff49 	bl	b6430 <_ZN6String10invalidateEv>
	return a;
}
   b659e:	4620      	mov	r0, r4
   b65a0:	bd10      	pop	{r4, pc}
	...

000b65a4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b65a4:	b40e      	push	{r1, r2, r3}
   b65a6:	b570      	push	{r4, r5, r6, lr}
   b65a8:	b087      	sub	sp, #28
   b65aa:	ad0b      	add	r5, sp, #44	; 0x2c
   b65ac:	4604      	mov	r4, r0
   b65ae:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b65b2:	9201      	str	r2, [sp, #4]
   b65b4:	462b      	mov	r3, r5
   b65b6:	2105      	movs	r1, #5
   b65b8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b65ba:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b65bc:	f7ff fe64 	bl	b6288 <vsnprintf>
    va_end(marker);

    String result;
   b65c0:	490b      	ldr	r1, [pc, #44]	; (b65f0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b65c2:	4606      	mov	r6, r0
    String result;
   b65c4:	4620      	mov	r0, r4
   b65c6:	f7ff ff77 	bl	b64b8 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b65ca:	4631      	mov	r1, r6
   b65cc:	4620      	mov	r0, r4
   b65ce:	f7ff ff46 	bl	b645e <_ZN6String7reserveEj>
    if (result.buffer) {
   b65d2:	6820      	ldr	r0, [r4, #0]
   b65d4:	b130      	cbz	r0, b65e4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b65d6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b65d8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b65da:	462b      	mov	r3, r5
   b65dc:	1c71      	adds	r1, r6, #1
   b65de:	f7ff fe53 	bl	b6288 <vsnprintf>
        va_end(marker);
        result.len = n;
   b65e2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b65e4:	4620      	mov	r0, r4
   b65e6:	b007      	add	sp, #28
   b65e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b65ec:	b003      	add	sp, #12
   b65ee:	4770      	bx	lr
   b65f0:	000bbdbc 	.word	0x000bbdbc

000b65f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65f4:	4770      	bx	lr

000b65f6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b65f6:	4770      	bx	lr

000b65f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b65f8:	4770      	bx	lr

000b65fa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65fa:	4770      	bx	lr

000b65fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b65fc:	4b06      	ldr	r3, [pc, #24]	; (b6618 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b65fe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6600:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6602:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6606:	d005      	beq.n	b6614 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6608:	4608      	mov	r0, r1
   b660a:	f002 fadd 	bl	b8bc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b660e:	2800      	cmp	r0, #0
   b6610:	bf08      	it	eq
   b6612:	2400      	moveq	r4, #0
      }
   b6614:	4620      	mov	r0, r4
   b6616:	bd10      	pop	{r4, pc}
   b6618:	000bba24 	.word	0x000bba24

000b661c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b661c:	4b06      	ldr	r3, [pc, #24]	; (b6638 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b661e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6620:	b510      	push	{r4, lr}
   b6622:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6626:	d005      	beq.n	b6634 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6628:	4608      	mov	r0, r1
   b662a:	f002 facd 	bl	b8bc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b662e:	2800      	cmp	r0, #0
   b6630:	bf08      	it	eq
   b6632:	2400      	moveq	r4, #0
      }
   b6634:	4620      	mov	r0, r4
   b6636:	bd10      	pop	{r4, pc}
   b6638:	000bba24 	.word	0x000bba24

000b663c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b663c:	4b06      	ldr	r3, [pc, #24]	; (b6658 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b663e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6640:	b510      	push	{r4, lr}
   b6642:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6646:	d005      	beq.n	b6654 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6648:	4608      	mov	r0, r1
   b664a:	f002 fabd 	bl	b8bc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b664e:	2800      	cmp	r0, #0
   b6650:	bf08      	it	eq
   b6652:	2400      	moveq	r4, #0
      }
   b6654:	4620      	mov	r0, r4
   b6656:	bd10      	pop	{r4, pc}
   b6658:	000bba24 	.word	0x000bba24

000b665c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b665c:	b510      	push	{r4, lr}
   b665e:	2168      	movs	r1, #104	; 0x68
   b6660:	4604      	mov	r4, r0
   b6662:	f7fe fa98 	bl	b4b96 <_ZdlPvj>
   b6666:	4620      	mov	r0, r4
   b6668:	bd10      	pop	{r4, pc}

000b666a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b666a:	b510      	push	{r4, lr}
   b666c:	2128      	movs	r1, #40	; 0x28
   b666e:	4604      	mov	r4, r0
   b6670:	f7fe fa91 	bl	b4b96 <_ZdlPvj>
   b6674:	4620      	mov	r0, r4
   b6676:	bd10      	pop	{r4, pc}

000b6678 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6678:	b510      	push	{r4, lr}
   b667a:	2130      	movs	r1, #48	; 0x30
   b667c:	4604      	mov	r4, r0
   b667e:	f7fe fa8a 	bl	b4b96 <_ZdlPvj>
   b6682:	4620      	mov	r0, r4
   b6684:	bd10      	pop	{r4, pc}

000b6686 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6686:	2168      	movs	r1, #104	; 0x68
   b6688:	f7fe ba85 	b.w	b4b96 <_ZdlPvj>

000b668c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b668c:	2128      	movs	r1, #40	; 0x28
   b668e:	f7fe ba82 	b.w	b4b96 <_ZdlPvj>

000b6692 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6692:	2130      	movs	r1, #48	; 0x30
   b6694:	f7fe ba7f 	b.w	b4b96 <_ZdlPvj>

000b6698 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6698:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b669a:	2500      	movs	r5, #0
   b669c:	1cec      	adds	r4, r5, #3
   b669e:	428c      	cmp	r4, r1
   b66a0:	d80d      	bhi.n	b66be <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b66a2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b66a4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b66a6:	5d87      	ldrb	r7, [r0, r6]
   b66a8:	4297      	cmp	r7, r2
   b66aa:	d105      	bne.n	b66b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b66ac:	4426      	add	r6, r4
   b66ae:	42b1      	cmp	r1, r6
   b66b0:	d305      	bcc.n	b66be <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b66b2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b66b4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b66b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b66b8:	3401      	adds	r4, #1
   b66ba:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b66bc:	e7ee      	b.n	b669c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b66be:	2000      	movs	r0, #0
   b66c0:	e7f9      	b.n	b66b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b66c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b66c4:	4a02      	ldr	r2, [pc, #8]	; (b66d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b66c6:	4903      	ldr	r1, [pc, #12]	; (b66d4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b66c8:	200a      	movs	r0, #10
   b66ca:	f7ff bcc9 	b.w	b6060 <panic_>
   b66ce:	bf00      	nop
   b66d0:	000b5cfd 	.word	0x000b5cfd
   b66d4:	000bb884 	.word	0x000bb884

000b66d8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b66d8:	b430      	push	{r4, r5}
   b66da:	460d      	mov	r5, r1
   b66dc:	4611      	mov	r1, r2
   b66de:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b66e0:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b66e2:	6809      	ldr	r1, [r1, #0]
   b66e4:	6828      	ldr	r0, [r5, #0]
   b66e6:	e9d3 4300 	ldrd	r4, r3, [r3]
   b66ea:	46a4      	mov	ip, r4
      }
   b66ec:	bc30      	pop	{r4, r5}
   b66ee:	4760      	bx	ip

000b66f0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b66f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b66f2:	b538      	push	{r3, r4, r5, lr}
   b66f4:	4604      	mov	r4, r0
	switch (__op)
   b66f6:	d102      	bne.n	b66fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b66f8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b66fa:	6023      	str	r3, [r4, #0]
	}
   b66fc:	e003      	b.n	b6706 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b66fe:	2a02      	cmp	r2, #2
   b6700:	d003      	beq.n	b670a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6702:	2a03      	cmp	r2, #3
   b6704:	d00d      	beq.n	b6722 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6706:	2000      	movs	r0, #0
   b6708:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b670a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b670c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b670e:	f7fe fa3c 	bl	b4b8a <_Znwj>
   b6712:	4603      	mov	r3, r0
   b6714:	2800      	cmp	r0, #0
   b6716:	d0f0      	beq.n	b66fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6718:	e895 0003 	ldmia.w	r5, {r0, r1}
   b671c:	e883 0003 	stmia.w	r3, {r0, r1}
   b6720:	e7eb      	b.n	b66fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6722:	6800      	ldr	r0, [r0, #0]
   b6724:	2800      	cmp	r0, #0
   b6726:	d0ee      	beq.n	b6706 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6728:	2108      	movs	r1, #8
   b672a:	f7fe fa34 	bl	b4b96 <_ZdlPvj>
   b672e:	e7ea      	b.n	b6706 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6730 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6730:	b510      	push	{r4, lr}
   b6732:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6734:	3058      	adds	r0, #88	; 0x58
   b6736:	f7fe fcda 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b673a:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b673e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6742:	f7ff be6e 	b.w	b6422 <_ZN6StringD1Ev>

000b6746 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6746:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b674a:	b2da      	uxtb	r2, r3
   b674c:	2a09      	cmp	r2, #9
   b674e:	d801      	bhi.n	b6754 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6750:	4618      	mov	r0, r3
   b6752:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6754:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6758:	2b05      	cmp	r3, #5
   b675a:	d801      	bhi.n	b6760 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b675c:	3857      	subs	r0, #87	; 0x57
   b675e:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6760:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6764:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6766:	bf94      	ite	ls
   b6768:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b676a:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b676e:	4770      	bx	lr

000b6770 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6770:	b510      	push	{r4, lr}
            locked_(false) {
   b6772:	2300      	movs	r3, #0
   b6774:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6776:	4b04      	ldr	r3, [pc, #16]	; (b6788 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6778:	4604      	mov	r4, r0
   b677a:	6818      	ldr	r0, [r3, #0]
   b677c:	f7ff fb98 	bl	b5eb0 <os_mutex_recursive_lock>
        locked_ = true;
   b6780:	2301      	movs	r3, #1
   b6782:	7023      	strb	r3, [r4, #0]
    }
   b6784:	4620      	mov	r0, r4
   b6786:	bd10      	pop	{r4, pc}
   b6788:	2003e600 	.word	0x2003e600

000b678c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b678c:	b510      	push	{r4, lr}
        if (locked_) {
   b678e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6790:	4604      	mov	r4, r0
        if (locked_) {
   b6792:	b11b      	cbz	r3, b679c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6794:	4b02      	ldr	r3, [pc, #8]	; (b67a0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6796:	6818      	ldr	r0, [r3, #0]
   b6798:	f7ff fb92 	bl	b5ec0 <os_mutex_recursive_unlock>
    }
   b679c:	4620      	mov	r0, r4
   b679e:	bd10      	pop	{r4, pc}
   b67a0:	2003e600 	.word	0x2003e600

000b67a4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b67a4:	b082      	sub	sp, #8
   b67a6:	4603      	mov	r3, r0
    address_ = addr;
   b67a8:	6808      	ldr	r0, [r1, #0]
   b67aa:	6849      	ldr	r1, [r1, #4]
   b67ac:	466a      	mov	r2, sp
   b67ae:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b67b0:	466a      	mov	r2, sp
   b67b2:	ca03      	ldmia	r2!, {r0, r1}
   b67b4:	6018      	str	r0, [r3, #0]
}
   b67b6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b67b8:	6059      	str	r1, [r3, #4]
}
   b67ba:	b002      	add	sp, #8
   b67bc:	4770      	bx	lr

000b67be <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b67be:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b67c0:	7982      	ldrb	r2, [r0, #6]
   b67c2:	798b      	ldrb	r3, [r1, #6]
   b67c4:	429a      	cmp	r2, r3
   b67c6:	d106      	bne.n	b67d6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b67c8:	2206      	movs	r2, #6
   b67ca:	f002 fddb 	bl	b9384 <memcmp>
   b67ce:	fab0 f080 	clz	r0, r0
   b67d2:	0940      	lsrs	r0, r0, #5
}
   b67d4:	bd08      	pop	{r3, pc}
    return false;
   b67d6:	2000      	movs	r0, #0
   b67d8:	e7fc      	b.n	b67d4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b67da <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b67da:	f04f 33ff 	mov.w	r3, #4294967295
   b67de:	6003      	str	r3, [r0, #0]
   b67e0:	8083      	strh	r3, [r0, #4]
}
   b67e2:	2000      	movs	r0, #0
   b67e4:	4770      	bx	lr

000b67e6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b67e6:	b508      	push	{r3, lr}
   b67e8:	4602      	mov	r2, r0
        : address_{} {
   b67ea:	2100      	movs	r1, #0
   b67ec:	6001      	str	r1, [r0, #0]
   b67ee:	6041      	str	r1, [r0, #4]
    clear();
   b67f0:	f7ff fff3 	bl	b67da <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b67f4:	7191      	strb	r1, [r2, #6]
}
   b67f6:	4610      	mov	r0, r2
   b67f8:	bd08      	pop	{r3, pc}
	...

000b67fc <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b67fc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b67fe:	2301      	movs	r3, #1
   b6800:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6802:	4b05      	ldr	r3, [pc, #20]	; (b6818 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6804:	4602      	mov	r2, r0
   b6806:	f103 0110 	add.w	r1, r3, #16
   b680a:	f853 4b04 	ldr.w	r4, [r3], #4
   b680e:	f842 4b04 	str.w	r4, [r2], #4
   b6812:	428b      	cmp	r3, r1
   b6814:	d1f9      	bne.n	b680a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6816:	bd10      	pop	{r4, pc}
   b6818:	000bb4b6 	.word	0x000bb4b6

000b681c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b681c:	b510      	push	{r4, lr}
    if (uuid128) {
   b681e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6820:	4604      	mov	r4, r0
    if (uuid128) {
   b6822:	b1b1      	cbz	r1, b6852 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6824:	2a01      	cmp	r2, #1
   b6826:	f101 0210 	add.w	r2, r1, #16
   b682a:	d10a      	bne.n	b6842 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b682c:	4601      	mov	r1, r0
   b682e:	f853 0b04 	ldr.w	r0, [r3], #4
   b6832:	f841 0b04 	str.w	r0, [r1], #4
   b6836:	4293      	cmp	r3, r2
   b6838:	d1f9      	bne.n	b682e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b683a:	2301      	movs	r3, #1
   b683c:	6123      	str	r3, [r4, #16]
}
   b683e:	4620      	mov	r0, r4
   b6840:	bd10      	pop	{r4, pc}
   b6842:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6844:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6848:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b684c:	429a      	cmp	r2, r3
   b684e:	d1f9      	bne.n	b6844 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6850:	e7f3      	b.n	b683a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6852:	2210      	movs	r2, #16
   b6854:	f002 fdce 	bl	b93f4 <memset>
   b6858:	e7f1      	b.n	b683e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b685a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b685a:	b538      	push	{r3, r4, r5, lr}
   b685c:	4604      	mov	r4, r0
   b685e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6860:	461a      	mov	r2, r3
   b6862:	f7ff ffdb 	bl	b681c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6866:	81a5      	strh	r5, [r4, #12]
}
   b6868:	4620      	mov	r0, r4
   b686a:	bd38      	pop	{r3, r4, r5, pc}

000b686c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b686c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b686e:	6902      	ldr	r2, [r0, #16]
   b6870:	b922      	cbnz	r2, b687c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6872:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6874:	3800      	subs	r0, #0
   b6876:	bf18      	it	ne
   b6878:	2001      	movne	r0, #1
}
   b687a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b687c:	4902      	ldr	r1, [pc, #8]	; (b6888 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b687e:	2210      	movs	r2, #16
   b6880:	f002 fd80 	bl	b9384 <memcmp>
   b6884:	e7f6      	b.n	b6874 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6886:	bf00      	nop
   b6888:	000bba3c 	.word	0x000bba3c

000b688c <_ZNK8particle7BleUuid4typeEv>:
}
   b688c:	6900      	ldr	r0, [r0, #16]
   b688e:	4770      	bx	lr

000b6890 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6890:	b538      	push	{r3, r4, r5, lr}
   b6892:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6894:	2214      	movs	r2, #20
   b6896:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6898:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b689a:	f002 fdab 	bl	b93f4 <memset>
    if (type_ == BleUuidType::SHORT) {
   b689e:	6923      	ldr	r3, [r4, #16]
   b68a0:	b91b      	cbnz	r3, b68aa <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b68a2:	89a3      	ldrh	r3, [r4, #12]
   b68a4:	802b      	strh	r3, [r5, #0]
}
   b68a6:	4628      	mov	r0, r5
   b68a8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b68aa:	2301      	movs	r3, #1
   b68ac:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b68ae:	4621      	mov	r1, r4
   b68b0:	462b      	mov	r3, r5
   b68b2:	f104 0210 	add.w	r2, r4, #16
   b68b6:	f851 0b04 	ldr.w	r0, [r1], #4
   b68ba:	f843 0b04 	str.w	r0, [r3], #4
   b68be:	4291      	cmp	r1, r2
   b68c0:	d1f9      	bne.n	b68b6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b68c2:	e7f0      	b.n	b68a6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b68c4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b68c4:	8980      	ldrh	r0, [r0, #12]
   b68c6:	4770      	bx	lr

000b68c8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b68c8:	4770      	bx	lr

000b68ca <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b68ca:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b68cc:	6902      	ldr	r2, [r0, #16]
   b68ce:	690b      	ldr	r3, [r1, #16]
   b68d0:	429a      	cmp	r2, r3
   b68d2:	d106      	bne.n	b68e2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b68d4:	2210      	movs	r2, #16
   b68d6:	f002 fd55 	bl	b9384 <memcmp>
   b68da:	fab0 f080 	clz	r0, r0
   b68de:	0940      	lsrs	r0, r0, #5
}
   b68e0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b68e2:	2000      	movs	r0, #0
   b68e4:	e7fc      	b.n	b68e0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b68e8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b68e8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b68ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b68ee:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b68f0:	4b34      	ldr	r3, [pc, #208]	; (b69c4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b68f2:	460c      	mov	r4, r1
   b68f4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b68f6:	4602      	mov	r2, r0
   b68f8:	f103 0110 	add.w	r1, r3, #16
   b68fc:	f853 0b04 	ldr.w	r0, [r3], #4
   b6900:	f842 0b04 	str.w	r0, [r2], #4
   b6904:	428b      	cmp	r3, r1
   b6906:	d1f9      	bne.n	b68fc <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6908:	b344      	cbz	r4, b695c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b690a:	2124      	movs	r1, #36	; 0x24
   b690c:	4620      	mov	r0, r4
   b690e:	f002 fde0 	bl	b94d2 <strnlen>
   b6912:	2804      	cmp	r0, #4
   b6914:	f04f 0500 	mov.w	r5, #0
   b6918:	d123      	bne.n	b6962 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b691a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b691e:	af01      	add	r7, sp, #4
   b6920:	1ca5      	adds	r5, r4, #2
   b6922:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6924:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6928:	f7ff ff0d 	bl	b6746 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b692c:	f1b0 0800 	subs.w	r8, r0, #0
   b6930:	db12      	blt.n	b6958 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6932:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6936:	f7ff ff06 	bl	b6746 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b693a:	2800      	cmp	r0, #0
   b693c:	db0c      	blt.n	b6958 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b693e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6940:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6944:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6946:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b694a:	d1eb      	bne.n	b6924 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b694c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6950:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6952:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6956:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6958:	2300      	movs	r3, #0
   b695a:	6133      	str	r3, [r6, #16]
}
   b695c:	b002      	add	sp, #8
   b695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6962:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6966:	2124      	movs	r1, #36	; 0x24
   b6968:	4620      	mov	r0, r4
   b696a:	f002 fdb2 	bl	b94d2 <strnlen>
   b696e:	42a8      	cmp	r0, r5
   b6970:	d807      	bhi.n	b6982 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6972:	4642      	mov	r2, r8
   b6974:	2100      	movs	r1, #0
   b6976:	4630      	mov	r0, r6
}
   b6978:	b002      	add	sp, #8
   b697a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b697e:	f002 bd39 	b.w	b93f4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6982:	f1b8 0f00 	cmp.w	r8, #0
   b6986:	d0e9      	beq.n	b695c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6988:	5d60      	ldrb	r0, [r4, r5]
   b698a:	f7ff fedc 	bl	b6746 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b698e:	0603      	lsls	r3, r0, #24
   b6990:	d415      	bmi.n	b69be <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6992:	0100      	lsls	r0, r0, #4
   b6994:	f108 38ff 	add.w	r8, r8, #4294967295
   b6998:	b2c7      	uxtb	r7, r0
   b699a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b699e:	2124      	movs	r1, #36	; 0x24
   b69a0:	4620      	mov	r0, r4
   b69a2:	f002 fd96 	bl	b94d2 <strnlen>
   b69a6:	3501      	adds	r5, #1
   b69a8:	42a8      	cmp	r0, r5
   b69aa:	d908      	bls.n	b69be <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b69ac:	5d60      	ldrb	r0, [r4, r5]
   b69ae:	f7ff feca 	bl	b6746 <_ZN8particle11hexToNibbleEc>
   b69b2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b69b4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b69b6:	bfa4      	itt	ge
   b69b8:	4338      	orrge	r0, r7
   b69ba:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b69be:	3501      	adds	r5, #1
   b69c0:	e7d1      	b.n	b6966 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b69c2:	bf00      	nop
   b69c4:	000bb4b6 	.word	0x000bb4b6

000b69c8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b69c8:	b513      	push	{r0, r1, r4, lr}
   b69ca:	4604      	mov	r4, r0
   b69cc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b69ce:	f7ff ff15 	bl	b67fc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b69d2:	4620      	mov	r0, r4
   b69d4:	9901      	ldr	r1, [sp, #4]
   b69d6:	f7ff ff87 	bl	b68e8 <_ZN8particle7BleUuid9constructEPKc>
}
   b69da:	4620      	mov	r0, r4
   b69dc:	b002      	add	sp, #8
   b69de:	bd10      	pop	{r4, pc}

000b69e0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b69e0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b69e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b69e6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b69e8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b69ea:	8043      	strh	r3, [r0, #2]
   b69ec:	220e      	movs	r2, #14
   b69ee:	4629      	mov	r1, r5
   b69f0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b69f2:	7105      	strb	r5, [r0, #4]
   b69f4:	3006      	adds	r0, #6
   b69f6:	f002 fcfd 	bl	b93f4 <memset>
   b69fa:	f104 0014 	add.w	r0, r4, #20
   b69fe:	f7ff fefd 	bl	b67fc <_ZN8particle7BleUuidC1Ev>
   b6a02:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6a06:	f7ff fef9 	bl	b67fc <_ZN8particle7BleUuidC1Ev>
   b6a0a:	4904      	ldr	r1, [pc, #16]	; (b6a1c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6a0c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6a10:	f7ff fd52 	bl	b64b8 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6a14:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6a16:	4620      	mov	r0, r4
   b6a18:	bd38      	pop	{r3, r4, r5, pc}
   b6a1a:	bf00      	nop
   b6a1c:	000bbdbc 	.word	0x000bbdbc

000b6a20 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6a20:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6a22:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6a26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6a2a:	4293      	cmp	r3, r2
   b6a2c:	4618      	mov	r0, r3
   b6a2e:	d006      	beq.n	b6a3e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6a30:	6804      	ldr	r4, [r0, #0]
   b6a32:	8824      	ldrh	r4, [r4, #0]
   b6a34:	428c      	cmp	r4, r1
   b6a36:	f103 0308 	add.w	r3, r3, #8
   b6a3a:	d1f6      	bne.n	b6a2a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6a3c:	bd10      	pop	{r4, pc}
        return nullptr;
   b6a3e:	2000      	movs	r0, #0
   b6a40:	e7fc      	b.n	b6a3c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6a44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a46:	4606      	mov	r6, r0
   b6a48:	b085      	sub	sp, #20
   b6a4a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6a4c:	460d      	mov	r5, r1
   b6a4e:	2900      	cmp	r1, #0
   b6a50:	d050      	beq.n	b6af4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6a52:	2a00      	cmp	r2, #0
   b6a54:	d04e      	beq.n	b6af4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6a56:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6a58:	7823      	ldrb	r3, [r4, #0]
   b6a5a:	2af4      	cmp	r2, #244	; 0xf4
   b6a5c:	bf28      	it	cs
   b6a5e:	22f4      	movcs	r2, #244	; 0xf4
   b6a60:	b343      	cbz	r3, b6ab4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6a62:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6a64:	0798      	lsls	r0, r3, #30
   b6a66:	d509      	bpl.n	b6a7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6a68:	89a0      	ldrh	r0, [r4, #12]
   b6a6a:	9203      	str	r2, [sp, #12]
   b6a6c:	2300      	movs	r3, #0
   b6a6e:	f7ff f9a1 	bl	b5db4 <hal_ble_gatt_server_set_characteristic_value>
   b6a72:	2800      	cmp	r0, #0
   b6a74:	9a03      	ldr	r2, [sp, #12]
   b6a76:	da03      	bge.n	b6a80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6a78:	b005      	add	sp, #20
   b6a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6a7c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6a80:	6834      	ldr	r4, [r6, #0]
   b6a82:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6a84:	06d9      	lsls	r1, r3, #27
   b6a86:	d509      	bpl.n	b6a9c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6a88:	2f01      	cmp	r7, #1
   b6a8a:	d007      	beq.n	b6a9c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a8c:	89a0      	ldrh	r0, [r4, #12]
   b6a8e:	2300      	movs	r3, #0
   b6a90:	4629      	mov	r1, r5
}
   b6a92:	b005      	add	sp, #20
   b6a94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a98:	f7ff b9be 	b.w	b5e18 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6a9c:	069b      	lsls	r3, r3, #26
   b6a9e:	d5eb      	bpl.n	b6a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6aa0:	2f02      	cmp	r7, #2
   b6aa2:	d0e9      	beq.n	b6a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6aa4:	89a0      	ldrh	r0, [r4, #12]
   b6aa6:	2300      	movs	r3, #0
   b6aa8:	4629      	mov	r1, r5
}
   b6aaa:	b005      	add	sp, #20
   b6aac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6ab0:	f7ff b9bc 	b.w	b5e2c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6ab4:	8860      	ldrh	r0, [r4, #2]
   b6ab6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6aba:	4288      	cmp	r0, r1
   b6abc:	d01c      	beq.n	b6af8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6abe:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6ac0:	074e      	lsls	r6, r1, #29
   b6ac2:	d501      	bpl.n	b6ac8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6ac4:	2f01      	cmp	r7, #1
   b6ac6:	d104      	bne.n	b6ad2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6ac8:	070b      	lsls	r3, r1, #28
   b6aca:	d409      	bmi.n	b6ae0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6acc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6ad0:	e7d2      	b.n	b6a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6ad2:	89a1      	ldrh	r1, [r4, #12]
   b6ad4:	9300      	str	r3, [sp, #0]
   b6ad6:	4613      	mov	r3, r2
   b6ad8:	462a      	mov	r2, r5
   b6ada:	f7ff f97f 	bl	b5ddc <hal_ble_gatt_client_write_without_response>
   b6ade:	e7cb      	b.n	b6a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6ae0:	2f02      	cmp	r7, #2
   b6ae2:	d0f3      	beq.n	b6acc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6ae4:	2300      	movs	r3, #0
   b6ae6:	89a1      	ldrh	r1, [r4, #12]
   b6ae8:	9300      	str	r3, [sp, #0]
   b6aea:	4613      	mov	r3, r2
   b6aec:	462a      	mov	r2, r5
   b6aee:	f7ff f96b 	bl	b5dc8 <hal_ble_gatt_client_write_with_response>
   b6af2:	e7c1      	b.n	b6a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6af4:	4802      	ldr	r0, [pc, #8]	; (b6b00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6af6:	e7bf      	b.n	b6a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6af8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6afc:	e7bc      	b.n	b6a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6afe:	bf00      	nop
   b6b00:	fffffef2 	.word	0xfffffef2

000b6b04 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b06:	460c      	mov	r4, r1
   b6b08:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6b0a:	21f4      	movs	r1, #244	; 0xf4
   b6b0c:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6b0e:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6b10:	f002 fcdf 	bl	b94d2 <strnlen>
   b6b14:	9b01      	ldr	r3, [sp, #4]
   b6b16:	4602      	mov	r2, r0
   b6b18:	4621      	mov	r1, r4
   b6b1a:	4628      	mov	r0, r5
}
   b6b1c:	b003      	add	sp, #12
   b6b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6b22:	f7ff bf8f 	b.w	b6a44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b6b28 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6b2c:	2600      	movs	r6, #0
   b6b2e:	6006      	str	r6, [r0, #0]
   b6b30:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6b32:	2028      	movs	r0, #40	; 0x28
   b6b34:	460c      	mov	r4, r1
   b6b36:	f7fe f828 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b6b3a:	1e05      	subs	r5, r0, #0
   b6b3c:	f105 080c 	add.w	r8, r5, #12
   b6b40:	d00f      	beq.n	b6b62 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6b42:	2301      	movs	r3, #1
   b6b44:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6b48:	4b08      	ldr	r3, [pc, #32]	; (b6b6c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6b4a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6b4c:	4640      	mov	r0, r8
   b6b4e:	f7ff fe55 	bl	b67fc <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6b54:	622e      	str	r6, [r5, #32]
   b6b56:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6b5a:	4646      	mov	r6, r8
   b6b5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6b5e:	6823      	ldr	r3, [r4, #0]
   b6b60:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6b62:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6b66:	4638      	mov	r0, r7
   b6b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6b6c:	000bb9f4 	.word	0x000bb9f4

000b6b70 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6b70:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6b72:	2500      	movs	r5, #0
   b6b74:	6005      	str	r5, [r0, #0]
   b6b76:	4606      	mov	r6, r0
   b6b78:	2030      	movs	r0, #48	; 0x30
   b6b7a:	f7fe f806 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b6b7e:	4604      	mov	r4, r0
   b6b80:	b188      	cbz	r0, b6ba6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6b82:	2301      	movs	r3, #1
   b6b84:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6b88:	4b09      	ldr	r3, [pc, #36]	; (b6bb0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6b8a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6b90:	8183      	strh	r3, [r0, #12]
   b6b92:	300e      	adds	r0, #14
   b6b94:	f7ff fe27 	bl	b67e6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6b98:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6b9c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6ba0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6ba4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6ba6:	6074      	str	r4, [r6, #4]
   b6ba8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6baa:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6bac:	4630      	mov	r0, r6
   b6bae:	bd70      	pop	{r4, r5, r6, pc}
   b6bb0:	000bba10 	.word	0x000bba10

000b6bb4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6bb6:	460d      	mov	r5, r1
   b6bb8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6bba:	a801      	add	r0, sp, #4
   b6bbc:	f7ff fdd8 	bl	b6770 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6bc0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6bc2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6bc6:	6023      	str	r3, [r4, #0]
   b6bc8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6bcc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6bce:	a801      	add	r0, sp, #4
   b6bd0:	f7ff fddc 	bl	b678c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6bd4:	4620      	mov	r0, r4
   b6bd6:	b003      	add	sp, #12
   b6bd8:	bd30      	pop	{r4, r5, pc}

000b6bda <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6bda:	b530      	push	{r4, r5, lr}
   b6bdc:	4605      	mov	r5, r0
   b6bde:	b087      	sub	sp, #28
   b6be0:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6be2:	a801      	add	r0, sp, #4
   b6be4:	f7ff fdc4 	bl	b6770 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6be8:	682a      	ldr	r2, [r5, #0]
   b6bea:	6823      	ldr	r3, [r4, #0]
   b6bec:	8812      	ldrh	r2, [r2, #0]
   b6bee:	881b      	ldrh	r3, [r3, #0]
   b6bf0:	429a      	cmp	r2, r3
   b6bf2:	d10d      	bne.n	b6c10 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6bf4:	4629      	mov	r1, r5
   b6bf6:	a802      	add	r0, sp, #8
   b6bf8:	f7ff ffdc 	bl	b6bb4 <_ZNK8particle13BlePeerDevice7addressEv>
   b6bfc:	4621      	mov	r1, r4
   b6bfe:	a804      	add	r0, sp, #16
   b6c00:	f7ff ffd8 	bl	b6bb4 <_ZNK8particle13BlePeerDevice7addressEv>
   b6c04:	a904      	add	r1, sp, #16
   b6c06:	a802      	add	r0, sp, #8
   b6c08:	f7ff fdd9 	bl	b67be <_ZNK8particle10BleAddresseqERKS0_>
   b6c0c:	4604      	mov	r4, r0
   b6c0e:	b900      	cbnz	r0, b6c12 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6c10:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6c12:	a801      	add	r0, sp, #4
   b6c14:	f7ff fdba 	bl	b678c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6c18:	4620      	mov	r0, r4
   b6c1a:	b007      	add	sp, #28
   b6c1c:	bd30      	pop	{r4, r5, pc}
	...

000b6c20 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6c20:	b510      	push	{r4, lr}
   b6c22:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6c24:	2064      	movs	r0, #100	; 0x64
   b6c26:	f7fd ffb0 	bl	b4b8a <_Znwj>
   b6c2a:	b168      	cbz	r0, b6c48 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6c2c:	2300      	movs	r3, #0
   b6c2e:	e9c0 3300 	strd	r3, r3, [r0]
   b6c32:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6c3a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6c3e:	6203      	str	r3, [r0, #32]
   b6c40:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6c42:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6c44:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6c46:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6c48:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6c4a:	b920      	cbnz	r0, b6c56 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6c4c:	4a0a      	ldr	r2, [pc, #40]	; (b6c78 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6c4e:	490b      	ldr	r1, [pc, #44]	; (b6c7c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6c50:	200a      	movs	r0, #10
   b6c52:	f7ff fa05 	bl	b6060 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6c56:	2000      	movs	r0, #0
   b6c58:	f7ff f870 	bl	b5d3c <hal_ble_stack_init>
   b6c5c:	b120      	cbz	r0, b6c68 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6c5e:	4a06      	ldr	r2, [pc, #24]	; (b6c78 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6c60:	4907      	ldr	r1, [pc, #28]	; (b6c80 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6c62:	200a      	movs	r0, #10
   b6c64:	f7ff f9fc 	bl	b6060 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6c68:	6821      	ldr	r1, [r4, #0]
   b6c6a:	4806      	ldr	r0, [pc, #24]	; (b6c84 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6c6c:	2200      	movs	r2, #0
   b6c6e:	f7ff f8c9 	bl	b5e04 <hal_ble_set_callback_on_periph_link_events>
}
   b6c72:	4620      	mov	r0, r4
   b6c74:	bd10      	pop	{r4, pc}
   b6c76:	bf00      	nop
   b6c78:	000b5cfd 	.word	0x000b5cfd
   b6c7c:	000bb884 	.word	0x000bb884
   b6c80:	000bb8c2 	.word	0x000bb8c2
   b6c84:	000b7231 	.word	0x000b7231

000b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6c88:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6c8a:	4c0a      	ldr	r4, [pc, #40]	; (b6cb4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6c8c:	7823      	ldrb	r3, [r4, #0]
   b6c8e:	f3bf 8f5b 	dmb	ish
   b6c92:	07db      	lsls	r3, r3, #31
   b6c94:	d40c      	bmi.n	b6cb0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6c96:	4620      	mov	r0, r4
   b6c98:	f7fd ff7f 	bl	b4b9a <__cxa_guard_acquire>
   b6c9c:	b140      	cbz	r0, b6cb0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6c9e:	4806      	ldr	r0, [pc, #24]	; (b6cb8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6ca0:	f7ff ffbe 	bl	b6c20 <_ZN8particle14BleLocalDeviceC1Ev>
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	f7fd ff7d 	bl	b4ba4 <__cxa_guard_release>
   b6caa:	4804      	ldr	r0, [pc, #16]	; (b6cbc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6cac:	f002 fb64 	bl	b9378 <atexit>
    return instance;
}
   b6cb0:	4801      	ldr	r0, [pc, #4]	; (b6cb8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6cb2:	bd10      	pop	{r4, pc}
   b6cb4:	2003e5f8 	.word	0x2003e5f8
   b6cb8:	2003e604 	.word	0x2003e604
   b6cbc:	000b6ed9 	.word	0x000b6ed9

000b6cc0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6cc0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6cc2:	6803      	ldr	r3, [r0, #0]
   b6cc4:	3b09      	subs	r3, #9
   b6cc6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6cc8:	b08d      	sub	sp, #52	; 0x34
   b6cca:	4604      	mov	r4, r0
   b6ccc:	460d      	mov	r5, r1
    switch (event->type) {
   b6cce:	d811      	bhi.n	b6cf4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6cd0:	f7ff ffda 	bl	b6c88 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6cd4:	88a1      	ldrh	r1, [r4, #4]
   b6cd6:	6800      	ldr	r0, [r0, #0]
   b6cd8:	f7ff fea2 	bl	b6a20 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6cdc:	4603      	mov	r3, r0
   b6cde:	b958      	cbnz	r0, b6cf8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6ce0:	2220      	movs	r2, #32
   b6ce2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6ce6:	4a0b      	ldr	r2, [pc, #44]	; (b6d14 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6ce8:	9200      	str	r2, [sp, #0]
   b6cea:	490b      	ldr	r1, [pc, #44]	; (b6d18 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6cec:	aa04      	add	r2, sp, #16
   b6cee:	2032      	movs	r0, #50	; 0x32
   b6cf0:	f7ff f9be 	bl	b6070 <log_message>
}
   b6cf4:	b00d      	add	sp, #52	; 0x34
   b6cf6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6cf8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6cfa:	2a00      	cmp	r2, #0
   b6cfc:	d0fa      	beq.n	b6cf4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6cfe:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6d02:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6d06:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6d0a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6d0c:	aa04      	add	r2, sp, #16
   b6d0e:	a903      	add	r1, sp, #12
   b6d10:	47a0      	blx	r4
}
   b6d12:	e7ef      	b.n	b6cf4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6d14:	000bb904 	.word	0x000bb904
   b6d18:	000bb89b 	.word	0x000bb89b

000b6d1c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6d1c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6d1e:	2000      	movs	r0, #0
   b6d20:	f7ff f80c 	bl	b5d3c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6d24:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6d28:	bd08      	pop	{r3, pc}

000b6d2a <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b6d2a:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b6d2c:	2100      	movs	r1, #0
   b6d2e:	f7ff b80d 	b.w	b5d4c <hal_ble_select_antenna>

000b6d32 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6d32:	b919      	cbnz	r1, b6d3c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6d34:	460a      	mov	r2, r1
   b6d36:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6d38:	f7ff b810 	b.w	b5d5c <hal_ble_gap_set_advertising_data>
   b6d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6d40:	2200      	movs	r2, #0
   b6d42:	e7f9      	b.n	b6d38 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6d44 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6d44:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6d46:	69d8      	ldr	r0, [r3, #28]
}
   b6d48:	2800      	cmp	r0, #0
   b6d4a:	bfd4      	ite	le
   b6d4c:	2000      	movle	r0, #0
   b6d4e:	2001      	movgt	r0, #1
   b6d50:	4770      	bx	lr

000b6d52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6d52:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6d54:	1e14      	subs	r4, r2, #0
   b6d56:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6d58:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6d5a:	db02      	blt.n	b6d62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6d5c:	1862      	adds	r2, r4, r1
   b6d5e:	429a      	cmp	r2, r3
   b6d60:	dd00      	ble.n	b6d64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6d62:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6d64:	682a      	ldr	r2, [r5, #0]
   b6d66:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6d68:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6d6a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6d6c:	1a52      	subs	r2, r2, r1
   b6d6e:	f002 fb27 	bl	b93c0 <memmove>
    size_ -= n;
   b6d72:	686a      	ldr	r2, [r5, #4]
   b6d74:	1b12      	subs	r2, r2, r4
   b6d76:	606a      	str	r2, [r5, #4]
}
   b6d78:	bd38      	pop	{r3, r4, r5, pc}

000b6d7a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6d7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6d7c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6d7e:	4604      	mov	r4, r0
   b6d80:	460d      	mov	r5, r1
   b6d82:	ab01      	add	r3, sp, #4
   b6d84:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6d88:	f7ff fc86 	bl	b6698 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6d8c:	4602      	mov	r2, r0
   b6d8e:	b138      	cbz	r0, b6da0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6d90:	9901      	ldr	r1, [sp, #4]
   b6d92:	4620      	mov	r0, r4
   b6d94:	f7ff ffdd 	bl	b6d52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6d98:	4629      	mov	r1, r5
   b6d9a:	4620      	mov	r0, r4
   b6d9c:	f7ff ffed 	bl	b6d7a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6da0:	b003      	add	sp, #12
   b6da2:	bd30      	pop	{r4, r5, pc}

000b6da4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6da4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6da6:	460c      	mov	r4, r1
   b6da8:	b929      	cbnz	r1, b6db6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6daa:	460a      	mov	r2, r1
   b6dac:	4608      	mov	r0, r1
}
   b6dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6db2:	f7fe bfdb 	b.w	b5d6c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6db6:	2101      	movs	r1, #1
   b6db8:	4620      	mov	r0, r4
   b6dba:	f7ff ffde 	bl	b6d7a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6dbe:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6dc2:	2200      	movs	r2, #0
   b6dc4:	e7f3      	b.n	b6dae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6dc6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6dc6:	b538      	push	{r3, r4, r5, lr}
   b6dc8:	4604      	mov	r4, r0
   b6dca:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6dcc:	f7ff ffb1 	bl	b6d32 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6dd0:	2800      	cmp	r0, #0
   b6dd2:	db0a      	blt.n	b6dea <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6dd4:	4629      	mov	r1, r5
   b6dd6:	4620      	mov	r0, r4
   b6dd8:	f7ff ffe4 	bl	b6da4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6ddc:	2800      	cmp	r0, #0
   b6dde:	db04      	blt.n	b6dea <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b6de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6de4:	2000      	movs	r0, #0
   b6de6:	f7fe bfc9 	b.w	b5d7c <hal_ble_gap_start_advertising>
}
   b6dea:	bd38      	pop	{r3, r4, r5, pc}

000b6dec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6dec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6dee:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6df0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6df2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6df4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6df6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6df8:	f7fd fec7 	bl	b4b8a <_Znwj>
   b6dfc:	b118      	cbz	r0, b6e06 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
   b6dfe:	682b      	ldr	r3, [r5, #0]
   b6e00:	6003      	str	r3, [r0, #0]
   b6e02:	686b      	ldr	r3, [r5, #4]
   b6e04:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6e06:	4b03      	ldr	r3, [pc, #12]	; (b6e14 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6e08:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6e0a:	4b03      	ldr	r3, [pc, #12]	; (b6e18 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6e0c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6e0e:	60a3      	str	r3, [r4, #8]
      }
   b6e10:	4620      	mov	r0, r4
   b6e12:	bd38      	pop	{r3, r4, r5, pc}
   b6e14:	000b66d9 	.word	0x000b66d9
   b6e18:	000b66f1 	.word	0x000b66f1

000b6e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6e1c:	680b      	ldr	r3, [r1, #0]
   b6e1e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6e20:	b113      	cbz	r3, b6e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6e22:	685a      	ldr	r2, [r3, #4]
   b6e24:	3201      	adds	r2, #1
   b6e26:	605a      	str	r2, [r3, #4]
      }
   b6e28:	4770      	bx	lr

000b6e2a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6e2a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6e2c:	f851 3b04 	ldr.w	r3, [r1], #4
   b6e30:	4604      	mov	r4, r0
   b6e32:	f840 3b04 	str.w	r3, [r0], #4
   b6e36:	f7ff fff1 	bl	b6e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6e3a:	6823      	ldr	r3, [r4, #0]
   b6e3c:	b90b      	cbnz	r3, b6e42 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6e3e:	f7ff fc41 	bl	b66c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6e42:	4620      	mov	r0, r4
   b6e44:	bd10      	pop	{r4, pc}

000b6e46 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6e46:	b510      	push	{r4, lr}
   b6e48:	f851 3b04 	ldr.w	r3, [r1], #4
   b6e4c:	4604      	mov	r4, r0
   b6e4e:	f840 3b04 	str.w	r3, [r0], #4
   b6e52:	f7ff ffe3 	bl	b6e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6e56:	4620      	mov	r0, r4
   b6e58:	bd10      	pop	{r4, pc}

000b6e5a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6e5a:	b510      	push	{r4, lr}
   b6e5c:	f851 3b04 	ldr.w	r3, [r1], #4
   b6e60:	4604      	mov	r4, r0
   b6e62:	f840 3b04 	str.w	r3, [r0], #4
   b6e66:	f7ff ffd9 	bl	b6e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	bd10      	pop	{r4, pc}

000b6e6e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6e6e:	b510      	push	{r4, lr}
   b6e70:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6e72:	3004      	adds	r0, #4
   b6e74:	f7fd ff8c 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6e78:	4620      	mov	r0, r4
   b6e7a:	bd10      	pop	{r4, pc}

000b6e7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6e7c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6e7e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6e82:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6e84:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6e88:	42ae      	cmp	r6, r5
   b6e8a:	d004      	beq.n	b6e96 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6e8c:	1d28      	adds	r0, r5, #4
   b6e8e:	f7fd ff7f 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e92:	3508      	adds	r5, #8
   b6e94:	e7f8      	b.n	b6e88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6e96:	6820      	ldr	r0, [r4, #0]
   b6e98:	f7ff f9d6 	bl	b6248 <free>
}
   b6e9c:	4620      	mov	r0, r4
   b6e9e:	bd70      	pop	{r4, r5, r6, pc}

000b6ea0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6ea0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6ea2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6ea6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6ea8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6eac:	42ae      	cmp	r6, r5
   b6eae:	d004      	beq.n	b6eba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6eb0:	1d28      	adds	r0, r5, #4
   b6eb2:	f7fd ff6d 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6eb6:	3508      	adds	r5, #8
   b6eb8:	e7f8      	b.n	b6eac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6eba:	6820      	ldr	r0, [r4, #0]
   b6ebc:	f7ff f9c4 	bl	b6248 <free>
}
   b6ec0:	4620      	mov	r0, r4
   b6ec2:	bd70      	pop	{r4, r5, r6, pc}

000b6ec4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6ec4:	b510      	push	{r4, lr}
   b6ec6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6ec8:	3024      	adds	r0, #36	; 0x24
   b6eca:	f7ff ffe9 	bl	b6ea0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6ece:	f104 0018 	add.w	r0, r4, #24
   b6ed2:	f7ff ffd3 	bl	b6e7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6ed6:	bd10      	pop	{r4, pc}

000b6ed8 <__tcf_0>:
    static BleLocalDevice instance;
   b6ed8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6eda:	4b17      	ldr	r3, [pc, #92]	; (b6f38 <__tcf_0+0x60>)
   b6edc:	681c      	ldr	r4, [r3, #0]
   b6ede:	b354      	cbz	r4, b6f36 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6ee0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6ee4:	f7fe f903 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
   b6ee8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6eec:	f7fe f8ff 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
   b6ef0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6ef4:	f7fe f8fb 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
   b6ef8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6efc:	f7fe f8f7 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6f00:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6f04:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6f08:	42ae      	cmp	r6, r5
   b6f0a:	d004      	beq.n	b6f16 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6f0c:	1d28      	adds	r0, r5, #4
   b6f0e:	f7fd ff3f 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f12:	3508      	adds	r5, #8
   b6f14:	e7f8      	b.n	b6f08 <__tcf_0+0x30>
    ::free(ptr);
   b6f16:	69a0      	ldr	r0, [r4, #24]
   b6f18:	f7ff f996 	bl	b6248 <free>
    ~BleLocalDeviceImpl() = default;
   b6f1c:	f104 000c 	add.w	r0, r4, #12
   b6f20:	f7ff ffbe 	bl	b6ea0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6f24:	4620      	mov	r0, r4
   b6f26:	f7ff ffa9 	bl	b6e7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6f2a:	4620      	mov	r0, r4
   b6f2c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6f32:	f7fd be30 	b.w	b4b96 <_ZdlPvj>
   b6f36:	bd70      	pop	{r4, r5, r6, pc}
   b6f38:	2003e604 	.word	0x2003e604

000b6f3c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6f3c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6f3e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6f40:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6f44:	e9c1 3300 	strd	r3, r3, [r1]
   b6f48:	6803      	ldr	r3, [r0, #0]
   b6f4a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f4c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6f4e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6f50:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6f52:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6f54:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6f56:	f7fd ff1b 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6f5a:	b002      	add	sp, #8
   b6f5c:	bd10      	pop	{r4, pc}

000b6f5e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6f5e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6f60:	b510      	push	{r4, lr}
      if (_M_empty())
   b6f62:	b90a      	cbnz	r2, b6f68 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6f64:	f001 fe2c 	bl	b8bc0 <_ZSt25__throw_bad_function_callv>
    }
   b6f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f6c:	68c3      	ldr	r3, [r0, #12]
   b6f6e:	4718      	bx	r3

000b6f70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6f70:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6f72:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6f74:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6f76:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6f78:	dd03      	ble.n	b6f82 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6f7a:	f7ff f96d 	bl	b6258 <realloc>
            if (!d) {
   b6f7e:	b918      	cbnz	r0, b6f88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6f80:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6f82:	f7ff f961 	bl	b6248 <free>
        T* d = nullptr;
   b6f86:	2000      	movs	r0, #0
        data_ = d;
   b6f88:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6f8a:	60a5      	str	r5, [r4, #8]
        return true;
   b6f8c:	2001      	movs	r0, #1
   b6f8e:	e7f7      	b.n	b6f80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6f90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6f90:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6f92:	6883      	ldr	r3, [r0, #8]
   b6f94:	428b      	cmp	r3, r1
   b6f96:	da02      	bge.n	b6f9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6f98:	f7ff ffea 	bl	b6f70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6f9c:	bd08      	pop	{r3, pc}
    return true;
   b6f9e:	2001      	movs	r0, #1
   b6fa0:	e7fc      	b.n	b6f9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6fa2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6fa6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6fa8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6faa:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6fac:	4419      	add	r1, r3
   b6fae:	6883      	ldr	r3, [r0, #8]
   b6fb0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6fb2:	4604      	mov	r4, r0
   b6fb4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6fb6:	dc12      	bgt.n	b6fde <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6fb8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6fba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6fbc:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6fbe:	1bd2      	subs	r2, r2, r7
   b6fc0:	4631      	mov	r1, r6
   b6fc2:	1970      	adds	r0, r6, r5
   b6fc4:	f002 f9fc 	bl	b93c0 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6fc8:	462a      	mov	r2, r5
   b6fca:	4641      	mov	r1, r8
   b6fcc:	4630      	mov	r0, r6
   b6fce:	f002 f9e9 	bl	b93a4 <memcpy>
    size_ += n;
   b6fd2:	6863      	ldr	r3, [r4, #4]
   b6fd4:	442b      	add	r3, r5
   b6fd6:	6063      	str	r3, [r4, #4]
    return true;
   b6fd8:	2001      	movs	r0, #1
}
   b6fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6fde:	f7ff ffc7 	bl	b6f70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6fe2:	2800      	cmp	r0, #0
   b6fe4:	d1e8      	bne.n	b6fb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6fe6:	e7f8      	b.n	b6fda <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6fe8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fea:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6fec:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6ff0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6ff2:	4604      	mov	r4, r0
   b6ff4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6ff6:	da0b      	bge.n	b7010 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6ff8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ffa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6ffc:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ffe:	1b52      	subs	r2, r2, r5
   b7000:	1c48      	adds	r0, r1, #1
   b7002:	f002 f9dd 	bl	b93c0 <memmove>
    new(p) T(std::move(value));
   b7006:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7008:	6863      	ldr	r3, [r4, #4]
   b700a:	3301      	adds	r3, #1
   b700c:	6063      	str	r3, [r4, #4]
}
   b700e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7010:	3101      	adds	r1, #1
   b7012:	f7ff ffad 	bl	b6f70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7016:	2800      	cmp	r0, #0
   b7018:	d1ee      	bne.n	b6ff8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b701a:	e7f8      	b.n	b700e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b701c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b701c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b701e:	6841      	ldr	r1, [r0, #4]
   b7020:	f7ff bfe2 	b.w	b6fe8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7024 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7028:	4604      	mov	r4, r0
   b702a:	461d      	mov	r5, r3
   b702c:	460f      	mov	r7, r1
   b702e:	ab01      	add	r3, sp, #4
   b7030:	4690      	mov	r8, r2
   b7032:	460a      	mov	r2, r1
   b7034:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7038:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b703c:	f7ff fb2c 	bl	b6698 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7040:	1cae      	adds	r6, r5, #2
   b7042:	6863      	ldr	r3, [r4, #4]
   b7044:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7046:	f1b9 0f00 	cmp.w	r9, #0
   b704a:	d126      	bne.n	b709a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b704c:	b328      	cbz	r0, b709a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b704e:	4433      	add	r3, r6
   b7050:	1a1b      	subs	r3, r3, r0
   b7052:	2bff      	cmp	r3, #255	; 0xff
   b7054:	d809      	bhi.n	b706a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7056:	9901      	ldr	r1, [sp, #4]
   b7058:	4620      	mov	r0, r4
   b705a:	f7ff fe7a 	bl	b6d52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b705e:	6861      	ldr	r1, [r4, #4]
   b7060:	4620      	mov	r0, r4
   b7062:	4431      	add	r1, r6
   b7064:	f7ff ff94 	bl	b6f90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7068:	b918      	cbnz	r0, b7072 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b706a:	6860      	ldr	r0, [r4, #4]
}
   b706c:	b003      	add	sp, #12
   b706e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7072:	1c6a      	adds	r2, r5, #1
   b7074:	9901      	ldr	r1, [sp, #4]
   b7076:	b2d2      	uxtb	r2, r2
   b7078:	4620      	mov	r0, r4
   b707a:	f7ff ffb5 	bl	b6fe8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b707e:	9901      	ldr	r1, [sp, #4]
   b7080:	463a      	mov	r2, r7
   b7082:	3101      	adds	r1, #1
   b7084:	4620      	mov	r0, r4
   b7086:	f7ff ffaf 	bl	b6fe8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b708a:	9901      	ldr	r1, [sp, #4]
   b708c:	462b      	mov	r3, r5
   b708e:	4642      	mov	r2, r8
   b7090:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7092:	4620      	mov	r0, r4
   b7094:	f7ff ff85 	bl	b6fa2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7098:	e7e7      	b.n	b706a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b709a:	18f1      	adds	r1, r6, r3
   b709c:	29ff      	cmp	r1, #255	; 0xff
   b709e:	d8e4      	bhi.n	b706a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b70a0:	4620      	mov	r0, r4
   b70a2:	f7ff ff75 	bl	b6f90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b70a6:	2800      	cmp	r0, #0
   b70a8:	d0df      	beq.n	b706a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b70aa:	1c69      	adds	r1, r5, #1
   b70ac:	b2c9      	uxtb	r1, r1
   b70ae:	4620      	mov	r0, r4
   b70b0:	f7ff ffb4 	bl	b701c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b70b4:	4639      	mov	r1, r7
   b70b6:	4620      	mov	r0, r4
   b70b8:	f7ff ffb0 	bl	b701c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b70bc:	6861      	ldr	r1, [r4, #4]
   b70be:	462b      	mov	r3, r5
   b70c0:	4642      	mov	r2, r8
   b70c2:	e7e6      	b.n	b7092 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b70c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b70c4:	b430      	push	{r4, r5}
   b70c6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b70ca:	b11a      	cbz	r2, b70d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b70cc:	9502      	str	r5, [sp, #8]
}
   b70ce:	bc30      	pop	{r4, r5}
   b70d0:	f7ff bfa8 	b.w	b7024 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b70d4:	6840      	ldr	r0, [r0, #4]
}
   b70d6:	bc30      	pop	{r4, r5}
   b70d8:	4770      	bx	lr

000b70da <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b70da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b70dc:	2300      	movs	r3, #0
   b70de:	e9c0 3300 	strd	r3, r3, [r0]
   b70e2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b70e4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b70e6:	9300      	str	r3, [sp, #0]
   b70e8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b70ea:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b70ee:	4619      	mov	r1, r3
   b70f0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b70f4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b70f6:	f7ff ffe5 	bl	b70c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b70fa:	4620      	mov	r0, r4
   b70fc:	b004      	add	sp, #16
   b70fe:	bd10      	pop	{r4, pc}

000b7100 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7102:	460a      	mov	r2, r1
   b7104:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b7106:	2114      	movs	r1, #20
   b7108:	4610      	mov	r0, r2
   b710a:	9203      	str	r2, [sp, #12]
   b710c:	f002 f9e1 	bl	b94d2 <strnlen>
   b7110:	2100      	movs	r1, #0
   b7112:	4603      	mov	r3, r0
   b7114:	9100      	str	r1, [sp, #0]
   b7116:	9a03      	ldr	r2, [sp, #12]
   b7118:	2109      	movs	r1, #9
   b711a:	4620      	mov	r0, r4
   b711c:	f7ff ffd2 	bl	b70c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7120:	b004      	add	sp, #16
   b7122:	bd10      	pop	{r4, pc}

000b7124 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7124:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7128:	4604      	mov	r4, r0
   b712a:	460d      	mov	r5, r1
   b712c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b712e:	d914      	bls.n	b715a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7130:	4290      	cmp	r0, r2
   b7132:	d213      	bcs.n	b715c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7134:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7138:	1a75      	subs	r5, r6, r1
   b713a:	f1a1 0708 	sub.w	r7, r1, #8
   b713e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7140:	42b7      	cmp	r7, r6
   b7142:	d018      	beq.n	b7176 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7144:	b11c      	cbz	r4, b714e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7146:	4631      	mov	r1, r6
   b7148:	4620      	mov	r0, r4
   b714a:	f7ff fe86 	bl	b6e5a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b714e:	1d30      	adds	r0, r6, #4
   b7150:	f7fd fe1e 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7154:	3e08      	subs	r6, #8
   b7156:	3c08      	subs	r4, #8
   b7158:	e7f2      	b.n	b7140 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b715a:	d00c      	beq.n	b7176 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b715c:	42b5      	cmp	r5, r6
   b715e:	d00a      	beq.n	b7176 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7160:	b11c      	cbz	r4, b716a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7162:	4629      	mov	r1, r5
   b7164:	4620      	mov	r0, r4
   b7166:	f7ff fe78 	bl	b6e5a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b716a:	1d28      	adds	r0, r5, #4
   b716c:	f7fd fe10 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7170:	3508      	adds	r5, #8
   b7172:	3408      	adds	r4, #8
   b7174:	e7f2      	b.n	b715c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7178 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b717a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b717c:	6846      	ldr	r6, [r0, #4]
   b717e:	4668      	mov	r0, sp
   b7180:	f7ff fe6b 	bl	b6e5a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7184:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7188:	429f      	cmp	r7, r3
   b718a:	db12      	blt.n	b71b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b718c:	3701      	adds	r7, #1
        if (n > 0) {
   b718e:	2f00      	cmp	r7, #0
   b7190:	dd29      	ble.n	b71e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7192:	00f8      	lsls	r0, r7, #3
   b7194:	f7ff f850 	bl	b6238 <malloc>
            if (!d) {
   b7198:	4605      	mov	r5, r0
   b719a:	b1f0      	cbz	r0, b71da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b719c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b71a0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b71a4:	f7ff ffbe 	bl	b7124 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b71a8:	6820      	ldr	r0, [r4, #0]
   b71aa:	f7ff f84d 	bl	b6248 <free>
        data_ = d;
   b71ae:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b71b0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b71b2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b71b4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b71b6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b71ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b71be:	4631      	mov	r1, r6
   b71c0:	f106 0008 	add.w	r0, r6, #8
   b71c4:	f7ff ffae 	bl	b7124 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b71c8:	b11e      	cbz	r6, b71d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b71ca:	4669      	mov	r1, sp
   b71cc:	4630      	mov	r0, r6
   b71ce:	f7ff fe44 	bl	b6e5a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b71d2:	6863      	ldr	r3, [r4, #4]
   b71d4:	3301      	adds	r3, #1
   b71d6:	6063      	str	r3, [r4, #4]
    return true;
   b71d8:	2501      	movs	r5, #1
   b71da:	a801      	add	r0, sp, #4
   b71dc:	f7fd fdd8 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b71e0:	4628      	mov	r0, r5
   b71e2:	b003      	add	sp, #12
   b71e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b71e6:	2500      	movs	r5, #0
   b71e8:	e7de      	b.n	b71a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b71ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b71ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b71ec:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b71f0:	4605      	mov	r5, r0
   b71f2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b71f4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b71f8:	42a6      	cmp	r6, r4
   b71fa:	d005      	beq.n	b7208 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b71fc:	4639      	mov	r1, r7
   b71fe:	4620      	mov	r0, r4
   b7200:	f7ff fceb 	bl	b6bda <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7204:	b108      	cbz	r0, b720a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7206:	b914      	cbnz	r4, b720e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b720a:	3408      	adds	r4, #8
   b720c:	e7f4      	b.n	b71f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b720e:	1d20      	adds	r0, r4, #4
   b7210:	f7fd fdbe 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7214:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7218:	f104 0108 	add.w	r1, r4, #8
   b721c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7220:	4620      	mov	r0, r4
   b7222:	f7ff ff7f 	bl	b7124 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7226:	686b      	ldr	r3, [r5, #4]
   b7228:	3b01      	subs	r3, #1
   b722a:	606b      	str	r3, [r5, #4]
    return true;
   b722c:	e7ec      	b.n	b7208 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7230 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7234:	4605      	mov	r5, r0
   b7236:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7238:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b723a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b723c:	f7ff fa98 	bl	b6770 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7240:	682e      	ldr	r6, [r5, #0]
   b7242:	1ef3      	subs	r3, r6, #3
   b7244:	2b0d      	cmp	r3, #13
   b7246:	d83c      	bhi.n	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7248:	e8df f013 	tbh	[pc, r3, lsl #1]
   b724c:	0053000e 	.word	0x0053000e
   b7250:	00d1003b 	.word	0x00d1003b
   b7254:	003b003b 	.word	0x003b003b
   b7258:	003b003b 	.word	0x003b003b
   b725c:	009b003b 	.word	0x009b003b
   b7260:	009b009b 	.word	0x009b009b
   b7264:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7268:	a804      	add	r0, sp, #16
   b726a:	f7ff fc81 	bl	b6b70 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b726e:	9b04      	ldr	r3, [sp, #16]
   b7270:	89aa      	ldrh	r2, [r5, #12]
   b7272:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7274:	6869      	ldr	r1, [r5, #4]
   b7276:	9804      	ldr	r0, [sp, #16]
   b7278:	3108      	adds	r1, #8
   b727a:	3002      	adds	r0, #2
   b727c:	f7ff fa92 	bl	b67a4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7280:	a904      	add	r1, sp, #16
   b7282:	a806      	add	r0, sp, #24
   b7284:	f7ff fde9 	bl	b6e5a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7288:	a906      	add	r1, sp, #24
   b728a:	f104 0018 	add.w	r0, r4, #24
   b728e:	f7ff ff73 	bl	b7178 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7292:	4605      	mov	r5, r0
   b7294:	a807      	add	r0, sp, #28
   b7296:	f7fd fd7b 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b729a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b729c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b729e:	b9b5      	cbnz	r5, b72ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b72a0:	4b5d      	ldr	r3, [pc, #372]	; (b7418 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b72a2:	495e      	ldr	r1, [pc, #376]	; (b741c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b72a4:	9300      	str	r3, [sp, #0]
   b72a6:	2032      	movs	r0, #50	; 0x32
   b72a8:	462b      	mov	r3, r5
   b72aa:	aa06      	add	r2, sp, #24
   b72ac:	9507      	str	r5, [sp, #28]
   b72ae:	f7fe fedf 	bl	b6070 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b72b2:	9b04      	ldr	r3, [sp, #16]
   b72b4:	4629      	mov	r1, r5
   b72b6:	8818      	ldrh	r0, [r3, #0]
   b72b8:	f7fe fd68 	bl	b5d8c <hal_ble_gap_disconnect>
   b72bc:	a805      	add	r0, sp, #20
   b72be:	f7fd fd67 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b72c2:	a803      	add	r0, sp, #12
   b72c4:	f7ff fa62 	bl	b678c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b72c8:	b00e      	add	sp, #56	; 0x38
   b72ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b72ce:	4a54      	ldr	r2, [pc, #336]	; (b7420 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b72d0:	9200      	str	r2, [sp, #0]
   b72d2:	2300      	movs	r3, #0
   b72d4:	4951      	ldr	r1, [pc, #324]	; (b741c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b72d6:	9307      	str	r3, [sp, #28]
   b72d8:	aa06      	add	r2, sp, #24
   b72da:	2001      	movs	r0, #1
   b72dc:	f7fe fec8 	bl	b6070 <log_message>
                if (impl->connectedCallback_) {
   b72e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b72e2:	2b00      	cmp	r3, #0
   b72e4:	d0ea      	beq.n	b72bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b72e6:	a904      	add	r1, sp, #16
   b72e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b72ec:	f7ff fe37 	bl	b6f5e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b72f0:	e7e4      	b.n	b72bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b72f2:	89a9      	ldrh	r1, [r5, #12]
   b72f4:	4620      	mov	r0, r4
   b72f6:	f7ff fb93 	bl	b6a20 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b72fa:	4606      	mov	r6, r0
   b72fc:	2800      	cmp	r0, #0
   b72fe:	d0e0      	beq.n	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7300:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7302:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7306:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b730a:	8029      	strh	r1, [r5, #0]
   b730c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7310:	429a      	cmp	r2, r3
   b7312:	d003      	beq.n	b731c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7314:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7318:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b731a:	e7f9      	b.n	b7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b731c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7320:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7324:	45b8      	cmp	r8, r7
   b7326:	d004      	beq.n	b7332 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7328:	1d38      	adds	r0, r7, #4
   b732a:	f7fd fd31 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b732e:	3708      	adds	r7, #8
   b7330:	e7f8      	b.n	b7324 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7332:	2300      	movs	r3, #0
   b7334:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7336:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b733a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b733e:	45b8      	cmp	r8, r7
   b7340:	d004      	beq.n	b734c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7342:	1d38      	adds	r0, r7, #4
   b7344:	f7fd fd24 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7348:	3708      	adds	r7, #8
   b734a:	e7f8      	b.n	b733e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b734c:	2300      	movs	r3, #0
   b734e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7350:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7352:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7354:	b123      	cbz	r3, b7360 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7356:	4631      	mov	r1, r6
   b7358:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b735c:	f7ff fdff 	bl	b6f5e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7360:	2300      	movs	r3, #0
   b7362:	2220      	movs	r2, #32
   b7364:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7368:	4a2e      	ldr	r2, [pc, #184]	; (b7424 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b736a:	9200      	str	r2, [sp, #0]
   b736c:	492b      	ldr	r1, [pc, #172]	; (b741c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b736e:	aa06      	add	r2, sp, #24
   b7370:	2001      	movs	r0, #1
   b7372:	f7fe fe7d 	bl	b6070 <log_message>
                    impl->peers_.removeOne(*peer);
   b7376:	4631      	mov	r1, r6
   b7378:	f104 0018 	add.w	r0, r4, #24
   b737c:	f7ff ff35 	bl	b71ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7380:	e79f      	b.n	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7382:	89a9      	ldrh	r1, [r5, #12]
   b7384:	4620      	mov	r0, r4
   b7386:	f7ff fb4b 	bl	b6a20 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b738a:	2800      	cmp	r0, #0
   b738c:	d099      	beq.n	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b738e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7390:	2b00      	cmp	r3, #0
   b7392:	d096      	beq.n	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7394:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7396:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7398:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b739c:	d001      	beq.n	b73a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b739e:	2e10      	cmp	r6, #16
   b73a0:	d117      	bne.n	b73d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b73a2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b73a4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b73a6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b73a8:	2506      	movs	r5, #6
                        };
   b73aa:	f88d 3015 	strb.w	r3, [sp, #21]
   b73ae:	9104      	str	r1, [sp, #16]
   b73b0:	f88d 2014 	strb.w	r2, [sp, #20]
   b73b4:	9006      	str	r0, [sp, #24]
   b73b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b73ba:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b73bc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b73c0:	9508      	str	r5, [sp, #32]
   b73c2:	e883 0003 	stmia.w	r3, {r0, r1}
   b73c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b73c8:	a906      	add	r1, sp, #24
   b73ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b73ce:	4798      	blx	r3
   b73d0:	e777      	b.n	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b73d2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b73d4:	bf01      	itttt	eq
   b73d6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b73d8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b73da:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b73de:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b73e0:	bf0f      	iteee	eq
   b73e2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b73e6:	461a      	movne	r2, r3
   b73e8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b73ea:	461d      	movne	r5, r3
   b73ec:	e7dd      	b.n	b73aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b73ee:	89a9      	ldrh	r1, [r5, #12]
   b73f0:	4620      	mov	r0, r4
   b73f2:	f7ff fb15 	bl	b6a20 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b73f6:	4601      	mov	r1, r0
   b73f8:	2800      	cmp	r0, #0
   b73fa:	f43f af62 	beq.w	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b73fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7400:	2b00      	cmp	r3, #0
   b7402:	f43f af5e 	beq.w	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7406:	686b      	ldr	r3, [r5, #4]
   b7408:	9306      	str	r3, [sp, #24]
   b740a:	aa06      	add	r2, sp, #24
   b740c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b740e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7412:	4798      	blx	r3
   b7414:	e755      	b.n	b72c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7416:	bf00      	nop
   b7418:	000bb91c 	.word	0x000bb91c
   b741c:	000bb89b 	.word	0x000bb89b
   b7420:	000bb942 	.word	0x000bb942
   b7424:	000bb95f 	.word	0x000bb95f

000b7428 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7428:	b513      	push	{r0, r1, r4, lr}
   b742a:	460b      	mov	r3, r1
   b742c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b742e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7432:	466c      	mov	r4, sp
   b7434:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7438:	e893 0003 	ldmia.w	r3, {r0, r1}
   b743c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7440:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7444:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7448:	b002      	add	sp, #8
   b744a:	bd10      	pop	{r4, pc}

000b744c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b744c:	b538      	push	{r3, r4, r5, lr}
   b744e:	4605      	mov	r5, r0
   b7450:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7452:	f7ff ffe9 	bl	b7428 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7456:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7458:	68a2      	ldr	r2, [r4, #8]
   b745a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b745c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b745e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7460:	68e2      	ldr	r2, [r4, #12]
   b7462:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7464:	60e3      	str	r3, [r4, #12]
      }
   b7466:	bd38      	pop	{r3, r4, r5, pc}

000b7468 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7468:	b570      	push	{r4, r5, r6, lr}
   b746a:	4604      	mov	r4, r0
   b746c:	b08c      	sub	sp, #48	; 0x30
   b746e:	460e      	mov	r6, r1
   b7470:	9201      	str	r2, [sp, #4]
   b7472:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7474:	f7ff fab4 	bl	b69e0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7478:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b747a:	9901      	ldr	r1, [sp, #4]
   b747c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7480:	f7ff f848 	bl	b6514 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7484:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7488:	b1cd      	cbz	r5, b74be <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b748a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b748c:	9502      	str	r5, [sp, #8]
   b748e:	a902      	add	r1, sp, #8
   b7490:	a804      	add	r0, sp, #16
   b7492:	9303      	str	r3, [sp, #12]
   b7494:	f7ff fcaa 	bl	b6dec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7498:	2300      	movs	r3, #0
	__x.swap(*this);
   b749a:	a908      	add	r1, sp, #32
   b749c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b749e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b74a0:	f7ff ffd4 	bl	b744c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b74a4:	4631      	mov	r1, r6
   b74a6:	a808      	add	r0, sp, #32
   b74a8:	f7ff ffd0 	bl	b744c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b74ac:	a808      	add	r0, sp, #32
   b74ae:	f7fd fe1e 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
   b74b2:	a804      	add	r0, sp, #16
   b74b4:	f7fd fe1b 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
    }
   b74b8:	4620      	mov	r0, r4
   b74ba:	b00c      	add	sp, #48	; 0x30
   b74bc:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b74be:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b74c0:	e7ea      	b.n	b7498 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b74c4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b74c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b74c8:	b087      	sub	sp, #28
   b74ca:	461d      	mov	r5, r3
   b74cc:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b74d0:	4680      	mov	r8, r0
   b74d2:	468b      	mov	fp, r1
   b74d4:	4692      	mov	sl, r2
   b74d6:	9912      	ldr	r1, [sp, #72]	; 0x48
   b74d8:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b74da:	2200      	movs	r2, #0
   b74dc:	2068      	movs	r0, #104	; 0x68
   b74de:	9102      	str	r1, [sp, #8]
   b74e0:	9204      	str	r2, [sp, #16]
   b74e2:	f7fd fb52 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b74e6:	1e06      	subs	r6, r0, #0
   b74e8:	f106 090c 	add.w	r9, r6, #12
   b74ec:	d018      	beq.n	b7520 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b74ee:	2201      	movs	r2, #1
	: _M_impl(__a)
   b74f0:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b74f2:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b74f6:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b74f8:	4a15      	ldr	r2, [pc, #84]	; (b7550 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b74fa:	f847 2b20 	str.w	r2, [r7], #32
   b74fe:	9b03      	ldr	r3, [sp, #12]
   b7500:	9100      	str	r1, [sp, #0]
   b7502:	465a      	mov	r2, fp
   b7504:	4651      	mov	r1, sl
   b7506:	4648      	mov	r0, r9
   b7508:	f7ff ffae 	bl	b7468 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b750c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b750e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7510:	682b      	ldr	r3, [r5, #0]
   b7512:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7516:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b751a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b751c:	6823      	ldr	r3, [r4, #0]
   b751e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7520:	a904      	add	r1, sp, #16
   b7522:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7524:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7528:	f7ff fd08 	bl	b6f3c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b752c:	a805      	add	r0, sp, #20
   b752e:	f7fd fc2f 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7532:	f8d8 3000 	ldr.w	r3, [r8]
   b7536:	b93b      	cbnz	r3, b7548 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7538:	4a06      	ldr	r2, [pc, #24]	; (b7554 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b753a:	4907      	ldr	r1, [pc, #28]	; (b7558 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b753c:	200a      	movs	r0, #10
}
   b753e:	b007      	add	sp, #28
   b7540:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7544:	f7fe bd8c 	b.w	b6060 <panic_>
}
   b7548:	b007      	add	sp, #28
   b754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b754e:	bf00      	nop
   b7550:	000bb9d8 	.word	0x000bb9d8
   b7554:	000b5cfd 	.word	0x000b5cfd
   b7558:	000bb884 	.word	0x000bb884

000b755c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b755c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b755e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7560:	4604      	mov	r4, r0
   b7562:	460d      	mov	r5, r1
   b7564:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7566:	d914      	bls.n	b7592 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7568:	4290      	cmp	r0, r2
   b756a:	d213      	bcs.n	b7594 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b756c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7570:	1a75      	subs	r5, r6, r1
   b7572:	f1a1 0708 	sub.w	r7, r1, #8
   b7576:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7578:	42b7      	cmp	r7, r6
   b757a:	d018      	beq.n	b75ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b757c:	b11c      	cbz	r4, b7586 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b757e:	4631      	mov	r1, r6
   b7580:	4620      	mov	r0, r4
   b7582:	f7ff fc60 	bl	b6e46 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7586:	1d30      	adds	r0, r6, #4
   b7588:	f7fd fc02 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b758c:	3e08      	subs	r6, #8
   b758e:	3c08      	subs	r4, #8
   b7590:	e7f2      	b.n	b7578 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7592:	d00c      	beq.n	b75ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7594:	42b5      	cmp	r5, r6
   b7596:	d00a      	beq.n	b75ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7598:	b11c      	cbz	r4, b75a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b759a:	4629      	mov	r1, r5
   b759c:	4620      	mov	r0, r4
   b759e:	f7ff fc52 	bl	b6e46 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b75a2:	1d28      	adds	r0, r5, #4
   b75a4:	f7fd fbf4 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b75a8:	3508      	adds	r5, #8
   b75aa:	3408      	adds	r4, #8
   b75ac:	e7f2      	b.n	b7594 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b75ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b75b0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b75b2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b75b4:	4605      	mov	r5, r0
        if (n > 0) {
   b75b6:	dd11      	ble.n	b75dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b75b8:	00f0      	lsls	r0, r6, #3
   b75ba:	f7fe fe3d 	bl	b6238 <malloc>
            if (!d) {
   b75be:	4604      	mov	r4, r0
   b75c0:	b158      	cbz	r0, b75da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b75c2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b75c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b75ca:	f7ff ffc7 	bl	b755c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b75ce:	6828      	ldr	r0, [r5, #0]
   b75d0:	f7fe fe3a 	bl	b6248 <free>
        data_ = d;
   b75d4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b75d6:	60ae      	str	r6, [r5, #8]
        return true;
   b75d8:	2001      	movs	r0, #1
    }
   b75da:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b75dc:	2400      	movs	r4, #0
   b75de:	e7f6      	b.n	b75ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b75e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b75e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b75e2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b75e4:	6845      	ldr	r5, [r0, #4]
   b75e6:	4668      	mov	r0, sp
   b75e8:	f7ff fc2d 	bl	b6e46 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75ec:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b75f0:	4299      	cmp	r1, r3
   b75f2:	da10      	bge.n	b7616 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b75f4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b75f6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b75f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b75fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7600:	4629      	mov	r1, r5
   b7602:	f105 0008 	add.w	r0, r5, #8
   b7606:	f7ff ffa9 	bl	b755c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b760a:	b98d      	cbnz	r5, b7630 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b760c:	6863      	ldr	r3, [r4, #4]
   b760e:	3301      	adds	r3, #1
   b7610:	6063      	str	r3, [r4, #4]
    return true;
   b7612:	2601      	movs	r6, #1
   b7614:	e006      	b.n	b7624 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7616:	3101      	adds	r1, #1
   b7618:	4620      	mov	r0, r4
   b761a:	f7ff ffc9 	bl	b75b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b761e:	4606      	mov	r6, r0
   b7620:	2800      	cmp	r0, #0
   b7622:	d1e7      	bne.n	b75f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7624:	a801      	add	r0, sp, #4
   b7626:	f7fd fbb3 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b762a:	4630      	mov	r0, r6
   b762c:	b002      	add	sp, #8
   b762e:	bd70      	pop	{r4, r5, r6, pc}
   b7630:	4669      	mov	r1, sp
   b7632:	4628      	mov	r0, r5
   b7634:	f7ff fc07 	bl	b6e46 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7638:	e7e8      	b.n	b760c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b763a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b763a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b763e:	4604      	mov	r4, r0
   b7640:	460d      	mov	r5, r1
   b7642:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7644:	d914      	bls.n	b7670 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7646:	4290      	cmp	r0, r2
   b7648:	d213      	bcs.n	b7672 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b764a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b764e:	1a75      	subs	r5, r6, r1
   b7650:	f1a1 0708 	sub.w	r7, r1, #8
   b7654:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7656:	42b7      	cmp	r7, r6
   b7658:	d018      	beq.n	b768c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b765a:	b11c      	cbz	r4, b7664 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b765c:	4631      	mov	r1, r6
   b765e:	4620      	mov	r0, r4
   b7660:	f7ff fbe3 	bl	b6e2a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7664:	1d30      	adds	r0, r6, #4
   b7666:	f7fd fb93 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b766a:	3e08      	subs	r6, #8
   b766c:	3c08      	subs	r4, #8
   b766e:	e7f2      	b.n	b7656 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7670:	d00c      	beq.n	b768c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7672:	42b5      	cmp	r5, r6
   b7674:	d00a      	beq.n	b768c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7676:	b11c      	cbz	r4, b7680 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7678:	4629      	mov	r1, r5
   b767a:	4620      	mov	r0, r4
   b767c:	f7ff fbd5 	bl	b6e2a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7680:	1d28      	adds	r0, r5, #4
   b7682:	f7fd fb85 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7686:	3508      	adds	r5, #8
   b7688:	3408      	adds	r4, #8
   b768a:	e7f2      	b.n	b7672 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b768c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b768e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b768e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7690:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7692:	4605      	mov	r5, r0
        if (n > 0) {
   b7694:	dd11      	ble.n	b76ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7696:	00f0      	lsls	r0, r6, #3
   b7698:	f7fe fdce 	bl	b6238 <malloc>
            if (!d) {
   b769c:	4604      	mov	r4, r0
   b769e:	b158      	cbz	r0, b76b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b76a0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b76a4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b76a8:	f7ff ffc7 	bl	b763a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b76ac:	6828      	ldr	r0, [r5, #0]
   b76ae:	f7fe fdcb 	bl	b6248 <free>
        data_ = d;
   b76b2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b76b4:	60ae      	str	r6, [r5, #8]
        return true;
   b76b6:	2001      	movs	r0, #1
    }
   b76b8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b76ba:	2400      	movs	r4, #0
   b76bc:	e7f6      	b.n	b76ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b76be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b76be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b76c0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b76c2:	6845      	ldr	r5, [r0, #4]
   b76c4:	4668      	mov	r0, sp
   b76c6:	f7ff fbb0 	bl	b6e2a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76ca:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b76ce:	4299      	cmp	r1, r3
   b76d0:	da10      	bge.n	b76f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b76d2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b76d4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b76d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b76da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b76de:	4629      	mov	r1, r5
   b76e0:	f105 0008 	add.w	r0, r5, #8
   b76e4:	f7ff ffa9 	bl	b763a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b76e8:	b98d      	cbnz	r5, b770e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b76ea:	6863      	ldr	r3, [r4, #4]
   b76ec:	3301      	adds	r3, #1
   b76ee:	6063      	str	r3, [r4, #4]
    return true;
   b76f0:	2601      	movs	r6, #1
   b76f2:	e006      	b.n	b7702 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76f4:	3101      	adds	r1, #1
   b76f6:	4620      	mov	r0, r4
   b76f8:	f7ff ffc9 	bl	b768e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b76fc:	4606      	mov	r6, r0
   b76fe:	2800      	cmp	r0, #0
   b7700:	d1e7      	bne.n	b76d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7702:	a801      	add	r0, sp, #4
   b7704:	f7fd fb44 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7708:	4630      	mov	r0, r6
   b770a:	b002      	add	sp, #8
   b770c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b770e:	4669      	mov	r1, sp
   b7710:	4628      	mov	r0, r5
   b7712:	f7ff fb8a 	bl	b6e2a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7716:	e7e8      	b.n	b76ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7718 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b771c:	4617      	mov	r7, r2
   b771e:	b0a1      	sub	sp, #132	; 0x84
   b7720:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7722:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7724:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7726:	f7ff f823 	bl	b6770 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b772a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b772c:	7923      	ldrb	r3, [r4, #4]
   b772e:	b953      	cbnz	r3, b7746 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7730:	4639      	mov	r1, r7
   b7732:	4640      	mov	r0, r8
   b7734:	f7ff fb79 	bl	b6e2a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7738:	a80a      	add	r0, sp, #40	; 0x28
   b773a:	f7ff f827 	bl	b678c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b773e:	4640      	mov	r0, r8
   b7740:	b021      	add	sp, #132	; 0x84
   b7742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7746:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7748:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b774c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7750:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7752:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7756:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b775a:	9b03      	ldr	r3, [sp, #12]
   b775c:	429d      	cmp	r5, r3
   b775e:	d021      	beq.n	b77a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7760:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7764:	4658      	mov	r0, fp
   b7766:	f109 0114 	add.w	r1, r9, #20
   b776a:	f7ff f8ae 	bl	b68ca <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b776e:	b1b8      	cbz	r0, b77a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7770:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7774:	4650      	mov	r0, sl
   b7776:	f7ff f8a8 	bl	b68ca <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b777a:	b188      	cbz	r0, b77a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b777c:	6823      	ldr	r3, [r4, #0]
   b777e:	f8d9 2000 	ldr.w	r2, [r9]
   b7782:	4053      	eors	r3, r2
   b7784:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7788:	d10a      	bne.n	b77a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b778a:	2220      	movs	r2, #32
   b778c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7790:	4a5e      	ldr	r2, [pc, #376]	; (b790c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7792:	9200      	str	r2, [sp, #0]
   b7794:	aa15      	add	r2, sp, #84	; 0x54
   b7796:	495e      	ldr	r1, [pc, #376]	; (b7910 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7798:	2032      	movs	r0, #50	; 0x32
   b779a:	f7fe fc69 	bl	b6070 <log_message>
   b779e:	e7c7      	b.n	b7730 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b77a0:	3508      	adds	r5, #8
   b77a2:	e7da      	b.n	b775a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b77a4:	4650      	mov	r0, sl
   b77a6:	f7ff f861 	bl	b686c <_ZNK8particle7BleUuid7isValidEv>
   b77aa:	b960      	cbnz	r0, b77c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b77ac:	4959      	ldr	r1, [pc, #356]	; (b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b77ae:	2201      	movs	r2, #1
   b77b0:	a815      	add	r0, sp, #84	; 0x54
   b77b2:	ad15      	add	r5, sp, #84	; 0x54
   b77b4:	f7ff f832 	bl	b681c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b77b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77ba:	46d4      	mov	ip, sl
   b77bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b77c0:	682b      	ldr	r3, [r5, #0]
   b77c2:	f8cc 3000 	str.w	r3, [ip]
   b77c6:	6833      	ldr	r3, [r6, #0]
   b77c8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b77cc:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b77d0:	455d      	cmp	r5, fp
   b77d2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b77d4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b77d6:	d06e      	beq.n	b78b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b77d8:	f855 0b08 	ldr.w	r0, [r5], #8
   b77dc:	f7ff f875 	bl	b68ca <_ZNK8particle7BleUuideqERKS0_>
   b77e0:	2800      	cmp	r0, #0
   b77e2:	d0f5      	beq.n	b77d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b77e4:	f104 0a14 	add.w	sl, r4, #20
   b77e8:	4650      	mov	r0, sl
   b77ea:	f7ff f83f 	bl	b686c <_ZNK8particle7BleUuid7isValidEv>
   b77ee:	b988      	cbnz	r0, b7814 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b77f0:	4b49      	ldr	r3, [pc, #292]	; (b7918 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b77f2:	4948      	ldr	r1, [pc, #288]	; (b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b77f4:	881a      	ldrh	r2, [r3, #0]
   b77f6:	3201      	adds	r2, #1
   b77f8:	b292      	uxth	r2, r2
   b77fa:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b77fc:	a815      	add	r0, sp, #84	; 0x54
   b77fe:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7800:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7802:	f7ff f82a 	bl	b685a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7808:	46d4      	mov	ip, sl
   b780a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b780e:	682b      	ldr	r3, [r5, #0]
   b7810:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7814:	4b41      	ldr	r3, [pc, #260]	; (b791c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7816:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7818:	2228      	movs	r2, #40	; 0x28
   b781a:	2100      	movs	r1, #0
   b781c:	a816      	add	r0, sp, #88	; 0x58
   b781e:	f001 fde9 	bl	b93f4 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7822:	4651      	mov	r1, sl
   b7824:	a804      	add	r0, sp, #16
   b7826:	f7ff f833 	bl	b6890 <_ZN8particle7BleUuid7halUUIDEv>
   b782a:	ab04      	add	r3, sp, #16
   b782c:	aa18      	add	r2, sp, #96	; 0x60
   b782e:	f10d 0c20 	add.w	ip, sp, #32
   b7832:	6818      	ldr	r0, [r3, #0]
   b7834:	6859      	ldr	r1, [r3, #4]
   b7836:	4615      	mov	r5, r2
   b7838:	c503      	stmia	r5!, {r0, r1}
   b783a:	3308      	adds	r3, #8
   b783c:	4563      	cmp	r3, ip
   b783e:	462a      	mov	r2, r5
   b7840:	d1f7      	bne.n	b7832 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7842:	6818      	ldr	r0, [r3, #0]
   b7844:	6028      	str	r0, [r5, #0]
    return value_;
   b7846:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7848:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b784c:	f8d9 3000 	ldr.w	r3, [r9]
   b7850:	8a9b      	ldrh	r3, [r3, #20]
   b7852:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7856:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7858:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b785a:	4b31      	ldr	r3, [pc, #196]	; (b7920 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b785c:	2200      	movs	r2, #0
   b785e:	1da1      	adds	r1, r4, #6
   b7860:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7862:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7866:	f7fe fac3 	bl	b5df0 <hal_ble_gatt_server_add_characteristic>
   b786a:	2800      	cmp	r0, #0
   b786c:	f47f af60 	bne.w	b7730 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7870:	2301      	movs	r3, #1
   b7872:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7874:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7876:	4639      	mov	r1, r7
        return characteristics_;
   b7878:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b787a:	a80d      	add	r0, sp, #52	; 0x34
   b787c:	f7ff fad5 	bl	b6e2a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7880:	4620      	mov	r0, r4
   b7882:	a90d      	add	r1, sp, #52	; 0x34
   b7884:	f7ff ff1b 	bl	b76be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7888:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b788a:	a80e      	add	r0, sp, #56	; 0x38
   b788c:	f7fd fa80 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7890:	2c00      	cmp	r4, #0
   b7892:	f47f af4d 	bne.w	b7730 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7896:	2320      	movs	r3, #32
   b7898:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b789c:	4b21      	ldr	r3, [pc, #132]	; (b7924 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b789e:	9300      	str	r3, [sp, #0]
   b78a0:	aa0d      	add	r2, sp, #52	; 0x34
   b78a2:	4623      	mov	r3, r4
   b78a4:	e777      	b.n	b7796 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b78a6:	4639      	mov	r1, r7
   b78a8:	4640      	mov	r0, r8
   b78aa:	f7ff fabe 	bl	b6e2a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b78ae:	a80c      	add	r0, sp, #48	; 0x30
   b78b0:	f7fd fa6e 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78b4:	e740      	b.n	b7738 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b78b6:	a80b      	add	r0, sp, #44	; 0x2c
   b78b8:	f7ff f936 	bl	b6b28 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b78bc:	4651      	mov	r1, sl
   b78be:	a815      	add	r0, sp, #84	; 0x54
   b78c0:	f7fe ffe6 	bl	b6890 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b78c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b78c6:	2300      	movs	r3, #0
   b78c8:	3214      	adds	r2, #20
   b78ca:	a915      	add	r1, sp, #84	; 0x54
   b78cc:	2001      	movs	r0, #1
   b78ce:	f7fe fa67 	bl	b5da0 <hal_ble_gatt_server_add_service>
   b78d2:	2800      	cmp	r0, #0
   b78d4:	d1e7      	bne.n	b78a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b78d6:	6835      	ldr	r5, [r6, #0]
   b78d8:	a90b      	add	r1, sp, #44	; 0x2c
   b78da:	a80d      	add	r0, sp, #52	; 0x34
   b78dc:	f7ff fab3 	bl	b6e46 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b78e0:	4628      	mov	r0, r5
   b78e2:	a90d      	add	r1, sp, #52	; 0x34
   b78e4:	f7ff fe7c 	bl	b75e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b78e8:	4605      	mov	r5, r0
   b78ea:	a80e      	add	r0, sp, #56	; 0x38
   b78ec:	f7fd fa50 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78f0:	2d00      	cmp	r5, #0
   b78f2:	d0d8      	beq.n	b78a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b78f4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b78f6:	6853      	ldr	r3, [r2, #4]
   b78f8:	6812      	ldr	r2, [r2, #0]
   b78fa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b78fe:	3b01      	subs	r3, #1
   b7900:	a80c      	add	r0, sp, #48	; 0x30
   b7902:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7906:	f7fd fa43 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b790a:	e76b      	b.n	b77e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b790c:	000bb97e 	.word	0x000bb97e
   b7910:	000bb89b 	.word	0x000bb89b
   b7914:	000bba2c 	.word	0x000bba2c
   b7918:	2003e5fc 	.word	0x2003e5fc
   b791c:	002c0003 	.word	0x002c0003
   b7920:	000b6cc1 	.word	0x000b6cc1
   b7924:	000bb9a9 	.word	0x000bb9a9

000b7928 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7928:	4802      	ldr	r0, [pc, #8]	; (b7934 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b792a:	2300      	movs	r3, #0
   b792c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b792e:	f7fe bab7 	b.w	b5ea0 <os_mutex_recursive_create>
   b7932:	bf00      	nop
   b7934:	2003e600 	.word	0x2003e600

000b7938 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b793a:	4606      	mov	r6, r0
   b793c:	460d      	mov	r5, r1
  size_t n = 0;
   b793e:	188f      	adds	r7, r1, r2
   b7940:	2400      	movs	r4, #0
  while (size--) {
   b7942:	42bd      	cmp	r5, r7
   b7944:	d00c      	beq.n	b7960 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7946:	6833      	ldr	r3, [r6, #0]
   b7948:	f815 1b01 	ldrb.w	r1, [r5], #1
   b794c:	689b      	ldr	r3, [r3, #8]
   b794e:	4630      	mov	r0, r6
   b7950:	4798      	blx	r3
     if (chunk>=0)
   b7952:	1e03      	subs	r3, r0, #0
   b7954:	db01      	blt.n	b795a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7956:	441c      	add	r4, r3
  while (size--) {
   b7958:	e7f3      	b.n	b7942 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b795a:	2c00      	cmp	r4, #0
   b795c:	bf08      	it	eq
   b795e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7960:	4620      	mov	r0, r4
   b7962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7964 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7964:	b513      	push	{r0, r1, r4, lr}
   b7966:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7968:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b796a:	b159      	cbz	r1, b7984 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b796c:	9101      	str	r1, [sp, #4]
   b796e:	f7fd f8b1 	bl	b4ad4 <strlen>
   b7972:	6823      	ldr	r3, [r4, #0]
   b7974:	9901      	ldr	r1, [sp, #4]
   b7976:	68db      	ldr	r3, [r3, #12]
   b7978:	4602      	mov	r2, r0
   b797a:	4620      	mov	r0, r4
    }
   b797c:	b002      	add	sp, #8
   b797e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7982:	4718      	bx	r3
    }
   b7984:	b002      	add	sp, #8
   b7986:	bd10      	pop	{r4, pc}

000b7988 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b7988:	6803      	ldr	r3, [r0, #0]
   b798a:	689b      	ldr	r3, [r3, #8]
   b798c:	4718      	bx	r3

000b798e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b798e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7990:	210d      	movs	r1, #13
{
   b7992:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7994:	f7ff fff8 	bl	b7988 <_ZN5Print5printEc>
  n += print('\n');
   b7998:	210a      	movs	r1, #10
  size_t n = print('\r');
   b799a:	4604      	mov	r4, r0
  n += print('\n');
   b799c:	4628      	mov	r0, r5
   b799e:	f7ff fff3 	bl	b7988 <_ZN5Print5printEc>
  return n;
}
   b79a2:	4420      	add	r0, r4
   b79a4:	bd38      	pop	{r3, r4, r5, pc}

000b79a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b79a6:	b538      	push	{r3, r4, r5, lr}
   b79a8:	4605      	mov	r5, r0
  return write(str);
   b79aa:	f7ff ffdb 	bl	b7964 <_ZN5Print5writeEPKc>
   b79ae:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b79b0:	4628      	mov	r0, r5
   b79b2:	f7ff ffec 	bl	b798e <_ZN5Print7printlnEv>
  return n;
}
   b79b6:	4420      	add	r0, r4
   b79b8:	bd38      	pop	{r3, r4, r5, pc}

000b79ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b79ba:	b530      	push	{r4, r5, lr}
   b79bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b79be:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b79c0:	2a01      	cmp	r2, #1
  *str = '\0';
   b79c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b79c6:	bf98      	it	ls
   b79c8:	220a      	movls	r2, #10
   b79ca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b79cc:	460d      	mov	r5, r1
   b79ce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b79d2:	fb01 5312 	mls	r3, r1, r2, r5
   b79d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79da:	2b09      	cmp	r3, #9
   b79dc:	bf94      	ite	ls
   b79de:	3330      	addls	r3, #48	; 0x30
   b79e0:	3337      	addhi	r3, #55	; 0x37
   b79e2:	b2db      	uxtb	r3, r3
  } while(n);
   b79e4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b79ea:	d9ef      	bls.n	b79cc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b79ec:	4621      	mov	r1, r4
   b79ee:	f7ff ffb9 	bl	b7964 <_ZN5Print5writeEPKc>
}
   b79f2:	b00b      	add	sp, #44	; 0x2c
   b79f4:	bd30      	pop	{r4, r5, pc}
	...

000b79f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b79f8:	4b01      	ldr	r3, [pc, #4]	; (b7a00 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b79fa:	4a02      	ldr	r2, [pc, #8]	; (b7a04 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b79fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b79fe:	4770      	bx	lr
   b7a00:	2003e608 	.word	0x2003e608
   b7a04:	000bba4c 	.word	0x000bba4c

000b7a08 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7a0c:	4a15      	ldr	r2, [pc, #84]	; (b7a64 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7a0e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7a70 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b7a12:	e9d2 6300 	ldrd	r6, r3, [r2]
   b7a16:	1980      	adds	r0, r0, r6
   b7a18:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b7a1c:	4b12      	ldr	r3, [pc, #72]	; (b7a68 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b7a1e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b7a22:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b7a26:	1986      	adds	r6, r0, r6
   b7a28:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7a2c:	42bb      	cmp	r3, r7
   b7a2e:	bf08      	it	eq
   b7a30:	42b2      	cmpeq	r2, r6
{
   b7a32:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7a34:	d013      	beq.n	b7a5e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7a36:	a903      	add	r1, sp, #12
   b7a38:	4668      	mov	r0, sp
   b7a3a:	e9cd 6700 	strd	r6, r7, [sp]
   b7a3e:	f7fe fc53 	bl	b62e8 <localtime_r>
	calendar_time.tm_year += 1900;
   b7a42:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a44:	4d09      	ldr	r5, [pc, #36]	; (b7a6c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7a46:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a4a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7a4c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7a56:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a5a:	6823      	ldr	r3, [r4, #0]
   b7a5c:	602b      	str	r3, [r5, #0]
    }
}
   b7a5e:	b00c      	add	sp, #48	; 0x30
   b7a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7a64:	2003e640 	.word	0x2003e640
   b7a68:	2003e638 	.word	0x2003e638
   b7a6c:	2003e610 	.word	0x2003e610
   b7a70:	2003e648 	.word	0x2003e648

000b7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7a74:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a76:	2000      	movs	r0, #0
   b7a78:	f7fe fbce 	bl	b6218 <spark_sync_time_pending>
   b7a7c:	b128      	cbz	r0, b7a8a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7a7e:	f7fe fbb3 	bl	b61e8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a82:	f080 0001 	eor.w	r0, r0, #1
   b7a86:	b2c0      	uxtb	r0, r0
    }
   b7a88:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a8a:	2001      	movs	r0, #1
   b7a8c:	e7fc      	b.n	b7a88 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b7a90 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b7a90:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b7a92:	f7ff ffb9 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b7a96:	4b02      	ldr	r3, [pc, #8]	; (b7aa0 <_ZN9TimeClass5monthEx+0x10>)
   b7a98:	6918      	ldr	r0, [r3, #16]
}
   b7a9a:	3001      	adds	r0, #1
   b7a9c:	bd08      	pop	{r3, pc}
   b7a9e:	bf00      	nop
   b7aa0:	2003e610 	.word	0x2003e610

000b7aa4 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b7aa4:	b530      	push	{r4, r5, lr}
   b7aa6:	b093      	sub	sp, #76	; 0x4c
   b7aa8:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b7aac:	4b19      	ldr	r3, [pc, #100]	; (b7b14 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b7aae:	4604      	mov	r4, r0
    t += time_zone_cache;
   b7ab0:	e9d3 1000 	ldrd	r1, r0, [r3]
   b7ab4:	9b01      	ldr	r3, [sp, #4]
   b7ab6:	1852      	adds	r2, r2, r1
   b7ab8:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b7abc:	4816      	ldr	r0, [pc, #88]	; (b7b18 <_ZN9TimeClass7timeStrEx+0x74>)
   b7abe:	e9d0 1000 	ldrd	r1, r0, [r0]
   b7ac2:	1852      	adds	r2, r2, r1
   b7ac4:	eb43 0300 	adc.w	r3, r3, r0
   b7ac8:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b7acc:	2224      	movs	r2, #36	; 0x24
   b7ace:	eb0d 0002 	add.w	r0, sp, r2
   b7ad2:	2100      	movs	r1, #0
   b7ad4:	f001 fc8e 	bl	b93f4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b7ad8:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b7ada:	a909      	add	r1, sp, #36	; 0x24
   b7adc:	4668      	mov	r0, sp
   b7ade:	f7fe fc03 	bl	b62e8 <localtime_r>
    char ascstr[26] = {};
   b7ae2:	2216      	movs	r2, #22
   b7ae4:	4629      	mov	r1, r5
   b7ae6:	a803      	add	r0, sp, #12
   b7ae8:	9502      	str	r5, [sp, #8]
   b7aea:	f001 fc83 	bl	b93f4 <memset>
    asctime_r(&calendar_time, ascstr);
   b7aee:	a902      	add	r1, sp, #8
   b7af0:	a809      	add	r0, sp, #36	; 0x24
   b7af2:	f001 fc1b 	bl	b932c <asctime_r>
    int len = strlen(ascstr);
   b7af6:	a802      	add	r0, sp, #8
   b7af8:	f7fc ffec 	bl	b4ad4 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b7afc:	ab12      	add	r3, sp, #72	; 0x48
   b7afe:	4418      	add	r0, r3
    return String(ascstr);
   b7b00:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b7b02:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b7b06:	4620      	mov	r0, r4
   b7b08:	f7fe fcd6 	bl	b64b8 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7b0c:	4620      	mov	r0, r4
   b7b0e:	b013      	add	sp, #76	; 0x4c
   b7b10:	bd30      	pop	{r4, r5, pc}
   b7b12:	bf00      	nop
   b7b14:	2003e640 	.word	0x2003e640
   b7b18:	2003e638 	.word	0x2003e638

000b7b1c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7b1c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7b1e:	2000      	movs	r0, #0
   b7b20:	f7fe f8fc 	bl	b5d1c <hal_rtc_time_is_valid>
    if (rtcstate)
   b7b24:	4604      	mov	r4, r0
   b7b26:	b9a0      	cbnz	r0, b7b52 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7b28:	f7fe faaa 	bl	b6080 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7b2c:	2801      	cmp	r0, #1
   b7b2e:	d110      	bne.n	b7b52 <_ZN9TimeClass7isValidEv+0x36>
   b7b30:	4620      	mov	r0, r4
   b7b32:	f7fe fad5 	bl	b60e0 <system_thread_get_state>
   b7b36:	b960      	cbnz	r0, b7b52 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7b38:	f7ff ff9c 	bl	b7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7b3c:	b910      	cbnz	r0, b7b44 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7b3e:	f7fe fb4b 	bl	b61d8 <spark_process>
        while (_while() && !_condition()) {
   b7b42:	e7f9      	b.n	b7b38 <_ZN9TimeClass7isValidEv+0x1c>
   b7b44:	f7ff ff96 	bl	b7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7b4c:	2000      	movs	r0, #0
   b7b4e:	f7fe b8e5 	b.w	b5d1c <hal_rtc_time_is_valid>
}
   b7b52:	4620      	mov	r0, r4
   b7b54:	bd10      	pop	{r4, pc}

000b7b56 <_ZN9TimeClass3nowEv>:
{
   b7b56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7b58:	f7ff ffe0 	bl	b7b1c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7b5c:	2210      	movs	r2, #16
   b7b5e:	2100      	movs	r1, #0
   b7b60:	4668      	mov	r0, sp
   b7b62:	f001 fc47 	bl	b93f4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7b66:	2100      	movs	r1, #0
   b7b68:	4668      	mov	r0, sp
   b7b6a:	f7fe f8df 	bl	b5d2c <hal_rtc_get_time>
}
   b7b6e:	9800      	ldr	r0, [sp, #0]
   b7b70:	b005      	add	sp, #20
   b7b72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b78 <_ZN9TimeClass4hourEv>:
{
   b7b78:	b508      	push	{r3, lr}
	return hour(now());
   b7b7a:	f7ff ffec 	bl	b7b56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b7e:	17c1      	asrs	r1, r0, #31
   b7b80:	f7ff ff42 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b84:	4b01      	ldr	r3, [pc, #4]	; (b7b8c <_ZN9TimeClass4hourEv+0x14>)
   b7b86:	6898      	ldr	r0, [r3, #8]
   b7b88:	bd08      	pop	{r3, pc}
   b7b8a:	bf00      	nop
   b7b8c:	2003e610 	.word	0x2003e610

000b7b90 <_ZN9TimeClass6minuteEv>:
{
   b7b90:	b508      	push	{r3, lr}
	return minute(now());
   b7b92:	f7ff ffe0 	bl	b7b56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b96:	17c1      	asrs	r1, r0, #31
   b7b98:	f7ff ff36 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b9c:	4b01      	ldr	r3, [pc, #4]	; (b7ba4 <_ZN9TimeClass6minuteEv+0x14>)
   b7b9e:	6858      	ldr	r0, [r3, #4]
   b7ba0:	bd08      	pop	{r3, pc}
   b7ba2:	bf00      	nop
   b7ba4:	2003e610 	.word	0x2003e610

000b7ba8 <_ZN9TimeClass3dayEv>:
{
   b7ba8:	b508      	push	{r3, lr}
	return day(now());
   b7baa:	f7ff ffd4 	bl	b7b56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7bae:	17c1      	asrs	r1, r0, #31
   b7bb0:	f7ff ff2a 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7bb4:	4b01      	ldr	r3, [pc, #4]	; (b7bbc <_ZN9TimeClass3dayEv+0x14>)
   b7bb6:	68d8      	ldr	r0, [r3, #12]
   b7bb8:	bd08      	pop	{r3, pc}
   b7bba:	bf00      	nop
   b7bbc:	2003e610 	.word	0x2003e610

000b7bc0 <_ZN9TimeClass5monthEv>:
{
   b7bc0:	b508      	push	{r3, lr}
	return month(now());
   b7bc2:	f7ff ffc8 	bl	b7b56 <_ZN9TimeClass3nowEv>
}
   b7bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b7bca:	17c1      	asrs	r1, r0, #31
   b7bcc:	f7ff bf60 	b.w	b7a90 <_ZN9TimeClass5monthEx>

000b7bd0 <_ZN9TimeClass4yearEv>:
{
   b7bd0:	b508      	push	{r3, lr}
	return year(now());
   b7bd2:	f7ff ffc0 	bl	b7b56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7bd6:	17c1      	asrs	r1, r0, #31
   b7bd8:	f7ff ff16 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7bdc:	4b01      	ldr	r3, [pc, #4]	; (b7be4 <_ZN9TimeClass4yearEv+0x14>)
   b7bde:	6958      	ldr	r0, [r3, #20]
   b7be0:	bd08      	pop	{r3, pc}
   b7be2:	bf00      	nop
   b7be4:	2003e610 	.word	0x2003e610

000b7be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7be8:	4b02      	ldr	r3, [pc, #8]	; (b7bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7bea:	681a      	ldr	r2, [r3, #0]
   b7bec:	4b02      	ldr	r3, [pc, #8]	; (b7bf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7bee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7bf0:	4770      	bx	lr
   b7bf2:	bf00      	nop
   b7bf4:	2003e308 	.word	0x2003e308
   b7bf8:	2003e60c 	.word	0x2003e60c

000b7bfc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7bfc:	2100      	movs	r1, #0
   b7bfe:	f7fe ba4f 	b.w	b60a0 <system_delay_ms>
	...

000b7c04 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7c04:	4b01      	ldr	r3, [pc, #4]	; (b7c0c <_GLOBAL__sub_I_RGB+0x8>)
   b7c06:	2200      	movs	r2, #0
   b7c08:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7c0a:	4770      	bx	lr
   b7c0c:	2003e650 	.word	0x2003e650

000b7c10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7c10:	4b01      	ldr	r3, [pc, #4]	; (b7c18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7c12:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7c14:	4770      	bx	lr
   b7c16:	bf00      	nop
   b7c18:	2003e30c 	.word	0x2003e30c

000b7c1c <serialEventRun>:
{
   b7c1c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7c1e:	4b0b      	ldr	r3, [pc, #44]	; (b7c4c <serialEventRun+0x30>)
   b7c20:	b143      	cbz	r3, b7c34 <serialEventRun+0x18>
   b7c22:	f000 fc09 	bl	b8438 <_Z16_fetch_usbserialv>
   b7c26:	6803      	ldr	r3, [r0, #0]
   b7c28:	691b      	ldr	r3, [r3, #16]
   b7c2a:	4798      	blx	r3
   b7c2c:	2800      	cmp	r0, #0
   b7c2e:	dd01      	ble.n	b7c34 <serialEventRun+0x18>
        serialEvent();
   b7c30:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7c34:	4b06      	ldr	r3, [pc, #24]	; (b7c50 <serialEventRun+0x34>)
   b7c36:	b143      	cbz	r3, b7c4a <serialEventRun+0x2e>
   b7c38:	f000 fe82 	bl	b8940 <_Z22__fetch_global_Serial1v>
   b7c3c:	6803      	ldr	r3, [r0, #0]
   b7c3e:	691b      	ldr	r3, [r3, #16]
   b7c40:	4798      	blx	r3
   b7c42:	2800      	cmp	r0, #0
   b7c44:	dd01      	ble.n	b7c4a <serialEventRun+0x2e>
        serialEvent1();
   b7c46:	f3af 8000 	nop.w
}
   b7c4a:	bd08      	pop	{r3, pc}
	...

000b7c54 <_post_loop>:
{
   b7c54:	b508      	push	{r3, lr}
	serialEventRun();
   b7c56:	f7ff ffe1 	bl	b7c1c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7c5a:	f7fe f857 	bl	b5d0c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7c5e:	4b01      	ldr	r3, [pc, #4]	; (b7c64 <_post_loop+0x10>)
   b7c60:	6018      	str	r0, [r3, #0]
}
   b7c62:	bd08      	pop	{r3, pc}
   b7c64:	2003e744 	.word	0x2003e744

000b7c68 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c68:	4805      	ldr	r0, [pc, #20]	; (b7c80 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7c6a:	4a06      	ldr	r2, [pc, #24]	; (b7c84 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7c6c:	4906      	ldr	r1, [pc, #24]	; (b7c88 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7c6e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c70:	1a12      	subs	r2, r2, r0
   b7c72:	f001 fb97 	bl	b93a4 <memcpy>
    __backup_sram_signature = signature;
   b7c76:	4b05      	ldr	r3, [pc, #20]	; (b7c8c <_Z33system_initialize_user_backup_ramv+0x24>)
   b7c78:	4a05      	ldr	r2, [pc, #20]	; (b7c90 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7c7a:	601a      	str	r2, [r3, #0]
}
   b7c7c:	bd08      	pop	{r3, pc}
   b7c7e:	bf00      	nop
   b7c80:	2003f400 	.word	0x2003f400
   b7c84:	2003f404 	.word	0x2003f404
   b7c88:	000bc454 	.word	0x000bc454
   b7c8c:	2003f400 	.word	0x2003f400
   b7c90:	9a271c1e 	.word	0x9a271c1e

000b7c94 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7c94:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7c96:	2300      	movs	r3, #0
   b7c98:	9300      	str	r3, [sp, #0]
   b7c9a:	461a      	mov	r2, r3
   b7c9c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7ca0:	f7fe fa30 	bl	b6104 <system_ctrl_set_result>
}
   b7ca4:	b003      	add	sp, #12
   b7ca6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7cac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7cac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7cae:	8843      	ldrh	r3, [r0, #2]
   b7cb0:	2b0a      	cmp	r3, #10
   b7cb2:	d008      	beq.n	b7cc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7cb4:	2b50      	cmp	r3, #80	; 0x50
   b7cb6:	d10b      	bne.n	b7cd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7cb8:	4b09      	ldr	r3, [pc, #36]	; (b7ce0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7cba:	681b      	ldr	r3, [r3, #0]
   b7cbc:	b14b      	cbz	r3, b7cd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7cbe:	b003      	add	sp, #12
   b7cc0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7cc4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7cc6:	f7ff ffe5 	bl	b7c94 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7cca:	b003      	add	sp, #12
   b7ccc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7cd0:	2300      	movs	r3, #0
   b7cd2:	9300      	str	r3, [sp, #0]
   b7cd4:	461a      	mov	r2, r3
   b7cd6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7cda:	f7fe fa13 	bl	b6104 <system_ctrl_set_result>
}
   b7cde:	e7f4      	b.n	b7cca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7ce0:	2003e664 	.word	0x2003e664

000b7ce4 <module_user_init_hook>:
{
   b7ce4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7ce6:	4812      	ldr	r0, [pc, #72]	; (b7d30 <module_user_init_hook+0x4c>)
   b7ce8:	2100      	movs	r1, #0
   b7cea:	f7fe faf5 	bl	b62d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7cee:	4b11      	ldr	r3, [pc, #68]	; (b7d34 <module_user_init_hook+0x50>)
   b7cf0:	681a      	ldr	r2, [r3, #0]
   b7cf2:	4b11      	ldr	r3, [pc, #68]	; (b7d38 <module_user_init_hook+0x54>)
   b7cf4:	429a      	cmp	r2, r3
   b7cf6:	4b11      	ldr	r3, [pc, #68]	; (b7d3c <module_user_init_hook+0x58>)
   b7cf8:	bf0c      	ite	eq
   b7cfa:	2201      	moveq	r2, #1
   b7cfc:	2200      	movne	r2, #0
   b7cfe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7d00:	d001      	beq.n	b7d06 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7d02:	f7ff ffb1 	bl	b7c68 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7d06:	f7fd fff1 	bl	b5cec <HAL_RNG_GetRandomNumber>
   b7d0a:	4604      	mov	r4, r0
    srand(seed);
   b7d0c:	f001 fb7a 	bl	b9404 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7d10:	4b0b      	ldr	r3, [pc, #44]	; (b7d40 <module_user_init_hook+0x5c>)
   b7d12:	b113      	cbz	r3, b7d1a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7d14:	4620      	mov	r0, r4
   b7d16:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7d1a:	2100      	movs	r1, #0
   b7d1c:	4808      	ldr	r0, [pc, #32]	; (b7d40 <module_user_init_hook+0x5c>)
   b7d1e:	f7fe fa83 	bl	b6228 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7d26:	4807      	ldr	r0, [pc, #28]	; (b7d44 <module_user_init_hook+0x60>)
   b7d28:	2100      	movs	r1, #0
   b7d2a:	f7fe b9e1 	b.w	b60f0 <system_ctrl_set_app_request_handler>
   b7d2e:	bf00      	nop
   b7d30:	000b7c11 	.word	0x000b7c11
   b7d34:	2003f400 	.word	0x2003f400
   b7d38:	9a271c1e 	.word	0x9a271c1e
   b7d3c:	2003e660 	.word	0x2003e660
   b7d40:	00000000 	.word	0x00000000
   b7d44:	000b7cad 	.word	0x000b7cad

000b7d48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7d48:	4770      	bx	lr

000b7d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7d4a:	2000      	movs	r0, #0
   b7d4c:	4770      	bx	lr

000b7d4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7d4e:	b510      	push	{r4, lr}
   b7d50:	2110      	movs	r1, #16
   b7d52:	4604      	mov	r4, r0
   b7d54:	f7fc ff1f 	bl	b4b96 <_ZdlPvj>
   b7d58:	4620      	mov	r0, r4
   b7d5a:	bd10      	pop	{r4, pc}

000b7d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7d5c:	b508      	push	{r3, lr}
      { delete this; }
   b7d5e:	f7ff fff6 	bl	b7d4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7d62:	bd08      	pop	{r3, pc}

000b7d64 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7d64:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7d66:	2200      	movs	r2, #0
   b7d68:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7d6c:	6002      	str	r2, [r0, #0]
   b7d6e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7d70:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d72:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7d74:	680c      	ldr	r4, [r1, #0]
   b7d76:	8085      	strh	r5, [r0, #4]
   b7d78:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d7a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7d7c:	bd30      	pop	{r4, r5, pc}

000b7d7e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7d7e:	b510      	push	{r4, lr}
   b7d80:	4604      	mov	r4, r0
    free((void*)msg_);
   b7d82:	6800      	ldr	r0, [r0, #0]
   b7d84:	f7fe fa60 	bl	b6248 <free>
}
   b7d88:	4620      	mov	r0, r4
   b7d8a:	bd10      	pop	{r4, pc}

000b7d8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7d8c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7d8e:	68c4      	ldr	r4, [r0, #12]
   b7d90:	b1f4      	cbz	r4, b7dd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7d92:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7d94:	2b02      	cmp	r3, #2
   b7d96:	d103      	bne.n	b7da0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7d98:	f104 000c 	add.w	r0, r4, #12
   b7d9c:	f7ff ffef 	bl	b7d7e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7da0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7da2:	b135      	cbz	r5, b7db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7da4:	4628      	mov	r0, r5
   b7da6:	f7fd f9a2 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
   b7daa:	2110      	movs	r1, #16
   b7dac:	4628      	mov	r0, r5
   b7dae:	f7fc fef2 	bl	b4b96 <_ZdlPvj>
   b7db2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7db4:	b135      	cbz	r5, b7dc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7db6:	4628      	mov	r0, r5
   b7db8:	f7fd f999 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
   b7dbc:	2110      	movs	r1, #16
   b7dbe:	4628      	mov	r0, r5
   b7dc0:	f7fc fee9 	bl	b4b96 <_ZdlPvj>
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	2114      	movs	r1, #20
   b7dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7dcc:	f7fc bee3 	b.w	b4b96 <_ZdlPvj>
   b7dd0:	bd38      	pop	{r3, r4, r5, pc}

000b7dd2 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   b7dd2:	b507      	push	{r0, r1, r2, lr}
   b7dd4:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   b7dd8:	6882      	ldr	r2, [r0, #8]
   b7dda:	b90a      	cbnz	r2, b7de0 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   b7ddc:	f000 fef0 	bl	b8bc0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7de0:	68c3      	ldr	r3, [r0, #12]
   b7de2:	aa01      	add	r2, sp, #4
   b7de4:	4669      	mov	r1, sp
   b7de6:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   b7de8:	b003      	add	sp, #12
   b7dea:	f85d fb04 	ldr.w	pc, [sp], #4

000b7dee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7dee:	680b      	ldr	r3, [r1, #0]
   b7df0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7df2:	684b      	ldr	r3, [r1, #4]
   b7df4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7df6:	b113      	cbz	r3, b7dfe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7df8:	685a      	ldr	r2, [r3, #4]
   b7dfa:	3201      	adds	r2, #1
   b7dfc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7dfe:	4770      	bx	lr

000b7e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e02:	4604      	mov	r4, r0
   b7e04:	4668      	mov	r0, sp
   b7e06:	460d      	mov	r5, r1
   b7e08:	f7ff fff1 	bl	b7dee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7e0c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7e0e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7e10:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7e12:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7e14:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7e16:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7e18:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b7e1a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7e1c:	f7fc ffb8 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7e20:	b135      	cbz	r5, b7e30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7e22:	1d28      	adds	r0, r5, #4
   b7e24:	f7fc ffb4 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e28:	2108      	movs	r1, #8
   b7e2a:	4628      	mov	r0, r5
   b7e2c:	f7fc feb3 	bl	b4b96 <_ZdlPvj>
        return p;
    }
   b7e30:	4620      	mov	r0, r4
   b7e32:	b003      	add	sp, #12
   b7e34:	bd30      	pop	{r4, r5, pc}

000b7e36 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b7e36:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7e38:	b510      	push	{r4, lr}
      if (_M_empty())
   b7e3a:	b90a      	cbnz	r2, b7e40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7e3c:	f000 fec0 	bl	b8bc0 <_ZSt25__throw_bad_function_callv>
    }
   b7e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7e44:	68c3      	ldr	r3, [r0, #12]
   b7e46:	4718      	bx	r3

000b7e48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7e48:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7e4a:	6800      	ldr	r0, [r0, #0]
   b7e4c:	f100 0110 	add.w	r1, r0, #16
   b7e50:	f7ff fff1 	bl	b7e36 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7e54:	bd08      	pop	{r3, pc}

000b7e56 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7e56:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7e58:	b510      	push	{r4, lr}
      if (_M_empty())
   b7e5a:	b90a      	cbnz	r2, b7e60 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7e5c:	f000 feb0 	bl	b8bc0 <_ZSt25__throw_bad_function_callv>
    }
   b7e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7e64:	68c3      	ldr	r3, [r0, #12]
   b7e66:	4718      	bx	r3

000b7e68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7e68:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7e6a:	6800      	ldr	r0, [r0, #0]
   b7e6c:	f100 0110 	add.w	r1, r0, #16
   b7e70:	f7ff fff1 	bl	b7e56 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7e74:	bd08      	pop	{r3, pc}
	...

000b7e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7e78:	b538      	push	{r3, r4, r5, lr}
   b7e7a:	2300      	movs	r3, #0
   b7e7c:	4604      	mov	r4, r0
   b7e7e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e80:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7e82:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e84:	f7fc fe81 	bl	b4b8a <_Znwj>
   b7e88:	b128      	cbz	r0, b7e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7e8a:	2301      	movs	r3, #1
   b7e8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7e90:	4b02      	ldr	r3, [pc, #8]	; (b7e9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7e92:	6003      	str	r3, [r0, #0]
   b7e94:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e96:	6020      	str	r0, [r4, #0]
	}
   b7e98:	4620      	mov	r0, r4
   b7e9a:	bd38      	pop	{r3, r4, r5, pc}
   b7e9c:	000bba74 	.word	0x000bba74

000b7ea0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7ea0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7ea2:	2300      	movs	r3, #0
   b7ea4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7ea6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7ea8:	4604      	mov	r4, r0
   b7eaa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7eac:	b12b      	cbz	r3, b7eba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7eae:	2202      	movs	r2, #2
   b7eb0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7eb2:	68eb      	ldr	r3, [r5, #12]
   b7eb4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7eb6:	68ab      	ldr	r3, [r5, #8]
   b7eb8:	60a3      	str	r3, [r4, #8]
    }
   b7eba:	4620      	mov	r0, r4
   b7ebc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7ec2:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b7ec4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b7ec6:	4668      	mov	r0, sp
   b7ec8:	f7ff ff4c 	bl	b7d64 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7ecc:	f04f 0302 	mov.w	r3, #2
   b7ed0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7ed4:	2a00      	cmp	r2, #0
   b7ed6:	d103      	bne.n	b7ee0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b7ed8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7edc:	2900      	cmp	r1, #0
   b7ede:	d1f7      	bne.n	b7ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7ee0:	d125      	bne.n	b7f2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7ee2:	f104 050c 	add.w	r5, r4, #12
   b7ee6:	4669      	mov	r1, sp
   b7ee8:	4628      	mov	r0, r5
   b7eea:	f7ff ff3b 	bl	b7d64 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7eee:	f3bf 8f5b 	dmb	ish
   b7ef2:	2301      	movs	r3, #1
   b7ef4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7ef6:	2000      	movs	r0, #0
   b7ef8:	f104 0308 	add.w	r3, r4, #8
   b7efc:	f3bf 8f5b 	dmb	ish
   b7f00:	e853 6f00 	ldrex	r6, [r3]
   b7f04:	e843 0200 	strex	r2, r0, [r3]
   b7f08:	2a00      	cmp	r2, #0
   b7f0a:	d1f9      	bne.n	b7f00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7f0c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7f10:	b16e      	cbz	r6, b7f2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7f12:	f7fe f8d5 	bl	b60c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7f16:	b178      	cbz	r0, b7f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7f18:	4629      	mov	r1, r5
   b7f1a:	4630      	mov	r0, r6
   b7f1c:	f7ff ff8b 	bl	b7e36 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7f20:	4630      	mov	r0, r6
   b7f22:	f7fd f8e4 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7f26:	2110      	movs	r1, #16
   b7f28:	4630      	mov	r0, r6
   b7f2a:	f7fc fe34 	bl	b4b96 <_ZdlPvj>
        p_->setError(std::move(error));
   b7f2e:	4668      	mov	r0, sp
   b7f30:	f7ff ff25 	bl	b7d7e <_ZN8particle5ErrorD1Ev>
    }
   b7f34:	b009      	add	sp, #36	; 0x24
   b7f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7f38:	4631      	mov	r1, r6
   b7f3a:	a802      	add	r0, sp, #8
   b7f3c:	f7ff ffb0 	bl	b7ea0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7f40:	68e0      	ldr	r0, [r4, #12]
   b7f42:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7f46:	b108      	cbz	r0, b7f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7f48:	f001 fa92 	bl	b9470 <strdup>
        type_(type) {
   b7f4c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7f4e:	2010      	movs	r0, #16
   b7f50:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7f54:	f7fc fe19 	bl	b4b8a <_Znwj>
   b7f58:	4605      	mov	r5, r0
   b7f5a:	b1e8      	cbz	r0, b7f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7f5c:	2700      	movs	r7, #0
   b7f5e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7f60:	2018      	movs	r0, #24
   b7f62:	f7fc fe12 	bl	b4b8a <_Znwj>
   b7f66:	4604      	mov	r4, r0
   b7f68:	b188      	cbz	r0, b7f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7f6a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7f6c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7f6e:	a802      	add	r0, sp, #8
   b7f70:	f7ff fa5a 	bl	b7428 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f74:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7f76:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f78:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f7a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7f7c:	9204      	str	r2, [sp, #16]
   b7f7e:	a906      	add	r1, sp, #24
   b7f80:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f82:	60e3      	str	r3, [r4, #12]
   b7f84:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7f88:	9205      	str	r2, [sp, #20]
   b7f8a:	f7ff feeb 	bl	b7d64 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7f8e:	4b08      	ldr	r3, [pc, #32]	; (b7fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7f90:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7f92:	4b08      	ldr	r3, [pc, #32]	; (b7fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7f94:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7f96:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7f98:	a806      	add	r0, sp, #24
   b7f9a:	f7ff fef0 	bl	b7d7e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7f9e:	a802      	add	r0, sp, #8
   b7fa0:	f7fd f8a5 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7fa4:	2200      	movs	r2, #0
   b7fa6:	4629      	mov	r1, r5
   b7fa8:	4803      	ldr	r0, [pc, #12]	; (b7fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b7faa:	f7fe f891 	bl	b60d0 <application_thread_invoke>
   b7fae:	e7b7      	b.n	b7f20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b7fb0:	000b7e49 	.word	0x000b7e49
   b7fb4:	000b80cd 	.word	0x000b80cd
   b7fb8:	000b85e9 	.word	0x000b85e9

000b7fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fc0:	b08b      	sub	sp, #44	; 0x2c
   b7fc2:	4605      	mov	r5, r0
   b7fc4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b7fc8:	460f      	mov	r7, r1
   b7fca:	4690      	mov	r8, r2
   b7fcc:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7fce:	f7fe f90b 	bl	b61e8 <spark_cloud_flag_connected>
   b7fd2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7fd4:	4683      	mov	fp, r0
   b7fd6:	bb38      	cbnz	r0, b8028 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b7fd8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7fdc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7fde:	a905      	add	r1, sp, #20
   b7fe0:	4630      	mov	r0, r6
   b7fe2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7fe6:	f7ff febd 	bl	b7d64 <_ZN8particle5ErrorC1EOS0_>
   b7fea:	2014      	movs	r0, #20
   b7fec:	f7fc fdcd 	bl	b4b8a <_Znwj>
   b7ff0:	4604      	mov	r4, r0
   b7ff2:	b148      	cbz	r0, b8008 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7ff4:	2302      	movs	r3, #2
   b7ff6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7ff8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7ffa:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7ffe:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8000:	4631      	mov	r1, r6
   b8002:	300c      	adds	r0, #12
   b8004:	f7ff feae 	bl	b7d64 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8008:	4628      	mov	r0, r5
	: __shared_count(__p)
   b800a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b800c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8010:	f7ff ff32 	bl	b7e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8014:	4630      	mov	r0, r6
   b8016:	f7ff feb2 	bl	b7d7e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b801a:	a805      	add	r0, sp, #20
   b801c:	f7ff feaf 	bl	b7d7e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8020:	4628      	mov	r0, r5
   b8022:	b00b      	add	sp, #44	; 0x2c
   b8024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8028:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b802a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b802c:	2014      	movs	r0, #20
   b802e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b8032:	9307      	str	r3, [sp, #28]
   b8034:	f7fc fda9 	bl	b4b8a <_Znwj>
   b8038:	4601      	mov	r1, r0
   b803a:	b118      	cbz	r0, b8044 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b803c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8040:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8042:	7044      	strb	r4, [r0, #1]
   b8044:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8046:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8048:	f7ff ff16 	bl	b7e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b804c:	4b1e      	ldr	r3, [pc, #120]	; (b80c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b804e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8050:	2008      	movs	r0, #8
   b8052:	f7fc fd9a 	bl	b4b8a <_Znwj>
   b8056:	4604      	mov	r4, r0
   b8058:	b110      	cbz	r0, b8060 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b805a:	a903      	add	r1, sp, #12
   b805c:	f7ff fec7 	bl	b7dee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8060:	9600      	str	r6, [sp, #0]
   b8062:	fa5f f38a 	uxtb.w	r3, sl
   b8066:	464a      	mov	r2, r9
   b8068:	4641      	mov	r1, r8
   b806a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b806c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b806e:	f7fe f8c3 	bl	b61f8 <spark_send_event>
   b8072:	b9b8      	cbnz	r0, b80a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8074:	9b03      	ldr	r3, [sp, #12]
   b8076:	785b      	ldrb	r3, [r3, #1]
   b8078:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b807c:	b993      	cbnz	r3, b80a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b807e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8082:	a905      	add	r1, sp, #20
   b8084:	a803      	add	r0, sp, #12
   b8086:	9205      	str	r2, [sp, #20]
   b8088:	f8ad 3018 	strh.w	r3, [sp, #24]
   b808c:	f7ff ff18 	bl	b7ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8090:	a805      	add	r0, sp, #20
   b8092:	f7ff fe74 	bl	b7d7e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b8096:	a805      	add	r0, sp, #20
   b8098:	9909      	ldr	r1, [sp, #36]	; 0x24
   b809a:	f7ff feb1 	bl	b7e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b809e:	a806      	add	r0, sp, #24
   b80a0:	f7fc fe76 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b80a4:	a903      	add	r1, sp, #12
   b80a6:	a805      	add	r0, sp, #20
   b80a8:	f7ff fea1 	bl	b7dee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b80ac:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b80ae:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b80b0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b80b2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b80b4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b80b6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b80b8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b80ba:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b80bc:	f7fc fe68 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b80c0:	a804      	add	r0, sp, #16
   b80c2:	f7fc fe65 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b80c6:	e7ab      	b.n	b8020 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b80c8:	000b8149 	.word	0x000b8149

000b80cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b80cc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b80ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80d0:	4605      	mov	r5, r0
	switch (__op)
   b80d2:	d103      	bne.n	b80dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b80d4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b80d6:	6003      	str	r3, [r0, #0]
      }
   b80d8:	2000      	movs	r0, #0
   b80da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b80dc:	2a02      	cmp	r2, #2
   b80de:	d010      	beq.n	b8102 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b80e0:	2a03      	cmp	r2, #3
   b80e2:	d1f9      	bne.n	b80d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b80e4:	6804      	ldr	r4, [r0, #0]
   b80e6:	2c00      	cmp	r4, #0
   b80e8:	d0f6      	beq.n	b80d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b80ea:	f104 0010 	add.w	r0, r4, #16
   b80ee:	f7ff fe46 	bl	b7d7e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b80f2:	4620      	mov	r0, r4
   b80f4:	f7fc fffb 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b80f8:	2118      	movs	r1, #24
   b80fa:	4620      	mov	r0, r4
   b80fc:	f7fc fd4b 	bl	b4b96 <_ZdlPvj>
   b8100:	e7ea      	b.n	b80d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8102:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b8104:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8106:	f7fc fd40 	bl	b4b8a <_Znwj>
   b810a:	4604      	mov	r4, r0
   b810c:	b150      	cbz	r0, b8124 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b810e:	4631      	mov	r1, r6
   b8110:	f7ff fec6 	bl	b7ea0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8114:	6930      	ldr	r0, [r6, #16]
   b8116:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b811a:	b108      	cbz	r0, b8120 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b811c:	f001 f9a8 	bl	b9470 <strdup>
        type_(type) {
   b8120:	6120      	str	r0, [r4, #16]
   b8122:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b8124:	602c      	str	r4, [r5, #0]
	}
   b8126:	e7d7      	b.n	b80d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8128 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8128:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b812a:	2300      	movs	r3, #0
   b812c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b812e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8130:	4604      	mov	r4, r0
   b8132:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8134:	b12b      	cbz	r3, b8142 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8136:	2202      	movs	r2, #2
   b8138:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b813a:	68eb      	ldr	r3, [r5, #12]
   b813c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b813e:	68ab      	ldr	r3, [r5, #8]
   b8140:	60a3      	str	r3, [r4, #8]
    }
   b8142:	4620      	mov	r0, r4
   b8144:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8148 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8148:	b5f0      	push	{r4, r5, r6, r7, lr}
   b814a:	b089      	sub	sp, #36	; 0x24
   b814c:	4604      	mov	r4, r0
   b814e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8150:	a801      	add	r0, sp, #4
   b8152:	4611      	mov	r1, r2
   b8154:	f7ff fe54 	bl	b7e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b8158:	b1a4      	cbz	r4, b8184 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b815a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b815c:	b11d      	cbz	r5, b8166 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b815e:	4628      	mov	r0, r5
   b8160:	f001 f986 	bl	b9470 <strdup>
   b8164:	4605      	mov	r5, r0
   b8166:	a801      	add	r0, sp, #4
   b8168:	a903      	add	r1, sp, #12
        type_(type) {
   b816a:	9503      	str	r5, [sp, #12]
   b816c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8170:	f7ff fea6 	bl	b7ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8174:	a803      	add	r0, sp, #12
   b8176:	f7ff fe02 	bl	b7d7e <_ZN8particle5ErrorD1Ev>
   b817a:	a802      	add	r0, sp, #8
   b817c:	f7fc fe08 	bl	b4d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8180:	b009      	add	sp, #36	; 0x24
   b8182:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b8184:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8186:	2301      	movs	r3, #1
   b8188:	e8d5 2f4f 	ldrexb	r2, [r5]
   b818c:	2a00      	cmp	r2, #0
   b818e:	d103      	bne.n	b8198 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8190:	e8c5 3f41 	strexb	r1, r3, [r5]
   b8194:	2900      	cmp	r1, #0
   b8196:	d1f7      	bne.n	b8188 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8198:	d1ef      	bne.n	b817a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b819a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b819c:	f3bf 8f5b 	dmb	ish
   b81a0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b81a2:	1d2b      	adds	r3, r5, #4
   b81a4:	f3bf 8f5b 	dmb	ish
   b81a8:	e853 6f00 	ldrex	r6, [r3]
   b81ac:	e843 4200 	strex	r2, r4, [r3]
   b81b0:	2a00      	cmp	r2, #0
   b81b2:	d1f9      	bne.n	b81a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b81b4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b81b8:	2e00      	cmp	r6, #0
   b81ba:	d0de      	beq.n	b817a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b81bc:	4620      	mov	r0, r4
   b81be:	f7fd ff7f 	bl	b60c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b81c2:	4607      	mov	r7, r0
   b81c4:	b160      	cbz	r0, b81e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b81c6:	f105 010c 	add.w	r1, r5, #12
   b81ca:	4630      	mov	r0, r6
   b81cc:	f7ff fe43 	bl	b7e56 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b81d0:	4630      	mov	r0, r6
   b81d2:	f7fc ff8c 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b81d6:	2110      	movs	r1, #16
   b81d8:	4630      	mov	r0, r6
   b81da:	f7fc fcdc 	bl	b4b96 <_ZdlPvj>
   b81de:	e7cc      	b.n	b817a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b81e0:	4631      	mov	r1, r6
   b81e2:	a803      	add	r0, sp, #12
   b81e4:	f7ff ffa0 	bl	b8128 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b81e8:	7b2b      	ldrb	r3, [r5, #12]
   b81ea:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b81ee:	2010      	movs	r0, #16
   b81f0:	f7fc fccb 	bl	b4b8a <_Znwj>
   b81f4:	4605      	mov	r5, r0
   b81f6:	b1d0      	cbz	r0, b822e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b81f8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81fa:	2014      	movs	r0, #20
   b81fc:	f7fc fcc5 	bl	b4b8a <_Znwj>
   b8200:	4604      	mov	r4, r0
   b8202:	b178      	cbz	r0, b8224 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b8204:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8206:	4601      	mov	r1, r0
   b8208:	a803      	add	r0, sp, #12
   b820a:	f7ff f90d 	bl	b7428 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b820e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8210:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8212:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8214:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8216:	9205      	str	r2, [sp, #20]
   b8218:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b821a:	60e3      	str	r3, [r4, #12]
   b821c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8220:	9206      	str	r2, [sp, #24]
   b8222:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8224:	4b06      	ldr	r3, [pc, #24]	; (b8240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b8226:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8228:	4b06      	ldr	r3, [pc, #24]	; (b8244 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b822a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b822c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b822e:	a803      	add	r0, sp, #12
   b8230:	f7fc ff5d 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8234:	2200      	movs	r2, #0
   b8236:	4629      	mov	r1, r5
   b8238:	4803      	ldr	r0, [pc, #12]	; (b8248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b823a:	f7fd ff49 	bl	b60d0 <application_thread_invoke>
   b823e:	e7c7      	b.n	b81d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b8240:	000b7e69 	.word	0x000b7e69
   b8244:	000b824d 	.word	0x000b824d
   b8248:	000b85e9 	.word	0x000b85e9

000b824c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b824c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b824e:	b570      	push	{r4, r5, r6, lr}
   b8250:	4604      	mov	r4, r0
	switch (__op)
   b8252:	d103      	bne.n	b825c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8254:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8256:	6003      	str	r3, [r0, #0]
      }
   b8258:	2000      	movs	r0, #0
   b825a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b825c:	2a02      	cmp	r2, #2
   b825e:	d00c      	beq.n	b827a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8260:	2a03      	cmp	r2, #3
   b8262:	d1f9      	bne.n	b8258 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8264:	6804      	ldr	r4, [r0, #0]
   b8266:	2c00      	cmp	r4, #0
   b8268:	d0f6      	beq.n	b8258 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b826a:	4620      	mov	r0, r4
   b826c:	f7fc ff3f 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8270:	2114      	movs	r1, #20
   b8272:	4620      	mov	r0, r4
   b8274:	f7fc fc8f 	bl	b4b96 <_ZdlPvj>
   b8278:	e7ee      	b.n	b8258 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b827a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b827c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b827e:	f7fc fc84 	bl	b4b8a <_Znwj>
   b8282:	4605      	mov	r5, r0
   b8284:	b120      	cbz	r0, b8290 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b8286:	4631      	mov	r1, r6
   b8288:	f7ff ff4e 	bl	b8128 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b828c:	7c33      	ldrb	r3, [r6, #16]
   b828e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8290:	6025      	str	r5, [r4, #0]
	}
   b8292:	e7e1      	b.n	b8258 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b8294 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8294:	4770      	bx	lr

000b8296 <_ZN9IPAddressD0Ev>:
   b8296:	b510      	push	{r4, lr}
   b8298:	2118      	movs	r1, #24
   b829a:	4604      	mov	r4, r0
   b829c:	f7fc fc7b 	bl	b4b96 <_ZdlPvj>
   b82a0:	4620      	mov	r0, r4
   b82a2:	bd10      	pop	{r4, pc}

000b82a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b82a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b82a6:	7d03      	ldrb	r3, [r0, #20]
   b82a8:	2b06      	cmp	r3, #6
{
   b82aa:	b08d      	sub	sp, #52	; 0x34
   b82ac:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b82ae:	f100 0704 	add.w	r7, r0, #4
   b82b2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b82b6:	d012      	beq.n	b82de <_ZNK9IPAddress7printToER5Print+0x3a>
   b82b8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b82bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b82c0:	220a      	movs	r2, #10
   b82c2:	4630      	mov	r0, r6
   b82c4:	f7ff fb79 	bl	b79ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b82c8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b82ca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b82cc:	d019      	beq.n	b8302 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b82ce:	2c00      	cmp	r4, #0
   b82d0:	d0f4      	beq.n	b82bc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b82d2:	212e      	movs	r1, #46	; 0x2e
   b82d4:	4630      	mov	r0, r6
   b82d6:	f7ff fb57 	bl	b7988 <_ZN5Print5printEc>
   b82da:	4404      	add	r4, r0
   b82dc:	e7ee      	b.n	b82bc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b82de:	232f      	movs	r3, #47	; 0x2f
   b82e0:	466a      	mov	r2, sp
   b82e2:	4639      	mov	r1, r7
   b82e4:	200a      	movs	r0, #10
		buf[0] = 0;
   b82e6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b82ea:	f7fd fdf9 	bl	b5ee0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b82ee:	4668      	mov	r0, sp
   b82f0:	f7fc fbf0 	bl	b4ad4 <strlen>
   b82f4:	6833      	ldr	r3, [r6, #0]
   b82f6:	4602      	mov	r2, r0
   b82f8:	68db      	ldr	r3, [r3, #12]
   b82fa:	4669      	mov	r1, sp
   b82fc:	4630      	mov	r0, r6
   b82fe:	4798      	blx	r3
   b8300:	4604      	mov	r4, r0
    }
    return n;
}
   b8302:	4620      	mov	r0, r4
   b8304:	b00d      	add	sp, #52	; 0x34
   b8306:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8308 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8308:	b510      	push	{r4, lr}
   b830a:	4b05      	ldr	r3, [pc, #20]	; (b8320 <_ZN9IPAddressC1Ev+0x18>)
   b830c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b830e:	2211      	movs	r2, #17
   b8310:	f840 3b04 	str.w	r3, [r0], #4
   b8314:	2100      	movs	r1, #0
   b8316:	f001 f86d 	bl	b93f4 <memset>
}
   b831a:	4620      	mov	r0, r4
   b831c:	bd10      	pop	{r4, pc}
   b831e:	bf00      	nop
   b8320:	000bba90 	.word	0x000bba90

000b8324 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8324:	4603      	mov	r3, r0
   b8326:	4a07      	ldr	r2, [pc, #28]	; (b8344 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8328:	b510      	push	{r4, lr}
   b832a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b832e:	f101 0210 	add.w	r2, r1, #16
   b8332:	f851 4b04 	ldr.w	r4, [r1], #4
   b8336:	f843 4b04 	str.w	r4, [r3], #4
   b833a:	4291      	cmp	r1, r2
   b833c:	d1f9      	bne.n	b8332 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b833e:	780a      	ldrb	r2, [r1, #0]
   b8340:	701a      	strb	r2, [r3, #0]
}
   b8342:	bd10      	pop	{r4, pc}
   b8344:	000bba90 	.word	0x000bba90

000b8348 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8348:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b834a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b834e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8352:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8356:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b835a:	2304      	movs	r3, #4
   b835c:	6041      	str	r1, [r0, #4]
   b835e:	7503      	strb	r3, [r0, #20]
}
   b8360:	bd10      	pop	{r4, pc}
	...

000b8364 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8364:	b507      	push	{r0, r1, r2, lr}
   b8366:	4b06      	ldr	r3, [pc, #24]	; (b8380 <_ZN9IPAddressC1EPKh+0x1c>)
   b8368:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b836a:	78cb      	ldrb	r3, [r1, #3]
   b836c:	9300      	str	r3, [sp, #0]
   b836e:	788b      	ldrb	r3, [r1, #2]
   b8370:	784a      	ldrb	r2, [r1, #1]
   b8372:	7809      	ldrb	r1, [r1, #0]
   b8374:	f7ff ffe8 	bl	b8348 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8378:	b003      	add	sp, #12
   b837a:	f85d fb04 	ldr.w	pc, [sp], #4
   b837e:	bf00      	nop
   b8380:	000bba90 	.word	0x000bba90

000b8384 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8384:	7441      	strb	r1, [r0, #17]
}
   b8386:	4770      	bx	lr

000b8388 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8388:	4770      	bx	lr

000b838a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b838a:	4770      	bx	lr

000b838c <_ZN9USBSerial4readEv>:
{
   b838c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b838e:	2100      	movs	r1, #0
   b8390:	7c00      	ldrb	r0, [r0, #16]
   b8392:	f7fd fe4d 	bl	b6030 <HAL_USB_USART_Receive_Data>
}
   b8396:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b839a:	bd08      	pop	{r3, pc}

000b839c <_ZN9USBSerial4peekEv>:
{
   b839c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b839e:	2101      	movs	r1, #1
   b83a0:	7c00      	ldrb	r0, [r0, #16]
   b83a2:	f7fd fe45 	bl	b6030 <HAL_USB_USART_Receive_Data>
}
   b83a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b83aa:	bd08      	pop	{r3, pc}

000b83ac <_ZN9USBSerial17availableForWriteEv>:
{
   b83ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b83ae:	7c00      	ldrb	r0, [r0, #16]
   b83b0:	f7fd fe36 	bl	b6020 <HAL_USB_USART_Available_Data_For_Write>
}
   b83b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b83b8:	bd08      	pop	{r3, pc}

000b83ba <_ZN9USBSerial9availableEv>:
{
   b83ba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b83bc:	7c00      	ldrb	r0, [r0, #16]
   b83be:	f7fd fe27 	bl	b6010 <HAL_USB_USART_Available_Data>
}
   b83c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b83c6:	bd08      	pop	{r3, pc}

000b83c8 <_ZN9USBSerial5writeEh>:
{
   b83c8:	b513      	push	{r0, r1, r4, lr}
   b83ca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b83cc:	7c00      	ldrb	r0, [r0, #16]
{
   b83ce:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b83d0:	f7fd fe26 	bl	b6020 <HAL_USB_USART_Available_Data_For_Write>
   b83d4:	2800      	cmp	r0, #0
   b83d6:	9901      	ldr	r1, [sp, #4]
   b83d8:	dc01      	bgt.n	b83de <_ZN9USBSerial5writeEh+0x16>
   b83da:	7c60      	ldrb	r0, [r4, #17]
   b83dc:	b120      	cbz	r0, b83e8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b83de:	7c20      	ldrb	r0, [r4, #16]
   b83e0:	f7fd fe2e 	bl	b6040 <HAL_USB_USART_Send_Data>
   b83e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b83e8:	b002      	add	sp, #8
   b83ea:	bd10      	pop	{r4, pc}

000b83ec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b83ec:	7c00      	ldrb	r0, [r0, #16]
   b83ee:	f7fd be2f 	b.w	b6050 <HAL_USB_USART_Flush_Data>

000b83f2 <_ZN9USBSerialD0Ev>:
   b83f2:	b510      	push	{r4, lr}
   b83f4:	2114      	movs	r1, #20
   b83f6:	4604      	mov	r4, r0
   b83f8:	f7fc fbcd 	bl	b4b96 <_ZdlPvj>
   b83fc:	4620      	mov	r0, r4
   b83fe:	bd10      	pop	{r4, pc}

000b8400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8400:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8406:	4604      	mov	r4, r0
   b8408:	4608      	mov	r0, r1
   b840a:	2100      	movs	r1, #0
   b840c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8410:	4b04      	ldr	r3, [pc, #16]	; (b8424 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8412:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8414:	2301      	movs	r3, #1
  _serial = serial;
   b8416:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8418:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b841a:	4611      	mov	r1, r2
   b841c:	f7fd fdf0 	bl	b6000 <HAL_USB_USART_Init>
}
   b8420:	4620      	mov	r0, r4
   b8422:	bd10      	pop	{r4, pc}
   b8424:	000bbaa4 	.word	0x000bbaa4

000b8428 <_Z19acquireSerialBufferv>:
{
   b8428:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b842a:	2214      	movs	r2, #20
{
   b842c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b842e:	2100      	movs	r1, #0
   b8430:	f000 ffe0 	bl	b93f4 <memset>
}
   b8434:	4620      	mov	r0, r4
   b8436:	bd10      	pop	{r4, pc}

000b8438 <_Z16_fetch_usbserialv>:
{
   b8438:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b843a:	4c0f      	ldr	r4, [pc, #60]	; (b8478 <_Z16_fetch_usbserialv+0x40>)
{
   b843c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b843e:	a803      	add	r0, sp, #12
   b8440:	f7ff fff2 	bl	b8428 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8444:	7821      	ldrb	r1, [r4, #0]
   b8446:	f3bf 8f5b 	dmb	ish
   b844a:	f011 0101 	ands.w	r1, r1, #1
   b844e:	d10f      	bne.n	b8470 <_Z16_fetch_usbserialv+0x38>
   b8450:	4620      	mov	r0, r4
   b8452:	9101      	str	r1, [sp, #4]
   b8454:	f7fc fba1 	bl	b4b9a <__cxa_guard_acquire>
   b8458:	9901      	ldr	r1, [sp, #4]
   b845a:	b148      	cbz	r0, b8470 <_Z16_fetch_usbserialv+0x38>
   b845c:	aa03      	add	r2, sp, #12
   b845e:	4807      	ldr	r0, [pc, #28]	; (b847c <_Z16_fetch_usbserialv+0x44>)
   b8460:	f7ff ffce 	bl	b8400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8464:	4620      	mov	r0, r4
   b8466:	f7fc fb9d 	bl	b4ba4 <__cxa_guard_release>
   b846a:	4805      	ldr	r0, [pc, #20]	; (b8480 <_Z16_fetch_usbserialv+0x48>)
   b846c:	f000 ff84 	bl	b9378 <atexit>
	return _usbserial;
}
   b8470:	4802      	ldr	r0, [pc, #8]	; (b847c <_Z16_fetch_usbserialv+0x44>)
   b8472:	b008      	add	sp, #32
   b8474:	bd10      	pop	{r4, pc}
   b8476:	bf00      	nop
   b8478:	2003e668 	.word	0x2003e668
   b847c:	2003e66c 	.word	0x2003e66c
   b8480:	000b8389 	.word	0x000b8389

000b8484 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
   b8484:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b8486:	b510      	push	{r4, lr}
   b8488:	b90a      	cbnz	r2, b848e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b848a:	f000 fb99 	bl	b8bc0 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b848e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8492:	68c3      	ldr	r3, [r0, #12]
   b8494:	4718      	bx	r3
	...

000b8498 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b8498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b849a:	4f10      	ldr	r7, [pc, #64]	; (b84dc <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b849c:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b84a0:	4606      	mov	r6, r0
   b84a2:	460d      	mov	r5, r1
    delete handlers[pin];
   b84a4:	b134      	cbz	r4, b84b4 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b84a6:	4620      	mov	r0, r4
   b84a8:	f7fc fe21 	bl	b50ee <_ZNSt14_Function_baseD1Ev>
   b84ac:	2110      	movs	r1, #16
   b84ae:	4620      	mov	r0, r4
   b84b0:	f7fc fb71 	bl	b4b96 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b84b4:	2010      	movs	r0, #16
   b84b6:	f7fc fb68 	bl	b4b8a <_Znwj>
   b84ba:	4604      	mov	r4, r0
   b84bc:	b150      	cbz	r0, b84d4 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b84be:	2300      	movs	r3, #0
   b84c0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b84c2:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b84c4:	b133      	cbz	r3, b84d4 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b84c6:	2202      	movs	r2, #2
   b84c8:	4629      	mov	r1, r5
   b84ca:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b84cc:	68eb      	ldr	r3, [r5, #12]
   b84ce:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b84d0:	68ab      	ldr	r3, [r5, #8]
   b84d2:	60a3      	str	r3, [r4, #8]
   b84d4:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b84d8:	4620      	mov	r0, r4
   b84da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b84dc:	2003e680 	.word	0x2003e680

000b84e0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b84e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b84e2:	b087      	sub	sp, #28
   b84e4:	4605      	mov	r5, r0
   b84e6:	9103      	str	r1, [sp, #12]
   b84e8:	4617      	mov	r7, r2
   b84ea:	461e      	mov	r6, r3
    hal_interrupt_detach(pin);
   b84ec:	f7fd fbf6 	bl	b5cdc <hal_interrupt_detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b84f0:	9903      	ldr	r1, [sp, #12]
   b84f2:	4628      	mov	r0, r5
   b84f4:	f7ff ffd0 	bl	b8498 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b84f8:	4604      	mov	r4, r0
   b84fa:	b1e8      	cbz	r0, b8538 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        hal_interrupt_extra_configuration_t extra = {};
   b84fc:	2100      	movs	r1, #0
  if (priority >= 0) {
   b84fe:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8500:	f04f 0304 	mov.w	r3, #4
        hal_interrupt_extra_configuration_t extra = {};
   b8504:	f8ad 1015 	strh.w	r1, [sp, #21]
   b8508:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b850c:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b8510:	bfa2      	ittt	ge
   b8512:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b8514:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b8518:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b851c:	9100      	str	r1, [sp, #0]
   b851e:	4602      	mov	r2, r0
   b8520:	4907      	ldr	r1, [pc, #28]	; (b8540 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8522:	bfa8      	it	ge
   b8524:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8528:	463b      	mov	r3, r7
   b852a:	4628      	mov	r0, r5
   b852c:	f7fd fbce 	bl	b5ccc <hal_interrupt_attach>
   b8530:	b110      	cbz	r0, b8538 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b8532:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b8534:	b007      	add	sp, #28
   b8536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b8538:	1e20      	subs	r0, r4, #0
   b853a:	bf18      	it	ne
   b853c:	2001      	movne	r0, #1
   b853e:	e7f9      	b.n	b8534 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b8540:	000b8485 	.word	0x000b8485

000b8544 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8544:	4770      	bx	lr

000b8546 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8546:	7441      	strb	r1, [r0, #17]
}
   b8548:	4770      	bx	lr

000b854a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b854a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b854c:	7c00      	ldrb	r0, [r0, #16]
   b854e:	f7fd fcff 	bl	b5f50 <hal_usart_available_data_for_write>
}
   b8552:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8556:	bd08      	pop	{r3, pc}

000b8558 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8558:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b855a:	7c00      	ldrb	r0, [r0, #16]
   b855c:	f7fd fcd0 	bl	b5f00 <hal_usart_available>
}
   b8560:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8564:	bd08      	pop	{r3, pc}

000b8566 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8566:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8568:	7c00      	ldrb	r0, [r0, #16]
   b856a:	f7fd fcd9 	bl	b5f20 <hal_usart_peek>
}
   b856e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8572:	bd08      	pop	{r3, pc}

000b8574 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8574:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8576:	7c00      	ldrb	r0, [r0, #16]
   b8578:	f7fd fcca 	bl	b5f10 <hal_usart_read>
}
   b857c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8580:	bd08      	pop	{r3, pc}

000b8582 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8582:	7c00      	ldrb	r0, [r0, #16]
   b8584:	f7fd bcd4 	b.w	b5f30 <hal_usart_flush>

000b8588 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8588:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b858a:	7c45      	ldrb	r5, [r0, #17]
{
   b858c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b858e:	b12d      	cbz	r5, b859c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8590:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8592:	b003      	add	sp, #12
   b8594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8598:	f7fd bcaa 	b.w	b5ef0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b859c:	7c00      	ldrb	r0, [r0, #16]
   b859e:	9101      	str	r1, [sp, #4]
   b85a0:	f7fd fcd6 	bl	b5f50 <hal_usart_available_data_for_write>
   b85a4:	2800      	cmp	r0, #0
   b85a6:	9901      	ldr	r1, [sp, #4]
   b85a8:	dcf2      	bgt.n	b8590 <_ZN11USARTSerial5writeEh+0x8>
}
   b85aa:	4628      	mov	r0, r5
   b85ac:	b003      	add	sp, #12
   b85ae:	bd30      	pop	{r4, r5, pc}

000b85b0 <_ZN11USARTSerialD0Ev>:
   b85b0:	b510      	push	{r4, lr}
   b85b2:	2114      	movs	r1, #20
   b85b4:	4604      	mov	r4, r0
   b85b6:	f7fc faee 	bl	b4b96 <_ZdlPvj>
   b85ba:	4620      	mov	r0, r4
   b85bc:	bd10      	pop	{r4, pc}
	...

000b85c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b85c0:	b510      	push	{r4, lr}
   b85c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b85c6:	4604      	mov	r4, r0
   b85c8:	4608      	mov	r0, r1
   b85ca:	4611      	mov	r1, r2
   b85cc:	2200      	movs	r2, #0
   b85ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b85d2:	4b04      	ldr	r3, [pc, #16]	; (b85e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b85d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b85d6:	2301      	movs	r3, #1
  _serial = serial;
   b85d8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b85da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b85dc:	f7fd fcc0 	bl	b5f60 <hal_usart_init_ex>
}
   b85e0:	4620      	mov	r0, r4
   b85e2:	bd10      	pop	{r4, pc}
   b85e4:	000bbad4 	.word	0x000bbad4

000b85e8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b85e8:	b510      	push	{r4, lr}
      if (_M_empty())
   b85ea:	6883      	ldr	r3, [r0, #8]
   b85ec:	4604      	mov	r4, r0
   b85ee:	b90b      	cbnz	r3, b85f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b85f0:	f000 fae6 	bl	b8bc0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b85f4:	68c3      	ldr	r3, [r0, #12]
   b85f6:	4798      	blx	r3
      if (_M_manager)
   b85f8:	68a3      	ldr	r3, [r4, #8]
   b85fa:	b11b      	cbz	r3, b8604 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b85fc:	2203      	movs	r2, #3
   b85fe:	4621      	mov	r1, r4
   b8600:	4620      	mov	r0, r4
   b8602:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8604:	4620      	mov	r0, r4
   b8606:	2110      	movs	r1, #16
}
   b8608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b860c:	f7fc bac3 	b.w	b4b96 <_ZdlPvj>

000b8610 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8610:	4770      	bx	lr

000b8612 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8614:	4606      	mov	r6, r0
   b8616:	4615      	mov	r5, r2
   b8618:	460c      	mov	r4, r1
   b861a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b861c:	42bc      	cmp	r4, r7
   b861e:	d006      	beq.n	b862e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8620:	6833      	ldr	r3, [r6, #0]
   b8622:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8626:	689b      	ldr	r3, [r3, #8]
   b8628:	4630      	mov	r0, r6
   b862a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b862c:	e7f6      	b.n	b861c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b862e:	4628      	mov	r0, r5
   b8630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8632 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8632:	7c00      	ldrb	r0, [r0, #16]
   b8634:	2200      	movs	r2, #0
   b8636:	f7fd bc9b 	b.w	b5f70 <hal_i2c_write>

000b863a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b863a:	7c00      	ldrb	r0, [r0, #16]
   b863c:	2100      	movs	r1, #0
   b863e:	f7fd bc9f 	b.w	b5f80 <hal_i2c_available>

000b8642 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8642:	7c00      	ldrb	r0, [r0, #16]
   b8644:	2100      	movs	r1, #0
   b8646:	f7fd bca3 	b.w	b5f90 <hal_i2c_read>

000b864a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b864a:	7c00      	ldrb	r0, [r0, #16]
   b864c:	2100      	movs	r1, #0
   b864e:	f7fd bca7 	b.w	b5fa0 <hal_i2c_peek>

000b8652 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8652:	7c00      	ldrb	r0, [r0, #16]
   b8654:	2100      	movs	r1, #0
   b8656:	f7fd bcab 	b.w	b5fb0 <hal_i2c_flush>

000b865a <_ZN7TwoWireD0Ev>:
   b865a:	b510      	push	{r4, lr}
   b865c:	2114      	movs	r1, #20
   b865e:	4604      	mov	r4, r0
   b8660:	f7fc fa99 	bl	b4b96 <_ZdlPvj>
   b8664:	4620      	mov	r0, r4
   b8666:	bd10      	pop	{r4, pc}

000b8668 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8668:	b510      	push	{r4, lr}
   b866a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b866e:	4604      	mov	r4, r0
   b8670:	4608      	mov	r0, r1
   b8672:	2100      	movs	r1, #0
   b8674:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8678:	4b03      	ldr	r3, [pc, #12]	; (b8688 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b867a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b867c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b867e:	4611      	mov	r1, r2
   b8680:	f7fd fca6 	bl	b5fd0 <hal_i2c_init>
}
   b8684:	4620      	mov	r0, r4
   b8686:	bd10      	pop	{r4, pc}
   b8688:	000bbb04 	.word	0x000bbb04

000b868c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b868c:	2200      	movs	r2, #0
   b868e:	6840      	ldr	r0, [r0, #4]
   b8690:	4611      	mov	r1, r2
   b8692:	f7fd bd59 	b.w	b6148 <network_ready>

000b8696 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8696:	2200      	movs	r2, #0
   b8698:	6840      	ldr	r0, [r0, #4]
   b869a:	4611      	mov	r1, r2
   b869c:	f7fd bd74 	b.w	b6188 <network_listening>

000b86a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b86a0:	2200      	movs	r2, #0
   b86a2:	6840      	ldr	r0, [r0, #4]
   b86a4:	4611      	mov	r1, r2
   b86a6:	f7fd bd7f 	b.w	b61a8 <network_get_listen_timeout>

000b86aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b86aa:	6840      	ldr	r0, [r0, #4]
   b86ac:	2200      	movs	r2, #0
   b86ae:	f7fd bd73 	b.w	b6198 <network_set_listen_timeout>

000b86b2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b86b2:	6840      	ldr	r0, [r0, #4]
   b86b4:	2200      	movs	r2, #0
   b86b6:	f081 0101 	eor.w	r1, r1, #1
   b86ba:	f7fd bd5d 	b.w	b6178 <network_listen>

000b86be <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b86be:	2300      	movs	r3, #0
   b86c0:	6840      	ldr	r0, [r0, #4]
   b86c2:	461a      	mov	r2, r3
   b86c4:	4619      	mov	r1, r3
   b86c6:	f7fd bd4f 	b.w	b6168 <network_off>

000b86ca <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b86ca:	2300      	movs	r3, #0
   b86cc:	6840      	ldr	r0, [r0, #4]
   b86ce:	461a      	mov	r2, r3
   b86d0:	4619      	mov	r1, r3
   b86d2:	f7fd bd41 	b.w	b6158 <network_on>

000b86d6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b86d6:	2200      	movs	r2, #0
   b86d8:	6840      	ldr	r0, [r0, #4]
   b86da:	4611      	mov	r1, r2
   b86dc:	f7fd bd24 	b.w	b6128 <network_connecting>

000b86e0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b86e0:	6840      	ldr	r0, [r0, #4]
   b86e2:	2200      	movs	r2, #0
   b86e4:	2102      	movs	r1, #2
   b86e6:	f7fd bd27 	b.w	b6138 <network_disconnect>

000b86ea <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b86ea:	2300      	movs	r3, #0
   b86ec:	6840      	ldr	r0, [r0, #4]
   b86ee:	461a      	mov	r2, r3
   b86f0:	f7fd bd12 	b.w	b6118 <network_connect>

000b86f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b86f4:	4b02      	ldr	r3, [pc, #8]	; (b8700 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b86f6:	2204      	movs	r2, #4
   b86f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b86fa:	4a02      	ldr	r2, [pc, #8]	; (b8704 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b86fc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b86fe:	4770      	bx	lr
   b8700:	2003e710 	.word	0x2003e710
   b8704:	000bbb2c 	.word	0x000bbb2c

000b8708 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8708:	2300      	movs	r3, #0
   b870a:	6840      	ldr	r0, [r0, #4]
   b870c:	461a      	mov	r2, r3
   b870e:	f7fd bd03 	b.w	b6118 <network_connect>

000b8712 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8712:	6840      	ldr	r0, [r0, #4]
   b8714:	2200      	movs	r2, #0
   b8716:	2102      	movs	r1, #2
   b8718:	f7fd bd0e 	b.w	b6138 <network_disconnect>

000b871c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b871c:	2200      	movs	r2, #0
   b871e:	6840      	ldr	r0, [r0, #4]
   b8720:	4611      	mov	r1, r2
   b8722:	f7fd bd01 	b.w	b6128 <network_connecting>

000b8726 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8726:	2200      	movs	r2, #0
   b8728:	6840      	ldr	r0, [r0, #4]
   b872a:	4611      	mov	r1, r2
   b872c:	f7fd bd0c 	b.w	b6148 <network_ready>

000b8730 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8730:	2300      	movs	r3, #0
   b8732:	6840      	ldr	r0, [r0, #4]
   b8734:	461a      	mov	r2, r3
   b8736:	4619      	mov	r1, r3
   b8738:	f7fd bd0e 	b.w	b6158 <network_on>

000b873c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b873c:	2300      	movs	r3, #0
   b873e:	6840      	ldr	r0, [r0, #4]
   b8740:	461a      	mov	r2, r3
   b8742:	4619      	mov	r1, r3
   b8744:	f7fd bd10 	b.w	b6168 <network_off>

000b8748 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8748:	6840      	ldr	r0, [r0, #4]
   b874a:	2100      	movs	r1, #0
   b874c:	f7fd bd34 	b.w	b61b8 <network_is_on>

000b8750 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8750:	6840      	ldr	r0, [r0, #4]
   b8752:	2100      	movs	r1, #0
   b8754:	f7fd bd38 	b.w	b61c8 <network_is_off>

000b8758 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8758:	6840      	ldr	r0, [r0, #4]
   b875a:	2200      	movs	r2, #0
   b875c:	f081 0101 	eor.w	r1, r1, #1
   b8760:	f7fd bd0a 	b.w	b6178 <network_listen>

000b8764 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8764:	6840      	ldr	r0, [r0, #4]
   b8766:	2200      	movs	r2, #0
   b8768:	f7fd bd16 	b.w	b6198 <network_set_listen_timeout>

000b876c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b876c:	2200      	movs	r2, #0
   b876e:	6840      	ldr	r0, [r0, #4]
   b8770:	4611      	mov	r1, r2
   b8772:	f7fd bd19 	b.w	b61a8 <network_get_listen_timeout>

000b8776 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8776:	2200      	movs	r2, #0
   b8778:	6840      	ldr	r0, [r0, #4]
   b877a:	4611      	mov	r1, r2
   b877c:	f7fd bd04 	b.w	b6188 <network_listening>

000b8780 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8784:	b095      	sub	sp, #84	; 0x54
   b8786:	4614      	mov	r4, r2
   b8788:	460d      	mov	r5, r1
   b878a:	4607      	mov	r7, r0
    IPAddress addr;
   b878c:	f7ff fdbc 	bl	b8308 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8790:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8792:	221c      	movs	r2, #28
   b8794:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8796:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8798:	f000 fe2c 	bl	b93f4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b879c:	2340      	movs	r3, #64	; 0x40
   b879e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b87a0:	4620      	mov	r0, r4
   b87a2:	466b      	mov	r3, sp
   b87a4:	aa0c      	add	r2, sp, #48	; 0x30
   b87a6:	2100      	movs	r1, #0
   b87a8:	f7fd fa80 	bl	b5cac <netdb_getaddrinfo>
    if (!r) {
   b87ac:	4604      	mov	r4, r0
   b87ae:	2800      	cmp	r0, #0
   b87b0:	d14b      	bne.n	b884a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b87b2:	4602      	mov	r2, r0
   b87b4:	2101      	movs	r1, #1
   b87b6:	6868      	ldr	r0, [r5, #4]
   b87b8:	f7fd fcc6 	bl	b6148 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b87be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87c0:	4622      	mov	r2, r4
   b87c2:	6868      	ldr	r0, [r5, #4]
   b87c4:	f7fd fcc0 	bl	b6148 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87ca:	4681      	mov	r9, r0
        bool ok = false;
   b87cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87ce:	2e00      	cmp	r6, #0
   b87d0:	d03b      	beq.n	b884a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b87d2:	2900      	cmp	r1, #0
   b87d4:	d139      	bne.n	b884a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b87d6:	6873      	ldr	r3, [r6, #4]
   b87d8:	2b02      	cmp	r3, #2
   b87da:	d003      	beq.n	b87e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b87dc:	2b0a      	cmp	r3, #10
   b87de:	d011      	beq.n	b8804 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87e0:	69f6      	ldr	r6, [r6, #28]
   b87e2:	e7f4      	b.n	b87ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b87e4:	f1b8 0f00 	cmp.w	r8, #0
   b87e8:	d0fa      	beq.n	b87e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b87ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b87ec:	a806      	add	r0, sp, #24
   b87ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b87f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b87f2:	f7ff fdb7 	bl	b8364 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b87f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87f8:	1d3c      	adds	r4, r7, #4
   b87fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b87fc:	682b      	ldr	r3, [r5, #0]
   b87fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8800:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8802:	e7ed      	b.n	b87e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8804:	f1b9 0f00 	cmp.w	r9, #0
   b8808:	d0ea      	beq.n	b87e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b880a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b880c:	2210      	movs	r2, #16
   b880e:	a801      	add	r0, sp, #4
   b8810:	f000 fdf0 	bl	b93f4 <memset>
                    a.v = 6;
   b8814:	2306      	movs	r3, #6
   b8816:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b881a:	ad01      	add	r5, sp, #4
   b881c:	f104 0308 	add.w	r3, r4, #8
   b8820:	3418      	adds	r4, #24
   b8822:	6818      	ldr	r0, [r3, #0]
   b8824:	6859      	ldr	r1, [r3, #4]
   b8826:	462a      	mov	r2, r5
   b8828:	c203      	stmia	r2!, {r0, r1}
   b882a:	3308      	adds	r3, #8
   b882c:	42a3      	cmp	r3, r4
   b882e:	4615      	mov	r5, r2
   b8830:	d1f7      	bne.n	b8822 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8832:	a901      	add	r1, sp, #4
   b8834:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8836:	ad07      	add	r5, sp, #28
   b8838:	f7ff fd74 	bl	b8324 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b883c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b883e:	1d3c      	adds	r4, r7, #4
   b8840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8842:	682b      	ldr	r3, [r5, #0]
   b8844:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8846:	4649      	mov	r1, r9
   b8848:	e7ca      	b.n	b87e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b884a:	9800      	ldr	r0, [sp, #0]
   b884c:	f7fd fa26 	bl	b5c9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8850:	4638      	mov	r0, r7
   b8852:	b015      	add	sp, #84	; 0x54
   b8854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8858 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8858:	4b02      	ldr	r3, [pc, #8]	; (b8864 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b885a:	4a03      	ldr	r2, [pc, #12]	; (b8868 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b885c:	601a      	str	r2, [r3, #0]
   b885e:	2200      	movs	r2, #0
   b8860:	605a      	str	r2, [r3, #4]

} // spark
   b8862:	4770      	bx	lr
   b8864:	2003e718 	.word	0x2003e718
   b8868:	000bbb68 	.word	0x000bbb68

000b886c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b886c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b886e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8870:	d902      	bls.n	b8878 <pinAvailable+0xc>
    return false;
   b8872:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8874:	b002      	add	sp, #8
   b8876:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8878:	f1a0 030b 	sub.w	r3, r0, #11
   b887c:	2b02      	cmp	r3, #2
   b887e:	d81a      	bhi.n	b88b6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8880:	4c17      	ldr	r4, [pc, #92]	; (b88e0 <pinAvailable+0x74>)
   b8882:	7821      	ldrb	r1, [r4, #0]
   b8884:	f3bf 8f5b 	dmb	ish
   b8888:	f011 0101 	ands.w	r1, r1, #1
   b888c:	d10b      	bne.n	b88a6 <pinAvailable+0x3a>
   b888e:	4620      	mov	r0, r4
   b8890:	9101      	str	r1, [sp, #4]
   b8892:	f7fc f982 	bl	b4b9a <__cxa_guard_acquire>
   b8896:	9901      	ldr	r1, [sp, #4]
   b8898:	b128      	cbz	r0, b88a6 <pinAvailable+0x3a>
   b889a:	4812      	ldr	r0, [pc, #72]	; (b88e4 <pinAvailable+0x78>)
   b889c:	f7fd fd6a 	bl	b6374 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b88a0:	4620      	mov	r0, r4
   b88a2:	f7fc f97f 	bl	b4ba4 <__cxa_guard_release>
   b88a6:	4b0f      	ldr	r3, [pc, #60]	; (b88e4 <pinAvailable+0x78>)
   b88a8:	7818      	ldrb	r0, [r3, #0]
   b88aa:	f7fd fba1 	bl	b5ff0 <hal_spi_is_enabled>
   b88ae:	2800      	cmp	r0, #0
   b88b0:	d1df      	bne.n	b8872 <pinAvailable+0x6>
  return true; // 'pin' is available
   b88b2:	2001      	movs	r0, #1
   b88b4:	e7de      	b.n	b8874 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b88b6:	2801      	cmp	r0, #1
   b88b8:	d809      	bhi.n	b88ce <pinAvailable+0x62>
   b88ba:	f000 f87d 	bl	b89b8 <_Z19__fetch_global_Wirev>
   b88be:	2100      	movs	r1, #0
   b88c0:	7c00      	ldrb	r0, [r0, #16]
   b88c2:	f7fd fb7d 	bl	b5fc0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b88c6:	f080 0001 	eor.w	r0, r0, #1
   b88ca:	b2c0      	uxtb	r0, r0
   b88cc:	e7d2      	b.n	b8874 <pinAvailable+0x8>
   b88ce:	3809      	subs	r0, #9
   b88d0:	2801      	cmp	r0, #1
   b88d2:	d8ee      	bhi.n	b88b2 <pinAvailable+0x46>
   b88d4:	f000 f834 	bl	b8940 <_Z22__fetch_global_Serial1v>
   b88d8:	7c00      	ldrb	r0, [r0, #16]
   b88da:	f7fd fb31 	bl	b5f40 <hal_usart_is_enabled>
   b88de:	e7f2      	b.n	b88c6 <pinAvailable+0x5a>
   b88e0:	2003e720 	.word	0x2003e720
   b88e4:	2003e724 	.word	0x2003e724

000b88e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88e8:	2823      	cmp	r0, #35	; 0x23
{
   b88ea:	b538      	push	{r3, r4, r5, lr}
   b88ec:	4604      	mov	r4, r0
   b88ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88f0:	d80a      	bhi.n	b8908 <pinMode+0x20>
   b88f2:	29ff      	cmp	r1, #255	; 0xff
   b88f4:	d008      	beq.n	b8908 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b88f6:	f7ff ffb9 	bl	b886c <pinAvailable>
   b88fa:	b128      	cbz	r0, b8908 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b88fc:	4629      	mov	r1, r5
   b88fe:	4620      	mov	r0, r4
}
   b8900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8904:	f7fd b9da 	b.w	b5cbc <hal_gpio_mode>
}
   b8908:	bd38      	pop	{r3, r4, r5, pc}

000b890a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b890a:	4770      	bx	lr

000b890c <_Z20acquireSerial1Bufferv>:
{
   b890c:	b538      	push	{r3, r4, r5, lr}
   b890e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8910:	2514      	movs	r5, #20
   b8912:	462a      	mov	r2, r5
   b8914:	2100      	movs	r1, #0
   b8916:	f000 fd6d 	bl	b93f4 <memset>
   b891a:	8025      	strh	r5, [r4, #0]
   b891c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b891e:	4907      	ldr	r1, [pc, #28]	; (b893c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8920:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8922:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8924:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8926:	f000 f86b 	bl	b8a00 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b892a:	4904      	ldr	r1, [pc, #16]	; (b893c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b892c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b892e:	4628      	mov	r0, r5
   b8930:	f000 f866 	bl	b8a00 <_ZnajRKSt9nothrow_t>
    };
   b8934:	60e0      	str	r0, [r4, #12]
}
   b8936:	4620      	mov	r0, r4
   b8938:	bd38      	pop	{r3, r4, r5, pc}
   b893a:	bf00      	nop
   b893c:	000bbb9c 	.word	0x000bbb9c

000b8940 <_Z22__fetch_global_Serial1v>:
{
   b8940:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8942:	4d0e      	ldr	r5, [pc, #56]	; (b897c <_Z22__fetch_global_Serial1v+0x3c>)
   b8944:	7829      	ldrb	r1, [r5, #0]
   b8946:	f3bf 8f5b 	dmb	ish
   b894a:	f011 0401 	ands.w	r4, r1, #1
{
   b894e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8950:	d111      	bne.n	b8976 <_Z22__fetch_global_Serial1v+0x36>
   b8952:	4628      	mov	r0, r5
   b8954:	f7fc f921 	bl	b4b9a <__cxa_guard_acquire>
   b8958:	b168      	cbz	r0, b8976 <_Z22__fetch_global_Serial1v+0x36>
   b895a:	a801      	add	r0, sp, #4
   b895c:	f7ff ffd6 	bl	b890c <_Z20acquireSerial1Bufferv>
   b8960:	aa01      	add	r2, sp, #4
   b8962:	4621      	mov	r1, r4
   b8964:	4806      	ldr	r0, [pc, #24]	; (b8980 <_Z22__fetch_global_Serial1v+0x40>)
   b8966:	f7ff fe2b 	bl	b85c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b896a:	4628      	mov	r0, r5
   b896c:	f7fc f91a 	bl	b4ba4 <__cxa_guard_release>
   b8970:	4804      	ldr	r0, [pc, #16]	; (b8984 <_Z22__fetch_global_Serial1v+0x44>)
   b8972:	f000 fd01 	bl	b9378 <atexit>
    return serial1;
}
   b8976:	4802      	ldr	r0, [pc, #8]	; (b8980 <_Z22__fetch_global_Serial1v+0x40>)
   b8978:	b007      	add	sp, #28
   b897a:	bd30      	pop	{r4, r5, pc}
   b897c:	2003e72c 	.word	0x2003e72c
   b8980:	2003e730 	.word	0x2003e730
   b8984:	000b890b 	.word	0x000b890b

000b8988 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8988:	4770      	bx	lr
	...

000b898c <_Z17acquireWireBufferv>:
{
   b898c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b898e:	2520      	movs	r5, #32
   b8990:	2314      	movs	r3, #20
{
   b8992:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8994:	6003      	str	r3, [r0, #0]
   b8996:	6085      	str	r5, [r0, #8]
   b8998:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b899a:	4906      	ldr	r1, [pc, #24]	; (b89b4 <_Z17acquireWireBufferv+0x28>)
   b899c:	4628      	mov	r0, r5
   b899e:	f000 f82f 	bl	b8a00 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b89a2:	4904      	ldr	r1, [pc, #16]	; (b89b4 <_Z17acquireWireBufferv+0x28>)
	};
   b89a4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b89a6:	4628      	mov	r0, r5
   b89a8:	f000 f82a 	bl	b8a00 <_ZnajRKSt9nothrow_t>
	};
   b89ac:	60e0      	str	r0, [r4, #12]
}
   b89ae:	4620      	mov	r0, r4
   b89b0:	bd38      	pop	{r3, r4, r5, pc}
   b89b2:	bf00      	nop
   b89b4:	000bbb9c 	.word	0x000bbb9c

000b89b8 <_Z19__fetch_global_Wirev>:
{
   b89b8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b89ba:	4d0e      	ldr	r5, [pc, #56]	; (b89f4 <_Z19__fetch_global_Wirev+0x3c>)
   b89bc:	7829      	ldrb	r1, [r5, #0]
   b89be:	f3bf 8f5b 	dmb	ish
   b89c2:	f011 0401 	ands.w	r4, r1, #1
{
   b89c6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b89c8:	d111      	bne.n	b89ee <_Z19__fetch_global_Wirev+0x36>
   b89ca:	4628      	mov	r0, r5
   b89cc:	f7fc f8e5 	bl	b4b9a <__cxa_guard_acquire>
   b89d0:	b168      	cbz	r0, b89ee <_Z19__fetch_global_Wirev+0x36>
   b89d2:	a801      	add	r0, sp, #4
   b89d4:	f7ff ffda 	bl	b898c <_Z17acquireWireBufferv>
   b89d8:	aa01      	add	r2, sp, #4
   b89da:	4621      	mov	r1, r4
   b89dc:	4806      	ldr	r0, [pc, #24]	; (b89f8 <_Z19__fetch_global_Wirev+0x40>)
   b89de:	f7ff fe43 	bl	b8668 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b89e2:	4628      	mov	r0, r5
   b89e4:	f7fc f8de 	bl	b4ba4 <__cxa_guard_release>
   b89e8:	4804      	ldr	r0, [pc, #16]	; (b89fc <_Z19__fetch_global_Wirev+0x44>)
   b89ea:	f000 fcc5 	bl	b9378 <atexit>
	return wire;
}
   b89ee:	4802      	ldr	r0, [pc, #8]	; (b89f8 <_Z19__fetch_global_Wirev+0x40>)
   b89f0:	b007      	add	sp, #28
   b89f2:	bd30      	pop	{r4, r5, pc}
   b89f4:	2003e748 	.word	0x2003e748
   b89f8:	2003e74c 	.word	0x2003e74c
   b89fc:	000b8989 	.word	0x000b8989

000b8a00 <_ZnajRKSt9nothrow_t>:
   b8a00:	f7fc b8c5 	b.w	b4b8e <_Znaj>

000b8a04 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b8a04:	68c3      	ldr	r3, [r0, #12]
   b8a06:	689a      	ldr	r2, [r3, #8]
   b8a08:	60c2      	str	r2, [r0, #12]
   b8a0a:	b510      	push	{r4, lr}
   b8a0c:	b102      	cbz	r2, b8a10 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b8a0e:	6050      	str	r0, [r2, #4]
   b8a10:	6842      	ldr	r2, [r0, #4]
   b8a12:	605a      	str	r2, [r3, #4]
   b8a14:	680c      	ldr	r4, [r1, #0]
   b8a16:	4284      	cmp	r4, r0
   b8a18:	d103      	bne.n	b8a22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b8a1a:	600b      	str	r3, [r1, #0]
   b8a1c:	6098      	str	r0, [r3, #8]
   b8a1e:	6043      	str	r3, [r0, #4]
   b8a20:	bd10      	pop	{r4, pc}
   b8a22:	6891      	ldr	r1, [r2, #8]
   b8a24:	4281      	cmp	r1, r0
   b8a26:	bf0c      	ite	eq
   b8a28:	6093      	streq	r3, [r2, #8]
   b8a2a:	60d3      	strne	r3, [r2, #12]
   b8a2c:	e7f6      	b.n	b8a1c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b8a2e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b8a2e:	6883      	ldr	r3, [r0, #8]
   b8a30:	68da      	ldr	r2, [r3, #12]
   b8a32:	6082      	str	r2, [r0, #8]
   b8a34:	b510      	push	{r4, lr}
   b8a36:	b102      	cbz	r2, b8a3a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b8a38:	6050      	str	r0, [r2, #4]
   b8a3a:	6842      	ldr	r2, [r0, #4]
   b8a3c:	605a      	str	r2, [r3, #4]
   b8a3e:	680c      	ldr	r4, [r1, #0]
   b8a40:	4284      	cmp	r4, r0
   b8a42:	d103      	bne.n	b8a4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b8a44:	600b      	str	r3, [r1, #0]
   b8a46:	60d8      	str	r0, [r3, #12]
   b8a48:	6043      	str	r3, [r0, #4]
   b8a4a:	bd10      	pop	{r4, pc}
   b8a4c:	68d1      	ldr	r1, [r2, #12]
   b8a4e:	4281      	cmp	r1, r0
   b8a50:	bf0c      	ite	eq
   b8a52:	60d3      	streq	r3, [r2, #12]
   b8a54:	6093      	strne	r3, [r2, #8]
   b8a56:	e7f6      	b.n	b8a46 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b8a58 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b8a58:	68c3      	ldr	r3, [r0, #12]
   b8a5a:	b123      	cbz	r3, b8a66 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b8a5c:	4618      	mov	r0, r3
   b8a5e:	689b      	ldr	r3, [r3, #8]
   b8a60:	2b00      	cmp	r3, #0
   b8a62:	d1fb      	bne.n	b8a5c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b8a64:	4770      	bx	lr
   b8a66:	6843      	ldr	r3, [r0, #4]
   b8a68:	68da      	ldr	r2, [r3, #12]
   b8a6a:	4282      	cmp	r2, r0
   b8a6c:	d102      	bne.n	b8a74 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b8a6e:	4618      	mov	r0, r3
   b8a70:	685b      	ldr	r3, [r3, #4]
   b8a72:	e7f9      	b.n	b8a68 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b8a74:	68c2      	ldr	r2, [r0, #12]
   b8a76:	4293      	cmp	r3, r2
   b8a78:	bf18      	it	ne
   b8a7a:	4618      	movne	r0, r3
   b8a7c:	4770      	bx	lr

000b8a7e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b8a7e:	7803      	ldrb	r3, [r0, #0]
   b8a80:	b933      	cbnz	r3, b8a90 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b8a82:	6843      	ldr	r3, [r0, #4]
   b8a84:	685b      	ldr	r3, [r3, #4]
   b8a86:	4283      	cmp	r3, r0
   b8a88:	d102      	bne.n	b8a90 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b8a8a:	68db      	ldr	r3, [r3, #12]
   b8a8c:	4618      	mov	r0, r3
   b8a8e:	4770      	bx	lr
   b8a90:	6882      	ldr	r2, [r0, #8]
   b8a92:	b122      	cbz	r2, b8a9e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b8a94:	4613      	mov	r3, r2
   b8a96:	68d2      	ldr	r2, [r2, #12]
   b8a98:	2a00      	cmp	r2, #0
   b8a9a:	d1fb      	bne.n	b8a94 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b8a9c:	e7f6      	b.n	b8a8c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b8a9e:	6843      	ldr	r3, [r0, #4]
   b8aa0:	689a      	ldr	r2, [r3, #8]
   b8aa2:	4282      	cmp	r2, r0
   b8aa4:	d1f2      	bne.n	b8a8c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b8aa6:	4618      	mov	r0, r3
   b8aa8:	685b      	ldr	r3, [r3, #4]
   b8aaa:	e7f9      	b.n	b8aa0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b8aac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b8aac:	f7ff bfd4 	b.w	b8a58 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b8ab0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b8ab0:	f7ff bfe5 	b.w	b8a7e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b8ab4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b8ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8ab8:	461e      	mov	r6, r3
   b8aba:	f103 0804 	add.w	r8, r3, #4
   b8abe:	2300      	movs	r3, #0
   b8ac0:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b8ac4:	460c      	mov	r4, r1
   b8ac6:	604a      	str	r2, [r1, #4]
   b8ac8:	700b      	strb	r3, [r1, #0]
   b8aca:	b300      	cbz	r0, b8b0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b8acc:	4296      	cmp	r6, r2
   b8ace:	6091      	str	r1, [r2, #8]
   b8ad0:	d118      	bne.n	b8b04 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b8ad2:	6071      	str	r1, [r6, #4]
   b8ad4:	60f4      	str	r4, [r6, #12]
   b8ad6:	2701      	movs	r7, #1
   b8ad8:	f04f 0900 	mov.w	r9, #0
   b8adc:	6873      	ldr	r3, [r6, #4]
   b8ade:	42a3      	cmp	r3, r4
   b8ae0:	d03f      	beq.n	b8b62 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8ae2:	6860      	ldr	r0, [r4, #4]
   b8ae4:	7802      	ldrb	r2, [r0, #0]
   b8ae6:	2a00      	cmp	r2, #0
   b8ae8:	d13b      	bne.n	b8b62 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8aea:	6845      	ldr	r5, [r0, #4]
   b8aec:	68ab      	ldr	r3, [r5, #8]
   b8aee:	4298      	cmp	r0, r3
   b8af0:	d123      	bne.n	b8b3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b8af2:	68eb      	ldr	r3, [r5, #12]
   b8af4:	b183      	cbz	r3, b8b18 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8af6:	781a      	ldrb	r2, [r3, #0]
   b8af8:	b972      	cbnz	r2, b8b18 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8afa:	7007      	strb	r7, [r0, #0]
   b8afc:	701f      	strb	r7, [r3, #0]
   b8afe:	702a      	strb	r2, [r5, #0]
   b8b00:	462c      	mov	r4, r5
   b8b02:	e7eb      	b.n	b8adc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b8b04:	68b3      	ldr	r3, [r6, #8]
   b8b06:	4293      	cmp	r3, r2
   b8b08:	d1e5      	bne.n	b8ad6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b0a:	60b1      	str	r1, [r6, #8]
   b8b0c:	e7e3      	b.n	b8ad6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b0e:	60d1      	str	r1, [r2, #12]
   b8b10:	68f3      	ldr	r3, [r6, #12]
   b8b12:	4293      	cmp	r3, r2
   b8b14:	d1df      	bne.n	b8ad6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b16:	e7dd      	b.n	b8ad4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b8b18:	68c3      	ldr	r3, [r0, #12]
   b8b1a:	42a3      	cmp	r3, r4
   b8b1c:	d103      	bne.n	b8b26 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b8b1e:	4641      	mov	r1, r8
   b8b20:	f7ff ff70 	bl	b8a04 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8b24:	4604      	mov	r4, r0
   b8b26:	6863      	ldr	r3, [r4, #4]
   b8b28:	4641      	mov	r1, r8
   b8b2a:	701f      	strb	r7, [r3, #0]
   b8b2c:	4628      	mov	r0, r5
   b8b2e:	f885 9000 	strb.w	r9, [r5]
   b8b32:	f7ff ff7c 	bl	b8a2e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8b36:	4625      	mov	r5, r4
   b8b38:	e7e2      	b.n	b8b00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b8b3a:	b113      	cbz	r3, b8b42 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b8b3c:	781a      	ldrb	r2, [r3, #0]
   b8b3e:	2a00      	cmp	r2, #0
   b8b40:	d0db      	beq.n	b8afa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b8b42:	6883      	ldr	r3, [r0, #8]
   b8b44:	42a3      	cmp	r3, r4
   b8b46:	d103      	bne.n	b8b50 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b8b48:	4641      	mov	r1, r8
   b8b4a:	f7ff ff70 	bl	b8a2e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8b4e:	4604      	mov	r4, r0
   b8b50:	6863      	ldr	r3, [r4, #4]
   b8b52:	4641      	mov	r1, r8
   b8b54:	701f      	strb	r7, [r3, #0]
   b8b56:	4628      	mov	r0, r5
   b8b58:	f885 9000 	strb.w	r9, [r5]
   b8b5c:	f7ff ff52 	bl	b8a04 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8b60:	e7e9      	b.n	b8b36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b8b62:	2201      	movs	r2, #1
   b8b64:	701a      	strb	r2, [r3, #0]
   b8b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8b6a <_ZSt17__throw_bad_allocv>:
   b8b6a:	b508      	push	{r3, lr}
   b8b6c:	f7fd fb94 	bl	b6298 <abort>

000b8b70 <_ZSt19__throw_logic_errorPKc>:
   b8b70:	b508      	push	{r3, lr}
   b8b72:	f7fd fb91 	bl	b6298 <abort>

000b8b76 <_ZSt24__throw_invalid_argumentPKc>:
   b8b76:	b508      	push	{r3, lr}
   b8b78:	f7fd fb8e 	bl	b6298 <abort>

000b8b7c <_ZSt20__throw_length_errorPKc>:
   b8b7c:	b508      	push	{r3, lr}
   b8b7e:	f7fd fb8b 	bl	b6298 <abort>

000b8b82 <_ZSt20__throw_out_of_rangePKc>:
   b8b82:	b508      	push	{r3, lr}
   b8b84:	f7fd fb88 	bl	b6298 <abort>

000b8b88 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b8b88:	b40f      	push	{r0, r1, r2, r3}
   b8b8a:	b580      	push	{r7, lr}
   b8b8c:	b084      	sub	sp, #16
   b8b8e:	af00      	add	r7, sp, #0
   b8b90:	f107 0418 	add.w	r4, r7, #24
   b8b94:	f854 2b04 	ldr.w	r2, [r4], #4
   b8b98:	607a      	str	r2, [r7, #4]
   b8b9a:	4610      	mov	r0, r2
   b8b9c:	f7fb ff9a 	bl	b4ad4 <strlen>
   b8ba0:	f200 2307 	addw	r3, r0, #519	; 0x207
   b8ba4:	f023 0307 	bic.w	r3, r3, #7
   b8ba8:	ebad 0d03 	sub.w	sp, sp, r3
   b8bac:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b8bb0:	687a      	ldr	r2, [r7, #4]
   b8bb2:	60fc      	str	r4, [r7, #12]
   b8bb4:	4623      	mov	r3, r4
   b8bb6:	4668      	mov	r0, sp
   b8bb8:	f000 f85e 	bl	b8c78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b8bbc:	f7fd fb6c 	bl	b6298 <abort>

000b8bc0 <_ZSt25__throw_bad_function_callv>:
   b8bc0:	b508      	push	{r3, lr}
   b8bc2:	f7fd fb69 	bl	b6298 <abort>
	...

000b8bc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8bc8:	4901      	ldr	r1, [pc, #4]	; (b8bd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8bca:	f000 bb99 	b.w	b9300 <_ZNKSt9type_infoeqERKS_>
   b8bce:	bf00      	nop
   b8bd0:	000bbbb8 	.word	0x000bbbb8

000b8bd4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b8bd4:	b580      	push	{r7, lr}
   b8bd6:	b09c      	sub	sp, #112	; 0x70
   b8bd8:	4606      	mov	r6, r0
   b8bda:	af00      	add	r7, sp, #0
   b8bdc:	460c      	mov	r4, r1
   b8bde:	1ba4      	subs	r4, r4, r6
   b8be0:	490e      	ldr	r1, [pc, #56]	; (b8c1c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b8be2:	2269      	movs	r2, #105	; 0x69
   b8be4:	1d38      	adds	r0, r7, #4
   b8be6:	f000 fbdd 	bl	b93a4 <memcpy>
   b8bea:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b8bee:	f023 0307 	bic.w	r3, r3, #7
   b8bf2:	ebad 0d03 	sub.w	sp, sp, r3
   b8bf6:	466d      	mov	r5, sp
   b8bf8:	2268      	movs	r2, #104	; 0x68
   b8bfa:	1d39      	adds	r1, r7, #4
   b8bfc:	4628      	mov	r0, r5
   b8bfe:	f000 fbd1 	bl	b93a4 <memcpy>
   b8c02:	4622      	mov	r2, r4
   b8c04:	4631      	mov	r1, r6
   b8c06:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b8c0a:	442c      	add	r4, r5
   b8c0c:	f000 fbca 	bl	b93a4 <memcpy>
   b8c10:	2300      	movs	r3, #0
   b8c12:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b8c16:	4628      	mov	r0, r5
   b8c18:	f7ff ffaa 	bl	b8b70 <_ZSt19__throw_logic_errorPKc>
   b8c1c:	000bbbc0 	.word	0x000bbbc0

000b8c20 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b8c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c24:	af00      	add	r7, sp, #0
   b8c26:	b084      	sub	sp, #16
   b8c28:	466d      	mov	r5, sp
   b8c2a:	f105 040c 	add.w	r4, r5, #12
   b8c2e:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8c74 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b8c32:	4623      	mov	r3, r4
   b8c34:	f04f 0c0a 	mov.w	ip, #10
   b8c38:	fbb2 f6fc 	udiv	r6, r2, ip
   b8c3c:	fb0c 2e16 	mls	lr, ip, r6, r2
   b8c40:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b8c44:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b8c48:	4696      	mov	lr, r2
   b8c4a:	f1be 0f09 	cmp.w	lr, #9
   b8c4e:	4632      	mov	r2, r6
   b8c50:	d8f2      	bhi.n	b8c38 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b8c52:	1ae4      	subs	r4, r4, r3
   b8c54:	428c      	cmp	r4, r1
   b8c56:	d809      	bhi.n	b8c6c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b8c58:	f1c4 030c 	rsb	r3, r4, #12
   b8c5c:	4622      	mov	r2, r4
   b8c5e:	18e9      	adds	r1, r5, r3
   b8c60:	f000 fba0 	bl	b93a4 <memcpy>
   b8c64:	4620      	mov	r0, r4
   b8c66:	46bd      	mov	sp, r7
   b8c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8c6c:	f04f 34ff 	mov.w	r4, #4294967295
   b8c70:	e7f8      	b.n	b8c64 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b8c72:	bf00      	nop
   b8c74:	000bbc29 	.word	0x000bbc29

000b8c78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b8c78:	3901      	subs	r1, #1
   b8c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c7e:	4607      	mov	r7, r0
   b8c80:	4615      	mov	r5, r2
   b8c82:	eb00 0801 	add.w	r8, r0, r1
   b8c86:	4604      	mov	r4, r0
   b8c88:	782a      	ldrb	r2, [r5, #0]
   b8c8a:	b392      	cbz	r2, b8cf2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b8c8c:	4544      	cmp	r4, r8
   b8c8e:	d22a      	bcs.n	b8ce6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8c90:	2a25      	cmp	r2, #37	; 0x25
   b8c92:	d107      	bne.n	b8ca4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8c94:	786a      	ldrb	r2, [r5, #1]
   b8c96:	2a73      	cmp	r2, #115	; 0x73
   b8c98:	d009      	beq.n	b8cae <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b8c9a:	2a7a      	cmp	r2, #122	; 0x7a
   b8c9c:	d012      	beq.n	b8cc4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b8c9e:	2a25      	cmp	r2, #37	; 0x25
   b8ca0:	d100      	bne.n	b8ca4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8ca2:	3501      	adds	r5, #1
   b8ca4:	f815 2b01 	ldrb.w	r2, [r5], #1
   b8ca8:	f804 2b01 	strb.w	r2, [r4], #1
   b8cac:	e7ec      	b.n	b8c88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8cae:	f853 2b04 	ldr.w	r2, [r3], #4
   b8cb2:	3a01      	subs	r2, #1
   b8cb4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b8cb8:	b1c9      	cbz	r1, b8cee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b8cba:	4544      	cmp	r4, r8
   b8cbc:	d013      	beq.n	b8ce6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8cbe:	f804 1b01 	strb.w	r1, [r4], #1
   b8cc2:	e7f7      	b.n	b8cb4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b8cc4:	78aa      	ldrb	r2, [r5, #2]
   b8cc6:	2a75      	cmp	r2, #117	; 0x75
   b8cc8:	d1ec      	bne.n	b8ca4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8cca:	461e      	mov	r6, r3
   b8ccc:	eba8 0104 	sub.w	r1, r8, r4
   b8cd0:	f856 2b04 	ldr.w	r2, [r6], #4
   b8cd4:	4620      	mov	r0, r4
   b8cd6:	f7ff ffa3 	bl	b8c20 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b8cda:	2800      	cmp	r0, #0
   b8cdc:	dd03      	ble.n	b8ce6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8cde:	4404      	add	r4, r0
   b8ce0:	3503      	adds	r5, #3
   b8ce2:	4633      	mov	r3, r6
   b8ce4:	e7d0      	b.n	b8c88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8ce6:	4621      	mov	r1, r4
   b8ce8:	4638      	mov	r0, r7
   b8cea:	f7ff ff73 	bl	b8bd4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b8cee:	3502      	adds	r5, #2
   b8cf0:	e7ca      	b.n	b8c88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8cf2:	7022      	strb	r2, [r4, #0]
   b8cf4:	1be0      	subs	r0, r4, r7
   b8cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8cfa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b8cfa:	b10a      	cbz	r2, b8d00 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b8cfc:	f000 bb52 	b.w	b93a4 <memcpy>
   b8d00:	4770      	bx	lr

000b8d02 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b8d02:	b10a      	cbz	r2, b8d08 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b8d04:	f000 bb3e 	b.w	b9384 <memcmp>
   b8d08:	4610      	mov	r0, r2
   b8d0a:	4770      	bx	lr

000b8d0c <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b8d0c:	4613      	mov	r3, r2
   b8d0e:	460a      	mov	r2, r1
   b8d10:	b111      	cbz	r1, b8d18 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b8d12:	7819      	ldrb	r1, [r3, #0]
   b8d14:	f7fb be84 	b.w	b4a20 <memchr>
   b8d18:	4608      	mov	r0, r1
   b8d1a:	4770      	bx	lr

000b8d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b8d1c:	b508      	push	{r3, lr}
   b8d1e:	680b      	ldr	r3, [r1, #0]
   b8d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b8d24:	d302      	bcc.n	b8d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b8d26:	480d      	ldr	r0, [pc, #52]	; (b8d5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b8d28:	f7ff ff28 	bl	b8b7c <_ZSt20__throw_length_errorPKc>
   b8d2c:	4293      	cmp	r3, r2
   b8d2e:	d90b      	bls.n	b8d48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8d30:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b8d34:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b8d38:	d206      	bcs.n	b8d48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8d3a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b8d3e:	bf2a      	itet	cs
   b8d40:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b8d44:	6008      	strcc	r0, [r1, #0]
   b8d46:	600b      	strcs	r3, [r1, #0]
   b8d48:	6808      	ldr	r0, [r1, #0]
   b8d4a:	3001      	adds	r0, #1
   b8d4c:	d501      	bpl.n	b8d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b8d4e:	f7ff ff0c 	bl	b8b6a <_ZSt17__throw_bad_allocv>
   b8d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8d56:	f7fb bf18 	b.w	b4b8a <_Znwj>
   b8d5a:	bf00      	nop
   b8d5c:	000bbc34 	.word	0x000bbc34

000b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b8d60:	f850 3b08 	ldr.w	r3, [r0], #8
   b8d64:	4283      	cmp	r3, r0
   b8d66:	d002      	beq.n	b8d6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b8d68:	4618      	mov	r0, r3
   b8d6a:	f7fb bf12 	b.w	b4b92 <_ZdlPv>
   b8d6e:	4770      	bx	lr

000b8d70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b8d70:	b508      	push	{r3, lr}
   b8d72:	4603      	mov	r3, r0
   b8d74:	4608      	mov	r0, r1
   b8d76:	685b      	ldr	r3, [r3, #4]
   b8d78:	4298      	cmp	r0, r3
   b8d7a:	4611      	mov	r1, r2
   b8d7c:	d903      	bls.n	b8d86 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b8d7e:	4602      	mov	r2, r0
   b8d80:	4801      	ldr	r0, [pc, #4]	; (b8d88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b8d82:	f7ff ff01 	bl	b8b88 <_ZSt24__throw_out_of_range_fmtPKcz>
   b8d86:	bd08      	pop	{r3, pc}
   b8d88:	000bbc4c 	.word	0x000bbc4c

000b8d8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   b8d8c:	6840      	ldr	r0, [r0, #4]
   b8d8e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   b8d92:	3901      	subs	r1, #1
   b8d94:	1a09      	subs	r1, r1, r0
   b8d96:	4291      	cmp	r1, r2
   b8d98:	b508      	push	{r3, lr}
   b8d9a:	d202      	bcs.n	b8da2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   b8d9c:	4618      	mov	r0, r3
   b8d9e:	f7ff feed 	bl	b8b7c <_ZSt20__throw_length_errorPKc>
   b8da2:	bd08      	pop	{r3, pc}

000b8da4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   b8da4:	6803      	ldr	r3, [r0, #0]
   b8da6:	428b      	cmp	r3, r1
   b8da8:	d806      	bhi.n	b8db8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   b8daa:	6840      	ldr	r0, [r0, #4]
   b8dac:	4418      	add	r0, r3
   b8dae:	4281      	cmp	r1, r0
   b8db0:	bf94      	ite	ls
   b8db2:	2000      	movls	r0, #0
   b8db4:	2001      	movhi	r0, #1
   b8db6:	4770      	bx	lr
   b8db8:	2001      	movs	r0, #1
   b8dba:	4770      	bx	lr

000b8dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b8dbc:	2a01      	cmp	r2, #1
   b8dbe:	b410      	push	{r4}
   b8dc0:	d104      	bne.n	b8dcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b8dc2:	780a      	ldrb	r2, [r1, #0]
   b8dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8dc8:	7002      	strb	r2, [r0, #0]
   b8dca:	4770      	bx	lr
   b8dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8dd0:	f7ff bf93 	b.w	b8cfa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b8dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b8dd4:	2a01      	cmp	r2, #1
   b8dd6:	b430      	push	{r4, r5}
   b8dd8:	d103      	bne.n	b8de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b8dda:	780b      	ldrb	r3, [r1, #0]
   b8ddc:	7003      	strb	r3, [r0, #0]
   b8dde:	bc30      	pop	{r4, r5}
   b8de0:	4770      	bx	lr
   b8de2:	2a00      	cmp	r2, #0
   b8de4:	d0fb      	beq.n	b8dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b8de6:	bc30      	pop	{r4, r5}
   b8de8:	f000 baea 	b.w	b93c0 <memmove>

000b8dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b8dec:	b508      	push	{r3, lr}
   b8dee:	1a52      	subs	r2, r2, r1
   b8df0:	f7ff ffe4 	bl	b8dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8df4:	bd08      	pop	{r3, pc}

000b8df6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b8df6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8dfa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b8dfc:	461f      	mov	r7, r3
   b8dfe:	6843      	ldr	r3, [r0, #4]
   b8e00:	eb01 0802 	add.w	r8, r1, r2
   b8e04:	1ab2      	subs	r2, r6, r2
   b8e06:	441a      	add	r2, r3
   b8e08:	eba3 0908 	sub.w	r9, r3, r8
   b8e0c:	4603      	mov	r3, r0
   b8e0e:	9201      	str	r2, [sp, #4]
   b8e10:	f853 2b08 	ldr.w	r2, [r3], #8
   b8e14:	429a      	cmp	r2, r3
   b8e16:	bf18      	it	ne
   b8e18:	6882      	ldrne	r2, [r0, #8]
   b8e1a:	460d      	mov	r5, r1
   b8e1c:	bf08      	it	eq
   b8e1e:	220f      	moveq	r2, #15
   b8e20:	a901      	add	r1, sp, #4
   b8e22:	4604      	mov	r4, r0
   b8e24:	f7ff ff7a 	bl	b8d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b8e28:	4682      	mov	sl, r0
   b8e2a:	b11d      	cbz	r5, b8e34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b8e2c:	6821      	ldr	r1, [r4, #0]
   b8e2e:	462a      	mov	r2, r5
   b8e30:	f7ff ffc4 	bl	b8dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8e34:	b137      	cbz	r7, b8e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b8e36:	b12e      	cbz	r6, b8e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b8e38:	4632      	mov	r2, r6
   b8e3a:	4639      	mov	r1, r7
   b8e3c:	eb0a 0005 	add.w	r0, sl, r5
   b8e40:	f7ff ffbc 	bl	b8dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8e44:	f1b9 0f00 	cmp.w	r9, #0
   b8e48:	d007      	beq.n	b8e5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b8e4a:	6821      	ldr	r1, [r4, #0]
   b8e4c:	4435      	add	r5, r6
   b8e4e:	464a      	mov	r2, r9
   b8e50:	4441      	add	r1, r8
   b8e52:	eb0a 0005 	add.w	r0, sl, r5
   b8e56:	f7ff ffb1 	bl	b8dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8e5a:	4620      	mov	r0, r4
   b8e5c:	f7ff ff80 	bl	b8d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b8e60:	9b01      	ldr	r3, [sp, #4]
   b8e62:	f8c4 a000 	str.w	sl, [r4]
   b8e66:	60a3      	str	r3, [r4, #8]
   b8e68:	b002      	add	sp, #8
   b8e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
   b8e6e:	b538      	push	{r3, r4, r5, lr}
   b8e70:	4604      	mov	r4, r0
   b8e72:	4615      	mov	r5, r2
   b8e74:	4608      	mov	r0, r1
   b8e76:	4411      	add	r1, r2
   b8e78:	6862      	ldr	r2, [r4, #4]
   b8e7a:	1a52      	subs	r2, r2, r1
   b8e7c:	d005      	beq.n	b8e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b8e7e:	b125      	cbz	r5, b8e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b8e80:	6823      	ldr	r3, [r4, #0]
   b8e82:	4419      	add	r1, r3
   b8e84:	4418      	add	r0, r3
   b8e86:	f7ff ffa5 	bl	b8dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8e8a:	6862      	ldr	r2, [r4, #4]
   b8e8c:	6823      	ldr	r3, [r4, #0]
   b8e8e:	1b55      	subs	r5, r2, r5
   b8e90:	2200      	movs	r2, #0
   b8e92:	6065      	str	r5, [r4, #4]
   b8e94:	555a      	strb	r2, [r3, r5]
   b8e96:	bd38      	pop	{r3, r4, r5, pc}

000b8e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   b8e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b8e9e:	4614      	mov	r4, r2
   b8ea0:	4680      	mov	r8, r0
   b8ea2:	462a      	mov	r2, r5
   b8ea4:	4689      	mov	r9, r1
   b8ea6:	461f      	mov	r7, r3
   b8ea8:	4621      	mov	r1, r4
   b8eaa:	4b39      	ldr	r3, [pc, #228]	; (b8f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   b8eac:	f7ff ff6e 	bl	b8d8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   b8eb0:	4642      	mov	r2, r8
   b8eb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8eb6:	f852 6b08 	ldr.w	r6, [r2], #8
   b8eba:	4296      	cmp	r6, r2
   b8ebc:	bf18      	it	ne
   b8ebe:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   b8ec2:	eba5 0b04 	sub.w	fp, r5, r4
   b8ec6:	eb03 0a0b 	add.w	sl, r3, fp
   b8eca:	bf08      	it	eq
   b8ecc:	220f      	moveq	r2, #15
   b8ece:	4552      	cmp	r2, sl
   b8ed0:	d351      	bcc.n	b8f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   b8ed2:	444e      	add	r6, r9
   b8ed4:	4639      	mov	r1, r7
   b8ed6:	44a1      	add	r9, r4
   b8ed8:	4640      	mov	r0, r8
   b8eda:	eba3 0909 	sub.w	r9, r3, r9
   b8ede:	f7ff ff61 	bl	b8da4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   b8ee2:	b180      	cbz	r0, b8f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   b8ee4:	f1b9 0f00 	cmp.w	r9, #0
   b8ee8:	d006      	beq.n	b8ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8eea:	42ac      	cmp	r4, r5
   b8eec:	d004      	beq.n	b8ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8eee:	464a      	mov	r2, r9
   b8ef0:	1931      	adds	r1, r6, r4
   b8ef2:	1970      	adds	r0, r6, r5
   b8ef4:	f7ff ff6e 	bl	b8dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8ef8:	b315      	cbz	r5, b8f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8efa:	462a      	mov	r2, r5
   b8efc:	4639      	mov	r1, r7
   b8efe:	4630      	mov	r0, r6
   b8f00:	f7ff ff5c 	bl	b8dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8f04:	e01c      	b.n	b8f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8f06:	b135      	cbz	r5, b8f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   b8f08:	42ac      	cmp	r4, r5
   b8f0a:	d33c      	bcc.n	b8f86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   b8f0c:	462a      	mov	r2, r5
   b8f0e:	4639      	mov	r1, r7
   b8f10:	4630      	mov	r0, r6
   b8f12:	f7ff ff5f 	bl	b8dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8f16:	f1b9 0f00 	cmp.w	r9, #0
   b8f1a:	d011      	beq.n	b8f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8f1c:	42ac      	cmp	r4, r5
   b8f1e:	d00f      	beq.n	b8f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8f20:	464a      	mov	r2, r9
   b8f22:	1931      	adds	r1, r6, r4
   b8f24:	1970      	adds	r0, r6, r5
   b8f26:	f7ff ff55 	bl	b8dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8f2a:	42ac      	cmp	r4, r5
   b8f2c:	d208      	bcs.n	b8f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8f2e:	4434      	add	r4, r6
   b8f30:	197b      	adds	r3, r7, r5
   b8f32:	429c      	cmp	r4, r3
   b8f34:	d30f      	bcc.n	b8f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   b8f36:	462a      	mov	r2, r5
   b8f38:	4639      	mov	r1, r7
   b8f3a:	4630      	mov	r0, r6
   b8f3c:	f7ff ff4a 	bl	b8dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8f40:	f8d8 3000 	ldr.w	r3, [r8]
   b8f44:	f8c8 a004 	str.w	sl, [r8, #4]
   b8f48:	2200      	movs	r2, #0
   b8f4a:	4640      	mov	r0, r8
   b8f4c:	f803 200a 	strb.w	r2, [r3, sl]
   b8f50:	b003      	add	sp, #12
   b8f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f56:	42bc      	cmp	r4, r7
   b8f58:	d803      	bhi.n	b8f62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   b8f5a:	462a      	mov	r2, r5
   b8f5c:	eb07 010b 	add.w	r1, r7, fp
   b8f60:	e7cd      	b.n	b8efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   b8f62:	1be4      	subs	r4, r4, r7
   b8f64:	4622      	mov	r2, r4
   b8f66:	4639      	mov	r1, r7
   b8f68:	4630      	mov	r0, r6
   b8f6a:	f7ff ff33 	bl	b8dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8f6e:	1b2a      	subs	r2, r5, r4
   b8f70:	1971      	adds	r1, r6, r5
   b8f72:	1930      	adds	r0, r6, r4
   b8f74:	e7c4      	b.n	b8f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   b8f76:	9500      	str	r5, [sp, #0]
   b8f78:	463b      	mov	r3, r7
   b8f7a:	4622      	mov	r2, r4
   b8f7c:	4649      	mov	r1, r9
   b8f7e:	4640      	mov	r0, r8
   b8f80:	f7ff ff39 	bl	b8df6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b8f84:	e7dc      	b.n	b8f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8f86:	f1b9 0f00 	cmp.w	r9, #0
   b8f8a:	d0d0      	beq.n	b8f2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   b8f8c:	e7c8      	b.n	b8f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   b8f8e:	bf00      	nop
   b8f90:	000bbc83 	.word	0x000bbc83

000b8f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
   b8f94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8f96:	4604      	mov	r4, r0
   b8f98:	4623      	mov	r3, r4
   b8f9a:	6840      	ldr	r0, [r0, #4]
   b8f9c:	f853 6b08 	ldr.w	r6, [r3], #8
   b8fa0:	429e      	cmp	r6, r3
   b8fa2:	bf18      	it	ne
   b8fa4:	68a3      	ldrne	r3, [r4, #8]
   b8fa6:	eb00 0502 	add.w	r5, r0, r2
   b8faa:	bf08      	it	eq
   b8fac:	230f      	moveq	r3, #15
   b8fae:	429d      	cmp	r5, r3
   b8fb0:	d80a      	bhi.n	b8fc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
   b8fb2:	b112      	cbz	r2, b8fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
   b8fb4:	4430      	add	r0, r6
   b8fb6:	f7ff ff01 	bl	b8dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8fba:	6823      	ldr	r3, [r4, #0]
   b8fbc:	6065      	str	r5, [r4, #4]
   b8fbe:	2200      	movs	r2, #0
   b8fc0:	4620      	mov	r0, r4
   b8fc2:	555a      	strb	r2, [r3, r5]
   b8fc4:	b002      	add	sp, #8
   b8fc6:	bd70      	pop	{r4, r5, r6, pc}
   b8fc8:	9200      	str	r2, [sp, #0]
   b8fca:	460b      	mov	r3, r1
   b8fcc:	2200      	movs	r2, #0
   b8fce:	4601      	mov	r1, r0
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	f7ff ff10 	bl	b8df6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b8fd6:	e7f0      	b.n	b8fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

000b8fd8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b8fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8fdc:	460e      	mov	r6, r1
   b8fde:	461d      	mov	r5, r3
   b8fe0:	6841      	ldr	r1, [r0, #4]
   b8fe2:	b923      	cbnz	r3, b8fee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b8fe4:	4291      	cmp	r1, r2
   b8fe6:	d221      	bcs.n	b902c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b8fe8:	f04f 32ff 	mov.w	r2, #4294967295
   b8fec:	e01e      	b.n	b902c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b8fee:	4291      	cmp	r1, r2
   b8ff0:	d9fa      	bls.n	b8fe8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8ff2:	f8d0 8000 	ldr.w	r8, [r0]
   b8ff6:	7833      	ldrb	r3, [r6, #0]
   b8ff8:	f88d 3007 	strb.w	r3, [sp, #7]
   b8ffc:	eb08 0701 	add.w	r7, r8, r1
   b9000:	eb08 0002 	add.w	r0, r8, r2
   b9004:	1a89      	subs	r1, r1, r2
   b9006:	f1c5 0901 	rsb	r9, r5, #1
   b900a:	42a9      	cmp	r1, r5
   b900c:	d3ec      	bcc.n	b8fe8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b900e:	f10d 0207 	add.w	r2, sp, #7
   b9012:	4449      	add	r1, r9
   b9014:	f7ff fe7a 	bl	b8d0c <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b9018:	4604      	mov	r4, r0
   b901a:	2800      	cmp	r0, #0
   b901c:	d0e4      	beq.n	b8fe8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b901e:	462a      	mov	r2, r5
   b9020:	4631      	mov	r1, r6
   b9022:	f7ff fe6e 	bl	b8d02 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b9026:	b928      	cbnz	r0, b9034 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b9028:	eba4 0208 	sub.w	r2, r4, r8
   b902c:	4610      	mov	r0, r2
   b902e:	b003      	add	sp, #12
   b9030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9034:	1c60      	adds	r0, r4, #1
   b9036:	1a39      	subs	r1, r7, r0
   b9038:	e7e7      	b.n	b900a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b903a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b903a:	b513      	push	{r0, r1, r4, lr}
   b903c:	4604      	mov	r4, r0
   b903e:	4608      	mov	r0, r1
   b9040:	9201      	str	r2, [sp, #4]
   b9042:	9100      	str	r1, [sp, #0]
   b9044:	f7fb fd46 	bl	b4ad4 <strlen>
   b9048:	e9dd 1200 	ldrd	r1, r2, [sp]
   b904c:	4603      	mov	r3, r0
   b904e:	4620      	mov	r0, r4
   b9050:	f7ff ffc2 	bl	b8fd8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b9054:	b002      	add	sp, #8
   b9056:	bd10      	pop	{r4, pc}

000b9058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   b9058:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b905a:	4604      	mov	r4, r0
   b905c:	4616      	mov	r6, r2
   b905e:	460d      	mov	r5, r1
   b9060:	b919      	cbnz	r1, b906a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b9062:	b112      	cbz	r2, b906a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b9064:	480d      	ldr	r0, [pc, #52]	; (b909c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   b9066:	f7ff fd83 	bl	b8b70 <_ZSt19__throw_logic_errorPKc>
   b906a:	1b73      	subs	r3, r6, r5
   b906c:	2b0f      	cmp	r3, #15
   b906e:	9301      	str	r3, [sp, #4]
   b9070:	d907      	bls.n	b9082 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   b9072:	2200      	movs	r2, #0
   b9074:	a901      	add	r1, sp, #4
   b9076:	4620      	mov	r0, r4
   b9078:	f7ff fe50 	bl	b8d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b907c:	9b01      	ldr	r3, [sp, #4]
   b907e:	6020      	str	r0, [r4, #0]
   b9080:	60a3      	str	r3, [r4, #8]
   b9082:	4632      	mov	r2, r6
   b9084:	4629      	mov	r1, r5
   b9086:	6820      	ldr	r0, [r4, #0]
   b9088:	f7ff feb0 	bl	b8dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   b908c:	9b01      	ldr	r3, [sp, #4]
   b908e:	6822      	ldr	r2, [r4, #0]
   b9090:	6063      	str	r3, [r4, #4]
   b9092:	2100      	movs	r1, #0
   b9094:	54d1      	strb	r1, [r2, r3]
   b9096:	b002      	add	sp, #8
   b9098:	bd70      	pop	{r4, r5, r6, pc}
   b909a:	bf00      	nop
   b909c:	000bb74a 	.word	0x000bb74a

000b90a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   b90a0:	b508      	push	{r3, lr}
   b90a2:	f04f 0300 	mov.w	r3, #0
   b90a6:	f7ff ffd7 	bl	b9058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   b90aa:	bd08      	pop	{r3, pc}

000b90ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   b90ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b90b0:	460d      	mov	r5, r1
   b90b2:	4617      	mov	r7, r2
   b90b4:	4698      	mov	r8, r3
   b90b6:	f100 0308 	add.w	r3, r0, #8
   b90ba:	4604      	mov	r4, r0
   b90bc:	6003      	str	r3, [r0, #0]
   b90be:	4639      	mov	r1, r7
   b90c0:	4a09      	ldr	r2, [pc, #36]	; (b90e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   b90c2:	4628      	mov	r0, r5
   b90c4:	f7ff fe54 	bl	b8d70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b90c8:	682e      	ldr	r6, [r5, #0]
   b90ca:	686a      	ldr	r2, [r5, #4]
   b90cc:	1831      	adds	r1, r6, r0
   b90ce:	1bd2      	subs	r2, r2, r7
   b90d0:	4620      	mov	r0, r4
   b90d2:	4542      	cmp	r2, r8
   b90d4:	bf94      	ite	ls
   b90d6:	188a      	addls	r2, r1, r2
   b90d8:	eb01 0208 	addhi.w	r2, r1, r8
   b90dc:	f7ff ffe0 	bl	b90a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   b90e0:	4620      	mov	r0, r4
   b90e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b90e6:	bf00      	nop
   b90e8:	000bbc9c 	.word	0x000bbc9c

000b90ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   b90ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90ee:	460d      	mov	r5, r1
   b90f0:	4604      	mov	r4, r0
   b90f2:	4611      	mov	r1, r2
   b90f4:	4628      	mov	r0, r5
   b90f6:	4a06      	ldr	r2, [pc, #24]	; (b9110 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   b90f8:	9301      	str	r3, [sp, #4]
   b90fa:	f7ff fe39 	bl	b8d70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b90fe:	9b01      	ldr	r3, [sp, #4]
   b9100:	4602      	mov	r2, r0
   b9102:	4629      	mov	r1, r5
   b9104:	4620      	mov	r0, r4
   b9106:	f7ff ffd1 	bl	b90ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   b910a:	4620      	mov	r0, r4
   b910c:	b003      	add	sp, #12
   b910e:	bd30      	pop	{r4, r5, pc}
   b9110:	000bbcb7 	.word	0x000bbcb7

000b9114 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9116:	2400      	movs	r4, #0
   b9118:	2310      	movs	r3, #16
   b911a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b911e:	6803      	ldr	r3, [r0, #0]
   b9120:	4615      	mov	r5, r2
   b9122:	699e      	ldr	r6, [r3, #24]
   b9124:	6812      	ldr	r2, [r2, #0]
   b9126:	466b      	mov	r3, sp
   b9128:	e9cd 4400 	strd	r4, r4, [sp]
   b912c:	47b0      	blx	r6
   b912e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9132:	f003 0306 	and.w	r3, r3, #6
   b9136:	2b06      	cmp	r3, #6
   b9138:	bf03      	ittte	eq
   b913a:	9b00      	ldreq	r3, [sp, #0]
   b913c:	602b      	streq	r3, [r5, #0]
   b913e:	2001      	moveq	r0, #1
   b9140:	4620      	movne	r0, r4
   b9142:	b004      	add	sp, #16
   b9144:	bd70      	pop	{r4, r5, r6, pc}

000b9146 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9146:	9800      	ldr	r0, [sp, #0]
   b9148:	4290      	cmp	r0, r2
   b914a:	bf14      	ite	ne
   b914c:	2001      	movne	r0, #1
   b914e:	2006      	moveq	r0, #6
   b9150:	4770      	bx	lr
	...

000b9154 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9154:	b510      	push	{r4, lr}
   b9156:	4b03      	ldr	r3, [pc, #12]	; (b9164 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9158:	6003      	str	r3, [r0, #0]
   b915a:	4604      	mov	r4, r0
   b915c:	f000 f8cd 	bl	b92fa <_ZNSt9type_infoD1Ev>
   b9160:	4620      	mov	r0, r4
   b9162:	bd10      	pop	{r4, pc}
   b9164:	000bbd04 	.word	0x000bbd04

000b9168 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9168:	b510      	push	{r4, lr}
   b916a:	4604      	mov	r4, r0
   b916c:	f7ff fff2 	bl	b9154 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9170:	4620      	mov	r0, r4
   b9172:	2108      	movs	r1, #8
   b9174:	f7fb fd0f 	bl	b4b96 <_ZdlPvj>
   b9178:	4620      	mov	r0, r4
   b917a:	bd10      	pop	{r4, pc}

000b917c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9180:	461f      	mov	r7, r3
   b9182:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9186:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b918a:	4598      	cmp	r8, r3
   b918c:	4606      	mov	r6, r0
   b918e:	4615      	mov	r5, r2
   b9190:	d107      	bne.n	b91a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9192:	9907      	ldr	r1, [sp, #28]
   b9194:	f000 f8b4 	bl	b9300 <_ZNKSt9type_infoeqERKS_>
   b9198:	b118      	cbz	r0, b91a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b919a:	7165      	strb	r5, [r4, #5]
   b919c:	2000      	movs	r0, #0
   b919e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b91a2:	4639      	mov	r1, r7
   b91a4:	4630      	mov	r0, r6
   b91a6:	f000 f8ab 	bl	b9300 <_ZNKSt9type_infoeqERKS_>
   b91aa:	2800      	cmp	r0, #0
   b91ac:	d0f6      	beq.n	b919c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b91ae:	2301      	movs	r3, #1
   b91b0:	f8c4 8000 	str.w	r8, [r4]
   b91b4:	7125      	strb	r5, [r4, #4]
   b91b6:	71a3      	strb	r3, [r4, #6]
   b91b8:	e7f0      	b.n	b919c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b91ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b91ba:	b538      	push	{r3, r4, r5, lr}
   b91bc:	4615      	mov	r5, r2
   b91be:	461c      	mov	r4, r3
   b91c0:	f000 f89e 	bl	b9300 <_ZNKSt9type_infoeqERKS_>
   b91c4:	b120      	cbz	r0, b91d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b91c6:	2308      	movs	r3, #8
   b91c8:	60e3      	str	r3, [r4, #12]
   b91ca:	2306      	movs	r3, #6
   b91cc:	6025      	str	r5, [r4, #0]
   b91ce:	7123      	strb	r3, [r4, #4]
   b91d0:	bd38      	pop	{r3, r4, r5, pc}

000b91d2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b91d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b91d4:	4605      	mov	r5, r0
   b91d6:	460c      	mov	r4, r1
   b91d8:	9201      	str	r2, [sp, #4]
   b91da:	461e      	mov	r6, r3
   b91dc:	f000 f890 	bl	b9300 <_ZNKSt9type_infoeqERKS_>
   b91e0:	b950      	cbnz	r0, b91f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b91e2:	2e03      	cmp	r6, #3
   b91e4:	d808      	bhi.n	b91f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b91e6:	6823      	ldr	r3, [r4, #0]
   b91e8:	9a01      	ldr	r2, [sp, #4]
   b91ea:	695b      	ldr	r3, [r3, #20]
   b91ec:	4629      	mov	r1, r5
   b91ee:	4620      	mov	r0, r4
   b91f0:	b002      	add	sp, #8
   b91f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b91f6:	4718      	bx	r3
   b91f8:	b002      	add	sp, #8
   b91fa:	bd70      	pop	{r4, r5, r6, pc}

000b91fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b91fc:	b510      	push	{r4, lr}
   b91fe:	4b03      	ldr	r3, [pc, #12]	; (b920c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9200:	6003      	str	r3, [r0, #0]
   b9202:	4604      	mov	r4, r0
   b9204:	f7ff ffa6 	bl	b9154 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9208:	4620      	mov	r0, r4
   b920a:	bd10      	pop	{r4, pc}
   b920c:	000bbd64 	.word	0x000bbd64

000b9210 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9210:	b510      	push	{r4, lr}
   b9212:	4604      	mov	r4, r0
   b9214:	f7ff fff2 	bl	b91fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9218:	4620      	mov	r0, r4
   b921a:	210c      	movs	r1, #12
   b921c:	f7fb fcbb 	bl	b4b96 <_ZdlPvj>
   b9220:	4620      	mov	r0, r4
   b9222:	bd10      	pop	{r4, pc}

000b9224 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9226:	9f08      	ldr	r7, [sp, #32]
   b9228:	4297      	cmp	r7, r2
   b922a:	4605      	mov	r5, r0
   b922c:	460e      	mov	r6, r1
   b922e:	4614      	mov	r4, r2
   b9230:	d00a      	beq.n	b9248 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9232:	68a8      	ldr	r0, [r5, #8]
   b9234:	6802      	ldr	r2, [r0, #0]
   b9236:	9708      	str	r7, [sp, #32]
   b9238:	6a15      	ldr	r5, [r2, #32]
   b923a:	4631      	mov	r1, r6
   b923c:	4622      	mov	r2, r4
   b923e:	46ac      	mov	ip, r5
   b9240:	b003      	add	sp, #12
   b9242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9246:	4760      	bx	ip
   b9248:	4619      	mov	r1, r3
   b924a:	9301      	str	r3, [sp, #4]
   b924c:	f000 f858 	bl	b9300 <_ZNKSt9type_infoeqERKS_>
   b9250:	9b01      	ldr	r3, [sp, #4]
   b9252:	2800      	cmp	r0, #0
   b9254:	d0ed      	beq.n	b9232 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9256:	2006      	movs	r0, #6
   b9258:	b003      	add	sp, #12
   b925a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b925c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b925c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9260:	460d      	mov	r5, r1
   b9262:	4619      	mov	r1, r3
   b9264:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9268:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b926c:	4681      	mov	r9, r0
   b926e:	4617      	mov	r7, r2
   b9270:	4698      	mov	r8, r3
   b9272:	f000 f845 	bl	b9300 <_ZNKSt9type_infoeqERKS_>
   b9276:	b190      	cbz	r0, b929e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9278:	2d00      	cmp	r5, #0
   b927a:	6034      	str	r4, [r6, #0]
   b927c:	7137      	strb	r7, [r6, #4]
   b927e:	db09      	blt.n	b9294 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9280:	1961      	adds	r1, r4, r5
   b9282:	458a      	cmp	sl, r1
   b9284:	bf0c      	ite	eq
   b9286:	2106      	moveq	r1, #6
   b9288:	2101      	movne	r1, #1
   b928a:	71b1      	strb	r1, [r6, #6]
   b928c:	2000      	movs	r0, #0
   b928e:	b001      	add	sp, #4
   b9290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9294:	3502      	adds	r5, #2
   b9296:	d1f9      	bne.n	b928c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9298:	2301      	movs	r3, #1
   b929a:	71b3      	strb	r3, [r6, #6]
   b929c:	e7f6      	b.n	b928c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b929e:	4554      	cmp	r4, sl
   b92a0:	d106      	bne.n	b92b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b92a2:	4659      	mov	r1, fp
   b92a4:	4648      	mov	r0, r9
   b92a6:	f000 f82b 	bl	b9300 <_ZNKSt9type_infoeqERKS_>
   b92aa:	b108      	cbz	r0, b92b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b92ac:	7177      	strb	r7, [r6, #5]
   b92ae:	e7ed      	b.n	b928c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b92b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b92b4:	6803      	ldr	r3, [r0, #0]
   b92b6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b92ba:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b92be:	69dc      	ldr	r4, [r3, #28]
   b92c0:	463a      	mov	r2, r7
   b92c2:	4643      	mov	r3, r8
   b92c4:	4629      	mov	r1, r5
   b92c6:	46a4      	mov	ip, r4
   b92c8:	b001      	add	sp, #4
   b92ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b92ce:	4760      	bx	ip

000b92d0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b92d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b92d4:	4607      	mov	r7, r0
   b92d6:	460c      	mov	r4, r1
   b92d8:	4615      	mov	r5, r2
   b92da:	461e      	mov	r6, r3
   b92dc:	f7ff ff6d 	bl	b91ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b92e0:	b948      	cbnz	r0, b92f6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b92e2:	68b8      	ldr	r0, [r7, #8]
   b92e4:	6803      	ldr	r3, [r0, #0]
   b92e6:	699f      	ldr	r7, [r3, #24]
   b92e8:	462a      	mov	r2, r5
   b92ea:	4633      	mov	r3, r6
   b92ec:	4621      	mov	r1, r4
   b92ee:	46bc      	mov	ip, r7
   b92f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b92f4:	4760      	bx	ip
   b92f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b92fa <_ZNSt9type_infoD1Ev>:
   b92fa:	4770      	bx	lr

000b92fc <_ZNKSt9type_info14__is_pointer_pEv>:
   b92fc:	2000      	movs	r0, #0
   b92fe:	4770      	bx	lr

000b9300 <_ZNKSt9type_infoeqERKS_>:
   b9300:	4281      	cmp	r1, r0
   b9302:	b508      	push	{r3, lr}
   b9304:	d00e      	beq.n	b9324 <_ZNKSt9type_infoeqERKS_+0x24>
   b9306:	6840      	ldr	r0, [r0, #4]
   b9308:	7803      	ldrb	r3, [r0, #0]
   b930a:	2b2a      	cmp	r3, #42	; 0x2a
   b930c:	d00c      	beq.n	b9328 <_ZNKSt9type_infoeqERKS_+0x28>
   b930e:	6849      	ldr	r1, [r1, #4]
   b9310:	780b      	ldrb	r3, [r1, #0]
   b9312:	2b2a      	cmp	r3, #42	; 0x2a
   b9314:	bf08      	it	eq
   b9316:	3101      	addeq	r1, #1
   b9318:	f7fb fbd2 	bl	b4ac0 <strcmp>
   b931c:	fab0 f080 	clz	r0, r0
   b9320:	0940      	lsrs	r0, r0, #5
   b9322:	bd08      	pop	{r3, pc}
   b9324:	2001      	movs	r0, #1
   b9326:	e7fc      	b.n	b9322 <_ZNKSt9type_infoeqERKS_+0x22>
   b9328:	2000      	movs	r0, #0
   b932a:	e7fa      	b.n	b9322 <_ZNKSt9type_infoeqERKS_+0x22>

000b932c <asctime_r>:
   b932c:	b510      	push	{r4, lr}
   b932e:	460c      	mov	r4, r1
   b9330:	6941      	ldr	r1, [r0, #20]
   b9332:	6903      	ldr	r3, [r0, #16]
   b9334:	6982      	ldr	r2, [r0, #24]
   b9336:	b086      	sub	sp, #24
   b9338:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b933c:	9104      	str	r1, [sp, #16]
   b933e:	6801      	ldr	r1, [r0, #0]
   b9340:	9103      	str	r1, [sp, #12]
   b9342:	6841      	ldr	r1, [r0, #4]
   b9344:	9102      	str	r1, [sp, #8]
   b9346:	6881      	ldr	r1, [r0, #8]
   b9348:	9101      	str	r1, [sp, #4]
   b934a:	68c1      	ldr	r1, [r0, #12]
   b934c:	9100      	str	r1, [sp, #0]
   b934e:	4907      	ldr	r1, [pc, #28]	; (b936c <asctime_r+0x40>)
   b9350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b9354:	440b      	add	r3, r1
   b9356:	4906      	ldr	r1, [pc, #24]	; (b9370 <asctime_r+0x44>)
   b9358:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b935c:	440a      	add	r2, r1
   b935e:	4620      	mov	r0, r4
   b9360:	4904      	ldr	r1, [pc, #16]	; (b9374 <asctime_r+0x48>)
   b9362:	f7fc ff89 	bl	b6278 <siprintf>
   b9366:	4620      	mov	r0, r4
   b9368:	b006      	add	sp, #24
   b936a:	bd10      	pop	{r4, pc}
   b936c:	000bbdd2 	.word	0x000bbdd2
   b9370:	000bbdbd 	.word	0x000bbdbd
   b9374:	000bbd9d 	.word	0x000bbd9d

000b9378 <atexit>:
   b9378:	2300      	movs	r3, #0
   b937a:	4601      	mov	r1, r0
   b937c:	461a      	mov	r2, r3
   b937e:	4618      	mov	r0, r3
   b9380:	f000 bfc0 	b.w	ba304 <__register_exitproc>

000b9384 <memcmp>:
   b9384:	b510      	push	{r4, lr}
   b9386:	3901      	subs	r1, #1
   b9388:	4402      	add	r2, r0
   b938a:	4290      	cmp	r0, r2
   b938c:	d101      	bne.n	b9392 <memcmp+0xe>
   b938e:	2000      	movs	r0, #0
   b9390:	e005      	b.n	b939e <memcmp+0x1a>
   b9392:	7803      	ldrb	r3, [r0, #0]
   b9394:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9398:	42a3      	cmp	r3, r4
   b939a:	d001      	beq.n	b93a0 <memcmp+0x1c>
   b939c:	1b18      	subs	r0, r3, r4
   b939e:	bd10      	pop	{r4, pc}
   b93a0:	3001      	adds	r0, #1
   b93a2:	e7f2      	b.n	b938a <memcmp+0x6>

000b93a4 <memcpy>:
   b93a4:	440a      	add	r2, r1
   b93a6:	4291      	cmp	r1, r2
   b93a8:	f100 33ff 	add.w	r3, r0, #4294967295
   b93ac:	d100      	bne.n	b93b0 <memcpy+0xc>
   b93ae:	4770      	bx	lr
   b93b0:	b510      	push	{r4, lr}
   b93b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b93b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b93ba:	4291      	cmp	r1, r2
   b93bc:	d1f9      	bne.n	b93b2 <memcpy+0xe>
   b93be:	bd10      	pop	{r4, pc}

000b93c0 <memmove>:
   b93c0:	4288      	cmp	r0, r1
   b93c2:	b510      	push	{r4, lr}
   b93c4:	eb01 0402 	add.w	r4, r1, r2
   b93c8:	d902      	bls.n	b93d0 <memmove+0x10>
   b93ca:	4284      	cmp	r4, r0
   b93cc:	4623      	mov	r3, r4
   b93ce:	d807      	bhi.n	b93e0 <memmove+0x20>
   b93d0:	1e43      	subs	r3, r0, #1
   b93d2:	42a1      	cmp	r1, r4
   b93d4:	d008      	beq.n	b93e8 <memmove+0x28>
   b93d6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b93da:	f803 2f01 	strb.w	r2, [r3, #1]!
   b93de:	e7f8      	b.n	b93d2 <memmove+0x12>
   b93e0:	4402      	add	r2, r0
   b93e2:	4601      	mov	r1, r0
   b93e4:	428a      	cmp	r2, r1
   b93e6:	d100      	bne.n	b93ea <memmove+0x2a>
   b93e8:	bd10      	pop	{r4, pc}
   b93ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b93ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b93f2:	e7f7      	b.n	b93e4 <memmove+0x24>

000b93f4 <memset>:
   b93f4:	4402      	add	r2, r0
   b93f6:	4603      	mov	r3, r0
   b93f8:	4293      	cmp	r3, r2
   b93fa:	d100      	bne.n	b93fe <memset+0xa>
   b93fc:	4770      	bx	lr
   b93fe:	f803 1b01 	strb.w	r1, [r3], #1
   b9402:	e7f9      	b.n	b93f8 <memset+0x4>

000b9404 <srand>:
   b9404:	b538      	push	{r3, r4, r5, lr}
   b9406:	4b10      	ldr	r3, [pc, #64]	; (b9448 <srand+0x44>)
   b9408:	681d      	ldr	r5, [r3, #0]
   b940a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b940c:	4604      	mov	r4, r0
   b940e:	b9b3      	cbnz	r3, b943e <srand+0x3a>
   b9410:	2018      	movs	r0, #24
   b9412:	f7fc ff11 	bl	b6238 <malloc>
   b9416:	4602      	mov	r2, r0
   b9418:	63a8      	str	r0, [r5, #56]	; 0x38
   b941a:	b920      	cbnz	r0, b9426 <srand+0x22>
   b941c:	4b0b      	ldr	r3, [pc, #44]	; (b944c <srand+0x48>)
   b941e:	480c      	ldr	r0, [pc, #48]	; (b9450 <srand+0x4c>)
   b9420:	2142      	movs	r1, #66	; 0x42
   b9422:	f7fc ff51 	bl	b62c8 <__assert_func>
   b9426:	490b      	ldr	r1, [pc, #44]	; (b9454 <srand+0x50>)
   b9428:	4b0b      	ldr	r3, [pc, #44]	; (b9458 <srand+0x54>)
   b942a:	e9c0 1300 	strd	r1, r3, [r0]
   b942e:	4b0b      	ldr	r3, [pc, #44]	; (b945c <srand+0x58>)
   b9430:	6083      	str	r3, [r0, #8]
   b9432:	230b      	movs	r3, #11
   b9434:	8183      	strh	r3, [r0, #12]
   b9436:	2100      	movs	r1, #0
   b9438:	2001      	movs	r0, #1
   b943a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b943e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9440:	2200      	movs	r2, #0
   b9442:	611c      	str	r4, [r3, #16]
   b9444:	615a      	str	r2, [r3, #20]
   b9446:	bd38      	pop	{r3, r4, r5, pc}
   b9448:	2003e30c 	.word	0x2003e30c
   b944c:	000bbdf6 	.word	0x000bbdf6
   b9450:	000bbe0d 	.word	0x000bbe0d
   b9454:	abcd330e 	.word	0xabcd330e
   b9458:	e66d1234 	.word	0xe66d1234
   b945c:	0005deec 	.word	0x0005deec

000b9460 <strcpy>:
   b9460:	4603      	mov	r3, r0
   b9462:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9466:	f803 2b01 	strb.w	r2, [r3], #1
   b946a:	2a00      	cmp	r2, #0
   b946c:	d1f9      	bne.n	b9462 <strcpy+0x2>
   b946e:	4770      	bx	lr

000b9470 <strdup>:
   b9470:	4b02      	ldr	r3, [pc, #8]	; (b947c <strdup+0xc>)
   b9472:	4601      	mov	r1, r0
   b9474:	6818      	ldr	r0, [r3, #0]
   b9476:	f000 b803 	b.w	b9480 <_strdup_r>
   b947a:	bf00      	nop
   b947c:	2003e30c 	.word	0x2003e30c

000b9480 <_strdup_r>:
   b9480:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9482:	4604      	mov	r4, r0
   b9484:	4608      	mov	r0, r1
   b9486:	460d      	mov	r5, r1
   b9488:	f7fb fb24 	bl	b4ad4 <strlen>
   b948c:	1c42      	adds	r2, r0, #1
   b948e:	4611      	mov	r1, r2
   b9490:	4620      	mov	r0, r4
   b9492:	9201      	str	r2, [sp, #4]
   b9494:	f7fc ff08 	bl	b62a8 <_malloc_r>
   b9498:	4604      	mov	r4, r0
   b949a:	b118      	cbz	r0, b94a4 <_strdup_r+0x24>
   b949c:	9a01      	ldr	r2, [sp, #4]
   b949e:	4629      	mov	r1, r5
   b94a0:	f7ff ff80 	bl	b93a4 <memcpy>
   b94a4:	4620      	mov	r0, r4
   b94a6:	b003      	add	sp, #12
   b94a8:	bd30      	pop	{r4, r5, pc}

000b94aa <strncmp>:
   b94aa:	b510      	push	{r4, lr}
   b94ac:	b17a      	cbz	r2, b94ce <strncmp+0x24>
   b94ae:	4603      	mov	r3, r0
   b94b0:	3901      	subs	r1, #1
   b94b2:	1884      	adds	r4, r0, r2
   b94b4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b94b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b94bc:	4290      	cmp	r0, r2
   b94be:	d101      	bne.n	b94c4 <strncmp+0x1a>
   b94c0:	42a3      	cmp	r3, r4
   b94c2:	d101      	bne.n	b94c8 <strncmp+0x1e>
   b94c4:	1a80      	subs	r0, r0, r2
   b94c6:	bd10      	pop	{r4, pc}
   b94c8:	2800      	cmp	r0, #0
   b94ca:	d1f3      	bne.n	b94b4 <strncmp+0xa>
   b94cc:	e7fa      	b.n	b94c4 <strncmp+0x1a>
   b94ce:	4610      	mov	r0, r2
   b94d0:	e7f9      	b.n	b94c6 <strncmp+0x1c>

000b94d2 <strnlen>:
   b94d2:	b510      	push	{r4, lr}
   b94d4:	4602      	mov	r2, r0
   b94d6:	4401      	add	r1, r0
   b94d8:	428a      	cmp	r2, r1
   b94da:	4613      	mov	r3, r2
   b94dc:	d003      	beq.n	b94e6 <strnlen+0x14>
   b94de:	781c      	ldrb	r4, [r3, #0]
   b94e0:	3201      	adds	r2, #1
   b94e2:	2c00      	cmp	r4, #0
   b94e4:	d1f8      	bne.n	b94d8 <strnlen+0x6>
   b94e6:	1a18      	subs	r0, r3, r0
   b94e8:	bd10      	pop	{r4, pc}

000b94ea <sulp>:
   b94ea:	b570      	push	{r4, r5, r6, lr}
   b94ec:	4604      	mov	r4, r0
   b94ee:	460d      	mov	r5, r1
   b94f0:	ec45 4b10 	vmov	d0, r4, r5
   b94f4:	4616      	mov	r6, r2
   b94f6:	f001 fe5f 	bl	bb1b8 <__ulp>
   b94fa:	ec51 0b10 	vmov	r0, r1, d0
   b94fe:	b17e      	cbz	r6, b9520 <sulp+0x36>
   b9500:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b9504:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9508:	2b00      	cmp	r3, #0
   b950a:	dd09      	ble.n	b9520 <sulp+0x36>
   b950c:	051b      	lsls	r3, r3, #20
   b950e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b9512:	2400      	movs	r4, #0
   b9514:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b9518:	4622      	mov	r2, r4
   b951a:	462b      	mov	r3, r5
   b951c:	f7fa ff3c 	bl	b4398 <__aeabi_dmul>
   b9520:	bd70      	pop	{r4, r5, r6, pc}
   b9522:	0000      	movs	r0, r0
   b9524:	0000      	movs	r0, r0
	...

000b9528 <_strtod_l>:
   b9528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b952c:	ed2d 8b02 	vpush	{d8}
   b9530:	b09d      	sub	sp, #116	; 0x74
   b9532:	461f      	mov	r7, r3
   b9534:	2300      	movs	r3, #0
   b9536:	9318      	str	r3, [sp, #96]	; 0x60
   b9538:	4ba2      	ldr	r3, [pc, #648]	; (b97c4 <_strtod_l+0x29c>)
   b953a:	9213      	str	r2, [sp, #76]	; 0x4c
   b953c:	681b      	ldr	r3, [r3, #0]
   b953e:	9305      	str	r3, [sp, #20]
   b9540:	4604      	mov	r4, r0
   b9542:	4618      	mov	r0, r3
   b9544:	4688      	mov	r8, r1
   b9546:	f7fb fac5 	bl	b4ad4 <strlen>
   b954a:	f04f 0a00 	mov.w	sl, #0
   b954e:	4605      	mov	r5, r0
   b9550:	f04f 0b00 	mov.w	fp, #0
   b9554:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b955a:	781a      	ldrb	r2, [r3, #0]
   b955c:	2a2b      	cmp	r2, #43	; 0x2b
   b955e:	d04e      	beq.n	b95fe <_strtod_l+0xd6>
   b9560:	d83b      	bhi.n	b95da <_strtod_l+0xb2>
   b9562:	2a0d      	cmp	r2, #13
   b9564:	d834      	bhi.n	b95d0 <_strtod_l+0xa8>
   b9566:	2a08      	cmp	r2, #8
   b9568:	d834      	bhi.n	b95d4 <_strtod_l+0xac>
   b956a:	2a00      	cmp	r2, #0
   b956c:	d03e      	beq.n	b95ec <_strtod_l+0xc4>
   b956e:	2300      	movs	r3, #0
   b9570:	930a      	str	r3, [sp, #40]	; 0x28
   b9572:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b9574:	7833      	ldrb	r3, [r6, #0]
   b9576:	2b30      	cmp	r3, #48	; 0x30
   b9578:	f040 80b0 	bne.w	b96dc <_strtod_l+0x1b4>
   b957c:	7873      	ldrb	r3, [r6, #1]
   b957e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9582:	2b58      	cmp	r3, #88	; 0x58
   b9584:	d168      	bne.n	b9658 <_strtod_l+0x130>
   b9586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9588:	9301      	str	r3, [sp, #4]
   b958a:	ab18      	add	r3, sp, #96	; 0x60
   b958c:	9702      	str	r7, [sp, #8]
   b958e:	9300      	str	r3, [sp, #0]
   b9590:	4a8d      	ldr	r2, [pc, #564]	; (b97c8 <_strtod_l+0x2a0>)
   b9592:	ab19      	add	r3, sp, #100	; 0x64
   b9594:	a917      	add	r1, sp, #92	; 0x5c
   b9596:	4620      	mov	r0, r4
   b9598:	f000 ff7e 	bl	ba498 <__gethex>
   b959c:	f010 0707 	ands.w	r7, r0, #7
   b95a0:	4605      	mov	r5, r0
   b95a2:	d005      	beq.n	b95b0 <_strtod_l+0x88>
   b95a4:	2f06      	cmp	r7, #6
   b95a6:	d12c      	bne.n	b9602 <_strtod_l+0xda>
   b95a8:	3601      	adds	r6, #1
   b95aa:	2300      	movs	r3, #0
   b95ac:	9617      	str	r6, [sp, #92]	; 0x5c
   b95ae:	930a      	str	r3, [sp, #40]	; 0x28
   b95b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b95b2:	2b00      	cmp	r3, #0
   b95b4:	f040 8590 	bne.w	ba0d8 <_strtod_l+0xbb0>
   b95b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b95ba:	b1eb      	cbz	r3, b95f8 <_strtod_l+0xd0>
   b95bc:	4652      	mov	r2, sl
   b95be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b95c2:	ec43 2b10 	vmov	d0, r2, r3
   b95c6:	b01d      	add	sp, #116	; 0x74
   b95c8:	ecbd 8b02 	vpop	{d8}
   b95cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b95d0:	2a20      	cmp	r2, #32
   b95d2:	d1cc      	bne.n	b956e <_strtod_l+0x46>
   b95d4:	3301      	adds	r3, #1
   b95d6:	9317      	str	r3, [sp, #92]	; 0x5c
   b95d8:	e7be      	b.n	b9558 <_strtod_l+0x30>
   b95da:	2a2d      	cmp	r2, #45	; 0x2d
   b95dc:	d1c7      	bne.n	b956e <_strtod_l+0x46>
   b95de:	2201      	movs	r2, #1
   b95e0:	920a      	str	r2, [sp, #40]	; 0x28
   b95e2:	1c5a      	adds	r2, r3, #1
   b95e4:	9217      	str	r2, [sp, #92]	; 0x5c
   b95e6:	785b      	ldrb	r3, [r3, #1]
   b95e8:	2b00      	cmp	r3, #0
   b95ea:	d1c2      	bne.n	b9572 <_strtod_l+0x4a>
   b95ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b95ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b95f2:	2b00      	cmp	r3, #0
   b95f4:	f040 856e 	bne.w	ba0d4 <_strtod_l+0xbac>
   b95f8:	4652      	mov	r2, sl
   b95fa:	465b      	mov	r3, fp
   b95fc:	e7e1      	b.n	b95c2 <_strtod_l+0x9a>
   b95fe:	2200      	movs	r2, #0
   b9600:	e7ee      	b.n	b95e0 <_strtod_l+0xb8>
   b9602:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9604:	b13a      	cbz	r2, b9616 <_strtod_l+0xee>
   b9606:	2135      	movs	r1, #53	; 0x35
   b9608:	a81a      	add	r0, sp, #104	; 0x68
   b960a:	f001 fee0 	bl	bb3ce <__copybits>
   b960e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9610:	4620      	mov	r0, r4
   b9612:	f001 fa9f 	bl	bab54 <_Bfree>
   b9616:	3f01      	subs	r7, #1
   b9618:	2f04      	cmp	r7, #4
   b961a:	d806      	bhi.n	b962a <_strtod_l+0x102>
   b961c:	e8df f007 	tbb	[pc, r7]
   b9620:	1714030a 	.word	0x1714030a
   b9624:	0a          	.byte	0x0a
   b9625:	00          	.byte	0x00
   b9626:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b962a:	0728      	lsls	r0, r5, #28
   b962c:	d5c0      	bpl.n	b95b0 <_strtod_l+0x88>
   b962e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b9632:	e7bd      	b.n	b95b0 <_strtod_l+0x88>
   b9634:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9638:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b963a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b963e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b9642:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b9646:	e7f0      	b.n	b962a <_strtod_l+0x102>
   b9648:	f8df b180 	ldr.w	fp, [pc, #384]	; b97cc <_strtod_l+0x2a4>
   b964c:	e7ed      	b.n	b962a <_strtod_l+0x102>
   b964e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b9652:	f04f 3aff 	mov.w	sl, #4294967295
   b9656:	e7e8      	b.n	b962a <_strtod_l+0x102>
   b9658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b965a:	1c5a      	adds	r2, r3, #1
   b965c:	9217      	str	r2, [sp, #92]	; 0x5c
   b965e:	785b      	ldrb	r3, [r3, #1]
   b9660:	2b30      	cmp	r3, #48	; 0x30
   b9662:	d0f9      	beq.n	b9658 <_strtod_l+0x130>
   b9664:	2b00      	cmp	r3, #0
   b9666:	d0a3      	beq.n	b95b0 <_strtod_l+0x88>
   b9668:	2301      	movs	r3, #1
   b966a:	f04f 0900 	mov.w	r9, #0
   b966e:	9304      	str	r3, [sp, #16]
   b9670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9672:	9308      	str	r3, [sp, #32]
   b9674:	f8cd 901c 	str.w	r9, [sp, #28]
   b9678:	464f      	mov	r7, r9
   b967a:	220a      	movs	r2, #10
   b967c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b967e:	7806      	ldrb	r6, [r0, #0]
   b9680:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b9684:	b2d9      	uxtb	r1, r3
   b9686:	2909      	cmp	r1, #9
   b9688:	d92a      	bls.n	b96e0 <_strtod_l+0x1b8>
   b968a:	9905      	ldr	r1, [sp, #20]
   b968c:	462a      	mov	r2, r5
   b968e:	f7ff ff0c 	bl	b94aa <strncmp>
   b9692:	b398      	cbz	r0, b96fc <_strtod_l+0x1d4>
   b9694:	2000      	movs	r0, #0
   b9696:	4632      	mov	r2, r6
   b9698:	463d      	mov	r5, r7
   b969a:	9005      	str	r0, [sp, #20]
   b969c:	4603      	mov	r3, r0
   b969e:	2a65      	cmp	r2, #101	; 0x65
   b96a0:	d001      	beq.n	b96a6 <_strtod_l+0x17e>
   b96a2:	2a45      	cmp	r2, #69	; 0x45
   b96a4:	d118      	bne.n	b96d8 <_strtod_l+0x1b0>
   b96a6:	b91d      	cbnz	r5, b96b0 <_strtod_l+0x188>
   b96a8:	9a04      	ldr	r2, [sp, #16]
   b96aa:	4302      	orrs	r2, r0
   b96ac:	d09e      	beq.n	b95ec <_strtod_l+0xc4>
   b96ae:	2500      	movs	r5, #0
   b96b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b96b4:	f108 0201 	add.w	r2, r8, #1
   b96b8:	9217      	str	r2, [sp, #92]	; 0x5c
   b96ba:	f898 2001 	ldrb.w	r2, [r8, #1]
   b96be:	2a2b      	cmp	r2, #43	; 0x2b
   b96c0:	d075      	beq.n	b97ae <_strtod_l+0x286>
   b96c2:	2a2d      	cmp	r2, #45	; 0x2d
   b96c4:	d07b      	beq.n	b97be <_strtod_l+0x296>
   b96c6:	f04f 0c00 	mov.w	ip, #0
   b96ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b96ce:	2909      	cmp	r1, #9
   b96d0:	f240 8082 	bls.w	b97d8 <_strtod_l+0x2b0>
   b96d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b96d8:	2600      	movs	r6, #0
   b96da:	e09d      	b.n	b9818 <_strtod_l+0x2f0>
   b96dc:	2300      	movs	r3, #0
   b96de:	e7c4      	b.n	b966a <_strtod_l+0x142>
   b96e0:	2f08      	cmp	r7, #8
   b96e2:	bfd8      	it	le
   b96e4:	9907      	ldrle	r1, [sp, #28]
   b96e6:	f100 0001 	add.w	r0, r0, #1
   b96ea:	bfda      	itte	le
   b96ec:	fb02 3301 	mlale	r3, r2, r1, r3
   b96f0:	9307      	strle	r3, [sp, #28]
   b96f2:	fb02 3909 	mlagt	r9, r2, r9, r3
   b96f6:	3701      	adds	r7, #1
   b96f8:	9017      	str	r0, [sp, #92]	; 0x5c
   b96fa:	e7bf      	b.n	b967c <_strtod_l+0x154>
   b96fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b96fe:	195a      	adds	r2, r3, r5
   b9700:	9217      	str	r2, [sp, #92]	; 0x5c
   b9702:	5d5a      	ldrb	r2, [r3, r5]
   b9704:	2f00      	cmp	r7, #0
   b9706:	d037      	beq.n	b9778 <_strtod_l+0x250>
   b9708:	9005      	str	r0, [sp, #20]
   b970a:	463d      	mov	r5, r7
   b970c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9710:	2b09      	cmp	r3, #9
   b9712:	d912      	bls.n	b973a <_strtod_l+0x212>
   b9714:	2301      	movs	r3, #1
   b9716:	e7c2      	b.n	b969e <_strtod_l+0x176>
   b9718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b971a:	1c5a      	adds	r2, r3, #1
   b971c:	9217      	str	r2, [sp, #92]	; 0x5c
   b971e:	785a      	ldrb	r2, [r3, #1]
   b9720:	3001      	adds	r0, #1
   b9722:	2a30      	cmp	r2, #48	; 0x30
   b9724:	d0f8      	beq.n	b9718 <_strtod_l+0x1f0>
   b9726:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b972a:	2b08      	cmp	r3, #8
   b972c:	f200 84d9 	bhi.w	ba0e2 <_strtod_l+0xbba>
   b9730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9732:	9005      	str	r0, [sp, #20]
   b9734:	2000      	movs	r0, #0
   b9736:	9308      	str	r3, [sp, #32]
   b9738:	4605      	mov	r5, r0
   b973a:	3a30      	subs	r2, #48	; 0x30
   b973c:	f100 0301 	add.w	r3, r0, #1
   b9740:	d014      	beq.n	b976c <_strtod_l+0x244>
   b9742:	9905      	ldr	r1, [sp, #20]
   b9744:	4419      	add	r1, r3
   b9746:	9105      	str	r1, [sp, #20]
   b9748:	462b      	mov	r3, r5
   b974a:	eb00 0e05 	add.w	lr, r0, r5
   b974e:	210a      	movs	r1, #10
   b9750:	4573      	cmp	r3, lr
   b9752:	d113      	bne.n	b977c <_strtod_l+0x254>
   b9754:	182b      	adds	r3, r5, r0
   b9756:	2b08      	cmp	r3, #8
   b9758:	f105 0501 	add.w	r5, r5, #1
   b975c:	4405      	add	r5, r0
   b975e:	dc1c      	bgt.n	b979a <_strtod_l+0x272>
   b9760:	9907      	ldr	r1, [sp, #28]
   b9762:	230a      	movs	r3, #10
   b9764:	fb03 2301 	mla	r3, r3, r1, r2
   b9768:	9307      	str	r3, [sp, #28]
   b976a:	2300      	movs	r3, #0
   b976c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b976e:	1c51      	adds	r1, r2, #1
   b9770:	9117      	str	r1, [sp, #92]	; 0x5c
   b9772:	7852      	ldrb	r2, [r2, #1]
   b9774:	4618      	mov	r0, r3
   b9776:	e7c9      	b.n	b970c <_strtod_l+0x1e4>
   b9778:	4638      	mov	r0, r7
   b977a:	e7d2      	b.n	b9722 <_strtod_l+0x1fa>
   b977c:	2b08      	cmp	r3, #8
   b977e:	dc04      	bgt.n	b978a <_strtod_l+0x262>
   b9780:	9e07      	ldr	r6, [sp, #28]
   b9782:	434e      	muls	r6, r1
   b9784:	9607      	str	r6, [sp, #28]
   b9786:	3301      	adds	r3, #1
   b9788:	e7e2      	b.n	b9750 <_strtod_l+0x228>
   b978a:	f103 0c01 	add.w	ip, r3, #1
   b978e:	f1bc 0f10 	cmp.w	ip, #16
   b9792:	bfd8      	it	le
   b9794:	fb01 f909 	mulle.w	r9, r1, r9
   b9798:	e7f5      	b.n	b9786 <_strtod_l+0x25e>
   b979a:	2d10      	cmp	r5, #16
   b979c:	bfdc      	itt	le
   b979e:	230a      	movle	r3, #10
   b97a0:	fb03 2909 	mlale	r9, r3, r9, r2
   b97a4:	e7e1      	b.n	b976a <_strtod_l+0x242>
   b97a6:	2300      	movs	r3, #0
   b97a8:	9305      	str	r3, [sp, #20]
   b97aa:	2301      	movs	r3, #1
   b97ac:	e77c      	b.n	b96a8 <_strtod_l+0x180>
   b97ae:	f04f 0c00 	mov.w	ip, #0
   b97b2:	f108 0202 	add.w	r2, r8, #2
   b97b6:	9217      	str	r2, [sp, #92]	; 0x5c
   b97b8:	f898 2002 	ldrb.w	r2, [r8, #2]
   b97bc:	e785      	b.n	b96ca <_strtod_l+0x1a2>
   b97be:	f04f 0c01 	mov.w	ip, #1
   b97c2:	e7f6      	b.n	b97b2 <_strtod_l+0x28a>
   b97c4:	000bc080 	.word	0x000bc080
   b97c8:	000bbe98 	.word	0x000bbe98
   b97cc:	7ff00000 	.word	0x7ff00000
   b97d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b97d2:	1c51      	adds	r1, r2, #1
   b97d4:	9117      	str	r1, [sp, #92]	; 0x5c
   b97d6:	7852      	ldrb	r2, [r2, #1]
   b97d8:	2a30      	cmp	r2, #48	; 0x30
   b97da:	d0f9      	beq.n	b97d0 <_strtod_l+0x2a8>
   b97dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b97e0:	2908      	cmp	r1, #8
   b97e2:	f63f af79 	bhi.w	b96d8 <_strtod_l+0x1b0>
   b97e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b97ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b97ec:	9206      	str	r2, [sp, #24]
   b97ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b97f0:	1c51      	adds	r1, r2, #1
   b97f2:	9117      	str	r1, [sp, #92]	; 0x5c
   b97f4:	7852      	ldrb	r2, [r2, #1]
   b97f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b97fa:	2e09      	cmp	r6, #9
   b97fc:	d937      	bls.n	b986e <_strtod_l+0x346>
   b97fe:	9e06      	ldr	r6, [sp, #24]
   b9800:	1b89      	subs	r1, r1, r6
   b9802:	2908      	cmp	r1, #8
   b9804:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9808:	dc02      	bgt.n	b9810 <_strtod_l+0x2e8>
   b980a:	4576      	cmp	r6, lr
   b980c:	bfa8      	it	ge
   b980e:	4676      	movge	r6, lr
   b9810:	f1bc 0f00 	cmp.w	ip, #0
   b9814:	d000      	beq.n	b9818 <_strtod_l+0x2f0>
   b9816:	4276      	negs	r6, r6
   b9818:	2d00      	cmp	r5, #0
   b981a:	d14d      	bne.n	b98b8 <_strtod_l+0x390>
   b981c:	9904      	ldr	r1, [sp, #16]
   b981e:	4301      	orrs	r1, r0
   b9820:	f47f aec6 	bne.w	b95b0 <_strtod_l+0x88>
   b9824:	2b00      	cmp	r3, #0
   b9826:	f47f aee1 	bne.w	b95ec <_strtod_l+0xc4>
   b982a:	2a69      	cmp	r2, #105	; 0x69
   b982c:	d027      	beq.n	b987e <_strtod_l+0x356>
   b982e:	dc24      	bgt.n	b987a <_strtod_l+0x352>
   b9830:	2a49      	cmp	r2, #73	; 0x49
   b9832:	d024      	beq.n	b987e <_strtod_l+0x356>
   b9834:	2a4e      	cmp	r2, #78	; 0x4e
   b9836:	f47f aed9 	bne.w	b95ec <_strtod_l+0xc4>
   b983a:	499f      	ldr	r1, [pc, #636]	; (b9ab8 <_strtod_l+0x590>)
   b983c:	a817      	add	r0, sp, #92	; 0x5c
   b983e:	f001 f883 	bl	ba948 <__match>
   b9842:	2800      	cmp	r0, #0
   b9844:	f43f aed2 	beq.w	b95ec <_strtod_l+0xc4>
   b9848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b984a:	781b      	ldrb	r3, [r3, #0]
   b984c:	2b28      	cmp	r3, #40	; 0x28
   b984e:	d12d      	bne.n	b98ac <_strtod_l+0x384>
   b9850:	499a      	ldr	r1, [pc, #616]	; (b9abc <_strtod_l+0x594>)
   b9852:	aa1a      	add	r2, sp, #104	; 0x68
   b9854:	a817      	add	r0, sp, #92	; 0x5c
   b9856:	f001 f88b 	bl	ba970 <__hexnan>
   b985a:	2805      	cmp	r0, #5
   b985c:	d126      	bne.n	b98ac <_strtod_l+0x384>
   b985e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9860:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b9864:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9868:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b986c:	e6a0      	b.n	b95b0 <_strtod_l+0x88>
   b986e:	210a      	movs	r1, #10
   b9870:	fb01 2e0e 	mla	lr, r1, lr, r2
   b9874:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9878:	e7b9      	b.n	b97ee <_strtod_l+0x2c6>
   b987a:	2a6e      	cmp	r2, #110	; 0x6e
   b987c:	e7db      	b.n	b9836 <_strtod_l+0x30e>
   b987e:	4990      	ldr	r1, [pc, #576]	; (b9ac0 <_strtod_l+0x598>)
   b9880:	a817      	add	r0, sp, #92	; 0x5c
   b9882:	f001 f861 	bl	ba948 <__match>
   b9886:	2800      	cmp	r0, #0
   b9888:	f43f aeb0 	beq.w	b95ec <_strtod_l+0xc4>
   b988c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b988e:	498d      	ldr	r1, [pc, #564]	; (b9ac4 <_strtod_l+0x59c>)
   b9890:	3b01      	subs	r3, #1
   b9892:	a817      	add	r0, sp, #92	; 0x5c
   b9894:	9317      	str	r3, [sp, #92]	; 0x5c
   b9896:	f001 f857 	bl	ba948 <__match>
   b989a:	b910      	cbnz	r0, b98a2 <_strtod_l+0x37a>
   b989c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b989e:	3301      	adds	r3, #1
   b98a0:	9317      	str	r3, [sp, #92]	; 0x5c
   b98a2:	f8df b230 	ldr.w	fp, [pc, #560]	; b9ad4 <_strtod_l+0x5ac>
   b98a6:	f04f 0a00 	mov.w	sl, #0
   b98aa:	e681      	b.n	b95b0 <_strtod_l+0x88>
   b98ac:	4886      	ldr	r0, [pc, #536]	; (b9ac8 <_strtod_l+0x5a0>)
   b98ae:	f001 fde3 	bl	bb478 <nan>
   b98b2:	ec5b ab10 	vmov	sl, fp, d0
   b98b6:	e67b      	b.n	b95b0 <_strtod_l+0x88>
   b98b8:	9b05      	ldr	r3, [sp, #20]
   b98ba:	9807      	ldr	r0, [sp, #28]
   b98bc:	1af3      	subs	r3, r6, r3
   b98be:	2f00      	cmp	r7, #0
   b98c0:	bf08      	it	eq
   b98c2:	462f      	moveq	r7, r5
   b98c4:	2d10      	cmp	r5, #16
   b98c6:	9306      	str	r3, [sp, #24]
   b98c8:	46a8      	mov	r8, r5
   b98ca:	bfa8      	it	ge
   b98cc:	f04f 0810 	movge.w	r8, #16
   b98d0:	f7fa fce8 	bl	b42a4 <__aeabi_ui2d>
   b98d4:	2d09      	cmp	r5, #9
   b98d6:	4682      	mov	sl, r0
   b98d8:	468b      	mov	fp, r1
   b98da:	dd13      	ble.n	b9904 <_strtod_l+0x3dc>
   b98dc:	4b7b      	ldr	r3, [pc, #492]	; (b9acc <_strtod_l+0x5a4>)
   b98de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b98e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b98e6:	f7fa fd57 	bl	b4398 <__aeabi_dmul>
   b98ea:	4682      	mov	sl, r0
   b98ec:	4648      	mov	r0, r9
   b98ee:	468b      	mov	fp, r1
   b98f0:	f7fa fcd8 	bl	b42a4 <__aeabi_ui2d>
   b98f4:	4602      	mov	r2, r0
   b98f6:	460b      	mov	r3, r1
   b98f8:	4650      	mov	r0, sl
   b98fa:	4659      	mov	r1, fp
   b98fc:	f7fa fb96 	bl	b402c <__adddf3>
   b9900:	4682      	mov	sl, r0
   b9902:	468b      	mov	fp, r1
   b9904:	2d0f      	cmp	r5, #15
   b9906:	dc38      	bgt.n	b997a <_strtod_l+0x452>
   b9908:	9b06      	ldr	r3, [sp, #24]
   b990a:	2b00      	cmp	r3, #0
   b990c:	f43f ae50 	beq.w	b95b0 <_strtod_l+0x88>
   b9910:	dd24      	ble.n	b995c <_strtod_l+0x434>
   b9912:	2b16      	cmp	r3, #22
   b9914:	dc0b      	bgt.n	b992e <_strtod_l+0x406>
   b9916:	496d      	ldr	r1, [pc, #436]	; (b9acc <_strtod_l+0x5a4>)
   b9918:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b991c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9920:	4652      	mov	r2, sl
   b9922:	465b      	mov	r3, fp
   b9924:	f7fa fd38 	bl	b4398 <__aeabi_dmul>
   b9928:	4682      	mov	sl, r0
   b992a:	468b      	mov	fp, r1
   b992c:	e640      	b.n	b95b0 <_strtod_l+0x88>
   b992e:	9a06      	ldr	r2, [sp, #24]
   b9930:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9934:	4293      	cmp	r3, r2
   b9936:	db20      	blt.n	b997a <_strtod_l+0x452>
   b9938:	4c64      	ldr	r4, [pc, #400]	; (b9acc <_strtod_l+0x5a4>)
   b993a:	f1c5 050f 	rsb	r5, r5, #15
   b993e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9942:	4652      	mov	r2, sl
   b9944:	465b      	mov	r3, fp
   b9946:	e9d1 0100 	ldrd	r0, r1, [r1]
   b994a:	f7fa fd25 	bl	b4398 <__aeabi_dmul>
   b994e:	9b06      	ldr	r3, [sp, #24]
   b9950:	1b5d      	subs	r5, r3, r5
   b9952:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9956:	e9d4 2300 	ldrd	r2, r3, [r4]
   b995a:	e7e3      	b.n	b9924 <_strtod_l+0x3fc>
   b995c:	9b06      	ldr	r3, [sp, #24]
   b995e:	3316      	adds	r3, #22
   b9960:	db0b      	blt.n	b997a <_strtod_l+0x452>
   b9962:	9b05      	ldr	r3, [sp, #20]
   b9964:	1b9e      	subs	r6, r3, r6
   b9966:	4b59      	ldr	r3, [pc, #356]	; (b9acc <_strtod_l+0x5a4>)
   b9968:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b996c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9970:	4650      	mov	r0, sl
   b9972:	4659      	mov	r1, fp
   b9974:	f7fa fe3a 	bl	b45ec <__aeabi_ddiv>
   b9978:	e7d6      	b.n	b9928 <_strtod_l+0x400>
   b997a:	9b06      	ldr	r3, [sp, #24]
   b997c:	eba5 0808 	sub.w	r8, r5, r8
   b9980:	4498      	add	r8, r3
   b9982:	f1b8 0f00 	cmp.w	r8, #0
   b9986:	dd74      	ble.n	b9a72 <_strtod_l+0x54a>
   b9988:	f018 030f 	ands.w	r3, r8, #15
   b998c:	d00a      	beq.n	b99a4 <_strtod_l+0x47c>
   b998e:	494f      	ldr	r1, [pc, #316]	; (b9acc <_strtod_l+0x5a4>)
   b9990:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9994:	4652      	mov	r2, sl
   b9996:	465b      	mov	r3, fp
   b9998:	e9d1 0100 	ldrd	r0, r1, [r1]
   b999c:	f7fa fcfc 	bl	b4398 <__aeabi_dmul>
   b99a0:	4682      	mov	sl, r0
   b99a2:	468b      	mov	fp, r1
   b99a4:	f038 080f 	bics.w	r8, r8, #15
   b99a8:	d04f      	beq.n	b9a4a <_strtod_l+0x522>
   b99aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b99ae:	dd22      	ble.n	b99f6 <_strtod_l+0x4ce>
   b99b0:	2500      	movs	r5, #0
   b99b2:	462e      	mov	r6, r5
   b99b4:	9507      	str	r5, [sp, #28]
   b99b6:	9505      	str	r5, [sp, #20]
   b99b8:	2322      	movs	r3, #34	; 0x22
   b99ba:	f8df b118 	ldr.w	fp, [pc, #280]	; b9ad4 <_strtod_l+0x5ac>
   b99be:	6023      	str	r3, [r4, #0]
   b99c0:	f04f 0a00 	mov.w	sl, #0
   b99c4:	9b07      	ldr	r3, [sp, #28]
   b99c6:	2b00      	cmp	r3, #0
   b99c8:	f43f adf2 	beq.w	b95b0 <_strtod_l+0x88>
   b99cc:	9918      	ldr	r1, [sp, #96]	; 0x60
   b99ce:	4620      	mov	r0, r4
   b99d0:	f001 f8c0 	bl	bab54 <_Bfree>
   b99d4:	9905      	ldr	r1, [sp, #20]
   b99d6:	4620      	mov	r0, r4
   b99d8:	f001 f8bc 	bl	bab54 <_Bfree>
   b99dc:	4631      	mov	r1, r6
   b99de:	4620      	mov	r0, r4
   b99e0:	f001 f8b8 	bl	bab54 <_Bfree>
   b99e4:	9907      	ldr	r1, [sp, #28]
   b99e6:	4620      	mov	r0, r4
   b99e8:	f001 f8b4 	bl	bab54 <_Bfree>
   b99ec:	4629      	mov	r1, r5
   b99ee:	4620      	mov	r0, r4
   b99f0:	f001 f8b0 	bl	bab54 <_Bfree>
   b99f4:	e5dc      	b.n	b95b0 <_strtod_l+0x88>
   b99f6:	4b36      	ldr	r3, [pc, #216]	; (b9ad0 <_strtod_l+0x5a8>)
   b99f8:	9304      	str	r3, [sp, #16]
   b99fa:	2300      	movs	r3, #0
   b99fc:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9a00:	4650      	mov	r0, sl
   b9a02:	4659      	mov	r1, fp
   b9a04:	4699      	mov	r9, r3
   b9a06:	f1b8 0f01 	cmp.w	r8, #1
   b9a0a:	dc21      	bgt.n	b9a50 <_strtod_l+0x528>
   b9a0c:	b10b      	cbz	r3, b9a12 <_strtod_l+0x4ea>
   b9a0e:	4682      	mov	sl, r0
   b9a10:	468b      	mov	fp, r1
   b9a12:	4b2f      	ldr	r3, [pc, #188]	; (b9ad0 <_strtod_l+0x5a8>)
   b9a14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9a18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9a1c:	4652      	mov	r2, sl
   b9a1e:	465b      	mov	r3, fp
   b9a20:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9a24:	f7fa fcb8 	bl	b4398 <__aeabi_dmul>
   b9a28:	4b2a      	ldr	r3, [pc, #168]	; (b9ad4 <_strtod_l+0x5ac>)
   b9a2a:	460a      	mov	r2, r1
   b9a2c:	400b      	ands	r3, r1
   b9a2e:	492a      	ldr	r1, [pc, #168]	; (b9ad8 <_strtod_l+0x5b0>)
   b9a30:	428b      	cmp	r3, r1
   b9a32:	4682      	mov	sl, r0
   b9a34:	d8bc      	bhi.n	b99b0 <_strtod_l+0x488>
   b9a36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9a3a:	428b      	cmp	r3, r1
   b9a3c:	bf86      	itte	hi
   b9a3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9adc <_strtod_l+0x5b4>
   b9a42:	f04f 3aff 	movhi.w	sl, #4294967295
   b9a46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9a4a:	2300      	movs	r3, #0
   b9a4c:	9304      	str	r3, [sp, #16]
   b9a4e:	e084      	b.n	b9b5a <_strtod_l+0x632>
   b9a50:	f018 0f01 	tst.w	r8, #1
   b9a54:	d005      	beq.n	b9a62 <_strtod_l+0x53a>
   b9a56:	9b04      	ldr	r3, [sp, #16]
   b9a58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a5c:	f7fa fc9c 	bl	b4398 <__aeabi_dmul>
   b9a60:	2301      	movs	r3, #1
   b9a62:	9a04      	ldr	r2, [sp, #16]
   b9a64:	3208      	adds	r2, #8
   b9a66:	f109 0901 	add.w	r9, r9, #1
   b9a6a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9a6e:	9204      	str	r2, [sp, #16]
   b9a70:	e7c9      	b.n	b9a06 <_strtod_l+0x4de>
   b9a72:	d0ea      	beq.n	b9a4a <_strtod_l+0x522>
   b9a74:	f1c8 0800 	rsb	r8, r8, #0
   b9a78:	f018 020f 	ands.w	r2, r8, #15
   b9a7c:	d00a      	beq.n	b9a94 <_strtod_l+0x56c>
   b9a7e:	4b13      	ldr	r3, [pc, #76]	; (b9acc <_strtod_l+0x5a4>)
   b9a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9a84:	4650      	mov	r0, sl
   b9a86:	4659      	mov	r1, fp
   b9a88:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a8c:	f7fa fdae 	bl	b45ec <__aeabi_ddiv>
   b9a90:	4682      	mov	sl, r0
   b9a92:	468b      	mov	fp, r1
   b9a94:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9a98:	d0d7      	beq.n	b9a4a <_strtod_l+0x522>
   b9a9a:	f1b8 0f1f 	cmp.w	r8, #31
   b9a9e:	dd1f      	ble.n	b9ae0 <_strtod_l+0x5b8>
   b9aa0:	2500      	movs	r5, #0
   b9aa2:	462e      	mov	r6, r5
   b9aa4:	9507      	str	r5, [sp, #28]
   b9aa6:	9505      	str	r5, [sp, #20]
   b9aa8:	2322      	movs	r3, #34	; 0x22
   b9aaa:	f04f 0a00 	mov.w	sl, #0
   b9aae:	f04f 0b00 	mov.w	fp, #0
   b9ab2:	6023      	str	r3, [r4, #0]
   b9ab4:	e786      	b.n	b99c4 <_strtod_l+0x49c>
   b9ab6:	bf00      	nop
   b9ab8:	000bbe93 	.word	0x000bbe93
   b9abc:	000bbeac 	.word	0x000bbeac
   b9ac0:	000bbe8a 	.word	0x000bbe8a
   b9ac4:	000bbe8d 	.word	0x000bbe8d
   b9ac8:	000bbdbc 	.word	0x000bbdbc
   b9acc:	000bc140 	.word	0x000bc140
   b9ad0:	000bc118 	.word	0x000bc118
   b9ad4:	7ff00000 	.word	0x7ff00000
   b9ad8:	7ca00000 	.word	0x7ca00000
   b9adc:	7fefffff 	.word	0x7fefffff
   b9ae0:	f018 0310 	ands.w	r3, r8, #16
   b9ae4:	bf18      	it	ne
   b9ae6:	236a      	movne	r3, #106	; 0x6a
   b9ae8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9e98 <_strtod_l+0x970>
   b9aec:	9304      	str	r3, [sp, #16]
   b9aee:	4650      	mov	r0, sl
   b9af0:	4659      	mov	r1, fp
   b9af2:	2300      	movs	r3, #0
   b9af4:	f018 0f01 	tst.w	r8, #1
   b9af8:	d004      	beq.n	b9b04 <_strtod_l+0x5dc>
   b9afa:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9afe:	f7fa fc4b 	bl	b4398 <__aeabi_dmul>
   b9b02:	2301      	movs	r3, #1
   b9b04:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9b08:	f109 0908 	add.w	r9, r9, #8
   b9b0c:	d1f2      	bne.n	b9af4 <_strtod_l+0x5cc>
   b9b0e:	b10b      	cbz	r3, b9b14 <_strtod_l+0x5ec>
   b9b10:	4682      	mov	sl, r0
   b9b12:	468b      	mov	fp, r1
   b9b14:	9b04      	ldr	r3, [sp, #16]
   b9b16:	b1c3      	cbz	r3, b9b4a <_strtod_l+0x622>
   b9b18:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9b1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9b20:	2b00      	cmp	r3, #0
   b9b22:	4659      	mov	r1, fp
   b9b24:	dd11      	ble.n	b9b4a <_strtod_l+0x622>
   b9b26:	2b1f      	cmp	r3, #31
   b9b28:	f340 8124 	ble.w	b9d74 <_strtod_l+0x84c>
   b9b2c:	2b34      	cmp	r3, #52	; 0x34
   b9b2e:	bfde      	ittt	le
   b9b30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9b34:	f04f 33ff 	movle.w	r3, #4294967295
   b9b38:	fa03 f202 	lslle.w	r2, r3, r2
   b9b3c:	f04f 0a00 	mov.w	sl, #0
   b9b40:	bfcc      	ite	gt
   b9b42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9b46:	ea02 0b01 	andle.w	fp, r2, r1
   b9b4a:	2200      	movs	r2, #0
   b9b4c:	2300      	movs	r3, #0
   b9b4e:	4650      	mov	r0, sl
   b9b50:	4659      	mov	r1, fp
   b9b52:	f7fa fe89 	bl	b4868 <__aeabi_dcmpeq>
   b9b56:	2800      	cmp	r0, #0
   b9b58:	d1a2      	bne.n	b9aa0 <_strtod_l+0x578>
   b9b5a:	9b07      	ldr	r3, [sp, #28]
   b9b5c:	9300      	str	r3, [sp, #0]
   b9b5e:	9908      	ldr	r1, [sp, #32]
   b9b60:	462b      	mov	r3, r5
   b9b62:	463a      	mov	r2, r7
   b9b64:	4620      	mov	r0, r4
   b9b66:	f001 f85d 	bl	bac24 <__s2b>
   b9b6a:	9007      	str	r0, [sp, #28]
   b9b6c:	2800      	cmp	r0, #0
   b9b6e:	f43f af1f 	beq.w	b99b0 <_strtod_l+0x488>
   b9b72:	9b05      	ldr	r3, [sp, #20]
   b9b74:	1b9e      	subs	r6, r3, r6
   b9b76:	9b06      	ldr	r3, [sp, #24]
   b9b78:	2b00      	cmp	r3, #0
   b9b7a:	bfb4      	ite	lt
   b9b7c:	4633      	movlt	r3, r6
   b9b7e:	2300      	movge	r3, #0
   b9b80:	930c      	str	r3, [sp, #48]	; 0x30
   b9b82:	9b06      	ldr	r3, [sp, #24]
   b9b84:	2500      	movs	r5, #0
   b9b86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9b8a:	9312      	str	r3, [sp, #72]	; 0x48
   b9b8c:	462e      	mov	r6, r5
   b9b8e:	9b07      	ldr	r3, [sp, #28]
   b9b90:	4620      	mov	r0, r4
   b9b92:	6859      	ldr	r1, [r3, #4]
   b9b94:	f000 ff9e 	bl	baad4 <_Balloc>
   b9b98:	9005      	str	r0, [sp, #20]
   b9b9a:	2800      	cmp	r0, #0
   b9b9c:	f43f af0c 	beq.w	b99b8 <_strtod_l+0x490>
   b9ba0:	9b07      	ldr	r3, [sp, #28]
   b9ba2:	691a      	ldr	r2, [r3, #16]
   b9ba4:	3202      	adds	r2, #2
   b9ba6:	f103 010c 	add.w	r1, r3, #12
   b9baa:	0092      	lsls	r2, r2, #2
   b9bac:	300c      	adds	r0, #12
   b9bae:	f7ff fbf9 	bl	b93a4 <memcpy>
   b9bb2:	ec4b ab10 	vmov	d0, sl, fp
   b9bb6:	aa1a      	add	r2, sp, #104	; 0x68
   b9bb8:	a919      	add	r1, sp, #100	; 0x64
   b9bba:	4620      	mov	r0, r4
   b9bbc:	f001 fb78 	bl	bb2b0 <__d2b>
   b9bc0:	ec4b ab18 	vmov	d8, sl, fp
   b9bc4:	9018      	str	r0, [sp, #96]	; 0x60
   b9bc6:	2800      	cmp	r0, #0
   b9bc8:	f43f aef6 	beq.w	b99b8 <_strtod_l+0x490>
   b9bcc:	2101      	movs	r1, #1
   b9bce:	4620      	mov	r0, r4
   b9bd0:	f001 f8c2 	bl	bad58 <__i2b>
   b9bd4:	4606      	mov	r6, r0
   b9bd6:	2800      	cmp	r0, #0
   b9bd8:	f43f aeee 	beq.w	b99b8 <_strtod_l+0x490>
   b9bdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9bde:	9904      	ldr	r1, [sp, #16]
   b9be0:	2b00      	cmp	r3, #0
   b9be2:	bfab      	itete	ge
   b9be4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9be6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9be8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9bea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9bee:	bfac      	ite	ge
   b9bf0:	eb03 0902 	addge.w	r9, r3, r2
   b9bf4:	1ad7      	sublt	r7, r2, r3
   b9bf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9bf8:	eba3 0801 	sub.w	r8, r3, r1
   b9bfc:	4490      	add	r8, r2
   b9bfe:	4ba1      	ldr	r3, [pc, #644]	; (b9e84 <_strtod_l+0x95c>)
   b9c00:	f108 38ff 	add.w	r8, r8, #4294967295
   b9c04:	4598      	cmp	r8, r3
   b9c06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9c0a:	f280 80c7 	bge.w	b9d9c <_strtod_l+0x874>
   b9c0e:	eba3 0308 	sub.w	r3, r3, r8
   b9c12:	2b1f      	cmp	r3, #31
   b9c14:	eba2 0203 	sub.w	r2, r2, r3
   b9c18:	f04f 0101 	mov.w	r1, #1
   b9c1c:	f300 80b1 	bgt.w	b9d82 <_strtod_l+0x85a>
   b9c20:	fa01 f303 	lsl.w	r3, r1, r3
   b9c24:	930d      	str	r3, [sp, #52]	; 0x34
   b9c26:	2300      	movs	r3, #0
   b9c28:	9308      	str	r3, [sp, #32]
   b9c2a:	eb09 0802 	add.w	r8, r9, r2
   b9c2e:	9b04      	ldr	r3, [sp, #16]
   b9c30:	45c1      	cmp	r9, r8
   b9c32:	4417      	add	r7, r2
   b9c34:	441f      	add	r7, r3
   b9c36:	464b      	mov	r3, r9
   b9c38:	bfa8      	it	ge
   b9c3a:	4643      	movge	r3, r8
   b9c3c:	42bb      	cmp	r3, r7
   b9c3e:	bfa8      	it	ge
   b9c40:	463b      	movge	r3, r7
   b9c42:	2b00      	cmp	r3, #0
   b9c44:	bfc2      	ittt	gt
   b9c46:	eba8 0803 	subgt.w	r8, r8, r3
   b9c4a:	1aff      	subgt	r7, r7, r3
   b9c4c:	eba9 0903 	subgt.w	r9, r9, r3
   b9c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9c52:	2b00      	cmp	r3, #0
   b9c54:	dd17      	ble.n	b9c86 <_strtod_l+0x75e>
   b9c56:	4631      	mov	r1, r6
   b9c58:	461a      	mov	r2, r3
   b9c5a:	4620      	mov	r0, r4
   b9c5c:	f001 f93c 	bl	baed8 <__pow5mult>
   b9c60:	4606      	mov	r6, r0
   b9c62:	2800      	cmp	r0, #0
   b9c64:	f43f aea8 	beq.w	b99b8 <_strtod_l+0x490>
   b9c68:	4601      	mov	r1, r0
   b9c6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9c6c:	4620      	mov	r0, r4
   b9c6e:	f001 f889 	bl	bad84 <__multiply>
   b9c72:	900b      	str	r0, [sp, #44]	; 0x2c
   b9c74:	2800      	cmp	r0, #0
   b9c76:	f43f ae9f 	beq.w	b99b8 <_strtod_l+0x490>
   b9c7a:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9c7c:	4620      	mov	r0, r4
   b9c7e:	f000 ff69 	bl	bab54 <_Bfree>
   b9c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9c84:	9318      	str	r3, [sp, #96]	; 0x60
   b9c86:	f1b8 0f00 	cmp.w	r8, #0
   b9c8a:	f300 808c 	bgt.w	b9da6 <_strtod_l+0x87e>
   b9c8e:	9b06      	ldr	r3, [sp, #24]
   b9c90:	2b00      	cmp	r3, #0
   b9c92:	dd08      	ble.n	b9ca6 <_strtod_l+0x77e>
   b9c94:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9c96:	9905      	ldr	r1, [sp, #20]
   b9c98:	4620      	mov	r0, r4
   b9c9a:	f001 f91d 	bl	baed8 <__pow5mult>
   b9c9e:	9005      	str	r0, [sp, #20]
   b9ca0:	2800      	cmp	r0, #0
   b9ca2:	f43f ae89 	beq.w	b99b8 <_strtod_l+0x490>
   b9ca6:	2f00      	cmp	r7, #0
   b9ca8:	dd08      	ble.n	b9cbc <_strtod_l+0x794>
   b9caa:	9905      	ldr	r1, [sp, #20]
   b9cac:	463a      	mov	r2, r7
   b9cae:	4620      	mov	r0, r4
   b9cb0:	f001 f96c 	bl	baf8c <__lshift>
   b9cb4:	9005      	str	r0, [sp, #20]
   b9cb6:	2800      	cmp	r0, #0
   b9cb8:	f43f ae7e 	beq.w	b99b8 <_strtod_l+0x490>
   b9cbc:	f1b9 0f00 	cmp.w	r9, #0
   b9cc0:	dd08      	ble.n	b9cd4 <_strtod_l+0x7ac>
   b9cc2:	4631      	mov	r1, r6
   b9cc4:	464a      	mov	r2, r9
   b9cc6:	4620      	mov	r0, r4
   b9cc8:	f001 f960 	bl	baf8c <__lshift>
   b9ccc:	4606      	mov	r6, r0
   b9cce:	2800      	cmp	r0, #0
   b9cd0:	f43f ae72 	beq.w	b99b8 <_strtod_l+0x490>
   b9cd4:	9a05      	ldr	r2, [sp, #20]
   b9cd6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9cd8:	4620      	mov	r0, r4
   b9cda:	f001 f9e3 	bl	bb0a4 <__mdiff>
   b9cde:	4605      	mov	r5, r0
   b9ce0:	2800      	cmp	r0, #0
   b9ce2:	f43f ae69 	beq.w	b99b8 <_strtod_l+0x490>
   b9ce6:	68c3      	ldr	r3, [r0, #12]
   b9ce8:	930b      	str	r3, [sp, #44]	; 0x2c
   b9cea:	2300      	movs	r3, #0
   b9cec:	60c3      	str	r3, [r0, #12]
   b9cee:	4631      	mov	r1, r6
   b9cf0:	f001 f9bc 	bl	bb06c <__mcmp>
   b9cf4:	2800      	cmp	r0, #0
   b9cf6:	da60      	bge.n	b9dba <_strtod_l+0x892>
   b9cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9cfa:	ea53 030a 	orrs.w	r3, r3, sl
   b9cfe:	f040 8082 	bne.w	b9e06 <_strtod_l+0x8de>
   b9d02:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9d06:	2b00      	cmp	r3, #0
   b9d08:	d17d      	bne.n	b9e06 <_strtod_l+0x8de>
   b9d0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9d0e:	0d1b      	lsrs	r3, r3, #20
   b9d10:	051b      	lsls	r3, r3, #20
   b9d12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9d16:	d976      	bls.n	b9e06 <_strtod_l+0x8de>
   b9d18:	696b      	ldr	r3, [r5, #20]
   b9d1a:	b913      	cbnz	r3, b9d22 <_strtod_l+0x7fa>
   b9d1c:	692b      	ldr	r3, [r5, #16]
   b9d1e:	2b01      	cmp	r3, #1
   b9d20:	dd71      	ble.n	b9e06 <_strtod_l+0x8de>
   b9d22:	4629      	mov	r1, r5
   b9d24:	2201      	movs	r2, #1
   b9d26:	4620      	mov	r0, r4
   b9d28:	f001 f930 	bl	baf8c <__lshift>
   b9d2c:	4631      	mov	r1, r6
   b9d2e:	4605      	mov	r5, r0
   b9d30:	f001 f99c 	bl	bb06c <__mcmp>
   b9d34:	2800      	cmp	r0, #0
   b9d36:	dd66      	ble.n	b9e06 <_strtod_l+0x8de>
   b9d38:	9904      	ldr	r1, [sp, #16]
   b9d3a:	4a53      	ldr	r2, [pc, #332]	; (b9e88 <_strtod_l+0x960>)
   b9d3c:	465b      	mov	r3, fp
   b9d3e:	2900      	cmp	r1, #0
   b9d40:	f000 8081 	beq.w	b9e46 <_strtod_l+0x91e>
   b9d44:	ea02 010b 	and.w	r1, r2, fp
   b9d48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b9d4c:	dc7b      	bgt.n	b9e46 <_strtod_l+0x91e>
   b9d4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b9d52:	f77f aea9 	ble.w	b9aa8 <_strtod_l+0x580>
   b9d56:	4b4d      	ldr	r3, [pc, #308]	; (b9e8c <_strtod_l+0x964>)
   b9d58:	4650      	mov	r0, sl
   b9d5a:	4659      	mov	r1, fp
   b9d5c:	2200      	movs	r2, #0
   b9d5e:	f7fa fb1b 	bl	b4398 <__aeabi_dmul>
   b9d62:	460b      	mov	r3, r1
   b9d64:	4303      	orrs	r3, r0
   b9d66:	bf08      	it	eq
   b9d68:	2322      	moveq	r3, #34	; 0x22
   b9d6a:	4682      	mov	sl, r0
   b9d6c:	468b      	mov	fp, r1
   b9d6e:	bf08      	it	eq
   b9d70:	6023      	streq	r3, [r4, #0]
   b9d72:	e62b      	b.n	b99cc <_strtod_l+0x4a4>
   b9d74:	f04f 32ff 	mov.w	r2, #4294967295
   b9d78:	fa02 f303 	lsl.w	r3, r2, r3
   b9d7c:	ea03 0a0a 	and.w	sl, r3, sl
   b9d80:	e6e3      	b.n	b9b4a <_strtod_l+0x622>
   b9d82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b9d86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b9d8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b9d8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b9d92:	fa01 f308 	lsl.w	r3, r1, r8
   b9d96:	9308      	str	r3, [sp, #32]
   b9d98:	910d      	str	r1, [sp, #52]	; 0x34
   b9d9a:	e746      	b.n	b9c2a <_strtod_l+0x702>
   b9d9c:	2300      	movs	r3, #0
   b9d9e:	9308      	str	r3, [sp, #32]
   b9da0:	2301      	movs	r3, #1
   b9da2:	930d      	str	r3, [sp, #52]	; 0x34
   b9da4:	e741      	b.n	b9c2a <_strtod_l+0x702>
   b9da6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9da8:	4642      	mov	r2, r8
   b9daa:	4620      	mov	r0, r4
   b9dac:	f001 f8ee 	bl	baf8c <__lshift>
   b9db0:	9018      	str	r0, [sp, #96]	; 0x60
   b9db2:	2800      	cmp	r0, #0
   b9db4:	f47f af6b 	bne.w	b9c8e <_strtod_l+0x766>
   b9db8:	e5fe      	b.n	b99b8 <_strtod_l+0x490>
   b9dba:	465f      	mov	r7, fp
   b9dbc:	d16e      	bne.n	b9e9c <_strtod_l+0x974>
   b9dbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9dc4:	b342      	cbz	r2, b9e18 <_strtod_l+0x8f0>
   b9dc6:	4a32      	ldr	r2, [pc, #200]	; (b9e90 <_strtod_l+0x968>)
   b9dc8:	4293      	cmp	r3, r2
   b9dca:	d128      	bne.n	b9e1e <_strtod_l+0x8f6>
   b9dcc:	9b04      	ldr	r3, [sp, #16]
   b9dce:	4651      	mov	r1, sl
   b9dd0:	b1eb      	cbz	r3, b9e0e <_strtod_l+0x8e6>
   b9dd2:	4b2d      	ldr	r3, [pc, #180]	; (b9e88 <_strtod_l+0x960>)
   b9dd4:	403b      	ands	r3, r7
   b9dd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9dda:	f04f 32ff 	mov.w	r2, #4294967295
   b9dde:	d819      	bhi.n	b9e14 <_strtod_l+0x8ec>
   b9de0:	0d1b      	lsrs	r3, r3, #20
   b9de2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9de6:	fa02 f303 	lsl.w	r3, r2, r3
   b9dea:	4299      	cmp	r1, r3
   b9dec:	d117      	bne.n	b9e1e <_strtod_l+0x8f6>
   b9dee:	4b29      	ldr	r3, [pc, #164]	; (b9e94 <_strtod_l+0x96c>)
   b9df0:	429f      	cmp	r7, r3
   b9df2:	d102      	bne.n	b9dfa <_strtod_l+0x8d2>
   b9df4:	3101      	adds	r1, #1
   b9df6:	f43f addf 	beq.w	b99b8 <_strtod_l+0x490>
   b9dfa:	4b23      	ldr	r3, [pc, #140]	; (b9e88 <_strtod_l+0x960>)
   b9dfc:	403b      	ands	r3, r7
   b9dfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9e02:	f04f 0a00 	mov.w	sl, #0
   b9e06:	9b04      	ldr	r3, [sp, #16]
   b9e08:	2b00      	cmp	r3, #0
   b9e0a:	d1a4      	bne.n	b9d56 <_strtod_l+0x82e>
   b9e0c:	e5de      	b.n	b99cc <_strtod_l+0x4a4>
   b9e0e:	f04f 33ff 	mov.w	r3, #4294967295
   b9e12:	e7ea      	b.n	b9dea <_strtod_l+0x8c2>
   b9e14:	4613      	mov	r3, r2
   b9e16:	e7e8      	b.n	b9dea <_strtod_l+0x8c2>
   b9e18:	ea53 030a 	orrs.w	r3, r3, sl
   b9e1c:	d08c      	beq.n	b9d38 <_strtod_l+0x810>
   b9e1e:	9b08      	ldr	r3, [sp, #32]
   b9e20:	b1db      	cbz	r3, b9e5a <_strtod_l+0x932>
   b9e22:	423b      	tst	r3, r7
   b9e24:	d0ef      	beq.n	b9e06 <_strtod_l+0x8de>
   b9e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9e28:	9a04      	ldr	r2, [sp, #16]
   b9e2a:	4650      	mov	r0, sl
   b9e2c:	4659      	mov	r1, fp
   b9e2e:	b1c3      	cbz	r3, b9e62 <_strtod_l+0x93a>
   b9e30:	f7ff fb5b 	bl	b94ea <sulp>
   b9e34:	4602      	mov	r2, r0
   b9e36:	460b      	mov	r3, r1
   b9e38:	ec51 0b18 	vmov	r0, r1, d8
   b9e3c:	f7fa f8f6 	bl	b402c <__adddf3>
   b9e40:	4682      	mov	sl, r0
   b9e42:	468b      	mov	fp, r1
   b9e44:	e7df      	b.n	b9e06 <_strtod_l+0x8de>
   b9e46:	4013      	ands	r3, r2
   b9e48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9e4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9e50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9e54:	f04f 3aff 	mov.w	sl, #4294967295
   b9e58:	e7d5      	b.n	b9e06 <_strtod_l+0x8de>
   b9e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9e5c:	ea13 0f0a 	tst.w	r3, sl
   b9e60:	e7e0      	b.n	b9e24 <_strtod_l+0x8fc>
   b9e62:	f7ff fb42 	bl	b94ea <sulp>
   b9e66:	4602      	mov	r2, r0
   b9e68:	460b      	mov	r3, r1
   b9e6a:	ec51 0b18 	vmov	r0, r1, d8
   b9e6e:	f7fa f8db 	bl	b4028 <__aeabi_dsub>
   b9e72:	2200      	movs	r2, #0
   b9e74:	2300      	movs	r3, #0
   b9e76:	4682      	mov	sl, r0
   b9e78:	468b      	mov	fp, r1
   b9e7a:	f7fa fcf5 	bl	b4868 <__aeabi_dcmpeq>
   b9e7e:	2800      	cmp	r0, #0
   b9e80:	d0c1      	beq.n	b9e06 <_strtod_l+0x8de>
   b9e82:	e611      	b.n	b9aa8 <_strtod_l+0x580>
   b9e84:	fffffc02 	.word	0xfffffc02
   b9e88:	7ff00000 	.word	0x7ff00000
   b9e8c:	39500000 	.word	0x39500000
   b9e90:	000fffff 	.word	0x000fffff
   b9e94:	7fefffff 	.word	0x7fefffff
   b9e98:	000bbec0 	.word	0x000bbec0
   b9e9c:	4631      	mov	r1, r6
   b9e9e:	4628      	mov	r0, r5
   b9ea0:	f001 fa62 	bl	bb368 <__ratio>
   b9ea4:	ec59 8b10 	vmov	r8, r9, d0
   b9ea8:	ee10 0a10 	vmov	r0, s0
   b9eac:	2200      	movs	r2, #0
   b9eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9eb2:	4649      	mov	r1, r9
   b9eb4:	f7fa fcec 	bl	b4890 <__aeabi_dcmple>
   b9eb8:	2800      	cmp	r0, #0
   b9eba:	d07a      	beq.n	b9fb2 <_strtod_l+0xa8a>
   b9ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9ebe:	2b00      	cmp	r3, #0
   b9ec0:	d04a      	beq.n	b9f58 <_strtod_l+0xa30>
   b9ec2:	4b95      	ldr	r3, [pc, #596]	; (ba118 <_strtod_l+0xbf0>)
   b9ec4:	2200      	movs	r2, #0
   b9ec6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9eca:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba118 <_strtod_l+0xbf0>
   b9ece:	f04f 0800 	mov.w	r8, #0
   b9ed2:	4b92      	ldr	r3, [pc, #584]	; (ba11c <_strtod_l+0xbf4>)
   b9ed4:	403b      	ands	r3, r7
   b9ed6:	930d      	str	r3, [sp, #52]	; 0x34
   b9ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9eda:	4b91      	ldr	r3, [pc, #580]	; (ba120 <_strtod_l+0xbf8>)
   b9edc:	429a      	cmp	r2, r3
   b9ede:	f040 80b0 	bne.w	ba042 <_strtod_l+0xb1a>
   b9ee2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9ee6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9eea:	ec4b ab10 	vmov	d0, sl, fp
   b9eee:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9ef2:	f001 f961 	bl	bb1b8 <__ulp>
   b9ef6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9efa:	ec53 2b10 	vmov	r2, r3, d0
   b9efe:	f7fa fa4b 	bl	b4398 <__aeabi_dmul>
   b9f02:	4652      	mov	r2, sl
   b9f04:	465b      	mov	r3, fp
   b9f06:	f7fa f891 	bl	b402c <__adddf3>
   b9f0a:	460b      	mov	r3, r1
   b9f0c:	4983      	ldr	r1, [pc, #524]	; (ba11c <_strtod_l+0xbf4>)
   b9f0e:	4a85      	ldr	r2, [pc, #532]	; (ba124 <_strtod_l+0xbfc>)
   b9f10:	4019      	ands	r1, r3
   b9f12:	4291      	cmp	r1, r2
   b9f14:	4682      	mov	sl, r0
   b9f16:	d960      	bls.n	b9fda <_strtod_l+0xab2>
   b9f18:	ee18 3a90 	vmov	r3, s17
   b9f1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9f20:	4293      	cmp	r3, r2
   b9f22:	d104      	bne.n	b9f2e <_strtod_l+0xa06>
   b9f24:	ee18 3a10 	vmov	r3, s16
   b9f28:	3301      	adds	r3, #1
   b9f2a:	f43f ad45 	beq.w	b99b8 <_strtod_l+0x490>
   b9f2e:	f8df b200 	ldr.w	fp, [pc, #512]	; ba130 <_strtod_l+0xc08>
   b9f32:	f04f 3aff 	mov.w	sl, #4294967295
   b9f36:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9f38:	4620      	mov	r0, r4
   b9f3a:	f000 fe0b 	bl	bab54 <_Bfree>
   b9f3e:	9905      	ldr	r1, [sp, #20]
   b9f40:	4620      	mov	r0, r4
   b9f42:	f000 fe07 	bl	bab54 <_Bfree>
   b9f46:	4631      	mov	r1, r6
   b9f48:	4620      	mov	r0, r4
   b9f4a:	f000 fe03 	bl	bab54 <_Bfree>
   b9f4e:	4629      	mov	r1, r5
   b9f50:	4620      	mov	r0, r4
   b9f52:	f000 fdff 	bl	bab54 <_Bfree>
   b9f56:	e61a      	b.n	b9b8e <_strtod_l+0x666>
   b9f58:	f1ba 0f00 	cmp.w	sl, #0
   b9f5c:	d11b      	bne.n	b9f96 <_strtod_l+0xa6e>
   b9f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9f62:	b9f3      	cbnz	r3, b9fa2 <_strtod_l+0xa7a>
   b9f64:	4b6c      	ldr	r3, [pc, #432]	; (ba118 <_strtod_l+0xbf0>)
   b9f66:	2200      	movs	r2, #0
   b9f68:	4640      	mov	r0, r8
   b9f6a:	4649      	mov	r1, r9
   b9f6c:	f7fa fc86 	bl	b487c <__aeabi_dcmplt>
   b9f70:	b9d0      	cbnz	r0, b9fa8 <_strtod_l+0xa80>
   b9f72:	4640      	mov	r0, r8
   b9f74:	4649      	mov	r1, r9
   b9f76:	4b6c      	ldr	r3, [pc, #432]	; (ba128 <_strtod_l+0xc00>)
   b9f78:	2200      	movs	r2, #0
   b9f7a:	f7fa fa0d 	bl	b4398 <__aeabi_dmul>
   b9f7e:	4680      	mov	r8, r0
   b9f80:	4689      	mov	r9, r1
   b9f82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b9f86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b9f8a:	9315      	str	r3, [sp, #84]	; 0x54
   b9f8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9f90:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9f94:	e79d      	b.n	b9ed2 <_strtod_l+0x9aa>
   b9f96:	f1ba 0f01 	cmp.w	sl, #1
   b9f9a:	d102      	bne.n	b9fa2 <_strtod_l+0xa7a>
   b9f9c:	2f00      	cmp	r7, #0
   b9f9e:	f43f ad83 	beq.w	b9aa8 <_strtod_l+0x580>
   b9fa2:	4b62      	ldr	r3, [pc, #392]	; (ba12c <_strtod_l+0xc04>)
   b9fa4:	2200      	movs	r2, #0
   b9fa6:	e78e      	b.n	b9ec6 <_strtod_l+0x99e>
   b9fa8:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba128 <_strtod_l+0xc00>
   b9fac:	f04f 0800 	mov.w	r8, #0
   b9fb0:	e7e7      	b.n	b9f82 <_strtod_l+0xa5a>
   b9fb2:	4b5d      	ldr	r3, [pc, #372]	; (ba128 <_strtod_l+0xc00>)
   b9fb4:	4640      	mov	r0, r8
   b9fb6:	4649      	mov	r1, r9
   b9fb8:	2200      	movs	r2, #0
   b9fba:	f7fa f9ed 	bl	b4398 <__aeabi_dmul>
   b9fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9fc0:	4680      	mov	r8, r0
   b9fc2:	4689      	mov	r9, r1
   b9fc4:	b933      	cbnz	r3, b9fd4 <_strtod_l+0xaac>
   b9fc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9fca:	900e      	str	r0, [sp, #56]	; 0x38
   b9fcc:	930f      	str	r3, [sp, #60]	; 0x3c
   b9fce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9fd2:	e7dd      	b.n	b9f90 <_strtod_l+0xa68>
   b9fd4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9fd8:	e7f9      	b.n	b9fce <_strtod_l+0xaa6>
   b9fda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9fde:	9b04      	ldr	r3, [sp, #16]
   b9fe0:	2b00      	cmp	r3, #0
   b9fe2:	d1a8      	bne.n	b9f36 <_strtod_l+0xa0e>
   b9fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9fea:	0d1b      	lsrs	r3, r3, #20
   b9fec:	051b      	lsls	r3, r3, #20
   b9fee:	429a      	cmp	r2, r3
   b9ff0:	d1a1      	bne.n	b9f36 <_strtod_l+0xa0e>
   b9ff2:	4640      	mov	r0, r8
   b9ff4:	4649      	mov	r1, r9
   b9ff6:	f7fa fd75 	bl	b4ae4 <__aeabi_d2lz>
   b9ffa:	f7fa f99f 	bl	b433c <__aeabi_l2d>
   b9ffe:	4602      	mov	r2, r0
   ba000:	460b      	mov	r3, r1
   ba002:	4640      	mov	r0, r8
   ba004:	4649      	mov	r1, r9
   ba006:	f7fa f80f 	bl	b4028 <__aeabi_dsub>
   ba00a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba00c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba010:	ea43 030a 	orr.w	r3, r3, sl
   ba014:	4313      	orrs	r3, r2
   ba016:	4680      	mov	r8, r0
   ba018:	4689      	mov	r9, r1
   ba01a:	d055      	beq.n	ba0c8 <_strtod_l+0xba0>
   ba01c:	a336      	add	r3, pc, #216	; (adr r3, ba0f8 <_strtod_l+0xbd0>)
   ba01e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba022:	f7fa fc2b 	bl	b487c <__aeabi_dcmplt>
   ba026:	2800      	cmp	r0, #0
   ba028:	f47f acd0 	bne.w	b99cc <_strtod_l+0x4a4>
   ba02c:	a334      	add	r3, pc, #208	; (adr r3, ba100 <_strtod_l+0xbd8>)
   ba02e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba032:	4640      	mov	r0, r8
   ba034:	4649      	mov	r1, r9
   ba036:	f7fa fc3f 	bl	b48b8 <__aeabi_dcmpgt>
   ba03a:	2800      	cmp	r0, #0
   ba03c:	f43f af7b 	beq.w	b9f36 <_strtod_l+0xa0e>
   ba040:	e4c4      	b.n	b99cc <_strtod_l+0x4a4>
   ba042:	9b04      	ldr	r3, [sp, #16]
   ba044:	b333      	cbz	r3, ba094 <_strtod_l+0xb6c>
   ba046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba048:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba04c:	d822      	bhi.n	ba094 <_strtod_l+0xb6c>
   ba04e:	a32e      	add	r3, pc, #184	; (adr r3, ba108 <_strtod_l+0xbe0>)
   ba050:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba054:	4640      	mov	r0, r8
   ba056:	4649      	mov	r1, r9
   ba058:	f7fa fc1a 	bl	b4890 <__aeabi_dcmple>
   ba05c:	b1a0      	cbz	r0, ba088 <_strtod_l+0xb60>
   ba05e:	4649      	mov	r1, r9
   ba060:	4640      	mov	r0, r8
   ba062:	f7fa fc49 	bl	b48f8 <__aeabi_d2uiz>
   ba066:	2801      	cmp	r0, #1
   ba068:	bf38      	it	cc
   ba06a:	2001      	movcc	r0, #1
   ba06c:	f7fa f91a 	bl	b42a4 <__aeabi_ui2d>
   ba070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba072:	4680      	mov	r8, r0
   ba074:	4689      	mov	r9, r1
   ba076:	bb23      	cbnz	r3, ba0c2 <_strtod_l+0xb9a>
   ba078:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba07c:	9010      	str	r0, [sp, #64]	; 0x40
   ba07e:	9311      	str	r3, [sp, #68]	; 0x44
   ba080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba084:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba088:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba08a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba08c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba090:	1a9b      	subs	r3, r3, r2
   ba092:	9309      	str	r3, [sp, #36]	; 0x24
   ba094:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba098:	eeb0 0a48 	vmov.f32	s0, s16
   ba09c:	eef0 0a68 	vmov.f32	s1, s17
   ba0a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba0a4:	f001 f888 	bl	bb1b8 <__ulp>
   ba0a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba0ac:	ec53 2b10 	vmov	r2, r3, d0
   ba0b0:	f7fa f972 	bl	b4398 <__aeabi_dmul>
   ba0b4:	ec53 2b18 	vmov	r2, r3, d8
   ba0b8:	f7f9 ffb8 	bl	b402c <__adddf3>
   ba0bc:	4682      	mov	sl, r0
   ba0be:	468b      	mov	fp, r1
   ba0c0:	e78d      	b.n	b9fde <_strtod_l+0xab6>
   ba0c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba0c6:	e7db      	b.n	ba080 <_strtod_l+0xb58>
   ba0c8:	a311      	add	r3, pc, #68	; (adr r3, ba110 <_strtod_l+0xbe8>)
   ba0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0ce:	f7fa fbd5 	bl	b487c <__aeabi_dcmplt>
   ba0d2:	e7b2      	b.n	ba03a <_strtod_l+0xb12>
   ba0d4:	2300      	movs	r3, #0
   ba0d6:	930a      	str	r3, [sp, #40]	; 0x28
   ba0d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba0da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba0dc:	6013      	str	r3, [r2, #0]
   ba0de:	f7ff ba6b 	b.w	b95b8 <_strtod_l+0x90>
   ba0e2:	2a65      	cmp	r2, #101	; 0x65
   ba0e4:	f43f ab5f 	beq.w	b97a6 <_strtod_l+0x27e>
   ba0e8:	2a45      	cmp	r2, #69	; 0x45
   ba0ea:	f43f ab5c 	beq.w	b97a6 <_strtod_l+0x27e>
   ba0ee:	2301      	movs	r3, #1
   ba0f0:	f7ff bb94 	b.w	b981c <_strtod_l+0x2f4>
   ba0f4:	f3af 8000 	nop.w
   ba0f8:	94a03595 	.word	0x94a03595
   ba0fc:	3fdfffff 	.word	0x3fdfffff
   ba100:	35afe535 	.word	0x35afe535
   ba104:	3fe00000 	.word	0x3fe00000
   ba108:	ffc00000 	.word	0xffc00000
   ba10c:	41dfffff 	.word	0x41dfffff
   ba110:	94a03595 	.word	0x94a03595
   ba114:	3fcfffff 	.word	0x3fcfffff
   ba118:	3ff00000 	.word	0x3ff00000
   ba11c:	7ff00000 	.word	0x7ff00000
   ba120:	7fe00000 	.word	0x7fe00000
   ba124:	7c9fffff 	.word	0x7c9fffff
   ba128:	3fe00000 	.word	0x3fe00000
   ba12c:	bff00000 	.word	0xbff00000
   ba130:	7fefffff 	.word	0x7fefffff

000ba134 <strtof>:
   ba134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba138:	f8df 80ac 	ldr.w	r8, [pc, #172]	; ba1e8 <strtof+0xb4>
   ba13c:	4b26      	ldr	r3, [pc, #152]	; (ba1d8 <strtof+0xa4>)
   ba13e:	460a      	mov	r2, r1
   ba140:	ed2d 8b02 	vpush	{d8}
   ba144:	4601      	mov	r1, r0
   ba146:	f8d8 0000 	ldr.w	r0, [r8]
   ba14a:	f7ff f9ed 	bl	b9528 <_strtod_l>
   ba14e:	ec55 4b10 	vmov	r4, r5, d0
   ba152:	ee10 2a10 	vmov	r2, s0
   ba156:	ee10 0a10 	vmov	r0, s0
   ba15a:	462b      	mov	r3, r5
   ba15c:	4629      	mov	r1, r5
   ba15e:	f7fa fbb5 	bl	b48cc <__aeabi_dcmpun>
   ba162:	b190      	cbz	r0, ba18a <strtof+0x56>
   ba164:	2d00      	cmp	r5, #0
   ba166:	481d      	ldr	r0, [pc, #116]	; (ba1dc <strtof+0xa8>)
   ba168:	da09      	bge.n	ba17e <strtof+0x4a>
   ba16a:	f001 f98d 	bl	bb488 <nanf>
   ba16e:	eeb1 8a40 	vneg.f32	s16, s0
   ba172:	eeb0 0a48 	vmov.f32	s0, s16
   ba176:	ecbd 8b02 	vpop	{d8}
   ba17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba17e:	ecbd 8b02 	vpop	{d8}
   ba182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba186:	f001 b97f 	b.w	bb488 <nanf>
   ba18a:	4620      	mov	r0, r4
   ba18c:	4629      	mov	r1, r5
   ba18e:	f7fa fbd3 	bl	b4938 <__aeabi_d2f>
   ba192:	ee08 0a10 	vmov	s16, r0
   ba196:	eddf 7a12 	vldr	s15, [pc, #72]	; ba1e0 <strtof+0xac>
   ba19a:	eeb0 7ac8 	vabs.f32	s14, s16
   ba19e:	eeb4 7a67 	vcmp.f32	s14, s15
   ba1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba1a6:	dde4      	ble.n	ba172 <strtof+0x3e>
   ba1a8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   ba1ac:	4b0d      	ldr	r3, [pc, #52]	; (ba1e4 <strtof+0xb0>)
   ba1ae:	f04f 32ff 	mov.w	r2, #4294967295
   ba1b2:	4620      	mov	r0, r4
   ba1b4:	4639      	mov	r1, r7
   ba1b6:	f7fa fb89 	bl	b48cc <__aeabi_dcmpun>
   ba1ba:	b940      	cbnz	r0, ba1ce <strtof+0x9a>
   ba1bc:	4b09      	ldr	r3, [pc, #36]	; (ba1e4 <strtof+0xb0>)
   ba1be:	f04f 32ff 	mov.w	r2, #4294967295
   ba1c2:	4620      	mov	r0, r4
   ba1c4:	4639      	mov	r1, r7
   ba1c6:	f7fa fb63 	bl	b4890 <__aeabi_dcmple>
   ba1ca:	2800      	cmp	r0, #0
   ba1cc:	d0d1      	beq.n	ba172 <strtof+0x3e>
   ba1ce:	f8d8 3000 	ldr.w	r3, [r8]
   ba1d2:	2222      	movs	r2, #34	; 0x22
   ba1d4:	601a      	str	r2, [r3, #0]
   ba1d6:	e7cc      	b.n	ba172 <strtof+0x3e>
   ba1d8:	2003e378 	.word	0x2003e378
   ba1dc:	000bbdbc 	.word	0x000bbdbc
   ba1e0:	7f7fffff 	.word	0x7f7fffff
   ba1e4:	7fefffff 	.word	0x7fefffff
   ba1e8:	2003e30c 	.word	0x2003e30c

000ba1ec <_strtol_l.constprop.0>:
   ba1ec:	2b01      	cmp	r3, #1
   ba1ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba1f2:	d001      	beq.n	ba1f8 <_strtol_l.constprop.0+0xc>
   ba1f4:	2b24      	cmp	r3, #36	; 0x24
   ba1f6:	d906      	bls.n	ba206 <_strtol_l.constprop.0+0x1a>
   ba1f8:	f7fc f85e 	bl	b62b8 <__errno>
   ba1fc:	2316      	movs	r3, #22
   ba1fe:	6003      	str	r3, [r0, #0]
   ba200:	2000      	movs	r0, #0
   ba202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba206:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba2ec <_strtol_l.constprop.0+0x100>
   ba20a:	460d      	mov	r5, r1
   ba20c:	462e      	mov	r6, r5
   ba20e:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba212:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba216:	f017 0708 	ands.w	r7, r7, #8
   ba21a:	d1f7      	bne.n	ba20c <_strtol_l.constprop.0+0x20>
   ba21c:	2c2d      	cmp	r4, #45	; 0x2d
   ba21e:	d132      	bne.n	ba286 <_strtol_l.constprop.0+0x9a>
   ba220:	782c      	ldrb	r4, [r5, #0]
   ba222:	2701      	movs	r7, #1
   ba224:	1cb5      	adds	r5, r6, #2
   ba226:	2b00      	cmp	r3, #0
   ba228:	d05b      	beq.n	ba2e2 <_strtol_l.constprop.0+0xf6>
   ba22a:	2b10      	cmp	r3, #16
   ba22c:	d109      	bne.n	ba242 <_strtol_l.constprop.0+0x56>
   ba22e:	2c30      	cmp	r4, #48	; 0x30
   ba230:	d107      	bne.n	ba242 <_strtol_l.constprop.0+0x56>
   ba232:	782c      	ldrb	r4, [r5, #0]
   ba234:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba238:	2c58      	cmp	r4, #88	; 0x58
   ba23a:	d14d      	bne.n	ba2d8 <_strtol_l.constprop.0+0xec>
   ba23c:	786c      	ldrb	r4, [r5, #1]
   ba23e:	2310      	movs	r3, #16
   ba240:	3502      	adds	r5, #2
   ba242:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba246:	f108 38ff 	add.w	r8, r8, #4294967295
   ba24a:	f04f 0c00 	mov.w	ip, #0
   ba24e:	fbb8 f9f3 	udiv	r9, r8, r3
   ba252:	4666      	mov	r6, ip
   ba254:	fb03 8a19 	mls	sl, r3, r9, r8
   ba258:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba25c:	f1be 0f09 	cmp.w	lr, #9
   ba260:	d816      	bhi.n	ba290 <_strtol_l.constprop.0+0xa4>
   ba262:	4674      	mov	r4, lr
   ba264:	42a3      	cmp	r3, r4
   ba266:	dd24      	ble.n	ba2b2 <_strtol_l.constprop.0+0xc6>
   ba268:	f1bc 0f00 	cmp.w	ip, #0
   ba26c:	db1e      	blt.n	ba2ac <_strtol_l.constprop.0+0xc0>
   ba26e:	45b1      	cmp	r9, r6
   ba270:	d31c      	bcc.n	ba2ac <_strtol_l.constprop.0+0xc0>
   ba272:	d101      	bne.n	ba278 <_strtol_l.constprop.0+0x8c>
   ba274:	45a2      	cmp	sl, r4
   ba276:	db19      	blt.n	ba2ac <_strtol_l.constprop.0+0xc0>
   ba278:	fb06 4603 	mla	r6, r6, r3, r4
   ba27c:	f04f 0c01 	mov.w	ip, #1
   ba280:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba284:	e7e8      	b.n	ba258 <_strtol_l.constprop.0+0x6c>
   ba286:	2c2b      	cmp	r4, #43	; 0x2b
   ba288:	bf04      	itt	eq
   ba28a:	782c      	ldrbeq	r4, [r5, #0]
   ba28c:	1cb5      	addeq	r5, r6, #2
   ba28e:	e7ca      	b.n	ba226 <_strtol_l.constprop.0+0x3a>
   ba290:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba294:	f1be 0f19 	cmp.w	lr, #25
   ba298:	d801      	bhi.n	ba29e <_strtol_l.constprop.0+0xb2>
   ba29a:	3c37      	subs	r4, #55	; 0x37
   ba29c:	e7e2      	b.n	ba264 <_strtol_l.constprop.0+0x78>
   ba29e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba2a2:	f1be 0f19 	cmp.w	lr, #25
   ba2a6:	d804      	bhi.n	ba2b2 <_strtol_l.constprop.0+0xc6>
   ba2a8:	3c57      	subs	r4, #87	; 0x57
   ba2aa:	e7db      	b.n	ba264 <_strtol_l.constprop.0+0x78>
   ba2ac:	f04f 3cff 	mov.w	ip, #4294967295
   ba2b0:	e7e6      	b.n	ba280 <_strtol_l.constprop.0+0x94>
   ba2b2:	f1bc 0f00 	cmp.w	ip, #0
   ba2b6:	da05      	bge.n	ba2c4 <_strtol_l.constprop.0+0xd8>
   ba2b8:	2322      	movs	r3, #34	; 0x22
   ba2ba:	6003      	str	r3, [r0, #0]
   ba2bc:	4646      	mov	r6, r8
   ba2be:	b942      	cbnz	r2, ba2d2 <_strtol_l.constprop.0+0xe6>
   ba2c0:	4630      	mov	r0, r6
   ba2c2:	e79e      	b.n	ba202 <_strtol_l.constprop.0+0x16>
   ba2c4:	b107      	cbz	r7, ba2c8 <_strtol_l.constprop.0+0xdc>
   ba2c6:	4276      	negs	r6, r6
   ba2c8:	2a00      	cmp	r2, #0
   ba2ca:	d0f9      	beq.n	ba2c0 <_strtol_l.constprop.0+0xd4>
   ba2cc:	f1bc 0f00 	cmp.w	ip, #0
   ba2d0:	d000      	beq.n	ba2d4 <_strtol_l.constprop.0+0xe8>
   ba2d2:	1e69      	subs	r1, r5, #1
   ba2d4:	6011      	str	r1, [r2, #0]
   ba2d6:	e7f3      	b.n	ba2c0 <_strtol_l.constprop.0+0xd4>
   ba2d8:	2430      	movs	r4, #48	; 0x30
   ba2da:	2b00      	cmp	r3, #0
   ba2dc:	d1b1      	bne.n	ba242 <_strtol_l.constprop.0+0x56>
   ba2de:	2308      	movs	r3, #8
   ba2e0:	e7af      	b.n	ba242 <_strtol_l.constprop.0+0x56>
   ba2e2:	2c30      	cmp	r4, #48	; 0x30
   ba2e4:	d0a5      	beq.n	ba232 <_strtol_l.constprop.0+0x46>
   ba2e6:	230a      	movs	r3, #10
   ba2e8:	e7ab      	b.n	ba242 <_strtol_l.constprop.0+0x56>
   ba2ea:	bf00      	nop
   ba2ec:	000bbee9 	.word	0x000bbee9

000ba2f0 <strtol>:
   ba2f0:	4613      	mov	r3, r2
   ba2f2:	460a      	mov	r2, r1
   ba2f4:	4601      	mov	r1, r0
   ba2f6:	4802      	ldr	r0, [pc, #8]	; (ba300 <strtol+0x10>)
   ba2f8:	6800      	ldr	r0, [r0, #0]
   ba2fa:	f7ff bf77 	b.w	ba1ec <_strtol_l.constprop.0>
   ba2fe:	bf00      	nop
   ba300:	2003e30c 	.word	0x2003e30c

000ba304 <__register_exitproc>:
   ba304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba308:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba3c4 <__register_exitproc+0xc0>
   ba30c:	4606      	mov	r6, r0
   ba30e:	f8d8 0000 	ldr.w	r0, [r8]
   ba312:	461f      	mov	r7, r3
   ba314:	460d      	mov	r5, r1
   ba316:	4691      	mov	r9, r2
   ba318:	f000 fbc6 	bl	baaa8 <__retarget_lock_acquire_recursive>
   ba31c:	4b25      	ldr	r3, [pc, #148]	; (ba3b4 <__register_exitproc+0xb0>)
   ba31e:	681c      	ldr	r4, [r3, #0]
   ba320:	b934      	cbnz	r4, ba330 <__register_exitproc+0x2c>
   ba322:	4c25      	ldr	r4, [pc, #148]	; (ba3b8 <__register_exitproc+0xb4>)
   ba324:	601c      	str	r4, [r3, #0]
   ba326:	4b25      	ldr	r3, [pc, #148]	; (ba3bc <__register_exitproc+0xb8>)
   ba328:	b113      	cbz	r3, ba330 <__register_exitproc+0x2c>
   ba32a:	681b      	ldr	r3, [r3, #0]
   ba32c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba330:	6863      	ldr	r3, [r4, #4]
   ba332:	2b1f      	cmp	r3, #31
   ba334:	dd07      	ble.n	ba346 <__register_exitproc+0x42>
   ba336:	f8d8 0000 	ldr.w	r0, [r8]
   ba33a:	f000 fbb7 	bl	baaac <__retarget_lock_release_recursive>
   ba33e:	f04f 30ff 	mov.w	r0, #4294967295
   ba342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba346:	b34e      	cbz	r6, ba39c <__register_exitproc+0x98>
   ba348:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba34c:	b988      	cbnz	r0, ba372 <__register_exitproc+0x6e>
   ba34e:	4b1c      	ldr	r3, [pc, #112]	; (ba3c0 <__register_exitproc+0xbc>)
   ba350:	b923      	cbnz	r3, ba35c <__register_exitproc+0x58>
   ba352:	f8d8 0000 	ldr.w	r0, [r8]
   ba356:	f000 fba8 	bl	baaaa <__retarget_lock_release>
   ba35a:	e7f0      	b.n	ba33e <__register_exitproc+0x3a>
   ba35c:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba360:	f7fb ff6a 	bl	b6238 <malloc>
   ba364:	2800      	cmp	r0, #0
   ba366:	d0f4      	beq.n	ba352 <__register_exitproc+0x4e>
   ba368:	2300      	movs	r3, #0
   ba36a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba36e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba372:	6863      	ldr	r3, [r4, #4]
   ba374:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba378:	2201      	movs	r2, #1
   ba37a:	409a      	lsls	r2, r3
   ba37c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba380:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba384:	4313      	orrs	r3, r2
   ba386:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba38a:	2e02      	cmp	r6, #2
   ba38c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba390:	bf02      	ittt	eq
   ba392:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba396:	4313      	orreq	r3, r2
   ba398:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba39c:	6863      	ldr	r3, [r4, #4]
   ba39e:	f8d8 0000 	ldr.w	r0, [r8]
   ba3a2:	1c5a      	adds	r2, r3, #1
   ba3a4:	3302      	adds	r3, #2
   ba3a6:	6062      	str	r2, [r4, #4]
   ba3a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba3ac:	f000 fb7e 	bl	baaac <__retarget_lock_release_recursive>
   ba3b0:	2000      	movs	r0, #0
   ba3b2:	e7c6      	b.n	ba342 <__register_exitproc+0x3e>
   ba3b4:	2003e7ec 	.word	0x2003e7ec
   ba3b8:	2003e760 	.word	0x2003e760
   ba3bc:	00000000 	.word	0x00000000
   ba3c0:	000b6239 	.word	0x000b6239
   ba3c4:	2003e370 	.word	0x2003e370

000ba3c8 <rshift>:
   ba3c8:	6903      	ldr	r3, [r0, #16]
   ba3ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba3ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba3d2:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba3d6:	f100 0414 	add.w	r4, r0, #20
   ba3da:	dd45      	ble.n	ba468 <rshift+0xa0>
   ba3dc:	f011 011f 	ands.w	r1, r1, #31
   ba3e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba3e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba3e8:	d10c      	bne.n	ba404 <rshift+0x3c>
   ba3ea:	f100 0710 	add.w	r7, r0, #16
   ba3ee:	4629      	mov	r1, r5
   ba3f0:	42b1      	cmp	r1, r6
   ba3f2:	d334      	bcc.n	ba45e <rshift+0x96>
   ba3f4:	1a9b      	subs	r3, r3, r2
   ba3f6:	009b      	lsls	r3, r3, #2
   ba3f8:	1eea      	subs	r2, r5, #3
   ba3fa:	4296      	cmp	r6, r2
   ba3fc:	bf38      	it	cc
   ba3fe:	2300      	movcc	r3, #0
   ba400:	4423      	add	r3, r4
   ba402:	e015      	b.n	ba430 <rshift+0x68>
   ba404:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba408:	f1c1 0820 	rsb	r8, r1, #32
   ba40c:	40cf      	lsrs	r7, r1
   ba40e:	f105 0e04 	add.w	lr, r5, #4
   ba412:	46a1      	mov	r9, r4
   ba414:	4576      	cmp	r6, lr
   ba416:	46f4      	mov	ip, lr
   ba418:	d815      	bhi.n	ba446 <rshift+0x7e>
   ba41a:	1a9a      	subs	r2, r3, r2
   ba41c:	0092      	lsls	r2, r2, #2
   ba41e:	3a04      	subs	r2, #4
   ba420:	3501      	adds	r5, #1
   ba422:	42ae      	cmp	r6, r5
   ba424:	bf38      	it	cc
   ba426:	2200      	movcc	r2, #0
   ba428:	18a3      	adds	r3, r4, r2
   ba42a:	50a7      	str	r7, [r4, r2]
   ba42c:	b107      	cbz	r7, ba430 <rshift+0x68>
   ba42e:	3304      	adds	r3, #4
   ba430:	1b1a      	subs	r2, r3, r4
   ba432:	42a3      	cmp	r3, r4
   ba434:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba438:	bf08      	it	eq
   ba43a:	2300      	moveq	r3, #0
   ba43c:	6102      	str	r2, [r0, #16]
   ba43e:	bf08      	it	eq
   ba440:	6143      	streq	r3, [r0, #20]
   ba442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba446:	f8dc c000 	ldr.w	ip, [ip]
   ba44a:	fa0c fc08 	lsl.w	ip, ip, r8
   ba44e:	ea4c 0707 	orr.w	r7, ip, r7
   ba452:	f849 7b04 	str.w	r7, [r9], #4
   ba456:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba45a:	40cf      	lsrs	r7, r1
   ba45c:	e7da      	b.n	ba414 <rshift+0x4c>
   ba45e:	f851 cb04 	ldr.w	ip, [r1], #4
   ba462:	f847 cf04 	str.w	ip, [r7, #4]!
   ba466:	e7c3      	b.n	ba3f0 <rshift+0x28>
   ba468:	4623      	mov	r3, r4
   ba46a:	e7e1      	b.n	ba430 <rshift+0x68>

000ba46c <__hexdig_fun>:
   ba46c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba470:	2b09      	cmp	r3, #9
   ba472:	d802      	bhi.n	ba47a <__hexdig_fun+0xe>
   ba474:	3820      	subs	r0, #32
   ba476:	b2c0      	uxtb	r0, r0
   ba478:	4770      	bx	lr
   ba47a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba47e:	2b05      	cmp	r3, #5
   ba480:	d801      	bhi.n	ba486 <__hexdig_fun+0x1a>
   ba482:	3847      	subs	r0, #71	; 0x47
   ba484:	e7f7      	b.n	ba476 <__hexdig_fun+0xa>
   ba486:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba48a:	2b05      	cmp	r3, #5
   ba48c:	d801      	bhi.n	ba492 <__hexdig_fun+0x26>
   ba48e:	3827      	subs	r0, #39	; 0x27
   ba490:	e7f1      	b.n	ba476 <__hexdig_fun+0xa>
   ba492:	2000      	movs	r0, #0
   ba494:	4770      	bx	lr
	...

000ba498 <__gethex>:
   ba498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba49c:	ed2d 8b02 	vpush	{d8}
   ba4a0:	b089      	sub	sp, #36	; 0x24
   ba4a2:	ee08 0a10 	vmov	s16, r0
   ba4a6:	9304      	str	r3, [sp, #16]
   ba4a8:	4bb4      	ldr	r3, [pc, #720]	; (ba77c <__gethex+0x2e4>)
   ba4aa:	681b      	ldr	r3, [r3, #0]
   ba4ac:	9301      	str	r3, [sp, #4]
   ba4ae:	4618      	mov	r0, r3
   ba4b0:	468b      	mov	fp, r1
   ba4b2:	4690      	mov	r8, r2
   ba4b4:	f7fa fb0e 	bl	b4ad4 <strlen>
   ba4b8:	9b01      	ldr	r3, [sp, #4]
   ba4ba:	f8db 2000 	ldr.w	r2, [fp]
   ba4be:	4403      	add	r3, r0
   ba4c0:	4682      	mov	sl, r0
   ba4c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba4c6:	9305      	str	r3, [sp, #20]
   ba4c8:	1c93      	adds	r3, r2, #2
   ba4ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba4ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba4d2:	32fe      	adds	r2, #254	; 0xfe
   ba4d4:	18d1      	adds	r1, r2, r3
   ba4d6:	461f      	mov	r7, r3
   ba4d8:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba4dc:	9100      	str	r1, [sp, #0]
   ba4de:	2830      	cmp	r0, #48	; 0x30
   ba4e0:	d0f8      	beq.n	ba4d4 <__gethex+0x3c>
   ba4e2:	f7ff ffc3 	bl	ba46c <__hexdig_fun>
   ba4e6:	4604      	mov	r4, r0
   ba4e8:	2800      	cmp	r0, #0
   ba4ea:	d13a      	bne.n	ba562 <__gethex+0xca>
   ba4ec:	9901      	ldr	r1, [sp, #4]
   ba4ee:	4652      	mov	r2, sl
   ba4f0:	4638      	mov	r0, r7
   ba4f2:	f7fe ffda 	bl	b94aa <strncmp>
   ba4f6:	4605      	mov	r5, r0
   ba4f8:	2800      	cmp	r0, #0
   ba4fa:	d168      	bne.n	ba5ce <__gethex+0x136>
   ba4fc:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba500:	eb07 060a 	add.w	r6, r7, sl
   ba504:	f7ff ffb2 	bl	ba46c <__hexdig_fun>
   ba508:	2800      	cmp	r0, #0
   ba50a:	d062      	beq.n	ba5d2 <__gethex+0x13a>
   ba50c:	4633      	mov	r3, r6
   ba50e:	7818      	ldrb	r0, [r3, #0]
   ba510:	2830      	cmp	r0, #48	; 0x30
   ba512:	461f      	mov	r7, r3
   ba514:	f103 0301 	add.w	r3, r3, #1
   ba518:	d0f9      	beq.n	ba50e <__gethex+0x76>
   ba51a:	f7ff ffa7 	bl	ba46c <__hexdig_fun>
   ba51e:	2301      	movs	r3, #1
   ba520:	fab0 f480 	clz	r4, r0
   ba524:	0964      	lsrs	r4, r4, #5
   ba526:	4635      	mov	r5, r6
   ba528:	9300      	str	r3, [sp, #0]
   ba52a:	463a      	mov	r2, r7
   ba52c:	4616      	mov	r6, r2
   ba52e:	3201      	adds	r2, #1
   ba530:	7830      	ldrb	r0, [r6, #0]
   ba532:	f7ff ff9b 	bl	ba46c <__hexdig_fun>
   ba536:	2800      	cmp	r0, #0
   ba538:	d1f8      	bne.n	ba52c <__gethex+0x94>
   ba53a:	9901      	ldr	r1, [sp, #4]
   ba53c:	4652      	mov	r2, sl
   ba53e:	4630      	mov	r0, r6
   ba540:	f7fe ffb3 	bl	b94aa <strncmp>
   ba544:	b980      	cbnz	r0, ba568 <__gethex+0xd0>
   ba546:	b94d      	cbnz	r5, ba55c <__gethex+0xc4>
   ba548:	eb06 050a 	add.w	r5, r6, sl
   ba54c:	462a      	mov	r2, r5
   ba54e:	4616      	mov	r6, r2
   ba550:	3201      	adds	r2, #1
   ba552:	7830      	ldrb	r0, [r6, #0]
   ba554:	f7ff ff8a 	bl	ba46c <__hexdig_fun>
   ba558:	2800      	cmp	r0, #0
   ba55a:	d1f8      	bne.n	ba54e <__gethex+0xb6>
   ba55c:	1bad      	subs	r5, r5, r6
   ba55e:	00ad      	lsls	r5, r5, #2
   ba560:	e004      	b.n	ba56c <__gethex+0xd4>
   ba562:	2400      	movs	r4, #0
   ba564:	4625      	mov	r5, r4
   ba566:	e7e0      	b.n	ba52a <__gethex+0x92>
   ba568:	2d00      	cmp	r5, #0
   ba56a:	d1f7      	bne.n	ba55c <__gethex+0xc4>
   ba56c:	7833      	ldrb	r3, [r6, #0]
   ba56e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba572:	2b50      	cmp	r3, #80	; 0x50
   ba574:	d13b      	bne.n	ba5ee <__gethex+0x156>
   ba576:	7873      	ldrb	r3, [r6, #1]
   ba578:	2b2b      	cmp	r3, #43	; 0x2b
   ba57a:	d02c      	beq.n	ba5d6 <__gethex+0x13e>
   ba57c:	2b2d      	cmp	r3, #45	; 0x2d
   ba57e:	d02e      	beq.n	ba5de <__gethex+0x146>
   ba580:	1c71      	adds	r1, r6, #1
   ba582:	f04f 0900 	mov.w	r9, #0
   ba586:	7808      	ldrb	r0, [r1, #0]
   ba588:	f7ff ff70 	bl	ba46c <__hexdig_fun>
   ba58c:	1e43      	subs	r3, r0, #1
   ba58e:	b2db      	uxtb	r3, r3
   ba590:	2b18      	cmp	r3, #24
   ba592:	d82c      	bhi.n	ba5ee <__gethex+0x156>
   ba594:	f1a0 0210 	sub.w	r2, r0, #16
   ba598:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba59c:	f7ff ff66 	bl	ba46c <__hexdig_fun>
   ba5a0:	1e43      	subs	r3, r0, #1
   ba5a2:	b2db      	uxtb	r3, r3
   ba5a4:	2b18      	cmp	r3, #24
   ba5a6:	d91d      	bls.n	ba5e4 <__gethex+0x14c>
   ba5a8:	f1b9 0f00 	cmp.w	r9, #0
   ba5ac:	d000      	beq.n	ba5b0 <__gethex+0x118>
   ba5ae:	4252      	negs	r2, r2
   ba5b0:	4415      	add	r5, r2
   ba5b2:	f8cb 1000 	str.w	r1, [fp]
   ba5b6:	b1e4      	cbz	r4, ba5f2 <__gethex+0x15a>
   ba5b8:	9b00      	ldr	r3, [sp, #0]
   ba5ba:	2b00      	cmp	r3, #0
   ba5bc:	bf14      	ite	ne
   ba5be:	2700      	movne	r7, #0
   ba5c0:	2706      	moveq	r7, #6
   ba5c2:	4638      	mov	r0, r7
   ba5c4:	b009      	add	sp, #36	; 0x24
   ba5c6:	ecbd 8b02 	vpop	{d8}
   ba5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba5ce:	463e      	mov	r6, r7
   ba5d0:	4625      	mov	r5, r4
   ba5d2:	2401      	movs	r4, #1
   ba5d4:	e7ca      	b.n	ba56c <__gethex+0xd4>
   ba5d6:	f04f 0900 	mov.w	r9, #0
   ba5da:	1cb1      	adds	r1, r6, #2
   ba5dc:	e7d3      	b.n	ba586 <__gethex+0xee>
   ba5de:	f04f 0901 	mov.w	r9, #1
   ba5e2:	e7fa      	b.n	ba5da <__gethex+0x142>
   ba5e4:	230a      	movs	r3, #10
   ba5e6:	fb03 0202 	mla	r2, r3, r2, r0
   ba5ea:	3a10      	subs	r2, #16
   ba5ec:	e7d4      	b.n	ba598 <__gethex+0x100>
   ba5ee:	4631      	mov	r1, r6
   ba5f0:	e7df      	b.n	ba5b2 <__gethex+0x11a>
   ba5f2:	1bf3      	subs	r3, r6, r7
   ba5f4:	3b01      	subs	r3, #1
   ba5f6:	4621      	mov	r1, r4
   ba5f8:	2b07      	cmp	r3, #7
   ba5fa:	dc0b      	bgt.n	ba614 <__gethex+0x17c>
   ba5fc:	ee18 0a10 	vmov	r0, s16
   ba600:	f000 fa68 	bl	baad4 <_Balloc>
   ba604:	4604      	mov	r4, r0
   ba606:	b940      	cbnz	r0, ba61a <__gethex+0x182>
   ba608:	4b5d      	ldr	r3, [pc, #372]	; (ba780 <__gethex+0x2e8>)
   ba60a:	4602      	mov	r2, r0
   ba60c:	21de      	movs	r1, #222	; 0xde
   ba60e:	485d      	ldr	r0, [pc, #372]	; (ba784 <__gethex+0x2ec>)
   ba610:	f7fb fe5a 	bl	b62c8 <__assert_func>
   ba614:	3101      	adds	r1, #1
   ba616:	105b      	asrs	r3, r3, #1
   ba618:	e7ee      	b.n	ba5f8 <__gethex+0x160>
   ba61a:	f100 0914 	add.w	r9, r0, #20
   ba61e:	f04f 0b00 	mov.w	fp, #0
   ba622:	f1ca 0301 	rsb	r3, sl, #1
   ba626:	f8cd 9008 	str.w	r9, [sp, #8]
   ba62a:	f8cd b000 	str.w	fp, [sp]
   ba62e:	9306      	str	r3, [sp, #24]
   ba630:	42b7      	cmp	r7, r6
   ba632:	d340      	bcc.n	ba6b6 <__gethex+0x21e>
   ba634:	9802      	ldr	r0, [sp, #8]
   ba636:	9b00      	ldr	r3, [sp, #0]
   ba638:	f840 3b04 	str.w	r3, [r0], #4
   ba63c:	eba0 0009 	sub.w	r0, r0, r9
   ba640:	1080      	asrs	r0, r0, #2
   ba642:	0146      	lsls	r6, r0, #5
   ba644:	6120      	str	r0, [r4, #16]
   ba646:	4618      	mov	r0, r3
   ba648:	f000 fb36 	bl	bacb8 <__hi0bits>
   ba64c:	1a30      	subs	r0, r6, r0
   ba64e:	f8d8 6000 	ldr.w	r6, [r8]
   ba652:	42b0      	cmp	r0, r6
   ba654:	dd63      	ble.n	ba71e <__gethex+0x286>
   ba656:	1b87      	subs	r7, r0, r6
   ba658:	4639      	mov	r1, r7
   ba65a:	4620      	mov	r0, r4
   ba65c:	f000 feda 	bl	bb414 <__any_on>
   ba660:	4682      	mov	sl, r0
   ba662:	b1a8      	cbz	r0, ba690 <__gethex+0x1f8>
   ba664:	1e7b      	subs	r3, r7, #1
   ba666:	1159      	asrs	r1, r3, #5
   ba668:	f003 021f 	and.w	r2, r3, #31
   ba66c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba670:	f04f 0a01 	mov.w	sl, #1
   ba674:	fa0a f202 	lsl.w	r2, sl, r2
   ba678:	420a      	tst	r2, r1
   ba67a:	d009      	beq.n	ba690 <__gethex+0x1f8>
   ba67c:	4553      	cmp	r3, sl
   ba67e:	dd05      	ble.n	ba68c <__gethex+0x1f4>
   ba680:	1eb9      	subs	r1, r7, #2
   ba682:	4620      	mov	r0, r4
   ba684:	f000 fec6 	bl	bb414 <__any_on>
   ba688:	2800      	cmp	r0, #0
   ba68a:	d145      	bne.n	ba718 <__gethex+0x280>
   ba68c:	f04f 0a02 	mov.w	sl, #2
   ba690:	4639      	mov	r1, r7
   ba692:	4620      	mov	r0, r4
   ba694:	f7ff fe98 	bl	ba3c8 <rshift>
   ba698:	443d      	add	r5, r7
   ba69a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba69e:	42ab      	cmp	r3, r5
   ba6a0:	da4c      	bge.n	ba73c <__gethex+0x2a4>
   ba6a2:	ee18 0a10 	vmov	r0, s16
   ba6a6:	4621      	mov	r1, r4
   ba6a8:	f000 fa54 	bl	bab54 <_Bfree>
   ba6ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba6ae:	2300      	movs	r3, #0
   ba6b0:	6013      	str	r3, [r2, #0]
   ba6b2:	27a3      	movs	r7, #163	; 0xa3
   ba6b4:	e785      	b.n	ba5c2 <__gethex+0x12a>
   ba6b6:	1e73      	subs	r3, r6, #1
   ba6b8:	9a05      	ldr	r2, [sp, #20]
   ba6ba:	9303      	str	r3, [sp, #12]
   ba6bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba6c0:	4293      	cmp	r3, r2
   ba6c2:	d019      	beq.n	ba6f8 <__gethex+0x260>
   ba6c4:	f1bb 0f20 	cmp.w	fp, #32
   ba6c8:	d107      	bne.n	ba6da <__gethex+0x242>
   ba6ca:	9b02      	ldr	r3, [sp, #8]
   ba6cc:	9a00      	ldr	r2, [sp, #0]
   ba6ce:	f843 2b04 	str.w	r2, [r3], #4
   ba6d2:	9302      	str	r3, [sp, #8]
   ba6d4:	2300      	movs	r3, #0
   ba6d6:	9300      	str	r3, [sp, #0]
   ba6d8:	469b      	mov	fp, r3
   ba6da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba6de:	f7ff fec5 	bl	ba46c <__hexdig_fun>
   ba6e2:	9b00      	ldr	r3, [sp, #0]
   ba6e4:	f000 000f 	and.w	r0, r0, #15
   ba6e8:	fa00 f00b 	lsl.w	r0, r0, fp
   ba6ec:	4303      	orrs	r3, r0
   ba6ee:	9300      	str	r3, [sp, #0]
   ba6f0:	f10b 0b04 	add.w	fp, fp, #4
   ba6f4:	9b03      	ldr	r3, [sp, #12]
   ba6f6:	e00d      	b.n	ba714 <__gethex+0x27c>
   ba6f8:	9b03      	ldr	r3, [sp, #12]
   ba6fa:	9a06      	ldr	r2, [sp, #24]
   ba6fc:	4413      	add	r3, r2
   ba6fe:	42bb      	cmp	r3, r7
   ba700:	d3e0      	bcc.n	ba6c4 <__gethex+0x22c>
   ba702:	4618      	mov	r0, r3
   ba704:	9901      	ldr	r1, [sp, #4]
   ba706:	9307      	str	r3, [sp, #28]
   ba708:	4652      	mov	r2, sl
   ba70a:	f7fe fece 	bl	b94aa <strncmp>
   ba70e:	9b07      	ldr	r3, [sp, #28]
   ba710:	2800      	cmp	r0, #0
   ba712:	d1d7      	bne.n	ba6c4 <__gethex+0x22c>
   ba714:	461e      	mov	r6, r3
   ba716:	e78b      	b.n	ba630 <__gethex+0x198>
   ba718:	f04f 0a03 	mov.w	sl, #3
   ba71c:	e7b8      	b.n	ba690 <__gethex+0x1f8>
   ba71e:	da0a      	bge.n	ba736 <__gethex+0x29e>
   ba720:	1a37      	subs	r7, r6, r0
   ba722:	4621      	mov	r1, r4
   ba724:	ee18 0a10 	vmov	r0, s16
   ba728:	463a      	mov	r2, r7
   ba72a:	f000 fc2f 	bl	baf8c <__lshift>
   ba72e:	1bed      	subs	r5, r5, r7
   ba730:	4604      	mov	r4, r0
   ba732:	f100 0914 	add.w	r9, r0, #20
   ba736:	f04f 0a00 	mov.w	sl, #0
   ba73a:	e7ae      	b.n	ba69a <__gethex+0x202>
   ba73c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba740:	42a8      	cmp	r0, r5
   ba742:	dd72      	ble.n	ba82a <__gethex+0x392>
   ba744:	1b45      	subs	r5, r0, r5
   ba746:	42ae      	cmp	r6, r5
   ba748:	dc36      	bgt.n	ba7b8 <__gethex+0x320>
   ba74a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba74e:	2b02      	cmp	r3, #2
   ba750:	d02a      	beq.n	ba7a8 <__gethex+0x310>
   ba752:	2b03      	cmp	r3, #3
   ba754:	d02c      	beq.n	ba7b0 <__gethex+0x318>
   ba756:	2b01      	cmp	r3, #1
   ba758:	d11c      	bne.n	ba794 <__gethex+0x2fc>
   ba75a:	42ae      	cmp	r6, r5
   ba75c:	d11a      	bne.n	ba794 <__gethex+0x2fc>
   ba75e:	2e01      	cmp	r6, #1
   ba760:	d112      	bne.n	ba788 <__gethex+0x2f0>
   ba762:	9a04      	ldr	r2, [sp, #16]
   ba764:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba768:	6013      	str	r3, [r2, #0]
   ba76a:	2301      	movs	r3, #1
   ba76c:	6123      	str	r3, [r4, #16]
   ba76e:	f8c9 3000 	str.w	r3, [r9]
   ba772:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba774:	2762      	movs	r7, #98	; 0x62
   ba776:	601c      	str	r4, [r3, #0]
   ba778:	e723      	b.n	ba5c2 <__gethex+0x12a>
   ba77a:	bf00      	nop
   ba77c:	000bc080 	.word	0x000bc080
   ba780:	000bbfe9 	.word	0x000bbfe9
   ba784:	000bbffa 	.word	0x000bbffa
   ba788:	1e71      	subs	r1, r6, #1
   ba78a:	4620      	mov	r0, r4
   ba78c:	f000 fe42 	bl	bb414 <__any_on>
   ba790:	2800      	cmp	r0, #0
   ba792:	d1e6      	bne.n	ba762 <__gethex+0x2ca>
   ba794:	ee18 0a10 	vmov	r0, s16
   ba798:	4621      	mov	r1, r4
   ba79a:	f000 f9db 	bl	bab54 <_Bfree>
   ba79e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba7a0:	2300      	movs	r3, #0
   ba7a2:	6013      	str	r3, [r2, #0]
   ba7a4:	2750      	movs	r7, #80	; 0x50
   ba7a6:	e70c      	b.n	ba5c2 <__gethex+0x12a>
   ba7a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba7aa:	2b00      	cmp	r3, #0
   ba7ac:	d1f2      	bne.n	ba794 <__gethex+0x2fc>
   ba7ae:	e7d8      	b.n	ba762 <__gethex+0x2ca>
   ba7b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba7b2:	2b00      	cmp	r3, #0
   ba7b4:	d1d5      	bne.n	ba762 <__gethex+0x2ca>
   ba7b6:	e7ed      	b.n	ba794 <__gethex+0x2fc>
   ba7b8:	1e6f      	subs	r7, r5, #1
   ba7ba:	f1ba 0f00 	cmp.w	sl, #0
   ba7be:	d131      	bne.n	ba824 <__gethex+0x38c>
   ba7c0:	b127      	cbz	r7, ba7cc <__gethex+0x334>
   ba7c2:	4639      	mov	r1, r7
   ba7c4:	4620      	mov	r0, r4
   ba7c6:	f000 fe25 	bl	bb414 <__any_on>
   ba7ca:	4682      	mov	sl, r0
   ba7cc:	117b      	asrs	r3, r7, #5
   ba7ce:	2101      	movs	r1, #1
   ba7d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba7d4:	f007 071f 	and.w	r7, r7, #31
   ba7d8:	fa01 f707 	lsl.w	r7, r1, r7
   ba7dc:	421f      	tst	r7, r3
   ba7de:	4629      	mov	r1, r5
   ba7e0:	4620      	mov	r0, r4
   ba7e2:	bf18      	it	ne
   ba7e4:	f04a 0a02 	orrne.w	sl, sl, #2
   ba7e8:	1b76      	subs	r6, r6, r5
   ba7ea:	f7ff fded 	bl	ba3c8 <rshift>
   ba7ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba7f2:	2702      	movs	r7, #2
   ba7f4:	f1ba 0f00 	cmp.w	sl, #0
   ba7f8:	d048      	beq.n	ba88c <__gethex+0x3f4>
   ba7fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba7fe:	2b02      	cmp	r3, #2
   ba800:	d015      	beq.n	ba82e <__gethex+0x396>
   ba802:	2b03      	cmp	r3, #3
   ba804:	d017      	beq.n	ba836 <__gethex+0x39e>
   ba806:	2b01      	cmp	r3, #1
   ba808:	d109      	bne.n	ba81e <__gethex+0x386>
   ba80a:	f01a 0f02 	tst.w	sl, #2
   ba80e:	d006      	beq.n	ba81e <__gethex+0x386>
   ba810:	f8d9 0000 	ldr.w	r0, [r9]
   ba814:	ea4a 0a00 	orr.w	sl, sl, r0
   ba818:	f01a 0f01 	tst.w	sl, #1
   ba81c:	d10e      	bne.n	ba83c <__gethex+0x3a4>
   ba81e:	f047 0710 	orr.w	r7, r7, #16
   ba822:	e033      	b.n	ba88c <__gethex+0x3f4>
   ba824:	f04f 0a01 	mov.w	sl, #1
   ba828:	e7d0      	b.n	ba7cc <__gethex+0x334>
   ba82a:	2701      	movs	r7, #1
   ba82c:	e7e2      	b.n	ba7f4 <__gethex+0x35c>
   ba82e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba830:	f1c3 0301 	rsb	r3, r3, #1
   ba834:	9315      	str	r3, [sp, #84]	; 0x54
   ba836:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba838:	2b00      	cmp	r3, #0
   ba83a:	d0f0      	beq.n	ba81e <__gethex+0x386>
   ba83c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba840:	f104 0314 	add.w	r3, r4, #20
   ba844:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba848:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba84c:	f04f 0c00 	mov.w	ip, #0
   ba850:	4618      	mov	r0, r3
   ba852:	f853 2b04 	ldr.w	r2, [r3], #4
   ba856:	f1b2 3fff 	cmp.w	r2, #4294967295
   ba85a:	d01c      	beq.n	ba896 <__gethex+0x3fe>
   ba85c:	3201      	adds	r2, #1
   ba85e:	6002      	str	r2, [r0, #0]
   ba860:	2f02      	cmp	r7, #2
   ba862:	f104 0314 	add.w	r3, r4, #20
   ba866:	d13f      	bne.n	ba8e8 <__gethex+0x450>
   ba868:	f8d8 2000 	ldr.w	r2, [r8]
   ba86c:	3a01      	subs	r2, #1
   ba86e:	42b2      	cmp	r2, r6
   ba870:	d10a      	bne.n	ba888 <__gethex+0x3f0>
   ba872:	1171      	asrs	r1, r6, #5
   ba874:	2201      	movs	r2, #1
   ba876:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba87a:	f006 061f 	and.w	r6, r6, #31
   ba87e:	fa02 f606 	lsl.w	r6, r2, r6
   ba882:	421e      	tst	r6, r3
   ba884:	bf18      	it	ne
   ba886:	4617      	movne	r7, r2
   ba888:	f047 0720 	orr.w	r7, r7, #32
   ba88c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba88e:	601c      	str	r4, [r3, #0]
   ba890:	9b04      	ldr	r3, [sp, #16]
   ba892:	601d      	str	r5, [r3, #0]
   ba894:	e695      	b.n	ba5c2 <__gethex+0x12a>
   ba896:	4299      	cmp	r1, r3
   ba898:	f843 cc04 	str.w	ip, [r3, #-4]
   ba89c:	d8d8      	bhi.n	ba850 <__gethex+0x3b8>
   ba89e:	68a3      	ldr	r3, [r4, #8]
   ba8a0:	459b      	cmp	fp, r3
   ba8a2:	db19      	blt.n	ba8d8 <__gethex+0x440>
   ba8a4:	6861      	ldr	r1, [r4, #4]
   ba8a6:	ee18 0a10 	vmov	r0, s16
   ba8aa:	3101      	adds	r1, #1
   ba8ac:	f000 f912 	bl	baad4 <_Balloc>
   ba8b0:	4681      	mov	r9, r0
   ba8b2:	b918      	cbnz	r0, ba8bc <__gethex+0x424>
   ba8b4:	4b1a      	ldr	r3, [pc, #104]	; (ba920 <__gethex+0x488>)
   ba8b6:	4602      	mov	r2, r0
   ba8b8:	2184      	movs	r1, #132	; 0x84
   ba8ba:	e6a8      	b.n	ba60e <__gethex+0x176>
   ba8bc:	6922      	ldr	r2, [r4, #16]
   ba8be:	3202      	adds	r2, #2
   ba8c0:	f104 010c 	add.w	r1, r4, #12
   ba8c4:	0092      	lsls	r2, r2, #2
   ba8c6:	300c      	adds	r0, #12
   ba8c8:	f7fe fd6c 	bl	b93a4 <memcpy>
   ba8cc:	4621      	mov	r1, r4
   ba8ce:	ee18 0a10 	vmov	r0, s16
   ba8d2:	f000 f93f 	bl	bab54 <_Bfree>
   ba8d6:	464c      	mov	r4, r9
   ba8d8:	6923      	ldr	r3, [r4, #16]
   ba8da:	1c5a      	adds	r2, r3, #1
   ba8dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba8e0:	6122      	str	r2, [r4, #16]
   ba8e2:	2201      	movs	r2, #1
   ba8e4:	615a      	str	r2, [r3, #20]
   ba8e6:	e7bb      	b.n	ba860 <__gethex+0x3c8>
   ba8e8:	6922      	ldr	r2, [r4, #16]
   ba8ea:	455a      	cmp	r2, fp
   ba8ec:	dd0b      	ble.n	ba906 <__gethex+0x46e>
   ba8ee:	2101      	movs	r1, #1
   ba8f0:	4620      	mov	r0, r4
   ba8f2:	f7ff fd69 	bl	ba3c8 <rshift>
   ba8f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba8fa:	3501      	adds	r5, #1
   ba8fc:	42ab      	cmp	r3, r5
   ba8fe:	f6ff aed0 	blt.w	ba6a2 <__gethex+0x20a>
   ba902:	2701      	movs	r7, #1
   ba904:	e7c0      	b.n	ba888 <__gethex+0x3f0>
   ba906:	f016 061f 	ands.w	r6, r6, #31
   ba90a:	d0fa      	beq.n	ba902 <__gethex+0x46a>
   ba90c:	4453      	add	r3, sl
   ba90e:	f1c6 0620 	rsb	r6, r6, #32
   ba912:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba916:	f000 f9cf 	bl	bacb8 <__hi0bits>
   ba91a:	42b0      	cmp	r0, r6
   ba91c:	dbe7      	blt.n	ba8ee <__gethex+0x456>
   ba91e:	e7f0      	b.n	ba902 <__gethex+0x46a>
   ba920:	000bbfe9 	.word	0x000bbfe9

000ba924 <L_shift>:
   ba924:	f1c2 0208 	rsb	r2, r2, #8
   ba928:	0092      	lsls	r2, r2, #2
   ba92a:	b570      	push	{r4, r5, r6, lr}
   ba92c:	f1c2 0620 	rsb	r6, r2, #32
   ba930:	6843      	ldr	r3, [r0, #4]
   ba932:	6804      	ldr	r4, [r0, #0]
   ba934:	fa03 f506 	lsl.w	r5, r3, r6
   ba938:	432c      	orrs	r4, r5
   ba93a:	40d3      	lsrs	r3, r2
   ba93c:	6004      	str	r4, [r0, #0]
   ba93e:	f840 3f04 	str.w	r3, [r0, #4]!
   ba942:	4288      	cmp	r0, r1
   ba944:	d3f4      	bcc.n	ba930 <L_shift+0xc>
   ba946:	bd70      	pop	{r4, r5, r6, pc}

000ba948 <__match>:
   ba948:	b530      	push	{r4, r5, lr}
   ba94a:	6803      	ldr	r3, [r0, #0]
   ba94c:	3301      	adds	r3, #1
   ba94e:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba952:	b914      	cbnz	r4, ba95a <__match+0x12>
   ba954:	6003      	str	r3, [r0, #0]
   ba956:	2001      	movs	r0, #1
   ba958:	bd30      	pop	{r4, r5, pc}
   ba95a:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba95e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba962:	2d19      	cmp	r5, #25
   ba964:	bf98      	it	ls
   ba966:	3220      	addls	r2, #32
   ba968:	42a2      	cmp	r2, r4
   ba96a:	d0f0      	beq.n	ba94e <__match+0x6>
   ba96c:	2000      	movs	r0, #0
   ba96e:	e7f3      	b.n	ba958 <__match+0x10>

000ba970 <__hexnan>:
   ba970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba974:	680b      	ldr	r3, [r1, #0]
   ba976:	115e      	asrs	r6, r3, #5
   ba978:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba97c:	f013 031f 	ands.w	r3, r3, #31
   ba980:	b087      	sub	sp, #28
   ba982:	bf18      	it	ne
   ba984:	3604      	addne	r6, #4
   ba986:	2500      	movs	r5, #0
   ba988:	1f37      	subs	r7, r6, #4
   ba98a:	4690      	mov	r8, r2
   ba98c:	6802      	ldr	r2, [r0, #0]
   ba98e:	9301      	str	r3, [sp, #4]
   ba990:	4682      	mov	sl, r0
   ba992:	f846 5c04 	str.w	r5, [r6, #-4]
   ba996:	46b9      	mov	r9, r7
   ba998:	463c      	mov	r4, r7
   ba99a:	9502      	str	r5, [sp, #8]
   ba99c:	46ab      	mov	fp, r5
   ba99e:	7851      	ldrb	r1, [r2, #1]
   ba9a0:	1c53      	adds	r3, r2, #1
   ba9a2:	9303      	str	r3, [sp, #12]
   ba9a4:	b341      	cbz	r1, ba9f8 <__hexnan+0x88>
   ba9a6:	4608      	mov	r0, r1
   ba9a8:	9205      	str	r2, [sp, #20]
   ba9aa:	9104      	str	r1, [sp, #16]
   ba9ac:	f7ff fd5e 	bl	ba46c <__hexdig_fun>
   ba9b0:	2800      	cmp	r0, #0
   ba9b2:	d14f      	bne.n	baa54 <__hexnan+0xe4>
   ba9b4:	9904      	ldr	r1, [sp, #16]
   ba9b6:	9a05      	ldr	r2, [sp, #20]
   ba9b8:	2920      	cmp	r1, #32
   ba9ba:	d818      	bhi.n	ba9ee <__hexnan+0x7e>
   ba9bc:	9b02      	ldr	r3, [sp, #8]
   ba9be:	459b      	cmp	fp, r3
   ba9c0:	dd13      	ble.n	ba9ea <__hexnan+0x7a>
   ba9c2:	454c      	cmp	r4, r9
   ba9c4:	d206      	bcs.n	ba9d4 <__hexnan+0x64>
   ba9c6:	2d07      	cmp	r5, #7
   ba9c8:	dc04      	bgt.n	ba9d4 <__hexnan+0x64>
   ba9ca:	462a      	mov	r2, r5
   ba9cc:	4649      	mov	r1, r9
   ba9ce:	4620      	mov	r0, r4
   ba9d0:	f7ff ffa8 	bl	ba924 <L_shift>
   ba9d4:	4544      	cmp	r4, r8
   ba9d6:	d950      	bls.n	baa7a <__hexnan+0x10a>
   ba9d8:	2300      	movs	r3, #0
   ba9da:	f1a4 0904 	sub.w	r9, r4, #4
   ba9de:	f844 3c04 	str.w	r3, [r4, #-4]
   ba9e2:	f8cd b008 	str.w	fp, [sp, #8]
   ba9e6:	464c      	mov	r4, r9
   ba9e8:	461d      	mov	r5, r3
   ba9ea:	9a03      	ldr	r2, [sp, #12]
   ba9ec:	e7d7      	b.n	ba99e <__hexnan+0x2e>
   ba9ee:	2929      	cmp	r1, #41	; 0x29
   ba9f0:	d156      	bne.n	baaa0 <__hexnan+0x130>
   ba9f2:	3202      	adds	r2, #2
   ba9f4:	f8ca 2000 	str.w	r2, [sl]
   ba9f8:	f1bb 0f00 	cmp.w	fp, #0
   ba9fc:	d050      	beq.n	baaa0 <__hexnan+0x130>
   ba9fe:	454c      	cmp	r4, r9
   baa00:	d206      	bcs.n	baa10 <__hexnan+0xa0>
   baa02:	2d07      	cmp	r5, #7
   baa04:	dc04      	bgt.n	baa10 <__hexnan+0xa0>
   baa06:	462a      	mov	r2, r5
   baa08:	4649      	mov	r1, r9
   baa0a:	4620      	mov	r0, r4
   baa0c:	f7ff ff8a 	bl	ba924 <L_shift>
   baa10:	4544      	cmp	r4, r8
   baa12:	d934      	bls.n	baa7e <__hexnan+0x10e>
   baa14:	f1a8 0204 	sub.w	r2, r8, #4
   baa18:	4623      	mov	r3, r4
   baa1a:	f853 1b04 	ldr.w	r1, [r3], #4
   baa1e:	f842 1f04 	str.w	r1, [r2, #4]!
   baa22:	429f      	cmp	r7, r3
   baa24:	d2f9      	bcs.n	baa1a <__hexnan+0xaa>
   baa26:	1b3b      	subs	r3, r7, r4
   baa28:	f023 0303 	bic.w	r3, r3, #3
   baa2c:	3304      	adds	r3, #4
   baa2e:	3401      	adds	r4, #1
   baa30:	3e03      	subs	r6, #3
   baa32:	42b4      	cmp	r4, r6
   baa34:	bf88      	it	hi
   baa36:	2304      	movhi	r3, #4
   baa38:	4443      	add	r3, r8
   baa3a:	2200      	movs	r2, #0
   baa3c:	f843 2b04 	str.w	r2, [r3], #4
   baa40:	429f      	cmp	r7, r3
   baa42:	d2fb      	bcs.n	baa3c <__hexnan+0xcc>
   baa44:	683b      	ldr	r3, [r7, #0]
   baa46:	b91b      	cbnz	r3, baa50 <__hexnan+0xe0>
   baa48:	4547      	cmp	r7, r8
   baa4a:	d127      	bne.n	baa9c <__hexnan+0x12c>
   baa4c:	2301      	movs	r3, #1
   baa4e:	603b      	str	r3, [r7, #0]
   baa50:	2005      	movs	r0, #5
   baa52:	e026      	b.n	baaa2 <__hexnan+0x132>
   baa54:	3501      	adds	r5, #1
   baa56:	2d08      	cmp	r5, #8
   baa58:	f10b 0b01 	add.w	fp, fp, #1
   baa5c:	dd06      	ble.n	baa6c <__hexnan+0xfc>
   baa5e:	4544      	cmp	r4, r8
   baa60:	d9c3      	bls.n	ba9ea <__hexnan+0x7a>
   baa62:	2300      	movs	r3, #0
   baa64:	f844 3c04 	str.w	r3, [r4, #-4]
   baa68:	2501      	movs	r5, #1
   baa6a:	3c04      	subs	r4, #4
   baa6c:	6822      	ldr	r2, [r4, #0]
   baa6e:	f000 000f 	and.w	r0, r0, #15
   baa72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   baa76:	6022      	str	r2, [r4, #0]
   baa78:	e7b7      	b.n	ba9ea <__hexnan+0x7a>
   baa7a:	2508      	movs	r5, #8
   baa7c:	e7b5      	b.n	ba9ea <__hexnan+0x7a>
   baa7e:	9b01      	ldr	r3, [sp, #4]
   baa80:	2b00      	cmp	r3, #0
   baa82:	d0df      	beq.n	baa44 <__hexnan+0xd4>
   baa84:	f04f 32ff 	mov.w	r2, #4294967295
   baa88:	f1c3 0320 	rsb	r3, r3, #32
   baa8c:	fa22 f303 	lsr.w	r3, r2, r3
   baa90:	f856 2c04 	ldr.w	r2, [r6, #-4]
   baa94:	401a      	ands	r2, r3
   baa96:	f846 2c04 	str.w	r2, [r6, #-4]
   baa9a:	e7d3      	b.n	baa44 <__hexnan+0xd4>
   baa9c:	3f04      	subs	r7, #4
   baa9e:	e7d1      	b.n	baa44 <__hexnan+0xd4>
   baaa0:	2004      	movs	r0, #4
   baaa2:	b007      	add	sp, #28
   baaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baaa8 <__retarget_lock_acquire_recursive>:
   baaa8:	4770      	bx	lr

000baaaa <__retarget_lock_release>:
   baaaa:	4770      	bx	lr

000baaac <__retarget_lock_release_recursive>:
   baaac:	4770      	bx	lr

000baaae <__ascii_mbtowc>:
   baaae:	b082      	sub	sp, #8
   baab0:	b901      	cbnz	r1, baab4 <__ascii_mbtowc+0x6>
   baab2:	a901      	add	r1, sp, #4
   baab4:	b142      	cbz	r2, baac8 <__ascii_mbtowc+0x1a>
   baab6:	b14b      	cbz	r3, baacc <__ascii_mbtowc+0x1e>
   baab8:	7813      	ldrb	r3, [r2, #0]
   baaba:	600b      	str	r3, [r1, #0]
   baabc:	7812      	ldrb	r2, [r2, #0]
   baabe:	1e10      	subs	r0, r2, #0
   baac0:	bf18      	it	ne
   baac2:	2001      	movne	r0, #1
   baac4:	b002      	add	sp, #8
   baac6:	4770      	bx	lr
   baac8:	4610      	mov	r0, r2
   baaca:	e7fb      	b.n	baac4 <__ascii_mbtowc+0x16>
   baacc:	f06f 0001 	mvn.w	r0, #1
   baad0:	e7f8      	b.n	baac4 <__ascii_mbtowc+0x16>
	...

000baad4 <_Balloc>:
   baad4:	b570      	push	{r4, r5, r6, lr}
   baad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   baad8:	4604      	mov	r4, r0
   baada:	460d      	mov	r5, r1
   baadc:	b976      	cbnz	r6, baafc <_Balloc+0x28>
   baade:	2010      	movs	r0, #16
   baae0:	f7fb fbaa 	bl	b6238 <malloc>
   baae4:	4602      	mov	r2, r0
   baae6:	6260      	str	r0, [r4, #36]	; 0x24
   baae8:	b920      	cbnz	r0, baaf4 <_Balloc+0x20>
   baaea:	4b18      	ldr	r3, [pc, #96]	; (bab4c <_Balloc+0x78>)
   baaec:	4818      	ldr	r0, [pc, #96]	; (bab50 <_Balloc+0x7c>)
   baaee:	2166      	movs	r1, #102	; 0x66
   baaf0:	f7fb fbea 	bl	b62c8 <__assert_func>
   baaf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   baaf8:	6006      	str	r6, [r0, #0]
   baafa:	60c6      	str	r6, [r0, #12]
   baafc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   baafe:	68f3      	ldr	r3, [r6, #12]
   bab00:	b183      	cbz	r3, bab24 <_Balloc+0x50>
   bab02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bab04:	68db      	ldr	r3, [r3, #12]
   bab06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bab0a:	b9b8      	cbnz	r0, bab3c <_Balloc+0x68>
   bab0c:	2101      	movs	r1, #1
   bab0e:	fa01 f605 	lsl.w	r6, r1, r5
   bab12:	1d72      	adds	r2, r6, #5
   bab14:	0092      	lsls	r2, r2, #2
   bab16:	4620      	mov	r0, r4
   bab18:	f000 fc9d 	bl	bb456 <_calloc_r>
   bab1c:	b160      	cbz	r0, bab38 <_Balloc+0x64>
   bab1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bab22:	e00e      	b.n	bab42 <_Balloc+0x6e>
   bab24:	2221      	movs	r2, #33	; 0x21
   bab26:	2104      	movs	r1, #4
   bab28:	4620      	mov	r0, r4
   bab2a:	f000 fc94 	bl	bb456 <_calloc_r>
   bab2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bab30:	60f0      	str	r0, [r6, #12]
   bab32:	68db      	ldr	r3, [r3, #12]
   bab34:	2b00      	cmp	r3, #0
   bab36:	d1e4      	bne.n	bab02 <_Balloc+0x2e>
   bab38:	2000      	movs	r0, #0
   bab3a:	bd70      	pop	{r4, r5, r6, pc}
   bab3c:	6802      	ldr	r2, [r0, #0]
   bab3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bab42:	2300      	movs	r3, #0
   bab44:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bab48:	e7f7      	b.n	bab3a <_Balloc+0x66>
   bab4a:	bf00      	nop
   bab4c:	000bbdf6 	.word	0x000bbdf6
   bab50:	000bc094 	.word	0x000bc094

000bab54 <_Bfree>:
   bab54:	b570      	push	{r4, r5, r6, lr}
   bab56:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bab58:	4605      	mov	r5, r0
   bab5a:	460c      	mov	r4, r1
   bab5c:	b976      	cbnz	r6, bab7c <_Bfree+0x28>
   bab5e:	2010      	movs	r0, #16
   bab60:	f7fb fb6a 	bl	b6238 <malloc>
   bab64:	4602      	mov	r2, r0
   bab66:	6268      	str	r0, [r5, #36]	; 0x24
   bab68:	b920      	cbnz	r0, bab74 <_Bfree+0x20>
   bab6a:	4b09      	ldr	r3, [pc, #36]	; (bab90 <_Bfree+0x3c>)
   bab6c:	4809      	ldr	r0, [pc, #36]	; (bab94 <_Bfree+0x40>)
   bab6e:	218a      	movs	r1, #138	; 0x8a
   bab70:	f7fb fbaa 	bl	b62c8 <__assert_func>
   bab74:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bab78:	6006      	str	r6, [r0, #0]
   bab7a:	60c6      	str	r6, [r0, #12]
   bab7c:	b13c      	cbz	r4, bab8e <_Bfree+0x3a>
   bab7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bab80:	6862      	ldr	r2, [r4, #4]
   bab82:	68db      	ldr	r3, [r3, #12]
   bab84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bab88:	6021      	str	r1, [r4, #0]
   bab8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bab8e:	bd70      	pop	{r4, r5, r6, pc}
   bab90:	000bbdf6 	.word	0x000bbdf6
   bab94:	000bc094 	.word	0x000bc094

000bab98 <__multadd>:
   bab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bab9c:	690d      	ldr	r5, [r1, #16]
   bab9e:	4607      	mov	r7, r0
   baba0:	460c      	mov	r4, r1
   baba2:	461e      	mov	r6, r3
   baba4:	f101 0c14 	add.w	ip, r1, #20
   baba8:	2000      	movs	r0, #0
   babaa:	f8dc 3000 	ldr.w	r3, [ip]
   babae:	b299      	uxth	r1, r3
   babb0:	fb02 6101 	mla	r1, r2, r1, r6
   babb4:	0c1e      	lsrs	r6, r3, #16
   babb6:	0c0b      	lsrs	r3, r1, #16
   babb8:	fb02 3306 	mla	r3, r2, r6, r3
   babbc:	b289      	uxth	r1, r1
   babbe:	3001      	adds	r0, #1
   babc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   babc4:	4285      	cmp	r5, r0
   babc6:	f84c 1b04 	str.w	r1, [ip], #4
   babca:	ea4f 4613 	mov.w	r6, r3, lsr #16
   babce:	dcec      	bgt.n	babaa <__multadd+0x12>
   babd0:	b30e      	cbz	r6, bac16 <__multadd+0x7e>
   babd2:	68a3      	ldr	r3, [r4, #8]
   babd4:	42ab      	cmp	r3, r5
   babd6:	dc19      	bgt.n	bac0c <__multadd+0x74>
   babd8:	6861      	ldr	r1, [r4, #4]
   babda:	4638      	mov	r0, r7
   babdc:	3101      	adds	r1, #1
   babde:	f7ff ff79 	bl	baad4 <_Balloc>
   babe2:	4680      	mov	r8, r0
   babe4:	b928      	cbnz	r0, babf2 <__multadd+0x5a>
   babe6:	4602      	mov	r2, r0
   babe8:	4b0c      	ldr	r3, [pc, #48]	; (bac1c <__multadd+0x84>)
   babea:	480d      	ldr	r0, [pc, #52]	; (bac20 <__multadd+0x88>)
   babec:	21b5      	movs	r1, #181	; 0xb5
   babee:	f7fb fb6b 	bl	b62c8 <__assert_func>
   babf2:	6922      	ldr	r2, [r4, #16]
   babf4:	3202      	adds	r2, #2
   babf6:	f104 010c 	add.w	r1, r4, #12
   babfa:	0092      	lsls	r2, r2, #2
   babfc:	300c      	adds	r0, #12
   babfe:	f7fe fbd1 	bl	b93a4 <memcpy>
   bac02:	4621      	mov	r1, r4
   bac04:	4638      	mov	r0, r7
   bac06:	f7ff ffa5 	bl	bab54 <_Bfree>
   bac0a:	4644      	mov	r4, r8
   bac0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bac10:	3501      	adds	r5, #1
   bac12:	615e      	str	r6, [r3, #20]
   bac14:	6125      	str	r5, [r4, #16]
   bac16:	4620      	mov	r0, r4
   bac18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bac1c:	000bbfe9 	.word	0x000bbfe9
   bac20:	000bc094 	.word	0x000bc094

000bac24 <__s2b>:
   bac24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bac28:	460c      	mov	r4, r1
   bac2a:	4615      	mov	r5, r2
   bac2c:	461f      	mov	r7, r3
   bac2e:	2209      	movs	r2, #9
   bac30:	3308      	adds	r3, #8
   bac32:	4606      	mov	r6, r0
   bac34:	fb93 f3f2 	sdiv	r3, r3, r2
   bac38:	2100      	movs	r1, #0
   bac3a:	2201      	movs	r2, #1
   bac3c:	429a      	cmp	r2, r3
   bac3e:	db09      	blt.n	bac54 <__s2b+0x30>
   bac40:	4630      	mov	r0, r6
   bac42:	f7ff ff47 	bl	baad4 <_Balloc>
   bac46:	b940      	cbnz	r0, bac5a <__s2b+0x36>
   bac48:	4602      	mov	r2, r0
   bac4a:	4b19      	ldr	r3, [pc, #100]	; (bacb0 <__s2b+0x8c>)
   bac4c:	4819      	ldr	r0, [pc, #100]	; (bacb4 <__s2b+0x90>)
   bac4e:	21ce      	movs	r1, #206	; 0xce
   bac50:	f7fb fb3a 	bl	b62c8 <__assert_func>
   bac54:	0052      	lsls	r2, r2, #1
   bac56:	3101      	adds	r1, #1
   bac58:	e7f0      	b.n	bac3c <__s2b+0x18>
   bac5a:	9b08      	ldr	r3, [sp, #32]
   bac5c:	6143      	str	r3, [r0, #20]
   bac5e:	2d09      	cmp	r5, #9
   bac60:	f04f 0301 	mov.w	r3, #1
   bac64:	6103      	str	r3, [r0, #16]
   bac66:	dd16      	ble.n	bac96 <__s2b+0x72>
   bac68:	f104 0909 	add.w	r9, r4, #9
   bac6c:	46c8      	mov	r8, r9
   bac6e:	442c      	add	r4, r5
   bac70:	f818 3b01 	ldrb.w	r3, [r8], #1
   bac74:	4601      	mov	r1, r0
   bac76:	3b30      	subs	r3, #48	; 0x30
   bac78:	220a      	movs	r2, #10
   bac7a:	4630      	mov	r0, r6
   bac7c:	f7ff ff8c 	bl	bab98 <__multadd>
   bac80:	45a0      	cmp	r8, r4
   bac82:	d1f5      	bne.n	bac70 <__s2b+0x4c>
   bac84:	f1a5 0408 	sub.w	r4, r5, #8
   bac88:	444c      	add	r4, r9
   bac8a:	1b2d      	subs	r5, r5, r4
   bac8c:	1963      	adds	r3, r4, r5
   bac8e:	42bb      	cmp	r3, r7
   bac90:	db04      	blt.n	bac9c <__s2b+0x78>
   bac92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bac96:	340a      	adds	r4, #10
   bac98:	2509      	movs	r5, #9
   bac9a:	e7f6      	b.n	bac8a <__s2b+0x66>
   bac9c:	f814 3b01 	ldrb.w	r3, [r4], #1
   baca0:	4601      	mov	r1, r0
   baca2:	3b30      	subs	r3, #48	; 0x30
   baca4:	220a      	movs	r2, #10
   baca6:	4630      	mov	r0, r6
   baca8:	f7ff ff76 	bl	bab98 <__multadd>
   bacac:	e7ee      	b.n	bac8c <__s2b+0x68>
   bacae:	bf00      	nop
   bacb0:	000bbfe9 	.word	0x000bbfe9
   bacb4:	000bc094 	.word	0x000bc094

000bacb8 <__hi0bits>:
   bacb8:	0c03      	lsrs	r3, r0, #16
   bacba:	041b      	lsls	r3, r3, #16
   bacbc:	b9d3      	cbnz	r3, bacf4 <__hi0bits+0x3c>
   bacbe:	0400      	lsls	r0, r0, #16
   bacc0:	2310      	movs	r3, #16
   bacc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bacc6:	bf04      	itt	eq
   bacc8:	0200      	lsleq	r0, r0, #8
   bacca:	3308      	addeq	r3, #8
   baccc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bacd0:	bf04      	itt	eq
   bacd2:	0100      	lsleq	r0, r0, #4
   bacd4:	3304      	addeq	r3, #4
   bacd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bacda:	bf04      	itt	eq
   bacdc:	0080      	lsleq	r0, r0, #2
   bacde:	3302      	addeq	r3, #2
   bace0:	2800      	cmp	r0, #0
   bace2:	db05      	blt.n	bacf0 <__hi0bits+0x38>
   bace4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bace8:	f103 0301 	add.w	r3, r3, #1
   bacec:	bf08      	it	eq
   bacee:	2320      	moveq	r3, #32
   bacf0:	4618      	mov	r0, r3
   bacf2:	4770      	bx	lr
   bacf4:	2300      	movs	r3, #0
   bacf6:	e7e4      	b.n	bacc2 <__hi0bits+0xa>

000bacf8 <__lo0bits>:
   bacf8:	6803      	ldr	r3, [r0, #0]
   bacfa:	f013 0207 	ands.w	r2, r3, #7
   bacfe:	4601      	mov	r1, r0
   bad00:	d00b      	beq.n	bad1a <__lo0bits+0x22>
   bad02:	07da      	lsls	r2, r3, #31
   bad04:	d423      	bmi.n	bad4e <__lo0bits+0x56>
   bad06:	0798      	lsls	r0, r3, #30
   bad08:	bf49      	itett	mi
   bad0a:	085b      	lsrmi	r3, r3, #1
   bad0c:	089b      	lsrpl	r3, r3, #2
   bad0e:	2001      	movmi	r0, #1
   bad10:	600b      	strmi	r3, [r1, #0]
   bad12:	bf5c      	itt	pl
   bad14:	600b      	strpl	r3, [r1, #0]
   bad16:	2002      	movpl	r0, #2
   bad18:	4770      	bx	lr
   bad1a:	b298      	uxth	r0, r3
   bad1c:	b9a8      	cbnz	r0, bad4a <__lo0bits+0x52>
   bad1e:	0c1b      	lsrs	r3, r3, #16
   bad20:	2010      	movs	r0, #16
   bad22:	b2da      	uxtb	r2, r3
   bad24:	b90a      	cbnz	r2, bad2a <__lo0bits+0x32>
   bad26:	3008      	adds	r0, #8
   bad28:	0a1b      	lsrs	r3, r3, #8
   bad2a:	071a      	lsls	r2, r3, #28
   bad2c:	bf04      	itt	eq
   bad2e:	091b      	lsreq	r3, r3, #4
   bad30:	3004      	addeq	r0, #4
   bad32:	079a      	lsls	r2, r3, #30
   bad34:	bf04      	itt	eq
   bad36:	089b      	lsreq	r3, r3, #2
   bad38:	3002      	addeq	r0, #2
   bad3a:	07da      	lsls	r2, r3, #31
   bad3c:	d403      	bmi.n	bad46 <__lo0bits+0x4e>
   bad3e:	085b      	lsrs	r3, r3, #1
   bad40:	f100 0001 	add.w	r0, r0, #1
   bad44:	d005      	beq.n	bad52 <__lo0bits+0x5a>
   bad46:	600b      	str	r3, [r1, #0]
   bad48:	4770      	bx	lr
   bad4a:	4610      	mov	r0, r2
   bad4c:	e7e9      	b.n	bad22 <__lo0bits+0x2a>
   bad4e:	2000      	movs	r0, #0
   bad50:	4770      	bx	lr
   bad52:	2020      	movs	r0, #32
   bad54:	4770      	bx	lr
	...

000bad58 <__i2b>:
   bad58:	b510      	push	{r4, lr}
   bad5a:	460c      	mov	r4, r1
   bad5c:	2101      	movs	r1, #1
   bad5e:	f7ff feb9 	bl	baad4 <_Balloc>
   bad62:	4602      	mov	r2, r0
   bad64:	b928      	cbnz	r0, bad72 <__i2b+0x1a>
   bad66:	4b05      	ldr	r3, [pc, #20]	; (bad7c <__i2b+0x24>)
   bad68:	4805      	ldr	r0, [pc, #20]	; (bad80 <__i2b+0x28>)
   bad6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bad6e:	f7fb faab 	bl	b62c8 <__assert_func>
   bad72:	2301      	movs	r3, #1
   bad74:	6144      	str	r4, [r0, #20]
   bad76:	6103      	str	r3, [r0, #16]
   bad78:	bd10      	pop	{r4, pc}
   bad7a:	bf00      	nop
   bad7c:	000bbfe9 	.word	0x000bbfe9
   bad80:	000bc094 	.word	0x000bc094

000bad84 <__multiply>:
   bad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bad88:	4691      	mov	r9, r2
   bad8a:	690a      	ldr	r2, [r1, #16]
   bad8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bad90:	429a      	cmp	r2, r3
   bad92:	bfb8      	it	lt
   bad94:	460b      	movlt	r3, r1
   bad96:	460c      	mov	r4, r1
   bad98:	bfbc      	itt	lt
   bad9a:	464c      	movlt	r4, r9
   bad9c:	4699      	movlt	r9, r3
   bad9e:	6927      	ldr	r7, [r4, #16]
   bada0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bada4:	68a3      	ldr	r3, [r4, #8]
   bada6:	6861      	ldr	r1, [r4, #4]
   bada8:	eb07 060a 	add.w	r6, r7, sl
   badac:	42b3      	cmp	r3, r6
   badae:	b085      	sub	sp, #20
   badb0:	bfb8      	it	lt
   badb2:	3101      	addlt	r1, #1
   badb4:	f7ff fe8e 	bl	baad4 <_Balloc>
   badb8:	b930      	cbnz	r0, badc8 <__multiply+0x44>
   badba:	4602      	mov	r2, r0
   badbc:	4b44      	ldr	r3, [pc, #272]	; (baed0 <__multiply+0x14c>)
   badbe:	4845      	ldr	r0, [pc, #276]	; (baed4 <__multiply+0x150>)
   badc0:	f240 115d 	movw	r1, #349	; 0x15d
   badc4:	f7fb fa80 	bl	b62c8 <__assert_func>
   badc8:	f100 0514 	add.w	r5, r0, #20
   badcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   badd0:	462b      	mov	r3, r5
   badd2:	2200      	movs	r2, #0
   badd4:	4543      	cmp	r3, r8
   badd6:	d321      	bcc.n	bae1c <__multiply+0x98>
   badd8:	f104 0314 	add.w	r3, r4, #20
   baddc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bade0:	f109 0314 	add.w	r3, r9, #20
   bade4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bade8:	9202      	str	r2, [sp, #8]
   badea:	1b3a      	subs	r2, r7, r4
   badec:	3a15      	subs	r2, #21
   badee:	f022 0203 	bic.w	r2, r2, #3
   badf2:	3204      	adds	r2, #4
   badf4:	f104 0115 	add.w	r1, r4, #21
   badf8:	428f      	cmp	r7, r1
   badfa:	bf38      	it	cc
   badfc:	2204      	movcc	r2, #4
   badfe:	9201      	str	r2, [sp, #4]
   bae00:	9a02      	ldr	r2, [sp, #8]
   bae02:	9303      	str	r3, [sp, #12]
   bae04:	429a      	cmp	r2, r3
   bae06:	d80c      	bhi.n	bae22 <__multiply+0x9e>
   bae08:	2e00      	cmp	r6, #0
   bae0a:	dd03      	ble.n	bae14 <__multiply+0x90>
   bae0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bae10:	2b00      	cmp	r3, #0
   bae12:	d05a      	beq.n	baeca <__multiply+0x146>
   bae14:	6106      	str	r6, [r0, #16]
   bae16:	b005      	add	sp, #20
   bae18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bae1c:	f843 2b04 	str.w	r2, [r3], #4
   bae20:	e7d8      	b.n	badd4 <__multiply+0x50>
   bae22:	f8b3 a000 	ldrh.w	sl, [r3]
   bae26:	f1ba 0f00 	cmp.w	sl, #0
   bae2a:	d024      	beq.n	bae76 <__multiply+0xf2>
   bae2c:	f104 0e14 	add.w	lr, r4, #20
   bae30:	46a9      	mov	r9, r5
   bae32:	f04f 0c00 	mov.w	ip, #0
   bae36:	f85e 2b04 	ldr.w	r2, [lr], #4
   bae3a:	f8d9 1000 	ldr.w	r1, [r9]
   bae3e:	fa1f fb82 	uxth.w	fp, r2
   bae42:	b289      	uxth	r1, r1
   bae44:	fb0a 110b 	mla	r1, sl, fp, r1
   bae48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bae4c:	f8d9 2000 	ldr.w	r2, [r9]
   bae50:	4461      	add	r1, ip
   bae52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bae56:	fb0a c20b 	mla	r2, sl, fp, ip
   bae5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bae5e:	b289      	uxth	r1, r1
   bae60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bae64:	4577      	cmp	r7, lr
   bae66:	f849 1b04 	str.w	r1, [r9], #4
   bae6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bae6e:	d8e2      	bhi.n	bae36 <__multiply+0xb2>
   bae70:	9a01      	ldr	r2, [sp, #4]
   bae72:	f845 c002 	str.w	ip, [r5, r2]
   bae76:	9a03      	ldr	r2, [sp, #12]
   bae78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bae7c:	3304      	adds	r3, #4
   bae7e:	f1b9 0f00 	cmp.w	r9, #0
   bae82:	d020      	beq.n	baec6 <__multiply+0x142>
   bae84:	6829      	ldr	r1, [r5, #0]
   bae86:	f104 0c14 	add.w	ip, r4, #20
   bae8a:	46ae      	mov	lr, r5
   bae8c:	f04f 0a00 	mov.w	sl, #0
   bae90:	f8bc b000 	ldrh.w	fp, [ip]
   bae94:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bae98:	fb09 220b 	mla	r2, r9, fp, r2
   bae9c:	4492      	add	sl, r2
   bae9e:	b289      	uxth	r1, r1
   baea0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   baea4:	f84e 1b04 	str.w	r1, [lr], #4
   baea8:	f85c 2b04 	ldr.w	r2, [ip], #4
   baeac:	f8be 1000 	ldrh.w	r1, [lr]
   baeb0:	0c12      	lsrs	r2, r2, #16
   baeb2:	fb09 1102 	mla	r1, r9, r2, r1
   baeb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   baeba:	4567      	cmp	r7, ip
   baebc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   baec0:	d8e6      	bhi.n	bae90 <__multiply+0x10c>
   baec2:	9a01      	ldr	r2, [sp, #4]
   baec4:	50a9      	str	r1, [r5, r2]
   baec6:	3504      	adds	r5, #4
   baec8:	e79a      	b.n	bae00 <__multiply+0x7c>
   baeca:	3e01      	subs	r6, #1
   baecc:	e79c      	b.n	bae08 <__multiply+0x84>
   baece:	bf00      	nop
   baed0:	000bbfe9 	.word	0x000bbfe9
   baed4:	000bc094 	.word	0x000bc094

000baed8 <__pow5mult>:
   baed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baedc:	4615      	mov	r5, r2
   baede:	f012 0203 	ands.w	r2, r2, #3
   baee2:	4606      	mov	r6, r0
   baee4:	460f      	mov	r7, r1
   baee6:	d007      	beq.n	baef8 <__pow5mult+0x20>
   baee8:	4c25      	ldr	r4, [pc, #148]	; (baf80 <__pow5mult+0xa8>)
   baeea:	3a01      	subs	r2, #1
   baeec:	2300      	movs	r3, #0
   baeee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   baef2:	f7ff fe51 	bl	bab98 <__multadd>
   baef6:	4607      	mov	r7, r0
   baef8:	10ad      	asrs	r5, r5, #2
   baefa:	d03d      	beq.n	baf78 <__pow5mult+0xa0>
   baefc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   baefe:	b97c      	cbnz	r4, baf20 <__pow5mult+0x48>
   baf00:	2010      	movs	r0, #16
   baf02:	f7fb f999 	bl	b6238 <malloc>
   baf06:	4602      	mov	r2, r0
   baf08:	6270      	str	r0, [r6, #36]	; 0x24
   baf0a:	b928      	cbnz	r0, baf18 <__pow5mult+0x40>
   baf0c:	4b1d      	ldr	r3, [pc, #116]	; (baf84 <__pow5mult+0xac>)
   baf0e:	481e      	ldr	r0, [pc, #120]	; (baf88 <__pow5mult+0xb0>)
   baf10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   baf14:	f7fb f9d8 	bl	b62c8 <__assert_func>
   baf18:	e9c0 4401 	strd	r4, r4, [r0, #4]
   baf1c:	6004      	str	r4, [r0, #0]
   baf1e:	60c4      	str	r4, [r0, #12]
   baf20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   baf24:	f8d8 4008 	ldr.w	r4, [r8, #8]
   baf28:	b94c      	cbnz	r4, baf3e <__pow5mult+0x66>
   baf2a:	f240 2171 	movw	r1, #625	; 0x271
   baf2e:	4630      	mov	r0, r6
   baf30:	f7ff ff12 	bl	bad58 <__i2b>
   baf34:	2300      	movs	r3, #0
   baf36:	f8c8 0008 	str.w	r0, [r8, #8]
   baf3a:	4604      	mov	r4, r0
   baf3c:	6003      	str	r3, [r0, #0]
   baf3e:	f04f 0900 	mov.w	r9, #0
   baf42:	07eb      	lsls	r3, r5, #31
   baf44:	d50a      	bpl.n	baf5c <__pow5mult+0x84>
   baf46:	4639      	mov	r1, r7
   baf48:	4622      	mov	r2, r4
   baf4a:	4630      	mov	r0, r6
   baf4c:	f7ff ff1a 	bl	bad84 <__multiply>
   baf50:	4639      	mov	r1, r7
   baf52:	4680      	mov	r8, r0
   baf54:	4630      	mov	r0, r6
   baf56:	f7ff fdfd 	bl	bab54 <_Bfree>
   baf5a:	4647      	mov	r7, r8
   baf5c:	106d      	asrs	r5, r5, #1
   baf5e:	d00b      	beq.n	baf78 <__pow5mult+0xa0>
   baf60:	6820      	ldr	r0, [r4, #0]
   baf62:	b938      	cbnz	r0, baf74 <__pow5mult+0x9c>
   baf64:	4622      	mov	r2, r4
   baf66:	4621      	mov	r1, r4
   baf68:	4630      	mov	r0, r6
   baf6a:	f7ff ff0b 	bl	bad84 <__multiply>
   baf6e:	6020      	str	r0, [r4, #0]
   baf70:	f8c0 9000 	str.w	r9, [r0]
   baf74:	4604      	mov	r4, r0
   baf76:	e7e4      	b.n	baf42 <__pow5mult+0x6a>
   baf78:	4638      	mov	r0, r7
   baf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   baf7e:	bf00      	nop
   baf80:	000bc208 	.word	0x000bc208
   baf84:	000bbdf6 	.word	0x000bbdf6
   baf88:	000bc094 	.word	0x000bc094

000baf8c <__lshift>:
   baf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   baf90:	460c      	mov	r4, r1
   baf92:	6849      	ldr	r1, [r1, #4]
   baf94:	6923      	ldr	r3, [r4, #16]
   baf96:	eb03 1862 	add.w	r8, r3, r2, asr #5
   baf9a:	68a3      	ldr	r3, [r4, #8]
   baf9c:	4607      	mov	r7, r0
   baf9e:	4691      	mov	r9, r2
   bafa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bafa4:	f108 0601 	add.w	r6, r8, #1
   bafa8:	42b3      	cmp	r3, r6
   bafaa:	db0b      	blt.n	bafc4 <__lshift+0x38>
   bafac:	4638      	mov	r0, r7
   bafae:	f7ff fd91 	bl	baad4 <_Balloc>
   bafb2:	4605      	mov	r5, r0
   bafb4:	b948      	cbnz	r0, bafca <__lshift+0x3e>
   bafb6:	4602      	mov	r2, r0
   bafb8:	4b2a      	ldr	r3, [pc, #168]	; (bb064 <__lshift+0xd8>)
   bafba:	482b      	ldr	r0, [pc, #172]	; (bb068 <__lshift+0xdc>)
   bafbc:	f240 11d9 	movw	r1, #473	; 0x1d9
   bafc0:	f7fb f982 	bl	b62c8 <__assert_func>
   bafc4:	3101      	adds	r1, #1
   bafc6:	005b      	lsls	r3, r3, #1
   bafc8:	e7ee      	b.n	bafa8 <__lshift+0x1c>
   bafca:	2300      	movs	r3, #0
   bafcc:	f100 0114 	add.w	r1, r0, #20
   bafd0:	f100 0210 	add.w	r2, r0, #16
   bafd4:	4618      	mov	r0, r3
   bafd6:	4553      	cmp	r3, sl
   bafd8:	db37      	blt.n	bb04a <__lshift+0xbe>
   bafda:	6920      	ldr	r0, [r4, #16]
   bafdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bafe0:	f104 0314 	add.w	r3, r4, #20
   bafe4:	f019 091f 	ands.w	r9, r9, #31
   bafe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bafec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   baff0:	d02f      	beq.n	bb052 <__lshift+0xc6>
   baff2:	f1c9 0e20 	rsb	lr, r9, #32
   baff6:	468a      	mov	sl, r1
   baff8:	f04f 0c00 	mov.w	ip, #0
   baffc:	681a      	ldr	r2, [r3, #0]
   baffe:	fa02 f209 	lsl.w	r2, r2, r9
   bb002:	ea42 020c 	orr.w	r2, r2, ip
   bb006:	f84a 2b04 	str.w	r2, [sl], #4
   bb00a:	f853 2b04 	ldr.w	r2, [r3], #4
   bb00e:	4298      	cmp	r0, r3
   bb010:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb014:	d8f2      	bhi.n	baffc <__lshift+0x70>
   bb016:	1b03      	subs	r3, r0, r4
   bb018:	3b15      	subs	r3, #21
   bb01a:	f023 0303 	bic.w	r3, r3, #3
   bb01e:	3304      	adds	r3, #4
   bb020:	f104 0215 	add.w	r2, r4, #21
   bb024:	4290      	cmp	r0, r2
   bb026:	bf38      	it	cc
   bb028:	2304      	movcc	r3, #4
   bb02a:	f841 c003 	str.w	ip, [r1, r3]
   bb02e:	f1bc 0f00 	cmp.w	ip, #0
   bb032:	d001      	beq.n	bb038 <__lshift+0xac>
   bb034:	f108 0602 	add.w	r6, r8, #2
   bb038:	3e01      	subs	r6, #1
   bb03a:	4638      	mov	r0, r7
   bb03c:	612e      	str	r6, [r5, #16]
   bb03e:	4621      	mov	r1, r4
   bb040:	f7ff fd88 	bl	bab54 <_Bfree>
   bb044:	4628      	mov	r0, r5
   bb046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb04a:	f842 0f04 	str.w	r0, [r2, #4]!
   bb04e:	3301      	adds	r3, #1
   bb050:	e7c1      	b.n	bafd6 <__lshift+0x4a>
   bb052:	3904      	subs	r1, #4
   bb054:	f853 2b04 	ldr.w	r2, [r3], #4
   bb058:	f841 2f04 	str.w	r2, [r1, #4]!
   bb05c:	4298      	cmp	r0, r3
   bb05e:	d8f9      	bhi.n	bb054 <__lshift+0xc8>
   bb060:	e7ea      	b.n	bb038 <__lshift+0xac>
   bb062:	bf00      	nop
   bb064:	000bbfe9 	.word	0x000bbfe9
   bb068:	000bc094 	.word	0x000bc094

000bb06c <__mcmp>:
   bb06c:	b530      	push	{r4, r5, lr}
   bb06e:	6902      	ldr	r2, [r0, #16]
   bb070:	690c      	ldr	r4, [r1, #16]
   bb072:	1b12      	subs	r2, r2, r4
   bb074:	d10e      	bne.n	bb094 <__mcmp+0x28>
   bb076:	f100 0314 	add.w	r3, r0, #20
   bb07a:	3114      	adds	r1, #20
   bb07c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb080:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb084:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb088:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb08c:	42a5      	cmp	r5, r4
   bb08e:	d003      	beq.n	bb098 <__mcmp+0x2c>
   bb090:	d305      	bcc.n	bb09e <__mcmp+0x32>
   bb092:	2201      	movs	r2, #1
   bb094:	4610      	mov	r0, r2
   bb096:	bd30      	pop	{r4, r5, pc}
   bb098:	4283      	cmp	r3, r0
   bb09a:	d3f3      	bcc.n	bb084 <__mcmp+0x18>
   bb09c:	e7fa      	b.n	bb094 <__mcmp+0x28>
   bb09e:	f04f 32ff 	mov.w	r2, #4294967295
   bb0a2:	e7f7      	b.n	bb094 <__mcmp+0x28>

000bb0a4 <__mdiff>:
   bb0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb0a8:	460c      	mov	r4, r1
   bb0aa:	4606      	mov	r6, r0
   bb0ac:	4611      	mov	r1, r2
   bb0ae:	4620      	mov	r0, r4
   bb0b0:	4690      	mov	r8, r2
   bb0b2:	f7ff ffdb 	bl	bb06c <__mcmp>
   bb0b6:	1e05      	subs	r5, r0, #0
   bb0b8:	d110      	bne.n	bb0dc <__mdiff+0x38>
   bb0ba:	4629      	mov	r1, r5
   bb0bc:	4630      	mov	r0, r6
   bb0be:	f7ff fd09 	bl	baad4 <_Balloc>
   bb0c2:	b930      	cbnz	r0, bb0d2 <__mdiff+0x2e>
   bb0c4:	4b3a      	ldr	r3, [pc, #232]	; (bb1b0 <__mdiff+0x10c>)
   bb0c6:	4602      	mov	r2, r0
   bb0c8:	f240 2132 	movw	r1, #562	; 0x232
   bb0cc:	4839      	ldr	r0, [pc, #228]	; (bb1b4 <__mdiff+0x110>)
   bb0ce:	f7fb f8fb 	bl	b62c8 <__assert_func>
   bb0d2:	2301      	movs	r3, #1
   bb0d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb0d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb0dc:	bfa4      	itt	ge
   bb0de:	4643      	movge	r3, r8
   bb0e0:	46a0      	movge	r8, r4
   bb0e2:	4630      	mov	r0, r6
   bb0e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb0e8:	bfa6      	itte	ge
   bb0ea:	461c      	movge	r4, r3
   bb0ec:	2500      	movge	r5, #0
   bb0ee:	2501      	movlt	r5, #1
   bb0f0:	f7ff fcf0 	bl	baad4 <_Balloc>
   bb0f4:	b920      	cbnz	r0, bb100 <__mdiff+0x5c>
   bb0f6:	4b2e      	ldr	r3, [pc, #184]	; (bb1b0 <__mdiff+0x10c>)
   bb0f8:	4602      	mov	r2, r0
   bb0fa:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb0fe:	e7e5      	b.n	bb0cc <__mdiff+0x28>
   bb100:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb104:	6926      	ldr	r6, [r4, #16]
   bb106:	60c5      	str	r5, [r0, #12]
   bb108:	f104 0914 	add.w	r9, r4, #20
   bb10c:	f108 0514 	add.w	r5, r8, #20
   bb110:	f100 0e14 	add.w	lr, r0, #20
   bb114:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb118:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb11c:	f108 0210 	add.w	r2, r8, #16
   bb120:	46f2      	mov	sl, lr
   bb122:	2100      	movs	r1, #0
   bb124:	f859 3b04 	ldr.w	r3, [r9], #4
   bb128:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb12c:	fa1f f883 	uxth.w	r8, r3
   bb130:	fa11 f18b 	uxtah	r1, r1, fp
   bb134:	0c1b      	lsrs	r3, r3, #16
   bb136:	eba1 0808 	sub.w	r8, r1, r8
   bb13a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb13e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb142:	fa1f f888 	uxth.w	r8, r8
   bb146:	1419      	asrs	r1, r3, #16
   bb148:	454e      	cmp	r6, r9
   bb14a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb14e:	f84a 3b04 	str.w	r3, [sl], #4
   bb152:	d8e7      	bhi.n	bb124 <__mdiff+0x80>
   bb154:	1b33      	subs	r3, r6, r4
   bb156:	3b15      	subs	r3, #21
   bb158:	f023 0303 	bic.w	r3, r3, #3
   bb15c:	3304      	adds	r3, #4
   bb15e:	3415      	adds	r4, #21
   bb160:	42a6      	cmp	r6, r4
   bb162:	bf38      	it	cc
   bb164:	2304      	movcc	r3, #4
   bb166:	441d      	add	r5, r3
   bb168:	4473      	add	r3, lr
   bb16a:	469e      	mov	lr, r3
   bb16c:	462e      	mov	r6, r5
   bb16e:	4566      	cmp	r6, ip
   bb170:	d30e      	bcc.n	bb190 <__mdiff+0xec>
   bb172:	f10c 0203 	add.w	r2, ip, #3
   bb176:	1b52      	subs	r2, r2, r5
   bb178:	f022 0203 	bic.w	r2, r2, #3
   bb17c:	3d03      	subs	r5, #3
   bb17e:	45ac      	cmp	ip, r5
   bb180:	bf38      	it	cc
   bb182:	2200      	movcc	r2, #0
   bb184:	441a      	add	r2, r3
   bb186:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb18a:	b17b      	cbz	r3, bb1ac <__mdiff+0x108>
   bb18c:	6107      	str	r7, [r0, #16]
   bb18e:	e7a3      	b.n	bb0d8 <__mdiff+0x34>
   bb190:	f856 8b04 	ldr.w	r8, [r6], #4
   bb194:	fa11 f288 	uxtah	r2, r1, r8
   bb198:	1414      	asrs	r4, r2, #16
   bb19a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb19e:	b292      	uxth	r2, r2
   bb1a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb1a4:	f84e 2b04 	str.w	r2, [lr], #4
   bb1a8:	1421      	asrs	r1, r4, #16
   bb1aa:	e7e0      	b.n	bb16e <__mdiff+0xca>
   bb1ac:	3f01      	subs	r7, #1
   bb1ae:	e7ea      	b.n	bb186 <__mdiff+0xe2>
   bb1b0:	000bbfe9 	.word	0x000bbfe9
   bb1b4:	000bc094 	.word	0x000bc094

000bb1b8 <__ulp>:
   bb1b8:	b082      	sub	sp, #8
   bb1ba:	ed8d 0b00 	vstr	d0, [sp]
   bb1be:	9b01      	ldr	r3, [sp, #4]
   bb1c0:	4912      	ldr	r1, [pc, #72]	; (bb20c <__ulp+0x54>)
   bb1c2:	4019      	ands	r1, r3
   bb1c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb1c8:	2900      	cmp	r1, #0
   bb1ca:	dd05      	ble.n	bb1d8 <__ulp+0x20>
   bb1cc:	2200      	movs	r2, #0
   bb1ce:	460b      	mov	r3, r1
   bb1d0:	ec43 2b10 	vmov	d0, r2, r3
   bb1d4:	b002      	add	sp, #8
   bb1d6:	4770      	bx	lr
   bb1d8:	4249      	negs	r1, r1
   bb1da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb1de:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb1e2:	f04f 0200 	mov.w	r2, #0
   bb1e6:	f04f 0300 	mov.w	r3, #0
   bb1ea:	da04      	bge.n	bb1f6 <__ulp+0x3e>
   bb1ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb1f0:	fa41 f300 	asr.w	r3, r1, r0
   bb1f4:	e7ec      	b.n	bb1d0 <__ulp+0x18>
   bb1f6:	f1a0 0114 	sub.w	r1, r0, #20
   bb1fa:	291e      	cmp	r1, #30
   bb1fc:	bfda      	itte	le
   bb1fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb202:	fa20 f101 	lsrle.w	r1, r0, r1
   bb206:	2101      	movgt	r1, #1
   bb208:	460a      	mov	r2, r1
   bb20a:	e7e1      	b.n	bb1d0 <__ulp+0x18>
   bb20c:	7ff00000 	.word	0x7ff00000

000bb210 <__b2d>:
   bb210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb212:	6905      	ldr	r5, [r0, #16]
   bb214:	f100 0714 	add.w	r7, r0, #20
   bb218:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb21c:	1f2e      	subs	r6, r5, #4
   bb21e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb222:	4620      	mov	r0, r4
   bb224:	f7ff fd48 	bl	bacb8 <__hi0bits>
   bb228:	f1c0 0320 	rsb	r3, r0, #32
   bb22c:	280a      	cmp	r0, #10
   bb22e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb2ac <__b2d+0x9c>
   bb232:	600b      	str	r3, [r1, #0]
   bb234:	dc14      	bgt.n	bb260 <__b2d+0x50>
   bb236:	f1c0 0e0b 	rsb	lr, r0, #11
   bb23a:	fa24 f10e 	lsr.w	r1, r4, lr
   bb23e:	42b7      	cmp	r7, r6
   bb240:	ea41 030c 	orr.w	r3, r1, ip
   bb244:	bf34      	ite	cc
   bb246:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb24a:	2100      	movcs	r1, #0
   bb24c:	3015      	adds	r0, #21
   bb24e:	fa04 f000 	lsl.w	r0, r4, r0
   bb252:	fa21 f10e 	lsr.w	r1, r1, lr
   bb256:	ea40 0201 	orr.w	r2, r0, r1
   bb25a:	ec43 2b10 	vmov	d0, r2, r3
   bb25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb260:	42b7      	cmp	r7, r6
   bb262:	bf3a      	itte	cc
   bb264:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb268:	f1a5 0608 	subcc.w	r6, r5, #8
   bb26c:	2100      	movcs	r1, #0
   bb26e:	380b      	subs	r0, #11
   bb270:	d017      	beq.n	bb2a2 <__b2d+0x92>
   bb272:	f1c0 0c20 	rsb	ip, r0, #32
   bb276:	fa04 f500 	lsl.w	r5, r4, r0
   bb27a:	42be      	cmp	r6, r7
   bb27c:	fa21 f40c 	lsr.w	r4, r1, ip
   bb280:	ea45 0504 	orr.w	r5, r5, r4
   bb284:	bf8c      	ite	hi
   bb286:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb28a:	2400      	movls	r4, #0
   bb28c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb290:	fa01 f000 	lsl.w	r0, r1, r0
   bb294:	fa24 f40c 	lsr.w	r4, r4, ip
   bb298:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb29c:	ea40 0204 	orr.w	r2, r0, r4
   bb2a0:	e7db      	b.n	bb25a <__b2d+0x4a>
   bb2a2:	ea44 030c 	orr.w	r3, r4, ip
   bb2a6:	460a      	mov	r2, r1
   bb2a8:	e7d7      	b.n	bb25a <__b2d+0x4a>
   bb2aa:	bf00      	nop
   bb2ac:	3ff00000 	.word	0x3ff00000

000bb2b0 <__d2b>:
   bb2b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb2b4:	4689      	mov	r9, r1
   bb2b6:	2101      	movs	r1, #1
   bb2b8:	ec57 6b10 	vmov	r6, r7, d0
   bb2bc:	4690      	mov	r8, r2
   bb2be:	f7ff fc09 	bl	baad4 <_Balloc>
   bb2c2:	4604      	mov	r4, r0
   bb2c4:	b930      	cbnz	r0, bb2d4 <__d2b+0x24>
   bb2c6:	4602      	mov	r2, r0
   bb2c8:	4b25      	ldr	r3, [pc, #148]	; (bb360 <__d2b+0xb0>)
   bb2ca:	4826      	ldr	r0, [pc, #152]	; (bb364 <__d2b+0xb4>)
   bb2cc:	f240 310a 	movw	r1, #778	; 0x30a
   bb2d0:	f7fa fffa 	bl	b62c8 <__assert_func>
   bb2d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb2d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb2dc:	bb35      	cbnz	r5, bb32c <__d2b+0x7c>
   bb2de:	2e00      	cmp	r6, #0
   bb2e0:	9301      	str	r3, [sp, #4]
   bb2e2:	d028      	beq.n	bb336 <__d2b+0x86>
   bb2e4:	4668      	mov	r0, sp
   bb2e6:	9600      	str	r6, [sp, #0]
   bb2e8:	f7ff fd06 	bl	bacf8 <__lo0bits>
   bb2ec:	9900      	ldr	r1, [sp, #0]
   bb2ee:	b300      	cbz	r0, bb332 <__d2b+0x82>
   bb2f0:	9a01      	ldr	r2, [sp, #4]
   bb2f2:	f1c0 0320 	rsb	r3, r0, #32
   bb2f6:	fa02 f303 	lsl.w	r3, r2, r3
   bb2fa:	430b      	orrs	r3, r1
   bb2fc:	40c2      	lsrs	r2, r0
   bb2fe:	6163      	str	r3, [r4, #20]
   bb300:	9201      	str	r2, [sp, #4]
   bb302:	9b01      	ldr	r3, [sp, #4]
   bb304:	61a3      	str	r3, [r4, #24]
   bb306:	2b00      	cmp	r3, #0
   bb308:	bf14      	ite	ne
   bb30a:	2202      	movne	r2, #2
   bb30c:	2201      	moveq	r2, #1
   bb30e:	6122      	str	r2, [r4, #16]
   bb310:	b1d5      	cbz	r5, bb348 <__d2b+0x98>
   bb312:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb316:	4405      	add	r5, r0
   bb318:	f8c9 5000 	str.w	r5, [r9]
   bb31c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb320:	f8c8 0000 	str.w	r0, [r8]
   bb324:	4620      	mov	r0, r4
   bb326:	b003      	add	sp, #12
   bb328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb32c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb330:	e7d5      	b.n	bb2de <__d2b+0x2e>
   bb332:	6161      	str	r1, [r4, #20]
   bb334:	e7e5      	b.n	bb302 <__d2b+0x52>
   bb336:	a801      	add	r0, sp, #4
   bb338:	f7ff fcde 	bl	bacf8 <__lo0bits>
   bb33c:	9b01      	ldr	r3, [sp, #4]
   bb33e:	6163      	str	r3, [r4, #20]
   bb340:	2201      	movs	r2, #1
   bb342:	6122      	str	r2, [r4, #16]
   bb344:	3020      	adds	r0, #32
   bb346:	e7e3      	b.n	bb310 <__d2b+0x60>
   bb348:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb34c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb350:	f8c9 0000 	str.w	r0, [r9]
   bb354:	6918      	ldr	r0, [r3, #16]
   bb356:	f7ff fcaf 	bl	bacb8 <__hi0bits>
   bb35a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb35e:	e7df      	b.n	bb320 <__d2b+0x70>
   bb360:	000bbfe9 	.word	0x000bbfe9
   bb364:	000bc094 	.word	0x000bc094

000bb368 <__ratio>:
   bb368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb36c:	4688      	mov	r8, r1
   bb36e:	4669      	mov	r1, sp
   bb370:	4681      	mov	r9, r0
   bb372:	f7ff ff4d 	bl	bb210 <__b2d>
   bb376:	a901      	add	r1, sp, #4
   bb378:	4640      	mov	r0, r8
   bb37a:	ec55 4b10 	vmov	r4, r5, d0
   bb37e:	f7ff ff47 	bl	bb210 <__b2d>
   bb382:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb386:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb38a:	eba3 0c02 	sub.w	ip, r3, r2
   bb38e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb392:	1a9b      	subs	r3, r3, r2
   bb394:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb398:	ec51 0b10 	vmov	r0, r1, d0
   bb39c:	2b00      	cmp	r3, #0
   bb39e:	bfd6      	itet	le
   bb3a0:	460a      	movle	r2, r1
   bb3a2:	462a      	movgt	r2, r5
   bb3a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb3a8:	468b      	mov	fp, r1
   bb3aa:	462f      	mov	r7, r5
   bb3ac:	bfd4      	ite	le
   bb3ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb3b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb3b6:	4620      	mov	r0, r4
   bb3b8:	ee10 2a10 	vmov	r2, s0
   bb3bc:	465b      	mov	r3, fp
   bb3be:	4639      	mov	r1, r7
   bb3c0:	f7f9 f914 	bl	b45ec <__aeabi_ddiv>
   bb3c4:	ec41 0b10 	vmov	d0, r0, r1
   bb3c8:	b003      	add	sp, #12
   bb3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb3ce <__copybits>:
   bb3ce:	3901      	subs	r1, #1
   bb3d0:	b570      	push	{r4, r5, r6, lr}
   bb3d2:	1149      	asrs	r1, r1, #5
   bb3d4:	6914      	ldr	r4, [r2, #16]
   bb3d6:	3101      	adds	r1, #1
   bb3d8:	f102 0314 	add.w	r3, r2, #20
   bb3dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb3e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb3e4:	1f05      	subs	r5, r0, #4
   bb3e6:	42a3      	cmp	r3, r4
   bb3e8:	d30c      	bcc.n	bb404 <__copybits+0x36>
   bb3ea:	1aa3      	subs	r3, r4, r2
   bb3ec:	3b11      	subs	r3, #17
   bb3ee:	f023 0303 	bic.w	r3, r3, #3
   bb3f2:	3211      	adds	r2, #17
   bb3f4:	42a2      	cmp	r2, r4
   bb3f6:	bf88      	it	hi
   bb3f8:	2300      	movhi	r3, #0
   bb3fa:	4418      	add	r0, r3
   bb3fc:	2300      	movs	r3, #0
   bb3fe:	4288      	cmp	r0, r1
   bb400:	d305      	bcc.n	bb40e <__copybits+0x40>
   bb402:	bd70      	pop	{r4, r5, r6, pc}
   bb404:	f853 6b04 	ldr.w	r6, [r3], #4
   bb408:	f845 6f04 	str.w	r6, [r5, #4]!
   bb40c:	e7eb      	b.n	bb3e6 <__copybits+0x18>
   bb40e:	f840 3b04 	str.w	r3, [r0], #4
   bb412:	e7f4      	b.n	bb3fe <__copybits+0x30>

000bb414 <__any_on>:
   bb414:	f100 0214 	add.w	r2, r0, #20
   bb418:	6900      	ldr	r0, [r0, #16]
   bb41a:	114b      	asrs	r3, r1, #5
   bb41c:	4298      	cmp	r0, r3
   bb41e:	b510      	push	{r4, lr}
   bb420:	db11      	blt.n	bb446 <__any_on+0x32>
   bb422:	dd0a      	ble.n	bb43a <__any_on+0x26>
   bb424:	f011 011f 	ands.w	r1, r1, #31
   bb428:	d007      	beq.n	bb43a <__any_on+0x26>
   bb42a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb42e:	fa24 f001 	lsr.w	r0, r4, r1
   bb432:	fa00 f101 	lsl.w	r1, r0, r1
   bb436:	428c      	cmp	r4, r1
   bb438:	d10b      	bne.n	bb452 <__any_on+0x3e>
   bb43a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb43e:	4293      	cmp	r3, r2
   bb440:	d803      	bhi.n	bb44a <__any_on+0x36>
   bb442:	2000      	movs	r0, #0
   bb444:	bd10      	pop	{r4, pc}
   bb446:	4603      	mov	r3, r0
   bb448:	e7f7      	b.n	bb43a <__any_on+0x26>
   bb44a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb44e:	2900      	cmp	r1, #0
   bb450:	d0f5      	beq.n	bb43e <__any_on+0x2a>
   bb452:	2001      	movs	r0, #1
   bb454:	e7f6      	b.n	bb444 <__any_on+0x30>

000bb456 <_calloc_r>:
   bb456:	b513      	push	{r0, r1, r4, lr}
   bb458:	434a      	muls	r2, r1
   bb45a:	4611      	mov	r1, r2
   bb45c:	9201      	str	r2, [sp, #4]
   bb45e:	f7fa ff23 	bl	b62a8 <_malloc_r>
   bb462:	4604      	mov	r4, r0
   bb464:	b118      	cbz	r0, bb46e <_calloc_r+0x18>
   bb466:	9a01      	ldr	r2, [sp, #4]
   bb468:	2100      	movs	r1, #0
   bb46a:	f7fd ffc3 	bl	b93f4 <memset>
   bb46e:	4620      	mov	r0, r4
   bb470:	b002      	add	sp, #8
   bb472:	bd10      	pop	{r4, pc}
   bb474:	0000      	movs	r0, r0
	...

000bb478 <nan>:
   bb478:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb480 <nan+0x8>
   bb47c:	4770      	bx	lr
   bb47e:	bf00      	nop
   bb480:	00000000 	.word	0x00000000
   bb484:	7ff80000 	.word	0x7ff80000

000bb488 <nanf>:
   bb488:	ed9f 0a01 	vldr	s0, [pc, #4]	; bb490 <nanf+0x8>
   bb48c:	4770      	bx	lr
   bb48e:	bf00      	nop
   bb490:	7fc00000 	.word	0x7fc00000

000bb494 <__ascii_wctomb>:
   bb494:	b149      	cbz	r1, bb4aa <__ascii_wctomb+0x16>
   bb496:	2aff      	cmp	r2, #255	; 0xff
   bb498:	bf85      	ittet	hi
   bb49a:	238a      	movhi	r3, #138	; 0x8a
   bb49c:	6003      	strhi	r3, [r0, #0]
   bb49e:	700a      	strbls	r2, [r1, #0]
   bb4a0:	f04f 30ff 	movhi.w	r0, #4294967295
   bb4a4:	bf98      	it	ls
   bb4a6:	2001      	movls	r0, #1
   bb4a8:	4770      	bx	lr
   bb4aa:	4608      	mov	r0, r1
   bb4ac:	4770      	bx	lr

000bb4ae <link_code_end>:
	...

000bb4b0 <link_const_data_start>:
   bb4b0:	00000000 	.word	0x00000000
   bb4b4:	34fb0000 	.word	0x34fb0000
   bb4b8:	00805f9b 	.word	0x00805f9b
   bb4bc:	10008000 	.word	0x10008000
	...

000bb4c8 <dynalib_user>:
   bb4c8:	000b4b15 000b4b51 000b4b79 000b4b7d     .K..QK..yK..}K..
   bb4d8:	00000000 74696157 20676e69 20726f66     ....Waiting for 
   bb4e8:	63454c42 6e65696c 6f632074 63656e6e     BLEclient connec
   bb4f8:	6e6f6974 002e2e2e 6177227b 3a227474     tion....{"watt":
   bb508:	007d6425 7270227b 73656369 61646f74     %d}.{"pricestoda
   bb518:	5b3a2279 2c322c31 2c342c33 2c362c35     y":[1,2,3,4,5,6,
   bb528:	2c382c37 30312c39 2c31312c 312c3231     7,8,9,10,11,12,1
   bb538:	34312c33 2c35312c 312c3631 38312c37     3,14,15,16,17,18
   bb548:	2c39312c 322c3032 32322c31 2c33322c     ,19,20,21,22,23,
   bb558:	7d5d3432 70227b00 65636972 6d6f7473     24]}.{"pricestom
   bb568:	6f72726f 5b3a2277 2c322c31 2c342c33     orrow":[1,2,3,4,
   bb578:	2c362c35 2c382c37 30312c39 2c31312c     5,6,7,8,9,10,11,
   bb588:	312c3231 34312c33 2c35312c 312c3631     12,13,14,15,16,1
   bb598:	38312c37 2c39312c 322c3032 32322c31     7,18,19,20,21,22
   bb5a8:	2c33322c 7d5d3432 57227b00 745f7248     ,23,24]}.{"WHr_t
   bb5b8:	7961646f 315b3a22 332c322c 352c342c     oday":[1,2,3,4,5
   bb5c8:	372c362c 392c382c 2c30312c 312c3131     ,6,7,8,9,10,11,1
   bb5d8:	33312c32 2c34312c 312c3531 37312c36     2,13,14,15,16,17
   bb5e8:	2c38312c 322c3931 31322c30 2c32322c     ,18,19,20,21,22,
   bb5f8:	322c3332 007d5d34 74746157 776f6e20     23,24]}.Watt now
   bb608:	4b4b4400 646f5420 62007961 30353234     .DKK Today.b4250
   bb618:	2d343034 62346266 3437342d 32622d36     404-fb4b-4746-b2
   bb628:	392d3062 65306633 32313136 00366332     b0-93f0e61122c6.
   bb638:	35323462 33303430 3462662d 37342d62     b4250403-fb4b-47
   bb648:	622d3634 2d306232 30663339 31313665     46-b2b0-93f0e611
   bb658:	36633232 32346200 30343035 62662d32     22c6.b4250402-fb
   bb668:	342d6234 2d363437 30623262 6633392d     4b-4746-b2b0-93f
   bb678:	31366530 63323231 34620036 34303532     0e61122c6.b42504
   bb688:	662d3130 2d623462 36343734 6232622d     01-fb4b-4746-b2b
   bb698:	33392d30 36653066 32323131 33003663     0-93f0e61122c6.3
   bb6a8:	31613166 2d363935 66376565 6232342d     f1a1596-ee7f-42b
   bb6b8:	34382d64 622d3164 39326131 32386634     d-84d1-b1a294f82
   bb6c8:	00666365 6f677241 004d506e 69736162     ecf.ArgonPM.basi
   bb6d8:	74735f63 676e6972 70613a3a 646e6570     c_string::append
   bb6e8:	22207b00 72616579 22203a22 2c226425     .{ "year": "%d",
   bb6f8:	6d220020 68746e6f 22203a22 64323025      ."month": "%02d
   bb708:	00202c22 79616422 22203a22 64323025     ", ."day": "%02d
   bb718:	00202c22 79616422 6f77745f 22203a22     ", ."day_two": "
   bb728:	64323025 00202c22 756f6822 203a2272     %02d", ."hour": 
   bb738:	32302522 7d202264 706c6500 65736972     "%02d" }.elprise
   bb748:	61620072 5f636973 69727473 3a3a676e     r.basic_string::
   bb758:	635f4d5f 74736e6f 74637572 6c756e20     _M_construct nul
   bb768:	6f6e206c 61762074 0064696c 5f746567     l not valid.get_
   bb778:	63697270 4e007365 7270206f 73656369     prices.No prices
   bb788:	74657920 6f742000 32302520 25202c64      yet. to %02d, %
   bb798:	00643230 206f7420 202c3432 64323025     02d. to 24, %02d
   bb7a8:	6f742000 32302520 6f4c0064 72502077     . to %02d.Low Pr
   bb7b8:	20656369 65746e49 6c617672 76003a73     ice Intervals:.v
   bb7c8:	6f746365 5f3a3a72 65725f4d 6f6c6c61     ector::_M_reallo
   bb7d8:	6e695f63 74726573 73654d00 65676173     c_insert.Message
   bb7e8:	74616420 73692061 2074276e 64616572      data isn't read
   bb7f8:	65792079 4d002e74 61737365 61206567     y yet..Message a
   bb808:	6d657373 64656c62 7473002e 7300696f     ssembled..stoi.s
   bb818:	00666f74 7373654d 20656761 61746144     tof.Message Data
   bb828:	63655220 65766965 00002e64               Received...

000bb834 <_ZTV5Timer>:
	...
   bb83c:	000b5101 000b5145 000b4f6d              .Q..EQ..mO..

000bb848 <_ZTVN5spark13EthernetClassE>:
	...
   bb850:	000b6357 000b634d 000b6343 000b6339     Wc..Mc..Cc..9c..
   bb860:	000b632d 000b6321 000b8749 000b8751     -c..!c..I...Q...
   bb870:	000b6315 000b630d 000b6303 000b62f9     .c...c...c...b..
   bb880:	000b8781 65737341 6f697472 6961466e     ....AssertionFai
   bb890:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   bb8a0:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   bb8b0:	7265766f 20676e69 76726573 73656369     overing services
   bb8c0:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   bb8d0:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   bb8e0:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   bb8f0:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   bb900:	00454e4f 72656550 76656420 20656369     ONE.Peer device 
   bb910:	6d207369 69737369 0021676e 6c696146     is missing!.Fail
   bb920:	74206465 7061206f 646e6570 65657020     ed to append pee
   bb930:	65432072 6172746e 6564206c 65636976     r Central device
   bb940:	6f43002e 63656e6e 20646574 43207962     ..Connected by C
   bb950:	72746e65 64206c61 63697665 44002e65     entral device..D
   bb960:	6f637369 63656e6e 20646574 72207962     isconnected by r
   bb970:	746f6d65 65642065 65636976 7544002e     emote device..Du
   bb980:	63696c70 64657461 61686320 74636172     plicated charact
   bb990:	73697265 20636974 6e6e6163 6220746f     eristic cannot b
   bb9a0:	64612065 2e646564 69614600 2064656c     e added..Failed 
   bb9b0:	61206f74 6e657070 6f6c2064 206c6163     to append local 
   bb9c0:	72616863 65746361 74736972 002e6369     characteristic..

000bb9d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb9d8:	000b65fb 000b665d 000b6731 000b6687     .e..]f..1g...f..
   bb9e8:	000b65fd                                .e..

000bb9ec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb9f4:	000b65f7 000b666b 000b65f9 000b668d     .e..kf...e...f..
   bba04:	000b661d                                .f..

000bba08 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bba10:	000b65f5 000b6679 000b6ec5 000b6693     .e..yf...n...f..
   bba20:	000b663d                                =f..

000bba24 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bba2c <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bba2c:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bba3c <_ZN8particle7BleUuid9BASE_UUIDE>:
   bba3c:	5f9b34fb 80000080 00001000 00000000     .4._............
   bba4c:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bba5c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bba6c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bba74:	000b7d49 000b7d4f 000b7d8d 000b7d5d     I}..O}...}..]}..
   bba84:	000b7d4b                                K}..

000bba88 <_ZTV9IPAddress>:
	...
   bba90:	000b82a5 000b8295 000b8297              ............

000bba9c <_ZTV9USBSerial>:
	...
   bbaa4:	000b838b 000b83f3 000b83c9 000b7939     ............9y..
   bbab4:	000b83bb 000b838d 000b839d 000b83ed     ................
   bbac4:	000b83ad 000b8385                       ........

000bbacc <_ZTV11USARTSerial>:
	...
   bbad4:	000b8545 000b85b1 000b8589 000b7939     E...........9y..
   bbae4:	000b8559 000b8575 000b8567 000b8583     Y...u...g.......
   bbaf4:	000b8547 000b854b                       G...K...

000bbafc <_ZTV7TwoWire>:
	...
   bbb04:	000b8611 000b865b 000b8633 000b8613     ....[...3.......
   bbb14:	000b863b 000b8643 000b864b 000b8653     ;...C...K...S...

000bbb24 <_ZTVN5spark9WiFiClassE>:
	...
   bbb2c:	000b86eb 000b86e1 000b86d7 000b868d     ................
   bbb3c:	000b86cb 000b86bf 000b8749 000b8751     ........I...Q...
   bbb4c:	000b86b3 000b86ab 000b86a1 000b8697     ................
   bbb5c:	000b8781                                ....

000bbb60 <_ZTVN5spark12NetworkClassE>:
	...
   bbb68:	000b8709 000b8713 000b871d 000b8727     ............'...
   bbb78:	000b8731 000b873d 000b8749 000b8751     1...=...I...Q...
   bbb88:	000b8759 000b8765 000b876d 000b8777     Y...e...m...w...
   bbb98:	000b8781                                ....

000bbb9c <_ZSt7nothrow>:
	...

000bbb9d <_ZTSSt19_Sp_make_shared_tag>:
   bbb9d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bbbad:	5f646572 00676174                        red_tag....

000bbbb8 <_ZTISt19_Sp_make_shared_tag>:
   bbbb8:	000bbd04 000bbb9d 20746f6e 756f6e65     ........not enou
   bbbc8:	73206867 65636170 726f6620 726f6620     gh space for for
   bbbd8:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   bbbe8:	7361656c 75732065 74696d62 6c756620     lease submit ful
   bbbf8:	7562206c 65722067 74726f70 20746120     l bug report at 
   bbc08:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   bbc18:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   bbc28:	32313000 36353433 00393837 69736162     .0123456789.basi
   bbc38:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   bbc48:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
   bbc58:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
   bbc68:	2d736968 7a69733e 20292865 69687728     his->size() (whi
   bbc78:	69206863 7a252073 62002975 63697361     ch is %zu).basic
   bbc88:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
   bbc98:	00656361 69736162 74735f63 676e6972     ace.basic_string
   bbca8:	61623a3a 5f636973 69727473 6200676e     ::basic_string.b
   bbcb8:	63697361 7274735f 3a676e69 6275733a     asic_string::sub
   bbcc8:	00727473                                str.

000bbccc <_ZTIN10__cxxabiv117__class_type_infoE>:
   bbccc:	000bbd64 000bbcd8 000bbd88              d...........

000bbcd8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bbcd8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bbce8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bbcf8:	00000045                                E...

000bbcfc <_ZTVN10__cxxabiv117__class_type_infoE>:
   bbcfc:	00000000 000bbccc 000b9155 000b9169     ........U...i...
   bbd0c:	000b92fd 000b92fd 000b91d3 000b9115     ................
   bbd1c:	000b91bb 000b917d 000b9147              ....}...G...

000bbd28 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bbd28:	000bbd64 000bbd34 000bbccc              d...4.......

000bbd34 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bbd34:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bbd44:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bbd54:	456f666e 00000000                       nfoE....

000bbd5c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bbd5c:	00000000 000bbd28 000b91fd 000b9211     ....(...........
   bbd6c:	000b92fd 000b92fd 000b91d3 000b9115     ................
   bbd7c:	000b92d1 000b925d 000b9225              ....]...%...

000bbd88 <_ZTISt9type_info>:
   bbd88:	000bbd04 000bbd90                       ........

000bbd90 <_ZTSSt9type_info>:
   bbd90:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   bbda0:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   bbdb0:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000bbdbd <day_name.1>:
   bbdbd:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bbdcd:	61536972                                 riSat

000bbdd2 <mon_name.0>:
   bbdd2:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bbde2:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bbdf2:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bbe02:	63757320 64656563 2f006465 2f746e6d      succeeded./mnt/
   bbe12:	6b726f77 63617073 6f772f65 70736b72     workspace/worksp
   bbe22:	2f656361 2d434347 702d3031 6c657069     ace/GCC-10-pipel
   bbe32:	2f656e69 6b6e656a 2d736e69 2d434347     ine/jenkins-GCC-
   bbe42:	702d3031 6c657069 2d656e69 325f3834     10-pipeline-48_2
   bbe52:	31303230 5f343231 36303631 36303831     0201124_16061806
   bbe62:	732f3134 6e2f6372 696c7765 656e2f62     41/src/newlib/ne
   bbe72:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
   bbe82:	6e61722f 00632e64 6900666e 7974696e     /rand.c.nf.inity
   bbe92:	006e6100                                 .an...

000bbe98 <fpi.1>:
   bbe98:	00000035 fffffbce 000003cb 00000001     5...............
   bbea8:	00000000                                ....

000bbeac <fpinan.0>:
   bbeac:	00000034 fffffbce 000003cb 00000001     4...............
   bbebc:	00000000                                ....

000bbec0 <tinytens>:
   bbec0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bbed0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bbee0:	64ac6f43 11680628                       Co.d(.h.

000bbee8 <_ctype_>:
   bbee8:	20202000 20202020 28282020 20282828     .         ((((( 
   bbef8:	20202020 20202020 20202020 20202020                     
   bbf08:	10108820 10101010 10101010 10101010      ...............
   bbf18:	04040410 04040404 10040404 10101010     ................
   bbf28:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bbf38:	01010101 01010101 01010101 10101010     ................
   bbf48:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bbf58:	02020202 02020202 02020202 10101010     ................
   bbf68:	00000020 00000000 00000000 00000000      ...............
	...
   bbfe8:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bbff8:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bc008:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bc018:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bc028:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bc038:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bc048:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bc058:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bc068:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bc078:	78656874 0000632e                       thex.c..

000bc080 <_C_numeric_locale>:
   bc080:	000bb4fe 000bbdbc 2003e374 4f500043     ........t.. C.PO
   bc090:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bc0a0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bc0b0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bc0c0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bc0d0:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bc0e0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bc0f0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bc100:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bc110:	00000063 00000000                       c.......

000bc118 <__mprec_bigtens>:
   bc118:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bc128:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bc138:	7f73bf3c 75154fdd                       <.s..O.u

000bc140 <__mprec_tens>:
   bc140:	00000000 3ff00000 00000000 40240000     .......?......$@
   bc150:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bc160:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bc170:	00000000 412e8480 00000000 416312d0     .......A......cA
   bc180:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bc190:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bc1a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bc1b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bc1c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bc1d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bc1e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bc1f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bc200:	79d99db4 44ea7843                       ...yCx.D

000bc208 <p05.0>:
   bc208:	00000005 00000019 0000007d              ........}...

000bc214 <link_const_data_end>:
   bc214:	000b4e0d 	.word	0x000b4e0d
   bc218:	000b5b9d 	.word	0x000b5b9d
   bc21c:	000b6361 	.word	0x000b6361
   bc220:	000b6389 	.word	0x000b6389
   bc224:	000b7929 	.word	0x000b7929
   bc228:	000b79f9 	.word	0x000b79f9
   bc22c:	000b7be9 	.word	0x000b7be9
   bc230:	000b7c05 	.word	0x000b7c05
   bc234:	000b86f5 	.word	0x000b86f5
   bc238:	000b8859 	.word	0x000b8859
