
c:/Users/mikeh/vscode-particle/Power_monitor/power_monitor/target/5.0.1/argon/power_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000082bc  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc2dc  000bc2dc  0000c2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001f4  2003e2f0  000bc300  0000e2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000030c  2003e4e8  2003e4e8  0001e4e8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bc4f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc4f8  000bc4f8  0001c4f8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bc4fe  000bc4fe  0001c4fe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc522  000bc522  0001c522  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00157881  00000000  00000000  0001c526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001508f  00000000  00000000  00173da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00040735  00000000  00000000  00188e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003088  00000000  00000000  001c956b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bc60  00000000  00000000  001cc5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b370  00000000  00000000  001d8253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000444d4  00000000  00000000  002135c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00154965  00000000  00000000  00257a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a6d0  00000000  00000000  003ac3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2uiz>:
   b48f8:	004a      	lsls	r2, r1, #1
   b48fa:	d211      	bcs.n	b4920 <__aeabi_d2uiz+0x28>
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d211      	bcs.n	b4926 <__aeabi_d2uiz+0x2e>
   b4902:	d50d      	bpl.n	b4920 <__aeabi_d2uiz+0x28>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d40e      	bmi.n	b492c <__aeabi_d2uiz+0x34>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	4770      	bx	lr
   b4920:	f04f 0000 	mov.w	r0, #0
   b4924:	4770      	bx	lr
   b4926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492a:	d102      	bne.n	b4932 <__aeabi_d2uiz+0x3a>
   b492c:	f04f 30ff 	mov.w	r0, #4294967295
   b4930:	4770      	bx	lr
   b4932:	f04f 0000 	mov.w	r0, #0
   b4936:	4770      	bx	lr

000b4938 <__aeabi_d2f>:
   b4938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b493c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4940:	bf24      	itt	cs
   b4942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b494a:	d90d      	bls.n	b4968 <__aeabi_d2f+0x30>
   b494c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b495c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4960:	bf08      	it	eq
   b4962:	f020 0001 	biceq.w	r0, r0, #1
   b4966:	4770      	bx	lr
   b4968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b496c:	d121      	bne.n	b49b2 <__aeabi_d2f+0x7a>
   b496e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4972:	bfbc      	itt	lt
   b4974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4978:	4770      	bxlt	lr
   b497a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b497e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4982:	f1c2 0218 	rsb	r2, r2, #24
   b4986:	f1c2 0c20 	rsb	ip, r2, #32
   b498a:	fa10 f30c 	lsls.w	r3, r0, ip
   b498e:	fa20 f002 	lsr.w	r0, r0, r2
   b4992:	bf18      	it	ne
   b4994:	f040 0001 	orrne.w	r0, r0, #1
   b4998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b499c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49a4:	ea40 000c 	orr.w	r0, r0, ip
   b49a8:	fa23 f302 	lsr.w	r3, r3, r2
   b49ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49b0:	e7cc      	b.n	b494c <__aeabi_d2f+0x14>
   b49b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49b6:	d107      	bne.n	b49c8 <__aeabi_d2f+0x90>
   b49b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49bc:	bf1e      	ittt	ne
   b49be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49c6:	4770      	bxne	lr
   b49c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49d4:	4770      	bx	lr
   b49d6:	bf00      	nop

000b49d8 <__aeabi_d2ulz>:
   b49d8:	b5d0      	push	{r4, r6, r7, lr}
   b49da:	4b0c      	ldr	r3, [pc, #48]	; (b4a0c <__aeabi_d2ulz+0x34>)
   b49dc:	2200      	movs	r2, #0
   b49de:	4606      	mov	r6, r0
   b49e0:	460f      	mov	r7, r1
   b49e2:	f7ff fcd9 	bl	b4398 <__aeabi_dmul>
   b49e6:	f7ff ff87 	bl	b48f8 <__aeabi_d2uiz>
   b49ea:	4604      	mov	r4, r0
   b49ec:	f7ff fc5a 	bl	b42a4 <__aeabi_ui2d>
   b49f0:	4b07      	ldr	r3, [pc, #28]	; (b4a10 <__aeabi_d2ulz+0x38>)
   b49f2:	2200      	movs	r2, #0
   b49f4:	f7ff fcd0 	bl	b4398 <__aeabi_dmul>
   b49f8:	4602      	mov	r2, r0
   b49fa:	460b      	mov	r3, r1
   b49fc:	4630      	mov	r0, r6
   b49fe:	4639      	mov	r1, r7
   b4a00:	f7ff fb12 	bl	b4028 <__aeabi_dsub>
   b4a04:	f7ff ff78 	bl	b48f8 <__aeabi_d2uiz>
   b4a08:	4621      	mov	r1, r4
   b4a0a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a0c:	3df00000 	.word	0x3df00000
   b4a10:	41f00000 	.word	0x41f00000
	...

000b4a20 <memchr>:
   b4a20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a24:	2a10      	cmp	r2, #16
   b4a26:	db2b      	blt.n	b4a80 <memchr+0x60>
   b4a28:	f010 0f07 	tst.w	r0, #7
   b4a2c:	d008      	beq.n	b4a40 <memchr+0x20>
   b4a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a32:	3a01      	subs	r2, #1
   b4a34:	428b      	cmp	r3, r1
   b4a36:	d02d      	beq.n	b4a94 <memchr+0x74>
   b4a38:	f010 0f07 	tst.w	r0, #7
   b4a3c:	b342      	cbz	r2, b4a90 <memchr+0x70>
   b4a3e:	d1f6      	bne.n	b4a2e <memchr+0xe>
   b4a40:	b4f0      	push	{r4, r5, r6, r7}
   b4a42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4a46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b4a4a:	f022 0407 	bic.w	r4, r2, #7
   b4a4e:	f07f 0700 	mvns.w	r7, #0
   b4a52:	2300      	movs	r3, #0
   b4a54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4a58:	3c08      	subs	r4, #8
   b4a5a:	ea85 0501 	eor.w	r5, r5, r1
   b4a5e:	ea86 0601 	eor.w	r6, r6, r1
   b4a62:	fa85 f547 	uadd8	r5, r5, r7
   b4a66:	faa3 f587 	sel	r5, r3, r7
   b4a6a:	fa86 f647 	uadd8	r6, r6, r7
   b4a6e:	faa5 f687 	sel	r6, r5, r7
   b4a72:	b98e      	cbnz	r6, b4a98 <memchr+0x78>
   b4a74:	d1ee      	bne.n	b4a54 <memchr+0x34>
   b4a76:	bcf0      	pop	{r4, r5, r6, r7}
   b4a78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a7c:	f002 0207 	and.w	r2, r2, #7
   b4a80:	b132      	cbz	r2, b4a90 <memchr+0x70>
   b4a82:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a86:	3a01      	subs	r2, #1
   b4a88:	ea83 0301 	eor.w	r3, r3, r1
   b4a8c:	b113      	cbz	r3, b4a94 <memchr+0x74>
   b4a8e:	d1f8      	bne.n	b4a82 <memchr+0x62>
   b4a90:	2000      	movs	r0, #0
   b4a92:	4770      	bx	lr
   b4a94:	3801      	subs	r0, #1
   b4a96:	4770      	bx	lr
   b4a98:	2d00      	cmp	r5, #0
   b4a9a:	bf06      	itte	eq
   b4a9c:	4635      	moveq	r5, r6
   b4a9e:	3803      	subeq	r0, #3
   b4aa0:	3807      	subne	r0, #7
   b4aa2:	f015 0f01 	tst.w	r5, #1
   b4aa6:	d107      	bne.n	b4ab8 <memchr+0x98>
   b4aa8:	3001      	adds	r0, #1
   b4aaa:	f415 7f80 	tst.w	r5, #256	; 0x100
   b4aae:	bf02      	ittt	eq
   b4ab0:	3001      	addeq	r0, #1
   b4ab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b4ab6:	3001      	addeq	r0, #1
   b4ab8:	bcf0      	pop	{r4, r5, r6, r7}
   b4aba:	3801      	subs	r0, #1
   b4abc:	4770      	bx	lr
   b4abe:	bf00      	nop

000b4ac0 <strcmp>:
   b4ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ac8:	2a01      	cmp	r2, #1
   b4aca:	bf28      	it	cs
   b4acc:	429a      	cmpcs	r2, r3
   b4ace:	d0f7      	beq.n	b4ac0 <strcmp>
   b4ad0:	1ad0      	subs	r0, r2, r3
   b4ad2:	4770      	bx	lr

000b4ad4 <strlen>:
   b4ad4:	4603      	mov	r3, r0
   b4ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4ada:	2a00      	cmp	r2, #0
   b4adc:	d1fb      	bne.n	b4ad6 <strlen+0x2>
   b4ade:	1a18      	subs	r0, r3, r0
   b4ae0:	3801      	subs	r0, #1
   b4ae2:	4770      	bx	lr

000b4ae4 <__aeabi_d2lz>:
   b4ae4:	b538      	push	{r3, r4, r5, lr}
   b4ae6:	2200      	movs	r2, #0
   b4ae8:	2300      	movs	r3, #0
   b4aea:	4604      	mov	r4, r0
   b4aec:	460d      	mov	r5, r1
   b4aee:	f7ff fec5 	bl	b487c <__aeabi_dcmplt>
   b4af2:	b928      	cbnz	r0, b4b00 <__aeabi_d2lz+0x1c>
   b4af4:	4620      	mov	r0, r4
   b4af6:	4629      	mov	r1, r5
   b4af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4afc:	f7ff bf6c 	b.w	b49d8 <__aeabi_d2ulz>
   b4b00:	4620      	mov	r0, r4
   b4b02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4b06:	f7ff ff67 	bl	b49d8 <__aeabi_d2ulz>
   b4b0a:	4240      	negs	r0, r0
   b4b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b10:	bd38      	pop	{r3, r4, r5, pc}
   b4b12:	bf00      	nop

000b4b14 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b14:	4809      	ldr	r0, [pc, #36]	; (b4b3c <module_user_pre_init+0x28>)
   b4b16:	490a      	ldr	r1, [pc, #40]	; (b4b40 <module_user_pre_init+0x2c>)
   b4b18:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4b1a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b1c:	d005      	beq.n	b4b2a <module_user_pre_init+0x16>
   b4b1e:	4a09      	ldr	r2, [pc, #36]	; (b4b44 <module_user_pre_init+0x30>)
   b4b20:	4282      	cmp	r2, r0
   b4b22:	d002      	beq.n	b4b2a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4b24:	1a12      	subs	r2, r2, r0
   b4b26:	f004 fc9d 	bl	b9464 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4b2a:	4807      	ldr	r0, [pc, #28]	; (b4b48 <module_user_pre_init+0x34>)
   b4b2c:	4a07      	ldr	r2, [pc, #28]	; (b4b4c <module_user_pre_init+0x38>)
   b4b2e:	2100      	movs	r1, #0
   b4b30:	1a12      	subs	r2, r2, r0
   b4b32:	f004 fcbf 	bl	b94b4 <memset>
    return &link_global_data_start;
}
   b4b36:	4801      	ldr	r0, [pc, #4]	; (b4b3c <module_user_pre_init+0x28>)
   b4b38:	bd08      	pop	{r3, pc}
   b4b3a:	bf00      	nop
   b4b3c:	2003e2f0 	.word	0x2003e2f0
   b4b40:	000bc300 	.word	0x000bc300
   b4b44:	2003e4e4 	.word	0x2003e4e4
   b4b48:	2003e4e8 	.word	0x2003e4e8
   b4b4c:	2003e7f4 	.word	0x2003e7f4

000b4b50 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4b50:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b52:	4e07      	ldr	r6, [pc, #28]	; (b4b70 <module_user_init+0x20>)
   b4b54:	4c07      	ldr	r4, [pc, #28]	; (b4b74 <module_user_init+0x24>)
    module_user_init_hook();
   b4b56:	f003 f8f9 	bl	b7d4c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b5a:	1ba4      	subs	r4, r4, r6
   b4b5c:	08a4      	lsrs	r4, r4, #2
   b4b5e:	2500      	movs	r5, #0
   b4b60:	42ac      	cmp	r4, r5
   b4b62:	d100      	bne.n	b4b66 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b64:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b66:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b6a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b6c:	3501      	adds	r5, #1
   b4b6e:	e7f7      	b.n	b4b60 <module_user_init+0x10>
   b4b70:	000bc2b4 	.word	0x000bc2b4
   b4b74:	000bc2dc 	.word	0x000bc2dc

000b4b78 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b78:	f000 b8e6 	b.w	b4d48 <setup>

000b4b7c <module_user_loop>:
}

void module_user_loop() {
   b4b7c:	b508      	push	{r3, lr}
    loop();
   b4b7e:	f000 f8fb 	bl	b4d78 <loop>
    _post_loop();
}
   b4b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b86:	f003 b899 	b.w	b7cbc <_post_loop>

000b4b8a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b8a:	f001 bb91 	b.w	b62b0 <malloc>

000b4b8e <_Znaj>:
   b4b8e:	f001 bb8f 	b.w	b62b0 <malloc>

000b4b92 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4b92:	f001 bb95 	b.w	b62c0 <free>

000b4b96 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b96:	f001 bb93 	b.w	b62c0 <free>

000b4b9a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b9a:	7800      	ldrb	r0, [r0, #0]
   b4b9c:	fab0 f080 	clz	r0, r0
   b4ba0:	0940      	lsrs	r0, r0, #5
   b4ba2:	4770      	bx	lr

000b4ba4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ba4:	2301      	movs	r3, #1
   b4ba6:	7003      	strb	r3, [r0, #0]
   b4ba8:	4770      	bx	lr
	...

000b4bac <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
   b4bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const bool __neg = __val < 0;
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   b4bae:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
   b4bb2:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
    const bool __neg = __val < 0;
   b4bb6:	0fcf      	lsrs	r7, r1, #31
  {
   b4bb8:	4606      	mov	r6, r0
   b4bba:	4623      	mov	r3, r4
    __to_chars_len(_Tp __value, int __base = 10) noexcept
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
   b4bbc:	2501      	movs	r5, #1
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
	  if (__value < __b2) return __n + 1;
	  if (__value < __b3) return __n + 2;
	  if (__value < __b4) return __n + 3;
   b4bbe:	f242 710f 	movw	r1, #9999	; 0x270f
	  __value /= __b4;
   b4bc2:	f242 7210 	movw	r2, #10000	; 0x2710
	  if (__value < (unsigned)__base) return __n;
   b4bc6:	2b09      	cmp	r3, #9
   b4bc8:	d902      	bls.n	b4bd0 <_ZNSt7__cxx119to_stringEi+0x24>
	  if (__value < __b2) return __n + 1;
   b4bca:	2b63      	cmp	r3, #99	; 0x63
   b4bcc:	d820      	bhi.n	b4c10 <_ZNSt7__cxx119to_stringEi+0x64>
   b4bce:	3501      	adds	r5, #1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4bd0:	f106 0308 	add.w	r3, r6, #8
      { _M_construct(__n, __c); }
   b4bd4:	1979      	adds	r1, r7, r5
	: allocator_type(__a), _M_p(__dat) { }
   b4bd6:	6033      	str	r3, [r6, #0]
      { _M_construct(__n, __c); }
   b4bd8:	222d      	movs	r2, #45	; 0x2d
   b4bda:	4630      	mov	r0, r6
   b4bdc:	f004 f94b 	bl	b8e76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
	return _M_data()[__pos];
   b4be0:	6833      	ldr	r3, [r6, #0]
      unsigned __pos = __len - 1;
      while (__val >= 100)
	{
	  auto const __num = (__val % 100) * 2;
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
   b4be2:	4a19      	ldr	r2, [pc, #100]	; (b4c48 <_ZNSt7__cxx119to_stringEi+0x9c>)
   b4be4:	19d9      	adds	r1, r3, r7
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
   b4be6:	440d      	add	r5, r1
	  auto const __num = (__val % 100) * 2;
   b4be8:	f04f 0e64 	mov.w	lr, #100	; 0x64
      while (__val >= 100)
   b4bec:	2c63      	cmp	r4, #99	; 0x63
   b4bee:	d91c      	bls.n	b4c2a <_ZNSt7__cxx119to_stringEi+0x7e>
	  auto const __num = (__val % 100) * 2;
   b4bf0:	fbb4 fcfe 	udiv	ip, r4, lr
   b4bf4:	fb0e 401c 	mls	r0, lr, ip, r4
	  __val /= 100;
   b4bf8:	4664      	mov	r4, ip
	  __first[__pos] = __digits[__num + 1];
   b4bfa:	eb02 0c40 	add.w	ip, r2, r0, lsl #1
	  __first[__pos - 1] = __digits[__num];
   b4bfe:	f812 0010 	ldrb.w	r0, [r2, r0, lsl #1]
	  __first[__pos] = __digits[__num + 1];
   b4c02:	f89c c001 	ldrb.w	ip, [ip, #1]
   b4c06:	f805 cc01 	strb.w	ip, [r5, #-1]
	  __first[__pos - 1] = __digits[__num];
   b4c0a:	f805 0d02 	strb.w	r0, [r5, #-2]!
      while (__val >= 100)
   b4c0e:	e7ed      	b.n	b4bec <_ZNSt7__cxx119to_stringEi+0x40>
	  if (__value < __b3) return __n + 2;
   b4c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4c14:	d201      	bcs.n	b4c1a <_ZNSt7__cxx119to_stringEi+0x6e>
   b4c16:	3502      	adds	r5, #2
   b4c18:	e7da      	b.n	b4bd0 <_ZNSt7__cxx119to_stringEi+0x24>
	  if (__value < __b4) return __n + 3;
   b4c1a:	428b      	cmp	r3, r1
   b4c1c:	d801      	bhi.n	b4c22 <_ZNSt7__cxx119to_stringEi+0x76>
   b4c1e:	3503      	adds	r5, #3
   b4c20:	e7d6      	b.n	b4bd0 <_ZNSt7__cxx119to_stringEi+0x24>
	  __n += 4;
   b4c22:	3504      	adds	r5, #4
	  __value /= __b4;
   b4c24:	fbb3 f3f2 	udiv	r3, r3, r2
	  if (__value < (unsigned)__base) return __n;
   b4c28:	e7cd      	b.n	b4bc6 <_ZNSt7__cxx119to_stringEi+0x1a>
	  __pos -= 2;
	}
      if (__val >= 10)
   b4c2a:	2c09      	cmp	r4, #9
	{
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
   b4c2c:	bf85      	ittet	hi
   b4c2e:	4a06      	ldrhi	r2, [pc, #24]	; (b4c48 <_ZNSt7__cxx119to_stringEi+0x9c>)
   b4c30:	eb02 0044 	addhi.w	r0, r2, r4, lsl #1
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
   b4c34:	3430      	addls	r4, #48	; 0x30
	  __first[1] = __digits[__num + 1];
   b4c36:	7840      	ldrbhi	r0, [r0, #1]
	  __first[0] = __digits[__num];
   b4c38:	bf85      	ittet	hi
   b4c3a:	f812 2014 	ldrbhi.w	r2, [r2, r4, lsl #1]
	  __first[1] = __digits[__num + 1];
   b4c3e:	7048      	strbhi	r0, [r1, #1]
	__first[0] = '0' + __val;
   b4c40:	55dc      	strbls	r4, [r3, r7]
	  __first[0] = __digits[__num];
   b4c42:	55da      	strbhi	r2, [r3, r7]
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }
   b4c44:	4630      	mov	r0, r6
   b4c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4c48:	000bb5e5 	.word	0x000bb5e5

000b4c4c <_Z9ble_setupv>:
*/




void ble_setup(void){
   b4c4c:	b570      	push	{r4, r5, r6, lr}
   b4c4e:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b4c50:	f002 f84e 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c54:	2102      	movs	r1, #2
   b4c56:	f002 f89c 	bl	b6d92 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4c5a:	f002 f849 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c5e:	f002 f891 	bl	b6d84 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4c62:	f002 f845 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c66:	4a31      	ldr	r2, [pc, #196]	; (b4d2c <_Z9ble_setupv+0xe0>)
   b4c68:	4c31      	ldr	r4, [pc, #196]	; (b4d30 <_Z9ble_setupv+0xe4>)
   b4c6a:	4601      	mov	r1, r0
   b4c6c:	a80b      	add	r0, sp, #44	; 0x2c
   b4c6e:	f002 fd87 	bl	b7780 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4c72:	a80b      	add	r0, sp, #44	; 0x2c
   b4c74:	f002 f92f 	bl	b6ed6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4c78:	f002 f83a 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c7c:	4a2d      	ldr	r2, [pc, #180]	; (b4d34 <_Z9ble_setupv+0xe8>)
   b4c7e:	4601      	mov	r1, r0
   b4c80:	a80b      	add	r0, sp, #44	; 0x2c
   b4c82:	f002 fd7d 	bl	b7780 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4c86:	a80b      	add	r0, sp, #44	; 0x2c
   b4c88:	f002 f925 	bl	b6ed6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4c8c:	f002 f830 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c90:	4a29      	ldr	r2, [pc, #164]	; (b4d38 <_Z9ble_setupv+0xec>)
   b4c92:	4601      	mov	r1, r0
   b4c94:	a80b      	add	r0, sp, #44	; 0x2c
   b4c96:	f002 fd73 	bl	b7780 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4c9a:	a80b      	add	r0, sp, #44	; 0x2c
   b4c9c:	f002 f91b 	bl	b6ed6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b4ca0:	f002 f826 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ca4:	4a25      	ldr	r2, [pc, #148]	; (b4d3c <_Z9ble_setupv+0xf0>)
   b4ca6:	4601      	mov	r1, r0
   b4ca8:	a80b      	add	r0, sp, #44	; 0x2c
   b4caa:	f002 fd69 	bl	b7780 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4cae:	a80b      	add	r0, sp, #44	; 0x2c
   b4cb0:	f002 f911 	bl	b6ed6 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b4cb4:	a803      	add	r0, sp, #12
   b4cb6:	f002 fa44 	bl	b7142 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b4cba:	4b21      	ldr	r3, [pc, #132]	; (b4d40 <_Z9ble_setupv+0xf4>)
   b4cbc:	a803      	add	r0, sp, #12
   b4cbe:	6819      	ldr	r1, [r3, #0]
   b4cc0:	f002 fa52 	bl	b7168 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4cc6:	ad06      	add	r5, sp, #24
   b4cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4cca:	ad06      	add	r5, sp, #24
   b4ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4cce:	6826      	ldr	r6, [r4, #0]
   b4cd0:	ac0b      	add	r4, sp, #44	; 0x2c
   b4cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4cd4:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4cd6:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4cd8:	f001 fe0c 	bl	b68f4 <_ZNK8particle7BleUuid4typeEv>
   b4cdc:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4cde:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4ce0:	b9dc      	cbnz	r4, b4d1a <_Z9ble_setupv+0xce>
            uint16_t uuid16 = tempUUID.shorted();
   b4ce2:	f001 fe23 	bl	b692c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4ce6:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4ce8:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4cec:	2302      	movs	r3, #2
   b4cee:	f10d 020a 	add.w	r2, sp, #10
   b4cf2:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4cf4:	a803      	add	r0, sp, #12
   b4cf6:	f002 fa19 	bl	b712c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4cfa:	f001 fff9 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cfe:	2200      	movs	r2, #0
   b4d00:	a903      	add	r1, sp, #12
   b4d02:	f002 f894 	bl	b6e2e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4d06:	f003 fbcb 	bl	b84a0 <_Z16_fetch_usbserialv>
   b4d0a:	490e      	ldr	r1, [pc, #56]	; (b4d44 <_Z9ble_setupv+0xf8>)
   b4d0c:	f002 fe7f 	bl	b7a0e <_ZN5Print7printlnEPKc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4d10:	9803      	ldr	r0, [sp, #12]
   b4d12:	f001 fad5 	bl	b62c0 <free>
}
   b4d16:	b010      	add	sp, #64	; 0x40
   b4d18:	bd70      	pop	{r4, r5, r6, pc}
   b4d1a:	f001 fe09 	bl	b6930 <_ZNK8particle7BleUuid8rawBytesEv>
   b4d1e:	2300      	movs	r3, #0
   b4d20:	9300      	str	r3, [sp, #0]
   b4d22:	4602      	mov	r2, r0
   b4d24:	2310      	movs	r3, #16
   b4d26:	2107      	movs	r1, #7
   b4d28:	e7e4      	b.n	b4cf4 <_Z9ble_setupv+0xa8>
   b4d2a:	bf00      	nop
   b4d2c:	2003e4f8 	.word	0x2003e4f8
   b4d30:	2003e51c 	.word	0x2003e51c
   b4d34:	2003e4e8 	.word	0x2003e4e8
   b4d38:	2003e4f0 	.word	0x2003e4f0
   b4d3c:	2003e500 	.word	0x2003e500
   b4d40:	2003e2fc 	.word	0x2003e2fc
   b4d44:	000bb59c 	.word	0x000bb59c

000b4d48 <setup>:

SYSTEM_THREAD(ENABLED);

// ###################### SETUP #################################
void setup()
{
   b4d48:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d4a:	f001 fa89 	bl	b6260 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4d4e:	b910      	cbnz	r0, b4d56 <setup+0xe>
            spark_process();
   b4d50:	f001 fa7e 	bl	b6250 <spark_process>
        while (_while() && !_condition()) {
   b4d54:	e7f9      	b.n	b4d4a <setup+0x2>
   b4d56:	f001 fa83 	bl	b6260 <spark_cloud_flag_connected>
    waitUntil(Particle.connected);

    // Set up pin reading.
    wattSensor.initSensor();
   b4d5a:	4805      	ldr	r0, [pc, #20]	; (b4d70 <setup+0x28>)
   b4d5c:	f000 ffa2 	bl	b5ca4 <_ZN6Sensor10initSensorEv>

    // setup BLE
    ble_setup();
   b4d60:	f7ff ff74 	bl	b4c4c <_Z9ble_setupv>
    }
#endif

    // Initiate particle subscriptions & request first price update.
    prices.initSubscriptions();
}
   b4d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    prices.initSubscriptions();
   b4d68:	4802      	ldr	r0, [pc, #8]	; (b4d74 <setup+0x2c>)
   b4d6a:	f000 bbf1 	b.w	b5550 <_ZN10PriceClass17initSubscriptionsEv>
   b4d6e:	bf00      	nop
   b4d70:	2003e5d0 	.word	0x2003e5d0
   b4d74:	2003e570 	.word	0x2003e570

000b4d78 <loop>:

// ##################### MAIN LOOP ##############################
void loop()
{
   b4d78:	b500      	push	{lr}
    // Is message ready to be man-handled?
    if (prices.isMessageDataReady())
   b4d7a:	481f      	ldr	r0, [pc, #124]	; (b4df8 <loop+0x80>)
{
   b4d7c:	b08b      	sub	sp, #44	; 0x2c
    if (prices.isMessageDataReady())
   b4d7e:	f000 fb91 	bl	b54a4 <_ZN10PriceClass18isMessageDataReadyEv>
   b4d82:	b110      	cbz	r0, b4d8a <loop+0x12>
        prices.assembleMessageData();
   b4d84:	481c      	ldr	r0, [pc, #112]	; (b4df8 <loop+0x80>)
   b4d86:	f000 fd2f 	bl	b57e8 <_ZN10PriceClass19assembleMessageDataEv>

    // Should we publish on mqtt/thingspeak/display?
    if (prices.pricesUpdated())
   b4d8a:	481b      	ldr	r0, [pc, #108]	; (b4df8 <loop+0x80>)
   b4d8c:	f000 fb88 	bl	b54a0 <_ZN10PriceClass13pricesUpdatedEv>
   b4d90:	b168      	cbz	r0, b4dae <loop+0x36>
    {
        String priceString = prices.getLowPriceIntervals().c_str();
   b4d92:	4919      	ldr	r1, [pc, #100]	; (b4df8 <loop+0x80>)
   b4d94:	a804      	add	r0, sp, #16
   b4d96:	f000 fc31 	bl	b55fc <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>
   b4d9a:	9904      	ldr	r1, [sp, #16]
   b4d9c:	4668      	mov	r0, sp
   b4d9e:	f001 fbbf 	bl	b6520 <_ZN6StringC1EPK19__FlashStringHelper>
      { _M_dispose(); }
   b4da2:	a804      	add	r0, sp, #16
   b4da4:	f004 f810 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4da8:	4668      	mov	r0, sp
   b4daa:	f001 fb6e 	bl	b648a <_ZN6StringD1Ev>
    }

    if (wattSensor.checkForNewReading())
   b4dae:	4813      	ldr	r0, [pc, #76]	; (b4dfc <loop+0x84>)
   b4db0:	f000 ffae 	bl	b5d10 <_ZN6Sensor18checkForNewReadingEv>
   b4db4:	b1c8      	cbz	r0, b4dea <loop+0x72>
    {
        // publishPower(wattSensor.getCurrentReading());
        if (BLE.connected())
   b4db6:	f001 ff9b 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4dba:	f001 fff7 	bl	b6dac <_ZNK8particle14BleLocalDevice9connectedEv>
   b4dbe:	b1a0      	cbz	r0, b4dea <loop+0x72>
        {
            std::string s = std::to_string(wattSensor.getCurrentReading());
   b4dc0:	480e      	ldr	r0, [pc, #56]	; (b4dfc <loop+0x84>)
   b4dc2:	f000 ffa1 	bl	b5d08 <_ZN6Sensor17getCurrentReadingEv>
   b4dc6:	4601      	mov	r1, r0
   b4dc8:	a804      	add	r0, sp, #16
   b4dca:	f7ff feef 	bl	b4bac <_ZNSt7__cxx119to_stringEi>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4dce:	2300      	movs	r3, #0
   b4dd0:	2218      	movs	r2, #24
   b4dd2:	a904      	add	r1, sp, #16
   b4dd4:	480a      	ldr	r0, [pc, #40]	; (b4e00 <loop+0x88>)
   b4dd6:	f001 fe69 	bl	b6aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            WattCharacteristic.setValue(s);
            WhrTodayCharacteristic.setValue("here is some text");
   b4dda:	490a      	ldr	r1, [pc, #40]	; (b4e04 <loop+0x8c>)
   b4ddc:	480a      	ldr	r0, [pc, #40]	; (b4e08 <loop+0x90>)
   b4dde:	2200      	movs	r2, #0
   b4de0:	f001 fec4 	bl	b6b6c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b4de4:	a804      	add	r0, sp, #16
   b4de6:	f003 ffef 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#ifdef USE_MQTT
    mqttKeepAlive();
#endif

    // Waitasecond...
    delay(1000);
   b4dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b4dee:	b00b      	add	sp, #44	; 0x2c
   b4df0:	f85d eb04 	ldr.w	lr, [sp], #4
    delay(1000);
   b4df4:	f002 bf36 	b.w	b7c64 <delay>
   b4df8:	2003e570 	.word	0x2003e570
   b4dfc:	2003e5d0 	.word	0x2003e5d0
   b4e00:	2003e4f8 	.word	0x2003e4f8
   b4e04:	000bb5c0 	.word	0x000bb5c0
   b4e08:	2003e500 	.word	0x2003e500

000b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4e0c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4e0e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4e10:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4e12:	b17c      	cbz	r4, b4e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4e14:	6863      	ldr	r3, [r4, #4]
   b4e16:	3b01      	subs	r3, #1
   b4e18:	6063      	str	r3, [r4, #4]
   b4e1a:	b95b      	cbnz	r3, b4e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4e1c:	6823      	ldr	r3, [r4, #0]
   b4e1e:	4620      	mov	r0, r4
   b4e20:	689b      	ldr	r3, [r3, #8]
   b4e22:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4e24:	68a3      	ldr	r3, [r4, #8]
   b4e26:	3b01      	subs	r3, #1
   b4e28:	60a3      	str	r3, [r4, #8]
   b4e2a:	b91b      	cbnz	r3, b4e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4e2c:	6823      	ldr	r3, [r4, #0]
   b4e2e:	4620      	mov	r0, r4
   b4e30:	68db      	ldr	r3, [r3, #12]
   b4e32:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4e34:	4628      	mov	r0, r5
   b4e36:	bd38      	pop	{r3, r4, r5, pc}

000b4e38 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4e38:	b082      	sub	sp, #8
   b4e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4e3c:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b4e3e:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4e40:	9315      	str	r3, [sp, #84]	; 0x54
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4e42:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4e44:	e9c0 3300 	strd	r3, r3, [r0]
   b4e48:	4606      	mov	r6, r0
   b4e4a:	4694      	mov	ip, r2
   b4e4c:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e50:	ac04      	add	r4, sp, #16
   b4e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e54:	682b      	ldr	r3, [r5, #0]
   b4e56:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b4e58:	ad1a      	add	r5, sp, #104	; 0x68
   b4e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e5c:	ac09      	add	r4, sp, #36	; 0x24
   b4e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e60:	682b      	ldr	r3, [r5, #0]
   b4e62:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4e64:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4e66:	9302      	str	r3, [sp, #8]
   b4e68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b4e6a:	9301      	str	r3, [sp, #4]
   b4e6c:	ab09      	add	r3, sp, #36	; 0x24
   b4e6e:	9300      	str	r3, [sp, #0]
   b4e70:	4630      	mov	r0, r6
   b4e72:	ab04      	add	r3, sp, #16
   b4e74:	4662      	mov	r2, ip
   b4e76:	4639      	mov	r1, r7
   b4e78:	f002 fb58 	bl	b752c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4e7c:	4630      	mov	r0, r6
   b4e7e:	b00f      	add	sp, #60	; 0x3c
   b4e80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4e84:	b002      	add	sp, #8
   b4e86:	4770      	bx	lr

000b4e88 <_GLOBAL__sub_I_argonName>:
    {
        mqttClient.publish("power", powerString);
    }

#endif
   b4e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e8c:	4b44      	ldr	r3, [pc, #272]	; (b4fa0 <_GLOBAL__sub_I_argonName+0x118>)
const BleUuid powermonitorserviceUuid(serviceUuid);
   b4e8e:	4c45      	ldr	r4, [pc, #276]	; (b4fa4 <_GLOBAL__sub_I_argonName+0x11c>)
const BleUuid wattcharacteristicUuid(watt);
   b4e90:	f8df 9144 	ldr.w	r9, [pc, #324]	; b4fd8 <_GLOBAL__sub_I_argonName+0x150>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b4e94:	4f44      	ldr	r7, [pc, #272]	; (b4fa8 <_GLOBAL__sub_I_argonName+0x120>)
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b4e96:	f8df b144 	ldr.w	fp, [pc, #324]	; b4fdc <_GLOBAL__sub_I_argonName+0x154>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b4e9a:	f8df a144 	ldr.w	sl, [pc, #324]	; b4fe0 <_GLOBAL__sub_I_argonName+0x158>
   b4e9e:	2500      	movs	r5, #0
   b4ea0:	701d      	strb	r5, [r3, #0]
const BleUuid powermonitorserviceUuid(serviceUuid);
   b4ea2:	4b42      	ldr	r3, [pc, #264]	; (b4fac <_GLOBAL__sub_I_argonName+0x124>)
   b4ea4:	b08d      	sub	sp, #52	; 0x34
   b4ea6:	6819      	ldr	r1, [r3, #0]
   b4ea8:	4620      	mov	r0, r4
   b4eaa:	f001 fdc1 	bl	b6a30 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt);
   b4eae:	4b40      	ldr	r3, [pc, #256]	; (b4fb0 <_GLOBAL__sub_I_argonName+0x128>)
   b4eb0:	4648      	mov	r0, r9
   b4eb2:	6819      	ldr	r1, [r3, #0]
   b4eb4:	f001 fdbc 	bl	b6a30 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday);
   b4eb8:	4b3e      	ldr	r3, [pc, #248]	; (b4fb4 <_GLOBAL__sub_I_argonName+0x12c>)
   b4eba:	4638      	mov	r0, r7
   b4ebc:	6819      	ldr	r1, [r3, #0]
   b4ebe:	f001 fdb7 	bl	b6a30 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow);
   b4ec2:	4b3d      	ldr	r3, [pc, #244]	; (b4fb8 <_GLOBAL__sub_I_argonName+0x130>)
   b4ec4:	4658      	mov	r0, fp
   b4ec6:	6819      	ldr	r1, [r3, #0]
   b4ec8:	f001 fdb2 	bl	b6a30 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday);
   b4ecc:	4b3b      	ldr	r3, [pc, #236]	; (b4fbc <_GLOBAL__sub_I_argonName+0x134>)
   b4ece:	4650      	mov	r0, sl
   b4ed0:	6819      	ldr	r1, [r3, #0]
   b4ed2:	f001 fdad 	bl	b6a30 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4ed6:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4eda:	4626      	mov	r6, r4
   b4edc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4ede:	f04f 0810 	mov.w	r8, #16
   b4ee2:	eb0d 0c08 	add.w	ip, sp, r8
   b4ee6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4eea:	6833      	ldr	r3, [r6, #0]
   b4eec:	f8cc 3000 	str.w	r3, [ip]
   b4ef0:	f109 0304 	add.w	r3, r9, #4
   b4ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4ef6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4efa:	4642      	mov	r2, r8
   b4efc:	f8d9 3000 	ldr.w	r3, [r9]
   b4f00:	492f      	ldr	r1, [pc, #188]	; (b4fc0 <_GLOBAL__sub_I_argonName+0x138>)
   b4f02:	4830      	ldr	r0, [pc, #192]	; (b4fc4 <_GLOBAL__sub_I_argonName+0x13c>)
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4f04:	f8df 90dc 	ldr.w	r9, [pc, #220]	; b4fe4 <_GLOBAL__sub_I_argonName+0x15c>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4f08:	f7ff ff96 	bl	b4e38 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4f0c:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4f10:	46a6      	mov	lr, r4
   b4f12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4f16:	eb0d 0c08 	add.w	ip, sp, r8
   b4f1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4f1e:	6833      	ldr	r3, [r6, #0]
   b4f20:	f8cc 3000 	str.w	r3, [ip]
   b4f24:	1d3b      	adds	r3, r7, #4
   b4f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4f28:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4f2c:	4642      	mov	r2, r8
   b4f2e:	683b      	ldr	r3, [r7, #0]
   b4f30:	4825      	ldr	r0, [pc, #148]	; (b4fc8 <_GLOBAL__sub_I_argonName+0x140>)
   b4f32:	4649      	mov	r1, r9
   b4f34:	f7ff ff80 	bl	b4e38 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b4f38:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4f3c:	46a4      	mov	ip, r4
   b4f3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4f42:	eb0d 0708 	add.w	r7, sp, r8
   b4f46:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4f48:	6833      	ldr	r3, [r6, #0]
   b4f4a:	603b      	str	r3, [r7, #0]
   b4f4c:	f10b 0304 	add.w	r3, fp, #4
   b4f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4f52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4f56:	f8db 3000 	ldr.w	r3, [fp]
   b4f5a:	481c      	ldr	r0, [pc, #112]	; (b4fcc <_GLOBAL__sub_I_argonName+0x144>)
   b4f5c:	4642      	mov	r2, r8
   b4f5e:	4649      	mov	r1, r9
   b4f60:	f7ff ff6a 	bl	b4e38 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b4f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4f66:	eb0d 0708 	add.w	r7, sp, r8
   b4f6a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4f6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4f70:	6833      	ldr	r3, [r6, #0]
   b4f72:	603b      	str	r3, [r7, #0]
   b4f74:	f10a 0304 	add.w	r3, sl, #4
   b4f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4f7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4f7e:	4649      	mov	r1, r9
   b4f80:	f8da 3000 	ldr.w	r3, [sl]
   b4f84:	4812      	ldr	r0, [pc, #72]	; (b4fd0 <_GLOBAL__sub_I_argonName+0x148>)
   b4f86:	4642      	mov	r2, r8
   b4f88:	f7ff ff56 	bl	b4e38 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
PriceClass prices;
   b4f8c:	4811      	ldr	r0, [pc, #68]	; (b4fd4 <_GLOBAL__sub_I_argonName+0x14c>)
   b4f8e:	f000 f921 	bl	b51d4 <_ZN10PriceClassC1Ev>
SYSTEM_THREAD(ENABLED);
   b4f92:	4629      	mov	r1, r5
   b4f94:	2001      	movs	r0, #1
   b4f96:	b00d      	add	sp, #52	; 0x34
   b4f98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b4f9c:	f001 b8c4 	b.w	b6128 <system_thread_set_state>
   b4fa0:	2003e56c 	.word	0x2003e56c
   b4fa4:	2003e51c 	.word	0x2003e51c
   b4fa8:	2003e530 	.word	0x2003e530
   b4fac:	2003e300 	.word	0x2003e300
   b4fb0:	2003e304 	.word	0x2003e304
   b4fb4:	2003e2f0 	.word	0x2003e2f0
   b4fb8:	2003e2f4 	.word	0x2003e2f4
   b4fbc:	2003e2f8 	.word	0x2003e2f8
   b4fc0:	000bb5d2 	.word	0x000bb5d2
   b4fc4:	2003e4f8 	.word	0x2003e4f8
   b4fc8:	2003e4e8 	.word	0x2003e4e8
   b4fcc:	2003e4f0 	.word	0x2003e4f0
   b4fd0:	2003e500 	.word	0x2003e500
   b4fd4:	2003e570 	.word	0x2003e570
   b4fd8:	2003e508 	.word	0x2003e508
   b4fdc:	2003e558 	.word	0x2003e558
   b4fe0:	2003e544 	.word	0x2003e544
   b4fe4:	000bb5db 	.word	0x000bb5db

000b4fe8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4fe8:	6943      	ldr	r3, [r0, #20]
   b4fea:	b113      	cbz	r3, b4ff2 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4fec:	6983      	ldr	r3, [r0, #24]
   b4fee:	300c      	adds	r0, #12
   b4ff0:	4718      	bx	r3
            callback();
        }
    }
   b4ff2:	4770      	bx	lr

000b4ff4 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4ff4:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4ff6:	2100      	movs	r1, #0
   b4ff8:	4604      	mov	r4, r0
   b4ffa:	4608      	mov	r0, r1
   b4ffc:	f000 ff64 	bl	b5ec8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b5000:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b5002:	4620      	mov	r0, r4
   b5004:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b5006:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b5008:	f000 ff76 	bl	b5ef8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b500c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b500e:	b10c      	cbz	r4, b5014 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b5010:	2301      	movs	r3, #1
   b5012:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b5014:	2100      	movs	r1, #0
   b5016:	2001      	movs	r0, #1
   b5018:	f000 ff56 	bl	b5ec8 <os_thread_scheduling>
            }
        }
        if (t) {
   b501c:	b12c      	cbz	r4, b502a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b501e:	6823      	ldr	r3, [r4, #0]
   b5020:	4620      	mov	r0, r4
   b5022:	689b      	ldr	r3, [r3, #8]
   b5024:	4798      	blx	r3
            t->running = false;
   b5026:	2300      	movs	r3, #0
   b5028:	7123      	strb	r3, [r4, #4]
        }
    }
   b502a:	b002      	add	sp, #8
   b502c:	bd10      	pop	{r4, pc}

000b502e <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b502e:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   b5030:	6803      	ldr	r3, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
   b5032:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b5034:	685c      	ldr	r4, [r3, #4]
   b5036:	689d      	ldr	r5, [r3, #8]
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	6812      	ldr	r2, [r2, #0]
   b503c:	1066      	asrs	r6, r4, #1
   b503e:	eb05 0064 	add.w	r0, r5, r4, asr #1
   b5042:	07e4      	lsls	r4, r4, #31
   b5044:	bf44      	itt	mi
   b5046:	59ac      	ldrmi	r4, [r5, r6]
   b5048:	58e3      	ldrmi	r3, [r4, r3]
      }
   b504a:	bc70      	pop	{r4, r5, r6}
   b504c:	4718      	bx	r3

000b504e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b504e:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b5050:	6803      	ldr	r3, [r0, #0]
   b5052:	685a      	ldr	r2, [r3, #4]
   b5054:	6899      	ldr	r1, [r3, #8]
   b5056:	681b      	ldr	r3, [r3, #0]
   b5058:	1054      	asrs	r4, r2, #1
   b505a:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b505e:	07d2      	lsls	r2, r2, #31
   b5060:	bf48      	it	mi
   b5062:	590a      	ldrmi	r2, [r1, r4]
      }
   b5064:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5068:	bf48      	it	mi
   b506a:	58d3      	ldrmi	r3, [r2, r3]
   b506c:	4718      	bx	r3

000b506e <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b506e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5070:	b538      	push	{r3, r4, r5, lr}
   b5072:	4604      	mov	r4, r0
	switch (__op)
   b5074:	d102      	bne.n	b507c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5076:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5078:	6023      	str	r3, [r4, #0]
	}
   b507a:	e003      	b.n	b5084 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b507c:	2a02      	cmp	r2, #2
   b507e:	d003      	beq.n	b5088 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b5080:	2a03      	cmp	r2, #3
   b5082:	d00d      	beq.n	b50a0 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b5084:	2000      	movs	r0, #0
   b5086:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5088:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b508a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b508c:	f7ff fd7d 	bl	b4b8a <_Znwj>
   b5090:	4603      	mov	r3, r0
   b5092:	2800      	cmp	r0, #0
   b5094:	d0f0      	beq.n	b5078 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b5096:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b509a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b509e:	e7eb      	b.n	b5078 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b50a0:	6800      	ldr	r0, [r0, #0]
   b50a2:	2800      	cmp	r0, #0
   b50a4:	d0ee      	beq.n	b5084 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b50a6:	210c      	movs	r1, #12
   b50a8:	f7ff fd75 	bl	b4b96 <_ZdlPvj>
   b50ac:	e7ea      	b.n	b5084 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM10PriceClassFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b50ae <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b50ae:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b50b0:	b538      	push	{r3, r4, r5, lr}
   b50b2:	4604      	mov	r4, r0
	switch (__op)
   b50b4:	d102      	bne.n	b50bc <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b50b6:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b50b8:	6023      	str	r3, [r4, #0]
	}
   b50ba:	e003      	b.n	b50c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b50bc:	2a02      	cmp	r2, #2
   b50be:	d003      	beq.n	b50c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b50c0:	2a03      	cmp	r2, #3
   b50c2:	d00d      	beq.n	b50e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b50c4:	2000      	movs	r0, #0
   b50c6:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b50c8:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b50ca:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b50cc:	f7ff fd5d 	bl	b4b8a <_Znwj>
   b50d0:	4603      	mov	r3, r0
   b50d2:	2800      	cmp	r0, #0
   b50d4:	d0f0      	beq.n	b50b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b50d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b50da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b50de:	e7eb      	b.n	b50b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b50e0:	6800      	ldr	r0, [r0, #0]
   b50e2:	2800      	cmp	r0, #0
   b50e4:	d0ee      	beq.n	b50c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b50e6:	210c      	movs	r1, #12
   b50e8:	f7ff fd55 	bl	b4b96 <_ZdlPvj>
   b50ec:	e7ea      	b.n	b50c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PriceClassFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b50f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>:
      append(const _CharT* __s)
   b50f0:	b513      	push	{r0, r1, r4, lr}
   b50f2:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b50f4:	4608      	mov	r0, r1
   b50f6:	9101      	str	r1, [sp, #4]
   b50f8:	f7ff fcec 	bl	b4ad4 <strlen>
	if (this->max_size() - (this->size() - __n1) < __n2)
   b50fc:	6863      	ldr	r3, [r4, #4]
   b50fe:	9901      	ldr	r1, [sp, #4]
   b5100:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
   b5104:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
   b5108:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   b510c:	333f      	adds	r3, #63	; 0x3f
   b510e:	4298      	cmp	r0, r3
   b5110:	4602      	mov	r2, r0
   b5112:	d902      	bls.n	b511a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x2a>
	  __throw_length_error(__N(__s));
   b5114:	4804      	ldr	r0, [pc, #16]	; (b5128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0+0x38>)
   b5116:	f003 fd65 	bl	b8be4 <_ZSt20__throw_length_errorPKc>
	return _M_append(__s, __n);
   b511a:	4620      	mov	r0, r4
      }
   b511c:	b002      	add	sp, #8
   b511e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _M_append(__s, __n);
   b5122:	f003 bf97 	b.w	b9054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
   b5126:	bf00      	nop
   b5128:	000bb76f 	.word	0x000bb76f

000b512c <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b512c:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b512e:	6880      	ldr	r0, [r0, #8]
   b5130:	b130      	cbz	r0, b5140 <_ZN5Timer4stopEj.isra.0+0x14>
   b5132:	2300      	movs	r3, #0
   b5134:	e9cd 1300 	strd	r1, r3, [sp]
   b5138:	461a      	mov	r2, r3
   b513a:	2102      	movs	r1, #2
   b513c:	f000 fee4 	bl	b5f08 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b5140:	b003      	add	sp, #12
   b5142:	f85d fb04 	ldr.w	pc, [sp], #4

000b5146 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5146:	b538      	push	{r3, r4, r5, lr}
   b5148:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b514a:	b16c      	cbz	r4, b5168 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x22>
	{
	  _M_erase(_S_right(__x));
   b514c:	68e0      	ldr	r0, [r4, #12]
   b514e:	f7ff fffa 	bl	b5146 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { _M_dispose(); }
   b5152:	f104 0014 	add.w	r0, r4, #20
      { return static_cast<_Link_type>(__x->_M_left); }
   b5156:	68a5      	ldr	r5, [r4, #8]
   b5158:	f003 fe36 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b515c:	4620      	mov	r0, r4
   b515e:	212c      	movs	r1, #44	; 0x2c
   b5160:	f7ff fd19 	bl	b4b96 <_ZdlPvj>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   b5164:	462c      	mov	r4, r5
      }
   b5166:	e7f0      	b.n	b514a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
	}
    }
   b5168:	bd38      	pop	{r3, r4, r5, pc}

000b516a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b516a:	b510      	push	{r4, lr}
      if (_M_manager)
   b516c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b516e:	4604      	mov	r4, r0
      if (_M_manager)
   b5170:	b113      	cbz	r3, b5178 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5172:	2203      	movs	r2, #3
   b5174:	4601      	mov	r1, r0
   b5176:	4798      	blx	r3
    }
   b5178:	4620      	mov	r0, r4
   b517a:	bd10      	pop	{r4, pc}

000b517c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b517c:	b538      	push	{r3, r4, r5, lr}
   b517e:	4b0f      	ldr	r3, [pc, #60]	; (b51bc <_ZN5TimerD1Ev+0x40>)
   b5180:	6003      	str	r3, [r0, #0]
        if (handle) {
   b5182:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b5184:	4604      	mov	r4, r0
        if (handle) {
   b5186:	b19b      	cbz	r3, b51b0 <_ZN5TimerD1Ev+0x34>
            stop();
   b5188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b518c:	f7ff ffce 	bl	b512c <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b5190:	68a0      	ldr	r0, [r4, #8]
   b5192:	2100      	movs	r1, #0
   b5194:	f000 fed8 	bl	b5f48 <os_timer_set_id>
            while (running) {
   b5198:	7923      	ldrb	r3, [r4, #4]
   b519a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b519e:	b113      	cbz	r3, b51a6 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b51a0:	f000 fe8a 	bl	b5eb8 <os_thread_yield>
            while (running) {
   b51a4:	e7f8      	b.n	b5198 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b51a6:	68a0      	ldr	r0, [r4, #8]
   b51a8:	4629      	mov	r1, r5
   b51aa:	f000 fe9d 	bl	b5ee8 <os_timer_destroy>
            handle = nullptr;
   b51ae:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b51b0:	f104 000c 	add.w	r0, r4, #12
   b51b4:	f7ff ffd9 	bl	b516a <_ZNSt14_Function_baseD1Ev>
    }
   b51b8:	4620      	mov	r0, r4
   b51ba:	bd38      	pop	{r3, r4, r5, pc}
   b51bc:	000bb8d8 	.word	0x000bb8d8

000b51c0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b51c0:	b510      	push	{r4, lr}
   b51c2:	4604      	mov	r4, r0
    }
   b51c4:	f7ff ffda 	bl	b517c <_ZN5TimerD1Ev>
   b51c8:	4620      	mov	r0, r4
   b51ca:	211c      	movs	r1, #28
   b51cc:	f7ff fce3 	bl	b4b96 <_ZdlPvj>
   b51d0:	4620      	mov	r0, r4
   b51d2:	bd10      	pop	{r4, pc}

000b51d4 <_ZN10PriceClassC1Ev>:
#define PRICE_INDEX 20
#define MILLISEC_HOUR 3600000
#define MILLISEC_MINUTE 60000

// Constructor
PriceClass::PriceClass()
   b51d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	  : _Node_allocator()
   b51d6:	1d03      	adds	r3, r0, #4
      _M_header._M_color = _S_red;
   b51d8:	2500      	movs	r5, #0
      _M_header._M_left = &_M_header;
   b51da:	e9c0 5302 	strd	r5, r3, [r0, #8]
      _M_node_count = 0;
   b51de:	e9c0 3504 	strd	r3, r5, [r0, #16]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b51e2:	f100 034c 	add.w	r3, r0, #76	; 0x4c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b51e6:	e9c0 5507 	strd	r5, r5, [r0, #28]
   b51ea:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
   b51ee:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
      { _M_string_length = __length; }
   b51f2:	e9c0 3511 	strd	r3, r5, [r0, #68]	; 0x44
      _M_header._M_color = _S_red;
   b51f6:	7105      	strb	r5, [r0, #4]
    : newPricesReceived{false},
      messageDataReady{false}
   b51f8:	8305      	strh	r5, [r0, #24]
      { __c1 = __c2; }
   b51fa:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
PriceClass::PriceClass()
   b51fe:	b089      	sub	sp, #36	; 0x24
   b5200:	4604      	mov	r4, r0
{
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b5202:	201c      	movs	r0, #28
   b5204:	f7ff fcc1 	bl	b4b8a <_Znwj>
   b5208:	4606      	mov	r6, r0
   b520a:	2800      	cmp	r0, #0
   b520c:	d033      	beq.n	b5276 <_ZN10PriceClassC1Ev+0xa2>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b520e:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5210:	9506      	str	r5, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5212:	f7ff fcba 	bl	b4b8a <_Znwj>
   b5216:	b118      	cbz	r0, b5220 <_ZN10PriceClassC1Ev+0x4c>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5218:	4b19      	ldr	r3, [pc, #100]	; (b5280 <_ZN10PriceClassC1Ev+0xac>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b521a:	6084      	str	r4, [r0, #8]
   b521c:	e9c0 3500 	strd	r3, r5, [r0]
   b5220:	9004      	str	r0, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5222:	ad04      	add	r5, sp, #16
   b5224:	e895 0003 	ldmia.w	r5, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5228:	4b16      	ldr	r3, [pc, #88]	; (b5284 <_ZN10PriceClassC1Ev+0xb0>)
   b522a:	6033      	str	r3, [r6, #0]
   b522c:	2300      	movs	r3, #0
   b522e:	7133      	strb	r3, [r6, #4]
   b5230:	60b3      	str	r3, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5232:	f106 020c 	add.w	r2, r6, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5236:	af02      	add	r7, sp, #8
   b5238:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b523c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5240:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5244:	e897 0003 	ldmia.w	r7, {r0, r1}
   b5248:	e882 0003 	stmia.w	r2, {r0, r1}
   b524c:	4a0e      	ldr	r2, [pc, #56]	; (b5288 <_ZN10PriceClassC1Ev+0xb4>)
   b524e:	6172      	str	r2, [r6, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5250:	69b2      	ldr	r2, [r6, #24]
   b5252:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b5254:	4a0d      	ldr	r2, [pc, #52]	; (b528c <_ZN10PriceClassC1Ev+0xb8>)
   b5256:	61b2      	str	r2, [r6, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5258:	9306      	str	r3, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b525a:	9301      	str	r3, [sp, #4]
   b525c:	2301      	movs	r3, #1
   b525e:	9300      	str	r3, [sp, #0]
   b5260:	4a0b      	ldr	r2, [pc, #44]	; (b5290 <_ZN10PriceClassC1Ev+0xbc>)
   b5262:	4633      	mov	r3, r6
   b5264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5268:	f106 0008 	add.w	r0, r6, #8
   b526c:	f000 fe34 	bl	b5ed8 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5270:	4628      	mov	r0, r5
   b5272:	f7ff ff7a 	bl	b516a <_ZNSt14_Function_baseD1Ev>
}
   b5276:	4620      	mov	r0, r4
    updateTimer = new Timer(1000, &PriceClass::timedUpdate, *this, true);
   b5278:	65e6      	str	r6, [r4, #92]	; 0x5c
}
   b527a:	b009      	add	sp, #36	; 0x24
   b527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b527e:	bf00      	nop
   b5280:	000b5435 	.word	0x000b5435
   b5284:	000bb8d8 	.word	0x000bb8d8
   b5288:	000b50af 	.word	0x000b50af
   b528c:	000b504f 	.word	0x000b504f
   b5290:	000b4ff5 	.word	0x000b4ff5

000b5294 <_ZN10PriceClass18requestPriceUpdateEi>:
// #####################################################################
/// @brief This method makes a publish request, to fire off the webhook,
// which in turn will fire off the "prices" event, when data is ready.
// #####################################################################
void PriceClass::requestPriceUpdate(int day)
{
   b5294:	b570      	push	{r4, r5, r6, lr}
   b5296:	b0a0      	sub	sp, #128	; 0x80
   b5298:	460c      	mov	r4, r1
   b529a:	4605      	mov	r5, r0
    String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b529c:	f002 fccc 	bl	b7c38 <_ZN9TimeClass4yearEv>
   b52a0:	4940      	ldr	r1, [pc, #256]	; (b53a4 <_ZN10PriceClass18requestPriceUpdateEi+0x110>)
   b52a2:	4602      	mov	r2, r0
   b52a4:	a808      	add	r0, sp, #32
   b52a6:	f001 f9b1 	bl	b660c <_ZN6String6formatEPKcz>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b52aa:	a908      	add	r1, sp, #32
   b52ac:	a810      	add	r0, sp, #64	; 0x40
   b52ae:	f001 f95a 	bl	b6566 <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b52b2:	f002 fcb9 	bl	b7c28 <_ZN9TimeClass5monthEv>
   b52b6:	493c      	ldr	r1, [pc, #240]	; (b53a8 <_ZN10PriceClass18requestPriceUpdateEi+0x114>)
   b52b8:	4602      	mov	r2, r0
   b52ba:	a80c      	add	r0, sp, #48	; 0x30
   b52bc:	f001 f9a6 	bl	b660c <_ZN6String6formatEPKcz>
   b52c0:	a90c      	add	r1, sp, #48	; 0x30
   b52c2:	a810      	add	r0, sp, #64	; 0x40
   b52c4:	f001 f995 	bl	b65f2 <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day\": \"%02d\", ", day) +
   b52c8:	4622      	mov	r2, r4
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b52ca:	4606      	mov	r6, r0
                  String::format("\"day\": \"%02d\", ", day) +
   b52cc:	4937      	ldr	r1, [pc, #220]	; (b53ac <_ZN10PriceClass18requestPriceUpdateEi+0x118>)
   b52ce:	a814      	add	r0, sp, #80	; 0x50
   b52d0:	f001 f99c 	bl	b660c <_ZN6String6formatEPKcz>
   b52d4:	a914      	add	r1, sp, #80	; 0x50
   b52d6:	4630      	mov	r0, r6
   b52d8:	f001 f98b 	bl	b65f2 <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b52dc:	1ca2      	adds	r2, r4, #2
   b52de:	4934      	ldr	r1, [pc, #208]	; (b53b0 <_ZN10PriceClass18requestPriceUpdateEi+0x11c>)
                  String::format("\"day\": \"%02d\", ", day) +
   b52e0:	4606      	mov	r6, r0
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b52e2:	a818      	add	r0, sp, #96	; 0x60
   b52e4:	f001 f992 	bl	b660c <_ZN6String6formatEPKcz>
   b52e8:	a918      	add	r1, sp, #96	; 0x60
   b52ea:	4630      	mov	r0, r6
   b52ec:	f001 f981 	bl	b65f2 <_ZplRK15StringSumHelperRK6String>
   b52f0:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b52f2:	f002 fc75 	bl	b7be0 <_ZN9TimeClass4hourEv>
   b52f6:	492f      	ldr	r1, [pc, #188]	; (b53b4 <_ZN10PriceClass18requestPriceUpdateEi+0x120>)
   b52f8:	4602      	mov	r2, r0
   b52fa:	a81c      	add	r0, sp, #112	; 0x70
   b52fc:	f001 f986 	bl	b660c <_ZN6String6formatEPKcz>
   b5300:	a91c      	add	r1, sp, #112	; 0x70
   b5302:	4620      	mov	r0, r4
   b5304:	f001 f975 	bl	b65f2 <_ZplRK15StringSumHelperRK6String>
   b5308:	4601      	mov	r1, r0
   b530a:	a804      	add	r0, sp, #16
   b530c:	f001 f92b 	bl	b6566 <_ZN6StringC1ERKS_>
   b5310:	a81c      	add	r0, sp, #112	; 0x70
   b5312:	f001 f8ba 	bl	b648a <_ZN6StringD1Ev>
   b5316:	a818      	add	r0, sp, #96	; 0x60
   b5318:	f001 f8b7 	bl	b648a <_ZN6StringD1Ev>
   b531c:	a814      	add	r0, sp, #80	; 0x50
   b531e:	f001 f8b4 	bl	b648a <_ZN6StringD1Ev>
   b5322:	a80c      	add	r0, sp, #48	; 0x30
   b5324:	f001 f8b1 	bl	b648a <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5328:	a810      	add	r0, sp, #64	; 0x40
   b532a:	f001 f8ae 	bl	b648a <_ZN6StringD1Ev>
   b532e:	a808      	add	r0, sp, #32
   b5330:	f001 f8ab 	bl	b648a <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5334:	4b20      	ldr	r3, [pc, #128]	; (b53b8 <_ZN10PriceClass18requestPriceUpdateEi+0x124>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5336:	9a04      	ldr	r2, [sp, #16]
   b5338:	781b      	ldrb	r3, [r3, #0]
   b533a:	f88d 3000 	strb.w	r3, [sp]
   b533e:	491f      	ldr	r1, [pc, #124]	; (b53bc <_ZN10PriceClass18requestPriceUpdateEi+0x128>)
   b5340:	233c      	movs	r3, #60	; 0x3c
   b5342:	a81c      	add	r0, sp, #112	; 0x70
   b5344:	f002 fe6e 	bl	b8024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b5348:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   b534a:	b17c      	cbz	r4, b536c <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
      if (--_M_use_count == 0)
   b534c:	6863      	ldr	r3, [r4, #4]
   b534e:	3b01      	subs	r3, #1
   b5350:	6063      	str	r3, [r4, #4]
   b5352:	b95b      	cbnz	r3, b536c <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
          _M_dispose();
   b5354:	6823      	ldr	r3, [r4, #0]
   b5356:	4620      	mov	r0, r4
   b5358:	689b      	ldr	r3, [r3, #8]
   b535a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b535c:	68a3      	ldr	r3, [r4, #8]
   b535e:	3b01      	subs	r3, #1
   b5360:	60a3      	str	r3, [r4, #8]
   b5362:	b91b      	cbnz	r3, b536c <_ZN10PriceClass18requestPriceUpdateEi+0xd8>
            _M_destroy();
   b5364:	6823      	ldr	r3, [r4, #0]
   b5366:	4620      	mov	r0, r4
   b5368:	68db      	ldr	r3, [r3, #12]
   b536a:	4798      	blx	r3
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b536c:	f002 fc27 	bl	b7bbe <_ZN9TimeClass3nowEv>
   b5370:	4602      	mov	r2, r0
   b5372:	17c3      	asrs	r3, r0, #31
   b5374:	a81c      	add	r0, sp, #112	; 0x70
   b5376:	f002 fbc9 	bl	b7b0c <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b537a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	return __builtin_strlen(__s);
   b537c:	9303      	str	r3, [sp, #12]
   b537e:	4618      	mov	r0, r3
   b5380:	f7ff fba8 	bl	b4ad4 <strlen>
	return _M_replace(size_type(0), this->size(), __s,
   b5384:	9b03      	ldr	r3, [sp, #12]
   b5386:	6caa      	ldr	r2, [r5, #72]	; 0x48
   b5388:	9000      	str	r0, [sp, #0]
   b538a:	2100      	movs	r1, #0
   b538c:	f105 0044 	add.w	r0, r5, #68	; 0x44
   b5390:	f003 fde2 	bl	b8f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>

    // Trigger the integration
    Particle.publish("elpriser", data);
    lastUpdate = Time.timeStr();
   b5394:	a81c      	add	r0, sp, #112	; 0x70
   b5396:	f001 f878 	bl	b648a <_ZN6StringD1Ev>
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b539a:	a804      	add	r0, sp, #16
   b539c:	f001 f875 	bl	b648a <_ZN6StringD1Ev>
}
   b53a0:	b020      	add	sp, #128	; 0x80
   b53a2:	bd70      	pop	{r4, r5, r6, pc}
   b53a4:	000bb784 	.word	0x000bb784
   b53a8:	000bb795 	.word	0x000bb795
   b53ac:	000bb7a7 	.word	0x000bb7a7
   b53b0:	000bb7b7 	.word	0x000bb7b7
   b53b4:	000bb7cb 	.word	0x000bb7cb
   b53b8:	2003e5dc 	.word	0x2003e5dc
   b53bc:	000bb7dc 	.word	0x000bb7dc

000b53c0 <_ZN10PriceClass28getpricesSubscriptionHandlerEPKcS1_>:
{
   b53c0:	b510      	push	{r4, lr}
   b53c2:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b53c4:	f002 fc24 	bl	b7c10 <_ZN9TimeClass3dayEv>
   b53c8:	4601      	mov	r1, r0
   b53ca:	4620      	mov	r0, r4
}
   b53cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b53d0:	f7ff bf60 	b.w	b5294 <_ZN10PriceClass18requestPriceUpdateEi>

000b53d4 <_ZN10PriceClass12updatePricesEv>:

// ####################################################################
/// @brief This is a public method, for requesting an update on prices.
// ####################################################################
void PriceClass::updatePrices()
{
   b53d4:	b510      	push	{r4, lr}
   b53d6:	4604      	mov	r4, r0
    requestPriceUpdate(Time.day());
   b53d8:	f002 fc1a 	bl	b7c10 <_ZN9TimeClass3dayEv>
   b53dc:	4601      	mov	r1, r0
   b53de:	4620      	mov	r0, r4
}
   b53e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    requestPriceUpdate(Time.day());
   b53e4:	f7ff bf56 	b.w	b5294 <_ZN10PriceClass18requestPriceUpdateEi>

000b53e8 <_ZN10PriceClass14timedCountDownEj>:

// ##########################################################################
/// @brief Small method for setting the timer period, and starting the timer.
// ##########################################################################
void PriceClass::timedCountDown(uint period)
{
   b53e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b53ea:	4604      	mov	r4, r0
   b53ec:	9103      	str	r1, [sp, #12]
    updateTimer->stop();
   b53ee:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b53f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b53f4:	f7ff fe9a 	bl	b512c <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b53f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   b53fa:	6890      	ldr	r0, [r2, #8]
   b53fc:	b140      	cbz	r0, b5410 <_ZN10PriceClass14timedCountDownEj+0x28>
   b53fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5402:	2200      	movs	r2, #0
   b5404:	e9cd 1200 	strd	r1, r2, [sp]
   b5408:	9b03      	ldr	r3, [sp, #12]
   b540a:	2103      	movs	r1, #3
   b540c:	f000 fd7c 	bl	b5f08 <os_timer_change>
    updateTimer->changePeriod(period);
    updateTimer->start();
   b5410:	6de4      	ldr	r4, [r4, #92]	; 0x5c
        stop(fromISR);
   b5412:	2100      	movs	r1, #0
   b5414:	4620      	mov	r0, r4
   b5416:	f7ff fe89 	bl	b512c <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b541a:	68a0      	ldr	r0, [r4, #8]
   b541c:	b140      	cbz	r0, b5430 <_ZN10PriceClass14timedCountDownEj+0x48>
   b541e:	2300      	movs	r3, #0
   b5420:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5424:	e9cd 2300 	strd	r2, r3, [sp]
   b5428:	4619      	mov	r1, r3
   b542a:	461a      	mov	r2, r3
   b542c:	f000 fd6c 	bl	b5f08 <os_timer_change>
}
   b5430:	b004      	add	sp, #16
   b5432:	bd10      	pop	{r4, pc}

000b5434 <_ZN10PriceClass11timedUpdateEv>:
{
   b5434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5436:	4605      	mov	r5, r0
    uint8_t hourNow = Time.hour();
   b5438:	f002 fbd2 	bl	b7be0 <_ZN9TimeClass4hourEv>
   b543c:	b2c4      	uxtb	r4, r0
    if (hourNow == 11 || hourNow == 23)
   b543e:	2c0b      	cmp	r4, #11
   b5440:	d001      	beq.n	b5446 <_ZN10PriceClass11timedUpdateEv+0x12>
   b5442:	2c17      	cmp	r4, #23
   b5444:	d110      	bne.n	b5468 <_ZN10PriceClass11timedUpdateEv+0x34>
        timerPeriod = (12 * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b5446:	f002 fbd7 	bl	b7bf8 <_ZN9TimeClass6minuteEv>
        timedCountDown(timerPeriod);
   b544a:	4b12      	ldr	r3, [pc, #72]	; (b5494 <_ZN10PriceClass11timedUpdateEv+0x60>)
   b544c:	4912      	ldr	r1, [pc, #72]	; (b5498 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b544e:	fb01 3100 	mla	r1, r1, r0, r3
   b5452:	4628      	mov	r0, r5
   b5454:	f7ff ffc8 	bl	b53e8 <_ZN10PriceClass14timedCountDownEj>
        requestPriceUpdate(Time.day());
   b5458:	f002 fbda 	bl	b7c10 <_ZN9TimeClass3dayEv>
   b545c:	4601      	mov	r1, r0
   b545e:	4628      	mov	r0, r5
}
   b5460:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        requestPriceUpdate(Time.day());
   b5464:	f7ff bf16 	b.w	b5294 <_ZN10PriceClass18requestPriceUpdateEi>
        if (hourNow < 11)
   b5468:	2c0a      	cmp	r4, #10
   b546a:	4f0b      	ldr	r7, [pc, #44]	; (b5498 <_ZN10PriceClass11timedUpdateEv+0x64>)
   b546c:	4e0b      	ldr	r6, [pc, #44]	; (b549c <_ZN10PriceClass11timedUpdateEv+0x68>)
   b546e:	d80b      	bhi.n	b5488 <_ZN10PriceClass11timedUpdateEv+0x54>
            timerPeriod = ((11 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b5470:	f002 fbc2 	bl	b7bf8 <_ZN9TimeClass6minuteEv>
   b5474:	f1c4 040b 	rsb	r4, r4, #11
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b5478:	4378      	muls	r0, r7
            timedCountDown(timerPeriod);
   b547a:	fb06 0104 	mla	r1, r6, r4, r0
   b547e:	4628      	mov	r0, r5
}
   b5480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            timedCountDown(timerPeriod);
   b5484:	f7ff bfb0 	b.w	b53e8 <_ZN10PriceClass14timedCountDownEj>
            timerPeriod = ((23 - hourNow) * MILLISEC_HOUR) - (Time.minute() * MILLISEC_MINUTE);
   b5488:	f002 fbb6 	bl	b7bf8 <_ZN9TimeClass6minuteEv>
   b548c:	f1c4 0417 	rsb	r4, r4, #23
   b5490:	e7f2      	b.n	b5478 <_ZN10PriceClass11timedUpdateEv+0x44>
   b5492:	bf00      	nop
   b5494:	02932e00 	.word	0x02932e00
   b5498:	ffff15a0 	.word	0xffff15a0
   b549c:	0036ee80 	.word	0x0036ee80

000b54a0 <_ZN10PriceClass13pricesUpdatedEv>:
/// @brief Method for checking if new price data has not yet been read.
// ####################################################################
bool PriceClass::pricesUpdated()
{
    return newPricesReceived;
}
   b54a0:	7e00      	ldrb	r0, [r0, #24]
   b54a2:	4770      	bx	lr

000b54a4 <_ZN10PriceClass18isMessageDataReadyEv>:

bool PriceClass::isMessageDataReady()
{
    return messageDataReady;
   b54a4:	7e40      	ldrb	r0, [r0, #25]
   b54a6:	4770      	bx	lr

000b54a8 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b54a8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b54aa:	2300      	movs	r3, #0
   b54ac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b54ae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b54b0:	4604      	mov	r4, r0
   b54b2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b54b4:	b12b      	cbz	r3, b54c2 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b54b6:	2202      	movs	r2, #2
   b54b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b54ba:	68eb      	ldr	r3, [r5, #12]
   b54bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b54be:	68ab      	ldr	r3, [r5, #8]
   b54c0:	60a3      	str	r3, [r4, #8]
    }
   b54c2:	4620      	mov	r0, r4
   b54c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b54c8 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
   b54c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b54ca:	b091      	sub	sp, #68	; 0x44
   b54cc:	ad02      	add	r5, sp, #8
   b54ce:	e885 0006 	stmia.w	r5, {r1, r2}
   b54d2:	4606      	mov	r6, r0
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b54d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b54d8:	ac05      	add	r4, sp, #20
   b54da:	e884 0005 	stmia.w	r4, {r0, r2}
   b54de:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54e0:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b54e2:	2300      	movs	r3, #0
   b54e4:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54e6:	f7ff fb50 	bl	b4b8a <_Znwj>
   b54ea:	4602      	mov	r2, r0
   b54ec:	b120      	cbz	r0, b54f8 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x30>
      _Bind(_Bind&&) = default;
   b54ee:	e894 0003 	ldmia.w	r4, {r0, r1}
   b54f2:	e882 0003 	stmia.w	r2, {r0, r1}
   b54f6:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b54f8:	4b12      	ldr	r3, [pc, #72]	; (b5544 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x7c>)
   b54fa:	930b      	str	r3, [sp, #44]	; 0x2c
        return subscribe_wiring(eventName, handler, scope);
   b54fc:	a908      	add	r1, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b54fe:	4b12      	ldr	r3, [pc, #72]	; (b5548 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x80>)
   b5500:	930a      	str	r3, [sp, #40]	; 0x28
   b5502:	a80c      	add	r0, sp, #48	; 0x30
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5504:	9208      	str	r2, [sp, #32]
   b5506:	f7ff ffcf 	bl	b54a8 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    static particle::Future<bool> publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags);

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   b550a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b550c:	b18b      	cbz	r3, b5532 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   b550e:	2010      	movs	r0, #16
   b5510:	f7ff fb3b 	bl	b4b8a <_Znwj>
   b5514:	4604      	mov	r4, r0
   b5516:	b160      	cbz	r0, b5532 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
   b5518:	a90c      	add	r1, sp, #48	; 0x30
   b551a:	f7ff ffc5 	bl	b54a8 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-function-type"
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   b551e:	2300      	movs	r3, #0
   b5520:	e9cd 3300 	strd	r3, r3, [sp]
   b5524:	4909      	ldr	r1, [pc, #36]	; (b554c <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x84>)
   b5526:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b552a:	4622      	mov	r2, r4
   b552c:	4630      	mov	r0, r6
   b552e:	f000 fea7 	bl	b6280 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   b5532:	a80c      	add	r0, sp, #48	; 0x30
   b5534:	f7ff fe19 	bl	b516a <_ZNSt14_Function_baseD1Ev>
   b5538:	a808      	add	r0, sp, #32
   b553a:	f7ff fe16 	bl	b516a <_ZNSt14_Function_baseD1Ev>
    }
   b553e:	b011      	add	sp, #68	; 0x44
   b5540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5542:	bf00      	nop
   b5544:	000b502f 	.word	0x000b502f
   b5548:	000b506f 	.word	0x000b506f
   b554c:	000b7e3b 	.word	0x000b7e3b

000b5550 <_ZN10PriceClass17initSubscriptionsEv>:
{
   b5550:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5552:	b085      	sub	sp, #20
   b5554:	2700      	movs	r7, #0
    return subscribe(name, handler, ALL_DEVICES);
}

template<typename T>
inline bool CloudClass::subscribe(const char* name, void (T::*handler)(const char*, const char*), T* instance) {
    return subscribe(name, handler, instance, ALL_DEVICES);
   b5556:	2601      	movs	r6, #1
   b5558:	4b0f      	ldr	r3, [pc, #60]	; (b5598 <_ZN10PriceClass17initSubscriptionsEv+0x48>)
   b555a:	9302      	str	r3, [sp, #8]
   b555c:	9703      	str	r7, [sp, #12]
   b555e:	9600      	str	r6, [sp, #0]
   b5560:	ad02      	add	r5, sp, #8
   b5562:	4604      	mov	r4, r0
   b5564:	e895 0006 	ldmia.w	r5, {r1, r2}
   b5568:	4603      	mov	r3, r0
   b556a:	480c      	ldr	r0, [pc, #48]	; (b559c <_ZN10PriceClass17initSubscriptionsEv+0x4c>)
   b556c:	f7ff ffac 	bl	b54c8 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    Particle.subscribe("get_prices", &PriceClass::getpricesSubscriptionHandler, this);
   b5570:	4b0b      	ldr	r3, [pc, #44]	; (b55a0 <_ZN10PriceClass17initSubscriptionsEv+0x50>)
   b5572:	9600      	str	r6, [sp, #0]
   b5574:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b5578:	480a      	ldr	r0, [pc, #40]	; (b55a4 <_ZN10PriceClass17initSubscriptionsEv+0x54>)
   b557a:	e895 0006 	ldmia.w	r5, {r1, r2}
   b557e:	4623      	mov	r3, r4
   b5580:	f7ff ffa2 	bl	b54c8 <_ZN10CloudClass9subscribeI10PriceClassEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    updatePrices();
   b5584:	4620      	mov	r0, r4
   b5586:	f7ff ff25 	bl	b53d4 <_ZN10PriceClass12updatePricesEv>
    timedUpdate();
   b558a:	4620      	mov	r0, r4
}
   b558c:	b005      	add	sp, #20
   b558e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    timedUpdate();
   b5592:	f7ff bf4f 	b.w	b5434 <_ZN10PriceClass11timedUpdateEv>
   b5596:	bf00      	nop
   b5598:	000b5aad 	.word	0x000b5aad
   b559c:	000bb813 	.word	0x000bb813
   b55a0:	000b53c1 	.word	0x000b53c1
   b55a4:	000bb80f 	.word	0x000bb80f

000b55a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b55a8:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b55ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b55ae:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b55b0:	6003      	str	r3, [r0, #0]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b55b2:	460d      	mov	r5, r1
   b55b4:	b1e1      	cbz	r1, b55f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x48>
   b55b6:	4608      	mov	r0, r1
   b55b8:	f7ff fa8c 	bl	b4ad4 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b55bc:	280f      	cmp	r0, #15
   b55be:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b55c2:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b55c4:	d907      	bls.n	b55d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b55c6:	2200      	movs	r2, #0
   b55c8:	a901      	add	r1, sp, #4
   b55ca:	4620      	mov	r0, r4
   b55cc:	f003 fbda 	bl	b8d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b55d0:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b55d2:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b55d4:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b55d6:	6820      	ldr	r0, [r4, #0]
   b55d8:	4632      	mov	r2, r6
   b55da:	4629      	mov	r1, r5
   b55dc:	f003 fc65 	bl	b8eaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b55e0:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b55e2:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b55e4:	6063      	str	r3, [r4, #4]
   b55e6:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b55e8:	4620      	mov	r0, r4
   b55ea:	54d1      	strb	r1, [r2, r3]
   b55ec:	b002      	add	sp, #8
   b55ee:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b55f0:	4801      	ldr	r0, [pc, #4]	; (b55f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
   b55f2:	f003 faf1 	bl	b8bd8 <_ZSt19__throw_logic_errorPKc>
   b55f6:	bf00      	nop
   b55f8:	000bb7e5 	.word	0x000bb7e5

000b55fc <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev>:
{
   b55fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!newPricesReceived)
   b5600:	7e0b      	ldrb	r3, [r1, #24]
{
   b5602:	b08c      	sub	sp, #48	; 0x30
   b5604:	4604      	mov	r4, r0
   b5606:	460e      	mov	r6, r1
    if (!newPricesReceived)
   b5608:	b93b      	cbnz	r3, b561a <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x1e>
        return "No prices yet";
   b560a:	493e      	ldr	r1, [pc, #248]	; (b5704 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x108>)
   b560c:	aa06      	add	r2, sp, #24
   b560e:	f7ff ffcb 	bl	b55a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
}
   b5612:	4620      	mov	r0, r4
   b5614:	b00c      	add	sp, #48	; 0x30
   b5616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b561a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b561c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b5710 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x114>
    uint8_t lastIndexedHour = lowPriceHours[0].hour;
   b5620:	781d      	ldrb	r5, [r3, #0]
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b5622:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b5714 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x118>
    std::string lowHourIntervals{(String)lastIndexedHour};
   b5626:	220a      	movs	r2, #10
   b5628:	4629      	mov	r1, r5
   b562a:	a802      	add	r0, sp, #8
   b562c:	f000 ffb8 	bl	b65a0 <_ZN6StringC1Ehh>
   b5630:	9902      	ldr	r1, [sp, #8]
   b5632:	aa01      	add	r2, sp, #4
   b5634:	a806      	add	r0, sp, #24
   b5636:	f7ff ffb7 	bl	b55a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b563a:	a802      	add	r0, sp, #8
   b563c:	f000 ff25 	bl	b648a <_ZN6StringD1Ev>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5640:	e9d6 790a 	ldrd	r7, r9, [r6, #40]	; 0x28
   b5644:	3708      	adds	r7, #8
    for (const auto &item : lowPriceHours)
   b5646:	f1a7 0308 	sub.w	r3, r7, #8
   b564a:	4599      	cmp	r9, r3
   b564c:	d020      	beq.n	b5690 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x94>
        if (item.hour > lastIndexedHour + 1)
   b564e:	f817 3c08 	ldrb.w	r3, [r7, #-8]
   b5652:	1c6a      	adds	r2, r5, #1
   b5654:	4293      	cmp	r3, r2
   b5656:	dd0f      	ble.n	b5678 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x7c>
                lowHourIntervals.append(String::format(" to %02d, %02d", lastIndexedHour, item.hour));
   b5658:	462a      	mov	r2, r5
   b565a:	4641      	mov	r1, r8
   b565c:	a802      	add	r0, sp, #8
   b565e:	f000 ffd5 	bl	b660c <_ZN6String6formatEPKcz>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b5662:	a806      	add	r0, sp, #24
   b5664:	9902      	ldr	r1, [sp, #8]
   b5666:	f7ff fd43 	bl	b50f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b566a:	a802      	add	r0, sp, #8
   b566c:	f000 ff0d 	bl	b648a <_ZN6StringD1Ev>
        lastIndexedHour = item.hour;
   b5670:	f817 5c08 	ldrb.w	r5, [r7, #-8]
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b5674:	3708      	adds	r7, #8
      {
	++_M_current;
	return *this;
   b5676:	e7e6      	b.n	b5646 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x4a>
        else if (item.hour < lastIndexedHour)
   b5678:	42ab      	cmp	r3, r5
   b567a:	d2f9      	bcs.n	b5670 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x74>
            if (item.hour + 24 > lastIndexedHour + 1)
   b567c:	f103 0216 	add.w	r2, r3, #22
   b5680:	42aa      	cmp	r2, r5
   b5682:	dae9      	bge.n	b5658 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x5c>
                lowHourIntervals.append(String::format(" to 24, %02d", item.hour));
   b5684:	461a      	mov	r2, r3
   b5686:	4651      	mov	r1, sl
   b5688:	a802      	add	r0, sp, #8
   b568a:	f000 ffbf 	bl	b660c <_ZN6String6formatEPKcz>
   b568e:	e7e8      	b.n	b5662 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x66>
    lowHourIntervals.append(String::format(" to %02d", lastIndexedHour));
   b5690:	462a      	mov	r2, r5
   b5692:	491d      	ldr	r1, [pc, #116]	; (b5708 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x10c>)
   b5694:	a802      	add	r0, sp, #8
   b5696:	f000 ffb9 	bl	b660c <_ZN6String6formatEPKcz>
   b569a:	9902      	ldr	r1, [sp, #8]
   b569c:	a806      	add	r0, sp, #24
   b569e:	f7ff fd27 	bl	b50f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.isra.0>
   b56a2:	a802      	add	r0, sp, #8
   b56a4:	f000 fef1 	bl	b648a <_ZN6StringD1Ev>
    newPricesReceived = false;
   b56a8:	2300      	movs	r3, #0
   b56aa:	7633      	strb	r3, [r6, #24]
    Serial.println("Low Price Intervals:");
   b56ac:	f002 fef8 	bl	b84a0 <_Z16_fetch_usbserialv>
   b56b0:	4916      	ldr	r1, [pc, #88]	; (b570c <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x110>)
   b56b2:	f002 f9ac 	bl	b7a0e <_ZN5Print7printlnEPKc>
    Serial.println(lowHourIntervals.c_str());
   b56b6:	f002 fef3 	bl	b84a0 <_Z16_fetch_usbserialv>
   b56ba:	9906      	ldr	r1, [sp, #24]
   b56bc:	f002 f9a7 	bl	b7a0e <_ZN5Print7printlnEPKc>
      { return _M_dataplus._M_p; }
   b56c0:	9a06      	ldr	r2, [sp, #24]
	if (__str._M_is_local())
   b56c2:	ad08      	add	r5, sp, #32
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b56c4:	f104 0308 	add.w	r3, r4, #8
	if (__str._M_is_local())
   b56c8:	42aa      	cmp	r2, r5
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b56ca:	6023      	str	r3, [r4, #0]
	if (__str._M_is_local())
   b56cc:	d115      	bne.n	b56fa <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xfe>
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   b56ce:	462e      	mov	r6, r5
   b56d0:	af0c      	add	r7, sp, #48	; 0x30
   b56d2:	4632      	mov	r2, r6
   b56d4:	ca03      	ldmia	r2!, {r0, r1}
   b56d6:	42ba      	cmp	r2, r7
   b56d8:	6018      	str	r0, [r3, #0]
   b56da:	6059      	str	r1, [r3, #4]
   b56dc:	4616      	mov	r6, r2
   b56de:	f103 0308 	add.w	r3, r3, #8
   b56e2:	d1f6      	bne.n	b56d2 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xd6>
      { _M_string_length = __length; }
   b56e4:	9b07      	ldr	r3, [sp, #28]
   b56e6:	6063      	str	r3, [r4, #4]
      { _M_dispose(); }
   b56e8:	a806      	add	r0, sp, #24
      { _M_string_length = __length; }
   b56ea:	2300      	movs	r3, #0
      { _M_dataplus._M_p = __p; }
   b56ec:	9506      	str	r5, [sp, #24]
      { _M_string_length = __length; }
   b56ee:	9307      	str	r3, [sp, #28]
      { __c1 = __c2; }
   b56f0:	f88d 3020 	strb.w	r3, [sp, #32]
      { _M_dispose(); }
   b56f4:	f003 fb68 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56f8:	e78b      	b.n	b5612 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0x16>
      { _M_allocated_capacity = __capacity; }
   b56fa:	9b08      	ldr	r3, [sp, #32]
      { _M_dataplus._M_p = __p; }
   b56fc:	6022      	str	r2, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b56fe:	60a3      	str	r3, [r4, #8]
   b5700:	e7f0      	b.n	b56e4 <_ZN10PriceClass20getLowPriceIntervalsB5cxx11Ev+0xe8>
   b5702:	bf00      	nop
   b5704:	000bb81a 	.word	0x000bb81a
   b5708:	000bb844 	.word	0x000bb844
   b570c:	000bb84d 	.word	0x000bb84d
   b5710:	000bb837 	.word	0x000bb837
   b5714:	000bb828 	.word	0x000bb828

000b5718 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b5718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b571c:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5720:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b5722:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5726:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b572a:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b572e:	4607      	mov	r7, r0
   b5730:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5732:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5736:	d102      	bne.n	b573e <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5738:	4820      	ldr	r0, [pc, #128]	; (b57bc <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
   b573a:	f003 fa53 	bl	b8be4 <_ZSt20__throw_length_errorPKc>
   b573e:	2c01      	cmp	r4, #1
   b5740:	4622      	mov	r2, r4
   b5742:	bf38      	it	cc
   b5744:	2201      	movcc	r2, #1
   b5746:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b5748:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b574c:	d231      	bcs.n	b57b2 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b574e:	b394      	cbz	r4, b57b6 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
   b5750:	429c      	cmp	r4, r3
   b5752:	bf28      	it	cs
   b5754:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5756:	00e0      	lsls	r0, r4, #3
   b5758:	f7ff fa17 	bl	b4b8a <_Znwj>
   b575c:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b575e:	1973      	adds	r3, r6, r5
   b5760:	bf1c      	itt	ne
   b5762:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5766:	e9c3 0100 	strdne	r0, r1, [r3]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b576a:	2d00      	cmp	r5, #0
   b576c:	dd04      	ble.n	b5778 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b576e:	462a      	mov	r2, r5
   b5770:	4641      	mov	r1, r8
   b5772:	4630      	mov	r0, r6
   b5774:	f003 fe84 	bl	b9480 <memmove>
      ptrdiff_t __count = __last - __first;
   b5778:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b577c:	3508      	adds	r5, #8
      if (__count > 0)
   b577e:	f1b9 0f00 	cmp.w	r9, #0
   b5782:	4435      	add	r5, r6
   b5784:	dd04      	ble.n	b5790 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5786:	464a      	mov	r2, r9
   b5788:	4651      	mov	r1, sl
   b578a:	4628      	mov	r0, r5
   b578c:	f003 fe6a 	bl	b9464 <memcpy>
      return __result + __count;
   b5790:	444d      	add	r5, r9
	if (__p)
   b5792:	f1b8 0f00 	cmp.w	r8, #0
   b5796:	d005      	beq.n	b57a4 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b5798:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b579a:	4640      	mov	r0, r8
   b579c:	eba1 0108 	sub.w	r1, r1, r8
   b57a0:	f7ff f9f9 	bl	b4b96 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b57a4:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b57a8:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b57ac:	60bc      	str	r4, [r7, #8]
    }
   b57ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b57b2:	461c      	mov	r4, r3
   b57b4:	e7cf      	b.n	b5756 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b57b6:	4626      	mov	r6, r4
   b57b8:	e7d1      	b.n	b575e <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
   b57ba:	bf00      	nop
   b57bc:	000bb862 	.word	0x000bb862

000b57c0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
   b57c0:	b510      	push	{r4, lr}
   b57c2:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b57c4:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   b57c8:	428c      	cmp	r4, r1
      push_back(const value_type& __x)
   b57ca:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b57cc:	d008      	beq.n	b57e0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b57ce:	b11c      	cbz	r4, b57d8 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x18>
   b57d0:	e892 0003 	ldmia.w	r2, {r0, r1}
   b57d4:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b57d8:	685a      	ldr	r2, [r3, #4]
   b57da:	3208      	adds	r2, #8
   b57dc:	605a      	str	r2, [r3, #4]
      }
   b57de:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   b57e0:	4621      	mov	r1, r4
   b57e2:	f7ff ff99 	bl	b5718 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   b57e6:	e7fa      	b.n	b57de <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_+0x1e>

000b57e8 <_ZN10PriceClass19assembleMessageDataEv>:
{
   b57e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57ec:	ed2d 8b02 	vpush	{d8}
    if (!messageDataReady)
   b57f0:	7e43      	ldrb	r3, [r0, #25]
{
   b57f2:	b091      	sub	sp, #68	; 0x44
   b57f4:	4604      	mov	r4, r0
    if (!messageDataReady)
   b57f6:	b94b      	cbnz	r3, b580c <_ZN10PriceClass19assembleMessageDataEv+0x24>
        Serial.println("Message data isn't ready yet.");
   b57f8:	f002 fe52 	bl	b84a0 <_Z16_fetch_usbserialv>
   b57fc:	498e      	ldr	r1, [pc, #568]	; (b5a38 <_ZN10PriceClass19assembleMessageDataEv+0x250>)
}
   b57fe:	b011      	add	sp, #68	; 0x44
   b5800:	ecbd 8b02 	vpop	{d8}
   b5804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("Message data isn't ready yet.");
   b5808:	f002 b901 	b.w	b7a0e <_ZN5Print7printlnEPKc>
    std::string message = "";
   b580c:	498b      	ldr	r1, [pc, #556]	; (b5a3c <_ZN10PriceClass19assembleMessageDataEv+0x254>)
   b580e:	aa0a      	add	r2, sp, #40	; 0x28
   b5810:	a804      	add	r0, sp, #16
   b5812:	f7ff fec9 	bl	b55a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
      { return iterator(this->_M_impl._M_header._M_left); }
   b5816:	68e5      	ldr	r5, [r4, #12]
      { return iterator(&this->_M_impl._M_header); }
   b5818:	1d27      	adds	r7, r4, #4
    for (const auto &item : messageParts)
   b581a:	42af      	cmp	r7, r5
   b581c:	d009      	beq.n	b5832 <_ZN10PriceClass19assembleMessageDataEv+0x4a>
      { return _M_append(__str._M_data(), __str.size()); }
   b581e:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   b5822:	a804      	add	r0, sp, #16
   b5824:	f003 fc16 	bl	b9054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
	_M_node = _Rb_tree_increment(_M_node);
   b5828:	4628      	mov	r0, r5
   b582a:	f003 f973 	bl	b8b14 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b582e:	4605      	mov	r5, r0
	return *this;
   b5830:	e7f3      	b.n	b581a <_ZN10PriceClass19assembleMessageDataEv+0x32>
    Serial.println("Message assembled.");
   b5832:	f002 fe35 	bl	b84a0 <_Z16_fetch_usbserialv>
   b5836:	4982      	ldr	r1, [pc, #520]	; (b5a40 <_ZN10PriceClass19assembleMessageDataEv+0x258>)
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b5838:	eddf 8a82 	vldr	s17, [pc, #520]	; b5a44 <_ZN10PriceClass19assembleMessageDataEv+0x25c>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b583c:	f8df 8208 	ldr.w	r8, [pc, #520]	; b5a48 <_ZN10PriceClass19assembleMessageDataEv+0x260>
    Serial.println("Message assembled.");
   b5840:	f002 f8e5 	bl	b7a0e <_ZN5Print7printlnEPKc>
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b5844:	9a05      	ldr	r2, [sp, #20]
   b5846:	2a01      	cmp	r2, #1
   b5848:	bf28      	it	cs
   b584a:	2201      	movcs	r2, #1
   b584c:	2100      	movs	r1, #0
   b584e:	a804      	add	r0, sp, #16
   b5850:	f003 fb6c 	bl	b8f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b5854:	2200      	movs	r2, #0
   b5856:	497c      	ldr	r1, [pc, #496]	; (b5a48 <_ZN10PriceClass19assembleMessageDataEv+0x260>)
   b5858:	a804      	add	r0, sp, #16
   b585a:	f003 fc4e 	bl	b90fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b585e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
   b5862:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b5864:	bf18      	it	ne
   b5866:	6223      	strne	r3, [r4, #32]
    currentHighest.price = 0;
   b5868:	2300      	movs	r3, #0
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b586a:	3001      	adds	r0, #1
    currentHighest.price = 0;
   b586c:	63a3      	str	r3, [r4, #56]	; 0x38
    currentLowest.price = 100;
   b586e:	4b77      	ldr	r3, [pc, #476]	; (b5a4c <_ZN10PriceClass19assembleMessageDataEv+0x264>)
   b5870:	6423      	str	r3, [r4, #64]	; 0x40
    uint8_t bangIndex = message.find("!") + 1; // End index of the first price part.
   b5872:	b2c5      	uxtb	r5, r0
    currentHourPrices.clear();
   b5874:	f104 091c 	add.w	r9, r4, #28
    while (bangIndex > 0)
   b5878:	2d00      	cmp	r5, #0
   b587a:	f000 8093 	beq.w	b59a4 <_ZN10PriceClass19assembleMessageDataEv+0x1bc>
        indexedHourPrice.hour = stoi(message.substr(HOUR_INDEX, 2));                                      // Hour (hh) converted to int.
   b587e:	2302      	movs	r3, #2
   b5880:	220b      	movs	r2, #11
   b5882:	a904      	add	r1, sp, #16
   b5884:	a80a      	add	r0, sp, #40	; 0x28
   b5886:	f003 fc91 	bl	b91ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b588a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b588e:	f000 fd47 	bl	b6320 <__errno>
   b5892:	f8d0 b000 	ldr.w	fp, [r0]
   b5896:	f000 fd43 	bl	b6320 <__errno>
   b589a:	2300      	movs	r3, #0
   b589c:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b589e:	220a      	movs	r2, #10
   b58a0:	a901      	add	r1, sp, #4
   b58a2:	4650      	mov	r0, sl
   b58a4:	f004 fd84 	bl	ba3b0 <strtol>

      if (__endptr == __str)
   b58a8:	9b01      	ldr	r3, [sp, #4]
   b58aa:	459a      	cmp	sl, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b58ac:	4606      	mov	r6, r0
      if (__endptr == __str)
   b58ae:	d102      	bne.n	b58b6 <_ZN10PriceClass19assembleMessageDataEv+0xce>
	std::__throw_invalid_argument(__name);
   b58b0:	4867      	ldr	r0, [pc, #412]	; (b5a50 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b58b2:	f003 f994 	bl	b8bde <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
   b58b6:	f000 fd33 	bl	b6320 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b58ba:	6803      	ldr	r3, [r0, #0]
   b58bc:	2b22      	cmp	r3, #34	; 0x22
   b58be:	d102      	bne.n	b58c6 <_ZN10PriceClass19assembleMessageDataEv+0xde>
	std::__throw_out_of_range(__name);
   b58c0:	4863      	ldr	r0, [pc, #396]	; (b5a50 <_ZN10PriceClass19assembleMessageDataEv+0x268>)
   b58c2:	f003 f992 	bl	b8bea <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b58c6:	f000 fd2b 	bl	b6320 <__errno>
   b58ca:	6803      	ldr	r3, [r0, #0]
   b58cc:	b91b      	cbnz	r3, b58d6 <_ZN10PriceClass19assembleMessageDataEv+0xee>
   b58ce:	f000 fd27 	bl	b6320 <__errno>
   b58d2:	f8c0 b000 	str.w	fp, [r0]
      { _M_dispose(); }
   b58d6:	a80a      	add	r0, sp, #40	; 0x28
   b58d8:	f88d 6008 	strb.w	r6, [sp, #8]
   b58dc:	f003 fa74 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b58e0:	f1a5 0315 	sub.w	r3, r5, #21
   b58e4:	2214      	movs	r2, #20
   b58e6:	a904      	add	r1, sp, #16
   b58e8:	a80a      	add	r0, sp, #40	; 0x28
   b58ea:	f003 fc5f 	bl	b91ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b58ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b58f0:	f000 fd16 	bl	b6320 <__errno>
   b58f4:	f8d0 a000 	ldr.w	sl, [r0]
   b58f8:	f000 fd12 	bl	b6320 <__errno>
   b58fc:	2300      	movs	r3, #0
   b58fe:	6003      	str	r3, [r0, #0]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b5900:	a901      	add	r1, sp, #4
   b5902:	4630      	mov	r0, r6
   b5904:	f004 fc76 	bl	ba1f4 <strtof>
      if (__endptr == __str)
   b5908:	9b01      	ldr	r3, [sp, #4]
   b590a:	429e      	cmp	r6, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b590c:	eeb0 8a40 	vmov.f32	s16, s0
      if (__endptr == __str)
   b5910:	d101      	bne.n	b5916 <_ZN10PriceClass19assembleMessageDataEv+0x12e>
	std::__throw_invalid_argument(__name);
   b5912:	4850      	ldr	r0, [pc, #320]	; (b5a54 <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b5914:	e7cd      	b.n	b58b2 <_ZN10PriceClass19assembleMessageDataEv+0xca>
      else if (errno == ERANGE
   b5916:	f000 fd03 	bl	b6320 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b591a:	6803      	ldr	r3, [r0, #0]
   b591c:	2b22      	cmp	r3, #34	; 0x22
   b591e:	d101      	bne.n	b5924 <_ZN10PriceClass19assembleMessageDataEv+0x13c>
	std::__throw_out_of_range(__name);
   b5920:	484c      	ldr	r0, [pc, #304]	; (b5a54 <_ZN10PriceClass19assembleMessageDataEv+0x26c>)
   b5922:	e7ce      	b.n	b58c2 <_ZN10PriceClass19assembleMessageDataEv+0xda>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b5924:	f000 fcfc 	bl	b6320 <__errno>
   b5928:	6803      	ldr	r3, [r0, #0]
   b592a:	b91b      	cbnz	r3, b5934 <_ZN10PriceClass19assembleMessageDataEv+0x14c>
   b592c:	f000 fcf8 	bl	b6320 <__errno>
   b5930:	f8c0 a000 	str.w	sl, [r0]
   b5934:	eec8 7a28 	vdiv.f32	s15, s16, s17
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b5938:	ae02      	add	r6, sp, #8
   b593a:	a80a      	add	r0, sp, #40	; 0x28
        indexedHourPrice.price = stof(message.substr(PRICE_INDEX, (bangIndex - 1) - PRICE_INDEX)) / 1000; // Price converted to float.
   b593c:	edcd 7a03 	vstr	s15, [sp, #12]
   b5940:	f003 fa42 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
        currentHourPrices.push_back(indexedHourPrice);                                                    // Save.
   b5944:	4631      	mov	r1, r6
   b5946:	4648      	mov	r0, r9
   b5948:	f7ff ff3a 	bl	b57c0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
        if (indexedHourPrice.price > currentHighest.price)
   b594c:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   b5950:	eddd 7a03 	vldr	s15, [sp, #12]
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b5954:	9a05      	ldr	r2, [sp, #20]
   b5956:	eef4 7ac7 	vcmpe.f32	s15, s14
   b595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentHighest = indexedHourPrice;
   b595e:	bfc2      	ittt	gt
   b5960:	e9d6 0100 	ldrdgt	r0, r1, [r6]
   b5964:	f104 0334 	addgt.w	r3, r4, #52	; 0x34
   b5968:	e9c3 0100 	strdgt	r0, r1, [r3]
        if (indexedHourPrice.price < currentLowest.price)
   b596c:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
   b5970:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            currentLowest = indexedHourPrice;
   b5978:	bf42      	ittt	mi
   b597a:	e9d6 0100 	ldrdmi	r0, r1, [r6]
   b597e:	f104 033c 	addmi.w	r3, r4, #60	; 0x3c
   b5982:	e9c3 0100 	strdmi	r0, r1, [r3]
   b5986:	42aa      	cmp	r2, r5
   b5988:	bf28      	it	cs
   b598a:	462a      	movcs	r2, r5
   b598c:	2100      	movs	r1, #0
   b598e:	a804      	add	r0, sp, #16
   b5990:	f003 facc 	bl	b8f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
        bangIndex = message.find("!") + 1; // Find the End index of next part.
   b5994:	2200      	movs	r2, #0
   b5996:	4641      	mov	r1, r8
   b5998:	a804      	add	r0, sp, #16
   b599a:	f003 fbae 	bl	b90fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b599e:	3001      	adds	r0, #1
   b59a0:	b2c5      	uxtb	r5, r0
    while (bangIndex > 0)
   b59a2:	e769      	b.n	b5878 <_ZN10PriceClass19assembleMessageDataEv+0x90>
    double difference = currentHighest.price - currentLowest.price;
   b59a4:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
   b59a8:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   b59ac:	ee77 7ac8 	vsub.f32	s15, s15, s16
            lowPriceHours.push_back(item);
   b59b0:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    double difference = currentHighest.price - currentLowest.price;
   b59b4:	ee17 0a90 	vmov	r0, s15
   b59b8:	f7fe fc96 	bl	b42e8 <__aeabi_f2d>
    double lowThreshold = currentLowest.price + difference * LOW_THRESHOLD_FACTOR;
   b59bc:	a31c      	add	r3, pc, #112	; (adr r3, b5a30 <_ZN10PriceClass19assembleMessageDataEv+0x248>)
   b59be:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59c2:	f7fe fce9 	bl	b4398 <__aeabi_dmul>
   b59c6:	4680      	mov	r8, r0
   b59c8:	ee18 0a10 	vmov	r0, s16
   b59cc:	4689      	mov	r9, r1
   b59ce:	f7fe fc8b 	bl	b42e8 <__aeabi_f2d>
   b59d2:	4602      	mov	r2, r0
   b59d4:	460b      	mov	r3, r1
   b59d6:	4640      	mov	r0, r8
   b59d8:	4649      	mov	r1, r9
   b59da:	f7fe fb27 	bl	b402c <__adddf3>
   b59de:	e9d4 5607 	ldrd	r5, r6, [r4, #28]
   b59e2:	4680      	mov	r8, r0
   b59e4:	4689      	mov	r9, r1
    for (const auto &item : currentHourPrices)
   b59e6:	42ae      	cmp	r6, r5
   b59e8:	d00f      	beq.n	b5a0a <_ZN10PriceClass19assembleMessageDataEv+0x222>
        if (item.price < lowThreshold)
   b59ea:	6868      	ldr	r0, [r5, #4]
   b59ec:	f7fe fc7c 	bl	b42e8 <__aeabi_f2d>
   b59f0:	4602      	mov	r2, r0
   b59f2:	460b      	mov	r3, r1
   b59f4:	4640      	mov	r0, r8
   b59f6:	4649      	mov	r1, r9
   b59f8:	f7fe ff5e 	bl	b48b8 <__aeabi_dcmpgt>
   b59fc:	b118      	cbz	r0, b5a06 <_ZN10PriceClass19assembleMessageDataEv+0x21e>
            lowPriceHours.push_back(item);
   b59fe:	4629      	mov	r1, r5
   b5a00:	4650      	mov	r0, sl
   b5a02:	f7ff fedd 	bl	b57c0 <_ZNSt6vectorIN10PriceClass9HourPriceESaIS1_EE9push_backERKS1_>
      operator++() _GLIBCXX_NOEXCEPT
   b5a06:	3508      	adds	r5, #8
	return *this;
   b5a08:	e7ed      	b.n	b59e6 <_ZN10PriceClass19assembleMessageDataEv+0x1fe>
    messageDataReady = false;
   b5a0a:	2500      	movs	r5, #0
	_M_erase(_M_begin());
   b5a0c:	68a0      	ldr	r0, [r4, #8]
   b5a0e:	7665      	strb	r5, [r4, #25]
   b5a10:	f7ff fb99 	bl	b5146 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
    newPricesReceived = true;
   b5a14:	2301      	movs	r3, #1
      _M_header._M_left = &_M_header;
   b5a16:	e9c4 5702 	strd	r5, r7, [r4, #8]
      _M_node_count = 0;
   b5a1a:	e9c4 7504 	strd	r7, r5, [r4, #16]
   b5a1e:	7623      	strb	r3, [r4, #24]
      { _M_dispose(); }
   b5a20:	a804      	add	r0, sp, #16
   b5a22:	f003 f9d1 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
   b5a26:	b011      	add	sp, #68	; 0x44
   b5a28:	ecbd 8b02 	vpop	{d8}
   b5a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a30:	33333333 	.word	0x33333333
   b5a34:	3fd33333 	.word	0x3fd33333
   b5a38:	000bb87c 	.word	0x000bb87c
   b5a3c:	000bbe58 	.word	0x000bbe58
   b5a40:	000bb89a 	.word	0x000bb89a
   b5a44:	447a0000 	.word	0x447a0000
   b5a48:	000bb9b6 	.word	0x000bb9b6
   b5a4c:	42c80000 	.word	0x42c80000
   b5a50:	000bb8ad 	.word	0x000bb8ad
   b5a54:	000bb8b2 	.word	0x000bb8b2

000b5a58 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5a5a:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5a5c:	4616      	mov	r6, r2
   b5a5e:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b5a60:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b5a62:	2201      	movs	r2, #1
      while (__x != 0)
   b5a64:	b163      	cbz	r3, b5a80 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x28>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5a66:	7c1d      	ldrb	r5, [r3, #16]
   b5a68:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5a6a:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b5a6e:	4295      	cmp	r5, r2
   b5a70:	bf88      	it	hi
   b5a72:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5a74:	461d      	mov	r5, r3
   b5a76:	bf96      	itet	ls
   b5a78:	2200      	movls	r2, #0
   b5a7a:	463b      	movhi	r3, r7
   b5a7c:	4603      	movls	r3, r0
   b5a7e:	e7f1      	b.n	b5a64 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xc>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b5a80:	b192      	cbz	r2, b5aa8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x50>
	{
	  if (__j == begin())
   b5a82:	68ca      	ldr	r2, [r1, #12]
   b5a84:	42aa      	cmp	r2, r5
   b5a86:	d103      	bne.n	b5a90 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b5a88:	e9c4 3500 	strd	r3, r5, [r4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b5a8c:	4620      	mov	r0, r4
   b5a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b5a90:	4628      	mov	r0, r5
   b5a92:	f003 f841 	bl	b8b18 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b5a96:	7833      	ldrb	r3, [r6, #0]
   b5a98:	7c02      	ldrb	r2, [r0, #16]
   b5a9a:	429a      	cmp	r2, r3
   b5a9c:	f04f 0300 	mov.w	r3, #0
   b5aa0:	d3f2      	bcc.n	b5a88 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b5aa2:	e9c4 0300 	strd	r0, r3, [r4]
   b5aa6:	e7f1      	b.n	b5a8c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x34>
   b5aa8:	4628      	mov	r0, r5
   b5aaa:	e7f4      	b.n	b5a96 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x3e>

000b5aac <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_>:
{
   b5aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    messageDataReady = false;
   b5ab0:	2300      	movs	r3, #0
   b5ab2:	7643      	strb	r3, [r0, #25]
      { return &this->_M_impl._M_header; }
   b5ab4:	f100 0a04 	add.w	sl, r0, #4
    messageParts[pricesEvent[7]] = data;
   b5ab8:	f891 8007 	ldrb.w	r8, [r1, #7]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5abc:	6887      	ldr	r7, [r0, #8]
{
   b5abe:	b086      	sub	sp, #24
   b5ac0:	4605      	mov	r5, r0
   b5ac2:	4691      	mov	r9, r2
      { return &this->_M_impl._M_header; }
   b5ac4:	4654      	mov	r4, sl
      while (__x != 0)
   b5ac6:	b147      	cbz	r7, b5ada <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x2e>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5ac8:	7c39      	ldrb	r1, [r7, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5aca:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5ace:	4541      	cmp	r1, r8
   b5ad0:	bf2a      	itet	cs
   b5ad2:	463c      	movcs	r4, r7
   b5ad4:	4617      	movcc	r7, r2
   b5ad6:	461f      	movcs	r7, r3
   b5ad8:	e7f5      	b.n	b5ac6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x1a>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b5ada:	45a2      	cmp	sl, r4
   b5adc:	d002      	beq.n	b5ae4 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x38>
   b5ade:	7c23      	ldrb	r3, [r4, #16]
   b5ae0:	4543      	cmp	r3, r8
   b5ae2:	d931      	bls.n	b5b48 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5ae4:	202c      	movs	r0, #44	; 0x2c
   b5ae6:	f7ff f850 	bl	b4b8a <_Znwj>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5aea:	f100 031c 	add.w	r3, r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5aee:	6143      	str	r3, [r0, #20]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b5af0:	45a2      	cmp	sl, r4
      { _M_string_length = __length; }
   b5af2:	f04f 0300 	mov.w	r3, #0
   b5af6:	4606      	mov	r6, r0
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b5af8:	f880 8010 	strb.w	r8, [r0, #16]
   b5afc:	6183      	str	r3, [r0, #24]
   b5afe:	7703      	strb	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b5b00:	f100 0210 	add.w	r2, r0, #16
   b5b04:	d13c      	bne.n	b5b80 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xd4>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b5b06:	696b      	ldr	r3, [r5, #20]
   b5b08:	b11b      	cbz	r3, b5b12 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x66>
   b5b0a:	6929      	ldr	r1, [r5, #16]
   b5b0c:	7c0b      	ldrb	r3, [r1, #16]
   b5b0e:	4543      	cmp	r3, r8
   b5b10:	d309      	bcc.n	b5b26 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x7a>
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   b5b12:	4629      	mov	r1, r5
   b5b14:	a804      	add	r0, sp, #16
   b5b16:	f7ff ff9f 	bl	b5a58 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5b1a:	e9dd 4104 	ldrd	r4, r1, [sp, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b5b1e:	2900      	cmp	r1, #0
   b5b20:	d068      	beq.n	b5bf4 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5b22:	2c00      	cmp	r4, #0
   b5b24:	d164      	bne.n	b5bf0 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b5b26:	458a      	cmp	sl, r1
   b5b28:	d062      	beq.n	b5bf0 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x144>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5b2a:	7c30      	ldrb	r0, [r6, #16]
   b5b2c:	7c0b      	ldrb	r3, [r1, #16]
   b5b2e:	4298      	cmp	r0, r3
   b5b30:	bf2c      	ite	cs
   b5b32:	2000      	movcs	r0, #0
   b5b34:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b5b36:	4653      	mov	r3, sl
   b5b38:	460a      	mov	r2, r1
   b5b3a:	4631      	mov	r1, r6
   b5b3c:	f002 ffee 	bl	b8b1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b5b40:	696b      	ldr	r3, [r5, #20]
   b5b42:	3301      	adds	r3, #1
   b5b44:	616b      	str	r3, [r5, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b5b46:	4634      	mov	r4, r6
	return __builtin_strlen(__s);
   b5b48:	4648      	mov	r0, r9
   b5b4a:	f7fe ffc3 	bl	b4ad4 <strlen>
	return _M_replace(size_type(0), this->size(), __s,
   b5b4e:	9000      	str	r0, [sp, #0]
   b5b50:	69a2      	ldr	r2, [r4, #24]
   b5b52:	464b      	mov	r3, r9
   b5b54:	2100      	movs	r1, #0
   b5b56:	f104 0014 	add.w	r0, r4, #20
   b5b5a:	f003 f9fd 	bl	b8f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
    if (strlen(data) < 512)
   b5b5e:	4648      	mov	r0, r9
   b5b60:	f7fe ffb8 	bl	b4ad4 <strlen>
   b5b64:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   b5b68:	d24e      	bcs.n	b5c08 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x15c>
        newPricesReceived = false; // New prices not assembled yet.
   b5b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
   b5b6e:	832b      	strh	r3, [r5, #24]
        Serial.println("Message Data Received.");
   b5b70:	f002 fc96 	bl	b84a0 <_Z16_fetch_usbserialv>
   b5b74:	4926      	ldr	r1, [pc, #152]	; (b5c10 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x164>)
}
   b5b76:	b006      	add	sp, #24
   b5b78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Serial.println("Message Data Received.");
   b5b7c:	f001 bf47 	b.w	b7a0e <_ZN5Print7printlnEPKc>
      { return __x < __y; }
   b5b80:	7c23      	ldrb	r3, [r4, #16]
   b5b82:	9203      	str	r2, [sp, #12]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b5b84:	4598      	cmp	r8, r3
   b5b86:	d218      	bcs.n	b5bba <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10e>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b5b88:	68eb      	ldr	r3, [r5, #12]
   b5b8a:	429c      	cmp	r4, r3
   b5b8c:	d009      	beq.n	b5ba2 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
	_M_node = _Rb_tree_decrement(_M_node);
   b5b8e:	4620      	mov	r0, r4
   b5b90:	f002 ffc2 	bl	b8b18 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b5b94:	7c03      	ldrb	r3, [r0, #16]
   b5b96:	9a03      	ldr	r2, [sp, #12]
   b5b98:	4543      	cmp	r3, r8
   b5b9a:	d205      	bcs.n	b5ba8 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xfc>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5b9c:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b5b9e:	b953      	cbnz	r3, b5bb6 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x10a>
   b5ba0:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b5ba2:	4621      	mov	r1, r4
   b5ba4:	461c      	mov	r4, r3
   b5ba6:	e7ba      	b.n	b5b1e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5ba8:	4629      	mov	r1, r5
   b5baa:	a804      	add	r0, sp, #16
   b5bac:	f7ff ff54 	bl	b5a58 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5bb0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   b5bb4:	e7f5      	b.n	b5ba2 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
   b5bb6:	4623      	mov	r3, r4
   b5bb8:	e7f3      	b.n	b5ba2 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0xf6>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b5bba:	d91b      	bls.n	b5bf4 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x148>
	  if (__pos._M_node == _M_rightmost())
   b5bbc:	6929      	ldr	r1, [r5, #16]
   b5bbe:	428c      	cmp	r4, r1
   b5bc0:	d00b      	beq.n	b5bda <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
	_M_node = _Rb_tree_increment(_M_node);
   b5bc2:	4620      	mov	r0, r4
   b5bc4:	f002 ffa6 	bl	b8b14 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5bc8:	7c03      	ldrb	r3, [r0, #16]
   b5bca:	9a03      	ldr	r2, [sp, #12]
   b5bcc:	4543      	cmp	r3, r8
	_M_node = _Rb_tree_increment(_M_node);
   b5bce:	4607      	mov	r7, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5bd0:	d905      	bls.n	b5bde <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x132>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5bd2:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b5bd4:	b953      	cbnz	r3, b5bec <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x140>
   b5bd6:	4621      	mov	r1, r4
   b5bd8:	461f      	mov	r7, r3
   b5bda:	463c      	mov	r4, r7
   b5bdc:	e79f      	b.n	b5b1e <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x72>
	    return _M_get_insert_unique_pos(__k);
   b5bde:	4629      	mov	r1, r5
   b5be0:	a804      	add	r0, sp, #16
   b5be2:	f7ff ff39 	bl	b5a58 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
   b5be6:	e9dd 7104 	ldrd	r7, r1, [sp, #16]
   b5bea:	e7f6      	b.n	b5bda <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
   b5bec:	4601      	mov	r1, r0
   b5bee:	e7f4      	b.n	b5bda <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x12e>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5bf0:	2001      	movs	r0, #1
   b5bf2:	e7a0      	b.n	b5b36 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x8a>
      { _M_dispose(); }
   b5bf4:	f106 0014 	add.w	r0, r6, #20
   b5bf8:	f003 f8e6 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	::operator delete(__p
   b5bfc:	4630      	mov	r0, r6
   b5bfe:	212c      	movs	r1, #44	; 0x2c
   b5c00:	f7fe ffc9 	bl	b4b96 <_ZdlPvj>
   b5c04:	4626      	mov	r6, r4
   b5c06:	e79e      	b.n	b5b46 <_ZN10PriceClass25pricesSubscriptionHandlerEPKcS1_+0x9a>
}
   b5c08:	b006      	add	sp, #24
   b5c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5c0e:	bf00      	nop
   b5c10:	000bb8b7 	.word	0x000bb8b7

000b5c14 <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
        val_(val) {
   b5c14:	4b01      	ldr	r3, [pc, #4]	; (b5c1c <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b5c16:	2200      	movs	r2, #0
   b5c18:	701a      	strb	r2, [r3, #0]
   b5c1a:	4770      	bx	lr
   b5c1c:	2003e5dc 	.word	0x2003e5dc

000b5c20 <_ZN6Sensor9sensorISREv>:
/// @brief Sensor Interrupt Service Rutine - run when sensor activates the sensor pin.
// This updates the time since last activation, and the time difference (delta) is
// used to calculate a power reading.
// ###################################################################################
void Sensor::sensorISR(void)
{
   b5c20:	b510      	push	{r4, lr}
   b5c22:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5c24:	f000 f8ae 	bl	b5d84 <HAL_Timer_Get_Milli_Seconds>
    unsigned long timeNow = millis();
    unsigned long delta = timeNow - lastReadTime;
   b5c28:	6823      	ldr	r3, [r4, #0]
   b5c2a:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b5c2c:	2b64      	cmp	r3, #100	; 0x64
   b5c2e:	d906      	bls.n	b5c3e <_ZN6Sensor9sensorISREv+0x1e>
    {
        currentPowerReading = WATT_CONVERSION_CONSTANT / delta;
   b5c30:	4a03      	ldr	r2, [pc, #12]	; (b5c40 <_ZN6Sensor9sensorISREv+0x20>)
   b5c32:	fbb2 f3f3 	udiv	r3, r2, r3
        lastReadTime = timeNow;
   b5c36:	e9c4 0300 	strd	r0, r3, [r4]
        newReadingAvaliable = true;
   b5c3a:	2301      	movs	r3, #1
   b5c3c:	7223      	strb	r3, [r4, #8]
    }
}
   b5c3e:	bd10      	pop	{r4, pc}
   b5c40:	0036ee80 	.word	0x0036ee80

000b5c44 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5c44:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b5c46:	6803      	ldr	r3, [r0, #0]
   b5c48:	685a      	ldr	r2, [r3, #4]
   b5c4a:	6899      	ldr	r1, [r3, #8]
   b5c4c:	681b      	ldr	r3, [r3, #0]
   b5c4e:	1054      	asrs	r4, r2, #1
   b5c50:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b5c54:	07d2      	lsls	r2, r2, #31
   b5c56:	bf48      	it	mi
   b5c58:	590a      	ldrmi	r2, [r1, r4]
      }
   b5c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5c5e:	bf48      	it	mi
   b5c60:	58d3      	ldrmi	r3, [r2, r3]
   b5c62:	4718      	bx	r3

000b5c64 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b5c64:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5c66:	b538      	push	{r3, r4, r5, lr}
   b5c68:	4604      	mov	r4, r0
	switch (__op)
   b5c6a:	d102      	bne.n	b5c72 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5c6c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5c6e:	6023      	str	r3, [r4, #0]
	}
   b5c70:	e003      	b.n	b5c7a <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b5c72:	2a02      	cmp	r2, #2
   b5c74:	d003      	beq.n	b5c7e <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b5c76:	2a03      	cmp	r2, #3
   b5c78:	d00d      	beq.n	b5c96 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b5c7a:	2000      	movs	r0, #0
   b5c7c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c7e:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b5c80:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c82:	f7fe ff82 	bl	b4b8a <_Znwj>
   b5c86:	4603      	mov	r3, r0
   b5c88:	2800      	cmp	r0, #0
   b5c8a:	d0f0      	beq.n	b5c6e <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b5c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5c90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5c94:	e7eb      	b.n	b5c6e <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5c96:	6800      	ldr	r0, [r0, #0]
   b5c98:	2800      	cmp	r0, #0
   b5c9a:	d0ee      	beq.n	b5c7a <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b5c9c:	210c      	movs	r1, #12
   b5c9e:	f7fe ff7a 	bl	b4b96 <_ZdlPvj>
   b5ca2:	e7ea      	b.n	b5c7a <_ZNSt17_Function_handlerIFvvESt5_BindIFM6SensorFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b5ca4 <_ZN6Sensor10initSensorEv>:

// ##############################################################
/// @brief Initialization. Sets up the sensor pin, and interrupt.
// ##############################################################
void Sensor::initSensor()
{
   b5ca4:	b530      	push	{r4, r5, lr}
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5ca6:	2103      	movs	r1, #3
{
   b5ca8:	b087      	sub	sp, #28
   b5caa:	4604      	mov	r4, r0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                           // Setup pinmode for LDR pin
   b5cac:	2008      	movs	r0, #8
   b5cae:	f002 fe4f 	bl	b8950 <pinMode>
    _Function_base() : _M_manager(nullptr) { }
   b5cb2:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5cb4:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b5cb6:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5cb8:	f7fe ff67 	bl	b4b8a <_Znwj>
   b5cbc:	b118      	cbz	r0, b5cc6 <_ZN6Sensor10initSensorEv+0x22>
   b5cbe:	4b0f      	ldr	r3, [pc, #60]	; (b5cfc <_ZN6Sensor10initSensorEv+0x58>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5cc0:	6084      	str	r4, [r0, #8]
   b5cc2:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b5cc6:	4b0e      	ldr	r3, [pc, #56]	; (b5d00 <_ZN6Sensor10initSensorEv+0x5c>)
   b5cc8:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5cca:	4b0e      	ldr	r3, [pc, #56]	; (b5d04 <_ZN6Sensor10initSensorEv+0x60>)
   b5ccc:	9304      	str	r3, [sp, #16]
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b5cce:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5cd0:	9002      	str	r0, [sp, #8]
   b5cd2:	9300      	str	r3, [sp, #0]
   b5cd4:	2201      	movs	r2, #1
   b5cd6:	f04f 33ff 	mov.w	r3, #4294967295
   b5cda:	a902      	add	r1, sp, #8
   b5cdc:	2008      	movs	r0, #8
   b5cde:	f002 fc33 	bl	b8548 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b5ce2:	9b04      	ldr	r3, [sp, #16]
   b5ce4:	b11b      	cbz	r3, b5cee <_ZN6Sensor10initSensorEv+0x4a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5ce6:	a902      	add	r1, sp, #8
   b5ce8:	2203      	movs	r2, #3
   b5cea:	4608      	mov	r0, r1
   b5cec:	4798      	blx	r3
   b5cee:	f000 f849 	bl	b5d84 <HAL_Timer_Get_Milli_Seconds>
    attachInterrupt(KW_SENSOR_PIN, &Sensor::sensorISR, this, RISING); // Attach interrup that will be called when rising
    lastReadTime = millis();
    newReadingAvaliable = false;
   b5cf2:	2300      	movs	r3, #0
    lastReadTime = millis();
   b5cf4:	6020      	str	r0, [r4, #0]
    newReadingAvaliable = false;
   b5cf6:	7223      	strb	r3, [r4, #8]
}
   b5cf8:	b007      	add	sp, #28
   b5cfa:	bd30      	pop	{r4, r5, pc}
   b5cfc:	000b5c21 	.word	0x000b5c21
   b5d00:	000b5c45 	.word	0x000b5c45
   b5d04:	000b5c65 	.word	0x000b5c65

000b5d08 <_ZN6Sensor17getCurrentReadingEv>:
// ###############################################################
/// @brief Method for getting the current calculated power reading
// ###############################################################
int Sensor::getCurrentReading()
{
    newReadingAvaliable = false;
   b5d08:	2300      	movs	r3, #0
   b5d0a:	7203      	strb	r3, [r0, #8]
    return currentPowerReading;
}
   b5d0c:	6840      	ldr	r0, [r0, #4]
   b5d0e:	4770      	bx	lr

000b5d10 <_ZN6Sensor18checkForNewReadingEv>:
// Since the last one was read.
// ##################################################################
bool Sensor::checkForNewReading()
{
    return newReadingAvaliable;
   b5d10:	7a00      	ldrb	r0, [r0, #8]
   b5d12:	4770      	bx	lr

000b5d14 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5d14:	b508      	push	{r3, lr}
   b5d16:	4b02      	ldr	r3, [pc, #8]	; (b5d20 <netdb_freeaddrinfo+0xc>)
   b5d18:	681b      	ldr	r3, [r3, #0]
   b5d1a:	689b      	ldr	r3, [r3, #8]
   b5d1c:	9301      	str	r3, [sp, #4]
   b5d1e:	bd08      	pop	{r3, pc}
   b5d20:	00030268 	.word	0x00030268

000b5d24 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5d24:	b508      	push	{r3, lr}
   b5d26:	4b02      	ldr	r3, [pc, #8]	; (b5d30 <netdb_getaddrinfo+0xc>)
   b5d28:	681b      	ldr	r3, [r3, #0]
   b5d2a:	68db      	ldr	r3, [r3, #12]
   b5d2c:	9301      	str	r3, [sp, #4]
   b5d2e:	bd08      	pop	{r3, pc}
   b5d30:	00030268 	.word	0x00030268

000b5d34 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5d34:	b508      	push	{r3, lr}
   b5d36:	4b02      	ldr	r3, [pc, #8]	; (b5d40 <hal_gpio_mode+0xc>)
   b5d38:	681b      	ldr	r3, [r3, #0]
   b5d3a:	689b      	ldr	r3, [r3, #8]
   b5d3c:	9301      	str	r3, [sp, #4]
   b5d3e:	bd08      	pop	{r3, pc}
   b5d40:	0003022c 	.word	0x0003022c

000b5d44 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5d44:	b508      	push	{r3, lr}
   b5d46:	4b02      	ldr	r3, [pc, #8]	; (b5d50 <hal_interrupt_attach+0xc>)
   b5d48:	681b      	ldr	r3, [r3, #0]
   b5d4a:	699b      	ldr	r3, [r3, #24]
   b5d4c:	9301      	str	r3, [sp, #4]
   b5d4e:	bd08      	pop	{r3, pc}
   b5d50:	0003022c 	.word	0x0003022c

000b5d54 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5d54:	b508      	push	{r3, lr}
   b5d56:	4b02      	ldr	r3, [pc, #8]	; (b5d60 <hal_interrupt_detach+0xc>)
   b5d58:	681b      	ldr	r3, [r3, #0]
   b5d5a:	69db      	ldr	r3, [r3, #28]
   b5d5c:	9301      	str	r3, [sp, #4]
   b5d5e:	bd08      	pop	{r3, pc}
   b5d60:	0003022c 	.word	0x0003022c

000b5d64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d64:	b508      	push	{r3, lr}
   b5d66:	4b02      	ldr	r3, [pc, #8]	; (b5d70 <HAL_RNG_GetRandomNumber+0xc>)
   b5d68:	681b      	ldr	r3, [r3, #0]
   b5d6a:	685b      	ldr	r3, [r3, #4]
   b5d6c:	9301      	str	r3, [sp, #4]
   b5d6e:	bd08      	pop	{r3, pc}
   b5d70:	00030218 	.word	0x00030218

000b5d74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5d74:	b508      	push	{r3, lr}
   b5d76:	4b02      	ldr	r3, [pc, #8]	; (b5d80 <HAL_Delay_Microseconds+0xc>)
   b5d78:	681b      	ldr	r3, [r3, #0]
   b5d7a:	68db      	ldr	r3, [r3, #12]
   b5d7c:	9301      	str	r3, [sp, #4]
   b5d7e:	bd08      	pop	{r3, pc}
   b5d80:	00030218 	.word	0x00030218

000b5d84 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5d84:	b508      	push	{r3, lr}
   b5d86:	4b02      	ldr	r3, [pc, #8]	; (b5d90 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5d88:	681b      	ldr	r3, [r3, #0]
   b5d8a:	695b      	ldr	r3, [r3, #20]
   b5d8c:	9301      	str	r3, [sp, #4]
   b5d8e:	bd08      	pop	{r3, pc}
   b5d90:	00030218 	.word	0x00030218

000b5d94 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5d94:	b508      	push	{r3, lr}
   b5d96:	4b02      	ldr	r3, [pc, #8]	; (b5da0 <hal_rtc_time_is_valid+0xc>)
   b5d98:	681b      	ldr	r3, [r3, #0]
   b5d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d9c:	9301      	str	r3, [sp, #4]
   b5d9e:	bd08      	pop	{r3, pc}
   b5da0:	00030218 	.word	0x00030218

000b5da4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5da4:	b508      	push	{r3, lr}
   b5da6:	4b02      	ldr	r3, [pc, #8]	; (b5db0 <hal_rtc_get_time+0xc>)
   b5da8:	681b      	ldr	r3, [r3, #0]
   b5daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5dac:	9301      	str	r3, [sp, #4]
   b5dae:	bd08      	pop	{r3, pc}
   b5db0:	00030218 	.word	0x00030218

000b5db4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5db4:	b508      	push	{r3, lr}
   b5db6:	4b02      	ldr	r3, [pc, #8]	; (b5dc0 <hal_ble_stack_init+0xc>)
   b5db8:	681b      	ldr	r3, [r3, #0]
   b5dba:	689b      	ldr	r3, [r3, #8]
   b5dbc:	9301      	str	r3, [sp, #4]
   b5dbe:	bd08      	pop	{r3, pc}
   b5dc0:	00030278 	.word	0x00030278

000b5dc4 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b5dc4:	b508      	push	{r3, lr}
   b5dc6:	4b02      	ldr	r3, [pc, #8]	; (b5dd0 <hal_ble_select_antenna+0xc>)
   b5dc8:	681b      	ldr	r3, [r3, #0]
   b5dca:	691b      	ldr	r3, [r3, #16]
   b5dcc:	9301      	str	r3, [sp, #4]
   b5dce:	bd08      	pop	{r3, pc}
   b5dd0:	00030278 	.word	0x00030278

000b5dd4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5dd4:	b508      	push	{r3, lr}
   b5dd6:	4b02      	ldr	r3, [pc, #8]	; (b5de0 <hal_ble_gap_set_advertising_data+0xc>)
   b5dd8:	681b      	ldr	r3, [r3, #0]
   b5dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5ddc:	9301      	str	r3, [sp, #4]
   b5dde:	bd08      	pop	{r3, pc}
   b5de0:	00030278 	.word	0x00030278

000b5de4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5de4:	b508      	push	{r3, lr}
   b5de6:	4b02      	ldr	r3, [pc, #8]	; (b5df0 <hal_ble_gap_set_scan_response_data+0xc>)
   b5de8:	681b      	ldr	r3, [r3, #0]
   b5dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5dec:	9301      	str	r3, [sp, #4]
   b5dee:	bd08      	pop	{r3, pc}
   b5df0:	00030278 	.word	0x00030278

000b5df4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5df4:	b508      	push	{r3, lr}
   b5df6:	4b02      	ldr	r3, [pc, #8]	; (b5e00 <hal_ble_gap_start_advertising+0xc>)
   b5df8:	681b      	ldr	r3, [r3, #0]
   b5dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5dfc:	9301      	str	r3, [sp, #4]
   b5dfe:	bd08      	pop	{r3, pc}
   b5e00:	00030278 	.word	0x00030278

000b5e04 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5e04:	b508      	push	{r3, lr}
   b5e06:	4b03      	ldr	r3, [pc, #12]	; (b5e14 <hal_ble_gap_disconnect+0x10>)
   b5e08:	681b      	ldr	r3, [r3, #0]
   b5e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5e0e:	9301      	str	r3, [sp, #4]
   b5e10:	bd08      	pop	{r3, pc}
   b5e12:	0000      	.short	0x0000
   b5e14:	00030278 	.word	0x00030278

000b5e18 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b03      	ldr	r3, [pc, #12]	; (b5e28 <hal_ble_gatt_server_add_service+0x10>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5e22:	9301      	str	r3, [sp, #4]
   b5e24:	bd08      	pop	{r3, pc}
   b5e26:	0000      	.short	0x0000
   b5e28:	00030278 	.word	0x00030278

000b5e2c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b03      	ldr	r3, [pc, #12]	; (b5e3c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5e36:	9301      	str	r3, [sp, #4]
   b5e38:	bd08      	pop	{r3, pc}
   b5e3a:	0000      	.short	0x0000
   b5e3c:	00030278 	.word	0x00030278

000b5e40 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b03      	ldr	r3, [pc, #12]	; (b5e50 <hal_ble_gatt_client_write_with_response+0x10>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5e4a:	9301      	str	r3, [sp, #4]
   b5e4c:	bd08      	pop	{r3, pc}
   b5e4e:	0000      	.short	0x0000
   b5e50:	00030278 	.word	0x00030278

000b5e54 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e54:	b508      	push	{r3, lr}
   b5e56:	4b03      	ldr	r3, [pc, #12]	; (b5e64 <hal_ble_gatt_client_write_without_response+0x10>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5e5e:	9301      	str	r3, [sp, #4]
   b5e60:	bd08      	pop	{r3, pc}
   b5e62:	0000      	.short	0x0000
   b5e64:	00030278 	.word	0x00030278

000b5e68 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b03      	ldr	r3, [pc, #12]	; (b5e78 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5e72:	9301      	str	r3, [sp, #4]
   b5e74:	bd08      	pop	{r3, pc}
   b5e76:	0000      	.short	0x0000
   b5e78:	00030278 	.word	0x00030278

000b5e7c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b03      	ldr	r3, [pc, #12]	; (b5e8c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5e86:	9301      	str	r3, [sp, #4]
   b5e88:	bd08      	pop	{r3, pc}
   b5e8a:	0000      	.short	0x0000
   b5e8c:	00030278 	.word	0x00030278

000b5e90 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b03      	ldr	r3, [pc, #12]	; (b5ea0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5e9a:	9301      	str	r3, [sp, #4]
   b5e9c:	bd08      	pop	{r3, pc}
   b5e9e:	0000      	.short	0x0000
   b5ea0:	00030278 	.word	0x00030278

000b5ea4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ea4:	b508      	push	{r3, lr}
   b5ea6:	4b03      	ldr	r3, [pc, #12]	; (b5eb4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5ea8:	681b      	ldr	r3, [r3, #0]
   b5eaa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5eae:	9301      	str	r3, [sp, #4]
   b5eb0:	bd08      	pop	{r3, pc}
   b5eb2:	0000      	.short	0x0000
   b5eb4:	00030278 	.word	0x00030278

000b5eb8 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <os_thread_yield+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	68db      	ldr	r3, [r3, #12]
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030248 	.word	0x00030248

000b5ec8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <os_thread_scheduling+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	69db      	ldr	r3, [r3, #28]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030248 	.word	0x00030248

000b5ed8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <os_timer_create+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	6a1b      	ldr	r3, [r3, #32]
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	00030248 	.word	0x00030248

000b5ee8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <os_timer_destroy+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030248 	.word	0x00030248

000b5ef8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <os_timer_get_id+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030248 	.word	0x00030248

000b5f08 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <os_timer_change+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	00030248 	.word	0x00030248

000b5f18 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <os_mutex_recursive_create+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	00030248 	.word	0x00030248

000b5f28 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <os_mutex_recursive_lock+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	00030248 	.word	0x00030248

000b5f38 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <os_mutex_recursive_unlock+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	00030248 	.word	0x00030248

000b5f48 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <os_timer_set_id+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030248 	.word	0x00030248

000b5f58 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <inet_inet_ntop+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	695b      	ldr	r3, [r3, #20]
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030264 	.word	0x00030264

000b5f68 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <hal_usart_write+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	68db      	ldr	r3, [r3, #12]
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	0003023c 	.word	0x0003023c

000b5f78 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <hal_usart_available+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	691b      	ldr	r3, [r3, #16]
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	0003023c 	.word	0x0003023c

000b5f88 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <hal_usart_read+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	695b      	ldr	r3, [r3, #20]
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	0003023c 	.word	0x0003023c

000b5f98 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <hal_usart_peek+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	699b      	ldr	r3, [r3, #24]
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	0003023c 	.word	0x0003023c

000b5fa8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <hal_usart_flush+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	69db      	ldr	r3, [r3, #28]
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	0003023c 	.word	0x0003023c

000b5fb8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <hal_usart_is_enabled+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	6a1b      	ldr	r3, [r3, #32]
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	0003023c 	.word	0x0003023c

000b5fc8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <hal_usart_available_data_for_write+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	0003023c 	.word	0x0003023c

000b5fd8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <hal_usart_init_ex+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	0003023c 	.word	0x0003023c

000b5fe8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <hal_i2c_write+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	6a1b      	ldr	r3, [r3, #32]
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030228 	.word	0x00030228

000b5ff8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <hal_i2c_available+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030228 	.word	0x00030228

000b6008 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <hal_i2c_read+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030228 	.word	0x00030228

000b6018 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <hal_i2c_peek+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	00030228 	.word	0x00030228

000b6028 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <hal_i2c_flush+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	00030228 	.word	0x00030228

000b6038 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <hal_i2c_is_enabled+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	00030228 	.word	0x00030228

000b6048 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <hal_i2c_init+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	00030228 	.word	0x00030228

000b6058 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <hal_spi_init+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	69db      	ldr	r3, [r3, #28]
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	00030230 	.word	0x00030230

000b6068 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <hal_spi_is_enabled+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	6a1b      	ldr	r3, [r3, #32]
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	00030230 	.word	0x00030230

000b6078 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <HAL_USB_USART_Init+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	681b      	ldr	r3, [r3, #0]
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	0003024c 	.word	0x0003024c

000b6088 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <HAL_USB_USART_Available_Data+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	691b      	ldr	r3, [r3, #16]
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	0003024c 	.word	0x0003024c

000b6098 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	695b      	ldr	r3, [r3, #20]
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	0003024c 	.word	0x0003024c

000b60a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <HAL_USB_USART_Receive_Data+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	699b      	ldr	r3, [r3, #24]
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	0003024c 	.word	0x0003024c

000b60b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <HAL_USB_USART_Send_Data+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	69db      	ldr	r3, [r3, #28]
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	0003024c 	.word	0x0003024c

000b60c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <HAL_USB_USART_Flush_Data+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	6a1b      	ldr	r3, [r3, #32]
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	0003024c 	.word	0x0003024c

000b60d8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <panic_+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	00030260 	.word	0x00030260

000b60e8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <log_message+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	00030260 	.word	0x00030260

000b60f8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <system_mode+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	681b      	ldr	r3, [r3, #0]
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	00030220 	.word	0x00030220

000b6108 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <set_system_mode+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	685b      	ldr	r3, [r3, #4]
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	00030220 	.word	0x00030220

000b6118 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <system_delay_ms+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	695b      	ldr	r3, [r3, #20]
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	00030220 	.word	0x00030220

000b6128 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <system_thread_set_state+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	00030220 	.word	0x00030220

000b6138 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <application_thread_current+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	00030220 	.word	0x00030220

000b6148 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <application_thread_invoke+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	00030220 	.word	0x00030220

000b6158 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <system_thread_get_state+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	00030220 	.word	0x00030220

000b6168 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b03      	ldr	r3, [pc, #12]	; (b6178 <system_ctrl_set_app_request_handler+0x10>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6172:	9301      	str	r3, [sp, #4]
   b6174:	bd08      	pop	{r3, pc}
   b6176:	0000      	.short	0x0000
   b6178:	00030220 	.word	0x00030220

000b617c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b03      	ldr	r3, [pc, #12]	; (b618c <system_ctrl_set_result+0x10>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6186:	9301      	str	r3, [sp, #4]
   b6188:	bd08      	pop	{r3, pc}
   b618a:	0000      	.short	0x0000
   b618c:	00030220 	.word	0x00030220

000b6190 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <network_connect+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	685b      	ldr	r3, [r3, #4]
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030240 	.word	0x00030240

000b61a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <network_connecting+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	689b      	ldr	r3, [r3, #8]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030240 	.word	0x00030240

000b61b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <network_disconnect+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	68db      	ldr	r3, [r3, #12]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	00030240 	.word	0x00030240

000b61c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <network_ready+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	691b      	ldr	r3, [r3, #16]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	00030240 	.word	0x00030240

000b61d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <network_on+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	695b      	ldr	r3, [r3, #20]
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	00030240 	.word	0x00030240

000b61e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <network_off+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	699b      	ldr	r3, [r3, #24]
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	00030240 	.word	0x00030240

000b61f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <network_listen+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	69db      	ldr	r3, [r3, #28]
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	00030240 	.word	0x00030240

000b6200 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <network_listening+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	6a1b      	ldr	r3, [r3, #32]
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	00030240 	.word	0x00030240

000b6210 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <network_set_listen_timeout+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	00030240 	.word	0x00030240

000b6220 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <network_get_listen_timeout+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030240 	.word	0x00030240

000b6230 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <network_is_on+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	00030240 	.word	0x00030240

000b6240 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <network_is_off+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	00030240 	.word	0x00030240

000b6250 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <spark_process+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	689b      	ldr	r3, [r3, #8]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	00030244 	.word	0x00030244

000b6260 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <spark_cloud_flag_connected+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	695b      	ldr	r3, [r3, #20]
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	00030244 	.word	0x00030244

000b6270 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <spark_send_event+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	6a1b      	ldr	r3, [r3, #32]
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	00030244 	.word	0x00030244

000b6280 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <spark_subscribe+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	00030244 	.word	0x00030244

000b6290 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <spark_sync_time_pending+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030244 	.word	0x00030244

000b62a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <spark_set_random_seed_from_cloud_handler+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030244 	.word	0x00030244

000b62b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <malloc+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	681b      	ldr	r3, [r3, #0]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	0003021c 	.word	0x0003021c

000b62c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <free+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	685b      	ldr	r3, [r3, #4]
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	0003021c 	.word	0x0003021c

000b62d0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <realloc+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	689b      	ldr	r3, [r3, #8]
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	0003021c 	.word	0x0003021c

000b62e0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <siprintf+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	691b      	ldr	r3, [r3, #16]
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	0003021c 	.word	0x0003021c

000b62f0 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <vsnprintf+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	0003021c 	.word	0x0003021c

000b6300 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <abort+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	0003021c 	.word	0x0003021c

000b6310 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <_malloc_r+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	0003021c 	.word	0x0003021c

000b6320 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <__errno+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	0003021c 	.word	0x0003021c

000b6330 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <__assert_func+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	0003021c 	.word	0x0003021c

000b6340 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <newlib_impure_ptr_callback+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	0003021c 	.word	0x0003021c

000b6350 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <localtime_r+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	0003021c 	.word	0x0003021c

000b6360 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6360:	2200      	movs	r2, #0
   b6362:	6840      	ldr	r0, [r0, #4]
   b6364:	4611      	mov	r1, r2
   b6366:	f7ff bf4b 	b.w	b6200 <network_listening>

000b636a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b636a:	2200      	movs	r2, #0
   b636c:	6840      	ldr	r0, [r0, #4]
   b636e:	4611      	mov	r1, r2
   b6370:	f7ff bf56 	b.w	b6220 <network_get_listen_timeout>

000b6374 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6374:	6840      	ldr	r0, [r0, #4]
   b6376:	2200      	movs	r2, #0
   b6378:	f7ff bf4a 	b.w	b6210 <network_set_listen_timeout>

000b637c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b637c:	6840      	ldr	r0, [r0, #4]
   b637e:	2200      	movs	r2, #0
   b6380:	f081 0101 	eor.w	r1, r1, #1
   b6384:	f7ff bf34 	b.w	b61f0 <network_listen>

000b6388 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6388:	2300      	movs	r3, #0
   b638a:	6840      	ldr	r0, [r0, #4]
   b638c:	461a      	mov	r2, r3
   b638e:	4619      	mov	r1, r3
   b6390:	f7ff bf26 	b.w	b61e0 <network_off>

000b6394 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6394:	2300      	movs	r3, #0
   b6396:	6840      	ldr	r0, [r0, #4]
   b6398:	461a      	mov	r2, r3
   b639a:	4619      	mov	r1, r3
   b639c:	f7ff bf18 	b.w	b61d0 <network_on>

000b63a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b63a0:	2200      	movs	r2, #0
   b63a2:	6840      	ldr	r0, [r0, #4]
   b63a4:	4611      	mov	r1, r2
   b63a6:	f7ff bf0b 	b.w	b61c0 <network_ready>

000b63aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b63aa:	2200      	movs	r2, #0
   b63ac:	6840      	ldr	r0, [r0, #4]
   b63ae:	4611      	mov	r1, r2
   b63b0:	f7ff bef6 	b.w	b61a0 <network_connecting>

000b63b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b63b4:	6840      	ldr	r0, [r0, #4]
   b63b6:	2200      	movs	r2, #0
   b63b8:	2102      	movs	r1, #2
   b63ba:	f7ff bef9 	b.w	b61b0 <network_disconnect>

000b63be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b63be:	2300      	movs	r3, #0
   b63c0:	6840      	ldr	r0, [r0, #4]
   b63c2:	461a      	mov	r2, r3
   b63c4:	f7ff bee4 	b.w	b6190 <network_connect>

000b63c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b63c8:	4b02      	ldr	r3, [pc, #8]	; (b63d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b63ca:	2203      	movs	r2, #3
   b63cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b63ce:	4a02      	ldr	r2, [pc, #8]	; (b63d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b63d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b63d2:	4770      	bx	lr
   b63d4:	2003e5e0 	.word	0x2003e5e0
   b63d8:	000bb8ec 	.word	0x000bb8ec

000b63dc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b63dc:	b510      	push	{r4, lr}
   b63de:	4604      	mov	r4, r0
   b63e0:	4608      	mov	r0, r1
{
    _spi = spi;
   b63e2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b63e4:	f7ff fe38 	bl	b6058 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b63e8:	2300      	movs	r3, #0
   b63ea:	6063      	str	r3, [r4, #4]
}
   b63ec:	4620      	mov	r0, r4
   b63ee:	bd10      	pop	{r4, pc}

000b63f0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b63f0:	4b05      	ldr	r3, [pc, #20]	; (b6408 <_GLOBAL__sub_I_System+0x18>)
   b63f2:	2202      	movs	r2, #2
   b63f4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b63f6:	4b05      	ldr	r3, [pc, #20]	; (b640c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b63f8:	4a05      	ldr	r2, [pc, #20]	; (b6410 <_GLOBAL__sub_I_System+0x20>)
   b63fa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b63fc:	2000      	movs	r0, #0
   b63fe:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6402:	f7ff be81 	b.w	b6108 <set_system_mode>
   b6406:	bf00      	nop
   b6408:	2003e5f4 	.word	0x2003e5f4
   b640c:	2003e5e8 	.word	0x2003e5e8
   b6410:	ffff0000 	.word	0xffff0000

000b6414 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6414:	b510      	push	{r4, lr}
   b6416:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6418:	f7fe fb5c 	bl	b4ad4 <strlen>
   b641c:	3801      	subs	r0, #1
   b641e:	1823      	adds	r3, r4, r0
   b6420:	4620      	mov	r0, r4
	while(i<j){
   b6422:	4283      	cmp	r3, r0
   b6424:	d906      	bls.n	b6434 <_Z11str_reversePc+0x20>
		c = *i;
   b6426:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6428:	7819      	ldrb	r1, [r3, #0]
   b642a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b642e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6432:	e7f6      	b.n	b6422 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6434:	bd10      	pop	{r4, pc}

000b6436 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b6436:	b570      	push	{r4, r5, r6, lr}
   b6438:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b643a:	1e91      	subs	r1, r2, #2
   b643c:	2922      	cmp	r1, #34	; 0x22
   b643e:	d81d      	bhi.n	b647c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6440:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6442:	b930      	cbnz	r0, b6452 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6444:	4423      	add	r3, r4
            *ptr++ = '0';
   b6446:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6448:	429d      	cmp	r5, r3
   b644a:	d210      	bcs.n	b646e <ultoa+0x38>
            *ptr++ = '0';
   b644c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6450:	e7fa      	b.n	b6448 <ultoa+0x12>
            result.quot = a/radix;
   b6452:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b6456:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b645a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b645c:	2809      	cmp	r0, #9
                *ptr += '0';
   b645e:	bf94      	ite	ls
   b6460:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b6462:	3157      	addhi	r1, #87	; 0x57
   b6464:	b2c9      	uxtb	r1, r1
   b6466:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b646a:	4630      	mov	r0, r6
	while(a){
   b646c:	e7e9      	b.n	b6442 <ultoa+0xc>

	*ptr = '\0';
   b646e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6470:	4620      	mov	r0, r4
	*ptr = '\0';
   b6472:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6474:	f7ff ffce 	bl	b6414 <_Z11str_reversePc>
	return buffer;
   b6478:	4620      	mov	r0, r4
}
   b647a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b647c:	2000      	movs	r0, #0
   b647e:	e7fc      	b.n	b647a <ultoa+0x44>

000b6480 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b6480:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b6482:	2301      	movs	r3, #1
   b6484:	f7ff ffd7 	bl	b6436 <ultoa>
}
   b6488:	bd08      	pop	{r3, pc}

000b648a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b648a:	b510      	push	{r4, lr}
   b648c:	4604      	mov	r4, r0
{
	free(buffer);
   b648e:	6800      	ldr	r0, [r0, #0]
   b6490:	f7ff ff16 	bl	b62c0 <free>
}
   b6494:	4620      	mov	r0, r4
   b6496:	bd10      	pop	{r4, pc}

000b6498 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6498:	b510      	push	{r4, lr}
   b649a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b649c:	6800      	ldr	r0, [r0, #0]
   b649e:	b108      	cbz	r0, b64a4 <_ZN6String10invalidateEv+0xc>
   b64a0:	f7ff ff0e 	bl	b62c0 <free>
	buffer = NULL;
   b64a4:	2300      	movs	r3, #0
	capacity = len = 0;
   b64a6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b64aa:	6023      	str	r3, [r4, #0]
}
   b64ac:	bd10      	pop	{r4, pc}

000b64ae <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b64ae:	b538      	push	{r3, r4, r5, lr}
   b64b0:	4604      	mov	r4, r0
   b64b2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b64b4:	6800      	ldr	r0, [r0, #0]
   b64b6:	3101      	adds	r1, #1
   b64b8:	f7ff ff0a 	bl	b62d0 <realloc>
	if (newbuffer) {
   b64bc:	b110      	cbz	r0, b64c4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b64be:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b64c2:	2001      	movs	r0, #1
	}
	return 0;
}
   b64c4:	bd38      	pop	{r3, r4, r5, pc}

000b64c6 <_ZN6String7reserveEj>:
{
   b64c6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b64c8:	6803      	ldr	r3, [r0, #0]
{
   b64ca:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b64cc:	b123      	cbz	r3, b64d8 <_ZN6String7reserveEj+0x12>
   b64ce:	6843      	ldr	r3, [r0, #4]
   b64d0:	428b      	cmp	r3, r1
   b64d2:	d301      	bcc.n	b64d8 <_ZN6String7reserveEj+0x12>
   b64d4:	2001      	movs	r0, #1
}
   b64d6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff ffe8 	bl	b64ae <_ZN6String12changeBufferEj>
   b64de:	2800      	cmp	r0, #0
   b64e0:	d0f9      	beq.n	b64d6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b64e2:	68a3      	ldr	r3, [r4, #8]
   b64e4:	2b00      	cmp	r3, #0
   b64e6:	d1f5      	bne.n	b64d4 <_ZN6String7reserveEj+0xe>
   b64e8:	6822      	ldr	r2, [r4, #0]
   b64ea:	7013      	strb	r3, [r2, #0]
   b64ec:	e7f2      	b.n	b64d4 <_ZN6String7reserveEj+0xe>

000b64ee <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b64ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64f0:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b64f2:	4611      	mov	r1, r2
   b64f4:	9201      	str	r2, [sp, #4]
{
   b64f6:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b64f8:	f7ff ffe5 	bl	b64c6 <_ZN6String7reserveEj>
   b64fc:	9a01      	ldr	r2, [sp, #4]
   b64fe:	b928      	cbnz	r0, b650c <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6500:	4620      	mov	r0, r4
   b6502:	f7ff ffc9 	bl	b6498 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6506:	4620      	mov	r0, r4
   b6508:	b003      	add	sp, #12
   b650a:	bd30      	pop	{r4, r5, pc}
	len = length;
   b650c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b650e:	4629      	mov	r1, r5
   b6510:	6820      	ldr	r0, [r4, #0]
   b6512:	f002 ffa7 	bl	b9464 <memcpy>
	buffer[len] = 0;
   b6516:	6822      	ldr	r2, [r4, #0]
   b6518:	68a3      	ldr	r3, [r4, #8]
   b651a:	2100      	movs	r1, #0
   b651c:	54d1      	strb	r1, [r2, r3]
	return *this;
   b651e:	e7f2      	b.n	b6506 <_ZN6String4copyEPKcj+0x18>

000b6520 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6520:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6522:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6524:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6528:	4604      	mov	r4, r0
	len = 0;
   b652a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b652c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b652e:	b141      	cbz	r1, b6542 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6530:	4608      	mov	r0, r1
   b6532:	9101      	str	r1, [sp, #4]
   b6534:	f7fe face 	bl	b4ad4 <strlen>
   b6538:	9901      	ldr	r1, [sp, #4]
   b653a:	4602      	mov	r2, r0
   b653c:	4620      	mov	r0, r4
   b653e:	f7ff ffd6 	bl	b64ee <_ZN6String4copyEPKcj>
}
   b6542:	4620      	mov	r0, r4
   b6544:	b002      	add	sp, #8
   b6546:	bd10      	pop	{r4, pc}

000b6548 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6548:	4288      	cmp	r0, r1
{
   b654a:	b510      	push	{r4, lr}
   b654c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b654e:	d005      	beq.n	b655c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6550:	680b      	ldr	r3, [r1, #0]
   b6552:	b12b      	cbz	r3, b6560 <_ZN6StringaSERKS_+0x18>
   b6554:	688a      	ldr	r2, [r1, #8]
   b6556:	4619      	mov	r1, r3
   b6558:	f7ff ffc9 	bl	b64ee <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b655c:	4620      	mov	r0, r4
   b655e:	bd10      	pop	{r4, pc}
	else invalidate();
   b6560:	f7ff ff9a 	bl	b6498 <_ZN6String10invalidateEv>
   b6564:	e7fa      	b.n	b655c <_ZN6StringaSERKS_+0x14>

000b6566 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6566:	b510      	push	{r4, lr}
	buffer = NULL;
   b6568:	2300      	movs	r3, #0
String::String(const String &value)
   b656a:	4604      	mov	r4, r0
	capacity = 0;
   b656c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6570:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6572:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6574:	f7ff ffe8 	bl	b6548 <_ZN6StringaSERKS_>
}
   b6578:	4620      	mov	r0, r4
   b657a:	bd10      	pop	{r4, pc}

000b657c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b657c:	b513      	push	{r0, r1, r4, lr}
   b657e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6580:	b159      	cbz	r1, b659a <_ZN6StringaSEPKc+0x1e>
   b6582:	4608      	mov	r0, r1
   b6584:	9101      	str	r1, [sp, #4]
   b6586:	f7fe faa5 	bl	b4ad4 <strlen>
   b658a:	9901      	ldr	r1, [sp, #4]
   b658c:	4602      	mov	r2, r0
   b658e:	4620      	mov	r0, r4
   b6590:	f7ff ffad 	bl	b64ee <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6594:	4620      	mov	r0, r4
   b6596:	b002      	add	sp, #8
   b6598:	bd10      	pop	{r4, pc}
	else invalidate();
   b659a:	f7ff ff7d 	bl	b6498 <_ZN6String10invalidateEv>
   b659e:	e7f9      	b.n	b6594 <_ZN6StringaSEPKc+0x18>

000b65a0 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b65a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b65a2:	4604      	mov	r4, r0
	buffer = NULL;
   b65a4:	2300      	movs	r3, #0
	capacity = 0;
   b65a6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b65aa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b65ac:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b65ae:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b65b0:	a901      	add	r1, sp, #4
   b65b2:	f7ff ff65 	bl	b6480 <utoa>
	*this = buf;
   b65b6:	a901      	add	r1, sp, #4
   b65b8:	4620      	mov	r0, r4
   b65ba:	f7ff ffdf 	bl	b657c <_ZN6StringaSEPKc>
}
   b65be:	4620      	mov	r0, r4
   b65c0:	b004      	add	sp, #16
   b65c2:	bd10      	pop	{r4, pc}

000b65c4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b65c4:	b570      	push	{r4, r5, r6, lr}
   b65c6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b65c8:	460e      	mov	r6, r1
   b65ca:	b909      	cbnz	r1, b65d0 <_ZN6String6concatEPKcj+0xc>
   b65cc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b65ce:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b65d0:	b16a      	cbz	r2, b65ee <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b65d2:	6884      	ldr	r4, [r0, #8]
   b65d4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b65d6:	4621      	mov	r1, r4
   b65d8:	f7ff ff75 	bl	b64c6 <_ZN6String7reserveEj>
   b65dc:	2800      	cmp	r0, #0
   b65de:	d0f5      	beq.n	b65cc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b65e0:	6828      	ldr	r0, [r5, #0]
   b65e2:	68ab      	ldr	r3, [r5, #8]
   b65e4:	4631      	mov	r1, r6
   b65e6:	4418      	add	r0, r3
   b65e8:	f002 ff9a 	bl	b9520 <strcpy>
	len = newlen;
   b65ec:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b65ee:	2001      	movs	r0, #1
   b65f0:	e7ed      	b.n	b65ce <_ZN6String6concatEPKcj+0xa>

000b65f2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b65f2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b65f4:	688a      	ldr	r2, [r1, #8]
   b65f6:	6809      	ldr	r1, [r1, #0]
{
   b65f8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b65fa:	f7ff ffe3 	bl	b65c4 <_ZN6String6concatEPKcj>
   b65fe:	b910      	cbnz	r0, b6606 <_ZplRK15StringSumHelperRK6String+0x14>
   b6600:	4620      	mov	r0, r4
   b6602:	f7ff ff49 	bl	b6498 <_ZN6String10invalidateEv>
	return a;
}
   b6606:	4620      	mov	r0, r4
   b6608:	bd10      	pop	{r4, pc}
	...

000b660c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b660c:	b40e      	push	{r1, r2, r3}
   b660e:	b570      	push	{r4, r5, r6, lr}
   b6610:	b087      	sub	sp, #28
   b6612:	ad0b      	add	r5, sp, #44	; 0x2c
   b6614:	4604      	mov	r4, r0
   b6616:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b661a:	9201      	str	r2, [sp, #4]
   b661c:	462b      	mov	r3, r5
   b661e:	2105      	movs	r1, #5
   b6620:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6622:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6624:	f7ff fe64 	bl	b62f0 <vsnprintf>
    va_end(marker);

    String result;
   b6628:	490b      	ldr	r1, [pc, #44]	; (b6658 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b662a:	4606      	mov	r6, r0
    String result;
   b662c:	4620      	mov	r0, r4
   b662e:	f7ff ff77 	bl	b6520 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b6632:	4631      	mov	r1, r6
   b6634:	4620      	mov	r0, r4
   b6636:	f7ff ff46 	bl	b64c6 <_ZN6String7reserveEj>
    if (result.buffer) {
   b663a:	6820      	ldr	r0, [r4, #0]
   b663c:	b130      	cbz	r0, b664c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b663e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b6640:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6642:	462b      	mov	r3, r5
   b6644:	1c71      	adds	r1, r6, #1
   b6646:	f7ff fe53 	bl	b62f0 <vsnprintf>
        va_end(marker);
        result.len = n;
   b664a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b664c:	4620      	mov	r0, r4
   b664e:	b007      	add	sp, #28
   b6650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6654:	b003      	add	sp, #12
   b6656:	4770      	bx	lr
   b6658:	000bbe58 	.word	0x000bbe58

000b665c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b665c:	4770      	bx	lr

000b665e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b665e:	4770      	bx	lr

000b6660 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6660:	4770      	bx	lr

000b6662 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6662:	4770      	bx	lr

000b6664 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6664:	4b06      	ldr	r3, [pc, #24]	; (b6680 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6666:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6668:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b666a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b666e:	d005      	beq.n	b667c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6670:	4608      	mov	r0, r1
   b6672:	f002 fadd 	bl	b8c30 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6676:	2800      	cmp	r0, #0
   b6678:	bf08      	it	eq
   b667a:	2400      	moveq	r4, #0
      }
   b667c:	4620      	mov	r0, r4
   b667e:	bd10      	pop	{r4, pc}
   b6680:	000bbac0 	.word	0x000bbac0

000b6684 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6684:	4b06      	ldr	r3, [pc, #24]	; (b66a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6686:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6688:	b510      	push	{r4, lr}
   b668a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b668e:	d005      	beq.n	b669c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6690:	4608      	mov	r0, r1
   b6692:	f002 facd 	bl	b8c30 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6696:	2800      	cmp	r0, #0
   b6698:	bf08      	it	eq
   b669a:	2400      	moveq	r4, #0
      }
   b669c:	4620      	mov	r0, r4
   b669e:	bd10      	pop	{r4, pc}
   b66a0:	000bbac0 	.word	0x000bbac0

000b66a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b66a4:	4b06      	ldr	r3, [pc, #24]	; (b66c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b66a6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b66a8:	b510      	push	{r4, lr}
   b66aa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b66ae:	d005      	beq.n	b66bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b66b0:	4608      	mov	r0, r1
   b66b2:	f002 fabd 	bl	b8c30 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b66b6:	2800      	cmp	r0, #0
   b66b8:	bf08      	it	eq
   b66ba:	2400      	moveq	r4, #0
      }
   b66bc:	4620      	mov	r0, r4
   b66be:	bd10      	pop	{r4, pc}
   b66c0:	000bbac0 	.word	0x000bbac0

000b66c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b66c4:	b510      	push	{r4, lr}
   b66c6:	2168      	movs	r1, #104	; 0x68
   b66c8:	4604      	mov	r4, r0
   b66ca:	f7fe fa64 	bl	b4b96 <_ZdlPvj>
   b66ce:	4620      	mov	r0, r4
   b66d0:	bd10      	pop	{r4, pc}

000b66d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b66d2:	b510      	push	{r4, lr}
   b66d4:	2128      	movs	r1, #40	; 0x28
   b66d6:	4604      	mov	r4, r0
   b66d8:	f7fe fa5d 	bl	b4b96 <_ZdlPvj>
   b66dc:	4620      	mov	r0, r4
   b66de:	bd10      	pop	{r4, pc}

000b66e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b66e0:	b510      	push	{r4, lr}
   b66e2:	2130      	movs	r1, #48	; 0x30
   b66e4:	4604      	mov	r4, r0
   b66e6:	f7fe fa56 	bl	b4b96 <_ZdlPvj>
   b66ea:	4620      	mov	r0, r4
   b66ec:	bd10      	pop	{r4, pc}

000b66ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b66ee:	2168      	movs	r1, #104	; 0x68
   b66f0:	f7fe ba51 	b.w	b4b96 <_ZdlPvj>

000b66f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b66f4:	2128      	movs	r1, #40	; 0x28
   b66f6:	f7fe ba4e 	b.w	b4b96 <_ZdlPvj>

000b66fa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b66fa:	2130      	movs	r1, #48	; 0x30
   b66fc:	f7fe ba4b 	b.w	b4b96 <_ZdlPvj>

000b6700 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6700:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6702:	2500      	movs	r5, #0
   b6704:	1cec      	adds	r4, r5, #3
   b6706:	428c      	cmp	r4, r1
   b6708:	d80d      	bhi.n	b6726 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b670a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b670c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b670e:	5d87      	ldrb	r7, [r0, r6]
   b6710:	4297      	cmp	r7, r2
   b6712:	d105      	bne.n	b6720 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6714:	4426      	add	r6, r4
   b6716:	42b1      	cmp	r1, r6
   b6718:	d305      	bcc.n	b6726 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b671a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b671c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6720:	3401      	adds	r4, #1
   b6722:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6724:	e7ee      	b.n	b6704 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6726:	2000      	movs	r0, #0
   b6728:	e7f9      	b.n	b671e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b672c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b672c:	4a02      	ldr	r2, [pc, #8]	; (b6738 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b672e:	4903      	ldr	r1, [pc, #12]	; (b673c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6730:	200a      	movs	r0, #10
   b6732:	f7ff bcd1 	b.w	b60d8 <panic_>
   b6736:	bf00      	nop
   b6738:	000b5d75 	.word	0x000b5d75
   b673c:	000bb920 	.word	0x000bb920

000b6740 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6740:	b430      	push	{r4, r5}
   b6742:	460d      	mov	r5, r1
   b6744:	4611      	mov	r1, r2
   b6746:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6748:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b674a:	6809      	ldr	r1, [r1, #0]
   b674c:	6828      	ldr	r0, [r5, #0]
   b674e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6752:	46a4      	mov	ip, r4
      }
   b6754:	bc30      	pop	{r4, r5}
   b6756:	4760      	bx	ip

000b6758 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6758:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b675a:	b538      	push	{r3, r4, r5, lr}
   b675c:	4604      	mov	r4, r0
	switch (__op)
   b675e:	d102      	bne.n	b6766 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6760:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6762:	6023      	str	r3, [r4, #0]
	}
   b6764:	e003      	b.n	b676e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6766:	2a02      	cmp	r2, #2
   b6768:	d003      	beq.n	b6772 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b676a:	2a03      	cmp	r2, #3
   b676c:	d00d      	beq.n	b678a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b676e:	2000      	movs	r0, #0
   b6770:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6772:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6774:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6776:	f7fe fa08 	bl	b4b8a <_Znwj>
   b677a:	4603      	mov	r3, r0
   b677c:	2800      	cmp	r0, #0
   b677e:	d0f0      	beq.n	b6762 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6780:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6784:	e883 0003 	stmia.w	r3, {r0, r1}
   b6788:	e7eb      	b.n	b6762 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b678a:	6800      	ldr	r0, [r0, #0]
   b678c:	2800      	cmp	r0, #0
   b678e:	d0ee      	beq.n	b676e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6790:	2108      	movs	r1, #8
   b6792:	f7fe fa00 	bl	b4b96 <_ZdlPvj>
   b6796:	e7ea      	b.n	b676e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6798 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6798:	b510      	push	{r4, lr}
   b679a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b679c:	3058      	adds	r0, #88	; 0x58
   b679e:	f7fe fce4 	bl	b516a <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b67a2:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b67a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b67aa:	f7ff be6e 	b.w	b648a <_ZN6StringD1Ev>

000b67ae <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b67ae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b67b2:	b2da      	uxtb	r2, r3
   b67b4:	2a09      	cmp	r2, #9
   b67b6:	d801      	bhi.n	b67bc <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b67b8:	4618      	mov	r0, r3
   b67ba:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b67bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b67c0:	2b05      	cmp	r3, #5
   b67c2:	d801      	bhi.n	b67c8 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b67c4:	3857      	subs	r0, #87	; 0x57
   b67c6:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b67c8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b67cc:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b67ce:	bf94      	ite	ls
   b67d0:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b67d2:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b67d6:	4770      	bx	lr

000b67d8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b67d8:	b510      	push	{r4, lr}
            locked_(false) {
   b67da:	2300      	movs	r3, #0
   b67dc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b67de:	4b04      	ldr	r3, [pc, #16]	; (b67f0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b67e0:	4604      	mov	r4, r0
   b67e2:	6818      	ldr	r0, [r3, #0]
   b67e4:	f7ff fba0 	bl	b5f28 <os_mutex_recursive_lock>
        locked_ = true;
   b67e8:	2301      	movs	r3, #1
   b67ea:	7023      	strb	r3, [r4, #0]
    }
   b67ec:	4620      	mov	r0, r4
   b67ee:	bd10      	pop	{r4, pc}
   b67f0:	2003e600 	.word	0x2003e600

000b67f4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b67f4:	b510      	push	{r4, lr}
        if (locked_) {
   b67f6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b67f8:	4604      	mov	r4, r0
        if (locked_) {
   b67fa:	b11b      	cbz	r3, b6804 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b67fc:	4b02      	ldr	r3, [pc, #8]	; (b6808 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b67fe:	6818      	ldr	r0, [r3, #0]
   b6800:	f7ff fb9a 	bl	b5f38 <os_mutex_recursive_unlock>
    }
   b6804:	4620      	mov	r0, r4
   b6806:	bd10      	pop	{r4, pc}
   b6808:	2003e600 	.word	0x2003e600

000b680c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b680c:	b082      	sub	sp, #8
   b680e:	4603      	mov	r3, r0
    address_ = addr;
   b6810:	6808      	ldr	r0, [r1, #0]
   b6812:	6849      	ldr	r1, [r1, #4]
   b6814:	466a      	mov	r2, sp
   b6816:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6818:	466a      	mov	r2, sp
   b681a:	ca03      	ldmia	r2!, {r0, r1}
   b681c:	6018      	str	r0, [r3, #0]
}
   b681e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6820:	6059      	str	r1, [r3, #4]
}
   b6822:	b002      	add	sp, #8
   b6824:	4770      	bx	lr

000b6826 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6826:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6828:	7982      	ldrb	r2, [r0, #6]
   b682a:	798b      	ldrb	r3, [r1, #6]
   b682c:	429a      	cmp	r2, r3
   b682e:	d106      	bne.n	b683e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6830:	2206      	movs	r2, #6
   b6832:	f002 fe07 	bl	b9444 <memcmp>
   b6836:	fab0 f080 	clz	r0, r0
   b683a:	0940      	lsrs	r0, r0, #5
}
   b683c:	bd08      	pop	{r3, pc}
    return false;
   b683e:	2000      	movs	r0, #0
   b6840:	e7fc      	b.n	b683c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6842 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6842:	f04f 33ff 	mov.w	r3, #4294967295
   b6846:	6003      	str	r3, [r0, #0]
   b6848:	8083      	strh	r3, [r0, #4]
}
   b684a:	2000      	movs	r0, #0
   b684c:	4770      	bx	lr

000b684e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b684e:	b508      	push	{r3, lr}
   b6850:	4602      	mov	r2, r0
        : address_{} {
   b6852:	2100      	movs	r1, #0
   b6854:	6001      	str	r1, [r0, #0]
   b6856:	6041      	str	r1, [r0, #4]
    clear();
   b6858:	f7ff fff3 	bl	b6842 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b685c:	7191      	strb	r1, [r2, #6]
}
   b685e:	4610      	mov	r0, r2
   b6860:	bd08      	pop	{r3, pc}
	...

000b6864 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6864:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6866:	2301      	movs	r3, #1
   b6868:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b686a:	4b05      	ldr	r3, [pc, #20]	; (b6880 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b686c:	4602      	mov	r2, r0
   b686e:	f103 0110 	add.w	r1, r3, #16
   b6872:	f853 4b04 	ldr.w	r4, [r3], #4
   b6876:	f842 4b04 	str.w	r4, [r2], #4
   b687a:	428b      	cmp	r3, r1
   b687c:	d1f9      	bne.n	b6872 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b687e:	bd10      	pop	{r4, pc}
   b6880:	000bb576 	.word	0x000bb576

000b6884 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6884:	b510      	push	{r4, lr}
    if (uuid128) {
   b6886:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6888:	4604      	mov	r4, r0
    if (uuid128) {
   b688a:	b1b1      	cbz	r1, b68ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b688c:	2a01      	cmp	r2, #1
   b688e:	f101 0210 	add.w	r2, r1, #16
   b6892:	d10a      	bne.n	b68aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6894:	4601      	mov	r1, r0
   b6896:	f853 0b04 	ldr.w	r0, [r3], #4
   b689a:	f841 0b04 	str.w	r0, [r1], #4
   b689e:	4293      	cmp	r3, r2
   b68a0:	d1f9      	bne.n	b6896 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b68a2:	2301      	movs	r3, #1
   b68a4:	6123      	str	r3, [r4, #16]
}
   b68a6:	4620      	mov	r0, r4
   b68a8:	bd10      	pop	{r4, pc}
   b68aa:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b68ac:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b68b0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b68b4:	429a      	cmp	r2, r3
   b68b6:	d1f9      	bne.n	b68ac <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b68b8:	e7f3      	b.n	b68a2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b68ba:	2210      	movs	r2, #16
   b68bc:	f002 fdfa 	bl	b94b4 <memset>
   b68c0:	e7f1      	b.n	b68a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b68c2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b68c2:	b538      	push	{r3, r4, r5, lr}
   b68c4:	4604      	mov	r4, r0
   b68c6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b68c8:	461a      	mov	r2, r3
   b68ca:	f7ff ffdb 	bl	b6884 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b68ce:	81a5      	strh	r5, [r4, #12]
}
   b68d0:	4620      	mov	r0, r4
   b68d2:	bd38      	pop	{r3, r4, r5, pc}

000b68d4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b68d4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b68d6:	6902      	ldr	r2, [r0, #16]
   b68d8:	b922      	cbnz	r2, b68e4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b68da:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b68dc:	3800      	subs	r0, #0
   b68de:	bf18      	it	ne
   b68e0:	2001      	movne	r0, #1
}
   b68e2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b68e4:	4902      	ldr	r1, [pc, #8]	; (b68f0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b68e6:	2210      	movs	r2, #16
   b68e8:	f002 fdac 	bl	b9444 <memcmp>
   b68ec:	e7f6      	b.n	b68dc <_ZNK8particle7BleUuid7isValidEv+0x8>
   b68ee:	bf00      	nop
   b68f0:	000bbad8 	.word	0x000bbad8

000b68f4 <_ZNK8particle7BleUuid4typeEv>:
}
   b68f4:	6900      	ldr	r0, [r0, #16]
   b68f6:	4770      	bx	lr

000b68f8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b68f8:	b538      	push	{r3, r4, r5, lr}
   b68fa:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b68fc:	2214      	movs	r2, #20
   b68fe:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6900:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6902:	f002 fdd7 	bl	b94b4 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6906:	6923      	ldr	r3, [r4, #16]
   b6908:	b91b      	cbnz	r3, b6912 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b690a:	89a3      	ldrh	r3, [r4, #12]
   b690c:	802b      	strh	r3, [r5, #0]
}
   b690e:	4628      	mov	r0, r5
   b6910:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6912:	2301      	movs	r3, #1
   b6914:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6916:	4621      	mov	r1, r4
   b6918:	462b      	mov	r3, r5
   b691a:	f104 0210 	add.w	r2, r4, #16
   b691e:	f851 0b04 	ldr.w	r0, [r1], #4
   b6922:	f843 0b04 	str.w	r0, [r3], #4
   b6926:	4291      	cmp	r1, r2
   b6928:	d1f9      	bne.n	b691e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b692a:	e7f0      	b.n	b690e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b692c <_ZNK8particle7BleUuid7shortedEv>:
}
   b692c:	8980      	ldrh	r0, [r0, #12]
   b692e:	4770      	bx	lr

000b6930 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6930:	4770      	bx	lr

000b6932 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6932:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6934:	6902      	ldr	r2, [r0, #16]
   b6936:	690b      	ldr	r3, [r1, #16]
   b6938:	429a      	cmp	r2, r3
   b693a:	d106      	bne.n	b694a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b693c:	2210      	movs	r2, #16
   b693e:	f002 fd81 	bl	b9444 <memcmp>
   b6942:	fab0 f080 	clz	r0, r0
   b6946:	0940      	lsrs	r0, r0, #5
}
   b6948:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b694a:	2000      	movs	r0, #0
   b694c:	e7fc      	b.n	b6948 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6950 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6950:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6952:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6956:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6958:	4b34      	ldr	r3, [pc, #208]	; (b6a2c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b695a:	460c      	mov	r4, r1
   b695c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b695e:	4602      	mov	r2, r0
   b6960:	f103 0110 	add.w	r1, r3, #16
   b6964:	f853 0b04 	ldr.w	r0, [r3], #4
   b6968:	f842 0b04 	str.w	r0, [r2], #4
   b696c:	428b      	cmp	r3, r1
   b696e:	d1f9      	bne.n	b6964 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6970:	b344      	cbz	r4, b69c4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6972:	2124      	movs	r1, #36	; 0x24
   b6974:	4620      	mov	r0, r4
   b6976:	f002 fe0c 	bl	b9592 <strnlen>
   b697a:	2804      	cmp	r0, #4
   b697c:	f04f 0500 	mov.w	r5, #0
   b6980:	d123      	bne.n	b69ca <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6982:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6986:	af01      	add	r7, sp, #4
   b6988:	1ca5      	adds	r5, r4, #2
   b698a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b698c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6990:	f7ff ff0d 	bl	b67ae <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6994:	f1b0 0800 	subs.w	r8, r0, #0
   b6998:	db12      	blt.n	b69c0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b699a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b699e:	f7ff ff06 	bl	b67ae <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b69a2:	2800      	cmp	r0, #0
   b69a4:	db0c      	blt.n	b69c0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b69a6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b69a8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b69ac:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b69ae:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b69b2:	d1eb      	bne.n	b698c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b69b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b69b8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b69ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b69be:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b69c0:	2300      	movs	r3, #0
   b69c2:	6133      	str	r3, [r6, #16]
}
   b69c4:	b002      	add	sp, #8
   b69c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b69ca:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b69ce:	2124      	movs	r1, #36	; 0x24
   b69d0:	4620      	mov	r0, r4
   b69d2:	f002 fdde 	bl	b9592 <strnlen>
   b69d6:	42a8      	cmp	r0, r5
   b69d8:	d807      	bhi.n	b69ea <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b69da:	4642      	mov	r2, r8
   b69dc:	2100      	movs	r1, #0
   b69de:	4630      	mov	r0, r6
}
   b69e0:	b002      	add	sp, #8
   b69e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b69e6:	f002 bd65 	b.w	b94b4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b69ea:	f1b8 0f00 	cmp.w	r8, #0
   b69ee:	d0e9      	beq.n	b69c4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b69f0:	5d60      	ldrb	r0, [r4, r5]
   b69f2:	f7ff fedc 	bl	b67ae <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b69f6:	0603      	lsls	r3, r0, #24
   b69f8:	d415      	bmi.n	b6a26 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b69fa:	0100      	lsls	r0, r0, #4
   b69fc:	f108 38ff 	add.w	r8, r8, #4294967295
   b6a00:	b2c7      	uxtb	r7, r0
   b6a02:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6a06:	2124      	movs	r1, #36	; 0x24
   b6a08:	4620      	mov	r0, r4
   b6a0a:	f002 fdc2 	bl	b9592 <strnlen>
   b6a0e:	3501      	adds	r5, #1
   b6a10:	42a8      	cmp	r0, r5
   b6a12:	d908      	bls.n	b6a26 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6a14:	5d60      	ldrb	r0, [r4, r5]
   b6a16:	f7ff feca 	bl	b67ae <_ZN8particle11hexToNibbleEc>
   b6a1a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6a1c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6a1e:	bfa4      	itt	ge
   b6a20:	4338      	orrge	r0, r7
   b6a22:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6a26:	3501      	adds	r5, #1
   b6a28:	e7d1      	b.n	b69ce <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6a2a:	bf00      	nop
   b6a2c:	000bb576 	.word	0x000bb576

000b6a30 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6a30:	b513      	push	{r0, r1, r4, lr}
   b6a32:	4604      	mov	r4, r0
   b6a34:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6a36:	f7ff ff15 	bl	b6864 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6a3a:	4620      	mov	r0, r4
   b6a3c:	9901      	ldr	r1, [sp, #4]
   b6a3e:	f7ff ff87 	bl	b6950 <_ZN8particle7BleUuid9constructEPKc>
}
   b6a42:	4620      	mov	r0, r4
   b6a44:	b002      	add	sp, #8
   b6a46:	bd10      	pop	{r4, pc}

000b6a48 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6a48:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6a4e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6a50:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6a52:	8043      	strh	r3, [r0, #2]
   b6a54:	220e      	movs	r2, #14
   b6a56:	4629      	mov	r1, r5
   b6a58:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6a5a:	7105      	strb	r5, [r0, #4]
   b6a5c:	3006      	adds	r0, #6
   b6a5e:	f002 fd29 	bl	b94b4 <memset>
   b6a62:	f104 0014 	add.w	r0, r4, #20
   b6a66:	f7ff fefd 	bl	b6864 <_ZN8particle7BleUuidC1Ev>
   b6a6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6a6e:	f7ff fef9 	bl	b6864 <_ZN8particle7BleUuidC1Ev>
   b6a72:	4904      	ldr	r1, [pc, #16]	; (b6a84 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6a74:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6a78:	f7ff fd52 	bl	b6520 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6a7c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6a7e:	4620      	mov	r0, r4
   b6a80:	bd38      	pop	{r3, r4, r5, pc}
   b6a82:	bf00      	nop
   b6a84:	000bbe58 	.word	0x000bbe58

000b6a88 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6a88:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6a8a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6a8e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6a92:	4293      	cmp	r3, r2
   b6a94:	4618      	mov	r0, r3
   b6a96:	d006      	beq.n	b6aa6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6a98:	6804      	ldr	r4, [r0, #0]
   b6a9a:	8824      	ldrh	r4, [r4, #0]
   b6a9c:	428c      	cmp	r4, r1
   b6a9e:	f103 0308 	add.w	r3, r3, #8
   b6aa2:	d1f6      	bne.n	b6a92 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6aa4:	bd10      	pop	{r4, pc}
        return nullptr;
   b6aa6:	2000      	movs	r0, #0
   b6aa8:	e7fc      	b.n	b6aa4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6aac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6aae:	4606      	mov	r6, r0
   b6ab0:	b085      	sub	sp, #20
   b6ab2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6ab4:	460d      	mov	r5, r1
   b6ab6:	2900      	cmp	r1, #0
   b6ab8:	d050      	beq.n	b6b5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6aba:	2a00      	cmp	r2, #0
   b6abc:	d04e      	beq.n	b6b5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6abe:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6ac0:	7823      	ldrb	r3, [r4, #0]
   b6ac2:	2af4      	cmp	r2, #244	; 0xf4
   b6ac4:	bf28      	it	cs
   b6ac6:	22f4      	movcs	r2, #244	; 0xf4
   b6ac8:	b343      	cbz	r3, b6b1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6aca:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6acc:	0798      	lsls	r0, r3, #30
   b6ace:	d509      	bpl.n	b6ae4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6ad0:	89a0      	ldrh	r0, [r4, #12]
   b6ad2:	9203      	str	r2, [sp, #12]
   b6ad4:	2300      	movs	r3, #0
   b6ad6:	f7ff f9a9 	bl	b5e2c <hal_ble_gatt_server_set_characteristic_value>
   b6ada:	2800      	cmp	r0, #0
   b6adc:	9a03      	ldr	r2, [sp, #12]
   b6ade:	da03      	bge.n	b6ae8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6ae0:	b005      	add	sp, #20
   b6ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6ae4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6ae8:	6834      	ldr	r4, [r6, #0]
   b6aea:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6aec:	06d9      	lsls	r1, r3, #27
   b6aee:	d509      	bpl.n	b6b04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6af0:	2f01      	cmp	r7, #1
   b6af2:	d007      	beq.n	b6b04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6af4:	89a0      	ldrh	r0, [r4, #12]
   b6af6:	2300      	movs	r3, #0
   b6af8:	4629      	mov	r1, r5
}
   b6afa:	b005      	add	sp, #20
   b6afc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6b00:	f7ff b9c6 	b.w	b5e90 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6b04:	069b      	lsls	r3, r3, #26
   b6b06:	d5eb      	bpl.n	b6ae0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6b08:	2f02      	cmp	r7, #2
   b6b0a:	d0e9      	beq.n	b6ae0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6b0c:	89a0      	ldrh	r0, [r4, #12]
   b6b0e:	2300      	movs	r3, #0
   b6b10:	4629      	mov	r1, r5
}
   b6b12:	b005      	add	sp, #20
   b6b14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6b18:	f7ff b9c4 	b.w	b5ea4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6b1c:	8860      	ldrh	r0, [r4, #2]
   b6b1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6b22:	4288      	cmp	r0, r1
   b6b24:	d01c      	beq.n	b6b60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6b26:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6b28:	074e      	lsls	r6, r1, #29
   b6b2a:	d501      	bpl.n	b6b30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6b2c:	2f01      	cmp	r7, #1
   b6b2e:	d104      	bne.n	b6b3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6b30:	070b      	lsls	r3, r1, #28
   b6b32:	d409      	bmi.n	b6b48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6b34:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6b38:	e7d2      	b.n	b6ae0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6b3a:	89a1      	ldrh	r1, [r4, #12]
   b6b3c:	9300      	str	r3, [sp, #0]
   b6b3e:	4613      	mov	r3, r2
   b6b40:	462a      	mov	r2, r5
   b6b42:	f7ff f987 	bl	b5e54 <hal_ble_gatt_client_write_without_response>
   b6b46:	e7cb      	b.n	b6ae0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6b48:	2f02      	cmp	r7, #2
   b6b4a:	d0f3      	beq.n	b6b34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6b4c:	2300      	movs	r3, #0
   b6b4e:	89a1      	ldrh	r1, [r4, #12]
   b6b50:	9300      	str	r3, [sp, #0]
   b6b52:	4613      	mov	r3, r2
   b6b54:	462a      	mov	r2, r5
   b6b56:	f7ff f973 	bl	b5e40 <hal_ble_gatt_client_write_with_response>
   b6b5a:	e7c1      	b.n	b6ae0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6b5c:	4802      	ldr	r0, [pc, #8]	; (b6b68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6b5e:	e7bf      	b.n	b6ae0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6b60:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6b64:	e7bc      	b.n	b6ae0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6b66:	bf00      	nop
   b6b68:	fffffef2 	.word	0xfffffef2

000b6b6c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b6e:	460c      	mov	r4, r1
   b6b70:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6b72:	21f4      	movs	r1, #244	; 0xf4
   b6b74:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6b76:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6b78:	f002 fd0b 	bl	b9592 <strnlen>
   b6b7c:	9b01      	ldr	r3, [sp, #4]
   b6b7e:	4602      	mov	r2, r0
   b6b80:	4621      	mov	r1, r4
   b6b82:	4628      	mov	r0, r5
}
   b6b84:	b003      	add	sp, #12
   b6b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6b8a:	f7ff bf8f 	b.w	b6aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b6b90 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6b94:	2600      	movs	r6, #0
   b6b96:	6006      	str	r6, [r0, #0]
   b6b98:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6b9a:	2028      	movs	r0, #40	; 0x28
   b6b9c:	460c      	mov	r4, r1
   b6b9e:	f7fd fff4 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b6ba2:	1e05      	subs	r5, r0, #0
   b6ba4:	f105 080c 	add.w	r8, r5, #12
   b6ba8:	d00f      	beq.n	b6bca <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6baa:	2301      	movs	r3, #1
   b6bac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6bb0:	4b08      	ldr	r3, [pc, #32]	; (b6bd4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6bb2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6bb4:	4640      	mov	r0, r8
   b6bb6:	f7ff fe55 	bl	b6864 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6bbc:	622e      	str	r6, [r5, #32]
   b6bbe:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6bc2:	4646      	mov	r6, r8
   b6bc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6bc6:	6823      	ldr	r3, [r4, #0]
   b6bc8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6bca:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6bce:	4638      	mov	r0, r7
   b6bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6bd4:	000bba90 	.word	0x000bba90

000b6bd8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6bd8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6bda:	2500      	movs	r5, #0
   b6bdc:	6005      	str	r5, [r0, #0]
   b6bde:	4606      	mov	r6, r0
   b6be0:	2030      	movs	r0, #48	; 0x30
   b6be2:	f7fd ffd2 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b6be6:	4604      	mov	r4, r0
   b6be8:	b188      	cbz	r0, b6c0e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6bea:	2301      	movs	r3, #1
   b6bec:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6bf0:	4b09      	ldr	r3, [pc, #36]	; (b6c18 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6bf2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6bf8:	8183      	strh	r3, [r0, #12]
   b6bfa:	300e      	adds	r0, #14
   b6bfc:	f7ff fe27 	bl	b684e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6c00:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6c04:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6c08:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6c0c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6c0e:	6074      	str	r4, [r6, #4]
   b6c10:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6c12:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6c14:	4630      	mov	r0, r6
   b6c16:	bd70      	pop	{r4, r5, r6, pc}
   b6c18:	000bbaac 	.word	0x000bbaac

000b6c1c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6c1e:	460d      	mov	r5, r1
   b6c20:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6c22:	a801      	add	r0, sp, #4
   b6c24:	f7ff fdd8 	bl	b67d8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6c28:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6c2a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6c2e:	6023      	str	r3, [r4, #0]
   b6c30:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6c34:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6c36:	a801      	add	r0, sp, #4
   b6c38:	f7ff fddc 	bl	b67f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6c3c:	4620      	mov	r0, r4
   b6c3e:	b003      	add	sp, #12
   b6c40:	bd30      	pop	{r4, r5, pc}

000b6c42 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6c42:	b530      	push	{r4, r5, lr}
   b6c44:	4605      	mov	r5, r0
   b6c46:	b087      	sub	sp, #28
   b6c48:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6c4a:	a801      	add	r0, sp, #4
   b6c4c:	f7ff fdc4 	bl	b67d8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6c50:	682a      	ldr	r2, [r5, #0]
   b6c52:	6823      	ldr	r3, [r4, #0]
   b6c54:	8812      	ldrh	r2, [r2, #0]
   b6c56:	881b      	ldrh	r3, [r3, #0]
   b6c58:	429a      	cmp	r2, r3
   b6c5a:	d10d      	bne.n	b6c78 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6c5c:	4629      	mov	r1, r5
   b6c5e:	a802      	add	r0, sp, #8
   b6c60:	f7ff ffdc 	bl	b6c1c <_ZNK8particle13BlePeerDevice7addressEv>
   b6c64:	4621      	mov	r1, r4
   b6c66:	a804      	add	r0, sp, #16
   b6c68:	f7ff ffd8 	bl	b6c1c <_ZNK8particle13BlePeerDevice7addressEv>
   b6c6c:	a904      	add	r1, sp, #16
   b6c6e:	a802      	add	r0, sp, #8
   b6c70:	f7ff fdd9 	bl	b6826 <_ZNK8particle10BleAddresseqERKS0_>
   b6c74:	4604      	mov	r4, r0
   b6c76:	b900      	cbnz	r0, b6c7a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6c78:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6c7a:	a801      	add	r0, sp, #4
   b6c7c:	f7ff fdba 	bl	b67f4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6c80:	4620      	mov	r0, r4
   b6c82:	b007      	add	sp, #28
   b6c84:	bd30      	pop	{r4, r5, pc}
	...

000b6c88 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6c88:	b510      	push	{r4, lr}
   b6c8a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6c8c:	2064      	movs	r0, #100	; 0x64
   b6c8e:	f7fd ff7c 	bl	b4b8a <_Znwj>
   b6c92:	b168      	cbz	r0, b6cb0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6c94:	2300      	movs	r3, #0
   b6c96:	e9c0 3300 	strd	r3, r3, [r0]
   b6c9a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6ca2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6ca6:	6203      	str	r3, [r0, #32]
   b6ca8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6caa:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6cac:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6cae:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6cb0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6cb2:	b920      	cbnz	r0, b6cbe <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6cb4:	4a0a      	ldr	r2, [pc, #40]	; (b6ce0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6cb6:	490b      	ldr	r1, [pc, #44]	; (b6ce4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6cb8:	200a      	movs	r0, #10
   b6cba:	f7ff fa0d 	bl	b60d8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6cbe:	2000      	movs	r0, #0
   b6cc0:	f7ff f878 	bl	b5db4 <hal_ble_stack_init>
   b6cc4:	b120      	cbz	r0, b6cd0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6cc6:	4a06      	ldr	r2, [pc, #24]	; (b6ce0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6cc8:	4907      	ldr	r1, [pc, #28]	; (b6ce8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6cca:	200a      	movs	r0, #10
   b6ccc:	f7ff fa04 	bl	b60d8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6cd0:	6821      	ldr	r1, [r4, #0]
   b6cd2:	4806      	ldr	r0, [pc, #24]	; (b6cec <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6cd4:	2200      	movs	r2, #0
   b6cd6:	f7ff f8d1 	bl	b5e7c <hal_ble_set_callback_on_periph_link_events>
}
   b6cda:	4620      	mov	r0, r4
   b6cdc:	bd10      	pop	{r4, pc}
   b6cde:	bf00      	nop
   b6ce0:	000b5d75 	.word	0x000b5d75
   b6ce4:	000bb920 	.word	0x000bb920
   b6ce8:	000bb95e 	.word	0x000bb95e
   b6cec:	000b7299 	.word	0x000b7299

000b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6cf0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6cf2:	4c0a      	ldr	r4, [pc, #40]	; (b6d1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6cf4:	7823      	ldrb	r3, [r4, #0]
   b6cf6:	f3bf 8f5b 	dmb	ish
   b6cfa:	07db      	lsls	r3, r3, #31
   b6cfc:	d40c      	bmi.n	b6d18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6cfe:	4620      	mov	r0, r4
   b6d00:	f7fd ff4b 	bl	b4b9a <__cxa_guard_acquire>
   b6d04:	b140      	cbz	r0, b6d18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6d06:	4806      	ldr	r0, [pc, #24]	; (b6d20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6d08:	f7ff ffbe 	bl	b6c88 <_ZN8particle14BleLocalDeviceC1Ev>
   b6d0c:	4620      	mov	r0, r4
   b6d0e:	f7fd ff49 	bl	b4ba4 <__cxa_guard_release>
   b6d12:	4804      	ldr	r0, [pc, #16]	; (b6d24 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6d14:	f002 fb90 	bl	b9438 <atexit>
    return instance;
}
   b6d18:	4801      	ldr	r0, [pc, #4]	; (b6d20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6d1a:	bd10      	pop	{r4, pc}
   b6d1c:	2003e5f8 	.word	0x2003e5f8
   b6d20:	2003e604 	.word	0x2003e604
   b6d24:	000b6f41 	.word	0x000b6f41

000b6d28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6d28:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6d2a:	6803      	ldr	r3, [r0, #0]
   b6d2c:	3b09      	subs	r3, #9
   b6d2e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6d30:	b08d      	sub	sp, #52	; 0x34
   b6d32:	4604      	mov	r4, r0
   b6d34:	460d      	mov	r5, r1
    switch (event->type) {
   b6d36:	d811      	bhi.n	b6d5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6d38:	f7ff ffda 	bl	b6cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d3c:	88a1      	ldrh	r1, [r4, #4]
   b6d3e:	6800      	ldr	r0, [r0, #0]
   b6d40:	f7ff fea2 	bl	b6a88 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6d44:	4603      	mov	r3, r0
   b6d46:	b958      	cbnz	r0, b6d60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6d48:	2220      	movs	r2, #32
   b6d4a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6d4e:	4a0b      	ldr	r2, [pc, #44]	; (b6d7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6d50:	9200      	str	r2, [sp, #0]
   b6d52:	490b      	ldr	r1, [pc, #44]	; (b6d80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6d54:	aa04      	add	r2, sp, #16
   b6d56:	2032      	movs	r0, #50	; 0x32
   b6d58:	f7ff f9c6 	bl	b60e8 <log_message>
}
   b6d5c:	b00d      	add	sp, #52	; 0x34
   b6d5e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6d60:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6d62:	2a00      	cmp	r2, #0
   b6d64:	d0fa      	beq.n	b6d5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6d66:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6d6a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6d6e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6d72:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6d74:	aa04      	add	r2, sp, #16
   b6d76:	a903      	add	r1, sp, #12
   b6d78:	47a0      	blx	r4
}
   b6d7a:	e7ef      	b.n	b6d5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6d7c:	000bb9a0 	.word	0x000bb9a0
   b6d80:	000bb937 	.word	0x000bb937

000b6d84 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6d84:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6d86:	2000      	movs	r0, #0
   b6d88:	f7ff f814 	bl	b5db4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6d8c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6d90:	bd08      	pop	{r3, pc}

000b6d92 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b6d92:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b6d94:	2100      	movs	r1, #0
   b6d96:	f7ff b815 	b.w	b5dc4 <hal_ble_select_antenna>

000b6d9a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6d9a:	b919      	cbnz	r1, b6da4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6d9c:	460a      	mov	r2, r1
   b6d9e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6da0:	f7ff b818 	b.w	b5dd4 <hal_ble_gap_set_advertising_data>
   b6da4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6da8:	2200      	movs	r2, #0
   b6daa:	e7f9      	b.n	b6da0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6dac <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6dac:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6dae:	69d8      	ldr	r0, [r3, #28]
}
   b6db0:	2800      	cmp	r0, #0
   b6db2:	bfd4      	ite	le
   b6db4:	2000      	movle	r0, #0
   b6db6:	2001      	movgt	r0, #1
   b6db8:	4770      	bx	lr

000b6dba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6dba:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6dbc:	1e14      	subs	r4, r2, #0
   b6dbe:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6dc0:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6dc2:	db02      	blt.n	b6dca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6dc4:	1862      	adds	r2, r4, r1
   b6dc6:	429a      	cmp	r2, r3
   b6dc8:	dd00      	ble.n	b6dcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6dca:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6dcc:	682a      	ldr	r2, [r5, #0]
   b6dce:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6dd0:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6dd2:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6dd4:	1a52      	subs	r2, r2, r1
   b6dd6:	f002 fb53 	bl	b9480 <memmove>
    size_ -= n;
   b6dda:	686a      	ldr	r2, [r5, #4]
   b6ddc:	1b12      	subs	r2, r2, r4
   b6dde:	606a      	str	r2, [r5, #4]
}
   b6de0:	bd38      	pop	{r3, r4, r5, pc}

000b6de2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6de2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6de4:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6de6:	4604      	mov	r4, r0
   b6de8:	460d      	mov	r5, r1
   b6dea:	ab01      	add	r3, sp, #4
   b6dec:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6df0:	f7ff fc86 	bl	b6700 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6df4:	4602      	mov	r2, r0
   b6df6:	b138      	cbz	r0, b6e08 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6df8:	9901      	ldr	r1, [sp, #4]
   b6dfa:	4620      	mov	r0, r4
   b6dfc:	f7ff ffdd 	bl	b6dba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6e00:	4629      	mov	r1, r5
   b6e02:	4620      	mov	r0, r4
   b6e04:	f7ff ffed 	bl	b6de2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6e08:	b003      	add	sp, #12
   b6e0a:	bd30      	pop	{r4, r5, pc}

000b6e0c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6e0c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6e0e:	460c      	mov	r4, r1
   b6e10:	b929      	cbnz	r1, b6e1e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6e12:	460a      	mov	r2, r1
   b6e14:	4608      	mov	r0, r1
}
   b6e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6e1a:	f7fe bfe3 	b.w	b5de4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6e1e:	2101      	movs	r1, #1
   b6e20:	4620      	mov	r0, r4
   b6e22:	f7ff ffde 	bl	b6de2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6e26:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6e2a:	2200      	movs	r2, #0
   b6e2c:	e7f3      	b.n	b6e16 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6e2e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6e2e:	b538      	push	{r3, r4, r5, lr}
   b6e30:	4604      	mov	r4, r0
   b6e32:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6e34:	f7ff ffb1 	bl	b6d9a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6e38:	2800      	cmp	r0, #0
   b6e3a:	db0a      	blt.n	b6e52 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6e3c:	4629      	mov	r1, r5
   b6e3e:	4620      	mov	r0, r4
   b6e40:	f7ff ffe4 	bl	b6e0c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6e44:	2800      	cmp	r0, #0
   b6e46:	db04      	blt.n	b6e52 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b6e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6e4c:	2000      	movs	r0, #0
   b6e4e:	f7fe bfd1 	b.w	b5df4 <hal_ble_gap_start_advertising>
}
   b6e52:	bd38      	pop	{r3, r4, r5, pc}

000b6e54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6e54:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6e56:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6e58:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6e5a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6e5c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6e5e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6e60:	f7fd fe93 	bl	b4b8a <_Znwj>
   b6e64:	b118      	cbz	r0, b6e6e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
   b6e66:	682b      	ldr	r3, [r5, #0]
   b6e68:	6003      	str	r3, [r0, #0]
   b6e6a:	686b      	ldr	r3, [r5, #4]
   b6e6c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6e6e:	4b03      	ldr	r3, [pc, #12]	; (b6e7c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6e70:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6e72:	4b03      	ldr	r3, [pc, #12]	; (b6e80 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6e74:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6e76:	60a3      	str	r3, [r4, #8]
      }
   b6e78:	4620      	mov	r0, r4
   b6e7a:	bd38      	pop	{r3, r4, r5, pc}
   b6e7c:	000b6741 	.word	0x000b6741
   b6e80:	000b6759 	.word	0x000b6759

000b6e84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6e84:	680b      	ldr	r3, [r1, #0]
   b6e86:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6e88:	b113      	cbz	r3, b6e90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6e8a:	685a      	ldr	r2, [r3, #4]
   b6e8c:	3201      	adds	r2, #1
   b6e8e:	605a      	str	r2, [r3, #4]
      }
   b6e90:	4770      	bx	lr

000b6e92 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6e92:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6e94:	f851 3b04 	ldr.w	r3, [r1], #4
   b6e98:	4604      	mov	r4, r0
   b6e9a:	f840 3b04 	str.w	r3, [r0], #4
   b6e9e:	f7ff fff1 	bl	b6e84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6ea2:	6823      	ldr	r3, [r4, #0]
   b6ea4:	b90b      	cbnz	r3, b6eaa <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6ea6:	f7ff fc41 	bl	b672c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6eaa:	4620      	mov	r0, r4
   b6eac:	bd10      	pop	{r4, pc}

000b6eae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6eae:	b510      	push	{r4, lr}
   b6eb0:	f851 3b04 	ldr.w	r3, [r1], #4
   b6eb4:	4604      	mov	r4, r0
   b6eb6:	f840 3b04 	str.w	r3, [r0], #4
   b6eba:	f7ff ffe3 	bl	b6e84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6ebe:	4620      	mov	r0, r4
   b6ec0:	bd10      	pop	{r4, pc}

000b6ec2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6ec2:	b510      	push	{r4, lr}
   b6ec4:	f851 3b04 	ldr.w	r3, [r1], #4
   b6ec8:	4604      	mov	r4, r0
   b6eca:	f840 3b04 	str.w	r3, [r0], #4
   b6ece:	f7ff ffd9 	bl	b6e84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6ed2:	4620      	mov	r0, r4
   b6ed4:	bd10      	pop	{r4, pc}

000b6ed6 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6ed6:	b510      	push	{r4, lr}
   b6ed8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6eda:	3004      	adds	r0, #4
   b6edc:	f7fd ff96 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6ee0:	4620      	mov	r0, r4
   b6ee2:	bd10      	pop	{r4, pc}

000b6ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6ee4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6ee6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6eea:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6eec:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6ef0:	42ae      	cmp	r6, r5
   b6ef2:	d004      	beq.n	b6efe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6ef4:	1d28      	adds	r0, r5, #4
   b6ef6:	f7fd ff89 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6efa:	3508      	adds	r5, #8
   b6efc:	e7f8      	b.n	b6ef0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6efe:	6820      	ldr	r0, [r4, #0]
   b6f00:	f7ff f9de 	bl	b62c0 <free>
}
   b6f04:	4620      	mov	r0, r4
   b6f06:	bd70      	pop	{r4, r5, r6, pc}

000b6f08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6f08:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6f0a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6f0e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6f10:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6f14:	42ae      	cmp	r6, r5
   b6f16:	d004      	beq.n	b6f22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6f18:	1d28      	adds	r0, r5, #4
   b6f1a:	f7fd ff77 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f1e:	3508      	adds	r5, #8
   b6f20:	e7f8      	b.n	b6f14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6f22:	6820      	ldr	r0, [r4, #0]
   b6f24:	f7ff f9cc 	bl	b62c0 <free>
}
   b6f28:	4620      	mov	r0, r4
   b6f2a:	bd70      	pop	{r4, r5, r6, pc}

000b6f2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6f2c:	b510      	push	{r4, lr}
   b6f2e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6f30:	3024      	adds	r0, #36	; 0x24
   b6f32:	f7ff ffe9 	bl	b6f08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6f36:	f104 0018 	add.w	r0, r4, #24
   b6f3a:	f7ff ffd3 	bl	b6ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6f3e:	bd10      	pop	{r4, pc}

000b6f40 <__tcf_0>:
    static BleLocalDevice instance;
   b6f40:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6f42:	4b17      	ldr	r3, [pc, #92]	; (b6fa0 <__tcf_0+0x60>)
   b6f44:	681c      	ldr	r4, [r3, #0]
   b6f46:	b354      	cbz	r4, b6f9e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6f48:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6f4c:	f7fe f90d 	bl	b516a <_ZNSt14_Function_baseD1Ev>
   b6f50:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6f54:	f7fe f909 	bl	b516a <_ZNSt14_Function_baseD1Ev>
   b6f58:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6f5c:	f7fe f905 	bl	b516a <_ZNSt14_Function_baseD1Ev>
   b6f60:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6f64:	f7fe f901 	bl	b516a <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6f68:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6f6c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6f70:	42ae      	cmp	r6, r5
   b6f72:	d004      	beq.n	b6f7e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6f74:	1d28      	adds	r0, r5, #4
   b6f76:	f7fd ff49 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f7a:	3508      	adds	r5, #8
   b6f7c:	e7f8      	b.n	b6f70 <__tcf_0+0x30>
    ::free(ptr);
   b6f7e:	69a0      	ldr	r0, [r4, #24]
   b6f80:	f7ff f99e 	bl	b62c0 <free>
    ~BleLocalDeviceImpl() = default;
   b6f84:	f104 000c 	add.w	r0, r4, #12
   b6f88:	f7ff ffbe 	bl	b6f08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	f7ff ffa9 	bl	b6ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6f92:	4620      	mov	r0, r4
   b6f94:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6f9a:	f7fd bdfc 	b.w	b4b96 <_ZdlPvj>
   b6f9e:	bd70      	pop	{r4, r5, r6, pc}
   b6fa0:	2003e604 	.word	0x2003e604

000b6fa4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6fa4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6fa6:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6fa8:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6fac:	e9c1 3300 	strd	r3, r3, [r1]
   b6fb0:	6803      	ldr	r3, [r0, #0]
   b6fb2:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6fb4:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6fb6:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6fb8:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6fba:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6fbc:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6fbe:	f7fd ff25 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6fc2:	b002      	add	sp, #8
   b6fc4:	bd10      	pop	{r4, pc}

000b6fc6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6fc6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6fc8:	b510      	push	{r4, lr}
      if (_M_empty())
   b6fca:	b90a      	cbnz	r2, b6fd0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6fcc:	f001 fe2c 	bl	b8c28 <_ZSt25__throw_bad_function_callv>
    }
   b6fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6fd4:	68c3      	ldr	r3, [r0, #12]
   b6fd6:	4718      	bx	r3

000b6fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6fd8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6fda:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6fdc:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6fde:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6fe0:	dd03      	ble.n	b6fea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6fe2:	f7ff f975 	bl	b62d0 <realloc>
            if (!d) {
   b6fe6:	b918      	cbnz	r0, b6ff0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6fe8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6fea:	f7ff f969 	bl	b62c0 <free>
        T* d = nullptr;
   b6fee:	2000      	movs	r0, #0
        data_ = d;
   b6ff0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6ff2:	60a5      	str	r5, [r4, #8]
        return true;
   b6ff4:	2001      	movs	r0, #1
   b6ff6:	e7f7      	b.n	b6fe8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6ff8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6ff8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6ffa:	6883      	ldr	r3, [r0, #8]
   b6ffc:	428b      	cmp	r3, r1
   b6ffe:	da02      	bge.n	b7006 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7000:	f7ff ffea 	bl	b6fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7004:	bd08      	pop	{r3, pc}
    return true;
   b7006:	2001      	movs	r0, #1
   b7008:	e7fc      	b.n	b7004 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b700a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b700a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b700e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7010:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7012:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7014:	4419      	add	r1, r3
   b7016:	6883      	ldr	r3, [r0, #8]
   b7018:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b701a:	4604      	mov	r4, r0
   b701c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b701e:	dc12      	bgt.n	b7046 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7020:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7022:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7024:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7026:	1bd2      	subs	r2, r2, r7
   b7028:	4631      	mov	r1, r6
   b702a:	1970      	adds	r0, r6, r5
   b702c:	f002 fa28 	bl	b9480 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7030:	462a      	mov	r2, r5
   b7032:	4641      	mov	r1, r8
   b7034:	4630      	mov	r0, r6
   b7036:	f002 fa15 	bl	b9464 <memcpy>
    size_ += n;
   b703a:	6863      	ldr	r3, [r4, #4]
   b703c:	442b      	add	r3, r5
   b703e:	6063      	str	r3, [r4, #4]
    return true;
   b7040:	2001      	movs	r0, #1
}
   b7042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7046:	f7ff ffc7 	bl	b6fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b704a:	2800      	cmp	r0, #0
   b704c:	d1e8      	bne.n	b7020 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b704e:	e7f8      	b.n	b7042 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7050 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7052:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7054:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7058:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b705a:	4604      	mov	r4, r0
   b705c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b705e:	da0b      	bge.n	b7078 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7060:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7062:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7064:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7066:	1b52      	subs	r2, r2, r5
   b7068:	1c48      	adds	r0, r1, #1
   b706a:	f002 fa09 	bl	b9480 <memmove>
    new(p) T(std::move(value));
   b706e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7070:	6863      	ldr	r3, [r4, #4]
   b7072:	3301      	adds	r3, #1
   b7074:	6063      	str	r3, [r4, #4]
}
   b7076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7078:	3101      	adds	r1, #1
   b707a:	f7ff ffad 	bl	b6fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b707e:	2800      	cmp	r0, #0
   b7080:	d1ee      	bne.n	b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7082:	e7f8      	b.n	b7076 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7084 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7084:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7086:	6841      	ldr	r1, [r0, #4]
   b7088:	f7ff bfe2 	b.w	b7050 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b708c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b708c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7090:	4604      	mov	r4, r0
   b7092:	461d      	mov	r5, r3
   b7094:	460f      	mov	r7, r1
   b7096:	ab01      	add	r3, sp, #4
   b7098:	4690      	mov	r8, r2
   b709a:	460a      	mov	r2, r1
   b709c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b70a0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b70a4:	f7ff fb2c 	bl	b6700 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b70a8:	1cae      	adds	r6, r5, #2
   b70aa:	6863      	ldr	r3, [r4, #4]
   b70ac:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b70ae:	f1b9 0f00 	cmp.w	r9, #0
   b70b2:	d126      	bne.n	b7102 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b70b4:	b328      	cbz	r0, b7102 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b70b6:	4433      	add	r3, r6
   b70b8:	1a1b      	subs	r3, r3, r0
   b70ba:	2bff      	cmp	r3, #255	; 0xff
   b70bc:	d809      	bhi.n	b70d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b70be:	9901      	ldr	r1, [sp, #4]
   b70c0:	4620      	mov	r0, r4
   b70c2:	f7ff fe7a 	bl	b6dba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b70c6:	6861      	ldr	r1, [r4, #4]
   b70c8:	4620      	mov	r0, r4
   b70ca:	4431      	add	r1, r6
   b70cc:	f7ff ff94 	bl	b6ff8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b70d0:	b918      	cbnz	r0, b70da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b70d2:	6860      	ldr	r0, [r4, #4]
}
   b70d4:	b003      	add	sp, #12
   b70d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b70da:	1c6a      	adds	r2, r5, #1
   b70dc:	9901      	ldr	r1, [sp, #4]
   b70de:	b2d2      	uxtb	r2, r2
   b70e0:	4620      	mov	r0, r4
   b70e2:	f7ff ffb5 	bl	b7050 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b70e6:	9901      	ldr	r1, [sp, #4]
   b70e8:	463a      	mov	r2, r7
   b70ea:	3101      	adds	r1, #1
   b70ec:	4620      	mov	r0, r4
   b70ee:	f7ff ffaf 	bl	b7050 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b70f2:	9901      	ldr	r1, [sp, #4]
   b70f4:	462b      	mov	r3, r5
   b70f6:	4642      	mov	r2, r8
   b70f8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b70fa:	4620      	mov	r0, r4
   b70fc:	f7ff ff85 	bl	b700a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7100:	e7e7      	b.n	b70d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7102:	18f1      	adds	r1, r6, r3
   b7104:	29ff      	cmp	r1, #255	; 0xff
   b7106:	d8e4      	bhi.n	b70d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7108:	4620      	mov	r0, r4
   b710a:	f7ff ff75 	bl	b6ff8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b710e:	2800      	cmp	r0, #0
   b7110:	d0df      	beq.n	b70d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7112:	1c69      	adds	r1, r5, #1
   b7114:	b2c9      	uxtb	r1, r1
   b7116:	4620      	mov	r0, r4
   b7118:	f7ff ffb4 	bl	b7084 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b711c:	4639      	mov	r1, r7
   b711e:	4620      	mov	r0, r4
   b7120:	f7ff ffb0 	bl	b7084 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7124:	6861      	ldr	r1, [r4, #4]
   b7126:	462b      	mov	r3, r5
   b7128:	4642      	mov	r2, r8
   b712a:	e7e6      	b.n	b70fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b712c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b712c:	b430      	push	{r4, r5}
   b712e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7132:	b11a      	cbz	r2, b713c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7134:	9502      	str	r5, [sp, #8]
}
   b7136:	bc30      	pop	{r4, r5}
   b7138:	f7ff bfa8 	b.w	b708c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b713c:	6840      	ldr	r0, [r0, #4]
}
   b713e:	bc30      	pop	{r4, r5}
   b7140:	4770      	bx	lr

000b7142 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7142:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7144:	2300      	movs	r3, #0
   b7146:	e9c0 3300 	strd	r3, r3, [r0]
   b714a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b714c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b714e:	9300      	str	r3, [sp, #0]
   b7150:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7152:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7156:	4619      	mov	r1, r3
   b7158:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b715c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b715e:	f7ff ffe5 	bl	b712c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7162:	4620      	mov	r0, r4
   b7164:	b004      	add	sp, #16
   b7166:	bd10      	pop	{r4, pc}

000b7168 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b716a:	460a      	mov	r2, r1
   b716c:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b716e:	2114      	movs	r1, #20
   b7170:	4610      	mov	r0, r2
   b7172:	9203      	str	r2, [sp, #12]
   b7174:	f002 fa0d 	bl	b9592 <strnlen>
   b7178:	2100      	movs	r1, #0
   b717a:	4603      	mov	r3, r0
   b717c:	9100      	str	r1, [sp, #0]
   b717e:	9a03      	ldr	r2, [sp, #12]
   b7180:	2109      	movs	r1, #9
   b7182:	4620      	mov	r0, r4
   b7184:	f7ff ffd2 	bl	b712c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7188:	b004      	add	sp, #16
   b718a:	bd10      	pop	{r4, pc}

000b718c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b718c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b718e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7190:	4604      	mov	r4, r0
   b7192:	460d      	mov	r5, r1
   b7194:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7196:	d914      	bls.n	b71c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7198:	4290      	cmp	r0, r2
   b719a:	d213      	bcs.n	b71c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b719c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b71a0:	1a75      	subs	r5, r6, r1
   b71a2:	f1a1 0708 	sub.w	r7, r1, #8
   b71a6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b71a8:	42b7      	cmp	r7, r6
   b71aa:	d018      	beq.n	b71de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b71ac:	b11c      	cbz	r4, b71b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b71ae:	4631      	mov	r1, r6
   b71b0:	4620      	mov	r0, r4
   b71b2:	f7ff fe86 	bl	b6ec2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b71b6:	1d30      	adds	r0, r6, #4
   b71b8:	f7fd fe28 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b71bc:	3e08      	subs	r6, #8
   b71be:	3c08      	subs	r4, #8
   b71c0:	e7f2      	b.n	b71a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b71c2:	d00c      	beq.n	b71de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b71c4:	42b5      	cmp	r5, r6
   b71c6:	d00a      	beq.n	b71de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b71c8:	b11c      	cbz	r4, b71d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b71ca:	4629      	mov	r1, r5
   b71cc:	4620      	mov	r0, r4
   b71ce:	f7ff fe78 	bl	b6ec2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b71d2:	1d28      	adds	r0, r5, #4
   b71d4:	f7fd fe1a 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b71d8:	3508      	adds	r5, #8
   b71da:	3408      	adds	r4, #8
   b71dc:	e7f2      	b.n	b71c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b71de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b71e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b71e2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b71e4:	6846      	ldr	r6, [r0, #4]
   b71e6:	4668      	mov	r0, sp
   b71e8:	f7ff fe6b 	bl	b6ec2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71ec:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b71f0:	429f      	cmp	r7, r3
   b71f2:	db12      	blt.n	b721a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b71f4:	3701      	adds	r7, #1
        if (n > 0) {
   b71f6:	2f00      	cmp	r7, #0
   b71f8:	dd29      	ble.n	b724e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b71fa:	00f8      	lsls	r0, r7, #3
   b71fc:	f7ff f858 	bl	b62b0 <malloc>
            if (!d) {
   b7200:	4605      	mov	r5, r0
   b7202:	b1f0      	cbz	r0, b7242 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7204:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7208:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b720c:	f7ff ffbe 	bl	b718c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7210:	6820      	ldr	r0, [r4, #0]
   b7212:	f7ff f855 	bl	b62c0 <free>
        data_ = d;
   b7216:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7218:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b721a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b721c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b721e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7222:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7226:	4631      	mov	r1, r6
   b7228:	f106 0008 	add.w	r0, r6, #8
   b722c:	f7ff ffae 	bl	b718c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7230:	b11e      	cbz	r6, b723a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7232:	4669      	mov	r1, sp
   b7234:	4630      	mov	r0, r6
   b7236:	f7ff fe44 	bl	b6ec2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b723a:	6863      	ldr	r3, [r4, #4]
   b723c:	3301      	adds	r3, #1
   b723e:	6063      	str	r3, [r4, #4]
    return true;
   b7240:	2501      	movs	r5, #1
   b7242:	a801      	add	r0, sp, #4
   b7244:	f7fd fde2 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7248:	4628      	mov	r0, r5
   b724a:	b003      	add	sp, #12
   b724c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b724e:	2500      	movs	r5, #0
   b7250:	e7de      	b.n	b7210 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7254:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7258:	4605      	mov	r5, r0
   b725a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b725c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7260:	42a6      	cmp	r6, r4
   b7262:	d005      	beq.n	b7270 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7264:	4639      	mov	r1, r7
   b7266:	4620      	mov	r0, r4
   b7268:	f7ff fceb 	bl	b6c42 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b726c:	b108      	cbz	r0, b7272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b726e:	b914      	cbnz	r4, b7276 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7272:	3408      	adds	r4, #8
   b7274:	e7f4      	b.n	b7260 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7276:	1d20      	adds	r0, r4, #4
   b7278:	f7fd fdc8 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b727c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7280:	f104 0108 	add.w	r1, r4, #8
   b7284:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7288:	4620      	mov	r0, r4
   b728a:	f7ff ff7f 	bl	b718c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b728e:	686b      	ldr	r3, [r5, #4]
   b7290:	3b01      	subs	r3, #1
   b7292:	606b      	str	r3, [r5, #4]
    return true;
   b7294:	e7ec      	b.n	b7270 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7298 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b729c:	4605      	mov	r5, r0
   b729e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b72a0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b72a2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b72a4:	f7ff fa98 	bl	b67d8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b72a8:	682e      	ldr	r6, [r5, #0]
   b72aa:	1ef3      	subs	r3, r6, #3
   b72ac:	2b0d      	cmp	r3, #13
   b72ae:	d83c      	bhi.n	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b72b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   b72b4:	0053000e 	.word	0x0053000e
   b72b8:	00d1003b 	.word	0x00d1003b
   b72bc:	003b003b 	.word	0x003b003b
   b72c0:	003b003b 	.word	0x003b003b
   b72c4:	009b003b 	.word	0x009b003b
   b72c8:	009b009b 	.word	0x009b009b
   b72cc:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b72d0:	a804      	add	r0, sp, #16
   b72d2:	f7ff fc81 	bl	b6bd8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b72d6:	9b04      	ldr	r3, [sp, #16]
   b72d8:	89aa      	ldrh	r2, [r5, #12]
   b72da:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b72dc:	6869      	ldr	r1, [r5, #4]
   b72de:	9804      	ldr	r0, [sp, #16]
   b72e0:	3108      	adds	r1, #8
   b72e2:	3002      	adds	r0, #2
   b72e4:	f7ff fa92 	bl	b680c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b72e8:	a904      	add	r1, sp, #16
   b72ea:	a806      	add	r0, sp, #24
   b72ec:	f7ff fde9 	bl	b6ec2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b72f0:	a906      	add	r1, sp, #24
   b72f2:	f104 0018 	add.w	r0, r4, #24
   b72f6:	f7ff ff73 	bl	b71e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b72fa:	4605      	mov	r5, r0
   b72fc:	a807      	add	r0, sp, #28
   b72fe:	f7fd fd85 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7302:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7304:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7306:	b9b5      	cbnz	r5, b7336 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7308:	4b5d      	ldr	r3, [pc, #372]	; (b7480 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b730a:	495e      	ldr	r1, [pc, #376]	; (b7484 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b730c:	9300      	str	r3, [sp, #0]
   b730e:	2032      	movs	r0, #50	; 0x32
   b7310:	462b      	mov	r3, r5
   b7312:	aa06      	add	r2, sp, #24
   b7314:	9507      	str	r5, [sp, #28]
   b7316:	f7fe fee7 	bl	b60e8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b731a:	9b04      	ldr	r3, [sp, #16]
   b731c:	4629      	mov	r1, r5
   b731e:	8818      	ldrh	r0, [r3, #0]
   b7320:	f7fe fd70 	bl	b5e04 <hal_ble_gap_disconnect>
   b7324:	a805      	add	r0, sp, #20
   b7326:	f7fd fd71 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b732a:	a803      	add	r0, sp, #12
   b732c:	f7ff fa62 	bl	b67f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7330:	b00e      	add	sp, #56	; 0x38
   b7332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7336:	4a54      	ldr	r2, [pc, #336]	; (b7488 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7338:	9200      	str	r2, [sp, #0]
   b733a:	2300      	movs	r3, #0
   b733c:	4951      	ldr	r1, [pc, #324]	; (b7484 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b733e:	9307      	str	r3, [sp, #28]
   b7340:	aa06      	add	r2, sp, #24
   b7342:	2001      	movs	r0, #1
   b7344:	f7fe fed0 	bl	b60e8 <log_message>
                if (impl->connectedCallback_) {
   b7348:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b734a:	2b00      	cmp	r3, #0
   b734c:	d0ea      	beq.n	b7324 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b734e:	a904      	add	r1, sp, #16
   b7350:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7354:	f7ff fe37 	bl	b6fc6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7358:	e7e4      	b.n	b7324 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b735a:	89a9      	ldrh	r1, [r5, #12]
   b735c:	4620      	mov	r0, r4
   b735e:	f7ff fb93 	bl	b6a88 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7362:	4606      	mov	r6, r0
   b7364:	2800      	cmp	r0, #0
   b7366:	d0e0      	beq.n	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7368:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b736a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b736e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7372:	8029      	strh	r1, [r5, #0]
   b7374:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7378:	429a      	cmp	r2, r3
   b737a:	d003      	beq.n	b7384 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b737c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7380:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7382:	e7f9      	b.n	b7378 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b7384:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7388:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b738c:	45b8      	cmp	r8, r7
   b738e:	d004      	beq.n	b739a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7390:	1d38      	adds	r0, r7, #4
   b7392:	f7fd fd3b 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7396:	3708      	adds	r7, #8
   b7398:	e7f8      	b.n	b738c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b739a:	2300      	movs	r3, #0
   b739c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b739e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b73a2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b73a6:	45b8      	cmp	r8, r7
   b73a8:	d004      	beq.n	b73b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b73aa:	1d38      	adds	r0, r7, #4
   b73ac:	f7fd fd2e 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b73b0:	3708      	adds	r7, #8
   b73b2:	e7f8      	b.n	b73a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b73b4:	2300      	movs	r3, #0
   b73b6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b73b8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b73ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b73bc:	b123      	cbz	r3, b73c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b73be:	4631      	mov	r1, r6
   b73c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b73c4:	f7ff fdff 	bl	b6fc6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b73c8:	2300      	movs	r3, #0
   b73ca:	2220      	movs	r2, #32
   b73cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b73d0:	4a2e      	ldr	r2, [pc, #184]	; (b748c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b73d2:	9200      	str	r2, [sp, #0]
   b73d4:	492b      	ldr	r1, [pc, #172]	; (b7484 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b73d6:	aa06      	add	r2, sp, #24
   b73d8:	2001      	movs	r0, #1
   b73da:	f7fe fe85 	bl	b60e8 <log_message>
                    impl->peers_.removeOne(*peer);
   b73de:	4631      	mov	r1, r6
   b73e0:	f104 0018 	add.w	r0, r4, #24
   b73e4:	f7ff ff35 	bl	b7252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b73e8:	e79f      	b.n	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b73ea:	89a9      	ldrh	r1, [r5, #12]
   b73ec:	4620      	mov	r0, r4
   b73ee:	f7ff fb4b 	bl	b6a88 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b73f2:	2800      	cmp	r0, #0
   b73f4:	d099      	beq.n	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b73f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b73f8:	2b00      	cmp	r3, #0
   b73fa:	d096      	beq.n	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b73fc:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b73fe:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7400:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7404:	d001      	beq.n	b740a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7406:	2e10      	cmp	r6, #16
   b7408:	d117      	bne.n	b743a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b740a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b740c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b740e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7410:	2506      	movs	r5, #6
                        };
   b7412:	f88d 3015 	strb.w	r3, [sp, #21]
   b7416:	9104      	str	r1, [sp, #16]
   b7418:	f88d 2014 	strb.w	r2, [sp, #20]
   b741c:	9006      	str	r0, [sp, #24]
   b741e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7422:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7424:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7428:	9508      	str	r5, [sp, #32]
   b742a:	e883 0003 	stmia.w	r3, {r0, r1}
   b742e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7430:	a906      	add	r1, sp, #24
   b7432:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7436:	4798      	blx	r3
   b7438:	e777      	b.n	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b743a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b743c:	bf01      	itttt	eq
   b743e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7440:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7442:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7446:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7448:	bf0f      	iteee	eq
   b744a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b744e:	461a      	movne	r2, r3
   b7450:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7452:	461d      	movne	r5, r3
   b7454:	e7dd      	b.n	b7412 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7456:	89a9      	ldrh	r1, [r5, #12]
   b7458:	4620      	mov	r0, r4
   b745a:	f7ff fb15 	bl	b6a88 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b745e:	4601      	mov	r1, r0
   b7460:	2800      	cmp	r0, #0
   b7462:	f43f af62 	beq.w	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7466:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7468:	2b00      	cmp	r3, #0
   b746a:	f43f af5e 	beq.w	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b746e:	686b      	ldr	r3, [r5, #4]
   b7470:	9306      	str	r3, [sp, #24]
   b7472:	aa06      	add	r2, sp, #24
   b7474:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7476:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b747a:	4798      	blx	r3
   b747c:	e755      	b.n	b732a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b747e:	bf00      	nop
   b7480:	000bb9b8 	.word	0x000bb9b8
   b7484:	000bb937 	.word	0x000bb937
   b7488:	000bb9de 	.word	0x000bb9de
   b748c:	000bb9fb 	.word	0x000bb9fb

000b7490 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7490:	b513      	push	{r0, r1, r4, lr}
   b7492:	460b      	mov	r3, r1
   b7494:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7496:	e9d0 0100 	ldrd	r0, r1, [r0]
   b749a:	466c      	mov	r4, sp
   b749c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b74a0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b74a4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b74a8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b74ac:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b74b0:	b002      	add	sp, #8
   b74b2:	bd10      	pop	{r4, pc}

000b74b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b74b4:	b538      	push	{r3, r4, r5, lr}
   b74b6:	4605      	mov	r5, r0
   b74b8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b74ba:	f7ff ffe9 	bl	b7490 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b74be:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b74c0:	68a2      	ldr	r2, [r4, #8]
   b74c2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b74c4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b74c6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b74c8:	68e2      	ldr	r2, [r4, #12]
   b74ca:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b74cc:	60e3      	str	r3, [r4, #12]
      }
   b74ce:	bd38      	pop	{r3, r4, r5, pc}

000b74d0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b74d0:	b570      	push	{r4, r5, r6, lr}
   b74d2:	4604      	mov	r4, r0
   b74d4:	b08c      	sub	sp, #48	; 0x30
   b74d6:	460e      	mov	r6, r1
   b74d8:	9201      	str	r2, [sp, #4]
   b74da:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b74dc:	f7ff fab4 	bl	b6a48 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b74e0:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b74e2:	9901      	ldr	r1, [sp, #4]
   b74e4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b74e8:	f7ff f848 	bl	b657c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b74ec:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b74f0:	b1cd      	cbz	r5, b7526 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b74f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b74f4:	9502      	str	r5, [sp, #8]
   b74f6:	a902      	add	r1, sp, #8
   b74f8:	a804      	add	r0, sp, #16
   b74fa:	9303      	str	r3, [sp, #12]
   b74fc:	f7ff fcaa 	bl	b6e54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7500:	2300      	movs	r3, #0
	__x.swap(*this);
   b7502:	a908      	add	r1, sp, #32
   b7504:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7506:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7508:	f7ff ffd4 	bl	b74b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b750c:	4631      	mov	r1, r6
   b750e:	a808      	add	r0, sp, #32
   b7510:	f7ff ffd0 	bl	b74b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7514:	a808      	add	r0, sp, #32
   b7516:	f7fd fe28 	bl	b516a <_ZNSt14_Function_baseD1Ev>
   b751a:	a804      	add	r0, sp, #16
   b751c:	f7fd fe25 	bl	b516a <_ZNSt14_Function_baseD1Ev>
    }
   b7520:	4620      	mov	r0, r4
   b7522:	b00c      	add	sp, #48	; 0x30
   b7524:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7526:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7528:	e7ea      	b.n	b7500 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b752c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7530:	b087      	sub	sp, #28
   b7532:	461d      	mov	r5, r3
   b7534:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7538:	4680      	mov	r8, r0
   b753a:	468b      	mov	fp, r1
   b753c:	4692      	mov	sl, r2
   b753e:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7540:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7542:	2200      	movs	r2, #0
   b7544:	2068      	movs	r0, #104	; 0x68
   b7546:	9102      	str	r1, [sp, #8]
   b7548:	9204      	str	r2, [sp, #16]
   b754a:	f7fd fb1e 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b754e:	1e06      	subs	r6, r0, #0
   b7550:	f106 090c 	add.w	r9, r6, #12
   b7554:	d018      	beq.n	b7588 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7556:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7558:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b755a:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b755e:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7560:	4a15      	ldr	r2, [pc, #84]	; (b75b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7562:	f847 2b20 	str.w	r2, [r7], #32
   b7566:	9b03      	ldr	r3, [sp, #12]
   b7568:	9100      	str	r1, [sp, #0]
   b756a:	465a      	mov	r2, fp
   b756c:	4651      	mov	r1, sl
   b756e:	4648      	mov	r0, r9
   b7570:	f7ff ffae 	bl	b74d0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7576:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7578:	682b      	ldr	r3, [r5, #0]
   b757a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b757c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b757e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7584:	6823      	ldr	r3, [r4, #0]
   b7586:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7588:	a904      	add	r1, sp, #16
   b758a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b758c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7590:	f7ff fd08 	bl	b6fa4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7594:	a805      	add	r0, sp, #20
   b7596:	f7fd fc39 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b759a:	f8d8 3000 	ldr.w	r3, [r8]
   b759e:	b93b      	cbnz	r3, b75b0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b75a0:	4a06      	ldr	r2, [pc, #24]	; (b75bc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b75a2:	4907      	ldr	r1, [pc, #28]	; (b75c0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b75a4:	200a      	movs	r0, #10
}
   b75a6:	b007      	add	sp, #28
   b75a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b75ac:	f7fe bd94 	b.w	b60d8 <panic_>
}
   b75b0:	b007      	add	sp, #28
   b75b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b75b6:	bf00      	nop
   b75b8:	000bba74 	.word	0x000bba74
   b75bc:	000b5d75 	.word	0x000b5d75
   b75c0:	000bb920 	.word	0x000bb920

000b75c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b75c4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b75c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75c8:	4604      	mov	r4, r0
   b75ca:	460d      	mov	r5, r1
   b75cc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b75ce:	d914      	bls.n	b75fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b75d0:	4290      	cmp	r0, r2
   b75d2:	d213      	bcs.n	b75fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b75d4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b75d8:	1a75      	subs	r5, r6, r1
   b75da:	f1a1 0708 	sub.w	r7, r1, #8
   b75de:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b75e0:	42b7      	cmp	r7, r6
   b75e2:	d018      	beq.n	b7616 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b75e4:	b11c      	cbz	r4, b75ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b75e6:	4631      	mov	r1, r6
   b75e8:	4620      	mov	r0, r4
   b75ea:	f7ff fc60 	bl	b6eae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b75ee:	1d30      	adds	r0, r6, #4
   b75f0:	f7fd fc0c 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b75f4:	3e08      	subs	r6, #8
   b75f6:	3c08      	subs	r4, #8
   b75f8:	e7f2      	b.n	b75e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b75fa:	d00c      	beq.n	b7616 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b75fc:	42b5      	cmp	r5, r6
   b75fe:	d00a      	beq.n	b7616 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7600:	b11c      	cbz	r4, b760a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7602:	4629      	mov	r1, r5
   b7604:	4620      	mov	r0, r4
   b7606:	f7ff fc52 	bl	b6eae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b760a:	1d28      	adds	r0, r5, #4
   b760c:	f7fd fbfe 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7610:	3508      	adds	r5, #8
   b7612:	3408      	adds	r4, #8
   b7614:	e7f2      	b.n	b75fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7618 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7618:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b761a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b761c:	4605      	mov	r5, r0
        if (n > 0) {
   b761e:	dd11      	ble.n	b7644 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7620:	00f0      	lsls	r0, r6, #3
   b7622:	f7fe fe45 	bl	b62b0 <malloc>
            if (!d) {
   b7626:	4604      	mov	r4, r0
   b7628:	b158      	cbz	r0, b7642 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b762a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b762e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7632:	f7ff ffc7 	bl	b75c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7636:	6828      	ldr	r0, [r5, #0]
   b7638:	f7fe fe42 	bl	b62c0 <free>
        data_ = d;
   b763c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b763e:	60ae      	str	r6, [r5, #8]
        return true;
   b7640:	2001      	movs	r0, #1
    }
   b7642:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7644:	2400      	movs	r4, #0
   b7646:	e7f6      	b.n	b7636 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7648 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7648:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b764a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b764c:	6845      	ldr	r5, [r0, #4]
   b764e:	4668      	mov	r0, sp
   b7650:	f7ff fc2d 	bl	b6eae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7654:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7658:	4299      	cmp	r1, r3
   b765a:	da10      	bge.n	b767e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b765c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b765e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7660:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7664:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7668:	4629      	mov	r1, r5
   b766a:	f105 0008 	add.w	r0, r5, #8
   b766e:	f7ff ffa9 	bl	b75c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7672:	b98d      	cbnz	r5, b7698 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7674:	6863      	ldr	r3, [r4, #4]
   b7676:	3301      	adds	r3, #1
   b7678:	6063      	str	r3, [r4, #4]
    return true;
   b767a:	2601      	movs	r6, #1
   b767c:	e006      	b.n	b768c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b767e:	3101      	adds	r1, #1
   b7680:	4620      	mov	r0, r4
   b7682:	f7ff ffc9 	bl	b7618 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7686:	4606      	mov	r6, r0
   b7688:	2800      	cmp	r0, #0
   b768a:	d1e7      	bne.n	b765c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b768c:	a801      	add	r0, sp, #4
   b768e:	f7fd fbbd 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7692:	4630      	mov	r0, r6
   b7694:	b002      	add	sp, #8
   b7696:	bd70      	pop	{r4, r5, r6, pc}
   b7698:	4669      	mov	r1, sp
   b769a:	4628      	mov	r0, r5
   b769c:	f7ff fc07 	bl	b6eae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b76a0:	e7e8      	b.n	b7674 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b76a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b76a2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b76a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b76a6:	4604      	mov	r4, r0
   b76a8:	460d      	mov	r5, r1
   b76aa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b76ac:	d914      	bls.n	b76d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b76ae:	4290      	cmp	r0, r2
   b76b0:	d213      	bcs.n	b76da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b76b2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b76b6:	1a75      	subs	r5, r6, r1
   b76b8:	f1a1 0708 	sub.w	r7, r1, #8
   b76bc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b76be:	42b7      	cmp	r7, r6
   b76c0:	d018      	beq.n	b76f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b76c2:	b11c      	cbz	r4, b76cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b76c4:	4631      	mov	r1, r6
   b76c6:	4620      	mov	r0, r4
   b76c8:	f7ff fbe3 	bl	b6e92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b76cc:	1d30      	adds	r0, r6, #4
   b76ce:	f7fd fb9d 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b76d2:	3e08      	subs	r6, #8
   b76d4:	3c08      	subs	r4, #8
   b76d6:	e7f2      	b.n	b76be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b76d8:	d00c      	beq.n	b76f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b76da:	42b5      	cmp	r5, r6
   b76dc:	d00a      	beq.n	b76f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b76de:	b11c      	cbz	r4, b76e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b76e0:	4629      	mov	r1, r5
   b76e2:	4620      	mov	r0, r4
   b76e4:	f7ff fbd5 	bl	b6e92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b76e8:	1d28      	adds	r0, r5, #4
   b76ea:	f7fd fb8f 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b76ee:	3508      	adds	r5, #8
   b76f0:	3408      	adds	r4, #8
   b76f2:	e7f2      	b.n	b76da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b76f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b76f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b76f6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b76f8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b76fa:	4605      	mov	r5, r0
        if (n > 0) {
   b76fc:	dd11      	ble.n	b7722 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b76fe:	00f0      	lsls	r0, r6, #3
   b7700:	f7fe fdd6 	bl	b62b0 <malloc>
            if (!d) {
   b7704:	4604      	mov	r4, r0
   b7706:	b158      	cbz	r0, b7720 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7708:	e9d5 1200 	ldrd	r1, r2, [r5]
   b770c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7710:	f7ff ffc7 	bl	b76a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7714:	6828      	ldr	r0, [r5, #0]
   b7716:	f7fe fdd3 	bl	b62c0 <free>
        data_ = d;
   b771a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b771c:	60ae      	str	r6, [r5, #8]
        return true;
   b771e:	2001      	movs	r0, #1
    }
   b7720:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7722:	2400      	movs	r4, #0
   b7724:	e7f6      	b.n	b7714 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7726 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7726:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7728:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b772a:	6845      	ldr	r5, [r0, #4]
   b772c:	4668      	mov	r0, sp
   b772e:	f7ff fbb0 	bl	b6e92 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7732:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7736:	4299      	cmp	r1, r3
   b7738:	da10      	bge.n	b775c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b773a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b773c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b773e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7742:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7746:	4629      	mov	r1, r5
   b7748:	f105 0008 	add.w	r0, r5, #8
   b774c:	f7ff ffa9 	bl	b76a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7750:	b98d      	cbnz	r5, b7776 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7752:	6863      	ldr	r3, [r4, #4]
   b7754:	3301      	adds	r3, #1
   b7756:	6063      	str	r3, [r4, #4]
    return true;
   b7758:	2601      	movs	r6, #1
   b775a:	e006      	b.n	b776a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b775c:	3101      	adds	r1, #1
   b775e:	4620      	mov	r0, r4
   b7760:	f7ff ffc9 	bl	b76f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7764:	4606      	mov	r6, r0
   b7766:	2800      	cmp	r0, #0
   b7768:	d1e7      	bne.n	b773a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b776a:	a801      	add	r0, sp, #4
   b776c:	f7fd fb4e 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7770:	4630      	mov	r0, r6
   b7772:	b002      	add	sp, #8
   b7774:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7776:	4669      	mov	r1, sp
   b7778:	4628      	mov	r0, r5
   b777a:	f7ff fb8a 	bl	b6e92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b777e:	e7e8      	b.n	b7752 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7780 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7784:	4617      	mov	r7, r2
   b7786:	b0a1      	sub	sp, #132	; 0x84
   b7788:	4680      	mov	r8, r0
    WiringBleLock lk;
   b778a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b778c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b778e:	f7ff f823 	bl	b67d8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7792:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7794:	7923      	ldrb	r3, [r4, #4]
   b7796:	b953      	cbnz	r3, b77ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7798:	4639      	mov	r1, r7
   b779a:	4640      	mov	r0, r8
   b779c:	f7ff fb79 	bl	b6e92 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b77a0:	a80a      	add	r0, sp, #40	; 0x28
   b77a2:	f7ff f827 	bl	b67f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b77a6:	4640      	mov	r0, r8
   b77a8:	b021      	add	sp, #132	; 0x84
   b77aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b77ae:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b77b0:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b77b4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b77b8:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b77ba:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b77be:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b77c2:	9b03      	ldr	r3, [sp, #12]
   b77c4:	429d      	cmp	r5, r3
   b77c6:	d021      	beq.n	b780c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b77c8:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b77cc:	4658      	mov	r0, fp
   b77ce:	f109 0114 	add.w	r1, r9, #20
   b77d2:	f7ff f8ae 	bl	b6932 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b77d6:	b1b8      	cbz	r0, b7808 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b77d8:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b77dc:	4650      	mov	r0, sl
   b77de:	f7ff f8a8 	bl	b6932 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b77e2:	b188      	cbz	r0, b7808 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b77e4:	6823      	ldr	r3, [r4, #0]
   b77e6:	f8d9 2000 	ldr.w	r2, [r9]
   b77ea:	4053      	eors	r3, r2
   b77ec:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b77f0:	d10a      	bne.n	b7808 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b77f2:	2220      	movs	r2, #32
   b77f4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b77f8:	4a5e      	ldr	r2, [pc, #376]	; (b7974 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b77fa:	9200      	str	r2, [sp, #0]
   b77fc:	aa15      	add	r2, sp, #84	; 0x54
   b77fe:	495e      	ldr	r1, [pc, #376]	; (b7978 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7800:	2032      	movs	r0, #50	; 0x32
   b7802:	f7fe fc71 	bl	b60e8 <log_message>
   b7806:	e7c7      	b.n	b7798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7808:	3508      	adds	r5, #8
   b780a:	e7da      	b.n	b77c2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b780c:	4650      	mov	r0, sl
   b780e:	f7ff f861 	bl	b68d4 <_ZNK8particle7BleUuid7isValidEv>
   b7812:	b960      	cbnz	r0, b782e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b7814:	4959      	ldr	r1, [pc, #356]	; (b797c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7816:	2201      	movs	r2, #1
   b7818:	a815      	add	r0, sp, #84	; 0x54
   b781a:	ad15      	add	r5, sp, #84	; 0x54
   b781c:	f7ff f832 	bl	b6884 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7822:	46d4      	mov	ip, sl
   b7824:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7828:	682b      	ldr	r3, [r5, #0]
   b782a:	f8cc 3000 	str.w	r3, [ip]
   b782e:	6833      	ldr	r3, [r6, #0]
   b7830:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7834:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7838:	455d      	cmp	r5, fp
   b783a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b783c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b783e:	d06e      	beq.n	b791e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7840:	f855 0b08 	ldr.w	r0, [r5], #8
   b7844:	f7ff f875 	bl	b6932 <_ZNK8particle7BleUuideqERKS0_>
   b7848:	2800      	cmp	r0, #0
   b784a:	d0f5      	beq.n	b7838 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b784c:	f104 0a14 	add.w	sl, r4, #20
   b7850:	4650      	mov	r0, sl
   b7852:	f7ff f83f 	bl	b68d4 <_ZNK8particle7BleUuid7isValidEv>
   b7856:	b988      	cbnz	r0, b787c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7858:	4b49      	ldr	r3, [pc, #292]	; (b7980 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b785a:	4948      	ldr	r1, [pc, #288]	; (b797c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b785c:	881a      	ldrh	r2, [r3, #0]
   b785e:	3201      	adds	r2, #1
   b7860:	b292      	uxth	r2, r2
   b7862:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7864:	a815      	add	r0, sp, #84	; 0x54
   b7866:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7868:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b786a:	f7ff f82a 	bl	b68c2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b786e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7870:	46d4      	mov	ip, sl
   b7872:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7876:	682b      	ldr	r3, [r5, #0]
   b7878:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b787c:	4b41      	ldr	r3, [pc, #260]	; (b7984 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b787e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7880:	2228      	movs	r2, #40	; 0x28
   b7882:	2100      	movs	r1, #0
   b7884:	a816      	add	r0, sp, #88	; 0x58
   b7886:	f001 fe15 	bl	b94b4 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b788a:	4651      	mov	r1, sl
   b788c:	a804      	add	r0, sp, #16
   b788e:	f7ff f833 	bl	b68f8 <_ZN8particle7BleUuid7halUUIDEv>
   b7892:	ab04      	add	r3, sp, #16
   b7894:	aa18      	add	r2, sp, #96	; 0x60
   b7896:	f10d 0c20 	add.w	ip, sp, #32
   b789a:	6818      	ldr	r0, [r3, #0]
   b789c:	6859      	ldr	r1, [r3, #4]
   b789e:	4615      	mov	r5, r2
   b78a0:	c503      	stmia	r5!, {r0, r1}
   b78a2:	3308      	adds	r3, #8
   b78a4:	4563      	cmp	r3, ip
   b78a6:	462a      	mov	r2, r5
   b78a8:	d1f7      	bne.n	b789a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b78aa:	6818      	ldr	r0, [r3, #0]
   b78ac:	6028      	str	r0, [r5, #0]
    return value_;
   b78ae:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b78b0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b78b4:	f8d9 3000 	ldr.w	r3, [r9]
   b78b8:	8a9b      	ldrh	r3, [r3, #20]
   b78ba:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b78be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b78c0:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b78c2:	4b31      	ldr	r3, [pc, #196]	; (b7988 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b78c4:	2200      	movs	r2, #0
   b78c6:	1da1      	adds	r1, r4, #6
   b78c8:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b78ca:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b78ce:	f7fe facb 	bl	b5e68 <hal_ble_gatt_server_add_characteristic>
   b78d2:	2800      	cmp	r0, #0
   b78d4:	f47f af60 	bne.w	b7798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b78d8:	2301      	movs	r3, #1
   b78da:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b78dc:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b78de:	4639      	mov	r1, r7
        return characteristics_;
   b78e0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b78e2:	a80d      	add	r0, sp, #52	; 0x34
   b78e4:	f7ff fad5 	bl	b6e92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b78e8:	4620      	mov	r0, r4
   b78ea:	a90d      	add	r1, sp, #52	; 0x34
   b78ec:	f7ff ff1b 	bl	b7726 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b78f0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b78f2:	a80e      	add	r0, sp, #56	; 0x38
   b78f4:	f7fd fa8a 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78f8:	2c00      	cmp	r4, #0
   b78fa:	f47f af4d 	bne.w	b7798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b78fe:	2320      	movs	r3, #32
   b7900:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7904:	4b21      	ldr	r3, [pc, #132]	; (b798c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7906:	9300      	str	r3, [sp, #0]
   b7908:	aa0d      	add	r2, sp, #52	; 0x34
   b790a:	4623      	mov	r3, r4
   b790c:	e777      	b.n	b77fe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b790e:	4639      	mov	r1, r7
   b7910:	4640      	mov	r0, r8
   b7912:	f7ff fabe 	bl	b6e92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7916:	a80c      	add	r0, sp, #48	; 0x30
   b7918:	f7fd fa78 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b791c:	e740      	b.n	b77a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b791e:	a80b      	add	r0, sp, #44	; 0x2c
   b7920:	f7ff f936 	bl	b6b90 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7924:	4651      	mov	r1, sl
   b7926:	a815      	add	r0, sp, #84	; 0x54
   b7928:	f7fe ffe6 	bl	b68f8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b792c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b792e:	2300      	movs	r3, #0
   b7930:	3214      	adds	r2, #20
   b7932:	a915      	add	r1, sp, #84	; 0x54
   b7934:	2001      	movs	r0, #1
   b7936:	f7fe fa6f 	bl	b5e18 <hal_ble_gatt_server_add_service>
   b793a:	2800      	cmp	r0, #0
   b793c:	d1e7      	bne.n	b790e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b793e:	6835      	ldr	r5, [r6, #0]
   b7940:	a90b      	add	r1, sp, #44	; 0x2c
   b7942:	a80d      	add	r0, sp, #52	; 0x34
   b7944:	f7ff fab3 	bl	b6eae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7948:	4628      	mov	r0, r5
   b794a:	a90d      	add	r1, sp, #52	; 0x34
   b794c:	f7ff fe7c 	bl	b7648 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7950:	4605      	mov	r5, r0
   b7952:	a80e      	add	r0, sp, #56	; 0x38
   b7954:	f7fd fa5a 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7958:	2d00      	cmp	r5, #0
   b795a:	d0d8      	beq.n	b790e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b795c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b795e:	6853      	ldr	r3, [r2, #4]
   b7960:	6812      	ldr	r2, [r2, #0]
   b7962:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7966:	3b01      	subs	r3, #1
   b7968:	a80c      	add	r0, sp, #48	; 0x30
   b796a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b796e:	f7fd fa4d 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7972:	e76b      	b.n	b784c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7974:	000bba1a 	.word	0x000bba1a
   b7978:	000bb937 	.word	0x000bb937
   b797c:	000bbac8 	.word	0x000bbac8
   b7980:	2003e5fc 	.word	0x2003e5fc
   b7984:	002c0003 	.word	0x002c0003
   b7988:	000b6d29 	.word	0x000b6d29
   b798c:	000bba45 	.word	0x000bba45

000b7990 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7990:	4802      	ldr	r0, [pc, #8]	; (b799c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7992:	2300      	movs	r3, #0
   b7994:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7996:	f7fe babf 	b.w	b5f18 <os_mutex_recursive_create>
   b799a:	bf00      	nop
   b799c:	2003e600 	.word	0x2003e600

000b79a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b79a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79a2:	4606      	mov	r6, r0
   b79a4:	460d      	mov	r5, r1
  size_t n = 0;
   b79a6:	188f      	adds	r7, r1, r2
   b79a8:	2400      	movs	r4, #0
  while (size--) {
   b79aa:	42bd      	cmp	r5, r7
   b79ac:	d00c      	beq.n	b79c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b79ae:	6833      	ldr	r3, [r6, #0]
   b79b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b79b4:	689b      	ldr	r3, [r3, #8]
   b79b6:	4630      	mov	r0, r6
   b79b8:	4798      	blx	r3
     if (chunk>=0)
   b79ba:	1e03      	subs	r3, r0, #0
   b79bc:	db01      	blt.n	b79c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b79be:	441c      	add	r4, r3
  while (size--) {
   b79c0:	e7f3      	b.n	b79aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b79c2:	2c00      	cmp	r4, #0
   b79c4:	bf08      	it	eq
   b79c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b79c8:	4620      	mov	r0, r4
   b79ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b79cc:	b513      	push	{r0, r1, r4, lr}
   b79ce:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b79d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b79d2:	b159      	cbz	r1, b79ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b79d4:	9101      	str	r1, [sp, #4]
   b79d6:	f7fd f87d 	bl	b4ad4 <strlen>
   b79da:	6823      	ldr	r3, [r4, #0]
   b79dc:	9901      	ldr	r1, [sp, #4]
   b79de:	68db      	ldr	r3, [r3, #12]
   b79e0:	4602      	mov	r2, r0
   b79e2:	4620      	mov	r0, r4
    }
   b79e4:	b002      	add	sp, #8
   b79e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b79ea:	4718      	bx	r3
    }
   b79ec:	b002      	add	sp, #8
   b79ee:	bd10      	pop	{r4, pc}

000b79f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b79f0:	6803      	ldr	r3, [r0, #0]
   b79f2:	689b      	ldr	r3, [r3, #8]
   b79f4:	4718      	bx	r3

000b79f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b79f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b79f8:	210d      	movs	r1, #13
{
   b79fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b79fc:	f7ff fff8 	bl	b79f0 <_ZN5Print5printEc>
  n += print('\n');
   b7a00:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7a02:	4604      	mov	r4, r0
  n += print('\n');
   b7a04:	4628      	mov	r0, r5
   b7a06:	f7ff fff3 	bl	b79f0 <_ZN5Print5printEc>
  return n;
}
   b7a0a:	4420      	add	r0, r4
   b7a0c:	bd38      	pop	{r3, r4, r5, pc}

000b7a0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7a0e:	b538      	push	{r3, r4, r5, lr}
   b7a10:	4605      	mov	r5, r0
  return write(str);
   b7a12:	f7ff ffdb 	bl	b79cc <_ZN5Print5writeEPKc>
   b7a16:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7a18:	4628      	mov	r0, r5
   b7a1a:	f7ff ffec 	bl	b79f6 <_ZN5Print7printlnEv>
  return n;
}
   b7a1e:	4420      	add	r0, r4
   b7a20:	bd38      	pop	{r3, r4, r5, pc}

000b7a22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7a22:	b530      	push	{r4, r5, lr}
   b7a24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7a26:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7a28:	2a01      	cmp	r2, #1
  *str = '\0';
   b7a2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7a2e:	bf98      	it	ls
   b7a30:	220a      	movls	r2, #10
   b7a32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7a34:	460d      	mov	r5, r1
   b7a36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7a3a:	fb01 5312 	mls	r3, r1, r2, r5
   b7a3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7a42:	2b09      	cmp	r3, #9
   b7a44:	bf94      	ite	ls
   b7a46:	3330      	addls	r3, #48	; 0x30
   b7a48:	3337      	addhi	r3, #55	; 0x37
   b7a4a:	b2db      	uxtb	r3, r3
  } while(n);
   b7a4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7a4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7a52:	d9ef      	bls.n	b7a34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7a54:	4621      	mov	r1, r4
   b7a56:	f7ff ffb9 	bl	b79cc <_ZN5Print5writeEPKc>
}
   b7a5a:	b00b      	add	sp, #44	; 0x2c
   b7a5c:	bd30      	pop	{r4, r5, pc}
	...

000b7a60 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7a60:	4b01      	ldr	r3, [pc, #4]	; (b7a68 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7a62:	4a02      	ldr	r2, [pc, #8]	; (b7a6c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7a64:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7a66:	4770      	bx	lr
   b7a68:	2003e608 	.word	0x2003e608
   b7a6c:	000bbae8 	.word	0x000bbae8

000b7a70 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7a74:	4a15      	ldr	r2, [pc, #84]	; (b7acc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7a76:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7ad8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b7a7a:	e9d2 6300 	ldrd	r6, r3, [r2]
   b7a7e:	1980      	adds	r0, r0, r6
   b7a80:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b7a84:	4b12      	ldr	r3, [pc, #72]	; (b7ad0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b7a86:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b7a8a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b7a8e:	1986      	adds	r6, r0, r6
   b7a90:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7a94:	42bb      	cmp	r3, r7
   b7a96:	bf08      	it	eq
   b7a98:	42b2      	cmpeq	r2, r6
{
   b7a9a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7a9c:	d013      	beq.n	b7ac6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7a9e:	a903      	add	r1, sp, #12
   b7aa0:	4668      	mov	r0, sp
   b7aa2:	e9cd 6700 	strd	r6, r7, [sp]
   b7aa6:	f7fe fc53 	bl	b6350 <localtime_r>
	calendar_time.tm_year += 1900;
   b7aaa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7aac:	4d09      	ldr	r5, [pc, #36]	; (b7ad4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7aae:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7ab2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7ab4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7abe:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7ac2:	6823      	ldr	r3, [r4, #0]
   b7ac4:	602b      	str	r3, [r5, #0]
    }
}
   b7ac6:	b00c      	add	sp, #48	; 0x30
   b7ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7acc:	2003e640 	.word	0x2003e640
   b7ad0:	2003e638 	.word	0x2003e638
   b7ad4:	2003e610 	.word	0x2003e610
   b7ad8:	2003e648 	.word	0x2003e648

000b7adc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7adc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7ade:	2000      	movs	r0, #0
   b7ae0:	f7fe fbd6 	bl	b6290 <spark_sync_time_pending>
   b7ae4:	b128      	cbz	r0, b7af2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7ae6:	f7fe fbbb 	bl	b6260 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7aea:	f080 0001 	eor.w	r0, r0, #1
   b7aee:	b2c0      	uxtb	r0, r0
    }
   b7af0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7af2:	2001      	movs	r0, #1
   b7af4:	e7fc      	b.n	b7af0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b7af8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b7af8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b7afa:	f7ff ffb9 	bl	b7a70 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <_ZN9TimeClass5monthEx+0x10>)
   b7b00:	6918      	ldr	r0, [r3, #16]
}
   b7b02:	3001      	adds	r0, #1
   b7b04:	bd08      	pop	{r3, pc}
   b7b06:	bf00      	nop
   b7b08:	2003e610 	.word	0x2003e610

000b7b0c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b7b0c:	b530      	push	{r4, r5, lr}
   b7b0e:	b093      	sub	sp, #76	; 0x4c
   b7b10:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b7b14:	4b19      	ldr	r3, [pc, #100]	; (b7b7c <_ZN9TimeClass7timeStrEx+0x70>)
{
   b7b16:	4604      	mov	r4, r0
    t += time_zone_cache;
   b7b18:	e9d3 1000 	ldrd	r1, r0, [r3]
   b7b1c:	9b01      	ldr	r3, [sp, #4]
   b7b1e:	1852      	adds	r2, r2, r1
   b7b20:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b7b24:	4816      	ldr	r0, [pc, #88]	; (b7b80 <_ZN9TimeClass7timeStrEx+0x74>)
   b7b26:	e9d0 1000 	ldrd	r1, r0, [r0]
   b7b2a:	1852      	adds	r2, r2, r1
   b7b2c:	eb43 0300 	adc.w	r3, r3, r0
   b7b30:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b7b34:	2224      	movs	r2, #36	; 0x24
   b7b36:	eb0d 0002 	add.w	r0, sp, r2
   b7b3a:	2100      	movs	r1, #0
   b7b3c:	f001 fcba 	bl	b94b4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b7b40:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b7b42:	a909      	add	r1, sp, #36	; 0x24
   b7b44:	4668      	mov	r0, sp
   b7b46:	f7fe fc03 	bl	b6350 <localtime_r>
    char ascstr[26] = {};
   b7b4a:	2216      	movs	r2, #22
   b7b4c:	4629      	mov	r1, r5
   b7b4e:	a803      	add	r0, sp, #12
   b7b50:	9502      	str	r5, [sp, #8]
   b7b52:	f001 fcaf 	bl	b94b4 <memset>
    asctime_r(&calendar_time, ascstr);
   b7b56:	a902      	add	r1, sp, #8
   b7b58:	a809      	add	r0, sp, #36	; 0x24
   b7b5a:	f001 fc47 	bl	b93ec <asctime_r>
    int len = strlen(ascstr);
   b7b5e:	a802      	add	r0, sp, #8
   b7b60:	f7fc ffb8 	bl	b4ad4 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b7b64:	ab12      	add	r3, sp, #72	; 0x48
   b7b66:	4418      	add	r0, r3
    return String(ascstr);
   b7b68:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b7b6a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b7b6e:	4620      	mov	r0, r4
   b7b70:	f7fe fcd6 	bl	b6520 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7b74:	4620      	mov	r0, r4
   b7b76:	b013      	add	sp, #76	; 0x4c
   b7b78:	bd30      	pop	{r4, r5, pc}
   b7b7a:	bf00      	nop
   b7b7c:	2003e640 	.word	0x2003e640
   b7b80:	2003e638 	.word	0x2003e638

000b7b84 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7b84:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7b86:	2000      	movs	r0, #0
   b7b88:	f7fe f904 	bl	b5d94 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7b8c:	4604      	mov	r4, r0
   b7b8e:	b9a0      	cbnz	r0, b7bba <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7b90:	f7fe fab2 	bl	b60f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7b94:	2801      	cmp	r0, #1
   b7b96:	d110      	bne.n	b7bba <_ZN9TimeClass7isValidEv+0x36>
   b7b98:	4620      	mov	r0, r4
   b7b9a:	f7fe fadd 	bl	b6158 <system_thread_get_state>
   b7b9e:	b960      	cbnz	r0, b7bba <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7ba0:	f7ff ff9c 	bl	b7adc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7ba4:	b910      	cbnz	r0, b7bac <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7ba6:	f7fe fb53 	bl	b6250 <spark_process>
        while (_while() && !_condition()) {
   b7baa:	e7f9      	b.n	b7ba0 <_ZN9TimeClass7isValidEv+0x1c>
   b7bac:	f7ff ff96 	bl	b7adc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7bb4:	2000      	movs	r0, #0
   b7bb6:	f7fe b8ed 	b.w	b5d94 <hal_rtc_time_is_valid>
}
   b7bba:	4620      	mov	r0, r4
   b7bbc:	bd10      	pop	{r4, pc}

000b7bbe <_ZN9TimeClass3nowEv>:
{
   b7bbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7bc0:	f7ff ffe0 	bl	b7b84 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7bc4:	2210      	movs	r2, #16
   b7bc6:	2100      	movs	r1, #0
   b7bc8:	4668      	mov	r0, sp
   b7bca:	f001 fc73 	bl	b94b4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7bce:	2100      	movs	r1, #0
   b7bd0:	4668      	mov	r0, sp
   b7bd2:	f7fe f8e7 	bl	b5da4 <hal_rtc_get_time>
}
   b7bd6:	9800      	ldr	r0, [sp, #0]
   b7bd8:	b005      	add	sp, #20
   b7bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7be0 <_ZN9TimeClass4hourEv>:
{
   b7be0:	b508      	push	{r3, lr}
	return hour(now());
   b7be2:	f7ff ffec 	bl	b7bbe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7be6:	17c1      	asrs	r1, r0, #31
   b7be8:	f7ff ff42 	bl	b7a70 <_ZL22Refresh_UnixTime_Cachex>
}
   b7bec:	4b01      	ldr	r3, [pc, #4]	; (b7bf4 <_ZN9TimeClass4hourEv+0x14>)
   b7bee:	6898      	ldr	r0, [r3, #8]
   b7bf0:	bd08      	pop	{r3, pc}
   b7bf2:	bf00      	nop
   b7bf4:	2003e610 	.word	0x2003e610

000b7bf8 <_ZN9TimeClass6minuteEv>:
{
   b7bf8:	b508      	push	{r3, lr}
	return minute(now());
   b7bfa:	f7ff ffe0 	bl	b7bbe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7bfe:	17c1      	asrs	r1, r0, #31
   b7c00:	f7ff ff36 	bl	b7a70 <_ZL22Refresh_UnixTime_Cachex>
}
   b7c04:	4b01      	ldr	r3, [pc, #4]	; (b7c0c <_ZN9TimeClass6minuteEv+0x14>)
   b7c06:	6858      	ldr	r0, [r3, #4]
   b7c08:	bd08      	pop	{r3, pc}
   b7c0a:	bf00      	nop
   b7c0c:	2003e610 	.word	0x2003e610

000b7c10 <_ZN9TimeClass3dayEv>:
{
   b7c10:	b508      	push	{r3, lr}
	return day(now());
   b7c12:	f7ff ffd4 	bl	b7bbe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7c16:	17c1      	asrs	r1, r0, #31
   b7c18:	f7ff ff2a 	bl	b7a70 <_ZL22Refresh_UnixTime_Cachex>
}
   b7c1c:	4b01      	ldr	r3, [pc, #4]	; (b7c24 <_ZN9TimeClass3dayEv+0x14>)
   b7c1e:	68d8      	ldr	r0, [r3, #12]
   b7c20:	bd08      	pop	{r3, pc}
   b7c22:	bf00      	nop
   b7c24:	2003e610 	.word	0x2003e610

000b7c28 <_ZN9TimeClass5monthEv>:
{
   b7c28:	b508      	push	{r3, lr}
	return month(now());
   b7c2a:	f7ff ffc8 	bl	b7bbe <_ZN9TimeClass3nowEv>
}
   b7c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b7c32:	17c1      	asrs	r1, r0, #31
   b7c34:	f7ff bf60 	b.w	b7af8 <_ZN9TimeClass5monthEx>

000b7c38 <_ZN9TimeClass4yearEv>:
{
   b7c38:	b508      	push	{r3, lr}
	return year(now());
   b7c3a:	f7ff ffc0 	bl	b7bbe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7c3e:	17c1      	asrs	r1, r0, #31
   b7c40:	f7ff ff16 	bl	b7a70 <_ZL22Refresh_UnixTime_Cachex>
}
   b7c44:	4b01      	ldr	r3, [pc, #4]	; (b7c4c <_ZN9TimeClass4yearEv+0x14>)
   b7c46:	6958      	ldr	r0, [r3, #20]
   b7c48:	bd08      	pop	{r3, pc}
   b7c4a:	bf00      	nop
   b7c4c:	2003e610 	.word	0x2003e610

000b7c50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7c50:	4b02      	ldr	r3, [pc, #8]	; (b7c5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7c52:	681a      	ldr	r2, [r3, #0]
   b7c54:	4b02      	ldr	r3, [pc, #8]	; (b7c60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7c56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7c58:	4770      	bx	lr
   b7c5a:	bf00      	nop
   b7c5c:	2003e308 	.word	0x2003e308
   b7c60:	2003e60c 	.word	0x2003e60c

000b7c64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7c64:	2100      	movs	r1, #0
   b7c66:	f7fe ba57 	b.w	b6118 <system_delay_ms>
	...

000b7c6c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7c6c:	4b01      	ldr	r3, [pc, #4]	; (b7c74 <_GLOBAL__sub_I_RGB+0x8>)
   b7c6e:	2200      	movs	r2, #0
   b7c70:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7c72:	4770      	bx	lr
   b7c74:	2003e650 	.word	0x2003e650

000b7c78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7c78:	4b01      	ldr	r3, [pc, #4]	; (b7c80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7c7a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7c7c:	4770      	bx	lr
   b7c7e:	bf00      	nop
   b7c80:	2003e30c 	.word	0x2003e30c

000b7c84 <serialEventRun>:
{
   b7c84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7c86:	4b0b      	ldr	r3, [pc, #44]	; (b7cb4 <serialEventRun+0x30>)
   b7c88:	b143      	cbz	r3, b7c9c <serialEventRun+0x18>
   b7c8a:	f000 fc09 	bl	b84a0 <_Z16_fetch_usbserialv>
   b7c8e:	6803      	ldr	r3, [r0, #0]
   b7c90:	691b      	ldr	r3, [r3, #16]
   b7c92:	4798      	blx	r3
   b7c94:	2800      	cmp	r0, #0
   b7c96:	dd01      	ble.n	b7c9c <serialEventRun+0x18>
        serialEvent();
   b7c98:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7c9c:	4b06      	ldr	r3, [pc, #24]	; (b7cb8 <serialEventRun+0x34>)
   b7c9e:	b143      	cbz	r3, b7cb2 <serialEventRun+0x2e>
   b7ca0:	f000 fe82 	bl	b89a8 <_Z22__fetch_global_Serial1v>
   b7ca4:	6803      	ldr	r3, [r0, #0]
   b7ca6:	691b      	ldr	r3, [r3, #16]
   b7ca8:	4798      	blx	r3
   b7caa:	2800      	cmp	r0, #0
   b7cac:	dd01      	ble.n	b7cb2 <serialEventRun+0x2e>
        serialEvent1();
   b7cae:	f3af 8000 	nop.w
}
   b7cb2:	bd08      	pop	{r3, pc}
	...

000b7cbc <_post_loop>:
{
   b7cbc:	b508      	push	{r3, lr}
	serialEventRun();
   b7cbe:	f7ff ffe1 	bl	b7c84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7cc2:	f7fe f85f 	bl	b5d84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7cc6:	4b01      	ldr	r3, [pc, #4]	; (b7ccc <_post_loop+0x10>)
   b7cc8:	6018      	str	r0, [r3, #0]
}
   b7cca:	bd08      	pop	{r3, pc}
   b7ccc:	2003e744 	.word	0x2003e744

000b7cd0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cd0:	4805      	ldr	r0, [pc, #20]	; (b7ce8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7cd2:	4a06      	ldr	r2, [pc, #24]	; (b7cec <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7cd4:	4906      	ldr	r1, [pc, #24]	; (b7cf0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7cd6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cd8:	1a12      	subs	r2, r2, r0
   b7cda:	f001 fbc3 	bl	b9464 <memcpy>
    __backup_sram_signature = signature;
   b7cde:	4b05      	ldr	r3, [pc, #20]	; (b7cf4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7ce0:	4a05      	ldr	r2, [pc, #20]	; (b7cf8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7ce2:	601a      	str	r2, [r3, #0]
}
   b7ce4:	bd08      	pop	{r3, pc}
   b7ce6:	bf00      	nop
   b7ce8:	2003f400 	.word	0x2003f400
   b7cec:	2003f404 	.word	0x2003f404
   b7cf0:	000bc4f4 	.word	0x000bc4f4
   b7cf4:	2003f400 	.word	0x2003f400
   b7cf8:	9a271c1e 	.word	0x9a271c1e

000b7cfc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7cfc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7cfe:	2300      	movs	r3, #0
   b7d00:	9300      	str	r3, [sp, #0]
   b7d02:	461a      	mov	r2, r3
   b7d04:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d08:	f7fe fa38 	bl	b617c <system_ctrl_set_result>
}
   b7d0c:	b003      	add	sp, #12
   b7d0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d14 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7d14:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7d16:	8843      	ldrh	r3, [r0, #2]
   b7d18:	2b0a      	cmp	r3, #10
   b7d1a:	d008      	beq.n	b7d2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7d1c:	2b50      	cmp	r3, #80	; 0x50
   b7d1e:	d10b      	bne.n	b7d38 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7d20:	4b09      	ldr	r3, [pc, #36]	; (b7d48 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7d22:	681b      	ldr	r3, [r3, #0]
   b7d24:	b14b      	cbz	r3, b7d3a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7d26:	b003      	add	sp, #12
   b7d28:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7d2c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7d2e:	f7ff ffe5 	bl	b7cfc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7d32:	b003      	add	sp, #12
   b7d34:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d38:	2300      	movs	r3, #0
   b7d3a:	9300      	str	r3, [sp, #0]
   b7d3c:	461a      	mov	r2, r3
   b7d3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d42:	f7fe fa1b 	bl	b617c <system_ctrl_set_result>
}
   b7d46:	e7f4      	b.n	b7d32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7d48:	2003e664 	.word	0x2003e664

000b7d4c <module_user_init_hook>:
{
   b7d4c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7d4e:	4812      	ldr	r0, [pc, #72]	; (b7d98 <module_user_init_hook+0x4c>)
   b7d50:	2100      	movs	r1, #0
   b7d52:	f7fe faf5 	bl	b6340 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7d56:	4b11      	ldr	r3, [pc, #68]	; (b7d9c <module_user_init_hook+0x50>)
   b7d58:	681a      	ldr	r2, [r3, #0]
   b7d5a:	4b11      	ldr	r3, [pc, #68]	; (b7da0 <module_user_init_hook+0x54>)
   b7d5c:	429a      	cmp	r2, r3
   b7d5e:	4b11      	ldr	r3, [pc, #68]	; (b7da4 <module_user_init_hook+0x58>)
   b7d60:	bf0c      	ite	eq
   b7d62:	2201      	moveq	r2, #1
   b7d64:	2200      	movne	r2, #0
   b7d66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7d68:	d001      	beq.n	b7d6e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7d6a:	f7ff ffb1 	bl	b7cd0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7d6e:	f7fd fff9 	bl	b5d64 <HAL_RNG_GetRandomNumber>
   b7d72:	4604      	mov	r4, r0
    srand(seed);
   b7d74:	f001 fba6 	bl	b94c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7d78:	4b0b      	ldr	r3, [pc, #44]	; (b7da8 <module_user_init_hook+0x5c>)
   b7d7a:	b113      	cbz	r3, b7d82 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7d7c:	4620      	mov	r0, r4
   b7d7e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7d82:	2100      	movs	r1, #0
   b7d84:	4808      	ldr	r0, [pc, #32]	; (b7da8 <module_user_init_hook+0x5c>)
   b7d86:	f7fe fa8b 	bl	b62a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7d8e:	4807      	ldr	r0, [pc, #28]	; (b7dac <module_user_init_hook+0x60>)
   b7d90:	2100      	movs	r1, #0
   b7d92:	f7fe b9e9 	b.w	b6168 <system_ctrl_set_app_request_handler>
   b7d96:	bf00      	nop
   b7d98:	000b7c79 	.word	0x000b7c79
   b7d9c:	2003f400 	.word	0x2003f400
   b7da0:	9a271c1e 	.word	0x9a271c1e
   b7da4:	2003e660 	.word	0x2003e660
   b7da8:	00000000 	.word	0x00000000
   b7dac:	000b7d15 	.word	0x000b7d15

000b7db0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7db0:	4770      	bx	lr

000b7db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7db2:	2000      	movs	r0, #0
   b7db4:	4770      	bx	lr

000b7db6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7db6:	b510      	push	{r4, lr}
   b7db8:	2110      	movs	r1, #16
   b7dba:	4604      	mov	r4, r0
   b7dbc:	f7fc feeb 	bl	b4b96 <_ZdlPvj>
   b7dc0:	4620      	mov	r0, r4
   b7dc2:	bd10      	pop	{r4, pc}

000b7dc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7dc4:	b508      	push	{r3, lr}
      { delete this; }
   b7dc6:	f7ff fff6 	bl	b7db6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7dca:	bd08      	pop	{r3, pc}

000b7dcc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7dcc:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7dce:	2200      	movs	r2, #0
   b7dd0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7dd4:	6002      	str	r2, [r0, #0]
   b7dd6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7dd8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7dda:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7ddc:	680c      	ldr	r4, [r1, #0]
   b7dde:	8085      	strh	r5, [r0, #4]
   b7de0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7de2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7de4:	bd30      	pop	{r4, r5, pc}

000b7de6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7de6:	b510      	push	{r4, lr}
   b7de8:	4604      	mov	r4, r0
    free((void*)msg_);
   b7dea:	6800      	ldr	r0, [r0, #0]
   b7dec:	f7fe fa68 	bl	b62c0 <free>
}
   b7df0:	4620      	mov	r0, r4
   b7df2:	bd10      	pop	{r4, pc}

000b7df4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7df4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7df6:	68c4      	ldr	r4, [r0, #12]
   b7df8:	b1f4      	cbz	r4, b7e38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7dfa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7dfc:	2b02      	cmp	r3, #2
   b7dfe:	d103      	bne.n	b7e08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7e00:	f104 000c 	add.w	r0, r4, #12
   b7e04:	f7ff ffef 	bl	b7de6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7e08:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7e0a:	b135      	cbz	r5, b7e1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7e0c:	4628      	mov	r0, r5
   b7e0e:	f7fd f9ac 	bl	b516a <_ZNSt14_Function_baseD1Ev>
   b7e12:	2110      	movs	r1, #16
   b7e14:	4628      	mov	r0, r5
   b7e16:	f7fc febe 	bl	b4b96 <_ZdlPvj>
   b7e1a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7e1c:	b135      	cbz	r5, b7e2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7e1e:	4628      	mov	r0, r5
   b7e20:	f7fd f9a3 	bl	b516a <_ZNSt14_Function_baseD1Ev>
   b7e24:	2110      	movs	r1, #16
   b7e26:	4628      	mov	r0, r5
   b7e28:	f7fc feb5 	bl	b4b96 <_ZdlPvj>
   b7e2c:	4620      	mov	r0, r4
   b7e2e:	2114      	movs	r1, #20
   b7e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7e34:	f7fc beaf 	b.w	b4b96 <_ZdlPvj>
   b7e38:	bd38      	pop	{r3, r4, r5, pc}

000b7e3a <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   b7e3a:	b507      	push	{r0, r1, r2, lr}
   b7e3c:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   b7e40:	6882      	ldr	r2, [r0, #8]
   b7e42:	b90a      	cbnz	r2, b7e48 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   b7e44:	f000 fef0 	bl	b8c28 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7e48:	68c3      	ldr	r3, [r0, #12]
   b7e4a:	aa01      	add	r2, sp, #4
   b7e4c:	4669      	mov	r1, sp
   b7e4e:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   b7e50:	b003      	add	sp, #12
   b7e52:	f85d fb04 	ldr.w	pc, [sp], #4

000b7e56 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7e56:	680b      	ldr	r3, [r1, #0]
   b7e58:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7e5a:	684b      	ldr	r3, [r1, #4]
   b7e5c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7e5e:	b113      	cbz	r3, b7e66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7e60:	685a      	ldr	r2, [r3, #4]
   b7e62:	3201      	adds	r2, #1
   b7e64:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7e66:	4770      	bx	lr

000b7e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e6a:	4604      	mov	r4, r0
   b7e6c:	4668      	mov	r0, sp
   b7e6e:	460d      	mov	r5, r1
   b7e70:	f7ff fff1 	bl	b7e56 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7e74:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7e76:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7e78:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7e7a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7e7c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7e7e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7e80:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b7e82:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7e84:	f7fc ffc2 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7e88:	b135      	cbz	r5, b7e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7e8a:	1d28      	adds	r0, r5, #4
   b7e8c:	f7fc ffbe 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e90:	2108      	movs	r1, #8
   b7e92:	4628      	mov	r0, r5
   b7e94:	f7fc fe7f 	bl	b4b96 <_ZdlPvj>
        return p;
    }
   b7e98:	4620      	mov	r0, r4
   b7e9a:	b003      	add	sp, #12
   b7e9c:	bd30      	pop	{r4, r5, pc}

000b7e9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b7e9e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7ea0:	b510      	push	{r4, lr}
      if (_M_empty())
   b7ea2:	b90a      	cbnz	r2, b7ea8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7ea4:	f000 fec0 	bl	b8c28 <_ZSt25__throw_bad_function_callv>
    }
   b7ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7eac:	68c3      	ldr	r3, [r0, #12]
   b7eae:	4718      	bx	r3

000b7eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7eb0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7eb2:	6800      	ldr	r0, [r0, #0]
   b7eb4:	f100 0110 	add.w	r1, r0, #16
   b7eb8:	f7ff fff1 	bl	b7e9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7ebc:	bd08      	pop	{r3, pc}

000b7ebe <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7ebe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7ec0:	b510      	push	{r4, lr}
      if (_M_empty())
   b7ec2:	b90a      	cbnz	r2, b7ec8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7ec4:	f000 feb0 	bl	b8c28 <_ZSt25__throw_bad_function_callv>
    }
   b7ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7ecc:	68c3      	ldr	r3, [r0, #12]
   b7ece:	4718      	bx	r3

000b7ed0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7ed0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7ed2:	6800      	ldr	r0, [r0, #0]
   b7ed4:	f100 0110 	add.w	r1, r0, #16
   b7ed8:	f7ff fff1 	bl	b7ebe <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7edc:	bd08      	pop	{r3, pc}
	...

000b7ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7ee0:	b538      	push	{r3, r4, r5, lr}
   b7ee2:	2300      	movs	r3, #0
   b7ee4:	4604      	mov	r4, r0
   b7ee6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7ee8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7eea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7eec:	f7fc fe4d 	bl	b4b8a <_Znwj>
   b7ef0:	b128      	cbz	r0, b7efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7ef2:	2301      	movs	r3, #1
   b7ef4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7ef8:	4b02      	ldr	r3, [pc, #8]	; (b7f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7efa:	6003      	str	r3, [r0, #0]
   b7efc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7efe:	6020      	str	r0, [r4, #0]
	}
   b7f00:	4620      	mov	r0, r4
   b7f02:	bd38      	pop	{r3, r4, r5, pc}
   b7f04:	000bbb10 	.word	0x000bbb10

000b7f08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7f08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7f0a:	2300      	movs	r3, #0
   b7f0c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7f0e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7f10:	4604      	mov	r4, r0
   b7f12:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7f14:	b12b      	cbz	r3, b7f22 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7f16:	2202      	movs	r2, #2
   b7f18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7f1a:	68eb      	ldr	r3, [r5, #12]
   b7f1c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7f1e:	68ab      	ldr	r3, [r5, #8]
   b7f20:	60a3      	str	r3, [r4, #8]
    }
   b7f22:	4620      	mov	r0, r4
   b7f24:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f2a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b7f2c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b7f2e:	4668      	mov	r0, sp
   b7f30:	f7ff ff4c 	bl	b7dcc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7f34:	f04f 0302 	mov.w	r3, #2
   b7f38:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7f3c:	2a00      	cmp	r2, #0
   b7f3e:	d103      	bne.n	b7f48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b7f40:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7f44:	2900      	cmp	r1, #0
   b7f46:	d1f7      	bne.n	b7f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7f48:	d125      	bne.n	b7f96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7f4a:	f104 050c 	add.w	r5, r4, #12
   b7f4e:	4669      	mov	r1, sp
   b7f50:	4628      	mov	r0, r5
   b7f52:	f7ff ff3b 	bl	b7dcc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7f56:	f3bf 8f5b 	dmb	ish
   b7f5a:	2301      	movs	r3, #1
   b7f5c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7f5e:	2000      	movs	r0, #0
   b7f60:	f104 0308 	add.w	r3, r4, #8
   b7f64:	f3bf 8f5b 	dmb	ish
   b7f68:	e853 6f00 	ldrex	r6, [r3]
   b7f6c:	e843 0200 	strex	r2, r0, [r3]
   b7f70:	2a00      	cmp	r2, #0
   b7f72:	d1f9      	bne.n	b7f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7f74:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7f78:	b16e      	cbz	r6, b7f96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7f7a:	f7fe f8dd 	bl	b6138 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7f7e:	b178      	cbz	r0, b7fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7f80:	4629      	mov	r1, r5
   b7f82:	4630      	mov	r0, r6
   b7f84:	f7ff ff8b 	bl	b7e9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7f88:	4630      	mov	r0, r6
   b7f8a:	f7fd f8ee 	bl	b516a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7f8e:	2110      	movs	r1, #16
   b7f90:	4630      	mov	r0, r6
   b7f92:	f7fc fe00 	bl	b4b96 <_ZdlPvj>
        p_->setError(std::move(error));
   b7f96:	4668      	mov	r0, sp
   b7f98:	f7ff ff25 	bl	b7de6 <_ZN8particle5ErrorD1Ev>
    }
   b7f9c:	b009      	add	sp, #36	; 0x24
   b7f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7fa0:	4631      	mov	r1, r6
   b7fa2:	a802      	add	r0, sp, #8
   b7fa4:	f7ff ffb0 	bl	b7f08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7fa8:	68e0      	ldr	r0, [r4, #12]
   b7faa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7fae:	b108      	cbz	r0, b7fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7fb0:	f001 fabe 	bl	b9530 <strdup>
        type_(type) {
   b7fb4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7fb6:	2010      	movs	r0, #16
   b7fb8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7fbc:	f7fc fde5 	bl	b4b8a <_Znwj>
   b7fc0:	4605      	mov	r5, r0
   b7fc2:	b1e8      	cbz	r0, b8000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7fc4:	2700      	movs	r7, #0
   b7fc6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7fc8:	2018      	movs	r0, #24
   b7fca:	f7fc fdde 	bl	b4b8a <_Znwj>
   b7fce:	4604      	mov	r4, r0
   b7fd0:	b188      	cbz	r0, b7ff6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7fd2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7fd4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7fd6:	a802      	add	r0, sp, #8
   b7fd8:	f7ff fa5a 	bl	b7490 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fdc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7fde:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fe0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fe2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7fe4:	9204      	str	r2, [sp, #16]
   b7fe6:	a906      	add	r1, sp, #24
   b7fe8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fea:	60e3      	str	r3, [r4, #12]
   b7fec:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7ff0:	9205      	str	r2, [sp, #20]
   b7ff2:	f7ff feeb 	bl	b7dcc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7ff6:	4b08      	ldr	r3, [pc, #32]	; (b8018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7ff8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7ffa:	4b08      	ldr	r3, [pc, #32]	; (b801c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7ffc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7ffe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8000:	a806      	add	r0, sp, #24
   b8002:	f7ff fef0 	bl	b7de6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8006:	a802      	add	r0, sp, #8
   b8008:	f7fd f8af 	bl	b516a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b800c:	2200      	movs	r2, #0
   b800e:	4629      	mov	r1, r5
   b8010:	4803      	ldr	r0, [pc, #12]	; (b8020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b8012:	f7fe f899 	bl	b6148 <application_thread_invoke>
   b8016:	e7b7      	b.n	b7f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8018:	000b7eb1 	.word	0x000b7eb1
   b801c:	000b8135 	.word	0x000b8135
   b8020:	000b8651 	.word	0x000b8651

000b8024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8028:	b08b      	sub	sp, #44	; 0x2c
   b802a:	4605      	mov	r5, r0
   b802c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8030:	460f      	mov	r7, r1
   b8032:	4690      	mov	r8, r2
   b8034:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8036:	f7fe f913 	bl	b6260 <spark_cloud_flag_connected>
   b803a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b803c:	4683      	mov	fp, r0
   b803e:	bb38      	cbnz	r0, b8090 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8040:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8044:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8046:	a905      	add	r1, sp, #20
   b8048:	4630      	mov	r0, r6
   b804a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b804e:	f7ff febd 	bl	b7dcc <_ZN8particle5ErrorC1EOS0_>
   b8052:	2014      	movs	r0, #20
   b8054:	f7fc fd99 	bl	b4b8a <_Znwj>
   b8058:	4604      	mov	r4, r0
   b805a:	b148      	cbz	r0, b8070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b805c:	2302      	movs	r3, #2
   b805e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8060:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8062:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8066:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8068:	4631      	mov	r1, r6
   b806a:	300c      	adds	r0, #12
   b806c:	f7ff feae 	bl	b7dcc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8070:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8072:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8074:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8078:	f7ff ff32 	bl	b7ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b807c:	4630      	mov	r0, r6
   b807e:	f7ff feb2 	bl	b7de6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8082:	a805      	add	r0, sp, #20
   b8084:	f7ff feaf 	bl	b7de6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8088:	4628      	mov	r0, r5
   b808a:	b00b      	add	sp, #44	; 0x2c
   b808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8090:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8092:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8094:	2014      	movs	r0, #20
   b8096:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b809a:	9307      	str	r3, [sp, #28]
   b809c:	f7fc fd75 	bl	b4b8a <_Znwj>
   b80a0:	4601      	mov	r1, r0
   b80a2:	b118      	cbz	r0, b80ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b80a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b80a8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b80aa:	7044      	strb	r4, [r0, #1]
   b80ac:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b80ae:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b80b0:	f7ff ff16 	bl	b7ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b80b4:	4b1e      	ldr	r3, [pc, #120]	; (b8130 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b80b6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b80b8:	2008      	movs	r0, #8
   b80ba:	f7fc fd66 	bl	b4b8a <_Znwj>
   b80be:	4604      	mov	r4, r0
   b80c0:	b110      	cbz	r0, b80c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b80c2:	a903      	add	r1, sp, #12
   b80c4:	f7ff fec7 	bl	b7e56 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b80c8:	9600      	str	r6, [sp, #0]
   b80ca:	fa5f f38a 	uxtb.w	r3, sl
   b80ce:	464a      	mov	r2, r9
   b80d0:	4641      	mov	r1, r8
   b80d2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b80d4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b80d6:	f7fe f8cb 	bl	b6270 <spark_send_event>
   b80da:	b9b8      	cbnz	r0, b810c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b80dc:	9b03      	ldr	r3, [sp, #12]
   b80de:	785b      	ldrb	r3, [r3, #1]
   b80e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b80e4:	b993      	cbnz	r3, b810c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b80e6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b80ea:	a905      	add	r1, sp, #20
   b80ec:	a803      	add	r0, sp, #12
   b80ee:	9205      	str	r2, [sp, #20]
   b80f0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b80f4:	f7ff ff18 	bl	b7f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b80f8:	a805      	add	r0, sp, #20
   b80fa:	f7ff fe74 	bl	b7de6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b80fe:	a805      	add	r0, sp, #20
   b8100:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8102:	f7ff feb1 	bl	b7e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8106:	a806      	add	r0, sp, #24
   b8108:	f7fc fe80 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b810c:	a903      	add	r1, sp, #12
   b810e:	a805      	add	r0, sp, #20
   b8110:	f7ff fea1 	bl	b7e56 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8114:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8116:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8118:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b811a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b811c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b811e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8120:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8122:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8124:	f7fc fe72 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8128:	a804      	add	r0, sp, #16
   b812a:	f7fc fe6f 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b812e:	e7ab      	b.n	b8088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8130:	000b81b1 	.word	0x000b81b1

000b8134 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8134:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8138:	4605      	mov	r5, r0
	switch (__op)
   b813a:	d103      	bne.n	b8144 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b813c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b813e:	6003      	str	r3, [r0, #0]
      }
   b8140:	2000      	movs	r0, #0
   b8142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8144:	2a02      	cmp	r2, #2
   b8146:	d010      	beq.n	b816a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8148:	2a03      	cmp	r2, #3
   b814a:	d1f9      	bne.n	b8140 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b814c:	6804      	ldr	r4, [r0, #0]
   b814e:	2c00      	cmp	r4, #0
   b8150:	d0f6      	beq.n	b8140 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8152:	f104 0010 	add.w	r0, r4, #16
   b8156:	f7ff fe46 	bl	b7de6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b815a:	4620      	mov	r0, r4
   b815c:	f7fd f805 	bl	b516a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8160:	2118      	movs	r1, #24
   b8162:	4620      	mov	r0, r4
   b8164:	f7fc fd17 	bl	b4b96 <_ZdlPvj>
   b8168:	e7ea      	b.n	b8140 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b816a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b816c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b816e:	f7fc fd0c 	bl	b4b8a <_Znwj>
   b8172:	4604      	mov	r4, r0
   b8174:	b150      	cbz	r0, b818c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b8176:	4631      	mov	r1, r6
   b8178:	f7ff fec6 	bl	b7f08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b817c:	6930      	ldr	r0, [r6, #16]
   b817e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8182:	b108      	cbz	r0, b8188 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8184:	f001 f9d4 	bl	b9530 <strdup>
        type_(type) {
   b8188:	6120      	str	r0, [r4, #16]
   b818a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b818c:	602c      	str	r4, [r5, #0]
	}
   b818e:	e7d7      	b.n	b8140 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8190 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8190:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8192:	2300      	movs	r3, #0
   b8194:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8196:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8198:	4604      	mov	r4, r0
   b819a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b819c:	b12b      	cbz	r3, b81aa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b819e:	2202      	movs	r2, #2
   b81a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b81a2:	68eb      	ldr	r3, [r5, #12]
   b81a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b81a6:	68ab      	ldr	r3, [r5, #8]
   b81a8:	60a3      	str	r3, [r4, #8]
    }
   b81aa:	4620      	mov	r0, r4
   b81ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b81b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b81b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b81b2:	b089      	sub	sp, #36	; 0x24
   b81b4:	4604      	mov	r4, r0
   b81b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b81b8:	a801      	add	r0, sp, #4
   b81ba:	4611      	mov	r1, r2
   b81bc:	f7ff fe54 	bl	b7e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b81c0:	b1a4      	cbz	r4, b81ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b81c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b81c4:	b11d      	cbz	r5, b81ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b81c6:	4628      	mov	r0, r5
   b81c8:	f001 f9b2 	bl	b9530 <strdup>
   b81cc:	4605      	mov	r5, r0
   b81ce:	a801      	add	r0, sp, #4
   b81d0:	a903      	add	r1, sp, #12
        type_(type) {
   b81d2:	9503      	str	r5, [sp, #12]
   b81d4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b81d8:	f7ff fea6 	bl	b7f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b81dc:	a803      	add	r0, sp, #12
   b81de:	f7ff fe02 	bl	b7de6 <_ZN8particle5ErrorD1Ev>
   b81e2:	a802      	add	r0, sp, #8
   b81e4:	f7fc fe12 	bl	b4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b81e8:	b009      	add	sp, #36	; 0x24
   b81ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b81ec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b81ee:	2301      	movs	r3, #1
   b81f0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b81f4:	2a00      	cmp	r2, #0
   b81f6:	d103      	bne.n	b8200 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b81f8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b81fc:	2900      	cmp	r1, #0
   b81fe:	d1f7      	bne.n	b81f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8200:	d1ef      	bne.n	b81e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8202:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8204:	f3bf 8f5b 	dmb	ish
   b8208:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b820a:	1d2b      	adds	r3, r5, #4
   b820c:	f3bf 8f5b 	dmb	ish
   b8210:	e853 6f00 	ldrex	r6, [r3]
   b8214:	e843 4200 	strex	r2, r4, [r3]
   b8218:	2a00      	cmp	r2, #0
   b821a:	d1f9      	bne.n	b8210 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b821c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8220:	2e00      	cmp	r6, #0
   b8222:	d0de      	beq.n	b81e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8224:	4620      	mov	r0, r4
   b8226:	f7fd ff87 	bl	b6138 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b822a:	4607      	mov	r7, r0
   b822c:	b160      	cbz	r0, b8248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b822e:	f105 010c 	add.w	r1, r5, #12
   b8232:	4630      	mov	r0, r6
   b8234:	f7ff fe43 	bl	b7ebe <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8238:	4630      	mov	r0, r6
   b823a:	f7fc ff96 	bl	b516a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b823e:	2110      	movs	r1, #16
   b8240:	4630      	mov	r0, r6
   b8242:	f7fc fca8 	bl	b4b96 <_ZdlPvj>
   b8246:	e7cc      	b.n	b81e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8248:	4631      	mov	r1, r6
   b824a:	a803      	add	r0, sp, #12
   b824c:	f7ff ffa0 	bl	b8190 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8250:	7b2b      	ldrb	r3, [r5, #12]
   b8252:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8256:	2010      	movs	r0, #16
   b8258:	f7fc fc97 	bl	b4b8a <_Znwj>
   b825c:	4605      	mov	r5, r0
   b825e:	b1d0      	cbz	r0, b8296 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8260:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8262:	2014      	movs	r0, #20
   b8264:	f7fc fc91 	bl	b4b8a <_Znwj>
   b8268:	4604      	mov	r4, r0
   b826a:	b178      	cbz	r0, b828c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b826c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b826e:	4601      	mov	r1, r0
   b8270:	a803      	add	r0, sp, #12
   b8272:	f7ff f90d 	bl	b7490 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8276:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8278:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b827a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b827c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b827e:	9205      	str	r2, [sp, #20]
   b8280:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8282:	60e3      	str	r3, [r4, #12]
   b8284:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8288:	9206      	str	r2, [sp, #24]
   b828a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b828c:	4b06      	ldr	r3, [pc, #24]	; (b82a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b828e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8290:	4b06      	ldr	r3, [pc, #24]	; (b82ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8292:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8294:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b8296:	a803      	add	r0, sp, #12
   b8298:	f7fc ff67 	bl	b516a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b829c:	2200      	movs	r2, #0
   b829e:	4629      	mov	r1, r5
   b82a0:	4803      	ldr	r0, [pc, #12]	; (b82b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b82a2:	f7fd ff51 	bl	b6148 <application_thread_invoke>
   b82a6:	e7c7      	b.n	b8238 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b82a8:	000b7ed1 	.word	0x000b7ed1
   b82ac:	000b82b5 	.word	0x000b82b5
   b82b0:	000b8651 	.word	0x000b8651

000b82b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b82b4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b82b6:	b570      	push	{r4, r5, r6, lr}
   b82b8:	4604      	mov	r4, r0
	switch (__op)
   b82ba:	d103      	bne.n	b82c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b82bc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b82be:	6003      	str	r3, [r0, #0]
      }
   b82c0:	2000      	movs	r0, #0
   b82c2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b82c4:	2a02      	cmp	r2, #2
   b82c6:	d00c      	beq.n	b82e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b82c8:	2a03      	cmp	r2, #3
   b82ca:	d1f9      	bne.n	b82c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b82cc:	6804      	ldr	r4, [r0, #0]
   b82ce:	2c00      	cmp	r4, #0
   b82d0:	d0f6      	beq.n	b82c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b82d2:	4620      	mov	r0, r4
   b82d4:	f7fc ff49 	bl	b516a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b82d8:	2114      	movs	r1, #20
   b82da:	4620      	mov	r0, r4
   b82dc:	f7fc fc5b 	bl	b4b96 <_ZdlPvj>
   b82e0:	e7ee      	b.n	b82c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b82e2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b82e4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b82e6:	f7fc fc50 	bl	b4b8a <_Znwj>
   b82ea:	4605      	mov	r5, r0
   b82ec:	b120      	cbz	r0, b82f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b82ee:	4631      	mov	r1, r6
   b82f0:	f7ff ff4e 	bl	b8190 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b82f4:	7c33      	ldrb	r3, [r6, #16]
   b82f6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b82f8:	6025      	str	r5, [r4, #0]
	}
   b82fa:	e7e1      	b.n	b82c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b82fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b82fc:	4770      	bx	lr

000b82fe <_ZN9IPAddressD0Ev>:
   b82fe:	b510      	push	{r4, lr}
   b8300:	2118      	movs	r1, #24
   b8302:	4604      	mov	r4, r0
   b8304:	f7fc fc47 	bl	b4b96 <_ZdlPvj>
   b8308:	4620      	mov	r0, r4
   b830a:	bd10      	pop	{r4, pc}

000b830c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b830c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b830e:	7d03      	ldrb	r3, [r0, #20]
   b8310:	2b06      	cmp	r3, #6
{
   b8312:	b08d      	sub	sp, #52	; 0x34
   b8314:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8316:	f100 0704 	add.w	r7, r0, #4
   b831a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b831e:	d012      	beq.n	b8346 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8320:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8324:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8328:	220a      	movs	r2, #10
   b832a:	4630      	mov	r0, r6
   b832c:	f7ff fb79 	bl	b7a22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8330:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8332:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8334:	d019      	beq.n	b836a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8336:	2c00      	cmp	r4, #0
   b8338:	d0f4      	beq.n	b8324 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b833a:	212e      	movs	r1, #46	; 0x2e
   b833c:	4630      	mov	r0, r6
   b833e:	f7ff fb57 	bl	b79f0 <_ZN5Print5printEc>
   b8342:	4404      	add	r4, r0
   b8344:	e7ee      	b.n	b8324 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8346:	232f      	movs	r3, #47	; 0x2f
   b8348:	466a      	mov	r2, sp
   b834a:	4639      	mov	r1, r7
   b834c:	200a      	movs	r0, #10
		buf[0] = 0;
   b834e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8352:	f7fd fe01 	bl	b5f58 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8356:	4668      	mov	r0, sp
   b8358:	f7fc fbbc 	bl	b4ad4 <strlen>
   b835c:	6833      	ldr	r3, [r6, #0]
   b835e:	4602      	mov	r2, r0
   b8360:	68db      	ldr	r3, [r3, #12]
   b8362:	4669      	mov	r1, sp
   b8364:	4630      	mov	r0, r6
   b8366:	4798      	blx	r3
   b8368:	4604      	mov	r4, r0
    }
    return n;
}
   b836a:	4620      	mov	r0, r4
   b836c:	b00d      	add	sp, #52	; 0x34
   b836e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8370 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8370:	b510      	push	{r4, lr}
   b8372:	4b05      	ldr	r3, [pc, #20]	; (b8388 <_ZN9IPAddressC1Ev+0x18>)
   b8374:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8376:	2211      	movs	r2, #17
   b8378:	f840 3b04 	str.w	r3, [r0], #4
   b837c:	2100      	movs	r1, #0
   b837e:	f001 f899 	bl	b94b4 <memset>
}
   b8382:	4620      	mov	r0, r4
   b8384:	bd10      	pop	{r4, pc}
   b8386:	bf00      	nop
   b8388:	000bbb2c 	.word	0x000bbb2c

000b838c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b838c:	4603      	mov	r3, r0
   b838e:	4a07      	ldr	r2, [pc, #28]	; (b83ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8390:	b510      	push	{r4, lr}
   b8392:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8396:	f101 0210 	add.w	r2, r1, #16
   b839a:	f851 4b04 	ldr.w	r4, [r1], #4
   b839e:	f843 4b04 	str.w	r4, [r3], #4
   b83a2:	4291      	cmp	r1, r2
   b83a4:	d1f9      	bne.n	b839a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b83a6:	780a      	ldrb	r2, [r1, #0]
   b83a8:	701a      	strb	r2, [r3, #0]
}
   b83aa:	bd10      	pop	{r4, pc}
   b83ac:	000bbb2c 	.word	0x000bbb2c

000b83b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b83b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b83b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b83b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b83ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b83be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b83c2:	2304      	movs	r3, #4
   b83c4:	6041      	str	r1, [r0, #4]
   b83c6:	7503      	strb	r3, [r0, #20]
}
   b83c8:	bd10      	pop	{r4, pc}
	...

000b83cc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b83cc:	b507      	push	{r0, r1, r2, lr}
   b83ce:	4b06      	ldr	r3, [pc, #24]	; (b83e8 <_ZN9IPAddressC1EPKh+0x1c>)
   b83d0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b83d2:	78cb      	ldrb	r3, [r1, #3]
   b83d4:	9300      	str	r3, [sp, #0]
   b83d6:	788b      	ldrb	r3, [r1, #2]
   b83d8:	784a      	ldrb	r2, [r1, #1]
   b83da:	7809      	ldrb	r1, [r1, #0]
   b83dc:	f7ff ffe8 	bl	b83b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b83e0:	b003      	add	sp, #12
   b83e2:	f85d fb04 	ldr.w	pc, [sp], #4
   b83e6:	bf00      	nop
   b83e8:	000bbb2c 	.word	0x000bbb2c

000b83ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b83ec:	7441      	strb	r1, [r0, #17]
}
   b83ee:	4770      	bx	lr

000b83f0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b83f0:	4770      	bx	lr

000b83f2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b83f2:	4770      	bx	lr

000b83f4 <_ZN9USBSerial4readEv>:
{
   b83f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b83f6:	2100      	movs	r1, #0
   b83f8:	7c00      	ldrb	r0, [r0, #16]
   b83fa:	f7fd fe55 	bl	b60a8 <HAL_USB_USART_Receive_Data>
}
   b83fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8402:	bd08      	pop	{r3, pc}

000b8404 <_ZN9USBSerial4peekEv>:
{
   b8404:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8406:	2101      	movs	r1, #1
   b8408:	7c00      	ldrb	r0, [r0, #16]
   b840a:	f7fd fe4d 	bl	b60a8 <HAL_USB_USART_Receive_Data>
}
   b840e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8412:	bd08      	pop	{r3, pc}

000b8414 <_ZN9USBSerial17availableForWriteEv>:
{
   b8414:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8416:	7c00      	ldrb	r0, [r0, #16]
   b8418:	f7fd fe3e 	bl	b6098 <HAL_USB_USART_Available_Data_For_Write>
}
   b841c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8420:	bd08      	pop	{r3, pc}

000b8422 <_ZN9USBSerial9availableEv>:
{
   b8422:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8424:	7c00      	ldrb	r0, [r0, #16]
   b8426:	f7fd fe2f 	bl	b6088 <HAL_USB_USART_Available_Data>
}
   b842a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b842e:	bd08      	pop	{r3, pc}

000b8430 <_ZN9USBSerial5writeEh>:
{
   b8430:	b513      	push	{r0, r1, r4, lr}
   b8432:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8434:	7c00      	ldrb	r0, [r0, #16]
{
   b8436:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8438:	f7fd fe2e 	bl	b6098 <HAL_USB_USART_Available_Data_For_Write>
   b843c:	2800      	cmp	r0, #0
   b843e:	9901      	ldr	r1, [sp, #4]
   b8440:	dc01      	bgt.n	b8446 <_ZN9USBSerial5writeEh+0x16>
   b8442:	7c60      	ldrb	r0, [r4, #17]
   b8444:	b120      	cbz	r0, b8450 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8446:	7c20      	ldrb	r0, [r4, #16]
   b8448:	f7fd fe36 	bl	b60b8 <HAL_USB_USART_Send_Data>
   b844c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8450:	b002      	add	sp, #8
   b8452:	bd10      	pop	{r4, pc}

000b8454 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8454:	7c00      	ldrb	r0, [r0, #16]
   b8456:	f7fd be37 	b.w	b60c8 <HAL_USB_USART_Flush_Data>

000b845a <_ZN9USBSerialD0Ev>:
   b845a:	b510      	push	{r4, lr}
   b845c:	2114      	movs	r1, #20
   b845e:	4604      	mov	r4, r0
   b8460:	f7fc fb99 	bl	b4b96 <_ZdlPvj>
   b8464:	4620      	mov	r0, r4
   b8466:	bd10      	pop	{r4, pc}

000b8468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8468:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b846a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b846e:	4604      	mov	r4, r0
   b8470:	4608      	mov	r0, r1
   b8472:	2100      	movs	r1, #0
   b8474:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8478:	4b04      	ldr	r3, [pc, #16]	; (b848c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b847a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b847c:	2301      	movs	r3, #1
  _serial = serial;
   b847e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8480:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8482:	4611      	mov	r1, r2
   b8484:	f7fd fdf8 	bl	b6078 <HAL_USB_USART_Init>
}
   b8488:	4620      	mov	r0, r4
   b848a:	bd10      	pop	{r4, pc}
   b848c:	000bbb40 	.word	0x000bbb40

000b8490 <_Z19acquireSerialBufferv>:
{
   b8490:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8492:	2214      	movs	r2, #20
{
   b8494:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8496:	2100      	movs	r1, #0
   b8498:	f001 f80c 	bl	b94b4 <memset>
}
   b849c:	4620      	mov	r0, r4
   b849e:	bd10      	pop	{r4, pc}

000b84a0 <_Z16_fetch_usbserialv>:
{
   b84a0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84a2:	4c0f      	ldr	r4, [pc, #60]	; (b84e0 <_Z16_fetch_usbserialv+0x40>)
{
   b84a4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b84a6:	a803      	add	r0, sp, #12
   b84a8:	f7ff fff2 	bl	b8490 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84ac:	7821      	ldrb	r1, [r4, #0]
   b84ae:	f3bf 8f5b 	dmb	ish
   b84b2:	f011 0101 	ands.w	r1, r1, #1
   b84b6:	d10f      	bne.n	b84d8 <_Z16_fetch_usbserialv+0x38>
   b84b8:	4620      	mov	r0, r4
   b84ba:	9101      	str	r1, [sp, #4]
   b84bc:	f7fc fb6d 	bl	b4b9a <__cxa_guard_acquire>
   b84c0:	9901      	ldr	r1, [sp, #4]
   b84c2:	b148      	cbz	r0, b84d8 <_Z16_fetch_usbserialv+0x38>
   b84c4:	aa03      	add	r2, sp, #12
   b84c6:	4807      	ldr	r0, [pc, #28]	; (b84e4 <_Z16_fetch_usbserialv+0x44>)
   b84c8:	f7ff ffce 	bl	b8468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b84cc:	4620      	mov	r0, r4
   b84ce:	f7fc fb69 	bl	b4ba4 <__cxa_guard_release>
   b84d2:	4805      	ldr	r0, [pc, #20]	; (b84e8 <_Z16_fetch_usbserialv+0x48>)
   b84d4:	f000 ffb0 	bl	b9438 <atexit>
	return _usbserial;
}
   b84d8:	4802      	ldr	r0, [pc, #8]	; (b84e4 <_Z16_fetch_usbserialv+0x44>)
   b84da:	b008      	add	sp, #32
   b84dc:	bd10      	pop	{r4, pc}
   b84de:	bf00      	nop
   b84e0:	2003e668 	.word	0x2003e668
   b84e4:	2003e66c 	.word	0x2003e66c
   b84e8:	000b83f1 	.word	0x000b83f1

000b84ec <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
   b84ec:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b84ee:	b510      	push	{r4, lr}
   b84f0:	b90a      	cbnz	r2, b84f6 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b84f2:	f000 fb99 	bl	b8c28 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b84f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b84fa:	68c3      	ldr	r3, [r0, #12]
   b84fc:	4718      	bx	r3
	...

000b8500 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b8500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b8502:	4f10      	ldr	r7, [pc, #64]	; (b8544 <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b8504:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b8508:	4606      	mov	r6, r0
   b850a:	460d      	mov	r5, r1
    delete handlers[pin];
   b850c:	b134      	cbz	r4, b851c <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b850e:	4620      	mov	r0, r4
   b8510:	f7fc fe2b 	bl	b516a <_ZNSt14_Function_baseD1Ev>
   b8514:	2110      	movs	r1, #16
   b8516:	4620      	mov	r0, r4
   b8518:	f7fc fb3d 	bl	b4b96 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b851c:	2010      	movs	r0, #16
   b851e:	f7fc fb34 	bl	b4b8a <_Znwj>
   b8522:	4604      	mov	r4, r0
   b8524:	b150      	cbz	r0, b853c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b8526:	2300      	movs	r3, #0
   b8528:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b852a:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b852c:	b133      	cbz	r3, b853c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b852e:	2202      	movs	r2, #2
   b8530:	4629      	mov	r1, r5
   b8532:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8534:	68eb      	ldr	r3, [r5, #12]
   b8536:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8538:	68ab      	ldr	r3, [r5, #8]
   b853a:	60a3      	str	r3, [r4, #8]
   b853c:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b8540:	4620      	mov	r0, r4
   b8542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8544:	2003e680 	.word	0x2003e680

000b8548 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8548:	b5f0      	push	{r4, r5, r6, r7, lr}
   b854a:	b087      	sub	sp, #28
   b854c:	4605      	mov	r5, r0
   b854e:	9103      	str	r1, [sp, #12]
   b8550:	4617      	mov	r7, r2
   b8552:	461e      	mov	r6, r3
    hal_interrupt_detach(pin);
   b8554:	f7fd fbfe 	bl	b5d54 <hal_interrupt_detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b8558:	9903      	ldr	r1, [sp, #12]
   b855a:	4628      	mov	r0, r5
   b855c:	f7ff ffd0 	bl	b8500 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b8560:	4604      	mov	r4, r0
   b8562:	b1e8      	cbz	r0, b85a0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        hal_interrupt_extra_configuration_t extra = {};
   b8564:	2100      	movs	r1, #0
  if (priority >= 0) {
   b8566:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8568:	f04f 0304 	mov.w	r3, #4
        hal_interrupt_extra_configuration_t extra = {};
   b856c:	f8ad 1015 	strh.w	r1, [sp, #21]
   b8570:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8574:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b8578:	bfa2      	ittt	ge
   b857a:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b857c:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b8580:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8584:	9100      	str	r1, [sp, #0]
   b8586:	4602      	mov	r2, r0
   b8588:	4907      	ldr	r1, [pc, #28]	; (b85a8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b858a:	bfa8      	it	ge
   b858c:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8590:	463b      	mov	r3, r7
   b8592:	4628      	mov	r0, r5
   b8594:	f7fd fbd6 	bl	b5d44 <hal_interrupt_attach>
   b8598:	b110      	cbz	r0, b85a0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b859a:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b859c:	b007      	add	sp, #28
   b859e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b85a0:	1e20      	subs	r0, r4, #0
   b85a2:	bf18      	it	ne
   b85a4:	2001      	movne	r0, #1
   b85a6:	e7f9      	b.n	b859c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b85a8:	000b84ed 	.word	0x000b84ed

000b85ac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b85ac:	4770      	bx	lr

000b85ae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b85ae:	7441      	strb	r1, [r0, #17]
}
   b85b0:	4770      	bx	lr

000b85b2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b85b2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b85b4:	7c00      	ldrb	r0, [r0, #16]
   b85b6:	f7fd fd07 	bl	b5fc8 <hal_usart_available_data_for_write>
}
   b85ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b85be:	bd08      	pop	{r3, pc}

000b85c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b85c0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b85c2:	7c00      	ldrb	r0, [r0, #16]
   b85c4:	f7fd fcd8 	bl	b5f78 <hal_usart_available>
}
   b85c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b85cc:	bd08      	pop	{r3, pc}

000b85ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b85ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b85d0:	7c00      	ldrb	r0, [r0, #16]
   b85d2:	f7fd fce1 	bl	b5f98 <hal_usart_peek>
}
   b85d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85da:	bd08      	pop	{r3, pc}

000b85dc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b85dc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b85de:	7c00      	ldrb	r0, [r0, #16]
   b85e0:	f7fd fcd2 	bl	b5f88 <hal_usart_read>
}
   b85e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85e8:	bd08      	pop	{r3, pc}

000b85ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b85ea:	7c00      	ldrb	r0, [r0, #16]
   b85ec:	f7fd bcdc 	b.w	b5fa8 <hal_usart_flush>

000b85f0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b85f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b85f2:	7c45      	ldrb	r5, [r0, #17]
{
   b85f4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b85f6:	b12d      	cbz	r5, b8604 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b85f8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b85fa:	b003      	add	sp, #12
   b85fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8600:	f7fd bcb2 	b.w	b5f68 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8604:	7c00      	ldrb	r0, [r0, #16]
   b8606:	9101      	str	r1, [sp, #4]
   b8608:	f7fd fcde 	bl	b5fc8 <hal_usart_available_data_for_write>
   b860c:	2800      	cmp	r0, #0
   b860e:	9901      	ldr	r1, [sp, #4]
   b8610:	dcf2      	bgt.n	b85f8 <_ZN11USARTSerial5writeEh+0x8>
}
   b8612:	4628      	mov	r0, r5
   b8614:	b003      	add	sp, #12
   b8616:	bd30      	pop	{r4, r5, pc}

000b8618 <_ZN11USARTSerialD0Ev>:
   b8618:	b510      	push	{r4, lr}
   b861a:	2114      	movs	r1, #20
   b861c:	4604      	mov	r4, r0
   b861e:	f7fc faba 	bl	b4b96 <_ZdlPvj>
   b8622:	4620      	mov	r0, r4
   b8624:	bd10      	pop	{r4, pc}
	...

000b8628 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8628:	b510      	push	{r4, lr}
   b862a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b862e:	4604      	mov	r4, r0
   b8630:	4608      	mov	r0, r1
   b8632:	4611      	mov	r1, r2
   b8634:	2200      	movs	r2, #0
   b8636:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b863a:	4b04      	ldr	r3, [pc, #16]	; (b864c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b863c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b863e:	2301      	movs	r3, #1
  _serial = serial;
   b8640:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8642:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8644:	f7fd fcc8 	bl	b5fd8 <hal_usart_init_ex>
}
   b8648:	4620      	mov	r0, r4
   b864a:	bd10      	pop	{r4, pc}
   b864c:	000bbb70 	.word	0x000bbb70

000b8650 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8650:	b510      	push	{r4, lr}
      if (_M_empty())
   b8652:	6883      	ldr	r3, [r0, #8]
   b8654:	4604      	mov	r4, r0
   b8656:	b90b      	cbnz	r3, b865c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8658:	f000 fae6 	bl	b8c28 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b865c:	68c3      	ldr	r3, [r0, #12]
   b865e:	4798      	blx	r3
      if (_M_manager)
   b8660:	68a3      	ldr	r3, [r4, #8]
   b8662:	b11b      	cbz	r3, b866c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8664:	2203      	movs	r2, #3
   b8666:	4621      	mov	r1, r4
   b8668:	4620      	mov	r0, r4
   b866a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b866c:	4620      	mov	r0, r4
   b866e:	2110      	movs	r1, #16
}
   b8670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b8674:	f7fc ba8f 	b.w	b4b96 <_ZdlPvj>

000b8678 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8678:	4770      	bx	lr

000b867a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b867a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b867c:	4606      	mov	r6, r0
   b867e:	4615      	mov	r5, r2
   b8680:	460c      	mov	r4, r1
   b8682:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8684:	42bc      	cmp	r4, r7
   b8686:	d006      	beq.n	b8696 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8688:	6833      	ldr	r3, [r6, #0]
   b868a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b868e:	689b      	ldr	r3, [r3, #8]
   b8690:	4630      	mov	r0, r6
   b8692:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8694:	e7f6      	b.n	b8684 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8696:	4628      	mov	r0, r5
   b8698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b869a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b869a:	7c00      	ldrb	r0, [r0, #16]
   b869c:	2200      	movs	r2, #0
   b869e:	f7fd bca3 	b.w	b5fe8 <hal_i2c_write>

000b86a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b86a2:	7c00      	ldrb	r0, [r0, #16]
   b86a4:	2100      	movs	r1, #0
   b86a6:	f7fd bca7 	b.w	b5ff8 <hal_i2c_available>

000b86aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b86aa:	7c00      	ldrb	r0, [r0, #16]
   b86ac:	2100      	movs	r1, #0
   b86ae:	f7fd bcab 	b.w	b6008 <hal_i2c_read>

000b86b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b86b2:	7c00      	ldrb	r0, [r0, #16]
   b86b4:	2100      	movs	r1, #0
   b86b6:	f7fd bcaf 	b.w	b6018 <hal_i2c_peek>

000b86ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b86ba:	7c00      	ldrb	r0, [r0, #16]
   b86bc:	2100      	movs	r1, #0
   b86be:	f7fd bcb3 	b.w	b6028 <hal_i2c_flush>

000b86c2 <_ZN7TwoWireD0Ev>:
   b86c2:	b510      	push	{r4, lr}
   b86c4:	2114      	movs	r1, #20
   b86c6:	4604      	mov	r4, r0
   b86c8:	f7fc fa65 	bl	b4b96 <_ZdlPvj>
   b86cc:	4620      	mov	r0, r4
   b86ce:	bd10      	pop	{r4, pc}

000b86d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b86d0:	b510      	push	{r4, lr}
   b86d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b86d6:	4604      	mov	r4, r0
   b86d8:	4608      	mov	r0, r1
   b86da:	2100      	movs	r1, #0
   b86dc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b86e0:	4b03      	ldr	r3, [pc, #12]	; (b86f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b86e2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b86e4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b86e6:	4611      	mov	r1, r2
   b86e8:	f7fd fcae 	bl	b6048 <hal_i2c_init>
}
   b86ec:	4620      	mov	r0, r4
   b86ee:	bd10      	pop	{r4, pc}
   b86f0:	000bbba0 	.word	0x000bbba0

000b86f4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b86f4:	2200      	movs	r2, #0
   b86f6:	6840      	ldr	r0, [r0, #4]
   b86f8:	4611      	mov	r1, r2
   b86fa:	f7fd bd61 	b.w	b61c0 <network_ready>

000b86fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b86fe:	2200      	movs	r2, #0
   b8700:	6840      	ldr	r0, [r0, #4]
   b8702:	4611      	mov	r1, r2
   b8704:	f7fd bd7c 	b.w	b6200 <network_listening>

000b8708 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8708:	2200      	movs	r2, #0
   b870a:	6840      	ldr	r0, [r0, #4]
   b870c:	4611      	mov	r1, r2
   b870e:	f7fd bd87 	b.w	b6220 <network_get_listen_timeout>

000b8712 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8712:	6840      	ldr	r0, [r0, #4]
   b8714:	2200      	movs	r2, #0
   b8716:	f7fd bd7b 	b.w	b6210 <network_set_listen_timeout>

000b871a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b871a:	6840      	ldr	r0, [r0, #4]
   b871c:	2200      	movs	r2, #0
   b871e:	f081 0101 	eor.w	r1, r1, #1
   b8722:	f7fd bd65 	b.w	b61f0 <network_listen>

000b8726 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8726:	2300      	movs	r3, #0
   b8728:	6840      	ldr	r0, [r0, #4]
   b872a:	461a      	mov	r2, r3
   b872c:	4619      	mov	r1, r3
   b872e:	f7fd bd57 	b.w	b61e0 <network_off>

000b8732 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8732:	2300      	movs	r3, #0
   b8734:	6840      	ldr	r0, [r0, #4]
   b8736:	461a      	mov	r2, r3
   b8738:	4619      	mov	r1, r3
   b873a:	f7fd bd49 	b.w	b61d0 <network_on>

000b873e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b873e:	2200      	movs	r2, #0
   b8740:	6840      	ldr	r0, [r0, #4]
   b8742:	4611      	mov	r1, r2
   b8744:	f7fd bd2c 	b.w	b61a0 <network_connecting>

000b8748 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8748:	6840      	ldr	r0, [r0, #4]
   b874a:	2200      	movs	r2, #0
   b874c:	2102      	movs	r1, #2
   b874e:	f7fd bd2f 	b.w	b61b0 <network_disconnect>

000b8752 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8752:	2300      	movs	r3, #0
   b8754:	6840      	ldr	r0, [r0, #4]
   b8756:	461a      	mov	r2, r3
   b8758:	f7fd bd1a 	b.w	b6190 <network_connect>

000b875c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b875c:	4b02      	ldr	r3, [pc, #8]	; (b8768 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b875e:	2204      	movs	r2, #4
   b8760:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8762:	4a02      	ldr	r2, [pc, #8]	; (b876c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8764:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8766:	4770      	bx	lr
   b8768:	2003e710 	.word	0x2003e710
   b876c:	000bbbc8 	.word	0x000bbbc8

000b8770 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8770:	2300      	movs	r3, #0
   b8772:	6840      	ldr	r0, [r0, #4]
   b8774:	461a      	mov	r2, r3
   b8776:	f7fd bd0b 	b.w	b6190 <network_connect>

000b877a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b877a:	6840      	ldr	r0, [r0, #4]
   b877c:	2200      	movs	r2, #0
   b877e:	2102      	movs	r1, #2
   b8780:	f7fd bd16 	b.w	b61b0 <network_disconnect>

000b8784 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8784:	2200      	movs	r2, #0
   b8786:	6840      	ldr	r0, [r0, #4]
   b8788:	4611      	mov	r1, r2
   b878a:	f7fd bd09 	b.w	b61a0 <network_connecting>

000b878e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b878e:	2200      	movs	r2, #0
   b8790:	6840      	ldr	r0, [r0, #4]
   b8792:	4611      	mov	r1, r2
   b8794:	f7fd bd14 	b.w	b61c0 <network_ready>

000b8798 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8798:	2300      	movs	r3, #0
   b879a:	6840      	ldr	r0, [r0, #4]
   b879c:	461a      	mov	r2, r3
   b879e:	4619      	mov	r1, r3
   b87a0:	f7fd bd16 	b.w	b61d0 <network_on>

000b87a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b87a4:	2300      	movs	r3, #0
   b87a6:	6840      	ldr	r0, [r0, #4]
   b87a8:	461a      	mov	r2, r3
   b87aa:	4619      	mov	r1, r3
   b87ac:	f7fd bd18 	b.w	b61e0 <network_off>

000b87b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b87b0:	6840      	ldr	r0, [r0, #4]
   b87b2:	2100      	movs	r1, #0
   b87b4:	f7fd bd3c 	b.w	b6230 <network_is_on>

000b87b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b87b8:	6840      	ldr	r0, [r0, #4]
   b87ba:	2100      	movs	r1, #0
   b87bc:	f7fd bd40 	b.w	b6240 <network_is_off>

000b87c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b87c0:	6840      	ldr	r0, [r0, #4]
   b87c2:	2200      	movs	r2, #0
   b87c4:	f081 0101 	eor.w	r1, r1, #1
   b87c8:	f7fd bd12 	b.w	b61f0 <network_listen>

000b87cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b87cc:	6840      	ldr	r0, [r0, #4]
   b87ce:	2200      	movs	r2, #0
   b87d0:	f7fd bd1e 	b.w	b6210 <network_set_listen_timeout>

000b87d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b87d4:	2200      	movs	r2, #0
   b87d6:	6840      	ldr	r0, [r0, #4]
   b87d8:	4611      	mov	r1, r2
   b87da:	f7fd bd21 	b.w	b6220 <network_get_listen_timeout>

000b87de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b87de:	2200      	movs	r2, #0
   b87e0:	6840      	ldr	r0, [r0, #4]
   b87e2:	4611      	mov	r1, r2
   b87e4:	f7fd bd0c 	b.w	b6200 <network_listening>

000b87e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b87e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b87ec:	b095      	sub	sp, #84	; 0x54
   b87ee:	4614      	mov	r4, r2
   b87f0:	460d      	mov	r5, r1
   b87f2:	4607      	mov	r7, r0
    IPAddress addr;
   b87f4:	f7ff fdbc 	bl	b8370 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b87f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b87fa:	221c      	movs	r2, #28
   b87fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b87fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8800:	f000 fe58 	bl	b94b4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8804:	2340      	movs	r3, #64	; 0x40
   b8806:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8808:	4620      	mov	r0, r4
   b880a:	466b      	mov	r3, sp
   b880c:	aa0c      	add	r2, sp, #48	; 0x30
   b880e:	2100      	movs	r1, #0
   b8810:	f7fd fa88 	bl	b5d24 <netdb_getaddrinfo>
    if (!r) {
   b8814:	4604      	mov	r4, r0
   b8816:	2800      	cmp	r0, #0
   b8818:	d14b      	bne.n	b88b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b881a:	4602      	mov	r2, r0
   b881c:	2101      	movs	r1, #1
   b881e:	6868      	ldr	r0, [r5, #4]
   b8820:	f7fd fcce 	bl	b61c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8824:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8826:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8828:	4622      	mov	r2, r4
   b882a:	6868      	ldr	r0, [r5, #4]
   b882c:	f7fd fcc8 	bl	b61c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8830:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8832:	4681      	mov	r9, r0
        bool ok = false;
   b8834:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8836:	2e00      	cmp	r6, #0
   b8838:	d03b      	beq.n	b88b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b883a:	2900      	cmp	r1, #0
   b883c:	d139      	bne.n	b88b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b883e:	6873      	ldr	r3, [r6, #4]
   b8840:	2b02      	cmp	r3, #2
   b8842:	d003      	beq.n	b884c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8844:	2b0a      	cmp	r3, #10
   b8846:	d011      	beq.n	b886c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8848:	69f6      	ldr	r6, [r6, #28]
   b884a:	e7f4      	b.n	b8836 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b884c:	f1b8 0f00 	cmp.w	r8, #0
   b8850:	d0fa      	beq.n	b8848 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8852:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8854:	a806      	add	r0, sp, #24
   b8856:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8858:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b885a:	f7ff fdb7 	bl	b83cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b885e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8860:	1d3c      	adds	r4, r7, #4
   b8862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8864:	682b      	ldr	r3, [r5, #0]
   b8866:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8868:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b886a:	e7ed      	b.n	b8848 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b886c:	f1b9 0f00 	cmp.w	r9, #0
   b8870:	d0ea      	beq.n	b8848 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8872:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8874:	2210      	movs	r2, #16
   b8876:	a801      	add	r0, sp, #4
   b8878:	f000 fe1c 	bl	b94b4 <memset>
                    a.v = 6;
   b887c:	2306      	movs	r3, #6
   b887e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8882:	ad01      	add	r5, sp, #4
   b8884:	f104 0308 	add.w	r3, r4, #8
   b8888:	3418      	adds	r4, #24
   b888a:	6818      	ldr	r0, [r3, #0]
   b888c:	6859      	ldr	r1, [r3, #4]
   b888e:	462a      	mov	r2, r5
   b8890:	c203      	stmia	r2!, {r0, r1}
   b8892:	3308      	adds	r3, #8
   b8894:	42a3      	cmp	r3, r4
   b8896:	4615      	mov	r5, r2
   b8898:	d1f7      	bne.n	b888a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b889a:	a901      	add	r1, sp, #4
   b889c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b889e:	ad07      	add	r5, sp, #28
   b88a0:	f7ff fd74 	bl	b838c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b88a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88a6:	1d3c      	adds	r4, r7, #4
   b88a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88aa:	682b      	ldr	r3, [r5, #0]
   b88ac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b88ae:	4649      	mov	r1, r9
   b88b0:	e7ca      	b.n	b8848 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b88b2:	9800      	ldr	r0, [sp, #0]
   b88b4:	f7fd fa2e 	bl	b5d14 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b88b8:	4638      	mov	r0, r7
   b88ba:	b015      	add	sp, #84	; 0x54
   b88bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b88c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b88c0:	4b02      	ldr	r3, [pc, #8]	; (b88cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b88c2:	4a03      	ldr	r2, [pc, #12]	; (b88d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b88c4:	601a      	str	r2, [r3, #0]
   b88c6:	2200      	movs	r2, #0
   b88c8:	605a      	str	r2, [r3, #4]

} // spark
   b88ca:	4770      	bx	lr
   b88cc:	2003e718 	.word	0x2003e718
   b88d0:	000bbc04 	.word	0x000bbc04

000b88d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b88d4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b88d6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b88d8:	d902      	bls.n	b88e0 <pinAvailable+0xc>
    return false;
   b88da:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b88dc:	b002      	add	sp, #8
   b88de:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b88e0:	f1a0 030b 	sub.w	r3, r0, #11
   b88e4:	2b02      	cmp	r3, #2
   b88e6:	d81a      	bhi.n	b891e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b88e8:	4c17      	ldr	r4, [pc, #92]	; (b8948 <pinAvailable+0x74>)
   b88ea:	7821      	ldrb	r1, [r4, #0]
   b88ec:	f3bf 8f5b 	dmb	ish
   b88f0:	f011 0101 	ands.w	r1, r1, #1
   b88f4:	d10b      	bne.n	b890e <pinAvailable+0x3a>
   b88f6:	4620      	mov	r0, r4
   b88f8:	9101      	str	r1, [sp, #4]
   b88fa:	f7fc f94e 	bl	b4b9a <__cxa_guard_acquire>
   b88fe:	9901      	ldr	r1, [sp, #4]
   b8900:	b128      	cbz	r0, b890e <pinAvailable+0x3a>
   b8902:	4812      	ldr	r0, [pc, #72]	; (b894c <pinAvailable+0x78>)
   b8904:	f7fd fd6a 	bl	b63dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8908:	4620      	mov	r0, r4
   b890a:	f7fc f94b 	bl	b4ba4 <__cxa_guard_release>
   b890e:	4b0f      	ldr	r3, [pc, #60]	; (b894c <pinAvailable+0x78>)
   b8910:	7818      	ldrb	r0, [r3, #0]
   b8912:	f7fd fba9 	bl	b6068 <hal_spi_is_enabled>
   b8916:	2800      	cmp	r0, #0
   b8918:	d1df      	bne.n	b88da <pinAvailable+0x6>
  return true; // 'pin' is available
   b891a:	2001      	movs	r0, #1
   b891c:	e7de      	b.n	b88dc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b891e:	2801      	cmp	r0, #1
   b8920:	d809      	bhi.n	b8936 <pinAvailable+0x62>
   b8922:	f000 f87d 	bl	b8a20 <_Z19__fetch_global_Wirev>
   b8926:	2100      	movs	r1, #0
   b8928:	7c00      	ldrb	r0, [r0, #16]
   b892a:	f7fd fb85 	bl	b6038 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b892e:	f080 0001 	eor.w	r0, r0, #1
   b8932:	b2c0      	uxtb	r0, r0
   b8934:	e7d2      	b.n	b88dc <pinAvailable+0x8>
   b8936:	3809      	subs	r0, #9
   b8938:	2801      	cmp	r0, #1
   b893a:	d8ee      	bhi.n	b891a <pinAvailable+0x46>
   b893c:	f000 f834 	bl	b89a8 <_Z22__fetch_global_Serial1v>
   b8940:	7c00      	ldrb	r0, [r0, #16]
   b8942:	f7fd fb39 	bl	b5fb8 <hal_usart_is_enabled>
   b8946:	e7f2      	b.n	b892e <pinAvailable+0x5a>
   b8948:	2003e720 	.word	0x2003e720
   b894c:	2003e724 	.word	0x2003e724

000b8950 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8950:	2823      	cmp	r0, #35	; 0x23
{
   b8952:	b538      	push	{r3, r4, r5, lr}
   b8954:	4604      	mov	r4, r0
   b8956:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8958:	d80a      	bhi.n	b8970 <pinMode+0x20>
   b895a:	29ff      	cmp	r1, #255	; 0xff
   b895c:	d008      	beq.n	b8970 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b895e:	f7ff ffb9 	bl	b88d4 <pinAvailable>
   b8962:	b128      	cbz	r0, b8970 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8964:	4629      	mov	r1, r5
   b8966:	4620      	mov	r0, r4
}
   b8968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b896c:	f7fd b9e2 	b.w	b5d34 <hal_gpio_mode>
}
   b8970:	bd38      	pop	{r3, r4, r5, pc}

000b8972 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8972:	4770      	bx	lr

000b8974 <_Z20acquireSerial1Bufferv>:
{
   b8974:	b538      	push	{r3, r4, r5, lr}
   b8976:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8978:	2514      	movs	r5, #20
   b897a:	462a      	mov	r2, r5
   b897c:	2100      	movs	r1, #0
   b897e:	f000 fd99 	bl	b94b4 <memset>
   b8982:	8025      	strh	r5, [r4, #0]
   b8984:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8986:	4907      	ldr	r1, [pc, #28]	; (b89a4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8988:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b898a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b898c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b898e:	f000 f86b 	bl	b8a68 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8992:	4904      	ldr	r1, [pc, #16]	; (b89a4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8994:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8996:	4628      	mov	r0, r5
   b8998:	f000 f866 	bl	b8a68 <_ZnajRKSt9nothrow_t>
    };
   b899c:	60e0      	str	r0, [r4, #12]
}
   b899e:	4620      	mov	r0, r4
   b89a0:	bd38      	pop	{r3, r4, r5, pc}
   b89a2:	bf00      	nop
   b89a4:	000bbc38 	.word	0x000bbc38

000b89a8 <_Z22__fetch_global_Serial1v>:
{
   b89a8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89aa:	4d0e      	ldr	r5, [pc, #56]	; (b89e4 <_Z22__fetch_global_Serial1v+0x3c>)
   b89ac:	7829      	ldrb	r1, [r5, #0]
   b89ae:	f3bf 8f5b 	dmb	ish
   b89b2:	f011 0401 	ands.w	r4, r1, #1
{
   b89b6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89b8:	d111      	bne.n	b89de <_Z22__fetch_global_Serial1v+0x36>
   b89ba:	4628      	mov	r0, r5
   b89bc:	f7fc f8ed 	bl	b4b9a <__cxa_guard_acquire>
   b89c0:	b168      	cbz	r0, b89de <_Z22__fetch_global_Serial1v+0x36>
   b89c2:	a801      	add	r0, sp, #4
   b89c4:	f7ff ffd6 	bl	b8974 <_Z20acquireSerial1Bufferv>
   b89c8:	aa01      	add	r2, sp, #4
   b89ca:	4621      	mov	r1, r4
   b89cc:	4806      	ldr	r0, [pc, #24]	; (b89e8 <_Z22__fetch_global_Serial1v+0x40>)
   b89ce:	f7ff fe2b 	bl	b8628 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b89d2:	4628      	mov	r0, r5
   b89d4:	f7fc f8e6 	bl	b4ba4 <__cxa_guard_release>
   b89d8:	4804      	ldr	r0, [pc, #16]	; (b89ec <_Z22__fetch_global_Serial1v+0x44>)
   b89da:	f000 fd2d 	bl	b9438 <atexit>
    return serial1;
}
   b89de:	4802      	ldr	r0, [pc, #8]	; (b89e8 <_Z22__fetch_global_Serial1v+0x40>)
   b89e0:	b007      	add	sp, #28
   b89e2:	bd30      	pop	{r4, r5, pc}
   b89e4:	2003e72c 	.word	0x2003e72c
   b89e8:	2003e730 	.word	0x2003e730
   b89ec:	000b8973 	.word	0x000b8973

000b89f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b89f0:	4770      	bx	lr
	...

000b89f4 <_Z17acquireWireBufferv>:
{
   b89f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b89f6:	2520      	movs	r5, #32
   b89f8:	2314      	movs	r3, #20
{
   b89fa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b89fc:	6003      	str	r3, [r0, #0]
   b89fe:	6085      	str	r5, [r0, #8]
   b8a00:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8a02:	4906      	ldr	r1, [pc, #24]	; (b8a1c <_Z17acquireWireBufferv+0x28>)
   b8a04:	4628      	mov	r0, r5
   b8a06:	f000 f82f 	bl	b8a68 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8a0a:	4904      	ldr	r1, [pc, #16]	; (b8a1c <_Z17acquireWireBufferv+0x28>)
	};
   b8a0c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8a0e:	4628      	mov	r0, r5
   b8a10:	f000 f82a 	bl	b8a68 <_ZnajRKSt9nothrow_t>
	};
   b8a14:	60e0      	str	r0, [r4, #12]
}
   b8a16:	4620      	mov	r0, r4
   b8a18:	bd38      	pop	{r3, r4, r5, pc}
   b8a1a:	bf00      	nop
   b8a1c:	000bbc38 	.word	0x000bbc38

000b8a20 <_Z19__fetch_global_Wirev>:
{
   b8a20:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8a22:	4d0e      	ldr	r5, [pc, #56]	; (b8a5c <_Z19__fetch_global_Wirev+0x3c>)
   b8a24:	7829      	ldrb	r1, [r5, #0]
   b8a26:	f3bf 8f5b 	dmb	ish
   b8a2a:	f011 0401 	ands.w	r4, r1, #1
{
   b8a2e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8a30:	d111      	bne.n	b8a56 <_Z19__fetch_global_Wirev+0x36>
   b8a32:	4628      	mov	r0, r5
   b8a34:	f7fc f8b1 	bl	b4b9a <__cxa_guard_acquire>
   b8a38:	b168      	cbz	r0, b8a56 <_Z19__fetch_global_Wirev+0x36>
   b8a3a:	a801      	add	r0, sp, #4
   b8a3c:	f7ff ffda 	bl	b89f4 <_Z17acquireWireBufferv>
   b8a40:	aa01      	add	r2, sp, #4
   b8a42:	4621      	mov	r1, r4
   b8a44:	4806      	ldr	r0, [pc, #24]	; (b8a60 <_Z19__fetch_global_Wirev+0x40>)
   b8a46:	f7ff fe43 	bl	b86d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8a4a:	4628      	mov	r0, r5
   b8a4c:	f7fc f8aa 	bl	b4ba4 <__cxa_guard_release>
   b8a50:	4804      	ldr	r0, [pc, #16]	; (b8a64 <_Z19__fetch_global_Wirev+0x44>)
   b8a52:	f000 fcf1 	bl	b9438 <atexit>
	return wire;
}
   b8a56:	4802      	ldr	r0, [pc, #8]	; (b8a60 <_Z19__fetch_global_Wirev+0x40>)
   b8a58:	b007      	add	sp, #28
   b8a5a:	bd30      	pop	{r4, r5, pc}
   b8a5c:	2003e748 	.word	0x2003e748
   b8a60:	2003e74c 	.word	0x2003e74c
   b8a64:	000b89f1 	.word	0x000b89f1

000b8a68 <_ZnajRKSt9nothrow_t>:
   b8a68:	f7fc b891 	b.w	b4b8e <_Znaj>

000b8a6c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   b8a6c:	68c3      	ldr	r3, [r0, #12]
   b8a6e:	689a      	ldr	r2, [r3, #8]
   b8a70:	60c2      	str	r2, [r0, #12]
   b8a72:	b510      	push	{r4, lr}
   b8a74:	b102      	cbz	r2, b8a78 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   b8a76:	6050      	str	r0, [r2, #4]
   b8a78:	6842      	ldr	r2, [r0, #4]
   b8a7a:	605a      	str	r2, [r3, #4]
   b8a7c:	680c      	ldr	r4, [r1, #0]
   b8a7e:	4284      	cmp	r4, r0
   b8a80:	d103      	bne.n	b8a8a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   b8a82:	600b      	str	r3, [r1, #0]
   b8a84:	6098      	str	r0, [r3, #8]
   b8a86:	6043      	str	r3, [r0, #4]
   b8a88:	bd10      	pop	{r4, pc}
   b8a8a:	6891      	ldr	r1, [r2, #8]
   b8a8c:	4281      	cmp	r1, r0
   b8a8e:	bf0c      	ite	eq
   b8a90:	6093      	streq	r3, [r2, #8]
   b8a92:	60d3      	strne	r3, [r2, #12]
   b8a94:	e7f6      	b.n	b8a84 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000b8a96 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   b8a96:	6883      	ldr	r3, [r0, #8]
   b8a98:	68da      	ldr	r2, [r3, #12]
   b8a9a:	6082      	str	r2, [r0, #8]
   b8a9c:	b510      	push	{r4, lr}
   b8a9e:	b102      	cbz	r2, b8aa2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   b8aa0:	6050      	str	r0, [r2, #4]
   b8aa2:	6842      	ldr	r2, [r0, #4]
   b8aa4:	605a      	str	r2, [r3, #4]
   b8aa6:	680c      	ldr	r4, [r1, #0]
   b8aa8:	4284      	cmp	r4, r0
   b8aaa:	d103      	bne.n	b8ab4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   b8aac:	600b      	str	r3, [r1, #0]
   b8aae:	60d8      	str	r0, [r3, #12]
   b8ab0:	6043      	str	r3, [r0, #4]
   b8ab2:	bd10      	pop	{r4, pc}
   b8ab4:	68d1      	ldr	r1, [r2, #12]
   b8ab6:	4281      	cmp	r1, r0
   b8ab8:	bf0c      	ite	eq
   b8aba:	60d3      	streq	r3, [r2, #12]
   b8abc:	6093      	strne	r3, [r2, #8]
   b8abe:	e7f6      	b.n	b8aae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000b8ac0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b8ac0:	68c3      	ldr	r3, [r0, #12]
   b8ac2:	b123      	cbz	r3, b8ace <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   b8ac4:	4618      	mov	r0, r3
   b8ac6:	689b      	ldr	r3, [r3, #8]
   b8ac8:	2b00      	cmp	r3, #0
   b8aca:	d1fb      	bne.n	b8ac4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   b8acc:	4770      	bx	lr
   b8ace:	6843      	ldr	r3, [r0, #4]
   b8ad0:	68da      	ldr	r2, [r3, #12]
   b8ad2:	4282      	cmp	r2, r0
   b8ad4:	d102      	bne.n	b8adc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   b8ad6:	4618      	mov	r0, r3
   b8ad8:	685b      	ldr	r3, [r3, #4]
   b8ada:	e7f9      	b.n	b8ad0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   b8adc:	68c2      	ldr	r2, [r0, #12]
   b8ade:	4293      	cmp	r3, r2
   b8ae0:	bf18      	it	ne
   b8ae2:	4618      	movne	r0, r3
   b8ae4:	4770      	bx	lr

000b8ae6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b8ae6:	7803      	ldrb	r3, [r0, #0]
   b8ae8:	b933      	cbnz	r3, b8af8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b8aea:	6843      	ldr	r3, [r0, #4]
   b8aec:	685b      	ldr	r3, [r3, #4]
   b8aee:	4283      	cmp	r3, r0
   b8af0:	d102      	bne.n	b8af8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   b8af2:	68db      	ldr	r3, [r3, #12]
   b8af4:	4618      	mov	r0, r3
   b8af6:	4770      	bx	lr
   b8af8:	6882      	ldr	r2, [r0, #8]
   b8afa:	b122      	cbz	r2, b8b06 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   b8afc:	4613      	mov	r3, r2
   b8afe:	68d2      	ldr	r2, [r2, #12]
   b8b00:	2a00      	cmp	r2, #0
   b8b02:	d1fb      	bne.n	b8afc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   b8b04:	e7f6      	b.n	b8af4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b8b06:	6843      	ldr	r3, [r0, #4]
   b8b08:	689a      	ldr	r2, [r3, #8]
   b8b0a:	4282      	cmp	r2, r0
   b8b0c:	d1f2      	bne.n	b8af4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   b8b0e:	4618      	mov	r0, r3
   b8b10:	685b      	ldr	r3, [r3, #4]
   b8b12:	e7f9      	b.n	b8b08 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000b8b14 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   b8b14:	f7ff bfd4 	b.w	b8ac0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000b8b18 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   b8b18:	f7ff bfe5 	b.w	b8ae6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000b8b1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   b8b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8b20:	461e      	mov	r6, r3
   b8b22:	f103 0804 	add.w	r8, r3, #4
   b8b26:	2300      	movs	r3, #0
   b8b28:	e9c1 3302 	strd	r3, r3, [r1, #8]
   b8b2c:	460c      	mov	r4, r1
   b8b2e:	604a      	str	r2, [r1, #4]
   b8b30:	700b      	strb	r3, [r1, #0]
   b8b32:	b300      	cbz	r0, b8b76 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   b8b34:	4296      	cmp	r6, r2
   b8b36:	6091      	str	r1, [r2, #8]
   b8b38:	d118      	bne.n	b8b6c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   b8b3a:	6071      	str	r1, [r6, #4]
   b8b3c:	60f4      	str	r4, [r6, #12]
   b8b3e:	2701      	movs	r7, #1
   b8b40:	f04f 0900 	mov.w	r9, #0
   b8b44:	6873      	ldr	r3, [r6, #4]
   b8b46:	42a3      	cmp	r3, r4
   b8b48:	d03f      	beq.n	b8bca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8b4a:	6860      	ldr	r0, [r4, #4]
   b8b4c:	7802      	ldrb	r2, [r0, #0]
   b8b4e:	2a00      	cmp	r2, #0
   b8b50:	d13b      	bne.n	b8bca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   b8b52:	6845      	ldr	r5, [r0, #4]
   b8b54:	68ab      	ldr	r3, [r5, #8]
   b8b56:	4298      	cmp	r0, r3
   b8b58:	d123      	bne.n	b8ba2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   b8b5a:	68eb      	ldr	r3, [r5, #12]
   b8b5c:	b183      	cbz	r3, b8b80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8b5e:	781a      	ldrb	r2, [r3, #0]
   b8b60:	b972      	cbnz	r2, b8b80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   b8b62:	7007      	strb	r7, [r0, #0]
   b8b64:	701f      	strb	r7, [r3, #0]
   b8b66:	702a      	strb	r2, [r5, #0]
   b8b68:	462c      	mov	r4, r5
   b8b6a:	e7eb      	b.n	b8b44 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   b8b6c:	68b3      	ldr	r3, [r6, #8]
   b8b6e:	4293      	cmp	r3, r2
   b8b70:	d1e5      	bne.n	b8b3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b72:	60b1      	str	r1, [r6, #8]
   b8b74:	e7e3      	b.n	b8b3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b76:	60d1      	str	r1, [r2, #12]
   b8b78:	68f3      	ldr	r3, [r6, #12]
   b8b7a:	4293      	cmp	r3, r2
   b8b7c:	d1df      	bne.n	b8b3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   b8b7e:	e7dd      	b.n	b8b3c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   b8b80:	68c3      	ldr	r3, [r0, #12]
   b8b82:	42a3      	cmp	r3, r4
   b8b84:	d103      	bne.n	b8b8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   b8b86:	4641      	mov	r1, r8
   b8b88:	f7ff ff70 	bl	b8a6c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8b8c:	4604      	mov	r4, r0
   b8b8e:	6863      	ldr	r3, [r4, #4]
   b8b90:	4641      	mov	r1, r8
   b8b92:	701f      	strb	r7, [r3, #0]
   b8b94:	4628      	mov	r0, r5
   b8b96:	f885 9000 	strb.w	r9, [r5]
   b8b9a:	f7ff ff7c 	bl	b8a96 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8b9e:	4625      	mov	r5, r4
   b8ba0:	e7e2      	b.n	b8b68 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   b8ba2:	b113      	cbz	r3, b8baa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   b8ba4:	781a      	ldrb	r2, [r3, #0]
   b8ba6:	2a00      	cmp	r2, #0
   b8ba8:	d0db      	beq.n	b8b62 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   b8baa:	6883      	ldr	r3, [r0, #8]
   b8bac:	42a3      	cmp	r3, r4
   b8bae:	d103      	bne.n	b8bb8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   b8bb0:	4641      	mov	r1, r8
   b8bb2:	f7ff ff70 	bl	b8a96 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   b8bb6:	4604      	mov	r4, r0
   b8bb8:	6863      	ldr	r3, [r4, #4]
   b8bba:	4641      	mov	r1, r8
   b8bbc:	701f      	strb	r7, [r3, #0]
   b8bbe:	4628      	mov	r0, r5
   b8bc0:	f885 9000 	strb.w	r9, [r5]
   b8bc4:	f7ff ff52 	bl	b8a6c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   b8bc8:	e7e9      	b.n	b8b9e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   b8bca:	2201      	movs	r2, #1
   b8bcc:	701a      	strb	r2, [r3, #0]
   b8bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8bd2 <_ZSt17__throw_bad_allocv>:
   b8bd2:	b508      	push	{r3, lr}
   b8bd4:	f7fd fb94 	bl	b6300 <abort>

000b8bd8 <_ZSt19__throw_logic_errorPKc>:
   b8bd8:	b508      	push	{r3, lr}
   b8bda:	f7fd fb91 	bl	b6300 <abort>

000b8bde <_ZSt24__throw_invalid_argumentPKc>:
   b8bde:	b508      	push	{r3, lr}
   b8be0:	f7fd fb8e 	bl	b6300 <abort>

000b8be4 <_ZSt20__throw_length_errorPKc>:
   b8be4:	b508      	push	{r3, lr}
   b8be6:	f7fd fb8b 	bl	b6300 <abort>

000b8bea <_ZSt20__throw_out_of_rangePKc>:
   b8bea:	b508      	push	{r3, lr}
   b8bec:	f7fd fb88 	bl	b6300 <abort>

000b8bf0 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b8bf0:	b40f      	push	{r0, r1, r2, r3}
   b8bf2:	b580      	push	{r7, lr}
   b8bf4:	b084      	sub	sp, #16
   b8bf6:	af00      	add	r7, sp, #0
   b8bf8:	f107 0418 	add.w	r4, r7, #24
   b8bfc:	f854 2b04 	ldr.w	r2, [r4], #4
   b8c00:	607a      	str	r2, [r7, #4]
   b8c02:	4610      	mov	r0, r2
   b8c04:	f7fb ff66 	bl	b4ad4 <strlen>
   b8c08:	f200 2307 	addw	r3, r0, #519	; 0x207
   b8c0c:	f023 0307 	bic.w	r3, r3, #7
   b8c10:	ebad 0d03 	sub.w	sp, sp, r3
   b8c14:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b8c18:	687a      	ldr	r2, [r7, #4]
   b8c1a:	60fc      	str	r4, [r7, #12]
   b8c1c:	4623      	mov	r3, r4
   b8c1e:	4668      	mov	r0, sp
   b8c20:	f000 f85e 	bl	b8ce0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b8c24:	f7fd fb6c 	bl	b6300 <abort>

000b8c28 <_ZSt25__throw_bad_function_callv>:
   b8c28:	b508      	push	{r3, lr}
   b8c2a:	f7fd fb69 	bl	b6300 <abort>
	...

000b8c30 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8c30:	4901      	ldr	r1, [pc, #4]	; (b8c38 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8c32:	f000 bbc5 	b.w	b93c0 <_ZNKSt9type_infoeqERKS_>
   b8c36:	bf00      	nop
   b8c38:	000bbc54 	.word	0x000bbc54

000b8c3c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b8c3c:	b580      	push	{r7, lr}
   b8c3e:	b09c      	sub	sp, #112	; 0x70
   b8c40:	4606      	mov	r6, r0
   b8c42:	af00      	add	r7, sp, #0
   b8c44:	460c      	mov	r4, r1
   b8c46:	1ba4      	subs	r4, r4, r6
   b8c48:	490e      	ldr	r1, [pc, #56]	; (b8c84 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b8c4a:	2269      	movs	r2, #105	; 0x69
   b8c4c:	1d38      	adds	r0, r7, #4
   b8c4e:	f000 fc09 	bl	b9464 <memcpy>
   b8c52:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b8c56:	f023 0307 	bic.w	r3, r3, #7
   b8c5a:	ebad 0d03 	sub.w	sp, sp, r3
   b8c5e:	466d      	mov	r5, sp
   b8c60:	2268      	movs	r2, #104	; 0x68
   b8c62:	1d39      	adds	r1, r7, #4
   b8c64:	4628      	mov	r0, r5
   b8c66:	f000 fbfd 	bl	b9464 <memcpy>
   b8c6a:	4622      	mov	r2, r4
   b8c6c:	4631      	mov	r1, r6
   b8c6e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b8c72:	442c      	add	r4, r5
   b8c74:	f000 fbf6 	bl	b9464 <memcpy>
   b8c78:	2300      	movs	r3, #0
   b8c7a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b8c7e:	4628      	mov	r0, r5
   b8c80:	f7ff ffaa 	bl	b8bd8 <_ZSt19__throw_logic_errorPKc>
   b8c84:	000bbc5c 	.word	0x000bbc5c

000b8c88 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b8c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c8c:	af00      	add	r7, sp, #0
   b8c8e:	b084      	sub	sp, #16
   b8c90:	466d      	mov	r5, sp
   b8c92:	f105 040c 	add.w	r4, r5, #12
   b8c96:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8cdc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b8c9a:	4623      	mov	r3, r4
   b8c9c:	f04f 0c0a 	mov.w	ip, #10
   b8ca0:	fbb2 f6fc 	udiv	r6, r2, ip
   b8ca4:	fb0c 2e16 	mls	lr, ip, r6, r2
   b8ca8:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b8cac:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b8cb0:	4696      	mov	lr, r2
   b8cb2:	f1be 0f09 	cmp.w	lr, #9
   b8cb6:	4632      	mov	r2, r6
   b8cb8:	d8f2      	bhi.n	b8ca0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b8cba:	1ae4      	subs	r4, r4, r3
   b8cbc:	428c      	cmp	r4, r1
   b8cbe:	d809      	bhi.n	b8cd4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b8cc0:	f1c4 030c 	rsb	r3, r4, #12
   b8cc4:	4622      	mov	r2, r4
   b8cc6:	18e9      	adds	r1, r5, r3
   b8cc8:	f000 fbcc 	bl	b9464 <memcpy>
   b8ccc:	4620      	mov	r0, r4
   b8cce:	46bd      	mov	sp, r7
   b8cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8cd4:	f04f 34ff 	mov.w	r4, #4294967295
   b8cd8:	e7f8      	b.n	b8ccc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b8cda:	bf00      	nop
   b8cdc:	000bbcc5 	.word	0x000bbcc5

000b8ce0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b8ce0:	3901      	subs	r1, #1
   b8ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8ce6:	4607      	mov	r7, r0
   b8ce8:	4615      	mov	r5, r2
   b8cea:	eb00 0801 	add.w	r8, r0, r1
   b8cee:	4604      	mov	r4, r0
   b8cf0:	782a      	ldrb	r2, [r5, #0]
   b8cf2:	b392      	cbz	r2, b8d5a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b8cf4:	4544      	cmp	r4, r8
   b8cf6:	d22a      	bcs.n	b8d4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8cf8:	2a25      	cmp	r2, #37	; 0x25
   b8cfa:	d107      	bne.n	b8d0c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8cfc:	786a      	ldrb	r2, [r5, #1]
   b8cfe:	2a73      	cmp	r2, #115	; 0x73
   b8d00:	d009      	beq.n	b8d16 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b8d02:	2a7a      	cmp	r2, #122	; 0x7a
   b8d04:	d012      	beq.n	b8d2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b8d06:	2a25      	cmp	r2, #37	; 0x25
   b8d08:	d100      	bne.n	b8d0c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8d0a:	3501      	adds	r5, #1
   b8d0c:	f815 2b01 	ldrb.w	r2, [r5], #1
   b8d10:	f804 2b01 	strb.w	r2, [r4], #1
   b8d14:	e7ec      	b.n	b8cf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8d16:	f853 2b04 	ldr.w	r2, [r3], #4
   b8d1a:	3a01      	subs	r2, #1
   b8d1c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b8d20:	b1c9      	cbz	r1, b8d56 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b8d22:	4544      	cmp	r4, r8
   b8d24:	d013      	beq.n	b8d4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8d26:	f804 1b01 	strb.w	r1, [r4], #1
   b8d2a:	e7f7      	b.n	b8d1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b8d2c:	78aa      	ldrb	r2, [r5, #2]
   b8d2e:	2a75      	cmp	r2, #117	; 0x75
   b8d30:	d1ec      	bne.n	b8d0c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8d32:	461e      	mov	r6, r3
   b8d34:	eba8 0104 	sub.w	r1, r8, r4
   b8d38:	f856 2b04 	ldr.w	r2, [r6], #4
   b8d3c:	4620      	mov	r0, r4
   b8d3e:	f7ff ffa3 	bl	b8c88 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b8d42:	2800      	cmp	r0, #0
   b8d44:	dd03      	ble.n	b8d4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8d46:	4404      	add	r4, r0
   b8d48:	3503      	adds	r5, #3
   b8d4a:	4633      	mov	r3, r6
   b8d4c:	e7d0      	b.n	b8cf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8d4e:	4621      	mov	r1, r4
   b8d50:	4638      	mov	r0, r7
   b8d52:	f7ff ff73 	bl	b8c3c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b8d56:	3502      	adds	r5, #2
   b8d58:	e7ca      	b.n	b8cf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8d5a:	7022      	strb	r2, [r4, #0]
   b8d5c:	1be0      	subs	r0, r4, r7
   b8d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8d62 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b8d62:	b10a      	cbz	r2, b8d68 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b8d64:	f000 bb7e 	b.w	b9464 <memcpy>
   b8d68:	4770      	bx	lr

000b8d6a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b8d6a:	b10a      	cbz	r2, b8d70 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b8d6c:	f000 bb6a 	b.w	b9444 <memcmp>
   b8d70:	4610      	mov	r0, r2
   b8d72:	4770      	bx	lr

000b8d74 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b8d74:	4613      	mov	r3, r2
   b8d76:	460a      	mov	r2, r1
   b8d78:	b111      	cbz	r1, b8d80 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b8d7a:	7819      	ldrb	r1, [r3, #0]
   b8d7c:	f7fb be50 	b.w	b4a20 <memchr>
   b8d80:	4608      	mov	r0, r1
   b8d82:	4770      	bx	lr

000b8d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b8d84:	b508      	push	{r3, lr}
   b8d86:	680b      	ldr	r3, [r1, #0]
   b8d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b8d8c:	d302      	bcc.n	b8d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b8d8e:	480d      	ldr	r0, [pc, #52]	; (b8dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b8d90:	f7ff ff28 	bl	b8be4 <_ZSt20__throw_length_errorPKc>
   b8d94:	4293      	cmp	r3, r2
   b8d96:	d90b      	bls.n	b8db0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8d98:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b8d9c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b8da0:	d206      	bcs.n	b8db0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8da2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b8da6:	bf2a      	itet	cs
   b8da8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b8dac:	6008      	strcc	r0, [r1, #0]
   b8dae:	600b      	strcs	r3, [r1, #0]
   b8db0:	6808      	ldr	r0, [r1, #0]
   b8db2:	3001      	adds	r0, #1
   b8db4:	d501      	bpl.n	b8dba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b8db6:	f7ff ff0c 	bl	b8bd2 <_ZSt17__throw_bad_allocv>
   b8dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b8dbe:	f7fb bee4 	b.w	b4b8a <_Znwj>
   b8dc2:	bf00      	nop
   b8dc4:	000bbcd0 	.word	0x000bbcd0

000b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b8dc8:	f850 3b08 	ldr.w	r3, [r0], #8
   b8dcc:	4283      	cmp	r3, r0
   b8dce:	d002      	beq.n	b8dd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b8dd0:	4618      	mov	r0, r3
   b8dd2:	f7fb bede 	b.w	b4b92 <_ZdlPv>
   b8dd6:	4770      	bx	lr

000b8dd8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b8dd8:	b508      	push	{r3, lr}
   b8dda:	4603      	mov	r3, r0
   b8ddc:	4608      	mov	r0, r1
   b8dde:	685b      	ldr	r3, [r3, #4]
   b8de0:	4298      	cmp	r0, r3
   b8de2:	4611      	mov	r1, r2
   b8de4:	d903      	bls.n	b8dee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b8de6:	4602      	mov	r2, r0
   b8de8:	4801      	ldr	r0, [pc, #4]	; (b8df0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b8dea:	f7ff ff01 	bl	b8bf0 <_ZSt24__throw_out_of_range_fmtPKcz>
   b8dee:	bd08      	pop	{r3, pc}
   b8df0:	000bbce8 	.word	0x000bbce8

000b8df4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   b8df4:	6840      	ldr	r0, [r0, #4]
   b8df6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   b8dfa:	3901      	subs	r1, #1
   b8dfc:	1a09      	subs	r1, r1, r0
   b8dfe:	4291      	cmp	r1, r2
   b8e00:	b508      	push	{r3, lr}
   b8e02:	d202      	bcs.n	b8e0a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   b8e04:	4618      	mov	r0, r3
   b8e06:	f7ff feed 	bl	b8be4 <_ZSt20__throw_length_errorPKc>
   b8e0a:	bd08      	pop	{r3, pc}

000b8e0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   b8e0c:	6803      	ldr	r3, [r0, #0]
   b8e0e:	428b      	cmp	r3, r1
   b8e10:	d806      	bhi.n	b8e20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   b8e12:	6840      	ldr	r0, [r0, #4]
   b8e14:	4418      	add	r0, r3
   b8e16:	4281      	cmp	r1, r0
   b8e18:	bf94      	ite	ls
   b8e1a:	2000      	movls	r0, #0
   b8e1c:	2001      	movhi	r0, #1
   b8e1e:	4770      	bx	lr
   b8e20:	2001      	movs	r0, #1
   b8e22:	4770      	bx	lr

000b8e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b8e24:	2a01      	cmp	r2, #1
   b8e26:	b410      	push	{r4}
   b8e28:	d104      	bne.n	b8e34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b8e2a:	780a      	ldrb	r2, [r1, #0]
   b8e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8e30:	7002      	strb	r2, [r0, #0]
   b8e32:	4770      	bx	lr
   b8e34:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8e38:	f7ff bf93 	b.w	b8d62 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b8e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b8e3c:	2a01      	cmp	r2, #1
   b8e3e:	b430      	push	{r4, r5}
   b8e40:	d103      	bne.n	b8e4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b8e42:	780b      	ldrb	r3, [r1, #0]
   b8e44:	7003      	strb	r3, [r0, #0]
   b8e46:	bc30      	pop	{r4, r5}
   b8e48:	4770      	bx	lr
   b8e4a:	2a00      	cmp	r2, #0
   b8e4c:	d0fb      	beq.n	b8e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b8e4e:	bc30      	pop	{r4, r5}
   b8e50:	f000 bb16 	b.w	b9480 <memmove>

000b8e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
   b8e54:	460b      	mov	r3, r1
   b8e56:	2b01      	cmp	r3, #1
   b8e58:	b410      	push	{r4}
   b8e5a:	4611      	mov	r1, r2
   b8e5c:	4604      	mov	r4, r0
   b8e5e:	d103      	bne.n	b8e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
   b8e60:	7022      	strb	r2, [r4, #0]
   b8e62:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8e66:	4770      	bx	lr
   b8e68:	2b00      	cmp	r3, #0
   b8e6a:	d0fa      	beq.n	b8e62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
   b8e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8e70:	461a      	mov	r2, r3
   b8e72:	f000 bb1f 	b.w	b94b4 <memset>

000b8e76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
   b8e76:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8e78:	290f      	cmp	r1, #15
   b8e7a:	4604      	mov	r4, r0
   b8e7c:	9101      	str	r1, [sp, #4]
   b8e7e:	4615      	mov	r5, r2
   b8e80:	d906      	bls.n	b8e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
   b8e82:	2200      	movs	r2, #0
   b8e84:	a901      	add	r1, sp, #4
   b8e86:	f7ff ff7d 	bl	b8d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b8e8a:	9b01      	ldr	r3, [sp, #4]
   b8e8c:	6020      	str	r0, [r4, #0]
   b8e8e:	60a3      	str	r3, [r4, #8]
   b8e90:	9901      	ldr	r1, [sp, #4]
   b8e92:	b119      	cbz	r1, b8e9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
   b8e94:	6820      	ldr	r0, [r4, #0]
   b8e96:	462a      	mov	r2, r5
   b8e98:	f7ff ffdc 	bl	b8e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
   b8e9c:	9b01      	ldr	r3, [sp, #4]
   b8e9e:	6822      	ldr	r2, [r4, #0]
   b8ea0:	6063      	str	r3, [r4, #4]
   b8ea2:	2100      	movs	r1, #0
   b8ea4:	54d1      	strb	r1, [r2, r3]
   b8ea6:	b003      	add	sp, #12
   b8ea8:	bd30      	pop	{r4, r5, pc}

000b8eaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b8eaa:	b508      	push	{r3, lr}
   b8eac:	1a52      	subs	r2, r2, r1
   b8eae:	f7ff ffb9 	bl	b8e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8eb2:	bd08      	pop	{r3, pc}

000b8eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b8eb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8eb8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b8eba:	461f      	mov	r7, r3
   b8ebc:	6843      	ldr	r3, [r0, #4]
   b8ebe:	eb01 0802 	add.w	r8, r1, r2
   b8ec2:	1ab2      	subs	r2, r6, r2
   b8ec4:	441a      	add	r2, r3
   b8ec6:	eba3 0908 	sub.w	r9, r3, r8
   b8eca:	4603      	mov	r3, r0
   b8ecc:	9201      	str	r2, [sp, #4]
   b8ece:	f853 2b08 	ldr.w	r2, [r3], #8
   b8ed2:	429a      	cmp	r2, r3
   b8ed4:	bf18      	it	ne
   b8ed6:	6882      	ldrne	r2, [r0, #8]
   b8ed8:	460d      	mov	r5, r1
   b8eda:	bf08      	it	eq
   b8edc:	220f      	moveq	r2, #15
   b8ede:	a901      	add	r1, sp, #4
   b8ee0:	4604      	mov	r4, r0
   b8ee2:	f7ff ff4f 	bl	b8d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b8ee6:	4682      	mov	sl, r0
   b8ee8:	b11d      	cbz	r5, b8ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b8eea:	6821      	ldr	r1, [r4, #0]
   b8eec:	462a      	mov	r2, r5
   b8eee:	f7ff ff99 	bl	b8e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8ef2:	b137      	cbz	r7, b8f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b8ef4:	b12e      	cbz	r6, b8f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b8ef6:	4632      	mov	r2, r6
   b8ef8:	4639      	mov	r1, r7
   b8efa:	eb0a 0005 	add.w	r0, sl, r5
   b8efe:	f7ff ff91 	bl	b8e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8f02:	f1b9 0f00 	cmp.w	r9, #0
   b8f06:	d007      	beq.n	b8f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b8f08:	6821      	ldr	r1, [r4, #0]
   b8f0a:	4435      	add	r5, r6
   b8f0c:	464a      	mov	r2, r9
   b8f0e:	4441      	add	r1, r8
   b8f10:	eb0a 0005 	add.w	r0, sl, r5
   b8f14:	f7ff ff86 	bl	b8e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8f18:	4620      	mov	r0, r4
   b8f1a:	f7ff ff55 	bl	b8dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b8f1e:	9b01      	ldr	r3, [sp, #4]
   b8f20:	f8c4 a000 	str.w	sl, [r4]
   b8f24:	60a3      	str	r3, [r4, #8]
   b8f26:	b002      	add	sp, #8
   b8f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
   b8f2c:	b538      	push	{r3, r4, r5, lr}
   b8f2e:	4604      	mov	r4, r0
   b8f30:	4615      	mov	r5, r2
   b8f32:	4608      	mov	r0, r1
   b8f34:	4411      	add	r1, r2
   b8f36:	6862      	ldr	r2, [r4, #4]
   b8f38:	1a52      	subs	r2, r2, r1
   b8f3a:	d005      	beq.n	b8f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b8f3c:	b125      	cbz	r5, b8f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b8f3e:	6823      	ldr	r3, [r4, #0]
   b8f40:	4419      	add	r1, r3
   b8f42:	4418      	add	r0, r3
   b8f44:	f7ff ff7a 	bl	b8e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8f48:	6862      	ldr	r2, [r4, #4]
   b8f4a:	6823      	ldr	r3, [r4, #0]
   b8f4c:	1b55      	subs	r5, r2, r5
   b8f4e:	2200      	movs	r2, #0
   b8f50:	6065      	str	r5, [r4, #4]
   b8f52:	555a      	strb	r2, [r3, r5]
   b8f54:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   b8f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b8f5e:	4614      	mov	r4, r2
   b8f60:	4680      	mov	r8, r0
   b8f62:	462a      	mov	r2, r5
   b8f64:	4689      	mov	r9, r1
   b8f66:	461f      	mov	r7, r3
   b8f68:	4621      	mov	r1, r4
   b8f6a:	4b39      	ldr	r3, [pc, #228]	; (b9050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   b8f6c:	f7ff ff42 	bl	b8df4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   b8f70:	4642      	mov	r2, r8
   b8f72:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8f76:	f852 6b08 	ldr.w	r6, [r2], #8
   b8f7a:	4296      	cmp	r6, r2
   b8f7c:	bf18      	it	ne
   b8f7e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   b8f82:	eba5 0b04 	sub.w	fp, r5, r4
   b8f86:	eb03 0a0b 	add.w	sl, r3, fp
   b8f8a:	bf08      	it	eq
   b8f8c:	220f      	moveq	r2, #15
   b8f8e:	4552      	cmp	r2, sl
   b8f90:	d351      	bcc.n	b9036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   b8f92:	444e      	add	r6, r9
   b8f94:	4639      	mov	r1, r7
   b8f96:	44a1      	add	r9, r4
   b8f98:	4640      	mov	r0, r8
   b8f9a:	eba3 0909 	sub.w	r9, r3, r9
   b8f9e:	f7ff ff35 	bl	b8e0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   b8fa2:	b180      	cbz	r0, b8fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   b8fa4:	f1b9 0f00 	cmp.w	r9, #0
   b8fa8:	d006      	beq.n	b8fb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8faa:	42ac      	cmp	r4, r5
   b8fac:	d004      	beq.n	b8fb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8fae:	464a      	mov	r2, r9
   b8fb0:	1931      	adds	r1, r6, r4
   b8fb2:	1970      	adds	r0, r6, r5
   b8fb4:	f7ff ff42 	bl	b8e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8fb8:	b315      	cbz	r5, b9000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8fba:	462a      	mov	r2, r5
   b8fbc:	4639      	mov	r1, r7
   b8fbe:	4630      	mov	r0, r6
   b8fc0:	f7ff ff30 	bl	b8e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8fc4:	e01c      	b.n	b9000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8fc6:	b135      	cbz	r5, b8fd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   b8fc8:	42ac      	cmp	r4, r5
   b8fca:	d33c      	bcc.n	b9046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   b8fcc:	462a      	mov	r2, r5
   b8fce:	4639      	mov	r1, r7
   b8fd0:	4630      	mov	r0, r6
   b8fd2:	f7ff ff33 	bl	b8e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8fd6:	f1b9 0f00 	cmp.w	r9, #0
   b8fda:	d011      	beq.n	b9000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8fdc:	42ac      	cmp	r4, r5
   b8fde:	d00f      	beq.n	b9000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8fe0:	464a      	mov	r2, r9
   b8fe2:	1931      	adds	r1, r6, r4
   b8fe4:	1970      	adds	r0, r6, r5
   b8fe6:	f7ff ff29 	bl	b8e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8fea:	42ac      	cmp	r4, r5
   b8fec:	d208      	bcs.n	b9000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8fee:	4434      	add	r4, r6
   b8ff0:	197b      	adds	r3, r7, r5
   b8ff2:	429c      	cmp	r4, r3
   b8ff4:	d30f      	bcc.n	b9016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   b8ff6:	462a      	mov	r2, r5
   b8ff8:	4639      	mov	r1, r7
   b8ffa:	4630      	mov	r0, r6
   b8ffc:	f7ff ff1e 	bl	b8e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9000:	f8d8 3000 	ldr.w	r3, [r8]
   b9004:	f8c8 a004 	str.w	sl, [r8, #4]
   b9008:	2200      	movs	r2, #0
   b900a:	4640      	mov	r0, r8
   b900c:	f803 200a 	strb.w	r2, [r3, sl]
   b9010:	b003      	add	sp, #12
   b9012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9016:	42bc      	cmp	r4, r7
   b9018:	d803      	bhi.n	b9022 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   b901a:	462a      	mov	r2, r5
   b901c:	eb07 010b 	add.w	r1, r7, fp
   b9020:	e7cd      	b.n	b8fbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   b9022:	1be4      	subs	r4, r4, r7
   b9024:	4622      	mov	r2, r4
   b9026:	4639      	mov	r1, r7
   b9028:	4630      	mov	r0, r6
   b902a:	f7ff ff07 	bl	b8e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b902e:	1b2a      	subs	r2, r5, r4
   b9030:	1971      	adds	r1, r6, r5
   b9032:	1930      	adds	r0, r6, r4
   b9034:	e7c4      	b.n	b8fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   b9036:	9500      	str	r5, [sp, #0]
   b9038:	463b      	mov	r3, r7
   b903a:	4622      	mov	r2, r4
   b903c:	4649      	mov	r1, r9
   b903e:	4640      	mov	r0, r8
   b9040:	f7ff ff38 	bl	b8eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b9044:	e7dc      	b.n	b9000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9046:	f1b9 0f00 	cmp.w	r9, #0
   b904a:	d0d0      	beq.n	b8fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   b904c:	e7c8      	b.n	b8fe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   b904e:	bf00      	nop
   b9050:	000bbd1f 	.word	0x000bbd1f

000b9054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
   b9054:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9056:	4604      	mov	r4, r0
   b9058:	4623      	mov	r3, r4
   b905a:	6840      	ldr	r0, [r0, #4]
   b905c:	f853 6b08 	ldr.w	r6, [r3], #8
   b9060:	429e      	cmp	r6, r3
   b9062:	bf18      	it	ne
   b9064:	68a3      	ldrne	r3, [r4, #8]
   b9066:	eb00 0502 	add.w	r5, r0, r2
   b906a:	bf08      	it	eq
   b906c:	230f      	moveq	r3, #15
   b906e:	429d      	cmp	r5, r3
   b9070:	d80a      	bhi.n	b9088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
   b9072:	b112      	cbz	r2, b907a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
   b9074:	4430      	add	r0, r6
   b9076:	f7ff fed5 	bl	b8e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b907a:	6823      	ldr	r3, [r4, #0]
   b907c:	6065      	str	r5, [r4, #4]
   b907e:	2200      	movs	r2, #0
   b9080:	4620      	mov	r0, r4
   b9082:	555a      	strb	r2, [r3, r5]
   b9084:	b002      	add	sp, #8
   b9086:	bd70      	pop	{r4, r5, r6, pc}
   b9088:	9200      	str	r2, [sp, #0]
   b908a:	460b      	mov	r3, r1
   b908c:	2200      	movs	r2, #0
   b908e:	4601      	mov	r1, r0
   b9090:	4620      	mov	r0, r4
   b9092:	f7ff ff0f 	bl	b8eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b9096:	e7f0      	b.n	b907a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

000b9098 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b9098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b909c:	460e      	mov	r6, r1
   b909e:	461d      	mov	r5, r3
   b90a0:	6841      	ldr	r1, [r0, #4]
   b90a2:	b923      	cbnz	r3, b90ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b90a4:	4291      	cmp	r1, r2
   b90a6:	d221      	bcs.n	b90ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b90a8:	f04f 32ff 	mov.w	r2, #4294967295
   b90ac:	e01e      	b.n	b90ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b90ae:	4291      	cmp	r1, r2
   b90b0:	d9fa      	bls.n	b90a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b90b2:	f8d0 8000 	ldr.w	r8, [r0]
   b90b6:	7833      	ldrb	r3, [r6, #0]
   b90b8:	f88d 3007 	strb.w	r3, [sp, #7]
   b90bc:	eb08 0701 	add.w	r7, r8, r1
   b90c0:	eb08 0002 	add.w	r0, r8, r2
   b90c4:	1a89      	subs	r1, r1, r2
   b90c6:	f1c5 0901 	rsb	r9, r5, #1
   b90ca:	42a9      	cmp	r1, r5
   b90cc:	d3ec      	bcc.n	b90a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b90ce:	f10d 0207 	add.w	r2, sp, #7
   b90d2:	4449      	add	r1, r9
   b90d4:	f7ff fe4e 	bl	b8d74 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b90d8:	4604      	mov	r4, r0
   b90da:	2800      	cmp	r0, #0
   b90dc:	d0e4      	beq.n	b90a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b90de:	462a      	mov	r2, r5
   b90e0:	4631      	mov	r1, r6
   b90e2:	f7ff fe42 	bl	b8d6a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b90e6:	b928      	cbnz	r0, b90f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b90e8:	eba4 0208 	sub.w	r2, r4, r8
   b90ec:	4610      	mov	r0, r2
   b90ee:	b003      	add	sp, #12
   b90f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b90f4:	1c60      	adds	r0, r4, #1
   b90f6:	1a39      	subs	r1, r7, r0
   b90f8:	e7e7      	b.n	b90ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b90fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b90fa:	b513      	push	{r0, r1, r4, lr}
   b90fc:	4604      	mov	r4, r0
   b90fe:	4608      	mov	r0, r1
   b9100:	9201      	str	r2, [sp, #4]
   b9102:	9100      	str	r1, [sp, #0]
   b9104:	f7fb fce6 	bl	b4ad4 <strlen>
   b9108:	e9dd 1200 	ldrd	r1, r2, [sp]
   b910c:	4603      	mov	r3, r0
   b910e:	4620      	mov	r0, r4
   b9110:	f7ff ffc2 	bl	b9098 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b9114:	b002      	add	sp, #8
   b9116:	bd10      	pop	{r4, pc}

000b9118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   b9118:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b911a:	4604      	mov	r4, r0
   b911c:	4616      	mov	r6, r2
   b911e:	460d      	mov	r5, r1
   b9120:	b919      	cbnz	r1, b912a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b9122:	b112      	cbz	r2, b912a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b9124:	480d      	ldr	r0, [pc, #52]	; (b915c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   b9126:	f7ff fd57 	bl	b8bd8 <_ZSt19__throw_logic_errorPKc>
   b912a:	1b73      	subs	r3, r6, r5
   b912c:	2b0f      	cmp	r3, #15
   b912e:	9301      	str	r3, [sp, #4]
   b9130:	d907      	bls.n	b9142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   b9132:	2200      	movs	r2, #0
   b9134:	a901      	add	r1, sp, #4
   b9136:	4620      	mov	r0, r4
   b9138:	f7ff fe24 	bl	b8d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b913c:	9b01      	ldr	r3, [sp, #4]
   b913e:	6020      	str	r0, [r4, #0]
   b9140:	60a3      	str	r3, [r4, #8]
   b9142:	4632      	mov	r2, r6
   b9144:	4629      	mov	r1, r5
   b9146:	6820      	ldr	r0, [r4, #0]
   b9148:	f7ff feaf 	bl	b8eaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   b914c:	9b01      	ldr	r3, [sp, #4]
   b914e:	6822      	ldr	r2, [r4, #0]
   b9150:	6063      	str	r3, [r4, #4]
   b9152:	2100      	movs	r1, #0
   b9154:	54d1      	strb	r1, [r2, r3]
   b9156:	b002      	add	sp, #8
   b9158:	bd70      	pop	{r4, r5, r6, pc}
   b915a:	bf00      	nop
   b915c:	000bb7e5 	.word	0x000bb7e5

000b9160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   b9160:	b508      	push	{r3, lr}
   b9162:	f04f 0300 	mov.w	r3, #0
   b9166:	f7ff ffd7 	bl	b9118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   b916a:	bd08      	pop	{r3, pc}

000b916c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   b916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9170:	460d      	mov	r5, r1
   b9172:	4617      	mov	r7, r2
   b9174:	4698      	mov	r8, r3
   b9176:	f100 0308 	add.w	r3, r0, #8
   b917a:	4604      	mov	r4, r0
   b917c:	6003      	str	r3, [r0, #0]
   b917e:	4639      	mov	r1, r7
   b9180:	4a09      	ldr	r2, [pc, #36]	; (b91a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   b9182:	4628      	mov	r0, r5
   b9184:	f7ff fe28 	bl	b8dd8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b9188:	682e      	ldr	r6, [r5, #0]
   b918a:	686a      	ldr	r2, [r5, #4]
   b918c:	1831      	adds	r1, r6, r0
   b918e:	1bd2      	subs	r2, r2, r7
   b9190:	4620      	mov	r0, r4
   b9192:	4542      	cmp	r2, r8
   b9194:	bf94      	ite	ls
   b9196:	188a      	addls	r2, r1, r2
   b9198:	eb01 0208 	addhi.w	r2, r1, r8
   b919c:	f7ff ffe0 	bl	b9160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   b91a0:	4620      	mov	r0, r4
   b91a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b91a6:	bf00      	nop
   b91a8:	000bbd38 	.word	0x000bbd38

000b91ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   b91ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b91ae:	460d      	mov	r5, r1
   b91b0:	4604      	mov	r4, r0
   b91b2:	4611      	mov	r1, r2
   b91b4:	4628      	mov	r0, r5
   b91b6:	4a06      	ldr	r2, [pc, #24]	; (b91d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   b91b8:	9301      	str	r3, [sp, #4]
   b91ba:	f7ff fe0d 	bl	b8dd8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b91be:	9b01      	ldr	r3, [sp, #4]
   b91c0:	4602      	mov	r2, r0
   b91c2:	4629      	mov	r1, r5
   b91c4:	4620      	mov	r0, r4
   b91c6:	f7ff ffd1 	bl	b916c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   b91ca:	4620      	mov	r0, r4
   b91cc:	b003      	add	sp, #12
   b91ce:	bd30      	pop	{r4, r5, pc}
   b91d0:	000bbd53 	.word	0x000bbd53

000b91d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b91d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b91d6:	2400      	movs	r4, #0
   b91d8:	2310      	movs	r3, #16
   b91da:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b91de:	6803      	ldr	r3, [r0, #0]
   b91e0:	4615      	mov	r5, r2
   b91e2:	699e      	ldr	r6, [r3, #24]
   b91e4:	6812      	ldr	r2, [r2, #0]
   b91e6:	466b      	mov	r3, sp
   b91e8:	e9cd 4400 	strd	r4, r4, [sp]
   b91ec:	47b0      	blx	r6
   b91ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b91f2:	f003 0306 	and.w	r3, r3, #6
   b91f6:	2b06      	cmp	r3, #6
   b91f8:	bf03      	ittte	eq
   b91fa:	9b00      	ldreq	r3, [sp, #0]
   b91fc:	602b      	streq	r3, [r5, #0]
   b91fe:	2001      	moveq	r0, #1
   b9200:	4620      	movne	r0, r4
   b9202:	b004      	add	sp, #16
   b9204:	bd70      	pop	{r4, r5, r6, pc}

000b9206 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9206:	9800      	ldr	r0, [sp, #0]
   b9208:	4290      	cmp	r0, r2
   b920a:	bf14      	ite	ne
   b920c:	2001      	movne	r0, #1
   b920e:	2006      	moveq	r0, #6
   b9210:	4770      	bx	lr
	...

000b9214 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9214:	b510      	push	{r4, lr}
   b9216:	4b03      	ldr	r3, [pc, #12]	; (b9224 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9218:	6003      	str	r3, [r0, #0]
   b921a:	4604      	mov	r4, r0
   b921c:	f000 f8cd 	bl	b93ba <_ZNSt9type_infoD1Ev>
   b9220:	4620      	mov	r0, r4
   b9222:	bd10      	pop	{r4, pc}
   b9224:	000bbda0 	.word	0x000bbda0

000b9228 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9228:	b510      	push	{r4, lr}
   b922a:	4604      	mov	r4, r0
   b922c:	f7ff fff2 	bl	b9214 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9230:	4620      	mov	r0, r4
   b9232:	2108      	movs	r1, #8
   b9234:	f7fb fcaf 	bl	b4b96 <_ZdlPvj>
   b9238:	4620      	mov	r0, r4
   b923a:	bd10      	pop	{r4, pc}

000b923c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9240:	461f      	mov	r7, r3
   b9242:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9246:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b924a:	4598      	cmp	r8, r3
   b924c:	4606      	mov	r6, r0
   b924e:	4615      	mov	r5, r2
   b9250:	d107      	bne.n	b9262 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9252:	9907      	ldr	r1, [sp, #28]
   b9254:	f000 f8b4 	bl	b93c0 <_ZNKSt9type_infoeqERKS_>
   b9258:	b118      	cbz	r0, b9262 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b925a:	7165      	strb	r5, [r4, #5]
   b925c:	2000      	movs	r0, #0
   b925e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9262:	4639      	mov	r1, r7
   b9264:	4630      	mov	r0, r6
   b9266:	f000 f8ab 	bl	b93c0 <_ZNKSt9type_infoeqERKS_>
   b926a:	2800      	cmp	r0, #0
   b926c:	d0f6      	beq.n	b925c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b926e:	2301      	movs	r3, #1
   b9270:	f8c4 8000 	str.w	r8, [r4]
   b9274:	7125      	strb	r5, [r4, #4]
   b9276:	71a3      	strb	r3, [r4, #6]
   b9278:	e7f0      	b.n	b925c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b927a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b927a:	b538      	push	{r3, r4, r5, lr}
   b927c:	4615      	mov	r5, r2
   b927e:	461c      	mov	r4, r3
   b9280:	f000 f89e 	bl	b93c0 <_ZNKSt9type_infoeqERKS_>
   b9284:	b120      	cbz	r0, b9290 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9286:	2308      	movs	r3, #8
   b9288:	60e3      	str	r3, [r4, #12]
   b928a:	2306      	movs	r3, #6
   b928c:	6025      	str	r5, [r4, #0]
   b928e:	7123      	strb	r3, [r4, #4]
   b9290:	bd38      	pop	{r3, r4, r5, pc}

000b9292 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9292:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9294:	4605      	mov	r5, r0
   b9296:	460c      	mov	r4, r1
   b9298:	9201      	str	r2, [sp, #4]
   b929a:	461e      	mov	r6, r3
   b929c:	f000 f890 	bl	b93c0 <_ZNKSt9type_infoeqERKS_>
   b92a0:	b950      	cbnz	r0, b92b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b92a2:	2e03      	cmp	r6, #3
   b92a4:	d808      	bhi.n	b92b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b92a6:	6823      	ldr	r3, [r4, #0]
   b92a8:	9a01      	ldr	r2, [sp, #4]
   b92aa:	695b      	ldr	r3, [r3, #20]
   b92ac:	4629      	mov	r1, r5
   b92ae:	4620      	mov	r0, r4
   b92b0:	b002      	add	sp, #8
   b92b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b92b6:	4718      	bx	r3
   b92b8:	b002      	add	sp, #8
   b92ba:	bd70      	pop	{r4, r5, r6, pc}

000b92bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b92bc:	b510      	push	{r4, lr}
   b92be:	4b03      	ldr	r3, [pc, #12]	; (b92cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b92c0:	6003      	str	r3, [r0, #0]
   b92c2:	4604      	mov	r4, r0
   b92c4:	f7ff ffa6 	bl	b9214 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b92c8:	4620      	mov	r0, r4
   b92ca:	bd10      	pop	{r4, pc}
   b92cc:	000bbe00 	.word	0x000bbe00

000b92d0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b92d0:	b510      	push	{r4, lr}
   b92d2:	4604      	mov	r4, r0
   b92d4:	f7ff fff2 	bl	b92bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b92d8:	4620      	mov	r0, r4
   b92da:	210c      	movs	r1, #12
   b92dc:	f7fb fc5b 	bl	b4b96 <_ZdlPvj>
   b92e0:	4620      	mov	r0, r4
   b92e2:	bd10      	pop	{r4, pc}

000b92e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b92e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b92e6:	9f08      	ldr	r7, [sp, #32]
   b92e8:	4297      	cmp	r7, r2
   b92ea:	4605      	mov	r5, r0
   b92ec:	460e      	mov	r6, r1
   b92ee:	4614      	mov	r4, r2
   b92f0:	d00a      	beq.n	b9308 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b92f2:	68a8      	ldr	r0, [r5, #8]
   b92f4:	6802      	ldr	r2, [r0, #0]
   b92f6:	9708      	str	r7, [sp, #32]
   b92f8:	6a15      	ldr	r5, [r2, #32]
   b92fa:	4631      	mov	r1, r6
   b92fc:	4622      	mov	r2, r4
   b92fe:	46ac      	mov	ip, r5
   b9300:	b003      	add	sp, #12
   b9302:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9306:	4760      	bx	ip
   b9308:	4619      	mov	r1, r3
   b930a:	9301      	str	r3, [sp, #4]
   b930c:	f000 f858 	bl	b93c0 <_ZNKSt9type_infoeqERKS_>
   b9310:	9b01      	ldr	r3, [sp, #4]
   b9312:	2800      	cmp	r0, #0
   b9314:	d0ed      	beq.n	b92f2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9316:	2006      	movs	r0, #6
   b9318:	b003      	add	sp, #12
   b931a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b931c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b931c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9320:	460d      	mov	r5, r1
   b9322:	4619      	mov	r1, r3
   b9324:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9328:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b932c:	4681      	mov	r9, r0
   b932e:	4617      	mov	r7, r2
   b9330:	4698      	mov	r8, r3
   b9332:	f000 f845 	bl	b93c0 <_ZNKSt9type_infoeqERKS_>
   b9336:	b190      	cbz	r0, b935e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9338:	2d00      	cmp	r5, #0
   b933a:	6034      	str	r4, [r6, #0]
   b933c:	7137      	strb	r7, [r6, #4]
   b933e:	db09      	blt.n	b9354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9340:	1961      	adds	r1, r4, r5
   b9342:	458a      	cmp	sl, r1
   b9344:	bf0c      	ite	eq
   b9346:	2106      	moveq	r1, #6
   b9348:	2101      	movne	r1, #1
   b934a:	71b1      	strb	r1, [r6, #6]
   b934c:	2000      	movs	r0, #0
   b934e:	b001      	add	sp, #4
   b9350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9354:	3502      	adds	r5, #2
   b9356:	d1f9      	bne.n	b934c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9358:	2301      	movs	r3, #1
   b935a:	71b3      	strb	r3, [r6, #6]
   b935c:	e7f6      	b.n	b934c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b935e:	4554      	cmp	r4, sl
   b9360:	d106      	bne.n	b9370 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9362:	4659      	mov	r1, fp
   b9364:	4648      	mov	r0, r9
   b9366:	f000 f82b 	bl	b93c0 <_ZNKSt9type_infoeqERKS_>
   b936a:	b108      	cbz	r0, b9370 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b936c:	7177      	strb	r7, [r6, #5]
   b936e:	e7ed      	b.n	b934c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9370:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9374:	6803      	ldr	r3, [r0, #0]
   b9376:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b937a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b937e:	69dc      	ldr	r4, [r3, #28]
   b9380:	463a      	mov	r2, r7
   b9382:	4643      	mov	r3, r8
   b9384:	4629      	mov	r1, r5
   b9386:	46a4      	mov	ip, r4
   b9388:	b001      	add	sp, #4
   b938a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b938e:	4760      	bx	ip

000b9390 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9394:	4607      	mov	r7, r0
   b9396:	460c      	mov	r4, r1
   b9398:	4615      	mov	r5, r2
   b939a:	461e      	mov	r6, r3
   b939c:	f7ff ff6d 	bl	b927a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b93a0:	b948      	cbnz	r0, b93b6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b93a2:	68b8      	ldr	r0, [r7, #8]
   b93a4:	6803      	ldr	r3, [r0, #0]
   b93a6:	699f      	ldr	r7, [r3, #24]
   b93a8:	462a      	mov	r2, r5
   b93aa:	4633      	mov	r3, r6
   b93ac:	4621      	mov	r1, r4
   b93ae:	46bc      	mov	ip, r7
   b93b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b93b4:	4760      	bx	ip
   b93b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b93ba <_ZNSt9type_infoD1Ev>:
   b93ba:	4770      	bx	lr

000b93bc <_ZNKSt9type_info14__is_pointer_pEv>:
   b93bc:	2000      	movs	r0, #0
   b93be:	4770      	bx	lr

000b93c0 <_ZNKSt9type_infoeqERKS_>:
   b93c0:	4281      	cmp	r1, r0
   b93c2:	b508      	push	{r3, lr}
   b93c4:	d00e      	beq.n	b93e4 <_ZNKSt9type_infoeqERKS_+0x24>
   b93c6:	6840      	ldr	r0, [r0, #4]
   b93c8:	7803      	ldrb	r3, [r0, #0]
   b93ca:	2b2a      	cmp	r3, #42	; 0x2a
   b93cc:	d00c      	beq.n	b93e8 <_ZNKSt9type_infoeqERKS_+0x28>
   b93ce:	6849      	ldr	r1, [r1, #4]
   b93d0:	780b      	ldrb	r3, [r1, #0]
   b93d2:	2b2a      	cmp	r3, #42	; 0x2a
   b93d4:	bf08      	it	eq
   b93d6:	3101      	addeq	r1, #1
   b93d8:	f7fb fb72 	bl	b4ac0 <strcmp>
   b93dc:	fab0 f080 	clz	r0, r0
   b93e0:	0940      	lsrs	r0, r0, #5
   b93e2:	bd08      	pop	{r3, pc}
   b93e4:	2001      	movs	r0, #1
   b93e6:	e7fc      	b.n	b93e2 <_ZNKSt9type_infoeqERKS_+0x22>
   b93e8:	2000      	movs	r0, #0
   b93ea:	e7fa      	b.n	b93e2 <_ZNKSt9type_infoeqERKS_+0x22>

000b93ec <asctime_r>:
   b93ec:	b510      	push	{r4, lr}
   b93ee:	460c      	mov	r4, r1
   b93f0:	6941      	ldr	r1, [r0, #20]
   b93f2:	6903      	ldr	r3, [r0, #16]
   b93f4:	6982      	ldr	r2, [r0, #24]
   b93f6:	b086      	sub	sp, #24
   b93f8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b93fc:	9104      	str	r1, [sp, #16]
   b93fe:	6801      	ldr	r1, [r0, #0]
   b9400:	9103      	str	r1, [sp, #12]
   b9402:	6841      	ldr	r1, [r0, #4]
   b9404:	9102      	str	r1, [sp, #8]
   b9406:	6881      	ldr	r1, [r0, #8]
   b9408:	9101      	str	r1, [sp, #4]
   b940a:	68c1      	ldr	r1, [r0, #12]
   b940c:	9100      	str	r1, [sp, #0]
   b940e:	4907      	ldr	r1, [pc, #28]	; (b942c <asctime_r+0x40>)
   b9410:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b9414:	440b      	add	r3, r1
   b9416:	4906      	ldr	r1, [pc, #24]	; (b9430 <asctime_r+0x44>)
   b9418:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b941c:	440a      	add	r2, r1
   b941e:	4620      	mov	r0, r4
   b9420:	4904      	ldr	r1, [pc, #16]	; (b9434 <asctime_r+0x48>)
   b9422:	f7fc ff5d 	bl	b62e0 <siprintf>
   b9426:	4620      	mov	r0, r4
   b9428:	b006      	add	sp, #24
   b942a:	bd10      	pop	{r4, pc}
   b942c:	000bbe6e 	.word	0x000bbe6e
   b9430:	000bbe59 	.word	0x000bbe59
   b9434:	000bbe39 	.word	0x000bbe39

000b9438 <atexit>:
   b9438:	2300      	movs	r3, #0
   b943a:	4601      	mov	r1, r0
   b943c:	461a      	mov	r2, r3
   b943e:	4618      	mov	r0, r3
   b9440:	f000 bfc0 	b.w	ba3c4 <__register_exitproc>

000b9444 <memcmp>:
   b9444:	b510      	push	{r4, lr}
   b9446:	3901      	subs	r1, #1
   b9448:	4402      	add	r2, r0
   b944a:	4290      	cmp	r0, r2
   b944c:	d101      	bne.n	b9452 <memcmp+0xe>
   b944e:	2000      	movs	r0, #0
   b9450:	e005      	b.n	b945e <memcmp+0x1a>
   b9452:	7803      	ldrb	r3, [r0, #0]
   b9454:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9458:	42a3      	cmp	r3, r4
   b945a:	d001      	beq.n	b9460 <memcmp+0x1c>
   b945c:	1b18      	subs	r0, r3, r4
   b945e:	bd10      	pop	{r4, pc}
   b9460:	3001      	adds	r0, #1
   b9462:	e7f2      	b.n	b944a <memcmp+0x6>

000b9464 <memcpy>:
   b9464:	440a      	add	r2, r1
   b9466:	4291      	cmp	r1, r2
   b9468:	f100 33ff 	add.w	r3, r0, #4294967295
   b946c:	d100      	bne.n	b9470 <memcpy+0xc>
   b946e:	4770      	bx	lr
   b9470:	b510      	push	{r4, lr}
   b9472:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9476:	f803 4f01 	strb.w	r4, [r3, #1]!
   b947a:	4291      	cmp	r1, r2
   b947c:	d1f9      	bne.n	b9472 <memcpy+0xe>
   b947e:	bd10      	pop	{r4, pc}

000b9480 <memmove>:
   b9480:	4288      	cmp	r0, r1
   b9482:	b510      	push	{r4, lr}
   b9484:	eb01 0402 	add.w	r4, r1, r2
   b9488:	d902      	bls.n	b9490 <memmove+0x10>
   b948a:	4284      	cmp	r4, r0
   b948c:	4623      	mov	r3, r4
   b948e:	d807      	bhi.n	b94a0 <memmove+0x20>
   b9490:	1e43      	subs	r3, r0, #1
   b9492:	42a1      	cmp	r1, r4
   b9494:	d008      	beq.n	b94a8 <memmove+0x28>
   b9496:	f811 2b01 	ldrb.w	r2, [r1], #1
   b949a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b949e:	e7f8      	b.n	b9492 <memmove+0x12>
   b94a0:	4402      	add	r2, r0
   b94a2:	4601      	mov	r1, r0
   b94a4:	428a      	cmp	r2, r1
   b94a6:	d100      	bne.n	b94aa <memmove+0x2a>
   b94a8:	bd10      	pop	{r4, pc}
   b94aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b94ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b94b2:	e7f7      	b.n	b94a4 <memmove+0x24>

000b94b4 <memset>:
   b94b4:	4402      	add	r2, r0
   b94b6:	4603      	mov	r3, r0
   b94b8:	4293      	cmp	r3, r2
   b94ba:	d100      	bne.n	b94be <memset+0xa>
   b94bc:	4770      	bx	lr
   b94be:	f803 1b01 	strb.w	r1, [r3], #1
   b94c2:	e7f9      	b.n	b94b8 <memset+0x4>

000b94c4 <srand>:
   b94c4:	b538      	push	{r3, r4, r5, lr}
   b94c6:	4b10      	ldr	r3, [pc, #64]	; (b9508 <srand+0x44>)
   b94c8:	681d      	ldr	r5, [r3, #0]
   b94ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b94cc:	4604      	mov	r4, r0
   b94ce:	b9b3      	cbnz	r3, b94fe <srand+0x3a>
   b94d0:	2018      	movs	r0, #24
   b94d2:	f7fc feed 	bl	b62b0 <malloc>
   b94d6:	4602      	mov	r2, r0
   b94d8:	63a8      	str	r0, [r5, #56]	; 0x38
   b94da:	b920      	cbnz	r0, b94e6 <srand+0x22>
   b94dc:	4b0b      	ldr	r3, [pc, #44]	; (b950c <srand+0x48>)
   b94de:	480c      	ldr	r0, [pc, #48]	; (b9510 <srand+0x4c>)
   b94e0:	2142      	movs	r1, #66	; 0x42
   b94e2:	f7fc ff25 	bl	b6330 <__assert_func>
   b94e6:	490b      	ldr	r1, [pc, #44]	; (b9514 <srand+0x50>)
   b94e8:	4b0b      	ldr	r3, [pc, #44]	; (b9518 <srand+0x54>)
   b94ea:	e9c0 1300 	strd	r1, r3, [r0]
   b94ee:	4b0b      	ldr	r3, [pc, #44]	; (b951c <srand+0x58>)
   b94f0:	6083      	str	r3, [r0, #8]
   b94f2:	230b      	movs	r3, #11
   b94f4:	8183      	strh	r3, [r0, #12]
   b94f6:	2100      	movs	r1, #0
   b94f8:	2001      	movs	r0, #1
   b94fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b94fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9500:	2200      	movs	r2, #0
   b9502:	611c      	str	r4, [r3, #16]
   b9504:	615a      	str	r2, [r3, #20]
   b9506:	bd38      	pop	{r3, r4, r5, pc}
   b9508:	2003e30c 	.word	0x2003e30c
   b950c:	000bbe92 	.word	0x000bbe92
   b9510:	000bbea9 	.word	0x000bbea9
   b9514:	abcd330e 	.word	0xabcd330e
   b9518:	e66d1234 	.word	0xe66d1234
   b951c:	0005deec 	.word	0x0005deec

000b9520 <strcpy>:
   b9520:	4603      	mov	r3, r0
   b9522:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9526:	f803 2b01 	strb.w	r2, [r3], #1
   b952a:	2a00      	cmp	r2, #0
   b952c:	d1f9      	bne.n	b9522 <strcpy+0x2>
   b952e:	4770      	bx	lr

000b9530 <strdup>:
   b9530:	4b02      	ldr	r3, [pc, #8]	; (b953c <strdup+0xc>)
   b9532:	4601      	mov	r1, r0
   b9534:	6818      	ldr	r0, [r3, #0]
   b9536:	f000 b803 	b.w	b9540 <_strdup_r>
   b953a:	bf00      	nop
   b953c:	2003e30c 	.word	0x2003e30c

000b9540 <_strdup_r>:
   b9540:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9542:	4604      	mov	r4, r0
   b9544:	4608      	mov	r0, r1
   b9546:	460d      	mov	r5, r1
   b9548:	f7fb fac4 	bl	b4ad4 <strlen>
   b954c:	1c42      	adds	r2, r0, #1
   b954e:	4611      	mov	r1, r2
   b9550:	4620      	mov	r0, r4
   b9552:	9201      	str	r2, [sp, #4]
   b9554:	f7fc fedc 	bl	b6310 <_malloc_r>
   b9558:	4604      	mov	r4, r0
   b955a:	b118      	cbz	r0, b9564 <_strdup_r+0x24>
   b955c:	9a01      	ldr	r2, [sp, #4]
   b955e:	4629      	mov	r1, r5
   b9560:	f7ff ff80 	bl	b9464 <memcpy>
   b9564:	4620      	mov	r0, r4
   b9566:	b003      	add	sp, #12
   b9568:	bd30      	pop	{r4, r5, pc}

000b956a <strncmp>:
   b956a:	b510      	push	{r4, lr}
   b956c:	b17a      	cbz	r2, b958e <strncmp+0x24>
   b956e:	4603      	mov	r3, r0
   b9570:	3901      	subs	r1, #1
   b9572:	1884      	adds	r4, r0, r2
   b9574:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9578:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b957c:	4290      	cmp	r0, r2
   b957e:	d101      	bne.n	b9584 <strncmp+0x1a>
   b9580:	42a3      	cmp	r3, r4
   b9582:	d101      	bne.n	b9588 <strncmp+0x1e>
   b9584:	1a80      	subs	r0, r0, r2
   b9586:	bd10      	pop	{r4, pc}
   b9588:	2800      	cmp	r0, #0
   b958a:	d1f3      	bne.n	b9574 <strncmp+0xa>
   b958c:	e7fa      	b.n	b9584 <strncmp+0x1a>
   b958e:	4610      	mov	r0, r2
   b9590:	e7f9      	b.n	b9586 <strncmp+0x1c>

000b9592 <strnlen>:
   b9592:	b510      	push	{r4, lr}
   b9594:	4602      	mov	r2, r0
   b9596:	4401      	add	r1, r0
   b9598:	428a      	cmp	r2, r1
   b959a:	4613      	mov	r3, r2
   b959c:	d003      	beq.n	b95a6 <strnlen+0x14>
   b959e:	781c      	ldrb	r4, [r3, #0]
   b95a0:	3201      	adds	r2, #1
   b95a2:	2c00      	cmp	r4, #0
   b95a4:	d1f8      	bne.n	b9598 <strnlen+0x6>
   b95a6:	1a18      	subs	r0, r3, r0
   b95a8:	bd10      	pop	{r4, pc}

000b95aa <sulp>:
   b95aa:	b570      	push	{r4, r5, r6, lr}
   b95ac:	4604      	mov	r4, r0
   b95ae:	460d      	mov	r5, r1
   b95b0:	ec45 4b10 	vmov	d0, r4, r5
   b95b4:	4616      	mov	r6, r2
   b95b6:	f001 fe5f 	bl	bb278 <__ulp>
   b95ba:	ec51 0b10 	vmov	r0, r1, d0
   b95be:	b17e      	cbz	r6, b95e0 <sulp+0x36>
   b95c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b95c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b95c8:	2b00      	cmp	r3, #0
   b95ca:	dd09      	ble.n	b95e0 <sulp+0x36>
   b95cc:	051b      	lsls	r3, r3, #20
   b95ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b95d2:	2400      	movs	r4, #0
   b95d4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b95d8:	4622      	mov	r2, r4
   b95da:	462b      	mov	r3, r5
   b95dc:	f7fa fedc 	bl	b4398 <__aeabi_dmul>
   b95e0:	bd70      	pop	{r4, r5, r6, pc}
   b95e2:	0000      	movs	r0, r0
   b95e4:	0000      	movs	r0, r0
	...

000b95e8 <_strtod_l>:
   b95e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95ec:	ed2d 8b02 	vpush	{d8}
   b95f0:	b09d      	sub	sp, #116	; 0x74
   b95f2:	461f      	mov	r7, r3
   b95f4:	2300      	movs	r3, #0
   b95f6:	9318      	str	r3, [sp, #96]	; 0x60
   b95f8:	4ba2      	ldr	r3, [pc, #648]	; (b9884 <_strtod_l+0x29c>)
   b95fa:	9213      	str	r2, [sp, #76]	; 0x4c
   b95fc:	681b      	ldr	r3, [r3, #0]
   b95fe:	9305      	str	r3, [sp, #20]
   b9600:	4604      	mov	r4, r0
   b9602:	4618      	mov	r0, r3
   b9604:	4688      	mov	r8, r1
   b9606:	f7fb fa65 	bl	b4ad4 <strlen>
   b960a:	f04f 0a00 	mov.w	sl, #0
   b960e:	4605      	mov	r5, r0
   b9610:	f04f 0b00 	mov.w	fp, #0
   b9614:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b961a:	781a      	ldrb	r2, [r3, #0]
   b961c:	2a2b      	cmp	r2, #43	; 0x2b
   b961e:	d04e      	beq.n	b96be <_strtod_l+0xd6>
   b9620:	d83b      	bhi.n	b969a <_strtod_l+0xb2>
   b9622:	2a0d      	cmp	r2, #13
   b9624:	d834      	bhi.n	b9690 <_strtod_l+0xa8>
   b9626:	2a08      	cmp	r2, #8
   b9628:	d834      	bhi.n	b9694 <_strtod_l+0xac>
   b962a:	2a00      	cmp	r2, #0
   b962c:	d03e      	beq.n	b96ac <_strtod_l+0xc4>
   b962e:	2300      	movs	r3, #0
   b9630:	930a      	str	r3, [sp, #40]	; 0x28
   b9632:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b9634:	7833      	ldrb	r3, [r6, #0]
   b9636:	2b30      	cmp	r3, #48	; 0x30
   b9638:	f040 80b0 	bne.w	b979c <_strtod_l+0x1b4>
   b963c:	7873      	ldrb	r3, [r6, #1]
   b963e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9642:	2b58      	cmp	r3, #88	; 0x58
   b9644:	d168      	bne.n	b9718 <_strtod_l+0x130>
   b9646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9648:	9301      	str	r3, [sp, #4]
   b964a:	ab18      	add	r3, sp, #96	; 0x60
   b964c:	9702      	str	r7, [sp, #8]
   b964e:	9300      	str	r3, [sp, #0]
   b9650:	4a8d      	ldr	r2, [pc, #564]	; (b9888 <_strtod_l+0x2a0>)
   b9652:	ab19      	add	r3, sp, #100	; 0x64
   b9654:	a917      	add	r1, sp, #92	; 0x5c
   b9656:	4620      	mov	r0, r4
   b9658:	f000 ff7e 	bl	ba558 <__gethex>
   b965c:	f010 0707 	ands.w	r7, r0, #7
   b9660:	4605      	mov	r5, r0
   b9662:	d005      	beq.n	b9670 <_strtod_l+0x88>
   b9664:	2f06      	cmp	r7, #6
   b9666:	d12c      	bne.n	b96c2 <_strtod_l+0xda>
   b9668:	3601      	adds	r6, #1
   b966a:	2300      	movs	r3, #0
   b966c:	9617      	str	r6, [sp, #92]	; 0x5c
   b966e:	930a      	str	r3, [sp, #40]	; 0x28
   b9670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9672:	2b00      	cmp	r3, #0
   b9674:	f040 8590 	bne.w	ba198 <_strtod_l+0xbb0>
   b9678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b967a:	b1eb      	cbz	r3, b96b8 <_strtod_l+0xd0>
   b967c:	4652      	mov	r2, sl
   b967e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b9682:	ec43 2b10 	vmov	d0, r2, r3
   b9686:	b01d      	add	sp, #116	; 0x74
   b9688:	ecbd 8b02 	vpop	{d8}
   b968c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9690:	2a20      	cmp	r2, #32
   b9692:	d1cc      	bne.n	b962e <_strtod_l+0x46>
   b9694:	3301      	adds	r3, #1
   b9696:	9317      	str	r3, [sp, #92]	; 0x5c
   b9698:	e7be      	b.n	b9618 <_strtod_l+0x30>
   b969a:	2a2d      	cmp	r2, #45	; 0x2d
   b969c:	d1c7      	bne.n	b962e <_strtod_l+0x46>
   b969e:	2201      	movs	r2, #1
   b96a0:	920a      	str	r2, [sp, #40]	; 0x28
   b96a2:	1c5a      	adds	r2, r3, #1
   b96a4:	9217      	str	r2, [sp, #92]	; 0x5c
   b96a6:	785b      	ldrb	r3, [r3, #1]
   b96a8:	2b00      	cmp	r3, #0
   b96aa:	d1c2      	bne.n	b9632 <_strtod_l+0x4a>
   b96ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b96ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b96b2:	2b00      	cmp	r3, #0
   b96b4:	f040 856e 	bne.w	ba194 <_strtod_l+0xbac>
   b96b8:	4652      	mov	r2, sl
   b96ba:	465b      	mov	r3, fp
   b96bc:	e7e1      	b.n	b9682 <_strtod_l+0x9a>
   b96be:	2200      	movs	r2, #0
   b96c0:	e7ee      	b.n	b96a0 <_strtod_l+0xb8>
   b96c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b96c4:	b13a      	cbz	r2, b96d6 <_strtod_l+0xee>
   b96c6:	2135      	movs	r1, #53	; 0x35
   b96c8:	a81a      	add	r0, sp, #104	; 0x68
   b96ca:	f001 fee0 	bl	bb48e <__copybits>
   b96ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   b96d0:	4620      	mov	r0, r4
   b96d2:	f001 fa9f 	bl	bac14 <_Bfree>
   b96d6:	3f01      	subs	r7, #1
   b96d8:	2f04      	cmp	r7, #4
   b96da:	d806      	bhi.n	b96ea <_strtod_l+0x102>
   b96dc:	e8df f007 	tbb	[pc, r7]
   b96e0:	1714030a 	.word	0x1714030a
   b96e4:	0a          	.byte	0x0a
   b96e5:	00          	.byte	0x00
   b96e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b96ea:	0728      	lsls	r0, r5, #28
   b96ec:	d5c0      	bpl.n	b9670 <_strtod_l+0x88>
   b96ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b96f2:	e7bd      	b.n	b9670 <_strtod_l+0x88>
   b96f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b96f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b96fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b96fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b9702:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b9706:	e7f0      	b.n	b96ea <_strtod_l+0x102>
   b9708:	f8df b180 	ldr.w	fp, [pc, #384]	; b988c <_strtod_l+0x2a4>
   b970c:	e7ed      	b.n	b96ea <_strtod_l+0x102>
   b970e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b9712:	f04f 3aff 	mov.w	sl, #4294967295
   b9716:	e7e8      	b.n	b96ea <_strtod_l+0x102>
   b9718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b971a:	1c5a      	adds	r2, r3, #1
   b971c:	9217      	str	r2, [sp, #92]	; 0x5c
   b971e:	785b      	ldrb	r3, [r3, #1]
   b9720:	2b30      	cmp	r3, #48	; 0x30
   b9722:	d0f9      	beq.n	b9718 <_strtod_l+0x130>
   b9724:	2b00      	cmp	r3, #0
   b9726:	d0a3      	beq.n	b9670 <_strtod_l+0x88>
   b9728:	2301      	movs	r3, #1
   b972a:	f04f 0900 	mov.w	r9, #0
   b972e:	9304      	str	r3, [sp, #16]
   b9730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9732:	9308      	str	r3, [sp, #32]
   b9734:	f8cd 901c 	str.w	r9, [sp, #28]
   b9738:	464f      	mov	r7, r9
   b973a:	220a      	movs	r2, #10
   b973c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b973e:	7806      	ldrb	r6, [r0, #0]
   b9740:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b9744:	b2d9      	uxtb	r1, r3
   b9746:	2909      	cmp	r1, #9
   b9748:	d92a      	bls.n	b97a0 <_strtod_l+0x1b8>
   b974a:	9905      	ldr	r1, [sp, #20]
   b974c:	462a      	mov	r2, r5
   b974e:	f7ff ff0c 	bl	b956a <strncmp>
   b9752:	b398      	cbz	r0, b97bc <_strtod_l+0x1d4>
   b9754:	2000      	movs	r0, #0
   b9756:	4632      	mov	r2, r6
   b9758:	463d      	mov	r5, r7
   b975a:	9005      	str	r0, [sp, #20]
   b975c:	4603      	mov	r3, r0
   b975e:	2a65      	cmp	r2, #101	; 0x65
   b9760:	d001      	beq.n	b9766 <_strtod_l+0x17e>
   b9762:	2a45      	cmp	r2, #69	; 0x45
   b9764:	d118      	bne.n	b9798 <_strtod_l+0x1b0>
   b9766:	b91d      	cbnz	r5, b9770 <_strtod_l+0x188>
   b9768:	9a04      	ldr	r2, [sp, #16]
   b976a:	4302      	orrs	r2, r0
   b976c:	d09e      	beq.n	b96ac <_strtod_l+0xc4>
   b976e:	2500      	movs	r5, #0
   b9770:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b9774:	f108 0201 	add.w	r2, r8, #1
   b9778:	9217      	str	r2, [sp, #92]	; 0x5c
   b977a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b977e:	2a2b      	cmp	r2, #43	; 0x2b
   b9780:	d075      	beq.n	b986e <_strtod_l+0x286>
   b9782:	2a2d      	cmp	r2, #45	; 0x2d
   b9784:	d07b      	beq.n	b987e <_strtod_l+0x296>
   b9786:	f04f 0c00 	mov.w	ip, #0
   b978a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b978e:	2909      	cmp	r1, #9
   b9790:	f240 8082 	bls.w	b9898 <_strtod_l+0x2b0>
   b9794:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9798:	2600      	movs	r6, #0
   b979a:	e09d      	b.n	b98d8 <_strtod_l+0x2f0>
   b979c:	2300      	movs	r3, #0
   b979e:	e7c4      	b.n	b972a <_strtod_l+0x142>
   b97a0:	2f08      	cmp	r7, #8
   b97a2:	bfd8      	it	le
   b97a4:	9907      	ldrle	r1, [sp, #28]
   b97a6:	f100 0001 	add.w	r0, r0, #1
   b97aa:	bfda      	itte	le
   b97ac:	fb02 3301 	mlale	r3, r2, r1, r3
   b97b0:	9307      	strle	r3, [sp, #28]
   b97b2:	fb02 3909 	mlagt	r9, r2, r9, r3
   b97b6:	3701      	adds	r7, #1
   b97b8:	9017      	str	r0, [sp, #92]	; 0x5c
   b97ba:	e7bf      	b.n	b973c <_strtod_l+0x154>
   b97bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b97be:	195a      	adds	r2, r3, r5
   b97c0:	9217      	str	r2, [sp, #92]	; 0x5c
   b97c2:	5d5a      	ldrb	r2, [r3, r5]
   b97c4:	2f00      	cmp	r7, #0
   b97c6:	d037      	beq.n	b9838 <_strtod_l+0x250>
   b97c8:	9005      	str	r0, [sp, #20]
   b97ca:	463d      	mov	r5, r7
   b97cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b97d0:	2b09      	cmp	r3, #9
   b97d2:	d912      	bls.n	b97fa <_strtod_l+0x212>
   b97d4:	2301      	movs	r3, #1
   b97d6:	e7c2      	b.n	b975e <_strtod_l+0x176>
   b97d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b97da:	1c5a      	adds	r2, r3, #1
   b97dc:	9217      	str	r2, [sp, #92]	; 0x5c
   b97de:	785a      	ldrb	r2, [r3, #1]
   b97e0:	3001      	adds	r0, #1
   b97e2:	2a30      	cmp	r2, #48	; 0x30
   b97e4:	d0f8      	beq.n	b97d8 <_strtod_l+0x1f0>
   b97e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b97ea:	2b08      	cmp	r3, #8
   b97ec:	f200 84d9 	bhi.w	ba1a2 <_strtod_l+0xbba>
   b97f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b97f2:	9005      	str	r0, [sp, #20]
   b97f4:	2000      	movs	r0, #0
   b97f6:	9308      	str	r3, [sp, #32]
   b97f8:	4605      	mov	r5, r0
   b97fa:	3a30      	subs	r2, #48	; 0x30
   b97fc:	f100 0301 	add.w	r3, r0, #1
   b9800:	d014      	beq.n	b982c <_strtod_l+0x244>
   b9802:	9905      	ldr	r1, [sp, #20]
   b9804:	4419      	add	r1, r3
   b9806:	9105      	str	r1, [sp, #20]
   b9808:	462b      	mov	r3, r5
   b980a:	eb00 0e05 	add.w	lr, r0, r5
   b980e:	210a      	movs	r1, #10
   b9810:	4573      	cmp	r3, lr
   b9812:	d113      	bne.n	b983c <_strtod_l+0x254>
   b9814:	182b      	adds	r3, r5, r0
   b9816:	2b08      	cmp	r3, #8
   b9818:	f105 0501 	add.w	r5, r5, #1
   b981c:	4405      	add	r5, r0
   b981e:	dc1c      	bgt.n	b985a <_strtod_l+0x272>
   b9820:	9907      	ldr	r1, [sp, #28]
   b9822:	230a      	movs	r3, #10
   b9824:	fb03 2301 	mla	r3, r3, r1, r2
   b9828:	9307      	str	r3, [sp, #28]
   b982a:	2300      	movs	r3, #0
   b982c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b982e:	1c51      	adds	r1, r2, #1
   b9830:	9117      	str	r1, [sp, #92]	; 0x5c
   b9832:	7852      	ldrb	r2, [r2, #1]
   b9834:	4618      	mov	r0, r3
   b9836:	e7c9      	b.n	b97cc <_strtod_l+0x1e4>
   b9838:	4638      	mov	r0, r7
   b983a:	e7d2      	b.n	b97e2 <_strtod_l+0x1fa>
   b983c:	2b08      	cmp	r3, #8
   b983e:	dc04      	bgt.n	b984a <_strtod_l+0x262>
   b9840:	9e07      	ldr	r6, [sp, #28]
   b9842:	434e      	muls	r6, r1
   b9844:	9607      	str	r6, [sp, #28]
   b9846:	3301      	adds	r3, #1
   b9848:	e7e2      	b.n	b9810 <_strtod_l+0x228>
   b984a:	f103 0c01 	add.w	ip, r3, #1
   b984e:	f1bc 0f10 	cmp.w	ip, #16
   b9852:	bfd8      	it	le
   b9854:	fb01 f909 	mulle.w	r9, r1, r9
   b9858:	e7f5      	b.n	b9846 <_strtod_l+0x25e>
   b985a:	2d10      	cmp	r5, #16
   b985c:	bfdc      	itt	le
   b985e:	230a      	movle	r3, #10
   b9860:	fb03 2909 	mlale	r9, r3, r9, r2
   b9864:	e7e1      	b.n	b982a <_strtod_l+0x242>
   b9866:	2300      	movs	r3, #0
   b9868:	9305      	str	r3, [sp, #20]
   b986a:	2301      	movs	r3, #1
   b986c:	e77c      	b.n	b9768 <_strtod_l+0x180>
   b986e:	f04f 0c00 	mov.w	ip, #0
   b9872:	f108 0202 	add.w	r2, r8, #2
   b9876:	9217      	str	r2, [sp, #92]	; 0x5c
   b9878:	f898 2002 	ldrb.w	r2, [r8, #2]
   b987c:	e785      	b.n	b978a <_strtod_l+0x1a2>
   b987e:	f04f 0c01 	mov.w	ip, #1
   b9882:	e7f6      	b.n	b9872 <_strtod_l+0x28a>
   b9884:	000bc120 	.word	0x000bc120
   b9888:	000bbf34 	.word	0x000bbf34
   b988c:	7ff00000 	.word	0x7ff00000
   b9890:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9892:	1c51      	adds	r1, r2, #1
   b9894:	9117      	str	r1, [sp, #92]	; 0x5c
   b9896:	7852      	ldrb	r2, [r2, #1]
   b9898:	2a30      	cmp	r2, #48	; 0x30
   b989a:	d0f9      	beq.n	b9890 <_strtod_l+0x2a8>
   b989c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b98a0:	2908      	cmp	r1, #8
   b98a2:	f63f af79 	bhi.w	b9798 <_strtod_l+0x1b0>
   b98a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b98aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b98ac:	9206      	str	r2, [sp, #24]
   b98ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b98b0:	1c51      	adds	r1, r2, #1
   b98b2:	9117      	str	r1, [sp, #92]	; 0x5c
   b98b4:	7852      	ldrb	r2, [r2, #1]
   b98b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b98ba:	2e09      	cmp	r6, #9
   b98bc:	d937      	bls.n	b992e <_strtod_l+0x346>
   b98be:	9e06      	ldr	r6, [sp, #24]
   b98c0:	1b89      	subs	r1, r1, r6
   b98c2:	2908      	cmp	r1, #8
   b98c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b98c8:	dc02      	bgt.n	b98d0 <_strtod_l+0x2e8>
   b98ca:	4576      	cmp	r6, lr
   b98cc:	bfa8      	it	ge
   b98ce:	4676      	movge	r6, lr
   b98d0:	f1bc 0f00 	cmp.w	ip, #0
   b98d4:	d000      	beq.n	b98d8 <_strtod_l+0x2f0>
   b98d6:	4276      	negs	r6, r6
   b98d8:	2d00      	cmp	r5, #0
   b98da:	d14d      	bne.n	b9978 <_strtod_l+0x390>
   b98dc:	9904      	ldr	r1, [sp, #16]
   b98de:	4301      	orrs	r1, r0
   b98e0:	f47f aec6 	bne.w	b9670 <_strtod_l+0x88>
   b98e4:	2b00      	cmp	r3, #0
   b98e6:	f47f aee1 	bne.w	b96ac <_strtod_l+0xc4>
   b98ea:	2a69      	cmp	r2, #105	; 0x69
   b98ec:	d027      	beq.n	b993e <_strtod_l+0x356>
   b98ee:	dc24      	bgt.n	b993a <_strtod_l+0x352>
   b98f0:	2a49      	cmp	r2, #73	; 0x49
   b98f2:	d024      	beq.n	b993e <_strtod_l+0x356>
   b98f4:	2a4e      	cmp	r2, #78	; 0x4e
   b98f6:	f47f aed9 	bne.w	b96ac <_strtod_l+0xc4>
   b98fa:	499f      	ldr	r1, [pc, #636]	; (b9b78 <_strtod_l+0x590>)
   b98fc:	a817      	add	r0, sp, #92	; 0x5c
   b98fe:	f001 f883 	bl	baa08 <__match>
   b9902:	2800      	cmp	r0, #0
   b9904:	f43f aed2 	beq.w	b96ac <_strtod_l+0xc4>
   b9908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b990a:	781b      	ldrb	r3, [r3, #0]
   b990c:	2b28      	cmp	r3, #40	; 0x28
   b990e:	d12d      	bne.n	b996c <_strtod_l+0x384>
   b9910:	499a      	ldr	r1, [pc, #616]	; (b9b7c <_strtod_l+0x594>)
   b9912:	aa1a      	add	r2, sp, #104	; 0x68
   b9914:	a817      	add	r0, sp, #92	; 0x5c
   b9916:	f001 f88b 	bl	baa30 <__hexnan>
   b991a:	2805      	cmp	r0, #5
   b991c:	d126      	bne.n	b996c <_strtod_l+0x384>
   b991e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9920:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b9924:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9928:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b992c:	e6a0      	b.n	b9670 <_strtod_l+0x88>
   b992e:	210a      	movs	r1, #10
   b9930:	fb01 2e0e 	mla	lr, r1, lr, r2
   b9934:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9938:	e7b9      	b.n	b98ae <_strtod_l+0x2c6>
   b993a:	2a6e      	cmp	r2, #110	; 0x6e
   b993c:	e7db      	b.n	b98f6 <_strtod_l+0x30e>
   b993e:	4990      	ldr	r1, [pc, #576]	; (b9b80 <_strtod_l+0x598>)
   b9940:	a817      	add	r0, sp, #92	; 0x5c
   b9942:	f001 f861 	bl	baa08 <__match>
   b9946:	2800      	cmp	r0, #0
   b9948:	f43f aeb0 	beq.w	b96ac <_strtod_l+0xc4>
   b994c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b994e:	498d      	ldr	r1, [pc, #564]	; (b9b84 <_strtod_l+0x59c>)
   b9950:	3b01      	subs	r3, #1
   b9952:	a817      	add	r0, sp, #92	; 0x5c
   b9954:	9317      	str	r3, [sp, #92]	; 0x5c
   b9956:	f001 f857 	bl	baa08 <__match>
   b995a:	b910      	cbnz	r0, b9962 <_strtod_l+0x37a>
   b995c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b995e:	3301      	adds	r3, #1
   b9960:	9317      	str	r3, [sp, #92]	; 0x5c
   b9962:	f8df b230 	ldr.w	fp, [pc, #560]	; b9b94 <_strtod_l+0x5ac>
   b9966:	f04f 0a00 	mov.w	sl, #0
   b996a:	e681      	b.n	b9670 <_strtod_l+0x88>
   b996c:	4886      	ldr	r0, [pc, #536]	; (b9b88 <_strtod_l+0x5a0>)
   b996e:	f001 fde3 	bl	bb538 <nan>
   b9972:	ec5b ab10 	vmov	sl, fp, d0
   b9976:	e67b      	b.n	b9670 <_strtod_l+0x88>
   b9978:	9b05      	ldr	r3, [sp, #20]
   b997a:	9807      	ldr	r0, [sp, #28]
   b997c:	1af3      	subs	r3, r6, r3
   b997e:	2f00      	cmp	r7, #0
   b9980:	bf08      	it	eq
   b9982:	462f      	moveq	r7, r5
   b9984:	2d10      	cmp	r5, #16
   b9986:	9306      	str	r3, [sp, #24]
   b9988:	46a8      	mov	r8, r5
   b998a:	bfa8      	it	ge
   b998c:	f04f 0810 	movge.w	r8, #16
   b9990:	f7fa fc88 	bl	b42a4 <__aeabi_ui2d>
   b9994:	2d09      	cmp	r5, #9
   b9996:	4682      	mov	sl, r0
   b9998:	468b      	mov	fp, r1
   b999a:	dd13      	ble.n	b99c4 <_strtod_l+0x3dc>
   b999c:	4b7b      	ldr	r3, [pc, #492]	; (b9b8c <_strtod_l+0x5a4>)
   b999e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b99a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b99a6:	f7fa fcf7 	bl	b4398 <__aeabi_dmul>
   b99aa:	4682      	mov	sl, r0
   b99ac:	4648      	mov	r0, r9
   b99ae:	468b      	mov	fp, r1
   b99b0:	f7fa fc78 	bl	b42a4 <__aeabi_ui2d>
   b99b4:	4602      	mov	r2, r0
   b99b6:	460b      	mov	r3, r1
   b99b8:	4650      	mov	r0, sl
   b99ba:	4659      	mov	r1, fp
   b99bc:	f7fa fb36 	bl	b402c <__adddf3>
   b99c0:	4682      	mov	sl, r0
   b99c2:	468b      	mov	fp, r1
   b99c4:	2d0f      	cmp	r5, #15
   b99c6:	dc38      	bgt.n	b9a3a <_strtod_l+0x452>
   b99c8:	9b06      	ldr	r3, [sp, #24]
   b99ca:	2b00      	cmp	r3, #0
   b99cc:	f43f ae50 	beq.w	b9670 <_strtod_l+0x88>
   b99d0:	dd24      	ble.n	b9a1c <_strtod_l+0x434>
   b99d2:	2b16      	cmp	r3, #22
   b99d4:	dc0b      	bgt.n	b99ee <_strtod_l+0x406>
   b99d6:	496d      	ldr	r1, [pc, #436]	; (b9b8c <_strtod_l+0x5a4>)
   b99d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b99dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b99e0:	4652      	mov	r2, sl
   b99e2:	465b      	mov	r3, fp
   b99e4:	f7fa fcd8 	bl	b4398 <__aeabi_dmul>
   b99e8:	4682      	mov	sl, r0
   b99ea:	468b      	mov	fp, r1
   b99ec:	e640      	b.n	b9670 <_strtod_l+0x88>
   b99ee:	9a06      	ldr	r2, [sp, #24]
   b99f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b99f4:	4293      	cmp	r3, r2
   b99f6:	db20      	blt.n	b9a3a <_strtod_l+0x452>
   b99f8:	4c64      	ldr	r4, [pc, #400]	; (b9b8c <_strtod_l+0x5a4>)
   b99fa:	f1c5 050f 	rsb	r5, r5, #15
   b99fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9a02:	4652      	mov	r2, sl
   b9a04:	465b      	mov	r3, fp
   b9a06:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9a0a:	f7fa fcc5 	bl	b4398 <__aeabi_dmul>
   b9a0e:	9b06      	ldr	r3, [sp, #24]
   b9a10:	1b5d      	subs	r5, r3, r5
   b9a12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9a16:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9a1a:	e7e3      	b.n	b99e4 <_strtod_l+0x3fc>
   b9a1c:	9b06      	ldr	r3, [sp, #24]
   b9a1e:	3316      	adds	r3, #22
   b9a20:	db0b      	blt.n	b9a3a <_strtod_l+0x452>
   b9a22:	9b05      	ldr	r3, [sp, #20]
   b9a24:	1b9e      	subs	r6, r3, r6
   b9a26:	4b59      	ldr	r3, [pc, #356]	; (b9b8c <_strtod_l+0x5a4>)
   b9a28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9a2c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9a30:	4650      	mov	r0, sl
   b9a32:	4659      	mov	r1, fp
   b9a34:	f7fa fdda 	bl	b45ec <__aeabi_ddiv>
   b9a38:	e7d6      	b.n	b99e8 <_strtod_l+0x400>
   b9a3a:	9b06      	ldr	r3, [sp, #24]
   b9a3c:	eba5 0808 	sub.w	r8, r5, r8
   b9a40:	4498      	add	r8, r3
   b9a42:	f1b8 0f00 	cmp.w	r8, #0
   b9a46:	dd74      	ble.n	b9b32 <_strtod_l+0x54a>
   b9a48:	f018 030f 	ands.w	r3, r8, #15
   b9a4c:	d00a      	beq.n	b9a64 <_strtod_l+0x47c>
   b9a4e:	494f      	ldr	r1, [pc, #316]	; (b9b8c <_strtod_l+0x5a4>)
   b9a50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9a54:	4652      	mov	r2, sl
   b9a56:	465b      	mov	r3, fp
   b9a58:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9a5c:	f7fa fc9c 	bl	b4398 <__aeabi_dmul>
   b9a60:	4682      	mov	sl, r0
   b9a62:	468b      	mov	fp, r1
   b9a64:	f038 080f 	bics.w	r8, r8, #15
   b9a68:	d04f      	beq.n	b9b0a <_strtod_l+0x522>
   b9a6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9a6e:	dd22      	ble.n	b9ab6 <_strtod_l+0x4ce>
   b9a70:	2500      	movs	r5, #0
   b9a72:	462e      	mov	r6, r5
   b9a74:	9507      	str	r5, [sp, #28]
   b9a76:	9505      	str	r5, [sp, #20]
   b9a78:	2322      	movs	r3, #34	; 0x22
   b9a7a:	f8df b118 	ldr.w	fp, [pc, #280]	; b9b94 <_strtod_l+0x5ac>
   b9a7e:	6023      	str	r3, [r4, #0]
   b9a80:	f04f 0a00 	mov.w	sl, #0
   b9a84:	9b07      	ldr	r3, [sp, #28]
   b9a86:	2b00      	cmp	r3, #0
   b9a88:	f43f adf2 	beq.w	b9670 <_strtod_l+0x88>
   b9a8c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9a8e:	4620      	mov	r0, r4
   b9a90:	f001 f8c0 	bl	bac14 <_Bfree>
   b9a94:	9905      	ldr	r1, [sp, #20]
   b9a96:	4620      	mov	r0, r4
   b9a98:	f001 f8bc 	bl	bac14 <_Bfree>
   b9a9c:	4631      	mov	r1, r6
   b9a9e:	4620      	mov	r0, r4
   b9aa0:	f001 f8b8 	bl	bac14 <_Bfree>
   b9aa4:	9907      	ldr	r1, [sp, #28]
   b9aa6:	4620      	mov	r0, r4
   b9aa8:	f001 f8b4 	bl	bac14 <_Bfree>
   b9aac:	4629      	mov	r1, r5
   b9aae:	4620      	mov	r0, r4
   b9ab0:	f001 f8b0 	bl	bac14 <_Bfree>
   b9ab4:	e5dc      	b.n	b9670 <_strtod_l+0x88>
   b9ab6:	4b36      	ldr	r3, [pc, #216]	; (b9b90 <_strtod_l+0x5a8>)
   b9ab8:	9304      	str	r3, [sp, #16]
   b9aba:	2300      	movs	r3, #0
   b9abc:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9ac0:	4650      	mov	r0, sl
   b9ac2:	4659      	mov	r1, fp
   b9ac4:	4699      	mov	r9, r3
   b9ac6:	f1b8 0f01 	cmp.w	r8, #1
   b9aca:	dc21      	bgt.n	b9b10 <_strtod_l+0x528>
   b9acc:	b10b      	cbz	r3, b9ad2 <_strtod_l+0x4ea>
   b9ace:	4682      	mov	sl, r0
   b9ad0:	468b      	mov	fp, r1
   b9ad2:	4b2f      	ldr	r3, [pc, #188]	; (b9b90 <_strtod_l+0x5a8>)
   b9ad4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9ad8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9adc:	4652      	mov	r2, sl
   b9ade:	465b      	mov	r3, fp
   b9ae0:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9ae4:	f7fa fc58 	bl	b4398 <__aeabi_dmul>
   b9ae8:	4b2a      	ldr	r3, [pc, #168]	; (b9b94 <_strtod_l+0x5ac>)
   b9aea:	460a      	mov	r2, r1
   b9aec:	400b      	ands	r3, r1
   b9aee:	492a      	ldr	r1, [pc, #168]	; (b9b98 <_strtod_l+0x5b0>)
   b9af0:	428b      	cmp	r3, r1
   b9af2:	4682      	mov	sl, r0
   b9af4:	d8bc      	bhi.n	b9a70 <_strtod_l+0x488>
   b9af6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9afa:	428b      	cmp	r3, r1
   b9afc:	bf86      	itte	hi
   b9afe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9b9c <_strtod_l+0x5b4>
   b9b02:	f04f 3aff 	movhi.w	sl, #4294967295
   b9b06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9b0a:	2300      	movs	r3, #0
   b9b0c:	9304      	str	r3, [sp, #16]
   b9b0e:	e084      	b.n	b9c1a <_strtod_l+0x632>
   b9b10:	f018 0f01 	tst.w	r8, #1
   b9b14:	d005      	beq.n	b9b22 <_strtod_l+0x53a>
   b9b16:	9b04      	ldr	r3, [sp, #16]
   b9b18:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b1c:	f7fa fc3c 	bl	b4398 <__aeabi_dmul>
   b9b20:	2301      	movs	r3, #1
   b9b22:	9a04      	ldr	r2, [sp, #16]
   b9b24:	3208      	adds	r2, #8
   b9b26:	f109 0901 	add.w	r9, r9, #1
   b9b2a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9b2e:	9204      	str	r2, [sp, #16]
   b9b30:	e7c9      	b.n	b9ac6 <_strtod_l+0x4de>
   b9b32:	d0ea      	beq.n	b9b0a <_strtod_l+0x522>
   b9b34:	f1c8 0800 	rsb	r8, r8, #0
   b9b38:	f018 020f 	ands.w	r2, r8, #15
   b9b3c:	d00a      	beq.n	b9b54 <_strtod_l+0x56c>
   b9b3e:	4b13      	ldr	r3, [pc, #76]	; (b9b8c <_strtod_l+0x5a4>)
   b9b40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9b44:	4650      	mov	r0, sl
   b9b46:	4659      	mov	r1, fp
   b9b48:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b4c:	f7fa fd4e 	bl	b45ec <__aeabi_ddiv>
   b9b50:	4682      	mov	sl, r0
   b9b52:	468b      	mov	fp, r1
   b9b54:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9b58:	d0d7      	beq.n	b9b0a <_strtod_l+0x522>
   b9b5a:	f1b8 0f1f 	cmp.w	r8, #31
   b9b5e:	dd1f      	ble.n	b9ba0 <_strtod_l+0x5b8>
   b9b60:	2500      	movs	r5, #0
   b9b62:	462e      	mov	r6, r5
   b9b64:	9507      	str	r5, [sp, #28]
   b9b66:	9505      	str	r5, [sp, #20]
   b9b68:	2322      	movs	r3, #34	; 0x22
   b9b6a:	f04f 0a00 	mov.w	sl, #0
   b9b6e:	f04f 0b00 	mov.w	fp, #0
   b9b72:	6023      	str	r3, [r4, #0]
   b9b74:	e786      	b.n	b9a84 <_strtod_l+0x49c>
   b9b76:	bf00      	nop
   b9b78:	000bbf2f 	.word	0x000bbf2f
   b9b7c:	000bbf48 	.word	0x000bbf48
   b9b80:	000bbf26 	.word	0x000bbf26
   b9b84:	000bbf29 	.word	0x000bbf29
   b9b88:	000bbe58 	.word	0x000bbe58
   b9b8c:	000bc1e0 	.word	0x000bc1e0
   b9b90:	000bc1b8 	.word	0x000bc1b8
   b9b94:	7ff00000 	.word	0x7ff00000
   b9b98:	7ca00000 	.word	0x7ca00000
   b9b9c:	7fefffff 	.word	0x7fefffff
   b9ba0:	f018 0310 	ands.w	r3, r8, #16
   b9ba4:	bf18      	it	ne
   b9ba6:	236a      	movne	r3, #106	; 0x6a
   b9ba8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9f58 <_strtod_l+0x970>
   b9bac:	9304      	str	r3, [sp, #16]
   b9bae:	4650      	mov	r0, sl
   b9bb0:	4659      	mov	r1, fp
   b9bb2:	2300      	movs	r3, #0
   b9bb4:	f018 0f01 	tst.w	r8, #1
   b9bb8:	d004      	beq.n	b9bc4 <_strtod_l+0x5dc>
   b9bba:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9bbe:	f7fa fbeb 	bl	b4398 <__aeabi_dmul>
   b9bc2:	2301      	movs	r3, #1
   b9bc4:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9bc8:	f109 0908 	add.w	r9, r9, #8
   b9bcc:	d1f2      	bne.n	b9bb4 <_strtod_l+0x5cc>
   b9bce:	b10b      	cbz	r3, b9bd4 <_strtod_l+0x5ec>
   b9bd0:	4682      	mov	sl, r0
   b9bd2:	468b      	mov	fp, r1
   b9bd4:	9b04      	ldr	r3, [sp, #16]
   b9bd6:	b1c3      	cbz	r3, b9c0a <_strtod_l+0x622>
   b9bd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9bdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9be0:	2b00      	cmp	r3, #0
   b9be2:	4659      	mov	r1, fp
   b9be4:	dd11      	ble.n	b9c0a <_strtod_l+0x622>
   b9be6:	2b1f      	cmp	r3, #31
   b9be8:	f340 8124 	ble.w	b9e34 <_strtod_l+0x84c>
   b9bec:	2b34      	cmp	r3, #52	; 0x34
   b9bee:	bfde      	ittt	le
   b9bf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9bf4:	f04f 33ff 	movle.w	r3, #4294967295
   b9bf8:	fa03 f202 	lslle.w	r2, r3, r2
   b9bfc:	f04f 0a00 	mov.w	sl, #0
   b9c00:	bfcc      	ite	gt
   b9c02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9c06:	ea02 0b01 	andle.w	fp, r2, r1
   b9c0a:	2200      	movs	r2, #0
   b9c0c:	2300      	movs	r3, #0
   b9c0e:	4650      	mov	r0, sl
   b9c10:	4659      	mov	r1, fp
   b9c12:	f7fa fe29 	bl	b4868 <__aeabi_dcmpeq>
   b9c16:	2800      	cmp	r0, #0
   b9c18:	d1a2      	bne.n	b9b60 <_strtod_l+0x578>
   b9c1a:	9b07      	ldr	r3, [sp, #28]
   b9c1c:	9300      	str	r3, [sp, #0]
   b9c1e:	9908      	ldr	r1, [sp, #32]
   b9c20:	462b      	mov	r3, r5
   b9c22:	463a      	mov	r2, r7
   b9c24:	4620      	mov	r0, r4
   b9c26:	f001 f85d 	bl	bace4 <__s2b>
   b9c2a:	9007      	str	r0, [sp, #28]
   b9c2c:	2800      	cmp	r0, #0
   b9c2e:	f43f af1f 	beq.w	b9a70 <_strtod_l+0x488>
   b9c32:	9b05      	ldr	r3, [sp, #20]
   b9c34:	1b9e      	subs	r6, r3, r6
   b9c36:	9b06      	ldr	r3, [sp, #24]
   b9c38:	2b00      	cmp	r3, #0
   b9c3a:	bfb4      	ite	lt
   b9c3c:	4633      	movlt	r3, r6
   b9c3e:	2300      	movge	r3, #0
   b9c40:	930c      	str	r3, [sp, #48]	; 0x30
   b9c42:	9b06      	ldr	r3, [sp, #24]
   b9c44:	2500      	movs	r5, #0
   b9c46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9c4a:	9312      	str	r3, [sp, #72]	; 0x48
   b9c4c:	462e      	mov	r6, r5
   b9c4e:	9b07      	ldr	r3, [sp, #28]
   b9c50:	4620      	mov	r0, r4
   b9c52:	6859      	ldr	r1, [r3, #4]
   b9c54:	f000 ff9e 	bl	bab94 <_Balloc>
   b9c58:	9005      	str	r0, [sp, #20]
   b9c5a:	2800      	cmp	r0, #0
   b9c5c:	f43f af0c 	beq.w	b9a78 <_strtod_l+0x490>
   b9c60:	9b07      	ldr	r3, [sp, #28]
   b9c62:	691a      	ldr	r2, [r3, #16]
   b9c64:	3202      	adds	r2, #2
   b9c66:	f103 010c 	add.w	r1, r3, #12
   b9c6a:	0092      	lsls	r2, r2, #2
   b9c6c:	300c      	adds	r0, #12
   b9c6e:	f7ff fbf9 	bl	b9464 <memcpy>
   b9c72:	ec4b ab10 	vmov	d0, sl, fp
   b9c76:	aa1a      	add	r2, sp, #104	; 0x68
   b9c78:	a919      	add	r1, sp, #100	; 0x64
   b9c7a:	4620      	mov	r0, r4
   b9c7c:	f001 fb78 	bl	bb370 <__d2b>
   b9c80:	ec4b ab18 	vmov	d8, sl, fp
   b9c84:	9018      	str	r0, [sp, #96]	; 0x60
   b9c86:	2800      	cmp	r0, #0
   b9c88:	f43f aef6 	beq.w	b9a78 <_strtod_l+0x490>
   b9c8c:	2101      	movs	r1, #1
   b9c8e:	4620      	mov	r0, r4
   b9c90:	f001 f8c2 	bl	bae18 <__i2b>
   b9c94:	4606      	mov	r6, r0
   b9c96:	2800      	cmp	r0, #0
   b9c98:	f43f aeee 	beq.w	b9a78 <_strtod_l+0x490>
   b9c9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9c9e:	9904      	ldr	r1, [sp, #16]
   b9ca0:	2b00      	cmp	r3, #0
   b9ca2:	bfab      	itete	ge
   b9ca4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9ca6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9ca8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9caa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9cae:	bfac      	ite	ge
   b9cb0:	eb03 0902 	addge.w	r9, r3, r2
   b9cb4:	1ad7      	sublt	r7, r2, r3
   b9cb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9cb8:	eba3 0801 	sub.w	r8, r3, r1
   b9cbc:	4490      	add	r8, r2
   b9cbe:	4ba1      	ldr	r3, [pc, #644]	; (b9f44 <_strtod_l+0x95c>)
   b9cc0:	f108 38ff 	add.w	r8, r8, #4294967295
   b9cc4:	4598      	cmp	r8, r3
   b9cc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9cca:	f280 80c7 	bge.w	b9e5c <_strtod_l+0x874>
   b9cce:	eba3 0308 	sub.w	r3, r3, r8
   b9cd2:	2b1f      	cmp	r3, #31
   b9cd4:	eba2 0203 	sub.w	r2, r2, r3
   b9cd8:	f04f 0101 	mov.w	r1, #1
   b9cdc:	f300 80b1 	bgt.w	b9e42 <_strtod_l+0x85a>
   b9ce0:	fa01 f303 	lsl.w	r3, r1, r3
   b9ce4:	930d      	str	r3, [sp, #52]	; 0x34
   b9ce6:	2300      	movs	r3, #0
   b9ce8:	9308      	str	r3, [sp, #32]
   b9cea:	eb09 0802 	add.w	r8, r9, r2
   b9cee:	9b04      	ldr	r3, [sp, #16]
   b9cf0:	45c1      	cmp	r9, r8
   b9cf2:	4417      	add	r7, r2
   b9cf4:	441f      	add	r7, r3
   b9cf6:	464b      	mov	r3, r9
   b9cf8:	bfa8      	it	ge
   b9cfa:	4643      	movge	r3, r8
   b9cfc:	42bb      	cmp	r3, r7
   b9cfe:	bfa8      	it	ge
   b9d00:	463b      	movge	r3, r7
   b9d02:	2b00      	cmp	r3, #0
   b9d04:	bfc2      	ittt	gt
   b9d06:	eba8 0803 	subgt.w	r8, r8, r3
   b9d0a:	1aff      	subgt	r7, r7, r3
   b9d0c:	eba9 0903 	subgt.w	r9, r9, r3
   b9d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9d12:	2b00      	cmp	r3, #0
   b9d14:	dd17      	ble.n	b9d46 <_strtod_l+0x75e>
   b9d16:	4631      	mov	r1, r6
   b9d18:	461a      	mov	r2, r3
   b9d1a:	4620      	mov	r0, r4
   b9d1c:	f001 f93c 	bl	baf98 <__pow5mult>
   b9d20:	4606      	mov	r6, r0
   b9d22:	2800      	cmp	r0, #0
   b9d24:	f43f aea8 	beq.w	b9a78 <_strtod_l+0x490>
   b9d28:	4601      	mov	r1, r0
   b9d2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9d2c:	4620      	mov	r0, r4
   b9d2e:	f001 f889 	bl	bae44 <__multiply>
   b9d32:	900b      	str	r0, [sp, #44]	; 0x2c
   b9d34:	2800      	cmp	r0, #0
   b9d36:	f43f ae9f 	beq.w	b9a78 <_strtod_l+0x490>
   b9d3a:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d3c:	4620      	mov	r0, r4
   b9d3e:	f000 ff69 	bl	bac14 <_Bfree>
   b9d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9d44:	9318      	str	r3, [sp, #96]	; 0x60
   b9d46:	f1b8 0f00 	cmp.w	r8, #0
   b9d4a:	f300 808c 	bgt.w	b9e66 <_strtod_l+0x87e>
   b9d4e:	9b06      	ldr	r3, [sp, #24]
   b9d50:	2b00      	cmp	r3, #0
   b9d52:	dd08      	ble.n	b9d66 <_strtod_l+0x77e>
   b9d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9d56:	9905      	ldr	r1, [sp, #20]
   b9d58:	4620      	mov	r0, r4
   b9d5a:	f001 f91d 	bl	baf98 <__pow5mult>
   b9d5e:	9005      	str	r0, [sp, #20]
   b9d60:	2800      	cmp	r0, #0
   b9d62:	f43f ae89 	beq.w	b9a78 <_strtod_l+0x490>
   b9d66:	2f00      	cmp	r7, #0
   b9d68:	dd08      	ble.n	b9d7c <_strtod_l+0x794>
   b9d6a:	9905      	ldr	r1, [sp, #20]
   b9d6c:	463a      	mov	r2, r7
   b9d6e:	4620      	mov	r0, r4
   b9d70:	f001 f96c 	bl	bb04c <__lshift>
   b9d74:	9005      	str	r0, [sp, #20]
   b9d76:	2800      	cmp	r0, #0
   b9d78:	f43f ae7e 	beq.w	b9a78 <_strtod_l+0x490>
   b9d7c:	f1b9 0f00 	cmp.w	r9, #0
   b9d80:	dd08      	ble.n	b9d94 <_strtod_l+0x7ac>
   b9d82:	4631      	mov	r1, r6
   b9d84:	464a      	mov	r2, r9
   b9d86:	4620      	mov	r0, r4
   b9d88:	f001 f960 	bl	bb04c <__lshift>
   b9d8c:	4606      	mov	r6, r0
   b9d8e:	2800      	cmp	r0, #0
   b9d90:	f43f ae72 	beq.w	b9a78 <_strtod_l+0x490>
   b9d94:	9a05      	ldr	r2, [sp, #20]
   b9d96:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d98:	4620      	mov	r0, r4
   b9d9a:	f001 f9e3 	bl	bb164 <__mdiff>
   b9d9e:	4605      	mov	r5, r0
   b9da0:	2800      	cmp	r0, #0
   b9da2:	f43f ae69 	beq.w	b9a78 <_strtod_l+0x490>
   b9da6:	68c3      	ldr	r3, [r0, #12]
   b9da8:	930b      	str	r3, [sp, #44]	; 0x2c
   b9daa:	2300      	movs	r3, #0
   b9dac:	60c3      	str	r3, [r0, #12]
   b9dae:	4631      	mov	r1, r6
   b9db0:	f001 f9bc 	bl	bb12c <__mcmp>
   b9db4:	2800      	cmp	r0, #0
   b9db6:	da60      	bge.n	b9e7a <_strtod_l+0x892>
   b9db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9dba:	ea53 030a 	orrs.w	r3, r3, sl
   b9dbe:	f040 8082 	bne.w	b9ec6 <_strtod_l+0x8de>
   b9dc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9dc6:	2b00      	cmp	r3, #0
   b9dc8:	d17d      	bne.n	b9ec6 <_strtod_l+0x8de>
   b9dca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9dce:	0d1b      	lsrs	r3, r3, #20
   b9dd0:	051b      	lsls	r3, r3, #20
   b9dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9dd6:	d976      	bls.n	b9ec6 <_strtod_l+0x8de>
   b9dd8:	696b      	ldr	r3, [r5, #20]
   b9dda:	b913      	cbnz	r3, b9de2 <_strtod_l+0x7fa>
   b9ddc:	692b      	ldr	r3, [r5, #16]
   b9dde:	2b01      	cmp	r3, #1
   b9de0:	dd71      	ble.n	b9ec6 <_strtod_l+0x8de>
   b9de2:	4629      	mov	r1, r5
   b9de4:	2201      	movs	r2, #1
   b9de6:	4620      	mov	r0, r4
   b9de8:	f001 f930 	bl	bb04c <__lshift>
   b9dec:	4631      	mov	r1, r6
   b9dee:	4605      	mov	r5, r0
   b9df0:	f001 f99c 	bl	bb12c <__mcmp>
   b9df4:	2800      	cmp	r0, #0
   b9df6:	dd66      	ble.n	b9ec6 <_strtod_l+0x8de>
   b9df8:	9904      	ldr	r1, [sp, #16]
   b9dfa:	4a53      	ldr	r2, [pc, #332]	; (b9f48 <_strtod_l+0x960>)
   b9dfc:	465b      	mov	r3, fp
   b9dfe:	2900      	cmp	r1, #0
   b9e00:	f000 8081 	beq.w	b9f06 <_strtod_l+0x91e>
   b9e04:	ea02 010b 	and.w	r1, r2, fp
   b9e08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b9e0c:	dc7b      	bgt.n	b9f06 <_strtod_l+0x91e>
   b9e0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b9e12:	f77f aea9 	ble.w	b9b68 <_strtod_l+0x580>
   b9e16:	4b4d      	ldr	r3, [pc, #308]	; (b9f4c <_strtod_l+0x964>)
   b9e18:	4650      	mov	r0, sl
   b9e1a:	4659      	mov	r1, fp
   b9e1c:	2200      	movs	r2, #0
   b9e1e:	f7fa fabb 	bl	b4398 <__aeabi_dmul>
   b9e22:	460b      	mov	r3, r1
   b9e24:	4303      	orrs	r3, r0
   b9e26:	bf08      	it	eq
   b9e28:	2322      	moveq	r3, #34	; 0x22
   b9e2a:	4682      	mov	sl, r0
   b9e2c:	468b      	mov	fp, r1
   b9e2e:	bf08      	it	eq
   b9e30:	6023      	streq	r3, [r4, #0]
   b9e32:	e62b      	b.n	b9a8c <_strtod_l+0x4a4>
   b9e34:	f04f 32ff 	mov.w	r2, #4294967295
   b9e38:	fa02 f303 	lsl.w	r3, r2, r3
   b9e3c:	ea03 0a0a 	and.w	sl, r3, sl
   b9e40:	e6e3      	b.n	b9c0a <_strtod_l+0x622>
   b9e42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b9e46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b9e4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b9e4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b9e52:	fa01 f308 	lsl.w	r3, r1, r8
   b9e56:	9308      	str	r3, [sp, #32]
   b9e58:	910d      	str	r1, [sp, #52]	; 0x34
   b9e5a:	e746      	b.n	b9cea <_strtod_l+0x702>
   b9e5c:	2300      	movs	r3, #0
   b9e5e:	9308      	str	r3, [sp, #32]
   b9e60:	2301      	movs	r3, #1
   b9e62:	930d      	str	r3, [sp, #52]	; 0x34
   b9e64:	e741      	b.n	b9cea <_strtod_l+0x702>
   b9e66:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9e68:	4642      	mov	r2, r8
   b9e6a:	4620      	mov	r0, r4
   b9e6c:	f001 f8ee 	bl	bb04c <__lshift>
   b9e70:	9018      	str	r0, [sp, #96]	; 0x60
   b9e72:	2800      	cmp	r0, #0
   b9e74:	f47f af6b 	bne.w	b9d4e <_strtod_l+0x766>
   b9e78:	e5fe      	b.n	b9a78 <_strtod_l+0x490>
   b9e7a:	465f      	mov	r7, fp
   b9e7c:	d16e      	bne.n	b9f5c <_strtod_l+0x974>
   b9e7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9e80:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9e84:	b342      	cbz	r2, b9ed8 <_strtod_l+0x8f0>
   b9e86:	4a32      	ldr	r2, [pc, #200]	; (b9f50 <_strtod_l+0x968>)
   b9e88:	4293      	cmp	r3, r2
   b9e8a:	d128      	bne.n	b9ede <_strtod_l+0x8f6>
   b9e8c:	9b04      	ldr	r3, [sp, #16]
   b9e8e:	4651      	mov	r1, sl
   b9e90:	b1eb      	cbz	r3, b9ece <_strtod_l+0x8e6>
   b9e92:	4b2d      	ldr	r3, [pc, #180]	; (b9f48 <_strtod_l+0x960>)
   b9e94:	403b      	ands	r3, r7
   b9e96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9e9a:	f04f 32ff 	mov.w	r2, #4294967295
   b9e9e:	d819      	bhi.n	b9ed4 <_strtod_l+0x8ec>
   b9ea0:	0d1b      	lsrs	r3, r3, #20
   b9ea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9ea6:	fa02 f303 	lsl.w	r3, r2, r3
   b9eaa:	4299      	cmp	r1, r3
   b9eac:	d117      	bne.n	b9ede <_strtod_l+0x8f6>
   b9eae:	4b29      	ldr	r3, [pc, #164]	; (b9f54 <_strtod_l+0x96c>)
   b9eb0:	429f      	cmp	r7, r3
   b9eb2:	d102      	bne.n	b9eba <_strtod_l+0x8d2>
   b9eb4:	3101      	adds	r1, #1
   b9eb6:	f43f addf 	beq.w	b9a78 <_strtod_l+0x490>
   b9eba:	4b23      	ldr	r3, [pc, #140]	; (b9f48 <_strtod_l+0x960>)
   b9ebc:	403b      	ands	r3, r7
   b9ebe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9ec2:	f04f 0a00 	mov.w	sl, #0
   b9ec6:	9b04      	ldr	r3, [sp, #16]
   b9ec8:	2b00      	cmp	r3, #0
   b9eca:	d1a4      	bne.n	b9e16 <_strtod_l+0x82e>
   b9ecc:	e5de      	b.n	b9a8c <_strtod_l+0x4a4>
   b9ece:	f04f 33ff 	mov.w	r3, #4294967295
   b9ed2:	e7ea      	b.n	b9eaa <_strtod_l+0x8c2>
   b9ed4:	4613      	mov	r3, r2
   b9ed6:	e7e8      	b.n	b9eaa <_strtod_l+0x8c2>
   b9ed8:	ea53 030a 	orrs.w	r3, r3, sl
   b9edc:	d08c      	beq.n	b9df8 <_strtod_l+0x810>
   b9ede:	9b08      	ldr	r3, [sp, #32]
   b9ee0:	b1db      	cbz	r3, b9f1a <_strtod_l+0x932>
   b9ee2:	423b      	tst	r3, r7
   b9ee4:	d0ef      	beq.n	b9ec6 <_strtod_l+0x8de>
   b9ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9ee8:	9a04      	ldr	r2, [sp, #16]
   b9eea:	4650      	mov	r0, sl
   b9eec:	4659      	mov	r1, fp
   b9eee:	b1c3      	cbz	r3, b9f22 <_strtod_l+0x93a>
   b9ef0:	f7ff fb5b 	bl	b95aa <sulp>
   b9ef4:	4602      	mov	r2, r0
   b9ef6:	460b      	mov	r3, r1
   b9ef8:	ec51 0b18 	vmov	r0, r1, d8
   b9efc:	f7fa f896 	bl	b402c <__adddf3>
   b9f00:	4682      	mov	sl, r0
   b9f02:	468b      	mov	fp, r1
   b9f04:	e7df      	b.n	b9ec6 <_strtod_l+0x8de>
   b9f06:	4013      	ands	r3, r2
   b9f08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9f0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9f10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9f14:	f04f 3aff 	mov.w	sl, #4294967295
   b9f18:	e7d5      	b.n	b9ec6 <_strtod_l+0x8de>
   b9f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9f1c:	ea13 0f0a 	tst.w	r3, sl
   b9f20:	e7e0      	b.n	b9ee4 <_strtod_l+0x8fc>
   b9f22:	f7ff fb42 	bl	b95aa <sulp>
   b9f26:	4602      	mov	r2, r0
   b9f28:	460b      	mov	r3, r1
   b9f2a:	ec51 0b18 	vmov	r0, r1, d8
   b9f2e:	f7fa f87b 	bl	b4028 <__aeabi_dsub>
   b9f32:	2200      	movs	r2, #0
   b9f34:	2300      	movs	r3, #0
   b9f36:	4682      	mov	sl, r0
   b9f38:	468b      	mov	fp, r1
   b9f3a:	f7fa fc95 	bl	b4868 <__aeabi_dcmpeq>
   b9f3e:	2800      	cmp	r0, #0
   b9f40:	d0c1      	beq.n	b9ec6 <_strtod_l+0x8de>
   b9f42:	e611      	b.n	b9b68 <_strtod_l+0x580>
   b9f44:	fffffc02 	.word	0xfffffc02
   b9f48:	7ff00000 	.word	0x7ff00000
   b9f4c:	39500000 	.word	0x39500000
   b9f50:	000fffff 	.word	0x000fffff
   b9f54:	7fefffff 	.word	0x7fefffff
   b9f58:	000bbf60 	.word	0x000bbf60
   b9f5c:	4631      	mov	r1, r6
   b9f5e:	4628      	mov	r0, r5
   b9f60:	f001 fa62 	bl	bb428 <__ratio>
   b9f64:	ec59 8b10 	vmov	r8, r9, d0
   b9f68:	ee10 0a10 	vmov	r0, s0
   b9f6c:	2200      	movs	r2, #0
   b9f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9f72:	4649      	mov	r1, r9
   b9f74:	f7fa fc8c 	bl	b4890 <__aeabi_dcmple>
   b9f78:	2800      	cmp	r0, #0
   b9f7a:	d07a      	beq.n	ba072 <_strtod_l+0xa8a>
   b9f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9f7e:	2b00      	cmp	r3, #0
   b9f80:	d04a      	beq.n	ba018 <_strtod_l+0xa30>
   b9f82:	4b95      	ldr	r3, [pc, #596]	; (ba1d8 <_strtod_l+0xbf0>)
   b9f84:	2200      	movs	r2, #0
   b9f86:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9f8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba1d8 <_strtod_l+0xbf0>
   b9f8e:	f04f 0800 	mov.w	r8, #0
   b9f92:	4b92      	ldr	r3, [pc, #584]	; (ba1dc <_strtod_l+0xbf4>)
   b9f94:	403b      	ands	r3, r7
   b9f96:	930d      	str	r3, [sp, #52]	; 0x34
   b9f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9f9a:	4b91      	ldr	r3, [pc, #580]	; (ba1e0 <_strtod_l+0xbf8>)
   b9f9c:	429a      	cmp	r2, r3
   b9f9e:	f040 80b0 	bne.w	ba102 <_strtod_l+0xb1a>
   b9fa2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9fa6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9faa:	ec4b ab10 	vmov	d0, sl, fp
   b9fae:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9fb2:	f001 f961 	bl	bb278 <__ulp>
   b9fb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9fba:	ec53 2b10 	vmov	r2, r3, d0
   b9fbe:	f7fa f9eb 	bl	b4398 <__aeabi_dmul>
   b9fc2:	4652      	mov	r2, sl
   b9fc4:	465b      	mov	r3, fp
   b9fc6:	f7fa f831 	bl	b402c <__adddf3>
   b9fca:	460b      	mov	r3, r1
   b9fcc:	4983      	ldr	r1, [pc, #524]	; (ba1dc <_strtod_l+0xbf4>)
   b9fce:	4a85      	ldr	r2, [pc, #532]	; (ba1e4 <_strtod_l+0xbfc>)
   b9fd0:	4019      	ands	r1, r3
   b9fd2:	4291      	cmp	r1, r2
   b9fd4:	4682      	mov	sl, r0
   b9fd6:	d960      	bls.n	ba09a <_strtod_l+0xab2>
   b9fd8:	ee18 3a90 	vmov	r3, s17
   b9fdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9fe0:	4293      	cmp	r3, r2
   b9fe2:	d104      	bne.n	b9fee <_strtod_l+0xa06>
   b9fe4:	ee18 3a10 	vmov	r3, s16
   b9fe8:	3301      	adds	r3, #1
   b9fea:	f43f ad45 	beq.w	b9a78 <_strtod_l+0x490>
   b9fee:	f8df b200 	ldr.w	fp, [pc, #512]	; ba1f0 <_strtod_l+0xc08>
   b9ff2:	f04f 3aff 	mov.w	sl, #4294967295
   b9ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9ff8:	4620      	mov	r0, r4
   b9ffa:	f000 fe0b 	bl	bac14 <_Bfree>
   b9ffe:	9905      	ldr	r1, [sp, #20]
   ba000:	4620      	mov	r0, r4
   ba002:	f000 fe07 	bl	bac14 <_Bfree>
   ba006:	4631      	mov	r1, r6
   ba008:	4620      	mov	r0, r4
   ba00a:	f000 fe03 	bl	bac14 <_Bfree>
   ba00e:	4629      	mov	r1, r5
   ba010:	4620      	mov	r0, r4
   ba012:	f000 fdff 	bl	bac14 <_Bfree>
   ba016:	e61a      	b.n	b9c4e <_strtod_l+0x666>
   ba018:	f1ba 0f00 	cmp.w	sl, #0
   ba01c:	d11b      	bne.n	ba056 <_strtod_l+0xa6e>
   ba01e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba022:	b9f3      	cbnz	r3, ba062 <_strtod_l+0xa7a>
   ba024:	4b6c      	ldr	r3, [pc, #432]	; (ba1d8 <_strtod_l+0xbf0>)
   ba026:	2200      	movs	r2, #0
   ba028:	4640      	mov	r0, r8
   ba02a:	4649      	mov	r1, r9
   ba02c:	f7fa fc26 	bl	b487c <__aeabi_dcmplt>
   ba030:	b9d0      	cbnz	r0, ba068 <_strtod_l+0xa80>
   ba032:	4640      	mov	r0, r8
   ba034:	4649      	mov	r1, r9
   ba036:	4b6c      	ldr	r3, [pc, #432]	; (ba1e8 <_strtod_l+0xc00>)
   ba038:	2200      	movs	r2, #0
   ba03a:	f7fa f9ad 	bl	b4398 <__aeabi_dmul>
   ba03e:	4680      	mov	r8, r0
   ba040:	4689      	mov	r9, r1
   ba042:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ba046:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   ba04a:	9315      	str	r3, [sp, #84]	; 0x54
   ba04c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ba050:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba054:	e79d      	b.n	b9f92 <_strtod_l+0x9aa>
   ba056:	f1ba 0f01 	cmp.w	sl, #1
   ba05a:	d102      	bne.n	ba062 <_strtod_l+0xa7a>
   ba05c:	2f00      	cmp	r7, #0
   ba05e:	f43f ad83 	beq.w	b9b68 <_strtod_l+0x580>
   ba062:	4b62      	ldr	r3, [pc, #392]	; (ba1ec <_strtod_l+0xc04>)
   ba064:	2200      	movs	r2, #0
   ba066:	e78e      	b.n	b9f86 <_strtod_l+0x99e>
   ba068:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba1e8 <_strtod_l+0xc00>
   ba06c:	f04f 0800 	mov.w	r8, #0
   ba070:	e7e7      	b.n	ba042 <_strtod_l+0xa5a>
   ba072:	4b5d      	ldr	r3, [pc, #372]	; (ba1e8 <_strtod_l+0xc00>)
   ba074:	4640      	mov	r0, r8
   ba076:	4649      	mov	r1, r9
   ba078:	2200      	movs	r2, #0
   ba07a:	f7fa f98d 	bl	b4398 <__aeabi_dmul>
   ba07e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba080:	4680      	mov	r8, r0
   ba082:	4689      	mov	r9, r1
   ba084:	b933      	cbnz	r3, ba094 <_strtod_l+0xaac>
   ba086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba08a:	900e      	str	r0, [sp, #56]	; 0x38
   ba08c:	930f      	str	r3, [sp, #60]	; 0x3c
   ba08e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   ba092:	e7dd      	b.n	ba050 <_strtod_l+0xa68>
   ba094:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   ba098:	e7f9      	b.n	ba08e <_strtod_l+0xaa6>
   ba09a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ba09e:	9b04      	ldr	r3, [sp, #16]
   ba0a0:	2b00      	cmp	r3, #0
   ba0a2:	d1a8      	bne.n	b9ff6 <_strtod_l+0xa0e>
   ba0a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba0a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba0aa:	0d1b      	lsrs	r3, r3, #20
   ba0ac:	051b      	lsls	r3, r3, #20
   ba0ae:	429a      	cmp	r2, r3
   ba0b0:	d1a1      	bne.n	b9ff6 <_strtod_l+0xa0e>
   ba0b2:	4640      	mov	r0, r8
   ba0b4:	4649      	mov	r1, r9
   ba0b6:	f7fa fd15 	bl	b4ae4 <__aeabi_d2lz>
   ba0ba:	f7fa f93f 	bl	b433c <__aeabi_l2d>
   ba0be:	4602      	mov	r2, r0
   ba0c0:	460b      	mov	r3, r1
   ba0c2:	4640      	mov	r0, r8
   ba0c4:	4649      	mov	r1, r9
   ba0c6:	f7f9 ffaf 	bl	b4028 <__aeabi_dsub>
   ba0ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba0cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba0d0:	ea43 030a 	orr.w	r3, r3, sl
   ba0d4:	4313      	orrs	r3, r2
   ba0d6:	4680      	mov	r8, r0
   ba0d8:	4689      	mov	r9, r1
   ba0da:	d055      	beq.n	ba188 <_strtod_l+0xba0>
   ba0dc:	a336      	add	r3, pc, #216	; (adr r3, ba1b8 <_strtod_l+0xbd0>)
   ba0de:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0e2:	f7fa fbcb 	bl	b487c <__aeabi_dcmplt>
   ba0e6:	2800      	cmp	r0, #0
   ba0e8:	f47f acd0 	bne.w	b9a8c <_strtod_l+0x4a4>
   ba0ec:	a334      	add	r3, pc, #208	; (adr r3, ba1c0 <_strtod_l+0xbd8>)
   ba0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0f2:	4640      	mov	r0, r8
   ba0f4:	4649      	mov	r1, r9
   ba0f6:	f7fa fbdf 	bl	b48b8 <__aeabi_dcmpgt>
   ba0fa:	2800      	cmp	r0, #0
   ba0fc:	f43f af7b 	beq.w	b9ff6 <_strtod_l+0xa0e>
   ba100:	e4c4      	b.n	b9a8c <_strtod_l+0x4a4>
   ba102:	9b04      	ldr	r3, [sp, #16]
   ba104:	b333      	cbz	r3, ba154 <_strtod_l+0xb6c>
   ba106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba108:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba10c:	d822      	bhi.n	ba154 <_strtod_l+0xb6c>
   ba10e:	a32e      	add	r3, pc, #184	; (adr r3, ba1c8 <_strtod_l+0xbe0>)
   ba110:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba114:	4640      	mov	r0, r8
   ba116:	4649      	mov	r1, r9
   ba118:	f7fa fbba 	bl	b4890 <__aeabi_dcmple>
   ba11c:	b1a0      	cbz	r0, ba148 <_strtod_l+0xb60>
   ba11e:	4649      	mov	r1, r9
   ba120:	4640      	mov	r0, r8
   ba122:	f7fa fbe9 	bl	b48f8 <__aeabi_d2uiz>
   ba126:	2801      	cmp	r0, #1
   ba128:	bf38      	it	cc
   ba12a:	2001      	movcc	r0, #1
   ba12c:	f7fa f8ba 	bl	b42a4 <__aeabi_ui2d>
   ba130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba132:	4680      	mov	r8, r0
   ba134:	4689      	mov	r9, r1
   ba136:	bb23      	cbnz	r3, ba182 <_strtod_l+0xb9a>
   ba138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba13c:	9010      	str	r0, [sp, #64]	; 0x40
   ba13e:	9311      	str	r3, [sp, #68]	; 0x44
   ba140:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba144:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba148:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba14a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba14c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba150:	1a9b      	subs	r3, r3, r2
   ba152:	9309      	str	r3, [sp, #36]	; 0x24
   ba154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba158:	eeb0 0a48 	vmov.f32	s0, s16
   ba15c:	eef0 0a68 	vmov.f32	s1, s17
   ba160:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba164:	f001 f888 	bl	bb278 <__ulp>
   ba168:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba16c:	ec53 2b10 	vmov	r2, r3, d0
   ba170:	f7fa f912 	bl	b4398 <__aeabi_dmul>
   ba174:	ec53 2b18 	vmov	r2, r3, d8
   ba178:	f7f9 ff58 	bl	b402c <__adddf3>
   ba17c:	4682      	mov	sl, r0
   ba17e:	468b      	mov	fp, r1
   ba180:	e78d      	b.n	ba09e <_strtod_l+0xab6>
   ba182:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba186:	e7db      	b.n	ba140 <_strtod_l+0xb58>
   ba188:	a311      	add	r3, pc, #68	; (adr r3, ba1d0 <_strtod_l+0xbe8>)
   ba18a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba18e:	f7fa fb75 	bl	b487c <__aeabi_dcmplt>
   ba192:	e7b2      	b.n	ba0fa <_strtod_l+0xb12>
   ba194:	2300      	movs	r3, #0
   ba196:	930a      	str	r3, [sp, #40]	; 0x28
   ba198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba19a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba19c:	6013      	str	r3, [r2, #0]
   ba19e:	f7ff ba6b 	b.w	b9678 <_strtod_l+0x90>
   ba1a2:	2a65      	cmp	r2, #101	; 0x65
   ba1a4:	f43f ab5f 	beq.w	b9866 <_strtod_l+0x27e>
   ba1a8:	2a45      	cmp	r2, #69	; 0x45
   ba1aa:	f43f ab5c 	beq.w	b9866 <_strtod_l+0x27e>
   ba1ae:	2301      	movs	r3, #1
   ba1b0:	f7ff bb94 	b.w	b98dc <_strtod_l+0x2f4>
   ba1b4:	f3af 8000 	nop.w
   ba1b8:	94a03595 	.word	0x94a03595
   ba1bc:	3fdfffff 	.word	0x3fdfffff
   ba1c0:	35afe535 	.word	0x35afe535
   ba1c4:	3fe00000 	.word	0x3fe00000
   ba1c8:	ffc00000 	.word	0xffc00000
   ba1cc:	41dfffff 	.word	0x41dfffff
   ba1d0:	94a03595 	.word	0x94a03595
   ba1d4:	3fcfffff 	.word	0x3fcfffff
   ba1d8:	3ff00000 	.word	0x3ff00000
   ba1dc:	7ff00000 	.word	0x7ff00000
   ba1e0:	7fe00000 	.word	0x7fe00000
   ba1e4:	7c9fffff 	.word	0x7c9fffff
   ba1e8:	3fe00000 	.word	0x3fe00000
   ba1ec:	bff00000 	.word	0xbff00000
   ba1f0:	7fefffff 	.word	0x7fefffff

000ba1f4 <strtof>:
   ba1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba1f8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; ba2a8 <strtof+0xb4>
   ba1fc:	4b26      	ldr	r3, [pc, #152]	; (ba298 <strtof+0xa4>)
   ba1fe:	460a      	mov	r2, r1
   ba200:	ed2d 8b02 	vpush	{d8}
   ba204:	4601      	mov	r1, r0
   ba206:	f8d8 0000 	ldr.w	r0, [r8]
   ba20a:	f7ff f9ed 	bl	b95e8 <_strtod_l>
   ba20e:	ec55 4b10 	vmov	r4, r5, d0
   ba212:	ee10 2a10 	vmov	r2, s0
   ba216:	ee10 0a10 	vmov	r0, s0
   ba21a:	462b      	mov	r3, r5
   ba21c:	4629      	mov	r1, r5
   ba21e:	f7fa fb55 	bl	b48cc <__aeabi_dcmpun>
   ba222:	b190      	cbz	r0, ba24a <strtof+0x56>
   ba224:	2d00      	cmp	r5, #0
   ba226:	481d      	ldr	r0, [pc, #116]	; (ba29c <strtof+0xa8>)
   ba228:	da09      	bge.n	ba23e <strtof+0x4a>
   ba22a:	f001 f98d 	bl	bb548 <nanf>
   ba22e:	eeb1 8a40 	vneg.f32	s16, s0
   ba232:	eeb0 0a48 	vmov.f32	s0, s16
   ba236:	ecbd 8b02 	vpop	{d8}
   ba23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba23e:	ecbd 8b02 	vpop	{d8}
   ba242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba246:	f001 b97f 	b.w	bb548 <nanf>
   ba24a:	4620      	mov	r0, r4
   ba24c:	4629      	mov	r1, r5
   ba24e:	f7fa fb73 	bl	b4938 <__aeabi_d2f>
   ba252:	ee08 0a10 	vmov	s16, r0
   ba256:	eddf 7a12 	vldr	s15, [pc, #72]	; ba2a0 <strtof+0xac>
   ba25a:	eeb0 7ac8 	vabs.f32	s14, s16
   ba25e:	eeb4 7a67 	vcmp.f32	s14, s15
   ba262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba266:	dde4      	ble.n	ba232 <strtof+0x3e>
   ba268:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   ba26c:	4b0d      	ldr	r3, [pc, #52]	; (ba2a4 <strtof+0xb0>)
   ba26e:	f04f 32ff 	mov.w	r2, #4294967295
   ba272:	4620      	mov	r0, r4
   ba274:	4639      	mov	r1, r7
   ba276:	f7fa fb29 	bl	b48cc <__aeabi_dcmpun>
   ba27a:	b940      	cbnz	r0, ba28e <strtof+0x9a>
   ba27c:	4b09      	ldr	r3, [pc, #36]	; (ba2a4 <strtof+0xb0>)
   ba27e:	f04f 32ff 	mov.w	r2, #4294967295
   ba282:	4620      	mov	r0, r4
   ba284:	4639      	mov	r1, r7
   ba286:	f7fa fb03 	bl	b4890 <__aeabi_dcmple>
   ba28a:	2800      	cmp	r0, #0
   ba28c:	d0d1      	beq.n	ba232 <strtof+0x3e>
   ba28e:	f8d8 3000 	ldr.w	r3, [r8]
   ba292:	2222      	movs	r2, #34	; 0x22
   ba294:	601a      	str	r2, [r3, #0]
   ba296:	e7cc      	b.n	ba232 <strtof+0x3e>
   ba298:	2003e378 	.word	0x2003e378
   ba29c:	000bbe58 	.word	0x000bbe58
   ba2a0:	7f7fffff 	.word	0x7f7fffff
   ba2a4:	7fefffff 	.word	0x7fefffff
   ba2a8:	2003e30c 	.word	0x2003e30c

000ba2ac <_strtol_l.constprop.0>:
   ba2ac:	2b01      	cmp	r3, #1
   ba2ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba2b2:	d001      	beq.n	ba2b8 <_strtol_l.constprop.0+0xc>
   ba2b4:	2b24      	cmp	r3, #36	; 0x24
   ba2b6:	d906      	bls.n	ba2c6 <_strtol_l.constprop.0+0x1a>
   ba2b8:	f7fc f832 	bl	b6320 <__errno>
   ba2bc:	2316      	movs	r3, #22
   ba2be:	6003      	str	r3, [r0, #0]
   ba2c0:	2000      	movs	r0, #0
   ba2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba2c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba3ac <_strtol_l.constprop.0+0x100>
   ba2ca:	460d      	mov	r5, r1
   ba2cc:	462e      	mov	r6, r5
   ba2ce:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba2d2:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba2d6:	f017 0708 	ands.w	r7, r7, #8
   ba2da:	d1f7      	bne.n	ba2cc <_strtol_l.constprop.0+0x20>
   ba2dc:	2c2d      	cmp	r4, #45	; 0x2d
   ba2de:	d132      	bne.n	ba346 <_strtol_l.constprop.0+0x9a>
   ba2e0:	782c      	ldrb	r4, [r5, #0]
   ba2e2:	2701      	movs	r7, #1
   ba2e4:	1cb5      	adds	r5, r6, #2
   ba2e6:	2b00      	cmp	r3, #0
   ba2e8:	d05b      	beq.n	ba3a2 <_strtol_l.constprop.0+0xf6>
   ba2ea:	2b10      	cmp	r3, #16
   ba2ec:	d109      	bne.n	ba302 <_strtol_l.constprop.0+0x56>
   ba2ee:	2c30      	cmp	r4, #48	; 0x30
   ba2f0:	d107      	bne.n	ba302 <_strtol_l.constprop.0+0x56>
   ba2f2:	782c      	ldrb	r4, [r5, #0]
   ba2f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba2f8:	2c58      	cmp	r4, #88	; 0x58
   ba2fa:	d14d      	bne.n	ba398 <_strtol_l.constprop.0+0xec>
   ba2fc:	786c      	ldrb	r4, [r5, #1]
   ba2fe:	2310      	movs	r3, #16
   ba300:	3502      	adds	r5, #2
   ba302:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba306:	f108 38ff 	add.w	r8, r8, #4294967295
   ba30a:	f04f 0c00 	mov.w	ip, #0
   ba30e:	fbb8 f9f3 	udiv	r9, r8, r3
   ba312:	4666      	mov	r6, ip
   ba314:	fb03 8a19 	mls	sl, r3, r9, r8
   ba318:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba31c:	f1be 0f09 	cmp.w	lr, #9
   ba320:	d816      	bhi.n	ba350 <_strtol_l.constprop.0+0xa4>
   ba322:	4674      	mov	r4, lr
   ba324:	42a3      	cmp	r3, r4
   ba326:	dd24      	ble.n	ba372 <_strtol_l.constprop.0+0xc6>
   ba328:	f1bc 0f00 	cmp.w	ip, #0
   ba32c:	db1e      	blt.n	ba36c <_strtol_l.constprop.0+0xc0>
   ba32e:	45b1      	cmp	r9, r6
   ba330:	d31c      	bcc.n	ba36c <_strtol_l.constprop.0+0xc0>
   ba332:	d101      	bne.n	ba338 <_strtol_l.constprop.0+0x8c>
   ba334:	45a2      	cmp	sl, r4
   ba336:	db19      	blt.n	ba36c <_strtol_l.constprop.0+0xc0>
   ba338:	fb06 4603 	mla	r6, r6, r3, r4
   ba33c:	f04f 0c01 	mov.w	ip, #1
   ba340:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba344:	e7e8      	b.n	ba318 <_strtol_l.constprop.0+0x6c>
   ba346:	2c2b      	cmp	r4, #43	; 0x2b
   ba348:	bf04      	itt	eq
   ba34a:	782c      	ldrbeq	r4, [r5, #0]
   ba34c:	1cb5      	addeq	r5, r6, #2
   ba34e:	e7ca      	b.n	ba2e6 <_strtol_l.constprop.0+0x3a>
   ba350:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba354:	f1be 0f19 	cmp.w	lr, #25
   ba358:	d801      	bhi.n	ba35e <_strtol_l.constprop.0+0xb2>
   ba35a:	3c37      	subs	r4, #55	; 0x37
   ba35c:	e7e2      	b.n	ba324 <_strtol_l.constprop.0+0x78>
   ba35e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba362:	f1be 0f19 	cmp.w	lr, #25
   ba366:	d804      	bhi.n	ba372 <_strtol_l.constprop.0+0xc6>
   ba368:	3c57      	subs	r4, #87	; 0x57
   ba36a:	e7db      	b.n	ba324 <_strtol_l.constprop.0+0x78>
   ba36c:	f04f 3cff 	mov.w	ip, #4294967295
   ba370:	e7e6      	b.n	ba340 <_strtol_l.constprop.0+0x94>
   ba372:	f1bc 0f00 	cmp.w	ip, #0
   ba376:	da05      	bge.n	ba384 <_strtol_l.constprop.0+0xd8>
   ba378:	2322      	movs	r3, #34	; 0x22
   ba37a:	6003      	str	r3, [r0, #0]
   ba37c:	4646      	mov	r6, r8
   ba37e:	b942      	cbnz	r2, ba392 <_strtol_l.constprop.0+0xe6>
   ba380:	4630      	mov	r0, r6
   ba382:	e79e      	b.n	ba2c2 <_strtol_l.constprop.0+0x16>
   ba384:	b107      	cbz	r7, ba388 <_strtol_l.constprop.0+0xdc>
   ba386:	4276      	negs	r6, r6
   ba388:	2a00      	cmp	r2, #0
   ba38a:	d0f9      	beq.n	ba380 <_strtol_l.constprop.0+0xd4>
   ba38c:	f1bc 0f00 	cmp.w	ip, #0
   ba390:	d000      	beq.n	ba394 <_strtol_l.constprop.0+0xe8>
   ba392:	1e69      	subs	r1, r5, #1
   ba394:	6011      	str	r1, [r2, #0]
   ba396:	e7f3      	b.n	ba380 <_strtol_l.constprop.0+0xd4>
   ba398:	2430      	movs	r4, #48	; 0x30
   ba39a:	2b00      	cmp	r3, #0
   ba39c:	d1b1      	bne.n	ba302 <_strtol_l.constprop.0+0x56>
   ba39e:	2308      	movs	r3, #8
   ba3a0:	e7af      	b.n	ba302 <_strtol_l.constprop.0+0x56>
   ba3a2:	2c30      	cmp	r4, #48	; 0x30
   ba3a4:	d0a5      	beq.n	ba2f2 <_strtol_l.constprop.0+0x46>
   ba3a6:	230a      	movs	r3, #10
   ba3a8:	e7ab      	b.n	ba302 <_strtol_l.constprop.0+0x56>
   ba3aa:	bf00      	nop
   ba3ac:	000bbf89 	.word	0x000bbf89

000ba3b0 <strtol>:
   ba3b0:	4613      	mov	r3, r2
   ba3b2:	460a      	mov	r2, r1
   ba3b4:	4601      	mov	r1, r0
   ba3b6:	4802      	ldr	r0, [pc, #8]	; (ba3c0 <strtol+0x10>)
   ba3b8:	6800      	ldr	r0, [r0, #0]
   ba3ba:	f7ff bf77 	b.w	ba2ac <_strtol_l.constprop.0>
   ba3be:	bf00      	nop
   ba3c0:	2003e30c 	.word	0x2003e30c

000ba3c4 <__register_exitproc>:
   ba3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba3c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba484 <__register_exitproc+0xc0>
   ba3cc:	4606      	mov	r6, r0
   ba3ce:	f8d8 0000 	ldr.w	r0, [r8]
   ba3d2:	461f      	mov	r7, r3
   ba3d4:	460d      	mov	r5, r1
   ba3d6:	4691      	mov	r9, r2
   ba3d8:	f000 fbc6 	bl	bab68 <__retarget_lock_acquire_recursive>
   ba3dc:	4b25      	ldr	r3, [pc, #148]	; (ba474 <__register_exitproc+0xb0>)
   ba3de:	681c      	ldr	r4, [r3, #0]
   ba3e0:	b934      	cbnz	r4, ba3f0 <__register_exitproc+0x2c>
   ba3e2:	4c25      	ldr	r4, [pc, #148]	; (ba478 <__register_exitproc+0xb4>)
   ba3e4:	601c      	str	r4, [r3, #0]
   ba3e6:	4b25      	ldr	r3, [pc, #148]	; (ba47c <__register_exitproc+0xb8>)
   ba3e8:	b113      	cbz	r3, ba3f0 <__register_exitproc+0x2c>
   ba3ea:	681b      	ldr	r3, [r3, #0]
   ba3ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba3f0:	6863      	ldr	r3, [r4, #4]
   ba3f2:	2b1f      	cmp	r3, #31
   ba3f4:	dd07      	ble.n	ba406 <__register_exitproc+0x42>
   ba3f6:	f8d8 0000 	ldr.w	r0, [r8]
   ba3fa:	f000 fbb7 	bl	bab6c <__retarget_lock_release_recursive>
   ba3fe:	f04f 30ff 	mov.w	r0, #4294967295
   ba402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba406:	b34e      	cbz	r6, ba45c <__register_exitproc+0x98>
   ba408:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba40c:	b988      	cbnz	r0, ba432 <__register_exitproc+0x6e>
   ba40e:	4b1c      	ldr	r3, [pc, #112]	; (ba480 <__register_exitproc+0xbc>)
   ba410:	b923      	cbnz	r3, ba41c <__register_exitproc+0x58>
   ba412:	f8d8 0000 	ldr.w	r0, [r8]
   ba416:	f000 fba8 	bl	bab6a <__retarget_lock_release>
   ba41a:	e7f0      	b.n	ba3fe <__register_exitproc+0x3a>
   ba41c:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba420:	f7fb ff46 	bl	b62b0 <malloc>
   ba424:	2800      	cmp	r0, #0
   ba426:	d0f4      	beq.n	ba412 <__register_exitproc+0x4e>
   ba428:	2300      	movs	r3, #0
   ba42a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba42e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba432:	6863      	ldr	r3, [r4, #4]
   ba434:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba438:	2201      	movs	r2, #1
   ba43a:	409a      	lsls	r2, r3
   ba43c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba440:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba444:	4313      	orrs	r3, r2
   ba446:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba44a:	2e02      	cmp	r6, #2
   ba44c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba450:	bf02      	ittt	eq
   ba452:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba456:	4313      	orreq	r3, r2
   ba458:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba45c:	6863      	ldr	r3, [r4, #4]
   ba45e:	f8d8 0000 	ldr.w	r0, [r8]
   ba462:	1c5a      	adds	r2, r3, #1
   ba464:	3302      	adds	r3, #2
   ba466:	6062      	str	r2, [r4, #4]
   ba468:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba46c:	f000 fb7e 	bl	bab6c <__retarget_lock_release_recursive>
   ba470:	2000      	movs	r0, #0
   ba472:	e7c6      	b.n	ba402 <__register_exitproc+0x3e>
   ba474:	2003e7ec 	.word	0x2003e7ec
   ba478:	2003e760 	.word	0x2003e760
   ba47c:	00000000 	.word	0x00000000
   ba480:	000b62b1 	.word	0x000b62b1
   ba484:	2003e370 	.word	0x2003e370

000ba488 <rshift>:
   ba488:	6903      	ldr	r3, [r0, #16]
   ba48a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba48e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba492:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba496:	f100 0414 	add.w	r4, r0, #20
   ba49a:	dd45      	ble.n	ba528 <rshift+0xa0>
   ba49c:	f011 011f 	ands.w	r1, r1, #31
   ba4a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba4a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba4a8:	d10c      	bne.n	ba4c4 <rshift+0x3c>
   ba4aa:	f100 0710 	add.w	r7, r0, #16
   ba4ae:	4629      	mov	r1, r5
   ba4b0:	42b1      	cmp	r1, r6
   ba4b2:	d334      	bcc.n	ba51e <rshift+0x96>
   ba4b4:	1a9b      	subs	r3, r3, r2
   ba4b6:	009b      	lsls	r3, r3, #2
   ba4b8:	1eea      	subs	r2, r5, #3
   ba4ba:	4296      	cmp	r6, r2
   ba4bc:	bf38      	it	cc
   ba4be:	2300      	movcc	r3, #0
   ba4c0:	4423      	add	r3, r4
   ba4c2:	e015      	b.n	ba4f0 <rshift+0x68>
   ba4c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba4c8:	f1c1 0820 	rsb	r8, r1, #32
   ba4cc:	40cf      	lsrs	r7, r1
   ba4ce:	f105 0e04 	add.w	lr, r5, #4
   ba4d2:	46a1      	mov	r9, r4
   ba4d4:	4576      	cmp	r6, lr
   ba4d6:	46f4      	mov	ip, lr
   ba4d8:	d815      	bhi.n	ba506 <rshift+0x7e>
   ba4da:	1a9a      	subs	r2, r3, r2
   ba4dc:	0092      	lsls	r2, r2, #2
   ba4de:	3a04      	subs	r2, #4
   ba4e0:	3501      	adds	r5, #1
   ba4e2:	42ae      	cmp	r6, r5
   ba4e4:	bf38      	it	cc
   ba4e6:	2200      	movcc	r2, #0
   ba4e8:	18a3      	adds	r3, r4, r2
   ba4ea:	50a7      	str	r7, [r4, r2]
   ba4ec:	b107      	cbz	r7, ba4f0 <rshift+0x68>
   ba4ee:	3304      	adds	r3, #4
   ba4f0:	1b1a      	subs	r2, r3, r4
   ba4f2:	42a3      	cmp	r3, r4
   ba4f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba4f8:	bf08      	it	eq
   ba4fa:	2300      	moveq	r3, #0
   ba4fc:	6102      	str	r2, [r0, #16]
   ba4fe:	bf08      	it	eq
   ba500:	6143      	streq	r3, [r0, #20]
   ba502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba506:	f8dc c000 	ldr.w	ip, [ip]
   ba50a:	fa0c fc08 	lsl.w	ip, ip, r8
   ba50e:	ea4c 0707 	orr.w	r7, ip, r7
   ba512:	f849 7b04 	str.w	r7, [r9], #4
   ba516:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba51a:	40cf      	lsrs	r7, r1
   ba51c:	e7da      	b.n	ba4d4 <rshift+0x4c>
   ba51e:	f851 cb04 	ldr.w	ip, [r1], #4
   ba522:	f847 cf04 	str.w	ip, [r7, #4]!
   ba526:	e7c3      	b.n	ba4b0 <rshift+0x28>
   ba528:	4623      	mov	r3, r4
   ba52a:	e7e1      	b.n	ba4f0 <rshift+0x68>

000ba52c <__hexdig_fun>:
   ba52c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba530:	2b09      	cmp	r3, #9
   ba532:	d802      	bhi.n	ba53a <__hexdig_fun+0xe>
   ba534:	3820      	subs	r0, #32
   ba536:	b2c0      	uxtb	r0, r0
   ba538:	4770      	bx	lr
   ba53a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba53e:	2b05      	cmp	r3, #5
   ba540:	d801      	bhi.n	ba546 <__hexdig_fun+0x1a>
   ba542:	3847      	subs	r0, #71	; 0x47
   ba544:	e7f7      	b.n	ba536 <__hexdig_fun+0xa>
   ba546:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba54a:	2b05      	cmp	r3, #5
   ba54c:	d801      	bhi.n	ba552 <__hexdig_fun+0x26>
   ba54e:	3827      	subs	r0, #39	; 0x27
   ba550:	e7f1      	b.n	ba536 <__hexdig_fun+0xa>
   ba552:	2000      	movs	r0, #0
   ba554:	4770      	bx	lr
	...

000ba558 <__gethex>:
   ba558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba55c:	ed2d 8b02 	vpush	{d8}
   ba560:	b089      	sub	sp, #36	; 0x24
   ba562:	ee08 0a10 	vmov	s16, r0
   ba566:	9304      	str	r3, [sp, #16]
   ba568:	4bb4      	ldr	r3, [pc, #720]	; (ba83c <__gethex+0x2e4>)
   ba56a:	681b      	ldr	r3, [r3, #0]
   ba56c:	9301      	str	r3, [sp, #4]
   ba56e:	4618      	mov	r0, r3
   ba570:	468b      	mov	fp, r1
   ba572:	4690      	mov	r8, r2
   ba574:	f7fa faae 	bl	b4ad4 <strlen>
   ba578:	9b01      	ldr	r3, [sp, #4]
   ba57a:	f8db 2000 	ldr.w	r2, [fp]
   ba57e:	4403      	add	r3, r0
   ba580:	4682      	mov	sl, r0
   ba582:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba586:	9305      	str	r3, [sp, #20]
   ba588:	1c93      	adds	r3, r2, #2
   ba58a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba58e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba592:	32fe      	adds	r2, #254	; 0xfe
   ba594:	18d1      	adds	r1, r2, r3
   ba596:	461f      	mov	r7, r3
   ba598:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba59c:	9100      	str	r1, [sp, #0]
   ba59e:	2830      	cmp	r0, #48	; 0x30
   ba5a0:	d0f8      	beq.n	ba594 <__gethex+0x3c>
   ba5a2:	f7ff ffc3 	bl	ba52c <__hexdig_fun>
   ba5a6:	4604      	mov	r4, r0
   ba5a8:	2800      	cmp	r0, #0
   ba5aa:	d13a      	bne.n	ba622 <__gethex+0xca>
   ba5ac:	9901      	ldr	r1, [sp, #4]
   ba5ae:	4652      	mov	r2, sl
   ba5b0:	4638      	mov	r0, r7
   ba5b2:	f7fe ffda 	bl	b956a <strncmp>
   ba5b6:	4605      	mov	r5, r0
   ba5b8:	2800      	cmp	r0, #0
   ba5ba:	d168      	bne.n	ba68e <__gethex+0x136>
   ba5bc:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba5c0:	eb07 060a 	add.w	r6, r7, sl
   ba5c4:	f7ff ffb2 	bl	ba52c <__hexdig_fun>
   ba5c8:	2800      	cmp	r0, #0
   ba5ca:	d062      	beq.n	ba692 <__gethex+0x13a>
   ba5cc:	4633      	mov	r3, r6
   ba5ce:	7818      	ldrb	r0, [r3, #0]
   ba5d0:	2830      	cmp	r0, #48	; 0x30
   ba5d2:	461f      	mov	r7, r3
   ba5d4:	f103 0301 	add.w	r3, r3, #1
   ba5d8:	d0f9      	beq.n	ba5ce <__gethex+0x76>
   ba5da:	f7ff ffa7 	bl	ba52c <__hexdig_fun>
   ba5de:	2301      	movs	r3, #1
   ba5e0:	fab0 f480 	clz	r4, r0
   ba5e4:	0964      	lsrs	r4, r4, #5
   ba5e6:	4635      	mov	r5, r6
   ba5e8:	9300      	str	r3, [sp, #0]
   ba5ea:	463a      	mov	r2, r7
   ba5ec:	4616      	mov	r6, r2
   ba5ee:	3201      	adds	r2, #1
   ba5f0:	7830      	ldrb	r0, [r6, #0]
   ba5f2:	f7ff ff9b 	bl	ba52c <__hexdig_fun>
   ba5f6:	2800      	cmp	r0, #0
   ba5f8:	d1f8      	bne.n	ba5ec <__gethex+0x94>
   ba5fa:	9901      	ldr	r1, [sp, #4]
   ba5fc:	4652      	mov	r2, sl
   ba5fe:	4630      	mov	r0, r6
   ba600:	f7fe ffb3 	bl	b956a <strncmp>
   ba604:	b980      	cbnz	r0, ba628 <__gethex+0xd0>
   ba606:	b94d      	cbnz	r5, ba61c <__gethex+0xc4>
   ba608:	eb06 050a 	add.w	r5, r6, sl
   ba60c:	462a      	mov	r2, r5
   ba60e:	4616      	mov	r6, r2
   ba610:	3201      	adds	r2, #1
   ba612:	7830      	ldrb	r0, [r6, #0]
   ba614:	f7ff ff8a 	bl	ba52c <__hexdig_fun>
   ba618:	2800      	cmp	r0, #0
   ba61a:	d1f8      	bne.n	ba60e <__gethex+0xb6>
   ba61c:	1bad      	subs	r5, r5, r6
   ba61e:	00ad      	lsls	r5, r5, #2
   ba620:	e004      	b.n	ba62c <__gethex+0xd4>
   ba622:	2400      	movs	r4, #0
   ba624:	4625      	mov	r5, r4
   ba626:	e7e0      	b.n	ba5ea <__gethex+0x92>
   ba628:	2d00      	cmp	r5, #0
   ba62a:	d1f7      	bne.n	ba61c <__gethex+0xc4>
   ba62c:	7833      	ldrb	r3, [r6, #0]
   ba62e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba632:	2b50      	cmp	r3, #80	; 0x50
   ba634:	d13b      	bne.n	ba6ae <__gethex+0x156>
   ba636:	7873      	ldrb	r3, [r6, #1]
   ba638:	2b2b      	cmp	r3, #43	; 0x2b
   ba63a:	d02c      	beq.n	ba696 <__gethex+0x13e>
   ba63c:	2b2d      	cmp	r3, #45	; 0x2d
   ba63e:	d02e      	beq.n	ba69e <__gethex+0x146>
   ba640:	1c71      	adds	r1, r6, #1
   ba642:	f04f 0900 	mov.w	r9, #0
   ba646:	7808      	ldrb	r0, [r1, #0]
   ba648:	f7ff ff70 	bl	ba52c <__hexdig_fun>
   ba64c:	1e43      	subs	r3, r0, #1
   ba64e:	b2db      	uxtb	r3, r3
   ba650:	2b18      	cmp	r3, #24
   ba652:	d82c      	bhi.n	ba6ae <__gethex+0x156>
   ba654:	f1a0 0210 	sub.w	r2, r0, #16
   ba658:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba65c:	f7ff ff66 	bl	ba52c <__hexdig_fun>
   ba660:	1e43      	subs	r3, r0, #1
   ba662:	b2db      	uxtb	r3, r3
   ba664:	2b18      	cmp	r3, #24
   ba666:	d91d      	bls.n	ba6a4 <__gethex+0x14c>
   ba668:	f1b9 0f00 	cmp.w	r9, #0
   ba66c:	d000      	beq.n	ba670 <__gethex+0x118>
   ba66e:	4252      	negs	r2, r2
   ba670:	4415      	add	r5, r2
   ba672:	f8cb 1000 	str.w	r1, [fp]
   ba676:	b1e4      	cbz	r4, ba6b2 <__gethex+0x15a>
   ba678:	9b00      	ldr	r3, [sp, #0]
   ba67a:	2b00      	cmp	r3, #0
   ba67c:	bf14      	ite	ne
   ba67e:	2700      	movne	r7, #0
   ba680:	2706      	moveq	r7, #6
   ba682:	4638      	mov	r0, r7
   ba684:	b009      	add	sp, #36	; 0x24
   ba686:	ecbd 8b02 	vpop	{d8}
   ba68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba68e:	463e      	mov	r6, r7
   ba690:	4625      	mov	r5, r4
   ba692:	2401      	movs	r4, #1
   ba694:	e7ca      	b.n	ba62c <__gethex+0xd4>
   ba696:	f04f 0900 	mov.w	r9, #0
   ba69a:	1cb1      	adds	r1, r6, #2
   ba69c:	e7d3      	b.n	ba646 <__gethex+0xee>
   ba69e:	f04f 0901 	mov.w	r9, #1
   ba6a2:	e7fa      	b.n	ba69a <__gethex+0x142>
   ba6a4:	230a      	movs	r3, #10
   ba6a6:	fb03 0202 	mla	r2, r3, r2, r0
   ba6aa:	3a10      	subs	r2, #16
   ba6ac:	e7d4      	b.n	ba658 <__gethex+0x100>
   ba6ae:	4631      	mov	r1, r6
   ba6b0:	e7df      	b.n	ba672 <__gethex+0x11a>
   ba6b2:	1bf3      	subs	r3, r6, r7
   ba6b4:	3b01      	subs	r3, #1
   ba6b6:	4621      	mov	r1, r4
   ba6b8:	2b07      	cmp	r3, #7
   ba6ba:	dc0b      	bgt.n	ba6d4 <__gethex+0x17c>
   ba6bc:	ee18 0a10 	vmov	r0, s16
   ba6c0:	f000 fa68 	bl	bab94 <_Balloc>
   ba6c4:	4604      	mov	r4, r0
   ba6c6:	b940      	cbnz	r0, ba6da <__gethex+0x182>
   ba6c8:	4b5d      	ldr	r3, [pc, #372]	; (ba840 <__gethex+0x2e8>)
   ba6ca:	4602      	mov	r2, r0
   ba6cc:	21de      	movs	r1, #222	; 0xde
   ba6ce:	485d      	ldr	r0, [pc, #372]	; (ba844 <__gethex+0x2ec>)
   ba6d0:	f7fb fe2e 	bl	b6330 <__assert_func>
   ba6d4:	3101      	adds	r1, #1
   ba6d6:	105b      	asrs	r3, r3, #1
   ba6d8:	e7ee      	b.n	ba6b8 <__gethex+0x160>
   ba6da:	f100 0914 	add.w	r9, r0, #20
   ba6de:	f04f 0b00 	mov.w	fp, #0
   ba6e2:	f1ca 0301 	rsb	r3, sl, #1
   ba6e6:	f8cd 9008 	str.w	r9, [sp, #8]
   ba6ea:	f8cd b000 	str.w	fp, [sp]
   ba6ee:	9306      	str	r3, [sp, #24]
   ba6f0:	42b7      	cmp	r7, r6
   ba6f2:	d340      	bcc.n	ba776 <__gethex+0x21e>
   ba6f4:	9802      	ldr	r0, [sp, #8]
   ba6f6:	9b00      	ldr	r3, [sp, #0]
   ba6f8:	f840 3b04 	str.w	r3, [r0], #4
   ba6fc:	eba0 0009 	sub.w	r0, r0, r9
   ba700:	1080      	asrs	r0, r0, #2
   ba702:	0146      	lsls	r6, r0, #5
   ba704:	6120      	str	r0, [r4, #16]
   ba706:	4618      	mov	r0, r3
   ba708:	f000 fb36 	bl	bad78 <__hi0bits>
   ba70c:	1a30      	subs	r0, r6, r0
   ba70e:	f8d8 6000 	ldr.w	r6, [r8]
   ba712:	42b0      	cmp	r0, r6
   ba714:	dd63      	ble.n	ba7de <__gethex+0x286>
   ba716:	1b87      	subs	r7, r0, r6
   ba718:	4639      	mov	r1, r7
   ba71a:	4620      	mov	r0, r4
   ba71c:	f000 feda 	bl	bb4d4 <__any_on>
   ba720:	4682      	mov	sl, r0
   ba722:	b1a8      	cbz	r0, ba750 <__gethex+0x1f8>
   ba724:	1e7b      	subs	r3, r7, #1
   ba726:	1159      	asrs	r1, r3, #5
   ba728:	f003 021f 	and.w	r2, r3, #31
   ba72c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba730:	f04f 0a01 	mov.w	sl, #1
   ba734:	fa0a f202 	lsl.w	r2, sl, r2
   ba738:	420a      	tst	r2, r1
   ba73a:	d009      	beq.n	ba750 <__gethex+0x1f8>
   ba73c:	4553      	cmp	r3, sl
   ba73e:	dd05      	ble.n	ba74c <__gethex+0x1f4>
   ba740:	1eb9      	subs	r1, r7, #2
   ba742:	4620      	mov	r0, r4
   ba744:	f000 fec6 	bl	bb4d4 <__any_on>
   ba748:	2800      	cmp	r0, #0
   ba74a:	d145      	bne.n	ba7d8 <__gethex+0x280>
   ba74c:	f04f 0a02 	mov.w	sl, #2
   ba750:	4639      	mov	r1, r7
   ba752:	4620      	mov	r0, r4
   ba754:	f7ff fe98 	bl	ba488 <rshift>
   ba758:	443d      	add	r5, r7
   ba75a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba75e:	42ab      	cmp	r3, r5
   ba760:	da4c      	bge.n	ba7fc <__gethex+0x2a4>
   ba762:	ee18 0a10 	vmov	r0, s16
   ba766:	4621      	mov	r1, r4
   ba768:	f000 fa54 	bl	bac14 <_Bfree>
   ba76c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba76e:	2300      	movs	r3, #0
   ba770:	6013      	str	r3, [r2, #0]
   ba772:	27a3      	movs	r7, #163	; 0xa3
   ba774:	e785      	b.n	ba682 <__gethex+0x12a>
   ba776:	1e73      	subs	r3, r6, #1
   ba778:	9a05      	ldr	r2, [sp, #20]
   ba77a:	9303      	str	r3, [sp, #12]
   ba77c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba780:	4293      	cmp	r3, r2
   ba782:	d019      	beq.n	ba7b8 <__gethex+0x260>
   ba784:	f1bb 0f20 	cmp.w	fp, #32
   ba788:	d107      	bne.n	ba79a <__gethex+0x242>
   ba78a:	9b02      	ldr	r3, [sp, #8]
   ba78c:	9a00      	ldr	r2, [sp, #0]
   ba78e:	f843 2b04 	str.w	r2, [r3], #4
   ba792:	9302      	str	r3, [sp, #8]
   ba794:	2300      	movs	r3, #0
   ba796:	9300      	str	r3, [sp, #0]
   ba798:	469b      	mov	fp, r3
   ba79a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba79e:	f7ff fec5 	bl	ba52c <__hexdig_fun>
   ba7a2:	9b00      	ldr	r3, [sp, #0]
   ba7a4:	f000 000f 	and.w	r0, r0, #15
   ba7a8:	fa00 f00b 	lsl.w	r0, r0, fp
   ba7ac:	4303      	orrs	r3, r0
   ba7ae:	9300      	str	r3, [sp, #0]
   ba7b0:	f10b 0b04 	add.w	fp, fp, #4
   ba7b4:	9b03      	ldr	r3, [sp, #12]
   ba7b6:	e00d      	b.n	ba7d4 <__gethex+0x27c>
   ba7b8:	9b03      	ldr	r3, [sp, #12]
   ba7ba:	9a06      	ldr	r2, [sp, #24]
   ba7bc:	4413      	add	r3, r2
   ba7be:	42bb      	cmp	r3, r7
   ba7c0:	d3e0      	bcc.n	ba784 <__gethex+0x22c>
   ba7c2:	4618      	mov	r0, r3
   ba7c4:	9901      	ldr	r1, [sp, #4]
   ba7c6:	9307      	str	r3, [sp, #28]
   ba7c8:	4652      	mov	r2, sl
   ba7ca:	f7fe fece 	bl	b956a <strncmp>
   ba7ce:	9b07      	ldr	r3, [sp, #28]
   ba7d0:	2800      	cmp	r0, #0
   ba7d2:	d1d7      	bne.n	ba784 <__gethex+0x22c>
   ba7d4:	461e      	mov	r6, r3
   ba7d6:	e78b      	b.n	ba6f0 <__gethex+0x198>
   ba7d8:	f04f 0a03 	mov.w	sl, #3
   ba7dc:	e7b8      	b.n	ba750 <__gethex+0x1f8>
   ba7de:	da0a      	bge.n	ba7f6 <__gethex+0x29e>
   ba7e0:	1a37      	subs	r7, r6, r0
   ba7e2:	4621      	mov	r1, r4
   ba7e4:	ee18 0a10 	vmov	r0, s16
   ba7e8:	463a      	mov	r2, r7
   ba7ea:	f000 fc2f 	bl	bb04c <__lshift>
   ba7ee:	1bed      	subs	r5, r5, r7
   ba7f0:	4604      	mov	r4, r0
   ba7f2:	f100 0914 	add.w	r9, r0, #20
   ba7f6:	f04f 0a00 	mov.w	sl, #0
   ba7fa:	e7ae      	b.n	ba75a <__gethex+0x202>
   ba7fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba800:	42a8      	cmp	r0, r5
   ba802:	dd72      	ble.n	ba8ea <__gethex+0x392>
   ba804:	1b45      	subs	r5, r0, r5
   ba806:	42ae      	cmp	r6, r5
   ba808:	dc36      	bgt.n	ba878 <__gethex+0x320>
   ba80a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba80e:	2b02      	cmp	r3, #2
   ba810:	d02a      	beq.n	ba868 <__gethex+0x310>
   ba812:	2b03      	cmp	r3, #3
   ba814:	d02c      	beq.n	ba870 <__gethex+0x318>
   ba816:	2b01      	cmp	r3, #1
   ba818:	d11c      	bne.n	ba854 <__gethex+0x2fc>
   ba81a:	42ae      	cmp	r6, r5
   ba81c:	d11a      	bne.n	ba854 <__gethex+0x2fc>
   ba81e:	2e01      	cmp	r6, #1
   ba820:	d112      	bne.n	ba848 <__gethex+0x2f0>
   ba822:	9a04      	ldr	r2, [sp, #16]
   ba824:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba828:	6013      	str	r3, [r2, #0]
   ba82a:	2301      	movs	r3, #1
   ba82c:	6123      	str	r3, [r4, #16]
   ba82e:	f8c9 3000 	str.w	r3, [r9]
   ba832:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba834:	2762      	movs	r7, #98	; 0x62
   ba836:	601c      	str	r4, [r3, #0]
   ba838:	e723      	b.n	ba682 <__gethex+0x12a>
   ba83a:	bf00      	nop
   ba83c:	000bc120 	.word	0x000bc120
   ba840:	000bc089 	.word	0x000bc089
   ba844:	000bc09a 	.word	0x000bc09a
   ba848:	1e71      	subs	r1, r6, #1
   ba84a:	4620      	mov	r0, r4
   ba84c:	f000 fe42 	bl	bb4d4 <__any_on>
   ba850:	2800      	cmp	r0, #0
   ba852:	d1e6      	bne.n	ba822 <__gethex+0x2ca>
   ba854:	ee18 0a10 	vmov	r0, s16
   ba858:	4621      	mov	r1, r4
   ba85a:	f000 f9db 	bl	bac14 <_Bfree>
   ba85e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba860:	2300      	movs	r3, #0
   ba862:	6013      	str	r3, [r2, #0]
   ba864:	2750      	movs	r7, #80	; 0x50
   ba866:	e70c      	b.n	ba682 <__gethex+0x12a>
   ba868:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba86a:	2b00      	cmp	r3, #0
   ba86c:	d1f2      	bne.n	ba854 <__gethex+0x2fc>
   ba86e:	e7d8      	b.n	ba822 <__gethex+0x2ca>
   ba870:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba872:	2b00      	cmp	r3, #0
   ba874:	d1d5      	bne.n	ba822 <__gethex+0x2ca>
   ba876:	e7ed      	b.n	ba854 <__gethex+0x2fc>
   ba878:	1e6f      	subs	r7, r5, #1
   ba87a:	f1ba 0f00 	cmp.w	sl, #0
   ba87e:	d131      	bne.n	ba8e4 <__gethex+0x38c>
   ba880:	b127      	cbz	r7, ba88c <__gethex+0x334>
   ba882:	4639      	mov	r1, r7
   ba884:	4620      	mov	r0, r4
   ba886:	f000 fe25 	bl	bb4d4 <__any_on>
   ba88a:	4682      	mov	sl, r0
   ba88c:	117b      	asrs	r3, r7, #5
   ba88e:	2101      	movs	r1, #1
   ba890:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba894:	f007 071f 	and.w	r7, r7, #31
   ba898:	fa01 f707 	lsl.w	r7, r1, r7
   ba89c:	421f      	tst	r7, r3
   ba89e:	4629      	mov	r1, r5
   ba8a0:	4620      	mov	r0, r4
   ba8a2:	bf18      	it	ne
   ba8a4:	f04a 0a02 	orrne.w	sl, sl, #2
   ba8a8:	1b76      	subs	r6, r6, r5
   ba8aa:	f7ff fded 	bl	ba488 <rshift>
   ba8ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba8b2:	2702      	movs	r7, #2
   ba8b4:	f1ba 0f00 	cmp.w	sl, #0
   ba8b8:	d048      	beq.n	ba94c <__gethex+0x3f4>
   ba8ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba8be:	2b02      	cmp	r3, #2
   ba8c0:	d015      	beq.n	ba8ee <__gethex+0x396>
   ba8c2:	2b03      	cmp	r3, #3
   ba8c4:	d017      	beq.n	ba8f6 <__gethex+0x39e>
   ba8c6:	2b01      	cmp	r3, #1
   ba8c8:	d109      	bne.n	ba8de <__gethex+0x386>
   ba8ca:	f01a 0f02 	tst.w	sl, #2
   ba8ce:	d006      	beq.n	ba8de <__gethex+0x386>
   ba8d0:	f8d9 0000 	ldr.w	r0, [r9]
   ba8d4:	ea4a 0a00 	orr.w	sl, sl, r0
   ba8d8:	f01a 0f01 	tst.w	sl, #1
   ba8dc:	d10e      	bne.n	ba8fc <__gethex+0x3a4>
   ba8de:	f047 0710 	orr.w	r7, r7, #16
   ba8e2:	e033      	b.n	ba94c <__gethex+0x3f4>
   ba8e4:	f04f 0a01 	mov.w	sl, #1
   ba8e8:	e7d0      	b.n	ba88c <__gethex+0x334>
   ba8ea:	2701      	movs	r7, #1
   ba8ec:	e7e2      	b.n	ba8b4 <__gethex+0x35c>
   ba8ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba8f0:	f1c3 0301 	rsb	r3, r3, #1
   ba8f4:	9315      	str	r3, [sp, #84]	; 0x54
   ba8f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba8f8:	2b00      	cmp	r3, #0
   ba8fa:	d0f0      	beq.n	ba8de <__gethex+0x386>
   ba8fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba900:	f104 0314 	add.w	r3, r4, #20
   ba904:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba908:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba90c:	f04f 0c00 	mov.w	ip, #0
   ba910:	4618      	mov	r0, r3
   ba912:	f853 2b04 	ldr.w	r2, [r3], #4
   ba916:	f1b2 3fff 	cmp.w	r2, #4294967295
   ba91a:	d01c      	beq.n	ba956 <__gethex+0x3fe>
   ba91c:	3201      	adds	r2, #1
   ba91e:	6002      	str	r2, [r0, #0]
   ba920:	2f02      	cmp	r7, #2
   ba922:	f104 0314 	add.w	r3, r4, #20
   ba926:	d13f      	bne.n	ba9a8 <__gethex+0x450>
   ba928:	f8d8 2000 	ldr.w	r2, [r8]
   ba92c:	3a01      	subs	r2, #1
   ba92e:	42b2      	cmp	r2, r6
   ba930:	d10a      	bne.n	ba948 <__gethex+0x3f0>
   ba932:	1171      	asrs	r1, r6, #5
   ba934:	2201      	movs	r2, #1
   ba936:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba93a:	f006 061f 	and.w	r6, r6, #31
   ba93e:	fa02 f606 	lsl.w	r6, r2, r6
   ba942:	421e      	tst	r6, r3
   ba944:	bf18      	it	ne
   ba946:	4617      	movne	r7, r2
   ba948:	f047 0720 	orr.w	r7, r7, #32
   ba94c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba94e:	601c      	str	r4, [r3, #0]
   ba950:	9b04      	ldr	r3, [sp, #16]
   ba952:	601d      	str	r5, [r3, #0]
   ba954:	e695      	b.n	ba682 <__gethex+0x12a>
   ba956:	4299      	cmp	r1, r3
   ba958:	f843 cc04 	str.w	ip, [r3, #-4]
   ba95c:	d8d8      	bhi.n	ba910 <__gethex+0x3b8>
   ba95e:	68a3      	ldr	r3, [r4, #8]
   ba960:	459b      	cmp	fp, r3
   ba962:	db19      	blt.n	ba998 <__gethex+0x440>
   ba964:	6861      	ldr	r1, [r4, #4]
   ba966:	ee18 0a10 	vmov	r0, s16
   ba96a:	3101      	adds	r1, #1
   ba96c:	f000 f912 	bl	bab94 <_Balloc>
   ba970:	4681      	mov	r9, r0
   ba972:	b918      	cbnz	r0, ba97c <__gethex+0x424>
   ba974:	4b1a      	ldr	r3, [pc, #104]	; (ba9e0 <__gethex+0x488>)
   ba976:	4602      	mov	r2, r0
   ba978:	2184      	movs	r1, #132	; 0x84
   ba97a:	e6a8      	b.n	ba6ce <__gethex+0x176>
   ba97c:	6922      	ldr	r2, [r4, #16]
   ba97e:	3202      	adds	r2, #2
   ba980:	f104 010c 	add.w	r1, r4, #12
   ba984:	0092      	lsls	r2, r2, #2
   ba986:	300c      	adds	r0, #12
   ba988:	f7fe fd6c 	bl	b9464 <memcpy>
   ba98c:	4621      	mov	r1, r4
   ba98e:	ee18 0a10 	vmov	r0, s16
   ba992:	f000 f93f 	bl	bac14 <_Bfree>
   ba996:	464c      	mov	r4, r9
   ba998:	6923      	ldr	r3, [r4, #16]
   ba99a:	1c5a      	adds	r2, r3, #1
   ba99c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba9a0:	6122      	str	r2, [r4, #16]
   ba9a2:	2201      	movs	r2, #1
   ba9a4:	615a      	str	r2, [r3, #20]
   ba9a6:	e7bb      	b.n	ba920 <__gethex+0x3c8>
   ba9a8:	6922      	ldr	r2, [r4, #16]
   ba9aa:	455a      	cmp	r2, fp
   ba9ac:	dd0b      	ble.n	ba9c6 <__gethex+0x46e>
   ba9ae:	2101      	movs	r1, #1
   ba9b0:	4620      	mov	r0, r4
   ba9b2:	f7ff fd69 	bl	ba488 <rshift>
   ba9b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba9ba:	3501      	adds	r5, #1
   ba9bc:	42ab      	cmp	r3, r5
   ba9be:	f6ff aed0 	blt.w	ba762 <__gethex+0x20a>
   ba9c2:	2701      	movs	r7, #1
   ba9c4:	e7c0      	b.n	ba948 <__gethex+0x3f0>
   ba9c6:	f016 061f 	ands.w	r6, r6, #31
   ba9ca:	d0fa      	beq.n	ba9c2 <__gethex+0x46a>
   ba9cc:	4453      	add	r3, sl
   ba9ce:	f1c6 0620 	rsb	r6, r6, #32
   ba9d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba9d6:	f000 f9cf 	bl	bad78 <__hi0bits>
   ba9da:	42b0      	cmp	r0, r6
   ba9dc:	dbe7      	blt.n	ba9ae <__gethex+0x456>
   ba9de:	e7f0      	b.n	ba9c2 <__gethex+0x46a>
   ba9e0:	000bc089 	.word	0x000bc089

000ba9e4 <L_shift>:
   ba9e4:	f1c2 0208 	rsb	r2, r2, #8
   ba9e8:	0092      	lsls	r2, r2, #2
   ba9ea:	b570      	push	{r4, r5, r6, lr}
   ba9ec:	f1c2 0620 	rsb	r6, r2, #32
   ba9f0:	6843      	ldr	r3, [r0, #4]
   ba9f2:	6804      	ldr	r4, [r0, #0]
   ba9f4:	fa03 f506 	lsl.w	r5, r3, r6
   ba9f8:	432c      	orrs	r4, r5
   ba9fa:	40d3      	lsrs	r3, r2
   ba9fc:	6004      	str	r4, [r0, #0]
   ba9fe:	f840 3f04 	str.w	r3, [r0, #4]!
   baa02:	4288      	cmp	r0, r1
   baa04:	d3f4      	bcc.n	ba9f0 <L_shift+0xc>
   baa06:	bd70      	pop	{r4, r5, r6, pc}

000baa08 <__match>:
   baa08:	b530      	push	{r4, r5, lr}
   baa0a:	6803      	ldr	r3, [r0, #0]
   baa0c:	3301      	adds	r3, #1
   baa0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   baa12:	b914      	cbnz	r4, baa1a <__match+0x12>
   baa14:	6003      	str	r3, [r0, #0]
   baa16:	2001      	movs	r0, #1
   baa18:	bd30      	pop	{r4, r5, pc}
   baa1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   baa1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   baa22:	2d19      	cmp	r5, #25
   baa24:	bf98      	it	ls
   baa26:	3220      	addls	r2, #32
   baa28:	42a2      	cmp	r2, r4
   baa2a:	d0f0      	beq.n	baa0e <__match+0x6>
   baa2c:	2000      	movs	r0, #0
   baa2e:	e7f3      	b.n	baa18 <__match+0x10>

000baa30 <__hexnan>:
   baa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa34:	680b      	ldr	r3, [r1, #0]
   baa36:	115e      	asrs	r6, r3, #5
   baa38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   baa3c:	f013 031f 	ands.w	r3, r3, #31
   baa40:	b087      	sub	sp, #28
   baa42:	bf18      	it	ne
   baa44:	3604      	addne	r6, #4
   baa46:	2500      	movs	r5, #0
   baa48:	1f37      	subs	r7, r6, #4
   baa4a:	4690      	mov	r8, r2
   baa4c:	6802      	ldr	r2, [r0, #0]
   baa4e:	9301      	str	r3, [sp, #4]
   baa50:	4682      	mov	sl, r0
   baa52:	f846 5c04 	str.w	r5, [r6, #-4]
   baa56:	46b9      	mov	r9, r7
   baa58:	463c      	mov	r4, r7
   baa5a:	9502      	str	r5, [sp, #8]
   baa5c:	46ab      	mov	fp, r5
   baa5e:	7851      	ldrb	r1, [r2, #1]
   baa60:	1c53      	adds	r3, r2, #1
   baa62:	9303      	str	r3, [sp, #12]
   baa64:	b341      	cbz	r1, baab8 <__hexnan+0x88>
   baa66:	4608      	mov	r0, r1
   baa68:	9205      	str	r2, [sp, #20]
   baa6a:	9104      	str	r1, [sp, #16]
   baa6c:	f7ff fd5e 	bl	ba52c <__hexdig_fun>
   baa70:	2800      	cmp	r0, #0
   baa72:	d14f      	bne.n	bab14 <__hexnan+0xe4>
   baa74:	9904      	ldr	r1, [sp, #16]
   baa76:	9a05      	ldr	r2, [sp, #20]
   baa78:	2920      	cmp	r1, #32
   baa7a:	d818      	bhi.n	baaae <__hexnan+0x7e>
   baa7c:	9b02      	ldr	r3, [sp, #8]
   baa7e:	459b      	cmp	fp, r3
   baa80:	dd13      	ble.n	baaaa <__hexnan+0x7a>
   baa82:	454c      	cmp	r4, r9
   baa84:	d206      	bcs.n	baa94 <__hexnan+0x64>
   baa86:	2d07      	cmp	r5, #7
   baa88:	dc04      	bgt.n	baa94 <__hexnan+0x64>
   baa8a:	462a      	mov	r2, r5
   baa8c:	4649      	mov	r1, r9
   baa8e:	4620      	mov	r0, r4
   baa90:	f7ff ffa8 	bl	ba9e4 <L_shift>
   baa94:	4544      	cmp	r4, r8
   baa96:	d950      	bls.n	bab3a <__hexnan+0x10a>
   baa98:	2300      	movs	r3, #0
   baa9a:	f1a4 0904 	sub.w	r9, r4, #4
   baa9e:	f844 3c04 	str.w	r3, [r4, #-4]
   baaa2:	f8cd b008 	str.w	fp, [sp, #8]
   baaa6:	464c      	mov	r4, r9
   baaa8:	461d      	mov	r5, r3
   baaaa:	9a03      	ldr	r2, [sp, #12]
   baaac:	e7d7      	b.n	baa5e <__hexnan+0x2e>
   baaae:	2929      	cmp	r1, #41	; 0x29
   baab0:	d156      	bne.n	bab60 <__hexnan+0x130>
   baab2:	3202      	adds	r2, #2
   baab4:	f8ca 2000 	str.w	r2, [sl]
   baab8:	f1bb 0f00 	cmp.w	fp, #0
   baabc:	d050      	beq.n	bab60 <__hexnan+0x130>
   baabe:	454c      	cmp	r4, r9
   baac0:	d206      	bcs.n	baad0 <__hexnan+0xa0>
   baac2:	2d07      	cmp	r5, #7
   baac4:	dc04      	bgt.n	baad0 <__hexnan+0xa0>
   baac6:	462a      	mov	r2, r5
   baac8:	4649      	mov	r1, r9
   baaca:	4620      	mov	r0, r4
   baacc:	f7ff ff8a 	bl	ba9e4 <L_shift>
   baad0:	4544      	cmp	r4, r8
   baad2:	d934      	bls.n	bab3e <__hexnan+0x10e>
   baad4:	f1a8 0204 	sub.w	r2, r8, #4
   baad8:	4623      	mov	r3, r4
   baada:	f853 1b04 	ldr.w	r1, [r3], #4
   baade:	f842 1f04 	str.w	r1, [r2, #4]!
   baae2:	429f      	cmp	r7, r3
   baae4:	d2f9      	bcs.n	baada <__hexnan+0xaa>
   baae6:	1b3b      	subs	r3, r7, r4
   baae8:	f023 0303 	bic.w	r3, r3, #3
   baaec:	3304      	adds	r3, #4
   baaee:	3401      	adds	r4, #1
   baaf0:	3e03      	subs	r6, #3
   baaf2:	42b4      	cmp	r4, r6
   baaf4:	bf88      	it	hi
   baaf6:	2304      	movhi	r3, #4
   baaf8:	4443      	add	r3, r8
   baafa:	2200      	movs	r2, #0
   baafc:	f843 2b04 	str.w	r2, [r3], #4
   bab00:	429f      	cmp	r7, r3
   bab02:	d2fb      	bcs.n	baafc <__hexnan+0xcc>
   bab04:	683b      	ldr	r3, [r7, #0]
   bab06:	b91b      	cbnz	r3, bab10 <__hexnan+0xe0>
   bab08:	4547      	cmp	r7, r8
   bab0a:	d127      	bne.n	bab5c <__hexnan+0x12c>
   bab0c:	2301      	movs	r3, #1
   bab0e:	603b      	str	r3, [r7, #0]
   bab10:	2005      	movs	r0, #5
   bab12:	e026      	b.n	bab62 <__hexnan+0x132>
   bab14:	3501      	adds	r5, #1
   bab16:	2d08      	cmp	r5, #8
   bab18:	f10b 0b01 	add.w	fp, fp, #1
   bab1c:	dd06      	ble.n	bab2c <__hexnan+0xfc>
   bab1e:	4544      	cmp	r4, r8
   bab20:	d9c3      	bls.n	baaaa <__hexnan+0x7a>
   bab22:	2300      	movs	r3, #0
   bab24:	f844 3c04 	str.w	r3, [r4, #-4]
   bab28:	2501      	movs	r5, #1
   bab2a:	3c04      	subs	r4, #4
   bab2c:	6822      	ldr	r2, [r4, #0]
   bab2e:	f000 000f 	and.w	r0, r0, #15
   bab32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bab36:	6022      	str	r2, [r4, #0]
   bab38:	e7b7      	b.n	baaaa <__hexnan+0x7a>
   bab3a:	2508      	movs	r5, #8
   bab3c:	e7b5      	b.n	baaaa <__hexnan+0x7a>
   bab3e:	9b01      	ldr	r3, [sp, #4]
   bab40:	2b00      	cmp	r3, #0
   bab42:	d0df      	beq.n	bab04 <__hexnan+0xd4>
   bab44:	f04f 32ff 	mov.w	r2, #4294967295
   bab48:	f1c3 0320 	rsb	r3, r3, #32
   bab4c:	fa22 f303 	lsr.w	r3, r2, r3
   bab50:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bab54:	401a      	ands	r2, r3
   bab56:	f846 2c04 	str.w	r2, [r6, #-4]
   bab5a:	e7d3      	b.n	bab04 <__hexnan+0xd4>
   bab5c:	3f04      	subs	r7, #4
   bab5e:	e7d1      	b.n	bab04 <__hexnan+0xd4>
   bab60:	2004      	movs	r0, #4
   bab62:	b007      	add	sp, #28
   bab64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bab68 <__retarget_lock_acquire_recursive>:
   bab68:	4770      	bx	lr

000bab6a <__retarget_lock_release>:
   bab6a:	4770      	bx	lr

000bab6c <__retarget_lock_release_recursive>:
   bab6c:	4770      	bx	lr

000bab6e <__ascii_mbtowc>:
   bab6e:	b082      	sub	sp, #8
   bab70:	b901      	cbnz	r1, bab74 <__ascii_mbtowc+0x6>
   bab72:	a901      	add	r1, sp, #4
   bab74:	b142      	cbz	r2, bab88 <__ascii_mbtowc+0x1a>
   bab76:	b14b      	cbz	r3, bab8c <__ascii_mbtowc+0x1e>
   bab78:	7813      	ldrb	r3, [r2, #0]
   bab7a:	600b      	str	r3, [r1, #0]
   bab7c:	7812      	ldrb	r2, [r2, #0]
   bab7e:	1e10      	subs	r0, r2, #0
   bab80:	bf18      	it	ne
   bab82:	2001      	movne	r0, #1
   bab84:	b002      	add	sp, #8
   bab86:	4770      	bx	lr
   bab88:	4610      	mov	r0, r2
   bab8a:	e7fb      	b.n	bab84 <__ascii_mbtowc+0x16>
   bab8c:	f06f 0001 	mvn.w	r0, #1
   bab90:	e7f8      	b.n	bab84 <__ascii_mbtowc+0x16>
	...

000bab94 <_Balloc>:
   bab94:	b570      	push	{r4, r5, r6, lr}
   bab96:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bab98:	4604      	mov	r4, r0
   bab9a:	460d      	mov	r5, r1
   bab9c:	b976      	cbnz	r6, babbc <_Balloc+0x28>
   bab9e:	2010      	movs	r0, #16
   baba0:	f7fb fb86 	bl	b62b0 <malloc>
   baba4:	4602      	mov	r2, r0
   baba6:	6260      	str	r0, [r4, #36]	; 0x24
   baba8:	b920      	cbnz	r0, babb4 <_Balloc+0x20>
   babaa:	4b18      	ldr	r3, [pc, #96]	; (bac0c <_Balloc+0x78>)
   babac:	4818      	ldr	r0, [pc, #96]	; (bac10 <_Balloc+0x7c>)
   babae:	2166      	movs	r1, #102	; 0x66
   babb0:	f7fb fbbe 	bl	b6330 <__assert_func>
   babb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   babb8:	6006      	str	r6, [r0, #0]
   babba:	60c6      	str	r6, [r0, #12]
   babbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   babbe:	68f3      	ldr	r3, [r6, #12]
   babc0:	b183      	cbz	r3, babe4 <_Balloc+0x50>
   babc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   babc4:	68db      	ldr	r3, [r3, #12]
   babc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   babca:	b9b8      	cbnz	r0, babfc <_Balloc+0x68>
   babcc:	2101      	movs	r1, #1
   babce:	fa01 f605 	lsl.w	r6, r1, r5
   babd2:	1d72      	adds	r2, r6, #5
   babd4:	0092      	lsls	r2, r2, #2
   babd6:	4620      	mov	r0, r4
   babd8:	f000 fc9d 	bl	bb516 <_calloc_r>
   babdc:	b160      	cbz	r0, babf8 <_Balloc+0x64>
   babde:	e9c0 5601 	strd	r5, r6, [r0, #4]
   babe2:	e00e      	b.n	bac02 <_Balloc+0x6e>
   babe4:	2221      	movs	r2, #33	; 0x21
   babe6:	2104      	movs	r1, #4
   babe8:	4620      	mov	r0, r4
   babea:	f000 fc94 	bl	bb516 <_calloc_r>
   babee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   babf0:	60f0      	str	r0, [r6, #12]
   babf2:	68db      	ldr	r3, [r3, #12]
   babf4:	2b00      	cmp	r3, #0
   babf6:	d1e4      	bne.n	babc2 <_Balloc+0x2e>
   babf8:	2000      	movs	r0, #0
   babfa:	bd70      	pop	{r4, r5, r6, pc}
   babfc:	6802      	ldr	r2, [r0, #0]
   babfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bac02:	2300      	movs	r3, #0
   bac04:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bac08:	e7f7      	b.n	babfa <_Balloc+0x66>
   bac0a:	bf00      	nop
   bac0c:	000bbe92 	.word	0x000bbe92
   bac10:	000bc134 	.word	0x000bc134

000bac14 <_Bfree>:
   bac14:	b570      	push	{r4, r5, r6, lr}
   bac16:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bac18:	4605      	mov	r5, r0
   bac1a:	460c      	mov	r4, r1
   bac1c:	b976      	cbnz	r6, bac3c <_Bfree+0x28>
   bac1e:	2010      	movs	r0, #16
   bac20:	f7fb fb46 	bl	b62b0 <malloc>
   bac24:	4602      	mov	r2, r0
   bac26:	6268      	str	r0, [r5, #36]	; 0x24
   bac28:	b920      	cbnz	r0, bac34 <_Bfree+0x20>
   bac2a:	4b09      	ldr	r3, [pc, #36]	; (bac50 <_Bfree+0x3c>)
   bac2c:	4809      	ldr	r0, [pc, #36]	; (bac54 <_Bfree+0x40>)
   bac2e:	218a      	movs	r1, #138	; 0x8a
   bac30:	f7fb fb7e 	bl	b6330 <__assert_func>
   bac34:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bac38:	6006      	str	r6, [r0, #0]
   bac3a:	60c6      	str	r6, [r0, #12]
   bac3c:	b13c      	cbz	r4, bac4e <_Bfree+0x3a>
   bac3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bac40:	6862      	ldr	r2, [r4, #4]
   bac42:	68db      	ldr	r3, [r3, #12]
   bac44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bac48:	6021      	str	r1, [r4, #0]
   bac4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bac4e:	bd70      	pop	{r4, r5, r6, pc}
   bac50:	000bbe92 	.word	0x000bbe92
   bac54:	000bc134 	.word	0x000bc134

000bac58 <__multadd>:
   bac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bac5c:	690d      	ldr	r5, [r1, #16]
   bac5e:	4607      	mov	r7, r0
   bac60:	460c      	mov	r4, r1
   bac62:	461e      	mov	r6, r3
   bac64:	f101 0c14 	add.w	ip, r1, #20
   bac68:	2000      	movs	r0, #0
   bac6a:	f8dc 3000 	ldr.w	r3, [ip]
   bac6e:	b299      	uxth	r1, r3
   bac70:	fb02 6101 	mla	r1, r2, r1, r6
   bac74:	0c1e      	lsrs	r6, r3, #16
   bac76:	0c0b      	lsrs	r3, r1, #16
   bac78:	fb02 3306 	mla	r3, r2, r6, r3
   bac7c:	b289      	uxth	r1, r1
   bac7e:	3001      	adds	r0, #1
   bac80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bac84:	4285      	cmp	r5, r0
   bac86:	f84c 1b04 	str.w	r1, [ip], #4
   bac8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bac8e:	dcec      	bgt.n	bac6a <__multadd+0x12>
   bac90:	b30e      	cbz	r6, bacd6 <__multadd+0x7e>
   bac92:	68a3      	ldr	r3, [r4, #8]
   bac94:	42ab      	cmp	r3, r5
   bac96:	dc19      	bgt.n	baccc <__multadd+0x74>
   bac98:	6861      	ldr	r1, [r4, #4]
   bac9a:	4638      	mov	r0, r7
   bac9c:	3101      	adds	r1, #1
   bac9e:	f7ff ff79 	bl	bab94 <_Balloc>
   baca2:	4680      	mov	r8, r0
   baca4:	b928      	cbnz	r0, bacb2 <__multadd+0x5a>
   baca6:	4602      	mov	r2, r0
   baca8:	4b0c      	ldr	r3, [pc, #48]	; (bacdc <__multadd+0x84>)
   bacaa:	480d      	ldr	r0, [pc, #52]	; (bace0 <__multadd+0x88>)
   bacac:	21b5      	movs	r1, #181	; 0xb5
   bacae:	f7fb fb3f 	bl	b6330 <__assert_func>
   bacb2:	6922      	ldr	r2, [r4, #16]
   bacb4:	3202      	adds	r2, #2
   bacb6:	f104 010c 	add.w	r1, r4, #12
   bacba:	0092      	lsls	r2, r2, #2
   bacbc:	300c      	adds	r0, #12
   bacbe:	f7fe fbd1 	bl	b9464 <memcpy>
   bacc2:	4621      	mov	r1, r4
   bacc4:	4638      	mov	r0, r7
   bacc6:	f7ff ffa5 	bl	bac14 <_Bfree>
   bacca:	4644      	mov	r4, r8
   baccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bacd0:	3501      	adds	r5, #1
   bacd2:	615e      	str	r6, [r3, #20]
   bacd4:	6125      	str	r5, [r4, #16]
   bacd6:	4620      	mov	r0, r4
   bacd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bacdc:	000bc089 	.word	0x000bc089
   bace0:	000bc134 	.word	0x000bc134

000bace4 <__s2b>:
   bace4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bace8:	460c      	mov	r4, r1
   bacea:	4615      	mov	r5, r2
   bacec:	461f      	mov	r7, r3
   bacee:	2209      	movs	r2, #9
   bacf0:	3308      	adds	r3, #8
   bacf2:	4606      	mov	r6, r0
   bacf4:	fb93 f3f2 	sdiv	r3, r3, r2
   bacf8:	2100      	movs	r1, #0
   bacfa:	2201      	movs	r2, #1
   bacfc:	429a      	cmp	r2, r3
   bacfe:	db09      	blt.n	bad14 <__s2b+0x30>
   bad00:	4630      	mov	r0, r6
   bad02:	f7ff ff47 	bl	bab94 <_Balloc>
   bad06:	b940      	cbnz	r0, bad1a <__s2b+0x36>
   bad08:	4602      	mov	r2, r0
   bad0a:	4b19      	ldr	r3, [pc, #100]	; (bad70 <__s2b+0x8c>)
   bad0c:	4819      	ldr	r0, [pc, #100]	; (bad74 <__s2b+0x90>)
   bad0e:	21ce      	movs	r1, #206	; 0xce
   bad10:	f7fb fb0e 	bl	b6330 <__assert_func>
   bad14:	0052      	lsls	r2, r2, #1
   bad16:	3101      	adds	r1, #1
   bad18:	e7f0      	b.n	bacfc <__s2b+0x18>
   bad1a:	9b08      	ldr	r3, [sp, #32]
   bad1c:	6143      	str	r3, [r0, #20]
   bad1e:	2d09      	cmp	r5, #9
   bad20:	f04f 0301 	mov.w	r3, #1
   bad24:	6103      	str	r3, [r0, #16]
   bad26:	dd16      	ble.n	bad56 <__s2b+0x72>
   bad28:	f104 0909 	add.w	r9, r4, #9
   bad2c:	46c8      	mov	r8, r9
   bad2e:	442c      	add	r4, r5
   bad30:	f818 3b01 	ldrb.w	r3, [r8], #1
   bad34:	4601      	mov	r1, r0
   bad36:	3b30      	subs	r3, #48	; 0x30
   bad38:	220a      	movs	r2, #10
   bad3a:	4630      	mov	r0, r6
   bad3c:	f7ff ff8c 	bl	bac58 <__multadd>
   bad40:	45a0      	cmp	r8, r4
   bad42:	d1f5      	bne.n	bad30 <__s2b+0x4c>
   bad44:	f1a5 0408 	sub.w	r4, r5, #8
   bad48:	444c      	add	r4, r9
   bad4a:	1b2d      	subs	r5, r5, r4
   bad4c:	1963      	adds	r3, r4, r5
   bad4e:	42bb      	cmp	r3, r7
   bad50:	db04      	blt.n	bad5c <__s2b+0x78>
   bad52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bad56:	340a      	adds	r4, #10
   bad58:	2509      	movs	r5, #9
   bad5a:	e7f6      	b.n	bad4a <__s2b+0x66>
   bad5c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bad60:	4601      	mov	r1, r0
   bad62:	3b30      	subs	r3, #48	; 0x30
   bad64:	220a      	movs	r2, #10
   bad66:	4630      	mov	r0, r6
   bad68:	f7ff ff76 	bl	bac58 <__multadd>
   bad6c:	e7ee      	b.n	bad4c <__s2b+0x68>
   bad6e:	bf00      	nop
   bad70:	000bc089 	.word	0x000bc089
   bad74:	000bc134 	.word	0x000bc134

000bad78 <__hi0bits>:
   bad78:	0c03      	lsrs	r3, r0, #16
   bad7a:	041b      	lsls	r3, r3, #16
   bad7c:	b9d3      	cbnz	r3, badb4 <__hi0bits+0x3c>
   bad7e:	0400      	lsls	r0, r0, #16
   bad80:	2310      	movs	r3, #16
   bad82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bad86:	bf04      	itt	eq
   bad88:	0200      	lsleq	r0, r0, #8
   bad8a:	3308      	addeq	r3, #8
   bad8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bad90:	bf04      	itt	eq
   bad92:	0100      	lsleq	r0, r0, #4
   bad94:	3304      	addeq	r3, #4
   bad96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bad9a:	bf04      	itt	eq
   bad9c:	0080      	lsleq	r0, r0, #2
   bad9e:	3302      	addeq	r3, #2
   bada0:	2800      	cmp	r0, #0
   bada2:	db05      	blt.n	badb0 <__hi0bits+0x38>
   bada4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bada8:	f103 0301 	add.w	r3, r3, #1
   badac:	bf08      	it	eq
   badae:	2320      	moveq	r3, #32
   badb0:	4618      	mov	r0, r3
   badb2:	4770      	bx	lr
   badb4:	2300      	movs	r3, #0
   badb6:	e7e4      	b.n	bad82 <__hi0bits+0xa>

000badb8 <__lo0bits>:
   badb8:	6803      	ldr	r3, [r0, #0]
   badba:	f013 0207 	ands.w	r2, r3, #7
   badbe:	4601      	mov	r1, r0
   badc0:	d00b      	beq.n	badda <__lo0bits+0x22>
   badc2:	07da      	lsls	r2, r3, #31
   badc4:	d423      	bmi.n	bae0e <__lo0bits+0x56>
   badc6:	0798      	lsls	r0, r3, #30
   badc8:	bf49      	itett	mi
   badca:	085b      	lsrmi	r3, r3, #1
   badcc:	089b      	lsrpl	r3, r3, #2
   badce:	2001      	movmi	r0, #1
   badd0:	600b      	strmi	r3, [r1, #0]
   badd2:	bf5c      	itt	pl
   badd4:	600b      	strpl	r3, [r1, #0]
   badd6:	2002      	movpl	r0, #2
   badd8:	4770      	bx	lr
   badda:	b298      	uxth	r0, r3
   baddc:	b9a8      	cbnz	r0, bae0a <__lo0bits+0x52>
   badde:	0c1b      	lsrs	r3, r3, #16
   bade0:	2010      	movs	r0, #16
   bade2:	b2da      	uxtb	r2, r3
   bade4:	b90a      	cbnz	r2, badea <__lo0bits+0x32>
   bade6:	3008      	adds	r0, #8
   bade8:	0a1b      	lsrs	r3, r3, #8
   badea:	071a      	lsls	r2, r3, #28
   badec:	bf04      	itt	eq
   badee:	091b      	lsreq	r3, r3, #4
   badf0:	3004      	addeq	r0, #4
   badf2:	079a      	lsls	r2, r3, #30
   badf4:	bf04      	itt	eq
   badf6:	089b      	lsreq	r3, r3, #2
   badf8:	3002      	addeq	r0, #2
   badfa:	07da      	lsls	r2, r3, #31
   badfc:	d403      	bmi.n	bae06 <__lo0bits+0x4e>
   badfe:	085b      	lsrs	r3, r3, #1
   bae00:	f100 0001 	add.w	r0, r0, #1
   bae04:	d005      	beq.n	bae12 <__lo0bits+0x5a>
   bae06:	600b      	str	r3, [r1, #0]
   bae08:	4770      	bx	lr
   bae0a:	4610      	mov	r0, r2
   bae0c:	e7e9      	b.n	bade2 <__lo0bits+0x2a>
   bae0e:	2000      	movs	r0, #0
   bae10:	4770      	bx	lr
   bae12:	2020      	movs	r0, #32
   bae14:	4770      	bx	lr
	...

000bae18 <__i2b>:
   bae18:	b510      	push	{r4, lr}
   bae1a:	460c      	mov	r4, r1
   bae1c:	2101      	movs	r1, #1
   bae1e:	f7ff feb9 	bl	bab94 <_Balloc>
   bae22:	4602      	mov	r2, r0
   bae24:	b928      	cbnz	r0, bae32 <__i2b+0x1a>
   bae26:	4b05      	ldr	r3, [pc, #20]	; (bae3c <__i2b+0x24>)
   bae28:	4805      	ldr	r0, [pc, #20]	; (bae40 <__i2b+0x28>)
   bae2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bae2e:	f7fb fa7f 	bl	b6330 <__assert_func>
   bae32:	2301      	movs	r3, #1
   bae34:	6144      	str	r4, [r0, #20]
   bae36:	6103      	str	r3, [r0, #16]
   bae38:	bd10      	pop	{r4, pc}
   bae3a:	bf00      	nop
   bae3c:	000bc089 	.word	0x000bc089
   bae40:	000bc134 	.word	0x000bc134

000bae44 <__multiply>:
   bae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bae48:	4691      	mov	r9, r2
   bae4a:	690a      	ldr	r2, [r1, #16]
   bae4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bae50:	429a      	cmp	r2, r3
   bae52:	bfb8      	it	lt
   bae54:	460b      	movlt	r3, r1
   bae56:	460c      	mov	r4, r1
   bae58:	bfbc      	itt	lt
   bae5a:	464c      	movlt	r4, r9
   bae5c:	4699      	movlt	r9, r3
   bae5e:	6927      	ldr	r7, [r4, #16]
   bae60:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bae64:	68a3      	ldr	r3, [r4, #8]
   bae66:	6861      	ldr	r1, [r4, #4]
   bae68:	eb07 060a 	add.w	r6, r7, sl
   bae6c:	42b3      	cmp	r3, r6
   bae6e:	b085      	sub	sp, #20
   bae70:	bfb8      	it	lt
   bae72:	3101      	addlt	r1, #1
   bae74:	f7ff fe8e 	bl	bab94 <_Balloc>
   bae78:	b930      	cbnz	r0, bae88 <__multiply+0x44>
   bae7a:	4602      	mov	r2, r0
   bae7c:	4b44      	ldr	r3, [pc, #272]	; (baf90 <__multiply+0x14c>)
   bae7e:	4845      	ldr	r0, [pc, #276]	; (baf94 <__multiply+0x150>)
   bae80:	f240 115d 	movw	r1, #349	; 0x15d
   bae84:	f7fb fa54 	bl	b6330 <__assert_func>
   bae88:	f100 0514 	add.w	r5, r0, #20
   bae8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bae90:	462b      	mov	r3, r5
   bae92:	2200      	movs	r2, #0
   bae94:	4543      	cmp	r3, r8
   bae96:	d321      	bcc.n	baedc <__multiply+0x98>
   bae98:	f104 0314 	add.w	r3, r4, #20
   bae9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   baea0:	f109 0314 	add.w	r3, r9, #20
   baea4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   baea8:	9202      	str	r2, [sp, #8]
   baeaa:	1b3a      	subs	r2, r7, r4
   baeac:	3a15      	subs	r2, #21
   baeae:	f022 0203 	bic.w	r2, r2, #3
   baeb2:	3204      	adds	r2, #4
   baeb4:	f104 0115 	add.w	r1, r4, #21
   baeb8:	428f      	cmp	r7, r1
   baeba:	bf38      	it	cc
   baebc:	2204      	movcc	r2, #4
   baebe:	9201      	str	r2, [sp, #4]
   baec0:	9a02      	ldr	r2, [sp, #8]
   baec2:	9303      	str	r3, [sp, #12]
   baec4:	429a      	cmp	r2, r3
   baec6:	d80c      	bhi.n	baee2 <__multiply+0x9e>
   baec8:	2e00      	cmp	r6, #0
   baeca:	dd03      	ble.n	baed4 <__multiply+0x90>
   baecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   baed0:	2b00      	cmp	r3, #0
   baed2:	d05a      	beq.n	baf8a <__multiply+0x146>
   baed4:	6106      	str	r6, [r0, #16]
   baed6:	b005      	add	sp, #20
   baed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   baedc:	f843 2b04 	str.w	r2, [r3], #4
   baee0:	e7d8      	b.n	bae94 <__multiply+0x50>
   baee2:	f8b3 a000 	ldrh.w	sl, [r3]
   baee6:	f1ba 0f00 	cmp.w	sl, #0
   baeea:	d024      	beq.n	baf36 <__multiply+0xf2>
   baeec:	f104 0e14 	add.w	lr, r4, #20
   baef0:	46a9      	mov	r9, r5
   baef2:	f04f 0c00 	mov.w	ip, #0
   baef6:	f85e 2b04 	ldr.w	r2, [lr], #4
   baefa:	f8d9 1000 	ldr.w	r1, [r9]
   baefe:	fa1f fb82 	uxth.w	fp, r2
   baf02:	b289      	uxth	r1, r1
   baf04:	fb0a 110b 	mla	r1, sl, fp, r1
   baf08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   baf0c:	f8d9 2000 	ldr.w	r2, [r9]
   baf10:	4461      	add	r1, ip
   baf12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baf16:	fb0a c20b 	mla	r2, sl, fp, ip
   baf1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   baf1e:	b289      	uxth	r1, r1
   baf20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   baf24:	4577      	cmp	r7, lr
   baf26:	f849 1b04 	str.w	r1, [r9], #4
   baf2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baf2e:	d8e2      	bhi.n	baef6 <__multiply+0xb2>
   baf30:	9a01      	ldr	r2, [sp, #4]
   baf32:	f845 c002 	str.w	ip, [r5, r2]
   baf36:	9a03      	ldr	r2, [sp, #12]
   baf38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   baf3c:	3304      	adds	r3, #4
   baf3e:	f1b9 0f00 	cmp.w	r9, #0
   baf42:	d020      	beq.n	baf86 <__multiply+0x142>
   baf44:	6829      	ldr	r1, [r5, #0]
   baf46:	f104 0c14 	add.w	ip, r4, #20
   baf4a:	46ae      	mov	lr, r5
   baf4c:	f04f 0a00 	mov.w	sl, #0
   baf50:	f8bc b000 	ldrh.w	fp, [ip]
   baf54:	f8be 2002 	ldrh.w	r2, [lr, #2]
   baf58:	fb09 220b 	mla	r2, r9, fp, r2
   baf5c:	4492      	add	sl, r2
   baf5e:	b289      	uxth	r1, r1
   baf60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   baf64:	f84e 1b04 	str.w	r1, [lr], #4
   baf68:	f85c 2b04 	ldr.w	r2, [ip], #4
   baf6c:	f8be 1000 	ldrh.w	r1, [lr]
   baf70:	0c12      	lsrs	r2, r2, #16
   baf72:	fb09 1102 	mla	r1, r9, r2, r1
   baf76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   baf7a:	4567      	cmp	r7, ip
   baf7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   baf80:	d8e6      	bhi.n	baf50 <__multiply+0x10c>
   baf82:	9a01      	ldr	r2, [sp, #4]
   baf84:	50a9      	str	r1, [r5, r2]
   baf86:	3504      	adds	r5, #4
   baf88:	e79a      	b.n	baec0 <__multiply+0x7c>
   baf8a:	3e01      	subs	r6, #1
   baf8c:	e79c      	b.n	baec8 <__multiply+0x84>
   baf8e:	bf00      	nop
   baf90:	000bc089 	.word	0x000bc089
   baf94:	000bc134 	.word	0x000bc134

000baf98 <__pow5mult>:
   baf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baf9c:	4615      	mov	r5, r2
   baf9e:	f012 0203 	ands.w	r2, r2, #3
   bafa2:	4606      	mov	r6, r0
   bafa4:	460f      	mov	r7, r1
   bafa6:	d007      	beq.n	bafb8 <__pow5mult+0x20>
   bafa8:	4c25      	ldr	r4, [pc, #148]	; (bb040 <__pow5mult+0xa8>)
   bafaa:	3a01      	subs	r2, #1
   bafac:	2300      	movs	r3, #0
   bafae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bafb2:	f7ff fe51 	bl	bac58 <__multadd>
   bafb6:	4607      	mov	r7, r0
   bafb8:	10ad      	asrs	r5, r5, #2
   bafba:	d03d      	beq.n	bb038 <__pow5mult+0xa0>
   bafbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bafbe:	b97c      	cbnz	r4, bafe0 <__pow5mult+0x48>
   bafc0:	2010      	movs	r0, #16
   bafc2:	f7fb f975 	bl	b62b0 <malloc>
   bafc6:	4602      	mov	r2, r0
   bafc8:	6270      	str	r0, [r6, #36]	; 0x24
   bafca:	b928      	cbnz	r0, bafd8 <__pow5mult+0x40>
   bafcc:	4b1d      	ldr	r3, [pc, #116]	; (bb044 <__pow5mult+0xac>)
   bafce:	481e      	ldr	r0, [pc, #120]	; (bb048 <__pow5mult+0xb0>)
   bafd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bafd4:	f7fb f9ac 	bl	b6330 <__assert_func>
   bafd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bafdc:	6004      	str	r4, [r0, #0]
   bafde:	60c4      	str	r4, [r0, #12]
   bafe0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bafe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bafe8:	b94c      	cbnz	r4, baffe <__pow5mult+0x66>
   bafea:	f240 2171 	movw	r1, #625	; 0x271
   bafee:	4630      	mov	r0, r6
   baff0:	f7ff ff12 	bl	bae18 <__i2b>
   baff4:	2300      	movs	r3, #0
   baff6:	f8c8 0008 	str.w	r0, [r8, #8]
   baffa:	4604      	mov	r4, r0
   baffc:	6003      	str	r3, [r0, #0]
   baffe:	f04f 0900 	mov.w	r9, #0
   bb002:	07eb      	lsls	r3, r5, #31
   bb004:	d50a      	bpl.n	bb01c <__pow5mult+0x84>
   bb006:	4639      	mov	r1, r7
   bb008:	4622      	mov	r2, r4
   bb00a:	4630      	mov	r0, r6
   bb00c:	f7ff ff1a 	bl	bae44 <__multiply>
   bb010:	4639      	mov	r1, r7
   bb012:	4680      	mov	r8, r0
   bb014:	4630      	mov	r0, r6
   bb016:	f7ff fdfd 	bl	bac14 <_Bfree>
   bb01a:	4647      	mov	r7, r8
   bb01c:	106d      	asrs	r5, r5, #1
   bb01e:	d00b      	beq.n	bb038 <__pow5mult+0xa0>
   bb020:	6820      	ldr	r0, [r4, #0]
   bb022:	b938      	cbnz	r0, bb034 <__pow5mult+0x9c>
   bb024:	4622      	mov	r2, r4
   bb026:	4621      	mov	r1, r4
   bb028:	4630      	mov	r0, r6
   bb02a:	f7ff ff0b 	bl	bae44 <__multiply>
   bb02e:	6020      	str	r0, [r4, #0]
   bb030:	f8c0 9000 	str.w	r9, [r0]
   bb034:	4604      	mov	r4, r0
   bb036:	e7e4      	b.n	bb002 <__pow5mult+0x6a>
   bb038:	4638      	mov	r0, r7
   bb03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb03e:	bf00      	nop
   bb040:	000bc2a8 	.word	0x000bc2a8
   bb044:	000bbe92 	.word	0x000bbe92
   bb048:	000bc134 	.word	0x000bc134

000bb04c <__lshift>:
   bb04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb050:	460c      	mov	r4, r1
   bb052:	6849      	ldr	r1, [r1, #4]
   bb054:	6923      	ldr	r3, [r4, #16]
   bb056:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb05a:	68a3      	ldr	r3, [r4, #8]
   bb05c:	4607      	mov	r7, r0
   bb05e:	4691      	mov	r9, r2
   bb060:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb064:	f108 0601 	add.w	r6, r8, #1
   bb068:	42b3      	cmp	r3, r6
   bb06a:	db0b      	blt.n	bb084 <__lshift+0x38>
   bb06c:	4638      	mov	r0, r7
   bb06e:	f7ff fd91 	bl	bab94 <_Balloc>
   bb072:	4605      	mov	r5, r0
   bb074:	b948      	cbnz	r0, bb08a <__lshift+0x3e>
   bb076:	4602      	mov	r2, r0
   bb078:	4b2a      	ldr	r3, [pc, #168]	; (bb124 <__lshift+0xd8>)
   bb07a:	482b      	ldr	r0, [pc, #172]	; (bb128 <__lshift+0xdc>)
   bb07c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bb080:	f7fb f956 	bl	b6330 <__assert_func>
   bb084:	3101      	adds	r1, #1
   bb086:	005b      	lsls	r3, r3, #1
   bb088:	e7ee      	b.n	bb068 <__lshift+0x1c>
   bb08a:	2300      	movs	r3, #0
   bb08c:	f100 0114 	add.w	r1, r0, #20
   bb090:	f100 0210 	add.w	r2, r0, #16
   bb094:	4618      	mov	r0, r3
   bb096:	4553      	cmp	r3, sl
   bb098:	db37      	blt.n	bb10a <__lshift+0xbe>
   bb09a:	6920      	ldr	r0, [r4, #16]
   bb09c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bb0a0:	f104 0314 	add.w	r3, r4, #20
   bb0a4:	f019 091f 	ands.w	r9, r9, #31
   bb0a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bb0ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bb0b0:	d02f      	beq.n	bb112 <__lshift+0xc6>
   bb0b2:	f1c9 0e20 	rsb	lr, r9, #32
   bb0b6:	468a      	mov	sl, r1
   bb0b8:	f04f 0c00 	mov.w	ip, #0
   bb0bc:	681a      	ldr	r2, [r3, #0]
   bb0be:	fa02 f209 	lsl.w	r2, r2, r9
   bb0c2:	ea42 020c 	orr.w	r2, r2, ip
   bb0c6:	f84a 2b04 	str.w	r2, [sl], #4
   bb0ca:	f853 2b04 	ldr.w	r2, [r3], #4
   bb0ce:	4298      	cmp	r0, r3
   bb0d0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb0d4:	d8f2      	bhi.n	bb0bc <__lshift+0x70>
   bb0d6:	1b03      	subs	r3, r0, r4
   bb0d8:	3b15      	subs	r3, #21
   bb0da:	f023 0303 	bic.w	r3, r3, #3
   bb0de:	3304      	adds	r3, #4
   bb0e0:	f104 0215 	add.w	r2, r4, #21
   bb0e4:	4290      	cmp	r0, r2
   bb0e6:	bf38      	it	cc
   bb0e8:	2304      	movcc	r3, #4
   bb0ea:	f841 c003 	str.w	ip, [r1, r3]
   bb0ee:	f1bc 0f00 	cmp.w	ip, #0
   bb0f2:	d001      	beq.n	bb0f8 <__lshift+0xac>
   bb0f4:	f108 0602 	add.w	r6, r8, #2
   bb0f8:	3e01      	subs	r6, #1
   bb0fa:	4638      	mov	r0, r7
   bb0fc:	612e      	str	r6, [r5, #16]
   bb0fe:	4621      	mov	r1, r4
   bb100:	f7ff fd88 	bl	bac14 <_Bfree>
   bb104:	4628      	mov	r0, r5
   bb106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb10a:	f842 0f04 	str.w	r0, [r2, #4]!
   bb10e:	3301      	adds	r3, #1
   bb110:	e7c1      	b.n	bb096 <__lshift+0x4a>
   bb112:	3904      	subs	r1, #4
   bb114:	f853 2b04 	ldr.w	r2, [r3], #4
   bb118:	f841 2f04 	str.w	r2, [r1, #4]!
   bb11c:	4298      	cmp	r0, r3
   bb11e:	d8f9      	bhi.n	bb114 <__lshift+0xc8>
   bb120:	e7ea      	b.n	bb0f8 <__lshift+0xac>
   bb122:	bf00      	nop
   bb124:	000bc089 	.word	0x000bc089
   bb128:	000bc134 	.word	0x000bc134

000bb12c <__mcmp>:
   bb12c:	b530      	push	{r4, r5, lr}
   bb12e:	6902      	ldr	r2, [r0, #16]
   bb130:	690c      	ldr	r4, [r1, #16]
   bb132:	1b12      	subs	r2, r2, r4
   bb134:	d10e      	bne.n	bb154 <__mcmp+0x28>
   bb136:	f100 0314 	add.w	r3, r0, #20
   bb13a:	3114      	adds	r1, #20
   bb13c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb140:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb144:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb148:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb14c:	42a5      	cmp	r5, r4
   bb14e:	d003      	beq.n	bb158 <__mcmp+0x2c>
   bb150:	d305      	bcc.n	bb15e <__mcmp+0x32>
   bb152:	2201      	movs	r2, #1
   bb154:	4610      	mov	r0, r2
   bb156:	bd30      	pop	{r4, r5, pc}
   bb158:	4283      	cmp	r3, r0
   bb15a:	d3f3      	bcc.n	bb144 <__mcmp+0x18>
   bb15c:	e7fa      	b.n	bb154 <__mcmp+0x28>
   bb15e:	f04f 32ff 	mov.w	r2, #4294967295
   bb162:	e7f7      	b.n	bb154 <__mcmp+0x28>

000bb164 <__mdiff>:
   bb164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb168:	460c      	mov	r4, r1
   bb16a:	4606      	mov	r6, r0
   bb16c:	4611      	mov	r1, r2
   bb16e:	4620      	mov	r0, r4
   bb170:	4690      	mov	r8, r2
   bb172:	f7ff ffdb 	bl	bb12c <__mcmp>
   bb176:	1e05      	subs	r5, r0, #0
   bb178:	d110      	bne.n	bb19c <__mdiff+0x38>
   bb17a:	4629      	mov	r1, r5
   bb17c:	4630      	mov	r0, r6
   bb17e:	f7ff fd09 	bl	bab94 <_Balloc>
   bb182:	b930      	cbnz	r0, bb192 <__mdiff+0x2e>
   bb184:	4b3a      	ldr	r3, [pc, #232]	; (bb270 <__mdiff+0x10c>)
   bb186:	4602      	mov	r2, r0
   bb188:	f240 2132 	movw	r1, #562	; 0x232
   bb18c:	4839      	ldr	r0, [pc, #228]	; (bb274 <__mdiff+0x110>)
   bb18e:	f7fb f8cf 	bl	b6330 <__assert_func>
   bb192:	2301      	movs	r3, #1
   bb194:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb19c:	bfa4      	itt	ge
   bb19e:	4643      	movge	r3, r8
   bb1a0:	46a0      	movge	r8, r4
   bb1a2:	4630      	mov	r0, r6
   bb1a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb1a8:	bfa6      	itte	ge
   bb1aa:	461c      	movge	r4, r3
   bb1ac:	2500      	movge	r5, #0
   bb1ae:	2501      	movlt	r5, #1
   bb1b0:	f7ff fcf0 	bl	bab94 <_Balloc>
   bb1b4:	b920      	cbnz	r0, bb1c0 <__mdiff+0x5c>
   bb1b6:	4b2e      	ldr	r3, [pc, #184]	; (bb270 <__mdiff+0x10c>)
   bb1b8:	4602      	mov	r2, r0
   bb1ba:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb1be:	e7e5      	b.n	bb18c <__mdiff+0x28>
   bb1c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb1c4:	6926      	ldr	r6, [r4, #16]
   bb1c6:	60c5      	str	r5, [r0, #12]
   bb1c8:	f104 0914 	add.w	r9, r4, #20
   bb1cc:	f108 0514 	add.w	r5, r8, #20
   bb1d0:	f100 0e14 	add.w	lr, r0, #20
   bb1d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb1d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb1dc:	f108 0210 	add.w	r2, r8, #16
   bb1e0:	46f2      	mov	sl, lr
   bb1e2:	2100      	movs	r1, #0
   bb1e4:	f859 3b04 	ldr.w	r3, [r9], #4
   bb1e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb1ec:	fa1f f883 	uxth.w	r8, r3
   bb1f0:	fa11 f18b 	uxtah	r1, r1, fp
   bb1f4:	0c1b      	lsrs	r3, r3, #16
   bb1f6:	eba1 0808 	sub.w	r8, r1, r8
   bb1fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb1fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb202:	fa1f f888 	uxth.w	r8, r8
   bb206:	1419      	asrs	r1, r3, #16
   bb208:	454e      	cmp	r6, r9
   bb20a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb20e:	f84a 3b04 	str.w	r3, [sl], #4
   bb212:	d8e7      	bhi.n	bb1e4 <__mdiff+0x80>
   bb214:	1b33      	subs	r3, r6, r4
   bb216:	3b15      	subs	r3, #21
   bb218:	f023 0303 	bic.w	r3, r3, #3
   bb21c:	3304      	adds	r3, #4
   bb21e:	3415      	adds	r4, #21
   bb220:	42a6      	cmp	r6, r4
   bb222:	bf38      	it	cc
   bb224:	2304      	movcc	r3, #4
   bb226:	441d      	add	r5, r3
   bb228:	4473      	add	r3, lr
   bb22a:	469e      	mov	lr, r3
   bb22c:	462e      	mov	r6, r5
   bb22e:	4566      	cmp	r6, ip
   bb230:	d30e      	bcc.n	bb250 <__mdiff+0xec>
   bb232:	f10c 0203 	add.w	r2, ip, #3
   bb236:	1b52      	subs	r2, r2, r5
   bb238:	f022 0203 	bic.w	r2, r2, #3
   bb23c:	3d03      	subs	r5, #3
   bb23e:	45ac      	cmp	ip, r5
   bb240:	bf38      	it	cc
   bb242:	2200      	movcc	r2, #0
   bb244:	441a      	add	r2, r3
   bb246:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb24a:	b17b      	cbz	r3, bb26c <__mdiff+0x108>
   bb24c:	6107      	str	r7, [r0, #16]
   bb24e:	e7a3      	b.n	bb198 <__mdiff+0x34>
   bb250:	f856 8b04 	ldr.w	r8, [r6], #4
   bb254:	fa11 f288 	uxtah	r2, r1, r8
   bb258:	1414      	asrs	r4, r2, #16
   bb25a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb25e:	b292      	uxth	r2, r2
   bb260:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb264:	f84e 2b04 	str.w	r2, [lr], #4
   bb268:	1421      	asrs	r1, r4, #16
   bb26a:	e7e0      	b.n	bb22e <__mdiff+0xca>
   bb26c:	3f01      	subs	r7, #1
   bb26e:	e7ea      	b.n	bb246 <__mdiff+0xe2>
   bb270:	000bc089 	.word	0x000bc089
   bb274:	000bc134 	.word	0x000bc134

000bb278 <__ulp>:
   bb278:	b082      	sub	sp, #8
   bb27a:	ed8d 0b00 	vstr	d0, [sp]
   bb27e:	9b01      	ldr	r3, [sp, #4]
   bb280:	4912      	ldr	r1, [pc, #72]	; (bb2cc <__ulp+0x54>)
   bb282:	4019      	ands	r1, r3
   bb284:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb288:	2900      	cmp	r1, #0
   bb28a:	dd05      	ble.n	bb298 <__ulp+0x20>
   bb28c:	2200      	movs	r2, #0
   bb28e:	460b      	mov	r3, r1
   bb290:	ec43 2b10 	vmov	d0, r2, r3
   bb294:	b002      	add	sp, #8
   bb296:	4770      	bx	lr
   bb298:	4249      	negs	r1, r1
   bb29a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb29e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb2a2:	f04f 0200 	mov.w	r2, #0
   bb2a6:	f04f 0300 	mov.w	r3, #0
   bb2aa:	da04      	bge.n	bb2b6 <__ulp+0x3e>
   bb2ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb2b0:	fa41 f300 	asr.w	r3, r1, r0
   bb2b4:	e7ec      	b.n	bb290 <__ulp+0x18>
   bb2b6:	f1a0 0114 	sub.w	r1, r0, #20
   bb2ba:	291e      	cmp	r1, #30
   bb2bc:	bfda      	itte	le
   bb2be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb2c2:	fa20 f101 	lsrle.w	r1, r0, r1
   bb2c6:	2101      	movgt	r1, #1
   bb2c8:	460a      	mov	r2, r1
   bb2ca:	e7e1      	b.n	bb290 <__ulp+0x18>
   bb2cc:	7ff00000 	.word	0x7ff00000

000bb2d0 <__b2d>:
   bb2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb2d2:	6905      	ldr	r5, [r0, #16]
   bb2d4:	f100 0714 	add.w	r7, r0, #20
   bb2d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb2dc:	1f2e      	subs	r6, r5, #4
   bb2de:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb2e2:	4620      	mov	r0, r4
   bb2e4:	f7ff fd48 	bl	bad78 <__hi0bits>
   bb2e8:	f1c0 0320 	rsb	r3, r0, #32
   bb2ec:	280a      	cmp	r0, #10
   bb2ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb36c <__b2d+0x9c>
   bb2f2:	600b      	str	r3, [r1, #0]
   bb2f4:	dc14      	bgt.n	bb320 <__b2d+0x50>
   bb2f6:	f1c0 0e0b 	rsb	lr, r0, #11
   bb2fa:	fa24 f10e 	lsr.w	r1, r4, lr
   bb2fe:	42b7      	cmp	r7, r6
   bb300:	ea41 030c 	orr.w	r3, r1, ip
   bb304:	bf34      	ite	cc
   bb306:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb30a:	2100      	movcs	r1, #0
   bb30c:	3015      	adds	r0, #21
   bb30e:	fa04 f000 	lsl.w	r0, r4, r0
   bb312:	fa21 f10e 	lsr.w	r1, r1, lr
   bb316:	ea40 0201 	orr.w	r2, r0, r1
   bb31a:	ec43 2b10 	vmov	d0, r2, r3
   bb31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb320:	42b7      	cmp	r7, r6
   bb322:	bf3a      	itte	cc
   bb324:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb328:	f1a5 0608 	subcc.w	r6, r5, #8
   bb32c:	2100      	movcs	r1, #0
   bb32e:	380b      	subs	r0, #11
   bb330:	d017      	beq.n	bb362 <__b2d+0x92>
   bb332:	f1c0 0c20 	rsb	ip, r0, #32
   bb336:	fa04 f500 	lsl.w	r5, r4, r0
   bb33a:	42be      	cmp	r6, r7
   bb33c:	fa21 f40c 	lsr.w	r4, r1, ip
   bb340:	ea45 0504 	orr.w	r5, r5, r4
   bb344:	bf8c      	ite	hi
   bb346:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb34a:	2400      	movls	r4, #0
   bb34c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb350:	fa01 f000 	lsl.w	r0, r1, r0
   bb354:	fa24 f40c 	lsr.w	r4, r4, ip
   bb358:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb35c:	ea40 0204 	orr.w	r2, r0, r4
   bb360:	e7db      	b.n	bb31a <__b2d+0x4a>
   bb362:	ea44 030c 	orr.w	r3, r4, ip
   bb366:	460a      	mov	r2, r1
   bb368:	e7d7      	b.n	bb31a <__b2d+0x4a>
   bb36a:	bf00      	nop
   bb36c:	3ff00000 	.word	0x3ff00000

000bb370 <__d2b>:
   bb370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb374:	4689      	mov	r9, r1
   bb376:	2101      	movs	r1, #1
   bb378:	ec57 6b10 	vmov	r6, r7, d0
   bb37c:	4690      	mov	r8, r2
   bb37e:	f7ff fc09 	bl	bab94 <_Balloc>
   bb382:	4604      	mov	r4, r0
   bb384:	b930      	cbnz	r0, bb394 <__d2b+0x24>
   bb386:	4602      	mov	r2, r0
   bb388:	4b25      	ldr	r3, [pc, #148]	; (bb420 <__d2b+0xb0>)
   bb38a:	4826      	ldr	r0, [pc, #152]	; (bb424 <__d2b+0xb4>)
   bb38c:	f240 310a 	movw	r1, #778	; 0x30a
   bb390:	f7fa ffce 	bl	b6330 <__assert_func>
   bb394:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb398:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb39c:	bb35      	cbnz	r5, bb3ec <__d2b+0x7c>
   bb39e:	2e00      	cmp	r6, #0
   bb3a0:	9301      	str	r3, [sp, #4]
   bb3a2:	d028      	beq.n	bb3f6 <__d2b+0x86>
   bb3a4:	4668      	mov	r0, sp
   bb3a6:	9600      	str	r6, [sp, #0]
   bb3a8:	f7ff fd06 	bl	badb8 <__lo0bits>
   bb3ac:	9900      	ldr	r1, [sp, #0]
   bb3ae:	b300      	cbz	r0, bb3f2 <__d2b+0x82>
   bb3b0:	9a01      	ldr	r2, [sp, #4]
   bb3b2:	f1c0 0320 	rsb	r3, r0, #32
   bb3b6:	fa02 f303 	lsl.w	r3, r2, r3
   bb3ba:	430b      	orrs	r3, r1
   bb3bc:	40c2      	lsrs	r2, r0
   bb3be:	6163      	str	r3, [r4, #20]
   bb3c0:	9201      	str	r2, [sp, #4]
   bb3c2:	9b01      	ldr	r3, [sp, #4]
   bb3c4:	61a3      	str	r3, [r4, #24]
   bb3c6:	2b00      	cmp	r3, #0
   bb3c8:	bf14      	ite	ne
   bb3ca:	2202      	movne	r2, #2
   bb3cc:	2201      	moveq	r2, #1
   bb3ce:	6122      	str	r2, [r4, #16]
   bb3d0:	b1d5      	cbz	r5, bb408 <__d2b+0x98>
   bb3d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb3d6:	4405      	add	r5, r0
   bb3d8:	f8c9 5000 	str.w	r5, [r9]
   bb3dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb3e0:	f8c8 0000 	str.w	r0, [r8]
   bb3e4:	4620      	mov	r0, r4
   bb3e6:	b003      	add	sp, #12
   bb3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb3ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb3f0:	e7d5      	b.n	bb39e <__d2b+0x2e>
   bb3f2:	6161      	str	r1, [r4, #20]
   bb3f4:	e7e5      	b.n	bb3c2 <__d2b+0x52>
   bb3f6:	a801      	add	r0, sp, #4
   bb3f8:	f7ff fcde 	bl	badb8 <__lo0bits>
   bb3fc:	9b01      	ldr	r3, [sp, #4]
   bb3fe:	6163      	str	r3, [r4, #20]
   bb400:	2201      	movs	r2, #1
   bb402:	6122      	str	r2, [r4, #16]
   bb404:	3020      	adds	r0, #32
   bb406:	e7e3      	b.n	bb3d0 <__d2b+0x60>
   bb408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb40c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb410:	f8c9 0000 	str.w	r0, [r9]
   bb414:	6918      	ldr	r0, [r3, #16]
   bb416:	f7ff fcaf 	bl	bad78 <__hi0bits>
   bb41a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb41e:	e7df      	b.n	bb3e0 <__d2b+0x70>
   bb420:	000bc089 	.word	0x000bc089
   bb424:	000bc134 	.word	0x000bc134

000bb428 <__ratio>:
   bb428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb42c:	4688      	mov	r8, r1
   bb42e:	4669      	mov	r1, sp
   bb430:	4681      	mov	r9, r0
   bb432:	f7ff ff4d 	bl	bb2d0 <__b2d>
   bb436:	a901      	add	r1, sp, #4
   bb438:	4640      	mov	r0, r8
   bb43a:	ec55 4b10 	vmov	r4, r5, d0
   bb43e:	f7ff ff47 	bl	bb2d0 <__b2d>
   bb442:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb446:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb44a:	eba3 0c02 	sub.w	ip, r3, r2
   bb44e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb452:	1a9b      	subs	r3, r3, r2
   bb454:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb458:	ec51 0b10 	vmov	r0, r1, d0
   bb45c:	2b00      	cmp	r3, #0
   bb45e:	bfd6      	itet	le
   bb460:	460a      	movle	r2, r1
   bb462:	462a      	movgt	r2, r5
   bb464:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb468:	468b      	mov	fp, r1
   bb46a:	462f      	mov	r7, r5
   bb46c:	bfd4      	ite	le
   bb46e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb472:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb476:	4620      	mov	r0, r4
   bb478:	ee10 2a10 	vmov	r2, s0
   bb47c:	465b      	mov	r3, fp
   bb47e:	4639      	mov	r1, r7
   bb480:	f7f9 f8b4 	bl	b45ec <__aeabi_ddiv>
   bb484:	ec41 0b10 	vmov	d0, r0, r1
   bb488:	b003      	add	sp, #12
   bb48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb48e <__copybits>:
   bb48e:	3901      	subs	r1, #1
   bb490:	b570      	push	{r4, r5, r6, lr}
   bb492:	1149      	asrs	r1, r1, #5
   bb494:	6914      	ldr	r4, [r2, #16]
   bb496:	3101      	adds	r1, #1
   bb498:	f102 0314 	add.w	r3, r2, #20
   bb49c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb4a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb4a4:	1f05      	subs	r5, r0, #4
   bb4a6:	42a3      	cmp	r3, r4
   bb4a8:	d30c      	bcc.n	bb4c4 <__copybits+0x36>
   bb4aa:	1aa3      	subs	r3, r4, r2
   bb4ac:	3b11      	subs	r3, #17
   bb4ae:	f023 0303 	bic.w	r3, r3, #3
   bb4b2:	3211      	adds	r2, #17
   bb4b4:	42a2      	cmp	r2, r4
   bb4b6:	bf88      	it	hi
   bb4b8:	2300      	movhi	r3, #0
   bb4ba:	4418      	add	r0, r3
   bb4bc:	2300      	movs	r3, #0
   bb4be:	4288      	cmp	r0, r1
   bb4c0:	d305      	bcc.n	bb4ce <__copybits+0x40>
   bb4c2:	bd70      	pop	{r4, r5, r6, pc}
   bb4c4:	f853 6b04 	ldr.w	r6, [r3], #4
   bb4c8:	f845 6f04 	str.w	r6, [r5, #4]!
   bb4cc:	e7eb      	b.n	bb4a6 <__copybits+0x18>
   bb4ce:	f840 3b04 	str.w	r3, [r0], #4
   bb4d2:	e7f4      	b.n	bb4be <__copybits+0x30>

000bb4d4 <__any_on>:
   bb4d4:	f100 0214 	add.w	r2, r0, #20
   bb4d8:	6900      	ldr	r0, [r0, #16]
   bb4da:	114b      	asrs	r3, r1, #5
   bb4dc:	4298      	cmp	r0, r3
   bb4de:	b510      	push	{r4, lr}
   bb4e0:	db11      	blt.n	bb506 <__any_on+0x32>
   bb4e2:	dd0a      	ble.n	bb4fa <__any_on+0x26>
   bb4e4:	f011 011f 	ands.w	r1, r1, #31
   bb4e8:	d007      	beq.n	bb4fa <__any_on+0x26>
   bb4ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb4ee:	fa24 f001 	lsr.w	r0, r4, r1
   bb4f2:	fa00 f101 	lsl.w	r1, r0, r1
   bb4f6:	428c      	cmp	r4, r1
   bb4f8:	d10b      	bne.n	bb512 <__any_on+0x3e>
   bb4fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb4fe:	4293      	cmp	r3, r2
   bb500:	d803      	bhi.n	bb50a <__any_on+0x36>
   bb502:	2000      	movs	r0, #0
   bb504:	bd10      	pop	{r4, pc}
   bb506:	4603      	mov	r3, r0
   bb508:	e7f7      	b.n	bb4fa <__any_on+0x26>
   bb50a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb50e:	2900      	cmp	r1, #0
   bb510:	d0f5      	beq.n	bb4fe <__any_on+0x2a>
   bb512:	2001      	movs	r0, #1
   bb514:	e7f6      	b.n	bb504 <__any_on+0x30>

000bb516 <_calloc_r>:
   bb516:	b513      	push	{r0, r1, r4, lr}
   bb518:	434a      	muls	r2, r1
   bb51a:	4611      	mov	r1, r2
   bb51c:	9201      	str	r2, [sp, #4]
   bb51e:	f7fa fef7 	bl	b6310 <_malloc_r>
   bb522:	4604      	mov	r4, r0
   bb524:	b118      	cbz	r0, bb52e <_calloc_r+0x18>
   bb526:	9a01      	ldr	r2, [sp, #4]
   bb528:	2100      	movs	r1, #0
   bb52a:	f7fd ffc3 	bl	b94b4 <memset>
   bb52e:	4620      	mov	r0, r4
   bb530:	b002      	add	sp, #8
   bb532:	bd10      	pop	{r4, pc}
   bb534:	0000      	movs	r0, r0
	...

000bb538 <nan>:
   bb538:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb540 <nan+0x8>
   bb53c:	4770      	bx	lr
   bb53e:	bf00      	nop
   bb540:	00000000 	.word	0x00000000
   bb544:	7ff80000 	.word	0x7ff80000

000bb548 <nanf>:
   bb548:	ed9f 0a01 	vldr	s0, [pc, #4]	; bb550 <nanf+0x8>
   bb54c:	4770      	bx	lr
   bb54e:	bf00      	nop
   bb550:	7fc00000 	.word	0x7fc00000

000bb554 <__ascii_wctomb>:
   bb554:	b149      	cbz	r1, bb56a <__ascii_wctomb+0x16>
   bb556:	2aff      	cmp	r2, #255	; 0xff
   bb558:	bf85      	ittet	hi
   bb55a:	238a      	movhi	r3, #138	; 0x8a
   bb55c:	6003      	strhi	r3, [r0, #0]
   bb55e:	700a      	strbls	r2, [r1, #0]
   bb560:	f04f 30ff 	movhi.w	r0, #4294967295
   bb564:	bf98      	it	ls
   bb566:	2001      	movls	r0, #1
   bb568:	4770      	bx	lr
   bb56a:	4608      	mov	r0, r1
   bb56c:	4770      	bx	lr

000bb56e <link_code_end>:
	...

000bb570 <link_const_data_start>:
   bb570:	00000000 	.word	0x00000000
   bb574:	34fb0000 	.word	0x34fb0000
   bb578:	00805f9b 	.word	0x00805f9b
   bb57c:	10008000 	.word	0x10008000
	...

000bb588 <dynalib_user>:
   bb588:	000b4b15 000b4b51 000b4b79 000b4b7d     .K..QK..yK..}K..
   bb598:	00000000 74696157 20676e69 20726f66     ....Waiting for 
   bb5a8:	63454c42 6e65696c 6f632074 63656e6e     BLEclient connec
   bb5b8:	6e6f6974 002e2e2e 65726568 20736920     tion....here is 
   bb5c8:	656d6f73 78657420 61570074 6e207474     some text.Watt n
   bb5d8:	4400776f 54204b4b 7961646f               ow.DKK Today.

000bb5e5 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits>:
   bb5e5:	31303030 33303230 35303430 37303630     0001020304050607
   bb5f5:	39303830 31313031 33313231 35313431     0809101112131415
   bb605:	37313631 39313831 31323032 33323232     1617181920212223
   bb615:	35323432 37323632 39323832 31333033     2425262728293031
   bb625:	33333233 35333433 37333633 39333833     3233343536373839
   bb635:	31343034 33343234 35343434 37343634     4041424344454647
   bb645:	39343834 31353035 33353235 35353435     4849505152535455
   bb655:	37353635 39353835 31363036 33363236     5657585960616263
   bb665:	35363436 37363636 39363836 31373037     6465666768697071
   bb675:	33373237 35373437 37373637 39373837     7273747576777879
   bb685:	31383038 33383238 35383438 37383638     8081828384858687
   bb695:	39383838 31393039 33393239 35393439     8889909192939495
   bb6a5:	37393639 39393839 32346200 30343035     96979899.b425040
   bb6b5:	62662d34 342d6234 2d363437 30623262     4-fb4b-4746-b2b0
   bb6c5:	6633392d 31366530 63323231 34620036     -93f0e61122c6.b4
   bb6d5:	34303532 662d3330 2d623462 36343734     250403-fb4b-4746
   bb6e5:	6232622d 33392d30 36653066 32323131     -b2b0-93f0e61122
   bb6f5:	62003663 30353234 2d323034 62346266     c6.b4250402-fb4b
   bb705:	3437342d 32622d36 392d3062 65306633     -4746-b2b0-93f0e
   bb715:	32313136 00366332 35323462 31303430     61122c6.b4250401
   bb725:	3462662d 37342d62 622d3634 2d306232     -fb4b-4746-b2b0-
   bb735:	30663339 31313665 36633232 31663300     93f0e61122c6.3f1
   bb745:	39353161 65652d36 342d6637 2d646232     a1596-ee7f-42bd-
   bb755:	31643438 6131622d 66343932 63653238     84d1-b1a294f82ec
   bb765:	72410066 506e6f67 6162004d 5f636973     f.ArgonPM.basic_
   bb775:	69727473 3a3a676e 65707061 7b00646e     string::append.{
   bb785:	65792220 3a227261 64252220 00202c22      "year": "%d", .
   bb795:	6e6f6d22 3a226874 30252220 2c226432     "month": "%02d",
   bb7a5:	64220020 3a227961 30252220 2c226432      ."day": "%02d",
   bb7b5:	64220020 745f7961 3a226f77 30252220      ."day_two": "%0
   bb7c5:	2c226432 68220020 2272756f 2522203a     2d", ."hour": "%
   bb7d5:	22643230 65007d20 6972706c 00726573     02d" }.elpriser.
   bb7e5:	69736162 74735f63 676e6972 4d5f3a3a     basic_string::_M
   bb7f5:	6e6f635f 75727473 6e207463 206c6c75     _construct null 
   bb805:	20746f6e 696c6176 65670064 72705f74     not valid.get_pr
   bb815:	73656369 206f4e00 63697270 79207365     ices.No prices y
   bb825:	20007465 25206f74 2c643230 32302520     et. to %02d, %02
   bb835:	74200064 3432206f 3025202c 20006432     d. to 24, %02d. 
   bb845:	25206f74 00643230 20776f4c 63697250     to %02d.Low Pric
   bb855:	6e492065 76726574 3a736c61 63657600     e Intervals:.vec
   bb865:	3a726f74 5f4d5f3a 6c616572 5f636f6c     tor::_M_realloc_
   bb875:	65736e69 4d007472 61737365 64206567     insert.Message d
   bb885:	20617461 276e7369 65722074 20796461     ata isn't ready 
   bb895:	2e746579 73654d00 65676173 73736120     yet..Message ass
   bb8a5:	6c626d65 002e6465 696f7473 6f747300     embled..stoi.sto
   bb8b5:	654d0066 67617373 61442065 52206174     f.Message Data R
   bb8c5:	69656365 2e646576                        eceived....

000bb8d0 <_ZTV5Timer>:
	...
   bb8d8:	000b517d 000b51c1 000b4fe9              }Q...Q...O..

000bb8e4 <_ZTVN5spark13EthernetClassE>:
	...
   bb8ec:	000b63bf 000b63b5 000b63ab 000b63a1     .c...c...c...c..
   bb8fc:	000b6395 000b6389 000b87b1 000b87b9     .c...c..........
   bb90c:	000b637d 000b6375 000b636b 000b6361     }c..uc..kc..ac..
   bb91c:	000b87e9 65737341 6f697472 6961466e     ....AssertionFai
   bb92c:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   bb93c:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   bb94c:	7265766f 20676e69 76726573 73656369     overing services
   bb95c:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   bb96c:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   bb97c:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   bb98c:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   bb99c:	00454e4f 72656550 76656420 20656369     ONE.Peer device 
   bb9ac:	6d207369 69737369 0021676e 6c696146     is missing!.Fail
   bb9bc:	74206465 7061206f 646e6570 65657020     ed to append pee
   bb9cc:	65432072 6172746e 6564206c 65636976     r Central device
   bb9dc:	6f43002e 63656e6e 20646574 43207962     ..Connected by C
   bb9ec:	72746e65 64206c61 63697665 44002e65     entral device..D
   bb9fc:	6f637369 63656e6e 20646574 72207962     isconnected by r
   bba0c:	746f6d65 65642065 65636976 7544002e     emote device..Du
   bba1c:	63696c70 64657461 61686320 74636172     plicated charact
   bba2c:	73697265 20636974 6e6e6163 6220746f     eristic cannot b
   bba3c:	64612065 2e646564 69614600 2064656c     e added..Failed 
   bba4c:	61206f74 6e657070 6f6c2064 206c6163     to append local 
   bba5c:	72616863 65746361 74736972 002e6369     characteristic..

000bba6c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bba74:	000b6663 000b66c5 000b6799 000b66ef     cf...f...g...f..
   bba84:	000b6665                                ef..

000bba88 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bba90:	000b665f 000b66d3 000b6661 000b66f5     _f...f..af...f..
   bbaa0:	000b6685                                .f..

000bbaa4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbaac:	000b665d 000b66e1 000b6f2d 000b66fb     ]f...f..-o...f..
   bbabc:	000b66a5                                .f..

000bbac0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bbac8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bbac8:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bbad8 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bbad8:	5f9b34fb 80000080 00001000 00000000     .4._............
   bbae8:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bbaf8:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bbb08 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbb10:	000b7db1 000b7db7 000b7df5 000b7dc5     .}...}...}...}..
   bbb20:	000b7db3                                .}..

000bbb24 <_ZTV9IPAddress>:
	...
   bbb2c:	000b830d 000b82fd 000b82ff              ............

000bbb38 <_ZTV9USBSerial>:
	...
   bbb40:	000b83f3 000b845b 000b8431 000b79a1     ....[...1....y..
   bbb50:	000b8423 000b83f5 000b8405 000b8455     #...........U...
   bbb60:	000b8415 000b83ed                       ........

000bbb68 <_ZTV11USARTSerial>:
	...
   bbb70:	000b85ad 000b8619 000b85f1 000b79a1     .............y..
   bbb80:	000b85c1 000b85dd 000b85cf 000b85eb     ................
   bbb90:	000b85af 000b85b3                       ........

000bbb98 <_ZTV7TwoWire>:
	...
   bbba0:	000b8679 000b86c3 000b869b 000b867b     y...........{...
   bbbb0:	000b86a3 000b86ab 000b86b3 000b86bb     ................

000bbbc0 <_ZTVN5spark9WiFiClassE>:
	...
   bbbc8:	000b8753 000b8749 000b873f 000b86f5     S...I...?.......
   bbbd8:	000b8733 000b8727 000b87b1 000b87b9     3...'...........
   bbbe8:	000b871b 000b8713 000b8709 000b86ff     ................
   bbbf8:	000b87e9                                ....

000bbbfc <_ZTVN5spark12NetworkClassE>:
	...
   bbc04:	000b8771 000b877b 000b8785 000b878f     q...{...........
   bbc14:	000b8799 000b87a5 000b87b1 000b87b9     ................
   bbc24:	000b87c1 000b87cd 000b87d5 000b87df     ................
   bbc34:	000b87e9                                ....

000bbc38 <_ZSt7nothrow>:
	...

000bbc39 <_ZTSSt19_Sp_make_shared_tag>:
   bbc39:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bbc49:	5f646572 00676174                        red_tag....

000bbc54 <_ZTISt19_Sp_make_shared_tag>:
   bbc54:	000bbda0 000bbc39 20746f6e 756f6e65     ....9...not enou
   bbc64:	73206867 65636170 726f6620 726f6620     gh space for for
   bbc74:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   bbc84:	7361656c 75732065 74696d62 6c756620     lease submit ful
   bbc94:	7562206c 65722067 74726f70 20746120     l bug report at 
   bbca4:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   bbcb4:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   bbcc4:	32313000 36353433 00393837 69736162     .0123456789.basi
   bbcd4:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   bbce4:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
   bbcf4:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
   bbd04:	2d736968 7a69733e 20292865 69687728     his->size() (whi
   bbd14:	69206863 7a252073 62002975 63697361     ch is %zu).basic
   bbd24:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
   bbd34:	00656361 69736162 74735f63 676e6972     ace.basic_string
   bbd44:	61623a3a 5f636973 69727473 6200676e     ::basic_string.b
   bbd54:	63697361 7274735f 3a676e69 6275733a     asic_string::sub
   bbd64:	00727473                                str.

000bbd68 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bbd68:	000bbe00 000bbd74 000bbe24              ....t...$...

000bbd74 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bbd74:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bbd84:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bbd94:	00000045                                E...

000bbd98 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bbd98:	00000000 000bbd68 000b9215 000b9229     ....h.......)...
   bbda8:	000b93bd 000b93bd 000b9293 000b91d5     ................
   bbdb8:	000b927b 000b923d 000b9207              {...=.......

000bbdc4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bbdc4:	000bbe00 000bbdd0 000bbd68              ........h...

000bbdd0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bbdd0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bbde0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bbdf0:	456f666e 00000000                       nfoE....

000bbdf8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bbdf8:	00000000 000bbdc4 000b92bd 000b92d1     ................
   bbe08:	000b93bd 000b93bd 000b9293 000b91d5     ................
   bbe18:	000b9391 000b931d 000b92e5              ............

000bbe24 <_ZTISt9type_info>:
   bbe24:	000bbda0 000bbe2c                       ....,...

000bbe2c <_ZTSSt9type_info>:
   bbe2c:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   bbe3c:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   bbe4c:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000bbe59 <day_name.1>:
   bbe59:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bbe69:	61536972                                 riSat

000bbe6e <mon_name.0>:
   bbe6e:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bbe7e:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bbe8e:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bbe9e:	63757320 64656563 2f006465 2f746e6d      succeeded./mnt/
   bbeae:	6b726f77 63617073 6f772f65 70736b72     workspace/worksp
   bbebe:	2f656361 2d434347 702d3031 6c657069     ace/GCC-10-pipel
   bbece:	2f656e69 6b6e656a 2d736e69 2d434347     ine/jenkins-GCC-
   bbede:	702d3031 6c657069 2d656e69 325f3834     10-pipeline-48_2
   bbeee:	31303230 5f343231 36303631 36303831     0201124_16061806
   bbefe:	732f3134 6e2f6372 696c7765 656e2f62     41/src/newlib/ne
   bbf0e:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
   bbf1e:	6e61722f 00632e64 6900666e 7974696e     /rand.c.nf.inity
   bbf2e:	006e6100                                 .an...

000bbf34 <fpi.1>:
   bbf34:	00000035 fffffbce 000003cb 00000001     5...............
   bbf44:	00000000                                ....

000bbf48 <fpinan.0>:
   bbf48:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bbf60 <tinytens>:
   bbf60:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bbf70:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bbf80:	64ac6f43 11680628                       Co.d(.h.

000bbf88 <_ctype_>:
   bbf88:	20202000 20202020 28282020 20282828     .         ((((( 
   bbf98:	20202020 20202020 20202020 20202020                     
   bbfa8:	10108820 10101010 10101010 10101010      ...............
   bbfb8:	04040410 04040404 10040404 10101010     ................
   bbfc8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bbfd8:	01010101 01010101 01010101 10101010     ................
   bbfe8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bbff8:	02020202 02020202 02020202 10101010     ................
   bc008:	00000020 00000000 00000000 00000000      ...............
	...
   bc088:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bc098:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bc0a8:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bc0b8:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bc0c8:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bc0d8:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bc0e8:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bc0f8:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bc108:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bc118:	78656874 0000632e                       thex.c..

000bc120 <_C_numeric_locale>:
   bc120:	000bb5be 000bbe58 2003e374 4f500043     ....X...t.. C.PO
   bc130:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bc140:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bc150:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bc160:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bc170:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bc180:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bc190:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bc1a0:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bc1b0:	00000063 00000000                       c.......

000bc1b8 <__mprec_bigtens>:
   bc1b8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bc1c8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bc1d8:	7f73bf3c 75154fdd                       <.s..O.u

000bc1e0 <__mprec_tens>:
   bc1e0:	00000000 3ff00000 00000000 40240000     .......?......$@
   bc1f0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bc200:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bc210:	00000000 412e8480 00000000 416312d0     .......A......cA
   bc220:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bc230:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bc240:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bc250:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bc260:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bc270:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bc280:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bc290:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bc2a0:	79d99db4 44ea7843                       ...yCx.D

000bc2a8 <p05.0>:
   bc2a8:	00000005 00000019 0000007d              ........}...

000bc2b4 <link_const_data_end>:
   bc2b4:	000b4e89 	.word	0x000b4e89
   bc2b8:	000b5c15 	.word	0x000b5c15
   bc2bc:	000b63c9 	.word	0x000b63c9
   bc2c0:	000b63f1 	.word	0x000b63f1
   bc2c4:	000b7991 	.word	0x000b7991
   bc2c8:	000b7a61 	.word	0x000b7a61
   bc2cc:	000b7c51 	.word	0x000b7c51
   bc2d0:	000b7c6d 	.word	0x000b7c6d
   bc2d4:	000b875d 	.word	0x000b875d
   bc2d8:	000b88c1 	.word	0x000b88c1
