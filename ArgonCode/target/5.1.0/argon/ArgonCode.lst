
c:/Users/mathi/Desktop/IOT/ElecPrice/ArgonCode/target/5.1.0/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ca24  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c0a44  000c0a44  00010a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000022c  2003d00c  000c0a68  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000015b8  2003d238  2003d238  0002d238  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000c0c94  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000c0c98  000c0c98  00020c98  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000c0c9e  000c0c9e  00020c9e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000c0cc2  000c0cc2  00020cc2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0019ed3d  00000000  00000000  00020cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001e2c3  00000000  00000000  001bfa03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004e17c  00000000  00000000  001ddcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000040e8  00000000  00000000  0022be42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000d128  00000000  00000000  0022ff2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004cadb  00000000  00000000  0023d052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00065d9b  00000000  00000000  00289b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014574e  00000000  00000000  002ef8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c31c  00000000  00000000  00435018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2uiz>:
   b491c:	004a      	lsls	r2, r1, #1
   b491e:	d211      	bcs.n	b4944 <__aeabi_d2uiz+0x28>
   b4920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4924:	d211      	bcs.n	b494a <__aeabi_d2uiz+0x2e>
   b4926:	d50d      	bpl.n	b4944 <__aeabi_d2uiz+0x28>
   b4928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b492c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4930:	d40e      	bmi.n	b4950 <__aeabi_d2uiz+0x34>
   b4932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b493a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b493e:	fa23 f002 	lsr.w	r0, r3, r2
   b4942:	4770      	bx	lr
   b4944:	f04f 0000 	mov.w	r0, #0
   b4948:	4770      	bx	lr
   b494a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b494e:	d102      	bne.n	b4956 <__aeabi_d2uiz+0x3a>
   b4950:	f04f 30ff 	mov.w	r0, #4294967295
   b4954:	4770      	bx	lr
   b4956:	f04f 0000 	mov.w	r0, #0
   b495a:	4770      	bx	lr

000b495c <__aeabi_f2lz>:
   b495c:	ee07 0a90 	vmov	s15, r0
   b4960:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4968:	d401      	bmi.n	b496e <__aeabi_f2lz+0x12>
   b496a:	f000 b80b 	b.w	b4984 <__aeabi_f2ulz>
   b496e:	eef1 7a67 	vneg.f32	s15, s15
   b4972:	b508      	push	{r3, lr}
   b4974:	ee17 0a90 	vmov	r0, s15
   b4978:	f000 f804 	bl	b4984 <__aeabi_f2ulz>
   b497c:	4240      	negs	r0, r0
   b497e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4982:	bd08      	pop	{r3, pc}

000b4984 <__aeabi_f2ulz>:
   b4984:	b5d0      	push	{r4, r6, r7, lr}
   b4986:	f7ff fcaf 	bl	b42e8 <__aeabi_f2d>
   b498a:	4b0c      	ldr	r3, [pc, #48]	; (b49bc <__aeabi_f2ulz+0x38>)
   b498c:	2200      	movs	r2, #0
   b498e:	4606      	mov	r6, r0
   b4990:	460f      	mov	r7, r1
   b4992:	f7ff fd01 	bl	b4398 <__aeabi_dmul>
   b4996:	f7ff ffc1 	bl	b491c <__aeabi_d2uiz>
   b499a:	4604      	mov	r4, r0
   b499c:	f7ff fc82 	bl	b42a4 <__aeabi_ui2d>
   b49a0:	4b07      	ldr	r3, [pc, #28]	; (b49c0 <__aeabi_f2ulz+0x3c>)
   b49a2:	2200      	movs	r2, #0
   b49a4:	f7ff fcf8 	bl	b4398 <__aeabi_dmul>
   b49a8:	4602      	mov	r2, r0
   b49aa:	460b      	mov	r3, r1
   b49ac:	4630      	mov	r0, r6
   b49ae:	4639      	mov	r1, r7
   b49b0:	f7ff fb3a 	bl	b4028 <__aeabi_dsub>
   b49b4:	f7ff ffb2 	bl	b491c <__aeabi_d2uiz>
   b49b8:	4621      	mov	r1, r4
   b49ba:	bdd0      	pop	{r4, r6, r7, pc}
   b49bc:	3df00000 	.word	0x3df00000
   b49c0:	41f00000 	.word	0x41f00000

000b49c4 <__aeabi_d2ulz>:
   b49c4:	b5d0      	push	{r4, r6, r7, lr}
   b49c6:	4b0c      	ldr	r3, [pc, #48]	; (b49f8 <__aeabi_d2ulz+0x34>)
   b49c8:	2200      	movs	r2, #0
   b49ca:	4606      	mov	r6, r0
   b49cc:	460f      	mov	r7, r1
   b49ce:	f7ff fce3 	bl	b4398 <__aeabi_dmul>
   b49d2:	f7ff ffa3 	bl	b491c <__aeabi_d2uiz>
   b49d6:	4604      	mov	r4, r0
   b49d8:	f7ff fc64 	bl	b42a4 <__aeabi_ui2d>
   b49dc:	4b07      	ldr	r3, [pc, #28]	; (b49fc <__aeabi_d2ulz+0x38>)
   b49de:	2200      	movs	r2, #0
   b49e0:	f7ff fcda 	bl	b4398 <__aeabi_dmul>
   b49e4:	4602      	mov	r2, r0
   b49e6:	460b      	mov	r3, r1
   b49e8:	4630      	mov	r0, r6
   b49ea:	4639      	mov	r1, r7
   b49ec:	f7ff fb1c 	bl	b4028 <__aeabi_dsub>
   b49f0:	f7ff ff94 	bl	b491c <__aeabi_d2uiz>
   b49f4:	4621      	mov	r1, r4
   b49f6:	bdd0      	pop	{r4, r6, r7, pc}
   b49f8:	3df00000 	.word	0x3df00000
   b49fc:	41f00000 	.word	0x41f00000

000b4a00 <strcmp>:
   b4a00:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a04:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a08:	2a01      	cmp	r2, #1
   b4a0a:	bf28      	it	cs
   b4a0c:	429a      	cmpcs	r2, r3
   b4a0e:	d0f7      	beq.n	b4a00 <strcmp>
   b4a10:	1ad0      	subs	r0, r2, r3
   b4a12:	4770      	bx	lr

000b4a14 <strlen>:
   b4a14:	4603      	mov	r3, r0
   b4a16:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a1a:	2a00      	cmp	r2, #0
   b4a1c:	d1fb      	bne.n	b4a16 <strlen+0x2>
   b4a1e:	1a18      	subs	r0, r3, r0
   b4a20:	3801      	subs	r0, #1
   b4a22:	4770      	bx	lr

000b4a24 <__aeabi_d2lz>:
   b4a24:	b538      	push	{r3, r4, r5, lr}
   b4a26:	2200      	movs	r2, #0
   b4a28:	2300      	movs	r3, #0
   b4a2a:	4604      	mov	r4, r0
   b4a2c:	460d      	mov	r5, r1
   b4a2e:	f7ff ff25 	bl	b487c <__aeabi_dcmplt>
   b4a32:	b928      	cbnz	r0, b4a40 <__aeabi_d2lz+0x1c>
   b4a34:	4620      	mov	r0, r4
   b4a36:	4629      	mov	r1, r5
   b4a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a3c:	f7ff bfc2 	b.w	b49c4 <__aeabi_d2ulz>
   b4a40:	4620      	mov	r0, r4
   b4a42:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a46:	f7ff ffbd 	bl	b49c4 <__aeabi_d2ulz>
   b4a4a:	4240      	negs	r0, r0
   b4a4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a50:	bd38      	pop	{r3, r4, r5, pc}
   b4a52:	bf00      	nop

000b4a54 <module_user_pre_init>:
   b4a54:	4809      	ldr	r0, [pc, #36]	; (b4a7c <module_user_pre_init+0x28>)
   b4a56:	490a      	ldr	r1, [pc, #40]	; (b4a80 <module_user_pre_init+0x2c>)
   b4a58:	4288      	cmp	r0, r1
   b4a5a:	b508      	push	{r3, lr}
   b4a5c:	d005      	beq.n	b4a6a <module_user_pre_init+0x16>
   b4a5e:	4a09      	ldr	r2, [pc, #36]	; (b4a84 <module_user_pre_init+0x30>)
   b4a60:	4282      	cmp	r2, r0
   b4a62:	d002      	beq.n	b4a6a <module_user_pre_init+0x16>
   b4a64:	1a12      	subs	r2, r2, r0
   b4a66:	f008 fc96 	bl	bd396 <memcpy>
   b4a6a:	4807      	ldr	r0, [pc, #28]	; (b4a88 <module_user_pre_init+0x34>)
   b4a6c:	4a07      	ldr	r2, [pc, #28]	; (b4a8c <module_user_pre_init+0x38>)
   b4a6e:	2100      	movs	r1, #0
   b4a70:	1a12      	subs	r2, r2, r0
   b4a72:	f008 fcb8 	bl	bd3e6 <memset>
   b4a76:	4801      	ldr	r0, [pc, #4]	; (b4a7c <module_user_pre_init+0x28>)
   b4a78:	bd08      	pop	{r3, pc}
   b4a7a:	bf00      	nop
   b4a7c:	2003d00c 	.word	0x2003d00c
   b4a80:	000c0a68 	.word	0x000c0a68
   b4a84:	2003d238 	.word	0x2003d238
   b4a88:	2003d238 	.word	0x2003d238
   b4a8c:	2003e7f0 	.word	0x2003e7f0

000b4a90 <module_user_init>:
   b4a90:	b570      	push	{r4, r5, r6, lr}
   b4a92:	4e07      	ldr	r6, [pc, #28]	; (b4ab0 <module_user_init+0x20>)
   b4a94:	4c07      	ldr	r4, [pc, #28]	; (b4ab4 <module_user_init+0x24>)
   b4a96:	f007 f909 	bl	bbcac <module_user_init_hook>
   b4a9a:	1ba4      	subs	r4, r4, r6
   b4a9c:	08a4      	lsrs	r4, r4, #2
   b4a9e:	2500      	movs	r5, #0
   b4aa0:	42ac      	cmp	r4, r5
   b4aa2:	d100      	bne.n	b4aa6 <module_user_init+0x16>
   b4aa4:	bd70      	pop	{r4, r5, r6, pc}
   b4aa6:	f856 3b04 	ldr.w	r3, [r6], #4
   b4aaa:	4798      	blx	r3
   b4aac:	3501      	adds	r5, #1
   b4aae:	e7f7      	b.n	b4aa0 <module_user_init+0x10>
   b4ab0:	000c0a14 	.word	0x000c0a14
   b4ab4:	000c0a44 	.word	0x000c0a44

000b4ab8 <module_user_setup>:
   b4ab8:	f001 b9aa 	b.w	b5e10 <setup>

000b4abc <module_user_loop>:
   b4abc:	b508      	push	{r3, lr}
   b4abe:	f001 faa7 	bl	b6010 <loop>
   b4ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4ac6:	f007 b8a9 	b.w	bbc1c <_post_loop>

000b4aca <_Znwj>:
   b4aca:	f004 bd27 	b.w	b951c <malloc>

000b4ace <_Znaj>:
   b4ace:	f004 bd25 	b.w	b951c <malloc>

000b4ad2 <_ZdaPv>:
   b4ad2:	f004 bd2b 	b.w	b952c <free>

000b4ad6 <_ZdlPvj>:
   b4ad6:	f004 bd29 	b.w	b952c <free>

000b4ada <__cxa_guard_acquire>:
   b4ada:	7800      	ldrb	r0, [r0, #0]
   b4adc:	fab0 f080 	clz	r0, r0
   b4ae0:	0940      	lsrs	r0, r0, #5
   b4ae2:	4770      	bx	lr

000b4ae4 <__cxa_guard_release>:
   b4ae4:	2301      	movs	r3, #1
   b4ae6:	7003      	strb	r3, [r0, #0]
   b4ae8:	4770      	bx	lr
	...

000b4aec <_Z8callbackPcPhj>:
    }
}

void callback(char *topic, byte *payload, unsigned int length)
{
    GET_DATA = true;
   b4aec:	4b01      	ldr	r3, [pc, #4]	; (b4af4 <_Z8callbackPcPhj+0x8>)
   b4aee:	2201      	movs	r2, #1
   b4af0:	701a      	strb	r2, [r3, #0]
}
   b4af2:	4770      	bx	lr
   b4af4:	2003d254 	.word	0x2003d254

000b4af8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
{
   b4af8:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b4afa:	4b04      	ldr	r3, [pc, #16]	; (b4b0c <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b4afc:	2201      	movs	r2, #1
   b4afe:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4b00:	f004 f9be 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b4b04:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b4b06:	6018      	str	r0, [r3, #0]
}
   b4b08:	bd08      	pop	{r3, pc}
   b4b0a:	bf00      	nop
   b4b0c:	2003d255 	.word	0x2003d255
   b4b10:	2003dc20 	.word	0x2003dc20

000b4b14 <_Z13handle_sensorv>:
{
   b4b14:	b508      	push	{r3, lr}
   b4b16:	f004 f9b3 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta = current_reading - last_read;
   b4b1a:	490c      	ldr	r1, [pc, #48]	; (b4b4c <_Z13handle_sensorv+0x38>)
   b4b1c:	680b      	ldr	r3, [r1, #0]
   b4b1e:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b4b20:	2b64      	cmp	r3, #100	; 0x64
   b4b22:	d911      	bls.n	b4b48 <_Z13handle_sensorv+0x34>
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4b24:	4a0a      	ldr	r2, [pc, #40]	; (b4b50 <_Z13handle_sensorv+0x3c>)
   b4b26:	fbb2 f3f3 	udiv	r3, r2, r3
   b4b2a:	4a0a      	ldr	r2, [pc, #40]	; (b4b54 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b4b2c:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4b2e:	6013      	str	r3, [r2, #0]
        wh_today[currentHour] += 1;
   b4b30:	4b09      	ldr	r3, [pc, #36]	; (b4b58 <_Z13handle_sensorv+0x44>)
   b4b32:	7819      	ldrb	r1, [r3, #0]
   b4b34:	4b09      	ldr	r3, [pc, #36]	; (b4b5c <_Z13handle_sensorv+0x48>)
   b4b36:	681a      	ldr	r2, [r3, #0]
   b4b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b4b3c:	3301      	adds	r3, #1
   b4b3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        TRANSMIT_SENSOR = true;
   b4b42:	4b07      	ldr	r3, [pc, #28]	; (b4b60 <_Z13handle_sensorv+0x4c>)
   b4b44:	2201      	movs	r2, #1
   b4b46:	701a      	strb	r2, [r3, #0]
}
   b4b48:	bd08      	pop	{r3, pc}
   b4b4a:	bf00      	nop
   b4b4c:	2003d304 	.word	0x2003d304
   b4b50:	0036ee80 	.word	0x0036ee80
   b4b54:	2003d36c 	.word	0x2003d36c
   b4b58:	2003d3dc 	.word	0x2003d3dc
   b4b5c:	2003e190 	.word	0x2003e190
   b4b60:	2003d25a 	.word	0x2003d25a

000b4b64 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4b64:	6943      	ldr	r3, [r0, #20]
   b4b66:	b113      	cbz	r3, b4b6e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b68:	6983      	ldr	r3, [r0, #24]
   b4b6a:	300c      	adds	r0, #12
   b4b6c:	4718      	bx	r3
            callback();
        }
    }
   b4b6e:	4770      	bx	lr

000b4b70 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4b70:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4b72:	2100      	movs	r1, #0
   b4b74:	4604      	mov	r4, r0
   b4b76:	4608      	mov	r0, r1
   b4b78:	f004 fa54 	bl	b9024 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4b7c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4b7e:	4620      	mov	r0, r4
   b4b80:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4b82:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4b84:	f004 fa66 	bl	b9054 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4b88:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4b8a:	b10c      	cbz	r4, b4b90 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4b8c:	2301      	movs	r3, #1
   b4b8e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4b90:	2100      	movs	r1, #0
   b4b92:	2001      	movs	r0, #1
   b4b94:	f004 fa46 	bl	b9024 <os_thread_scheduling>
            }
        }
        if (t) {
   b4b98:	b12c      	cbz	r4, b4ba6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4b9a:	6823      	ldr	r3, [r4, #0]
   b4b9c:	4620      	mov	r0, r4
   b4b9e:	689b      	ldr	r3, [r3, #8]
   b4ba0:	4798      	blx	r3
            t->running = false;
   b4ba2:	2300      	movs	r3, #0
   b4ba4:	7123      	strb	r3, [r4, #4]
        }
    }
   b4ba6:	b002      	add	sp, #8
   b4ba8:	bd10      	pop	{r4, pc}

000b4baa <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4baa:	2a01      	cmp	r2, #1
   b4bac:	d102      	bne.n	b4bb4 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4bae:	6001      	str	r1, [r0, #0]
      }
   b4bb0:	2000      	movs	r0, #0
   b4bb2:	4770      	bx	lr
	  switch (__op)
   b4bb4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4bb6:	bf04      	itt	eq
   b4bb8:	680b      	ldreq	r3, [r1, #0]
   b4bba:	6003      	streq	r3, [r0, #0]
	      break;
   b4bbc:	e7f8      	b.n	b4bb0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4bbe <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4bbe:	6803      	ldr	r3, [r0, #0]
   b4bc0:	4718      	bx	r3

000b4bc2 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4bc2:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4bc4:	6880      	ldr	r0, [r0, #8]
   b4bc6:	b130      	cbz	r0, b4bd6 <_ZN5Timer4stopEj.isra.0+0x14>
   b4bc8:	2300      	movs	r3, #0
   b4bca:	e9cd 1300 	strd	r1, r3, [sp]
   b4bce:	461a      	mov	r2, r3
   b4bd0:	2102      	movs	r1, #2
   b4bd2:	f004 fa47 	bl	b9064 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4bd6:	b003      	add	sp, #12
   b4bd8:	f85d fb04 	ldr.w	pc, [sp], #4

000b4bdc <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b4bdc:	b530      	push	{r4, r5, lr}
   b4bde:	4605      	mov	r5, r0
   b4be0:	b085      	sub	sp, #20
   b4be2:	460c      	mov	r4, r1
        stop(fromISR);
   b4be4:	4611      	mov	r1, r2
   b4be6:	9203      	str	r2, [sp, #12]
   b4be8:	f7ff ffeb 	bl	b4bc2 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4bec:	68a8      	ldr	r0, [r5, #8]
   b4bee:	b130      	cbz	r0, b4bfe <_ZN5Timer6_startEjb.isra.0+0x22>
   b4bf0:	2300      	movs	r3, #0
   b4bf2:	e9cd 4300 	strd	r4, r3, [sp]
   b4bf6:	9a03      	ldr	r2, [sp, #12]
   b4bf8:	4619      	mov	r1, r3
   b4bfa:	f004 fa33 	bl	b9064 <os_timer_change>
    }
   b4bfe:	b005      	add	sp, #20
   b4c00:	bd30      	pop	{r4, r5, pc}
	...

000b4c04 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b4c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b4c08:	f006 ff78 	bl	bbafc <_ZN9TimeClass4hourEv>
   b4c0c:	4f26      	ldr	r7, [pc, #152]	; (b4ca8 <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b4c0e:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4cac <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b4c12:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b4c14:	f006 ff7e 	bl	bbb14 <_ZN9TimeClass6minuteEv>
   b4c18:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b4c1a:	f006 ff87 	bl	bbb2c <_ZN9TimeClass6secondEv>
   b4c1e:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b4c20:	f006 ff90 	bl	bbb44 <_ZN9TimeClass3dayEv>
    timer.stop();
   b4c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b4c28:	4604      	mov	r4, r0
    timer.stop();
   b4c2a:	4640      	mov	r0, r8
   b4c2c:	f7ff ffc9 	bl	b4bc2 <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4c30:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b4c34:	b178      	cbz	r0, b4c56 <_Z10check_timev+0x52>
   b4c36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b4c3a:	b2ed      	uxtb	r5, r5
   b4c3c:	2200      	movs	r2, #0
   b4c3e:	e9cd 1200 	strd	r1, r2, [sp]
   b4c42:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4c46:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4c4a:	43ed      	mvns	r5, r5
   b4c4c:	fb01 5303 	mla	r3, r1, r3, r5
   b4c50:	2103      	movs	r1, #3
   b4c52:	f004 fa07 	bl	b9064 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4c56:	4815      	ldr	r0, [pc, #84]	; (b4cac <_Z10check_timev+0xa8>)
   b4c58:	2200      	movs	r2, #0
   b4c5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4c5e:	f7ff ffbd 	bl	b4bdc <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b4c62:	783b      	ldrb	r3, [r7, #0]
   b4c64:	2b0d      	cmp	r3, #13
   b4c66:	d114      	bne.n	b4c92 <_Z10check_timev+0x8e>
   b4c68:	4a11      	ldr	r2, [pc, #68]	; (b4cb0 <_Z10check_timev+0xac>)
   b4c6a:	6811      	ldr	r1, [r2, #0]
   b4c6c:	b2e4      	uxtb	r4, r4
   b4c6e:	42a1      	cmp	r1, r4
   b4c70:	d003      	beq.n	b4c7a <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b4c72:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4c74:	4a0f      	ldr	r2, [pc, #60]	; (b4cb4 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b4c76:	2101      	movs	r1, #1
   b4c78:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4c7a:	b93e      	cbnz	r6, b4c8c <_Z10check_timev+0x88>
   b4c7c:	4a0e      	ldr	r2, [pc, #56]	; (b4cb8 <_Z10check_timev+0xb4>)
   b4c7e:	6811      	ldr	r1, [r2, #0]
   b4c80:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b4c82:	bf1f      	itttt	ne
   b4c84:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4c86:	4b0d      	ldrne	r3, [pc, #52]	; (b4cbc <_Z10check_timev+0xb8>)
   b4c88:	2201      	movne	r2, #1
   b4c8a:	701a      	strbne	r2, [r3, #0]
    }
   b4c8c:	b002      	add	sp, #8
   b4c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b4c92:	2b00      	cmp	r3, #0
   b4c94:	d1f1      	bne.n	b4c7a <_Z10check_timev+0x76>
   b4c96:	4a0a      	ldr	r2, [pc, #40]	; (b4cc0 <_Z10check_timev+0xbc>)
   b4c98:	6811      	ldr	r1, [r2, #0]
   b4c9a:	b2e4      	uxtb	r4, r4
   b4c9c:	42a1      	cmp	r1, r4
   b4c9e:	d0ec      	beq.n	b4c7a <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b4ca0:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b4ca2:	4a08      	ldr	r2, [pc, #32]	; (b4cc4 <_Z10check_timev+0xc0>)
   b4ca4:	e7e7      	b.n	b4c76 <_Z10check_timev+0x72>
   b4ca6:	bf00      	nop
   b4ca8:	2003d3dc 	.word	0x2003d3dc
   b4cac:	2003e128 	.word	0x2003e128
   b4cb0:	2003d03c 	.word	0x2003d03c
   b4cb4:	2003d254 	.word	0x2003d254
   b4cb8:	2003d044 	.word	0x2003d044
   b4cbc:	2003d25b 	.word	0x2003d25b
   b4cc0:	2003d040 	.word	0x2003d040
   b4cc4:	2003d256 	.word	0x2003d256

000b4cc8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4cc8:	b40e      	push	{r1, r2, r3}
   b4cca:	b503      	push	{r0, r1, lr}
   b4ccc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4cce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4cd0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4cd4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4cd6:	f006 fd54 	bl	bb782 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4cda:	b002      	add	sp, #8
   b4cdc:	f85d eb04 	ldr.w	lr, [sp], #4
   b4ce0:	b003      	add	sp, #12
   b4ce2:	4770      	bx	lr
   b4ce4:	0000      	movs	r0, r0
	...

000b4ce8 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b4ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b4cec:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b4cee:	4608      	mov	r0, r1
{
   b4cf0:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b4cf2:	f7ff fe8f 	bl	b4a14 <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b4cf6:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b4cf8:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b4cfa:	a801      	add	r0, sp, #4
   b4cfc:	f008 fbb9 	bl	bd472 <strcpy>
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    Serial.println("in the callback");
   b4d00:	f007 fb9a 	bl	bc438 <_Z16_fetch_usbserialv>
   b4d04:	493c      	ldr	r1, [pc, #240]	; (b4df8 <_Z9myHandlerPKcS0_+0x110>)
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b4d06:	4d3d      	ldr	r5, [pc, #244]	; (b4dfc <_Z9myHandlerPKcS0_+0x114>)
    Serial.println("in the callback");
   b4d08:	f006 fd09 	bl	bb71e <_ZN5Print7printlnEPKc>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b4d0c:	493c      	ldr	r1, [pc, #240]	; (b4e00 <_Z9myHandlerPKcS0_+0x118>)
   b4d0e:	a801      	add	r0, sp, #4
   b4d10:	f009 fa4c 	bl	be1ac <strtok>
   b4d14:	f008 fb13 	bl	bd33e <atoi>
   b4d18:	4621      	mov	r1, r4
   b4d1a:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b4d1e:	f008 fb99 	bl	bd454 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b4d22:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4d26:	d214      	bcs.n	b4d52 <_Z9myHandlerPKcS0_+0x6a>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b4d28:	f007 fb86 	bl	bc438 <_Z16_fetch_usbserialv>
   b4d2c:	4935      	ldr	r1, [pc, #212]	; (b4e04 <_Z9myHandlerPKcS0_+0x11c>)
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d2e:	4f36      	ldr	r7, [pc, #216]	; (b4e08 <_Z9myHandlerPKcS0_+0x120>)
        Serial.printf("%s\n", temp);
   b4d30:	462a      	mov	r2, r5
   b4d32:	f7ff ffc9 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b4d36:	4935      	ldr	r1, [pc, #212]	; (b4e0c <_Z9myHandlerPKcS0_+0x124>)
   b4d38:	4628      	mov	r0, r5
   b4d3a:	f009 fa37 	bl	be1ac <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4d3e:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
   b4d42:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b4d46:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d48:	2600      	movs	r6, #0
            if (token == NULL)
   b4d4a:	b928      	cbnz	r0, b4d58 <_Z9myHandlerPKcS0_+0x70>
            }
            token = strtok(NULL, ",!");

        }
        CALCULATE = true;
   b4d4c:	4b30      	ldr	r3, [pc, #192]	; (b4e10 <_Z9myHandlerPKcS0_+0x128>)
   b4d4e:	2201      	movs	r2, #1
   b4d50:	701a      	strb	r2, [r3, #0]
    }
   b4d52:	b004      	add	sp, #16
   b4d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i >= 0 && i < 7)
   b4d58:	2c06      	cmp	r4, #6
   b4d5a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b4e14 <_Z9myHandlerPKcS0_+0x12c>
   b4d5e:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b4d62:	dc19      	bgt.n	b4d98 <_Z9myHandlerPKcS0_+0xb0>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b4d64:	f008 fae8 	bl	bd338 <atof>
   b4d68:	f8da 3000 	ldr.w	r3, [sl]
   b4d6c:	4632      	mov	r2, r6
   b4d6e:	ec51 0b10 	vmov	r0, r1, d0
   b4d72:	441d      	add	r5, r3
   b4d74:	463b      	mov	r3, r7
   b4d76:	f7ff fc39 	bl	b45ec <__aeabi_ddiv>
   b4d7a:	a31b      	add	r3, pc, #108	; (adr r3, b4de8 <_Z9myHandlerPKcS0_+0x100>)
   b4d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d80:	f7ff f954 	bl	b402c <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b4d84:	3401      	adds	r4, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d86:	e9c5 0100 	strd	r0, r1, [r5]
            token = strtok(NULL, ",!");
   b4d8a:	4920      	ldr	r1, [pc, #128]	; (b4e0c <_Z9myHandlerPKcS0_+0x124>)
   b4d8c:	2000      	movs	r0, #0
   b4d8e:	f009 fa0d 	bl	be1ac <strtok>
        for (int i = 0; i < MAX_RANGE; i++)
   b4d92:	2c18      	cmp	r4, #24
   b4d94:	d1d9      	bne.n	b4d4a <_Z9myHandlerPKcS0_+0x62>
   b4d96:	e7d9      	b.n	b4d4c <_Z9myHandlerPKcS0_+0x64>
            else if (i > 16 && i < 22)
   b4d98:	f1a4 0311 	sub.w	r3, r4, #17
   b4d9c:	2b04      	cmp	r3, #4
   b4d9e:	d80d      	bhi.n	b4dbc <_Z9myHandlerPKcS0_+0xd4>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4da0:	f008 faca 	bl	bd338 <atof>
   b4da4:	f8da 3000 	ldr.w	r3, [sl]
   b4da8:	4632      	mov	r2, r6
   b4daa:	ec51 0b10 	vmov	r0, r1, d0
   b4dae:	441d      	add	r5, r3
   b4db0:	463b      	mov	r3, r7
   b4db2:	f7ff fc1b 	bl	b45ec <__aeabi_ddiv>
   b4db6:	4642      	mov	r2, r8
   b4db8:	464b      	mov	r3, r9
   b4dba:	e7e1      	b.n	b4d80 <_Z9myHandlerPKcS0_+0x98>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4dbc:	f008 fabc 	bl	bd338 <atof>
   b4dc0:	f8da 3000 	ldr.w	r3, [sl]
   b4dc4:	4632      	mov	r2, r6
   b4dc6:	ec51 0b10 	vmov	r0, r1, d0
   b4dca:	441d      	add	r5, r3
   b4dcc:	463b      	mov	r3, r7
   b4dce:	f7ff fc0d 	bl	b45ec <__aeabi_ddiv>
   b4dd2:	a307      	add	r3, pc, #28	; (adr r3, b4df0 <_Z9myHandlerPKcS0_+0x108>)
   b4dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4dd8:	e7d2      	b.n	b4d80 <_Z9myHandlerPKcS0_+0x98>
   b4dda:	bf00      	nop
   b4ddc:	f3af 8000 	nop.w
   b4de0:	2d0e5604 	.word	0x2d0e5604
   b4de4:	3ffe9db2 	.word	0x3ffe9db2
   b4de8:	ebedfa44 	.word	0xebedfa44
   b4dec:	3fcb39c0 	.word	0x3fcb39c0
   b4df0:	42c3c9ef 	.word	0x42c3c9ef
   b4df4:	3fe469ad 	.word	0x3fe469ad
   b4df8:	000bf678 	.word	0x000bf678
   b4dfc:	2003dd24 	.word	0x2003dd24
   b4e00:	000bf688 	.word	0x000bf688
   b4e04:	000bf690 	.word	0x000bf690
   b4e08:	408f4000 	.word	0x408f4000
   b4e0c:	000bf694 	.word	0x000bf694
   b4e10:	2003d239 	.word	0x2003d239
   b4e14:	2003d3d4 	.word	0x2003d3d4

000b4e18 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4e18:	b40e      	push	{r1, r2, r3}
   b4e1a:	b503      	push	{r0, r1, lr}
   b4e1c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4e1e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4e20:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4e24:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4e26:	f006 fcac 	bl	bb782 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4e2a:	b002      	add	sp, #8
   b4e2c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4e30:	b003      	add	sp, #12
   b4e32:	4770      	bx	lr

000b4e34 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4e34:	b510      	push	{r4, lr}
      if (_M_manager)
   b4e36:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4e38:	4604      	mov	r4, r0
      if (_M_manager)
   b4e3a:	b113      	cbz	r3, b4e42 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4e3c:	2203      	movs	r2, #3
   b4e3e:	4601      	mov	r1, r0
   b4e40:	4798      	blx	r3
    }
   b4e42:	4620      	mov	r0, r4
   b4e44:	bd10      	pop	{r4, pc}
	...

000b4e48 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4e48:	b538      	push	{r3, r4, r5, lr}
   b4e4a:	4b0f      	ldr	r3, [pc, #60]	; (b4e88 <_ZN5TimerD1Ev+0x40>)
   b4e4c:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4e4e:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4e50:	4604      	mov	r4, r0
        if (handle) {
   b4e52:	b19b      	cbz	r3, b4e7c <_ZN5TimerD1Ev+0x34>
            stop();
   b4e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4e58:	f7ff feb3 	bl	b4bc2 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4e5c:	68a0      	ldr	r0, [r4, #8]
   b4e5e:	2100      	movs	r1, #0
   b4e60:	f004 f938 	bl	b90d4 <os_timer_set_id>
            while (running) {
   b4e64:	7923      	ldrb	r3, [r4, #4]
   b4e66:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4e6a:	b113      	cbz	r3, b4e72 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4e6c:	f004 f8d2 	bl	b9014 <os_thread_yield>
            while (running) {
   b4e70:	e7f8      	b.n	b4e64 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b4e72:	68a0      	ldr	r0, [r4, #8]
   b4e74:	4629      	mov	r1, r5
   b4e76:	f004 f8e5 	bl	b9044 <os_timer_destroy>
            handle = nullptr;
   b4e7a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4e7c:	f104 000c 	add.w	r0, r4, #12
   b4e80:	f7ff ffd8 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
    }
   b4e84:	4620      	mov	r0, r4
   b4e86:	bd38      	pop	{r3, r4, r5, pc}
   b4e88:	000bfc88 	.word	0x000bfc88

000b4e8c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4e8c:	b510      	push	{r4, lr}
   b4e8e:	4604      	mov	r4, r0
    }
   b4e90:	f7ff ffda 	bl	b4e48 <_ZN5TimerD1Ev>
   b4e94:	4620      	mov	r0, r4
   b4e96:	211c      	movs	r1, #28
   b4e98:	f7ff fe1d 	bl	b4ad6 <_ZdlPvj>
   b4e9c:	4620      	mov	r0, r4
   b4e9e:	bd10      	pop	{r4, pc}

000b4ea0 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b4ea0:	b570      	push	{r4, r5, r6, lr}
   b4ea2:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b4ea4:	f005 fd60 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ea8:	2102      	movs	r1, #2
   b4eaa:	f005 fdae 	bl	baa0a <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4eae:	f005 fd5b 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4eb2:	f005 fda3 	bl	ba9fc <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4eb6:	f005 fd57 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4eba:	4a3e      	ldr	r2, [pc, #248]	; (b4fb4 <_Z9ble_setupv+0x114>)
   b4ebc:	4c3e      	ldr	r4, [pc, #248]	; (b4fb8 <_Z9ble_setupv+0x118>)
   b4ebe:	4601      	mov	r1, r0
   b4ec0:	a80b      	add	r0, sp, #44	; 0x2c
   b4ec2:	f006 fadb 	bl	bb47c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4ec6:	a80b      	add	r0, sp, #44	; 0x2c
   b4ec8:	f005 fe53 	bl	bab72 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4ecc:	f005 fd4c 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ed0:	4a3a      	ldr	r2, [pc, #232]	; (b4fbc <_Z9ble_setupv+0x11c>)
   b4ed2:	4601      	mov	r1, r0
   b4ed4:	a80b      	add	r0, sp, #44	; 0x2c
   b4ed6:	f006 fad1 	bl	bb47c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4eda:	a80b      	add	r0, sp, #44	; 0x2c
   b4edc:	f005 fe49 	bl	bab72 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4ee0:	f005 fd42 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ee4:	4a36      	ldr	r2, [pc, #216]	; (b4fc0 <_Z9ble_setupv+0x120>)
   b4ee6:	4601      	mov	r1, r0
   b4ee8:	a80b      	add	r0, sp, #44	; 0x2c
   b4eea:	f006 fac7 	bl	bb47c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4eee:	a80b      	add	r0, sp, #44	; 0x2c
   b4ef0:	f005 fe3f 	bl	bab72 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4ef4:	f005 fd38 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ef8:	4a32      	ldr	r2, [pc, #200]	; (b4fc4 <_Z9ble_setupv+0x124>)
   b4efa:	4601      	mov	r1, r0
   b4efc:	a80b      	add	r0, sp, #44	; 0x2c
   b4efe:	f006 fabd 	bl	bb47c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f02:	a80b      	add	r0, sp, #44	; 0x2c
   b4f04:	f005 fe35 	bl	bab72 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b4f08:	f005 fd2e 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f0c:	4a2e      	ldr	r2, [pc, #184]	; (b4fc8 <_Z9ble_setupv+0x128>)
   b4f0e:	4601      	mov	r1, r0
   b4f10:	a80b      	add	r0, sp, #44	; 0x2c
   b4f12:	f006 fab3 	bl	bb47c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f16:	a80b      	add	r0, sp, #44	; 0x2c
   b4f18:	f005 fe2b 	bl	bab72 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b4f1c:	f005 fd24 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f20:	4a2a      	ldr	r2, [pc, #168]	; (b4fcc <_Z9ble_setupv+0x12c>)
   b4f22:	4601      	mov	r1, r0
   b4f24:	a80b      	add	r0, sp, #44	; 0x2c
   b4f26:	f006 faa9 	bl	bb47c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f2a:	a80b      	add	r0, sp, #44	; 0x2c
   b4f2c:	f005 fe21 	bl	bab72 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b4f30:	a803      	add	r0, sp, #12
   b4f32:	f005 ff54 	bl	badde <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b4f36:	4b26      	ldr	r3, [pc, #152]	; (b4fd0 <_Z9ble_setupv+0x130>)
   b4f38:	a803      	add	r0, sp, #12
   b4f3a:	6819      	ldr	r1, [r3, #0]
   b4f3c:	f005 ff62 	bl	bae04 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4f42:	ad06      	add	r5, sp, #24
   b4f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4f46:	ad06      	add	r5, sp, #24
   b4f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f4a:	6826      	ldr	r6, [r4, #0]
   b4f4c:	ac0b      	add	r4, sp, #44	; 0x2c
   b4f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4f50:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4f52:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4f54:	f005 fb16 	bl	ba584 <_ZNK8particle7BleUuid4typeEv>
   b4f58:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4f5a:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4f5c:	bb0c      	cbnz	r4, b4fa2 <_Z9ble_setupv+0x102>
            uint16_t uuid16 = tempUUID.shorted();
   b4f5e:	f005 fb2d 	bl	ba5bc <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4f62:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4f64:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4f68:	2302      	movs	r3, #2
   b4f6a:	f10d 020a 	add.w	r2, sp, #10
   b4f6e:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4f70:	a803      	add	r0, sp, #12
   b4f72:	f005 ff29 	bl	badc8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4f76:	f005 fcf7 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f7a:	2200      	movs	r2, #0
   b4f7c:	a903      	add	r1, sp, #12
   b4f7e:	f005 fd8b 	bl	baa98 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4f82:	f007 fa59 	bl	bc438 <_Z16_fetch_usbserialv>
   b4f86:	4913      	ldr	r1, [pc, #76]	; (b4fd4 <_Z9ble_setupv+0x134>)
   b4f88:	f006 fbc9 	bl	bb71e <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4f8c:	f005 fcec 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f90:	4911      	ldr	r1, [pc, #68]	; (b4fd8 <_Z9ble_setupv+0x138>)
   b4f92:	2200      	movs	r2, #0
   b4f94:	f006 f974 	bl	bb280 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4f98:	9803      	ldr	r0, [sp, #12]
   b4f9a:	f004 fac7 	bl	b952c <free>

}
   b4f9e:	b010      	add	sp, #64	; 0x40
   b4fa0:	bd70      	pop	{r4, r5, r6, pc}
   b4fa2:	f005 fb0d 	bl	ba5c0 <_ZNK8particle7BleUuid8rawBytesEv>
   b4fa6:	2300      	movs	r3, #0
   b4fa8:	9300      	str	r3, [sp, #0]
   b4faa:	4602      	mov	r2, r0
   b4fac:	2310      	movs	r3, #16
   b4fae:	2107      	movs	r1, #7
   b4fb0:	e7de      	b.n	b4f70 <_Z9ble_setupv+0xd0>
   b4fb2:	bf00      	nop
   b4fb4:	2003d25c 	.word	0x2003d25c
   b4fb8:	2003d288 	.word	0x2003d288
   b4fbc:	2003d24c 	.word	0x2003d24c
   b4fc0:	2003d23c 	.word	0x2003d23c
   b4fc4:	2003d244 	.word	0x2003d244
   b4fc8:	2003d264 	.word	0x2003d264
   b4fcc:	2003d26c 	.word	0x2003d26c
   b4fd0:	2003d020 	.word	0x2003d020
   b4fd4:	000bf697 	.word	0x000bf697
   b4fd8:	000b4af9 	.word	0x000b4af9
   b4fdc:	00000000 	.word	0x00000000

000b4fe0 <_Z8calc_lowPA2_iPdi>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int size)
{
   b4fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fe4:	ed2d 8b02 	vpush	{d8}
    int cnt = 0;
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0.0;
   b4fe8:	ed9f 7b51 	vldr	d7, [pc, #324]	; b5130 <_Z8calc_lowPA2_iPdi+0x150>
{
   b4fec:	b09b      	sub	sp, #108	; 0x6c
    double last_small = 1000.0; // Assign any absurdly high value
   b4fee:	f8df 9164 	ldr.w	r9, [pc, #356]	; b5154 <_Z8calc_lowPA2_iPdi+0x174>
{
   b4ff2:	9201      	str	r2, [sp, #4]
   b4ff4:	4606      	mov	r6, r0
   b4ff6:	460f      	mov	r7, r1
   b4ff8:	468b      	mov	fp, r1

    for (int i = 0; i < size; i++)
   b4ffa:	f04f 0a00 	mov.w	sl, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b4ffe:	f04f 0800 	mov.w	r8, #0
    double last_big = 0.0;
   b5002:	eeb0 8a47 	vmov.f32	s16, s14
   b5006:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < size; i++)
   b500a:	9b01      	ldr	r3, [sp, #4]
   b500c:	459a      	cmp	sl, r3
   b500e:	da16      	bge.n	b503e <_Z8calc_lowPA2_iPdi+0x5e>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b5010:	e8fb 4502 	ldrd	r4, r5, [fp], #8
   b5014:	ec53 2b18 	vmov	r2, r3, d8
   b5018:	4620      	mov	r0, r4
   b501a:	4629      	mov	r1, r5
   b501c:	f7ff fc4c 	bl	b48b8 <__aeabi_dcmpgt>
   b5020:	b108      	cbz	r0, b5026 <_Z8calc_lowPA2_iPdi+0x46>
        {
            last_big = cost[i];
   b5022:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b5026:	4642      	mov	r2, r8
   b5028:	464b      	mov	r3, r9
   b502a:	4620      	mov	r0, r4
   b502c:	4629      	mov	r1, r5
   b502e:	f7ff fc25 	bl	b487c <__aeabi_dcmplt>
   b5032:	b108      	cbz	r0, b5038 <_Z8calc_lowPA2_iPdi+0x58>
        {
            last_small = cost[i];
   b5034:	46a0      	mov	r8, r4
   b5036:	46a9      	mov	r9, r5
    for (int i = 0; i < size; i++)
   b5038:	f10a 0a01 	add.w	sl, sl, #1
   b503c:	e7e5      	b.n	b500a <_Z8calc_lowPA2_iPdi+0x2a>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b503e:	4642      	mov	r2, r8
   b5040:	464b      	mov	r3, r9
   b5042:	ec51 0b18 	vmov	r0, r1, d8
   b5046:	f7fe ffef 	bl	b4028 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b504a:	a340      	add	r3, pc, #256	; (adr r3, b514c <_Z8calc_lowPA2_iPdi+0x16c>)
   b504c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5050:	f7ff f9a2 	bl	b4398 <__aeabi_dmul>
   b5054:	4642      	mov	r2, r8
   b5056:	464b      	mov	r3, r9
   b5058:	f7fe ffe8 	bl	b402c <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i < size; i++)
   b505c:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b505e:	4682      	mov	sl, r0
   b5060:	468b      	mov	fp, r1
    int idx = 0;
   b5062:	462c      	mov	r4, r5
    for (int i = 0; i < size; i++)
   b5064:	9b01      	ldr	r3, [sp, #4]
   b5066:	429d      	cmp	r5, r3
   b5068:	da15      	bge.n	b5096 <_Z8calc_lowPA2_iPdi+0xb6>
    {
        
        if (cost[i] < small_offset)
   b506a:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b506e:	4652      	mov	r2, sl
   b5070:	465b      	mov	r3, fp
   b5072:	f7ff fc03 	bl	b487c <__aeabi_dcmplt>
   b5076:	b160      	cbz	r0, b5092 <_Z8calc_lowPA2_iPdi+0xb2>
        {
            low_range_hour[idx] = i;
   b5078:	ab1a      	add	r3, sp, #104	; 0x68
   b507a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b507e:	f843 5c60 	str.w	r5, [r3, #-96]
            Serial.printf("low_range_hour[%d]: %d\n",idx, low_range_hour[idx]);
   b5082:	f007 f9d9 	bl	bc438 <_Z16_fetch_usbserialv>
   b5086:	4622      	mov	r2, r4
   b5088:	492b      	ldr	r1, [pc, #172]	; (b5138 <_Z8calc_lowPA2_iPdi+0x158>)
   b508a:	462b      	mov	r3, r5
   b508c:	f7ff fe1c 	bl	b4cc8 <_ZN5Print6printfEPKcz>
            idx++;
   b5090:	3401      	adds	r4, #1
    for (int i = 0; i < size; i++)
   b5092:	3501      	adds	r5, #1
   b5094:	e7e6      	b.n	b5064 <_Z8calc_lowPA2_iPdi+0x84>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b5096:	f007 f9cf 	bl	bc438 <_Z16_fetch_usbserialv>
   b509a:	ec53 2b18 	vmov	r2, r3, d8
   b509e:	4927      	ldr	r1, [pc, #156]	; (b513c <_Z8calc_lowPA2_iPdi+0x15c>)
   b50a0:	f7ff fe12 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b50a4:	f007 f9c8 	bl	bc438 <_Z16_fetch_usbserialv>
   b50a8:	4925      	ldr	r1, [pc, #148]	; (b5140 <_Z8calc_lowPA2_iPdi+0x160>)
   b50aa:	4642      	mov	r2, r8
   b50ac:	464b      	mov	r3, r9
   b50ae:	f7ff fe0b 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b50b2:	f007 f9c1 	bl	bc438 <_Z16_fetch_usbserialv>
   b50b6:	4923      	ldr	r1, [pc, #140]	; (b5144 <_Z8calc_lowPA2_iPdi+0x164>)
   b50b8:	f7ff fe06 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b50bc:	b36c      	cbz	r4, b511a <_Z8calc_lowPA2_iPdi+0x13a>
    int i = 0;
   b50be:	2300      	movs	r3, #0
    int cnt = 0;
   b50c0:	461d      	mov	r5, r3
   b50c2:	1d37      	adds	r7, r6, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b50c4:	aa1a      	add	r2, sp, #104	; 0x68
   b50c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b50ca:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b50ce:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
   b50d2:	aa02      	add	r2, sp, #8
   b50d4:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b50d8:	6802      	ldr	r2, [r0, #0]
   b50da:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b50de:	3901      	subs	r1, #1
   b50e0:	428a      	cmp	r2, r1
   b50e2:	f103 0301 	add.w	r3, r3, #1
   b50e6:	d0f7      	beq.n	b50d8 <_Z8calc_lowPA2_iPdi+0xf8>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b50e8:	3201      	adds	r2, #1
        while (i <= idx)
   b50ea:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b50ec:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
            
            cnt++;
   b50f0:	f105 0201 	add.w	r2, r5, #1
        while (i <= idx)
   b50f4:	dd0f      	ble.n	b5116 <_Z8calc_lowPA2_iPdi+0x136>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b50f6:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5158 <_Z8calc_lowPA2_iPdi+0x178>
    for (int z = 0; z < cnt; z++)
   b50fa:	2400      	movs	r4, #0
   b50fc:	42ac      	cmp	r4, r5
   b50fe:	d00c      	beq.n	b511a <_Z8calc_lowPA2_iPdi+0x13a>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b5100:	f007 f99a 	bl	bc438 <_Z16_fetch_usbserialv>
   b5104:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b5108:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
   b510c:	4641      	mov	r1, r8
   b510e:	f7ff fddb 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b5112:	3401      	adds	r4, #1
   b5114:	e7f2      	b.n	b50fc <_Z8calc_lowPA2_iPdi+0x11c>
            cnt++;
   b5116:	4615      	mov	r5, r2
   b5118:	e7d4      	b.n	b50c4 <_Z8calc_lowPA2_iPdi+0xe4>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b511a:	4b0b      	ldr	r3, [pc, #44]	; (b5148 <_Z8calc_lowPA2_iPdi+0x168>)
   b511c:	2201      	movs	r2, #1

    return cnt;
}
   b511e:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b5120:	701a      	strb	r2, [r3, #0]
}
   b5122:	b01b      	add	sp, #108	; 0x6c
   b5124:	ecbd 8b02 	vpop	{d8}
   b5128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b512c:	f3af 8000 	nop.w
	...
   b5138:	000bf6bb 	.word	0x000bf6bb
   b513c:	000bf6d3 	.word	0x000bf6d3
   b5140:	000bf6f1 	.word	0x000bf6f1
   b5144:	000bf70e 	.word	0x000bf70e
   b5148:	2003d259 	.word	0x2003d259
   b514c:	33333333 	.word	0x33333333
   b5150:	3fd33333 	.word	0x3fd33333
   b5154:	408f4000 	.word	0x408f4000
   b5158:	000bf74c 	.word	0x000bf74c

000b515c <_Z18hourly_JSON_updatev>:
extern String pricestoday_Json;
extern String pricesyesterday_Json;
extern String pricestomorrow_Json;

void hourly_JSON_update()
{
   b515c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b515e:	491d      	ldr	r1, [pc, #116]	; (b51d4 <_Z18hourly_JSON_updatev+0x78>)
   b5160:	481d      	ldr	r0, [pc, #116]	; (b51d8 <_Z18hourly_JSON_updatev+0x7c>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b5162:	4e1e      	ldr	r6, [pc, #120]	; (b51dc <_Z18hourly_JSON_updatev+0x80>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5164:	4d1c      	ldr	r5, [pc, #112]	; (b51d8 <_Z18hourly_JSON_updatev+0x7c>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5166:	4f1e      	ldr	r7, [pc, #120]	; (b51e0 <_Z18hourly_JSON_updatev+0x84>)
{
   b5168:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b516a:	f004 ff66 	bl	ba03a <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b516e:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b5170:	6833      	ldr	r3, [r6, #0]
   b5172:	220a      	movs	r2, #10
   b5174:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b5178:	4668      	mov	r0, sp
   b517a:	f004 ff70 	bl	ba05e <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b517e:	4669      	mov	r1, sp
   b5180:	4628      	mov	r0, r5
   b5182:	f004 ffa9 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5186:	4668      	mov	r0, sp
   b5188:	f004 feae 	bl	b9ee8 <_ZN6StringD1Ev>
        if (i < 23)
   b518c:	2c17      	cmp	r4, #23
   b518e:	d003      	beq.n	b5198 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5190:	4639      	mov	r1, r7
   b5192:	4628      	mov	r0, r5
   b5194:	f004 ffae 	bl	ba0f4 <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b5198:	3401      	adds	r4, #1
   b519a:	2c18      	cmp	r4, #24
   b519c:	d1e8      	bne.n	b5170 <_Z18hourly_JSON_updatev+0x14>
   b519e:	4911      	ldr	r1, [pc, #68]	; (b51e4 <_Z18hourly_JSON_updatev+0x88>)
   b51a0:	480d      	ldr	r0, [pc, #52]	; (b51d8 <_Z18hourly_JSON_updatev+0x7c>)
   b51a2:	f004 ffa7 	bl	ba0f4 <_ZN6String6concatEPKc>
        }
    }
    wh_today_Json += "]}";

    // Write to storage
    if (!writeWhToday(wh_today_Json))
   b51a6:	490c      	ldr	r1, [pc, #48]	; (b51d8 <_Z18hourly_JSON_updatev+0x7c>)
   b51a8:	4668      	mov	r0, sp
   b51aa:	f004 ff33 	bl	ba014 <_ZN6StringC1ERKS_>
   b51ae:	4668      	mov	r0, sp
   b51b0:	f003 fdea 	bl	b8d88 <_Z12writeWhToday6String>
   b51b4:	4604      	mov	r4, r0
   b51b6:	4668      	mov	r0, sp
   b51b8:	f004 fe96 	bl	b9ee8 <_ZN6StringD1Ev>
   b51bc:	b93c      	cbnz	r4, b51ce <_Z18hourly_JSON_updatev+0x72>
        Serial.println("Writing wh_today_Json failed.");
   b51be:	f007 f93b 	bl	bc438 <_Z16_fetch_usbserialv>
   b51c2:	4909      	ldr	r1, [pc, #36]	; (b51e8 <_Z18hourly_JSON_updatev+0x8c>)
}
   b51c4:	b005      	add	sp, #20
   b51c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Writing wh_today_Json failed.");
   b51ca:	f006 baa8 	b.w	bb71e <_ZN5Print7printlnEPKc>
}
   b51ce:	b005      	add	sp, #20
   b51d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b51d2:	bf00      	nop
   b51d4:	000bf75a 	.word	0x000bf75a
   b51d8:	2003e194 	.word	0x2003e194
   b51dc:	2003e190 	.word	0x2003e190
   b51e0:	000bf769 	.word	0x000bf769
   b51e4:	000bf76b 	.word	0x000bf76b
   b51e8:	000bf76e 	.word	0x000bf76e

000b51ec <_Z11update_JSONv>:
void update_JSON()
{
   b51ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b51ee:	b089      	sub	sp, #36	; 0x24
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b51f0:	49a0      	ldr	r1, [pc, #640]	; (b5474 <_Z11update_JSONv+0x288>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b51f2:	4ea1      	ldr	r6, [pc, #644]	; (b5478 <_Z11update_JSONv+0x28c>)
   b51f4:	4fa1      	ldr	r7, [pc, #644]	; (b547c <_Z11update_JSONv+0x290>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b51f6:	4da2      	ldr	r5, [pc, #648]	; (b5480 <_Z11update_JSONv+0x294>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b51f8:	a804      	add	r0, sp, #16
   b51fa:	f005 f815 	bl	ba228 <_ZN6String6formatEPKcz>
   b51fe:	a904      	add	r1, sp, #16
   b5200:	489f      	ldr	r0, [pc, #636]	; (b5480 <_Z11update_JSONv+0x294>)
   b5202:	f004 ff12 	bl	ba02a <_ZN6StringaSEOS_>
   b5206:	a804      	add	r0, sp, #16
   b5208:	f004 fe6e 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b520c:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b520e:	6833      	ldr	r3, [r6, #0]
   b5210:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b5214:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5218:	4639      	mov	r1, r7
   b521a:	a804      	add	r0, sp, #16
   b521c:	f005 f804 	bl	ba228 <_ZN6String6formatEPKcz>
   b5220:	a904      	add	r1, sp, #16
   b5222:	4628      	mov	r0, r5
   b5224:	f004 ff58 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5228:	a804      	add	r0, sp, #16
   b522a:	f004 fe5d 	bl	b9ee8 <_ZN6StringD1Ev>
        if (i < 23)
   b522e:	2c17      	cmp	r4, #23
   b5230:	d00a      	beq.n	b5248 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b5232:	4994      	ldr	r1, [pc, #592]	; (b5484 <_Z11update_JSONv+0x298>)
   b5234:	a804      	add	r0, sp, #16
   b5236:	f004 fff7 	bl	ba228 <_ZN6String6formatEPKcz>
   b523a:	a904      	add	r1, sp, #16
   b523c:	4628      	mov	r0, r5
   b523e:	f004 ff4b 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5242:	a804      	add	r0, sp, #16
   b5244:	f004 fe50 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5248:	3401      	adds	r4, #1
   b524a:	2c18      	cmp	r4, #24
   b524c:	d1df      	bne.n	b520e <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b524e:	498e      	ldr	r1, [pc, #568]	; (b5488 <_Z11update_JSONv+0x29c>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b5250:	4e8e      	ldr	r6, [pc, #568]	; (b548c <_Z11update_JSONv+0x2a0>)
   b5252:	4f8a      	ldr	r7, [pc, #552]	; (b547c <_Z11update_JSONv+0x290>)
   b5254:	4d8e      	ldr	r5, [pc, #568]	; (b5490 <_Z11update_JSONv+0x2a4>)
    pricesyesterday_Json += String::format("]}");
   b5256:	a804      	add	r0, sp, #16
   b5258:	f004 ffe6 	bl	ba228 <_ZN6String6formatEPKcz>
   b525c:	a904      	add	r1, sp, #16
   b525e:	4888      	ldr	r0, [pc, #544]	; (b5480 <_Z11update_JSONv+0x294>)
   b5260:	f004 ff3a 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5264:	a804      	add	r0, sp, #16
   b5266:	f004 fe3f 	bl	b9ee8 <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b526a:	498a      	ldr	r1, [pc, #552]	; (b5494 <_Z11update_JSONv+0x2a8>)
   b526c:	a804      	add	r0, sp, #16
   b526e:	f004 ffdb 	bl	ba228 <_ZN6String6formatEPKcz>
   b5272:	a904      	add	r1, sp, #16
   b5274:	4886      	ldr	r0, [pc, #536]	; (b5490 <_Z11update_JSONv+0x2a4>)
   b5276:	f004 fed8 	bl	ba02a <_ZN6StringaSEOS_>
   b527a:	a804      	add	r0, sp, #16
   b527c:	f004 fe34 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5280:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b5282:	6833      	ldr	r3, [r6, #0]
   b5284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b5288:	e9d3 2300 	ldrd	r2, r3, [r3]
   b528c:	4639      	mov	r1, r7
   b528e:	a804      	add	r0, sp, #16
   b5290:	f004 ffca 	bl	ba228 <_ZN6String6formatEPKcz>
   b5294:	a904      	add	r1, sp, #16
   b5296:	4628      	mov	r0, r5
   b5298:	f004 ff1e 	bl	ba0d8 <_ZN6String6concatERKS_>
   b529c:	a804      	add	r0, sp, #16
   b529e:	f004 fe23 	bl	b9ee8 <_ZN6StringD1Ev>
        if (i < 23)
   b52a2:	2c17      	cmp	r4, #23
   b52a4:	d00a      	beq.n	b52bc <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b52a6:	4977      	ldr	r1, [pc, #476]	; (b5484 <_Z11update_JSONv+0x298>)
   b52a8:	a804      	add	r0, sp, #16
   b52aa:	f004 ffbd 	bl	ba228 <_ZN6String6formatEPKcz>
   b52ae:	a904      	add	r1, sp, #16
   b52b0:	4628      	mov	r0, r5
   b52b2:	f004 ff11 	bl	ba0d8 <_ZN6String6concatERKS_>
   b52b6:	a804      	add	r0, sp, #16
   b52b8:	f004 fe16 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b52bc:	3401      	adds	r4, #1
   b52be:	2c18      	cmp	r4, #24
   b52c0:	d1df      	bne.n	b5282 <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b52c2:	4971      	ldr	r1, [pc, #452]	; (b5488 <_Z11update_JSONv+0x29c>)

    // Updating prices today JSON string
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b52c4:	4e74      	ldr	r6, [pc, #464]	; (b5498 <_Z11update_JSONv+0x2ac>)
   b52c6:	4f6d      	ldr	r7, [pc, #436]	; (b547c <_Z11update_JSONv+0x290>)
   b52c8:	4d74      	ldr	r5, [pc, #464]	; (b549c <_Z11update_JSONv+0x2b0>)
    pricestoday_Json += String::format("]}");
   b52ca:	a804      	add	r0, sp, #16
   b52cc:	f004 ffac 	bl	ba228 <_ZN6String6formatEPKcz>
   b52d0:	a904      	add	r1, sp, #16
   b52d2:	486f      	ldr	r0, [pc, #444]	; (b5490 <_Z11update_JSONv+0x2a4>)
   b52d4:	f004 ff00 	bl	ba0d8 <_ZN6String6concatERKS_>
   b52d8:	a804      	add	r0, sp, #16
   b52da:	f004 fe05 	bl	b9ee8 <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b52de:	4970      	ldr	r1, [pc, #448]	; (b54a0 <_Z11update_JSONv+0x2b4>)
   b52e0:	a804      	add	r0, sp, #16
   b52e2:	f004 ffa1 	bl	ba228 <_ZN6String6formatEPKcz>
   b52e6:	a904      	add	r1, sp, #16
   b52e8:	486c      	ldr	r0, [pc, #432]	; (b549c <_Z11update_JSONv+0x2b0>)
   b52ea:	f004 fe9e 	bl	ba02a <_ZN6StringaSEOS_>
   b52ee:	a804      	add	r0, sp, #16
   b52f0:	f004 fdfa 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b52f4:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b52f6:	6833      	ldr	r3, [r6, #0]
   b52f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b52fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5300:	4639      	mov	r1, r7
   b5302:	a804      	add	r0, sp, #16
   b5304:	f004 ff90 	bl	ba228 <_ZN6String6formatEPKcz>
   b5308:	a904      	add	r1, sp, #16
   b530a:	4628      	mov	r0, r5
   b530c:	f004 fee4 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5310:	a804      	add	r0, sp, #16
   b5312:	f004 fde9 	bl	b9ee8 <_ZN6StringD1Ev>
        if (i < 23)
   b5316:	2c17      	cmp	r4, #23
   b5318:	d00a      	beq.n	b5330 <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b531a:	495a      	ldr	r1, [pc, #360]	; (b5484 <_Z11update_JSONv+0x298>)
   b531c:	a804      	add	r0, sp, #16
   b531e:	f004 ff83 	bl	ba228 <_ZN6String6formatEPKcz>
   b5322:	a904      	add	r1, sp, #16
   b5324:	4628      	mov	r0, r5
   b5326:	f004 fed7 	bl	ba0d8 <_ZN6String6concatERKS_>
   b532a:	a804      	add	r0, sp, #16
   b532c:	f004 fddc 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5330:	3401      	adds	r4, #1
   b5332:	2c18      	cmp	r4, #24
   b5334:	d1df      	bne.n	b52f6 <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b5336:	4954      	ldr	r1, [pc, #336]	; (b5488 <_Z11update_JSONv+0x29c>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b5338:	4e5a      	ldr	r6, [pc, #360]	; (b54a4 <_Z11update_JSONv+0x2b8>)
   b533a:	4f5b      	ldr	r7, [pc, #364]	; (b54a8 <_Z11update_JSONv+0x2bc>)
   b533c:	4d5b      	ldr	r5, [pc, #364]	; (b54ac <_Z11update_JSONv+0x2c0>)
    pricestomorrow_Json += String::format("]}");
   b533e:	a804      	add	r0, sp, #16
   b5340:	f004 ff72 	bl	ba228 <_ZN6String6formatEPKcz>
   b5344:	a904      	add	r1, sp, #16
   b5346:	4855      	ldr	r0, [pc, #340]	; (b549c <_Z11update_JSONv+0x2b0>)
   b5348:	f004 fec6 	bl	ba0d8 <_ZN6String6concatERKS_>
   b534c:	a804      	add	r0, sp, #16
   b534e:	f004 fdcb 	bl	b9ee8 <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b5352:	4957      	ldr	r1, [pc, #348]	; (b54b0 <_Z11update_JSONv+0x2c4>)
   b5354:	a804      	add	r0, sp, #16
   b5356:	f004 ff67 	bl	ba228 <_ZN6String6formatEPKcz>
   b535a:	a904      	add	r1, sp, #16
   b535c:	4853      	ldr	r0, [pc, #332]	; (b54ac <_Z11update_JSONv+0x2c0>)
   b535e:	f004 fe64 	bl	ba02a <_ZN6StringaSEOS_>
   b5362:	a804      	add	r0, sp, #16
   b5364:	f004 fdc0 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5368:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b536a:	6833      	ldr	r3, [r6, #0]
   b536c:	4639      	mov	r1, r7
   b536e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b5372:	a804      	add	r0, sp, #16
   b5374:	f004 ff58 	bl	ba228 <_ZN6String6formatEPKcz>
   b5378:	a904      	add	r1, sp, #16
   b537a:	4628      	mov	r0, r5
   b537c:	f004 feac 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5380:	a804      	add	r0, sp, #16
   b5382:	f004 fdb1 	bl	b9ee8 <_ZN6StringD1Ev>
        if (i < 23)
   b5386:	2c17      	cmp	r4, #23
   b5388:	d00a      	beq.n	b53a0 <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b538a:	493e      	ldr	r1, [pc, #248]	; (b5484 <_Z11update_JSONv+0x298>)
   b538c:	a804      	add	r0, sp, #16
   b538e:	f004 ff4b 	bl	ba228 <_ZN6String6formatEPKcz>
   b5392:	a904      	add	r1, sp, #16
   b5394:	4628      	mov	r0, r5
   b5396:	f004 fe9f 	bl	ba0d8 <_ZN6String6concatERKS_>
   b539a:	a804      	add	r0, sp, #16
   b539c:	f004 fda4 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b53a0:	3401      	adds	r4, #1
   b53a2:	2c18      	cmp	r4, #24
   b53a4:	d1e1      	bne.n	b536a <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b53a6:	4938      	ldr	r1, [pc, #224]	; (b5488 <_Z11update_JSONv+0x29c>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b53a8:	4e42      	ldr	r6, [pc, #264]	; (b54b4 <_Z11update_JSONv+0x2c8>)
   b53aa:	4f3f      	ldr	r7, [pc, #252]	; (b54a8 <_Z11update_JSONv+0x2bc>)
   b53ac:	4d42      	ldr	r5, [pc, #264]	; (b54b8 <_Z11update_JSONv+0x2cc>)
    wh_yesterday_Json += String::format("]}");
   b53ae:	a804      	add	r0, sp, #16
   b53b0:	f004 ff3a 	bl	ba228 <_ZN6String6formatEPKcz>
   b53b4:	a904      	add	r1, sp, #16
   b53b6:	483d      	ldr	r0, [pc, #244]	; (b54ac <_Z11update_JSONv+0x2c0>)
   b53b8:	f004 fe8e 	bl	ba0d8 <_ZN6String6concatERKS_>
   b53bc:	a804      	add	r0, sp, #16
   b53be:	f004 fd93 	bl	b9ee8 <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b53c2:	493e      	ldr	r1, [pc, #248]	; (b54bc <_Z11update_JSONv+0x2d0>)
   b53c4:	a804      	add	r0, sp, #16
   b53c6:	f004 ff2f 	bl	ba228 <_ZN6String6formatEPKcz>
   b53ca:	a904      	add	r1, sp, #16
   b53cc:	483a      	ldr	r0, [pc, #232]	; (b54b8 <_Z11update_JSONv+0x2cc>)
   b53ce:	f004 fe2c 	bl	ba02a <_ZN6StringaSEOS_>
   b53d2:	a804      	add	r0, sp, #16
   b53d4:	f004 fd88 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b53d8:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b53da:	6833      	ldr	r3, [r6, #0]
   b53dc:	4639      	mov	r1, r7
   b53de:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b53e2:	a804      	add	r0, sp, #16
   b53e4:	f004 ff20 	bl	ba228 <_ZN6String6formatEPKcz>
   b53e8:	a904      	add	r1, sp, #16
   b53ea:	4628      	mov	r0, r5
   b53ec:	f004 fe74 	bl	ba0d8 <_ZN6String6concatERKS_>
   b53f0:	a804      	add	r0, sp, #16
   b53f2:	f004 fd79 	bl	b9ee8 <_ZN6StringD1Ev>
        if (i < 23)
   b53f6:	2c17      	cmp	r4, #23
   b53f8:	d00a      	beq.n	b5410 <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b53fa:	4922      	ldr	r1, [pc, #136]	; (b5484 <_Z11update_JSONv+0x298>)
   b53fc:	a804      	add	r0, sp, #16
   b53fe:	f004 ff13 	bl	ba228 <_ZN6String6formatEPKcz>
   b5402:	a904      	add	r1, sp, #16
   b5404:	4628      	mov	r0, r5
   b5406:	f004 fe67 	bl	ba0d8 <_ZN6String6concatERKS_>
   b540a:	a804      	add	r0, sp, #16
   b540c:	f004 fd6c 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5410:	3401      	adds	r4, #1
   b5412:	2c18      	cmp	r4, #24
   b5414:	d1e1      	bne.n	b53da <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b5416:	491c      	ldr	r1, [pc, #112]	; (b5488 <_Z11update_JSONv+0x29c>)
   b5418:	a804      	add	r0, sp, #16
   b541a:	f004 ff05 	bl	ba228 <_ZN6String6formatEPKcz>
   b541e:	a904      	add	r1, sp, #16
   b5420:	4825      	ldr	r0, [pc, #148]	; (b54b8 <_Z11update_JSONv+0x2cc>)
   b5422:	f004 fe59 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5426:	a804      	add	r0, sp, #16
   b5428:	f004 fd5e 	bl	b9ee8 <_ZN6StringD1Ev>

    // Write to storage
    if (!writeWhToday(wh_today_Json) || writeWhYesterday(wh_yesterday_Json))
   b542c:	4922      	ldr	r1, [pc, #136]	; (b54b8 <_Z11update_JSONv+0x2cc>)
   b542e:	4668      	mov	r0, sp
   b5430:	f004 fdf0 	bl	ba014 <_ZN6StringC1ERKS_>
   b5434:	4668      	mov	r0, sp
   b5436:	f003 fca7 	bl	b8d88 <_Z12writeWhToday6String>
   b543a:	b1b0      	cbz	r0, b546a <_Z11update_JSONv+0x27e>
   b543c:	491b      	ldr	r1, [pc, #108]	; (b54ac <_Z11update_JSONv+0x2c0>)
   b543e:	a804      	add	r0, sp, #16
   b5440:	f004 fde8 	bl	ba014 <_ZN6StringC1ERKS_>
   b5444:	a804      	add	r0, sp, #16
   b5446:	f003 fcb1 	bl	b8dac <_Z16writeWhYesterday6String>
   b544a:	4604      	mov	r4, r0
   b544c:	a804      	add	r0, sp, #16
   b544e:	f004 fd4b 	bl	b9ee8 <_ZN6StringD1Ev>
   b5452:	4668      	mov	r0, sp
   b5454:	f004 fd48 	bl	b9ee8 <_ZN6StringD1Ev>
   b5458:	b14c      	cbz	r4, b546e <_Z11update_JSONv+0x282>
        Serial.println("Writing watt hours failed.");
   b545a:	f006 ffed 	bl	bc438 <_Z16_fetch_usbserialv>
   b545e:	4918      	ldr	r1, [pc, #96]	; (b54c0 <_Z11update_JSONv+0x2d4>)
}
   b5460:	b009      	add	sp, #36	; 0x24
   b5462:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Writing watt hours failed.");
   b5466:	f006 b95a 	b.w	bb71e <_ZN5Print7printlnEPKc>
    if (!writeWhToday(wh_today_Json) || writeWhYesterday(wh_yesterday_Json))
   b546a:	2401      	movs	r4, #1
   b546c:	e7f1      	b.n	b5452 <_Z11update_JSONv+0x266>
}
   b546e:	b009      	add	sp, #36	; 0x24
   b5470:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5472:	bf00      	nop
   b5474:	000bf78c 	.word	0x000bf78c
   b5478:	2003d3d8 	.word	0x2003d3d8
   b547c:	000bf7a1 	.word	0x000bf7a1
   b5480:	2003dc44 	.word	0x2003dc44
   b5484:	000bf769 	.word	0x000bf769
   b5488:	000bf76b 	.word	0x000bf76b
   b548c:	2003d3d0 	.word	0x2003d3d0
   b5490:	2003dc24 	.word	0x2003dc24
   b5494:	000bf7a7 	.word	0x000bf7a7
   b5498:	2003d3d4 	.word	0x2003d3d4
   b549c:	2003dc34 	.word	0x2003dc34
   b54a0:	000bf7b8 	.word	0x000bf7b8
   b54a4:	2003e1a4 	.word	0x2003e1a4
   b54a8:	000bff70 	.word	0x000bff70
   b54ac:	2003e1a8 	.word	0x2003e1a8
   b54b0:	000bf7cc 	.word	0x000bf7cc
   b54b4:	2003e190 	.word	0x2003e190
   b54b8:	2003e194 	.word	0x2003e194
   b54bc:	000bf7df 	.word	0x000bf7df
   b54c0:	000bf7ee 	.word	0x000bf7ee

000b54c4 <_Z21update_Whr_Today_JSONv>:
String update_Whr_Today_JSON()
{
   b54c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
   b54c8:	4929      	ldr	r1, [pc, #164]	; (b5570 <_Z21update_Whr_Today_JSONv+0xac>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b54ca:	4f2a      	ldr	r7, [pc, #168]	; (b5574 <_Z21update_Whr_Today_JSONv+0xb0>)
   b54cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5588 <_Z21update_Whr_Today_JSONv+0xc4>
   b54d0:	4e29      	ldr	r6, [pc, #164]	; (b5578 <_Z21update_Whr_Today_JSONv+0xb4>)
{
   b54d2:	4605      	mov	r5, r0
    wh_today_Json = String::format("{\"WHr_today\":[");
   b54d4:	4668      	mov	r0, sp
   b54d6:	f004 fea7 	bl	ba228 <_ZN6String6formatEPKcz>
   b54da:	4669      	mov	r1, sp
   b54dc:	4826      	ldr	r0, [pc, #152]	; (b5578 <_Z21update_Whr_Today_JSONv+0xb4>)
   b54de:	f004 fda4 	bl	ba02a <_ZN6StringaSEOS_>
   b54e2:	4668      	mov	r0, sp
   b54e4:	f004 fd00 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b54e8:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b54ea:	683b      	ldr	r3, [r7, #0]
   b54ec:	4641      	mov	r1, r8
   b54ee:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b54f2:	4668      	mov	r0, sp
   b54f4:	f004 fe98 	bl	ba228 <_ZN6String6formatEPKcz>
   b54f8:	4669      	mov	r1, sp
   b54fa:	4630      	mov	r0, r6
   b54fc:	f004 fdec 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5500:	4668      	mov	r0, sp
   b5502:	f004 fcf1 	bl	b9ee8 <_ZN6StringD1Ev>
        if (i < 23)
   b5506:	2c17      	cmp	r4, #23
   b5508:	d00a      	beq.n	b5520 <_Z21update_Whr_Today_JSONv+0x5c>
        {
            wh_today_Json += String::format(",");
   b550a:	491c      	ldr	r1, [pc, #112]	; (b557c <_Z21update_Whr_Today_JSONv+0xb8>)
   b550c:	4668      	mov	r0, sp
   b550e:	f004 fe8b 	bl	ba228 <_ZN6String6formatEPKcz>
   b5512:	4669      	mov	r1, sp
   b5514:	4630      	mov	r0, r6
   b5516:	f004 fddf 	bl	ba0d8 <_ZN6String6concatERKS_>
   b551a:	4668      	mov	r0, sp
   b551c:	f004 fce4 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5520:	3401      	adds	r4, #1
   b5522:	2c18      	cmp	r4, #24
   b5524:	d1e1      	bne.n	b54ea <_Z21update_Whr_Today_JSONv+0x26>
        }
    }
    wh_today_Json += String::format("]}");
   b5526:	4916      	ldr	r1, [pc, #88]	; (b5580 <_Z21update_Whr_Today_JSONv+0xbc>)
   b5528:	4668      	mov	r0, sp
   b552a:	f004 fe7d 	bl	ba228 <_ZN6String6formatEPKcz>
   b552e:	4669      	mov	r1, sp
   b5530:	4811      	ldr	r0, [pc, #68]	; (b5578 <_Z21update_Whr_Today_JSONv+0xb4>)
   b5532:	f004 fdd1 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5536:	4668      	mov	r0, sp
   b5538:	f004 fcd6 	bl	b9ee8 <_ZN6StringD1Ev>

    // Write to storage
    if (!writeWhToday(wh_today_Json))
   b553c:	490e      	ldr	r1, [pc, #56]	; (b5578 <_Z21update_Whr_Today_JSONv+0xb4>)
   b553e:	4668      	mov	r0, sp
   b5540:	f004 fd68 	bl	ba014 <_ZN6StringC1ERKS_>
   b5544:	4668      	mov	r0, sp
   b5546:	f003 fc1f 	bl	b8d88 <_Z12writeWhToday6String>
   b554a:	4604      	mov	r4, r0
   b554c:	4668      	mov	r0, sp
   b554e:	f004 fccb 	bl	b9ee8 <_ZN6StringD1Ev>
   b5552:	b924      	cbnz	r4, b555e <_Z21update_Whr_Today_JSONv+0x9a>
        Serial.println("Writing wh_today_Json failed.");
   b5554:	f006 ff70 	bl	bc438 <_Z16_fetch_usbserialv>
   b5558:	490a      	ldr	r1, [pc, #40]	; (b5584 <_Z21update_Whr_Today_JSONv+0xc0>)
   b555a:	f006 f8e0 	bl	bb71e <_ZN5Print7printlnEPKc>

    return wh_today_Json;
   b555e:	4906      	ldr	r1, [pc, #24]	; (b5578 <_Z21update_Whr_Today_JSONv+0xb4>)
   b5560:	4628      	mov	r0, r5
   b5562:	f004 fd57 	bl	ba014 <_ZN6StringC1ERKS_>
   b5566:	4628      	mov	r0, r5
   b5568:	b004      	add	sp, #16
   b556a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b556e:	bf00      	nop
   b5570:	000bf7df 	.word	0x000bf7df
   b5574:	2003e190 	.word	0x2003e190
   b5578:	2003e194 	.word	0x2003e194
   b557c:	000bf769 	.word	0x000bf769
   b5580:	000bf76b 	.word	0x000bf76b
   b5584:	000bf76e 	.word	0x000bf76e
   b5588:	000bff70 	.word	0x000bff70

000b558c <_Z11init_memoryv>:
{
   b558c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b5590:	20c0      	movs	r0, #192	; 0xc0
   b5592:	f003 ffc3 	bl	b951c <malloc>
   b5596:	4d38      	ldr	r5, [pc, #224]	; (b5678 <_Z11init_memoryv+0xec>)
   b5598:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b559a:	b928      	cbnz	r0, b55a8 <_Z11init_memoryv+0x1c>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b559c:	f006 ff4c 	bl	bc438 <_Z16_fetch_usbserialv>
   b55a0:	4936      	ldr	r1, [pc, #216]	; (b567c <_Z11init_memoryv+0xf0>)
   b55a2:	f7ff fb91 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        while (1)
   b55a6:	e7fe      	b.n	b55a6 <_Z11init_memoryv+0x1a>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b55a8:	20c0      	movs	r0, #192	; 0xc0
   b55aa:	f003 ffb7 	bl	b951c <malloc>
   b55ae:	4c34      	ldr	r4, [pc, #208]	; (b5680 <_Z11init_memoryv+0xf4>)
   b55b0:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b55b2:	b928      	cbnz	r0, b55c0 <_Z11init_memoryv+0x34>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b55b4:	f006 ff40 	bl	bc438 <_Z16_fetch_usbserialv>
   b55b8:	4932      	ldr	r1, [pc, #200]	; (b5684 <_Z11init_memoryv+0xf8>)
   b55ba:	f7ff fb85 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        while (1)
   b55be:	e7fe      	b.n	b55be <_Z11init_memoryv+0x32>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b55c0:	20c0      	movs	r0, #192	; 0xc0
   b55c2:	f003 ffab 	bl	b951c <malloc>
   b55c6:	4e30      	ldr	r6, [pc, #192]	; (b5688 <_Z11init_memoryv+0xfc>)
   b55c8:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b55ca:	b928      	cbnz	r0, b55d8 <_Z11init_memoryv+0x4c>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b55cc:	f006 ff34 	bl	bc438 <_Z16_fetch_usbserialv>
   b55d0:	492e      	ldr	r1, [pc, #184]	; (b568c <_Z11init_memoryv+0x100>)
   b55d2:	f7ff fb79 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        while (1)
   b55d6:	e7fe      	b.n	b55d6 <_Z11init_memoryv+0x4a>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b55d8:	f006 ff2e 	bl	bc438 <_Z16_fetch_usbserialv>
   b55dc:	492c      	ldr	r1, [pc, #176]	; (b5690 <_Z11init_memoryv+0x104>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b55de:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b56a4 <_Z11init_memoryv+0x118>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b55e2:	f44f 7210 	mov.w	r2, #576	; 0x240
   b55e6:	f7ff fb6f 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b55ea:	2060      	movs	r0, #96	; 0x60
   b55ec:	f003 ff96 	bl	b951c <malloc>
   b55f0:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b55f4:	b928      	cbnz	r0, b5602 <_Z11init_memoryv+0x76>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b55f6:	f006 ff1f 	bl	bc438 <_Z16_fetch_usbserialv>
   b55fa:	4926      	ldr	r1, [pc, #152]	; (b5694 <_Z11init_memoryv+0x108>)
   b55fc:	f7ff fb64 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        while (1)
   b5600:	e7fe      	b.n	b5600 <_Z11init_memoryv+0x74>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b5602:	2060      	movs	r0, #96	; 0x60
   b5604:	f003 ff8a 	bl	b951c <malloc>
   b5608:	f8df 909c 	ldr.w	r9, [pc, #156]	; b56a8 <_Z11init_memoryv+0x11c>
   b560c:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b5610:	b928      	cbnz	r0, b561e <_Z11init_memoryv+0x92>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b5612:	f006 ff11 	bl	bc438 <_Z16_fetch_usbserialv>
   b5616:	4920      	ldr	r1, [pc, #128]	; (b5698 <_Z11init_memoryv+0x10c>)
   b5618:	f7ff fb56 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        while (1)
   b561c:	e7fe      	b.n	b561c <_Z11init_memoryv+0x90>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b561e:	f006 ff0b 	bl	bc438 <_Z16_fetch_usbserialv>
   b5622:	491e      	ldr	r1, [pc, #120]	; (b569c <_Z11init_memoryv+0x110>)
   b5624:	22c0      	movs	r2, #192	; 0xc0
   b5626:	f7ff fb4f 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b562a:	f006 ff05 	bl	bc438 <_Z16_fetch_usbserialv>
   b562e:	4607      	mov	r7, r0
   b5630:	f004 f834 	bl	b969c <_ZN11SystemClass10freeMemoryEv>
   b5634:	491a      	ldr	r1, [pc, #104]	; (b56a0 <_Z11init_memoryv+0x114>)
   b5636:	4602      	mov	r2, r0
   b5638:	4638      	mov	r0, r7
   b563a:	f7ff fb45 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b563e:	6828      	ldr	r0, [r5, #0]
   b5640:	22c0      	movs	r2, #192	; 0xc0
   b5642:	2100      	movs	r1, #0
   b5644:	f007 fecf 	bl	bd3e6 <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b5648:	6820      	ldr	r0, [r4, #0]
   b564a:	22c0      	movs	r2, #192	; 0xc0
   b564c:	2100      	movs	r1, #0
   b564e:	f007 feca 	bl	bd3e6 <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b5652:	6830      	ldr	r0, [r6, #0]
   b5654:	22c0      	movs	r2, #192	; 0xc0
   b5656:	2100      	movs	r1, #0
   b5658:	f007 fec5 	bl	bd3e6 <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b565c:	f8d8 0000 	ldr.w	r0, [r8]
   b5660:	2260      	movs	r2, #96	; 0x60
   b5662:	2100      	movs	r1, #0
   b5664:	f007 febf 	bl	bd3e6 <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b5668:	f8d9 0000 	ldr.w	r0, [r9]
   b566c:	2260      	movs	r2, #96	; 0x60
}
   b566e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b5672:	2100      	movs	r1, #0
   b5674:	f007 beb7 	b.w	bd3e6 <memset>
   b5678:	2003d3d8 	.word	0x2003d3d8
   b567c:	000bf809 	.word	0x000bf809
   b5680:	2003d3d0 	.word	0x2003d3d0
   b5684:	000bf837 	.word	0x000bf837
   b5688:	2003d3d4 	.word	0x2003d3d4
   b568c:	000bf861 	.word	0x000bf861
   b5690:	000bf88e 	.word	0x000bf88e
   b5694:	000bf8c0 	.word	0x000bf8c0
   b5698:	000bf8e8 	.word	0x000bf8e8
   b569c:	000bf914 	.word	0x000bf914
   b56a0:	000bf93f 	.word	0x000bf93f
   b56a4:	2003e190 	.word	0x2003e190
   b56a8:	2003e1a4 	.word	0x2003e1a4

000b56ac <_Z13rotate_pricesv>:
{
   b56ac:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b56ae:	4a0c      	ldr	r2, [pc, #48]	; (b56e0 <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b56b0:	4b0c      	ldr	r3, [pc, #48]	; (b56e4 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b56b2:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b56b4:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b56b6:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b56b8:	4b0b      	ldr	r3, [pc, #44]	; (b56e8 <_Z13rotate_pricesv+0x3c>)
   b56ba:	6819      	ldr	r1, [r3, #0]
   b56bc:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b56be:	22c0      	movs	r2, #192	; 0xc0
   b56c0:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b56c2:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b56c4:	f007 fe8f 	bl	bd3e6 <memset>
    int *temp2 = wh_yesterday;
   b56c8:	4a08      	ldr	r2, [pc, #32]	; (b56ec <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b56ca:	4b09      	ldr	r3, [pc, #36]	; (b56f0 <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b56cc:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b56ce:	6819      	ldr	r1, [r3, #0]
   b56d0:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b56d2:	6018      	str	r0, [r3, #0]
}
   b56d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b56d8:	2260      	movs	r2, #96	; 0x60
   b56da:	2100      	movs	r1, #0
   b56dc:	f007 be83 	b.w	bd3e6 <memset>
   b56e0:	2003d3d0 	.word	0x2003d3d0
   b56e4:	2003d3d8 	.word	0x2003d3d8
   b56e8:	2003d3d4 	.word	0x2003d3d4
   b56ec:	2003e1a4 	.word	0x2003e1a4
   b56f0:	2003e190 	.word	0x2003e190

000b56f4 <_Z10check_mqttv>:
{
   b56f4:	b500      	push	{lr}
    if (client.isConnected())
   b56f6:	481b      	ldr	r0, [pc, #108]	; (b5764 <_Z10check_mqttv+0x70>)
{
   b56f8:	b089      	sub	sp, #36	; 0x24
    if (client.isConnected())
   b56fa:	f000 feec 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b56fe:	b128      	cbz	r0, b570c <_Z10check_mqttv+0x18>
        client.loop();
   b5700:	4818      	ldr	r0, [pc, #96]	; (b5764 <_Z10check_mqttv+0x70>)
}
   b5702:	b009      	add	sp, #36	; 0x24
   b5704:	f85d eb04 	ldr.w	lr, [sp], #4
        client.loop();
   b5708:	f001 b8d1 	b.w	b68ae <_ZN4MQTT4loopEv>
        Serial.printf("Client disconnected\n");
   b570c:	f006 fe94 	bl	bc438 <_Z16_fetch_usbserialv>
   b5710:	4915      	ldr	r1, [pc, #84]	; (b5768 <_Z10check_mqttv+0x74>)
   b5712:	f7ff fad9 	bl	b4cc8 <_ZN5Print6printfEPKcz>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b5716:	4915      	ldr	r1, [pc, #84]	; (b576c <_Z10check_mqttv+0x78>)
   b5718:	4668      	mov	r0, sp
   b571a:	f004 fc30 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
        client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b571e:	f006 f9dc 	bl	bbada <_ZN9TimeClass3nowEv>
   b5722:	220a      	movs	r2, #10
   b5724:	4601      	mov	r1, r0
   b5726:	a804      	add	r0, sp, #16
   b5728:	f004 fcac 	bl	ba084 <_ZN6StringC1Elh>
   b572c:	a904      	add	r1, sp, #16
   b572e:	4668      	mov	r0, sp
   b5730:	f004 fd03 	bl	ba13a <_ZplRK15StringSumHelperRK6String>
   b5734:	4b0e      	ldr	r3, [pc, #56]	; (b5770 <_Z10check_mqttv+0x7c>)
   b5736:	6801      	ldr	r1, [r0, #0]
   b5738:	480a      	ldr	r0, [pc, #40]	; (b5764 <_Z10check_mqttv+0x70>)
   b573a:	461a      	mov	r2, r3
   b573c:	f000 ffd0 	bl	b66e0 <_ZN4MQTT7connectEPKcS1_S1_>
   b5740:	a804      	add	r0, sp, #16
   b5742:	f004 fbd1 	bl	b9ee8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5746:	4668      	mov	r0, sp
   b5748:	f004 fbce 	bl	b9ee8 <_ZN6StringD1Ev>
        if (client.isConnected())
   b574c:	4805      	ldr	r0, [pc, #20]	; (b5764 <_Z10check_mqttv+0x70>)
   b574e:	f000 fec2 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b5752:	b120      	cbz	r0, b575e <_Z10check_mqttv+0x6a>
            Serial.printf("Client reconnected\n");
   b5754:	f006 fe70 	bl	bc438 <_Z16_fetch_usbserialv>
   b5758:	4906      	ldr	r1, [pc, #24]	; (b5774 <_Z10check_mqttv+0x80>)
   b575a:	f7ff fab5 	bl	b4cc8 <_ZN5Print6printfEPKcz>
}
   b575e:	b009      	add	sp, #36	; 0x24
   b5760:	f85d fb04 	ldr.w	pc, [sp], #4
   b5764:	2003d370 	.word	0x2003d370
   b5768:	000bf94a 	.word	0x000bf94a
   b576c:	000bf95f 	.word	0x000bf95f
   b5770:	000bf96c 	.word	0x000bf96c
   b5774:	000bf971 	.word	0x000bf971

000b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5778:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b577a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b577c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b577e:	b17c      	cbz	r4, b57a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5780:	6863      	ldr	r3, [r4, #4]
   b5782:	3b01      	subs	r3, #1
   b5784:	6063      	str	r3, [r4, #4]
   b5786:	b95b      	cbnz	r3, b57a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5788:	6823      	ldr	r3, [r4, #0]
   b578a:	4620      	mov	r0, r4
   b578c:	689b      	ldr	r3, [r3, #8]
   b578e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5790:	68a3      	ldr	r3, [r4, #8]
   b5792:	3b01      	subs	r3, #1
   b5794:	60a3      	str	r3, [r4, #8]
   b5796:	b91b      	cbnz	r3, b57a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5798:	6823      	ldr	r3, [r4, #0]
   b579a:	4620      	mov	r0, r4
   b579c:	68db      	ldr	r3, [r3, #12]
   b579e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b57a0:	4628      	mov	r0, r5
   b57a2:	bd38      	pop	{r3, r4, r5, pc}

000b57a4 <_Z15transmit_pricesPA2_ii>:
{
   b57a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b57a8:	b08a      	sub	sp, #40	; 0x28
   b57aa:	4605      	mov	r5, r0
   b57ac:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b57ae:	f006 fe43 	bl	bc438 <_Z16_fetch_usbserialv>
   b57b2:	491c      	ldr	r1, [pc, #112]	; (b5824 <_Z15transmit_pricesPA2_ii+0x80>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b57b4:	4f1c      	ldr	r7, [pc, #112]	; (b5828 <_Z15transmit_pricesPA2_ii+0x84>)
    Serial.printf("In work\n");
   b57b6:	f7ff fa87 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b57ba:	491c      	ldr	r1, [pc, #112]	; (b582c <_Z15transmit_pricesPA2_ii+0x88>)
   b57bc:	a802      	add	r0, sp, #8
   b57be:	f004 fbde 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b57c2:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b57c4:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b57c8:	42b4      	cmp	r4, r6
   b57ca:	da10      	bge.n	b57ee <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b57cc:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b57d0:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b57d4:	4639      	mov	r1, r7
   b57d6:	a806      	add	r0, sp, #24
   b57d8:	f004 fd26 	bl	ba228 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b57dc:	a906      	add	r1, sp, #24
   b57de:	a802      	add	r0, sp, #8
   b57e0:	f004 fc7a 	bl	ba0d8 <_ZN6String6concatERKS_>
   b57e4:	a806      	add	r0, sp, #24
   b57e6:	f004 fb7f 	bl	b9ee8 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b57ea:	3401      	adds	r4, #1
   b57ec:	e7ec      	b.n	b57c8 <_Z15transmit_pricesPA2_ii+0x24>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b57ee:	4b10      	ldr	r3, [pc, #64]	; (b5830 <_Z15transmit_pricesPA2_ii+0x8c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b57f0:	9a02      	ldr	r2, [sp, #8]
   b57f2:	781b      	ldrb	r3, [r3, #0]
   b57f4:	490f      	ldr	r1, [pc, #60]	; (b5834 <_Z15transmit_pricesPA2_ii+0x90>)
   b57f6:	f88d 3000 	strb.w	r3, [sp]
   b57fa:	a806      	add	r0, sp, #24
   b57fc:	233c      	movs	r3, #60	; 0x3c
   b57fe:	f006 fbb3 	bl	bbf68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5802:	a807      	add	r0, sp, #28
   b5804:	f7ff ffb8 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    client.publish("prices", data);
   b5808:	9a02      	ldr	r2, [sp, #8]
   b580a:	490b      	ldr	r1, [pc, #44]	; (b5838 <_Z15transmit_pricesPA2_ii+0x94>)
   b580c:	480b      	ldr	r0, [pc, #44]	; (b583c <_Z15transmit_pricesPA2_ii+0x98>)
   b580e:	f000 fff2 	bl	b67f6 <_ZN4MQTT7publishEPKcS1_>
    client.loop();
   b5812:	480a      	ldr	r0, [pc, #40]	; (b583c <_Z15transmit_pricesPA2_ii+0x98>)
   b5814:	f001 f84b 	bl	b68ae <_ZN4MQTT4loopEv>
    String data = "Cheap(ish) hours of the day: ";
   b5818:	a802      	add	r0, sp, #8
   b581a:	f004 fb65 	bl	b9ee8 <_ZN6StringD1Ev>
}
   b581e:	b00a      	add	sp, #40	; 0x28
   b5820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5824:	000bf985 	.word	0x000bf985
   b5828:	000bf9ac 	.word	0x000bf9ac
   b582c:	000bf98e 	.word	0x000bf98e
   b5830:	2003d300 	.word	0x2003d300
   b5834:	000bf9bb 	.word	0x000bf9bb
   b5838:	000bfba5 	.word	0x000bfba5
   b583c:	2003d370 	.word	0x2003d370

000b5840 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5840:	b082      	sub	sp, #8
   b5842:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5844:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b5846:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5848:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b584a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b584c:	e9c0 3300 	strd	r3, r3, [r0]
   b5850:	4606      	mov	r6, r0
   b5852:	4694      	mov	ip, r2
   b5854:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b5856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5858:	ac04      	add	r4, sp, #16
   b585a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b585c:	682b      	ldr	r3, [r5, #0]
   b585e:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b5860:	ad1a      	add	r5, sp, #104	; 0x68
   b5862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5864:	ac09      	add	r4, sp, #36	; 0x24
   b5866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5868:	682b      	ldr	r3, [r5, #0]
   b586a:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b586c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b586e:	9302      	str	r3, [sp, #8]
   b5870:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b5872:	9301      	str	r3, [sp, #4]
   b5874:	ab09      	add	r3, sp, #36	; 0x24
   b5876:	9300      	str	r3, [sp, #0]
   b5878:	4630      	mov	r0, r6
   b587a:	ab04      	add	r3, sp, #16
   b587c:	4662      	mov	r2, ip
   b587e:	4639      	mov	r1, r7
   b5880:	f005 fca4 	bl	bb1cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5884:	4630      	mov	r0, r6
   b5886:	b00f      	add	sp, #60	; 0x3c
   b5888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b588c:	b002      	add	sp, #8
   b588e:	4770      	bx	lr

000b5890 <_GLOBAL__sub_I_argonName>:
   b5890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b5894:	4b9a      	ldr	r3, [pc, #616]	; (b5b00 <_GLOBAL__sub_I_argonName+0x270>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5896:	4d9b      	ldr	r5, [pc, #620]	; (b5b04 <_GLOBAL__sub_I_argonName+0x274>)
const BleUuid wattcharacteristicUuid(watt_c);
   b5898:	f8df b318 	ldr.w	fp, [pc, #792]	; b5bb4 <_GLOBAL__sub_I_argonName+0x324>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b589c:	f8df a318 	ldr.w	sl, [pc, #792]	; b5bb8 <_GLOBAL__sub_I_argonName+0x328>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b58a0:	f8df 9318 	ldr.w	r9, [pc, #792]	; b5bbc <_GLOBAL__sub_I_argonName+0x32c>
   b58a4:	f04f 0801 	mov.w	r8, #1
   b58a8:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b58ac:	4b96      	ldr	r3, [pc, #600]	; (b5b08 <_GLOBAL__sub_I_argonName+0x278>)
   b58ae:	b093      	sub	sp, #76	; 0x4c
   b58b0:	6819      	ldr	r1, [r3, #0]
   b58b2:	4628      	mov	r0, r5
   b58b4:	f004 ff04 	bl	ba6c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b58b8:	4b94      	ldr	r3, [pc, #592]	; (b5b0c <_GLOBAL__sub_I_argonName+0x27c>)
   b58ba:	4658      	mov	r0, fp
   b58bc:	6819      	ldr	r1, [r3, #0]
   b58be:	f004 feff 	bl	ba6c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b58c2:	4b93      	ldr	r3, [pc, #588]	; (b5b10 <_GLOBAL__sub_I_argonName+0x280>)
   b58c4:	4650      	mov	r0, sl
   b58c6:	6819      	ldr	r1, [r3, #0]
   b58c8:	f004 fefa 	bl	ba6c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b58cc:	4b91      	ldr	r3, [pc, #580]	; (b5b14 <_GLOBAL__sub_I_argonName+0x284>)
   b58ce:	4648      	mov	r0, r9
   b58d0:	6819      	ldr	r1, [r3, #0]
   b58d2:	f004 fef5 	bl	ba6c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b58d6:	4b90      	ldr	r3, [pc, #576]	; (b5b18 <_GLOBAL__sub_I_argonName+0x288>)
   b58d8:	4890      	ldr	r0, [pc, #576]	; (b5b1c <_GLOBAL__sub_I_argonName+0x28c>)
   b58da:	6819      	ldr	r1, [r3, #0]
   b58dc:	f004 fef0 	bl	ba6c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b58e0:	4b8f      	ldr	r3, [pc, #572]	; (b5b20 <_GLOBAL__sub_I_argonName+0x290>)
   b58e2:	4890      	ldr	r0, [pc, #576]	; (b5b24 <_GLOBAL__sub_I_argonName+0x294>)
   b58e4:	6819      	ldr	r1, [r3, #0]
   b58e6:	f004 feeb 	bl	ba6c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b58ea:	4b8f      	ldr	r3, [pc, #572]	; (b5b28 <_GLOBAL__sub_I_argonName+0x298>)
   b58ec:	488f      	ldr	r0, [pc, #572]	; (b5b2c <_GLOBAL__sub_I_argonName+0x29c>)
   b58ee:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b58f0:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b58f2:	f004 fee5 	bl	ba6c0 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b58f6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b58fa:	462e      	mov	r6, r5
   b58fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b58fe:	2710      	movs	r7, #16
   b5900:	eb0d 0c07 	add.w	ip, sp, r7
   b5904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5908:	6833      	ldr	r3, [r6, #0]
   b590a:	f8cc 3000 	str.w	r3, [ip]
   b590e:	f10b 0304 	add.w	r3, fp, #4
   b5912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5914:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5918:	f8db 3000 	ldr.w	r3, [fp]
   b591c:	4984      	ldr	r1, [pc, #528]	; (b5b30 <_GLOBAL__sub_I_argonName+0x2a0>)
   b591e:	4885      	ldr	r0, [pc, #532]	; (b5b34 <_GLOBAL__sub_I_argonName+0x2a4>)
   b5920:	463a      	mov	r2, r7
   b5922:	f7ff ff8d 	bl	b5840 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b5926:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b592a:	46ae      	mov	lr, r5
   b592c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5930:	eb0d 0c07 	add.w	ip, sp, r7
   b5934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5938:	6833      	ldr	r3, [r6, #0]
   b593a:	f8cc 3000 	str.w	r3, [ip]
   b593e:	f10a 0304 	add.w	r3, sl, #4
   b5942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5944:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5948:	f8da 3000 	ldr.w	r3, [sl]
   b594c:	497a      	ldr	r1, [pc, #488]	; (b5b38 <_GLOBAL__sub_I_argonName+0x2a8>)
   b594e:	487b      	ldr	r0, [pc, #492]	; (b5b3c <_GLOBAL__sub_I_argonName+0x2ac>)
   b5950:	463a      	mov	r2, r7
   b5952:	f7ff ff75 	bl	b5840 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b5956:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b595a:	46ae      	mov	lr, r5
   b595c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5960:	eb0d 0c07 	add.w	ip, sp, r7
   b5964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5968:	6833      	ldr	r3, [r6, #0]
   b596a:	f8cc 3000 	str.w	r3, [ip]
   b596e:	f109 0304 	add.w	r3, r9, #4
   b5972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5974:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5978:	f8d9 3000 	ldr.w	r3, [r9]
   b597c:	4970      	ldr	r1, [pc, #448]	; (b5b40 <_GLOBAL__sub_I_argonName+0x2b0>)
   b597e:	4871      	ldr	r0, [pc, #452]	; (b5b44 <_GLOBAL__sub_I_argonName+0x2b4>)
   b5980:	463a      	mov	r2, r7
   b5982:	f7ff ff5d 	bl	b5840 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b5986:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b598a:	46ae      	mov	lr, r5
   b598c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5990:	eb0d 0c07 	add.w	ip, sp, r7
   b5994:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5998:	6833      	ldr	r3, [r6, #0]
   b599a:	f8cc 3000 	str.w	r3, [ip]
   b599e:	4b5f      	ldr	r3, [pc, #380]	; (b5b1c <_GLOBAL__sub_I_argonName+0x28c>)
   b59a0:	3304      	adds	r3, #4
   b59a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b59a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b59a8:	4b5c      	ldr	r3, [pc, #368]	; (b5b1c <_GLOBAL__sub_I_argonName+0x28c>)
   b59aa:	4967      	ldr	r1, [pc, #412]	; (b5b48 <_GLOBAL__sub_I_argonName+0x2b8>)
   b59ac:	681b      	ldr	r3, [r3, #0]
   b59ae:	4867      	ldr	r0, [pc, #412]	; (b5b4c <_GLOBAL__sub_I_argonName+0x2bc>)
   b59b0:	463a      	mov	r2, r7
   b59b2:	f7ff ff45 	bl	b5840 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b59b6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b59ba:	46ae      	mov	lr, r5
   b59bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b59c0:	eb0d 0c07 	add.w	ip, sp, r7
   b59c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b59c8:	6833      	ldr	r3, [r6, #0]
   b59ca:	f8cc 3000 	str.w	r3, [ip]
   b59ce:	4b55      	ldr	r3, [pc, #340]	; (b5b24 <_GLOBAL__sub_I_argonName+0x294>)
   b59d0:	3304      	adds	r3, #4
   b59d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b59d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b59d8:	4b52      	ldr	r3, [pc, #328]	; (b5b24 <_GLOBAL__sub_I_argonName+0x294>)
   b59da:	495d      	ldr	r1, [pc, #372]	; (b5b50 <_GLOBAL__sub_I_argonName+0x2c0>)
   b59dc:	681b      	ldr	r3, [r3, #0]
   b59de:	485d      	ldr	r0, [pc, #372]	; (b5b54 <_GLOBAL__sub_I_argonName+0x2c4>)
   b59e0:	463a      	mov	r2, r7
   b59e2:	f7ff ff2d 	bl	b5840 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b59e6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b59ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59ec:	eb0d 0c07 	add.w	ip, sp, r7
   b59f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b59f4:	4d4d      	ldr	r5, [pc, #308]	; (b5b2c <_GLOBAL__sub_I_argonName+0x29c>)
   b59f6:	6833      	ldr	r3, [r6, #0]
   b59f8:	f8cc 3000 	str.w	r3, [ip]
   b59fc:	1d2b      	adds	r3, r5, #4
   b59fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a00:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b5a04:	4e54      	ldr	r6, [pc, #336]	; (b5b58 <_GLOBAL__sub_I_argonName+0x2c8>)
   b5a06:	682b      	ldr	r3, [r5, #0]
   b5a08:	4954      	ldr	r1, [pc, #336]	; (b5b5c <_GLOBAL__sub_I_argonName+0x2cc>)
   b5a0a:	4d55      	ldr	r5, [pc, #340]	; (b5b60 <_GLOBAL__sub_I_argonName+0x2d0>)
   b5a0c:	4855      	ldr	r0, [pc, #340]	; (b5b64 <_GLOBAL__sub_I_argonName+0x2d4>)
   b5a0e:	463a      	mov	r2, r7
   b5a10:	f7ff ff16 	bl	b5840 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
extern const struct transport_t transport;
/**
 * Declaring the variables.
 */
unsigned int nextTime = 0; // Next time to contact the server
HttpClient http;
   b5a14:	4854      	ldr	r0, [pc, #336]	; (b5b68 <_GLOBAL__sub_I_argonName+0x2d8>)
   b5a16:	f002 fd41 	bl	b849c <_ZN10HttpClientC1Ev>
   b5a1a:	4629      	mov	r1, r5
   b5a1c:	4630      	mov	r0, r6
   b5a1e:	f004 faae 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
   b5a22:	19f0      	adds	r0, r6, r7
   b5a24:	f006 fc46 	bl	bc2b4 <_ZN9IPAddressC1Ev>
   b5a28:	4629      	mov	r1, r5
   b5a2a:	f106 0028 	add.w	r0, r6, #40	; 0x28
   b5a2e:	f004 faa6 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
   b5a32:	4629      	mov	r1, r5
   b5a34:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   b5a38:	f004 faa1 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b5a3c:	4629      	mov	r1, r5
   b5a3e:	484b      	ldr	r0, [pc, #300]	; (b5b6c <_GLOBAL__sub_I_argonName+0x2dc>)
   b5a40:	f004 fa9d 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
uint8_t currentHour = Time.hour();
   b5a44:	f006 f85a 	bl	bbafc <_ZN9TimeClass4hourEv>
   b5a48:	4b49      	ldr	r3, [pc, #292]	; (b5b70 <_GLOBAL__sub_I_argonName+0x2e0>)
String pricestoday_Json;
   b5a4a:	4629      	mov	r1, r5
uint8_t currentHour = Time.hour();
   b5a4c:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b5a4e:	4849      	ldr	r0, [pc, #292]	; (b5b74 <_GLOBAL__sub_I_argonName+0x2e4>)
   b5a50:	f004 fa95 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b5a54:	4629      	mov	r1, r5
   b5a56:	4848      	ldr	r0, [pc, #288]	; (b5b78 <_GLOBAL__sub_I_argonName+0x2e8>)
   b5a58:	f004 fa91 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b5a5c:	4629      	mov	r1, r5
   b5a5e:	4847      	ldr	r0, [pc, #284]	; (b5b7c <_GLOBAL__sub_I_argonName+0x2ec>)
   b5a60:	f004 fa8d 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b5a64:	4629      	mov	r1, r5
   b5a66:	4846      	ldr	r0, [pc, #280]	; (b5b80 <_GLOBAL__sub_I_argonName+0x2f0>)
   b5a68:	f004 fa89 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b5a6c:	4629      	mov	r1, r5
   b5a6e:	4845      	ldr	r0, [pc, #276]	; (b5b84 <_GLOBAL__sub_I_argonName+0x2f4>)
   b5a70:	f004 fa85 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a74:	4b44      	ldr	r3, [pc, #272]	; (b5b88 <_GLOBAL__sub_I_argonName+0x2f8>)
   b5a76:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a78:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5a7a:	4b44      	ldr	r3, [pc, #272]	; (b5b8c <_GLOBAL__sub_I_argonName+0x2fc>)
   b5a7c:	4a44      	ldr	r2, [pc, #272]	; (b5b90 <_GLOBAL__sub_I_argonName+0x300>)
   b5a7e:	601a      	str	r2, [r3, #0]
   b5a80:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5a84:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a88:	ae0c      	add	r6, sp, #48	; 0x30
   b5a8a:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5a92:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5a96:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5a9a:	e882 0003 	stmia.w	r2, {r0, r1}
   b5a9e:	4a3d      	ldr	r2, [pc, #244]	; (b5b94 <_GLOBAL__sub_I_argonName+0x304>)
   b5aa0:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5aa2:	699a      	ldr	r2, [r3, #24]
   b5aa4:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b5aa6:	4a3c      	ldr	r2, [pc, #240]	; (b5b98 <_GLOBAL__sub_I_argonName+0x308>)
   b5aa8:	711c      	strb	r4, [r3, #4]
   b5aaa:	609c      	str	r4, [r3, #8]
   b5aac:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5aae:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5ab2:	4a3a      	ldr	r2, [pc, #232]	; (b5b9c <_GLOBAL__sub_I_argonName+0x30c>)
      __a = _GLIBCXX_MOVE(__b);
   b5ab4:	9410      	str	r4, [sp, #64]	; 0x40
   b5ab6:	f103 0008 	add.w	r0, r3, #8
   b5aba:	e9cd 8400 	strd	r8, r4, [sp]
   b5abe:	f003 fab9 	bl	b9034 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5ac2:	4628      	mov	r0, r5
   b5ac4:	f7ff f9b6 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
MQTT client("192.168.110.6", PORT, 512, 30, callback);
   b5ac8:	4b35      	ldr	r3, [pc, #212]	; (b5ba0 <_GLOBAL__sub_I_argonName+0x310>)
   b5aca:	9301      	str	r3, [sp, #4]
   b5acc:	231e      	movs	r3, #30
   b5ace:	f240 725b 	movw	r2, #1883	; 0x75b
   b5ad2:	9300      	str	r3, [sp, #0]
   b5ad4:	4933      	ldr	r1, [pc, #204]	; (b5ba4 <_GLOBAL__sub_I_argonName+0x314>)
   b5ad6:	9402      	str	r4, [sp, #8]
   b5ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
   b5adc:	4832      	ldr	r0, [pc, #200]	; (b5ba8 <_GLOBAL__sub_I_argonName+0x318>)
   b5ade:	f000 fc01 	bl	b62e4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
UDP udp;
   b5ae2:	4932      	ldr	r1, [pc, #200]	; (b5bac <_GLOBAL__sub_I_argonName+0x31c>)
   b5ae4:	4608      	mov	r0, r1
   b5ae6:	f004 f933 	bl	b9d50 <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b5aea:	4930      	ldr	r1, [pc, #192]	; (b5bac <_GLOBAL__sub_I_argonName+0x31c>)
   b5aec:	4830      	ldr	r0, [pc, #192]	; (b5bb0 <_GLOBAL__sub_I_argonName+0x320>)
   b5aee:	f001 fbf5 	bl	b72dc <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b5af2:	4621      	mov	r1, r4
   b5af4:	4640      	mov	r0, r8
   b5af6:	b013      	add	sp, #76	; 0x4c
   b5af8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b5afc:	f003 bc42 	b.w	b9384 <system_thread_set_state>
   b5b00:	2003d300 	.word	0x2003d300
   b5b04:	2003d288 	.word	0x2003d288
   b5b08:	2003d048 	.word	0x2003d048
   b5b0c:	2003d04c 	.word	0x2003d04c
   b5b10:	2003d014 	.word	0x2003d014
   b5b14:	2003d00c 	.word	0x2003d00c
   b5b18:	2003d010 	.word	0x2003d010
   b5b1c:	2003d2c4 	.word	0x2003d2c4
   b5b20:	2003d018 	.word	0x2003d018
   b5b24:	2003d2b0 	.word	0x2003d2b0
   b5b28:	2003d01c 	.word	0x2003d01c
   b5b2c:	2003d2ec 	.word	0x2003d2ec
   b5b30:	000bf9cb 	.word	0x000bf9cb
   b5b34:	2003d25c 	.word	0x2003d25c
   b5b38:	000bf9d4 	.word	0x000bf9d4
   b5b3c:	2003d24c 	.word	0x2003d24c
   b5b40:	000bf9e2 	.word	0x000bf9e2
   b5b44:	2003d23c 	.word	0x2003d23c
   b5b48:	000bf9ec 	.word	0x000bf9ec
   b5b4c:	2003d244 	.word	0x2003d244
   b5b50:	000bf9f9 	.word	0x000bf9f9
   b5b54:	2003d264 	.word	0x2003d264
   b5b58:	2003dc54 	.word	0x2003dc54
   b5b5c:	000bfa03 	.word	0x000bfa03
   b5b60:	000bfe42 	.word	0x000bfe42
   b5b64:	2003d26c 	.word	0x2003d26c
   b5b68:	2003d3e0 	.word	0x2003d3e0
   b5b6c:	2003dd14 	.word	0x2003dd14
   b5b70:	2003d3dc 	.word	0x2003d3dc
   b5b74:	2003dc24 	.word	0x2003dc24
   b5b78:	2003dc34 	.word	0x2003dc34
   b5b7c:	2003dc44 	.word	0x2003dc44
   b5b80:	2003e194 	.word	0x2003e194
   b5b84:	2003e1a8 	.word	0x2003e1a8
   b5b88:	000b4c05 	.word	0x000b4c05
   b5b8c:	2003e128 	.word	0x2003e128
   b5b90:	000bfc88 	.word	0x000bfc88
   b5b94:	000b4bab 	.word	0x000b4bab
   b5b98:	000b4bbf 	.word	0x000b4bbf
   b5b9c:	000b4b71 	.word	0x000b4b71
   b5ba0:	000b4aed 	.word	0x000b4aed
   b5ba4:	000bfa11 	.word	0x000bfa11
   b5ba8:	2003d370 	.word	0x2003d370
   b5bac:	2003e144 	.word	0x2003e144
   b5bb0:	2003dca0 	.word	0x2003dca0
   b5bb4:	2003d274 	.word	0x2003d274
   b5bb8:	2003d2d8 	.word	0x2003d2d8
   b5bbc:	2003d29c 	.word	0x2003d29c

000b5bc0 <_Z13get_data_httpi>:

// to get a verbose output from these actions
#define LOGGING

bool get_data_http(int day)
{
   b5bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5bc4:	b099      	sub	sp, #100	; 0x64

    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b5bc6:	497e      	ldr	r1, [pc, #504]	; (b5dc0 <_Z13get_data_httpi+0x200>)
    path_s += String::format("%d-%02d-%02d", Time.year(), Time.month(), day);
    path_s += "T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk";
    // Request path and body can be set at runtime or at setup.
    request.hostname = "api.energidataservice.dk";
   b5bc8:	4d7e      	ldr	r5, [pc, #504]	; (b5dc4 <_Z13get_data_httpi+0x204>)
{
   b5bca:	4604      	mov	r4, r0
    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b5bcc:	a810      	add	r0, sp, #64	; 0x40
   b5bce:	f004 f9d6 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
    path_s += String::format("%d-%02d-%02d", Time.year(), Time.month(), day);
   b5bd2:	f005 ffcb 	bl	bbb6c <_ZN9TimeClass4yearEv>
   b5bd6:	9003      	str	r0, [sp, #12]
   b5bd8:	f005 ffc0 	bl	bbb5c <_ZN9TimeClass5monthEv>
   b5bdc:	9a03      	ldr	r2, [sp, #12]
   b5bde:	497a      	ldr	r1, [pc, #488]	; (b5dc8 <_Z13get_data_httpi+0x208>)
   b5be0:	9400      	str	r4, [sp, #0]
   b5be2:	4603      	mov	r3, r0
   b5be4:	a814      	add	r0, sp, #80	; 0x50
   b5be6:	f004 fb1f 	bl	ba228 <_ZN6String6formatEPKcz>
   b5bea:	a914      	add	r1, sp, #80	; 0x50
   b5bec:	a810      	add	r0, sp, #64	; 0x40
   b5bee:	f004 fa73 	bl	ba0d8 <_ZN6String6concatERKS_>
   b5bf2:	a814      	add	r0, sp, #80	; 0x50
   b5bf4:	f004 f978 	bl	b9ee8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5bf8:	4974      	ldr	r1, [pc, #464]	; (b5dcc <_Z13get_data_httpi+0x20c>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b5bfa:	4c75      	ldr	r4, [pc, #468]	; (b5dd0 <_Z13get_data_httpi+0x210>)
   b5bfc:	a810      	add	r0, sp, #64	; 0x40
   b5bfe:	f004 fa79 	bl	ba0f4 <_ZN6String6concatEPKc>
    request.hostname = "api.energidataservice.dk";
   b5c02:	4974      	ldr	r1, [pc, #464]	; (b5dd4 <_Z13get_data_httpi+0x214>)
   b5c04:	4628      	mov	r0, r5
   b5c06:	f004 fa18 	bl	ba03a <_ZN6StringaSEPKc>
    request.port = 80;
   b5c0a:	2350      	movs	r3, #80	; 0x50
    request.path = path_s.c_str();
   b5c0c:	9910      	ldr	r1, [sp, #64]	; 0x40
    request.port = 80;
   b5c0e:	63ab      	str	r3, [r5, #56]	; 0x38
    request.path = path_s.c_str();
   b5c10:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b5c14:	f004 fa11 	bl	ba03a <_ZN6StringaSEPKc>
   b5c18:	4b6f      	ldr	r3, [pc, #444]	; (b5dd8 <_Z13get_data_httpi+0x218>)
   b5c1a:	9300      	str	r3, [sp, #0]
   b5c1c:	486f      	ldr	r0, [pc, #444]	; (b5ddc <_Z13get_data_httpi+0x21c>)
   b5c1e:	4b70      	ldr	r3, [pc, #448]	; (b5de0 <_Z13get_data_httpi+0x220>)
   b5c20:	4622      	mov	r2, r4
   b5c22:	4629      	mov	r1, r5
   b5c24:	f002 fc70 	bl	b8508 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    // Get request
    http.get(request, response, headers);
    // Serial.print("Application>\tResponse status: ");
    // Serial.println(response.status);
    if (response.status == 200)
   b5c28:	6823      	ldr	r3, [r4, #0]
   b5c2a:	2bc8      	cmp	r3, #200	; 0xc8
   b5c2c:	d126      	bne.n	b5c7c <_Z13get_data_httpi+0xbc>
    {
        Serial.println("success response code 200");
   b5c2e:	f006 fc03 	bl	bc438 <_Z16_fetch_usbserialv>
   b5c32:	496c      	ldr	r1, [pc, #432]	; (b5de4 <_Z13get_data_httpi+0x224>)
   b5c34:	f005 fd73 	bl	bb71e <_ZN5Print7printlnEPKc>
    {
        Serial.println("bad response");
        return false;
    }

    Serial.println(response.body);
   b5c38:	f006 fbfe 	bl	bc438 <_Z16_fetch_usbserialv>
   b5c3c:	6861      	ldr	r1, [r4, #4]
   b5c3e:	f005 fd6e 	bl	bb71e <_ZN5Print7printlnEPKc>

    JSONVar myObject = JSON.parse(response.body);
   b5c42:	1d22      	adds	r2, r4, #4
   b5c44:	4968      	ldr	r1, [pc, #416]	; (b5de8 <_Z13get_data_httpi+0x228>)
   b5c46:	a804      	add	r0, sp, #16
   b5c48:	f002 fd8e 	bl	b8768 <_ZN9JSONClass5parseERK6String>
    if (JSON.typeof(myObject) == "undefined")
   b5c4c:	4966      	ldr	r1, [pc, #408]	; (b5de8 <_Z13get_data_httpi+0x228>)
   b5c4e:	aa04      	add	r2, sp, #16
   b5c50:	a814      	add	r0, sp, #80	; 0x50
   b5c52:	f002 fd90 	bl	b8776 <_ZN9JSONClass7typeof_ERK7JSONVar>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5c56:	4965      	ldr	r1, [pc, #404]	; (b5dec <_Z13get_data_httpi+0x22c>)
   b5c58:	a814      	add	r0, sp, #80	; 0x50
   b5c5a:	f004 fa7a 	bl	ba152 <_ZNK6String6equalsEPKc>
   b5c5e:	4604      	mov	r4, r0
   b5c60:	a814      	add	r0, sp, #80	; 0x50
   b5c62:	f004 f941 	bl	b9ee8 <_ZN6StringD1Ev>
   b5c66:	b1b4      	cbz	r4, b5c96 <_Z13get_data_httpi+0xd6>
    {
        Serial.println("Parsing input failed!");
   b5c68:	f006 fbe6 	bl	bc438 <_Z16_fetch_usbserialv>
   b5c6c:	4960      	ldr	r1, [pc, #384]	; (b5df0 <_Z13get_data_httpi+0x230>)
   b5c6e:	f005 fd56 	bl	bb71e <_ZN5Print7printlnEPKc>
            JSONVar myHour = myArray[i];

            if (JSON.typeof(myHour["SpotPriceDKK"]) == "undefined")
            {
                Serial.println("parsing failed 2");
                return false;
   b5c72:	2400      	movs	r4, #0
    JSONVar myObject = JSON.parse(response.body);
   b5c74:	a804      	add	r0, sp, #16
   b5c76:	f002 fd8d 	bl	b8794 <_ZN7JSONVarD1Ev>
   b5c7a:	e005      	b.n	b5c88 <_Z13get_data_httpi+0xc8>
        Serial.println("bad response");
   b5c7c:	f006 fbdc 	bl	bc438 <_Z16_fetch_usbserialv>
   b5c80:	495c      	ldr	r1, [pc, #368]	; (b5df4 <_Z13get_data_httpi+0x234>)
   b5c82:	f005 fd4c 	bl	bb71e <_ZN5Print7printlnEPKc>
        return false;
   b5c86:	2400      	movs	r4, #0
    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b5c88:	a810      	add	r0, sp, #64	; 0x40
   b5c8a:	f004 f92d 	bl	b9ee8 <_ZN6StringD1Ev>
            }
        }
    }
    CALCULATE = true;
    return true;
   b5c8e:	4620      	mov	r0, r4
   b5c90:	b019      	add	sp, #100	; 0x64
   b5c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (myObject.hasOwnProperty("records"))
   b5c96:	4958      	ldr	r1, [pc, #352]	; (b5df8 <_Z13get_data_httpi+0x238>)
   b5c98:	a804      	add	r0, sp, #16
   b5c9a:	f002 fdbd 	bl	b8818 <_ZNK7JSONVar14hasOwnPropertyEPKc>
   b5c9e:	2800      	cmp	r0, #0
   b5ca0:	d070      	beq.n	b5d84 <_Z13get_data_httpi+0x1c4>
        JSONVar myArray = myObject["records"];
   b5ca2:	4a55      	ldr	r2, [pc, #340]	; (b5df8 <_Z13get_data_httpi+0x238>)
   b5ca4:	a904      	add	r1, sp, #16
   b5ca6:	a807      	add	r0, sp, #28
   b5ca8:	f002 fe3c 	bl	b8924 <_ZN7JSONVarixEPKc>
        Serial.println(myArray[0]);
   b5cac:	f006 fbc4 	bl	bc438 <_Z16_fetch_usbserialv>
   b5cb0:	4622      	mov	r2, r4
   b5cb2:	4605      	mov	r5, r0
   b5cb4:	a907      	add	r1, sp, #28
   b5cb6:	a814      	add	r0, sp, #80	; 0x50
   b5cb8:	f002 fe54 	bl	b8964 <_ZN7JSONVarixEi>
   b5cbc:	a914      	add	r1, sp, #80	; 0x50
   b5cbe:	4628      	mov	r0, r5
   b5cc0:	f005 fd37 	bl	bb732 <_ZN5Print7printlnERK9Printable>
   b5cc4:	a814      	add	r0, sp, #80	; 0x50
   b5cc6:	f002 fd65 	bl	b8794 <_ZN7JSONVarD1Ev>
                    cost_tomorrow[i] += transport.medium;
   b5cca:	a737      	add	r7, pc, #220	; (adr r7, b5da8 <_Z13get_data_httpi+0x1e8>)
   b5ccc:	e9d7 6700 	ldrd	r6, r7, [r7]
                    cost_tomorrow[i] += transport.high;
   b5cd0:	f20f 09dc 	addw	r9, pc, #220	; 0xdc
   b5cd4:	e9d9 8900 	ldrd	r8, r9, [r9]
            JSONVar myHour = myArray[i];
   b5cd8:	4622      	mov	r2, r4
   b5cda:	a907      	add	r1, sp, #28
   b5cdc:	a80a      	add	r0, sp, #40	; 0x28
   b5cde:	f002 fe41 	bl	b8964 <_ZN7JSONVarixEi>
            if (JSON.typeof(myHour["SpotPriceDKK"]) == "undefined")
   b5ce2:	4a46      	ldr	r2, [pc, #280]	; (b5dfc <_Z13get_data_httpi+0x23c>)
   b5ce4:	a90a      	add	r1, sp, #40	; 0x28
   b5ce6:	a80d      	add	r0, sp, #52	; 0x34
   b5ce8:	f002 fe1c 	bl	b8924 <_ZN7JSONVarixEPKc>
   b5cec:	aa0d      	add	r2, sp, #52	; 0x34
   b5cee:	493e      	ldr	r1, [pc, #248]	; (b5de8 <_Z13get_data_httpi+0x228>)
   b5cf0:	a814      	add	r0, sp, #80	; 0x50
   b5cf2:	f002 fd40 	bl	b8776 <_ZN9JSONClass7typeof_ERK7JSONVar>
   b5cf6:	493d      	ldr	r1, [pc, #244]	; (b5dec <_Z13get_data_httpi+0x22c>)
   b5cf8:	a814      	add	r0, sp, #80	; 0x50
   b5cfa:	f004 fa2a 	bl	ba152 <_ZNK6String6equalsEPKc>
   b5cfe:	4605      	mov	r5, r0
   b5d00:	a814      	add	r0, sp, #80	; 0x50
   b5d02:	f004 f8f1 	bl	b9ee8 <_ZN6StringD1Ev>
   b5d06:	a80d      	add	r0, sp, #52	; 0x34
   b5d08:	f002 fd44 	bl	b8794 <_ZN7JSONVarD1Ev>
   b5d0c:	b15d      	cbz	r5, b5d26 <_Z13get_data_httpi+0x166>
                Serial.println("parsing failed 2");
   b5d0e:	f006 fb93 	bl	bc438 <_Z16_fetch_usbserialv>
   b5d12:	493b      	ldr	r1, [pc, #236]	; (b5e00 <_Z13get_data_httpi+0x240>)
   b5d14:	f005 fd03 	bl	bb71e <_ZN5Print7printlnEPKc>
                return false;
   b5d18:	a80a      	add	r0, sp, #40	; 0x28
   b5d1a:	f002 fd3b 	bl	b8794 <_ZN7JSONVarD1Ev>
   b5d1e:	a807      	add	r0, sp, #28
   b5d20:	f002 fd38 	bl	b8794 <_ZN7JSONVarD1Ev>
   b5d24:	e7a5      	b.n	b5c72 <_Z13get_data_httpi+0xb2>
                cost_tomorrow[i] = (double)myHour["SpotPriceDKK"]/1000.0;
   b5d26:	4a35      	ldr	r2, [pc, #212]	; (b5dfc <_Z13get_data_httpi+0x23c>)
   b5d28:	4d36      	ldr	r5, [pc, #216]	; (b5e04 <_Z13get_data_httpi+0x244>)
   b5d2a:	a90a      	add	r1, sp, #40	; 0x28
   b5d2c:	a814      	add	r0, sp, #80	; 0x50
   b5d2e:	f002 fdf9 	bl	b8924 <_ZN7JSONVarixEPKc>
   b5d32:	a814      	add	r0, sp, #80	; 0x50
   b5d34:	f002 fd5c 	bl	b87f0 <_ZNK7JSONVarcvdEv>
   b5d38:	682b      	ldr	r3, [r5, #0]
   b5d3a:	ec51 0b10 	vmov	r0, r1, d0
   b5d3e:	eb03 0ac4 	add.w	sl, r3, r4, lsl #3
   b5d42:	2200      	movs	r2, #0
   b5d44:	4b30      	ldr	r3, [pc, #192]	; (b5e08 <_Z13get_data_httpi+0x248>)
   b5d46:	f7fe fc51 	bl	b45ec <__aeabi_ddiv>
   b5d4a:	e9ca 0100 	strd	r0, r1, [sl]
   b5d4e:	a814      	add	r0, sp, #80	; 0x50
   b5d50:	f002 fd20 	bl	b8794 <_ZN7JSONVarD1Ev>
                    cost_tomorrow[i] += transport.low;
   b5d54:	682b      	ldr	r3, [r5, #0]
   b5d56:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
                if (i >= 0 && i < 7)
   b5d5a:	2c06      	cmp	r4, #6
                    cost_tomorrow[i] += transport.low;
   b5d5c:	449b      	add	fp, r3
                if (i >= 0 && i < 7)
   b5d5e:	dc15      	bgt.n	b5d8c <_Z13get_data_httpi+0x1cc>
                    cost_tomorrow[i] += transport.low;
   b5d60:	a315      	add	r3, pc, #84	; (adr r3, b5db8 <_Z13get_data_httpi+0x1f8>)
   b5d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d66:	e9db 0100 	ldrd	r0, r1, [fp]
                    cost_tomorrow[i] += transport.medium;
   b5d6a:	f7fe f95f 	bl	b402c <__adddf3>
        for (int i = 0; i < 24; i++)
   b5d6e:	3401      	adds	r4, #1
                    cost_tomorrow[i] += transport.medium;
   b5d70:	e9cb 0100 	strd	r0, r1, [fp]
            JSONVar myHour = myArray[i];
   b5d74:	a80a      	add	r0, sp, #40	; 0x28
   b5d76:	f002 fd0d 	bl	b8794 <_ZN7JSONVarD1Ev>
        for (int i = 0; i < 24; i++)
   b5d7a:	2c18      	cmp	r4, #24
   b5d7c:	d1ac      	bne.n	b5cd8 <_Z13get_data_httpi+0x118>
        JSONVar myArray = myObject["records"];
   b5d7e:	a807      	add	r0, sp, #28
   b5d80:	f002 fd08 	bl	b8794 <_ZN7JSONVarD1Ev>
    CALCULATE = true;
   b5d84:	4b21      	ldr	r3, [pc, #132]	; (b5e0c <_Z13get_data_httpi+0x24c>)
   b5d86:	2401      	movs	r4, #1
   b5d88:	701c      	strb	r4, [r3, #0]
    return true;
   b5d8a:	e773      	b.n	b5c74 <_Z13get_data_httpi+0xb4>
                else if (i > 16 && i < 22)
   b5d8c:	f1a4 0311 	sub.w	r3, r4, #17
   b5d90:	2b04      	cmp	r3, #4
                    cost_tomorrow[i] += transport.high;
   b5d92:	e9db 0100 	ldrd	r0, r1, [fp]
   b5d96:	bf99      	ittee	ls
   b5d98:	4642      	movls	r2, r8
   b5d9a:	464b      	movls	r3, r9
                    cost_tomorrow[i] += transport.medium;
   b5d9c:	4632      	movhi	r2, r6
   b5d9e:	463b      	movhi	r3, r7
   b5da0:	e7e3      	b.n	b5d6a <_Z13get_data_httpi+0x1aa>
   b5da2:	bf00      	nop
   b5da4:	f3af 8000 	nop.w
   b5da8:	42c3c9ef 	.word	0x42c3c9ef
   b5dac:	3fe469ad 	.word	0x3fe469ad
   b5db0:	2d0e5604 	.word	0x2d0e5604
   b5db4:	3ffe9db2 	.word	0x3ffe9db2
   b5db8:	ebedfa44 	.word	0xebedfa44
   b5dbc:	3fcb39c0 	.word	0x3fcb39c0
   b5dc0:	000bfa1f 	.word	0x000bfa1f
   b5dc4:	2003dc54 	.word	0x2003dc54
   b5dc8:	000bfa65 	.word	0x000bfa65
   b5dcc:	000bfa72 	.word	0x000bfa72
   b5dd0:	2003dd10 	.word	0x2003dd10
   b5dd4:	000bfac0 	.word	0x000bfac0
   b5dd8:	000bfad9 	.word	0x000bfad9
   b5ddc:	2003d3e0 	.word	0x2003d3e0
   b5de0:	2003d024 	.word	0x2003d024
   b5de4:	000bfadd 	.word	0x000bfadd
   b5de8:	2003e654 	.word	0x2003e654
   b5dec:	000bfaf7 	.word	0x000bfaf7
   b5df0:	000bfb0e 	.word	0x000bfb0e
   b5df4:	000bfb01 	.word	0x000bfb01
   b5df8:	000bfb24 	.word	0x000bfb24
   b5dfc:	000bfb2c 	.word	0x000bfb2c
   b5e00:	000bfb39 	.word	0x000bfb39
   b5e04:	2003d3d4 	.word	0x2003d3d4
   b5e08:	408f4000 	.word	0x408f4000
   b5e0c:	2003d239 	.word	0x2003d239

000b5e10 <setup>:
{
   b5e10:	b510      	push	{r4, lr}
    STARTUP = true;
   b5e12:	4b65      	ldr	r3, [pc, #404]	; (b5fa8 <setup+0x198>)
   b5e14:	2201      	movs	r2, #1
{
   b5e16:	b098      	sub	sp, #96	; 0x60
    STARTUP = true;
   b5e18:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e1a:	f003 fb4f 	bl	b94bc <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5e1e:	b910      	cbnz	r0, b5e26 <setup+0x16>
            spark_process();
   b5e20:	f003 fb44 	bl	b94ac <spark_process>
        while (_while() && !_condition()) {
   b5e24:	e7f9      	b.n	b5e1a <setup+0xa>
   b5e26:	f003 fb49 	bl	b94bc <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
   b5e2a:	2000      	movs	r0, #0
   b5e2c:	f003 fb5e 	bl	b94ec <spark_unsubscribe>
    ble_setup();
   b5e30:	f7ff f836 	bl	b4ea0 <_Z9ble_setupv>
    init_memory();
   b5e34:	f7ff fbaa 	bl	b558c <_Z11init_memoryv>
    Time.zone(1);
   b5e38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b5e3c:	f005 fd28 	bl	bb890 <_ZN9TimeClass4zoneEf>
    currentHour = Time.hour();
   b5e40:	f005 fe5c 	bl	bbafc <_ZN9TimeClass4hourEv>
   b5e44:	4b59      	ldr	r3, [pc, #356]	; (b5fac <setup+0x19c>)
    initStorage(&wh_today_Json, &wh_yesterday_Json);
   b5e46:	495a      	ldr	r1, [pc, #360]	; (b5fb0 <setup+0x1a0>)
    currentHour = Time.hour();
   b5e48:	7018      	strb	r0, [r3, #0]
    initStorage(&wh_today_Json, &wh_yesterday_Json);
   b5e4a:	485a      	ldr	r0, [pc, #360]	; (b5fb4 <setup+0x1a4>)
   b5e4c:	f002 ff20 	bl	b8c90 <_Z11initStorageP6StringS0_>
    IPAddress IP = resolver.search("homeassistant.local");
   b5e50:	4a59      	ldr	r2, [pc, #356]	; (b5fb8 <setup+0x1a8>)
   b5e52:	495a      	ldr	r1, [pc, #360]	; (b5fbc <setup+0x1ac>)
   b5e54:	a809      	add	r0, sp, #36	; 0x24
   b5e56:	f001 fb09 	bl	b746c <_ZN12mDNSResolver8Resolver6searchEPKc>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b5e5a:	a909      	add	r1, sp, #36	; 0x24
   b5e5c:	a80f      	add	r0, sp, #60	; 0x3c
   b5e5e:	f004 f9c9 	bl	ba1f4 <_ZN6StringC1ERK9Printable>
    client.setBroker(IP.toString(), PORT);
   b5e62:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b5e64:	4856      	ldr	r0, [pc, #344]	; (b5fc0 <setup+0x1b0>)
   b5e66:	f240 725b 	movw	r2, #1883	; 0x75b
   b5e6a:	f000 fb42 	bl	b64f2 <_ZN4MQTT9setBrokerEPKct>
   b5e6e:	a80f      	add	r0, sp, #60	; 0x3c
   b5e70:	f004 f83a 	bl	b9ee8 <_ZN6StringD1Ev>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5e74:	2200      	movs	r2, #0
   b5e76:	2301      	movs	r3, #1
   b5e78:	e9cd 2200 	strd	r2, r2, [sp]
   b5e7c:	4951      	ldr	r1, [pc, #324]	; (b5fc4 <setup+0x1b4>)
   b5e7e:	4852      	ldr	r0, [pc, #328]	; (b5fc8 <setup+0x1b8>)
   b5e80:	f003 fb2c 	bl	b94dc <spark_subscribe>
    Serial.printf("Return value: %d", client.connect("client_" + String(Time.now()), "mqtt", "mqtt"));
   b5e84:	f006 fad8 	bl	bc438 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b5e88:	4950      	ldr	r1, [pc, #320]	; (b5fcc <setup+0x1bc>)
   b5e8a:	4604      	mov	r4, r0
   b5e8c:	a80f      	add	r0, sp, #60	; 0x3c
   b5e8e:	f004 f876 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
   b5e92:	f005 fe22 	bl	bbada <_ZN9TimeClass3nowEv>
   b5e96:	220a      	movs	r2, #10
   b5e98:	4601      	mov	r1, r0
   b5e9a:	a805      	add	r0, sp, #20
   b5e9c:	f004 f8f2 	bl	ba084 <_ZN6StringC1Elh>
   b5ea0:	a905      	add	r1, sp, #20
   b5ea2:	a80f      	add	r0, sp, #60	; 0x3c
   b5ea4:	f004 f949 	bl	ba13a <_ZplRK15StringSumHelperRK6String>
   b5ea8:	4b49      	ldr	r3, [pc, #292]	; (b5fd0 <setup+0x1c0>)
   b5eaa:	6801      	ldr	r1, [r0, #0]
   b5eac:	4844      	ldr	r0, [pc, #272]	; (b5fc0 <setup+0x1b0>)
   b5eae:	461a      	mov	r2, r3
   b5eb0:	f000 fc16 	bl	b66e0 <_ZN4MQTT7connectEPKcS1_S1_>
   b5eb4:	4947      	ldr	r1, [pc, #284]	; (b5fd4 <setup+0x1c4>)
   b5eb6:	4602      	mov	r2, r0
   b5eb8:	4620      	mov	r0, r4
   b5eba:	f7fe ff05 	bl	b4cc8 <_ZN5Print6printfEPKcz>
   b5ebe:	a805      	add	r0, sp, #20
   b5ec0:	f004 f812 	bl	b9ee8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5ec4:	a80f      	add	r0, sp, #60	; 0x3c
   b5ec6:	f004 f80f 	bl	b9ee8 <_ZN6StringD1Ev>
    if (client.isConnected())
   b5eca:	483d      	ldr	r0, [pc, #244]	; (b5fc0 <setup+0x1b0>)
   b5ecc:	f000 fb03 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b5ed0:	b168      	cbz	r0, b5eee <setup+0xde>
        Serial.printf("Connected to MQTT broker\n");
   b5ed2:	f006 fab1 	bl	bc438 <_Z16_fetch_usbserialv>
   b5ed6:	4940      	ldr	r1, [pc, #256]	; (b5fd8 <setup+0x1c8>)
   b5ed8:	f7fe fef6 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        client.publish("power/get", "hello world");
   b5edc:	493f      	ldr	r1, [pc, #252]	; (b5fdc <setup+0x1cc>)
   b5ede:	4a40      	ldr	r2, [pc, #256]	; (b5fe0 <setup+0x1d0>)
   b5ee0:	4837      	ldr	r0, [pc, #220]	; (b5fc0 <setup+0x1b0>)
   b5ee2:	f000 fc88 	bl	b67f6 <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b5ee6:	493f      	ldr	r1, [pc, #252]	; (b5fe4 <setup+0x1d4>)
   b5ee8:	4835      	ldr	r0, [pc, #212]	; (b5fc0 <setup+0x1b0>)
   b5eea:	f000 fe28 	bl	b6b3e <_ZN4MQTT9subscribeEPKc>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b5eee:	f006 faa3 	bl	bc438 <_Z16_fetch_usbserialv>
   b5ef2:	4604      	mov	r4, r0
   b5ef4:	f005 fe02 	bl	bbafc <_ZN9TimeClass4hourEv>
   b5ef8:	9003      	str	r0, [sp, #12]
   b5efa:	f005 fe0b 	bl	bbb14 <_ZN9TimeClass6minuteEv>
   b5efe:	9a03      	ldr	r2, [sp, #12]
   b5f00:	4939      	ldr	r1, [pc, #228]	; (b5fe8 <setup+0x1d8>)
   b5f02:	4603      	mov	r3, r0
   b5f04:	4620      	mov	r0, r4
   b5f06:	f7fe fedf 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b5f0a:	2200      	movs	r2, #0
   b5f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5f10:	4836      	ldr	r0, [pc, #216]	; (b5fec <setup+0x1dc>)
   b5f12:	f7fe fe63 	bl	b4bdc <_ZN5Timer6_startEjb.isra.0>
    Serial.printlnf("RSSI=%d", (int8_t)WiFi.RSSI());
   b5f16:	f006 fa8f 	bl	bc438 <_Z16_fetch_usbserialv>
   b5f1a:	4935      	ldr	r1, [pc, #212]	; (b5ff0 <setup+0x1e0>)
   b5f1c:	4604      	mov	r4, r0
   b5f1e:	a80f      	add	r0, sp, #60	; 0x3c
   b5f20:	f006 ff0e 	bl	bcd40 <_ZN5spark9WiFiClass4RSSIEv>
   b5f24:	a80f      	add	r0, sp, #60	; 0x3c
   b5f26:	f006 fee7 	bl	bccf8 <_ZNK10WiFiSignalcvaEv>
   b5f2a:	4932      	ldr	r1, [pc, #200]	; (b5ff4 <setup+0x1e4>)
   b5f2c:	4602      	mov	r2, r0
   b5f2e:	4620      	mov	r0, r4
   b5f30:	f7fe ff72 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
    Serial.printf("Getting price data for yesterday\n");
   b5f34:	f006 fa80 	bl	bc438 <_Z16_fetch_usbserialv>
   b5f38:	492f      	ldr	r1, [pc, #188]	; (b5ff8 <setup+0x1e8>)
   b5f3a:	4c30      	ldr	r4, [pc, #192]	; (b5ffc <setup+0x1ec>)
   b5f3c:	f7fe fec4 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    get_data_http(Time.day() - 1);
   b5f40:	f005 fe00 	bl	bbb44 <_ZN9TimeClass3dayEv>
   b5f44:	3801      	subs	r0, #1
   b5f46:	f7ff fe3b 	bl	b5bc0 <_Z13get_data_httpi>
    rotate_prices();
   b5f4a:	f7ff fbaf 	bl	b56ac <_Z13rotate_pricesv>
    Serial.printf("Getting price data for today\n");
   b5f4e:	f006 fa73 	bl	bc438 <_Z16_fetch_usbserialv>
   b5f52:	492b      	ldr	r1, [pc, #172]	; (b6000 <setup+0x1f0>)
   b5f54:	f7fe feb8 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    get_data_http(Time.day());
   b5f58:	f005 fdf4 	bl	bbb44 <_ZN9TimeClass3dayEv>
   b5f5c:	f7ff fe30 	bl	b5bc0 <_Z13get_data_httpi>
    rotate_prices();
   b5f60:	f7ff fba4 	bl	b56ac <_Z13rotate_pricesv>
    if (Time.hour() >= PULL_TIME_1)
   b5f64:	f005 fdca 	bl	bbafc <_ZN9TimeClass4hourEv>
   b5f68:	280c      	cmp	r0, #12
   b5f6a:	dd13      	ble.n	b5f94 <setup+0x184>
        CALCULATE = false;
   b5f6c:	2300      	movs	r3, #0
   b5f6e:	7023      	strb	r3, [r4, #0]
        GET_DATA = true;
   b5f70:	4b24      	ldr	r3, [pc, #144]	; (b6004 <setup+0x1f4>)
   b5f72:	2201      	movs	r2, #1
   b5f74:	701a      	strb	r2, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b5f76:	2103      	movs	r1, #3
   b5f78:	2008      	movs	r0, #8
   b5f7a:	f007 f80d 	bl	bcf98 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b5f7e:	2300      	movs	r3, #0
   b5f80:	9300      	str	r3, [sp, #0]
   b5f82:	4921      	ldr	r1, [pc, #132]	; (b6008 <setup+0x1f8>)
   b5f84:	f04f 33ff 	mov.w	r3, #4294967295
   b5f88:	2201      	movs	r2, #1
   b5f8a:	2008      	movs	r0, #8
   b5f8c:	f006 fa7c 	bl	bc488 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b5f90:	b018      	add	sp, #96	; 0x60
   b5f92:	bd10      	pop	{r4, pc}
        Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b5f94:	f006 fa50 	bl	bc438 <_Z16_fetch_usbserialv>
   b5f98:	491c      	ldr	r1, [pc, #112]	; (b600c <setup+0x1fc>)
   b5f9a:	220d      	movs	r2, #13
   b5f9c:	f7fe fe94 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        CALCULATE = true;
   b5fa0:	2301      	movs	r3, #1
   b5fa2:	7023      	strb	r3, [r4, #0]
   b5fa4:	e7e7      	b.n	b5f76 <setup+0x166>
   b5fa6:	bf00      	nop
   b5fa8:	2003d258 	.word	0x2003d258
   b5fac:	2003d3dc 	.word	0x2003d3dc
   b5fb0:	2003e1a8 	.word	0x2003e1a8
   b5fb4:	2003e194 	.word	0x2003e194
   b5fb8:	000bfb4a 	.word	0x000bfb4a
   b5fbc:	2003dca0 	.word	0x2003dca0
   b5fc0:	2003d370 	.word	0x2003d370
   b5fc4:	000b4ce9 	.word	0x000b4ce9
   b5fc8:	000bfba5 	.word	0x000bfba5
   b5fcc:	000bf964 	.word	0x000bf964
   b5fd0:	000bf96c 	.word	0x000bf96c
   b5fd4:	000bfb5e 	.word	0x000bfb5e
   b5fd8:	000bfb6f 	.word	0x000bfb6f
   b5fdc:	000bfb95 	.word	0x000bfb95
   b5fe0:	000bfb89 	.word	0x000bfb89
   b5fe4:	000bfb9f 	.word	0x000bfb9f
   b5fe8:	000bfbac 	.word	0x000bfbac
   b5fec:	2003e128 	.word	0x2003e128
   b5ff0:	2003e708 	.word	0x2003e708
   b5ff4:	000bfbc6 	.word	0x000bfbc6
   b5ff8:	000bfbce 	.word	0x000bfbce
   b5ffc:	2003d239 	.word	0x2003d239
   b6000:	000bfbf0 	.word	0x000bfbf0
   b6004:	2003d254 	.word	0x2003d254
   b6008:	000b4b15 	.word	0x000b4b15
   b600c:	000bfc0e 	.word	0x000bfc0e

000b6010 <loop>:
{
   b6010:	b570      	push	{r4, r5, r6, lr}
    if (GET_DATA)
   b6012:	4c6f      	ldr	r4, [pc, #444]	; (b61d0 <loop+0x1c0>)
{
   b6014:	b0ca      	sub	sp, #296	; 0x128
    check_mqtt();
   b6016:	f7ff fb6d 	bl	b56f4 <_Z10check_mqttv>
    if (GET_DATA)
   b601a:	7823      	ldrb	r3, [r4, #0]
   b601c:	b14b      	cbz	r3, b6032 <loop+0x22>
        AWAITING_DATA = true;
   b601e:	4b6d      	ldr	r3, [pc, #436]	; (b61d4 <loop+0x1c4>)
   b6020:	2201      	movs	r2, #1
   b6022:	701a      	strb	r2, [r3, #0]
        get_data_http(Time.day() + 1);
   b6024:	f005 fd8e 	bl	bbb44 <_ZN9TimeClass3dayEv>
   b6028:	3001      	adds	r0, #1
   b602a:	f7ff fdc9 	bl	b5bc0 <_Z13get_data_httpi>
        GET_DATA = false;
   b602e:	2300      	movs	r3, #0
   b6030:	7023      	strb	r3, [r4, #0]
    if (CALCULATE)
   b6032:	4c69      	ldr	r4, [pc, #420]	; (b61d8 <loop+0x1c8>)
   b6034:	4d69      	ldr	r5, [pc, #420]	; (b61dc <loop+0x1cc>)
   b6036:	7823      	ldrb	r3, [r4, #0]
   b6038:	b333      	cbz	r3, b6088 <loop+0x78>
        update_JSON();
   b603a:	f7ff f8d7 	bl	b51ec <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b603e:	4b68      	ldr	r3, [pc, #416]	; (b61e0 <loop+0x1d0>)
   b6040:	4868      	ldr	r0, [pc, #416]	; (b61e4 <loop+0x1d4>)
   b6042:	6819      	ldr	r1, [r3, #0]
   b6044:	2218      	movs	r2, #24
   b6046:	f7fe ffcb 	bl	b4fe0 <_Z8calc_lowPA2_iPdi>
   b604a:	4b67      	ldr	r3, [pc, #412]	; (b61e8 <loop+0x1d8>)
   b604c:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b604e:	f006 f9f3 	bl	bc438 <_Z16_fetch_usbserialv>
   b6052:	4606      	mov	r6, r0
   b6054:	f005 fd52 	bl	bbafc <_ZN9TimeClass4hourEv>
   b6058:	9001      	str	r0, [sp, #4]
   b605a:	f005 fd5b 	bl	bbb14 <_ZN9TimeClass6minuteEv>
   b605e:	9a01      	ldr	r2, [sp, #4]
   b6060:	4962      	ldr	r1, [pc, #392]	; (b61ec <loop+0x1dc>)
   b6062:	4603      	mov	r3, r0
   b6064:	4630      	mov	r0, r6
   b6066:	f7fe fe2f 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b606a:	2301      	movs	r3, #1
   b606c:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b606e:	2300      	movs	r3, #0
   b6070:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b6072:	4b5d      	ldr	r3, [pc, #372]	; (b61e8 <loop+0x1d8>)
   b6074:	485b      	ldr	r0, [pc, #364]	; (b61e4 <loop+0x1d4>)
   b6076:	6819      	ldr	r1, [r3, #0]
   b6078:	f7ff fb94 	bl	b57a4 <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b607c:	4b5c      	ldr	r3, [pc, #368]	; (b61f0 <loop+0x1e0>)
   b607e:	2201      	movs	r2, #1
   b6080:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b6082:	2300      	movs	r3, #0
   b6084:	702b      	strb	r3, [r5, #0]
   b6086:	e002      	b.n	b608e <loop+0x7e>
    if (TRANSMIT_PRICE)
   b6088:	782b      	ldrb	r3, [r5, #0]
   b608a:	2b00      	cmp	r3, #0
   b608c:	d1f1      	bne.n	b6072 <loop+0x62>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b608e:	4d59      	ldr	r5, [pc, #356]	; (b61f4 <loop+0x1e4>)
   b6090:	782b      	ldrb	r3, [r5, #0]
   b6092:	2b00      	cmp	r3, #0
   b6094:	d030      	beq.n	b60f8 <loop+0xe8>
        Serial.printf("Received power/get\n");
   b6096:	f006 f9cf 	bl	bc438 <_Z16_fetch_usbserialv>
   b609a:	4957      	ldr	r1, [pc, #348]	; (b61f8 <loop+0x1e8>)
   b609c:	f7fe fe14 	bl	b4cc8 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b60a0:	4b56      	ldr	r3, [pc, #344]	; (b61fc <loop+0x1ec>)
   b60a2:	681e      	ldr	r6, [r3, #0]
   b60a4:	f005 fd2a 	bl	bbafc <_ZN9TimeClass4hourEv>
   b60a8:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(values, "%d", calc_power);
   b60ac:	4954      	ldr	r1, [pc, #336]	; (b6200 <loop+0x1f0>)
        wh_today[Time.hour()] += 1;
   b60ae:	3301      	adds	r3, #1
   b60b0:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(values, "%d", calc_power);
   b60b4:	4e53      	ldr	r6, [pc, #332]	; (b6204 <loop+0x1f4>)
   b60b6:	a802      	add	r0, sp, #8
   b60b8:	6832      	ldr	r2, [r6, #0]
   b60ba:	f003 fa47 	bl	b954c <sprintf>
        client.publish("power", values);
   b60be:	4952      	ldr	r1, [pc, #328]	; (b6208 <loop+0x1f8>)
   b60c0:	4852      	ldr	r0, [pc, #328]	; (b620c <loop+0x1fc>)
   b60c2:	aa02      	add	r2, sp, #8
   b60c4:	f000 fb97 	bl	b67f6 <_ZN4MQTT7publishEPKcS1_>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b60c8:	6832      	ldr	r2, [r6, #0]
   b60ca:	4951      	ldr	r1, [pc, #324]	; (b6210 <loop+0x200>)
   b60cc:	a80a      	add	r0, sp, #40	; 0x28
   b60ce:	f003 fa3d 	bl	b954c <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b60d2:	2300      	movs	r3, #0
   b60d4:	22ff      	movs	r2, #255	; 0xff
   b60d6:	a90a      	add	r1, sp, #40	; 0x28
   b60d8:	484e      	ldr	r0, [pc, #312]	; (b6214 <loop+0x204>)
   b60da:	f004 fb2f 	bl	ba73c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(update_Whr_Today_JSON());
   b60de:	a806      	add	r0, sp, #24
   b60e0:	f7ff f9f0 	bl	b54c4 <_Z21update_Whr_Today_JSONv>
   b60e4:	2200      	movs	r2, #0
   b60e6:	a906      	add	r1, sp, #24
   b60e8:	484b      	ldr	r0, [pc, #300]	; (b6218 <loop+0x208>)
   b60ea:	f004 fb87 	bl	ba7fc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b60ee:	a806      	add	r0, sp, #24
   b60f0:	f003 fefa 	bl	b9ee8 <_ZN6StringD1Ev>
        TRANSMIT_SENSOR = false;
   b60f4:	2300      	movs	r3, #0
   b60f6:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b60f8:	4d48      	ldr	r5, [pc, #288]	; (b621c <loop+0x20c>)
   b60fa:	782b      	ldrb	r3, [r5, #0]
   b60fc:	b12b      	cbz	r3, b610a <loop+0xfa>
        rotate_prices();
   b60fe:	f7ff fad5 	bl	b56ac <_Z13rotate_pricesv>
        ROTATE = false;
   b6102:	2300      	movs	r3, #0
   b6104:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b6106:	2301      	movs	r3, #1
   b6108:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b610a:	4c45      	ldr	r4, [pc, #276]	; (b6220 <loop+0x210>)
   b610c:	7823      	ldrb	r3, [r4, #0]
   b610e:	b19b      	cbz	r3, b6138 <loop+0x128>
        if (Time.hour() == 0)
   b6110:	f005 fcf4 	bl	bbafc <_ZN9TimeClass4hourEv>
   b6114:	2800      	cmp	r0, #0
   b6116:	d150      	bne.n	b61ba <loop+0x1aa>
            sprintf(buffer, "%d", wh_yesterday[23]);
   b6118:	4b42      	ldr	r3, [pc, #264]	; (b6224 <loop+0x214>)
   b611a:	681b      	ldr	r3, [r3, #0]
   b611c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
            sprintf(buffer, "%d", wh_today[Time.hour() - 1]);
   b611e:	4938      	ldr	r1, [pc, #224]	; (b6200 <loop+0x1f0>)
   b6120:	a80a      	add	r0, sp, #40	; 0x28
   b6122:	f003 fa13 	bl	b954c <sprintf>
        client.publish("watthour", buffer);
   b6126:	4940      	ldr	r1, [pc, #256]	; (b6228 <loop+0x218>)
   b6128:	4838      	ldr	r0, [pc, #224]	; (b620c <loop+0x1fc>)
   b612a:	aa0a      	add	r2, sp, #40	; 0x28
   b612c:	f000 fb63 	bl	b67f6 <_ZN4MQTT7publishEPKcS1_>
        hourly_JSON_update();
   b6130:	f7ff f814 	bl	b515c <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b6134:	2300      	movs	r3, #0
   b6136:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 3000))
   b6138:	4c3c      	ldr	r4, [pc, #240]	; (b622c <loop+0x21c>)
   b613a:	7825      	ldrb	r5, [r4, #0]
   b613c:	f002 fea0 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
   b6140:	4b3b      	ldr	r3, [pc, #236]	; (b6230 <loop+0x220>)
   b6142:	681b      	ldr	r3, [r3, #0]
   b6144:	1ac0      	subs	r0, r0, r3
   b6146:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b614a:	4298      	cmp	r0, r3
   b614c:	d92e      	bls.n	b61ac <loop+0x19c>
   b614e:	b36d      	cbz	r5, b61ac <loop+0x19c>
        update_JSON();
   b6150:	f7ff f84c 	bl	b51ec <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b6154:	4b2b      	ldr	r3, [pc, #172]	; (b6204 <loop+0x1f4>)
   b6156:	492e      	ldr	r1, [pc, #184]	; (b6210 <loop+0x200>)
   b6158:	681a      	ldr	r2, [r3, #0]
   b615a:	a80a      	add	r0, sp, #40	; 0x28
   b615c:	f003 f9f6 	bl	b954c <sprintf>
   b6160:	2300      	movs	r3, #0
   b6162:	22ff      	movs	r2, #255	; 0xff
   b6164:	a90a      	add	r1, sp, #40	; 0x28
   b6166:	482b      	ldr	r0, [pc, #172]	; (b6214 <loop+0x204>)
   b6168:	f004 fae8 	bl	ba73c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b616c:	4931      	ldr	r1, [pc, #196]	; (b6234 <loop+0x224>)
   b616e:	4832      	ldr	r0, [pc, #200]	; (b6238 <loop+0x228>)
   b6170:	2200      	movs	r2, #0
   b6172:	f004 fb43 	bl	ba7fc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b6176:	4931      	ldr	r1, [pc, #196]	; (b623c <loop+0x22c>)
   b6178:	4831      	ldr	r0, [pc, #196]	; (b6240 <loop+0x230>)
   b617a:	2200      	movs	r2, #0
   b617c:	f004 fb3e 	bl	ba7fc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b6180:	4930      	ldr	r1, [pc, #192]	; (b6244 <loop+0x234>)
   b6182:	4831      	ldr	r0, [pc, #196]	; (b6248 <loop+0x238>)
   b6184:	2200      	movs	r2, #0
   b6186:	f004 fb39 	bl	ba7fc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b618a:	4930      	ldr	r1, [pc, #192]	; (b624c <loop+0x23c>)
   b618c:	4830      	ldr	r0, [pc, #192]	; (b6250 <loop+0x240>)
   b618e:	2200      	movs	r2, #0
   b6190:	f004 fb34 	bl	ba7fc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b6194:	492f      	ldr	r1, [pc, #188]	; (b6254 <loop+0x244>)
   b6196:	4820      	ldr	r0, [pc, #128]	; (b6218 <loop+0x208>)
   b6198:	2200      	movs	r2, #0
   b619a:	f004 fb2f 	bl	ba7fc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b619e:	2300      	movs	r3, #0
   b61a0:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b61a2:	f006 f949 	bl	bc438 <_Z16_fetch_usbserialv>
   b61a6:	492c      	ldr	r1, [pc, #176]	; (b6258 <loop+0x248>)
   b61a8:	f7fe fd8e 	bl	b4cc8 <_ZN5Print6printfEPKcz>
    delay(1000);
   b61ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b61b0:	b04a      	add	sp, #296	; 0x128
   b61b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
   b61b6:	f005 bcef 	b.w	bbb98 <delay>
            sprintf(buffer, "%d", wh_today[Time.hour() - 1]);
   b61ba:	4b10      	ldr	r3, [pc, #64]	; (b61fc <loop+0x1ec>)
   b61bc:	681d      	ldr	r5, [r3, #0]
   b61be:	f005 fc9d 	bl	bbafc <_ZN9TimeClass4hourEv>
   b61c2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   b61c6:	3801      	subs	r0, #1
   b61c8:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   b61cc:	e7a7      	b.n	b611e <loop+0x10e>
   b61ce:	bf00      	nop
   b61d0:	2003d254 	.word	0x2003d254
   b61d4:	2003d238 	.word	0x2003d238
   b61d8:	2003d239 	.word	0x2003d239
   b61dc:	2003d259 	.word	0x2003d259
   b61e0:	2003d3d0 	.word	0x2003d3d0
   b61e4:	2003d308 	.word	0x2003d308
   b61e8:	2003d368 	.word	0x2003d368
   b61ec:	000bfbac 	.word	0x000bfbac
   b61f0:	2003d257 	.word	0x2003d257
   b61f4:	2003d25a 	.word	0x2003d25a
   b61f8:	000bfc3f 	.word	0x000bfc3f
   b61fc:	2003e190 	.word	0x2003e190
   b6200:	000bff70 	.word	0x000bff70
   b6204:	2003d36c 	.word	0x2003d36c
   b6208:	000bfc53 	.word	0x000bfc53
   b620c:	2003d370 	.word	0x2003d370
   b6210:	000bfc59 	.word	0x000bfc59
   b6214:	2003d25c 	.word	0x2003d25c
   b6218:	2003d264 	.word	0x2003d264
   b621c:	2003d256 	.word	0x2003d256
   b6220:	2003d25b 	.word	0x2003d25b
   b6224:	2003e1a4 	.word	0x2003e1a4
   b6228:	000bfc65 	.word	0x000bfc65
   b622c:	2003d255 	.word	0x2003d255
   b6230:	2003dc20 	.word	0x2003dc20
   b6234:	2003dc44 	.word	0x2003dc44
   b6238:	2003d24c 	.word	0x2003d24c
   b623c:	2003dc24 	.word	0x2003dc24
   b6240:	2003d23c 	.word	0x2003d23c
   b6244:	2003dc34 	.word	0x2003dc34
   b6248:	2003d244 	.word	0x2003d244
   b624c:	2003e1a8 	.word	0x2003e1a8
   b6250:	2003d26c 	.word	0x2003d26c
   b6254:	2003e194 	.word	0x2003e194
   b6258:	000bfc6e 	.word	0x000bfc6e

000b625c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b625c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b6260:	b510      	push	{r4, lr}
   b6262:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b6264:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b6266:	b113      	cbz	r3, b626e <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b6268:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b626a:	f002 ff0b 	bl	b9084 <os_mutex_lock>
#endif
#endif
#endif
        }
   b626e:	4620      	mov	r0, r4
   b6270:	bd10      	pop	{r4, pc}

000b6272 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b6272:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b6274:	6803      	ldr	r3, [r0, #0]
   b6276:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b627a:	4604      	mov	r4, r0
            if (mqtt->thread)
   b627c:	b112      	cbz	r2, b6284 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b627e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b6280:	f002 ff08 	bl	b9094 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b6284:	4620      	mov	r0, r4
   b6286:	bd10      	pop	{r4, pc}

000b6288 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b6288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b628a:	461f      	mov	r7, r3
   b628c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6290:	4604      	mov	r4, r0
   b6292:	460d      	mov	r5, r1
   b6294:	4616      	mov	r6, r2
    if (thread) {
   b6296:	b12b      	cbz	r3, b62a4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b6298:	2301      	movs	r3, #1
   b629a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b629e:	3058      	adds	r0, #88	; 0x58
   b62a0:	f002 fee8 	bl	b9074 <os_mutex_create>
    }
    this->callback = callback;
   b62a4:	9b08      	ldr	r3, [sp, #32]
   b62a6:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b62a8:	2300      	movs	r3, #0
   b62aa:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b62ac:	b106      	cbz	r6, b62b0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b62ae:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b62b0:	b125      	cbz	r5, b62bc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b62b2:	4629      	mov	r1, r5
   b62b4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b62b8:	f003 febf 	bl	ba03a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b62bc:	9b06      	ldr	r3, [sp, #24]
   b62be:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b62c0:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b62c2:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b62c4:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b62c8:	2bff      	cmp	r3, #255	; 0xff
   b62ca:	bfb8      	it	lt
   b62cc:	23ff      	movlt	r3, #255	; 0xff
   b62ce:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b62d2:	b108      	cbz	r0, b62d8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b62d4:	f7fe fbfd 	bl	b4ad2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b62d8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b62dc:	f7fe fbf7 	bl	b4ace <_Znaj>
   b62e0:	61e0      	str	r0, [r4, #28]
}
   b62e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b62e4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b62e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b62e8:	4604      	mov	r4, r0
            bool thread) {
   b62ea:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b62ec:	4617      	mov	r7, r2
   b62ee:	4698      	mov	r8, r3
   b62f0:	460e      	mov	r6, r1
            bool thread) {
   b62f2:	f006 fc4f 	bl	bcb94 <_ZN9TCPClientC1Ev>
   b62f6:	490d      	ldr	r1, [pc, #52]	; (b632c <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b62f8:	61e5      	str	r5, [r4, #28]
   b62fa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b62fe:	f003 fe3e 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b6302:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b6306:	9303      	str	r3, [sp, #12]
   b6308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b630a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b630c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b6310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6312:	9300      	str	r3, [sp, #0]
   b6314:	4620      	mov	r0, r4
            bool thread) {
   b6316:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b631a:	463b      	mov	r3, r7
   b631c:	462a      	mov	r2, r5
   b631e:	4631      	mov	r1, r6
   b6320:	f7ff ffb2 	bl	b6288 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b6324:	4620      	mov	r0, r4
   b6326:	b004      	add	sp, #16
   b6328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b632c:	000bfe42 	.word	0x000bfe42

000b6330 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b6330:	b510      	push	{r4, lr}
   b6332:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b6334:	4620      	mov	r0, r4
   b6336:	f006 fb89 	bl	bca4c <_ZN9TCPClient9availableEv>
   b633a:	2800      	cmp	r0, #0
   b633c:	d0fa      	beq.n	b6334 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b633e:	4620      	mov	r0, r4
   b6340:	f006 f992 	bl	bc668 <_ZN9TCPClient4readEv>
}
   b6344:	b2c0      	uxtb	r0, r0
   b6346:	bd10      	pop	{r4, pc}

000b6348 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b6348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b634c:	4605      	mov	r5, r0
   b634e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b6350:	f7ff ffee 	bl	b6330 <_ZN4MQTT8readByteEv>
   b6354:	69eb      	ldr	r3, [r5, #28]
   b6356:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b6358:	69eb      	ldr	r3, [r5, #28]
   b635a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b635e:	f04f 0901 	mov.w	r9, #1
   b6362:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b6366:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b6368:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b636a:	4628      	mov	r0, r5
   b636c:	f7ff ffe0 	bl	b6330 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b6370:	4626      	mov	r6, r4
   b6372:	69eb      	ldr	r3, [r5, #28]
   b6374:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b6376:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b637a:	fb13 f309 	smulbb	r3, r3, r9
   b637e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b6380:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b6382:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b6384:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b6386:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b6388:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b638c:	d4ed      	bmi.n	b636a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b638e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b6390:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b6394:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6398:	d11e      	bne.n	b63d8 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b639a:	4628      	mov	r0, r5
   b639c:	f7ff ffc8 	bl	b6330 <_ZN4MQTT8readByteEv>
   b63a0:	69eb      	ldr	r3, [r5, #28]
   b63a2:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b63a4:	4628      	mov	r0, r5
   b63a6:	f7ff ffc3 	bl	b6330 <_ZN4MQTT8readByteEv>
   b63aa:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b63ac:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b63ae:	b2b6      	uxth	r6, r6
   b63b0:	69eb      	ldr	r3, [r5, #28]
   b63b2:	b2a4      	uxth	r4, r4
   b63b4:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b63b6:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b63b8:	b2b6      	uxth	r6, r6
   b63ba:	42be      	cmp	r6, r7
   b63bc:	d20e      	bcs.n	b63dc <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b63be:	4628      	mov	r0, r5
   b63c0:	f7ff ffb6 	bl	b6330 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b63c4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b63c8:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b63ca:	bf84      	itt	hi
   b63cc:	69eb      	ldrhi	r3, [r5, #28]
   b63ce:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b63d0:	3401      	adds	r4, #1
   b63d2:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b63d4:	3601      	adds	r6, #1
   b63d6:	e7ef      	b.n	b63b8 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b63d8:	2600      	movs	r6, #0
   b63da:	e7ed      	b.n	b63b8 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b63dc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b63e0:	42a3      	cmp	r3, r4
   b63e2:	bf2c      	ite	cs
   b63e4:	4620      	movcs	r0, r4
   b63e6:	2000      	movcc	r0, #0
   b63e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b63ec <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b63ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b63f0:	4615      	mov	r5, r2
   b63f2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b63f4:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b63f6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b63f8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b63fa:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b63fc:	a802      	add	r0, sp, #8
        digit = len % 128;
   b63fe:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b6402:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b6406:	f103 0401 	add.w	r4, r3, #1
   b640a:	4403      	add	r3, r0
            digit |= 0x80;
   b640c:	bf88      	it	hi
   b640e:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b6412:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b6416:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b641a:	b2e4      	uxtb	r4, r4
   b641c:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6420:	d81e      	bhi.n	b6460 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b6422:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b6426:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b642a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b642c:	4622      	mov	r2, r4
   b642e:	a901      	add	r1, sp, #4
   b6430:	4428      	add	r0, r5
    buf[4-llen] = header;
   b6432:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b6436:	f006 ffae 	bl	bd396 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b643a:	1c72      	adds	r2, r6, #1
   b643c:	4422      	add	r2, r4
   b643e:	4641      	mov	r1, r8
   b6440:	4638      	mov	r0, r7
   b6442:	f006 f8fc 	bl	bc63e <_ZN9TCPClient5writeEPKhj>
   b6446:	4605      	mov	r5, r0
   b6448:	f002 fd1a 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b644c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b644e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b6450:	4432      	add	r2, r6
   b6452:	b2a8      	uxth	r0, r5
}
   b6454:	1a13      	subs	r3, r2, r0
   b6456:	4258      	negs	r0, r3
   b6458:	4158      	adcs	r0, r3
   b645a:	b002      	add	sp, #8
   b645c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b6460:	4623      	mov	r3, r4
   b6462:	e7ca      	b.n	b63fa <_ZN4MQTT5writeEhPht+0xe>

000b6464 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b6464:	b513      	push	{r0, r1, r4, lr}
   b6466:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b6468:	4601      	mov	r1, r0
   b646a:	a801      	add	r0, sp, #4
   b646c:	f7ff fef6 	bl	b625c <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b6470:	69e3      	ldr	r3, [r4, #28]
   b6472:	22e0      	movs	r2, #224	; 0xe0
   b6474:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b6476:	69e3      	ldr	r3, [r4, #28]
   b6478:	2200      	movs	r2, #0
   b647a:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b647c:	69e1      	ldr	r1, [r4, #28]
   b647e:	2202      	movs	r2, #2
   b6480:	4620      	mov	r0, r4
   b6482:	f006 f8dc 	bl	bc63e <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b6486:	4620      	mov	r0, r4
   b6488:	f006 fb3a 	bl	bcb00 <_ZN9TCPClient4stopEv>
   b648c:	f002 fcf8 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b6490:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b6494:	a801      	add	r0, sp, #4
   b6496:	f7ff feec 	bl	b6272 <_ZN4MQTT11MutexLockerD1Ev>
}
   b649a:	b002      	add	sp, #8
   b649c:	bd10      	pop	{r4, pc}

000b649e <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b649e:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b64a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b64a2:	4605      	mov	r5, r0
    pos += 2;
   b64a4:	b298      	uxth	r0, r3
   b64a6:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b64a8:	5cce      	ldrb	r6, [r1, r3]
   b64aa:	b29c      	uxth	r4, r3
   b64ac:	b156      	cbz	r6, b64c4 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b64ae:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b64b2:	4584      	cmp	ip, r0
   b64b4:	f103 0701 	add.w	r7, r3, #1
   b64b8:	d904      	bls.n	b64c4 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b64ba:	1c44      	adds	r4, r0, #1
   b64bc:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b64be:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b64c0:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b64c2:	e7f1      	b.n	b64a8 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b64c4:	b299      	uxth	r1, r3
   b64c6:	1a41      	subs	r1, r0, r1
   b64c8:	440a      	add	r2, r1
   b64ca:	0a21      	lsrs	r1, r4, #8
   b64cc:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b64d0:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b64d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b64d6 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b64d6:	b538      	push	{r3, r4, r5, lr}
   b64d8:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b64da:	f006 f9d9 	bl	bc890 <_ZN9TCPClient9connectedEv>
   b64de:	2800      	cmp	r0, #0
   b64e0:	bf14      	ite	ne
   b64e2:	2501      	movne	r5, #1
   b64e4:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b64e6:	d102      	bne.n	b64ee <_ZN4MQTT11isConnectedEv+0x18>
   b64e8:	4620      	mov	r0, r4
   b64ea:	f006 fb09 	bl	bcb00 <_ZN9TCPClient4stopEv>
    return rc;
}
   b64ee:	4628      	mov	r0, r5
   b64f0:	bd38      	pop	{r3, r4, r5, pc}

000b64f2 <_ZN4MQTT9setBrokerEPKct>:
void MQTT::setBroker(const char* domain, uint16_t port) {
   b64f2:	b570      	push	{r4, r5, r6, lr}
   b64f4:	4604      	mov	r4, r0
   b64f6:	460e      	mov	r6, r1
   b64f8:	4615      	mov	r5, r2
    if(isConnected()) {
   b64fa:	f7ff ffec 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b64fe:	b110      	cbz	r0, b6506 <_ZN4MQTT9setBrokerEPKct+0x14>
        disconnect();
   b6500:	4620      	mov	r0, r4
   b6502:	f7ff ffaf 	bl	b6464 <_ZN4MQTT10disconnectEv>
    this->domain = domain;
   b6506:	4631      	mov	r1, r6
   b6508:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b650c:	f003 fd95 	bl	ba03a <_ZN6StringaSEPKc>
    this->ip = NULL;
   b6510:	2300      	movs	r3, #0
   b6512:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   b6514:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
}
   b6518:	bd70      	pop	{r4, r5, r6, pc}
	...

000b651c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6520:	b088      	sub	sp, #32
   b6522:	4604      	mov	r4, r0
   b6524:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b6528:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b652c:	4689      	mov	r9, r1
   b652e:	4617      	mov	r7, r2
   b6530:	461e      	mov	r6, r3
    if (!isConnected()) {
   b6532:	f7ff ffd0 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b6536:	4605      	mov	r5, r0
   b6538:	2800      	cmp	r0, #0
   b653a:	f040 80cd 	bne.w	b66d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b653e:	4621      	mov	r1, r4
   b6540:	a801      	add	r0, sp, #4
   b6542:	f7ff fe8b 	bl	b625c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b6546:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6548:	2900      	cmp	r1, #0
   b654a:	f040 8088 	bne.w	b665e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b654e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6552:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6554:	462b      	mov	r3, r5
   b6556:	4620      	mov	r0, r4
   b6558:	f006 f91c 	bl	bc794 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b655c:	2800      	cmp	r0, #0
   b655e:	d07a      	beq.n	b6656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b6560:	2301      	movs	r3, #1
   b6562:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6564:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6568:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b656a:	2b04      	cmp	r3, #4
   b656c:	4b5b      	ldr	r3, [pc, #364]	; (b66dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b656e:	f040 8081 	bne.w	b6674 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b6572:	6818      	ldr	r0, [r3, #0]
   b6574:	8899      	ldrh	r1, [r3, #4]
   b6576:	799b      	ldrb	r3, [r3, #6]
   b6578:	f8ad 100c 	strh.w	r1, [sp, #12]
   b657c:	f88d 300e 	strb.w	r3, [sp, #14]
   b6580:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6582:	f8c2 0005 	str.w	r0, [r2, #5]
   b6586:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b658a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b658e:	f8a2 1009 	strh.w	r1, [r2, #9]
   b6592:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b6594:	230c      	movs	r3, #12
            if (willTopic) {
   b6596:	f1b8 0f00 	cmp.w	r8, #0
   b659a:	f000 8081 	beq.w	b66a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b659e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b65a2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b65a6:	0140      	lsls	r0, r0, #5
   b65a8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b65ac:	f040 0006 	orr.w	r0, r0, #6
   b65b0:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b65b2:	f1ba 0f00 	cmp.w	sl, #0
   b65b6:	d101      	bne.n	b65bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b65b8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b65bc:	b11f      	cbz	r7, b65c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b65be:	2e00      	cmp	r6, #0
   b65c0:	d170      	bne.n	b66a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b65c2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b65c6:	69e2      	ldr	r2, [r4, #28]
   b65c8:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b65ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b65cc:	69e1      	ldr	r1, [r4, #28]
   b65ce:	1c58      	adds	r0, r3, #1
   b65d0:	1212      	asrs	r2, r2, #8
   b65d2:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b65d4:	1c9a      	adds	r2, r3, #2
   b65d6:	69e1      	ldr	r1, [r4, #28]
   b65d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b65da:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b65dc:	3303      	adds	r3, #3
   b65de:	69e2      	ldr	r2, [r4, #28]
   b65e0:	4649      	mov	r1, r9
   b65e2:	4620      	mov	r0, r4
   b65e4:	f7ff ff5b 	bl	b649e <_ZN4MQTT11writeStringEPKcPht>
   b65e8:	4603      	mov	r3, r0
            if (willTopic) {
   b65ea:	f1b8 0f00 	cmp.w	r8, #0
   b65ee:	d00b      	beq.n	b6608 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b65f0:	69e2      	ldr	r2, [r4, #28]
   b65f2:	4641      	mov	r1, r8
   b65f4:	4620      	mov	r0, r4
   b65f6:	f7ff ff52 	bl	b649e <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b65fa:	69e2      	ldr	r2, [r4, #28]
   b65fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b65fe:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b6600:	4620      	mov	r0, r4
   b6602:	f7ff ff4c 	bl	b649e <_ZN4MQTT11writeStringEPKcPht>
   b6606:	4603      	mov	r3, r0
            if(user != NULL) {
   b6608:	b167      	cbz	r7, b6624 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b660a:	69e2      	ldr	r2, [r4, #28]
   b660c:	4639      	mov	r1, r7
   b660e:	4620      	mov	r0, r4
   b6610:	f7ff ff45 	bl	b649e <_ZN4MQTT11writeStringEPKcPht>
   b6614:	4603      	mov	r3, r0
                if(pass != NULL) {
   b6616:	b12e      	cbz	r6, b6624 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b6618:	69e2      	ldr	r2, [r4, #28]
   b661a:	4631      	mov	r1, r6
   b661c:	4620      	mov	r0, r4
   b661e:	f7ff ff3e 	bl	b649e <_ZN4MQTT11writeStringEPKcPht>
   b6622:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6624:	3b05      	subs	r3, #5
   b6626:	69e2      	ldr	r2, [r4, #28]
   b6628:	b29b      	uxth	r3, r3
   b662a:	2110      	movs	r1, #16
   b662c:	4620      	mov	r0, r4
   b662e:	f7ff fedd 	bl	b63ec <_ZN4MQTT5writeEhPht>
   b6632:	f002 fc25 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b6636:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b663a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b663e:	4620      	mov	r0, r4
   b6640:	f006 fa04 	bl	bca4c <_ZN9TCPClient9availableEv>
   b6644:	bb88      	cbnz	r0, b66aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b6646:	f002 fc1b 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b664a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b664c:	1ac0      	subs	r0, r0, r3
   b664e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6650:	4373      	muls	r3, r6
   b6652:	4298      	cmp	r0, r3
   b6654:	d9f3      	bls.n	b663e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b6656:	4620      	mov	r0, r4
   b6658:	f006 fa52 	bl	bcb00 <_ZN9TCPClient4stopEv>
   b665c:	e035      	b.n	b66ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b665e:	a802      	add	r0, sp, #8
   b6660:	f005 fe80 	bl	bc364 <_ZN9IPAddressC1EPKh>
   b6664:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6668:	462b      	mov	r3, r5
   b666a:	a902      	add	r1, sp, #8
   b666c:	4620      	mov	r0, r4
   b666e:	f006 f971 	bl	bc954 <_ZN9TCPClient7connectE9IPAddresstm>
    virtual ~IPAddress() {}
   b6672:	e773      	b.n	b655c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6674:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b6678:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b667c:	7bdb      	ldrb	r3, [r3, #15]
   b667e:	f10d 0c08 	add.w	ip, sp, #8
   b6682:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6686:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b668a:	ab02      	add	r3, sp, #8
   b668c:	cb03      	ldmia	r3!, {r0, r1}
   b668e:	f8c2 0005 	str.w	r0, [r2, #5]
   b6692:	f8c2 1009 	str.w	r1, [r2, #9]
   b6696:	f89c 3000 	ldrb.w	r3, [ip]
   b669a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b669c:	230e      	movs	r3, #14
   b669e:	e77a      	b.n	b6596 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b66a0:	2002      	movs	r0, #2
   b66a2:	e786      	b.n	b65b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b66a4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b66a8:	e78d      	b.n	b65c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b66aa:	a902      	add	r1, sp, #8
   b66ac:	4620      	mov	r0, r4
   b66ae:	f7ff fe4b 	bl	b6348 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b66b2:	2804      	cmp	r0, #4
   b66b4:	d1cf      	bne.n	b6656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b66b6:	69e3      	ldr	r3, [r4, #28]
   b66b8:	78de      	ldrb	r6, [r3, #3]
   b66ba:	2e00      	cmp	r6, #0
   b66bc:	d1cb      	bne.n	b6656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b66be:	f002 fbdf 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b66c2:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b66c4:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b66c6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b66ca:	a801      	add	r0, sp, #4
   b66cc:	f7ff fdd1 	bl	b6272 <_ZN4MQTT11MutexLockerD1Ev>
}
   b66d0:	4628      	mov	r0, r5
   b66d2:	b008      	add	sp, #32
   b66d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b66d8:	2500      	movs	r5, #0
   b66da:	e7f9      	b.n	b66d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b66dc:	000bf63c 	.word	0x000bf63c

000b66e0 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b66e0:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b66e2:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b66e6:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b66e8:	2401      	movs	r4, #1
   b66ea:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b66ee:	2400      	movs	r4, #0
   b66f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b66f4:	e9cd 4400 	strd	r4, r4, [sp]
   b66f8:	f7ff ff10 	bl	b651c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b66fc:	b006      	add	sp, #24
   b66fe:	bd10      	pop	{r4, pc}

000b6700 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6704:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b6708:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b670c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b6710:	4604      	mov	r4, r0
   b6712:	468b      	mov	fp, r1
   b6714:	4616      	mov	r6, r2
   b6716:	461f      	mov	r7, r3
    if (isConnected()) {
   b6718:	f7ff fedd 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b671c:	4682      	mov	sl, r0
   b671e:	2800      	cmp	r0, #0
   b6720:	d051      	beq.n	b67c6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b6722:	4621      	mov	r1, r4
   b6724:	a801      	add	r0, sp, #4
   b6726:	f7ff fd99 	bl	b625c <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b672a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b672e:	69e0      	ldr	r0, [r4, #28]
   b6730:	2100      	movs	r1, #0
   b6732:	f006 fe58 	bl	bd3e6 <memset>
        length = writeString(topic, buffer, length);
   b6736:	2305      	movs	r3, #5
   b6738:	69e2      	ldr	r2, [r4, #28]
   b673a:	4659      	mov	r1, fp
   b673c:	4620      	mov	r0, r4
   b673e:	f7ff feae 	bl	b649e <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b6742:	1e6b      	subs	r3, r5, #1
   b6744:	2b01      	cmp	r3, #1
   b6746:	d815      	bhi.n	b6774 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b6748:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b674a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b674c:	3101      	adds	r1, #1
   b674e:	b289      	uxth	r1, r1
   b6750:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6752:	0a09      	lsrs	r1, r1, #8
   b6754:	5419      	strb	r1, [r3, r0]
   b6756:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b6758:	69e3      	ldr	r3, [r4, #28]
   b675a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b675c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b675e:	3002      	adds	r0, #2
   b6760:	5499      	strb	r1, [r3, r2]
   b6762:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6764:	f1b8 0f00 	cmp.w	r8, #0
   b6768:	d004      	beq.n	b6774 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b676a:	8c23      	ldrh	r3, [r4, #32]
   b676c:	1c5a      	adds	r2, r3, #1
   b676e:	8422      	strh	r2, [r4, #32]
   b6770:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6774:	2100      	movs	r1, #0
   b6776:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6778:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b677a:	69e2      	ldr	r2, [r4, #28]
   b677c:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b677e:	d90a      	bls.n	b6796 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6780:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6784:	459c      	cmp	ip, r3
   b6786:	d906      	bls.n	b6796 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b6788:	f816 c001 	ldrb.w	ip, [r6, r1]
   b678c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6790:	3101      	adds	r1, #1
   b6792:	b289      	uxth	r1, r1
   b6794:	e7ef      	b.n	b6776 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b6796:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b679a:	2900      	cmp	r1, #0
   b679c:	bf0c      	ite	eq
   b679e:	2130      	moveq	r1, #48	; 0x30
   b67a0:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b67a2:	f1b9 0f00 	cmp.w	r9, #0
   b67a6:	d001      	beq.n	b67ac <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b67a8:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b67ac:	2d02      	cmp	r5, #2
   b67ae:	d10e      	bne.n	b67ce <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b67b0:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b67b4:	3b05      	subs	r3, #5
   b67b6:	b29b      	uxth	r3, r3
   b67b8:	4620      	mov	r0, r4
   b67ba:	f7ff fe17 	bl	b63ec <_ZN4MQTT5writeEhPht>
   b67be:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b67c0:	a801      	add	r0, sp, #4
   b67c2:	f7ff fd56 	bl	b6272 <_ZN4MQTT11MutexLockerD1Ev>
}
   b67c6:	4650      	mov	r0, sl
   b67c8:	b003      	add	sp, #12
   b67ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b67ce:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b67d0:	bf08      	it	eq
   b67d2:	f041 0102 	orreq.w	r1, r1, #2
   b67d6:	e7ed      	b.n	b67b4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b67d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b67d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b67da:	9c08      	ldr	r4, [sp, #32]
   b67dc:	9403      	str	r4, [sp, #12]
   b67de:	2400      	movs	r4, #0
   b67e0:	9402      	str	r4, [sp, #8]
   b67e2:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b67e6:	9401      	str	r4, [sp, #4]
   b67e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b67ec:	9400      	str	r4, [sp, #0]
   b67ee:	f7ff ff87 	bl	b6700 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b67f2:	b004      	add	sp, #16
   b67f4:	bd10      	pop	{r4, pc}

000b67f6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b67f6:	b530      	push	{r4, r5, lr}
   b67f8:	b087      	sub	sp, #28
   b67fa:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b67fc:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b67fe:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6800:	9204      	str	r2, [sp, #16]
   b6802:	f7fe f907 	bl	b4a14 <strlen>
   b6806:	2500      	movs	r5, #0
   b6808:	4603      	mov	r3, r0
   b680a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b680e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6812:	9500      	str	r5, [sp, #0]
   b6814:	4620      	mov	r0, r4
   b6816:	f7ff ffdf 	bl	b67d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b681a:	b007      	add	sp, #28
   b681c:	bd30      	pop	{r4, r5, pc}

000b681e <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b681e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6820:	4604      	mov	r4, r0
   b6822:	460e      	mov	r6, r1
    if (isConnected()) {
   b6824:	f7ff fe57 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b6828:	4605      	mov	r5, r0
   b682a:	b1c8      	cbz	r0, b6860 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b682c:	4621      	mov	r1, r4
   b682e:	a801      	add	r0, sp, #4
   b6830:	f7ff fd14 	bl	b625c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b6834:	69e3      	ldr	r3, [r4, #28]
   b6836:	2262      	movs	r2, #98	; 0x62
   b6838:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b683a:	69e3      	ldr	r3, [r4, #28]
   b683c:	2202      	movs	r2, #2
   b683e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6840:	69e3      	ldr	r3, [r4, #28]
   b6842:	0a32      	lsrs	r2, r6, #8
   b6844:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6846:	69e3      	ldr	r3, [r4, #28]
   b6848:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b684a:	69e1      	ldr	r1, [r4, #28]
   b684c:	2204      	movs	r2, #4
   b684e:	4620      	mov	r0, r4
   b6850:	f005 fef5 	bl	bc63e <_ZN9TCPClient5writeEPKhj>
   b6854:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6856:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6858:	bf18      	it	ne
   b685a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b685c:	f7ff fd09 	bl	b6272 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6860:	4628      	mov	r0, r5
   b6862:	b002      	add	sp, #8
   b6864:	bd70      	pop	{r4, r5, r6, pc}

000b6866 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b6866:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6868:	4604      	mov	r4, r0
   b686a:	460e      	mov	r6, r1
    if (isConnected()) {
   b686c:	f7ff fe33 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b6870:	4605      	mov	r5, r0
   b6872:	b1c8      	cbz	r0, b68a8 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b6874:	4621      	mov	r1, r4
   b6876:	a801      	add	r0, sp, #4
   b6878:	f7ff fcf0 	bl	b625c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b687c:	69e3      	ldr	r3, [r4, #28]
   b687e:	2272      	movs	r2, #114	; 0x72
   b6880:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6882:	69e3      	ldr	r3, [r4, #28]
   b6884:	2202      	movs	r2, #2
   b6886:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6888:	69e3      	ldr	r3, [r4, #28]
   b688a:	0a32      	lsrs	r2, r6, #8
   b688c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b688e:	69e3      	ldr	r3, [r4, #28]
   b6890:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6892:	69e1      	ldr	r1, [r4, #28]
   b6894:	2204      	movs	r2, #4
   b6896:	4620      	mov	r0, r4
   b6898:	f005 fed1 	bl	bc63e <_ZN9TCPClient5writeEPKhj>
   b689c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b689e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b68a0:	bf18      	it	ne
   b68a2:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b68a4:	f7ff fce5 	bl	b6272 <_ZN4MQTT11MutexLockerD1Ev>
}
   b68a8:	4628      	mov	r0, r5
   b68aa:	b002      	add	sp, #8
   b68ac:	bd70      	pop	{r4, r5, r6, pc}

000b68ae <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b68ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68b2:	ed2d 8b02 	vpush	{d8}
   b68b6:	b087      	sub	sp, #28
   b68b8:	af00      	add	r7, sp, #0
   b68ba:	4604      	mov	r4, r0
    if (isConnected()) {
   b68bc:	f7ff fe0b 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b68c0:	4681      	mov	r9, r0
   b68c2:	b1f8      	cbz	r0, b6904 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b68c4:	4621      	mov	r1, r4
   b68c6:	f107 0014 	add.w	r0, r7, #20
   b68ca:	f7ff fcc7 	bl	b625c <_ZN4MQTT11MutexLockerC1EPS_>
   b68ce:	f002 fad7 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b68d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b68d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b68d8:	4353      	muls	r3, r2
   b68da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b68dc:	1a82      	subs	r2, r0, r2
   b68de:	429a      	cmp	r2, r3
   b68e0:	4606      	mov	r6, r0
   b68e2:	d803      	bhi.n	b68ec <_ZN4MQTT4loopEv+0x3e>
   b68e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b68e6:	1a82      	subs	r2, r0, r2
   b68e8:	4293      	cmp	r3, r2
   b68ea:	d221      	bcs.n	b6930 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b68ec:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b68f0:	b17b      	cbz	r3, b6912 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b68f2:	4620      	mov	r0, r4
   b68f4:	f006 f904 	bl	bcb00 <_ZN9TCPClient4stopEv>
                return false;
   b68f8:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b68fc:	f107 0014 	add.w	r0, r7, #20
   b6900:	f7ff fcb7 	bl	b6272 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6904:	4648      	mov	r0, r9
   b6906:	371c      	adds	r7, #28
   b6908:	46bd      	mov	sp, r7
   b690a:	ecbd 8b02 	vpop	{d8}
   b690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6912:	69e2      	ldr	r2, [r4, #28]
   b6914:	21c0      	movs	r1, #192	; 0xc0
   b6916:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b6918:	69e2      	ldr	r2, [r4, #28]
   b691a:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b691c:	69e1      	ldr	r1, [r4, #28]
   b691e:	2202      	movs	r2, #2
   b6920:	4620      	mov	r0, r4
   b6922:	f005 fe8c 	bl	bc63e <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b6926:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b692a:	2301      	movs	r3, #1
   b692c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b6930:	4620      	mov	r0, r4
   b6932:	f006 f88b 	bl	bca4c <_ZN9TCPClient9availableEv>
   b6936:	2800      	cmp	r0, #0
   b6938:	d0e0      	beq.n	b68fc <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b693a:	f107 0113 	add.w	r1, r7, #19
   b693e:	4620      	mov	r0, r4
   b6940:	f7ff fd02 	bl	b6348 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b6944:	4683      	mov	fp, r0
   b6946:	2800      	cmp	r0, #0
   b6948:	d0d8      	beq.n	b68fc <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b694a:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b694c:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b694e:	7819      	ldrb	r1, [r3, #0]
   b6950:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6954:	2a30      	cmp	r2, #48	; 0x30
   b6956:	d17f      	bne.n	b6a58 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b6958:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b695c:	f1ba 0f00 	cmp.w	sl, #0
   b6960:	d0cc      	beq.n	b68fc <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6962:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b6966:	466a      	mov	r2, sp
   b6968:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b696c:	eb03 020c 	add.w	r2, r3, ip
   b6970:	7851      	ldrb	r1, [r2, #1]
   b6972:	7895      	ldrb	r5, [r2, #2]
   b6974:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b6978:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b697a:	f105 0208 	add.w	r2, r5, #8
   b697e:	4669      	mov	r1, sp
   b6980:	08d2      	lsrs	r2, r2, #3
   b6982:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b6986:	4695      	mov	sp, r2
   b6988:	f10c 0203 	add.w	r2, ip, #3
   b698c:	60fa      	str	r2, [r7, #12]
   b698e:	eb03 0e02 	add.w	lr, r3, r2
   b6992:	eb0d 0205 	add.w	r2, sp, r5
   b6996:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b6998:	f8c7 d008 	str.w	sp, [r7, #8]
   b699c:	607a      	str	r2, [r7, #4]
   b699e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b69a2:	428a      	cmp	r2, r1
   b69a4:	d006      	beq.n	b69b4 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b69a6:	460a      	mov	r2, r1
   b69a8:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b69ac:	f802 8b01 	strb.w	r8, [r2], #1
   b69b0:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b69b2:	e7f4      	b.n	b699e <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b69b4:	2200      	movs	r2, #0
   b69b6:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b69b8:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69bc:	68f9      	ldr	r1, [r7, #12]
   b69be:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b69c2:	ebab 020c 	sub.w	r2, fp, ip
   b69c6:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b69c8:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b69cc:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69d0:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b69d2:	d125      	bne.n	b6a20 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69d4:	f813 e001 	ldrb.w	lr, [r3, r1]
   b69d8:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b69da:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69dc:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b69e0:	f10c 0105 	add.w	r1, ip, #5
   b69e4:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b69e6:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69e8:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b69ec:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b69ee:	69e3      	ldr	r3, [r4, #28]
   b69f0:	2240      	movs	r2, #64	; 0x40
   b69f2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b69f4:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69f6:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b69fa:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b69fe:	69e3      	ldr	r3, [r4, #28]
   b6a00:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6a04:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b6a06:	69e3      	ldr	r3, [r4, #28]
   b6a08:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6a0c:	69e1      	ldr	r1, [r4, #28]
   b6a0e:	2204      	movs	r2, #4
   b6a10:	4620      	mov	r0, r4
   b6a12:	f005 fe14 	bl	bc63e <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b6a16:	6266      	str	r6, [r4, #36]	; 0x24
   b6a18:	ee18 3a10 	vmov	r3, s16
   b6a1c:	469d      	mov	sp, r3
   b6a1e:	e76d      	b.n	b68fc <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b6a20:	f1b8 0f04 	cmp.w	r8, #4
   b6a24:	d115      	bne.n	b6a52 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a26:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6a2a:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a2c:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a2e:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b6a32:	f10c 0105 	add.w	r1, ip, #5
   b6a36:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a38:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a3a:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a3e:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b6a40:	69e3      	ldr	r3, [r4, #28]
   b6a42:	2250      	movs	r2, #80	; 0x50
   b6a44:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b6a46:	69e3      	ldr	r3, [r4, #28]
   b6a48:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a4a:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b6a4e:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b6a50:	e7d5      	b.n	b69fe <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b6a52:	4419      	add	r1, r3
   b6a54:	47d0      	blx	sl
   b6a56:	e7df      	b.n	b6a18 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b6a58:	2a50      	cmp	r2, #80	; 0x50
   b6a5a:	d108      	bne.n	b6a6e <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6a5c:	789a      	ldrb	r2, [r3, #2]
   b6a5e:	78d9      	ldrb	r1, [r3, #3]
   b6a60:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6a64:	b289      	uxth	r1, r1
   b6a66:	4620      	mov	r0, r4
   b6a68:	f7ff fed9 	bl	b681e <_ZN4MQTT14publishReleaseEt>
   b6a6c:	e746      	b.n	b68fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b6a6e:	2a40      	cmp	r2, #64	; 0x40
   b6a70:	d112      	bne.n	b6a98 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b6a72:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6a74:	2a00      	cmp	r2, #0
   b6a76:	f43f af41 	beq.w	b68fc <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b6a7a:	f1bb 0f04 	cmp.w	fp, #4
   b6a7e:	f47f af3d 	bne.w	b68fc <_ZN4MQTT4loopEv+0x4e>
   b6a82:	f011 0f06 	tst.w	r1, #6
   b6a86:	f47f af39 	bne.w	b68fc <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b6a8a:	7899      	ldrb	r1, [r3, #2]
   b6a8c:	78d8      	ldrb	r0, [r3, #3]
   b6a8e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6a92:	b280      	uxth	r0, r0
   b6a94:	4790      	blx	r2
   b6a96:	e731      	b.n	b68fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b6a98:	2a60      	cmp	r2, #96	; 0x60
   b6a9a:	d108      	bne.n	b6aae <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6a9c:	789a      	ldrb	r2, [r3, #2]
   b6a9e:	78d9      	ldrb	r1, [r3, #3]
   b6aa0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6aa4:	b289      	uxth	r1, r1
   b6aa6:	4620      	mov	r0, r4
   b6aa8:	f7ff fedd 	bl	b6866 <_ZN4MQTT15publishCompleteEt>
   b6aac:	e726      	b.n	b68fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6aae:	2a70      	cmp	r2, #112	; 0x70
   b6ab0:	d0df      	beq.n	b6a72 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6ab2:	2a90      	cmp	r2, #144	; 0x90
   b6ab4:	f43f af22 	beq.w	b68fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b6ab8:	2ac0      	cmp	r2, #192	; 0xc0
   b6aba:	d10a      	bne.n	b6ad2 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6abc:	22d0      	movs	r2, #208	; 0xd0
   b6abe:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6ac0:	69e3      	ldr	r3, [r4, #28]
   b6ac2:	2200      	movs	r2, #0
   b6ac4:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b6ac6:	69e1      	ldr	r1, [r4, #28]
   b6ac8:	2202      	movs	r2, #2
   b6aca:	4620      	mov	r0, r4
   b6acc:	f005 fdb7 	bl	bc63e <_ZN9TCPClient5writeEPKhj>
   b6ad0:	e714      	b.n	b68fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6ad2:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6ad4:	bf04      	itt	eq
   b6ad6:	2300      	moveq	r3, #0
   b6ad8:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6adc:	e70e      	b.n	b68fc <_ZN4MQTT4loopEv+0x4e>

000b6ade <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6ae0:	4604      	mov	r4, r0
   b6ae2:	460f      	mov	r7, r1
   b6ae4:	4616      	mov	r6, r2
    if (isConnected()) {
   b6ae6:	f7ff fcf6 	bl	b64d6 <_ZN4MQTT11isConnectedEv>
   b6aea:	4605      	mov	r5, r0
   b6aec:	b310      	cbz	r0, b6b34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6aee:	4621      	mov	r1, r4
   b6af0:	a801      	add	r0, sp, #4
   b6af2:	f7ff fbb3 	bl	b625c <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b6af6:	8c23      	ldrh	r3, [r4, #32]
   b6af8:	3301      	adds	r3, #1
   b6afa:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6afc:	b1eb      	cbz	r3, b6b3a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6afe:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6b00:	8c23      	ldrh	r3, [r4, #32]
   b6b02:	69e2      	ldr	r2, [r4, #28]
   b6b04:	0a1b      	lsrs	r3, r3, #8
   b6b06:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b6b08:	69e3      	ldr	r3, [r4, #28]
   b6b0a:	8c22      	ldrh	r2, [r4, #32]
   b6b0c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b6b0e:	69e2      	ldr	r2, [r4, #28]
   b6b10:	2307      	movs	r3, #7
   b6b12:	4639      	mov	r1, r7
   b6b14:	4620      	mov	r0, r4
   b6b16:	f7ff fcc2 	bl	b649e <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b6b1a:	69e3      	ldr	r3, [r4, #28]
   b6b1c:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b6b1e:	3804      	subs	r0, #4
   b6b20:	b283      	uxth	r3, r0
   b6b22:	69e2      	ldr	r2, [r4, #28]
   b6b24:	2182      	movs	r1, #130	; 0x82
   b6b26:	4620      	mov	r0, r4
   b6b28:	f7ff fc60 	bl	b63ec <_ZN4MQTT5writeEhPht>
   b6b2c:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b6b2e:	a801      	add	r0, sp, #4
   b6b30:	f7ff fb9f 	bl	b6272 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6b34:	4628      	mov	r0, r5
   b6b36:	b003      	add	sp, #12
   b6b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b6b3a:	2301      	movs	r3, #1
   b6b3c:	e7df      	b.n	b6afe <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6b3e <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6b3e:	2200      	movs	r2, #0
   b6b40:	f7ff bfcd 	b.w	b6ade <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b6b44 <_ZN12mDNSResolver5QueryC1EPKc>:
#include "Query.h"

namespace mDNSResolver {
  Query::Query(const char* name) {
    this->name = name;
   b6b44:	6001      	str	r1, [r0, #0]
  }
   b6b46:	4770      	bx	lr

000b6b48 <_ZN12mDNSResolver5QueryD1Ev>:

  Query::~Query() {}
   b6b48:	4770      	bx	lr

000b6b4a <_ZN12mDNSResolver5Query12buildDNSNameEPhj>:
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
    buffer[bufferIndex++] = qclass & 0xFF;
  }

  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
    int wordstart = 0, wordend = 0;
   b6b4a:	2300      	movs	r3, #0
  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
   b6b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int wordstart = 0, wordend = 0;
   b6b4e:	461c      	mov	r4, r3

    do {
      if(this->name[wordend] == '.' || this->name[wordend] == '\0') {
   b6b50:	6805      	ldr	r5, [r0, #0]
   b6b52:	5ced      	ldrb	r5, [r5, r3]
   b6b54:	2d2e      	cmp	r5, #46	; 0x2e
   b6b56:	d000      	beq.n	b6b5a <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x10>
   b6b58:	b9bd      	cbnz	r5, b6b8a <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x40>
        const int wordlen = wordend - wordstart;
   b6b5a:	1b1d      	subs	r5, r3, r4
        buffer[bufferIndex++] = (unsigned char)wordlen;
   b6b5c:	548d      	strb	r5, [r1, r2]
   b6b5e:	f102 0c01 	add.w	ip, r2, #1

        for(int i = wordstart; i < wordend; i++) {
   b6b62:	4626      	mov	r6, r4
   b6b64:	440a      	add	r2, r1
   b6b66:	42b3      	cmp	r3, r6
          buffer[bufferIndex++] = this->name[i];
   b6b68:	6807      	ldr	r7, [r0, #0]
        for(int i = wordstart; i < wordend; i++) {
   b6b6a:	dd04      	ble.n	b6b76 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x2c>
          buffer[bufferIndex++] = this->name[i];
   b6b6c:	5dbf      	ldrb	r7, [r7, r6]
   b6b6e:	f802 7f01 	strb.w	r7, [r2, #1]!
        for(int i = wordstart; i < wordend; i++) {
   b6b72:	3601      	adds	r6, #1
   b6b74:	e7f7      	b.n	b6b66 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x1c>
   b6b76:	429c      	cmp	r4, r3
   b6b78:	bfc8      	it	gt
   b6b7a:	2500      	movgt	r5, #0
        }

        if(this->name[wordend] == '.') {
   b6b7c:	5cfc      	ldrb	r4, [r7, r3]
   b6b7e:	2c2e      	cmp	r4, #46	; 0x2e
          wordend++;
   b6b80:	bf08      	it	eq
   b6b82:	3301      	addeq	r3, #1
   b6b84:	eb05 020c 	add.w	r2, r5, ip
        if(this->name[wordend] == '.') {
   b6b88:	461c      	mov	r4, r3
        }
        wordstart = wordend;
      }

      wordend++;
    } while(this->name[wordstart] != '\0');
   b6b8a:	6805      	ldr	r5, [r0, #0]
   b6b8c:	5d2d      	ldrb	r5, [r5, r4]
      wordend++;
   b6b8e:	3301      	adds	r3, #1
    } while(this->name[wordstart] != '\0');
   b6b90:	2d00      	cmp	r5, #0
   b6b92:	d1dd      	bne.n	b6b50 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x6>

    return bufferIndex;
  }
   b6b94:	4610      	mov	r0, r2
   b6b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6b98 <_ZN12mDNSResolver5Query14assemblePacketEPhi>:
  void Query::assemblePacket(unsigned char *buffer, int bufferLength) {
   b6b98:	b538      	push	{r3, r4, r5, lr}
   b6b9a:	460b      	mov	r3, r1
   b6b9c:	4605      	mov	r5, r0
      buffer[i] = 0;
   b6b9e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   b6ba2:	4618      	mov	r0, r3
   b6ba4:	2100      	movs	r1, #0
   b6ba6:	f006 fc1e 	bl	bd3e6 <memset>
    buffer[5] = 0x01;
   b6baa:	2401      	movs	r4, #1
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b6bac:	4601      	mov	r1, r0
    buffer[5] = 0x01;
   b6bae:	7144      	strb	r4, [r0, #5]
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b6bb0:	220c      	movs	r2, #12
   b6bb2:	4628      	mov	r0, r5
   b6bb4:	f7ff ffc9 	bl	b6b4a <_ZN12mDNSResolver5Query12buildDNSNameEPhj>
    buffer[bufferIndex++] = '\0';
   b6bb8:	2300      	movs	r3, #0
   b6bba:	540b      	strb	r3, [r1, r0]
    buffer[bufferIndex++] = (qtype & 0xFF00) >> 8;
   b6bbc:	4401      	add	r1, r0
   b6bbe:	704b      	strb	r3, [r1, #1]
    buffer[bufferIndex++] = qtype & 0xFF;
   b6bc0:	708c      	strb	r4, [r1, #2]
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
   b6bc2:	70cb      	strb	r3, [r1, #3]
    buffer[bufferIndex++] = qclass & 0xFF;
   b6bc4:	710c      	strb	r4, [r1, #4]
  }
   b6bc6:	bd38      	pop	{r3, r4, r5, pc}

000b6bc8 <_ZN12mDNSResolver5Query10sendPacketER3UDP>:
  void Query::sendPacket(UDP& socket) {
   b6bc8:	b5b0      	push	{r4, r5, r7, lr}
   b6bca:	b082      	sub	sp, #8
   b6bcc:	4605      	mov	r5, r0
   b6bce:	af00      	add	r7, sp, #0
    int bufferLength = strlen(this->name) + 18;
   b6bd0:	6800      	ldr	r0, [r0, #0]
  void Query::sendPacket(UDP& socket) {
   b6bd2:	460c      	mov	r4, r1
    int bufferLength = strlen(this->name) + 18;
   b6bd4:	f7fd ff1e 	bl	b4a14 <strlen>
    unsigned char buffer[bufferLength];
   b6bd8:	f100 0319 	add.w	r3, r0, #25
   b6bdc:	f023 0307 	bic.w	r3, r3, #7
   b6be0:	ebad 0d03 	sub.w	sp, sp, r3
    int bufferLength = strlen(this->name) + 18;
   b6be4:	f100 0212 	add.w	r2, r0, #18
    assemblePacket(buffer, bufferLength);
   b6be8:	4669      	mov	r1, sp
   b6bea:	4628      	mov	r0, r5
   b6bec:	607a      	str	r2, [r7, #4]
   b6bee:	f7ff ffd3 	bl	b6b98 <_ZN12mDNSResolver5Query14assemblePacketEPhi>
    socket.write(buffer, bufferLength);
   b6bf2:	6823      	ldr	r3, [r4, #0]
   b6bf4:	687a      	ldr	r2, [r7, #4]
   b6bf6:	68db      	ldr	r3, [r3, #12]
   b6bf8:	4669      	mov	r1, sp
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	4798      	blx	r3
	socket.endPacket();
   b6bfe:	6823      	ldr	r3, [r4, #0]
   b6c00:	4620      	mov	r0, r4
   b6c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c04:	4798      	blx	r3
  }
   b6c06:	3708      	adds	r7, #8
   b6c08:	46bd      	mov	sp, r7
   b6c0a:	bdb0      	pop	{r4, r5, r7, pc}

000b6c0c <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>:
    resolveCnames(cache);

    return answerResult;
  }

  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b6c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c0e:	b089      	sub	sp, #36	; 0x24
   b6c10:	461c      	mov	r4, r3
   b6c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if(dataLen == 4) {
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b6c14:	6816      	ldr	r6, [r2, #0]
    if(dataLen == 4) {
   b6c16:	2b04      	cmp	r3, #4
  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b6c18:	4615      	mov	r5, r2
    if(dataLen == 4) {
   b6c1a:	d11f      	bne.n	b6c5c <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x50>
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b6c1c:	1c72      	adds	r2, r6, #1
   b6c1e:	602a      	str	r2, [r5, #0]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b6c20:	1cb3      	adds	r3, r6, #2
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b6c22:	5d81      	ldrb	r1, [r0, r6]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b6c24:	602b      	str	r3, [r5, #0]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b6c26:	1cf7      	adds	r7, r6, #3
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b6c28:	5c82      	ldrb	r2, [r0, r2]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b6c2a:	602f      	str	r7, [r5, #0]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b6c2c:	3604      	adds	r6, #4
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b6c2e:	5cc3      	ldrb	r3, [r0, r3]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b6c30:	602e      	str	r6, [r5, #0]

      response.resolved = true;
   b6c32:	2501      	movs	r5, #1
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b6c34:	5dc0      	ldrb	r0, [r0, r7]
      response.resolved = true;
   b6c36:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
      response.ttl = ttl;
   b6c3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b6c3c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
      response.ipAddress = IPAddress(a, b, c, d);
   b6c40:	9000      	str	r0, [sp, #0]
class IPAddress : public Printable {
   b6c42:	ad03      	add	r5, sp, #12
   b6c44:	a802      	add	r0, sp, #8
   b6c46:	f005 fb81 	bl	bc34c <_ZN9IPAddressC1Ehhhh>
   b6c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c4c:	f504 7486 	add.w	r4, r4, #268	; 0x10c
   b6c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c52:	682b      	ldr	r3, [r5, #0]
   b6c54:	7023      	strb	r3, [r4, #0]
    } else {
      (*offset) += dataLen;
    }

    return E_MDNS_OK;
  }
   b6c56:	2020      	movs	r0, #32
   b6c58:	b009      	add	sp, #36	; 0x24
   b6c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*offset) += dataLen;
   b6c5c:	4433      	add	r3, r6
   b6c5e:	6013      	str	r3, [r2, #0]
   b6c60:	e7f9      	b.n	b6c56 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x4a>

000b6c62 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>:

    free(assembled);
    return E_MDNS_OK;
  }

  MDNS_RESULT Answer::parseName(char** name, const char* mapped, unsigned int len) {
   b6c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned int namePointer = 0;
    unsigned int mapPointer = 0;
   b6c66:	2500      	movs	r5, #0
    unsigned int namePointer = 0;
   b6c68:	462b      	mov	r3, r5

      if(labelLength > 0x3f) {
        return E_MDNS_INVALID_LABEL_LENGTH;
      }

      if(namePointer + labelLength > len - 1) {
   b6c6a:	f102 3eff 	add.w	lr, r2, #4294967295
        return E_MDNS_PACKET_ERROR;
      }

      if(namePointer != 0) {
        (*name)[namePointer++] = '.';
   b6c6e:	f04f 082e 	mov.w	r8, #46	; 0x2e
    while(mapPointer < len) {
   b6c72:	4295      	cmp	r5, r2
   b6c74:	d21d      	bcs.n	b6cb2 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x50>
      int labelLength = mapped[mapPointer++];
   b6c76:	5d4c      	ldrb	r4, [r1, r5]
      if(labelLength > 0x3f) {
   b6c78:	2c3f      	cmp	r4, #63	; 0x3f
      int labelLength = mapped[mapPointer++];
   b6c7a:	eb01 0705 	add.w	r7, r1, r5
      if(labelLength > 0x3f) {
   b6c7e:	dc20      	bgt.n	b6cc2 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x60>
      if(namePointer + labelLength > len - 1) {
   b6c80:	18e6      	adds	r6, r4, r3
   b6c82:	4576      	cmp	r6, lr
   b6c84:	d81f      	bhi.n	b6cc6 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x64>
      if(namePointer != 0) {
   b6c86:	b11b      	cbz	r3, b6c90 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x2e>
        (*name)[namePointer++] = '.';
   b6c88:	6806      	ldr	r6, [r0, #0]
   b6c8a:	f806 8003 	strb.w	r8, [r6, r3]
   b6c8e:	3301      	adds	r3, #1
   b6c90:	46ba      	mov	sl, r7
   b6c92:	2600      	movs	r6, #0
      }

      for(int i = 0; i < labelLength; i++) {
   b6c94:	42a6      	cmp	r6, r4
   b6c96:	eb06 0c03 	add.w	ip, r6, r3
   b6c9a:	db03      	blt.n	b6ca4 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x42>
   b6c9c:	4423      	add	r3, r4
   b6c9e:	3401      	adds	r4, #1
   b6ca0:	4425      	add	r5, r4
   b6ca2:	e7e6      	b.n	b6c72 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x10>
        (*name)[namePointer++] = mapped[mapPointer++];
   b6ca4:	6807      	ldr	r7, [r0, #0]
   b6ca6:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
   b6caa:	f807 900c 	strb.w	r9, [r7, ip]
      for(int i = 0; i < labelLength; i++) {
   b6cae:	3601      	adds	r6, #1
   b6cb0:	e7f0      	b.n	b6c94 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x32>
      }
    }

    (*name)[len - 1] = '\0';
   b6cb2:	6803      	ldr	r3, [r0, #0]
   b6cb4:	441a      	add	r2, r3
   b6cb6:	2300      	movs	r3, #0
   b6cb8:	f802 3c01 	strb.w	r3, [r2, #-1]

    return E_MDNS_OK;
   b6cbc:	2020      	movs	r0, #32
  }
   b6cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return E_MDNS_INVALID_LABEL_LENGTH;
   b6cc2:	2026      	movs	r0, #38	; 0x26
   b6cc4:	e7fb      	b.n	b6cbe <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>
        return E_MDNS_PACKET_ERROR;
   b6cc6:	2023      	movs	r0, #35	; 0x23
   b6cc8:	e7f9      	b.n	b6cbe <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>

000b6cca <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name, unsigned int maxlen) {
   b6cca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6cce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    unsigned int index = 0;
   b6cd0:	2500      	movs	r5, #0
    unsigned int nameLength = 0;

    while(index < maxlen) {
   b6cd2:	42a5      	cmp	r5, r4
   b6cd4:	d025      	beq.n	b6d22 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b6cd6:	6816      	ldr	r6, [r2, #0]
   b6cd8:	f810 8006 	ldrb.w	r8, [r0, r6]
   b6cdc:	f008 0cc0 	and.w	ip, r8, #192	; 0xc0
   b6ce0:	f1bc 0fc0 	cmp.w	ip, #192	; 0xc0
   b6ce4:	eb00 0e06 	add.w	lr, r0, r6
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b6ce8:	f106 0701 	add.w	r7, r6, #1
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b6cec:	d120      	bne.n	b6d30 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x66>
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b6cee:	6017      	str	r7, [r2, #0]
   b6cf0:	f89e 4000 	ldrb.w	r4, [lr]
   b6cf4:	3602      	adds	r6, #2
   b6cf6:	6016      	str	r6, [r2, #0]
   b6cf8:	5dc2      	ldrb	r2, [r0, r7]
   b6cfa:	0224      	lsls	r4, r4, #8
   b6cfc:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
   b6d00:	4414      	add	r4, r2
        if(pointerOffset > len) {
   b6d02:	428c      	cmp	r4, r1
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b6d04:	9402      	str	r4, [sp, #8]
        if(pointerOffset > len) {
   b6d06:	d80e      	bhi.n	b6d26 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x5c>
          // Points to somewhere beyond the packet
          return -1 * E_MDNS_POINTER_OVERFLOW;
        }

        char *namePointer = *name + nameLength;
   b6d08:	681b      	ldr	r3, [r3, #0]
   b6d0a:	442b      	add	r3, r5
   b6d0c:	9303      	str	r3, [sp, #12]
        int pointerLen = assembleName(buffer, len, &pointerOffset, &namePointer, MDNS_MAX_NAME_LEN - nameLength);
   b6d0e:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
   b6d12:	9300      	str	r3, [sp, #0]
   b6d14:	aa02      	add	r2, sp, #8
   b6d16:	ab03      	add	r3, sp, #12
   b6d18:	f7ff ffd7 	bl	b6cca <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>

        if(pointerLen < 0) {
   b6d1c:	2800      	cmp	r0, #0
   b6d1e:	db04      	blt.n	b6d2a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return pointerLen;
        }

        nameLength += pointerLen;
   b6d20:	1944      	adds	r4, r0, r5
        (*name)[nameLength++] = buffer[(*offset)++];
      }
      index++;
    }

    return nameLength;
   b6d22:	4620      	mov	r0, r4
   b6d24:	e001      	b.n	b6d2a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return -1 * E_MDNS_POINTER_OVERFLOW;
   b6d26:	f06f 0021 	mvn.w	r0, #33	; 0x21
  }
   b6d2a:	b004      	add	sp, #16
   b6d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (*name)[nameLength++] = buffer[(*offset)++];
   b6d30:	f105 0c01 	add.w	ip, r5, #1
   b6d34:	6017      	str	r7, [r2, #0]
      } else if(buffer[*offset] == '\0') {
   b6d36:	f1b8 0f00 	cmp.w	r8, #0
   b6d3a:	d105      	bne.n	b6d48 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x7e>
        (*name)[nameLength++] = buffer[(*offset)++];
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	f89e 2000 	ldrb.w	r2, [lr]
   b6d42:	555a      	strb	r2, [r3, r5]
   b6d44:	4664      	mov	r4, ip
        break;
   b6d46:	e7ec      	b.n	b6d22 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
        (*name)[nameLength++] = buffer[(*offset)++];
   b6d48:	5d87      	ldrb	r7, [r0, r6]
   b6d4a:	681e      	ldr	r6, [r3, #0]
   b6d4c:	5577      	strb	r7, [r6, r5]
        (*name)[nameLength++] = buffer[(*offset)++];
   b6d4e:	4665      	mov	r5, ip
    while(index < maxlen) {
   b6d50:	e7bf      	b.n	b6cd2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x8>

000b6d52 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name) {
   b6d52:	b513      	push	{r0, r1, r4, lr}
    return assembleName(buffer, len, offset, name, MDNS_MAX_NAME_LEN);
   b6d54:	24ff      	movs	r4, #255	; 0xff
   b6d56:	9400      	str	r4, [sp, #0]
   b6d58:	f7ff ffb7 	bl	b6cca <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
  }
   b6d5c:	b002      	add	sp, #8
   b6d5e:	bd10      	pop	{r4, pc}

000b6d60 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>:
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b6d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6d64:	4605      	mov	r5, r0
   b6d66:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b6d6a:	20ff      	movs	r0, #255	; 0xff
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b6d6c:	4688      	mov	r8, r1
   b6d6e:	4614      	mov	r4, r2
   b6d70:	461e      	mov	r6, r3
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b6d72:	f002 fbd3 	bl	b951c <malloc>
   b6d76:	9004      	str	r0, [sp, #16]
    if(assembled == NULL) {
   b6d78:	b1b8      	cbz	r0, b6daa <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4a>
    int nameLen = Answer::assembleName(buffer, len, offset, &assembled);
   b6d7a:	ab04      	add	r3, sp, #16
   b6d7c:	4622      	mov	r2, r4
   b6d7e:	4641      	mov	r1, r8
   b6d80:	4628      	mov	r0, r5
   b6d82:	f7ff ffe6 	bl	b6d52 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>
    if(nameLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b6d86:	f110 0f22 	cmn.w	r0, #34	; 0x22
   b6d8a:	d107      	bne.n	b6d9c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x3c>
        free(assembled);
   b6d8c:	9804      	ldr	r0, [sp, #16]
   b6d8e:	f002 fbcd 	bl	b952c <free>
        return -1 * dataLen;
   b6d92:	2022      	movs	r0, #34	; 0x22
  }
   b6d94:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   b6d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    char *name = (char *)malloc(sizeof(char) * nameLen);
   b6d9c:	f002 fbbe 	bl	b951c <malloc>
   b6da0:	9005      	str	r0, [sp, #20]
    if(name == NULL) {
   b6da2:	b920      	cbnz	r0, b6dae <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4e>
      free(assembled);
   b6da4:	9804      	ldr	r0, [sp, #16]
   b6da6:	f002 fbc1 	bl	b952c <free>
      return E_MDNS_OUT_OF_MEMORY;
   b6daa:	2027      	movs	r0, #39	; 0x27
   b6dac:	e7f2      	b.n	b6d94 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    parseName(&name, assembled, strlen(assembled));
   b6dae:	9904      	ldr	r1, [sp, #16]
   b6db0:	9103      	str	r1, [sp, #12]
   b6db2:	4608      	mov	r0, r1
   b6db4:	f7fd fe2e 	bl	b4a14 <strlen>
   b6db8:	9903      	ldr	r1, [sp, #12]
   b6dba:	4602      	mov	r2, r0
   b6dbc:	a805      	add	r0, sp, #20
   b6dbe:	f7ff ff50 	bl	b6c62 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
    int cacheIndex = cache.search(name);
   b6dc2:	9905      	ldr	r1, [sp, #20]
   b6dc4:	4630      	mov	r0, r6
   b6dc6:	f000 f987 	bl	b70d8 <_ZN12mDNSResolver5Cache6searchEPKc>
   b6dca:	4607      	mov	r7, r0
    free(name);
   b6dcc:	9805      	ldr	r0, [sp, #20]
   b6dce:	f002 fbad 	bl	b952c <free>
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b6dd2:	6822      	ldr	r2, [r4, #0]
   b6dd4:	1c53      	adds	r3, r2, #1
   b6dd6:	6023      	str	r3, [r4, #0]
   b6dd8:	1c91      	adds	r1, r2, #2
   b6dda:	5ca8      	ldrb	r0, [r5, r2]
   b6ddc:	6021      	str	r1, [r4, #0]
   b6dde:	5ce9      	ldrb	r1, [r5, r3]
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b6de0:	1d53      	adds	r3, r2, #5
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b6de2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b6de6:	18a8      	adds	r0, r5, r2
   b6de8:	6023      	str	r3, [r4, #0]
   b6dea:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6dee:	1d90      	adds	r0, r2, #6
   b6df0:	6020      	str	r0, [r4, #0]
   b6df2:	5ceb      	ldrb	r3, [r5, r3]
   b6df4:	041b      	lsls	r3, r3, #16
   b6df6:	eb03 630c 	add.w	r3, r3, ip, lsl #24
   b6dfa:	f102 0c07 	add.w	ip, r2, #7
   b6dfe:	f8c4 c000 	str.w	ip, [r4]
   b6e02:	5c28      	ldrb	r0, [r5, r0]
   b6e04:	eb03 2300 	add.w	r3, r3, r0, lsl #8
   b6e08:	f102 0008 	add.w	r0, r2, #8
   b6e0c:	6020      	str	r0, [r4, #0]
   b6e0e:	f815 900c 	ldrb.w	r9, [r5, ip]
   b6e12:	4499      	add	r9, r3
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b6e14:	f102 0309 	add.w	r3, r2, #9
   b6e18:	6023      	str	r3, [r4, #0]
   b6e1a:	320a      	adds	r2, #10
   b6e1c:	5c28      	ldrb	r0, [r5, r0]
   b6e1e:	6022      	str	r2, [r4, #0]
   b6e20:	f815 a003 	ldrb.w	sl, [r5, r3]
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b6e24:	2901      	cmp	r1, #1
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b6e26:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b6e2a:	d112      	bne.n	b6e52 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xf2>
   b6e2c:	1c78      	adds	r0, r7, #1
   b6e2e:	d077      	beq.n	b6f20 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      resolveAName(buffer, len, offset, cache[cacheIndex], ttl, dataLen);
   b6e30:	4639      	mov	r1, r7
   b6e32:	4630      	mov	r0, r6
   b6e34:	f000 f94b 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6e38:	e9cd 9a00 	strd	r9, sl, [sp]
   b6e3c:	4603      	mov	r3, r0
   b6e3e:	4622      	mov	r2, r4
   b6e40:	4641      	mov	r1, r8
   b6e42:	4628      	mov	r0, r5
   b6e44:	f7ff fee2 	bl	b6c0c <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>
    free(assembled);
   b6e48:	9804      	ldr	r0, [sp, #16]
   b6e4a:	f002 fb6f 	bl	b952c <free>
    return E_MDNS_OK;
   b6e4e:	2020      	movs	r0, #32
   b6e50:	e7a0      	b.n	b6d94 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    } else if(type == MDNS_CNAME_RECORD && cacheIndex != -1) {
   b6e52:	2905      	cmp	r1, #5
   b6e54:	d164      	bne.n	b6f20 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
   b6e56:	1c79      	adds	r1, r7, #1
   b6e58:	d062      	beq.n	b6f20 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      cache[cacheIndex].resolved = false;
   b6e5a:	4639      	mov	r1, r7
   b6e5c:	4630      	mov	r0, r6
   b6e5e:	f000 f936 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6e62:	2300      	movs	r3, #0
   b6e64:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
      cache[cacheIndex].ttl = ttl;
   b6e68:	4639      	mov	r1, r7
   b6e6a:	4630      	mov	r0, r6
   b6e6c:	f000 f92f 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6e70:	f8c0 9100 	str.w	r9, [r0, #256]	; 0x100
      unsigned int dataOffset = (*offset);
   b6e74:	6823      	ldr	r3, [r4, #0]
   b6e76:	9306      	str	r3, [sp, #24]
      (*offset) += dataLen;
   b6e78:	4453      	add	r3, sl
   b6e7a:	6023      	str	r3, [r4, #0]
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b6e7c:	4628      	mov	r0, r5
   b6e7e:	f8cd a000 	str.w	sl, [sp]
   b6e82:	ab04      	add	r3, sp, #16
   b6e84:	aa06      	add	r2, sp, #24
   b6e86:	4641      	mov	r1, r8
   b6e88:	f7ff ff1f 	bl	b6cca <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b6e8c:	f110 0f22 	cmn.w	r0, #34	; 0x22
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b6e90:	4605      	mov	r5, r0
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b6e92:	f43f af7b 	beq.w	b6d8c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x2c>
      Response r;
   b6e96:	ac08      	add	r4, sp, #32
   b6e98:	4620      	mov	r0, r4
   b6e9a:	f000 f9e1 	bl	b7260 <_ZN12mDNSResolver8ResponseC1Ev>
      parseName(&responseName, assembled, dataLen - 1);
   b6e9e:	9904      	ldr	r1, [sp, #16]
      char* responseName = &*r.name;
   b6ea0:	9407      	str	r4, [sp, #28]
      parseName(&responseName, assembled, dataLen - 1);
   b6ea2:	1e6a      	subs	r2, r5, #1
   b6ea4:	a807      	add	r0, sp, #28
   b6ea6:	f7ff fedc 	bl	b6c62 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
      int cnameIndex = cache.search(r);
   b6eaa:	4621      	mov	r1, r4
   b6eac:	4630      	mov	r0, r6
   b6eae:	f000 f92b 	bl	b7108 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      if(cnameIndex == -1) {
   b6eb2:	1c43      	adds	r3, r0, #1
   b6eb4:	d125      	bne.n	b6f02 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1a2>
#include "Constants.h"
#include "Particle.h"
// #include <mDNSResolver/IPAddress.h>

namespace mDNSResolver {
  class Response {
   b6eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
   b6eba:	4621      	mov	r1, r4
   b6ebc:	a851      	add	r0, sp, #324	; 0x144
   b6ebe:	f006 fa6a 	bl	bd396 <memcpy>
   b6ec2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   b6ec6:	9391      	str	r3, [sp, #580]	; 0x244
   b6ec8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   b6ecc:	f88d 3248 	strb.w	r3, [sp, #584]	; 0x248
   b6ed0:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   b6ed4:	4b14      	ldr	r3, [pc, #80]	; (b6f28 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c8>)
   b6ed6:	9393      	str	r3, [sp, #588]	; 0x24c
   b6ed8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6edc:	ad94      	add	r5, sp, #592	; 0x250
   b6ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6ee0:	f8dc 3000 	ldr.w	r3, [ip]
   b6ee4:	702b      	strb	r3, [r5, #0]
        cache.insert(r);
   b6ee6:	a951      	add	r1, sp, #324	; 0x144
   b6ee8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   b6eec:	9399      	str	r3, [sp, #612]	; 0x264
   b6eee:	4630      	mov	r0, r6
   b6ef0:	f000 f957 	bl	b71a2 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b6ef4:	a851      	add	r0, sp, #324	; 0x144
   b6ef6:	f000 f9e7 	bl	b72c8 <_ZN12mDNSResolver8ResponseD1Ev>
        cnameIndex = cache.search(r);
   b6efa:	4621      	mov	r1, r4
   b6efc:	4630      	mov	r0, r6
   b6efe:	f000 f903 	bl	b7108 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b6f02:	4601      	mov	r1, r0
   b6f04:	4630      	mov	r0, r6
   b6f06:	f000 f8e2 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6f0a:	4639      	mov	r1, r7
   b6f0c:	4605      	mov	r5, r0
   b6f0e:	4630      	mov	r0, r6
   b6f10:	f000 f8dd 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6f14:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
      Response r;
   b6f18:	4620      	mov	r0, r4
   b6f1a:	f000 f9d5 	bl	b72c8 <_ZN12mDNSResolver8ResponseD1Ev>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b6f1e:	e793      	b.n	b6e48 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
      (*offset) += dataLen;
   b6f20:	4452      	add	r2, sl
   b6f22:	6022      	str	r2, [r4, #0]
   b6f24:	e790      	b.n	b6e48 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
   b6f26:	bf00      	nop
   b6f28:	000c027c 	.word	0x000c027c

000b6f2c <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>:

  // Work out how many bytes are dedicated to questions. Since we aren't answering questions, they can be skipped
  // buffer: The mDNS packet we are parsing
  // len: Length of the packet
  // offset: the byte we are up to in the parsing process
  MDNS_RESULT Answer::skipQuestions(unsigned char* buffer, unsigned int len, unsigned int* offset) {
   b6f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int questionCount = (buffer[4] << 8) + buffer[5];
   b6f2e:	7903      	ldrb	r3, [r0, #4]
   b6f30:	7946      	ldrb	r6, [r0, #5]
   b6f32:	eb06 2603 	add.w	r6, r6, r3, lsl #8

    *offset += 12;
   b6f36:	6813      	ldr	r3, [r2, #0]
   b6f38:	330c      	adds	r3, #12
   b6f3a:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b6f3c:	2500      	movs	r5, #0
   b6f3e:	42ae      	cmp	r6, r5
   b6f40:	d016      	beq.n	b6f70 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x44>

      while(buffer[*offset] != '\0') {
   b6f42:	6813      	ldr	r3, [r2, #0]
   b6f44:	5cc4      	ldrb	r4, [r0, r3]
   b6f46:	b12c      	cbz	r4, b6f54 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x28>
        // If it's a pointer, add two to the counter
        if((buffer[*offset] & 0xc0) == 0xc0) {
   b6f48:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   b6f4c:	2fc0      	cmp	r7, #192	; 0xc0
   b6f4e:	d106      	bne.n	b6f5e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x32>
          (*offset) += 2;
   b6f50:	3302      	adds	r3, #2
   b6f52:	6013      	str	r3, [r2, #0]
            return E_MDNS_PACKET_ERROR;
          }
        }
      }

      (*offset) += 5; // 2 bytes for the qtypes and 2 bytes qclass + plus one to land us on the next bit
   b6f54:	6813      	ldr	r3, [r2, #0]
   b6f56:	3305      	adds	r3, #5
   b6f58:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b6f5a:	3501      	adds	r5, #1
   b6f5c:	e7ef      	b.n	b6f3e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x12>
          if(labelLength > 0x3f) {
   b6f5e:	2c3f      	cmp	r4, #63	; 0x3f
   b6f60:	d80c      	bhi.n	b6f7c <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x50>
          (*offset) += 1; // Increment to move to the next byte
   b6f62:	3301      	adds	r3, #1
          (*offset) += labelLength;
   b6f64:	4423      	add	r3, r4
          if(*offset > len) {
   b6f66:	428b      	cmp	r3, r1
          (*offset) += labelLength;
   b6f68:	6013      	str	r3, [r2, #0]
          if(*offset > len) {
   b6f6a:	d9ea      	bls.n	b6f42 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x16>
    }

    if(*offset > len + 1) {
      return E_MDNS_PACKET_ERROR;
   b6f6c:	2023      	movs	r0, #35	; 0x23
    }

    return E_MDNS_OK;
  }
   b6f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*offset > len + 1) {
   b6f70:	6813      	ldr	r3, [r2, #0]
   b6f72:	3101      	adds	r1, #1
   b6f74:	428b      	cmp	r3, r1
   b6f76:	d8f9      	bhi.n	b6f6c <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x40>
    return E_MDNS_OK;
   b6f78:	2020      	movs	r0, #32
   b6f7a:	e7f8      	b.n	b6f6e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>
            return E_MDNS_INVALID_LABEL_LENGTH;
   b6f7c:	2026      	movs	r0, #38	; 0x26
   b6f7e:	e7f6      	b.n	b6f6e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>

000b6f80 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>:

  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b6f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for(int i = 0; i < cache.length(); i++) {
   b6f84:	2400      	movs	r4, #0
  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b6f86:	4605      	mov	r5, r0
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
        cache[i].ipAddress = cache[i].cname->ipAddress;
        cache[i].resolved = true;
   b6f88:	f04f 0801 	mov.w	r8, #1
        cache[i].cname = NULL;
   b6f8c:	46a1      	mov	r9, r4
    for(int i = 0; i < cache.length(); i++) {
   b6f8e:	4628      	mov	r0, r5
   b6f90:	f000 f8bc 	bl	b710c <_ZN12mDNSResolver5Cache6lengthEv>
   b6f94:	42a0      	cmp	r0, r4
   b6f96:	dd2f      	ble.n	b6ff8 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x78>
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
   b6f98:	4621      	mov	r1, r4
   b6f9a:	4628      	mov	r0, r5
   b6f9c:	f000 f897 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6fa0:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b6fa4:	b333      	cbz	r3, b6ff4 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
   b6fa6:	4621      	mov	r1, r4
   b6fa8:	4628      	mov	r0, r5
   b6faa:	f000 f890 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6fae:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b6fb2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
   b6fb6:	b1eb      	cbz	r3, b6ff4 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
        cache[i].ipAddress = cache[i].cname->ipAddress;
   b6fb8:	4621      	mov	r1, r4
   b6fba:	4628      	mov	r0, r5
   b6fbc:	f000 f887 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6fc0:	4621      	mov	r1, r4
   b6fc2:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   b6fc6:	4628      	mov	r0, r5
   b6fc8:	f000 f881 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6fcc:	f507 7786 	add.w	r7, r7, #268	; 0x10c
   b6fd0:	f500 7686 	add.w	r6, r0, #268	; 0x10c
   b6fd4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b6fd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6fd8:	683b      	ldr	r3, [r7, #0]
   b6fda:	7033      	strb	r3, [r6, #0]
        cache[i].resolved = true;
   b6fdc:	4621      	mov	r1, r4
   b6fde:	4628      	mov	r0, r5
   b6fe0:	f000 f875 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
        cache[i].cname = NULL;
   b6fe4:	4621      	mov	r1, r4
        cache[i].resolved = true;
   b6fe6:	f880 8104 	strb.w	r8, [r0, #260]	; 0x104
        cache[i].cname = NULL;
   b6fea:	4628      	mov	r0, r5
   b6fec:	f000 f86f 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b6ff0:	f8c0 9120 	str.w	r9, [r0, #288]	; 0x120
    for(int i = 0; i < cache.length(); i++) {
   b6ff4:	3401      	adds	r4, #1
   b6ff6:	e7ca      	b.n	b6f8e <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0xe>
      }
    }
    return E_MDNS_OK;
  }
   b6ff8:	2020      	movs	r0, #32
   b6ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6ffe <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>:
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b6ffe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7002:	4691      	mov	r9, r2
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b7004:	f990 2002 	ldrsb.w	r2, [r0, #2]
   b7008:	7883      	ldrb	r3, [r0, #2]
   b700a:	2a00      	cmp	r2, #0
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b700c:	4606      	mov	r6, r0
   b700e:	4688      	mov	r8, r1
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b7010:	da28      	bge.n	b7064 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    if(buffer[2] & 0b00000010) {
   b7012:	079b      	lsls	r3, r3, #30
   b7014:	d422      	bmi.n	b705c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x5e>
    if (buffer[3] & 0b00001111) {
   b7016:	78c5      	ldrb	r5, [r0, #3]
   b7018:	f015 050f 	ands.w	r5, r5, #15
   b701c:	d120      	bne.n	b7060 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x62>
    unsigned int answerCount = (buffer[6] << 8) + buffer[7];
   b701e:	7983      	ldrb	r3, [r0, #6]
   b7020:	79c7      	ldrb	r7, [r0, #7]
    if(answerCount == 0) {
   b7022:	eb17 2703 	adds.w	r7, r7, r3, lsl #8
   b7026:	d01d      	beq.n	b7064 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b7028:	aa01      	add	r2, sp, #4
    unsigned int offset = 0;
   b702a:	9501      	str	r5, [sp, #4]
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b702c:	f7ff ff7e 	bl	b6f2c <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>
    if(questionResult != E_MDNS_OK) {
   b7030:	2820      	cmp	r0, #32
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b7032:	4604      	mov	r4, r0
    if(questionResult != E_MDNS_OK) {
   b7034:	d10e      	bne.n	b7054 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      answerResult = resolve(buffer, len, &offset, cache);
   b7036:	464b      	mov	r3, r9
   b7038:	aa01      	add	r2, sp, #4
   b703a:	4641      	mov	r1, r8
   b703c:	4630      	mov	r0, r6
   b703e:	f7ff fe8f 	bl	b6d60 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>
      if(answerResult != E_MDNS_OK) {
   b7042:	2820      	cmp	r0, #32
      answerResult = resolve(buffer, len, &offset, cache);
   b7044:	4604      	mov	r4, r0
      if(answerResult != E_MDNS_OK) {
   b7046:	d105      	bne.n	b7054 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
    for(int i = 0; i < answerCount; i++) {
   b7048:	3501      	adds	r5, #1
   b704a:	42af      	cmp	r7, r5
   b704c:	d1f3      	bne.n	b7036 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x38>
    resolveCnames(cache);
   b704e:	4648      	mov	r0, r9
   b7050:	f7ff ff96 	bl	b6f80 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>
  }
   b7054:	4620      	mov	r0, r4
   b7056:	b003      	add	sp, #12
   b7058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return E_MDNS_TRUNCATED;
   b705c:	2425      	movs	r4, #37	; 0x25
   b705e:	e7f9      	b.n	b7054 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_PACKET_ERROR;
   b7060:	2423      	movs	r4, #35	; 0x23
   b7062:	e7f7      	b.n	b7054 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_OK;
   b7064:	2420      	movs	r4, #32
   b7066:	e7f5      	b.n	b7054 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>

000b7068 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>:
   b7068:	b5f0      	push	{r4, r5, r6, r7, lr}
   b706a:	1e4a      	subs	r2, r1, #1
   b706c:	460d      	mov	r5, r1
   b706e:	4604      	mov	r4, r0
   b7070:	4603      	mov	r3, r0
   b7072:	f500 7180 	add.w	r1, r0, #256	; 0x100
   b7076:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   b707a:	f803 0b01 	strb.w	r0, [r3], #1
   b707e:	428b      	cmp	r3, r1
   b7080:	d1f9      	bne.n	b7076 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0+0xe>
   b7082:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b7086:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   b708a:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   b708e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   b7092:	f505 7786 	add.w	r7, r5, #268	; 0x10c
   b7096:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b7098:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   b709c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b709e:	683b      	ldr	r3, [r7, #0]
   b70a0:	7033      	strb	r3, [r6, #0]
   b70a2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   b70a6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   b70aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b70ac <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b70ac:	b570      	push	{r4, r5, r6, lr}
   b70ae:	4604      	mov	r4, r0
   b70b0:	4605      	mov	r5, r0
   b70b2:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b70b6:	4628      	mov	r0, r5
   b70b8:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b70bc:	f000 f8d0 	bl	b7260 <_ZN12mDNSResolver8ResponseC1Ev>
   b70c0:	42ae      	cmp	r6, r5
   b70c2:	d1f8      	bne.n	b70b6 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b70c4:	2300      	movs	r3, #0
   b70c6:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b70ca:	4620      	mov	r0, r4
   b70cc:	bd70      	pop	{r4, r5, r6, pc}

000b70ce <_ZN12mDNSResolver5CacheixEi>:
  Cache::~Cache() {
  }

  Response& Cache::operator[] (const int index) {
    return this->list[index];
  }
   b70ce:	f44f 7392 	mov.w	r3, #292	; 0x124
   b70d2:	fb03 0001 	mla	r0, r3, r1, r0
   b70d6:	4770      	bx	lr

000b70d8 <_ZN12mDNSResolver5Cache6searchEPKc>:

  int Cache::search(Response& response) {
    return search(response.name);
  }

  int Cache::search(const char* name) {
   b70d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < this->size; i++) {
   b70dc:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
  int Cache::search(const char* name) {
   b70e0:	4605      	mov	r5, r0
   b70e2:	4688      	mov	r8, r1
    for(int i = 0; i < this->size; i++) {
   b70e4:	2400      	movs	r4, #0
      if(strcmp(this->list[i].name, name) == 0) {
   b70e6:	f44f 7792 	mov.w	r7, #292	; 0x124
    for(int i = 0; i < this->size; i++) {
   b70ea:	42a6      	cmp	r6, r4
   b70ec:	dd07      	ble.n	b70fe <_ZN12mDNSResolver5Cache6searchEPKc+0x26>
      if(strcmp(this->list[i].name, name) == 0) {
   b70ee:	4641      	mov	r1, r8
   b70f0:	fb07 5004 	mla	r0, r7, r4, r5
   b70f4:	f7fd fc84 	bl	b4a00 <strcmp>
   b70f8:	b118      	cbz	r0, b7102 <_ZN12mDNSResolver5Cache6searchEPKc+0x2a>
    for(int i = 0; i < this->size; i++) {
   b70fa:	3401      	adds	r4, #1
   b70fc:	e7f5      	b.n	b70ea <_ZN12mDNSResolver5Cache6searchEPKc+0x12>
        return i;
      }
    }
    return -1;
   b70fe:	f04f 34ff 	mov.w	r4, #4294967295
  }
   b7102:	4620      	mov	r0, r4
   b7104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7108 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>:
    return search(response.name);
   b7108:	f7ff bfe6 	b.w	b70d8 <_ZN12mDNSResolver5Cache6searchEPKc>

000b710c <_ZN12mDNSResolver5Cache6lengthEv>:
    }
  }

  int Cache::length() {
    return this->size;
  }
   b710c:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
   b7110:	4770      	bx	lr

000b7112 <_ZN12mDNSResolver5Cache6oldestEv>:

  int Cache::oldest() {
   b7112:	b570      	push	{r4, r5, r6, lr}
    if(this->size == 0) {
   b7114:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
   b7118:	b1a4      	cbz	r4, b7144 <_ZN12mDNSResolver5Cache6oldestEv+0x32>
      return -1;
    }

    unsigned long oldestTTL = this->list[0].ttl;
   b711a:	f8d0 5100 	ldr.w	r5, [r0, #256]	; 0x100
    unsigned int oldestIndex = 0;

    for(int i = 1; i < this->size; i++) {
   b711e:	2101      	movs	r1, #1
    unsigned int oldestIndex = 0;
   b7120:	2200      	movs	r2, #0
      if(this->list[i].ttl < oldestTTL) {
   b7122:	f500 7380 	add.w	r3, r0, #256	; 0x100
   b7126:	f44f 7692 	mov.w	r6, #292	; 0x124
    for(int i = 1; i < this->size; i++) {
   b712a:	428c      	cmp	r4, r1
   b712c:	dd08      	ble.n	b7140 <_ZN12mDNSResolver5Cache6oldestEv+0x2e>
      if(this->list[i].ttl < oldestTTL) {
   b712e:	fb06 f001 	mul.w	r0, r6, r1
   b7132:	5818      	ldr	r0, [r3, r0]
   b7134:	42a8      	cmp	r0, r5
        oldestTTL = this->list[i].ttl;
        oldestIndex = i;
   b7136:	bf3c      	itt	cc
   b7138:	460a      	movcc	r2, r1
      if(this->list[i].ttl < oldestTTL) {
   b713a:	4605      	movcc	r5, r0
    for(int i = 1; i < this->size; i++) {
   b713c:	3101      	adds	r1, #1
   b713e:	e7f4      	b.n	b712a <_ZN12mDNSResolver5Cache6oldestEv+0x18>
      }
    }

    return oldestIndex;
   b7140:	4610      	mov	r0, r2
  }
   b7142:	bd70      	pop	{r4, r5, r6, pc}
      return -1;
   b7144:	f04f 30ff 	mov.w	r0, #4294967295
   b7148:	e7fb      	b.n	b7142 <_ZN12mDNSResolver5Cache6oldestEv+0x30>

000b714a <_ZN12mDNSResolver5Cache11removeCnameEi>:

  void Cache::removeCname(int index) {
    Response *response = &this->list[index];
   b714a:	f44f 7392 	mov.w	r3, #292	; 0x124
   b714e:	fb03 0101 	mla	r1, r3, r1, r0
    return this->size;
   b7152:	f8d0 2490 	ldr.w	r2, [r0, #1168]	; 0x490

    for(int i = 0; i < length(); i++) {
   b7156:	2300      	movs	r3, #0
  void Cache::removeCname(int index) {
   b7158:	b530      	push	{r4, r5, lr}
      if(this->list[i].cname == response) {
        this->list[i].cname = NULL;
   b715a:	461c      	mov	r4, r3
    for(int i = 0; i < length(); i++) {
   b715c:	4293      	cmp	r3, r2
   b715e:	da09      	bge.n	b7174 <_ZN12mDNSResolver5Cache11removeCnameEi+0x2a>
      if(this->list[i].cname == response) {
   b7160:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   b7164:	428d      	cmp	r5, r1
        this->list[i].cname = NULL;
   b7166:	bf08      	it	eq
   b7168:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
    for(int i = 0; i < length(); i++) {
   b716c:	3301      	adds	r3, #1
   b716e:	f500 7092 	add.w	r0, r0, #292	; 0x124
   b7172:	e7f3      	b.n	b715c <_ZN12mDNSResolver5Cache11removeCnameEi+0x12>
      }
    }
  }
   b7174:	bd30      	pop	{r4, r5, pc}

000b7176 <_ZN12mDNSResolver5Cache6removeEi>:

  void Cache::remove(int index) {
   b7176:	b538      	push	{r3, r4, r5, lr}
   b7178:	4604      	mov	r4, r0
   b717a:	460d      	mov	r5, r1
    removeCname(index);
   b717c:	f7ff ffe5 	bl	b714a <_ZN12mDNSResolver5Cache11removeCnameEi>
    this->list[index] = this->list[this->size - 1];
   b7180:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
   b7184:	f44f 7092 	mov.w	r0, #292	; 0x124
   b7188:	3901      	subs	r1, #1
   b718a:	fb00 4101 	mla	r1, r0, r1, r4
   b718e:	fb00 4005 	mla	r0, r0, r5, r4
   b7192:	f7ff ff69 	bl	b7068 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size -= 1;
   b7196:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b719a:	3b01      	subs	r3, #1
   b719c:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b71a0:	bd38      	pop	{r3, r4, r5, pc}

000b71a2 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>:
  void Cache::insert(Response response) {
   b71a2:	b538      	push	{r3, r4, r5, lr}
   b71a4:	4604      	mov	r4, r0
   b71a6:	460d      	mov	r5, r1
    return search(response.name);
   b71a8:	f7ff ff96 	bl	b70d8 <_ZN12mDNSResolver5Cache6searchEPKc>
    if(existing != -1) {
   b71ac:	1c43      	adds	r3, r0, #1
   b71ae:	d008      	beq.n	b71c2 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x20>
      this->list[existing] = response;
   b71b0:	f44f 7392 	mov.w	r3, #292	; 0x124
   b71b4:	4629      	mov	r1, r5
   b71b6:	fb03 4000 	mla	r0, r3, r0, r4
  }
   b71ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      this->list[existing] = response;
   b71be:	f7ff bf53 	b.w	b7068 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    if(this->size == MDNS_RESOLVER_MAX_CACHE) {
   b71c2:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b71c6:	2b04      	cmp	r3, #4
   b71c8:	d106      	bne.n	b71d8 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x36>
      int i = oldest();
   b71ca:	4620      	mov	r0, r4
   b71cc:	f7ff ffa1 	bl	b7112 <_ZN12mDNSResolver5Cache6oldestEv>
   b71d0:	4601      	mov	r1, r0
      remove(i);
   b71d2:	4620      	mov	r0, r4
   b71d4:	f7ff ffcf 	bl	b7176 <_ZN12mDNSResolver5Cache6removeEi>
    this->list[this->size] = response;
   b71d8:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b71dc:	f44f 7092 	mov.w	r0, #292	; 0x124
   b71e0:	fb00 4003 	mla	r0, r0, r3, r4
   b71e4:	4629      	mov	r1, r5
   b71e6:	f7ff ff3f 	bl	b7068 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size += 1;
   b71ea:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b71ee:	3301      	adds	r3, #1
   b71f0:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b71f4:	bd38      	pop	{r3, r4, r5, pc}

000b71f6 <_ZN12mDNSResolver5Cache6expireEv>:
  void Cache::expire() {
   b71f6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b71fa:	466e      	mov	r6, sp
   b71fc:	4604      	mov	r4, r0
   b71fe:	4605      	mov	r5, r0
   b7200:	46b0      	mov	r8, r6
    for(int i = 0; i < this->size; i++) {
   b7202:	2700      	movs	r7, #0
   b7204:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b7208:	42bb      	cmp	r3, r7
   b720a:	dd0a      	ble.n	b7222 <_ZN12mDNSResolver5Cache6expireEv+0x2c>
      this->list[i].decrementTTL();
   b720c:	4628      	mov	r0, r5
   b720e:	f000 f85c 	bl	b72ca <_ZN12mDNSResolver8Response12decrementTTLEv>
      ttls[i] = this->list[i].ttl;
   b7212:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b7216:	f848 3b04 	str.w	r3, [r8], #4
    for(int i = 0; i < this->size; i++) {
   b721a:	3701      	adds	r7, #1
   b721c:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b7220:	e7f0      	b.n	b7204 <_ZN12mDNSResolver5Cache6expireEv+0xe>
    for(int i = 0; i < this->size; i++) {
   b7222:	2500      	movs	r5, #0
   b7224:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b7228:	42ab      	cmp	r3, r5
   b722a:	dd08      	ble.n	b723e <_ZN12mDNSResolver5Cache6expireEv+0x48>
      if(ttls[i] == 0) {
   b722c:	f856 3b04 	ldr.w	r3, [r6], #4
   b7230:	b91b      	cbnz	r3, b723a <_ZN12mDNSResolver5Cache6expireEv+0x44>
        remove(i);
   b7232:	4629      	mov	r1, r5
   b7234:	4620      	mov	r0, r4
   b7236:	f7ff ff9e 	bl	b7176 <_ZN12mDNSResolver5Cache6removeEi>
    for(int i = 0; i < this->size; i++) {
   b723a:	3501      	adds	r5, #1
   b723c:	e7f2      	b.n	b7224 <_ZN12mDNSResolver5Cache6expireEv+0x2e>
  }
   b723e:	b004      	add	sp, #16
   b7240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7244 <_ZN9IPAddressaSImEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7244:	b530      	push	{r4, r5, lr}
   b7246:	b087      	sub	sp, #28
   b7248:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b724a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b724c:	4668      	mov	r0, sp
   b724e:	f005 f851 	bl	bc2f4 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b7252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7254:	3404      	adds	r4, #4
   b7256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7258:	682b      	ldr	r3, [r5, #0]
   b725a:	7023      	strb	r3, [r4, #0]
    }
   b725c:	b007      	add	sp, #28
   b725e:	bd30      	pop	{r4, r5, pc}

000b7260 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b7260:	b538      	push	{r3, r4, r5, lr}
   b7262:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b7266:	4604      	mov	r4, r0
   b7268:	4628      	mov	r0, r5
   b726a:	f005 f823 	bl	bc2b4 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b726e:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b7270:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b7272:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b7274:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b7278:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b727c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b7280:	f04f 31ff 	mov.w	r1, #4294967295
   b7284:	f7ff ffde 	bl	b7244 <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b7288:	4620      	mov	r0, r4
   b728a:	bd38      	pop	{r3, r4, r5, pc}

000b728c <_ZN12mDNSResolver8ResponseC1EPKcm>:
    this->resolved = false;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
  }

  Response::Response(const char* name, unsigned long ttl) {
   b728c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b728e:	f500 7684 	add.w	r6, r0, #264	; 0x108
   b7292:	4604      	mov	r4, r0
   b7294:	4630      	mov	r0, r6
   b7296:	4615      	mov	r5, r2
   b7298:	9101      	str	r1, [sp, #4]
   b729a:	f005 f80b 	bl	bc2b4 <_ZN9IPAddressC1Ev>
    strncpy(this->name, name, MDNS_MAX_NAME_LEN + 1);
   b729e:	9901      	ldr	r1, [sp, #4]
   b72a0:	f44f 7280 	mov.w	r2, #256	; 0x100
   b72a4:	4620      	mov	r0, r4
   b72a6:	f006 f91e 	bl	bd4e6 <strncpy>
    this->name[MDNS_MAX_NAME_LEN + 1] = '\0';
    this->ttl = ttl;
    this->resolved = false;
   b72aa:	2300      	movs	r3, #0
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b72ac:	4630      	mov	r0, r6
    this->ttl = ttl;
   b72ae:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    this->resolved = false;
   b72b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->cname = NULL;
   b72b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b72ba:	f04f 31ff 	mov.w	r1, #4294967295
   b72be:	f7ff ffc1 	bl	b7244 <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b72c2:	4620      	mov	r0, r4
   b72c4:	b002      	add	sp, #8
   b72c6:	bd70      	pop	{r4, r5, r6, pc}

000b72c8 <_ZN12mDNSResolver8ResponseD1Ev>:

  Response::~Response() {
  }
   b72c8:	4770      	bx	lr

000b72ca <_ZN12mDNSResolver8Response12decrementTTLEv>:

  void Response::decrementTTL() {
    if(this->ttl > 0) {
   b72ca:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b72ce:	2b00      	cmp	r3, #0
      this->ttl--;
   b72d0:	bfc4      	itt	gt
   b72d2:	f103 33ff 	addgt.w	r3, r3, #4294967295
   b72d6:	f8c0 3100 	strgt.w	r3, [r0, #256]	; 0x100
    }
  }
   b72da:	4770      	bx	lr

000b72dc <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b72dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72de:	4604      	mov	r4, r0
   b72e0:	3004      	adds	r0, #4
   b72e2:	460d      	mov	r5, r1
   b72e4:	f002 fd34 	bl	b9d50 <_ZN3UDPC1Ev>
   b72e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b72ec:	f004 ffe2 	bl	bc2b4 <_ZN9IPAddressC1Ev>
    timeout = 0;
   b72f0:	2300      	movs	r3, #0
   b72f2:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b72f4:	686b      	ldr	r3, [r5, #4]
   b72f6:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b72f8:	68ab      	ldr	r3, [r5, #8]
   b72fa:	60e3      	str	r3, [r4, #12]
   b72fc:	68eb      	ldr	r3, [r5, #12]
   b72fe:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b7300:	696b      	ldr	r3, [r5, #20]
   b7302:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b7304:	f105 0720 	add.w	r7, r5, #32
   b7308:	8b2b      	ldrh	r3, [r5, #24]
   b730a:	83a3      	strh	r3, [r4, #28]
   b730c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b730e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b7312:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7314:	683b      	ldr	r3, [r7, #0]
   b7316:	7033      	strb	r3, [r6, #0]
   b7318:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b731a:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b731c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b731e:	6423      	str	r3, [r4, #64]	; 0x40
   b7320:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b7322:	6463      	str	r3, [r4, #68]	; 0x44
   b7324:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b7326:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b7328:	64a3      	str	r3, [r4, #72]	; 0x48
   b732a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b732e:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b7330:	4620      	mov	r0, r4
   b7332:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b7336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7338 <_ZN12mDNSResolver8Resolver5queryEPKc>:
	init = false;
	// Serial.println("Search return 2");
    return INADDR_NONE;
  }

  void Resolver::query(const char* name) {
   b7338:	b510      	push	{r4, lr}
   b733a:	b08a      	sub	sp, #40	; 0x28
   b733c:	4604      	mov	r4, r0
	  // Serial.println("Query");
    Query query(name);
   b733e:	a803      	add	r0, sp, #12
   b7340:	f7ff fc00 	bl	b6b44 <_ZN12mDNSResolver5QueryC1EPKc>
    udp.beginPacket(MDNS_BROADCAST_IP, MDNS_PORT);		//Peet
   b7344:	23fb      	movs	r3, #251	; 0xfb
   b7346:	9300      	str	r3, [sp, #0]
   b7348:	2300      	movs	r3, #0
   b734a:	461a      	mov	r2, r3
   b734c:	3404      	adds	r4, #4
   b734e:	21e0      	movs	r1, #224	; 0xe0
   b7350:	a804      	add	r0, sp, #16
   b7352:	f004 fffb 	bl	bc34c <_ZN9IPAddressC1Ehhhh>
   b7356:	f241 42e9 	movw	r2, #5353	; 0x14e9
   b735a:	a904      	add	r1, sp, #16
   b735c:	4620      	mov	r0, r4
   b735e:	f002 fd45 	bl	b9dec <_ZN3UDP11beginPacketE9IPAddresst>
    query.sendPacket(udp);
   b7362:	4621      	mov	r1, r4
   b7364:	a803      	add	r0, sp, #12
   b7366:	f7ff fc2f 	bl	b6bc8 <_ZN12mDNSResolver5Query10sendPacketER3UDP>
    udp.endPacket();
   b736a:	4620      	mov	r0, r4
   b736c:	f002 fa5a 	bl	b9824 <_ZN3UDP9endPacketEv>
    Query query(name);
   b7370:	a803      	add	r0, sp, #12
   b7372:	f7ff fbe9 	bl	b6b48 <_ZN12mDNSResolver5QueryD1Ev>
  }
   b7376:	b00a      	add	sp, #40	; 0x28
   b7378:	bd10      	pop	{r4, pc}
	...

000b737c <_ZN12mDNSResolver8Resolver4readEv>:
      free(buffer);
    }
	// Serial.println("mDNS2");
  }

  MDNS_RESULT Resolver::read() {
   b737c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b737e:	4605      	mov	r5, r0
   b7380:	b089      	sub	sp, #36	; 0x24
    cache.expire();
   b7382:	482d      	ldr	r0, [pc, #180]	; (b7438 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b7384:	f7ff ff37 	bl	b71f6 <_ZN12mDNSResolver5Cache6expireEv>

    if(!init) {
   b7388:	f895 4068 	ldrb.w	r4, [r5, #104]	; 0x68
      init = true;
	  Serial.println("Begin Multicast");
	  udp.begin(5353);
   b738c:	1d2f      	adds	r7, r5, #4
    if(!init) {
   b738e:	bb54      	cbnz	r4, b73e6 <_ZN12mDNSResolver8Resolver4readEv+0x6a>
      init = true;
   b7390:	2301      	movs	r3, #1
   b7392:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	  Serial.println("Begin Multicast");
   b7396:	f005 f84f 	bl	bc438 <_Z16_fetch_usbserialv>
   b739a:	4928      	ldr	r1, [pc, #160]	; (b743c <_ZN12mDNSResolver8Resolver4readEv+0xc0>)
   b739c:	f004 f9bf 	bl	bb71e <_ZN5Print7printlnEPKc>
	  udp.begin(5353);
   b73a0:	4622      	mov	r2, r4
   b73a2:	f241 41e9 	movw	r1, #5353	; 0x14e9
   b73a6:	4638      	mov	r0, r7
   b73a8:	f002 fa96 	bl	b98d8 <_ZN3UDP5beginEtm>
      Serial.println(udp.joinMulticast(MDNS_BROADCAST_IP));	  //Peet
   b73ac:	f005 f844 	bl	bc438 <_Z16_fetch_usbserialv>
   b73b0:	23fb      	movs	r3, #251	; 0xfb
   b73b2:	4622      	mov	r2, r4
   b73b4:	9300      	str	r3, [sp, #0]
   b73b6:	21e0      	movs	r1, #224	; 0xe0
   b73b8:	4623      	mov	r3, r4
   b73ba:	4606      	mov	r6, r0
   b73bc:	a802      	add	r0, sp, #8
   b73be:	f004 ffc5 	bl	bc34c <_ZN9IPAddressC1Ehhhh>
   b73c2:	a902      	add	r1, sp, #8
   b73c4:	4638      	mov	r0, r7
   b73c6:	f002 fd65 	bl	b9e94 <_ZN3UDP13joinMulticastERK9IPAddress>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b73ca:	1e04      	subs	r4, r0, #0
   b73cc:	da1d      	bge.n	b740a <_ZN12mDNSResolver8Resolver4readEv+0x8e>
            t = print('-');
   b73ce:	212d      	movs	r1, #45	; 0x2d
   b73d0:	4630      	mov	r0, r6
   b73d2:	f004 f98f 	bl	bb6f4 <_ZN5Print5printEc>
            val = -n;
   b73d6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b73d8:	220a      	movs	r2, #10
   b73da:	4630      	mov	r0, r6
   b73dc:	f004 f9b3 	bl	bb746 <_ZN5Print11printNumberEmh>
        n += println();
   b73e0:	4630      	mov	r0, r6
   b73e2:	f004 f990 	bl	bb706 <_ZN5Print7printlnEv>
    }

    unsigned int len = udp.parsePacket();
   b73e6:	2100      	movs	r1, #0
   b73e8:	4638      	mov	r0, r7
   b73ea:	f002 fd16 	bl	b9e1a <_ZN3UDP11parsePacketEm>

    if(len > 0) {
   b73ee:	4606      	mov	r6, r0
   b73f0:	b300      	cbz	r0, b7434 <_ZN12mDNSResolver8Resolver4readEv+0xb8>
      unsigned char *buffer = (unsigned char *)malloc(sizeof(unsigned char) * len);
   b73f2:	f002 f893 	bl	b951c <malloc>

      if(buffer == NULL) {
   b73f6:	4604      	mov	r4, r0
   b73f8:	b948      	cbnz	r0, b740e <_ZN12mDNSResolver8Resolver4readEv+0x92>
        // Out of memory - the packet is probably too big to parse. Probably.
        // Silently bombing out, possibly isn't great, but it'll do for the moment.
		Serial.println("Out of memory");
   b73fa:	f005 f81d 	bl	bc438 <_Z16_fetch_usbserialv>
   b73fe:	4910      	ldr	r1, [pc, #64]	; (b7440 <_ZN12mDNSResolver8Resolver4readEv+0xc4>)
   b7400:	f004 f98d 	bl	bb71e <_ZN5Print7printlnEPKc>
        return E_MDNS_OUT_OF_MEMORY;
   b7404:	2027      	movs	r0, #39	; 0x27
      return lastResult;
    }
	// Serial.println("Read return 2");
	// init = false;
    return E_MDNS_OK;
  }
   b7406:	b009      	add	sp, #36	; 0x24
   b7408:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b740a:	4621      	mov	r1, r4
   b740c:	e7e4      	b.n	b73d8 <_ZN12mDNSResolver8Resolver4readEv+0x5c>
      udp.read(buffer, len);
   b740e:	4601      	mov	r1, r0
   b7410:	4632      	mov	r2, r6
   b7412:	4638      	mov	r0, r7
   b7414:	f002 facf 	bl	b99b6 <_ZN3UDP4readEPhj>
	  udp.flush();
   b7418:	4638      	mov	r0, r7
   b741a:	f002 fa4b 	bl	b98b4 <_ZN3UDP5flushEv>
      lastResult = Answer::process(buffer, len, cache);
   b741e:	4a06      	ldr	r2, [pc, #24]	; (b7438 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b7420:	4631      	mov	r1, r6
   b7422:	4620      	mov	r0, r4
   b7424:	f7ff fdeb 	bl	b6ffe <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>
   b7428:	6028      	str	r0, [r5, #0]
      free(buffer);
   b742a:	4620      	mov	r0, r4
   b742c:	f002 f87e 	bl	b952c <free>
      return lastResult;
   b7430:	6828      	ldr	r0, [r5, #0]
   b7432:	e7e8      	b.n	b7406 <_ZN12mDNSResolver8Resolver4readEv+0x8a>
    return E_MDNS_OK;
   b7434:	2020      	movs	r0, #32
   b7436:	e7e6      	b.n	b7406 <_ZN12mDNSResolver8Resolver4readEv+0x8a>
   b7438:	2003e1b8 	.word	0x2003e1b8
   b743c:	000bfdc6 	.word	0x000bfdc6
   b7440:	000bfdd6 	.word	0x000bfdd6

000b7444 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>:

  bool Resolver::isMDNSName(const char* name) {
   b7444:	b510      	push	{r4, lr}
    int len = strlen(name);
   b7446:	4608      	mov	r0, r1
  bool Resolver::isMDNSName(const char* name) {
   b7448:	460c      	mov	r4, r1
    int len = strlen(name);
   b744a:	f7fd fae3 	bl	b4a14 <strlen>
    int tldLen = strlen(MDNS_TLD);
	
	// Serial.println("LOll");
    if(len < tldLen) {
   b744e:	2805      	cmp	r0, #5
   b7450:	d908      	bls.n	b7464 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x20>
      return false;
    }
	// Serial.println("LOLO");
    return strcmp(name + len - tldLen, MDNS_TLD) == 0;
   b7452:	3806      	subs	r0, #6
   b7454:	4904      	ldr	r1, [pc, #16]	; (b7468 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x24>)
   b7456:	4420      	add	r0, r4
   b7458:	f7fd fad2 	bl	b4a00 <strcmp>
   b745c:	fab0 f080 	clz	r0, r0
   b7460:	0940      	lsrs	r0, r0, #5
  }
   b7462:	bd10      	pop	{r4, pc}
      return false;
   b7464:	2000      	movs	r0, #0
   b7466:	e7fc      	b.n	b7462 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x1e>
   b7468:	000bfb57 	.word	0x000bfb57

000b746c <_ZN12mDNSResolver8Resolver6searchEPKc>:
  IPAddress Resolver::search(const char* name) {
   b746c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7470:	460c      	mov	r4, r1
   b7472:	b0cd      	sub	sp, #308	; 0x134
   b7474:	4606      	mov	r6, r0
    if(!isMDNSName(name)) {
   b7476:	4611      	mov	r1, r2
   b7478:	4620      	mov	r0, r4
  IPAddress Resolver::search(const char* name) {
   b747a:	4615      	mov	r5, r2
    if(!isMDNSName(name)) {
   b747c:	f7ff ffe2 	bl	b7444 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>
   b7480:	b950      	cbnz	r0, b7498 <_ZN12mDNSResolver8Resolver6searchEPKc+0x2c>
	Serial.println("not valid");
   b7482:	f004 ffd9 	bl	bc438 <_Z16_fetch_usbserialv>
   b7486:	4938      	ldr	r1, [pc, #224]	; (b7568 <_ZN12mDNSResolver8Resolver6searchEPKc+0xfc>)
   b7488:	f004 f949 	bl	bb71e <_ZN5Print7printlnEPKc>
    return INADDR_NONE;
   b748c:	f04f 31ff 	mov.w	r1, #4294967295
   b7490:	4630      	mov	r0, r6
   b7492:	f004 ff2f 	bl	bc2f4 <_ZN9IPAddressC1Em>
   b7496:	e04d      	b.n	b7534 <_ZN12mDNSResolver8Resolver6searchEPKc+0xc8>
    cache.expire();
   b7498:	4834      	ldr	r0, [pc, #208]	; (b756c <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
      int index = cache.search(name);
   b749a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b756c <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>
    cache.expire();
   b749e:	f7ff feaa 	bl	b71f6 <_ZN12mDNSResolver5Cache6expireEv>
    int attempts = 0;
   b74a2:	f04f 0800 	mov.w	r8, #0
      int index = cache.search(name);
   b74a6:	4629      	mov	r1, r5
   b74a8:	4648      	mov	r0, r9
   b74aa:	f7ff fe15 	bl	b70d8 <_ZN12mDNSResolver5Cache6searchEPKc>
      if(index == -1) {
   b74ae:	1c43      	adds	r3, r0, #1
      int index = cache.search(name);
   b74b0:	4607      	mov	r7, r0
      if(index == -1) {
   b74b2:	d11e      	bne.n	b74f2 <_ZN12mDNSResolver8Resolver6searchEPKc+0x86>
        cache.insert(Response(name, 5));			//ttl = 5
   b74b4:	2205      	movs	r2, #5
   b74b6:	4629      	mov	r1, r5
   b74b8:	a803      	add	r0, sp, #12
   b74ba:	f7ff fee7 	bl	b728c <_ZN12mDNSResolver8ResponseC1EPKcm>
   b74be:	4648      	mov	r0, r9
   b74c0:	a903      	add	r1, sp, #12
   b74c2:	f7ff fe6e 	bl	b71a2 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b74c6:	a803      	add	r0, sp, #12
   b74c8:	f7ff fefe 	bl	b72c8 <_ZN12mDNSResolver8ResponseD1Ev>
    while(attempts < MDNS_ATTEMPTS) {
   b74cc:	f1b8 0f05 	cmp.w	r8, #5
   b74d0:	d1e9      	bne.n	b74a6 <_ZN12mDNSResolver8Resolver6searchEPKc+0x3a>
	udp.leaveMulticast(MDNS_BROADCAST_IP);
   b74d2:	23fb      	movs	r3, #251	; 0xfb
   b74d4:	9300      	str	r3, [sp, #0]
   b74d6:	2300      	movs	r3, #0
   b74d8:	461a      	mov	r2, r3
   b74da:	21e0      	movs	r1, #224	; 0xe0
   b74dc:	a803      	add	r0, sp, #12
   b74de:	f004 ff35 	bl	bc34c <_ZN9IPAddressC1Ehhhh>
   b74e2:	a903      	add	r1, sp, #12
   b74e4:	1d20      	adds	r0, r4, #4
   b74e6:	f002 fce6 	bl	b9eb6 <_ZN3UDP14leaveMulticastERK9IPAddress>
	init = false;
   b74ea:	2300      	movs	r3, #0
   b74ec:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b74f0:	e7cc      	b.n	b748c <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
      } else if(cache[index].resolved) {
   b74f2:	4601      	mov	r1, r0
   b74f4:	4648      	mov	r0, r9
   b74f6:	f7ff fdea 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b74fa:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   b74fe:	b1eb      	cbz	r3, b753c <_ZN12mDNSResolver8Resolver6searchEPKc+0xd0>
		  udp.leaveMulticast(MDNS_BROADCAST_IP);
   b7500:	23fb      	movs	r3, #251	; 0xfb
   b7502:	9300      	str	r3, [sp, #0]
   b7504:	2300      	movs	r3, #0
   b7506:	461a      	mov	r2, r3
   b7508:	21e0      	movs	r1, #224	; 0xe0
   b750a:	a803      	add	r0, sp, #12
   b750c:	f004 ff1e 	bl	bc34c <_ZN9IPAddressC1Ehhhh>
   b7510:	a903      	add	r1, sp, #12
   b7512:	1d20      	adds	r0, r4, #4
   b7514:	f002 fccf 	bl	b9eb6 <_ZN3UDP14leaveMulticastERK9IPAddress>
        return cache[index].ipAddress;
   b7518:	4639      	mov	r1, r7
   b751a:	4814      	ldr	r0, [pc, #80]	; (b756c <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
   b751c:	f7ff fdd7 	bl	b70ce <_ZN12mDNSResolver5CacheixEi>
   b7520:	4634      	mov	r4, r6
   b7522:	4b13      	ldr	r3, [pc, #76]	; (b7570 <_ZN12mDNSResolver8Resolver6searchEPKc+0x104>)
   b7524:	f844 3b04 	str.w	r3, [r4], #4
   b7528:	f500 7586 	add.w	r5, r0, #268	; 0x10c
   b752c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b752e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7530:	682b      	ldr	r3, [r5, #0]
   b7532:	7023      	strb	r3, [r4, #0]
  }
   b7534:	4630      	mov	r0, r6
   b7536:	b04d      	add	sp, #308	; 0x134
   b7538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b753c:	f001 fca0 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
      if(now - timeout > MDNS_RETRY) {
   b7540:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7542:	1ac3      	subs	r3, r0, r3
   b7544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b7548:	4607      	mov	r7, r0
   b754a:	dd06      	ble.n	b755a <_ZN12mDNSResolver8Resolver6searchEPKc+0xee>
        query(name);
   b754c:	4629      	mov	r1, r5
   b754e:	4620      	mov	r0, r4
   b7550:	f7ff fef2 	bl	b7338 <_ZN12mDNSResolver8Resolver5queryEPKc>
        attempts++;
   b7554:	f108 0801 	add.w	r8, r8, #1
        timeout = now;
   b7558:	66e7      	str	r7, [r4, #108]	; 0x6c
      MDNS_RESULT result = read();
   b755a:	4620      	mov	r0, r4
   b755c:	f7ff ff0e 	bl	b737c <_ZN12mDNSResolver8Resolver4readEv>
      if(result != E_MDNS_OK) {
   b7560:	2820      	cmp	r0, #32
   b7562:	d0b3      	beq.n	b74cc <_ZN12mDNSResolver8Resolver6searchEPKc+0x60>
   b7564:	e792      	b.n	b748c <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
   b7566:	bf00      	nop
   b7568:	000bfde4 	.word	0x000bfde4
   b756c:	2003e1b8 	.word	0x2003e1b8
   b7570:	000c027c 	.word	0x000c027c

000b7574 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b7574:	4801      	ldr	r0, [pc, #4]	; (b757c <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b7576:	f7ff bd99 	b.w	b70ac <_ZN12mDNSResolver5CacheC1Ev>
   b757a:	bf00      	nop
   b757c:	2003e1b8 	.word	0x2003e1b8

000b7580 <parse_hex4>:
static unsigned parse_hex4(const unsigned char * const input)
{
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
   b7580:	2200      	movs	r2, #0
{
   b7582:	b510      	push	{r4, lr}
   b7584:	4604      	mov	r4, r0
    unsigned int h = 0;
   b7586:	4610      	mov	r0, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
   b7588:	5ca1      	ldrb	r1, [r4, r2]
   b758a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   b758e:	2b09      	cmp	r3, #9
   b7590:	d80b      	bhi.n	b75aa <parse_hex4+0x2a>
        {
            h += (unsigned int) input[i] - '0';
   b7592:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
   b7596:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   b7598:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   b759c:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
   b75a0:	bf18      	it	ne
   b75a2:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   b75a4:	2a04      	cmp	r2, #4
   b75a6:	d1ef      	bne.n	b7588 <parse_hex4+0x8>
        }
    }

    return h;
}
   b75a8:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   b75aa:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   b75ae:	2b05      	cmp	r3, #5
   b75b0:	d802      	bhi.n	b75b8 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   b75b2:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   b75b6:	e7ee      	b.n	b7596 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   b75b8:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   b75bc:	2b05      	cmp	r3, #5
   b75be:	d802      	bhi.n	b75c6 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   b75c0:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   b75c4:	e7e7      	b.n	b7596 <parse_hex4+0x16>
            return 0;
   b75c6:	2000      	movs	r0, #0
   b75c8:	e7ee      	b.n	b75a8 <parse_hex4+0x28>
	...

000b75cc <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
   b75cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b75d0:	680a      	ldr	r2, [r1, #0]
   b75d2:	688b      	ldr	r3, [r1, #8]
{
   b75d4:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b75d6:	1c5d      	adds	r5, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
   b75d8:	18d0      	adds	r0, r2, r3
   b75da:	5cd3      	ldrb	r3, [r2, r3]
   b75dc:	2b22      	cmp	r3, #34	; 0x22
{
   b75de:	468a      	mov	sl, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b75e0:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   b75e2:	f040 80dd 	bne.w	b77a0 <parse_string+0x1d4>

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   b75e6:	684c      	ldr	r4, [r1, #4]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b75e8:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   b75ea:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   b75ec:	1ab9      	subs	r1, r7, r2
   b75ee:	42a1      	cmp	r1, r4
   b75f0:	f080 80d6 	bcs.w	b77a0 <parse_string+0x1d4>
   b75f4:	7839      	ldrb	r1, [r7, #0]
   b75f6:	2922      	cmp	r1, #34	; 0x22
   b75f8:	d10e      	bne.n	b7618 <parse_string+0x4c>
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   b75fa:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   b75fe:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   b7600:	f8da 2010 	ldr.w	r2, [sl, #16]
   b7604:	4418      	add	r0, r3
   b7606:	4790      	blx	r2
        if (output == NULL)
   b7608:	4683      	mov	fp, r0
   b760a:	2800      	cmp	r0, #0
   b760c:	f000 80c8 	beq.w	b77a0 <parse_string+0x1d4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   b7610:	f8df 9198 	ldr.w	r9, [pc, #408]	; b77ac <parse_string+0x1e0>
   b7614:	4604      	mov	r4, r0
   b7616:	e00f      	b.n	b7638 <parse_string+0x6c>
            if (input_end[0] == '\\')
   b7618:	295c      	cmp	r1, #92	; 0x5c
   b761a:	d105      	bne.n	b7628 <parse_string+0x5c>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   b761c:	3701      	adds	r7, #1
   b761e:	1ab9      	subs	r1, r7, r2
   b7620:	428c      	cmp	r4, r1
   b7622:	f240 80bd 	bls.w	b77a0 <parse_string+0x1d4>
                skipped_bytes++;
   b7626:	3301      	adds	r3, #1
            input_end++;
   b7628:	3701      	adds	r7, #1
   b762a:	e7df      	b.n	b75ec <parse_string+0x20>

    output_pointer = output;
    /* loop through the string literal */
    while (input_pointer < input_end)
    {
        if (*input_pointer != '\\')
   b762c:	782b      	ldrb	r3, [r5, #0]
   b762e:	2b5c      	cmp	r3, #92	; 0x5c
   b7630:	d012      	beq.n	b7658 <parse_string+0x8c>
        {
            *output_pointer++ = *input_pointer++;
   b7632:	f804 3b01 	strb.w	r3, [r4], #1
   b7636:	3501      	adds	r5, #1
    while (input_pointer < input_end)
   b7638:	42bd      	cmp	r5, r7
   b763a:	d3f7      	bcc.n	b762c <parse_string+0x60>
            input_pointer += sequence_length;
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
   b763c:	2300      	movs	r3, #0
   b763e:	7023      	strb	r3, [r4, #0]

    item->type = cJSON_String;
   b7640:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
   b7642:	e9c8 3b03 	strd	r3, fp, [r8, #12]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   b7646:	f8da 3000 	ldr.w	r3, [sl]
   b764a:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
   b764c:	3301      	adds	r3, #1
   b764e:	f8ca 3008 	str.w	r3, [sl, #8]

    return true;
   b7652:	2001      	movs	r0, #1
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
}
   b7654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   b7658:	1b7a      	subs	r2, r7, r5
   b765a:	2a00      	cmp	r2, #0
   b765c:	dd0d      	ble.n	b767a <parse_string+0xae>
            switch (input_pointer[1])
   b765e:	786b      	ldrb	r3, [r5, #1]
   b7660:	2b75      	cmp	r3, #117	; 0x75
   b7662:	d80a      	bhi.n	b767a <parse_string+0xae>
   b7664:	2b6d      	cmp	r3, #109	; 0x6d
   b7666:	d812      	bhi.n	b768e <parse_string+0xc2>
   b7668:	2b62      	cmp	r3, #98	; 0x62
   b766a:	d02b      	beq.n	b76c4 <parse_string+0xf8>
   b766c:	d826      	bhi.n	b76bc <parse_string+0xf0>
   b766e:	2b2f      	cmp	r3, #47	; 0x2f
   b7670:	d029      	beq.n	b76c6 <parse_string+0xfa>
   b7672:	2b5c      	cmp	r3, #92	; 0x5c
   b7674:	d027      	beq.n	b76c6 <parse_string+0xfa>
   b7676:	2b22      	cmp	r3, #34	; 0x22
   b7678:	d025      	beq.n	b76c6 <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   b767a:	f8da 3014 	ldr.w	r3, [sl, #20]
   b767e:	4658      	mov	r0, fp
   b7680:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   b7682:	f8da 0000 	ldr.w	r0, [sl]
   b7686:	1a28      	subs	r0, r5, r0
   b7688:	f8ca 0008 	str.w	r0, [sl, #8]
   b768c:	e08b      	b.n	b77a6 <parse_string+0x1da>
   b768e:	3b6e      	subs	r3, #110	; 0x6e
   b7690:	2b07      	cmp	r3, #7
   b7692:	d8f2      	bhi.n	b767a <parse_string+0xae>
   b7694:	a101      	add	r1, pc, #4	; (adr r1, b769c <parse_string+0xd0>)
   b7696:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   b769a:	bf00      	nop
   b769c:	000b76d1 	.word	0x000b76d1
   b76a0:	000b767b 	.word	0x000b767b
   b76a4:	000b767b 	.word	0x000b767b
   b76a8:	000b767b 	.word	0x000b767b
   b76ac:	000b76d5 	.word	0x000b76d5
   b76b0:	000b767b 	.word	0x000b767b
   b76b4:	000b76d9 	.word	0x000b76d9
   b76b8:	000b76dd 	.word	0x000b76dd
            switch (input_pointer[1])
   b76bc:	2b66      	cmp	r3, #102	; 0x66
   b76be:	d1dc      	bne.n	b767a <parse_string+0xae>
                    *output_pointer++ = '\f';
   b76c0:	230c      	movs	r3, #12
   b76c2:	e000      	b.n	b76c6 <parse_string+0xfa>
                    *output_pointer++ = '\b';
   b76c4:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   b76c6:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   b76ca:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   b76cc:	441d      	add	r5, r3
   b76ce:	e7b3      	b.n	b7638 <parse_string+0x6c>
                    *output_pointer++ = '\n';
   b76d0:	230a      	movs	r3, #10
   b76d2:	e7f8      	b.n	b76c6 <parse_string+0xfa>
                    *output_pointer++ = '\r';
   b76d4:	230d      	movs	r3, #13
   b76d6:	e7f6      	b.n	b76c6 <parse_string+0xfa>
                    *output_pointer++ = '\t';
   b76d8:	2309      	movs	r3, #9
   b76da:	e7f4      	b.n	b76c6 <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   b76dc:	2a05      	cmp	r2, #5
   b76de:	ddcc      	ble.n	b767a <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   b76e0:	1ca8      	adds	r0, r5, #2
   b76e2:	f7ff ff4d 	bl	b7580 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   b76e6:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   b76ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   b76ee:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   b76f0:	d3c3      	bcc.n	b767a <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   b76f2:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   b76f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b76fa:	d22d      	bcs.n	b7758 <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   b76fc:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   b76fe:	1afb      	subs	r3, r7, r3
   b7700:	2b05      	cmp	r3, #5
   b7702:	ddba      	ble.n	b767a <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   b7704:	79ab      	ldrb	r3, [r5, #6]
   b7706:	2b5c      	cmp	r3, #92	; 0x5c
   b7708:	d1b7      	bne.n	b767a <parse_string+0xae>
   b770a:	79eb      	ldrb	r3, [r5, #7]
   b770c:	2b75      	cmp	r3, #117	; 0x75
   b770e:	d1b4      	bne.n	b767a <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   b7710:	f105 0008 	add.w	r0, r5, #8
   b7714:	f7ff ff34 	bl	b7580 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   b7718:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   b771c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b7720:	d2ab      	bcs.n	b767a <parse_string+0xae>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   b7722:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   b7726:	f3c0 0009 	ubfx	r0, r0, #0, #10
   b772a:	4330      	orrs	r0, r6
   b772c:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
   b7730:	230c      	movs	r3, #12
        first_byte_mark = 0xF0; /* 11110000 */
   b7732:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   b7736:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b7738:	f100 3eff 	add.w	lr, r0, #4294967295
   b773c:	fa54 fe8e 	uxtab	lr, r4, lr
   b7740:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   b7742:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b7744:	d124      	bne.n	b7790 <parse_string+0x1c4>
    if (utf8_length > 1)
   b7746:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   b7748:	bf14      	ite	ne
   b774a:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   b774e:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   b7752:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   b7754:	4404      	add	r4, r0
                    if (sequence_length == 0)
   b7756:	e7b9      	b.n	b76cc <parse_string+0x100>
    if (codepoint < 0x80)
   b7758:	287f      	cmp	r0, #127	; 0x7f
   b775a:	d90a      	bls.n	b7772 <parse_string+0x1a6>
    else if (codepoint < 0x800)
   b775c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   b7760:	d30c      	bcc.n	b777c <parse_string+0x1b0>
    else if (codepoint < 0x10000)
   b7762:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   b7766:	d30e      	bcc.n	b7786 <parse_string+0x1ba>
    else if (codepoint <= 0x10FFFF)
   b7768:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   b776c:	d285      	bcs.n	b767a <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   b776e:	2306      	movs	r3, #6
   b7770:	e7df      	b.n	b7732 <parse_string+0x166>
   b7772:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   b7774:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   b7778:	2001      	movs	r0, #1
   b777a:	e7dd      	b.n	b7738 <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   b777c:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   b777e:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   b7782:	2002      	movs	r0, #2
   b7784:	e7d8      	b.n	b7738 <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   b7786:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   b7788:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   b778c:	2003      	movs	r0, #3
   b778e:	e7d3      	b.n	b7738 <parse_string+0x16c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   b7790:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   b7794:	f062 017f 	orn	r1, r2, #127	; 0x7f
   b7798:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
   b779c:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b779e:	e7cf      	b.n	b7740 <parse_string+0x174>
    if (input_pointer != NULL)
   b77a0:	2d00      	cmp	r5, #0
   b77a2:	f47f af6e 	bne.w	b7682 <parse_string+0xb6>
    return false;
   b77a6:	2000      	movs	r0, #0
   b77a8:	e754      	b.n	b7654 <parse_string+0x88>
   b77aa:	bf00      	nop
   b77ac:	000ffc00 	.word	0x000ffc00

000b77b0 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
   b77b0:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   b77b2:	b140      	cbz	r0, b77c6 <buffer_skip_whitespace+0x16>
   b77b4:	6801      	ldr	r1, [r0, #0]
   b77b6:	b171      	cbz	r1, b77d6 <buffer_skip_whitespace+0x26>
    {
        return NULL;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   b77b8:	6842      	ldr	r2, [r0, #4]
   b77ba:	6883      	ldr	r3, [r0, #8]
   b77bc:	4293      	cmp	r3, r2
   b77be:	d206      	bcs.n	b77ce <buffer_skip_whitespace+0x1e>
   b77c0:	5ccc      	ldrb	r4, [r1, r3]
   b77c2:	2c20      	cmp	r4, #32
   b77c4:	d900      	bls.n	b77c8 <buffer_skip_whitespace+0x18>
    {
        buffer->offset--;
    }

    return buffer;
}
   b77c6:	bd10      	pop	{r4, pc}
       buffer->offset++;
   b77c8:	3301      	adds	r3, #1
   b77ca:	6083      	str	r3, [r0, #8]
   b77cc:	e7f5      	b.n	b77ba <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   b77ce:	d1fa      	bne.n	b77c6 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   b77d0:	3a01      	subs	r2, #1
   b77d2:	6082      	str	r2, [r0, #8]
   b77d4:	e7f7      	b.n	b77c6 <buffer_skip_whitespace+0x16>
        return NULL;
   b77d6:	4608      	mov	r0, r1
   b77d8:	e7f5      	b.n	b77c6 <buffer_skip_whitespace+0x16>

000b77da <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
    cJSON *current_child = NULL;

    if (array == NULL)
   b77da:	b110      	cbz	r0, b77e2 <get_array_item+0x8>
    {
        return NULL;
    }

    current_child = array->child;
   b77dc:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   b77de:	b100      	cbz	r0, b77e2 <get_array_item+0x8>
   b77e0:	b901      	cbnz	r1, b77e4 <get_array_item+0xa>
        index--;
        current_child = current_child->next;
    }

    return current_child;
}
   b77e2:	4770      	bx	lr
        current_child = current_child->next;
   b77e4:	6800      	ldr	r0, [r0, #0]
        index--;
   b77e6:	3901      	subs	r1, #1
        current_child = current_child->next;
   b77e8:	e7f9      	b.n	b77de <get_array_item+0x4>

000b77ea <update_offset>:
{
   b77ea:	b538      	push	{r3, r4, r5, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   b77ec:	4604      	mov	r4, r0
   b77ee:	b138      	cbz	r0, b7800 <update_offset+0x16>
   b77f0:	6800      	ldr	r0, [r0, #0]
   b77f2:	b128      	cbz	r0, b7800 <update_offset+0x16>
    buffer_pointer = buffer->buffer + buffer->offset;
   b77f4:	68a5      	ldr	r5, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   b77f6:	4428      	add	r0, r5
   b77f8:	f7fd f90c 	bl	b4a14 <strlen>
   b77fc:	4428      	add	r0, r5
   b77fe:	60a0      	str	r0, [r4, #8]
}
   b7800:	bd38      	pop	{r3, r4, r5, pc}

000b7802 <ensure>:
{
   b7802:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   b7804:	4604      	mov	r4, r0
   b7806:	b1b8      	cbz	r0, b7838 <ensure+0x36>
   b7808:	6805      	ldr	r5, [r0, #0]
   b780a:	b165      	cbz	r5, b7826 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   b780c:	6843      	ldr	r3, [r0, #4]
   b780e:	b113      	cbz	r3, b7816 <ensure+0x14>
   b7810:	6882      	ldr	r2, [r0, #8]
   b7812:	4293      	cmp	r3, r2
   b7814:	d910      	bls.n	b7838 <ensure+0x36>
    if (needed > INT_MAX)
   b7816:	2900      	cmp	r1, #0
   b7818:	db0e      	blt.n	b7838 <ensure+0x36>
    needed += p->offset + 1;
   b781a:	68a2      	ldr	r2, [r4, #8]
   b781c:	1c4e      	adds	r6, r1, #1
   b781e:	4416      	add	r6, r2
    if (needed <= p->length)
   b7820:	42b3      	cmp	r3, r6
   b7822:	d302      	bcc.n	b782a <ensure+0x28>
        return p->buffer + p->offset;
   b7824:	4415      	add	r5, r2
}
   b7826:	4628      	mov	r0, r5
   b7828:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   b782a:	6923      	ldr	r3, [r4, #16]
   b782c:	b923      	cbnz	r3, b7838 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   b782e:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   b7832:	d303      	bcc.n	b783c <ensure+0x3a>
        if (needed <= INT_MAX)
   b7834:	2e00      	cmp	r6, #0
   b7836:	da0f      	bge.n	b7858 <ensure+0x56>
        return NULL;
   b7838:	2500      	movs	r5, #0
   b783a:	e7f4      	b.n	b7826 <ensure+0x24>
        newsize = needed * 2;
   b783c:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   b783e:	6a23      	ldr	r3, [r4, #32]
   b7840:	b16b      	cbz	r3, b785e <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   b7842:	4628      	mov	r0, r5
   b7844:	4631      	mov	r1, r6
   b7846:	4798      	blx	r3
        if (newbuffer == NULL)
   b7848:	4605      	mov	r5, r0
   b784a:	b9b0      	cbnz	r0, b787a <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   b784c:	69e3      	ldr	r3, [r4, #28]
   b784e:	6820      	ldr	r0, [r4, #0]
   b7850:	4798      	blx	r3
            p->buffer = NULL;
   b7852:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   b7856:	e7e6      	b.n	b7826 <ensure+0x24>
            newsize = INT_MAX;
   b7858:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   b785c:	e7ef      	b.n	b783e <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   b785e:	69a3      	ldr	r3, [r4, #24]
   b7860:	4630      	mov	r0, r6
   b7862:	4798      	blx	r3
        if (!newbuffer)
   b7864:	4605      	mov	r5, r0
   b7866:	2800      	cmp	r0, #0
   b7868:	d0f0      	beq.n	b784c <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   b786a:	68a2      	ldr	r2, [r4, #8]
   b786c:	6821      	ldr	r1, [r4, #0]
   b786e:	3201      	adds	r2, #1
   b7870:	f005 fd91 	bl	bd396 <memcpy>
        p->hooks.deallocate(p->buffer);
   b7874:	69e3      	ldr	r3, [r4, #28]
   b7876:	6820      	ldr	r0, [r4, #0]
   b7878:	4798      	blx	r3
    return newbuffer + p->offset;
   b787a:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   b787c:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   b7880:	441d      	add	r5, r3
   b7882:	e7d0      	b.n	b7826 <ensure+0x24>

000b7884 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
   b7884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7886:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
   b7888:	4604      	mov	r4, r0
   b788a:	2800      	cmp	r0, #0
   b788c:	d034      	beq.n	b78f8 <get_object_item+0x74>
   b788e:	2900      	cmp	r1, #0
   b7890:	d031      	beq.n	b78f6 <get_object_item+0x72>
    {
        return NULL;
    }

    current_element = object->child;
   b7892:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   b7894:	b9fa      	cbnz	r2, b78d6 <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   b7896:	4e19      	ldr	r6, [pc, #100]	; (b78fc <get_object_item+0x78>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   b7898:	b374      	cbz	r4, b78f8 <get_object_item+0x74>
   b789a:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   b789c:	b1c3      	cbz	r3, b78d0 <get_object_item+0x4c>
    if (string1 == string2)
   b789e:	42ab      	cmp	r3, r5
   b78a0:	d021      	beq.n	b78e6 <get_object_item+0x62>
   b78a2:	f105 3cff 	add.w	ip, r5, #4294967295
   b78a6:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   b78a8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   b78ac:	5d8a      	ldrb	r2, [r1, r6]
   b78ae:	f002 0203 	and.w	r2, r2, #3
   b78b2:	2a01      	cmp	r2, #1
   b78b4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   b78b8:	5cb0      	ldrb	r0, [r6, r2]
   b78ba:	f000 0003 	and.w	r0, r0, #3
   b78be:	460f      	mov	r7, r1
   b78c0:	bf08      	it	eq
   b78c2:	f101 0720 	addeq.w	r7, r1, #32
   b78c6:	2801      	cmp	r0, #1
   b78c8:	bf08      	it	eq
   b78ca:	3220      	addeq	r2, #32
   b78cc:	4297      	cmp	r7, r2
   b78ce:	d00f      	beq.n	b78f0 <get_object_item+0x6c>
        {
            current_element = current_element->next;
   b78d0:	6824      	ldr	r4, [r4, #0]
   b78d2:	e7e1      	b.n	b7898 <get_object_item+0x14>
            current_element = current_element->next;
   b78d4:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   b78d6:	b17c      	cbz	r4, b78f8 <get_object_item+0x74>
   b78d8:	6a21      	ldr	r1, [r4, #32]
   b78da:	b121      	cbz	r1, b78e6 <get_object_item+0x62>
   b78dc:	4628      	mov	r0, r5
   b78de:	f7fd f88f 	bl	b4a00 <strcmp>
   b78e2:	2800      	cmp	r0, #0
   b78e4:	d1f6      	bne.n	b78d4 <get_object_item+0x50>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
   b78e6:	6a23      	ldr	r3, [r4, #32]
        return NULL;
   b78e8:	2b00      	cmp	r3, #0
   b78ea:	bf08      	it	eq
   b78ec:	2400      	moveq	r4, #0
   b78ee:	e003      	b.n	b78f8 <get_object_item+0x74>
        if (*string1 == '\0')
   b78f0:	2900      	cmp	r1, #0
   b78f2:	d1d9      	bne.n	b78a8 <get_object_item+0x24>
   b78f4:	e7f7      	b.n	b78e6 <get_object_item+0x62>
        return NULL;
   b78f6:	460c      	mov	r4, r1
        return NULL;
    }

    return current_element;
}
   b78f8:	4620      	mov	r0, r4
   b78fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b78fc:	000c057b 	.word	0x000c057b

000b7900 <add_item_to_array>:

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
    cJSON *child = NULL;

    if ((item == NULL) || (array == NULL))
   b7900:	b161      	cbz	r1, b791c <add_item_to_array+0x1c>
   b7902:	b160      	cbz	r0, b791e <add_item_to_array+0x1e>
    {
        return false;
    }

    child = array->child;
   b7904:	6883      	ldr	r3, [r0, #8]

    if (child == NULL)
   b7906:	b913      	cbnz	r3, b790e <add_item_to_array+0xe>
    {
        /* list is empty, start new one */
        array->child = item;
   b7908:	6081      	str	r1, [r0, #8]
}
   b790a:	2001      	movs	r0, #1
   b790c:	4770      	bx	lr
    }
    else
    {
        /* append to the end */
        while (child->next)
   b790e:	461a      	mov	r2, r3
   b7910:	681b      	ldr	r3, [r3, #0]
   b7912:	2b00      	cmp	r3, #0
   b7914:	d1fb      	bne.n	b790e <add_item_to_array+0xe>
    prev->next = item;
   b7916:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   b7918:	604a      	str	r2, [r1, #4]
   b791a:	e7f6      	b.n	b790a <add_item_to_array+0xa>
        return false;
   b791c:	4608      	mov	r0, r1
        }
        suffix_object(child, item);
    }

    return true;
}
   b791e:	4770      	bx	lr

000b7920 <print_string_ptr>:
{
   b7920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7924:	4606      	mov	r6, r0
    if (output_buffer == NULL)
   b7926:	4608      	mov	r0, r1
   b7928:	b911      	cbnz	r1, b7930 <print_string_ptr+0x10>
        return false;
   b792a:	2000      	movs	r0, #0
}
   b792c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   b7930:	b336      	cbz	r6, b7980 <print_string_ptr+0x60>
   b7932:	4f44      	ldr	r7, [pc, #272]	; (b7a44 <print_string_ptr+0x124>)
   b7934:	4631      	mov	r1, r6
    size_t escape_characters = 0;
   b7936:	f04f 0a00 	mov.w	sl, #0
   b793a:	2401      	movs	r4, #1
   b793c:	460d      	mov	r5, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   b793e:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7942:	bb3b      	cbnz	r3, b7994 <print_string_ptr+0x74>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   b7944:	1bad      	subs	r5, r5, r6
   b7946:	4455      	add	r5, sl
    output = ensure(output_buffer, output_length + sizeof("\"\""));
   b7948:	1ce9      	adds	r1, r5, #3
   b794a:	f7ff ff5a 	bl	b7802 <ensure>
    if (output == NULL)
   b794e:	4607      	mov	r7, r0
   b7950:	2800      	cmp	r0, #0
   b7952:	d0ea      	beq.n	b792a <print_string_ptr+0xa>
    if (escape_characters == 0)
   b7954:	f04f 0b22 	mov.w	fp, #34	; 0x22
        memcpy(output + 1, input, output_length);
   b7958:	1c44      	adds	r4, r0, #1
        output[output_length + 1] = '\"';
   b795a:	f105 0901 	add.w	r9, r5, #1
        output[output_length + 2] = '\0';
   b795e:	f105 0802 	add.w	r8, r5, #2
        output[0] = '\"';
   b7962:	f880 b000 	strb.w	fp, [r0]
    if (escape_characters == 0)
   b7966:	f1ba 0f00 	cmp.w	sl, #0
   b796a:	d129      	bne.n	b79c0 <print_string_ptr+0xa0>
        memcpy(output + 1, input, output_length);
   b796c:	462a      	mov	r2, r5
   b796e:	4631      	mov	r1, r6
   b7970:	4620      	mov	r0, r4
   b7972:	f005 fd10 	bl	bd396 <memcpy>
        output[output_length + 1] = '\"';
   b7976:	f807 b009 	strb.w	fp, [r7, r9]
        output[output_length + 2] = '\0';
   b797a:	f807 a008 	strb.w	sl, [r7, r8]
        return true;
   b797e:	e007      	b.n	b7990 <print_string_ptr+0x70>
        output = ensure(output_buffer, sizeof("\"\""));
   b7980:	2103      	movs	r1, #3
   b7982:	f7ff ff3e 	bl	b7802 <ensure>
        if (output == NULL)
   b7986:	2800      	cmp	r0, #0
   b7988:	d0cf      	beq.n	b792a <print_string_ptr+0xa>
        strcpy((char*)output, "\"\"");
   b798a:	492f      	ldr	r1, [pc, #188]	; (b7a48 <print_string_ptr+0x128>)
   b798c:	f005 fd71 	bl	bd472 <strcpy>
    return true;
   b7990:	2001      	movs	r0, #1
   b7992:	e7cb      	b.n	b792c <print_string_ptr+0xc>
        switch (*input_pointer)
   b7994:	2b22      	cmp	r3, #34	; 0x22
   b7996:	d80b      	bhi.n	b79b0 <print_string_ptr+0x90>
   b7998:	2b07      	cmp	r3, #7
   b799a:	d90c      	bls.n	b79b6 <print_string_ptr+0x96>
   b799c:	f1a3 0208 	sub.w	r2, r3, #8
   b79a0:	b2d2      	uxtb	r2, r2
   b79a2:	fa04 f202 	lsl.w	r2, r4, r2
   b79a6:	423a      	tst	r2, r7
   b79a8:	d005      	beq.n	b79b6 <print_string_ptr+0x96>
                escape_characters++;
   b79aa:	f10a 0a01 	add.w	sl, sl, #1
                break;
   b79ae:	e7c5      	b.n	b793c <print_string_ptr+0x1c>
        switch (*input_pointer)
   b79b0:	2b5c      	cmp	r3, #92	; 0x5c
   b79b2:	d1c3      	bne.n	b793c <print_string_ptr+0x1c>
   b79b4:	e7f9      	b.n	b79aa <print_string_ptr+0x8a>
                if (*input_pointer < 32)
   b79b6:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   b79b8:	bf98      	it	ls
   b79ba:	f10a 0a05 	addls.w	sl, sl, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   b79be:	e7bd      	b.n	b793c <print_string_ptr+0x1c>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b79c0:	f8df b088 	ldr.w	fp, [pc, #136]	; b7a4c <print_string_ptr+0x12c>
   b79c4:	3e01      	subs	r6, #1
            *output_pointer++ = '\\';
   b79c6:	255c      	movs	r5, #92	; 0x5c
                    *output_pointer = 't';
   b79c8:	f04f 0a74 	mov.w	sl, #116	; 0x74
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b79cc:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   b79d0:	b92b      	cbnz	r3, b79de <print_string_ptr+0xbe>
    output[output_length + 1] = '\"';
   b79d2:	2222      	movs	r2, #34	; 0x22
   b79d4:	f807 2009 	strb.w	r2, [r7, r9]
    output[output_length + 2] = '\0';
   b79d8:	f807 3008 	strb.w	r3, [r7, r8]
   b79dc:	e7d8      	b.n	b7990 <print_string_ptr+0x70>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   b79de:	2b1f      	cmp	r3, #31
   b79e0:	d907      	bls.n	b79f2 <print_string_ptr+0xd2>
   b79e2:	2b22      	cmp	r3, #34	; 0x22
   b79e4:	d005      	beq.n	b79f2 <print_string_ptr+0xd2>
   b79e6:	2b5c      	cmp	r3, #92	; 0x5c
   b79e8:	d003      	beq.n	b79f2 <print_string_ptr+0xd2>
            *output_pointer = *input_pointer;
   b79ea:	7023      	strb	r3, [r4, #0]
   b79ec:	4620      	mov	r0, r4
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b79ee:	1c44      	adds	r4, r0, #1
   b79f0:	e7ec      	b.n	b79cc <print_string_ptr+0xac>
            *output_pointer++ = '\\';
   b79f2:	4620      	mov	r0, r4
   b79f4:	f800 5b01 	strb.w	r5, [r0], #1
            switch (*input_pointer)
   b79f8:	7832      	ldrb	r2, [r6, #0]
   b79fa:	2a0d      	cmp	r2, #13
   b79fc:	d80a      	bhi.n	b7a14 <print_string_ptr+0xf4>
   b79fe:	2a07      	cmp	r2, #7
   b7a00:	d91a      	bls.n	b7a38 <print_string_ptr+0x118>
   b7a02:	f1a2 0308 	sub.w	r3, r2, #8
   b7a06:	2b05      	cmp	r3, #5
   b7a08:	d816      	bhi.n	b7a38 <print_string_ptr+0x118>
   b7a0a:	e8df f003 	tbb	[pc, r3]
   b7a0e:	1209      	.short	0x1209
   b7a10:	100c150e 	.word	0x100c150e
   b7a14:	2a22      	cmp	r2, #34	; 0x22
   b7a16:	d001      	beq.n	b7a1c <print_string_ptr+0xfc>
   b7a18:	2a5c      	cmp	r2, #92	; 0x5c
   b7a1a:	d10d      	bne.n	b7a38 <print_string_ptr+0x118>
                    *output_pointer = '\"';
   b7a1c:	7062      	strb	r2, [r4, #1]
                    break;
   b7a1e:	e7e6      	b.n	b79ee <print_string_ptr+0xce>
                    *output_pointer = 'b';
   b7a20:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 'f';
   b7a22:	7063      	strb	r3, [r4, #1]
                    break;
   b7a24:	e7e3      	b.n	b79ee <print_string_ptr+0xce>
                    *output_pointer = 'f';
   b7a26:	2366      	movs	r3, #102	; 0x66
   b7a28:	e7fb      	b.n	b7a22 <print_string_ptr+0x102>
                    *output_pointer = 'n';
   b7a2a:	236e      	movs	r3, #110	; 0x6e
   b7a2c:	e7f9      	b.n	b7a22 <print_string_ptr+0x102>
                    *output_pointer = 'r';
   b7a2e:	2372      	movs	r3, #114	; 0x72
   b7a30:	e7f7      	b.n	b7a22 <print_string_ptr+0x102>
                    *output_pointer = 't';
   b7a32:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   b7a36:	e7da      	b.n	b79ee <print_string_ptr+0xce>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b7a38:	4659      	mov	r1, fp
   b7a3a:	f001 fd87 	bl	b954c <sprintf>
                    output_pointer += 4;
   b7a3e:	1d60      	adds	r0, r4, #5
                    break;
   b7a40:	e7d5      	b.n	b79ee <print_string_ptr+0xce>
   b7a42:	bf00      	nop
   b7a44:	04000037 	.word	0x04000037
   b7a48:	000bfdee 	.word	0x000bfdee
   b7a4c:	000bfdf1 	.word	0x000bfdf1

000b7a50 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   b7a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   b7a52:	4605      	mov	r5, r0
   b7a54:	b180      	cbz	r0, b7a78 <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   b7a56:	f7fc ffdd 	bl	b4a14 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   b7a5a:	4b08      	ldr	r3, [pc, #32]	; (b7a7c <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   b7a5c:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   b7a5e:	681b      	ldr	r3, [r3, #0]
   b7a60:	9201      	str	r2, [sp, #4]
   b7a62:	4610      	mov	r0, r2
   b7a64:	4798      	blx	r3
    if (copy == NULL)
   b7a66:	4604      	mov	r4, r0
   b7a68:	b118      	cbz	r0, b7a72 <cJSON_strdup.constprop.0+0x22>
    memcpy(copy, string, length);
   b7a6a:	9a01      	ldr	r2, [sp, #4]
   b7a6c:	4629      	mov	r1, r5
   b7a6e:	f005 fc92 	bl	bd396 <memcpy>
}
   b7a72:	4620      	mov	r0, r4
   b7a74:	b003      	add	sp, #12
   b7a76:	bd30      	pop	{r4, r5, pc}
        return NULL;
   b7a78:	4604      	mov	r4, r0
   b7a7a:	e7fa      	b.n	b7a72 <cJSON_strdup.constprop.0+0x22>
   b7a7c:	2003d050 	.word	0x2003d050

000b7a80 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   b7a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a82:	460d      	mov	r5, r1
   b7a84:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   b7a86:	4607      	mov	r7, r0
   b7a88:	b1f0      	cbz	r0, b7ac8 <add_item_to_object.constprop.0+0x48>
   b7a8a:	b1e9      	cbz	r1, b7ac8 <add_item_to_object.constprop.0+0x48>
   b7a8c:	b1e2      	cbz	r2, b7ac8 <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   b7a8e:	b193      	cbz	r3, b7ab6 <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   b7a90:	68d6      	ldr	r6, [r2, #12]
   b7a92:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b7a96:	68e3      	ldr	r3, [r4, #12]
   b7a98:	059b      	lsls	r3, r3, #22
   b7a9a:	d404      	bmi.n	b7aa6 <add_item_to_object.constprop.0+0x26>
   b7a9c:	6a20      	ldr	r0, [r4, #32]
   b7a9e:	b110      	cbz	r0, b7aa6 <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   b7aa0:	4b0a      	ldr	r3, [pc, #40]	; (b7acc <add_item_to_object.constprop.0+0x4c>)
   b7aa2:	685b      	ldr	r3, [r3, #4]
   b7aa4:	4798      	blx	r3
    }

    item->string = new_key;
   b7aa6:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   b7aa8:	60e6      	str	r6, [r4, #12]

    return add_item_to_array(object, item);
   b7aaa:	4621      	mov	r1, r4
   b7aac:	4638      	mov	r0, r7
}
   b7aae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   b7ab2:	f7ff bf25 	b.w	b7900 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   b7ab6:	4608      	mov	r0, r1
   b7ab8:	f7ff ffca 	bl	b7a50 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   b7abc:	4605      	mov	r5, r0
   b7abe:	b118      	cbz	r0, b7ac8 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   b7ac0:	68e6      	ldr	r6, [r4, #12]
   b7ac2:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   b7ac6:	e7e6      	b.n	b7a96 <add_item_to_object.constprop.0+0x16>
}
   b7ac8:	2000      	movs	r0, #0
   b7aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7acc:	2003d050 	.word	0x2003d050

000b7ad0 <print_value>:
{
   b7ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ad4:	460c      	mov	r4, r1
   b7ad6:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   b7ad8:	4606      	mov	r6, r0
   b7ada:	b908      	cbnz	r0, b7ae0 <print_value+0x10>
    switch ((item->type) & 0xFF)
   b7adc:	2500      	movs	r5, #0
   b7ade:	e05d      	b.n	b7b9c <print_value+0xcc>
    if ((item == NULL) || (output_buffer == NULL))
   b7ae0:	2900      	cmp	r1, #0
   b7ae2:	d0fb      	beq.n	b7adc <print_value+0xc>
    switch ((item->type) & 0xFF)
   b7ae4:	7b05      	ldrb	r5, [r0, #12]
   b7ae6:	2d10      	cmp	r5, #16
   b7ae8:	f000 80c1 	beq.w	b7c6e <print_value+0x19e>
   b7aec:	dc18      	bgt.n	b7b20 <print_value+0x50>
   b7aee:	1e6b      	subs	r3, r5, #1
   b7af0:	2b07      	cmp	r3, #7
   b7af2:	d8f3      	bhi.n	b7adc <print_value+0xc>
   b7af4:	2b07      	cmp	r3, #7
   b7af6:	d8f1      	bhi.n	b7adc <print_value+0xc>
   b7af8:	a201      	add	r2, pc, #4	; (adr r2, b7b00 <print_value+0x30>)
   b7afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   b7afe:	bf00      	nop
   b7b00:	000b7b8b 	.word	0x000b7b8b
   b7b04:	000b7ba5 	.word	0x000b7ba5
   b7b08:	000b7add 	.word	0x000b7add
   b7b0c:	000b7b75 	.word	0x000b7b75
   b7b10:	000b7add 	.word	0x000b7add
   b7b14:	000b7add 	.word	0x000b7add
   b7b18:	000b7add 	.word	0x000b7add
   b7b1c:	000b7bb5 	.word	0x000b7bb5
   b7b20:	2d40      	cmp	r5, #64	; 0x40
   b7b22:	f000 80d3 	beq.w	b7ccc <print_value+0x1fc>
   b7b26:	2d80      	cmp	r5, #128	; 0x80
   b7b28:	f000 808d 	beq.w	b7c46 <print_value+0x176>
   b7b2c:	2d20      	cmp	r5, #32
   b7b2e:	d1d5      	bne.n	b7adc <print_value+0xc>
            return print_array(item, output_buffer);
   b7b30:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   b7b32:	2101      	movs	r1, #1
   b7b34:	4620      	mov	r0, r4
   b7b36:	f7ff fe64 	bl	b7802 <ensure>
    if (output_pointer == NULL)
   b7b3a:	2800      	cmp	r0, #0
   b7b3c:	d0ce      	beq.n	b7adc <print_value+0xc>
    *output_pointer = '[';
   b7b3e:	235b      	movs	r3, #91	; 0x5b
   b7b40:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   b7b42:	68a3      	ldr	r3, [r4, #8]
   b7b44:	3301      	adds	r3, #1
   b7b46:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   b7b48:	68e3      	ldr	r3, [r4, #12]
   b7b4a:	3301      	adds	r3, #1
   b7b4c:	60e3      	str	r3, [r4, #12]
            *output_pointer++ = ',';
   b7b4e:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   b7b50:	f04f 0800 	mov.w	r8, #0
    while (current_element != NULL)
   b7b54:	2e00      	cmp	r6, #0
   b7b56:	f040 8090 	bne.w	b7c7a <print_value+0x1aa>
    output_pointer = ensure(output_buffer, 2);
   b7b5a:	2102      	movs	r1, #2
   b7b5c:	4620      	mov	r0, r4
   b7b5e:	f7ff fe50 	bl	b7802 <ensure>
    if (output_pointer == NULL)
   b7b62:	2800      	cmp	r0, #0
   b7b64:	d0ba      	beq.n	b7adc <print_value+0xc>
    *output_pointer++ = ']';
   b7b66:	235d      	movs	r3, #93	; 0x5d
   b7b68:	7003      	strb	r3, [r0, #0]
    *output_pointer = '\0';
   b7b6a:	7046      	strb	r6, [r0, #1]
    output_buffer->depth--;
   b7b6c:	68e3      	ldr	r3, [r4, #12]
   b7b6e:	3b01      	subs	r3, #1
   b7b70:	60e3      	str	r3, [r4, #12]
   b7b72:	e008      	b.n	b7b86 <print_value+0xb6>
            output = ensure(output_buffer, 5);
   b7b74:	2105      	movs	r1, #5
   b7b76:	4620      	mov	r0, r4
   b7b78:	f7ff fe43 	bl	b7802 <ensure>
            if (output == NULL)
   b7b7c:	2800      	cmp	r0, #0
   b7b7e:	d0ad      	beq.n	b7adc <print_value+0xc>
            strcpy((char*)output, "null");
   b7b80:	49a1      	ldr	r1, [pc, #644]	; (b7e08 <print_value+0x338>)
            strcpy((char*)output, "true");
   b7b82:	f005 fc76 	bl	bd472 <strcpy>
    return true;
   b7b86:	2501      	movs	r5, #1
   b7b88:	e008      	b.n	b7b9c <print_value+0xcc>
            output = ensure(output_buffer, 6);
   b7b8a:	2106      	movs	r1, #6
   b7b8c:	4620      	mov	r0, r4
   b7b8e:	f7ff fe38 	bl	b7802 <ensure>
            if (output == NULL)
   b7b92:	2800      	cmp	r0, #0
   b7b94:	d0a2      	beq.n	b7adc <print_value+0xc>
            strcpy((char*)output, "false");
   b7b96:	499d      	ldr	r1, [pc, #628]	; (b7e0c <print_value+0x33c>)
   b7b98:	f005 fc6b 	bl	bd472 <strcpy>
}
   b7b9c:	4628      	mov	r0, r5
   b7b9e:	b00d      	add	sp, #52	; 0x34
   b7ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            output = ensure(output_buffer, 5);
   b7ba4:	2105      	movs	r1, #5
   b7ba6:	4620      	mov	r0, r4
   b7ba8:	f7ff fe2b 	bl	b7802 <ensure>
            if (output == NULL)
   b7bac:	2800      	cmp	r0, #0
   b7bae:	d095      	beq.n	b7adc <print_value+0xc>
            strcpy((char*)output, "true");
   b7bb0:	4997      	ldr	r1, [pc, #604]	; (b7e10 <print_value+0x340>)
   b7bb2:	e7e6      	b.n	b7b82 <print_value+0xb2>
    double d = item->valuedouble;
   b7bb4:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    if ((d * 0) != 0)
   b7bb8:	2200      	movs	r2, #0
   b7bba:	2300      	movs	r3, #0
   b7bbc:	4630      	mov	r0, r6
   b7bbe:	4639      	mov	r1, r7
   b7bc0:	f7fc fbea 	bl	b4398 <__aeabi_dmul>
   b7bc4:	2200      	movs	r2, #0
   b7bc6:	2300      	movs	r3, #0
   b7bc8:	f7fc fe4e 	bl	b4868 <__aeabi_dcmpeq>
   b7bcc:	b9b0      	cbnz	r0, b7bfc <print_value+0x12c>
        length = sprintf((char*)number_buffer, "null");
   b7bce:	498e      	ldr	r1, [pc, #568]	; (b7e08 <print_value+0x338>)
   b7bd0:	a805      	add	r0, sp, #20
   b7bd2:	f005 fc4e 	bl	bd472 <strcpy>
   b7bd6:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   b7bd8:	1c69      	adds	r1, r5, #1
   b7bda:	4620      	mov	r0, r4
   b7bdc:	f7ff fe11 	bl	b7802 <ensure>
    if (output_pointer == NULL)
   b7be0:	2800      	cmp	r0, #0
   b7be2:	f43f af7b 	beq.w	b7adc <print_value+0xc>
   b7be6:	4602      	mov	r2, r0
   b7be8:	ab05      	add	r3, sp, #20
   b7bea:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   b7bec:	4296      	cmp	r6, r2
   b7bee:	d125      	bne.n	b7c3c <print_value+0x16c>
    output_pointer[i] = '\0';
   b7bf0:	2300      	movs	r3, #0
   b7bf2:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   b7bf4:	68a0      	ldr	r0, [r4, #8]
   b7bf6:	4428      	add	r0, r5
   b7bf8:	60a0      	str	r0, [r4, #8]
    return true;
   b7bfa:	e7c4      	b.n	b7b86 <print_value+0xb6>
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b7bfc:	4985      	ldr	r1, [pc, #532]	; (b7e14 <print_value+0x344>)
   b7bfe:	4632      	mov	r2, r6
   b7c00:	463b      	mov	r3, r7
   b7c02:	a805      	add	r0, sp, #20
   b7c04:	f001 fca2 	bl	b954c <sprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b7c08:	4983      	ldr	r1, [pc, #524]	; (b7e18 <print_value+0x348>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b7c0a:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b7c0c:	aa02      	add	r2, sp, #8
   b7c0e:	a805      	add	r0, sp, #20
   b7c10:	f001 fcac 	bl	b956c <sscanf>
   b7c14:	2801      	cmp	r0, #1
   b7c16:	d106      	bne.n	b7c26 <print_value+0x156>
   b7c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7c1c:	4630      	mov	r0, r6
   b7c1e:	4639      	mov	r1, r7
   b7c20:	f7fc fe22 	bl	b4868 <__aeabi_dcmpeq>
   b7c24:	b930      	cbnz	r0, b7c34 <print_value+0x164>
            length = sprintf((char*)number_buffer, "%1.17g", d);
   b7c26:	497d      	ldr	r1, [pc, #500]	; (b7e1c <print_value+0x34c>)
   b7c28:	4632      	mov	r2, r6
   b7c2a:	463b      	mov	r3, r7
   b7c2c:	a805      	add	r0, sp, #20
   b7c2e:	f001 fc8d 	bl	b954c <sprintf>
   b7c32:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   b7c34:	2d19      	cmp	r5, #25
   b7c36:	f63f af51 	bhi.w	b7adc <print_value+0xc>
   b7c3a:	e7cd      	b.n	b7bd8 <print_value+0x108>
        if (number_buffer[i] == decimal_point)
   b7c3c:	f813 1b01 	ldrb.w	r1, [r3], #1
            output_pointer[i] = '.';
   b7c40:	7011      	strb	r1, [r2, #0]
    for (i = 0; i < ((size_t)length); i++)
   b7c42:	3201      	adds	r2, #1
   b7c44:	e7d2      	b.n	b7bec <print_value+0x11c>
            if (item->valuestring == NULL)
   b7c46:	6900      	ldr	r0, [r0, #16]
   b7c48:	2800      	cmp	r0, #0
   b7c4a:	f43f af47 	beq.w	b7adc <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   b7c4e:	f7fc fee1 	bl	b4a14 <strlen>
   b7c52:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   b7c54:	4611      	mov	r1, r2
   b7c56:	4620      	mov	r0, r4
   b7c58:	9201      	str	r2, [sp, #4]
   b7c5a:	f7ff fdd2 	bl	b7802 <ensure>
            if (output == NULL)
   b7c5e:	2800      	cmp	r0, #0
   b7c60:	f43f af3c 	beq.w	b7adc <print_value+0xc>
            memcpy(output, item->valuestring, raw_length);
   b7c64:	9a01      	ldr	r2, [sp, #4]
   b7c66:	6931      	ldr	r1, [r6, #16]
   b7c68:	f005 fb95 	bl	bd396 <memcpy>
            return true;
   b7c6c:	e78b      	b.n	b7b86 <print_value+0xb6>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b7c6e:	6900      	ldr	r0, [r0, #16]
}
   b7c70:	b00d      	add	sp, #52	; 0x34
   b7c72:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b7c76:	f7ff be53 	b.w	b7920 <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   b7c7a:	4621      	mov	r1, r4
   b7c7c:	4630      	mov	r0, r6
   b7c7e:	f7ff ff27 	bl	b7ad0 <print_value>
   b7c82:	2800      	cmp	r0, #0
   b7c84:	f43f af2a 	beq.w	b7adc <print_value+0xc>
        update_offset(output_buffer);
   b7c88:	4620      	mov	r0, r4
   b7c8a:	f7ff fdae 	bl	b77ea <update_offset>
        if (current_element->next)
   b7c8e:	6833      	ldr	r3, [r6, #0]
   b7c90:	b1bb      	cbz	r3, b7cc2 <print_value+0x1f2>
            length = (size_t) (output_buffer->format ? 2 : 1);
   b7c92:	6963      	ldr	r3, [r4, #20]
   b7c94:	2b00      	cmp	r3, #0
   b7c96:	bf14      	ite	ne
   b7c98:	f04f 0902 	movne.w	r9, #2
   b7c9c:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   b7ca0:	f109 0101 	add.w	r1, r9, #1
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	f7ff fdac 	bl	b7802 <ensure>
            if (output_pointer == NULL)
   b7caa:	2800      	cmp	r0, #0
   b7cac:	f43f af16 	beq.w	b7adc <print_value+0xc>
            *output_pointer++ = ',';
   b7cb0:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   b7cb2:	6963      	ldr	r3, [r4, #20]
   b7cb4:	b93b      	cbnz	r3, b7cc6 <print_value+0x1f6>
            *output_pointer++ = ',';
   b7cb6:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   b7cb8:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   b7cbc:	68a3      	ldr	r3, [r4, #8]
   b7cbe:	444b      	add	r3, r9
   b7cc0:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   b7cc2:	6836      	ldr	r6, [r6, #0]
   b7cc4:	e746      	b.n	b7b54 <print_value+0x84>
                *output_pointer++ = ' ';
   b7cc6:	1c83      	adds	r3, r0, #2
   b7cc8:	7045      	strb	r5, [r0, #1]
   b7cca:	e7f5      	b.n	b7cb8 <print_value+0x1e8>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   b7ccc:	694b      	ldr	r3, [r1, #20]
   b7cce:	6885      	ldr	r5, [r0, #8]
   b7cd0:	2b00      	cmp	r3, #0
   b7cd2:	bf14      	ite	ne
   b7cd4:	2702      	movne	r7, #2
   b7cd6:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   b7cd8:	1c79      	adds	r1, r7, #1
   b7cda:	4620      	mov	r0, r4
   b7cdc:	f7ff fd91 	bl	b7802 <ensure>
    if (output_pointer == NULL)
   b7ce0:	2800      	cmp	r0, #0
   b7ce2:	f43f aefb 	beq.w	b7adc <print_value+0xc>
    *output_pointer++ = '{';
   b7ce6:	237b      	movs	r3, #123	; 0x7b
   b7ce8:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   b7cea:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   b7cec:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   b7cee:	3201      	adds	r2, #1
   b7cf0:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   b7cf2:	b10b      	cbz	r3, b7cf8 <print_value+0x228>
        *output_pointer++ = '\n';
   b7cf4:	230a      	movs	r3, #10
   b7cf6:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   b7cf8:	68a3      	ldr	r3, [r4, #8]
   b7cfa:	443b      	add	r3, r7
   b7cfc:	60a3      	str	r3, [r4, #8]
                *output_pointer++ = '\t';
   b7cfe:	2609      	movs	r6, #9
        *output_pointer++ = ':';
   b7d00:	273a      	movs	r7, #58	; 0x3a
        if (output_buffer->format)
   b7d02:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   b7d04:	b995      	cbnz	r5, b7d2c <print_value+0x25c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b7d06:	2b00      	cmp	r3, #0
   b7d08:	d070      	beq.n	b7dec <print_value+0x31c>
   b7d0a:	68e1      	ldr	r1, [r4, #12]
   b7d0c:	3101      	adds	r1, #1
   b7d0e:	4620      	mov	r0, r4
   b7d10:	f7ff fd77 	bl	b7802 <ensure>
    if (output_pointer == NULL)
   b7d14:	2800      	cmp	r0, #0
   b7d16:	f43f aee1 	beq.w	b7adc <print_value+0xc>
    if (output_buffer->format)
   b7d1a:	6963      	ldr	r3, [r4, #20]
   b7d1c:	2b00      	cmp	r3, #0
   b7d1e:	d16f      	bne.n	b7e00 <print_value+0x330>
   b7d20:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   b7d22:	227d      	movs	r2, #125	; 0x7d
   b7d24:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   b7d26:	2200      	movs	r2, #0
   b7d28:	705a      	strb	r2, [r3, #1]
   b7d2a:	e71f      	b.n	b7b6c <print_value+0x9c>
        if (output_buffer->format)
   b7d2c:	b173      	cbz	r3, b7d4c <print_value+0x27c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   b7d2e:	68e1      	ldr	r1, [r4, #12]
   b7d30:	4620      	mov	r0, r4
   b7d32:	f7ff fd66 	bl	b7802 <ensure>
            if (output_pointer == NULL)
   b7d36:	2800      	cmp	r0, #0
   b7d38:	f43f aed0 	beq.w	b7adc <print_value+0xc>
   b7d3c:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   b7d3e:	68e1      	ldr	r1, [r4, #12]
   b7d40:	1a13      	subs	r3, r2, r0
   b7d42:	4299      	cmp	r1, r3
   b7d44:	d84f      	bhi.n	b7de6 <print_value+0x316>
            output_buffer->offset += output_buffer->depth;
   b7d46:	68a3      	ldr	r3, [r4, #8]
   b7d48:	440b      	add	r3, r1
   b7d4a:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   b7d4c:	6a28      	ldr	r0, [r5, #32]
   b7d4e:	4621      	mov	r1, r4
   b7d50:	f7ff fde6 	bl	b7920 <print_string_ptr>
   b7d54:	2800      	cmp	r0, #0
   b7d56:	f43f aec1 	beq.w	b7adc <print_value+0xc>
        update_offset(output_buffer);
   b7d5a:	4620      	mov	r0, r4
   b7d5c:	f7ff fd45 	bl	b77ea <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   b7d60:	6963      	ldr	r3, [r4, #20]
   b7d62:	2b00      	cmp	r3, #0
   b7d64:	bf14      	ite	ne
   b7d66:	f04f 0802 	movne.w	r8, #2
   b7d6a:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   b7d6e:	4641      	mov	r1, r8
   b7d70:	4620      	mov	r0, r4
   b7d72:	f7ff fd46 	bl	b7802 <ensure>
        if (output_pointer == NULL)
   b7d76:	2800      	cmp	r0, #0
   b7d78:	f43f aeb0 	beq.w	b7adc <print_value+0xc>
        *output_pointer++ = ':';
   b7d7c:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   b7d7e:	6963      	ldr	r3, [r4, #20]
   b7d80:	b103      	cbz	r3, b7d84 <print_value+0x2b4>
            *output_pointer++ = '\t';
   b7d82:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   b7d84:	68a3      	ldr	r3, [r4, #8]
   b7d86:	4443      	add	r3, r8
   b7d88:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   b7d8a:	4621      	mov	r1, r4
   b7d8c:	4628      	mov	r0, r5
   b7d8e:	f7ff fe9f 	bl	b7ad0 <print_value>
   b7d92:	2800      	cmp	r0, #0
   b7d94:	f43f aea2 	beq.w	b7adc <print_value+0xc>
        update_offset(output_buffer);
   b7d98:	4620      	mov	r0, r4
   b7d9a:	f7ff fd26 	bl	b77ea <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   b7d9e:	682b      	ldr	r3, [r5, #0]
   b7da0:	6962      	ldr	r2, [r4, #20]
   b7da2:	f1b3 0800 	subs.w	r8, r3, #0
   b7da6:	bf18      	it	ne
   b7da8:	f04f 0801 	movne.w	r8, #1
   b7dac:	2a00      	cmp	r2, #0
   b7dae:	bf18      	it	ne
   b7db0:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   b7db4:	f108 0101 	add.w	r1, r8, #1
   b7db8:	4620      	mov	r0, r4
   b7dba:	f7ff fd22 	bl	b7802 <ensure>
        if (output_pointer == NULL)
   b7dbe:	2800      	cmp	r0, #0
   b7dc0:	f43f ae8c 	beq.w	b7adc <print_value+0xc>
        if (current_item->next)
   b7dc4:	682b      	ldr	r3, [r5, #0]
   b7dc6:	b113      	cbz	r3, b7dce <print_value+0x2fe>
            *output_pointer++ = ',';
   b7dc8:	232c      	movs	r3, #44	; 0x2c
   b7dca:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   b7dce:	6963      	ldr	r3, [r4, #20]
   b7dd0:	b113      	cbz	r3, b7dd8 <print_value+0x308>
            *output_pointer++ = '\n';
   b7dd2:	230a      	movs	r3, #10
   b7dd4:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   b7dd8:	2300      	movs	r3, #0
   b7dda:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   b7ddc:	68a3      	ldr	r3, [r4, #8]
   b7dde:	4443      	add	r3, r8
   b7de0:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   b7de2:	682d      	ldr	r5, [r5, #0]
   b7de4:	e78d      	b.n	b7d02 <print_value+0x232>
                *output_pointer++ = '\t';
   b7de6:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   b7dea:	e7a8      	b.n	b7d3e <print_value+0x26e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b7dec:	2102      	movs	r1, #2
   b7dee:	e78e      	b.n	b7d0e <print_value+0x23e>
            *output_pointer++ = '\t';
   b7df0:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   b7df4:	68e2      	ldr	r2, [r4, #12]
   b7df6:	1a19      	subs	r1, r3, r0
   b7df8:	3a01      	subs	r2, #1
   b7dfa:	4291      	cmp	r1, r2
   b7dfc:	d3f8      	bcc.n	b7df0 <print_value+0x320>
   b7dfe:	e790      	b.n	b7d22 <print_value+0x252>
   b7e00:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   b7e02:	2509      	movs	r5, #9
   b7e04:	e7f6      	b.n	b7df4 <print_value+0x324>
   b7e06:	bf00      	nop
   b7e08:	000bfdf7 	.word	0x000bfdf7
   b7e0c:	000c0095 	.word	0x000c0095
   b7e10:	000bfdfc 	.word	0x000bfdfc
   b7e14:	000bfe01 	.word	0x000bfe01
   b7e18:	000bfe08 	.word	0x000bfe08
   b7e1c:	000bfe0c 	.word	0x000bfe0c

000b7e20 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b7e20:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b7e22:	4d23      	ldr	r5, [pc, #140]	; (b7eb0 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b7e24:	b08a      	sub	sp, #40	; 0x28
   b7e26:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   b7e28:	2224      	movs	r2, #36	; 0x24
   b7e2a:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b7e2c:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   b7e2e:	a801      	add	r0, sp, #4
   b7e30:	f005 fad9 	bl	bd3e6 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b7e34:	682b      	ldr	r3, [r5, #0]
   b7e36:	f44f 7080 	mov.w	r0, #256	; 0x100
   b7e3a:	4798      	blx	r3
    buffer->length = default_buffer_size;
   b7e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b7e40:	4603      	mov	r3, r0
   b7e42:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   b7e44:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   b7e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    buffer->format = format;
   b7e4a:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   b7e4c:	ae0a      	add	r6, sp, #40	; 0x28
   b7e4e:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   b7e52:	b17b      	cbz	r3, b7e74 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   b7e54:	a901      	add	r1, sp, #4
   b7e56:	4620      	mov	r0, r4
   b7e58:	f7ff fe3a 	bl	b7ad0 <print_value>
   b7e5c:	b150      	cbz	r0, b7e74 <print.constprop.0+0x54>
    update_offset(buffer);
   b7e5e:	a801      	add	r0, sp, #4
   b7e60:	f7ff fcc3 	bl	b77ea <update_offset>
    if (hooks->reallocate != NULL)
   b7e64:	68ae      	ldr	r6, [r5, #8]
   b7e66:	9903      	ldr	r1, [sp, #12]
   b7e68:	b15e      	cbz	r6, b7e82 <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   b7e6a:	9801      	ldr	r0, [sp, #4]
   b7e6c:	3101      	adds	r1, #1
   b7e6e:	47b0      	blx	r6
        if (printed == NULL) {
   b7e70:	4604      	mov	r4, r0
   b7e72:	b9d0      	cbnz	r0, b7eaa <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   b7e74:	9c01      	ldr	r4, [sp, #4]
   b7e76:	b1c4      	cbz	r4, b7eaa <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   b7e78:	4620      	mov	r0, r4
   b7e7a:	686b      	ldr	r3, [r5, #4]
   b7e7c:	4798      	blx	r3
    return NULL;
   b7e7e:	2400      	movs	r4, #0
   b7e80:	e013      	b.n	b7eaa <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   b7e82:	682b      	ldr	r3, [r5, #0]
   b7e84:	1c48      	adds	r0, r1, #1
   b7e86:	4798      	blx	r3
        if (printed == NULL)
   b7e88:	4604      	mov	r4, r0
   b7e8a:	2800      	cmp	r0, #0
   b7e8c:	d0f2      	beq.n	b7e74 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   b7e8e:	9a03      	ldr	r2, [sp, #12]
   b7e90:	9b02      	ldr	r3, [sp, #8]
   b7e92:	9901      	ldr	r1, [sp, #4]
   b7e94:	3201      	adds	r2, #1
   b7e96:	429a      	cmp	r2, r3
   b7e98:	bf28      	it	cs
   b7e9a:	461a      	movcs	r2, r3
   b7e9c:	f005 fa7b 	bl	bd396 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   b7ea0:	9b03      	ldr	r3, [sp, #12]
   b7ea2:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   b7ea4:	9801      	ldr	r0, [sp, #4]
   b7ea6:	686b      	ldr	r3, [r5, #4]
   b7ea8:	4798      	blx	r3
}
   b7eaa:	4620      	mov	r0, r4
   b7eac:	b00a      	add	sp, #40	; 0x28
   b7eae:	bd70      	pop	{r4, r5, r6, pc}
   b7eb0:	2003d050 	.word	0x2003d050

000b7eb4 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   b7eb4:	b510      	push	{r4, lr}
   b7eb6:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   b7eb8:	2028      	movs	r0, #40	; 0x28
   b7eba:	4798      	blx	r3
    if (node)
   b7ebc:	4604      	mov	r4, r0
   b7ebe:	b118      	cbz	r0, b7ec8 <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
   b7ec0:	2228      	movs	r2, #40	; 0x28
   b7ec2:	2100      	movs	r1, #0
   b7ec4:	f005 fa8f 	bl	bd3e6 <memset>
}
   b7ec8:	4620      	mov	r0, r4
   b7eca:	bd10      	pop	{r4, pc}

000b7ecc <cJSON_Delete>:
{
   b7ecc:	b570      	push	{r4, r5, r6, lr}
   b7ece:	4d10      	ldr	r5, [pc, #64]	; (b7f10 <cJSON_Delete+0x44>)
   b7ed0:	4604      	mov	r4, r0
    while (item != NULL)
   b7ed2:	b904      	cbnz	r4, b7ed6 <cJSON_Delete+0xa>
}
   b7ed4:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b7ed6:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   b7ed8:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b7eda:	05d9      	lsls	r1, r3, #23
   b7edc:	d403      	bmi.n	b7ee6 <cJSON_Delete+0x1a>
   b7ede:	68a0      	ldr	r0, [r4, #8]
   b7ee0:	b968      	cbnz	r0, b7efe <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b7ee2:	6920      	ldr	r0, [r4, #16]
   b7ee4:	b988      	cbnz	r0, b7f0a <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b7ee6:	68e3      	ldr	r3, [r4, #12]
   b7ee8:	059b      	lsls	r3, r3, #22
   b7eea:	d403      	bmi.n	b7ef4 <cJSON_Delete+0x28>
   b7eec:	6a20      	ldr	r0, [r4, #32]
   b7eee:	b108      	cbz	r0, b7ef4 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   b7ef0:	686b      	ldr	r3, [r5, #4]
   b7ef2:	4798      	blx	r3
        global_hooks.deallocate(item);
   b7ef4:	4620      	mov	r0, r4
   b7ef6:	686b      	ldr	r3, [r5, #4]
   b7ef8:	4798      	blx	r3
        item = next;
   b7efa:	4634      	mov	r4, r6
   b7efc:	e7e9      	b.n	b7ed2 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   b7efe:	f7ff ffe5 	bl	b7ecc <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b7f02:	68e3      	ldr	r3, [r4, #12]
   b7f04:	05da      	lsls	r2, r3, #23
   b7f06:	d5ec      	bpl.n	b7ee2 <cJSON_Delete+0x16>
   b7f08:	e7ed      	b.n	b7ee6 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   b7f0a:	686b      	ldr	r3, [r5, #4]
   b7f0c:	4798      	blx	r3
   b7f0e:	e7ea      	b.n	b7ee6 <cJSON_Delete+0x1a>
   b7f10:	2003d050 	.word	0x2003d050
   b7f14:	00000000 	.word	0x00000000

000b7f18 <parse_value>:
{
   b7f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7f1c:	4606      	mov	r6, r0
   b7f1e:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   b7f20:	460c      	mov	r4, r1
   b7f22:	b909      	cbnz	r1, b7f28 <parse_value+0x10>
    return false;
   b7f24:	2000      	movs	r0, #0
   b7f26:	e023      	b.n	b7f70 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   b7f28:	680f      	ldr	r7, [r1, #0]
   b7f2a:	2f00      	cmp	r7, #0
   b7f2c:	d0fa      	beq.n	b7f24 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   b7f2e:	688d      	ldr	r5, [r1, #8]
   b7f30:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b7f34:	f105 0904 	add.w	r9, r5, #4
   b7f38:	45c1      	cmp	r9, r8
   b7f3a:	d80b      	bhi.n	b7f54 <parse_value+0x3c>
   b7f3c:	4990      	ldr	r1, [pc, #576]	; (b8180 <parse_value+0x268>)
   b7f3e:	2204      	movs	r2, #4
   b7f40:	1978      	adds	r0, r7, r5
   b7f42:	f005 fabc 	bl	bd4be <strncmp>
   b7f46:	b928      	cbnz	r0, b7f54 <parse_value+0x3c>
        item->type = cJSON_NULL;
   b7f48:	2304      	movs	r3, #4
   b7f4a:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   b7f4c:	68a3      	ldr	r3, [r4, #8]
   b7f4e:	3304      	adds	r3, #4
    input_buffer->offset++;
   b7f50:	60a3      	str	r3, [r4, #8]
   b7f52:	e082      	b.n	b805a <parse_value+0x142>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   b7f54:	1d6b      	adds	r3, r5, #5
   b7f56:	4598      	cmp	r8, r3
   b7f58:	d30d      	bcc.n	b7f76 <parse_value+0x5e>
   b7f5a:	498a      	ldr	r1, [pc, #552]	; (b8184 <parse_value+0x26c>)
   b7f5c:	2205      	movs	r2, #5
   b7f5e:	1978      	adds	r0, r7, r5
   b7f60:	f005 faad 	bl	bd4be <strncmp>
   b7f64:	b938      	cbnz	r0, b7f76 <parse_value+0x5e>
        item->type = cJSON_False;
   b7f66:	2001      	movs	r0, #1
   b7f68:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   b7f6a:	68a2      	ldr	r2, [r4, #8]
   b7f6c:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   b7f6e:	60a2      	str	r2, [r4, #8]
}
   b7f70:	b012      	add	sp, #72	; 0x48
   b7f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   b7f76:	45c1      	cmp	r9, r8
   b7f78:	d80c      	bhi.n	b7f94 <parse_value+0x7c>
   b7f7a:	4983      	ldr	r1, [pc, #524]	; (b8188 <parse_value+0x270>)
   b7f7c:	2204      	movs	r2, #4
   b7f7e:	1978      	adds	r0, r7, r5
   b7f80:	f005 fa9d 	bl	bd4be <strncmp>
   b7f84:	b930      	cbnz	r0, b7f94 <parse_value+0x7c>
        item->type = cJSON_True;
   b7f86:	2302      	movs	r3, #2
        item->valueint = 1;
   b7f88:	2001      	movs	r0, #1
        item->type = cJSON_True;
   b7f8a:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   b7f8c:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   b7f8e:	68a2      	ldr	r2, [r4, #8]
   b7f90:	3204      	adds	r2, #4
   b7f92:	e7ec      	b.n	b7f6e <parse_value+0x56>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   b7f94:	4545      	cmp	r5, r8
   b7f96:	d2c5      	bcs.n	b7f24 <parse_value+0xc>
   b7f98:	5d7b      	ldrb	r3, [r7, r5]
   b7f9a:	2b22      	cmp	r3, #34	; 0x22
   b7f9c:	eb07 0005 	add.w	r0, r7, r5
   b7fa0:	d106      	bne.n	b7fb0 <parse_value+0x98>
        return parse_string(item, input_buffer);
   b7fa2:	4621      	mov	r1, r4
   b7fa4:	4630      	mov	r0, r6
}
   b7fa6:	b012      	add	sp, #72	; 0x48
   b7fa8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
   b7fac:	f7ff bb0e 	b.w	b75cc <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   b7fb0:	2b2d      	cmp	r3, #45	; 0x2d
   b7fb2:	d003      	beq.n	b7fbc <parse_value+0xa4>
   b7fb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b7fb8:	2a09      	cmp	r2, #9
   b7fba:	d863      	bhi.n	b8084 <parse_value+0x16c>
    unsigned char *after_end = NULL;
   b7fbc:	2300      	movs	r3, #0
   b7fbe:	aa02      	add	r2, sp, #8
   b7fc0:	9301      	str	r3, [sp, #4]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   b7fc2:	eba8 0505 	sub.w	r5, r8, r5
   b7fc6:	4617      	mov	r7, r2
                number_c_string[i] = decimal_point;
   b7fc8:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
        switch (buffer_at_offset(input_buffer)[i])
   b7fcc:	f810 1b01 	ldrb.w	r1, [r0], #1
   b7fd0:	2939      	cmp	r1, #57	; 0x39
   b7fd2:	d810      	bhi.n	b7ff6 <parse_value+0xde>
   b7fd4:	292a      	cmp	r1, #42	; 0x2a
   b7fd6:	d91b      	bls.n	b8010 <parse_value+0xf8>
   b7fd8:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
   b7fdc:	f1bc 0f0e 	cmp.w	ip, #14
   b7fe0:	d816      	bhi.n	b8010 <parse_value+0xf8>
   b7fe2:	e8df f00c 	tbb	[pc, ip]
   b7fe6:	150d      	.short	0x150d
   b7fe8:	0d153c0d 	.word	0x0d153c0d
   b7fec:	0d0d0d0d 	.word	0x0d0d0d0d
   b7ff0:	0d0d0d0d 	.word	0x0d0d0d0d
   b7ff4:	0d          	.byte	0x0d
   b7ff5:	00          	.byte	0x00
   b7ff6:	f001 0cdf 	and.w	ip, r1, #223	; 0xdf
   b7ffa:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   b7ffe:	d107      	bne.n	b8010 <parse_value+0xf8>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   b8000:	7011      	strb	r1, [r2, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   b8002:	3301      	adds	r3, #1
   b8004:	2b3f      	cmp	r3, #63	; 0x3f
   b8006:	f102 0201 	add.w	r2, r2, #1
   b800a:	d001      	beq.n	b8010 <parse_value+0xf8>
   b800c:	42ab      	cmp	r3, r5
   b800e:	d1dd      	bne.n	b7fcc <parse_value+0xb4>
    number_c_string[i] = '\0';
   b8010:	aa12      	add	r2, sp, #72	; 0x48
   b8012:	4413      	add	r3, r2
   b8014:	2500      	movs	r5, #0
   b8016:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   b801a:	a901      	add	r1, sp, #4
   b801c:	4638      	mov	r0, r7
   b801e:	f006 f8b9 	bl	be194 <strtod>
    if (number_c_string == after_end)
   b8022:	f8dd a004 	ldr.w	sl, [sp, #4]
   b8026:	45ba      	cmp	sl, r7
    number = strtod((const char*)number_c_string, (char**)&after_end);
   b8028:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   b802c:	f43f af7a 	beq.w	b7f24 <parse_value+0xc>
    item->valuedouble = number;
   b8030:	ed86 0b06 	vstr	d0, [r6, #24]
    if (number >= INT_MAX)
   b8034:	a350      	add	r3, pc, #320	; (adr r3, b8178 <parse_value+0x260>)
   b8036:	e9d3 2300 	ldrd	r2, r3, [r3]
   b803a:	ee10 0a10 	vmov	r0, s0
   b803e:	4649      	mov	r1, r9
   b8040:	f7fc fc30 	bl	b48a4 <__aeabi_dcmpge>
   b8044:	b170      	cbz	r0, b8064 <parse_value+0x14c>
        item->valueint = INT_MAX;
   b8046:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   b804a:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   b804c:	2308      	movs	r3, #8
   b804e:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   b8050:	ebaa 0a07 	sub.w	sl, sl, r7
   b8054:	68a7      	ldr	r7, [r4, #8]
   b8056:	4457      	add	r7, sl
   b8058:	60a7      	str	r7, [r4, #8]
    return true;
   b805a:	2001      	movs	r0, #1
   b805c:	e788      	b.n	b7f70 <parse_value+0x58>
                number_c_string[i] = decimal_point;
   b805e:	f882 e000 	strb.w	lr, [r2]
                break;
   b8062:	e7ce      	b.n	b8002 <parse_value+0xea>
    else if (number <= (double)INT_MIN)
   b8064:	4b49      	ldr	r3, [pc, #292]	; (b818c <parse_value+0x274>)
   b8066:	2200      	movs	r2, #0
   b8068:	4640      	mov	r0, r8
   b806a:	4649      	mov	r1, r9
   b806c:	f7fc fc10 	bl	b4890 <__aeabi_dcmple>
   b8070:	b110      	cbz	r0, b8078 <parse_value+0x160>
        item->valueint = INT_MIN;
   b8072:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   b8076:	e7e8      	b.n	b804a <parse_value+0x132>
        item->valueint = (int)number;
   b8078:	4640      	mov	r0, r8
   b807a:	4649      	mov	r1, r9
   b807c:	f7fc fc26 	bl	b48cc <__aeabi_d2iz>
   b8080:	6170      	str	r0, [r6, #20]
   b8082:	e7e3      	b.n	b804c <parse_value+0x134>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   b8084:	2b5b      	cmp	r3, #91	; 0x5b
   b8086:	d150      	bne.n	b812a <parse_value+0x212>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   b8088:	68e3      	ldr	r3, [r4, #12]
   b808a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b808e:	f4bf af49 	bcs.w	b7f24 <parse_value+0xc>
    input_buffer->depth++;
   b8092:	3301      	adds	r3, #1
   b8094:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   b8096:	5d7b      	ldrb	r3, [r7, r5]
   b8098:	2b5b      	cmp	r3, #91	; 0x5b
   b809a:	f47f af43 	bne.w	b7f24 <parse_value+0xc>
    input_buffer->offset++;
   b809e:	3501      	adds	r5, #1
   b80a0:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   b80a2:	4620      	mov	r0, r4
   b80a4:	f7ff fb84 	bl	b77b0 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   b80a8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b80ac:	4293      	cmp	r3, r2
   b80ae:	d25d      	bcs.n	b816c <parse_value+0x254>
   b80b0:	6822      	ldr	r2, [r4, #0]
   b80b2:	5cd2      	ldrb	r2, [r2, r3]
   b80b4:	2a5d      	cmp	r2, #93	; 0x5d
   b80b6:	d109      	bne.n	b80cc <parse_value+0x1b4>
    cJSON *head = NULL; /* head of the linked list */
   b80b8:	2700      	movs	r7, #0
    input_buffer->depth--;
   b80ba:	68e3      	ldr	r3, [r4, #12]
   b80bc:	3b01      	subs	r3, #1
   b80be:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   b80c0:	2320      	movs	r3, #32
    item->child = head;
   b80c2:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   b80c6:	68a3      	ldr	r3, [r4, #8]
   b80c8:	3301      	adds	r3, #1
   b80ca:	e741      	b.n	b7f50 <parse_value+0x38>
    input_buffer->offset--;
   b80cc:	3b01      	subs	r3, #1
    cJSON *current_item = NULL;
   b80ce:	2500      	movs	r5, #0
    input_buffer->offset--;
   b80d0:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* head of the linked list */
   b80d2:	462f      	mov	r7, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   b80d4:	6920      	ldr	r0, [r4, #16]
   b80d6:	f7ff feed 	bl	b7eb4 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   b80da:	46a8      	mov	r8, r5
   b80dc:	4605      	mov	r5, r0
   b80de:	2800      	cmp	r0, #0
   b80e0:	f000 809b 	beq.w	b821a <parse_value+0x302>
        if (head == NULL)
   b80e4:	b1ff      	cbz	r7, b8126 <parse_value+0x20e>
            current_item->next = new_item;
   b80e6:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   b80ea:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   b80ee:	68a3      	ldr	r3, [r4, #8]
   b80f0:	3301      	adds	r3, #1
   b80f2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b80f4:	4620      	mov	r0, r4
   b80f6:	f7ff fb5b 	bl	b77b0 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   b80fa:	4621      	mov	r1, r4
   b80fc:	4628      	mov	r0, r5
   b80fe:	f7ff ff0b 	bl	b7f18 <parse_value>
   b8102:	2800      	cmp	r0, #0
   b8104:	f000 808c 	beq.w	b8220 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b8108:	4620      	mov	r0, r4
   b810a:	f7ff fb51 	bl	b77b0 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   b810e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b8112:	4293      	cmp	r3, r2
   b8114:	f080 8084 	bcs.w	b8220 <parse_value+0x308>
   b8118:	6822      	ldr	r2, [r4, #0]
   b811a:	5cd3      	ldrb	r3, [r2, r3]
   b811c:	2b2c      	cmp	r3, #44	; 0x2c
   b811e:	d0d9      	beq.n	b80d4 <parse_value+0x1bc>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   b8120:	2b5d      	cmp	r3, #93	; 0x5d
   b8122:	d17d      	bne.n	b8220 <parse_value+0x308>
   b8124:	e7c9      	b.n	b80ba <parse_value+0x1a2>
   b8126:	4607      	mov	r7, r0
   b8128:	e7e1      	b.n	b80ee <parse_value+0x1d6>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   b812a:	2b7b      	cmp	r3, #123	; 0x7b
   b812c:	f47f aefa 	bne.w	b7f24 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   b8130:	68e3      	ldr	r3, [r4, #12]
   b8132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b8136:	f4bf aef5 	bcs.w	b7f24 <parse_value+0xc>
    input_buffer->depth++;
   b813a:	3301      	adds	r3, #1
   b813c:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   b813e:	5d7b      	ldrb	r3, [r7, r5]
   b8140:	2b7b      	cmp	r3, #123	; 0x7b
   b8142:	f47f aeef 	bne.w	b7f24 <parse_value+0xc>
    input_buffer->offset++;
   b8146:	3501      	adds	r5, #1
   b8148:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   b814a:	4620      	mov	r0, r4
   b814c:	f7ff fb30 	bl	b77b0 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   b8150:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b8154:	4293      	cmp	r3, r2
   b8156:	d209      	bcs.n	b816c <parse_value+0x254>
   b8158:	6822      	ldr	r2, [r4, #0]
   b815a:	5cd2      	ldrb	r2, [r2, r3]
   b815c:	2a7d      	cmp	r2, #125	; 0x7d
   b815e:	d117      	bne.n	b8190 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
   b8160:	2700      	movs	r7, #0
    input_buffer->depth--;
   b8162:	68e3      	ldr	r3, [r4, #12]
   b8164:	3b01      	subs	r3, #1
   b8166:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   b8168:	2340      	movs	r3, #64	; 0x40
   b816a:	e7aa      	b.n	b80c2 <parse_value+0x1aa>
        input_buffer->offset--;
   b816c:	3b01      	subs	r3, #1
   b816e:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   b8170:	e6d8      	b.n	b7f24 <parse_value+0xc>
   b8172:	bf00      	nop
   b8174:	f3af 8000 	nop.w
   b8178:	ffc00000 	.word	0xffc00000
   b817c:	41dfffff 	.word	0x41dfffff
   b8180:	000bfdf7 	.word	0x000bfdf7
   b8184:	000c0095 	.word	0x000c0095
   b8188:	000bfdfc 	.word	0x000bfdfc
   b818c:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   b8190:	2500      	movs	r5, #0
    input_buffer->offset--;
   b8192:	3b01      	subs	r3, #1
   b8194:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* linked list head */
   b8196:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   b8198:	46a8      	mov	r8, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   b819a:	6920      	ldr	r0, [r4, #16]
   b819c:	f7ff fe8a 	bl	b7eb4 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   b81a0:	46a9      	mov	r9, r5
   b81a2:	4605      	mov	r5, r0
   b81a4:	2800      	cmp	r0, #0
   b81a6:	d038      	beq.n	b821a <parse_value+0x302>
        if (head == NULL)
   b81a8:	b3af      	cbz	r7, b8216 <parse_value+0x2fe>
            current_item->next = new_item;
   b81aa:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   b81ae:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   b81b2:	68a3      	ldr	r3, [r4, #8]
   b81b4:	3301      	adds	r3, #1
   b81b6:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b81b8:	4620      	mov	r0, r4
   b81ba:	f7ff faf9 	bl	b77b0 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   b81be:	4621      	mov	r1, r4
   b81c0:	4628      	mov	r0, r5
   b81c2:	f7ff fa03 	bl	b75cc <parse_string>
   b81c6:	b358      	cbz	r0, b8220 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b81c8:	4620      	mov	r0, r4
   b81ca:	f7ff faf1 	bl	b77b0 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   b81ce:	692b      	ldr	r3, [r5, #16]
   b81d0:	622b      	str	r3, [r5, #32]
        current_item->valuestring = NULL;
   b81d2:	f8c5 8010 	str.w	r8, [r5, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   b81d6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b81da:	4293      	cmp	r3, r2
   b81dc:	d220      	bcs.n	b8220 <parse_value+0x308>
   b81de:	6822      	ldr	r2, [r4, #0]
   b81e0:	5cd2      	ldrb	r2, [r2, r3]
   b81e2:	2a3a      	cmp	r2, #58	; 0x3a
   b81e4:	d11c      	bne.n	b8220 <parse_value+0x308>
        input_buffer->offset++;
   b81e6:	3301      	adds	r3, #1
   b81e8:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b81ea:	4620      	mov	r0, r4
   b81ec:	f7ff fae0 	bl	b77b0 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   b81f0:	4621      	mov	r1, r4
   b81f2:	4628      	mov	r0, r5
   b81f4:	f7ff fe90 	bl	b7f18 <parse_value>
   b81f8:	b190      	cbz	r0, b8220 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b81fa:	4620      	mov	r0, r4
   b81fc:	f7ff fad8 	bl	b77b0 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   b8200:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b8204:	4293      	cmp	r3, r2
   b8206:	d20b      	bcs.n	b8220 <parse_value+0x308>
   b8208:	6822      	ldr	r2, [r4, #0]
   b820a:	5cd3      	ldrb	r3, [r2, r3]
   b820c:	2b2c      	cmp	r3, #44	; 0x2c
   b820e:	d0c4      	beq.n	b819a <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   b8210:	2b7d      	cmp	r3, #125	; 0x7d
   b8212:	d105      	bne.n	b8220 <parse_value+0x308>
   b8214:	e7a5      	b.n	b8162 <parse_value+0x24a>
   b8216:	4607      	mov	r7, r0
   b8218:	e7cb      	b.n	b81b2 <parse_value+0x29a>
    if (head != NULL)
   b821a:	2f00      	cmp	r7, #0
   b821c:	f43f ae82 	beq.w	b7f24 <parse_value+0xc>
        cJSON_Delete(head);
   b8220:	4638      	mov	r0, r7
   b8222:	f7ff fe53 	bl	b7ecc <cJSON_Delete>
   b8226:	e67d      	b.n	b7f24 <parse_value+0xc>

000b8228 <cJSON_ParseWithOpts>:
{
   b8228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    global_error.json = NULL;
   b822c:	4f30      	ldr	r7, [pc, #192]	; (b82f0 <cJSON_ParseWithOpts+0xc8>)
{
   b822e:	b089      	sub	sp, #36	; 0x24
   b8230:	4605      	mov	r5, r0
   b8232:	460e      	mov	r6, r1
   b8234:	4690      	mov	r8, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   b8236:	2100      	movs	r1, #0
   b8238:	221c      	movs	r2, #28
   b823a:	a801      	add	r0, sp, #4
    global_error.json = NULL;
   b823c:	f04f 0900 	mov.w	r9, #0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   b8240:	f005 f8d1 	bl	bd3e6 <memset>
    global_error.position = 0;
   b8244:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL)
   b8248:	2d00      	cmp	r5, #0
   b824a:	d048      	beq.n	b82de <cJSON_ParseWithOpts+0xb6>
    buffer.length = strlen((const char*)value) + sizeof("");
   b824c:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   b824e:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   b8250:	f7fc fbe0 	bl	b4a14 <strlen>
    buffer.hooks = global_hooks;
   b8254:	4b27      	ldr	r3, [pc, #156]	; (b82f4 <cJSON_ParseWithOpts+0xcc>)
    buffer.length = strlen((const char*)value) + sizeof("");
   b8256:	3001      	adds	r0, #1
   b8258:	9002      	str	r0, [sp, #8]
    buffer.hooks = global_hooks;
   b825a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b825e:	ab08      	add	r3, sp, #32
   b8260:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   b8264:	f7ff fe26 	bl	b7eb4 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   b8268:	4604      	mov	r4, r0
   b826a:	b368      	cbz	r0, b82c8 <cJSON_ParseWithOpts+0xa0>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   b826c:	9801      	ldr	r0, [sp, #4]
   b826e:	b170      	cbz	r0, b828e <cJSON_ParseWithOpts+0x66>
   b8270:	9b03      	ldr	r3, [sp, #12]
   b8272:	b95b      	cbnz	r3, b828c <cJSON_ParseWithOpts+0x64>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   b8274:	9b02      	ldr	r3, [sp, #8]
   b8276:	2b04      	cmp	r3, #4
   b8278:	d906      	bls.n	b8288 <cJSON_ParseWithOpts+0x60>
   b827a:	491f      	ldr	r1, [pc, #124]	; (b82f8 <cJSON_ParseWithOpts+0xd0>)
   b827c:	2203      	movs	r2, #3
   b827e:	f005 f91e 	bl	bd4be <strncmp>
   b8282:	b908      	cbnz	r0, b8288 <cJSON_ParseWithOpts+0x60>
        buffer->offset += 3;
   b8284:	2303      	movs	r3, #3
   b8286:	9303      	str	r3, [sp, #12]
    return buffer;
   b8288:	a801      	add	r0, sp, #4
   b828a:	e000      	b.n	b828e <cJSON_ParseWithOpts+0x66>
        return NULL;
   b828c:	4648      	mov	r0, r9
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   b828e:	f7ff fa8f 	bl	b77b0 <buffer_skip_whitespace>
   b8292:	4601      	mov	r1, r0
   b8294:	4620      	mov	r0, r4
   b8296:	f7ff fe3f 	bl	b7f18 <parse_value>
   b829a:	b190      	cbz	r0, b82c2 <cJSON_ParseWithOpts+0x9a>
    if (require_null_terminated)
   b829c:	f1b8 0f00 	cmp.w	r8, #0
   b82a0:	d104      	bne.n	b82ac <cJSON_ParseWithOpts+0x84>
    if (return_parse_end)
   b82a2:	b9f6      	cbnz	r6, b82e2 <cJSON_ParseWithOpts+0xba>
}
   b82a4:	4620      	mov	r0, r4
   b82a6:	b009      	add	sp, #36	; 0x24
   b82a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buffer_skip_whitespace(&buffer);
   b82ac:	a801      	add	r0, sp, #4
   b82ae:	f7ff fa7f 	bl	b77b0 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   b82b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b82b6:	4293      	cmp	r3, r2
   b82b8:	d203      	bcs.n	b82c2 <cJSON_ParseWithOpts+0x9a>
   b82ba:	9a01      	ldr	r2, [sp, #4]
   b82bc:	5cd3      	ldrb	r3, [r2, r3]
   b82be:	2b00      	cmp	r3, #0
   b82c0:	d0ef      	beq.n	b82a2 <cJSON_ParseWithOpts+0x7a>
        cJSON_Delete(item);
   b82c2:	4620      	mov	r0, r4
   b82c4:	f7ff fe02 	bl	b7ecc <cJSON_Delete>
        if (buffer.offset < buffer.length)
   b82c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b82cc:	429a      	cmp	r2, r3
   b82ce:	d30d      	bcc.n	b82ec <cJSON_ParseWithOpts+0xc4>
        else if (buffer.length > 0)
   b82d0:	b103      	cbz	r3, b82d4 <cJSON_ParseWithOpts+0xac>
            local_error.position = buffer.length - 1;
   b82d2:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   b82d4:	b10e      	cbz	r6, b82da <cJSON_ParseWithOpts+0xb2>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   b82d6:	18ea      	adds	r2, r5, r3
   b82d8:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   b82da:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   b82de:	2400      	movs	r4, #0
   b82e0:	e7e0      	b.n	b82a4 <cJSON_ParseWithOpts+0x7c>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   b82e2:	9b01      	ldr	r3, [sp, #4]
   b82e4:	9a03      	ldr	r2, [sp, #12]
   b82e6:	4413      	add	r3, r2
   b82e8:	6033      	str	r3, [r6, #0]
   b82ea:	e7db      	b.n	b82a4 <cJSON_ParseWithOpts+0x7c>
   b82ec:	4613      	mov	r3, r2
   b82ee:	e7f1      	b.n	b82d4 <cJSON_ParseWithOpts+0xac>
   b82f0:	2003e64c 	.word	0x2003e64c
   b82f4:	2003d050 	.word	0x2003d050
   b82f8:	000bfe13 	.word	0x000bfe13

000b82fc <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   b82fc:	2200      	movs	r2, #0
   b82fe:	4611      	mov	r1, r2
   b8300:	f7ff bf92 	b.w	b8228 <cJSON_ParseWithOpts>

000b8304 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   b8304:	2100      	movs	r1, #0
   b8306:	f7ff bd8b 	b.w	b7e20 <print.constprop.0>

000b830a <cJSON_GetArraySize>:
    if (array == NULL)
   b830a:	b110      	cbz	r0, b8312 <cJSON_GetArraySize+0x8>
    child = array->child;
   b830c:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   b830e:	2000      	movs	r0, #0
    while(child != NULL)
   b8310:	b903      	cbnz	r3, b8314 <cJSON_GetArraySize+0xa>
}
   b8312:	4770      	bx	lr
        child = child->next;
   b8314:	681b      	ldr	r3, [r3, #0]
        size++;
   b8316:	3001      	adds	r0, #1
        child = child->next;
   b8318:	e7fa      	b.n	b8310 <cJSON_GetArraySize+0x6>

000b831a <cJSON_GetArrayItem>:
    if (index < 0)
   b831a:	2900      	cmp	r1, #0
   b831c:	db01      	blt.n	b8322 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   b831e:	f7ff ba5c 	b.w	b77da <get_array_item>
}
   b8322:	2000      	movs	r0, #0
   b8324:	4770      	bx	lr

000b8326 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
   b8326:	2201      	movs	r2, #1
   b8328:	f7ff baac 	b.w	b7884 <get_object_item>

000b832c <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   b832c:	f7ff bae8 	b.w	b7900 <add_item_to_array>

000b8330 <cJSON_ReplaceItemViaPointer>:
        newitem->prev->next = newitem;
    }
}

CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
{
   b8330:	b510      	push	{r4, lr}
    if ((parent == NULL) || (replacement == NULL) || (item == NULL))
   b8332:	b1d0      	cbz	r0, b836a <cJSON_ReplaceItemViaPointer+0x3a>
   b8334:	b1c2      	cbz	r2, b8368 <cJSON_ReplaceItemViaPointer+0x38>
   b8336:	b1c9      	cbz	r1, b836c <cJSON_ReplaceItemViaPointer+0x3c>
    {
        return false;
    }

    if (replacement == item)
   b8338:	428a      	cmp	r2, r1
   b833a:	d013      	beq.n	b8364 <cJSON_ReplaceItemViaPointer+0x34>
    {
        return true;
    }

    replacement->next = item->next;
   b833c:	680b      	ldr	r3, [r1, #0]
   b833e:	6013      	str	r3, [r2, #0]
    replacement->prev = item->prev;
   b8340:	684c      	ldr	r4, [r1, #4]
   b8342:	6054      	str	r4, [r2, #4]

    if (replacement->next != NULL)
   b8344:	b103      	cbz	r3, b8348 <cJSON_ReplaceItemViaPointer+0x18>
    {
        replacement->next->prev = replacement;
   b8346:	605a      	str	r2, [r3, #4]
    }
    if (replacement->prev != NULL)
   b8348:	6853      	ldr	r3, [r2, #4]
   b834a:	b103      	cbz	r3, b834e <cJSON_ReplaceItemViaPointer+0x1e>
    {
        replacement->prev->next = replacement;
   b834c:	601a      	str	r2, [r3, #0]
    }
    if (parent->child == item)
   b834e:	6883      	ldr	r3, [r0, #8]
   b8350:	4299      	cmp	r1, r3
    {
        parent->child = replacement;
    }

    item->next = NULL;
   b8352:	f04f 0300 	mov.w	r3, #0
        parent->child = replacement;
   b8356:	bf08      	it	eq
   b8358:	6082      	streq	r2, [r0, #8]
    item->prev = NULL;
   b835a:	e9c1 3300 	strd	r3, r3, [r1]
    cJSON_Delete(item);
   b835e:	4608      	mov	r0, r1
   b8360:	f7ff fdb4 	bl	b7ecc <cJSON_Delete>
        return true;
   b8364:	2001      	movs	r0, #1
   b8366:	e000      	b.n	b836a <cJSON_ReplaceItemViaPointer+0x3a>
        return false;
   b8368:	4610      	mov	r0, r2

    return true;
}
   b836a:	bd10      	pop	{r4, pc}
        return false;
   b836c:	4608      	mov	r0, r1
   b836e:	e7fc      	b.n	b836a <cJSON_ReplaceItemViaPointer+0x3a>

000b8370 <cJSON_CreateNull>:
    replace_item_in_object(object, string, newitem, true);
}

/* Create basic types: */
CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)
{
   b8370:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b8372:	4b04      	ldr	r3, [pc, #16]	; (b8384 <cJSON_CreateNull+0x14>)
   b8374:	6818      	ldr	r0, [r3, #0]
   b8376:	f7ff fd9d 	bl	b7eb4 <cJSON_New_Item.isra.0>
    if(item)
   b837a:	b108      	cbz	r0, b8380 <cJSON_CreateNull+0x10>
    {
        item->type = cJSON_NULL;
   b837c:	2304      	movs	r3, #4
   b837e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b8380:	bd08      	pop	{r3, pc}
   b8382:	bf00      	nop
   b8384:	2003d050 	.word	0x2003d050

000b8388 <cJSON_AddNullToObject>:
{
   b8388:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b838a:	4605      	mov	r5, r0
   b838c:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   b838e:	f7ff ffef 	bl	b8370 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, false))
   b8392:	9901      	ldr	r1, [sp, #4]
   b8394:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   b8396:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, false))
   b8398:	2300      	movs	r3, #0
   b839a:	4628      	mov	r0, r5
   b839c:	f7ff fb70 	bl	b7a80 <add_item_to_object.constprop.0>
   b83a0:	4605      	mov	r5, r0
   b83a2:	b918      	cbnz	r0, b83ac <cJSON_AddNullToObject+0x24>
    cJSON_Delete(null);
   b83a4:	4620      	mov	r0, r4
   b83a6:	f7ff fd91 	bl	b7ecc <cJSON_Delete>
    return NULL;
   b83aa:	462c      	mov	r4, r5
}
   b83ac:	4620      	mov	r0, r4
   b83ae:	b003      	add	sp, #12
   b83b0:	bd30      	pop	{r4, r5, pc}
	...

000b83b4 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   b83b4:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b83b6:	4b04      	ldr	r3, [pc, #16]	; (b83c8 <cJSON_CreateArray+0x14>)
   b83b8:	6818      	ldr	r0, [r3, #0]
   b83ba:	f7ff fd7b 	bl	b7eb4 <cJSON_New_Item.isra.0>
    if(item)
   b83be:	b108      	cbz	r0, b83c4 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   b83c0:	2320      	movs	r3, #32
   b83c2:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b83c4:	bd08      	pop	{r3, pc}
   b83c6:	bf00      	nop
   b83c8:	2003d050 	.word	0x2003d050

000b83cc <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   b83cc:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b83ce:	4b04      	ldr	r3, [pc, #16]	; (b83e0 <cJSON_CreateObject+0x14>)
   b83d0:	6818      	ldr	r0, [r3, #0]
   b83d2:	f7ff fd6f 	bl	b7eb4 <cJSON_New_Item.isra.0>
    if (item)
   b83d6:	b108      	cbz	r0, b83dc <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   b83d8:	2340      	movs	r3, #64	; 0x40
   b83da:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b83dc:	bd08      	pop	{r3, pc}
   b83de:	bf00      	nop
   b83e0:	2003d050 	.word	0x2003d050

000b83e4 <cJSON_IsInvalid>:
    *into = '\0';
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)
{
    if (item == NULL)
   b83e4:	b118      	cbz	r0, b83ee <cJSON_IsInvalid+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Invalid;
   b83e6:	7b00      	ldrb	r0, [r0, #12]
   b83e8:	fab0 f080 	clz	r0, r0
   b83ec:	0940      	lsrs	r0, r0, #5
}
   b83ee:	4770      	bx	lr

000b83f0 <cJSON_IsBool>:
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   b83f0:	b120      	cbz	r0, b83fc <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   b83f2:	68c0      	ldr	r0, [r0, #12]
   b83f4:	f010 0003 	ands.w	r0, r0, #3
   b83f8:	bf18      	it	ne
   b83fa:	2001      	movne	r0, #1
}
   b83fc:	4770      	bx	lr

000b83fe <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   b83fe:	b118      	cbz	r0, b8408 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   b8400:	7b00      	ldrb	r0, [r0, #12]
   b8402:	1f03      	subs	r3, r0, #4
   b8404:	4258      	negs	r0, r3
   b8406:	4158      	adcs	r0, r3
}
   b8408:	4770      	bx	lr

000b840a <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   b840a:	b120      	cbz	r0, b8416 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   b840c:	7b00      	ldrb	r0, [r0, #12]
   b840e:	f1a0 0308 	sub.w	r3, r0, #8
   b8412:	4258      	negs	r0, r3
   b8414:	4158      	adcs	r0, r3
}
   b8416:	4770      	bx	lr

000b8418 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   b8418:	b120      	cbz	r0, b8424 <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   b841a:	7b00      	ldrb	r0, [r0, #12]
   b841c:	f1a0 0310 	sub.w	r3, r0, #16
   b8420:	4258      	negs	r0, r3
   b8422:	4158      	adcs	r0, r3
}
   b8424:	4770      	bx	lr

000b8426 <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
    if (item == NULL)
   b8426:	b120      	cbz	r0, b8432 <cJSON_IsArray+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Array;
   b8428:	7b00      	ldrb	r0, [r0, #12]
   b842a:	f1a0 0320 	sub.w	r3, r0, #32
   b842e:	4258      	negs	r0, r3
   b8430:	4158      	adcs	r0, r3
}
   b8432:	4770      	bx	lr

000b8434 <cJSON_IsObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   b8434:	b120      	cbz	r0, b8440 <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   b8436:	7b00      	ldrb	r0, [r0, #12]
   b8438:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   b843c:	4258      	negs	r0, r3
   b843e:	4158      	adcs	r0, r3
}
   b8440:	4770      	bx	lr
	...

000b8444 <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   b8444:	4b01      	ldr	r3, [pc, #4]	; (b844c <cJSON_free+0x8>)
   b8446:	685b      	ldr	r3, [r3, #4]
   b8448:	4718      	bx	r3
   b844a:	bf00      	nop
   b844c:	2003d050 	.word	0x2003d050

000b8450 <replace_item_in_object.isra.0>:
static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
   b8450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8452:	4606      	mov	r6, r0
   b8454:	460d      	mov	r5, r1
   b8456:	461f      	mov	r7, r3
    if ((replacement == NULL) || (string == NULL))
   b8458:	4614      	mov	r4, r2
   b845a:	b1da      	cbz	r2, b8494 <replace_item_in_object.isra.0+0x44>
   b845c:	b1d1      	cbz	r1, b8494 <replace_item_in_object.isra.0+0x44>
    if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
   b845e:	68d3      	ldr	r3, [r2, #12]
   b8460:	059b      	lsls	r3, r3, #22
   b8462:	d403      	bmi.n	b846c <replace_item_in_object.isra.0+0x1c>
   b8464:	6a10      	ldr	r0, [r2, #32]
   b8466:	b108      	cbz	r0, b846c <replace_item_in_object.isra.0+0x1c>
        cJSON_free(replacement->string);
   b8468:	f7ff ffec 	bl	b8444 <cJSON_free>
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   b846c:	4628      	mov	r0, r5
   b846e:	f7ff faef 	bl	b7a50 <cJSON_strdup.constprop.0>
    replacement->type &= ~cJSON_StringIsConst;
   b8472:	68e3      	ldr	r3, [r4, #12]
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   b8474:	6220      	str	r0, [r4, #32]
    replacement->type &= ~cJSON_StringIsConst;
   b8476:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b847a:	463a      	mov	r2, r7
   b847c:	4629      	mov	r1, r5
    replacement->type &= ~cJSON_StringIsConst;
   b847e:	60e3      	str	r3, [r4, #12]
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b8480:	4630      	mov	r0, r6
   b8482:	f7ff f9ff 	bl	b7884 <get_object_item>
   b8486:	4622      	mov	r2, r4
   b8488:	4601      	mov	r1, r0
   b848a:	4630      	mov	r0, r6
}
   b848c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b8490:	f7ff bf4e 	b.w	b8330 <cJSON_ReplaceItemViaPointer>
}
   b8494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8496 <cJSON_ReplaceItemInObjectCaseSensitive>:
    replace_item_in_object(object, string, newitem, true);
   b8496:	2301      	movs	r3, #1
   b8498:	f7ff bfda 	b.w	b8450 <replace_item_in_object.isra.0>

000b849c <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b849c:	b510      	push	{r4, lr}
   b849e:	4604      	mov	r4, r0
   b84a0:	f004 fb78 	bl	bcb94 <_ZN9TCPClientC1Ev>
{

}
   b84a4:	4620      	mov	r0, r4
   b84a6:	bd10      	pop	{r4, pc}

000b84a8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b84a8:	b538      	push	{r3, r4, r5, lr}
   b84aa:	4604      	mov	r4, r0
   b84ac:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b84ae:	f003 f91d 	bl	bb6ec <_ZN5Print5printEPKc>
    client.print(": ");
   b84b2:	4905      	ldr	r1, [pc, #20]	; (b84c8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b84b4:	4620      	mov	r0, r4
   b84b6:	f003 f919 	bl	bb6ec <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b84ba:	4629      	mov	r1, r5
   b84bc:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b84be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b84c2:	f003 b92c 	b.w	bb71e <_ZN5Print7printlnEPKc>
   b84c6:	bf00      	nop
   b84c8:	000bf9a9 	.word	0x000bf9a9

000b84cc <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b84cc:	b538      	push	{r3, r4, r5, lr}
   b84ce:	4605      	mov	r5, r0
   b84d0:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b84d2:	f003 f90b 	bl	bb6ec <_ZN5Print5printEPKc>
    client.print(": ");
   b84d6:	490b      	ldr	r1, [pc, #44]	; (b8504 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b84d8:	4628      	mov	r0, r5
   b84da:	f003 f907 	bl	bb6ec <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b84de:	2c00      	cmp	r4, #0
   b84e0:	da0d      	bge.n	b84fe <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b84e2:	212d      	movs	r1, #45	; 0x2d
   b84e4:	4628      	mov	r0, r5
   b84e6:	f003 f905 	bl	bb6f4 <_ZN5Print5printEc>
            val = -n;
   b84ea:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b84ec:	4628      	mov	r0, r5
   b84ee:	220a      	movs	r2, #10
   b84f0:	f003 f929 	bl	bb746 <_ZN5Print11printNumberEmh>
        n += println();
   b84f4:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b84f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b84fa:	f003 b904 	b.w	bb706 <_ZN5Print7printlnEv>
            val = n;
   b84fe:	4621      	mov	r1, r4
   b8500:	e7f4      	b.n	b84ec <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b8502:	bf00      	nop
   b8504:	000bf9a9 	.word	0x000bf9a9

000b8508 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b8508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b850c:	460e      	mov	r6, r1
   b850e:	b091      	sub	sp, #68	; 0x44
   b8510:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b8512:	f04f 33ff 	mov.w	r3, #4294967295
   b8516:	6013      	str	r3, [r2, #0]
{
   b8518:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b851a:	2100      	movs	r1, #0
   b851c:	4630      	mov	r0, r6
   b851e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b8522:	4617      	mov	r7, r2
   b8524:	f001 fe15 	bl	ba152 <_ZNK6String6equalsEPKc>
   b8528:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b852c:	4603      	mov	r3, r0
   b852e:	b998      	cbnz	r0, b8558 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b8530:	f1be 0f00 	cmp.w	lr, #0
   b8534:	bf14      	ite	ne
   b8536:	4672      	movne	r2, lr
   b8538:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b853a:	6831      	ldr	r1, [r6, #0]
   b853c:	b292      	uxth	r2, r2
   b853e:	4620      	mov	r0, r4
   b8540:	f004 f928 	bl	bc794 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b8544:	1e05      	subs	r5, r0, #0
   b8546:	bf18      	it	ne
   b8548:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b854a:	b9c5      	cbnz	r5, b857e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b854c:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b854e:	b011      	add	sp, #68	; 0x44
   b8550:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b8554:	f004 bad4 	b.w	bcb00 <_ZN9TCPClient4stopEv>
   b8558:	4b75      	ldr	r3, [pc, #468]	; (b8730 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   b855a:	930a      	str	r3, [sp, #40]	; 0x28
   b855c:	f106 0c14 	add.w	ip, r6, #20
   b8560:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8564:	ad0b      	add	r5, sp, #44	; 0x2c
   b8566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8568:	f8dc 3000 	ldr.w	r3, [ip]
   b856c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b856e:	fa1f f28e 	uxth.w	r2, lr
   b8572:	2300      	movs	r3, #0
   b8574:	a90a      	add	r1, sp, #40	; 0x28
   b8576:	4620      	mov	r0, r4
   b8578:	f004 f9ec 	bl	bc954 <_ZN9TCPClient7connectE9IPAddresstm>
   b857c:	e7e2      	b.n	b8544 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b857e:	4649      	mov	r1, r9
   b8580:	4620      	mov	r0, r4
   b8582:	f003 f8b3 	bl	bb6ec <_ZN5Print5printEPKc>
    client.print(" ");
   b8586:	496b      	ldr	r1, [pc, #428]	; (b8734 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b8588:	4620      	mov	r0, r4
   b858a:	f003 f8af 	bl	bb6ec <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b858e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b8590:	4620      	mov	r0, r4
   b8592:	f003 f8ab 	bl	bb6ec <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b8596:	4968      	ldr	r1, [pc, #416]	; (b8738 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b8598:	4620      	mov	r0, r4
   b859a:	f003 f8a7 	bl	bb6ec <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b859e:	4967      	ldr	r1, [pc, #412]	; (b873c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b85a0:	4a67      	ldr	r2, [pc, #412]	; (b8740 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b85a2:	4620      	mov	r0, r4
   b85a4:	f7ff ff80 	bl	b84a8 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b85a8:	2100      	movs	r1, #0
   b85aa:	4630      	mov	r0, r6
   b85ac:	f001 fdd1 	bl	ba152 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b85b0:	b920      	cbnz	r0, b85bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b85b2:	6832      	ldr	r2, [r6, #0]
   b85b4:	4963      	ldr	r1, [pc, #396]	; (b8744 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b85b6:	4620      	mov	r0, r4
   b85b8:	f7ff ff76 	bl	b84a8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b85bc:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b85c0:	2100      	movs	r1, #0
   b85c2:	4650      	mov	r0, sl
   b85c4:	f001 fdc5 	bl	ba152 <_ZNK6String6equalsEPKc>
   b85c8:	b928      	cbnz	r0, b85d6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b85ca:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b85cc:	495e      	ldr	r1, [pc, #376]	; (b8748 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b85ce:	4620      	mov	r0, r4
   b85d0:	f7ff ff7c 	bl	b84cc <_ZN10HttpClient10sendHeaderEPKci>
   b85d4:	e006      	b.n	b85e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b85d6:	495d      	ldr	r1, [pc, #372]	; (b874c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b85d8:	4648      	mov	r0, r9
   b85da:	f7fc fa11 	bl	b4a00 <strcmp>
   b85de:	4602      	mov	r2, r0
   b85e0:	2800      	cmp	r0, #0
   b85e2:	d0f3      	beq.n	b85cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b85e4:	f1b8 0f00 	cmp.w	r8, #0
   b85e8:	d00e      	beq.n	b8608 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b85ea:	f8d8 1000 	ldr.w	r1, [r8]
   b85ee:	b159      	cbz	r1, b8608 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b85f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b85f4:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b85f6:	b122      	cbz	r2, b8602 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b85f8:	f7ff ff56 	bl	b84a8 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b85fc:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b8600:	e7f3      	b.n	b85ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b8602:	f003 f88c 	bl	bb71e <_ZN5Print7printlnEPKc>
}
   b8606:	e7f9      	b.n	b85fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b8608:	4620      	mov	r0, r4
   b860a:	f003 f87c 	bl	bb706 <_ZN5Print7printlnEv>
    client.flush();
   b860e:	4620      	mov	r0, r4
   b8610:	f004 f844 	bl	bc69c <_ZN9TCPClient5flushEv>
   b8614:	2100      	movs	r1, #0
   b8616:	4650      	mov	r0, sl
   b8618:	f001 fd9b 	bl	ba152 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b861c:	b918      	cbnz	r0, b8626 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b861e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b8620:	4620      	mov	r0, r4
   b8622:	f003 f87c 	bl	bb71e <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b8626:	f104 0a1c 	add.w	sl, r4, #28
   b862a:	f640 0224 	movw	r2, #2084	; 0x824
   b862e:	2100      	movs	r1, #0
   b8630:	4650      	mov	r0, sl
   b8632:	f004 fed8 	bl	bd3e6 <memset>
   b8636:	f000 fc23 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
   b863a:	9001      	str	r0, [sp, #4]
   b863c:	f000 fc20 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b8640:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b8644:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b8646:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b864a:	4620      	mov	r0, r4
   b864c:	f004 f9fe 	bl	bca4c <_ZN9TCPClient9availableEv>
   b8650:	b1d8      	cbz	r0, b868a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
   b8652:	4620      	mov	r0, r4
   b8654:	f004 f808 	bl	bc668 <_ZN9TCPClient4readEv>
   b8658:	4681      	mov	r9, r0
   b865a:	f000 fc11 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b865e:	f640 0322 	movw	r3, #2082	; 0x822
   b8662:	429e      	cmp	r6, r3
   b8664:	9001      	str	r0, [sp, #4]
   b8666:	d804      	bhi.n	b8672 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b8668:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b866a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b866e:	3601      	adds	r6, #1
        while (client.available()) {
   b8670:	e7eb      	b.n	b864a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b8672:	f640 0323 	movw	r3, #2083	; 0x823
   b8676:	429e      	cmp	r6, r3
   b8678:	d1f9      	bne.n	b866e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b867a:	2300      	movs	r3, #0
   b867c:	f884 383f 	strb.w	r3, [r4, #2111]	; 0x83f
                client.stop();
   b8680:	4620      	mov	r0, r4
   b8682:	f004 fa3d 	bl	bcb00 <_ZN9TCPClient4stopEv>
                error = true;
   b8686:	46a8      	mov	r8, r5
   b8688:	e7f1      	b.n	b866e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b868a:	19a3      	adds	r3, r4, r6
   b868c:	7718      	strb	r0, [r3, #28]
   b868e:	f000 fbf7 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b8692:	9b01      	ldr	r3, [sp, #4]
   b8694:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b8698:	f1b8 0f00 	cmp.w	r8, #0
   b869c:	d104      	bne.n	b86a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
   b869e:	45d9      	cmp	r9, fp
   b86a0:	d802      	bhi.n	b86a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
   b86a2:	20c8      	movs	r0, #200	; 0xc8
   b86a4:	f003 fa78 	bl	bbb98 <delay>
    } while (client.connected() && !timeout && !error);
   b86a8:	4620      	mov	r0, r4
   b86aa:	f004 f8f1 	bl	bc890 <_ZN9TCPClient9connectedEv>
   b86ae:	b120      	cbz	r0, b86ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b86b0:	45d9      	cmp	r9, fp
   b86b2:	d802      	bhi.n	b86ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b86b4:	f1b8 0f00 	cmp.w	r8, #0
   b86b8:	d0c7      	beq.n	b864a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b86ba:	4620      	mov	r0, r4
   b86bc:	f004 fa20 	bl	bcb00 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b86c0:	4651      	mov	r1, sl
   b86c2:	a802      	add	r0, sp, #8
   b86c4:	f001 fc5b 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b86c8:	230c      	movs	r3, #12
   b86ca:	2209      	movs	r2, #9
   b86cc:	a902      	add	r1, sp, #8
   b86ce:	a806      	add	r0, sp, #24
   b86d0:	f001 fd64 	bl	ba19c <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b86d4:	491e      	ldr	r1, [pc, #120]	; (b8750 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b86d6:	a80a      	add	r0, sp, #40	; 0x28
   b86d8:	f001 fc51 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
   b86dc:	a90a      	add	r1, sp, #40	; 0x28
   b86de:	a802      	add	r0, sp, #8
   b86e0:	f001 fd58 	bl	ba194 <_ZNK6String7indexOfERKS_>
   b86e4:	4604      	mov	r4, r0
   b86e6:	a80a      	add	r0, sp, #40	; 0x28
   b86e8:	f001 fbfe 	bl	b9ee8 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b86ec:	1c63      	adds	r3, r4, #1
   b86ee:	d108      	bne.n	b8702 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
    String statusCode = raw_response.substring(9,12);
   b86f0:	a806      	add	r0, sp, #24
   b86f2:	f001 fbf9 	bl	b9ee8 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b86f6:	a802      	add	r0, sp, #8
   b86f8:	f001 fbf6 	bl	b9ee8 <_ZN6StringD1Ev>
}
   b86fc:	b011      	add	sp, #68	; 0x44
   b86fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b8702:	1d3d      	adds	r5, r7, #4
   b8704:	4913      	ldr	r1, [pc, #76]	; (b8754 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b8706:	4628      	mov	r0, r5
   b8708:	f001 fc97 	bl	ba03a <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b870c:	1d22      	adds	r2, r4, #4
   b870e:	a902      	add	r1, sp, #8
   b8710:	a80a      	add	r0, sp, #40	; 0x28
   b8712:	f001 fd63 	bl	ba1dc <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b8716:	a90a      	add	r1, sp, #40	; 0x28
   b8718:	4628      	mov	r0, r5
   b871a:	f001 fcdd 	bl	ba0d8 <_ZN6String6concatERKS_>
   b871e:	a80a      	add	r0, sp, #40	; 0x28
   b8720:	f001 fbe2 	bl	b9ee8 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b8724:	9806      	ldr	r0, [sp, #24]
   b8726:	f004 fe0a 	bl	bd33e <atoi>
   b872a:	6038      	str	r0, [r7, #0]
   b872c:	e7e0      	b.n	b86f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
   b872e:	bf00      	nop
   b8730:	000c027c 	.word	0x000c027c
   b8734:	000bf9b9 	.word	0x000bf9b9
   b8738:	000bfe17 	.word	0x000bfe17
   b873c:	000bfe29 	.word	0x000bfe29
   b8740:	000bfe23 	.word	0x000bfe23
   b8744:	000bfe34 	.word	0x000bfe34
   b8748:	000bfc94 	.word	0x000bfc94
   b874c:	000bfe39 	.word	0x000bfe39
   b8750:	000bfe3e 	.word	0x000bfe3e
   b8754:	000bfe42 	.word	0x000bfe42

000b8758 <_ZN9JSONClassD1Ev>:
#endif
}

JSONClass::~JSONClass()
{
}
   b8758:	4770      	bx	lr

000b875a <_ZN9JSONClassD0Ev>:
JSONClass::~JSONClass()
   b875a:	b510      	push	{r4, lr}
}
   b875c:	2104      	movs	r1, #4
JSONClass::~JSONClass()
   b875e:	4604      	mov	r4, r0
}
   b8760:	f7fc f9b9 	bl	b4ad6 <_ZdlPvj>
   b8764:	4620      	mov	r0, r4
   b8766:	bd10      	pop	{r4, pc}

000b8768 <_ZN9JSONClass5parseERK6String>:
{
  return JSONVar::parse(s);
}

JSONVar JSONClass::parse(const String& s)
{
   b8768:	b510      	push	{r4, lr}
  return JSONVar::parse(s);
   b876a:	4611      	mov	r1, r2
{
   b876c:	4604      	mov	r4, r0
  return JSONVar::parse(s);
   b876e:	f000 f863 	bl	b8838 <_ZN7JSONVar5parseERK6String>
}
   b8772:	4620      	mov	r0, r4
   b8774:	bd10      	pop	{r4, pc}

000b8776 <_ZN9JSONClass7typeof_ERK7JSONVar>:
{
  return JSONVar::stringify(value);
}

String JSONClass::typeof(const JSONVar& value)
{
   b8776:	b510      	push	{r4, lr}
  return JSONVar::typeof(value);
   b8778:	4611      	mov	r1, r2
{
   b877a:	4604      	mov	r4, r0
  return JSONVar::typeof(value);
   b877c:	f000 f86a 	bl	b8854 <_ZN7JSONVar7typeof_ERKS_>
}
   b8780:	4620      	mov	r0, r4
   b8782:	bd10      	pop	{r4, pc}

000b8784 <_GLOBAL__sub_I__ZN9JSONClassC2Ev>:
JSONClass::JSONClass()
   b8784:	4b01      	ldr	r3, [pc, #4]	; (b878c <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0x8>)
   b8786:	4a02      	ldr	r2, [pc, #8]	; (b8790 <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0xc>)
   b8788:	601a      	str	r2, [r3, #0]

JSONClass JSON;
   b878a:	4770      	bx	lr
   b878c:	2003e654 	.word	0x2003e654
   b8790:	000bfe4c 	.word	0x000bfe4c

000b8794 <_ZN7JSONVarD1Ev>:
JSONVar::JSONVar() :
  JSONVar(NULL, NULL)
{
}

JSONVar::~JSONVar()
   b8794:	b510      	push	{r4, lr}
   b8796:	4b05      	ldr	r3, [pc, #20]	; (b87ac <_ZN7JSONVarD1Ev+0x18>)
   b8798:	6003      	str	r3, [r0, #0]
   b879a:	4604      	mov	r4, r0
{
  if (_json != NULL && _parent == NULL) {
   b879c:	6840      	ldr	r0, [r0, #4]
   b879e:	b118      	cbz	r0, b87a8 <_ZN7JSONVarD1Ev+0x14>
   b87a0:	68a3      	ldr	r3, [r4, #8]
   b87a2:	b90b      	cbnz	r3, b87a8 <_ZN7JSONVarD1Ev+0x14>
    cJSON_Delete(_json);
   b87a4:	f7ff fb92 	bl	b7ecc <cJSON_Delete>

    _json = NULL;
  }
}
   b87a8:	4620      	mov	r0, r4
   b87aa:	bd10      	pop	{r4, pc}
   b87ac:	000bfe88 	.word	0x000bfe88

000b87b0 <_ZN7JSONVarD0Ev>:
JSONVar::~JSONVar()
   b87b0:	b510      	push	{r4, lr}
   b87b2:	4604      	mov	r4, r0
}
   b87b4:	f7ff ffee 	bl	b8794 <_ZN7JSONVarD1Ev>
   b87b8:	4620      	mov	r0, r4
   b87ba:	210c      	movs	r1, #12
   b87bc:	f7fc f98b 	bl	b4ad6 <_ZdlPvj>
   b87c0:	4620      	mov	r0, r4
   b87c2:	bd10      	pop	{r4, pc}

000b87c4 <_ZNK7JSONVar7printToER5Print>:

size_t JSONVar::printTo(Print& p) const
{
   b87c4:	b538      	push	{r3, r4, r5, lr}
  if (_json == NULL) {
   b87c6:	6840      	ldr	r0, [r0, #4]
{
   b87c8:	460c      	mov	r4, r1
  if (_json == NULL) {
   b87ca:	b160      	cbz	r0, b87e6 <_ZNK7JSONVar7printToER5Print+0x22>
    return 0;
  }

  char* s = cJSON_PrintUnformatted(_json);
   b87cc:	f7ff fd9a 	bl	b8304 <cJSON_PrintUnformatted>
   b87d0:	4605      	mov	r5, r0

  size_t writen = p.print(s);
   b87d2:	4601      	mov	r1, r0
   b87d4:	4620      	mov	r0, r4
   b87d6:	f002 ff89 	bl	bb6ec <_ZN5Print5printEPKc>
   b87da:	4604      	mov	r4, r0

  cJSON_free(s);
   b87dc:	4628      	mov	r0, r5
   b87de:	f7ff fe31 	bl	b8444 <cJSON_free>

  return writen;
}
   b87e2:	4620      	mov	r0, r4
   b87e4:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   b87e6:	4604      	mov	r4, r0
   b87e8:	e7fb      	b.n	b87e2 <_ZNK7JSONVar7printToER5Print+0x1e>
   b87ea:	0000      	movs	r0, r0
   b87ec:	0000      	movs	r0, r0
	...

000b87f0 <_ZNK7JSONVarcvdEv>:
{
  return cJSON_IsNumber(_json) ? _json->valueint : 0;
}

JSONVar::operator double() const
{
   b87f0:	b510      	push	{r4, lr}
   b87f2:	4604      	mov	r4, r0
  return cJSON_IsNumber(_json) ? _json->valuedouble : NAN;
   b87f4:	6840      	ldr	r0, [r0, #4]
   b87f6:	f7ff fe08 	bl	b840a <cJSON_IsNumber>
   b87fa:	b118      	cbz	r0, b8804 <_ZNK7JSONVarcvdEv+0x14>
   b87fc:	6863      	ldr	r3, [r4, #4]
   b87fe:	ed93 0b06 	vldr	d0, [r3, #24]
}
   b8802:	bd10      	pop	{r4, pc}
  return cJSON_IsNumber(_json) ? _json->valuedouble : NAN;
   b8804:	ed9f 0b02 	vldr	d0, [pc, #8]	; b8810 <_ZNK7JSONVarcvdEv+0x20>
   b8808:	e7fb      	b.n	b8802 <_ZNK7JSONVarcvdEv+0x12>
   b880a:	bf00      	nop
   b880c:	f3af 8000 	nop.w
   b8810:	00000000 	.word	0x00000000
   b8814:	7ff80000 	.word	0x7ff80000

000b8818 <_ZNK7JSONVar14hasOwnPropertyEPKc>:

  return JSONVar(cJSON_CreateStringArray(keys, length), NULL);
}

bool JSONVar::hasOwnProperty(const char* key) const
{
   b8818:	b513      	push	{r0, r1, r4, lr}
   b881a:	4604      	mov	r4, r0
  if (!cJSON_IsObject(_json)) {
   b881c:	6840      	ldr	r0, [r0, #4]
{
   b881e:	9101      	str	r1, [sp, #4]
  if (!cJSON_IsObject(_json)) {
   b8820:	f7ff fe08 	bl	b8434 <cJSON_IsObject>
   b8824:	b130      	cbz	r0, b8834 <_ZNK7JSONVar14hasOwnPropertyEPKc+0x1c>
    return false;
  }

  cJSON* json = cJSON_GetObjectItemCaseSensitive(_json, key);
   b8826:	9901      	ldr	r1, [sp, #4]
   b8828:	6860      	ldr	r0, [r4, #4]
   b882a:	f7ff fd7c 	bl	b8326 <cJSON_GetObjectItemCaseSensitive>

  return (json != NULL);
   b882e:	3800      	subs	r0, #0
   b8830:	bf18      	it	ne
   b8832:	2001      	movne	r0, #1
}
   b8834:	b002      	add	sp, #8
   b8836:	bd10      	pop	{r4, pc}

000b8838 <_ZN7JSONVar5parseERK6String>:

  return JSONVar(json, NULL);
}

JSONVar JSONVar::parse(const String& s)
{
   b8838:	b510      	push	{r4, lr}
   b883a:	4604      	mov	r4, r0
  cJSON* json = cJSON_Parse(s);
   b883c:	6808      	ldr	r0, [r1, #0]
   b883e:	f7ff fd5d 	bl	b82fc <cJSON_Parse>
  _parent(parent)
   b8842:	4b03      	ldr	r3, [pc, #12]	; (b8850 <_ZN7JSONVar5parseERK6String+0x18>)
   b8844:	e9c4 3000 	strd	r3, r0, [r4]
   b8848:	2300      	movs	r3, #0
   b884a:	60a3      	str	r3, [r4, #8]
  return parse(s.c_str());
}
   b884c:	4620      	mov	r0, r4
   b884e:	bd10      	pop	{r4, pc}
   b8850:	000bfe88 	.word	0x000bfe88

000b8854 <_ZN7JSONVar7typeof_ERKS_>:

  return str;
}

String JSONVar::typeof_(const JSONVar& value)
{
   b8854:	b538      	push	{r3, r4, r5, lr}
  struct cJSON* json = value._json;
   b8856:	684d      	ldr	r5, [r1, #4]
{
   b8858:	4604      	mov	r4, r0

  if (json == NULL ||  cJSON_IsInvalid(json)) {
   b885a:	b92d      	cbnz	r5, b8868 <_ZN7JSONVar7typeof_ERKS_+0x14>
    return "undefined";
   b885c:	4918      	ldr	r1, [pc, #96]	; (b88c0 <_ZN7JSONVar7typeof_ERKS_+0x6c>)
  } else if (cJSON_IsArray(json)) {
    return "array"; // TODO: should this return "object" to be more JS like?
  } else if (cJSON_IsObject(json)) {
    return "object";
  } else {
    return "unknown";
   b885e:	4620      	mov	r0, r4
   b8860:	f001 fb8d 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
  }
}
   b8864:	4620      	mov	r0, r4
   b8866:	bd38      	pop	{r3, r4, r5, pc}
  if (json == NULL ||  cJSON_IsInvalid(json)) {
   b8868:	4628      	mov	r0, r5
   b886a:	f7ff fdbb 	bl	b83e4 <cJSON_IsInvalid>
   b886e:	2800      	cmp	r0, #0
   b8870:	d1f4      	bne.n	b885c <_ZN7JSONVar7typeof_ERKS_+0x8>
  } else if (cJSON_IsBool(json)) {
   b8872:	4628      	mov	r0, r5
   b8874:	f7ff fdbc 	bl	b83f0 <cJSON_IsBool>
   b8878:	b108      	cbz	r0, b887e <_ZN7JSONVar7typeof_ERKS_+0x2a>
    return "boolean";
   b887a:	4912      	ldr	r1, [pc, #72]	; (b88c4 <_ZN7JSONVar7typeof_ERKS_+0x70>)
   b887c:	e7ef      	b.n	b885e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsNull(json)) {
   b887e:	4628      	mov	r0, r5
   b8880:	f7ff fdbd 	bl	b83fe <cJSON_IsNull>
   b8884:	b108      	cbz	r0, b888a <_ZN7JSONVar7typeof_ERKS_+0x36>
    return "null"; // TODO: should this return "object" to be more JS like?
   b8886:	4910      	ldr	r1, [pc, #64]	; (b88c8 <_ZN7JSONVar7typeof_ERKS_+0x74>)
   b8888:	e7e9      	b.n	b885e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsNumber(json)) {
   b888a:	4628      	mov	r0, r5
   b888c:	f7ff fdbd 	bl	b840a <cJSON_IsNumber>
   b8890:	b108      	cbz	r0, b8896 <_ZN7JSONVar7typeof_ERKS_+0x42>
    return "number";
   b8892:	490e      	ldr	r1, [pc, #56]	; (b88cc <_ZN7JSONVar7typeof_ERKS_+0x78>)
   b8894:	e7e3      	b.n	b885e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsString(json)) {
   b8896:	4628      	mov	r0, r5
   b8898:	f7ff fdbe 	bl	b8418 <cJSON_IsString>
   b889c:	b108      	cbz	r0, b88a2 <_ZN7JSONVar7typeof_ERKS_+0x4e>
    return "string";
   b889e:	490c      	ldr	r1, [pc, #48]	; (b88d0 <_ZN7JSONVar7typeof_ERKS_+0x7c>)
   b88a0:	e7dd      	b.n	b885e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsArray(json)) {
   b88a2:	4628      	mov	r0, r5
   b88a4:	f7ff fdbf 	bl	b8426 <cJSON_IsArray>
   b88a8:	b108      	cbz	r0, b88ae <_ZN7JSONVar7typeof_ERKS_+0x5a>
    return "array"; // TODO: should this return "object" to be more JS like?
   b88aa:	490a      	ldr	r1, [pc, #40]	; (b88d4 <_ZN7JSONVar7typeof_ERKS_+0x80>)
   b88ac:	e7d7      	b.n	b885e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsObject(json)) {
   b88ae:	4628      	mov	r0, r5
   b88b0:	f7ff fdc0 	bl	b8434 <cJSON_IsObject>
   b88b4:	b108      	cbz	r0, b88ba <_ZN7JSONVar7typeof_ERKS_+0x66>
    return "object";
   b88b6:	4908      	ldr	r1, [pc, #32]	; (b88d8 <_ZN7JSONVar7typeof_ERKS_+0x84>)
   b88b8:	e7d1      	b.n	b885e <_ZN7JSONVar7typeof_ERKS_+0xa>
    return "unknown";
   b88ba:	4908      	ldr	r1, [pc, #32]	; (b88dc <_ZN7JSONVar7typeof_ERKS_+0x88>)
   b88bc:	e7cf      	b.n	b885e <_ZN7JSONVar7typeof_ERKS_+0xa>
   b88be:	bf00      	nop
   b88c0:	000bfaf7 	.word	0x000bfaf7
   b88c4:	000bfe54 	.word	0x000bfe54
   b88c8:	000bfdf7 	.word	0x000bfdf7
   b88cc:	000bfe5c 	.word	0x000bfe5c
   b88d0:	000bfe63 	.word	0x000bfe63
   b88d4:	000bfe6a 	.word	0x000bfe6a
   b88d8:	000bfe70 	.word	0x000bfe70
   b88dc:	000bfe77 	.word	0x000bfe77

000b88e0 <_ZN7JSONVar11replaceJsonEP5cJSON>:

void JSONVar::replaceJson(struct cJSON* json)
{
   b88e0:	b538      	push	{r3, r4, r5, lr}
  cJSON* old = _json;
   b88e2:	6845      	ldr	r5, [r0, #4]

  _json = json;
   b88e4:	6041      	str	r1, [r0, #4]
{
   b88e6:	4604      	mov	r4, r0

  if (old) {
   b88e8:	b1dd      	cbz	r5, b8922 <_ZN7JSONVar11replaceJsonEP5cJSON+0x42>
    if (_parent) {
   b88ea:	6880      	ldr	r0, [r0, #8]
   b88ec:	b1a0      	cbz	r0, b8918 <_ZN7JSONVar11replaceJsonEP5cJSON+0x38>
      if (cJSON_IsObject(_parent)) {
   b88ee:	f7ff fda1 	bl	b8434 <cJSON_IsObject>
   b88f2:	b130      	cbz	r0, b8902 <_ZN7JSONVar11replaceJsonEP5cJSON+0x22>
        cJSON_ReplaceItemInObjectCaseSensitive(_parent, old->string, _json);
   b88f4:	6862      	ldr	r2, [r4, #4]
   b88f6:	6a29      	ldr	r1, [r5, #32]
   b88f8:	68a0      	ldr	r0, [r4, #8]
      }
    } else {
      cJSON_Delete(old);
    }
  }
}
   b88fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        cJSON_ReplaceItemInObjectCaseSensitive(_parent, old->string, _json);
   b88fe:	f7ff bdca 	b.w	b8496 <cJSON_ReplaceItemInObjectCaseSensitive>
      } else if (cJSON_IsArray(_parent)) {
   b8902:	68a0      	ldr	r0, [r4, #8]
   b8904:	f7ff fd8f 	bl	b8426 <cJSON_IsArray>
   b8908:	b158      	cbz	r0, b8922 <_ZN7JSONVar11replaceJsonEP5cJSON+0x42>
        cJSON_ReplaceItemViaPointer(_parent, old, _json);
   b890a:	6862      	ldr	r2, [r4, #4]
   b890c:	68a0      	ldr	r0, [r4, #8]
   b890e:	4629      	mov	r1, r5
}
   b8910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        cJSON_ReplaceItemViaPointer(_parent, old, _json);
   b8914:	f7ff bd0c 	b.w	b8330 <cJSON_ReplaceItemViaPointer>
      cJSON_Delete(old);
   b8918:	4628      	mov	r0, r5
}
   b891a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      cJSON_Delete(old);
   b891e:	f7ff bad5 	b.w	b7ecc <cJSON_Delete>
}
   b8922:	bd38      	pop	{r3, r4, r5, pc}

000b8924 <_ZN7JSONVarixEPKc>:
{
   b8924:	b570      	push	{r4, r5, r6, lr}
   b8926:	4605      	mov	r5, r0
  if (!cJSON_IsObject(_json)) {
   b8928:	6848      	ldr	r0, [r1, #4]
{
   b892a:	460c      	mov	r4, r1
   b892c:	4616      	mov	r6, r2
  if (!cJSON_IsObject(_json)) {
   b892e:	f7ff fd81 	bl	b8434 <cJSON_IsObject>
   b8932:	b928      	cbnz	r0, b8940 <_ZN7JSONVarixEPKc+0x1c>
    replaceJson(cJSON_CreateObject());
   b8934:	f7ff fd4a 	bl	b83cc <cJSON_CreateObject>
   b8938:	4601      	mov	r1, r0
   b893a:	4620      	mov	r0, r4
   b893c:	f7ff ffd0 	bl	b88e0 <_ZN7JSONVar11replaceJsonEP5cJSON>
  cJSON* json = cJSON_GetObjectItemCaseSensitive(_json, key);
   b8940:	6860      	ldr	r0, [r4, #4]
   b8942:	4631      	mov	r1, r6
   b8944:	f7ff fcef 	bl	b8326 <cJSON_GetObjectItemCaseSensitive>
  if (json == NULL) {
   b8948:	b918      	cbnz	r0, b8952 <_ZN7JSONVarixEPKc+0x2e>
    json = cJSON_AddNullToObject(_json, key);
   b894a:	6860      	ldr	r0, [r4, #4]
   b894c:	4631      	mov	r1, r6
   b894e:	f7ff fd1b 	bl	b8388 <cJSON_AddNullToObject>
  _parent(parent)
   b8952:	4a03      	ldr	r2, [pc, #12]	; (b8960 <_ZN7JSONVarixEPKc+0x3c>)
  return JSONVar(json, _json);    
   b8954:	6863      	ldr	r3, [r4, #4]
  _parent(parent)
   b8956:	60ab      	str	r3, [r5, #8]
   b8958:	e9c5 2000 	strd	r2, r0, [r5]
}
   b895c:	4628      	mov	r0, r5
   b895e:	bd70      	pop	{r4, r5, r6, pc}
   b8960:	000bfe88 	.word	0x000bfe88

000b8964 <_ZN7JSONVarixEi>:
{
   b8964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8966:	4606      	mov	r6, r0
  if (!cJSON_IsArray(_json)) {
   b8968:	6848      	ldr	r0, [r1, #4]
{
   b896a:	460d      	mov	r5, r1
   b896c:	4617      	mov	r7, r2
  if (!cJSON_IsArray(_json)) {
   b896e:	f7ff fd5a 	bl	b8426 <cJSON_IsArray>
   b8972:	b928      	cbnz	r0, b8980 <_ZN7JSONVarixEi+0x1c>
    replaceJson(cJSON_CreateArray());
   b8974:	f7ff fd1e 	bl	b83b4 <cJSON_CreateArray>
   b8978:	4601      	mov	r1, r0
   b897a:	4628      	mov	r0, r5
   b897c:	f7ff ffb0 	bl	b88e0 <_ZN7JSONVar11replaceJsonEP5cJSON>
  cJSON* json = cJSON_GetArrayItem(_json, index);
   b8980:	6868      	ldr	r0, [r5, #4]
   b8982:	4639      	mov	r1, r7
   b8984:	f7ff fcc9 	bl	b831a <cJSON_GetArrayItem>
  if (json == NULL) {
   b8988:	4604      	mov	r4, r0
   b898a:	b960      	cbnz	r0, b89a6 <_ZN7JSONVarixEi+0x42>
    while (index >= cJSON_GetArraySize(_json)) {
   b898c:	6868      	ldr	r0, [r5, #4]
   b898e:	f7ff fcbc 	bl	b830a <cJSON_GetArraySize>
   b8992:	42b8      	cmp	r0, r7
   b8994:	dc07      	bgt.n	b89a6 <_ZN7JSONVarixEi+0x42>
      json = cJSON_CreateNull();
   b8996:	f7ff fceb 	bl	b8370 <cJSON_CreateNull>
   b899a:	4604      	mov	r4, r0
      cJSON_AddItemToArray(_json, json);
   b899c:	4601      	mov	r1, r0
   b899e:	6868      	ldr	r0, [r5, #4]
   b89a0:	f7ff fcc4 	bl	b832c <cJSON_AddItemToArray>
    while (index >= cJSON_GetArraySize(_json)) {
   b89a4:	e7f2      	b.n	b898c <_ZN7JSONVarixEi+0x28>
  _parent(parent)
   b89a6:	4a03      	ldr	r2, [pc, #12]	; (b89b4 <_ZN7JSONVarixEi+0x50>)
  return JSONVar(json, _json);
   b89a8:	686b      	ldr	r3, [r5, #4]
  _parent(parent)
   b89aa:	60b3      	str	r3, [r6, #8]
   b89ac:	e9c6 2400 	strd	r2, r4, [r6]
}
   b89b0:	4630      	mov	r0, r6
   b89b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b89b4:	000bfe88 	.word	0x000bfe88

000b89b8 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_>:
  _parent(parent)
   b89b8:	4b03      	ldr	r3, [pc, #12]	; (b89c8 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x10>)
   b89ba:	4a04      	ldr	r2, [pc, #16]	; (b89cc <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x14>)
   b89bc:	601a      	str	r2, [r3, #0]
   b89be:	2200      	movs	r2, #0
   b89c0:	e9c3 2201 	strd	r2, r2, [r3, #4]

JSONVar undefined;
   b89c4:	4770      	bx	lr
   b89c6:	bf00      	nop
   b89c8:	2003e658 	.word	0x2003e658
   b89cc:	000bfe88 	.word	0x000bfe88

000b89d0 <_Z13initLastWritev>:
// Function initializes the lastWrite.txt file to "0"
// It's holding the current day number of the year,
// i.e. 1 - 364
// ###################################################
bool initLastWrite()
{
   b89d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bool initOK = true;

    // Open file (r/w). Create if not existing.
    int fdLastWrite = open("/lastWrite.txt", O_RDWR | O_CREAT);
   b89d2:	4818      	ldr	r0, [pc, #96]	; (b8a34 <_Z13initLastWritev+0x64>)
   b89d4:	f240 2102 	movw	r1, #514	; 0x202
   b89d8:	f005 fce0 	bl	be39c <open>

    // Check for errors.
    if (fdLastWrite == -1)
   b89dc:	1c43      	adds	r3, r0, #1
    int fdLastWrite = open("/lastWrite.txt", O_RDWR | O_CREAT);
   b89de:	4605      	mov	r5, r0
    if (fdLastWrite == -1)
   b89e0:	d110      	bne.n	b8a04 <_Z13initLastWritev+0x34>
    {

        Serial.printlnf("Error initializing lastWrite.txt file %d", errno);
   b89e2:	f003 fd29 	bl	bc438 <_Z16_fetch_usbserialv>
   b89e6:	4604      	mov	r4, r0
   b89e8:	f000 fde8 	bl	b95bc <__errno>
   b89ec:	4912      	ldr	r1, [pc, #72]	; (b8a38 <_Z13initLastWritev+0x68>)
   b89ee:	6802      	ldr	r2, [r0, #0]
   b89f0:	4620      	mov	r0, r4
   b89f2:	f7fc fa11 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
        initOK = false;
   b89f6:	2400      	movs	r4, #0
        {
            Serial.printlnf("Error writing initial data to lastWrite.txt: %d", errno);
            initOK = false;
        }
    }
    close(fdLastWrite);
   b89f8:	4628      	mov	r0, r5
   b89fa:	f005 fcbf 	bl	be37c <close>
    return initOK;
}
   b89fe:	4620      	mov	r0, r4
   b8a00:	b002      	add	sp, #8
   b8a02:	bd70      	pop	{r4, r5, r6, pc}
        uint16_t initData = 0;
   b8a04:	2400      	movs	r4, #0
        if (write(fdLastWrite, &initData, sizeof(initData)) == -1)
   b8a06:	2202      	movs	r2, #2
   b8a08:	f10d 0106 	add.w	r1, sp, #6
        uint16_t initData = 0;
   b8a0c:	f8ad 4006 	strh.w	r4, [sp, #6]
        if (write(fdLastWrite, &initData, sizeof(initData)) == -1)
   b8a10:	f005 fce2 	bl	be3d8 <write>
   b8a14:	3001      	adds	r0, #1
   b8a16:	d10a      	bne.n	b8a2e <_Z13initLastWritev+0x5e>
            Serial.printlnf("Error writing initial data to lastWrite.txt: %d", errno);
   b8a18:	f003 fd0e 	bl	bc438 <_Z16_fetch_usbserialv>
   b8a1c:	4606      	mov	r6, r0
   b8a1e:	f000 fdcd 	bl	b95bc <__errno>
   b8a22:	4906      	ldr	r1, [pc, #24]	; (b8a3c <_Z13initLastWritev+0x6c>)
   b8a24:	6802      	ldr	r2, [r0, #0]
   b8a26:	4630      	mov	r0, r6
   b8a28:	f7fc f9f6 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
            initOK = false;
   b8a2c:	e7e4      	b.n	b89f8 <_Z13initLastWritev+0x28>
    bool initOK = true;
   b8a2e:	2401      	movs	r4, #1
   b8a30:	e7e2      	b.n	b89f8 <_Z13initLastWritev+0x28>
   b8a32:	bf00      	nop
   b8a34:	000bfe94 	.word	0x000bfe94
   b8a38:	000bfea3 	.word	0x000bfea3
   b8a3c:	000bfecc 	.word	0x000bfecc

000b8a40 <_Z11initWhFilesv>:
// ##############################################
// Function initializes the wattHour files.
// Creates them if not existing.
// ##############################################
bool initWhFiles()
{
   b8a40:	b570      	push	{r4, r5, r6, lr}
    bool initOK = true;

    // Open files (r/w). Create if not existing.
    int fdWhToday = open("/wattHourToday.txt", O_RDWR | O_CREAT);
   b8a42:	f240 2102 	movw	r1, #514	; 0x202
   b8a46:	4811      	ldr	r0, [pc, #68]	; (b8a8c <_Z11initWhFilesv+0x4c>)
   b8a48:	f005 fca8 	bl	be39c <open>
    int fdWhYesterday = open("/wattHourYesterday.txt", O_RDWR | O_CREAT);
   b8a4c:	f240 2102 	movw	r1, #514	; 0x202
    int fdWhToday = open("/wattHourToday.txt", O_RDWR | O_CREAT);
   b8a50:	4605      	mov	r5, r0
    int fdWhYesterday = open("/wattHourYesterday.txt", O_RDWR | O_CREAT);
   b8a52:	480f      	ldr	r0, [pc, #60]	; (b8a90 <_Z11initWhFilesv+0x50>)
   b8a54:	f005 fca2 	bl	be39c <open>

    // Check for errors.
    if (fdWhToday == -1 || fdWhYesterday == -1)
   b8a58:	1c6a      	adds	r2, r5, #1
    int fdWhYesterday = open("/wattHourYesterday.txt", O_RDWR | O_CREAT);
   b8a5a:	4604      	mov	r4, r0
    if (fdWhToday == -1 || fdWhYesterday == -1)
   b8a5c:	d001      	beq.n	b8a62 <_Z11initWhFilesv+0x22>
   b8a5e:	1c43      	adds	r3, r0, #1
   b8a60:	d112      	bne.n	b8a88 <_Z11initWhFilesv+0x48>
    {
        Serial.printlnf("Error opening file %d", errno);
   b8a62:	f003 fce9 	bl	bc438 <_Z16_fetch_usbserialv>
   b8a66:	4606      	mov	r6, r0
   b8a68:	f000 fda8 	bl	b95bc <__errno>
   b8a6c:	4909      	ldr	r1, [pc, #36]	; (b8a94 <_Z11initWhFilesv+0x54>)
   b8a6e:	6802      	ldr	r2, [r0, #0]
   b8a70:	4630      	mov	r0, r6
   b8a72:	f7fc f9d1 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
        initOK = false;
   b8a76:	2600      	movs	r6, #0
    }
    close(fdWhToday);
   b8a78:	4628      	mov	r0, r5
   b8a7a:	f005 fc7f 	bl	be37c <close>
    close(fdWhYesterday);
   b8a7e:	4620      	mov	r0, r4
   b8a80:	f005 fc7c 	bl	be37c <close>
    return initOK;
}
   b8a84:	4630      	mov	r0, r6
   b8a86:	bd70      	pop	{r4, r5, r6, pc}
    bool initOK = true;
   b8a88:	2601      	movs	r6, #1
   b8a8a:	e7f5      	b.n	b8a78 <_Z11initWhFilesv+0x38>
   b8a8c:	000bfefc 	.word	0x000bfefc
   b8a90:	000bff0f 	.word	0x000bff0f
   b8a94:	000bff26 	.word	0x000bff26

000b8a98 <_Z12getLastWritev>:

// ###################################################
// Function that returns the last day# of saving data.
// ###################################################
uint16_t getLastWrite()
{
   b8a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // String returnString;
    uint16_t day;

    // Open file
    int fdLastWrite = open("/lastWrite.txt", O_RDONLY);
   b8a9a:	4816      	ldr	r0, [pc, #88]	; (b8af4 <_Z12getLastWritev+0x5c>)
   b8a9c:	2100      	movs	r1, #0
   b8a9e:	f005 fc7d 	bl	be39c <open>

    // Check for errors.
    if (fdLastWrite == -1)
   b8aa2:	1c43      	adds	r3, r0, #1
    int fdLastWrite = open("/lastWrite.txt", O_RDONLY);
   b8aa4:	4604      	mov	r4, r0
    if (fdLastWrite == -1)
   b8aa6:	d114      	bne.n	b8ad2 <_Z12getLastWritev+0x3a>
        Serial.printlnf("Error opening lastWrite.txt: %d", errno);
   b8aa8:	f003 fcc6 	bl	bc438 <_Z16_fetch_usbserialv>
   b8aac:	4605      	mov	r5, r0
   b8aae:	f000 fd85 	bl	b95bc <__errno>
   b8ab2:	4911      	ldr	r1, [pc, #68]	; (b8af8 <_Z12getLastWritev+0x60>)
   b8ab4:	6802      	ldr	r2, [r0, #0]
    else
    {
        // Read data.
        if (read(fdLastWrite, &day, sizeof(day)) == -1)
            Serial.printlnf("Error reading file: %d", errno);
   b8ab6:	4628      	mov	r0, r5
   b8ab8:	f7fc f9ae 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
    }

    close(fdLastWrite);
   b8abc:	4620      	mov	r0, r4
   b8abe:	f005 fc5d 	bl	be37c <close>

    // If no errors, return data.
    if (errno)
   b8ac2:	f000 fd7b 	bl	b95bc <__errno>
   b8ac6:	6803      	ldr	r3, [r0, #0]
   b8ac8:	b993      	cbnz	r3, b8af0 <_Z12getLastWritev+0x58>
        return 0;
    else
        return day;
   b8aca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   b8ace:	b003      	add	sp, #12
   b8ad0:	bd30      	pop	{r4, r5, pc}
        if (read(fdLastWrite, &day, sizeof(day)) == -1)
   b8ad2:	2202      	movs	r2, #2
   b8ad4:	f10d 0106 	add.w	r1, sp, #6
   b8ad8:	f005 fc74 	bl	be3c4 <read>
   b8adc:	3001      	adds	r0, #1
   b8ade:	d1ed      	bne.n	b8abc <_Z12getLastWritev+0x24>
            Serial.printlnf("Error reading file: %d", errno);
   b8ae0:	f003 fcaa 	bl	bc438 <_Z16_fetch_usbserialv>
   b8ae4:	4605      	mov	r5, r0
   b8ae6:	f000 fd69 	bl	b95bc <__errno>
   b8aea:	4904      	ldr	r1, [pc, #16]	; (b8afc <_Z12getLastWritev+0x64>)
   b8aec:	6802      	ldr	r2, [r0, #0]
   b8aee:	e7e2      	b.n	b8ab6 <_Z12getLastWritev+0x1e>
        return 0;
   b8af0:	2000      	movs	r0, #0
   b8af2:	e7ec      	b.n	b8ace <_Z12getLastWritev+0x36>
   b8af4:	000bfe94 	.word	0x000bfe94
   b8af8:	000bff3c 	.word	0x000bff3c
   b8afc:	000bff5c 	.word	0x000bff5c

000b8b00 <_Z15updateLastWritev>:

// #############################################################
// Write current time to the lastWrite.txt file.
// #############################################################
bool updateLastWrite()
{
   b8b00:	b530      	push	{r4, r5, lr}
    // Open file - truncate length to zero.
    int fdLastWrite = open("/lastWrite.txt", O_WRONLY | O_TRUNC);
   b8b02:	4820      	ldr	r0, [pc, #128]	; (b8b84 <_Z15updateLastWritev+0x84>)
{
   b8b04:	b089      	sub	sp, #36	; 0x24
    int fdLastWrite = open("/lastWrite.txt", O_WRONLY | O_TRUNC);
   b8b06:	f240 4101 	movw	r1, #1025	; 0x401
   b8b0a:	f005 fc47 	bl	be39c <open>

    // Check for errors.
    if (fdLastWrite == -1)
   b8b0e:	1c43      	adds	r3, r0, #1
    int fdLastWrite = open("/lastWrite.txt", O_WRONLY | O_TRUNC);
   b8b10:	4604      	mov	r4, r0
    if (fdLastWrite == -1)
   b8b12:	d114      	bne.n	b8b3e <_Z15updateLastWritev+0x3e>
        Serial.printlnf("Error opening lastWrite.txt: %d", errno);
   b8b14:	f003 fc90 	bl	bc438 <_Z16_fetch_usbserialv>
   b8b18:	4605      	mov	r5, r0
   b8b1a:	f000 fd4f 	bl	b95bc <__errno>
   b8b1e:	491a      	ldr	r1, [pc, #104]	; (b8b88 <_Z15updateLastWritev+0x88>)
   b8b20:	6802      	ldr	r2, [r0, #0]
    {
        // Get current day number.
        uint16_t day = Time.format(Time.now(), "%j").toInt();

        if (write(fdLastWrite, &day, sizeof(day)) == -1)
            Serial.printlnf("Error writing to file: %d", errno);
   b8b22:	4628      	mov	r0, r5
   b8b24:	f7fc f978 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
    }

    close(fdLastWrite);
   b8b28:	4620      	mov	r0, r4
   b8b2a:	f005 fc27 	bl	be37c <close>

    // Return true, if no errors
    if (errno)
   b8b2e:	f000 fd45 	bl	b95bc <__errno>
   b8b32:	6800      	ldr	r0, [r0, #0]
        return false;
    else
        return true;
}
   b8b34:	fab0 f080 	clz	r0, r0
   b8b38:	0940      	lsrs	r0, r0, #5
   b8b3a:	b009      	add	sp, #36	; 0x24
   b8b3c:	bd30      	pop	{r4, r5, pc}
        uint16_t day = Time.format(Time.now(), "%j").toInt();
   b8b3e:	f002 ffcc 	bl	bbada <_ZN9TimeClass3nowEv>
   b8b42:	4b12      	ldr	r3, [pc, #72]	; (b8b8c <_Z15updateLastWritev+0x8c>)
   b8b44:	4912      	ldr	r1, [pc, #72]	; (b8b90 <_Z15updateLastWritev+0x90>)
   b8b46:	9300      	str	r3, [sp, #0]
   b8b48:	4602      	mov	r2, r0
   b8b4a:	17c3      	asrs	r3, r0, #31
   b8b4c:	a804      	add	r0, sp, #16
   b8b4e:	f002 ff65 	bl	bba1c <_ZN9TimeClass6formatExPKc>
   b8b52:	a804      	add	r0, sp, #16
   b8b54:	f001 fb49 	bl	ba1ea <_ZNK6String5toIntEv>
   b8b58:	f8ad 000e 	strh.w	r0, [sp, #14]
   b8b5c:	a804      	add	r0, sp, #16
   b8b5e:	f001 f9c3 	bl	b9ee8 <_ZN6StringD1Ev>
        if (write(fdLastWrite, &day, sizeof(day)) == -1)
   b8b62:	2202      	movs	r2, #2
   b8b64:	f10d 010e 	add.w	r1, sp, #14
   b8b68:	4620      	mov	r0, r4
   b8b6a:	f005 fc35 	bl	be3d8 <write>
   b8b6e:	3001      	adds	r0, #1
   b8b70:	d1da      	bne.n	b8b28 <_Z15updateLastWritev+0x28>
            Serial.printlnf("Error writing to file: %d", errno);
   b8b72:	f003 fc61 	bl	bc438 <_Z16_fetch_usbserialv>
   b8b76:	4605      	mov	r5, r0
   b8b78:	f000 fd20 	bl	b95bc <__errno>
   b8b7c:	4905      	ldr	r1, [pc, #20]	; (b8b94 <_Z15updateLastWritev+0x94>)
   b8b7e:	6802      	ldr	r2, [r0, #0]
   b8b80:	e7cf      	b.n	b8b22 <_Z15updateLastWritev+0x22>
   b8b82:	bf00      	nop
   b8b84:	000bfe94 	.word	0x000bfe94
   b8b88:	000bff3c 	.word	0x000bff3c
   b8b8c:	000bff73 	.word	0x000bff73
   b8b90:	2003e690 	.word	0x2003e690
   b8b94:	000bff76 	.word	0x000bff76

000b8b98 <_Z12loadFileDataPKc>:

// #############################################################
// Function for fetching data in the indicated file.
// #############################################################
String loadFileData(const char *filePathName)
{
   b8b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8b9c:	b09a      	sub	sp, #104	; 0x68
   b8b9e:	af00      	add	r7, sp, #0
   b8ba0:	460d      	mov	r5, r1
   b8ba2:	4604      	mov	r4, r0
    String returnString;
   b8ba4:	492c      	ldr	r1, [pc, #176]	; (b8c58 <_Z12loadFileDataPKc+0xc0>)
   b8ba6:	4638      	mov	r0, r7
   b8ba8:	f001 f9e9 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>

    // Open file
    int fileDescriptor = open(filePathName, O_RDONLY);
   b8bac:	4628      	mov	r0, r5
   b8bae:	2100      	movs	r1, #0
   b8bb0:	f005 fbf4 	bl	be39c <open>

    // Check for errors.
    if (fileDescriptor == -1)
   b8bb4:	1c43      	adds	r3, r0, #1
    int fileDescriptor = open(filePathName, O_RDONLY);
   b8bb6:	4605      	mov	r5, r0
    if (fileDescriptor == -1)
   b8bb8:	d11c      	bne.n	b8bf4 <_Z12loadFileDataPKc+0x5c>
        Serial.printlnf("Error opening file: %d", errno);
   b8bba:	f003 fc3d 	bl	bc438 <_Z16_fetch_usbserialv>
   b8bbe:	4606      	mov	r6, r0
   b8bc0:	f000 fcfc 	bl	b95bc <__errno>
   b8bc4:	4925      	ldr	r1, [pc, #148]	; (b8c5c <_Z12loadFileDataPKc+0xc4>)
   b8bc6:	6802      	ldr	r2, [r0, #0]
    else
    {
        // Use fstat to determine file size
        struct stat statBuffer;
        if (fstat(fileDescriptor, &statBuffer) == -1)
            Serial.printlnf("Error getting stats: %d", errno);
   b8bc8:	4630      	mov	r0, r6
   b8bca:	f7fc f925 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
            else
                returnString = data;
        }
    }

    close(fileDescriptor);
   b8bce:	4628      	mov	r0, r5
   b8bd0:	f005 fbd4 	bl	be37c <close>

    // If no errors, return data.
    if (errno)
   b8bd4:	f000 fcf2 	bl	b95bc <__errno>
   b8bd8:	6803      	ldr	r3, [r0, #0]
   b8bda:	b3bb      	cbz	r3, b8c4c <_Z12loadFileDataPKc+0xb4>
        return "";
   b8bdc:	491e      	ldr	r1, [pc, #120]	; (b8c58 <_Z12loadFileDataPKc+0xc0>)
   b8bde:	4620      	mov	r0, r4
   b8be0:	f001 f9cd 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
    String returnString;
   b8be4:	4638      	mov	r0, r7
   b8be6:	f001 f97f 	bl	b9ee8 <_ZN6StringD1Ev>
    else
        return returnString;
}
   b8bea:	4620      	mov	r0, r4
   b8bec:	3768      	adds	r7, #104	; 0x68
   b8bee:	46bd      	mov	sp, r7
   b8bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (fstat(fileDescriptor, &statBuffer) == -1)
   b8bf4:	f107 0110 	add.w	r1, r7, #16
   b8bf8:	f005 fbc8 	bl	be38c <fstat>
   b8bfc:	3001      	adds	r0, #1
   b8bfe:	d107      	bne.n	b8c10 <_Z12loadFileDataPKc+0x78>
            Serial.printlnf("Error getting stats: %d", errno);
   b8c00:	f003 fc1a 	bl	bc438 <_Z16_fetch_usbserialv>
   b8c04:	4606      	mov	r6, r0
   b8c06:	f000 fcd9 	bl	b95bc <__errno>
   b8c0a:	4915      	ldr	r1, [pc, #84]	; (b8c60 <_Z12loadFileDataPKc+0xc8>)
   b8c0c:	6802      	ldr	r2, [r0, #0]
   b8c0e:	e7db      	b.n	b8bc8 <_Z12loadFileDataPKc+0x30>
   b8c10:	6a3a      	ldr	r2, [r7, #32]
            char data[statBuffer.st_size];
   b8c12:	1dd3      	adds	r3, r2, #7
   b8c14:	f023 0307 	bic.w	r3, r3, #7
                returnString = data;
   b8c18:	46e8      	mov	r8, sp
            char data[statBuffer.st_size];
   b8c1a:	ebad 0d03 	sub.w	sp, sp, r3
            if (read(fileDescriptor, data, statBuffer.st_size) == -1)
   b8c1e:	4669      	mov	r1, sp
   b8c20:	4628      	mov	r0, r5
   b8c22:	f005 fbcf 	bl	be3c4 <read>
   b8c26:	3001      	adds	r0, #1
   b8c28:	d10b      	bne.n	b8c42 <_Z12loadFileDataPKc+0xaa>
                Serial.printlnf("Error reading file: %d", errno);
   b8c2a:	f003 fc05 	bl	bc438 <_Z16_fetch_usbserialv>
   b8c2e:	4606      	mov	r6, r0
   b8c30:	f000 fcc4 	bl	b95bc <__errno>
   b8c34:	490b      	ldr	r1, [pc, #44]	; (b8c64 <_Z12loadFileDataPKc+0xcc>)
   b8c36:	6802      	ldr	r2, [r0, #0]
   b8c38:	4630      	mov	r0, r6
   b8c3a:	f7fc f8ed 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
   b8c3e:	46c5      	mov	sp, r8
   b8c40:	e7c5      	b.n	b8bce <_Z12loadFileDataPKc+0x36>
                returnString = data;
   b8c42:	4669      	mov	r1, sp
   b8c44:	4638      	mov	r0, r7
   b8c46:	f001 f9f8 	bl	ba03a <_ZN6StringaSEPKc>
   b8c4a:	e7f8      	b.n	b8c3e <_Z12loadFileDataPKc+0xa6>
        return returnString;
   b8c4c:	4639      	mov	r1, r7
   b8c4e:	4620      	mov	r0, r4
   b8c50:	f001 f9c6 	bl	b9fe0 <_ZN6StringC1EOS_>
   b8c54:	e7c6      	b.n	b8be4 <_Z12loadFileDataPKc+0x4c>
   b8c56:	bf00      	nop
   b8c58:	000bfe42 	.word	0x000bfe42
   b8c5c:	000bff90 	.word	0x000bff90
   b8c60:	000bffa7 	.word	0x000bffa7
   b8c64:	000bff5c 	.word	0x000bff5c

000b8c68 <_Z11loadWhTodayv>:
{
   b8c68:	b510      	push	{r4, lr}
    return loadFileData("/wattHourToday.txt");
   b8c6a:	4903      	ldr	r1, [pc, #12]	; (b8c78 <_Z11loadWhTodayv+0x10>)
{
   b8c6c:	4604      	mov	r4, r0
    return loadFileData("/wattHourToday.txt");
   b8c6e:	f7ff ff93 	bl	b8b98 <_Z12loadFileDataPKc>
}
   b8c72:	4620      	mov	r0, r4
   b8c74:	bd10      	pop	{r4, pc}
   b8c76:	bf00      	nop
   b8c78:	000bfefc 	.word	0x000bfefc

000b8c7c <_Z15loadWhYesterdayv>:
{
   b8c7c:	b510      	push	{r4, lr}
    return loadFileData("/wattHourYesterday.txt");
   b8c7e:	4903      	ldr	r1, [pc, #12]	; (b8c8c <_Z15loadWhYesterdayv+0x10>)
{
   b8c80:	4604      	mov	r4, r0
    return loadFileData("/wattHourYesterday.txt");
   b8c82:	f7ff ff89 	bl	b8b98 <_Z12loadFileDataPKc>
}
   b8c86:	4620      	mov	r0, r4
   b8c88:	bd10      	pop	{r4, pc}
   b8c8a:	bf00      	nop
   b8c8c:	000bff0f 	.word	0x000bff0f

000b8c90 <_Z11initStorageP6StringS0_>:
{
   b8c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c94:	b086      	sub	sp, #24
   b8c96:	4680      	mov	r8, r0
   b8c98:	460e      	mov	r6, r1
    if (initLastWrite() && initWhFiles())
   b8c9a:	f7ff fe99 	bl	b89d0 <_Z13initLastWritev>
   b8c9e:	b920      	cbnz	r0, b8caa <_Z11initStorageP6StringS0_+0x1a>
        return false;
   b8ca0:	2500      	movs	r5, #0
}
   b8ca2:	4628      	mov	r0, r5
   b8ca4:	b006      	add	sp, #24
   b8ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (initLastWrite() && initWhFiles())
   b8caa:	f7ff fec9 	bl	b8a40 <_Z11initWhFilesv>
   b8cae:	4605      	mov	r5, r0
   b8cb0:	2800      	cmp	r0, #0
   b8cb2:	d0f5      	beq.n	b8ca0 <_Z11initStorageP6StringS0_+0x10>
        uint16_t lastWriteDay = getLastWrite();
   b8cb4:	f7ff fef0 	bl	b8a98 <_Z12getLastWritev>
   b8cb8:	4607      	mov	r7, r0
        uint16_t dayNow = Time.format(Time.now(), "%j").toInt();
   b8cba:	f002 ff0e 	bl	bbada <_ZN9TimeClass3nowEv>
   b8cbe:	4b17      	ldr	r3, [pc, #92]	; (b8d1c <_Z11initStorageP6StringS0_+0x8c>)
   b8cc0:	4917      	ldr	r1, [pc, #92]	; (b8d20 <_Z11initStorageP6StringS0_+0x90>)
   b8cc2:	9300      	str	r3, [sp, #0]
   b8cc4:	4602      	mov	r2, r0
   b8cc6:	17c3      	asrs	r3, r0, #31
   b8cc8:	a802      	add	r0, sp, #8
   b8cca:	f002 fea7 	bl	bba1c <_ZN9TimeClass6formatExPKc>
   b8cce:	a802      	add	r0, sp, #8
   b8cd0:	f001 fa8b 	bl	ba1ea <_ZNK6String5toIntEv>
   b8cd4:	4604      	mov	r4, r0
   b8cd6:	a802      	add	r0, sp, #8
   b8cd8:	f001 f906 	bl	b9ee8 <_ZN6StringD1Ev>
        if (lastWriteDay == dayNow)
   b8cdc:	b2a3      	uxth	r3, r4
   b8cde:	429f      	cmp	r7, r3
   b8ce0:	d114      	bne.n	b8d0c <_Z11initStorageP6StringS0_+0x7c>
            *whToday = loadWhToday();
   b8ce2:	a802      	add	r0, sp, #8
   b8ce4:	f7ff ffc0 	bl	b8c68 <_Z11loadWhTodayv>
   b8ce8:	a902      	add	r1, sp, #8
   b8cea:	4640      	mov	r0, r8
   b8cec:	f001 f99d 	bl	ba02a <_ZN6StringaSEOS_>
   b8cf0:	a802      	add	r0, sp, #8
   b8cf2:	f001 f8f9 	bl	b9ee8 <_ZN6StringD1Ev>
            *whYesterday = loadWhYesterday();
   b8cf6:	a802      	add	r0, sp, #8
   b8cf8:	f7ff ffc0 	bl	b8c7c <_Z15loadWhYesterdayv>
            *whYesterday = loadWhToday();
   b8cfc:	a902      	add	r1, sp, #8
   b8cfe:	4630      	mov	r0, r6
   b8d00:	f001 f993 	bl	ba02a <_ZN6StringaSEOS_>
   b8d04:	a802      	add	r0, sp, #8
   b8d06:	f001 f8ef 	bl	b9ee8 <_ZN6StringD1Ev>
   b8d0a:	e7ca      	b.n	b8ca2 <_Z11initStorageP6StringS0_+0x12>
        else if (lastWriteDay == dayNow - 1)
   b8d0c:	b2a4      	uxth	r4, r4
   b8d0e:	3c01      	subs	r4, #1
   b8d10:	42a7      	cmp	r7, r4
   b8d12:	d1c6      	bne.n	b8ca2 <_Z11initStorageP6StringS0_+0x12>
            *whYesterday = loadWhToday();
   b8d14:	a802      	add	r0, sp, #8
   b8d16:	f7ff ffa7 	bl	b8c68 <_Z11loadWhTodayv>
   b8d1a:	e7ef      	b.n	b8cfc <_Z11initStorageP6StringS0_+0x6c>
   b8d1c:	000bff73 	.word	0x000bff73
   b8d20:	2003e690 	.word	0x2003e690

000b8d24 <_Z14writeWattHoursPKc6String>:

// #############################################################
// Function for writing data to the indicated file.
// #############################################################
bool writeWattHours(const char *filePathName, String data)
{
   b8d24:	b538      	push	{r3, r4, r5, lr}
   b8d26:	460d      	mov	r5, r1
    // Open file for writing (truncate to zero length).
    int fileDescriptor = open(filePathName, O_WRONLY | O_TRUNC);
   b8d28:	f240 4101 	movw	r1, #1025	; 0x401
   b8d2c:	f005 fb36 	bl	be39c <open>

    // Check for errors.
    if (fileDescriptor == -1)
   b8d30:	1c43      	adds	r3, r0, #1
    int fileDescriptor = open(filePathName, O_WRONLY | O_TRUNC);
   b8d32:	4604      	mov	r4, r0
    if (fileDescriptor == -1)
   b8d34:	d114      	bne.n	b8d60 <_Z14writeWattHoursPKc6String+0x3c>
        Serial.printlnf("Error opening file: %d", errno);
   b8d36:	f003 fb7f 	bl	bc438 <_Z16_fetch_usbserialv>
   b8d3a:	4605      	mov	r5, r0
   b8d3c:	f000 fc3e 	bl	b95bc <__errno>
   b8d40:	490f      	ldr	r1, [pc, #60]	; (b8d80 <_Z14writeWattHoursPKc6String+0x5c>)
   b8d42:	6802      	ldr	r2, [r0, #0]
    else
    {
        if (write(fileDescriptor, data.c_str(), data.length()) == -1)
            Serial.printlnf("Error writing to file: %d", errno);
   b8d44:	4628      	mov	r0, r5
   b8d46:	f7fc f867 	bl	b4e18 <_ZN5Print8printlnfEPKcz>
    }

    close(fileDescriptor);
   b8d4a:	4620      	mov	r0, r4
   b8d4c:	f005 fb16 	bl	be37c <close>

    // Return true, if no errors
    if (errno)
   b8d50:	f000 fc34 	bl	b95bc <__errno>
   b8d54:	6803      	ldr	r3, [r0, #0]
   b8d56:	b98b      	cbnz	r3, b8d7c <_Z14writeWattHoursPKc6String+0x58>
        return false;
    else
    {
        // Update "lastWrite" file, then return.
        updateLastWrite();
   b8d58:	f7ff fed2 	bl	b8b00 <_Z15updateLastWritev>
        return true;
   b8d5c:	2001      	movs	r0, #1
    }
}
   b8d5e:	bd38      	pop	{r3, r4, r5, pc}
        if (write(fileDescriptor, data.c_str(), data.length()) == -1)
   b8d60:	68aa      	ldr	r2, [r5, #8]
   b8d62:	6829      	ldr	r1, [r5, #0]
   b8d64:	f005 fb38 	bl	be3d8 <write>
   b8d68:	3001      	adds	r0, #1
   b8d6a:	d1ee      	bne.n	b8d4a <_Z14writeWattHoursPKc6String+0x26>
            Serial.printlnf("Error writing to file: %d", errno);
   b8d6c:	f003 fb64 	bl	bc438 <_Z16_fetch_usbserialv>
   b8d70:	4605      	mov	r5, r0
   b8d72:	f000 fc23 	bl	b95bc <__errno>
   b8d76:	4903      	ldr	r1, [pc, #12]	; (b8d84 <_Z14writeWattHoursPKc6String+0x60>)
   b8d78:	6802      	ldr	r2, [r0, #0]
   b8d7a:	e7e3      	b.n	b8d44 <_Z14writeWattHoursPKc6String+0x20>
        return false;
   b8d7c:	2000      	movs	r0, #0
   b8d7e:	e7ee      	b.n	b8d5e <_Z14writeWattHoursPKc6String+0x3a>
   b8d80:	000bff90 	.word	0x000bff90
   b8d84:	000bff76 	.word	0x000bff76

000b8d88 <_Z12writeWhToday6String>:
{
   b8d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8d8a:	4601      	mov	r1, r0
    return (writeWattHours("/wattHourToday.txt", whToday));
   b8d8c:	4668      	mov	r0, sp
   b8d8e:	f001 f941 	bl	ba014 <_ZN6StringC1ERKS_>
   b8d92:	4669      	mov	r1, sp
   b8d94:	4804      	ldr	r0, [pc, #16]	; (b8da8 <_Z12writeWhToday6String+0x20>)
   b8d96:	f7ff ffc5 	bl	b8d24 <_Z14writeWattHoursPKc6String>
   b8d9a:	4604      	mov	r4, r0
   b8d9c:	4668      	mov	r0, sp
   b8d9e:	f001 f8a3 	bl	b9ee8 <_ZN6StringD1Ev>
}
   b8da2:	4620      	mov	r0, r4
   b8da4:	b004      	add	sp, #16
   b8da6:	bd10      	pop	{r4, pc}
   b8da8:	000bfefc 	.word	0x000bfefc

000b8dac <_Z16writeWhYesterday6String>:
{
   b8dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8dae:	4601      	mov	r1, r0
    return (writeWattHours("/wattHourYesterday.txt", whYesterday));
   b8db0:	4668      	mov	r0, sp
   b8db2:	f001 f92f 	bl	ba014 <_ZN6StringC1ERKS_>
   b8db6:	4669      	mov	r1, sp
   b8db8:	4804      	ldr	r0, [pc, #16]	; (b8dcc <_Z16writeWhYesterday6String+0x20>)
   b8dba:	f7ff ffb3 	bl	b8d24 <_Z14writeWattHoursPKc6String>
   b8dbe:	4604      	mov	r4, r0
   b8dc0:	4668      	mov	r0, sp
   b8dc2:	f001 f891 	bl	b9ee8 <_ZN6StringD1Ev>
}
   b8dc6:	4620      	mov	r0, r4
   b8dc8:	b004      	add	sp, #16
   b8dca:	bd10      	pop	{r4, pc}
   b8dcc:	000bff0f 	.word	0x000bff0f

000b8dd0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8dd0:	b508      	push	{r3, lr}
   b8dd2:	4b02      	ldr	r3, [pc, #8]	; (b8ddc <netdb_freeaddrinfo+0xc>)
   b8dd4:	681b      	ldr	r3, [r3, #0]
   b8dd6:	689b      	ldr	r3, [r3, #8]
   b8dd8:	9301      	str	r3, [sp, #4]
   b8dda:	bd08      	pop	{r3, pc}
   b8ddc:	00030268 	.word	0x00030268

000b8de0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8de0:	b508      	push	{r3, lr}
   b8de2:	4b02      	ldr	r3, [pc, #8]	; (b8dec <netdb_getaddrinfo+0xc>)
   b8de4:	681b      	ldr	r3, [r3, #0]
   b8de6:	68db      	ldr	r3, [r3, #12]
   b8de8:	9301      	str	r3, [sp, #4]
   b8dea:	bd08      	pop	{r3, pc}
   b8dec:	00030268 	.word	0x00030268

000b8df0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b8df0:	b508      	push	{r3, lr}
   b8df2:	4b02      	ldr	r3, [pc, #8]	; (b8dfc <hal_gpio_mode+0xc>)
   b8df4:	681b      	ldr	r3, [r3, #0]
   b8df6:	689b      	ldr	r3, [r3, #8]
   b8df8:	9301      	str	r3, [sp, #4]
   b8dfa:	bd08      	pop	{r3, pc}
   b8dfc:	0003022c 	.word	0x0003022c

000b8e00 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b8e00:	b508      	push	{r3, lr}
   b8e02:	4b02      	ldr	r3, [pc, #8]	; (b8e0c <hal_interrupt_attach+0xc>)
   b8e04:	681b      	ldr	r3, [r3, #0]
   b8e06:	699b      	ldr	r3, [r3, #24]
   b8e08:	9301      	str	r3, [sp, #4]
   b8e0a:	bd08      	pop	{r3, pc}
   b8e0c:	0003022c 	.word	0x0003022c

000b8e10 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b8e10:	b508      	push	{r3, lr}
   b8e12:	4b02      	ldr	r3, [pc, #8]	; (b8e1c <hal_interrupt_detach+0xc>)
   b8e14:	681b      	ldr	r3, [r3, #0]
   b8e16:	69db      	ldr	r3, [r3, #28]
   b8e18:	9301      	str	r3, [sp, #4]
   b8e1a:	bd08      	pop	{r3, pc}
   b8e1c:	0003022c 	.word	0x0003022c

000b8e20 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b8e20:	b508      	push	{r3, lr}
   b8e22:	4b02      	ldr	r3, [pc, #8]	; (b8e2c <if_index_to_name+0xc>)
   b8e24:	681b      	ldr	r3, [r3, #0]
   b8e26:	695b      	ldr	r3, [r3, #20]
   b8e28:	9301      	str	r3, [sp, #4]
   b8e2a:	bd08      	pop	{r3, pc}
   b8e2c:	0003026c 	.word	0x0003026c

000b8e30 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   b8e30:	b508      	push	{r3, lr}
   b8e32:	4b02      	ldr	r3, [pc, #8]	; (b8e3c <if_get_by_index+0xc>)
   b8e34:	681b      	ldr	r3, [r3, #0]
   b8e36:	699b      	ldr	r3, [r3, #24]
   b8e38:	9301      	str	r3, [sp, #4]
   b8e3a:	bd08      	pop	{r3, pc}
   b8e3c:	0003026c 	.word	0x0003026c

000b8e40 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   b8e40:	b508      	push	{r3, lr}
   b8e42:	4b02      	ldr	r3, [pc, #8]	; (b8e4c <if_get_addrs+0xc>)
   b8e44:	681b      	ldr	r3, [r3, #0]
   b8e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8e48:	9301      	str	r3, [sp, #4]
   b8e4a:	bd08      	pop	{r3, pc}
   b8e4c:	0003026c 	.word	0x0003026c

000b8e50 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   b8e50:	b508      	push	{r3, lr}
   b8e52:	4b02      	ldr	r3, [pc, #8]	; (b8e5c <if_free_if_addrs+0xc>)
   b8e54:	681b      	ldr	r3, [r3, #0]
   b8e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8e58:	9301      	str	r3, [sp, #4]
   b8e5a:	bd08      	pop	{r3, pc}
   b8e5c:	0003026c 	.word	0x0003026c

000b8e60 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8e60:	b508      	push	{r3, lr}
   b8e62:	4b02      	ldr	r3, [pc, #8]	; (b8e6c <HAL_RNG_GetRandomNumber+0xc>)
   b8e64:	681b      	ldr	r3, [r3, #0]
   b8e66:	685b      	ldr	r3, [r3, #4]
   b8e68:	9301      	str	r3, [sp, #4]
   b8e6a:	bd08      	pop	{r3, pc}
   b8e6c:	00030218 	.word	0x00030218

000b8e70 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8e70:	b508      	push	{r3, lr}
   b8e72:	4b02      	ldr	r3, [pc, #8]	; (b8e7c <HAL_Delay_Microseconds+0xc>)
   b8e74:	681b      	ldr	r3, [r3, #0]
   b8e76:	68db      	ldr	r3, [r3, #12]
   b8e78:	9301      	str	r3, [sp, #4]
   b8e7a:	bd08      	pop	{r3, pc}
   b8e7c:	00030218 	.word	0x00030218

000b8e80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8e80:	b508      	push	{r3, lr}
   b8e82:	4b02      	ldr	r3, [pc, #8]	; (b8e8c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8e84:	681b      	ldr	r3, [r3, #0]
   b8e86:	695b      	ldr	r3, [r3, #20]
   b8e88:	9301      	str	r3, [sp, #4]
   b8e8a:	bd08      	pop	{r3, pc}
   b8e8c:	00030218 	.word	0x00030218

000b8e90 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8e90:	b508      	push	{r3, lr}
   b8e92:	4b02      	ldr	r3, [pc, #8]	; (b8e9c <hal_rtc_time_is_valid+0xc>)
   b8e94:	681b      	ldr	r3, [r3, #0]
   b8e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8e98:	9301      	str	r3, [sp, #4]
   b8e9a:	bd08      	pop	{r3, pc}
   b8e9c:	00030218 	.word	0x00030218

000b8ea0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8ea0:	b508      	push	{r3, lr}
   b8ea2:	4b02      	ldr	r3, [pc, #8]	; (b8eac <hal_rtc_get_time+0xc>)
   b8ea4:	681b      	ldr	r3, [r3, #0]
   b8ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8ea8:	9301      	str	r3, [sp, #4]
   b8eaa:	bd08      	pop	{r3, pc}
   b8eac:	00030218 	.word	0x00030218

000b8eb0 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8eb0:	b508      	push	{r3, lr}
   b8eb2:	4b02      	ldr	r3, [pc, #8]	; (b8ebc <HAL_Core_Runtime_Info+0xc>)
   b8eb4:	681b      	ldr	r3, [r3, #0]
   b8eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8eb8:	9301      	str	r3, [sp, #4]
   b8eba:	bd08      	pop	{r3, pc}
   b8ebc:	00030234 	.word	0x00030234

000b8ec0 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   b8ec0:	b508      	push	{r3, lr}
   b8ec2:	4b02      	ldr	r3, [pc, #8]	; (b8ecc <_open+0xc>)
   b8ec4:	681b      	ldr	r3, [r3, #0]
   b8ec6:	681b      	ldr	r3, [r3, #0]
   b8ec8:	9301      	str	r3, [sp, #4]
   b8eca:	bd08      	pop	{r3, pc}
   b8ecc:	00030284 	.word	0x00030284

000b8ed0 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   b8ed0:	b508      	push	{r3, lr}
   b8ed2:	4b02      	ldr	r3, [pc, #8]	; (b8edc <_write+0xc>)
   b8ed4:	681b      	ldr	r3, [r3, #0]
   b8ed6:	685b      	ldr	r3, [r3, #4]
   b8ed8:	9301      	str	r3, [sp, #4]
   b8eda:	bd08      	pop	{r3, pc}
   b8edc:	00030284 	.word	0x00030284

000b8ee0 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   b8ee0:	b508      	push	{r3, lr}
   b8ee2:	4b02      	ldr	r3, [pc, #8]	; (b8eec <_read+0xc>)
   b8ee4:	681b      	ldr	r3, [r3, #0]
   b8ee6:	689b      	ldr	r3, [r3, #8]
   b8ee8:	9301      	str	r3, [sp, #4]
   b8eea:	bd08      	pop	{r3, pc}
   b8eec:	00030284 	.word	0x00030284

000b8ef0 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   b8ef0:	b508      	push	{r3, lr}
   b8ef2:	4b02      	ldr	r3, [pc, #8]	; (b8efc <_close+0xc>)
   b8ef4:	681b      	ldr	r3, [r3, #0]
   b8ef6:	68db      	ldr	r3, [r3, #12]
   b8ef8:	9301      	str	r3, [sp, #4]
   b8efa:	bd08      	pop	{r3, pc}
   b8efc:	00030284 	.word	0x00030284

000b8f00 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   b8f00:	b508      	push	{r3, lr}
   b8f02:	4b02      	ldr	r3, [pc, #8]	; (b8f0c <_fstat+0xc>)
   b8f04:	681b      	ldr	r3, [r3, #0]
   b8f06:	695b      	ldr	r3, [r3, #20]
   b8f08:	9301      	str	r3, [sp, #4]
   b8f0a:	bd08      	pop	{r3, pc}
   b8f0c:	00030284 	.word	0x00030284

000b8f10 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b8f10:	b508      	push	{r3, lr}
   b8f12:	4b02      	ldr	r3, [pc, #8]	; (b8f1c <hal_ble_stack_init+0xc>)
   b8f14:	681b      	ldr	r3, [r3, #0]
   b8f16:	689b      	ldr	r3, [r3, #8]
   b8f18:	9301      	str	r3, [sp, #4]
   b8f1a:	bd08      	pop	{r3, pc}
   b8f1c:	00030278 	.word	0x00030278

000b8f20 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b8f20:	b508      	push	{r3, lr}
   b8f22:	4b02      	ldr	r3, [pc, #8]	; (b8f2c <hal_ble_select_antenna+0xc>)
   b8f24:	681b      	ldr	r3, [r3, #0]
   b8f26:	691b      	ldr	r3, [r3, #16]
   b8f28:	9301      	str	r3, [sp, #4]
   b8f2a:	bd08      	pop	{r3, pc}
   b8f2c:	00030278 	.word	0x00030278

000b8f30 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b8f30:	b508      	push	{r3, lr}
   b8f32:	4b02      	ldr	r3, [pc, #8]	; (b8f3c <hal_ble_gap_set_advertising_data+0xc>)
   b8f34:	681b      	ldr	r3, [r3, #0]
   b8f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8f38:	9301      	str	r3, [sp, #4]
   b8f3a:	bd08      	pop	{r3, pc}
   b8f3c:	00030278 	.word	0x00030278

000b8f40 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b8f40:	b508      	push	{r3, lr}
   b8f42:	4b02      	ldr	r3, [pc, #8]	; (b8f4c <hal_ble_gap_set_scan_response_data+0xc>)
   b8f44:	681b      	ldr	r3, [r3, #0]
   b8f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8f48:	9301      	str	r3, [sp, #4]
   b8f4a:	bd08      	pop	{r3, pc}
   b8f4c:	00030278 	.word	0x00030278

000b8f50 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b8f50:	b508      	push	{r3, lr}
   b8f52:	4b02      	ldr	r3, [pc, #8]	; (b8f5c <hal_ble_gap_start_advertising+0xc>)
   b8f54:	681b      	ldr	r3, [r3, #0]
   b8f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b8f58:	9301      	str	r3, [sp, #4]
   b8f5a:	bd08      	pop	{r3, pc}
   b8f5c:	00030278 	.word	0x00030278

000b8f60 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b8f60:	b508      	push	{r3, lr}
   b8f62:	4b03      	ldr	r3, [pc, #12]	; (b8f70 <hal_ble_gap_disconnect+0x10>)
   b8f64:	681b      	ldr	r3, [r3, #0]
   b8f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8f6a:	9301      	str	r3, [sp, #4]
   b8f6c:	bd08      	pop	{r3, pc}
   b8f6e:	0000      	.short	0x0000
   b8f70:	00030278 	.word	0x00030278

000b8f74 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b8f74:	b508      	push	{r3, lr}
   b8f76:	4b03      	ldr	r3, [pc, #12]	; (b8f84 <hal_ble_gatt_server_add_service+0x10>)
   b8f78:	681b      	ldr	r3, [r3, #0]
   b8f7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b8f7e:	9301      	str	r3, [sp, #4]
   b8f80:	bd08      	pop	{r3, pc}
   b8f82:	0000      	.short	0x0000
   b8f84:	00030278 	.word	0x00030278

000b8f88 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8f88:	b508      	push	{r3, lr}
   b8f8a:	4b03      	ldr	r3, [pc, #12]	; (b8f98 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b8f8c:	681b      	ldr	r3, [r3, #0]
   b8f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b8f92:	9301      	str	r3, [sp, #4]
   b8f94:	bd08      	pop	{r3, pc}
   b8f96:	0000      	.short	0x0000
   b8f98:	00030278 	.word	0x00030278

000b8f9c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8f9c:	b508      	push	{r3, lr}
   b8f9e:	4b03      	ldr	r3, [pc, #12]	; (b8fac <hal_ble_gatt_client_write_with_response+0x10>)
   b8fa0:	681b      	ldr	r3, [r3, #0]
   b8fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b8fa6:	9301      	str	r3, [sp, #4]
   b8fa8:	bd08      	pop	{r3, pc}
   b8faa:	0000      	.short	0x0000
   b8fac:	00030278 	.word	0x00030278

000b8fb0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8fb0:	b508      	push	{r3, lr}
   b8fb2:	4b03      	ldr	r3, [pc, #12]	; (b8fc0 <hal_ble_gatt_client_write_without_response+0x10>)
   b8fb4:	681b      	ldr	r3, [r3, #0]
   b8fb6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b8fba:	9301      	str	r3, [sp, #4]
   b8fbc:	bd08      	pop	{r3, pc}
   b8fbe:	0000      	.short	0x0000
   b8fc0:	00030278 	.word	0x00030278

000b8fc4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b8fc4:	b508      	push	{r3, lr}
   b8fc6:	4b03      	ldr	r3, [pc, #12]	; (b8fd4 <hal_ble_gatt_server_add_characteristic+0x10>)
   b8fc8:	681b      	ldr	r3, [r3, #0]
   b8fca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b8fce:	9301      	str	r3, [sp, #4]
   b8fd0:	bd08      	pop	{r3, pc}
   b8fd2:	0000      	.short	0x0000
   b8fd4:	00030278 	.word	0x00030278

000b8fd8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b8fd8:	b508      	push	{r3, lr}
   b8fda:	4b03      	ldr	r3, [pc, #12]	; (b8fe8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b8fdc:	681b      	ldr	r3, [r3, #0]
   b8fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b8fe2:	9301      	str	r3, [sp, #4]
   b8fe4:	bd08      	pop	{r3, pc}
   b8fe6:	0000      	.short	0x0000
   b8fe8:	00030278 	.word	0x00030278

000b8fec <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8fec:	b508      	push	{r3, lr}
   b8fee:	4b03      	ldr	r3, [pc, #12]	; (b8ffc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b8ff0:	681b      	ldr	r3, [r3, #0]
   b8ff2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b8ff6:	9301      	str	r3, [sp, #4]
   b8ff8:	bd08      	pop	{r3, pc}
   b8ffa:	0000      	.short	0x0000
   b8ffc:	00030278 	.word	0x00030278

000b9000 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9000:	b508      	push	{r3, lr}
   b9002:	4b03      	ldr	r3, [pc, #12]	; (b9010 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9004:	681b      	ldr	r3, [r3, #0]
   b9006:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b900a:	9301      	str	r3, [sp, #4]
   b900c:	bd08      	pop	{r3, pc}
   b900e:	0000      	.short	0x0000
   b9010:	00030278 	.word	0x00030278

000b9014 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9014:	b508      	push	{r3, lr}
   b9016:	4b02      	ldr	r3, [pc, #8]	; (b9020 <os_thread_yield+0xc>)
   b9018:	681b      	ldr	r3, [r3, #0]
   b901a:	68db      	ldr	r3, [r3, #12]
   b901c:	9301      	str	r3, [sp, #4]
   b901e:	bd08      	pop	{r3, pc}
   b9020:	00030248 	.word	0x00030248

000b9024 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b9024:	b508      	push	{r3, lr}
   b9026:	4b02      	ldr	r3, [pc, #8]	; (b9030 <os_thread_scheduling+0xc>)
   b9028:	681b      	ldr	r3, [r3, #0]
   b902a:	69db      	ldr	r3, [r3, #28]
   b902c:	9301      	str	r3, [sp, #4]
   b902e:	bd08      	pop	{r3, pc}
   b9030:	00030248 	.word	0x00030248

000b9034 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b9034:	b508      	push	{r3, lr}
   b9036:	4b02      	ldr	r3, [pc, #8]	; (b9040 <os_timer_create+0xc>)
   b9038:	681b      	ldr	r3, [r3, #0]
   b903a:	6a1b      	ldr	r3, [r3, #32]
   b903c:	9301      	str	r3, [sp, #4]
   b903e:	bd08      	pop	{r3, pc}
   b9040:	00030248 	.word	0x00030248

000b9044 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b9044:	b508      	push	{r3, lr}
   b9046:	4b02      	ldr	r3, [pc, #8]	; (b9050 <os_timer_destroy+0xc>)
   b9048:	681b      	ldr	r3, [r3, #0]
   b904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b904c:	9301      	str	r3, [sp, #4]
   b904e:	bd08      	pop	{r3, pc}
   b9050:	00030248 	.word	0x00030248

000b9054 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b9054:	b508      	push	{r3, lr}
   b9056:	4b02      	ldr	r3, [pc, #8]	; (b9060 <os_timer_get_id+0xc>)
   b9058:	681b      	ldr	r3, [r3, #0]
   b905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b905c:	9301      	str	r3, [sp, #4]
   b905e:	bd08      	pop	{r3, pc}
   b9060:	00030248 	.word	0x00030248

000b9064 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b9064:	b508      	push	{r3, lr}
   b9066:	4b02      	ldr	r3, [pc, #8]	; (b9070 <os_timer_change+0xc>)
   b9068:	681b      	ldr	r3, [r3, #0]
   b906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b906c:	9301      	str	r3, [sp, #4]
   b906e:	bd08      	pop	{r3, pc}
   b9070:	00030248 	.word	0x00030248

000b9074 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b9074:	b508      	push	{r3, lr}
   b9076:	4b02      	ldr	r3, [pc, #8]	; (b9080 <os_mutex_create+0xc>)
   b9078:	681b      	ldr	r3, [r3, #0]
   b907a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b907c:	9301      	str	r3, [sp, #4]
   b907e:	bd08      	pop	{r3, pc}
   b9080:	00030248 	.word	0x00030248

000b9084 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b9084:	b508      	push	{r3, lr}
   b9086:	4b02      	ldr	r3, [pc, #8]	; (b9090 <os_mutex_lock+0xc>)
   b9088:	681b      	ldr	r3, [r3, #0]
   b908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b908c:	9301      	str	r3, [sp, #4]
   b908e:	bd08      	pop	{r3, pc}
   b9090:	00030248 	.word	0x00030248

000b9094 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b9094:	b508      	push	{r3, lr}
   b9096:	4b02      	ldr	r3, [pc, #8]	; (b90a0 <os_mutex_unlock+0xc>)
   b9098:	681b      	ldr	r3, [r3, #0]
   b909a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b909c:	9301      	str	r3, [sp, #4]
   b909e:	bd08      	pop	{r3, pc}
   b90a0:	00030248 	.word	0x00030248

000b90a4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b90a4:	b508      	push	{r3, lr}
   b90a6:	4b02      	ldr	r3, [pc, #8]	; (b90b0 <os_mutex_recursive_create+0xc>)
   b90a8:	681b      	ldr	r3, [r3, #0]
   b90aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b90ac:	9301      	str	r3, [sp, #4]
   b90ae:	bd08      	pop	{r3, pc}
   b90b0:	00030248 	.word	0x00030248

000b90b4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b90b4:	b508      	push	{r3, lr}
   b90b6:	4b02      	ldr	r3, [pc, #8]	; (b90c0 <os_mutex_recursive_lock+0xc>)
   b90b8:	681b      	ldr	r3, [r3, #0]
   b90ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b90bc:	9301      	str	r3, [sp, #4]
   b90be:	bd08      	pop	{r3, pc}
   b90c0:	00030248 	.word	0x00030248

000b90c4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b90c4:	b508      	push	{r3, lr}
   b90c6:	4b02      	ldr	r3, [pc, #8]	; (b90d0 <os_mutex_recursive_unlock+0xc>)
   b90c8:	681b      	ldr	r3, [r3, #0]
   b90ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b90cc:	9301      	str	r3, [sp, #4]
   b90ce:	bd08      	pop	{r3, pc}
   b90d0:	00030248 	.word	0x00030248

000b90d4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b90d4:	b508      	push	{r3, lr}
   b90d6:	4b02      	ldr	r3, [pc, #8]	; (b90e0 <os_timer_set_id+0xc>)
   b90d8:	681b      	ldr	r3, [r3, #0]
   b90da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b90dc:	9301      	str	r3, [sp, #4]
   b90de:	bd08      	pop	{r3, pc}
   b90e0:	00030248 	.word	0x00030248

000b90e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b90e4:	b508      	push	{r3, lr}
   b90e6:	4b02      	ldr	r3, [pc, #8]	; (b90f0 <inet_inet_ntop+0xc>)
   b90e8:	681b      	ldr	r3, [r3, #0]
   b90ea:	695b      	ldr	r3, [r3, #20]
   b90ec:	9301      	str	r3, [sp, #4]
   b90ee:	bd08      	pop	{r3, pc}
   b90f0:	00030264 	.word	0x00030264

000b90f4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b90f4:	b508      	push	{r3, lr}
   b90f6:	4b02      	ldr	r3, [pc, #8]	; (b9100 <inet_htonl+0xc>)
   b90f8:	681b      	ldr	r3, [r3, #0]
   b90fa:	6a1b      	ldr	r3, [r3, #32]
   b90fc:	9301      	str	r3, [sp, #4]
   b90fe:	bd08      	pop	{r3, pc}
   b9100:	00030264 	.word	0x00030264

000b9104 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b9104:	b508      	push	{r3, lr}
   b9106:	4b02      	ldr	r3, [pc, #8]	; (b9110 <inet_ntohs+0xc>)
   b9108:	681b      	ldr	r3, [r3, #0]
   b910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b910c:	9301      	str	r3, [sp, #4]
   b910e:	bd08      	pop	{r3, pc}
   b9110:	00030264 	.word	0x00030264

000b9114 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b9114:	b508      	push	{r3, lr}
   b9116:	4b02      	ldr	r3, [pc, #8]	; (b9120 <inet_htons+0xc>)
   b9118:	681b      	ldr	r3, [r3, #0]
   b911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b911c:	9301      	str	r3, [sp, #4]
   b911e:	bd08      	pop	{r3, pc}
   b9120:	00030264 	.word	0x00030264

000b9124 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9124:	b508      	push	{r3, lr}
   b9126:	4b02      	ldr	r3, [pc, #8]	; (b9130 <hal_usart_write+0xc>)
   b9128:	681b      	ldr	r3, [r3, #0]
   b912a:	68db      	ldr	r3, [r3, #12]
   b912c:	9301      	str	r3, [sp, #4]
   b912e:	bd08      	pop	{r3, pc}
   b9130:	0003023c 	.word	0x0003023c

000b9134 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9134:	b508      	push	{r3, lr}
   b9136:	4b02      	ldr	r3, [pc, #8]	; (b9140 <hal_usart_available+0xc>)
   b9138:	681b      	ldr	r3, [r3, #0]
   b913a:	691b      	ldr	r3, [r3, #16]
   b913c:	9301      	str	r3, [sp, #4]
   b913e:	bd08      	pop	{r3, pc}
   b9140:	0003023c 	.word	0x0003023c

000b9144 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9144:	b508      	push	{r3, lr}
   b9146:	4b02      	ldr	r3, [pc, #8]	; (b9150 <hal_usart_read+0xc>)
   b9148:	681b      	ldr	r3, [r3, #0]
   b914a:	695b      	ldr	r3, [r3, #20]
   b914c:	9301      	str	r3, [sp, #4]
   b914e:	bd08      	pop	{r3, pc}
   b9150:	0003023c 	.word	0x0003023c

000b9154 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9154:	b508      	push	{r3, lr}
   b9156:	4b02      	ldr	r3, [pc, #8]	; (b9160 <hal_usart_peek+0xc>)
   b9158:	681b      	ldr	r3, [r3, #0]
   b915a:	699b      	ldr	r3, [r3, #24]
   b915c:	9301      	str	r3, [sp, #4]
   b915e:	bd08      	pop	{r3, pc}
   b9160:	0003023c 	.word	0x0003023c

000b9164 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9164:	b508      	push	{r3, lr}
   b9166:	4b02      	ldr	r3, [pc, #8]	; (b9170 <hal_usart_flush+0xc>)
   b9168:	681b      	ldr	r3, [r3, #0]
   b916a:	69db      	ldr	r3, [r3, #28]
   b916c:	9301      	str	r3, [sp, #4]
   b916e:	bd08      	pop	{r3, pc}
   b9170:	0003023c 	.word	0x0003023c

000b9174 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9174:	b508      	push	{r3, lr}
   b9176:	4b02      	ldr	r3, [pc, #8]	; (b9180 <hal_usart_is_enabled+0xc>)
   b9178:	681b      	ldr	r3, [r3, #0]
   b917a:	6a1b      	ldr	r3, [r3, #32]
   b917c:	9301      	str	r3, [sp, #4]
   b917e:	bd08      	pop	{r3, pc}
   b9180:	0003023c 	.word	0x0003023c

000b9184 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9184:	b508      	push	{r3, lr}
   b9186:	4b02      	ldr	r3, [pc, #8]	; (b9190 <hal_usart_available_data_for_write+0xc>)
   b9188:	681b      	ldr	r3, [r3, #0]
   b918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b918c:	9301      	str	r3, [sp, #4]
   b918e:	bd08      	pop	{r3, pc}
   b9190:	0003023c 	.word	0x0003023c

000b9194 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9194:	b508      	push	{r3, lr}
   b9196:	4b02      	ldr	r3, [pc, #8]	; (b91a0 <hal_usart_init_ex+0xc>)
   b9198:	681b      	ldr	r3, [r3, #0]
   b919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b919c:	9301      	str	r3, [sp, #4]
   b919e:	bd08      	pop	{r3, pc}
   b91a0:	0003023c 	.word	0x0003023c

000b91a4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b91a4:	b508      	push	{r3, lr}
   b91a6:	4b02      	ldr	r3, [pc, #8]	; (b91b0 <hal_i2c_write+0xc>)
   b91a8:	681b      	ldr	r3, [r3, #0]
   b91aa:	6a1b      	ldr	r3, [r3, #32]
   b91ac:	9301      	str	r3, [sp, #4]
   b91ae:	bd08      	pop	{r3, pc}
   b91b0:	00030228 	.word	0x00030228

000b91b4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b91b4:	b508      	push	{r3, lr}
   b91b6:	4b02      	ldr	r3, [pc, #8]	; (b91c0 <hal_i2c_available+0xc>)
   b91b8:	681b      	ldr	r3, [r3, #0]
   b91ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b91bc:	9301      	str	r3, [sp, #4]
   b91be:	bd08      	pop	{r3, pc}
   b91c0:	00030228 	.word	0x00030228

000b91c4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b91c4:	b508      	push	{r3, lr}
   b91c6:	4b02      	ldr	r3, [pc, #8]	; (b91d0 <hal_i2c_read+0xc>)
   b91c8:	681b      	ldr	r3, [r3, #0]
   b91ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b91cc:	9301      	str	r3, [sp, #4]
   b91ce:	bd08      	pop	{r3, pc}
   b91d0:	00030228 	.word	0x00030228

000b91d4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b91d4:	b508      	push	{r3, lr}
   b91d6:	4b02      	ldr	r3, [pc, #8]	; (b91e0 <hal_i2c_peek+0xc>)
   b91d8:	681b      	ldr	r3, [r3, #0]
   b91da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b91dc:	9301      	str	r3, [sp, #4]
   b91de:	bd08      	pop	{r3, pc}
   b91e0:	00030228 	.word	0x00030228

000b91e4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b91e4:	b508      	push	{r3, lr}
   b91e6:	4b02      	ldr	r3, [pc, #8]	; (b91f0 <hal_i2c_flush+0xc>)
   b91e8:	681b      	ldr	r3, [r3, #0]
   b91ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b91ec:	9301      	str	r3, [sp, #4]
   b91ee:	bd08      	pop	{r3, pc}
   b91f0:	00030228 	.word	0x00030228

000b91f4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b91f4:	b508      	push	{r3, lr}
   b91f6:	4b02      	ldr	r3, [pc, #8]	; (b9200 <hal_i2c_is_enabled+0xc>)
   b91f8:	681b      	ldr	r3, [r3, #0]
   b91fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b91fc:	9301      	str	r3, [sp, #4]
   b91fe:	bd08      	pop	{r3, pc}
   b9200:	00030228 	.word	0x00030228

000b9204 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b9204:	b508      	push	{r3, lr}
   b9206:	4b02      	ldr	r3, [pc, #8]	; (b9210 <hal_i2c_init+0xc>)
   b9208:	681b      	ldr	r3, [r3, #0]
   b920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b920c:	9301      	str	r3, [sp, #4]
   b920e:	bd08      	pop	{r3, pc}
   b9210:	00030228 	.word	0x00030228

000b9214 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b9214:	b508      	push	{r3, lr}
   b9216:	4b02      	ldr	r3, [pc, #8]	; (b9220 <sock_bind+0xc>)
   b9218:	681b      	ldr	r3, [r3, #0]
   b921a:	685b      	ldr	r3, [r3, #4]
   b921c:	9301      	str	r3, [sp, #4]
   b921e:	bd08      	pop	{r3, pc}
   b9220:	00030238 	.word	0x00030238

000b9224 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b9224:	b508      	push	{r3, lr}
   b9226:	4b02      	ldr	r3, [pc, #8]	; (b9230 <sock_setsockopt+0xc>)
   b9228:	681b      	ldr	r3, [r3, #0]
   b922a:	699b      	ldr	r3, [r3, #24]
   b922c:	9301      	str	r3, [sp, #4]
   b922e:	bd08      	pop	{r3, pc}
   b9230:	00030238 	.word	0x00030238

000b9234 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b9234:	b508      	push	{r3, lr}
   b9236:	4b02      	ldr	r3, [pc, #8]	; (b9240 <sock_close+0xc>)
   b9238:	681b      	ldr	r3, [r3, #0]
   b923a:	69db      	ldr	r3, [r3, #28]
   b923c:	9301      	str	r3, [sp, #4]
   b923e:	bd08      	pop	{r3, pc}
   b9240:	00030238 	.word	0x00030238

000b9244 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b9244:	b508      	push	{r3, lr}
   b9246:	4b02      	ldr	r3, [pc, #8]	; (b9250 <sock_connect+0xc>)
   b9248:	681b      	ldr	r3, [r3, #0]
   b924a:	6a1b      	ldr	r3, [r3, #32]
   b924c:	9301      	str	r3, [sp, #4]
   b924e:	bd08      	pop	{r3, pc}
   b9250:	00030238 	.word	0x00030238

000b9254 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b9254:	b508      	push	{r3, lr}
   b9256:	4b02      	ldr	r3, [pc, #8]	; (b9260 <sock_recv+0xc>)
   b9258:	681b      	ldr	r3, [r3, #0]
   b925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b925c:	9301      	str	r3, [sp, #4]
   b925e:	bd08      	pop	{r3, pc}
   b9260:	00030238 	.word	0x00030238

000b9264 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b9264:	b508      	push	{r3, lr}
   b9266:	4b02      	ldr	r3, [pc, #8]	; (b9270 <sock_recvfrom+0xc>)
   b9268:	681b      	ldr	r3, [r3, #0]
   b926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b926c:	9301      	str	r3, [sp, #4]
   b926e:	bd08      	pop	{r3, pc}
   b9270:	00030238 	.word	0x00030238

000b9274 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b9274:	b508      	push	{r3, lr}
   b9276:	4b02      	ldr	r3, [pc, #8]	; (b9280 <sock_send+0xc>)
   b9278:	681b      	ldr	r3, [r3, #0]
   b927a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b927c:	9301      	str	r3, [sp, #4]
   b927e:	bd08      	pop	{r3, pc}
   b9280:	00030238 	.word	0x00030238

000b9284 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b9284:	b508      	push	{r3, lr}
   b9286:	4b02      	ldr	r3, [pc, #8]	; (b9290 <sock_sendto+0xc>)
   b9288:	681b      	ldr	r3, [r3, #0]
   b928a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b928c:	9301      	str	r3, [sp, #4]
   b928e:	bd08      	pop	{r3, pc}
   b9290:	00030238 	.word	0x00030238

000b9294 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b9294:	b508      	push	{r3, lr}
   b9296:	4b02      	ldr	r3, [pc, #8]	; (b92a0 <sock_socket+0xc>)
   b9298:	681b      	ldr	r3, [r3, #0]
   b929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b929c:	9301      	str	r3, [sp, #4]
   b929e:	bd08      	pop	{r3, pc}
   b92a0:	00030238 	.word	0x00030238

000b92a4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b92a4:	b508      	push	{r3, lr}
   b92a6:	4b02      	ldr	r3, [pc, #8]	; (b92b0 <hal_spi_init+0xc>)
   b92a8:	681b      	ldr	r3, [r3, #0]
   b92aa:	69db      	ldr	r3, [r3, #28]
   b92ac:	9301      	str	r3, [sp, #4]
   b92ae:	bd08      	pop	{r3, pc}
   b92b0:	00030230 	.word	0x00030230

000b92b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b92b4:	b508      	push	{r3, lr}
   b92b6:	4b02      	ldr	r3, [pc, #8]	; (b92c0 <hal_spi_is_enabled+0xc>)
   b92b8:	681b      	ldr	r3, [r3, #0]
   b92ba:	6a1b      	ldr	r3, [r3, #32]
   b92bc:	9301      	str	r3, [sp, #4]
   b92be:	bd08      	pop	{r3, pc}
   b92c0:	00030230 	.word	0x00030230

000b92c4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b92c4:	b508      	push	{r3, lr}
   b92c6:	4b02      	ldr	r3, [pc, #8]	; (b92d0 <HAL_USB_USART_Init+0xc>)
   b92c8:	681b      	ldr	r3, [r3, #0]
   b92ca:	681b      	ldr	r3, [r3, #0]
   b92cc:	9301      	str	r3, [sp, #4]
   b92ce:	bd08      	pop	{r3, pc}
   b92d0:	0003024c 	.word	0x0003024c

000b92d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b92d4:	b508      	push	{r3, lr}
   b92d6:	4b02      	ldr	r3, [pc, #8]	; (b92e0 <HAL_USB_USART_Available_Data+0xc>)
   b92d8:	681b      	ldr	r3, [r3, #0]
   b92da:	691b      	ldr	r3, [r3, #16]
   b92dc:	9301      	str	r3, [sp, #4]
   b92de:	bd08      	pop	{r3, pc}
   b92e0:	0003024c 	.word	0x0003024c

000b92e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b92e4:	b508      	push	{r3, lr}
   b92e6:	4b02      	ldr	r3, [pc, #8]	; (b92f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b92e8:	681b      	ldr	r3, [r3, #0]
   b92ea:	695b      	ldr	r3, [r3, #20]
   b92ec:	9301      	str	r3, [sp, #4]
   b92ee:	bd08      	pop	{r3, pc}
   b92f0:	0003024c 	.word	0x0003024c

000b92f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b92f4:	b508      	push	{r3, lr}
   b92f6:	4b02      	ldr	r3, [pc, #8]	; (b9300 <HAL_USB_USART_Receive_Data+0xc>)
   b92f8:	681b      	ldr	r3, [r3, #0]
   b92fa:	699b      	ldr	r3, [r3, #24]
   b92fc:	9301      	str	r3, [sp, #4]
   b92fe:	bd08      	pop	{r3, pc}
   b9300:	0003024c 	.word	0x0003024c

000b9304 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9304:	b508      	push	{r3, lr}
   b9306:	4b02      	ldr	r3, [pc, #8]	; (b9310 <HAL_USB_USART_Send_Data+0xc>)
   b9308:	681b      	ldr	r3, [r3, #0]
   b930a:	69db      	ldr	r3, [r3, #28]
   b930c:	9301      	str	r3, [sp, #4]
   b930e:	bd08      	pop	{r3, pc}
   b9310:	0003024c 	.word	0x0003024c

000b9314 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9314:	b508      	push	{r3, lr}
   b9316:	4b02      	ldr	r3, [pc, #8]	; (b9320 <HAL_USB_USART_Flush_Data+0xc>)
   b9318:	681b      	ldr	r3, [r3, #0]
   b931a:	6a1b      	ldr	r3, [r3, #32]
   b931c:	9301      	str	r3, [sp, #4]
   b931e:	bd08      	pop	{r3, pc}
   b9320:	0003024c 	.word	0x0003024c

000b9324 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b9324:	b508      	push	{r3, lr}
   b9326:	4b02      	ldr	r3, [pc, #8]	; (b9330 <wlan_connected_info+0xc>)
   b9328:	681b      	ldr	r3, [r3, #0]
   b932a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b932c:	9301      	str	r3, [sp, #4]
   b932e:	bd08      	pop	{r3, pc}
   b9330:	00030274 	.word	0x00030274

000b9334 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9334:	b508      	push	{r3, lr}
   b9336:	4b02      	ldr	r3, [pc, #8]	; (b9340 <panic_+0xc>)
   b9338:	681b      	ldr	r3, [r3, #0]
   b933a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b933c:	9301      	str	r3, [sp, #4]
   b933e:	bd08      	pop	{r3, pc}
   b9340:	00030260 	.word	0x00030260

000b9344 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9344:	b508      	push	{r3, lr}
   b9346:	4b02      	ldr	r3, [pc, #8]	; (b9350 <log_message+0xc>)
   b9348:	681b      	ldr	r3, [r3, #0]
   b934a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b934c:	9301      	str	r3, [sp, #4]
   b934e:	bd08      	pop	{r3, pc}
   b9350:	00030260 	.word	0x00030260

000b9354 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9354:	b508      	push	{r3, lr}
   b9356:	4b02      	ldr	r3, [pc, #8]	; (b9360 <system_mode+0xc>)
   b9358:	681b      	ldr	r3, [r3, #0]
   b935a:	681b      	ldr	r3, [r3, #0]
   b935c:	9301      	str	r3, [sp, #4]
   b935e:	bd08      	pop	{r3, pc}
   b9360:	00030220 	.word	0x00030220

000b9364 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9364:	b508      	push	{r3, lr}
   b9366:	4b02      	ldr	r3, [pc, #8]	; (b9370 <set_system_mode+0xc>)
   b9368:	681b      	ldr	r3, [r3, #0]
   b936a:	685b      	ldr	r3, [r3, #4]
   b936c:	9301      	str	r3, [sp, #4]
   b936e:	bd08      	pop	{r3, pc}
   b9370:	00030220 	.word	0x00030220

000b9374 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9374:	b508      	push	{r3, lr}
   b9376:	4b02      	ldr	r3, [pc, #8]	; (b9380 <system_delay_ms+0xc>)
   b9378:	681b      	ldr	r3, [r3, #0]
   b937a:	695b      	ldr	r3, [r3, #20]
   b937c:	9301      	str	r3, [sp, #4]
   b937e:	bd08      	pop	{r3, pc}
   b9380:	00030220 	.word	0x00030220

000b9384 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b9384:	b508      	push	{r3, lr}
   b9386:	4b02      	ldr	r3, [pc, #8]	; (b9390 <system_thread_set_state+0xc>)
   b9388:	681b      	ldr	r3, [r3, #0]
   b938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b938c:	9301      	str	r3, [sp, #4]
   b938e:	bd08      	pop	{r3, pc}
   b9390:	00030220 	.word	0x00030220

000b9394 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b9394:	b508      	push	{r3, lr}
   b9396:	4b02      	ldr	r3, [pc, #8]	; (b93a0 <application_thread_current+0xc>)
   b9398:	681b      	ldr	r3, [r3, #0]
   b939a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b939c:	9301      	str	r3, [sp, #4]
   b939e:	bd08      	pop	{r3, pc}
   b93a0:	00030220 	.word	0x00030220

000b93a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b93a4:	b508      	push	{r3, lr}
   b93a6:	4b02      	ldr	r3, [pc, #8]	; (b93b0 <application_thread_invoke+0xc>)
   b93a8:	681b      	ldr	r3, [r3, #0]
   b93aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b93ac:	9301      	str	r3, [sp, #4]
   b93ae:	bd08      	pop	{r3, pc}
   b93b0:	00030220 	.word	0x00030220

000b93b4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b93b4:	b508      	push	{r3, lr}
   b93b6:	4b02      	ldr	r3, [pc, #8]	; (b93c0 <system_thread_get_state+0xc>)
   b93b8:	681b      	ldr	r3, [r3, #0]
   b93ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b93bc:	9301      	str	r3, [sp, #4]
   b93be:	bd08      	pop	{r3, pc}
   b93c0:	00030220 	.word	0x00030220

000b93c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b93c4:	b508      	push	{r3, lr}
   b93c6:	4b03      	ldr	r3, [pc, #12]	; (b93d4 <system_ctrl_set_app_request_handler+0x10>)
   b93c8:	681b      	ldr	r3, [r3, #0]
   b93ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b93ce:	9301      	str	r3, [sp, #4]
   b93d0:	bd08      	pop	{r3, pc}
   b93d2:	0000      	.short	0x0000
   b93d4:	00030220 	.word	0x00030220

000b93d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b93d8:	b508      	push	{r3, lr}
   b93da:	4b03      	ldr	r3, [pc, #12]	; (b93e8 <system_ctrl_set_result+0x10>)
   b93dc:	681b      	ldr	r3, [r3, #0]
   b93de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b93e2:	9301      	str	r3, [sp, #4]
   b93e4:	bd08      	pop	{r3, pc}
   b93e6:	0000      	.short	0x0000
   b93e8:	00030220 	.word	0x00030220

000b93ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b93ec:	b508      	push	{r3, lr}
   b93ee:	4b02      	ldr	r3, [pc, #8]	; (b93f8 <network_connect+0xc>)
   b93f0:	681b      	ldr	r3, [r3, #0]
   b93f2:	685b      	ldr	r3, [r3, #4]
   b93f4:	9301      	str	r3, [sp, #4]
   b93f6:	bd08      	pop	{r3, pc}
   b93f8:	00030240 	.word	0x00030240

000b93fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b93fc:	b508      	push	{r3, lr}
   b93fe:	4b02      	ldr	r3, [pc, #8]	; (b9408 <network_connecting+0xc>)
   b9400:	681b      	ldr	r3, [r3, #0]
   b9402:	689b      	ldr	r3, [r3, #8]
   b9404:	9301      	str	r3, [sp, #4]
   b9406:	bd08      	pop	{r3, pc}
   b9408:	00030240 	.word	0x00030240

000b940c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b940c:	b508      	push	{r3, lr}
   b940e:	4b02      	ldr	r3, [pc, #8]	; (b9418 <network_disconnect+0xc>)
   b9410:	681b      	ldr	r3, [r3, #0]
   b9412:	68db      	ldr	r3, [r3, #12]
   b9414:	9301      	str	r3, [sp, #4]
   b9416:	bd08      	pop	{r3, pc}
   b9418:	00030240 	.word	0x00030240

000b941c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b941c:	b508      	push	{r3, lr}
   b941e:	4b02      	ldr	r3, [pc, #8]	; (b9428 <network_ready+0xc>)
   b9420:	681b      	ldr	r3, [r3, #0]
   b9422:	691b      	ldr	r3, [r3, #16]
   b9424:	9301      	str	r3, [sp, #4]
   b9426:	bd08      	pop	{r3, pc}
   b9428:	00030240 	.word	0x00030240

000b942c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b942c:	b508      	push	{r3, lr}
   b942e:	4b02      	ldr	r3, [pc, #8]	; (b9438 <network_on+0xc>)
   b9430:	681b      	ldr	r3, [r3, #0]
   b9432:	695b      	ldr	r3, [r3, #20]
   b9434:	9301      	str	r3, [sp, #4]
   b9436:	bd08      	pop	{r3, pc}
   b9438:	00030240 	.word	0x00030240

000b943c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b943c:	b508      	push	{r3, lr}
   b943e:	4b02      	ldr	r3, [pc, #8]	; (b9448 <network_off+0xc>)
   b9440:	681b      	ldr	r3, [r3, #0]
   b9442:	699b      	ldr	r3, [r3, #24]
   b9444:	9301      	str	r3, [sp, #4]
   b9446:	bd08      	pop	{r3, pc}
   b9448:	00030240 	.word	0x00030240

000b944c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b944c:	b508      	push	{r3, lr}
   b944e:	4b02      	ldr	r3, [pc, #8]	; (b9458 <network_listen+0xc>)
   b9450:	681b      	ldr	r3, [r3, #0]
   b9452:	69db      	ldr	r3, [r3, #28]
   b9454:	9301      	str	r3, [sp, #4]
   b9456:	bd08      	pop	{r3, pc}
   b9458:	00030240 	.word	0x00030240

000b945c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b945c:	b508      	push	{r3, lr}
   b945e:	4b02      	ldr	r3, [pc, #8]	; (b9468 <network_listening+0xc>)
   b9460:	681b      	ldr	r3, [r3, #0]
   b9462:	6a1b      	ldr	r3, [r3, #32]
   b9464:	9301      	str	r3, [sp, #4]
   b9466:	bd08      	pop	{r3, pc}
   b9468:	00030240 	.word	0x00030240

000b946c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b946c:	b508      	push	{r3, lr}
   b946e:	4b02      	ldr	r3, [pc, #8]	; (b9478 <network_set_listen_timeout+0xc>)
   b9470:	681b      	ldr	r3, [r3, #0]
   b9472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9474:	9301      	str	r3, [sp, #4]
   b9476:	bd08      	pop	{r3, pc}
   b9478:	00030240 	.word	0x00030240

000b947c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b947c:	b508      	push	{r3, lr}
   b947e:	4b02      	ldr	r3, [pc, #8]	; (b9488 <network_get_listen_timeout+0xc>)
   b9480:	681b      	ldr	r3, [r3, #0]
   b9482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9484:	9301      	str	r3, [sp, #4]
   b9486:	bd08      	pop	{r3, pc}
   b9488:	00030240 	.word	0x00030240

000b948c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b948c:	b508      	push	{r3, lr}
   b948e:	4b02      	ldr	r3, [pc, #8]	; (b9498 <network_is_on+0xc>)
   b9490:	681b      	ldr	r3, [r3, #0]
   b9492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9494:	9301      	str	r3, [sp, #4]
   b9496:	bd08      	pop	{r3, pc}
   b9498:	00030240 	.word	0x00030240

000b949c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b949c:	b508      	push	{r3, lr}
   b949e:	4b02      	ldr	r3, [pc, #8]	; (b94a8 <network_is_off+0xc>)
   b94a0:	681b      	ldr	r3, [r3, #0]
   b94a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b94a4:	9301      	str	r3, [sp, #4]
   b94a6:	bd08      	pop	{r3, pc}
   b94a8:	00030240 	.word	0x00030240

000b94ac <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b94ac:	b508      	push	{r3, lr}
   b94ae:	4b02      	ldr	r3, [pc, #8]	; (b94b8 <spark_process+0xc>)
   b94b0:	681b      	ldr	r3, [r3, #0]
   b94b2:	689b      	ldr	r3, [r3, #8]
   b94b4:	9301      	str	r3, [sp, #4]
   b94b6:	bd08      	pop	{r3, pc}
   b94b8:	00030244 	.word	0x00030244

000b94bc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b94bc:	b508      	push	{r3, lr}
   b94be:	4b02      	ldr	r3, [pc, #8]	; (b94c8 <spark_cloud_flag_connected+0xc>)
   b94c0:	681b      	ldr	r3, [r3, #0]
   b94c2:	695b      	ldr	r3, [r3, #20]
   b94c4:	9301      	str	r3, [sp, #4]
   b94c6:	bd08      	pop	{r3, pc}
   b94c8:	00030244 	.word	0x00030244

000b94cc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b94cc:	b508      	push	{r3, lr}
   b94ce:	4b02      	ldr	r3, [pc, #8]	; (b94d8 <spark_send_event+0xc>)
   b94d0:	681b      	ldr	r3, [r3, #0]
   b94d2:	6a1b      	ldr	r3, [r3, #32]
   b94d4:	9301      	str	r3, [sp, #4]
   b94d6:	bd08      	pop	{r3, pc}
   b94d8:	00030244 	.word	0x00030244

000b94dc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b94dc:	b508      	push	{r3, lr}
   b94de:	4b02      	ldr	r3, [pc, #8]	; (b94e8 <spark_subscribe+0xc>)
   b94e0:	681b      	ldr	r3, [r3, #0]
   b94e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b94e4:	9301      	str	r3, [sp, #4]
   b94e6:	bd08      	pop	{r3, pc}
   b94e8:	00030244 	.word	0x00030244

000b94ec <spark_unsubscribe>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
   b94ec:	b508      	push	{r3, lr}
   b94ee:	4b02      	ldr	r3, [pc, #8]	; (b94f8 <spark_unsubscribe+0xc>)
   b94f0:	681b      	ldr	r3, [r3, #0]
   b94f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b94f4:	9301      	str	r3, [sp, #4]
   b94f6:	bd08      	pop	{r3, pc}
   b94f8:	00030244 	.word	0x00030244

000b94fc <spark_sync_time_pending>:
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b94fc:	b508      	push	{r3, lr}
   b94fe:	4b02      	ldr	r3, [pc, #8]	; (b9508 <spark_sync_time_pending+0xc>)
   b9500:	681b      	ldr	r3, [r3, #0]
   b9502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9504:	9301      	str	r3, [sp, #4]
   b9506:	bd08      	pop	{r3, pc}
   b9508:	00030244 	.word	0x00030244

000b950c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b950c:	b508      	push	{r3, lr}
   b950e:	4b02      	ldr	r3, [pc, #8]	; (b9518 <spark_set_random_seed_from_cloud_handler+0xc>)
   b9510:	681b      	ldr	r3, [r3, #0]
   b9512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9514:	9301      	str	r3, [sp, #4]
   b9516:	bd08      	pop	{r3, pc}
   b9518:	00030244 	.word	0x00030244

000b951c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b951c:	b508      	push	{r3, lr}
   b951e:	4b02      	ldr	r3, [pc, #8]	; (b9528 <malloc+0xc>)
   b9520:	681b      	ldr	r3, [r3, #0]
   b9522:	681b      	ldr	r3, [r3, #0]
   b9524:	9301      	str	r3, [sp, #4]
   b9526:	bd08      	pop	{r3, pc}
   b9528:	0003021c 	.word	0x0003021c

000b952c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b952c:	b508      	push	{r3, lr}
   b952e:	4b02      	ldr	r3, [pc, #8]	; (b9538 <free+0xc>)
   b9530:	681b      	ldr	r3, [r3, #0]
   b9532:	685b      	ldr	r3, [r3, #4]
   b9534:	9301      	str	r3, [sp, #4]
   b9536:	bd08      	pop	{r3, pc}
   b9538:	0003021c 	.word	0x0003021c

000b953c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b953c:	b508      	push	{r3, lr}
   b953e:	4b02      	ldr	r3, [pc, #8]	; (b9548 <realloc+0xc>)
   b9540:	681b      	ldr	r3, [r3, #0]
   b9542:	689b      	ldr	r3, [r3, #8]
   b9544:	9301      	str	r3, [sp, #4]
   b9546:	bd08      	pop	{r3, pc}
   b9548:	0003021c 	.word	0x0003021c

000b954c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b954c:	b508      	push	{r3, lr}
   b954e:	4b02      	ldr	r3, [pc, #8]	; (b9558 <sprintf+0xc>)
   b9550:	681b      	ldr	r3, [r3, #0]
   b9552:	68db      	ldr	r3, [r3, #12]
   b9554:	9301      	str	r3, [sp, #4]
   b9556:	bd08      	pop	{r3, pc}
   b9558:	0003021c 	.word	0x0003021c

000b955c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b955c:	b508      	push	{r3, lr}
   b955e:	4b02      	ldr	r3, [pc, #8]	; (b9568 <siprintf+0xc>)
   b9560:	681b      	ldr	r3, [r3, #0]
   b9562:	691b      	ldr	r3, [r3, #16]
   b9564:	9301      	str	r3, [sp, #4]
   b9566:	bd08      	pop	{r3, pc}
   b9568:	0003021c 	.word	0x0003021c

000b956c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b956c:	b508      	push	{r3, lr}
   b956e:	4b02      	ldr	r3, [pc, #8]	; (b9578 <sscanf+0xc>)
   b9570:	681b      	ldr	r3, [r3, #0]
   b9572:	695b      	ldr	r3, [r3, #20]
   b9574:	9301      	str	r3, [sp, #4]
   b9576:	bd08      	pop	{r3, pc}
   b9578:	0003021c 	.word	0x0003021c

000b957c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b957c:	b508      	push	{r3, lr}
   b957e:	4b02      	ldr	r3, [pc, #8]	; (b9588 <snprintf+0xc>)
   b9580:	681b      	ldr	r3, [r3, #0]
   b9582:	69db      	ldr	r3, [r3, #28]
   b9584:	9301      	str	r3, [sp, #4]
   b9586:	bd08      	pop	{r3, pc}
   b9588:	0003021c 	.word	0x0003021c

000b958c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b958c:	b508      	push	{r3, lr}
   b958e:	4b02      	ldr	r3, [pc, #8]	; (b9598 <vsnprintf+0xc>)
   b9590:	681b      	ldr	r3, [r3, #0]
   b9592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9594:	9301      	str	r3, [sp, #4]
   b9596:	bd08      	pop	{r3, pc}
   b9598:	0003021c 	.word	0x0003021c

000b959c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b959c:	b508      	push	{r3, lr}
   b959e:	4b02      	ldr	r3, [pc, #8]	; (b95a8 <abort+0xc>)
   b95a0:	681b      	ldr	r3, [r3, #0]
   b95a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b95a4:	9301      	str	r3, [sp, #4]
   b95a6:	bd08      	pop	{r3, pc}
   b95a8:	0003021c 	.word	0x0003021c

000b95ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b95ac:	b508      	push	{r3, lr}
   b95ae:	4b02      	ldr	r3, [pc, #8]	; (b95b8 <_malloc_r+0xc>)
   b95b0:	681b      	ldr	r3, [r3, #0]
   b95b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b95b4:	9301      	str	r3, [sp, #4]
   b95b6:	bd08      	pop	{r3, pc}
   b95b8:	0003021c 	.word	0x0003021c

000b95bc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b95bc:	b508      	push	{r3, lr}
   b95be:	4b02      	ldr	r3, [pc, #8]	; (b95c8 <__errno+0xc>)
   b95c0:	681b      	ldr	r3, [r3, #0]
   b95c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b95c4:	9301      	str	r3, [sp, #4]
   b95c6:	bd08      	pop	{r3, pc}
   b95c8:	0003021c 	.word	0x0003021c

000b95cc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b95cc:	b508      	push	{r3, lr}
   b95ce:	4b02      	ldr	r3, [pc, #8]	; (b95d8 <__assert_func+0xc>)
   b95d0:	681b      	ldr	r3, [r3, #0]
   b95d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b95d4:	9301      	str	r3, [sp, #4]
   b95d6:	bd08      	pop	{r3, pc}
   b95d8:	0003021c 	.word	0x0003021c

000b95dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b95dc:	b508      	push	{r3, lr}
   b95de:	4b02      	ldr	r3, [pc, #8]	; (b95e8 <newlib_impure_ptr_callback+0xc>)
   b95e0:	681b      	ldr	r3, [r3, #0]
   b95e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b95e4:	9301      	str	r3, [sp, #4]
   b95e6:	bd08      	pop	{r3, pc}
   b95e8:	0003021c 	.word	0x0003021c

000b95ec <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b95ec:	b508      	push	{r3, lr}
   b95ee:	4b02      	ldr	r3, [pc, #8]	; (b95f8 <strftime+0xc>)
   b95f0:	681b      	ldr	r3, [r3, #0]
   b95f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b95f4:	9301      	str	r3, [sp, #4]
   b95f6:	bd08      	pop	{r3, pc}
   b95f8:	0003021c 	.word	0x0003021c

000b95fc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b95fc:	b508      	push	{r3, lr}
   b95fe:	4b02      	ldr	r3, [pc, #8]	; (b9608 <localtime_r+0xc>)
   b9600:	681b      	ldr	r3, [r3, #0]
   b9602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9604:	9301      	str	r3, [sp, #4]
   b9606:	bd08      	pop	{r3, pc}
   b9608:	0003021c 	.word	0x0003021c

000b960c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b960c:	2200      	movs	r2, #0
   b960e:	6840      	ldr	r0, [r0, #4]
   b9610:	4611      	mov	r1, r2
   b9612:	f7ff bf23 	b.w	b945c <network_listening>

000b9616 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9616:	2200      	movs	r2, #0
   b9618:	6840      	ldr	r0, [r0, #4]
   b961a:	4611      	mov	r1, r2
   b961c:	f7ff bf2e 	b.w	b947c <network_get_listen_timeout>

000b9620 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9620:	6840      	ldr	r0, [r0, #4]
   b9622:	2200      	movs	r2, #0
   b9624:	f7ff bf22 	b.w	b946c <network_set_listen_timeout>

000b9628 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9628:	6840      	ldr	r0, [r0, #4]
   b962a:	2200      	movs	r2, #0
   b962c:	f081 0101 	eor.w	r1, r1, #1
   b9630:	f7ff bf0c 	b.w	b944c <network_listen>

000b9634 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9634:	2300      	movs	r3, #0
   b9636:	6840      	ldr	r0, [r0, #4]
   b9638:	461a      	mov	r2, r3
   b963a:	4619      	mov	r1, r3
   b963c:	f7ff befe 	b.w	b943c <network_off>

000b9640 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9640:	2300      	movs	r3, #0
   b9642:	6840      	ldr	r0, [r0, #4]
   b9644:	461a      	mov	r2, r3
   b9646:	4619      	mov	r1, r3
   b9648:	f7ff bef0 	b.w	b942c <network_on>

000b964c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b964c:	2200      	movs	r2, #0
   b964e:	6840      	ldr	r0, [r0, #4]
   b9650:	4611      	mov	r1, r2
   b9652:	f7ff bee3 	b.w	b941c <network_ready>

000b9656 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9656:	2200      	movs	r2, #0
   b9658:	6840      	ldr	r0, [r0, #4]
   b965a:	4611      	mov	r1, r2
   b965c:	f7ff bece 	b.w	b93fc <network_connecting>

000b9660 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9660:	6840      	ldr	r0, [r0, #4]
   b9662:	2200      	movs	r2, #0
   b9664:	2102      	movs	r1, #2
   b9666:	f7ff bed1 	b.w	b940c <network_disconnect>

000b966a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b966a:	2300      	movs	r3, #0
   b966c:	6840      	ldr	r0, [r0, #4]
   b966e:	461a      	mov	r2, r3
   b9670:	f7ff bebc 	b.w	b93ec <network_connect>

000b9674 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9674:	4b02      	ldr	r3, [pc, #8]	; (b9680 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9676:	2203      	movs	r2, #3
   b9678:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b967a:	4a02      	ldr	r2, [pc, #8]	; (b9684 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b967c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b967e:	4770      	bx	lr
   b9680:	2003e664 	.word	0x2003e664
   b9684:	000bffc8 	.word	0x000bffc8

000b9688 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b9688:	b510      	push	{r4, lr}
   b968a:	4604      	mov	r4, r0
   b968c:	4608      	mov	r0, r1
{
    _spi = spi;
   b968e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b9690:	f7ff fe08 	bl	b92a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b9694:	2300      	movs	r3, #0
   b9696:	6063      	str	r3, [r4, #4]
}
   b9698:	4620      	mov	r0, r4
   b969a:	bd10      	pop	{r4, pc}

000b969c <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b969c:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b969e:	2420      	movs	r4, #32
{
   b96a0:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b96a2:	4622      	mov	r2, r4
   b96a4:	2100      	movs	r1, #0
   b96a6:	4668      	mov	r0, sp
   b96a8:	f003 fe9d 	bl	bd3e6 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b96ac:	2100      	movs	r1, #0
   b96ae:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b96b0:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b96b4:	f7ff fbfc 	bl	b8eb0 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b96b8:	9801      	ldr	r0, [sp, #4]
   b96ba:	b008      	add	sp, #32
   b96bc:	bd10      	pop	{r4, pc}
	...

000b96c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b96c0:	4b05      	ldr	r3, [pc, #20]	; (b96d8 <_GLOBAL__sub_I_System+0x18>)
   b96c2:	2202      	movs	r2, #2
   b96c4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b96c6:	4b05      	ldr	r3, [pc, #20]	; (b96dc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b96c8:	4a05      	ldr	r2, [pc, #20]	; (b96e0 <_GLOBAL__sub_I_System+0x20>)
   b96ca:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b96cc:	2000      	movs	r0, #0
   b96ce:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b96d2:	f7ff be47 	b.w	b9364 <set_system_mode>
   b96d6:	bf00      	nop
   b96d8:	2003e678 	.word	0x2003e678
   b96dc:	2003e66c 	.word	0x2003e66c
   b96e0:	ffff0000 	.word	0xffff0000

000b96e4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b96e4:	b510      	push	{r4, lr}
   b96e6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b96e8:	f7fb f994 	bl	b4a14 <strlen>
   b96ec:	3801      	subs	r0, #1
   b96ee:	1823      	adds	r3, r4, r0
   b96f0:	4620      	mov	r0, r4
	while(i<j){
   b96f2:	4283      	cmp	r3, r0
   b96f4:	d906      	bls.n	b9704 <_Z11str_reversePc+0x20>
		c = *i;
   b96f6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b96f8:	7819      	ldrb	r1, [r3, #0]
   b96fa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b96fe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b9702:	e7f6      	b.n	b96f2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b9704:	bd10      	pop	{r4, pc}

000b9706 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b9706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b970a:	1e93      	subs	r3, r2, #2
{
   b970c:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b970e:	2b22      	cmp	r3, #34	; 0x22
   b9710:	f04f 0300 	mov.w	r3, #0
{
   b9714:	460d      	mov	r5, r1
   b9716:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b9718:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b971c:	d927      	bls.n	b976e <ltoa+0x68>

      if (10 == base && N < 0L)
   b971e:	2800      	cmp	r0, #0
   b9720:	da2a      	bge.n	b9778 <ltoa+0x72>
      {
            *head++ = '-';
   b9722:	462e      	mov	r6, r5
   b9724:	232d      	movs	r3, #45	; 0x2d
   b9726:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b972a:	4240      	negs	r0, r0
   b972c:	240a      	movs	r4, #10
      *tail-- = '\0';
   b972e:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b9732:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b9736:	4622      	mov	r2, r4
   b9738:	4601      	mov	r1, r0
   b973a:	a801      	add	r0, sp, #4
   b973c:	f003 fe07 	bl	bd34e <ldiv>
   b9740:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b9742:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b9744:	2b09      	cmp	r3, #9
   b9746:	bfcc      	ite	gt
   b9748:	2237      	movgt	r2, #55	; 0x37
   b974a:	2230      	movle	r2, #48	; 0x30
   b974c:	fa52 f383 	uxtab	r3, r2, r3
   b9750:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b9754:	f108 0801 	add.w	r8, r8, #1
   b9758:	2800      	cmp	r0, #0
   b975a:	d1ec      	bne.n	b9736 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b975c:	4642      	mov	r2, r8
   b975e:	1c79      	adds	r1, r7, #1
   b9760:	4630      	mov	r0, r6
   b9762:	f003 fe18 	bl	bd396 <memcpy>
      return str;
}
   b9766:	4628      	mov	r0, r5
   b9768:	b00c      	add	sp, #48	; 0x30
   b976a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b976e:	2a0a      	cmp	r2, #10
   b9770:	d0d5      	beq.n	b971e <ltoa+0x18>
      if (uarg)
   b9772:	b118      	cbz	r0, b977c <ltoa+0x76>
   b9774:	462e      	mov	r6, r5
   b9776:	e7da      	b.n	b972e <ltoa+0x28>
   b9778:	240a      	movs	r4, #10
   b977a:	e7fa      	b.n	b9772 <ltoa+0x6c>
      else  *tail-- = '0';
   b977c:	2330      	movs	r3, #48	; 0x30
   b977e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b9782:	462e      	mov	r6, r5
   b9784:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b9788:	f04f 0802 	mov.w	r8, #2
   b978c:	e7e6      	b.n	b975c <ltoa+0x56>

000b978e <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b978e:	b570      	push	{r4, r5, r6, lr}
   b9790:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9792:	1e91      	subs	r1, r2, #2
   b9794:	2922      	cmp	r1, #34	; 0x22
   b9796:	d81d      	bhi.n	b97d4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9798:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b979a:	b930      	cbnz	r0, b97aa <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b979c:	4423      	add	r3, r4
            *ptr++ = '0';
   b979e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b97a0:	429d      	cmp	r5, r3
   b97a2:	d210      	bcs.n	b97c6 <ultoa+0x38>
            *ptr++ = '0';
   b97a4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b97a8:	e7fa      	b.n	b97a0 <ultoa+0x12>
            result.quot = a/radix;
   b97aa:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b97ae:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b97b2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b97b4:	2809      	cmp	r0, #9
                *ptr += '0';
   b97b6:	bf94      	ite	ls
   b97b8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b97ba:	3157      	addhi	r1, #87	; 0x57
   b97bc:	b2c9      	uxtb	r1, r1
   b97be:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b97c2:	4630      	mov	r0, r6
	while(a){
   b97c4:	e7e9      	b.n	b979a <ultoa+0xc>

	*ptr = '\0';
   b97c6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b97c8:	4620      	mov	r0, r4
	*ptr = '\0';
   b97ca:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b97cc:	f7ff ff8a 	bl	b96e4 <_Z11str_reversePc>
	return buffer;
   b97d0:	4620      	mov	r0, r4
}
   b97d2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b97d4:	2000      	movs	r0, #0
   b97d6:	e7fc      	b.n	b97d2 <ultoa+0x44>

000b97d8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b97d8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b97da:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b97dc:	460c      	mov	r4, r1
   b97de:	4615      	mov	r5, r2
	if(a<0){
   b97e0:	da0e      	bge.n	b9800 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b97e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b97e6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b97ea:	bf14      	ite	ne
   b97ec:	4258      	negne	r0, r3
   b97ee:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b97f0:	2301      	movs	r3, #1
		*buffer = '-';
   b97f2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b97f4:	462a      	mov	r2, r5
   b97f6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b97f8:	f7ff ffc9 	bl	b978e <ultoa>
	}
	return buffer;
}
   b97fc:	4620      	mov	r0, r4
   b97fe:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9800:	2301      	movs	r3, #1
   b9802:	e7f9      	b.n	b97f8 <itoa+0x20>

000b9804 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b9804:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b9806:	6804      	ldr	r4, [r0, #0]
   b9808:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b980a:	46a4      	mov	ip, r4
    }
   b980c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b9810:	4760      	bx	ip

000b9812 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b9812:	6803      	ldr	r3, [r0, #0]
   b9814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b9816:	4718      	bx	r3

000b9818 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b9818:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b981a:	4770      	bx	lr

000b981c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b981c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b981e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b9820:	1a10      	subs	r0, r2, r0
   b9822:	4770      	bx	lr

000b9824 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b9824:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b9826:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b9828:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b982a:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b982c:	4b0c      	ldr	r3, [pc, #48]	; (b9860 <_ZN3UDP9endPacketEv+0x3c>)
   b982e:	9302      	str	r3, [sp, #8]
   b9830:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b9834:	4604      	mov	r4, r0
   b9836:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9838:	ad03      	add	r5, sp, #12
   b983a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b983c:	6833      	ldr	r3, [r6, #0]
   b983e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b9840:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b9842:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b9844:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b9846:	9300      	str	r3, [sp, #0]
   b9848:	4620      	mov	r0, r4
   b984a:	ab02      	add	r3, sp, #8
   b984c:	47b8      	blx	r7
    flush(); // wait for send to complete
   b984e:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b9850:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b9852:	69db      	ldr	r3, [r3, #28]
   b9854:	4620      	mov	r0, r4
   b9856:	4798      	blx	r3
    return result;
}
   b9858:	4628      	mov	r0, r5
   b985a:	b009      	add	sp, #36	; 0x24
   b985c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b985e:	bf00      	nop
   b9860:	000c027c 	.word	0x000c027c

000b9864 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b9864:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b9866:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b9868:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b986c:	68db      	ldr	r3, [r3, #12]
   b986e:	2201      	movs	r2, #1
   b9870:	f10d 0107 	add.w	r1, sp, #7
   b9874:	4798      	blx	r3
}
   b9876:	b003      	add	sp, #12
   b9878:	f85d fb04 	ldr.w	pc, [sp], #4

000b987c <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b987c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b987e:	6803      	ldr	r3, [r0, #0]
   b9880:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b9882:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b9884:	4798      	blx	r3
   b9886:	b128      	cbz	r0, b9894 <_ZN3UDP4readEv+0x18>
   b9888:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b988a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b988c:	1c59      	adds	r1, r3, #1
   b988e:	86e1      	strh	r1, [r4, #54]	; 0x36
   b9890:	5cd0      	ldrb	r0, [r2, r3]
}
   b9892:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b9894:	f04f 30ff 	mov.w	r0, #4294967295
   b9898:	e7fb      	b.n	b9892 <_ZN3UDP4readEv+0x16>

000b989a <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b989a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b989c:	6803      	ldr	r3, [r0, #0]
   b989e:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b98a0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b98a2:	4798      	blx	r3
   b98a4:	b118      	cbz	r0, b98ae <_ZN3UDP4peekEv+0x14>
   b98a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b98a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b98aa:	5cd0      	ldrb	r0, [r2, r3]
}
   b98ac:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b98ae:	f04f 30ff 	mov.w	r0, #4294967295
   b98b2:	e7fb      	b.n	b98ac <_ZN3UDP4peekEv+0x12>

000b98b4 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b98b4:	4770      	bx	lr

000b98b6 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b98b6:	b410      	push	{r4}
   b98b8:	4603      	mov	r3, r0
   b98ba:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b98bc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b98be:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b98c0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b98c2:	6803      	ldr	r3, [r0, #0]
   b98c4:	1a52      	subs	r2, r2, r1
   b98c6:	68db      	ldr	r3, [r3, #12]
   b98c8:	4421      	add	r1, r4
}
   b98ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b98ce:	4718      	bx	r3

000b98d0 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b98d0:	f1a0 0010 	sub.w	r0, r0, #16
   b98d4:	f7ff bfef 	b.w	b98b6 <_ZNK3UDP7printToER5Print>

000b98d8 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b98d8:	b570      	push	{r4, r5, r6, lr}
    stop();
   b98da:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b98dc:	b08c      	sub	sp, #48	; 0x30
    stop();
   b98de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b98e0:	4604      	mov	r4, r0
   b98e2:	460e      	mov	r6, r1
   b98e4:	4615      	mov	r5, r2
    stop();
   b98e6:	4798      	blx	r3
    const int one = 1;
   b98e8:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b98ea:	221c      	movs	r2, #28
   b98ec:	2100      	movs	r1, #0
   b98ee:	a805      	add	r0, sp, #20
    const int one = 1;
   b98f0:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b98f2:	f003 fd78 	bl	bd3e6 <memset>
    saddr.sin6_len = sizeof(saddr);
   b98f6:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b98fa:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b98fc:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b9900:	f7ff fc08 	bl	b9114 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b9904:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b9906:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b990a:	2102      	movs	r1, #2
   b990c:	200a      	movs	r0, #10
   b990e:	f7ff fcc1 	bl	b9294 <sock_socket>
    if (_sock < 0) {
   b9912:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b9914:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b9916:	db25      	blt.n	b9964 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b9918:	2204      	movs	r2, #4
   b991a:	9200      	str	r2, [sp, #0]
   b991c:	ab02      	add	r3, sp, #8
   b991e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9922:	f7ff fc7f 	bl	b9224 <sock_setsockopt>
   b9926:	b9e8      	cbnz	r0, b9964 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b9928:	b195      	cbz	r5, b9950 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b992a:	9003      	str	r0, [sp, #12]
   b992c:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b9930:	a903      	add	r1, sp, #12
   b9932:	b2e8      	uxtb	r0, r5
   b9934:	f7ff fa74 	bl	b8e20 <if_index_to_name>
   b9938:	b9a0      	cbnz	r0, b9964 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b993a:	2306      	movs	r3, #6
   b993c:	9300      	str	r3, [sp, #0]
   b993e:	6960      	ldr	r0, [r4, #20]
   b9940:	ab03      	add	r3, sp, #12
   b9942:	f241 020b 	movw	r2, #4107	; 0x100b
   b9946:	f640 71ff 	movw	r1, #4095	; 0xfff
   b994a:	f7ff fc6b 	bl	b9224 <sock_setsockopt>
   b994e:	b948      	cbnz	r0, b9964 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b9950:	6960      	ldr	r0, [r4, #20]
   b9952:	221c      	movs	r2, #28
   b9954:	a905      	add	r1, sp, #20
   b9956:	f7ff fc5d 	bl	b9214 <sock_bind>
   b995a:	b918      	cbnz	r0, b9964 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b995c:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b995e:	2001      	movs	r0, #1
}
   b9960:	b00c      	add	sp, #48	; 0x30
   b9962:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b9964:	6823      	ldr	r3, [r4, #0]
   b9966:	4620      	mov	r0, r4
   b9968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b996a:	4798      	blx	r3
   b996c:	2000      	movs	r0, #0
   b996e:	e7f7      	b.n	b9960 <_ZN3UDP5beginEtm+0x88>

000b9970 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b9970:	b510      	push	{r4, lr}
   b9972:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b9974:	6940      	ldr	r0, [r0, #20]
   b9976:	2800      	cmp	r0, #0
   b9978:	db01      	blt.n	b997e <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b997a:	f7ff fc5b 	bl	b9234 <sock_close>
    _sock = -1;
   b997e:	f04f 33ff 	mov.w	r3, #4294967295
   b9982:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b9984:	2300      	movs	r3, #0
   b9986:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b9988:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b998a:	bd10      	pop	{r4, pc}

000b998c <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b998c:	b570      	push	{r4, r5, r6, lr}
   b998e:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b9990:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9992:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b9994:	b168      	cbz	r0, b99b2 <_ZN3UDP5writeEPKhj+0x26>
   b9996:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b9998:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b999a:	4294      	cmp	r4, r2
   b999c:	bf28      	it	cs
   b999e:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b99a0:	4622      	mov	r2, r4
   b99a2:	4430      	add	r0, r6
   b99a4:	f003 fcf7 	bl	bd396 <memcpy>
    _offset += size;
   b99a8:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b99aa:	4423      	add	r3, r4
   b99ac:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b99ae:	4620      	mov	r0, r4
   b99b0:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b99b2:	4604      	mov	r4, r0
   b99b4:	e7f1      	b.n	b999a <_ZN3UDP5writeEPKhj+0xe>

000b99b6 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b99b6:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b99b8:	6803      	ldr	r3, [r0, #0]
   b99ba:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b99bc:	4604      	mov	r4, r0
   b99be:	460f      	mov	r7, r1
   b99c0:	4616      	mov	r6, r2
    if (available()) {
   b99c2:	4798      	blx	r3
   b99c4:	b190      	cbz	r0, b99ec <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b99c6:	6823      	ldr	r3, [r4, #0]
   b99c8:	4620      	mov	r0, r4
   b99ca:	691b      	ldr	r3, [r3, #16]
   b99cc:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b99ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b99d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b99d2:	4286      	cmp	r6, r0
   b99d4:	bfa8      	it	ge
   b99d6:	4606      	movge	r6, r0
   b99d8:	4419      	add	r1, r3
   b99da:	4632      	mov	r2, r6
   b99dc:	4638      	mov	r0, r7
   b99de:	f003 fcda 	bl	bd396 <memcpy>
        _offset += read;
   b99e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b99e4:	4433      	add	r3, r6
   b99e6:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b99e8:	4630      	mov	r0, r6
   b99ea:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b99ec:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b99f0:	e7fa      	b.n	b99e8 <_ZN3UDP4readEPhj+0x32>

000b99f2 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b99f2:	b530      	push	{r4, r5, lr}
   b99f4:	b087      	sub	sp, #28
   b99f6:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b99f8:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b99fa:	4668      	mov	r0, sp
   b99fc:	f002 fcb2 	bl	bc364 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9a02:	3404      	adds	r4, #4
   b9a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9a06:	682b      	ldr	r3, [r5, #0]
   b9a08:	7023      	strb	r3, [r4, #0]
    }
   b9a0a:	b007      	add	sp, #28
   b9a0c:	bd30      	pop	{r4, r5, pc}
	...

000b9a10 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b9a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9a12:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b9a14:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b9a16:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b9a18:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b9a1a:	4a0a      	ldr	r2, [pc, #40]	; (b9a44 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b9a1c:	9202      	str	r2, [sp, #8]
   b9a1e:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b9a20:	468c      	mov	ip, r1
   b9a22:	4606      	mov	r6, r0
   b9a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9a26:	ad03      	add	r5, sp, #12
   b9a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9a2a:	6823      	ldr	r3, [r4, #0]
   b9a2c:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b9a2e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b9a32:	9300      	str	r3, [sp, #0]
   b9a34:	4672      	mov	r2, lr
   b9a36:	ab02      	add	r3, sp, #8
   b9a38:	4661      	mov	r1, ip
   b9a3a:	4630      	mov	r0, r6
   b9a3c:	47b8      	blx	r7
    }
   b9a3e:	b009      	add	sp, #36	; 0x24
   b9a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9a42:	bf00      	nop
   b9a44:	000c027c 	.word	0x000c027c

000b9a48 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b9a48:	b570      	push	{r4, r5, r6, lr}
   b9a4a:	4604      	mov	r4, r0
   b9a4c:	4b05      	ldr	r3, [pc, #20]	; (b9a64 <_ZN3UDP8remoteIPEv+0x1c>)
   b9a4e:	f844 3b04 	str.w	r3, [r4], #4
   b9a52:	f101 0520 	add.w	r5, r1, #32
   b9a56:	4606      	mov	r6, r0
   b9a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9a5c:	682b      	ldr	r3, [r5, #0]
   b9a5e:	7023      	strb	r3, [r4, #0]
   b9a60:	4630      	mov	r0, r6
   b9a62:	bd70      	pop	{r4, r5, r6, pc}
   b9a64:	000c027c 	.word	0x000c027c

000b9a68 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b9a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b9a6a:	7843      	ldrb	r3, [r0, #1]
   b9a6c:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b9a6e:	b08d      	sub	sp, #52	; 0x34
   b9a70:	4605      	mov	r5, r0
   b9a72:	460c      	mov	r4, r1
   b9a74:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b9a76:	d104      	bne.n	b9a82 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9a78:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9a7a:	4620      	mov	r0, r4
   b9a7c:	f7ff ffb9 	bl	b99f2 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b9a80:	e022      	b.n	b9ac8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b9a82:	2b0a      	cmp	r3, #10
   b9a84:	d125      	bne.n	b9ad2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b9a86:	2211      	movs	r2, #17
   b9a88:	2100      	movs	r1, #0
   b9a8a:	a801      	add	r0, sp, #4
   b9a8c:	f003 fcab 	bl	bd3e6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9a90:	68ab      	ldr	r3, [r5, #8]
   b9a92:	b303      	cbz	r3, b9ad6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9a94:	f105 0308 	add.w	r3, r5, #8
   b9a98:	ae01      	add	r6, sp, #4
   b9a9a:	f105 0c18 	add.w	ip, r5, #24
   b9a9e:	6818      	ldr	r0, [r3, #0]
   b9aa0:	6859      	ldr	r1, [r3, #4]
   b9aa2:	4632      	mov	r2, r6
   b9aa4:	c203      	stmia	r2!, {r0, r1}
   b9aa6:	3308      	adds	r3, #8
   b9aa8:	4563      	cmp	r3, ip
   b9aaa:	4616      	mov	r6, r2
   b9aac:	d1f7      	bne.n	b9a9e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b9aae:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9ab0:	a901      	add	r1, sp, #4
   b9ab2:	a806      	add	r0, sp, #24
   b9ab4:	ae07      	add	r6, sp, #28
            a.v = 6;
   b9ab6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9aba:	f002 fc09 	bl	bc2d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9abe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9ac0:	3404      	adds	r4, #4
   b9ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9ac4:	6833      	ldr	r3, [r6, #0]
   b9ac6:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b9ac8:	b11f      	cbz	r7, b9ad2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b9aca:	8868      	ldrh	r0, [r5, #2]
   b9acc:	f7ff fb1a 	bl	b9104 <inet_ntohs>
   b9ad0:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b9ad2:	b00d      	add	sp, #52	; 0x34
   b9ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9ad6:	68eb      	ldr	r3, [r5, #12]
   b9ad8:	2b00      	cmp	r3, #0
   b9ada:	d1db      	bne.n	b9a94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b9adc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9ae0:	692e      	ldr	r6, [r5, #16]
   b9ae2:	f7ff fb07 	bl	b90f4 <inet_htonl>
   b9ae6:	4286      	cmp	r6, r0
   b9ae8:	d1d4      	bne.n	b9a94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b9aea:	f105 0114 	add.w	r1, r5, #20
   b9aee:	e7c4      	b.n	b9a7a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b9af0 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b9af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9af4:	4617      	mov	r7, r2
   b9af6:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b9af8:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b9afa:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9afc:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b9afe:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9b00:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b9b02:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9b04:	f7ff f96c 	bl	b8de0 <netdb_getaddrinfo>
   b9b08:	1e04      	subs	r4, r0, #0
   b9b0a:	db20      	blt.n	b9b4e <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b9b0c:	9b01      	ldr	r3, [sp, #4]
   b9b0e:	b32b      	cbz	r3, b9b5c <_ZN3UDP11beginPacketEPKct+0x6c>
   b9b10:	695b      	ldr	r3, [r3, #20]
   b9b12:	b31b      	cbz	r3, b9b5c <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b9b14:	a802      	add	r0, sp, #8
   b9b16:	f002 fbcd 	bl	bc2b4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9b1a:	9b01      	ldr	r3, [sp, #4]
   b9b1c:	2200      	movs	r2, #0
   b9b1e:	6958      	ldr	r0, [r3, #20]
   b9b20:	a902      	add	r1, sp, #8
   b9b22:	f7ff ffa1 	bl	b9a68 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b9b26:	a802      	add	r0, sp, #8
   b9b28:	f002 fbec 	bl	bc304 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9b2c:	b1b0      	cbz	r0, b9b5c <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b9b2e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9b30:	ad03      	add	r5, sp, #12
   b9b32:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b9b36:	4b0b      	ldr	r3, [pc, #44]	; (b9b64 <_ZN3UDP11beginPacketEPKct+0x74>)
   b9b38:	9308      	str	r3, [sp, #32]
   b9b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9b3c:	ac09      	add	r4, sp, #36	; 0x24
   b9b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9b40:	682b      	ldr	r3, [r5, #0]
   b9b42:	7023      	strb	r3, [r4, #0]
   b9b44:	463a      	mov	r2, r7
   b9b46:	a908      	add	r1, sp, #32
   b9b48:	4630      	mov	r0, r6
   b9b4a:	47c0      	blx	r8
   b9b4c:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b9b4e:	9801      	ldr	r0, [sp, #4]
   b9b50:	f7ff f93e 	bl	b8dd0 <netdb_freeaddrinfo>
}
   b9b54:	4620      	mov	r0, r4
   b9b56:	b00e      	add	sp, #56	; 0x38
   b9b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b9b5c:	f04f 34ff 	mov.w	r4, #4294967295
   b9b60:	e7f5      	b.n	b9b4e <_ZN3UDP11beginPacketEPKct+0x5e>
   b9b62:	bf00      	nop
   b9b64:	000c027c 	.word	0x000c027c

000b9b68 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b9b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b9b6c:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b9b70:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b9b74:	b090      	sub	sp, #64	; 0x40
   b9b76:	4605      	mov	r5, r0
   b9b78:	460e      	mov	r6, r1
   b9b7a:	4690      	mov	r8, r2
   b9b7c:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b9b7e:	db3c      	blt.n	b9bfa <_ZN3UDP13receivePacketEPhjm+0x92>
   b9b80:	2900      	cmp	r1, #0
   b9b82:	d03a      	beq.n	b9bfa <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b9b84:	f04f 0a1c 	mov.w	sl, #28
   b9b88:	af09      	add	r7, sp, #36	; 0x24
   b9b8a:	4652      	mov	r2, sl
   b9b8c:	2100      	movs	r1, #0
   b9b8e:	4638      	mov	r0, r7
   b9b90:	f003 fc29 	bl	bd3e6 <memset>
        socklen_t slen = sizeof(saddr);
   b9b94:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b9b98:	b1dc      	cbz	r4, b9bd2 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b9b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9b9e:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b9ba2:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b9ba6:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b9ba8:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b9baa:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b9bac:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b9bb0:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b9bb2:	9300      	str	r3, [sp, #0]
   b9bb4:	f241 0206 	movw	r2, #4102	; 0x1006
   b9bb8:	446b      	add	r3, sp
   b9bba:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9bbe:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b9bc0:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b9bc2:	f7ff fb2f 	bl	b9224 <sock_setsockopt>
            if (ret) {
   b9bc6:	4604      	mov	r4, r0
   b9bc8:	b120      	cbz	r0, b9bd4 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b9bca:	4620      	mov	r0, r4
   b9bcc:	b010      	add	sp, #64	; 0x40
   b9bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b9bd2:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b9bd4:	ab03      	add	r3, sp, #12
   b9bd6:	e9cd 7300 	strd	r7, r3, [sp]
   b9bda:	6968      	ldr	r0, [r5, #20]
   b9bdc:	4623      	mov	r3, r4
   b9bde:	4642      	mov	r2, r8
   b9be0:	4631      	mov	r1, r6
   b9be2:	f7ff fb3f 	bl	b9264 <sock_recvfrom>
        if (ret >= 0) {
   b9be6:	1e04      	subs	r4, r0, #0
   b9be8:	dbef      	blt.n	b9bca <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b9bea:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b9bee:	f105 011c 	add.w	r1, r5, #28
   b9bf2:	4638      	mov	r0, r7
   b9bf4:	f7ff ff38 	bl	b9a68 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b9bf8:	e7e7      	b.n	b9bca <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b9bfa:	f04f 34ff 	mov.w	r4, #4294967295
   b9bfe:	e7e4      	b.n	b9bca <_ZN3UDP13receivePacketEPhjm+0x62>

000b9c00 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b9c00:	b538      	push	{r3, r4, r5, lr}
   b9c02:	4605      	mov	r5, r0
   b9c04:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b9c06:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b9c08:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b9c0a:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b9c0c:	d110      	bne.n	b9c30 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b9c0e:	f640 231c 	movw	r3, #2588	; 0xa1c
   b9c12:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b9c14:	f7ff fa7e 	bl	b9114 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b9c18:	3408      	adds	r4, #8
   b9c1a:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b9c1c:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b9c20:	3514      	adds	r5, #20
   b9c22:	f853 2b04 	ldr.w	r2, [r3], #4
   b9c26:	f844 2b04 	str.w	r2, [r4], #4
   b9c2a:	42ab      	cmp	r3, r5
   b9c2c:	d1f9      	bne.n	b9c22 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b9c2e:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b9c30:	2b04      	cmp	r3, #4
   b9c32:	d1fc      	bne.n	b9c2e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b9c34:	f44f 7304 	mov.w	r3, #528	; 0x210
   b9c38:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b9c3a:	f7ff fa6b 	bl	b9114 <inet_htons>
   b9c3e:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b9c40:	6868      	ldr	r0, [r5, #4]
   b9c42:	f7ff fa57 	bl	b90f4 <inet_htonl>
   b9c46:	6060      	str	r0, [r4, #4]
}
   b9c48:	e7f1      	b.n	b9c2e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b9c4a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b9c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9c4e:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b9c50:	af03      	add	r7, sp, #12
   b9c52:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b9c56:	4698      	mov	r8, r3
   b9c58:	4604      	mov	r4, r0
   b9c5a:	460d      	mov	r5, r1
   b9c5c:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b9c5e:	2100      	movs	r1, #0
   b9c60:	464a      	mov	r2, r9
   b9c62:	4638      	mov	r0, r7
   b9c64:	f003 fbbf 	bl	bd3e6 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b9c68:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b9c6c:	463a      	mov	r2, r7
   b9c6e:	4640      	mov	r0, r8
   b9c70:	f7ff ffc6 	bl	b9c00 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b9c74:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b9c78:	b153      	cbz	r3, b9c90 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b9c7a:	e9cd 7900 	strd	r7, r9, [sp]
   b9c7e:	6960      	ldr	r0, [r4, #20]
   b9c80:	2300      	movs	r3, #0
   b9c82:	4632      	mov	r2, r6
   b9c84:	4629      	mov	r1, r5
   b9c86:	f7ff fafd 	bl	b9284 <sock_sendto>
}
   b9c8a:	b00b      	add	sp, #44	; 0x2c
   b9c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b9c90:	f04f 30ff 	mov.w	r0, #4294967295
   b9c94:	e7f9      	b.n	b9c8a <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>

000b9c96 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>:
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b9c96:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9c98:	b091      	sub	sp, #68	; 0x44
   b9c9a:	460c      	mov	r4, r1
   b9c9c:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   b9c9e:	2100      	movs	r1, #0
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b9ca0:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   b9ca2:	a809      	add	r0, sp, #36	; 0x24
   b9ca4:	221c      	movs	r2, #28
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b9ca6:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   b9ca8:	f003 fb9d 	bl	bd3e6 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   b9cac:	aa09      	add	r2, sp, #36	; 0x24
   b9cae:	2100      	movs	r1, #0
   b9cb0:	4620      	mov	r0, r4
   b9cb2:	f7ff ffa5 	bl	b9c00 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   b9cb6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b9cba:	2b02      	cmp	r3, #2
   b9cbc:	d12d      	bne.n	b9d1a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x84>
        struct ip_mreq mreq = {};
   b9cbe:	2300      	movs	r3, #0
   b9cc0:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   b9cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9cc4:	9304      	str	r3, [sp, #16]
        if (ifindex != 0) {
   b9cc6:	b1bd      	cbz	r5, b9cf8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
            if (!if_get_by_index(ifindex, &iface)) {
   b9cc8:	a902      	add	r1, sp, #8
   b9cca:	4628      	mov	r0, r5
   b9ccc:	f7ff f8b0 	bl	b8e30 <if_get_by_index>
   b9cd0:	b990      	cbnz	r0, b9cf8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
                struct if_addrs* addrs = nullptr;
   b9cd2:	9003      	str	r0, [sp, #12]
                if (!if_get_addrs(iface, &addrs)) {
   b9cd4:	a903      	add	r1, sp, #12
   b9cd6:	9802      	ldr	r0, [sp, #8]
   b9cd8:	f7ff f8b2 	bl	b8e40 <if_get_addrs>
   b9cdc:	b948      	cbnz	r0, b9cf2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b9cde:	9b03      	ldr	r3, [sp, #12]
   b9ce0:	b13b      	cbz	r3, b9cf2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                        auto ifaddr = a->if_addr->addr;
   b9ce2:	68da      	ldr	r2, [r3, #12]
   b9ce4:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   b9ce6:	7851      	ldrb	r1, [r2, #1]
   b9ce8:	2902      	cmp	r1, #2
   b9cea:	d114      	bne.n	b9d16 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   b9cec:	6852      	ldr	r2, [r2, #4]
   b9cee:	b192      	cbz	r2, b9d16 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   b9cf0:	9205      	str	r2, [sp, #20]
                SCOPE_GUARD({
   b9cf2:	9803      	ldr	r0, [sp, #12]
   b9cf4:	f7ff f8ac 	bl	b8e50 <if_free_if_addrs>
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   b9cf8:	2f00      	cmp	r7, #0
   b9cfa:	f04f 0308 	mov.w	r3, #8
   b9cfe:	9300      	str	r3, [sp, #0]
   b9d00:	bf18      	it	ne
   b9d02:	2203      	movne	r2, #3
   b9d04:	ab04      	add	r3, sp, #16
   b9d06:	bf08      	it	eq
   b9d08:	2204      	moveq	r2, #4
   b9d0a:	2100      	movs	r1, #0
   b9d0c:	4630      	mov	r0, r6
   b9d0e:	f7ff fa89 	bl	b9224 <sock_setsockopt>
}
   b9d12:	b011      	add	sp, #68	; 0x44
   b9d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b9d16:	681b      	ldr	r3, [r3, #0]
   b9d18:	e7e2      	b.n	b9ce0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x4a>
    } else if (s.ss_family == AF_INET6) {
   b9d1a:	2b0a      	cmp	r3, #10
   b9d1c:	d115      	bne.n	b9d4a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0xb4>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   b9d1e:	ab0b      	add	r3, sp, #44	; 0x2c
   b9d20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b9d22:	ac04      	add	r4, sp, #16
   b9d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b9d28:	2f00      	cmp	r7, #0
   b9d2a:	f04f 0314 	mov.w	r3, #20
   b9d2e:	9300      	str	r3, [sp, #0]
   b9d30:	bf18      	it	ne
   b9d32:	220c      	movne	r2, #12
   b9d34:	4623      	mov	r3, r4
   b9d36:	bf08      	it	eq
   b9d38:	220d      	moveq	r2, #13
   b9d3a:	2129      	movs	r1, #41	; 0x29
   b9d3c:	4630      	mov	r0, r6
        mreq.ipv6mr_interface = ifindex;
   b9d3e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b9d40:	f7ff fa70 	bl	b9224 <sock_setsockopt>
   b9d44:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9d48:	e7e3      	b.n	b9d12 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>
    return -1;
   b9d4a:	f04f 30ff 	mov.w	r0, #4294967295
   b9d4e:	e7e0      	b.n	b9d12 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>

000b9d50 <_ZN3UDPC1Ev>:
UDP::UDP()
   b9d50:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9d52:	2500      	movs	r5, #0
   b9d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d58:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b9d5c:	4b0b      	ldr	r3, [pc, #44]	; (b9d8c <_ZN3UDPC1Ev+0x3c>)
   b9d5e:	f103 0208 	add.w	r2, r3, #8
   b9d62:	336c      	adds	r3, #108	; 0x6c
   b9d64:	6103      	str	r3, [r0, #16]
   b9d66:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b9d6a:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b9d6c:	6002      	str	r2, [r0, #0]
   b9d6e:	6143      	str	r3, [r0, #20]
   b9d70:	301c      	adds	r0, #28
   b9d72:	f002 fa9f 	bl	bc2b4 <_ZN9IPAddressC1Ev>
   b9d76:	f44f 7300 	mov.w	r3, #512	; 0x200
   b9d7a:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b9d7e:	86e5      	strh	r5, [r4, #54]	; 0x36
   b9d80:	8725      	strh	r5, [r4, #56]	; 0x38
   b9d82:	63e5      	str	r5, [r4, #60]	; 0x3c
   b9d84:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b9d88:	4620      	mov	r0, r4
   b9d8a:	bd38      	pop	{r3, r4, r5, pc}
   b9d8c:	000bfffc 	.word	0x000bfffc

000b9d90 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b9d90:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b9d92:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b9d96:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b9d98:	b123      	cbz	r3, b9da4 <_ZN3UDP13releaseBufferEv+0x14>
   b9d9a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9d9c:	b110      	cbz	r0, b9da4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b9d9e:	2101      	movs	r1, #1
   b9da0:	f7fa fe99 	bl	b4ad6 <_ZdlPvj>
    _buffer = NULL;
   b9da4:	2300      	movs	r3, #0
   b9da6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b9da8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b9dac:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b9dae:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b9db0:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b9db2:	bd10      	pop	{r4, pc}

000b9db4 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b9db4:	b570      	push	{r4, r5, r6, lr}
   b9db6:	4604      	mov	r4, r0
   b9db8:	4616      	mov	r6, r2
   b9dba:	460d      	mov	r5, r1
    releaseBuffer();
   b9dbc:	f7ff ffe8 	bl	b9d90 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b9dc0:	2300      	movs	r3, #0
    _buffer = buffer;
   b9dc2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b9dc4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b9dc6:	b12e      	cbz	r6, b9dd4 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b9dc8:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b9dca:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b9dcc:	3800      	subs	r0, #0
   b9dce:	bf18      	it	ne
   b9dd0:	2001      	movne	r0, #1
   b9dd2:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b9dd4:	2d00      	cmp	r5, #0
   b9dd6:	d0f8      	beq.n	b9dca <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b9dd8:	4628      	mov	r0, r5
   b9dda:	f7fa fe78 	bl	b4ace <_Znaj>
        _buffer_allocated = true;
   b9dde:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b9de0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b9de2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b9de6:	2800      	cmp	r0, #0
   b9de8:	d0ef      	beq.n	b9dca <_ZN3UDP9setBufferEjPh+0x16>
   b9dea:	e7ed      	b.n	b9dc8 <_ZN3UDP9setBufferEjPh+0x14>

000b9dec <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b9dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9dee:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b9df0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b9df2:	4605      	mov	r5, r0
   b9df4:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b9df6:	b91a      	cbnz	r2, b9e00 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b9df8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b9dfa:	b109      	cbz	r1, b9e00 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b9dfc:	f7ff ffda 	bl	b9db4 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b9e00:	3404      	adds	r4, #4
   b9e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9e04:	f105 0620 	add.w	r6, r5, #32
   b9e08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b9e0a:	6823      	ldr	r3, [r4, #0]
   b9e0c:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b9e0e:	2300      	movs	r3, #0
}
   b9e10:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b9e12:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b9e14:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b9e16:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b9e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9e1a <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b9e1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b9e1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b9e1e:	4604      	mov	r4, r0
   b9e20:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b9e22:	b92a      	cbnz	r2, b9e30 <_ZN3UDP11parsePacketEm+0x16>
   b9e24:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b9e26:	b119      	cbz	r1, b9e30 <_ZN3UDP11parsePacketEm+0x16>
   b9e28:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b9e2a:	f7ff ffc3 	bl	b9db4 <_ZN3UDP9setBufferEjPh>
   b9e2e:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b9e30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b9e32:	2200      	movs	r2, #0
   b9e34:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b9e36:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b9e38:	b141      	cbz	r1, b9e4c <_ZN3UDP11parsePacketEm+0x32>
   b9e3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b9e3c:	b132      	cbz	r2, b9e4c <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b9e3e:	6820      	ldr	r0, [r4, #0]
   b9e40:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b9e42:	4620      	mov	r0, r4
   b9e44:	47a8      	blx	r5
        if (result > 0) {
   b9e46:	2800      	cmp	r0, #0
            _total = result;
   b9e48:	bfc8      	it	gt
   b9e4a:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b9e4c:	6823      	ldr	r3, [r4, #0]
   b9e4e:	691b      	ldr	r3, [r3, #16]
   b9e50:	4620      	mov	r0, r4
}
   b9e52:	b003      	add	sp, #12
   b9e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b9e58:	4718      	bx	r3
	...

000b9e5c <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b9e5c:	b510      	push	{r4, lr}
   b9e5e:	4b07      	ldr	r3, [pc, #28]	; (b9e7c <_ZN3UDPD1Ev+0x20>)
   b9e60:	f103 0208 	add.w	r2, r3, #8
   b9e64:	336c      	adds	r3, #108	; 0x6c
   b9e66:	4604      	mov	r4, r0
   b9e68:	6002      	str	r2, [r0, #0]
   b9e6a:	6103      	str	r3, [r0, #16]
   b9e6c:	f7ff fd80 	bl	b9970 <_ZN3UDP4stopEv>
   b9e70:	4620      	mov	r0, r4
   b9e72:	f7ff ff8d 	bl	b9d90 <_ZN3UDP13releaseBufferEv>
   b9e76:	4620      	mov	r0, r4
   b9e78:	bd10      	pop	{r4, pc}
   b9e7a:	bf00      	nop
   b9e7c:	000bfffc 	.word	0x000bfffc

000b9e80 <_ZN3UDPD0Ev>:
   b9e80:	b510      	push	{r4, lr}
   b9e82:	4604      	mov	r4, r0
   b9e84:	f7ff ffea 	bl	b9e5c <_ZN3UDPD1Ev>
   b9e88:	4620      	mov	r0, r4
   b9e8a:	214c      	movs	r1, #76	; 0x4c
   b9e8c:	f7fa fe23 	bl	b4ad6 <_ZdlPvj>
   b9e90:	4620      	mov	r0, r4
   b9e92:	bd10      	pop	{r4, pc}

000b9e94 <_ZN3UDP13joinMulticastERK9IPAddress>:

int UDP::joinMulticast(const IPAddress& ip) {
   b9e94:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b9e96:	6944      	ldr	r4, [r0, #20]
   b9e98:	2c00      	cmp	r4, #0
   b9e9a:	db07      	blt.n	b9eac <_ZN3UDP13joinMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b9e9c:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b9ea0:	2301      	movs	r3, #1
   b9ea2:	4620      	mov	r0, r4
}
   b9ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b9ea8:	f7ff bef5 	b.w	b9c96 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b9eac:	f04f 30ff 	mov.w	r0, #4294967295
   b9eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9eb4:	4770      	bx	lr

000b9eb6 <_ZN3UDP14leaveMulticastERK9IPAddress>:

int UDP::leaveMulticast(const IPAddress& ip) {
   b9eb6:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b9eb8:	6944      	ldr	r4, [r0, #20]
   b9eba:	2c00      	cmp	r4, #0
   b9ebc:	db07      	blt.n	b9ece <_ZN3UDP14leaveMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b9ebe:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b9ec2:	2300      	movs	r3, #0
   b9ec4:	4620      	mov	r0, r4
}
   b9ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b9eca:	f7ff bee4 	b.w	b9c96 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b9ece:	f04f 30ff 	mov.w	r0, #4294967295
   b9ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9ed6:	4770      	bx	lr

000b9ed8 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b9ed8:	4770      	bx	lr

000b9eda <_ZN21StringPrintableHelperD0Ev>:
   b9eda:	b510      	push	{r4, lr}
   b9edc:	210c      	movs	r1, #12
   b9ede:	4604      	mov	r4, r0
   b9ee0:	f7fa fdf9 	bl	b4ad6 <_ZdlPvj>
   b9ee4:	4620      	mov	r0, r4
   b9ee6:	bd10      	pop	{r4, pc}

000b9ee8 <_ZN6StringD1Ev>:
String::~String()
   b9ee8:	b510      	push	{r4, lr}
   b9eea:	4604      	mov	r4, r0
	free(buffer);
   b9eec:	6800      	ldr	r0, [r0, #0]
   b9eee:	f7ff fb1d 	bl	b952c <free>
}
   b9ef2:	4620      	mov	r0, r4
   b9ef4:	bd10      	pop	{r4, pc}

000b9ef6 <_ZN6String10invalidateEv>:
{
   b9ef6:	b510      	push	{r4, lr}
   b9ef8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9efa:	6800      	ldr	r0, [r0, #0]
   b9efc:	b108      	cbz	r0, b9f02 <_ZN6String10invalidateEv+0xc>
   b9efe:	f7ff fb15 	bl	b952c <free>
	buffer = NULL;
   b9f02:	2300      	movs	r3, #0
	capacity = len = 0;
   b9f04:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9f08:	6023      	str	r3, [r4, #0]
}
   b9f0a:	bd10      	pop	{r4, pc}

000b9f0c <_ZN6String12changeBufferEj>:
{
   b9f0c:	b538      	push	{r3, r4, r5, lr}
   b9f0e:	4604      	mov	r4, r0
   b9f10:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9f12:	6800      	ldr	r0, [r0, #0]
   b9f14:	3101      	adds	r1, #1
   b9f16:	f7ff fb11 	bl	b953c <realloc>
	if (newbuffer) {
   b9f1a:	b110      	cbz	r0, b9f22 <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b9f1c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9f20:	2001      	movs	r0, #1
}
   b9f22:	bd38      	pop	{r3, r4, r5, pc}

000b9f24 <_ZN6String7reserveEj>:
{
   b9f24:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9f26:	6803      	ldr	r3, [r0, #0]
{
   b9f28:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9f2a:	b123      	cbz	r3, b9f36 <_ZN6String7reserveEj+0x12>
   b9f2c:	6843      	ldr	r3, [r0, #4]
   b9f2e:	428b      	cmp	r3, r1
   b9f30:	d301      	bcc.n	b9f36 <_ZN6String7reserveEj+0x12>
   b9f32:	2001      	movs	r0, #1
}
   b9f34:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9f36:	4620      	mov	r0, r4
   b9f38:	f7ff ffe8 	bl	b9f0c <_ZN6String12changeBufferEj>
   b9f3c:	2800      	cmp	r0, #0
   b9f3e:	d0f9      	beq.n	b9f34 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b9f40:	68a3      	ldr	r3, [r4, #8]
   b9f42:	2b00      	cmp	r3, #0
   b9f44:	d1f5      	bne.n	b9f32 <_ZN6String7reserveEj+0xe>
   b9f46:	6822      	ldr	r2, [r4, #0]
   b9f48:	7013      	strb	r3, [r2, #0]
   b9f4a:	e7f2      	b.n	b9f32 <_ZN6String7reserveEj+0xe>

000b9f4c <_ZN6String4copyEPKcj>:
{
   b9f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9f4e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b9f50:	4611      	mov	r1, r2
   b9f52:	9201      	str	r2, [sp, #4]
{
   b9f54:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b9f56:	f7ff ffe5 	bl	b9f24 <_ZN6String7reserveEj>
   b9f5a:	9a01      	ldr	r2, [sp, #4]
   b9f5c:	b928      	cbnz	r0, b9f6a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b9f5e:	4620      	mov	r0, r4
   b9f60:	f7ff ffc9 	bl	b9ef6 <_ZN6String10invalidateEv>
}
   b9f64:	4620      	mov	r0, r4
   b9f66:	b003      	add	sp, #12
   b9f68:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9f6a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9f6c:	4629      	mov	r1, r5
   b9f6e:	6820      	ldr	r0, [r4, #0]
   b9f70:	f003 fa11 	bl	bd396 <memcpy>
	buffer[len] = 0;
   b9f74:	6822      	ldr	r2, [r4, #0]
   b9f76:	68a3      	ldr	r3, [r4, #8]
   b9f78:	2100      	movs	r1, #0
   b9f7a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9f7c:	e7f2      	b.n	b9f64 <_ZN6String4copyEPKcj+0x18>

000b9f7e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b9f7e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9f80:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b9f82:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b9f86:	4604      	mov	r4, r0
	len = 0;
   b9f88:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9f8a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b9f8c:	b141      	cbz	r1, b9fa0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b9f8e:	4608      	mov	r0, r1
   b9f90:	9101      	str	r1, [sp, #4]
   b9f92:	f7fa fd3f 	bl	b4a14 <strlen>
   b9f96:	9901      	ldr	r1, [sp, #4]
   b9f98:	4602      	mov	r2, r0
   b9f9a:	4620      	mov	r0, r4
   b9f9c:	f7ff ffd6 	bl	b9f4c <_ZN6String4copyEPKcj>
}
   b9fa0:	4620      	mov	r0, r4
   b9fa2:	b002      	add	sp, #8
   b9fa4:	bd10      	pop	{r4, pc}

000b9fa6 <_ZN6String4moveERS_>:
{
   b9fa6:	b538      	push	{r3, r4, r5, lr}
   b9fa8:	4605      	mov	r5, r0
	if (buffer) {
   b9faa:	6800      	ldr	r0, [r0, #0]
{
   b9fac:	460c      	mov	r4, r1
	if (buffer) {
   b9fae:	b168      	cbz	r0, b9fcc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b9fb0:	686a      	ldr	r2, [r5, #4]
   b9fb2:	688b      	ldr	r3, [r1, #8]
   b9fb4:	429a      	cmp	r2, r3
   b9fb6:	d307      	bcc.n	b9fc8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b9fb8:	6809      	ldr	r1, [r1, #0]
   b9fba:	f003 fa5a 	bl	bd472 <strcpy>
			len = rhs.len;
   b9fbe:	68a3      	ldr	r3, [r4, #8]
   b9fc0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9fc2:	2300      	movs	r3, #0
	rhs.len = 0;
   b9fc4:	60a3      	str	r3, [r4, #8]
}
   b9fc6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b9fc8:	f7ff fab0 	bl	b952c <free>
	buffer = rhs.buffer;
   b9fcc:	6823      	ldr	r3, [r4, #0]
   b9fce:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b9fd0:	6863      	ldr	r3, [r4, #4]
   b9fd2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9fd4:	68a3      	ldr	r3, [r4, #8]
   b9fd6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9fd8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b9fda:	e9c4 3300 	strd	r3, r3, [r4]
   b9fde:	e7f1      	b.n	b9fc4 <_ZN6String4moveERS_+0x1e>

000b9fe0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b9fe0:	b510      	push	{r4, lr}
	buffer = NULL;
   b9fe2:	2300      	movs	r3, #0
	capacity = 0;
   b9fe4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b9fe8:	4604      	mov	r4, r0
	len = 0;
   b9fea:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9fec:	7303      	strb	r3, [r0, #12]
	move(rval);
   b9fee:	f7ff ffda 	bl	b9fa6 <_ZN6String4moveERS_>
}
   b9ff2:	4620      	mov	r0, r4
   b9ff4:	bd10      	pop	{r4, pc}

000b9ff6 <_ZN6StringaSERKS_>:
	if (this == &rhs) return *this;
   b9ff6:	4288      	cmp	r0, r1
{
   b9ff8:	b510      	push	{r4, lr}
   b9ffa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9ffc:	d005      	beq.n	ba00a <_ZN6StringaSERKS_+0x14>
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9ffe:	680b      	ldr	r3, [r1, #0]
   ba000:	b12b      	cbz	r3, ba00e <_ZN6StringaSERKS_+0x18>
   ba002:	688a      	ldr	r2, [r1, #8]
   ba004:	4619      	mov	r1, r3
   ba006:	f7ff ffa1 	bl	b9f4c <_ZN6String4copyEPKcj>
}
   ba00a:	4620      	mov	r0, r4
   ba00c:	bd10      	pop	{r4, pc}
	else invalidate();
   ba00e:	f7ff ff72 	bl	b9ef6 <_ZN6String10invalidateEv>
   ba012:	e7fa      	b.n	ba00a <_ZN6StringaSERKS_+0x14>

000ba014 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba014:	b510      	push	{r4, lr}
	buffer = NULL;
   ba016:	2300      	movs	r3, #0
String::String(const String &value)
   ba018:	4604      	mov	r4, r0
	capacity = 0;
   ba01a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba01e:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba020:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba022:	f7ff ffe8 	bl	b9ff6 <_ZN6StringaSERKS_>
}
   ba026:	4620      	mov	r0, r4
   ba028:	bd10      	pop	{r4, pc}

000ba02a <_ZN6StringaSEOS_>:
	if (this != &rval) move(rval);
   ba02a:	4288      	cmp	r0, r1
{
   ba02c:	b510      	push	{r4, lr}
   ba02e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   ba030:	d001      	beq.n	ba036 <_ZN6StringaSEOS_+0xc>
   ba032:	f7ff ffb8 	bl	b9fa6 <_ZN6String4moveERS_>
}
   ba036:	4620      	mov	r0, r4
   ba038:	bd10      	pop	{r4, pc}

000ba03a <_ZN6StringaSEPKc>:
{
   ba03a:	b513      	push	{r0, r1, r4, lr}
   ba03c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba03e:	b159      	cbz	r1, ba058 <_ZN6StringaSEPKc+0x1e>
   ba040:	4608      	mov	r0, r1
   ba042:	9101      	str	r1, [sp, #4]
   ba044:	f7fa fce6 	bl	b4a14 <strlen>
   ba048:	9901      	ldr	r1, [sp, #4]
   ba04a:	4602      	mov	r2, r0
   ba04c:	4620      	mov	r0, r4
   ba04e:	f7ff ff7d 	bl	b9f4c <_ZN6String4copyEPKcj>
}
   ba052:	4620      	mov	r0, r4
   ba054:	b002      	add	sp, #8
   ba056:	bd10      	pop	{r4, pc}
	else invalidate();
   ba058:	f7ff ff4d 	bl	b9ef6 <_ZN6String10invalidateEv>
   ba05c:	e7f9      	b.n	ba052 <_ZN6StringaSEPKc+0x18>

000ba05e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba05e:	b510      	push	{r4, lr}
   ba060:	4604      	mov	r4, r0
   ba062:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba064:	2300      	movs	r3, #0
	capacity = 0;
   ba066:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba06a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba06c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba06e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba070:	a901      	add	r1, sp, #4
   ba072:	f7ff fbb1 	bl	b97d8 <itoa>
	*this = buf;
   ba076:	a901      	add	r1, sp, #4
   ba078:	4620      	mov	r0, r4
   ba07a:	f7ff ffde 	bl	ba03a <_ZN6StringaSEPKc>
}
   ba07e:	4620      	mov	r0, r4
   ba080:	b00a      	add	sp, #40	; 0x28
   ba082:	bd10      	pop	{r4, pc}

000ba084 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   ba084:	b510      	push	{r4, lr}
   ba086:	4604      	mov	r4, r0
   ba088:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba08a:	2300      	movs	r3, #0
	capacity = 0;
   ba08c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba090:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba092:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   ba094:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   ba096:	a901      	add	r1, sp, #4
   ba098:	f7ff fb35 	bl	b9706 <ltoa>
	*this = buf;
   ba09c:	a901      	add	r1, sp, #4
   ba09e:	4620      	mov	r0, r4
   ba0a0:	f7ff ffcb 	bl	ba03a <_ZN6StringaSEPKc>
}
   ba0a4:	4620      	mov	r0, r4
   ba0a6:	b00a      	add	sp, #40	; 0x28
   ba0a8:	bd10      	pop	{r4, pc}

000ba0aa <_ZN6String6concatEPKcj>:
{
   ba0aa:	b570      	push	{r4, r5, r6, lr}
   ba0ac:	4605      	mov	r5, r0
	if (!cstr) return 0;
   ba0ae:	460e      	mov	r6, r1
   ba0b0:	b909      	cbnz	r1, ba0b6 <_ZN6String6concatEPKcj+0xc>
   ba0b2:	2000      	movs	r0, #0
}
   ba0b4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba0b6:	b16a      	cbz	r2, ba0d4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba0b8:	6884      	ldr	r4, [r0, #8]
   ba0ba:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba0bc:	4621      	mov	r1, r4
   ba0be:	f7ff ff31 	bl	b9f24 <_ZN6String7reserveEj>
   ba0c2:	2800      	cmp	r0, #0
   ba0c4:	d0f5      	beq.n	ba0b2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba0c6:	6828      	ldr	r0, [r5, #0]
   ba0c8:	68ab      	ldr	r3, [r5, #8]
   ba0ca:	4631      	mov	r1, r6
   ba0cc:	4418      	add	r0, r3
   ba0ce:	f003 f9d0 	bl	bd472 <strcpy>
	len = newlen;
   ba0d2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba0d4:	2001      	movs	r0, #1
   ba0d6:	e7ed      	b.n	ba0b4 <_ZN6String6concatEPKcj+0xa>

000ba0d8 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   ba0d8:	688a      	ldr	r2, [r1, #8]
   ba0da:	6809      	ldr	r1, [r1, #0]
   ba0dc:	f7ff bfe5 	b.w	ba0aa <_ZN6String6concatEPKcj>

000ba0e0 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   ba0e0:	b538      	push	{r3, r4, r5, lr}
   ba0e2:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   ba0e4:	6880      	ldr	r0, [r0, #8]
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   ba0e6:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   ba0e8:	f7ff ffdf 	bl	ba0aa <_ZN6String6concatEPKcj>
   ba0ec:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   ba0ee:	6898      	ldr	r0, [r3, #8]
    }
   ba0f0:	1b40      	subs	r0, r0, r5
   ba0f2:	bd38      	pop	{r3, r4, r5, pc}

000ba0f4 <_ZN6String6concatEPKc>:
{
   ba0f4:	b513      	push	{r0, r1, r4, lr}
   ba0f6:	4604      	mov	r4, r0
}
   ba0f8:	4608      	mov	r0, r1
	if (!cstr) return 0;
   ba0fa:	b151      	cbz	r1, ba112 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   ba0fc:	9101      	str	r1, [sp, #4]
   ba0fe:	f7fa fc89 	bl	b4a14 <strlen>
   ba102:	9901      	ldr	r1, [sp, #4]
   ba104:	4602      	mov	r2, r0
   ba106:	4620      	mov	r0, r4
}
   ba108:	b002      	add	sp, #8
   ba10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   ba10e:	f7ff bfcc 	b.w	ba0aa <_ZN6String6concatEPKcj>
}
   ba112:	b002      	add	sp, #8
   ba114:	bd10      	pop	{r4, pc}

000ba116 <_ZN6String6concatEc>:
{
   ba116:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   ba118:	2300      	movs	r3, #0
	buf[0] = c;
   ba11a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba11e:	2201      	movs	r2, #1
   ba120:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba122:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba126:	f7ff ffc0 	bl	ba0aa <_ZN6String6concatEPKcj>
}
   ba12a:	b003      	add	sp, #12
   ba12c:	f85d fb04 	ldr.w	pc, [sp], #4

000ba130 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   ba130:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   ba132:	6880      	ldr	r0, [r0, #8]
   ba134:	f7ff ffef 	bl	ba116 <_ZN6String6concatEc>
    }
   ba138:	bd08      	pop	{r3, pc}

000ba13a <_ZplRK15StringSumHelperRK6String>:
{
   ba13a:	b510      	push	{r4, lr}
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba13c:	688a      	ldr	r2, [r1, #8]
   ba13e:	6809      	ldr	r1, [r1, #0]
{
   ba140:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba142:	f7ff ffb2 	bl	ba0aa <_ZN6String6concatEPKcj>
   ba146:	b910      	cbnz	r0, ba14e <_ZplRK15StringSumHelperRK6String+0x14>
   ba148:	4620      	mov	r0, r4
   ba14a:	f7ff fed4 	bl	b9ef6 <_ZN6String10invalidateEv>
}
   ba14e:	4620      	mov	r0, r4
   ba150:	bd10      	pop	{r4, pc}

000ba152 <_ZNK6String6equalsEPKc>:
{
   ba152:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba154:	6882      	ldr	r2, [r0, #8]
   ba156:	b93a      	cbnz	r2, ba168 <_ZNK6String6equalsEPKc+0x16>
   ba158:	b121      	cbz	r1, ba164 <_ZNK6String6equalsEPKc+0x12>
   ba15a:	7808      	ldrb	r0, [r1, #0]
	return strcmp(buffer, cstr) == 0;
   ba15c:	fab0 f080 	clz	r0, r0
   ba160:	0940      	lsrs	r0, r0, #5
   ba162:	e000      	b.n	ba166 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba164:	2001      	movs	r0, #1
}
   ba166:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba168:	6800      	ldr	r0, [r0, #0]
   ba16a:	b909      	cbnz	r1, ba170 <_ZNK6String6equalsEPKc+0x1e>
   ba16c:	7800      	ldrb	r0, [r0, #0]
   ba16e:	e7f5      	b.n	ba15c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba170:	f7fa fc46 	bl	b4a00 <strcmp>
   ba174:	e7f2      	b.n	ba15c <_ZNK6String6equalsEPKc+0xa>

000ba176 <_ZNK6String7indexOfERKS_j>:
{
   ba176:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   ba178:	6883      	ldr	r3, [r0, #8]
   ba17a:	4293      	cmp	r3, r2
   ba17c:	d907      	bls.n	ba18e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   ba17e:	6804      	ldr	r4, [r0, #0]
   ba180:	6809      	ldr	r1, [r1, #0]
   ba182:	18a0      	adds	r0, r4, r2
   ba184:	f003 f9ce 	bl	bd524 <strstr>
	if (found == NULL) return -1;
   ba188:	b108      	cbz	r0, ba18e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   ba18a:	1b00      	subs	r0, r0, r4
}
   ba18c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   ba18e:	f04f 30ff 	mov.w	r0, #4294967295
   ba192:	e7fb      	b.n	ba18c <_ZNK6String7indexOfERKS_j+0x16>

000ba194 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   ba194:	2200      	movs	r2, #0
   ba196:	f7ff bfee 	b.w	ba176 <_ZNK6String7indexOfERKS_j>
	...

000ba19c <_ZNK6String9substringEjj>:
{
   ba19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   ba19e:	429a      	cmp	r2, r3
{
   ba1a0:	460f      	mov	r7, r1
   ba1a2:	461d      	mov	r5, r3
	String out;
   ba1a4:	490c      	ldr	r1, [pc, #48]	; (ba1d8 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   ba1a6:	bf88      	it	hi
   ba1a8:	4613      	movhi	r3, r2
{
   ba1aa:	4614      	mov	r4, r2
   ba1ac:	4606      	mov	r6, r0
	if (left > right) {
   ba1ae:	bf84      	itt	hi
   ba1b0:	462c      	movhi	r4, r5
   ba1b2:	461d      	movhi	r5, r3
	String out;
   ba1b4:	f7ff fee3 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   ba1b8:	68bb      	ldr	r3, [r7, #8]
   ba1ba:	42a3      	cmp	r3, r4
   ba1bc:	d30a      	bcc.n	ba1d4 <_ZNK6String9substringEjj+0x38>
	out.copy(&buffer[left], right - left);
   ba1be:	6839      	ldr	r1, [r7, #0]
   ba1c0:	42ab      	cmp	r3, r5
   ba1c2:	bf94      	ite	ls
   ba1c4:	ebc4 0203 	rsbls	r2, r4, r3
   ba1c8:	ebc4 0205 	rsbhi	r2, r4, r5
   ba1cc:	4421      	add	r1, r4
   ba1ce:	4630      	mov	r0, r6
   ba1d0:	f7ff febc 	bl	b9f4c <_ZN6String4copyEPKcj>
}
   ba1d4:	4630      	mov	r0, r6
   ba1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba1d8:	000bfe42 	.word	0x000bfe42

000ba1dc <_ZNK6String9substringEj>:
{
   ba1dc:	b510      	push	{r4, lr}
   ba1de:	4604      	mov	r4, r0
	return substring(left, len);
   ba1e0:	688b      	ldr	r3, [r1, #8]
   ba1e2:	f7ff ffdb 	bl	ba19c <_ZNK6String9substringEjj>
}
   ba1e6:	4620      	mov	r0, r4
   ba1e8:	bd10      	pop	{r4, pc}

000ba1ea <_ZNK6String5toIntEv>:
	if (buffer) return atol(buffer);
   ba1ea:	6800      	ldr	r0, [r0, #0]
   ba1ec:	b108      	cbz	r0, ba1f2 <_ZNK6String5toIntEv+0x8>
   ba1ee:	f003 b8aa 	b.w	bd346 <atol>
}
   ba1f2:	4770      	bx	lr

000ba1f4 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   ba1f4:	b530      	push	{r4, r5, lr}
   ba1f6:	b085      	sub	sp, #20
	buffer = NULL;
   ba1f8:	2300      	movs	r3, #0
String::String(const Printable& printable)
   ba1fa:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   ba1fc:	9302      	str	r3, [sp, #8]
	capacity = 0;
   ba1fe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba202:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba204:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   ba206:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   ba208:	4b06      	ldr	r3, [pc, #24]	; (ba224 <_ZN6StringC1ERK9Printable+0x30>)
   ba20a:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   ba20c:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   ba20e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   ba210:	f7ff fe88 	bl	b9f24 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   ba214:	682b      	ldr	r3, [r5, #0]
   ba216:	a901      	add	r1, sp, #4
   ba218:	681b      	ldr	r3, [r3, #0]
   ba21a:	4628      	mov	r0, r5
   ba21c:	4798      	blx	r3
}
   ba21e:	4620      	mov	r0, r4
   ba220:	b005      	add	sp, #20
   ba222:	bd30      	pop	{r4, r5, pc}
   ba224:	000c0074 	.word	0x000c0074

000ba228 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
   ba228:	b40e      	push	{r1, r2, r3}
   ba22a:	b570      	push	{r4, r5, r6, lr}
   ba22c:	b087      	sub	sp, #28
   ba22e:	ad0b      	add	r5, sp, #44	; 0x2c
   ba230:	4604      	mov	r4, r0
   ba232:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba236:	9201      	str	r2, [sp, #4]
   ba238:	462b      	mov	r3, r5
   ba23a:	2105      	movs	r1, #5
   ba23c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   ba23e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba240:	f7ff f9a4 	bl	b958c <vsnprintf>
    va_end(marker);

    String result;
   ba244:	490b      	ldr	r1, [pc, #44]	; (ba274 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba246:	4606      	mov	r6, r0
    String result;
   ba248:	4620      	mov	r0, r4
   ba24a:	f7ff fe98 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   ba24e:	4631      	mov	r1, r6
   ba250:	4620      	mov	r0, r4
   ba252:	f7ff fe67 	bl	b9f24 <_ZN6String7reserveEj>
    if (result.buffer) {
   ba256:	6820      	ldr	r0, [r4, #0]
   ba258:	b130      	cbz	r0, ba268 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   ba25a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   ba25c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   ba25e:	462b      	mov	r3, r5
   ba260:	1c71      	adds	r1, r6, #1
   ba262:	f7ff f993 	bl	b958c <vsnprintf>
        va_end(marker);
        result.len = n;
   ba266:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   ba268:	4620      	mov	r0, r4
   ba26a:	b007      	add	sp, #28
   ba26c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba270:	b003      	add	sp, #12
   ba272:	4770      	bx	lr
   ba274:	000bfe42 	.word	0x000bfe42

000ba278 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba278:	4770      	bx	lr

000ba27a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   ba27a:	4770      	bx	lr

000ba27c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   ba27c:	4770      	bx	lr

000ba27e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba27e:	4770      	bx	lr

000ba280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba280:	4b06      	ldr	r3, [pc, #24]	; (ba29c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba282:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba284:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   ba286:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba28a:	d005      	beq.n	ba298 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba28c:	4608      	mov	r0, r1
   ba28e:	f002 ff15 	bl	bd0bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba292:	2800      	cmp	r0, #0
   ba294:	bf08      	it	eq
   ba296:	2400      	moveq	r4, #0
      }
   ba298:	4620      	mov	r0, r4
   ba29a:	bd10      	pop	{r4, pc}
   ba29c:	000c0200 	.word	0x000c0200

000ba2a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba2a0:	4b06      	ldr	r3, [pc, #24]	; (ba2bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba2a2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba2a4:	b510      	push	{r4, lr}
   ba2a6:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba2aa:	d005      	beq.n	ba2b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba2ac:	4608      	mov	r0, r1
   ba2ae:	f002 ff05 	bl	bd0bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba2b2:	2800      	cmp	r0, #0
   ba2b4:	bf08      	it	eq
   ba2b6:	2400      	moveq	r4, #0
      }
   ba2b8:	4620      	mov	r0, r4
   ba2ba:	bd10      	pop	{r4, pc}
   ba2bc:	000c0200 	.word	0x000c0200

000ba2c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba2c0:	4b06      	ldr	r3, [pc, #24]	; (ba2dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba2c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba2c4:	b510      	push	{r4, lr}
   ba2c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba2ca:	d005      	beq.n	ba2d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba2cc:	4608      	mov	r0, r1
   ba2ce:	f002 fef5 	bl	bd0bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba2d2:	2800      	cmp	r0, #0
   ba2d4:	bf08      	it	eq
   ba2d6:	2400      	moveq	r4, #0
      }
   ba2d8:	4620      	mov	r0, r4
   ba2da:	bd10      	pop	{r4, pc}
   ba2dc:	000c0200 	.word	0x000c0200

000ba2e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba2e0:	b510      	push	{r4, lr}
   ba2e2:	2168      	movs	r1, #104	; 0x68
   ba2e4:	4604      	mov	r4, r0
   ba2e6:	f7fa fbf6 	bl	b4ad6 <_ZdlPvj>
   ba2ea:	4620      	mov	r0, r4
   ba2ec:	bd10      	pop	{r4, pc}

000ba2ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba2ee:	b510      	push	{r4, lr}
   ba2f0:	2128      	movs	r1, #40	; 0x28
   ba2f2:	4604      	mov	r4, r0
   ba2f4:	f7fa fbef 	bl	b4ad6 <_ZdlPvj>
   ba2f8:	4620      	mov	r0, r4
   ba2fa:	bd10      	pop	{r4, pc}

000ba2fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba2fc:	b510      	push	{r4, lr}
   ba2fe:	2130      	movs	r1, #48	; 0x30
   ba300:	4604      	mov	r4, r0
   ba302:	f7fa fbe8 	bl	b4ad6 <_ZdlPvj>
   ba306:	4620      	mov	r0, r4
   ba308:	bd10      	pop	{r4, pc}

000ba30a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   ba30a:	2168      	movs	r1, #104	; 0x68
   ba30c:	f7fa bbe3 	b.w	b4ad6 <_ZdlPvj>

000ba310 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba310:	2128      	movs	r1, #40	; 0x28
   ba312:	f7fa bbe0 	b.w	b4ad6 <_ZdlPvj>

000ba316 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba316:	2130      	movs	r1, #48	; 0x30
   ba318:	f7fa bbdd 	b.w	b4ad6 <_ZdlPvj>

000ba31c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   ba31c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba31e:	2500      	movs	r5, #0
   ba320:	1cec      	adds	r4, r5, #3
   ba322:	428c      	cmp	r4, r1
   ba324:	d80d      	bhi.n	ba342 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   ba326:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   ba328:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   ba32a:	5d87      	ldrb	r7, [r0, r6]
   ba32c:	4297      	cmp	r7, r2
   ba32e:	d105      	bne.n	ba33c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   ba330:	4426      	add	r6, r4
   ba332:	42b1      	cmp	r1, r6
   ba334:	d305      	bcc.n	ba342 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   ba336:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   ba338:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   ba33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   ba33c:	3401      	adds	r4, #1
   ba33e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba340:	e7ee      	b.n	ba320 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   ba342:	2000      	movs	r0, #0
   ba344:	e7f9      	b.n	ba33a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000ba348 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   ba348:	4a02      	ldr	r2, [pc, #8]	; (ba354 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   ba34a:	4903      	ldr	r1, [pc, #12]	; (ba358 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   ba34c:	200a      	movs	r0, #10
   ba34e:	f7fe bff1 	b.w	b9334 <panic_>
   ba352:	bf00      	nop
   ba354:	000b8e71 	.word	0x000b8e71
   ba358:	000c0084 	.word	0x000c0084

000ba35c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba35c:	4603      	mov	r3, r0
   ba35e:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   ba360:	681b      	ldr	r3, [r3, #0]
   ba362:	e9d3 2100 	ldrd	r2, r1, [r3]
   ba366:	4710      	bx	r2

000ba368 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba368:	b430      	push	{r4, r5}
   ba36a:	460d      	mov	r5, r1
   ba36c:	4611      	mov	r1, r2
   ba36e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   ba370:	6803      	ldr	r3, [r0, #0]
   ba372:	6809      	ldr	r1, [r1, #0]
   ba374:	6828      	ldr	r0, [r5, #0]
   ba376:	e9d3 4300 	ldrd	r4, r3, [r3]
   ba37a:	46a4      	mov	ip, r4
      }
   ba37c:	bc30      	pop	{r4, r5}
   ba37e:	4760      	bx	ip

000ba380 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   ba380:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba382:	b538      	push	{r3, r4, r5, lr}
   ba384:	4604      	mov	r4, r0
	switch (__op)
   ba386:	d102      	bne.n	ba38e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   ba388:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   ba38a:	6023      	str	r3, [r4, #0]
	}
   ba38c:	e003      	b.n	ba396 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   ba38e:	2a02      	cmp	r2, #2
   ba390:	d003      	beq.n	ba39a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   ba392:	2a03      	cmp	r2, #3
   ba394:	d00d      	beq.n	ba3b2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   ba396:	2000      	movs	r0, #0
   ba398:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   ba39a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   ba39c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba39e:	f7fa fb94 	bl	b4aca <_Znwj>
   ba3a2:	4603      	mov	r3, r0
   ba3a4:	2800      	cmp	r0, #0
   ba3a6:	d0f0      	beq.n	ba38a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   ba3a8:	e895 0003 	ldmia.w	r5, {r0, r1}
   ba3ac:	e883 0003 	stmia.w	r3, {r0, r1}
   ba3b0:	e7eb      	b.n	ba38a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   ba3b2:	6800      	ldr	r0, [r0, #0]
   ba3b4:	2800      	cmp	r0, #0
   ba3b6:	d0ee      	beq.n	ba396 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   ba3b8:	2108      	movs	r1, #8
   ba3ba:	f7fa fb8c 	bl	b4ad6 <_ZdlPvj>
   ba3be:	e7ea      	b.n	ba396 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000ba3c0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   ba3c0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba3c2:	b538      	push	{r3, r4, r5, lr}
   ba3c4:	4604      	mov	r4, r0
	switch (__op)
   ba3c6:	d102      	bne.n	ba3ce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   ba3c8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   ba3ca:	6023      	str	r3, [r4, #0]
	}
   ba3cc:	e003      	b.n	ba3d6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   ba3ce:	2a02      	cmp	r2, #2
   ba3d0:	d003      	beq.n	ba3da <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   ba3d2:	2a03      	cmp	r2, #3
   ba3d4:	d00d      	beq.n	ba3f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   ba3d6:	2000      	movs	r0, #0
   ba3d8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   ba3da:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   ba3dc:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba3de:	f7fa fb74 	bl	b4aca <_Znwj>
   ba3e2:	4603      	mov	r3, r0
   ba3e4:	2800      	cmp	r0, #0
   ba3e6:	d0f0      	beq.n	ba3ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   ba3e8:	e895 0003 	ldmia.w	r5, {r0, r1}
   ba3ec:	e883 0003 	stmia.w	r3, {r0, r1}
   ba3f0:	e7eb      	b.n	ba3ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   ba3f2:	6800      	ldr	r0, [r0, #0]
   ba3f4:	2800      	cmp	r0, #0
   ba3f6:	d0ee      	beq.n	ba3d6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   ba3f8:	2108      	movs	r1, #8
   ba3fa:	f7fa fb6c 	bl	b4ad6 <_ZdlPvj>
   ba3fe:	e7ea      	b.n	ba3d6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000ba400 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba400:	b510      	push	{r4, lr}
   ba402:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   ba404:	3058      	adds	r0, #88	; 0x58
   ba406:	f7fa fd15 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   ba40a:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   ba40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba412:	f7ff bd69 	b.w	b9ee8 <_ZN6StringD1Ev>

000ba416 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   ba416:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   ba418:	6843      	ldr	r3, [r0, #4]
   ba41a:	3b01      	subs	r3, #1
    {
   ba41c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   ba41e:	6043      	str	r3, [r0, #4]
   ba420:	b963      	cbnz	r3, ba43c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   ba422:	6803      	ldr	r3, [r0, #0]
   ba424:	689b      	ldr	r3, [r3, #8]
   ba426:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ba428:	68a3      	ldr	r3, [r4, #8]
   ba42a:	3b01      	subs	r3, #1
   ba42c:	60a3      	str	r3, [r4, #8]
   ba42e:	b92b      	cbnz	r3, ba43c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   ba430:	6823      	ldr	r3, [r4, #0]
   ba432:	4620      	mov	r0, r4
   ba434:	68db      	ldr	r3, [r3, #12]
    }
   ba436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   ba43a:	4718      	bx	r3
    }
   ba43c:	bd10      	pop	{r4, pc}

000ba43e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   ba43e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba442:	b2da      	uxtb	r2, r3
   ba444:	2a09      	cmp	r2, #9
   ba446:	d801      	bhi.n	ba44c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   ba448:	4618      	mov	r0, r3
   ba44a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   ba44c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba450:	2b05      	cmp	r3, #5
   ba452:	d801      	bhi.n	ba458 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   ba454:	3857      	subs	r0, #87	; 0x57
   ba456:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   ba458:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba45c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   ba45e:	bf94      	ite	ls
   ba460:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   ba462:	f04f 30ff 	movhi.w	r0, #4294967295
}
   ba466:	4770      	bx	lr

000ba468 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   ba468:	b510      	push	{r4, lr}
            locked_(false) {
   ba46a:	2300      	movs	r3, #0
   ba46c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   ba46e:	4b04      	ldr	r3, [pc, #16]	; (ba480 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   ba470:	4604      	mov	r4, r0
   ba472:	6818      	ldr	r0, [r3, #0]
   ba474:	f7fe fe1e 	bl	b90b4 <os_mutex_recursive_lock>
        locked_ = true;
   ba478:	2301      	movs	r3, #1
   ba47a:	7023      	strb	r3, [r4, #0]
    }
   ba47c:	4620      	mov	r0, r4
   ba47e:	bd10      	pop	{r4, pc}
   ba480:	2003e684 	.word	0x2003e684

000ba484 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   ba484:	b510      	push	{r4, lr}
        if (locked_) {
   ba486:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   ba488:	4604      	mov	r4, r0
        if (locked_) {
   ba48a:	b11b      	cbz	r3, ba494 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba48c:	4b02      	ldr	r3, [pc, #8]	; (ba498 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   ba48e:	6818      	ldr	r0, [r3, #0]
   ba490:	f7fe fe18 	bl	b90c4 <os_mutex_recursive_unlock>
    }
   ba494:	4620      	mov	r0, r4
   ba496:	bd10      	pop	{r4, pc}
   ba498:	2003e684 	.word	0x2003e684

000ba49c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   ba49c:	b082      	sub	sp, #8
   ba49e:	4603      	mov	r3, r0
    address_ = addr;
   ba4a0:	6808      	ldr	r0, [r1, #0]
   ba4a2:	6849      	ldr	r1, [r1, #4]
   ba4a4:	466a      	mov	r2, sp
   ba4a6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   ba4a8:	466a      	mov	r2, sp
   ba4aa:	ca03      	ldmia	r2!, {r0, r1}
   ba4ac:	6018      	str	r0, [r3, #0]
}
   ba4ae:	4618      	mov	r0, r3
    address_ = addr.address_;
   ba4b0:	6059      	str	r1, [r3, #4]
}
   ba4b2:	b002      	add	sp, #8
   ba4b4:	4770      	bx	lr

000ba4b6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   ba4b6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   ba4b8:	7982      	ldrb	r2, [r0, #6]
   ba4ba:	798b      	ldrb	r3, [r1, #6]
   ba4bc:	429a      	cmp	r2, r3
   ba4be:	d106      	bne.n	ba4ce <_ZNK8particle10BleAddresseqERKS0_+0x18>
   ba4c0:	2206      	movs	r2, #6
   ba4c2:	f002 ff58 	bl	bd376 <memcmp>
   ba4c6:	fab0 f080 	clz	r0, r0
   ba4ca:	0940      	lsrs	r0, r0, #5
}
   ba4cc:	bd08      	pop	{r3, pc}
    return false;
   ba4ce:	2000      	movs	r0, #0
   ba4d0:	e7fc      	b.n	ba4cc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000ba4d2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   ba4d2:	f04f 33ff 	mov.w	r3, #4294967295
   ba4d6:	6003      	str	r3, [r0, #0]
   ba4d8:	8083      	strh	r3, [r0, #4]
}
   ba4da:	2000      	movs	r0, #0
   ba4dc:	4770      	bx	lr

000ba4de <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   ba4de:	b508      	push	{r3, lr}
   ba4e0:	4602      	mov	r2, r0
        : address_{} {
   ba4e2:	2100      	movs	r1, #0
   ba4e4:	6001      	str	r1, [r0, #0]
   ba4e6:	6041      	str	r1, [r0, #4]
    clear();
   ba4e8:	f7ff fff3 	bl	ba4d2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   ba4ec:	7191      	strb	r1, [r2, #6]
}
   ba4ee:	4610      	mov	r0, r2
   ba4f0:	bd08      	pop	{r3, pc}
	...

000ba4f4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   ba4f4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   ba4f6:	2301      	movs	r3, #1
   ba4f8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba4fa:	4b05      	ldr	r3, [pc, #20]	; (ba510 <_ZN8particle7BleUuidC1Ev+0x1c>)
   ba4fc:	4602      	mov	r2, r0
   ba4fe:	f103 0110 	add.w	r1, r3, #16
   ba502:	f853 4b04 	ldr.w	r4, [r3], #4
   ba506:	f842 4b04 	str.w	r4, [r2], #4
   ba50a:	428b      	cmp	r3, r1
   ba50c:	d1f9      	bne.n	ba502 <_ZN8particle7BleUuidC1Ev+0xe>
}
   ba50e:	bd10      	pop	{r4, pc}
   ba510:	000bf652 	.word	0x000bf652

000ba514 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba514:	b510      	push	{r4, lr}
    if (uuid128) {
   ba516:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba518:	4604      	mov	r4, r0
    if (uuid128) {
   ba51a:	b1b1      	cbz	r1, ba54a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   ba51c:	2a01      	cmp	r2, #1
   ba51e:	f101 0210 	add.w	r2, r1, #16
   ba522:	d10a      	bne.n	ba53a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba524:	4601      	mov	r1, r0
   ba526:	f853 0b04 	ldr.w	r0, [r3], #4
   ba52a:	f841 0b04 	str.w	r0, [r1], #4
   ba52e:	4293      	cmp	r3, r2
   ba530:	d1f9      	bne.n	ba526 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   ba532:	2301      	movs	r3, #1
   ba534:	6123      	str	r3, [r4, #16]
}
   ba536:	4620      	mov	r0, r4
   ba538:	bd10      	pop	{r4, pc}
   ba53a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   ba53c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   ba540:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba544:	429a      	cmp	r2, r3
   ba546:	d1f9      	bne.n	ba53c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   ba548:	e7f3      	b.n	ba532 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   ba54a:	2210      	movs	r2, #16
   ba54c:	f002 ff4b 	bl	bd3e6 <memset>
   ba550:	e7f1      	b.n	ba536 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000ba552 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   ba552:	b538      	push	{r3, r4, r5, lr}
   ba554:	4604      	mov	r4, r0
   ba556:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   ba558:	461a      	mov	r2, r3
   ba55a:	f7ff ffdb 	bl	ba514 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   ba55e:	81a5      	strh	r5, [r4, #12]
}
   ba560:	4620      	mov	r0, r4
   ba562:	bd38      	pop	{r3, r4, r5, pc}

000ba564 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   ba564:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   ba566:	6902      	ldr	r2, [r0, #16]
   ba568:	b922      	cbnz	r2, ba574 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   ba56a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba56c:	3800      	subs	r0, #0
   ba56e:	bf18      	it	ne
   ba570:	2001      	movne	r0, #1
}
   ba572:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba574:	4902      	ldr	r1, [pc, #8]	; (ba580 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   ba576:	2210      	movs	r2, #16
   ba578:	f002 fefd 	bl	bd376 <memcmp>
   ba57c:	e7f6      	b.n	ba56c <_ZNK8particle7BleUuid7isValidEv+0x8>
   ba57e:	bf00      	nop
   ba580:	000c0218 	.word	0x000c0218

000ba584 <_ZNK8particle7BleUuid4typeEv>:
}
   ba584:	6900      	ldr	r0, [r0, #16]
   ba586:	4770      	bx	lr

000ba588 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   ba588:	b538      	push	{r3, r4, r5, lr}
   ba58a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   ba58c:	2214      	movs	r2, #20
   ba58e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   ba590:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   ba592:	f002 ff28 	bl	bd3e6 <memset>
    if (type_ == BleUuidType::SHORT) {
   ba596:	6923      	ldr	r3, [r4, #16]
   ba598:	b91b      	cbnz	r3, ba5a2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   ba59a:	89a3      	ldrh	r3, [r4, #12]
   ba59c:	802b      	strh	r3, [r5, #0]
}
   ba59e:	4628      	mov	r0, r5
   ba5a0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   ba5a2:	2301      	movs	r3, #1
   ba5a4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   ba5a6:	4621      	mov	r1, r4
   ba5a8:	462b      	mov	r3, r5
   ba5aa:	f104 0210 	add.w	r2, r4, #16
   ba5ae:	f851 0b04 	ldr.w	r0, [r1], #4
   ba5b2:	f843 0b04 	str.w	r0, [r3], #4
   ba5b6:	4291      	cmp	r1, r2
   ba5b8:	d1f9      	bne.n	ba5ae <_ZN8particle7BleUuid7halUUIDEv+0x26>
   ba5ba:	e7f0      	b.n	ba59e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000ba5bc <_ZNK8particle7BleUuid7shortedEv>:
}
   ba5bc:	8980      	ldrh	r0, [r0, #12]
   ba5be:	4770      	bx	lr

000ba5c0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   ba5c0:	4770      	bx	lr

000ba5c2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   ba5c2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba5c4:	6902      	ldr	r2, [r0, #16]
   ba5c6:	690b      	ldr	r3, [r1, #16]
   ba5c8:	429a      	cmp	r2, r3
   ba5ca:	d106      	bne.n	ba5da <_ZNK8particle7BleUuideqERKS0_+0x18>
   ba5cc:	2210      	movs	r2, #16
   ba5ce:	f002 fed2 	bl	bd376 <memcmp>
   ba5d2:	fab0 f080 	clz	r0, r0
   ba5d6:	0940      	lsrs	r0, r0, #5
}
   ba5d8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba5da:	2000      	movs	r0, #0
   ba5dc:	e7fc      	b.n	ba5d8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000ba5e0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   ba5e0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   ba5e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   ba5e6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba5e8:	4b34      	ldr	r3, [pc, #208]	; (ba6bc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   ba5ea:	460c      	mov	r4, r1
   ba5ec:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba5ee:	4602      	mov	r2, r0
   ba5f0:	f103 0110 	add.w	r1, r3, #16
   ba5f4:	f853 0b04 	ldr.w	r0, [r3], #4
   ba5f8:	f842 0b04 	str.w	r0, [r2], #4
   ba5fc:	428b      	cmp	r3, r1
   ba5fe:	d1f9      	bne.n	ba5f4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   ba600:	b344      	cbz	r4, ba654 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   ba602:	2124      	movs	r1, #36	; 0x24
   ba604:	4620      	mov	r0, r4
   ba606:	f002 ff81 	bl	bd50c <strnlen>
   ba60a:	2804      	cmp	r0, #4
   ba60c:	f04f 0500 	mov.w	r5, #0
   ba610:	d123      	bne.n	ba65a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   ba612:	f8ad 5004 	strh.w	r5, [sp, #4]
   ba616:	af01      	add	r7, sp, #4
   ba618:	1ca5      	adds	r5, r4, #2
   ba61a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   ba61c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   ba620:	f7ff ff0d 	bl	ba43e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   ba624:	f1b0 0800 	subs.w	r8, r0, #0
   ba628:	db12      	blt.n	ba650 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   ba62a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   ba62e:	f7ff ff06 	bl	ba43e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   ba632:	2800      	cmp	r0, #0
   ba634:	db0c      	blt.n	ba650 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   ba636:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba638:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   ba63c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba63e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   ba642:	d1eb      	bne.n	ba61c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   ba644:	f89d 3005 	ldrb.w	r3, [sp, #5]
   ba648:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   ba64a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba64e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   ba650:	2300      	movs	r3, #0
   ba652:	6133      	str	r3, [r6, #16]
}
   ba654:	b002      	add	sp, #8
   ba656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   ba65a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba65e:	2124      	movs	r1, #36	; 0x24
   ba660:	4620      	mov	r0, r4
   ba662:	f002 ff53 	bl	bd50c <strnlen>
   ba666:	42a8      	cmp	r0, r5
   ba668:	d807      	bhi.n	ba67a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   ba66a:	4642      	mov	r2, r8
   ba66c:	2100      	movs	r1, #0
   ba66e:	4630      	mov	r0, r6
}
   ba670:	b002      	add	sp, #8
   ba672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   ba676:	f002 beb6 	b.w	bd3e6 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba67a:	f1b8 0f00 	cmp.w	r8, #0
   ba67e:	d0e9      	beq.n	ba654 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   ba680:	5d60      	ldrb	r0, [r4, r5]
   ba682:	f7ff fedc 	bl	ba43e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   ba686:	0603      	lsls	r3, r0, #24
   ba688:	d415      	bmi.n	ba6b6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   ba68a:	0100      	lsls	r0, r0, #4
   ba68c:	f108 38ff 	add.w	r8, r8, #4294967295
   ba690:	b2c7      	uxtb	r7, r0
   ba692:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   ba696:	2124      	movs	r1, #36	; 0x24
   ba698:	4620      	mov	r0, r4
   ba69a:	f002 ff37 	bl	bd50c <strnlen>
   ba69e:	3501      	adds	r5, #1
   ba6a0:	42a8      	cmp	r0, r5
   ba6a2:	d908      	bls.n	ba6b6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   ba6a4:	5d60      	ldrb	r0, [r4, r5]
   ba6a6:	f7ff feca 	bl	ba43e <_ZN8particle11hexToNibbleEc>
   ba6aa:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   ba6ac:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   ba6ae:	bfa4      	itt	ge
   ba6b0:	4338      	orrge	r0, r7
   ba6b2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba6b6:	3501      	adds	r5, #1
   ba6b8:	e7d1      	b.n	ba65e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   ba6ba:	bf00      	nop
   ba6bc:	000bf652 	.word	0x000bf652

000ba6c0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   ba6c0:	b513      	push	{r0, r1, r4, lr}
   ba6c2:	4604      	mov	r4, r0
   ba6c4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   ba6c6:	f7ff ff15 	bl	ba4f4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   ba6ca:	4620      	mov	r0, r4
   ba6cc:	9901      	ldr	r1, [sp, #4]
   ba6ce:	f7ff ff87 	bl	ba5e0 <_ZN8particle7BleUuid9constructEPKc>
}
   ba6d2:	4620      	mov	r0, r4
   ba6d4:	b002      	add	sp, #8
   ba6d6:	bd10      	pop	{r4, pc}

000ba6d8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   ba6d8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   ba6da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba6de:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   ba6e0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   ba6e2:	8043      	strh	r3, [r0, #2]
   ba6e4:	220e      	movs	r2, #14
   ba6e6:	4629      	mov	r1, r5
   ba6e8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   ba6ea:	7105      	strb	r5, [r0, #4]
   ba6ec:	3006      	adds	r0, #6
   ba6ee:	f002 fe7a 	bl	bd3e6 <memset>
   ba6f2:	f104 0014 	add.w	r0, r4, #20
   ba6f6:	f7ff fefd 	bl	ba4f4 <_ZN8particle7BleUuidC1Ev>
   ba6fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba6fe:	f7ff fef9 	bl	ba4f4 <_ZN8particle7BleUuidC1Ev>
   ba702:	4904      	ldr	r1, [pc, #16]	; (ba714 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   ba704:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   ba708:	f7ff fc39 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   ba70c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   ba70e:	4620      	mov	r0, r4
   ba710:	bd38      	pop	{r3, r4, r5, pc}
   ba712:	bf00      	nop
   ba714:	000bfe42 	.word	0x000bfe42

000ba718 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   ba718:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   ba71a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   ba71e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   ba722:	4293      	cmp	r3, r2
   ba724:	4618      	mov	r0, r3
   ba726:	d006      	beq.n	ba736 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   ba728:	6804      	ldr	r4, [r0, #0]
   ba72a:	8824      	ldrh	r4, [r4, #0]
   ba72c:	428c      	cmp	r4, r1
   ba72e:	f103 0308 	add.w	r3, r3, #8
   ba732:	d1f6      	bne.n	ba722 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   ba734:	bd10      	pop	{r4, pc}
        return nullptr;
   ba736:	2000      	movs	r0, #0
   ba738:	e7fc      	b.n	ba734 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000ba73c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   ba73c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba73e:	4606      	mov	r6, r0
   ba740:	b085      	sub	sp, #20
   ba742:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   ba744:	460d      	mov	r5, r1
   ba746:	2900      	cmp	r1, #0
   ba748:	d050      	beq.n	ba7ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   ba74a:	2a00      	cmp	r2, #0
   ba74c:	d04e      	beq.n	ba7ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   ba74e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   ba750:	7823      	ldrb	r3, [r4, #0]
   ba752:	2af4      	cmp	r2, #244	; 0xf4
   ba754:	bf28      	it	cs
   ba756:	22f4      	movcs	r2, #244	; 0xf4
   ba758:	b343      	cbz	r3, ba7ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   ba75a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   ba75c:	0798      	lsls	r0, r3, #30
   ba75e:	d509      	bpl.n	ba774 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   ba760:	89a0      	ldrh	r0, [r4, #12]
   ba762:	9203      	str	r2, [sp, #12]
   ba764:	2300      	movs	r3, #0
   ba766:	f7fe fc0f 	bl	b8f88 <hal_ble_gatt_server_set_characteristic_value>
   ba76a:	2800      	cmp	r0, #0
   ba76c:	9a03      	ldr	r2, [sp, #12]
   ba76e:	da03      	bge.n	ba778 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   ba770:	b005      	add	sp, #20
   ba772:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   ba774:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba778:	6834      	ldr	r4, [r6, #0]
   ba77a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   ba77c:	06d9      	lsls	r1, r3, #27
   ba77e:	d509      	bpl.n	ba794 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   ba780:	2f01      	cmp	r7, #1
   ba782:	d007      	beq.n	ba794 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba784:	89a0      	ldrh	r0, [r4, #12]
   ba786:	2300      	movs	r3, #0
   ba788:	4629      	mov	r1, r5
}
   ba78a:	b005      	add	sp, #20
   ba78c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba790:	f7fe bc2c 	b.w	b8fec <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   ba794:	069b      	lsls	r3, r3, #26
   ba796:	d5eb      	bpl.n	ba770 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba798:	2f02      	cmp	r7, #2
   ba79a:	d0e9      	beq.n	ba770 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba79c:	89a0      	ldrh	r0, [r4, #12]
   ba79e:	2300      	movs	r3, #0
   ba7a0:	4629      	mov	r1, r5
}
   ba7a2:	b005      	add	sp, #20
   ba7a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba7a8:	f7fe bc2a 	b.w	b9000 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   ba7ac:	8860      	ldrh	r0, [r4, #2]
   ba7ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba7b2:	4288      	cmp	r0, r1
   ba7b4:	d01c      	beq.n	ba7f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   ba7b6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   ba7b8:	074e      	lsls	r6, r1, #29
   ba7ba:	d501      	bpl.n	ba7c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   ba7bc:	2f01      	cmp	r7, #1
   ba7be:	d104      	bne.n	ba7ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba7c0:	070b      	lsls	r3, r1, #28
   ba7c2:	d409      	bmi.n	ba7d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   ba7c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba7c8:	e7d2      	b.n	ba770 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba7ca:	89a1      	ldrh	r1, [r4, #12]
   ba7cc:	9300      	str	r3, [sp, #0]
   ba7ce:	4613      	mov	r3, r2
   ba7d0:	462a      	mov	r2, r5
   ba7d2:	f7fe fbed 	bl	b8fb0 <hal_ble_gatt_client_write_without_response>
   ba7d6:	e7cb      	b.n	ba770 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba7d8:	2f02      	cmp	r7, #2
   ba7da:	d0f3      	beq.n	ba7c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba7dc:	2300      	movs	r3, #0
   ba7de:	89a1      	ldrh	r1, [r4, #12]
   ba7e0:	9300      	str	r3, [sp, #0]
   ba7e2:	4613      	mov	r3, r2
   ba7e4:	462a      	mov	r2, r5
   ba7e6:	f7fe fbd9 	bl	b8f9c <hal_ble_gatt_client_write_with_response>
   ba7ea:	e7c1      	b.n	ba770 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba7ec:	4802      	ldr	r0, [pc, #8]	; (ba7f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   ba7ee:	e7bf      	b.n	ba770 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   ba7f0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba7f4:	e7bc      	b.n	ba770 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba7f6:	bf00      	nop
   ba7f8:	fffffef2 	.word	0xfffffef2

000ba7fc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   ba7fc:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   ba7fe:	688a      	ldr	r2, [r1, #8]
   ba800:	6809      	ldr	r1, [r1, #0]
   ba802:	f7ff bf9b 	b.w	ba73c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000ba808 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   ba808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba80c:	2600      	movs	r6, #0
   ba80e:	6006      	str	r6, [r0, #0]
   ba810:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba812:	2028      	movs	r0, #40	; 0x28
   ba814:	460c      	mov	r4, r1
   ba816:	f7fa f958 	bl	b4aca <_Znwj>
	  auto __pi = ::new (__mem)
   ba81a:	1e05      	subs	r5, r0, #0
   ba81c:	f105 080c 	add.w	r8, r5, #12
   ba820:	d00f      	beq.n	ba842 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   ba822:	2301      	movs	r3, #1
   ba824:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   ba828:	4b08      	ldr	r3, [pc, #32]	; (ba84c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   ba82a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   ba82c:	4640      	mov	r0, r8
   ba82e:	f7ff fe61 	bl	ba4f4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   ba832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   ba834:	622e      	str	r6, [r5, #32]
   ba836:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   ba83a:	4646      	mov	r6, r8
   ba83c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   ba83e:	6823      	ldr	r3, [r4, #0]
   ba840:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   ba842:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   ba846:	4638      	mov	r0, r7
   ba848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba84c:	000c01d0 	.word	0x000c01d0

000ba850 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   ba850:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba852:	2500      	movs	r5, #0
   ba854:	6005      	str	r5, [r0, #0]
   ba856:	4606      	mov	r6, r0
   ba858:	2030      	movs	r0, #48	; 0x30
   ba85a:	f7fa f936 	bl	b4aca <_Znwj>
	  auto __pi = ::new (__mem)
   ba85e:	4604      	mov	r4, r0
   ba860:	b188      	cbz	r0, ba886 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   ba862:	2301      	movs	r3, #1
   ba864:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   ba868:	4b09      	ldr	r3, [pc, #36]	; (ba890 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   ba86a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   ba86c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba870:	8183      	strh	r3, [r0, #12]
   ba872:	300e      	adds	r0, #14
   ba874:	f7ff fe33 	bl	ba4de <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   ba878:	e9c4 5506 	strd	r5, r5, [r4, #24]
   ba87c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   ba880:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   ba884:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   ba886:	6074      	str	r4, [r6, #4]
   ba888:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   ba88a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   ba88c:	4630      	mov	r0, r6
   ba88e:	bd70      	pop	{r4, r5, r6, pc}
   ba890:	000c01ec 	.word	0x000c01ec

000ba894 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   ba894:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba896:	460d      	mov	r5, r1
   ba898:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba89a:	a801      	add	r0, sp, #4
   ba89c:	f7ff fde4 	bl	ba468 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba8a0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba8a2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   ba8a6:	6023      	str	r3, [r4, #0]
   ba8a8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   ba8ac:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   ba8ae:	a801      	add	r0, sp, #4
   ba8b0:	f7ff fde8 	bl	ba484 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   ba8b4:	4620      	mov	r0, r4
   ba8b6:	b003      	add	sp, #12
   ba8b8:	bd30      	pop	{r4, r5, pc}

000ba8ba <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   ba8ba:	b530      	push	{r4, r5, lr}
   ba8bc:	4605      	mov	r5, r0
   ba8be:	b087      	sub	sp, #28
   ba8c0:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba8c2:	a801      	add	r0, sp, #4
   ba8c4:	f7ff fdd0 	bl	ba468 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   ba8c8:	682a      	ldr	r2, [r5, #0]
   ba8ca:	6823      	ldr	r3, [r4, #0]
   ba8cc:	8812      	ldrh	r2, [r2, #0]
   ba8ce:	881b      	ldrh	r3, [r3, #0]
   ba8d0:	429a      	cmp	r2, r3
   ba8d2:	d10d      	bne.n	ba8f0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   ba8d4:	4629      	mov	r1, r5
   ba8d6:	a802      	add	r0, sp, #8
   ba8d8:	f7ff ffdc 	bl	ba894 <_ZNK8particle13BlePeerDevice7addressEv>
   ba8dc:	4621      	mov	r1, r4
   ba8de:	a804      	add	r0, sp, #16
   ba8e0:	f7ff ffd8 	bl	ba894 <_ZNK8particle13BlePeerDevice7addressEv>
   ba8e4:	a904      	add	r1, sp, #16
   ba8e6:	a802      	add	r0, sp, #8
   ba8e8:	f7ff fde5 	bl	ba4b6 <_ZNK8particle10BleAddresseqERKS0_>
   ba8ec:	4604      	mov	r4, r0
   ba8ee:	b900      	cbnz	r0, ba8f2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   ba8f0:	2400      	movs	r4, #0
    WiringBleLock lk;
   ba8f2:	a801      	add	r0, sp, #4
   ba8f4:	f7ff fdc6 	bl	ba484 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba8f8:	4620      	mov	r0, r4
   ba8fa:	b007      	add	sp, #28
   ba8fc:	bd30      	pop	{r4, r5, pc}
	...

000ba900 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   ba900:	b510      	push	{r4, lr}
   ba902:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   ba904:	2064      	movs	r0, #100	; 0x64
   ba906:	f7fa f8e0 	bl	b4aca <_Znwj>
   ba90a:	b168      	cbz	r0, ba928 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   ba90c:	2300      	movs	r3, #0
   ba90e:	e9c0 3300 	strd	r3, r3, [r0]
   ba912:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba916:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba91a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   ba91e:	6203      	str	r3, [r0, #32]
   ba920:	62c3      	str	r3, [r0, #44]	; 0x2c
   ba922:	63c3      	str	r3, [r0, #60]	; 0x3c
   ba924:	64c3      	str	r3, [r0, #76]	; 0x4c
   ba926:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   ba928:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   ba92a:	b920      	cbnz	r0, ba936 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   ba92c:	4a0a      	ldr	r2, [pc, #40]	; (ba958 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba92e:	490b      	ldr	r1, [pc, #44]	; (ba95c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   ba930:	200a      	movs	r0, #10
   ba932:	f7fe fcff 	bl	b9334 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   ba936:	2000      	movs	r0, #0
   ba938:	f7fe faea 	bl	b8f10 <hal_ble_stack_init>
   ba93c:	b120      	cbz	r0, ba948 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   ba93e:	4a06      	ldr	r2, [pc, #24]	; (ba958 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba940:	4907      	ldr	r1, [pc, #28]	; (ba960 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   ba942:	200a      	movs	r0, #10
   ba944:	f7fe fcf6 	bl	b9334 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   ba948:	6821      	ldr	r1, [r4, #0]
   ba94a:	4806      	ldr	r0, [pc, #24]	; (ba964 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   ba94c:	2200      	movs	r2, #0
   ba94e:	f7fe fb43 	bl	b8fd8 <hal_ble_set_callback_on_periph_link_events>
}
   ba952:	4620      	mov	r0, r4
   ba954:	bd10      	pop	{r4, pc}
   ba956:	bf00      	nop
   ba958:	000b8e71 	.word	0x000b8e71
   ba95c:	000c0084 	.word	0x000c0084
   ba960:	000c00c2 	.word	0x000c00c2
   ba964:	000baf35 	.word	0x000baf35

000ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   ba968:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   ba96a:	4c0a      	ldr	r4, [pc, #40]	; (ba994 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   ba96c:	7823      	ldrb	r3, [r4, #0]
   ba96e:	f3bf 8f5b 	dmb	ish
   ba972:	07db      	lsls	r3, r3, #31
   ba974:	d40c      	bmi.n	ba990 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba976:	4620      	mov	r0, r4
   ba978:	f7fa f8af 	bl	b4ada <__cxa_guard_acquire>
   ba97c:	b140      	cbz	r0, ba990 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba97e:	4806      	ldr	r0, [pc, #24]	; (ba998 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba980:	f7ff ffbe 	bl	ba900 <_ZN8particle14BleLocalDeviceC1Ev>
   ba984:	4620      	mov	r0, r4
   ba986:	f7fa f8ad 	bl	b4ae4 <__cxa_guard_release>
   ba98a:	4804      	ldr	r0, [pc, #16]	; (ba99c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   ba98c:	f002 fcce 	bl	bd32c <atexit>
    return instance;
}
   ba990:	4801      	ldr	r0, [pc, #4]	; (ba998 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba992:	bd10      	pop	{r4, pc}
   ba994:	2003e67c 	.word	0x2003e67c
   ba998:	2003e688 	.word	0x2003e688
   ba99c:	000babdd 	.word	0x000babdd

000ba9a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba9a0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   ba9a2:	6803      	ldr	r3, [r0, #0]
   ba9a4:	3b09      	subs	r3, #9
   ba9a6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba9a8:	b08d      	sub	sp, #52	; 0x34
   ba9aa:	4604      	mov	r4, r0
   ba9ac:	460d      	mov	r5, r1
    switch (event->type) {
   ba9ae:	d811      	bhi.n	ba9d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   ba9b0:	f7ff ffda 	bl	ba968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba9b4:	88a1      	ldrh	r1, [r4, #4]
   ba9b6:	6800      	ldr	r0, [r0, #0]
   ba9b8:	f7ff feae 	bl	ba718 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   ba9bc:	4603      	mov	r3, r0
   ba9be:	b958      	cbnz	r0, ba9d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   ba9c0:	2220      	movs	r2, #32
   ba9c2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   ba9c6:	4a0b      	ldr	r2, [pc, #44]	; (ba9f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   ba9c8:	9200      	str	r2, [sp, #0]
   ba9ca:	490b      	ldr	r1, [pc, #44]	; (ba9f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   ba9cc:	aa04      	add	r2, sp, #16
   ba9ce:	2032      	movs	r0, #50	; 0x32
   ba9d0:	f7fe fcb8 	bl	b9344 <log_message>
}
   ba9d4:	b00d      	add	sp, #52	; 0x34
   ba9d6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   ba9d8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   ba9da:	2a00      	cmp	r2, #0
   ba9dc:	d0fa      	beq.n	ba9d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   ba9de:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba9e2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   ba9e6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   ba9ea:	6dac      	ldr	r4, [r5, #88]	; 0x58
   ba9ec:	aa04      	add	r2, sp, #16
   ba9ee:	a903      	add	r1, sp, #12
   ba9f0:	47a0      	blx	r4
}
   ba9f2:	e7ef      	b.n	ba9d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   ba9f4:	000c0104 	.word	0x000c0104
   ba9f8:	000c009b 	.word	0x000c009b

000ba9fc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   ba9fc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   ba9fe:	2000      	movs	r0, #0
   baa00:	f7fe fa86 	bl	b8f10 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   baa04:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   baa08:	bd08      	pop	{r3, pc}

000baa0a <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   baa0a:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   baa0c:	2100      	movs	r1, #0
   baa0e:	f7fe ba87 	b.w	b8f20 <hal_ble_select_antenna>

000baa12 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   baa12:	b919      	cbnz	r1, baa1c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   baa14:	460a      	mov	r2, r1
   baa16:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   baa18:	f7fe ba8a 	b.w	b8f30 <hal_ble_gap_set_advertising_data>
   baa1c:	e9d1 0100 	ldrd	r0, r1, [r1]
   baa20:	2200      	movs	r2, #0
   baa22:	e7f9      	b.n	baa18 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000baa24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   baa24:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   baa26:	1e14      	subs	r4, r2, #0
   baa28:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   baa2a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   baa2c:	db02      	blt.n	baa34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   baa2e:	1862      	adds	r2, r4, r1
   baa30:	429a      	cmp	r2, r3
   baa32:	dd00      	ble.n	baa36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   baa34:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   baa36:	682a      	ldr	r2, [r5, #0]
   baa38:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   baa3a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   baa3c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   baa3e:	1a52      	subs	r2, r2, r1
   baa40:	f002 fcb7 	bl	bd3b2 <memmove>
    size_ -= n;
   baa44:	686a      	ldr	r2, [r5, #4]
   baa46:	1b12      	subs	r2, r2, r4
   baa48:	606a      	str	r2, [r5, #4]
}
   baa4a:	bd38      	pop	{r3, r4, r5, pc}

000baa4c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   baa4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   baa4e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   baa50:	4604      	mov	r4, r0
   baa52:	460d      	mov	r5, r1
   baa54:	ab01      	add	r3, sp, #4
   baa56:	e9d0 0100 	ldrd	r0, r1, [r0]
   baa5a:	f7ff fc5f 	bl	ba31c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   baa5e:	4602      	mov	r2, r0
   baa60:	b138      	cbz	r0, baa72 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   baa62:	9901      	ldr	r1, [sp, #4]
   baa64:	4620      	mov	r0, r4
   baa66:	f7ff ffdd 	bl	baa24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   baa6a:	4629      	mov	r1, r5
   baa6c:	4620      	mov	r0, r4
   baa6e:	f7ff ffed 	bl	baa4c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   baa72:	b003      	add	sp, #12
   baa74:	bd30      	pop	{r4, r5, pc}

000baa76 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   baa76:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   baa78:	460c      	mov	r4, r1
   baa7a:	b929      	cbnz	r1, baa88 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   baa7c:	460a      	mov	r2, r1
   baa7e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   baa80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   baa84:	f7fe ba5c 	b.w	b8f40 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   baa88:	2101      	movs	r1, #1
   baa8a:	4620      	mov	r0, r4
   baa8c:	f7ff ffde 	bl	baa4c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   baa90:	e9d4 0100 	ldrd	r0, r1, [r4]
   baa94:	2200      	movs	r2, #0
   baa96:	e7f3      	b.n	baa80 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000baa98 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   baa98:	b538      	push	{r3, r4, r5, lr}
   baa9a:	4604      	mov	r4, r0
   baa9c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   baa9e:	f7ff ffb8 	bl	baa12 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   baaa2:	2800      	cmp	r0, #0
   baaa4:	db0a      	blt.n	baabc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   baaa6:	4629      	mov	r1, r5
   baaa8:	4620      	mov	r0, r4
   baaaa:	f7ff ffe4 	bl	baa76 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   baaae:	2800      	cmp	r0, #0
   baab0:	db04      	blt.n	baabc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   baab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   baab6:	2000      	movs	r0, #0
   baab8:	f7fe ba4a 	b.w	b8f50 <hal_ble_gap_start_advertising>
}
   baabc:	bd38      	pop	{r3, r4, r5, pc}
	...

000baac0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   baac0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   baac2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   baac4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   baac6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baac8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   baaca:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baacc:	f7f9 fffd 	bl	b4aca <_Znwj>
   baad0:	b118      	cbz	r0, baada <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   baad2:	682b      	ldr	r3, [r5, #0]
   baad4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   baad6:	686b      	ldr	r3, [r5, #4]
   baad8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   baada:	4b03      	ldr	r3, [pc, #12]	; (baae8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   baadc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   baade:	4b03      	ldr	r3, [pc, #12]	; (baaec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baae0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   baae2:	60a3      	str	r3, [r4, #8]
      }
   baae4:	4620      	mov	r0, r4
   baae6:	bd38      	pop	{r3, r4, r5, pc}
   baae8:	000ba369 	.word	0x000ba369
   baaec:	000ba3c1 	.word	0x000ba3c1

000baaf0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   baaf0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   baaf2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   baaf4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   baaf6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baaf8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   baafa:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baafc:	f7f9 ffe5 	bl	b4aca <_Znwj>
   bab00:	b118      	cbz	r0, bab0a <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   bab02:	682b      	ldr	r3, [r5, #0]
   bab04:	6003      	str	r3, [r0, #0]
   bab06:	686b      	ldr	r3, [r5, #4]
   bab08:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bab0a:	4b03      	ldr	r3, [pc, #12]	; (bab18 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   bab0c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bab0e:	4b03      	ldr	r3, [pc, #12]	; (bab1c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bab10:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bab12:	60a3      	str	r3, [r4, #8]
      }
   bab14:	4620      	mov	r0, r4
   bab16:	bd38      	pop	{r3, r4, r5, pc}
   bab18:	000ba35d 	.word	0x000ba35d
   bab1c:	000ba381 	.word	0x000ba381

000bab20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bab20:	680b      	ldr	r3, [r1, #0]
   bab22:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bab24:	b113      	cbz	r3, bab2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bab26:	685a      	ldr	r2, [r3, #4]
   bab28:	3201      	adds	r2, #1
   bab2a:	605a      	str	r2, [r3, #4]
      }
   bab2c:	4770      	bx	lr

000bab2e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bab2e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bab30:	f851 3b04 	ldr.w	r3, [r1], #4
   bab34:	4604      	mov	r4, r0
   bab36:	f840 3b04 	str.w	r3, [r0], #4
   bab3a:	f7ff fff1 	bl	bab20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bab3e:	6823      	ldr	r3, [r4, #0]
   bab40:	b90b      	cbnz	r3, bab46 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bab42:	f7ff fc01 	bl	ba348 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bab46:	4620      	mov	r0, r4
   bab48:	bd10      	pop	{r4, pc}

000bab4a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bab4a:	b510      	push	{r4, lr}
   bab4c:	f851 3b04 	ldr.w	r3, [r1], #4
   bab50:	4604      	mov	r4, r0
   bab52:	f840 3b04 	str.w	r3, [r0], #4
   bab56:	f7ff ffe3 	bl	bab20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bab5a:	4620      	mov	r0, r4
   bab5c:	bd10      	pop	{r4, pc}

000bab5e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bab5e:	b510      	push	{r4, lr}
   bab60:	f851 3b04 	ldr.w	r3, [r1], #4
   bab64:	4604      	mov	r4, r0
   bab66:	f840 3b04 	str.w	r3, [r0], #4
   bab6a:	f7ff ffd9 	bl	bab20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bab6e:	4620      	mov	r0, r4
   bab70:	bd10      	pop	{r4, pc}

000bab72 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bab72:	b510      	push	{r4, lr}
   bab74:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bab76:	3004      	adds	r0, #4
   bab78:	f7fa fdfe 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bab7c:	4620      	mov	r0, r4
   bab7e:	bd10      	pop	{r4, pc}

000bab80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bab80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bab82:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bab86:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bab88:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bab8c:	42ae      	cmp	r6, r5
   bab8e:	d004      	beq.n	bab9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bab90:	1d28      	adds	r0, r5, #4
   bab92:	f7fa fdf1 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bab96:	3508      	adds	r5, #8
   bab98:	e7f8      	b.n	bab8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bab9a:	6820      	ldr	r0, [r4, #0]
   bab9c:	f7fe fcc6 	bl	b952c <free>
}
   baba0:	4620      	mov	r0, r4
   baba2:	bd70      	pop	{r4, r5, r6, pc}

000baba4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   baba4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   baba6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   babaa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   babac:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   babb0:	42ae      	cmp	r6, r5
   babb2:	d004      	beq.n	babbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   babb4:	1d28      	adds	r0, r5, #4
   babb6:	f7fa fddf 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   babba:	3508      	adds	r5, #8
   babbc:	e7f8      	b.n	babb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   babbe:	6820      	ldr	r0, [r4, #0]
   babc0:	f7fe fcb4 	bl	b952c <free>
}
   babc4:	4620      	mov	r0, r4
   babc6:	bd70      	pop	{r4, r5, r6, pc}

000babc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   babc8:	b510      	push	{r4, lr}
   babca:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   babcc:	3024      	adds	r0, #36	; 0x24
   babce:	f7ff ffe9 	bl	baba4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   babd2:	f104 0018 	add.w	r0, r4, #24
   babd6:	f7ff ffd3 	bl	bab80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   babda:	bd10      	pop	{r4, pc}

000babdc <__tcf_0>:
    static BleLocalDevice instance;
   babdc:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   babde:	4b17      	ldr	r3, [pc, #92]	; (bac3c <__tcf_0+0x60>)
   babe0:	681c      	ldr	r4, [r3, #0]
   babe2:	b354      	cbz	r4, bac3a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   babe4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   babe8:	f7fa f924 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
   babec:	f104 0044 	add.w	r0, r4, #68	; 0x44
   babf0:	f7fa f920 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
   babf4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   babf8:	f7fa f91c 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
   babfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bac00:	f7fa f918 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bac04:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bac08:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bac0c:	42ae      	cmp	r6, r5
   bac0e:	d004      	beq.n	bac1a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bac10:	1d28      	adds	r0, r5, #4
   bac12:	f7fa fdb1 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bac16:	3508      	adds	r5, #8
   bac18:	e7f8      	b.n	bac0c <__tcf_0+0x30>
    ::free(ptr);
   bac1a:	69a0      	ldr	r0, [r4, #24]
   bac1c:	f7fe fc86 	bl	b952c <free>
    ~BleLocalDeviceImpl() = default;
   bac20:	f104 000c 	add.w	r0, r4, #12
   bac24:	f7ff ffbe 	bl	baba4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bac28:	4620      	mov	r0, r4
   bac2a:	f7ff ffa9 	bl	bab80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bac2e:	4620      	mov	r0, r4
   bac30:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bac32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bac36:	f7f9 bf4e 	b.w	b4ad6 <_ZdlPvj>
   bac3a:	bd70      	pop	{r4, r5, r6, pc}
   bac3c:	2003e688 	.word	0x2003e688

000bac40 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bac40:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bac42:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bac44:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bac48:	e9c1 3300 	strd	r3, r3, [r1]
   bac4c:	6803      	ldr	r3, [r0, #0]
   bac4e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bac50:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bac52:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bac54:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bac56:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   bac58:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   bac5a:	f7fa fd8d 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   bac5e:	b002      	add	sp, #8
   bac60:	bd10      	pop	{r4, pc}

000bac62 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bac62:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bac64:	b510      	push	{r4, lr}
      if (_M_empty())
   bac66:	b90a      	cbnz	r2, bac6c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bac68:	f002 fa24 	bl	bd0b4 <_ZSt25__throw_bad_function_callv>
    }
   bac6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bac70:	68c3      	ldr	r3, [r0, #12]
   bac72:	4718      	bx	r3

000bac74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bac74:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bac76:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bac78:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bac7a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bac7c:	dd03      	ble.n	bac86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bac7e:	f7fe fc5d 	bl	b953c <realloc>
            if (!d) {
   bac82:	b918      	cbnz	r0, bac8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bac84:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bac86:	f7fe fc51 	bl	b952c <free>
        T* d = nullptr;
   bac8a:	2000      	movs	r0, #0
        data_ = d;
   bac8c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bac8e:	60a5      	str	r5, [r4, #8]
        return true;
   bac90:	2001      	movs	r0, #1
   bac92:	e7f7      	b.n	bac84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bac94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bac94:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bac96:	6883      	ldr	r3, [r0, #8]
   bac98:	428b      	cmp	r3, r1
   bac9a:	da02      	bge.n	baca2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bac9c:	f7ff ffea 	bl	bac74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   baca0:	bd08      	pop	{r3, pc}
    return true;
   baca2:	2001      	movs	r0, #1
   baca4:	e7fc      	b.n	baca0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000baca6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bacaa:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bacac:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bacae:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bacb0:	4419      	add	r1, r3
   bacb2:	6883      	ldr	r3, [r0, #8]
   bacb4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bacb6:	4604      	mov	r4, r0
   bacb8:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bacba:	dc12      	bgt.n	bace2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bacbc:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bacbe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bacc0:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bacc2:	1bd2      	subs	r2, r2, r7
   bacc4:	4631      	mov	r1, r6
   bacc6:	1970      	adds	r0, r6, r5
   bacc8:	f002 fb73 	bl	bd3b2 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   baccc:	462a      	mov	r2, r5
   bacce:	4641      	mov	r1, r8
   bacd0:	4630      	mov	r0, r6
   bacd2:	f002 fb60 	bl	bd396 <memcpy>
    size_ += n;
   bacd6:	6863      	ldr	r3, [r4, #4]
   bacd8:	442b      	add	r3, r5
   bacda:	6063      	str	r3, [r4, #4]
    return true;
   bacdc:	2001      	movs	r0, #1
}
   bacde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bace2:	f7ff ffc7 	bl	bac74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bace6:	2800      	cmp	r0, #0
   bace8:	d1e8      	bne.n	bacbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bacea:	e7f8      	b.n	bacde <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bacec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bacec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bacee:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bacf0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bacf4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bacf6:	4604      	mov	r4, r0
   bacf8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bacfa:	da0b      	bge.n	bad14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bacfc:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bacfe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bad00:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bad02:	1b52      	subs	r2, r2, r5
   bad04:	1c48      	adds	r0, r1, #1
   bad06:	f002 fb54 	bl	bd3b2 <memmove>
    new(p) T(std::move(value));
   bad0a:	557e      	strb	r6, [r7, r5]
    ++size_;
   bad0c:	6863      	ldr	r3, [r4, #4]
   bad0e:	3301      	adds	r3, #1
   bad10:	6063      	str	r3, [r4, #4]
}
   bad12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bad14:	3101      	adds	r1, #1
   bad16:	f7ff ffad 	bl	bac74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bad1a:	2800      	cmp	r0, #0
   bad1c:	d1ee      	bne.n	bacfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bad1e:	e7f8      	b.n	bad12 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bad20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bad20:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bad22:	6841      	ldr	r1, [r0, #4]
   bad24:	f7ff bfe2 	b.w	bacec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bad28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bad28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bad2c:	4604      	mov	r4, r0
   bad2e:	461d      	mov	r5, r3
   bad30:	460f      	mov	r7, r1
   bad32:	ab01      	add	r3, sp, #4
   bad34:	4690      	mov	r8, r2
   bad36:	460a      	mov	r2, r1
   bad38:	e9d0 0100 	ldrd	r0, r1, [r0]
   bad3c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bad40:	f7ff faec 	bl	ba31c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bad44:	1cae      	adds	r6, r5, #2
   bad46:	6863      	ldr	r3, [r4, #4]
   bad48:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bad4a:	f1b9 0f00 	cmp.w	r9, #0
   bad4e:	d126      	bne.n	bad9e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bad50:	b328      	cbz	r0, bad9e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bad52:	4433      	add	r3, r6
   bad54:	1a1b      	subs	r3, r3, r0
   bad56:	2bff      	cmp	r3, #255	; 0xff
   bad58:	d809      	bhi.n	bad6e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bad5a:	9901      	ldr	r1, [sp, #4]
   bad5c:	4620      	mov	r0, r4
   bad5e:	f7ff fe61 	bl	baa24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bad62:	6861      	ldr	r1, [r4, #4]
   bad64:	4620      	mov	r0, r4
   bad66:	4431      	add	r1, r6
   bad68:	f7ff ff94 	bl	bac94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bad6c:	b918      	cbnz	r0, bad76 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bad6e:	6860      	ldr	r0, [r4, #4]
}
   bad70:	b003      	add	sp, #12
   bad72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bad76:	1c6a      	adds	r2, r5, #1
   bad78:	9901      	ldr	r1, [sp, #4]
   bad7a:	b2d2      	uxtb	r2, r2
   bad7c:	4620      	mov	r0, r4
   bad7e:	f7ff ffb5 	bl	bacec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bad82:	9901      	ldr	r1, [sp, #4]
   bad84:	463a      	mov	r2, r7
   bad86:	3101      	adds	r1, #1
   bad88:	4620      	mov	r0, r4
   bad8a:	f7ff ffaf 	bl	bacec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bad8e:	9901      	ldr	r1, [sp, #4]
   bad90:	462b      	mov	r3, r5
   bad92:	4642      	mov	r2, r8
   bad94:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bad96:	4620      	mov	r0, r4
   bad98:	f7ff ff85 	bl	baca6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bad9c:	e7e7      	b.n	bad6e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bad9e:	18f1      	adds	r1, r6, r3
   bada0:	29ff      	cmp	r1, #255	; 0xff
   bada2:	d8e4      	bhi.n	bad6e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bada4:	4620      	mov	r0, r4
   bada6:	f7ff ff75 	bl	bac94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   badaa:	2800      	cmp	r0, #0
   badac:	d0df      	beq.n	bad6e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   badae:	1c69      	adds	r1, r5, #1
   badb0:	b2c9      	uxtb	r1, r1
   badb2:	4620      	mov	r0, r4
   badb4:	f7ff ffb4 	bl	bad20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   badb8:	4639      	mov	r1, r7
   badba:	4620      	mov	r0, r4
   badbc:	f7ff ffb0 	bl	bad20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   badc0:	6861      	ldr	r1, [r4, #4]
   badc2:	462b      	mov	r3, r5
   badc4:	4642      	mov	r2, r8
   badc6:	e7e6      	b.n	bad96 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000badc8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   badc8:	b430      	push	{r4, r5}
   badca:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   badce:	b11a      	cbz	r2, badd8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   badd0:	9502      	str	r5, [sp, #8]
}
   badd2:	bc30      	pop	{r4, r5}
   badd4:	f7ff bfa8 	b.w	bad28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   badd8:	6840      	ldr	r0, [r0, #4]
}
   badda:	bc30      	pop	{r4, r5}
   baddc:	4770      	bx	lr

000badde <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   badde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bade0:	2300      	movs	r3, #0
   bade2:	e9c0 3300 	strd	r3, r3, [r0]
   bade6:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bade8:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   badea:	9300      	str	r3, [sp, #0]
   badec:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   badee:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   badf2:	4619      	mov	r1, r3
   badf4:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   badf8:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   badfa:	f7ff ffe5 	bl	badc8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   badfe:	4620      	mov	r0, r4
   bae00:	b004      	add	sp, #16
   bae02:	bd10      	pop	{r4, pc}

000bae04 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   bae04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bae06:	460a      	mov	r2, r1
   bae08:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   bae0a:	2114      	movs	r1, #20
   bae0c:	4610      	mov	r0, r2
   bae0e:	9203      	str	r2, [sp, #12]
   bae10:	f002 fb7c 	bl	bd50c <strnlen>
   bae14:	2100      	movs	r1, #0
   bae16:	4603      	mov	r3, r0
   bae18:	9100      	str	r1, [sp, #0]
   bae1a:	9a03      	ldr	r2, [sp, #12]
   bae1c:	2109      	movs	r1, #9
   bae1e:	4620      	mov	r0, r4
   bae20:	f7ff ffd2 	bl	badc8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bae24:	b004      	add	sp, #16
   bae26:	bd10      	pop	{r4, pc}

000bae28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bae28:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bae2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bae2c:	4604      	mov	r4, r0
   bae2e:	460d      	mov	r5, r1
   bae30:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bae32:	d914      	bls.n	bae5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bae34:	4290      	cmp	r0, r2
   bae36:	d213      	bcs.n	bae60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bae38:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bae3c:	1a75      	subs	r5, r6, r1
   bae3e:	f1a1 0708 	sub.w	r7, r1, #8
   bae42:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bae44:	42b7      	cmp	r7, r6
   bae46:	d018      	beq.n	bae7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bae48:	b11c      	cbz	r4, bae52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bae4a:	4631      	mov	r1, r6
   bae4c:	4620      	mov	r0, r4
   bae4e:	f7ff fe86 	bl	bab5e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bae52:	1d30      	adds	r0, r6, #4
   bae54:	f7fa fc90 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bae58:	3e08      	subs	r6, #8
   bae5a:	3c08      	subs	r4, #8
   bae5c:	e7f2      	b.n	bae44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bae5e:	d00c      	beq.n	bae7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bae60:	42b5      	cmp	r5, r6
   bae62:	d00a      	beq.n	bae7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bae64:	b11c      	cbz	r4, bae6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bae66:	4629      	mov	r1, r5
   bae68:	4620      	mov	r0, r4
   bae6a:	f7ff fe78 	bl	bab5e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bae6e:	1d28      	adds	r0, r5, #4
   bae70:	f7fa fc82 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bae74:	3508      	adds	r5, #8
   bae76:	3408      	adds	r4, #8
   bae78:	e7f2      	b.n	bae60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bae7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bae7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bae7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bae7e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bae80:	6846      	ldr	r6, [r0, #4]
   bae82:	4668      	mov	r0, sp
   bae84:	f7ff fe6b 	bl	bab5e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bae88:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bae8c:	429f      	cmp	r7, r3
   bae8e:	db12      	blt.n	baeb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bae90:	3701      	adds	r7, #1
        if (n > 0) {
   bae92:	2f00      	cmp	r7, #0
   bae94:	dd29      	ble.n	baeea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bae96:	00f8      	lsls	r0, r7, #3
   bae98:	f7fe fb40 	bl	b951c <malloc>
            if (!d) {
   bae9c:	4605      	mov	r5, r0
   bae9e:	b1f0      	cbz	r0, baede <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   baea0:	e9d4 1200 	ldrd	r1, r2, [r4]
   baea4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   baea8:	f7ff ffbe 	bl	bae28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   baeac:	6820      	ldr	r0, [r4, #0]
   baeae:	f7fe fb3d 	bl	b952c <free>
        data_ = d;
   baeb2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   baeb4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   baeb6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   baeb8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   baeba:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   baebe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   baec2:	4631      	mov	r1, r6
   baec4:	f106 0008 	add.w	r0, r6, #8
   baec8:	f7ff ffae 	bl	bae28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   baecc:	b11e      	cbz	r6, baed6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   baece:	4669      	mov	r1, sp
   baed0:	4630      	mov	r0, r6
   baed2:	f7ff fe44 	bl	bab5e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   baed6:	6863      	ldr	r3, [r4, #4]
   baed8:	3301      	adds	r3, #1
   baeda:	6063      	str	r3, [r4, #4]
    return true;
   baedc:	2501      	movs	r5, #1
   baede:	a801      	add	r0, sp, #4
   baee0:	f7fa fc4a 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   baee4:	4628      	mov	r0, r5
   baee6:	b003      	add	sp, #12
   baee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   baeea:	2500      	movs	r5, #0
   baeec:	e7de      	b.n	baeac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000baeee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   baeee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   baef0:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   baef4:	4605      	mov	r5, r0
   baef6:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   baef8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   baefc:	42a6      	cmp	r6, r4
   baefe:	d005      	beq.n	baf0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   baf00:	4639      	mov	r1, r7
   baf02:	4620      	mov	r0, r4
   baf04:	f7ff fcd9 	bl	ba8ba <_ZNK8particle13BlePeerDeviceeqERKS0_>
   baf08:	b108      	cbz	r0, baf0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   baf0a:	b914      	cbnz	r4, baf12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   baf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   baf0e:	3408      	adds	r4, #8
   baf10:	e7f4      	b.n	baefc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   baf12:	1d20      	adds	r0, r4, #4
   baf14:	f7fa fc30 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   baf18:	e9d5 3200 	ldrd	r3, r2, [r5]
   baf1c:	f104 0108 	add.w	r1, r4, #8
   baf20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   baf24:	4620      	mov	r0, r4
   baf26:	f7ff ff7f 	bl	bae28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   baf2a:	686b      	ldr	r3, [r5, #4]
   baf2c:	3b01      	subs	r3, #1
   baf2e:	606b      	str	r3, [r5, #4]
    return true;
   baf30:	e7ec      	b.n	baf0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000baf34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   baf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baf38:	4605      	mov	r5, r0
   baf3a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   baf3c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   baf3e:	460c      	mov	r4, r1
        WiringBleLock lk;
   baf40:	f7ff fa92 	bl	ba468 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   baf44:	682e      	ldr	r6, [r5, #0]
   baf46:	1ef3      	subs	r3, r6, #3
   baf48:	2b0d      	cmp	r3, #13
   baf4a:	d83c      	bhi.n	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   baf4c:	e8df f013 	tbh	[pc, r3, lsl #1]
   baf50:	0057000e 	.word	0x0057000e
   baf54:	00d3003b 	.word	0x00d3003b
   baf58:	003b003b 	.word	0x003b003b
   baf5c:	003b003b 	.word	0x003b003b
   baf60:	009d003b 	.word	0x009d003b
   baf64:	009d009d 	.word	0x009d009d
   baf68:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   baf6c:	a804      	add	r0, sp, #16
   baf6e:	f7ff fc6f 	bl	ba850 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   baf72:	9b04      	ldr	r3, [sp, #16]
   baf74:	89aa      	ldrh	r2, [r5, #12]
   baf76:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   baf78:	6869      	ldr	r1, [r5, #4]
   baf7a:	9804      	ldr	r0, [sp, #16]
   baf7c:	3108      	adds	r1, #8
   baf7e:	3002      	adds	r0, #2
   baf80:	f7ff fa8c 	bl	ba49c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   baf84:	a904      	add	r1, sp, #16
   baf86:	a806      	add	r0, sp, #24
   baf88:	f7ff fde9 	bl	bab5e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   baf8c:	a906      	add	r1, sp, #24
   baf8e:	f104 0018 	add.w	r0, r4, #24
   baf92:	f7ff ff73 	bl	bae7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   baf96:	4605      	mov	r5, r0
   baf98:	a807      	add	r0, sp, #28
   baf9a:	f7fa fbed 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baf9e:	b9c5      	cbnz	r5, bafd2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   bafa0:	2320      	movs	r3, #32
   bafa2:	e9cd 3506 	strd	r3, r5, [sp, #24]
   bafa6:	4b5e      	ldr	r3, [pc, #376]	; (bb120 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bafa8:	495e      	ldr	r1, [pc, #376]	; (bb124 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bafaa:	9300      	str	r3, [sp, #0]
   bafac:	aa06      	add	r2, sp, #24
   bafae:	462b      	mov	r3, r5
   bafb0:	2001      	movs	r0, #1
   bafb2:	f7fe f9c7 	bl	b9344 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bafb6:	9b04      	ldr	r3, [sp, #16]
   bafb8:	4629      	mov	r1, r5
   bafba:	8818      	ldrh	r0, [r3, #0]
   bafbc:	f7fd ffd0 	bl	b8f60 <hal_ble_gap_disconnect>
   bafc0:	a805      	add	r0, sp, #20
   bafc2:	f7fa fbd9 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bafc6:	a803      	add	r0, sp, #12
   bafc8:	f7ff fa5c 	bl	ba484 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bafcc:	b00e      	add	sp, #56	; 0x38
   bafce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   bafd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bafd4:	b123      	cbz	r3, bafe0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   bafd6:	a904      	add	r1, sp, #16
   bafd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bafdc:	f7ff fe41 	bl	bac62 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bafe0:	a805      	add	r0, sp, #20
   bafe2:	f7fa fbc9 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   bafe6:	2120      	movs	r1, #32
   bafe8:	2300      	movs	r3, #0
   bafea:	e9cd 1306 	strd	r1, r3, [sp, #24]
   bafee:	4a4e      	ldr	r2, [pc, #312]	; (bb128 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   baff0:	9200      	str	r2, [sp, #0]
   baff2:	494c      	ldr	r1, [pc, #304]	; (bb124 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   baff4:	aa06      	add	r2, sp, #24
   baff6:	2001      	movs	r0, #1
   baff8:	f7fe f9a4 	bl	b9344 <log_message>
   baffc:	e7e3      	b.n	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   baffe:	89a9      	ldrh	r1, [r5, #12]
   bb000:	4620      	mov	r0, r4
   bb002:	f7ff fb89 	bl	ba718 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb006:	4606      	mov	r6, r0
   bb008:	2800      	cmp	r0, #0
   bb00a:	d0dc      	beq.n	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bb00c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bb00e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bb012:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bb016:	8029      	strh	r1, [r5, #0]
   bb018:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bb01c:	429a      	cmp	r2, r3
   bb01e:	d003      	beq.n	bb028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   bb020:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb024:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bb026:	e7f9      	b.n	bb01c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   bb028:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bb02c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb030:	45b8      	cmp	r8, r7
   bb032:	d004      	beq.n	bb03e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   bb034:	1d38      	adds	r0, r7, #4
   bb036:	f7fa fb9f 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb03a:	3708      	adds	r7, #8
   bb03c:	e7f8      	b.n	bb030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   bb03e:	2300      	movs	r3, #0
   bb040:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bb042:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bb046:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb04a:	45b8      	cmp	r8, r7
   bb04c:	d004      	beq.n	bb058 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   bb04e:	1d38      	adds	r0, r7, #4
   bb050:	f7fa fb92 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb054:	3708      	adds	r7, #8
   bb056:	e7f8      	b.n	bb04a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   bb058:	2300      	movs	r3, #0
   bb05a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bb05c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   bb05e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bb060:	b123      	cbz	r3, bb06c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   bb062:	4631      	mov	r1, r6
   bb064:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bb068:	f7ff fdfb 	bl	bac62 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   bb06c:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb06e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb072:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   bb074:	4631      	mov	r1, r6
   bb076:	f104 0018 	add.w	r0, r4, #24
   bb07a:	f7ff ff38 	bl	baeee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   bb07e:	2220      	movs	r2, #32
   bb080:	2300      	movs	r3, #0
   bb082:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bb086:	4a29      	ldr	r2, [pc, #164]	; (bb12c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   bb088:	e7b2      	b.n	baff0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb08a:	89a9      	ldrh	r1, [r5, #12]
   bb08c:	4620      	mov	r0, r4
   bb08e:	f7ff fb43 	bl	ba718 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb092:	2800      	cmp	r0, #0
   bb094:	d097      	beq.n	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bb096:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bb098:	2b00      	cmp	r3, #0
   bb09a:	d094      	beq.n	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bb09c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb09e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bb0a0:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb0a4:	d001      	beq.n	bb0aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   bb0a6:	2e10      	cmp	r6, #16
   bb0a8:	d117      	bne.n	bb0da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   bb0aa:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bb0ac:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bb0ae:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bb0b0:	2506      	movs	r5, #6
                        };
   bb0b2:	f88d 3015 	strb.w	r3, [sp, #21]
   bb0b6:	9104      	str	r1, [sp, #16]
   bb0b8:	f88d 2014 	strb.w	r2, [sp, #20]
   bb0bc:	9006      	str	r0, [sp, #24]
   bb0be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bb0c2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bb0c4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bb0c8:	9508      	str	r5, [sp, #32]
   bb0ca:	e883 0003 	stmia.w	r3, {r0, r1}
   bb0ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0d0:	a906      	add	r1, sp, #24
   bb0d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bb0d6:	4798      	blx	r3
   bb0d8:	e775      	b.n	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bb0da:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb0dc:	bf01      	itttt	eq
   bb0de:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bb0e0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb0e2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bb0e6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bb0e8:	bf0f      	iteee	eq
   bb0ea:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bb0ee:	461a      	movne	r2, r3
   bb0f0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bb0f2:	461d      	movne	r5, r3
   bb0f4:	e7dd      	b.n	bb0b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb0f6:	89a9      	ldrh	r1, [r5, #12]
   bb0f8:	4620      	mov	r0, r4
   bb0fa:	f7ff fb0d 	bl	ba718 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bb0fe:	4601      	mov	r1, r0
   bb100:	2800      	cmp	r0, #0
   bb102:	f43f af60 	beq.w	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb106:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb108:	2b00      	cmp	r3, #0
   bb10a:	f43f af5c 	beq.w	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bb10e:	686b      	ldr	r3, [r5, #4]
   bb110:	9306      	str	r3, [sp, #24]
   bb112:	aa06      	add	r2, sp, #24
   bb114:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb116:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bb11a:	4798      	blx	r3
   bb11c:	e753      	b.n	bafc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb11e:	bf00      	nop
   bb120:	000c011c 	.word	0x000c011c
   bb124:	000c009b 	.word	0x000c009b
   bb128:	000c0142 	.word	0x000c0142
   bb12c:	000c014c 	.word	0x000c014c

000bb130 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bb130:	b513      	push	{r0, r1, r4, lr}
   bb132:	460b      	mov	r3, r1
   bb134:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb136:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb13a:	466c      	mov	r4, sp
   bb13c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bb140:	e893 0003 	ldmia.w	r3, {r0, r1}
   bb144:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bb148:	e894 0003 	ldmia.w	r4, {r0, r1}
   bb14c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bb150:	b002      	add	sp, #8
   bb152:	bd10      	pop	{r4, pc}

000bb154 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bb154:	b538      	push	{r3, r4, r5, lr}
   bb156:	4605      	mov	r5, r0
   bb158:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bb15a:	f7ff ffe9 	bl	bb130 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb15e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb160:	68a2      	ldr	r2, [r4, #8]
   bb162:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb164:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb166:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bb168:	68e2      	ldr	r2, [r4, #12]
   bb16a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb16c:	60e3      	str	r3, [r4, #12]
      }
   bb16e:	bd38      	pop	{r3, r4, r5, pc}

000bb170 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bb170:	b570      	push	{r4, r5, r6, lr}
   bb172:	4604      	mov	r4, r0
   bb174:	b08c      	sub	sp, #48	; 0x30
   bb176:	460e      	mov	r6, r1
   bb178:	9201      	str	r2, [sp, #4]
   bb17a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bb17c:	f7ff faac 	bl	ba6d8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bb180:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bb182:	9901      	ldr	r1, [sp, #4]
   bb184:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bb188:	f7fe ff57 	bl	ba03a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb18c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bb190:	b1cd      	cbz	r5, bb1c6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bb192:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bb194:	9502      	str	r5, [sp, #8]
   bb196:	a902      	add	r1, sp, #8
   bb198:	a804      	add	r0, sp, #16
   bb19a:	9303      	str	r3, [sp, #12]
   bb19c:	f7ff fc90 	bl	baac0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bb1a0:	2300      	movs	r3, #0
	__x.swap(*this);
   bb1a2:	a908      	add	r1, sp, #32
   bb1a4:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bb1a6:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bb1a8:	f7ff ffd4 	bl	bb154 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bb1ac:	4631      	mov	r1, r6
   bb1ae:	a808      	add	r0, sp, #32
   bb1b0:	f7ff ffd0 	bl	bb154 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb1b4:	a808      	add	r0, sp, #32
   bb1b6:	f7f9 fe3d 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
   bb1ba:	a804      	add	r0, sp, #16
   bb1bc:	f7f9 fe3a 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
    }
   bb1c0:	4620      	mov	r0, r4
   bb1c2:	b00c      	add	sp, #48	; 0x30
   bb1c4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bb1c6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bb1c8:	e7ea      	b.n	bb1a0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bb1cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bb1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb1d0:	b087      	sub	sp, #28
   bb1d2:	461d      	mov	r5, r3
   bb1d4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bb1d8:	4680      	mov	r8, r0
   bb1da:	468b      	mov	fp, r1
   bb1dc:	4692      	mov	sl, r2
   bb1de:	9912      	ldr	r1, [sp, #72]	; 0x48
   bb1e0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bb1e2:	2200      	movs	r2, #0
   bb1e4:	2068      	movs	r0, #104	; 0x68
   bb1e6:	9102      	str	r1, [sp, #8]
   bb1e8:	9204      	str	r2, [sp, #16]
   bb1ea:	f7f9 fc6e 	bl	b4aca <_Znwj>
	  auto __pi = ::new (__mem)
   bb1ee:	1e06      	subs	r6, r0, #0
   bb1f0:	f106 090c 	add.w	r9, r6, #12
   bb1f4:	d018      	beq.n	bb228 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bb1f6:	2201      	movs	r2, #1
	: _M_impl(__a)
   bb1f8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bb1fa:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bb1fe:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bb200:	4a15      	ldr	r2, [pc, #84]	; (bb258 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bb202:	f847 2b20 	str.w	r2, [r7], #32
   bb206:	9b03      	ldr	r3, [sp, #12]
   bb208:	9100      	str	r1, [sp, #0]
   bb20a:	465a      	mov	r2, fp
   bb20c:	4651      	mov	r1, sl
   bb20e:	4648      	mov	r0, r9
   bb210:	f7ff ffae 	bl	bb170 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bb214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb216:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bb218:	682b      	ldr	r3, [r5, #0]
   bb21a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bb21c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb21e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bb222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb224:	6823      	ldr	r3, [r4, #0]
   bb226:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bb228:	a904      	add	r1, sp, #16
   bb22a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bb22c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bb230:	f7ff fd06 	bl	bac40 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bb234:	a805      	add	r0, sp, #20
   bb236:	f7fa fa9f 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bb23a:	f8d8 3000 	ldr.w	r3, [r8]
   bb23e:	b93b      	cbnz	r3, bb250 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bb240:	4a06      	ldr	r2, [pc, #24]	; (bb25c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bb242:	4907      	ldr	r1, [pc, #28]	; (bb260 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bb244:	200a      	movs	r0, #10
}
   bb246:	b007      	add	sp, #28
   bb248:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bb24c:	f7fe b872 	b.w	b9334 <panic_>
}
   bb250:	b007      	add	sp, #28
   bb252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb256:	bf00      	nop
   bb258:	000c01b4 	.word	0x000c01b4
   bb25c:	000b8e71 	.word	0x000b8e71
   bb260:	000c0084 	.word	0x000c0084

000bb264 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   bb264:	b538      	push	{r3, r4, r5, lr}
   bb266:	4605      	mov	r5, r0
   bb268:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bb26a:	f7ff ff61 	bl	bb130 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb26e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb270:	68a2      	ldr	r2, [r4, #8]
   bb272:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb274:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb276:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bb278:	68e2      	ldr	r2, [r4, #12]
   bb27a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb27c:	60e3      	str	r3, [r4, #12]
      }
   bb27e:	bd38      	pop	{r3, r4, r5, pc}

000bb280 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   bb280:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   bb282:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   bb284:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   bb286:	3424      	adds	r4, #36	; 0x24
   bb288:	b1b9      	cbz	r1, bb2ba <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   bb28a:	e9cd 1200 	strd	r1, r2, [sp]
   bb28e:	a802      	add	r0, sp, #8
   bb290:	4669      	mov	r1, sp
   bb292:	f7ff fc2d 	bl	baaf0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bb296:	2300      	movs	r3, #0
	__x.swap(*this);
   bb298:	a906      	add	r1, sp, #24
   bb29a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bb29c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bb29e:	f7ff ffe1 	bl	bb264 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   bb2a2:	4621      	mov	r1, r4
   bb2a4:	a806      	add	r0, sp, #24
   bb2a6:	f7ff ffdd 	bl	bb264 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   bb2aa:	a806      	add	r0, sp, #24
   bb2ac:	f7f9 fdc2 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
   bb2b0:	a802      	add	r0, sp, #8
   bb2b2:	f7f9 fdbf 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
}
   bb2b6:	b00a      	add	sp, #40	; 0x28
   bb2b8:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bb2ba:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bb2bc:	e7eb      	b.n	bb296 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000bb2be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb2be:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb2c2:	4604      	mov	r4, r0
   bb2c4:	460d      	mov	r5, r1
   bb2c6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb2c8:	d914      	bls.n	bb2f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb2ca:	4290      	cmp	r0, r2
   bb2cc:	d213      	bcs.n	bb2f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb2ce:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb2d2:	1a75      	subs	r5, r6, r1
   bb2d4:	f1a1 0708 	sub.w	r7, r1, #8
   bb2d8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb2da:	42b7      	cmp	r7, r6
   bb2dc:	d018      	beq.n	bb310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb2de:	b11c      	cbz	r4, bb2e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bb2e0:	4631      	mov	r1, r6
   bb2e2:	4620      	mov	r0, r4
   bb2e4:	f7ff fc31 	bl	bab4a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb2e8:	1d30      	adds	r0, r6, #4
   bb2ea:	f7fa fa45 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb2ee:	3e08      	subs	r6, #8
   bb2f0:	3c08      	subs	r4, #8
   bb2f2:	e7f2      	b.n	bb2da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb2f4:	d00c      	beq.n	bb310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb2f6:	42b5      	cmp	r5, r6
   bb2f8:	d00a      	beq.n	bb310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb2fa:	b11c      	cbz	r4, bb304 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb2fc:	4629      	mov	r1, r5
   bb2fe:	4620      	mov	r0, r4
   bb300:	f7ff fc23 	bl	bab4a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb304:	1d28      	adds	r0, r5, #4
   bb306:	f7fa fa37 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb30a:	3508      	adds	r5, #8
   bb30c:	3408      	adds	r4, #8
   bb30e:	e7f2      	b.n	bb2f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb312 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb312:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb314:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb316:	4605      	mov	r5, r0
        if (n > 0) {
   bb318:	dd11      	ble.n	bb33e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb31a:	00f0      	lsls	r0, r6, #3
   bb31c:	f7fe f8fe 	bl	b951c <malloc>
            if (!d) {
   bb320:	4604      	mov	r4, r0
   bb322:	b158      	cbz	r0, bb33c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb324:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb328:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb32c:	f7ff ffc7 	bl	bb2be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb330:	6828      	ldr	r0, [r5, #0]
   bb332:	f7fe f8fb 	bl	b952c <free>
        data_ = d;
   bb336:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb338:	60ae      	str	r6, [r5, #8]
        return true;
   bb33a:	2001      	movs	r0, #1
    }
   bb33c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb33e:	2400      	movs	r4, #0
   bb340:	e7f6      	b.n	bb330 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb342 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb342:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb344:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb346:	6845      	ldr	r5, [r0, #4]
   bb348:	4668      	mov	r0, sp
   bb34a:	f7ff fbfe 	bl	bab4a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb34e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb352:	4299      	cmp	r1, r3
   bb354:	da10      	bge.n	bb378 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb356:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb358:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb35a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb35e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb362:	4629      	mov	r1, r5
   bb364:	f105 0008 	add.w	r0, r5, #8
   bb368:	f7ff ffa9 	bl	bb2be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb36c:	b98d      	cbnz	r5, bb392 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb36e:	6863      	ldr	r3, [r4, #4]
   bb370:	3301      	adds	r3, #1
   bb372:	6063      	str	r3, [r4, #4]
    return true;
   bb374:	2601      	movs	r6, #1
   bb376:	e006      	b.n	bb386 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb378:	3101      	adds	r1, #1
   bb37a:	4620      	mov	r0, r4
   bb37c:	f7ff ffc9 	bl	bb312 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb380:	4606      	mov	r6, r0
   bb382:	2800      	cmp	r0, #0
   bb384:	d1e7      	bne.n	bb356 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bb386:	a801      	add	r0, sp, #4
   bb388:	f7fa f9f6 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb38c:	4630      	mov	r0, r6
   bb38e:	b002      	add	sp, #8
   bb390:	bd70      	pop	{r4, r5, r6, pc}
   bb392:	4669      	mov	r1, sp
   bb394:	4628      	mov	r0, r5
   bb396:	f7ff fbd8 	bl	bab4a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb39a:	e7e8      	b.n	bb36e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb39c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb39c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb3a0:	4604      	mov	r4, r0
   bb3a2:	460d      	mov	r5, r1
   bb3a4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb3a6:	d914      	bls.n	bb3d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb3a8:	4290      	cmp	r0, r2
   bb3aa:	d213      	bcs.n	bb3d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb3ac:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb3b0:	1a75      	subs	r5, r6, r1
   bb3b2:	f1a1 0708 	sub.w	r7, r1, #8
   bb3b6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb3b8:	42b7      	cmp	r7, r6
   bb3ba:	d018      	beq.n	bb3ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb3bc:	b11c      	cbz	r4, bb3c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb3be:	4631      	mov	r1, r6
   bb3c0:	4620      	mov	r0, r4
   bb3c2:	f7ff fbb4 	bl	bab2e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb3c6:	1d30      	adds	r0, r6, #4
   bb3c8:	f7fa f9d6 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb3cc:	3e08      	subs	r6, #8
   bb3ce:	3c08      	subs	r4, #8
   bb3d0:	e7f2      	b.n	bb3b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb3d2:	d00c      	beq.n	bb3ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb3d4:	42b5      	cmp	r5, r6
   bb3d6:	d00a      	beq.n	bb3ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb3d8:	b11c      	cbz	r4, bb3e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb3da:	4629      	mov	r1, r5
   bb3dc:	4620      	mov	r0, r4
   bb3de:	f7ff fba6 	bl	bab2e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb3e2:	1d28      	adds	r0, r5, #4
   bb3e4:	f7fa f9c8 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb3e8:	3508      	adds	r5, #8
   bb3ea:	3408      	adds	r4, #8
   bb3ec:	e7f2      	b.n	bb3d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb3f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb3f0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb3f2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb3f4:	4605      	mov	r5, r0
        if (n > 0) {
   bb3f6:	dd11      	ble.n	bb41c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb3f8:	00f0      	lsls	r0, r6, #3
   bb3fa:	f7fe f88f 	bl	b951c <malloc>
            if (!d) {
   bb3fe:	4604      	mov	r4, r0
   bb400:	b158      	cbz	r0, bb41a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb402:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb406:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb40a:	f7ff ffc7 	bl	bb39c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb40e:	6828      	ldr	r0, [r5, #0]
   bb410:	f7fe f88c 	bl	b952c <free>
        data_ = d;
   bb414:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb416:	60ae      	str	r6, [r5, #8]
        return true;
   bb418:	2001      	movs	r0, #1
    }
   bb41a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb41c:	2400      	movs	r4, #0
   bb41e:	e7f6      	b.n	bb40e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb420 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb420:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb422:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb424:	6845      	ldr	r5, [r0, #4]
   bb426:	4668      	mov	r0, sp
   bb428:	f7ff fb81 	bl	bab2e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb42c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb430:	4299      	cmp	r1, r3
   bb432:	da10      	bge.n	bb456 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb434:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb436:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb438:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb43c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb440:	4629      	mov	r1, r5
   bb442:	f105 0008 	add.w	r0, r5, #8
   bb446:	f7ff ffa9 	bl	bb39c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb44a:	b98d      	cbnz	r5, bb470 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb44c:	6863      	ldr	r3, [r4, #4]
   bb44e:	3301      	adds	r3, #1
   bb450:	6063      	str	r3, [r4, #4]
    return true;
   bb452:	2601      	movs	r6, #1
   bb454:	e006      	b.n	bb464 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb456:	3101      	adds	r1, #1
   bb458:	4620      	mov	r0, r4
   bb45a:	f7ff ffc9 	bl	bb3f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb45e:	4606      	mov	r6, r0
   bb460:	2800      	cmp	r0, #0
   bb462:	d1e7      	bne.n	bb434 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bb464:	a801      	add	r0, sp, #4
   bb466:	f7fa f987 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb46a:	4630      	mov	r0, r6
   bb46c:	b002      	add	sp, #8
   bb46e:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bb470:	4669      	mov	r1, sp
   bb472:	4628      	mov	r0, r5
   bb474:	f7ff fb5b 	bl	bab2e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb478:	e7e8      	b.n	bb44c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000bb47c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bb47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb480:	4617      	mov	r7, r2
   bb482:	b0a1      	sub	sp, #132	; 0x84
   bb484:	4680      	mov	r8, r0
    WiringBleLock lk;
   bb486:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bb488:	460e      	mov	r6, r1
    WiringBleLock lk;
   bb48a:	f7fe ffed 	bl	ba468 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bb48e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bb490:	7923      	ldrb	r3, [r4, #4]
   bb492:	b953      	cbnz	r3, bb4aa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bb494:	4639      	mov	r1, r7
   bb496:	4640      	mov	r0, r8
   bb498:	f7ff fb49 	bl	bab2e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bb49c:	a80a      	add	r0, sp, #40	; 0x28
   bb49e:	f7fe fff1 	bl	ba484 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bb4a2:	4640      	mov	r0, r8
   bb4a4:	b021      	add	sp, #132	; 0x84
   bb4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bb4aa:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bb4ac:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bb4b0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bb4b4:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bb4b6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bb4ba:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bb4be:	9b03      	ldr	r3, [sp, #12]
   bb4c0:	429d      	cmp	r5, r3
   bb4c2:	d021      	beq.n	bb508 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bb4c4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bb4c8:	4658      	mov	r0, fp
   bb4ca:	f109 0114 	add.w	r1, r9, #20
   bb4ce:	f7ff f878 	bl	ba5c2 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bb4d2:	b1b8      	cbz	r0, bb504 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bb4d4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bb4d8:	4650      	mov	r0, sl
   bb4da:	f7ff f872 	bl	ba5c2 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bb4de:	b188      	cbz	r0, bb504 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bb4e0:	6823      	ldr	r3, [r4, #0]
   bb4e2:	f8d9 2000 	ldr.w	r2, [r9]
   bb4e6:	4053      	eors	r3, r2
   bb4e8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bb4ec:	d10a      	bne.n	bb504 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bb4ee:	2220      	movs	r2, #32
   bb4f0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bb4f4:	4a5e      	ldr	r2, [pc, #376]	; (bb670 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bb4f6:	9200      	str	r2, [sp, #0]
   bb4f8:	aa15      	add	r2, sp, #84	; 0x54
   bb4fa:	495e      	ldr	r1, [pc, #376]	; (bb674 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bb4fc:	2032      	movs	r0, #50	; 0x32
   bb4fe:	f7fd ff21 	bl	b9344 <log_message>
   bb502:	e7c7      	b.n	bb494 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bb504:	3508      	adds	r5, #8
   bb506:	e7da      	b.n	bb4be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bb508:	4650      	mov	r0, sl
   bb50a:	f7ff f82b 	bl	ba564 <_ZNK8particle7BleUuid7isValidEv>
   bb50e:	b960      	cbnz	r0, bb52a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bb510:	4959      	ldr	r1, [pc, #356]	; (bb678 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bb512:	2201      	movs	r2, #1
   bb514:	a815      	add	r0, sp, #84	; 0x54
   bb516:	ad15      	add	r5, sp, #84	; 0x54
   bb518:	f7fe fffc 	bl	ba514 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bb51c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb51e:	46d4      	mov	ip, sl
   bb520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb524:	682b      	ldr	r3, [r5, #0]
   bb526:	f8cc 3000 	str.w	r3, [ip]
   bb52a:	6833      	ldr	r3, [r6, #0]
   bb52c:	e9d3 5300 	ldrd	r5, r3, [r3]
   bb530:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bb534:	455d      	cmp	r5, fp
   bb536:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bb538:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bb53a:	d06e      	beq.n	bb61a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bb53c:	f855 0b08 	ldr.w	r0, [r5], #8
   bb540:	f7ff f83f 	bl	ba5c2 <_ZNK8particle7BleUuideqERKS0_>
   bb544:	2800      	cmp	r0, #0
   bb546:	d0f5      	beq.n	bb534 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bb548:	f104 0a14 	add.w	sl, r4, #20
   bb54c:	4650      	mov	r0, sl
   bb54e:	f7ff f809 	bl	ba564 <_ZNK8particle7BleUuid7isValidEv>
   bb552:	b988      	cbnz	r0, bb578 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bb554:	4b49      	ldr	r3, [pc, #292]	; (bb67c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bb556:	4948      	ldr	r1, [pc, #288]	; (bb678 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bb558:	881a      	ldrh	r2, [r3, #0]
   bb55a:	3201      	adds	r2, #1
   bb55c:	b292      	uxth	r2, r2
   bb55e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bb560:	a815      	add	r0, sp, #84	; 0x54
   bb562:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bb564:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bb566:	f7fe fff4 	bl	ba552 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bb56a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb56c:	46d4      	mov	ip, sl
   bb56e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb572:	682b      	ldr	r3, [r5, #0]
   bb574:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bb578:	4b41      	ldr	r3, [pc, #260]	; (bb680 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bb57a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bb57c:	2228      	movs	r2, #40	; 0x28
   bb57e:	2100      	movs	r1, #0
   bb580:	a816      	add	r0, sp, #88	; 0x58
   bb582:	f001 ff30 	bl	bd3e6 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bb586:	4651      	mov	r1, sl
   bb588:	a804      	add	r0, sp, #16
   bb58a:	f7fe fffd 	bl	ba588 <_ZN8particle7BleUuid7halUUIDEv>
   bb58e:	ab04      	add	r3, sp, #16
   bb590:	aa18      	add	r2, sp, #96	; 0x60
   bb592:	f10d 0c20 	add.w	ip, sp, #32
   bb596:	6818      	ldr	r0, [r3, #0]
   bb598:	6859      	ldr	r1, [r3, #4]
   bb59a:	4615      	mov	r5, r2
   bb59c:	c503      	stmia	r5!, {r0, r1}
   bb59e:	3308      	adds	r3, #8
   bb5a0:	4563      	cmp	r3, ip
   bb5a2:	462a      	mov	r2, r5
   bb5a4:	d1f7      	bne.n	bb596 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bb5a6:	6818      	ldr	r0, [r3, #0]
   bb5a8:	6028      	str	r0, [r5, #0]
    return value_;
   bb5aa:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bb5ac:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bb5b0:	f8d9 3000 	ldr.w	r3, [r9]
   bb5b4:	8a9b      	ldrh	r3, [r3, #20]
   bb5b6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bb5ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bb5bc:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bb5be:	4b31      	ldr	r3, [pc, #196]	; (bb684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bb5c0:	2200      	movs	r2, #0
   bb5c2:	1da1      	adds	r1, r4, #6
   bb5c4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bb5c6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bb5ca:	f7fd fcfb 	bl	b8fc4 <hal_ble_gatt_server_add_characteristic>
   bb5ce:	2800      	cmp	r0, #0
   bb5d0:	f47f af60 	bne.w	bb494 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bb5d4:	2301      	movs	r3, #1
   bb5d6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bb5d8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bb5da:	4639      	mov	r1, r7
        return characteristics_;
   bb5dc:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bb5de:	a80d      	add	r0, sp, #52	; 0x34
   bb5e0:	f7ff faa5 	bl	bab2e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb5e4:	4620      	mov	r0, r4
   bb5e6:	a90d      	add	r1, sp, #52	; 0x34
   bb5e8:	f7ff ff1a 	bl	bb420 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bb5ec:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb5ee:	a80e      	add	r0, sp, #56	; 0x38
   bb5f0:	f7fa f8c2 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb5f4:	2c00      	cmp	r4, #0
   bb5f6:	f47f af4d 	bne.w	bb494 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bb5fa:	2320      	movs	r3, #32
   bb5fc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bb600:	4b21      	ldr	r3, [pc, #132]	; (bb688 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bb602:	9300      	str	r3, [sp, #0]
   bb604:	aa0d      	add	r2, sp, #52	; 0x34
   bb606:	4623      	mov	r3, r4
   bb608:	e777      	b.n	bb4fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bb60a:	4639      	mov	r1, r7
   bb60c:	4640      	mov	r0, r8
   bb60e:	f7ff fa8e 	bl	bab2e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb612:	a80c      	add	r0, sp, #48	; 0x30
   bb614:	f7fa f8b0 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb618:	e740      	b.n	bb49c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bb61a:	a80b      	add	r0, sp, #44	; 0x2c
   bb61c:	f7ff f8f4 	bl	ba808 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bb620:	4651      	mov	r1, sl
   bb622:	a815      	add	r0, sp, #84	; 0x54
   bb624:	f7fe ffb0 	bl	ba588 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bb628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb62a:	2300      	movs	r3, #0
   bb62c:	3214      	adds	r2, #20
   bb62e:	a915      	add	r1, sp, #84	; 0x54
   bb630:	2001      	movs	r0, #1
   bb632:	f7fd fc9f 	bl	b8f74 <hal_ble_gatt_server_add_service>
   bb636:	2800      	cmp	r0, #0
   bb638:	d1e7      	bne.n	bb60a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bb63a:	6835      	ldr	r5, [r6, #0]
   bb63c:	a90b      	add	r1, sp, #44	; 0x2c
   bb63e:	a80d      	add	r0, sp, #52	; 0x34
   bb640:	f7ff fa83 	bl	bab4a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bb644:	4628      	mov	r0, r5
   bb646:	a90d      	add	r1, sp, #52	; 0x34
   bb648:	f7ff fe7b 	bl	bb342 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bb64c:	4605      	mov	r5, r0
   bb64e:	a80e      	add	r0, sp, #56	; 0x38
   bb650:	f7fa f892 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb654:	2d00      	cmp	r5, #0
   bb656:	d0d8      	beq.n	bb60a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bb658:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bb65a:	6853      	ldr	r3, [r2, #4]
   bb65c:	6812      	ldr	r2, [r2, #0]
   bb65e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bb662:	3b01      	subs	r3, #1
   bb664:	a80c      	add	r0, sp, #48	; 0x30
   bb666:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bb66a:	f7fa f885 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb66e:	e76b      	b.n	bb548 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bb670:	000c0159 	.word	0x000c0159
   bb674:	000c009b 	.word	0x000c009b
   bb678:	000c0208 	.word	0x000c0208
   bb67c:	2003e680 	.word	0x2003e680
   bb680:	002c0003 	.word	0x002c0003
   bb684:	000ba9a1 	.word	0x000ba9a1
   bb688:	000c0184 	.word	0x000c0184

000bb68c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bb68c:	4802      	ldr	r0, [pc, #8]	; (bb698 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bb68e:	2300      	movs	r3, #0
   bb690:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bb692:	f7fd bd07 	b.w	b90a4 <os_mutex_recursive_create>
   bb696:	bf00      	nop
   bb698:	2003e684 	.word	0x2003e684

000bb69c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bb69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb69e:	4606      	mov	r6, r0
   bb6a0:	460d      	mov	r5, r1
  size_t n = 0;
   bb6a2:	188f      	adds	r7, r1, r2
   bb6a4:	2400      	movs	r4, #0
  while (size--) {
   bb6a6:	42bd      	cmp	r5, r7
   bb6a8:	d00c      	beq.n	bb6c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bb6aa:	6833      	ldr	r3, [r6, #0]
   bb6ac:	f815 1b01 	ldrb.w	r1, [r5], #1
   bb6b0:	689b      	ldr	r3, [r3, #8]
   bb6b2:	4630      	mov	r0, r6
   bb6b4:	4798      	blx	r3
     if (chunk>=0)
   bb6b6:	1e03      	subs	r3, r0, #0
   bb6b8:	db01      	blt.n	bb6be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bb6ba:	441c      	add	r4, r3
  while (size--) {
   bb6bc:	e7f3      	b.n	bb6a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bb6be:	2c00      	cmp	r4, #0
   bb6c0:	bf08      	it	eq
   bb6c2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bb6c4:	4620      	mov	r0, r4
   bb6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb6c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   bb6c8:	b513      	push	{r0, r1, r4, lr}
   bb6ca:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   bb6cc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bb6ce:	b159      	cbz	r1, bb6e8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bb6d0:	9101      	str	r1, [sp, #4]
   bb6d2:	f7f9 f99f 	bl	b4a14 <strlen>
   bb6d6:	6823      	ldr	r3, [r4, #0]
   bb6d8:	9901      	ldr	r1, [sp, #4]
   bb6da:	68db      	ldr	r3, [r3, #12]
   bb6dc:	4602      	mov	r2, r0
   bb6de:	4620      	mov	r0, r4
    }
   bb6e0:	b002      	add	sp, #8
   bb6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bb6e6:	4718      	bx	r3
    }
   bb6e8:	b002      	add	sp, #8
   bb6ea:	bd10      	pop	{r4, pc}

000bb6ec <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bb6ec:	b508      	push	{r3, lr}
  return write(str);
   bb6ee:	f7ff ffeb 	bl	bb6c8 <_ZN5Print5writeEPKc>
}
   bb6f2:	bd08      	pop	{r3, pc}

000bb6f4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bb6f4:	6803      	ldr	r3, [r0, #0]
   bb6f6:	689b      	ldr	r3, [r3, #8]
   bb6f8:	4718      	bx	r3

000bb6fa <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   bb6fa:	680a      	ldr	r2, [r1, #0]
 {
   bb6fc:	460b      	mov	r3, r1
   return x.printTo(*this);
   bb6fe:	6812      	ldr	r2, [r2, #0]
   bb700:	4601      	mov	r1, r0
   bb702:	4618      	mov	r0, r3
   bb704:	4710      	bx	r2

000bb706 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bb706:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bb708:	210d      	movs	r1, #13
{
   bb70a:	4605      	mov	r5, r0
  size_t n = print('\r');
   bb70c:	f7ff fff2 	bl	bb6f4 <_ZN5Print5printEc>
  n += print('\n');
   bb710:	210a      	movs	r1, #10
  size_t n = print('\r');
   bb712:	4604      	mov	r4, r0
  n += print('\n');
   bb714:	4628      	mov	r0, r5
   bb716:	f7ff ffed 	bl	bb6f4 <_ZN5Print5printEc>
  return n;
}
   bb71a:	4420      	add	r0, r4
   bb71c:	bd38      	pop	{r3, r4, r5, pc}

000bb71e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bb71e:	b538      	push	{r3, r4, r5, lr}
   bb720:	4605      	mov	r5, r0
  return write(str);
   bb722:	f7ff ffd1 	bl	bb6c8 <_ZN5Print5writeEPKc>
   bb726:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bb728:	4628      	mov	r0, r5
   bb72a:	f7ff ffec 	bl	bb706 <_ZN5Print7printlnEv>
  return n;
}
   bb72e:	4420      	add	r0, r4
   bb730:	bd38      	pop	{r3, r4, r5, pc}

000bb732 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   bb732:	b538      	push	{r3, r4, r5, lr}
   bb734:	4605      	mov	r5, r0
   size_t n = print(x);
   bb736:	f7ff ffe0 	bl	bb6fa <_ZN5Print5printERK9Printable>
   bb73a:	4604      	mov	r4, r0
   n += println();
   bb73c:	4628      	mov	r0, r5
   bb73e:	f7ff ffe2 	bl	bb706 <_ZN5Print7printlnEv>
   return n;
 }
   bb742:	4420      	add	r0, r4
   bb744:	bd38      	pop	{r3, r4, r5, pc}

000bb746 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bb746:	b530      	push	{r4, r5, lr}
   bb748:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bb74a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bb74c:	2a01      	cmp	r2, #1
  *str = '\0';
   bb74e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bb752:	bf98      	it	ls
   bb754:	220a      	movls	r2, #10
   bb756:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bb758:	460d      	mov	r5, r1
   bb75a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bb75e:	fb01 5312 	mls	r3, r1, r2, r5
   bb762:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb766:	2b09      	cmp	r3, #9
   bb768:	bf94      	ite	ls
   bb76a:	3330      	addls	r3, #48	; 0x30
   bb76c:	3337      	addhi	r3, #55	; 0x37
   bb76e:	b2db      	uxtb	r3, r3
  } while(n);
   bb770:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb772:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bb776:	d9ef      	bls.n	bb758 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bb778:	4621      	mov	r1, r4
   bb77a:	f7ff ffa5 	bl	bb6c8 <_ZN5Print5writeEPKc>
}
   bb77e:	b00b      	add	sp, #44	; 0x2c
   bb780:	bd30      	pop	{r4, r5, pc}

000bb782 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bb782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb786:	b086      	sub	sp, #24
   bb788:	af00      	add	r7, sp, #0
   bb78a:	4605      	mov	r5, r0
   bb78c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bb78e:	1d38      	adds	r0, r7, #4
   bb790:	2114      	movs	r1, #20
{
   bb792:	4614      	mov	r4, r2
    va_copy(args2, args);
   bb794:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bb796:	f7fd fef9 	bl	b958c <vsnprintf>

    if (n<bufsize)
   bb79a:	2813      	cmp	r0, #19
   bb79c:	d80e      	bhi.n	bb7bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bb79e:	1d39      	adds	r1, r7, #4
   bb7a0:	4628      	mov	r0, r5
   bb7a2:	f7ff ff91 	bl	bb6c8 <_ZN5Print5writeEPKc>
   bb7a6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bb7a8:	b11e      	cbz	r6, bb7b2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bb7aa:	4628      	mov	r0, r5
   bb7ac:	f7ff ffab 	bl	bb706 <_ZN5Print7printlnEv>
   bb7b0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bb7b2:	4620      	mov	r0, r4
   bb7b4:	3718      	adds	r7, #24
   bb7b6:	46bd      	mov	sp, r7
   bb7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bb7bc:	f100 0308 	add.w	r3, r0, #8
   bb7c0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bb7c4:	46e8      	mov	r8, sp
        char bigger[n+1];
   bb7c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bb7ca:	4622      	mov	r2, r4
   bb7cc:	1c41      	adds	r1, r0, #1
   bb7ce:	683b      	ldr	r3, [r7, #0]
   bb7d0:	4668      	mov	r0, sp
   bb7d2:	f7fd fedb 	bl	b958c <vsnprintf>
  return write(str);
   bb7d6:	4669      	mov	r1, sp
   bb7d8:	4628      	mov	r0, r5
   bb7da:	f7ff ff75 	bl	bb6c8 <_ZN5Print5writeEPKc>
   bb7de:	4604      	mov	r4, r0
   bb7e0:	46c5      	mov	sp, r8
   bb7e2:	e7e1      	b.n	bb7a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bb7e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bb7e4:	4b01      	ldr	r3, [pc, #4]	; (bb7ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bb7e6:	4a02      	ldr	r2, [pc, #8]	; (bb7f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bb7e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bb7ea:	4770      	bx	lr
   bb7ec:	2003e68c 	.word	0x2003e68c
   bb7f0:	000c0228 	.word	0x000c0228

000bb7f4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bb7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bb7f8:	4a15      	ldr	r2, [pc, #84]	; (bb850 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bb7fa:	f8df 8060 	ldr.w	r8, [pc, #96]	; bb85c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bb7fe:	e9d2 6300 	ldrd	r6, r3, [r2]
   bb802:	1980      	adds	r0, r0, r6
   bb804:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bb808:	4b12      	ldr	r3, [pc, #72]	; (bb854 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bb80a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bb80e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bb812:	1986      	adds	r6, r0, r6
   bb814:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bb818:	42bb      	cmp	r3, r7
   bb81a:	bf08      	it	eq
   bb81c:	42b2      	cmpeq	r2, r6
{
   bb81e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bb820:	d013      	beq.n	bb84a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bb822:	a903      	add	r1, sp, #12
   bb824:	4668      	mov	r0, sp
   bb826:	e9cd 6700 	strd	r6, r7, [sp]
   bb82a:	f7fd fee7 	bl	b95fc <localtime_r>
	calendar_time.tm_year += 1900;
   bb82e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb830:	4d09      	ldr	r5, [pc, #36]	; (bb858 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bb832:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb836:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bb838:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb83a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb83c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb83e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bb842:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb846:	6823      	ldr	r3, [r4, #0]
   bb848:	602b      	str	r3, [r5, #0]
    }
}
   bb84a:	b00c      	add	sp, #48	; 0x30
   bb84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb850:	2003e6c8 	.word	0x2003e6c8
   bb854:	2003e6c0 	.word	0x2003e6c0
   bb858:	2003e698 	.word	0x2003e698
   bb85c:	2003e6d0 	.word	0x2003e6d0

000bb860 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bb860:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb862:	2000      	movs	r0, #0
   bb864:	f7fd fe4a 	bl	b94fc <spark_sync_time_pending>
   bb868:	b128      	cbz	r0, bb876 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb86a:	f7fd fe27 	bl	b94bc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb86e:	f080 0001 	eor.w	r0, r0, #1
   bb872:	b2c0      	uxtb	r0, r0
    }
   bb874:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb876:	2001      	movs	r0, #1
   bb878:	e7fc      	b.n	bb874 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bb87c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bb87c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bb87e:	f7ff ffb9 	bl	bb7f4 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bb882:	4b02      	ldr	r3, [pc, #8]	; (bb88c <_ZN9TimeClass5monthEx+0x10>)
   bb884:	6918      	ldr	r0, [r3, #16]
}
   bb886:	3001      	adds	r0, #1
   bb888:	bd08      	pop	{r3, pc}
   bb88a:	bf00      	nop
   bb88c:	2003e698 	.word	0x2003e698

000bb890 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   bb890:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   bb894:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bb898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   bb89c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   bb89e:	d411      	bmi.n	bb8c4 <_ZN9TimeClass4zoneEf+0x34>
   bb8a0:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   bb8a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bb8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb8ac:	dc0a      	bgt.n	bb8c4 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   bb8ae:	eddf 7a06 	vldr	s15, [pc, #24]	; bb8c8 <_ZN9TimeClass4zoneEf+0x38>
   bb8b2:	ee60 7a27 	vmul.f32	s15, s0, s15
   bb8b6:	ee17 0a90 	vmov	r0, s15
   bb8ba:	f7f9 f84f 	bl	b495c <__aeabi_f2lz>
   bb8be:	4b03      	ldr	r3, [pc, #12]	; (bb8cc <_ZN9TimeClass4zoneEf+0x3c>)
   bb8c0:	e9c3 0100 	strd	r0, r1, [r3]
}
   bb8c4:	bd08      	pop	{r3, pc}
   bb8c6:	bf00      	nop
   bb8c8:	45610000 	.word	0x45610000
   bb8cc:	2003e6c8 	.word	0x2003e6c8

000bb8d0 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bb8d0:	b530      	push	{r4, r5, lr}
   bb8d2:	b093      	sub	sp, #76	; 0x4c
   bb8d4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bb8d8:	4b19      	ldr	r3, [pc, #100]	; (bb940 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bb8da:	4604      	mov	r4, r0
    t += time_zone_cache;
   bb8dc:	e9d3 1000 	ldrd	r1, r0, [r3]
   bb8e0:	9b01      	ldr	r3, [sp, #4]
   bb8e2:	1852      	adds	r2, r2, r1
   bb8e4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bb8e8:	4816      	ldr	r0, [pc, #88]	; (bb944 <_ZN9TimeClass7timeStrEx+0x74>)
   bb8ea:	e9d0 1000 	ldrd	r1, r0, [r0]
   bb8ee:	1852      	adds	r2, r2, r1
   bb8f0:	eb43 0300 	adc.w	r3, r3, r0
   bb8f4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bb8f8:	2224      	movs	r2, #36	; 0x24
   bb8fa:	eb0d 0002 	add.w	r0, sp, r2
   bb8fe:	2100      	movs	r1, #0
   bb900:	f001 fd71 	bl	bd3e6 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bb904:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bb906:	a909      	add	r1, sp, #36	; 0x24
   bb908:	4668      	mov	r0, sp
   bb90a:	f7fd fe77 	bl	b95fc <localtime_r>
    char ascstr[26] = {};
   bb90e:	2216      	movs	r2, #22
   bb910:	4629      	mov	r1, r5
   bb912:	a803      	add	r0, sp, #12
   bb914:	9502      	str	r5, [sp, #8]
   bb916:	f001 fd66 	bl	bd3e6 <memset>
    asctime_r(&calendar_time, ascstr);
   bb91a:	a902      	add	r1, sp, #8
   bb91c:	a809      	add	r0, sp, #36	; 0x24
   bb91e:	f001 fcdf 	bl	bd2e0 <asctime_r>
    int len = strlen(ascstr);
   bb922:	a802      	add	r0, sp, #8
   bb924:	f7f9 f876 	bl	b4a14 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bb928:	ab12      	add	r3, sp, #72	; 0x48
   bb92a:	4418      	add	r0, r3
    return String(ascstr);
   bb92c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bb92e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bb932:	4620      	mov	r0, r4
   bb934:	f7fe fb23 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb938:	4620      	mov	r0, r4
   bb93a:	b013      	add	sp, #76	; 0x4c
   bb93c:	bd30      	pop	{r4, r5, pc}
   bb93e:	bf00      	nop
   bb940:	2003e6c8 	.word	0x2003e6c8
   bb944:	2003e6c0 	.word	0x2003e6c0

000bb948 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bb948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb94c:	b0a4      	sub	sp, #144	; 0x90
   bb94e:	4607      	mov	r7, r0
   bb950:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb952:	a814      	add	r0, sp, #80	; 0x50
{
   bb954:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb956:	223f      	movs	r2, #63	; 0x3f
{
   bb958:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb95a:	f001 fdc4 	bl	bd4e6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb95e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb960:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb962:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb966:	f7f9 f855 	bl	b4a14 <strlen>
   bb96a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bb96c:	bb4c      	cbnz	r4, bb9c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bb96e:	4929      	ldr	r1, [pc, #164]	; (bba14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bb970:	a803      	add	r0, sp, #12
   bb972:	f001 fd7e 	bl	bd472 <strcpy>
   bb976:	ac14      	add	r4, sp, #80	; 0x50
{
   bb978:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bb97a:	f105 39ff 	add.w	r9, r5, #4294967295
   bb97e:	45b1      	cmp	r9, r6
   bb980:	d934      	bls.n	bb9ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bb982:	7823      	ldrb	r3, [r4, #0]
   bb984:	2b25      	cmp	r3, #37	; 0x25
   bb986:	f106 0a01 	add.w	sl, r6, #1
   bb98a:	d117      	bne.n	bb9bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bb98c:	7863      	ldrb	r3, [r4, #1]
   bb98e:	2b7a      	cmp	r3, #122	; 0x7a
   bb990:	d114      	bne.n	bb9bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bb992:	a803      	add	r0, sp, #12
   bb994:	f7f9 f83e 	bl	b4a14 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb998:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bb99a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb99c:	1830      	adds	r0, r6, r0
   bb99e:	4418      	add	r0, r3
   bb9a0:	eba9 0206 	sub.w	r2, r9, r6
   bb9a4:	1ca1      	adds	r1, r4, #2
   bb9a6:	f001 fcf6 	bl	bd396 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bb9aa:	462a      	mov	r2, r5
   bb9ac:	a903      	add	r1, sp, #12
   bb9ae:	4620      	mov	r0, r4
   bb9b0:	f001 fcf1 	bl	bd396 <memcpy>
            len = strlen(format_str);
   bb9b4:	a814      	add	r0, sp, #80	; 0x50
   bb9b6:	f7f9 f82d 	bl	b4a14 <strlen>
   bb9ba:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bb9bc:	3401      	adds	r4, #1
   bb9be:	4656      	mov	r6, sl
   bb9c0:	e7db      	b.n	bb97a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bb9c2:	233c      	movs	r3, #60	; 0x3c
   bb9c4:	fb94 f2f3 	sdiv	r2, r4, r3
   bb9c8:	2a00      	cmp	r2, #0
   bb9ca:	bfb8      	it	lt
   bb9cc:	4252      	neglt	r2, r2
   bb9ce:	fbb2 f1f3 	udiv	r1, r2, r3
   bb9d2:	fb03 2211 	mls	r2, r3, r1, r2
   bb9d6:	9200      	str	r2, [sp, #0]
   bb9d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bb9dc:	4a0e      	ldr	r2, [pc, #56]	; (bba18 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bb9de:	fb94 f3f3 	sdiv	r3, r4, r3
   bb9e2:	2110      	movs	r1, #16
   bb9e4:	a803      	add	r0, sp, #12
   bb9e6:	f7fd fdc9 	bl	b957c <snprintf>
   bb9ea:	e7c4      	b.n	bb976 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bb9ec:	2100      	movs	r1, #0
   bb9ee:	222e      	movs	r2, #46	; 0x2e
   bb9f0:	a808      	add	r0, sp, #32
   bb9f2:	9107      	str	r1, [sp, #28]
   bb9f4:	f001 fcf7 	bl	bd3e6 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bb9f8:	4643      	mov	r3, r8
   bb9fa:	aa14      	add	r2, sp, #80	; 0x50
   bb9fc:	2132      	movs	r1, #50	; 0x32
   bb9fe:	a807      	add	r0, sp, #28
   bba00:	f7fd fdf4 	bl	b95ec <strftime>
    return String(buf);
   bba04:	a907      	add	r1, sp, #28
   bba06:	4638      	mov	r0, r7
   bba08:	f7fe fab9 	bl	b9f7e <_ZN6StringC1EPK19__FlashStringHelper>
}
   bba0c:	4638      	mov	r0, r7
   bba0e:	b024      	add	sp, #144	; 0x90
   bba10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bba14:	000c022c 	.word	0x000c022c
   bba18:	000c022e 	.word	0x000c022e

000bba1c <_ZN9TimeClass6formatExPKc>:
{
   bba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bba1e:	b08d      	sub	sp, #52	; 0x34
   bba20:	e9cd 2300 	strd	r2, r3, [sp]
   bba24:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bba26:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bba28:	b915      	cbnz	r5, bba30 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bba2a:	4b19      	ldr	r3, [pc, #100]	; (bba90 <_ZN9TimeClass6formatExPKc+0x74>)
   bba2c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bba2e:	b12d      	cbz	r5, bba3c <_ZN9TimeClass6formatExPKc+0x20>
   bba30:	4b18      	ldr	r3, [pc, #96]	; (bba94 <_ZN9TimeClass6formatExPKc+0x78>)
   bba32:	4628      	mov	r0, r5
   bba34:	6819      	ldr	r1, [r3, #0]
   bba36:	f7f8 ffe3 	bl	b4a00 <strcmp>
   bba3a:	b938      	cbnz	r0, bba4c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bba3c:	e9dd 2300 	ldrd	r2, r3, [sp]
   bba40:	4620      	mov	r0, r4
   bba42:	f7ff ff45 	bl	bb8d0 <_ZN9TimeClass7timeStrEx>
}
   bba46:	4620      	mov	r0, r4
   bba48:	b00d      	add	sp, #52	; 0x34
   bba4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bba4c:	4e12      	ldr	r6, [pc, #72]	; (bba98 <_ZN9TimeClass6formatExPKc+0x7c>)
   bba4e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bba50:	4f12      	ldr	r7, [pc, #72]	; (bba9c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bba52:	e9d6 3200 	ldrd	r3, r2, [r6]
   bba56:	185b      	adds	r3, r3, r1
   bba58:	9901      	ldr	r1, [sp, #4]
   bba5a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bba5e:	e9d7 0100 	ldrd	r0, r1, [r7]
   bba62:	181b      	adds	r3, r3, r0
   bba64:	eb42 0201 	adc.w	r2, r2, r1
   bba68:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bba6c:	2100      	movs	r1, #0
   bba6e:	2224      	movs	r2, #36	; 0x24
   bba70:	a803      	add	r0, sp, #12
   bba72:	f001 fcb8 	bl	bd3e6 <memset>
    localtime_r(&t, &calendar_time);
   bba76:	a903      	add	r1, sp, #12
   bba78:	4668      	mov	r0, sp
   bba7a:	f7fd fdbf 	bl	b95fc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bba7e:	6832      	ldr	r2, [r6, #0]
   bba80:	683b      	ldr	r3, [r7, #0]
   bba82:	a903      	add	r1, sp, #12
   bba84:	4413      	add	r3, r2
   bba86:	4620      	mov	r0, r4
   bba88:	462a      	mov	r2, r5
   bba8a:	f7ff ff5d 	bl	bb948 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bba8e:	e7da      	b.n	bba46 <_ZN9TimeClass6formatExPKc+0x2a>
   bba90:	2003e694 	.word	0x2003e694
   bba94:	2003d05c 	.word	0x2003d05c
   bba98:	2003e6c8 	.word	0x2003e6c8
   bba9c:	2003e6c0 	.word	0x2003e6c0

000bbaa0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bbaa0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bbaa2:	2000      	movs	r0, #0
   bbaa4:	f7fd f9f4 	bl	b8e90 <hal_rtc_time_is_valid>
    if (rtcstate)
   bbaa8:	4604      	mov	r4, r0
   bbaaa:	b9a0      	cbnz	r0, bbad6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bbaac:	f7fd fc52 	bl	b9354 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bbab0:	2801      	cmp	r0, #1
   bbab2:	d110      	bne.n	bbad6 <_ZN9TimeClass7isValidEv+0x36>
   bbab4:	4620      	mov	r0, r4
   bbab6:	f7fd fc7d 	bl	b93b4 <system_thread_get_state>
   bbaba:	b960      	cbnz	r0, bbad6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bbabc:	f7ff fed0 	bl	bb860 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bbac0:	b910      	cbnz	r0, bbac8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bbac2:	f7fd fcf3 	bl	b94ac <spark_process>
        while (_while() && !_condition()) {
   bbac6:	e7f9      	b.n	bbabc <_ZN9TimeClass7isValidEv+0x1c>
   bbac8:	f7ff feca 	bl	bb860 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bbacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bbad0:	2000      	movs	r0, #0
   bbad2:	f7fd b9dd 	b.w	b8e90 <hal_rtc_time_is_valid>
}
   bbad6:	4620      	mov	r0, r4
   bbad8:	bd10      	pop	{r4, pc}

000bbada <_ZN9TimeClass3nowEv>:
{
   bbada:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bbadc:	f7ff ffe0 	bl	bbaa0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bbae0:	2210      	movs	r2, #16
   bbae2:	2100      	movs	r1, #0
   bbae4:	4668      	mov	r0, sp
   bbae6:	f001 fc7e 	bl	bd3e6 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bbaea:	2100      	movs	r1, #0
   bbaec:	4668      	mov	r0, sp
   bbaee:	f7fd f9d7 	bl	b8ea0 <hal_rtc_get_time>
}
   bbaf2:	9800      	ldr	r0, [sp, #0]
   bbaf4:	b005      	add	sp, #20
   bbaf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbafc <_ZN9TimeClass4hourEv>:
{
   bbafc:	b508      	push	{r3, lr}
	return hour(now());
   bbafe:	f7ff ffec 	bl	bbada <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbb02:	17c1      	asrs	r1, r0, #31
   bbb04:	f7ff fe76 	bl	bb7f4 <_ZL22Refresh_UnixTime_Cachex>
}
   bbb08:	4b01      	ldr	r3, [pc, #4]	; (bbb10 <_ZN9TimeClass4hourEv+0x14>)
   bbb0a:	6898      	ldr	r0, [r3, #8]
   bbb0c:	bd08      	pop	{r3, pc}
   bbb0e:	bf00      	nop
   bbb10:	2003e698 	.word	0x2003e698

000bbb14 <_ZN9TimeClass6minuteEv>:
{
   bbb14:	b508      	push	{r3, lr}
	return minute(now());
   bbb16:	f7ff ffe0 	bl	bbada <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbb1a:	17c1      	asrs	r1, r0, #31
   bbb1c:	f7ff fe6a 	bl	bb7f4 <_ZL22Refresh_UnixTime_Cachex>
}
   bbb20:	4b01      	ldr	r3, [pc, #4]	; (bbb28 <_ZN9TimeClass6minuteEv+0x14>)
   bbb22:	6858      	ldr	r0, [r3, #4]
   bbb24:	bd08      	pop	{r3, pc}
   bbb26:	bf00      	nop
   bbb28:	2003e698 	.word	0x2003e698

000bbb2c <_ZN9TimeClass6secondEv>:
{
   bbb2c:	b508      	push	{r3, lr}
	return second(now());
   bbb2e:	f7ff ffd4 	bl	bbada <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbb32:	17c1      	asrs	r1, r0, #31
   bbb34:	f7ff fe5e 	bl	bb7f4 <_ZL22Refresh_UnixTime_Cachex>
}
   bbb38:	4b01      	ldr	r3, [pc, #4]	; (bbb40 <_ZN9TimeClass6secondEv+0x14>)
   bbb3a:	6818      	ldr	r0, [r3, #0]
   bbb3c:	bd08      	pop	{r3, pc}
   bbb3e:	bf00      	nop
   bbb40:	2003e698 	.word	0x2003e698

000bbb44 <_ZN9TimeClass3dayEv>:
{
   bbb44:	b508      	push	{r3, lr}
	return day(now());
   bbb46:	f7ff ffc8 	bl	bbada <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbb4a:	17c1      	asrs	r1, r0, #31
   bbb4c:	f7ff fe52 	bl	bb7f4 <_ZL22Refresh_UnixTime_Cachex>
}
   bbb50:	4b01      	ldr	r3, [pc, #4]	; (bbb58 <_ZN9TimeClass3dayEv+0x14>)
   bbb52:	68d8      	ldr	r0, [r3, #12]
   bbb54:	bd08      	pop	{r3, pc}
   bbb56:	bf00      	nop
   bbb58:	2003e698 	.word	0x2003e698

000bbb5c <_ZN9TimeClass5monthEv>:
{
   bbb5c:	b508      	push	{r3, lr}
	return month(now());
   bbb5e:	f7ff ffbc 	bl	bbada <_ZN9TimeClass3nowEv>
}
   bbb62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bbb66:	17c1      	asrs	r1, r0, #31
   bbb68:	f7ff be88 	b.w	bb87c <_ZN9TimeClass5monthEx>

000bbb6c <_ZN9TimeClass4yearEv>:
{
   bbb6c:	b508      	push	{r3, lr}
	return year(now());
   bbb6e:	f7ff ffb4 	bl	bbada <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbb72:	17c1      	asrs	r1, r0, #31
   bbb74:	f7ff fe3e 	bl	bb7f4 <_ZL22Refresh_UnixTime_Cachex>
}
   bbb78:	4b01      	ldr	r3, [pc, #4]	; (bbb80 <_ZN9TimeClass4yearEv+0x14>)
   bbb7a:	6958      	ldr	r0, [r3, #20]
   bbb7c:	bd08      	pop	{r3, pc}
   bbb7e:	bf00      	nop
   bbb80:	2003e698 	.word	0x2003e698

000bbb84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bbb84:	4b02      	ldr	r3, [pc, #8]	; (bbb90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bbb86:	681a      	ldr	r2, [r3, #0]
   bbb88:	4b02      	ldr	r3, [pc, #8]	; (bbb94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bbb8a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bbb8c:	4770      	bx	lr
   bbb8e:	bf00      	nop
   bbb90:	2003d05c 	.word	0x2003d05c
   bbb94:	2003e694 	.word	0x2003e694

000bbb98 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bbb98:	2100      	movs	r1, #0
   bbb9a:	f7fd bbeb 	b.w	b9374 <system_delay_ms>
	...

000bbba0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   bbba0:	b510      	push	{r4, lr}
   bbba2:	4b04      	ldr	r3, [pc, #16]	; (bbbb4 <_ZN9TCPClientD1Ev+0x14>)
   bbba4:	6003      	str	r3, [r0, #0]
   bbba6:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bbba8:	6980      	ldr	r0, [r0, #24]
   bbbaa:	b108      	cbz	r0, bbbb0 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   bbbac:	f7fe fc33 	bl	ba416 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   bbbb0:	4620      	mov	r0, r4
   bbbb2:	bd10      	pop	{r4, pc}
   bbbb4:	000c034c 	.word	0x000c034c

000bbbb8 <_ZN9TCPClientD0Ev>:
   bbbb8:	b510      	push	{r4, lr}
   bbbba:	4604      	mov	r4, r0
   bbbbc:	f7ff fff0 	bl	bbba0 <_ZN9TCPClientD1Ev>
   bbbc0:	4620      	mov	r0, r4
   bbbc2:	211c      	movs	r1, #28
   bbbc4:	f7f8 ff87 	bl	b4ad6 <_ZdlPvj>
   bbbc8:	4620      	mov	r0, r4
   bbbca:	bd10      	pop	{r4, pc}

000bbbcc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bbbcc:	4b01      	ldr	r3, [pc, #4]	; (bbbd4 <_GLOBAL__sub_I_RGB+0x8>)
   bbbce:	2200      	movs	r2, #0
   bbbd0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bbbd2:	4770      	bx	lr
   bbbd4:	2003e6d8 	.word	0x2003e6d8

000bbbd8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bbbd8:	4b01      	ldr	r3, [pc, #4]	; (bbbe0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bbbda:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bbbdc:	4770      	bx	lr
   bbbde:	bf00      	nop
   bbbe0:	2003d060 	.word	0x2003d060

000bbbe4 <serialEventRun>:
{
   bbbe4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bbbe6:	4b0b      	ldr	r3, [pc, #44]	; (bbc14 <serialEventRun+0x30>)
   bbbe8:	b143      	cbz	r3, bbbfc <serialEventRun+0x18>
   bbbea:	f000 fc25 	bl	bc438 <_Z16_fetch_usbserialv>
   bbbee:	6803      	ldr	r3, [r0, #0]
   bbbf0:	691b      	ldr	r3, [r3, #16]
   bbbf2:	4798      	blx	r3
   bbbf4:	2800      	cmp	r0, #0
   bbbf6:	dd01      	ble.n	bbbfc <serialEventRun+0x18>
        serialEvent();
   bbbf8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bbbfc:	4b06      	ldr	r3, [pc, #24]	; (bbc18 <serialEventRun+0x34>)
   bbbfe:	b143      	cbz	r3, bbc12 <serialEventRun+0x2e>
   bbc00:	f001 f9f6 	bl	bcff0 <_Z22__fetch_global_Serial1v>
   bbc04:	6803      	ldr	r3, [r0, #0]
   bbc06:	691b      	ldr	r3, [r3, #16]
   bbc08:	4798      	blx	r3
   bbc0a:	2800      	cmp	r0, #0
   bbc0c:	dd01      	ble.n	bbc12 <serialEventRun+0x2e>
        serialEvent1();
   bbc0e:	f3af 8000 	nop.w
}
   bbc12:	bd08      	pop	{r3, pc}
	...

000bbc1c <_post_loop>:
{
   bbc1c:	b508      	push	{r3, lr}
	serialEventRun();
   bbc1e:	f7ff ffe1 	bl	bbbe4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bbc22:	f7fd f92d 	bl	b8e80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bbc26:	4b01      	ldr	r3, [pc, #4]	; (bbc2c <_post_loop+0x10>)
   bbc28:	6018      	str	r0, [r3, #0]
}
   bbc2a:	bd08      	pop	{r3, pc}
   bbc2c:	2003e73c 	.word	0x2003e73c

000bbc30 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbc30:	4805      	ldr	r0, [pc, #20]	; (bbc48 <_Z33system_initialize_user_backup_ramv+0x18>)
   bbc32:	4a06      	ldr	r2, [pc, #24]	; (bbc4c <_Z33system_initialize_user_backup_ramv+0x1c>)
   bbc34:	4906      	ldr	r1, [pc, #24]	; (bbc50 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bbc36:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbc38:	1a12      	subs	r2, r2, r0
   bbc3a:	f001 fbac 	bl	bd396 <memcpy>
    __backup_sram_signature = signature;
   bbc3e:	4b05      	ldr	r3, [pc, #20]	; (bbc54 <_Z33system_initialize_user_backup_ramv+0x24>)
   bbc40:	4a05      	ldr	r2, [pc, #20]	; (bbc58 <_Z33system_initialize_user_backup_ramv+0x28>)
   bbc42:	601a      	str	r2, [r3, #0]
}
   bbc44:	bd08      	pop	{r3, pc}
   bbc46:	bf00      	nop
   bbc48:	2003f400 	.word	0x2003f400
   bbc4c:	2003f404 	.word	0x2003f404
   bbc50:	000c0c94 	.word	0x000c0c94
   bbc54:	2003f400 	.word	0x2003f400
   bbc58:	9a271c1e 	.word	0x9a271c1e

000bbc5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bbc5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbc5e:	2300      	movs	r3, #0
   bbc60:	9300      	str	r3, [sp, #0]
   bbc62:	461a      	mov	r2, r3
   bbc64:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbc68:	f7fd fbb6 	bl	b93d8 <system_ctrl_set_result>
}
   bbc6c:	b003      	add	sp, #12
   bbc6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbc74 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bbc74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bbc76:	8843      	ldrh	r3, [r0, #2]
   bbc78:	2b0a      	cmp	r3, #10
   bbc7a:	d008      	beq.n	bbc8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bbc7c:	2b50      	cmp	r3, #80	; 0x50
   bbc7e:	d10b      	bne.n	bbc98 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bbc80:	4b09      	ldr	r3, [pc, #36]	; (bbca8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bbc82:	681b      	ldr	r3, [r3, #0]
   bbc84:	b14b      	cbz	r3, bbc9a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bbc86:	b003      	add	sp, #12
   bbc88:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bbc8c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bbc8e:	f7ff ffe5 	bl	bbc5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bbc92:	b003      	add	sp, #12
   bbc94:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbc98:	2300      	movs	r3, #0
   bbc9a:	9300      	str	r3, [sp, #0]
   bbc9c:	461a      	mov	r2, r3
   bbc9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbca2:	f7fd fb99 	bl	b93d8 <system_ctrl_set_result>
}
   bbca6:	e7f4      	b.n	bbc92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bbca8:	2003e6ec 	.word	0x2003e6ec

000bbcac <module_user_init_hook>:
{
   bbcac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bbcae:	4812      	ldr	r0, [pc, #72]	; (bbcf8 <module_user_init_hook+0x4c>)
   bbcb0:	2100      	movs	r1, #0
   bbcb2:	f7fd fc93 	bl	b95dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bbcb6:	4b11      	ldr	r3, [pc, #68]	; (bbcfc <module_user_init_hook+0x50>)
   bbcb8:	681a      	ldr	r2, [r3, #0]
   bbcba:	4b11      	ldr	r3, [pc, #68]	; (bbd00 <module_user_init_hook+0x54>)
   bbcbc:	429a      	cmp	r2, r3
   bbcbe:	4b11      	ldr	r3, [pc, #68]	; (bbd04 <module_user_init_hook+0x58>)
   bbcc0:	bf0c      	ite	eq
   bbcc2:	2201      	moveq	r2, #1
   bbcc4:	2200      	movne	r2, #0
   bbcc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bbcc8:	d001      	beq.n	bbcce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bbcca:	f7ff ffb1 	bl	bbc30 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bbcce:	f7fd f8c7 	bl	b8e60 <HAL_RNG_GetRandomNumber>
   bbcd2:	4604      	mov	r4, r0
    srand(seed);
   bbcd4:	f001 fb90 	bl	bd3f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bbcd8:	4b0b      	ldr	r3, [pc, #44]	; (bbd08 <module_user_init_hook+0x5c>)
   bbcda:	b113      	cbz	r3, bbce2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bbcdc:	4620      	mov	r0, r4
   bbcde:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bbce2:	2100      	movs	r1, #0
   bbce4:	4808      	ldr	r0, [pc, #32]	; (bbd08 <module_user_init_hook+0x5c>)
   bbce6:	f7fd fc11 	bl	b950c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bbcea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bbcee:	4807      	ldr	r0, [pc, #28]	; (bbd0c <module_user_init_hook+0x60>)
   bbcf0:	2100      	movs	r1, #0
   bbcf2:	f7fd bb67 	b.w	b93c4 <system_ctrl_set_app_request_handler>
   bbcf6:	bf00      	nop
   bbcf8:	000bbbd9 	.word	0x000bbbd9
   bbcfc:	2003f400 	.word	0x2003f400
   bbd00:	9a271c1e 	.word	0x9a271c1e
   bbd04:	2003e6e8 	.word	0x2003e6e8
   bbd08:	00000000 	.word	0x00000000
   bbd0c:	000bbc75 	.word	0x000bbc75

000bbd10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbd10:	4770      	bx	lr

000bbd12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bbd12:	2000      	movs	r0, #0
   bbd14:	4770      	bx	lr

000bbd16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbd16:	b510      	push	{r4, lr}
   bbd18:	2110      	movs	r1, #16
   bbd1a:	4604      	mov	r4, r0
   bbd1c:	f7f8 fedb 	bl	b4ad6 <_ZdlPvj>
   bbd20:	4620      	mov	r0, r4
   bbd22:	bd10      	pop	{r4, pc}

000bbd24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bbd24:	b508      	push	{r3, lr}
      { delete this; }
   bbd26:	f7ff fff6 	bl	bbd16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bbd2a:	bd08      	pop	{r3, pc}

000bbd2c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bbd2c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bbd2e:	2200      	movs	r2, #0
   bbd30:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bbd34:	6002      	str	r2, [r0, #0]
   bbd36:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbd38:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bbd3a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbd3c:	680c      	ldr	r4, [r1, #0]
   bbd3e:	8085      	strh	r5, [r0, #4]
   bbd40:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbd42:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bbd44:	bd30      	pop	{r4, r5, pc}

000bbd46 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bbd46:	b510      	push	{r4, lr}
   bbd48:	4604      	mov	r4, r0
    free((void*)msg_);
   bbd4a:	6800      	ldr	r0, [r0, #0]
   bbd4c:	f7fd fbee 	bl	b952c <free>
}
   bbd50:	4620      	mov	r0, r4
   bbd52:	bd10      	pop	{r4, pc}

000bbd54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bbd54:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bbd56:	68c4      	ldr	r4, [r0, #12]
   bbd58:	b1f4      	cbz	r4, bbd98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bbd5a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bbd5c:	2b02      	cmp	r3, #2
   bbd5e:	d103      	bne.n	bbd68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bbd60:	f104 000c 	add.w	r0, r4, #12
   bbd64:	f7ff ffef 	bl	bbd46 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bbd68:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bbd6a:	b135      	cbz	r5, bbd7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bbd6c:	4628      	mov	r0, r5
   bbd6e:	f7f9 f861 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
   bbd72:	2110      	movs	r1, #16
   bbd74:	4628      	mov	r0, r5
   bbd76:	f7f8 feae 	bl	b4ad6 <_ZdlPvj>
   bbd7a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bbd7c:	b135      	cbz	r5, bbd8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bbd7e:	4628      	mov	r0, r5
   bbd80:	f7f9 f858 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
   bbd84:	2110      	movs	r1, #16
   bbd86:	4628      	mov	r0, r5
   bbd88:	f7f8 fea5 	bl	b4ad6 <_ZdlPvj>
   bbd8c:	4620      	mov	r0, r4
   bbd8e:	2114      	movs	r1, #20
   bbd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbd94:	f7f8 be9f 	b.w	b4ad6 <_ZdlPvj>
   bbd98:	bd38      	pop	{r3, r4, r5, pc}

000bbd9a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbd9a:	680b      	ldr	r3, [r1, #0]
   bbd9c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bbd9e:	684b      	ldr	r3, [r1, #4]
   bbda0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bbda2:	b113      	cbz	r3, bbdaa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bbda4:	685a      	ldr	r2, [r3, #4]
   bbda6:	3201      	adds	r2, #1
   bbda8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbdaa:	4770      	bx	lr

000bbdac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bbdac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbdae:	4604      	mov	r4, r0
   bbdb0:	4668      	mov	r0, sp
   bbdb2:	460d      	mov	r5, r1
   bbdb4:	f7ff fff1 	bl	bbd9a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbdb8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bbdba:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbdbc:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bbdbe:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bbdc0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bbdc2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bbdc4:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bbdc6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bbdc8:	f7f9 fcd6 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bbdcc:	b135      	cbz	r5, bbddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bbdce:	1d28      	adds	r0, r5, #4
   bbdd0:	f7f9 fcd2 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbdd4:	2108      	movs	r1, #8
   bbdd6:	4628      	mov	r0, r5
   bbdd8:	f7f8 fe7d 	bl	b4ad6 <_ZdlPvj>
        return p;
    }
   bbddc:	4620      	mov	r0, r4
   bbdde:	b003      	add	sp, #12
   bbde0:	bd30      	pop	{r4, r5, pc}

000bbde2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bbde2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbde4:	b510      	push	{r4, lr}
      if (_M_empty())
   bbde6:	b90a      	cbnz	r2, bbdec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bbde8:	f001 f964 	bl	bd0b4 <_ZSt25__throw_bad_function_callv>
    }
   bbdec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbdf0:	68c3      	ldr	r3, [r0, #12]
   bbdf2:	4718      	bx	r3

000bbdf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbdf4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbdf6:	6800      	ldr	r0, [r0, #0]
   bbdf8:	f100 0110 	add.w	r1, r0, #16
   bbdfc:	f7ff fff1 	bl	bbde2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bbe00:	bd08      	pop	{r3, pc}

000bbe02 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bbe02:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbe04:	b510      	push	{r4, lr}
      if (_M_empty())
   bbe06:	b90a      	cbnz	r2, bbe0c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bbe08:	f001 f954 	bl	bd0b4 <_ZSt25__throw_bad_function_callv>
    }
   bbe0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbe10:	68c3      	ldr	r3, [r0, #12]
   bbe12:	4718      	bx	r3

000bbe14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbe14:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbe16:	6800      	ldr	r0, [r0, #0]
   bbe18:	f100 0110 	add.w	r1, r0, #16
   bbe1c:	f7ff fff1 	bl	bbe02 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bbe20:	bd08      	pop	{r3, pc}
	...

000bbe24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bbe24:	b538      	push	{r3, r4, r5, lr}
   bbe26:	2300      	movs	r3, #0
   bbe28:	4604      	mov	r4, r0
   bbe2a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbe2c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bbe2e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbe30:	f7f8 fe4b 	bl	b4aca <_Znwj>
   bbe34:	b128      	cbz	r0, bbe42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bbe36:	2301      	movs	r3, #1
   bbe38:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bbe3c:	4b02      	ldr	r3, [pc, #8]	; (bbe48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bbe3e:	6003      	str	r3, [r0, #0]
   bbe40:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbe42:	6020      	str	r0, [r4, #0]
	}
   bbe44:	4620      	mov	r0, r4
   bbe46:	bd38      	pop	{r3, r4, r5, pc}
   bbe48:	000c0260 	.word	0x000c0260

000bbe4c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bbe4c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bbe4e:	2300      	movs	r3, #0
   bbe50:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bbe52:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbe54:	4604      	mov	r4, r0
   bbe56:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbe58:	b12b      	cbz	r3, bbe66 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbe5a:	2202      	movs	r2, #2
   bbe5c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbe5e:	68eb      	ldr	r3, [r5, #12]
   bbe60:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbe62:	68ab      	ldr	r3, [r5, #8]
   bbe64:	60a3      	str	r3, [r4, #8]
    }
   bbe66:	4620      	mov	r0, r4
   bbe68:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbe6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bbe6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbe6e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bbe70:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bbe72:	4668      	mov	r0, sp
   bbe74:	f7ff ff5a 	bl	bbd2c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bbe78:	f04f 0302 	mov.w	r3, #2
   bbe7c:	e8d4 2f4f 	ldrexb	r2, [r4]
   bbe80:	2a00      	cmp	r2, #0
   bbe82:	d103      	bne.n	bbe8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bbe84:	e8c4 3f41 	strexb	r1, r3, [r4]
   bbe88:	2900      	cmp	r1, #0
   bbe8a:	d1f7      	bne.n	bbe7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bbe8c:	d125      	bne.n	bbeda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bbe8e:	f104 050c 	add.w	r5, r4, #12
   bbe92:	4669      	mov	r1, sp
   bbe94:	4628      	mov	r0, r5
   bbe96:	f7ff ff49 	bl	bbd2c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bbe9a:	f3bf 8f5b 	dmb	ish
   bbe9e:	2301      	movs	r3, #1
   bbea0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bbea2:	2000      	movs	r0, #0
   bbea4:	f104 0308 	add.w	r3, r4, #8
   bbea8:	f3bf 8f5b 	dmb	ish
   bbeac:	e853 6f00 	ldrex	r6, [r3]
   bbeb0:	e843 0200 	strex	r2, r0, [r3]
   bbeb4:	2a00      	cmp	r2, #0
   bbeb6:	d1f9      	bne.n	bbeac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bbeb8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bbebc:	b16e      	cbz	r6, bbeda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bbebe:	f7fd fa69 	bl	b9394 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bbec2:	b178      	cbz	r0, bbee4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bbec4:	4629      	mov	r1, r5
   bbec6:	4630      	mov	r0, r6
   bbec8:	f7ff ff8b 	bl	bbde2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bbecc:	4630      	mov	r0, r6
   bbece:	f7f8 ffb1 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bbed2:	2110      	movs	r1, #16
   bbed4:	4630      	mov	r0, r6
   bbed6:	f7f8 fdfe 	bl	b4ad6 <_ZdlPvj>
        p_->setError(std::move(error));
   bbeda:	4668      	mov	r0, sp
   bbedc:	f7ff ff33 	bl	bbd46 <_ZN8particle5ErrorD1Ev>
    }
   bbee0:	b009      	add	sp, #36	; 0x24
   bbee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbee4:	4631      	mov	r1, r6
   bbee6:	a802      	add	r0, sp, #8
   bbee8:	f7ff ffb0 	bl	bbe4c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbeec:	68e0      	ldr	r0, [r4, #12]
   bbeee:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbef2:	b108      	cbz	r0, bbef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bbef4:	f001 fac6 	bl	bd484 <strdup>
        type_(type) {
   bbef8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bbefa:	2010      	movs	r0, #16
   bbefc:	f8ad 501c 	strh.w	r5, [sp, #28]
   bbf00:	f7f8 fde3 	bl	b4aca <_Znwj>
   bbf04:	4605      	mov	r5, r0
   bbf06:	b1e8      	cbz	r0, bbf44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bbf08:	2700      	movs	r7, #0
   bbf0a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbf0c:	2018      	movs	r0, #24
   bbf0e:	f7f8 fddc 	bl	b4aca <_Znwj>
   bbf12:	4604      	mov	r4, r0
   bbf14:	b188      	cbz	r0, bbf3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bbf16:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bbf18:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bbf1a:	a802      	add	r0, sp, #8
   bbf1c:	f7ff f908 	bl	bb130 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbf20:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bbf22:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf24:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbf26:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbf28:	9204      	str	r2, [sp, #16]
   bbf2a:	a906      	add	r1, sp, #24
   bbf2c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf2e:	60e3      	str	r3, [r4, #12]
   bbf30:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bbf34:	9205      	str	r2, [sp, #20]
   bbf36:	f7ff fef9 	bl	bbd2c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bbf3a:	4b08      	ldr	r3, [pc, #32]	; (bbf5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bbf3c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bbf3e:	4b08      	ldr	r3, [pc, #32]	; (bbf60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbf40:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bbf42:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bbf44:	a806      	add	r0, sp, #24
   bbf46:	f7ff fefe 	bl	bbd46 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbf4a:	a802      	add	r0, sp, #8
   bbf4c:	f7f8 ff72 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bbf50:	2200      	movs	r2, #0
   bbf52:	4629      	mov	r1, r5
   bbf54:	4803      	ldr	r0, [pc, #12]	; (bbf64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bbf56:	f7fd fa25 	bl	b93a4 <application_thread_invoke>
   bbf5a:	e7b7      	b.n	bbecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bbf5c:	000bbdf5 	.word	0x000bbdf5
   bbf60:	000bc079 	.word	0x000bc079
   bbf64:	000bc581 	.word	0x000bc581

000bbf68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bbf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf6c:	b08b      	sub	sp, #44	; 0x2c
   bbf6e:	4605      	mov	r5, r0
   bbf70:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bbf74:	460f      	mov	r7, r1
   bbf76:	4690      	mov	r8, r2
   bbf78:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bbf7a:	f7fd fa9f 	bl	b94bc <spark_cloud_flag_connected>
   bbf7e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bbf80:	4683      	mov	fp, r0
   bbf82:	bb38      	cbnz	r0, bbfd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bbf84:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bbf88:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbf8a:	a905      	add	r1, sp, #20
   bbf8c:	4630      	mov	r0, r6
   bbf8e:	f8ad 3018 	strh.w	r3, [sp, #24]
   bbf92:	f7ff fecb 	bl	bbd2c <_ZN8particle5ErrorC1EOS0_>
   bbf96:	2014      	movs	r0, #20
   bbf98:	f7f8 fd97 	bl	b4aca <_Znwj>
   bbf9c:	4604      	mov	r4, r0
   bbf9e:	b148      	cbz	r0, bbfb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bbfa0:	2302      	movs	r3, #2
   bbfa2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbfa4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbfa6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbfaa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bbfac:	4631      	mov	r1, r6
   bbfae:	300c      	adds	r0, #12
   bbfb0:	f7ff febc 	bl	bbd2c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbfb4:	4628      	mov	r0, r5
	: __shared_count(__p)
   bbfb6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbfb8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bbfbc:	f7ff ff32 	bl	bbe24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbfc0:	4630      	mov	r0, r6
   bbfc2:	f7ff fec0 	bl	bbd46 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bbfc6:	a805      	add	r0, sp, #20
   bbfc8:	f7ff febd 	bl	bbd46 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bbfcc:	4628      	mov	r0, r5
   bbfce:	b00b      	add	sp, #44	; 0x2c
   bbfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bbfd4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bbfd6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bbfd8:	2014      	movs	r0, #20
   bbfda:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bbfde:	9307      	str	r3, [sp, #28]
   bbfe0:	f7f8 fd73 	bl	b4aca <_Znwj>
   bbfe4:	4601      	mov	r1, r0
   bbfe6:	b118      	cbz	r0, bbff0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbfe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbfec:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbfee:	7044      	strb	r4, [r0, #1]
   bbff0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbff2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bbff4:	f7ff ff16 	bl	bbe24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bbff8:	4b1e      	ldr	r3, [pc, #120]	; (bc074 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bbffa:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bbffc:	2008      	movs	r0, #8
   bbffe:	f7f8 fd64 	bl	b4aca <_Znwj>
   bc002:	4604      	mov	r4, r0
   bc004:	b110      	cbz	r0, bc00c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc006:	a903      	add	r1, sp, #12
   bc008:	f7ff fec7 	bl	bbd9a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc00c:	9600      	str	r6, [sp, #0]
   bc00e:	fa5f f38a 	uxtb.w	r3, sl
   bc012:	464a      	mov	r2, r9
   bc014:	4641      	mov	r1, r8
   bc016:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc018:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc01a:	f7fd fa57 	bl	b94cc <spark_send_event>
   bc01e:	b9b8      	cbnz	r0, bc050 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc020:	9b03      	ldr	r3, [sp, #12]
   bc022:	785b      	ldrb	r3, [r3, #1]
   bc024:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc028:	b993      	cbnz	r3, bc050 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc02a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc02e:	a905      	add	r1, sp, #20
   bc030:	a803      	add	r0, sp, #12
   bc032:	9205      	str	r2, [sp, #20]
   bc034:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc038:	f7ff ff18 	bl	bbe6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc03c:	a805      	add	r0, sp, #20
   bc03e:	f7ff fe82 	bl	bbd46 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc042:	a805      	add	r0, sp, #20
   bc044:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc046:	f7ff feb1 	bl	bbdac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc04a:	a806      	add	r0, sp, #24
   bc04c:	f7f9 fb94 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc050:	a903      	add	r1, sp, #12
   bc052:	a805      	add	r0, sp, #20
   bc054:	f7ff fea1 	bl	bbd9a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc058:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc05a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc05c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bc05e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bc060:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc062:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bc064:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bc066:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bc068:	f7f9 fb86 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc06c:	a804      	add	r0, sp, #16
   bc06e:	f7f9 fb83 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bc072:	e7ab      	b.n	bbfcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bc074:	000bc0f5 	.word	0x000bc0f5

000bc078 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bc078:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc07c:	4605      	mov	r5, r0
	switch (__op)
   bc07e:	d103      	bne.n	bc088 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc080:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc082:	6003      	str	r3, [r0, #0]
      }
   bc084:	2000      	movs	r0, #0
   bc086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bc088:	2a02      	cmp	r2, #2
   bc08a:	d010      	beq.n	bc0ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bc08c:	2a03      	cmp	r2, #3
   bc08e:	d1f9      	bne.n	bc084 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc090:	6804      	ldr	r4, [r0, #0]
   bc092:	2c00      	cmp	r4, #0
   bc094:	d0f6      	beq.n	bc084 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bc096:	f104 0010 	add.w	r0, r4, #16
   bc09a:	f7ff fe54 	bl	bbd46 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc09e:	4620      	mov	r0, r4
   bc0a0:	f7f8 fec8 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc0a4:	2118      	movs	r1, #24
   bc0a6:	4620      	mov	r0, r4
   bc0a8:	f7f8 fd15 	bl	b4ad6 <_ZdlPvj>
   bc0ac:	e7ea      	b.n	bc084 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc0ae:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bc0b0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc0b2:	f7f8 fd0a 	bl	b4aca <_Znwj>
   bc0b6:	4604      	mov	r4, r0
   bc0b8:	b150      	cbz	r0, bc0d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bc0ba:	4631      	mov	r1, r6
   bc0bc:	f7ff fec6 	bl	bbe4c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc0c0:	6930      	ldr	r0, [r6, #16]
   bc0c2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc0c6:	b108      	cbz	r0, bc0cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bc0c8:	f001 f9dc 	bl	bd484 <strdup>
        type_(type) {
   bc0cc:	6120      	str	r0, [r4, #16]
   bc0ce:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bc0d0:	602c      	str	r4, [r5, #0]
	}
   bc0d2:	e7d7      	b.n	bc084 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bc0d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bc0d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc0d6:	2300      	movs	r3, #0
   bc0d8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc0da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc0dc:	4604      	mov	r4, r0
   bc0de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc0e0:	b12b      	cbz	r3, bc0ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc0e2:	2202      	movs	r2, #2
   bc0e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc0e6:	68eb      	ldr	r3, [r5, #12]
   bc0e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc0ea:	68ab      	ldr	r3, [r5, #8]
   bc0ec:	60a3      	str	r3, [r4, #8]
    }
   bc0ee:	4620      	mov	r0, r4
   bc0f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc0f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bc0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc0f6:	b089      	sub	sp, #36	; 0x24
   bc0f8:	4604      	mov	r4, r0
   bc0fa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bc0fc:	a801      	add	r0, sp, #4
   bc0fe:	4611      	mov	r1, r2
   bc100:	f7ff fe54 	bl	bbdac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bc104:	b1a4      	cbz	r4, bc130 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bc106:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc108:	b11d      	cbz	r5, bc112 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bc10a:	4628      	mov	r0, r5
   bc10c:	f001 f9ba 	bl	bd484 <strdup>
   bc110:	4605      	mov	r5, r0
   bc112:	a801      	add	r0, sp, #4
   bc114:	a903      	add	r1, sp, #12
        type_(type) {
   bc116:	9503      	str	r5, [sp, #12]
   bc118:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc11c:	f7ff fea6 	bl	bbe6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc120:	a803      	add	r0, sp, #12
   bc122:	f7ff fe10 	bl	bbd46 <_ZN8particle5ErrorD1Ev>
   bc126:	a802      	add	r0, sp, #8
   bc128:	f7f9 fb26 	bl	b5778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc12c:	b009      	add	sp, #36	; 0x24
   bc12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc130:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc132:	2301      	movs	r3, #1
   bc134:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc138:	2a00      	cmp	r2, #0
   bc13a:	d103      	bne.n	bc144 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc13c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc140:	2900      	cmp	r1, #0
   bc142:	d1f7      	bne.n	bc134 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc144:	d1ef      	bne.n	bc126 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc146:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc148:	f3bf 8f5b 	dmb	ish
   bc14c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc14e:	1d2b      	adds	r3, r5, #4
   bc150:	f3bf 8f5b 	dmb	ish
   bc154:	e853 6f00 	ldrex	r6, [r3]
   bc158:	e843 4200 	strex	r2, r4, [r3]
   bc15c:	2a00      	cmp	r2, #0
   bc15e:	d1f9      	bne.n	bc154 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc160:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc164:	2e00      	cmp	r6, #0
   bc166:	d0de      	beq.n	bc126 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc168:	4620      	mov	r0, r4
   bc16a:	f7fd f913 	bl	b9394 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc16e:	4607      	mov	r7, r0
   bc170:	b160      	cbz	r0, bc18c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc172:	f105 010c 	add.w	r1, r5, #12
   bc176:	4630      	mov	r0, r6
   bc178:	f7ff fe43 	bl	bbe02 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc17c:	4630      	mov	r0, r6
   bc17e:	f7f8 fe59 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc182:	2110      	movs	r1, #16
   bc184:	4630      	mov	r0, r6
   bc186:	f7f8 fca6 	bl	b4ad6 <_ZdlPvj>
   bc18a:	e7cc      	b.n	bc126 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc18c:	4631      	mov	r1, r6
   bc18e:	a803      	add	r0, sp, #12
   bc190:	f7ff ffa0 	bl	bc0d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc194:	7b2b      	ldrb	r3, [r5, #12]
   bc196:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc19a:	2010      	movs	r0, #16
   bc19c:	f7f8 fc95 	bl	b4aca <_Znwj>
   bc1a0:	4605      	mov	r5, r0
   bc1a2:	b1d0      	cbz	r0, bc1da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc1a4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc1a6:	2014      	movs	r0, #20
   bc1a8:	f7f8 fc8f 	bl	b4aca <_Znwj>
   bc1ac:	4604      	mov	r4, r0
   bc1ae:	b178      	cbz	r0, bc1d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc1b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc1b2:	4601      	mov	r1, r0
   bc1b4:	a803      	add	r0, sp, #12
   bc1b6:	f7fe ffbb 	bl	bb130 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc1ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc1bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc1be:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc1c0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc1c2:	9205      	str	r2, [sp, #20]
   bc1c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc1c6:	60e3      	str	r3, [r4, #12]
   bc1c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc1cc:	9206      	str	r2, [sp, #24]
   bc1ce:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc1d0:	4b06      	ldr	r3, [pc, #24]	; (bc1ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc1d2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc1d4:	4b06      	ldr	r3, [pc, #24]	; (bc1f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc1d6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc1d8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc1da:	a803      	add	r0, sp, #12
   bc1dc:	f7f8 fe2a 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc1e0:	2200      	movs	r2, #0
   bc1e2:	4629      	mov	r1, r5
   bc1e4:	4803      	ldr	r0, [pc, #12]	; (bc1f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc1e6:	f7fd f8dd 	bl	b93a4 <application_thread_invoke>
   bc1ea:	e7c7      	b.n	bc17c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc1ec:	000bbe15 	.word	0x000bbe15
   bc1f0:	000bc1f9 	.word	0x000bc1f9
   bc1f4:	000bc581 	.word	0x000bc581

000bc1f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc1f8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc1fa:	b570      	push	{r4, r5, r6, lr}
   bc1fc:	4604      	mov	r4, r0
	switch (__op)
   bc1fe:	d103      	bne.n	bc208 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc200:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc202:	6003      	str	r3, [r0, #0]
      }
   bc204:	2000      	movs	r0, #0
   bc206:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bc208:	2a02      	cmp	r2, #2
   bc20a:	d00c      	beq.n	bc226 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bc20c:	2a03      	cmp	r2, #3
   bc20e:	d1f9      	bne.n	bc204 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc210:	6804      	ldr	r4, [r0, #0]
   bc212:	2c00      	cmp	r4, #0
   bc214:	d0f6      	beq.n	bc204 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bc216:	4620      	mov	r0, r4
   bc218:	f7f8 fe0c 	bl	b4e34 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc21c:	2114      	movs	r1, #20
   bc21e:	4620      	mov	r0, r4
   bc220:	f7f8 fc59 	bl	b4ad6 <_ZdlPvj>
   bc224:	e7ee      	b.n	bc204 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc226:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bc228:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc22a:	f7f8 fc4e 	bl	b4aca <_Znwj>
   bc22e:	4605      	mov	r5, r0
   bc230:	b120      	cbz	r0, bc23c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bc232:	4631      	mov	r1, r6
   bc234:	f7ff ff4e 	bl	bc0d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bc238:	7c33      	ldrb	r3, [r6, #16]
   bc23a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bc23c:	6025      	str	r5, [r4, #0]
	}
   bc23e:	e7e1      	b.n	bc204 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bc240 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   bc240:	4770      	bx	lr

000bc242 <_ZN9IPAddressD0Ev>:
   bc242:	b510      	push	{r4, lr}
   bc244:	2118      	movs	r1, #24
   bc246:	4604      	mov	r4, r0
   bc248:	f7f8 fc45 	bl	b4ad6 <_ZdlPvj>
   bc24c:	4620      	mov	r0, r4
   bc24e:	bd10      	pop	{r4, pc}

000bc250 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc250:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc252:	7d03      	ldrb	r3, [r0, #20]
   bc254:	2b06      	cmp	r3, #6
{
   bc256:	b08d      	sub	sp, #52	; 0x34
   bc258:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc25a:	f100 0704 	add.w	r7, r0, #4
   bc25e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc262:	d012      	beq.n	bc28a <_ZNK9IPAddress7printToER5Print+0x3a>
   bc264:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc268:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc26c:	220a      	movs	r2, #10
   bc26e:	4630      	mov	r0, r6
   bc270:	f7ff fa69 	bl	bb746 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc274:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc276:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc278:	d019      	beq.n	bc2ae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc27a:	2c00      	cmp	r4, #0
   bc27c:	d0f4      	beq.n	bc268 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc27e:	212e      	movs	r1, #46	; 0x2e
   bc280:	4630      	mov	r0, r6
   bc282:	f7ff fa37 	bl	bb6f4 <_ZN5Print5printEc>
   bc286:	4404      	add	r4, r0
   bc288:	e7ee      	b.n	bc268 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc28a:	232f      	movs	r3, #47	; 0x2f
   bc28c:	466a      	mov	r2, sp
   bc28e:	4639      	mov	r1, r7
   bc290:	200a      	movs	r0, #10
		buf[0] = 0;
   bc292:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc296:	f7fc ff25 	bl	b90e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc29a:	4668      	mov	r0, sp
   bc29c:	f7f8 fbba 	bl	b4a14 <strlen>
   bc2a0:	6833      	ldr	r3, [r6, #0]
   bc2a2:	4602      	mov	r2, r0
   bc2a4:	68db      	ldr	r3, [r3, #12]
   bc2a6:	4669      	mov	r1, sp
   bc2a8:	4630      	mov	r0, r6
   bc2aa:	4798      	blx	r3
   bc2ac:	4604      	mov	r4, r0
    }
    return n;
}
   bc2ae:	4620      	mov	r0, r4
   bc2b0:	b00d      	add	sp, #52	; 0x34
   bc2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc2b4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc2b4:	b510      	push	{r4, lr}
   bc2b6:	4b05      	ldr	r3, [pc, #20]	; (bc2cc <_ZN9IPAddressC1Ev+0x18>)
   bc2b8:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   bc2ba:	2211      	movs	r2, #17
   bc2bc:	f840 3b04 	str.w	r3, [r0], #4
   bc2c0:	2100      	movs	r1, #0
   bc2c2:	f001 f890 	bl	bd3e6 <memset>
}
   bc2c6:	4620      	mov	r0, r4
   bc2c8:	bd10      	pop	{r4, pc}
   bc2ca:	bf00      	nop
   bc2cc:	000c027c 	.word	0x000c027c

000bc2d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc2d0:	4603      	mov	r3, r0
   bc2d2:	4a07      	ldr	r2, [pc, #28]	; (bc2f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc2d4:	b510      	push	{r4, lr}
   bc2d6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc2da:	f101 0210 	add.w	r2, r1, #16
   bc2de:	f851 4b04 	ldr.w	r4, [r1], #4
   bc2e2:	f843 4b04 	str.w	r4, [r3], #4
   bc2e6:	4291      	cmp	r1, r2
   bc2e8:	d1f9      	bne.n	bc2de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc2ea:	780a      	ldrb	r2, [r1, #0]
   bc2ec:	701a      	strb	r2, [r3, #0]
}
   bc2ee:	bd10      	pop	{r4, pc}
   bc2f0:	000c027c 	.word	0x000c027c

000bc2f4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   bc2f4:	4a02      	ldr	r2, [pc, #8]	; (bc300 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   bc2f6:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   bc2fa:	2204      	movs	r2, #4
   bc2fc:	7502      	strb	r2, [r0, #20]
}
   bc2fe:	4770      	bx	lr
   bc300:	000c027c 	.word	0x000c027c

000bc304 <_ZNK9IPAddresscvbEv>:
    		return address.v;
   bc304:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   bc306:	2b04      	cmp	r3, #4
   bc308:	d104      	bne.n	bc314 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   bc30a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bc30c:	3800      	subs	r0, #0
   bc30e:	bf18      	it	ne
   bc310:	2001      	movne	r0, #1
   bc312:	4770      	bx	lr
    } else if (version() == 6) {
   bc314:	2b06      	cmp	r3, #6
   bc316:	d107      	bne.n	bc328 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bc318:	6843      	ldr	r3, [r0, #4]
   bc31a:	b93b      	cbnz	r3, bc32c <_ZNK9IPAddresscvbEv+0x28>
   bc31c:	6883      	ldr	r3, [r0, #8]
   bc31e:	b92b      	cbnz	r3, bc32c <_ZNK9IPAddresscvbEv+0x28>
   bc320:	68c3      	ldr	r3, [r0, #12]
   bc322:	b91b      	cbnz	r3, bc32c <_ZNK9IPAddresscvbEv+0x28>
   bc324:	6900      	ldr	r0, [r0, #16]
   bc326:	e7f1      	b.n	bc30c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   bc328:	2000      	movs	r0, #0
   bc32a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bc32c:	2001      	movs	r0, #1
}
   bc32e:	4770      	bx	lr

000bc330 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc330:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc332:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc336:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc33a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc33e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc342:	2304      	movs	r3, #4
   bc344:	6041      	str	r1, [r0, #4]
   bc346:	7503      	strb	r3, [r0, #20]
}
   bc348:	bd10      	pop	{r4, pc}
	...

000bc34c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   bc34c:	b513      	push	{r0, r1, r4, lr}
   bc34e:	4c04      	ldr	r4, [pc, #16]	; (bc360 <_ZN9IPAddressC1Ehhhh+0x14>)
   bc350:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   bc352:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bc356:	9400      	str	r4, [sp, #0]
   bc358:	f7ff ffea 	bl	bc330 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc35c:	b002      	add	sp, #8
   bc35e:	bd10      	pop	{r4, pc}
   bc360:	000c027c 	.word	0x000c027c

000bc364 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc364:	b507      	push	{r0, r1, r2, lr}
   bc366:	4b06      	ldr	r3, [pc, #24]	; (bc380 <_ZN9IPAddressC1EPKh+0x1c>)
   bc368:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc36a:	78cb      	ldrb	r3, [r1, #3]
   bc36c:	9300      	str	r3, [sp, #0]
   bc36e:	788b      	ldrb	r3, [r1, #2]
   bc370:	784a      	ldrb	r2, [r1, #1]
   bc372:	7809      	ldrb	r1, [r1, #0]
   bc374:	f7ff ffdc 	bl	bc330 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc378:	b003      	add	sp, #12
   bc37a:	f85d fb04 	ldr.w	pc, [sp], #4
   bc37e:	bf00      	nop
   bc380:	000c027c 	.word	0x000c027c

000bc384 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bc384:	7441      	strb	r1, [r0, #17]
}
   bc386:	4770      	bx	lr

000bc388 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc388:	4770      	bx	lr

000bc38a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bc38a:	4770      	bx	lr

000bc38c <_ZN9USBSerial4readEv>:
{
   bc38c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bc38e:	2100      	movs	r1, #0
   bc390:	7c00      	ldrb	r0, [r0, #16]
   bc392:	f7fc ffaf 	bl	b92f4 <HAL_USB_USART_Receive_Data>
}
   bc396:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc39a:	bd08      	pop	{r3, pc}

000bc39c <_ZN9USBSerial4peekEv>:
{
   bc39c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bc39e:	2101      	movs	r1, #1
   bc3a0:	7c00      	ldrb	r0, [r0, #16]
   bc3a2:	f7fc ffa7 	bl	b92f4 <HAL_USB_USART_Receive_Data>
}
   bc3a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc3aa:	bd08      	pop	{r3, pc}

000bc3ac <_ZN9USBSerial17availableForWriteEv>:
{
   bc3ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bc3ae:	7c00      	ldrb	r0, [r0, #16]
   bc3b0:	f7fc ff98 	bl	b92e4 <HAL_USB_USART_Available_Data_For_Write>
}
   bc3b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc3b8:	bd08      	pop	{r3, pc}

000bc3ba <_ZN9USBSerial9availableEv>:
{
   bc3ba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bc3bc:	7c00      	ldrb	r0, [r0, #16]
   bc3be:	f7fc ff89 	bl	b92d4 <HAL_USB_USART_Available_Data>
}
   bc3c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc3c6:	bd08      	pop	{r3, pc}

000bc3c8 <_ZN9USBSerial5writeEh>:
{
   bc3c8:	b513      	push	{r0, r1, r4, lr}
   bc3ca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bc3cc:	7c00      	ldrb	r0, [r0, #16]
{
   bc3ce:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bc3d0:	f7fc ff88 	bl	b92e4 <HAL_USB_USART_Available_Data_For_Write>
   bc3d4:	2800      	cmp	r0, #0
   bc3d6:	9901      	ldr	r1, [sp, #4]
   bc3d8:	dc01      	bgt.n	bc3de <_ZN9USBSerial5writeEh+0x16>
   bc3da:	7c60      	ldrb	r0, [r4, #17]
   bc3dc:	b120      	cbz	r0, bc3e8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bc3de:	7c20      	ldrb	r0, [r4, #16]
   bc3e0:	f7fc ff90 	bl	b9304 <HAL_USB_USART_Send_Data>
   bc3e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bc3e8:	b002      	add	sp, #8
   bc3ea:	bd10      	pop	{r4, pc}

000bc3ec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bc3ec:	7c00      	ldrb	r0, [r0, #16]
   bc3ee:	f7fc bf91 	b.w	b9314 <HAL_USB_USART_Flush_Data>

000bc3f2 <_ZN9USBSerialD0Ev>:
   bc3f2:	b510      	push	{r4, lr}
   bc3f4:	2114      	movs	r1, #20
   bc3f6:	4604      	mov	r4, r0
   bc3f8:	f7f8 fb6d 	bl	b4ad6 <_ZdlPvj>
   bc3fc:	4620      	mov	r0, r4
   bc3fe:	bd10      	pop	{r4, pc}

000bc400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bc400:	b510      	push	{r4, lr}
   bc402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc406:	4604      	mov	r4, r0
   bc408:	4608      	mov	r0, r1
   bc40a:	2100      	movs	r1, #0
   bc40c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc410:	4b04      	ldr	r3, [pc, #16]	; (bc424 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bc412:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bc414:	2301      	movs	r3, #1
  _serial = serial;
   bc416:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bc418:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bc41a:	4611      	mov	r1, r2
   bc41c:	f7fc ff52 	bl	b92c4 <HAL_USB_USART_Init>
}
   bc420:	4620      	mov	r0, r4
   bc422:	bd10      	pop	{r4, pc}
   bc424:	000c0290 	.word	0x000c0290

000bc428 <_Z19acquireSerialBufferv>:
{
   bc428:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bc42a:	2214      	movs	r2, #20
{
   bc42c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bc42e:	2100      	movs	r1, #0
   bc430:	f000 ffd9 	bl	bd3e6 <memset>
}
   bc434:	4620      	mov	r0, r4
   bc436:	bd10      	pop	{r4, pc}

000bc438 <_Z16_fetch_usbserialv>:
{
   bc438:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc43a:	4c0f      	ldr	r4, [pc, #60]	; (bc478 <_Z16_fetch_usbserialv+0x40>)
{
   bc43c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bc43e:	a803      	add	r0, sp, #12
   bc440:	f7ff fff2 	bl	bc428 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc444:	7821      	ldrb	r1, [r4, #0]
   bc446:	f3bf 8f5b 	dmb	ish
   bc44a:	f011 0101 	ands.w	r1, r1, #1
   bc44e:	d10f      	bne.n	bc470 <_Z16_fetch_usbserialv+0x38>
   bc450:	4620      	mov	r0, r4
   bc452:	9101      	str	r1, [sp, #4]
   bc454:	f7f8 fb41 	bl	b4ada <__cxa_guard_acquire>
   bc458:	9901      	ldr	r1, [sp, #4]
   bc45a:	b148      	cbz	r0, bc470 <_Z16_fetch_usbserialv+0x38>
   bc45c:	aa03      	add	r2, sp, #12
   bc45e:	4807      	ldr	r0, [pc, #28]	; (bc47c <_Z16_fetch_usbserialv+0x44>)
   bc460:	f7ff ffce 	bl	bc400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bc464:	4620      	mov	r0, r4
   bc466:	f7f8 fb3d 	bl	b4ae4 <__cxa_guard_release>
   bc46a:	4805      	ldr	r0, [pc, #20]	; (bc480 <_Z16_fetch_usbserialv+0x48>)
   bc46c:	f000 ff5e 	bl	bd32c <atexit>
	return _usbserial;
}
   bc470:	4802      	ldr	r0, [pc, #8]	; (bc47c <_Z16_fetch_usbserialv+0x44>)
   bc472:	b008      	add	sp, #32
   bc474:	bd10      	pop	{r4, pc}
   bc476:	bf00      	nop
   bc478:	2003e6f0 	.word	0x2003e6f0
   bc47c:	2003e6f4 	.word	0x2003e6f4
   bc480:	000bc389 	.word	0x000bc389

000bc484 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bc484:	4700      	bx	r0
	...

000bc488 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bc488:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   bc48c:	2400      	movs	r4, #0
{
   bc48e:	461d      	mov	r5, r3
   bc490:	460f      	mov	r7, r1
   bc492:	4690      	mov	r8, r2
   bc494:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   bc496:	f7fc fcbb 	bl	b8e10 <hal_interrupt_detach>
  if (priority >= 0) {
   bc49a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc49c:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   bc4a0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc4a4:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   bc4a8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc4ac:	bfa2      	ittt	ge
   bc4ae:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc4b2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc4b6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc4b8:	4907      	ldr	r1, [pc, #28]	; (bc4d8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc4ba:	9400      	str	r4, [sp, #0]
   bc4bc:	4643      	mov	r3, r8
   bc4be:	463a      	mov	r2, r7
   bc4c0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc4c2:	bfa8      	it	ge
   bc4c4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc4c8:	f7fc fc9a 	bl	b8e00 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   bc4cc:	fab0 f080 	clz	r0, r0
   bc4d0:	0940      	lsrs	r0, r0, #5
   bc4d2:	b004      	add	sp, #16
   bc4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc4d8:	000bc485 	.word	0x000bc485

000bc4dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bc4dc:	4770      	bx	lr

000bc4de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bc4de:	7441      	strb	r1, [r0, #17]
}
   bc4e0:	4770      	bx	lr

000bc4e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bc4e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bc4e4:	7c00      	ldrb	r0, [r0, #16]
   bc4e6:	f7fc fe4d 	bl	b9184 <hal_usart_available_data_for_write>
}
   bc4ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc4ee:	bd08      	pop	{r3, pc}

000bc4f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bc4f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bc4f2:	7c00      	ldrb	r0, [r0, #16]
   bc4f4:	f7fc fe1e 	bl	b9134 <hal_usart_available>
}
   bc4f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc4fc:	bd08      	pop	{r3, pc}

000bc4fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bc4fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bc500:	7c00      	ldrb	r0, [r0, #16]
   bc502:	f7fc fe27 	bl	b9154 <hal_usart_peek>
}
   bc506:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc50a:	bd08      	pop	{r3, pc}

000bc50c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bc50c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bc50e:	7c00      	ldrb	r0, [r0, #16]
   bc510:	f7fc fe18 	bl	b9144 <hal_usart_read>
}
   bc514:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc518:	bd08      	pop	{r3, pc}

000bc51a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bc51a:	7c00      	ldrb	r0, [r0, #16]
   bc51c:	f7fc be22 	b.w	b9164 <hal_usart_flush>

000bc520 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bc520:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc522:	7c45      	ldrb	r5, [r0, #17]
{
   bc524:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc526:	b12d      	cbz	r5, bc534 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bc528:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bc52a:	b003      	add	sp, #12
   bc52c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bc530:	f7fc bdf8 	b.w	b9124 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc534:	7c00      	ldrb	r0, [r0, #16]
   bc536:	9101      	str	r1, [sp, #4]
   bc538:	f7fc fe24 	bl	b9184 <hal_usart_available_data_for_write>
   bc53c:	2800      	cmp	r0, #0
   bc53e:	9901      	ldr	r1, [sp, #4]
   bc540:	dcf2      	bgt.n	bc528 <_ZN11USARTSerial5writeEh+0x8>
}
   bc542:	4628      	mov	r0, r5
   bc544:	b003      	add	sp, #12
   bc546:	bd30      	pop	{r4, r5, pc}

000bc548 <_ZN11USARTSerialD0Ev>:
   bc548:	b510      	push	{r4, lr}
   bc54a:	2114      	movs	r1, #20
   bc54c:	4604      	mov	r4, r0
   bc54e:	f7f8 fac2 	bl	b4ad6 <_ZdlPvj>
   bc552:	4620      	mov	r0, r4
   bc554:	bd10      	pop	{r4, pc}
	...

000bc558 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bc558:	b510      	push	{r4, lr}
   bc55a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc55e:	4604      	mov	r4, r0
   bc560:	4608      	mov	r0, r1
   bc562:	4611      	mov	r1, r2
   bc564:	2200      	movs	r2, #0
   bc566:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bc56a:	4b04      	ldr	r3, [pc, #16]	; (bc57c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bc56c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bc56e:	2301      	movs	r3, #1
  _serial = serial;
   bc570:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bc572:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bc574:	f7fc fe0e 	bl	b9194 <hal_usart_init_ex>
}
   bc578:	4620      	mov	r0, r4
   bc57a:	bd10      	pop	{r4, pc}
   bc57c:	000c02c0 	.word	0x000c02c0

000bc580 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bc580:	b510      	push	{r4, lr}
      if (_M_empty())
   bc582:	6883      	ldr	r3, [r0, #8]
   bc584:	4604      	mov	r4, r0
   bc586:	b90b      	cbnz	r3, bc58c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bc588:	f000 fd94 	bl	bd0b4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc58c:	68c3      	ldr	r3, [r0, #12]
   bc58e:	4798      	blx	r3
      if (_M_manager)
   bc590:	68a3      	ldr	r3, [r4, #8]
   bc592:	b11b      	cbz	r3, bc59c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bc594:	2203      	movs	r2, #3
   bc596:	4621      	mov	r1, r4
   bc598:	4620      	mov	r0, r4
   bc59a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bc59c:	4620      	mov	r0, r4
   bc59e:	2110      	movs	r1, #16
}
   bc5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bc5a4:	f7f8 ba97 	b.w	b4ad6 <_ZdlPvj>

000bc5a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bc5a8:	4770      	bx	lr

000bc5aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bc5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc5ac:	4606      	mov	r6, r0
   bc5ae:	4615      	mov	r5, r2
   bc5b0:	460c      	mov	r4, r1
   bc5b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bc5b4:	42bc      	cmp	r4, r7
   bc5b6:	d006      	beq.n	bc5c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bc5b8:	6833      	ldr	r3, [r6, #0]
   bc5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   bc5be:	689b      	ldr	r3, [r3, #8]
   bc5c0:	4630      	mov	r0, r6
   bc5c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bc5c4:	e7f6      	b.n	bc5b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bc5c6:	4628      	mov	r0, r5
   bc5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc5ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bc5ca:	7c00      	ldrb	r0, [r0, #16]
   bc5cc:	2200      	movs	r2, #0
   bc5ce:	f7fc bde9 	b.w	b91a4 <hal_i2c_write>

000bc5d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bc5d2:	7c00      	ldrb	r0, [r0, #16]
   bc5d4:	2100      	movs	r1, #0
   bc5d6:	f7fc bded 	b.w	b91b4 <hal_i2c_available>

000bc5da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bc5da:	7c00      	ldrb	r0, [r0, #16]
   bc5dc:	2100      	movs	r1, #0
   bc5de:	f7fc bdf1 	b.w	b91c4 <hal_i2c_read>

000bc5e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bc5e2:	7c00      	ldrb	r0, [r0, #16]
   bc5e4:	2100      	movs	r1, #0
   bc5e6:	f7fc bdf5 	b.w	b91d4 <hal_i2c_peek>

000bc5ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bc5ea:	7c00      	ldrb	r0, [r0, #16]
   bc5ec:	2100      	movs	r1, #0
   bc5ee:	f7fc bdf9 	b.w	b91e4 <hal_i2c_flush>

000bc5f2 <_ZN7TwoWireD0Ev>:
   bc5f2:	b510      	push	{r4, lr}
   bc5f4:	2114      	movs	r1, #20
   bc5f6:	4604      	mov	r4, r0
   bc5f8:	f7f8 fa6d 	bl	b4ad6 <_ZdlPvj>
   bc5fc:	4620      	mov	r0, r4
   bc5fe:	bd10      	pop	{r4, pc}

000bc600 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc600:	b510      	push	{r4, lr}
   bc602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc606:	4604      	mov	r4, r0
   bc608:	4608      	mov	r0, r1
   bc60a:	2100      	movs	r1, #0
   bc60c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc610:	4b03      	ldr	r3, [pc, #12]	; (bc620 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc612:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc614:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc616:	4611      	mov	r1, r2
   bc618:	f7fc fdf4 	bl	b9204 <hal_i2c_init>
}
   bc61c:	4620      	mov	r0, r4
   bc61e:	bd10      	pop	{r4, pc}
   bc620:	000c02f0 	.word	0x000c02f0

000bc624 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   bc624:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bc626:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   bc628:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bc62c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bc62e:	2201      	movs	r2, #1
   bc630:	f04f 33ff 	mov.w	r3, #4294967295
   bc634:	f10d 0107 	add.w	r1, sp, #7
   bc638:	47a0      	blx	r4
}
   bc63a:	b002      	add	sp, #8
   bc63c:	bd10      	pop	{r4, pc}

000bc63e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   bc63e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bc640:	6803      	ldr	r3, [r0, #0]
   bc642:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bc644:	f04f 33ff 	mov.w	r3, #4294967295
   bc648:	46a4      	mov	ip, r4
}
   bc64a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bc64e:	4760      	bx	ip

000bc650 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bc650:	b513      	push	{r0, r1, r4, lr}
   bc652:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   bc654:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bc656:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   bc65a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   bc65c:	f10d 0107 	add.w	r1, sp, #7
   bc660:	2201      	movs	r2, #1
   bc662:	47a0      	blx	r4
}
   bc664:	b002      	add	sp, #8
   bc666:	bd10      	pop	{r4, pc}

000bc668 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   bc668:	b510      	push	{r4, lr}
   bc66a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bc66c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bc670:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bc674:	429a      	cmp	r2, r3
int TCPClient::read() {
   bc676:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bc678:	d008      	beq.n	bc68c <_ZN9TCPClient4readEv+0x24>
   bc67a:	6963      	ldr	r3, [r4, #20]
   bc67c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bc680:	1c51      	adds	r1, r2, #1
   bc682:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   bc686:	4413      	add	r3, r2
   bc688:	7918      	ldrb	r0, [r3, #4]
}
   bc68a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bc68c:	6803      	ldr	r3, [r0, #0]
   bc68e:	691b      	ldr	r3, [r3, #16]
   bc690:	4798      	blx	r3
   bc692:	2800      	cmp	r0, #0
   bc694:	d1f1      	bne.n	bc67a <_ZN9TCPClient4readEv+0x12>
   bc696:	f04f 30ff 	mov.w	r0, #4294967295
   bc69a:	e7f6      	b.n	bc68a <_ZN9TCPClient4readEv+0x22>

000bc69c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   bc69c:	4770      	bx	lr

000bc69e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   bc69e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   bc6a0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   bc6a2:	43c0      	mvns	r0, r0
   bc6a4:	0fc0      	lsrs	r0, r0, #31
   bc6a6:	4770      	bx	lr

000bc6a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bc6a8:	4770      	bx	lr
	...

000bc6ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bc6ac:	4b06      	ldr	r3, [pc, #24]	; (bc6c8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bc6ae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bc6b0:	b510      	push	{r4, lr}
   bc6b2:	f100 040c 	add.w	r4, r0, #12
	    ||
   bc6b6:	d005      	beq.n	bc6c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bc6b8:	4608      	mov	r0, r1
   bc6ba:	f000 fcff 	bl	bd0bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bc6be:	2800      	cmp	r0, #0
   bc6c0:	bf08      	it	eq
   bc6c2:	2400      	moveq	r4, #0
      }
   bc6c4:	4620      	mov	r0, r4
   bc6c6:	bd10      	pop	{r4, pc}
   bc6c8:	000c0200 	.word	0x000c0200

000bc6cc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bc6cc:	b510      	push	{r4, lr}
   bc6ce:	21ac      	movs	r1, #172	; 0xac
   bc6d0:	4604      	mov	r4, r0
   bc6d2:	f7f8 fa00 	bl	b4ad6 <_ZdlPvj>
   bc6d6:	4620      	mov	r0, r4
   bc6d8:	bd10      	pop	{r4, pc}

000bc6da <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   bc6da:	21ac      	movs	r1, #172	; 0xac
   bc6dc:	f7f8 b9fb 	b.w	b4ad6 <_ZdlPvj>

000bc6e0 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   bc6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   bc6e4:	f04f 0800 	mov.w	r8, #0
   bc6e8:	b086      	sub	sp, #24
   bc6ea:	461c      	mov	r4, r3
   bc6ec:	f8c0 8004 	str.w	r8, [r0, #4]
   bc6f0:	4605      	mov	r5, r0
   bc6f2:	460e      	mov	r6, r1
   bc6f4:	4617      	mov	r7, r2
    struct timeval tv = {};
   bc6f6:	4641      	mov	r1, r8
   bc6f8:	2210      	movs	r2, #16
   bc6fa:	a802      	add	r0, sp, #8
   bc6fc:	f000 fe73 	bl	bd3e6 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   bc700:	1c63      	adds	r3, r4, #1
   bc702:	d009      	beq.n	bc718 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   bc704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc708:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   bc70c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   bc710:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   bc714:	435c      	muls	r4, r3
   bc716:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   bc718:	6968      	ldr	r0, [r5, #20]
   bc71a:	2310      	movs	r3, #16
   bc71c:	9300      	str	r3, [sp, #0]
   bc71e:	6800      	ldr	r0, [r0, #0]
   bc720:	ab02      	add	r3, sp, #8
   bc722:	f241 0205 	movw	r2, #4101	; 0x1005
   bc726:	f640 71ff 	movw	r1, #4095	; 0xfff
   bc72a:	f7fc fd7b 	bl	b9224 <sock_setsockopt>
    if (ret < 0) {
   bc72e:	2800      	cmp	r0, #0
   bc730:	da07      	bge.n	bc742 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   bc732:	f7fc ff43 	bl	b95bc <__errno>
   bc736:	6803      	ldr	r3, [r0, #0]
   bc738:	606b      	str	r3, [r5, #4]
        return 0;
   bc73a:	2000      	movs	r0, #0
}
   bc73c:	b006      	add	sp, #24
   bc73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   bc742:	6968      	ldr	r0, [r5, #20]
   bc744:	2300      	movs	r3, #0
   bc746:	6800      	ldr	r0, [r0, #0]
   bc748:	463a      	mov	r2, r7
   bc74a:	4631      	mov	r1, r6
   bc74c:	f7fc fd92 	bl	b9274 <sock_send>
    if (ret < 0) {
   bc750:	1e03      	subs	r3, r0, #0
   bc752:	dbee      	blt.n	bc732 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   bc754:	4618      	mov	r0, r3
   bc756:	e7f1      	b.n	bc73c <_ZN9TCPClient5writeEPKhjm+0x5c>

000bc758 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   bc758:	b530      	push	{r4, r5, lr}
   bc75a:	b087      	sub	sp, #28
   bc75c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   bc75e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   bc760:	4668      	mov	r0, sp
   bc762:	f7ff fdff 	bl	bc364 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bc766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc768:	3404      	adds	r4, #4
   bc76a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc76c:	682b      	ldr	r3, [r5, #0]
   bc76e:	7023      	strb	r3, [r4, #0]
    }
   bc770:	b007      	add	sp, #28
   bc772:	bd30      	pop	{r4, r5, pc}

000bc774 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   bc774:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   bc776:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   bc778:	4b05      	ldr	r3, [pc, #20]	; (bc790 <_ZN9TCPClient8remoteIPEv+0x1c>)
   bc77a:	4604      	mov	r4, r0
   bc77c:	358c      	adds	r5, #140	; 0x8c
   bc77e:	f844 3b04 	str.w	r3, [r4], #4
   bc782:	4606      	mov	r6, r0
   bc784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc788:	682b      	ldr	r3, [r5, #0]
   bc78a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   bc78c:	4630      	mov	r0, r6
   bc78e:	bd70      	pop	{r4, r5, r6, pc}
   bc790:	000c027c 	.word	0x000c027c

000bc794 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bc794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc798:	4698      	mov	r8, r3
    stop();
   bc79a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bc79c:	b093      	sub	sp, #76	; 0x4c
   bc79e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   bc7a0:	2400      	movs	r4, #0
    stop();
   bc7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bc7a4:	4606      	mov	r6, r0
   bc7a6:	4617      	mov	r7, r2
    stop();
   bc7a8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bc7aa:	4628      	mov	r0, r5
   bc7ac:	466b      	mov	r3, sp
   bc7ae:	4622      	mov	r2, r4
   bc7b0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   bc7b2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bc7b4:	f7fc fb14 	bl	b8de0 <netdb_getaddrinfo>
   bc7b8:	4605      	mov	r5, r0
   bc7ba:	2800      	cmp	r0, #0
   bc7bc:	d163      	bne.n	bc886 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   bc7be:	9b00      	ldr	r3, [sp, #0]
   bc7c0:	2b00      	cmp	r3, #0
   bc7c2:	d04b      	beq.n	bc85c <_ZN9TCPClient7connectEPKctm+0xc8>
   bc7c4:	695b      	ldr	r3, [r3, #20]
   bc7c6:	2b00      	cmp	r3, #0
   bc7c8:	d048      	beq.n	bc85c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   bc7ca:	a806      	add	r0, sp, #24
   bc7cc:	f7ff fd72 	bl	bc2b4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   bc7d0:	9b00      	ldr	r3, [sp, #0]
   bc7d2:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   bc7d4:	7863      	ldrb	r3, [r4, #1]
   bc7d6:	2b02      	cmp	r3, #2
   bc7d8:	d104      	bne.n	bc7e4 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   bc7da:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   bc7dc:	a806      	add	r0, sp, #24
   bc7de:	f7ff ffbb 	bl	bc758 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        if (port) {
   bc7e2:	e026      	b.n	bc832 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   bc7e4:	2b0a      	cmp	r3, #10
   bc7e6:	d124      	bne.n	bc832 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   bc7e8:	2211      	movs	r2, #17
   bc7ea:	4629      	mov	r1, r5
   bc7ec:	a801      	add	r0, sp, #4
   bc7ee:	f000 fdfa 	bl	bd3e6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bc7f2:	68a3      	ldr	r3, [r4, #8]
   bc7f4:	2b00      	cmp	r3, #0
   bc7f6:	d038      	beq.n	bc86a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   bc7f8:	f104 0308 	add.w	r3, r4, #8
   bc7fc:	f10d 0c04 	add.w	ip, sp, #4
   bc800:	3418      	adds	r4, #24
   bc802:	6818      	ldr	r0, [r3, #0]
   bc804:	6859      	ldr	r1, [r3, #4]
   bc806:	4662      	mov	r2, ip
   bc808:	c203      	stmia	r2!, {r0, r1}
   bc80a:	3308      	adds	r3, #8
   bc80c:	42a3      	cmp	r3, r4
   bc80e:	4694      	mov	ip, r2
   bc810:	d1f7      	bne.n	bc802 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   bc812:	2306      	movs	r3, #6
            addr = IPAddress(a);
   bc814:	a901      	add	r1, sp, #4
   bc816:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   bc818:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   bc81c:	f7ff fd58 	bl	bc2d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bc820:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bc824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc828:	ac07      	add	r4, sp, #28
   bc82a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc82c:	f8dc 3000 	ldr.w	r3, [ip]
   bc830:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   bc832:	a806      	add	r0, sp, #24
   bc834:	f7ff fd66 	bl	bc304 <_ZNK9IPAddresscvbEv>
        if (addr) {
   bc838:	b180      	cbz	r0, bc85c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   bc83a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   bc83c:	ad07      	add	r5, sp, #28
   bc83e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   bc842:	4b12      	ldr	r3, [pc, #72]	; (bc88c <_ZN9TCPClient7connectEPKctm+0xf8>)
   bc844:	930c      	str	r3, [sp, #48]	; 0x30
   bc846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc848:	ac0d      	add	r4, sp, #52	; 0x34
   bc84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc84c:	682b      	ldr	r3, [r5, #0]
   bc84e:	7023      	strb	r3, [r4, #0]
   bc850:	463a      	mov	r2, r7
   bc852:	4643      	mov	r3, r8
   bc854:	a90c      	add	r1, sp, #48	; 0x30
   bc856:	4630      	mov	r0, r6
   bc858:	47c8      	blx	r9
   bc85a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   bc85c:	9800      	ldr	r0, [sp, #0]
   bc85e:	f7fc fab7 	bl	b8dd0 <netdb_freeaddrinfo>
}
   bc862:	4628      	mov	r0, r5
   bc864:	b013      	add	sp, #76	; 0x4c
   bc866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bc86a:	68e3      	ldr	r3, [r4, #12]
   bc86c:	2b00      	cmp	r3, #0
   bc86e:	d1c3      	bne.n	bc7f8 <_ZN9TCPClient7connectEPKctm+0x64>
   bc870:	f64f 70ff 	movw	r0, #65535	; 0xffff
   bc874:	f8d4 9010 	ldr.w	r9, [r4, #16]
   bc878:	f7fc fc3c 	bl	b90f4 <inet_htonl>
   bc87c:	4581      	cmp	r9, r0
   bc87e:	d1bb      	bne.n	bc7f8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   bc880:	f104 0114 	add.w	r1, r4, #20
   bc884:	e7aa      	b.n	bc7dc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bc886:	4625      	mov	r5, r4
   bc888:	e7e8      	b.n	bc85c <_ZN9TCPClient7connectEPKctm+0xc8>
   bc88a:	bf00      	nop
   bc88c:	000c027c 	.word	0x000c027c

000bc890 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   bc890:	b538      	push	{r3, r4, r5, lr}
   bc892:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   bc894:	681a      	ldr	r2, [r3, #0]
   bc896:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   bc898:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   bc89a:	da10      	bge.n	bc8be <_ZN9TCPClient9connectedEv+0x2e>
   bc89c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bc8a0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bc8a4:	429a      	cmp	r2, r3
   bc8a6:	d10a      	bne.n	bc8be <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   bc8a8:	6803      	ldr	r3, [r0, #0]
   bc8aa:	691b      	ldr	r3, [r3, #16]
   bc8ac:	4798      	blx	r3
        if (!rv) {
   bc8ae:	4604      	mov	r4, r0
   bc8b0:	b928      	cbnz	r0, bc8be <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   bc8b2:	682b      	ldr	r3, [r5, #0]
   bc8b4:	4628      	mov	r0, r5
   bc8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc8b8:	4798      	blx	r3
        rv = available();
   bc8ba:	4620      	mov	r0, r4
}
   bc8bc:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   bc8be:	2001      	movs	r0, #1
   bc8c0:	e7fc      	b.n	bc8bc <_ZN9TCPClient9connectedEv+0x2c>

000bc8c2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   bc8c2:	b510      	push	{r4, lr}
   bc8c4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bc8c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bc8ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bc8ce:	429a      	cmp	r2, r3
int TCPClient::peek() {
   bc8d0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bc8d2:	d005      	beq.n	bc8e0 <_ZN9TCPClient4peekEv+0x1e>
   bc8d4:	6963      	ldr	r3, [r4, #20]
   bc8d6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bc8da:	4413      	add	r3, r2
   bc8dc:	7918      	ldrb	r0, [r3, #4]
}
   bc8de:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bc8e0:	6803      	ldr	r3, [r0, #0]
   bc8e2:	691b      	ldr	r3, [r3, #16]
   bc8e4:	4798      	blx	r3
   bc8e6:	2800      	cmp	r0, #0
   bc8e8:	d1f4      	bne.n	bc8d4 <_ZN9TCPClient4peekEv+0x12>
   bc8ea:	f04f 30ff 	mov.w	r0, #4294967295
   bc8ee:	e7f6      	b.n	bc8de <_ZN9TCPClient4peekEv+0x1c>

000bc8f0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   bc8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc8f2:	6943      	ldr	r3, [r0, #20]
   bc8f4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   bc8f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bc8fa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bc8fe:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   bc900:	4605      	mov	r5, r0
   bc902:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   bc904:	d016      	beq.n	bc934 <_ZN9TCPClient4readEPhj+0x44>
   bc906:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   bc908:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   bc90c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   bc910:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   bc912:	42bc      	cmp	r4, r7
   bc914:	bf28      	it	cs
   bc916:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   bc918:	3304      	adds	r3, #4
   bc91a:	4622      	mov	r2, r4
   bc91c:	4419      	add	r1, r3
   bc91e:	4630      	mov	r0, r6
   bc920:	f000 fd39 	bl	bd396 <memcpy>
   bc924:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   bc926:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   bc92a:	4423      	add	r3, r4
   bc92c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   bc930:	4620      	mov	r0, r4
   bc932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   bc934:	6803      	ldr	r3, [r0, #0]
   bc936:	691b      	ldr	r3, [r3, #16]
   bc938:	4798      	blx	r3
   bc93a:	2800      	cmp	r0, #0
   bc93c:	d1e3      	bne.n	bc906 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   bc93e:	f04f 34ff 	mov.w	r4, #4294967295
   bc942:	e7f5      	b.n	bc930 <_ZN9TCPClient4readEPhj+0x40>

000bc944 <_ZN9TCPClient12flush_bufferEv>:
   bc944:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   bc946:	2300      	movs	r3, #0
   bc948:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   bc94c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   bc94e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   bc952:	4770      	bx	lr

000bc954 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bc954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc958:	461f      	mov	r7, r3
    stop();
   bc95a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bc95c:	460c      	mov	r4, r1
    stop();
   bc95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bc960:	b08a      	sub	sp, #40	; 0x28
   bc962:	4605      	mov	r5, r0
   bc964:	4616      	mov	r6, r2
    stop();
   bc966:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   bc968:	7d23      	ldrb	r3, [r4, #20]
   bc96a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   bc96e:	2b04      	cmp	r3, #4
   bc970:	bf0c      	ite	eq
   bc972:	2002      	moveq	r0, #2
   bc974:	200a      	movne	r0, #10
   bc976:	2206      	movs	r2, #6
   bc978:	2101      	movs	r1, #1
   bc97a:	f7fc fc8b 	bl	b9294 <sock_socket>
   bc97e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   bc982:	696b      	ldr	r3, [r5, #20]
   bc984:	681b      	ldr	r3, [r3, #0]
   bc986:	2b00      	cmp	r3, #0
   bc988:	da08      	bge.n	bc99c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   bc98a:	682b      	ldr	r3, [r5, #0]
   bc98c:	4628      	mov	r0, r5
   bc98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bc990:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   bc992:	4798      	blx	r3
}
   bc994:	4620      	mov	r0, r4
   bc996:	b00a      	add	sp, #40	; 0x28
   bc998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   bc99c:	4628      	mov	r0, r5
   bc99e:	f7ff ffd1 	bl	bc944 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   bc9a2:	b1b7      	cbz	r7, bc9d2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   bc9a4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bc9a6:	a903      	add	r1, sp, #12
   bc9a8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   bc9aa:	9303      	str	r3, [sp, #12]
   bc9ac:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bc9b0:	f7fc fa36 	bl	b8e20 <if_index_to_name>
   bc9b4:	2800      	cmp	r0, #0
   bc9b6:	d1e8      	bne.n	bc98a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   bc9b8:	6968      	ldr	r0, [r5, #20]
   bc9ba:	2306      	movs	r3, #6
   bc9bc:	9300      	str	r3, [sp, #0]
   bc9be:	6800      	ldr	r0, [r0, #0]
   bc9c0:	ab03      	add	r3, sp, #12
   bc9c2:	f241 020b 	movw	r2, #4107	; 0x100b
   bc9c6:	f640 71ff 	movw	r1, #4095	; 0xfff
   bc9ca:	f7fc fc2b 	bl	b9224 <sock_setsockopt>
   bc9ce:	2800      	cmp	r0, #0
   bc9d0:	d1db      	bne.n	bc98a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   bc9d2:	221c      	movs	r2, #28
   bc9d4:	2100      	movs	r1, #0
   bc9d6:	a803      	add	r0, sp, #12
   bc9d8:	f000 fd05 	bl	bd3e6 <memset>
    if (ip.version() == 4) {
   bc9dc:	7d23      	ldrb	r3, [r4, #20]
   bc9de:	2b04      	cmp	r3, #4
   bc9e0:	d11d      	bne.n	bca1e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   bc9e2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   bc9e6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   bc9e8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   bc9ec:	f7fc fb92 	bl	b9114 <inet_htons>
   bc9f0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   bc9f4:	6860      	ldr	r0, [r4, #4]
   bc9f6:	f7fc fb7d 	bl	b90f4 <inet_htonl>
   bc9fa:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   bc9fc:	696b      	ldr	r3, [r5, #20]
   bc9fe:	221c      	movs	r2, #28
   bca00:	6818      	ldr	r0, [r3, #0]
   bca02:	a903      	add	r1, sp, #12
   bca04:	f7fc fc1e 	bl	b9244 <sock_connect>
   bca08:	2800      	cmp	r0, #0
   bca0a:	d1be      	bne.n	bc98a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   bca0c:	3404      	adds	r4, #4
   bca0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bca10:	696d      	ldr	r5, [r5, #20]
   bca12:	358c      	adds	r5, #140	; 0x8c
   bca14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bca16:	6823      	ldr	r3, [r4, #0]
   bca18:	702b      	strb	r3, [r5, #0]
    return 1; // success
   bca1a:	2401      	movs	r4, #1
   bca1c:	e7ba      	b.n	bc994 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   bca1e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   bca22:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   bca24:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   bca28:	f7fc fb74 	bl	b9114 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bca2c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   bca2e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bca32:	1d23      	adds	r3, r4, #4
   bca34:	f104 0714 	add.w	r7, r4, #20
   bca38:	6818      	ldr	r0, [r3, #0]
   bca3a:	6859      	ldr	r1, [r3, #4]
   bca3c:	4632      	mov	r2, r6
   bca3e:	c203      	stmia	r2!, {r0, r1}
   bca40:	3308      	adds	r3, #8
   bca42:	42bb      	cmp	r3, r7
   bca44:	4616      	mov	r6, r2
   bca46:	d1f7      	bne.n	bca38 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   bca48:	e7d8      	b.n	bc9fc <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000bca4c <_ZN9TCPClient9availableEv>:
{
   bca4c:	b530      	push	{r4, r5, lr}
   bca4e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   bca50:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   bca54:	b08b      	sub	sp, #44	; 0x2c
   bca56:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   bca58:	b12b      	cbz	r3, bca66 <_ZN9TCPClient9availableEv+0x1a>
   bca5a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bca5e:	429a      	cmp	r2, r3
   bca60:	d101      	bne.n	bca66 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bca62:	f7ff ff6f 	bl	bc944 <_ZN9TCPClient12flush_bufferEv>
   bca66:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bca68:	6808      	ldr	r0, [r1, #0]
   bca6a:	2800      	cmp	r0, #0
   bca6c:	db18      	blt.n	bcaa0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bca6e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bca72:	2d7f      	cmp	r5, #127	; 0x7f
   bca74:	d814      	bhi.n	bcaa0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bca76:	3104      	adds	r1, #4
   bca78:	2308      	movs	r3, #8
   bca7a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   bca7e:	4429      	add	r1, r5
   bca80:	f7fc fbe8 	bl	b9254 <sock_recv>
            if (ret > 0) {
   bca84:	2800      	cmp	r0, #0
   bca86:	dd13      	ble.n	bcab0 <_ZN9TCPClient9availableEv+0x64>
   bca88:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   bca8a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bca8e:	b90a      	cbnz	r2, bca94 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bca90:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bca94:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bca96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bca9a:	4410      	add	r0, r2
   bca9c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bcaa0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bcaa2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bcaa6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bcaaa:	1ac0      	subs	r0, r0, r3
   bcaac:	b00b      	add	sp, #44	; 0x2c
   bcaae:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bcab0:	f7fc fd84 	bl	b95bc <__errno>
   bcab4:	6803      	ldr	r3, [r0, #0]
   bcab6:	2b0b      	cmp	r3, #11
   bcab8:	d0f2      	beq.n	bcaa0 <_ZN9TCPClient9availableEv+0x54>
   bcaba:	f7fc fd7f 	bl	b95bc <__errno>
   bcabe:	6803      	ldr	r3, [r0, #0]
   bcac0:	2b0b      	cmp	r3, #11
   bcac2:	d0ed      	beq.n	bcaa0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bcac4:	2320      	movs	r3, #32
   bcac6:	2500      	movs	r5, #0
   bcac8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bcacc:	f7fc fd76 	bl	b95bc <__errno>
   bcad0:	6803      	ldr	r3, [r0, #0]
   bcad2:	9301      	str	r3, [sp, #4]
   bcad4:	4b08      	ldr	r3, [pc, #32]	; (bcaf8 <_ZN9TCPClient9availableEv+0xac>)
   bcad6:	4909      	ldr	r1, [pc, #36]	; (bcafc <_ZN9TCPClient9availableEv+0xb0>)
   bcad8:	9300      	str	r3, [sp, #0]
   bcada:	aa02      	add	r2, sp, #8
   bcadc:	462b      	mov	r3, r5
   bcade:	2032      	movs	r0, #50	; 0x32
   bcae0:	f7fc fc30 	bl	b9344 <log_message>
                    sock_close(d_->sock);
   bcae4:	6963      	ldr	r3, [r4, #20]
   bcae6:	6818      	ldr	r0, [r3, #0]
   bcae8:	f7fc fba4 	bl	b9234 <sock_close>
   bcaec:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bcaee:	f04f 32ff 	mov.w	r2, #4294967295
   bcaf2:	601a      	str	r2, [r3, #0]
   bcaf4:	e7d4      	b.n	bcaa0 <_ZN9TCPClient9availableEv+0x54>
   bcaf6:	bf00      	nop
   bcaf8:	000c0317 	.word	0x000c0317
   bcafc:	000c0310 	.word	0x000c0310

000bcb00 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   bcb00:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   bcb02:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   bcb04:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bcb06:	6818      	ldr	r0, [r3, #0]
   bcb08:	2800      	cmp	r0, #0
   bcb0a:	db01      	blt.n	bcb10 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bcb0c:	f7fc fb92 	bl	b9234 <sock_close>
   bcb10:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bcb12:	f04f 32ff 	mov.w	r2, #4294967295
   bcb16:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bcb18:	6960      	ldr	r0, [r4, #20]
   bcb1a:	2211      	movs	r2, #17
   bcb1c:	2100      	movs	r1, #0
   bcb1e:	308c      	adds	r0, #140	; 0x8c
   bcb20:	f000 fc61 	bl	bd3e6 <memset>
    flush_buffer();
   bcb24:	4620      	mov	r0, r4
}
   bcb26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bcb2a:	f7ff bf0b 	b.w	bc944 <_ZN9TCPClient12flush_bufferEv>

000bcb2e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bcb2e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bcb30:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bcb32:	4604      	mov	r4, r0
          total(0) {
   bcb34:	6001      	str	r1, [r0, #0]
   bcb36:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   bcb3a:	3088      	adds	r0, #136	; 0x88
   bcb3c:	f7ff fbba 	bl	bc2b4 <_ZN9IPAddressC1Ev>
}
   bcb40:	4620      	mov	r0, r4
   bcb42:	bd10      	pop	{r4, pc}

000bcb44 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   bcb44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bcb46:	2300      	movs	r3, #0
   bcb48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bcb4c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   bcb50:	4a0e      	ldr	r2, [pc, #56]	; (bcb8c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   bcb52:	6103      	str	r3, [r0, #16]
   bcb54:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bcb56:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bcb58:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bcb5a:	20ac      	movs	r0, #172	; 0xac
   bcb5c:	9101      	str	r1, [sp, #4]
   bcb5e:	f7f7 ffb4 	bl	b4aca <_Znwj>
	  auto __pi = ::new (__mem)
   bcb62:	1e05      	subs	r5, r0, #0
   bcb64:	f105 060c 	add.w	r6, r5, #12
   bcb68:	d008      	beq.n	bcb7c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bcb6a:	2301      	movs	r3, #1
   bcb6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bcb70:	4b07      	ldr	r3, [pc, #28]	; (bcb90 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bcb72:	9901      	ldr	r1, [sp, #4]
   bcb74:	602b      	str	r3, [r5, #0]
   bcb76:	4630      	mov	r0, r6
   bcb78:	f7ff ffd9 	bl	bcb2e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   bcb7c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   bcb7e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bcb82:	f7ff fedf 	bl	bc944 <_ZN9TCPClient12flush_bufferEv>
}
   bcb86:	b002      	add	sp, #8
   bcb88:	bd70      	pop	{r4, r5, r6, pc}
   bcb8a:	bf00      	nop
   bcb8c:	000c034c 	.word	0x000c034c
   bcb90:	000c0330 	.word	0x000c0330

000bcb94 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bcb94:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bcb96:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   bcb9a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bcb9c:	f7ff ffd2 	bl	bcb44 <_ZN9TCPClientC1Ei>
}
   bcba0:	4620      	mov	r0, r4
   bcba2:	bd10      	pop	{r4, pc}

000bcba4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bcba4:	b510      	push	{r4, lr}
   bcba6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bcba8:	6800      	ldr	r0, [r0, #0]
   bcbaa:	2800      	cmp	r0, #0
   bcbac:	db01      	blt.n	bcbb2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bcbae:	f7fc fb41 	bl	b9234 <sock_close>
    }
}
   bcbb2:	4620      	mov	r0, r4
   bcbb4:	bd10      	pop	{r4, pc}

000bcbb6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bcbb6:	300c      	adds	r0, #12
   bcbb8:	f7ff bff4 	b.w	bcba4 <_ZN9TCPClient4DataD1Ev>

000bcbbc <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   bcbbc:	4770      	bx	lr

000bcbbe <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   bcbbe:	2001      	movs	r0, #1
   bcbc0:	4770      	bx	lr

000bcbc2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bcbc2:	2200      	movs	r2, #0
   bcbc4:	6840      	ldr	r0, [r0, #4]
   bcbc6:	4611      	mov	r1, r2
   bcbc8:	f7fc bc28 	b.w	b941c <network_ready>

000bcbcc <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   bcbcc:	b510      	push	{r4, lr}
   bcbce:	2124      	movs	r1, #36	; 0x24
   bcbd0:	4604      	mov	r4, r0
   bcbd2:	f7f7 ff80 	bl	b4ad6 <_ZdlPvj>
   bcbd6:	4620      	mov	r0, r4
   bcbd8:	bd10      	pop	{r4, pc}

000bcbda <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bcbda:	2200      	movs	r2, #0
   bcbdc:	6840      	ldr	r0, [r0, #4]
   bcbde:	4611      	mov	r1, r2
   bcbe0:	f7fc bc3c 	b.w	b945c <network_listening>

000bcbe4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcbe4:	2200      	movs	r2, #0
   bcbe6:	6840      	ldr	r0, [r0, #4]
   bcbe8:	4611      	mov	r1, r2
   bcbea:	f7fc bc47 	b.w	b947c <network_get_listen_timeout>

000bcbee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bcbee:	6840      	ldr	r0, [r0, #4]
   bcbf0:	2200      	movs	r2, #0
   bcbf2:	f7fc bc3b 	b.w	b946c <network_set_listen_timeout>

000bcbf6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bcbf6:	6840      	ldr	r0, [r0, #4]
   bcbf8:	2200      	movs	r2, #0
   bcbfa:	f081 0101 	eor.w	r1, r1, #1
   bcbfe:	f7fc bc25 	b.w	b944c <network_listen>

000bcc02 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bcc02:	2300      	movs	r3, #0
   bcc04:	6840      	ldr	r0, [r0, #4]
   bcc06:	461a      	mov	r2, r3
   bcc08:	4619      	mov	r1, r3
   bcc0a:	f7fc bc17 	b.w	b943c <network_off>

000bcc0e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bcc0e:	2300      	movs	r3, #0
   bcc10:	6840      	ldr	r0, [r0, #4]
   bcc12:	461a      	mov	r2, r3
   bcc14:	4619      	mov	r1, r3
   bcc16:	f7fc bc09 	b.w	b942c <network_on>

000bcc1a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bcc1a:	2200      	movs	r2, #0
   bcc1c:	6840      	ldr	r0, [r0, #4]
   bcc1e:	4611      	mov	r1, r2
   bcc20:	f7fc bbec 	b.w	b93fc <network_connecting>

000bcc24 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bcc24:	6840      	ldr	r0, [r0, #4]
   bcc26:	2200      	movs	r2, #0
   bcc28:	2102      	movs	r1, #2
   bcc2a:	f7fc bbef 	b.w	b940c <network_disconnect>

000bcc2e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bcc2e:	2300      	movs	r3, #0
   bcc30:	6840      	ldr	r0, [r0, #4]
   bcc32:	461a      	mov	r2, r3
   bcc34:	f7fc bbda 	b.w	b93ec <network_connect>

000bcc38 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   bcc38:	8983      	ldrh	r3, [r0, #12]
   bcc3a:	b17b      	cbz	r3, bcc5c <_ZNK10WiFiSignal11getStrengthEv+0x24>
   bcc3c:	6943      	ldr	r3, [r0, #20]
   bcc3e:	2b00      	cmp	r3, #0
   bcc40:	db0c      	blt.n	bcc5c <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   bcc42:	ee07 3a90 	vmov	s15, r3
   bcc46:	ed9f 7a07 	vldr	s14, [pc, #28]	; bcc64 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   bcc4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bcc4e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bcc52:	eddf 7a05 	vldr	s15, [pc, #20]	; bcc68 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   bcc56:	ee20 0a27 	vmul.f32	s0, s0, s15
   bcc5a:	4770      	bx	lr
    }
    return -1.0f;
   bcc5c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bcc60:	4770      	bx	lr
   bcc62:	bf00      	nop
   bcc64:	477fff00 	.word	0x477fff00
   bcc68:	42c80000 	.word	0x42c80000

000bcc6c <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   bcc6c:	8983      	ldrh	r3, [r0, #12]
   bcc6e:	b163      	cbz	r3, bcc8a <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   bcc70:	6903      	ldr	r3, [r0, #16]
   bcc72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bcc76:	d008      	beq.n	bcc8a <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   bcc78:	ee07 3a90 	vmov	s15, r3
   bcc7c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bcc90 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   bcc80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bcc84:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bcc88:	4770      	bx	lr
    }
    return 0.0f;
   bcc8a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bcc94 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   bcc8e:	4770      	bx	lr
   bcc90:	42c80000 	.word	0x42c80000
   bcc94:	00000000 	.word	0x00000000

000bcc98 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   bcc98:	8983      	ldrh	r3, [r0, #12]
   bcc9a:	b17b      	cbz	r3, bccbc <_ZNK10WiFiSignal10getQualityEv+0x24>
   bcc9c:	6a03      	ldr	r3, [r0, #32]
   bcc9e:	2b00      	cmp	r3, #0
   bcca0:	db0c      	blt.n	bccbc <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   bcca2:	ee07 3a90 	vmov	s15, r3
   bcca6:	ed9f 7a07 	vldr	s14, [pc, #28]	; bccc4 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   bccaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bccae:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bccb2:	eddf 7a05 	vldr	s15, [pc, #20]	; bccc8 <_ZNK10WiFiSignal10getQualityEv+0x30>
   bccb6:	ee20 0a27 	vmul.f32	s0, s0, s15
   bccba:	4770      	bx	lr
    }
    return -1.0f;
   bccbc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bccc0:	4770      	bx	lr
   bccc2:	bf00      	nop
   bccc4:	477fff00 	.word	0x477fff00
   bccc8:	42c80000 	.word	0x42c80000

000bcccc <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   bcccc:	8983      	ldrh	r3, [r0, #12]
   bccce:	b163      	cbz	r3, bccea <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   bccd0:	6983      	ldr	r3, [r0, #24]
   bccd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bccd6:	d008      	beq.n	bccea <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   bccd8:	ee07 3a90 	vmov	s15, r3
   bccdc:	ed9f 7a04 	vldr	s14, [pc, #16]	; bccf0 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   bcce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bcce4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bcce8:	4770      	bx	lr
    }
    return 0.0f;
   bccea:	ed9f 0a02 	vldr	s0, [pc, #8]	; bccf4 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   bccee:	4770      	bx	lr
   bccf0:	42c80000 	.word	0x42c80000
   bccf4:	00000000 	.word	0x00000000

000bccf8 <_ZNK10WiFiSignalcvaEv>:
}
   bccf8:	f990 0004 	ldrsb.w	r0, [r0, #4]
   bccfc:	4770      	bx	lr

000bccfe <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   bccfe:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   bcd00:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   bcd02:	4606      	mov	r6, r0
    inf_ = inf;
   bcd04:	f100 050c 	add.w	r5, r0, #12
   bcd08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bcd0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bcd0c:	e894 0003 	ldmia.w	r4, {r0, r1}
   bcd10:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   bcd14:	6933      	ldr	r3, [r6, #16]
   bcd16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bcd1a:	bf0e      	itee	eq
   bcd1c:	2302      	moveq	r3, #2
   bcd1e:	2264      	movne	r2, #100	; 0x64
   bcd20:	fb93 f3f2 	sdivne	r3, r3, r2
   bcd24:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   bcd26:	69b3      	ldr	r3, [r6, #24]
   bcd28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bcd2c:	bf0c      	ite	eq
   bcd2e:	2300      	moveq	r3, #0
   bcd30:	2264      	movne	r2, #100	; 0x64
}
   bcd32:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   bcd36:	bf18      	it	ne
   bcd38:	fb93 f3f2 	sdivne	r3, r3, r2
   bcd3c:	60b3      	str	r3, [r6, #8]
}
   bcd3e:	bd70      	pop	{r4, r5, r6, pc}

000bcd40 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   bcd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   bcd44:	4b16      	ldr	r3, [pc, #88]	; (bcda0 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   bcd46:	6003      	str	r3, [r0, #0]
   bcd48:	2500      	movs	r5, #0
   bcd4a:	460f      	mov	r7, r1
   bcd4c:	f04f 0802 	mov.w	r8, #2
   bcd50:	2618      	movs	r6, #24
   bcd52:	e9c0 8501 	strd	r8, r5, [r0, #4]
   bcd56:	b086      	sub	sp, #24
   bcd58:	4632      	mov	r2, r6
   bcd5a:	4629      	mov	r1, r5
   bcd5c:	4604      	mov	r4, r0
   bcd5e:	300c      	adds	r0, #12
   bcd60:	f000 fb41 	bl	bd3e6 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bcd64:	6878      	ldr	r0, [r7, #4]
   bcd66:	462a      	mov	r2, r5
   bcd68:	4629      	mov	r1, r5
   bcd6a:	f7fc fb57 	bl	b941c <network_ready>
   bcd6e:	b180      	cbz	r0, bcd92 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
   bcd70:	4632      	mov	r2, r6
   bcd72:	4629      	mov	r1, r5
   bcd74:	4668      	mov	r0, sp
   bcd76:	f000 fb36 	bl	bd3e6 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   bcd7a:	462a      	mov	r2, r5
   bcd7c:	4669      	mov	r1, sp
   bcd7e:	4628      	mov	r0, r5
        info.size = sizeof(info);
   bcd80:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   bcd84:	f7fc face 	bl	b9324 <wlan_connected_info>
        if (r == 0) {
   bcd88:	b938      	cbnz	r0, bcd9a <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   bcd8a:	4669      	mov	r1, sp
   bcd8c:	4620      	mov	r0, r4
   bcd8e:	f7ff ffb6 	bl	bccfe <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
   bcd92:	4620      	mov	r0, r4
   bcd94:	b006      	add	sp, #24
   bcd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   bcd9a:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   bcd9e:	e7f8      	b.n	bcd92 <_ZN5spark9WiFiClass4RSSIEv+0x52>
   bcda0:	000c03d4 	.word	0x000c03d4

000bcda4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bcda4:	4b02      	ldr	r3, [pc, #8]	; (bcdb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bcda6:	2204      	movs	r2, #4
   bcda8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bcdaa:	4a02      	ldr	r2, [pc, #8]	; (bcdb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bcdac:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bcdae:	4770      	bx	lr
   bcdb0:	2003e708 	.word	0x2003e708
   bcdb4:	000c0398 	.word	0x000c0398

000bcdb8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bcdb8:	2300      	movs	r3, #0
   bcdba:	6840      	ldr	r0, [r0, #4]
   bcdbc:	461a      	mov	r2, r3
   bcdbe:	f7fc bb15 	b.w	b93ec <network_connect>

000bcdc2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bcdc2:	6840      	ldr	r0, [r0, #4]
   bcdc4:	2200      	movs	r2, #0
   bcdc6:	2102      	movs	r1, #2
   bcdc8:	f7fc bb20 	b.w	b940c <network_disconnect>

000bcdcc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bcdcc:	2200      	movs	r2, #0
   bcdce:	6840      	ldr	r0, [r0, #4]
   bcdd0:	4611      	mov	r1, r2
   bcdd2:	f7fc bb13 	b.w	b93fc <network_connecting>

000bcdd6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bcdd6:	2200      	movs	r2, #0
   bcdd8:	6840      	ldr	r0, [r0, #4]
   bcdda:	4611      	mov	r1, r2
   bcddc:	f7fc bb1e 	b.w	b941c <network_ready>

000bcde0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bcde0:	2300      	movs	r3, #0
   bcde2:	6840      	ldr	r0, [r0, #4]
   bcde4:	461a      	mov	r2, r3
   bcde6:	4619      	mov	r1, r3
   bcde8:	f7fc bb20 	b.w	b942c <network_on>

000bcdec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bcdec:	2300      	movs	r3, #0
   bcdee:	6840      	ldr	r0, [r0, #4]
   bcdf0:	461a      	mov	r2, r3
   bcdf2:	4619      	mov	r1, r3
   bcdf4:	f7fc bb22 	b.w	b943c <network_off>

000bcdf8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bcdf8:	6840      	ldr	r0, [r0, #4]
   bcdfa:	2100      	movs	r1, #0
   bcdfc:	f7fc bb46 	b.w	b948c <network_is_on>

000bce00 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bce00:	6840      	ldr	r0, [r0, #4]
   bce02:	2100      	movs	r1, #0
   bce04:	f7fc bb4a 	b.w	b949c <network_is_off>

000bce08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bce08:	6840      	ldr	r0, [r0, #4]
   bce0a:	2200      	movs	r2, #0
   bce0c:	f081 0101 	eor.w	r1, r1, #1
   bce10:	f7fc bb1c 	b.w	b944c <network_listen>

000bce14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bce14:	6840      	ldr	r0, [r0, #4]
   bce16:	2200      	movs	r2, #0
   bce18:	f7fc bb28 	b.w	b946c <network_set_listen_timeout>

000bce1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bce1c:	2200      	movs	r2, #0
   bce1e:	6840      	ldr	r0, [r0, #4]
   bce20:	4611      	mov	r1, r2
   bce22:	f7fc bb2b 	b.w	b947c <network_get_listen_timeout>

000bce26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bce26:	2200      	movs	r2, #0
   bce28:	6840      	ldr	r0, [r0, #4]
   bce2a:	4611      	mov	r1, r2
   bce2c:	f7fc bb16 	b.w	b945c <network_listening>

000bce30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bce30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bce34:	b095      	sub	sp, #84	; 0x54
   bce36:	4614      	mov	r4, r2
   bce38:	460d      	mov	r5, r1
   bce3a:	4607      	mov	r7, r0
    IPAddress addr;
   bce3c:	f7ff fa3a 	bl	bc2b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bce40:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bce42:	221c      	movs	r2, #28
   bce44:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bce46:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bce48:	f000 facd 	bl	bd3e6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bce4c:	2340      	movs	r3, #64	; 0x40
   bce4e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bce50:	4620      	mov	r0, r4
   bce52:	466b      	mov	r3, sp
   bce54:	aa0c      	add	r2, sp, #48	; 0x30
   bce56:	2100      	movs	r1, #0
   bce58:	f7fb ffc2 	bl	b8de0 <netdb_getaddrinfo>
    if (!r) {
   bce5c:	4604      	mov	r4, r0
   bce5e:	2800      	cmp	r0, #0
   bce60:	d14b      	bne.n	bcefa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bce62:	4602      	mov	r2, r0
   bce64:	2101      	movs	r1, #1
   bce66:	6868      	ldr	r0, [r5, #4]
   bce68:	f7fc fad8 	bl	b941c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bce6c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bce6e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bce70:	4622      	mov	r2, r4
   bce72:	6868      	ldr	r0, [r5, #4]
   bce74:	f7fc fad2 	bl	b941c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bce78:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bce7a:	4681      	mov	r9, r0
        bool ok = false;
   bce7c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bce7e:	2e00      	cmp	r6, #0
   bce80:	d03b      	beq.n	bcefa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bce82:	2900      	cmp	r1, #0
   bce84:	d139      	bne.n	bcefa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bce86:	6873      	ldr	r3, [r6, #4]
   bce88:	2b02      	cmp	r3, #2
   bce8a:	d003      	beq.n	bce94 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bce8c:	2b0a      	cmp	r3, #10
   bce8e:	d011      	beq.n	bceb4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bce90:	69f6      	ldr	r6, [r6, #28]
   bce92:	e7f4      	b.n	bce7e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bce94:	f1b8 0f00 	cmp.w	r8, #0
   bce98:	d0fa      	beq.n	bce90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bce9a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bce9c:	a806      	add	r0, sp, #24
   bce9e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bcea0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bcea2:	f7ff fa5f 	bl	bc364 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bcea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcea8:	1d3c      	adds	r4, r7, #4
   bceaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bceac:	682b      	ldr	r3, [r5, #0]
   bceae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bceb0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bceb2:	e7ed      	b.n	bce90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bceb4:	f1b9 0f00 	cmp.w	r9, #0
   bceb8:	d0ea      	beq.n	bce90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bceba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bcebc:	2210      	movs	r2, #16
   bcebe:	a801      	add	r0, sp, #4
   bcec0:	f000 fa91 	bl	bd3e6 <memset>
                    a.v = 6;
   bcec4:	2306      	movs	r3, #6
   bcec6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bceca:	ad01      	add	r5, sp, #4
   bcecc:	f104 0308 	add.w	r3, r4, #8
   bced0:	3418      	adds	r4, #24
   bced2:	6818      	ldr	r0, [r3, #0]
   bced4:	6859      	ldr	r1, [r3, #4]
   bced6:	462a      	mov	r2, r5
   bced8:	c203      	stmia	r2!, {r0, r1}
   bceda:	3308      	adds	r3, #8
   bcedc:	42a3      	cmp	r3, r4
   bcede:	4615      	mov	r5, r2
   bcee0:	d1f7      	bne.n	bced2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bcee2:	a901      	add	r1, sp, #4
   bcee4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bcee6:	ad07      	add	r5, sp, #28
   bcee8:	f7ff f9f2 	bl	bc2d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bceec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bceee:	1d3c      	adds	r4, r7, #4
   bcef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcef2:	682b      	ldr	r3, [r5, #0]
   bcef4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcef6:	4649      	mov	r1, r9
   bcef8:	e7ca      	b.n	bce90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bcefa:	9800      	ldr	r0, [sp, #0]
   bcefc:	f7fb ff68 	bl	b8dd0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bcf00:	4638      	mov	r0, r7
   bcf02:	b015      	add	sp, #84	; 0x54
   bcf04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bcf08 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bcf08:	4b02      	ldr	r3, [pc, #8]	; (bcf14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bcf0a:	4a03      	ldr	r2, [pc, #12]	; (bcf18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bcf0c:	601a      	str	r2, [r3, #0]
   bcf0e:	2200      	movs	r2, #0
   bcf10:	605a      	str	r2, [r3, #4]

} // spark
   bcf12:	4770      	bx	lr
   bcf14:	2003e710 	.word	0x2003e710
   bcf18:	000c03f8 	.word	0x000c03f8

000bcf1c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bcf1c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bcf1e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bcf20:	d902      	bls.n	bcf28 <pinAvailable+0xc>
    return false;
   bcf22:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bcf24:	b002      	add	sp, #8
   bcf26:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bcf28:	f1a0 030b 	sub.w	r3, r0, #11
   bcf2c:	2b02      	cmp	r3, #2
   bcf2e:	d81a      	bhi.n	bcf66 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bcf30:	4c17      	ldr	r4, [pc, #92]	; (bcf90 <pinAvailable+0x74>)
   bcf32:	7821      	ldrb	r1, [r4, #0]
   bcf34:	f3bf 8f5b 	dmb	ish
   bcf38:	f011 0101 	ands.w	r1, r1, #1
   bcf3c:	d10b      	bne.n	bcf56 <pinAvailable+0x3a>
   bcf3e:	4620      	mov	r0, r4
   bcf40:	9101      	str	r1, [sp, #4]
   bcf42:	f7f7 fdca 	bl	b4ada <__cxa_guard_acquire>
   bcf46:	9901      	ldr	r1, [sp, #4]
   bcf48:	b128      	cbz	r0, bcf56 <pinAvailable+0x3a>
   bcf4a:	4812      	ldr	r0, [pc, #72]	; (bcf94 <pinAvailable+0x78>)
   bcf4c:	f7fc fb9c 	bl	b9688 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bcf50:	4620      	mov	r0, r4
   bcf52:	f7f7 fdc7 	bl	b4ae4 <__cxa_guard_release>
   bcf56:	4b0f      	ldr	r3, [pc, #60]	; (bcf94 <pinAvailable+0x78>)
   bcf58:	7818      	ldrb	r0, [r3, #0]
   bcf5a:	f7fc f9ab 	bl	b92b4 <hal_spi_is_enabled>
   bcf5e:	2800      	cmp	r0, #0
   bcf60:	d1df      	bne.n	bcf22 <pinAvailable+0x6>
  return true; // 'pin' is available
   bcf62:	2001      	movs	r0, #1
   bcf64:	e7de      	b.n	bcf24 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bcf66:	2801      	cmp	r0, #1
   bcf68:	d809      	bhi.n	bcf7e <pinAvailable+0x62>
   bcf6a:	f000 f87d 	bl	bd068 <_Z19__fetch_global_Wirev>
   bcf6e:	2100      	movs	r1, #0
   bcf70:	7c00      	ldrb	r0, [r0, #16]
   bcf72:	f7fc f93f 	bl	b91f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bcf76:	f080 0001 	eor.w	r0, r0, #1
   bcf7a:	b2c0      	uxtb	r0, r0
   bcf7c:	e7d2      	b.n	bcf24 <pinAvailable+0x8>
   bcf7e:	3809      	subs	r0, #9
   bcf80:	2801      	cmp	r0, #1
   bcf82:	d8ee      	bhi.n	bcf62 <pinAvailable+0x46>
   bcf84:	f000 f834 	bl	bcff0 <_Z22__fetch_global_Serial1v>
   bcf88:	7c00      	ldrb	r0, [r0, #16]
   bcf8a:	f7fc f8f3 	bl	b9174 <hal_usart_is_enabled>
   bcf8e:	e7f2      	b.n	bcf76 <pinAvailable+0x5a>
   bcf90:	2003e718 	.word	0x2003e718
   bcf94:	2003e71c 	.word	0x2003e71c

000bcf98 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bcf98:	2823      	cmp	r0, #35	; 0x23
{
   bcf9a:	b538      	push	{r3, r4, r5, lr}
   bcf9c:	4604      	mov	r4, r0
   bcf9e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bcfa0:	d80a      	bhi.n	bcfb8 <pinMode+0x20>
   bcfa2:	29ff      	cmp	r1, #255	; 0xff
   bcfa4:	d008      	beq.n	bcfb8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bcfa6:	f7ff ffb9 	bl	bcf1c <pinAvailable>
   bcfaa:	b128      	cbz	r0, bcfb8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bcfac:	4629      	mov	r1, r5
   bcfae:	4620      	mov	r0, r4
}
   bcfb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bcfb4:	f7fb bf1c 	b.w	b8df0 <hal_gpio_mode>
}
   bcfb8:	bd38      	pop	{r3, r4, r5, pc}

000bcfba <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bcfba:	4770      	bx	lr

000bcfbc <_Z20acquireSerial1Bufferv>:
{
   bcfbc:	b538      	push	{r3, r4, r5, lr}
   bcfbe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bcfc0:	2514      	movs	r5, #20
   bcfc2:	462a      	mov	r2, r5
   bcfc4:	2100      	movs	r1, #0
   bcfc6:	f000 fa0e 	bl	bd3e6 <memset>
   bcfca:	8025      	strh	r5, [r4, #0]
   bcfcc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfce:	4907      	ldr	r1, [pc, #28]	; (bcfec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bcfd0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfd2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bcfd4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfd6:	f000 f86b 	bl	bd0b0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfda:	4904      	ldr	r1, [pc, #16]	; (bcfec <_Z20acquireSerial1Bufferv+0x30>)
    };
   bcfdc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcfde:	4628      	mov	r0, r5
   bcfe0:	f000 f866 	bl	bd0b0 <_ZnajRKSt9nothrow_t>
    };
   bcfe4:	60e0      	str	r0, [r4, #12]
}
   bcfe6:	4620      	mov	r0, r4
   bcfe8:	bd38      	pop	{r3, r4, r5, pc}
   bcfea:	bf00      	nop
   bcfec:	000c042c 	.word	0x000c042c

000bcff0 <_Z22__fetch_global_Serial1v>:
{
   bcff0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bcff2:	4d0e      	ldr	r5, [pc, #56]	; (bd02c <_Z22__fetch_global_Serial1v+0x3c>)
   bcff4:	7829      	ldrb	r1, [r5, #0]
   bcff6:	f3bf 8f5b 	dmb	ish
   bcffa:	f011 0401 	ands.w	r4, r1, #1
{
   bcffe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd000:	d111      	bne.n	bd026 <_Z22__fetch_global_Serial1v+0x36>
   bd002:	4628      	mov	r0, r5
   bd004:	f7f7 fd69 	bl	b4ada <__cxa_guard_acquire>
   bd008:	b168      	cbz	r0, bd026 <_Z22__fetch_global_Serial1v+0x36>
   bd00a:	a801      	add	r0, sp, #4
   bd00c:	f7ff ffd6 	bl	bcfbc <_Z20acquireSerial1Bufferv>
   bd010:	aa01      	add	r2, sp, #4
   bd012:	4621      	mov	r1, r4
   bd014:	4806      	ldr	r0, [pc, #24]	; (bd030 <_Z22__fetch_global_Serial1v+0x40>)
   bd016:	f7ff fa9f 	bl	bc558 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bd01a:	4628      	mov	r0, r5
   bd01c:	f7f7 fd62 	bl	b4ae4 <__cxa_guard_release>
   bd020:	4804      	ldr	r0, [pc, #16]	; (bd034 <_Z22__fetch_global_Serial1v+0x44>)
   bd022:	f000 f983 	bl	bd32c <atexit>
    return serial1;
}
   bd026:	4802      	ldr	r0, [pc, #8]	; (bd030 <_Z22__fetch_global_Serial1v+0x40>)
   bd028:	b007      	add	sp, #28
   bd02a:	bd30      	pop	{r4, r5, pc}
   bd02c:	2003e724 	.word	0x2003e724
   bd030:	2003e728 	.word	0x2003e728
   bd034:	000bcfbb 	.word	0x000bcfbb

000bd038 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd038:	4770      	bx	lr
	...

000bd03c <_Z17acquireWireBufferv>:
{
   bd03c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bd03e:	2520      	movs	r5, #32
   bd040:	2314      	movs	r3, #20
{
   bd042:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bd044:	6003      	str	r3, [r0, #0]
   bd046:	6085      	str	r5, [r0, #8]
   bd048:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd04a:	4906      	ldr	r1, [pc, #24]	; (bd064 <_Z17acquireWireBufferv+0x28>)
   bd04c:	4628      	mov	r0, r5
   bd04e:	f000 f82f 	bl	bd0b0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd052:	4904      	ldr	r1, [pc, #16]	; (bd064 <_Z17acquireWireBufferv+0x28>)
	};
   bd054:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd056:	4628      	mov	r0, r5
   bd058:	f000 f82a 	bl	bd0b0 <_ZnajRKSt9nothrow_t>
	};
   bd05c:	60e0      	str	r0, [r4, #12]
}
   bd05e:	4620      	mov	r0, r4
   bd060:	bd38      	pop	{r3, r4, r5, pc}
   bd062:	bf00      	nop
   bd064:	000c042c 	.word	0x000c042c

000bd068 <_Z19__fetch_global_Wirev>:
{
   bd068:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd06a:	4d0e      	ldr	r5, [pc, #56]	; (bd0a4 <_Z19__fetch_global_Wirev+0x3c>)
   bd06c:	7829      	ldrb	r1, [r5, #0]
   bd06e:	f3bf 8f5b 	dmb	ish
   bd072:	f011 0401 	ands.w	r4, r1, #1
{
   bd076:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd078:	d111      	bne.n	bd09e <_Z19__fetch_global_Wirev+0x36>
   bd07a:	4628      	mov	r0, r5
   bd07c:	f7f7 fd2d 	bl	b4ada <__cxa_guard_acquire>
   bd080:	b168      	cbz	r0, bd09e <_Z19__fetch_global_Wirev+0x36>
   bd082:	a801      	add	r0, sp, #4
   bd084:	f7ff ffda 	bl	bd03c <_Z17acquireWireBufferv>
   bd088:	aa01      	add	r2, sp, #4
   bd08a:	4621      	mov	r1, r4
   bd08c:	4806      	ldr	r0, [pc, #24]	; (bd0a8 <_Z19__fetch_global_Wirev+0x40>)
   bd08e:	f7ff fab7 	bl	bc600 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bd092:	4628      	mov	r0, r5
   bd094:	f7f7 fd26 	bl	b4ae4 <__cxa_guard_release>
   bd098:	4804      	ldr	r0, [pc, #16]	; (bd0ac <_Z19__fetch_global_Wirev+0x44>)
   bd09a:	f000 f947 	bl	bd32c <atexit>
	return wire;
}
   bd09e:	4802      	ldr	r0, [pc, #8]	; (bd0a8 <_Z19__fetch_global_Wirev+0x40>)
   bd0a0:	b007      	add	sp, #28
   bd0a2:	bd30      	pop	{r4, r5, pc}
   bd0a4:	2003e740 	.word	0x2003e740
   bd0a8:	2003e744 	.word	0x2003e744
   bd0ac:	000bd039 	.word	0x000bd039

000bd0b0 <_ZnajRKSt9nothrow_t>:
   bd0b0:	f7f7 bd0d 	b.w	b4ace <_Znaj>

000bd0b4 <_ZSt25__throw_bad_function_callv>:
   bd0b4:	b508      	push	{r3, lr}
   bd0b6:	f7fc fa71 	bl	b959c <abort>
	...

000bd0bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bd0bc:	4901      	ldr	r1, [pc, #4]	; (bd0c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bd0be:	f000 b8f9 	b.w	bd2b4 <_ZNKSt9type_infoeqERKS_>
   bd0c2:	bf00      	nop
   bd0c4:	000c0448 	.word	0x000c0448

000bd0c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bd0c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bd0ca:	2400      	movs	r4, #0
   bd0cc:	2310      	movs	r3, #16
   bd0ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bd0d2:	6803      	ldr	r3, [r0, #0]
   bd0d4:	4615      	mov	r5, r2
   bd0d6:	699e      	ldr	r6, [r3, #24]
   bd0d8:	6812      	ldr	r2, [r2, #0]
   bd0da:	466b      	mov	r3, sp
   bd0dc:	e9cd 4400 	strd	r4, r4, [sp]
   bd0e0:	47b0      	blx	r6
   bd0e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bd0e6:	f003 0306 	and.w	r3, r3, #6
   bd0ea:	2b06      	cmp	r3, #6
   bd0ec:	bf03      	ittte	eq
   bd0ee:	9b00      	ldreq	r3, [sp, #0]
   bd0f0:	602b      	streq	r3, [r5, #0]
   bd0f2:	2001      	moveq	r0, #1
   bd0f4:	4620      	movne	r0, r4
   bd0f6:	b004      	add	sp, #16
   bd0f8:	bd70      	pop	{r4, r5, r6, pc}

000bd0fa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bd0fa:	9800      	ldr	r0, [sp, #0]
   bd0fc:	4290      	cmp	r0, r2
   bd0fe:	bf14      	ite	ne
   bd100:	2001      	movne	r0, #1
   bd102:	2006      	moveq	r0, #6
   bd104:	4770      	bx	lr
	...

000bd108 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bd108:	b510      	push	{r4, lr}
   bd10a:	4b03      	ldr	r3, [pc, #12]	; (bd118 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bd10c:	6003      	str	r3, [r0, #0]
   bd10e:	4604      	mov	r4, r0
   bd110:	f000 f8cd 	bl	bd2ae <_ZNSt9type_infoD1Ev>
   bd114:	4620      	mov	r0, r4
   bd116:	bd10      	pop	{r4, pc}
   bd118:	000c0488 	.word	0x000c0488

000bd11c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bd11c:	b510      	push	{r4, lr}
   bd11e:	4604      	mov	r4, r0
   bd120:	f7ff fff2 	bl	bd108 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd124:	4620      	mov	r0, r4
   bd126:	2108      	movs	r1, #8
   bd128:	f7f7 fcd5 	bl	b4ad6 <_ZdlPvj>
   bd12c:	4620      	mov	r0, r4
   bd12e:	bd10      	pop	{r4, pc}

000bd130 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bd130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd134:	461f      	mov	r7, r3
   bd136:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bd13a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bd13e:	4598      	cmp	r8, r3
   bd140:	4606      	mov	r6, r0
   bd142:	4615      	mov	r5, r2
   bd144:	d107      	bne.n	bd156 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd146:	9907      	ldr	r1, [sp, #28]
   bd148:	f000 f8b4 	bl	bd2b4 <_ZNKSt9type_infoeqERKS_>
   bd14c:	b118      	cbz	r0, bd156 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd14e:	7165      	strb	r5, [r4, #5]
   bd150:	2000      	movs	r0, #0
   bd152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd156:	4639      	mov	r1, r7
   bd158:	4630      	mov	r0, r6
   bd15a:	f000 f8ab 	bl	bd2b4 <_ZNKSt9type_infoeqERKS_>
   bd15e:	2800      	cmp	r0, #0
   bd160:	d0f6      	beq.n	bd150 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bd162:	2301      	movs	r3, #1
   bd164:	f8c4 8000 	str.w	r8, [r4]
   bd168:	7125      	strb	r5, [r4, #4]
   bd16a:	71a3      	strb	r3, [r4, #6]
   bd16c:	e7f0      	b.n	bd150 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bd16e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bd16e:	b538      	push	{r3, r4, r5, lr}
   bd170:	4615      	mov	r5, r2
   bd172:	461c      	mov	r4, r3
   bd174:	f000 f89e 	bl	bd2b4 <_ZNKSt9type_infoeqERKS_>
   bd178:	b120      	cbz	r0, bd184 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bd17a:	2308      	movs	r3, #8
   bd17c:	60e3      	str	r3, [r4, #12]
   bd17e:	2306      	movs	r3, #6
   bd180:	6025      	str	r5, [r4, #0]
   bd182:	7123      	strb	r3, [r4, #4]
   bd184:	bd38      	pop	{r3, r4, r5, pc}

000bd186 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bd186:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd188:	4605      	mov	r5, r0
   bd18a:	460c      	mov	r4, r1
   bd18c:	9201      	str	r2, [sp, #4]
   bd18e:	461e      	mov	r6, r3
   bd190:	f000 f890 	bl	bd2b4 <_ZNKSt9type_infoeqERKS_>
   bd194:	b950      	cbnz	r0, bd1ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd196:	2e03      	cmp	r6, #3
   bd198:	d808      	bhi.n	bd1ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd19a:	6823      	ldr	r3, [r4, #0]
   bd19c:	9a01      	ldr	r2, [sp, #4]
   bd19e:	695b      	ldr	r3, [r3, #20]
   bd1a0:	4629      	mov	r1, r5
   bd1a2:	4620      	mov	r0, r4
   bd1a4:	b002      	add	sp, #8
   bd1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd1aa:	4718      	bx	r3
   bd1ac:	b002      	add	sp, #8
   bd1ae:	bd70      	pop	{r4, r5, r6, pc}

000bd1b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bd1b0:	b510      	push	{r4, lr}
   bd1b2:	4b03      	ldr	r3, [pc, #12]	; (bd1c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bd1b4:	6003      	str	r3, [r0, #0]
   bd1b6:	4604      	mov	r4, r0
   bd1b8:	f7ff ffa6 	bl	bd108 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd1bc:	4620      	mov	r0, r4
   bd1be:	bd10      	pop	{r4, pc}
   bd1c0:	000c04e8 	.word	0x000c04e8

000bd1c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bd1c4:	b510      	push	{r4, lr}
   bd1c6:	4604      	mov	r4, r0
   bd1c8:	f7ff fff2 	bl	bd1b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bd1cc:	4620      	mov	r0, r4
   bd1ce:	210c      	movs	r1, #12
   bd1d0:	f7f7 fc81 	bl	b4ad6 <_ZdlPvj>
   bd1d4:	4620      	mov	r0, r4
   bd1d6:	bd10      	pop	{r4, pc}

000bd1d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bd1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bd1da:	9f08      	ldr	r7, [sp, #32]
   bd1dc:	4297      	cmp	r7, r2
   bd1de:	4605      	mov	r5, r0
   bd1e0:	460e      	mov	r6, r1
   bd1e2:	4614      	mov	r4, r2
   bd1e4:	d00a      	beq.n	bd1fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bd1e6:	68a8      	ldr	r0, [r5, #8]
   bd1e8:	6802      	ldr	r2, [r0, #0]
   bd1ea:	9708      	str	r7, [sp, #32]
   bd1ec:	6a15      	ldr	r5, [r2, #32]
   bd1ee:	4631      	mov	r1, r6
   bd1f0:	4622      	mov	r2, r4
   bd1f2:	46ac      	mov	ip, r5
   bd1f4:	b003      	add	sp, #12
   bd1f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd1fa:	4760      	bx	ip
   bd1fc:	4619      	mov	r1, r3
   bd1fe:	9301      	str	r3, [sp, #4]
   bd200:	f000 f858 	bl	bd2b4 <_ZNKSt9type_infoeqERKS_>
   bd204:	9b01      	ldr	r3, [sp, #4]
   bd206:	2800      	cmp	r0, #0
   bd208:	d0ed      	beq.n	bd1e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bd20a:	2006      	movs	r0, #6
   bd20c:	b003      	add	sp, #12
   bd20e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd210 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bd210:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd214:	460d      	mov	r5, r1
   bd216:	4619      	mov	r1, r3
   bd218:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bd21c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bd220:	4681      	mov	r9, r0
   bd222:	4617      	mov	r7, r2
   bd224:	4698      	mov	r8, r3
   bd226:	f000 f845 	bl	bd2b4 <_ZNKSt9type_infoeqERKS_>
   bd22a:	b190      	cbz	r0, bd252 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bd22c:	2d00      	cmp	r5, #0
   bd22e:	6034      	str	r4, [r6, #0]
   bd230:	7137      	strb	r7, [r6, #4]
   bd232:	db09      	blt.n	bd248 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bd234:	1961      	adds	r1, r4, r5
   bd236:	458a      	cmp	sl, r1
   bd238:	bf0c      	ite	eq
   bd23a:	2106      	moveq	r1, #6
   bd23c:	2101      	movne	r1, #1
   bd23e:	71b1      	strb	r1, [r6, #6]
   bd240:	2000      	movs	r0, #0
   bd242:	b001      	add	sp, #4
   bd244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd248:	3502      	adds	r5, #2
   bd24a:	d1f9      	bne.n	bd240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd24c:	2301      	movs	r3, #1
   bd24e:	71b3      	strb	r3, [r6, #6]
   bd250:	e7f6      	b.n	bd240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd252:	4554      	cmp	r4, sl
   bd254:	d106      	bne.n	bd264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd256:	4659      	mov	r1, fp
   bd258:	4648      	mov	r0, r9
   bd25a:	f000 f82b 	bl	bd2b4 <_ZNKSt9type_infoeqERKS_>
   bd25e:	b108      	cbz	r0, bd264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd260:	7177      	strb	r7, [r6, #5]
   bd262:	e7ed      	b.n	bd240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd264:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bd268:	6803      	ldr	r3, [r0, #0]
   bd26a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bd26e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bd272:	69dc      	ldr	r4, [r3, #28]
   bd274:	463a      	mov	r2, r7
   bd276:	4643      	mov	r3, r8
   bd278:	4629      	mov	r1, r5
   bd27a:	46a4      	mov	ip, r4
   bd27c:	b001      	add	sp, #4
   bd27e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd282:	4760      	bx	ip

000bd284 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bd284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd288:	4607      	mov	r7, r0
   bd28a:	460c      	mov	r4, r1
   bd28c:	4615      	mov	r5, r2
   bd28e:	461e      	mov	r6, r3
   bd290:	f7ff ff6d 	bl	bd16e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bd294:	b948      	cbnz	r0, bd2aa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bd296:	68b8      	ldr	r0, [r7, #8]
   bd298:	6803      	ldr	r3, [r0, #0]
   bd29a:	699f      	ldr	r7, [r3, #24]
   bd29c:	462a      	mov	r2, r5
   bd29e:	4633      	mov	r3, r6
   bd2a0:	4621      	mov	r1, r4
   bd2a2:	46bc      	mov	ip, r7
   bd2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bd2a8:	4760      	bx	ip
   bd2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd2ae <_ZNSt9type_infoD1Ev>:
   bd2ae:	4770      	bx	lr

000bd2b0 <_ZNKSt9type_info14__is_pointer_pEv>:
   bd2b0:	2000      	movs	r0, #0
   bd2b2:	4770      	bx	lr

000bd2b4 <_ZNKSt9type_infoeqERKS_>:
   bd2b4:	4281      	cmp	r1, r0
   bd2b6:	b508      	push	{r3, lr}
   bd2b8:	d00e      	beq.n	bd2d8 <_ZNKSt9type_infoeqERKS_+0x24>
   bd2ba:	6840      	ldr	r0, [r0, #4]
   bd2bc:	7803      	ldrb	r3, [r0, #0]
   bd2be:	2b2a      	cmp	r3, #42	; 0x2a
   bd2c0:	d00c      	beq.n	bd2dc <_ZNKSt9type_infoeqERKS_+0x28>
   bd2c2:	6849      	ldr	r1, [r1, #4]
   bd2c4:	780b      	ldrb	r3, [r1, #0]
   bd2c6:	2b2a      	cmp	r3, #42	; 0x2a
   bd2c8:	bf08      	it	eq
   bd2ca:	3101      	addeq	r1, #1
   bd2cc:	f7f7 fb98 	bl	b4a00 <strcmp>
   bd2d0:	fab0 f080 	clz	r0, r0
   bd2d4:	0940      	lsrs	r0, r0, #5
   bd2d6:	bd08      	pop	{r3, pc}
   bd2d8:	2001      	movs	r0, #1
   bd2da:	e7fc      	b.n	bd2d6 <_ZNKSt9type_infoeqERKS_+0x22>
   bd2dc:	2000      	movs	r0, #0
   bd2de:	e7fa      	b.n	bd2d6 <_ZNKSt9type_infoeqERKS_+0x22>

000bd2e0 <asctime_r>:
   bd2e0:	b510      	push	{r4, lr}
   bd2e2:	460c      	mov	r4, r1
   bd2e4:	6941      	ldr	r1, [r0, #20]
   bd2e6:	6903      	ldr	r3, [r0, #16]
   bd2e8:	6982      	ldr	r2, [r0, #24]
   bd2ea:	b086      	sub	sp, #24
   bd2ec:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bd2f0:	9104      	str	r1, [sp, #16]
   bd2f2:	6801      	ldr	r1, [r0, #0]
   bd2f4:	9103      	str	r1, [sp, #12]
   bd2f6:	6841      	ldr	r1, [r0, #4]
   bd2f8:	9102      	str	r1, [sp, #8]
   bd2fa:	6881      	ldr	r1, [r0, #8]
   bd2fc:	9101      	str	r1, [sp, #4]
   bd2fe:	68c1      	ldr	r1, [r0, #12]
   bd300:	9100      	str	r1, [sp, #0]
   bd302:	4907      	ldr	r1, [pc, #28]	; (bd320 <asctime_r+0x40>)
   bd304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bd308:	440b      	add	r3, r1
   bd30a:	4906      	ldr	r1, [pc, #24]	; (bd324 <asctime_r+0x44>)
   bd30c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bd310:	440a      	add	r2, r1
   bd312:	4620      	mov	r0, r4
   bd314:	4904      	ldr	r1, [pc, #16]	; (bd328 <asctime_r+0x48>)
   bd316:	f7fc f921 	bl	b955c <siprintf>
   bd31a:	4620      	mov	r0, r4
   bd31c:	b006      	add	sp, #24
   bd31e:	bd10      	pop	{r4, pc}
   bd320:	000c0556 	.word	0x000c0556
   bd324:	000c0541 	.word	0x000c0541
   bd328:	000c0521 	.word	0x000c0521

000bd32c <atexit>:
   bd32c:	2300      	movs	r3, #0
   bd32e:	4601      	mov	r1, r0
   bd330:	461a      	mov	r2, r3
   bd332:	4618      	mov	r0, r3
   bd334:	f001 b86c 	b.w	be410 <__register_exitproc>

000bd338 <atof>:
   bd338:	2100      	movs	r1, #0
   bd33a:	f000 bf2b 	b.w	be194 <strtod>

000bd33e <atoi>:
   bd33e:	220a      	movs	r2, #10
   bd340:	2100      	movs	r1, #0
   bd342:	f001 b811 	b.w	be368 <strtol>

000bd346 <atol>:
   bd346:	220a      	movs	r2, #10
   bd348:	2100      	movs	r1, #0
   bd34a:	f001 b80d 	b.w	be368 <strtol>

000bd34e <ldiv>:
   bd34e:	2900      	cmp	r1, #0
   bd350:	b510      	push	{r4, lr}
   bd352:	fb91 f4f2 	sdiv	r4, r1, r2
   bd356:	fb02 1314 	mls	r3, r2, r4, r1
   bd35a:	db06      	blt.n	bd36a <ldiv+0x1c>
   bd35c:	2b00      	cmp	r3, #0
   bd35e:	da01      	bge.n	bd364 <ldiv+0x16>
   bd360:	3401      	adds	r4, #1
   bd362:	1a9b      	subs	r3, r3, r2
   bd364:	e9c0 4300 	strd	r4, r3, [r0]
   bd368:	bd10      	pop	{r4, pc}
   bd36a:	2b00      	cmp	r3, #0
   bd36c:	bfc4      	itt	gt
   bd36e:	f104 34ff 	addgt.w	r4, r4, #4294967295
   bd372:	189b      	addgt	r3, r3, r2
   bd374:	e7f6      	b.n	bd364 <ldiv+0x16>

000bd376 <memcmp>:
   bd376:	b510      	push	{r4, lr}
   bd378:	3901      	subs	r1, #1
   bd37a:	4402      	add	r2, r0
   bd37c:	4290      	cmp	r0, r2
   bd37e:	d101      	bne.n	bd384 <memcmp+0xe>
   bd380:	2000      	movs	r0, #0
   bd382:	e005      	b.n	bd390 <memcmp+0x1a>
   bd384:	7803      	ldrb	r3, [r0, #0]
   bd386:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd38a:	42a3      	cmp	r3, r4
   bd38c:	d001      	beq.n	bd392 <memcmp+0x1c>
   bd38e:	1b18      	subs	r0, r3, r4
   bd390:	bd10      	pop	{r4, pc}
   bd392:	3001      	adds	r0, #1
   bd394:	e7f2      	b.n	bd37c <memcmp+0x6>

000bd396 <memcpy>:
   bd396:	440a      	add	r2, r1
   bd398:	4291      	cmp	r1, r2
   bd39a:	f100 33ff 	add.w	r3, r0, #4294967295
   bd39e:	d100      	bne.n	bd3a2 <memcpy+0xc>
   bd3a0:	4770      	bx	lr
   bd3a2:	b510      	push	{r4, lr}
   bd3a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd3a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   bd3ac:	4291      	cmp	r1, r2
   bd3ae:	d1f9      	bne.n	bd3a4 <memcpy+0xe>
   bd3b0:	bd10      	pop	{r4, pc}

000bd3b2 <memmove>:
   bd3b2:	4288      	cmp	r0, r1
   bd3b4:	b510      	push	{r4, lr}
   bd3b6:	eb01 0402 	add.w	r4, r1, r2
   bd3ba:	d902      	bls.n	bd3c2 <memmove+0x10>
   bd3bc:	4284      	cmp	r4, r0
   bd3be:	4623      	mov	r3, r4
   bd3c0:	d807      	bhi.n	bd3d2 <memmove+0x20>
   bd3c2:	1e43      	subs	r3, r0, #1
   bd3c4:	42a1      	cmp	r1, r4
   bd3c6:	d008      	beq.n	bd3da <memmove+0x28>
   bd3c8:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd3cc:	f803 2f01 	strb.w	r2, [r3, #1]!
   bd3d0:	e7f8      	b.n	bd3c4 <memmove+0x12>
   bd3d2:	4402      	add	r2, r0
   bd3d4:	4601      	mov	r1, r0
   bd3d6:	428a      	cmp	r2, r1
   bd3d8:	d100      	bne.n	bd3dc <memmove+0x2a>
   bd3da:	bd10      	pop	{r4, pc}
   bd3dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bd3e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bd3e4:	e7f7      	b.n	bd3d6 <memmove+0x24>

000bd3e6 <memset>:
   bd3e6:	4402      	add	r2, r0
   bd3e8:	4603      	mov	r3, r0
   bd3ea:	4293      	cmp	r3, r2
   bd3ec:	d100      	bne.n	bd3f0 <memset+0xa>
   bd3ee:	4770      	bx	lr
   bd3f0:	f803 1b01 	strb.w	r1, [r3], #1
   bd3f4:	e7f9      	b.n	bd3ea <memset+0x4>
	...

000bd3f8 <srand>:
   bd3f8:	b538      	push	{r3, r4, r5, lr}
   bd3fa:	4b10      	ldr	r3, [pc, #64]	; (bd43c <srand+0x44>)
   bd3fc:	681d      	ldr	r5, [r3, #0]
   bd3fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd400:	4604      	mov	r4, r0
   bd402:	b9b3      	cbnz	r3, bd432 <srand+0x3a>
   bd404:	2018      	movs	r0, #24
   bd406:	f7fc f889 	bl	b951c <malloc>
   bd40a:	4602      	mov	r2, r0
   bd40c:	63a8      	str	r0, [r5, #56]	; 0x38
   bd40e:	b920      	cbnz	r0, bd41a <srand+0x22>
   bd410:	4b0b      	ldr	r3, [pc, #44]	; (bd440 <srand+0x48>)
   bd412:	480c      	ldr	r0, [pc, #48]	; (bd444 <srand+0x4c>)
   bd414:	2142      	movs	r1, #66	; 0x42
   bd416:	f7fc f8d9 	bl	b95cc <__assert_func>
   bd41a:	490b      	ldr	r1, [pc, #44]	; (bd448 <srand+0x50>)
   bd41c:	4b0b      	ldr	r3, [pc, #44]	; (bd44c <srand+0x54>)
   bd41e:	e9c0 1300 	strd	r1, r3, [r0]
   bd422:	4b0b      	ldr	r3, [pc, #44]	; (bd450 <srand+0x58>)
   bd424:	6083      	str	r3, [r0, #8]
   bd426:	230b      	movs	r3, #11
   bd428:	8183      	strh	r3, [r0, #12]
   bd42a:	2100      	movs	r1, #0
   bd42c:	2001      	movs	r0, #1
   bd42e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bd432:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd434:	2200      	movs	r2, #0
   bd436:	611c      	str	r4, [r3, #16]
   bd438:	615a      	str	r2, [r3, #20]
   bd43a:	bd38      	pop	{r3, r4, r5, pc}
   bd43c:	2003d060 	.word	0x2003d060
   bd440:	000c067b 	.word	0x000c067b
   bd444:	000c0692 	.word	0x000c0692
   bd448:	abcd330e 	.word	0xabcd330e
   bd44c:	e66d1234 	.word	0xe66d1234
   bd450:	0005deec 	.word	0x0005deec

000bd454 <strcat>:
   bd454:	b510      	push	{r4, lr}
   bd456:	4602      	mov	r2, r0
   bd458:	7814      	ldrb	r4, [r2, #0]
   bd45a:	4613      	mov	r3, r2
   bd45c:	3201      	adds	r2, #1
   bd45e:	2c00      	cmp	r4, #0
   bd460:	d1fa      	bne.n	bd458 <strcat+0x4>
   bd462:	3b01      	subs	r3, #1
   bd464:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd468:	f803 2f01 	strb.w	r2, [r3, #1]!
   bd46c:	2a00      	cmp	r2, #0
   bd46e:	d1f9      	bne.n	bd464 <strcat+0x10>
   bd470:	bd10      	pop	{r4, pc}

000bd472 <strcpy>:
   bd472:	4603      	mov	r3, r0
   bd474:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd478:	f803 2b01 	strb.w	r2, [r3], #1
   bd47c:	2a00      	cmp	r2, #0
   bd47e:	d1f9      	bne.n	bd474 <strcpy+0x2>
   bd480:	4770      	bx	lr
	...

000bd484 <strdup>:
   bd484:	4b02      	ldr	r3, [pc, #8]	; (bd490 <strdup+0xc>)
   bd486:	4601      	mov	r1, r0
   bd488:	6818      	ldr	r0, [r3, #0]
   bd48a:	f000 b803 	b.w	bd494 <_strdup_r>
   bd48e:	bf00      	nop
   bd490:	2003d060 	.word	0x2003d060

000bd494 <_strdup_r>:
   bd494:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd496:	4604      	mov	r4, r0
   bd498:	4608      	mov	r0, r1
   bd49a:	460d      	mov	r5, r1
   bd49c:	f7f7 faba 	bl	b4a14 <strlen>
   bd4a0:	1c42      	adds	r2, r0, #1
   bd4a2:	4611      	mov	r1, r2
   bd4a4:	4620      	mov	r0, r4
   bd4a6:	9201      	str	r2, [sp, #4]
   bd4a8:	f7fc f880 	bl	b95ac <_malloc_r>
   bd4ac:	4604      	mov	r4, r0
   bd4ae:	b118      	cbz	r0, bd4b8 <_strdup_r+0x24>
   bd4b0:	9a01      	ldr	r2, [sp, #4]
   bd4b2:	4629      	mov	r1, r5
   bd4b4:	f7ff ff6f 	bl	bd396 <memcpy>
   bd4b8:	4620      	mov	r0, r4
   bd4ba:	b003      	add	sp, #12
   bd4bc:	bd30      	pop	{r4, r5, pc}

000bd4be <strncmp>:
   bd4be:	b510      	push	{r4, lr}
   bd4c0:	b17a      	cbz	r2, bd4e2 <strncmp+0x24>
   bd4c2:	4603      	mov	r3, r0
   bd4c4:	3901      	subs	r1, #1
   bd4c6:	1884      	adds	r4, r0, r2
   bd4c8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd4cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bd4d0:	4290      	cmp	r0, r2
   bd4d2:	d101      	bne.n	bd4d8 <strncmp+0x1a>
   bd4d4:	42a3      	cmp	r3, r4
   bd4d6:	d101      	bne.n	bd4dc <strncmp+0x1e>
   bd4d8:	1a80      	subs	r0, r0, r2
   bd4da:	bd10      	pop	{r4, pc}
   bd4dc:	2800      	cmp	r0, #0
   bd4de:	d1f3      	bne.n	bd4c8 <strncmp+0xa>
   bd4e0:	e7fa      	b.n	bd4d8 <strncmp+0x1a>
   bd4e2:	4610      	mov	r0, r2
   bd4e4:	e7f9      	b.n	bd4da <strncmp+0x1c>

000bd4e6 <strncpy>:
   bd4e6:	b510      	push	{r4, lr}
   bd4e8:	3901      	subs	r1, #1
   bd4ea:	4603      	mov	r3, r0
   bd4ec:	b132      	cbz	r2, bd4fc <strncpy+0x16>
   bd4ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd4f2:	f803 4b01 	strb.w	r4, [r3], #1
   bd4f6:	3a01      	subs	r2, #1
   bd4f8:	2c00      	cmp	r4, #0
   bd4fa:	d1f7      	bne.n	bd4ec <strncpy+0x6>
   bd4fc:	441a      	add	r2, r3
   bd4fe:	2100      	movs	r1, #0
   bd500:	4293      	cmp	r3, r2
   bd502:	d100      	bne.n	bd506 <strncpy+0x20>
   bd504:	bd10      	pop	{r4, pc}
   bd506:	f803 1b01 	strb.w	r1, [r3], #1
   bd50a:	e7f9      	b.n	bd500 <strncpy+0x1a>

000bd50c <strnlen>:
   bd50c:	b510      	push	{r4, lr}
   bd50e:	4602      	mov	r2, r0
   bd510:	4401      	add	r1, r0
   bd512:	428a      	cmp	r2, r1
   bd514:	4613      	mov	r3, r2
   bd516:	d003      	beq.n	bd520 <strnlen+0x14>
   bd518:	781c      	ldrb	r4, [r3, #0]
   bd51a:	3201      	adds	r2, #1
   bd51c:	2c00      	cmp	r4, #0
   bd51e:	d1f8      	bne.n	bd512 <strnlen+0x6>
   bd520:	1a18      	subs	r0, r3, r0
   bd522:	bd10      	pop	{r4, pc}

000bd524 <strstr>:
   bd524:	780a      	ldrb	r2, [r1, #0]
   bd526:	b570      	push	{r4, r5, r6, lr}
   bd528:	b96a      	cbnz	r2, bd546 <strstr+0x22>
   bd52a:	bd70      	pop	{r4, r5, r6, pc}
   bd52c:	429a      	cmp	r2, r3
   bd52e:	d109      	bne.n	bd544 <strstr+0x20>
   bd530:	460c      	mov	r4, r1
   bd532:	4605      	mov	r5, r0
   bd534:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bd538:	2b00      	cmp	r3, #0
   bd53a:	d0f6      	beq.n	bd52a <strstr+0x6>
   bd53c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bd540:	429e      	cmp	r6, r3
   bd542:	d0f7      	beq.n	bd534 <strstr+0x10>
   bd544:	3001      	adds	r0, #1
   bd546:	7803      	ldrb	r3, [r0, #0]
   bd548:	2b00      	cmp	r3, #0
   bd54a:	d1ef      	bne.n	bd52c <strstr+0x8>
   bd54c:	4618      	mov	r0, r3
   bd54e:	e7ec      	b.n	bd52a <strstr+0x6>

000bd550 <sulp>:
   bd550:	b570      	push	{r4, r5, r6, lr}
   bd552:	4604      	mov	r4, r0
   bd554:	460d      	mov	r5, r1
   bd556:	ec45 4b10 	vmov	d0, r4, r5
   bd55a:	4616      	mov	r6, r2
   bd55c:	f001 fed4 	bl	bf308 <__ulp>
   bd560:	ec51 0b10 	vmov	r0, r1, d0
   bd564:	b17e      	cbz	r6, bd586 <sulp+0x36>
   bd566:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bd56a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bd56e:	2b00      	cmp	r3, #0
   bd570:	dd09      	ble.n	bd586 <sulp+0x36>
   bd572:	051b      	lsls	r3, r3, #20
   bd574:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bd578:	2400      	movs	r4, #0
   bd57a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bd57e:	4622      	mov	r2, r4
   bd580:	462b      	mov	r3, r5
   bd582:	f7f6 ff09 	bl	b4398 <__aeabi_dmul>
   bd586:	bd70      	pop	{r4, r5, r6, pc}

000bd588 <_strtod_l>:
   bd588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd58c:	ed2d 8b02 	vpush	{d8}
   bd590:	b09d      	sub	sp, #116	; 0x74
   bd592:	461f      	mov	r7, r3
   bd594:	2300      	movs	r3, #0
   bd596:	9318      	str	r3, [sp, #96]	; 0x60
   bd598:	4ba2      	ldr	r3, [pc, #648]	; (bd824 <_strtod_l+0x29c>)
   bd59a:	9213      	str	r2, [sp, #76]	; 0x4c
   bd59c:	681b      	ldr	r3, [r3, #0]
   bd59e:	9305      	str	r3, [sp, #20]
   bd5a0:	4604      	mov	r4, r0
   bd5a2:	4618      	mov	r0, r3
   bd5a4:	4688      	mov	r8, r1
   bd5a6:	f7f7 fa35 	bl	b4a14 <strlen>
   bd5aa:	f04f 0a00 	mov.w	sl, #0
   bd5ae:	4605      	mov	r5, r0
   bd5b0:	f04f 0b00 	mov.w	fp, #0
   bd5b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd5ba:	781a      	ldrb	r2, [r3, #0]
   bd5bc:	2a2b      	cmp	r2, #43	; 0x2b
   bd5be:	d04e      	beq.n	bd65e <_strtod_l+0xd6>
   bd5c0:	d83b      	bhi.n	bd63a <_strtod_l+0xb2>
   bd5c2:	2a0d      	cmp	r2, #13
   bd5c4:	d834      	bhi.n	bd630 <_strtod_l+0xa8>
   bd5c6:	2a08      	cmp	r2, #8
   bd5c8:	d834      	bhi.n	bd634 <_strtod_l+0xac>
   bd5ca:	2a00      	cmp	r2, #0
   bd5cc:	d03e      	beq.n	bd64c <_strtod_l+0xc4>
   bd5ce:	2300      	movs	r3, #0
   bd5d0:	930a      	str	r3, [sp, #40]	; 0x28
   bd5d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bd5d4:	7833      	ldrb	r3, [r6, #0]
   bd5d6:	2b30      	cmp	r3, #48	; 0x30
   bd5d8:	f040 80b0 	bne.w	bd73c <_strtod_l+0x1b4>
   bd5dc:	7873      	ldrb	r3, [r6, #1]
   bd5de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd5e2:	2b58      	cmp	r3, #88	; 0x58
   bd5e4:	d168      	bne.n	bd6b8 <_strtod_l+0x130>
   bd5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bd5e8:	9301      	str	r3, [sp, #4]
   bd5ea:	ab18      	add	r3, sp, #96	; 0x60
   bd5ec:	9702      	str	r7, [sp, #8]
   bd5ee:	9300      	str	r3, [sp, #0]
   bd5f0:	4a8d      	ldr	r2, [pc, #564]	; (bd828 <_strtod_l+0x2a0>)
   bd5f2:	ab19      	add	r3, sp, #100	; 0x64
   bd5f4:	a917      	add	r1, sp, #92	; 0x5c
   bd5f6:	4620      	mov	r0, r4
   bd5f8:	f000 fff6 	bl	be5e8 <__gethex>
   bd5fc:	f010 0707 	ands.w	r7, r0, #7
   bd600:	4605      	mov	r5, r0
   bd602:	d005      	beq.n	bd610 <_strtod_l+0x88>
   bd604:	2f06      	cmp	r7, #6
   bd606:	d12c      	bne.n	bd662 <_strtod_l+0xda>
   bd608:	3601      	adds	r6, #1
   bd60a:	2300      	movs	r3, #0
   bd60c:	9617      	str	r6, [sp, #92]	; 0x5c
   bd60e:	930a      	str	r3, [sp, #40]	; 0x28
   bd610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bd612:	2b00      	cmp	r3, #0
   bd614:	f040 8590 	bne.w	be138 <_strtod_l+0xbb0>
   bd618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bd61a:	b1eb      	cbz	r3, bd658 <_strtod_l+0xd0>
   bd61c:	4652      	mov	r2, sl
   bd61e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bd622:	ec43 2b10 	vmov	d0, r2, r3
   bd626:	b01d      	add	sp, #116	; 0x74
   bd628:	ecbd 8b02 	vpop	{d8}
   bd62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd630:	2a20      	cmp	r2, #32
   bd632:	d1cc      	bne.n	bd5ce <_strtod_l+0x46>
   bd634:	3301      	adds	r3, #1
   bd636:	9317      	str	r3, [sp, #92]	; 0x5c
   bd638:	e7be      	b.n	bd5b8 <_strtod_l+0x30>
   bd63a:	2a2d      	cmp	r2, #45	; 0x2d
   bd63c:	d1c7      	bne.n	bd5ce <_strtod_l+0x46>
   bd63e:	2201      	movs	r2, #1
   bd640:	920a      	str	r2, [sp, #40]	; 0x28
   bd642:	1c5a      	adds	r2, r3, #1
   bd644:	9217      	str	r2, [sp, #92]	; 0x5c
   bd646:	785b      	ldrb	r3, [r3, #1]
   bd648:	2b00      	cmp	r3, #0
   bd64a:	d1c2      	bne.n	bd5d2 <_strtod_l+0x4a>
   bd64c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bd64e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd652:	2b00      	cmp	r3, #0
   bd654:	f040 856e 	bne.w	be134 <_strtod_l+0xbac>
   bd658:	4652      	mov	r2, sl
   bd65a:	465b      	mov	r3, fp
   bd65c:	e7e1      	b.n	bd622 <_strtod_l+0x9a>
   bd65e:	2200      	movs	r2, #0
   bd660:	e7ee      	b.n	bd640 <_strtod_l+0xb8>
   bd662:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bd664:	b13a      	cbz	r2, bd676 <_strtod_l+0xee>
   bd666:	2135      	movs	r1, #53	; 0x35
   bd668:	a81a      	add	r0, sp, #104	; 0x68
   bd66a:	f001 ff58 	bl	bf51e <__copybits>
   bd66e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd670:	4620      	mov	r0, r4
   bd672:	f001 fb17 	bl	beca4 <_Bfree>
   bd676:	3f01      	subs	r7, #1
   bd678:	2f04      	cmp	r7, #4
   bd67a:	d806      	bhi.n	bd68a <_strtod_l+0x102>
   bd67c:	e8df f007 	tbb	[pc, r7]
   bd680:	1714030a 	.word	0x1714030a
   bd684:	0a          	.byte	0x0a
   bd685:	00          	.byte	0x00
   bd686:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bd68a:	0728      	lsls	r0, r5, #28
   bd68c:	d5c0      	bpl.n	bd610 <_strtod_l+0x88>
   bd68e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bd692:	e7bd      	b.n	bd610 <_strtod_l+0x88>
   bd694:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bd698:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bd69a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bd69e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bd6a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bd6a6:	e7f0      	b.n	bd68a <_strtod_l+0x102>
   bd6a8:	f8df b180 	ldr.w	fp, [pc, #384]	; bd82c <_strtod_l+0x2a4>
   bd6ac:	e7ed      	b.n	bd68a <_strtod_l+0x102>
   bd6ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bd6b2:	f04f 3aff 	mov.w	sl, #4294967295
   bd6b6:	e7e8      	b.n	bd68a <_strtod_l+0x102>
   bd6b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd6ba:	1c5a      	adds	r2, r3, #1
   bd6bc:	9217      	str	r2, [sp, #92]	; 0x5c
   bd6be:	785b      	ldrb	r3, [r3, #1]
   bd6c0:	2b30      	cmp	r3, #48	; 0x30
   bd6c2:	d0f9      	beq.n	bd6b8 <_strtod_l+0x130>
   bd6c4:	2b00      	cmp	r3, #0
   bd6c6:	d0a3      	beq.n	bd610 <_strtod_l+0x88>
   bd6c8:	2301      	movs	r3, #1
   bd6ca:	f04f 0900 	mov.w	r9, #0
   bd6ce:	9304      	str	r3, [sp, #16]
   bd6d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd6d2:	9308      	str	r3, [sp, #32]
   bd6d4:	f8cd 901c 	str.w	r9, [sp, #28]
   bd6d8:	464f      	mov	r7, r9
   bd6da:	220a      	movs	r2, #10
   bd6dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bd6de:	7806      	ldrb	r6, [r0, #0]
   bd6e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bd6e4:	b2d9      	uxtb	r1, r3
   bd6e6:	2909      	cmp	r1, #9
   bd6e8:	d92a      	bls.n	bd740 <_strtod_l+0x1b8>
   bd6ea:	9905      	ldr	r1, [sp, #20]
   bd6ec:	462a      	mov	r2, r5
   bd6ee:	f7ff fee6 	bl	bd4be <strncmp>
   bd6f2:	b398      	cbz	r0, bd75c <_strtod_l+0x1d4>
   bd6f4:	2000      	movs	r0, #0
   bd6f6:	4632      	mov	r2, r6
   bd6f8:	463d      	mov	r5, r7
   bd6fa:	9005      	str	r0, [sp, #20]
   bd6fc:	4603      	mov	r3, r0
   bd6fe:	2a65      	cmp	r2, #101	; 0x65
   bd700:	d001      	beq.n	bd706 <_strtod_l+0x17e>
   bd702:	2a45      	cmp	r2, #69	; 0x45
   bd704:	d118      	bne.n	bd738 <_strtod_l+0x1b0>
   bd706:	b91d      	cbnz	r5, bd710 <_strtod_l+0x188>
   bd708:	9a04      	ldr	r2, [sp, #16]
   bd70a:	4302      	orrs	r2, r0
   bd70c:	d09e      	beq.n	bd64c <_strtod_l+0xc4>
   bd70e:	2500      	movs	r5, #0
   bd710:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bd714:	f108 0201 	add.w	r2, r8, #1
   bd718:	9217      	str	r2, [sp, #92]	; 0x5c
   bd71a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bd71e:	2a2b      	cmp	r2, #43	; 0x2b
   bd720:	d075      	beq.n	bd80e <_strtod_l+0x286>
   bd722:	2a2d      	cmp	r2, #45	; 0x2d
   bd724:	d07b      	beq.n	bd81e <_strtod_l+0x296>
   bd726:	f04f 0c00 	mov.w	ip, #0
   bd72a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bd72e:	2909      	cmp	r1, #9
   bd730:	f240 8082 	bls.w	bd838 <_strtod_l+0x2b0>
   bd734:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd738:	2600      	movs	r6, #0
   bd73a:	e09d      	b.n	bd878 <_strtod_l+0x2f0>
   bd73c:	2300      	movs	r3, #0
   bd73e:	e7c4      	b.n	bd6ca <_strtod_l+0x142>
   bd740:	2f08      	cmp	r7, #8
   bd742:	bfd8      	it	le
   bd744:	9907      	ldrle	r1, [sp, #28]
   bd746:	f100 0001 	add.w	r0, r0, #1
   bd74a:	bfda      	itte	le
   bd74c:	fb02 3301 	mlale	r3, r2, r1, r3
   bd750:	9307      	strle	r3, [sp, #28]
   bd752:	fb02 3909 	mlagt	r9, r2, r9, r3
   bd756:	3701      	adds	r7, #1
   bd758:	9017      	str	r0, [sp, #92]	; 0x5c
   bd75a:	e7bf      	b.n	bd6dc <_strtod_l+0x154>
   bd75c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd75e:	195a      	adds	r2, r3, r5
   bd760:	9217      	str	r2, [sp, #92]	; 0x5c
   bd762:	5d5a      	ldrb	r2, [r3, r5]
   bd764:	2f00      	cmp	r7, #0
   bd766:	d037      	beq.n	bd7d8 <_strtod_l+0x250>
   bd768:	9005      	str	r0, [sp, #20]
   bd76a:	463d      	mov	r5, r7
   bd76c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bd770:	2b09      	cmp	r3, #9
   bd772:	d912      	bls.n	bd79a <_strtod_l+0x212>
   bd774:	2301      	movs	r3, #1
   bd776:	e7c2      	b.n	bd6fe <_strtod_l+0x176>
   bd778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd77a:	1c5a      	adds	r2, r3, #1
   bd77c:	9217      	str	r2, [sp, #92]	; 0x5c
   bd77e:	785a      	ldrb	r2, [r3, #1]
   bd780:	3001      	adds	r0, #1
   bd782:	2a30      	cmp	r2, #48	; 0x30
   bd784:	d0f8      	beq.n	bd778 <_strtod_l+0x1f0>
   bd786:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bd78a:	2b08      	cmp	r3, #8
   bd78c:	f200 84d9 	bhi.w	be142 <_strtod_l+0xbba>
   bd790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd792:	9005      	str	r0, [sp, #20]
   bd794:	2000      	movs	r0, #0
   bd796:	9308      	str	r3, [sp, #32]
   bd798:	4605      	mov	r5, r0
   bd79a:	3a30      	subs	r2, #48	; 0x30
   bd79c:	f100 0301 	add.w	r3, r0, #1
   bd7a0:	d014      	beq.n	bd7cc <_strtod_l+0x244>
   bd7a2:	9905      	ldr	r1, [sp, #20]
   bd7a4:	4419      	add	r1, r3
   bd7a6:	9105      	str	r1, [sp, #20]
   bd7a8:	462b      	mov	r3, r5
   bd7aa:	eb00 0e05 	add.w	lr, r0, r5
   bd7ae:	210a      	movs	r1, #10
   bd7b0:	4573      	cmp	r3, lr
   bd7b2:	d113      	bne.n	bd7dc <_strtod_l+0x254>
   bd7b4:	182b      	adds	r3, r5, r0
   bd7b6:	2b08      	cmp	r3, #8
   bd7b8:	f105 0501 	add.w	r5, r5, #1
   bd7bc:	4405      	add	r5, r0
   bd7be:	dc1c      	bgt.n	bd7fa <_strtod_l+0x272>
   bd7c0:	9907      	ldr	r1, [sp, #28]
   bd7c2:	230a      	movs	r3, #10
   bd7c4:	fb03 2301 	mla	r3, r3, r1, r2
   bd7c8:	9307      	str	r3, [sp, #28]
   bd7ca:	2300      	movs	r3, #0
   bd7cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd7ce:	1c51      	adds	r1, r2, #1
   bd7d0:	9117      	str	r1, [sp, #92]	; 0x5c
   bd7d2:	7852      	ldrb	r2, [r2, #1]
   bd7d4:	4618      	mov	r0, r3
   bd7d6:	e7c9      	b.n	bd76c <_strtod_l+0x1e4>
   bd7d8:	4638      	mov	r0, r7
   bd7da:	e7d2      	b.n	bd782 <_strtod_l+0x1fa>
   bd7dc:	2b08      	cmp	r3, #8
   bd7de:	dc04      	bgt.n	bd7ea <_strtod_l+0x262>
   bd7e0:	9e07      	ldr	r6, [sp, #28]
   bd7e2:	434e      	muls	r6, r1
   bd7e4:	9607      	str	r6, [sp, #28]
   bd7e6:	3301      	adds	r3, #1
   bd7e8:	e7e2      	b.n	bd7b0 <_strtod_l+0x228>
   bd7ea:	f103 0c01 	add.w	ip, r3, #1
   bd7ee:	f1bc 0f10 	cmp.w	ip, #16
   bd7f2:	bfd8      	it	le
   bd7f4:	fb01 f909 	mulle.w	r9, r1, r9
   bd7f8:	e7f5      	b.n	bd7e6 <_strtod_l+0x25e>
   bd7fa:	2d10      	cmp	r5, #16
   bd7fc:	bfdc      	itt	le
   bd7fe:	230a      	movle	r3, #10
   bd800:	fb03 2909 	mlale	r9, r3, r9, r2
   bd804:	e7e1      	b.n	bd7ca <_strtod_l+0x242>
   bd806:	2300      	movs	r3, #0
   bd808:	9305      	str	r3, [sp, #20]
   bd80a:	2301      	movs	r3, #1
   bd80c:	e77c      	b.n	bd708 <_strtod_l+0x180>
   bd80e:	f04f 0c00 	mov.w	ip, #0
   bd812:	f108 0202 	add.w	r2, r8, #2
   bd816:	9217      	str	r2, [sp, #92]	; 0x5c
   bd818:	f898 2002 	ldrb.w	r2, [r8, #2]
   bd81c:	e785      	b.n	bd72a <_strtod_l+0x1a2>
   bd81e:	f04f 0c01 	mov.w	ip, #1
   bd822:	e7f6      	b.n	bd812 <_strtod_l+0x28a>
   bd824:	000c0880 	.word	0x000c0880
   bd828:	000c0718 	.word	0x000c0718
   bd82c:	7ff00000 	.word	0x7ff00000
   bd830:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd832:	1c51      	adds	r1, r2, #1
   bd834:	9117      	str	r1, [sp, #92]	; 0x5c
   bd836:	7852      	ldrb	r2, [r2, #1]
   bd838:	2a30      	cmp	r2, #48	; 0x30
   bd83a:	d0f9      	beq.n	bd830 <_strtod_l+0x2a8>
   bd83c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bd840:	2908      	cmp	r1, #8
   bd842:	f63f af79 	bhi.w	bd738 <_strtod_l+0x1b0>
   bd846:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bd84a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd84c:	9206      	str	r2, [sp, #24]
   bd84e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd850:	1c51      	adds	r1, r2, #1
   bd852:	9117      	str	r1, [sp, #92]	; 0x5c
   bd854:	7852      	ldrb	r2, [r2, #1]
   bd856:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bd85a:	2e09      	cmp	r6, #9
   bd85c:	d937      	bls.n	bd8ce <_strtod_l+0x346>
   bd85e:	9e06      	ldr	r6, [sp, #24]
   bd860:	1b89      	subs	r1, r1, r6
   bd862:	2908      	cmp	r1, #8
   bd864:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bd868:	dc02      	bgt.n	bd870 <_strtod_l+0x2e8>
   bd86a:	4576      	cmp	r6, lr
   bd86c:	bfa8      	it	ge
   bd86e:	4676      	movge	r6, lr
   bd870:	f1bc 0f00 	cmp.w	ip, #0
   bd874:	d000      	beq.n	bd878 <_strtod_l+0x2f0>
   bd876:	4276      	negs	r6, r6
   bd878:	2d00      	cmp	r5, #0
   bd87a:	d14d      	bne.n	bd918 <_strtod_l+0x390>
   bd87c:	9904      	ldr	r1, [sp, #16]
   bd87e:	4301      	orrs	r1, r0
   bd880:	f47f aec6 	bne.w	bd610 <_strtod_l+0x88>
   bd884:	2b00      	cmp	r3, #0
   bd886:	f47f aee1 	bne.w	bd64c <_strtod_l+0xc4>
   bd88a:	2a69      	cmp	r2, #105	; 0x69
   bd88c:	d027      	beq.n	bd8de <_strtod_l+0x356>
   bd88e:	dc24      	bgt.n	bd8da <_strtod_l+0x352>
   bd890:	2a49      	cmp	r2, #73	; 0x49
   bd892:	d024      	beq.n	bd8de <_strtod_l+0x356>
   bd894:	2a4e      	cmp	r2, #78	; 0x4e
   bd896:	f47f aed9 	bne.w	bd64c <_strtod_l+0xc4>
   bd89a:	499f      	ldr	r1, [pc, #636]	; (bdb18 <_strtod_l+0x590>)
   bd89c:	a817      	add	r0, sp, #92	; 0x5c
   bd89e:	f001 f8fb 	bl	bea98 <__match>
   bd8a2:	2800      	cmp	r0, #0
   bd8a4:	f43f aed2 	beq.w	bd64c <_strtod_l+0xc4>
   bd8a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd8aa:	781b      	ldrb	r3, [r3, #0]
   bd8ac:	2b28      	cmp	r3, #40	; 0x28
   bd8ae:	d12d      	bne.n	bd90c <_strtod_l+0x384>
   bd8b0:	499a      	ldr	r1, [pc, #616]	; (bdb1c <_strtod_l+0x594>)
   bd8b2:	aa1a      	add	r2, sp, #104	; 0x68
   bd8b4:	a817      	add	r0, sp, #92	; 0x5c
   bd8b6:	f001 f903 	bl	beac0 <__hexnan>
   bd8ba:	2805      	cmp	r0, #5
   bd8bc:	d126      	bne.n	bd90c <_strtod_l+0x384>
   bd8be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bd8c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bd8c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bd8c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bd8cc:	e6a0      	b.n	bd610 <_strtod_l+0x88>
   bd8ce:	210a      	movs	r1, #10
   bd8d0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bd8d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bd8d8:	e7b9      	b.n	bd84e <_strtod_l+0x2c6>
   bd8da:	2a6e      	cmp	r2, #110	; 0x6e
   bd8dc:	e7db      	b.n	bd896 <_strtod_l+0x30e>
   bd8de:	4990      	ldr	r1, [pc, #576]	; (bdb20 <_strtod_l+0x598>)
   bd8e0:	a817      	add	r0, sp, #92	; 0x5c
   bd8e2:	f001 f8d9 	bl	bea98 <__match>
   bd8e6:	2800      	cmp	r0, #0
   bd8e8:	f43f aeb0 	beq.w	bd64c <_strtod_l+0xc4>
   bd8ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd8ee:	498d      	ldr	r1, [pc, #564]	; (bdb24 <_strtod_l+0x59c>)
   bd8f0:	3b01      	subs	r3, #1
   bd8f2:	a817      	add	r0, sp, #92	; 0x5c
   bd8f4:	9317      	str	r3, [sp, #92]	; 0x5c
   bd8f6:	f001 f8cf 	bl	bea98 <__match>
   bd8fa:	b910      	cbnz	r0, bd902 <_strtod_l+0x37a>
   bd8fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd8fe:	3301      	adds	r3, #1
   bd900:	9317      	str	r3, [sp, #92]	; 0x5c
   bd902:	f8df b230 	ldr.w	fp, [pc, #560]	; bdb34 <_strtod_l+0x5ac>
   bd906:	f04f 0a00 	mov.w	sl, #0
   bd90a:	e681      	b.n	bd610 <_strtod_l+0x88>
   bd90c:	4886      	ldr	r0, [pc, #536]	; (bdb28 <_strtod_l+0x5a0>)
   bd90e:	f001 fe7f 	bl	bf610 <nan>
   bd912:	ec5b ab10 	vmov	sl, fp, d0
   bd916:	e67b      	b.n	bd610 <_strtod_l+0x88>
   bd918:	9b05      	ldr	r3, [sp, #20]
   bd91a:	9807      	ldr	r0, [sp, #28]
   bd91c:	1af3      	subs	r3, r6, r3
   bd91e:	2f00      	cmp	r7, #0
   bd920:	bf08      	it	eq
   bd922:	462f      	moveq	r7, r5
   bd924:	2d10      	cmp	r5, #16
   bd926:	9306      	str	r3, [sp, #24]
   bd928:	46a8      	mov	r8, r5
   bd92a:	bfa8      	it	ge
   bd92c:	f04f 0810 	movge.w	r8, #16
   bd930:	f7f6 fcb8 	bl	b42a4 <__aeabi_ui2d>
   bd934:	2d09      	cmp	r5, #9
   bd936:	4682      	mov	sl, r0
   bd938:	468b      	mov	fp, r1
   bd93a:	dd13      	ble.n	bd964 <_strtod_l+0x3dc>
   bd93c:	4b7b      	ldr	r3, [pc, #492]	; (bdb2c <_strtod_l+0x5a4>)
   bd93e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bd942:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bd946:	f7f6 fd27 	bl	b4398 <__aeabi_dmul>
   bd94a:	4682      	mov	sl, r0
   bd94c:	4648      	mov	r0, r9
   bd94e:	468b      	mov	fp, r1
   bd950:	f7f6 fca8 	bl	b42a4 <__aeabi_ui2d>
   bd954:	4602      	mov	r2, r0
   bd956:	460b      	mov	r3, r1
   bd958:	4650      	mov	r0, sl
   bd95a:	4659      	mov	r1, fp
   bd95c:	f7f6 fb66 	bl	b402c <__adddf3>
   bd960:	4682      	mov	sl, r0
   bd962:	468b      	mov	fp, r1
   bd964:	2d0f      	cmp	r5, #15
   bd966:	dc38      	bgt.n	bd9da <_strtod_l+0x452>
   bd968:	9b06      	ldr	r3, [sp, #24]
   bd96a:	2b00      	cmp	r3, #0
   bd96c:	f43f ae50 	beq.w	bd610 <_strtod_l+0x88>
   bd970:	dd24      	ble.n	bd9bc <_strtod_l+0x434>
   bd972:	2b16      	cmp	r3, #22
   bd974:	dc0b      	bgt.n	bd98e <_strtod_l+0x406>
   bd976:	496d      	ldr	r1, [pc, #436]	; (bdb2c <_strtod_l+0x5a4>)
   bd978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bd97c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd980:	4652      	mov	r2, sl
   bd982:	465b      	mov	r3, fp
   bd984:	f7f6 fd08 	bl	b4398 <__aeabi_dmul>
   bd988:	4682      	mov	sl, r0
   bd98a:	468b      	mov	fp, r1
   bd98c:	e640      	b.n	bd610 <_strtod_l+0x88>
   bd98e:	9a06      	ldr	r2, [sp, #24]
   bd990:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bd994:	4293      	cmp	r3, r2
   bd996:	db20      	blt.n	bd9da <_strtod_l+0x452>
   bd998:	4c64      	ldr	r4, [pc, #400]	; (bdb2c <_strtod_l+0x5a4>)
   bd99a:	f1c5 050f 	rsb	r5, r5, #15
   bd99e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bd9a2:	4652      	mov	r2, sl
   bd9a4:	465b      	mov	r3, fp
   bd9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd9aa:	f7f6 fcf5 	bl	b4398 <__aeabi_dmul>
   bd9ae:	9b06      	ldr	r3, [sp, #24]
   bd9b0:	1b5d      	subs	r5, r3, r5
   bd9b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bd9b6:	e9d4 2300 	ldrd	r2, r3, [r4]
   bd9ba:	e7e3      	b.n	bd984 <_strtod_l+0x3fc>
   bd9bc:	9b06      	ldr	r3, [sp, #24]
   bd9be:	3316      	adds	r3, #22
   bd9c0:	db0b      	blt.n	bd9da <_strtod_l+0x452>
   bd9c2:	9b05      	ldr	r3, [sp, #20]
   bd9c4:	1b9e      	subs	r6, r3, r6
   bd9c6:	4b59      	ldr	r3, [pc, #356]	; (bdb2c <_strtod_l+0x5a4>)
   bd9c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bd9cc:	e9d6 2300 	ldrd	r2, r3, [r6]
   bd9d0:	4650      	mov	r0, sl
   bd9d2:	4659      	mov	r1, fp
   bd9d4:	f7f6 fe0a 	bl	b45ec <__aeabi_ddiv>
   bd9d8:	e7d6      	b.n	bd988 <_strtod_l+0x400>
   bd9da:	9b06      	ldr	r3, [sp, #24]
   bd9dc:	eba5 0808 	sub.w	r8, r5, r8
   bd9e0:	4498      	add	r8, r3
   bd9e2:	f1b8 0f00 	cmp.w	r8, #0
   bd9e6:	dd74      	ble.n	bdad2 <_strtod_l+0x54a>
   bd9e8:	f018 030f 	ands.w	r3, r8, #15
   bd9ec:	d00a      	beq.n	bda04 <_strtod_l+0x47c>
   bd9ee:	494f      	ldr	r1, [pc, #316]	; (bdb2c <_strtod_l+0x5a4>)
   bd9f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bd9f4:	4652      	mov	r2, sl
   bd9f6:	465b      	mov	r3, fp
   bd9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd9fc:	f7f6 fccc 	bl	b4398 <__aeabi_dmul>
   bda00:	4682      	mov	sl, r0
   bda02:	468b      	mov	fp, r1
   bda04:	f038 080f 	bics.w	r8, r8, #15
   bda08:	d04f      	beq.n	bdaaa <_strtod_l+0x522>
   bda0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bda0e:	dd22      	ble.n	bda56 <_strtod_l+0x4ce>
   bda10:	2500      	movs	r5, #0
   bda12:	462e      	mov	r6, r5
   bda14:	9507      	str	r5, [sp, #28]
   bda16:	9505      	str	r5, [sp, #20]
   bda18:	2322      	movs	r3, #34	; 0x22
   bda1a:	f8df b118 	ldr.w	fp, [pc, #280]	; bdb34 <_strtod_l+0x5ac>
   bda1e:	6023      	str	r3, [r4, #0]
   bda20:	f04f 0a00 	mov.w	sl, #0
   bda24:	9b07      	ldr	r3, [sp, #28]
   bda26:	2b00      	cmp	r3, #0
   bda28:	f43f adf2 	beq.w	bd610 <_strtod_l+0x88>
   bda2c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bda2e:	4620      	mov	r0, r4
   bda30:	f001 f938 	bl	beca4 <_Bfree>
   bda34:	9905      	ldr	r1, [sp, #20]
   bda36:	4620      	mov	r0, r4
   bda38:	f001 f934 	bl	beca4 <_Bfree>
   bda3c:	4631      	mov	r1, r6
   bda3e:	4620      	mov	r0, r4
   bda40:	f001 f930 	bl	beca4 <_Bfree>
   bda44:	9907      	ldr	r1, [sp, #28]
   bda46:	4620      	mov	r0, r4
   bda48:	f001 f92c 	bl	beca4 <_Bfree>
   bda4c:	4629      	mov	r1, r5
   bda4e:	4620      	mov	r0, r4
   bda50:	f001 f928 	bl	beca4 <_Bfree>
   bda54:	e5dc      	b.n	bd610 <_strtod_l+0x88>
   bda56:	4b36      	ldr	r3, [pc, #216]	; (bdb30 <_strtod_l+0x5a8>)
   bda58:	9304      	str	r3, [sp, #16]
   bda5a:	2300      	movs	r3, #0
   bda5c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bda60:	4650      	mov	r0, sl
   bda62:	4659      	mov	r1, fp
   bda64:	4699      	mov	r9, r3
   bda66:	f1b8 0f01 	cmp.w	r8, #1
   bda6a:	dc21      	bgt.n	bdab0 <_strtod_l+0x528>
   bda6c:	b10b      	cbz	r3, bda72 <_strtod_l+0x4ea>
   bda6e:	4682      	mov	sl, r0
   bda70:	468b      	mov	fp, r1
   bda72:	4b2f      	ldr	r3, [pc, #188]	; (bdb30 <_strtod_l+0x5a8>)
   bda74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bda78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bda7c:	4652      	mov	r2, sl
   bda7e:	465b      	mov	r3, fp
   bda80:	e9d9 0100 	ldrd	r0, r1, [r9]
   bda84:	f7f6 fc88 	bl	b4398 <__aeabi_dmul>
   bda88:	4b2a      	ldr	r3, [pc, #168]	; (bdb34 <_strtod_l+0x5ac>)
   bda8a:	460a      	mov	r2, r1
   bda8c:	400b      	ands	r3, r1
   bda8e:	492a      	ldr	r1, [pc, #168]	; (bdb38 <_strtod_l+0x5b0>)
   bda90:	428b      	cmp	r3, r1
   bda92:	4682      	mov	sl, r0
   bda94:	d8bc      	bhi.n	bda10 <_strtod_l+0x488>
   bda96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bda9a:	428b      	cmp	r3, r1
   bda9c:	bf86      	itte	hi
   bda9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bdb3c <_strtod_l+0x5b4>
   bdaa2:	f04f 3aff 	movhi.w	sl, #4294967295
   bdaa6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bdaaa:	2300      	movs	r3, #0
   bdaac:	9304      	str	r3, [sp, #16]
   bdaae:	e084      	b.n	bdbba <_strtod_l+0x632>
   bdab0:	f018 0f01 	tst.w	r8, #1
   bdab4:	d005      	beq.n	bdac2 <_strtod_l+0x53a>
   bdab6:	9b04      	ldr	r3, [sp, #16]
   bdab8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bdabc:	f7f6 fc6c 	bl	b4398 <__aeabi_dmul>
   bdac0:	2301      	movs	r3, #1
   bdac2:	9a04      	ldr	r2, [sp, #16]
   bdac4:	3208      	adds	r2, #8
   bdac6:	f109 0901 	add.w	r9, r9, #1
   bdaca:	ea4f 0868 	mov.w	r8, r8, asr #1
   bdace:	9204      	str	r2, [sp, #16]
   bdad0:	e7c9      	b.n	bda66 <_strtod_l+0x4de>
   bdad2:	d0ea      	beq.n	bdaaa <_strtod_l+0x522>
   bdad4:	f1c8 0800 	rsb	r8, r8, #0
   bdad8:	f018 020f 	ands.w	r2, r8, #15
   bdadc:	d00a      	beq.n	bdaf4 <_strtod_l+0x56c>
   bdade:	4b13      	ldr	r3, [pc, #76]	; (bdb2c <_strtod_l+0x5a4>)
   bdae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bdae4:	4650      	mov	r0, sl
   bdae6:	4659      	mov	r1, fp
   bdae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bdaec:	f7f6 fd7e 	bl	b45ec <__aeabi_ddiv>
   bdaf0:	4682      	mov	sl, r0
   bdaf2:	468b      	mov	fp, r1
   bdaf4:	ea5f 1828 	movs.w	r8, r8, asr #4
   bdaf8:	d0d7      	beq.n	bdaaa <_strtod_l+0x522>
   bdafa:	f1b8 0f1f 	cmp.w	r8, #31
   bdafe:	dd1f      	ble.n	bdb40 <_strtod_l+0x5b8>
   bdb00:	2500      	movs	r5, #0
   bdb02:	462e      	mov	r6, r5
   bdb04:	9507      	str	r5, [sp, #28]
   bdb06:	9505      	str	r5, [sp, #20]
   bdb08:	2322      	movs	r3, #34	; 0x22
   bdb0a:	f04f 0a00 	mov.w	sl, #0
   bdb0e:	f04f 0b00 	mov.w	fp, #0
   bdb12:	6023      	str	r3, [r4, #0]
   bdb14:	e786      	b.n	bda24 <_strtod_l+0x49c>
   bdb16:	bf00      	nop
   bdb18:	000bfe59 	.word	0x000bfe59
   bdb1c:	000c072c 	.word	0x000c072c
   bdb20:	000c070f 	.word	0x000c070f
   bdb24:	000c0712 	.word	0x000c0712
   bdb28:	000bfe42 	.word	0x000bfe42
   bdb2c:	000c0940 	.word	0x000c0940
   bdb30:	000c0918 	.word	0x000c0918
   bdb34:	7ff00000 	.word	0x7ff00000
   bdb38:	7ca00000 	.word	0x7ca00000
   bdb3c:	7fefffff 	.word	0x7fefffff
   bdb40:	f018 0310 	ands.w	r3, r8, #16
   bdb44:	bf18      	it	ne
   bdb46:	236a      	movne	r3, #106	; 0x6a
   bdb48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bdef8 <_strtod_l+0x970>
   bdb4c:	9304      	str	r3, [sp, #16]
   bdb4e:	4650      	mov	r0, sl
   bdb50:	4659      	mov	r1, fp
   bdb52:	2300      	movs	r3, #0
   bdb54:	f018 0f01 	tst.w	r8, #1
   bdb58:	d004      	beq.n	bdb64 <_strtod_l+0x5dc>
   bdb5a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bdb5e:	f7f6 fc1b 	bl	b4398 <__aeabi_dmul>
   bdb62:	2301      	movs	r3, #1
   bdb64:	ea5f 0868 	movs.w	r8, r8, asr #1
   bdb68:	f109 0908 	add.w	r9, r9, #8
   bdb6c:	d1f2      	bne.n	bdb54 <_strtod_l+0x5cc>
   bdb6e:	b10b      	cbz	r3, bdb74 <_strtod_l+0x5ec>
   bdb70:	4682      	mov	sl, r0
   bdb72:	468b      	mov	fp, r1
   bdb74:	9b04      	ldr	r3, [sp, #16]
   bdb76:	b1c3      	cbz	r3, bdbaa <_strtod_l+0x622>
   bdb78:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bdb7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bdb80:	2b00      	cmp	r3, #0
   bdb82:	4659      	mov	r1, fp
   bdb84:	dd11      	ble.n	bdbaa <_strtod_l+0x622>
   bdb86:	2b1f      	cmp	r3, #31
   bdb88:	f340 8124 	ble.w	bddd4 <_strtod_l+0x84c>
   bdb8c:	2b34      	cmp	r3, #52	; 0x34
   bdb8e:	bfde      	ittt	le
   bdb90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bdb94:	f04f 33ff 	movle.w	r3, #4294967295
   bdb98:	fa03 f202 	lslle.w	r2, r3, r2
   bdb9c:	f04f 0a00 	mov.w	sl, #0
   bdba0:	bfcc      	ite	gt
   bdba2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bdba6:	ea02 0b01 	andle.w	fp, r2, r1
   bdbaa:	2200      	movs	r2, #0
   bdbac:	2300      	movs	r3, #0
   bdbae:	4650      	mov	r0, sl
   bdbb0:	4659      	mov	r1, fp
   bdbb2:	f7f6 fe59 	bl	b4868 <__aeabi_dcmpeq>
   bdbb6:	2800      	cmp	r0, #0
   bdbb8:	d1a2      	bne.n	bdb00 <_strtod_l+0x578>
   bdbba:	9b07      	ldr	r3, [sp, #28]
   bdbbc:	9300      	str	r3, [sp, #0]
   bdbbe:	9908      	ldr	r1, [sp, #32]
   bdbc0:	462b      	mov	r3, r5
   bdbc2:	463a      	mov	r2, r7
   bdbc4:	4620      	mov	r0, r4
   bdbc6:	f001 f8d5 	bl	bed74 <__s2b>
   bdbca:	9007      	str	r0, [sp, #28]
   bdbcc:	2800      	cmp	r0, #0
   bdbce:	f43f af1f 	beq.w	bda10 <_strtod_l+0x488>
   bdbd2:	9b05      	ldr	r3, [sp, #20]
   bdbd4:	1b9e      	subs	r6, r3, r6
   bdbd6:	9b06      	ldr	r3, [sp, #24]
   bdbd8:	2b00      	cmp	r3, #0
   bdbda:	bfb4      	ite	lt
   bdbdc:	4633      	movlt	r3, r6
   bdbde:	2300      	movge	r3, #0
   bdbe0:	930c      	str	r3, [sp, #48]	; 0x30
   bdbe2:	9b06      	ldr	r3, [sp, #24]
   bdbe4:	2500      	movs	r5, #0
   bdbe6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bdbea:	9312      	str	r3, [sp, #72]	; 0x48
   bdbec:	462e      	mov	r6, r5
   bdbee:	9b07      	ldr	r3, [sp, #28]
   bdbf0:	4620      	mov	r0, r4
   bdbf2:	6859      	ldr	r1, [r3, #4]
   bdbf4:	f001 f816 	bl	bec24 <_Balloc>
   bdbf8:	9005      	str	r0, [sp, #20]
   bdbfa:	2800      	cmp	r0, #0
   bdbfc:	f43f af0c 	beq.w	bda18 <_strtod_l+0x490>
   bdc00:	9b07      	ldr	r3, [sp, #28]
   bdc02:	691a      	ldr	r2, [r3, #16]
   bdc04:	3202      	adds	r2, #2
   bdc06:	f103 010c 	add.w	r1, r3, #12
   bdc0a:	0092      	lsls	r2, r2, #2
   bdc0c:	300c      	adds	r0, #12
   bdc0e:	f7ff fbc2 	bl	bd396 <memcpy>
   bdc12:	ec4b ab10 	vmov	d0, sl, fp
   bdc16:	aa1a      	add	r2, sp, #104	; 0x68
   bdc18:	a919      	add	r1, sp, #100	; 0x64
   bdc1a:	4620      	mov	r0, r4
   bdc1c:	f001 fbf0 	bl	bf400 <__d2b>
   bdc20:	ec4b ab18 	vmov	d8, sl, fp
   bdc24:	9018      	str	r0, [sp, #96]	; 0x60
   bdc26:	2800      	cmp	r0, #0
   bdc28:	f43f aef6 	beq.w	bda18 <_strtod_l+0x490>
   bdc2c:	2101      	movs	r1, #1
   bdc2e:	4620      	mov	r0, r4
   bdc30:	f001 f93a 	bl	beea8 <__i2b>
   bdc34:	4606      	mov	r6, r0
   bdc36:	2800      	cmp	r0, #0
   bdc38:	f43f aeee 	beq.w	bda18 <_strtod_l+0x490>
   bdc3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bdc3e:	9904      	ldr	r1, [sp, #16]
   bdc40:	2b00      	cmp	r3, #0
   bdc42:	bfab      	itete	ge
   bdc44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bdc46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bdc48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bdc4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bdc4e:	bfac      	ite	ge
   bdc50:	eb03 0902 	addge.w	r9, r3, r2
   bdc54:	1ad7      	sublt	r7, r2, r3
   bdc56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bdc58:	eba3 0801 	sub.w	r8, r3, r1
   bdc5c:	4490      	add	r8, r2
   bdc5e:	4ba1      	ldr	r3, [pc, #644]	; (bdee4 <_strtod_l+0x95c>)
   bdc60:	f108 38ff 	add.w	r8, r8, #4294967295
   bdc64:	4598      	cmp	r8, r3
   bdc66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bdc6a:	f280 80c7 	bge.w	bddfc <_strtod_l+0x874>
   bdc6e:	eba3 0308 	sub.w	r3, r3, r8
   bdc72:	2b1f      	cmp	r3, #31
   bdc74:	eba2 0203 	sub.w	r2, r2, r3
   bdc78:	f04f 0101 	mov.w	r1, #1
   bdc7c:	f300 80b1 	bgt.w	bdde2 <_strtod_l+0x85a>
   bdc80:	fa01 f303 	lsl.w	r3, r1, r3
   bdc84:	930d      	str	r3, [sp, #52]	; 0x34
   bdc86:	2300      	movs	r3, #0
   bdc88:	9308      	str	r3, [sp, #32]
   bdc8a:	eb09 0802 	add.w	r8, r9, r2
   bdc8e:	9b04      	ldr	r3, [sp, #16]
   bdc90:	45c1      	cmp	r9, r8
   bdc92:	4417      	add	r7, r2
   bdc94:	441f      	add	r7, r3
   bdc96:	464b      	mov	r3, r9
   bdc98:	bfa8      	it	ge
   bdc9a:	4643      	movge	r3, r8
   bdc9c:	42bb      	cmp	r3, r7
   bdc9e:	bfa8      	it	ge
   bdca0:	463b      	movge	r3, r7
   bdca2:	2b00      	cmp	r3, #0
   bdca4:	bfc2      	ittt	gt
   bdca6:	eba8 0803 	subgt.w	r8, r8, r3
   bdcaa:	1aff      	subgt	r7, r7, r3
   bdcac:	eba9 0903 	subgt.w	r9, r9, r3
   bdcb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bdcb2:	2b00      	cmp	r3, #0
   bdcb4:	dd17      	ble.n	bdce6 <_strtod_l+0x75e>
   bdcb6:	4631      	mov	r1, r6
   bdcb8:	461a      	mov	r2, r3
   bdcba:	4620      	mov	r0, r4
   bdcbc:	f001 f9b4 	bl	bf028 <__pow5mult>
   bdcc0:	4606      	mov	r6, r0
   bdcc2:	2800      	cmp	r0, #0
   bdcc4:	f43f aea8 	beq.w	bda18 <_strtod_l+0x490>
   bdcc8:	4601      	mov	r1, r0
   bdcca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bdccc:	4620      	mov	r0, r4
   bdcce:	f001 f901 	bl	beed4 <__multiply>
   bdcd2:	900b      	str	r0, [sp, #44]	; 0x2c
   bdcd4:	2800      	cmp	r0, #0
   bdcd6:	f43f ae9f 	beq.w	bda18 <_strtod_l+0x490>
   bdcda:	9918      	ldr	r1, [sp, #96]	; 0x60
   bdcdc:	4620      	mov	r0, r4
   bdcde:	f000 ffe1 	bl	beca4 <_Bfree>
   bdce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bdce4:	9318      	str	r3, [sp, #96]	; 0x60
   bdce6:	f1b8 0f00 	cmp.w	r8, #0
   bdcea:	f300 808c 	bgt.w	bde06 <_strtod_l+0x87e>
   bdcee:	9b06      	ldr	r3, [sp, #24]
   bdcf0:	2b00      	cmp	r3, #0
   bdcf2:	dd08      	ble.n	bdd06 <_strtod_l+0x77e>
   bdcf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bdcf6:	9905      	ldr	r1, [sp, #20]
   bdcf8:	4620      	mov	r0, r4
   bdcfa:	f001 f995 	bl	bf028 <__pow5mult>
   bdcfe:	9005      	str	r0, [sp, #20]
   bdd00:	2800      	cmp	r0, #0
   bdd02:	f43f ae89 	beq.w	bda18 <_strtod_l+0x490>
   bdd06:	2f00      	cmp	r7, #0
   bdd08:	dd08      	ble.n	bdd1c <_strtod_l+0x794>
   bdd0a:	9905      	ldr	r1, [sp, #20]
   bdd0c:	463a      	mov	r2, r7
   bdd0e:	4620      	mov	r0, r4
   bdd10:	f001 f9e4 	bl	bf0dc <__lshift>
   bdd14:	9005      	str	r0, [sp, #20]
   bdd16:	2800      	cmp	r0, #0
   bdd18:	f43f ae7e 	beq.w	bda18 <_strtod_l+0x490>
   bdd1c:	f1b9 0f00 	cmp.w	r9, #0
   bdd20:	dd08      	ble.n	bdd34 <_strtod_l+0x7ac>
   bdd22:	4631      	mov	r1, r6
   bdd24:	464a      	mov	r2, r9
   bdd26:	4620      	mov	r0, r4
   bdd28:	f001 f9d8 	bl	bf0dc <__lshift>
   bdd2c:	4606      	mov	r6, r0
   bdd2e:	2800      	cmp	r0, #0
   bdd30:	f43f ae72 	beq.w	bda18 <_strtod_l+0x490>
   bdd34:	9a05      	ldr	r2, [sp, #20]
   bdd36:	9918      	ldr	r1, [sp, #96]	; 0x60
   bdd38:	4620      	mov	r0, r4
   bdd3a:	f001 fa5b 	bl	bf1f4 <__mdiff>
   bdd3e:	4605      	mov	r5, r0
   bdd40:	2800      	cmp	r0, #0
   bdd42:	f43f ae69 	beq.w	bda18 <_strtod_l+0x490>
   bdd46:	68c3      	ldr	r3, [r0, #12]
   bdd48:	930b      	str	r3, [sp, #44]	; 0x2c
   bdd4a:	2300      	movs	r3, #0
   bdd4c:	60c3      	str	r3, [r0, #12]
   bdd4e:	4631      	mov	r1, r6
   bdd50:	f001 fa34 	bl	bf1bc <__mcmp>
   bdd54:	2800      	cmp	r0, #0
   bdd56:	da60      	bge.n	bde1a <_strtod_l+0x892>
   bdd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bdd5a:	ea53 030a 	orrs.w	r3, r3, sl
   bdd5e:	f040 8082 	bne.w	bde66 <_strtod_l+0x8de>
   bdd62:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bdd66:	2b00      	cmp	r3, #0
   bdd68:	d17d      	bne.n	bde66 <_strtod_l+0x8de>
   bdd6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bdd6e:	0d1b      	lsrs	r3, r3, #20
   bdd70:	051b      	lsls	r3, r3, #20
   bdd72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bdd76:	d976      	bls.n	bde66 <_strtod_l+0x8de>
   bdd78:	696b      	ldr	r3, [r5, #20]
   bdd7a:	b913      	cbnz	r3, bdd82 <_strtod_l+0x7fa>
   bdd7c:	692b      	ldr	r3, [r5, #16]
   bdd7e:	2b01      	cmp	r3, #1
   bdd80:	dd71      	ble.n	bde66 <_strtod_l+0x8de>
   bdd82:	4629      	mov	r1, r5
   bdd84:	2201      	movs	r2, #1
   bdd86:	4620      	mov	r0, r4
   bdd88:	f001 f9a8 	bl	bf0dc <__lshift>
   bdd8c:	4631      	mov	r1, r6
   bdd8e:	4605      	mov	r5, r0
   bdd90:	f001 fa14 	bl	bf1bc <__mcmp>
   bdd94:	2800      	cmp	r0, #0
   bdd96:	dd66      	ble.n	bde66 <_strtod_l+0x8de>
   bdd98:	9904      	ldr	r1, [sp, #16]
   bdd9a:	4a53      	ldr	r2, [pc, #332]	; (bdee8 <_strtod_l+0x960>)
   bdd9c:	465b      	mov	r3, fp
   bdd9e:	2900      	cmp	r1, #0
   bdda0:	f000 8081 	beq.w	bdea6 <_strtod_l+0x91e>
   bdda4:	ea02 010b 	and.w	r1, r2, fp
   bdda8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bddac:	dc7b      	bgt.n	bdea6 <_strtod_l+0x91e>
   bddae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bddb2:	f77f aea9 	ble.w	bdb08 <_strtod_l+0x580>
   bddb6:	4b4d      	ldr	r3, [pc, #308]	; (bdeec <_strtod_l+0x964>)
   bddb8:	4650      	mov	r0, sl
   bddba:	4659      	mov	r1, fp
   bddbc:	2200      	movs	r2, #0
   bddbe:	f7f6 faeb 	bl	b4398 <__aeabi_dmul>
   bddc2:	460b      	mov	r3, r1
   bddc4:	4303      	orrs	r3, r0
   bddc6:	bf08      	it	eq
   bddc8:	2322      	moveq	r3, #34	; 0x22
   bddca:	4682      	mov	sl, r0
   bddcc:	468b      	mov	fp, r1
   bddce:	bf08      	it	eq
   bddd0:	6023      	streq	r3, [r4, #0]
   bddd2:	e62b      	b.n	bda2c <_strtod_l+0x4a4>
   bddd4:	f04f 32ff 	mov.w	r2, #4294967295
   bddd8:	fa02 f303 	lsl.w	r3, r2, r3
   bdddc:	ea03 0a0a 	and.w	sl, r3, sl
   bdde0:	e6e3      	b.n	bdbaa <_strtod_l+0x622>
   bdde2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bdde6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bddea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bddee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bddf2:	fa01 f308 	lsl.w	r3, r1, r8
   bddf6:	9308      	str	r3, [sp, #32]
   bddf8:	910d      	str	r1, [sp, #52]	; 0x34
   bddfa:	e746      	b.n	bdc8a <_strtod_l+0x702>
   bddfc:	2300      	movs	r3, #0
   bddfe:	9308      	str	r3, [sp, #32]
   bde00:	2301      	movs	r3, #1
   bde02:	930d      	str	r3, [sp, #52]	; 0x34
   bde04:	e741      	b.n	bdc8a <_strtod_l+0x702>
   bde06:	9918      	ldr	r1, [sp, #96]	; 0x60
   bde08:	4642      	mov	r2, r8
   bde0a:	4620      	mov	r0, r4
   bde0c:	f001 f966 	bl	bf0dc <__lshift>
   bde10:	9018      	str	r0, [sp, #96]	; 0x60
   bde12:	2800      	cmp	r0, #0
   bde14:	f47f af6b 	bne.w	bdcee <_strtod_l+0x766>
   bde18:	e5fe      	b.n	bda18 <_strtod_l+0x490>
   bde1a:	465f      	mov	r7, fp
   bde1c:	d16e      	bne.n	bdefc <_strtod_l+0x974>
   bde1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bde20:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bde24:	b342      	cbz	r2, bde78 <_strtod_l+0x8f0>
   bde26:	4a32      	ldr	r2, [pc, #200]	; (bdef0 <_strtod_l+0x968>)
   bde28:	4293      	cmp	r3, r2
   bde2a:	d128      	bne.n	bde7e <_strtod_l+0x8f6>
   bde2c:	9b04      	ldr	r3, [sp, #16]
   bde2e:	4651      	mov	r1, sl
   bde30:	b1eb      	cbz	r3, bde6e <_strtod_l+0x8e6>
   bde32:	4b2d      	ldr	r3, [pc, #180]	; (bdee8 <_strtod_l+0x960>)
   bde34:	403b      	ands	r3, r7
   bde36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bde3a:	f04f 32ff 	mov.w	r2, #4294967295
   bde3e:	d819      	bhi.n	bde74 <_strtod_l+0x8ec>
   bde40:	0d1b      	lsrs	r3, r3, #20
   bde42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bde46:	fa02 f303 	lsl.w	r3, r2, r3
   bde4a:	4299      	cmp	r1, r3
   bde4c:	d117      	bne.n	bde7e <_strtod_l+0x8f6>
   bde4e:	4b29      	ldr	r3, [pc, #164]	; (bdef4 <_strtod_l+0x96c>)
   bde50:	429f      	cmp	r7, r3
   bde52:	d102      	bne.n	bde5a <_strtod_l+0x8d2>
   bde54:	3101      	adds	r1, #1
   bde56:	f43f addf 	beq.w	bda18 <_strtod_l+0x490>
   bde5a:	4b23      	ldr	r3, [pc, #140]	; (bdee8 <_strtod_l+0x960>)
   bde5c:	403b      	ands	r3, r7
   bde5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bde62:	f04f 0a00 	mov.w	sl, #0
   bde66:	9b04      	ldr	r3, [sp, #16]
   bde68:	2b00      	cmp	r3, #0
   bde6a:	d1a4      	bne.n	bddb6 <_strtod_l+0x82e>
   bde6c:	e5de      	b.n	bda2c <_strtod_l+0x4a4>
   bde6e:	f04f 33ff 	mov.w	r3, #4294967295
   bde72:	e7ea      	b.n	bde4a <_strtod_l+0x8c2>
   bde74:	4613      	mov	r3, r2
   bde76:	e7e8      	b.n	bde4a <_strtod_l+0x8c2>
   bde78:	ea53 030a 	orrs.w	r3, r3, sl
   bde7c:	d08c      	beq.n	bdd98 <_strtod_l+0x810>
   bde7e:	9b08      	ldr	r3, [sp, #32]
   bde80:	b1db      	cbz	r3, bdeba <_strtod_l+0x932>
   bde82:	423b      	tst	r3, r7
   bde84:	d0ef      	beq.n	bde66 <_strtod_l+0x8de>
   bde86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bde88:	9a04      	ldr	r2, [sp, #16]
   bde8a:	4650      	mov	r0, sl
   bde8c:	4659      	mov	r1, fp
   bde8e:	b1c3      	cbz	r3, bdec2 <_strtod_l+0x93a>
   bde90:	f7ff fb5e 	bl	bd550 <sulp>
   bde94:	4602      	mov	r2, r0
   bde96:	460b      	mov	r3, r1
   bde98:	ec51 0b18 	vmov	r0, r1, d8
   bde9c:	f7f6 f8c6 	bl	b402c <__adddf3>
   bdea0:	4682      	mov	sl, r0
   bdea2:	468b      	mov	fp, r1
   bdea4:	e7df      	b.n	bde66 <_strtod_l+0x8de>
   bdea6:	4013      	ands	r3, r2
   bdea8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bdeac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bdeb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bdeb4:	f04f 3aff 	mov.w	sl, #4294967295
   bdeb8:	e7d5      	b.n	bde66 <_strtod_l+0x8de>
   bdeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bdebc:	ea13 0f0a 	tst.w	r3, sl
   bdec0:	e7e0      	b.n	bde84 <_strtod_l+0x8fc>
   bdec2:	f7ff fb45 	bl	bd550 <sulp>
   bdec6:	4602      	mov	r2, r0
   bdec8:	460b      	mov	r3, r1
   bdeca:	ec51 0b18 	vmov	r0, r1, d8
   bdece:	f7f6 f8ab 	bl	b4028 <__aeabi_dsub>
   bded2:	2200      	movs	r2, #0
   bded4:	2300      	movs	r3, #0
   bded6:	4682      	mov	sl, r0
   bded8:	468b      	mov	fp, r1
   bdeda:	f7f6 fcc5 	bl	b4868 <__aeabi_dcmpeq>
   bdede:	2800      	cmp	r0, #0
   bdee0:	d0c1      	beq.n	bde66 <_strtod_l+0x8de>
   bdee2:	e611      	b.n	bdb08 <_strtod_l+0x580>
   bdee4:	fffffc02 	.word	0xfffffc02
   bdee8:	7ff00000 	.word	0x7ff00000
   bdeec:	39500000 	.word	0x39500000
   bdef0:	000fffff 	.word	0x000fffff
   bdef4:	7fefffff 	.word	0x7fefffff
   bdef8:	000c0740 	.word	0x000c0740
   bdefc:	4631      	mov	r1, r6
   bdefe:	4628      	mov	r0, r5
   bdf00:	f001 fada 	bl	bf4b8 <__ratio>
   bdf04:	ec59 8b10 	vmov	r8, r9, d0
   bdf08:	ee10 0a10 	vmov	r0, s0
   bdf0c:	2200      	movs	r2, #0
   bdf0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bdf12:	4649      	mov	r1, r9
   bdf14:	f7f6 fcbc 	bl	b4890 <__aeabi_dcmple>
   bdf18:	2800      	cmp	r0, #0
   bdf1a:	d07a      	beq.n	be012 <_strtod_l+0xa8a>
   bdf1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bdf1e:	2b00      	cmp	r3, #0
   bdf20:	d04a      	beq.n	bdfb8 <_strtod_l+0xa30>
   bdf22:	4b95      	ldr	r3, [pc, #596]	; (be178 <_strtod_l+0xbf0>)
   bdf24:	2200      	movs	r2, #0
   bdf26:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bdf2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; be178 <_strtod_l+0xbf0>
   bdf2e:	f04f 0800 	mov.w	r8, #0
   bdf32:	4b92      	ldr	r3, [pc, #584]	; (be17c <_strtod_l+0xbf4>)
   bdf34:	403b      	ands	r3, r7
   bdf36:	930d      	str	r3, [sp, #52]	; 0x34
   bdf38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bdf3a:	4b91      	ldr	r3, [pc, #580]	; (be180 <_strtod_l+0xbf8>)
   bdf3c:	429a      	cmp	r2, r3
   bdf3e:	f040 80b0 	bne.w	be0a2 <_strtod_l+0xb1a>
   bdf42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bdf46:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bdf4a:	ec4b ab10 	vmov	d0, sl, fp
   bdf4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bdf52:	f001 f9d9 	bl	bf308 <__ulp>
   bdf56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bdf5a:	ec53 2b10 	vmov	r2, r3, d0
   bdf5e:	f7f6 fa1b 	bl	b4398 <__aeabi_dmul>
   bdf62:	4652      	mov	r2, sl
   bdf64:	465b      	mov	r3, fp
   bdf66:	f7f6 f861 	bl	b402c <__adddf3>
   bdf6a:	460b      	mov	r3, r1
   bdf6c:	4983      	ldr	r1, [pc, #524]	; (be17c <_strtod_l+0xbf4>)
   bdf6e:	4a85      	ldr	r2, [pc, #532]	; (be184 <_strtod_l+0xbfc>)
   bdf70:	4019      	ands	r1, r3
   bdf72:	4291      	cmp	r1, r2
   bdf74:	4682      	mov	sl, r0
   bdf76:	d960      	bls.n	be03a <_strtod_l+0xab2>
   bdf78:	ee18 3a90 	vmov	r3, s17
   bdf7c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bdf80:	4293      	cmp	r3, r2
   bdf82:	d104      	bne.n	bdf8e <_strtod_l+0xa06>
   bdf84:	ee18 3a10 	vmov	r3, s16
   bdf88:	3301      	adds	r3, #1
   bdf8a:	f43f ad45 	beq.w	bda18 <_strtod_l+0x490>
   bdf8e:	f8df b200 	ldr.w	fp, [pc, #512]	; be190 <_strtod_l+0xc08>
   bdf92:	f04f 3aff 	mov.w	sl, #4294967295
   bdf96:	9918      	ldr	r1, [sp, #96]	; 0x60
   bdf98:	4620      	mov	r0, r4
   bdf9a:	f000 fe83 	bl	beca4 <_Bfree>
   bdf9e:	9905      	ldr	r1, [sp, #20]
   bdfa0:	4620      	mov	r0, r4
   bdfa2:	f000 fe7f 	bl	beca4 <_Bfree>
   bdfa6:	4631      	mov	r1, r6
   bdfa8:	4620      	mov	r0, r4
   bdfaa:	f000 fe7b 	bl	beca4 <_Bfree>
   bdfae:	4629      	mov	r1, r5
   bdfb0:	4620      	mov	r0, r4
   bdfb2:	f000 fe77 	bl	beca4 <_Bfree>
   bdfb6:	e61a      	b.n	bdbee <_strtod_l+0x666>
   bdfb8:	f1ba 0f00 	cmp.w	sl, #0
   bdfbc:	d11b      	bne.n	bdff6 <_strtod_l+0xa6e>
   bdfbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bdfc2:	b9f3      	cbnz	r3, be002 <_strtod_l+0xa7a>
   bdfc4:	4b6c      	ldr	r3, [pc, #432]	; (be178 <_strtod_l+0xbf0>)
   bdfc6:	2200      	movs	r2, #0
   bdfc8:	4640      	mov	r0, r8
   bdfca:	4649      	mov	r1, r9
   bdfcc:	f7f6 fc56 	bl	b487c <__aeabi_dcmplt>
   bdfd0:	b9d0      	cbnz	r0, be008 <_strtod_l+0xa80>
   bdfd2:	4640      	mov	r0, r8
   bdfd4:	4649      	mov	r1, r9
   bdfd6:	4b6c      	ldr	r3, [pc, #432]	; (be188 <_strtod_l+0xc00>)
   bdfd8:	2200      	movs	r2, #0
   bdfda:	f7f6 f9dd 	bl	b4398 <__aeabi_dmul>
   bdfde:	4680      	mov	r8, r0
   bdfe0:	4689      	mov	r9, r1
   bdfe2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bdfe6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bdfea:	9315      	str	r3, [sp, #84]	; 0x54
   bdfec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bdff0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bdff4:	e79d      	b.n	bdf32 <_strtod_l+0x9aa>
   bdff6:	f1ba 0f01 	cmp.w	sl, #1
   bdffa:	d102      	bne.n	be002 <_strtod_l+0xa7a>
   bdffc:	2f00      	cmp	r7, #0
   bdffe:	f43f ad83 	beq.w	bdb08 <_strtod_l+0x580>
   be002:	4b62      	ldr	r3, [pc, #392]	; (be18c <_strtod_l+0xc04>)
   be004:	2200      	movs	r2, #0
   be006:	e78e      	b.n	bdf26 <_strtod_l+0x99e>
   be008:	f8df 917c 	ldr.w	r9, [pc, #380]	; be188 <_strtod_l+0xc00>
   be00c:	f04f 0800 	mov.w	r8, #0
   be010:	e7e7      	b.n	bdfe2 <_strtod_l+0xa5a>
   be012:	4b5d      	ldr	r3, [pc, #372]	; (be188 <_strtod_l+0xc00>)
   be014:	4640      	mov	r0, r8
   be016:	4649      	mov	r1, r9
   be018:	2200      	movs	r2, #0
   be01a:	f7f6 f9bd 	bl	b4398 <__aeabi_dmul>
   be01e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be020:	4680      	mov	r8, r0
   be022:	4689      	mov	r9, r1
   be024:	b933      	cbnz	r3, be034 <_strtod_l+0xaac>
   be026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   be02a:	900e      	str	r0, [sp, #56]	; 0x38
   be02c:	930f      	str	r3, [sp, #60]	; 0x3c
   be02e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   be032:	e7dd      	b.n	bdff0 <_strtod_l+0xa68>
   be034:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   be038:	e7f9      	b.n	be02e <_strtod_l+0xaa6>
   be03a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   be03e:	9b04      	ldr	r3, [sp, #16]
   be040:	2b00      	cmp	r3, #0
   be042:	d1a8      	bne.n	bdf96 <_strtod_l+0xa0e>
   be044:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   be048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   be04a:	0d1b      	lsrs	r3, r3, #20
   be04c:	051b      	lsls	r3, r3, #20
   be04e:	429a      	cmp	r2, r3
   be050:	d1a1      	bne.n	bdf96 <_strtod_l+0xa0e>
   be052:	4640      	mov	r0, r8
   be054:	4649      	mov	r1, r9
   be056:	f7f6 fce5 	bl	b4a24 <__aeabi_d2lz>
   be05a:	f7f6 f96f 	bl	b433c <__aeabi_l2d>
   be05e:	4602      	mov	r2, r0
   be060:	460b      	mov	r3, r1
   be062:	4640      	mov	r0, r8
   be064:	4649      	mov	r1, r9
   be066:	f7f5 ffdf 	bl	b4028 <__aeabi_dsub>
   be06a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   be06c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   be070:	ea43 030a 	orr.w	r3, r3, sl
   be074:	4313      	orrs	r3, r2
   be076:	4680      	mov	r8, r0
   be078:	4689      	mov	r9, r1
   be07a:	d055      	beq.n	be128 <_strtod_l+0xba0>
   be07c:	a336      	add	r3, pc, #216	; (adr r3, be158 <_strtod_l+0xbd0>)
   be07e:	e9d3 2300 	ldrd	r2, r3, [r3]
   be082:	f7f6 fbfb 	bl	b487c <__aeabi_dcmplt>
   be086:	2800      	cmp	r0, #0
   be088:	f47f acd0 	bne.w	bda2c <_strtod_l+0x4a4>
   be08c:	a334      	add	r3, pc, #208	; (adr r3, be160 <_strtod_l+0xbd8>)
   be08e:	e9d3 2300 	ldrd	r2, r3, [r3]
   be092:	4640      	mov	r0, r8
   be094:	4649      	mov	r1, r9
   be096:	f7f6 fc0f 	bl	b48b8 <__aeabi_dcmpgt>
   be09a:	2800      	cmp	r0, #0
   be09c:	f43f af7b 	beq.w	bdf96 <_strtod_l+0xa0e>
   be0a0:	e4c4      	b.n	bda2c <_strtod_l+0x4a4>
   be0a2:	9b04      	ldr	r3, [sp, #16]
   be0a4:	b333      	cbz	r3, be0f4 <_strtod_l+0xb6c>
   be0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   be0a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   be0ac:	d822      	bhi.n	be0f4 <_strtod_l+0xb6c>
   be0ae:	a32e      	add	r3, pc, #184	; (adr r3, be168 <_strtod_l+0xbe0>)
   be0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   be0b4:	4640      	mov	r0, r8
   be0b6:	4649      	mov	r1, r9
   be0b8:	f7f6 fbea 	bl	b4890 <__aeabi_dcmple>
   be0bc:	b1a0      	cbz	r0, be0e8 <_strtod_l+0xb60>
   be0be:	4649      	mov	r1, r9
   be0c0:	4640      	mov	r0, r8
   be0c2:	f7f6 fc2b 	bl	b491c <__aeabi_d2uiz>
   be0c6:	2801      	cmp	r0, #1
   be0c8:	bf38      	it	cc
   be0ca:	2001      	movcc	r0, #1
   be0cc:	f7f6 f8ea 	bl	b42a4 <__aeabi_ui2d>
   be0d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be0d2:	4680      	mov	r8, r0
   be0d4:	4689      	mov	r9, r1
   be0d6:	bb23      	cbnz	r3, be122 <_strtod_l+0xb9a>
   be0d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   be0dc:	9010      	str	r0, [sp, #64]	; 0x40
   be0de:	9311      	str	r3, [sp, #68]	; 0x44
   be0e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   be0e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   be0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be0ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   be0ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   be0f0:	1a9b      	subs	r3, r3, r2
   be0f2:	9309      	str	r3, [sp, #36]	; 0x24
   be0f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be0f8:	eeb0 0a48 	vmov.f32	s0, s16
   be0fc:	eef0 0a68 	vmov.f32	s1, s17
   be100:	e9cd 0108 	strd	r0, r1, [sp, #32]
   be104:	f001 f900 	bl	bf308 <__ulp>
   be108:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be10c:	ec53 2b10 	vmov	r2, r3, d0
   be110:	f7f6 f942 	bl	b4398 <__aeabi_dmul>
   be114:	ec53 2b18 	vmov	r2, r3, d8
   be118:	f7f5 ff88 	bl	b402c <__adddf3>
   be11c:	4682      	mov	sl, r0
   be11e:	468b      	mov	fp, r1
   be120:	e78d      	b.n	be03e <_strtod_l+0xab6>
   be122:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   be126:	e7db      	b.n	be0e0 <_strtod_l+0xb58>
   be128:	a311      	add	r3, pc, #68	; (adr r3, be170 <_strtod_l+0xbe8>)
   be12a:	e9d3 2300 	ldrd	r2, r3, [r3]
   be12e:	f7f6 fba5 	bl	b487c <__aeabi_dcmplt>
   be132:	e7b2      	b.n	be09a <_strtod_l+0xb12>
   be134:	2300      	movs	r3, #0
   be136:	930a      	str	r3, [sp, #40]	; 0x28
   be138:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   be13a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be13c:	6013      	str	r3, [r2, #0]
   be13e:	f7ff ba6b 	b.w	bd618 <_strtod_l+0x90>
   be142:	2a65      	cmp	r2, #101	; 0x65
   be144:	f43f ab5f 	beq.w	bd806 <_strtod_l+0x27e>
   be148:	2a45      	cmp	r2, #69	; 0x45
   be14a:	f43f ab5c 	beq.w	bd806 <_strtod_l+0x27e>
   be14e:	2301      	movs	r3, #1
   be150:	f7ff bb94 	b.w	bd87c <_strtod_l+0x2f4>
   be154:	f3af 8000 	nop.w
   be158:	94a03595 	.word	0x94a03595
   be15c:	3fdfffff 	.word	0x3fdfffff
   be160:	35afe535 	.word	0x35afe535
   be164:	3fe00000 	.word	0x3fe00000
   be168:	ffc00000 	.word	0xffc00000
   be16c:	41dfffff 	.word	0x41dfffff
   be170:	94a03595 	.word	0x94a03595
   be174:	3fcfffff 	.word	0x3fcfffff
   be178:	3ff00000 	.word	0x3ff00000
   be17c:	7ff00000 	.word	0x7ff00000
   be180:	7fe00000 	.word	0x7fe00000
   be184:	7c9fffff 	.word	0x7c9fffff
   be188:	3fe00000 	.word	0x3fe00000
   be18c:	bff00000 	.word	0xbff00000
   be190:	7fefffff 	.word	0x7fefffff

000be194 <strtod>:
   be194:	460a      	mov	r2, r1
   be196:	4601      	mov	r1, r0
   be198:	4802      	ldr	r0, [pc, #8]	; (be1a4 <strtod+0x10>)
   be19a:	4b03      	ldr	r3, [pc, #12]	; (be1a8 <strtod+0x14>)
   be19c:	6800      	ldr	r0, [r0, #0]
   be19e:	f7ff b9f3 	b.w	bd588 <_strtod_l>
   be1a2:	bf00      	nop
   be1a4:	2003d060 	.word	0x2003d060
   be1a8:	2003d0cc 	.word	0x2003d0cc

000be1ac <strtok>:
   be1ac:	4b16      	ldr	r3, [pc, #88]	; (be208 <strtok+0x5c>)
   be1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be1b0:	681e      	ldr	r6, [r3, #0]
   be1b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   be1b4:	4605      	mov	r5, r0
   be1b6:	b9fc      	cbnz	r4, be1f8 <strtok+0x4c>
   be1b8:	2050      	movs	r0, #80	; 0x50
   be1ba:	9101      	str	r1, [sp, #4]
   be1bc:	f7fb f9ae 	bl	b951c <malloc>
   be1c0:	9901      	ldr	r1, [sp, #4]
   be1c2:	65b0      	str	r0, [r6, #88]	; 0x58
   be1c4:	4602      	mov	r2, r0
   be1c6:	b920      	cbnz	r0, be1d2 <strtok+0x26>
   be1c8:	4b10      	ldr	r3, [pc, #64]	; (be20c <strtok+0x60>)
   be1ca:	4811      	ldr	r0, [pc, #68]	; (be210 <strtok+0x64>)
   be1cc:	2157      	movs	r1, #87	; 0x57
   be1ce:	f7fb f9fd 	bl	b95cc <__assert_func>
   be1d2:	e9c0 4400 	strd	r4, r4, [r0]
   be1d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   be1da:	e9c0 4404 	strd	r4, r4, [r0, #16]
   be1de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   be1e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   be1e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   be1ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   be1ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   be1f2:	6184      	str	r4, [r0, #24]
   be1f4:	7704      	strb	r4, [r0, #28]
   be1f6:	6244      	str	r4, [r0, #36]	; 0x24
   be1f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   be1fa:	2301      	movs	r3, #1
   be1fc:	4628      	mov	r0, r5
   be1fe:	b002      	add	sp, #8
   be200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be204:	f000 b806 	b.w	be214 <__strtok_r>
   be208:	2003d060 	.word	0x2003d060
   be20c:	000c067b 	.word	0x000c067b
   be210:	000c0768 	.word	0x000c0768

000be214 <__strtok_r>:
   be214:	b5f0      	push	{r4, r5, r6, r7, lr}
   be216:	b908      	cbnz	r0, be21c <__strtok_r+0x8>
   be218:	6810      	ldr	r0, [r2, #0]
   be21a:	b188      	cbz	r0, be240 <__strtok_r+0x2c>
   be21c:	4604      	mov	r4, r0
   be21e:	4620      	mov	r0, r4
   be220:	f814 5b01 	ldrb.w	r5, [r4], #1
   be224:	460f      	mov	r7, r1
   be226:	f817 6b01 	ldrb.w	r6, [r7], #1
   be22a:	b91e      	cbnz	r6, be234 <__strtok_r+0x20>
   be22c:	b965      	cbnz	r5, be248 <__strtok_r+0x34>
   be22e:	6015      	str	r5, [r2, #0]
   be230:	4628      	mov	r0, r5
   be232:	e005      	b.n	be240 <__strtok_r+0x2c>
   be234:	42b5      	cmp	r5, r6
   be236:	d1f6      	bne.n	be226 <__strtok_r+0x12>
   be238:	2b00      	cmp	r3, #0
   be23a:	d1f0      	bne.n	be21e <__strtok_r+0xa>
   be23c:	6014      	str	r4, [r2, #0]
   be23e:	7003      	strb	r3, [r0, #0]
   be240:	bdf0      	pop	{r4, r5, r6, r7, pc}
   be242:	461c      	mov	r4, r3
   be244:	e00c      	b.n	be260 <__strtok_r+0x4c>
   be246:	b915      	cbnz	r5, be24e <__strtok_r+0x3a>
   be248:	f814 3b01 	ldrb.w	r3, [r4], #1
   be24c:	460e      	mov	r6, r1
   be24e:	f816 5b01 	ldrb.w	r5, [r6], #1
   be252:	42ab      	cmp	r3, r5
   be254:	d1f7      	bne.n	be246 <__strtok_r+0x32>
   be256:	2b00      	cmp	r3, #0
   be258:	d0f3      	beq.n	be242 <__strtok_r+0x2e>
   be25a:	2300      	movs	r3, #0
   be25c:	f804 3c01 	strb.w	r3, [r4, #-1]
   be260:	6014      	str	r4, [r2, #0]
   be262:	e7ed      	b.n	be240 <__strtok_r+0x2c>

000be264 <_strtol_l.constprop.0>:
   be264:	2b01      	cmp	r3, #1
   be266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be26a:	d001      	beq.n	be270 <_strtol_l.constprop.0+0xc>
   be26c:	2b24      	cmp	r3, #36	; 0x24
   be26e:	d906      	bls.n	be27e <_strtol_l.constprop.0+0x1a>
   be270:	f7fb f9a4 	bl	b95bc <__errno>
   be274:	2316      	movs	r3, #22
   be276:	6003      	str	r3, [r0, #0]
   be278:	2000      	movs	r0, #0
   be27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be27e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; be364 <_strtol_l.constprop.0+0x100>
   be282:	460d      	mov	r5, r1
   be284:	462e      	mov	r6, r5
   be286:	f815 4b01 	ldrb.w	r4, [r5], #1
   be28a:	f814 700c 	ldrb.w	r7, [r4, ip]
   be28e:	f017 0708 	ands.w	r7, r7, #8
   be292:	d1f7      	bne.n	be284 <_strtol_l.constprop.0+0x20>
   be294:	2c2d      	cmp	r4, #45	; 0x2d
   be296:	d132      	bne.n	be2fe <_strtol_l.constprop.0+0x9a>
   be298:	782c      	ldrb	r4, [r5, #0]
   be29a:	2701      	movs	r7, #1
   be29c:	1cb5      	adds	r5, r6, #2
   be29e:	2b00      	cmp	r3, #0
   be2a0:	d05b      	beq.n	be35a <_strtol_l.constprop.0+0xf6>
   be2a2:	2b10      	cmp	r3, #16
   be2a4:	d109      	bne.n	be2ba <_strtol_l.constprop.0+0x56>
   be2a6:	2c30      	cmp	r4, #48	; 0x30
   be2a8:	d107      	bne.n	be2ba <_strtol_l.constprop.0+0x56>
   be2aa:	782c      	ldrb	r4, [r5, #0]
   be2ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   be2b0:	2c58      	cmp	r4, #88	; 0x58
   be2b2:	d14d      	bne.n	be350 <_strtol_l.constprop.0+0xec>
   be2b4:	786c      	ldrb	r4, [r5, #1]
   be2b6:	2310      	movs	r3, #16
   be2b8:	3502      	adds	r5, #2
   be2ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   be2be:	f108 38ff 	add.w	r8, r8, #4294967295
   be2c2:	f04f 0c00 	mov.w	ip, #0
   be2c6:	fbb8 f9f3 	udiv	r9, r8, r3
   be2ca:	4666      	mov	r6, ip
   be2cc:	fb03 8a19 	mls	sl, r3, r9, r8
   be2d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   be2d4:	f1be 0f09 	cmp.w	lr, #9
   be2d8:	d816      	bhi.n	be308 <_strtol_l.constprop.0+0xa4>
   be2da:	4674      	mov	r4, lr
   be2dc:	42a3      	cmp	r3, r4
   be2de:	dd24      	ble.n	be32a <_strtol_l.constprop.0+0xc6>
   be2e0:	f1bc 0f00 	cmp.w	ip, #0
   be2e4:	db1e      	blt.n	be324 <_strtol_l.constprop.0+0xc0>
   be2e6:	45b1      	cmp	r9, r6
   be2e8:	d31c      	bcc.n	be324 <_strtol_l.constprop.0+0xc0>
   be2ea:	d101      	bne.n	be2f0 <_strtol_l.constprop.0+0x8c>
   be2ec:	45a2      	cmp	sl, r4
   be2ee:	db19      	blt.n	be324 <_strtol_l.constprop.0+0xc0>
   be2f0:	fb06 4603 	mla	r6, r6, r3, r4
   be2f4:	f04f 0c01 	mov.w	ip, #1
   be2f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   be2fc:	e7e8      	b.n	be2d0 <_strtol_l.constprop.0+0x6c>
   be2fe:	2c2b      	cmp	r4, #43	; 0x2b
   be300:	bf04      	itt	eq
   be302:	782c      	ldrbeq	r4, [r5, #0]
   be304:	1cb5      	addeq	r5, r6, #2
   be306:	e7ca      	b.n	be29e <_strtol_l.constprop.0+0x3a>
   be308:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   be30c:	f1be 0f19 	cmp.w	lr, #25
   be310:	d801      	bhi.n	be316 <_strtol_l.constprop.0+0xb2>
   be312:	3c37      	subs	r4, #55	; 0x37
   be314:	e7e2      	b.n	be2dc <_strtol_l.constprop.0+0x78>
   be316:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   be31a:	f1be 0f19 	cmp.w	lr, #25
   be31e:	d804      	bhi.n	be32a <_strtol_l.constprop.0+0xc6>
   be320:	3c57      	subs	r4, #87	; 0x57
   be322:	e7db      	b.n	be2dc <_strtol_l.constprop.0+0x78>
   be324:	f04f 3cff 	mov.w	ip, #4294967295
   be328:	e7e6      	b.n	be2f8 <_strtol_l.constprop.0+0x94>
   be32a:	f1bc 0f00 	cmp.w	ip, #0
   be32e:	da05      	bge.n	be33c <_strtol_l.constprop.0+0xd8>
   be330:	2322      	movs	r3, #34	; 0x22
   be332:	6003      	str	r3, [r0, #0]
   be334:	4646      	mov	r6, r8
   be336:	b942      	cbnz	r2, be34a <_strtol_l.constprop.0+0xe6>
   be338:	4630      	mov	r0, r6
   be33a:	e79e      	b.n	be27a <_strtol_l.constprop.0+0x16>
   be33c:	b107      	cbz	r7, be340 <_strtol_l.constprop.0+0xdc>
   be33e:	4276      	negs	r6, r6
   be340:	2a00      	cmp	r2, #0
   be342:	d0f9      	beq.n	be338 <_strtol_l.constprop.0+0xd4>
   be344:	f1bc 0f00 	cmp.w	ip, #0
   be348:	d000      	beq.n	be34c <_strtol_l.constprop.0+0xe8>
   be34a:	1e69      	subs	r1, r5, #1
   be34c:	6011      	str	r1, [r2, #0]
   be34e:	e7f3      	b.n	be338 <_strtol_l.constprop.0+0xd4>
   be350:	2430      	movs	r4, #48	; 0x30
   be352:	2b00      	cmp	r3, #0
   be354:	d1b1      	bne.n	be2ba <_strtol_l.constprop.0+0x56>
   be356:	2308      	movs	r3, #8
   be358:	e7af      	b.n	be2ba <_strtol_l.constprop.0+0x56>
   be35a:	2c30      	cmp	r4, #48	; 0x30
   be35c:	d0a5      	beq.n	be2aa <_strtol_l.constprop.0+0x46>
   be35e:	230a      	movs	r3, #10
   be360:	e7ab      	b.n	be2ba <_strtol_l.constprop.0+0x56>
   be362:	bf00      	nop
   be364:	000c057b 	.word	0x000c057b

000be368 <strtol>:
   be368:	4613      	mov	r3, r2
   be36a:	460a      	mov	r2, r1
   be36c:	4601      	mov	r1, r0
   be36e:	4802      	ldr	r0, [pc, #8]	; (be378 <strtol+0x10>)
   be370:	6800      	ldr	r0, [r0, #0]
   be372:	f7ff bf77 	b.w	be264 <_strtol_l.constprop.0>
   be376:	bf00      	nop
   be378:	2003d060 	.word	0x2003d060

000be37c <close>:
   be37c:	4b02      	ldr	r3, [pc, #8]	; (be388 <close+0xc>)
   be37e:	4601      	mov	r1, r0
   be380:	6818      	ldr	r0, [r3, #0]
   be382:	f000 b8a7 	b.w	be4d4 <_close_r>
   be386:	bf00      	nop
   be388:	2003d060 	.word	0x2003d060

000be38c <fstat>:
   be38c:	4b02      	ldr	r3, [pc, #8]	; (be398 <fstat+0xc>)
   be38e:	460a      	mov	r2, r1
   be390:	4601      	mov	r1, r0
   be392:	6818      	ldr	r0, [r3, #0]
   be394:	f000 b8ae 	b.w	be4f4 <_fstat_r>
   be398:	2003d060 	.word	0x2003d060

000be39c <open>:
   be39c:	b40e      	push	{r1, r2, r3}
   be39e:	b503      	push	{r0, r1, lr}
   be3a0:	ab03      	add	r3, sp, #12
   be3a2:	4601      	mov	r1, r0
   be3a4:	4806      	ldr	r0, [pc, #24]	; (be3c0 <open+0x24>)
   be3a6:	f853 2b04 	ldr.w	r2, [r3], #4
   be3aa:	9301      	str	r3, [sp, #4]
   be3ac:	6800      	ldr	r0, [r0, #0]
   be3ae:	9b04      	ldr	r3, [sp, #16]
   be3b0:	f001 f908 	bl	bf5c4 <_open_r>
   be3b4:	b002      	add	sp, #8
   be3b6:	f85d eb04 	ldr.w	lr, [sp], #4
   be3ba:	b003      	add	sp, #12
   be3bc:	4770      	bx	lr
   be3be:	bf00      	nop
   be3c0:	2003d060 	.word	0x2003d060

000be3c4 <read>:
   be3c4:	4613      	mov	r3, r2
   be3c6:	460a      	mov	r2, r1
   be3c8:	4601      	mov	r1, r0
   be3ca:	4802      	ldr	r0, [pc, #8]	; (be3d4 <read+0x10>)
   be3cc:	6800      	ldr	r0, [r0, #0]
   be3ce:	f001 b90b 	b.w	bf5e8 <_read_r>
   be3d2:	bf00      	nop
   be3d4:	2003d060 	.word	0x2003d060

000be3d8 <write>:
   be3d8:	4613      	mov	r3, r2
   be3da:	460a      	mov	r2, r1
   be3dc:	4601      	mov	r1, r0
   be3de:	4802      	ldr	r0, [pc, #8]	; (be3e8 <write+0x10>)
   be3e0:	6800      	ldr	r0, [r0, #0]
   be3e2:	f000 b803 	b.w	be3ec <_write_r>
   be3e6:	bf00      	nop
   be3e8:	2003d060 	.word	0x2003d060

000be3ec <_write_r>:
   be3ec:	b538      	push	{r3, r4, r5, lr}
   be3ee:	4d07      	ldr	r5, [pc, #28]	; (be40c <_write_r+0x20>)
   be3f0:	4604      	mov	r4, r0
   be3f2:	4608      	mov	r0, r1
   be3f4:	4611      	mov	r1, r2
   be3f6:	2200      	movs	r2, #0
   be3f8:	602a      	str	r2, [r5, #0]
   be3fa:	461a      	mov	r2, r3
   be3fc:	f7fa fd68 	bl	b8ed0 <_write>
   be400:	1c43      	adds	r3, r0, #1
   be402:	d102      	bne.n	be40a <_write_r+0x1e>
   be404:	682b      	ldr	r3, [r5, #0]
   be406:	b103      	cbz	r3, be40a <_write_r+0x1e>
   be408:	6023      	str	r3, [r4, #0]
   be40a:	bd38      	pop	{r3, r4, r5, pc}
   be40c:	2003e7ec 	.word	0x2003e7ec

000be410 <__register_exitproc>:
   be410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be414:	f8df 80b8 	ldr.w	r8, [pc, #184]	; be4d0 <__register_exitproc+0xc0>
   be418:	4606      	mov	r6, r0
   be41a:	f8d8 0000 	ldr.w	r0, [r8]
   be41e:	461f      	mov	r7, r3
   be420:	460d      	mov	r5, r1
   be422:	4691      	mov	r9, r2
   be424:	f000 fbe8 	bl	bebf8 <__retarget_lock_acquire_recursive>
   be428:	4b25      	ldr	r3, [pc, #148]	; (be4c0 <__register_exitproc+0xb0>)
   be42a:	681c      	ldr	r4, [r3, #0]
   be42c:	b934      	cbnz	r4, be43c <__register_exitproc+0x2c>
   be42e:	4c25      	ldr	r4, [pc, #148]	; (be4c4 <__register_exitproc+0xb4>)
   be430:	601c      	str	r4, [r3, #0]
   be432:	4b25      	ldr	r3, [pc, #148]	; (be4c8 <__register_exitproc+0xb8>)
   be434:	b113      	cbz	r3, be43c <__register_exitproc+0x2c>
   be436:	681b      	ldr	r3, [r3, #0]
   be438:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   be43c:	6863      	ldr	r3, [r4, #4]
   be43e:	2b1f      	cmp	r3, #31
   be440:	dd07      	ble.n	be452 <__register_exitproc+0x42>
   be442:	f8d8 0000 	ldr.w	r0, [r8]
   be446:	f000 fbd9 	bl	bebfc <__retarget_lock_release_recursive>
   be44a:	f04f 30ff 	mov.w	r0, #4294967295
   be44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be452:	b34e      	cbz	r6, be4a8 <__register_exitproc+0x98>
   be454:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   be458:	b988      	cbnz	r0, be47e <__register_exitproc+0x6e>
   be45a:	4b1c      	ldr	r3, [pc, #112]	; (be4cc <__register_exitproc+0xbc>)
   be45c:	b923      	cbnz	r3, be468 <__register_exitproc+0x58>
   be45e:	f8d8 0000 	ldr.w	r0, [r8]
   be462:	f000 fbca 	bl	bebfa <__retarget_lock_release>
   be466:	e7f0      	b.n	be44a <__register_exitproc+0x3a>
   be468:	f44f 7084 	mov.w	r0, #264	; 0x108
   be46c:	f7fb f856 	bl	b951c <malloc>
   be470:	2800      	cmp	r0, #0
   be472:	d0f4      	beq.n	be45e <__register_exitproc+0x4e>
   be474:	2300      	movs	r3, #0
   be476:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   be47a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   be47e:	6863      	ldr	r3, [r4, #4]
   be480:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   be484:	2201      	movs	r2, #1
   be486:	409a      	lsls	r2, r3
   be488:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   be48c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   be490:	4313      	orrs	r3, r2
   be492:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   be496:	2e02      	cmp	r6, #2
   be498:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   be49c:	bf02      	ittt	eq
   be49e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   be4a2:	4313      	orreq	r3, r2
   be4a4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   be4a8:	6863      	ldr	r3, [r4, #4]
   be4aa:	f8d8 0000 	ldr.w	r0, [r8]
   be4ae:	1c5a      	adds	r2, r3, #1
   be4b0:	3302      	adds	r3, #2
   be4b2:	6062      	str	r2, [r4, #4]
   be4b4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   be4b8:	f000 fba0 	bl	bebfc <__retarget_lock_release_recursive>
   be4bc:	2000      	movs	r0, #0
   be4be:	e7c6      	b.n	be44e <__register_exitproc+0x3e>
   be4c0:	2003e7e4 	.word	0x2003e7e4
   be4c4:	2003e758 	.word	0x2003e758
   be4c8:	00000000 	.word	0x00000000
   be4cc:	000b951d 	.word	0x000b951d
   be4d0:	2003d0c4 	.word	0x2003d0c4

000be4d4 <_close_r>:
   be4d4:	b538      	push	{r3, r4, r5, lr}
   be4d6:	4d06      	ldr	r5, [pc, #24]	; (be4f0 <_close_r+0x1c>)
   be4d8:	2300      	movs	r3, #0
   be4da:	4604      	mov	r4, r0
   be4dc:	4608      	mov	r0, r1
   be4de:	602b      	str	r3, [r5, #0]
   be4e0:	f7fa fd06 	bl	b8ef0 <_close>
   be4e4:	1c43      	adds	r3, r0, #1
   be4e6:	d102      	bne.n	be4ee <_close_r+0x1a>
   be4e8:	682b      	ldr	r3, [r5, #0]
   be4ea:	b103      	cbz	r3, be4ee <_close_r+0x1a>
   be4ec:	6023      	str	r3, [r4, #0]
   be4ee:	bd38      	pop	{r3, r4, r5, pc}
   be4f0:	2003e7ec 	.word	0x2003e7ec

000be4f4 <_fstat_r>:
   be4f4:	b538      	push	{r3, r4, r5, lr}
   be4f6:	4d07      	ldr	r5, [pc, #28]	; (be514 <_fstat_r+0x20>)
   be4f8:	2300      	movs	r3, #0
   be4fa:	4604      	mov	r4, r0
   be4fc:	4608      	mov	r0, r1
   be4fe:	4611      	mov	r1, r2
   be500:	602b      	str	r3, [r5, #0]
   be502:	f7fa fcfd 	bl	b8f00 <_fstat>
   be506:	1c43      	adds	r3, r0, #1
   be508:	d102      	bne.n	be510 <_fstat_r+0x1c>
   be50a:	682b      	ldr	r3, [r5, #0]
   be50c:	b103      	cbz	r3, be510 <_fstat_r+0x1c>
   be50e:	6023      	str	r3, [r4, #0]
   be510:	bd38      	pop	{r3, r4, r5, pc}
   be512:	bf00      	nop
   be514:	2003e7ec 	.word	0x2003e7ec

000be518 <rshift>:
   be518:	6903      	ldr	r3, [r0, #16]
   be51a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   be51e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be522:	ea4f 1261 	mov.w	r2, r1, asr #5
   be526:	f100 0414 	add.w	r4, r0, #20
   be52a:	dd45      	ble.n	be5b8 <rshift+0xa0>
   be52c:	f011 011f 	ands.w	r1, r1, #31
   be530:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   be534:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   be538:	d10c      	bne.n	be554 <rshift+0x3c>
   be53a:	f100 0710 	add.w	r7, r0, #16
   be53e:	4629      	mov	r1, r5
   be540:	42b1      	cmp	r1, r6
   be542:	d334      	bcc.n	be5ae <rshift+0x96>
   be544:	1a9b      	subs	r3, r3, r2
   be546:	009b      	lsls	r3, r3, #2
   be548:	1eea      	subs	r2, r5, #3
   be54a:	4296      	cmp	r6, r2
   be54c:	bf38      	it	cc
   be54e:	2300      	movcc	r3, #0
   be550:	4423      	add	r3, r4
   be552:	e015      	b.n	be580 <rshift+0x68>
   be554:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   be558:	f1c1 0820 	rsb	r8, r1, #32
   be55c:	40cf      	lsrs	r7, r1
   be55e:	f105 0e04 	add.w	lr, r5, #4
   be562:	46a1      	mov	r9, r4
   be564:	4576      	cmp	r6, lr
   be566:	46f4      	mov	ip, lr
   be568:	d815      	bhi.n	be596 <rshift+0x7e>
   be56a:	1a9a      	subs	r2, r3, r2
   be56c:	0092      	lsls	r2, r2, #2
   be56e:	3a04      	subs	r2, #4
   be570:	3501      	adds	r5, #1
   be572:	42ae      	cmp	r6, r5
   be574:	bf38      	it	cc
   be576:	2200      	movcc	r2, #0
   be578:	18a3      	adds	r3, r4, r2
   be57a:	50a7      	str	r7, [r4, r2]
   be57c:	b107      	cbz	r7, be580 <rshift+0x68>
   be57e:	3304      	adds	r3, #4
   be580:	1b1a      	subs	r2, r3, r4
   be582:	42a3      	cmp	r3, r4
   be584:	ea4f 02a2 	mov.w	r2, r2, asr #2
   be588:	bf08      	it	eq
   be58a:	2300      	moveq	r3, #0
   be58c:	6102      	str	r2, [r0, #16]
   be58e:	bf08      	it	eq
   be590:	6143      	streq	r3, [r0, #20]
   be592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be596:	f8dc c000 	ldr.w	ip, [ip]
   be59a:	fa0c fc08 	lsl.w	ip, ip, r8
   be59e:	ea4c 0707 	orr.w	r7, ip, r7
   be5a2:	f849 7b04 	str.w	r7, [r9], #4
   be5a6:	f85e 7b04 	ldr.w	r7, [lr], #4
   be5aa:	40cf      	lsrs	r7, r1
   be5ac:	e7da      	b.n	be564 <rshift+0x4c>
   be5ae:	f851 cb04 	ldr.w	ip, [r1], #4
   be5b2:	f847 cf04 	str.w	ip, [r7, #4]!
   be5b6:	e7c3      	b.n	be540 <rshift+0x28>
   be5b8:	4623      	mov	r3, r4
   be5ba:	e7e1      	b.n	be580 <rshift+0x68>

000be5bc <__hexdig_fun>:
   be5bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be5c0:	2b09      	cmp	r3, #9
   be5c2:	d802      	bhi.n	be5ca <__hexdig_fun+0xe>
   be5c4:	3820      	subs	r0, #32
   be5c6:	b2c0      	uxtb	r0, r0
   be5c8:	4770      	bx	lr
   be5ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be5ce:	2b05      	cmp	r3, #5
   be5d0:	d801      	bhi.n	be5d6 <__hexdig_fun+0x1a>
   be5d2:	3847      	subs	r0, #71	; 0x47
   be5d4:	e7f7      	b.n	be5c6 <__hexdig_fun+0xa>
   be5d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be5da:	2b05      	cmp	r3, #5
   be5dc:	d801      	bhi.n	be5e2 <__hexdig_fun+0x26>
   be5de:	3827      	subs	r0, #39	; 0x27
   be5e0:	e7f1      	b.n	be5c6 <__hexdig_fun+0xa>
   be5e2:	2000      	movs	r0, #0
   be5e4:	4770      	bx	lr
	...

000be5e8 <__gethex>:
   be5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be5ec:	ed2d 8b02 	vpush	{d8}
   be5f0:	b089      	sub	sp, #36	; 0x24
   be5f2:	ee08 0a10 	vmov	s16, r0
   be5f6:	9304      	str	r3, [sp, #16]
   be5f8:	4bb4      	ldr	r3, [pc, #720]	; (be8cc <__gethex+0x2e4>)
   be5fa:	681b      	ldr	r3, [r3, #0]
   be5fc:	9301      	str	r3, [sp, #4]
   be5fe:	4618      	mov	r0, r3
   be600:	468b      	mov	fp, r1
   be602:	4690      	mov	r8, r2
   be604:	f7f6 fa06 	bl	b4a14 <strlen>
   be608:	9b01      	ldr	r3, [sp, #4]
   be60a:	f8db 2000 	ldr.w	r2, [fp]
   be60e:	4403      	add	r3, r0
   be610:	4682      	mov	sl, r0
   be612:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   be616:	9305      	str	r3, [sp, #20]
   be618:	1c93      	adds	r3, r2, #2
   be61a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   be61e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   be622:	32fe      	adds	r2, #254	; 0xfe
   be624:	18d1      	adds	r1, r2, r3
   be626:	461f      	mov	r7, r3
   be628:	f813 0b01 	ldrb.w	r0, [r3], #1
   be62c:	9100      	str	r1, [sp, #0]
   be62e:	2830      	cmp	r0, #48	; 0x30
   be630:	d0f8      	beq.n	be624 <__gethex+0x3c>
   be632:	f7ff ffc3 	bl	be5bc <__hexdig_fun>
   be636:	4604      	mov	r4, r0
   be638:	2800      	cmp	r0, #0
   be63a:	d13a      	bne.n	be6b2 <__gethex+0xca>
   be63c:	9901      	ldr	r1, [sp, #4]
   be63e:	4652      	mov	r2, sl
   be640:	4638      	mov	r0, r7
   be642:	f7fe ff3c 	bl	bd4be <strncmp>
   be646:	4605      	mov	r5, r0
   be648:	2800      	cmp	r0, #0
   be64a:	d168      	bne.n	be71e <__gethex+0x136>
   be64c:	f817 000a 	ldrb.w	r0, [r7, sl]
   be650:	eb07 060a 	add.w	r6, r7, sl
   be654:	f7ff ffb2 	bl	be5bc <__hexdig_fun>
   be658:	2800      	cmp	r0, #0
   be65a:	d062      	beq.n	be722 <__gethex+0x13a>
   be65c:	4633      	mov	r3, r6
   be65e:	7818      	ldrb	r0, [r3, #0]
   be660:	2830      	cmp	r0, #48	; 0x30
   be662:	461f      	mov	r7, r3
   be664:	f103 0301 	add.w	r3, r3, #1
   be668:	d0f9      	beq.n	be65e <__gethex+0x76>
   be66a:	f7ff ffa7 	bl	be5bc <__hexdig_fun>
   be66e:	2301      	movs	r3, #1
   be670:	fab0 f480 	clz	r4, r0
   be674:	0964      	lsrs	r4, r4, #5
   be676:	4635      	mov	r5, r6
   be678:	9300      	str	r3, [sp, #0]
   be67a:	463a      	mov	r2, r7
   be67c:	4616      	mov	r6, r2
   be67e:	3201      	adds	r2, #1
   be680:	7830      	ldrb	r0, [r6, #0]
   be682:	f7ff ff9b 	bl	be5bc <__hexdig_fun>
   be686:	2800      	cmp	r0, #0
   be688:	d1f8      	bne.n	be67c <__gethex+0x94>
   be68a:	9901      	ldr	r1, [sp, #4]
   be68c:	4652      	mov	r2, sl
   be68e:	4630      	mov	r0, r6
   be690:	f7fe ff15 	bl	bd4be <strncmp>
   be694:	b980      	cbnz	r0, be6b8 <__gethex+0xd0>
   be696:	b94d      	cbnz	r5, be6ac <__gethex+0xc4>
   be698:	eb06 050a 	add.w	r5, r6, sl
   be69c:	462a      	mov	r2, r5
   be69e:	4616      	mov	r6, r2
   be6a0:	3201      	adds	r2, #1
   be6a2:	7830      	ldrb	r0, [r6, #0]
   be6a4:	f7ff ff8a 	bl	be5bc <__hexdig_fun>
   be6a8:	2800      	cmp	r0, #0
   be6aa:	d1f8      	bne.n	be69e <__gethex+0xb6>
   be6ac:	1bad      	subs	r5, r5, r6
   be6ae:	00ad      	lsls	r5, r5, #2
   be6b0:	e004      	b.n	be6bc <__gethex+0xd4>
   be6b2:	2400      	movs	r4, #0
   be6b4:	4625      	mov	r5, r4
   be6b6:	e7e0      	b.n	be67a <__gethex+0x92>
   be6b8:	2d00      	cmp	r5, #0
   be6ba:	d1f7      	bne.n	be6ac <__gethex+0xc4>
   be6bc:	7833      	ldrb	r3, [r6, #0]
   be6be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be6c2:	2b50      	cmp	r3, #80	; 0x50
   be6c4:	d13b      	bne.n	be73e <__gethex+0x156>
   be6c6:	7873      	ldrb	r3, [r6, #1]
   be6c8:	2b2b      	cmp	r3, #43	; 0x2b
   be6ca:	d02c      	beq.n	be726 <__gethex+0x13e>
   be6cc:	2b2d      	cmp	r3, #45	; 0x2d
   be6ce:	d02e      	beq.n	be72e <__gethex+0x146>
   be6d0:	1c71      	adds	r1, r6, #1
   be6d2:	f04f 0900 	mov.w	r9, #0
   be6d6:	7808      	ldrb	r0, [r1, #0]
   be6d8:	f7ff ff70 	bl	be5bc <__hexdig_fun>
   be6dc:	1e43      	subs	r3, r0, #1
   be6de:	b2db      	uxtb	r3, r3
   be6e0:	2b18      	cmp	r3, #24
   be6e2:	d82c      	bhi.n	be73e <__gethex+0x156>
   be6e4:	f1a0 0210 	sub.w	r2, r0, #16
   be6e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   be6ec:	f7ff ff66 	bl	be5bc <__hexdig_fun>
   be6f0:	1e43      	subs	r3, r0, #1
   be6f2:	b2db      	uxtb	r3, r3
   be6f4:	2b18      	cmp	r3, #24
   be6f6:	d91d      	bls.n	be734 <__gethex+0x14c>
   be6f8:	f1b9 0f00 	cmp.w	r9, #0
   be6fc:	d000      	beq.n	be700 <__gethex+0x118>
   be6fe:	4252      	negs	r2, r2
   be700:	4415      	add	r5, r2
   be702:	f8cb 1000 	str.w	r1, [fp]
   be706:	b1e4      	cbz	r4, be742 <__gethex+0x15a>
   be708:	9b00      	ldr	r3, [sp, #0]
   be70a:	2b00      	cmp	r3, #0
   be70c:	bf14      	ite	ne
   be70e:	2700      	movne	r7, #0
   be710:	2706      	moveq	r7, #6
   be712:	4638      	mov	r0, r7
   be714:	b009      	add	sp, #36	; 0x24
   be716:	ecbd 8b02 	vpop	{d8}
   be71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be71e:	463e      	mov	r6, r7
   be720:	4625      	mov	r5, r4
   be722:	2401      	movs	r4, #1
   be724:	e7ca      	b.n	be6bc <__gethex+0xd4>
   be726:	f04f 0900 	mov.w	r9, #0
   be72a:	1cb1      	adds	r1, r6, #2
   be72c:	e7d3      	b.n	be6d6 <__gethex+0xee>
   be72e:	f04f 0901 	mov.w	r9, #1
   be732:	e7fa      	b.n	be72a <__gethex+0x142>
   be734:	230a      	movs	r3, #10
   be736:	fb03 0202 	mla	r2, r3, r2, r0
   be73a:	3a10      	subs	r2, #16
   be73c:	e7d4      	b.n	be6e8 <__gethex+0x100>
   be73e:	4631      	mov	r1, r6
   be740:	e7df      	b.n	be702 <__gethex+0x11a>
   be742:	1bf3      	subs	r3, r6, r7
   be744:	3b01      	subs	r3, #1
   be746:	4621      	mov	r1, r4
   be748:	2b07      	cmp	r3, #7
   be74a:	dc0b      	bgt.n	be764 <__gethex+0x17c>
   be74c:	ee18 0a10 	vmov	r0, s16
   be750:	f000 fa68 	bl	bec24 <_Balloc>
   be754:	4604      	mov	r4, r0
   be756:	b940      	cbnz	r0, be76a <__gethex+0x182>
   be758:	4b5d      	ldr	r3, [pc, #372]	; (be8d0 <__gethex+0x2e8>)
   be75a:	4602      	mov	r2, r0
   be75c:	21de      	movs	r1, #222	; 0xde
   be75e:	485d      	ldr	r0, [pc, #372]	; (be8d4 <__gethex+0x2ec>)
   be760:	f7fa ff34 	bl	b95cc <__assert_func>
   be764:	3101      	adds	r1, #1
   be766:	105b      	asrs	r3, r3, #1
   be768:	e7ee      	b.n	be748 <__gethex+0x160>
   be76a:	f100 0914 	add.w	r9, r0, #20
   be76e:	f04f 0b00 	mov.w	fp, #0
   be772:	f1ca 0301 	rsb	r3, sl, #1
   be776:	f8cd 9008 	str.w	r9, [sp, #8]
   be77a:	f8cd b000 	str.w	fp, [sp]
   be77e:	9306      	str	r3, [sp, #24]
   be780:	42b7      	cmp	r7, r6
   be782:	d340      	bcc.n	be806 <__gethex+0x21e>
   be784:	9802      	ldr	r0, [sp, #8]
   be786:	9b00      	ldr	r3, [sp, #0]
   be788:	f840 3b04 	str.w	r3, [r0], #4
   be78c:	eba0 0009 	sub.w	r0, r0, r9
   be790:	1080      	asrs	r0, r0, #2
   be792:	0146      	lsls	r6, r0, #5
   be794:	6120      	str	r0, [r4, #16]
   be796:	4618      	mov	r0, r3
   be798:	f000 fb36 	bl	bee08 <__hi0bits>
   be79c:	1a30      	subs	r0, r6, r0
   be79e:	f8d8 6000 	ldr.w	r6, [r8]
   be7a2:	42b0      	cmp	r0, r6
   be7a4:	dd63      	ble.n	be86e <__gethex+0x286>
   be7a6:	1b87      	subs	r7, r0, r6
   be7a8:	4639      	mov	r1, r7
   be7aa:	4620      	mov	r0, r4
   be7ac:	f000 feda 	bl	bf564 <__any_on>
   be7b0:	4682      	mov	sl, r0
   be7b2:	b1a8      	cbz	r0, be7e0 <__gethex+0x1f8>
   be7b4:	1e7b      	subs	r3, r7, #1
   be7b6:	1159      	asrs	r1, r3, #5
   be7b8:	f003 021f 	and.w	r2, r3, #31
   be7bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   be7c0:	f04f 0a01 	mov.w	sl, #1
   be7c4:	fa0a f202 	lsl.w	r2, sl, r2
   be7c8:	420a      	tst	r2, r1
   be7ca:	d009      	beq.n	be7e0 <__gethex+0x1f8>
   be7cc:	4553      	cmp	r3, sl
   be7ce:	dd05      	ble.n	be7dc <__gethex+0x1f4>
   be7d0:	1eb9      	subs	r1, r7, #2
   be7d2:	4620      	mov	r0, r4
   be7d4:	f000 fec6 	bl	bf564 <__any_on>
   be7d8:	2800      	cmp	r0, #0
   be7da:	d145      	bne.n	be868 <__gethex+0x280>
   be7dc:	f04f 0a02 	mov.w	sl, #2
   be7e0:	4639      	mov	r1, r7
   be7e2:	4620      	mov	r0, r4
   be7e4:	f7ff fe98 	bl	be518 <rshift>
   be7e8:	443d      	add	r5, r7
   be7ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   be7ee:	42ab      	cmp	r3, r5
   be7f0:	da4c      	bge.n	be88c <__gethex+0x2a4>
   be7f2:	ee18 0a10 	vmov	r0, s16
   be7f6:	4621      	mov	r1, r4
   be7f8:	f000 fa54 	bl	beca4 <_Bfree>
   be7fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   be7fe:	2300      	movs	r3, #0
   be800:	6013      	str	r3, [r2, #0]
   be802:	27a3      	movs	r7, #163	; 0xa3
   be804:	e785      	b.n	be712 <__gethex+0x12a>
   be806:	1e73      	subs	r3, r6, #1
   be808:	9a05      	ldr	r2, [sp, #20]
   be80a:	9303      	str	r3, [sp, #12]
   be80c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   be810:	4293      	cmp	r3, r2
   be812:	d019      	beq.n	be848 <__gethex+0x260>
   be814:	f1bb 0f20 	cmp.w	fp, #32
   be818:	d107      	bne.n	be82a <__gethex+0x242>
   be81a:	9b02      	ldr	r3, [sp, #8]
   be81c:	9a00      	ldr	r2, [sp, #0]
   be81e:	f843 2b04 	str.w	r2, [r3], #4
   be822:	9302      	str	r3, [sp, #8]
   be824:	2300      	movs	r3, #0
   be826:	9300      	str	r3, [sp, #0]
   be828:	469b      	mov	fp, r3
   be82a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   be82e:	f7ff fec5 	bl	be5bc <__hexdig_fun>
   be832:	9b00      	ldr	r3, [sp, #0]
   be834:	f000 000f 	and.w	r0, r0, #15
   be838:	fa00 f00b 	lsl.w	r0, r0, fp
   be83c:	4303      	orrs	r3, r0
   be83e:	9300      	str	r3, [sp, #0]
   be840:	f10b 0b04 	add.w	fp, fp, #4
   be844:	9b03      	ldr	r3, [sp, #12]
   be846:	e00d      	b.n	be864 <__gethex+0x27c>
   be848:	9b03      	ldr	r3, [sp, #12]
   be84a:	9a06      	ldr	r2, [sp, #24]
   be84c:	4413      	add	r3, r2
   be84e:	42bb      	cmp	r3, r7
   be850:	d3e0      	bcc.n	be814 <__gethex+0x22c>
   be852:	4618      	mov	r0, r3
   be854:	9901      	ldr	r1, [sp, #4]
   be856:	9307      	str	r3, [sp, #28]
   be858:	4652      	mov	r2, sl
   be85a:	f7fe fe30 	bl	bd4be <strncmp>
   be85e:	9b07      	ldr	r3, [sp, #28]
   be860:	2800      	cmp	r0, #0
   be862:	d1d7      	bne.n	be814 <__gethex+0x22c>
   be864:	461e      	mov	r6, r3
   be866:	e78b      	b.n	be780 <__gethex+0x198>
   be868:	f04f 0a03 	mov.w	sl, #3
   be86c:	e7b8      	b.n	be7e0 <__gethex+0x1f8>
   be86e:	da0a      	bge.n	be886 <__gethex+0x29e>
   be870:	1a37      	subs	r7, r6, r0
   be872:	4621      	mov	r1, r4
   be874:	ee18 0a10 	vmov	r0, s16
   be878:	463a      	mov	r2, r7
   be87a:	f000 fc2f 	bl	bf0dc <__lshift>
   be87e:	1bed      	subs	r5, r5, r7
   be880:	4604      	mov	r4, r0
   be882:	f100 0914 	add.w	r9, r0, #20
   be886:	f04f 0a00 	mov.w	sl, #0
   be88a:	e7ae      	b.n	be7ea <__gethex+0x202>
   be88c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   be890:	42a8      	cmp	r0, r5
   be892:	dd72      	ble.n	be97a <__gethex+0x392>
   be894:	1b45      	subs	r5, r0, r5
   be896:	42ae      	cmp	r6, r5
   be898:	dc36      	bgt.n	be908 <__gethex+0x320>
   be89a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   be89e:	2b02      	cmp	r3, #2
   be8a0:	d02a      	beq.n	be8f8 <__gethex+0x310>
   be8a2:	2b03      	cmp	r3, #3
   be8a4:	d02c      	beq.n	be900 <__gethex+0x318>
   be8a6:	2b01      	cmp	r3, #1
   be8a8:	d11c      	bne.n	be8e4 <__gethex+0x2fc>
   be8aa:	42ae      	cmp	r6, r5
   be8ac:	d11a      	bne.n	be8e4 <__gethex+0x2fc>
   be8ae:	2e01      	cmp	r6, #1
   be8b0:	d112      	bne.n	be8d8 <__gethex+0x2f0>
   be8b2:	9a04      	ldr	r2, [sp, #16]
   be8b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   be8b8:	6013      	str	r3, [r2, #0]
   be8ba:	2301      	movs	r3, #1
   be8bc:	6123      	str	r3, [r4, #16]
   be8be:	f8c9 3000 	str.w	r3, [r9]
   be8c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   be8c4:	2762      	movs	r7, #98	; 0x62
   be8c6:	601c      	str	r4, [r3, #0]
   be8c8:	e723      	b.n	be712 <__gethex+0x12a>
   be8ca:	bf00      	nop
   be8cc:	000c0880 	.word	0x000c0880
   be8d0:	000c07e7 	.word	0x000c07e7
   be8d4:	000c07f8 	.word	0x000c07f8
   be8d8:	1e71      	subs	r1, r6, #1
   be8da:	4620      	mov	r0, r4
   be8dc:	f000 fe42 	bl	bf564 <__any_on>
   be8e0:	2800      	cmp	r0, #0
   be8e2:	d1e6      	bne.n	be8b2 <__gethex+0x2ca>
   be8e4:	ee18 0a10 	vmov	r0, s16
   be8e8:	4621      	mov	r1, r4
   be8ea:	f000 f9db 	bl	beca4 <_Bfree>
   be8ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   be8f0:	2300      	movs	r3, #0
   be8f2:	6013      	str	r3, [r2, #0]
   be8f4:	2750      	movs	r7, #80	; 0x50
   be8f6:	e70c      	b.n	be712 <__gethex+0x12a>
   be8f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be8fa:	2b00      	cmp	r3, #0
   be8fc:	d1f2      	bne.n	be8e4 <__gethex+0x2fc>
   be8fe:	e7d8      	b.n	be8b2 <__gethex+0x2ca>
   be900:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be902:	2b00      	cmp	r3, #0
   be904:	d1d5      	bne.n	be8b2 <__gethex+0x2ca>
   be906:	e7ed      	b.n	be8e4 <__gethex+0x2fc>
   be908:	1e6f      	subs	r7, r5, #1
   be90a:	f1ba 0f00 	cmp.w	sl, #0
   be90e:	d131      	bne.n	be974 <__gethex+0x38c>
   be910:	b127      	cbz	r7, be91c <__gethex+0x334>
   be912:	4639      	mov	r1, r7
   be914:	4620      	mov	r0, r4
   be916:	f000 fe25 	bl	bf564 <__any_on>
   be91a:	4682      	mov	sl, r0
   be91c:	117b      	asrs	r3, r7, #5
   be91e:	2101      	movs	r1, #1
   be920:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   be924:	f007 071f 	and.w	r7, r7, #31
   be928:	fa01 f707 	lsl.w	r7, r1, r7
   be92c:	421f      	tst	r7, r3
   be92e:	4629      	mov	r1, r5
   be930:	4620      	mov	r0, r4
   be932:	bf18      	it	ne
   be934:	f04a 0a02 	orrne.w	sl, sl, #2
   be938:	1b76      	subs	r6, r6, r5
   be93a:	f7ff fded 	bl	be518 <rshift>
   be93e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   be942:	2702      	movs	r7, #2
   be944:	f1ba 0f00 	cmp.w	sl, #0
   be948:	d048      	beq.n	be9dc <__gethex+0x3f4>
   be94a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   be94e:	2b02      	cmp	r3, #2
   be950:	d015      	beq.n	be97e <__gethex+0x396>
   be952:	2b03      	cmp	r3, #3
   be954:	d017      	beq.n	be986 <__gethex+0x39e>
   be956:	2b01      	cmp	r3, #1
   be958:	d109      	bne.n	be96e <__gethex+0x386>
   be95a:	f01a 0f02 	tst.w	sl, #2
   be95e:	d006      	beq.n	be96e <__gethex+0x386>
   be960:	f8d9 0000 	ldr.w	r0, [r9]
   be964:	ea4a 0a00 	orr.w	sl, sl, r0
   be968:	f01a 0f01 	tst.w	sl, #1
   be96c:	d10e      	bne.n	be98c <__gethex+0x3a4>
   be96e:	f047 0710 	orr.w	r7, r7, #16
   be972:	e033      	b.n	be9dc <__gethex+0x3f4>
   be974:	f04f 0a01 	mov.w	sl, #1
   be978:	e7d0      	b.n	be91c <__gethex+0x334>
   be97a:	2701      	movs	r7, #1
   be97c:	e7e2      	b.n	be944 <__gethex+0x35c>
   be97e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be980:	f1c3 0301 	rsb	r3, r3, #1
   be984:	9315      	str	r3, [sp, #84]	; 0x54
   be986:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be988:	2b00      	cmp	r3, #0
   be98a:	d0f0      	beq.n	be96e <__gethex+0x386>
   be98c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   be990:	f104 0314 	add.w	r3, r4, #20
   be994:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   be998:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   be99c:	f04f 0c00 	mov.w	ip, #0
   be9a0:	4618      	mov	r0, r3
   be9a2:	f853 2b04 	ldr.w	r2, [r3], #4
   be9a6:	f1b2 3fff 	cmp.w	r2, #4294967295
   be9aa:	d01c      	beq.n	be9e6 <__gethex+0x3fe>
   be9ac:	3201      	adds	r2, #1
   be9ae:	6002      	str	r2, [r0, #0]
   be9b0:	2f02      	cmp	r7, #2
   be9b2:	f104 0314 	add.w	r3, r4, #20
   be9b6:	d13f      	bne.n	bea38 <__gethex+0x450>
   be9b8:	f8d8 2000 	ldr.w	r2, [r8]
   be9bc:	3a01      	subs	r2, #1
   be9be:	42b2      	cmp	r2, r6
   be9c0:	d10a      	bne.n	be9d8 <__gethex+0x3f0>
   be9c2:	1171      	asrs	r1, r6, #5
   be9c4:	2201      	movs	r2, #1
   be9c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   be9ca:	f006 061f 	and.w	r6, r6, #31
   be9ce:	fa02 f606 	lsl.w	r6, r2, r6
   be9d2:	421e      	tst	r6, r3
   be9d4:	bf18      	it	ne
   be9d6:	4617      	movne	r7, r2
   be9d8:	f047 0720 	orr.w	r7, r7, #32
   be9dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   be9de:	601c      	str	r4, [r3, #0]
   be9e0:	9b04      	ldr	r3, [sp, #16]
   be9e2:	601d      	str	r5, [r3, #0]
   be9e4:	e695      	b.n	be712 <__gethex+0x12a>
   be9e6:	4299      	cmp	r1, r3
   be9e8:	f843 cc04 	str.w	ip, [r3, #-4]
   be9ec:	d8d8      	bhi.n	be9a0 <__gethex+0x3b8>
   be9ee:	68a3      	ldr	r3, [r4, #8]
   be9f0:	459b      	cmp	fp, r3
   be9f2:	db19      	blt.n	bea28 <__gethex+0x440>
   be9f4:	6861      	ldr	r1, [r4, #4]
   be9f6:	ee18 0a10 	vmov	r0, s16
   be9fa:	3101      	adds	r1, #1
   be9fc:	f000 f912 	bl	bec24 <_Balloc>
   bea00:	4681      	mov	r9, r0
   bea02:	b918      	cbnz	r0, bea0c <__gethex+0x424>
   bea04:	4b1a      	ldr	r3, [pc, #104]	; (bea70 <__gethex+0x488>)
   bea06:	4602      	mov	r2, r0
   bea08:	2184      	movs	r1, #132	; 0x84
   bea0a:	e6a8      	b.n	be75e <__gethex+0x176>
   bea0c:	6922      	ldr	r2, [r4, #16]
   bea0e:	3202      	adds	r2, #2
   bea10:	f104 010c 	add.w	r1, r4, #12
   bea14:	0092      	lsls	r2, r2, #2
   bea16:	300c      	adds	r0, #12
   bea18:	f7fe fcbd 	bl	bd396 <memcpy>
   bea1c:	4621      	mov	r1, r4
   bea1e:	ee18 0a10 	vmov	r0, s16
   bea22:	f000 f93f 	bl	beca4 <_Bfree>
   bea26:	464c      	mov	r4, r9
   bea28:	6923      	ldr	r3, [r4, #16]
   bea2a:	1c5a      	adds	r2, r3, #1
   bea2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bea30:	6122      	str	r2, [r4, #16]
   bea32:	2201      	movs	r2, #1
   bea34:	615a      	str	r2, [r3, #20]
   bea36:	e7bb      	b.n	be9b0 <__gethex+0x3c8>
   bea38:	6922      	ldr	r2, [r4, #16]
   bea3a:	455a      	cmp	r2, fp
   bea3c:	dd0b      	ble.n	bea56 <__gethex+0x46e>
   bea3e:	2101      	movs	r1, #1
   bea40:	4620      	mov	r0, r4
   bea42:	f7ff fd69 	bl	be518 <rshift>
   bea46:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bea4a:	3501      	adds	r5, #1
   bea4c:	42ab      	cmp	r3, r5
   bea4e:	f6ff aed0 	blt.w	be7f2 <__gethex+0x20a>
   bea52:	2701      	movs	r7, #1
   bea54:	e7c0      	b.n	be9d8 <__gethex+0x3f0>
   bea56:	f016 061f 	ands.w	r6, r6, #31
   bea5a:	d0fa      	beq.n	bea52 <__gethex+0x46a>
   bea5c:	4453      	add	r3, sl
   bea5e:	f1c6 0620 	rsb	r6, r6, #32
   bea62:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bea66:	f000 f9cf 	bl	bee08 <__hi0bits>
   bea6a:	42b0      	cmp	r0, r6
   bea6c:	dbe7      	blt.n	bea3e <__gethex+0x456>
   bea6e:	e7f0      	b.n	bea52 <__gethex+0x46a>
   bea70:	000c07e7 	.word	0x000c07e7

000bea74 <L_shift>:
   bea74:	f1c2 0208 	rsb	r2, r2, #8
   bea78:	0092      	lsls	r2, r2, #2
   bea7a:	b570      	push	{r4, r5, r6, lr}
   bea7c:	f1c2 0620 	rsb	r6, r2, #32
   bea80:	6843      	ldr	r3, [r0, #4]
   bea82:	6804      	ldr	r4, [r0, #0]
   bea84:	fa03 f506 	lsl.w	r5, r3, r6
   bea88:	432c      	orrs	r4, r5
   bea8a:	40d3      	lsrs	r3, r2
   bea8c:	6004      	str	r4, [r0, #0]
   bea8e:	f840 3f04 	str.w	r3, [r0, #4]!
   bea92:	4288      	cmp	r0, r1
   bea94:	d3f4      	bcc.n	bea80 <L_shift+0xc>
   bea96:	bd70      	pop	{r4, r5, r6, pc}

000bea98 <__match>:
   bea98:	b530      	push	{r4, r5, lr}
   bea9a:	6803      	ldr	r3, [r0, #0]
   bea9c:	3301      	adds	r3, #1
   bea9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   beaa2:	b914      	cbnz	r4, beaaa <__match+0x12>
   beaa4:	6003      	str	r3, [r0, #0]
   beaa6:	2001      	movs	r0, #1
   beaa8:	bd30      	pop	{r4, r5, pc}
   beaaa:	f813 2b01 	ldrb.w	r2, [r3], #1
   beaae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   beab2:	2d19      	cmp	r5, #25
   beab4:	bf98      	it	ls
   beab6:	3220      	addls	r2, #32
   beab8:	42a2      	cmp	r2, r4
   beaba:	d0f0      	beq.n	bea9e <__match+0x6>
   beabc:	2000      	movs	r0, #0
   beabe:	e7f3      	b.n	beaa8 <__match+0x10>

000beac0 <__hexnan>:
   beac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beac4:	680b      	ldr	r3, [r1, #0]
   beac6:	115e      	asrs	r6, r3, #5
   beac8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   beacc:	f013 031f 	ands.w	r3, r3, #31
   bead0:	b087      	sub	sp, #28
   bead2:	bf18      	it	ne
   bead4:	3604      	addne	r6, #4
   bead6:	2500      	movs	r5, #0
   bead8:	1f37      	subs	r7, r6, #4
   beada:	4690      	mov	r8, r2
   beadc:	6802      	ldr	r2, [r0, #0]
   beade:	9301      	str	r3, [sp, #4]
   beae0:	4682      	mov	sl, r0
   beae2:	f846 5c04 	str.w	r5, [r6, #-4]
   beae6:	46b9      	mov	r9, r7
   beae8:	463c      	mov	r4, r7
   beaea:	9502      	str	r5, [sp, #8]
   beaec:	46ab      	mov	fp, r5
   beaee:	7851      	ldrb	r1, [r2, #1]
   beaf0:	1c53      	adds	r3, r2, #1
   beaf2:	9303      	str	r3, [sp, #12]
   beaf4:	b341      	cbz	r1, beb48 <__hexnan+0x88>
   beaf6:	4608      	mov	r0, r1
   beaf8:	9205      	str	r2, [sp, #20]
   beafa:	9104      	str	r1, [sp, #16]
   beafc:	f7ff fd5e 	bl	be5bc <__hexdig_fun>
   beb00:	2800      	cmp	r0, #0
   beb02:	d14f      	bne.n	beba4 <__hexnan+0xe4>
   beb04:	9904      	ldr	r1, [sp, #16]
   beb06:	9a05      	ldr	r2, [sp, #20]
   beb08:	2920      	cmp	r1, #32
   beb0a:	d818      	bhi.n	beb3e <__hexnan+0x7e>
   beb0c:	9b02      	ldr	r3, [sp, #8]
   beb0e:	459b      	cmp	fp, r3
   beb10:	dd13      	ble.n	beb3a <__hexnan+0x7a>
   beb12:	454c      	cmp	r4, r9
   beb14:	d206      	bcs.n	beb24 <__hexnan+0x64>
   beb16:	2d07      	cmp	r5, #7
   beb18:	dc04      	bgt.n	beb24 <__hexnan+0x64>
   beb1a:	462a      	mov	r2, r5
   beb1c:	4649      	mov	r1, r9
   beb1e:	4620      	mov	r0, r4
   beb20:	f7ff ffa8 	bl	bea74 <L_shift>
   beb24:	4544      	cmp	r4, r8
   beb26:	d950      	bls.n	bebca <__hexnan+0x10a>
   beb28:	2300      	movs	r3, #0
   beb2a:	f1a4 0904 	sub.w	r9, r4, #4
   beb2e:	f844 3c04 	str.w	r3, [r4, #-4]
   beb32:	f8cd b008 	str.w	fp, [sp, #8]
   beb36:	464c      	mov	r4, r9
   beb38:	461d      	mov	r5, r3
   beb3a:	9a03      	ldr	r2, [sp, #12]
   beb3c:	e7d7      	b.n	beaee <__hexnan+0x2e>
   beb3e:	2929      	cmp	r1, #41	; 0x29
   beb40:	d156      	bne.n	bebf0 <__hexnan+0x130>
   beb42:	3202      	adds	r2, #2
   beb44:	f8ca 2000 	str.w	r2, [sl]
   beb48:	f1bb 0f00 	cmp.w	fp, #0
   beb4c:	d050      	beq.n	bebf0 <__hexnan+0x130>
   beb4e:	454c      	cmp	r4, r9
   beb50:	d206      	bcs.n	beb60 <__hexnan+0xa0>
   beb52:	2d07      	cmp	r5, #7
   beb54:	dc04      	bgt.n	beb60 <__hexnan+0xa0>
   beb56:	462a      	mov	r2, r5
   beb58:	4649      	mov	r1, r9
   beb5a:	4620      	mov	r0, r4
   beb5c:	f7ff ff8a 	bl	bea74 <L_shift>
   beb60:	4544      	cmp	r4, r8
   beb62:	d934      	bls.n	bebce <__hexnan+0x10e>
   beb64:	f1a8 0204 	sub.w	r2, r8, #4
   beb68:	4623      	mov	r3, r4
   beb6a:	f853 1b04 	ldr.w	r1, [r3], #4
   beb6e:	f842 1f04 	str.w	r1, [r2, #4]!
   beb72:	429f      	cmp	r7, r3
   beb74:	d2f9      	bcs.n	beb6a <__hexnan+0xaa>
   beb76:	1b3b      	subs	r3, r7, r4
   beb78:	f023 0303 	bic.w	r3, r3, #3
   beb7c:	3304      	adds	r3, #4
   beb7e:	3401      	adds	r4, #1
   beb80:	3e03      	subs	r6, #3
   beb82:	42b4      	cmp	r4, r6
   beb84:	bf88      	it	hi
   beb86:	2304      	movhi	r3, #4
   beb88:	4443      	add	r3, r8
   beb8a:	2200      	movs	r2, #0
   beb8c:	f843 2b04 	str.w	r2, [r3], #4
   beb90:	429f      	cmp	r7, r3
   beb92:	d2fb      	bcs.n	beb8c <__hexnan+0xcc>
   beb94:	683b      	ldr	r3, [r7, #0]
   beb96:	b91b      	cbnz	r3, beba0 <__hexnan+0xe0>
   beb98:	4547      	cmp	r7, r8
   beb9a:	d127      	bne.n	bebec <__hexnan+0x12c>
   beb9c:	2301      	movs	r3, #1
   beb9e:	603b      	str	r3, [r7, #0]
   beba0:	2005      	movs	r0, #5
   beba2:	e026      	b.n	bebf2 <__hexnan+0x132>
   beba4:	3501      	adds	r5, #1
   beba6:	2d08      	cmp	r5, #8
   beba8:	f10b 0b01 	add.w	fp, fp, #1
   bebac:	dd06      	ble.n	bebbc <__hexnan+0xfc>
   bebae:	4544      	cmp	r4, r8
   bebb0:	d9c3      	bls.n	beb3a <__hexnan+0x7a>
   bebb2:	2300      	movs	r3, #0
   bebb4:	f844 3c04 	str.w	r3, [r4, #-4]
   bebb8:	2501      	movs	r5, #1
   bebba:	3c04      	subs	r4, #4
   bebbc:	6822      	ldr	r2, [r4, #0]
   bebbe:	f000 000f 	and.w	r0, r0, #15
   bebc2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bebc6:	6022      	str	r2, [r4, #0]
   bebc8:	e7b7      	b.n	beb3a <__hexnan+0x7a>
   bebca:	2508      	movs	r5, #8
   bebcc:	e7b5      	b.n	beb3a <__hexnan+0x7a>
   bebce:	9b01      	ldr	r3, [sp, #4]
   bebd0:	2b00      	cmp	r3, #0
   bebd2:	d0df      	beq.n	beb94 <__hexnan+0xd4>
   bebd4:	f04f 32ff 	mov.w	r2, #4294967295
   bebd8:	f1c3 0320 	rsb	r3, r3, #32
   bebdc:	fa22 f303 	lsr.w	r3, r2, r3
   bebe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bebe4:	401a      	ands	r2, r3
   bebe6:	f846 2c04 	str.w	r2, [r6, #-4]
   bebea:	e7d3      	b.n	beb94 <__hexnan+0xd4>
   bebec:	3f04      	subs	r7, #4
   bebee:	e7d1      	b.n	beb94 <__hexnan+0xd4>
   bebf0:	2004      	movs	r0, #4
   bebf2:	b007      	add	sp, #28
   bebf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bebf8 <__retarget_lock_acquire_recursive>:
   bebf8:	4770      	bx	lr

000bebfa <__retarget_lock_release>:
   bebfa:	4770      	bx	lr

000bebfc <__retarget_lock_release_recursive>:
   bebfc:	4770      	bx	lr

000bebfe <__ascii_mbtowc>:
   bebfe:	b082      	sub	sp, #8
   bec00:	b901      	cbnz	r1, bec04 <__ascii_mbtowc+0x6>
   bec02:	a901      	add	r1, sp, #4
   bec04:	b142      	cbz	r2, bec18 <__ascii_mbtowc+0x1a>
   bec06:	b14b      	cbz	r3, bec1c <__ascii_mbtowc+0x1e>
   bec08:	7813      	ldrb	r3, [r2, #0]
   bec0a:	600b      	str	r3, [r1, #0]
   bec0c:	7812      	ldrb	r2, [r2, #0]
   bec0e:	1e10      	subs	r0, r2, #0
   bec10:	bf18      	it	ne
   bec12:	2001      	movne	r0, #1
   bec14:	b002      	add	sp, #8
   bec16:	4770      	bx	lr
   bec18:	4610      	mov	r0, r2
   bec1a:	e7fb      	b.n	bec14 <__ascii_mbtowc+0x16>
   bec1c:	f06f 0001 	mvn.w	r0, #1
   bec20:	e7f8      	b.n	bec14 <__ascii_mbtowc+0x16>
	...

000bec24 <_Balloc>:
   bec24:	b570      	push	{r4, r5, r6, lr}
   bec26:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bec28:	4604      	mov	r4, r0
   bec2a:	460d      	mov	r5, r1
   bec2c:	b976      	cbnz	r6, bec4c <_Balloc+0x28>
   bec2e:	2010      	movs	r0, #16
   bec30:	f7fa fc74 	bl	b951c <malloc>
   bec34:	4602      	mov	r2, r0
   bec36:	6260      	str	r0, [r4, #36]	; 0x24
   bec38:	b920      	cbnz	r0, bec44 <_Balloc+0x20>
   bec3a:	4b18      	ldr	r3, [pc, #96]	; (bec9c <_Balloc+0x78>)
   bec3c:	4818      	ldr	r0, [pc, #96]	; (beca0 <_Balloc+0x7c>)
   bec3e:	2166      	movs	r1, #102	; 0x66
   bec40:	f7fa fcc4 	bl	b95cc <__assert_func>
   bec44:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bec48:	6006      	str	r6, [r0, #0]
   bec4a:	60c6      	str	r6, [r0, #12]
   bec4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bec4e:	68f3      	ldr	r3, [r6, #12]
   bec50:	b183      	cbz	r3, bec74 <_Balloc+0x50>
   bec52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bec54:	68db      	ldr	r3, [r3, #12]
   bec56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bec5a:	b9b8      	cbnz	r0, bec8c <_Balloc+0x68>
   bec5c:	2101      	movs	r1, #1
   bec5e:	fa01 f605 	lsl.w	r6, r1, r5
   bec62:	1d72      	adds	r2, r6, #5
   bec64:	0092      	lsls	r2, r2, #2
   bec66:	4620      	mov	r0, r4
   bec68:	f000 fc9d 	bl	bf5a6 <_calloc_r>
   bec6c:	b160      	cbz	r0, bec88 <_Balloc+0x64>
   bec6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bec72:	e00e      	b.n	bec92 <_Balloc+0x6e>
   bec74:	2221      	movs	r2, #33	; 0x21
   bec76:	2104      	movs	r1, #4
   bec78:	4620      	mov	r0, r4
   bec7a:	f000 fc94 	bl	bf5a6 <_calloc_r>
   bec7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bec80:	60f0      	str	r0, [r6, #12]
   bec82:	68db      	ldr	r3, [r3, #12]
   bec84:	2b00      	cmp	r3, #0
   bec86:	d1e4      	bne.n	bec52 <_Balloc+0x2e>
   bec88:	2000      	movs	r0, #0
   bec8a:	bd70      	pop	{r4, r5, r6, pc}
   bec8c:	6802      	ldr	r2, [r0, #0]
   bec8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bec92:	2300      	movs	r3, #0
   bec94:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bec98:	e7f7      	b.n	bec8a <_Balloc+0x66>
   bec9a:	bf00      	nop
   bec9c:	000c067b 	.word	0x000c067b
   beca0:	000c0894 	.word	0x000c0894

000beca4 <_Bfree>:
   beca4:	b570      	push	{r4, r5, r6, lr}
   beca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   beca8:	4605      	mov	r5, r0
   becaa:	460c      	mov	r4, r1
   becac:	b976      	cbnz	r6, beccc <_Bfree+0x28>
   becae:	2010      	movs	r0, #16
   becb0:	f7fa fc34 	bl	b951c <malloc>
   becb4:	4602      	mov	r2, r0
   becb6:	6268      	str	r0, [r5, #36]	; 0x24
   becb8:	b920      	cbnz	r0, becc4 <_Bfree+0x20>
   becba:	4b09      	ldr	r3, [pc, #36]	; (bece0 <_Bfree+0x3c>)
   becbc:	4809      	ldr	r0, [pc, #36]	; (bece4 <_Bfree+0x40>)
   becbe:	218a      	movs	r1, #138	; 0x8a
   becc0:	f7fa fc84 	bl	b95cc <__assert_func>
   becc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   becc8:	6006      	str	r6, [r0, #0]
   becca:	60c6      	str	r6, [r0, #12]
   beccc:	b13c      	cbz	r4, becde <_Bfree+0x3a>
   becce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   becd0:	6862      	ldr	r2, [r4, #4]
   becd2:	68db      	ldr	r3, [r3, #12]
   becd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   becd8:	6021      	str	r1, [r4, #0]
   becda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   becde:	bd70      	pop	{r4, r5, r6, pc}
   bece0:	000c067b 	.word	0x000c067b
   bece4:	000c0894 	.word	0x000c0894

000bece8 <__multadd>:
   bece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   becec:	690d      	ldr	r5, [r1, #16]
   becee:	4607      	mov	r7, r0
   becf0:	460c      	mov	r4, r1
   becf2:	461e      	mov	r6, r3
   becf4:	f101 0c14 	add.w	ip, r1, #20
   becf8:	2000      	movs	r0, #0
   becfa:	f8dc 3000 	ldr.w	r3, [ip]
   becfe:	b299      	uxth	r1, r3
   bed00:	fb02 6101 	mla	r1, r2, r1, r6
   bed04:	0c1e      	lsrs	r6, r3, #16
   bed06:	0c0b      	lsrs	r3, r1, #16
   bed08:	fb02 3306 	mla	r3, r2, r6, r3
   bed0c:	b289      	uxth	r1, r1
   bed0e:	3001      	adds	r0, #1
   bed10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bed14:	4285      	cmp	r5, r0
   bed16:	f84c 1b04 	str.w	r1, [ip], #4
   bed1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bed1e:	dcec      	bgt.n	becfa <__multadd+0x12>
   bed20:	b30e      	cbz	r6, bed66 <__multadd+0x7e>
   bed22:	68a3      	ldr	r3, [r4, #8]
   bed24:	42ab      	cmp	r3, r5
   bed26:	dc19      	bgt.n	bed5c <__multadd+0x74>
   bed28:	6861      	ldr	r1, [r4, #4]
   bed2a:	4638      	mov	r0, r7
   bed2c:	3101      	adds	r1, #1
   bed2e:	f7ff ff79 	bl	bec24 <_Balloc>
   bed32:	4680      	mov	r8, r0
   bed34:	b928      	cbnz	r0, bed42 <__multadd+0x5a>
   bed36:	4602      	mov	r2, r0
   bed38:	4b0c      	ldr	r3, [pc, #48]	; (bed6c <__multadd+0x84>)
   bed3a:	480d      	ldr	r0, [pc, #52]	; (bed70 <__multadd+0x88>)
   bed3c:	21b5      	movs	r1, #181	; 0xb5
   bed3e:	f7fa fc45 	bl	b95cc <__assert_func>
   bed42:	6922      	ldr	r2, [r4, #16]
   bed44:	3202      	adds	r2, #2
   bed46:	f104 010c 	add.w	r1, r4, #12
   bed4a:	0092      	lsls	r2, r2, #2
   bed4c:	300c      	adds	r0, #12
   bed4e:	f7fe fb22 	bl	bd396 <memcpy>
   bed52:	4621      	mov	r1, r4
   bed54:	4638      	mov	r0, r7
   bed56:	f7ff ffa5 	bl	beca4 <_Bfree>
   bed5a:	4644      	mov	r4, r8
   bed5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bed60:	3501      	adds	r5, #1
   bed62:	615e      	str	r6, [r3, #20]
   bed64:	6125      	str	r5, [r4, #16]
   bed66:	4620      	mov	r0, r4
   bed68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bed6c:	000c07e7 	.word	0x000c07e7
   bed70:	000c0894 	.word	0x000c0894

000bed74 <__s2b>:
   bed74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bed78:	460c      	mov	r4, r1
   bed7a:	4615      	mov	r5, r2
   bed7c:	461f      	mov	r7, r3
   bed7e:	2209      	movs	r2, #9
   bed80:	3308      	adds	r3, #8
   bed82:	4606      	mov	r6, r0
   bed84:	fb93 f3f2 	sdiv	r3, r3, r2
   bed88:	2100      	movs	r1, #0
   bed8a:	2201      	movs	r2, #1
   bed8c:	429a      	cmp	r2, r3
   bed8e:	db09      	blt.n	beda4 <__s2b+0x30>
   bed90:	4630      	mov	r0, r6
   bed92:	f7ff ff47 	bl	bec24 <_Balloc>
   bed96:	b940      	cbnz	r0, bedaa <__s2b+0x36>
   bed98:	4602      	mov	r2, r0
   bed9a:	4b19      	ldr	r3, [pc, #100]	; (bee00 <__s2b+0x8c>)
   bed9c:	4819      	ldr	r0, [pc, #100]	; (bee04 <__s2b+0x90>)
   bed9e:	21ce      	movs	r1, #206	; 0xce
   beda0:	f7fa fc14 	bl	b95cc <__assert_func>
   beda4:	0052      	lsls	r2, r2, #1
   beda6:	3101      	adds	r1, #1
   beda8:	e7f0      	b.n	bed8c <__s2b+0x18>
   bedaa:	9b08      	ldr	r3, [sp, #32]
   bedac:	6143      	str	r3, [r0, #20]
   bedae:	2d09      	cmp	r5, #9
   bedb0:	f04f 0301 	mov.w	r3, #1
   bedb4:	6103      	str	r3, [r0, #16]
   bedb6:	dd16      	ble.n	bede6 <__s2b+0x72>
   bedb8:	f104 0909 	add.w	r9, r4, #9
   bedbc:	46c8      	mov	r8, r9
   bedbe:	442c      	add	r4, r5
   bedc0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bedc4:	4601      	mov	r1, r0
   bedc6:	3b30      	subs	r3, #48	; 0x30
   bedc8:	220a      	movs	r2, #10
   bedca:	4630      	mov	r0, r6
   bedcc:	f7ff ff8c 	bl	bece8 <__multadd>
   bedd0:	45a0      	cmp	r8, r4
   bedd2:	d1f5      	bne.n	bedc0 <__s2b+0x4c>
   bedd4:	f1a5 0408 	sub.w	r4, r5, #8
   bedd8:	444c      	add	r4, r9
   bedda:	1b2d      	subs	r5, r5, r4
   beddc:	1963      	adds	r3, r4, r5
   bedde:	42bb      	cmp	r3, r7
   bede0:	db04      	blt.n	bedec <__s2b+0x78>
   bede2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bede6:	340a      	adds	r4, #10
   bede8:	2509      	movs	r5, #9
   bedea:	e7f6      	b.n	bedda <__s2b+0x66>
   bedec:	f814 3b01 	ldrb.w	r3, [r4], #1
   bedf0:	4601      	mov	r1, r0
   bedf2:	3b30      	subs	r3, #48	; 0x30
   bedf4:	220a      	movs	r2, #10
   bedf6:	4630      	mov	r0, r6
   bedf8:	f7ff ff76 	bl	bece8 <__multadd>
   bedfc:	e7ee      	b.n	beddc <__s2b+0x68>
   bedfe:	bf00      	nop
   bee00:	000c07e7 	.word	0x000c07e7
   bee04:	000c0894 	.word	0x000c0894

000bee08 <__hi0bits>:
   bee08:	0c03      	lsrs	r3, r0, #16
   bee0a:	041b      	lsls	r3, r3, #16
   bee0c:	b9d3      	cbnz	r3, bee44 <__hi0bits+0x3c>
   bee0e:	0400      	lsls	r0, r0, #16
   bee10:	2310      	movs	r3, #16
   bee12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bee16:	bf04      	itt	eq
   bee18:	0200      	lsleq	r0, r0, #8
   bee1a:	3308      	addeq	r3, #8
   bee1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bee20:	bf04      	itt	eq
   bee22:	0100      	lsleq	r0, r0, #4
   bee24:	3304      	addeq	r3, #4
   bee26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bee2a:	bf04      	itt	eq
   bee2c:	0080      	lsleq	r0, r0, #2
   bee2e:	3302      	addeq	r3, #2
   bee30:	2800      	cmp	r0, #0
   bee32:	db05      	blt.n	bee40 <__hi0bits+0x38>
   bee34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bee38:	f103 0301 	add.w	r3, r3, #1
   bee3c:	bf08      	it	eq
   bee3e:	2320      	moveq	r3, #32
   bee40:	4618      	mov	r0, r3
   bee42:	4770      	bx	lr
   bee44:	2300      	movs	r3, #0
   bee46:	e7e4      	b.n	bee12 <__hi0bits+0xa>

000bee48 <__lo0bits>:
   bee48:	6803      	ldr	r3, [r0, #0]
   bee4a:	f013 0207 	ands.w	r2, r3, #7
   bee4e:	4601      	mov	r1, r0
   bee50:	d00b      	beq.n	bee6a <__lo0bits+0x22>
   bee52:	07da      	lsls	r2, r3, #31
   bee54:	d423      	bmi.n	bee9e <__lo0bits+0x56>
   bee56:	0798      	lsls	r0, r3, #30
   bee58:	bf49      	itett	mi
   bee5a:	085b      	lsrmi	r3, r3, #1
   bee5c:	089b      	lsrpl	r3, r3, #2
   bee5e:	2001      	movmi	r0, #1
   bee60:	600b      	strmi	r3, [r1, #0]
   bee62:	bf5c      	itt	pl
   bee64:	600b      	strpl	r3, [r1, #0]
   bee66:	2002      	movpl	r0, #2
   bee68:	4770      	bx	lr
   bee6a:	b298      	uxth	r0, r3
   bee6c:	b9a8      	cbnz	r0, bee9a <__lo0bits+0x52>
   bee6e:	0c1b      	lsrs	r3, r3, #16
   bee70:	2010      	movs	r0, #16
   bee72:	b2da      	uxtb	r2, r3
   bee74:	b90a      	cbnz	r2, bee7a <__lo0bits+0x32>
   bee76:	3008      	adds	r0, #8
   bee78:	0a1b      	lsrs	r3, r3, #8
   bee7a:	071a      	lsls	r2, r3, #28
   bee7c:	bf04      	itt	eq
   bee7e:	091b      	lsreq	r3, r3, #4
   bee80:	3004      	addeq	r0, #4
   bee82:	079a      	lsls	r2, r3, #30
   bee84:	bf04      	itt	eq
   bee86:	089b      	lsreq	r3, r3, #2
   bee88:	3002      	addeq	r0, #2
   bee8a:	07da      	lsls	r2, r3, #31
   bee8c:	d403      	bmi.n	bee96 <__lo0bits+0x4e>
   bee8e:	085b      	lsrs	r3, r3, #1
   bee90:	f100 0001 	add.w	r0, r0, #1
   bee94:	d005      	beq.n	beea2 <__lo0bits+0x5a>
   bee96:	600b      	str	r3, [r1, #0]
   bee98:	4770      	bx	lr
   bee9a:	4610      	mov	r0, r2
   bee9c:	e7e9      	b.n	bee72 <__lo0bits+0x2a>
   bee9e:	2000      	movs	r0, #0
   beea0:	4770      	bx	lr
   beea2:	2020      	movs	r0, #32
   beea4:	4770      	bx	lr
	...

000beea8 <__i2b>:
   beea8:	b510      	push	{r4, lr}
   beeaa:	460c      	mov	r4, r1
   beeac:	2101      	movs	r1, #1
   beeae:	f7ff feb9 	bl	bec24 <_Balloc>
   beeb2:	4602      	mov	r2, r0
   beeb4:	b928      	cbnz	r0, beec2 <__i2b+0x1a>
   beeb6:	4b05      	ldr	r3, [pc, #20]	; (beecc <__i2b+0x24>)
   beeb8:	4805      	ldr	r0, [pc, #20]	; (beed0 <__i2b+0x28>)
   beeba:	f44f 71a0 	mov.w	r1, #320	; 0x140
   beebe:	f7fa fb85 	bl	b95cc <__assert_func>
   beec2:	2301      	movs	r3, #1
   beec4:	6144      	str	r4, [r0, #20]
   beec6:	6103      	str	r3, [r0, #16]
   beec8:	bd10      	pop	{r4, pc}
   beeca:	bf00      	nop
   beecc:	000c07e7 	.word	0x000c07e7
   beed0:	000c0894 	.word	0x000c0894

000beed4 <__multiply>:
   beed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beed8:	4691      	mov	r9, r2
   beeda:	690a      	ldr	r2, [r1, #16]
   beedc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   beee0:	429a      	cmp	r2, r3
   beee2:	bfb8      	it	lt
   beee4:	460b      	movlt	r3, r1
   beee6:	460c      	mov	r4, r1
   beee8:	bfbc      	itt	lt
   beeea:	464c      	movlt	r4, r9
   beeec:	4699      	movlt	r9, r3
   beeee:	6927      	ldr	r7, [r4, #16]
   beef0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   beef4:	68a3      	ldr	r3, [r4, #8]
   beef6:	6861      	ldr	r1, [r4, #4]
   beef8:	eb07 060a 	add.w	r6, r7, sl
   beefc:	42b3      	cmp	r3, r6
   beefe:	b085      	sub	sp, #20
   bef00:	bfb8      	it	lt
   bef02:	3101      	addlt	r1, #1
   bef04:	f7ff fe8e 	bl	bec24 <_Balloc>
   bef08:	b930      	cbnz	r0, bef18 <__multiply+0x44>
   bef0a:	4602      	mov	r2, r0
   bef0c:	4b44      	ldr	r3, [pc, #272]	; (bf020 <__multiply+0x14c>)
   bef0e:	4845      	ldr	r0, [pc, #276]	; (bf024 <__multiply+0x150>)
   bef10:	f240 115d 	movw	r1, #349	; 0x15d
   bef14:	f7fa fb5a 	bl	b95cc <__assert_func>
   bef18:	f100 0514 	add.w	r5, r0, #20
   bef1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bef20:	462b      	mov	r3, r5
   bef22:	2200      	movs	r2, #0
   bef24:	4543      	cmp	r3, r8
   bef26:	d321      	bcc.n	bef6c <__multiply+0x98>
   bef28:	f104 0314 	add.w	r3, r4, #20
   bef2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bef30:	f109 0314 	add.w	r3, r9, #20
   bef34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bef38:	9202      	str	r2, [sp, #8]
   bef3a:	1b3a      	subs	r2, r7, r4
   bef3c:	3a15      	subs	r2, #21
   bef3e:	f022 0203 	bic.w	r2, r2, #3
   bef42:	3204      	adds	r2, #4
   bef44:	f104 0115 	add.w	r1, r4, #21
   bef48:	428f      	cmp	r7, r1
   bef4a:	bf38      	it	cc
   bef4c:	2204      	movcc	r2, #4
   bef4e:	9201      	str	r2, [sp, #4]
   bef50:	9a02      	ldr	r2, [sp, #8]
   bef52:	9303      	str	r3, [sp, #12]
   bef54:	429a      	cmp	r2, r3
   bef56:	d80c      	bhi.n	bef72 <__multiply+0x9e>
   bef58:	2e00      	cmp	r6, #0
   bef5a:	dd03      	ble.n	bef64 <__multiply+0x90>
   bef5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bef60:	2b00      	cmp	r3, #0
   bef62:	d05a      	beq.n	bf01a <__multiply+0x146>
   bef64:	6106      	str	r6, [r0, #16]
   bef66:	b005      	add	sp, #20
   bef68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bef6c:	f843 2b04 	str.w	r2, [r3], #4
   bef70:	e7d8      	b.n	bef24 <__multiply+0x50>
   bef72:	f8b3 a000 	ldrh.w	sl, [r3]
   bef76:	f1ba 0f00 	cmp.w	sl, #0
   bef7a:	d024      	beq.n	befc6 <__multiply+0xf2>
   bef7c:	f104 0e14 	add.w	lr, r4, #20
   bef80:	46a9      	mov	r9, r5
   bef82:	f04f 0c00 	mov.w	ip, #0
   bef86:	f85e 2b04 	ldr.w	r2, [lr], #4
   bef8a:	f8d9 1000 	ldr.w	r1, [r9]
   bef8e:	fa1f fb82 	uxth.w	fp, r2
   bef92:	b289      	uxth	r1, r1
   bef94:	fb0a 110b 	mla	r1, sl, fp, r1
   bef98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bef9c:	f8d9 2000 	ldr.w	r2, [r9]
   befa0:	4461      	add	r1, ip
   befa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   befa6:	fb0a c20b 	mla	r2, sl, fp, ip
   befaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   befae:	b289      	uxth	r1, r1
   befb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   befb4:	4577      	cmp	r7, lr
   befb6:	f849 1b04 	str.w	r1, [r9], #4
   befba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   befbe:	d8e2      	bhi.n	bef86 <__multiply+0xb2>
   befc0:	9a01      	ldr	r2, [sp, #4]
   befc2:	f845 c002 	str.w	ip, [r5, r2]
   befc6:	9a03      	ldr	r2, [sp, #12]
   befc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   befcc:	3304      	adds	r3, #4
   befce:	f1b9 0f00 	cmp.w	r9, #0
   befd2:	d020      	beq.n	bf016 <__multiply+0x142>
   befd4:	6829      	ldr	r1, [r5, #0]
   befd6:	f104 0c14 	add.w	ip, r4, #20
   befda:	46ae      	mov	lr, r5
   befdc:	f04f 0a00 	mov.w	sl, #0
   befe0:	f8bc b000 	ldrh.w	fp, [ip]
   befe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   befe8:	fb09 220b 	mla	r2, r9, fp, r2
   befec:	4492      	add	sl, r2
   befee:	b289      	uxth	r1, r1
   beff0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   beff4:	f84e 1b04 	str.w	r1, [lr], #4
   beff8:	f85c 2b04 	ldr.w	r2, [ip], #4
   beffc:	f8be 1000 	ldrh.w	r1, [lr]
   bf000:	0c12      	lsrs	r2, r2, #16
   bf002:	fb09 1102 	mla	r1, r9, r2, r1
   bf006:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bf00a:	4567      	cmp	r7, ip
   bf00c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bf010:	d8e6      	bhi.n	befe0 <__multiply+0x10c>
   bf012:	9a01      	ldr	r2, [sp, #4]
   bf014:	50a9      	str	r1, [r5, r2]
   bf016:	3504      	adds	r5, #4
   bf018:	e79a      	b.n	bef50 <__multiply+0x7c>
   bf01a:	3e01      	subs	r6, #1
   bf01c:	e79c      	b.n	bef58 <__multiply+0x84>
   bf01e:	bf00      	nop
   bf020:	000c07e7 	.word	0x000c07e7
   bf024:	000c0894 	.word	0x000c0894

000bf028 <__pow5mult>:
   bf028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf02c:	4615      	mov	r5, r2
   bf02e:	f012 0203 	ands.w	r2, r2, #3
   bf032:	4606      	mov	r6, r0
   bf034:	460f      	mov	r7, r1
   bf036:	d007      	beq.n	bf048 <__pow5mult+0x20>
   bf038:	4c25      	ldr	r4, [pc, #148]	; (bf0d0 <__pow5mult+0xa8>)
   bf03a:	3a01      	subs	r2, #1
   bf03c:	2300      	movs	r3, #0
   bf03e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bf042:	f7ff fe51 	bl	bece8 <__multadd>
   bf046:	4607      	mov	r7, r0
   bf048:	10ad      	asrs	r5, r5, #2
   bf04a:	d03d      	beq.n	bf0c8 <__pow5mult+0xa0>
   bf04c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bf04e:	b97c      	cbnz	r4, bf070 <__pow5mult+0x48>
   bf050:	2010      	movs	r0, #16
   bf052:	f7fa fa63 	bl	b951c <malloc>
   bf056:	4602      	mov	r2, r0
   bf058:	6270      	str	r0, [r6, #36]	; 0x24
   bf05a:	b928      	cbnz	r0, bf068 <__pow5mult+0x40>
   bf05c:	4b1d      	ldr	r3, [pc, #116]	; (bf0d4 <__pow5mult+0xac>)
   bf05e:	481e      	ldr	r0, [pc, #120]	; (bf0d8 <__pow5mult+0xb0>)
   bf060:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bf064:	f7fa fab2 	bl	b95cc <__assert_func>
   bf068:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bf06c:	6004      	str	r4, [r0, #0]
   bf06e:	60c4      	str	r4, [r0, #12]
   bf070:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bf074:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bf078:	b94c      	cbnz	r4, bf08e <__pow5mult+0x66>
   bf07a:	f240 2171 	movw	r1, #625	; 0x271
   bf07e:	4630      	mov	r0, r6
   bf080:	f7ff ff12 	bl	beea8 <__i2b>
   bf084:	2300      	movs	r3, #0
   bf086:	f8c8 0008 	str.w	r0, [r8, #8]
   bf08a:	4604      	mov	r4, r0
   bf08c:	6003      	str	r3, [r0, #0]
   bf08e:	f04f 0900 	mov.w	r9, #0
   bf092:	07eb      	lsls	r3, r5, #31
   bf094:	d50a      	bpl.n	bf0ac <__pow5mult+0x84>
   bf096:	4639      	mov	r1, r7
   bf098:	4622      	mov	r2, r4
   bf09a:	4630      	mov	r0, r6
   bf09c:	f7ff ff1a 	bl	beed4 <__multiply>
   bf0a0:	4639      	mov	r1, r7
   bf0a2:	4680      	mov	r8, r0
   bf0a4:	4630      	mov	r0, r6
   bf0a6:	f7ff fdfd 	bl	beca4 <_Bfree>
   bf0aa:	4647      	mov	r7, r8
   bf0ac:	106d      	asrs	r5, r5, #1
   bf0ae:	d00b      	beq.n	bf0c8 <__pow5mult+0xa0>
   bf0b0:	6820      	ldr	r0, [r4, #0]
   bf0b2:	b938      	cbnz	r0, bf0c4 <__pow5mult+0x9c>
   bf0b4:	4622      	mov	r2, r4
   bf0b6:	4621      	mov	r1, r4
   bf0b8:	4630      	mov	r0, r6
   bf0ba:	f7ff ff0b 	bl	beed4 <__multiply>
   bf0be:	6020      	str	r0, [r4, #0]
   bf0c0:	f8c0 9000 	str.w	r9, [r0]
   bf0c4:	4604      	mov	r4, r0
   bf0c6:	e7e4      	b.n	bf092 <__pow5mult+0x6a>
   bf0c8:	4638      	mov	r0, r7
   bf0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf0ce:	bf00      	nop
   bf0d0:	000c0a08 	.word	0x000c0a08
   bf0d4:	000c067b 	.word	0x000c067b
   bf0d8:	000c0894 	.word	0x000c0894

000bf0dc <__lshift>:
   bf0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf0e0:	460c      	mov	r4, r1
   bf0e2:	6849      	ldr	r1, [r1, #4]
   bf0e4:	6923      	ldr	r3, [r4, #16]
   bf0e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bf0ea:	68a3      	ldr	r3, [r4, #8]
   bf0ec:	4607      	mov	r7, r0
   bf0ee:	4691      	mov	r9, r2
   bf0f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bf0f4:	f108 0601 	add.w	r6, r8, #1
   bf0f8:	42b3      	cmp	r3, r6
   bf0fa:	db0b      	blt.n	bf114 <__lshift+0x38>
   bf0fc:	4638      	mov	r0, r7
   bf0fe:	f7ff fd91 	bl	bec24 <_Balloc>
   bf102:	4605      	mov	r5, r0
   bf104:	b948      	cbnz	r0, bf11a <__lshift+0x3e>
   bf106:	4602      	mov	r2, r0
   bf108:	4b2a      	ldr	r3, [pc, #168]	; (bf1b4 <__lshift+0xd8>)
   bf10a:	482b      	ldr	r0, [pc, #172]	; (bf1b8 <__lshift+0xdc>)
   bf10c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bf110:	f7fa fa5c 	bl	b95cc <__assert_func>
   bf114:	3101      	adds	r1, #1
   bf116:	005b      	lsls	r3, r3, #1
   bf118:	e7ee      	b.n	bf0f8 <__lshift+0x1c>
   bf11a:	2300      	movs	r3, #0
   bf11c:	f100 0114 	add.w	r1, r0, #20
   bf120:	f100 0210 	add.w	r2, r0, #16
   bf124:	4618      	mov	r0, r3
   bf126:	4553      	cmp	r3, sl
   bf128:	db37      	blt.n	bf19a <__lshift+0xbe>
   bf12a:	6920      	ldr	r0, [r4, #16]
   bf12c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bf130:	f104 0314 	add.w	r3, r4, #20
   bf134:	f019 091f 	ands.w	r9, r9, #31
   bf138:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bf13c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bf140:	d02f      	beq.n	bf1a2 <__lshift+0xc6>
   bf142:	f1c9 0e20 	rsb	lr, r9, #32
   bf146:	468a      	mov	sl, r1
   bf148:	f04f 0c00 	mov.w	ip, #0
   bf14c:	681a      	ldr	r2, [r3, #0]
   bf14e:	fa02 f209 	lsl.w	r2, r2, r9
   bf152:	ea42 020c 	orr.w	r2, r2, ip
   bf156:	f84a 2b04 	str.w	r2, [sl], #4
   bf15a:	f853 2b04 	ldr.w	r2, [r3], #4
   bf15e:	4298      	cmp	r0, r3
   bf160:	fa22 fc0e 	lsr.w	ip, r2, lr
   bf164:	d8f2      	bhi.n	bf14c <__lshift+0x70>
   bf166:	1b03      	subs	r3, r0, r4
   bf168:	3b15      	subs	r3, #21
   bf16a:	f023 0303 	bic.w	r3, r3, #3
   bf16e:	3304      	adds	r3, #4
   bf170:	f104 0215 	add.w	r2, r4, #21
   bf174:	4290      	cmp	r0, r2
   bf176:	bf38      	it	cc
   bf178:	2304      	movcc	r3, #4
   bf17a:	f841 c003 	str.w	ip, [r1, r3]
   bf17e:	f1bc 0f00 	cmp.w	ip, #0
   bf182:	d001      	beq.n	bf188 <__lshift+0xac>
   bf184:	f108 0602 	add.w	r6, r8, #2
   bf188:	3e01      	subs	r6, #1
   bf18a:	4638      	mov	r0, r7
   bf18c:	612e      	str	r6, [r5, #16]
   bf18e:	4621      	mov	r1, r4
   bf190:	f7ff fd88 	bl	beca4 <_Bfree>
   bf194:	4628      	mov	r0, r5
   bf196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf19a:	f842 0f04 	str.w	r0, [r2, #4]!
   bf19e:	3301      	adds	r3, #1
   bf1a0:	e7c1      	b.n	bf126 <__lshift+0x4a>
   bf1a2:	3904      	subs	r1, #4
   bf1a4:	f853 2b04 	ldr.w	r2, [r3], #4
   bf1a8:	f841 2f04 	str.w	r2, [r1, #4]!
   bf1ac:	4298      	cmp	r0, r3
   bf1ae:	d8f9      	bhi.n	bf1a4 <__lshift+0xc8>
   bf1b0:	e7ea      	b.n	bf188 <__lshift+0xac>
   bf1b2:	bf00      	nop
   bf1b4:	000c07e7 	.word	0x000c07e7
   bf1b8:	000c0894 	.word	0x000c0894

000bf1bc <__mcmp>:
   bf1bc:	b530      	push	{r4, r5, lr}
   bf1be:	6902      	ldr	r2, [r0, #16]
   bf1c0:	690c      	ldr	r4, [r1, #16]
   bf1c2:	1b12      	subs	r2, r2, r4
   bf1c4:	d10e      	bne.n	bf1e4 <__mcmp+0x28>
   bf1c6:	f100 0314 	add.w	r3, r0, #20
   bf1ca:	3114      	adds	r1, #20
   bf1cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bf1d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bf1d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bf1d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bf1dc:	42a5      	cmp	r5, r4
   bf1de:	d003      	beq.n	bf1e8 <__mcmp+0x2c>
   bf1e0:	d305      	bcc.n	bf1ee <__mcmp+0x32>
   bf1e2:	2201      	movs	r2, #1
   bf1e4:	4610      	mov	r0, r2
   bf1e6:	bd30      	pop	{r4, r5, pc}
   bf1e8:	4283      	cmp	r3, r0
   bf1ea:	d3f3      	bcc.n	bf1d4 <__mcmp+0x18>
   bf1ec:	e7fa      	b.n	bf1e4 <__mcmp+0x28>
   bf1ee:	f04f 32ff 	mov.w	r2, #4294967295
   bf1f2:	e7f7      	b.n	bf1e4 <__mcmp+0x28>

000bf1f4 <__mdiff>:
   bf1f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf1f8:	460c      	mov	r4, r1
   bf1fa:	4606      	mov	r6, r0
   bf1fc:	4611      	mov	r1, r2
   bf1fe:	4620      	mov	r0, r4
   bf200:	4690      	mov	r8, r2
   bf202:	f7ff ffdb 	bl	bf1bc <__mcmp>
   bf206:	1e05      	subs	r5, r0, #0
   bf208:	d110      	bne.n	bf22c <__mdiff+0x38>
   bf20a:	4629      	mov	r1, r5
   bf20c:	4630      	mov	r0, r6
   bf20e:	f7ff fd09 	bl	bec24 <_Balloc>
   bf212:	b930      	cbnz	r0, bf222 <__mdiff+0x2e>
   bf214:	4b3a      	ldr	r3, [pc, #232]	; (bf300 <__mdiff+0x10c>)
   bf216:	4602      	mov	r2, r0
   bf218:	f240 2132 	movw	r1, #562	; 0x232
   bf21c:	4839      	ldr	r0, [pc, #228]	; (bf304 <__mdiff+0x110>)
   bf21e:	f7fa f9d5 	bl	b95cc <__assert_func>
   bf222:	2301      	movs	r3, #1
   bf224:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bf228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf22c:	bfa4      	itt	ge
   bf22e:	4643      	movge	r3, r8
   bf230:	46a0      	movge	r8, r4
   bf232:	4630      	mov	r0, r6
   bf234:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bf238:	bfa6      	itte	ge
   bf23a:	461c      	movge	r4, r3
   bf23c:	2500      	movge	r5, #0
   bf23e:	2501      	movlt	r5, #1
   bf240:	f7ff fcf0 	bl	bec24 <_Balloc>
   bf244:	b920      	cbnz	r0, bf250 <__mdiff+0x5c>
   bf246:	4b2e      	ldr	r3, [pc, #184]	; (bf300 <__mdiff+0x10c>)
   bf248:	4602      	mov	r2, r0
   bf24a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bf24e:	e7e5      	b.n	bf21c <__mdiff+0x28>
   bf250:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bf254:	6926      	ldr	r6, [r4, #16]
   bf256:	60c5      	str	r5, [r0, #12]
   bf258:	f104 0914 	add.w	r9, r4, #20
   bf25c:	f108 0514 	add.w	r5, r8, #20
   bf260:	f100 0e14 	add.w	lr, r0, #20
   bf264:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bf268:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bf26c:	f108 0210 	add.w	r2, r8, #16
   bf270:	46f2      	mov	sl, lr
   bf272:	2100      	movs	r1, #0
   bf274:	f859 3b04 	ldr.w	r3, [r9], #4
   bf278:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bf27c:	fa1f f883 	uxth.w	r8, r3
   bf280:	fa11 f18b 	uxtah	r1, r1, fp
   bf284:	0c1b      	lsrs	r3, r3, #16
   bf286:	eba1 0808 	sub.w	r8, r1, r8
   bf28a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bf28e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bf292:	fa1f f888 	uxth.w	r8, r8
   bf296:	1419      	asrs	r1, r3, #16
   bf298:	454e      	cmp	r6, r9
   bf29a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bf29e:	f84a 3b04 	str.w	r3, [sl], #4
   bf2a2:	d8e7      	bhi.n	bf274 <__mdiff+0x80>
   bf2a4:	1b33      	subs	r3, r6, r4
   bf2a6:	3b15      	subs	r3, #21
   bf2a8:	f023 0303 	bic.w	r3, r3, #3
   bf2ac:	3304      	adds	r3, #4
   bf2ae:	3415      	adds	r4, #21
   bf2b0:	42a6      	cmp	r6, r4
   bf2b2:	bf38      	it	cc
   bf2b4:	2304      	movcc	r3, #4
   bf2b6:	441d      	add	r5, r3
   bf2b8:	4473      	add	r3, lr
   bf2ba:	469e      	mov	lr, r3
   bf2bc:	462e      	mov	r6, r5
   bf2be:	4566      	cmp	r6, ip
   bf2c0:	d30e      	bcc.n	bf2e0 <__mdiff+0xec>
   bf2c2:	f10c 0203 	add.w	r2, ip, #3
   bf2c6:	1b52      	subs	r2, r2, r5
   bf2c8:	f022 0203 	bic.w	r2, r2, #3
   bf2cc:	3d03      	subs	r5, #3
   bf2ce:	45ac      	cmp	ip, r5
   bf2d0:	bf38      	it	cc
   bf2d2:	2200      	movcc	r2, #0
   bf2d4:	441a      	add	r2, r3
   bf2d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bf2da:	b17b      	cbz	r3, bf2fc <__mdiff+0x108>
   bf2dc:	6107      	str	r7, [r0, #16]
   bf2de:	e7a3      	b.n	bf228 <__mdiff+0x34>
   bf2e0:	f856 8b04 	ldr.w	r8, [r6], #4
   bf2e4:	fa11 f288 	uxtah	r2, r1, r8
   bf2e8:	1414      	asrs	r4, r2, #16
   bf2ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bf2ee:	b292      	uxth	r2, r2
   bf2f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bf2f4:	f84e 2b04 	str.w	r2, [lr], #4
   bf2f8:	1421      	asrs	r1, r4, #16
   bf2fa:	e7e0      	b.n	bf2be <__mdiff+0xca>
   bf2fc:	3f01      	subs	r7, #1
   bf2fe:	e7ea      	b.n	bf2d6 <__mdiff+0xe2>
   bf300:	000c07e7 	.word	0x000c07e7
   bf304:	000c0894 	.word	0x000c0894

000bf308 <__ulp>:
   bf308:	b082      	sub	sp, #8
   bf30a:	ed8d 0b00 	vstr	d0, [sp]
   bf30e:	9b01      	ldr	r3, [sp, #4]
   bf310:	4912      	ldr	r1, [pc, #72]	; (bf35c <__ulp+0x54>)
   bf312:	4019      	ands	r1, r3
   bf314:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bf318:	2900      	cmp	r1, #0
   bf31a:	dd05      	ble.n	bf328 <__ulp+0x20>
   bf31c:	2200      	movs	r2, #0
   bf31e:	460b      	mov	r3, r1
   bf320:	ec43 2b10 	vmov	d0, r2, r3
   bf324:	b002      	add	sp, #8
   bf326:	4770      	bx	lr
   bf328:	4249      	negs	r1, r1
   bf32a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bf32e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bf332:	f04f 0200 	mov.w	r2, #0
   bf336:	f04f 0300 	mov.w	r3, #0
   bf33a:	da04      	bge.n	bf346 <__ulp+0x3e>
   bf33c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bf340:	fa41 f300 	asr.w	r3, r1, r0
   bf344:	e7ec      	b.n	bf320 <__ulp+0x18>
   bf346:	f1a0 0114 	sub.w	r1, r0, #20
   bf34a:	291e      	cmp	r1, #30
   bf34c:	bfda      	itte	le
   bf34e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bf352:	fa20 f101 	lsrle.w	r1, r0, r1
   bf356:	2101      	movgt	r1, #1
   bf358:	460a      	mov	r2, r1
   bf35a:	e7e1      	b.n	bf320 <__ulp+0x18>
   bf35c:	7ff00000 	.word	0x7ff00000

000bf360 <__b2d>:
   bf360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf362:	6905      	ldr	r5, [r0, #16]
   bf364:	f100 0714 	add.w	r7, r0, #20
   bf368:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bf36c:	1f2e      	subs	r6, r5, #4
   bf36e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bf372:	4620      	mov	r0, r4
   bf374:	f7ff fd48 	bl	bee08 <__hi0bits>
   bf378:	f1c0 0320 	rsb	r3, r0, #32
   bf37c:	280a      	cmp	r0, #10
   bf37e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bf3fc <__b2d+0x9c>
   bf382:	600b      	str	r3, [r1, #0]
   bf384:	dc14      	bgt.n	bf3b0 <__b2d+0x50>
   bf386:	f1c0 0e0b 	rsb	lr, r0, #11
   bf38a:	fa24 f10e 	lsr.w	r1, r4, lr
   bf38e:	42b7      	cmp	r7, r6
   bf390:	ea41 030c 	orr.w	r3, r1, ip
   bf394:	bf34      	ite	cc
   bf396:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bf39a:	2100      	movcs	r1, #0
   bf39c:	3015      	adds	r0, #21
   bf39e:	fa04 f000 	lsl.w	r0, r4, r0
   bf3a2:	fa21 f10e 	lsr.w	r1, r1, lr
   bf3a6:	ea40 0201 	orr.w	r2, r0, r1
   bf3aa:	ec43 2b10 	vmov	d0, r2, r3
   bf3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bf3b0:	42b7      	cmp	r7, r6
   bf3b2:	bf3a      	itte	cc
   bf3b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bf3b8:	f1a5 0608 	subcc.w	r6, r5, #8
   bf3bc:	2100      	movcs	r1, #0
   bf3be:	380b      	subs	r0, #11
   bf3c0:	d017      	beq.n	bf3f2 <__b2d+0x92>
   bf3c2:	f1c0 0c20 	rsb	ip, r0, #32
   bf3c6:	fa04 f500 	lsl.w	r5, r4, r0
   bf3ca:	42be      	cmp	r6, r7
   bf3cc:	fa21 f40c 	lsr.w	r4, r1, ip
   bf3d0:	ea45 0504 	orr.w	r5, r5, r4
   bf3d4:	bf8c      	ite	hi
   bf3d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bf3da:	2400      	movls	r4, #0
   bf3dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bf3e0:	fa01 f000 	lsl.w	r0, r1, r0
   bf3e4:	fa24 f40c 	lsr.w	r4, r4, ip
   bf3e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bf3ec:	ea40 0204 	orr.w	r2, r0, r4
   bf3f0:	e7db      	b.n	bf3aa <__b2d+0x4a>
   bf3f2:	ea44 030c 	orr.w	r3, r4, ip
   bf3f6:	460a      	mov	r2, r1
   bf3f8:	e7d7      	b.n	bf3aa <__b2d+0x4a>
   bf3fa:	bf00      	nop
   bf3fc:	3ff00000 	.word	0x3ff00000

000bf400 <__d2b>:
   bf400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bf404:	4689      	mov	r9, r1
   bf406:	2101      	movs	r1, #1
   bf408:	ec57 6b10 	vmov	r6, r7, d0
   bf40c:	4690      	mov	r8, r2
   bf40e:	f7ff fc09 	bl	bec24 <_Balloc>
   bf412:	4604      	mov	r4, r0
   bf414:	b930      	cbnz	r0, bf424 <__d2b+0x24>
   bf416:	4602      	mov	r2, r0
   bf418:	4b25      	ldr	r3, [pc, #148]	; (bf4b0 <__d2b+0xb0>)
   bf41a:	4826      	ldr	r0, [pc, #152]	; (bf4b4 <__d2b+0xb4>)
   bf41c:	f240 310a 	movw	r1, #778	; 0x30a
   bf420:	f7fa f8d4 	bl	b95cc <__assert_func>
   bf424:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bf428:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bf42c:	bb35      	cbnz	r5, bf47c <__d2b+0x7c>
   bf42e:	2e00      	cmp	r6, #0
   bf430:	9301      	str	r3, [sp, #4]
   bf432:	d028      	beq.n	bf486 <__d2b+0x86>
   bf434:	4668      	mov	r0, sp
   bf436:	9600      	str	r6, [sp, #0]
   bf438:	f7ff fd06 	bl	bee48 <__lo0bits>
   bf43c:	9900      	ldr	r1, [sp, #0]
   bf43e:	b300      	cbz	r0, bf482 <__d2b+0x82>
   bf440:	9a01      	ldr	r2, [sp, #4]
   bf442:	f1c0 0320 	rsb	r3, r0, #32
   bf446:	fa02 f303 	lsl.w	r3, r2, r3
   bf44a:	430b      	orrs	r3, r1
   bf44c:	40c2      	lsrs	r2, r0
   bf44e:	6163      	str	r3, [r4, #20]
   bf450:	9201      	str	r2, [sp, #4]
   bf452:	9b01      	ldr	r3, [sp, #4]
   bf454:	61a3      	str	r3, [r4, #24]
   bf456:	2b00      	cmp	r3, #0
   bf458:	bf14      	ite	ne
   bf45a:	2202      	movne	r2, #2
   bf45c:	2201      	moveq	r2, #1
   bf45e:	6122      	str	r2, [r4, #16]
   bf460:	b1d5      	cbz	r5, bf498 <__d2b+0x98>
   bf462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bf466:	4405      	add	r5, r0
   bf468:	f8c9 5000 	str.w	r5, [r9]
   bf46c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bf470:	f8c8 0000 	str.w	r0, [r8]
   bf474:	4620      	mov	r0, r4
   bf476:	b003      	add	sp, #12
   bf478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf47c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bf480:	e7d5      	b.n	bf42e <__d2b+0x2e>
   bf482:	6161      	str	r1, [r4, #20]
   bf484:	e7e5      	b.n	bf452 <__d2b+0x52>
   bf486:	a801      	add	r0, sp, #4
   bf488:	f7ff fcde 	bl	bee48 <__lo0bits>
   bf48c:	9b01      	ldr	r3, [sp, #4]
   bf48e:	6163      	str	r3, [r4, #20]
   bf490:	2201      	movs	r2, #1
   bf492:	6122      	str	r2, [r4, #16]
   bf494:	3020      	adds	r0, #32
   bf496:	e7e3      	b.n	bf460 <__d2b+0x60>
   bf498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bf49c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bf4a0:	f8c9 0000 	str.w	r0, [r9]
   bf4a4:	6918      	ldr	r0, [r3, #16]
   bf4a6:	f7ff fcaf 	bl	bee08 <__hi0bits>
   bf4aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bf4ae:	e7df      	b.n	bf470 <__d2b+0x70>
   bf4b0:	000c07e7 	.word	0x000c07e7
   bf4b4:	000c0894 	.word	0x000c0894

000bf4b8 <__ratio>:
   bf4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf4bc:	4688      	mov	r8, r1
   bf4be:	4669      	mov	r1, sp
   bf4c0:	4681      	mov	r9, r0
   bf4c2:	f7ff ff4d 	bl	bf360 <__b2d>
   bf4c6:	a901      	add	r1, sp, #4
   bf4c8:	4640      	mov	r0, r8
   bf4ca:	ec55 4b10 	vmov	r4, r5, d0
   bf4ce:	f7ff ff47 	bl	bf360 <__b2d>
   bf4d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bf4d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bf4da:	eba3 0c02 	sub.w	ip, r3, r2
   bf4de:	e9dd 3200 	ldrd	r3, r2, [sp]
   bf4e2:	1a9b      	subs	r3, r3, r2
   bf4e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bf4e8:	ec51 0b10 	vmov	r0, r1, d0
   bf4ec:	2b00      	cmp	r3, #0
   bf4ee:	bfd6      	itet	le
   bf4f0:	460a      	movle	r2, r1
   bf4f2:	462a      	movgt	r2, r5
   bf4f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bf4f8:	468b      	mov	fp, r1
   bf4fa:	462f      	mov	r7, r5
   bf4fc:	bfd4      	ite	le
   bf4fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bf502:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bf506:	4620      	mov	r0, r4
   bf508:	ee10 2a10 	vmov	r2, s0
   bf50c:	465b      	mov	r3, fp
   bf50e:	4639      	mov	r1, r7
   bf510:	f7f5 f86c 	bl	b45ec <__aeabi_ddiv>
   bf514:	ec41 0b10 	vmov	d0, r0, r1
   bf518:	b003      	add	sp, #12
   bf51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf51e <__copybits>:
   bf51e:	3901      	subs	r1, #1
   bf520:	b570      	push	{r4, r5, r6, lr}
   bf522:	1149      	asrs	r1, r1, #5
   bf524:	6914      	ldr	r4, [r2, #16]
   bf526:	3101      	adds	r1, #1
   bf528:	f102 0314 	add.w	r3, r2, #20
   bf52c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bf530:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bf534:	1f05      	subs	r5, r0, #4
   bf536:	42a3      	cmp	r3, r4
   bf538:	d30c      	bcc.n	bf554 <__copybits+0x36>
   bf53a:	1aa3      	subs	r3, r4, r2
   bf53c:	3b11      	subs	r3, #17
   bf53e:	f023 0303 	bic.w	r3, r3, #3
   bf542:	3211      	adds	r2, #17
   bf544:	42a2      	cmp	r2, r4
   bf546:	bf88      	it	hi
   bf548:	2300      	movhi	r3, #0
   bf54a:	4418      	add	r0, r3
   bf54c:	2300      	movs	r3, #0
   bf54e:	4288      	cmp	r0, r1
   bf550:	d305      	bcc.n	bf55e <__copybits+0x40>
   bf552:	bd70      	pop	{r4, r5, r6, pc}
   bf554:	f853 6b04 	ldr.w	r6, [r3], #4
   bf558:	f845 6f04 	str.w	r6, [r5, #4]!
   bf55c:	e7eb      	b.n	bf536 <__copybits+0x18>
   bf55e:	f840 3b04 	str.w	r3, [r0], #4
   bf562:	e7f4      	b.n	bf54e <__copybits+0x30>

000bf564 <__any_on>:
   bf564:	f100 0214 	add.w	r2, r0, #20
   bf568:	6900      	ldr	r0, [r0, #16]
   bf56a:	114b      	asrs	r3, r1, #5
   bf56c:	4298      	cmp	r0, r3
   bf56e:	b510      	push	{r4, lr}
   bf570:	db11      	blt.n	bf596 <__any_on+0x32>
   bf572:	dd0a      	ble.n	bf58a <__any_on+0x26>
   bf574:	f011 011f 	ands.w	r1, r1, #31
   bf578:	d007      	beq.n	bf58a <__any_on+0x26>
   bf57a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bf57e:	fa24 f001 	lsr.w	r0, r4, r1
   bf582:	fa00 f101 	lsl.w	r1, r0, r1
   bf586:	428c      	cmp	r4, r1
   bf588:	d10b      	bne.n	bf5a2 <__any_on+0x3e>
   bf58a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bf58e:	4293      	cmp	r3, r2
   bf590:	d803      	bhi.n	bf59a <__any_on+0x36>
   bf592:	2000      	movs	r0, #0
   bf594:	bd10      	pop	{r4, pc}
   bf596:	4603      	mov	r3, r0
   bf598:	e7f7      	b.n	bf58a <__any_on+0x26>
   bf59a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bf59e:	2900      	cmp	r1, #0
   bf5a0:	d0f5      	beq.n	bf58e <__any_on+0x2a>
   bf5a2:	2001      	movs	r0, #1
   bf5a4:	e7f6      	b.n	bf594 <__any_on+0x30>

000bf5a6 <_calloc_r>:
   bf5a6:	b513      	push	{r0, r1, r4, lr}
   bf5a8:	434a      	muls	r2, r1
   bf5aa:	4611      	mov	r1, r2
   bf5ac:	9201      	str	r2, [sp, #4]
   bf5ae:	f7f9 fffd 	bl	b95ac <_malloc_r>
   bf5b2:	4604      	mov	r4, r0
   bf5b4:	b118      	cbz	r0, bf5be <_calloc_r+0x18>
   bf5b6:	9a01      	ldr	r2, [sp, #4]
   bf5b8:	2100      	movs	r1, #0
   bf5ba:	f7fd ff14 	bl	bd3e6 <memset>
   bf5be:	4620      	mov	r0, r4
   bf5c0:	b002      	add	sp, #8
   bf5c2:	bd10      	pop	{r4, pc}

000bf5c4 <_open_r>:
   bf5c4:	b538      	push	{r3, r4, r5, lr}
   bf5c6:	4d07      	ldr	r5, [pc, #28]	; (bf5e4 <_open_r+0x20>)
   bf5c8:	4604      	mov	r4, r0
   bf5ca:	4608      	mov	r0, r1
   bf5cc:	4611      	mov	r1, r2
   bf5ce:	2200      	movs	r2, #0
   bf5d0:	602a      	str	r2, [r5, #0]
   bf5d2:	461a      	mov	r2, r3
   bf5d4:	f7f9 fc74 	bl	b8ec0 <_open>
   bf5d8:	1c43      	adds	r3, r0, #1
   bf5da:	d102      	bne.n	bf5e2 <_open_r+0x1e>
   bf5dc:	682b      	ldr	r3, [r5, #0]
   bf5de:	b103      	cbz	r3, bf5e2 <_open_r+0x1e>
   bf5e0:	6023      	str	r3, [r4, #0]
   bf5e2:	bd38      	pop	{r3, r4, r5, pc}
   bf5e4:	2003e7ec 	.word	0x2003e7ec

000bf5e8 <_read_r>:
   bf5e8:	b538      	push	{r3, r4, r5, lr}
   bf5ea:	4d07      	ldr	r5, [pc, #28]	; (bf608 <_read_r+0x20>)
   bf5ec:	4604      	mov	r4, r0
   bf5ee:	4608      	mov	r0, r1
   bf5f0:	4611      	mov	r1, r2
   bf5f2:	2200      	movs	r2, #0
   bf5f4:	602a      	str	r2, [r5, #0]
   bf5f6:	461a      	mov	r2, r3
   bf5f8:	f7f9 fc72 	bl	b8ee0 <_read>
   bf5fc:	1c43      	adds	r3, r0, #1
   bf5fe:	d102      	bne.n	bf606 <_read_r+0x1e>
   bf600:	682b      	ldr	r3, [r5, #0]
   bf602:	b103      	cbz	r3, bf606 <_read_r+0x1e>
   bf604:	6023      	str	r3, [r4, #0]
   bf606:	bd38      	pop	{r3, r4, r5, pc}
   bf608:	2003e7ec 	.word	0x2003e7ec
   bf60c:	00000000 	.word	0x00000000

000bf610 <nan>:
   bf610:	ed9f 0b01 	vldr	d0, [pc, #4]	; bf618 <nan+0x8>
   bf614:	4770      	bx	lr
   bf616:	bf00      	nop
   bf618:	00000000 	.word	0x00000000
   bf61c:	7ff80000 	.word	0x7ff80000

000bf620 <__ascii_wctomb>:
   bf620:	b149      	cbz	r1, bf636 <__ascii_wctomb+0x16>
   bf622:	2aff      	cmp	r2, #255	; 0xff
   bf624:	bf85      	ittet	hi
   bf626:	238a      	movhi	r3, #138	; 0x8a
   bf628:	6003      	strhi	r3, [r0, #0]
   bf62a:	700a      	strbls	r2, [r1, #0]
   bf62c:	f04f 30ff 	movhi.w	r0, #4294967295
   bf630:	bf98      	it	ls
   bf632:	2001      	movls	r0, #1
   bf634:	4770      	bx	lr
   bf636:	4608      	mov	r0, r1
   bf638:	4770      	bx	lr

000bf63a <link_code_end>:
	...

000bf63c <link_const_data_start>:
   bf63c:	514d0400 	.word	0x514d0400
   bf640:	00045454 	.word	0x00045454
   bf644:	49514d06 	.word	0x49514d06
   bf648:	03706473 	.word	0x03706473
   bf64c:	00000000 	.word	0x00000000
   bf650:	34fb0000 	.word	0x34fb0000
   bf654:	00805f9b 	.word	0x00805f9b
   bf658:	10008000 	.word	0x10008000
	...

000bf664 <dynalib_user>:
   bf664:	000b4a55 000b4a91 000b4ab9 000b4abd     UJ...J...J...J..
   bf674:	00000000 74206e69 63206568 626c6c61     ....in the callb
   bf684:	006b6361 63697270 002f7365 000a7325     ack.prices/.%s..
   bf694:	5700212c 69746961 6620676e 4220726f     ,!.Waiting for B
   bf6a4:	6c63454c 746e6569 6e6f6320 7463656e     LEclient connect
   bf6b4:	2e6e6f69 6c002e2e 725f776f 65676e61     ion....low_range
   bf6c4:	756f685f 64255b72 25203a5d 48000a64     _hour[%d]: %d..H
   bf6d4:	65686769 70207473 65636972 20666f20     ighest price of 
   bf6e4:	20656874 3a796164 0a662520 776f4c00     the day: %f..Low
   bf6f4:	20747365 63697270 666f2065 65687420     est price of the
   bf704:	79616420 6625203a 6f48000a 20737275      day: %f..Hours 
   bf714:	7420666f 64206568 77207961 65726568     of the day where
   bf724:	656c6520 69727463 79746963 20736920      electricity is 
   bf734:	68746977 61206e69 70656363 20646574     within accepted 
   bf744:	676e6172 000a3a65 64323025 206f7420     range:..%02d to 
   bf754:	64323025 227b000a 5f726857 61646f74     %02d..{"Whr_toda
   bf764:	5b3a2279 5d002c00 7257007d 6e697469     y":[.,.]}.Writin
   bf774:	68772067 646f745f 4a5f7961 206e6f73     g wh_today_Json 
   bf784:	6c696166 002e6465 7270227b 73656369     failed..{"prices
   bf794:	74736579 61647265 5b3a2279 322e2500     yesterday":[.%.2
   bf7a4:	7b00666c 69727022 74736563 7961646f     lf.{"pricestoday
   bf7b4:	005b3a22 7270227b 73656369 6f6d6f74     ":[.{"pricestomo
   bf7c4:	776f7272 005b3a22 4857227b 65795f72     rrow":[.{"WHr_ye
   bf7d4:	72657473 22796164 7b005b3a 72485722     sterday":[.{"WHr
   bf7e4:	646f745f 3a227961 7257005b 6e697469     _today":[.Writin
   bf7f4:	61772067 68207474 7372756f 69616620     g watt hours fai
   bf804:	2e64656c 69614600 2064656c 61206f74     led..Failed to a
   bf814:	636f6c6c 20657461 6f6d656d 66207972     llocate memory f
   bf824:	6320726f 5f74736f 74736579 61647265     or cost_yesterda
   bf834:	46000a79 656c6961 6f742064 6c6c6120     y..Failed to all
   bf844:	7461636f 656d2065 79726f6d 726f6620     ocate memory for
   bf854:	736f6320 6f745f74 0a796164 69614600      cost_today..Fai
   bf864:	2064656c 61206f74 636f6c6c 20657461     led to allocate 
   bf874:	6f6d656d 66207972 6320726f 5f74736f     memory for cost_
   bf884:	6f6d6f74 776f7272 654d000a 79726f6d     tomorrow..Memory
   bf894:	6c6c6120 7461636f 66206465 7020726f      allocated for p
   bf8a4:	65636972 25203a73 79622064 20736574     rices: %d bytes 
   bf8b4:	6420666f 6c62756f 000a7365 6c696146     of doubles..Fail
   bf8c4:	74206465 6c61206f 61636f6c 6d206574     ed to allocate m
   bf8d4:	726f6d65 6f662079 68772072 646f745f     emory for wh_tod
   bf8e4:	000a7961 6c696146 74206465 6c61206f     ay..Failed to al
   bf8f4:	61636f6c 6d206574 726f6d65 6f662079     locate memory fo
   bf904:	68772072 7365795f 64726574 000a7961     r wh_yesterday..
   bf914:	6f6d654d 61207972 636f6c6c 64657461     Memory allocated
   bf924:	726f6620 3a687720 20642520 65747962      for wh: %d byte
   bf934:	666f2073 746e6920 41000a73 72657466     s of ints..After
   bf944:	756c2520 6c43000a 746e6569 73696420      %lu..Client dis
   bf954:	6e6e6f63 65746365 73000a64 6b726170     connected..spark
   bf964:	65696c63 005f746e 7474716d 696c4300     client_.mqtt.Cli
   bf974:	20746e65 6f636572 63656e6e 0a646574     ent reconnected.
   bf984:	206e4900 6b726f77 6843000a 28706165     .In work..Cheap(
   bf994:	29687369 756f6820 6f207372 68742066     ish) hours of th
   bf9a4:	61642065 00203a79 64323025 206f7420     e day: .%02d to 
   bf9b4:	64323025 4c00202c 7020776f 65636972     %02d, .Low price
   bf9c4:	756f6820 57007372 20747461 00776f6e      hours.Watt now.
   bf9d4:	204b4b44 74736559 61647265 4b440079     DKK Yesterday.DK
   bf9e4:	6f54204b 00796164 204b4b44 6f6d6f54     K Today.DKK Tomo
   bf9f4:	776f7272 72685700 646f5420 57007961     rrow.Whr Today.W
   bfa04:	59207268 65747365 79616472 32393100     hr Yesterday.192
   bfa14:	3836312e 3031312e 2f00362e 61746164     .168.110.6./data
   bfa24:	2f746573 70736c45 7270746f 73656369     set/Elspotprices
   bfa34:	6c69663f 3d726574 25423725 72503232     ?filter=%7B%22Pr
   bfa44:	41656369 25616572 33253232 32322541     iceArea%22%3A%22
   bfa54:	25324b44 37253232 74732644 3d747261     DK2%22%7D&start=
   bfa64:	2d642500 64323025 3230252d 30540064     .%d-%02d-%02d.T0
   bfa74:	41332530 6f263030 65736666 26303d74     0%3A00&offset=0&
   bfa84:	696d696c 34323d74 6c6f6326 736e6d75     limit=24&columns
   bfa94:	6f70533d 69725074 4b446563 6f73264b     =SpotPriceDKK&so
   bfaa4:	483d7472 4472756f 3032254b 26435341     rt=HourDK%20ASC&
   bfab4:	656d6974 656e6f7a 006b643d 2e697061     timezone=dk.api.
   bfac4:	72656e65 61646967 65736174 63697672     energidataservic
   bfad4:	6b642e65 54454700 63757300 73736563     e.dk.GET.success
   bfae4:	73657220 736e6f70 6f632065 32206564      response code 2
   bfaf4:	75003030 6665646e 64656e69 64616200     00.undefined.bad
   bfb04:	73657220 736e6f70 61500065 6e697372      response.Parsin
   bfb14:	6e692067 20747570 6c696166 00216465     g input failed!.
   bfb24:	6f636572 00736472 746f7053 63697250     records.SpotPric
   bfb34:	4b4b4465 72617000 676e6973 69616620     eDKK.parsing fai
   bfb44:	2064656c 6f680032 7361656d 74736973     led 2.homeassist
   bfb54:	2e746e61 61636f6c 6552006c 6e727574     ant.local.Return
   bfb64:	6c617620 203a6575 43006425 656e6e6f      value: %d.Conne
   bfb74:	64657463 206f7420 5454514d 6f726220     cted to MQTT bro
   bfb84:	0a72656b 6c656800 77206f6c 646c726f     ker..hello world
   bfb94:	776f7000 672f7265 70007465 7265776f     .power/get.power
   bfba4:	6972702f 00736563 72727543 20746e65     /prices.Current 
   bfbb4:	4d3a4848 25203a4d 3a643230 64323025     HH:MM: %02d:%02d
   bfbc4:	5352000a 253d4953 65470064 6e697474     ..RSSI=%d.Gettin
   bfbd4:	72702067 20656369 61746164 726f6620     g price data for
   bfbe4:	73657920 64726574 000a7961 74746547      yesterday..Gett
   bfbf4:	20676e69 63697270 61642065 66206174     ing price data f
   bfc04:	7420726f 7961646f 6854000a 72702065     or today..The pr
   bfc14:	73656369 726f6620 6d6f7420 6f72726f     ices for tomorro
   bfc24:	69772076 62206c6c 75702065 64656c6c     v will be pulled
   bfc34:	20746120 303a6425 52000a30 69656365      at %d:00..Recei
   bfc44:	20646576 65776f70 65672f72 70000a74     ved power/get..p
   bfc54:	7265776f 77227b00 22747461 7d64253a     ower.{"watt":%d}
   bfc64:	74617700 756f6874 6c620072 6f635f65     .watthour.ble_co
   bfc74:	63656e6e 0a646574 00000000              nnected.....

000bfc80 <_ZTV5Timer>:
	...
   bfc88:	000b4e49 000b4e8d 000b4b65 746e6f43     IN...N..eK..Cont
   bfc98:	2d746e65 676e654c 41006874 70656363     ent-Length.Accep
   bfca8:	70610074 63696c70 6f697461 736a2f6e     t.application/js
   bfcb8:	62006e6f 30353234 2d353034 62346266     on.b4250405-fb4b
   bfcc8:	3437342d 32622d36 392d3062 65306633     -4746-b2b0-93f0e
   bfcd8:	32313136 00366332 35323462 34303430     61122c6.b4250404
   bfce8:	3462662d 37342d62 622d3634 2d306232     -fb4b-4746-b2b0-
   bfcf8:	30663339 31313665 36633232 32346200     93f0e61122c6.b42
   bfd08:	30343035 62662d33 342d6234 2d363437     50403-fb4b-4746-
   bfd18:	30623262 6633392d 31366530 63323231     b2b0-93f0e61122c
   bfd28:	34620036 34303532 662d3230 2d623462     6.b4250402-fb4b-
   bfd38:	36343734 6232622d 33392d30 36653066     4746-b2b0-93f0e6
   bfd48:	32323131 62003663 30353234 2d363034     1122c6.b4250406-
   bfd58:	62346266 3437342d 32622d36 392d3062     fb4b-4746-b2b0-9
   bfd68:	65306633 32313136 00366332 35323462     3f0e61122c6.b425
   bfd78:	31303430 3462662d 37342d62 622d3634     0401-fb4b-4746-b
   bfd88:	2d306232 30663339 31313665 36633232     2b0-93f0e61122c6
   bfd98:	31663300 39353161 65652d36 342d6637     .3f1a1596-ee7f-4
   bfda8:	2d646232 31643438 6131622d 66343932     2bd-84d1-b1a294f
   bfdb8:	63653238 72410066 506e6f67 6542004d     82ecf.ArgonPM.Be
   bfdc8:	206e6967 746c754d 73616369 754f0074     gin Multicast.Ou
   bfdd8:	666f2074 6d656d20 0079726f 20746f6e     t of memory.not 
   bfde8:	696c6176 22220064 30257500 6e007834     valid."".u%04x.n
   bfdf8:	006c6c75 65757274 2e312500 00673531     ull.true.%1.15g.
   bfe08:	00676c25 312e3125 ef006737 2000bfbb     %lg.%1.17g..... 
   bfe18:	50545448 302e312f 63000a0d 65736f6c     HTTP/1.0...close
   bfe28:	6e6f4300 7463656e 006e6f69 54534f48     .Connection.HOST
   bfe38:	534f5000 0a0d0054 00000a0d              .POST.......

000bfe44 <_ZTV9JSONClass>:
	...
   bfe4c:	000b8759 000b875b 6c6f6f62 006e6165     Y...[...boolean.
   bfe5c:	626d756e 73007265 6e697274 72610067     number.string.ar
   bfe6c:	00796172 656a626f 75007463 6f6e6b6e     ray.object.unkno
   bfe7c:	00006e77                                wn..

000bfe80 <_ZTV7JSONVar>:
	...
   bfe88:	000b87c5 000b8795 000b87b1 73616c2f     ............/las
   bfe98:	69725774 742e6574 45007478 726f7272     tWrite.txt.Error
   bfea8:	696e6920 6c616974 6e697a69 616c2067      initializing la
   bfeb8:	72577473 2e657469 20747874 656c6966     stWrite.txt file
   bfec8:	00642520 6f727245 72772072 6e697469      %d.Error writin
   bfed8:	6e692067 61697469 6164206c 74206174     g initial data t
   bfee8:	616c206f 72577473 2e657469 3a747874     o lastWrite.txt:
   bfef8:	00642520 7461772f 756f4874 646f5472      %d./wattHourTod
   bff08:	742e7961 2f007478 74746177 72756f48     ay.txt./wattHour
   bff18:	74736559 61647265 78742e79 72450074     Yesterday.txt.Er
   bff28:	20726f72 6e65706f 20676e69 656c6966     ror opening file
   bff38:	00642520 6f727245 706f2072 6e696e65      %d.Error openin
   bff48:	616c2067 72577473 2e657469 3a747874     g lastWrite.txt:
   bff58:	00642520 6f727245 65722072 6e696461      %d.Error readin
   bff68:	69662067 203a656c 25006425 7245006a     g file: %d.%j.Er
   bff78:	20726f72 74697277 20676e69 66206f74     ror writing to f
   bff88:	3a656c69 00642520 6f727245 706f2072     ile: %d.Error op
   bff98:	6e696e65 69662067 203a656c 45006425     ening file: %d.E
   bffa8:	726f7272 74656720 676e6974 61747320     rror getting sta
   bffb8:	203a7374 00006425                       ts: %d..

000bffc0 <_ZTVN5spark13EthernetClassE>:
	...
   bffc8:	000b966b 000b9661 000b9657 000b964d     k...a...W...M...
   bffd8:	000b9641 000b9635 000bcdf9 000bce01     A...5...........
   bffe8:	000b9629 000b9621 000b9617 000b960d     )...!...........
   bfff8:	000bce31                                1...

000bfffc <_ZTV3UDP>:
	...
   c0004:	000b9e5d 000b9e81 000b9865 000b998d     ].......e.......
   c0014:	000b981d 000b987d 000b989b 000b98b5     ....}...........
   c0024:	000b98d9 000b9971 000b9c4b 000b9a11     ....q...K.......
   c0034:	000b9b69 000b9805 000b9ded 000b9af1     i...............
   c0044:	000b9825 000b9e1b 000b99b7 000b9813     %...............
   c0054:	000b9a49 000b9819 000b98b7 fffffff0     I...............
   c0064:	00000000 000b98d1                       ........

000c006c <_ZTV21StringPrintableHelper>:
	...
   c0074:	000b9ed9 000b9edb 000ba131 000ba0e1     ........1.......
   c0084:	65737341 6f697472 6961466e 6572756c     AssertionFailure
   c0094:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
   c00a4:	74530065 20747261 63736964 7265766f     e.Start discover
   c00b4:	20676e69 76726573 73656369 7341002e     ing services..As
   c00c4:	74726573 466e6f69 756c6961 68206572     sertionFailure h
   c00d4:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
   c00e4:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
   c00f4:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
   c0104:	72656550 76656420 20656369 6d207369     Peer device is m
   c0114:	69737369 0021676e 6c696146 74206465     issing!.Failed t
   c0124:	7061206f 646e6570 65657020 65432072     o append peer Ce
   c0134:	6172746e 6564206c 65636976 6f43002e     ntral device..Co
   c0144:	63656e6e 00646574 63736944 656e6e6f     nnected.Disconne
   c0154:	64657463 70754400 6163696c 20646574     cted.Duplicated 
   c0164:	72616863 65746361 74736972 63206369     characteristic c
   c0174:	6f6e6e61 65622074 64646120 002e6465     annot be added..
   c0184:	6c696146 74206465 7061206f 646e6570     Failed to append
   c0194:	636f6c20 63206c61 61726168 72657463      local character
   c01a4:	69747369 00002e63                       istic...

000c01ac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c01b4:	000ba27f 000ba2e1 000ba401 000ba30b     ................
   c01c4:	000ba281                                ....

000c01c8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c01d0:	000ba27b 000ba2ef 000ba27d 000ba311     {.......}.......
   c01e0:	000ba2a1                                ....

000c01e4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c01ec:	000ba279 000ba2fd 000babc9 000ba317     y...............
   c01fc:	000ba2c1                                ....

000c0200 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000c0208 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c0208:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000c0218 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c0218:	5f9b34fb 80000080 00001000 00000000     .4._............
   c0228:	00707061 2b25005a 3a643330 75323025     app.Z.%+03d:%02u
   c0238:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
   c0248:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

000c0258 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0260:	000bbd11 000bbd17 000bbd55 000bbd25     ........U...%...
   c0270:	000bbd13                                ....

000c0274 <_ZTV9IPAddress>:
	...
   c027c:	000bc251 000bc241 000bc243              Q...A...C...

000c0288 <_ZTV9USBSerial>:
	...
   c0290:	000bc38b 000bc3f3 000bc3c9 000bb69d     ................
   c02a0:	000bc3bb 000bc38d 000bc39d 000bc3ed     ................
   c02b0:	000bc3ad 000bc385                       ........

000c02b8 <_ZTV11USARTSerial>:
	...
   c02c0:	000bc4dd 000bc549 000bc521 000bb69d     ....I...!.......
   c02d0:	000bc4f1 000bc50d 000bc4ff 000bc51b     ................
   c02e0:	000bc4df 000bc4e3                       ........

000c02e8 <_ZTV7TwoWire>:
	...
   c02f0:	000bc5a9 000bc5f3 000bc5cb 000bc5ab     ................
   c0300:	000bc5d3 000bc5db 000bc5e3 000bc5eb     ................
   c0310:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   c0320:	203d2072 00006425                       r = %d..

000c0328 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0330:	000bc6a9 000bc6cd 000bcbb7 000bc6db     ................
   c0340:	000bc6ad                                ....

000c0344 <_ZTV9TCPClient>:
	...
   c034c:	000bbba1 000bbbb9 000bc625 000bc63f     ........%...?...
   c035c:	000bca4d 000bc669 000bc8c3 000bc69d     M...i...........
   c036c:	000bc955 000bc795 000bc8f1 000bcb01     U...............
   c037c:	000bc891 000bc69f 000bc651 000bc6e1     ........Q.......
   c038c:	000bc775                                u...

000c0390 <_ZTVN5spark9WiFiClassE>:
	...
   c0398:	000bcc2f 000bcc25 000bcc1b 000bcbc3     /...%...........
   c03a8:	000bcc0f 000bcc03 000bcdf9 000bce01     ................
   c03b8:	000bcbf7 000bcbef 000bcbe5 000bcbdb     ................
   c03c8:	000bce31                                1...

000c03cc <_ZTV10WiFiSignal>:
	...
   c03d4:	000bcbbd 000bcbcd 000bcbbf 000bcc39     ............9...
   c03e4:	000bcc6d 000bcc99 000bcccd              m...........

000c03f0 <_ZTVN5spark12NetworkClassE>:
	...
   c03f8:	000bcdb9 000bcdc3 000bcdcd 000bcdd7     ................
   c0408:	000bcde1 000bcded 000bcdf9 000bce01     ................
   c0418:	000bce09 000bce15 000bce1d 000bce27     ............'...
   c0428:	000bce31                                1...

000c042c <_ZSt7nothrow>:
	...

000c042d <_ZTSSt19_Sp_make_shared_tag>:
   c042d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   c043d:	5f646572 00676174                        red_tag....

000c0448 <_ZTISt19_Sp_make_shared_tag>:
   c0448:	000c0488 000c042d                       ....-...

000c0450 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c0450:	000c04e8 000c045c 000c050c              ....\.......

000c045c <_ZTSN10__cxxabiv117__class_type_infoE>:
   c045c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   c046c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   c047c:	00000045                                E...

000c0480 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c0480:	00000000 000c0450 000bd109 000bd11d     ....P...........
   c0490:	000bd2b1 000bd2b1 000bd187 000bd0c9     ................
   c04a0:	000bd16f 000bd131 000bd0fb              o...1.......

000c04ac <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c04ac:	000c04e8 000c04b8 000c0450              ........P...

000c04b8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c04b8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   c04c8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   c04d8:	456f666e 00000000                       nfoE....

000c04e0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c04e0:	00000000 000c04ac 000bd1b1 000bd1c5     ................
   c04f0:	000bd2b1 000bd2b1 000bd187 000bd0c9     ................
   c0500:	000bd285 000bd211 000bd1d9              ............

000c050c <_ZTISt9type_info>:
   c050c:	000c0488 000c0514                       ........

000c0514 <_ZTSSt9type_info>:
   c0514:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   c0524:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   c0534:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000c0541 <day_name.1>:
   c0541:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c0551:	61536972                                 riSat

000c0556 <mon_name.0>:
   c0556:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c0566:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c0576:	63654476                                vDec

000c057a <_ctype_>:
   c057a:	20202000 20202020 28282020 20282828     .         ((((( 
   c058a:	20202020 20202020 20202020 20202020                     
   c059a:	10108820 10101010 10101010 10101010      ...............
   c05aa:	04040410 04040404 10040404 10101010     ................
   c05ba:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c05ca:	01010101 01010101 01010101 10101010     ................
   c05da:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c05ea:	02020202 02020202 02020202 10101010     ................
   c05fa:	00000020 00000000 00000000 00000000      ...............
	...
   c067a:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
   c068a:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
   c069a:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   c06aa:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   c06ba:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   c06ca:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   c06da:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   c06ea:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   c06fa:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
   c070a:	632e646e 00666e00 74696e69               nd.c.nf.inity.

000c0718 <fpi.1>:
   c0718:	00000035 fffffbce 000003cb 00000001     5...............
   c0728:	00000000                                ....

000c072c <fpinan.0>:
   c072c:	00000034 fffffbce 000003cb 00000001     4...............
   c073c:	00000000                                ....

000c0740 <tinytens>:
   c0740:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   c0750:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   c0760:	64ac6f43 11680628 746e6d2f 726f772f     Co.d(.h./mnt/wor
   c0770:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   c0780:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   c0790:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   c07a0:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   c07b0:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   c07c0:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   c07d0:	696c2f62 732f6362 6e697274 74732f67     b/libc/string/st
   c07e0:	6b6f7472 4200632e 6f6c6c61 75732063     rtok.c.Balloc su
   c07f0:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
   c0800:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   c0810:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   c0820:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   c0830:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   c0840:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   c0850:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   c0860:	696c2f62 732f6362 696c6474 64672f62     b/libc/stdlib/gd
   c0870:	2d616f74 68746567 632e7865 00000000     toa-gethex.c....

000c0880 <_C_numeric_locale>:
   c0880:	000bf6b9 000bfe42 2003d0c8 4f500043     ....B...... C.PO
   c0890:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   c08a0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   c08b0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   c08c0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   c08d0:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   c08e0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   c08f0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   c0900:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   c0910:	00000063 00000000                       c.......

000c0918 <__mprec_bigtens>:
   c0918:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   c0928:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   c0938:	7f73bf3c 75154fdd                       <.s..O.u

000c0940 <__mprec_tens>:
   c0940:	00000000 3ff00000 00000000 40240000     .......?......$@
   c0950:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   c0960:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   c0970:	00000000 412e8480 00000000 416312d0     .......A......cA
   c0980:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   c0990:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   c09a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   c09b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   c09c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   c09d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   c09e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   c09f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   c0a00:	79d99db4 44ea7843                       ...yCx.D

000c0a08 <p05.0>:
   c0a08:	00000005 00000019 0000007d              ........}...

000c0a14 <link_const_data_end>:
   c0a14:	000b5891 	.word	0x000b5891
   c0a18:	000b7575 	.word	0x000b7575
   c0a1c:	000b8785 	.word	0x000b8785
   c0a20:	000b89b9 	.word	0x000b89b9
   c0a24:	000b9675 	.word	0x000b9675
   c0a28:	000b96c1 	.word	0x000b96c1
   c0a2c:	000bb68d 	.word	0x000bb68d
   c0a30:	000bb7e5 	.word	0x000bb7e5
   c0a34:	000bbb85 	.word	0x000bbb85
   c0a38:	000bbbcd 	.word	0x000bbbcd
   c0a3c:	000bcda5 	.word	0x000bcda5
   c0a40:	000bcf09 	.word	0x000bcf09
