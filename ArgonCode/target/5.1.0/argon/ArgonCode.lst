
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/5.1.0/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000871c  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc73c  000bc73c  0000c73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000208  2003d954  000bc760  0000d954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000c94  2003db60  2003db60  0001db60  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bc968  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc96c  000bc96c  0001c96c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bc972  000bc972  0001c972  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc996  000bc996  0001c996  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001443d6  00000000  00000000  0001c99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016117  00000000  00000000  00160d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003dbb1  00000000  00000000  00176e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000036b0  00000000  00000000  001b4a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b5a8  00000000  00000000  001b80e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003db36  00000000  00000000  001c3690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00048e0d  00000000  00000000  002011c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013b1e5  00000000  00000000  00249fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a088  00000000  00000000  003851b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_f2lz>:
   b490c:	ee07 0a90 	vmov	s15, r0
   b4910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4918:	d401      	bmi.n	b491e <__aeabi_f2lz+0x12>
   b491a:	f000 b80b 	b.w	b4934 <__aeabi_f2ulz>
   b491e:	eef1 7a67 	vneg.f32	s15, s15
   b4922:	b508      	push	{r3, lr}
   b4924:	ee17 0a90 	vmov	r0, s15
   b4928:	f000 f804 	bl	b4934 <__aeabi_f2ulz>
   b492c:	4240      	negs	r0, r0
   b492e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4932:	bd08      	pop	{r3, pc}

000b4934 <__aeabi_f2ulz>:
   b4934:	b5d0      	push	{r4, r6, r7, lr}
   b4936:	f7ff fcd7 	bl	b42e8 <__aeabi_f2d>
   b493a:	4b0c      	ldr	r3, [pc, #48]	; (b496c <__aeabi_f2ulz+0x38>)
   b493c:	2200      	movs	r2, #0
   b493e:	4606      	mov	r6, r0
   b4940:	460f      	mov	r7, r1
   b4942:	f7ff fd29 	bl	b4398 <__aeabi_dmul>
   b4946:	f7ff ffc1 	bl	b48cc <__aeabi_d2uiz>
   b494a:	4604      	mov	r4, r0
   b494c:	f7ff fcaa 	bl	b42a4 <__aeabi_ui2d>
   b4950:	4b07      	ldr	r3, [pc, #28]	; (b4970 <__aeabi_f2ulz+0x3c>)
   b4952:	2200      	movs	r2, #0
   b4954:	f7ff fd20 	bl	b4398 <__aeabi_dmul>
   b4958:	4602      	mov	r2, r0
   b495a:	460b      	mov	r3, r1
   b495c:	4630      	mov	r0, r6
   b495e:	4639      	mov	r1, r7
   b4960:	f7ff fb62 	bl	b4028 <__aeabi_dsub>
   b4964:	f7ff ffb2 	bl	b48cc <__aeabi_d2uiz>
   b4968:	4621      	mov	r1, r4
   b496a:	bdd0      	pop	{r4, r6, r7, pc}
   b496c:	3df00000 	.word	0x3df00000
   b4970:	41f00000 	.word	0x41f00000

000b4974 <__aeabi_d2ulz>:
   b4974:	b5d0      	push	{r4, r6, r7, lr}
   b4976:	4b0c      	ldr	r3, [pc, #48]	; (b49a8 <__aeabi_d2ulz+0x34>)
   b4978:	2200      	movs	r2, #0
   b497a:	4606      	mov	r6, r0
   b497c:	460f      	mov	r7, r1
   b497e:	f7ff fd0b 	bl	b4398 <__aeabi_dmul>
   b4982:	f7ff ffa3 	bl	b48cc <__aeabi_d2uiz>
   b4986:	4604      	mov	r4, r0
   b4988:	f7ff fc8c 	bl	b42a4 <__aeabi_ui2d>
   b498c:	4b07      	ldr	r3, [pc, #28]	; (b49ac <__aeabi_d2ulz+0x38>)
   b498e:	2200      	movs	r2, #0
   b4990:	f7ff fd02 	bl	b4398 <__aeabi_dmul>
   b4994:	4602      	mov	r2, r0
   b4996:	460b      	mov	r3, r1
   b4998:	4630      	mov	r0, r6
   b499a:	4639      	mov	r1, r7
   b499c:	f7ff fb44 	bl	b4028 <__aeabi_dsub>
   b49a0:	f7ff ff94 	bl	b48cc <__aeabi_d2uiz>
   b49a4:	4621      	mov	r1, r4
   b49a6:	bdd0      	pop	{r4, r6, r7, pc}
   b49a8:	3df00000 	.word	0x3df00000
   b49ac:	41f00000 	.word	0x41f00000

000b49b0 <strcmp>:
   b49b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49b8:	2a01      	cmp	r2, #1
   b49ba:	bf28      	it	cs
   b49bc:	429a      	cmpcs	r2, r3
   b49be:	d0f7      	beq.n	b49b0 <strcmp>
   b49c0:	1ad0      	subs	r0, r2, r3
   b49c2:	4770      	bx	lr

000b49c4 <strlen>:
   b49c4:	4603      	mov	r3, r0
   b49c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b49ca:	2a00      	cmp	r2, #0
   b49cc:	d1fb      	bne.n	b49c6 <strlen+0x2>
   b49ce:	1a18      	subs	r0, r3, r0
   b49d0:	3801      	subs	r0, #1
   b49d2:	4770      	bx	lr

000b49d4 <__aeabi_d2lz>:
   b49d4:	b538      	push	{r3, r4, r5, lr}
   b49d6:	2200      	movs	r2, #0
   b49d8:	2300      	movs	r3, #0
   b49da:	4604      	mov	r4, r0
   b49dc:	460d      	mov	r5, r1
   b49de:	f7ff ff4d 	bl	b487c <__aeabi_dcmplt>
   b49e2:	b928      	cbnz	r0, b49f0 <__aeabi_d2lz+0x1c>
   b49e4:	4620      	mov	r0, r4
   b49e6:	4629      	mov	r1, r5
   b49e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b49ec:	f7ff bfc2 	b.w	b4974 <__aeabi_d2ulz>
   b49f0:	4620      	mov	r0, r4
   b49f2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b49f6:	f7ff ffbd 	bl	b4974 <__aeabi_d2ulz>
   b49fa:	4240      	negs	r0, r0
   b49fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a00:	bd38      	pop	{r3, r4, r5, pc}
   b4a02:	bf00      	nop

000b4a04 <module_user_pre_init>:
   b4a04:	4809      	ldr	r0, [pc, #36]	; (b4a2c <module_user_pre_init+0x28>)
   b4a06:	490a      	ldr	r1, [pc, #40]	; (b4a30 <module_user_pre_init+0x2c>)
   b4a08:	4288      	cmp	r0, r1
   b4a0a:	b508      	push	{r3, lr}
   b4a0c:	d005      	beq.n	b4a1a <module_user_pre_init+0x16>
   b4a0e:	4a09      	ldr	r2, [pc, #36]	; (b4a34 <module_user_pre_init+0x30>)
   b4a10:	4282      	cmp	r2, r0
   b4a12:	d002      	beq.n	b4a1a <module_user_pre_init+0x16>
   b4a14:	1a12      	subs	r2, r2, r0
   b4a16:	f004 fe4c 	bl	b96b2 <memcpy>
   b4a1a:	4807      	ldr	r0, [pc, #28]	; (b4a38 <module_user_pre_init+0x34>)
   b4a1c:	4a07      	ldr	r2, [pc, #28]	; (b4a3c <module_user_pre_init+0x38>)
   b4a1e:	2100      	movs	r1, #0
   b4a20:	1a12      	subs	r2, r2, r0
   b4a22:	f004 fe6e 	bl	b9702 <memset>
   b4a26:	4801      	ldr	r0, [pc, #4]	; (b4a2c <module_user_pre_init+0x28>)
   b4a28:	bd08      	pop	{r3, pc}
   b4a2a:	bf00      	nop
   b4a2c:	2003d954 	.word	0x2003d954
   b4a30:	000bc760 	.word	0x000bc760
   b4a34:	2003db5c 	.word	0x2003db5c
   b4a38:	2003db60 	.word	0x2003db60
   b4a3c:	2003e7f4 	.word	0x2003e7f4

000b4a40 <module_user_init>:
   b4a40:	b570      	push	{r4, r5, r6, lr}
   b4a42:	4e07      	ldr	r6, [pc, #28]	; (b4a60 <module_user_init+0x20>)
   b4a44:	4c07      	ldr	r4, [pc, #28]	; (b4a64 <module_user_init+0x24>)
   b4a46:	f003 fdd5 	bl	b85f4 <module_user_init_hook>
   b4a4a:	1ba4      	subs	r4, r4, r6
   b4a4c:	08a4      	lsrs	r4, r4, #2
   b4a4e:	2500      	movs	r5, #0
   b4a50:	42ac      	cmp	r4, r5
   b4a52:	d100      	bne.n	b4a56 <module_user_init+0x16>
   b4a54:	bd70      	pop	{r4, r5, r6, pc}
   b4a56:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a5a:	4798      	blx	r3
   b4a5c:	3501      	adds	r5, #1
   b4a5e:	e7f7      	b.n	b4a50 <module_user_init+0x10>
   b4a60:	000bc714 	.word	0x000bc714
   b4a64:	000bc73c 	.word	0x000bc73c

000b4a68 <module_user_setup>:
   b4a68:	f000 bdac 	b.w	b55c4 <setup>

000b4a6c <module_user_loop>:
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	f000 feab 	bl	b57c8 <loop>
   b4a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4a76:	f003 bd75 	b.w	b8564 <_post_loop>

000b4a7a <_Znwj>:
   b4a7a:	f001 bcbd 	b.w	b63f8 <malloc>

000b4a7e <_Znaj>:
   b4a7e:	f001 bcbb 	b.w	b63f8 <malloc>

000b4a82 <_ZdlPvj>:
   b4a82:	f001 bcc1 	b.w	b6408 <free>

000b4a86 <__cxa_guard_acquire>:
   b4a86:	7800      	ldrb	r0, [r0, #0]
   b4a88:	fab0 f080 	clz	r0, r0
   b4a8c:	0940      	lsrs	r0, r0, #5
   b4a8e:	4770      	bx	lr

000b4a90 <__cxa_guard_release>:
   b4a90:	2301      	movs	r3, #1
   b4a92:	7003      	strb	r3, [r0, #0]
   b4a94:	4770      	bx	lr
	...

000b4a98 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
}
/**
 * @brief    Sets a flag when a new BLE connection is established
 */
void BLEOnConnectcallback(const BlePeerDevice &peer, void *context)
{
   b4a98:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b4a9a:	4b04      	ldr	r3, [pc, #16]	; (b4aac <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b4a9c:	2201      	movs	r2, #1
   b4a9e:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4aa0:	f001 f9bc 	bl	b5e1c <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b4aa4:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b4aa6:	6018      	str	r0, [r3, #0]
}
   b4aa8:	bd08      	pop	{r3, pc}
   b4aaa:	bf00      	nop
   b4aac:	2003db7d 	.word	0x2003db7d
   b4ab0:	2003dca8 	.word	0x2003dca8

000b4ab4 <_Z13handle_sensorv>:
/**
 * @brief    IRQ handler for the KW sensor. This function is called every time the KW sensor detects a pulse.
 */
void handle_sensor(void)
{
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	f001 f9b1 	bl	b5e1c <HAL_Timer_Get_Milli_Seconds>
    static unsigned long last_read = 0;
    unsigned long current_reading = millis();
    unsigned long delta = current_reading - last_read;
   b4aba:	490c      	ldr	r1, [pc, #48]	; (b4aec <_Z13handle_sensorv+0x38>)
   b4abc:	680b      	ldr	r3, [r1, #0]
   b4abe:	1ac3      	subs	r3, r0, r3

    // Check if we have a valid reading. I.e. at least 100 ms since last reading, which is equal to 36kW
    if (delta > 100)
   b4ac0:	2b64      	cmp	r3, #100	; 0x64
   b4ac2:	d911      	bls.n	b4ae8 <_Z13handle_sensorv+0x34>
    {
        // We have a valid reading
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4ac4:	4a0a      	ldr	r2, [pc, #40]	; (b4af0 <_Z13handle_sensorv+0x3c>)
   b4ac6:	fbb2 f3f3 	udiv	r3, r2, r3
   b4aca:	4a0a      	ldr	r2, [pc, #40]	; (b4af4 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b4acc:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4ace:	6013      	str	r3, [r2, #0]

        // One flash from sensor equals 1 Whr - Add to total
        wh_today[currentHour] += 1;
   b4ad0:	4b09      	ldr	r3, [pc, #36]	; (b4af8 <_Z13handle_sensorv+0x44>)
   b4ad2:	7819      	ldrb	r1, [r3, #0]
   b4ad4:	4b09      	ldr	r3, [pc, #36]	; (b4afc <_Z13handle_sensorv+0x48>)
   b4ad6:	681a      	ldr	r2, [r3, #0]
   b4ad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b4adc:	3301      	adds	r3, #1
   b4ade:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update flag - Transmit sensor values
        TRANSMIT_SENSOR = true;
   b4ae2:	4b07      	ldr	r3, [pc, #28]	; (b4b00 <_Z13handle_sensorv+0x4c>)
   b4ae4:	2201      	movs	r2, #1
   b4ae6:	701a      	strb	r2, [r3, #0]
    }
}
   b4ae8:	bd08      	pop	{r3, pc}
   b4aea:	bf00      	nop
   b4aec:	2003dc2c 	.word	0x2003dc2c
   b4af0:	0036ee80 	.word	0x0036ee80
   b4af4:	2003dc94 	.word	0x2003dc94
   b4af8:	2003dca4 	.word	0x2003dca4
   b4afc:	2003e1b8 	.word	0x2003e1b8
   b4b00:	2003db82 	.word	0x2003db82

000b4b04 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4b04:	6943      	ldr	r3, [r0, #20]
   b4b06:	b113      	cbz	r3, b4b0e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b08:	6983      	ldr	r3, [r0, #24]
   b4b0a:	300c      	adds	r0, #12
   b4b0c:	4718      	bx	r3
            callback();
        }
    }
   b4b0e:	4770      	bx	lr

000b4b10 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4b10:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4b12:	2100      	movs	r1, #0
   b4b14:	4604      	mov	r4, r0
   b4b16:	4608      	mov	r0, r1
   b4b18:	f001 fa2a 	bl	b5f70 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4b1c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4b1e:	4620      	mov	r0, r4
   b4b20:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4b22:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4b24:	f001 fa3c 	bl	b5fa0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4b28:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4b2a:	b10c      	cbz	r4, b4b30 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4b2c:	2301      	movs	r3, #1
   b4b2e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4b30:	2100      	movs	r1, #0
   b4b32:	2001      	movs	r0, #1
   b4b34:	f001 fa1c 	bl	b5f70 <os_thread_scheduling>
            }
        }
        if (t) {
   b4b38:	b12c      	cbz	r4, b4b46 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4b3a:	6823      	ldr	r3, [r4, #0]
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	689b      	ldr	r3, [r3, #8]
   b4b40:	4798      	blx	r3
            t->running = false;
   b4b42:	2300      	movs	r3, #0
   b4b44:	7123      	strb	r3, [r4, #4]
        }
    }
   b4b46:	b002      	add	sp, #8
   b4b48:	bd10      	pop	{r4, pc}

000b4b4a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4b4a:	2a01      	cmp	r2, #1
   b4b4c:	d102      	bne.n	b4b54 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b4e:	6001      	str	r1, [r0, #0]
      }
   b4b50:	2000      	movs	r0, #0
   b4b52:	4770      	bx	lr
	  switch (__op)
   b4b54:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4b56:	bf04      	itt	eq
   b4b58:	680b      	ldreq	r3, [r1, #0]
   b4b5a:	6003      	streq	r3, [r0, #0]
	      break;
   b4b5c:	e7f8      	b.n	b4b50 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4b5e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4b5e:	6803      	ldr	r3, [r0, #0]
   b4b60:	4718      	bx	r3

000b4b62 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4b62:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4b64:	6880      	ldr	r0, [r0, #8]
   b4b66:	b130      	cbz	r0, b4b76 <_ZN5Timer4stopEj.isra.0+0x14>
   b4b68:	2300      	movs	r3, #0
   b4b6a:	e9cd 1300 	strd	r1, r3, [sp]
   b4b6e:	461a      	mov	r2, r3
   b4b70:	2102      	movs	r1, #2
   b4b72:	f001 fa1d 	bl	b5fb0 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4b76:	b003      	add	sp, #12
   b4b78:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b7c <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b4b7c:	b530      	push	{r4, r5, lr}
   b4b7e:	4605      	mov	r5, r0
   b4b80:	b085      	sub	sp, #20
   b4b82:	460c      	mov	r4, r1
        stop(fromISR);
   b4b84:	4611      	mov	r1, r2
   b4b86:	9203      	str	r2, [sp, #12]
   b4b88:	f7ff ffeb 	bl	b4b62 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4b8c:	68a8      	ldr	r0, [r5, #8]
   b4b8e:	b130      	cbz	r0, b4b9e <_ZN5Timer6_startEjb.isra.0+0x22>
   b4b90:	2300      	movs	r3, #0
   b4b92:	e9cd 4300 	strd	r4, r3, [sp]
   b4b96:	9a03      	ldr	r2, [sp, #12]
   b4b98:	4619      	mov	r1, r3
   b4b9a:	f001 fa09 	bl	b5fb0 <os_timer_change>
    }
   b4b9e:	b005      	add	sp, #20
   b4ba0:	bd30      	pop	{r4, r5, pc}
	...

000b4ba4 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b4ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b4ba8:	f003 fc62 	bl	b8470 <_ZN9TimeClass4hourEv>
   b4bac:	4f26      	ldr	r7, [pc, #152]	; (b4c48 <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b4bae:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4c4c <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b4bb2:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b4bb4:	f003 fc68 	bl	b8488 <_ZN9TimeClass6minuteEv>
   b4bb8:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b4bba:	f003 fc71 	bl	b84a0 <_ZN9TimeClass6secondEv>
   b4bbe:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b4bc0:	f003 fc7a 	bl	b84b8 <_ZN9TimeClass3dayEv>
    timer.stop();
   b4bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b4bc8:	4604      	mov	r4, r0
    timer.stop();
   b4bca:	4640      	mov	r0, r8
   b4bcc:	f7ff ffc9 	bl	b4b62 <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4bd0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b4bd4:	b178      	cbz	r0, b4bf6 <_Z10check_timev+0x52>
   b4bd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b4bda:	b2ed      	uxtb	r5, r5
   b4bdc:	2200      	movs	r2, #0
   b4bde:	e9cd 1200 	strd	r1, r2, [sp]
   b4be2:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4be6:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4bea:	43ed      	mvns	r5, r5
   b4bec:	fb01 5303 	mla	r3, r1, r3, r5
   b4bf0:	2103      	movs	r1, #3
   b4bf2:	f001 f9dd 	bl	b5fb0 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4bf6:	4815      	ldr	r0, [pc, #84]	; (b4c4c <_Z10check_timev+0xa8>)
   b4bf8:	2200      	movs	r2, #0
   b4bfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4bfe:	f7ff ffbd 	bl	b4b7c <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b4c02:	783b      	ldrb	r3, [r7, #0]
   b4c04:	2b0d      	cmp	r3, #13
   b4c06:	d114      	bne.n	b4c32 <_Z10check_timev+0x8e>
   b4c08:	4a11      	ldr	r2, [pc, #68]	; (b4c50 <_Z10check_timev+0xac>)
   b4c0a:	6811      	ldr	r1, [r2, #0]
   b4c0c:	b2e4      	uxtb	r4, r4
   b4c0e:	42a1      	cmp	r1, r4
   b4c10:	d003      	beq.n	b4c1a <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b4c12:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4c14:	4a0f      	ldr	r2, [pc, #60]	; (b4c54 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b4c16:	2101      	movs	r1, #1
   b4c18:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4c1a:	b93e      	cbnz	r6, b4c2c <_Z10check_timev+0x88>
   b4c1c:	4a0e      	ldr	r2, [pc, #56]	; (b4c58 <_Z10check_timev+0xb4>)
   b4c1e:	6811      	ldr	r1, [r2, #0]
   b4c20:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b4c22:	bf1f      	itttt	ne
   b4c24:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4c26:	4b0d      	ldrne	r3, [pc, #52]	; (b4c5c <_Z10check_timev+0xb8>)
   b4c28:	2201      	movne	r2, #1
   b4c2a:	701a      	strbne	r2, [r3, #0]
    }
   b4c2c:	b002      	add	sp, #8
   b4c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b4c32:	2b00      	cmp	r3, #0
   b4c34:	d1f1      	bne.n	b4c1a <_Z10check_timev+0x76>
   b4c36:	4a0a      	ldr	r2, [pc, #40]	; (b4c60 <_Z10check_timev+0xbc>)
   b4c38:	6811      	ldr	r1, [r2, #0]
   b4c3a:	b2e4      	uxtb	r4, r4
   b4c3c:	42a1      	cmp	r1, r4
   b4c3e:	d0ec      	beq.n	b4c1a <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b4c40:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b4c42:	4a08      	ldr	r2, [pc, #32]	; (b4c64 <_Z10check_timev+0xc0>)
   b4c44:	e7e7      	b.n	b4c16 <_Z10check_timev+0x72>
   b4c46:	bf00      	nop
   b4c48:	2003dca4 	.word	0x2003dca4
   b4c4c:	2003e150 	.word	0x2003e150
   b4c50:	2003d96c 	.word	0x2003d96c
   b4c54:	2003db7c 	.word	0x2003db7c
   b4c58:	2003d974 	.word	0x2003d974
   b4c5c:	2003db83 	.word	0x2003db83
   b4c60:	2003d970 	.word	0x2003d970
   b4c64:	2003db7e 	.word	0x2003db7e

000b4c68 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c68:	b40e      	push	{r1, r2, r3}
   b4c6a:	b503      	push	{r0, r1, lr}
   b4c6c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4c6e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c70:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4c74:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4c76:	f003 fb26 	bl	b82c6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4c7a:	b002      	add	sp, #8
   b4c7c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c80:	b003      	add	sp, #12
   b4c82:	4770      	bx	lr
   b4c84:	0000      	movs	r0, r0
	...

000b4c88 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b4c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b4c8c:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b4c8e:	4608      	mov	r0, r1
{
   b4c90:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b4c92:	f7ff fe97 	bl	b49c4 <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b4c96:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b4c98:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b4c9a:	a801      	add	r0, sp, #4
   b4c9c:	f004 fd77 	bl	b978e <strcpy>
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b4ca0:	4939      	ldr	r1, [pc, #228]	; (b4d88 <_Z9myHandlerPKcS0_+0x100>)
   b4ca2:	4d3a      	ldr	r5, [pc, #232]	; (b4d8c <_Z9myHandlerPKcS0_+0x104>)
   b4ca4:	a801      	add	r0, sp, #4
   b4ca6:	f005 fbe9 	bl	ba47c <strtok>
   b4caa:	f004 fcee 	bl	b968a <atoi>
   b4cae:	4621      	mov	r1, r4
   b4cb0:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b4cb4:	f004 fd5c 	bl	b9770 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b4cb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4cbc:	d214      	bcs.n	b4ce8 <_Z9myHandlerPKcS0_+0x60>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b4cbe:	f004 f853 	bl	b8d68 <_Z16_fetch_usbserialv>
   b4cc2:	4933      	ldr	r1, [pc, #204]	; (b4d90 <_Z9myHandlerPKcS0_+0x108>)
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4cc4:	4f33      	ldr	r7, [pc, #204]	; (b4d94 <_Z9myHandlerPKcS0_+0x10c>)
        Serial.printf("%s\n", temp);
   b4cc6:	462a      	mov	r2, r5
   b4cc8:	f7ff ffce 	bl	b4c68 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b4ccc:	4932      	ldr	r1, [pc, #200]	; (b4d98 <_Z9myHandlerPKcS0_+0x110>)
   b4cce:	4628      	mov	r0, r5
   b4cd0:	f005 fbd4 	bl	ba47c <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4cd4:	f20f 0998 	addw	r9, pc, #152	; 0x98
   b4cd8:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b4cdc:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4cde:	2600      	movs	r6, #0
            if (token == NULL)
   b4ce0:	b928      	cbnz	r0, b4cee <_Z9myHandlerPKcS0_+0x66>
            }
            token = strtok(NULL, ",!");

        }
        CALCULATE = true;
   b4ce2:	4b2e      	ldr	r3, [pc, #184]	; (b4d9c <_Z9myHandlerPKcS0_+0x114>)
   b4ce4:	2201      	movs	r2, #1
   b4ce6:	701a      	strb	r2, [r3, #0]
    }
   b4ce8:	b004      	add	sp, #16
   b4cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i >= 0 && i < 7)
   b4cee:	2c06      	cmp	r4, #6
   b4cf0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; b4da0 <_Z9myHandlerPKcS0_+0x118>
   b4cf4:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b4cf8:	dc19      	bgt.n	b4d2e <_Z9myHandlerPKcS0_+0xa6>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b4cfa:	f004 fcc3 	bl	b9684 <atof>
   b4cfe:	f8da 3000 	ldr.w	r3, [sl]
   b4d02:	4632      	mov	r2, r6
   b4d04:	ec51 0b10 	vmov	r0, r1, d0
   b4d08:	441d      	add	r5, r3
   b4d0a:	463b      	mov	r3, r7
   b4d0c:	f7ff fc6e 	bl	b45ec <__aeabi_ddiv>
   b4d10:	a319      	add	r3, pc, #100	; (adr r3, b4d78 <_Z9myHandlerPKcS0_+0xf0>)
   b4d12:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d16:	f7ff f989 	bl	b402c <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b4d1a:	3401      	adds	r4, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d1c:	e9c5 0100 	strd	r0, r1, [r5]
            token = strtok(NULL, ",!");
   b4d20:	491d      	ldr	r1, [pc, #116]	; (b4d98 <_Z9myHandlerPKcS0_+0x110>)
   b4d22:	2000      	movs	r0, #0
   b4d24:	f005 fbaa 	bl	ba47c <strtok>
        for (int i = 0; i < MAX_RANGE; i++)
   b4d28:	2c18      	cmp	r4, #24
   b4d2a:	d1d9      	bne.n	b4ce0 <_Z9myHandlerPKcS0_+0x58>
   b4d2c:	e7d9      	b.n	b4ce2 <_Z9myHandlerPKcS0_+0x5a>
            else if (i > 16 && i < 22)
   b4d2e:	f1a4 0311 	sub.w	r3, r4, #17
   b4d32:	2b04      	cmp	r3, #4
   b4d34:	d80d      	bhi.n	b4d52 <_Z9myHandlerPKcS0_+0xca>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4d36:	f004 fca5 	bl	b9684 <atof>
   b4d3a:	f8da 3000 	ldr.w	r3, [sl]
   b4d3e:	4632      	mov	r2, r6
   b4d40:	ec51 0b10 	vmov	r0, r1, d0
   b4d44:	441d      	add	r5, r3
   b4d46:	463b      	mov	r3, r7
   b4d48:	f7ff fc50 	bl	b45ec <__aeabi_ddiv>
   b4d4c:	4642      	mov	r2, r8
   b4d4e:	464b      	mov	r3, r9
   b4d50:	e7e1      	b.n	b4d16 <_Z9myHandlerPKcS0_+0x8e>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d52:	f004 fc97 	bl	b9684 <atof>
   b4d56:	f8da 3000 	ldr.w	r3, [sl]
   b4d5a:	4632      	mov	r2, r6
   b4d5c:	ec51 0b10 	vmov	r0, r1, d0
   b4d60:	441d      	add	r5, r3
   b4d62:	463b      	mov	r3, r7
   b4d64:	f7ff fc42 	bl	b45ec <__aeabi_ddiv>
   b4d68:	a305      	add	r3, pc, #20	; (adr r3, b4d80 <_Z9myHandlerPKcS0_+0xf8>)
   b4d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d6e:	e7d2      	b.n	b4d16 <_Z9myHandlerPKcS0_+0x8e>
   b4d70:	2d0e5604 	.word	0x2d0e5604
   b4d74:	3ffe9db2 	.word	0x3ffe9db2
   b4d78:	ebedfa44 	.word	0xebedfa44
   b4d7c:	3fcb39c0 	.word	0x3fcb39c0
   b4d80:	42c3c9ef 	.word	0x42c3c9ef
   b4d84:	3fe469ad 	.word	0x3fe469ad
   b4d88:	000bb818 	.word	0x000bb818
   b4d8c:	2003dd4c 	.word	0x2003dd4c
   b4d90:	000bb820 	.word	0x000bb820
   b4d94:	408f4000 	.word	0x408f4000
   b4d98:	000bb824 	.word	0x000bb824
   b4d9c:	2003db61 	.word	0x2003db61
   b4da0:	2003dc9c 	.word	0x2003dc9c

000b4da4 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4da4:	b40e      	push	{r1, r2, r3}
   b4da6:	b503      	push	{r0, r1, lr}
   b4da8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4daa:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4dac:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4db0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4db2:	f003 fa88 	bl	b82c6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4db6:	b002      	add	sp, #8
   b4db8:	f85d eb04 	ldr.w	lr, [sp], #4
   b4dbc:	b003      	add	sp, #12
   b4dbe:	4770      	bx	lr

000b4dc0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4dc0:	b510      	push	{r4, lr}
      if (_M_manager)
   b4dc2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4dc4:	4604      	mov	r4, r0
      if (_M_manager)
   b4dc6:	b113      	cbz	r3, b4dce <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4dc8:	2203      	movs	r2, #3
   b4dca:	4601      	mov	r1, r0
   b4dcc:	4798      	blx	r3
    }
   b4dce:	4620      	mov	r0, r4
   b4dd0:	bd10      	pop	{r4, pc}
	...

000b4dd4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4dd4:	b538      	push	{r3, r4, r5, lr}
   b4dd6:	4b0f      	ldr	r3, [pc, #60]	; (b4e14 <_ZN5TimerD1Ev+0x40>)
   b4dd8:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4dda:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4ddc:	4604      	mov	r4, r0
        if (handle) {
   b4dde:	b19b      	cbz	r3, b4e08 <_ZN5TimerD1Ev+0x34>
            stop();
   b4de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4de4:	f7ff febd 	bl	b4b62 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4de8:	68a0      	ldr	r0, [r4, #8]
   b4dea:	2100      	movs	r1, #0
   b4dec:	f001 f900 	bl	b5ff0 <os_timer_set_id>
            while (running) {
   b4df0:	7923      	ldrb	r3, [r4, #4]
   b4df2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4df6:	b113      	cbz	r3, b4dfe <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4df8:	f001 f8b2 	bl	b5f60 <os_thread_yield>
            while (running) {
   b4dfc:	e7f8      	b.n	b4df0 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b4dfe:	68a0      	ldr	r0, [r4, #8]
   b4e00:	4629      	mov	r1, r5
   b4e02:	f001 f8c5 	bl	b5f90 <os_timer_destroy>
            handle = nullptr;
   b4e06:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4e08:	f104 000c 	add.w	r0, r4, #12
   b4e0c:	f7ff ffd8 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
    }
   b4e10:	4620      	mov	r0, r4
   b4e12:	bd38      	pop	{r3, r4, r5, pc}
   b4e14:	000bbca0 	.word	0x000bbca0

000b4e18 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4e18:	b510      	push	{r4, lr}
   b4e1a:	4604      	mov	r4, r0
    }
   b4e1c:	f7ff ffda 	bl	b4dd4 <_ZN5TimerD1Ev>
   b4e20:	4620      	mov	r0, r4
   b4e22:	211c      	movs	r1, #28
   b4e24:	f7ff fe2d 	bl	b4a82 <_ZdlPvj>
   b4e28:	4620      	mov	r0, r4
   b4e2a:	bd10      	pop	{r4, pc}

000b4e2c <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b4e2c:	b570      	push	{r4, r5, r6, lr}
   b4e2e:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b4e30:	f002 fb50 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e34:	2102      	movs	r1, #2
   b4e36:	f002 fb9e 	bl	b7576 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4e3a:	f002 fb4b 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e3e:	f002 fb93 	bl	b7568 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4e42:	f002 fb47 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e46:	4a3e      	ldr	r2, [pc, #248]	; (b4f40 <_Z9ble_setupv+0x114>)
   b4e48:	4c3e      	ldr	r4, [pc, #248]	; (b4f44 <_Z9ble_setupv+0x118>)
   b4e4a:	4601      	mov	r1, r0
   b4e4c:	a80b      	add	r0, sp, #44	; 0x2c
   b4e4e:	f003 f8cb 	bl	b7fe8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4e52:	a80b      	add	r0, sp, #44	; 0x2c
   b4e54:	f002 fc43 	bl	b76de <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4e58:	f002 fb3c 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e5c:	4a3a      	ldr	r2, [pc, #232]	; (b4f48 <_Z9ble_setupv+0x11c>)
   b4e5e:	4601      	mov	r1, r0
   b4e60:	a80b      	add	r0, sp, #44	; 0x2c
   b4e62:	f003 f8c1 	bl	b7fe8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4e66:	a80b      	add	r0, sp, #44	; 0x2c
   b4e68:	f002 fc39 	bl	b76de <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4e6c:	f002 fb32 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e70:	4a36      	ldr	r2, [pc, #216]	; (b4f4c <_Z9ble_setupv+0x120>)
   b4e72:	4601      	mov	r1, r0
   b4e74:	a80b      	add	r0, sp, #44	; 0x2c
   b4e76:	f003 f8b7 	bl	b7fe8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4e7a:	a80b      	add	r0, sp, #44	; 0x2c
   b4e7c:	f002 fc2f 	bl	b76de <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4e80:	f002 fb28 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e84:	4a32      	ldr	r2, [pc, #200]	; (b4f50 <_Z9ble_setupv+0x124>)
   b4e86:	4601      	mov	r1, r0
   b4e88:	a80b      	add	r0, sp, #44	; 0x2c
   b4e8a:	f003 f8ad 	bl	b7fe8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4e8e:	a80b      	add	r0, sp, #44	; 0x2c
   b4e90:	f002 fc25 	bl	b76de <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b4e94:	f002 fb1e 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e98:	4a2e      	ldr	r2, [pc, #184]	; (b4f54 <_Z9ble_setupv+0x128>)
   b4e9a:	4601      	mov	r1, r0
   b4e9c:	a80b      	add	r0, sp, #44	; 0x2c
   b4e9e:	f003 f8a3 	bl	b7fe8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4ea2:	a80b      	add	r0, sp, #44	; 0x2c
   b4ea4:	f002 fc1b 	bl	b76de <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b4ea8:	f002 fb14 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4eac:	4a2a      	ldr	r2, [pc, #168]	; (b4f58 <_Z9ble_setupv+0x12c>)
   b4eae:	4601      	mov	r1, r0
   b4eb0:	a80b      	add	r0, sp, #44	; 0x2c
   b4eb2:	f003 f899 	bl	b7fe8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4eb6:	a80b      	add	r0, sp, #44	; 0x2c
   b4eb8:	f002 fc11 	bl	b76de <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b4ebc:	a803      	add	r0, sp, #12
   b4ebe:	f002 fd44 	bl	b794a <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b4ec2:	4b26      	ldr	r3, [pc, #152]	; (b4f5c <_Z9ble_setupv+0x130>)
   b4ec4:	a803      	add	r0, sp, #12
   b4ec6:	6819      	ldr	r1, [r3, #0]
   b4ec8:	f002 fd52 	bl	b7970 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4ece:	ad06      	add	r5, sp, #24
   b4ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4ed2:	ad06      	add	r5, sp, #24
   b4ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ed6:	6826      	ldr	r6, [r4, #0]
   b4ed8:	ac0b      	add	r4, sp, #44	; 0x2c
   b4eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4edc:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4ede:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4ee0:	f002 f8f6 	bl	b70d0 <_ZNK8particle7BleUuid4typeEv>
   b4ee4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4ee6:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4ee8:	bb0c      	cbnz	r4, b4f2e <_Z9ble_setupv+0x102>
            uint16_t uuid16 = tempUUID.shorted();
   b4eea:	f002 f90d 	bl	b7108 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4eee:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4ef0:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4ef4:	2302      	movs	r3, #2
   b4ef6:	f10d 020a 	add.w	r2, sp, #10
   b4efa:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4efc:	a803      	add	r0, sp, #12
   b4efe:	f002 fd19 	bl	b7934 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4f02:	f002 fae7 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f06:	2200      	movs	r2, #0
   b4f08:	a903      	add	r1, sp, #12
   b4f0a:	f002 fb7b 	bl	b7604 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4f0e:	f003 ff2b 	bl	b8d68 <_Z16_fetch_usbserialv>
   b4f12:	4913      	ldr	r1, [pc, #76]	; (b4f60 <_Z9ble_setupv+0x134>)
   b4f14:	f003 f9af 	bl	b8276 <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4f18:	f002 fadc 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f1c:	4911      	ldr	r1, [pc, #68]	; (b4f64 <_Z9ble_setupv+0x138>)
   b4f1e:	2200      	movs	r2, #0
   b4f20:	f002 ff64 	bl	b7dec <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4f24:	9803      	ldr	r0, [sp, #12]
   b4f26:	f001 fa6f 	bl	b6408 <free>

}
   b4f2a:	b010      	add	sp, #64	; 0x40
   b4f2c:	bd70      	pop	{r4, r5, r6, pc}
   b4f2e:	f002 f8ed 	bl	b710c <_ZNK8particle7BleUuid8rawBytesEv>
   b4f32:	2300      	movs	r3, #0
   b4f34:	9300      	str	r3, [sp, #0]
   b4f36:	4602      	mov	r2, r0
   b4f38:	2310      	movs	r3, #16
   b4f3a:	2107      	movs	r1, #7
   b4f3c:	e7de      	b.n	b4efc <_Z9ble_setupv+0xd0>
   b4f3e:	bf00      	nop
   b4f40:	2003db84 	.word	0x2003db84
   b4f44:	2003dbb0 	.word	0x2003dbb0
   b4f48:	2003db74 	.word	0x2003db74
   b4f4c:	2003db64 	.word	0x2003db64
   b4f50:	2003db6c 	.word	0x2003db6c
   b4f54:	2003db8c 	.word	0x2003db8c
   b4f58:	2003db94 	.word	0x2003db94
   b4f5c:	2003d968 	.word	0x2003d968
   b4f60:	000bb827 	.word	0x000bb827
   b4f64:	000b4a99 	.word	0x000b4a99

000b4f68 <_Z8calc_lowPA2_iPdi>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int size)
{
   b4f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f6c:	ed2d 8b02 	vpush	{d8}
    int cnt = 0;
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0.0;
   b4f70:	ed9f 7b51 	vldr	d7, [pc, #324]	; b50b8 <_Z8calc_lowPA2_iPdi+0x150>
{
   b4f74:	b09b      	sub	sp, #108	; 0x6c
    double last_small = 1000.0; // Assign any absurdly high value
   b4f76:	f8df 9164 	ldr.w	r9, [pc, #356]	; b50dc <_Z8calc_lowPA2_iPdi+0x174>
{
   b4f7a:	9201      	str	r2, [sp, #4]
   b4f7c:	4606      	mov	r6, r0
   b4f7e:	460f      	mov	r7, r1
   b4f80:	468b      	mov	fp, r1

    for (int i = 0; i < size; i++)
   b4f82:	f04f 0a00 	mov.w	sl, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b4f86:	f04f 0800 	mov.w	r8, #0
    double last_big = 0.0;
   b4f8a:	eeb0 8a47 	vmov.f32	s16, s14
   b4f8e:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < size; i++)
   b4f92:	9b01      	ldr	r3, [sp, #4]
   b4f94:	459a      	cmp	sl, r3
   b4f96:	da16      	bge.n	b4fc6 <_Z8calc_lowPA2_iPdi+0x5e>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4f98:	e8fb 4502 	ldrd	r4, r5, [fp], #8
   b4f9c:	ec53 2b18 	vmov	r2, r3, d8
   b4fa0:	4620      	mov	r0, r4
   b4fa2:	4629      	mov	r1, r5
   b4fa4:	f7ff fc88 	bl	b48b8 <__aeabi_dcmpgt>
   b4fa8:	b108      	cbz	r0, b4fae <_Z8calc_lowPA2_iPdi+0x46>
        {
            last_big = cost[i];
   b4faa:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b4fae:	4642      	mov	r2, r8
   b4fb0:	464b      	mov	r3, r9
   b4fb2:	4620      	mov	r0, r4
   b4fb4:	4629      	mov	r1, r5
   b4fb6:	f7ff fc61 	bl	b487c <__aeabi_dcmplt>
   b4fba:	b108      	cbz	r0, b4fc0 <_Z8calc_lowPA2_iPdi+0x58>
        {
            last_small = cost[i];
   b4fbc:	46a0      	mov	r8, r4
   b4fbe:	46a9      	mov	r9, r5
    for (int i = 0; i < size; i++)
   b4fc0:	f10a 0a01 	add.w	sl, sl, #1
   b4fc4:	e7e5      	b.n	b4f92 <_Z8calc_lowPA2_iPdi+0x2a>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b4fc6:	4642      	mov	r2, r8
   b4fc8:	464b      	mov	r3, r9
   b4fca:	ec51 0b18 	vmov	r0, r1, d8
   b4fce:	f7ff f82b 	bl	b4028 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4fd2:	a340      	add	r3, pc, #256	; (adr r3, b50d4 <_Z8calc_lowPA2_iPdi+0x16c>)
   b4fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4fd8:	f7ff f9de 	bl	b4398 <__aeabi_dmul>
   b4fdc:	4642      	mov	r2, r8
   b4fde:	464b      	mov	r3, r9
   b4fe0:	f7ff f824 	bl	b402c <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i < size; i++)
   b4fe4:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4fe6:	4682      	mov	sl, r0
   b4fe8:	468b      	mov	fp, r1
    int idx = 0;
   b4fea:	462c      	mov	r4, r5
    for (int i = 0; i < size; i++)
   b4fec:	9b01      	ldr	r3, [sp, #4]
   b4fee:	429d      	cmp	r5, r3
   b4ff0:	da15      	bge.n	b501e <_Z8calc_lowPA2_iPdi+0xb6>
    {
        
        if (cost[i] < small_offset)
   b4ff2:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b4ff6:	4652      	mov	r2, sl
   b4ff8:	465b      	mov	r3, fp
   b4ffa:	f7ff fc3f 	bl	b487c <__aeabi_dcmplt>
   b4ffe:	b160      	cbz	r0, b501a <_Z8calc_lowPA2_iPdi+0xb2>
        {
            low_range_hour[idx] = i;
   b5000:	ab1a      	add	r3, sp, #104	; 0x68
   b5002:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b5006:	f843 5c60 	str.w	r5, [r3, #-96]
            Serial.printf("low_range_hour[%d]: %d\n",idx, low_range_hour[idx]);
   b500a:	f003 fead 	bl	b8d68 <_Z16_fetch_usbserialv>
   b500e:	4622      	mov	r2, r4
   b5010:	492b      	ldr	r1, [pc, #172]	; (b50c0 <_Z8calc_lowPA2_iPdi+0x158>)
   b5012:	462b      	mov	r3, r5
   b5014:	f7ff fe28 	bl	b4c68 <_ZN5Print6printfEPKcz>
            idx++;
   b5018:	3401      	adds	r4, #1
    for (int i = 0; i < size; i++)
   b501a:	3501      	adds	r5, #1
   b501c:	e7e6      	b.n	b4fec <_Z8calc_lowPA2_iPdi+0x84>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b501e:	f003 fea3 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5022:	ec53 2b18 	vmov	r2, r3, d8
   b5026:	4927      	ldr	r1, [pc, #156]	; (b50c4 <_Z8calc_lowPA2_iPdi+0x15c>)
   b5028:	f7ff fe1e 	bl	b4c68 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b502c:	f003 fe9c 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5030:	4925      	ldr	r1, [pc, #148]	; (b50c8 <_Z8calc_lowPA2_iPdi+0x160>)
   b5032:	4642      	mov	r2, r8
   b5034:	464b      	mov	r3, r9
   b5036:	f7ff fe17 	bl	b4c68 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b503a:	f003 fe95 	bl	b8d68 <_Z16_fetch_usbserialv>
   b503e:	4923      	ldr	r1, [pc, #140]	; (b50cc <_Z8calc_lowPA2_iPdi+0x164>)
   b5040:	f7ff fe12 	bl	b4c68 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b5044:	b36c      	cbz	r4, b50a2 <_Z8calc_lowPA2_iPdi+0x13a>
    int i = 0;
   b5046:	2300      	movs	r3, #0
    int cnt = 0;
   b5048:	461d      	mov	r5, r3
   b504a:	1d37      	adds	r7, r6, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b504c:	aa1a      	add	r2, sp, #104	; 0x68
   b504e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b5052:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b5056:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
   b505a:	aa02      	add	r2, sp, #8
   b505c:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b5060:	6802      	ldr	r2, [r0, #0]
   b5062:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b5066:	3901      	subs	r1, #1
   b5068:	428a      	cmp	r2, r1
   b506a:	f103 0301 	add.w	r3, r3, #1
   b506e:	d0f7      	beq.n	b5060 <_Z8calc_lowPA2_iPdi+0xf8>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b5070:	3201      	adds	r2, #1
        while (i <= idx)
   b5072:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b5074:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
            
            cnt++;
   b5078:	f105 0201 	add.w	r2, r5, #1
        while (i <= idx)
   b507c:	dd0f      	ble.n	b509e <_Z8calc_lowPA2_iPdi+0x136>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b507e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b50e0 <_Z8calc_lowPA2_iPdi+0x178>
    for (int z = 0; z < cnt; z++)
   b5082:	2400      	movs	r4, #0
   b5084:	42ac      	cmp	r4, r5
   b5086:	d00c      	beq.n	b50a2 <_Z8calc_lowPA2_iPdi+0x13a>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b5088:	f003 fe6e 	bl	b8d68 <_Z16_fetch_usbserialv>
   b508c:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b5090:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
   b5094:	4641      	mov	r1, r8
   b5096:	f7ff fde7 	bl	b4c68 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b509a:	3401      	adds	r4, #1
   b509c:	e7f2      	b.n	b5084 <_Z8calc_lowPA2_iPdi+0x11c>
            cnt++;
   b509e:	4615      	mov	r5, r2
   b50a0:	e7d4      	b.n	b504c <_Z8calc_lowPA2_iPdi+0xe4>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b50a2:	4b0b      	ldr	r3, [pc, #44]	; (b50d0 <_Z8calc_lowPA2_iPdi+0x168>)
   b50a4:	2201      	movs	r2, #1

    return cnt;
}
   b50a6:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b50a8:	701a      	strb	r2, [r3, #0]
}
   b50aa:	b01b      	add	sp, #108	; 0x6c
   b50ac:	ecbd 8b02 	vpop	{d8}
   b50b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b50b4:	f3af 8000 	nop.w
	...
   b50c0:	000bb84b 	.word	0x000bb84b
   b50c4:	000bb863 	.word	0x000bb863
   b50c8:	000bb881 	.word	0x000bb881
   b50cc:	000bb89e 	.word	0x000bb89e
   b50d0:	2003db81 	.word	0x2003db81
   b50d4:	33333333 	.word	0x33333333
   b50d8:	3fd33333 	.word	0x3fd33333
   b50dc:	408f4000 	.word	0x408f4000
   b50e0:	000bb8dc 	.word	0x000bb8dc

000b50e4 <_Z18hourly_JSON_updatev>:
extern String pricestoday_Json;
extern String pricesyesterday_Json;
extern String pricestomorrow_Json;

void hourly_JSON_update()
{
   b50e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b50e6:	4913      	ldr	r1, [pc, #76]	; (b5134 <_Z18hourly_JSON_updatev+0x50>)
   b50e8:	4813      	ldr	r0, [pc, #76]	; (b5138 <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b50ea:	4e14      	ldr	r6, [pc, #80]	; (b513c <_Z18hourly_JSON_updatev+0x58>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b50ec:	4d12      	ldr	r5, [pc, #72]	; (b5138 <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b50ee:	4f14      	ldr	r7, [pc, #80]	; (b5140 <_Z18hourly_JSON_updatev+0x5c>)
{
   b50f0:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b50f2:	f001 fe01 	bl	b6cf8 <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b50f6:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b50f8:	6833      	ldr	r3, [r6, #0]
   b50fa:	220a      	movs	r2, #10
   b50fc:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b5100:	4668      	mov	r0, sp
   b5102:	f001 fe0b 	bl	b6d1c <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5106:	4669      	mov	r1, sp
   b5108:	4628      	mov	r0, r5
   b510a:	f001 fe31 	bl	b6d70 <_ZN6String6concatERKS_>
   b510e:	4668      	mov	r0, sp
   b5110:	f001 fd6e 	bl	b6bf0 <_ZN6StringD1Ev>
        if (i < 23)
   b5114:	2c17      	cmp	r4, #23
   b5116:	d003      	beq.n	b5120 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5118:	4639      	mov	r1, r7
   b511a:	4628      	mov	r0, r5
   b511c:	f001 fe2c 	bl	b6d78 <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b5120:	3401      	adds	r4, #1
   b5122:	2c18      	cmp	r4, #24
   b5124:	d1e8      	bne.n	b50f8 <_Z18hourly_JSON_updatev+0x14>
   b5126:	4907      	ldr	r1, [pc, #28]	; (b5144 <_Z18hourly_JSON_updatev+0x60>)
   b5128:	4803      	ldr	r0, [pc, #12]	; (b5138 <_Z18hourly_JSON_updatev+0x54>)
        {
            wh_today_Json += ",";
        }
    }
    wh_today_Json += "]}";
}
   b512a:	b005      	add	sp, #20
   b512c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5130:	f001 be22 	b.w	b6d78 <_ZN6String6concatEPKc>
   b5134:	000bb8ea 	.word	0x000bb8ea
   b5138:	2003e1bc 	.word	0x2003e1bc
   b513c:	2003e1b8 	.word	0x2003e1b8
   b5140:	000bb8f9 	.word	0x000bb8f9
   b5144:	000bbc3e 	.word	0x000bbc3e

000b5148 <_Z11update_JSONv>:
void update_JSON()
{
   b5148:	b5f0      	push	{r4, r5, r6, r7, lr}
   b514a:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b514c:	498f      	ldr	r1, [pc, #572]	; (b538c <_Z11update_JSONv+0x244>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b514e:	4e90      	ldr	r6, [pc, #576]	; (b5390 <_Z11update_JSONv+0x248>)
   b5150:	4f90      	ldr	r7, [pc, #576]	; (b5394 <_Z11update_JSONv+0x24c>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5152:	4d91      	ldr	r5, [pc, #580]	; (b5398 <_Z11update_JSONv+0x250>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b5154:	4668      	mov	r0, sp
   b5156:	f001 fe21 	bl	b6d9c <_ZN6String6formatEPKcz>
   b515a:	4669      	mov	r1, sp
   b515c:	488e      	ldr	r0, [pc, #568]	; (b5398 <_Z11update_JSONv+0x250>)
   b515e:	f001 fdc3 	bl	b6ce8 <_ZN6StringaSEOS_>
   b5162:	4668      	mov	r0, sp
   b5164:	f001 fd44 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5168:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b516a:	6833      	ldr	r3, [r6, #0]
   b516c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b5170:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5174:	4639      	mov	r1, r7
   b5176:	4668      	mov	r0, sp
   b5178:	f001 fe10 	bl	b6d9c <_ZN6String6formatEPKcz>
   b517c:	4669      	mov	r1, sp
   b517e:	4628      	mov	r0, r5
   b5180:	f001 fdf6 	bl	b6d70 <_ZN6String6concatERKS_>
   b5184:	4668      	mov	r0, sp
   b5186:	f001 fd33 	bl	b6bf0 <_ZN6StringD1Ev>
        if (i < 23)
   b518a:	2c17      	cmp	r4, #23
   b518c:	d00a      	beq.n	b51a4 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b518e:	4983      	ldr	r1, [pc, #524]	; (b539c <_Z11update_JSONv+0x254>)
   b5190:	4668      	mov	r0, sp
   b5192:	f001 fe03 	bl	b6d9c <_ZN6String6formatEPKcz>
   b5196:	4669      	mov	r1, sp
   b5198:	4628      	mov	r0, r5
   b519a:	f001 fde9 	bl	b6d70 <_ZN6String6concatERKS_>
   b519e:	4668      	mov	r0, sp
   b51a0:	f001 fd26 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b51a4:	3401      	adds	r4, #1
   b51a6:	2c18      	cmp	r4, #24
   b51a8:	d1df      	bne.n	b516a <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b51aa:	497d      	ldr	r1, [pc, #500]	; (b53a0 <_Z11update_JSONv+0x258>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b51ac:	4e7d      	ldr	r6, [pc, #500]	; (b53a4 <_Z11update_JSONv+0x25c>)
   b51ae:	4f79      	ldr	r7, [pc, #484]	; (b5394 <_Z11update_JSONv+0x24c>)
   b51b0:	4d7d      	ldr	r5, [pc, #500]	; (b53a8 <_Z11update_JSONv+0x260>)
    pricesyesterday_Json += String::format("]}");
   b51b2:	4668      	mov	r0, sp
   b51b4:	f001 fdf2 	bl	b6d9c <_ZN6String6formatEPKcz>
   b51b8:	4669      	mov	r1, sp
   b51ba:	4877      	ldr	r0, [pc, #476]	; (b5398 <_Z11update_JSONv+0x250>)
   b51bc:	f001 fdd8 	bl	b6d70 <_ZN6String6concatERKS_>
   b51c0:	4668      	mov	r0, sp
   b51c2:	f001 fd15 	bl	b6bf0 <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b51c6:	4979      	ldr	r1, [pc, #484]	; (b53ac <_Z11update_JSONv+0x264>)
   b51c8:	4668      	mov	r0, sp
   b51ca:	f001 fde7 	bl	b6d9c <_ZN6String6formatEPKcz>
   b51ce:	4669      	mov	r1, sp
   b51d0:	4875      	ldr	r0, [pc, #468]	; (b53a8 <_Z11update_JSONv+0x260>)
   b51d2:	f001 fd89 	bl	b6ce8 <_ZN6StringaSEOS_>
   b51d6:	4668      	mov	r0, sp
   b51d8:	f001 fd0a 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b51dc:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b51de:	6833      	ldr	r3, [r6, #0]
   b51e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b51e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51e8:	4639      	mov	r1, r7
   b51ea:	4668      	mov	r0, sp
   b51ec:	f001 fdd6 	bl	b6d9c <_ZN6String6formatEPKcz>
   b51f0:	4669      	mov	r1, sp
   b51f2:	4628      	mov	r0, r5
   b51f4:	f001 fdbc 	bl	b6d70 <_ZN6String6concatERKS_>
   b51f8:	4668      	mov	r0, sp
   b51fa:	f001 fcf9 	bl	b6bf0 <_ZN6StringD1Ev>
        if (i < 23)
   b51fe:	2c17      	cmp	r4, #23
   b5200:	d00a      	beq.n	b5218 <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b5202:	4966      	ldr	r1, [pc, #408]	; (b539c <_Z11update_JSONv+0x254>)
   b5204:	4668      	mov	r0, sp
   b5206:	f001 fdc9 	bl	b6d9c <_ZN6String6formatEPKcz>
   b520a:	4669      	mov	r1, sp
   b520c:	4628      	mov	r0, r5
   b520e:	f001 fdaf 	bl	b6d70 <_ZN6String6concatERKS_>
   b5212:	4668      	mov	r0, sp
   b5214:	f001 fcec 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5218:	3401      	adds	r4, #1
   b521a:	2c18      	cmp	r4, #24
   b521c:	d1df      	bne.n	b51de <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b521e:	4960      	ldr	r1, [pc, #384]	; (b53a0 <_Z11update_JSONv+0x258>)

     // Updating prices today JSON string
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b5220:	4e63      	ldr	r6, [pc, #396]	; (b53b0 <_Z11update_JSONv+0x268>)
   b5222:	4f5c      	ldr	r7, [pc, #368]	; (b5394 <_Z11update_JSONv+0x24c>)
   b5224:	4d63      	ldr	r5, [pc, #396]	; (b53b4 <_Z11update_JSONv+0x26c>)
    pricestoday_Json += String::format("]}");
   b5226:	4668      	mov	r0, sp
   b5228:	f001 fdb8 	bl	b6d9c <_ZN6String6formatEPKcz>
   b522c:	4669      	mov	r1, sp
   b522e:	485e      	ldr	r0, [pc, #376]	; (b53a8 <_Z11update_JSONv+0x260>)
   b5230:	f001 fd9e 	bl	b6d70 <_ZN6String6concatERKS_>
   b5234:	4668      	mov	r0, sp
   b5236:	f001 fcdb 	bl	b6bf0 <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b523a:	495f      	ldr	r1, [pc, #380]	; (b53b8 <_Z11update_JSONv+0x270>)
   b523c:	4668      	mov	r0, sp
   b523e:	f001 fdad 	bl	b6d9c <_ZN6String6formatEPKcz>
   b5242:	4669      	mov	r1, sp
   b5244:	485b      	ldr	r0, [pc, #364]	; (b53b4 <_Z11update_JSONv+0x26c>)
   b5246:	f001 fd4f 	bl	b6ce8 <_ZN6StringaSEOS_>
   b524a:	4668      	mov	r0, sp
   b524c:	f001 fcd0 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5250:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b5252:	6833      	ldr	r3, [r6, #0]
   b5254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b5258:	e9d3 2300 	ldrd	r2, r3, [r3]
   b525c:	4639      	mov	r1, r7
   b525e:	4668      	mov	r0, sp
   b5260:	f001 fd9c 	bl	b6d9c <_ZN6String6formatEPKcz>
   b5264:	4669      	mov	r1, sp
   b5266:	4628      	mov	r0, r5
   b5268:	f001 fd82 	bl	b6d70 <_ZN6String6concatERKS_>
   b526c:	4668      	mov	r0, sp
   b526e:	f001 fcbf 	bl	b6bf0 <_ZN6StringD1Ev>
        if (i < 23)
   b5272:	2c17      	cmp	r4, #23
   b5274:	d00a      	beq.n	b528c <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b5276:	4949      	ldr	r1, [pc, #292]	; (b539c <_Z11update_JSONv+0x254>)
   b5278:	4668      	mov	r0, sp
   b527a:	f001 fd8f 	bl	b6d9c <_ZN6String6formatEPKcz>
   b527e:	4669      	mov	r1, sp
   b5280:	4628      	mov	r0, r5
   b5282:	f001 fd75 	bl	b6d70 <_ZN6String6concatERKS_>
   b5286:	4668      	mov	r0, sp
   b5288:	f001 fcb2 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b528c:	3401      	adds	r4, #1
   b528e:	2c18      	cmp	r4, #24
   b5290:	d1df      	bne.n	b5252 <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b5292:	4943      	ldr	r1, [pc, #268]	; (b53a0 <_Z11update_JSONv+0x258>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b5294:	4e49      	ldr	r6, [pc, #292]	; (b53bc <_Z11update_JSONv+0x274>)
   b5296:	4f4a      	ldr	r7, [pc, #296]	; (b53c0 <_Z11update_JSONv+0x278>)
   b5298:	4d4a      	ldr	r5, [pc, #296]	; (b53c4 <_Z11update_JSONv+0x27c>)
    pricestomorrow_Json += String::format("]}");
   b529a:	4668      	mov	r0, sp
   b529c:	f001 fd7e 	bl	b6d9c <_ZN6String6formatEPKcz>
   b52a0:	4669      	mov	r1, sp
   b52a2:	4844      	ldr	r0, [pc, #272]	; (b53b4 <_Z11update_JSONv+0x26c>)
   b52a4:	f001 fd64 	bl	b6d70 <_ZN6String6concatERKS_>
   b52a8:	4668      	mov	r0, sp
   b52aa:	f001 fca1 	bl	b6bf0 <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b52ae:	4946      	ldr	r1, [pc, #280]	; (b53c8 <_Z11update_JSONv+0x280>)
   b52b0:	4668      	mov	r0, sp
   b52b2:	f001 fd73 	bl	b6d9c <_ZN6String6formatEPKcz>
   b52b6:	4669      	mov	r1, sp
   b52b8:	4842      	ldr	r0, [pc, #264]	; (b53c4 <_Z11update_JSONv+0x27c>)
   b52ba:	f001 fd15 	bl	b6ce8 <_ZN6StringaSEOS_>
   b52be:	4668      	mov	r0, sp
   b52c0:	f001 fc96 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b52c4:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b52c6:	6833      	ldr	r3, [r6, #0]
   b52c8:	4639      	mov	r1, r7
   b52ca:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b52ce:	4668      	mov	r0, sp
   b52d0:	f001 fd64 	bl	b6d9c <_ZN6String6formatEPKcz>
   b52d4:	4669      	mov	r1, sp
   b52d6:	4628      	mov	r0, r5
   b52d8:	f001 fd4a 	bl	b6d70 <_ZN6String6concatERKS_>
   b52dc:	4668      	mov	r0, sp
   b52de:	f001 fc87 	bl	b6bf0 <_ZN6StringD1Ev>
        if (i < 23)
   b52e2:	2c17      	cmp	r4, #23
   b52e4:	d00a      	beq.n	b52fc <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b52e6:	492d      	ldr	r1, [pc, #180]	; (b539c <_Z11update_JSONv+0x254>)
   b52e8:	4668      	mov	r0, sp
   b52ea:	f001 fd57 	bl	b6d9c <_ZN6String6formatEPKcz>
   b52ee:	4669      	mov	r1, sp
   b52f0:	4628      	mov	r0, r5
   b52f2:	f001 fd3d 	bl	b6d70 <_ZN6String6concatERKS_>
   b52f6:	4668      	mov	r0, sp
   b52f8:	f001 fc7a 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b52fc:	3401      	adds	r4, #1
   b52fe:	2c18      	cmp	r4, #24
   b5300:	d1e1      	bne.n	b52c6 <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b5302:	4927      	ldr	r1, [pc, #156]	; (b53a0 <_Z11update_JSONv+0x258>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b5304:	4e31      	ldr	r6, [pc, #196]	; (b53cc <_Z11update_JSONv+0x284>)
   b5306:	4f2e      	ldr	r7, [pc, #184]	; (b53c0 <_Z11update_JSONv+0x278>)
   b5308:	4d31      	ldr	r5, [pc, #196]	; (b53d0 <_Z11update_JSONv+0x288>)
    wh_yesterday_Json += String::format("]}");
   b530a:	4668      	mov	r0, sp
   b530c:	f001 fd46 	bl	b6d9c <_ZN6String6formatEPKcz>
   b5310:	4669      	mov	r1, sp
   b5312:	482c      	ldr	r0, [pc, #176]	; (b53c4 <_Z11update_JSONv+0x27c>)
   b5314:	f001 fd2c 	bl	b6d70 <_ZN6String6concatERKS_>
   b5318:	4668      	mov	r0, sp
   b531a:	f001 fc69 	bl	b6bf0 <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b531e:	492d      	ldr	r1, [pc, #180]	; (b53d4 <_Z11update_JSONv+0x28c>)
   b5320:	4668      	mov	r0, sp
   b5322:	f001 fd3b 	bl	b6d9c <_ZN6String6formatEPKcz>
   b5326:	4669      	mov	r1, sp
   b5328:	4829      	ldr	r0, [pc, #164]	; (b53d0 <_Z11update_JSONv+0x288>)
   b532a:	f001 fcdd 	bl	b6ce8 <_ZN6StringaSEOS_>
   b532e:	4668      	mov	r0, sp
   b5330:	f001 fc5e 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5334:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b5336:	6833      	ldr	r3, [r6, #0]
   b5338:	4639      	mov	r1, r7
   b533a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b533e:	4668      	mov	r0, sp
   b5340:	f001 fd2c 	bl	b6d9c <_ZN6String6formatEPKcz>
   b5344:	4669      	mov	r1, sp
   b5346:	4628      	mov	r0, r5
   b5348:	f001 fd12 	bl	b6d70 <_ZN6String6concatERKS_>
   b534c:	4668      	mov	r0, sp
   b534e:	f001 fc4f 	bl	b6bf0 <_ZN6StringD1Ev>
        if (i < 23)
   b5352:	2c17      	cmp	r4, #23
   b5354:	d00a      	beq.n	b536c <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b5356:	4911      	ldr	r1, [pc, #68]	; (b539c <_Z11update_JSONv+0x254>)
   b5358:	4668      	mov	r0, sp
   b535a:	f001 fd1f 	bl	b6d9c <_ZN6String6formatEPKcz>
   b535e:	4669      	mov	r1, sp
   b5360:	4628      	mov	r0, r5
   b5362:	f001 fd05 	bl	b6d70 <_ZN6String6concatERKS_>
   b5366:	4668      	mov	r0, sp
   b5368:	f001 fc42 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b536c:	3401      	adds	r4, #1
   b536e:	2c18      	cmp	r4, #24
   b5370:	d1e1      	bne.n	b5336 <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b5372:	4668      	mov	r0, sp
   b5374:	490a      	ldr	r1, [pc, #40]	; (b53a0 <_Z11update_JSONv+0x258>)
   b5376:	f001 fd11 	bl	b6d9c <_ZN6String6formatEPKcz>
   b537a:	4669      	mov	r1, sp
   b537c:	4814      	ldr	r0, [pc, #80]	; (b53d0 <_Z11update_JSONv+0x288>)
   b537e:	f001 fcf7 	bl	b6d70 <_ZN6String6concatERKS_>
   b5382:	4668      	mov	r0, sp
   b5384:	f001 fc34 	bl	b6bf0 <_ZN6StringD1Ev>

}
   b5388:	b005      	add	sp, #20
   b538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b538c:	000bb8fb 	.word	0x000bb8fb
   b5390:	2003dca0 	.word	0x2003dca0
   b5394:	000bb910 	.word	0x000bb910
   b5398:	2003dccc 	.word	0x2003dccc
   b539c:	000bb8f9 	.word	0x000bb8f9
   b53a0:	000bbc3e 	.word	0x000bbc3e
   b53a4:	2003dc98 	.word	0x2003dc98
   b53a8:	2003dcac 	.word	0x2003dcac
   b53ac:	000bb916 	.word	0x000bb916
   b53b0:	2003dc9c 	.word	0x2003dc9c
   b53b4:	2003dcbc 	.word	0x2003dcbc
   b53b8:	000bb927 	.word	0x000bb927
   b53bc:	2003e1cc 	.word	0x2003e1cc
   b53c0:	000bbafc 	.word	0x000bbafc
   b53c4:	2003e1d0 	.word	0x2003e1d0
   b53c8:	000bb93b 	.word	0x000bb93b
   b53cc:	2003e1b8 	.word	0x2003e1b8
   b53d0:	2003e1bc 	.word	0x2003e1bc
   b53d4:	000bb94e 	.word	0x000bb94e

000b53d8 <_Z11init_memoryv>:
{
   b53d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b53dc:	20c0      	movs	r0, #192	; 0xc0
   b53de:	f001 f80b 	bl	b63f8 <malloc>
   b53e2:	4d38      	ldr	r5, [pc, #224]	; (b54c4 <_Z11init_memoryv+0xec>)
   b53e4:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b53e6:	b928      	cbnz	r0, b53f4 <_Z11init_memoryv+0x1c>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b53e8:	f003 fcbe 	bl	b8d68 <_Z16_fetch_usbserialv>
   b53ec:	4936      	ldr	r1, [pc, #216]	; (b54c8 <_Z11init_memoryv+0xf0>)
   b53ee:	f7ff fc3b 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b53f2:	e7fe      	b.n	b53f2 <_Z11init_memoryv+0x1a>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b53f4:	20c0      	movs	r0, #192	; 0xc0
   b53f6:	f000 ffff 	bl	b63f8 <malloc>
   b53fa:	4c34      	ldr	r4, [pc, #208]	; (b54cc <_Z11init_memoryv+0xf4>)
   b53fc:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b53fe:	b928      	cbnz	r0, b540c <_Z11init_memoryv+0x34>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b5400:	f003 fcb2 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5404:	4932      	ldr	r1, [pc, #200]	; (b54d0 <_Z11init_memoryv+0xf8>)
   b5406:	f7ff fc2f 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b540a:	e7fe      	b.n	b540a <_Z11init_memoryv+0x32>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b540c:	20c0      	movs	r0, #192	; 0xc0
   b540e:	f000 fff3 	bl	b63f8 <malloc>
   b5412:	4e30      	ldr	r6, [pc, #192]	; (b54d4 <_Z11init_memoryv+0xfc>)
   b5414:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b5416:	b928      	cbnz	r0, b5424 <_Z11init_memoryv+0x4c>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b5418:	f003 fca6 	bl	b8d68 <_Z16_fetch_usbserialv>
   b541c:	492e      	ldr	r1, [pc, #184]	; (b54d8 <_Z11init_memoryv+0x100>)
   b541e:	f7ff fc23 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b5422:	e7fe      	b.n	b5422 <_Z11init_memoryv+0x4a>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b5424:	f003 fca0 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5428:	492c      	ldr	r1, [pc, #176]	; (b54dc <_Z11init_memoryv+0x104>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b542a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b54f0 <_Z11init_memoryv+0x118>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b542e:	f44f 7210 	mov.w	r2, #576	; 0x240
   b5432:	f7ff fc19 	bl	b4c68 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b5436:	2060      	movs	r0, #96	; 0x60
   b5438:	f000 ffde 	bl	b63f8 <malloc>
   b543c:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b5440:	b928      	cbnz	r0, b544e <_Z11init_memoryv+0x76>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b5442:	f003 fc91 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5446:	4926      	ldr	r1, [pc, #152]	; (b54e0 <_Z11init_memoryv+0x108>)
   b5448:	f7ff fc0e 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b544c:	e7fe      	b.n	b544c <_Z11init_memoryv+0x74>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b544e:	2060      	movs	r0, #96	; 0x60
   b5450:	f000 ffd2 	bl	b63f8 <malloc>
   b5454:	f8df 909c 	ldr.w	r9, [pc, #156]	; b54f4 <_Z11init_memoryv+0x11c>
   b5458:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b545c:	b928      	cbnz	r0, b546a <_Z11init_memoryv+0x92>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b545e:	f003 fc83 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5462:	4920      	ldr	r1, [pc, #128]	; (b54e4 <_Z11init_memoryv+0x10c>)
   b5464:	f7ff fc00 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b5468:	e7fe      	b.n	b5468 <_Z11init_memoryv+0x90>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b546a:	f003 fc7d 	bl	b8d68 <_Z16_fetch_usbserialv>
   b546e:	491e      	ldr	r1, [pc, #120]	; (b54e8 <_Z11init_memoryv+0x110>)
   b5470:	22c0      	movs	r2, #192	; 0xc0
   b5472:	f7ff fbf9 	bl	b4c68 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b5476:	f003 fc77 	bl	b8d68 <_Z16_fetch_usbserialv>
   b547a:	4607      	mov	r7, r0
   b547c:	f001 f85c 	bl	b6538 <_ZN11SystemClass10freeMemoryEv>
   b5480:	491a      	ldr	r1, [pc, #104]	; (b54ec <_Z11init_memoryv+0x114>)
   b5482:	4602      	mov	r2, r0
   b5484:	4638      	mov	r0, r7
   b5486:	f7ff fbef 	bl	b4c68 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b548a:	6828      	ldr	r0, [r5, #0]
   b548c:	22c0      	movs	r2, #192	; 0xc0
   b548e:	2100      	movs	r1, #0
   b5490:	f004 f937 	bl	b9702 <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b5494:	6820      	ldr	r0, [r4, #0]
   b5496:	22c0      	movs	r2, #192	; 0xc0
   b5498:	2100      	movs	r1, #0
   b549a:	f004 f932 	bl	b9702 <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b549e:	6830      	ldr	r0, [r6, #0]
   b54a0:	22c0      	movs	r2, #192	; 0xc0
   b54a2:	2100      	movs	r1, #0
   b54a4:	f004 f92d 	bl	b9702 <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b54a8:	f8d8 0000 	ldr.w	r0, [r8]
   b54ac:	2260      	movs	r2, #96	; 0x60
   b54ae:	2100      	movs	r1, #0
   b54b0:	f004 f927 	bl	b9702 <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b54b4:	f8d9 0000 	ldr.w	r0, [r9]
   b54b8:	2260      	movs	r2, #96	; 0x60
}
   b54ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b54be:	2100      	movs	r1, #0
   b54c0:	f004 b91f 	b.w	b9702 <memset>
   b54c4:	2003dca0 	.word	0x2003dca0
   b54c8:	000bb95d 	.word	0x000bb95d
   b54cc:	2003dc98 	.word	0x2003dc98
   b54d0:	000bb98b 	.word	0x000bb98b
   b54d4:	2003dc9c 	.word	0x2003dc9c
   b54d8:	000bb9b5 	.word	0x000bb9b5
   b54dc:	000bb9e2 	.word	0x000bb9e2
   b54e0:	000bba14 	.word	0x000bba14
   b54e4:	000bba3c 	.word	0x000bba3c
   b54e8:	000bba68 	.word	0x000bba68
   b54ec:	000bba93 	.word	0x000bba93
   b54f0:	2003e1b8 	.word	0x2003e1b8
   b54f4:	2003e1cc 	.word	0x2003e1cc

000b54f8 <_Z13rotate_pricesv>:
{
   b54f8:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b54fa:	4a0c      	ldr	r2, [pc, #48]	; (b552c <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b54fc:	4b0c      	ldr	r3, [pc, #48]	; (b5530 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b54fe:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b5500:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b5502:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b5504:	4b0b      	ldr	r3, [pc, #44]	; (b5534 <_Z13rotate_pricesv+0x3c>)
   b5506:	6819      	ldr	r1, [r3, #0]
   b5508:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b550a:	22c0      	movs	r2, #192	; 0xc0
   b550c:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b550e:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b5510:	f004 f8f7 	bl	b9702 <memset>
    int *temp2 = wh_yesterday;
   b5514:	4a08      	ldr	r2, [pc, #32]	; (b5538 <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b5516:	4b09      	ldr	r3, [pc, #36]	; (b553c <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b5518:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b551a:	6819      	ldr	r1, [r3, #0]
   b551c:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b551e:	6018      	str	r0, [r3, #0]
}
   b5520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b5524:	2260      	movs	r2, #96	; 0x60
   b5526:	2100      	movs	r1, #0
   b5528:	f004 b8eb 	b.w	b9702 <memset>
   b552c:	2003dc98 	.word	0x2003dc98
   b5530:	2003dca0 	.word	0x2003dca0
   b5534:	2003dc9c 	.word	0x2003dc9c
   b5538:	2003e1cc 	.word	0x2003e1cc
   b553c:	2003e1b8 	.word	0x2003e1b8

000b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5540:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5542:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5544:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5546:	b17c      	cbz	r4, b5568 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5548:	6863      	ldr	r3, [r4, #4]
   b554a:	3b01      	subs	r3, #1
   b554c:	6063      	str	r3, [r4, #4]
   b554e:	b95b      	cbnz	r3, b5568 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5550:	6823      	ldr	r3, [r4, #0]
   b5552:	4620      	mov	r0, r4
   b5554:	689b      	ldr	r3, [r3, #8]
   b5556:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5558:	68a3      	ldr	r3, [r4, #8]
   b555a:	3b01      	subs	r3, #1
   b555c:	60a3      	str	r3, [r4, #8]
   b555e:	b91b      	cbnz	r3, b5568 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5560:	6823      	ldr	r3, [r4, #0]
   b5562:	4620      	mov	r0, r4
   b5564:	68db      	ldr	r3, [r3, #12]
   b5566:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5568:	4628      	mov	r0, r5
   b556a:	bd38      	pop	{r3, r4, r5, pc}

000b556c <_Z8get_datai>:
{
   b556c:	b510      	push	{r4, lr}
    temp[0] = 0;
   b556e:	4b11      	ldr	r3, [pc, #68]	; (b55b4 <_Z8get_datai+0x48>)
   b5570:	2200      	movs	r2, #0
{
   b5572:	b08a      	sub	sp, #40	; 0x28
    temp[0] = 0;
   b5574:	701a      	strb	r2, [r3, #0]
{
   b5576:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\"}", Time.year(), Time.month(), day);
   b5578:	f002 ffb2 	bl	b84e0 <_ZN9TimeClass4yearEv>
   b557c:	9003      	str	r0, [sp, #12]
   b557e:	f002 ffa7 	bl	b84d0 <_ZN9TimeClass5monthEv>
   b5582:	9a03      	ldr	r2, [sp, #12]
   b5584:	490c      	ldr	r1, [pc, #48]	; (b55b8 <_Z8get_datai+0x4c>)
   b5586:	9400      	str	r4, [sp, #0]
   b5588:	4603      	mov	r3, r0
   b558a:	a806      	add	r0, sp, #24
   b558c:	f001 fc06 	bl	b6d9c <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5590:	4b0a      	ldr	r3, [pc, #40]	; (b55bc <_Z8get_datai+0x50>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5592:	9a06      	ldr	r2, [sp, #24]
   b5594:	781b      	ldrb	r3, [r3, #0]
   b5596:	490a      	ldr	r1, [pc, #40]	; (b55c0 <_Z8get_datai+0x54>)
   b5598:	f88d 3000 	strb.w	r3, [sp]
   b559c:	a804      	add	r0, sp, #16
   b559e:	233c      	movs	r3, #60	; 0x3c
   b55a0:	f003 f986 	bl	b88b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b55a4:	a805      	add	r0, sp, #20
   b55a6:	f7ff ffcb 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55aa:	a806      	add	r0, sp, #24
   b55ac:	f001 fb20 	bl	b6bf0 <_ZN6StringD1Ev>
}
   b55b0:	b00a      	add	sp, #40	; 0x28
   b55b2:	bd10      	pop	{r4, pc}
   b55b4:	2003dd4c 	.word	0x2003dd4c
   b55b8:	000bba9e 	.word	0x000bba9e
   b55bc:	2003dc28 	.word	0x2003dc28
   b55c0:	000bbacd 	.word	0x000bbacd

000b55c4 <setup>:
{
   b55c4:	b570      	push	{r4, r5, r6, lr}
    STARTUP = true;
   b55c6:	4b50      	ldr	r3, [pc, #320]	; (b5708 <setup+0x144>)
   b55c8:	2201      	movs	r2, #1
{
   b55ca:	b08e      	sub	sp, #56	; 0x38
    STARTUP = true;
   b55cc:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b55ce:	f000 feeb 	bl	b63a8 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b55d2:	b910      	cbnz	r0, b55da <setup+0x16>
            spark_process();
   b55d4:	f000 fee0 	bl	b6398 <spark_process>
        while (_while() && !_condition()) {
   b55d8:	e7f9      	b.n	b55ce <setup+0xa>
   b55da:	f000 fee5 	bl	b63a8 <spark_cloud_flag_connected>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b55de:	2400      	movs	r4, #0
    ble_setup();
   b55e0:	f7ff fc24 	bl	b4e2c <_Z9ble_setupv>
    init_memory();
   b55e4:	f7ff fef8 	bl	b53d8 <_Z11init_memoryv>
    Time.zone(1);
   b55e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b55ec:	f002 fef2 	bl	b83d4 <_ZN9TimeClass4zoneEf>
   b55f0:	4946      	ldr	r1, [pc, #280]	; (b570c <setup+0x148>)
   b55f2:	4847      	ldr	r0, [pc, #284]	; (b5710 <setup+0x14c>)
        Serial.printf("Count1=: %d\n", count);
   b55f4:	4e47      	ldr	r6, [pc, #284]	; (b5714 <setup+0x150>)
   b55f6:	4623      	mov	r3, r4
   b55f8:	4622      	mov	r2, r4
   b55fa:	e9cd 4400 	strd	r4, r4, [sp]
   b55fe:	f000 fee3 	bl	b63c8 <spark_subscribe>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b5602:	f003 fbb1 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5606:	4605      	mov	r5, r0
   b5608:	f002 ff32 	bl	b8470 <_ZN9TimeClass4hourEv>
   b560c:	9003      	str	r0, [sp, #12]
   b560e:	f002 ff3b 	bl	b8488 <_ZN9TimeClass6minuteEv>
   b5612:	9a03      	ldr	r2, [sp, #12]
   b5614:	4940      	ldr	r1, [pc, #256]	; (b5718 <setup+0x154>)
   b5616:	4603      	mov	r3, r0
   b5618:	4628      	mov	r0, r5
   b561a:	f7ff fb25 	bl	b4c68 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b561e:	4622      	mov	r2, r4
   b5620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5624:	483d      	ldr	r0, [pc, #244]	; (b571c <setup+0x158>)
   b5626:	f7ff faa9 	bl	b4b7c <_ZN5Timer6_startEjb.isra.0>
    Serial.printlnf("RSSI=%d", (int8_t)WiFi.RSSI());
   b562a:	f003 fb9d 	bl	b8d68 <_Z16_fetch_usbserialv>
   b562e:	493c      	ldr	r1, [pc, #240]	; (b5720 <setup+0x15c>)
   b5630:	4605      	mov	r5, r0
   b5632:	a805      	add	r0, sp, #20
   b5634:	f003 fd50 	bl	b90d8 <_ZN5spark9WiFiClass4RSSIEv>
   b5638:	a805      	add	r0, sp, #20
   b563a:	f003 fd29 	bl	b9090 <_ZNK10WiFiSignalcvaEv>
   b563e:	4939      	ldr	r1, [pc, #228]	; (b5724 <setup+0x160>)
   b5640:	4602      	mov	r2, r0
   b5642:	4628      	mov	r0, r5
   b5644:	f7ff fbae 	bl	b4da4 <_ZN5Print8printlnfEPKcz>
    Serial.printf("Getting price data for yesterday\n");
   b5648:	f003 fb8e 	bl	b8d68 <_Z16_fetch_usbserialv>
   b564c:	4936      	ldr	r1, [pc, #216]	; (b5728 <setup+0x164>)
    while (!CALCULATE)
   b564e:	4d37      	ldr	r5, [pc, #220]	; (b572c <setup+0x168>)
    Serial.printf("Getting price data for yesterday\n");
   b5650:	f7ff fb0a 	bl	b4c68 <_ZN5Print6printfEPKcz>
    get_data(Time.day() - 1);
   b5654:	f002 ff30 	bl	b84b8 <_ZN9TimeClass3dayEv>
   b5658:	3801      	subs	r0, #1
   b565a:	f7ff ff87 	bl	b556c <_Z8get_datai>
    while (!CALCULATE)
   b565e:	782b      	ldrb	r3, [r5, #0]
   b5660:	b95b      	cbnz	r3, b567a <setup+0xb6>
        delay(1000);
   b5662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5666:	f002 ff51 	bl	b850c <delay>
        Serial.printf("Count1=: %d\n", count);
   b566a:	f003 fb7d 	bl	b8d68 <_Z16_fetch_usbserialv>
   b566e:	4622      	mov	r2, r4
   b5670:	4631      	mov	r1, r6
   b5672:	f7ff faf9 	bl	b4c68 <_ZN5Print6printfEPKcz>
        count++;
   b5676:	3401      	adds	r4, #1
    while (!CALCULATE)
   b5678:	e7f1      	b.n	b565e <setup+0x9a>
    delay(5000);
   b567a:	f241 3088 	movw	r0, #5000	; 0x1388
    CALCULATE = false;
   b567e:	2400      	movs	r4, #0
   b5680:	702c      	strb	r4, [r5, #0]
    delay(5000);
   b5682:	f002 ff43 	bl	b850c <delay>
    rotate_prices();
   b5686:	f7ff ff37 	bl	b54f8 <_Z13rotate_pricesv>
    Serial.printf("Getting price data for today\n");
   b568a:	f003 fb6d 	bl	b8d68 <_Z16_fetch_usbserialv>
   b568e:	4928      	ldr	r1, [pc, #160]	; (b5730 <setup+0x16c>)
        Serial.printf("Count2=: %d\n", count);
   b5690:	4e28      	ldr	r6, [pc, #160]	; (b5734 <setup+0x170>)
    Serial.printf("Getting price data for today\n");
   b5692:	f7ff fae9 	bl	b4c68 <_ZN5Print6printfEPKcz>
    get_data(Time.day());
   b5696:	f002 ff0f 	bl	b84b8 <_ZN9TimeClass3dayEv>
   b569a:	f7ff ff67 	bl	b556c <_Z8get_datai>
    while (!CALCULATE)
   b569e:	782b      	ldrb	r3, [r5, #0]
   b56a0:	b95b      	cbnz	r3, b56ba <setup+0xf6>
        delay(1000);
   b56a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b56a6:	f002 ff31 	bl	b850c <delay>
        Serial.printf("Count2=: %d\n", count);
   b56aa:	f003 fb5d 	bl	b8d68 <_Z16_fetch_usbserialv>
   b56ae:	4622      	mov	r2, r4
   b56b0:	4631      	mov	r1, r6
   b56b2:	f7ff fad9 	bl	b4c68 <_ZN5Print6printfEPKcz>
        count++;
   b56b6:	3401      	adds	r4, #1
    while (!CALCULATE)
   b56b8:	e7f1      	b.n	b569e <setup+0xda>
    rotate_prices();
   b56ba:	f7ff ff1d 	bl	b54f8 <_Z13rotate_pricesv>
    delay(5000);
   b56be:	f241 3088 	movw	r0, #5000	; 0x1388
   b56c2:	f002 ff23 	bl	b850c <delay>
    if (Time.hour() >= PULL_TIME_1)
   b56c6:	f002 fed3 	bl	b8470 <_ZN9TimeClass4hourEv>
   b56ca:	280c      	cmp	r0, #12
   b56cc:	dd13      	ble.n	b56f6 <setup+0x132>
        CALCULATE = false;
   b56ce:	2300      	movs	r3, #0
   b56d0:	702b      	strb	r3, [r5, #0]
        GET_DATA = true;
   b56d2:	4b19      	ldr	r3, [pc, #100]	; (b5738 <setup+0x174>)
   b56d4:	2201      	movs	r2, #1
   b56d6:	701a      	strb	r2, [r3, #0]
        pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b56d8:	2103      	movs	r1, #3
   b56da:	2008      	movs	r0, #8
   b56dc:	f003 fe28 	bl	b9330 <pinMode>
        attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b56e0:	2300      	movs	r3, #0
   b56e2:	9300      	str	r3, [sp, #0]
   b56e4:	4915      	ldr	r1, [pc, #84]	; (b573c <setup+0x178>)
   b56e6:	f04f 33ff 	mov.w	r3, #4294967295
   b56ea:	2201      	movs	r2, #1
   b56ec:	2008      	movs	r0, #8
   b56ee:	f003 fb63 	bl	b8db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b56f2:	b00e      	add	sp, #56	; 0x38
   b56f4:	bd70      	pop	{r4, r5, r6, pc}
        Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b56f6:	f003 fb37 	bl	b8d68 <_Z16_fetch_usbserialv>
   b56fa:	4911      	ldr	r1, [pc, #68]	; (b5740 <setup+0x17c>)
   b56fc:	220d      	movs	r2, #13
   b56fe:	f7ff fab3 	bl	b4c68 <_ZN5Print6printfEPKcz>
        CALCULATE = true;
   b5702:	2301      	movs	r3, #1
   b5704:	702b      	strb	r3, [r5, #0]
   b5706:	e7e7      	b.n	b56d8 <setup+0x114>
   b5708:	2003db80 	.word	0x2003db80
   b570c:	000b4c89 	.word	0x000b4c89
   b5710:	000bbad6 	.word	0x000bbad6
   b5714:	000bbb21 	.word	0x000bbb21
   b5718:	000bbadd 	.word	0x000bbadd
   b571c:	2003e150 	.word	0x2003e150
   b5720:	2003e710 	.word	0x2003e710
   b5724:	000bbaf7 	.word	0x000bbaf7
   b5728:	000bbaff 	.word	0x000bbaff
   b572c:	2003db61 	.word	0x2003db61
   b5730:	000bbb2e 	.word	0x000bbb2e
   b5734:	000bbb4c 	.word	0x000bbb4c
   b5738:	2003db7c 	.word	0x2003db7c
   b573c:	000b4ab5 	.word	0x000b4ab5
   b5740:	000bbb59 	.word	0x000bbb59

000b5744 <_Z15transmit_pricesPA2_ii>:
{
   b5744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5748:	b08a      	sub	sp, #40	; 0x28
   b574a:	4605      	mov	r5, r0
   b574c:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b574e:	f003 fb0b 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5752:	4918      	ldr	r1, [pc, #96]	; (b57b4 <_Z15transmit_pricesPA2_ii+0x70>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b5754:	4f18      	ldr	r7, [pc, #96]	; (b57b8 <_Z15transmit_pricesPA2_ii+0x74>)
    Serial.printf("In work\n");
   b5756:	f7ff fa87 	bl	b4c68 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b575a:	4918      	ldr	r1, [pc, #96]	; (b57bc <_Z15transmit_pricesPA2_ii+0x78>)
   b575c:	a802      	add	r0, sp, #8
   b575e:	f001 fa92 	bl	b6c86 <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b5762:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b5764:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b5768:	42b4      	cmp	r4, r6
   b576a:	da10      	bge.n	b578e <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b576c:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b5770:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b5774:	4639      	mov	r1, r7
   b5776:	a806      	add	r0, sp, #24
   b5778:	f001 fb10 	bl	b6d9c <_ZN6String6formatEPKcz>
   b577c:	a906      	add	r1, sp, #24
   b577e:	a802      	add	r0, sp, #8
   b5780:	f001 faf6 	bl	b6d70 <_ZN6String6concatERKS_>
   b5784:	a806      	add	r0, sp, #24
   b5786:	f001 fa33 	bl	b6bf0 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b578a:	3401      	adds	r4, #1
   b578c:	e7ec      	b.n	b5768 <_Z15transmit_pricesPA2_ii+0x24>
   b578e:	4b0c      	ldr	r3, [pc, #48]	; (b57c0 <_Z15transmit_pricesPA2_ii+0x7c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5790:	9a02      	ldr	r2, [sp, #8]
   b5792:	781b      	ldrb	r3, [r3, #0]
   b5794:	490b      	ldr	r1, [pc, #44]	; (b57c4 <_Z15transmit_pricesPA2_ii+0x80>)
   b5796:	f88d 3000 	strb.w	r3, [sp]
   b579a:	a806      	add	r0, sp, #24
   b579c:	233c      	movs	r3, #60	; 0x3c
   b579e:	f003 f887 	bl	b88b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b57a2:	a807      	add	r0, sp, #28
   b57a4:	f7ff fecc 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String data = "Cheap(ish) hours of the day: ";
   b57a8:	a802      	add	r0, sp, #8
   b57aa:	f001 fa21 	bl	b6bf0 <_ZN6StringD1Ev>
}
   b57ae:	b00a      	add	sp, #40	; 0x28
   b57b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b57b4:	000bbb8a 	.word	0x000bbb8a
   b57b8:	000bbbb1 	.word	0x000bbbb1
   b57bc:	000bbb93 	.word	0x000bbb93
   b57c0:	2003dc28 	.word	0x2003dc28
   b57c4:	000bbbc0 	.word	0x000bbbc0

000b57c8 <loop>:
{
   b57c8:	b570      	push	{r4, r5, r6, lr}
    if (GET_DATA)
   b57ca:	4c59      	ldr	r4, [pc, #356]	; (b5930 <loop+0x168>)
   b57cc:	7823      	ldrb	r3, [r4, #0]
{
   b57ce:	b0c2      	sub	sp, #264	; 0x108
    if (GET_DATA)
   b57d0:	b14b      	cbz	r3, b57e6 <loop+0x1e>
        AWAITING_DATA = true;
   b57d2:	4b58      	ldr	r3, [pc, #352]	; (b5934 <loop+0x16c>)
   b57d4:	2201      	movs	r2, #1
   b57d6:	701a      	strb	r2, [r3, #0]
        get_data(Time.day() + 1);
   b57d8:	f002 fe6e 	bl	b84b8 <_ZN9TimeClass3dayEv>
   b57dc:	3001      	adds	r0, #1
   b57de:	f7ff fec5 	bl	b556c <_Z8get_datai>
        GET_DATA = false;
   b57e2:	2300      	movs	r3, #0
   b57e4:	7023      	strb	r3, [r4, #0]
    if (CALCULATE)
   b57e6:	4c54      	ldr	r4, [pc, #336]	; (b5938 <loop+0x170>)
   b57e8:	4d54      	ldr	r5, [pc, #336]	; (b593c <loop+0x174>)
   b57ea:	7823      	ldrb	r3, [r4, #0]
   b57ec:	b333      	cbz	r3, b583c <loop+0x74>
        update_JSON();
   b57ee:	f7ff fcab 	bl	b5148 <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b57f2:	4b53      	ldr	r3, [pc, #332]	; (b5940 <loop+0x178>)
   b57f4:	4853      	ldr	r0, [pc, #332]	; (b5944 <loop+0x17c>)
   b57f6:	6819      	ldr	r1, [r3, #0]
   b57f8:	2218      	movs	r2, #24
   b57fa:	f7ff fbb5 	bl	b4f68 <_Z8calc_lowPA2_iPdi>
   b57fe:	4b52      	ldr	r3, [pc, #328]	; (b5948 <loop+0x180>)
   b5800:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b5802:	f003 fab1 	bl	b8d68 <_Z16_fetch_usbserialv>
   b5806:	4606      	mov	r6, r0
   b5808:	f002 fe32 	bl	b8470 <_ZN9TimeClass4hourEv>
   b580c:	9001      	str	r0, [sp, #4]
   b580e:	f002 fe3b 	bl	b8488 <_ZN9TimeClass6minuteEv>
   b5812:	9a01      	ldr	r2, [sp, #4]
   b5814:	494d      	ldr	r1, [pc, #308]	; (b594c <loop+0x184>)
   b5816:	4603      	mov	r3, r0
   b5818:	4630      	mov	r0, r6
   b581a:	f7ff fa25 	bl	b4c68 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b581e:	2301      	movs	r3, #1
   b5820:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b5822:	2300      	movs	r3, #0
   b5824:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b5826:	4b48      	ldr	r3, [pc, #288]	; (b5948 <loop+0x180>)
   b5828:	4846      	ldr	r0, [pc, #280]	; (b5944 <loop+0x17c>)
   b582a:	6819      	ldr	r1, [r3, #0]
   b582c:	f7ff ff8a 	bl	b5744 <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b5830:	4b47      	ldr	r3, [pc, #284]	; (b5950 <loop+0x188>)
   b5832:	2201      	movs	r2, #1
   b5834:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b5836:	2300      	movs	r3, #0
   b5838:	702b      	strb	r3, [r5, #0]
   b583a:	e002      	b.n	b5842 <loop+0x7a>
    if (TRANSMIT_PRICE)
   b583c:	782b      	ldrb	r3, [r5, #0]
   b583e:	2b00      	cmp	r3, #0
   b5840:	d1f1      	bne.n	b5826 <loop+0x5e>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b5842:	4d44      	ldr	r5, [pc, #272]	; (b5954 <loop+0x18c>)
   b5844:	782b      	ldrb	r3, [r5, #0]
   b5846:	b1db      	cbz	r3, b5880 <loop+0xb8>
        Serial.printf("Received power/get\n");
   b5848:	f003 fa8e 	bl	b8d68 <_Z16_fetch_usbserialv>
   b584c:	4942      	ldr	r1, [pc, #264]	; (b5958 <loop+0x190>)
   b584e:	f7ff fa0b 	bl	b4c68 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b5852:	4b42      	ldr	r3, [pc, #264]	; (b595c <loop+0x194>)
   b5854:	681e      	ldr	r6, [r3, #0]
   b5856:	f002 fe0b 	bl	b8470 <_ZN9TimeClass4hourEv>
   b585a:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b585e:	4940      	ldr	r1, [pc, #256]	; (b5960 <loop+0x198>)
        wh_today[Time.hour()] += 1;
   b5860:	3301      	adds	r3, #1
   b5862:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b5866:	4b3f      	ldr	r3, [pc, #252]	; (b5964 <loop+0x19c>)
   b5868:	a802      	add	r0, sp, #8
   b586a:	681a      	ldr	r2, [r3, #0]
   b586c:	f000 fddc 	bl	b6428 <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5870:	2300      	movs	r3, #0
   b5872:	483d      	ldr	r0, [pc, #244]	; (b5968 <loop+0x1a0>)
   b5874:	22ff      	movs	r2, #255	; 0xff
   b5876:	a902      	add	r1, sp, #8
   b5878:	f001 fd06 	bl	b7288 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        TRANSMIT_SENSOR = false;
   b587c:	2300      	movs	r3, #0
   b587e:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b5880:	4d3a      	ldr	r5, [pc, #232]	; (b596c <loop+0x1a4>)
   b5882:	782b      	ldrb	r3, [r5, #0]
   b5884:	b12b      	cbz	r3, b5892 <loop+0xca>
        rotate_prices();
   b5886:	f7ff fe37 	bl	b54f8 <_Z13rotate_pricesv>
        ROTATE = false;
   b588a:	2300      	movs	r3, #0
   b588c:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b588e:	2301      	movs	r3, #1
   b5890:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b5892:	4c37      	ldr	r4, [pc, #220]	; (b5970 <loop+0x1a8>)
   b5894:	7823      	ldrb	r3, [r4, #0]
   b5896:	b11b      	cbz	r3, b58a0 <loop+0xd8>
        hourly_JSON_update();
   b5898:	f7ff fc24 	bl	b50e4 <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b589c:	2300      	movs	r3, #0
   b589e:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 3000))
   b58a0:	4c34      	ldr	r4, [pc, #208]	; (b5974 <loop+0x1ac>)
   b58a2:	7825      	ldrb	r5, [r4, #0]
   b58a4:	f000 faba 	bl	b5e1c <HAL_Timer_Get_Milli_Seconds>
   b58a8:	4b33      	ldr	r3, [pc, #204]	; (b5978 <loop+0x1b0>)
   b58aa:	681b      	ldr	r3, [r3, #0]
   b58ac:	1ac0      	subs	r0, r0, r3
   b58ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b58b2:	4298      	cmp	r0, r3
   b58b4:	d934      	bls.n	b5920 <loop+0x158>
   b58b6:	2d00      	cmp	r5, #0
   b58b8:	d032      	beq.n	b5920 <loop+0x158>
        update_JSON();
   b58ba:	f7ff fc45 	bl	b5148 <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b58be:	4b29      	ldr	r3, [pc, #164]	; (b5964 <loop+0x19c>)
   b58c0:	4927      	ldr	r1, [pc, #156]	; (b5960 <loop+0x198>)
   b58c2:	681a      	ldr	r2, [r3, #0]
   b58c4:	a802      	add	r0, sp, #8
   b58c6:	f000 fdaf 	bl	b6428 <sprintf>
   b58ca:	2300      	movs	r3, #0
   b58cc:	22ff      	movs	r2, #255	; 0xff
   b58ce:	a902      	add	r1, sp, #8
   b58d0:	4825      	ldr	r0, [pc, #148]	; (b5968 <loop+0x1a0>)
   b58d2:	f001 fcd9 	bl	b7288 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b58d6:	4929      	ldr	r1, [pc, #164]	; (b597c <loop+0x1b4>)
   b58d8:	4829      	ldr	r0, [pc, #164]	; (b5980 <loop+0x1b8>)
   b58da:	2200      	movs	r2, #0
   b58dc:	f001 fd34 	bl	b7348 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b58e0:	4928      	ldr	r1, [pc, #160]	; (b5984 <loop+0x1bc>)
   b58e2:	4829      	ldr	r0, [pc, #164]	; (b5988 <loop+0x1c0>)
   b58e4:	2200      	movs	r2, #0
   b58e6:	f001 fd2f 	bl	b7348 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b58ea:	4928      	ldr	r1, [pc, #160]	; (b598c <loop+0x1c4>)
   b58ec:	4828      	ldr	r0, [pc, #160]	; (b5990 <loop+0x1c8>)
   b58ee:	2200      	movs	r2, #0
   b58f0:	f001 fd2a 	bl	b7348 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b58f4:	4927      	ldr	r1, [pc, #156]	; (b5994 <loop+0x1cc>)
   b58f6:	4828      	ldr	r0, [pc, #160]	; (b5998 <loop+0x1d0>)
   b58f8:	2200      	movs	r2, #0
   b58fa:	f001 fd25 	bl	b7348 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b58fe:	4927      	ldr	r1, [pc, #156]	; (b599c <loop+0x1d4>)
   b5900:	4827      	ldr	r0, [pc, #156]	; (b59a0 <loop+0x1d8>)
   b5902:	2200      	movs	r2, #0
   b5904:	f001 fd20 	bl	b7348 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue("{\"pricestoday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b5908:	4926      	ldr	r1, [pc, #152]	; (b59a4 <loop+0x1dc>)
   b590a:	481f      	ldr	r0, [pc, #124]	; (b5988 <loop+0x1c0>)
   b590c:	2200      	movs	r2, #0
   b590e:	f001 fd20 	bl	b7352 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b5912:	2300      	movs	r3, #0
   b5914:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b5916:	f003 fa27 	bl	b8d68 <_Z16_fetch_usbserialv>
   b591a:	4923      	ldr	r1, [pc, #140]	; (b59a8 <loop+0x1e0>)
   b591c:	f7ff f9a4 	bl	b4c68 <_ZN5Print6printfEPKcz>
    delay(1000);
   b5920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b5924:	b042      	add	sp, #264	; 0x108
   b5926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
   b592a:	f002 bdef 	b.w	b850c <delay>
   b592e:	bf00      	nop
   b5930:	2003db7c 	.word	0x2003db7c
   b5934:	2003db60 	.word	0x2003db60
   b5938:	2003db61 	.word	0x2003db61
   b593c:	2003db81 	.word	0x2003db81
   b5940:	2003dc98 	.word	0x2003dc98
   b5944:	2003dc30 	.word	0x2003dc30
   b5948:	2003dc90 	.word	0x2003dc90
   b594c:	000bbadd 	.word	0x000bbadd
   b5950:	2003db7f 	.word	0x2003db7f
   b5954:	2003db82 	.word	0x2003db82
   b5958:	000bbbd0 	.word	0x000bbbd0
   b595c:	2003e1b8 	.word	0x2003e1b8
   b5960:	000bbbe4 	.word	0x000bbbe4
   b5964:	2003dc94 	.word	0x2003dc94
   b5968:	2003db84 	.word	0x2003db84
   b596c:	2003db7e 	.word	0x2003db7e
   b5970:	2003db83 	.word	0x2003db83
   b5974:	2003db7d 	.word	0x2003db7d
   b5978:	2003dca8 	.word	0x2003dca8
   b597c:	2003dccc 	.word	0x2003dccc
   b5980:	2003db74 	.word	0x2003db74
   b5984:	2003dcac 	.word	0x2003dcac
   b5988:	2003db64 	.word	0x2003db64
   b598c:	2003dcbc 	.word	0x2003dcbc
   b5990:	2003db6c 	.word	0x2003db6c
   b5994:	2003e1d0 	.word	0x2003e1d0
   b5998:	2003db94 	.word	0x2003db94
   b599c:	2003e1bc 	.word	0x2003e1bc
   b59a0:	2003db8c 	.word	0x2003db8c
   b59a4:	000bbbf0 	.word	0x000bbbf0
   b59a8:	000bbc41 	.word	0x000bbc41

000b59ac <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b59ac:	b082      	sub	sp, #8
   b59ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59b0:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b59b2:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b59b4:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b59b6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b59b8:	e9c0 3300 	strd	r3, r3, [r0]
   b59bc:	4606      	mov	r6, r0
   b59be:	4694      	mov	ip, r2
   b59c0:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b59c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59c4:	ac04      	add	r4, sp, #16
   b59c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59c8:	682b      	ldr	r3, [r5, #0]
   b59ca:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b59cc:	ad1a      	add	r5, sp, #104	; 0x68
   b59ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59d0:	ac09      	add	r4, sp, #36	; 0x24
   b59d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59d4:	682b      	ldr	r3, [r5, #0]
   b59d6:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b59d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b59da:	9302      	str	r3, [sp, #8]
   b59dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b59de:	9301      	str	r3, [sp, #4]
   b59e0:	ab09      	add	r3, sp, #36	; 0x24
   b59e2:	9300      	str	r3, [sp, #0]
   b59e4:	4630      	mov	r0, r6
   b59e6:	ab04      	add	r3, sp, #16
   b59e8:	4662      	mov	r2, ip
   b59ea:	4639      	mov	r1, r7
   b59ec:	f002 f9a4 	bl	b7d38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b59f0:	4630      	mov	r0, r6
   b59f2:	b00f      	add	sp, #60	; 0x3c
   b59f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b59f8:	b002      	add	sp, #8
   b59fa:	4770      	bx	lr

000b59fc <_GLOBAL__sub_I_argonName>:
   b59fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b5a00:	4b87      	ldr	r3, [pc, #540]	; (b5c20 <_GLOBAL__sub_I_argonName+0x224>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5a02:	4d88      	ldr	r5, [pc, #544]	; (b5c24 <_GLOBAL__sub_I_argonName+0x228>)
const BleUuid wattcharacteristicUuid(watt_c);
   b5a04:	f8df b2b4 	ldr.w	fp, [pc, #692]	; b5cbc <_GLOBAL__sub_I_argonName+0x2c0>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b5a08:	f8df a2b4 	ldr.w	sl, [pc, #692]	; b5cc0 <_GLOBAL__sub_I_argonName+0x2c4>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b5a0c:	f8df 92b4 	ldr.w	r9, [pc, #692]	; b5cc4 <_GLOBAL__sub_I_argonName+0x2c8>
   b5a10:	f04f 0801 	mov.w	r8, #1
   b5a14:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5a18:	4b83      	ldr	r3, [pc, #524]	; (b5c28 <_GLOBAL__sub_I_argonName+0x22c>)
   b5a1a:	b093      	sub	sp, #76	; 0x4c
   b5a1c:	6819      	ldr	r1, [r3, #0]
   b5a1e:	4628      	mov	r0, r5
   b5a20:	f001 fbf4 	bl	b720c <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b5a24:	4b81      	ldr	r3, [pc, #516]	; (b5c2c <_GLOBAL__sub_I_argonName+0x230>)
   b5a26:	4658      	mov	r0, fp
   b5a28:	6819      	ldr	r1, [r3, #0]
   b5a2a:	f001 fbef 	bl	b720c <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b5a2e:	4b80      	ldr	r3, [pc, #512]	; (b5c30 <_GLOBAL__sub_I_argonName+0x234>)
   b5a30:	4650      	mov	r0, sl
   b5a32:	6819      	ldr	r1, [r3, #0]
   b5a34:	f001 fbea 	bl	b720c <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b5a38:	4b7e      	ldr	r3, [pc, #504]	; (b5c34 <_GLOBAL__sub_I_argonName+0x238>)
   b5a3a:	4648      	mov	r0, r9
   b5a3c:	6819      	ldr	r1, [r3, #0]
   b5a3e:	f001 fbe5 	bl	b720c <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b5a42:	4b7d      	ldr	r3, [pc, #500]	; (b5c38 <_GLOBAL__sub_I_argonName+0x23c>)
   b5a44:	487d      	ldr	r0, [pc, #500]	; (b5c3c <_GLOBAL__sub_I_argonName+0x240>)
   b5a46:	6819      	ldr	r1, [r3, #0]
   b5a48:	f001 fbe0 	bl	b720c <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b5a4c:	4b7c      	ldr	r3, [pc, #496]	; (b5c40 <_GLOBAL__sub_I_argonName+0x244>)
   b5a4e:	487d      	ldr	r0, [pc, #500]	; (b5c44 <_GLOBAL__sub_I_argonName+0x248>)
   b5a50:	6819      	ldr	r1, [r3, #0]
   b5a52:	f001 fbdb 	bl	b720c <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b5a56:	4b7c      	ldr	r3, [pc, #496]	; (b5c48 <_GLOBAL__sub_I_argonName+0x24c>)
   b5a58:	487c      	ldr	r0, [pc, #496]	; (b5c4c <_GLOBAL__sub_I_argonName+0x250>)
   b5a5a:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5a5c:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b5a5e:	f001 fbd5 	bl	b720c <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5a62:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5a66:	462e      	mov	r6, r5
   b5a68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5a6a:	2710      	movs	r7, #16
   b5a6c:	eb0d 0c07 	add.w	ip, sp, r7
   b5a70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5a74:	6833      	ldr	r3, [r6, #0]
   b5a76:	f8cc 3000 	str.w	r3, [ip]
   b5a7a:	f10b 0304 	add.w	r3, fp, #4
   b5a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a80:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5a84:	f8db 3000 	ldr.w	r3, [fp]
   b5a88:	4971      	ldr	r1, [pc, #452]	; (b5c50 <_GLOBAL__sub_I_argonName+0x254>)
   b5a8a:	4872      	ldr	r0, [pc, #456]	; (b5c54 <_GLOBAL__sub_I_argonName+0x258>)
   b5a8c:	463a      	mov	r2, r7
   b5a8e:	f7ff ff8d 	bl	b59ac <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b5a92:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5a96:	46ae      	mov	lr, r5
   b5a98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5a9c:	eb0d 0c07 	add.w	ip, sp, r7
   b5aa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5aa4:	6833      	ldr	r3, [r6, #0]
   b5aa6:	f8cc 3000 	str.w	r3, [ip]
   b5aaa:	f10a 0304 	add.w	r3, sl, #4
   b5aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5ab0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5ab4:	f8da 3000 	ldr.w	r3, [sl]
   b5ab8:	4967      	ldr	r1, [pc, #412]	; (b5c58 <_GLOBAL__sub_I_argonName+0x25c>)
   b5aba:	4868      	ldr	r0, [pc, #416]	; (b5c5c <_GLOBAL__sub_I_argonName+0x260>)
   b5abc:	463a      	mov	r2, r7
   b5abe:	f7ff ff75 	bl	b59ac <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b5ac2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5ac6:	46ae      	mov	lr, r5
   b5ac8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5acc:	eb0d 0c07 	add.w	ip, sp, r7
   b5ad0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5ad4:	6833      	ldr	r3, [r6, #0]
   b5ad6:	f8cc 3000 	str.w	r3, [ip]
   b5ada:	f109 0304 	add.w	r3, r9, #4
   b5ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5ae0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5ae4:	f8d9 3000 	ldr.w	r3, [r9]
   b5ae8:	495d      	ldr	r1, [pc, #372]	; (b5c60 <_GLOBAL__sub_I_argonName+0x264>)
   b5aea:	485e      	ldr	r0, [pc, #376]	; (b5c64 <_GLOBAL__sub_I_argonName+0x268>)
   b5aec:	463a      	mov	r2, r7
   b5aee:	f7ff ff5d 	bl	b59ac <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b5af2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5af6:	46ae      	mov	lr, r5
   b5af8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5afc:	eb0d 0c07 	add.w	ip, sp, r7
   b5b00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b04:	6833      	ldr	r3, [r6, #0]
   b5b06:	f8cc 3000 	str.w	r3, [ip]
   b5b0a:	4b4c      	ldr	r3, [pc, #304]	; (b5c3c <_GLOBAL__sub_I_argonName+0x240>)
   b5b0c:	3304      	adds	r3, #4
   b5b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5b10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5b14:	4b49      	ldr	r3, [pc, #292]	; (b5c3c <_GLOBAL__sub_I_argonName+0x240>)
   b5b16:	4954      	ldr	r1, [pc, #336]	; (b5c68 <_GLOBAL__sub_I_argonName+0x26c>)
   b5b18:	681b      	ldr	r3, [r3, #0]
   b5b1a:	4854      	ldr	r0, [pc, #336]	; (b5c6c <_GLOBAL__sub_I_argonName+0x270>)
   b5b1c:	463a      	mov	r2, r7
   b5b1e:	f7ff ff45 	bl	b59ac <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b5b22:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5b26:	46ae      	mov	lr, r5
   b5b28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5b2c:	eb0d 0c07 	add.w	ip, sp, r7
   b5b30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b34:	6833      	ldr	r3, [r6, #0]
   b5b36:	f8cc 3000 	str.w	r3, [ip]
   b5b3a:	4b42      	ldr	r3, [pc, #264]	; (b5c44 <_GLOBAL__sub_I_argonName+0x248>)
   b5b3c:	3304      	adds	r3, #4
   b5b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5b40:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5b44:	4b3f      	ldr	r3, [pc, #252]	; (b5c44 <_GLOBAL__sub_I_argonName+0x248>)
   b5b46:	494a      	ldr	r1, [pc, #296]	; (b5c70 <_GLOBAL__sub_I_argonName+0x274>)
   b5b48:	681b      	ldr	r3, [r3, #0]
   b5b4a:	484a      	ldr	r0, [pc, #296]	; (b5c74 <_GLOBAL__sub_I_argonName+0x278>)
   b5b4c:	463a      	mov	r2, r7
   b5b4e:	f7ff ff2d 	bl	b59ac <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b5b52:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b58:	eb0d 0c07 	add.w	ip, sp, r7
   b5b5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b60:	4d3a      	ldr	r5, [pc, #232]	; (b5c4c <_GLOBAL__sub_I_argonName+0x250>)
   b5b62:	6833      	ldr	r3, [r6, #0]
   b5b64:	f8cc 3000 	str.w	r3, [ip]
   b5b68:	1d2b      	adds	r3, r5, #4
   b5b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5b6c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5b70:	463a      	mov	r2, r7
   b5b72:	682b      	ldr	r3, [r5, #0]
   b5b74:	4940      	ldr	r1, [pc, #256]	; (b5c78 <_GLOBAL__sub_I_argonName+0x27c>)
   b5b76:	4841      	ldr	r0, [pc, #260]	; (b5c7c <_GLOBAL__sub_I_argonName+0x280>)
   b5b78:	f7ff ff18 	bl	b59ac <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
uint8_t currentHour = Time.hour();
   b5b7c:	f002 fc78 	bl	b8470 <_ZN9TimeClass4hourEv>
   b5b80:	4b3f      	ldr	r3, [pc, #252]	; (b5c80 <_GLOBAL__sub_I_argonName+0x284>)
String pricestoday_Json;
   b5b82:	4940      	ldr	r1, [pc, #256]	; (b5c84 <_GLOBAL__sub_I_argonName+0x288>)
uint8_t currentHour = Time.hour();
   b5b84:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b5b86:	4840      	ldr	r0, [pc, #256]	; (b5c88 <_GLOBAL__sub_I_argonName+0x28c>)
   b5b88:	f001 f87d 	bl	b6c86 <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b5b8c:	493d      	ldr	r1, [pc, #244]	; (b5c84 <_GLOBAL__sub_I_argonName+0x288>)
   b5b8e:	483f      	ldr	r0, [pc, #252]	; (b5c8c <_GLOBAL__sub_I_argonName+0x290>)
   b5b90:	f001 f879 	bl	b6c86 <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b5b94:	493b      	ldr	r1, [pc, #236]	; (b5c84 <_GLOBAL__sub_I_argonName+0x288>)
   b5b96:	483e      	ldr	r0, [pc, #248]	; (b5c90 <_GLOBAL__sub_I_argonName+0x294>)
   b5b98:	f001 f875 	bl	b6c86 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b5b9c:	4939      	ldr	r1, [pc, #228]	; (b5c84 <_GLOBAL__sub_I_argonName+0x288>)
   b5b9e:	483d      	ldr	r0, [pc, #244]	; (b5c94 <_GLOBAL__sub_I_argonName+0x298>)
   b5ba0:	f001 f871 	bl	b6c86 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b5ba4:	4937      	ldr	r1, [pc, #220]	; (b5c84 <_GLOBAL__sub_I_argonName+0x288>)
   b5ba6:	483c      	ldr	r0, [pc, #240]	; (b5c98 <_GLOBAL__sub_I_argonName+0x29c>)
   b5ba8:	f001 f86d 	bl	b6c86 <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5bac:	4b3b      	ldr	r3, [pc, #236]	; (b5c9c <_GLOBAL__sub_I_argonName+0x2a0>)
   b5bae:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bb0:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5bb2:	4b3b      	ldr	r3, [pc, #236]	; (b5ca0 <_GLOBAL__sub_I_argonName+0x2a4>)
   b5bb4:	4a3b      	ldr	r2, [pc, #236]	; (b5ca4 <_GLOBAL__sub_I_argonName+0x2a8>)
   b5bb6:	601a      	str	r2, [r3, #0]
   b5bb8:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5bbc:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bc0:	ae0c      	add	r6, sp, #48	; 0x30
   b5bc2:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5bca:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5bce:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5bd2:	e882 0003 	stmia.w	r2, {r0, r1}
   b5bd6:	4a34      	ldr	r2, [pc, #208]	; (b5ca8 <_GLOBAL__sub_I_argonName+0x2ac>)
   b5bd8:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5bda:	699a      	ldr	r2, [r3, #24]
   b5bdc:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b5bde:	4a33      	ldr	r2, [pc, #204]	; (b5cac <_GLOBAL__sub_I_argonName+0x2b0>)
   b5be0:	619a      	str	r2, [r3, #24]
   b5be2:	711c      	strb	r4, [r3, #4]
   b5be4:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5be6:	4a32      	ldr	r2, [pc, #200]	; (b5cb0 <_GLOBAL__sub_I_argonName+0x2b4>)
      __a = _GLIBCXX_MOVE(__b);
   b5be8:	9410      	str	r4, [sp, #64]	; 0x40
   b5bea:	f103 0008 	add.w	r0, r3, #8
   b5bee:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5bf2:	e9cd 8400 	strd	r8, r4, [sp]
   b5bf6:	f000 f9c3 	bl	b5f80 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5bfa:	4628      	mov	r0, r5
   b5bfc:	f7ff f8e0 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
UDP udp;
   b5c00:	492c      	ldr	r1, [pc, #176]	; (b5cb4 <_GLOBAL__sub_I_argonName+0x2b8>)
   b5c02:	4608      	mov	r0, r1
   b5c04:	f000 ff52 	bl	b6aac <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b5c08:	492a      	ldr	r1, [pc, #168]	; (b5cb4 <_GLOBAL__sub_I_argonName+0x2b8>)
   b5c0a:	482b      	ldr	r0, [pc, #172]	; (b5cb8 <_GLOBAL__sub_I_argonName+0x2bc>)
   b5c0c:	f000 f891 	bl	b5d32 <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b5c10:	4621      	mov	r1, r4
   b5c12:	4640      	mov	r0, r8
   b5c14:	b013      	add	sp, #76	; 0x4c
   b5c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b5c1a:	f000 bb29 	b.w	b6270 <system_thread_set_state>
   b5c1e:	bf00      	nop
   b5c20:	2003dc28 	.word	0x2003dc28
   b5c24:	2003dbb0 	.word	0x2003dbb0
   b5c28:	2003d978 	.word	0x2003d978
   b5c2c:	2003d97c 	.word	0x2003d97c
   b5c30:	2003d95c 	.word	0x2003d95c
   b5c34:	2003d954 	.word	0x2003d954
   b5c38:	2003d958 	.word	0x2003d958
   b5c3c:	2003dbec 	.word	0x2003dbec
   b5c40:	2003d960 	.word	0x2003d960
   b5c44:	2003dbd8 	.word	0x2003dbd8
   b5c48:	2003d964 	.word	0x2003d964
   b5c4c:	2003dc14 	.word	0x2003dc14
   b5c50:	000bbc50 	.word	0x000bbc50
   b5c54:	2003db84 	.word	0x2003db84
   b5c58:	000bbc59 	.word	0x000bbc59
   b5c5c:	2003db74 	.word	0x2003db74
   b5c60:	000bbc67 	.word	0x000bbc67
   b5c64:	2003db64 	.word	0x2003db64
   b5c68:	000bbc71 	.word	0x000bbc71
   b5c6c:	2003db6c 	.word	0x2003db6c
   b5c70:	000bbc7e 	.word	0x000bbc7e
   b5c74:	2003db8c 	.word	0x2003db8c
   b5c78:	000bbc88 	.word	0x000bbc88
   b5c7c:	2003db94 	.word	0x2003db94
   b5c80:	2003dca4 	.word	0x2003dca4
   b5c84:	000bbb89 	.word	0x000bbb89
   b5c88:	2003dcac 	.word	0x2003dcac
   b5c8c:	2003dcbc 	.word	0x2003dcbc
   b5c90:	2003dccc 	.word	0x2003dccc
   b5c94:	2003e1bc 	.word	0x2003e1bc
   b5c98:	2003e1d0 	.word	0x2003e1d0
   b5c9c:	000b4ba5 	.word	0x000b4ba5
   b5ca0:	2003e150 	.word	0x2003e150
   b5ca4:	000bbca0 	.word	0x000bbca0
   b5ca8:	000b4b4b 	.word	0x000b4b4b
   b5cac:	000b4b5f 	.word	0x000b4b5f
   b5cb0:	000b4b11 	.word	0x000b4b11
   b5cb4:	2003e16c 	.word	0x2003e16c
   b5cb8:	2003dcdc 	.word	0x2003dcdc
   b5cbc:	2003db9c 	.word	0x2003db9c
   b5cc0:	2003dc00 	.word	0x2003dc00
   b5cc4:	2003dbc4 	.word	0x2003dbc4

000b5cc8 <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b5cc8:	b570      	push	{r4, r5, r6, lr}
   b5cca:	4604      	mov	r4, r0
   b5ccc:	4605      	mov	r5, r0
   b5cce:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5cd2:	4628      	mov	r0, r5
   b5cd4:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b5cd8:	f000 f815 	bl	b5d06 <_ZN12mDNSResolver8ResponseC1Ev>
   b5cdc:	42ae      	cmp	r6, r5
   b5cde:	d1f8      	bne.n	b5cd2 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b5ce0:	2300      	movs	r3, #0
   b5ce2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5ce6:	4620      	mov	r0, r4
   b5ce8:	bd70      	pop	{r4, r5, r6, pc}

000b5cea <_ZN9IPAddressaSImEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b5cea:	b530      	push	{r4, r5, lr}
   b5cec:	b087      	sub	sp, #28
   b5cee:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5cf0:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5cf2:	4668      	mov	r0, sp
   b5cf4:	f002 ffa2 	bl	b8c3c <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b5cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5cfa:	3404      	adds	r4, #4
   b5cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5cfe:	682b      	ldr	r3, [r5, #0]
   b5d00:	7023      	strb	r3, [r4, #0]
    }
   b5d02:	b007      	add	sp, #28
   b5d04:	bd30      	pop	{r4, r5, pc}

000b5d06 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b5d06:	b538      	push	{r3, r4, r5, lr}
   b5d08:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b5d0c:	4604      	mov	r4, r0
   b5d0e:	4628      	mov	r0, r5
   b5d10:	f002 ff74 	bl	b8bfc <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b5d14:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b5d16:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b5d18:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b5d1a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b5d1e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b5d22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b5d26:	f04f 31ff 	mov.w	r1, #4294967295
   b5d2a:	f7ff ffde 	bl	b5cea <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b5d2e:	4620      	mov	r0, r4
   b5d30:	bd38      	pop	{r3, r4, r5, pc}

000b5d32 <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b5d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d34:	4604      	mov	r4, r0
   b5d36:	3004      	adds	r0, #4
   b5d38:	460d      	mov	r5, r1
   b5d3a:	f000 feb7 	bl	b6aac <_ZN3UDPC1Ev>
   b5d3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5d42:	f002 ff5b 	bl	b8bfc <_ZN9IPAddressC1Ev>
    timeout = 0;
   b5d46:	2300      	movs	r3, #0
   b5d48:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b5d4a:	686b      	ldr	r3, [r5, #4]
   b5d4c:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b5d4e:	68ab      	ldr	r3, [r5, #8]
   b5d50:	60e3      	str	r3, [r4, #12]
   b5d52:	68eb      	ldr	r3, [r5, #12]
   b5d54:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b5d56:	696b      	ldr	r3, [r5, #20]
   b5d58:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b5d5a:	f105 0720 	add.w	r7, r5, #32
   b5d5e:	8b2b      	ldrh	r3, [r5, #24]
   b5d60:	83a3      	strh	r3, [r4, #28]
   b5d62:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5d64:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b5d68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5d6a:	683b      	ldr	r3, [r7, #0]
   b5d6c:	7033      	strb	r3, [r6, #0]
   b5d6e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b5d70:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b5d72:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b5d74:	6423      	str	r3, [r4, #64]	; 0x40
   b5d76:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b5d78:	6463      	str	r3, [r4, #68]	; 0x44
   b5d7a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b5d7c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b5d7e:	64a3      	str	r3, [r4, #72]	; 0x48
   b5d80:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b5d84:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b5d86:	4620      	mov	r0, r4
   b5d88:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b5d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5d90 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b5d90:	4801      	ldr	r0, [pc, #4]	; (b5d98 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b5d92:	f7ff bf99 	b.w	b5cc8 <_ZN12mDNSResolver5CacheC1Ev>
   b5d96:	bf00      	nop
   b5d98:	2003e1e0 	.word	0x2003e1e0

000b5d9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <netdb_freeaddrinfo+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	689b      	ldr	r3, [r3, #8]
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	00030268 	.word	0x00030268

000b5dac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <netdb_getaddrinfo+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	68db      	ldr	r3, [r3, #12]
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	00030268 	.word	0x00030268

000b5dbc <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <hal_gpio_mode+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	689b      	ldr	r3, [r3, #8]
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	0003022c 	.word	0x0003022c

000b5dcc <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <hal_interrupt_attach+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	699b      	ldr	r3, [r3, #24]
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	0003022c 	.word	0x0003022c

000b5ddc <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <hal_interrupt_detach+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	69db      	ldr	r3, [r3, #28]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	0003022c 	.word	0x0003022c

000b5dec <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <if_index_to_name+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	695b      	ldr	r3, [r3, #20]
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	0003026c 	.word	0x0003026c

000b5dfc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <HAL_RNG_GetRandomNumber+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	685b      	ldr	r3, [r3, #4]
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030218 	.word	0x00030218

000b5e0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <HAL_Delay_Microseconds+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	68db      	ldr	r3, [r3, #12]
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	00030218 	.word	0x00030218

000b5e1c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	695b      	ldr	r3, [r3, #20]
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	00030218 	.word	0x00030218

000b5e2c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <hal_rtc_time_is_valid+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	00030218 	.word	0x00030218

000b5e3c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <hal_rtc_get_time+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	00030218 	.word	0x00030218

000b5e4c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <HAL_Core_Runtime_Info+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	00030234 	.word	0x00030234

000b5e5c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <hal_ble_stack_init+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	689b      	ldr	r3, [r3, #8]
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	00030278 	.word	0x00030278

000b5e6c <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <hal_ble_select_antenna+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	691b      	ldr	r3, [r3, #16]
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	00030278 	.word	0x00030278

000b5e7c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <hal_ble_gap_set_advertising_data+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	00030278 	.word	0x00030278

000b5e8c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <hal_ble_gap_set_scan_response_data+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	00030278 	.word	0x00030278

000b5e9c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <hal_ble_gap_start_advertising+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030278 	.word	0x00030278

000b5eac <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b03      	ldr	r3, [pc, #12]	; (b5ebc <hal_ble_gap_disconnect+0x10>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5eb6:	9301      	str	r3, [sp, #4]
   b5eb8:	bd08      	pop	{r3, pc}
   b5eba:	0000      	.short	0x0000
   b5ebc:	00030278 	.word	0x00030278

000b5ec0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b03      	ldr	r3, [pc, #12]	; (b5ed0 <hal_ble_gatt_server_add_service+0x10>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5eca:	9301      	str	r3, [sp, #4]
   b5ecc:	bd08      	pop	{r3, pc}
   b5ece:	0000      	.short	0x0000
   b5ed0:	00030278 	.word	0x00030278

000b5ed4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ed4:	b508      	push	{r3, lr}
   b5ed6:	4b03      	ldr	r3, [pc, #12]	; (b5ee4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5ed8:	681b      	ldr	r3, [r3, #0]
   b5eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5ede:	9301      	str	r3, [sp, #4]
   b5ee0:	bd08      	pop	{r3, pc}
   b5ee2:	0000      	.short	0x0000
   b5ee4:	00030278 	.word	0x00030278

000b5ee8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b03      	ldr	r3, [pc, #12]	; (b5ef8 <hal_ble_gatt_client_write_with_response+0x10>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5ef2:	9301      	str	r3, [sp, #4]
   b5ef4:	bd08      	pop	{r3, pc}
   b5ef6:	0000      	.short	0x0000
   b5ef8:	00030278 	.word	0x00030278

000b5efc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b03      	ldr	r3, [pc, #12]	; (b5f0c <hal_ble_gatt_client_write_without_response+0x10>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5f06:	9301      	str	r3, [sp, #4]
   b5f08:	bd08      	pop	{r3, pc}
   b5f0a:	0000      	.short	0x0000
   b5f0c:	00030278 	.word	0x00030278

000b5f10 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b03      	ldr	r3, [pc, #12]	; (b5f20 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5f1a:	9301      	str	r3, [sp, #4]
   b5f1c:	bd08      	pop	{r3, pc}
   b5f1e:	0000      	.short	0x0000
   b5f20:	00030278 	.word	0x00030278

000b5f24 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5f24:	b508      	push	{r3, lr}
   b5f26:	4b03      	ldr	r3, [pc, #12]	; (b5f34 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5f28:	681b      	ldr	r3, [r3, #0]
   b5f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5f2e:	9301      	str	r3, [sp, #4]
   b5f30:	bd08      	pop	{r3, pc}
   b5f32:	0000      	.short	0x0000
   b5f34:	00030278 	.word	0x00030278

000b5f38 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b03      	ldr	r3, [pc, #12]	; (b5f48 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5f42:	9301      	str	r3, [sp, #4]
   b5f44:	bd08      	pop	{r3, pc}
   b5f46:	0000      	.short	0x0000
   b5f48:	00030278 	.word	0x00030278

000b5f4c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b03      	ldr	r3, [pc, #12]	; (b5f5c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5f56:	9301      	str	r3, [sp, #4]
   b5f58:	bd08      	pop	{r3, pc}
   b5f5a:	0000      	.short	0x0000
   b5f5c:	00030278 	.word	0x00030278

000b5f60 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <os_thread_yield+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	68db      	ldr	r3, [r3, #12]
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	00030248 	.word	0x00030248

000b5f70 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <os_thread_scheduling+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	69db      	ldr	r3, [r3, #28]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030248 	.word	0x00030248

000b5f80 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <os_timer_create+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	6a1b      	ldr	r3, [r3, #32]
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030248 	.word	0x00030248

000b5f90 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <os_timer_destroy+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030248 	.word	0x00030248

000b5fa0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <os_timer_get_id+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	00030248 	.word	0x00030248

000b5fb0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <os_timer_change+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	00030248 	.word	0x00030248

000b5fc0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <os_mutex_recursive_create+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	00030248 	.word	0x00030248

000b5fd0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <os_mutex_recursive_lock+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	00030248 	.word	0x00030248

000b5fe0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <os_mutex_recursive_unlock+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	00030248 	.word	0x00030248

000b5ff0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <os_timer_set_id+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	00030248 	.word	0x00030248

000b6000 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <inet_inet_ntop+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	695b      	ldr	r3, [r3, #20]
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	00030264 	.word	0x00030264

000b6010 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <inet_htonl+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	6a1b      	ldr	r3, [r3, #32]
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	00030264 	.word	0x00030264

000b6020 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <inet_ntohs+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	00030264 	.word	0x00030264

000b6030 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <inet_htons+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	00030264 	.word	0x00030264

000b6040 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <hal_usart_write+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	68db      	ldr	r3, [r3, #12]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	0003023c 	.word	0x0003023c

000b6050 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <hal_usart_available+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	691b      	ldr	r3, [r3, #16]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	0003023c 	.word	0x0003023c

000b6060 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <hal_usart_read+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	695b      	ldr	r3, [r3, #20]
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	0003023c 	.word	0x0003023c

000b6070 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <hal_usart_peek+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	699b      	ldr	r3, [r3, #24]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	0003023c 	.word	0x0003023c

000b6080 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <hal_usart_flush+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	69db      	ldr	r3, [r3, #28]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	0003023c 	.word	0x0003023c

000b6090 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <hal_usart_is_enabled+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	6a1b      	ldr	r3, [r3, #32]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	0003023c 	.word	0x0003023c

000b60a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <hal_usart_available_data_for_write+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	0003023c 	.word	0x0003023c

000b60b0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <hal_usart_init_ex+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	0003023c 	.word	0x0003023c

000b60c0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <hal_i2c_write+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6a1b      	ldr	r3, [r3, #32]
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030228 	.word	0x00030228

000b60d0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <hal_i2c_available+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030228 	.word	0x00030228

000b60e0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <hal_i2c_read+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030228 	.word	0x00030228

000b60f0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <hal_i2c_peek+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030228 	.word	0x00030228

000b6100 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <hal_i2c_flush+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030228 	.word	0x00030228

000b6110 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <hal_i2c_is_enabled+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030228 	.word	0x00030228

000b6120 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <hal_i2c_init+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030228 	.word	0x00030228

000b6130 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <sock_bind+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	685b      	ldr	r3, [r3, #4]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030238 	.word	0x00030238

000b6140 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <sock_setsockopt+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	699b      	ldr	r3, [r3, #24]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030238 	.word	0x00030238

000b6150 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <sock_close+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	69db      	ldr	r3, [r3, #28]
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030238 	.word	0x00030238

000b6160 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <sock_recvfrom+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	00030238 	.word	0x00030238

000b6170 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <sock_sendto+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	00030238 	.word	0x00030238

000b6180 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <sock_socket+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	00030238 	.word	0x00030238

000b6190 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <hal_spi_init+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	69db      	ldr	r3, [r3, #28]
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030230 	.word	0x00030230

000b61a0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <hal_spi_is_enabled+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	6a1b      	ldr	r3, [r3, #32]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030230 	.word	0x00030230

000b61b0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <HAL_USB_USART_Init+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	681b      	ldr	r3, [r3, #0]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	0003024c 	.word	0x0003024c

000b61c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <HAL_USB_USART_Available_Data+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	691b      	ldr	r3, [r3, #16]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	0003024c 	.word	0x0003024c

000b61d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	695b      	ldr	r3, [r3, #20]
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	0003024c 	.word	0x0003024c

000b61e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <HAL_USB_USART_Receive_Data+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	699b      	ldr	r3, [r3, #24]
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	0003024c 	.word	0x0003024c

000b61f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <HAL_USB_USART_Send_Data+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	69db      	ldr	r3, [r3, #28]
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	0003024c 	.word	0x0003024c

000b6200 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <HAL_USB_USART_Flush_Data+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	6a1b      	ldr	r3, [r3, #32]
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	0003024c 	.word	0x0003024c

000b6210 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <wlan_connected_info+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	00030274 	.word	0x00030274

000b6220 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <panic_+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030260 	.word	0x00030260

000b6230 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <log_message+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	00030260 	.word	0x00030260

000b6240 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <system_mode+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	681b      	ldr	r3, [r3, #0]
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	00030220 	.word	0x00030220

000b6250 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <set_system_mode+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	685b      	ldr	r3, [r3, #4]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	00030220 	.word	0x00030220

000b6260 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <system_delay_ms+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	695b      	ldr	r3, [r3, #20]
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	00030220 	.word	0x00030220

000b6270 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <system_thread_set_state+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	00030220 	.word	0x00030220

000b6280 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <application_thread_current+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	00030220 	.word	0x00030220

000b6290 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <application_thread_invoke+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030220 	.word	0x00030220

000b62a0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <system_thread_get_state+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030220 	.word	0x00030220

000b62b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b03      	ldr	r3, [pc, #12]	; (b62c0 <system_ctrl_set_app_request_handler+0x10>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b62ba:	9301      	str	r3, [sp, #4]
   b62bc:	bd08      	pop	{r3, pc}
   b62be:	0000      	.short	0x0000
   b62c0:	00030220 	.word	0x00030220

000b62c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b03      	ldr	r3, [pc, #12]	; (b62d4 <system_ctrl_set_result+0x10>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b62ce:	9301      	str	r3, [sp, #4]
   b62d0:	bd08      	pop	{r3, pc}
   b62d2:	0000      	.short	0x0000
   b62d4:	00030220 	.word	0x00030220

000b62d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <network_connect+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	685b      	ldr	r3, [r3, #4]
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	00030240 	.word	0x00030240

000b62e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <network_connecting+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	689b      	ldr	r3, [r3, #8]
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	00030240 	.word	0x00030240

000b62f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <network_disconnect+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	68db      	ldr	r3, [r3, #12]
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	00030240 	.word	0x00030240

000b6308 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <network_ready+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	691b      	ldr	r3, [r3, #16]
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	00030240 	.word	0x00030240

000b6318 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <network_on+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	695b      	ldr	r3, [r3, #20]
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	00030240 	.word	0x00030240

000b6328 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <network_off+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	699b      	ldr	r3, [r3, #24]
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	00030240 	.word	0x00030240

000b6338 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6338:	b508      	push	{r3, lr}
   b633a:	4b02      	ldr	r3, [pc, #8]	; (b6344 <network_listen+0xc>)
   b633c:	681b      	ldr	r3, [r3, #0]
   b633e:	69db      	ldr	r3, [r3, #28]
   b6340:	9301      	str	r3, [sp, #4]
   b6342:	bd08      	pop	{r3, pc}
   b6344:	00030240 	.word	0x00030240

000b6348 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6348:	b508      	push	{r3, lr}
   b634a:	4b02      	ldr	r3, [pc, #8]	; (b6354 <network_listening+0xc>)
   b634c:	681b      	ldr	r3, [r3, #0]
   b634e:	6a1b      	ldr	r3, [r3, #32]
   b6350:	9301      	str	r3, [sp, #4]
   b6352:	bd08      	pop	{r3, pc}
   b6354:	00030240 	.word	0x00030240

000b6358 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6358:	b508      	push	{r3, lr}
   b635a:	4b02      	ldr	r3, [pc, #8]	; (b6364 <network_set_listen_timeout+0xc>)
   b635c:	681b      	ldr	r3, [r3, #0]
   b635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6360:	9301      	str	r3, [sp, #4]
   b6362:	bd08      	pop	{r3, pc}
   b6364:	00030240 	.word	0x00030240

000b6368 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6368:	b508      	push	{r3, lr}
   b636a:	4b02      	ldr	r3, [pc, #8]	; (b6374 <network_get_listen_timeout+0xc>)
   b636c:	681b      	ldr	r3, [r3, #0]
   b636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6370:	9301      	str	r3, [sp, #4]
   b6372:	bd08      	pop	{r3, pc}
   b6374:	00030240 	.word	0x00030240

000b6378 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6378:	b508      	push	{r3, lr}
   b637a:	4b02      	ldr	r3, [pc, #8]	; (b6384 <network_is_on+0xc>)
   b637c:	681b      	ldr	r3, [r3, #0]
   b637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6380:	9301      	str	r3, [sp, #4]
   b6382:	bd08      	pop	{r3, pc}
   b6384:	00030240 	.word	0x00030240

000b6388 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6388:	b508      	push	{r3, lr}
   b638a:	4b02      	ldr	r3, [pc, #8]	; (b6394 <network_is_off+0xc>)
   b638c:	681b      	ldr	r3, [r3, #0]
   b638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6390:	9301      	str	r3, [sp, #4]
   b6392:	bd08      	pop	{r3, pc}
   b6394:	00030240 	.word	0x00030240

000b6398 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6398:	b508      	push	{r3, lr}
   b639a:	4b02      	ldr	r3, [pc, #8]	; (b63a4 <spark_process+0xc>)
   b639c:	681b      	ldr	r3, [r3, #0]
   b639e:	689b      	ldr	r3, [r3, #8]
   b63a0:	9301      	str	r3, [sp, #4]
   b63a2:	bd08      	pop	{r3, pc}
   b63a4:	00030244 	.word	0x00030244

000b63a8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b02      	ldr	r3, [pc, #8]	; (b63b4 <spark_cloud_flag_connected+0xc>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	695b      	ldr	r3, [r3, #20]
   b63b0:	9301      	str	r3, [sp, #4]
   b63b2:	bd08      	pop	{r3, pc}
   b63b4:	00030244 	.word	0x00030244

000b63b8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b63b8:	b508      	push	{r3, lr}
   b63ba:	4b02      	ldr	r3, [pc, #8]	; (b63c4 <spark_send_event+0xc>)
   b63bc:	681b      	ldr	r3, [r3, #0]
   b63be:	6a1b      	ldr	r3, [r3, #32]
   b63c0:	9301      	str	r3, [sp, #4]
   b63c2:	bd08      	pop	{r3, pc}
   b63c4:	00030244 	.word	0x00030244

000b63c8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b63c8:	b508      	push	{r3, lr}
   b63ca:	4b02      	ldr	r3, [pc, #8]	; (b63d4 <spark_subscribe+0xc>)
   b63cc:	681b      	ldr	r3, [r3, #0]
   b63ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b63d0:	9301      	str	r3, [sp, #4]
   b63d2:	bd08      	pop	{r3, pc}
   b63d4:	00030244 	.word	0x00030244

000b63d8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b63d8:	b508      	push	{r3, lr}
   b63da:	4b02      	ldr	r3, [pc, #8]	; (b63e4 <spark_sync_time_pending+0xc>)
   b63dc:	681b      	ldr	r3, [r3, #0]
   b63de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b63e0:	9301      	str	r3, [sp, #4]
   b63e2:	bd08      	pop	{r3, pc}
   b63e4:	00030244 	.word	0x00030244

000b63e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b63e8:	b508      	push	{r3, lr}
   b63ea:	4b02      	ldr	r3, [pc, #8]	; (b63f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b63ec:	681b      	ldr	r3, [r3, #0]
   b63ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b63f0:	9301      	str	r3, [sp, #4]
   b63f2:	bd08      	pop	{r3, pc}
   b63f4:	00030244 	.word	0x00030244

000b63f8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b63f8:	b508      	push	{r3, lr}
   b63fa:	4b02      	ldr	r3, [pc, #8]	; (b6404 <malloc+0xc>)
   b63fc:	681b      	ldr	r3, [r3, #0]
   b63fe:	681b      	ldr	r3, [r3, #0]
   b6400:	9301      	str	r3, [sp, #4]
   b6402:	bd08      	pop	{r3, pc}
   b6404:	0003021c 	.word	0x0003021c

000b6408 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6408:	b508      	push	{r3, lr}
   b640a:	4b02      	ldr	r3, [pc, #8]	; (b6414 <free+0xc>)
   b640c:	681b      	ldr	r3, [r3, #0]
   b640e:	685b      	ldr	r3, [r3, #4]
   b6410:	9301      	str	r3, [sp, #4]
   b6412:	bd08      	pop	{r3, pc}
   b6414:	0003021c 	.word	0x0003021c

000b6418 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6418:	b508      	push	{r3, lr}
   b641a:	4b02      	ldr	r3, [pc, #8]	; (b6424 <realloc+0xc>)
   b641c:	681b      	ldr	r3, [r3, #0]
   b641e:	689b      	ldr	r3, [r3, #8]
   b6420:	9301      	str	r3, [sp, #4]
   b6422:	bd08      	pop	{r3, pc}
   b6424:	0003021c 	.word	0x0003021c

000b6428 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6428:	b508      	push	{r3, lr}
   b642a:	4b02      	ldr	r3, [pc, #8]	; (b6434 <sprintf+0xc>)
   b642c:	681b      	ldr	r3, [r3, #0]
   b642e:	68db      	ldr	r3, [r3, #12]
   b6430:	9301      	str	r3, [sp, #4]
   b6432:	bd08      	pop	{r3, pc}
   b6434:	0003021c 	.word	0x0003021c

000b6438 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6438:	b508      	push	{r3, lr}
   b643a:	4b02      	ldr	r3, [pc, #8]	; (b6444 <vsnprintf+0xc>)
   b643c:	681b      	ldr	r3, [r3, #0]
   b643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6440:	9301      	str	r3, [sp, #4]
   b6442:	bd08      	pop	{r3, pc}
   b6444:	0003021c 	.word	0x0003021c

000b6448 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6448:	b508      	push	{r3, lr}
   b644a:	4b02      	ldr	r3, [pc, #8]	; (b6454 <abort+0xc>)
   b644c:	681b      	ldr	r3, [r3, #0]
   b644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6450:	9301      	str	r3, [sp, #4]
   b6452:	bd08      	pop	{r3, pc}
   b6454:	0003021c 	.word	0x0003021c

000b6458 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6458:	b508      	push	{r3, lr}
   b645a:	4b02      	ldr	r3, [pc, #8]	; (b6464 <_malloc_r+0xc>)
   b645c:	681b      	ldr	r3, [r3, #0]
   b645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6460:	9301      	str	r3, [sp, #4]
   b6462:	bd08      	pop	{r3, pc}
   b6464:	0003021c 	.word	0x0003021c

000b6468 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6468:	b508      	push	{r3, lr}
   b646a:	4b02      	ldr	r3, [pc, #8]	; (b6474 <__errno+0xc>)
   b646c:	681b      	ldr	r3, [r3, #0]
   b646e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6470:	9301      	str	r3, [sp, #4]
   b6472:	bd08      	pop	{r3, pc}
   b6474:	0003021c 	.word	0x0003021c

000b6478 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b02      	ldr	r3, [pc, #8]	; (b6484 <__assert_func+0xc>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6480:	9301      	str	r3, [sp, #4]
   b6482:	bd08      	pop	{r3, pc}
   b6484:	0003021c 	.word	0x0003021c

000b6488 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6488:	b508      	push	{r3, lr}
   b648a:	4b02      	ldr	r3, [pc, #8]	; (b6494 <newlib_impure_ptr_callback+0xc>)
   b648c:	681b      	ldr	r3, [r3, #0]
   b648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6490:	9301      	str	r3, [sp, #4]
   b6492:	bd08      	pop	{r3, pc}
   b6494:	0003021c 	.word	0x0003021c

000b6498 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6498:	b508      	push	{r3, lr}
   b649a:	4b02      	ldr	r3, [pc, #8]	; (b64a4 <localtime_r+0xc>)
   b649c:	681b      	ldr	r3, [r3, #0]
   b649e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b64a0:	9301      	str	r3, [sp, #4]
   b64a2:	bd08      	pop	{r3, pc}
   b64a4:	0003021c 	.word	0x0003021c

000b64a8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b64a8:	2200      	movs	r2, #0
   b64aa:	6840      	ldr	r0, [r0, #4]
   b64ac:	4611      	mov	r1, r2
   b64ae:	f7ff bf4b 	b.w	b6348 <network_listening>

000b64b2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b64b2:	2200      	movs	r2, #0
   b64b4:	6840      	ldr	r0, [r0, #4]
   b64b6:	4611      	mov	r1, r2
   b64b8:	f7ff bf56 	b.w	b6368 <network_get_listen_timeout>

000b64bc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b64bc:	6840      	ldr	r0, [r0, #4]
   b64be:	2200      	movs	r2, #0
   b64c0:	f7ff bf4a 	b.w	b6358 <network_set_listen_timeout>

000b64c4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b64c4:	6840      	ldr	r0, [r0, #4]
   b64c6:	2200      	movs	r2, #0
   b64c8:	f081 0101 	eor.w	r1, r1, #1
   b64cc:	f7ff bf34 	b.w	b6338 <network_listen>

000b64d0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b64d0:	2300      	movs	r3, #0
   b64d2:	6840      	ldr	r0, [r0, #4]
   b64d4:	461a      	mov	r2, r3
   b64d6:	4619      	mov	r1, r3
   b64d8:	f7ff bf26 	b.w	b6328 <network_off>

000b64dc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b64dc:	2300      	movs	r3, #0
   b64de:	6840      	ldr	r0, [r0, #4]
   b64e0:	461a      	mov	r2, r3
   b64e2:	4619      	mov	r1, r3
   b64e4:	f7ff bf18 	b.w	b6318 <network_on>

000b64e8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b64e8:	2200      	movs	r2, #0
   b64ea:	6840      	ldr	r0, [r0, #4]
   b64ec:	4611      	mov	r1, r2
   b64ee:	f7ff bf0b 	b.w	b6308 <network_ready>

000b64f2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b64f2:	2200      	movs	r2, #0
   b64f4:	6840      	ldr	r0, [r0, #4]
   b64f6:	4611      	mov	r1, r2
   b64f8:	f7ff bef6 	b.w	b62e8 <network_connecting>

000b64fc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b64fc:	6840      	ldr	r0, [r0, #4]
   b64fe:	2200      	movs	r2, #0
   b6500:	2102      	movs	r1, #2
   b6502:	f7ff bef9 	b.w	b62f8 <network_disconnect>

000b6506 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6506:	2300      	movs	r3, #0
   b6508:	6840      	ldr	r0, [r0, #4]
   b650a:	461a      	mov	r2, r3
   b650c:	f7ff bee4 	b.w	b62d8 <network_connect>

000b6510 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6510:	4b02      	ldr	r3, [pc, #8]	; (b651c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6512:	2203      	movs	r2, #3
   b6514:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6516:	4a02      	ldr	r2, [pc, #8]	; (b6520 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6518:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b651a:	4770      	bx	lr
   b651c:	2003e674 	.word	0x2003e674
   b6520:	000bbdc0 	.word	0x000bbdc0

000b6524 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6524:	b510      	push	{r4, lr}
   b6526:	4604      	mov	r4, r0
   b6528:	4608      	mov	r0, r1
{
    _spi = spi;
   b652a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b652c:	f7ff fe30 	bl	b6190 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6530:	2300      	movs	r3, #0
   b6532:	6063      	str	r3, [r4, #4]
}
   b6534:	4620      	mov	r0, r4
   b6536:	bd10      	pop	{r4, pc}

000b6538 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b6538:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b653a:	2420      	movs	r4, #32
{
   b653c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b653e:	4622      	mov	r2, r4
   b6540:	2100      	movs	r1, #0
   b6542:	4668      	mov	r0, sp
   b6544:	f003 f8dd 	bl	b9702 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b6548:	2100      	movs	r1, #0
   b654a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b654c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b6550:	f7ff fc7c 	bl	b5e4c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b6554:	9801      	ldr	r0, [sp, #4]
   b6556:	b008      	add	sp, #32
   b6558:	bd10      	pop	{r4, pc}
	...

000b655c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b655c:	4b05      	ldr	r3, [pc, #20]	; (b6574 <_GLOBAL__sub_I_System+0x18>)
   b655e:	2202      	movs	r2, #2
   b6560:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6562:	4b05      	ldr	r3, [pc, #20]	; (b6578 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6564:	4a05      	ldr	r2, [pc, #20]	; (b657c <_GLOBAL__sub_I_System+0x20>)
   b6566:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6568:	2000      	movs	r0, #0
   b656a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b656e:	f7ff be6f 	b.w	b6250 <set_system_mode>
   b6572:	bf00      	nop
   b6574:	2003e688 	.word	0x2003e688
   b6578:	2003e67c 	.word	0x2003e67c
   b657c:	ffff0000 	.word	0xffff0000

000b6580 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6580:	b510      	push	{r4, lr}
   b6582:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6584:	f7fe fa1e 	bl	b49c4 <strlen>
   b6588:	3801      	subs	r0, #1
   b658a:	1823      	adds	r3, r4, r0
   b658c:	4620      	mov	r0, r4
	while(i<j){
   b658e:	4283      	cmp	r3, r0
   b6590:	d906      	bls.n	b65a0 <_Z11str_reversePc+0x20>
		c = *i;
   b6592:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6594:	7819      	ldrb	r1, [r3, #0]
   b6596:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b659a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b659e:	e7f6      	b.n	b658e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b65a0:	bd10      	pop	{r4, pc}

000b65a2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b65a2:	b570      	push	{r4, r5, r6, lr}
   b65a4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b65a6:	1e91      	subs	r1, r2, #2
   b65a8:	2922      	cmp	r1, #34	; 0x22
   b65aa:	d81d      	bhi.n	b65e8 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b65ac:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b65ae:	b930      	cbnz	r0, b65be <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b65b0:	4423      	add	r3, r4
            *ptr++ = '0';
   b65b2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b65b4:	429d      	cmp	r5, r3
   b65b6:	d210      	bcs.n	b65da <ultoa+0x38>
            *ptr++ = '0';
   b65b8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b65bc:	e7fa      	b.n	b65b4 <ultoa+0x12>
            result.quot = a/radix;
   b65be:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b65c2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b65c6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b65c8:	2809      	cmp	r0, #9
                *ptr += '0';
   b65ca:	bf94      	ite	ls
   b65cc:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b65ce:	3157      	addhi	r1, #87	; 0x57
   b65d0:	b2c9      	uxtb	r1, r1
   b65d2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b65d6:	4630      	mov	r0, r6
	while(a){
   b65d8:	e7e9      	b.n	b65ae <ultoa+0xc>

	*ptr = '\0';
   b65da:	2300      	movs	r3, #0
	str_reverse(buffer);
   b65dc:	4620      	mov	r0, r4
	*ptr = '\0';
   b65de:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b65e0:	f7ff ffce 	bl	b6580 <_Z11str_reversePc>
	return buffer;
   b65e4:	4620      	mov	r0, r4
}
   b65e6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b65e8:	2000      	movs	r0, #0
   b65ea:	e7fc      	b.n	b65e6 <ultoa+0x44>

000b65ec <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b65ec:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b65ee:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b65f0:	460c      	mov	r4, r1
   b65f2:	4615      	mov	r5, r2
	if(a<0){
   b65f4:	da0e      	bge.n	b6614 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b65f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b65fa:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b65fe:	bf14      	ite	ne
   b6600:	4258      	negne	r0, r3
   b6602:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b6604:	2301      	movs	r3, #1
		*buffer = '-';
   b6606:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6608:	462a      	mov	r2, r5
   b660a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b660c:	f7ff ffc9 	bl	b65a2 <ultoa>
	}
	return buffer;
}
   b6610:	4620      	mov	r0, r4
   b6612:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b6614:	2301      	movs	r3, #1
   b6616:	e7f9      	b.n	b660c <itoa+0x20>

000b6618 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b6618:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b661a:	6804      	ldr	r4, [r0, #0]
   b661c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b661e:	46a4      	mov	ip, r4
    }
   b6620:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b6624:	4760      	bx	ip

000b6626 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b6626:	6803      	ldr	r3, [r0, #0]
   b6628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b662a:	4718      	bx	r3

000b662c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b662c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b662e:	4770      	bx	lr

000b6630 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b6630:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b6632:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b6634:	1a10      	subs	r0, r2, r0
   b6636:	4770      	bx	lr

000b6638 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b6638:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b663a:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b663c:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b663e:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6640:	4b0c      	ldr	r3, [pc, #48]	; (b6674 <_ZN3UDP9endPacketEv+0x3c>)
   b6642:	9302      	str	r3, [sp, #8]
   b6644:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b6648:	4604      	mov	r4, r0
   b664a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b664c:	ad03      	add	r5, sp, #12
   b664e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6650:	6833      	ldr	r3, [r6, #0]
   b6652:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6654:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b6656:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b6658:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b665a:	9300      	str	r3, [sp, #0]
   b665c:	4620      	mov	r0, r4
   b665e:	ab02      	add	r3, sp, #8
   b6660:	47b8      	blx	r7
    flush(); // wait for send to complete
   b6662:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6664:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b6666:	69db      	ldr	r3, [r3, #28]
   b6668:	4620      	mov	r0, r4
   b666a:	4798      	blx	r3
    return result;
}
   b666c:	4628      	mov	r0, r5
   b666e:	b009      	add	sp, #36	; 0x24
   b6670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6672:	bf00      	nop
   b6674:	000bc04c 	.word	0x000bc04c

000b6678 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b6678:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b667a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b667c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b6680:	68db      	ldr	r3, [r3, #12]
   b6682:	2201      	movs	r2, #1
   b6684:	f10d 0107 	add.w	r1, sp, #7
   b6688:	4798      	blx	r3
}
   b668a:	b003      	add	sp, #12
   b668c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6690 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b6690:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b6692:	6803      	ldr	r3, [r0, #0]
   b6694:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b6696:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b6698:	4798      	blx	r3
   b669a:	b128      	cbz	r0, b66a8 <_ZN3UDP4readEv+0x18>
   b669c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b669e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b66a0:	1c59      	adds	r1, r3, #1
   b66a2:	86e1      	strh	r1, [r4, #54]	; 0x36
   b66a4:	5cd0      	ldrb	r0, [r2, r3]
}
   b66a6:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b66a8:	f04f 30ff 	mov.w	r0, #4294967295
   b66ac:	e7fb      	b.n	b66a6 <_ZN3UDP4readEv+0x16>

000b66ae <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b66ae:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b66b0:	6803      	ldr	r3, [r0, #0]
   b66b2:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b66b4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b66b6:	4798      	blx	r3
   b66b8:	b118      	cbz	r0, b66c2 <_ZN3UDP4peekEv+0x14>
   b66ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b66bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b66be:	5cd0      	ldrb	r0, [r2, r3]
}
   b66c0:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b66c2:	f04f 30ff 	mov.w	r0, #4294967295
   b66c6:	e7fb      	b.n	b66c0 <_ZN3UDP4peekEv+0x12>

000b66c8 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b66c8:	4770      	bx	lr

000b66ca <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b66ca:	b410      	push	{r4}
   b66cc:	4603      	mov	r3, r0
   b66ce:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b66d0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b66d2:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b66d4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b66d6:	6803      	ldr	r3, [r0, #0]
   b66d8:	1a52      	subs	r2, r2, r1
   b66da:	68db      	ldr	r3, [r3, #12]
   b66dc:	4421      	add	r1, r4
}
   b66de:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b66e2:	4718      	bx	r3

000b66e4 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b66e4:	f1a0 0010 	sub.w	r0, r0, #16
   b66e8:	f7ff bfef 	b.w	b66ca <_ZNK3UDP7printToER5Print>

000b66ec <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b66ec:	b570      	push	{r4, r5, r6, lr}
    stop();
   b66ee:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b66f0:	b08c      	sub	sp, #48	; 0x30
    stop();
   b66f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b66f4:	4604      	mov	r4, r0
   b66f6:	460e      	mov	r6, r1
   b66f8:	4615      	mov	r5, r2
    stop();
   b66fa:	4798      	blx	r3
    const int one = 1;
   b66fc:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b66fe:	221c      	movs	r2, #28
   b6700:	2100      	movs	r1, #0
   b6702:	a805      	add	r0, sp, #20
    const int one = 1;
   b6704:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b6706:	f002 fffc 	bl	b9702 <memset>
    saddr.sin6_len = sizeof(saddr);
   b670a:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b670e:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b6710:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b6714:	f7ff fc8c 	bl	b6030 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b6718:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b671a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b671e:	2102      	movs	r1, #2
   b6720:	200a      	movs	r0, #10
   b6722:	f7ff fd2d 	bl	b6180 <sock_socket>
    if (_sock < 0) {
   b6726:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b6728:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b672a:	db25      	blt.n	b6778 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b672c:	2204      	movs	r2, #4
   b672e:	9200      	str	r2, [sp, #0]
   b6730:	ab02      	add	r3, sp, #8
   b6732:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6736:	f7ff fd03 	bl	b6140 <sock_setsockopt>
   b673a:	b9e8      	cbnz	r0, b6778 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b673c:	b195      	cbz	r5, b6764 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b673e:	9003      	str	r0, [sp, #12]
   b6740:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b6744:	a903      	add	r1, sp, #12
   b6746:	b2e8      	uxtb	r0, r5
   b6748:	f7ff fb50 	bl	b5dec <if_index_to_name>
   b674c:	b9a0      	cbnz	r0, b6778 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b674e:	2306      	movs	r3, #6
   b6750:	9300      	str	r3, [sp, #0]
   b6752:	6960      	ldr	r0, [r4, #20]
   b6754:	ab03      	add	r3, sp, #12
   b6756:	f241 020b 	movw	r2, #4107	; 0x100b
   b675a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b675e:	f7ff fcef 	bl	b6140 <sock_setsockopt>
   b6762:	b948      	cbnz	r0, b6778 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b6764:	6960      	ldr	r0, [r4, #20]
   b6766:	221c      	movs	r2, #28
   b6768:	a905      	add	r1, sp, #20
   b676a:	f7ff fce1 	bl	b6130 <sock_bind>
   b676e:	b918      	cbnz	r0, b6778 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b6770:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b6772:	2001      	movs	r0, #1
}
   b6774:	b00c      	add	sp, #48	; 0x30
   b6776:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b6778:	6823      	ldr	r3, [r4, #0]
   b677a:	4620      	mov	r0, r4
   b677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b677e:	4798      	blx	r3
   b6780:	2000      	movs	r0, #0
   b6782:	e7f7      	b.n	b6774 <_ZN3UDP5beginEtm+0x88>

000b6784 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b6784:	b510      	push	{r4, lr}
   b6786:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b6788:	6940      	ldr	r0, [r0, #20]
   b678a:	2800      	cmp	r0, #0
   b678c:	db01      	blt.n	b6792 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b678e:	f7ff fcdf 	bl	b6150 <sock_close>
    _sock = -1;
   b6792:	f04f 33ff 	mov.w	r3, #4294967295
   b6796:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b6798:	2300      	movs	r3, #0
   b679a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b679c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b679e:	bd10      	pop	{r4, pc}

000b67a0 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b67a0:	b570      	push	{r4, r5, r6, lr}
   b67a2:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b67a4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b67a6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b67a8:	b168      	cbz	r0, b67c6 <_ZN3UDP5writeEPKhj+0x26>
   b67aa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b67ac:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b67ae:	4294      	cmp	r4, r2
   b67b0:	bf28      	it	cs
   b67b2:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b67b4:	4622      	mov	r2, r4
   b67b6:	4430      	add	r0, r6
   b67b8:	f002 ff7b 	bl	b96b2 <memcpy>
    _offset += size;
   b67bc:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b67be:	4423      	add	r3, r4
   b67c0:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b67c2:	4620      	mov	r0, r4
   b67c4:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b67c6:	4604      	mov	r4, r0
   b67c8:	e7f1      	b.n	b67ae <_ZN3UDP5writeEPKhj+0xe>

000b67ca <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b67ca:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b67cc:	6803      	ldr	r3, [r0, #0]
   b67ce:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b67d0:	4604      	mov	r4, r0
   b67d2:	460f      	mov	r7, r1
   b67d4:	4616      	mov	r6, r2
    if (available()) {
   b67d6:	4798      	blx	r3
   b67d8:	b190      	cbz	r0, b6800 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b67da:	6823      	ldr	r3, [r4, #0]
   b67dc:	4620      	mov	r0, r4
   b67de:	691b      	ldr	r3, [r3, #16]
   b67e0:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b67e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b67e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b67e6:	4286      	cmp	r6, r0
   b67e8:	bfa8      	it	ge
   b67ea:	4606      	movge	r6, r0
   b67ec:	4419      	add	r1, r3
   b67ee:	4632      	mov	r2, r6
   b67f0:	4638      	mov	r0, r7
   b67f2:	f002 ff5e 	bl	b96b2 <memcpy>
        _offset += read;
   b67f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b67f8:	4433      	add	r3, r6
   b67fa:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b67fc:	4630      	mov	r0, r6
   b67fe:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b6800:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b6804:	e7fa      	b.n	b67fc <_ZN3UDP4readEPhj+0x32>

000b6806 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b6806:	b530      	push	{r4, r5, lr}
   b6808:	b087      	sub	sp, #28
   b680a:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b680c:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b680e:	4668      	mov	r0, sp
   b6810:	f002 fa40 	bl	b8c94 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6816:	3404      	adds	r4, #4
   b6818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b681a:	682b      	ldr	r3, [r5, #0]
   b681c:	7023      	strb	r3, [r4, #0]
    }
   b681e:	b007      	add	sp, #28
   b6820:	bd30      	pop	{r4, r5, pc}
	...

000b6824 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b6824:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6826:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b6828:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b682a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b682c:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b682e:	4a0a      	ldr	r2, [pc, #40]	; (b6858 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b6830:	9202      	str	r2, [sp, #8]
   b6832:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b6834:	468c      	mov	ip, r1
   b6836:	4606      	mov	r6, r0
   b6838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b683a:	ad03      	add	r5, sp, #12
   b683c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b683e:	6823      	ldr	r3, [r4, #0]
   b6840:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b6842:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b6846:	9300      	str	r3, [sp, #0]
   b6848:	4672      	mov	r2, lr
   b684a:	ab02      	add	r3, sp, #8
   b684c:	4661      	mov	r1, ip
   b684e:	4630      	mov	r0, r6
   b6850:	47b8      	blx	r7
    }
   b6852:	b009      	add	sp, #36	; 0x24
   b6854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6856:	bf00      	nop
   b6858:	000bc04c 	.word	0x000bc04c

000b685c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b685c:	b570      	push	{r4, r5, r6, lr}
   b685e:	4604      	mov	r4, r0
   b6860:	4b05      	ldr	r3, [pc, #20]	; (b6878 <_ZN3UDP8remoteIPEv+0x1c>)
   b6862:	f844 3b04 	str.w	r3, [r4], #4
   b6866:	f101 0520 	add.w	r5, r1, #32
   b686a:	4606      	mov	r6, r0
   b686c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b686e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6870:	682b      	ldr	r3, [r5, #0]
   b6872:	7023      	strb	r3, [r4, #0]
   b6874:	4630      	mov	r0, r6
   b6876:	bd70      	pop	{r4, r5, r6, pc}
   b6878:	000bc04c 	.word	0x000bc04c

000b687c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b687c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b687e:	7843      	ldrb	r3, [r0, #1]
   b6880:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b6882:	b08d      	sub	sp, #52	; 0x34
   b6884:	4605      	mov	r5, r0
   b6886:	460c      	mov	r4, r1
   b6888:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b688a:	d104      	bne.n	b6896 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b688c:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b688e:	4620      	mov	r0, r4
   b6890:	f7ff ffb9 	bl	b6806 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b6894:	e022      	b.n	b68dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b6896:	2b0a      	cmp	r3, #10
   b6898:	d125      	bne.n	b68e6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b689a:	2211      	movs	r2, #17
   b689c:	2100      	movs	r1, #0
   b689e:	a801      	add	r0, sp, #4
   b68a0:	f002 ff2f 	bl	b9702 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b68a4:	68ab      	ldr	r3, [r5, #8]
   b68a6:	b303      	cbz	r3, b68ea <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b68a8:	f105 0308 	add.w	r3, r5, #8
   b68ac:	ae01      	add	r6, sp, #4
   b68ae:	f105 0c18 	add.w	ip, r5, #24
   b68b2:	6818      	ldr	r0, [r3, #0]
   b68b4:	6859      	ldr	r1, [r3, #4]
   b68b6:	4632      	mov	r2, r6
   b68b8:	c203      	stmia	r2!, {r0, r1}
   b68ba:	3308      	adds	r3, #8
   b68bc:	4563      	cmp	r3, ip
   b68be:	4616      	mov	r6, r2
   b68c0:	d1f7      	bne.n	b68b2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b68c2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b68c4:	a901      	add	r1, sp, #4
   b68c6:	a806      	add	r0, sp, #24
   b68c8:	ae07      	add	r6, sp, #28
            a.v = 6;
   b68ca:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b68ce:	f002 f9a3 	bl	b8c18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b68d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b68d4:	3404      	adds	r4, #4
   b68d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68d8:	6833      	ldr	r3, [r6, #0]
   b68da:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b68dc:	b11f      	cbz	r7, b68e6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b68de:	8868      	ldrh	r0, [r5, #2]
   b68e0:	f7ff fb9e 	bl	b6020 <inet_ntohs>
   b68e4:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b68e6:	b00d      	add	sp, #52	; 0x34
   b68e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b68ea:	68eb      	ldr	r3, [r5, #12]
   b68ec:	2b00      	cmp	r3, #0
   b68ee:	d1db      	bne.n	b68a8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b68f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b68f4:	692e      	ldr	r6, [r5, #16]
   b68f6:	f7ff fb8b 	bl	b6010 <inet_htonl>
   b68fa:	4286      	cmp	r6, r0
   b68fc:	d1d4      	bne.n	b68a8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b68fe:	f105 0114 	add.w	r1, r5, #20
   b6902:	e7c4      	b.n	b688e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b6904 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b6904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6908:	4617      	mov	r7, r2
   b690a:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b690c:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b690e:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6910:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b6912:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6914:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b6916:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6918:	f7ff fa48 	bl	b5dac <netdb_getaddrinfo>
   b691c:	1e04      	subs	r4, r0, #0
   b691e:	db20      	blt.n	b6962 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b6920:	9b01      	ldr	r3, [sp, #4]
   b6922:	b32b      	cbz	r3, b6970 <_ZN3UDP11beginPacketEPKct+0x6c>
   b6924:	695b      	ldr	r3, [r3, #20]
   b6926:	b31b      	cbz	r3, b6970 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b6928:	a802      	add	r0, sp, #8
   b692a:	f002 f967 	bl	b8bfc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b692e:	9b01      	ldr	r3, [sp, #4]
   b6930:	2200      	movs	r2, #0
   b6932:	6958      	ldr	r0, [r3, #20]
   b6934:	a902      	add	r1, sp, #8
   b6936:	f7ff ffa1 	bl	b687c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b693a:	a802      	add	r0, sp, #8
   b693c:	f002 f986 	bl	b8c4c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6940:	b1b0      	cbz	r0, b6970 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b6942:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6944:	ad03      	add	r5, sp, #12
   b6946:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b694a:	4b0b      	ldr	r3, [pc, #44]	; (b6978 <_ZN3UDP11beginPacketEPKct+0x74>)
   b694c:	9308      	str	r3, [sp, #32]
   b694e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6950:	ac09      	add	r4, sp, #36	; 0x24
   b6952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6954:	682b      	ldr	r3, [r5, #0]
   b6956:	7023      	strb	r3, [r4, #0]
   b6958:	463a      	mov	r2, r7
   b695a:	a908      	add	r1, sp, #32
   b695c:	4630      	mov	r0, r6
   b695e:	47c0      	blx	r8
   b6960:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b6962:	9801      	ldr	r0, [sp, #4]
   b6964:	f7ff fa1a 	bl	b5d9c <netdb_freeaddrinfo>
}
   b6968:	4620      	mov	r0, r4
   b696a:	b00e      	add	sp, #56	; 0x38
   b696c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b6970:	f04f 34ff 	mov.w	r4, #4294967295
   b6974:	e7f5      	b.n	b6962 <_ZN3UDP11beginPacketEPKct+0x5e>
   b6976:	bf00      	nop
   b6978:	000bc04c 	.word	0x000bc04c

000b697c <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b697c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b6980:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b6984:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b6988:	b090      	sub	sp, #64	; 0x40
   b698a:	4605      	mov	r5, r0
   b698c:	460e      	mov	r6, r1
   b698e:	4690      	mov	r8, r2
   b6990:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b6992:	db3c      	blt.n	b6a0e <_ZN3UDP13receivePacketEPhjm+0x92>
   b6994:	2900      	cmp	r1, #0
   b6996:	d03a      	beq.n	b6a0e <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b6998:	f04f 0a1c 	mov.w	sl, #28
   b699c:	af09      	add	r7, sp, #36	; 0x24
   b699e:	4652      	mov	r2, sl
   b69a0:	2100      	movs	r1, #0
   b69a2:	4638      	mov	r0, r7
   b69a4:	f002 fead 	bl	b9702 <memset>
        socklen_t slen = sizeof(saddr);
   b69a8:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b69ac:	b1dc      	cbz	r4, b69e6 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b69ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b69b2:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b69b6:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b69ba:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b69bc:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b69be:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b69c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b69c4:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b69c6:	9300      	str	r3, [sp, #0]
   b69c8:	f241 0206 	movw	r2, #4102	; 0x1006
   b69cc:	446b      	add	r3, sp
   b69ce:	f640 71ff 	movw	r1, #4095	; 0xfff
   b69d2:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b69d4:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b69d6:	f7ff fbb3 	bl	b6140 <sock_setsockopt>
            if (ret) {
   b69da:	4604      	mov	r4, r0
   b69dc:	b120      	cbz	r0, b69e8 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b69de:	4620      	mov	r0, r4
   b69e0:	b010      	add	sp, #64	; 0x40
   b69e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b69e6:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b69e8:	ab03      	add	r3, sp, #12
   b69ea:	e9cd 7300 	strd	r7, r3, [sp]
   b69ee:	6968      	ldr	r0, [r5, #20]
   b69f0:	4623      	mov	r3, r4
   b69f2:	4642      	mov	r2, r8
   b69f4:	4631      	mov	r1, r6
   b69f6:	f7ff fbb3 	bl	b6160 <sock_recvfrom>
        if (ret >= 0) {
   b69fa:	1e04      	subs	r4, r0, #0
   b69fc:	dbef      	blt.n	b69de <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b69fe:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b6a02:	f105 011c 	add.w	r1, r5, #28
   b6a06:	4638      	mov	r0, r7
   b6a08:	f7ff ff38 	bl	b687c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b6a0c:	e7e7      	b.n	b69de <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b6a0e:	f04f 34ff 	mov.w	r4, #4294967295
   b6a12:	e7e4      	b.n	b69de <_ZN3UDP13receivePacketEPhjm+0x62>

000b6a14 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b6a14:	b538      	push	{r3, r4, r5, lr}
   b6a16:	4605      	mov	r5, r0
   b6a18:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6a1a:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b6a1c:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b6a1e:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b6a20:	d110      	bne.n	b6a44 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b6a22:	f640 231c 	movw	r3, #2588	; 0xa1c
   b6a26:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b6a28:	f7ff fb02 	bl	b6030 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b6a2c:	3408      	adds	r4, #8
   b6a2e:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b6a30:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b6a34:	3514      	adds	r5, #20
   b6a36:	f853 2b04 	ldr.w	r2, [r3], #4
   b6a3a:	f844 2b04 	str.w	r2, [r4], #4
   b6a3e:	42ab      	cmp	r3, r5
   b6a40:	d1f9      	bne.n	b6a36 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b6a42:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b6a44:	2b04      	cmp	r3, #4
   b6a46:	d1fc      	bne.n	b6a42 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b6a48:	f44f 7304 	mov.w	r3, #528	; 0x210
   b6a4c:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b6a4e:	f7ff faef 	bl	b6030 <inet_htons>
   b6a52:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b6a54:	6868      	ldr	r0, [r5, #4]
   b6a56:	f7ff fadb 	bl	b6010 <inet_htonl>
   b6a5a:	6060      	str	r0, [r4, #4]
}
   b6a5c:	e7f1      	b.n	b6a42 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b6a5e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b6a5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a62:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b6a64:	af03      	add	r7, sp, #12
   b6a66:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b6a6a:	4698      	mov	r8, r3
   b6a6c:	4604      	mov	r4, r0
   b6a6e:	460d      	mov	r5, r1
   b6a70:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b6a72:	2100      	movs	r1, #0
   b6a74:	464a      	mov	r2, r9
   b6a76:	4638      	mov	r0, r7
   b6a78:	f002 fe43 	bl	b9702 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b6a7c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b6a80:	463a      	mov	r2, r7
   b6a82:	4640      	mov	r0, r8
   b6a84:	f7ff ffc6 	bl	b6a14 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b6a88:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b6a8c:	b153      	cbz	r3, b6aa4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b6a8e:	e9cd 7900 	strd	r7, r9, [sp]
   b6a92:	6960      	ldr	r0, [r4, #20]
   b6a94:	2300      	movs	r3, #0
   b6a96:	4632      	mov	r2, r6
   b6a98:	4629      	mov	r1, r5
   b6a9a:	f7ff fb69 	bl	b6170 <sock_sendto>
}
   b6a9e:	b00b      	add	sp, #44	; 0x2c
   b6aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b6aa4:	f04f 30ff 	mov.w	r0, #4294967295
   b6aa8:	e7f9      	b.n	b6a9e <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b6aac <_ZN3UDPC1Ev>:
UDP::UDP()
   b6aac:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6aae:	2500      	movs	r5, #0
   b6ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6ab4:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b6ab8:	4b0b      	ldr	r3, [pc, #44]	; (b6ae8 <_ZN3UDPC1Ev+0x3c>)
   b6aba:	f103 0208 	add.w	r2, r3, #8
   b6abe:	336c      	adds	r3, #108	; 0x6c
   b6ac0:	6103      	str	r3, [r0, #16]
   b6ac2:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b6ac6:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b6ac8:	6002      	str	r2, [r0, #0]
   b6aca:	6143      	str	r3, [r0, #20]
   b6acc:	301c      	adds	r0, #28
   b6ace:	f002 f895 	bl	b8bfc <_ZN9IPAddressC1Ev>
   b6ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
   b6ad6:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b6ada:	86e5      	strh	r5, [r4, #54]	; 0x36
   b6adc:	8725      	strh	r5, [r4, #56]	; 0x38
   b6ade:	63e5      	str	r5, [r4, #60]	; 0x3c
   b6ae0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	bd38      	pop	{r3, r4, r5, pc}
   b6ae8:	000bbdf4 	.word	0x000bbdf4

000b6aec <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b6aec:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b6aee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b6af2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b6af4:	b123      	cbz	r3, b6b00 <_ZN3UDP13releaseBufferEv+0x14>
   b6af6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b6af8:	b110      	cbz	r0, b6b00 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b6afa:	2101      	movs	r1, #1
   b6afc:	f7fd ffc1 	bl	b4a82 <_ZdlPvj>
    _buffer = NULL;
   b6b00:	2300      	movs	r3, #0
   b6b02:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b6b04:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b6b08:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b6b0a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b6b0c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b6b0e:	bd10      	pop	{r4, pc}

000b6b10 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b6b10:	b570      	push	{r4, r5, r6, lr}
   b6b12:	4604      	mov	r4, r0
   b6b14:	4616      	mov	r6, r2
   b6b16:	460d      	mov	r5, r1
    releaseBuffer();
   b6b18:	f7ff ffe8 	bl	b6aec <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b6b1c:	2300      	movs	r3, #0
    _buffer = buffer;
   b6b1e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b6b20:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b6b22:	b12e      	cbz	r6, b6b30 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b6b24:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b6b26:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b6b28:	3800      	subs	r0, #0
   b6b2a:	bf18      	it	ne
   b6b2c:	2001      	movne	r0, #1
   b6b2e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b6b30:	2d00      	cmp	r5, #0
   b6b32:	d0f8      	beq.n	b6b26 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b6b34:	4628      	mov	r0, r5
   b6b36:	f7fd ffa2 	bl	b4a7e <_Znaj>
        _buffer_allocated = true;
   b6b3a:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b6b3c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b6b3e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b6b42:	2800      	cmp	r0, #0
   b6b44:	d0ef      	beq.n	b6b26 <_ZN3UDP9setBufferEjPh+0x16>
   b6b46:	e7ed      	b.n	b6b24 <_ZN3UDP9setBufferEjPh+0x14>

000b6b48 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b6b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b4a:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b6b4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b6b4e:	4605      	mov	r5, r0
   b6b50:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b6b52:	b91a      	cbnz	r2, b6b5c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b6b54:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b6b56:	b109      	cbz	r1, b6b5c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b6b58:	f7ff ffda 	bl	b6b10 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b6b5c:	3404      	adds	r4, #4
   b6b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6b60:	f105 0620 	add.w	r6, r5, #32
   b6b64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6b66:	6823      	ldr	r3, [r4, #0]
   b6b68:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b6b6a:	2300      	movs	r3, #0
}
   b6b6c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b6b6e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b6b70:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b6b72:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b6b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b76 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b6b76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b6b78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b6b7a:	4604      	mov	r4, r0
   b6b7c:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b6b7e:	b92a      	cbnz	r2, b6b8c <_ZN3UDP11parsePacketEm+0x16>
   b6b80:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b6b82:	b119      	cbz	r1, b6b8c <_ZN3UDP11parsePacketEm+0x16>
   b6b84:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b6b86:	f7ff ffc3 	bl	b6b10 <_ZN3UDP9setBufferEjPh>
   b6b8a:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b6b8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b6b8e:	2200      	movs	r2, #0
   b6b90:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b6b92:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b6b94:	b141      	cbz	r1, b6ba8 <_ZN3UDP11parsePacketEm+0x32>
   b6b96:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b6b98:	b132      	cbz	r2, b6ba8 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b6b9a:	6820      	ldr	r0, [r4, #0]
   b6b9c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b6b9e:	4620      	mov	r0, r4
   b6ba0:	47a8      	blx	r5
        if (result > 0) {
   b6ba2:	2800      	cmp	r0, #0
            _total = result;
   b6ba4:	bfc8      	it	gt
   b6ba6:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b6ba8:	6823      	ldr	r3, [r4, #0]
   b6baa:	691b      	ldr	r3, [r3, #16]
   b6bac:	4620      	mov	r0, r4
}
   b6bae:	b003      	add	sp, #12
   b6bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b6bb4:	4718      	bx	r3
	...

000b6bb8 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b6bb8:	b510      	push	{r4, lr}
   b6bba:	4b07      	ldr	r3, [pc, #28]	; (b6bd8 <_ZN3UDPD1Ev+0x20>)
   b6bbc:	f103 0208 	add.w	r2, r3, #8
   b6bc0:	336c      	adds	r3, #108	; 0x6c
   b6bc2:	4604      	mov	r4, r0
   b6bc4:	6002      	str	r2, [r0, #0]
   b6bc6:	6103      	str	r3, [r0, #16]
   b6bc8:	f7ff fddc 	bl	b6784 <_ZN3UDP4stopEv>
   b6bcc:	4620      	mov	r0, r4
   b6bce:	f7ff ff8d 	bl	b6aec <_ZN3UDP13releaseBufferEv>
   b6bd2:	4620      	mov	r0, r4
   b6bd4:	bd10      	pop	{r4, pc}
   b6bd6:	bf00      	nop
   b6bd8:	000bbdf4 	.word	0x000bbdf4

000b6bdc <_ZN3UDPD0Ev>:
   b6bdc:	b510      	push	{r4, lr}
   b6bde:	4604      	mov	r4, r0
   b6be0:	f7ff ffea 	bl	b6bb8 <_ZN3UDPD1Ev>
   b6be4:	4620      	mov	r0, r4
   b6be6:	214c      	movs	r1, #76	; 0x4c
   b6be8:	f7fd ff4b 	bl	b4a82 <_ZdlPvj>
   b6bec:	4620      	mov	r0, r4
   b6bee:	bd10      	pop	{r4, pc}

000b6bf0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6bf0:	b510      	push	{r4, lr}
   b6bf2:	4604      	mov	r4, r0
{
	free(buffer);
   b6bf4:	6800      	ldr	r0, [r0, #0]
   b6bf6:	f7ff fc07 	bl	b6408 <free>
}
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	bd10      	pop	{r4, pc}

000b6bfe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6bfe:	b510      	push	{r4, lr}
   b6c00:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6c02:	6800      	ldr	r0, [r0, #0]
   b6c04:	b108      	cbz	r0, b6c0a <_ZN6String10invalidateEv+0xc>
   b6c06:	f7ff fbff 	bl	b6408 <free>
	buffer = NULL;
   b6c0a:	2300      	movs	r3, #0
	capacity = len = 0;
   b6c0c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6c10:	6023      	str	r3, [r4, #0]
}
   b6c12:	bd10      	pop	{r4, pc}

000b6c14 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6c14:	b538      	push	{r3, r4, r5, lr}
   b6c16:	4604      	mov	r4, r0
   b6c18:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6c1a:	6800      	ldr	r0, [r0, #0]
   b6c1c:	3101      	adds	r1, #1
   b6c1e:	f7ff fbfb 	bl	b6418 <realloc>
	if (newbuffer) {
   b6c22:	b110      	cbz	r0, b6c2a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6c24:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6c28:	2001      	movs	r0, #1
	}
	return 0;
}
   b6c2a:	bd38      	pop	{r3, r4, r5, pc}

000b6c2c <_ZN6String7reserveEj>:
{
   b6c2c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6c2e:	6803      	ldr	r3, [r0, #0]
{
   b6c30:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6c32:	b123      	cbz	r3, b6c3e <_ZN6String7reserveEj+0x12>
   b6c34:	6843      	ldr	r3, [r0, #4]
   b6c36:	428b      	cmp	r3, r1
   b6c38:	d301      	bcc.n	b6c3e <_ZN6String7reserveEj+0x12>
   b6c3a:	2001      	movs	r0, #1
}
   b6c3c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6c3e:	4620      	mov	r0, r4
   b6c40:	f7ff ffe8 	bl	b6c14 <_ZN6String12changeBufferEj>
   b6c44:	2800      	cmp	r0, #0
   b6c46:	d0f9      	beq.n	b6c3c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6c48:	68a3      	ldr	r3, [r4, #8]
   b6c4a:	2b00      	cmp	r3, #0
   b6c4c:	d1f5      	bne.n	b6c3a <_ZN6String7reserveEj+0xe>
   b6c4e:	6822      	ldr	r2, [r4, #0]
   b6c50:	7013      	strb	r3, [r2, #0]
   b6c52:	e7f2      	b.n	b6c3a <_ZN6String7reserveEj+0xe>

000b6c54 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6c56:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6c58:	4611      	mov	r1, r2
   b6c5a:	9201      	str	r2, [sp, #4]
{
   b6c5c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6c5e:	f7ff ffe5 	bl	b6c2c <_ZN6String7reserveEj>
   b6c62:	9a01      	ldr	r2, [sp, #4]
   b6c64:	b928      	cbnz	r0, b6c72 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6c66:	4620      	mov	r0, r4
   b6c68:	f7ff ffc9 	bl	b6bfe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6c6c:	4620      	mov	r0, r4
   b6c6e:	b003      	add	sp, #12
   b6c70:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6c72:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6c74:	4629      	mov	r1, r5
   b6c76:	6820      	ldr	r0, [r4, #0]
   b6c78:	f002 fd1b 	bl	b96b2 <memcpy>
	buffer[len] = 0;
   b6c7c:	6822      	ldr	r2, [r4, #0]
   b6c7e:	68a3      	ldr	r3, [r4, #8]
   b6c80:	2100      	movs	r1, #0
   b6c82:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6c84:	e7f2      	b.n	b6c6c <_ZN6String4copyEPKcj+0x18>

000b6c86 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6c86:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6c88:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6c8a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6c8e:	4604      	mov	r4, r0
	len = 0;
   b6c90:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c92:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6c94:	b141      	cbz	r1, b6ca8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6c96:	4608      	mov	r0, r1
   b6c98:	9101      	str	r1, [sp, #4]
   b6c9a:	f7fd fe93 	bl	b49c4 <strlen>
   b6c9e:	9901      	ldr	r1, [sp, #4]
   b6ca0:	4602      	mov	r2, r0
   b6ca2:	4620      	mov	r0, r4
   b6ca4:	f7ff ffd6 	bl	b6c54 <_ZN6String4copyEPKcj>
}
   b6ca8:	4620      	mov	r0, r4
   b6caa:	b002      	add	sp, #8
   b6cac:	bd10      	pop	{r4, pc}

000b6cae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6cae:	b538      	push	{r3, r4, r5, lr}
   b6cb0:	4605      	mov	r5, r0
	if (buffer) {
   b6cb2:	6800      	ldr	r0, [r0, #0]
{
   b6cb4:	460c      	mov	r4, r1
	if (buffer) {
   b6cb6:	b168      	cbz	r0, b6cd4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6cb8:	686a      	ldr	r2, [r5, #4]
   b6cba:	688b      	ldr	r3, [r1, #8]
   b6cbc:	429a      	cmp	r2, r3
   b6cbe:	d307      	bcc.n	b6cd0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6cc0:	6809      	ldr	r1, [r1, #0]
   b6cc2:	f002 fd64 	bl	b978e <strcpy>
			len = rhs.len;
   b6cc6:	68a3      	ldr	r3, [r4, #8]
   b6cc8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6cca:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6ccc:	60a3      	str	r3, [r4, #8]
}
   b6cce:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6cd0:	f7ff fb9a 	bl	b6408 <free>
	buffer = rhs.buffer;
   b6cd4:	6823      	ldr	r3, [r4, #0]
   b6cd6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6cd8:	6863      	ldr	r3, [r4, #4]
   b6cda:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6cdc:	68a3      	ldr	r3, [r4, #8]
   b6cde:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6ce0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6ce2:	e9c4 3300 	strd	r3, r3, [r4]
   b6ce6:	e7f1      	b.n	b6ccc <_ZN6String4moveERS_+0x1e>

000b6ce8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b6ce8:	4288      	cmp	r0, r1
{
   b6cea:	b510      	push	{r4, lr}
   b6cec:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b6cee:	d001      	beq.n	b6cf4 <_ZN6StringaSEOS_+0xc>
   b6cf0:	f7ff ffdd 	bl	b6cae <_ZN6String4moveERS_>
	return *this;
}
   b6cf4:	4620      	mov	r0, r4
   b6cf6:	bd10      	pop	{r4, pc}

000b6cf8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6cf8:	b513      	push	{r0, r1, r4, lr}
   b6cfa:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6cfc:	b159      	cbz	r1, b6d16 <_ZN6StringaSEPKc+0x1e>
   b6cfe:	4608      	mov	r0, r1
   b6d00:	9101      	str	r1, [sp, #4]
   b6d02:	f7fd fe5f 	bl	b49c4 <strlen>
   b6d06:	9901      	ldr	r1, [sp, #4]
   b6d08:	4602      	mov	r2, r0
   b6d0a:	4620      	mov	r0, r4
   b6d0c:	f7ff ffa2 	bl	b6c54 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6d10:	4620      	mov	r0, r4
   b6d12:	b002      	add	sp, #8
   b6d14:	bd10      	pop	{r4, pc}
	else invalidate();
   b6d16:	f7ff ff72 	bl	b6bfe <_ZN6String10invalidateEv>
   b6d1a:	e7f9      	b.n	b6d10 <_ZN6StringaSEPKc+0x18>

000b6d1c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6d1c:	b510      	push	{r4, lr}
   b6d1e:	4604      	mov	r4, r0
   b6d20:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6d22:	2300      	movs	r3, #0
	capacity = 0;
   b6d24:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6d28:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6d2a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6d2c:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6d2e:	a901      	add	r1, sp, #4
   b6d30:	f7ff fc5c 	bl	b65ec <itoa>
	*this = buf;
   b6d34:	a901      	add	r1, sp, #4
   b6d36:	4620      	mov	r0, r4
   b6d38:	f7ff ffde 	bl	b6cf8 <_ZN6StringaSEPKc>
}
   b6d3c:	4620      	mov	r0, r4
   b6d3e:	b00a      	add	sp, #40	; 0x28
   b6d40:	bd10      	pop	{r4, pc}

000b6d42 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6d42:	b570      	push	{r4, r5, r6, lr}
   b6d44:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6d46:	460e      	mov	r6, r1
   b6d48:	b909      	cbnz	r1, b6d4e <_ZN6String6concatEPKcj+0xc>
   b6d4a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6d4c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6d4e:	b16a      	cbz	r2, b6d6c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6d50:	6884      	ldr	r4, [r0, #8]
   b6d52:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6d54:	4621      	mov	r1, r4
   b6d56:	f7ff ff69 	bl	b6c2c <_ZN6String7reserveEj>
   b6d5a:	2800      	cmp	r0, #0
   b6d5c:	d0f5      	beq.n	b6d4a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6d5e:	6828      	ldr	r0, [r5, #0]
   b6d60:	68ab      	ldr	r3, [r5, #8]
   b6d62:	4631      	mov	r1, r6
   b6d64:	4418      	add	r0, r3
   b6d66:	f002 fd12 	bl	b978e <strcpy>
	len = newlen;
   b6d6a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6d6c:	2001      	movs	r0, #1
   b6d6e:	e7ed      	b.n	b6d4c <_ZN6String6concatEPKcj+0xa>

000b6d70 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b6d70:	688a      	ldr	r2, [r1, #8]
   b6d72:	6809      	ldr	r1, [r1, #0]
   b6d74:	f7ff bfe5 	b.w	b6d42 <_ZN6String6concatEPKcj>

000b6d78 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b6d78:	b513      	push	{r0, r1, r4, lr}
   b6d7a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b6d7c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6d7e:	b151      	cbz	r1, b6d96 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6d80:	9101      	str	r1, [sp, #4]
   b6d82:	f7fd fe1f 	bl	b49c4 <strlen>
   b6d86:	9901      	ldr	r1, [sp, #4]
   b6d88:	4602      	mov	r2, r0
   b6d8a:	4620      	mov	r0, r4
}
   b6d8c:	b002      	add	sp, #8
   b6d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6d92:	f7ff bfd6 	b.w	b6d42 <_ZN6String6concatEPKcj>
}
   b6d96:	b002      	add	sp, #8
   b6d98:	bd10      	pop	{r4, pc}
	...

000b6d9c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6d9c:	b40e      	push	{r1, r2, r3}
   b6d9e:	b570      	push	{r4, r5, r6, lr}
   b6da0:	b087      	sub	sp, #28
   b6da2:	ad0b      	add	r5, sp, #44	; 0x2c
   b6da4:	4604      	mov	r4, r0
   b6da6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6daa:	9201      	str	r2, [sp, #4]
   b6dac:	462b      	mov	r3, r5
   b6dae:	2105      	movs	r1, #5
   b6db0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6db2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6db4:	f7ff fb40 	bl	b6438 <vsnprintf>
    va_end(marker);

    String result;
   b6db8:	490b      	ldr	r1, [pc, #44]	; (b6de8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6dba:	4606      	mov	r6, r0
    String result;
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	f7ff ff62 	bl	b6c86 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b6dc2:	4631      	mov	r1, r6
   b6dc4:	4620      	mov	r0, r4
   b6dc6:	f7ff ff31 	bl	b6c2c <_ZN6String7reserveEj>
    if (result.buffer) {
   b6dca:	6820      	ldr	r0, [r4, #0]
   b6dcc:	b130      	cbz	r0, b6ddc <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6dce:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b6dd0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6dd2:	462b      	mov	r3, r5
   b6dd4:	1c71      	adds	r1, r6, #1
   b6dd6:	f7ff fb2f 	bl	b6438 <vsnprintf>
        va_end(marker);
        result.len = n;
   b6dda:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6ddc:	4620      	mov	r0, r4
   b6dde:	b007      	add	sp, #28
   b6de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6de4:	b003      	add	sp, #12
   b6de6:	4770      	bx	lr
   b6de8:	000bbb89 	.word	0x000bbb89

000b6dec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6dec:	4770      	bx	lr

000b6dee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6dee:	4770      	bx	lr

000b6df0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6df0:	4770      	bx	lr

000b6df2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6df2:	4770      	bx	lr

000b6df4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6df4:	4b06      	ldr	r3, [pc, #24]	; (b6e10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6df6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6df8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6dfa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6dfe:	d005      	beq.n	b6e0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6e00:	4608      	mov	r0, r1
   b6e02:	f002 fb27 	bl	b9454 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6e06:	2800      	cmp	r0, #0
   b6e08:	bf08      	it	eq
   b6e0a:	2400      	moveq	r4, #0
      }
   b6e0c:	4620      	mov	r0, r4
   b6e0e:	bd10      	pop	{r4, pc}
   b6e10:	000bbfe0 	.word	0x000bbfe0

000b6e14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6e14:	4b06      	ldr	r3, [pc, #24]	; (b6e30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6e16:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6e18:	b510      	push	{r4, lr}
   b6e1a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6e1e:	d005      	beq.n	b6e2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6e20:	4608      	mov	r0, r1
   b6e22:	f002 fb17 	bl	b9454 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6e26:	2800      	cmp	r0, #0
   b6e28:	bf08      	it	eq
   b6e2a:	2400      	moveq	r4, #0
      }
   b6e2c:	4620      	mov	r0, r4
   b6e2e:	bd10      	pop	{r4, pc}
   b6e30:	000bbfe0 	.word	0x000bbfe0

000b6e34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6e34:	4b06      	ldr	r3, [pc, #24]	; (b6e50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6e36:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6e38:	b510      	push	{r4, lr}
   b6e3a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6e3e:	d005      	beq.n	b6e4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6e40:	4608      	mov	r0, r1
   b6e42:	f002 fb07 	bl	b9454 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6e46:	2800      	cmp	r0, #0
   b6e48:	bf08      	it	eq
   b6e4a:	2400      	moveq	r4, #0
      }
   b6e4c:	4620      	mov	r0, r4
   b6e4e:	bd10      	pop	{r4, pc}
   b6e50:	000bbfe0 	.word	0x000bbfe0

000b6e54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6e54:	b510      	push	{r4, lr}
   b6e56:	2168      	movs	r1, #104	; 0x68
   b6e58:	4604      	mov	r4, r0
   b6e5a:	f7fd fe12 	bl	b4a82 <_ZdlPvj>
   b6e5e:	4620      	mov	r0, r4
   b6e60:	bd10      	pop	{r4, pc}

000b6e62 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6e62:	b510      	push	{r4, lr}
   b6e64:	2128      	movs	r1, #40	; 0x28
   b6e66:	4604      	mov	r4, r0
   b6e68:	f7fd fe0b 	bl	b4a82 <_ZdlPvj>
   b6e6c:	4620      	mov	r0, r4
   b6e6e:	bd10      	pop	{r4, pc}

000b6e70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6e70:	b510      	push	{r4, lr}
   b6e72:	2130      	movs	r1, #48	; 0x30
   b6e74:	4604      	mov	r4, r0
   b6e76:	f7fd fe04 	bl	b4a82 <_ZdlPvj>
   b6e7a:	4620      	mov	r0, r4
   b6e7c:	bd10      	pop	{r4, pc}

000b6e7e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6e7e:	2168      	movs	r1, #104	; 0x68
   b6e80:	f7fd bdff 	b.w	b4a82 <_ZdlPvj>

000b6e84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6e84:	2128      	movs	r1, #40	; 0x28
   b6e86:	f7fd bdfc 	b.w	b4a82 <_ZdlPvj>

000b6e8a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6e8a:	2130      	movs	r1, #48	; 0x30
   b6e8c:	f7fd bdf9 	b.w	b4a82 <_ZdlPvj>

000b6e90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6e92:	2500      	movs	r5, #0
   b6e94:	1cec      	adds	r4, r5, #3
   b6e96:	428c      	cmp	r4, r1
   b6e98:	d80d      	bhi.n	b6eb6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6e9a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6e9c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6e9e:	5d87      	ldrb	r7, [r0, r6]
   b6ea0:	4297      	cmp	r7, r2
   b6ea2:	d105      	bne.n	b6eb0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6ea4:	4426      	add	r6, r4
   b6ea6:	42b1      	cmp	r1, r6
   b6ea8:	d305      	bcc.n	b6eb6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6eaa:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6eac:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6eb0:	3401      	adds	r4, #1
   b6eb2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6eb4:	e7ee      	b.n	b6e94 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6eb6:	2000      	movs	r0, #0
   b6eb8:	e7f9      	b.n	b6eae <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6ebc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6ebc:	4a02      	ldr	r2, [pc, #8]	; (b6ec8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6ebe:	4903      	ldr	r1, [pc, #12]	; (b6ecc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6ec0:	200a      	movs	r0, #10
   b6ec2:	f7ff b9ad 	b.w	b6220 <panic_>
   b6ec6:	bf00      	nop
   b6ec8:	000b5e0d 	.word	0x000b5e0d
   b6ecc:	000bbe64 	.word	0x000bbe64

000b6ed0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6ed0:	4603      	mov	r3, r0
   b6ed2:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6ed4:	681b      	ldr	r3, [r3, #0]
   b6ed6:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6eda:	4710      	bx	r2

000b6edc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6edc:	b430      	push	{r4, r5}
   b6ede:	460d      	mov	r5, r1
   b6ee0:	4611      	mov	r1, r2
   b6ee2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6ee4:	6803      	ldr	r3, [r0, #0]
   b6ee6:	6809      	ldr	r1, [r1, #0]
   b6ee8:	6828      	ldr	r0, [r5, #0]
   b6eea:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6eee:	46a4      	mov	ip, r4
      }
   b6ef0:	bc30      	pop	{r4, r5}
   b6ef2:	4760      	bx	ip

000b6ef4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6ef4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6ef6:	b538      	push	{r3, r4, r5, lr}
   b6ef8:	4604      	mov	r4, r0
	switch (__op)
   b6efa:	d102      	bne.n	b6f02 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6efc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6efe:	6023      	str	r3, [r4, #0]
	}
   b6f00:	e003      	b.n	b6f0a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6f02:	2a02      	cmp	r2, #2
   b6f04:	d003      	beq.n	b6f0e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6f06:	2a03      	cmp	r2, #3
   b6f08:	d00d      	beq.n	b6f26 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6f0a:	2000      	movs	r0, #0
   b6f0c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f0e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6f10:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f12:	f7fd fdb2 	bl	b4a7a <_Znwj>
   b6f16:	4603      	mov	r3, r0
   b6f18:	2800      	cmp	r0, #0
   b6f1a:	d0f0      	beq.n	b6efe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6f1c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6f20:	e883 0003 	stmia.w	r3, {r0, r1}
   b6f24:	e7eb      	b.n	b6efe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6f26:	6800      	ldr	r0, [r0, #0]
   b6f28:	2800      	cmp	r0, #0
   b6f2a:	d0ee      	beq.n	b6f0a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6f2c:	2108      	movs	r1, #8
   b6f2e:	f7fd fda8 	bl	b4a82 <_ZdlPvj>
   b6f32:	e7ea      	b.n	b6f0a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6f34 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6f34:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6f36:	b538      	push	{r3, r4, r5, lr}
   b6f38:	4604      	mov	r4, r0
	switch (__op)
   b6f3a:	d102      	bne.n	b6f42 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6f3c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6f3e:	6023      	str	r3, [r4, #0]
	}
   b6f40:	e003      	b.n	b6f4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6f42:	2a02      	cmp	r2, #2
   b6f44:	d003      	beq.n	b6f4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6f46:	2a03      	cmp	r2, #3
   b6f48:	d00d      	beq.n	b6f66 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6f4a:	2000      	movs	r0, #0
   b6f4c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f4e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6f50:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f52:	f7fd fd92 	bl	b4a7a <_Znwj>
   b6f56:	4603      	mov	r3, r0
   b6f58:	2800      	cmp	r0, #0
   b6f5a:	d0f0      	beq.n	b6f3e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6f5c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6f60:	e883 0003 	stmia.w	r3, {r0, r1}
   b6f64:	e7eb      	b.n	b6f3e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6f66:	6800      	ldr	r0, [r0, #0]
   b6f68:	2800      	cmp	r0, #0
   b6f6a:	d0ee      	beq.n	b6f4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6f6c:	2108      	movs	r1, #8
   b6f6e:	f7fd fd88 	bl	b4a82 <_ZdlPvj>
   b6f72:	e7ea      	b.n	b6f4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6f74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6f74:	b510      	push	{r4, lr}
   b6f76:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6f78:	3058      	adds	r0, #88	; 0x58
   b6f7a:	f7fd ff21 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6f7e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f86:	f7ff be33 	b.w	b6bf0 <_ZN6StringD1Ev>

000b6f8a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6f8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6f8e:	b2da      	uxtb	r2, r3
   b6f90:	2a09      	cmp	r2, #9
   b6f92:	d801      	bhi.n	b6f98 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6f94:	4618      	mov	r0, r3
   b6f96:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6f98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6f9c:	2b05      	cmp	r3, #5
   b6f9e:	d801      	bhi.n	b6fa4 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6fa0:	3857      	subs	r0, #87	; 0x57
   b6fa2:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6fa4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6fa8:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6faa:	bf94      	ite	ls
   b6fac:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6fae:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b6fb2:	4770      	bx	lr

000b6fb4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6fb4:	b510      	push	{r4, lr}
            locked_(false) {
   b6fb6:	2300      	movs	r3, #0
   b6fb8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6fba:	4b04      	ldr	r3, [pc, #16]	; (b6fcc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6fbc:	4604      	mov	r4, r0
   b6fbe:	6818      	ldr	r0, [r3, #0]
   b6fc0:	f7ff f806 	bl	b5fd0 <os_mutex_recursive_lock>
        locked_ = true;
   b6fc4:	2301      	movs	r3, #1
   b6fc6:	7023      	strb	r3, [r4, #0]
    }
   b6fc8:	4620      	mov	r0, r4
   b6fca:	bd10      	pop	{r4, pc}
   b6fcc:	2003e694 	.word	0x2003e694

000b6fd0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6fd0:	b510      	push	{r4, lr}
        if (locked_) {
   b6fd2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6fd4:	4604      	mov	r4, r0
        if (locked_) {
   b6fd6:	b11b      	cbz	r3, b6fe0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6fd8:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6fda:	6818      	ldr	r0, [r3, #0]
   b6fdc:	f7ff f800 	bl	b5fe0 <os_mutex_recursive_unlock>
    }
   b6fe0:	4620      	mov	r0, r4
   b6fe2:	bd10      	pop	{r4, pc}
   b6fe4:	2003e694 	.word	0x2003e694

000b6fe8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6fe8:	b082      	sub	sp, #8
   b6fea:	4603      	mov	r3, r0
    address_ = addr;
   b6fec:	6808      	ldr	r0, [r1, #0]
   b6fee:	6849      	ldr	r1, [r1, #4]
   b6ff0:	466a      	mov	r2, sp
   b6ff2:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6ff4:	466a      	mov	r2, sp
   b6ff6:	ca03      	ldmia	r2!, {r0, r1}
   b6ff8:	6018      	str	r0, [r3, #0]
}
   b6ffa:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6ffc:	6059      	str	r1, [r3, #4]
}
   b6ffe:	b002      	add	sp, #8
   b7000:	4770      	bx	lr

000b7002 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7002:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7004:	7982      	ldrb	r2, [r0, #6]
   b7006:	798b      	ldrb	r3, [r1, #6]
   b7008:	429a      	cmp	r2, r3
   b700a:	d106      	bne.n	b701a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b700c:	2206      	movs	r2, #6
   b700e:	f002 fb40 	bl	b9692 <memcmp>
   b7012:	fab0 f080 	clz	r0, r0
   b7016:	0940      	lsrs	r0, r0, #5
}
   b7018:	bd08      	pop	{r3, pc}
    return false;
   b701a:	2000      	movs	r0, #0
   b701c:	e7fc      	b.n	b7018 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b701e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b701e:	f04f 33ff 	mov.w	r3, #4294967295
   b7022:	6003      	str	r3, [r0, #0]
   b7024:	8083      	strh	r3, [r0, #4]
}
   b7026:	2000      	movs	r0, #0
   b7028:	4770      	bx	lr

000b702a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b702a:	b508      	push	{r3, lr}
   b702c:	4602      	mov	r2, r0
        : address_{} {
   b702e:	2100      	movs	r1, #0
   b7030:	6001      	str	r1, [r0, #0]
   b7032:	6041      	str	r1, [r0, #4]
    clear();
   b7034:	f7ff fff3 	bl	b701e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7038:	7191      	strb	r1, [r2, #6]
}
   b703a:	4610      	mov	r0, r2
   b703c:	bd08      	pop	{r3, pc}
	...

000b7040 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7040:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7042:	2301      	movs	r3, #1
   b7044:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7046:	4b05      	ldr	r3, [pc, #20]	; (b705c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7048:	4602      	mov	r2, r0
   b704a:	f103 0110 	add.w	r1, r3, #16
   b704e:	f853 4b04 	ldr.w	r4, [r3], #4
   b7052:	f842 4b04 	str.w	r4, [r2], #4
   b7056:	428b      	cmp	r3, r1
   b7058:	d1f9      	bne.n	b704e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b705a:	bd10      	pop	{r4, pc}
   b705c:	000bb7f2 	.word	0x000bb7f2

000b7060 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7060:	b510      	push	{r4, lr}
    if (uuid128) {
   b7062:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7064:	4604      	mov	r4, r0
    if (uuid128) {
   b7066:	b1b1      	cbz	r1, b7096 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7068:	2a01      	cmp	r2, #1
   b706a:	f101 0210 	add.w	r2, r1, #16
   b706e:	d10a      	bne.n	b7086 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7070:	4601      	mov	r1, r0
   b7072:	f853 0b04 	ldr.w	r0, [r3], #4
   b7076:	f841 0b04 	str.w	r0, [r1], #4
   b707a:	4293      	cmp	r3, r2
   b707c:	d1f9      	bne.n	b7072 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b707e:	2301      	movs	r3, #1
   b7080:	6123      	str	r3, [r4, #16]
}
   b7082:	4620      	mov	r0, r4
   b7084:	bd10      	pop	{r4, pc}
   b7086:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7088:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b708c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7090:	429a      	cmp	r2, r3
   b7092:	d1f9      	bne.n	b7088 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7094:	e7f3      	b.n	b707e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7096:	2210      	movs	r2, #16
   b7098:	f002 fb33 	bl	b9702 <memset>
   b709c:	e7f1      	b.n	b7082 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b709e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b709e:	b538      	push	{r3, r4, r5, lr}
   b70a0:	4604      	mov	r4, r0
   b70a2:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b70a4:	461a      	mov	r2, r3
   b70a6:	f7ff ffdb 	bl	b7060 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b70aa:	81a5      	strh	r5, [r4, #12]
}
   b70ac:	4620      	mov	r0, r4
   b70ae:	bd38      	pop	{r3, r4, r5, pc}

000b70b0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b70b0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b70b2:	6902      	ldr	r2, [r0, #16]
   b70b4:	b922      	cbnz	r2, b70c0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b70b6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b70b8:	3800      	subs	r0, #0
   b70ba:	bf18      	it	ne
   b70bc:	2001      	movne	r0, #1
}
   b70be:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b70c0:	4902      	ldr	r1, [pc, #8]	; (b70cc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b70c2:	2210      	movs	r2, #16
   b70c4:	f002 fae5 	bl	b9692 <memcmp>
   b70c8:	e7f6      	b.n	b70b8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b70ca:	bf00      	nop
   b70cc:	000bbff8 	.word	0x000bbff8

000b70d0 <_ZNK8particle7BleUuid4typeEv>:
}
   b70d0:	6900      	ldr	r0, [r0, #16]
   b70d2:	4770      	bx	lr

000b70d4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b70d4:	b538      	push	{r3, r4, r5, lr}
   b70d6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b70d8:	2214      	movs	r2, #20
   b70da:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b70dc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b70de:	f002 fb10 	bl	b9702 <memset>
    if (type_ == BleUuidType::SHORT) {
   b70e2:	6923      	ldr	r3, [r4, #16]
   b70e4:	b91b      	cbnz	r3, b70ee <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b70e6:	89a3      	ldrh	r3, [r4, #12]
   b70e8:	802b      	strh	r3, [r5, #0]
}
   b70ea:	4628      	mov	r0, r5
   b70ec:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b70ee:	2301      	movs	r3, #1
   b70f0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b70f2:	4621      	mov	r1, r4
   b70f4:	462b      	mov	r3, r5
   b70f6:	f104 0210 	add.w	r2, r4, #16
   b70fa:	f851 0b04 	ldr.w	r0, [r1], #4
   b70fe:	f843 0b04 	str.w	r0, [r3], #4
   b7102:	4291      	cmp	r1, r2
   b7104:	d1f9      	bne.n	b70fa <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7106:	e7f0      	b.n	b70ea <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7108 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7108:	8980      	ldrh	r0, [r0, #12]
   b710a:	4770      	bx	lr

000b710c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b710c:	4770      	bx	lr

000b710e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b710e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7110:	6902      	ldr	r2, [r0, #16]
   b7112:	690b      	ldr	r3, [r1, #16]
   b7114:	429a      	cmp	r2, r3
   b7116:	d106      	bne.n	b7126 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7118:	2210      	movs	r2, #16
   b711a:	f002 faba 	bl	b9692 <memcmp>
   b711e:	fab0 f080 	clz	r0, r0
   b7122:	0940      	lsrs	r0, r0, #5
}
   b7124:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7126:	2000      	movs	r0, #0
   b7128:	e7fc      	b.n	b7124 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b712c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b712c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b712e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7132:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7134:	4b34      	ldr	r3, [pc, #208]	; (b7208 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7136:	460c      	mov	r4, r1
   b7138:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b713a:	4602      	mov	r2, r0
   b713c:	f103 0110 	add.w	r1, r3, #16
   b7140:	f853 0b04 	ldr.w	r0, [r3], #4
   b7144:	f842 0b04 	str.w	r0, [r2], #4
   b7148:	428b      	cmp	r3, r1
   b714a:	d1f9      	bne.n	b7140 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b714c:	b344      	cbz	r4, b71a0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b714e:	2124      	movs	r1, #36	; 0x24
   b7150:	4620      	mov	r0, r4
   b7152:	f002 fb56 	bl	b9802 <strnlen>
   b7156:	2804      	cmp	r0, #4
   b7158:	f04f 0500 	mov.w	r5, #0
   b715c:	d123      	bne.n	b71a6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b715e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7162:	af01      	add	r7, sp, #4
   b7164:	1ca5      	adds	r5, r4, #2
   b7166:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7168:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b716c:	f7ff ff0d 	bl	b6f8a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7170:	f1b0 0800 	subs.w	r8, r0, #0
   b7174:	db12      	blt.n	b719c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7176:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b717a:	f7ff ff06 	bl	b6f8a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b717e:	2800      	cmp	r0, #0
   b7180:	db0c      	blt.n	b719c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7182:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7184:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7188:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b718a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b718e:	d1eb      	bne.n	b7168 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7190:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7194:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7196:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b719a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b719c:	2300      	movs	r3, #0
   b719e:	6133      	str	r3, [r6, #16]
}
   b71a0:	b002      	add	sp, #8
   b71a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b71a6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b71aa:	2124      	movs	r1, #36	; 0x24
   b71ac:	4620      	mov	r0, r4
   b71ae:	f002 fb28 	bl	b9802 <strnlen>
   b71b2:	42a8      	cmp	r0, r5
   b71b4:	d807      	bhi.n	b71c6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b71b6:	4642      	mov	r2, r8
   b71b8:	2100      	movs	r1, #0
   b71ba:	4630      	mov	r0, r6
}
   b71bc:	b002      	add	sp, #8
   b71be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b71c2:	f002 ba9e 	b.w	b9702 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b71c6:	f1b8 0f00 	cmp.w	r8, #0
   b71ca:	d0e9      	beq.n	b71a0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b71cc:	5d60      	ldrb	r0, [r4, r5]
   b71ce:	f7ff fedc 	bl	b6f8a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b71d2:	0603      	lsls	r3, r0, #24
   b71d4:	d415      	bmi.n	b7202 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b71d6:	0100      	lsls	r0, r0, #4
   b71d8:	f108 38ff 	add.w	r8, r8, #4294967295
   b71dc:	b2c7      	uxtb	r7, r0
   b71de:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b71e2:	2124      	movs	r1, #36	; 0x24
   b71e4:	4620      	mov	r0, r4
   b71e6:	f002 fb0c 	bl	b9802 <strnlen>
   b71ea:	3501      	adds	r5, #1
   b71ec:	42a8      	cmp	r0, r5
   b71ee:	d908      	bls.n	b7202 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b71f0:	5d60      	ldrb	r0, [r4, r5]
   b71f2:	f7ff feca 	bl	b6f8a <_ZN8particle11hexToNibbleEc>
   b71f6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b71f8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b71fa:	bfa4      	itt	ge
   b71fc:	4338      	orrge	r0, r7
   b71fe:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7202:	3501      	adds	r5, #1
   b7204:	e7d1      	b.n	b71aa <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7206:	bf00      	nop
   b7208:	000bb7f2 	.word	0x000bb7f2

000b720c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b720c:	b513      	push	{r0, r1, r4, lr}
   b720e:	4604      	mov	r4, r0
   b7210:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7212:	f7ff ff15 	bl	b7040 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7216:	4620      	mov	r0, r4
   b7218:	9901      	ldr	r1, [sp, #4]
   b721a:	f7ff ff87 	bl	b712c <_ZN8particle7BleUuid9constructEPKc>
}
   b721e:	4620      	mov	r0, r4
   b7220:	b002      	add	sp, #8
   b7222:	bd10      	pop	{r4, pc}

000b7224 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7224:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7226:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b722a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b722c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b722e:	8043      	strh	r3, [r0, #2]
   b7230:	220e      	movs	r2, #14
   b7232:	4629      	mov	r1, r5
   b7234:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7236:	7105      	strb	r5, [r0, #4]
   b7238:	3006      	adds	r0, #6
   b723a:	f002 fa62 	bl	b9702 <memset>
   b723e:	f104 0014 	add.w	r0, r4, #20
   b7242:	f7ff fefd 	bl	b7040 <_ZN8particle7BleUuidC1Ev>
   b7246:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b724a:	f7ff fef9 	bl	b7040 <_ZN8particle7BleUuidC1Ev>
   b724e:	4904      	ldr	r1, [pc, #16]	; (b7260 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7250:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7254:	f7ff fd17 	bl	b6c86 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7258:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b725a:	4620      	mov	r0, r4
   b725c:	bd38      	pop	{r3, r4, r5, pc}
   b725e:	bf00      	nop
   b7260:	000bbb89 	.word	0x000bbb89

000b7264 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7264:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7266:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b726a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b726e:	4293      	cmp	r3, r2
   b7270:	4618      	mov	r0, r3
   b7272:	d006      	beq.n	b7282 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7274:	6804      	ldr	r4, [r0, #0]
   b7276:	8824      	ldrh	r4, [r4, #0]
   b7278:	428c      	cmp	r4, r1
   b727a:	f103 0308 	add.w	r3, r3, #8
   b727e:	d1f6      	bne.n	b726e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7280:	bd10      	pop	{r4, pc}
        return nullptr;
   b7282:	2000      	movs	r0, #0
   b7284:	e7fc      	b.n	b7280 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7288 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7288:	b5f0      	push	{r4, r5, r6, r7, lr}
   b728a:	4606      	mov	r6, r0
   b728c:	b085      	sub	sp, #20
   b728e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7290:	460d      	mov	r5, r1
   b7292:	2900      	cmp	r1, #0
   b7294:	d050      	beq.n	b7338 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7296:	2a00      	cmp	r2, #0
   b7298:	d04e      	beq.n	b7338 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b729a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b729c:	7823      	ldrb	r3, [r4, #0]
   b729e:	2af4      	cmp	r2, #244	; 0xf4
   b72a0:	bf28      	it	cs
   b72a2:	22f4      	movcs	r2, #244	; 0xf4
   b72a4:	b343      	cbz	r3, b72f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b72a6:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b72a8:	0798      	lsls	r0, r3, #30
   b72aa:	d509      	bpl.n	b72c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b72ac:	89a0      	ldrh	r0, [r4, #12]
   b72ae:	9203      	str	r2, [sp, #12]
   b72b0:	2300      	movs	r3, #0
   b72b2:	f7fe fe0f 	bl	b5ed4 <hal_ble_gatt_server_set_characteristic_value>
   b72b6:	2800      	cmp	r0, #0
   b72b8:	9a03      	ldr	r2, [sp, #12]
   b72ba:	da03      	bge.n	b72c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b72bc:	b005      	add	sp, #20
   b72be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b72c0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b72c4:	6834      	ldr	r4, [r6, #0]
   b72c6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b72c8:	06d9      	lsls	r1, r3, #27
   b72ca:	d509      	bpl.n	b72e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b72cc:	2f01      	cmp	r7, #1
   b72ce:	d007      	beq.n	b72e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b72d0:	89a0      	ldrh	r0, [r4, #12]
   b72d2:	2300      	movs	r3, #0
   b72d4:	4629      	mov	r1, r5
}
   b72d6:	b005      	add	sp, #20
   b72d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b72dc:	f7fe be2c 	b.w	b5f38 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b72e0:	069b      	lsls	r3, r3, #26
   b72e2:	d5eb      	bpl.n	b72bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b72e4:	2f02      	cmp	r7, #2
   b72e6:	d0e9      	beq.n	b72bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b72e8:	89a0      	ldrh	r0, [r4, #12]
   b72ea:	2300      	movs	r3, #0
   b72ec:	4629      	mov	r1, r5
}
   b72ee:	b005      	add	sp, #20
   b72f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b72f4:	f7fe be2a 	b.w	b5f4c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b72f8:	8860      	ldrh	r0, [r4, #2]
   b72fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b72fe:	4288      	cmp	r0, r1
   b7300:	d01c      	beq.n	b733c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7302:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7304:	074e      	lsls	r6, r1, #29
   b7306:	d501      	bpl.n	b730c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7308:	2f01      	cmp	r7, #1
   b730a:	d104      	bne.n	b7316 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b730c:	070b      	lsls	r3, r1, #28
   b730e:	d409      	bmi.n	b7324 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7310:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7314:	e7d2      	b.n	b72bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7316:	89a1      	ldrh	r1, [r4, #12]
   b7318:	9300      	str	r3, [sp, #0]
   b731a:	4613      	mov	r3, r2
   b731c:	462a      	mov	r2, r5
   b731e:	f7fe fded 	bl	b5efc <hal_ble_gatt_client_write_without_response>
   b7322:	e7cb      	b.n	b72bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7324:	2f02      	cmp	r7, #2
   b7326:	d0f3      	beq.n	b7310 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7328:	2300      	movs	r3, #0
   b732a:	89a1      	ldrh	r1, [r4, #12]
   b732c:	9300      	str	r3, [sp, #0]
   b732e:	4613      	mov	r3, r2
   b7330:	462a      	mov	r2, r5
   b7332:	f7fe fdd9 	bl	b5ee8 <hal_ble_gatt_client_write_with_response>
   b7336:	e7c1      	b.n	b72bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7338:	4802      	ldr	r0, [pc, #8]	; (b7344 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b733a:	e7bf      	b.n	b72bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b733c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7340:	e7bc      	b.n	b72bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7342:	bf00      	nop
   b7344:	fffffef2 	.word	0xfffffef2

000b7348 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b7348:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b734a:	688a      	ldr	r2, [r1, #8]
   b734c:	6809      	ldr	r1, [r1, #0]
   b734e:	f7ff bf9b 	b.w	b7288 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b7352 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7352:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7354:	460c      	mov	r4, r1
   b7356:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7358:	21f4      	movs	r1, #244	; 0xf4
   b735a:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b735c:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b735e:	f002 fa50 	bl	b9802 <strnlen>
   b7362:	9b01      	ldr	r3, [sp, #4]
   b7364:	4602      	mov	r2, r0
   b7366:	4621      	mov	r1, r4
   b7368:	4628      	mov	r0, r5
}
   b736a:	b003      	add	sp, #12
   b736c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7370:	f7ff bf8a 	b.w	b7288 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b7374 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7378:	2600      	movs	r6, #0
   b737a:	6006      	str	r6, [r0, #0]
   b737c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b737e:	2028      	movs	r0, #40	; 0x28
   b7380:	460c      	mov	r4, r1
   b7382:	f7fd fb7a 	bl	b4a7a <_Znwj>
	  auto __pi = ::new (__mem)
   b7386:	1e05      	subs	r5, r0, #0
   b7388:	f105 080c 	add.w	r8, r5, #12
   b738c:	d00f      	beq.n	b73ae <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b738e:	2301      	movs	r3, #1
   b7390:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7394:	4b08      	ldr	r3, [pc, #32]	; (b73b8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7396:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7398:	4640      	mov	r0, r8
   b739a:	f7ff fe51 	bl	b7040 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b739e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b73a0:	622e      	str	r6, [r5, #32]
   b73a2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b73a6:	4646      	mov	r6, r8
   b73a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b73aa:	6823      	ldr	r3, [r4, #0]
   b73ac:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b73ae:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b73b2:	4638      	mov	r0, r7
   b73b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b73b8:	000bbfb0 	.word	0x000bbfb0

000b73bc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b73bc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b73be:	2500      	movs	r5, #0
   b73c0:	6005      	str	r5, [r0, #0]
   b73c2:	4606      	mov	r6, r0
   b73c4:	2030      	movs	r0, #48	; 0x30
   b73c6:	f7fd fb58 	bl	b4a7a <_Znwj>
	  auto __pi = ::new (__mem)
   b73ca:	4604      	mov	r4, r0
   b73cc:	b188      	cbz	r0, b73f2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b73ce:	2301      	movs	r3, #1
   b73d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b73d4:	4b09      	ldr	r3, [pc, #36]	; (b73fc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b73d6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b73d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b73dc:	8183      	strh	r3, [r0, #12]
   b73de:	300e      	adds	r0, #14
   b73e0:	f7ff fe23 	bl	b702a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b73e4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b73e8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b73ec:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b73f0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b73f2:	6074      	str	r4, [r6, #4]
   b73f4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b73f6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b73f8:	4630      	mov	r0, r6
   b73fa:	bd70      	pop	{r4, r5, r6, pc}
   b73fc:	000bbfcc 	.word	0x000bbfcc

000b7400 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7400:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7402:	460d      	mov	r5, r1
   b7404:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7406:	a801      	add	r0, sp, #4
   b7408:	f7ff fdd4 	bl	b6fb4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b740c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b740e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7412:	6023      	str	r3, [r4, #0]
   b7414:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7418:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b741a:	a801      	add	r0, sp, #4
   b741c:	f7ff fdd8 	bl	b6fd0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7420:	4620      	mov	r0, r4
   b7422:	b003      	add	sp, #12
   b7424:	bd30      	pop	{r4, r5, pc}

000b7426 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7426:	b530      	push	{r4, r5, lr}
   b7428:	4605      	mov	r5, r0
   b742a:	b087      	sub	sp, #28
   b742c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b742e:	a801      	add	r0, sp, #4
   b7430:	f7ff fdc0 	bl	b6fb4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7434:	682a      	ldr	r2, [r5, #0]
   b7436:	6823      	ldr	r3, [r4, #0]
   b7438:	8812      	ldrh	r2, [r2, #0]
   b743a:	881b      	ldrh	r3, [r3, #0]
   b743c:	429a      	cmp	r2, r3
   b743e:	d10d      	bne.n	b745c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7440:	4629      	mov	r1, r5
   b7442:	a802      	add	r0, sp, #8
   b7444:	f7ff ffdc 	bl	b7400 <_ZNK8particle13BlePeerDevice7addressEv>
   b7448:	4621      	mov	r1, r4
   b744a:	a804      	add	r0, sp, #16
   b744c:	f7ff ffd8 	bl	b7400 <_ZNK8particle13BlePeerDevice7addressEv>
   b7450:	a904      	add	r1, sp, #16
   b7452:	a802      	add	r0, sp, #8
   b7454:	f7ff fdd5 	bl	b7002 <_ZNK8particle10BleAddresseqERKS0_>
   b7458:	4604      	mov	r4, r0
   b745a:	b900      	cbnz	r0, b745e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b745c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b745e:	a801      	add	r0, sp, #4
   b7460:	f7ff fdb6 	bl	b6fd0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7464:	4620      	mov	r0, r4
   b7466:	b007      	add	sp, #28
   b7468:	bd30      	pop	{r4, r5, pc}
	...

000b746c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b746c:	b510      	push	{r4, lr}
   b746e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7470:	2064      	movs	r0, #100	; 0x64
   b7472:	f7fd fb02 	bl	b4a7a <_Znwj>
   b7476:	b168      	cbz	r0, b7494 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7478:	2300      	movs	r3, #0
   b747a:	e9c0 3300 	strd	r3, r3, [r0]
   b747e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7482:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7486:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b748a:	6203      	str	r3, [r0, #32]
   b748c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b748e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7490:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7492:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7494:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7496:	b920      	cbnz	r0, b74a2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7498:	4a0a      	ldr	r2, [pc, #40]	; (b74c4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b749a:	490b      	ldr	r1, [pc, #44]	; (b74c8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b749c:	200a      	movs	r0, #10
   b749e:	f7fe febf 	bl	b6220 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b74a2:	2000      	movs	r0, #0
   b74a4:	f7fe fcda 	bl	b5e5c <hal_ble_stack_init>
   b74a8:	b120      	cbz	r0, b74b4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b74aa:	4a06      	ldr	r2, [pc, #24]	; (b74c4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b74ac:	4907      	ldr	r1, [pc, #28]	; (b74cc <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b74ae:	200a      	movs	r0, #10
   b74b0:	f7fe feb6 	bl	b6220 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b74b4:	6821      	ldr	r1, [r4, #0]
   b74b6:	4806      	ldr	r0, [pc, #24]	; (b74d0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b74b8:	2200      	movs	r2, #0
   b74ba:	f7fe fd33 	bl	b5f24 <hal_ble_set_callback_on_periph_link_events>
}
   b74be:	4620      	mov	r0, r4
   b74c0:	bd10      	pop	{r4, pc}
   b74c2:	bf00      	nop
   b74c4:	000b5e0d 	.word	0x000b5e0d
   b74c8:	000bbe64 	.word	0x000bbe64
   b74cc:	000bbea2 	.word	0x000bbea2
   b74d0:	000b7aa1 	.word	0x000b7aa1

000b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b74d4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b74d6:	4c0a      	ldr	r4, [pc, #40]	; (b7500 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b74d8:	7823      	ldrb	r3, [r4, #0]
   b74da:	f3bf 8f5b 	dmb	ish
   b74de:	07db      	lsls	r3, r3, #31
   b74e0:	d40c      	bmi.n	b74fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b74e2:	4620      	mov	r0, r4
   b74e4:	f7fd facf 	bl	b4a86 <__cxa_guard_acquire>
   b74e8:	b140      	cbz	r0, b74fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b74ea:	4806      	ldr	r0, [pc, #24]	; (b7504 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b74ec:	f7ff ffbe 	bl	b746c <_ZN8particle14BleLocalDeviceC1Ev>
   b74f0:	4620      	mov	r0, r4
   b74f2:	f7fd facd 	bl	b4a90 <__cxa_guard_release>
   b74f6:	4804      	ldr	r0, [pc, #16]	; (b7508 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b74f8:	f002 f8be 	bl	b9678 <atexit>
    return instance;
}
   b74fc:	4801      	ldr	r0, [pc, #4]	; (b7504 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b74fe:	bd10      	pop	{r4, pc}
   b7500:	2003e68c 	.word	0x2003e68c
   b7504:	2003e698 	.word	0x2003e698
   b7508:	000b7749 	.word	0x000b7749

000b750c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b750c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b750e:	6803      	ldr	r3, [r0, #0]
   b7510:	3b09      	subs	r3, #9
   b7512:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7514:	b08d      	sub	sp, #52	; 0x34
   b7516:	4604      	mov	r4, r0
   b7518:	460d      	mov	r5, r1
    switch (event->type) {
   b751a:	d811      	bhi.n	b7540 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b751c:	f7ff ffda 	bl	b74d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7520:	88a1      	ldrh	r1, [r4, #4]
   b7522:	6800      	ldr	r0, [r0, #0]
   b7524:	f7ff fe9e 	bl	b7264 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7528:	4603      	mov	r3, r0
   b752a:	b958      	cbnz	r0, b7544 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b752c:	2220      	movs	r2, #32
   b752e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7532:	4a0b      	ldr	r2, [pc, #44]	; (b7560 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7534:	9200      	str	r2, [sp, #0]
   b7536:	490b      	ldr	r1, [pc, #44]	; (b7564 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7538:	aa04      	add	r2, sp, #16
   b753a:	2032      	movs	r0, #50	; 0x32
   b753c:	f7fe fe78 	bl	b6230 <log_message>
}
   b7540:	b00d      	add	sp, #52	; 0x34
   b7542:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7544:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7546:	2a00      	cmp	r2, #0
   b7548:	d0fa      	beq.n	b7540 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b754a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b754e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7552:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7556:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7558:	aa04      	add	r2, sp, #16
   b755a:	a903      	add	r1, sp, #12
   b755c:	47a0      	blx	r4
}
   b755e:	e7ef      	b.n	b7540 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7560:	000bbee4 	.word	0x000bbee4
   b7564:	000bbe7b 	.word	0x000bbe7b

000b7568 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7568:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b756a:	2000      	movs	r0, #0
   b756c:	f7fe fc76 	bl	b5e5c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7570:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7574:	bd08      	pop	{r3, pc}

000b7576 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b7576:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b7578:	2100      	movs	r1, #0
   b757a:	f7fe bc77 	b.w	b5e6c <hal_ble_select_antenna>

000b757e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b757e:	b919      	cbnz	r1, b7588 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7580:	460a      	mov	r2, r1
   b7582:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7584:	f7fe bc7a 	b.w	b5e7c <hal_ble_gap_set_advertising_data>
   b7588:	e9d1 0100 	ldrd	r0, r1, [r1]
   b758c:	2200      	movs	r2, #0
   b758e:	e7f9      	b.n	b7584 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b7590 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7590:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7592:	1e14      	subs	r4, r2, #0
   b7594:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7596:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7598:	db02      	blt.n	b75a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b759a:	1862      	adds	r2, r4, r1
   b759c:	429a      	cmp	r2, r3
   b759e:	dd00      	ble.n	b75a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b75a0:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b75a2:	682a      	ldr	r2, [r5, #0]
   b75a4:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b75a6:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b75a8:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b75aa:	1a52      	subs	r2, r2, r1
   b75ac:	f002 f88f 	bl	b96ce <memmove>
    size_ -= n;
   b75b0:	686a      	ldr	r2, [r5, #4]
   b75b2:	1b12      	subs	r2, r2, r4
   b75b4:	606a      	str	r2, [r5, #4]
}
   b75b6:	bd38      	pop	{r3, r4, r5, pc}

000b75b8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b75b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b75ba:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b75bc:	4604      	mov	r4, r0
   b75be:	460d      	mov	r5, r1
   b75c0:	ab01      	add	r3, sp, #4
   b75c2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b75c6:	f7ff fc63 	bl	b6e90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b75ca:	4602      	mov	r2, r0
   b75cc:	b138      	cbz	r0, b75de <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b75ce:	9901      	ldr	r1, [sp, #4]
   b75d0:	4620      	mov	r0, r4
   b75d2:	f7ff ffdd 	bl	b7590 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b75d6:	4629      	mov	r1, r5
   b75d8:	4620      	mov	r0, r4
   b75da:	f7ff ffed 	bl	b75b8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b75de:	b003      	add	sp, #12
   b75e0:	bd30      	pop	{r4, r5, pc}

000b75e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b75e2:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b75e4:	460c      	mov	r4, r1
   b75e6:	b929      	cbnz	r1, b75f4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b75e8:	460a      	mov	r2, r1
   b75ea:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b75ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b75f0:	f7fe bc4c 	b.w	b5e8c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b75f4:	2101      	movs	r1, #1
   b75f6:	4620      	mov	r0, r4
   b75f8:	f7ff ffde 	bl	b75b8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b75fc:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7600:	2200      	movs	r2, #0
   b7602:	e7f3      	b.n	b75ec <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7604 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7604:	b538      	push	{r3, r4, r5, lr}
   b7606:	4604      	mov	r4, r0
   b7608:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b760a:	f7ff ffb8 	bl	b757e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b760e:	2800      	cmp	r0, #0
   b7610:	db0a      	blt.n	b7628 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7612:	4629      	mov	r1, r5
   b7614:	4620      	mov	r0, r4
   b7616:	f7ff ffe4 	bl	b75e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b761a:	2800      	cmp	r0, #0
   b761c:	db04      	blt.n	b7628 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b761e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7622:	2000      	movs	r0, #0
   b7624:	f7fe bc3a 	b.w	b5e9c <hal_ble_gap_start_advertising>
}
   b7628:	bd38      	pop	{r3, r4, r5, pc}
	...

000b762c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b762c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b762e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7630:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7632:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7634:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7636:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7638:	f7fd fa1f 	bl	b4a7a <_Znwj>
   b763c:	b118      	cbz	r0, b7646 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b763e:	682b      	ldr	r3, [r5, #0]
   b7640:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7642:	686b      	ldr	r3, [r5, #4]
   b7644:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7646:	4b03      	ldr	r3, [pc, #12]	; (b7654 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7648:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b764a:	4b03      	ldr	r3, [pc, #12]	; (b7658 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b764c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b764e:	60a3      	str	r3, [r4, #8]
      }
   b7650:	4620      	mov	r0, r4
   b7652:	bd38      	pop	{r3, r4, r5, pc}
   b7654:	000b6edd 	.word	0x000b6edd
   b7658:	000b6f35 	.word	0x000b6f35

000b765c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b765c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b765e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7660:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7662:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7664:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7666:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7668:	f7fd fa07 	bl	b4a7a <_Znwj>
   b766c:	b118      	cbz	r0, b7676 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b766e:	682b      	ldr	r3, [r5, #0]
   b7670:	6003      	str	r3, [r0, #0]
   b7672:	686b      	ldr	r3, [r5, #4]
   b7674:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7676:	4b03      	ldr	r3, [pc, #12]	; (b7684 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b7678:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b767a:	4b03      	ldr	r3, [pc, #12]	; (b7688 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b767c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b767e:	60a3      	str	r3, [r4, #8]
      }
   b7680:	4620      	mov	r0, r4
   b7682:	bd38      	pop	{r3, r4, r5, pc}
   b7684:	000b6ed1 	.word	0x000b6ed1
   b7688:	000b6ef5 	.word	0x000b6ef5

000b768c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b768c:	680b      	ldr	r3, [r1, #0]
   b768e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7690:	b113      	cbz	r3, b7698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7692:	685a      	ldr	r2, [r3, #4]
   b7694:	3201      	adds	r2, #1
   b7696:	605a      	str	r2, [r3, #4]
      }
   b7698:	4770      	bx	lr

000b769a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b769a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b769c:	f851 3b04 	ldr.w	r3, [r1], #4
   b76a0:	4604      	mov	r4, r0
   b76a2:	f840 3b04 	str.w	r3, [r0], #4
   b76a6:	f7ff fff1 	bl	b768c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b76aa:	6823      	ldr	r3, [r4, #0]
   b76ac:	b90b      	cbnz	r3, b76b2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b76ae:	f7ff fc05 	bl	b6ebc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b76b2:	4620      	mov	r0, r4
   b76b4:	bd10      	pop	{r4, pc}

000b76b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b76b6:	b510      	push	{r4, lr}
   b76b8:	f851 3b04 	ldr.w	r3, [r1], #4
   b76bc:	4604      	mov	r4, r0
   b76be:	f840 3b04 	str.w	r3, [r0], #4
   b76c2:	f7ff ffe3 	bl	b768c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b76c6:	4620      	mov	r0, r4
   b76c8:	bd10      	pop	{r4, pc}

000b76ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b76ca:	b510      	push	{r4, lr}
   b76cc:	f851 3b04 	ldr.w	r3, [r1], #4
   b76d0:	4604      	mov	r4, r0
   b76d2:	f840 3b04 	str.w	r3, [r0], #4
   b76d6:	f7ff ffd9 	bl	b768c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b76da:	4620      	mov	r0, r4
   b76dc:	bd10      	pop	{r4, pc}

000b76de <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b76de:	b510      	push	{r4, lr}
   b76e0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b76e2:	3004      	adds	r0, #4
   b76e4:	f7fd ff2c 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b76e8:	4620      	mov	r0, r4
   b76ea:	bd10      	pop	{r4, pc}

000b76ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b76ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b76ee:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b76f2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b76f4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b76f8:	42ae      	cmp	r6, r5
   b76fa:	d004      	beq.n	b7706 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b76fc:	1d28      	adds	r0, r5, #4
   b76fe:	f7fd ff1f 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7702:	3508      	adds	r5, #8
   b7704:	e7f8      	b.n	b76f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7706:	6820      	ldr	r0, [r4, #0]
   b7708:	f7fe fe7e 	bl	b6408 <free>
}
   b770c:	4620      	mov	r0, r4
   b770e:	bd70      	pop	{r4, r5, r6, pc}

000b7710 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7710:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7712:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7716:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7718:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b771c:	42ae      	cmp	r6, r5
   b771e:	d004      	beq.n	b772a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7720:	1d28      	adds	r0, r5, #4
   b7722:	f7fd ff0d 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7726:	3508      	adds	r5, #8
   b7728:	e7f8      	b.n	b771c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b772a:	6820      	ldr	r0, [r4, #0]
   b772c:	f7fe fe6c 	bl	b6408 <free>
}
   b7730:	4620      	mov	r0, r4
   b7732:	bd70      	pop	{r4, r5, r6, pc}

000b7734 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7734:	b510      	push	{r4, lr}
   b7736:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7738:	3024      	adds	r0, #36	; 0x24
   b773a:	f7ff ffe9 	bl	b7710 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b773e:	f104 0018 	add.w	r0, r4, #24
   b7742:	f7ff ffd3 	bl	b76ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7746:	bd10      	pop	{r4, pc}

000b7748 <__tcf_0>:
    static BleLocalDevice instance;
   b7748:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b774a:	4b17      	ldr	r3, [pc, #92]	; (b77a8 <__tcf_0+0x60>)
   b774c:	681c      	ldr	r4, [r3, #0]
   b774e:	b354      	cbz	r4, b77a6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7750:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7754:	f7fd fb34 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
   b7758:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b775c:	f7fd fb30 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
   b7760:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7764:	f7fd fb2c 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
   b7768:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b776c:	f7fd fb28 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7770:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7774:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7778:	42ae      	cmp	r6, r5
   b777a:	d004      	beq.n	b7786 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b777c:	1d28      	adds	r0, r5, #4
   b777e:	f7fd fedf 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7782:	3508      	adds	r5, #8
   b7784:	e7f8      	b.n	b7778 <__tcf_0+0x30>
    ::free(ptr);
   b7786:	69a0      	ldr	r0, [r4, #24]
   b7788:	f7fe fe3e 	bl	b6408 <free>
    ~BleLocalDeviceImpl() = default;
   b778c:	f104 000c 	add.w	r0, r4, #12
   b7790:	f7ff ffbe 	bl	b7710 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7794:	4620      	mov	r0, r4
   b7796:	f7ff ffa9 	bl	b76ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b779a:	4620      	mov	r0, r4
   b779c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b779e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b77a2:	f7fd b96e 	b.w	b4a82 <_ZdlPvj>
   b77a6:	bd70      	pop	{r4, r5, r6, pc}
   b77a8:	2003e698 	.word	0x2003e698

000b77ac <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b77ac:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b77ae:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b77b0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b77b4:	e9c1 3300 	strd	r3, r3, [r1]
   b77b8:	6803      	ldr	r3, [r0, #0]
   b77ba:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b77bc:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b77be:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b77c0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b77c2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b77c4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b77c6:	f7fd febb 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b77ca:	b002      	add	sp, #8
   b77cc:	bd10      	pop	{r4, pc}

000b77ce <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b77ce:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b77d0:	b510      	push	{r4, lr}
      if (_M_empty())
   b77d2:	b90a      	cbnz	r2, b77d8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b77d4:	f001 fe3a 	bl	b944c <_ZSt25__throw_bad_function_callv>
    }
   b77d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b77dc:	68c3      	ldr	r3, [r0, #12]
   b77de:	4718      	bx	r3

000b77e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b77e0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b77e2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b77e4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b77e6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b77e8:	dd03      	ble.n	b77f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b77ea:	f7fe fe15 	bl	b6418 <realloc>
            if (!d) {
   b77ee:	b918      	cbnz	r0, b77f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b77f0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b77f2:	f7fe fe09 	bl	b6408 <free>
        T* d = nullptr;
   b77f6:	2000      	movs	r0, #0
        data_ = d;
   b77f8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b77fa:	60a5      	str	r5, [r4, #8]
        return true;
   b77fc:	2001      	movs	r0, #1
   b77fe:	e7f7      	b.n	b77f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7800 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7800:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7802:	6883      	ldr	r3, [r0, #8]
   b7804:	428b      	cmp	r3, r1
   b7806:	da02      	bge.n	b780e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7808:	f7ff ffea 	bl	b77e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b780c:	bd08      	pop	{r3, pc}
    return true;
   b780e:	2001      	movs	r0, #1
   b7810:	e7fc      	b.n	b780c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7812 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7816:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7818:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b781a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b781c:	4419      	add	r1, r3
   b781e:	6883      	ldr	r3, [r0, #8]
   b7820:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7822:	4604      	mov	r4, r0
   b7824:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7826:	dc12      	bgt.n	b784e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7828:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b782a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b782c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b782e:	1bd2      	subs	r2, r2, r7
   b7830:	4631      	mov	r1, r6
   b7832:	1970      	adds	r0, r6, r5
   b7834:	f001 ff4b 	bl	b96ce <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7838:	462a      	mov	r2, r5
   b783a:	4641      	mov	r1, r8
   b783c:	4630      	mov	r0, r6
   b783e:	f001 ff38 	bl	b96b2 <memcpy>
    size_ += n;
   b7842:	6863      	ldr	r3, [r4, #4]
   b7844:	442b      	add	r3, r5
   b7846:	6063      	str	r3, [r4, #4]
    return true;
   b7848:	2001      	movs	r0, #1
}
   b784a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b784e:	f7ff ffc7 	bl	b77e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7852:	2800      	cmp	r0, #0
   b7854:	d1e8      	bne.n	b7828 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7856:	e7f8      	b.n	b784a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b785a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b785c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7860:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7862:	4604      	mov	r4, r0
   b7864:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7866:	da0b      	bge.n	b7880 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7868:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b786a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b786c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b786e:	1b52      	subs	r2, r2, r5
   b7870:	1c48      	adds	r0, r1, #1
   b7872:	f001 ff2c 	bl	b96ce <memmove>
    new(p) T(std::move(value));
   b7876:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7878:	6863      	ldr	r3, [r4, #4]
   b787a:	3301      	adds	r3, #1
   b787c:	6063      	str	r3, [r4, #4]
}
   b787e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7880:	3101      	adds	r1, #1
   b7882:	f7ff ffad 	bl	b77e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7886:	2800      	cmp	r0, #0
   b7888:	d1ee      	bne.n	b7868 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b788a:	e7f8      	b.n	b787e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b788c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b788c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b788e:	6841      	ldr	r1, [r0, #4]
   b7890:	f7ff bfe2 	b.w	b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7894 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7898:	4604      	mov	r4, r0
   b789a:	461d      	mov	r5, r3
   b789c:	460f      	mov	r7, r1
   b789e:	ab01      	add	r3, sp, #4
   b78a0:	4690      	mov	r8, r2
   b78a2:	460a      	mov	r2, r1
   b78a4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b78a8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b78ac:	f7ff faf0 	bl	b6e90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b78b0:	1cae      	adds	r6, r5, #2
   b78b2:	6863      	ldr	r3, [r4, #4]
   b78b4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b78b6:	f1b9 0f00 	cmp.w	r9, #0
   b78ba:	d126      	bne.n	b790a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b78bc:	b328      	cbz	r0, b790a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b78be:	4433      	add	r3, r6
   b78c0:	1a1b      	subs	r3, r3, r0
   b78c2:	2bff      	cmp	r3, #255	; 0xff
   b78c4:	d809      	bhi.n	b78da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b78c6:	9901      	ldr	r1, [sp, #4]
   b78c8:	4620      	mov	r0, r4
   b78ca:	f7ff fe61 	bl	b7590 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b78ce:	6861      	ldr	r1, [r4, #4]
   b78d0:	4620      	mov	r0, r4
   b78d2:	4431      	add	r1, r6
   b78d4:	f7ff ff94 	bl	b7800 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b78d8:	b918      	cbnz	r0, b78e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b78da:	6860      	ldr	r0, [r4, #4]
}
   b78dc:	b003      	add	sp, #12
   b78de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b78e2:	1c6a      	adds	r2, r5, #1
   b78e4:	9901      	ldr	r1, [sp, #4]
   b78e6:	b2d2      	uxtb	r2, r2
   b78e8:	4620      	mov	r0, r4
   b78ea:	f7ff ffb5 	bl	b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b78ee:	9901      	ldr	r1, [sp, #4]
   b78f0:	463a      	mov	r2, r7
   b78f2:	3101      	adds	r1, #1
   b78f4:	4620      	mov	r0, r4
   b78f6:	f7ff ffaf 	bl	b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b78fa:	9901      	ldr	r1, [sp, #4]
   b78fc:	462b      	mov	r3, r5
   b78fe:	4642      	mov	r2, r8
   b7900:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7902:	4620      	mov	r0, r4
   b7904:	f7ff ff85 	bl	b7812 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7908:	e7e7      	b.n	b78da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b790a:	18f1      	adds	r1, r6, r3
   b790c:	29ff      	cmp	r1, #255	; 0xff
   b790e:	d8e4      	bhi.n	b78da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7910:	4620      	mov	r0, r4
   b7912:	f7ff ff75 	bl	b7800 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7916:	2800      	cmp	r0, #0
   b7918:	d0df      	beq.n	b78da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b791a:	1c69      	adds	r1, r5, #1
   b791c:	b2c9      	uxtb	r1, r1
   b791e:	4620      	mov	r0, r4
   b7920:	f7ff ffb4 	bl	b788c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7924:	4639      	mov	r1, r7
   b7926:	4620      	mov	r0, r4
   b7928:	f7ff ffb0 	bl	b788c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b792c:	6861      	ldr	r1, [r4, #4]
   b792e:	462b      	mov	r3, r5
   b7930:	4642      	mov	r2, r8
   b7932:	e7e6      	b.n	b7902 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7934 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7934:	b430      	push	{r4, r5}
   b7936:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b793a:	b11a      	cbz	r2, b7944 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b793c:	9502      	str	r5, [sp, #8]
}
   b793e:	bc30      	pop	{r4, r5}
   b7940:	f7ff bfa8 	b.w	b7894 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7944:	6840      	ldr	r0, [r0, #4]
}
   b7946:	bc30      	pop	{r4, r5}
   b7948:	4770      	bx	lr

000b794a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b794a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b794c:	2300      	movs	r3, #0
   b794e:	e9c0 3300 	strd	r3, r3, [r0]
   b7952:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7954:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7956:	9300      	str	r3, [sp, #0]
   b7958:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b795a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b795e:	4619      	mov	r1, r3
   b7960:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7964:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7966:	f7ff ffe5 	bl	b7934 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b796a:	4620      	mov	r0, r4
   b796c:	b004      	add	sp, #16
   b796e:	bd10      	pop	{r4, pc}

000b7970 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7972:	460a      	mov	r2, r1
   b7974:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b7976:	2114      	movs	r1, #20
   b7978:	4610      	mov	r0, r2
   b797a:	9203      	str	r2, [sp, #12]
   b797c:	f001 ff41 	bl	b9802 <strnlen>
   b7980:	2100      	movs	r1, #0
   b7982:	4603      	mov	r3, r0
   b7984:	9100      	str	r1, [sp, #0]
   b7986:	9a03      	ldr	r2, [sp, #12]
   b7988:	2109      	movs	r1, #9
   b798a:	4620      	mov	r0, r4
   b798c:	f7ff ffd2 	bl	b7934 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7990:	b004      	add	sp, #16
   b7992:	bd10      	pop	{r4, pc}

000b7994 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7994:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7998:	4604      	mov	r4, r0
   b799a:	460d      	mov	r5, r1
   b799c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b799e:	d914      	bls.n	b79ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b79a0:	4290      	cmp	r0, r2
   b79a2:	d213      	bcs.n	b79cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b79a4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b79a8:	1a75      	subs	r5, r6, r1
   b79aa:	f1a1 0708 	sub.w	r7, r1, #8
   b79ae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b79b0:	42b7      	cmp	r7, r6
   b79b2:	d018      	beq.n	b79e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b79b4:	b11c      	cbz	r4, b79be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b79b6:	4631      	mov	r1, r6
   b79b8:	4620      	mov	r0, r4
   b79ba:	f7ff fe86 	bl	b76ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b79be:	1d30      	adds	r0, r6, #4
   b79c0:	f7fd fdbe 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b79c4:	3e08      	subs	r6, #8
   b79c6:	3c08      	subs	r4, #8
   b79c8:	e7f2      	b.n	b79b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b79ca:	d00c      	beq.n	b79e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b79cc:	42b5      	cmp	r5, r6
   b79ce:	d00a      	beq.n	b79e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b79d0:	b11c      	cbz	r4, b79da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b79d2:	4629      	mov	r1, r5
   b79d4:	4620      	mov	r0, r4
   b79d6:	f7ff fe78 	bl	b76ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b79da:	1d28      	adds	r0, r5, #4
   b79dc:	f7fd fdb0 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b79e0:	3508      	adds	r5, #8
   b79e2:	3408      	adds	r4, #8
   b79e4:	e7f2      	b.n	b79cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b79e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b79e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b79ea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b79ec:	6846      	ldr	r6, [r0, #4]
   b79ee:	4668      	mov	r0, sp
   b79f0:	f7ff fe6b 	bl	b76ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b79f4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b79f8:	429f      	cmp	r7, r3
   b79fa:	db12      	blt.n	b7a22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b79fc:	3701      	adds	r7, #1
        if (n > 0) {
   b79fe:	2f00      	cmp	r7, #0
   b7a00:	dd29      	ble.n	b7a56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7a02:	00f8      	lsls	r0, r7, #3
   b7a04:	f7fe fcf8 	bl	b63f8 <malloc>
            if (!d) {
   b7a08:	4605      	mov	r5, r0
   b7a0a:	b1f0      	cbz	r0, b7a4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7a0c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7a10:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7a14:	f7ff ffbe 	bl	b7994 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7a18:	6820      	ldr	r0, [r4, #0]
   b7a1a:	f7fe fcf5 	bl	b6408 <free>
        data_ = d;
   b7a1e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7a20:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7a22:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7a24:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7a26:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7a2a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7a2e:	4631      	mov	r1, r6
   b7a30:	f106 0008 	add.w	r0, r6, #8
   b7a34:	f7ff ffae 	bl	b7994 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7a38:	b11e      	cbz	r6, b7a42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7a3a:	4669      	mov	r1, sp
   b7a3c:	4630      	mov	r0, r6
   b7a3e:	f7ff fe44 	bl	b76ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7a42:	6863      	ldr	r3, [r4, #4]
   b7a44:	3301      	adds	r3, #1
   b7a46:	6063      	str	r3, [r4, #4]
    return true;
   b7a48:	2501      	movs	r5, #1
   b7a4a:	a801      	add	r0, sp, #4
   b7a4c:	f7fd fd78 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a50:	4628      	mov	r0, r5
   b7a52:	b003      	add	sp, #12
   b7a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7a56:	2500      	movs	r5, #0
   b7a58:	e7de      	b.n	b7a18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7a5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7a5c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7a60:	4605      	mov	r5, r0
   b7a62:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7a64:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7a68:	42a6      	cmp	r6, r4
   b7a6a:	d005      	beq.n	b7a78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7a6c:	4639      	mov	r1, r7
   b7a6e:	4620      	mov	r0, r4
   b7a70:	f7ff fcd9 	bl	b7426 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7a74:	b108      	cbz	r0, b7a7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7a76:	b914      	cbnz	r4, b7a7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7a7a:	3408      	adds	r4, #8
   b7a7c:	e7f4      	b.n	b7a68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7a7e:	1d20      	adds	r0, r4, #4
   b7a80:	f7fd fd5e 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7a84:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7a88:	f104 0108 	add.w	r1, r4, #8
   b7a8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7a90:	4620      	mov	r0, r4
   b7a92:	f7ff ff7f 	bl	b7994 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7a96:	686b      	ldr	r3, [r5, #4]
   b7a98:	3b01      	subs	r3, #1
   b7a9a:	606b      	str	r3, [r5, #4]
    return true;
   b7a9c:	e7ec      	b.n	b7a78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7aa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7aa4:	4605      	mov	r5, r0
   b7aa6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7aa8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7aaa:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7aac:	f7ff fa82 	bl	b6fb4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7ab0:	682e      	ldr	r6, [r5, #0]
   b7ab2:	1ef3      	subs	r3, r6, #3
   b7ab4:	2b0d      	cmp	r3, #13
   b7ab6:	d83c      	bhi.n	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7ab8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7abc:	0057000e 	.word	0x0057000e
   b7ac0:	00d3003b 	.word	0x00d3003b
   b7ac4:	003b003b 	.word	0x003b003b
   b7ac8:	003b003b 	.word	0x003b003b
   b7acc:	009d003b 	.word	0x009d003b
   b7ad0:	009d009d 	.word	0x009d009d
   b7ad4:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b7ad8:	a804      	add	r0, sp, #16
   b7ada:	f7ff fc6f 	bl	b73bc <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b7ade:	9b04      	ldr	r3, [sp, #16]
   b7ae0:	89aa      	ldrh	r2, [r5, #12]
   b7ae2:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b7ae4:	6869      	ldr	r1, [r5, #4]
   b7ae6:	9804      	ldr	r0, [sp, #16]
   b7ae8:	3108      	adds	r1, #8
   b7aea:	3002      	adds	r0, #2
   b7aec:	f7ff fa7c 	bl	b6fe8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7af0:	a904      	add	r1, sp, #16
   b7af2:	a806      	add	r0, sp, #24
   b7af4:	f7ff fde9 	bl	b76ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b7af8:	a906      	add	r1, sp, #24
   b7afa:	f104 0018 	add.w	r0, r4, #24
   b7afe:	f7ff ff73 	bl	b79e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7b02:	4605      	mov	r5, r0
   b7b04:	a807      	add	r0, sp, #28
   b7b06:	f7fd fd1b 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b0a:	b9c5      	cbnz	r5, b7b3e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b7b0c:	2320      	movs	r3, #32
   b7b0e:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b7b12:	4b5e      	ldr	r3, [pc, #376]	; (b7c8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7b14:	495e      	ldr	r1, [pc, #376]	; (b7c90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7b16:	9300      	str	r3, [sp, #0]
   b7b18:	aa06      	add	r2, sp, #24
   b7b1a:	462b      	mov	r3, r5
   b7b1c:	2001      	movs	r0, #1
   b7b1e:	f7fe fb87 	bl	b6230 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7b22:	9b04      	ldr	r3, [sp, #16]
   b7b24:	4629      	mov	r1, r5
   b7b26:	8818      	ldrh	r0, [r3, #0]
   b7b28:	f7fe f9c0 	bl	b5eac <hal_ble_gap_disconnect>
   b7b2c:	a805      	add	r0, sp, #20
   b7b2e:	f7fd fd07 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7b32:	a803      	add	r0, sp, #12
   b7b34:	f7ff fa4c 	bl	b6fd0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7b38:	b00e      	add	sp, #56	; 0x38
   b7b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b7b3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7b40:	b123      	cbz	r3, b7b4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b7b42:	a904      	add	r1, sp, #16
   b7b44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7b48:	f7ff fe41 	bl	b77ce <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7b4c:	a805      	add	r0, sp, #20
   b7b4e:	f7fd fcf7 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b7b52:	2120      	movs	r1, #32
   b7b54:	2300      	movs	r3, #0
   b7b56:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b7b5a:	4a4e      	ldr	r2, [pc, #312]	; (b7c94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b7b5c:	9200      	str	r2, [sp, #0]
   b7b5e:	494c      	ldr	r1, [pc, #304]	; (b7c90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7b60:	aa06      	add	r2, sp, #24
   b7b62:	2001      	movs	r0, #1
   b7b64:	f7fe fb64 	bl	b6230 <log_message>
   b7b68:	e7e3      	b.n	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7b6a:	89a9      	ldrh	r1, [r5, #12]
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	f7ff fb79 	bl	b7264 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7b72:	4606      	mov	r6, r0
   b7b74:	2800      	cmp	r0, #0
   b7b76:	d0dc      	beq.n	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7b78:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7b7a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7b7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7b82:	8029      	strh	r1, [r5, #0]
   b7b84:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7b88:	429a      	cmp	r2, r3
   b7b8a:	d003      	beq.n	b7b94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b7b8c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7b90:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7b92:	e7f9      	b.n	b7b88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b7b94:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7b98:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7b9c:	45b8      	cmp	r8, r7
   b7b9e:	d004      	beq.n	b7baa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b7ba0:	1d38      	adds	r0, r7, #4
   b7ba2:	f7fd fccd 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ba6:	3708      	adds	r7, #8
   b7ba8:	e7f8      	b.n	b7b9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b7baa:	2300      	movs	r3, #0
   b7bac:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7bae:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7bb2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7bb6:	45b8      	cmp	r8, r7
   b7bb8:	d004      	beq.n	b7bc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b7bba:	1d38      	adds	r0, r7, #4
   b7bbc:	f7fd fcc0 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7bc0:	3708      	adds	r7, #8
   b7bc2:	e7f8      	b.n	b7bb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b7bc4:	2300      	movs	r3, #0
   b7bc6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7bc8:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b7bca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7bcc:	b123      	cbz	r3, b7bd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b7bce:	4631      	mov	r1, r6
   b7bd0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7bd4:	f7ff fdfb 	bl	b77ce <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b7bd8:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7bde:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b7be0:	4631      	mov	r1, r6
   b7be2:	f104 0018 	add.w	r0, r4, #24
   b7be6:	f7ff ff38 	bl	b7a5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b7bea:	2220      	movs	r2, #32
   b7bec:	2300      	movs	r3, #0
   b7bee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7bf2:	4a29      	ldr	r2, [pc, #164]	; (b7c98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7bf4:	e7b2      	b.n	b7b5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7bf6:	89a9      	ldrh	r1, [r5, #12]
   b7bf8:	4620      	mov	r0, r4
   b7bfa:	f7ff fb33 	bl	b7264 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7bfe:	2800      	cmp	r0, #0
   b7c00:	d097      	beq.n	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7c02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7c04:	2b00      	cmp	r3, #0
   b7c06:	d094      	beq.n	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7c08:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7c0a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7c10:	d001      	beq.n	b7c16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b7c12:	2e10      	cmp	r6, #16
   b7c14:	d117      	bne.n	b7c46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b7c16:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7c18:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7c1a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7c1c:	2506      	movs	r5, #6
                        };
   b7c1e:	f88d 3015 	strb.w	r3, [sp, #21]
   b7c22:	9104      	str	r1, [sp, #16]
   b7c24:	f88d 2014 	strb.w	r2, [sp, #20]
   b7c28:	9006      	str	r0, [sp, #24]
   b7c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7c2e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7c30:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7c34:	9508      	str	r5, [sp, #32]
   b7c36:	e883 0003 	stmia.w	r3, {r0, r1}
   b7c3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7c3c:	a906      	add	r1, sp, #24
   b7c3e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7c42:	4798      	blx	r3
   b7c44:	e775      	b.n	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7c46:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7c48:	bf01      	itttt	eq
   b7c4a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7c4c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7c4e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7c52:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7c54:	bf0f      	iteee	eq
   b7c56:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7c5a:	461a      	movne	r2, r3
   b7c5c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7c5e:	461d      	movne	r5, r3
   b7c60:	e7dd      	b.n	b7c1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7c62:	89a9      	ldrh	r1, [r5, #12]
   b7c64:	4620      	mov	r0, r4
   b7c66:	f7ff fafd 	bl	b7264 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7c6a:	4601      	mov	r1, r0
   b7c6c:	2800      	cmp	r0, #0
   b7c6e:	f43f af60 	beq.w	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7c72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7c74:	2b00      	cmp	r3, #0
   b7c76:	f43f af5c 	beq.w	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7c7a:	686b      	ldr	r3, [r5, #4]
   b7c7c:	9306      	str	r3, [sp, #24]
   b7c7e:	aa06      	add	r2, sp, #24
   b7c80:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7c82:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7c86:	4798      	blx	r3
   b7c88:	e753      	b.n	b7b32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7c8a:	bf00      	nop
   b7c8c:	000bbefc 	.word	0x000bbefc
   b7c90:	000bbe7b 	.word	0x000bbe7b
   b7c94:	000bbf22 	.word	0x000bbf22
   b7c98:	000bbf2c 	.word	0x000bbf2c

000b7c9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7c9c:	b513      	push	{r0, r1, r4, lr}
   b7c9e:	460b      	mov	r3, r1
   b7ca0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ca2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7ca6:	466c      	mov	r4, sp
   b7ca8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7cac:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7cb0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7cb4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7cb8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7cbc:	b002      	add	sp, #8
   b7cbe:	bd10      	pop	{r4, pc}

000b7cc0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7cc0:	b538      	push	{r3, r4, r5, lr}
   b7cc2:	4605      	mov	r5, r0
   b7cc4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7cc6:	f7ff ffe9 	bl	b7c9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cca:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7ccc:	68a2      	ldr	r2, [r4, #8]
   b7cce:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7cd0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cd2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7cd4:	68e2      	ldr	r2, [r4, #12]
   b7cd6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7cd8:	60e3      	str	r3, [r4, #12]
      }
   b7cda:	bd38      	pop	{r3, r4, r5, pc}

000b7cdc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7cdc:	b570      	push	{r4, r5, r6, lr}
   b7cde:	4604      	mov	r4, r0
   b7ce0:	b08c      	sub	sp, #48	; 0x30
   b7ce2:	460e      	mov	r6, r1
   b7ce4:	9201      	str	r2, [sp, #4]
   b7ce6:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7ce8:	f7ff fa9c 	bl	b7224 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7cec:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7cee:	9901      	ldr	r1, [sp, #4]
   b7cf0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7cf4:	f7ff f800 	bl	b6cf8 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7cf8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7cfc:	b1cd      	cbz	r5, b7d32 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7cfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7d00:	9502      	str	r5, [sp, #8]
   b7d02:	a902      	add	r1, sp, #8
   b7d04:	a804      	add	r0, sp, #16
   b7d06:	9303      	str	r3, [sp, #12]
   b7d08:	f7ff fc90 	bl	b762c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7d0c:	2300      	movs	r3, #0
	__x.swap(*this);
   b7d0e:	a908      	add	r1, sp, #32
   b7d10:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7d12:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7d14:	f7ff ffd4 	bl	b7cc0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7d18:	4631      	mov	r1, r6
   b7d1a:	a808      	add	r0, sp, #32
   b7d1c:	f7ff ffd0 	bl	b7cc0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7d20:	a808      	add	r0, sp, #32
   b7d22:	f7fd f84d 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
   b7d26:	a804      	add	r0, sp, #16
   b7d28:	f7fd f84a 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
    }
   b7d2c:	4620      	mov	r0, r4
   b7d2e:	b00c      	add	sp, #48	; 0x30
   b7d30:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7d32:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7d34:	e7ea      	b.n	b7d0c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7d38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d3c:	b087      	sub	sp, #28
   b7d3e:	461d      	mov	r5, r3
   b7d40:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7d44:	4680      	mov	r8, r0
   b7d46:	468b      	mov	fp, r1
   b7d48:	4692      	mov	sl, r2
   b7d4a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7d4c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7d4e:	2200      	movs	r2, #0
   b7d50:	2068      	movs	r0, #104	; 0x68
   b7d52:	9102      	str	r1, [sp, #8]
   b7d54:	9204      	str	r2, [sp, #16]
   b7d56:	f7fc fe90 	bl	b4a7a <_Znwj>
	  auto __pi = ::new (__mem)
   b7d5a:	1e06      	subs	r6, r0, #0
   b7d5c:	f106 090c 	add.w	r9, r6, #12
   b7d60:	d018      	beq.n	b7d94 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7d62:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7d64:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7d66:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7d6a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7d6c:	4a15      	ldr	r2, [pc, #84]	; (b7dc4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7d6e:	f847 2b20 	str.w	r2, [r7], #32
   b7d72:	9b03      	ldr	r3, [sp, #12]
   b7d74:	9100      	str	r1, [sp, #0]
   b7d76:	465a      	mov	r2, fp
   b7d78:	4651      	mov	r1, sl
   b7d7a:	4648      	mov	r0, r9
   b7d7c:	f7ff ffae 	bl	b7cdc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7d84:	682b      	ldr	r3, [r5, #0]
   b7d86:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7d8a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7d90:	6823      	ldr	r3, [r4, #0]
   b7d92:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7d94:	a904      	add	r1, sp, #16
   b7d96:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7d98:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7d9c:	f7ff fd06 	bl	b77ac <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7da0:	a805      	add	r0, sp, #20
   b7da2:	f7fd fbcd 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7da6:	f8d8 3000 	ldr.w	r3, [r8]
   b7daa:	b93b      	cbnz	r3, b7dbc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7dac:	4a06      	ldr	r2, [pc, #24]	; (b7dc8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7dae:	4907      	ldr	r1, [pc, #28]	; (b7dcc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7db0:	200a      	movs	r0, #10
}
   b7db2:	b007      	add	sp, #28
   b7db4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7db8:	f7fe ba32 	b.w	b6220 <panic_>
}
   b7dbc:	b007      	add	sp, #28
   b7dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7dc2:	bf00      	nop
   b7dc4:	000bbf94 	.word	0x000bbf94
   b7dc8:	000b5e0d 	.word	0x000b5e0d
   b7dcc:	000bbe64 	.word	0x000bbe64

000b7dd0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7dd0:	b538      	push	{r3, r4, r5, lr}
   b7dd2:	4605      	mov	r5, r0
   b7dd4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7dd6:	f7ff ff61 	bl	b7c9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dda:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7ddc:	68a2      	ldr	r2, [r4, #8]
   b7dde:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7de0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7de2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7de4:	68e2      	ldr	r2, [r4, #12]
   b7de6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7de8:	60e3      	str	r3, [r4, #12]
      }
   b7dea:	bd38      	pop	{r3, r4, r5, pc}

000b7dec <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7dec:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7dee:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7df0:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7df2:	3424      	adds	r4, #36	; 0x24
   b7df4:	b1b9      	cbz	r1, b7e26 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7df6:	e9cd 1200 	strd	r1, r2, [sp]
   b7dfa:	a802      	add	r0, sp, #8
   b7dfc:	4669      	mov	r1, sp
   b7dfe:	f7ff fc2d 	bl	b765c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7e02:	2300      	movs	r3, #0
	__x.swap(*this);
   b7e04:	a906      	add	r1, sp, #24
   b7e06:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7e08:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7e0a:	f7ff ffe1 	bl	b7dd0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7e0e:	4621      	mov	r1, r4
   b7e10:	a806      	add	r0, sp, #24
   b7e12:	f7ff ffdd 	bl	b7dd0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7e16:	a806      	add	r0, sp, #24
   b7e18:	f7fc ffd2 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
   b7e1c:	a802      	add	r0, sp, #8
   b7e1e:	f7fc ffcf 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
}
   b7e22:	b00a      	add	sp, #40	; 0x28
   b7e24:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7e26:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7e28:	e7eb      	b.n	b7e02 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7e2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7e2a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e2e:	4604      	mov	r4, r0
   b7e30:	460d      	mov	r5, r1
   b7e32:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7e34:	d914      	bls.n	b7e60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7e36:	4290      	cmp	r0, r2
   b7e38:	d213      	bcs.n	b7e62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7e3a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7e3e:	1a75      	subs	r5, r6, r1
   b7e40:	f1a1 0708 	sub.w	r7, r1, #8
   b7e44:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7e46:	42b7      	cmp	r7, r6
   b7e48:	d018      	beq.n	b7e7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7e4a:	b11c      	cbz	r4, b7e54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7e4c:	4631      	mov	r1, r6
   b7e4e:	4620      	mov	r0, r4
   b7e50:	f7ff fc31 	bl	b76b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7e54:	1d30      	adds	r0, r6, #4
   b7e56:	f7fd fb73 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7e5a:	3e08      	subs	r6, #8
   b7e5c:	3c08      	subs	r4, #8
   b7e5e:	e7f2      	b.n	b7e46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7e60:	d00c      	beq.n	b7e7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7e62:	42b5      	cmp	r5, r6
   b7e64:	d00a      	beq.n	b7e7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7e66:	b11c      	cbz	r4, b7e70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7e68:	4629      	mov	r1, r5
   b7e6a:	4620      	mov	r0, r4
   b7e6c:	f7ff fc23 	bl	b76b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7e70:	1d28      	adds	r0, r5, #4
   b7e72:	f7fd fb65 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7e76:	3508      	adds	r5, #8
   b7e78:	3408      	adds	r4, #8
   b7e7a:	e7f2      	b.n	b7e62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7e7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7e7e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7e80:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7e82:	4605      	mov	r5, r0
        if (n > 0) {
   b7e84:	dd11      	ble.n	b7eaa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7e86:	00f0      	lsls	r0, r6, #3
   b7e88:	f7fe fab6 	bl	b63f8 <malloc>
            if (!d) {
   b7e8c:	4604      	mov	r4, r0
   b7e8e:	b158      	cbz	r0, b7ea8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7e90:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7e94:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7e98:	f7ff ffc7 	bl	b7e2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7e9c:	6828      	ldr	r0, [r5, #0]
   b7e9e:	f7fe fab3 	bl	b6408 <free>
        data_ = d;
   b7ea2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7ea4:	60ae      	str	r6, [r5, #8]
        return true;
   b7ea6:	2001      	movs	r0, #1
    }
   b7ea8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7eaa:	2400      	movs	r4, #0
   b7eac:	e7f6      	b.n	b7e9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7eae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7eb0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7eb2:	6845      	ldr	r5, [r0, #4]
   b7eb4:	4668      	mov	r0, sp
   b7eb6:	f7ff fbfe 	bl	b76b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7eba:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7ebe:	4299      	cmp	r1, r3
   b7ec0:	da10      	bge.n	b7ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7ec2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7ec4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7ec6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7eca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7ece:	4629      	mov	r1, r5
   b7ed0:	f105 0008 	add.w	r0, r5, #8
   b7ed4:	f7ff ffa9 	bl	b7e2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7ed8:	b98d      	cbnz	r5, b7efe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7eda:	6863      	ldr	r3, [r4, #4]
   b7edc:	3301      	adds	r3, #1
   b7ede:	6063      	str	r3, [r4, #4]
    return true;
   b7ee0:	2601      	movs	r6, #1
   b7ee2:	e006      	b.n	b7ef2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ee4:	3101      	adds	r1, #1
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	f7ff ffc9 	bl	b7e7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7eec:	4606      	mov	r6, r0
   b7eee:	2800      	cmp	r0, #0
   b7ef0:	d1e7      	bne.n	b7ec2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7ef2:	a801      	add	r0, sp, #4
   b7ef4:	f7fd fb24 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7ef8:	4630      	mov	r0, r6
   b7efa:	b002      	add	sp, #8
   b7efc:	bd70      	pop	{r4, r5, r6, pc}
   b7efe:	4669      	mov	r1, sp
   b7f00:	4628      	mov	r0, r5
   b7f02:	f7ff fbd8 	bl	b76b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f06:	e7e8      	b.n	b7eda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7f08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7f08:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f0c:	4604      	mov	r4, r0
   b7f0e:	460d      	mov	r5, r1
   b7f10:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7f12:	d914      	bls.n	b7f3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7f14:	4290      	cmp	r0, r2
   b7f16:	d213      	bcs.n	b7f40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7f18:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7f1c:	1a75      	subs	r5, r6, r1
   b7f1e:	f1a1 0708 	sub.w	r7, r1, #8
   b7f22:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7f24:	42b7      	cmp	r7, r6
   b7f26:	d018      	beq.n	b7f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7f28:	b11c      	cbz	r4, b7f32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7f2a:	4631      	mov	r1, r6
   b7f2c:	4620      	mov	r0, r4
   b7f2e:	f7ff fbb4 	bl	b769a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7f32:	1d30      	adds	r0, r6, #4
   b7f34:	f7fd fb04 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7f38:	3e08      	subs	r6, #8
   b7f3a:	3c08      	subs	r4, #8
   b7f3c:	e7f2      	b.n	b7f24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7f3e:	d00c      	beq.n	b7f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f40:	42b5      	cmp	r5, r6
   b7f42:	d00a      	beq.n	b7f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7f44:	b11c      	cbz	r4, b7f4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7f46:	4629      	mov	r1, r5
   b7f48:	4620      	mov	r0, r4
   b7f4a:	f7ff fba6 	bl	b769a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7f4e:	1d28      	adds	r0, r5, #4
   b7f50:	f7fd faf6 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7f54:	3508      	adds	r5, #8
   b7f56:	3408      	adds	r4, #8
   b7f58:	e7f2      	b.n	b7f40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7f5c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7f5e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7f60:	4605      	mov	r5, r0
        if (n > 0) {
   b7f62:	dd11      	ble.n	b7f88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7f64:	00f0      	lsls	r0, r6, #3
   b7f66:	f7fe fa47 	bl	b63f8 <malloc>
            if (!d) {
   b7f6a:	4604      	mov	r4, r0
   b7f6c:	b158      	cbz	r0, b7f86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7f6e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7f72:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7f76:	f7ff ffc7 	bl	b7f08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7f7a:	6828      	ldr	r0, [r5, #0]
   b7f7c:	f7fe fa44 	bl	b6408 <free>
        data_ = d;
   b7f80:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7f82:	60ae      	str	r6, [r5, #8]
        return true;
   b7f84:	2001      	movs	r0, #1
    }
   b7f86:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7f88:	2400      	movs	r4, #0
   b7f8a:	e7f6      	b.n	b7f7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7f8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f8e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7f90:	6845      	ldr	r5, [r0, #4]
   b7f92:	4668      	mov	r0, sp
   b7f94:	f7ff fb81 	bl	b769a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f98:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7f9c:	4299      	cmp	r1, r3
   b7f9e:	da10      	bge.n	b7fc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7fa0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7fa2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7fa4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7fa8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7fac:	4629      	mov	r1, r5
   b7fae:	f105 0008 	add.w	r0, r5, #8
   b7fb2:	f7ff ffa9 	bl	b7f08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7fb6:	b98d      	cbnz	r5, b7fdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7fb8:	6863      	ldr	r3, [r4, #4]
   b7fba:	3301      	adds	r3, #1
   b7fbc:	6063      	str	r3, [r4, #4]
    return true;
   b7fbe:	2601      	movs	r6, #1
   b7fc0:	e006      	b.n	b7fd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7fc2:	3101      	adds	r1, #1
   b7fc4:	4620      	mov	r0, r4
   b7fc6:	f7ff ffc9 	bl	b7f5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7fca:	4606      	mov	r6, r0
   b7fcc:	2800      	cmp	r0, #0
   b7fce:	d1e7      	bne.n	b7fa0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7fd0:	a801      	add	r0, sp, #4
   b7fd2:	f7fd fab5 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7fd6:	4630      	mov	r0, r6
   b7fd8:	b002      	add	sp, #8
   b7fda:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7fdc:	4669      	mov	r1, sp
   b7fde:	4628      	mov	r0, r5
   b7fe0:	f7ff fb5b 	bl	b769a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7fe4:	e7e8      	b.n	b7fb8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b7fe8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fec:	4617      	mov	r7, r2
   b7fee:	b0a1      	sub	sp, #132	; 0x84
   b7ff0:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7ff2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7ff4:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7ff6:	f7fe ffdd 	bl	b6fb4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7ffa:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7ffc:	7923      	ldrb	r3, [r4, #4]
   b7ffe:	b953      	cbnz	r3, b8016 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8000:	4639      	mov	r1, r7
   b8002:	4640      	mov	r0, r8
   b8004:	f7ff fb49 	bl	b769a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8008:	a80a      	add	r0, sp, #40	; 0x28
   b800a:	f7fe ffe1 	bl	b6fd0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b800e:	4640      	mov	r0, r8
   b8010:	b021      	add	sp, #132	; 0x84
   b8012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8016:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8018:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b801c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8020:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8022:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8026:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b802a:	9b03      	ldr	r3, [sp, #12]
   b802c:	429d      	cmp	r5, r3
   b802e:	d021      	beq.n	b8074 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8030:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8034:	4658      	mov	r0, fp
   b8036:	f109 0114 	add.w	r1, r9, #20
   b803a:	f7ff f868 	bl	b710e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b803e:	b1b8      	cbz	r0, b8070 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8040:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8044:	4650      	mov	r0, sl
   b8046:	f7ff f862 	bl	b710e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b804a:	b188      	cbz	r0, b8070 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b804c:	6823      	ldr	r3, [r4, #0]
   b804e:	f8d9 2000 	ldr.w	r2, [r9]
   b8052:	4053      	eors	r3, r2
   b8054:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8058:	d10a      	bne.n	b8070 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b805a:	2220      	movs	r2, #32
   b805c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8060:	4a5e      	ldr	r2, [pc, #376]	; (b81dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8062:	9200      	str	r2, [sp, #0]
   b8064:	aa15      	add	r2, sp, #84	; 0x54
   b8066:	495e      	ldr	r1, [pc, #376]	; (b81e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8068:	2032      	movs	r0, #50	; 0x32
   b806a:	f7fe f8e1 	bl	b6230 <log_message>
   b806e:	e7c7      	b.n	b8000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8070:	3508      	adds	r5, #8
   b8072:	e7da      	b.n	b802a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8074:	4650      	mov	r0, sl
   b8076:	f7ff f81b 	bl	b70b0 <_ZNK8particle7BleUuid7isValidEv>
   b807a:	b960      	cbnz	r0, b8096 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b807c:	4959      	ldr	r1, [pc, #356]	; (b81e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b807e:	2201      	movs	r2, #1
   b8080:	a815      	add	r0, sp, #84	; 0x54
   b8082:	ad15      	add	r5, sp, #84	; 0x54
   b8084:	f7fe ffec 	bl	b7060 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b808a:	46d4      	mov	ip, sl
   b808c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8090:	682b      	ldr	r3, [r5, #0]
   b8092:	f8cc 3000 	str.w	r3, [ip]
   b8096:	6833      	ldr	r3, [r6, #0]
   b8098:	e9d3 5300 	ldrd	r5, r3, [r3]
   b809c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b80a0:	455d      	cmp	r5, fp
   b80a2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b80a4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b80a6:	d06e      	beq.n	b8186 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b80a8:	f855 0b08 	ldr.w	r0, [r5], #8
   b80ac:	f7ff f82f 	bl	b710e <_ZNK8particle7BleUuideqERKS0_>
   b80b0:	2800      	cmp	r0, #0
   b80b2:	d0f5      	beq.n	b80a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b80b4:	f104 0a14 	add.w	sl, r4, #20
   b80b8:	4650      	mov	r0, sl
   b80ba:	f7fe fff9 	bl	b70b0 <_ZNK8particle7BleUuid7isValidEv>
   b80be:	b988      	cbnz	r0, b80e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b80c0:	4b49      	ldr	r3, [pc, #292]	; (b81e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b80c2:	4948      	ldr	r1, [pc, #288]	; (b81e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b80c4:	881a      	ldrh	r2, [r3, #0]
   b80c6:	3201      	adds	r2, #1
   b80c8:	b292      	uxth	r2, r2
   b80ca:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b80cc:	a815      	add	r0, sp, #84	; 0x54
   b80ce:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b80d0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b80d2:	f7fe ffe4 	bl	b709e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b80d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b80d8:	46d4      	mov	ip, sl
   b80da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b80de:	682b      	ldr	r3, [r5, #0]
   b80e0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b80e4:	4b41      	ldr	r3, [pc, #260]	; (b81ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b80e6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b80e8:	2228      	movs	r2, #40	; 0x28
   b80ea:	2100      	movs	r1, #0
   b80ec:	a816      	add	r0, sp, #88	; 0x58
   b80ee:	f001 fb08 	bl	b9702 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b80f2:	4651      	mov	r1, sl
   b80f4:	a804      	add	r0, sp, #16
   b80f6:	f7fe ffed 	bl	b70d4 <_ZN8particle7BleUuid7halUUIDEv>
   b80fa:	ab04      	add	r3, sp, #16
   b80fc:	aa18      	add	r2, sp, #96	; 0x60
   b80fe:	f10d 0c20 	add.w	ip, sp, #32
   b8102:	6818      	ldr	r0, [r3, #0]
   b8104:	6859      	ldr	r1, [r3, #4]
   b8106:	4615      	mov	r5, r2
   b8108:	c503      	stmia	r5!, {r0, r1}
   b810a:	3308      	adds	r3, #8
   b810c:	4563      	cmp	r3, ip
   b810e:	462a      	mov	r2, r5
   b8110:	d1f7      	bne.n	b8102 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8112:	6818      	ldr	r0, [r3, #0]
   b8114:	6028      	str	r0, [r5, #0]
    return value_;
   b8116:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8118:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b811c:	f8d9 3000 	ldr.w	r3, [r9]
   b8120:	8a9b      	ldrh	r3, [r3, #20]
   b8122:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8128:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b812a:	4b31      	ldr	r3, [pc, #196]	; (b81f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b812c:	2200      	movs	r2, #0
   b812e:	1da1      	adds	r1, r4, #6
   b8130:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8132:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8136:	f7fd feeb 	bl	b5f10 <hal_ble_gatt_server_add_characteristic>
   b813a:	2800      	cmp	r0, #0
   b813c:	f47f af60 	bne.w	b8000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8140:	2301      	movs	r3, #1
   b8142:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8144:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8146:	4639      	mov	r1, r7
        return characteristics_;
   b8148:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b814a:	a80d      	add	r0, sp, #52	; 0x34
   b814c:	f7ff faa5 	bl	b769a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8150:	4620      	mov	r0, r4
   b8152:	a90d      	add	r1, sp, #52	; 0x34
   b8154:	f7ff ff1a 	bl	b7f8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8158:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b815a:	a80e      	add	r0, sp, #56	; 0x38
   b815c:	f7fd f9f0 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8160:	2c00      	cmp	r4, #0
   b8162:	f47f af4d 	bne.w	b8000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8166:	2320      	movs	r3, #32
   b8168:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b816c:	4b21      	ldr	r3, [pc, #132]	; (b81f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b816e:	9300      	str	r3, [sp, #0]
   b8170:	aa0d      	add	r2, sp, #52	; 0x34
   b8172:	4623      	mov	r3, r4
   b8174:	e777      	b.n	b8066 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8176:	4639      	mov	r1, r7
   b8178:	4640      	mov	r0, r8
   b817a:	f7ff fa8e 	bl	b769a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b817e:	a80c      	add	r0, sp, #48	; 0x30
   b8180:	f7fd f9de 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8184:	e740      	b.n	b8008 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8186:	a80b      	add	r0, sp, #44	; 0x2c
   b8188:	f7ff f8f4 	bl	b7374 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b818c:	4651      	mov	r1, sl
   b818e:	a815      	add	r0, sp, #84	; 0x54
   b8190:	f7fe ffa0 	bl	b70d4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8196:	2300      	movs	r3, #0
   b8198:	3214      	adds	r2, #20
   b819a:	a915      	add	r1, sp, #84	; 0x54
   b819c:	2001      	movs	r0, #1
   b819e:	f7fd fe8f 	bl	b5ec0 <hal_ble_gatt_server_add_service>
   b81a2:	2800      	cmp	r0, #0
   b81a4:	d1e7      	bne.n	b8176 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b81a6:	6835      	ldr	r5, [r6, #0]
   b81a8:	a90b      	add	r1, sp, #44	; 0x2c
   b81aa:	a80d      	add	r0, sp, #52	; 0x34
   b81ac:	f7ff fa83 	bl	b76b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b81b0:	4628      	mov	r0, r5
   b81b2:	a90d      	add	r1, sp, #52	; 0x34
   b81b4:	f7ff fe7b 	bl	b7eae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b81b8:	4605      	mov	r5, r0
   b81ba:	a80e      	add	r0, sp, #56	; 0x38
   b81bc:	f7fd f9c0 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81c0:	2d00      	cmp	r5, #0
   b81c2:	d0d8      	beq.n	b8176 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b81c4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b81c6:	6853      	ldr	r3, [r2, #4]
   b81c8:	6812      	ldr	r2, [r2, #0]
   b81ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b81ce:	3b01      	subs	r3, #1
   b81d0:	a80c      	add	r0, sp, #48	; 0x30
   b81d2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b81d6:	f7fd f9b3 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81da:	e76b      	b.n	b80b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b81dc:	000bbf39 	.word	0x000bbf39
   b81e0:	000bbe7b 	.word	0x000bbe7b
   b81e4:	000bbfe8 	.word	0x000bbfe8
   b81e8:	2003e690 	.word	0x2003e690
   b81ec:	002c0003 	.word	0x002c0003
   b81f0:	000b750d 	.word	0x000b750d
   b81f4:	000bbf64 	.word	0x000bbf64

000b81f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b81f8:	4802      	ldr	r0, [pc, #8]	; (b8204 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b81fa:	2300      	movs	r3, #0
   b81fc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b81fe:	f7fd bedf 	b.w	b5fc0 <os_mutex_recursive_create>
   b8202:	bf00      	nop
   b8204:	2003e694 	.word	0x2003e694

000b8208 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b820a:	4606      	mov	r6, r0
   b820c:	460d      	mov	r5, r1
  size_t n = 0;
   b820e:	188f      	adds	r7, r1, r2
   b8210:	2400      	movs	r4, #0
  while (size--) {
   b8212:	42bd      	cmp	r5, r7
   b8214:	d00c      	beq.n	b8230 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8216:	6833      	ldr	r3, [r6, #0]
   b8218:	f815 1b01 	ldrb.w	r1, [r5], #1
   b821c:	689b      	ldr	r3, [r3, #8]
   b821e:	4630      	mov	r0, r6
   b8220:	4798      	blx	r3
     if (chunk>=0)
   b8222:	1e03      	subs	r3, r0, #0
   b8224:	db01      	blt.n	b822a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8226:	441c      	add	r4, r3
  while (size--) {
   b8228:	e7f3      	b.n	b8212 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b822a:	2c00      	cmp	r4, #0
   b822c:	bf08      	it	eq
   b822e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8230:	4620      	mov	r0, r4
   b8232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8234 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8234:	b513      	push	{r0, r1, r4, lr}
   b8236:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8238:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b823a:	b159      	cbz	r1, b8254 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b823c:	9101      	str	r1, [sp, #4]
   b823e:	f7fc fbc1 	bl	b49c4 <strlen>
   b8242:	6823      	ldr	r3, [r4, #0]
   b8244:	9901      	ldr	r1, [sp, #4]
   b8246:	68db      	ldr	r3, [r3, #12]
   b8248:	4602      	mov	r2, r0
   b824a:	4620      	mov	r0, r4
    }
   b824c:	b002      	add	sp, #8
   b824e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8252:	4718      	bx	r3
    }
   b8254:	b002      	add	sp, #8
   b8256:	bd10      	pop	{r4, pc}

000b8258 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8258:	6803      	ldr	r3, [r0, #0]
   b825a:	689b      	ldr	r3, [r3, #8]
   b825c:	4718      	bx	r3

000b825e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b825e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8260:	210d      	movs	r1, #13
{
   b8262:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8264:	f7ff fff8 	bl	b8258 <_ZN5Print5printEc>
  n += print('\n');
   b8268:	210a      	movs	r1, #10
  size_t n = print('\r');
   b826a:	4604      	mov	r4, r0
  n += print('\n');
   b826c:	4628      	mov	r0, r5
   b826e:	f7ff fff3 	bl	b8258 <_ZN5Print5printEc>
  return n;
}
   b8272:	4420      	add	r0, r4
   b8274:	bd38      	pop	{r3, r4, r5, pc}

000b8276 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8276:	b538      	push	{r3, r4, r5, lr}
   b8278:	4605      	mov	r5, r0
  return write(str);
   b827a:	f7ff ffdb 	bl	b8234 <_ZN5Print5writeEPKc>
   b827e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8280:	4628      	mov	r0, r5
   b8282:	f7ff ffec 	bl	b825e <_ZN5Print7printlnEv>
  return n;
}
   b8286:	4420      	add	r0, r4
   b8288:	bd38      	pop	{r3, r4, r5, pc}

000b828a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b828a:	b530      	push	{r4, r5, lr}
   b828c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b828e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8290:	2a01      	cmp	r2, #1
  *str = '\0';
   b8292:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8296:	bf98      	it	ls
   b8298:	220a      	movls	r2, #10
   b829a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b829c:	460d      	mov	r5, r1
   b829e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b82a2:	fb01 5312 	mls	r3, r1, r2, r5
   b82a6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b82aa:	2b09      	cmp	r3, #9
   b82ac:	bf94      	ite	ls
   b82ae:	3330      	addls	r3, #48	; 0x30
   b82b0:	3337      	addhi	r3, #55	; 0x37
   b82b2:	b2db      	uxtb	r3, r3
  } while(n);
   b82b4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b82b6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b82ba:	d9ef      	bls.n	b829c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b82bc:	4621      	mov	r1, r4
   b82be:	f7ff ffb9 	bl	b8234 <_ZN5Print5writeEPKc>
}
   b82c2:	b00b      	add	sp, #44	; 0x2c
   b82c4:	bd30      	pop	{r4, r5, pc}

000b82c6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b82c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b82ca:	b086      	sub	sp, #24
   b82cc:	af00      	add	r7, sp, #0
   b82ce:	4605      	mov	r5, r0
   b82d0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b82d2:	1d38      	adds	r0, r7, #4
   b82d4:	2114      	movs	r1, #20
{
   b82d6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b82d8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b82da:	f7fe f8ad 	bl	b6438 <vsnprintf>

    if (n<bufsize)
   b82de:	2813      	cmp	r0, #19
   b82e0:	d80e      	bhi.n	b8300 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b82e2:	1d39      	adds	r1, r7, #4
   b82e4:	4628      	mov	r0, r5
   b82e6:	f7ff ffa5 	bl	b8234 <_ZN5Print5writeEPKc>
   b82ea:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b82ec:	b11e      	cbz	r6, b82f6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b82ee:	4628      	mov	r0, r5
   b82f0:	f7ff ffb5 	bl	b825e <_ZN5Print7printlnEv>
   b82f4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b82f6:	4620      	mov	r0, r4
   b82f8:	3718      	adds	r7, #24
   b82fa:	46bd      	mov	sp, r7
   b82fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8300:	f100 0308 	add.w	r3, r0, #8
   b8304:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8308:	46e8      	mov	r8, sp
        char bigger[n+1];
   b830a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b830e:	4622      	mov	r2, r4
   b8310:	1c41      	adds	r1, r0, #1
   b8312:	683b      	ldr	r3, [r7, #0]
   b8314:	4668      	mov	r0, sp
   b8316:	f7fe f88f 	bl	b6438 <vsnprintf>
  return write(str);
   b831a:	4669      	mov	r1, sp
   b831c:	4628      	mov	r0, r5
   b831e:	f7ff ff89 	bl	b8234 <_ZN5Print5writeEPKc>
   b8322:	4604      	mov	r4, r0
   b8324:	46c5      	mov	sp, r8
   b8326:	e7e1      	b.n	b82ec <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8328 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8328:	4b01      	ldr	r3, [pc, #4]	; (b8330 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b832a:	4a02      	ldr	r2, [pc, #8]	; (b8334 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b832c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b832e:	4770      	bx	lr
   b8330:	2003e69c 	.word	0x2003e69c
   b8334:	000bc008 	.word	0x000bc008

000b8338 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b833c:	4a15      	ldr	r2, [pc, #84]	; (b8394 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b833e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b83a0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b8342:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8346:	1980      	adds	r0, r0, r6
   b8348:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b834c:	4b12      	ldr	r3, [pc, #72]	; (b8398 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b834e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b8352:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8356:	1986      	adds	r6, r0, r6
   b8358:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b835c:	42bb      	cmp	r3, r7
   b835e:	bf08      	it	eq
   b8360:	42b2      	cmpeq	r2, r6
{
   b8362:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8364:	d013      	beq.n	b838e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8366:	a903      	add	r1, sp, #12
   b8368:	4668      	mov	r0, sp
   b836a:	e9cd 6700 	strd	r6, r7, [sp]
   b836e:	f7fe f893 	bl	b6498 <localtime_r>
	calendar_time.tm_year += 1900;
   b8372:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8374:	4d09      	ldr	r5, [pc, #36]	; (b839c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8376:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b837a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b837c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b837e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8386:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b838a:	6823      	ldr	r3, [r4, #0]
   b838c:	602b      	str	r3, [r5, #0]
    }
}
   b838e:	b00c      	add	sp, #48	; 0x30
   b8390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8394:	2003e6d0 	.word	0x2003e6d0
   b8398:	2003e6c8 	.word	0x2003e6c8
   b839c:	2003e6a4 	.word	0x2003e6a4
   b83a0:	2003e6d8 	.word	0x2003e6d8

000b83a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b83a4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b83a6:	2000      	movs	r0, #0
   b83a8:	f7fe f816 	bl	b63d8 <spark_sync_time_pending>
   b83ac:	b128      	cbz	r0, b83ba <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b83ae:	f7fd fffb 	bl	b63a8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b83b2:	f080 0001 	eor.w	r0, r0, #1
   b83b6:	b2c0      	uxtb	r0, r0
    }
   b83b8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b83ba:	2001      	movs	r0, #1
   b83bc:	e7fc      	b.n	b83b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b83c0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b83c0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b83c2:	f7ff ffb9 	bl	b8338 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b83c6:	4b02      	ldr	r3, [pc, #8]	; (b83d0 <_ZN9TimeClass5monthEx+0x10>)
   b83c8:	6918      	ldr	r0, [r3, #16]
}
   b83ca:	3001      	adds	r0, #1
   b83cc:	bd08      	pop	{r3, pc}
   b83ce:	bf00      	nop
   b83d0:	2003e6a4 	.word	0x2003e6a4

000b83d4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b83d4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b83d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b83dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b83e0:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b83e2:	d411      	bmi.n	b8408 <_ZN9TimeClass4zoneEf+0x34>
   b83e4:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b83e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b83ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b83f0:	dc0a      	bgt.n	b8408 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b83f2:	eddf 7a06 	vldr	s15, [pc, #24]	; b840c <_ZN9TimeClass4zoneEf+0x38>
   b83f6:	ee60 7a27 	vmul.f32	s15, s0, s15
   b83fa:	ee17 0a90 	vmov	r0, s15
   b83fe:	f7fc fa85 	bl	b490c <__aeabi_f2lz>
   b8402:	4b03      	ldr	r3, [pc, #12]	; (b8410 <_ZN9TimeClass4zoneEf+0x3c>)
   b8404:	e9c3 0100 	strd	r0, r1, [r3]
}
   b8408:	bd08      	pop	{r3, pc}
   b840a:	bf00      	nop
   b840c:	45610000 	.word	0x45610000
   b8410:	2003e6d0 	.word	0x2003e6d0

000b8414 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8414:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8416:	2000      	movs	r0, #0
   b8418:	f7fd fd08 	bl	b5e2c <hal_rtc_time_is_valid>
    if (rtcstate)
   b841c:	4604      	mov	r4, r0
   b841e:	b9a0      	cbnz	r0, b844a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8420:	f7fd ff0e 	bl	b6240 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8424:	2801      	cmp	r0, #1
   b8426:	d110      	bne.n	b844a <_ZN9TimeClass7isValidEv+0x36>
   b8428:	4620      	mov	r0, r4
   b842a:	f7fd ff39 	bl	b62a0 <system_thread_get_state>
   b842e:	b960      	cbnz	r0, b844a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8430:	f7ff ffb8 	bl	b83a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8434:	b910      	cbnz	r0, b843c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8436:	f7fd ffaf 	bl	b6398 <spark_process>
        while (_while() && !_condition()) {
   b843a:	e7f9      	b.n	b8430 <_ZN9TimeClass7isValidEv+0x1c>
   b843c:	f7ff ffb2 	bl	b83a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8444:	2000      	movs	r0, #0
   b8446:	f7fd bcf1 	b.w	b5e2c <hal_rtc_time_is_valid>
}
   b844a:	4620      	mov	r0, r4
   b844c:	bd10      	pop	{r4, pc}

000b844e <_ZN9TimeClass3nowEv>:
{
   b844e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8450:	f7ff ffe0 	bl	b8414 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8454:	2210      	movs	r2, #16
   b8456:	2100      	movs	r1, #0
   b8458:	4668      	mov	r0, sp
   b845a:	f001 f952 	bl	b9702 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b845e:	2100      	movs	r1, #0
   b8460:	4668      	mov	r0, sp
   b8462:	f7fd fceb 	bl	b5e3c <hal_rtc_get_time>
}
   b8466:	9800      	ldr	r0, [sp, #0]
   b8468:	b005      	add	sp, #20
   b846a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8470 <_ZN9TimeClass4hourEv>:
{
   b8470:	b508      	push	{r3, lr}
	return hour(now());
   b8472:	f7ff ffec 	bl	b844e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8476:	17c1      	asrs	r1, r0, #31
   b8478:	f7ff ff5e 	bl	b8338 <_ZL22Refresh_UnixTime_Cachex>
}
   b847c:	4b01      	ldr	r3, [pc, #4]	; (b8484 <_ZN9TimeClass4hourEv+0x14>)
   b847e:	6898      	ldr	r0, [r3, #8]
   b8480:	bd08      	pop	{r3, pc}
   b8482:	bf00      	nop
   b8484:	2003e6a4 	.word	0x2003e6a4

000b8488 <_ZN9TimeClass6minuteEv>:
{
   b8488:	b508      	push	{r3, lr}
	return minute(now());
   b848a:	f7ff ffe0 	bl	b844e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b848e:	17c1      	asrs	r1, r0, #31
   b8490:	f7ff ff52 	bl	b8338 <_ZL22Refresh_UnixTime_Cachex>
}
   b8494:	4b01      	ldr	r3, [pc, #4]	; (b849c <_ZN9TimeClass6minuteEv+0x14>)
   b8496:	6858      	ldr	r0, [r3, #4]
   b8498:	bd08      	pop	{r3, pc}
   b849a:	bf00      	nop
   b849c:	2003e6a4 	.word	0x2003e6a4

000b84a0 <_ZN9TimeClass6secondEv>:
{
   b84a0:	b508      	push	{r3, lr}
	return second(now());
   b84a2:	f7ff ffd4 	bl	b844e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b84a6:	17c1      	asrs	r1, r0, #31
   b84a8:	f7ff ff46 	bl	b8338 <_ZL22Refresh_UnixTime_Cachex>
}
   b84ac:	4b01      	ldr	r3, [pc, #4]	; (b84b4 <_ZN9TimeClass6secondEv+0x14>)
   b84ae:	6818      	ldr	r0, [r3, #0]
   b84b0:	bd08      	pop	{r3, pc}
   b84b2:	bf00      	nop
   b84b4:	2003e6a4 	.word	0x2003e6a4

000b84b8 <_ZN9TimeClass3dayEv>:
{
   b84b8:	b508      	push	{r3, lr}
	return day(now());
   b84ba:	f7ff ffc8 	bl	b844e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b84be:	17c1      	asrs	r1, r0, #31
   b84c0:	f7ff ff3a 	bl	b8338 <_ZL22Refresh_UnixTime_Cachex>
}
   b84c4:	4b01      	ldr	r3, [pc, #4]	; (b84cc <_ZN9TimeClass3dayEv+0x14>)
   b84c6:	68d8      	ldr	r0, [r3, #12]
   b84c8:	bd08      	pop	{r3, pc}
   b84ca:	bf00      	nop
   b84cc:	2003e6a4 	.word	0x2003e6a4

000b84d0 <_ZN9TimeClass5monthEv>:
{
   b84d0:	b508      	push	{r3, lr}
	return month(now());
   b84d2:	f7ff ffbc 	bl	b844e <_ZN9TimeClass3nowEv>
}
   b84d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b84da:	17c1      	asrs	r1, r0, #31
   b84dc:	f7ff bf70 	b.w	b83c0 <_ZN9TimeClass5monthEx>

000b84e0 <_ZN9TimeClass4yearEv>:
{
   b84e0:	b508      	push	{r3, lr}
	return year(now());
   b84e2:	f7ff ffb4 	bl	b844e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b84e6:	17c1      	asrs	r1, r0, #31
   b84e8:	f7ff ff26 	bl	b8338 <_ZL22Refresh_UnixTime_Cachex>
}
   b84ec:	4b01      	ldr	r3, [pc, #4]	; (b84f4 <_ZN9TimeClass4yearEv+0x14>)
   b84ee:	6958      	ldr	r0, [r3, #20]
   b84f0:	bd08      	pop	{r3, pc}
   b84f2:	bf00      	nop
   b84f4:	2003e6a4 	.word	0x2003e6a4

000b84f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b84f8:	4b02      	ldr	r3, [pc, #8]	; (b8504 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b84fa:	681a      	ldr	r2, [r3, #0]
   b84fc:	4b02      	ldr	r3, [pc, #8]	; (b8508 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b84fe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8500:	4770      	bx	lr
   b8502:	bf00      	nop
   b8504:	2003d980 	.word	0x2003d980
   b8508:	2003e6a0 	.word	0x2003e6a0

000b850c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b850c:	2100      	movs	r1, #0
   b850e:	f7fd bea7 	b.w	b6260 <system_delay_ms>
	...

000b8514 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8514:	4b01      	ldr	r3, [pc, #4]	; (b851c <_GLOBAL__sub_I_RGB+0x8>)
   b8516:	2200      	movs	r2, #0
   b8518:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b851a:	4770      	bx	lr
   b851c:	2003e6e0 	.word	0x2003e6e0

000b8520 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8520:	4b01      	ldr	r3, [pc, #4]	; (b8528 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8522:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8524:	4770      	bx	lr
   b8526:	bf00      	nop
   b8528:	2003d984 	.word	0x2003d984

000b852c <serialEventRun>:
{
   b852c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b852e:	4b0b      	ldr	r3, [pc, #44]	; (b855c <serialEventRun+0x30>)
   b8530:	b143      	cbz	r3, b8544 <serialEventRun+0x18>
   b8532:	f000 fc19 	bl	b8d68 <_Z16_fetch_usbserialv>
   b8536:	6803      	ldr	r3, [r0, #0]
   b8538:	691b      	ldr	r3, [r3, #16]
   b853a:	4798      	blx	r3
   b853c:	2800      	cmp	r0, #0
   b853e:	dd01      	ble.n	b8544 <serialEventRun+0x18>
        serialEvent();
   b8540:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8544:	4b06      	ldr	r3, [pc, #24]	; (b8560 <serialEventRun+0x34>)
   b8546:	b143      	cbz	r3, b855a <serialEventRun+0x2e>
   b8548:	f000 ff1e 	bl	b9388 <_Z22__fetch_global_Serial1v>
   b854c:	6803      	ldr	r3, [r0, #0]
   b854e:	691b      	ldr	r3, [r3, #16]
   b8550:	4798      	blx	r3
   b8552:	2800      	cmp	r0, #0
   b8554:	dd01      	ble.n	b855a <serialEventRun+0x2e>
        serialEvent1();
   b8556:	f3af 8000 	nop.w
}
   b855a:	bd08      	pop	{r3, pc}
	...

000b8564 <_post_loop>:
{
   b8564:	b508      	push	{r3, lr}
	serialEventRun();
   b8566:	f7ff ffe1 	bl	b852c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b856a:	f7fd fc57 	bl	b5e1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b856e:	4b01      	ldr	r3, [pc, #4]	; (b8574 <_post_loop+0x10>)
   b8570:	6018      	str	r0, [r3, #0]
}
   b8572:	bd08      	pop	{r3, pc}
   b8574:	2003e744 	.word	0x2003e744

000b8578 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8578:	4805      	ldr	r0, [pc, #20]	; (b8590 <_Z33system_initialize_user_backup_ramv+0x18>)
   b857a:	4a06      	ldr	r2, [pc, #24]	; (b8594 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b857c:	4906      	ldr	r1, [pc, #24]	; (b8598 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b857e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8580:	1a12      	subs	r2, r2, r0
   b8582:	f001 f896 	bl	b96b2 <memcpy>
    __backup_sram_signature = signature;
   b8586:	4b05      	ldr	r3, [pc, #20]	; (b859c <_Z33system_initialize_user_backup_ramv+0x24>)
   b8588:	4a05      	ldr	r2, [pc, #20]	; (b85a0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b858a:	601a      	str	r2, [r3, #0]
}
   b858c:	bd08      	pop	{r3, pc}
   b858e:	bf00      	nop
   b8590:	2003f400 	.word	0x2003f400
   b8594:	2003f404 	.word	0x2003f404
   b8598:	000bc968 	.word	0x000bc968
   b859c:	2003f400 	.word	0x2003f400
   b85a0:	9a271c1e 	.word	0x9a271c1e

000b85a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b85a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b85a6:	2300      	movs	r3, #0
   b85a8:	9300      	str	r3, [sp, #0]
   b85aa:	461a      	mov	r2, r3
   b85ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b85b0:	f7fd fe88 	bl	b62c4 <system_ctrl_set_result>
}
   b85b4:	b003      	add	sp, #12
   b85b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b85bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b85bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b85be:	8843      	ldrh	r3, [r0, #2]
   b85c0:	2b0a      	cmp	r3, #10
   b85c2:	d008      	beq.n	b85d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b85c4:	2b50      	cmp	r3, #80	; 0x50
   b85c6:	d10b      	bne.n	b85e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b85c8:	4b09      	ldr	r3, [pc, #36]	; (b85f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b85ca:	681b      	ldr	r3, [r3, #0]
   b85cc:	b14b      	cbz	r3, b85e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b85ce:	b003      	add	sp, #12
   b85d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b85d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b85d6:	f7ff ffe5 	bl	b85a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b85da:	b003      	add	sp, #12
   b85dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b85e0:	2300      	movs	r3, #0
   b85e2:	9300      	str	r3, [sp, #0]
   b85e4:	461a      	mov	r2, r3
   b85e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b85ea:	f7fd fe6b 	bl	b62c4 <system_ctrl_set_result>
}
   b85ee:	e7f4      	b.n	b85da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b85f0:	2003e6f4 	.word	0x2003e6f4

000b85f4 <module_user_init_hook>:
{
   b85f4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b85f6:	4812      	ldr	r0, [pc, #72]	; (b8640 <module_user_init_hook+0x4c>)
   b85f8:	2100      	movs	r1, #0
   b85fa:	f7fd ff45 	bl	b6488 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b85fe:	4b11      	ldr	r3, [pc, #68]	; (b8644 <module_user_init_hook+0x50>)
   b8600:	681a      	ldr	r2, [r3, #0]
   b8602:	4b11      	ldr	r3, [pc, #68]	; (b8648 <module_user_init_hook+0x54>)
   b8604:	429a      	cmp	r2, r3
   b8606:	4b11      	ldr	r3, [pc, #68]	; (b864c <module_user_init_hook+0x58>)
   b8608:	bf0c      	ite	eq
   b860a:	2201      	moveq	r2, #1
   b860c:	2200      	movne	r2, #0
   b860e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8610:	d001      	beq.n	b8616 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8612:	f7ff ffb1 	bl	b8578 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8616:	f7fd fbf1 	bl	b5dfc <HAL_RNG_GetRandomNumber>
   b861a:	4604      	mov	r4, r0
    srand(seed);
   b861c:	f001 f87a 	bl	b9714 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8620:	4b0b      	ldr	r3, [pc, #44]	; (b8650 <module_user_init_hook+0x5c>)
   b8622:	b113      	cbz	r3, b862a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8624:	4620      	mov	r0, r4
   b8626:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b862a:	2100      	movs	r1, #0
   b862c:	4808      	ldr	r0, [pc, #32]	; (b8650 <module_user_init_hook+0x5c>)
   b862e:	f7fd fedb 	bl	b63e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8636:	4807      	ldr	r0, [pc, #28]	; (b8654 <module_user_init_hook+0x60>)
   b8638:	2100      	movs	r1, #0
   b863a:	f7fd be39 	b.w	b62b0 <system_ctrl_set_app_request_handler>
   b863e:	bf00      	nop
   b8640:	000b8521 	.word	0x000b8521
   b8644:	2003f400 	.word	0x2003f400
   b8648:	9a271c1e 	.word	0x9a271c1e
   b864c:	2003e6f0 	.word	0x2003e6f0
   b8650:	00000000 	.word	0x00000000
   b8654:	000b85bd 	.word	0x000b85bd

000b8658 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8658:	4770      	bx	lr

000b865a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b865a:	2000      	movs	r0, #0
   b865c:	4770      	bx	lr

000b865e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b865e:	b510      	push	{r4, lr}
   b8660:	2110      	movs	r1, #16
   b8662:	4604      	mov	r4, r0
   b8664:	f7fc fa0d 	bl	b4a82 <_ZdlPvj>
   b8668:	4620      	mov	r0, r4
   b866a:	bd10      	pop	{r4, pc}

000b866c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b866c:	b508      	push	{r3, lr}
      { delete this; }
   b866e:	f7ff fff6 	bl	b865e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b8672:	bd08      	pop	{r3, pc}

000b8674 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b8674:	b530      	push	{r4, r5, lr}
        type_(type) {
   b8676:	2200      	movs	r2, #0
   b8678:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b867c:	6002      	str	r2, [r0, #0]
   b867e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8680:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b8682:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8684:	680c      	ldr	r4, [r1, #0]
   b8686:	8085      	strh	r5, [r0, #4]
   b8688:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b868a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b868c:	bd30      	pop	{r4, r5, pc}

000b868e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b868e:	b510      	push	{r4, lr}
   b8690:	4604      	mov	r4, r0
    free((void*)msg_);
   b8692:	6800      	ldr	r0, [r0, #0]
   b8694:	f7fd feb8 	bl	b6408 <free>
}
   b8698:	4620      	mov	r0, r4
   b869a:	bd10      	pop	{r4, pc}

000b869c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b869c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b869e:	68c4      	ldr	r4, [r0, #12]
   b86a0:	b1f4      	cbz	r4, b86e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b86a2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b86a4:	2b02      	cmp	r3, #2
   b86a6:	d103      	bne.n	b86b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b86a8:	f104 000c 	add.w	r0, r4, #12
   b86ac:	f7ff ffef 	bl	b868e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b86b0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b86b2:	b135      	cbz	r5, b86c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b86b4:	4628      	mov	r0, r5
   b86b6:	f7fc fb83 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
   b86ba:	2110      	movs	r1, #16
   b86bc:	4628      	mov	r0, r5
   b86be:	f7fc f9e0 	bl	b4a82 <_ZdlPvj>
   b86c2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b86c4:	b135      	cbz	r5, b86d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b86c6:	4628      	mov	r0, r5
   b86c8:	f7fc fb7a 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
   b86cc:	2110      	movs	r1, #16
   b86ce:	4628      	mov	r0, r5
   b86d0:	f7fc f9d7 	bl	b4a82 <_ZdlPvj>
   b86d4:	4620      	mov	r0, r4
   b86d6:	2114      	movs	r1, #20
   b86d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b86dc:	f7fc b9d1 	b.w	b4a82 <_ZdlPvj>
   b86e0:	bd38      	pop	{r3, r4, r5, pc}

000b86e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b86e2:	680b      	ldr	r3, [r1, #0]
   b86e4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b86e6:	684b      	ldr	r3, [r1, #4]
   b86e8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b86ea:	b113      	cbz	r3, b86f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b86ec:	685a      	ldr	r2, [r3, #4]
   b86ee:	3201      	adds	r2, #1
   b86f0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b86f2:	4770      	bx	lr

000b86f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b86f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b86f6:	4604      	mov	r4, r0
   b86f8:	4668      	mov	r0, sp
   b86fa:	460d      	mov	r5, r1
   b86fc:	f7ff fff1 	bl	b86e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8700:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8702:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8704:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b8706:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8708:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b870a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b870c:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b870e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8710:	f7fc ff16 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b8714:	b135      	cbz	r5, b8724 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b8716:	1d28      	adds	r0, r5, #4
   b8718:	f7fc ff12 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b871c:	2108      	movs	r1, #8
   b871e:	4628      	mov	r0, r5
   b8720:	f7fc f9af 	bl	b4a82 <_ZdlPvj>
        return p;
    }
   b8724:	4620      	mov	r0, r4
   b8726:	b003      	add	sp, #12
   b8728:	bd30      	pop	{r4, r5, pc}

000b872a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b872a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b872c:	b510      	push	{r4, lr}
      if (_M_empty())
   b872e:	b90a      	cbnz	r2, b8734 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b8730:	f000 fe8c 	bl	b944c <_ZSt25__throw_bad_function_callv>
    }
   b8734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8738:	68c3      	ldr	r3, [r0, #12]
   b873a:	4718      	bx	r3

000b873c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b873c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b873e:	6800      	ldr	r0, [r0, #0]
   b8740:	f100 0110 	add.w	r1, r0, #16
   b8744:	f7ff fff1 	bl	b872a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8748:	bd08      	pop	{r3, pc}

000b874a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b874a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b874c:	b510      	push	{r4, lr}
      if (_M_empty())
   b874e:	b90a      	cbnz	r2, b8754 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8750:	f000 fe7c 	bl	b944c <_ZSt25__throw_bad_function_callv>
    }
   b8754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8758:	68c3      	ldr	r3, [r0, #12]
   b875a:	4718      	bx	r3

000b875c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b875c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b875e:	6800      	ldr	r0, [r0, #0]
   b8760:	f100 0110 	add.w	r1, r0, #16
   b8764:	f7ff fff1 	bl	b874a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8768:	bd08      	pop	{r3, pc}
	...

000b876c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b876c:	b538      	push	{r3, r4, r5, lr}
   b876e:	2300      	movs	r3, #0
   b8770:	4604      	mov	r4, r0
   b8772:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8774:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b8776:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8778:	f7fc f97f 	bl	b4a7a <_Znwj>
   b877c:	b128      	cbz	r0, b878a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b877e:	2301      	movs	r3, #1
   b8780:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8784:	4b02      	ldr	r3, [pc, #8]	; (b8790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b8786:	6003      	str	r3, [r0, #0]
   b8788:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b878a:	6020      	str	r0, [r4, #0]
	}
   b878c:	4620      	mov	r0, r4
   b878e:	bd38      	pop	{r3, r4, r5, pc}
   b8790:	000bc030 	.word	0x000bc030

000b8794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8794:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8796:	2300      	movs	r3, #0
   b8798:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b879a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b879c:	4604      	mov	r4, r0
   b879e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b87a0:	b12b      	cbz	r3, b87ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b87a2:	2202      	movs	r2, #2
   b87a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b87a6:	68eb      	ldr	r3, [r5, #12]
   b87a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b87aa:	68ab      	ldr	r3, [r5, #8]
   b87ac:	60a3      	str	r3, [r4, #8]
    }
   b87ae:	4620      	mov	r0, r4
   b87b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b87b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b87b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b87b6:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b87b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b87ba:	4668      	mov	r0, sp
   b87bc:	f7ff ff5a 	bl	b8674 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b87c0:	f04f 0302 	mov.w	r3, #2
   b87c4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b87c8:	2a00      	cmp	r2, #0
   b87ca:	d103      	bne.n	b87d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b87cc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b87d0:	2900      	cmp	r1, #0
   b87d2:	d1f7      	bne.n	b87c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b87d4:	d125      	bne.n	b8822 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b87d6:	f104 050c 	add.w	r5, r4, #12
   b87da:	4669      	mov	r1, sp
   b87dc:	4628      	mov	r0, r5
   b87de:	f7ff ff49 	bl	b8674 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b87e2:	f3bf 8f5b 	dmb	ish
   b87e6:	2301      	movs	r3, #1
   b87e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b87ea:	2000      	movs	r0, #0
   b87ec:	f104 0308 	add.w	r3, r4, #8
   b87f0:	f3bf 8f5b 	dmb	ish
   b87f4:	e853 6f00 	ldrex	r6, [r3]
   b87f8:	e843 0200 	strex	r2, r0, [r3]
   b87fc:	2a00      	cmp	r2, #0
   b87fe:	d1f9      	bne.n	b87f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8800:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8804:	b16e      	cbz	r6, b8822 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b8806:	f7fd fd3b 	bl	b6280 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b880a:	b178      	cbz	r0, b882c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b880c:	4629      	mov	r1, r5
   b880e:	4630      	mov	r0, r6
   b8810:	f7ff ff8b 	bl	b872a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b8814:	4630      	mov	r0, r6
   b8816:	f7fc fad3 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b881a:	2110      	movs	r1, #16
   b881c:	4630      	mov	r0, r6
   b881e:	f7fc f930 	bl	b4a82 <_ZdlPvj>
        p_->setError(std::move(error));
   b8822:	4668      	mov	r0, sp
   b8824:	f7ff ff33 	bl	b868e <_ZN8particle5ErrorD1Ev>
    }
   b8828:	b009      	add	sp, #36	; 0x24
   b882a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b882c:	4631      	mov	r1, r6
   b882e:	a802      	add	r0, sp, #8
   b8830:	f7ff ffb0 	bl	b8794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8834:	68e0      	ldr	r0, [r4, #12]
   b8836:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b883a:	b108      	cbz	r0, b8840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b883c:	f000 ffb0 	bl	b97a0 <strdup>
        type_(type) {
   b8840:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8842:	2010      	movs	r0, #16
   b8844:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8848:	f7fc f917 	bl	b4a7a <_Znwj>
   b884c:	4605      	mov	r5, r0
   b884e:	b1e8      	cbz	r0, b888c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8850:	2700      	movs	r7, #0
   b8852:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8854:	2018      	movs	r0, #24
   b8856:	f7fc f910 	bl	b4a7a <_Znwj>
   b885a:	4604      	mov	r4, r0
   b885c:	b188      	cbz	r0, b8882 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b885e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8860:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8862:	a802      	add	r0, sp, #8
   b8864:	f7ff fa1a 	bl	b7c9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8868:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b886a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b886c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b886e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8870:	9204      	str	r2, [sp, #16]
   b8872:	a906      	add	r1, sp, #24
   b8874:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8876:	60e3      	str	r3, [r4, #12]
   b8878:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b887c:	9205      	str	r2, [sp, #20]
   b887e:	f7ff fef9 	bl	b8674 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8882:	4b08      	ldr	r3, [pc, #32]	; (b88a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8884:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8886:	4b08      	ldr	r3, [pc, #32]	; (b88a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8888:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b888a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b888c:	a806      	add	r0, sp, #24
   b888e:	f7ff fefe 	bl	b868e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8892:	a802      	add	r0, sp, #8
   b8894:	f7fc fa94 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8898:	2200      	movs	r2, #0
   b889a:	4629      	mov	r1, r5
   b889c:	4803      	ldr	r0, [pc, #12]	; (b88ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b889e:	f7fd fcf7 	bl	b6290 <application_thread_invoke>
   b88a2:	e7b7      	b.n	b8814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b88a4:	000b873d 	.word	0x000b873d
   b88a8:	000b89c1 	.word	0x000b89c1
   b88ac:	000b8eb1 	.word	0x000b8eb1

000b88b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b88b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b88b4:	b08b      	sub	sp, #44	; 0x2c
   b88b6:	4605      	mov	r5, r0
   b88b8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b88bc:	460f      	mov	r7, r1
   b88be:	4690      	mov	r8, r2
   b88c0:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b88c2:	f7fd fd71 	bl	b63a8 <spark_cloud_flag_connected>
   b88c6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b88c8:	4683      	mov	fp, r0
   b88ca:	bb38      	cbnz	r0, b891c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b88cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b88d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b88d2:	a905      	add	r1, sp, #20
   b88d4:	4630      	mov	r0, r6
   b88d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b88da:	f7ff fecb 	bl	b8674 <_ZN8particle5ErrorC1EOS0_>
   b88de:	2014      	movs	r0, #20
   b88e0:	f7fc f8cb 	bl	b4a7a <_Znwj>
   b88e4:	4604      	mov	r4, r0
   b88e6:	b148      	cbz	r0, b88fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b88e8:	2302      	movs	r3, #2
   b88ea:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b88ec:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b88ee:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b88f2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b88f4:	4631      	mov	r1, r6
   b88f6:	300c      	adds	r0, #12
   b88f8:	f7ff febc 	bl	b8674 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b88fc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b88fe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8900:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8904:	f7ff ff32 	bl	b876c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8908:	4630      	mov	r0, r6
   b890a:	f7ff fec0 	bl	b868e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b890e:	a805      	add	r0, sp, #20
   b8910:	f7ff febd 	bl	b868e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8914:	4628      	mov	r0, r5
   b8916:	b00b      	add	sp, #44	; 0x2c
   b8918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b891c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b891e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8920:	2014      	movs	r0, #20
   b8922:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b8926:	9307      	str	r3, [sp, #28]
   b8928:	f7fc f8a7 	bl	b4a7a <_Znwj>
   b892c:	4601      	mov	r1, r0
   b892e:	b118      	cbz	r0, b8938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8930:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8934:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8936:	7044      	strb	r4, [r0, #1]
   b8938:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b893a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b893c:	f7ff ff16 	bl	b876c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8940:	4b1e      	ldr	r3, [pc, #120]	; (b89bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8942:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8944:	2008      	movs	r0, #8
   b8946:	f7fc f898 	bl	b4a7a <_Znwj>
   b894a:	4604      	mov	r4, r0
   b894c:	b110      	cbz	r0, b8954 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b894e:	a903      	add	r1, sp, #12
   b8950:	f7ff fec7 	bl	b86e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8954:	9600      	str	r6, [sp, #0]
   b8956:	fa5f f38a 	uxtb.w	r3, sl
   b895a:	464a      	mov	r2, r9
   b895c:	4641      	mov	r1, r8
   b895e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8960:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8962:	f7fd fd29 	bl	b63b8 <spark_send_event>
   b8966:	b9b8      	cbnz	r0, b8998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8968:	9b03      	ldr	r3, [sp, #12]
   b896a:	785b      	ldrb	r3, [r3, #1]
   b896c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8970:	b993      	cbnz	r3, b8998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8972:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8976:	a905      	add	r1, sp, #20
   b8978:	a803      	add	r0, sp, #12
   b897a:	9205      	str	r2, [sp, #20]
   b897c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8980:	f7ff ff18 	bl	b87b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8984:	a805      	add	r0, sp, #20
   b8986:	f7ff fe82 	bl	b868e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b898a:	a805      	add	r0, sp, #20
   b898c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b898e:	f7ff feb1 	bl	b86f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8992:	a806      	add	r0, sp, #24
   b8994:	f7fc fdd4 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8998:	a903      	add	r1, sp, #12
   b899a:	a805      	add	r0, sp, #20
   b899c:	f7ff fea1 	bl	b86e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b89a0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b89a2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b89a4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b89a6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b89a8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b89aa:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b89ac:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b89ae:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b89b0:	f7fc fdc6 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89b4:	a804      	add	r0, sp, #16
   b89b6:	f7fc fdc3 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b89ba:	e7ab      	b.n	b8914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b89bc:	000b8a3d 	.word	0x000b8a3d

000b89c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b89c0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b89c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b89c4:	4605      	mov	r5, r0
	switch (__op)
   b89c6:	d103      	bne.n	b89d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b89c8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b89ca:	6003      	str	r3, [r0, #0]
      }
   b89cc:	2000      	movs	r0, #0
   b89ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b89d0:	2a02      	cmp	r2, #2
   b89d2:	d010      	beq.n	b89f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b89d4:	2a03      	cmp	r2, #3
   b89d6:	d1f9      	bne.n	b89cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b89d8:	6804      	ldr	r4, [r0, #0]
   b89da:	2c00      	cmp	r4, #0
   b89dc:	d0f6      	beq.n	b89cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b89de:	f104 0010 	add.w	r0, r4, #16
   b89e2:	f7ff fe54 	bl	b868e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b89e6:	4620      	mov	r0, r4
   b89e8:	f7fc f9ea 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b89ec:	2118      	movs	r1, #24
   b89ee:	4620      	mov	r0, r4
   b89f0:	f7fc f847 	bl	b4a82 <_ZdlPvj>
   b89f4:	e7ea      	b.n	b89cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b89f6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b89f8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b89fa:	f7fc f83e 	bl	b4a7a <_Znwj>
   b89fe:	4604      	mov	r4, r0
   b8a00:	b150      	cbz	r0, b8a18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b8a02:	4631      	mov	r1, r6
   b8a04:	f7ff fec6 	bl	b8794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8a08:	6930      	ldr	r0, [r6, #16]
   b8a0a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8a0e:	b108      	cbz	r0, b8a14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8a10:	f000 fec6 	bl	b97a0 <strdup>
        type_(type) {
   b8a14:	6120      	str	r0, [r4, #16]
   b8a16:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b8a18:	602c      	str	r4, [r5, #0]
	}
   b8a1a:	e7d7      	b.n	b89cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8a1c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8a1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8a1e:	2300      	movs	r3, #0
   b8a20:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8a22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8a24:	4604      	mov	r4, r0
   b8a26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8a28:	b12b      	cbz	r3, b8a36 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8a2a:	2202      	movs	r2, #2
   b8a2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8a2e:	68eb      	ldr	r3, [r5, #12]
   b8a30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8a32:	68ab      	ldr	r3, [r5, #8]
   b8a34:	60a3      	str	r3, [r4, #8]
    }
   b8a36:	4620      	mov	r0, r4
   b8a38:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8a3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a3e:	b089      	sub	sp, #36	; 0x24
   b8a40:	4604      	mov	r4, r0
   b8a42:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8a44:	a801      	add	r0, sp, #4
   b8a46:	4611      	mov	r1, r2
   b8a48:	f7ff fe54 	bl	b86f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b8a4c:	b1a4      	cbz	r4, b8a78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b8a4e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8a50:	b11d      	cbz	r5, b8a5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b8a52:	4628      	mov	r0, r5
   b8a54:	f000 fea4 	bl	b97a0 <strdup>
   b8a58:	4605      	mov	r5, r0
   b8a5a:	a801      	add	r0, sp, #4
   b8a5c:	a903      	add	r1, sp, #12
        type_(type) {
   b8a5e:	9503      	str	r5, [sp, #12]
   b8a60:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8a64:	f7ff fea6 	bl	b87b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8a68:	a803      	add	r0, sp, #12
   b8a6a:	f7ff fe10 	bl	b868e <_ZN8particle5ErrorD1Ev>
   b8a6e:	a802      	add	r0, sp, #8
   b8a70:	f7fc fd66 	bl	b5540 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8a74:	b009      	add	sp, #36	; 0x24
   b8a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b8a78:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8a7a:	2301      	movs	r3, #1
   b8a7c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8a80:	2a00      	cmp	r2, #0
   b8a82:	d103      	bne.n	b8a8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8a84:	e8c5 3f41 	strexb	r1, r3, [r5]
   b8a88:	2900      	cmp	r1, #0
   b8a8a:	d1f7      	bne.n	b8a7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8a8c:	d1ef      	bne.n	b8a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8a8e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8a90:	f3bf 8f5b 	dmb	ish
   b8a94:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8a96:	1d2b      	adds	r3, r5, #4
   b8a98:	f3bf 8f5b 	dmb	ish
   b8a9c:	e853 6f00 	ldrex	r6, [r3]
   b8aa0:	e843 4200 	strex	r2, r4, [r3]
   b8aa4:	2a00      	cmp	r2, #0
   b8aa6:	d1f9      	bne.n	b8a9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8aa8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8aac:	2e00      	cmp	r6, #0
   b8aae:	d0de      	beq.n	b8a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8ab0:	4620      	mov	r0, r4
   b8ab2:	f7fd fbe5 	bl	b6280 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8ab6:	4607      	mov	r7, r0
   b8ab8:	b160      	cbz	r0, b8ad4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8aba:	f105 010c 	add.w	r1, r5, #12
   b8abe:	4630      	mov	r0, r6
   b8ac0:	f7ff fe43 	bl	b874a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8ac4:	4630      	mov	r0, r6
   b8ac6:	f7fc f97b 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8aca:	2110      	movs	r1, #16
   b8acc:	4630      	mov	r0, r6
   b8ace:	f7fb ffd8 	bl	b4a82 <_ZdlPvj>
   b8ad2:	e7cc      	b.n	b8a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8ad4:	4631      	mov	r1, r6
   b8ad6:	a803      	add	r0, sp, #12
   b8ad8:	f7ff ffa0 	bl	b8a1c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8adc:	7b2b      	ldrb	r3, [r5, #12]
   b8ade:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8ae2:	2010      	movs	r0, #16
   b8ae4:	f7fb ffc9 	bl	b4a7a <_Znwj>
   b8ae8:	4605      	mov	r5, r0
   b8aea:	b1d0      	cbz	r0, b8b22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8aec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8aee:	2014      	movs	r0, #20
   b8af0:	f7fb ffc3 	bl	b4a7a <_Znwj>
   b8af4:	4604      	mov	r4, r0
   b8af6:	b178      	cbz	r0, b8b18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b8af8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8afa:	4601      	mov	r1, r0
   b8afc:	a803      	add	r0, sp, #12
   b8afe:	f7ff f8cd 	bl	b7c9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8b02:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8b04:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8b06:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8b08:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8b0a:	9205      	str	r2, [sp, #20]
   b8b0c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8b0e:	60e3      	str	r3, [r4, #12]
   b8b10:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8b14:	9206      	str	r2, [sp, #24]
   b8b16:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8b18:	4b06      	ldr	r3, [pc, #24]	; (b8b34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b8b1a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8b1c:	4b06      	ldr	r3, [pc, #24]	; (b8b38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8b1e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8b20:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b8b22:	a803      	add	r0, sp, #12
   b8b24:	f7fc f94c 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8b28:	2200      	movs	r2, #0
   b8b2a:	4629      	mov	r1, r5
   b8b2c:	4803      	ldr	r0, [pc, #12]	; (b8b3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b8b2e:	f7fd fbaf 	bl	b6290 <application_thread_invoke>
   b8b32:	e7c7      	b.n	b8ac4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b8b34:	000b875d 	.word	0x000b875d
   b8b38:	000b8b41 	.word	0x000b8b41
   b8b3c:	000b8eb1 	.word	0x000b8eb1

000b8b40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8b40:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8b42:	b570      	push	{r4, r5, r6, lr}
   b8b44:	4604      	mov	r4, r0
	switch (__op)
   b8b46:	d103      	bne.n	b8b50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8b48:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8b4a:	6003      	str	r3, [r0, #0]
      }
   b8b4c:	2000      	movs	r0, #0
   b8b4e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b8b50:	2a02      	cmp	r2, #2
   b8b52:	d00c      	beq.n	b8b6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8b54:	2a03      	cmp	r2, #3
   b8b56:	d1f9      	bne.n	b8b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8b58:	6804      	ldr	r4, [r0, #0]
   b8b5a:	2c00      	cmp	r4, #0
   b8b5c:	d0f6      	beq.n	b8b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b8b5e:	4620      	mov	r0, r4
   b8b60:	f7fc f92e 	bl	b4dc0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8b64:	2114      	movs	r1, #20
   b8b66:	4620      	mov	r0, r4
   b8b68:	f7fb ff8b 	bl	b4a82 <_ZdlPvj>
   b8b6c:	e7ee      	b.n	b8b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8b6e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8b70:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8b72:	f7fb ff82 	bl	b4a7a <_Znwj>
   b8b76:	4605      	mov	r5, r0
   b8b78:	b120      	cbz	r0, b8b84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b8b7a:	4631      	mov	r1, r6
   b8b7c:	f7ff ff4e 	bl	b8a1c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8b80:	7c33      	ldrb	r3, [r6, #16]
   b8b82:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8b84:	6025      	str	r5, [r4, #0]
	}
   b8b86:	e7e1      	b.n	b8b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b8b88 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b8b88:	4770      	bx	lr

000b8b8a <_ZN9IPAddressD0Ev>:
   b8b8a:	b510      	push	{r4, lr}
   b8b8c:	2118      	movs	r1, #24
   b8b8e:	4604      	mov	r4, r0
   b8b90:	f7fb ff77 	bl	b4a82 <_ZdlPvj>
   b8b94:	4620      	mov	r0, r4
   b8b96:	bd10      	pop	{r4, pc}

000b8b98 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8b98:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8b9a:	7d03      	ldrb	r3, [r0, #20]
   b8b9c:	2b06      	cmp	r3, #6
{
   b8b9e:	b08d      	sub	sp, #52	; 0x34
   b8ba0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8ba2:	f100 0704 	add.w	r7, r0, #4
   b8ba6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8baa:	d012      	beq.n	b8bd2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8bac:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8bb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8bb4:	220a      	movs	r2, #10
   b8bb6:	4630      	mov	r0, r6
   b8bb8:	f7ff fb67 	bl	b828a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8bbc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8bbe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8bc0:	d019      	beq.n	b8bf6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8bc2:	2c00      	cmp	r4, #0
   b8bc4:	d0f4      	beq.n	b8bb0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8bc6:	212e      	movs	r1, #46	; 0x2e
   b8bc8:	4630      	mov	r0, r6
   b8bca:	f7ff fb45 	bl	b8258 <_ZN5Print5printEc>
   b8bce:	4404      	add	r4, r0
   b8bd0:	e7ee      	b.n	b8bb0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8bd2:	232f      	movs	r3, #47	; 0x2f
   b8bd4:	466a      	mov	r2, sp
   b8bd6:	4639      	mov	r1, r7
   b8bd8:	200a      	movs	r0, #10
		buf[0] = 0;
   b8bda:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8bde:	f7fd fa0f 	bl	b6000 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8be2:	4668      	mov	r0, sp
   b8be4:	f7fb feee 	bl	b49c4 <strlen>
   b8be8:	6833      	ldr	r3, [r6, #0]
   b8bea:	4602      	mov	r2, r0
   b8bec:	68db      	ldr	r3, [r3, #12]
   b8bee:	4669      	mov	r1, sp
   b8bf0:	4630      	mov	r0, r6
   b8bf2:	4798      	blx	r3
   b8bf4:	4604      	mov	r4, r0
    }
    return n;
}
   b8bf6:	4620      	mov	r0, r4
   b8bf8:	b00d      	add	sp, #52	; 0x34
   b8bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8bfc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8bfc:	b510      	push	{r4, lr}
   b8bfe:	4b05      	ldr	r3, [pc, #20]	; (b8c14 <_ZN9IPAddressC1Ev+0x18>)
   b8c00:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b8c02:	2211      	movs	r2, #17
   b8c04:	f840 3b04 	str.w	r3, [r0], #4
   b8c08:	2100      	movs	r1, #0
   b8c0a:	f000 fd7a 	bl	b9702 <memset>
}
   b8c0e:	4620      	mov	r0, r4
   b8c10:	bd10      	pop	{r4, pc}
   b8c12:	bf00      	nop
   b8c14:	000bc04c 	.word	0x000bc04c

000b8c18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8c18:	4603      	mov	r3, r0
   b8c1a:	4a07      	ldr	r2, [pc, #28]	; (b8c38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8c1c:	b510      	push	{r4, lr}
   b8c1e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8c22:	f101 0210 	add.w	r2, r1, #16
   b8c26:	f851 4b04 	ldr.w	r4, [r1], #4
   b8c2a:	f843 4b04 	str.w	r4, [r3], #4
   b8c2e:	4291      	cmp	r1, r2
   b8c30:	d1f9      	bne.n	b8c26 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8c32:	780a      	ldrb	r2, [r1, #0]
   b8c34:	701a      	strb	r2, [r3, #0]
}
   b8c36:	bd10      	pop	{r4, pc}
   b8c38:	000bc04c 	.word	0x000bc04c

000b8c3c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b8c3c:	4a02      	ldr	r2, [pc, #8]	; (b8c48 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b8c3e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b8c42:	2204      	movs	r2, #4
   b8c44:	7502      	strb	r2, [r0, #20]
}
   b8c46:	4770      	bx	lr
   b8c48:	000bc04c 	.word	0x000bc04c

000b8c4c <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b8c4c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8c4e:	2b04      	cmp	r3, #4
   b8c50:	d104      	bne.n	b8c5c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8c52:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8c54:	3800      	subs	r0, #0
   b8c56:	bf18      	it	ne
   b8c58:	2001      	movne	r0, #1
   b8c5a:	4770      	bx	lr
    } else if (version() == 6) {
   b8c5c:	2b06      	cmp	r3, #6
   b8c5e:	d107      	bne.n	b8c70 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8c60:	6843      	ldr	r3, [r0, #4]
   b8c62:	b93b      	cbnz	r3, b8c74 <_ZNK9IPAddresscvbEv+0x28>
   b8c64:	6883      	ldr	r3, [r0, #8]
   b8c66:	b92b      	cbnz	r3, b8c74 <_ZNK9IPAddresscvbEv+0x28>
   b8c68:	68c3      	ldr	r3, [r0, #12]
   b8c6a:	b91b      	cbnz	r3, b8c74 <_ZNK9IPAddresscvbEv+0x28>
   b8c6c:	6900      	ldr	r0, [r0, #16]
   b8c6e:	e7f1      	b.n	b8c54 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8c70:	2000      	movs	r0, #0
   b8c72:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8c74:	2001      	movs	r0, #1
}
   b8c76:	4770      	bx	lr

000b8c78 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8c78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8c7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8c7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8c82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8c86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8c8a:	2304      	movs	r3, #4
   b8c8c:	6041      	str	r1, [r0, #4]
   b8c8e:	7503      	strb	r3, [r0, #20]
}
   b8c90:	bd10      	pop	{r4, pc}
	...

000b8c94 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8c94:	b507      	push	{r0, r1, r2, lr}
   b8c96:	4b06      	ldr	r3, [pc, #24]	; (b8cb0 <_ZN9IPAddressC1EPKh+0x1c>)
   b8c98:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8c9a:	78cb      	ldrb	r3, [r1, #3]
   b8c9c:	9300      	str	r3, [sp, #0]
   b8c9e:	788b      	ldrb	r3, [r1, #2]
   b8ca0:	784a      	ldrb	r2, [r1, #1]
   b8ca2:	7809      	ldrb	r1, [r1, #0]
   b8ca4:	f7ff ffe8 	bl	b8c78 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8ca8:	b003      	add	sp, #12
   b8caa:	f85d fb04 	ldr.w	pc, [sp], #4
   b8cae:	bf00      	nop
   b8cb0:	000bc04c 	.word	0x000bc04c

000b8cb4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8cb4:	7441      	strb	r1, [r0, #17]
}
   b8cb6:	4770      	bx	lr

000b8cb8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8cb8:	4770      	bx	lr

000b8cba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8cba:	4770      	bx	lr

000b8cbc <_ZN9USBSerial4readEv>:
{
   b8cbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8cbe:	2100      	movs	r1, #0
   b8cc0:	7c00      	ldrb	r0, [r0, #16]
   b8cc2:	f7fd fa8d 	bl	b61e0 <HAL_USB_USART_Receive_Data>
}
   b8cc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8cca:	bd08      	pop	{r3, pc}

000b8ccc <_ZN9USBSerial4peekEv>:
{
   b8ccc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8cce:	2101      	movs	r1, #1
   b8cd0:	7c00      	ldrb	r0, [r0, #16]
   b8cd2:	f7fd fa85 	bl	b61e0 <HAL_USB_USART_Receive_Data>
}
   b8cd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8cda:	bd08      	pop	{r3, pc}

000b8cdc <_ZN9USBSerial17availableForWriteEv>:
{
   b8cdc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8cde:	7c00      	ldrb	r0, [r0, #16]
   b8ce0:	f7fd fa76 	bl	b61d0 <HAL_USB_USART_Available_Data_For_Write>
}
   b8ce4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8ce8:	bd08      	pop	{r3, pc}

000b8cea <_ZN9USBSerial9availableEv>:
{
   b8cea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8cec:	7c00      	ldrb	r0, [r0, #16]
   b8cee:	f7fd fa67 	bl	b61c0 <HAL_USB_USART_Available_Data>
}
   b8cf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8cf6:	bd08      	pop	{r3, pc}

000b8cf8 <_ZN9USBSerial5writeEh>:
{
   b8cf8:	b513      	push	{r0, r1, r4, lr}
   b8cfa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8cfc:	7c00      	ldrb	r0, [r0, #16]
{
   b8cfe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8d00:	f7fd fa66 	bl	b61d0 <HAL_USB_USART_Available_Data_For_Write>
   b8d04:	2800      	cmp	r0, #0
   b8d06:	9901      	ldr	r1, [sp, #4]
   b8d08:	dc01      	bgt.n	b8d0e <_ZN9USBSerial5writeEh+0x16>
   b8d0a:	7c60      	ldrb	r0, [r4, #17]
   b8d0c:	b120      	cbz	r0, b8d18 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8d0e:	7c20      	ldrb	r0, [r4, #16]
   b8d10:	f7fd fa6e 	bl	b61f0 <HAL_USB_USART_Send_Data>
   b8d14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8d18:	b002      	add	sp, #8
   b8d1a:	bd10      	pop	{r4, pc}

000b8d1c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8d1c:	7c00      	ldrb	r0, [r0, #16]
   b8d1e:	f7fd ba6f 	b.w	b6200 <HAL_USB_USART_Flush_Data>

000b8d22 <_ZN9USBSerialD0Ev>:
   b8d22:	b510      	push	{r4, lr}
   b8d24:	2114      	movs	r1, #20
   b8d26:	4604      	mov	r4, r0
   b8d28:	f7fb feab 	bl	b4a82 <_ZdlPvj>
   b8d2c:	4620      	mov	r0, r4
   b8d2e:	bd10      	pop	{r4, pc}

000b8d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8d30:	b510      	push	{r4, lr}
   b8d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d36:	4604      	mov	r4, r0
   b8d38:	4608      	mov	r0, r1
   b8d3a:	2100      	movs	r1, #0
   b8d3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8d40:	4b04      	ldr	r3, [pc, #16]	; (b8d54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8d42:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8d44:	2301      	movs	r3, #1
  _serial = serial;
   b8d46:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8d48:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8d4a:	4611      	mov	r1, r2
   b8d4c:	f7fd fa30 	bl	b61b0 <HAL_USB_USART_Init>
}
   b8d50:	4620      	mov	r0, r4
   b8d52:	bd10      	pop	{r4, pc}
   b8d54:	000bc060 	.word	0x000bc060

000b8d58 <_Z19acquireSerialBufferv>:
{
   b8d58:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8d5a:	2214      	movs	r2, #20
{
   b8d5c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8d5e:	2100      	movs	r1, #0
   b8d60:	f000 fccf 	bl	b9702 <memset>
}
   b8d64:	4620      	mov	r0, r4
   b8d66:	bd10      	pop	{r4, pc}

000b8d68 <_Z16_fetch_usbserialv>:
{
   b8d68:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8d6a:	4c0f      	ldr	r4, [pc, #60]	; (b8da8 <_Z16_fetch_usbserialv+0x40>)
{
   b8d6c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8d6e:	a803      	add	r0, sp, #12
   b8d70:	f7ff fff2 	bl	b8d58 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8d74:	7821      	ldrb	r1, [r4, #0]
   b8d76:	f3bf 8f5b 	dmb	ish
   b8d7a:	f011 0101 	ands.w	r1, r1, #1
   b8d7e:	d10f      	bne.n	b8da0 <_Z16_fetch_usbserialv+0x38>
   b8d80:	4620      	mov	r0, r4
   b8d82:	9101      	str	r1, [sp, #4]
   b8d84:	f7fb fe7f 	bl	b4a86 <__cxa_guard_acquire>
   b8d88:	9901      	ldr	r1, [sp, #4]
   b8d8a:	b148      	cbz	r0, b8da0 <_Z16_fetch_usbserialv+0x38>
   b8d8c:	aa03      	add	r2, sp, #12
   b8d8e:	4807      	ldr	r0, [pc, #28]	; (b8dac <_Z16_fetch_usbserialv+0x44>)
   b8d90:	f7ff ffce 	bl	b8d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8d94:	4620      	mov	r0, r4
   b8d96:	f7fb fe7b 	bl	b4a90 <__cxa_guard_release>
   b8d9a:	4805      	ldr	r0, [pc, #20]	; (b8db0 <_Z16_fetch_usbserialv+0x48>)
   b8d9c:	f000 fc6c 	bl	b9678 <atexit>
	return _usbserial;
}
   b8da0:	4802      	ldr	r0, [pc, #8]	; (b8dac <_Z16_fetch_usbserialv+0x44>)
   b8da2:	b008      	add	sp, #32
   b8da4:	bd10      	pop	{r4, pc}
   b8da6:	bf00      	nop
   b8da8:	2003e6f8 	.word	0x2003e6f8
   b8dac:	2003e6fc 	.word	0x2003e6fc
   b8db0:	000b8cb9 	.word	0x000b8cb9

000b8db4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8db4:	4700      	bx	r0
	...

000b8db8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8db8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b8dbc:	2400      	movs	r4, #0
{
   b8dbe:	461d      	mov	r5, r3
   b8dc0:	460f      	mov	r7, r1
   b8dc2:	4690      	mov	r8, r2
   b8dc4:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b8dc6:	f7fd f809 	bl	b5ddc <hal_interrupt_detach>
  if (priority >= 0) {
   b8dca:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8dcc:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b8dd0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8dd4:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b8dd8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8ddc:	bfa2      	ittt	ge
   b8dde:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b8de2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b8de6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8de8:	4907      	ldr	r1, [pc, #28]	; (b8e08 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8dea:	9400      	str	r4, [sp, #0]
   b8dec:	4643      	mov	r3, r8
   b8dee:	463a      	mov	r2, r7
   b8df0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8df2:	bfa8      	it	ge
   b8df4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8df8:	f7fc ffe8 	bl	b5dcc <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b8dfc:	fab0 f080 	clz	r0, r0
   b8e00:	0940      	lsrs	r0, r0, #5
   b8e02:	b004      	add	sp, #16
   b8e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8e08:	000b8db5 	.word	0x000b8db5

000b8e0c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8e0c:	4770      	bx	lr

000b8e0e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8e0e:	7441      	strb	r1, [r0, #17]
}
   b8e10:	4770      	bx	lr

000b8e12 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8e12:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8e14:	7c00      	ldrb	r0, [r0, #16]
   b8e16:	f7fd f943 	bl	b60a0 <hal_usart_available_data_for_write>
}
   b8e1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8e1e:	bd08      	pop	{r3, pc}

000b8e20 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8e20:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8e22:	7c00      	ldrb	r0, [r0, #16]
   b8e24:	f7fd f914 	bl	b6050 <hal_usart_available>
}
   b8e28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8e2c:	bd08      	pop	{r3, pc}

000b8e2e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8e2e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8e30:	7c00      	ldrb	r0, [r0, #16]
   b8e32:	f7fd f91d 	bl	b6070 <hal_usart_peek>
}
   b8e36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8e3a:	bd08      	pop	{r3, pc}

000b8e3c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8e3c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8e3e:	7c00      	ldrb	r0, [r0, #16]
   b8e40:	f7fd f90e 	bl	b6060 <hal_usart_read>
}
   b8e44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8e48:	bd08      	pop	{r3, pc}

000b8e4a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8e4a:	7c00      	ldrb	r0, [r0, #16]
   b8e4c:	f7fd b918 	b.w	b6080 <hal_usart_flush>

000b8e50 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8e52:	7c45      	ldrb	r5, [r0, #17]
{
   b8e54:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8e56:	b12d      	cbz	r5, b8e64 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8e58:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8e5a:	b003      	add	sp, #12
   b8e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8e60:	f7fd b8ee 	b.w	b6040 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8e64:	7c00      	ldrb	r0, [r0, #16]
   b8e66:	9101      	str	r1, [sp, #4]
   b8e68:	f7fd f91a 	bl	b60a0 <hal_usart_available_data_for_write>
   b8e6c:	2800      	cmp	r0, #0
   b8e6e:	9901      	ldr	r1, [sp, #4]
   b8e70:	dcf2      	bgt.n	b8e58 <_ZN11USARTSerial5writeEh+0x8>
}
   b8e72:	4628      	mov	r0, r5
   b8e74:	b003      	add	sp, #12
   b8e76:	bd30      	pop	{r4, r5, pc}

000b8e78 <_ZN11USARTSerialD0Ev>:
   b8e78:	b510      	push	{r4, lr}
   b8e7a:	2114      	movs	r1, #20
   b8e7c:	4604      	mov	r4, r0
   b8e7e:	f7fb fe00 	bl	b4a82 <_ZdlPvj>
   b8e82:	4620      	mov	r0, r4
   b8e84:	bd10      	pop	{r4, pc}
	...

000b8e88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8e88:	b510      	push	{r4, lr}
   b8e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8e8e:	4604      	mov	r4, r0
   b8e90:	4608      	mov	r0, r1
   b8e92:	4611      	mov	r1, r2
   b8e94:	2200      	movs	r2, #0
   b8e96:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8e9a:	4b04      	ldr	r3, [pc, #16]	; (b8eac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8e9c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8e9e:	2301      	movs	r3, #1
  _serial = serial;
   b8ea0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8ea2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8ea4:	f7fd f904 	bl	b60b0 <hal_usart_init_ex>
}
   b8ea8:	4620      	mov	r0, r4
   b8eaa:	bd10      	pop	{r4, pc}
   b8eac:	000bc090 	.word	0x000bc090

000b8eb0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8eb0:	b510      	push	{r4, lr}
      if (_M_empty())
   b8eb2:	6883      	ldr	r3, [r0, #8]
   b8eb4:	4604      	mov	r4, r0
   b8eb6:	b90b      	cbnz	r3, b8ebc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8eb8:	f000 fac8 	bl	b944c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8ebc:	68c3      	ldr	r3, [r0, #12]
   b8ebe:	4798      	blx	r3
      if (_M_manager)
   b8ec0:	68a3      	ldr	r3, [r4, #8]
   b8ec2:	b11b      	cbz	r3, b8ecc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8ec4:	2203      	movs	r2, #3
   b8ec6:	4621      	mov	r1, r4
   b8ec8:	4620      	mov	r0, r4
   b8eca:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8ecc:	4620      	mov	r0, r4
   b8ece:	2110      	movs	r1, #16
}
   b8ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b8ed4:	f7fb bdd5 	b.w	b4a82 <_ZdlPvj>

000b8ed8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8ed8:	4770      	bx	lr

000b8eda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8edc:	4606      	mov	r6, r0
   b8ede:	4615      	mov	r5, r2
   b8ee0:	460c      	mov	r4, r1
   b8ee2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8ee4:	42bc      	cmp	r4, r7
   b8ee6:	d006      	beq.n	b8ef6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8ee8:	6833      	ldr	r3, [r6, #0]
   b8eea:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8eee:	689b      	ldr	r3, [r3, #8]
   b8ef0:	4630      	mov	r0, r6
   b8ef2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8ef4:	e7f6      	b.n	b8ee4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8ef6:	4628      	mov	r0, r5
   b8ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8efa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8efa:	7c00      	ldrb	r0, [r0, #16]
   b8efc:	2200      	movs	r2, #0
   b8efe:	f7fd b8df 	b.w	b60c0 <hal_i2c_write>

000b8f02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8f02:	7c00      	ldrb	r0, [r0, #16]
   b8f04:	2100      	movs	r1, #0
   b8f06:	f7fd b8e3 	b.w	b60d0 <hal_i2c_available>

000b8f0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8f0a:	7c00      	ldrb	r0, [r0, #16]
   b8f0c:	2100      	movs	r1, #0
   b8f0e:	f7fd b8e7 	b.w	b60e0 <hal_i2c_read>

000b8f12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8f12:	7c00      	ldrb	r0, [r0, #16]
   b8f14:	2100      	movs	r1, #0
   b8f16:	f7fd b8eb 	b.w	b60f0 <hal_i2c_peek>

000b8f1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8f1a:	7c00      	ldrb	r0, [r0, #16]
   b8f1c:	2100      	movs	r1, #0
   b8f1e:	f7fd b8ef 	b.w	b6100 <hal_i2c_flush>

000b8f22 <_ZN7TwoWireD0Ev>:
   b8f22:	b510      	push	{r4, lr}
   b8f24:	2114      	movs	r1, #20
   b8f26:	4604      	mov	r4, r0
   b8f28:	f7fb fdab 	bl	b4a82 <_ZdlPvj>
   b8f2c:	4620      	mov	r0, r4
   b8f2e:	bd10      	pop	{r4, pc}

000b8f30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8f30:	b510      	push	{r4, lr}
   b8f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8f36:	4604      	mov	r4, r0
   b8f38:	4608      	mov	r0, r1
   b8f3a:	2100      	movs	r1, #0
   b8f3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8f40:	4b03      	ldr	r3, [pc, #12]	; (b8f50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8f42:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8f44:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8f46:	4611      	mov	r1, r2
   b8f48:	f7fd f8ea 	bl	b6120 <hal_i2c_init>
}
   b8f4c:	4620      	mov	r0, r4
   b8f4e:	bd10      	pop	{r4, pc}
   b8f50:	000bc0c0 	.word	0x000bc0c0

000b8f54 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   b8f54:	4770      	bx	lr

000b8f56 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   b8f56:	2001      	movs	r0, #1
   b8f58:	4770      	bx	lr

000b8f5a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8f5a:	2200      	movs	r2, #0
   b8f5c:	6840      	ldr	r0, [r0, #4]
   b8f5e:	4611      	mov	r1, r2
   b8f60:	f7fd b9d2 	b.w	b6308 <network_ready>

000b8f64 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   b8f64:	b510      	push	{r4, lr}
   b8f66:	2124      	movs	r1, #36	; 0x24
   b8f68:	4604      	mov	r4, r0
   b8f6a:	f7fb fd8a 	bl	b4a82 <_ZdlPvj>
   b8f6e:	4620      	mov	r0, r4
   b8f70:	bd10      	pop	{r4, pc}

000b8f72 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8f72:	2200      	movs	r2, #0
   b8f74:	6840      	ldr	r0, [r0, #4]
   b8f76:	4611      	mov	r1, r2
   b8f78:	f7fd b9e6 	b.w	b6348 <network_listening>

000b8f7c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8f7c:	2200      	movs	r2, #0
   b8f7e:	6840      	ldr	r0, [r0, #4]
   b8f80:	4611      	mov	r1, r2
   b8f82:	f7fd b9f1 	b.w	b6368 <network_get_listen_timeout>

000b8f86 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8f86:	6840      	ldr	r0, [r0, #4]
   b8f88:	2200      	movs	r2, #0
   b8f8a:	f7fd b9e5 	b.w	b6358 <network_set_listen_timeout>

000b8f8e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8f8e:	6840      	ldr	r0, [r0, #4]
   b8f90:	2200      	movs	r2, #0
   b8f92:	f081 0101 	eor.w	r1, r1, #1
   b8f96:	f7fd b9cf 	b.w	b6338 <network_listen>

000b8f9a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8f9a:	2300      	movs	r3, #0
   b8f9c:	6840      	ldr	r0, [r0, #4]
   b8f9e:	461a      	mov	r2, r3
   b8fa0:	4619      	mov	r1, r3
   b8fa2:	f7fd b9c1 	b.w	b6328 <network_off>

000b8fa6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8fa6:	2300      	movs	r3, #0
   b8fa8:	6840      	ldr	r0, [r0, #4]
   b8faa:	461a      	mov	r2, r3
   b8fac:	4619      	mov	r1, r3
   b8fae:	f7fd b9b3 	b.w	b6318 <network_on>

000b8fb2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8fb2:	2200      	movs	r2, #0
   b8fb4:	6840      	ldr	r0, [r0, #4]
   b8fb6:	4611      	mov	r1, r2
   b8fb8:	f7fd b996 	b.w	b62e8 <network_connecting>

000b8fbc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8fbc:	6840      	ldr	r0, [r0, #4]
   b8fbe:	2200      	movs	r2, #0
   b8fc0:	2102      	movs	r1, #2
   b8fc2:	f7fd b999 	b.w	b62f8 <network_disconnect>

000b8fc6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8fc6:	2300      	movs	r3, #0
   b8fc8:	6840      	ldr	r0, [r0, #4]
   b8fca:	461a      	mov	r2, r3
   b8fcc:	f7fd b984 	b.w	b62d8 <network_connect>

000b8fd0 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   b8fd0:	8983      	ldrh	r3, [r0, #12]
   b8fd2:	b17b      	cbz	r3, b8ff4 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   b8fd4:	6943      	ldr	r3, [r0, #20]
   b8fd6:	2b00      	cmp	r3, #0
   b8fd8:	db0c      	blt.n	b8ff4 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   b8fda:	ee07 3a90 	vmov	s15, r3
   b8fde:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8ffc <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   b8fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8fe6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8fea:	eddf 7a05 	vldr	s15, [pc, #20]	; b9000 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   b8fee:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8ff2:	4770      	bx	lr
    }
    return -1.0f;
   b8ff4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8ff8:	4770      	bx	lr
   b8ffa:	bf00      	nop
   b8ffc:	477fff00 	.word	0x477fff00
   b9000:	42c80000 	.word	0x42c80000

000b9004 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   b9004:	8983      	ldrh	r3, [r0, #12]
   b9006:	b163      	cbz	r3, b9022 <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   b9008:	6903      	ldr	r3, [r0, #16]
   b900a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b900e:	d008      	beq.n	b9022 <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   b9010:	ee07 3a90 	vmov	s15, r3
   b9014:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9028 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   b9018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b901c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9020:	4770      	bx	lr
    }
    return 0.0f;
   b9022:	ed9f 0a02 	vldr	s0, [pc, #8]	; b902c <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   b9026:	4770      	bx	lr
   b9028:	42c80000 	.word	0x42c80000
   b902c:	00000000 	.word	0x00000000

000b9030 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   b9030:	8983      	ldrh	r3, [r0, #12]
   b9032:	b17b      	cbz	r3, b9054 <_ZNK10WiFiSignal10getQualityEv+0x24>
   b9034:	6a03      	ldr	r3, [r0, #32]
   b9036:	2b00      	cmp	r3, #0
   b9038:	db0c      	blt.n	b9054 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   b903a:	ee07 3a90 	vmov	s15, r3
   b903e:	ed9f 7a07 	vldr	s14, [pc, #28]	; b905c <_ZNK10WiFiSignal10getQualityEv+0x2c>
   b9042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9046:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b904a:	eddf 7a05 	vldr	s15, [pc, #20]	; b9060 <_ZNK10WiFiSignal10getQualityEv+0x30>
   b904e:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9052:	4770      	bx	lr
    }
    return -1.0f;
   b9054:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9058:	4770      	bx	lr
   b905a:	bf00      	nop
   b905c:	477fff00 	.word	0x477fff00
   b9060:	42c80000 	.word	0x42c80000

000b9064 <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   b9064:	8983      	ldrh	r3, [r0, #12]
   b9066:	b163      	cbz	r3, b9082 <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   b9068:	6983      	ldr	r3, [r0, #24]
   b906a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b906e:	d008      	beq.n	b9082 <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   b9070:	ee07 3a90 	vmov	s15, r3
   b9074:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9088 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   b9078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b907c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9080:	4770      	bx	lr
    }
    return 0.0f;
   b9082:	ed9f 0a02 	vldr	s0, [pc, #8]	; b908c <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   b9086:	4770      	bx	lr
   b9088:	42c80000 	.word	0x42c80000
   b908c:	00000000 	.word	0x00000000

000b9090 <_ZNK10WiFiSignalcvaEv>:
}
   b9090:	f990 0004 	ldrsb.w	r0, [r0, #4]
   b9094:	4770      	bx	lr

000b9096 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b9096:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   b9098:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b909a:	4606      	mov	r6, r0
    inf_ = inf;
   b909c:	f100 050c 	add.w	r5, r0, #12
   b90a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b90a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b90a4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b90a8:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   b90ac:	6933      	ldr	r3, [r6, #16]
   b90ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b90b2:	bf0e      	itee	eq
   b90b4:	2302      	moveq	r3, #2
   b90b6:	2264      	movne	r2, #100	; 0x64
   b90b8:	fb93 f3f2 	sdivne	r3, r3, r2
   b90bc:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b90be:	69b3      	ldr	r3, [r6, #24]
   b90c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b90c4:	bf0c      	ite	eq
   b90c6:	2300      	moveq	r3, #0
   b90c8:	2264      	movne	r2, #100	; 0x64
}
   b90ca:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b90ce:	bf18      	it	ne
   b90d0:	fb93 f3f2 	sdivne	r3, r3, r2
   b90d4:	60b3      	str	r3, [r6, #8]
}
   b90d6:	bd70      	pop	{r4, r5, r6, pc}

000b90d8 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   b90d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   b90dc:	4b16      	ldr	r3, [pc, #88]	; (b9138 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   b90de:	6003      	str	r3, [r0, #0]
   b90e0:	2500      	movs	r5, #0
   b90e2:	460f      	mov	r7, r1
   b90e4:	f04f 0802 	mov.w	r8, #2
   b90e8:	2618      	movs	r6, #24
   b90ea:	e9c0 8501 	strd	r8, r5, [r0, #4]
   b90ee:	b086      	sub	sp, #24
   b90f0:	4632      	mov	r2, r6
   b90f2:	4629      	mov	r1, r5
   b90f4:	4604      	mov	r4, r0
   b90f6:	300c      	adds	r0, #12
   b90f8:	f000 fb03 	bl	b9702 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b90fc:	6878      	ldr	r0, [r7, #4]
   b90fe:	462a      	mov	r2, r5
   b9100:	4629      	mov	r1, r5
   b9102:	f7fd f901 	bl	b6308 <network_ready>
   b9106:	b180      	cbz	r0, b912a <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
   b9108:	4632      	mov	r2, r6
   b910a:	4629      	mov	r1, r5
   b910c:	4668      	mov	r0, sp
   b910e:	f000 faf8 	bl	b9702 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b9112:	462a      	mov	r2, r5
   b9114:	4669      	mov	r1, sp
   b9116:	4628      	mov	r0, r5
        info.size = sizeof(info);
   b9118:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b911c:	f7fd f878 	bl	b6210 <wlan_connected_info>
        if (r == 0) {
   b9120:	b938      	cbnz	r0, b9132 <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   b9122:	4669      	mov	r1, sp
   b9124:	4620      	mov	r0, r4
   b9126:	f7ff ffb6 	bl	b9096 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
   b912a:	4620      	mov	r0, r4
   b912c:	b006      	add	sp, #24
   b912e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   b9132:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   b9136:	e7f8      	b.n	b912a <_ZN5spark9WiFiClass4RSSIEv+0x52>
   b9138:	000bc124 	.word	0x000bc124

000b913c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b913c:	4b02      	ldr	r3, [pc, #8]	; (b9148 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b913e:	2204      	movs	r2, #4
   b9140:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9142:	4a02      	ldr	r2, [pc, #8]	; (b914c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9144:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9146:	4770      	bx	lr
   b9148:	2003e710 	.word	0x2003e710
   b914c:	000bc0e8 	.word	0x000bc0e8

000b9150 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9150:	2300      	movs	r3, #0
   b9152:	6840      	ldr	r0, [r0, #4]
   b9154:	461a      	mov	r2, r3
   b9156:	f7fd b8bf 	b.w	b62d8 <network_connect>

000b915a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b915a:	6840      	ldr	r0, [r0, #4]
   b915c:	2200      	movs	r2, #0
   b915e:	2102      	movs	r1, #2
   b9160:	f7fd b8ca 	b.w	b62f8 <network_disconnect>

000b9164 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9164:	2200      	movs	r2, #0
   b9166:	6840      	ldr	r0, [r0, #4]
   b9168:	4611      	mov	r1, r2
   b916a:	f7fd b8bd 	b.w	b62e8 <network_connecting>

000b916e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b916e:	2200      	movs	r2, #0
   b9170:	6840      	ldr	r0, [r0, #4]
   b9172:	4611      	mov	r1, r2
   b9174:	f7fd b8c8 	b.w	b6308 <network_ready>

000b9178 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9178:	2300      	movs	r3, #0
   b917a:	6840      	ldr	r0, [r0, #4]
   b917c:	461a      	mov	r2, r3
   b917e:	4619      	mov	r1, r3
   b9180:	f7fd b8ca 	b.w	b6318 <network_on>

000b9184 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9184:	2300      	movs	r3, #0
   b9186:	6840      	ldr	r0, [r0, #4]
   b9188:	461a      	mov	r2, r3
   b918a:	4619      	mov	r1, r3
   b918c:	f7fd b8cc 	b.w	b6328 <network_off>

000b9190 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9190:	6840      	ldr	r0, [r0, #4]
   b9192:	2100      	movs	r1, #0
   b9194:	f7fd b8f0 	b.w	b6378 <network_is_on>

000b9198 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9198:	6840      	ldr	r0, [r0, #4]
   b919a:	2100      	movs	r1, #0
   b919c:	f7fd b8f4 	b.w	b6388 <network_is_off>

000b91a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b91a0:	6840      	ldr	r0, [r0, #4]
   b91a2:	2200      	movs	r2, #0
   b91a4:	f081 0101 	eor.w	r1, r1, #1
   b91a8:	f7fd b8c6 	b.w	b6338 <network_listen>

000b91ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b91ac:	6840      	ldr	r0, [r0, #4]
   b91ae:	2200      	movs	r2, #0
   b91b0:	f7fd b8d2 	b.w	b6358 <network_set_listen_timeout>

000b91b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b91b4:	2200      	movs	r2, #0
   b91b6:	6840      	ldr	r0, [r0, #4]
   b91b8:	4611      	mov	r1, r2
   b91ba:	f7fd b8d5 	b.w	b6368 <network_get_listen_timeout>

000b91be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b91be:	2200      	movs	r2, #0
   b91c0:	6840      	ldr	r0, [r0, #4]
   b91c2:	4611      	mov	r1, r2
   b91c4:	f7fd b8c0 	b.w	b6348 <network_listening>

000b91c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b91c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b91cc:	b095      	sub	sp, #84	; 0x54
   b91ce:	4614      	mov	r4, r2
   b91d0:	460d      	mov	r5, r1
   b91d2:	4607      	mov	r7, r0
    IPAddress addr;
   b91d4:	f7ff fd12 	bl	b8bfc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b91d8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b91da:	221c      	movs	r2, #28
   b91dc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b91de:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b91e0:	f000 fa8f 	bl	b9702 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b91e4:	2340      	movs	r3, #64	; 0x40
   b91e6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b91e8:	4620      	mov	r0, r4
   b91ea:	466b      	mov	r3, sp
   b91ec:	aa0c      	add	r2, sp, #48	; 0x30
   b91ee:	2100      	movs	r1, #0
   b91f0:	f7fc fddc 	bl	b5dac <netdb_getaddrinfo>
    if (!r) {
   b91f4:	4604      	mov	r4, r0
   b91f6:	2800      	cmp	r0, #0
   b91f8:	d14b      	bne.n	b9292 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b91fa:	4602      	mov	r2, r0
   b91fc:	2101      	movs	r1, #1
   b91fe:	6868      	ldr	r0, [r5, #4]
   b9200:	f7fd f882 	bl	b6308 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9204:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9206:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9208:	4622      	mov	r2, r4
   b920a:	6868      	ldr	r0, [r5, #4]
   b920c:	f7fd f87c 	bl	b6308 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9210:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9212:	4681      	mov	r9, r0
        bool ok = false;
   b9214:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9216:	2e00      	cmp	r6, #0
   b9218:	d03b      	beq.n	b9292 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b921a:	2900      	cmp	r1, #0
   b921c:	d139      	bne.n	b9292 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b921e:	6873      	ldr	r3, [r6, #4]
   b9220:	2b02      	cmp	r3, #2
   b9222:	d003      	beq.n	b922c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9224:	2b0a      	cmp	r3, #10
   b9226:	d011      	beq.n	b924c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9228:	69f6      	ldr	r6, [r6, #28]
   b922a:	e7f4      	b.n	b9216 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b922c:	f1b8 0f00 	cmp.w	r8, #0
   b9230:	d0fa      	beq.n	b9228 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9232:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9234:	a806      	add	r0, sp, #24
   b9236:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9238:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b923a:	f7ff fd2b 	bl	b8c94 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b923e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9240:	1d3c      	adds	r4, r7, #4
   b9242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9244:	682b      	ldr	r3, [r5, #0]
   b9246:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9248:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b924a:	e7ed      	b.n	b9228 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b924c:	f1b9 0f00 	cmp.w	r9, #0
   b9250:	d0ea      	beq.n	b9228 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9252:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9254:	2210      	movs	r2, #16
   b9256:	a801      	add	r0, sp, #4
   b9258:	f000 fa53 	bl	b9702 <memset>
                    a.v = 6;
   b925c:	2306      	movs	r3, #6
   b925e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9262:	ad01      	add	r5, sp, #4
   b9264:	f104 0308 	add.w	r3, r4, #8
   b9268:	3418      	adds	r4, #24
   b926a:	6818      	ldr	r0, [r3, #0]
   b926c:	6859      	ldr	r1, [r3, #4]
   b926e:	462a      	mov	r2, r5
   b9270:	c203      	stmia	r2!, {r0, r1}
   b9272:	3308      	adds	r3, #8
   b9274:	42a3      	cmp	r3, r4
   b9276:	4615      	mov	r5, r2
   b9278:	d1f7      	bne.n	b926a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b927a:	a901      	add	r1, sp, #4
   b927c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b927e:	ad07      	add	r5, sp, #28
   b9280:	f7ff fcca 	bl	b8c18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9286:	1d3c      	adds	r4, r7, #4
   b9288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b928a:	682b      	ldr	r3, [r5, #0]
   b928c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b928e:	4649      	mov	r1, r9
   b9290:	e7ca      	b.n	b9228 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9292:	9800      	ldr	r0, [sp, #0]
   b9294:	f7fc fd82 	bl	b5d9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9298:	4638      	mov	r0, r7
   b929a:	b015      	add	sp, #84	; 0x54
   b929c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b92a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b92a0:	4b02      	ldr	r3, [pc, #8]	; (b92ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b92a2:	4a03      	ldr	r2, [pc, #12]	; (b92b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b92a4:	601a      	str	r2, [r3, #0]
   b92a6:	2200      	movs	r2, #0
   b92a8:	605a      	str	r2, [r3, #4]

} // spark
   b92aa:	4770      	bx	lr
   b92ac:	2003e718 	.word	0x2003e718
   b92b0:	000bc148 	.word	0x000bc148

000b92b4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b92b4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b92b6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b92b8:	d902      	bls.n	b92c0 <pinAvailable+0xc>
    return false;
   b92ba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b92bc:	b002      	add	sp, #8
   b92be:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b92c0:	f1a0 030b 	sub.w	r3, r0, #11
   b92c4:	2b02      	cmp	r3, #2
   b92c6:	d81a      	bhi.n	b92fe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b92c8:	4c17      	ldr	r4, [pc, #92]	; (b9328 <pinAvailable+0x74>)
   b92ca:	7821      	ldrb	r1, [r4, #0]
   b92cc:	f3bf 8f5b 	dmb	ish
   b92d0:	f011 0101 	ands.w	r1, r1, #1
   b92d4:	d10b      	bne.n	b92ee <pinAvailable+0x3a>
   b92d6:	4620      	mov	r0, r4
   b92d8:	9101      	str	r1, [sp, #4]
   b92da:	f7fb fbd4 	bl	b4a86 <__cxa_guard_acquire>
   b92de:	9901      	ldr	r1, [sp, #4]
   b92e0:	b128      	cbz	r0, b92ee <pinAvailable+0x3a>
   b92e2:	4812      	ldr	r0, [pc, #72]	; (b932c <pinAvailable+0x78>)
   b92e4:	f7fd f91e 	bl	b6524 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b92e8:	4620      	mov	r0, r4
   b92ea:	f7fb fbd1 	bl	b4a90 <__cxa_guard_release>
   b92ee:	4b0f      	ldr	r3, [pc, #60]	; (b932c <pinAvailable+0x78>)
   b92f0:	7818      	ldrb	r0, [r3, #0]
   b92f2:	f7fc ff55 	bl	b61a0 <hal_spi_is_enabled>
   b92f6:	2800      	cmp	r0, #0
   b92f8:	d1df      	bne.n	b92ba <pinAvailable+0x6>
  return true; // 'pin' is available
   b92fa:	2001      	movs	r0, #1
   b92fc:	e7de      	b.n	b92bc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b92fe:	2801      	cmp	r0, #1
   b9300:	d809      	bhi.n	b9316 <pinAvailable+0x62>
   b9302:	f000 f87d 	bl	b9400 <_Z19__fetch_global_Wirev>
   b9306:	2100      	movs	r1, #0
   b9308:	7c00      	ldrb	r0, [r0, #16]
   b930a:	f7fc ff01 	bl	b6110 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b930e:	f080 0001 	eor.w	r0, r0, #1
   b9312:	b2c0      	uxtb	r0, r0
   b9314:	e7d2      	b.n	b92bc <pinAvailable+0x8>
   b9316:	3809      	subs	r0, #9
   b9318:	2801      	cmp	r0, #1
   b931a:	d8ee      	bhi.n	b92fa <pinAvailable+0x46>
   b931c:	f000 f834 	bl	b9388 <_Z22__fetch_global_Serial1v>
   b9320:	7c00      	ldrb	r0, [r0, #16]
   b9322:	f7fc feb5 	bl	b6090 <hal_usart_is_enabled>
   b9326:	e7f2      	b.n	b930e <pinAvailable+0x5a>
   b9328:	2003e720 	.word	0x2003e720
   b932c:	2003e724 	.word	0x2003e724

000b9330 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9330:	2823      	cmp	r0, #35	; 0x23
{
   b9332:	b538      	push	{r3, r4, r5, lr}
   b9334:	4604      	mov	r4, r0
   b9336:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9338:	d80a      	bhi.n	b9350 <pinMode+0x20>
   b933a:	29ff      	cmp	r1, #255	; 0xff
   b933c:	d008      	beq.n	b9350 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b933e:	f7ff ffb9 	bl	b92b4 <pinAvailable>
   b9342:	b128      	cbz	r0, b9350 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b9344:	4629      	mov	r1, r5
   b9346:	4620      	mov	r0, r4
}
   b9348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b934c:	f7fc bd36 	b.w	b5dbc <hal_gpio_mode>
}
   b9350:	bd38      	pop	{r3, r4, r5, pc}

000b9352 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9352:	4770      	bx	lr

000b9354 <_Z20acquireSerial1Bufferv>:
{
   b9354:	b538      	push	{r3, r4, r5, lr}
   b9356:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9358:	2514      	movs	r5, #20
   b935a:	462a      	mov	r2, r5
   b935c:	2100      	movs	r1, #0
   b935e:	f000 f9d0 	bl	b9702 <memset>
   b9362:	8025      	strh	r5, [r4, #0]
   b9364:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9366:	4907      	ldr	r1, [pc, #28]	; (b9384 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9368:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b936a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b936c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b936e:	f000 f86b 	bl	b9448 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9372:	4904      	ldr	r1, [pc, #16]	; (b9384 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9374:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9376:	4628      	mov	r0, r5
   b9378:	f000 f866 	bl	b9448 <_ZnajRKSt9nothrow_t>
    };
   b937c:	60e0      	str	r0, [r4, #12]
}
   b937e:	4620      	mov	r0, r4
   b9380:	bd38      	pop	{r3, r4, r5, pc}
   b9382:	bf00      	nop
   b9384:	000bc17c 	.word	0x000bc17c

000b9388 <_Z22__fetch_global_Serial1v>:
{
   b9388:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b938a:	4d0e      	ldr	r5, [pc, #56]	; (b93c4 <_Z22__fetch_global_Serial1v+0x3c>)
   b938c:	7829      	ldrb	r1, [r5, #0]
   b938e:	f3bf 8f5b 	dmb	ish
   b9392:	f011 0401 	ands.w	r4, r1, #1
{
   b9396:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9398:	d111      	bne.n	b93be <_Z22__fetch_global_Serial1v+0x36>
   b939a:	4628      	mov	r0, r5
   b939c:	f7fb fb73 	bl	b4a86 <__cxa_guard_acquire>
   b93a0:	b168      	cbz	r0, b93be <_Z22__fetch_global_Serial1v+0x36>
   b93a2:	a801      	add	r0, sp, #4
   b93a4:	f7ff ffd6 	bl	b9354 <_Z20acquireSerial1Bufferv>
   b93a8:	aa01      	add	r2, sp, #4
   b93aa:	4621      	mov	r1, r4
   b93ac:	4806      	ldr	r0, [pc, #24]	; (b93c8 <_Z22__fetch_global_Serial1v+0x40>)
   b93ae:	f7ff fd6b 	bl	b8e88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b93b2:	4628      	mov	r0, r5
   b93b4:	f7fb fb6c 	bl	b4a90 <__cxa_guard_release>
   b93b8:	4804      	ldr	r0, [pc, #16]	; (b93cc <_Z22__fetch_global_Serial1v+0x44>)
   b93ba:	f000 f95d 	bl	b9678 <atexit>
    return serial1;
}
   b93be:	4802      	ldr	r0, [pc, #8]	; (b93c8 <_Z22__fetch_global_Serial1v+0x40>)
   b93c0:	b007      	add	sp, #28
   b93c2:	bd30      	pop	{r4, r5, pc}
   b93c4:	2003e72c 	.word	0x2003e72c
   b93c8:	2003e730 	.word	0x2003e730
   b93cc:	000b9353 	.word	0x000b9353

000b93d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b93d0:	4770      	bx	lr
	...

000b93d4 <_Z17acquireWireBufferv>:
{
   b93d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b93d6:	2520      	movs	r5, #32
   b93d8:	2314      	movs	r3, #20
{
   b93da:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b93dc:	6003      	str	r3, [r0, #0]
   b93de:	6085      	str	r5, [r0, #8]
   b93e0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b93e2:	4906      	ldr	r1, [pc, #24]	; (b93fc <_Z17acquireWireBufferv+0x28>)
   b93e4:	4628      	mov	r0, r5
   b93e6:	f000 f82f 	bl	b9448 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b93ea:	4904      	ldr	r1, [pc, #16]	; (b93fc <_Z17acquireWireBufferv+0x28>)
	};
   b93ec:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b93ee:	4628      	mov	r0, r5
   b93f0:	f000 f82a 	bl	b9448 <_ZnajRKSt9nothrow_t>
	};
   b93f4:	60e0      	str	r0, [r4, #12]
}
   b93f6:	4620      	mov	r0, r4
   b93f8:	bd38      	pop	{r3, r4, r5, pc}
   b93fa:	bf00      	nop
   b93fc:	000bc17c 	.word	0x000bc17c

000b9400 <_Z19__fetch_global_Wirev>:
{
   b9400:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9402:	4d0e      	ldr	r5, [pc, #56]	; (b943c <_Z19__fetch_global_Wirev+0x3c>)
   b9404:	7829      	ldrb	r1, [r5, #0]
   b9406:	f3bf 8f5b 	dmb	ish
   b940a:	f011 0401 	ands.w	r4, r1, #1
{
   b940e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9410:	d111      	bne.n	b9436 <_Z19__fetch_global_Wirev+0x36>
   b9412:	4628      	mov	r0, r5
   b9414:	f7fb fb37 	bl	b4a86 <__cxa_guard_acquire>
   b9418:	b168      	cbz	r0, b9436 <_Z19__fetch_global_Wirev+0x36>
   b941a:	a801      	add	r0, sp, #4
   b941c:	f7ff ffda 	bl	b93d4 <_Z17acquireWireBufferv>
   b9420:	aa01      	add	r2, sp, #4
   b9422:	4621      	mov	r1, r4
   b9424:	4806      	ldr	r0, [pc, #24]	; (b9440 <_Z19__fetch_global_Wirev+0x40>)
   b9426:	f7ff fd83 	bl	b8f30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b942a:	4628      	mov	r0, r5
   b942c:	f7fb fb30 	bl	b4a90 <__cxa_guard_release>
   b9430:	4804      	ldr	r0, [pc, #16]	; (b9444 <_Z19__fetch_global_Wirev+0x44>)
   b9432:	f000 f921 	bl	b9678 <atexit>
	return wire;
}
   b9436:	4802      	ldr	r0, [pc, #8]	; (b9440 <_Z19__fetch_global_Wirev+0x40>)
   b9438:	b007      	add	sp, #28
   b943a:	bd30      	pop	{r4, r5, pc}
   b943c:	2003e748 	.word	0x2003e748
   b9440:	2003e74c 	.word	0x2003e74c
   b9444:	000b93d1 	.word	0x000b93d1

000b9448 <_ZnajRKSt9nothrow_t>:
   b9448:	f7fb bb19 	b.w	b4a7e <_Znaj>

000b944c <_ZSt25__throw_bad_function_callv>:
   b944c:	b508      	push	{r3, lr}
   b944e:	f7fc fffb 	bl	b6448 <abort>
	...

000b9454 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9454:	4901      	ldr	r1, [pc, #4]	; (b945c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9456:	f000 b8f9 	b.w	b964c <_ZNKSt9type_infoeqERKS_>
   b945a:	bf00      	nop
   b945c:	000bc198 	.word	0x000bc198

000b9460 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9460:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9462:	2400      	movs	r4, #0
   b9464:	2310      	movs	r3, #16
   b9466:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b946a:	6803      	ldr	r3, [r0, #0]
   b946c:	4615      	mov	r5, r2
   b946e:	699e      	ldr	r6, [r3, #24]
   b9470:	6812      	ldr	r2, [r2, #0]
   b9472:	466b      	mov	r3, sp
   b9474:	e9cd 4400 	strd	r4, r4, [sp]
   b9478:	47b0      	blx	r6
   b947a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b947e:	f003 0306 	and.w	r3, r3, #6
   b9482:	2b06      	cmp	r3, #6
   b9484:	bf03      	ittte	eq
   b9486:	9b00      	ldreq	r3, [sp, #0]
   b9488:	602b      	streq	r3, [r5, #0]
   b948a:	2001      	moveq	r0, #1
   b948c:	4620      	movne	r0, r4
   b948e:	b004      	add	sp, #16
   b9490:	bd70      	pop	{r4, r5, r6, pc}

000b9492 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9492:	9800      	ldr	r0, [sp, #0]
   b9494:	4290      	cmp	r0, r2
   b9496:	bf14      	ite	ne
   b9498:	2001      	movne	r0, #1
   b949a:	2006      	moveq	r0, #6
   b949c:	4770      	bx	lr
	...

000b94a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b94a0:	b510      	push	{r4, lr}
   b94a2:	4b03      	ldr	r3, [pc, #12]	; (b94b0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b94a4:	6003      	str	r3, [r0, #0]
   b94a6:	4604      	mov	r4, r0
   b94a8:	f000 f8cd 	bl	b9646 <_ZNSt9type_infoD1Ev>
   b94ac:	4620      	mov	r0, r4
   b94ae:	bd10      	pop	{r4, pc}
   b94b0:	000bc1d8 	.word	0x000bc1d8

000b94b4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b94b4:	b510      	push	{r4, lr}
   b94b6:	4604      	mov	r4, r0
   b94b8:	f7ff fff2 	bl	b94a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b94bc:	4620      	mov	r0, r4
   b94be:	2108      	movs	r1, #8
   b94c0:	f7fb fadf 	bl	b4a82 <_ZdlPvj>
   b94c4:	4620      	mov	r0, r4
   b94c6:	bd10      	pop	{r4, pc}

000b94c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b94c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b94cc:	461f      	mov	r7, r3
   b94ce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b94d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b94d6:	4598      	cmp	r8, r3
   b94d8:	4606      	mov	r6, r0
   b94da:	4615      	mov	r5, r2
   b94dc:	d107      	bne.n	b94ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b94de:	9907      	ldr	r1, [sp, #28]
   b94e0:	f000 f8b4 	bl	b964c <_ZNKSt9type_infoeqERKS_>
   b94e4:	b118      	cbz	r0, b94ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b94e6:	7165      	strb	r5, [r4, #5]
   b94e8:	2000      	movs	r0, #0
   b94ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b94ee:	4639      	mov	r1, r7
   b94f0:	4630      	mov	r0, r6
   b94f2:	f000 f8ab 	bl	b964c <_ZNKSt9type_infoeqERKS_>
   b94f6:	2800      	cmp	r0, #0
   b94f8:	d0f6      	beq.n	b94e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b94fa:	2301      	movs	r3, #1
   b94fc:	f8c4 8000 	str.w	r8, [r4]
   b9500:	7125      	strb	r5, [r4, #4]
   b9502:	71a3      	strb	r3, [r4, #6]
   b9504:	e7f0      	b.n	b94e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9506 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9506:	b538      	push	{r3, r4, r5, lr}
   b9508:	4615      	mov	r5, r2
   b950a:	461c      	mov	r4, r3
   b950c:	f000 f89e 	bl	b964c <_ZNKSt9type_infoeqERKS_>
   b9510:	b120      	cbz	r0, b951c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9512:	2308      	movs	r3, #8
   b9514:	60e3      	str	r3, [r4, #12]
   b9516:	2306      	movs	r3, #6
   b9518:	6025      	str	r5, [r4, #0]
   b951a:	7123      	strb	r3, [r4, #4]
   b951c:	bd38      	pop	{r3, r4, r5, pc}

000b951e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b951e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9520:	4605      	mov	r5, r0
   b9522:	460c      	mov	r4, r1
   b9524:	9201      	str	r2, [sp, #4]
   b9526:	461e      	mov	r6, r3
   b9528:	f000 f890 	bl	b964c <_ZNKSt9type_infoeqERKS_>
   b952c:	b950      	cbnz	r0, b9544 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b952e:	2e03      	cmp	r6, #3
   b9530:	d808      	bhi.n	b9544 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9532:	6823      	ldr	r3, [r4, #0]
   b9534:	9a01      	ldr	r2, [sp, #4]
   b9536:	695b      	ldr	r3, [r3, #20]
   b9538:	4629      	mov	r1, r5
   b953a:	4620      	mov	r0, r4
   b953c:	b002      	add	sp, #8
   b953e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9542:	4718      	bx	r3
   b9544:	b002      	add	sp, #8
   b9546:	bd70      	pop	{r4, r5, r6, pc}

000b9548 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9548:	b510      	push	{r4, lr}
   b954a:	4b03      	ldr	r3, [pc, #12]	; (b9558 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b954c:	6003      	str	r3, [r0, #0]
   b954e:	4604      	mov	r4, r0
   b9550:	f7ff ffa6 	bl	b94a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9554:	4620      	mov	r0, r4
   b9556:	bd10      	pop	{r4, pc}
   b9558:	000bc238 	.word	0x000bc238

000b955c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b955c:	b510      	push	{r4, lr}
   b955e:	4604      	mov	r4, r0
   b9560:	f7ff fff2 	bl	b9548 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9564:	4620      	mov	r0, r4
   b9566:	210c      	movs	r1, #12
   b9568:	f7fb fa8b 	bl	b4a82 <_ZdlPvj>
   b956c:	4620      	mov	r0, r4
   b956e:	bd10      	pop	{r4, pc}

000b9570 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9572:	9f08      	ldr	r7, [sp, #32]
   b9574:	4297      	cmp	r7, r2
   b9576:	4605      	mov	r5, r0
   b9578:	460e      	mov	r6, r1
   b957a:	4614      	mov	r4, r2
   b957c:	d00a      	beq.n	b9594 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b957e:	68a8      	ldr	r0, [r5, #8]
   b9580:	6802      	ldr	r2, [r0, #0]
   b9582:	9708      	str	r7, [sp, #32]
   b9584:	6a15      	ldr	r5, [r2, #32]
   b9586:	4631      	mov	r1, r6
   b9588:	4622      	mov	r2, r4
   b958a:	46ac      	mov	ip, r5
   b958c:	b003      	add	sp, #12
   b958e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9592:	4760      	bx	ip
   b9594:	4619      	mov	r1, r3
   b9596:	9301      	str	r3, [sp, #4]
   b9598:	f000 f858 	bl	b964c <_ZNKSt9type_infoeqERKS_>
   b959c:	9b01      	ldr	r3, [sp, #4]
   b959e:	2800      	cmp	r0, #0
   b95a0:	d0ed      	beq.n	b957e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b95a2:	2006      	movs	r0, #6
   b95a4:	b003      	add	sp, #12
   b95a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b95a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b95a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95ac:	460d      	mov	r5, r1
   b95ae:	4619      	mov	r1, r3
   b95b0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b95b4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b95b8:	4681      	mov	r9, r0
   b95ba:	4617      	mov	r7, r2
   b95bc:	4698      	mov	r8, r3
   b95be:	f000 f845 	bl	b964c <_ZNKSt9type_infoeqERKS_>
   b95c2:	b190      	cbz	r0, b95ea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b95c4:	2d00      	cmp	r5, #0
   b95c6:	6034      	str	r4, [r6, #0]
   b95c8:	7137      	strb	r7, [r6, #4]
   b95ca:	db09      	blt.n	b95e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b95cc:	1961      	adds	r1, r4, r5
   b95ce:	458a      	cmp	sl, r1
   b95d0:	bf0c      	ite	eq
   b95d2:	2106      	moveq	r1, #6
   b95d4:	2101      	movne	r1, #1
   b95d6:	71b1      	strb	r1, [r6, #6]
   b95d8:	2000      	movs	r0, #0
   b95da:	b001      	add	sp, #4
   b95dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b95e0:	3502      	adds	r5, #2
   b95e2:	d1f9      	bne.n	b95d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b95e4:	2301      	movs	r3, #1
   b95e6:	71b3      	strb	r3, [r6, #6]
   b95e8:	e7f6      	b.n	b95d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b95ea:	4554      	cmp	r4, sl
   b95ec:	d106      	bne.n	b95fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b95ee:	4659      	mov	r1, fp
   b95f0:	4648      	mov	r0, r9
   b95f2:	f000 f82b 	bl	b964c <_ZNKSt9type_infoeqERKS_>
   b95f6:	b108      	cbz	r0, b95fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b95f8:	7177      	strb	r7, [r6, #5]
   b95fa:	e7ed      	b.n	b95d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b95fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9600:	6803      	ldr	r3, [r0, #0]
   b9602:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9606:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b960a:	69dc      	ldr	r4, [r3, #28]
   b960c:	463a      	mov	r2, r7
   b960e:	4643      	mov	r3, r8
   b9610:	4629      	mov	r1, r5
   b9612:	46a4      	mov	ip, r4
   b9614:	b001      	add	sp, #4
   b9616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b961a:	4760      	bx	ip

000b961c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9620:	4607      	mov	r7, r0
   b9622:	460c      	mov	r4, r1
   b9624:	4615      	mov	r5, r2
   b9626:	461e      	mov	r6, r3
   b9628:	f7ff ff6d 	bl	b9506 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b962c:	b948      	cbnz	r0, b9642 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b962e:	68b8      	ldr	r0, [r7, #8]
   b9630:	6803      	ldr	r3, [r0, #0]
   b9632:	699f      	ldr	r7, [r3, #24]
   b9634:	462a      	mov	r2, r5
   b9636:	4633      	mov	r3, r6
   b9638:	4621      	mov	r1, r4
   b963a:	46bc      	mov	ip, r7
   b963c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9640:	4760      	bx	ip
   b9642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9646 <_ZNSt9type_infoD1Ev>:
   b9646:	4770      	bx	lr

000b9648 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9648:	2000      	movs	r0, #0
   b964a:	4770      	bx	lr

000b964c <_ZNKSt9type_infoeqERKS_>:
   b964c:	4281      	cmp	r1, r0
   b964e:	b508      	push	{r3, lr}
   b9650:	d00e      	beq.n	b9670 <_ZNKSt9type_infoeqERKS_+0x24>
   b9652:	6840      	ldr	r0, [r0, #4]
   b9654:	7803      	ldrb	r3, [r0, #0]
   b9656:	2b2a      	cmp	r3, #42	; 0x2a
   b9658:	d00c      	beq.n	b9674 <_ZNKSt9type_infoeqERKS_+0x28>
   b965a:	6849      	ldr	r1, [r1, #4]
   b965c:	780b      	ldrb	r3, [r1, #0]
   b965e:	2b2a      	cmp	r3, #42	; 0x2a
   b9660:	bf08      	it	eq
   b9662:	3101      	addeq	r1, #1
   b9664:	f7fb f9a4 	bl	b49b0 <strcmp>
   b9668:	fab0 f080 	clz	r0, r0
   b966c:	0940      	lsrs	r0, r0, #5
   b966e:	bd08      	pop	{r3, pc}
   b9670:	2001      	movs	r0, #1
   b9672:	e7fc      	b.n	b966e <_ZNKSt9type_infoeqERKS_+0x22>
   b9674:	2000      	movs	r0, #0
   b9676:	e7fa      	b.n	b966e <_ZNKSt9type_infoeqERKS_+0x22>

000b9678 <atexit>:
   b9678:	2300      	movs	r3, #0
   b967a:	4601      	mov	r1, r0
   b967c:	461a      	mov	r2, r3
   b967e:	4618      	mov	r0, r3
   b9680:	f000 bfe4 	b.w	ba64c <__register_exitproc>

000b9684 <atof>:
   b9684:	2100      	movs	r1, #0
   b9686:	f000 beed 	b.w	ba464 <strtod>

000b968a <atoi>:
   b968a:	220a      	movs	r2, #10
   b968c:	2100      	movs	r1, #0
   b968e:	f000 bfd3 	b.w	ba638 <strtol>

000b9692 <memcmp>:
   b9692:	b510      	push	{r4, lr}
   b9694:	3901      	subs	r1, #1
   b9696:	4402      	add	r2, r0
   b9698:	4290      	cmp	r0, r2
   b969a:	d101      	bne.n	b96a0 <memcmp+0xe>
   b969c:	2000      	movs	r0, #0
   b969e:	e005      	b.n	b96ac <memcmp+0x1a>
   b96a0:	7803      	ldrb	r3, [r0, #0]
   b96a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b96a6:	42a3      	cmp	r3, r4
   b96a8:	d001      	beq.n	b96ae <memcmp+0x1c>
   b96aa:	1b18      	subs	r0, r3, r4
   b96ac:	bd10      	pop	{r4, pc}
   b96ae:	3001      	adds	r0, #1
   b96b0:	e7f2      	b.n	b9698 <memcmp+0x6>

000b96b2 <memcpy>:
   b96b2:	440a      	add	r2, r1
   b96b4:	4291      	cmp	r1, r2
   b96b6:	f100 33ff 	add.w	r3, r0, #4294967295
   b96ba:	d100      	bne.n	b96be <memcpy+0xc>
   b96bc:	4770      	bx	lr
   b96be:	b510      	push	{r4, lr}
   b96c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   b96c4:	f803 4f01 	strb.w	r4, [r3, #1]!
   b96c8:	4291      	cmp	r1, r2
   b96ca:	d1f9      	bne.n	b96c0 <memcpy+0xe>
   b96cc:	bd10      	pop	{r4, pc}

000b96ce <memmove>:
   b96ce:	4288      	cmp	r0, r1
   b96d0:	b510      	push	{r4, lr}
   b96d2:	eb01 0402 	add.w	r4, r1, r2
   b96d6:	d902      	bls.n	b96de <memmove+0x10>
   b96d8:	4284      	cmp	r4, r0
   b96da:	4623      	mov	r3, r4
   b96dc:	d807      	bhi.n	b96ee <memmove+0x20>
   b96de:	1e43      	subs	r3, r0, #1
   b96e0:	42a1      	cmp	r1, r4
   b96e2:	d008      	beq.n	b96f6 <memmove+0x28>
   b96e4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b96e8:	f803 2f01 	strb.w	r2, [r3, #1]!
   b96ec:	e7f8      	b.n	b96e0 <memmove+0x12>
   b96ee:	4402      	add	r2, r0
   b96f0:	4601      	mov	r1, r0
   b96f2:	428a      	cmp	r2, r1
   b96f4:	d100      	bne.n	b96f8 <memmove+0x2a>
   b96f6:	bd10      	pop	{r4, pc}
   b96f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b96fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9700:	e7f7      	b.n	b96f2 <memmove+0x24>

000b9702 <memset>:
   b9702:	4402      	add	r2, r0
   b9704:	4603      	mov	r3, r0
   b9706:	4293      	cmp	r3, r2
   b9708:	d100      	bne.n	b970c <memset+0xa>
   b970a:	4770      	bx	lr
   b970c:	f803 1b01 	strb.w	r1, [r3], #1
   b9710:	e7f9      	b.n	b9706 <memset+0x4>
	...

000b9714 <srand>:
   b9714:	b538      	push	{r3, r4, r5, lr}
   b9716:	4b10      	ldr	r3, [pc, #64]	; (b9758 <srand+0x44>)
   b9718:	681d      	ldr	r5, [r3, #0]
   b971a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b971c:	4604      	mov	r4, r0
   b971e:	b9b3      	cbnz	r3, b974e <srand+0x3a>
   b9720:	2018      	movs	r0, #24
   b9722:	f7fc fe69 	bl	b63f8 <malloc>
   b9726:	4602      	mov	r2, r0
   b9728:	63a8      	str	r0, [r5, #56]	; 0x38
   b972a:	b920      	cbnz	r0, b9736 <srand+0x22>
   b972c:	4b0b      	ldr	r3, [pc, #44]	; (b975c <srand+0x48>)
   b972e:	480c      	ldr	r0, [pc, #48]	; (b9760 <srand+0x4c>)
   b9730:	2142      	movs	r1, #66	; 0x42
   b9732:	f7fc fea1 	bl	b6478 <__assert_func>
   b9736:	490b      	ldr	r1, [pc, #44]	; (b9764 <srand+0x50>)
   b9738:	4b0b      	ldr	r3, [pc, #44]	; (b9768 <srand+0x54>)
   b973a:	e9c0 1300 	strd	r1, r3, [r0]
   b973e:	4b0b      	ldr	r3, [pc, #44]	; (b976c <srand+0x58>)
   b9740:	6083      	str	r3, [r0, #8]
   b9742:	230b      	movs	r3, #11
   b9744:	8183      	strh	r3, [r0, #12]
   b9746:	2100      	movs	r1, #0
   b9748:	2001      	movs	r0, #1
   b974a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b974e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9750:	2200      	movs	r2, #0
   b9752:	611c      	str	r4, [r3, #16]
   b9754:	615a      	str	r2, [r3, #20]
   b9756:	bd38      	pop	{r3, r4, r5, pc}
   b9758:	2003d984 	.word	0x2003d984
   b975c:	000bc271 	.word	0x000bc271
   b9760:	000bc288 	.word	0x000bc288
   b9764:	abcd330e 	.word	0xabcd330e
   b9768:	e66d1234 	.word	0xe66d1234
   b976c:	0005deec 	.word	0x0005deec

000b9770 <strcat>:
   b9770:	b510      	push	{r4, lr}
   b9772:	4602      	mov	r2, r0
   b9774:	7814      	ldrb	r4, [r2, #0]
   b9776:	4613      	mov	r3, r2
   b9778:	3201      	adds	r2, #1
   b977a:	2c00      	cmp	r4, #0
   b977c:	d1fa      	bne.n	b9774 <strcat+0x4>
   b977e:	3b01      	subs	r3, #1
   b9780:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9784:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9788:	2a00      	cmp	r2, #0
   b978a:	d1f9      	bne.n	b9780 <strcat+0x10>
   b978c:	bd10      	pop	{r4, pc}

000b978e <strcpy>:
   b978e:	4603      	mov	r3, r0
   b9790:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9794:	f803 2b01 	strb.w	r2, [r3], #1
   b9798:	2a00      	cmp	r2, #0
   b979a:	d1f9      	bne.n	b9790 <strcpy+0x2>
   b979c:	4770      	bx	lr
	...

000b97a0 <strdup>:
   b97a0:	4b02      	ldr	r3, [pc, #8]	; (b97ac <strdup+0xc>)
   b97a2:	4601      	mov	r1, r0
   b97a4:	6818      	ldr	r0, [r3, #0]
   b97a6:	f000 b803 	b.w	b97b0 <_strdup_r>
   b97aa:	bf00      	nop
   b97ac:	2003d984 	.word	0x2003d984

000b97b0 <_strdup_r>:
   b97b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b97b2:	4604      	mov	r4, r0
   b97b4:	4608      	mov	r0, r1
   b97b6:	460d      	mov	r5, r1
   b97b8:	f7fb f904 	bl	b49c4 <strlen>
   b97bc:	1c42      	adds	r2, r0, #1
   b97be:	4611      	mov	r1, r2
   b97c0:	4620      	mov	r0, r4
   b97c2:	9201      	str	r2, [sp, #4]
   b97c4:	f7fc fe48 	bl	b6458 <_malloc_r>
   b97c8:	4604      	mov	r4, r0
   b97ca:	b118      	cbz	r0, b97d4 <_strdup_r+0x24>
   b97cc:	9a01      	ldr	r2, [sp, #4]
   b97ce:	4629      	mov	r1, r5
   b97d0:	f7ff ff6f 	bl	b96b2 <memcpy>
   b97d4:	4620      	mov	r0, r4
   b97d6:	b003      	add	sp, #12
   b97d8:	bd30      	pop	{r4, r5, pc}

000b97da <strncmp>:
   b97da:	b510      	push	{r4, lr}
   b97dc:	b17a      	cbz	r2, b97fe <strncmp+0x24>
   b97de:	4603      	mov	r3, r0
   b97e0:	3901      	subs	r1, #1
   b97e2:	1884      	adds	r4, r0, r2
   b97e4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b97e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b97ec:	4290      	cmp	r0, r2
   b97ee:	d101      	bne.n	b97f4 <strncmp+0x1a>
   b97f0:	42a3      	cmp	r3, r4
   b97f2:	d101      	bne.n	b97f8 <strncmp+0x1e>
   b97f4:	1a80      	subs	r0, r0, r2
   b97f6:	bd10      	pop	{r4, pc}
   b97f8:	2800      	cmp	r0, #0
   b97fa:	d1f3      	bne.n	b97e4 <strncmp+0xa>
   b97fc:	e7fa      	b.n	b97f4 <strncmp+0x1a>
   b97fe:	4610      	mov	r0, r2
   b9800:	e7f9      	b.n	b97f6 <strncmp+0x1c>

000b9802 <strnlen>:
   b9802:	b510      	push	{r4, lr}
   b9804:	4602      	mov	r2, r0
   b9806:	4401      	add	r1, r0
   b9808:	428a      	cmp	r2, r1
   b980a:	4613      	mov	r3, r2
   b980c:	d003      	beq.n	b9816 <strnlen+0x14>
   b980e:	781c      	ldrb	r4, [r3, #0]
   b9810:	3201      	adds	r2, #1
   b9812:	2c00      	cmp	r4, #0
   b9814:	d1f8      	bne.n	b9808 <strnlen+0x6>
   b9816:	1a18      	subs	r0, r3, r0
   b9818:	bd10      	pop	{r4, pc}

000b981a <sulp>:
   b981a:	b570      	push	{r4, r5, r6, lr}
   b981c:	4604      	mov	r4, r0
   b981e:	460d      	mov	r5, r1
   b9820:	ec45 4b10 	vmov	d0, r4, r5
   b9824:	4616      	mov	r6, r2
   b9826:	f001 fe6b 	bl	bb500 <__ulp>
   b982a:	ec51 0b10 	vmov	r0, r1, d0
   b982e:	b17e      	cbz	r6, b9850 <sulp+0x36>
   b9830:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b9834:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9838:	2b00      	cmp	r3, #0
   b983a:	dd09      	ble.n	b9850 <sulp+0x36>
   b983c:	051b      	lsls	r3, r3, #20
   b983e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b9842:	2400      	movs	r4, #0
   b9844:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b9848:	4622      	mov	r2, r4
   b984a:	462b      	mov	r3, r5
   b984c:	f7fa fda4 	bl	b4398 <__aeabi_dmul>
   b9850:	bd70      	pop	{r4, r5, r6, pc}
   b9852:	0000      	movs	r0, r0
   b9854:	0000      	movs	r0, r0
	...

000b9858 <_strtod_l>:
   b9858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b985c:	ed2d 8b02 	vpush	{d8}
   b9860:	b09d      	sub	sp, #116	; 0x74
   b9862:	461f      	mov	r7, r3
   b9864:	2300      	movs	r3, #0
   b9866:	9318      	str	r3, [sp, #96]	; 0x60
   b9868:	4ba2      	ldr	r3, [pc, #648]	; (b9af4 <_strtod_l+0x29c>)
   b986a:	9213      	str	r2, [sp, #76]	; 0x4c
   b986c:	681b      	ldr	r3, [r3, #0]
   b986e:	9305      	str	r3, [sp, #20]
   b9870:	4604      	mov	r4, r0
   b9872:	4618      	mov	r0, r3
   b9874:	4688      	mov	r8, r1
   b9876:	f7fb f8a5 	bl	b49c4 <strlen>
   b987a:	f04f 0a00 	mov.w	sl, #0
   b987e:	4605      	mov	r5, r0
   b9880:	f04f 0b00 	mov.w	fp, #0
   b9884:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b988a:	781a      	ldrb	r2, [r3, #0]
   b988c:	2a2b      	cmp	r2, #43	; 0x2b
   b988e:	d04e      	beq.n	b992e <_strtod_l+0xd6>
   b9890:	d83b      	bhi.n	b990a <_strtod_l+0xb2>
   b9892:	2a0d      	cmp	r2, #13
   b9894:	d834      	bhi.n	b9900 <_strtod_l+0xa8>
   b9896:	2a08      	cmp	r2, #8
   b9898:	d834      	bhi.n	b9904 <_strtod_l+0xac>
   b989a:	2a00      	cmp	r2, #0
   b989c:	d03e      	beq.n	b991c <_strtod_l+0xc4>
   b989e:	2300      	movs	r3, #0
   b98a0:	930a      	str	r3, [sp, #40]	; 0x28
   b98a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b98a4:	7833      	ldrb	r3, [r6, #0]
   b98a6:	2b30      	cmp	r3, #48	; 0x30
   b98a8:	f040 80b0 	bne.w	b9a0c <_strtod_l+0x1b4>
   b98ac:	7873      	ldrb	r3, [r6, #1]
   b98ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b98b2:	2b58      	cmp	r3, #88	; 0x58
   b98b4:	d168      	bne.n	b9988 <_strtod_l+0x130>
   b98b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b98b8:	9301      	str	r3, [sp, #4]
   b98ba:	ab18      	add	r3, sp, #96	; 0x60
   b98bc:	9702      	str	r7, [sp, #8]
   b98be:	9300      	str	r3, [sp, #0]
   b98c0:	4a8d      	ldr	r2, [pc, #564]	; (b9af8 <_strtod_l+0x2a0>)
   b98c2:	ab19      	add	r3, sp, #100	; 0x64
   b98c4:	a917      	add	r1, sp, #92	; 0x5c
   b98c6:	4620      	mov	r0, r4
   b98c8:	f000 ff8a 	bl	ba7e0 <__gethex>
   b98cc:	f010 0707 	ands.w	r7, r0, #7
   b98d0:	4605      	mov	r5, r0
   b98d2:	d005      	beq.n	b98e0 <_strtod_l+0x88>
   b98d4:	2f06      	cmp	r7, #6
   b98d6:	d12c      	bne.n	b9932 <_strtod_l+0xda>
   b98d8:	3601      	adds	r6, #1
   b98da:	2300      	movs	r3, #0
   b98dc:	9617      	str	r6, [sp, #92]	; 0x5c
   b98de:	930a      	str	r3, [sp, #40]	; 0x28
   b98e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b98e2:	2b00      	cmp	r3, #0
   b98e4:	f040 8590 	bne.w	ba408 <_strtod_l+0xbb0>
   b98e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b98ea:	b1eb      	cbz	r3, b9928 <_strtod_l+0xd0>
   b98ec:	4652      	mov	r2, sl
   b98ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b98f2:	ec43 2b10 	vmov	d0, r2, r3
   b98f6:	b01d      	add	sp, #116	; 0x74
   b98f8:	ecbd 8b02 	vpop	{d8}
   b98fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9900:	2a20      	cmp	r2, #32
   b9902:	d1cc      	bne.n	b989e <_strtod_l+0x46>
   b9904:	3301      	adds	r3, #1
   b9906:	9317      	str	r3, [sp, #92]	; 0x5c
   b9908:	e7be      	b.n	b9888 <_strtod_l+0x30>
   b990a:	2a2d      	cmp	r2, #45	; 0x2d
   b990c:	d1c7      	bne.n	b989e <_strtod_l+0x46>
   b990e:	2201      	movs	r2, #1
   b9910:	920a      	str	r2, [sp, #40]	; 0x28
   b9912:	1c5a      	adds	r2, r3, #1
   b9914:	9217      	str	r2, [sp, #92]	; 0x5c
   b9916:	785b      	ldrb	r3, [r3, #1]
   b9918:	2b00      	cmp	r3, #0
   b991a:	d1c2      	bne.n	b98a2 <_strtod_l+0x4a>
   b991c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b991e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9922:	2b00      	cmp	r3, #0
   b9924:	f040 856e 	bne.w	ba404 <_strtod_l+0xbac>
   b9928:	4652      	mov	r2, sl
   b992a:	465b      	mov	r3, fp
   b992c:	e7e1      	b.n	b98f2 <_strtod_l+0x9a>
   b992e:	2200      	movs	r2, #0
   b9930:	e7ee      	b.n	b9910 <_strtod_l+0xb8>
   b9932:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9934:	b13a      	cbz	r2, b9946 <_strtod_l+0xee>
   b9936:	2135      	movs	r1, #53	; 0x35
   b9938:	a81a      	add	r0, sp, #104	; 0x68
   b993a:	f001 feec 	bl	bb716 <__copybits>
   b993e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9940:	4620      	mov	r0, r4
   b9942:	f001 faab 	bl	bae9c <_Bfree>
   b9946:	3f01      	subs	r7, #1
   b9948:	2f04      	cmp	r7, #4
   b994a:	d806      	bhi.n	b995a <_strtod_l+0x102>
   b994c:	e8df f007 	tbb	[pc, r7]
   b9950:	1714030a 	.word	0x1714030a
   b9954:	0a          	.byte	0x0a
   b9955:	00          	.byte	0x00
   b9956:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b995a:	0728      	lsls	r0, r5, #28
   b995c:	d5c0      	bpl.n	b98e0 <_strtod_l+0x88>
   b995e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b9962:	e7bd      	b.n	b98e0 <_strtod_l+0x88>
   b9964:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9968:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b996a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b996e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b9972:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b9976:	e7f0      	b.n	b995a <_strtod_l+0x102>
   b9978:	f8df b180 	ldr.w	fp, [pc, #384]	; b9afc <_strtod_l+0x2a4>
   b997c:	e7ed      	b.n	b995a <_strtod_l+0x102>
   b997e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b9982:	f04f 3aff 	mov.w	sl, #4294967295
   b9986:	e7e8      	b.n	b995a <_strtod_l+0x102>
   b9988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b998a:	1c5a      	adds	r2, r3, #1
   b998c:	9217      	str	r2, [sp, #92]	; 0x5c
   b998e:	785b      	ldrb	r3, [r3, #1]
   b9990:	2b30      	cmp	r3, #48	; 0x30
   b9992:	d0f9      	beq.n	b9988 <_strtod_l+0x130>
   b9994:	2b00      	cmp	r3, #0
   b9996:	d0a3      	beq.n	b98e0 <_strtod_l+0x88>
   b9998:	2301      	movs	r3, #1
   b999a:	f04f 0900 	mov.w	r9, #0
   b999e:	9304      	str	r3, [sp, #16]
   b99a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b99a2:	9308      	str	r3, [sp, #32]
   b99a4:	f8cd 901c 	str.w	r9, [sp, #28]
   b99a8:	464f      	mov	r7, r9
   b99aa:	220a      	movs	r2, #10
   b99ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b99ae:	7806      	ldrb	r6, [r0, #0]
   b99b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b99b4:	b2d9      	uxtb	r1, r3
   b99b6:	2909      	cmp	r1, #9
   b99b8:	d92a      	bls.n	b9a10 <_strtod_l+0x1b8>
   b99ba:	9905      	ldr	r1, [sp, #20]
   b99bc:	462a      	mov	r2, r5
   b99be:	f7ff ff0c 	bl	b97da <strncmp>
   b99c2:	b398      	cbz	r0, b9a2c <_strtod_l+0x1d4>
   b99c4:	2000      	movs	r0, #0
   b99c6:	4632      	mov	r2, r6
   b99c8:	463d      	mov	r5, r7
   b99ca:	9005      	str	r0, [sp, #20]
   b99cc:	4603      	mov	r3, r0
   b99ce:	2a65      	cmp	r2, #101	; 0x65
   b99d0:	d001      	beq.n	b99d6 <_strtod_l+0x17e>
   b99d2:	2a45      	cmp	r2, #69	; 0x45
   b99d4:	d118      	bne.n	b9a08 <_strtod_l+0x1b0>
   b99d6:	b91d      	cbnz	r5, b99e0 <_strtod_l+0x188>
   b99d8:	9a04      	ldr	r2, [sp, #16]
   b99da:	4302      	orrs	r2, r0
   b99dc:	d09e      	beq.n	b991c <_strtod_l+0xc4>
   b99de:	2500      	movs	r5, #0
   b99e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b99e4:	f108 0201 	add.w	r2, r8, #1
   b99e8:	9217      	str	r2, [sp, #92]	; 0x5c
   b99ea:	f898 2001 	ldrb.w	r2, [r8, #1]
   b99ee:	2a2b      	cmp	r2, #43	; 0x2b
   b99f0:	d075      	beq.n	b9ade <_strtod_l+0x286>
   b99f2:	2a2d      	cmp	r2, #45	; 0x2d
   b99f4:	d07b      	beq.n	b9aee <_strtod_l+0x296>
   b99f6:	f04f 0c00 	mov.w	ip, #0
   b99fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b99fe:	2909      	cmp	r1, #9
   b9a00:	f240 8082 	bls.w	b9b08 <_strtod_l+0x2b0>
   b9a04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9a08:	2600      	movs	r6, #0
   b9a0a:	e09d      	b.n	b9b48 <_strtod_l+0x2f0>
   b9a0c:	2300      	movs	r3, #0
   b9a0e:	e7c4      	b.n	b999a <_strtod_l+0x142>
   b9a10:	2f08      	cmp	r7, #8
   b9a12:	bfd8      	it	le
   b9a14:	9907      	ldrle	r1, [sp, #28]
   b9a16:	f100 0001 	add.w	r0, r0, #1
   b9a1a:	bfda      	itte	le
   b9a1c:	fb02 3301 	mlale	r3, r2, r1, r3
   b9a20:	9307      	strle	r3, [sp, #28]
   b9a22:	fb02 3909 	mlagt	r9, r2, r9, r3
   b9a26:	3701      	adds	r7, #1
   b9a28:	9017      	str	r0, [sp, #92]	; 0x5c
   b9a2a:	e7bf      	b.n	b99ac <_strtod_l+0x154>
   b9a2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a2e:	195a      	adds	r2, r3, r5
   b9a30:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a32:	5d5a      	ldrb	r2, [r3, r5]
   b9a34:	2f00      	cmp	r7, #0
   b9a36:	d037      	beq.n	b9aa8 <_strtod_l+0x250>
   b9a38:	9005      	str	r0, [sp, #20]
   b9a3a:	463d      	mov	r5, r7
   b9a3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9a40:	2b09      	cmp	r3, #9
   b9a42:	d912      	bls.n	b9a6a <_strtod_l+0x212>
   b9a44:	2301      	movs	r3, #1
   b9a46:	e7c2      	b.n	b99ce <_strtod_l+0x176>
   b9a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a4a:	1c5a      	adds	r2, r3, #1
   b9a4c:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a4e:	785a      	ldrb	r2, [r3, #1]
   b9a50:	3001      	adds	r0, #1
   b9a52:	2a30      	cmp	r2, #48	; 0x30
   b9a54:	d0f8      	beq.n	b9a48 <_strtod_l+0x1f0>
   b9a56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b9a5a:	2b08      	cmp	r3, #8
   b9a5c:	f200 84d9 	bhi.w	ba412 <_strtod_l+0xbba>
   b9a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a62:	9005      	str	r0, [sp, #20]
   b9a64:	2000      	movs	r0, #0
   b9a66:	9308      	str	r3, [sp, #32]
   b9a68:	4605      	mov	r5, r0
   b9a6a:	3a30      	subs	r2, #48	; 0x30
   b9a6c:	f100 0301 	add.w	r3, r0, #1
   b9a70:	d014      	beq.n	b9a9c <_strtod_l+0x244>
   b9a72:	9905      	ldr	r1, [sp, #20]
   b9a74:	4419      	add	r1, r3
   b9a76:	9105      	str	r1, [sp, #20]
   b9a78:	462b      	mov	r3, r5
   b9a7a:	eb00 0e05 	add.w	lr, r0, r5
   b9a7e:	210a      	movs	r1, #10
   b9a80:	4573      	cmp	r3, lr
   b9a82:	d113      	bne.n	b9aac <_strtod_l+0x254>
   b9a84:	182b      	adds	r3, r5, r0
   b9a86:	2b08      	cmp	r3, #8
   b9a88:	f105 0501 	add.w	r5, r5, #1
   b9a8c:	4405      	add	r5, r0
   b9a8e:	dc1c      	bgt.n	b9aca <_strtod_l+0x272>
   b9a90:	9907      	ldr	r1, [sp, #28]
   b9a92:	230a      	movs	r3, #10
   b9a94:	fb03 2301 	mla	r3, r3, r1, r2
   b9a98:	9307      	str	r3, [sp, #28]
   b9a9a:	2300      	movs	r3, #0
   b9a9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9a9e:	1c51      	adds	r1, r2, #1
   b9aa0:	9117      	str	r1, [sp, #92]	; 0x5c
   b9aa2:	7852      	ldrb	r2, [r2, #1]
   b9aa4:	4618      	mov	r0, r3
   b9aa6:	e7c9      	b.n	b9a3c <_strtod_l+0x1e4>
   b9aa8:	4638      	mov	r0, r7
   b9aaa:	e7d2      	b.n	b9a52 <_strtod_l+0x1fa>
   b9aac:	2b08      	cmp	r3, #8
   b9aae:	dc04      	bgt.n	b9aba <_strtod_l+0x262>
   b9ab0:	9e07      	ldr	r6, [sp, #28]
   b9ab2:	434e      	muls	r6, r1
   b9ab4:	9607      	str	r6, [sp, #28]
   b9ab6:	3301      	adds	r3, #1
   b9ab8:	e7e2      	b.n	b9a80 <_strtod_l+0x228>
   b9aba:	f103 0c01 	add.w	ip, r3, #1
   b9abe:	f1bc 0f10 	cmp.w	ip, #16
   b9ac2:	bfd8      	it	le
   b9ac4:	fb01 f909 	mulle.w	r9, r1, r9
   b9ac8:	e7f5      	b.n	b9ab6 <_strtod_l+0x25e>
   b9aca:	2d10      	cmp	r5, #16
   b9acc:	bfdc      	itt	le
   b9ace:	230a      	movle	r3, #10
   b9ad0:	fb03 2909 	mlale	r9, r3, r9, r2
   b9ad4:	e7e1      	b.n	b9a9a <_strtod_l+0x242>
   b9ad6:	2300      	movs	r3, #0
   b9ad8:	9305      	str	r3, [sp, #20]
   b9ada:	2301      	movs	r3, #1
   b9adc:	e77c      	b.n	b99d8 <_strtod_l+0x180>
   b9ade:	f04f 0c00 	mov.w	ip, #0
   b9ae2:	f108 0202 	add.w	r2, r8, #2
   b9ae6:	9217      	str	r2, [sp, #92]	; 0x5c
   b9ae8:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9aec:	e785      	b.n	b99fa <_strtod_l+0x1a2>
   b9aee:	f04f 0c01 	mov.w	ip, #1
   b9af2:	e7f6      	b.n	b9ae2 <_strtod_l+0x28a>
   b9af4:	000bc580 	.word	0x000bc580
   b9af8:	000bc314 	.word	0x000bc314
   b9afc:	7ff00000 	.word	0x7ff00000
   b9b00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b02:	1c51      	adds	r1, r2, #1
   b9b04:	9117      	str	r1, [sp, #92]	; 0x5c
   b9b06:	7852      	ldrb	r2, [r2, #1]
   b9b08:	2a30      	cmp	r2, #48	; 0x30
   b9b0a:	d0f9      	beq.n	b9b00 <_strtod_l+0x2a8>
   b9b0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9b10:	2908      	cmp	r1, #8
   b9b12:	f63f af79 	bhi.w	b9a08 <_strtod_l+0x1b0>
   b9b16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b9b1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b1c:	9206      	str	r2, [sp, #24]
   b9b1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b20:	1c51      	adds	r1, r2, #1
   b9b22:	9117      	str	r1, [sp, #92]	; 0x5c
   b9b24:	7852      	ldrb	r2, [r2, #1]
   b9b26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b9b2a:	2e09      	cmp	r6, #9
   b9b2c:	d937      	bls.n	b9b9e <_strtod_l+0x346>
   b9b2e:	9e06      	ldr	r6, [sp, #24]
   b9b30:	1b89      	subs	r1, r1, r6
   b9b32:	2908      	cmp	r1, #8
   b9b34:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9b38:	dc02      	bgt.n	b9b40 <_strtod_l+0x2e8>
   b9b3a:	4576      	cmp	r6, lr
   b9b3c:	bfa8      	it	ge
   b9b3e:	4676      	movge	r6, lr
   b9b40:	f1bc 0f00 	cmp.w	ip, #0
   b9b44:	d000      	beq.n	b9b48 <_strtod_l+0x2f0>
   b9b46:	4276      	negs	r6, r6
   b9b48:	2d00      	cmp	r5, #0
   b9b4a:	d14d      	bne.n	b9be8 <_strtod_l+0x390>
   b9b4c:	9904      	ldr	r1, [sp, #16]
   b9b4e:	4301      	orrs	r1, r0
   b9b50:	f47f aec6 	bne.w	b98e0 <_strtod_l+0x88>
   b9b54:	2b00      	cmp	r3, #0
   b9b56:	f47f aee1 	bne.w	b991c <_strtod_l+0xc4>
   b9b5a:	2a69      	cmp	r2, #105	; 0x69
   b9b5c:	d027      	beq.n	b9bae <_strtod_l+0x356>
   b9b5e:	dc24      	bgt.n	b9baa <_strtod_l+0x352>
   b9b60:	2a49      	cmp	r2, #73	; 0x49
   b9b62:	d024      	beq.n	b9bae <_strtod_l+0x356>
   b9b64:	2a4e      	cmp	r2, #78	; 0x4e
   b9b66:	f47f aed9 	bne.w	b991c <_strtod_l+0xc4>
   b9b6a:	499f      	ldr	r1, [pc, #636]	; (b9de8 <_strtod_l+0x590>)
   b9b6c:	a817      	add	r0, sp, #92	; 0x5c
   b9b6e:	f001 f88f 	bl	bac90 <__match>
   b9b72:	2800      	cmp	r0, #0
   b9b74:	f43f aed2 	beq.w	b991c <_strtod_l+0xc4>
   b9b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9b7a:	781b      	ldrb	r3, [r3, #0]
   b9b7c:	2b28      	cmp	r3, #40	; 0x28
   b9b7e:	d12d      	bne.n	b9bdc <_strtod_l+0x384>
   b9b80:	499a      	ldr	r1, [pc, #616]	; (b9dec <_strtod_l+0x594>)
   b9b82:	aa1a      	add	r2, sp, #104	; 0x68
   b9b84:	a817      	add	r0, sp, #92	; 0x5c
   b9b86:	f001 f897 	bl	bacb8 <__hexnan>
   b9b8a:	2805      	cmp	r0, #5
   b9b8c:	d126      	bne.n	b9bdc <_strtod_l+0x384>
   b9b8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9b90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b9b94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9b98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9b9c:	e6a0      	b.n	b98e0 <_strtod_l+0x88>
   b9b9e:	210a      	movs	r1, #10
   b9ba0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b9ba4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9ba8:	e7b9      	b.n	b9b1e <_strtod_l+0x2c6>
   b9baa:	2a6e      	cmp	r2, #110	; 0x6e
   b9bac:	e7db      	b.n	b9b66 <_strtod_l+0x30e>
   b9bae:	4990      	ldr	r1, [pc, #576]	; (b9df0 <_strtod_l+0x598>)
   b9bb0:	a817      	add	r0, sp, #92	; 0x5c
   b9bb2:	f001 f86d 	bl	bac90 <__match>
   b9bb6:	2800      	cmp	r0, #0
   b9bb8:	f43f aeb0 	beq.w	b991c <_strtod_l+0xc4>
   b9bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9bbe:	498d      	ldr	r1, [pc, #564]	; (b9df4 <_strtod_l+0x59c>)
   b9bc0:	3b01      	subs	r3, #1
   b9bc2:	a817      	add	r0, sp, #92	; 0x5c
   b9bc4:	9317      	str	r3, [sp, #92]	; 0x5c
   b9bc6:	f001 f863 	bl	bac90 <__match>
   b9bca:	b910      	cbnz	r0, b9bd2 <_strtod_l+0x37a>
   b9bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9bce:	3301      	adds	r3, #1
   b9bd0:	9317      	str	r3, [sp, #92]	; 0x5c
   b9bd2:	f8df b230 	ldr.w	fp, [pc, #560]	; b9e04 <_strtod_l+0x5ac>
   b9bd6:	f04f 0a00 	mov.w	sl, #0
   b9bda:	e681      	b.n	b98e0 <_strtod_l+0x88>
   b9bdc:	4886      	ldr	r0, [pc, #536]	; (b9df8 <_strtod_l+0x5a0>)
   b9bde:	f001 fdef 	bl	bb7c0 <nan>
   b9be2:	ec5b ab10 	vmov	sl, fp, d0
   b9be6:	e67b      	b.n	b98e0 <_strtod_l+0x88>
   b9be8:	9b05      	ldr	r3, [sp, #20]
   b9bea:	9807      	ldr	r0, [sp, #28]
   b9bec:	1af3      	subs	r3, r6, r3
   b9bee:	2f00      	cmp	r7, #0
   b9bf0:	bf08      	it	eq
   b9bf2:	462f      	moveq	r7, r5
   b9bf4:	2d10      	cmp	r5, #16
   b9bf6:	9306      	str	r3, [sp, #24]
   b9bf8:	46a8      	mov	r8, r5
   b9bfa:	bfa8      	it	ge
   b9bfc:	f04f 0810 	movge.w	r8, #16
   b9c00:	f7fa fb50 	bl	b42a4 <__aeabi_ui2d>
   b9c04:	2d09      	cmp	r5, #9
   b9c06:	4682      	mov	sl, r0
   b9c08:	468b      	mov	fp, r1
   b9c0a:	dd13      	ble.n	b9c34 <_strtod_l+0x3dc>
   b9c0c:	4b7b      	ldr	r3, [pc, #492]	; (b9dfc <_strtod_l+0x5a4>)
   b9c0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b9c12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b9c16:	f7fa fbbf 	bl	b4398 <__aeabi_dmul>
   b9c1a:	4682      	mov	sl, r0
   b9c1c:	4648      	mov	r0, r9
   b9c1e:	468b      	mov	fp, r1
   b9c20:	f7fa fb40 	bl	b42a4 <__aeabi_ui2d>
   b9c24:	4602      	mov	r2, r0
   b9c26:	460b      	mov	r3, r1
   b9c28:	4650      	mov	r0, sl
   b9c2a:	4659      	mov	r1, fp
   b9c2c:	f7fa f9fe 	bl	b402c <__adddf3>
   b9c30:	4682      	mov	sl, r0
   b9c32:	468b      	mov	fp, r1
   b9c34:	2d0f      	cmp	r5, #15
   b9c36:	dc38      	bgt.n	b9caa <_strtod_l+0x452>
   b9c38:	9b06      	ldr	r3, [sp, #24]
   b9c3a:	2b00      	cmp	r3, #0
   b9c3c:	f43f ae50 	beq.w	b98e0 <_strtod_l+0x88>
   b9c40:	dd24      	ble.n	b9c8c <_strtod_l+0x434>
   b9c42:	2b16      	cmp	r3, #22
   b9c44:	dc0b      	bgt.n	b9c5e <_strtod_l+0x406>
   b9c46:	496d      	ldr	r1, [pc, #436]	; (b9dfc <_strtod_l+0x5a4>)
   b9c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9c50:	4652      	mov	r2, sl
   b9c52:	465b      	mov	r3, fp
   b9c54:	f7fa fba0 	bl	b4398 <__aeabi_dmul>
   b9c58:	4682      	mov	sl, r0
   b9c5a:	468b      	mov	fp, r1
   b9c5c:	e640      	b.n	b98e0 <_strtod_l+0x88>
   b9c5e:	9a06      	ldr	r2, [sp, #24]
   b9c60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9c64:	4293      	cmp	r3, r2
   b9c66:	db20      	blt.n	b9caa <_strtod_l+0x452>
   b9c68:	4c64      	ldr	r4, [pc, #400]	; (b9dfc <_strtod_l+0x5a4>)
   b9c6a:	f1c5 050f 	rsb	r5, r5, #15
   b9c6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9c72:	4652      	mov	r2, sl
   b9c74:	465b      	mov	r3, fp
   b9c76:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9c7a:	f7fa fb8d 	bl	b4398 <__aeabi_dmul>
   b9c7e:	9b06      	ldr	r3, [sp, #24]
   b9c80:	1b5d      	subs	r5, r3, r5
   b9c82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9c86:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9c8a:	e7e3      	b.n	b9c54 <_strtod_l+0x3fc>
   b9c8c:	9b06      	ldr	r3, [sp, #24]
   b9c8e:	3316      	adds	r3, #22
   b9c90:	db0b      	blt.n	b9caa <_strtod_l+0x452>
   b9c92:	9b05      	ldr	r3, [sp, #20]
   b9c94:	1b9e      	subs	r6, r3, r6
   b9c96:	4b59      	ldr	r3, [pc, #356]	; (b9dfc <_strtod_l+0x5a4>)
   b9c98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9c9c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9ca0:	4650      	mov	r0, sl
   b9ca2:	4659      	mov	r1, fp
   b9ca4:	f7fa fca2 	bl	b45ec <__aeabi_ddiv>
   b9ca8:	e7d6      	b.n	b9c58 <_strtod_l+0x400>
   b9caa:	9b06      	ldr	r3, [sp, #24]
   b9cac:	eba5 0808 	sub.w	r8, r5, r8
   b9cb0:	4498      	add	r8, r3
   b9cb2:	f1b8 0f00 	cmp.w	r8, #0
   b9cb6:	dd74      	ble.n	b9da2 <_strtod_l+0x54a>
   b9cb8:	f018 030f 	ands.w	r3, r8, #15
   b9cbc:	d00a      	beq.n	b9cd4 <_strtod_l+0x47c>
   b9cbe:	494f      	ldr	r1, [pc, #316]	; (b9dfc <_strtod_l+0x5a4>)
   b9cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9cc4:	4652      	mov	r2, sl
   b9cc6:	465b      	mov	r3, fp
   b9cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9ccc:	f7fa fb64 	bl	b4398 <__aeabi_dmul>
   b9cd0:	4682      	mov	sl, r0
   b9cd2:	468b      	mov	fp, r1
   b9cd4:	f038 080f 	bics.w	r8, r8, #15
   b9cd8:	d04f      	beq.n	b9d7a <_strtod_l+0x522>
   b9cda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9cde:	dd22      	ble.n	b9d26 <_strtod_l+0x4ce>
   b9ce0:	2500      	movs	r5, #0
   b9ce2:	462e      	mov	r6, r5
   b9ce4:	9507      	str	r5, [sp, #28]
   b9ce6:	9505      	str	r5, [sp, #20]
   b9ce8:	2322      	movs	r3, #34	; 0x22
   b9cea:	f8df b118 	ldr.w	fp, [pc, #280]	; b9e04 <_strtod_l+0x5ac>
   b9cee:	6023      	str	r3, [r4, #0]
   b9cf0:	f04f 0a00 	mov.w	sl, #0
   b9cf4:	9b07      	ldr	r3, [sp, #28]
   b9cf6:	2b00      	cmp	r3, #0
   b9cf8:	f43f adf2 	beq.w	b98e0 <_strtod_l+0x88>
   b9cfc:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9cfe:	4620      	mov	r0, r4
   b9d00:	f001 f8cc 	bl	bae9c <_Bfree>
   b9d04:	9905      	ldr	r1, [sp, #20]
   b9d06:	4620      	mov	r0, r4
   b9d08:	f001 f8c8 	bl	bae9c <_Bfree>
   b9d0c:	4631      	mov	r1, r6
   b9d0e:	4620      	mov	r0, r4
   b9d10:	f001 f8c4 	bl	bae9c <_Bfree>
   b9d14:	9907      	ldr	r1, [sp, #28]
   b9d16:	4620      	mov	r0, r4
   b9d18:	f001 f8c0 	bl	bae9c <_Bfree>
   b9d1c:	4629      	mov	r1, r5
   b9d1e:	4620      	mov	r0, r4
   b9d20:	f001 f8bc 	bl	bae9c <_Bfree>
   b9d24:	e5dc      	b.n	b98e0 <_strtod_l+0x88>
   b9d26:	4b36      	ldr	r3, [pc, #216]	; (b9e00 <_strtod_l+0x5a8>)
   b9d28:	9304      	str	r3, [sp, #16]
   b9d2a:	2300      	movs	r3, #0
   b9d2c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9d30:	4650      	mov	r0, sl
   b9d32:	4659      	mov	r1, fp
   b9d34:	4699      	mov	r9, r3
   b9d36:	f1b8 0f01 	cmp.w	r8, #1
   b9d3a:	dc21      	bgt.n	b9d80 <_strtod_l+0x528>
   b9d3c:	b10b      	cbz	r3, b9d42 <_strtod_l+0x4ea>
   b9d3e:	4682      	mov	sl, r0
   b9d40:	468b      	mov	fp, r1
   b9d42:	4b2f      	ldr	r3, [pc, #188]	; (b9e00 <_strtod_l+0x5a8>)
   b9d44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9d48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9d4c:	4652      	mov	r2, sl
   b9d4e:	465b      	mov	r3, fp
   b9d50:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9d54:	f7fa fb20 	bl	b4398 <__aeabi_dmul>
   b9d58:	4b2a      	ldr	r3, [pc, #168]	; (b9e04 <_strtod_l+0x5ac>)
   b9d5a:	460a      	mov	r2, r1
   b9d5c:	400b      	ands	r3, r1
   b9d5e:	492a      	ldr	r1, [pc, #168]	; (b9e08 <_strtod_l+0x5b0>)
   b9d60:	428b      	cmp	r3, r1
   b9d62:	4682      	mov	sl, r0
   b9d64:	d8bc      	bhi.n	b9ce0 <_strtod_l+0x488>
   b9d66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9d6a:	428b      	cmp	r3, r1
   b9d6c:	bf86      	itte	hi
   b9d6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9e0c <_strtod_l+0x5b4>
   b9d72:	f04f 3aff 	movhi.w	sl, #4294967295
   b9d76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9d7a:	2300      	movs	r3, #0
   b9d7c:	9304      	str	r3, [sp, #16]
   b9d7e:	e084      	b.n	b9e8a <_strtod_l+0x632>
   b9d80:	f018 0f01 	tst.w	r8, #1
   b9d84:	d005      	beq.n	b9d92 <_strtod_l+0x53a>
   b9d86:	9b04      	ldr	r3, [sp, #16]
   b9d88:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9d8c:	f7fa fb04 	bl	b4398 <__aeabi_dmul>
   b9d90:	2301      	movs	r3, #1
   b9d92:	9a04      	ldr	r2, [sp, #16]
   b9d94:	3208      	adds	r2, #8
   b9d96:	f109 0901 	add.w	r9, r9, #1
   b9d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9d9e:	9204      	str	r2, [sp, #16]
   b9da0:	e7c9      	b.n	b9d36 <_strtod_l+0x4de>
   b9da2:	d0ea      	beq.n	b9d7a <_strtod_l+0x522>
   b9da4:	f1c8 0800 	rsb	r8, r8, #0
   b9da8:	f018 020f 	ands.w	r2, r8, #15
   b9dac:	d00a      	beq.n	b9dc4 <_strtod_l+0x56c>
   b9dae:	4b13      	ldr	r3, [pc, #76]	; (b9dfc <_strtod_l+0x5a4>)
   b9db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9db4:	4650      	mov	r0, sl
   b9db6:	4659      	mov	r1, fp
   b9db8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9dbc:	f7fa fc16 	bl	b45ec <__aeabi_ddiv>
   b9dc0:	4682      	mov	sl, r0
   b9dc2:	468b      	mov	fp, r1
   b9dc4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9dc8:	d0d7      	beq.n	b9d7a <_strtod_l+0x522>
   b9dca:	f1b8 0f1f 	cmp.w	r8, #31
   b9dce:	dd1f      	ble.n	b9e10 <_strtod_l+0x5b8>
   b9dd0:	2500      	movs	r5, #0
   b9dd2:	462e      	mov	r6, r5
   b9dd4:	9507      	str	r5, [sp, #28]
   b9dd6:	9505      	str	r5, [sp, #20]
   b9dd8:	2322      	movs	r3, #34	; 0x22
   b9dda:	f04f 0a00 	mov.w	sl, #0
   b9dde:	f04f 0b00 	mov.w	fp, #0
   b9de2:	6023      	str	r3, [r4, #0]
   b9de4:	e786      	b.n	b9cf4 <_strtod_l+0x49c>
   b9de6:	bf00      	nop
   b9de8:	000bc30e 	.word	0x000bc30e
   b9dec:	000bc328 	.word	0x000bc328
   b9df0:	000bc305 	.word	0x000bc305
   b9df4:	000bc308 	.word	0x000bc308
   b9df8:	000bbb89 	.word	0x000bbb89
   b9dfc:	000bc640 	.word	0x000bc640
   b9e00:	000bc618 	.word	0x000bc618
   b9e04:	7ff00000 	.word	0x7ff00000
   b9e08:	7ca00000 	.word	0x7ca00000
   b9e0c:	7fefffff 	.word	0x7fefffff
   b9e10:	f018 0310 	ands.w	r3, r8, #16
   b9e14:	bf18      	it	ne
   b9e16:	236a      	movne	r3, #106	; 0x6a
   b9e18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; ba1c8 <_strtod_l+0x970>
   b9e1c:	9304      	str	r3, [sp, #16]
   b9e1e:	4650      	mov	r0, sl
   b9e20:	4659      	mov	r1, fp
   b9e22:	2300      	movs	r3, #0
   b9e24:	f018 0f01 	tst.w	r8, #1
   b9e28:	d004      	beq.n	b9e34 <_strtod_l+0x5dc>
   b9e2a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9e2e:	f7fa fab3 	bl	b4398 <__aeabi_dmul>
   b9e32:	2301      	movs	r3, #1
   b9e34:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9e38:	f109 0908 	add.w	r9, r9, #8
   b9e3c:	d1f2      	bne.n	b9e24 <_strtod_l+0x5cc>
   b9e3e:	b10b      	cbz	r3, b9e44 <_strtod_l+0x5ec>
   b9e40:	4682      	mov	sl, r0
   b9e42:	468b      	mov	fp, r1
   b9e44:	9b04      	ldr	r3, [sp, #16]
   b9e46:	b1c3      	cbz	r3, b9e7a <_strtod_l+0x622>
   b9e48:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9e4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9e50:	2b00      	cmp	r3, #0
   b9e52:	4659      	mov	r1, fp
   b9e54:	dd11      	ble.n	b9e7a <_strtod_l+0x622>
   b9e56:	2b1f      	cmp	r3, #31
   b9e58:	f340 8124 	ble.w	ba0a4 <_strtod_l+0x84c>
   b9e5c:	2b34      	cmp	r3, #52	; 0x34
   b9e5e:	bfde      	ittt	le
   b9e60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9e64:	f04f 33ff 	movle.w	r3, #4294967295
   b9e68:	fa03 f202 	lslle.w	r2, r3, r2
   b9e6c:	f04f 0a00 	mov.w	sl, #0
   b9e70:	bfcc      	ite	gt
   b9e72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9e76:	ea02 0b01 	andle.w	fp, r2, r1
   b9e7a:	2200      	movs	r2, #0
   b9e7c:	2300      	movs	r3, #0
   b9e7e:	4650      	mov	r0, sl
   b9e80:	4659      	mov	r1, fp
   b9e82:	f7fa fcf1 	bl	b4868 <__aeabi_dcmpeq>
   b9e86:	2800      	cmp	r0, #0
   b9e88:	d1a2      	bne.n	b9dd0 <_strtod_l+0x578>
   b9e8a:	9b07      	ldr	r3, [sp, #28]
   b9e8c:	9300      	str	r3, [sp, #0]
   b9e8e:	9908      	ldr	r1, [sp, #32]
   b9e90:	462b      	mov	r3, r5
   b9e92:	463a      	mov	r2, r7
   b9e94:	4620      	mov	r0, r4
   b9e96:	f001 f869 	bl	baf6c <__s2b>
   b9e9a:	9007      	str	r0, [sp, #28]
   b9e9c:	2800      	cmp	r0, #0
   b9e9e:	f43f af1f 	beq.w	b9ce0 <_strtod_l+0x488>
   b9ea2:	9b05      	ldr	r3, [sp, #20]
   b9ea4:	1b9e      	subs	r6, r3, r6
   b9ea6:	9b06      	ldr	r3, [sp, #24]
   b9ea8:	2b00      	cmp	r3, #0
   b9eaa:	bfb4      	ite	lt
   b9eac:	4633      	movlt	r3, r6
   b9eae:	2300      	movge	r3, #0
   b9eb0:	930c      	str	r3, [sp, #48]	; 0x30
   b9eb2:	9b06      	ldr	r3, [sp, #24]
   b9eb4:	2500      	movs	r5, #0
   b9eb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9eba:	9312      	str	r3, [sp, #72]	; 0x48
   b9ebc:	462e      	mov	r6, r5
   b9ebe:	9b07      	ldr	r3, [sp, #28]
   b9ec0:	4620      	mov	r0, r4
   b9ec2:	6859      	ldr	r1, [r3, #4]
   b9ec4:	f000 ffaa 	bl	bae1c <_Balloc>
   b9ec8:	9005      	str	r0, [sp, #20]
   b9eca:	2800      	cmp	r0, #0
   b9ecc:	f43f af0c 	beq.w	b9ce8 <_strtod_l+0x490>
   b9ed0:	9b07      	ldr	r3, [sp, #28]
   b9ed2:	691a      	ldr	r2, [r3, #16]
   b9ed4:	3202      	adds	r2, #2
   b9ed6:	f103 010c 	add.w	r1, r3, #12
   b9eda:	0092      	lsls	r2, r2, #2
   b9edc:	300c      	adds	r0, #12
   b9ede:	f7ff fbe8 	bl	b96b2 <memcpy>
   b9ee2:	ec4b ab10 	vmov	d0, sl, fp
   b9ee6:	aa1a      	add	r2, sp, #104	; 0x68
   b9ee8:	a919      	add	r1, sp, #100	; 0x64
   b9eea:	4620      	mov	r0, r4
   b9eec:	f001 fb84 	bl	bb5f8 <__d2b>
   b9ef0:	ec4b ab18 	vmov	d8, sl, fp
   b9ef4:	9018      	str	r0, [sp, #96]	; 0x60
   b9ef6:	2800      	cmp	r0, #0
   b9ef8:	f43f aef6 	beq.w	b9ce8 <_strtod_l+0x490>
   b9efc:	2101      	movs	r1, #1
   b9efe:	4620      	mov	r0, r4
   b9f00:	f001 f8ce 	bl	bb0a0 <__i2b>
   b9f04:	4606      	mov	r6, r0
   b9f06:	2800      	cmp	r0, #0
   b9f08:	f43f aeee 	beq.w	b9ce8 <_strtod_l+0x490>
   b9f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9f0e:	9904      	ldr	r1, [sp, #16]
   b9f10:	2b00      	cmp	r3, #0
   b9f12:	bfab      	itete	ge
   b9f14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9f16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9f18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9f1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9f1e:	bfac      	ite	ge
   b9f20:	eb03 0902 	addge.w	r9, r3, r2
   b9f24:	1ad7      	sublt	r7, r2, r3
   b9f26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9f28:	eba3 0801 	sub.w	r8, r3, r1
   b9f2c:	4490      	add	r8, r2
   b9f2e:	4ba1      	ldr	r3, [pc, #644]	; (ba1b4 <_strtod_l+0x95c>)
   b9f30:	f108 38ff 	add.w	r8, r8, #4294967295
   b9f34:	4598      	cmp	r8, r3
   b9f36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9f3a:	f280 80c7 	bge.w	ba0cc <_strtod_l+0x874>
   b9f3e:	eba3 0308 	sub.w	r3, r3, r8
   b9f42:	2b1f      	cmp	r3, #31
   b9f44:	eba2 0203 	sub.w	r2, r2, r3
   b9f48:	f04f 0101 	mov.w	r1, #1
   b9f4c:	f300 80b1 	bgt.w	ba0b2 <_strtod_l+0x85a>
   b9f50:	fa01 f303 	lsl.w	r3, r1, r3
   b9f54:	930d      	str	r3, [sp, #52]	; 0x34
   b9f56:	2300      	movs	r3, #0
   b9f58:	9308      	str	r3, [sp, #32]
   b9f5a:	eb09 0802 	add.w	r8, r9, r2
   b9f5e:	9b04      	ldr	r3, [sp, #16]
   b9f60:	45c1      	cmp	r9, r8
   b9f62:	4417      	add	r7, r2
   b9f64:	441f      	add	r7, r3
   b9f66:	464b      	mov	r3, r9
   b9f68:	bfa8      	it	ge
   b9f6a:	4643      	movge	r3, r8
   b9f6c:	42bb      	cmp	r3, r7
   b9f6e:	bfa8      	it	ge
   b9f70:	463b      	movge	r3, r7
   b9f72:	2b00      	cmp	r3, #0
   b9f74:	bfc2      	ittt	gt
   b9f76:	eba8 0803 	subgt.w	r8, r8, r3
   b9f7a:	1aff      	subgt	r7, r7, r3
   b9f7c:	eba9 0903 	subgt.w	r9, r9, r3
   b9f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9f82:	2b00      	cmp	r3, #0
   b9f84:	dd17      	ble.n	b9fb6 <_strtod_l+0x75e>
   b9f86:	4631      	mov	r1, r6
   b9f88:	461a      	mov	r2, r3
   b9f8a:	4620      	mov	r0, r4
   b9f8c:	f001 f948 	bl	bb220 <__pow5mult>
   b9f90:	4606      	mov	r6, r0
   b9f92:	2800      	cmp	r0, #0
   b9f94:	f43f aea8 	beq.w	b9ce8 <_strtod_l+0x490>
   b9f98:	4601      	mov	r1, r0
   b9f9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9f9c:	4620      	mov	r0, r4
   b9f9e:	f001 f895 	bl	bb0cc <__multiply>
   b9fa2:	900b      	str	r0, [sp, #44]	; 0x2c
   b9fa4:	2800      	cmp	r0, #0
   b9fa6:	f43f ae9f 	beq.w	b9ce8 <_strtod_l+0x490>
   b9faa:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9fac:	4620      	mov	r0, r4
   b9fae:	f000 ff75 	bl	bae9c <_Bfree>
   b9fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9fb4:	9318      	str	r3, [sp, #96]	; 0x60
   b9fb6:	f1b8 0f00 	cmp.w	r8, #0
   b9fba:	f300 808c 	bgt.w	ba0d6 <_strtod_l+0x87e>
   b9fbe:	9b06      	ldr	r3, [sp, #24]
   b9fc0:	2b00      	cmp	r3, #0
   b9fc2:	dd08      	ble.n	b9fd6 <_strtod_l+0x77e>
   b9fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9fc6:	9905      	ldr	r1, [sp, #20]
   b9fc8:	4620      	mov	r0, r4
   b9fca:	f001 f929 	bl	bb220 <__pow5mult>
   b9fce:	9005      	str	r0, [sp, #20]
   b9fd0:	2800      	cmp	r0, #0
   b9fd2:	f43f ae89 	beq.w	b9ce8 <_strtod_l+0x490>
   b9fd6:	2f00      	cmp	r7, #0
   b9fd8:	dd08      	ble.n	b9fec <_strtod_l+0x794>
   b9fda:	9905      	ldr	r1, [sp, #20]
   b9fdc:	463a      	mov	r2, r7
   b9fde:	4620      	mov	r0, r4
   b9fe0:	f001 f978 	bl	bb2d4 <__lshift>
   b9fe4:	9005      	str	r0, [sp, #20]
   b9fe6:	2800      	cmp	r0, #0
   b9fe8:	f43f ae7e 	beq.w	b9ce8 <_strtod_l+0x490>
   b9fec:	f1b9 0f00 	cmp.w	r9, #0
   b9ff0:	dd08      	ble.n	ba004 <_strtod_l+0x7ac>
   b9ff2:	4631      	mov	r1, r6
   b9ff4:	464a      	mov	r2, r9
   b9ff6:	4620      	mov	r0, r4
   b9ff8:	f001 f96c 	bl	bb2d4 <__lshift>
   b9ffc:	4606      	mov	r6, r0
   b9ffe:	2800      	cmp	r0, #0
   ba000:	f43f ae72 	beq.w	b9ce8 <_strtod_l+0x490>
   ba004:	9a05      	ldr	r2, [sp, #20]
   ba006:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba008:	4620      	mov	r0, r4
   ba00a:	f001 f9ef 	bl	bb3ec <__mdiff>
   ba00e:	4605      	mov	r5, r0
   ba010:	2800      	cmp	r0, #0
   ba012:	f43f ae69 	beq.w	b9ce8 <_strtod_l+0x490>
   ba016:	68c3      	ldr	r3, [r0, #12]
   ba018:	930b      	str	r3, [sp, #44]	; 0x2c
   ba01a:	2300      	movs	r3, #0
   ba01c:	60c3      	str	r3, [r0, #12]
   ba01e:	4631      	mov	r1, r6
   ba020:	f001 f9c8 	bl	bb3b4 <__mcmp>
   ba024:	2800      	cmp	r0, #0
   ba026:	da60      	bge.n	ba0ea <_strtod_l+0x892>
   ba028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba02a:	ea53 030a 	orrs.w	r3, r3, sl
   ba02e:	f040 8082 	bne.w	ba136 <_strtod_l+0x8de>
   ba032:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba036:	2b00      	cmp	r3, #0
   ba038:	d17d      	bne.n	ba136 <_strtod_l+0x8de>
   ba03a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba03e:	0d1b      	lsrs	r3, r3, #20
   ba040:	051b      	lsls	r3, r3, #20
   ba042:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   ba046:	d976      	bls.n	ba136 <_strtod_l+0x8de>
   ba048:	696b      	ldr	r3, [r5, #20]
   ba04a:	b913      	cbnz	r3, ba052 <_strtod_l+0x7fa>
   ba04c:	692b      	ldr	r3, [r5, #16]
   ba04e:	2b01      	cmp	r3, #1
   ba050:	dd71      	ble.n	ba136 <_strtod_l+0x8de>
   ba052:	4629      	mov	r1, r5
   ba054:	2201      	movs	r2, #1
   ba056:	4620      	mov	r0, r4
   ba058:	f001 f93c 	bl	bb2d4 <__lshift>
   ba05c:	4631      	mov	r1, r6
   ba05e:	4605      	mov	r5, r0
   ba060:	f001 f9a8 	bl	bb3b4 <__mcmp>
   ba064:	2800      	cmp	r0, #0
   ba066:	dd66      	ble.n	ba136 <_strtod_l+0x8de>
   ba068:	9904      	ldr	r1, [sp, #16]
   ba06a:	4a53      	ldr	r2, [pc, #332]	; (ba1b8 <_strtod_l+0x960>)
   ba06c:	465b      	mov	r3, fp
   ba06e:	2900      	cmp	r1, #0
   ba070:	f000 8081 	beq.w	ba176 <_strtod_l+0x91e>
   ba074:	ea02 010b 	and.w	r1, r2, fp
   ba078:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   ba07c:	dc7b      	bgt.n	ba176 <_strtod_l+0x91e>
   ba07e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   ba082:	f77f aea9 	ble.w	b9dd8 <_strtod_l+0x580>
   ba086:	4b4d      	ldr	r3, [pc, #308]	; (ba1bc <_strtod_l+0x964>)
   ba088:	4650      	mov	r0, sl
   ba08a:	4659      	mov	r1, fp
   ba08c:	2200      	movs	r2, #0
   ba08e:	f7fa f983 	bl	b4398 <__aeabi_dmul>
   ba092:	460b      	mov	r3, r1
   ba094:	4303      	orrs	r3, r0
   ba096:	bf08      	it	eq
   ba098:	2322      	moveq	r3, #34	; 0x22
   ba09a:	4682      	mov	sl, r0
   ba09c:	468b      	mov	fp, r1
   ba09e:	bf08      	it	eq
   ba0a0:	6023      	streq	r3, [r4, #0]
   ba0a2:	e62b      	b.n	b9cfc <_strtod_l+0x4a4>
   ba0a4:	f04f 32ff 	mov.w	r2, #4294967295
   ba0a8:	fa02 f303 	lsl.w	r3, r2, r3
   ba0ac:	ea03 0a0a 	and.w	sl, r3, sl
   ba0b0:	e6e3      	b.n	b9e7a <_strtod_l+0x622>
   ba0b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   ba0b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   ba0ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   ba0be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   ba0c2:	fa01 f308 	lsl.w	r3, r1, r8
   ba0c6:	9308      	str	r3, [sp, #32]
   ba0c8:	910d      	str	r1, [sp, #52]	; 0x34
   ba0ca:	e746      	b.n	b9f5a <_strtod_l+0x702>
   ba0cc:	2300      	movs	r3, #0
   ba0ce:	9308      	str	r3, [sp, #32]
   ba0d0:	2301      	movs	r3, #1
   ba0d2:	930d      	str	r3, [sp, #52]	; 0x34
   ba0d4:	e741      	b.n	b9f5a <_strtod_l+0x702>
   ba0d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba0d8:	4642      	mov	r2, r8
   ba0da:	4620      	mov	r0, r4
   ba0dc:	f001 f8fa 	bl	bb2d4 <__lshift>
   ba0e0:	9018      	str	r0, [sp, #96]	; 0x60
   ba0e2:	2800      	cmp	r0, #0
   ba0e4:	f47f af6b 	bne.w	b9fbe <_strtod_l+0x766>
   ba0e8:	e5fe      	b.n	b9ce8 <_strtod_l+0x490>
   ba0ea:	465f      	mov	r7, fp
   ba0ec:	d16e      	bne.n	ba1cc <_strtod_l+0x974>
   ba0ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba0f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba0f4:	b342      	cbz	r2, ba148 <_strtod_l+0x8f0>
   ba0f6:	4a32      	ldr	r2, [pc, #200]	; (ba1c0 <_strtod_l+0x968>)
   ba0f8:	4293      	cmp	r3, r2
   ba0fa:	d128      	bne.n	ba14e <_strtod_l+0x8f6>
   ba0fc:	9b04      	ldr	r3, [sp, #16]
   ba0fe:	4651      	mov	r1, sl
   ba100:	b1eb      	cbz	r3, ba13e <_strtod_l+0x8e6>
   ba102:	4b2d      	ldr	r3, [pc, #180]	; (ba1b8 <_strtod_l+0x960>)
   ba104:	403b      	ands	r3, r7
   ba106:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba10a:	f04f 32ff 	mov.w	r2, #4294967295
   ba10e:	d819      	bhi.n	ba144 <_strtod_l+0x8ec>
   ba110:	0d1b      	lsrs	r3, r3, #20
   ba112:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba116:	fa02 f303 	lsl.w	r3, r2, r3
   ba11a:	4299      	cmp	r1, r3
   ba11c:	d117      	bne.n	ba14e <_strtod_l+0x8f6>
   ba11e:	4b29      	ldr	r3, [pc, #164]	; (ba1c4 <_strtod_l+0x96c>)
   ba120:	429f      	cmp	r7, r3
   ba122:	d102      	bne.n	ba12a <_strtod_l+0x8d2>
   ba124:	3101      	adds	r1, #1
   ba126:	f43f addf 	beq.w	b9ce8 <_strtod_l+0x490>
   ba12a:	4b23      	ldr	r3, [pc, #140]	; (ba1b8 <_strtod_l+0x960>)
   ba12c:	403b      	ands	r3, r7
   ba12e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   ba132:	f04f 0a00 	mov.w	sl, #0
   ba136:	9b04      	ldr	r3, [sp, #16]
   ba138:	2b00      	cmp	r3, #0
   ba13a:	d1a4      	bne.n	ba086 <_strtod_l+0x82e>
   ba13c:	e5de      	b.n	b9cfc <_strtod_l+0x4a4>
   ba13e:	f04f 33ff 	mov.w	r3, #4294967295
   ba142:	e7ea      	b.n	ba11a <_strtod_l+0x8c2>
   ba144:	4613      	mov	r3, r2
   ba146:	e7e8      	b.n	ba11a <_strtod_l+0x8c2>
   ba148:	ea53 030a 	orrs.w	r3, r3, sl
   ba14c:	d08c      	beq.n	ba068 <_strtod_l+0x810>
   ba14e:	9b08      	ldr	r3, [sp, #32]
   ba150:	b1db      	cbz	r3, ba18a <_strtod_l+0x932>
   ba152:	423b      	tst	r3, r7
   ba154:	d0ef      	beq.n	ba136 <_strtod_l+0x8de>
   ba156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba158:	9a04      	ldr	r2, [sp, #16]
   ba15a:	4650      	mov	r0, sl
   ba15c:	4659      	mov	r1, fp
   ba15e:	b1c3      	cbz	r3, ba192 <_strtod_l+0x93a>
   ba160:	f7ff fb5b 	bl	b981a <sulp>
   ba164:	4602      	mov	r2, r0
   ba166:	460b      	mov	r3, r1
   ba168:	ec51 0b18 	vmov	r0, r1, d8
   ba16c:	f7f9 ff5e 	bl	b402c <__adddf3>
   ba170:	4682      	mov	sl, r0
   ba172:	468b      	mov	fp, r1
   ba174:	e7df      	b.n	ba136 <_strtod_l+0x8de>
   ba176:	4013      	ands	r3, r2
   ba178:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   ba17c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   ba180:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   ba184:	f04f 3aff 	mov.w	sl, #4294967295
   ba188:	e7d5      	b.n	ba136 <_strtod_l+0x8de>
   ba18a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba18c:	ea13 0f0a 	tst.w	r3, sl
   ba190:	e7e0      	b.n	ba154 <_strtod_l+0x8fc>
   ba192:	f7ff fb42 	bl	b981a <sulp>
   ba196:	4602      	mov	r2, r0
   ba198:	460b      	mov	r3, r1
   ba19a:	ec51 0b18 	vmov	r0, r1, d8
   ba19e:	f7f9 ff43 	bl	b4028 <__aeabi_dsub>
   ba1a2:	2200      	movs	r2, #0
   ba1a4:	2300      	movs	r3, #0
   ba1a6:	4682      	mov	sl, r0
   ba1a8:	468b      	mov	fp, r1
   ba1aa:	f7fa fb5d 	bl	b4868 <__aeabi_dcmpeq>
   ba1ae:	2800      	cmp	r0, #0
   ba1b0:	d0c1      	beq.n	ba136 <_strtod_l+0x8de>
   ba1b2:	e611      	b.n	b9dd8 <_strtod_l+0x580>
   ba1b4:	fffffc02 	.word	0xfffffc02
   ba1b8:	7ff00000 	.word	0x7ff00000
   ba1bc:	39500000 	.word	0x39500000
   ba1c0:	000fffff 	.word	0x000fffff
   ba1c4:	7fefffff 	.word	0x7fefffff
   ba1c8:	000bc340 	.word	0x000bc340
   ba1cc:	4631      	mov	r1, r6
   ba1ce:	4628      	mov	r0, r5
   ba1d0:	f001 fa6e 	bl	bb6b0 <__ratio>
   ba1d4:	ec59 8b10 	vmov	r8, r9, d0
   ba1d8:	ee10 0a10 	vmov	r0, s0
   ba1dc:	2200      	movs	r2, #0
   ba1de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba1e2:	4649      	mov	r1, r9
   ba1e4:	f7fa fb54 	bl	b4890 <__aeabi_dcmple>
   ba1e8:	2800      	cmp	r0, #0
   ba1ea:	d07a      	beq.n	ba2e2 <_strtod_l+0xa8a>
   ba1ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba1ee:	2b00      	cmp	r3, #0
   ba1f0:	d04a      	beq.n	ba288 <_strtod_l+0xa30>
   ba1f2:	4b95      	ldr	r3, [pc, #596]	; (ba448 <_strtod_l+0xbf0>)
   ba1f4:	2200      	movs	r2, #0
   ba1f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba1fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba448 <_strtod_l+0xbf0>
   ba1fe:	f04f 0800 	mov.w	r8, #0
   ba202:	4b92      	ldr	r3, [pc, #584]	; (ba44c <_strtod_l+0xbf4>)
   ba204:	403b      	ands	r3, r7
   ba206:	930d      	str	r3, [sp, #52]	; 0x34
   ba208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba20a:	4b91      	ldr	r3, [pc, #580]	; (ba450 <_strtod_l+0xbf8>)
   ba20c:	429a      	cmp	r2, r3
   ba20e:	f040 80b0 	bne.w	ba372 <_strtod_l+0xb1a>
   ba212:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba216:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   ba21a:	ec4b ab10 	vmov	d0, sl, fp
   ba21e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba222:	f001 f96d 	bl	bb500 <__ulp>
   ba226:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba22a:	ec53 2b10 	vmov	r2, r3, d0
   ba22e:	f7fa f8b3 	bl	b4398 <__aeabi_dmul>
   ba232:	4652      	mov	r2, sl
   ba234:	465b      	mov	r3, fp
   ba236:	f7f9 fef9 	bl	b402c <__adddf3>
   ba23a:	460b      	mov	r3, r1
   ba23c:	4983      	ldr	r1, [pc, #524]	; (ba44c <_strtod_l+0xbf4>)
   ba23e:	4a85      	ldr	r2, [pc, #532]	; (ba454 <_strtod_l+0xbfc>)
   ba240:	4019      	ands	r1, r3
   ba242:	4291      	cmp	r1, r2
   ba244:	4682      	mov	sl, r0
   ba246:	d960      	bls.n	ba30a <_strtod_l+0xab2>
   ba248:	ee18 3a90 	vmov	r3, s17
   ba24c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   ba250:	4293      	cmp	r3, r2
   ba252:	d104      	bne.n	ba25e <_strtod_l+0xa06>
   ba254:	ee18 3a10 	vmov	r3, s16
   ba258:	3301      	adds	r3, #1
   ba25a:	f43f ad45 	beq.w	b9ce8 <_strtod_l+0x490>
   ba25e:	f8df b200 	ldr.w	fp, [pc, #512]	; ba460 <_strtod_l+0xc08>
   ba262:	f04f 3aff 	mov.w	sl, #4294967295
   ba266:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba268:	4620      	mov	r0, r4
   ba26a:	f000 fe17 	bl	bae9c <_Bfree>
   ba26e:	9905      	ldr	r1, [sp, #20]
   ba270:	4620      	mov	r0, r4
   ba272:	f000 fe13 	bl	bae9c <_Bfree>
   ba276:	4631      	mov	r1, r6
   ba278:	4620      	mov	r0, r4
   ba27a:	f000 fe0f 	bl	bae9c <_Bfree>
   ba27e:	4629      	mov	r1, r5
   ba280:	4620      	mov	r0, r4
   ba282:	f000 fe0b 	bl	bae9c <_Bfree>
   ba286:	e61a      	b.n	b9ebe <_strtod_l+0x666>
   ba288:	f1ba 0f00 	cmp.w	sl, #0
   ba28c:	d11b      	bne.n	ba2c6 <_strtod_l+0xa6e>
   ba28e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba292:	b9f3      	cbnz	r3, ba2d2 <_strtod_l+0xa7a>
   ba294:	4b6c      	ldr	r3, [pc, #432]	; (ba448 <_strtod_l+0xbf0>)
   ba296:	2200      	movs	r2, #0
   ba298:	4640      	mov	r0, r8
   ba29a:	4649      	mov	r1, r9
   ba29c:	f7fa faee 	bl	b487c <__aeabi_dcmplt>
   ba2a0:	b9d0      	cbnz	r0, ba2d8 <_strtod_l+0xa80>
   ba2a2:	4640      	mov	r0, r8
   ba2a4:	4649      	mov	r1, r9
   ba2a6:	4b6c      	ldr	r3, [pc, #432]	; (ba458 <_strtod_l+0xc00>)
   ba2a8:	2200      	movs	r2, #0
   ba2aa:	f7fa f875 	bl	b4398 <__aeabi_dmul>
   ba2ae:	4680      	mov	r8, r0
   ba2b0:	4689      	mov	r9, r1
   ba2b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ba2b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   ba2ba:	9315      	str	r3, [sp, #84]	; 0x54
   ba2bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ba2c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba2c4:	e79d      	b.n	ba202 <_strtod_l+0x9aa>
   ba2c6:	f1ba 0f01 	cmp.w	sl, #1
   ba2ca:	d102      	bne.n	ba2d2 <_strtod_l+0xa7a>
   ba2cc:	2f00      	cmp	r7, #0
   ba2ce:	f43f ad83 	beq.w	b9dd8 <_strtod_l+0x580>
   ba2d2:	4b62      	ldr	r3, [pc, #392]	; (ba45c <_strtod_l+0xc04>)
   ba2d4:	2200      	movs	r2, #0
   ba2d6:	e78e      	b.n	ba1f6 <_strtod_l+0x99e>
   ba2d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba458 <_strtod_l+0xc00>
   ba2dc:	f04f 0800 	mov.w	r8, #0
   ba2e0:	e7e7      	b.n	ba2b2 <_strtod_l+0xa5a>
   ba2e2:	4b5d      	ldr	r3, [pc, #372]	; (ba458 <_strtod_l+0xc00>)
   ba2e4:	4640      	mov	r0, r8
   ba2e6:	4649      	mov	r1, r9
   ba2e8:	2200      	movs	r2, #0
   ba2ea:	f7fa f855 	bl	b4398 <__aeabi_dmul>
   ba2ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba2f0:	4680      	mov	r8, r0
   ba2f2:	4689      	mov	r9, r1
   ba2f4:	b933      	cbnz	r3, ba304 <_strtod_l+0xaac>
   ba2f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba2fa:	900e      	str	r0, [sp, #56]	; 0x38
   ba2fc:	930f      	str	r3, [sp, #60]	; 0x3c
   ba2fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   ba302:	e7dd      	b.n	ba2c0 <_strtod_l+0xa68>
   ba304:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   ba308:	e7f9      	b.n	ba2fe <_strtod_l+0xaa6>
   ba30a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ba30e:	9b04      	ldr	r3, [sp, #16]
   ba310:	2b00      	cmp	r3, #0
   ba312:	d1a8      	bne.n	ba266 <_strtod_l+0xa0e>
   ba314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba31a:	0d1b      	lsrs	r3, r3, #20
   ba31c:	051b      	lsls	r3, r3, #20
   ba31e:	429a      	cmp	r2, r3
   ba320:	d1a1      	bne.n	ba266 <_strtod_l+0xa0e>
   ba322:	4640      	mov	r0, r8
   ba324:	4649      	mov	r1, r9
   ba326:	f7fa fb55 	bl	b49d4 <__aeabi_d2lz>
   ba32a:	f7fa f807 	bl	b433c <__aeabi_l2d>
   ba32e:	4602      	mov	r2, r0
   ba330:	460b      	mov	r3, r1
   ba332:	4640      	mov	r0, r8
   ba334:	4649      	mov	r1, r9
   ba336:	f7f9 fe77 	bl	b4028 <__aeabi_dsub>
   ba33a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba33c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba340:	ea43 030a 	orr.w	r3, r3, sl
   ba344:	4313      	orrs	r3, r2
   ba346:	4680      	mov	r8, r0
   ba348:	4689      	mov	r9, r1
   ba34a:	d055      	beq.n	ba3f8 <_strtod_l+0xba0>
   ba34c:	a336      	add	r3, pc, #216	; (adr r3, ba428 <_strtod_l+0xbd0>)
   ba34e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba352:	f7fa fa93 	bl	b487c <__aeabi_dcmplt>
   ba356:	2800      	cmp	r0, #0
   ba358:	f47f acd0 	bne.w	b9cfc <_strtod_l+0x4a4>
   ba35c:	a334      	add	r3, pc, #208	; (adr r3, ba430 <_strtod_l+0xbd8>)
   ba35e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba362:	4640      	mov	r0, r8
   ba364:	4649      	mov	r1, r9
   ba366:	f7fa faa7 	bl	b48b8 <__aeabi_dcmpgt>
   ba36a:	2800      	cmp	r0, #0
   ba36c:	f43f af7b 	beq.w	ba266 <_strtod_l+0xa0e>
   ba370:	e4c4      	b.n	b9cfc <_strtod_l+0x4a4>
   ba372:	9b04      	ldr	r3, [sp, #16]
   ba374:	b333      	cbz	r3, ba3c4 <_strtod_l+0xb6c>
   ba376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba378:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba37c:	d822      	bhi.n	ba3c4 <_strtod_l+0xb6c>
   ba37e:	a32e      	add	r3, pc, #184	; (adr r3, ba438 <_strtod_l+0xbe0>)
   ba380:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba384:	4640      	mov	r0, r8
   ba386:	4649      	mov	r1, r9
   ba388:	f7fa fa82 	bl	b4890 <__aeabi_dcmple>
   ba38c:	b1a0      	cbz	r0, ba3b8 <_strtod_l+0xb60>
   ba38e:	4649      	mov	r1, r9
   ba390:	4640      	mov	r0, r8
   ba392:	f7fa fa9b 	bl	b48cc <__aeabi_d2uiz>
   ba396:	2801      	cmp	r0, #1
   ba398:	bf38      	it	cc
   ba39a:	2001      	movcc	r0, #1
   ba39c:	f7f9 ff82 	bl	b42a4 <__aeabi_ui2d>
   ba3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba3a2:	4680      	mov	r8, r0
   ba3a4:	4689      	mov	r9, r1
   ba3a6:	bb23      	cbnz	r3, ba3f2 <_strtod_l+0xb9a>
   ba3a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba3ac:	9010      	str	r0, [sp, #64]	; 0x40
   ba3ae:	9311      	str	r3, [sp, #68]	; 0x44
   ba3b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba3b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba3ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba3bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba3c0:	1a9b      	subs	r3, r3, r2
   ba3c2:	9309      	str	r3, [sp, #36]	; 0x24
   ba3c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba3c8:	eeb0 0a48 	vmov.f32	s0, s16
   ba3cc:	eef0 0a68 	vmov.f32	s1, s17
   ba3d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba3d4:	f001 f894 	bl	bb500 <__ulp>
   ba3d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba3dc:	ec53 2b10 	vmov	r2, r3, d0
   ba3e0:	f7f9 ffda 	bl	b4398 <__aeabi_dmul>
   ba3e4:	ec53 2b18 	vmov	r2, r3, d8
   ba3e8:	f7f9 fe20 	bl	b402c <__adddf3>
   ba3ec:	4682      	mov	sl, r0
   ba3ee:	468b      	mov	fp, r1
   ba3f0:	e78d      	b.n	ba30e <_strtod_l+0xab6>
   ba3f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba3f6:	e7db      	b.n	ba3b0 <_strtod_l+0xb58>
   ba3f8:	a311      	add	r3, pc, #68	; (adr r3, ba440 <_strtod_l+0xbe8>)
   ba3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3fe:	f7fa fa3d 	bl	b487c <__aeabi_dcmplt>
   ba402:	e7b2      	b.n	ba36a <_strtod_l+0xb12>
   ba404:	2300      	movs	r3, #0
   ba406:	930a      	str	r3, [sp, #40]	; 0x28
   ba408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba40a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba40c:	6013      	str	r3, [r2, #0]
   ba40e:	f7ff ba6b 	b.w	b98e8 <_strtod_l+0x90>
   ba412:	2a65      	cmp	r2, #101	; 0x65
   ba414:	f43f ab5f 	beq.w	b9ad6 <_strtod_l+0x27e>
   ba418:	2a45      	cmp	r2, #69	; 0x45
   ba41a:	f43f ab5c 	beq.w	b9ad6 <_strtod_l+0x27e>
   ba41e:	2301      	movs	r3, #1
   ba420:	f7ff bb94 	b.w	b9b4c <_strtod_l+0x2f4>
   ba424:	f3af 8000 	nop.w
   ba428:	94a03595 	.word	0x94a03595
   ba42c:	3fdfffff 	.word	0x3fdfffff
   ba430:	35afe535 	.word	0x35afe535
   ba434:	3fe00000 	.word	0x3fe00000
   ba438:	ffc00000 	.word	0xffc00000
   ba43c:	41dfffff 	.word	0x41dfffff
   ba440:	94a03595 	.word	0x94a03595
   ba444:	3fcfffff 	.word	0x3fcfffff
   ba448:	3ff00000 	.word	0x3ff00000
   ba44c:	7ff00000 	.word	0x7ff00000
   ba450:	7fe00000 	.word	0x7fe00000
   ba454:	7c9fffff 	.word	0x7c9fffff
   ba458:	3fe00000 	.word	0x3fe00000
   ba45c:	bff00000 	.word	0xbff00000
   ba460:	7fefffff 	.word	0x7fefffff

000ba464 <strtod>:
   ba464:	460a      	mov	r2, r1
   ba466:	4601      	mov	r1, r0
   ba468:	4802      	ldr	r0, [pc, #8]	; (ba474 <strtod+0x10>)
   ba46a:	4b03      	ldr	r3, [pc, #12]	; (ba478 <strtod+0x14>)
   ba46c:	6800      	ldr	r0, [r0, #0]
   ba46e:	f7ff b9f3 	b.w	b9858 <_strtod_l>
   ba472:	bf00      	nop
   ba474:	2003d984 	.word	0x2003d984
   ba478:	2003d9f0 	.word	0x2003d9f0

000ba47c <strtok>:
   ba47c:	4b16      	ldr	r3, [pc, #88]	; (ba4d8 <strtok+0x5c>)
   ba47e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba480:	681e      	ldr	r6, [r3, #0]
   ba482:	6db4      	ldr	r4, [r6, #88]	; 0x58
   ba484:	4605      	mov	r5, r0
   ba486:	b9fc      	cbnz	r4, ba4c8 <strtok+0x4c>
   ba488:	2050      	movs	r0, #80	; 0x50
   ba48a:	9101      	str	r1, [sp, #4]
   ba48c:	f7fb ffb4 	bl	b63f8 <malloc>
   ba490:	9901      	ldr	r1, [sp, #4]
   ba492:	65b0      	str	r0, [r6, #88]	; 0x58
   ba494:	4602      	mov	r2, r0
   ba496:	b920      	cbnz	r0, ba4a2 <strtok+0x26>
   ba498:	4b10      	ldr	r3, [pc, #64]	; (ba4dc <strtok+0x60>)
   ba49a:	4811      	ldr	r0, [pc, #68]	; (ba4e0 <strtok+0x64>)
   ba49c:	2157      	movs	r1, #87	; 0x57
   ba49e:	f7fb ffeb 	bl	b6478 <__assert_func>
   ba4a2:	e9c0 4400 	strd	r4, r4, [r0]
   ba4a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   ba4aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   ba4ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   ba4b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   ba4b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   ba4ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   ba4be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   ba4c2:	6184      	str	r4, [r0, #24]
   ba4c4:	7704      	strb	r4, [r0, #28]
   ba4c6:	6244      	str	r4, [r0, #36]	; 0x24
   ba4c8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   ba4ca:	2301      	movs	r3, #1
   ba4cc:	4628      	mov	r0, r5
   ba4ce:	b002      	add	sp, #8
   ba4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba4d4:	f000 b806 	b.w	ba4e4 <__strtok_r>
   ba4d8:	2003d984 	.word	0x2003d984
   ba4dc:	000bc271 	.word	0x000bc271
   ba4e0:	000bc368 	.word	0x000bc368

000ba4e4 <__strtok_r>:
   ba4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba4e6:	b908      	cbnz	r0, ba4ec <__strtok_r+0x8>
   ba4e8:	6810      	ldr	r0, [r2, #0]
   ba4ea:	b188      	cbz	r0, ba510 <__strtok_r+0x2c>
   ba4ec:	4604      	mov	r4, r0
   ba4ee:	4620      	mov	r0, r4
   ba4f0:	f814 5b01 	ldrb.w	r5, [r4], #1
   ba4f4:	460f      	mov	r7, r1
   ba4f6:	f817 6b01 	ldrb.w	r6, [r7], #1
   ba4fa:	b91e      	cbnz	r6, ba504 <__strtok_r+0x20>
   ba4fc:	b965      	cbnz	r5, ba518 <__strtok_r+0x34>
   ba4fe:	6015      	str	r5, [r2, #0]
   ba500:	4628      	mov	r0, r5
   ba502:	e005      	b.n	ba510 <__strtok_r+0x2c>
   ba504:	42b5      	cmp	r5, r6
   ba506:	d1f6      	bne.n	ba4f6 <__strtok_r+0x12>
   ba508:	2b00      	cmp	r3, #0
   ba50a:	d1f0      	bne.n	ba4ee <__strtok_r+0xa>
   ba50c:	6014      	str	r4, [r2, #0]
   ba50e:	7003      	strb	r3, [r0, #0]
   ba510:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba512:	461c      	mov	r4, r3
   ba514:	e00c      	b.n	ba530 <__strtok_r+0x4c>
   ba516:	b915      	cbnz	r5, ba51e <__strtok_r+0x3a>
   ba518:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba51c:	460e      	mov	r6, r1
   ba51e:	f816 5b01 	ldrb.w	r5, [r6], #1
   ba522:	42ab      	cmp	r3, r5
   ba524:	d1f7      	bne.n	ba516 <__strtok_r+0x32>
   ba526:	2b00      	cmp	r3, #0
   ba528:	d0f3      	beq.n	ba512 <__strtok_r+0x2e>
   ba52a:	2300      	movs	r3, #0
   ba52c:	f804 3c01 	strb.w	r3, [r4, #-1]
   ba530:	6014      	str	r4, [r2, #0]
   ba532:	e7ed      	b.n	ba510 <__strtok_r+0x2c>

000ba534 <_strtol_l.constprop.0>:
   ba534:	2b01      	cmp	r3, #1
   ba536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba53a:	d001      	beq.n	ba540 <_strtol_l.constprop.0+0xc>
   ba53c:	2b24      	cmp	r3, #36	; 0x24
   ba53e:	d906      	bls.n	ba54e <_strtol_l.constprop.0+0x1a>
   ba540:	f7fb ff92 	bl	b6468 <__errno>
   ba544:	2316      	movs	r3, #22
   ba546:	6003      	str	r3, [r0, #0]
   ba548:	2000      	movs	r0, #0
   ba54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba54e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba634 <_strtol_l.constprop.0+0x100>
   ba552:	460d      	mov	r5, r1
   ba554:	462e      	mov	r6, r5
   ba556:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba55a:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba55e:	f017 0708 	ands.w	r7, r7, #8
   ba562:	d1f7      	bne.n	ba554 <_strtol_l.constprop.0+0x20>
   ba564:	2c2d      	cmp	r4, #45	; 0x2d
   ba566:	d132      	bne.n	ba5ce <_strtol_l.constprop.0+0x9a>
   ba568:	782c      	ldrb	r4, [r5, #0]
   ba56a:	2701      	movs	r7, #1
   ba56c:	1cb5      	adds	r5, r6, #2
   ba56e:	2b00      	cmp	r3, #0
   ba570:	d05b      	beq.n	ba62a <_strtol_l.constprop.0+0xf6>
   ba572:	2b10      	cmp	r3, #16
   ba574:	d109      	bne.n	ba58a <_strtol_l.constprop.0+0x56>
   ba576:	2c30      	cmp	r4, #48	; 0x30
   ba578:	d107      	bne.n	ba58a <_strtol_l.constprop.0+0x56>
   ba57a:	782c      	ldrb	r4, [r5, #0]
   ba57c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba580:	2c58      	cmp	r4, #88	; 0x58
   ba582:	d14d      	bne.n	ba620 <_strtol_l.constprop.0+0xec>
   ba584:	786c      	ldrb	r4, [r5, #1]
   ba586:	2310      	movs	r3, #16
   ba588:	3502      	adds	r5, #2
   ba58a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba58e:	f108 38ff 	add.w	r8, r8, #4294967295
   ba592:	f04f 0c00 	mov.w	ip, #0
   ba596:	fbb8 f9f3 	udiv	r9, r8, r3
   ba59a:	4666      	mov	r6, ip
   ba59c:	fb03 8a19 	mls	sl, r3, r9, r8
   ba5a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba5a4:	f1be 0f09 	cmp.w	lr, #9
   ba5a8:	d816      	bhi.n	ba5d8 <_strtol_l.constprop.0+0xa4>
   ba5aa:	4674      	mov	r4, lr
   ba5ac:	42a3      	cmp	r3, r4
   ba5ae:	dd24      	ble.n	ba5fa <_strtol_l.constprop.0+0xc6>
   ba5b0:	f1bc 0f00 	cmp.w	ip, #0
   ba5b4:	db1e      	blt.n	ba5f4 <_strtol_l.constprop.0+0xc0>
   ba5b6:	45b1      	cmp	r9, r6
   ba5b8:	d31c      	bcc.n	ba5f4 <_strtol_l.constprop.0+0xc0>
   ba5ba:	d101      	bne.n	ba5c0 <_strtol_l.constprop.0+0x8c>
   ba5bc:	45a2      	cmp	sl, r4
   ba5be:	db19      	blt.n	ba5f4 <_strtol_l.constprop.0+0xc0>
   ba5c0:	fb06 4603 	mla	r6, r6, r3, r4
   ba5c4:	f04f 0c01 	mov.w	ip, #1
   ba5c8:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba5cc:	e7e8      	b.n	ba5a0 <_strtol_l.constprop.0+0x6c>
   ba5ce:	2c2b      	cmp	r4, #43	; 0x2b
   ba5d0:	bf04      	itt	eq
   ba5d2:	782c      	ldrbeq	r4, [r5, #0]
   ba5d4:	1cb5      	addeq	r5, r6, #2
   ba5d6:	e7ca      	b.n	ba56e <_strtol_l.constprop.0+0x3a>
   ba5d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba5dc:	f1be 0f19 	cmp.w	lr, #25
   ba5e0:	d801      	bhi.n	ba5e6 <_strtol_l.constprop.0+0xb2>
   ba5e2:	3c37      	subs	r4, #55	; 0x37
   ba5e4:	e7e2      	b.n	ba5ac <_strtol_l.constprop.0+0x78>
   ba5e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba5ea:	f1be 0f19 	cmp.w	lr, #25
   ba5ee:	d804      	bhi.n	ba5fa <_strtol_l.constprop.0+0xc6>
   ba5f0:	3c57      	subs	r4, #87	; 0x57
   ba5f2:	e7db      	b.n	ba5ac <_strtol_l.constprop.0+0x78>
   ba5f4:	f04f 3cff 	mov.w	ip, #4294967295
   ba5f8:	e7e6      	b.n	ba5c8 <_strtol_l.constprop.0+0x94>
   ba5fa:	f1bc 0f00 	cmp.w	ip, #0
   ba5fe:	da05      	bge.n	ba60c <_strtol_l.constprop.0+0xd8>
   ba600:	2322      	movs	r3, #34	; 0x22
   ba602:	6003      	str	r3, [r0, #0]
   ba604:	4646      	mov	r6, r8
   ba606:	b942      	cbnz	r2, ba61a <_strtol_l.constprop.0+0xe6>
   ba608:	4630      	mov	r0, r6
   ba60a:	e79e      	b.n	ba54a <_strtol_l.constprop.0+0x16>
   ba60c:	b107      	cbz	r7, ba610 <_strtol_l.constprop.0+0xdc>
   ba60e:	4276      	negs	r6, r6
   ba610:	2a00      	cmp	r2, #0
   ba612:	d0f9      	beq.n	ba608 <_strtol_l.constprop.0+0xd4>
   ba614:	f1bc 0f00 	cmp.w	ip, #0
   ba618:	d000      	beq.n	ba61c <_strtol_l.constprop.0+0xe8>
   ba61a:	1e69      	subs	r1, r5, #1
   ba61c:	6011      	str	r1, [r2, #0]
   ba61e:	e7f3      	b.n	ba608 <_strtol_l.constprop.0+0xd4>
   ba620:	2430      	movs	r4, #48	; 0x30
   ba622:	2b00      	cmp	r3, #0
   ba624:	d1b1      	bne.n	ba58a <_strtol_l.constprop.0+0x56>
   ba626:	2308      	movs	r3, #8
   ba628:	e7af      	b.n	ba58a <_strtol_l.constprop.0+0x56>
   ba62a:	2c30      	cmp	r4, #48	; 0x30
   ba62c:	d0a5      	beq.n	ba57a <_strtol_l.constprop.0+0x46>
   ba62e:	230a      	movs	r3, #10
   ba630:	e7ab      	b.n	ba58a <_strtol_l.constprop.0+0x56>
   ba632:	bf00      	nop
   ba634:	000bc3e8 	.word	0x000bc3e8

000ba638 <strtol>:
   ba638:	4613      	mov	r3, r2
   ba63a:	460a      	mov	r2, r1
   ba63c:	4601      	mov	r1, r0
   ba63e:	4802      	ldr	r0, [pc, #8]	; (ba648 <strtol+0x10>)
   ba640:	6800      	ldr	r0, [r0, #0]
   ba642:	f7ff bf77 	b.w	ba534 <_strtol_l.constprop.0>
   ba646:	bf00      	nop
   ba648:	2003d984 	.word	0x2003d984

000ba64c <__register_exitproc>:
   ba64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba650:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba70c <__register_exitproc+0xc0>
   ba654:	4606      	mov	r6, r0
   ba656:	f8d8 0000 	ldr.w	r0, [r8]
   ba65a:	461f      	mov	r7, r3
   ba65c:	460d      	mov	r5, r1
   ba65e:	4691      	mov	r9, r2
   ba660:	f000 fbc6 	bl	badf0 <__retarget_lock_acquire_recursive>
   ba664:	4b25      	ldr	r3, [pc, #148]	; (ba6fc <__register_exitproc+0xb0>)
   ba666:	681c      	ldr	r4, [r3, #0]
   ba668:	b934      	cbnz	r4, ba678 <__register_exitproc+0x2c>
   ba66a:	4c25      	ldr	r4, [pc, #148]	; (ba700 <__register_exitproc+0xb4>)
   ba66c:	601c      	str	r4, [r3, #0]
   ba66e:	4b25      	ldr	r3, [pc, #148]	; (ba704 <__register_exitproc+0xb8>)
   ba670:	b113      	cbz	r3, ba678 <__register_exitproc+0x2c>
   ba672:	681b      	ldr	r3, [r3, #0]
   ba674:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba678:	6863      	ldr	r3, [r4, #4]
   ba67a:	2b1f      	cmp	r3, #31
   ba67c:	dd07      	ble.n	ba68e <__register_exitproc+0x42>
   ba67e:	f8d8 0000 	ldr.w	r0, [r8]
   ba682:	f000 fbb7 	bl	badf4 <__retarget_lock_release_recursive>
   ba686:	f04f 30ff 	mov.w	r0, #4294967295
   ba68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba68e:	b34e      	cbz	r6, ba6e4 <__register_exitproc+0x98>
   ba690:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba694:	b988      	cbnz	r0, ba6ba <__register_exitproc+0x6e>
   ba696:	4b1c      	ldr	r3, [pc, #112]	; (ba708 <__register_exitproc+0xbc>)
   ba698:	b923      	cbnz	r3, ba6a4 <__register_exitproc+0x58>
   ba69a:	f8d8 0000 	ldr.w	r0, [r8]
   ba69e:	f000 fba8 	bl	badf2 <__retarget_lock_release>
   ba6a2:	e7f0      	b.n	ba686 <__register_exitproc+0x3a>
   ba6a4:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba6a8:	f7fb fea6 	bl	b63f8 <malloc>
   ba6ac:	2800      	cmp	r0, #0
   ba6ae:	d0f4      	beq.n	ba69a <__register_exitproc+0x4e>
   ba6b0:	2300      	movs	r3, #0
   ba6b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba6b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba6ba:	6863      	ldr	r3, [r4, #4]
   ba6bc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba6c0:	2201      	movs	r2, #1
   ba6c2:	409a      	lsls	r2, r3
   ba6c4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba6c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba6cc:	4313      	orrs	r3, r2
   ba6ce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba6d2:	2e02      	cmp	r6, #2
   ba6d4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba6d8:	bf02      	ittt	eq
   ba6da:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba6de:	4313      	orreq	r3, r2
   ba6e0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba6e4:	6863      	ldr	r3, [r4, #4]
   ba6e6:	f8d8 0000 	ldr.w	r0, [r8]
   ba6ea:	1c5a      	adds	r2, r3, #1
   ba6ec:	3302      	adds	r3, #2
   ba6ee:	6062      	str	r2, [r4, #4]
   ba6f0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba6f4:	f000 fb7e 	bl	badf4 <__retarget_lock_release_recursive>
   ba6f8:	2000      	movs	r0, #0
   ba6fa:	e7c6      	b.n	ba68a <__register_exitproc+0x3e>
   ba6fc:	2003e7ec 	.word	0x2003e7ec
   ba700:	2003e760 	.word	0x2003e760
   ba704:	00000000 	.word	0x00000000
   ba708:	000b63f9 	.word	0x000b63f9
   ba70c:	2003d9e8 	.word	0x2003d9e8

000ba710 <rshift>:
   ba710:	6903      	ldr	r3, [r0, #16]
   ba712:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba71a:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba71e:	f100 0414 	add.w	r4, r0, #20
   ba722:	dd45      	ble.n	ba7b0 <rshift+0xa0>
   ba724:	f011 011f 	ands.w	r1, r1, #31
   ba728:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba72c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba730:	d10c      	bne.n	ba74c <rshift+0x3c>
   ba732:	f100 0710 	add.w	r7, r0, #16
   ba736:	4629      	mov	r1, r5
   ba738:	42b1      	cmp	r1, r6
   ba73a:	d334      	bcc.n	ba7a6 <rshift+0x96>
   ba73c:	1a9b      	subs	r3, r3, r2
   ba73e:	009b      	lsls	r3, r3, #2
   ba740:	1eea      	subs	r2, r5, #3
   ba742:	4296      	cmp	r6, r2
   ba744:	bf38      	it	cc
   ba746:	2300      	movcc	r3, #0
   ba748:	4423      	add	r3, r4
   ba74a:	e015      	b.n	ba778 <rshift+0x68>
   ba74c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba750:	f1c1 0820 	rsb	r8, r1, #32
   ba754:	40cf      	lsrs	r7, r1
   ba756:	f105 0e04 	add.w	lr, r5, #4
   ba75a:	46a1      	mov	r9, r4
   ba75c:	4576      	cmp	r6, lr
   ba75e:	46f4      	mov	ip, lr
   ba760:	d815      	bhi.n	ba78e <rshift+0x7e>
   ba762:	1a9a      	subs	r2, r3, r2
   ba764:	0092      	lsls	r2, r2, #2
   ba766:	3a04      	subs	r2, #4
   ba768:	3501      	adds	r5, #1
   ba76a:	42ae      	cmp	r6, r5
   ba76c:	bf38      	it	cc
   ba76e:	2200      	movcc	r2, #0
   ba770:	18a3      	adds	r3, r4, r2
   ba772:	50a7      	str	r7, [r4, r2]
   ba774:	b107      	cbz	r7, ba778 <rshift+0x68>
   ba776:	3304      	adds	r3, #4
   ba778:	1b1a      	subs	r2, r3, r4
   ba77a:	42a3      	cmp	r3, r4
   ba77c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba780:	bf08      	it	eq
   ba782:	2300      	moveq	r3, #0
   ba784:	6102      	str	r2, [r0, #16]
   ba786:	bf08      	it	eq
   ba788:	6143      	streq	r3, [r0, #20]
   ba78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba78e:	f8dc c000 	ldr.w	ip, [ip]
   ba792:	fa0c fc08 	lsl.w	ip, ip, r8
   ba796:	ea4c 0707 	orr.w	r7, ip, r7
   ba79a:	f849 7b04 	str.w	r7, [r9], #4
   ba79e:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba7a2:	40cf      	lsrs	r7, r1
   ba7a4:	e7da      	b.n	ba75c <rshift+0x4c>
   ba7a6:	f851 cb04 	ldr.w	ip, [r1], #4
   ba7aa:	f847 cf04 	str.w	ip, [r7, #4]!
   ba7ae:	e7c3      	b.n	ba738 <rshift+0x28>
   ba7b0:	4623      	mov	r3, r4
   ba7b2:	e7e1      	b.n	ba778 <rshift+0x68>

000ba7b4 <__hexdig_fun>:
   ba7b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba7b8:	2b09      	cmp	r3, #9
   ba7ba:	d802      	bhi.n	ba7c2 <__hexdig_fun+0xe>
   ba7bc:	3820      	subs	r0, #32
   ba7be:	b2c0      	uxtb	r0, r0
   ba7c0:	4770      	bx	lr
   ba7c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba7c6:	2b05      	cmp	r3, #5
   ba7c8:	d801      	bhi.n	ba7ce <__hexdig_fun+0x1a>
   ba7ca:	3847      	subs	r0, #71	; 0x47
   ba7cc:	e7f7      	b.n	ba7be <__hexdig_fun+0xa>
   ba7ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba7d2:	2b05      	cmp	r3, #5
   ba7d4:	d801      	bhi.n	ba7da <__hexdig_fun+0x26>
   ba7d6:	3827      	subs	r0, #39	; 0x27
   ba7d8:	e7f1      	b.n	ba7be <__hexdig_fun+0xa>
   ba7da:	2000      	movs	r0, #0
   ba7dc:	4770      	bx	lr
	...

000ba7e0 <__gethex>:
   ba7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba7e4:	ed2d 8b02 	vpush	{d8}
   ba7e8:	b089      	sub	sp, #36	; 0x24
   ba7ea:	ee08 0a10 	vmov	s16, r0
   ba7ee:	9304      	str	r3, [sp, #16]
   ba7f0:	4bb4      	ldr	r3, [pc, #720]	; (baac4 <__gethex+0x2e4>)
   ba7f2:	681b      	ldr	r3, [r3, #0]
   ba7f4:	9301      	str	r3, [sp, #4]
   ba7f6:	4618      	mov	r0, r3
   ba7f8:	468b      	mov	fp, r1
   ba7fa:	4690      	mov	r8, r2
   ba7fc:	f7fa f8e2 	bl	b49c4 <strlen>
   ba800:	9b01      	ldr	r3, [sp, #4]
   ba802:	f8db 2000 	ldr.w	r2, [fp]
   ba806:	4403      	add	r3, r0
   ba808:	4682      	mov	sl, r0
   ba80a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba80e:	9305      	str	r3, [sp, #20]
   ba810:	1c93      	adds	r3, r2, #2
   ba812:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba816:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba81a:	32fe      	adds	r2, #254	; 0xfe
   ba81c:	18d1      	adds	r1, r2, r3
   ba81e:	461f      	mov	r7, r3
   ba820:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba824:	9100      	str	r1, [sp, #0]
   ba826:	2830      	cmp	r0, #48	; 0x30
   ba828:	d0f8      	beq.n	ba81c <__gethex+0x3c>
   ba82a:	f7ff ffc3 	bl	ba7b4 <__hexdig_fun>
   ba82e:	4604      	mov	r4, r0
   ba830:	2800      	cmp	r0, #0
   ba832:	d13a      	bne.n	ba8aa <__gethex+0xca>
   ba834:	9901      	ldr	r1, [sp, #4]
   ba836:	4652      	mov	r2, sl
   ba838:	4638      	mov	r0, r7
   ba83a:	f7fe ffce 	bl	b97da <strncmp>
   ba83e:	4605      	mov	r5, r0
   ba840:	2800      	cmp	r0, #0
   ba842:	d168      	bne.n	ba916 <__gethex+0x136>
   ba844:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba848:	eb07 060a 	add.w	r6, r7, sl
   ba84c:	f7ff ffb2 	bl	ba7b4 <__hexdig_fun>
   ba850:	2800      	cmp	r0, #0
   ba852:	d062      	beq.n	ba91a <__gethex+0x13a>
   ba854:	4633      	mov	r3, r6
   ba856:	7818      	ldrb	r0, [r3, #0]
   ba858:	2830      	cmp	r0, #48	; 0x30
   ba85a:	461f      	mov	r7, r3
   ba85c:	f103 0301 	add.w	r3, r3, #1
   ba860:	d0f9      	beq.n	ba856 <__gethex+0x76>
   ba862:	f7ff ffa7 	bl	ba7b4 <__hexdig_fun>
   ba866:	2301      	movs	r3, #1
   ba868:	fab0 f480 	clz	r4, r0
   ba86c:	0964      	lsrs	r4, r4, #5
   ba86e:	4635      	mov	r5, r6
   ba870:	9300      	str	r3, [sp, #0]
   ba872:	463a      	mov	r2, r7
   ba874:	4616      	mov	r6, r2
   ba876:	3201      	adds	r2, #1
   ba878:	7830      	ldrb	r0, [r6, #0]
   ba87a:	f7ff ff9b 	bl	ba7b4 <__hexdig_fun>
   ba87e:	2800      	cmp	r0, #0
   ba880:	d1f8      	bne.n	ba874 <__gethex+0x94>
   ba882:	9901      	ldr	r1, [sp, #4]
   ba884:	4652      	mov	r2, sl
   ba886:	4630      	mov	r0, r6
   ba888:	f7fe ffa7 	bl	b97da <strncmp>
   ba88c:	b980      	cbnz	r0, ba8b0 <__gethex+0xd0>
   ba88e:	b94d      	cbnz	r5, ba8a4 <__gethex+0xc4>
   ba890:	eb06 050a 	add.w	r5, r6, sl
   ba894:	462a      	mov	r2, r5
   ba896:	4616      	mov	r6, r2
   ba898:	3201      	adds	r2, #1
   ba89a:	7830      	ldrb	r0, [r6, #0]
   ba89c:	f7ff ff8a 	bl	ba7b4 <__hexdig_fun>
   ba8a0:	2800      	cmp	r0, #0
   ba8a2:	d1f8      	bne.n	ba896 <__gethex+0xb6>
   ba8a4:	1bad      	subs	r5, r5, r6
   ba8a6:	00ad      	lsls	r5, r5, #2
   ba8a8:	e004      	b.n	ba8b4 <__gethex+0xd4>
   ba8aa:	2400      	movs	r4, #0
   ba8ac:	4625      	mov	r5, r4
   ba8ae:	e7e0      	b.n	ba872 <__gethex+0x92>
   ba8b0:	2d00      	cmp	r5, #0
   ba8b2:	d1f7      	bne.n	ba8a4 <__gethex+0xc4>
   ba8b4:	7833      	ldrb	r3, [r6, #0]
   ba8b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba8ba:	2b50      	cmp	r3, #80	; 0x50
   ba8bc:	d13b      	bne.n	ba936 <__gethex+0x156>
   ba8be:	7873      	ldrb	r3, [r6, #1]
   ba8c0:	2b2b      	cmp	r3, #43	; 0x2b
   ba8c2:	d02c      	beq.n	ba91e <__gethex+0x13e>
   ba8c4:	2b2d      	cmp	r3, #45	; 0x2d
   ba8c6:	d02e      	beq.n	ba926 <__gethex+0x146>
   ba8c8:	1c71      	adds	r1, r6, #1
   ba8ca:	f04f 0900 	mov.w	r9, #0
   ba8ce:	7808      	ldrb	r0, [r1, #0]
   ba8d0:	f7ff ff70 	bl	ba7b4 <__hexdig_fun>
   ba8d4:	1e43      	subs	r3, r0, #1
   ba8d6:	b2db      	uxtb	r3, r3
   ba8d8:	2b18      	cmp	r3, #24
   ba8da:	d82c      	bhi.n	ba936 <__gethex+0x156>
   ba8dc:	f1a0 0210 	sub.w	r2, r0, #16
   ba8e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba8e4:	f7ff ff66 	bl	ba7b4 <__hexdig_fun>
   ba8e8:	1e43      	subs	r3, r0, #1
   ba8ea:	b2db      	uxtb	r3, r3
   ba8ec:	2b18      	cmp	r3, #24
   ba8ee:	d91d      	bls.n	ba92c <__gethex+0x14c>
   ba8f0:	f1b9 0f00 	cmp.w	r9, #0
   ba8f4:	d000      	beq.n	ba8f8 <__gethex+0x118>
   ba8f6:	4252      	negs	r2, r2
   ba8f8:	4415      	add	r5, r2
   ba8fa:	f8cb 1000 	str.w	r1, [fp]
   ba8fe:	b1e4      	cbz	r4, ba93a <__gethex+0x15a>
   ba900:	9b00      	ldr	r3, [sp, #0]
   ba902:	2b00      	cmp	r3, #0
   ba904:	bf14      	ite	ne
   ba906:	2700      	movne	r7, #0
   ba908:	2706      	moveq	r7, #6
   ba90a:	4638      	mov	r0, r7
   ba90c:	b009      	add	sp, #36	; 0x24
   ba90e:	ecbd 8b02 	vpop	{d8}
   ba912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba916:	463e      	mov	r6, r7
   ba918:	4625      	mov	r5, r4
   ba91a:	2401      	movs	r4, #1
   ba91c:	e7ca      	b.n	ba8b4 <__gethex+0xd4>
   ba91e:	f04f 0900 	mov.w	r9, #0
   ba922:	1cb1      	adds	r1, r6, #2
   ba924:	e7d3      	b.n	ba8ce <__gethex+0xee>
   ba926:	f04f 0901 	mov.w	r9, #1
   ba92a:	e7fa      	b.n	ba922 <__gethex+0x142>
   ba92c:	230a      	movs	r3, #10
   ba92e:	fb03 0202 	mla	r2, r3, r2, r0
   ba932:	3a10      	subs	r2, #16
   ba934:	e7d4      	b.n	ba8e0 <__gethex+0x100>
   ba936:	4631      	mov	r1, r6
   ba938:	e7df      	b.n	ba8fa <__gethex+0x11a>
   ba93a:	1bf3      	subs	r3, r6, r7
   ba93c:	3b01      	subs	r3, #1
   ba93e:	4621      	mov	r1, r4
   ba940:	2b07      	cmp	r3, #7
   ba942:	dc0b      	bgt.n	ba95c <__gethex+0x17c>
   ba944:	ee18 0a10 	vmov	r0, s16
   ba948:	f000 fa68 	bl	bae1c <_Balloc>
   ba94c:	4604      	mov	r4, r0
   ba94e:	b940      	cbnz	r0, ba962 <__gethex+0x182>
   ba950:	4b5d      	ldr	r3, [pc, #372]	; (baac8 <__gethex+0x2e8>)
   ba952:	4602      	mov	r2, r0
   ba954:	21de      	movs	r1, #222	; 0xde
   ba956:	485d      	ldr	r0, [pc, #372]	; (baacc <__gethex+0x2ec>)
   ba958:	f7fb fd8e 	bl	b6478 <__assert_func>
   ba95c:	3101      	adds	r1, #1
   ba95e:	105b      	asrs	r3, r3, #1
   ba960:	e7ee      	b.n	ba940 <__gethex+0x160>
   ba962:	f100 0914 	add.w	r9, r0, #20
   ba966:	f04f 0b00 	mov.w	fp, #0
   ba96a:	f1ca 0301 	rsb	r3, sl, #1
   ba96e:	f8cd 9008 	str.w	r9, [sp, #8]
   ba972:	f8cd b000 	str.w	fp, [sp]
   ba976:	9306      	str	r3, [sp, #24]
   ba978:	42b7      	cmp	r7, r6
   ba97a:	d340      	bcc.n	ba9fe <__gethex+0x21e>
   ba97c:	9802      	ldr	r0, [sp, #8]
   ba97e:	9b00      	ldr	r3, [sp, #0]
   ba980:	f840 3b04 	str.w	r3, [r0], #4
   ba984:	eba0 0009 	sub.w	r0, r0, r9
   ba988:	1080      	asrs	r0, r0, #2
   ba98a:	0146      	lsls	r6, r0, #5
   ba98c:	6120      	str	r0, [r4, #16]
   ba98e:	4618      	mov	r0, r3
   ba990:	f000 fb36 	bl	bb000 <__hi0bits>
   ba994:	1a30      	subs	r0, r6, r0
   ba996:	f8d8 6000 	ldr.w	r6, [r8]
   ba99a:	42b0      	cmp	r0, r6
   ba99c:	dd63      	ble.n	baa66 <__gethex+0x286>
   ba99e:	1b87      	subs	r7, r0, r6
   ba9a0:	4639      	mov	r1, r7
   ba9a2:	4620      	mov	r0, r4
   ba9a4:	f000 feda 	bl	bb75c <__any_on>
   ba9a8:	4682      	mov	sl, r0
   ba9aa:	b1a8      	cbz	r0, ba9d8 <__gethex+0x1f8>
   ba9ac:	1e7b      	subs	r3, r7, #1
   ba9ae:	1159      	asrs	r1, r3, #5
   ba9b0:	f003 021f 	and.w	r2, r3, #31
   ba9b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba9b8:	f04f 0a01 	mov.w	sl, #1
   ba9bc:	fa0a f202 	lsl.w	r2, sl, r2
   ba9c0:	420a      	tst	r2, r1
   ba9c2:	d009      	beq.n	ba9d8 <__gethex+0x1f8>
   ba9c4:	4553      	cmp	r3, sl
   ba9c6:	dd05      	ble.n	ba9d4 <__gethex+0x1f4>
   ba9c8:	1eb9      	subs	r1, r7, #2
   ba9ca:	4620      	mov	r0, r4
   ba9cc:	f000 fec6 	bl	bb75c <__any_on>
   ba9d0:	2800      	cmp	r0, #0
   ba9d2:	d145      	bne.n	baa60 <__gethex+0x280>
   ba9d4:	f04f 0a02 	mov.w	sl, #2
   ba9d8:	4639      	mov	r1, r7
   ba9da:	4620      	mov	r0, r4
   ba9dc:	f7ff fe98 	bl	ba710 <rshift>
   ba9e0:	443d      	add	r5, r7
   ba9e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba9e6:	42ab      	cmp	r3, r5
   ba9e8:	da4c      	bge.n	baa84 <__gethex+0x2a4>
   ba9ea:	ee18 0a10 	vmov	r0, s16
   ba9ee:	4621      	mov	r1, r4
   ba9f0:	f000 fa54 	bl	bae9c <_Bfree>
   ba9f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba9f6:	2300      	movs	r3, #0
   ba9f8:	6013      	str	r3, [r2, #0]
   ba9fa:	27a3      	movs	r7, #163	; 0xa3
   ba9fc:	e785      	b.n	ba90a <__gethex+0x12a>
   ba9fe:	1e73      	subs	r3, r6, #1
   baa00:	9a05      	ldr	r2, [sp, #20]
   baa02:	9303      	str	r3, [sp, #12]
   baa04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   baa08:	4293      	cmp	r3, r2
   baa0a:	d019      	beq.n	baa40 <__gethex+0x260>
   baa0c:	f1bb 0f20 	cmp.w	fp, #32
   baa10:	d107      	bne.n	baa22 <__gethex+0x242>
   baa12:	9b02      	ldr	r3, [sp, #8]
   baa14:	9a00      	ldr	r2, [sp, #0]
   baa16:	f843 2b04 	str.w	r2, [r3], #4
   baa1a:	9302      	str	r3, [sp, #8]
   baa1c:	2300      	movs	r3, #0
   baa1e:	9300      	str	r3, [sp, #0]
   baa20:	469b      	mov	fp, r3
   baa22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   baa26:	f7ff fec5 	bl	ba7b4 <__hexdig_fun>
   baa2a:	9b00      	ldr	r3, [sp, #0]
   baa2c:	f000 000f 	and.w	r0, r0, #15
   baa30:	fa00 f00b 	lsl.w	r0, r0, fp
   baa34:	4303      	orrs	r3, r0
   baa36:	9300      	str	r3, [sp, #0]
   baa38:	f10b 0b04 	add.w	fp, fp, #4
   baa3c:	9b03      	ldr	r3, [sp, #12]
   baa3e:	e00d      	b.n	baa5c <__gethex+0x27c>
   baa40:	9b03      	ldr	r3, [sp, #12]
   baa42:	9a06      	ldr	r2, [sp, #24]
   baa44:	4413      	add	r3, r2
   baa46:	42bb      	cmp	r3, r7
   baa48:	d3e0      	bcc.n	baa0c <__gethex+0x22c>
   baa4a:	4618      	mov	r0, r3
   baa4c:	9901      	ldr	r1, [sp, #4]
   baa4e:	9307      	str	r3, [sp, #28]
   baa50:	4652      	mov	r2, sl
   baa52:	f7fe fec2 	bl	b97da <strncmp>
   baa56:	9b07      	ldr	r3, [sp, #28]
   baa58:	2800      	cmp	r0, #0
   baa5a:	d1d7      	bne.n	baa0c <__gethex+0x22c>
   baa5c:	461e      	mov	r6, r3
   baa5e:	e78b      	b.n	ba978 <__gethex+0x198>
   baa60:	f04f 0a03 	mov.w	sl, #3
   baa64:	e7b8      	b.n	ba9d8 <__gethex+0x1f8>
   baa66:	da0a      	bge.n	baa7e <__gethex+0x29e>
   baa68:	1a37      	subs	r7, r6, r0
   baa6a:	4621      	mov	r1, r4
   baa6c:	ee18 0a10 	vmov	r0, s16
   baa70:	463a      	mov	r2, r7
   baa72:	f000 fc2f 	bl	bb2d4 <__lshift>
   baa76:	1bed      	subs	r5, r5, r7
   baa78:	4604      	mov	r4, r0
   baa7a:	f100 0914 	add.w	r9, r0, #20
   baa7e:	f04f 0a00 	mov.w	sl, #0
   baa82:	e7ae      	b.n	ba9e2 <__gethex+0x202>
   baa84:	f8d8 0004 	ldr.w	r0, [r8, #4]
   baa88:	42a8      	cmp	r0, r5
   baa8a:	dd72      	ble.n	bab72 <__gethex+0x392>
   baa8c:	1b45      	subs	r5, r0, r5
   baa8e:	42ae      	cmp	r6, r5
   baa90:	dc36      	bgt.n	bab00 <__gethex+0x320>
   baa92:	f8d8 300c 	ldr.w	r3, [r8, #12]
   baa96:	2b02      	cmp	r3, #2
   baa98:	d02a      	beq.n	baaf0 <__gethex+0x310>
   baa9a:	2b03      	cmp	r3, #3
   baa9c:	d02c      	beq.n	baaf8 <__gethex+0x318>
   baa9e:	2b01      	cmp	r3, #1
   baaa0:	d11c      	bne.n	baadc <__gethex+0x2fc>
   baaa2:	42ae      	cmp	r6, r5
   baaa4:	d11a      	bne.n	baadc <__gethex+0x2fc>
   baaa6:	2e01      	cmp	r6, #1
   baaa8:	d112      	bne.n	baad0 <__gethex+0x2f0>
   baaaa:	9a04      	ldr	r2, [sp, #16]
   baaac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   baab0:	6013      	str	r3, [r2, #0]
   baab2:	2301      	movs	r3, #1
   baab4:	6123      	str	r3, [r4, #16]
   baab6:	f8c9 3000 	str.w	r3, [r9]
   baaba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   baabc:	2762      	movs	r7, #98	; 0x62
   baabe:	601c      	str	r4, [r3, #0]
   baac0:	e723      	b.n	ba90a <__gethex+0x12a>
   baac2:	bf00      	nop
   baac4:	000bc580 	.word	0x000bc580
   baac8:	000bc4e8 	.word	0x000bc4e8
   baacc:	000bc4f9 	.word	0x000bc4f9
   baad0:	1e71      	subs	r1, r6, #1
   baad2:	4620      	mov	r0, r4
   baad4:	f000 fe42 	bl	bb75c <__any_on>
   baad8:	2800      	cmp	r0, #0
   baada:	d1e6      	bne.n	baaaa <__gethex+0x2ca>
   baadc:	ee18 0a10 	vmov	r0, s16
   baae0:	4621      	mov	r1, r4
   baae2:	f000 f9db 	bl	bae9c <_Bfree>
   baae6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   baae8:	2300      	movs	r3, #0
   baaea:	6013      	str	r3, [r2, #0]
   baaec:	2750      	movs	r7, #80	; 0x50
   baaee:	e70c      	b.n	ba90a <__gethex+0x12a>
   baaf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   baaf2:	2b00      	cmp	r3, #0
   baaf4:	d1f2      	bne.n	baadc <__gethex+0x2fc>
   baaf6:	e7d8      	b.n	baaaa <__gethex+0x2ca>
   baaf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   baafa:	2b00      	cmp	r3, #0
   baafc:	d1d5      	bne.n	baaaa <__gethex+0x2ca>
   baafe:	e7ed      	b.n	baadc <__gethex+0x2fc>
   bab00:	1e6f      	subs	r7, r5, #1
   bab02:	f1ba 0f00 	cmp.w	sl, #0
   bab06:	d131      	bne.n	bab6c <__gethex+0x38c>
   bab08:	b127      	cbz	r7, bab14 <__gethex+0x334>
   bab0a:	4639      	mov	r1, r7
   bab0c:	4620      	mov	r0, r4
   bab0e:	f000 fe25 	bl	bb75c <__any_on>
   bab12:	4682      	mov	sl, r0
   bab14:	117b      	asrs	r3, r7, #5
   bab16:	2101      	movs	r1, #1
   bab18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bab1c:	f007 071f 	and.w	r7, r7, #31
   bab20:	fa01 f707 	lsl.w	r7, r1, r7
   bab24:	421f      	tst	r7, r3
   bab26:	4629      	mov	r1, r5
   bab28:	4620      	mov	r0, r4
   bab2a:	bf18      	it	ne
   bab2c:	f04a 0a02 	orrne.w	sl, sl, #2
   bab30:	1b76      	subs	r6, r6, r5
   bab32:	f7ff fded 	bl	ba710 <rshift>
   bab36:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bab3a:	2702      	movs	r7, #2
   bab3c:	f1ba 0f00 	cmp.w	sl, #0
   bab40:	d048      	beq.n	babd4 <__gethex+0x3f4>
   bab42:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bab46:	2b02      	cmp	r3, #2
   bab48:	d015      	beq.n	bab76 <__gethex+0x396>
   bab4a:	2b03      	cmp	r3, #3
   bab4c:	d017      	beq.n	bab7e <__gethex+0x39e>
   bab4e:	2b01      	cmp	r3, #1
   bab50:	d109      	bne.n	bab66 <__gethex+0x386>
   bab52:	f01a 0f02 	tst.w	sl, #2
   bab56:	d006      	beq.n	bab66 <__gethex+0x386>
   bab58:	f8d9 0000 	ldr.w	r0, [r9]
   bab5c:	ea4a 0a00 	orr.w	sl, sl, r0
   bab60:	f01a 0f01 	tst.w	sl, #1
   bab64:	d10e      	bne.n	bab84 <__gethex+0x3a4>
   bab66:	f047 0710 	orr.w	r7, r7, #16
   bab6a:	e033      	b.n	babd4 <__gethex+0x3f4>
   bab6c:	f04f 0a01 	mov.w	sl, #1
   bab70:	e7d0      	b.n	bab14 <__gethex+0x334>
   bab72:	2701      	movs	r7, #1
   bab74:	e7e2      	b.n	bab3c <__gethex+0x35c>
   bab76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bab78:	f1c3 0301 	rsb	r3, r3, #1
   bab7c:	9315      	str	r3, [sp, #84]	; 0x54
   bab7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bab80:	2b00      	cmp	r3, #0
   bab82:	d0f0      	beq.n	bab66 <__gethex+0x386>
   bab84:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bab88:	f104 0314 	add.w	r3, r4, #20
   bab8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bab90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bab94:	f04f 0c00 	mov.w	ip, #0
   bab98:	4618      	mov	r0, r3
   bab9a:	f853 2b04 	ldr.w	r2, [r3], #4
   bab9e:	f1b2 3fff 	cmp.w	r2, #4294967295
   baba2:	d01c      	beq.n	babde <__gethex+0x3fe>
   baba4:	3201      	adds	r2, #1
   baba6:	6002      	str	r2, [r0, #0]
   baba8:	2f02      	cmp	r7, #2
   babaa:	f104 0314 	add.w	r3, r4, #20
   babae:	d13f      	bne.n	bac30 <__gethex+0x450>
   babb0:	f8d8 2000 	ldr.w	r2, [r8]
   babb4:	3a01      	subs	r2, #1
   babb6:	42b2      	cmp	r2, r6
   babb8:	d10a      	bne.n	babd0 <__gethex+0x3f0>
   babba:	1171      	asrs	r1, r6, #5
   babbc:	2201      	movs	r2, #1
   babbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   babc2:	f006 061f 	and.w	r6, r6, #31
   babc6:	fa02 f606 	lsl.w	r6, r2, r6
   babca:	421e      	tst	r6, r3
   babcc:	bf18      	it	ne
   babce:	4617      	movne	r7, r2
   babd0:	f047 0720 	orr.w	r7, r7, #32
   babd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   babd6:	601c      	str	r4, [r3, #0]
   babd8:	9b04      	ldr	r3, [sp, #16]
   babda:	601d      	str	r5, [r3, #0]
   babdc:	e695      	b.n	ba90a <__gethex+0x12a>
   babde:	4299      	cmp	r1, r3
   babe0:	f843 cc04 	str.w	ip, [r3, #-4]
   babe4:	d8d8      	bhi.n	bab98 <__gethex+0x3b8>
   babe6:	68a3      	ldr	r3, [r4, #8]
   babe8:	459b      	cmp	fp, r3
   babea:	db19      	blt.n	bac20 <__gethex+0x440>
   babec:	6861      	ldr	r1, [r4, #4]
   babee:	ee18 0a10 	vmov	r0, s16
   babf2:	3101      	adds	r1, #1
   babf4:	f000 f912 	bl	bae1c <_Balloc>
   babf8:	4681      	mov	r9, r0
   babfa:	b918      	cbnz	r0, bac04 <__gethex+0x424>
   babfc:	4b1a      	ldr	r3, [pc, #104]	; (bac68 <__gethex+0x488>)
   babfe:	4602      	mov	r2, r0
   bac00:	2184      	movs	r1, #132	; 0x84
   bac02:	e6a8      	b.n	ba956 <__gethex+0x176>
   bac04:	6922      	ldr	r2, [r4, #16]
   bac06:	3202      	adds	r2, #2
   bac08:	f104 010c 	add.w	r1, r4, #12
   bac0c:	0092      	lsls	r2, r2, #2
   bac0e:	300c      	adds	r0, #12
   bac10:	f7fe fd4f 	bl	b96b2 <memcpy>
   bac14:	4621      	mov	r1, r4
   bac16:	ee18 0a10 	vmov	r0, s16
   bac1a:	f000 f93f 	bl	bae9c <_Bfree>
   bac1e:	464c      	mov	r4, r9
   bac20:	6923      	ldr	r3, [r4, #16]
   bac22:	1c5a      	adds	r2, r3, #1
   bac24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bac28:	6122      	str	r2, [r4, #16]
   bac2a:	2201      	movs	r2, #1
   bac2c:	615a      	str	r2, [r3, #20]
   bac2e:	e7bb      	b.n	baba8 <__gethex+0x3c8>
   bac30:	6922      	ldr	r2, [r4, #16]
   bac32:	455a      	cmp	r2, fp
   bac34:	dd0b      	ble.n	bac4e <__gethex+0x46e>
   bac36:	2101      	movs	r1, #1
   bac38:	4620      	mov	r0, r4
   bac3a:	f7ff fd69 	bl	ba710 <rshift>
   bac3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bac42:	3501      	adds	r5, #1
   bac44:	42ab      	cmp	r3, r5
   bac46:	f6ff aed0 	blt.w	ba9ea <__gethex+0x20a>
   bac4a:	2701      	movs	r7, #1
   bac4c:	e7c0      	b.n	babd0 <__gethex+0x3f0>
   bac4e:	f016 061f 	ands.w	r6, r6, #31
   bac52:	d0fa      	beq.n	bac4a <__gethex+0x46a>
   bac54:	4453      	add	r3, sl
   bac56:	f1c6 0620 	rsb	r6, r6, #32
   bac5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bac5e:	f000 f9cf 	bl	bb000 <__hi0bits>
   bac62:	42b0      	cmp	r0, r6
   bac64:	dbe7      	blt.n	bac36 <__gethex+0x456>
   bac66:	e7f0      	b.n	bac4a <__gethex+0x46a>
   bac68:	000bc4e8 	.word	0x000bc4e8

000bac6c <L_shift>:
   bac6c:	f1c2 0208 	rsb	r2, r2, #8
   bac70:	0092      	lsls	r2, r2, #2
   bac72:	b570      	push	{r4, r5, r6, lr}
   bac74:	f1c2 0620 	rsb	r6, r2, #32
   bac78:	6843      	ldr	r3, [r0, #4]
   bac7a:	6804      	ldr	r4, [r0, #0]
   bac7c:	fa03 f506 	lsl.w	r5, r3, r6
   bac80:	432c      	orrs	r4, r5
   bac82:	40d3      	lsrs	r3, r2
   bac84:	6004      	str	r4, [r0, #0]
   bac86:	f840 3f04 	str.w	r3, [r0, #4]!
   bac8a:	4288      	cmp	r0, r1
   bac8c:	d3f4      	bcc.n	bac78 <L_shift+0xc>
   bac8e:	bd70      	pop	{r4, r5, r6, pc}

000bac90 <__match>:
   bac90:	b530      	push	{r4, r5, lr}
   bac92:	6803      	ldr	r3, [r0, #0]
   bac94:	3301      	adds	r3, #1
   bac96:	f811 4b01 	ldrb.w	r4, [r1], #1
   bac9a:	b914      	cbnz	r4, baca2 <__match+0x12>
   bac9c:	6003      	str	r3, [r0, #0]
   bac9e:	2001      	movs	r0, #1
   baca0:	bd30      	pop	{r4, r5, pc}
   baca2:	f813 2b01 	ldrb.w	r2, [r3], #1
   baca6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bacaa:	2d19      	cmp	r5, #25
   bacac:	bf98      	it	ls
   bacae:	3220      	addls	r2, #32
   bacb0:	42a2      	cmp	r2, r4
   bacb2:	d0f0      	beq.n	bac96 <__match+0x6>
   bacb4:	2000      	movs	r0, #0
   bacb6:	e7f3      	b.n	baca0 <__match+0x10>

000bacb8 <__hexnan>:
   bacb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bacbc:	680b      	ldr	r3, [r1, #0]
   bacbe:	115e      	asrs	r6, r3, #5
   bacc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bacc4:	f013 031f 	ands.w	r3, r3, #31
   bacc8:	b087      	sub	sp, #28
   bacca:	bf18      	it	ne
   baccc:	3604      	addne	r6, #4
   bacce:	2500      	movs	r5, #0
   bacd0:	1f37      	subs	r7, r6, #4
   bacd2:	4690      	mov	r8, r2
   bacd4:	6802      	ldr	r2, [r0, #0]
   bacd6:	9301      	str	r3, [sp, #4]
   bacd8:	4682      	mov	sl, r0
   bacda:	f846 5c04 	str.w	r5, [r6, #-4]
   bacde:	46b9      	mov	r9, r7
   bace0:	463c      	mov	r4, r7
   bace2:	9502      	str	r5, [sp, #8]
   bace4:	46ab      	mov	fp, r5
   bace6:	7851      	ldrb	r1, [r2, #1]
   bace8:	1c53      	adds	r3, r2, #1
   bacea:	9303      	str	r3, [sp, #12]
   bacec:	b341      	cbz	r1, bad40 <__hexnan+0x88>
   bacee:	4608      	mov	r0, r1
   bacf0:	9205      	str	r2, [sp, #20]
   bacf2:	9104      	str	r1, [sp, #16]
   bacf4:	f7ff fd5e 	bl	ba7b4 <__hexdig_fun>
   bacf8:	2800      	cmp	r0, #0
   bacfa:	d14f      	bne.n	bad9c <__hexnan+0xe4>
   bacfc:	9904      	ldr	r1, [sp, #16]
   bacfe:	9a05      	ldr	r2, [sp, #20]
   bad00:	2920      	cmp	r1, #32
   bad02:	d818      	bhi.n	bad36 <__hexnan+0x7e>
   bad04:	9b02      	ldr	r3, [sp, #8]
   bad06:	459b      	cmp	fp, r3
   bad08:	dd13      	ble.n	bad32 <__hexnan+0x7a>
   bad0a:	454c      	cmp	r4, r9
   bad0c:	d206      	bcs.n	bad1c <__hexnan+0x64>
   bad0e:	2d07      	cmp	r5, #7
   bad10:	dc04      	bgt.n	bad1c <__hexnan+0x64>
   bad12:	462a      	mov	r2, r5
   bad14:	4649      	mov	r1, r9
   bad16:	4620      	mov	r0, r4
   bad18:	f7ff ffa8 	bl	bac6c <L_shift>
   bad1c:	4544      	cmp	r4, r8
   bad1e:	d950      	bls.n	badc2 <__hexnan+0x10a>
   bad20:	2300      	movs	r3, #0
   bad22:	f1a4 0904 	sub.w	r9, r4, #4
   bad26:	f844 3c04 	str.w	r3, [r4, #-4]
   bad2a:	f8cd b008 	str.w	fp, [sp, #8]
   bad2e:	464c      	mov	r4, r9
   bad30:	461d      	mov	r5, r3
   bad32:	9a03      	ldr	r2, [sp, #12]
   bad34:	e7d7      	b.n	bace6 <__hexnan+0x2e>
   bad36:	2929      	cmp	r1, #41	; 0x29
   bad38:	d156      	bne.n	bade8 <__hexnan+0x130>
   bad3a:	3202      	adds	r2, #2
   bad3c:	f8ca 2000 	str.w	r2, [sl]
   bad40:	f1bb 0f00 	cmp.w	fp, #0
   bad44:	d050      	beq.n	bade8 <__hexnan+0x130>
   bad46:	454c      	cmp	r4, r9
   bad48:	d206      	bcs.n	bad58 <__hexnan+0xa0>
   bad4a:	2d07      	cmp	r5, #7
   bad4c:	dc04      	bgt.n	bad58 <__hexnan+0xa0>
   bad4e:	462a      	mov	r2, r5
   bad50:	4649      	mov	r1, r9
   bad52:	4620      	mov	r0, r4
   bad54:	f7ff ff8a 	bl	bac6c <L_shift>
   bad58:	4544      	cmp	r4, r8
   bad5a:	d934      	bls.n	badc6 <__hexnan+0x10e>
   bad5c:	f1a8 0204 	sub.w	r2, r8, #4
   bad60:	4623      	mov	r3, r4
   bad62:	f853 1b04 	ldr.w	r1, [r3], #4
   bad66:	f842 1f04 	str.w	r1, [r2, #4]!
   bad6a:	429f      	cmp	r7, r3
   bad6c:	d2f9      	bcs.n	bad62 <__hexnan+0xaa>
   bad6e:	1b3b      	subs	r3, r7, r4
   bad70:	f023 0303 	bic.w	r3, r3, #3
   bad74:	3304      	adds	r3, #4
   bad76:	3401      	adds	r4, #1
   bad78:	3e03      	subs	r6, #3
   bad7a:	42b4      	cmp	r4, r6
   bad7c:	bf88      	it	hi
   bad7e:	2304      	movhi	r3, #4
   bad80:	4443      	add	r3, r8
   bad82:	2200      	movs	r2, #0
   bad84:	f843 2b04 	str.w	r2, [r3], #4
   bad88:	429f      	cmp	r7, r3
   bad8a:	d2fb      	bcs.n	bad84 <__hexnan+0xcc>
   bad8c:	683b      	ldr	r3, [r7, #0]
   bad8e:	b91b      	cbnz	r3, bad98 <__hexnan+0xe0>
   bad90:	4547      	cmp	r7, r8
   bad92:	d127      	bne.n	bade4 <__hexnan+0x12c>
   bad94:	2301      	movs	r3, #1
   bad96:	603b      	str	r3, [r7, #0]
   bad98:	2005      	movs	r0, #5
   bad9a:	e026      	b.n	badea <__hexnan+0x132>
   bad9c:	3501      	adds	r5, #1
   bad9e:	2d08      	cmp	r5, #8
   bada0:	f10b 0b01 	add.w	fp, fp, #1
   bada4:	dd06      	ble.n	badb4 <__hexnan+0xfc>
   bada6:	4544      	cmp	r4, r8
   bada8:	d9c3      	bls.n	bad32 <__hexnan+0x7a>
   badaa:	2300      	movs	r3, #0
   badac:	f844 3c04 	str.w	r3, [r4, #-4]
   badb0:	2501      	movs	r5, #1
   badb2:	3c04      	subs	r4, #4
   badb4:	6822      	ldr	r2, [r4, #0]
   badb6:	f000 000f 	and.w	r0, r0, #15
   badba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   badbe:	6022      	str	r2, [r4, #0]
   badc0:	e7b7      	b.n	bad32 <__hexnan+0x7a>
   badc2:	2508      	movs	r5, #8
   badc4:	e7b5      	b.n	bad32 <__hexnan+0x7a>
   badc6:	9b01      	ldr	r3, [sp, #4]
   badc8:	2b00      	cmp	r3, #0
   badca:	d0df      	beq.n	bad8c <__hexnan+0xd4>
   badcc:	f04f 32ff 	mov.w	r2, #4294967295
   badd0:	f1c3 0320 	rsb	r3, r3, #32
   badd4:	fa22 f303 	lsr.w	r3, r2, r3
   badd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   baddc:	401a      	ands	r2, r3
   badde:	f846 2c04 	str.w	r2, [r6, #-4]
   bade2:	e7d3      	b.n	bad8c <__hexnan+0xd4>
   bade4:	3f04      	subs	r7, #4
   bade6:	e7d1      	b.n	bad8c <__hexnan+0xd4>
   bade8:	2004      	movs	r0, #4
   badea:	b007      	add	sp, #28
   badec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000badf0 <__retarget_lock_acquire_recursive>:
   badf0:	4770      	bx	lr

000badf2 <__retarget_lock_release>:
   badf2:	4770      	bx	lr

000badf4 <__retarget_lock_release_recursive>:
   badf4:	4770      	bx	lr

000badf6 <__ascii_mbtowc>:
   badf6:	b082      	sub	sp, #8
   badf8:	b901      	cbnz	r1, badfc <__ascii_mbtowc+0x6>
   badfa:	a901      	add	r1, sp, #4
   badfc:	b142      	cbz	r2, bae10 <__ascii_mbtowc+0x1a>
   badfe:	b14b      	cbz	r3, bae14 <__ascii_mbtowc+0x1e>
   bae00:	7813      	ldrb	r3, [r2, #0]
   bae02:	600b      	str	r3, [r1, #0]
   bae04:	7812      	ldrb	r2, [r2, #0]
   bae06:	1e10      	subs	r0, r2, #0
   bae08:	bf18      	it	ne
   bae0a:	2001      	movne	r0, #1
   bae0c:	b002      	add	sp, #8
   bae0e:	4770      	bx	lr
   bae10:	4610      	mov	r0, r2
   bae12:	e7fb      	b.n	bae0c <__ascii_mbtowc+0x16>
   bae14:	f06f 0001 	mvn.w	r0, #1
   bae18:	e7f8      	b.n	bae0c <__ascii_mbtowc+0x16>
	...

000bae1c <_Balloc>:
   bae1c:	b570      	push	{r4, r5, r6, lr}
   bae1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bae20:	4604      	mov	r4, r0
   bae22:	460d      	mov	r5, r1
   bae24:	b976      	cbnz	r6, bae44 <_Balloc+0x28>
   bae26:	2010      	movs	r0, #16
   bae28:	f7fb fae6 	bl	b63f8 <malloc>
   bae2c:	4602      	mov	r2, r0
   bae2e:	6260      	str	r0, [r4, #36]	; 0x24
   bae30:	b920      	cbnz	r0, bae3c <_Balloc+0x20>
   bae32:	4b18      	ldr	r3, [pc, #96]	; (bae94 <_Balloc+0x78>)
   bae34:	4818      	ldr	r0, [pc, #96]	; (bae98 <_Balloc+0x7c>)
   bae36:	2166      	movs	r1, #102	; 0x66
   bae38:	f7fb fb1e 	bl	b6478 <__assert_func>
   bae3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bae40:	6006      	str	r6, [r0, #0]
   bae42:	60c6      	str	r6, [r0, #12]
   bae44:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bae46:	68f3      	ldr	r3, [r6, #12]
   bae48:	b183      	cbz	r3, bae6c <_Balloc+0x50>
   bae4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bae4c:	68db      	ldr	r3, [r3, #12]
   bae4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bae52:	b9b8      	cbnz	r0, bae84 <_Balloc+0x68>
   bae54:	2101      	movs	r1, #1
   bae56:	fa01 f605 	lsl.w	r6, r1, r5
   bae5a:	1d72      	adds	r2, r6, #5
   bae5c:	0092      	lsls	r2, r2, #2
   bae5e:	4620      	mov	r0, r4
   bae60:	f000 fc9d 	bl	bb79e <_calloc_r>
   bae64:	b160      	cbz	r0, bae80 <_Balloc+0x64>
   bae66:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bae6a:	e00e      	b.n	bae8a <_Balloc+0x6e>
   bae6c:	2221      	movs	r2, #33	; 0x21
   bae6e:	2104      	movs	r1, #4
   bae70:	4620      	mov	r0, r4
   bae72:	f000 fc94 	bl	bb79e <_calloc_r>
   bae76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bae78:	60f0      	str	r0, [r6, #12]
   bae7a:	68db      	ldr	r3, [r3, #12]
   bae7c:	2b00      	cmp	r3, #0
   bae7e:	d1e4      	bne.n	bae4a <_Balloc+0x2e>
   bae80:	2000      	movs	r0, #0
   bae82:	bd70      	pop	{r4, r5, r6, pc}
   bae84:	6802      	ldr	r2, [r0, #0]
   bae86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bae8a:	2300      	movs	r3, #0
   bae8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bae90:	e7f7      	b.n	bae82 <_Balloc+0x66>
   bae92:	bf00      	nop
   bae94:	000bc271 	.word	0x000bc271
   bae98:	000bc594 	.word	0x000bc594

000bae9c <_Bfree>:
   bae9c:	b570      	push	{r4, r5, r6, lr}
   bae9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   baea0:	4605      	mov	r5, r0
   baea2:	460c      	mov	r4, r1
   baea4:	b976      	cbnz	r6, baec4 <_Bfree+0x28>
   baea6:	2010      	movs	r0, #16
   baea8:	f7fb faa6 	bl	b63f8 <malloc>
   baeac:	4602      	mov	r2, r0
   baeae:	6268      	str	r0, [r5, #36]	; 0x24
   baeb0:	b920      	cbnz	r0, baebc <_Bfree+0x20>
   baeb2:	4b09      	ldr	r3, [pc, #36]	; (baed8 <_Bfree+0x3c>)
   baeb4:	4809      	ldr	r0, [pc, #36]	; (baedc <_Bfree+0x40>)
   baeb6:	218a      	movs	r1, #138	; 0x8a
   baeb8:	f7fb fade 	bl	b6478 <__assert_func>
   baebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   baec0:	6006      	str	r6, [r0, #0]
   baec2:	60c6      	str	r6, [r0, #12]
   baec4:	b13c      	cbz	r4, baed6 <_Bfree+0x3a>
   baec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   baec8:	6862      	ldr	r2, [r4, #4]
   baeca:	68db      	ldr	r3, [r3, #12]
   baecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   baed0:	6021      	str	r1, [r4, #0]
   baed2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   baed6:	bd70      	pop	{r4, r5, r6, pc}
   baed8:	000bc271 	.word	0x000bc271
   baedc:	000bc594 	.word	0x000bc594

000baee0 <__multadd>:
   baee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baee4:	690d      	ldr	r5, [r1, #16]
   baee6:	4607      	mov	r7, r0
   baee8:	460c      	mov	r4, r1
   baeea:	461e      	mov	r6, r3
   baeec:	f101 0c14 	add.w	ip, r1, #20
   baef0:	2000      	movs	r0, #0
   baef2:	f8dc 3000 	ldr.w	r3, [ip]
   baef6:	b299      	uxth	r1, r3
   baef8:	fb02 6101 	mla	r1, r2, r1, r6
   baefc:	0c1e      	lsrs	r6, r3, #16
   baefe:	0c0b      	lsrs	r3, r1, #16
   baf00:	fb02 3306 	mla	r3, r2, r6, r3
   baf04:	b289      	uxth	r1, r1
   baf06:	3001      	adds	r0, #1
   baf08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   baf0c:	4285      	cmp	r5, r0
   baf0e:	f84c 1b04 	str.w	r1, [ip], #4
   baf12:	ea4f 4613 	mov.w	r6, r3, lsr #16
   baf16:	dcec      	bgt.n	baef2 <__multadd+0x12>
   baf18:	b30e      	cbz	r6, baf5e <__multadd+0x7e>
   baf1a:	68a3      	ldr	r3, [r4, #8]
   baf1c:	42ab      	cmp	r3, r5
   baf1e:	dc19      	bgt.n	baf54 <__multadd+0x74>
   baf20:	6861      	ldr	r1, [r4, #4]
   baf22:	4638      	mov	r0, r7
   baf24:	3101      	adds	r1, #1
   baf26:	f7ff ff79 	bl	bae1c <_Balloc>
   baf2a:	4680      	mov	r8, r0
   baf2c:	b928      	cbnz	r0, baf3a <__multadd+0x5a>
   baf2e:	4602      	mov	r2, r0
   baf30:	4b0c      	ldr	r3, [pc, #48]	; (baf64 <__multadd+0x84>)
   baf32:	480d      	ldr	r0, [pc, #52]	; (baf68 <__multadd+0x88>)
   baf34:	21b5      	movs	r1, #181	; 0xb5
   baf36:	f7fb fa9f 	bl	b6478 <__assert_func>
   baf3a:	6922      	ldr	r2, [r4, #16]
   baf3c:	3202      	adds	r2, #2
   baf3e:	f104 010c 	add.w	r1, r4, #12
   baf42:	0092      	lsls	r2, r2, #2
   baf44:	300c      	adds	r0, #12
   baf46:	f7fe fbb4 	bl	b96b2 <memcpy>
   baf4a:	4621      	mov	r1, r4
   baf4c:	4638      	mov	r0, r7
   baf4e:	f7ff ffa5 	bl	bae9c <_Bfree>
   baf52:	4644      	mov	r4, r8
   baf54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   baf58:	3501      	adds	r5, #1
   baf5a:	615e      	str	r6, [r3, #20]
   baf5c:	6125      	str	r5, [r4, #16]
   baf5e:	4620      	mov	r0, r4
   baf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baf64:	000bc4e8 	.word	0x000bc4e8
   baf68:	000bc594 	.word	0x000bc594

000baf6c <__s2b>:
   baf6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baf70:	460c      	mov	r4, r1
   baf72:	4615      	mov	r5, r2
   baf74:	461f      	mov	r7, r3
   baf76:	2209      	movs	r2, #9
   baf78:	3308      	adds	r3, #8
   baf7a:	4606      	mov	r6, r0
   baf7c:	fb93 f3f2 	sdiv	r3, r3, r2
   baf80:	2100      	movs	r1, #0
   baf82:	2201      	movs	r2, #1
   baf84:	429a      	cmp	r2, r3
   baf86:	db09      	blt.n	baf9c <__s2b+0x30>
   baf88:	4630      	mov	r0, r6
   baf8a:	f7ff ff47 	bl	bae1c <_Balloc>
   baf8e:	b940      	cbnz	r0, bafa2 <__s2b+0x36>
   baf90:	4602      	mov	r2, r0
   baf92:	4b19      	ldr	r3, [pc, #100]	; (baff8 <__s2b+0x8c>)
   baf94:	4819      	ldr	r0, [pc, #100]	; (baffc <__s2b+0x90>)
   baf96:	21ce      	movs	r1, #206	; 0xce
   baf98:	f7fb fa6e 	bl	b6478 <__assert_func>
   baf9c:	0052      	lsls	r2, r2, #1
   baf9e:	3101      	adds	r1, #1
   bafa0:	e7f0      	b.n	baf84 <__s2b+0x18>
   bafa2:	9b08      	ldr	r3, [sp, #32]
   bafa4:	6143      	str	r3, [r0, #20]
   bafa6:	2d09      	cmp	r5, #9
   bafa8:	f04f 0301 	mov.w	r3, #1
   bafac:	6103      	str	r3, [r0, #16]
   bafae:	dd16      	ble.n	bafde <__s2b+0x72>
   bafb0:	f104 0909 	add.w	r9, r4, #9
   bafb4:	46c8      	mov	r8, r9
   bafb6:	442c      	add	r4, r5
   bafb8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bafbc:	4601      	mov	r1, r0
   bafbe:	3b30      	subs	r3, #48	; 0x30
   bafc0:	220a      	movs	r2, #10
   bafc2:	4630      	mov	r0, r6
   bafc4:	f7ff ff8c 	bl	baee0 <__multadd>
   bafc8:	45a0      	cmp	r8, r4
   bafca:	d1f5      	bne.n	bafb8 <__s2b+0x4c>
   bafcc:	f1a5 0408 	sub.w	r4, r5, #8
   bafd0:	444c      	add	r4, r9
   bafd2:	1b2d      	subs	r5, r5, r4
   bafd4:	1963      	adds	r3, r4, r5
   bafd6:	42bb      	cmp	r3, r7
   bafd8:	db04      	blt.n	bafe4 <__s2b+0x78>
   bafda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bafde:	340a      	adds	r4, #10
   bafe0:	2509      	movs	r5, #9
   bafe2:	e7f6      	b.n	bafd2 <__s2b+0x66>
   bafe4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bafe8:	4601      	mov	r1, r0
   bafea:	3b30      	subs	r3, #48	; 0x30
   bafec:	220a      	movs	r2, #10
   bafee:	4630      	mov	r0, r6
   baff0:	f7ff ff76 	bl	baee0 <__multadd>
   baff4:	e7ee      	b.n	bafd4 <__s2b+0x68>
   baff6:	bf00      	nop
   baff8:	000bc4e8 	.word	0x000bc4e8
   baffc:	000bc594 	.word	0x000bc594

000bb000 <__hi0bits>:
   bb000:	0c03      	lsrs	r3, r0, #16
   bb002:	041b      	lsls	r3, r3, #16
   bb004:	b9d3      	cbnz	r3, bb03c <__hi0bits+0x3c>
   bb006:	0400      	lsls	r0, r0, #16
   bb008:	2310      	movs	r3, #16
   bb00a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bb00e:	bf04      	itt	eq
   bb010:	0200      	lsleq	r0, r0, #8
   bb012:	3308      	addeq	r3, #8
   bb014:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bb018:	bf04      	itt	eq
   bb01a:	0100      	lsleq	r0, r0, #4
   bb01c:	3304      	addeq	r3, #4
   bb01e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bb022:	bf04      	itt	eq
   bb024:	0080      	lsleq	r0, r0, #2
   bb026:	3302      	addeq	r3, #2
   bb028:	2800      	cmp	r0, #0
   bb02a:	db05      	blt.n	bb038 <__hi0bits+0x38>
   bb02c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bb030:	f103 0301 	add.w	r3, r3, #1
   bb034:	bf08      	it	eq
   bb036:	2320      	moveq	r3, #32
   bb038:	4618      	mov	r0, r3
   bb03a:	4770      	bx	lr
   bb03c:	2300      	movs	r3, #0
   bb03e:	e7e4      	b.n	bb00a <__hi0bits+0xa>

000bb040 <__lo0bits>:
   bb040:	6803      	ldr	r3, [r0, #0]
   bb042:	f013 0207 	ands.w	r2, r3, #7
   bb046:	4601      	mov	r1, r0
   bb048:	d00b      	beq.n	bb062 <__lo0bits+0x22>
   bb04a:	07da      	lsls	r2, r3, #31
   bb04c:	d423      	bmi.n	bb096 <__lo0bits+0x56>
   bb04e:	0798      	lsls	r0, r3, #30
   bb050:	bf49      	itett	mi
   bb052:	085b      	lsrmi	r3, r3, #1
   bb054:	089b      	lsrpl	r3, r3, #2
   bb056:	2001      	movmi	r0, #1
   bb058:	600b      	strmi	r3, [r1, #0]
   bb05a:	bf5c      	itt	pl
   bb05c:	600b      	strpl	r3, [r1, #0]
   bb05e:	2002      	movpl	r0, #2
   bb060:	4770      	bx	lr
   bb062:	b298      	uxth	r0, r3
   bb064:	b9a8      	cbnz	r0, bb092 <__lo0bits+0x52>
   bb066:	0c1b      	lsrs	r3, r3, #16
   bb068:	2010      	movs	r0, #16
   bb06a:	b2da      	uxtb	r2, r3
   bb06c:	b90a      	cbnz	r2, bb072 <__lo0bits+0x32>
   bb06e:	3008      	adds	r0, #8
   bb070:	0a1b      	lsrs	r3, r3, #8
   bb072:	071a      	lsls	r2, r3, #28
   bb074:	bf04      	itt	eq
   bb076:	091b      	lsreq	r3, r3, #4
   bb078:	3004      	addeq	r0, #4
   bb07a:	079a      	lsls	r2, r3, #30
   bb07c:	bf04      	itt	eq
   bb07e:	089b      	lsreq	r3, r3, #2
   bb080:	3002      	addeq	r0, #2
   bb082:	07da      	lsls	r2, r3, #31
   bb084:	d403      	bmi.n	bb08e <__lo0bits+0x4e>
   bb086:	085b      	lsrs	r3, r3, #1
   bb088:	f100 0001 	add.w	r0, r0, #1
   bb08c:	d005      	beq.n	bb09a <__lo0bits+0x5a>
   bb08e:	600b      	str	r3, [r1, #0]
   bb090:	4770      	bx	lr
   bb092:	4610      	mov	r0, r2
   bb094:	e7e9      	b.n	bb06a <__lo0bits+0x2a>
   bb096:	2000      	movs	r0, #0
   bb098:	4770      	bx	lr
   bb09a:	2020      	movs	r0, #32
   bb09c:	4770      	bx	lr
	...

000bb0a0 <__i2b>:
   bb0a0:	b510      	push	{r4, lr}
   bb0a2:	460c      	mov	r4, r1
   bb0a4:	2101      	movs	r1, #1
   bb0a6:	f7ff feb9 	bl	bae1c <_Balloc>
   bb0aa:	4602      	mov	r2, r0
   bb0ac:	b928      	cbnz	r0, bb0ba <__i2b+0x1a>
   bb0ae:	4b05      	ldr	r3, [pc, #20]	; (bb0c4 <__i2b+0x24>)
   bb0b0:	4805      	ldr	r0, [pc, #20]	; (bb0c8 <__i2b+0x28>)
   bb0b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bb0b6:	f7fb f9df 	bl	b6478 <__assert_func>
   bb0ba:	2301      	movs	r3, #1
   bb0bc:	6144      	str	r4, [r0, #20]
   bb0be:	6103      	str	r3, [r0, #16]
   bb0c0:	bd10      	pop	{r4, pc}
   bb0c2:	bf00      	nop
   bb0c4:	000bc4e8 	.word	0x000bc4e8
   bb0c8:	000bc594 	.word	0x000bc594

000bb0cc <__multiply>:
   bb0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb0d0:	4691      	mov	r9, r2
   bb0d2:	690a      	ldr	r2, [r1, #16]
   bb0d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb0d8:	429a      	cmp	r2, r3
   bb0da:	bfb8      	it	lt
   bb0dc:	460b      	movlt	r3, r1
   bb0de:	460c      	mov	r4, r1
   bb0e0:	bfbc      	itt	lt
   bb0e2:	464c      	movlt	r4, r9
   bb0e4:	4699      	movlt	r9, r3
   bb0e6:	6927      	ldr	r7, [r4, #16]
   bb0e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bb0ec:	68a3      	ldr	r3, [r4, #8]
   bb0ee:	6861      	ldr	r1, [r4, #4]
   bb0f0:	eb07 060a 	add.w	r6, r7, sl
   bb0f4:	42b3      	cmp	r3, r6
   bb0f6:	b085      	sub	sp, #20
   bb0f8:	bfb8      	it	lt
   bb0fa:	3101      	addlt	r1, #1
   bb0fc:	f7ff fe8e 	bl	bae1c <_Balloc>
   bb100:	b930      	cbnz	r0, bb110 <__multiply+0x44>
   bb102:	4602      	mov	r2, r0
   bb104:	4b44      	ldr	r3, [pc, #272]	; (bb218 <__multiply+0x14c>)
   bb106:	4845      	ldr	r0, [pc, #276]	; (bb21c <__multiply+0x150>)
   bb108:	f240 115d 	movw	r1, #349	; 0x15d
   bb10c:	f7fb f9b4 	bl	b6478 <__assert_func>
   bb110:	f100 0514 	add.w	r5, r0, #20
   bb114:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bb118:	462b      	mov	r3, r5
   bb11a:	2200      	movs	r2, #0
   bb11c:	4543      	cmp	r3, r8
   bb11e:	d321      	bcc.n	bb164 <__multiply+0x98>
   bb120:	f104 0314 	add.w	r3, r4, #20
   bb124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bb128:	f109 0314 	add.w	r3, r9, #20
   bb12c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bb130:	9202      	str	r2, [sp, #8]
   bb132:	1b3a      	subs	r2, r7, r4
   bb134:	3a15      	subs	r2, #21
   bb136:	f022 0203 	bic.w	r2, r2, #3
   bb13a:	3204      	adds	r2, #4
   bb13c:	f104 0115 	add.w	r1, r4, #21
   bb140:	428f      	cmp	r7, r1
   bb142:	bf38      	it	cc
   bb144:	2204      	movcc	r2, #4
   bb146:	9201      	str	r2, [sp, #4]
   bb148:	9a02      	ldr	r2, [sp, #8]
   bb14a:	9303      	str	r3, [sp, #12]
   bb14c:	429a      	cmp	r2, r3
   bb14e:	d80c      	bhi.n	bb16a <__multiply+0x9e>
   bb150:	2e00      	cmp	r6, #0
   bb152:	dd03      	ble.n	bb15c <__multiply+0x90>
   bb154:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bb158:	2b00      	cmp	r3, #0
   bb15a:	d05a      	beq.n	bb212 <__multiply+0x146>
   bb15c:	6106      	str	r6, [r0, #16]
   bb15e:	b005      	add	sp, #20
   bb160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb164:	f843 2b04 	str.w	r2, [r3], #4
   bb168:	e7d8      	b.n	bb11c <__multiply+0x50>
   bb16a:	f8b3 a000 	ldrh.w	sl, [r3]
   bb16e:	f1ba 0f00 	cmp.w	sl, #0
   bb172:	d024      	beq.n	bb1be <__multiply+0xf2>
   bb174:	f104 0e14 	add.w	lr, r4, #20
   bb178:	46a9      	mov	r9, r5
   bb17a:	f04f 0c00 	mov.w	ip, #0
   bb17e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bb182:	f8d9 1000 	ldr.w	r1, [r9]
   bb186:	fa1f fb82 	uxth.w	fp, r2
   bb18a:	b289      	uxth	r1, r1
   bb18c:	fb0a 110b 	mla	r1, sl, fp, r1
   bb190:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bb194:	f8d9 2000 	ldr.w	r2, [r9]
   bb198:	4461      	add	r1, ip
   bb19a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb19e:	fb0a c20b 	mla	r2, sl, fp, ip
   bb1a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bb1a6:	b289      	uxth	r1, r1
   bb1a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bb1ac:	4577      	cmp	r7, lr
   bb1ae:	f849 1b04 	str.w	r1, [r9], #4
   bb1b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb1b6:	d8e2      	bhi.n	bb17e <__multiply+0xb2>
   bb1b8:	9a01      	ldr	r2, [sp, #4]
   bb1ba:	f845 c002 	str.w	ip, [r5, r2]
   bb1be:	9a03      	ldr	r2, [sp, #12]
   bb1c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bb1c4:	3304      	adds	r3, #4
   bb1c6:	f1b9 0f00 	cmp.w	r9, #0
   bb1ca:	d020      	beq.n	bb20e <__multiply+0x142>
   bb1cc:	6829      	ldr	r1, [r5, #0]
   bb1ce:	f104 0c14 	add.w	ip, r4, #20
   bb1d2:	46ae      	mov	lr, r5
   bb1d4:	f04f 0a00 	mov.w	sl, #0
   bb1d8:	f8bc b000 	ldrh.w	fp, [ip]
   bb1dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bb1e0:	fb09 220b 	mla	r2, r9, fp, r2
   bb1e4:	4492      	add	sl, r2
   bb1e6:	b289      	uxth	r1, r1
   bb1e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bb1ec:	f84e 1b04 	str.w	r1, [lr], #4
   bb1f0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bb1f4:	f8be 1000 	ldrh.w	r1, [lr]
   bb1f8:	0c12      	lsrs	r2, r2, #16
   bb1fa:	fb09 1102 	mla	r1, r9, r2, r1
   bb1fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bb202:	4567      	cmp	r7, ip
   bb204:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bb208:	d8e6      	bhi.n	bb1d8 <__multiply+0x10c>
   bb20a:	9a01      	ldr	r2, [sp, #4]
   bb20c:	50a9      	str	r1, [r5, r2]
   bb20e:	3504      	adds	r5, #4
   bb210:	e79a      	b.n	bb148 <__multiply+0x7c>
   bb212:	3e01      	subs	r6, #1
   bb214:	e79c      	b.n	bb150 <__multiply+0x84>
   bb216:	bf00      	nop
   bb218:	000bc4e8 	.word	0x000bc4e8
   bb21c:	000bc594 	.word	0x000bc594

000bb220 <__pow5mult>:
   bb220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb224:	4615      	mov	r5, r2
   bb226:	f012 0203 	ands.w	r2, r2, #3
   bb22a:	4606      	mov	r6, r0
   bb22c:	460f      	mov	r7, r1
   bb22e:	d007      	beq.n	bb240 <__pow5mult+0x20>
   bb230:	4c25      	ldr	r4, [pc, #148]	; (bb2c8 <__pow5mult+0xa8>)
   bb232:	3a01      	subs	r2, #1
   bb234:	2300      	movs	r3, #0
   bb236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bb23a:	f7ff fe51 	bl	baee0 <__multadd>
   bb23e:	4607      	mov	r7, r0
   bb240:	10ad      	asrs	r5, r5, #2
   bb242:	d03d      	beq.n	bb2c0 <__pow5mult+0xa0>
   bb244:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb246:	b97c      	cbnz	r4, bb268 <__pow5mult+0x48>
   bb248:	2010      	movs	r0, #16
   bb24a:	f7fb f8d5 	bl	b63f8 <malloc>
   bb24e:	4602      	mov	r2, r0
   bb250:	6270      	str	r0, [r6, #36]	; 0x24
   bb252:	b928      	cbnz	r0, bb260 <__pow5mult+0x40>
   bb254:	4b1d      	ldr	r3, [pc, #116]	; (bb2cc <__pow5mult+0xac>)
   bb256:	481e      	ldr	r0, [pc, #120]	; (bb2d0 <__pow5mult+0xb0>)
   bb258:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bb25c:	f7fb f90c 	bl	b6478 <__assert_func>
   bb260:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb264:	6004      	str	r4, [r0, #0]
   bb266:	60c4      	str	r4, [r0, #12]
   bb268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bb26c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bb270:	b94c      	cbnz	r4, bb286 <__pow5mult+0x66>
   bb272:	f240 2171 	movw	r1, #625	; 0x271
   bb276:	4630      	mov	r0, r6
   bb278:	f7ff ff12 	bl	bb0a0 <__i2b>
   bb27c:	2300      	movs	r3, #0
   bb27e:	f8c8 0008 	str.w	r0, [r8, #8]
   bb282:	4604      	mov	r4, r0
   bb284:	6003      	str	r3, [r0, #0]
   bb286:	f04f 0900 	mov.w	r9, #0
   bb28a:	07eb      	lsls	r3, r5, #31
   bb28c:	d50a      	bpl.n	bb2a4 <__pow5mult+0x84>
   bb28e:	4639      	mov	r1, r7
   bb290:	4622      	mov	r2, r4
   bb292:	4630      	mov	r0, r6
   bb294:	f7ff ff1a 	bl	bb0cc <__multiply>
   bb298:	4639      	mov	r1, r7
   bb29a:	4680      	mov	r8, r0
   bb29c:	4630      	mov	r0, r6
   bb29e:	f7ff fdfd 	bl	bae9c <_Bfree>
   bb2a2:	4647      	mov	r7, r8
   bb2a4:	106d      	asrs	r5, r5, #1
   bb2a6:	d00b      	beq.n	bb2c0 <__pow5mult+0xa0>
   bb2a8:	6820      	ldr	r0, [r4, #0]
   bb2aa:	b938      	cbnz	r0, bb2bc <__pow5mult+0x9c>
   bb2ac:	4622      	mov	r2, r4
   bb2ae:	4621      	mov	r1, r4
   bb2b0:	4630      	mov	r0, r6
   bb2b2:	f7ff ff0b 	bl	bb0cc <__multiply>
   bb2b6:	6020      	str	r0, [r4, #0]
   bb2b8:	f8c0 9000 	str.w	r9, [r0]
   bb2bc:	4604      	mov	r4, r0
   bb2be:	e7e4      	b.n	bb28a <__pow5mult+0x6a>
   bb2c0:	4638      	mov	r0, r7
   bb2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb2c6:	bf00      	nop
   bb2c8:	000bc708 	.word	0x000bc708
   bb2cc:	000bc271 	.word	0x000bc271
   bb2d0:	000bc594 	.word	0x000bc594

000bb2d4 <__lshift>:
   bb2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb2d8:	460c      	mov	r4, r1
   bb2da:	6849      	ldr	r1, [r1, #4]
   bb2dc:	6923      	ldr	r3, [r4, #16]
   bb2de:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb2e2:	68a3      	ldr	r3, [r4, #8]
   bb2e4:	4607      	mov	r7, r0
   bb2e6:	4691      	mov	r9, r2
   bb2e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb2ec:	f108 0601 	add.w	r6, r8, #1
   bb2f0:	42b3      	cmp	r3, r6
   bb2f2:	db0b      	blt.n	bb30c <__lshift+0x38>
   bb2f4:	4638      	mov	r0, r7
   bb2f6:	f7ff fd91 	bl	bae1c <_Balloc>
   bb2fa:	4605      	mov	r5, r0
   bb2fc:	b948      	cbnz	r0, bb312 <__lshift+0x3e>
   bb2fe:	4602      	mov	r2, r0
   bb300:	4b2a      	ldr	r3, [pc, #168]	; (bb3ac <__lshift+0xd8>)
   bb302:	482b      	ldr	r0, [pc, #172]	; (bb3b0 <__lshift+0xdc>)
   bb304:	f240 11d9 	movw	r1, #473	; 0x1d9
   bb308:	f7fb f8b6 	bl	b6478 <__assert_func>
   bb30c:	3101      	adds	r1, #1
   bb30e:	005b      	lsls	r3, r3, #1
   bb310:	e7ee      	b.n	bb2f0 <__lshift+0x1c>
   bb312:	2300      	movs	r3, #0
   bb314:	f100 0114 	add.w	r1, r0, #20
   bb318:	f100 0210 	add.w	r2, r0, #16
   bb31c:	4618      	mov	r0, r3
   bb31e:	4553      	cmp	r3, sl
   bb320:	db37      	blt.n	bb392 <__lshift+0xbe>
   bb322:	6920      	ldr	r0, [r4, #16]
   bb324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bb328:	f104 0314 	add.w	r3, r4, #20
   bb32c:	f019 091f 	ands.w	r9, r9, #31
   bb330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bb334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bb338:	d02f      	beq.n	bb39a <__lshift+0xc6>
   bb33a:	f1c9 0e20 	rsb	lr, r9, #32
   bb33e:	468a      	mov	sl, r1
   bb340:	f04f 0c00 	mov.w	ip, #0
   bb344:	681a      	ldr	r2, [r3, #0]
   bb346:	fa02 f209 	lsl.w	r2, r2, r9
   bb34a:	ea42 020c 	orr.w	r2, r2, ip
   bb34e:	f84a 2b04 	str.w	r2, [sl], #4
   bb352:	f853 2b04 	ldr.w	r2, [r3], #4
   bb356:	4298      	cmp	r0, r3
   bb358:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb35c:	d8f2      	bhi.n	bb344 <__lshift+0x70>
   bb35e:	1b03      	subs	r3, r0, r4
   bb360:	3b15      	subs	r3, #21
   bb362:	f023 0303 	bic.w	r3, r3, #3
   bb366:	3304      	adds	r3, #4
   bb368:	f104 0215 	add.w	r2, r4, #21
   bb36c:	4290      	cmp	r0, r2
   bb36e:	bf38      	it	cc
   bb370:	2304      	movcc	r3, #4
   bb372:	f841 c003 	str.w	ip, [r1, r3]
   bb376:	f1bc 0f00 	cmp.w	ip, #0
   bb37a:	d001      	beq.n	bb380 <__lshift+0xac>
   bb37c:	f108 0602 	add.w	r6, r8, #2
   bb380:	3e01      	subs	r6, #1
   bb382:	4638      	mov	r0, r7
   bb384:	612e      	str	r6, [r5, #16]
   bb386:	4621      	mov	r1, r4
   bb388:	f7ff fd88 	bl	bae9c <_Bfree>
   bb38c:	4628      	mov	r0, r5
   bb38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb392:	f842 0f04 	str.w	r0, [r2, #4]!
   bb396:	3301      	adds	r3, #1
   bb398:	e7c1      	b.n	bb31e <__lshift+0x4a>
   bb39a:	3904      	subs	r1, #4
   bb39c:	f853 2b04 	ldr.w	r2, [r3], #4
   bb3a0:	f841 2f04 	str.w	r2, [r1, #4]!
   bb3a4:	4298      	cmp	r0, r3
   bb3a6:	d8f9      	bhi.n	bb39c <__lshift+0xc8>
   bb3a8:	e7ea      	b.n	bb380 <__lshift+0xac>
   bb3aa:	bf00      	nop
   bb3ac:	000bc4e8 	.word	0x000bc4e8
   bb3b0:	000bc594 	.word	0x000bc594

000bb3b4 <__mcmp>:
   bb3b4:	b530      	push	{r4, r5, lr}
   bb3b6:	6902      	ldr	r2, [r0, #16]
   bb3b8:	690c      	ldr	r4, [r1, #16]
   bb3ba:	1b12      	subs	r2, r2, r4
   bb3bc:	d10e      	bne.n	bb3dc <__mcmp+0x28>
   bb3be:	f100 0314 	add.w	r3, r0, #20
   bb3c2:	3114      	adds	r1, #20
   bb3c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb3c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb3cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb3d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb3d4:	42a5      	cmp	r5, r4
   bb3d6:	d003      	beq.n	bb3e0 <__mcmp+0x2c>
   bb3d8:	d305      	bcc.n	bb3e6 <__mcmp+0x32>
   bb3da:	2201      	movs	r2, #1
   bb3dc:	4610      	mov	r0, r2
   bb3de:	bd30      	pop	{r4, r5, pc}
   bb3e0:	4283      	cmp	r3, r0
   bb3e2:	d3f3      	bcc.n	bb3cc <__mcmp+0x18>
   bb3e4:	e7fa      	b.n	bb3dc <__mcmp+0x28>
   bb3e6:	f04f 32ff 	mov.w	r2, #4294967295
   bb3ea:	e7f7      	b.n	bb3dc <__mcmp+0x28>

000bb3ec <__mdiff>:
   bb3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3f0:	460c      	mov	r4, r1
   bb3f2:	4606      	mov	r6, r0
   bb3f4:	4611      	mov	r1, r2
   bb3f6:	4620      	mov	r0, r4
   bb3f8:	4690      	mov	r8, r2
   bb3fa:	f7ff ffdb 	bl	bb3b4 <__mcmp>
   bb3fe:	1e05      	subs	r5, r0, #0
   bb400:	d110      	bne.n	bb424 <__mdiff+0x38>
   bb402:	4629      	mov	r1, r5
   bb404:	4630      	mov	r0, r6
   bb406:	f7ff fd09 	bl	bae1c <_Balloc>
   bb40a:	b930      	cbnz	r0, bb41a <__mdiff+0x2e>
   bb40c:	4b3a      	ldr	r3, [pc, #232]	; (bb4f8 <__mdiff+0x10c>)
   bb40e:	4602      	mov	r2, r0
   bb410:	f240 2132 	movw	r1, #562	; 0x232
   bb414:	4839      	ldr	r0, [pc, #228]	; (bb4fc <__mdiff+0x110>)
   bb416:	f7fb f82f 	bl	b6478 <__assert_func>
   bb41a:	2301      	movs	r3, #1
   bb41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb424:	bfa4      	itt	ge
   bb426:	4643      	movge	r3, r8
   bb428:	46a0      	movge	r8, r4
   bb42a:	4630      	mov	r0, r6
   bb42c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb430:	bfa6      	itte	ge
   bb432:	461c      	movge	r4, r3
   bb434:	2500      	movge	r5, #0
   bb436:	2501      	movlt	r5, #1
   bb438:	f7ff fcf0 	bl	bae1c <_Balloc>
   bb43c:	b920      	cbnz	r0, bb448 <__mdiff+0x5c>
   bb43e:	4b2e      	ldr	r3, [pc, #184]	; (bb4f8 <__mdiff+0x10c>)
   bb440:	4602      	mov	r2, r0
   bb442:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb446:	e7e5      	b.n	bb414 <__mdiff+0x28>
   bb448:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb44c:	6926      	ldr	r6, [r4, #16]
   bb44e:	60c5      	str	r5, [r0, #12]
   bb450:	f104 0914 	add.w	r9, r4, #20
   bb454:	f108 0514 	add.w	r5, r8, #20
   bb458:	f100 0e14 	add.w	lr, r0, #20
   bb45c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb460:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb464:	f108 0210 	add.w	r2, r8, #16
   bb468:	46f2      	mov	sl, lr
   bb46a:	2100      	movs	r1, #0
   bb46c:	f859 3b04 	ldr.w	r3, [r9], #4
   bb470:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb474:	fa1f f883 	uxth.w	r8, r3
   bb478:	fa11 f18b 	uxtah	r1, r1, fp
   bb47c:	0c1b      	lsrs	r3, r3, #16
   bb47e:	eba1 0808 	sub.w	r8, r1, r8
   bb482:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb486:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb48a:	fa1f f888 	uxth.w	r8, r8
   bb48e:	1419      	asrs	r1, r3, #16
   bb490:	454e      	cmp	r6, r9
   bb492:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb496:	f84a 3b04 	str.w	r3, [sl], #4
   bb49a:	d8e7      	bhi.n	bb46c <__mdiff+0x80>
   bb49c:	1b33      	subs	r3, r6, r4
   bb49e:	3b15      	subs	r3, #21
   bb4a0:	f023 0303 	bic.w	r3, r3, #3
   bb4a4:	3304      	adds	r3, #4
   bb4a6:	3415      	adds	r4, #21
   bb4a8:	42a6      	cmp	r6, r4
   bb4aa:	bf38      	it	cc
   bb4ac:	2304      	movcc	r3, #4
   bb4ae:	441d      	add	r5, r3
   bb4b0:	4473      	add	r3, lr
   bb4b2:	469e      	mov	lr, r3
   bb4b4:	462e      	mov	r6, r5
   bb4b6:	4566      	cmp	r6, ip
   bb4b8:	d30e      	bcc.n	bb4d8 <__mdiff+0xec>
   bb4ba:	f10c 0203 	add.w	r2, ip, #3
   bb4be:	1b52      	subs	r2, r2, r5
   bb4c0:	f022 0203 	bic.w	r2, r2, #3
   bb4c4:	3d03      	subs	r5, #3
   bb4c6:	45ac      	cmp	ip, r5
   bb4c8:	bf38      	it	cc
   bb4ca:	2200      	movcc	r2, #0
   bb4cc:	441a      	add	r2, r3
   bb4ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb4d2:	b17b      	cbz	r3, bb4f4 <__mdiff+0x108>
   bb4d4:	6107      	str	r7, [r0, #16]
   bb4d6:	e7a3      	b.n	bb420 <__mdiff+0x34>
   bb4d8:	f856 8b04 	ldr.w	r8, [r6], #4
   bb4dc:	fa11 f288 	uxtah	r2, r1, r8
   bb4e0:	1414      	asrs	r4, r2, #16
   bb4e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb4e6:	b292      	uxth	r2, r2
   bb4e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb4ec:	f84e 2b04 	str.w	r2, [lr], #4
   bb4f0:	1421      	asrs	r1, r4, #16
   bb4f2:	e7e0      	b.n	bb4b6 <__mdiff+0xca>
   bb4f4:	3f01      	subs	r7, #1
   bb4f6:	e7ea      	b.n	bb4ce <__mdiff+0xe2>
   bb4f8:	000bc4e8 	.word	0x000bc4e8
   bb4fc:	000bc594 	.word	0x000bc594

000bb500 <__ulp>:
   bb500:	b082      	sub	sp, #8
   bb502:	ed8d 0b00 	vstr	d0, [sp]
   bb506:	9b01      	ldr	r3, [sp, #4]
   bb508:	4912      	ldr	r1, [pc, #72]	; (bb554 <__ulp+0x54>)
   bb50a:	4019      	ands	r1, r3
   bb50c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb510:	2900      	cmp	r1, #0
   bb512:	dd05      	ble.n	bb520 <__ulp+0x20>
   bb514:	2200      	movs	r2, #0
   bb516:	460b      	mov	r3, r1
   bb518:	ec43 2b10 	vmov	d0, r2, r3
   bb51c:	b002      	add	sp, #8
   bb51e:	4770      	bx	lr
   bb520:	4249      	negs	r1, r1
   bb522:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb526:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb52a:	f04f 0200 	mov.w	r2, #0
   bb52e:	f04f 0300 	mov.w	r3, #0
   bb532:	da04      	bge.n	bb53e <__ulp+0x3e>
   bb534:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb538:	fa41 f300 	asr.w	r3, r1, r0
   bb53c:	e7ec      	b.n	bb518 <__ulp+0x18>
   bb53e:	f1a0 0114 	sub.w	r1, r0, #20
   bb542:	291e      	cmp	r1, #30
   bb544:	bfda      	itte	le
   bb546:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb54a:	fa20 f101 	lsrle.w	r1, r0, r1
   bb54e:	2101      	movgt	r1, #1
   bb550:	460a      	mov	r2, r1
   bb552:	e7e1      	b.n	bb518 <__ulp+0x18>
   bb554:	7ff00000 	.word	0x7ff00000

000bb558 <__b2d>:
   bb558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb55a:	6905      	ldr	r5, [r0, #16]
   bb55c:	f100 0714 	add.w	r7, r0, #20
   bb560:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb564:	1f2e      	subs	r6, r5, #4
   bb566:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb56a:	4620      	mov	r0, r4
   bb56c:	f7ff fd48 	bl	bb000 <__hi0bits>
   bb570:	f1c0 0320 	rsb	r3, r0, #32
   bb574:	280a      	cmp	r0, #10
   bb576:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb5f4 <__b2d+0x9c>
   bb57a:	600b      	str	r3, [r1, #0]
   bb57c:	dc14      	bgt.n	bb5a8 <__b2d+0x50>
   bb57e:	f1c0 0e0b 	rsb	lr, r0, #11
   bb582:	fa24 f10e 	lsr.w	r1, r4, lr
   bb586:	42b7      	cmp	r7, r6
   bb588:	ea41 030c 	orr.w	r3, r1, ip
   bb58c:	bf34      	ite	cc
   bb58e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb592:	2100      	movcs	r1, #0
   bb594:	3015      	adds	r0, #21
   bb596:	fa04 f000 	lsl.w	r0, r4, r0
   bb59a:	fa21 f10e 	lsr.w	r1, r1, lr
   bb59e:	ea40 0201 	orr.w	r2, r0, r1
   bb5a2:	ec43 2b10 	vmov	d0, r2, r3
   bb5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb5a8:	42b7      	cmp	r7, r6
   bb5aa:	bf3a      	itte	cc
   bb5ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb5b0:	f1a5 0608 	subcc.w	r6, r5, #8
   bb5b4:	2100      	movcs	r1, #0
   bb5b6:	380b      	subs	r0, #11
   bb5b8:	d017      	beq.n	bb5ea <__b2d+0x92>
   bb5ba:	f1c0 0c20 	rsb	ip, r0, #32
   bb5be:	fa04 f500 	lsl.w	r5, r4, r0
   bb5c2:	42be      	cmp	r6, r7
   bb5c4:	fa21 f40c 	lsr.w	r4, r1, ip
   bb5c8:	ea45 0504 	orr.w	r5, r5, r4
   bb5cc:	bf8c      	ite	hi
   bb5ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb5d2:	2400      	movls	r4, #0
   bb5d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb5d8:	fa01 f000 	lsl.w	r0, r1, r0
   bb5dc:	fa24 f40c 	lsr.w	r4, r4, ip
   bb5e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb5e4:	ea40 0204 	orr.w	r2, r0, r4
   bb5e8:	e7db      	b.n	bb5a2 <__b2d+0x4a>
   bb5ea:	ea44 030c 	orr.w	r3, r4, ip
   bb5ee:	460a      	mov	r2, r1
   bb5f0:	e7d7      	b.n	bb5a2 <__b2d+0x4a>
   bb5f2:	bf00      	nop
   bb5f4:	3ff00000 	.word	0x3ff00000

000bb5f8 <__d2b>:
   bb5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb5fc:	4689      	mov	r9, r1
   bb5fe:	2101      	movs	r1, #1
   bb600:	ec57 6b10 	vmov	r6, r7, d0
   bb604:	4690      	mov	r8, r2
   bb606:	f7ff fc09 	bl	bae1c <_Balloc>
   bb60a:	4604      	mov	r4, r0
   bb60c:	b930      	cbnz	r0, bb61c <__d2b+0x24>
   bb60e:	4602      	mov	r2, r0
   bb610:	4b25      	ldr	r3, [pc, #148]	; (bb6a8 <__d2b+0xb0>)
   bb612:	4826      	ldr	r0, [pc, #152]	; (bb6ac <__d2b+0xb4>)
   bb614:	f240 310a 	movw	r1, #778	; 0x30a
   bb618:	f7fa ff2e 	bl	b6478 <__assert_func>
   bb61c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb620:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb624:	bb35      	cbnz	r5, bb674 <__d2b+0x7c>
   bb626:	2e00      	cmp	r6, #0
   bb628:	9301      	str	r3, [sp, #4]
   bb62a:	d028      	beq.n	bb67e <__d2b+0x86>
   bb62c:	4668      	mov	r0, sp
   bb62e:	9600      	str	r6, [sp, #0]
   bb630:	f7ff fd06 	bl	bb040 <__lo0bits>
   bb634:	9900      	ldr	r1, [sp, #0]
   bb636:	b300      	cbz	r0, bb67a <__d2b+0x82>
   bb638:	9a01      	ldr	r2, [sp, #4]
   bb63a:	f1c0 0320 	rsb	r3, r0, #32
   bb63e:	fa02 f303 	lsl.w	r3, r2, r3
   bb642:	430b      	orrs	r3, r1
   bb644:	40c2      	lsrs	r2, r0
   bb646:	6163      	str	r3, [r4, #20]
   bb648:	9201      	str	r2, [sp, #4]
   bb64a:	9b01      	ldr	r3, [sp, #4]
   bb64c:	61a3      	str	r3, [r4, #24]
   bb64e:	2b00      	cmp	r3, #0
   bb650:	bf14      	ite	ne
   bb652:	2202      	movne	r2, #2
   bb654:	2201      	moveq	r2, #1
   bb656:	6122      	str	r2, [r4, #16]
   bb658:	b1d5      	cbz	r5, bb690 <__d2b+0x98>
   bb65a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb65e:	4405      	add	r5, r0
   bb660:	f8c9 5000 	str.w	r5, [r9]
   bb664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb668:	f8c8 0000 	str.w	r0, [r8]
   bb66c:	4620      	mov	r0, r4
   bb66e:	b003      	add	sp, #12
   bb670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb678:	e7d5      	b.n	bb626 <__d2b+0x2e>
   bb67a:	6161      	str	r1, [r4, #20]
   bb67c:	e7e5      	b.n	bb64a <__d2b+0x52>
   bb67e:	a801      	add	r0, sp, #4
   bb680:	f7ff fcde 	bl	bb040 <__lo0bits>
   bb684:	9b01      	ldr	r3, [sp, #4]
   bb686:	6163      	str	r3, [r4, #20]
   bb688:	2201      	movs	r2, #1
   bb68a:	6122      	str	r2, [r4, #16]
   bb68c:	3020      	adds	r0, #32
   bb68e:	e7e3      	b.n	bb658 <__d2b+0x60>
   bb690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb698:	f8c9 0000 	str.w	r0, [r9]
   bb69c:	6918      	ldr	r0, [r3, #16]
   bb69e:	f7ff fcaf 	bl	bb000 <__hi0bits>
   bb6a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb6a6:	e7df      	b.n	bb668 <__d2b+0x70>
   bb6a8:	000bc4e8 	.word	0x000bc4e8
   bb6ac:	000bc594 	.word	0x000bc594

000bb6b0 <__ratio>:
   bb6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb6b4:	4688      	mov	r8, r1
   bb6b6:	4669      	mov	r1, sp
   bb6b8:	4681      	mov	r9, r0
   bb6ba:	f7ff ff4d 	bl	bb558 <__b2d>
   bb6be:	a901      	add	r1, sp, #4
   bb6c0:	4640      	mov	r0, r8
   bb6c2:	ec55 4b10 	vmov	r4, r5, d0
   bb6c6:	f7ff ff47 	bl	bb558 <__b2d>
   bb6ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb6ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb6d2:	eba3 0c02 	sub.w	ip, r3, r2
   bb6d6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb6da:	1a9b      	subs	r3, r3, r2
   bb6dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb6e0:	ec51 0b10 	vmov	r0, r1, d0
   bb6e4:	2b00      	cmp	r3, #0
   bb6e6:	bfd6      	itet	le
   bb6e8:	460a      	movle	r2, r1
   bb6ea:	462a      	movgt	r2, r5
   bb6ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb6f0:	468b      	mov	fp, r1
   bb6f2:	462f      	mov	r7, r5
   bb6f4:	bfd4      	ite	le
   bb6f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb6fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb6fe:	4620      	mov	r0, r4
   bb700:	ee10 2a10 	vmov	r2, s0
   bb704:	465b      	mov	r3, fp
   bb706:	4639      	mov	r1, r7
   bb708:	f7f8 ff70 	bl	b45ec <__aeabi_ddiv>
   bb70c:	ec41 0b10 	vmov	d0, r0, r1
   bb710:	b003      	add	sp, #12
   bb712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb716 <__copybits>:
   bb716:	3901      	subs	r1, #1
   bb718:	b570      	push	{r4, r5, r6, lr}
   bb71a:	1149      	asrs	r1, r1, #5
   bb71c:	6914      	ldr	r4, [r2, #16]
   bb71e:	3101      	adds	r1, #1
   bb720:	f102 0314 	add.w	r3, r2, #20
   bb724:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb728:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb72c:	1f05      	subs	r5, r0, #4
   bb72e:	42a3      	cmp	r3, r4
   bb730:	d30c      	bcc.n	bb74c <__copybits+0x36>
   bb732:	1aa3      	subs	r3, r4, r2
   bb734:	3b11      	subs	r3, #17
   bb736:	f023 0303 	bic.w	r3, r3, #3
   bb73a:	3211      	adds	r2, #17
   bb73c:	42a2      	cmp	r2, r4
   bb73e:	bf88      	it	hi
   bb740:	2300      	movhi	r3, #0
   bb742:	4418      	add	r0, r3
   bb744:	2300      	movs	r3, #0
   bb746:	4288      	cmp	r0, r1
   bb748:	d305      	bcc.n	bb756 <__copybits+0x40>
   bb74a:	bd70      	pop	{r4, r5, r6, pc}
   bb74c:	f853 6b04 	ldr.w	r6, [r3], #4
   bb750:	f845 6f04 	str.w	r6, [r5, #4]!
   bb754:	e7eb      	b.n	bb72e <__copybits+0x18>
   bb756:	f840 3b04 	str.w	r3, [r0], #4
   bb75a:	e7f4      	b.n	bb746 <__copybits+0x30>

000bb75c <__any_on>:
   bb75c:	f100 0214 	add.w	r2, r0, #20
   bb760:	6900      	ldr	r0, [r0, #16]
   bb762:	114b      	asrs	r3, r1, #5
   bb764:	4298      	cmp	r0, r3
   bb766:	b510      	push	{r4, lr}
   bb768:	db11      	blt.n	bb78e <__any_on+0x32>
   bb76a:	dd0a      	ble.n	bb782 <__any_on+0x26>
   bb76c:	f011 011f 	ands.w	r1, r1, #31
   bb770:	d007      	beq.n	bb782 <__any_on+0x26>
   bb772:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb776:	fa24 f001 	lsr.w	r0, r4, r1
   bb77a:	fa00 f101 	lsl.w	r1, r0, r1
   bb77e:	428c      	cmp	r4, r1
   bb780:	d10b      	bne.n	bb79a <__any_on+0x3e>
   bb782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb786:	4293      	cmp	r3, r2
   bb788:	d803      	bhi.n	bb792 <__any_on+0x36>
   bb78a:	2000      	movs	r0, #0
   bb78c:	bd10      	pop	{r4, pc}
   bb78e:	4603      	mov	r3, r0
   bb790:	e7f7      	b.n	bb782 <__any_on+0x26>
   bb792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb796:	2900      	cmp	r1, #0
   bb798:	d0f5      	beq.n	bb786 <__any_on+0x2a>
   bb79a:	2001      	movs	r0, #1
   bb79c:	e7f6      	b.n	bb78c <__any_on+0x30>

000bb79e <_calloc_r>:
   bb79e:	b513      	push	{r0, r1, r4, lr}
   bb7a0:	434a      	muls	r2, r1
   bb7a2:	4611      	mov	r1, r2
   bb7a4:	9201      	str	r2, [sp, #4]
   bb7a6:	f7fa fe57 	bl	b6458 <_malloc_r>
   bb7aa:	4604      	mov	r4, r0
   bb7ac:	b118      	cbz	r0, bb7b6 <_calloc_r+0x18>
   bb7ae:	9a01      	ldr	r2, [sp, #4]
   bb7b0:	2100      	movs	r1, #0
   bb7b2:	f7fd ffa6 	bl	b9702 <memset>
   bb7b6:	4620      	mov	r0, r4
   bb7b8:	b002      	add	sp, #8
   bb7ba:	bd10      	pop	{r4, pc}
   bb7bc:	0000      	movs	r0, r0
	...

000bb7c0 <nan>:
   bb7c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb7c8 <nan+0x8>
   bb7c4:	4770      	bx	lr
   bb7c6:	bf00      	nop
   bb7c8:	00000000 	.word	0x00000000
   bb7cc:	7ff80000 	.word	0x7ff80000

000bb7d0 <__ascii_wctomb>:
   bb7d0:	b149      	cbz	r1, bb7e6 <__ascii_wctomb+0x16>
   bb7d2:	2aff      	cmp	r2, #255	; 0xff
   bb7d4:	bf85      	ittet	hi
   bb7d6:	238a      	movhi	r3, #138	; 0x8a
   bb7d8:	6003      	strhi	r3, [r0, #0]
   bb7da:	700a      	strbls	r2, [r1, #0]
   bb7dc:	f04f 30ff 	movhi.w	r0, #4294967295
   bb7e0:	bf98      	it	ls
   bb7e2:	2001      	movls	r0, #1
   bb7e4:	4770      	bx	lr
   bb7e6:	4608      	mov	r0, r1
   bb7e8:	4770      	bx	lr

000bb7ea <link_code_end>:
	...

000bb7ec <link_const_data_start>:
   bb7ec:	00000000 	.word	0x00000000
   bb7f0:	34fb0000 	.word	0x34fb0000
   bb7f4:	00805f9b 	.word	0x00805f9b
   bb7f8:	10008000 	.word	0x10008000
	...

000bb804 <dynalib_user>:
   bb804:	000b4a05 000b4a41 000b4a69 000b4a6d     .J..AJ..iJ..mJ..
   bb814:	00000000 63697270 002f7365 000a7325     ....prices/.%s..
   bb824:	5700212c 69746961 6620676e 4220726f     ,!.Waiting for B
   bb834:	6c63454c 746e6569 6e6f6320 7463656e     LEclient connect
   bb844:	2e6e6f69 6c002e2e 725f776f 65676e61     ion....low_range
   bb854:	756f685f 64255b72 25203a5d 48000a64     _hour[%d]: %d..H
   bb864:	65686769 70207473 65636972 20666f20     ighest price of 
   bb874:	20656874 3a796164 0a662520 776f4c00     the day: %f..Low
   bb884:	20747365 63697270 666f2065 65687420     est price of the
   bb894:	79616420 6625203a 6f48000a 20737275      day: %f..Hours 
   bb8a4:	7420666f 64206568 77207961 65726568     of the day where
   bb8b4:	656c6520 69727463 79746963 20736920      electricity is 
   bb8c4:	68746977 61206e69 70656363 20646574     within accepted 
   bb8d4:	676e6172 000a3a65 64323025 206f7420     range:..%02d to 
   bb8e4:	64323025 227b000a 5f726857 61646f74     %02d..{"Whr_toda
   bb8f4:	5b3a2279 7b002c00 69727022 79736563     y":[.,.{"pricesy
   bb904:	65747365 79616472 005b3a22 6c322e25     esterday":[.%.2l
   bb914:	227b0066 63697270 6f747365 22796164     f.{"pricestoday"
   bb924:	7b005b3a 69727022 74736563 726f6d6f     :[.{"pricestomor
   bb934:	22776f72 7b005b3a 72485722 7365795f     row":[.{"WHr_yes
   bb944:	64726574 3a227961 227b005b 5f724857     terday":[.{"WHr_
   bb954:	61646f74 5b3a2279 69614600 2064656c     today":[.Failed 
   bb964:	61206f74 636f6c6c 20657461 6f6d656d     to allocate memo
   bb974:	66207972 6320726f 5f74736f 74736579     ry for cost_yest
   bb984:	61647265 46000a79 656c6961 6f742064     erday..Failed to
   bb994:	6c6c6120 7461636f 656d2065 79726f6d      allocate memory
   bb9a4:	726f6620 736f6320 6f745f74 0a796164      for cost_today.
   bb9b4:	69614600 2064656c 61206f74 636f6c6c     .Failed to alloc
   bb9c4:	20657461 6f6d656d 66207972 6320726f     ate memory for c
   bb9d4:	5f74736f 6f6d6f74 776f7272 654d000a     ost_tomorrow..Me
   bb9e4:	79726f6d 6c6c6120 7461636f 66206465     mory allocated f
   bb9f4:	7020726f 65636972 25203a73 79622064     or prices: %d by
   bba04:	20736574 6420666f 6c62756f 000a7365     tes of doubles..
   bba14:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   bba24:	6d206574 726f6d65 6f662079 68772072     te memory for wh
   bba34:	646f745f 000a7961 6c696146 74206465     _today..Failed t
   bba44:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
   bba54:	6f662079 68772072 7365795f 64726574     y for wh_yesterd
   bba64:	000a7961 6f6d654d 61207972 636f6c6c     ay..Memory alloc
   bba74:	64657461 726f6620 3a687720 20642520     ated for wh: %d 
   bba84:	65747962 666f2073 746e6920 41000a73     bytes of ints..A
   bba94:	72657466 756c2520 207b000a 61657922     fter %lu..{ "yea
   bbaa4:	203a2272 22642522 6d22202c 68746e6f     r": "%d", "month
   bbab4:	25223a22 22643230 6422202c 3a227961     ":"%02d", "day":
   bbac4:	30252220 7d226432 706c6500 65736972      "%02d"}.elprise
   bbad4:	72700072 73656369 72754300 746e6572     r.prices.Current
   bbae4:	3a484820 203a4d4d 64323025 3230253a      HH:MM: %02d:%02
   bbaf4:	52000a64 3d495353 47006425 69747465     d..RSSI=%d.Getti
   bbb04:	7020676e 65636972 74616420 6f662061     ng price data fo
   bbb14:	65792072 72657473 0a796164 756f4300     r yesterday..Cou
   bbb24:	3d31746e 6425203a 6547000a 6e697474     nt1=: %d..Gettin
   bbb34:	72702067 20656369 61746164 726f6620     g price data for
   bbb44:	646f7420 000a7961 6e756f43 3a3d3274      today..Count2=:
   bbb54:	0a642520 65685400 69727020 20736563      %d..The prices 
   bbb64:	20726f66 6f6d6f74 766f7272 6c697720     for tomorrov wil
   bbb74:	6562206c 6c757020 2064656c 25207461     l be pulled at %
   bbb84:	30303a64 6e49000a 726f7720 43000a6b     d:00..In work..C
   bbb94:	70616568 68736928 6f682029 20737275     heap(ish) hours 
   bbba4:	7420666f 64206568 203a7961 32302500     of the day: .%02
   bbbb4:	6f742064 32302520 00202c64 20776f4c     d to %02d, .Low 
   bbbc4:	63697270 6f682065 00737275 65636552     price hours.Rece
   bbbd4:	64657669 776f7020 672f7265 000a7465     ived power/get..
   bbbe4:	6177227b 3a227474 007d6425 7270227b     {"watt":%d}.{"pr
   bbbf4:	73656369 61646f74 5b3a2279 2c322c31     icestoday":[1,2,
   bbc04:	2c342c33 2c362c35 2c382c37 30312c39     3,4,5,6,7,8,9,10
   bbc14:	2c31312c 312c3231 34312c33 2c35312c     ,11,12,13,14,15,
   bbc24:	312c3631 38312c37 2c39312c 322c3032     16,17,18,19,20,2
   bbc34:	32322c31 2c33322c 7d5d3432 656c6200     1,22,23,24]}.ble
   bbc44:	6e6f635f 7463656e 000a6465 74746157     _connected..Watt
   bbc54:	776f6e20 4b4b4400 73655920 64726574      now.DKK Yesterd
   bbc64:	44007961 54204b4b 7961646f 4b4b4400     ay.DKK Today.DKK
   bbc74:	6d6f5420 6f72726f 68570077 6f542072      Tomorrow.Whr To
   bbc84:	00796164 20726857 74736559 61647265     day.Whr Yesterda
   bbc94:	00000079                                y...

000bbc98 <_ZTV5Timer>:
	...
   bbca0:	000b4dd5 000b4e19 000b4b05 35323462     .M...N...K..b425
   bbcb0:	35303430 3462662d 37342d62 622d3634     0405-fb4b-4746-b
   bbcc0:	2d306232 30663339 31313665 36633232     2b0-93f0e61122c6
   bbcd0:	32346200 30343035 62662d34 342d6234     .b4250404-fb4b-4
   bbce0:	2d363437 30623262 6633392d 31366530     746-b2b0-93f0e61
   bbcf0:	63323231 34620036 34303532 662d3330     122c6.b4250403-f
   bbd00:	2d623462 36343734 6232622d 33392d30     b4b-4746-b2b0-93
   bbd10:	36653066 32323131 62003663 30353234     f0e61122c6.b4250
   bbd20:	2d323034 62346266 3437342d 32622d36     402-fb4b-4746-b2
   bbd30:	392d3062 65306633 32313136 00366332     b0-93f0e61122c6.
   bbd40:	35323462 36303430 3462662d 37342d62     b4250406-fb4b-47
   bbd50:	622d3634 2d306232 30663339 31313665     46-b2b0-93f0e611
   bbd60:	36633232 32346200 30343035 62662d31     22c6.b4250401-fb
   bbd70:	342d6234 2d363437 30623262 6633392d     4b-4746-b2b0-93f
   bbd80:	31366530 63323231 66330036 35316131     0e61122c6.3f1a15
   bbd90:	652d3639 2d663765 64623234 6434382d     96-ee7f-42bd-84d
   bbda0:	31622d31 34393261 65323866 41006663     1-b1a294f82ecf.A
   bbdb0:	6e6f6772 00004d50                       rgonPM..

000bbdb8 <_ZTVN5spark13EthernetClassE>:
	...
   bbdc0:	000b6507 000b64fd 000b64f3 000b64e9     .e...d...d...d..
   bbdd0:	000b64dd 000b64d1 000b9191 000b9199     .d...d..........
   bbde0:	000b64c5 000b64bd 000b64b3 000b64a9     .d...d...d...d..
   bbdf0:	000b91c9                                ....

000bbdf4 <_ZTV3UDP>:
	...
   bbdfc:	000b6bb9 000b6bdd 000b6679 000b67a1     .k...k..yf...g..
   bbe0c:	000b6631 000b6691 000b66af 000b66c9     1f...f...f...f..
   bbe1c:	000b66ed 000b6785 000b6a5f 000b6825     .f...g.._j..%h..
   bbe2c:	000b697d 000b6619 000b6b49 000b6905     }i...f..Ik...i..
   bbe3c:	000b6639 000b6b77 000b67cb 000b6627     9f..wk...g..'f..
   bbe4c:	000b685d 000b662d 000b66cb fffffff0     ]h..-f...f......
   bbe5c:	00000000 000b66e5 65737341 6f697472     .....f..Assertio
   bbe6c:	6961466e 6572756c 6c616620 77006573     nFailure false.w
   bbe7c:	6e697269 6c622e67 74530065 20747261     iring.ble.Start 
   bbe8c:	63736964 7265766f 20676e69 76726573     discovering serv
   bbe9c:	73656369 7341002e 74726573 466e6f69     ices..AssertionF
   bbeac:	756c6961 68206572 625f6c61 735f656c     ailure hal_ble_s
   bbebc:	6b636174 696e695f 756e2874 74706c6c     tack_init(nullpt
   bbecc:	3d202972 5953203d 4d455453 5252455f     r) == SYSTEM_ERR
   bbedc:	4e5f524f 00454e4f 72656550 76656420     OR_NONE.Peer dev
   bbeec:	20656369 6d207369 69737369 0021676e     ice is missing!.
   bbefc:	6c696146 74206465 7061206f 646e6570     Failed to append
   bbf0c:	65657020 65432072 6172746e 6564206c      peer Central de
   bbf1c:	65636976 6f43002e 63656e6e 00646574     vice..Connected.
   bbf2c:	63736944 656e6e6f 64657463 70754400     Disconnected.Dup
   bbf3c:	6163696c 20646574 72616863 65746361     licated characte
   bbf4c:	74736972 63206369 6f6e6e61 65622074     ristic cannot be
   bbf5c:	64646120 002e6465 6c696146 74206465      added..Failed t
   bbf6c:	7061206f 646e6570 636f6c20 63206c61     o append local c
   bbf7c:	61726168 72657463 69747369 00002e63     haracteristic...

000bbf8c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbf94:	000b6df3 000b6e55 000b6f75 000b6e7f     .m..Un..uo...n..
   bbfa4:	000b6df5                                .m..

000bbfa8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbfb0:	000b6def 000b6e63 000b6df1 000b6e85     .m..cn...m...n..
   bbfc0:	000b6e15                                .n..

000bbfc4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbfcc:	000b6ded 000b6e71 000b7735 000b6e8b     .m..qn..5w...n..
   bbfdc:	000b6e35                                5n..

000bbfe0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bbfe8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bbfe8:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bbff8 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bbff8:	5f9b34fb 80000080 00001000 00000000     .4._............
   bc008:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bc018:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bc028 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc030:	000b8659 000b865f 000b869d 000b866d     Y..._.......m...
   bc040:	000b865b                                [...

000bc044 <_ZTV9IPAddress>:
	...
   bc04c:	000b8b99 000b8b89 000b8b8b              ............

000bc058 <_ZTV9USBSerial>:
	...
   bc060:	000b8cbb 000b8d23 000b8cf9 000b8209     ....#...........
   bc070:	000b8ceb 000b8cbd 000b8ccd 000b8d1d     ................
   bc080:	000b8cdd 000b8cb5                       ........

000bc088 <_ZTV11USARTSerial>:
	...
   bc090:	000b8e0d 000b8e79 000b8e51 000b8209     ....y...Q.......
   bc0a0:	000b8e21 000b8e3d 000b8e2f 000b8e4b     !...=.../...K...
   bc0b0:	000b8e0f 000b8e13                       ........

000bc0b8 <_ZTV7TwoWire>:
	...
   bc0c0:	000b8ed9 000b8f23 000b8efb 000b8edb     ....#...........
   bc0d0:	000b8f03 000b8f0b 000b8f13 000b8f1b     ................

000bc0e0 <_ZTVN5spark9WiFiClassE>:
	...
   bc0e8:	000b8fc7 000b8fbd 000b8fb3 000b8f5b     ............[...
   bc0f8:	000b8fa7 000b8f9b 000b9191 000b9199     ................
   bc108:	000b8f8f 000b8f87 000b8f7d 000b8f73     ........}...s...
   bc118:	000b91c9                                ....

000bc11c <_ZTV10WiFiSignal>:
	...
   bc124:	000b8f55 000b8f65 000b8f57 000b8fd1     U...e...W.......
   bc134:	000b9005 000b9031 000b9065              ....1...e...

000bc140 <_ZTVN5spark12NetworkClassE>:
	...
   bc148:	000b9151 000b915b 000b9165 000b916f     Q...[...e...o...
   bc158:	000b9179 000b9185 000b9191 000b9199     y...............
   bc168:	000b91a1 000b91ad 000b91b5 000b91bf     ................
   bc178:	000b91c9                                ....

000bc17c <_ZSt7nothrow>:
	...

000bc17d <_ZTSSt19_Sp_make_shared_tag>:
   bc17d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bc18d:	5f646572 00676174                        red_tag....

000bc198 <_ZTISt19_Sp_make_shared_tag>:
   bc198:	000bc1d8 000bc17d                       ....}...

000bc1a0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bc1a0:	000bc238 000bc1ac 000bc25c              8.......\...

000bc1ac <_ZTSN10__cxxabiv117__class_type_infoE>:
   bc1ac:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bc1bc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bc1cc:	00000045                                E...

000bc1d0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bc1d0:	00000000 000bc1a0 000b94a1 000b94b5     ................
   bc1e0:	000b9649 000b9649 000b951f 000b9461     I...I.......a...
   bc1f0:	000b9507 000b94c9 000b9493              ............

000bc1fc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bc1fc:	000bc238 000bc208 000bc1a0              8...........

000bc208 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bc208:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bc218:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bc228:	456f666e 00000000                       nfoE....

000bc230 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bc230:	00000000 000bc1fc 000b9549 000b955d     ........I...]...
   bc240:	000b9649 000b9649 000b951f 000b9461     I...I.......a...
   bc250:	000b961d 000b95a9 000b9571              ........q...

000bc25c <_ZTISt9type_info>:
   bc25c:	000bc1d8 000bc264                       ....d...

000bc264 <_ZTSSt9type_info>:
   bc264:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bc274:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bc284:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   bc294:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bc2a4:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bc2b4:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bc2c4:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bc2d4:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bc2e4:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bc2f4:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   bc304:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000bc314 <fpi.1>:
   bc314:	00000035 fffffbce 000003cb 00000001     5...............
   bc324:	00000000                                ....

000bc328 <fpinan.0>:
   bc328:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bc340 <tinytens>:
   bc340:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bc350:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bc360:	64ac6f43 11680628 746e6d2f 726f772f     Co.d(.h./mnt/wor
   bc370:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   bc380:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   bc390:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   bc3a0:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   bc3b0:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   bc3c0:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   bc3d0:	696c2f62 732f6362 6e697274 74732f67     b/libc/string/st
   bc3e0:	6b6f7472                                 rtok.c.

000bc3e7 <_ctype_>:
   bc3e7:	20202000 20202020 28282020 20282828     .         ((((( 
   bc3f7:	20202020 20202020 20202020 20202020                     
   bc407:	10108820 10101010 10101010 10101010      ...............
   bc417:	04040410 04040404 10040404 10101010     ................
   bc427:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bc437:	01010101 01010101 01010101 10101010     ................
   bc447:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bc457:	02020202 02020202 02020202 10101010     ................
   bc467:	00000020 00000000 00000000 00000000      ...............
	...
   bc4e7:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bc4f7:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bc507:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bc517:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bc527:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bc537:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bc547:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bc557:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bc567:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bc577:	78656874 0000632e                        thex.c...

000bc580 <_C_numeric_locale>:
   bc580:	000bb849 000bbb89 2003d9ec 4f500043     I.......... C.PO
   bc590:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bc5a0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bc5b0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bc5c0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bc5d0:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bc5e0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bc5f0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bc600:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bc610:	00000063 00000000                       c.......

000bc618 <__mprec_bigtens>:
   bc618:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bc628:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bc638:	7f73bf3c 75154fdd                       <.s..O.u

000bc640 <__mprec_tens>:
   bc640:	00000000 3ff00000 00000000 40240000     .......?......$@
   bc650:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bc660:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bc670:	00000000 412e8480 00000000 416312d0     .......A......cA
   bc680:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bc690:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bc6a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bc6b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bc6c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bc6d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bc6e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bc6f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bc700:	79d99db4 44ea7843                       ...yCx.D

000bc708 <p05.0>:
   bc708:	00000005 00000019 0000007d              ........}...

000bc714 <link_const_data_end>:
   bc714:	000b59fd 	.word	0x000b59fd
   bc718:	000b5d91 	.word	0x000b5d91
   bc71c:	000b6511 	.word	0x000b6511
   bc720:	000b655d 	.word	0x000b655d
   bc724:	000b81f9 	.word	0x000b81f9
   bc728:	000b8329 	.word	0x000b8329
   bc72c:	000b84f9 	.word	0x000b84f9
   bc730:	000b8515 	.word	0x000b8515
   bc734:	000b913d 	.word	0x000b913d
   bc738:	000b92a1 	.word	0x000b92a1
