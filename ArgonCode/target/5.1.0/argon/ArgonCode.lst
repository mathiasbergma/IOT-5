
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/5.1.0/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007fbc  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbfdc  000bbfdc  0000bfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000208  2003da0c  000bc000  0000da0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000bdc  2003dc18  2003dc18  0001dc18  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bc208  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc20c  000bc20c  0001c20c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bc212  000bc212  0001c212  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc236  000bc236  0001c236  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0013cffd  00000000  00000000  0001c23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001542d  00000000  00000000  00159237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003bffb  00000000  00000000  0016e664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000033a8  00000000  00000000  001aa65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b058  00000000  00000000  001ada07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d00b  00000000  00000000  001b8a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00046b3e  00000000  00000000  001f5a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013a165  00000000  00000000  0023c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000992c  00000000  00000000  00376710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_f2lz>:
   b490c:	ee07 0a90 	vmov	s15, r0
   b4910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4918:	d401      	bmi.n	b491e <__aeabi_f2lz+0x12>
   b491a:	f000 b80b 	b.w	b4934 <__aeabi_f2ulz>
   b491e:	eef1 7a67 	vneg.f32	s15, s15
   b4922:	b508      	push	{r3, lr}
   b4924:	ee17 0a90 	vmov	r0, s15
   b4928:	f000 f804 	bl	b4934 <__aeabi_f2ulz>
   b492c:	4240      	negs	r0, r0
   b492e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4932:	bd08      	pop	{r3, pc}

000b4934 <__aeabi_f2ulz>:
   b4934:	b5d0      	push	{r4, r6, r7, lr}
   b4936:	f7ff fcd7 	bl	b42e8 <__aeabi_f2d>
   b493a:	4b0c      	ldr	r3, [pc, #48]	; (b496c <__aeabi_f2ulz+0x38>)
   b493c:	2200      	movs	r2, #0
   b493e:	4606      	mov	r6, r0
   b4940:	460f      	mov	r7, r1
   b4942:	f7ff fd29 	bl	b4398 <__aeabi_dmul>
   b4946:	f7ff ffc1 	bl	b48cc <__aeabi_d2uiz>
   b494a:	4604      	mov	r4, r0
   b494c:	f7ff fcaa 	bl	b42a4 <__aeabi_ui2d>
   b4950:	4b07      	ldr	r3, [pc, #28]	; (b4970 <__aeabi_f2ulz+0x3c>)
   b4952:	2200      	movs	r2, #0
   b4954:	f7ff fd20 	bl	b4398 <__aeabi_dmul>
   b4958:	4602      	mov	r2, r0
   b495a:	460b      	mov	r3, r1
   b495c:	4630      	mov	r0, r6
   b495e:	4639      	mov	r1, r7
   b4960:	f7ff fb62 	bl	b4028 <__aeabi_dsub>
   b4964:	f7ff ffb2 	bl	b48cc <__aeabi_d2uiz>
   b4968:	4621      	mov	r1, r4
   b496a:	bdd0      	pop	{r4, r6, r7, pc}
   b496c:	3df00000 	.word	0x3df00000
   b4970:	41f00000 	.word	0x41f00000

000b4974 <__aeabi_d2ulz>:
   b4974:	b5d0      	push	{r4, r6, r7, lr}
   b4976:	4b0c      	ldr	r3, [pc, #48]	; (b49a8 <__aeabi_d2ulz+0x34>)
   b4978:	2200      	movs	r2, #0
   b497a:	4606      	mov	r6, r0
   b497c:	460f      	mov	r7, r1
   b497e:	f7ff fd0b 	bl	b4398 <__aeabi_dmul>
   b4982:	f7ff ffa3 	bl	b48cc <__aeabi_d2uiz>
   b4986:	4604      	mov	r4, r0
   b4988:	f7ff fc8c 	bl	b42a4 <__aeabi_ui2d>
   b498c:	4b07      	ldr	r3, [pc, #28]	; (b49ac <__aeabi_d2ulz+0x38>)
   b498e:	2200      	movs	r2, #0
   b4990:	f7ff fd02 	bl	b4398 <__aeabi_dmul>
   b4994:	4602      	mov	r2, r0
   b4996:	460b      	mov	r3, r1
   b4998:	4630      	mov	r0, r6
   b499a:	4639      	mov	r1, r7
   b499c:	f7ff fb44 	bl	b4028 <__aeabi_dsub>
   b49a0:	f7ff ff94 	bl	b48cc <__aeabi_d2uiz>
   b49a4:	4621      	mov	r1, r4
   b49a6:	bdd0      	pop	{r4, r6, r7, pc}
   b49a8:	3df00000 	.word	0x3df00000
   b49ac:	41f00000 	.word	0x41f00000

000b49b0 <strcmp>:
   b49b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49b8:	2a01      	cmp	r2, #1
   b49ba:	bf28      	it	cs
   b49bc:	429a      	cmpcs	r2, r3
   b49be:	d0f7      	beq.n	b49b0 <strcmp>
   b49c0:	1ad0      	subs	r0, r2, r3
   b49c2:	4770      	bx	lr

000b49c4 <strlen>:
   b49c4:	4603      	mov	r3, r0
   b49c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b49ca:	2a00      	cmp	r2, #0
   b49cc:	d1fb      	bne.n	b49c6 <strlen+0x2>
   b49ce:	1a18      	subs	r0, r3, r0
   b49d0:	3801      	subs	r0, #1
   b49d2:	4770      	bx	lr

000b49d4 <__aeabi_d2lz>:
   b49d4:	b538      	push	{r3, r4, r5, lr}
   b49d6:	2200      	movs	r2, #0
   b49d8:	2300      	movs	r3, #0
   b49da:	4604      	mov	r4, r0
   b49dc:	460d      	mov	r5, r1
   b49de:	f7ff ff4d 	bl	b487c <__aeabi_dcmplt>
   b49e2:	b928      	cbnz	r0, b49f0 <__aeabi_d2lz+0x1c>
   b49e4:	4620      	mov	r0, r4
   b49e6:	4629      	mov	r1, r5
   b49e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b49ec:	f7ff bfc2 	b.w	b4974 <__aeabi_d2ulz>
   b49f0:	4620      	mov	r0, r4
   b49f2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b49f6:	f7ff ffbd 	bl	b4974 <__aeabi_d2ulz>
   b49fa:	4240      	negs	r0, r0
   b49fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a00:	bd38      	pop	{r3, r4, r5, pc}
   b4a02:	bf00      	nop

000b4a04 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a04:	4809      	ldr	r0, [pc, #36]	; (b4a2c <module_user_pre_init+0x28>)
   b4a06:	490a      	ldr	r1, [pc, #40]	; (b4a30 <module_user_pre_init+0x2c>)
   b4a08:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a0a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a0c:	d005      	beq.n	b4a1a <module_user_pre_init+0x16>
   b4a0e:	4a09      	ldr	r2, [pc, #36]	; (b4a34 <module_user_pre_init+0x30>)
   b4a10:	4282      	cmp	r2, r0
   b4a12:	d002      	beq.n	b4a1a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a14:	1a12      	subs	r2, r2, r0
   b4a16:	f004 facc 	bl	b8fb2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a1a:	4807      	ldr	r0, [pc, #28]	; (b4a38 <module_user_pre_init+0x34>)
   b4a1c:	4a07      	ldr	r2, [pc, #28]	; (b4a3c <module_user_pre_init+0x38>)
   b4a1e:	2100      	movs	r1, #0
   b4a20:	1a12      	subs	r2, r2, r0
   b4a22:	f004 faee 	bl	b9002 <memset>
    return &link_global_data_start;
}
   b4a26:	4801      	ldr	r0, [pc, #4]	; (b4a2c <module_user_pre_init+0x28>)
   b4a28:	bd08      	pop	{r3, pc}
   b4a2a:	bf00      	nop
   b4a2c:	2003da0c 	.word	0x2003da0c
   b4a30:	000bc000 	.word	0x000bc000
   b4a34:	2003dc14 	.word	0x2003dc14
   b4a38:	2003dc18 	.word	0x2003dc18
   b4a3c:	2003e7f4 	.word	0x2003e7f4

000b4a40 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a40:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a42:	4e07      	ldr	r6, [pc, #28]	; (b4a60 <module_user_init+0x20>)
   b4a44:	4c07      	ldr	r4, [pc, #28]	; (b4a64 <module_user_init+0x24>)
    module_user_init_hook();
   b4a46:	f003 fa6b 	bl	b7f20 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a4a:	1ba4      	subs	r4, r4, r6
   b4a4c:	08a4      	lsrs	r4, r4, #2
   b4a4e:	2500      	movs	r5, #0
   b4a50:	42ac      	cmp	r4, r5
   b4a52:	d100      	bne.n	b4a56 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a54:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a56:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a5a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a5c:	3501      	adds	r5, #1
   b4a5e:	e7f7      	b.n	b4a50 <module_user_init+0x10>
   b4a60:	000bbfb4 	.word	0x000bbfb4
   b4a64:	000bbfdc 	.word	0x000bbfdc

000b4a68 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a68:	f000 bdb8 	b.w	b55dc <setup>

000b4a6c <module_user_loop>:
}

void module_user_loop() {
   b4a6c:	b508      	push	{r3, lr}
    loop();
   b4a6e:	f000 feb7 	bl	b57e0 <loop>
    _post_loop();
}
   b4a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a76:	f003 ba0b 	b.w	b7e90 <_post_loop>

000b4a7a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4a7a:	f001 bc3f 	b.w	b62fc <malloc>

000b4a7e <_Znaj>:
   b4a7e:	f001 bc3d 	b.w	b62fc <malloc>

000b4a82 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a82:	f001 bc43 	b.w	b630c <free>

000b4a86 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a86:	7800      	ldrb	r0, [r0, #0]
   b4a88:	fab0 f080 	clz	r0, r0
   b4a8c:	0940      	lsrs	r0, r0, #5
   b4a8e:	4770      	bx	lr

000b4a90 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a90:	2301      	movs	r3, #1
   b4a92:	7003      	strb	r3, [r0, #0]
   b4a94:	4770      	bx	lr
	...

000b4a98 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
}
/**
 * @brief    Sets a flag when a new BLE connection is established
 */
void BLEOnConnectcallback(const BlePeerDevice &peer, void *context)
{
   b4a98:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b4a9a:	4b04      	ldr	r3, [pc, #16]	; (b4aac <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b4a9c:	2201      	movs	r2, #1
   b4a9e:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4aa0:	f001 f986 	bl	b5db0 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b4aa4:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b4aa6:	6018      	str	r0, [r3, #0]
}
   b4aa8:	bd08      	pop	{r3, pc}
   b4aaa:	bf00      	nop
   b4aac:	2003dc35 	.word	0x2003dc35
   b4ab0:	2003dd60 	.word	0x2003dd60

000b4ab4 <_Z13handle_sensorv>:
/**
 * @brief    IRQ handler for the KW sensor. This function is called every time the KW sensor detects a pulse.
 */
void handle_sensor(void)
{
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	f001 f97b 	bl	b5db0 <HAL_Timer_Get_Milli_Seconds>
    static unsigned long last_read = 0;
    unsigned long current_reading = millis();
    unsigned long delta = current_reading - last_read;
   b4aba:	490c      	ldr	r1, [pc, #48]	; (b4aec <_Z13handle_sensorv+0x38>)
   b4abc:	680b      	ldr	r3, [r1, #0]
   b4abe:	1ac3      	subs	r3, r0, r3

    // Check if we have a valid reading. I.e. at least 100 ms since last reading, which is equal to 36kW
    if (delta > 100)
   b4ac0:	2b64      	cmp	r3, #100	; 0x64
   b4ac2:	d911      	bls.n	b4ae8 <_Z13handle_sensorv+0x34>
    {
        // We have a valid reading
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4ac4:	4a0a      	ldr	r2, [pc, #40]	; (b4af0 <_Z13handle_sensorv+0x3c>)
   b4ac6:	fbb2 f3f3 	udiv	r3, r2, r3
   b4aca:	4a0a      	ldr	r2, [pc, #40]	; (b4af4 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b4acc:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4ace:	6013      	str	r3, [r2, #0]

        // One flash from sensor equals 1 Whr - Add to total
        wh_today[currentHour] += 1;
   b4ad0:	4b09      	ldr	r3, [pc, #36]	; (b4af8 <_Z13handle_sensorv+0x44>)
   b4ad2:	7819      	ldrb	r1, [r3, #0]
   b4ad4:	4b09      	ldr	r3, [pc, #36]	; (b4afc <_Z13handle_sensorv+0x48>)
   b4ad6:	681a      	ldr	r2, [r3, #0]
   b4ad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b4adc:	3301      	adds	r3, #1
   b4ade:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update flag - Transmit sensor values
        TRANSMIT_SENSOR = true;
   b4ae2:	4b07      	ldr	r3, [pc, #28]	; (b4b00 <_Z13handle_sensorv+0x4c>)
   b4ae4:	2201      	movs	r2, #1
   b4ae6:	701a      	strb	r2, [r3, #0]
    }
}
   b4ae8:	bd08      	pop	{r3, pc}
   b4aea:	bf00      	nop
   b4aec:	2003dce4 	.word	0x2003dce4
   b4af0:	0036ee80 	.word	0x0036ee80
   b4af4:	2003dd4c 	.word	0x2003dd4c
   b4af8:	2003dd5c 	.word	0x2003dd5c
   b4afc:	2003e1b4 	.word	0x2003e1b4
   b4b00:	2003dc3a 	.word	0x2003dc3a

000b4b04 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4b04:	6943      	ldr	r3, [r0, #20]
   b4b06:	b113      	cbz	r3, b4b0e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b08:	6983      	ldr	r3, [r0, #24]
   b4b0a:	300c      	adds	r0, #12
   b4b0c:	4718      	bx	r3
            callback();
        }
    }
   b4b0e:	4770      	bx	lr

000b4b10 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4b10:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4b12:	2100      	movs	r1, #0
   b4b14:	4604      	mov	r4, r0
   b4b16:	4608      	mov	r0, r1
   b4b18:	f001 f9f4 	bl	b5f04 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4b1c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4b1e:	4620      	mov	r0, r4
   b4b20:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4b22:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4b24:	f001 fa06 	bl	b5f34 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4b28:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4b2a:	b10c      	cbz	r4, b4b30 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4b2c:	2301      	movs	r3, #1
   b4b2e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4b30:	2100      	movs	r1, #0
   b4b32:	2001      	movs	r0, #1
   b4b34:	f001 f9e6 	bl	b5f04 <os_thread_scheduling>
            }
        }
        if (t) {
   b4b38:	b12c      	cbz	r4, b4b46 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4b3a:	6823      	ldr	r3, [r4, #0]
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	689b      	ldr	r3, [r3, #8]
   b4b40:	4798      	blx	r3
            t->running = false;
   b4b42:	2300      	movs	r3, #0
   b4b44:	7123      	strb	r3, [r4, #4]
        }
    }
   b4b46:	b002      	add	sp, #8
   b4b48:	bd10      	pop	{r4, pc}

000b4b4a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4b4a:	2a01      	cmp	r2, #1
   b4b4c:	d102      	bne.n	b4b54 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b4e:	6001      	str	r1, [r0, #0]
      }
   b4b50:	2000      	movs	r0, #0
   b4b52:	4770      	bx	lr
	  switch (__op)
   b4b54:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4b56:	bf04      	itt	eq
   b4b58:	680b      	ldreq	r3, [r1, #0]
   b4b5a:	6003      	streq	r3, [r0, #0]
	      break;
   b4b5c:	e7f8      	b.n	b4b50 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4b5e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4b5e:	6803      	ldr	r3, [r0, #0]
   b4b60:	4718      	bx	r3

000b4b62 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4b62:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4b64:	6880      	ldr	r0, [r0, #8]
   b4b66:	b130      	cbz	r0, b4b76 <_ZN5Timer4stopEj.isra.0+0x14>
   b4b68:	2300      	movs	r3, #0
   b4b6a:	e9cd 1300 	strd	r1, r3, [sp]
   b4b6e:	461a      	mov	r2, r3
   b4b70:	2102      	movs	r1, #2
   b4b72:	f001 f9e7 	bl	b5f44 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4b76:	b003      	add	sp, #12
   b4b78:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b7c <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b4b7c:	b530      	push	{r4, r5, lr}
   b4b7e:	4605      	mov	r5, r0
   b4b80:	b085      	sub	sp, #20
   b4b82:	460c      	mov	r4, r1
        stop(fromISR);
   b4b84:	4611      	mov	r1, r2
   b4b86:	9203      	str	r2, [sp, #12]
   b4b88:	f7ff ffeb 	bl	b4b62 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4b8c:	68a8      	ldr	r0, [r5, #8]
   b4b8e:	b130      	cbz	r0, b4b9e <_ZN5Timer6_startEjb.isra.0+0x22>
   b4b90:	2300      	movs	r3, #0
   b4b92:	e9cd 4300 	strd	r4, r3, [sp]
   b4b96:	9a03      	ldr	r2, [sp, #12]
   b4b98:	4619      	mov	r1, r3
   b4b9a:	f001 f9d3 	bl	b5f44 <os_timer_change>
    }
   b4b9e:	b005      	add	sp, #20
   b4ba0:	bd30      	pop	{r4, r5, pc}
	...

000b4ba4 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b4ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b4ba8:	f003 f8f8 	bl	b7d9c <_ZN9TimeClass4hourEv>
   b4bac:	4f26      	ldr	r7, [pc, #152]	; (b4c48 <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b4bae:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4c4c <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b4bb2:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b4bb4:	f003 f8fe 	bl	b7db4 <_ZN9TimeClass6minuteEv>
   b4bb8:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b4bba:	f003 f907 	bl	b7dcc <_ZN9TimeClass6secondEv>
   b4bbe:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b4bc0:	f003 f910 	bl	b7de4 <_ZN9TimeClass3dayEv>
    timer.stop();
   b4bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b4bc8:	4604      	mov	r4, r0
    timer.stop();
   b4bca:	4640      	mov	r0, r8
   b4bcc:	f7ff ffc9 	bl	b4b62 <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4bd0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b4bd4:	b178      	cbz	r0, b4bf6 <_Z10check_timev+0x52>
   b4bd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b4bda:	b2ed      	uxtb	r5, r5
   b4bdc:	2200      	movs	r2, #0
   b4bde:	e9cd 1200 	strd	r1, r2, [sp]
   b4be2:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4be6:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4bea:	43ed      	mvns	r5, r5
   b4bec:	fb01 5303 	mla	r3, r1, r3, r5
   b4bf0:	2103      	movs	r1, #3
   b4bf2:	f001 f9a7 	bl	b5f44 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4bf6:	4815      	ldr	r0, [pc, #84]	; (b4c4c <_Z10check_timev+0xa8>)
   b4bf8:	2200      	movs	r2, #0
   b4bfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4bfe:	f7ff ffbd 	bl	b4b7c <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b4c02:	783b      	ldrb	r3, [r7, #0]
   b4c04:	2b0d      	cmp	r3, #13
   b4c06:	d114      	bne.n	b4c32 <_Z10check_timev+0x8e>
   b4c08:	4a11      	ldr	r2, [pc, #68]	; (b4c50 <_Z10check_timev+0xac>)
   b4c0a:	6811      	ldr	r1, [r2, #0]
   b4c0c:	b2e4      	uxtb	r4, r4
   b4c0e:	42a1      	cmp	r1, r4
   b4c10:	d003      	beq.n	b4c1a <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b4c12:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4c14:	4a0f      	ldr	r2, [pc, #60]	; (b4c54 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b4c16:	2101      	movs	r1, #1
   b4c18:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4c1a:	b93e      	cbnz	r6, b4c2c <_Z10check_timev+0x88>
   b4c1c:	4a0e      	ldr	r2, [pc, #56]	; (b4c58 <_Z10check_timev+0xb4>)
   b4c1e:	6811      	ldr	r1, [r2, #0]
   b4c20:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b4c22:	bf1f      	itttt	ne
   b4c24:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4c26:	4b0d      	ldrne	r3, [pc, #52]	; (b4c5c <_Z10check_timev+0xb8>)
   b4c28:	2201      	movne	r2, #1
   b4c2a:	701a      	strbne	r2, [r3, #0]
    }
   b4c2c:	b002      	add	sp, #8
   b4c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b4c32:	2b00      	cmp	r3, #0
   b4c34:	d1f1      	bne.n	b4c1a <_Z10check_timev+0x76>
   b4c36:	4a0a      	ldr	r2, [pc, #40]	; (b4c60 <_Z10check_timev+0xbc>)
   b4c38:	6811      	ldr	r1, [r2, #0]
   b4c3a:	b2e4      	uxtb	r4, r4
   b4c3c:	42a1      	cmp	r1, r4
   b4c3e:	d0ec      	beq.n	b4c1a <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b4c40:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b4c42:	4a08      	ldr	r2, [pc, #32]	; (b4c64 <_Z10check_timev+0xc0>)
   b4c44:	e7e7      	b.n	b4c16 <_Z10check_timev+0x72>
   b4c46:	bf00      	nop
   b4c48:	2003dd5c 	.word	0x2003dd5c
   b4c4c:	2003e198 	.word	0x2003e198
   b4c50:	2003da24 	.word	0x2003da24
   b4c54:	2003dc34 	.word	0x2003dc34
   b4c58:	2003da2c 	.word	0x2003da2c
   b4c5c:	2003dc3b 	.word	0x2003dc3b
   b4c60:	2003da28 	.word	0x2003da28
   b4c64:	2003dc36 	.word	0x2003dc36

000b4c68 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c68:	b40e      	push	{r1, r2, r3}
   b4c6a:	b503      	push	{r0, r1, lr}
   b4c6c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4c6e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c70:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4c74:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4c76:	f002 ffbc 	bl	b7bf2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4c7a:	b002      	add	sp, #8
   b4c7c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c80:	b003      	add	sp, #12
   b4c82:	4770      	bx	lr
   b4c84:	0000      	movs	r0, r0
	...

000b4c88 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b4c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b4c8c:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b4c8e:	4608      	mov	r0, r1
{
   b4c90:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b4c92:	f7ff fe97 	bl	b49c4 <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b4c96:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b4c98:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b4c9a:	a801      	add	r0, sp, #4
   b4c9c:	f004 f9f7 	bl	b908e <strcpy>
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    Serial.println("in the callback");
   b4ca0:	f003 fce2 	bl	b8668 <_Z16_fetch_usbserialv>
   b4ca4:	493c      	ldr	r1, [pc, #240]	; (b4d98 <_Z9myHandlerPKcS0_+0x110>)
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b4ca6:	4d3d      	ldr	r5, [pc, #244]	; (b4d9c <_Z9myHandlerPKcS0_+0x114>)
    Serial.println("in the callback");
   b4ca8:	f002 ff7b 	bl	b7ba2 <_ZN5Print7printlnEPKc>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b4cac:	493c      	ldr	r1, [pc, #240]	; (b4da0 <_Z9myHandlerPKcS0_+0x118>)
   b4cae:	a801      	add	r0, sp, #4
   b4cb0:	f005 f864 	bl	b9d7c <strtok>
   b4cb4:	f004 f969 	bl	b8f8a <atoi>
   b4cb8:	4621      	mov	r1, r4
   b4cba:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b4cbe:	f004 f9d7 	bl	b9070 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b4cc2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4cc6:	d214      	bcs.n	b4cf2 <_Z9myHandlerPKcS0_+0x6a>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b4cc8:	f003 fcce 	bl	b8668 <_Z16_fetch_usbserialv>
   b4ccc:	4935      	ldr	r1, [pc, #212]	; (b4da4 <_Z9myHandlerPKcS0_+0x11c>)
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4cce:	4f36      	ldr	r7, [pc, #216]	; (b4da8 <_Z9myHandlerPKcS0_+0x120>)
        Serial.printf("%s\n", temp);
   b4cd0:	462a      	mov	r2, r5
   b4cd2:	f7ff ffc9 	bl	b4c68 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b4cd6:	4935      	ldr	r1, [pc, #212]	; (b4dac <_Z9myHandlerPKcS0_+0x124>)
   b4cd8:	4628      	mov	r0, r5
   b4cda:	f005 f84f 	bl	b9d7c <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4cde:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
   b4ce2:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b4ce6:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4ce8:	2600      	movs	r6, #0
            if (token == NULL)
   b4cea:	b928      	cbnz	r0, b4cf8 <_Z9myHandlerPKcS0_+0x70>
            }
            token = strtok(NULL, ",!");

        }
        CALCULATE = true;
   b4cec:	4b30      	ldr	r3, [pc, #192]	; (b4db0 <_Z9myHandlerPKcS0_+0x128>)
   b4cee:	2201      	movs	r2, #1
   b4cf0:	701a      	strb	r2, [r3, #0]
    }
   b4cf2:	b004      	add	sp, #16
   b4cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i >= 0 && i < 7)
   b4cf8:	2c06      	cmp	r4, #6
   b4cfa:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b4db4 <_Z9myHandlerPKcS0_+0x12c>
   b4cfe:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b4d02:	dc19      	bgt.n	b4d38 <_Z9myHandlerPKcS0_+0xb0>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b4d04:	f004 f93e 	bl	b8f84 <atof>
   b4d08:	f8da 3000 	ldr.w	r3, [sl]
   b4d0c:	4632      	mov	r2, r6
   b4d0e:	ec51 0b10 	vmov	r0, r1, d0
   b4d12:	441d      	add	r5, r3
   b4d14:	463b      	mov	r3, r7
   b4d16:	f7ff fc69 	bl	b45ec <__aeabi_ddiv>
   b4d1a:	a31b      	add	r3, pc, #108	; (adr r3, b4d88 <_Z9myHandlerPKcS0_+0x100>)
   b4d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d20:	f7ff f984 	bl	b402c <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b4d24:	3401      	adds	r4, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d26:	e9c5 0100 	strd	r0, r1, [r5]
            token = strtok(NULL, ",!");
   b4d2a:	4920      	ldr	r1, [pc, #128]	; (b4dac <_Z9myHandlerPKcS0_+0x124>)
   b4d2c:	2000      	movs	r0, #0
   b4d2e:	f005 f825 	bl	b9d7c <strtok>
        for (int i = 0; i < MAX_RANGE; i++)
   b4d32:	2c18      	cmp	r4, #24
   b4d34:	d1d9      	bne.n	b4cea <_Z9myHandlerPKcS0_+0x62>
   b4d36:	e7d9      	b.n	b4cec <_Z9myHandlerPKcS0_+0x64>
            else if (i > 16 && i < 22)
   b4d38:	f1a4 0311 	sub.w	r3, r4, #17
   b4d3c:	2b04      	cmp	r3, #4
   b4d3e:	d80d      	bhi.n	b4d5c <_Z9myHandlerPKcS0_+0xd4>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4d40:	f004 f920 	bl	b8f84 <atof>
   b4d44:	f8da 3000 	ldr.w	r3, [sl]
   b4d48:	4632      	mov	r2, r6
   b4d4a:	ec51 0b10 	vmov	r0, r1, d0
   b4d4e:	441d      	add	r5, r3
   b4d50:	463b      	mov	r3, r7
   b4d52:	f7ff fc4b 	bl	b45ec <__aeabi_ddiv>
   b4d56:	4642      	mov	r2, r8
   b4d58:	464b      	mov	r3, r9
   b4d5a:	e7e1      	b.n	b4d20 <_Z9myHandlerPKcS0_+0x98>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4d5c:	f004 f912 	bl	b8f84 <atof>
   b4d60:	f8da 3000 	ldr.w	r3, [sl]
   b4d64:	4632      	mov	r2, r6
   b4d66:	ec51 0b10 	vmov	r0, r1, d0
   b4d6a:	441d      	add	r5, r3
   b4d6c:	463b      	mov	r3, r7
   b4d6e:	f7ff fc3d 	bl	b45ec <__aeabi_ddiv>
   b4d72:	a307      	add	r3, pc, #28	; (adr r3, b4d90 <_Z9myHandlerPKcS0_+0x108>)
   b4d74:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d78:	e7d2      	b.n	b4d20 <_Z9myHandlerPKcS0_+0x98>
   b4d7a:	bf00      	nop
   b4d7c:	f3af 8000 	nop.w
   b4d80:	2d0e5604 	.word	0x2d0e5604
   b4d84:	3ffe9db2 	.word	0x3ffe9db2
   b4d88:	ebedfa44 	.word	0xebedfa44
   b4d8c:	3fcb39c0 	.word	0x3fcb39c0
   b4d90:	42c3c9ef 	.word	0x42c3c9ef
   b4d94:	3fe469ad 	.word	0x3fe469ad
   b4d98:	000bb118 	.word	0x000bb118
   b4d9c:	2003dd94 	.word	0x2003dd94
   b4da0:	000bb128 	.word	0x000bb128
   b4da4:	000bb130 	.word	0x000bb130
   b4da8:	408f4000 	.word	0x408f4000
   b4dac:	000bb134 	.word	0x000bb134
   b4db0:	2003dc19 	.word	0x2003dc19
   b4db4:	2003dd54 	.word	0x2003dd54

000b4db8 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4db8:	b40e      	push	{r1, r2, r3}
   b4dba:	b503      	push	{r0, r1, lr}
   b4dbc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4dbe:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4dc0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4dc4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4dc6:	f002 ff14 	bl	b7bf2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4dca:	b002      	add	sp, #8
   b4dcc:	f85d eb04 	ldr.w	lr, [sp], #4
   b4dd0:	b003      	add	sp, #12
   b4dd2:	4770      	bx	lr

000b4dd4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4dd4:	b510      	push	{r4, lr}
      if (_M_manager)
   b4dd6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4dd8:	4604      	mov	r4, r0
      if (_M_manager)
   b4dda:	b113      	cbz	r3, b4de2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4ddc:	2203      	movs	r2, #3
   b4dde:	4601      	mov	r1, r0
   b4de0:	4798      	blx	r3
    }
   b4de2:	4620      	mov	r0, r4
   b4de4:	bd10      	pop	{r4, pc}
	...

000b4de8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4de8:	b538      	push	{r3, r4, r5, lr}
   b4dea:	4b0f      	ldr	r3, [pc, #60]	; (b4e28 <_ZN5TimerD1Ev+0x40>)
   b4dec:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4dee:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4df0:	4604      	mov	r4, r0
        if (handle) {
   b4df2:	b19b      	cbz	r3, b4e1c <_ZN5TimerD1Ev+0x34>
            stop();
   b4df4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4df8:	f7ff feb3 	bl	b4b62 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4dfc:	68a0      	ldr	r0, [r4, #8]
   b4dfe:	2100      	movs	r1, #0
   b4e00:	f001 f8c0 	bl	b5f84 <os_timer_set_id>
            while (running) {
   b4e04:	7923      	ldrb	r3, [r4, #4]
   b4e06:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4e0a:	b113      	cbz	r3, b4e12 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4e0c:	f001 f872 	bl	b5ef4 <os_thread_yield>
            while (running) {
   b4e10:	e7f8      	b.n	b4e04 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b4e12:	68a0      	ldr	r0, [r4, #8]
   b4e14:	4629      	mov	r1, r5
   b4e16:	f001 f885 	bl	b5f24 <os_timer_destroy>
            handle = nullptr;
   b4e1a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4e1c:	f104 000c 	add.w	r0, r4, #12
   b4e20:	f7ff ffd8 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
    }
   b4e24:	4620      	mov	r0, r4
   b4e26:	bd38      	pop	{r3, r4, r5, pc}
   b4e28:	000bb5b0 	.word	0x000bb5b0

000b4e2c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4e2c:	b510      	push	{r4, lr}
   b4e2e:	4604      	mov	r4, r0
    }
   b4e30:	f7ff ffda 	bl	b4de8 <_ZN5TimerD1Ev>
   b4e34:	4620      	mov	r0, r4
   b4e36:	211c      	movs	r1, #28
   b4e38:	f7ff fe23 	bl	b4a82 <_ZdlPvj>
   b4e3c:	4620      	mov	r0, r4
   b4e3e:	bd10      	pop	{r4, pc}

000b4e40 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b4e40:	b570      	push	{r4, r5, r6, lr}
   b4e42:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b4e44:	f001 ffdc 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e48:	2102      	movs	r1, #2
   b4e4a:	f002 f82a 	bl	b6ea2 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4e4e:	f001 ffd7 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e52:	f002 f81f 	bl	b6e94 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4e56:	f001 ffd3 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e5a:	4a3e      	ldr	r2, [pc, #248]	; (b4f54 <_Z9ble_setupv+0x114>)
   b4e5c:	4c3e      	ldr	r4, [pc, #248]	; (b4f58 <_Z9ble_setupv+0x118>)
   b4e5e:	4601      	mov	r1, r0
   b4e60:	a80b      	add	r0, sp, #44	; 0x2c
   b4e62:	f002 fd57 	bl	b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4e66:	a80b      	add	r0, sp, #44	; 0x2c
   b4e68:	f002 f8cf 	bl	b700a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4e6c:	f001 ffc8 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e70:	4a3a      	ldr	r2, [pc, #232]	; (b4f5c <_Z9ble_setupv+0x11c>)
   b4e72:	4601      	mov	r1, r0
   b4e74:	a80b      	add	r0, sp, #44	; 0x2c
   b4e76:	f002 fd4d 	bl	b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4e7a:	a80b      	add	r0, sp, #44	; 0x2c
   b4e7c:	f002 f8c5 	bl	b700a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4e80:	f001 ffbe 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e84:	4a36      	ldr	r2, [pc, #216]	; (b4f60 <_Z9ble_setupv+0x120>)
   b4e86:	4601      	mov	r1, r0
   b4e88:	a80b      	add	r0, sp, #44	; 0x2c
   b4e8a:	f002 fd43 	bl	b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4e8e:	a80b      	add	r0, sp, #44	; 0x2c
   b4e90:	f002 f8bb 	bl	b700a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4e94:	f001 ffb4 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e98:	4a32      	ldr	r2, [pc, #200]	; (b4f64 <_Z9ble_setupv+0x124>)
   b4e9a:	4601      	mov	r1, r0
   b4e9c:	a80b      	add	r0, sp, #44	; 0x2c
   b4e9e:	f002 fd39 	bl	b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4ea2:	a80b      	add	r0, sp, #44	; 0x2c
   b4ea4:	f002 f8b1 	bl	b700a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b4ea8:	f001 ffaa 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4eac:	4a2e      	ldr	r2, [pc, #184]	; (b4f68 <_Z9ble_setupv+0x128>)
   b4eae:	4601      	mov	r1, r0
   b4eb0:	a80b      	add	r0, sp, #44	; 0x2c
   b4eb2:	f002 fd2f 	bl	b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4eb6:	a80b      	add	r0, sp, #44	; 0x2c
   b4eb8:	f002 f8a7 	bl	b700a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b4ebc:	f001 ffa0 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ec0:	4a2a      	ldr	r2, [pc, #168]	; (b4f6c <_Z9ble_setupv+0x12c>)
   b4ec2:	4601      	mov	r1, r0
   b4ec4:	a80b      	add	r0, sp, #44	; 0x2c
   b4ec6:	f002 fd25 	bl	b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4eca:	a80b      	add	r0, sp, #44	; 0x2c
   b4ecc:	f002 f89d 	bl	b700a <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b4ed0:	a803      	add	r0, sp, #12
   b4ed2:	f002 f9d0 	bl	b7276 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b4ed6:	4b26      	ldr	r3, [pc, #152]	; (b4f70 <_Z9ble_setupv+0x130>)
   b4ed8:	a803      	add	r0, sp, #12
   b4eda:	6819      	ldr	r1, [r3, #0]
   b4edc:	f002 f9de 	bl	b729c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4ee2:	ad06      	add	r5, sp, #24
   b4ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4ee6:	ad06      	add	r5, sp, #24
   b4ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4eea:	6826      	ldr	r6, [r4, #0]
   b4eec:	ac0b      	add	r4, sp, #44	; 0x2c
   b4eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4ef0:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4ef2:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4ef4:	f001 fd82 	bl	b69fc <_ZNK8particle7BleUuid4typeEv>
   b4ef8:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4efa:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4efc:	bb0c      	cbnz	r4, b4f42 <_Z9ble_setupv+0x102>
            uint16_t uuid16 = tempUUID.shorted();
   b4efe:	f001 fd99 	bl	b6a34 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4f02:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4f04:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4f08:	2302      	movs	r3, #2
   b4f0a:	f10d 020a 	add.w	r2, sp, #10
   b4f0e:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4f10:	a803      	add	r0, sp, #12
   b4f12:	f002 f9a5 	bl	b7260 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4f16:	f001 ff73 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f1a:	2200      	movs	r2, #0
   b4f1c:	a903      	add	r1, sp, #12
   b4f1e:	f002 f807 	bl	b6f30 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4f22:	f003 fba1 	bl	b8668 <_Z16_fetch_usbserialv>
   b4f26:	4913      	ldr	r1, [pc, #76]	; (b4f74 <_Z9ble_setupv+0x134>)
   b4f28:	f002 fe3b 	bl	b7ba2 <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4f2c:	f001 ff68 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f30:	4911      	ldr	r1, [pc, #68]	; (b4f78 <_Z9ble_setupv+0x138>)
   b4f32:	2200      	movs	r2, #0
   b4f34:	f002 fbf0 	bl	b7718 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4f38:	9803      	ldr	r0, [sp, #12]
   b4f3a:	f001 f9e7 	bl	b630c <free>

}
   b4f3e:	b010      	add	sp, #64	; 0x40
   b4f40:	bd70      	pop	{r4, r5, r6, pc}
   b4f42:	f001 fd79 	bl	b6a38 <_ZNK8particle7BleUuid8rawBytesEv>
   b4f46:	2300      	movs	r3, #0
   b4f48:	9300      	str	r3, [sp, #0]
   b4f4a:	4602      	mov	r2, r0
   b4f4c:	2310      	movs	r3, #16
   b4f4e:	2107      	movs	r1, #7
   b4f50:	e7de      	b.n	b4f10 <_Z9ble_setupv+0xd0>
   b4f52:	bf00      	nop
   b4f54:	2003dc3c 	.word	0x2003dc3c
   b4f58:	2003dc68 	.word	0x2003dc68
   b4f5c:	2003dc2c 	.word	0x2003dc2c
   b4f60:	2003dc1c 	.word	0x2003dc1c
   b4f64:	2003dc24 	.word	0x2003dc24
   b4f68:	2003dc44 	.word	0x2003dc44
   b4f6c:	2003dc4c 	.word	0x2003dc4c
   b4f70:	2003da20 	.word	0x2003da20
   b4f74:	000bb137 	.word	0x000bb137
   b4f78:	000b4a99 	.word	0x000b4a99
   b4f7c:	00000000 	.word	0x00000000

000b4f80 <_Z8calc_lowPA2_iPdi>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int size)
{
   b4f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f84:	ed2d 8b02 	vpush	{d8}
    int cnt = 0;
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0.0;
   b4f88:	ed9f 7b51 	vldr	d7, [pc, #324]	; b50d0 <_Z8calc_lowPA2_iPdi+0x150>
{
   b4f8c:	b09b      	sub	sp, #108	; 0x6c
    double last_small = 1000.0; // Assign any absurdly high value
   b4f8e:	f8df 9164 	ldr.w	r9, [pc, #356]	; b50f4 <_Z8calc_lowPA2_iPdi+0x174>
{
   b4f92:	9201      	str	r2, [sp, #4]
   b4f94:	4606      	mov	r6, r0
   b4f96:	460f      	mov	r7, r1
   b4f98:	468b      	mov	fp, r1

    for (int i = 0; i < size; i++)
   b4f9a:	f04f 0a00 	mov.w	sl, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b4f9e:	f04f 0800 	mov.w	r8, #0
    double last_big = 0.0;
   b4fa2:	eeb0 8a47 	vmov.f32	s16, s14
   b4fa6:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < size; i++)
   b4faa:	9b01      	ldr	r3, [sp, #4]
   b4fac:	459a      	cmp	sl, r3
   b4fae:	da16      	bge.n	b4fde <_Z8calc_lowPA2_iPdi+0x5e>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4fb0:	e8fb 4502 	ldrd	r4, r5, [fp], #8
   b4fb4:	ec53 2b18 	vmov	r2, r3, d8
   b4fb8:	4620      	mov	r0, r4
   b4fba:	4629      	mov	r1, r5
   b4fbc:	f7ff fc7c 	bl	b48b8 <__aeabi_dcmpgt>
   b4fc0:	b108      	cbz	r0, b4fc6 <_Z8calc_lowPA2_iPdi+0x46>
        {
            last_big = cost[i];
   b4fc2:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b4fc6:	4642      	mov	r2, r8
   b4fc8:	464b      	mov	r3, r9
   b4fca:	4620      	mov	r0, r4
   b4fcc:	4629      	mov	r1, r5
   b4fce:	f7ff fc55 	bl	b487c <__aeabi_dcmplt>
   b4fd2:	b108      	cbz	r0, b4fd8 <_Z8calc_lowPA2_iPdi+0x58>
        {
            last_small = cost[i];
   b4fd4:	46a0      	mov	r8, r4
   b4fd6:	46a9      	mov	r9, r5
    for (int i = 0; i < size; i++)
   b4fd8:	f10a 0a01 	add.w	sl, sl, #1
   b4fdc:	e7e5      	b.n	b4faa <_Z8calc_lowPA2_iPdi+0x2a>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b4fde:	4642      	mov	r2, r8
   b4fe0:	464b      	mov	r3, r9
   b4fe2:	ec51 0b18 	vmov	r0, r1, d8
   b4fe6:	f7ff f81f 	bl	b4028 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4fea:	a340      	add	r3, pc, #256	; (adr r3, b50ec <_Z8calc_lowPA2_iPdi+0x16c>)
   b4fec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ff0:	f7ff f9d2 	bl	b4398 <__aeabi_dmul>
   b4ff4:	4642      	mov	r2, r8
   b4ff6:	464b      	mov	r3, r9
   b4ff8:	f7ff f818 	bl	b402c <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i < size; i++)
   b4ffc:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4ffe:	4682      	mov	sl, r0
   b5000:	468b      	mov	fp, r1
    int idx = 0;
   b5002:	462c      	mov	r4, r5
    for (int i = 0; i < size; i++)
   b5004:	9b01      	ldr	r3, [sp, #4]
   b5006:	429d      	cmp	r5, r3
   b5008:	da15      	bge.n	b5036 <_Z8calc_lowPA2_iPdi+0xb6>
    {
        
        if (cost[i] < small_offset)
   b500a:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b500e:	4652      	mov	r2, sl
   b5010:	465b      	mov	r3, fp
   b5012:	f7ff fc33 	bl	b487c <__aeabi_dcmplt>
   b5016:	b160      	cbz	r0, b5032 <_Z8calc_lowPA2_iPdi+0xb2>
        {
            low_range_hour[idx] = i;
   b5018:	ab1a      	add	r3, sp, #104	; 0x68
   b501a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b501e:	f843 5c60 	str.w	r5, [r3, #-96]
            Serial.printf("low_range_hour[%d]: %d\n",idx, low_range_hour[idx]);
   b5022:	f003 fb21 	bl	b8668 <_Z16_fetch_usbserialv>
   b5026:	4622      	mov	r2, r4
   b5028:	492b      	ldr	r1, [pc, #172]	; (b50d8 <_Z8calc_lowPA2_iPdi+0x158>)
   b502a:	462b      	mov	r3, r5
   b502c:	f7ff fe1c 	bl	b4c68 <_ZN5Print6printfEPKcz>
            idx++;
   b5030:	3401      	adds	r4, #1
    for (int i = 0; i < size; i++)
   b5032:	3501      	adds	r5, #1
   b5034:	e7e6      	b.n	b5004 <_Z8calc_lowPA2_iPdi+0x84>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b5036:	f003 fb17 	bl	b8668 <_Z16_fetch_usbserialv>
   b503a:	ec53 2b18 	vmov	r2, r3, d8
   b503e:	4927      	ldr	r1, [pc, #156]	; (b50dc <_Z8calc_lowPA2_iPdi+0x15c>)
   b5040:	f7ff fe12 	bl	b4c68 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b5044:	f003 fb10 	bl	b8668 <_Z16_fetch_usbserialv>
   b5048:	4925      	ldr	r1, [pc, #148]	; (b50e0 <_Z8calc_lowPA2_iPdi+0x160>)
   b504a:	4642      	mov	r2, r8
   b504c:	464b      	mov	r3, r9
   b504e:	f7ff fe0b 	bl	b4c68 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b5052:	f003 fb09 	bl	b8668 <_Z16_fetch_usbserialv>
   b5056:	4923      	ldr	r1, [pc, #140]	; (b50e4 <_Z8calc_lowPA2_iPdi+0x164>)
   b5058:	f7ff fe06 	bl	b4c68 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b505c:	b36c      	cbz	r4, b50ba <_Z8calc_lowPA2_iPdi+0x13a>
    int i = 0;
   b505e:	2300      	movs	r3, #0
    int cnt = 0;
   b5060:	461d      	mov	r5, r3
   b5062:	1d37      	adds	r7, r6, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b5064:	aa1a      	add	r2, sp, #104	; 0x68
   b5066:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b506a:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b506e:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
   b5072:	aa02      	add	r2, sp, #8
   b5074:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b5078:	6802      	ldr	r2, [r0, #0]
   b507a:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b507e:	3901      	subs	r1, #1
   b5080:	428a      	cmp	r2, r1
   b5082:	f103 0301 	add.w	r3, r3, #1
   b5086:	d0f7      	beq.n	b5078 <_Z8calc_lowPA2_iPdi+0xf8>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b5088:	3201      	adds	r2, #1
        while (i <= idx)
   b508a:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b508c:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
            
            cnt++;
   b5090:	f105 0201 	add.w	r2, r5, #1
        while (i <= idx)
   b5094:	dd0f      	ble.n	b50b6 <_Z8calc_lowPA2_iPdi+0x136>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b5096:	f8df 8060 	ldr.w	r8, [pc, #96]	; b50f8 <_Z8calc_lowPA2_iPdi+0x178>
    for (int z = 0; z < cnt; z++)
   b509a:	2400      	movs	r4, #0
   b509c:	42ac      	cmp	r4, r5
   b509e:	d00c      	beq.n	b50ba <_Z8calc_lowPA2_iPdi+0x13a>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b50a0:	f003 fae2 	bl	b8668 <_Z16_fetch_usbserialv>
   b50a4:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b50a8:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
   b50ac:	4641      	mov	r1, r8
   b50ae:	f7ff fddb 	bl	b4c68 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b50b2:	3401      	adds	r4, #1
   b50b4:	e7f2      	b.n	b509c <_Z8calc_lowPA2_iPdi+0x11c>
            cnt++;
   b50b6:	4615      	mov	r5, r2
   b50b8:	e7d4      	b.n	b5064 <_Z8calc_lowPA2_iPdi+0xe4>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b50ba:	4b0b      	ldr	r3, [pc, #44]	; (b50e8 <_Z8calc_lowPA2_iPdi+0x168>)
   b50bc:	2201      	movs	r2, #1

    return cnt;
}
   b50be:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b50c0:	701a      	strb	r2, [r3, #0]
}
   b50c2:	b01b      	add	sp, #108	; 0x6c
   b50c4:	ecbd 8b02 	vpop	{d8}
   b50c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b50cc:	f3af 8000 	nop.w
	...
   b50d8:	000bb15b 	.word	0x000bb15b
   b50dc:	000bb173 	.word	0x000bb173
   b50e0:	000bb191 	.word	0x000bb191
   b50e4:	000bb1ae 	.word	0x000bb1ae
   b50e8:	2003dc39 	.word	0x2003dc39
   b50ec:	33333333 	.word	0x33333333
   b50f0:	3fd33333 	.word	0x3fd33333
   b50f4:	408f4000 	.word	0x408f4000
   b50f8:	000bb1ec 	.word	0x000bb1ec

000b50fc <_Z18hourly_JSON_updatev>:
extern String pricestoday_Json;
extern String pricesyesterday_Json;
extern String pricestomorrow_Json;

void hourly_JSON_update()
{
   b50fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b50fe:	4913      	ldr	r1, [pc, #76]	; (b514c <_Z18hourly_JSON_updatev+0x50>)
   b5100:	4813      	ldr	r0, [pc, #76]	; (b5150 <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b5102:	4e14      	ldr	r6, [pc, #80]	; (b5154 <_Z18hourly_JSON_updatev+0x58>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5104:	4d12      	ldr	r5, [pc, #72]	; (b5150 <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5106:	4f14      	ldr	r7, [pc, #80]	; (b5158 <_Z18hourly_JSON_updatev+0x5c>)
{
   b5108:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b510a:	f001 fa8b 	bl	b6624 <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b510e:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b5110:	6833      	ldr	r3, [r6, #0]
   b5112:	220a      	movs	r2, #10
   b5114:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b5118:	4668      	mov	r0, sp
   b511a:	f001 fa95 	bl	b6648 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b511e:	4669      	mov	r1, sp
   b5120:	4628      	mov	r0, r5
   b5122:	f001 fabb 	bl	b669c <_ZN6String6concatERKS_>
   b5126:	4668      	mov	r0, sp
   b5128:	f001 f9f8 	bl	b651c <_ZN6StringD1Ev>
        if (i < 23)
   b512c:	2c17      	cmp	r4, #23
   b512e:	d003      	beq.n	b5138 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5130:	4639      	mov	r1, r7
   b5132:	4628      	mov	r0, r5
   b5134:	f001 fab6 	bl	b66a4 <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b5138:	3401      	adds	r4, #1
   b513a:	2c18      	cmp	r4, #24
   b513c:	d1e8      	bne.n	b5110 <_Z18hourly_JSON_updatev+0x14>
   b513e:	4907      	ldr	r1, [pc, #28]	; (b515c <_Z18hourly_JSON_updatev+0x60>)
   b5140:	4803      	ldr	r0, [pc, #12]	; (b5150 <_Z18hourly_JSON_updatev+0x54>)
        {
            wh_today_Json += ",";
        }
    }
    wh_today_Json += "]}";
}
   b5142:	b005      	add	sp, #20
   b5144:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5148:	f001 baac 	b.w	b66a4 <_ZN6String6concatEPKc>
   b514c:	000bb1fa 	.word	0x000bb1fa
   b5150:	2003e1b8 	.word	0x2003e1b8
   b5154:	2003e1b4 	.word	0x2003e1b4
   b5158:	000bb209 	.word	0x000bb209
   b515c:	000bb54e 	.word	0x000bb54e

000b5160 <_Z11update_JSONv>:
void update_JSON()
{
   b5160:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5162:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b5164:	498f      	ldr	r1, [pc, #572]	; (b53a4 <_Z11update_JSONv+0x244>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b5166:	4e90      	ldr	r6, [pc, #576]	; (b53a8 <_Z11update_JSONv+0x248>)
   b5168:	4f90      	ldr	r7, [pc, #576]	; (b53ac <_Z11update_JSONv+0x24c>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b516a:	4d91      	ldr	r5, [pc, #580]	; (b53b0 <_Z11update_JSONv+0x250>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b516c:	4668      	mov	r0, sp
   b516e:	f001 faab 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5172:	4669      	mov	r1, sp
   b5174:	488e      	ldr	r0, [pc, #568]	; (b53b0 <_Z11update_JSONv+0x250>)
   b5176:	f001 fa4d 	bl	b6614 <_ZN6StringaSEOS_>
   b517a:	4668      	mov	r0, sp
   b517c:	f001 f9ce 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5180:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b5182:	6833      	ldr	r3, [r6, #0]
   b5184:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b5188:	e9d3 2300 	ldrd	r2, r3, [r3]
   b518c:	4639      	mov	r1, r7
   b518e:	4668      	mov	r0, sp
   b5190:	f001 fa9a 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5194:	4669      	mov	r1, sp
   b5196:	4628      	mov	r0, r5
   b5198:	f001 fa80 	bl	b669c <_ZN6String6concatERKS_>
   b519c:	4668      	mov	r0, sp
   b519e:	f001 f9bd 	bl	b651c <_ZN6StringD1Ev>
        if (i < 23)
   b51a2:	2c17      	cmp	r4, #23
   b51a4:	d00a      	beq.n	b51bc <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b51a6:	4983      	ldr	r1, [pc, #524]	; (b53b4 <_Z11update_JSONv+0x254>)
   b51a8:	4668      	mov	r0, sp
   b51aa:	f001 fa8d 	bl	b66c8 <_ZN6String6formatEPKcz>
   b51ae:	4669      	mov	r1, sp
   b51b0:	4628      	mov	r0, r5
   b51b2:	f001 fa73 	bl	b669c <_ZN6String6concatERKS_>
   b51b6:	4668      	mov	r0, sp
   b51b8:	f001 f9b0 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b51bc:	3401      	adds	r4, #1
   b51be:	2c18      	cmp	r4, #24
   b51c0:	d1df      	bne.n	b5182 <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b51c2:	497d      	ldr	r1, [pc, #500]	; (b53b8 <_Z11update_JSONv+0x258>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b51c4:	4e7d      	ldr	r6, [pc, #500]	; (b53bc <_Z11update_JSONv+0x25c>)
   b51c6:	4f79      	ldr	r7, [pc, #484]	; (b53ac <_Z11update_JSONv+0x24c>)
   b51c8:	4d7d      	ldr	r5, [pc, #500]	; (b53c0 <_Z11update_JSONv+0x260>)
    pricesyesterday_Json += String::format("]}");
   b51ca:	4668      	mov	r0, sp
   b51cc:	f001 fa7c 	bl	b66c8 <_ZN6String6formatEPKcz>
   b51d0:	4669      	mov	r1, sp
   b51d2:	4877      	ldr	r0, [pc, #476]	; (b53b0 <_Z11update_JSONv+0x250>)
   b51d4:	f001 fa62 	bl	b669c <_ZN6String6concatERKS_>
   b51d8:	4668      	mov	r0, sp
   b51da:	f001 f99f 	bl	b651c <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b51de:	4979      	ldr	r1, [pc, #484]	; (b53c4 <_Z11update_JSONv+0x264>)
   b51e0:	4668      	mov	r0, sp
   b51e2:	f001 fa71 	bl	b66c8 <_ZN6String6formatEPKcz>
   b51e6:	4669      	mov	r1, sp
   b51e8:	4875      	ldr	r0, [pc, #468]	; (b53c0 <_Z11update_JSONv+0x260>)
   b51ea:	f001 fa13 	bl	b6614 <_ZN6StringaSEOS_>
   b51ee:	4668      	mov	r0, sp
   b51f0:	f001 f994 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b51f4:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b51f6:	6833      	ldr	r3, [r6, #0]
   b51f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b51fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5200:	4639      	mov	r1, r7
   b5202:	4668      	mov	r0, sp
   b5204:	f001 fa60 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5208:	4669      	mov	r1, sp
   b520a:	4628      	mov	r0, r5
   b520c:	f001 fa46 	bl	b669c <_ZN6String6concatERKS_>
   b5210:	4668      	mov	r0, sp
   b5212:	f001 f983 	bl	b651c <_ZN6StringD1Ev>
        if (i < 23)
   b5216:	2c17      	cmp	r4, #23
   b5218:	d00a      	beq.n	b5230 <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b521a:	4966      	ldr	r1, [pc, #408]	; (b53b4 <_Z11update_JSONv+0x254>)
   b521c:	4668      	mov	r0, sp
   b521e:	f001 fa53 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5222:	4669      	mov	r1, sp
   b5224:	4628      	mov	r0, r5
   b5226:	f001 fa39 	bl	b669c <_ZN6String6concatERKS_>
   b522a:	4668      	mov	r0, sp
   b522c:	f001 f976 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5230:	3401      	adds	r4, #1
   b5232:	2c18      	cmp	r4, #24
   b5234:	d1df      	bne.n	b51f6 <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b5236:	4960      	ldr	r1, [pc, #384]	; (b53b8 <_Z11update_JSONv+0x258>)

     // Updating prices today JSON string
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b5238:	4e63      	ldr	r6, [pc, #396]	; (b53c8 <_Z11update_JSONv+0x268>)
   b523a:	4f5c      	ldr	r7, [pc, #368]	; (b53ac <_Z11update_JSONv+0x24c>)
   b523c:	4d63      	ldr	r5, [pc, #396]	; (b53cc <_Z11update_JSONv+0x26c>)
    pricestoday_Json += String::format("]}");
   b523e:	4668      	mov	r0, sp
   b5240:	f001 fa42 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5244:	4669      	mov	r1, sp
   b5246:	485e      	ldr	r0, [pc, #376]	; (b53c0 <_Z11update_JSONv+0x260>)
   b5248:	f001 fa28 	bl	b669c <_ZN6String6concatERKS_>
   b524c:	4668      	mov	r0, sp
   b524e:	f001 f965 	bl	b651c <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b5252:	495f      	ldr	r1, [pc, #380]	; (b53d0 <_Z11update_JSONv+0x270>)
   b5254:	4668      	mov	r0, sp
   b5256:	f001 fa37 	bl	b66c8 <_ZN6String6formatEPKcz>
   b525a:	4669      	mov	r1, sp
   b525c:	485b      	ldr	r0, [pc, #364]	; (b53cc <_Z11update_JSONv+0x26c>)
   b525e:	f001 f9d9 	bl	b6614 <_ZN6StringaSEOS_>
   b5262:	4668      	mov	r0, sp
   b5264:	f001 f95a 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5268:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b526a:	6833      	ldr	r3, [r6, #0]
   b526c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b5270:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5274:	4639      	mov	r1, r7
   b5276:	4668      	mov	r0, sp
   b5278:	f001 fa26 	bl	b66c8 <_ZN6String6formatEPKcz>
   b527c:	4669      	mov	r1, sp
   b527e:	4628      	mov	r0, r5
   b5280:	f001 fa0c 	bl	b669c <_ZN6String6concatERKS_>
   b5284:	4668      	mov	r0, sp
   b5286:	f001 f949 	bl	b651c <_ZN6StringD1Ev>
        if (i < 23)
   b528a:	2c17      	cmp	r4, #23
   b528c:	d00a      	beq.n	b52a4 <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b528e:	4949      	ldr	r1, [pc, #292]	; (b53b4 <_Z11update_JSONv+0x254>)
   b5290:	4668      	mov	r0, sp
   b5292:	f001 fa19 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5296:	4669      	mov	r1, sp
   b5298:	4628      	mov	r0, r5
   b529a:	f001 f9ff 	bl	b669c <_ZN6String6concatERKS_>
   b529e:	4668      	mov	r0, sp
   b52a0:	f001 f93c 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b52a4:	3401      	adds	r4, #1
   b52a6:	2c18      	cmp	r4, #24
   b52a8:	d1df      	bne.n	b526a <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b52aa:	4943      	ldr	r1, [pc, #268]	; (b53b8 <_Z11update_JSONv+0x258>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b52ac:	4e49      	ldr	r6, [pc, #292]	; (b53d4 <_Z11update_JSONv+0x274>)
   b52ae:	4f4a      	ldr	r7, [pc, #296]	; (b53d8 <_Z11update_JSONv+0x278>)
   b52b0:	4d4a      	ldr	r5, [pc, #296]	; (b53dc <_Z11update_JSONv+0x27c>)
    pricestomorrow_Json += String::format("]}");
   b52b2:	4668      	mov	r0, sp
   b52b4:	f001 fa08 	bl	b66c8 <_ZN6String6formatEPKcz>
   b52b8:	4669      	mov	r1, sp
   b52ba:	4844      	ldr	r0, [pc, #272]	; (b53cc <_Z11update_JSONv+0x26c>)
   b52bc:	f001 f9ee 	bl	b669c <_ZN6String6concatERKS_>
   b52c0:	4668      	mov	r0, sp
   b52c2:	f001 f92b 	bl	b651c <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b52c6:	4946      	ldr	r1, [pc, #280]	; (b53e0 <_Z11update_JSONv+0x280>)
   b52c8:	4668      	mov	r0, sp
   b52ca:	f001 f9fd 	bl	b66c8 <_ZN6String6formatEPKcz>
   b52ce:	4669      	mov	r1, sp
   b52d0:	4842      	ldr	r0, [pc, #264]	; (b53dc <_Z11update_JSONv+0x27c>)
   b52d2:	f001 f99f 	bl	b6614 <_ZN6StringaSEOS_>
   b52d6:	4668      	mov	r0, sp
   b52d8:	f001 f920 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b52dc:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b52de:	6833      	ldr	r3, [r6, #0]
   b52e0:	4639      	mov	r1, r7
   b52e2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b52e6:	4668      	mov	r0, sp
   b52e8:	f001 f9ee 	bl	b66c8 <_ZN6String6formatEPKcz>
   b52ec:	4669      	mov	r1, sp
   b52ee:	4628      	mov	r0, r5
   b52f0:	f001 f9d4 	bl	b669c <_ZN6String6concatERKS_>
   b52f4:	4668      	mov	r0, sp
   b52f6:	f001 f911 	bl	b651c <_ZN6StringD1Ev>
        if (i < 23)
   b52fa:	2c17      	cmp	r4, #23
   b52fc:	d00a      	beq.n	b5314 <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b52fe:	492d      	ldr	r1, [pc, #180]	; (b53b4 <_Z11update_JSONv+0x254>)
   b5300:	4668      	mov	r0, sp
   b5302:	f001 f9e1 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5306:	4669      	mov	r1, sp
   b5308:	4628      	mov	r0, r5
   b530a:	f001 f9c7 	bl	b669c <_ZN6String6concatERKS_>
   b530e:	4668      	mov	r0, sp
   b5310:	f001 f904 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5314:	3401      	adds	r4, #1
   b5316:	2c18      	cmp	r4, #24
   b5318:	d1e1      	bne.n	b52de <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b531a:	4927      	ldr	r1, [pc, #156]	; (b53b8 <_Z11update_JSONv+0x258>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b531c:	4e31      	ldr	r6, [pc, #196]	; (b53e4 <_Z11update_JSONv+0x284>)
   b531e:	4f2e      	ldr	r7, [pc, #184]	; (b53d8 <_Z11update_JSONv+0x278>)
   b5320:	4d31      	ldr	r5, [pc, #196]	; (b53e8 <_Z11update_JSONv+0x288>)
    wh_yesterday_Json += String::format("]}");
   b5322:	4668      	mov	r0, sp
   b5324:	f001 f9d0 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5328:	4669      	mov	r1, sp
   b532a:	482c      	ldr	r0, [pc, #176]	; (b53dc <_Z11update_JSONv+0x27c>)
   b532c:	f001 f9b6 	bl	b669c <_ZN6String6concatERKS_>
   b5330:	4668      	mov	r0, sp
   b5332:	f001 f8f3 	bl	b651c <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b5336:	492d      	ldr	r1, [pc, #180]	; (b53ec <_Z11update_JSONv+0x28c>)
   b5338:	4668      	mov	r0, sp
   b533a:	f001 f9c5 	bl	b66c8 <_ZN6String6formatEPKcz>
   b533e:	4669      	mov	r1, sp
   b5340:	4829      	ldr	r0, [pc, #164]	; (b53e8 <_Z11update_JSONv+0x288>)
   b5342:	f001 f967 	bl	b6614 <_ZN6StringaSEOS_>
   b5346:	4668      	mov	r0, sp
   b5348:	f001 f8e8 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b534c:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b534e:	6833      	ldr	r3, [r6, #0]
   b5350:	4639      	mov	r1, r7
   b5352:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b5356:	4668      	mov	r0, sp
   b5358:	f001 f9b6 	bl	b66c8 <_ZN6String6formatEPKcz>
   b535c:	4669      	mov	r1, sp
   b535e:	4628      	mov	r0, r5
   b5360:	f001 f99c 	bl	b669c <_ZN6String6concatERKS_>
   b5364:	4668      	mov	r0, sp
   b5366:	f001 f8d9 	bl	b651c <_ZN6StringD1Ev>
        if (i < 23)
   b536a:	2c17      	cmp	r4, #23
   b536c:	d00a      	beq.n	b5384 <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b536e:	4911      	ldr	r1, [pc, #68]	; (b53b4 <_Z11update_JSONv+0x254>)
   b5370:	4668      	mov	r0, sp
   b5372:	f001 f9a9 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5376:	4669      	mov	r1, sp
   b5378:	4628      	mov	r0, r5
   b537a:	f001 f98f 	bl	b669c <_ZN6String6concatERKS_>
   b537e:	4668      	mov	r0, sp
   b5380:	f001 f8cc 	bl	b651c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b5384:	3401      	adds	r4, #1
   b5386:	2c18      	cmp	r4, #24
   b5388:	d1e1      	bne.n	b534e <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b538a:	4668      	mov	r0, sp
   b538c:	490a      	ldr	r1, [pc, #40]	; (b53b8 <_Z11update_JSONv+0x258>)
   b538e:	f001 f99b 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5392:	4669      	mov	r1, sp
   b5394:	4814      	ldr	r0, [pc, #80]	; (b53e8 <_Z11update_JSONv+0x288>)
   b5396:	f001 f981 	bl	b669c <_ZN6String6concatERKS_>
   b539a:	4668      	mov	r0, sp
   b539c:	f001 f8be 	bl	b651c <_ZN6StringD1Ev>

}
   b53a0:	b005      	add	sp, #20
   b53a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b53a4:	000bb20b 	.word	0x000bb20b
   b53a8:	2003dd58 	.word	0x2003dd58
   b53ac:	000bb220 	.word	0x000bb220
   b53b0:	2003dd84 	.word	0x2003dd84
   b53b4:	000bb209 	.word	0x000bb209
   b53b8:	000bb54e 	.word	0x000bb54e
   b53bc:	2003dd50 	.word	0x2003dd50
   b53c0:	2003dd64 	.word	0x2003dd64
   b53c4:	000bb226 	.word	0x000bb226
   b53c8:	2003dd54 	.word	0x2003dd54
   b53cc:	2003dd74 	.word	0x2003dd74
   b53d0:	000bb237 	.word	0x000bb237
   b53d4:	2003e1c8 	.word	0x2003e1c8
   b53d8:	000bb40c 	.word	0x000bb40c
   b53dc:	2003e1cc 	.word	0x2003e1cc
   b53e0:	000bb24b 	.word	0x000bb24b
   b53e4:	2003e1b4 	.word	0x2003e1b4
   b53e8:	2003e1b8 	.word	0x2003e1b8
   b53ec:	000bb25e 	.word	0x000bb25e

000b53f0 <_Z11init_memoryv>:
{
   b53f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b53f4:	20c0      	movs	r0, #192	; 0xc0
   b53f6:	f000 ff81 	bl	b62fc <malloc>
   b53fa:	4d38      	ldr	r5, [pc, #224]	; (b54dc <_Z11init_memoryv+0xec>)
   b53fc:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b53fe:	b928      	cbnz	r0, b540c <_Z11init_memoryv+0x1c>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b5400:	f003 f932 	bl	b8668 <_Z16_fetch_usbserialv>
   b5404:	4936      	ldr	r1, [pc, #216]	; (b54e0 <_Z11init_memoryv+0xf0>)
   b5406:	f7ff fc2f 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b540a:	e7fe      	b.n	b540a <_Z11init_memoryv+0x1a>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b540c:	20c0      	movs	r0, #192	; 0xc0
   b540e:	f000 ff75 	bl	b62fc <malloc>
   b5412:	4c34      	ldr	r4, [pc, #208]	; (b54e4 <_Z11init_memoryv+0xf4>)
   b5414:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b5416:	b928      	cbnz	r0, b5424 <_Z11init_memoryv+0x34>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b5418:	f003 f926 	bl	b8668 <_Z16_fetch_usbserialv>
   b541c:	4932      	ldr	r1, [pc, #200]	; (b54e8 <_Z11init_memoryv+0xf8>)
   b541e:	f7ff fc23 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b5422:	e7fe      	b.n	b5422 <_Z11init_memoryv+0x32>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b5424:	20c0      	movs	r0, #192	; 0xc0
   b5426:	f000 ff69 	bl	b62fc <malloc>
   b542a:	4e30      	ldr	r6, [pc, #192]	; (b54ec <_Z11init_memoryv+0xfc>)
   b542c:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b542e:	b928      	cbnz	r0, b543c <_Z11init_memoryv+0x4c>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b5430:	f003 f91a 	bl	b8668 <_Z16_fetch_usbserialv>
   b5434:	492e      	ldr	r1, [pc, #184]	; (b54f0 <_Z11init_memoryv+0x100>)
   b5436:	f7ff fc17 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b543a:	e7fe      	b.n	b543a <_Z11init_memoryv+0x4a>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b543c:	f003 f914 	bl	b8668 <_Z16_fetch_usbserialv>
   b5440:	492c      	ldr	r1, [pc, #176]	; (b54f4 <_Z11init_memoryv+0x104>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b5442:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b5508 <_Z11init_memoryv+0x118>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b5446:	f44f 7210 	mov.w	r2, #576	; 0x240
   b544a:	f7ff fc0d 	bl	b4c68 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b544e:	2060      	movs	r0, #96	; 0x60
   b5450:	f000 ff54 	bl	b62fc <malloc>
   b5454:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b5458:	b928      	cbnz	r0, b5466 <_Z11init_memoryv+0x76>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b545a:	f003 f905 	bl	b8668 <_Z16_fetch_usbserialv>
   b545e:	4926      	ldr	r1, [pc, #152]	; (b54f8 <_Z11init_memoryv+0x108>)
   b5460:	f7ff fc02 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b5464:	e7fe      	b.n	b5464 <_Z11init_memoryv+0x74>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b5466:	2060      	movs	r0, #96	; 0x60
   b5468:	f000 ff48 	bl	b62fc <malloc>
   b546c:	f8df 909c 	ldr.w	r9, [pc, #156]	; b550c <_Z11init_memoryv+0x11c>
   b5470:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b5474:	b928      	cbnz	r0, b5482 <_Z11init_memoryv+0x92>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b5476:	f003 f8f7 	bl	b8668 <_Z16_fetch_usbserialv>
   b547a:	4920      	ldr	r1, [pc, #128]	; (b54fc <_Z11init_memoryv+0x10c>)
   b547c:	f7ff fbf4 	bl	b4c68 <_ZN5Print6printfEPKcz>
        while (1)
   b5480:	e7fe      	b.n	b5480 <_Z11init_memoryv+0x90>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b5482:	f003 f8f1 	bl	b8668 <_Z16_fetch_usbserialv>
   b5486:	491e      	ldr	r1, [pc, #120]	; (b5500 <_Z11init_memoryv+0x110>)
   b5488:	22c0      	movs	r2, #192	; 0xc0
   b548a:	f7ff fbed 	bl	b4c68 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b548e:	f003 f8eb 	bl	b8668 <_Z16_fetch_usbserialv>
   b5492:	4607      	mov	r7, r0
   b5494:	f000 ffd2 	bl	b643c <_ZN11SystemClass10freeMemoryEv>
   b5498:	491a      	ldr	r1, [pc, #104]	; (b5504 <_Z11init_memoryv+0x114>)
   b549a:	4602      	mov	r2, r0
   b549c:	4638      	mov	r0, r7
   b549e:	f7ff fbe3 	bl	b4c68 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b54a2:	6828      	ldr	r0, [r5, #0]
   b54a4:	22c0      	movs	r2, #192	; 0xc0
   b54a6:	2100      	movs	r1, #0
   b54a8:	f003 fdab 	bl	b9002 <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b54ac:	6820      	ldr	r0, [r4, #0]
   b54ae:	22c0      	movs	r2, #192	; 0xc0
   b54b0:	2100      	movs	r1, #0
   b54b2:	f003 fda6 	bl	b9002 <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b54b6:	6830      	ldr	r0, [r6, #0]
   b54b8:	22c0      	movs	r2, #192	; 0xc0
   b54ba:	2100      	movs	r1, #0
   b54bc:	f003 fda1 	bl	b9002 <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b54c0:	f8d8 0000 	ldr.w	r0, [r8]
   b54c4:	2260      	movs	r2, #96	; 0x60
   b54c6:	2100      	movs	r1, #0
   b54c8:	f003 fd9b 	bl	b9002 <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b54cc:	f8d9 0000 	ldr.w	r0, [r9]
   b54d0:	2260      	movs	r2, #96	; 0x60
}
   b54d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b54d6:	2100      	movs	r1, #0
   b54d8:	f003 bd93 	b.w	b9002 <memset>
   b54dc:	2003dd58 	.word	0x2003dd58
   b54e0:	000bb26d 	.word	0x000bb26d
   b54e4:	2003dd50 	.word	0x2003dd50
   b54e8:	000bb29b 	.word	0x000bb29b
   b54ec:	2003dd54 	.word	0x2003dd54
   b54f0:	000bb2c5 	.word	0x000bb2c5
   b54f4:	000bb2f2 	.word	0x000bb2f2
   b54f8:	000bb324 	.word	0x000bb324
   b54fc:	000bb34c 	.word	0x000bb34c
   b5500:	000bb378 	.word	0x000bb378
   b5504:	000bb3a3 	.word	0x000bb3a3
   b5508:	2003e1b4 	.word	0x2003e1b4
   b550c:	2003e1c8 	.word	0x2003e1c8

000b5510 <_Z13rotate_pricesv>:
{
   b5510:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b5512:	4a0c      	ldr	r2, [pc, #48]	; (b5544 <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b5514:	4b0c      	ldr	r3, [pc, #48]	; (b5548 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b5516:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b5518:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b551a:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b551c:	4b0b      	ldr	r3, [pc, #44]	; (b554c <_Z13rotate_pricesv+0x3c>)
   b551e:	6819      	ldr	r1, [r3, #0]
   b5520:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b5522:	22c0      	movs	r2, #192	; 0xc0
   b5524:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b5526:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b5528:	f003 fd6b 	bl	b9002 <memset>
    int *temp2 = wh_yesterday;
   b552c:	4a08      	ldr	r2, [pc, #32]	; (b5550 <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b552e:	4b09      	ldr	r3, [pc, #36]	; (b5554 <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b5530:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b5532:	6819      	ldr	r1, [r3, #0]
   b5534:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b5536:	6018      	str	r0, [r3, #0]
}
   b5538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b553c:	2260      	movs	r2, #96	; 0x60
   b553e:	2100      	movs	r1, #0
   b5540:	f003 bd5f 	b.w	b9002 <memset>
   b5544:	2003dd50 	.word	0x2003dd50
   b5548:	2003dd58 	.word	0x2003dd58
   b554c:	2003dd54 	.word	0x2003dd54
   b5550:	2003e1c8 	.word	0x2003e1c8
   b5554:	2003e1b4 	.word	0x2003e1b4

000b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5558:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b555a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b555c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b555e:	b17c      	cbz	r4, b5580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5560:	6863      	ldr	r3, [r4, #4]
   b5562:	3b01      	subs	r3, #1
   b5564:	6063      	str	r3, [r4, #4]
   b5566:	b95b      	cbnz	r3, b5580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5568:	6823      	ldr	r3, [r4, #0]
   b556a:	4620      	mov	r0, r4
   b556c:	689b      	ldr	r3, [r3, #8]
   b556e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5570:	68a3      	ldr	r3, [r4, #8]
   b5572:	3b01      	subs	r3, #1
   b5574:	60a3      	str	r3, [r4, #8]
   b5576:	b91b      	cbnz	r3, b5580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5578:	6823      	ldr	r3, [r4, #0]
   b557a:	4620      	mov	r0, r4
   b557c:	68db      	ldr	r3, [r3, #12]
   b557e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5580:	4628      	mov	r0, r5
   b5582:	bd38      	pop	{r3, r4, r5, pc}

000b5584 <_Z8get_datai>:
{
   b5584:	b510      	push	{r4, lr}
    temp[0] = 0;
   b5586:	4b11      	ldr	r3, [pc, #68]	; (b55cc <_Z8get_datai+0x48>)
   b5588:	2200      	movs	r2, #0
{
   b558a:	b08a      	sub	sp, #40	; 0x28
    temp[0] = 0;
   b558c:	701a      	strb	r2, [r3, #0]
{
   b558e:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\"}", Time.year(), Time.month(), day);
   b5590:	f002 fc3c 	bl	b7e0c <_ZN9TimeClass4yearEv>
   b5594:	9003      	str	r0, [sp, #12]
   b5596:	f002 fc31 	bl	b7dfc <_ZN9TimeClass5monthEv>
   b559a:	9a03      	ldr	r2, [sp, #12]
   b559c:	490c      	ldr	r1, [pc, #48]	; (b55d0 <_Z8get_datai+0x4c>)
   b559e:	9400      	str	r4, [sp, #0]
   b55a0:	4603      	mov	r3, r0
   b55a2:	a806      	add	r0, sp, #24
   b55a4:	f001 f890 	bl	b66c8 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b55a8:	4b0a      	ldr	r3, [pc, #40]	; (b55d4 <_Z8get_datai+0x50>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b55aa:	9a06      	ldr	r2, [sp, #24]
   b55ac:	781b      	ldrb	r3, [r3, #0]
   b55ae:	490a      	ldr	r1, [pc, #40]	; (b55d8 <_Z8get_datai+0x54>)
   b55b0:	f88d 3000 	strb.w	r3, [sp]
   b55b4:	a804      	add	r0, sp, #16
   b55b6:	233c      	movs	r3, #60	; 0x3c
   b55b8:	f002 fe10 	bl	b81dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b55bc:	a805      	add	r0, sp, #20
   b55be:	f7ff ffcb 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55c2:	a806      	add	r0, sp, #24
   b55c4:	f000 ffaa 	bl	b651c <_ZN6StringD1Ev>
}
   b55c8:	b00a      	add	sp, #40	; 0x28
   b55ca:	bd10      	pop	{r4, pc}
   b55cc:	2003dd94 	.word	0x2003dd94
   b55d0:	000bb3ae 	.word	0x000bb3ae
   b55d4:	2003dce0 	.word	0x2003dce0
   b55d8:	000bb3dd 	.word	0x000bb3dd

000b55dc <setup>:
{
   b55dc:	b570      	push	{r4, r5, r6, lr}
    STARTUP = true;
   b55de:	4b50      	ldr	r3, [pc, #320]	; (b5720 <setup+0x144>)
   b55e0:	2201      	movs	r2, #1
{
   b55e2:	b08e      	sub	sp, #56	; 0x38
    STARTUP = true;
   b55e4:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b55e6:	f000 fe61 	bl	b62ac <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b55ea:	b910      	cbnz	r0, b55f2 <setup+0x16>
            spark_process();
   b55ec:	f000 fe56 	bl	b629c <spark_process>
        while (_while() && !_condition()) {
   b55f0:	e7f9      	b.n	b55e6 <setup+0xa>
   b55f2:	f000 fe5b 	bl	b62ac <spark_cloud_flag_connected>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b55f6:	2400      	movs	r4, #0
    ble_setup();
   b55f8:	f7ff fc22 	bl	b4e40 <_Z9ble_setupv>
    init_memory();
   b55fc:	f7ff fef8 	bl	b53f0 <_Z11init_memoryv>
    Time.zone(1);
   b5600:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b5604:	f002 fb7c 	bl	b7d00 <_ZN9TimeClass4zoneEf>
   b5608:	4946      	ldr	r1, [pc, #280]	; (b5724 <setup+0x148>)
   b560a:	4847      	ldr	r0, [pc, #284]	; (b5728 <setup+0x14c>)
        Serial.printf("Count1=: %d\n", count);
   b560c:	4e47      	ldr	r6, [pc, #284]	; (b572c <setup+0x150>)
   b560e:	4623      	mov	r3, r4
   b5610:	4622      	mov	r2, r4
   b5612:	e9cd 4400 	strd	r4, r4, [sp]
   b5616:	f000 fe59 	bl	b62cc <spark_subscribe>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b561a:	f003 f825 	bl	b8668 <_Z16_fetch_usbserialv>
   b561e:	4605      	mov	r5, r0
   b5620:	f002 fbbc 	bl	b7d9c <_ZN9TimeClass4hourEv>
   b5624:	9003      	str	r0, [sp, #12]
   b5626:	f002 fbc5 	bl	b7db4 <_ZN9TimeClass6minuteEv>
   b562a:	9a03      	ldr	r2, [sp, #12]
   b562c:	4940      	ldr	r1, [pc, #256]	; (b5730 <setup+0x154>)
   b562e:	4603      	mov	r3, r0
   b5630:	4628      	mov	r0, r5
   b5632:	f7ff fb19 	bl	b4c68 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b5636:	4622      	mov	r2, r4
   b5638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b563c:	483d      	ldr	r0, [pc, #244]	; (b5734 <setup+0x158>)
   b563e:	f7ff fa9d 	bl	b4b7c <_ZN5Timer6_startEjb.isra.0>
    Serial.printlnf("RSSI=%d", (int8_t)WiFi.RSSI());
   b5642:	f003 f811 	bl	b8668 <_Z16_fetch_usbserialv>
   b5646:	493c      	ldr	r1, [pc, #240]	; (b5738 <setup+0x15c>)
   b5648:	4605      	mov	r5, r0
   b564a:	a805      	add	r0, sp, #20
   b564c:	f003 f9c4 	bl	b89d8 <_ZN5spark9WiFiClass4RSSIEv>
   b5650:	a805      	add	r0, sp, #20
   b5652:	f003 f99d 	bl	b8990 <_ZNK10WiFiSignalcvaEv>
   b5656:	4939      	ldr	r1, [pc, #228]	; (b573c <setup+0x160>)
   b5658:	4602      	mov	r2, r0
   b565a:	4628      	mov	r0, r5
   b565c:	f7ff fbac 	bl	b4db8 <_ZN5Print8printlnfEPKcz>
    Serial.printf("Getting price data for yesterday\n");
   b5660:	f003 f802 	bl	b8668 <_Z16_fetch_usbserialv>
   b5664:	4936      	ldr	r1, [pc, #216]	; (b5740 <setup+0x164>)
    while (!CALCULATE)
   b5666:	4d37      	ldr	r5, [pc, #220]	; (b5744 <setup+0x168>)
    Serial.printf("Getting price data for yesterday\n");
   b5668:	f7ff fafe 	bl	b4c68 <_ZN5Print6printfEPKcz>
    get_data(Time.day() - 1);
   b566c:	f002 fbba 	bl	b7de4 <_ZN9TimeClass3dayEv>
   b5670:	3801      	subs	r0, #1
   b5672:	f7ff ff87 	bl	b5584 <_Z8get_datai>
    while (!CALCULATE)
   b5676:	782b      	ldrb	r3, [r5, #0]
   b5678:	b95b      	cbnz	r3, b5692 <setup+0xb6>
        delay(2000);
   b567a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b567e:	f002 fbdb 	bl	b7e38 <delay>
        Serial.printf("Count1=: %d\n", count);
   b5682:	f002 fff1 	bl	b8668 <_Z16_fetch_usbserialv>
   b5686:	4622      	mov	r2, r4
   b5688:	4631      	mov	r1, r6
   b568a:	f7ff faed 	bl	b4c68 <_ZN5Print6printfEPKcz>
        count++;
   b568e:	3401      	adds	r4, #1
    while (!CALCULATE)
   b5690:	e7f1      	b.n	b5676 <setup+0x9a>
    delay(5000);
   b5692:	f241 3088 	movw	r0, #5000	; 0x1388
    CALCULATE = false;
   b5696:	2400      	movs	r4, #0
   b5698:	702c      	strb	r4, [r5, #0]
    delay(5000);
   b569a:	f002 fbcd 	bl	b7e38 <delay>
    rotate_prices();
   b569e:	f7ff ff37 	bl	b5510 <_Z13rotate_pricesv>
    Serial.printf("Getting price data for today\n");
   b56a2:	f002 ffe1 	bl	b8668 <_Z16_fetch_usbserialv>
   b56a6:	4928      	ldr	r1, [pc, #160]	; (b5748 <setup+0x16c>)
        Serial.printf("Count2=: %d\n", count);
   b56a8:	4e28      	ldr	r6, [pc, #160]	; (b574c <setup+0x170>)
    Serial.printf("Getting price data for today\n");
   b56aa:	f7ff fadd 	bl	b4c68 <_ZN5Print6printfEPKcz>
    get_data(Time.day());
   b56ae:	f002 fb99 	bl	b7de4 <_ZN9TimeClass3dayEv>
   b56b2:	f7ff ff67 	bl	b5584 <_Z8get_datai>
    while (!CALCULATE)
   b56b6:	782b      	ldrb	r3, [r5, #0]
   b56b8:	b95b      	cbnz	r3, b56d2 <setup+0xf6>
        delay(1000);
   b56ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b56be:	f002 fbbb 	bl	b7e38 <delay>
        Serial.printf("Count2=: %d\n", count);
   b56c2:	f002 ffd1 	bl	b8668 <_Z16_fetch_usbserialv>
   b56c6:	4622      	mov	r2, r4
   b56c8:	4631      	mov	r1, r6
   b56ca:	f7ff facd 	bl	b4c68 <_ZN5Print6printfEPKcz>
        count++;
   b56ce:	3401      	adds	r4, #1
    while (!CALCULATE)
   b56d0:	e7f1      	b.n	b56b6 <setup+0xda>
    rotate_prices();
   b56d2:	f7ff ff1d 	bl	b5510 <_Z13rotate_pricesv>
    delay(5000);
   b56d6:	f241 3088 	movw	r0, #5000	; 0x1388
   b56da:	f002 fbad 	bl	b7e38 <delay>
    if (Time.hour() >= PULL_TIME_1)
   b56de:	f002 fb5d 	bl	b7d9c <_ZN9TimeClass4hourEv>
   b56e2:	280c      	cmp	r0, #12
   b56e4:	dd13      	ble.n	b570e <setup+0x132>
        CALCULATE = false;
   b56e6:	2300      	movs	r3, #0
   b56e8:	702b      	strb	r3, [r5, #0]
        GET_DATA = true;
   b56ea:	4b19      	ldr	r3, [pc, #100]	; (b5750 <setup+0x174>)
   b56ec:	2201      	movs	r2, #1
   b56ee:	701a      	strb	r2, [r3, #0]
        pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b56f0:	2103      	movs	r1, #3
   b56f2:	2008      	movs	r0, #8
   b56f4:	f003 fa9c 	bl	b8c30 <pinMode>
        attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b56f8:	2300      	movs	r3, #0
   b56fa:	9300      	str	r3, [sp, #0]
   b56fc:	4915      	ldr	r1, [pc, #84]	; (b5754 <setup+0x178>)
   b56fe:	f04f 33ff 	mov.w	r3, #4294967295
   b5702:	2201      	movs	r2, #1
   b5704:	2008      	movs	r0, #8
   b5706:	f002 ffd7 	bl	b86b8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b570a:	b00e      	add	sp, #56	; 0x38
   b570c:	bd70      	pop	{r4, r5, r6, pc}
        Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b570e:	f002 ffab 	bl	b8668 <_Z16_fetch_usbserialv>
   b5712:	4911      	ldr	r1, [pc, #68]	; (b5758 <setup+0x17c>)
   b5714:	220d      	movs	r2, #13
   b5716:	f7ff faa7 	bl	b4c68 <_ZN5Print6printfEPKcz>
        CALCULATE = true;
   b571a:	2301      	movs	r3, #1
   b571c:	702b      	strb	r3, [r5, #0]
   b571e:	e7e7      	b.n	b56f0 <setup+0x114>
   b5720:	2003dc38 	.word	0x2003dc38
   b5724:	000b4c89 	.word	0x000b4c89
   b5728:	000bb3e6 	.word	0x000bb3e6
   b572c:	000bb431 	.word	0x000bb431
   b5730:	000bb3ed 	.word	0x000bb3ed
   b5734:	2003e198 	.word	0x2003e198
   b5738:	2003e710 	.word	0x2003e710
   b573c:	000bb407 	.word	0x000bb407
   b5740:	000bb40f 	.word	0x000bb40f
   b5744:	2003dc19 	.word	0x2003dc19
   b5748:	000bb43e 	.word	0x000bb43e
   b574c:	000bb45c 	.word	0x000bb45c
   b5750:	2003dc34 	.word	0x2003dc34
   b5754:	000b4ab5 	.word	0x000b4ab5
   b5758:	000bb469 	.word	0x000bb469

000b575c <_Z15transmit_pricesPA2_ii>:
{
   b575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5760:	b08a      	sub	sp, #40	; 0x28
   b5762:	4605      	mov	r5, r0
   b5764:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b5766:	f002 ff7f 	bl	b8668 <_Z16_fetch_usbserialv>
   b576a:	4918      	ldr	r1, [pc, #96]	; (b57cc <_Z15transmit_pricesPA2_ii+0x70>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b576c:	4f18      	ldr	r7, [pc, #96]	; (b57d0 <_Z15transmit_pricesPA2_ii+0x74>)
    Serial.printf("In work\n");
   b576e:	f7ff fa7b 	bl	b4c68 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b5772:	4918      	ldr	r1, [pc, #96]	; (b57d4 <_Z15transmit_pricesPA2_ii+0x78>)
   b5774:	a802      	add	r0, sp, #8
   b5776:	f000 ff1c 	bl	b65b2 <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b577a:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b577c:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b5780:	42b4      	cmp	r4, r6
   b5782:	da10      	bge.n	b57a6 <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b5784:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b5788:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b578c:	4639      	mov	r1, r7
   b578e:	a806      	add	r0, sp, #24
   b5790:	f000 ff9a 	bl	b66c8 <_ZN6String6formatEPKcz>
   b5794:	a906      	add	r1, sp, #24
   b5796:	a802      	add	r0, sp, #8
   b5798:	f000 ff80 	bl	b669c <_ZN6String6concatERKS_>
   b579c:	a806      	add	r0, sp, #24
   b579e:	f000 febd 	bl	b651c <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b57a2:	3401      	adds	r4, #1
   b57a4:	e7ec      	b.n	b5780 <_Z15transmit_pricesPA2_ii+0x24>
   b57a6:	4b0c      	ldr	r3, [pc, #48]	; (b57d8 <_Z15transmit_pricesPA2_ii+0x7c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b57a8:	9a02      	ldr	r2, [sp, #8]
   b57aa:	781b      	ldrb	r3, [r3, #0]
   b57ac:	490b      	ldr	r1, [pc, #44]	; (b57dc <_Z15transmit_pricesPA2_ii+0x80>)
   b57ae:	f88d 3000 	strb.w	r3, [sp]
   b57b2:	a806      	add	r0, sp, #24
   b57b4:	233c      	movs	r3, #60	; 0x3c
   b57b6:	f002 fd11 	bl	b81dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b57ba:	a807      	add	r0, sp, #28
   b57bc:	f7ff fecc 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String data = "Cheap(ish) hours of the day: ";
   b57c0:	a802      	add	r0, sp, #8
   b57c2:	f000 feab 	bl	b651c <_ZN6StringD1Ev>
}
   b57c6:	b00a      	add	sp, #40	; 0x28
   b57c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b57cc:	000bb49a 	.word	0x000bb49a
   b57d0:	000bb4c1 	.word	0x000bb4c1
   b57d4:	000bb4a3 	.word	0x000bb4a3
   b57d8:	2003dce0 	.word	0x2003dce0
   b57dc:	000bb4d0 	.word	0x000bb4d0

000b57e0 <loop>:
{
   b57e0:	b570      	push	{r4, r5, r6, lr}
    if (GET_DATA)
   b57e2:	4c59      	ldr	r4, [pc, #356]	; (b5948 <loop+0x168>)
   b57e4:	7823      	ldrb	r3, [r4, #0]
{
   b57e6:	b0c2      	sub	sp, #264	; 0x108
    if (GET_DATA)
   b57e8:	b14b      	cbz	r3, b57fe <loop+0x1e>
        AWAITING_DATA = true;
   b57ea:	4b58      	ldr	r3, [pc, #352]	; (b594c <loop+0x16c>)
   b57ec:	2201      	movs	r2, #1
   b57ee:	701a      	strb	r2, [r3, #0]
        get_data(Time.day() + 1);
   b57f0:	f002 faf8 	bl	b7de4 <_ZN9TimeClass3dayEv>
   b57f4:	3001      	adds	r0, #1
   b57f6:	f7ff fec5 	bl	b5584 <_Z8get_datai>
        GET_DATA = false;
   b57fa:	2300      	movs	r3, #0
   b57fc:	7023      	strb	r3, [r4, #0]
    if (CALCULATE)
   b57fe:	4c54      	ldr	r4, [pc, #336]	; (b5950 <loop+0x170>)
   b5800:	4d54      	ldr	r5, [pc, #336]	; (b5954 <loop+0x174>)
   b5802:	7823      	ldrb	r3, [r4, #0]
   b5804:	b333      	cbz	r3, b5854 <loop+0x74>
        update_JSON();
   b5806:	f7ff fcab 	bl	b5160 <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b580a:	4b53      	ldr	r3, [pc, #332]	; (b5958 <loop+0x178>)
   b580c:	4853      	ldr	r0, [pc, #332]	; (b595c <loop+0x17c>)
   b580e:	6819      	ldr	r1, [r3, #0]
   b5810:	2218      	movs	r2, #24
   b5812:	f7ff fbb5 	bl	b4f80 <_Z8calc_lowPA2_iPdi>
   b5816:	4b52      	ldr	r3, [pc, #328]	; (b5960 <loop+0x180>)
   b5818:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b581a:	f002 ff25 	bl	b8668 <_Z16_fetch_usbserialv>
   b581e:	4606      	mov	r6, r0
   b5820:	f002 fabc 	bl	b7d9c <_ZN9TimeClass4hourEv>
   b5824:	9001      	str	r0, [sp, #4]
   b5826:	f002 fac5 	bl	b7db4 <_ZN9TimeClass6minuteEv>
   b582a:	9a01      	ldr	r2, [sp, #4]
   b582c:	494d      	ldr	r1, [pc, #308]	; (b5964 <loop+0x184>)
   b582e:	4603      	mov	r3, r0
   b5830:	4630      	mov	r0, r6
   b5832:	f7ff fa19 	bl	b4c68 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b5836:	2301      	movs	r3, #1
   b5838:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b583a:	2300      	movs	r3, #0
   b583c:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b583e:	4b48      	ldr	r3, [pc, #288]	; (b5960 <loop+0x180>)
   b5840:	4846      	ldr	r0, [pc, #280]	; (b595c <loop+0x17c>)
   b5842:	6819      	ldr	r1, [r3, #0]
   b5844:	f7ff ff8a 	bl	b575c <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b5848:	4b47      	ldr	r3, [pc, #284]	; (b5968 <loop+0x188>)
   b584a:	2201      	movs	r2, #1
   b584c:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b584e:	2300      	movs	r3, #0
   b5850:	702b      	strb	r3, [r5, #0]
   b5852:	e002      	b.n	b585a <loop+0x7a>
    if (TRANSMIT_PRICE)
   b5854:	782b      	ldrb	r3, [r5, #0]
   b5856:	2b00      	cmp	r3, #0
   b5858:	d1f1      	bne.n	b583e <loop+0x5e>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b585a:	4d44      	ldr	r5, [pc, #272]	; (b596c <loop+0x18c>)
   b585c:	782b      	ldrb	r3, [r5, #0]
   b585e:	b1db      	cbz	r3, b5898 <loop+0xb8>
        Serial.printf("Received power/get\n");
   b5860:	f002 ff02 	bl	b8668 <_Z16_fetch_usbserialv>
   b5864:	4942      	ldr	r1, [pc, #264]	; (b5970 <loop+0x190>)
   b5866:	f7ff f9ff 	bl	b4c68 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b586a:	4b42      	ldr	r3, [pc, #264]	; (b5974 <loop+0x194>)
   b586c:	681e      	ldr	r6, [r3, #0]
   b586e:	f002 fa95 	bl	b7d9c <_ZN9TimeClass4hourEv>
   b5872:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b5876:	4940      	ldr	r1, [pc, #256]	; (b5978 <loop+0x198>)
        wh_today[Time.hour()] += 1;
   b5878:	3301      	adds	r3, #1
   b587a:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b587e:	4b3f      	ldr	r3, [pc, #252]	; (b597c <loop+0x19c>)
   b5880:	a802      	add	r0, sp, #8
   b5882:	681a      	ldr	r2, [r3, #0]
   b5884:	f000 fd52 	bl	b632c <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5888:	2300      	movs	r3, #0
   b588a:	483d      	ldr	r0, [pc, #244]	; (b5980 <loop+0x1a0>)
   b588c:	22ff      	movs	r2, #255	; 0xff
   b588e:	a902      	add	r1, sp, #8
   b5890:	f001 f990 	bl	b6bb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        TRANSMIT_SENSOR = false;
   b5894:	2300      	movs	r3, #0
   b5896:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b5898:	4d3a      	ldr	r5, [pc, #232]	; (b5984 <loop+0x1a4>)
   b589a:	782b      	ldrb	r3, [r5, #0]
   b589c:	b12b      	cbz	r3, b58aa <loop+0xca>
        rotate_prices();
   b589e:	f7ff fe37 	bl	b5510 <_Z13rotate_pricesv>
        ROTATE = false;
   b58a2:	2300      	movs	r3, #0
   b58a4:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b58a6:	2301      	movs	r3, #1
   b58a8:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b58aa:	4c37      	ldr	r4, [pc, #220]	; (b5988 <loop+0x1a8>)
   b58ac:	7823      	ldrb	r3, [r4, #0]
   b58ae:	b11b      	cbz	r3, b58b8 <loop+0xd8>
        hourly_JSON_update();
   b58b0:	f7ff fc24 	bl	b50fc <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b58b4:	2300      	movs	r3, #0
   b58b6:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 3000))
   b58b8:	4c34      	ldr	r4, [pc, #208]	; (b598c <loop+0x1ac>)
   b58ba:	7825      	ldrb	r5, [r4, #0]
   b58bc:	f000 fa78 	bl	b5db0 <HAL_Timer_Get_Milli_Seconds>
   b58c0:	4b33      	ldr	r3, [pc, #204]	; (b5990 <loop+0x1b0>)
   b58c2:	681b      	ldr	r3, [r3, #0]
   b58c4:	1ac0      	subs	r0, r0, r3
   b58c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b58ca:	4298      	cmp	r0, r3
   b58cc:	d934      	bls.n	b5938 <loop+0x158>
   b58ce:	2d00      	cmp	r5, #0
   b58d0:	d032      	beq.n	b5938 <loop+0x158>
        update_JSON();
   b58d2:	f7ff fc45 	bl	b5160 <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b58d6:	4b29      	ldr	r3, [pc, #164]	; (b597c <loop+0x19c>)
   b58d8:	4927      	ldr	r1, [pc, #156]	; (b5978 <loop+0x198>)
   b58da:	681a      	ldr	r2, [r3, #0]
   b58dc:	a802      	add	r0, sp, #8
   b58de:	f000 fd25 	bl	b632c <sprintf>
   b58e2:	2300      	movs	r3, #0
   b58e4:	22ff      	movs	r2, #255	; 0xff
   b58e6:	a902      	add	r1, sp, #8
   b58e8:	4825      	ldr	r0, [pc, #148]	; (b5980 <loop+0x1a0>)
   b58ea:	f001 f963 	bl	b6bb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b58ee:	4929      	ldr	r1, [pc, #164]	; (b5994 <loop+0x1b4>)
   b58f0:	4829      	ldr	r0, [pc, #164]	; (b5998 <loop+0x1b8>)
   b58f2:	2200      	movs	r2, #0
   b58f4:	f001 f9be 	bl	b6c74 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b58f8:	4928      	ldr	r1, [pc, #160]	; (b599c <loop+0x1bc>)
   b58fa:	4829      	ldr	r0, [pc, #164]	; (b59a0 <loop+0x1c0>)
   b58fc:	2200      	movs	r2, #0
   b58fe:	f001 f9b9 	bl	b6c74 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b5902:	4928      	ldr	r1, [pc, #160]	; (b59a4 <loop+0x1c4>)
   b5904:	4828      	ldr	r0, [pc, #160]	; (b59a8 <loop+0x1c8>)
   b5906:	2200      	movs	r2, #0
   b5908:	f001 f9b4 	bl	b6c74 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b590c:	4927      	ldr	r1, [pc, #156]	; (b59ac <loop+0x1cc>)
   b590e:	4828      	ldr	r0, [pc, #160]	; (b59b0 <loop+0x1d0>)
   b5910:	2200      	movs	r2, #0
   b5912:	f001 f9af 	bl	b6c74 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b5916:	4927      	ldr	r1, [pc, #156]	; (b59b4 <loop+0x1d4>)
   b5918:	4827      	ldr	r0, [pc, #156]	; (b59b8 <loop+0x1d8>)
   b591a:	2200      	movs	r2, #0
   b591c:	f001 f9aa 	bl	b6c74 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue("{\"pricestoday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b5920:	4926      	ldr	r1, [pc, #152]	; (b59bc <loop+0x1dc>)
   b5922:	481f      	ldr	r0, [pc, #124]	; (b59a0 <loop+0x1c0>)
   b5924:	2200      	movs	r2, #0
   b5926:	f001 f9aa 	bl	b6c7e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b592a:	2300      	movs	r3, #0
   b592c:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b592e:	f002 fe9b 	bl	b8668 <_Z16_fetch_usbserialv>
   b5932:	4923      	ldr	r1, [pc, #140]	; (b59c0 <loop+0x1e0>)
   b5934:	f7ff f998 	bl	b4c68 <_ZN5Print6printfEPKcz>
    delay(1000);
   b5938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b593c:	b042      	add	sp, #264	; 0x108
   b593e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
   b5942:	f002 ba79 	b.w	b7e38 <delay>
   b5946:	bf00      	nop
   b5948:	2003dc34 	.word	0x2003dc34
   b594c:	2003dc18 	.word	0x2003dc18
   b5950:	2003dc19 	.word	0x2003dc19
   b5954:	2003dc39 	.word	0x2003dc39
   b5958:	2003dd50 	.word	0x2003dd50
   b595c:	2003dce8 	.word	0x2003dce8
   b5960:	2003dd48 	.word	0x2003dd48
   b5964:	000bb3ed 	.word	0x000bb3ed
   b5968:	2003dc37 	.word	0x2003dc37
   b596c:	2003dc3a 	.word	0x2003dc3a
   b5970:	000bb4e0 	.word	0x000bb4e0
   b5974:	2003e1b4 	.word	0x2003e1b4
   b5978:	000bb4f4 	.word	0x000bb4f4
   b597c:	2003dd4c 	.word	0x2003dd4c
   b5980:	2003dc3c 	.word	0x2003dc3c
   b5984:	2003dc36 	.word	0x2003dc36
   b5988:	2003dc3b 	.word	0x2003dc3b
   b598c:	2003dc35 	.word	0x2003dc35
   b5990:	2003dd60 	.word	0x2003dd60
   b5994:	2003dd84 	.word	0x2003dd84
   b5998:	2003dc2c 	.word	0x2003dc2c
   b599c:	2003dd64 	.word	0x2003dd64
   b59a0:	2003dc1c 	.word	0x2003dc1c
   b59a4:	2003dd74 	.word	0x2003dd74
   b59a8:	2003dc24 	.word	0x2003dc24
   b59ac:	2003e1cc 	.word	0x2003e1cc
   b59b0:	2003dc4c 	.word	0x2003dc4c
   b59b4:	2003e1b8 	.word	0x2003e1b8
   b59b8:	2003dc44 	.word	0x2003dc44
   b59bc:	000bb500 	.word	0x000bb500
   b59c0:	000bb551 	.word	0x000bb551

000b59c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b59c4:	b082      	sub	sp, #8
   b59c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59c8:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b59ca:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b59cc:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b59ce:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b59d0:	e9c0 3300 	strd	r3, r3, [r0]
   b59d4:	4606      	mov	r6, r0
   b59d6:	4694      	mov	ip, r2
   b59d8:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b59da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59dc:	ac04      	add	r4, sp, #16
   b59de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59e0:	682b      	ldr	r3, [r5, #0]
   b59e2:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b59e4:	ad1a      	add	r5, sp, #104	; 0x68
   b59e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59e8:	ac09      	add	r4, sp, #36	; 0x24
   b59ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59ec:	682b      	ldr	r3, [r5, #0]
   b59ee:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b59f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b59f2:	9302      	str	r3, [sp, #8]
   b59f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b59f6:	9301      	str	r3, [sp, #4]
   b59f8:	ab09      	add	r3, sp, #36	; 0x24
   b59fa:	9300      	str	r3, [sp, #0]
   b59fc:	4630      	mov	r0, r6
   b59fe:	ab04      	add	r3, sp, #16
   b5a00:	4662      	mov	r2, ip
   b5a02:	4639      	mov	r1, r7
   b5a04:	f001 fe2e 	bl	b7664 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5a08:	4630      	mov	r0, r6
   b5a0a:	b00f      	add	sp, #60	; 0x3c
   b5a0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5a10:	b002      	add	sp, #8
   b5a12:	4770      	bx	lr

000b5a14 <_GLOBAL__sub_I_argonName>:
   b5a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b5a18:	4b83      	ldr	r3, [pc, #524]	; (b5c28 <_GLOBAL__sub_I_argonName+0x214>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5a1a:	4d84      	ldr	r5, [pc, #528]	; (b5c2c <_GLOBAL__sub_I_argonName+0x218>)
const BleUuid wattcharacteristicUuid(watt_c);
   b5a1c:	f8df b29c 	ldr.w	fp, [pc, #668]	; b5cbc <_GLOBAL__sub_I_argonName+0x2a8>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b5a20:	f8df a29c 	ldr.w	sl, [pc, #668]	; b5cc0 <_GLOBAL__sub_I_argonName+0x2ac>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b5a24:	f8df 929c 	ldr.w	r9, [pc, #668]	; b5cc4 <_GLOBAL__sub_I_argonName+0x2b0>
   b5a28:	f04f 0801 	mov.w	r8, #1
   b5a2c:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5a30:	4b7f      	ldr	r3, [pc, #508]	; (b5c30 <_GLOBAL__sub_I_argonName+0x21c>)
   b5a32:	b093      	sub	sp, #76	; 0x4c
   b5a34:	6819      	ldr	r1, [r3, #0]
   b5a36:	4628      	mov	r0, r5
   b5a38:	f001 f87e 	bl	b6b38 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b5a3c:	4b7d      	ldr	r3, [pc, #500]	; (b5c34 <_GLOBAL__sub_I_argonName+0x220>)
   b5a3e:	4658      	mov	r0, fp
   b5a40:	6819      	ldr	r1, [r3, #0]
   b5a42:	f001 f879 	bl	b6b38 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b5a46:	4b7c      	ldr	r3, [pc, #496]	; (b5c38 <_GLOBAL__sub_I_argonName+0x224>)
   b5a48:	4650      	mov	r0, sl
   b5a4a:	6819      	ldr	r1, [r3, #0]
   b5a4c:	f001 f874 	bl	b6b38 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b5a50:	4b7a      	ldr	r3, [pc, #488]	; (b5c3c <_GLOBAL__sub_I_argonName+0x228>)
   b5a52:	4648      	mov	r0, r9
   b5a54:	6819      	ldr	r1, [r3, #0]
   b5a56:	f001 f86f 	bl	b6b38 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b5a5a:	4b79      	ldr	r3, [pc, #484]	; (b5c40 <_GLOBAL__sub_I_argonName+0x22c>)
   b5a5c:	4879      	ldr	r0, [pc, #484]	; (b5c44 <_GLOBAL__sub_I_argonName+0x230>)
   b5a5e:	6819      	ldr	r1, [r3, #0]
   b5a60:	f001 f86a 	bl	b6b38 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b5a64:	4b78      	ldr	r3, [pc, #480]	; (b5c48 <_GLOBAL__sub_I_argonName+0x234>)
   b5a66:	4879      	ldr	r0, [pc, #484]	; (b5c4c <_GLOBAL__sub_I_argonName+0x238>)
   b5a68:	6819      	ldr	r1, [r3, #0]
   b5a6a:	f001 f865 	bl	b6b38 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b5a6e:	4b78      	ldr	r3, [pc, #480]	; (b5c50 <_GLOBAL__sub_I_argonName+0x23c>)
   b5a70:	4878      	ldr	r0, [pc, #480]	; (b5c54 <_GLOBAL__sub_I_argonName+0x240>)
   b5a72:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5a74:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b5a76:	f001 f85f 	bl	b6b38 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5a7a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5a7e:	462e      	mov	r6, r5
   b5a80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5a82:	2710      	movs	r7, #16
   b5a84:	eb0d 0c07 	add.w	ip, sp, r7
   b5a88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5a8c:	6833      	ldr	r3, [r6, #0]
   b5a8e:	f8cc 3000 	str.w	r3, [ip]
   b5a92:	f10b 0304 	add.w	r3, fp, #4
   b5a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a98:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5a9c:	f8db 3000 	ldr.w	r3, [fp]
   b5aa0:	496d      	ldr	r1, [pc, #436]	; (b5c58 <_GLOBAL__sub_I_argonName+0x244>)
   b5aa2:	486e      	ldr	r0, [pc, #440]	; (b5c5c <_GLOBAL__sub_I_argonName+0x248>)
   b5aa4:	463a      	mov	r2, r7
   b5aa6:	f7ff ff8d 	bl	b59c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b5aaa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5aae:	46ae      	mov	lr, r5
   b5ab0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5ab4:	eb0d 0c07 	add.w	ip, sp, r7
   b5ab8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5abc:	6833      	ldr	r3, [r6, #0]
   b5abe:	f8cc 3000 	str.w	r3, [ip]
   b5ac2:	f10a 0304 	add.w	r3, sl, #4
   b5ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5ac8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5acc:	f8da 3000 	ldr.w	r3, [sl]
   b5ad0:	4963      	ldr	r1, [pc, #396]	; (b5c60 <_GLOBAL__sub_I_argonName+0x24c>)
   b5ad2:	4864      	ldr	r0, [pc, #400]	; (b5c64 <_GLOBAL__sub_I_argonName+0x250>)
   b5ad4:	463a      	mov	r2, r7
   b5ad6:	f7ff ff75 	bl	b59c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b5ada:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5ade:	46ae      	mov	lr, r5
   b5ae0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5ae4:	eb0d 0c07 	add.w	ip, sp, r7
   b5ae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5aec:	6833      	ldr	r3, [r6, #0]
   b5aee:	f8cc 3000 	str.w	r3, [ip]
   b5af2:	f109 0304 	add.w	r3, r9, #4
   b5af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5af8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5afc:	f8d9 3000 	ldr.w	r3, [r9]
   b5b00:	4959      	ldr	r1, [pc, #356]	; (b5c68 <_GLOBAL__sub_I_argonName+0x254>)
   b5b02:	485a      	ldr	r0, [pc, #360]	; (b5c6c <_GLOBAL__sub_I_argonName+0x258>)
   b5b04:	463a      	mov	r2, r7
   b5b06:	f7ff ff5d 	bl	b59c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b5b0a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5b0e:	46ae      	mov	lr, r5
   b5b10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5b14:	eb0d 0c07 	add.w	ip, sp, r7
   b5b18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b1c:	6833      	ldr	r3, [r6, #0]
   b5b1e:	f8cc 3000 	str.w	r3, [ip]
   b5b22:	4b48      	ldr	r3, [pc, #288]	; (b5c44 <_GLOBAL__sub_I_argonName+0x230>)
   b5b24:	3304      	adds	r3, #4
   b5b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5b28:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5b2c:	4b45      	ldr	r3, [pc, #276]	; (b5c44 <_GLOBAL__sub_I_argonName+0x230>)
   b5b2e:	4950      	ldr	r1, [pc, #320]	; (b5c70 <_GLOBAL__sub_I_argonName+0x25c>)
   b5b30:	681b      	ldr	r3, [r3, #0]
   b5b32:	4850      	ldr	r0, [pc, #320]	; (b5c74 <_GLOBAL__sub_I_argonName+0x260>)
   b5b34:	463a      	mov	r2, r7
   b5b36:	f7ff ff45 	bl	b59c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b5b3a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5b3e:	46ae      	mov	lr, r5
   b5b40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5b44:	eb0d 0c07 	add.w	ip, sp, r7
   b5b48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b4c:	6833      	ldr	r3, [r6, #0]
   b5b4e:	f8cc 3000 	str.w	r3, [ip]
   b5b52:	4b3e      	ldr	r3, [pc, #248]	; (b5c4c <_GLOBAL__sub_I_argonName+0x238>)
   b5b54:	3304      	adds	r3, #4
   b5b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5b58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5b5c:	4b3b      	ldr	r3, [pc, #236]	; (b5c4c <_GLOBAL__sub_I_argonName+0x238>)
   b5b5e:	4946      	ldr	r1, [pc, #280]	; (b5c78 <_GLOBAL__sub_I_argonName+0x264>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	4846      	ldr	r0, [pc, #280]	; (b5c7c <_GLOBAL__sub_I_argonName+0x268>)
   b5b64:	463a      	mov	r2, r7
   b5b66:	f7ff ff2d 	bl	b59c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b5b6a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b70:	eb0d 0c07 	add.w	ip, sp, r7
   b5b74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b78:	4d36      	ldr	r5, [pc, #216]	; (b5c54 <_GLOBAL__sub_I_argonName+0x240>)
   b5b7a:	6833      	ldr	r3, [r6, #0]
   b5b7c:	f8cc 3000 	str.w	r3, [ip]
   b5b80:	1d2b      	adds	r3, r5, #4
   b5b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5b84:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5b88:	463a      	mov	r2, r7
   b5b8a:	682b      	ldr	r3, [r5, #0]
   b5b8c:	493c      	ldr	r1, [pc, #240]	; (b5c80 <_GLOBAL__sub_I_argonName+0x26c>)
   b5b8e:	483d      	ldr	r0, [pc, #244]	; (b5c84 <_GLOBAL__sub_I_argonName+0x270>)
   b5b90:	f7ff ff18 	bl	b59c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
uint8_t currentHour = Time.hour();
   b5b94:	f002 f902 	bl	b7d9c <_ZN9TimeClass4hourEv>
   b5b98:	4b3b      	ldr	r3, [pc, #236]	; (b5c88 <_GLOBAL__sub_I_argonName+0x274>)
String pricestoday_Json;
   b5b9a:	493c      	ldr	r1, [pc, #240]	; (b5c8c <_GLOBAL__sub_I_argonName+0x278>)
uint8_t currentHour = Time.hour();
   b5b9c:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b5b9e:	483c      	ldr	r0, [pc, #240]	; (b5c90 <_GLOBAL__sub_I_argonName+0x27c>)
   b5ba0:	f000 fd07 	bl	b65b2 <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b5ba4:	4939      	ldr	r1, [pc, #228]	; (b5c8c <_GLOBAL__sub_I_argonName+0x278>)
   b5ba6:	483b      	ldr	r0, [pc, #236]	; (b5c94 <_GLOBAL__sub_I_argonName+0x280>)
   b5ba8:	f000 fd03 	bl	b65b2 <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b5bac:	4937      	ldr	r1, [pc, #220]	; (b5c8c <_GLOBAL__sub_I_argonName+0x278>)
   b5bae:	483a      	ldr	r0, [pc, #232]	; (b5c98 <_GLOBAL__sub_I_argonName+0x284>)
   b5bb0:	f000 fcff 	bl	b65b2 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b5bb4:	4935      	ldr	r1, [pc, #212]	; (b5c8c <_GLOBAL__sub_I_argonName+0x278>)
   b5bb6:	4839      	ldr	r0, [pc, #228]	; (b5c9c <_GLOBAL__sub_I_argonName+0x288>)
   b5bb8:	f000 fcfb 	bl	b65b2 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b5bbc:	4933      	ldr	r1, [pc, #204]	; (b5c8c <_GLOBAL__sub_I_argonName+0x278>)
   b5bbe:	4838      	ldr	r0, [pc, #224]	; (b5ca0 <_GLOBAL__sub_I_argonName+0x28c>)
   b5bc0:	f000 fcf7 	bl	b65b2 <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5bc4:	4b37      	ldr	r3, [pc, #220]	; (b5ca4 <_GLOBAL__sub_I_argonName+0x290>)
   b5bc6:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bc8:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5bca:	4b37      	ldr	r3, [pc, #220]	; (b5ca8 <_GLOBAL__sub_I_argonName+0x294>)
   b5bcc:	4a37      	ldr	r2, [pc, #220]	; (b5cac <_GLOBAL__sub_I_argonName+0x298>)
   b5bce:	601a      	str	r2, [r3, #0]
   b5bd0:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5bd4:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5bd8:	ae0c      	add	r6, sp, #48	; 0x30
   b5bda:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5bde:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5be2:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5be6:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5bea:	e882 0003 	stmia.w	r2, {r0, r1}
   b5bee:	4a30      	ldr	r2, [pc, #192]	; (b5cb0 <_GLOBAL__sub_I_argonName+0x29c>)
   b5bf0:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5bf2:	699a      	ldr	r2, [r3, #24]
   b5bf4:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b5bf6:	4a2f      	ldr	r2, [pc, #188]	; (b5cb4 <_GLOBAL__sub_I_argonName+0x2a0>)
   b5bf8:	619a      	str	r2, [r3, #24]
   b5bfa:	711c      	strb	r4, [r3, #4]
   b5bfc:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5bfe:	4a2e      	ldr	r2, [pc, #184]	; (b5cb8 <_GLOBAL__sub_I_argonName+0x2a4>)
      __a = _GLIBCXX_MOVE(__b);
   b5c00:	9410      	str	r4, [sp, #64]	; 0x40
   b5c02:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5c06:	f103 0008 	add.w	r0, r3, #8
   b5c0a:	e9cd 8400 	strd	r8, r4, [sp]
   b5c0e:	f000 f981 	bl	b5f14 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5c12:	4628      	mov	r0, r5
   b5c14:	f7ff f8de 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
SYSTEM_THREAD(ENABLED);
   b5c18:	4621      	mov	r1, r4
   b5c1a:	4640      	mov	r0, r8
   b5c1c:	b013      	add	sp, #76	; 0x4c
   b5c1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b5c22:	f000 baa7 	b.w	b6174 <system_thread_set_state>
   b5c26:	bf00      	nop
   b5c28:	2003dce0 	.word	0x2003dce0
   b5c2c:	2003dc68 	.word	0x2003dc68
   b5c30:	2003da30 	.word	0x2003da30
   b5c34:	2003da34 	.word	0x2003da34
   b5c38:	2003da14 	.word	0x2003da14
   b5c3c:	2003da0c 	.word	0x2003da0c
   b5c40:	2003da10 	.word	0x2003da10
   b5c44:	2003dca4 	.word	0x2003dca4
   b5c48:	2003da18 	.word	0x2003da18
   b5c4c:	2003dc90 	.word	0x2003dc90
   b5c50:	2003da1c 	.word	0x2003da1c
   b5c54:	2003dccc 	.word	0x2003dccc
   b5c58:	000bb560 	.word	0x000bb560
   b5c5c:	2003dc3c 	.word	0x2003dc3c
   b5c60:	000bb569 	.word	0x000bb569
   b5c64:	2003dc2c 	.word	0x2003dc2c
   b5c68:	000bb577 	.word	0x000bb577
   b5c6c:	2003dc1c 	.word	0x2003dc1c
   b5c70:	000bb581 	.word	0x000bb581
   b5c74:	2003dc24 	.word	0x2003dc24
   b5c78:	000bb58e 	.word	0x000bb58e
   b5c7c:	2003dc44 	.word	0x2003dc44
   b5c80:	000bb598 	.word	0x000bb598
   b5c84:	2003dc4c 	.word	0x2003dc4c
   b5c88:	2003dd5c 	.word	0x2003dd5c
   b5c8c:	000bb499 	.word	0x000bb499
   b5c90:	2003dd64 	.word	0x2003dd64
   b5c94:	2003dd74 	.word	0x2003dd74
   b5c98:	2003dd84 	.word	0x2003dd84
   b5c9c:	2003e1b8 	.word	0x2003e1b8
   b5ca0:	2003e1cc 	.word	0x2003e1cc
   b5ca4:	000b4ba5 	.word	0x000b4ba5
   b5ca8:	2003e198 	.word	0x2003e198
   b5cac:	000bb5b0 	.word	0x000bb5b0
   b5cb0:	000b4b4b 	.word	0x000b4b4b
   b5cb4:	000b4b5f 	.word	0x000b4b5f
   b5cb8:	000b4b11 	.word	0x000b4b11
   b5cbc:	2003dc54 	.word	0x2003dc54
   b5cc0:	2003dcb8 	.word	0x2003dcb8
   b5cc4:	2003dc7c 	.word	0x2003dc7c

000b5cc8 <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b5cc8:	b570      	push	{r4, r5, r6, lr}
   b5cca:	4604      	mov	r4, r0
   b5ccc:	4605      	mov	r5, r0
   b5cce:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5cd2:	4628      	mov	r0, r5
   b5cd4:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b5cd8:	f000 f815 	bl	b5d06 <_ZN12mDNSResolver8ResponseC1Ev>
   b5cdc:	42ae      	cmp	r6, r5
   b5cde:	d1f8      	bne.n	b5cd2 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b5ce0:	2300      	movs	r3, #0
   b5ce2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5ce6:	4620      	mov	r0, r4
   b5ce8:	bd70      	pop	{r4, r5, r6, pc}

000b5cea <_ZN9IPAddressaSImEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b5cea:	b530      	push	{r4, r5, lr}
   b5cec:	b087      	sub	sp, #28
   b5cee:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5cf0:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5cf2:	4668      	mov	r0, sp
   b5cf4:	f002 fc38 	bl	b8568 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b5cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5cfa:	3404      	adds	r4, #4
   b5cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5cfe:	682b      	ldr	r3, [r5, #0]
   b5d00:	7023      	strb	r3, [r4, #0]
    }
   b5d02:	b007      	add	sp, #28
   b5d04:	bd30      	pop	{r4, r5, pc}

000b5d06 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b5d06:	b538      	push	{r3, r4, r5, lr}
   b5d08:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b5d0c:	4604      	mov	r4, r0
   b5d0e:	4628      	mov	r0, r5
   b5d10:	f002 fc0a 	bl	b8528 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b5d14:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b5d16:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b5d18:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b5d1a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b5d1e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b5d22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b5d26:	f04f 31ff 	mov.w	r1, #4294967295
   b5d2a:	f7ff ffde 	bl	b5cea <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b5d2e:	4620      	mov	r0, r4
   b5d30:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5d34 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
#ifdef TEST
#include <stdlib.h>
#endif

namespace mDNSResolver {
  Cache cache;
   b5d34:	4801      	ldr	r0, [pc, #4]	; (b5d3c <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b5d36:	f7ff bfc7 	b.w	b5cc8 <_ZN12mDNSResolver5CacheC1Ev>
   b5d3a:	bf00      	nop
   b5d3c:	2003e1dc 	.word	0x2003e1dc

000b5d40 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <netdb_freeaddrinfo+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	689b      	ldr	r3, [r3, #8]
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	00030268 	.word	0x00030268

000b5d50 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <netdb_getaddrinfo+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	68db      	ldr	r3, [r3, #12]
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	00030268 	.word	0x00030268

000b5d60 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <hal_gpio_mode+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	689b      	ldr	r3, [r3, #8]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	0003022c 	.word	0x0003022c

000b5d70 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <hal_interrupt_attach+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	699b      	ldr	r3, [r3, #24]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	0003022c 	.word	0x0003022c

000b5d80 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <hal_interrupt_detach+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	69db      	ldr	r3, [r3, #28]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	0003022c 	.word	0x0003022c

000b5d90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <HAL_RNG_GetRandomNumber+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	685b      	ldr	r3, [r3, #4]
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	00030218 	.word	0x00030218

000b5da0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <HAL_Delay_Microseconds+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	68db      	ldr	r3, [r3, #12]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	00030218 	.word	0x00030218

000b5db0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	695b      	ldr	r3, [r3, #20]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	00030218 	.word	0x00030218

000b5dc0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <hal_rtc_time_is_valid+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	00030218 	.word	0x00030218

000b5dd0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <hal_rtc_get_time+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	00030218 	.word	0x00030218

000b5de0 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <HAL_Core_Runtime_Info+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	00030234 	.word	0x00030234

000b5df0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <hal_ble_stack_init+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	689b      	ldr	r3, [r3, #8]
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	00030278 	.word	0x00030278

000b5e00 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <hal_ble_select_antenna+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	691b      	ldr	r3, [r3, #16]
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	00030278 	.word	0x00030278

000b5e10 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <hal_ble_gap_set_advertising_data+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	00030278 	.word	0x00030278

000b5e20 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <hal_ble_gap_set_scan_response_data+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	00030278 	.word	0x00030278

000b5e30 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <hal_ble_gap_start_advertising+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	00030278 	.word	0x00030278

000b5e40 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b03      	ldr	r3, [pc, #12]	; (b5e50 <hal_ble_gap_disconnect+0x10>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5e4a:	9301      	str	r3, [sp, #4]
   b5e4c:	bd08      	pop	{r3, pc}
   b5e4e:	0000      	.short	0x0000
   b5e50:	00030278 	.word	0x00030278

000b5e54 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5e54:	b508      	push	{r3, lr}
   b5e56:	4b03      	ldr	r3, [pc, #12]	; (b5e64 <hal_ble_gatt_server_add_service+0x10>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5e5e:	9301      	str	r3, [sp, #4]
   b5e60:	bd08      	pop	{r3, pc}
   b5e62:	0000      	.short	0x0000
   b5e64:	00030278 	.word	0x00030278

000b5e68 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b03      	ldr	r3, [pc, #12]	; (b5e78 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5e72:	9301      	str	r3, [sp, #4]
   b5e74:	bd08      	pop	{r3, pc}
   b5e76:	0000      	.short	0x0000
   b5e78:	00030278 	.word	0x00030278

000b5e7c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b03      	ldr	r3, [pc, #12]	; (b5e8c <hal_ble_gatt_client_write_with_response+0x10>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5e86:	9301      	str	r3, [sp, #4]
   b5e88:	bd08      	pop	{r3, pc}
   b5e8a:	0000      	.short	0x0000
   b5e8c:	00030278 	.word	0x00030278

000b5e90 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b03      	ldr	r3, [pc, #12]	; (b5ea0 <hal_ble_gatt_client_write_without_response+0x10>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5e9a:	9301      	str	r3, [sp, #4]
   b5e9c:	bd08      	pop	{r3, pc}
   b5e9e:	0000      	.short	0x0000
   b5ea0:	00030278 	.word	0x00030278

000b5ea4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5ea4:	b508      	push	{r3, lr}
   b5ea6:	4b03      	ldr	r3, [pc, #12]	; (b5eb4 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5ea8:	681b      	ldr	r3, [r3, #0]
   b5eaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5eae:	9301      	str	r3, [sp, #4]
   b5eb0:	bd08      	pop	{r3, pc}
   b5eb2:	0000      	.short	0x0000
   b5eb4:	00030278 	.word	0x00030278

000b5eb8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b03      	ldr	r3, [pc, #12]	; (b5ec8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5ec2:	9301      	str	r3, [sp, #4]
   b5ec4:	bd08      	pop	{r3, pc}
   b5ec6:	0000      	.short	0x0000
   b5ec8:	00030278 	.word	0x00030278

000b5ecc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b03      	ldr	r3, [pc, #12]	; (b5edc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5ed6:	9301      	str	r3, [sp, #4]
   b5ed8:	bd08      	pop	{r3, pc}
   b5eda:	0000      	.short	0x0000
   b5edc:	00030278 	.word	0x00030278

000b5ee0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b03      	ldr	r3, [pc, #12]	; (b5ef0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5eea:	9301      	str	r3, [sp, #4]
   b5eec:	bd08      	pop	{r3, pc}
   b5eee:	0000      	.short	0x0000
   b5ef0:	00030278 	.word	0x00030278

000b5ef4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5ef4:	b508      	push	{r3, lr}
   b5ef6:	4b02      	ldr	r3, [pc, #8]	; (b5f00 <os_thread_yield+0xc>)
   b5ef8:	681b      	ldr	r3, [r3, #0]
   b5efa:	68db      	ldr	r3, [r3, #12]
   b5efc:	9301      	str	r3, [sp, #4]
   b5efe:	bd08      	pop	{r3, pc}
   b5f00:	00030248 	.word	0x00030248

000b5f04 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b5f04:	b508      	push	{r3, lr}
   b5f06:	4b02      	ldr	r3, [pc, #8]	; (b5f10 <os_thread_scheduling+0xc>)
   b5f08:	681b      	ldr	r3, [r3, #0]
   b5f0a:	69db      	ldr	r3, [r3, #28]
   b5f0c:	9301      	str	r3, [sp, #4]
   b5f0e:	bd08      	pop	{r3, pc}
   b5f10:	00030248 	.word	0x00030248

000b5f14 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b5f14:	b508      	push	{r3, lr}
   b5f16:	4b02      	ldr	r3, [pc, #8]	; (b5f20 <os_timer_create+0xc>)
   b5f18:	681b      	ldr	r3, [r3, #0]
   b5f1a:	6a1b      	ldr	r3, [r3, #32]
   b5f1c:	9301      	str	r3, [sp, #4]
   b5f1e:	bd08      	pop	{r3, pc}
   b5f20:	00030248 	.word	0x00030248

000b5f24 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b5f24:	b508      	push	{r3, lr}
   b5f26:	4b02      	ldr	r3, [pc, #8]	; (b5f30 <os_timer_destroy+0xc>)
   b5f28:	681b      	ldr	r3, [r3, #0]
   b5f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f2c:	9301      	str	r3, [sp, #4]
   b5f2e:	bd08      	pop	{r3, pc}
   b5f30:	00030248 	.word	0x00030248

000b5f34 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b5f34:	b508      	push	{r3, lr}
   b5f36:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <os_timer_get_id+0xc>)
   b5f38:	681b      	ldr	r3, [r3, #0]
   b5f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f3c:	9301      	str	r3, [sp, #4]
   b5f3e:	bd08      	pop	{r3, pc}
   b5f40:	00030248 	.word	0x00030248

000b5f44 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b5f44:	b508      	push	{r3, lr}
   b5f46:	4b02      	ldr	r3, [pc, #8]	; (b5f50 <os_timer_change+0xc>)
   b5f48:	681b      	ldr	r3, [r3, #0]
   b5f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f4c:	9301      	str	r3, [sp, #4]
   b5f4e:	bd08      	pop	{r3, pc}
   b5f50:	00030248 	.word	0x00030248

000b5f54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5f54:	b508      	push	{r3, lr}
   b5f56:	4b02      	ldr	r3, [pc, #8]	; (b5f60 <os_mutex_recursive_create+0xc>)
   b5f58:	681b      	ldr	r3, [r3, #0]
   b5f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f5c:	9301      	str	r3, [sp, #4]
   b5f5e:	bd08      	pop	{r3, pc}
   b5f60:	00030248 	.word	0x00030248

000b5f64 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5f64:	b508      	push	{r3, lr}
   b5f66:	4b02      	ldr	r3, [pc, #8]	; (b5f70 <os_mutex_recursive_lock+0xc>)
   b5f68:	681b      	ldr	r3, [r3, #0]
   b5f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5f6c:	9301      	str	r3, [sp, #4]
   b5f6e:	bd08      	pop	{r3, pc}
   b5f70:	00030248 	.word	0x00030248

000b5f74 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5f74:	b508      	push	{r3, lr}
   b5f76:	4b02      	ldr	r3, [pc, #8]	; (b5f80 <os_mutex_recursive_unlock+0xc>)
   b5f78:	681b      	ldr	r3, [r3, #0]
   b5f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5f7c:	9301      	str	r3, [sp, #4]
   b5f7e:	bd08      	pop	{r3, pc}
   b5f80:	00030248 	.word	0x00030248

000b5f84 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b5f84:	b508      	push	{r3, lr}
   b5f86:	4b02      	ldr	r3, [pc, #8]	; (b5f90 <os_timer_set_id+0xc>)
   b5f88:	681b      	ldr	r3, [r3, #0]
   b5f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5f8c:	9301      	str	r3, [sp, #4]
   b5f8e:	bd08      	pop	{r3, pc}
   b5f90:	00030248 	.word	0x00030248

000b5f94 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5f94:	b508      	push	{r3, lr}
   b5f96:	4b02      	ldr	r3, [pc, #8]	; (b5fa0 <inet_inet_ntop+0xc>)
   b5f98:	681b      	ldr	r3, [r3, #0]
   b5f9a:	695b      	ldr	r3, [r3, #20]
   b5f9c:	9301      	str	r3, [sp, #4]
   b5f9e:	bd08      	pop	{r3, pc}
   b5fa0:	00030264 	.word	0x00030264

000b5fa4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5fa4:	b508      	push	{r3, lr}
   b5fa6:	4b02      	ldr	r3, [pc, #8]	; (b5fb0 <hal_usart_write+0xc>)
   b5fa8:	681b      	ldr	r3, [r3, #0]
   b5faa:	68db      	ldr	r3, [r3, #12]
   b5fac:	9301      	str	r3, [sp, #4]
   b5fae:	bd08      	pop	{r3, pc}
   b5fb0:	0003023c 	.word	0x0003023c

000b5fb4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5fb4:	b508      	push	{r3, lr}
   b5fb6:	4b02      	ldr	r3, [pc, #8]	; (b5fc0 <hal_usart_available+0xc>)
   b5fb8:	681b      	ldr	r3, [r3, #0]
   b5fba:	691b      	ldr	r3, [r3, #16]
   b5fbc:	9301      	str	r3, [sp, #4]
   b5fbe:	bd08      	pop	{r3, pc}
   b5fc0:	0003023c 	.word	0x0003023c

000b5fc4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5fc4:	b508      	push	{r3, lr}
   b5fc6:	4b02      	ldr	r3, [pc, #8]	; (b5fd0 <hal_usart_read+0xc>)
   b5fc8:	681b      	ldr	r3, [r3, #0]
   b5fca:	695b      	ldr	r3, [r3, #20]
   b5fcc:	9301      	str	r3, [sp, #4]
   b5fce:	bd08      	pop	{r3, pc}
   b5fd0:	0003023c 	.word	0x0003023c

000b5fd4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5fd4:	b508      	push	{r3, lr}
   b5fd6:	4b02      	ldr	r3, [pc, #8]	; (b5fe0 <hal_usart_peek+0xc>)
   b5fd8:	681b      	ldr	r3, [r3, #0]
   b5fda:	699b      	ldr	r3, [r3, #24]
   b5fdc:	9301      	str	r3, [sp, #4]
   b5fde:	bd08      	pop	{r3, pc}
   b5fe0:	0003023c 	.word	0x0003023c

000b5fe4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5fe4:	b508      	push	{r3, lr}
   b5fe6:	4b02      	ldr	r3, [pc, #8]	; (b5ff0 <hal_usart_flush+0xc>)
   b5fe8:	681b      	ldr	r3, [r3, #0]
   b5fea:	69db      	ldr	r3, [r3, #28]
   b5fec:	9301      	str	r3, [sp, #4]
   b5fee:	bd08      	pop	{r3, pc}
   b5ff0:	0003023c 	.word	0x0003023c

000b5ff4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5ff4:	b508      	push	{r3, lr}
   b5ff6:	4b02      	ldr	r3, [pc, #8]	; (b6000 <hal_usart_is_enabled+0xc>)
   b5ff8:	681b      	ldr	r3, [r3, #0]
   b5ffa:	6a1b      	ldr	r3, [r3, #32]
   b5ffc:	9301      	str	r3, [sp, #4]
   b5ffe:	bd08      	pop	{r3, pc}
   b6000:	0003023c 	.word	0x0003023c

000b6004 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b02      	ldr	r3, [pc, #8]	; (b6010 <hal_usart_available_data_for_write+0xc>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b600c:	9301      	str	r3, [sp, #4]
   b600e:	bd08      	pop	{r3, pc}
   b6010:	0003023c 	.word	0x0003023c

000b6014 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6014:	b508      	push	{r3, lr}
   b6016:	4b02      	ldr	r3, [pc, #8]	; (b6020 <hal_usart_init_ex+0xc>)
   b6018:	681b      	ldr	r3, [r3, #0]
   b601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b601c:	9301      	str	r3, [sp, #4]
   b601e:	bd08      	pop	{r3, pc}
   b6020:	0003023c 	.word	0x0003023c

000b6024 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6024:	b508      	push	{r3, lr}
   b6026:	4b02      	ldr	r3, [pc, #8]	; (b6030 <hal_i2c_write+0xc>)
   b6028:	681b      	ldr	r3, [r3, #0]
   b602a:	6a1b      	ldr	r3, [r3, #32]
   b602c:	9301      	str	r3, [sp, #4]
   b602e:	bd08      	pop	{r3, pc}
   b6030:	00030228 	.word	0x00030228

000b6034 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6034:	b508      	push	{r3, lr}
   b6036:	4b02      	ldr	r3, [pc, #8]	; (b6040 <hal_i2c_available+0xc>)
   b6038:	681b      	ldr	r3, [r3, #0]
   b603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	bd08      	pop	{r3, pc}
   b6040:	00030228 	.word	0x00030228

000b6044 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b02      	ldr	r3, [pc, #8]	; (b6050 <hal_i2c_read+0xc>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b604c:	9301      	str	r3, [sp, #4]
   b604e:	bd08      	pop	{r3, pc}
   b6050:	00030228 	.word	0x00030228

000b6054 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b02      	ldr	r3, [pc, #8]	; (b6060 <hal_i2c_peek+0xc>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b605c:	9301      	str	r3, [sp, #4]
   b605e:	bd08      	pop	{r3, pc}
   b6060:	00030228 	.word	0x00030228

000b6064 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6064:	b508      	push	{r3, lr}
   b6066:	4b02      	ldr	r3, [pc, #8]	; (b6070 <hal_i2c_flush+0xc>)
   b6068:	681b      	ldr	r3, [r3, #0]
   b606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b606c:	9301      	str	r3, [sp, #4]
   b606e:	bd08      	pop	{r3, pc}
   b6070:	00030228 	.word	0x00030228

000b6074 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6074:	b508      	push	{r3, lr}
   b6076:	4b02      	ldr	r3, [pc, #8]	; (b6080 <hal_i2c_is_enabled+0xc>)
   b6078:	681b      	ldr	r3, [r3, #0]
   b607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b607c:	9301      	str	r3, [sp, #4]
   b607e:	bd08      	pop	{r3, pc}
   b6080:	00030228 	.word	0x00030228

000b6084 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6084:	b508      	push	{r3, lr}
   b6086:	4b02      	ldr	r3, [pc, #8]	; (b6090 <hal_i2c_init+0xc>)
   b6088:	681b      	ldr	r3, [r3, #0]
   b608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b608c:	9301      	str	r3, [sp, #4]
   b608e:	bd08      	pop	{r3, pc}
   b6090:	00030228 	.word	0x00030228

000b6094 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6094:	b508      	push	{r3, lr}
   b6096:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <hal_spi_init+0xc>)
   b6098:	681b      	ldr	r3, [r3, #0]
   b609a:	69db      	ldr	r3, [r3, #28]
   b609c:	9301      	str	r3, [sp, #4]
   b609e:	bd08      	pop	{r3, pc}
   b60a0:	00030230 	.word	0x00030230

000b60a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <hal_spi_is_enabled+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	6a1b      	ldr	r3, [r3, #32]
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	00030230 	.word	0x00030230

000b60b4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <HAL_USB_USART_Init+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	681b      	ldr	r3, [r3, #0]
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	0003024c 	.word	0x0003024c

000b60c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <HAL_USB_USART_Available_Data+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	691b      	ldr	r3, [r3, #16]
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	0003024c 	.word	0x0003024c

000b60d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	695b      	ldr	r3, [r3, #20]
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	0003024c 	.word	0x0003024c

000b60e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <HAL_USB_USART_Receive_Data+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	699b      	ldr	r3, [r3, #24]
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	0003024c 	.word	0x0003024c

000b60f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <HAL_USB_USART_Send_Data+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	69db      	ldr	r3, [r3, #28]
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	0003024c 	.word	0x0003024c

000b6104 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <HAL_USB_USART_Flush_Data+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	6a1b      	ldr	r3, [r3, #32]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	0003024c 	.word	0x0003024c

000b6114 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <wlan_connected_info+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030274 	.word	0x00030274

000b6124 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <panic_+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	00030260 	.word	0x00030260

000b6134 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <log_message+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030260 	.word	0x00030260

000b6144 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <system_mode+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	681b      	ldr	r3, [r3, #0]
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030220 	.word	0x00030220

000b6154 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <set_system_mode+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	685b      	ldr	r3, [r3, #4]
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030220 	.word	0x00030220

000b6164 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <system_delay_ms+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	695b      	ldr	r3, [r3, #20]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030220 	.word	0x00030220

000b6174 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <system_thread_set_state+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	00030220 	.word	0x00030220

000b6184 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <application_thread_current+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	00030220 	.word	0x00030220

000b6194 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <application_thread_invoke+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	00030220 	.word	0x00030220

000b61a4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <system_thread_get_state+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	00030220 	.word	0x00030220

000b61b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b03      	ldr	r3, [pc, #12]	; (b61c4 <system_ctrl_set_app_request_handler+0x10>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b61be:	9301      	str	r3, [sp, #4]
   b61c0:	bd08      	pop	{r3, pc}
   b61c2:	0000      	.short	0x0000
   b61c4:	00030220 	.word	0x00030220

000b61c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b03      	ldr	r3, [pc, #12]	; (b61d8 <system_ctrl_set_result+0x10>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b61d2:	9301      	str	r3, [sp, #4]
   b61d4:	bd08      	pop	{r3, pc}
   b61d6:	0000      	.short	0x0000
   b61d8:	00030220 	.word	0x00030220

000b61dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b02      	ldr	r3, [pc, #8]	; (b61e8 <network_connect+0xc>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	685b      	ldr	r3, [r3, #4]
   b61e4:	9301      	str	r3, [sp, #4]
   b61e6:	bd08      	pop	{r3, pc}
   b61e8:	00030240 	.word	0x00030240

000b61ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b61ec:	b508      	push	{r3, lr}
   b61ee:	4b02      	ldr	r3, [pc, #8]	; (b61f8 <network_connecting+0xc>)
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	689b      	ldr	r3, [r3, #8]
   b61f4:	9301      	str	r3, [sp, #4]
   b61f6:	bd08      	pop	{r3, pc}
   b61f8:	00030240 	.word	0x00030240

000b61fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b61fc:	b508      	push	{r3, lr}
   b61fe:	4b02      	ldr	r3, [pc, #8]	; (b6208 <network_disconnect+0xc>)
   b6200:	681b      	ldr	r3, [r3, #0]
   b6202:	68db      	ldr	r3, [r3, #12]
   b6204:	9301      	str	r3, [sp, #4]
   b6206:	bd08      	pop	{r3, pc}
   b6208:	00030240 	.word	0x00030240

000b620c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b620c:	b508      	push	{r3, lr}
   b620e:	4b02      	ldr	r3, [pc, #8]	; (b6218 <network_ready+0xc>)
   b6210:	681b      	ldr	r3, [r3, #0]
   b6212:	691b      	ldr	r3, [r3, #16]
   b6214:	9301      	str	r3, [sp, #4]
   b6216:	bd08      	pop	{r3, pc}
   b6218:	00030240 	.word	0x00030240

000b621c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b621c:	b508      	push	{r3, lr}
   b621e:	4b02      	ldr	r3, [pc, #8]	; (b6228 <network_on+0xc>)
   b6220:	681b      	ldr	r3, [r3, #0]
   b6222:	695b      	ldr	r3, [r3, #20]
   b6224:	9301      	str	r3, [sp, #4]
   b6226:	bd08      	pop	{r3, pc}
   b6228:	00030240 	.word	0x00030240

000b622c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b622c:	b508      	push	{r3, lr}
   b622e:	4b02      	ldr	r3, [pc, #8]	; (b6238 <network_off+0xc>)
   b6230:	681b      	ldr	r3, [r3, #0]
   b6232:	699b      	ldr	r3, [r3, #24]
   b6234:	9301      	str	r3, [sp, #4]
   b6236:	bd08      	pop	{r3, pc}
   b6238:	00030240 	.word	0x00030240

000b623c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b623c:	b508      	push	{r3, lr}
   b623e:	4b02      	ldr	r3, [pc, #8]	; (b6248 <network_listen+0xc>)
   b6240:	681b      	ldr	r3, [r3, #0]
   b6242:	69db      	ldr	r3, [r3, #28]
   b6244:	9301      	str	r3, [sp, #4]
   b6246:	bd08      	pop	{r3, pc}
   b6248:	00030240 	.word	0x00030240

000b624c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b624c:	b508      	push	{r3, lr}
   b624e:	4b02      	ldr	r3, [pc, #8]	; (b6258 <network_listening+0xc>)
   b6250:	681b      	ldr	r3, [r3, #0]
   b6252:	6a1b      	ldr	r3, [r3, #32]
   b6254:	9301      	str	r3, [sp, #4]
   b6256:	bd08      	pop	{r3, pc}
   b6258:	00030240 	.word	0x00030240

000b625c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b625c:	b508      	push	{r3, lr}
   b625e:	4b02      	ldr	r3, [pc, #8]	; (b6268 <network_set_listen_timeout+0xc>)
   b6260:	681b      	ldr	r3, [r3, #0]
   b6262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	bd08      	pop	{r3, pc}
   b6268:	00030240 	.word	0x00030240

000b626c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b626c:	b508      	push	{r3, lr}
   b626e:	4b02      	ldr	r3, [pc, #8]	; (b6278 <network_get_listen_timeout+0xc>)
   b6270:	681b      	ldr	r3, [r3, #0]
   b6272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6274:	9301      	str	r3, [sp, #4]
   b6276:	bd08      	pop	{r3, pc}
   b6278:	00030240 	.word	0x00030240

000b627c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b02      	ldr	r3, [pc, #8]	; (b6288 <network_is_on+0xc>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6284:	9301      	str	r3, [sp, #4]
   b6286:	bd08      	pop	{r3, pc}
   b6288:	00030240 	.word	0x00030240

000b628c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b02      	ldr	r3, [pc, #8]	; (b6298 <network_is_off+0xc>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6294:	9301      	str	r3, [sp, #4]
   b6296:	bd08      	pop	{r3, pc}
   b6298:	00030240 	.word	0x00030240

000b629c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b629c:	b508      	push	{r3, lr}
   b629e:	4b02      	ldr	r3, [pc, #8]	; (b62a8 <spark_process+0xc>)
   b62a0:	681b      	ldr	r3, [r3, #0]
   b62a2:	689b      	ldr	r3, [r3, #8]
   b62a4:	9301      	str	r3, [sp, #4]
   b62a6:	bd08      	pop	{r3, pc}
   b62a8:	00030244 	.word	0x00030244

000b62ac <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b62ac:	b508      	push	{r3, lr}
   b62ae:	4b02      	ldr	r3, [pc, #8]	; (b62b8 <spark_cloud_flag_connected+0xc>)
   b62b0:	681b      	ldr	r3, [r3, #0]
   b62b2:	695b      	ldr	r3, [r3, #20]
   b62b4:	9301      	str	r3, [sp, #4]
   b62b6:	bd08      	pop	{r3, pc}
   b62b8:	00030244 	.word	0x00030244

000b62bc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b62bc:	b508      	push	{r3, lr}
   b62be:	4b02      	ldr	r3, [pc, #8]	; (b62c8 <spark_send_event+0xc>)
   b62c0:	681b      	ldr	r3, [r3, #0]
   b62c2:	6a1b      	ldr	r3, [r3, #32]
   b62c4:	9301      	str	r3, [sp, #4]
   b62c6:	bd08      	pop	{r3, pc}
   b62c8:	00030244 	.word	0x00030244

000b62cc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b62cc:	b508      	push	{r3, lr}
   b62ce:	4b02      	ldr	r3, [pc, #8]	; (b62d8 <spark_subscribe+0xc>)
   b62d0:	681b      	ldr	r3, [r3, #0]
   b62d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62d4:	9301      	str	r3, [sp, #4]
   b62d6:	bd08      	pop	{r3, pc}
   b62d8:	00030244 	.word	0x00030244

000b62dc <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b62dc:	b508      	push	{r3, lr}
   b62de:	4b02      	ldr	r3, [pc, #8]	; (b62e8 <spark_sync_time_pending+0xc>)
   b62e0:	681b      	ldr	r3, [r3, #0]
   b62e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62e4:	9301      	str	r3, [sp, #4]
   b62e6:	bd08      	pop	{r3, pc}
   b62e8:	00030244 	.word	0x00030244

000b62ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b62ec:	b508      	push	{r3, lr}
   b62ee:	4b02      	ldr	r3, [pc, #8]	; (b62f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b62f4:	9301      	str	r3, [sp, #4]
   b62f6:	bd08      	pop	{r3, pc}
   b62f8:	00030244 	.word	0x00030244

000b62fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b62fc:	b508      	push	{r3, lr}
   b62fe:	4b02      	ldr	r3, [pc, #8]	; (b6308 <malloc+0xc>)
   b6300:	681b      	ldr	r3, [r3, #0]
   b6302:	681b      	ldr	r3, [r3, #0]
   b6304:	9301      	str	r3, [sp, #4]
   b6306:	bd08      	pop	{r3, pc}
   b6308:	0003021c 	.word	0x0003021c

000b630c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b630c:	b508      	push	{r3, lr}
   b630e:	4b02      	ldr	r3, [pc, #8]	; (b6318 <free+0xc>)
   b6310:	681b      	ldr	r3, [r3, #0]
   b6312:	685b      	ldr	r3, [r3, #4]
   b6314:	9301      	str	r3, [sp, #4]
   b6316:	bd08      	pop	{r3, pc}
   b6318:	0003021c 	.word	0x0003021c

000b631c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b631c:	b508      	push	{r3, lr}
   b631e:	4b02      	ldr	r3, [pc, #8]	; (b6328 <realloc+0xc>)
   b6320:	681b      	ldr	r3, [r3, #0]
   b6322:	689b      	ldr	r3, [r3, #8]
   b6324:	9301      	str	r3, [sp, #4]
   b6326:	bd08      	pop	{r3, pc}
   b6328:	0003021c 	.word	0x0003021c

000b632c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b632c:	b508      	push	{r3, lr}
   b632e:	4b02      	ldr	r3, [pc, #8]	; (b6338 <sprintf+0xc>)
   b6330:	681b      	ldr	r3, [r3, #0]
   b6332:	68db      	ldr	r3, [r3, #12]
   b6334:	9301      	str	r3, [sp, #4]
   b6336:	bd08      	pop	{r3, pc}
   b6338:	0003021c 	.word	0x0003021c

000b633c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b633c:	b508      	push	{r3, lr}
   b633e:	4b02      	ldr	r3, [pc, #8]	; (b6348 <vsnprintf+0xc>)
   b6340:	681b      	ldr	r3, [r3, #0]
   b6342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6344:	9301      	str	r3, [sp, #4]
   b6346:	bd08      	pop	{r3, pc}
   b6348:	0003021c 	.word	0x0003021c

000b634c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b634c:	b508      	push	{r3, lr}
   b634e:	4b02      	ldr	r3, [pc, #8]	; (b6358 <abort+0xc>)
   b6350:	681b      	ldr	r3, [r3, #0]
   b6352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6354:	9301      	str	r3, [sp, #4]
   b6356:	bd08      	pop	{r3, pc}
   b6358:	0003021c 	.word	0x0003021c

000b635c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b635c:	b508      	push	{r3, lr}
   b635e:	4b02      	ldr	r3, [pc, #8]	; (b6368 <_malloc_r+0xc>)
   b6360:	681b      	ldr	r3, [r3, #0]
   b6362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6364:	9301      	str	r3, [sp, #4]
   b6366:	bd08      	pop	{r3, pc}
   b6368:	0003021c 	.word	0x0003021c

000b636c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b636c:	b508      	push	{r3, lr}
   b636e:	4b02      	ldr	r3, [pc, #8]	; (b6378 <__errno+0xc>)
   b6370:	681b      	ldr	r3, [r3, #0]
   b6372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6374:	9301      	str	r3, [sp, #4]
   b6376:	bd08      	pop	{r3, pc}
   b6378:	0003021c 	.word	0x0003021c

000b637c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b637c:	b508      	push	{r3, lr}
   b637e:	4b02      	ldr	r3, [pc, #8]	; (b6388 <__assert_func+0xc>)
   b6380:	681b      	ldr	r3, [r3, #0]
   b6382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6384:	9301      	str	r3, [sp, #4]
   b6386:	bd08      	pop	{r3, pc}
   b6388:	0003021c 	.word	0x0003021c

000b638c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b638c:	b508      	push	{r3, lr}
   b638e:	4b02      	ldr	r3, [pc, #8]	; (b6398 <newlib_impure_ptr_callback+0xc>)
   b6390:	681b      	ldr	r3, [r3, #0]
   b6392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6394:	9301      	str	r3, [sp, #4]
   b6396:	bd08      	pop	{r3, pc}
   b6398:	0003021c 	.word	0x0003021c

000b639c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b639c:	b508      	push	{r3, lr}
   b639e:	4b02      	ldr	r3, [pc, #8]	; (b63a8 <localtime_r+0xc>)
   b63a0:	681b      	ldr	r3, [r3, #0]
   b63a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b63a4:	9301      	str	r3, [sp, #4]
   b63a6:	bd08      	pop	{r3, pc}
   b63a8:	0003021c 	.word	0x0003021c

000b63ac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b63ac:	2200      	movs	r2, #0
   b63ae:	6840      	ldr	r0, [r0, #4]
   b63b0:	4611      	mov	r1, r2
   b63b2:	f7ff bf4b 	b.w	b624c <network_listening>

000b63b6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b63b6:	2200      	movs	r2, #0
   b63b8:	6840      	ldr	r0, [r0, #4]
   b63ba:	4611      	mov	r1, r2
   b63bc:	f7ff bf56 	b.w	b626c <network_get_listen_timeout>

000b63c0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b63c0:	6840      	ldr	r0, [r0, #4]
   b63c2:	2200      	movs	r2, #0
   b63c4:	f7ff bf4a 	b.w	b625c <network_set_listen_timeout>

000b63c8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b63c8:	6840      	ldr	r0, [r0, #4]
   b63ca:	2200      	movs	r2, #0
   b63cc:	f081 0101 	eor.w	r1, r1, #1
   b63d0:	f7ff bf34 	b.w	b623c <network_listen>

000b63d4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b63d4:	2300      	movs	r3, #0
   b63d6:	6840      	ldr	r0, [r0, #4]
   b63d8:	461a      	mov	r2, r3
   b63da:	4619      	mov	r1, r3
   b63dc:	f7ff bf26 	b.w	b622c <network_off>

000b63e0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b63e0:	2300      	movs	r3, #0
   b63e2:	6840      	ldr	r0, [r0, #4]
   b63e4:	461a      	mov	r2, r3
   b63e6:	4619      	mov	r1, r3
   b63e8:	f7ff bf18 	b.w	b621c <network_on>

000b63ec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b63ec:	2200      	movs	r2, #0
   b63ee:	6840      	ldr	r0, [r0, #4]
   b63f0:	4611      	mov	r1, r2
   b63f2:	f7ff bf0b 	b.w	b620c <network_ready>

000b63f6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b63f6:	2200      	movs	r2, #0
   b63f8:	6840      	ldr	r0, [r0, #4]
   b63fa:	4611      	mov	r1, r2
   b63fc:	f7ff bef6 	b.w	b61ec <network_connecting>

000b6400 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6400:	6840      	ldr	r0, [r0, #4]
   b6402:	2200      	movs	r2, #0
   b6404:	2102      	movs	r1, #2
   b6406:	f7ff bef9 	b.w	b61fc <network_disconnect>

000b640a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b640a:	2300      	movs	r3, #0
   b640c:	6840      	ldr	r0, [r0, #4]
   b640e:	461a      	mov	r2, r3
   b6410:	f7ff bee4 	b.w	b61dc <network_connect>

000b6414 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6414:	4b02      	ldr	r3, [pc, #8]	; (b6420 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6416:	2203      	movs	r2, #3
   b6418:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b641a:	4a02      	ldr	r2, [pc, #8]	; (b6424 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b641c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b641e:	4770      	bx	lr
   b6420:	2003e670 	.word	0x2003e670
   b6424:	000bb6d0 	.word	0x000bb6d0

000b6428 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6428:	b510      	push	{r4, lr}
   b642a:	4604      	mov	r4, r0
   b642c:	4608      	mov	r0, r1
{
    _spi = spi;
   b642e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6430:	f7ff fe30 	bl	b6094 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6434:	2300      	movs	r3, #0
   b6436:	6063      	str	r3, [r4, #4]
}
   b6438:	4620      	mov	r0, r4
   b643a:	bd10      	pop	{r4, pc}

000b643c <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b643c:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b643e:	2420      	movs	r4, #32
{
   b6440:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b6442:	4622      	mov	r2, r4
   b6444:	2100      	movs	r1, #0
   b6446:	4668      	mov	r0, sp
   b6448:	f002 fddb 	bl	b9002 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b644c:	2100      	movs	r1, #0
   b644e:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b6450:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b6454:	f7ff fcc4 	bl	b5de0 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b6458:	9801      	ldr	r0, [sp, #4]
   b645a:	b008      	add	sp, #32
   b645c:	bd10      	pop	{r4, pc}
	...

000b6460 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6460:	4b05      	ldr	r3, [pc, #20]	; (b6478 <_GLOBAL__sub_I_System+0x18>)
   b6462:	2202      	movs	r2, #2
   b6464:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6466:	4b05      	ldr	r3, [pc, #20]	; (b647c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6468:	4a05      	ldr	r2, [pc, #20]	; (b6480 <_GLOBAL__sub_I_System+0x20>)
   b646a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b646c:	2000      	movs	r0, #0
   b646e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6472:	f7ff be6f 	b.w	b6154 <set_system_mode>
   b6476:	bf00      	nop
   b6478:	2003e684 	.word	0x2003e684
   b647c:	2003e678 	.word	0x2003e678
   b6480:	ffff0000 	.word	0xffff0000

000b6484 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6484:	b510      	push	{r4, lr}
   b6486:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6488:	f7fe fa9c 	bl	b49c4 <strlen>
   b648c:	3801      	subs	r0, #1
   b648e:	1823      	adds	r3, r4, r0
   b6490:	4620      	mov	r0, r4
	while(i<j){
   b6492:	4283      	cmp	r3, r0
   b6494:	d906      	bls.n	b64a4 <_Z11str_reversePc+0x20>
		c = *i;
   b6496:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6498:	7819      	ldrb	r1, [r3, #0]
   b649a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b649e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b64a2:	e7f6      	b.n	b6492 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b64a4:	bd10      	pop	{r4, pc}

000b64a6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b64a6:	b570      	push	{r4, r5, r6, lr}
   b64a8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b64aa:	1e91      	subs	r1, r2, #2
   b64ac:	2922      	cmp	r1, #34	; 0x22
   b64ae:	d81d      	bhi.n	b64ec <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b64b0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b64b2:	b930      	cbnz	r0, b64c2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b64b4:	4423      	add	r3, r4
            *ptr++ = '0';
   b64b6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b64b8:	429d      	cmp	r5, r3
   b64ba:	d210      	bcs.n	b64de <ultoa+0x38>
            *ptr++ = '0';
   b64bc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b64c0:	e7fa      	b.n	b64b8 <ultoa+0x12>
            result.quot = a/radix;
   b64c2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b64c6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b64ca:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b64cc:	2809      	cmp	r0, #9
                *ptr += '0';
   b64ce:	bf94      	ite	ls
   b64d0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b64d2:	3157      	addhi	r1, #87	; 0x57
   b64d4:	b2c9      	uxtb	r1, r1
   b64d6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b64da:	4630      	mov	r0, r6
	while(a){
   b64dc:	e7e9      	b.n	b64b2 <ultoa+0xc>

	*ptr = '\0';
   b64de:	2300      	movs	r3, #0
	str_reverse(buffer);
   b64e0:	4620      	mov	r0, r4
	*ptr = '\0';
   b64e2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b64e4:	f7ff ffce 	bl	b6484 <_Z11str_reversePc>
	return buffer;
   b64e8:	4620      	mov	r0, r4
}
   b64ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b64ec:	2000      	movs	r0, #0
   b64ee:	e7fc      	b.n	b64ea <ultoa+0x44>

000b64f0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b64f0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b64f2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b64f4:	460c      	mov	r4, r1
   b64f6:	4615      	mov	r5, r2
	if(a<0){
   b64f8:	da0e      	bge.n	b6518 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b64fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b64fe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6502:	bf14      	ite	ne
   b6504:	4258      	negne	r0, r3
   b6506:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b6508:	2301      	movs	r3, #1
		*buffer = '-';
   b650a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b650c:	462a      	mov	r2, r5
   b650e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b6510:	f7ff ffc9 	bl	b64a6 <ultoa>
	}
	return buffer;
}
   b6514:	4620      	mov	r0, r4
   b6516:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b6518:	2301      	movs	r3, #1
   b651a:	e7f9      	b.n	b6510 <itoa+0x20>

000b651c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b651c:	b510      	push	{r4, lr}
   b651e:	4604      	mov	r4, r0
{
	free(buffer);
   b6520:	6800      	ldr	r0, [r0, #0]
   b6522:	f7ff fef3 	bl	b630c <free>
}
   b6526:	4620      	mov	r0, r4
   b6528:	bd10      	pop	{r4, pc}

000b652a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b652a:	b510      	push	{r4, lr}
   b652c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b652e:	6800      	ldr	r0, [r0, #0]
   b6530:	b108      	cbz	r0, b6536 <_ZN6String10invalidateEv+0xc>
   b6532:	f7ff feeb 	bl	b630c <free>
	buffer = NULL;
   b6536:	2300      	movs	r3, #0
	capacity = len = 0;
   b6538:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b653c:	6023      	str	r3, [r4, #0]
}
   b653e:	bd10      	pop	{r4, pc}

000b6540 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6540:	b538      	push	{r3, r4, r5, lr}
   b6542:	4604      	mov	r4, r0
   b6544:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6546:	6800      	ldr	r0, [r0, #0]
   b6548:	3101      	adds	r1, #1
   b654a:	f7ff fee7 	bl	b631c <realloc>
	if (newbuffer) {
   b654e:	b110      	cbz	r0, b6556 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6550:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6554:	2001      	movs	r0, #1
	}
	return 0;
}
   b6556:	bd38      	pop	{r3, r4, r5, pc}

000b6558 <_ZN6String7reserveEj>:
{
   b6558:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b655a:	6803      	ldr	r3, [r0, #0]
{
   b655c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b655e:	b123      	cbz	r3, b656a <_ZN6String7reserveEj+0x12>
   b6560:	6843      	ldr	r3, [r0, #4]
   b6562:	428b      	cmp	r3, r1
   b6564:	d301      	bcc.n	b656a <_ZN6String7reserveEj+0x12>
   b6566:	2001      	movs	r0, #1
}
   b6568:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b656a:	4620      	mov	r0, r4
   b656c:	f7ff ffe8 	bl	b6540 <_ZN6String12changeBufferEj>
   b6570:	2800      	cmp	r0, #0
   b6572:	d0f9      	beq.n	b6568 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6574:	68a3      	ldr	r3, [r4, #8]
   b6576:	2b00      	cmp	r3, #0
   b6578:	d1f5      	bne.n	b6566 <_ZN6String7reserveEj+0xe>
   b657a:	6822      	ldr	r2, [r4, #0]
   b657c:	7013      	strb	r3, [r2, #0]
   b657e:	e7f2      	b.n	b6566 <_ZN6String7reserveEj+0xe>

000b6580 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6580:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6582:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6584:	4611      	mov	r1, r2
   b6586:	9201      	str	r2, [sp, #4]
{
   b6588:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b658a:	f7ff ffe5 	bl	b6558 <_ZN6String7reserveEj>
   b658e:	9a01      	ldr	r2, [sp, #4]
   b6590:	b928      	cbnz	r0, b659e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6592:	4620      	mov	r0, r4
   b6594:	f7ff ffc9 	bl	b652a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6598:	4620      	mov	r0, r4
   b659a:	b003      	add	sp, #12
   b659c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b659e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b65a0:	4629      	mov	r1, r5
   b65a2:	6820      	ldr	r0, [r4, #0]
   b65a4:	f002 fd05 	bl	b8fb2 <memcpy>
	buffer[len] = 0;
   b65a8:	6822      	ldr	r2, [r4, #0]
   b65aa:	68a3      	ldr	r3, [r4, #8]
   b65ac:	2100      	movs	r1, #0
   b65ae:	54d1      	strb	r1, [r2, r3]
	return *this;
   b65b0:	e7f2      	b.n	b6598 <_ZN6String4copyEPKcj+0x18>

000b65b2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b65b2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b65b4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b65b6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b65ba:	4604      	mov	r4, r0
	len = 0;
   b65bc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b65be:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b65c0:	b141      	cbz	r1, b65d4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b65c2:	4608      	mov	r0, r1
   b65c4:	9101      	str	r1, [sp, #4]
   b65c6:	f7fe f9fd 	bl	b49c4 <strlen>
   b65ca:	9901      	ldr	r1, [sp, #4]
   b65cc:	4602      	mov	r2, r0
   b65ce:	4620      	mov	r0, r4
   b65d0:	f7ff ffd6 	bl	b6580 <_ZN6String4copyEPKcj>
}
   b65d4:	4620      	mov	r0, r4
   b65d6:	b002      	add	sp, #8
   b65d8:	bd10      	pop	{r4, pc}

000b65da <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b65da:	b538      	push	{r3, r4, r5, lr}
   b65dc:	4605      	mov	r5, r0
	if (buffer) {
   b65de:	6800      	ldr	r0, [r0, #0]
{
   b65e0:	460c      	mov	r4, r1
	if (buffer) {
   b65e2:	b168      	cbz	r0, b6600 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b65e4:	686a      	ldr	r2, [r5, #4]
   b65e6:	688b      	ldr	r3, [r1, #8]
   b65e8:	429a      	cmp	r2, r3
   b65ea:	d307      	bcc.n	b65fc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b65ec:	6809      	ldr	r1, [r1, #0]
   b65ee:	f002 fd4e 	bl	b908e <strcpy>
			len = rhs.len;
   b65f2:	68a3      	ldr	r3, [r4, #8]
   b65f4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b65f6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b65f8:	60a3      	str	r3, [r4, #8]
}
   b65fa:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b65fc:	f7ff fe86 	bl	b630c <free>
	buffer = rhs.buffer;
   b6600:	6823      	ldr	r3, [r4, #0]
   b6602:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6604:	6863      	ldr	r3, [r4, #4]
   b6606:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6608:	68a3      	ldr	r3, [r4, #8]
   b660a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b660c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b660e:	e9c4 3300 	strd	r3, r3, [r4]
   b6612:	e7f1      	b.n	b65f8 <_ZN6String4moveERS_+0x1e>

000b6614 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b6614:	4288      	cmp	r0, r1
{
   b6616:	b510      	push	{r4, lr}
   b6618:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b661a:	d001      	beq.n	b6620 <_ZN6StringaSEOS_+0xc>
   b661c:	f7ff ffdd 	bl	b65da <_ZN6String4moveERS_>
	return *this;
}
   b6620:	4620      	mov	r0, r4
   b6622:	bd10      	pop	{r4, pc}

000b6624 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6624:	b513      	push	{r0, r1, r4, lr}
   b6626:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6628:	b159      	cbz	r1, b6642 <_ZN6StringaSEPKc+0x1e>
   b662a:	4608      	mov	r0, r1
   b662c:	9101      	str	r1, [sp, #4]
   b662e:	f7fe f9c9 	bl	b49c4 <strlen>
   b6632:	9901      	ldr	r1, [sp, #4]
   b6634:	4602      	mov	r2, r0
   b6636:	4620      	mov	r0, r4
   b6638:	f7ff ffa2 	bl	b6580 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b663c:	4620      	mov	r0, r4
   b663e:	b002      	add	sp, #8
   b6640:	bd10      	pop	{r4, pc}
	else invalidate();
   b6642:	f7ff ff72 	bl	b652a <_ZN6String10invalidateEv>
   b6646:	e7f9      	b.n	b663c <_ZN6StringaSEPKc+0x18>

000b6648 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6648:	b510      	push	{r4, lr}
   b664a:	4604      	mov	r4, r0
   b664c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b664e:	2300      	movs	r3, #0
	capacity = 0;
   b6650:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6654:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6656:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6658:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b665a:	a901      	add	r1, sp, #4
   b665c:	f7ff ff48 	bl	b64f0 <itoa>
	*this = buf;
   b6660:	a901      	add	r1, sp, #4
   b6662:	4620      	mov	r0, r4
   b6664:	f7ff ffde 	bl	b6624 <_ZN6StringaSEPKc>
}
   b6668:	4620      	mov	r0, r4
   b666a:	b00a      	add	sp, #40	; 0x28
   b666c:	bd10      	pop	{r4, pc}

000b666e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b666e:	b570      	push	{r4, r5, r6, lr}
   b6670:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6672:	460e      	mov	r6, r1
   b6674:	b909      	cbnz	r1, b667a <_ZN6String6concatEPKcj+0xc>
   b6676:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6678:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b667a:	b16a      	cbz	r2, b6698 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b667c:	6884      	ldr	r4, [r0, #8]
   b667e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6680:	4621      	mov	r1, r4
   b6682:	f7ff ff69 	bl	b6558 <_ZN6String7reserveEj>
   b6686:	2800      	cmp	r0, #0
   b6688:	d0f5      	beq.n	b6676 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b668a:	6828      	ldr	r0, [r5, #0]
   b668c:	68ab      	ldr	r3, [r5, #8]
   b668e:	4631      	mov	r1, r6
   b6690:	4418      	add	r0, r3
   b6692:	f002 fcfc 	bl	b908e <strcpy>
	len = newlen;
   b6696:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6698:	2001      	movs	r0, #1
   b669a:	e7ed      	b.n	b6678 <_ZN6String6concatEPKcj+0xa>

000b669c <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b669c:	688a      	ldr	r2, [r1, #8]
   b669e:	6809      	ldr	r1, [r1, #0]
   b66a0:	f7ff bfe5 	b.w	b666e <_ZN6String6concatEPKcj>

000b66a4 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b66a4:	b513      	push	{r0, r1, r4, lr}
   b66a6:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b66a8:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b66aa:	b151      	cbz	r1, b66c2 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b66ac:	9101      	str	r1, [sp, #4]
   b66ae:	f7fe f989 	bl	b49c4 <strlen>
   b66b2:	9901      	ldr	r1, [sp, #4]
   b66b4:	4602      	mov	r2, r0
   b66b6:	4620      	mov	r0, r4
}
   b66b8:	b002      	add	sp, #8
   b66ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b66be:	f7ff bfd6 	b.w	b666e <_ZN6String6concatEPKcj>
}
   b66c2:	b002      	add	sp, #8
   b66c4:	bd10      	pop	{r4, pc}
	...

000b66c8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b66c8:	b40e      	push	{r1, r2, r3}
   b66ca:	b570      	push	{r4, r5, r6, lr}
   b66cc:	b087      	sub	sp, #28
   b66ce:	ad0b      	add	r5, sp, #44	; 0x2c
   b66d0:	4604      	mov	r4, r0
   b66d2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b66d6:	9201      	str	r2, [sp, #4]
   b66d8:	462b      	mov	r3, r5
   b66da:	2105      	movs	r1, #5
   b66dc:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b66de:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b66e0:	f7ff fe2c 	bl	b633c <vsnprintf>
    va_end(marker);

    String result;
   b66e4:	490b      	ldr	r1, [pc, #44]	; (b6714 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b66e6:	4606      	mov	r6, r0
    String result;
   b66e8:	4620      	mov	r0, r4
   b66ea:	f7ff ff62 	bl	b65b2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b66ee:	4631      	mov	r1, r6
   b66f0:	4620      	mov	r0, r4
   b66f2:	f7ff ff31 	bl	b6558 <_ZN6String7reserveEj>
    if (result.buffer) {
   b66f6:	6820      	ldr	r0, [r4, #0]
   b66f8:	b130      	cbz	r0, b6708 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b66fa:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b66fc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b66fe:	462b      	mov	r3, r5
   b6700:	1c71      	adds	r1, r6, #1
   b6702:	f7ff fe1b 	bl	b633c <vsnprintf>
        va_end(marker);
        result.len = n;
   b6706:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6708:	4620      	mov	r0, r4
   b670a:	b007      	add	sp, #28
   b670c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6710:	b003      	add	sp, #12
   b6712:	4770      	bx	lr
   b6714:	000bb499 	.word	0x000bb499

000b6718 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6718:	4770      	bx	lr

000b671a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b671a:	4770      	bx	lr

000b671c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b671c:	4770      	bx	lr

000b671e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b671e:	4770      	bx	lr

000b6720 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6720:	4b06      	ldr	r3, [pc, #24]	; (b673c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6722:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6724:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6726:	f100 040c 	add.w	r4, r0, #12
	    ||
   b672a:	d005      	beq.n	b6738 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b672c:	4608      	mov	r0, r1
   b672e:	f002 fb11 	bl	b8d54 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6732:	2800      	cmp	r0, #0
   b6734:	bf08      	it	eq
   b6736:	2400      	moveq	r4, #0
      }
   b6738:	4620      	mov	r0, r4
   b673a:	bd10      	pop	{r4, pc}
   b673c:	000bb880 	.word	0x000bb880

000b6740 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6740:	4b06      	ldr	r3, [pc, #24]	; (b675c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6742:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6744:	b510      	push	{r4, lr}
   b6746:	f100 040c 	add.w	r4, r0, #12
	    ||
   b674a:	d005      	beq.n	b6758 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b674c:	4608      	mov	r0, r1
   b674e:	f002 fb01 	bl	b8d54 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6752:	2800      	cmp	r0, #0
   b6754:	bf08      	it	eq
   b6756:	2400      	moveq	r4, #0
      }
   b6758:	4620      	mov	r0, r4
   b675a:	bd10      	pop	{r4, pc}
   b675c:	000bb880 	.word	0x000bb880

000b6760 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6760:	4b06      	ldr	r3, [pc, #24]	; (b677c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6762:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6764:	b510      	push	{r4, lr}
   b6766:	f100 040c 	add.w	r4, r0, #12
	    ||
   b676a:	d005      	beq.n	b6778 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b676c:	4608      	mov	r0, r1
   b676e:	f002 faf1 	bl	b8d54 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6772:	2800      	cmp	r0, #0
   b6774:	bf08      	it	eq
   b6776:	2400      	moveq	r4, #0
      }
   b6778:	4620      	mov	r0, r4
   b677a:	bd10      	pop	{r4, pc}
   b677c:	000bb880 	.word	0x000bb880

000b6780 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6780:	b510      	push	{r4, lr}
   b6782:	2168      	movs	r1, #104	; 0x68
   b6784:	4604      	mov	r4, r0
   b6786:	f7fe f97c 	bl	b4a82 <_ZdlPvj>
   b678a:	4620      	mov	r0, r4
   b678c:	bd10      	pop	{r4, pc}

000b678e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b678e:	b510      	push	{r4, lr}
   b6790:	2128      	movs	r1, #40	; 0x28
   b6792:	4604      	mov	r4, r0
   b6794:	f7fe f975 	bl	b4a82 <_ZdlPvj>
   b6798:	4620      	mov	r0, r4
   b679a:	bd10      	pop	{r4, pc}

000b679c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b679c:	b510      	push	{r4, lr}
   b679e:	2130      	movs	r1, #48	; 0x30
   b67a0:	4604      	mov	r4, r0
   b67a2:	f7fe f96e 	bl	b4a82 <_ZdlPvj>
   b67a6:	4620      	mov	r0, r4
   b67a8:	bd10      	pop	{r4, pc}

000b67aa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b67aa:	2168      	movs	r1, #104	; 0x68
   b67ac:	f7fe b969 	b.w	b4a82 <_ZdlPvj>

000b67b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b67b0:	2128      	movs	r1, #40	; 0x28
   b67b2:	f7fe b966 	b.w	b4a82 <_ZdlPvj>

000b67b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b67b6:	2130      	movs	r1, #48	; 0x30
   b67b8:	f7fe b963 	b.w	b4a82 <_ZdlPvj>

000b67bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b67bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b67be:	2500      	movs	r5, #0
   b67c0:	1cec      	adds	r4, r5, #3
   b67c2:	428c      	cmp	r4, r1
   b67c4:	d80d      	bhi.n	b67e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b67c6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b67c8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b67ca:	5d87      	ldrb	r7, [r0, r6]
   b67cc:	4297      	cmp	r7, r2
   b67ce:	d105      	bne.n	b67dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b67d0:	4426      	add	r6, r4
   b67d2:	42b1      	cmp	r1, r6
   b67d4:	d305      	bcc.n	b67e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b67d6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b67d8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b67da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b67dc:	3401      	adds	r4, #1
   b67de:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b67e0:	e7ee      	b.n	b67c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b67e2:	2000      	movs	r0, #0
   b67e4:	e7f9      	b.n	b67da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b67e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b67e8:	4a02      	ldr	r2, [pc, #8]	; (b67f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b67ea:	4903      	ldr	r1, [pc, #12]	; (b67f8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b67ec:	200a      	movs	r0, #10
   b67ee:	f7ff bc99 	b.w	b6124 <panic_>
   b67f2:	bf00      	nop
   b67f4:	000b5da1 	.word	0x000b5da1
   b67f8:	000bb704 	.word	0x000bb704

000b67fc <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b67fc:	4603      	mov	r3, r0
   b67fe:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6806:	4710      	bx	r2

000b6808 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6808:	b430      	push	{r4, r5}
   b680a:	460d      	mov	r5, r1
   b680c:	4611      	mov	r1, r2
   b680e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6810:	6803      	ldr	r3, [r0, #0]
   b6812:	6809      	ldr	r1, [r1, #0]
   b6814:	6828      	ldr	r0, [r5, #0]
   b6816:	e9d3 4300 	ldrd	r4, r3, [r3]
   b681a:	46a4      	mov	ip, r4
      }
   b681c:	bc30      	pop	{r4, r5}
   b681e:	4760      	bx	ip

000b6820 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6820:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6822:	b538      	push	{r3, r4, r5, lr}
   b6824:	4604      	mov	r4, r0
	switch (__op)
   b6826:	d102      	bne.n	b682e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6828:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b682a:	6023      	str	r3, [r4, #0]
	}
   b682c:	e003      	b.n	b6836 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b682e:	2a02      	cmp	r2, #2
   b6830:	d003      	beq.n	b683a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6832:	2a03      	cmp	r2, #3
   b6834:	d00d      	beq.n	b6852 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6836:	2000      	movs	r0, #0
   b6838:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b683a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b683c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b683e:	f7fe f91c 	bl	b4a7a <_Znwj>
   b6842:	4603      	mov	r3, r0
   b6844:	2800      	cmp	r0, #0
   b6846:	d0f0      	beq.n	b682a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6848:	e895 0003 	ldmia.w	r5, {r0, r1}
   b684c:	e883 0003 	stmia.w	r3, {r0, r1}
   b6850:	e7eb      	b.n	b682a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6852:	6800      	ldr	r0, [r0, #0]
   b6854:	2800      	cmp	r0, #0
   b6856:	d0ee      	beq.n	b6836 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6858:	2108      	movs	r1, #8
   b685a:	f7fe f912 	bl	b4a82 <_ZdlPvj>
   b685e:	e7ea      	b.n	b6836 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6860 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6860:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6862:	b538      	push	{r3, r4, r5, lr}
   b6864:	4604      	mov	r4, r0
	switch (__op)
   b6866:	d102      	bne.n	b686e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6868:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b686a:	6023      	str	r3, [r4, #0]
	}
   b686c:	e003      	b.n	b6876 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b686e:	2a02      	cmp	r2, #2
   b6870:	d003      	beq.n	b687a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6872:	2a03      	cmp	r2, #3
   b6874:	d00d      	beq.n	b6892 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6876:	2000      	movs	r0, #0
   b6878:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b687a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b687c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b687e:	f7fe f8fc 	bl	b4a7a <_Znwj>
   b6882:	4603      	mov	r3, r0
   b6884:	2800      	cmp	r0, #0
   b6886:	d0f0      	beq.n	b686a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6888:	e895 0003 	ldmia.w	r5, {r0, r1}
   b688c:	e883 0003 	stmia.w	r3, {r0, r1}
   b6890:	e7eb      	b.n	b686a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6892:	6800      	ldr	r0, [r0, #0]
   b6894:	2800      	cmp	r0, #0
   b6896:	d0ee      	beq.n	b6876 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6898:	2108      	movs	r1, #8
   b689a:	f7fe f8f2 	bl	b4a82 <_ZdlPvj>
   b689e:	e7ea      	b.n	b6876 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b68a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b68a0:	b510      	push	{r4, lr}
   b68a2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b68a4:	3058      	adds	r0, #88	; 0x58
   b68a6:	f7fe fa95 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b68aa:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b68ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b68b2:	f7ff be33 	b.w	b651c <_ZN6StringD1Ev>

000b68b6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b68b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b68ba:	b2da      	uxtb	r2, r3
   b68bc:	2a09      	cmp	r2, #9
   b68be:	d801      	bhi.n	b68c4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b68c0:	4618      	mov	r0, r3
   b68c2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b68c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b68c8:	2b05      	cmp	r3, #5
   b68ca:	d801      	bhi.n	b68d0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b68cc:	3857      	subs	r0, #87	; 0x57
   b68ce:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b68d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b68d4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b68d6:	bf94      	ite	ls
   b68d8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b68da:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b68de:	4770      	bx	lr

000b68e0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b68e0:	b510      	push	{r4, lr}
            locked_(false) {
   b68e2:	2300      	movs	r3, #0
   b68e4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b68e6:	4b04      	ldr	r3, [pc, #16]	; (b68f8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b68e8:	4604      	mov	r4, r0
   b68ea:	6818      	ldr	r0, [r3, #0]
   b68ec:	f7ff fb3a 	bl	b5f64 <os_mutex_recursive_lock>
        locked_ = true;
   b68f0:	2301      	movs	r3, #1
   b68f2:	7023      	strb	r3, [r4, #0]
    }
   b68f4:	4620      	mov	r0, r4
   b68f6:	bd10      	pop	{r4, pc}
   b68f8:	2003e690 	.word	0x2003e690

000b68fc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b68fc:	b510      	push	{r4, lr}
        if (locked_) {
   b68fe:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6900:	4604      	mov	r4, r0
        if (locked_) {
   b6902:	b11b      	cbz	r3, b690c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6904:	4b02      	ldr	r3, [pc, #8]	; (b6910 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6906:	6818      	ldr	r0, [r3, #0]
   b6908:	f7ff fb34 	bl	b5f74 <os_mutex_recursive_unlock>
    }
   b690c:	4620      	mov	r0, r4
   b690e:	bd10      	pop	{r4, pc}
   b6910:	2003e690 	.word	0x2003e690

000b6914 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6914:	b082      	sub	sp, #8
   b6916:	4603      	mov	r3, r0
    address_ = addr;
   b6918:	6808      	ldr	r0, [r1, #0]
   b691a:	6849      	ldr	r1, [r1, #4]
   b691c:	466a      	mov	r2, sp
   b691e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6920:	466a      	mov	r2, sp
   b6922:	ca03      	ldmia	r2!, {r0, r1}
   b6924:	6018      	str	r0, [r3, #0]
}
   b6926:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6928:	6059      	str	r1, [r3, #4]
}
   b692a:	b002      	add	sp, #8
   b692c:	4770      	bx	lr

000b692e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b692e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6930:	7982      	ldrb	r2, [r0, #6]
   b6932:	798b      	ldrb	r3, [r1, #6]
   b6934:	429a      	cmp	r2, r3
   b6936:	d106      	bne.n	b6946 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6938:	2206      	movs	r2, #6
   b693a:	f002 fb2a 	bl	b8f92 <memcmp>
   b693e:	fab0 f080 	clz	r0, r0
   b6942:	0940      	lsrs	r0, r0, #5
}
   b6944:	bd08      	pop	{r3, pc}
    return false;
   b6946:	2000      	movs	r0, #0
   b6948:	e7fc      	b.n	b6944 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b694a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b694a:	f04f 33ff 	mov.w	r3, #4294967295
   b694e:	6003      	str	r3, [r0, #0]
   b6950:	8083      	strh	r3, [r0, #4]
}
   b6952:	2000      	movs	r0, #0
   b6954:	4770      	bx	lr

000b6956 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6956:	b508      	push	{r3, lr}
   b6958:	4602      	mov	r2, r0
        : address_{} {
   b695a:	2100      	movs	r1, #0
   b695c:	6001      	str	r1, [r0, #0]
   b695e:	6041      	str	r1, [r0, #4]
    clear();
   b6960:	f7ff fff3 	bl	b694a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6964:	7191      	strb	r1, [r2, #6]
}
   b6966:	4610      	mov	r0, r2
   b6968:	bd08      	pop	{r3, pc}
	...

000b696c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b696c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b696e:	2301      	movs	r3, #1
   b6970:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6972:	4b05      	ldr	r3, [pc, #20]	; (b6988 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6974:	4602      	mov	r2, r0
   b6976:	f103 0110 	add.w	r1, r3, #16
   b697a:	f853 4b04 	ldr.w	r4, [r3], #4
   b697e:	f842 4b04 	str.w	r4, [r2], #4
   b6982:	428b      	cmp	r3, r1
   b6984:	d1f9      	bne.n	b697a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6986:	bd10      	pop	{r4, pc}
   b6988:	000bb0f2 	.word	0x000bb0f2

000b698c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b698c:	b510      	push	{r4, lr}
    if (uuid128) {
   b698e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6990:	4604      	mov	r4, r0
    if (uuid128) {
   b6992:	b1b1      	cbz	r1, b69c2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6994:	2a01      	cmp	r2, #1
   b6996:	f101 0210 	add.w	r2, r1, #16
   b699a:	d10a      	bne.n	b69b2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b699c:	4601      	mov	r1, r0
   b699e:	f853 0b04 	ldr.w	r0, [r3], #4
   b69a2:	f841 0b04 	str.w	r0, [r1], #4
   b69a6:	4293      	cmp	r3, r2
   b69a8:	d1f9      	bne.n	b699e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b69aa:	2301      	movs	r3, #1
   b69ac:	6123      	str	r3, [r4, #16]
}
   b69ae:	4620      	mov	r0, r4
   b69b0:	bd10      	pop	{r4, pc}
   b69b2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b69b4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b69b8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b69bc:	429a      	cmp	r2, r3
   b69be:	d1f9      	bne.n	b69b4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b69c0:	e7f3      	b.n	b69aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b69c2:	2210      	movs	r2, #16
   b69c4:	f002 fb1d 	bl	b9002 <memset>
   b69c8:	e7f1      	b.n	b69ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b69ca <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b69ca:	b538      	push	{r3, r4, r5, lr}
   b69cc:	4604      	mov	r4, r0
   b69ce:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b69d0:	461a      	mov	r2, r3
   b69d2:	f7ff ffdb 	bl	b698c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b69d6:	81a5      	strh	r5, [r4, #12]
}
   b69d8:	4620      	mov	r0, r4
   b69da:	bd38      	pop	{r3, r4, r5, pc}

000b69dc <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b69dc:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b69de:	6902      	ldr	r2, [r0, #16]
   b69e0:	b922      	cbnz	r2, b69ec <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b69e2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b69e4:	3800      	subs	r0, #0
   b69e6:	bf18      	it	ne
   b69e8:	2001      	movne	r0, #1
}
   b69ea:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b69ec:	4902      	ldr	r1, [pc, #8]	; (b69f8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b69ee:	2210      	movs	r2, #16
   b69f0:	f002 facf 	bl	b8f92 <memcmp>
   b69f4:	e7f6      	b.n	b69e4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b69f6:	bf00      	nop
   b69f8:	000bb898 	.word	0x000bb898

000b69fc <_ZNK8particle7BleUuid4typeEv>:
}
   b69fc:	6900      	ldr	r0, [r0, #16]
   b69fe:	4770      	bx	lr

000b6a00 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6a00:	b538      	push	{r3, r4, r5, lr}
   b6a02:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6a04:	2214      	movs	r2, #20
   b6a06:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6a08:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6a0a:	f002 fafa 	bl	b9002 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6a0e:	6923      	ldr	r3, [r4, #16]
   b6a10:	b91b      	cbnz	r3, b6a1a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6a12:	89a3      	ldrh	r3, [r4, #12]
   b6a14:	802b      	strh	r3, [r5, #0]
}
   b6a16:	4628      	mov	r0, r5
   b6a18:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6a1a:	2301      	movs	r3, #1
   b6a1c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6a1e:	4621      	mov	r1, r4
   b6a20:	462b      	mov	r3, r5
   b6a22:	f104 0210 	add.w	r2, r4, #16
   b6a26:	f851 0b04 	ldr.w	r0, [r1], #4
   b6a2a:	f843 0b04 	str.w	r0, [r3], #4
   b6a2e:	4291      	cmp	r1, r2
   b6a30:	d1f9      	bne.n	b6a26 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6a32:	e7f0      	b.n	b6a16 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6a34 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6a34:	8980      	ldrh	r0, [r0, #12]
   b6a36:	4770      	bx	lr

000b6a38 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6a38:	4770      	bx	lr

000b6a3a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6a3a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6a3c:	6902      	ldr	r2, [r0, #16]
   b6a3e:	690b      	ldr	r3, [r1, #16]
   b6a40:	429a      	cmp	r2, r3
   b6a42:	d106      	bne.n	b6a52 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6a44:	2210      	movs	r2, #16
   b6a46:	f002 faa4 	bl	b8f92 <memcmp>
   b6a4a:	fab0 f080 	clz	r0, r0
   b6a4e:	0940      	lsrs	r0, r0, #5
}
   b6a50:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6a52:	2000      	movs	r0, #0
   b6a54:	e7fc      	b.n	b6a50 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6a58 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6a58:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6a5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6a5e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6a60:	4b34      	ldr	r3, [pc, #208]	; (b6b34 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6a62:	460c      	mov	r4, r1
   b6a64:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6a66:	4602      	mov	r2, r0
   b6a68:	f103 0110 	add.w	r1, r3, #16
   b6a6c:	f853 0b04 	ldr.w	r0, [r3], #4
   b6a70:	f842 0b04 	str.w	r0, [r2], #4
   b6a74:	428b      	cmp	r3, r1
   b6a76:	d1f9      	bne.n	b6a6c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6a78:	b344      	cbz	r4, b6acc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6a7a:	2124      	movs	r1, #36	; 0x24
   b6a7c:	4620      	mov	r0, r4
   b6a7e:	f002 fb40 	bl	b9102 <strnlen>
   b6a82:	2804      	cmp	r0, #4
   b6a84:	f04f 0500 	mov.w	r5, #0
   b6a88:	d123      	bne.n	b6ad2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6a8a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6a8e:	af01      	add	r7, sp, #4
   b6a90:	1ca5      	adds	r5, r4, #2
   b6a92:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6a94:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6a98:	f7ff ff0d 	bl	b68b6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6a9c:	f1b0 0800 	subs.w	r8, r0, #0
   b6aa0:	db12      	blt.n	b6ac8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6aa2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6aa6:	f7ff ff06 	bl	b68b6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6aaa:	2800      	cmp	r0, #0
   b6aac:	db0c      	blt.n	b6ac8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6aae:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6ab0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6ab4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6ab6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6aba:	d1eb      	bne.n	b6a94 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6abc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6ac0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6ac2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6ac6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6ac8:	2300      	movs	r3, #0
   b6aca:	6133      	str	r3, [r6, #16]
}
   b6acc:	b002      	add	sp, #8
   b6ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6ad2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6ad6:	2124      	movs	r1, #36	; 0x24
   b6ad8:	4620      	mov	r0, r4
   b6ada:	f002 fb12 	bl	b9102 <strnlen>
   b6ade:	42a8      	cmp	r0, r5
   b6ae0:	d807      	bhi.n	b6af2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6ae2:	4642      	mov	r2, r8
   b6ae4:	2100      	movs	r1, #0
   b6ae6:	4630      	mov	r0, r6
}
   b6ae8:	b002      	add	sp, #8
   b6aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6aee:	f002 ba88 	b.w	b9002 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6af2:	f1b8 0f00 	cmp.w	r8, #0
   b6af6:	d0e9      	beq.n	b6acc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6af8:	5d60      	ldrb	r0, [r4, r5]
   b6afa:	f7ff fedc 	bl	b68b6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6afe:	0603      	lsls	r3, r0, #24
   b6b00:	d415      	bmi.n	b6b2e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6b02:	0100      	lsls	r0, r0, #4
   b6b04:	f108 38ff 	add.w	r8, r8, #4294967295
   b6b08:	b2c7      	uxtb	r7, r0
   b6b0a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6b0e:	2124      	movs	r1, #36	; 0x24
   b6b10:	4620      	mov	r0, r4
   b6b12:	f002 faf6 	bl	b9102 <strnlen>
   b6b16:	3501      	adds	r5, #1
   b6b18:	42a8      	cmp	r0, r5
   b6b1a:	d908      	bls.n	b6b2e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6b1c:	5d60      	ldrb	r0, [r4, r5]
   b6b1e:	f7ff feca 	bl	b68b6 <_ZN8particle11hexToNibbleEc>
   b6b22:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6b24:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6b26:	bfa4      	itt	ge
   b6b28:	4338      	orrge	r0, r7
   b6b2a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6b2e:	3501      	adds	r5, #1
   b6b30:	e7d1      	b.n	b6ad6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6b32:	bf00      	nop
   b6b34:	000bb0f2 	.word	0x000bb0f2

000b6b38 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6b38:	b513      	push	{r0, r1, r4, lr}
   b6b3a:	4604      	mov	r4, r0
   b6b3c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6b3e:	f7ff ff15 	bl	b696c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6b42:	4620      	mov	r0, r4
   b6b44:	9901      	ldr	r1, [sp, #4]
   b6b46:	f7ff ff87 	bl	b6a58 <_ZN8particle7BleUuid9constructEPKc>
}
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	b002      	add	sp, #8
   b6b4e:	bd10      	pop	{r4, pc}

000b6b50 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6b50:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6b56:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6b58:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6b5a:	8043      	strh	r3, [r0, #2]
   b6b5c:	220e      	movs	r2, #14
   b6b5e:	4629      	mov	r1, r5
   b6b60:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6b62:	7105      	strb	r5, [r0, #4]
   b6b64:	3006      	adds	r0, #6
   b6b66:	f002 fa4c 	bl	b9002 <memset>
   b6b6a:	f104 0014 	add.w	r0, r4, #20
   b6b6e:	f7ff fefd 	bl	b696c <_ZN8particle7BleUuidC1Ev>
   b6b72:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6b76:	f7ff fef9 	bl	b696c <_ZN8particle7BleUuidC1Ev>
   b6b7a:	4904      	ldr	r1, [pc, #16]	; (b6b8c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6b7c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6b80:	f7ff fd17 	bl	b65b2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6b84:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6b86:	4620      	mov	r0, r4
   b6b88:	bd38      	pop	{r3, r4, r5, pc}
   b6b8a:	bf00      	nop
   b6b8c:	000bb499 	.word	0x000bb499

000b6b90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6b90:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6b92:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6b96:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6b9a:	4293      	cmp	r3, r2
   b6b9c:	4618      	mov	r0, r3
   b6b9e:	d006      	beq.n	b6bae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6ba0:	6804      	ldr	r4, [r0, #0]
   b6ba2:	8824      	ldrh	r4, [r4, #0]
   b6ba4:	428c      	cmp	r4, r1
   b6ba6:	f103 0308 	add.w	r3, r3, #8
   b6baa:	d1f6      	bne.n	b6b9a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6bac:	bd10      	pop	{r4, pc}
        return nullptr;
   b6bae:	2000      	movs	r0, #0
   b6bb0:	e7fc      	b.n	b6bac <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6bb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bb6:	4606      	mov	r6, r0
   b6bb8:	b085      	sub	sp, #20
   b6bba:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6bbc:	460d      	mov	r5, r1
   b6bbe:	2900      	cmp	r1, #0
   b6bc0:	d050      	beq.n	b6c64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6bc2:	2a00      	cmp	r2, #0
   b6bc4:	d04e      	beq.n	b6c64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6bc6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6bc8:	7823      	ldrb	r3, [r4, #0]
   b6bca:	2af4      	cmp	r2, #244	; 0xf4
   b6bcc:	bf28      	it	cs
   b6bce:	22f4      	movcs	r2, #244	; 0xf4
   b6bd0:	b343      	cbz	r3, b6c24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6bd2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6bd4:	0798      	lsls	r0, r3, #30
   b6bd6:	d509      	bpl.n	b6bec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6bd8:	89a0      	ldrh	r0, [r4, #12]
   b6bda:	9203      	str	r2, [sp, #12]
   b6bdc:	2300      	movs	r3, #0
   b6bde:	f7ff f943 	bl	b5e68 <hal_ble_gatt_server_set_characteristic_value>
   b6be2:	2800      	cmp	r0, #0
   b6be4:	9a03      	ldr	r2, [sp, #12]
   b6be6:	da03      	bge.n	b6bf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6be8:	b005      	add	sp, #20
   b6bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6bec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6bf0:	6834      	ldr	r4, [r6, #0]
   b6bf2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6bf4:	06d9      	lsls	r1, r3, #27
   b6bf6:	d509      	bpl.n	b6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6bf8:	2f01      	cmp	r7, #1
   b6bfa:	d007      	beq.n	b6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6bfc:	89a0      	ldrh	r0, [r4, #12]
   b6bfe:	2300      	movs	r3, #0
   b6c00:	4629      	mov	r1, r5
}
   b6c02:	b005      	add	sp, #20
   b6c04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c08:	f7ff b960 	b.w	b5ecc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6c0c:	069b      	lsls	r3, r3, #26
   b6c0e:	d5eb      	bpl.n	b6be8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6c10:	2f02      	cmp	r7, #2
   b6c12:	d0e9      	beq.n	b6be8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c14:	89a0      	ldrh	r0, [r4, #12]
   b6c16:	2300      	movs	r3, #0
   b6c18:	4629      	mov	r1, r5
}
   b6c1a:	b005      	add	sp, #20
   b6c1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c20:	f7ff b95e 	b.w	b5ee0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6c24:	8860      	ldrh	r0, [r4, #2]
   b6c26:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6c2a:	4288      	cmp	r0, r1
   b6c2c:	d01c      	beq.n	b6c68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6c2e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6c30:	074e      	lsls	r6, r1, #29
   b6c32:	d501      	bpl.n	b6c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6c34:	2f01      	cmp	r7, #1
   b6c36:	d104      	bne.n	b6c42 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6c38:	070b      	lsls	r3, r1, #28
   b6c3a:	d409      	bmi.n	b6c50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6c3c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6c40:	e7d2      	b.n	b6be8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c42:	89a1      	ldrh	r1, [r4, #12]
   b6c44:	9300      	str	r3, [sp, #0]
   b6c46:	4613      	mov	r3, r2
   b6c48:	462a      	mov	r2, r5
   b6c4a:	f7ff f921 	bl	b5e90 <hal_ble_gatt_client_write_without_response>
   b6c4e:	e7cb      	b.n	b6be8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6c50:	2f02      	cmp	r7, #2
   b6c52:	d0f3      	beq.n	b6c3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c54:	2300      	movs	r3, #0
   b6c56:	89a1      	ldrh	r1, [r4, #12]
   b6c58:	9300      	str	r3, [sp, #0]
   b6c5a:	4613      	mov	r3, r2
   b6c5c:	462a      	mov	r2, r5
   b6c5e:	f7ff f90d 	bl	b5e7c <hal_ble_gatt_client_write_with_response>
   b6c62:	e7c1      	b.n	b6be8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6c64:	4802      	ldr	r0, [pc, #8]	; (b6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6c66:	e7bf      	b.n	b6be8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6c68:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6c6c:	e7bc      	b.n	b6be8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6c6e:	bf00      	nop
   b6c70:	fffffef2 	.word	0xfffffef2

000b6c74 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b6c74:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b6c76:	688a      	ldr	r2, [r1, #8]
   b6c78:	6809      	ldr	r1, [r1, #0]
   b6c7a:	f7ff bf9b 	b.w	b6bb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6c7e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6c7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6c80:	460c      	mov	r4, r1
   b6c82:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6c84:	21f4      	movs	r1, #244	; 0xf4
   b6c86:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6c88:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6c8a:	f002 fa3a 	bl	b9102 <strnlen>
   b6c8e:	9b01      	ldr	r3, [sp, #4]
   b6c90:	4602      	mov	r2, r0
   b6c92:	4621      	mov	r1, r4
   b6c94:	4628      	mov	r0, r5
}
   b6c96:	b003      	add	sp, #12
   b6c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6c9c:	f7ff bf8a 	b.w	b6bb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6ca0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6ca4:	2600      	movs	r6, #0
   b6ca6:	6006      	str	r6, [r0, #0]
   b6ca8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6caa:	2028      	movs	r0, #40	; 0x28
   b6cac:	460c      	mov	r4, r1
   b6cae:	f7fd fee4 	bl	b4a7a <_Znwj>
	  auto __pi = ::new (__mem)
   b6cb2:	1e05      	subs	r5, r0, #0
   b6cb4:	f105 080c 	add.w	r8, r5, #12
   b6cb8:	d00f      	beq.n	b6cda <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6cba:	2301      	movs	r3, #1
   b6cbc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6cc0:	4b08      	ldr	r3, [pc, #32]	; (b6ce4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6cc2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6cc4:	4640      	mov	r0, r8
   b6cc6:	f7ff fe51 	bl	b696c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6ccc:	622e      	str	r6, [r5, #32]
   b6cce:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6cd2:	4646      	mov	r6, r8
   b6cd4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6cd6:	6823      	ldr	r3, [r4, #0]
   b6cd8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6cda:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6cde:	4638      	mov	r0, r7
   b6ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6ce4:	000bb850 	.word	0x000bb850

000b6ce8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6ce8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6cea:	2500      	movs	r5, #0
   b6cec:	6005      	str	r5, [r0, #0]
   b6cee:	4606      	mov	r6, r0
   b6cf0:	2030      	movs	r0, #48	; 0x30
   b6cf2:	f7fd fec2 	bl	b4a7a <_Znwj>
	  auto __pi = ::new (__mem)
   b6cf6:	4604      	mov	r4, r0
   b6cf8:	b188      	cbz	r0, b6d1e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6cfa:	2301      	movs	r3, #1
   b6cfc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6d00:	4b09      	ldr	r3, [pc, #36]	; (b6d28 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6d02:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6d08:	8183      	strh	r3, [r0, #12]
   b6d0a:	300e      	adds	r0, #14
   b6d0c:	f7ff fe23 	bl	b6956 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6d10:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6d14:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6d18:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6d1c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6d1e:	6074      	str	r4, [r6, #4]
   b6d20:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6d22:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6d24:	4630      	mov	r0, r6
   b6d26:	bd70      	pop	{r4, r5, r6, pc}
   b6d28:	000bb86c 	.word	0x000bb86c

000b6d2c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d2e:	460d      	mov	r5, r1
   b6d30:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6d32:	a801      	add	r0, sp, #4
   b6d34:	f7ff fdd4 	bl	b68e0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6d38:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6d3a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6d3e:	6023      	str	r3, [r4, #0]
   b6d40:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6d44:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6d46:	a801      	add	r0, sp, #4
   b6d48:	f7ff fdd8 	bl	b68fc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6d4c:	4620      	mov	r0, r4
   b6d4e:	b003      	add	sp, #12
   b6d50:	bd30      	pop	{r4, r5, pc}

000b6d52 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6d52:	b530      	push	{r4, r5, lr}
   b6d54:	4605      	mov	r5, r0
   b6d56:	b087      	sub	sp, #28
   b6d58:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6d5a:	a801      	add	r0, sp, #4
   b6d5c:	f7ff fdc0 	bl	b68e0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6d60:	682a      	ldr	r2, [r5, #0]
   b6d62:	6823      	ldr	r3, [r4, #0]
   b6d64:	8812      	ldrh	r2, [r2, #0]
   b6d66:	881b      	ldrh	r3, [r3, #0]
   b6d68:	429a      	cmp	r2, r3
   b6d6a:	d10d      	bne.n	b6d88 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6d6c:	4629      	mov	r1, r5
   b6d6e:	a802      	add	r0, sp, #8
   b6d70:	f7ff ffdc 	bl	b6d2c <_ZNK8particle13BlePeerDevice7addressEv>
   b6d74:	4621      	mov	r1, r4
   b6d76:	a804      	add	r0, sp, #16
   b6d78:	f7ff ffd8 	bl	b6d2c <_ZNK8particle13BlePeerDevice7addressEv>
   b6d7c:	a904      	add	r1, sp, #16
   b6d7e:	a802      	add	r0, sp, #8
   b6d80:	f7ff fdd5 	bl	b692e <_ZNK8particle10BleAddresseqERKS0_>
   b6d84:	4604      	mov	r4, r0
   b6d86:	b900      	cbnz	r0, b6d8a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6d88:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6d8a:	a801      	add	r0, sp, #4
   b6d8c:	f7ff fdb6 	bl	b68fc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6d90:	4620      	mov	r0, r4
   b6d92:	b007      	add	sp, #28
   b6d94:	bd30      	pop	{r4, r5, pc}
	...

000b6d98 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6d98:	b510      	push	{r4, lr}
   b6d9a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6d9c:	2064      	movs	r0, #100	; 0x64
   b6d9e:	f7fd fe6c 	bl	b4a7a <_Znwj>
   b6da2:	b168      	cbz	r0, b6dc0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6da4:	2300      	movs	r3, #0
   b6da6:	e9c0 3300 	strd	r3, r3, [r0]
   b6daa:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6db2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6db6:	6203      	str	r3, [r0, #32]
   b6db8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6dba:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6dbc:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6dbe:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6dc0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6dc2:	b920      	cbnz	r0, b6dce <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6dc4:	4a0a      	ldr	r2, [pc, #40]	; (b6df0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6dc6:	490b      	ldr	r1, [pc, #44]	; (b6df4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6dc8:	200a      	movs	r0, #10
   b6dca:	f7ff f9ab 	bl	b6124 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6dce:	2000      	movs	r0, #0
   b6dd0:	f7ff f80e 	bl	b5df0 <hal_ble_stack_init>
   b6dd4:	b120      	cbz	r0, b6de0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6dd6:	4a06      	ldr	r2, [pc, #24]	; (b6df0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6dd8:	4907      	ldr	r1, [pc, #28]	; (b6df8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6dda:	200a      	movs	r0, #10
   b6ddc:	f7ff f9a2 	bl	b6124 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6de0:	6821      	ldr	r1, [r4, #0]
   b6de2:	4806      	ldr	r0, [pc, #24]	; (b6dfc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6de4:	2200      	movs	r2, #0
   b6de6:	f7ff f867 	bl	b5eb8 <hal_ble_set_callback_on_periph_link_events>
}
   b6dea:	4620      	mov	r0, r4
   b6dec:	bd10      	pop	{r4, pc}
   b6dee:	bf00      	nop
   b6df0:	000b5da1 	.word	0x000b5da1
   b6df4:	000bb704 	.word	0x000bb704
   b6df8:	000bb742 	.word	0x000bb742
   b6dfc:	000b73cd 	.word	0x000b73cd

000b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6e00:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6e02:	4c0a      	ldr	r4, [pc, #40]	; (b6e2c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6e04:	7823      	ldrb	r3, [r4, #0]
   b6e06:	f3bf 8f5b 	dmb	ish
   b6e0a:	07db      	lsls	r3, r3, #31
   b6e0c:	d40c      	bmi.n	b6e28 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6e0e:	4620      	mov	r0, r4
   b6e10:	f7fd fe39 	bl	b4a86 <__cxa_guard_acquire>
   b6e14:	b140      	cbz	r0, b6e28 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6e16:	4806      	ldr	r0, [pc, #24]	; (b6e30 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6e18:	f7ff ffbe 	bl	b6d98 <_ZN8particle14BleLocalDeviceC1Ev>
   b6e1c:	4620      	mov	r0, r4
   b6e1e:	f7fd fe37 	bl	b4a90 <__cxa_guard_release>
   b6e22:	4804      	ldr	r0, [pc, #16]	; (b6e34 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6e24:	f002 f8a8 	bl	b8f78 <atexit>
    return instance;
}
   b6e28:	4801      	ldr	r0, [pc, #4]	; (b6e30 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6e2a:	bd10      	pop	{r4, pc}
   b6e2c:	2003e688 	.word	0x2003e688
   b6e30:	2003e694 	.word	0x2003e694
   b6e34:	000b7075 	.word	0x000b7075

000b6e38 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6e38:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6e3a:	6803      	ldr	r3, [r0, #0]
   b6e3c:	3b09      	subs	r3, #9
   b6e3e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6e40:	b08d      	sub	sp, #52	; 0x34
   b6e42:	4604      	mov	r4, r0
   b6e44:	460d      	mov	r5, r1
    switch (event->type) {
   b6e46:	d811      	bhi.n	b6e6c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6e48:	f7ff ffda 	bl	b6e00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6e4c:	88a1      	ldrh	r1, [r4, #4]
   b6e4e:	6800      	ldr	r0, [r0, #0]
   b6e50:	f7ff fe9e 	bl	b6b90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6e54:	4603      	mov	r3, r0
   b6e56:	b958      	cbnz	r0, b6e70 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6e58:	2220      	movs	r2, #32
   b6e5a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6e5e:	4a0b      	ldr	r2, [pc, #44]	; (b6e8c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6e60:	9200      	str	r2, [sp, #0]
   b6e62:	490b      	ldr	r1, [pc, #44]	; (b6e90 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6e64:	aa04      	add	r2, sp, #16
   b6e66:	2032      	movs	r0, #50	; 0x32
   b6e68:	f7ff f964 	bl	b6134 <log_message>
}
   b6e6c:	b00d      	add	sp, #52	; 0x34
   b6e6e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6e70:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6e72:	2a00      	cmp	r2, #0
   b6e74:	d0fa      	beq.n	b6e6c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6e76:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6e7a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6e7e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6e82:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6e84:	aa04      	add	r2, sp, #16
   b6e86:	a903      	add	r1, sp, #12
   b6e88:	47a0      	blx	r4
}
   b6e8a:	e7ef      	b.n	b6e6c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6e8c:	000bb784 	.word	0x000bb784
   b6e90:	000bb71b 	.word	0x000bb71b

000b6e94 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6e94:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6e96:	2000      	movs	r0, #0
   b6e98:	f7fe ffaa 	bl	b5df0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6e9c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6ea0:	bd08      	pop	{r3, pc}

000b6ea2 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b6ea2:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b6ea4:	2100      	movs	r1, #0
   b6ea6:	f7fe bfab 	b.w	b5e00 <hal_ble_select_antenna>

000b6eaa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6eaa:	b919      	cbnz	r1, b6eb4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6eac:	460a      	mov	r2, r1
   b6eae:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6eb0:	f7fe bfae 	b.w	b5e10 <hal_ble_gap_set_advertising_data>
   b6eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6eb8:	2200      	movs	r2, #0
   b6eba:	e7f9      	b.n	b6eb0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6ebc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6ebc:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6ebe:	1e14      	subs	r4, r2, #0
   b6ec0:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6ec2:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6ec4:	db02      	blt.n	b6ecc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6ec6:	1862      	adds	r2, r4, r1
   b6ec8:	429a      	cmp	r2, r3
   b6eca:	dd00      	ble.n	b6ece <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6ecc:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6ece:	682a      	ldr	r2, [r5, #0]
   b6ed0:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6ed2:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6ed4:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ed6:	1a52      	subs	r2, r2, r1
   b6ed8:	f002 f879 	bl	b8fce <memmove>
    size_ -= n;
   b6edc:	686a      	ldr	r2, [r5, #4]
   b6ede:	1b12      	subs	r2, r2, r4
   b6ee0:	606a      	str	r2, [r5, #4]
}
   b6ee2:	bd38      	pop	{r3, r4, r5, pc}

000b6ee4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6ee6:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6ee8:	4604      	mov	r4, r0
   b6eea:	460d      	mov	r5, r1
   b6eec:	ab01      	add	r3, sp, #4
   b6eee:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6ef2:	f7ff fc63 	bl	b67bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6ef6:	4602      	mov	r2, r0
   b6ef8:	b138      	cbz	r0, b6f0a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6efa:	9901      	ldr	r1, [sp, #4]
   b6efc:	4620      	mov	r0, r4
   b6efe:	f7ff ffdd 	bl	b6ebc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6f02:	4629      	mov	r1, r5
   b6f04:	4620      	mov	r0, r4
   b6f06:	f7ff ffed 	bl	b6ee4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6f0a:	b003      	add	sp, #12
   b6f0c:	bd30      	pop	{r4, r5, pc}

000b6f0e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6f0e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6f10:	460c      	mov	r4, r1
   b6f12:	b929      	cbnz	r1, b6f20 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6f14:	460a      	mov	r2, r1
   b6f16:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b6f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6f1c:	f7fe bf80 	b.w	b5e20 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6f20:	2101      	movs	r1, #1
   b6f22:	4620      	mov	r0, r4
   b6f24:	f7ff ffde 	bl	b6ee4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6f28:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6f2c:	2200      	movs	r2, #0
   b6f2e:	e7f3      	b.n	b6f18 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6f30 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6f30:	b538      	push	{r3, r4, r5, lr}
   b6f32:	4604      	mov	r4, r0
   b6f34:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6f36:	f7ff ffb8 	bl	b6eaa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6f3a:	2800      	cmp	r0, #0
   b6f3c:	db0a      	blt.n	b6f54 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6f3e:	4629      	mov	r1, r5
   b6f40:	4620      	mov	r0, r4
   b6f42:	f7ff ffe4 	bl	b6f0e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6f46:	2800      	cmp	r0, #0
   b6f48:	db04      	blt.n	b6f54 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b6f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6f4e:	2000      	movs	r0, #0
   b6f50:	f7fe bf6e 	b.w	b5e30 <hal_ble_gap_start_advertising>
}
   b6f54:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6f58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6f58:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6f5a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6f5c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6f5e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f60:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6f62:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f64:	f7fd fd89 	bl	b4a7a <_Znwj>
   b6f68:	b118      	cbz	r0, b6f72 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6f6a:	682b      	ldr	r3, [r5, #0]
   b6f6c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6f6e:	686b      	ldr	r3, [r5, #4]
   b6f70:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f72:	4b03      	ldr	r3, [pc, #12]	; (b6f80 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6f74:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6f76:	4b03      	ldr	r3, [pc, #12]	; (b6f84 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f78:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6f7a:	60a3      	str	r3, [r4, #8]
      }
   b6f7c:	4620      	mov	r0, r4
   b6f7e:	bd38      	pop	{r3, r4, r5, pc}
   b6f80:	000b6809 	.word	0x000b6809
   b6f84:	000b6861 	.word	0x000b6861

000b6f88 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6f88:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6f8a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6f8c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6f8e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f90:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6f92:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f94:	f7fd fd71 	bl	b4a7a <_Znwj>
   b6f98:	b118      	cbz	r0, b6fa2 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b6f9a:	682b      	ldr	r3, [r5, #0]
   b6f9c:	6003      	str	r3, [r0, #0]
   b6f9e:	686b      	ldr	r3, [r5, #4]
   b6fa0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6fa2:	4b03      	ldr	r3, [pc, #12]	; (b6fb0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b6fa4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6fa6:	4b03      	ldr	r3, [pc, #12]	; (b6fb4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fa8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6faa:	60a3      	str	r3, [r4, #8]
      }
   b6fac:	4620      	mov	r0, r4
   b6fae:	bd38      	pop	{r3, r4, r5, pc}
   b6fb0:	000b67fd 	.word	0x000b67fd
   b6fb4:	000b6821 	.word	0x000b6821

000b6fb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6fb8:	680b      	ldr	r3, [r1, #0]
   b6fba:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6fbc:	b113      	cbz	r3, b6fc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6fbe:	685a      	ldr	r2, [r3, #4]
   b6fc0:	3201      	adds	r2, #1
   b6fc2:	605a      	str	r2, [r3, #4]
      }
   b6fc4:	4770      	bx	lr

000b6fc6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6fc6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6fc8:	f851 3b04 	ldr.w	r3, [r1], #4
   b6fcc:	4604      	mov	r4, r0
   b6fce:	f840 3b04 	str.w	r3, [r0], #4
   b6fd2:	f7ff fff1 	bl	b6fb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6fd6:	6823      	ldr	r3, [r4, #0]
   b6fd8:	b90b      	cbnz	r3, b6fde <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6fda:	f7ff fc05 	bl	b67e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6fde:	4620      	mov	r0, r4
   b6fe0:	bd10      	pop	{r4, pc}

000b6fe2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6fe2:	b510      	push	{r4, lr}
   b6fe4:	f851 3b04 	ldr.w	r3, [r1], #4
   b6fe8:	4604      	mov	r4, r0
   b6fea:	f840 3b04 	str.w	r3, [r0], #4
   b6fee:	f7ff ffe3 	bl	b6fb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	bd10      	pop	{r4, pc}

000b6ff6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6ff6:	b510      	push	{r4, lr}
   b6ff8:	f851 3b04 	ldr.w	r3, [r1], #4
   b6ffc:	4604      	mov	r4, r0
   b6ffe:	f840 3b04 	str.w	r3, [r0], #4
   b7002:	f7ff ffd9 	bl	b6fb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7006:	4620      	mov	r0, r4
   b7008:	bd10      	pop	{r4, pc}

000b700a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b700a:	b510      	push	{r4, lr}
   b700c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b700e:	3004      	adds	r0, #4
   b7010:	f7fe faa2 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7014:	4620      	mov	r0, r4
   b7016:	bd10      	pop	{r4, pc}

000b7018 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7018:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b701a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b701e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7020:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7024:	42ae      	cmp	r6, r5
   b7026:	d004      	beq.n	b7032 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7028:	1d28      	adds	r0, r5, #4
   b702a:	f7fe fa95 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b702e:	3508      	adds	r5, #8
   b7030:	e7f8      	b.n	b7024 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7032:	6820      	ldr	r0, [r4, #0]
   b7034:	f7ff f96a 	bl	b630c <free>
}
   b7038:	4620      	mov	r0, r4
   b703a:	bd70      	pop	{r4, r5, r6, pc}

000b703c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b703c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b703e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7042:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7044:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7048:	42ae      	cmp	r6, r5
   b704a:	d004      	beq.n	b7056 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b704c:	1d28      	adds	r0, r5, #4
   b704e:	f7fe fa83 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7052:	3508      	adds	r5, #8
   b7054:	e7f8      	b.n	b7048 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7056:	6820      	ldr	r0, [r4, #0]
   b7058:	f7ff f958 	bl	b630c <free>
}
   b705c:	4620      	mov	r0, r4
   b705e:	bd70      	pop	{r4, r5, r6, pc}

000b7060 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7060:	b510      	push	{r4, lr}
   b7062:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7064:	3024      	adds	r0, #36	; 0x24
   b7066:	f7ff ffe9 	bl	b703c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b706a:	f104 0018 	add.w	r0, r4, #24
   b706e:	f7ff ffd3 	bl	b7018 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7072:	bd10      	pop	{r4, pc}

000b7074 <__tcf_0>:
    static BleLocalDevice instance;
   b7074:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7076:	4b17      	ldr	r3, [pc, #92]	; (b70d4 <__tcf_0+0x60>)
   b7078:	681c      	ldr	r4, [r3, #0]
   b707a:	b354      	cbz	r4, b70d2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b707c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7080:	f7fd fea8 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
   b7084:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7088:	f7fd fea4 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
   b708c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7090:	f7fd fea0 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
   b7094:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7098:	f7fd fe9c 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b709c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b70a0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b70a4:	42ae      	cmp	r6, r5
   b70a6:	d004      	beq.n	b70b2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b70a8:	1d28      	adds	r0, r5, #4
   b70aa:	f7fe fa55 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b70ae:	3508      	adds	r5, #8
   b70b0:	e7f8      	b.n	b70a4 <__tcf_0+0x30>
    ::free(ptr);
   b70b2:	69a0      	ldr	r0, [r4, #24]
   b70b4:	f7ff f92a 	bl	b630c <free>
    ~BleLocalDeviceImpl() = default;
   b70b8:	f104 000c 	add.w	r0, r4, #12
   b70bc:	f7ff ffbe 	bl	b703c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b70c0:	4620      	mov	r0, r4
   b70c2:	f7ff ffa9 	bl	b7018 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b70c6:	4620      	mov	r0, r4
   b70c8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b70ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b70ce:	f7fd bcd8 	b.w	b4a82 <_ZdlPvj>
   b70d2:	bd70      	pop	{r4, r5, r6, pc}
   b70d4:	2003e694 	.word	0x2003e694

000b70d8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b70d8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b70da:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b70dc:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b70e0:	e9c1 3300 	strd	r3, r3, [r1]
   b70e4:	6803      	ldr	r3, [r0, #0]
   b70e6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b70e8:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b70ea:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b70ec:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b70ee:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b70f0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b70f2:	f7fe fa31 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b70f6:	b002      	add	sp, #8
   b70f8:	bd10      	pop	{r4, pc}

000b70fa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b70fa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b70fc:	b510      	push	{r4, lr}
      if (_M_empty())
   b70fe:	b90a      	cbnz	r2, b7104 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7100:	f001 fe24 	bl	b8d4c <_ZSt25__throw_bad_function_callv>
    }
   b7104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7108:	68c3      	ldr	r3, [r0, #12]
   b710a:	4718      	bx	r3

000b710c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b710c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b710e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7110:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7112:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7114:	dd03      	ble.n	b711e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7116:	f7ff f901 	bl	b631c <realloc>
            if (!d) {
   b711a:	b918      	cbnz	r0, b7124 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b711c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b711e:	f7ff f8f5 	bl	b630c <free>
        T* d = nullptr;
   b7122:	2000      	movs	r0, #0
        data_ = d;
   b7124:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7126:	60a5      	str	r5, [r4, #8]
        return true;
   b7128:	2001      	movs	r0, #1
   b712a:	e7f7      	b.n	b711c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b712c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b712c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b712e:	6883      	ldr	r3, [r0, #8]
   b7130:	428b      	cmp	r3, r1
   b7132:	da02      	bge.n	b713a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7134:	f7ff ffea 	bl	b710c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7138:	bd08      	pop	{r3, pc}
    return true;
   b713a:	2001      	movs	r0, #1
   b713c:	e7fc      	b.n	b7138 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b713e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b713e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7142:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7144:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7146:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7148:	4419      	add	r1, r3
   b714a:	6883      	ldr	r3, [r0, #8]
   b714c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b714e:	4604      	mov	r4, r0
   b7150:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7152:	dc12      	bgt.n	b717a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7154:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7156:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7158:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b715a:	1bd2      	subs	r2, r2, r7
   b715c:	4631      	mov	r1, r6
   b715e:	1970      	adds	r0, r6, r5
   b7160:	f001 ff35 	bl	b8fce <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7164:	462a      	mov	r2, r5
   b7166:	4641      	mov	r1, r8
   b7168:	4630      	mov	r0, r6
   b716a:	f001 ff22 	bl	b8fb2 <memcpy>
    size_ += n;
   b716e:	6863      	ldr	r3, [r4, #4]
   b7170:	442b      	add	r3, r5
   b7172:	6063      	str	r3, [r4, #4]
    return true;
   b7174:	2001      	movs	r0, #1
}
   b7176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b717a:	f7ff ffc7 	bl	b710c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b717e:	2800      	cmp	r0, #0
   b7180:	d1e8      	bne.n	b7154 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7182:	e7f8      	b.n	b7176 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7186:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7188:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b718c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b718e:	4604      	mov	r4, r0
   b7190:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7192:	da0b      	bge.n	b71ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7194:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7196:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7198:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b719a:	1b52      	subs	r2, r2, r5
   b719c:	1c48      	adds	r0, r1, #1
   b719e:	f001 ff16 	bl	b8fce <memmove>
    new(p) T(std::move(value));
   b71a2:	557e      	strb	r6, [r7, r5]
    ++size_;
   b71a4:	6863      	ldr	r3, [r4, #4]
   b71a6:	3301      	adds	r3, #1
   b71a8:	6063      	str	r3, [r4, #4]
}
   b71aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71ac:	3101      	adds	r1, #1
   b71ae:	f7ff ffad 	bl	b710c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b71b2:	2800      	cmp	r0, #0
   b71b4:	d1ee      	bne.n	b7194 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b71b6:	e7f8      	b.n	b71aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b71b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b71b8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b71ba:	6841      	ldr	r1, [r0, #4]
   b71bc:	f7ff bfe2 	b.w	b7184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b71c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b71c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b71c4:	4604      	mov	r4, r0
   b71c6:	461d      	mov	r5, r3
   b71c8:	460f      	mov	r7, r1
   b71ca:	ab01      	add	r3, sp, #4
   b71cc:	4690      	mov	r8, r2
   b71ce:	460a      	mov	r2, r1
   b71d0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b71d4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b71d8:	f7ff faf0 	bl	b67bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b71dc:	1cae      	adds	r6, r5, #2
   b71de:	6863      	ldr	r3, [r4, #4]
   b71e0:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b71e2:	f1b9 0f00 	cmp.w	r9, #0
   b71e6:	d126      	bne.n	b7236 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b71e8:	b328      	cbz	r0, b7236 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b71ea:	4433      	add	r3, r6
   b71ec:	1a1b      	subs	r3, r3, r0
   b71ee:	2bff      	cmp	r3, #255	; 0xff
   b71f0:	d809      	bhi.n	b7206 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b71f2:	9901      	ldr	r1, [sp, #4]
   b71f4:	4620      	mov	r0, r4
   b71f6:	f7ff fe61 	bl	b6ebc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b71fa:	6861      	ldr	r1, [r4, #4]
   b71fc:	4620      	mov	r0, r4
   b71fe:	4431      	add	r1, r6
   b7200:	f7ff ff94 	bl	b712c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7204:	b918      	cbnz	r0, b720e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7206:	6860      	ldr	r0, [r4, #4]
}
   b7208:	b003      	add	sp, #12
   b720a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b720e:	1c6a      	adds	r2, r5, #1
   b7210:	9901      	ldr	r1, [sp, #4]
   b7212:	b2d2      	uxtb	r2, r2
   b7214:	4620      	mov	r0, r4
   b7216:	f7ff ffb5 	bl	b7184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b721a:	9901      	ldr	r1, [sp, #4]
   b721c:	463a      	mov	r2, r7
   b721e:	3101      	adds	r1, #1
   b7220:	4620      	mov	r0, r4
   b7222:	f7ff ffaf 	bl	b7184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7226:	9901      	ldr	r1, [sp, #4]
   b7228:	462b      	mov	r3, r5
   b722a:	4642      	mov	r2, r8
   b722c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b722e:	4620      	mov	r0, r4
   b7230:	f7ff ff85 	bl	b713e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7234:	e7e7      	b.n	b7206 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7236:	18f1      	adds	r1, r6, r3
   b7238:	29ff      	cmp	r1, #255	; 0xff
   b723a:	d8e4      	bhi.n	b7206 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b723c:	4620      	mov	r0, r4
   b723e:	f7ff ff75 	bl	b712c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7242:	2800      	cmp	r0, #0
   b7244:	d0df      	beq.n	b7206 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7246:	1c69      	adds	r1, r5, #1
   b7248:	b2c9      	uxtb	r1, r1
   b724a:	4620      	mov	r0, r4
   b724c:	f7ff ffb4 	bl	b71b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7250:	4639      	mov	r1, r7
   b7252:	4620      	mov	r0, r4
   b7254:	f7ff ffb0 	bl	b71b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7258:	6861      	ldr	r1, [r4, #4]
   b725a:	462b      	mov	r3, r5
   b725c:	4642      	mov	r2, r8
   b725e:	e7e6      	b.n	b722e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7260 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7260:	b430      	push	{r4, r5}
   b7262:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7266:	b11a      	cbz	r2, b7270 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7268:	9502      	str	r5, [sp, #8]
}
   b726a:	bc30      	pop	{r4, r5}
   b726c:	f7ff bfa8 	b.w	b71c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7270:	6840      	ldr	r0, [r0, #4]
}
   b7272:	bc30      	pop	{r4, r5}
   b7274:	4770      	bx	lr

000b7276 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7276:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7278:	2300      	movs	r3, #0
   b727a:	e9c0 3300 	strd	r3, r3, [r0]
   b727e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7280:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7282:	9300      	str	r3, [sp, #0]
   b7284:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7286:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b728a:	4619      	mov	r1, r3
   b728c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7290:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7292:	f7ff ffe5 	bl	b7260 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7296:	4620      	mov	r0, r4
   b7298:	b004      	add	sp, #16
   b729a:	bd10      	pop	{r4, pc}

000b729c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b729c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b729e:	460a      	mov	r2, r1
   b72a0:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b72a2:	2114      	movs	r1, #20
   b72a4:	4610      	mov	r0, r2
   b72a6:	9203      	str	r2, [sp, #12]
   b72a8:	f001 ff2b 	bl	b9102 <strnlen>
   b72ac:	2100      	movs	r1, #0
   b72ae:	4603      	mov	r3, r0
   b72b0:	9100      	str	r1, [sp, #0]
   b72b2:	9a03      	ldr	r2, [sp, #12]
   b72b4:	2109      	movs	r1, #9
   b72b6:	4620      	mov	r0, r4
   b72b8:	f7ff ffd2 	bl	b7260 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b72bc:	b004      	add	sp, #16
   b72be:	bd10      	pop	{r4, pc}

000b72c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b72c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b72c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72c4:	4604      	mov	r4, r0
   b72c6:	460d      	mov	r5, r1
   b72c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b72ca:	d914      	bls.n	b72f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b72cc:	4290      	cmp	r0, r2
   b72ce:	d213      	bcs.n	b72f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b72d0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b72d4:	1a75      	subs	r5, r6, r1
   b72d6:	f1a1 0708 	sub.w	r7, r1, #8
   b72da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b72dc:	42b7      	cmp	r7, r6
   b72de:	d018      	beq.n	b7312 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b72e0:	b11c      	cbz	r4, b72ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b72e2:	4631      	mov	r1, r6
   b72e4:	4620      	mov	r0, r4
   b72e6:	f7ff fe86 	bl	b6ff6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b72ea:	1d30      	adds	r0, r6, #4
   b72ec:	f7fe f934 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b72f0:	3e08      	subs	r6, #8
   b72f2:	3c08      	subs	r4, #8
   b72f4:	e7f2      	b.n	b72dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b72f6:	d00c      	beq.n	b7312 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b72f8:	42b5      	cmp	r5, r6
   b72fa:	d00a      	beq.n	b7312 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b72fc:	b11c      	cbz	r4, b7306 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b72fe:	4629      	mov	r1, r5
   b7300:	4620      	mov	r0, r4
   b7302:	f7ff fe78 	bl	b6ff6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7306:	1d28      	adds	r0, r5, #4
   b7308:	f7fe f926 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b730c:	3508      	adds	r5, #8
   b730e:	3408      	adds	r4, #8
   b7310:	e7f2      	b.n	b72f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7314 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7316:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7318:	6846      	ldr	r6, [r0, #4]
   b731a:	4668      	mov	r0, sp
   b731c:	f7ff fe6b 	bl	b6ff6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7320:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7324:	429f      	cmp	r7, r3
   b7326:	db12      	blt.n	b734e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7328:	3701      	adds	r7, #1
        if (n > 0) {
   b732a:	2f00      	cmp	r7, #0
   b732c:	dd29      	ble.n	b7382 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b732e:	00f8      	lsls	r0, r7, #3
   b7330:	f7fe ffe4 	bl	b62fc <malloc>
            if (!d) {
   b7334:	4605      	mov	r5, r0
   b7336:	b1f0      	cbz	r0, b7376 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7338:	e9d4 1200 	ldrd	r1, r2, [r4]
   b733c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7340:	f7ff ffbe 	bl	b72c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7344:	6820      	ldr	r0, [r4, #0]
   b7346:	f7fe ffe1 	bl	b630c <free>
        data_ = d;
   b734a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b734c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b734e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7350:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7352:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7356:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b735a:	4631      	mov	r1, r6
   b735c:	f106 0008 	add.w	r0, r6, #8
   b7360:	f7ff ffae 	bl	b72c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7364:	b11e      	cbz	r6, b736e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7366:	4669      	mov	r1, sp
   b7368:	4630      	mov	r0, r6
   b736a:	f7ff fe44 	bl	b6ff6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b736e:	6863      	ldr	r3, [r4, #4]
   b7370:	3301      	adds	r3, #1
   b7372:	6063      	str	r3, [r4, #4]
    return true;
   b7374:	2501      	movs	r5, #1
   b7376:	a801      	add	r0, sp, #4
   b7378:	f7fe f8ee 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b737c:	4628      	mov	r0, r5
   b737e:	b003      	add	sp, #12
   b7380:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7382:	2500      	movs	r5, #0
   b7384:	e7de      	b.n	b7344 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7386 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7388:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b738c:	4605      	mov	r5, r0
   b738e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7390:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7394:	42a6      	cmp	r6, r4
   b7396:	d005      	beq.n	b73a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7398:	4639      	mov	r1, r7
   b739a:	4620      	mov	r0, r4
   b739c:	f7ff fcd9 	bl	b6d52 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b73a0:	b108      	cbz	r0, b73a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b73a2:	b914      	cbnz	r4, b73aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b73a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b73a6:	3408      	adds	r4, #8
   b73a8:	e7f4      	b.n	b7394 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b73aa:	1d20      	adds	r0, r4, #4
   b73ac:	f7fe f8d4 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b73b0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b73b4:	f104 0108 	add.w	r1, r4, #8
   b73b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b73bc:	4620      	mov	r0, r4
   b73be:	f7ff ff7f 	bl	b72c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b73c2:	686b      	ldr	r3, [r5, #4]
   b73c4:	3b01      	subs	r3, #1
   b73c6:	606b      	str	r3, [r5, #4]
    return true;
   b73c8:	e7ec      	b.n	b73a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b73cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b73cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b73d0:	4605      	mov	r5, r0
   b73d2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b73d4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b73d6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b73d8:	f7ff fa82 	bl	b68e0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b73dc:	682e      	ldr	r6, [r5, #0]
   b73de:	1ef3      	subs	r3, r6, #3
   b73e0:	2b0d      	cmp	r3, #13
   b73e2:	d83c      	bhi.n	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b73e4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b73e8:	0057000e 	.word	0x0057000e
   b73ec:	00d3003b 	.word	0x00d3003b
   b73f0:	003b003b 	.word	0x003b003b
   b73f4:	003b003b 	.word	0x003b003b
   b73f8:	009d003b 	.word	0x009d003b
   b73fc:	009d009d 	.word	0x009d009d
   b7400:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b7404:	a804      	add	r0, sp, #16
   b7406:	f7ff fc6f 	bl	b6ce8 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b740a:	9b04      	ldr	r3, [sp, #16]
   b740c:	89aa      	ldrh	r2, [r5, #12]
   b740e:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b7410:	6869      	ldr	r1, [r5, #4]
   b7412:	9804      	ldr	r0, [sp, #16]
   b7414:	3108      	adds	r1, #8
   b7416:	3002      	adds	r0, #2
   b7418:	f7ff fa7c 	bl	b6914 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b741c:	a904      	add	r1, sp, #16
   b741e:	a806      	add	r0, sp, #24
   b7420:	f7ff fde9 	bl	b6ff6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b7424:	a906      	add	r1, sp, #24
   b7426:	f104 0018 	add.w	r0, r4, #24
   b742a:	f7ff ff73 	bl	b7314 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b742e:	4605      	mov	r5, r0
   b7430:	a807      	add	r0, sp, #28
   b7432:	f7fe f891 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7436:	b9c5      	cbnz	r5, b746a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b7438:	2320      	movs	r3, #32
   b743a:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b743e:	4b5e      	ldr	r3, [pc, #376]	; (b75b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7440:	495e      	ldr	r1, [pc, #376]	; (b75bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7442:	9300      	str	r3, [sp, #0]
   b7444:	aa06      	add	r2, sp, #24
   b7446:	462b      	mov	r3, r5
   b7448:	2001      	movs	r0, #1
   b744a:	f7fe fe73 	bl	b6134 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b744e:	9b04      	ldr	r3, [sp, #16]
   b7450:	4629      	mov	r1, r5
   b7452:	8818      	ldrh	r0, [r3, #0]
   b7454:	f7fe fcf4 	bl	b5e40 <hal_ble_gap_disconnect>
   b7458:	a805      	add	r0, sp, #20
   b745a:	f7fe f87d 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b745e:	a803      	add	r0, sp, #12
   b7460:	f7ff fa4c 	bl	b68fc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7464:	b00e      	add	sp, #56	; 0x38
   b7466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b746a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b746c:	b123      	cbz	r3, b7478 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b746e:	a904      	add	r1, sp, #16
   b7470:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7474:	f7ff fe41 	bl	b70fa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7478:	a805      	add	r0, sp, #20
   b747a:	f7fe f86d 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b747e:	2120      	movs	r1, #32
   b7480:	2300      	movs	r3, #0
   b7482:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b7486:	4a4e      	ldr	r2, [pc, #312]	; (b75c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b7488:	9200      	str	r2, [sp, #0]
   b748a:	494c      	ldr	r1, [pc, #304]	; (b75bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b748c:	aa06      	add	r2, sp, #24
   b748e:	2001      	movs	r0, #1
   b7490:	f7fe fe50 	bl	b6134 <log_message>
   b7494:	e7e3      	b.n	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7496:	89a9      	ldrh	r1, [r5, #12]
   b7498:	4620      	mov	r0, r4
   b749a:	f7ff fb79 	bl	b6b90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b749e:	4606      	mov	r6, r0
   b74a0:	2800      	cmp	r0, #0
   b74a2:	d0dc      	beq.n	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b74a4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b74a6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b74aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b74ae:	8029      	strh	r1, [r5, #0]
   b74b0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b74b4:	429a      	cmp	r2, r3
   b74b6:	d003      	beq.n	b74c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b74b8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b74bc:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b74be:	e7f9      	b.n	b74b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b74c0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b74c4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b74c8:	45b8      	cmp	r8, r7
   b74ca:	d004      	beq.n	b74d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b74cc:	1d38      	adds	r0, r7, #4
   b74ce:	f7fe f843 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b74d2:	3708      	adds	r7, #8
   b74d4:	e7f8      	b.n	b74c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b74d6:	2300      	movs	r3, #0
   b74d8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b74da:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b74de:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b74e2:	45b8      	cmp	r8, r7
   b74e4:	d004      	beq.n	b74f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b74e6:	1d38      	adds	r0, r7, #4
   b74e8:	f7fe f836 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b74ec:	3708      	adds	r7, #8
   b74ee:	e7f8      	b.n	b74e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b74f0:	2300      	movs	r3, #0
   b74f2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b74f4:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b74f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b74f8:	b123      	cbz	r3, b7504 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b74fa:	4631      	mov	r1, r6
   b74fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7500:	f7ff fdfb 	bl	b70fa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b7504:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7506:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b750a:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b750c:	4631      	mov	r1, r6
   b750e:	f104 0018 	add.w	r0, r4, #24
   b7512:	f7ff ff38 	bl	b7386 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b7516:	2220      	movs	r2, #32
   b7518:	2300      	movs	r3, #0
   b751a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b751e:	4a29      	ldr	r2, [pc, #164]	; (b75c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7520:	e7b2      	b.n	b7488 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7522:	89a9      	ldrh	r1, [r5, #12]
   b7524:	4620      	mov	r0, r4
   b7526:	f7ff fb33 	bl	b6b90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b752a:	2800      	cmp	r0, #0
   b752c:	d097      	beq.n	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b752e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7530:	2b00      	cmp	r3, #0
   b7532:	d094      	beq.n	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7534:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7536:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7538:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b753c:	d001      	beq.n	b7542 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b753e:	2e10      	cmp	r6, #16
   b7540:	d117      	bne.n	b7572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b7542:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7544:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7546:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7548:	2506      	movs	r5, #6
                        };
   b754a:	f88d 3015 	strb.w	r3, [sp, #21]
   b754e:	9104      	str	r1, [sp, #16]
   b7550:	f88d 2014 	strb.w	r2, [sp, #20]
   b7554:	9006      	str	r0, [sp, #24]
   b7556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b755a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b755c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7560:	9508      	str	r5, [sp, #32]
   b7562:	e883 0003 	stmia.w	r3, {r0, r1}
   b7566:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7568:	a906      	add	r1, sp, #24
   b756a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b756e:	4798      	blx	r3
   b7570:	e775      	b.n	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7572:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7574:	bf01      	itttt	eq
   b7576:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7578:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b757a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b757e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7580:	bf0f      	iteee	eq
   b7582:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7586:	461a      	movne	r2, r3
   b7588:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b758a:	461d      	movne	r5, r3
   b758c:	e7dd      	b.n	b754a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b758e:	89a9      	ldrh	r1, [r5, #12]
   b7590:	4620      	mov	r0, r4
   b7592:	f7ff fafd 	bl	b6b90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7596:	4601      	mov	r1, r0
   b7598:	2800      	cmp	r0, #0
   b759a:	f43f af60 	beq.w	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b759e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b75a0:	2b00      	cmp	r3, #0
   b75a2:	f43f af5c 	beq.w	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b75a6:	686b      	ldr	r3, [r5, #4]
   b75a8:	9306      	str	r3, [sp, #24]
   b75aa:	aa06      	add	r2, sp, #24
   b75ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b75ae:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b75b2:	4798      	blx	r3
   b75b4:	e753      	b.n	b745e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b75b6:	bf00      	nop
   b75b8:	000bb79c 	.word	0x000bb79c
   b75bc:	000bb71b 	.word	0x000bb71b
   b75c0:	000bb7c2 	.word	0x000bb7c2
   b75c4:	000bb7cc 	.word	0x000bb7cc

000b75c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b75c8:	b513      	push	{r0, r1, r4, lr}
   b75ca:	460b      	mov	r3, r1
   b75cc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b75ce:	e9d0 0100 	ldrd	r0, r1, [r0]
   b75d2:	466c      	mov	r4, sp
   b75d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b75d8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b75dc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b75e0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b75e4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b75e8:	b002      	add	sp, #8
   b75ea:	bd10      	pop	{r4, pc}

000b75ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b75ec:	b538      	push	{r3, r4, r5, lr}
   b75ee:	4605      	mov	r5, r0
   b75f0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b75f2:	f7ff ffe9 	bl	b75c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b75f6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b75f8:	68a2      	ldr	r2, [r4, #8]
   b75fa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b75fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b75fe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7600:	68e2      	ldr	r2, [r4, #12]
   b7602:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7604:	60e3      	str	r3, [r4, #12]
      }
   b7606:	bd38      	pop	{r3, r4, r5, pc}

000b7608 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7608:	b570      	push	{r4, r5, r6, lr}
   b760a:	4604      	mov	r4, r0
   b760c:	b08c      	sub	sp, #48	; 0x30
   b760e:	460e      	mov	r6, r1
   b7610:	9201      	str	r2, [sp, #4]
   b7612:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7614:	f7ff fa9c 	bl	b6b50 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7618:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b761a:	9901      	ldr	r1, [sp, #4]
   b761c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7620:	f7ff f800 	bl	b6624 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7624:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7628:	b1cd      	cbz	r5, b765e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b762a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b762c:	9502      	str	r5, [sp, #8]
   b762e:	a902      	add	r1, sp, #8
   b7630:	a804      	add	r0, sp, #16
   b7632:	9303      	str	r3, [sp, #12]
   b7634:	f7ff fc90 	bl	b6f58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7638:	2300      	movs	r3, #0
	__x.swap(*this);
   b763a:	a908      	add	r1, sp, #32
   b763c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b763e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7640:	f7ff ffd4 	bl	b75ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7644:	4631      	mov	r1, r6
   b7646:	a808      	add	r0, sp, #32
   b7648:	f7ff ffd0 	bl	b75ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b764c:	a808      	add	r0, sp, #32
   b764e:	f7fd fbc1 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
   b7652:	a804      	add	r0, sp, #16
   b7654:	f7fd fbbe 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
    }
   b7658:	4620      	mov	r0, r4
   b765a:	b00c      	add	sp, #48	; 0x30
   b765c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b765e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7660:	e7ea      	b.n	b7638 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7664 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7668:	b087      	sub	sp, #28
   b766a:	461d      	mov	r5, r3
   b766c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7670:	4680      	mov	r8, r0
   b7672:	468b      	mov	fp, r1
   b7674:	4692      	mov	sl, r2
   b7676:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7678:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b767a:	2200      	movs	r2, #0
   b767c:	2068      	movs	r0, #104	; 0x68
   b767e:	9102      	str	r1, [sp, #8]
   b7680:	9204      	str	r2, [sp, #16]
   b7682:	f7fd f9fa 	bl	b4a7a <_Znwj>
	  auto __pi = ::new (__mem)
   b7686:	1e06      	subs	r6, r0, #0
   b7688:	f106 090c 	add.w	r9, r6, #12
   b768c:	d018      	beq.n	b76c0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b768e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7690:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7692:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7696:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7698:	4a15      	ldr	r2, [pc, #84]	; (b76f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b769a:	f847 2b20 	str.w	r2, [r7], #32
   b769e:	9b03      	ldr	r3, [sp, #12]
   b76a0:	9100      	str	r1, [sp, #0]
   b76a2:	465a      	mov	r2, fp
   b76a4:	4651      	mov	r1, sl
   b76a6:	4648      	mov	r0, r9
   b76a8:	f7ff ffae 	bl	b7608 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b76ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b76ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b76b0:	682b      	ldr	r3, [r5, #0]
   b76b2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b76b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b76b6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b76ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b76bc:	6823      	ldr	r3, [r4, #0]
   b76be:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b76c0:	a904      	add	r1, sp, #16
   b76c2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b76c4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b76c8:	f7ff fd06 	bl	b70d8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b76cc:	a805      	add	r0, sp, #20
   b76ce:	f7fd ff43 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b76d2:	f8d8 3000 	ldr.w	r3, [r8]
   b76d6:	b93b      	cbnz	r3, b76e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b76d8:	4a06      	ldr	r2, [pc, #24]	; (b76f4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b76da:	4907      	ldr	r1, [pc, #28]	; (b76f8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b76dc:	200a      	movs	r0, #10
}
   b76de:	b007      	add	sp, #28
   b76e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b76e4:	f7fe bd1e 	b.w	b6124 <panic_>
}
   b76e8:	b007      	add	sp, #28
   b76ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b76ee:	bf00      	nop
   b76f0:	000bb834 	.word	0x000bb834
   b76f4:	000b5da1 	.word	0x000b5da1
   b76f8:	000bb704 	.word	0x000bb704

000b76fc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b76fc:	b538      	push	{r3, r4, r5, lr}
   b76fe:	4605      	mov	r5, r0
   b7700:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7702:	f7ff ff61 	bl	b75c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7706:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7708:	68a2      	ldr	r2, [r4, #8]
   b770a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b770c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b770e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7710:	68e2      	ldr	r2, [r4, #12]
   b7712:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7714:	60e3      	str	r3, [r4, #12]
      }
   b7716:	bd38      	pop	{r3, r4, r5, pc}

000b7718 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7718:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b771a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b771c:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b771e:	3424      	adds	r4, #36	; 0x24
   b7720:	b1b9      	cbz	r1, b7752 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7722:	e9cd 1200 	strd	r1, r2, [sp]
   b7726:	a802      	add	r0, sp, #8
   b7728:	4669      	mov	r1, sp
   b772a:	f7ff fc2d 	bl	b6f88 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b772e:	2300      	movs	r3, #0
	__x.swap(*this);
   b7730:	a906      	add	r1, sp, #24
   b7732:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7734:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7736:	f7ff ffe1 	bl	b76fc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b773a:	4621      	mov	r1, r4
   b773c:	a806      	add	r0, sp, #24
   b773e:	f7ff ffdd 	bl	b76fc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7742:	a806      	add	r0, sp, #24
   b7744:	f7fd fb46 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
   b7748:	a802      	add	r0, sp, #8
   b774a:	f7fd fb43 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
}
   b774e:	b00a      	add	sp, #40	; 0x28
   b7750:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7752:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7754:	e7eb      	b.n	b772e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7756 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7756:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b775a:	4604      	mov	r4, r0
   b775c:	460d      	mov	r5, r1
   b775e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7760:	d914      	bls.n	b778c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7762:	4290      	cmp	r0, r2
   b7764:	d213      	bcs.n	b778e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7766:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b776a:	1a75      	subs	r5, r6, r1
   b776c:	f1a1 0708 	sub.w	r7, r1, #8
   b7770:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7772:	42b7      	cmp	r7, r6
   b7774:	d018      	beq.n	b77a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7776:	b11c      	cbz	r4, b7780 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7778:	4631      	mov	r1, r6
   b777a:	4620      	mov	r0, r4
   b777c:	f7ff fc31 	bl	b6fe2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7780:	1d30      	adds	r0, r6, #4
   b7782:	f7fd fee9 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7786:	3e08      	subs	r6, #8
   b7788:	3c08      	subs	r4, #8
   b778a:	e7f2      	b.n	b7772 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b778c:	d00c      	beq.n	b77a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b778e:	42b5      	cmp	r5, r6
   b7790:	d00a      	beq.n	b77a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7792:	b11c      	cbz	r4, b779c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7794:	4629      	mov	r1, r5
   b7796:	4620      	mov	r0, r4
   b7798:	f7ff fc23 	bl	b6fe2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b779c:	1d28      	adds	r0, r5, #4
   b779e:	f7fd fedb 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b77a2:	3508      	adds	r5, #8
   b77a4:	3408      	adds	r4, #8
   b77a6:	e7f2      	b.n	b778e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b77a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b77aa:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b77ac:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b77ae:	4605      	mov	r5, r0
        if (n > 0) {
   b77b0:	dd11      	ble.n	b77d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b77b2:	00f0      	lsls	r0, r6, #3
   b77b4:	f7fe fda2 	bl	b62fc <malloc>
            if (!d) {
   b77b8:	4604      	mov	r4, r0
   b77ba:	b158      	cbz	r0, b77d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b77bc:	e9d5 1200 	ldrd	r1, r2, [r5]
   b77c0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b77c4:	f7ff ffc7 	bl	b7756 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b77c8:	6828      	ldr	r0, [r5, #0]
   b77ca:	f7fe fd9f 	bl	b630c <free>
        data_ = d;
   b77ce:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b77d0:	60ae      	str	r6, [r5, #8]
        return true;
   b77d2:	2001      	movs	r0, #1
    }
   b77d4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b77d6:	2400      	movs	r4, #0
   b77d8:	e7f6      	b.n	b77c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b77da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b77da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b77dc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b77de:	6845      	ldr	r5, [r0, #4]
   b77e0:	4668      	mov	r0, sp
   b77e2:	f7ff fbfe 	bl	b6fe2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b77e6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b77ea:	4299      	cmp	r1, r3
   b77ec:	da10      	bge.n	b7810 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b77ee:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b77f0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b77f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b77f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b77fa:	4629      	mov	r1, r5
   b77fc:	f105 0008 	add.w	r0, r5, #8
   b7800:	f7ff ffa9 	bl	b7756 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7804:	b98d      	cbnz	r5, b782a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7806:	6863      	ldr	r3, [r4, #4]
   b7808:	3301      	adds	r3, #1
   b780a:	6063      	str	r3, [r4, #4]
    return true;
   b780c:	2601      	movs	r6, #1
   b780e:	e006      	b.n	b781e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7810:	3101      	adds	r1, #1
   b7812:	4620      	mov	r0, r4
   b7814:	f7ff ffc9 	bl	b77aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7818:	4606      	mov	r6, r0
   b781a:	2800      	cmp	r0, #0
   b781c:	d1e7      	bne.n	b77ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b781e:	a801      	add	r0, sp, #4
   b7820:	f7fd fe9a 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7824:	4630      	mov	r0, r6
   b7826:	b002      	add	sp, #8
   b7828:	bd70      	pop	{r4, r5, r6, pc}
   b782a:	4669      	mov	r1, sp
   b782c:	4628      	mov	r0, r5
   b782e:	f7ff fbd8 	bl	b6fe2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7832:	e7e8      	b.n	b7806 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7834 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7834:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7838:	4604      	mov	r4, r0
   b783a:	460d      	mov	r5, r1
   b783c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b783e:	d914      	bls.n	b786a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7840:	4290      	cmp	r0, r2
   b7842:	d213      	bcs.n	b786c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7844:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7848:	1a75      	subs	r5, r6, r1
   b784a:	f1a1 0708 	sub.w	r7, r1, #8
   b784e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7850:	42b7      	cmp	r7, r6
   b7852:	d018      	beq.n	b7886 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7854:	b11c      	cbz	r4, b785e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7856:	4631      	mov	r1, r6
   b7858:	4620      	mov	r0, r4
   b785a:	f7ff fbb4 	bl	b6fc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b785e:	1d30      	adds	r0, r6, #4
   b7860:	f7fd fe7a 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7864:	3e08      	subs	r6, #8
   b7866:	3c08      	subs	r4, #8
   b7868:	e7f2      	b.n	b7850 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b786a:	d00c      	beq.n	b7886 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b786c:	42b5      	cmp	r5, r6
   b786e:	d00a      	beq.n	b7886 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7870:	b11c      	cbz	r4, b787a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7872:	4629      	mov	r1, r5
   b7874:	4620      	mov	r0, r4
   b7876:	f7ff fba6 	bl	b6fc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b787a:	1d28      	adds	r0, r5, #4
   b787c:	f7fd fe6c 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7880:	3508      	adds	r5, #8
   b7882:	3408      	adds	r4, #8
   b7884:	e7f2      	b.n	b786c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7888 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7888:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b788a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b788c:	4605      	mov	r5, r0
        if (n > 0) {
   b788e:	dd11      	ble.n	b78b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7890:	00f0      	lsls	r0, r6, #3
   b7892:	f7fe fd33 	bl	b62fc <malloc>
            if (!d) {
   b7896:	4604      	mov	r4, r0
   b7898:	b158      	cbz	r0, b78b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b789a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b789e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b78a2:	f7ff ffc7 	bl	b7834 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b78a6:	6828      	ldr	r0, [r5, #0]
   b78a8:	f7fe fd30 	bl	b630c <free>
        data_ = d;
   b78ac:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b78ae:	60ae      	str	r6, [r5, #8]
        return true;
   b78b0:	2001      	movs	r0, #1
    }
   b78b2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b78b4:	2400      	movs	r4, #0
   b78b6:	e7f6      	b.n	b78a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b78b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b78b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b78ba:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b78bc:	6845      	ldr	r5, [r0, #4]
   b78be:	4668      	mov	r0, sp
   b78c0:	f7ff fb81 	bl	b6fc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78c4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b78c8:	4299      	cmp	r1, r3
   b78ca:	da10      	bge.n	b78ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b78cc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b78ce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b78d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b78d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b78d8:	4629      	mov	r1, r5
   b78da:	f105 0008 	add.w	r0, r5, #8
   b78de:	f7ff ffa9 	bl	b7834 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b78e2:	b98d      	cbnz	r5, b7908 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b78e4:	6863      	ldr	r3, [r4, #4]
   b78e6:	3301      	adds	r3, #1
   b78e8:	6063      	str	r3, [r4, #4]
    return true;
   b78ea:	2601      	movs	r6, #1
   b78ec:	e006      	b.n	b78fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78ee:	3101      	adds	r1, #1
   b78f0:	4620      	mov	r0, r4
   b78f2:	f7ff ffc9 	bl	b7888 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b78f6:	4606      	mov	r6, r0
   b78f8:	2800      	cmp	r0, #0
   b78fa:	d1e7      	bne.n	b78cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b78fc:	a801      	add	r0, sp, #4
   b78fe:	f7fd fe2b 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7902:	4630      	mov	r0, r6
   b7904:	b002      	add	sp, #8
   b7906:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7908:	4669      	mov	r1, sp
   b790a:	4628      	mov	r0, r5
   b790c:	f7ff fb5b 	bl	b6fc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7910:	e7e8      	b.n	b78e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b7914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7918:	4617      	mov	r7, r2
   b791a:	b0a1      	sub	sp, #132	; 0x84
   b791c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b791e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7920:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7922:	f7fe ffdd 	bl	b68e0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7926:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7928:	7923      	ldrb	r3, [r4, #4]
   b792a:	b953      	cbnz	r3, b7942 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b792c:	4639      	mov	r1, r7
   b792e:	4640      	mov	r0, r8
   b7930:	f7ff fb49 	bl	b6fc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7934:	a80a      	add	r0, sp, #40	; 0x28
   b7936:	f7fe ffe1 	bl	b68fc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b793a:	4640      	mov	r0, r8
   b793c:	b021      	add	sp, #132	; 0x84
   b793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7942:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7944:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7948:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b794c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b794e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7952:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7956:	9b03      	ldr	r3, [sp, #12]
   b7958:	429d      	cmp	r5, r3
   b795a:	d021      	beq.n	b79a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b795c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7960:	4658      	mov	r0, fp
   b7962:	f109 0114 	add.w	r1, r9, #20
   b7966:	f7ff f868 	bl	b6a3a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b796a:	b1b8      	cbz	r0, b799c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b796c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7970:	4650      	mov	r0, sl
   b7972:	f7ff f862 	bl	b6a3a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7976:	b188      	cbz	r0, b799c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7978:	6823      	ldr	r3, [r4, #0]
   b797a:	f8d9 2000 	ldr.w	r2, [r9]
   b797e:	4053      	eors	r3, r2
   b7980:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7984:	d10a      	bne.n	b799c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7986:	2220      	movs	r2, #32
   b7988:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b798c:	4a5e      	ldr	r2, [pc, #376]	; (b7b08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b798e:	9200      	str	r2, [sp, #0]
   b7990:	aa15      	add	r2, sp, #84	; 0x54
   b7992:	495e      	ldr	r1, [pc, #376]	; (b7b0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7994:	2032      	movs	r0, #50	; 0x32
   b7996:	f7fe fbcd 	bl	b6134 <log_message>
   b799a:	e7c7      	b.n	b792c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b799c:	3508      	adds	r5, #8
   b799e:	e7da      	b.n	b7956 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b79a0:	4650      	mov	r0, sl
   b79a2:	f7ff f81b 	bl	b69dc <_ZNK8particle7BleUuid7isValidEv>
   b79a6:	b960      	cbnz	r0, b79c2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b79a8:	4959      	ldr	r1, [pc, #356]	; (b7b10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b79aa:	2201      	movs	r2, #1
   b79ac:	a815      	add	r0, sp, #84	; 0x54
   b79ae:	ad15      	add	r5, sp, #84	; 0x54
   b79b0:	f7fe ffec 	bl	b698c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b79b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79b6:	46d4      	mov	ip, sl
   b79b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b79bc:	682b      	ldr	r3, [r5, #0]
   b79be:	f8cc 3000 	str.w	r3, [ip]
   b79c2:	6833      	ldr	r3, [r6, #0]
   b79c4:	e9d3 5300 	ldrd	r5, r3, [r3]
   b79c8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b79cc:	455d      	cmp	r5, fp
   b79ce:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b79d0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b79d2:	d06e      	beq.n	b7ab2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b79d4:	f855 0b08 	ldr.w	r0, [r5], #8
   b79d8:	f7ff f82f 	bl	b6a3a <_ZNK8particle7BleUuideqERKS0_>
   b79dc:	2800      	cmp	r0, #0
   b79de:	d0f5      	beq.n	b79cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b79e0:	f104 0a14 	add.w	sl, r4, #20
   b79e4:	4650      	mov	r0, sl
   b79e6:	f7fe fff9 	bl	b69dc <_ZNK8particle7BleUuid7isValidEv>
   b79ea:	b988      	cbnz	r0, b7a10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b79ec:	4b49      	ldr	r3, [pc, #292]	; (b7b14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b79ee:	4948      	ldr	r1, [pc, #288]	; (b7b10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b79f0:	881a      	ldrh	r2, [r3, #0]
   b79f2:	3201      	adds	r2, #1
   b79f4:	b292      	uxth	r2, r2
   b79f6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b79f8:	a815      	add	r0, sp, #84	; 0x54
   b79fa:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b79fc:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b79fe:	f7fe ffe4 	bl	b69ca <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a04:	46d4      	mov	ip, sl
   b7a06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7a0a:	682b      	ldr	r3, [r5, #0]
   b7a0c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7a10:	4b41      	ldr	r3, [pc, #260]	; (b7b18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7a12:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7a14:	2228      	movs	r2, #40	; 0x28
   b7a16:	2100      	movs	r1, #0
   b7a18:	a816      	add	r0, sp, #88	; 0x58
   b7a1a:	f001 faf2 	bl	b9002 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7a1e:	4651      	mov	r1, sl
   b7a20:	a804      	add	r0, sp, #16
   b7a22:	f7fe ffed 	bl	b6a00 <_ZN8particle7BleUuid7halUUIDEv>
   b7a26:	ab04      	add	r3, sp, #16
   b7a28:	aa18      	add	r2, sp, #96	; 0x60
   b7a2a:	f10d 0c20 	add.w	ip, sp, #32
   b7a2e:	6818      	ldr	r0, [r3, #0]
   b7a30:	6859      	ldr	r1, [r3, #4]
   b7a32:	4615      	mov	r5, r2
   b7a34:	c503      	stmia	r5!, {r0, r1}
   b7a36:	3308      	adds	r3, #8
   b7a38:	4563      	cmp	r3, ip
   b7a3a:	462a      	mov	r2, r5
   b7a3c:	d1f7      	bne.n	b7a2e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7a3e:	6818      	ldr	r0, [r3, #0]
   b7a40:	6028      	str	r0, [r5, #0]
    return value_;
   b7a42:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7a44:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7a48:	f8d9 3000 	ldr.w	r3, [r9]
   b7a4c:	8a9b      	ldrh	r3, [r3, #20]
   b7a4e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7a52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7a54:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7a56:	4b31      	ldr	r3, [pc, #196]	; (b7b1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7a58:	2200      	movs	r2, #0
   b7a5a:	1da1      	adds	r1, r4, #6
   b7a5c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7a5e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7a62:	f7fe fa1f 	bl	b5ea4 <hal_ble_gatt_server_add_characteristic>
   b7a66:	2800      	cmp	r0, #0
   b7a68:	f47f af60 	bne.w	b792c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7a6c:	2301      	movs	r3, #1
   b7a6e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7a70:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7a72:	4639      	mov	r1, r7
        return characteristics_;
   b7a74:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7a76:	a80d      	add	r0, sp, #52	; 0x34
   b7a78:	f7ff faa5 	bl	b6fc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7a7c:	4620      	mov	r0, r4
   b7a7e:	a90d      	add	r1, sp, #52	; 0x34
   b7a80:	f7ff ff1a 	bl	b78b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7a84:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7a86:	a80e      	add	r0, sp, #56	; 0x38
   b7a88:	f7fd fd66 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a8c:	2c00      	cmp	r4, #0
   b7a8e:	f47f af4d 	bne.w	b792c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7a92:	2320      	movs	r3, #32
   b7a94:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7a98:	4b21      	ldr	r3, [pc, #132]	; (b7b20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7a9a:	9300      	str	r3, [sp, #0]
   b7a9c:	aa0d      	add	r2, sp, #52	; 0x34
   b7a9e:	4623      	mov	r3, r4
   b7aa0:	e777      	b.n	b7992 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7aa2:	4639      	mov	r1, r7
   b7aa4:	4640      	mov	r0, r8
   b7aa6:	f7ff fa8e 	bl	b6fc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7aaa:	a80c      	add	r0, sp, #48	; 0x30
   b7aac:	f7fd fd54 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ab0:	e740      	b.n	b7934 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7ab2:	a80b      	add	r0, sp, #44	; 0x2c
   b7ab4:	f7ff f8f4 	bl	b6ca0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7ab8:	4651      	mov	r1, sl
   b7aba:	a815      	add	r0, sp, #84	; 0x54
   b7abc:	f7fe ffa0 	bl	b6a00 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7ac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7ac2:	2300      	movs	r3, #0
   b7ac4:	3214      	adds	r2, #20
   b7ac6:	a915      	add	r1, sp, #84	; 0x54
   b7ac8:	2001      	movs	r0, #1
   b7aca:	f7fe f9c3 	bl	b5e54 <hal_ble_gatt_server_add_service>
   b7ace:	2800      	cmp	r0, #0
   b7ad0:	d1e7      	bne.n	b7aa2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7ad2:	6835      	ldr	r5, [r6, #0]
   b7ad4:	a90b      	add	r1, sp, #44	; 0x2c
   b7ad6:	a80d      	add	r0, sp, #52	; 0x34
   b7ad8:	f7ff fa83 	bl	b6fe2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7adc:	4628      	mov	r0, r5
   b7ade:	a90d      	add	r1, sp, #52	; 0x34
   b7ae0:	f7ff fe7b 	bl	b77da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7ae4:	4605      	mov	r5, r0
   b7ae6:	a80e      	add	r0, sp, #56	; 0x38
   b7ae8:	f7fd fd36 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7aec:	2d00      	cmp	r5, #0
   b7aee:	d0d8      	beq.n	b7aa2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7af0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7af2:	6853      	ldr	r3, [r2, #4]
   b7af4:	6812      	ldr	r2, [r2, #0]
   b7af6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7afa:	3b01      	subs	r3, #1
   b7afc:	a80c      	add	r0, sp, #48	; 0x30
   b7afe:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7b02:	f7fd fd29 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b06:	e76b      	b.n	b79e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7b08:	000bb7d9 	.word	0x000bb7d9
   b7b0c:	000bb71b 	.word	0x000bb71b
   b7b10:	000bb888 	.word	0x000bb888
   b7b14:	2003e68c 	.word	0x2003e68c
   b7b18:	002c0003 	.word	0x002c0003
   b7b1c:	000b6e39 	.word	0x000b6e39
   b7b20:	000bb804 	.word	0x000bb804

000b7b24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7b24:	4802      	ldr	r0, [pc, #8]	; (b7b30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7b26:	2300      	movs	r3, #0
   b7b28:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7b2a:	f7fe ba13 	b.w	b5f54 <os_mutex_recursive_create>
   b7b2e:	bf00      	nop
   b7b30:	2003e690 	.word	0x2003e690

000b7b34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b36:	4606      	mov	r6, r0
   b7b38:	460d      	mov	r5, r1
  size_t n = 0;
   b7b3a:	188f      	adds	r7, r1, r2
   b7b3c:	2400      	movs	r4, #0
  while (size--) {
   b7b3e:	42bd      	cmp	r5, r7
   b7b40:	d00c      	beq.n	b7b5c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7b42:	6833      	ldr	r3, [r6, #0]
   b7b44:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7b48:	689b      	ldr	r3, [r3, #8]
   b7b4a:	4630      	mov	r0, r6
   b7b4c:	4798      	blx	r3
     if (chunk>=0)
   b7b4e:	1e03      	subs	r3, r0, #0
   b7b50:	db01      	blt.n	b7b56 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7b52:	441c      	add	r4, r3
  while (size--) {
   b7b54:	e7f3      	b.n	b7b3e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7b56:	2c00      	cmp	r4, #0
   b7b58:	bf08      	it	eq
   b7b5a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7b5c:	4620      	mov	r0, r4
   b7b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b60 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7b60:	b513      	push	{r0, r1, r4, lr}
   b7b62:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7b64:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7b66:	b159      	cbz	r1, b7b80 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7b68:	9101      	str	r1, [sp, #4]
   b7b6a:	f7fc ff2b 	bl	b49c4 <strlen>
   b7b6e:	6823      	ldr	r3, [r4, #0]
   b7b70:	9901      	ldr	r1, [sp, #4]
   b7b72:	68db      	ldr	r3, [r3, #12]
   b7b74:	4602      	mov	r2, r0
   b7b76:	4620      	mov	r0, r4
    }
   b7b78:	b002      	add	sp, #8
   b7b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7b7e:	4718      	bx	r3
    }
   b7b80:	b002      	add	sp, #8
   b7b82:	bd10      	pop	{r4, pc}

000b7b84 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b7b84:	6803      	ldr	r3, [r0, #0]
   b7b86:	689b      	ldr	r3, [r3, #8]
   b7b88:	4718      	bx	r3

000b7b8a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7b8a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7b8c:	210d      	movs	r1, #13
{
   b7b8e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7b90:	f7ff fff8 	bl	b7b84 <_ZN5Print5printEc>
  n += print('\n');
   b7b94:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7b96:	4604      	mov	r4, r0
  n += print('\n');
   b7b98:	4628      	mov	r0, r5
   b7b9a:	f7ff fff3 	bl	b7b84 <_ZN5Print5printEc>
  return n;
}
   b7b9e:	4420      	add	r0, r4
   b7ba0:	bd38      	pop	{r3, r4, r5, pc}

000b7ba2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7ba2:	b538      	push	{r3, r4, r5, lr}
   b7ba4:	4605      	mov	r5, r0
  return write(str);
   b7ba6:	f7ff ffdb 	bl	b7b60 <_ZN5Print5writeEPKc>
   b7baa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7bac:	4628      	mov	r0, r5
   b7bae:	f7ff ffec 	bl	b7b8a <_ZN5Print7printlnEv>
  return n;
}
   b7bb2:	4420      	add	r0, r4
   b7bb4:	bd38      	pop	{r3, r4, r5, pc}

000b7bb6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7bb6:	b530      	push	{r4, r5, lr}
   b7bb8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7bba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7bbc:	2a01      	cmp	r2, #1
  *str = '\0';
   b7bbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7bc2:	bf98      	it	ls
   b7bc4:	220a      	movls	r2, #10
   b7bc6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7bc8:	460d      	mov	r5, r1
   b7bca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7bce:	fb01 5312 	mls	r3, r1, r2, r5
   b7bd2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7bd6:	2b09      	cmp	r3, #9
   b7bd8:	bf94      	ite	ls
   b7bda:	3330      	addls	r3, #48	; 0x30
   b7bdc:	3337      	addhi	r3, #55	; 0x37
   b7bde:	b2db      	uxtb	r3, r3
  } while(n);
   b7be0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7be2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7be6:	d9ef      	bls.n	b7bc8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7be8:	4621      	mov	r1, r4
   b7bea:	f7ff ffb9 	bl	b7b60 <_ZN5Print5writeEPKc>
}
   b7bee:	b00b      	add	sp, #44	; 0x2c
   b7bf0:	bd30      	pop	{r4, r5, pc}

000b7bf2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bf6:	b086      	sub	sp, #24
   b7bf8:	af00      	add	r7, sp, #0
   b7bfa:	4605      	mov	r5, r0
   b7bfc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7bfe:	1d38      	adds	r0, r7, #4
   b7c00:	2114      	movs	r1, #20
{
   b7c02:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7c04:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7c06:	f7fe fb99 	bl	b633c <vsnprintf>

    if (n<bufsize)
   b7c0a:	2813      	cmp	r0, #19
   b7c0c:	d80e      	bhi.n	b7c2c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7c0e:	1d39      	adds	r1, r7, #4
   b7c10:	4628      	mov	r0, r5
   b7c12:	f7ff ffa5 	bl	b7b60 <_ZN5Print5writeEPKc>
   b7c16:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7c18:	b11e      	cbz	r6, b7c22 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7c1a:	4628      	mov	r0, r5
   b7c1c:	f7ff ffb5 	bl	b7b8a <_ZN5Print7printlnEv>
   b7c20:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7c22:	4620      	mov	r0, r4
   b7c24:	3718      	adds	r7, #24
   b7c26:	46bd      	mov	sp, r7
   b7c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7c2c:	f100 0308 	add.w	r3, r0, #8
   b7c30:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7c34:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7c36:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7c3a:	4622      	mov	r2, r4
   b7c3c:	1c41      	adds	r1, r0, #1
   b7c3e:	683b      	ldr	r3, [r7, #0]
   b7c40:	4668      	mov	r0, sp
   b7c42:	f7fe fb7b 	bl	b633c <vsnprintf>
  return write(str);
   b7c46:	4669      	mov	r1, sp
   b7c48:	4628      	mov	r0, r5
   b7c4a:	f7ff ff89 	bl	b7b60 <_ZN5Print5writeEPKc>
   b7c4e:	4604      	mov	r4, r0
   b7c50:	46c5      	mov	sp, r8
   b7c52:	e7e1      	b.n	b7c18 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7c54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7c54:	4b01      	ldr	r3, [pc, #4]	; (b7c5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7c56:	4a02      	ldr	r2, [pc, #8]	; (b7c60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7c58:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7c5a:	4770      	bx	lr
   b7c5c:	2003e698 	.word	0x2003e698
   b7c60:	000bb8a8 	.word	0x000bb8a8

000b7c64 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7c68:	4a15      	ldr	r2, [pc, #84]	; (b7cc0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7c6a:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7ccc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b7c6e:	e9d2 6300 	ldrd	r6, r3, [r2]
   b7c72:	1980      	adds	r0, r0, r6
   b7c74:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b7c78:	4b12      	ldr	r3, [pc, #72]	; (b7cc4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b7c7a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b7c7e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b7c82:	1986      	adds	r6, r0, r6
   b7c84:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7c88:	42bb      	cmp	r3, r7
   b7c8a:	bf08      	it	eq
   b7c8c:	42b2      	cmpeq	r2, r6
{
   b7c8e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7c90:	d013      	beq.n	b7cba <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7c92:	a903      	add	r1, sp, #12
   b7c94:	4668      	mov	r0, sp
   b7c96:	e9cd 6700 	strd	r6, r7, [sp]
   b7c9a:	f7fe fb7f 	bl	b639c <localtime_r>
	calendar_time.tm_year += 1900;
   b7c9e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7ca0:	4d09      	ldr	r5, [pc, #36]	; (b7cc8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7ca2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7ca6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7ca8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7cb2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7cb6:	6823      	ldr	r3, [r4, #0]
   b7cb8:	602b      	str	r3, [r5, #0]
    }
}
   b7cba:	b00c      	add	sp, #48	; 0x30
   b7cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7cc0:	2003e6d0 	.word	0x2003e6d0
   b7cc4:	2003e6c8 	.word	0x2003e6c8
   b7cc8:	2003e6a0 	.word	0x2003e6a0
   b7ccc:	2003e6d8 	.word	0x2003e6d8

000b7cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7cd0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7cd2:	2000      	movs	r0, #0
   b7cd4:	f7fe fb02 	bl	b62dc <spark_sync_time_pending>
   b7cd8:	b128      	cbz	r0, b7ce6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7cda:	f7fe fae7 	bl	b62ac <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7cde:	f080 0001 	eor.w	r0, r0, #1
   b7ce2:	b2c0      	uxtb	r0, r0
    }
   b7ce4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7ce6:	2001      	movs	r0, #1
   b7ce8:	e7fc      	b.n	b7ce4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b7cec <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b7cec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b7cee:	f7ff ffb9 	bl	b7c64 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b7cf2:	4b02      	ldr	r3, [pc, #8]	; (b7cfc <_ZN9TimeClass5monthEx+0x10>)
   b7cf4:	6918      	ldr	r0, [r3, #16]
}
   b7cf6:	3001      	adds	r0, #1
   b7cf8:	bd08      	pop	{r3, pc}
   b7cfa:	bf00      	nop
   b7cfc:	2003e6a0 	.word	0x2003e6a0

000b7d00 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7d00:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b7d04:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b7d0c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7d0e:	d411      	bmi.n	b7d34 <_ZN9TimeClass4zoneEf+0x34>
   b7d10:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b7d14:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7d1c:	dc0a      	bgt.n	b7d34 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b7d1e:	eddf 7a06 	vldr	s15, [pc, #24]	; b7d38 <_ZN9TimeClass4zoneEf+0x38>
   b7d22:	ee60 7a27 	vmul.f32	s15, s0, s15
   b7d26:	ee17 0a90 	vmov	r0, s15
   b7d2a:	f7fc fdef 	bl	b490c <__aeabi_f2lz>
   b7d2e:	4b03      	ldr	r3, [pc, #12]	; (b7d3c <_ZN9TimeClass4zoneEf+0x3c>)
   b7d30:	e9c3 0100 	strd	r0, r1, [r3]
}
   b7d34:	bd08      	pop	{r3, pc}
   b7d36:	bf00      	nop
   b7d38:	45610000 	.word	0x45610000
   b7d3c:	2003e6d0 	.word	0x2003e6d0

000b7d40 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7d40:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7d42:	2000      	movs	r0, #0
   b7d44:	f7fe f83c 	bl	b5dc0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7d48:	4604      	mov	r4, r0
   b7d4a:	b9a0      	cbnz	r0, b7d76 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7d4c:	f7fe f9fa 	bl	b6144 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7d50:	2801      	cmp	r0, #1
   b7d52:	d110      	bne.n	b7d76 <_ZN9TimeClass7isValidEv+0x36>
   b7d54:	4620      	mov	r0, r4
   b7d56:	f7fe fa25 	bl	b61a4 <system_thread_get_state>
   b7d5a:	b960      	cbnz	r0, b7d76 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7d5c:	f7ff ffb8 	bl	b7cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7d60:	b910      	cbnz	r0, b7d68 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7d62:	f7fe fa9b 	bl	b629c <spark_process>
        while (_while() && !_condition()) {
   b7d66:	e7f9      	b.n	b7d5c <_ZN9TimeClass7isValidEv+0x1c>
   b7d68:	f7ff ffb2 	bl	b7cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7d70:	2000      	movs	r0, #0
   b7d72:	f7fe b825 	b.w	b5dc0 <hal_rtc_time_is_valid>
}
   b7d76:	4620      	mov	r0, r4
   b7d78:	bd10      	pop	{r4, pc}

000b7d7a <_ZN9TimeClass3nowEv>:
{
   b7d7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7d7c:	f7ff ffe0 	bl	b7d40 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7d80:	2210      	movs	r2, #16
   b7d82:	2100      	movs	r1, #0
   b7d84:	4668      	mov	r0, sp
   b7d86:	f001 f93c 	bl	b9002 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7d8a:	2100      	movs	r1, #0
   b7d8c:	4668      	mov	r0, sp
   b7d8e:	f7fe f81f 	bl	b5dd0 <hal_rtc_get_time>
}
   b7d92:	9800      	ldr	r0, [sp, #0]
   b7d94:	b005      	add	sp, #20
   b7d96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d9c <_ZN9TimeClass4hourEv>:
{
   b7d9c:	b508      	push	{r3, lr}
	return hour(now());
   b7d9e:	f7ff ffec 	bl	b7d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7da2:	17c1      	asrs	r1, r0, #31
   b7da4:	f7ff ff5e 	bl	b7c64 <_ZL22Refresh_UnixTime_Cachex>
}
   b7da8:	4b01      	ldr	r3, [pc, #4]	; (b7db0 <_ZN9TimeClass4hourEv+0x14>)
   b7daa:	6898      	ldr	r0, [r3, #8]
   b7dac:	bd08      	pop	{r3, pc}
   b7dae:	bf00      	nop
   b7db0:	2003e6a0 	.word	0x2003e6a0

000b7db4 <_ZN9TimeClass6minuteEv>:
{
   b7db4:	b508      	push	{r3, lr}
	return minute(now());
   b7db6:	f7ff ffe0 	bl	b7d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7dba:	17c1      	asrs	r1, r0, #31
   b7dbc:	f7ff ff52 	bl	b7c64 <_ZL22Refresh_UnixTime_Cachex>
}
   b7dc0:	4b01      	ldr	r3, [pc, #4]	; (b7dc8 <_ZN9TimeClass6minuteEv+0x14>)
   b7dc2:	6858      	ldr	r0, [r3, #4]
   b7dc4:	bd08      	pop	{r3, pc}
   b7dc6:	bf00      	nop
   b7dc8:	2003e6a0 	.word	0x2003e6a0

000b7dcc <_ZN9TimeClass6secondEv>:
{
   b7dcc:	b508      	push	{r3, lr}
	return second(now());
   b7dce:	f7ff ffd4 	bl	b7d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7dd2:	17c1      	asrs	r1, r0, #31
   b7dd4:	f7ff ff46 	bl	b7c64 <_ZL22Refresh_UnixTime_Cachex>
}
   b7dd8:	4b01      	ldr	r3, [pc, #4]	; (b7de0 <_ZN9TimeClass6secondEv+0x14>)
   b7dda:	6818      	ldr	r0, [r3, #0]
   b7ddc:	bd08      	pop	{r3, pc}
   b7dde:	bf00      	nop
   b7de0:	2003e6a0 	.word	0x2003e6a0

000b7de4 <_ZN9TimeClass3dayEv>:
{
   b7de4:	b508      	push	{r3, lr}
	return day(now());
   b7de6:	f7ff ffc8 	bl	b7d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7dea:	17c1      	asrs	r1, r0, #31
   b7dec:	f7ff ff3a 	bl	b7c64 <_ZL22Refresh_UnixTime_Cachex>
}
   b7df0:	4b01      	ldr	r3, [pc, #4]	; (b7df8 <_ZN9TimeClass3dayEv+0x14>)
   b7df2:	68d8      	ldr	r0, [r3, #12]
   b7df4:	bd08      	pop	{r3, pc}
   b7df6:	bf00      	nop
   b7df8:	2003e6a0 	.word	0x2003e6a0

000b7dfc <_ZN9TimeClass5monthEv>:
{
   b7dfc:	b508      	push	{r3, lr}
	return month(now());
   b7dfe:	f7ff ffbc 	bl	b7d7a <_ZN9TimeClass3nowEv>
}
   b7e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b7e06:	17c1      	asrs	r1, r0, #31
   b7e08:	f7ff bf70 	b.w	b7cec <_ZN9TimeClass5monthEx>

000b7e0c <_ZN9TimeClass4yearEv>:
{
   b7e0c:	b508      	push	{r3, lr}
	return year(now());
   b7e0e:	f7ff ffb4 	bl	b7d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7e12:	17c1      	asrs	r1, r0, #31
   b7e14:	f7ff ff26 	bl	b7c64 <_ZL22Refresh_UnixTime_Cachex>
}
   b7e18:	4b01      	ldr	r3, [pc, #4]	; (b7e20 <_ZN9TimeClass4yearEv+0x14>)
   b7e1a:	6958      	ldr	r0, [r3, #20]
   b7e1c:	bd08      	pop	{r3, pc}
   b7e1e:	bf00      	nop
   b7e20:	2003e6a0 	.word	0x2003e6a0

000b7e24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7e24:	4b02      	ldr	r3, [pc, #8]	; (b7e30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7e26:	681a      	ldr	r2, [r3, #0]
   b7e28:	4b02      	ldr	r3, [pc, #8]	; (b7e34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7e2a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7e2c:	4770      	bx	lr
   b7e2e:	bf00      	nop
   b7e30:	2003da38 	.word	0x2003da38
   b7e34:	2003e69c 	.word	0x2003e69c

000b7e38 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7e38:	2100      	movs	r1, #0
   b7e3a:	f7fe b993 	b.w	b6164 <system_delay_ms>
	...

000b7e40 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7e40:	4b01      	ldr	r3, [pc, #4]	; (b7e48 <_GLOBAL__sub_I_RGB+0x8>)
   b7e42:	2200      	movs	r2, #0
   b7e44:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7e46:	4770      	bx	lr
   b7e48:	2003e6e0 	.word	0x2003e6e0

000b7e4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7e4c:	4b01      	ldr	r3, [pc, #4]	; (b7e54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7e4e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7e50:	4770      	bx	lr
   b7e52:	bf00      	nop
   b7e54:	2003da3c 	.word	0x2003da3c

000b7e58 <serialEventRun>:
{
   b7e58:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7e5a:	4b0b      	ldr	r3, [pc, #44]	; (b7e88 <serialEventRun+0x30>)
   b7e5c:	b143      	cbz	r3, b7e70 <serialEventRun+0x18>
   b7e5e:	f000 fc03 	bl	b8668 <_Z16_fetch_usbserialv>
   b7e62:	6803      	ldr	r3, [r0, #0]
   b7e64:	691b      	ldr	r3, [r3, #16]
   b7e66:	4798      	blx	r3
   b7e68:	2800      	cmp	r0, #0
   b7e6a:	dd01      	ble.n	b7e70 <serialEventRun+0x18>
        serialEvent();
   b7e6c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7e70:	4b06      	ldr	r3, [pc, #24]	; (b7e8c <serialEventRun+0x34>)
   b7e72:	b143      	cbz	r3, b7e86 <serialEventRun+0x2e>
   b7e74:	f000 ff08 	bl	b8c88 <_Z22__fetch_global_Serial1v>
   b7e78:	6803      	ldr	r3, [r0, #0]
   b7e7a:	691b      	ldr	r3, [r3, #16]
   b7e7c:	4798      	blx	r3
   b7e7e:	2800      	cmp	r0, #0
   b7e80:	dd01      	ble.n	b7e86 <serialEventRun+0x2e>
        serialEvent1();
   b7e82:	f3af 8000 	nop.w
}
   b7e86:	bd08      	pop	{r3, pc}
	...

000b7e90 <_post_loop>:
{
   b7e90:	b508      	push	{r3, lr}
	serialEventRun();
   b7e92:	f7ff ffe1 	bl	b7e58 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7e96:	f7fd ff8b 	bl	b5db0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7e9a:	4b01      	ldr	r3, [pc, #4]	; (b7ea0 <_post_loop+0x10>)
   b7e9c:	6018      	str	r0, [r3, #0]
}
   b7e9e:	bd08      	pop	{r3, pc}
   b7ea0:	2003e744 	.word	0x2003e744

000b7ea4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7ea4:	4805      	ldr	r0, [pc, #20]	; (b7ebc <_Z33system_initialize_user_backup_ramv+0x18>)
   b7ea6:	4a06      	ldr	r2, [pc, #24]	; (b7ec0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7ea8:	4906      	ldr	r1, [pc, #24]	; (b7ec4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7eaa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7eac:	1a12      	subs	r2, r2, r0
   b7eae:	f001 f880 	bl	b8fb2 <memcpy>
    __backup_sram_signature = signature;
   b7eb2:	4b05      	ldr	r3, [pc, #20]	; (b7ec8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7eb4:	4a05      	ldr	r2, [pc, #20]	; (b7ecc <_Z33system_initialize_user_backup_ramv+0x28>)
   b7eb6:	601a      	str	r2, [r3, #0]
}
   b7eb8:	bd08      	pop	{r3, pc}
   b7eba:	bf00      	nop
   b7ebc:	2003f400 	.word	0x2003f400
   b7ec0:	2003f404 	.word	0x2003f404
   b7ec4:	000bc208 	.word	0x000bc208
   b7ec8:	2003f400 	.word	0x2003f400
   b7ecc:	9a271c1e 	.word	0x9a271c1e

000b7ed0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7ed0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7ed2:	2300      	movs	r3, #0
   b7ed4:	9300      	str	r3, [sp, #0]
   b7ed6:	461a      	mov	r2, r3
   b7ed8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7edc:	f7fe f974 	bl	b61c8 <system_ctrl_set_result>
}
   b7ee0:	b003      	add	sp, #12
   b7ee2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7ee8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7ee8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7eea:	8843      	ldrh	r3, [r0, #2]
   b7eec:	2b0a      	cmp	r3, #10
   b7eee:	d008      	beq.n	b7f02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7ef0:	2b50      	cmp	r3, #80	; 0x50
   b7ef2:	d10b      	bne.n	b7f0c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7ef4:	4b09      	ldr	r3, [pc, #36]	; (b7f1c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7ef6:	681b      	ldr	r3, [r3, #0]
   b7ef8:	b14b      	cbz	r3, b7f0e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7efa:	b003      	add	sp, #12
   b7efc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7f00:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7f02:	f7ff ffe5 	bl	b7ed0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7f06:	b003      	add	sp, #12
   b7f08:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7f0c:	2300      	movs	r3, #0
   b7f0e:	9300      	str	r3, [sp, #0]
   b7f10:	461a      	mov	r2, r3
   b7f12:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7f16:	f7fe f957 	bl	b61c8 <system_ctrl_set_result>
}
   b7f1a:	e7f4      	b.n	b7f06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7f1c:	2003e6f4 	.word	0x2003e6f4

000b7f20 <module_user_init_hook>:
{
   b7f20:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7f22:	4812      	ldr	r0, [pc, #72]	; (b7f6c <module_user_init_hook+0x4c>)
   b7f24:	2100      	movs	r1, #0
   b7f26:	f7fe fa31 	bl	b638c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7f2a:	4b11      	ldr	r3, [pc, #68]	; (b7f70 <module_user_init_hook+0x50>)
   b7f2c:	681a      	ldr	r2, [r3, #0]
   b7f2e:	4b11      	ldr	r3, [pc, #68]	; (b7f74 <module_user_init_hook+0x54>)
   b7f30:	429a      	cmp	r2, r3
   b7f32:	4b11      	ldr	r3, [pc, #68]	; (b7f78 <module_user_init_hook+0x58>)
   b7f34:	bf0c      	ite	eq
   b7f36:	2201      	moveq	r2, #1
   b7f38:	2200      	movne	r2, #0
   b7f3a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7f3c:	d001      	beq.n	b7f42 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7f3e:	f7ff ffb1 	bl	b7ea4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7f42:	f7fd ff25 	bl	b5d90 <HAL_RNG_GetRandomNumber>
   b7f46:	4604      	mov	r4, r0
    srand(seed);
   b7f48:	f001 f864 	bl	b9014 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7f4c:	4b0b      	ldr	r3, [pc, #44]	; (b7f7c <module_user_init_hook+0x5c>)
   b7f4e:	b113      	cbz	r3, b7f56 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7f50:	4620      	mov	r0, r4
   b7f52:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7f56:	2100      	movs	r1, #0
   b7f58:	4808      	ldr	r0, [pc, #32]	; (b7f7c <module_user_init_hook+0x5c>)
   b7f5a:	f7fe f9c7 	bl	b62ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7f62:	4807      	ldr	r0, [pc, #28]	; (b7f80 <module_user_init_hook+0x60>)
   b7f64:	2100      	movs	r1, #0
   b7f66:	f7fe b925 	b.w	b61b4 <system_ctrl_set_app_request_handler>
   b7f6a:	bf00      	nop
   b7f6c:	000b7e4d 	.word	0x000b7e4d
   b7f70:	2003f400 	.word	0x2003f400
   b7f74:	9a271c1e 	.word	0x9a271c1e
   b7f78:	2003e6f0 	.word	0x2003e6f0
   b7f7c:	00000000 	.word	0x00000000
   b7f80:	000b7ee9 	.word	0x000b7ee9

000b7f84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7f84:	4770      	bx	lr

000b7f86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7f86:	2000      	movs	r0, #0
   b7f88:	4770      	bx	lr

000b7f8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7f8a:	b510      	push	{r4, lr}
   b7f8c:	2110      	movs	r1, #16
   b7f8e:	4604      	mov	r4, r0
   b7f90:	f7fc fd77 	bl	b4a82 <_ZdlPvj>
   b7f94:	4620      	mov	r0, r4
   b7f96:	bd10      	pop	{r4, pc}

000b7f98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7f98:	b508      	push	{r3, lr}
      { delete this; }
   b7f9a:	f7ff fff6 	bl	b7f8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7f9e:	bd08      	pop	{r3, pc}

000b7fa0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7fa0:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7fa2:	2200      	movs	r2, #0
   b7fa4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7fa8:	6002      	str	r2, [r0, #0]
   b7faa:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7fac:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fae:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7fb0:	680c      	ldr	r4, [r1, #0]
   b7fb2:	8085      	strh	r5, [r0, #4]
   b7fb4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fb6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7fb8:	bd30      	pop	{r4, r5, pc}

000b7fba <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7fba:	b510      	push	{r4, lr}
   b7fbc:	4604      	mov	r4, r0
    free((void*)msg_);
   b7fbe:	6800      	ldr	r0, [r0, #0]
   b7fc0:	f7fe f9a4 	bl	b630c <free>
}
   b7fc4:	4620      	mov	r0, r4
   b7fc6:	bd10      	pop	{r4, pc}

000b7fc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7fc8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7fca:	68c4      	ldr	r4, [r0, #12]
   b7fcc:	b1f4      	cbz	r4, b800c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7fce:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7fd0:	2b02      	cmp	r3, #2
   b7fd2:	d103      	bne.n	b7fdc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7fd4:	f104 000c 	add.w	r0, r4, #12
   b7fd8:	f7ff ffef 	bl	b7fba <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7fdc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7fde:	b135      	cbz	r5, b7fee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7fe0:	4628      	mov	r0, r5
   b7fe2:	f7fc fef7 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
   b7fe6:	2110      	movs	r1, #16
   b7fe8:	4628      	mov	r0, r5
   b7fea:	f7fc fd4a 	bl	b4a82 <_ZdlPvj>
   b7fee:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7ff0:	b135      	cbz	r5, b8000 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7ff2:	4628      	mov	r0, r5
   b7ff4:	f7fc feee 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
   b7ff8:	2110      	movs	r1, #16
   b7ffa:	4628      	mov	r0, r5
   b7ffc:	f7fc fd41 	bl	b4a82 <_ZdlPvj>
   b8000:	4620      	mov	r0, r4
   b8002:	2114      	movs	r1, #20
   b8004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8008:	f7fc bd3b 	b.w	b4a82 <_ZdlPvj>
   b800c:	bd38      	pop	{r3, r4, r5, pc}

000b800e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b800e:	680b      	ldr	r3, [r1, #0]
   b8010:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8012:	684b      	ldr	r3, [r1, #4]
   b8014:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8016:	b113      	cbz	r3, b801e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b8018:	685a      	ldr	r2, [r3, #4]
   b801a:	3201      	adds	r2, #1
   b801c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b801e:	4770      	bx	lr

000b8020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b8020:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8022:	4604      	mov	r4, r0
   b8024:	4668      	mov	r0, sp
   b8026:	460d      	mov	r5, r1
   b8028:	f7ff fff1 	bl	b800e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b802c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b802e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8030:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b8032:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8034:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8036:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b8038:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b803a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b803c:	f7fd fa8c 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b8040:	b135      	cbz	r5, b8050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b8042:	1d28      	adds	r0, r5, #4
   b8044:	f7fd fa88 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8048:	2108      	movs	r1, #8
   b804a:	4628      	mov	r0, r5
   b804c:	f7fc fd19 	bl	b4a82 <_ZdlPvj>
        return p;
    }
   b8050:	4620      	mov	r0, r4
   b8052:	b003      	add	sp, #12
   b8054:	bd30      	pop	{r4, r5, pc}

000b8056 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b8056:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8058:	b510      	push	{r4, lr}
      if (_M_empty())
   b805a:	b90a      	cbnz	r2, b8060 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b805c:	f000 fe76 	bl	b8d4c <_ZSt25__throw_bad_function_callv>
    }
   b8060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8064:	68c3      	ldr	r3, [r0, #12]
   b8066:	4718      	bx	r3

000b8068 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8068:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b806a:	6800      	ldr	r0, [r0, #0]
   b806c:	f100 0110 	add.w	r1, r0, #16
   b8070:	f7ff fff1 	bl	b8056 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8074:	bd08      	pop	{r3, pc}

000b8076 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b8076:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8078:	b510      	push	{r4, lr}
      if (_M_empty())
   b807a:	b90a      	cbnz	r2, b8080 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b807c:	f000 fe66 	bl	b8d4c <_ZSt25__throw_bad_function_callv>
    }
   b8080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8084:	68c3      	ldr	r3, [r0, #12]
   b8086:	4718      	bx	r3

000b8088 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8088:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b808a:	6800      	ldr	r0, [r0, #0]
   b808c:	f100 0110 	add.w	r1, r0, #16
   b8090:	f7ff fff1 	bl	b8076 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8094:	bd08      	pop	{r3, pc}
	...

000b8098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8098:	b538      	push	{r3, r4, r5, lr}
   b809a:	2300      	movs	r3, #0
   b809c:	4604      	mov	r4, r0
   b809e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b80a0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b80a2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b80a4:	f7fc fce9 	bl	b4a7a <_Znwj>
   b80a8:	b128      	cbz	r0, b80b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b80aa:	2301      	movs	r3, #1
   b80ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b80b0:	4b02      	ldr	r3, [pc, #8]	; (b80bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b80b2:	6003      	str	r3, [r0, #0]
   b80b4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b80b6:	6020      	str	r0, [r4, #0]
	}
   b80b8:	4620      	mov	r0, r4
   b80ba:	bd38      	pop	{r3, r4, r5, pc}
   b80bc:	000bb8d0 	.word	0x000bb8d0

000b80c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b80c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b80c2:	2300      	movs	r3, #0
   b80c4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b80c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b80c8:	4604      	mov	r4, r0
   b80ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b80cc:	b12b      	cbz	r3, b80da <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b80ce:	2202      	movs	r2, #2
   b80d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b80d2:	68eb      	ldr	r3, [r5, #12]
   b80d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b80d6:	68ab      	ldr	r3, [r5, #8]
   b80d8:	60a3      	str	r3, [r4, #8]
    }
   b80da:	4620      	mov	r0, r4
   b80dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b80e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b80e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b80e2:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b80e4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b80e6:	4668      	mov	r0, sp
   b80e8:	f7ff ff5a 	bl	b7fa0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b80ec:	f04f 0302 	mov.w	r3, #2
   b80f0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b80f4:	2a00      	cmp	r2, #0
   b80f6:	d103      	bne.n	b8100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b80f8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b80fc:	2900      	cmp	r1, #0
   b80fe:	d1f7      	bne.n	b80f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8100:	d125      	bne.n	b814e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b8102:	f104 050c 	add.w	r5, r4, #12
   b8106:	4669      	mov	r1, sp
   b8108:	4628      	mov	r0, r5
   b810a:	f7ff ff49 	bl	b7fa0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b810e:	f3bf 8f5b 	dmb	ish
   b8112:	2301      	movs	r3, #1
   b8114:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8116:	2000      	movs	r0, #0
   b8118:	f104 0308 	add.w	r3, r4, #8
   b811c:	f3bf 8f5b 	dmb	ish
   b8120:	e853 6f00 	ldrex	r6, [r3]
   b8124:	e843 0200 	strex	r2, r0, [r3]
   b8128:	2a00      	cmp	r2, #0
   b812a:	d1f9      	bne.n	b8120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b812c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8130:	b16e      	cbz	r6, b814e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b8132:	f7fe f827 	bl	b6184 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8136:	b178      	cbz	r0, b8158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8138:	4629      	mov	r1, r5
   b813a:	4630      	mov	r0, r6
   b813c:	f7ff ff8b 	bl	b8056 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b8140:	4630      	mov	r0, r6
   b8142:	f7fc fe47 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8146:	2110      	movs	r1, #16
   b8148:	4630      	mov	r0, r6
   b814a:	f7fc fc9a 	bl	b4a82 <_ZdlPvj>
        p_->setError(std::move(error));
   b814e:	4668      	mov	r0, sp
   b8150:	f7ff ff33 	bl	b7fba <_ZN8particle5ErrorD1Ev>
    }
   b8154:	b009      	add	sp, #36	; 0x24
   b8156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8158:	4631      	mov	r1, r6
   b815a:	a802      	add	r0, sp, #8
   b815c:	f7ff ffb0 	bl	b80c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8160:	68e0      	ldr	r0, [r4, #12]
   b8162:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8166:	b108      	cbz	r0, b816c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b8168:	f000 ff9a 	bl	b90a0 <strdup>
        type_(type) {
   b816c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b816e:	2010      	movs	r0, #16
   b8170:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8174:	f7fc fc81 	bl	b4a7a <_Znwj>
   b8178:	4605      	mov	r5, r0
   b817a:	b1e8      	cbz	r0, b81b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b817c:	2700      	movs	r7, #0
   b817e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8180:	2018      	movs	r0, #24
   b8182:	f7fc fc7a 	bl	b4a7a <_Znwj>
   b8186:	4604      	mov	r4, r0
   b8188:	b188      	cbz	r0, b81ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b818a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b818c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b818e:	a802      	add	r0, sp, #8
   b8190:	f7ff fa1a 	bl	b75c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8194:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8196:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8198:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b819a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b819c:	9204      	str	r2, [sp, #16]
   b819e:	a906      	add	r1, sp, #24
   b81a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b81a2:	60e3      	str	r3, [r4, #12]
   b81a4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b81a8:	9205      	str	r2, [sp, #20]
   b81aa:	f7ff fef9 	bl	b7fa0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b81ae:	4b08      	ldr	r3, [pc, #32]	; (b81d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b81b0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b81b2:	4b08      	ldr	r3, [pc, #32]	; (b81d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81b4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b81b6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b81b8:	a806      	add	r0, sp, #24
   b81ba:	f7ff fefe 	bl	b7fba <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b81be:	a802      	add	r0, sp, #8
   b81c0:	f7fc fe08 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b81c4:	2200      	movs	r2, #0
   b81c6:	4629      	mov	r1, r5
   b81c8:	4803      	ldr	r0, [pc, #12]	; (b81d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b81ca:	f7fd ffe3 	bl	b6194 <application_thread_invoke>
   b81ce:	e7b7      	b.n	b8140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b81d0:	000b8069 	.word	0x000b8069
   b81d4:	000b82ed 	.word	0x000b82ed
   b81d8:	000b87b1 	.word	0x000b87b1

000b81dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b81dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81e0:	b08b      	sub	sp, #44	; 0x2c
   b81e2:	4605      	mov	r5, r0
   b81e4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b81e8:	460f      	mov	r7, r1
   b81ea:	4690      	mov	r8, r2
   b81ec:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b81ee:	f7fe f85d 	bl	b62ac <spark_cloud_flag_connected>
   b81f2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b81f4:	4683      	mov	fp, r0
   b81f6:	bb38      	cbnz	r0, b8248 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b81f8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b81fc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b81fe:	a905      	add	r1, sp, #20
   b8200:	4630      	mov	r0, r6
   b8202:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8206:	f7ff fecb 	bl	b7fa0 <_ZN8particle5ErrorC1EOS0_>
   b820a:	2014      	movs	r0, #20
   b820c:	f7fc fc35 	bl	b4a7a <_Znwj>
   b8210:	4604      	mov	r4, r0
   b8212:	b148      	cbz	r0, b8228 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b8214:	2302      	movs	r3, #2
   b8216:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8218:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b821a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b821e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8220:	4631      	mov	r1, r6
   b8222:	300c      	adds	r0, #12
   b8224:	f7ff febc 	bl	b7fa0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8228:	4628      	mov	r0, r5
	: __shared_count(__p)
   b822a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b822c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8230:	f7ff ff32 	bl	b8098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8234:	4630      	mov	r0, r6
   b8236:	f7ff fec0 	bl	b7fba <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b823a:	a805      	add	r0, sp, #20
   b823c:	f7ff febd 	bl	b7fba <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8240:	4628      	mov	r0, r5
   b8242:	b00b      	add	sp, #44	; 0x2c
   b8244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8248:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b824a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b824c:	2014      	movs	r0, #20
   b824e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b8252:	9307      	str	r3, [sp, #28]
   b8254:	f7fc fc11 	bl	b4a7a <_Znwj>
   b8258:	4601      	mov	r1, r0
   b825a:	b118      	cbz	r0, b8264 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b825c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8260:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8262:	7044      	strb	r4, [r0, #1]
   b8264:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8266:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8268:	f7ff ff16 	bl	b8098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b826c:	4b1e      	ldr	r3, [pc, #120]	; (b82e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b826e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8270:	2008      	movs	r0, #8
   b8272:	f7fc fc02 	bl	b4a7a <_Znwj>
   b8276:	4604      	mov	r4, r0
   b8278:	b110      	cbz	r0, b8280 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b827a:	a903      	add	r1, sp, #12
   b827c:	f7ff fec7 	bl	b800e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8280:	9600      	str	r6, [sp, #0]
   b8282:	fa5f f38a 	uxtb.w	r3, sl
   b8286:	464a      	mov	r2, r9
   b8288:	4641      	mov	r1, r8
   b828a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b828c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b828e:	f7fe f815 	bl	b62bc <spark_send_event>
   b8292:	b9b8      	cbnz	r0, b82c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8294:	9b03      	ldr	r3, [sp, #12]
   b8296:	785b      	ldrb	r3, [r3, #1]
   b8298:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b829c:	b993      	cbnz	r3, b82c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b829e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b82a2:	a905      	add	r1, sp, #20
   b82a4:	a803      	add	r0, sp, #12
   b82a6:	9205      	str	r2, [sp, #20]
   b82a8:	f8ad 3018 	strh.w	r3, [sp, #24]
   b82ac:	f7ff ff18 	bl	b80e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b82b0:	a805      	add	r0, sp, #20
   b82b2:	f7ff fe82 	bl	b7fba <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b82b6:	a805      	add	r0, sp, #20
   b82b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b82ba:	f7ff feb1 	bl	b8020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b82be:	a806      	add	r0, sp, #24
   b82c0:	f7fd f94a 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82c4:	a903      	add	r1, sp, #12
   b82c6:	a805      	add	r0, sp, #20
   b82c8:	f7ff fea1 	bl	b800e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b82cc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b82ce:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b82d0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b82d2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b82d4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b82d6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b82d8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b82da:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b82dc:	f7fd f93c 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82e0:	a804      	add	r0, sp, #16
   b82e2:	f7fd f939 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b82e6:	e7ab      	b.n	b8240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b82e8:	000b8369 	.word	0x000b8369

000b82ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b82ec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b82ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82f0:	4605      	mov	r5, r0
	switch (__op)
   b82f2:	d103      	bne.n	b82fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b82f4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b82f6:	6003      	str	r3, [r0, #0]
      }
   b82f8:	2000      	movs	r0, #0
   b82fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b82fc:	2a02      	cmp	r2, #2
   b82fe:	d010      	beq.n	b8322 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8300:	2a03      	cmp	r2, #3
   b8302:	d1f9      	bne.n	b82f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8304:	6804      	ldr	r4, [r0, #0]
   b8306:	2c00      	cmp	r4, #0
   b8308:	d0f6      	beq.n	b82f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b830a:	f104 0010 	add.w	r0, r4, #16
   b830e:	f7ff fe54 	bl	b7fba <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8312:	4620      	mov	r0, r4
   b8314:	f7fc fd5e 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8318:	2118      	movs	r1, #24
   b831a:	4620      	mov	r0, r4
   b831c:	f7fc fbb1 	bl	b4a82 <_ZdlPvj>
   b8320:	e7ea      	b.n	b82f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8322:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b8324:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8326:	f7fc fba8 	bl	b4a7a <_Znwj>
   b832a:	4604      	mov	r4, r0
   b832c:	b150      	cbz	r0, b8344 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b832e:	4631      	mov	r1, r6
   b8330:	f7ff fec6 	bl	b80c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8334:	6930      	ldr	r0, [r6, #16]
   b8336:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b833a:	b108      	cbz	r0, b8340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b833c:	f000 feb0 	bl	b90a0 <strdup>
        type_(type) {
   b8340:	6120      	str	r0, [r4, #16]
   b8342:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b8344:	602c      	str	r4, [r5, #0]
	}
   b8346:	e7d7      	b.n	b82f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8348 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8348:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b834a:	2300      	movs	r3, #0
   b834c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b834e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8350:	4604      	mov	r4, r0
   b8352:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8354:	b12b      	cbz	r3, b8362 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8356:	2202      	movs	r2, #2
   b8358:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b835a:	68eb      	ldr	r3, [r5, #12]
   b835c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b835e:	68ab      	ldr	r3, [r5, #8]
   b8360:	60a3      	str	r3, [r4, #8]
    }
   b8362:	4620      	mov	r0, r4
   b8364:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8368 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8368:	b5f0      	push	{r4, r5, r6, r7, lr}
   b836a:	b089      	sub	sp, #36	; 0x24
   b836c:	4604      	mov	r4, r0
   b836e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8370:	a801      	add	r0, sp, #4
   b8372:	4611      	mov	r1, r2
   b8374:	f7ff fe54 	bl	b8020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b8378:	b1a4      	cbz	r4, b83a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b837a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b837c:	b11d      	cbz	r5, b8386 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b837e:	4628      	mov	r0, r5
   b8380:	f000 fe8e 	bl	b90a0 <strdup>
   b8384:	4605      	mov	r5, r0
   b8386:	a801      	add	r0, sp, #4
   b8388:	a903      	add	r1, sp, #12
        type_(type) {
   b838a:	9503      	str	r5, [sp, #12]
   b838c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8390:	f7ff fea6 	bl	b80e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8394:	a803      	add	r0, sp, #12
   b8396:	f7ff fe10 	bl	b7fba <_ZN8particle5ErrorD1Ev>
   b839a:	a802      	add	r0, sp, #8
   b839c:	f7fd f8dc 	bl	b5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b83a0:	b009      	add	sp, #36	; 0x24
   b83a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b83a4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b83a6:	2301      	movs	r3, #1
   b83a8:	e8d5 2f4f 	ldrexb	r2, [r5]
   b83ac:	2a00      	cmp	r2, #0
   b83ae:	d103      	bne.n	b83b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b83b0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b83b4:	2900      	cmp	r1, #0
   b83b6:	d1f7      	bne.n	b83a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b83b8:	d1ef      	bne.n	b839a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b83ba:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b83bc:	f3bf 8f5b 	dmb	ish
   b83c0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b83c2:	1d2b      	adds	r3, r5, #4
   b83c4:	f3bf 8f5b 	dmb	ish
   b83c8:	e853 6f00 	ldrex	r6, [r3]
   b83cc:	e843 4200 	strex	r2, r4, [r3]
   b83d0:	2a00      	cmp	r2, #0
   b83d2:	d1f9      	bne.n	b83c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b83d4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b83d8:	2e00      	cmp	r6, #0
   b83da:	d0de      	beq.n	b839a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b83dc:	4620      	mov	r0, r4
   b83de:	f7fd fed1 	bl	b6184 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b83e2:	4607      	mov	r7, r0
   b83e4:	b160      	cbz	r0, b8400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b83e6:	f105 010c 	add.w	r1, r5, #12
   b83ea:	4630      	mov	r0, r6
   b83ec:	f7ff fe43 	bl	b8076 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b83f0:	4630      	mov	r0, r6
   b83f2:	f7fc fcef 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b83f6:	2110      	movs	r1, #16
   b83f8:	4630      	mov	r0, r6
   b83fa:	f7fc fb42 	bl	b4a82 <_ZdlPvj>
   b83fe:	e7cc      	b.n	b839a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8400:	4631      	mov	r1, r6
   b8402:	a803      	add	r0, sp, #12
   b8404:	f7ff ffa0 	bl	b8348 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8408:	7b2b      	ldrb	r3, [r5, #12]
   b840a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b840e:	2010      	movs	r0, #16
   b8410:	f7fc fb33 	bl	b4a7a <_Znwj>
   b8414:	4605      	mov	r5, r0
   b8416:	b1d0      	cbz	r0, b844e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8418:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b841a:	2014      	movs	r0, #20
   b841c:	f7fc fb2d 	bl	b4a7a <_Znwj>
   b8420:	4604      	mov	r4, r0
   b8422:	b178      	cbz	r0, b8444 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b8424:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8426:	4601      	mov	r1, r0
   b8428:	a803      	add	r0, sp, #12
   b842a:	f7ff f8cd 	bl	b75c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b842e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8430:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8432:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8434:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8436:	9205      	str	r2, [sp, #20]
   b8438:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b843a:	60e3      	str	r3, [r4, #12]
   b843c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8440:	9206      	str	r2, [sp, #24]
   b8442:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8444:	4b06      	ldr	r3, [pc, #24]	; (b8460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b8446:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8448:	4b06      	ldr	r3, [pc, #24]	; (b8464 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b844a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b844c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b844e:	a803      	add	r0, sp, #12
   b8450:	f7fc fcc0 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8454:	2200      	movs	r2, #0
   b8456:	4629      	mov	r1, r5
   b8458:	4803      	ldr	r0, [pc, #12]	; (b8468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b845a:	f7fd fe9b 	bl	b6194 <application_thread_invoke>
   b845e:	e7c7      	b.n	b83f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b8460:	000b8089 	.word	0x000b8089
   b8464:	000b846d 	.word	0x000b846d
   b8468:	000b87b1 	.word	0x000b87b1

000b846c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b846c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b846e:	b570      	push	{r4, r5, r6, lr}
   b8470:	4604      	mov	r4, r0
	switch (__op)
   b8472:	d103      	bne.n	b847c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8474:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8476:	6003      	str	r3, [r0, #0]
      }
   b8478:	2000      	movs	r0, #0
   b847a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b847c:	2a02      	cmp	r2, #2
   b847e:	d00c      	beq.n	b849a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8480:	2a03      	cmp	r2, #3
   b8482:	d1f9      	bne.n	b8478 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8484:	6804      	ldr	r4, [r0, #0]
   b8486:	2c00      	cmp	r4, #0
   b8488:	d0f6      	beq.n	b8478 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b848a:	4620      	mov	r0, r4
   b848c:	f7fc fca2 	bl	b4dd4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8490:	2114      	movs	r1, #20
   b8492:	4620      	mov	r0, r4
   b8494:	f7fc faf5 	bl	b4a82 <_ZdlPvj>
   b8498:	e7ee      	b.n	b8478 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b849a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b849c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b849e:	f7fc faec 	bl	b4a7a <_Znwj>
   b84a2:	4605      	mov	r5, r0
   b84a4:	b120      	cbz	r0, b84b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b84a6:	4631      	mov	r1, r6
   b84a8:	f7ff ff4e 	bl	b8348 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b84ac:	7c33      	ldrb	r3, [r6, #16]
   b84ae:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b84b0:	6025      	str	r5, [r4, #0]
	}
   b84b2:	e7e1      	b.n	b8478 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b84b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b84b4:	4770      	bx	lr

000b84b6 <_ZN9IPAddressD0Ev>:
   b84b6:	b510      	push	{r4, lr}
   b84b8:	2118      	movs	r1, #24
   b84ba:	4604      	mov	r4, r0
   b84bc:	f7fc fae1 	bl	b4a82 <_ZdlPvj>
   b84c0:	4620      	mov	r0, r4
   b84c2:	bd10      	pop	{r4, pc}

000b84c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b84c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b84c6:	7d03      	ldrb	r3, [r0, #20]
   b84c8:	2b06      	cmp	r3, #6
{
   b84ca:	b08d      	sub	sp, #52	; 0x34
   b84cc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b84ce:	f100 0704 	add.w	r7, r0, #4
   b84d2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b84d6:	d012      	beq.n	b84fe <_ZNK9IPAddress7printToER5Print+0x3a>
   b84d8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b84dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b84e0:	220a      	movs	r2, #10
   b84e2:	4630      	mov	r0, r6
   b84e4:	f7ff fb67 	bl	b7bb6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b84e8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b84ea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b84ec:	d019      	beq.n	b8522 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b84ee:	2c00      	cmp	r4, #0
   b84f0:	d0f4      	beq.n	b84dc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b84f2:	212e      	movs	r1, #46	; 0x2e
   b84f4:	4630      	mov	r0, r6
   b84f6:	f7ff fb45 	bl	b7b84 <_ZN5Print5printEc>
   b84fa:	4404      	add	r4, r0
   b84fc:	e7ee      	b.n	b84dc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b84fe:	232f      	movs	r3, #47	; 0x2f
   b8500:	466a      	mov	r2, sp
   b8502:	4639      	mov	r1, r7
   b8504:	200a      	movs	r0, #10
		buf[0] = 0;
   b8506:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b850a:	f7fd fd43 	bl	b5f94 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b850e:	4668      	mov	r0, sp
   b8510:	f7fc fa58 	bl	b49c4 <strlen>
   b8514:	6833      	ldr	r3, [r6, #0]
   b8516:	4602      	mov	r2, r0
   b8518:	68db      	ldr	r3, [r3, #12]
   b851a:	4669      	mov	r1, sp
   b851c:	4630      	mov	r0, r6
   b851e:	4798      	blx	r3
   b8520:	4604      	mov	r4, r0
    }
    return n;
}
   b8522:	4620      	mov	r0, r4
   b8524:	b00d      	add	sp, #52	; 0x34
   b8526:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8528 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8528:	b510      	push	{r4, lr}
   b852a:	4b05      	ldr	r3, [pc, #20]	; (b8540 <_ZN9IPAddressC1Ev+0x18>)
   b852c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b852e:	2211      	movs	r2, #17
   b8530:	f840 3b04 	str.w	r3, [r0], #4
   b8534:	2100      	movs	r1, #0
   b8536:	f000 fd64 	bl	b9002 <memset>
}
   b853a:	4620      	mov	r0, r4
   b853c:	bd10      	pop	{r4, pc}
   b853e:	bf00      	nop
   b8540:	000bb8ec 	.word	0x000bb8ec

000b8544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8544:	4603      	mov	r3, r0
   b8546:	4a07      	ldr	r2, [pc, #28]	; (b8564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8548:	b510      	push	{r4, lr}
   b854a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b854e:	f101 0210 	add.w	r2, r1, #16
   b8552:	f851 4b04 	ldr.w	r4, [r1], #4
   b8556:	f843 4b04 	str.w	r4, [r3], #4
   b855a:	4291      	cmp	r1, r2
   b855c:	d1f9      	bne.n	b8552 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b855e:	780a      	ldrb	r2, [r1, #0]
   b8560:	701a      	strb	r2, [r3, #0]
}
   b8562:	bd10      	pop	{r4, pc}
   b8564:	000bb8ec 	.word	0x000bb8ec

000b8568 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b8568:	4a02      	ldr	r2, [pc, #8]	; (b8574 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b856a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b856e:	2204      	movs	r2, #4
   b8570:	7502      	strb	r2, [r0, #20]
}
   b8572:	4770      	bx	lr
   b8574:	000bb8ec 	.word	0x000bb8ec

000b8578 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8578:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b857a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b857e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8582:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8586:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
   b858a:	2304      	movs	r3, #4
   b858c:	6041      	str	r1, [r0, #4]
   b858e:	7503      	strb	r3, [r0, #20]
}
   b8590:	bd10      	pop	{r4, pc}
	...

000b8594 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8594:	b507      	push	{r0, r1, r2, lr}
   b8596:	4b06      	ldr	r3, [pc, #24]	; (b85b0 <_ZN9IPAddressC1EPKh+0x1c>)
   b8598:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b859a:	78cb      	ldrb	r3, [r1, #3]
   b859c:	9300      	str	r3, [sp, #0]
   b859e:	788b      	ldrb	r3, [r1, #2]
   b85a0:	784a      	ldrb	r2, [r1, #1]
   b85a2:	7809      	ldrb	r1, [r1, #0]
   b85a4:	f7ff ffe8 	bl	b8578 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b85a8:	b003      	add	sp, #12
   b85aa:	f85d fb04 	ldr.w	pc, [sp], #4
   b85ae:	bf00      	nop
   b85b0:	000bb8ec 	.word	0x000bb8ec

000b85b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b85b4:	7441      	strb	r1, [r0, #17]
}
   b85b6:	4770      	bx	lr

000b85b8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b85b8:	4770      	bx	lr

000b85ba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b85ba:	4770      	bx	lr

000b85bc <_ZN9USBSerial4readEv>:
{
   b85bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b85be:	2100      	movs	r1, #0
   b85c0:	7c00      	ldrb	r0, [r0, #16]
   b85c2:	f7fd fd8f 	bl	b60e4 <HAL_USB_USART_Receive_Data>
}
   b85c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85ca:	bd08      	pop	{r3, pc}

000b85cc <_ZN9USBSerial4peekEv>:
{
   b85cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b85ce:	2101      	movs	r1, #1
   b85d0:	7c00      	ldrb	r0, [r0, #16]
   b85d2:	f7fd fd87 	bl	b60e4 <HAL_USB_USART_Receive_Data>
}
   b85d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85da:	bd08      	pop	{r3, pc}

000b85dc <_ZN9USBSerial17availableForWriteEv>:
{
   b85dc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b85de:	7c00      	ldrb	r0, [r0, #16]
   b85e0:	f7fd fd78 	bl	b60d4 <HAL_USB_USART_Available_Data_For_Write>
}
   b85e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b85e8:	bd08      	pop	{r3, pc}

000b85ea <_ZN9USBSerial9availableEv>:
{
   b85ea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b85ec:	7c00      	ldrb	r0, [r0, #16]
   b85ee:	f7fd fd69 	bl	b60c4 <HAL_USB_USART_Available_Data>
}
   b85f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b85f6:	bd08      	pop	{r3, pc}

000b85f8 <_ZN9USBSerial5writeEh>:
{
   b85f8:	b513      	push	{r0, r1, r4, lr}
   b85fa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b85fc:	7c00      	ldrb	r0, [r0, #16]
{
   b85fe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8600:	f7fd fd68 	bl	b60d4 <HAL_USB_USART_Available_Data_For_Write>
   b8604:	2800      	cmp	r0, #0
   b8606:	9901      	ldr	r1, [sp, #4]
   b8608:	dc01      	bgt.n	b860e <_ZN9USBSerial5writeEh+0x16>
   b860a:	7c60      	ldrb	r0, [r4, #17]
   b860c:	b120      	cbz	r0, b8618 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b860e:	7c20      	ldrb	r0, [r4, #16]
   b8610:	f7fd fd70 	bl	b60f4 <HAL_USB_USART_Send_Data>
   b8614:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8618:	b002      	add	sp, #8
   b861a:	bd10      	pop	{r4, pc}

000b861c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b861c:	7c00      	ldrb	r0, [r0, #16]
   b861e:	f7fd bd71 	b.w	b6104 <HAL_USB_USART_Flush_Data>

000b8622 <_ZN9USBSerialD0Ev>:
   b8622:	b510      	push	{r4, lr}
   b8624:	2114      	movs	r1, #20
   b8626:	4604      	mov	r4, r0
   b8628:	f7fc fa2b 	bl	b4a82 <_ZdlPvj>
   b862c:	4620      	mov	r0, r4
   b862e:	bd10      	pop	{r4, pc}

000b8630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8630:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8636:	4604      	mov	r4, r0
   b8638:	4608      	mov	r0, r1
   b863a:	2100      	movs	r1, #0
   b863c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8640:	4b04      	ldr	r3, [pc, #16]	; (b8654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8642:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8644:	2301      	movs	r3, #1
  _serial = serial;
   b8646:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8648:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b864a:	4611      	mov	r1, r2
   b864c:	f7fd fd32 	bl	b60b4 <HAL_USB_USART_Init>
}
   b8650:	4620      	mov	r0, r4
   b8652:	bd10      	pop	{r4, pc}
   b8654:	000bb900 	.word	0x000bb900

000b8658 <_Z19acquireSerialBufferv>:
{
   b8658:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b865a:	2214      	movs	r2, #20
{
   b865c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b865e:	2100      	movs	r1, #0
   b8660:	f000 fccf 	bl	b9002 <memset>
}
   b8664:	4620      	mov	r0, r4
   b8666:	bd10      	pop	{r4, pc}

000b8668 <_Z16_fetch_usbserialv>:
{
   b8668:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b866a:	4c0f      	ldr	r4, [pc, #60]	; (b86a8 <_Z16_fetch_usbserialv+0x40>)
{
   b866c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b866e:	a803      	add	r0, sp, #12
   b8670:	f7ff fff2 	bl	b8658 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8674:	7821      	ldrb	r1, [r4, #0]
   b8676:	f3bf 8f5b 	dmb	ish
   b867a:	f011 0101 	ands.w	r1, r1, #1
   b867e:	d10f      	bne.n	b86a0 <_Z16_fetch_usbserialv+0x38>
   b8680:	4620      	mov	r0, r4
   b8682:	9101      	str	r1, [sp, #4]
   b8684:	f7fc f9ff 	bl	b4a86 <__cxa_guard_acquire>
   b8688:	9901      	ldr	r1, [sp, #4]
   b868a:	b148      	cbz	r0, b86a0 <_Z16_fetch_usbserialv+0x38>
   b868c:	aa03      	add	r2, sp, #12
   b868e:	4807      	ldr	r0, [pc, #28]	; (b86ac <_Z16_fetch_usbserialv+0x44>)
   b8690:	f7ff ffce 	bl	b8630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8694:	4620      	mov	r0, r4
   b8696:	f7fc f9fb 	bl	b4a90 <__cxa_guard_release>
   b869a:	4805      	ldr	r0, [pc, #20]	; (b86b0 <_Z16_fetch_usbserialv+0x48>)
   b869c:	f000 fc6c 	bl	b8f78 <atexit>
	return _usbserial;
}
   b86a0:	4802      	ldr	r0, [pc, #8]	; (b86ac <_Z16_fetch_usbserialv+0x44>)
   b86a2:	b008      	add	sp, #32
   b86a4:	bd10      	pop	{r4, pc}
   b86a6:	bf00      	nop
   b86a8:	2003e6f8 	.word	0x2003e6f8
   b86ac:	2003e6fc 	.word	0x2003e6fc
   b86b0:	000b85b9 	.word	0x000b85b9

000b86b4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b86b4:	4700      	bx	r0
	...

000b86b8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b86b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b86bc:	2400      	movs	r4, #0
{
   b86be:	461d      	mov	r5, r3
   b86c0:	460f      	mov	r7, r1
   b86c2:	4690      	mov	r8, r2
   b86c4:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b86c6:	f7fd fb5b 	bl	b5d80 <hal_interrupt_detach>
  if (priority >= 0) {
   b86ca:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b86cc:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b86d0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b86d4:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b86d8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b86dc:	bfa2      	ittt	ge
   b86de:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b86e2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b86e6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b86e8:	4907      	ldr	r1, [pc, #28]	; (b8708 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b86ea:	9400      	str	r4, [sp, #0]
   b86ec:	4643      	mov	r3, r8
   b86ee:	463a      	mov	r2, r7
   b86f0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b86f2:	bfa8      	it	ge
   b86f4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b86f8:	f7fd fb3a 	bl	b5d70 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b86fc:	fab0 f080 	clz	r0, r0
   b8700:	0940      	lsrs	r0, r0, #5
   b8702:	b004      	add	sp, #16
   b8704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8708:	000b86b5 	.word	0x000b86b5

000b870c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b870c:	4770      	bx	lr

000b870e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b870e:	7441      	strb	r1, [r0, #17]
}
   b8710:	4770      	bx	lr

000b8712 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8712:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8714:	7c00      	ldrb	r0, [r0, #16]
   b8716:	f7fd fc75 	bl	b6004 <hal_usart_available_data_for_write>
}
   b871a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b871e:	bd08      	pop	{r3, pc}

000b8720 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8720:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8722:	7c00      	ldrb	r0, [r0, #16]
   b8724:	f7fd fc46 	bl	b5fb4 <hal_usart_available>
}
   b8728:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b872c:	bd08      	pop	{r3, pc}

000b872e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b872e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8730:	7c00      	ldrb	r0, [r0, #16]
   b8732:	f7fd fc4f 	bl	b5fd4 <hal_usart_peek>
}
   b8736:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b873a:	bd08      	pop	{r3, pc}

000b873c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b873c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b873e:	7c00      	ldrb	r0, [r0, #16]
   b8740:	f7fd fc40 	bl	b5fc4 <hal_usart_read>
}
   b8744:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8748:	bd08      	pop	{r3, pc}

000b874a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b874a:	7c00      	ldrb	r0, [r0, #16]
   b874c:	f7fd bc4a 	b.w	b5fe4 <hal_usart_flush>

000b8750 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8750:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8752:	7c45      	ldrb	r5, [r0, #17]
{
   b8754:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8756:	b12d      	cbz	r5, b8764 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8758:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b875a:	b003      	add	sp, #12
   b875c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8760:	f7fd bc20 	b.w	b5fa4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8764:	7c00      	ldrb	r0, [r0, #16]
   b8766:	9101      	str	r1, [sp, #4]
   b8768:	f7fd fc4c 	bl	b6004 <hal_usart_available_data_for_write>
   b876c:	2800      	cmp	r0, #0
   b876e:	9901      	ldr	r1, [sp, #4]
   b8770:	dcf2      	bgt.n	b8758 <_ZN11USARTSerial5writeEh+0x8>
}
   b8772:	4628      	mov	r0, r5
   b8774:	b003      	add	sp, #12
   b8776:	bd30      	pop	{r4, r5, pc}

000b8778 <_ZN11USARTSerialD0Ev>:
   b8778:	b510      	push	{r4, lr}
   b877a:	2114      	movs	r1, #20
   b877c:	4604      	mov	r4, r0
   b877e:	f7fc f980 	bl	b4a82 <_ZdlPvj>
   b8782:	4620      	mov	r0, r4
   b8784:	bd10      	pop	{r4, pc}
	...

000b8788 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8788:	b510      	push	{r4, lr}
   b878a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b878e:	4604      	mov	r4, r0
   b8790:	4608      	mov	r0, r1
   b8792:	4611      	mov	r1, r2
   b8794:	2200      	movs	r2, #0
   b8796:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b879a:	4b04      	ldr	r3, [pc, #16]	; (b87ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b879c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b879e:	2301      	movs	r3, #1
  _serial = serial;
   b87a0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b87a2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b87a4:	f7fd fc36 	bl	b6014 <hal_usart_init_ex>
}
   b87a8:	4620      	mov	r0, r4
   b87aa:	bd10      	pop	{r4, pc}
   b87ac:	000bb930 	.word	0x000bb930

000b87b0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b87b0:	b510      	push	{r4, lr}
      if (_M_empty())
   b87b2:	6883      	ldr	r3, [r0, #8]
   b87b4:	4604      	mov	r4, r0
   b87b6:	b90b      	cbnz	r3, b87bc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b87b8:	f000 fac8 	bl	b8d4c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b87bc:	68c3      	ldr	r3, [r0, #12]
   b87be:	4798      	blx	r3
      if (_M_manager)
   b87c0:	68a3      	ldr	r3, [r4, #8]
   b87c2:	b11b      	cbz	r3, b87cc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b87c4:	2203      	movs	r2, #3
   b87c6:	4621      	mov	r1, r4
   b87c8:	4620      	mov	r0, r4
   b87ca:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b87cc:	4620      	mov	r0, r4
   b87ce:	2110      	movs	r1, #16
}
   b87d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b87d4:	f7fc b955 	b.w	b4a82 <_ZdlPvj>

000b87d8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b87d8:	4770      	bx	lr

000b87da <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b87da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87dc:	4606      	mov	r6, r0
   b87de:	4615      	mov	r5, r2
   b87e0:	460c      	mov	r4, r1
   b87e2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b87e4:	42bc      	cmp	r4, r7
   b87e6:	d006      	beq.n	b87f6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b87e8:	6833      	ldr	r3, [r6, #0]
   b87ea:	f814 1b01 	ldrb.w	r1, [r4], #1
   b87ee:	689b      	ldr	r3, [r3, #8]
   b87f0:	4630      	mov	r0, r6
   b87f2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b87f4:	e7f6      	b.n	b87e4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b87f6:	4628      	mov	r0, r5
   b87f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87fa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b87fa:	7c00      	ldrb	r0, [r0, #16]
   b87fc:	2200      	movs	r2, #0
   b87fe:	f7fd bc11 	b.w	b6024 <hal_i2c_write>

000b8802 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8802:	7c00      	ldrb	r0, [r0, #16]
   b8804:	2100      	movs	r1, #0
   b8806:	f7fd bc15 	b.w	b6034 <hal_i2c_available>

000b880a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b880a:	7c00      	ldrb	r0, [r0, #16]
   b880c:	2100      	movs	r1, #0
   b880e:	f7fd bc19 	b.w	b6044 <hal_i2c_read>

000b8812 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8812:	7c00      	ldrb	r0, [r0, #16]
   b8814:	2100      	movs	r1, #0
   b8816:	f7fd bc1d 	b.w	b6054 <hal_i2c_peek>

000b881a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b881a:	7c00      	ldrb	r0, [r0, #16]
   b881c:	2100      	movs	r1, #0
   b881e:	f7fd bc21 	b.w	b6064 <hal_i2c_flush>

000b8822 <_ZN7TwoWireD0Ev>:
   b8822:	b510      	push	{r4, lr}
   b8824:	2114      	movs	r1, #20
   b8826:	4604      	mov	r4, r0
   b8828:	f7fc f92b 	bl	b4a82 <_ZdlPvj>
   b882c:	4620      	mov	r0, r4
   b882e:	bd10      	pop	{r4, pc}

000b8830 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8830:	b510      	push	{r4, lr}
   b8832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8836:	4604      	mov	r4, r0
   b8838:	4608      	mov	r0, r1
   b883a:	2100      	movs	r1, #0
   b883c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8840:	4b03      	ldr	r3, [pc, #12]	; (b8850 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8842:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8844:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8846:	4611      	mov	r1, r2
   b8848:	f7fd fc1c 	bl	b6084 <hal_i2c_init>
}
   b884c:	4620      	mov	r0, r4
   b884e:	bd10      	pop	{r4, pc}
   b8850:	000bb960 	.word	0x000bb960

000b8854 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   b8854:	4770      	bx	lr

000b8856 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   b8856:	2001      	movs	r0, #1
   b8858:	4770      	bx	lr

000b885a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b885a:	2200      	movs	r2, #0
   b885c:	6840      	ldr	r0, [r0, #4]
   b885e:	4611      	mov	r1, r2
   b8860:	f7fd bcd4 	b.w	b620c <network_ready>

000b8864 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   b8864:	b510      	push	{r4, lr}
   b8866:	2124      	movs	r1, #36	; 0x24
   b8868:	4604      	mov	r4, r0
   b886a:	f7fc f90a 	bl	b4a82 <_ZdlPvj>
   b886e:	4620      	mov	r0, r4
   b8870:	bd10      	pop	{r4, pc}

000b8872 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8872:	2200      	movs	r2, #0
   b8874:	6840      	ldr	r0, [r0, #4]
   b8876:	4611      	mov	r1, r2
   b8878:	f7fd bce8 	b.w	b624c <network_listening>

000b887c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b887c:	2200      	movs	r2, #0
   b887e:	6840      	ldr	r0, [r0, #4]
   b8880:	4611      	mov	r1, r2
   b8882:	f7fd bcf3 	b.w	b626c <network_get_listen_timeout>

000b8886 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8886:	6840      	ldr	r0, [r0, #4]
   b8888:	2200      	movs	r2, #0
   b888a:	f7fd bce7 	b.w	b625c <network_set_listen_timeout>

000b888e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b888e:	6840      	ldr	r0, [r0, #4]
   b8890:	2200      	movs	r2, #0
   b8892:	f081 0101 	eor.w	r1, r1, #1
   b8896:	f7fd bcd1 	b.w	b623c <network_listen>

000b889a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b889a:	2300      	movs	r3, #0
   b889c:	6840      	ldr	r0, [r0, #4]
   b889e:	461a      	mov	r2, r3
   b88a0:	4619      	mov	r1, r3
   b88a2:	f7fd bcc3 	b.w	b622c <network_off>

000b88a6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b88a6:	2300      	movs	r3, #0
   b88a8:	6840      	ldr	r0, [r0, #4]
   b88aa:	461a      	mov	r2, r3
   b88ac:	4619      	mov	r1, r3
   b88ae:	f7fd bcb5 	b.w	b621c <network_on>

000b88b2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b88b2:	2200      	movs	r2, #0
   b88b4:	6840      	ldr	r0, [r0, #4]
   b88b6:	4611      	mov	r1, r2
   b88b8:	f7fd bc98 	b.w	b61ec <network_connecting>

000b88bc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b88bc:	6840      	ldr	r0, [r0, #4]
   b88be:	2200      	movs	r2, #0
   b88c0:	2102      	movs	r1, #2
   b88c2:	f7fd bc9b 	b.w	b61fc <network_disconnect>

000b88c6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b88c6:	2300      	movs	r3, #0
   b88c8:	6840      	ldr	r0, [r0, #4]
   b88ca:	461a      	mov	r2, r3
   b88cc:	f7fd bc86 	b.w	b61dc <network_connect>

000b88d0 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   b88d0:	8983      	ldrh	r3, [r0, #12]
   b88d2:	b17b      	cbz	r3, b88f4 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   b88d4:	6943      	ldr	r3, [r0, #20]
   b88d6:	2b00      	cmp	r3, #0
   b88d8:	db0c      	blt.n	b88f4 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   b88da:	ee07 3a90 	vmov	s15, r3
   b88de:	ed9f 7a07 	vldr	s14, [pc, #28]	; b88fc <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   b88e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b88e6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b88ea:	eddf 7a05 	vldr	s15, [pc, #20]	; b8900 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   b88ee:	ee20 0a27 	vmul.f32	s0, s0, s15
   b88f2:	4770      	bx	lr
    }
    return -1.0f;
   b88f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b88f8:	4770      	bx	lr
   b88fa:	bf00      	nop
   b88fc:	477fff00 	.word	0x477fff00
   b8900:	42c80000 	.word	0x42c80000

000b8904 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   b8904:	8983      	ldrh	r3, [r0, #12]
   b8906:	b163      	cbz	r3, b8922 <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   b8908:	6903      	ldr	r3, [r0, #16]
   b890a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b890e:	d008      	beq.n	b8922 <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   b8910:	ee07 3a90 	vmov	s15, r3
   b8914:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8928 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   b8918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b891c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8920:	4770      	bx	lr
    }
    return 0.0f;
   b8922:	ed9f 0a02 	vldr	s0, [pc, #8]	; b892c <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   b8926:	4770      	bx	lr
   b8928:	42c80000 	.word	0x42c80000
   b892c:	00000000 	.word	0x00000000

000b8930 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   b8930:	8983      	ldrh	r3, [r0, #12]
   b8932:	b17b      	cbz	r3, b8954 <_ZNK10WiFiSignal10getQualityEv+0x24>
   b8934:	6a03      	ldr	r3, [r0, #32]
   b8936:	2b00      	cmp	r3, #0
   b8938:	db0c      	blt.n	b8954 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   b893a:	ee07 3a90 	vmov	s15, r3
   b893e:	ed9f 7a07 	vldr	s14, [pc, #28]	; b895c <_ZNK10WiFiSignal10getQualityEv+0x2c>
   b8942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8946:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b894a:	eddf 7a05 	vldr	s15, [pc, #20]	; b8960 <_ZNK10WiFiSignal10getQualityEv+0x30>
   b894e:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8952:	4770      	bx	lr
    }
    return -1.0f;
   b8954:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8958:	4770      	bx	lr
   b895a:	bf00      	nop
   b895c:	477fff00 	.word	0x477fff00
   b8960:	42c80000 	.word	0x42c80000

000b8964 <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   b8964:	8983      	ldrh	r3, [r0, #12]
   b8966:	b163      	cbz	r3, b8982 <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   b8968:	6983      	ldr	r3, [r0, #24]
   b896a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b896e:	d008      	beq.n	b8982 <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   b8970:	ee07 3a90 	vmov	s15, r3
   b8974:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8988 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   b8978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b897c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8980:	4770      	bx	lr
    }
    return 0.0f;
   b8982:	ed9f 0a02 	vldr	s0, [pc, #8]	; b898c <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   b8986:	4770      	bx	lr
   b8988:	42c80000 	.word	0x42c80000
   b898c:	00000000 	.word	0x00000000

000b8990 <_ZNK10WiFiSignalcvaEv>:
}
   b8990:	f990 0004 	ldrsb.w	r0, [r0, #4]
   b8994:	4770      	bx	lr

000b8996 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b8996:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   b8998:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b899a:	4606      	mov	r6, r0
    inf_ = inf;
   b899c:	f100 050c 	add.w	r5, r0, #12
   b89a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b89a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b89a4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b89a8:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   b89ac:	6933      	ldr	r3, [r6, #16]
   b89ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b89b2:	bf0e      	itee	eq
   b89b4:	2302      	moveq	r3, #2
   b89b6:	2264      	movne	r2, #100	; 0x64
   b89b8:	fb93 f3f2 	sdivne	r3, r3, r2
   b89bc:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b89be:	69b3      	ldr	r3, [r6, #24]
   b89c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b89c4:	bf0c      	ite	eq
   b89c6:	2300      	moveq	r3, #0
   b89c8:	2264      	movne	r2, #100	; 0x64
}
   b89ca:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b89ce:	bf18      	it	ne
   b89d0:	fb93 f3f2 	sdivne	r3, r3, r2
   b89d4:	60b3      	str	r3, [r6, #8]
}
   b89d6:	bd70      	pop	{r4, r5, r6, pc}

000b89d8 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   b89d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   b89dc:	4b16      	ldr	r3, [pc, #88]	; (b8a38 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   b89de:	6003      	str	r3, [r0, #0]
   b89e0:	2500      	movs	r5, #0
   b89e2:	460f      	mov	r7, r1
   b89e4:	f04f 0802 	mov.w	r8, #2
   b89e8:	2618      	movs	r6, #24
   b89ea:	e9c0 8501 	strd	r8, r5, [r0, #4]
   b89ee:	b086      	sub	sp, #24
   b89f0:	4632      	mov	r2, r6
   b89f2:	4629      	mov	r1, r5
   b89f4:	4604      	mov	r4, r0
   b89f6:	300c      	adds	r0, #12
   b89f8:	f000 fb03 	bl	b9002 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b89fc:	6878      	ldr	r0, [r7, #4]
   b89fe:	462a      	mov	r2, r5
   b8a00:	4629      	mov	r1, r5
   b8a02:	f7fd fc03 	bl	b620c <network_ready>
   b8a06:	b180      	cbz	r0, b8a2a <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
   b8a08:	4632      	mov	r2, r6
   b8a0a:	4629      	mov	r1, r5
   b8a0c:	4668      	mov	r0, sp
   b8a0e:	f000 faf8 	bl	b9002 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b8a12:	462a      	mov	r2, r5
   b8a14:	4669      	mov	r1, sp
   b8a16:	4628      	mov	r0, r5
        info.size = sizeof(info);
   b8a18:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b8a1c:	f7fd fb7a 	bl	b6114 <wlan_connected_info>
        if (r == 0) {
   b8a20:	b938      	cbnz	r0, b8a32 <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   b8a22:	4669      	mov	r1, sp
   b8a24:	4620      	mov	r0, r4
   b8a26:	f7ff ffb6 	bl	b8996 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
   b8a2a:	4620      	mov	r0, r4
   b8a2c:	b006      	add	sp, #24
   b8a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   b8a32:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   b8a36:	e7f8      	b.n	b8a2a <_ZN5spark9WiFiClass4RSSIEv+0x52>
   b8a38:	000bb9c4 	.word	0x000bb9c4

000b8a3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8a3c:	4b02      	ldr	r3, [pc, #8]	; (b8a48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8a3e:	2204      	movs	r2, #4
   b8a40:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8a42:	4a02      	ldr	r2, [pc, #8]	; (b8a4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8a44:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8a46:	4770      	bx	lr
   b8a48:	2003e710 	.word	0x2003e710
   b8a4c:	000bb988 	.word	0x000bb988

000b8a50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8a50:	2300      	movs	r3, #0
   b8a52:	6840      	ldr	r0, [r0, #4]
   b8a54:	461a      	mov	r2, r3
   b8a56:	f7fd bbc1 	b.w	b61dc <network_connect>

000b8a5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8a5a:	6840      	ldr	r0, [r0, #4]
   b8a5c:	2200      	movs	r2, #0
   b8a5e:	2102      	movs	r1, #2
   b8a60:	f7fd bbcc 	b.w	b61fc <network_disconnect>

000b8a64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8a64:	2200      	movs	r2, #0
   b8a66:	6840      	ldr	r0, [r0, #4]
   b8a68:	4611      	mov	r1, r2
   b8a6a:	f7fd bbbf 	b.w	b61ec <network_connecting>

000b8a6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8a6e:	2200      	movs	r2, #0
   b8a70:	6840      	ldr	r0, [r0, #4]
   b8a72:	4611      	mov	r1, r2
   b8a74:	f7fd bbca 	b.w	b620c <network_ready>

000b8a78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8a78:	2300      	movs	r3, #0
   b8a7a:	6840      	ldr	r0, [r0, #4]
   b8a7c:	461a      	mov	r2, r3
   b8a7e:	4619      	mov	r1, r3
   b8a80:	f7fd bbcc 	b.w	b621c <network_on>

000b8a84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8a84:	2300      	movs	r3, #0
   b8a86:	6840      	ldr	r0, [r0, #4]
   b8a88:	461a      	mov	r2, r3
   b8a8a:	4619      	mov	r1, r3
   b8a8c:	f7fd bbce 	b.w	b622c <network_off>

000b8a90 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8a90:	6840      	ldr	r0, [r0, #4]
   b8a92:	2100      	movs	r1, #0
   b8a94:	f7fd bbf2 	b.w	b627c <network_is_on>

000b8a98 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8a98:	6840      	ldr	r0, [r0, #4]
   b8a9a:	2100      	movs	r1, #0
   b8a9c:	f7fd bbf6 	b.w	b628c <network_is_off>

000b8aa0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8aa0:	6840      	ldr	r0, [r0, #4]
   b8aa2:	2200      	movs	r2, #0
   b8aa4:	f081 0101 	eor.w	r1, r1, #1
   b8aa8:	f7fd bbc8 	b.w	b623c <network_listen>

000b8aac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8aac:	6840      	ldr	r0, [r0, #4]
   b8aae:	2200      	movs	r2, #0
   b8ab0:	f7fd bbd4 	b.w	b625c <network_set_listen_timeout>

000b8ab4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8ab4:	2200      	movs	r2, #0
   b8ab6:	6840      	ldr	r0, [r0, #4]
   b8ab8:	4611      	mov	r1, r2
   b8aba:	f7fd bbd7 	b.w	b626c <network_get_listen_timeout>

000b8abe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8abe:	2200      	movs	r2, #0
   b8ac0:	6840      	ldr	r0, [r0, #4]
   b8ac2:	4611      	mov	r1, r2
   b8ac4:	f7fd bbc2 	b.w	b624c <network_listening>

000b8ac8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8acc:	b095      	sub	sp, #84	; 0x54
   b8ace:	4614      	mov	r4, r2
   b8ad0:	460d      	mov	r5, r1
   b8ad2:	4607      	mov	r7, r0
    IPAddress addr;
   b8ad4:	f7ff fd28 	bl	b8528 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8ad8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8ada:	221c      	movs	r2, #28
   b8adc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8ade:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8ae0:	f000 fa8f 	bl	b9002 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8ae4:	2340      	movs	r3, #64	; 0x40
   b8ae6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8ae8:	4620      	mov	r0, r4
   b8aea:	466b      	mov	r3, sp
   b8aec:	aa0c      	add	r2, sp, #48	; 0x30
   b8aee:	2100      	movs	r1, #0
   b8af0:	f7fd f92e 	bl	b5d50 <netdb_getaddrinfo>
    if (!r) {
   b8af4:	4604      	mov	r4, r0
   b8af6:	2800      	cmp	r0, #0
   b8af8:	d14b      	bne.n	b8b92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8afa:	4602      	mov	r2, r0
   b8afc:	2101      	movs	r1, #1
   b8afe:	6868      	ldr	r0, [r5, #4]
   b8b00:	f7fd fb84 	bl	b620c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8b04:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8b06:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8b08:	4622      	mov	r2, r4
   b8b0a:	6868      	ldr	r0, [r5, #4]
   b8b0c:	f7fd fb7e 	bl	b620c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8b10:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8b12:	4681      	mov	r9, r0
        bool ok = false;
   b8b14:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8b16:	2e00      	cmp	r6, #0
   b8b18:	d03b      	beq.n	b8b92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8b1a:	2900      	cmp	r1, #0
   b8b1c:	d139      	bne.n	b8b92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8b1e:	6873      	ldr	r3, [r6, #4]
   b8b20:	2b02      	cmp	r3, #2
   b8b22:	d003      	beq.n	b8b2c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8b24:	2b0a      	cmp	r3, #10
   b8b26:	d011      	beq.n	b8b4c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8b28:	69f6      	ldr	r6, [r6, #28]
   b8b2a:	e7f4      	b.n	b8b16 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8b2c:	f1b8 0f00 	cmp.w	r8, #0
   b8b30:	d0fa      	beq.n	b8b28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8b32:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8b34:	a806      	add	r0, sp, #24
   b8b36:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8b38:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8b3a:	f7ff fd2b 	bl	b8594 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b40:	1d3c      	adds	r4, r7, #4
   b8b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8b44:	682b      	ldr	r3, [r5, #0]
   b8b46:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8b48:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8b4a:	e7ed      	b.n	b8b28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8b4c:	f1b9 0f00 	cmp.w	r9, #0
   b8b50:	d0ea      	beq.n	b8b28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8b52:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8b54:	2210      	movs	r2, #16
   b8b56:	a801      	add	r0, sp, #4
   b8b58:	f000 fa53 	bl	b9002 <memset>
                    a.v = 6;
   b8b5c:	2306      	movs	r3, #6
   b8b5e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8b62:	ad01      	add	r5, sp, #4
   b8b64:	f104 0308 	add.w	r3, r4, #8
   b8b68:	3418      	adds	r4, #24
   b8b6a:	6818      	ldr	r0, [r3, #0]
   b8b6c:	6859      	ldr	r1, [r3, #4]
   b8b6e:	462a      	mov	r2, r5
   b8b70:	c203      	stmia	r2!, {r0, r1}
   b8b72:	3308      	adds	r3, #8
   b8b74:	42a3      	cmp	r3, r4
   b8b76:	4615      	mov	r5, r2
   b8b78:	d1f7      	bne.n	b8b6a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8b7a:	a901      	add	r1, sp, #4
   b8b7c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8b7e:	ad07      	add	r5, sp, #28
   b8b80:	f7ff fce0 	bl	b8544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b86:	1d3c      	adds	r4, r7, #4
   b8b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8b8a:	682b      	ldr	r3, [r5, #0]
   b8b8c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8b8e:	4649      	mov	r1, r9
   b8b90:	e7ca      	b.n	b8b28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8b92:	9800      	ldr	r0, [sp, #0]
   b8b94:	f7fd f8d4 	bl	b5d40 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8b98:	4638      	mov	r0, r7
   b8b9a:	b015      	add	sp, #84	; 0x54
   b8b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8ba0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8ba0:	4b02      	ldr	r3, [pc, #8]	; (b8bac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8ba2:	4a03      	ldr	r2, [pc, #12]	; (b8bb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8ba4:	601a      	str	r2, [r3, #0]
   b8ba6:	2200      	movs	r2, #0
   b8ba8:	605a      	str	r2, [r3, #4]

} // spark
   b8baa:	4770      	bx	lr
   b8bac:	2003e718 	.word	0x2003e718
   b8bb0:	000bb9e8 	.word	0x000bb9e8

000b8bb4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8bb4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8bb6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8bb8:	d902      	bls.n	b8bc0 <pinAvailable+0xc>
    return false;
   b8bba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8bbc:	b002      	add	sp, #8
   b8bbe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8bc0:	f1a0 030b 	sub.w	r3, r0, #11
   b8bc4:	2b02      	cmp	r3, #2
   b8bc6:	d81a      	bhi.n	b8bfe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8bc8:	4c17      	ldr	r4, [pc, #92]	; (b8c28 <pinAvailable+0x74>)
   b8bca:	7821      	ldrb	r1, [r4, #0]
   b8bcc:	f3bf 8f5b 	dmb	ish
   b8bd0:	f011 0101 	ands.w	r1, r1, #1
   b8bd4:	d10b      	bne.n	b8bee <pinAvailable+0x3a>
   b8bd6:	4620      	mov	r0, r4
   b8bd8:	9101      	str	r1, [sp, #4]
   b8bda:	f7fb ff54 	bl	b4a86 <__cxa_guard_acquire>
   b8bde:	9901      	ldr	r1, [sp, #4]
   b8be0:	b128      	cbz	r0, b8bee <pinAvailable+0x3a>
   b8be2:	4812      	ldr	r0, [pc, #72]	; (b8c2c <pinAvailable+0x78>)
   b8be4:	f7fd fc20 	bl	b6428 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8be8:	4620      	mov	r0, r4
   b8bea:	f7fb ff51 	bl	b4a90 <__cxa_guard_release>
   b8bee:	4b0f      	ldr	r3, [pc, #60]	; (b8c2c <pinAvailable+0x78>)
   b8bf0:	7818      	ldrb	r0, [r3, #0]
   b8bf2:	f7fd fa57 	bl	b60a4 <hal_spi_is_enabled>
   b8bf6:	2800      	cmp	r0, #0
   b8bf8:	d1df      	bne.n	b8bba <pinAvailable+0x6>
  return true; // 'pin' is available
   b8bfa:	2001      	movs	r0, #1
   b8bfc:	e7de      	b.n	b8bbc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8bfe:	2801      	cmp	r0, #1
   b8c00:	d809      	bhi.n	b8c16 <pinAvailable+0x62>
   b8c02:	f000 f87d 	bl	b8d00 <_Z19__fetch_global_Wirev>
   b8c06:	2100      	movs	r1, #0
   b8c08:	7c00      	ldrb	r0, [r0, #16]
   b8c0a:	f7fd fa33 	bl	b6074 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8c0e:	f080 0001 	eor.w	r0, r0, #1
   b8c12:	b2c0      	uxtb	r0, r0
   b8c14:	e7d2      	b.n	b8bbc <pinAvailable+0x8>
   b8c16:	3809      	subs	r0, #9
   b8c18:	2801      	cmp	r0, #1
   b8c1a:	d8ee      	bhi.n	b8bfa <pinAvailable+0x46>
   b8c1c:	f000 f834 	bl	b8c88 <_Z22__fetch_global_Serial1v>
   b8c20:	7c00      	ldrb	r0, [r0, #16]
   b8c22:	f7fd f9e7 	bl	b5ff4 <hal_usart_is_enabled>
   b8c26:	e7f2      	b.n	b8c0e <pinAvailable+0x5a>
   b8c28:	2003e720 	.word	0x2003e720
   b8c2c:	2003e724 	.word	0x2003e724

000b8c30 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8c30:	2823      	cmp	r0, #35	; 0x23
{
   b8c32:	b538      	push	{r3, r4, r5, lr}
   b8c34:	4604      	mov	r4, r0
   b8c36:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8c38:	d80a      	bhi.n	b8c50 <pinMode+0x20>
   b8c3a:	29ff      	cmp	r1, #255	; 0xff
   b8c3c:	d008      	beq.n	b8c50 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8c3e:	f7ff ffb9 	bl	b8bb4 <pinAvailable>
   b8c42:	b128      	cbz	r0, b8c50 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8c44:	4629      	mov	r1, r5
   b8c46:	4620      	mov	r0, r4
}
   b8c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8c4c:	f7fd b888 	b.w	b5d60 <hal_gpio_mode>
}
   b8c50:	bd38      	pop	{r3, r4, r5, pc}

000b8c52 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c52:	4770      	bx	lr

000b8c54 <_Z20acquireSerial1Bufferv>:
{
   b8c54:	b538      	push	{r3, r4, r5, lr}
   b8c56:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8c58:	2514      	movs	r5, #20
   b8c5a:	462a      	mov	r2, r5
   b8c5c:	2100      	movs	r1, #0
   b8c5e:	f000 f9d0 	bl	b9002 <memset>
   b8c62:	8025      	strh	r5, [r4, #0]
   b8c64:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c66:	4907      	ldr	r1, [pc, #28]	; (b8c84 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8c68:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c6a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8c6c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c6e:	f000 f86b 	bl	b8d48 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c72:	4904      	ldr	r1, [pc, #16]	; (b8c84 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8c74:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c76:	4628      	mov	r0, r5
   b8c78:	f000 f866 	bl	b8d48 <_ZnajRKSt9nothrow_t>
    };
   b8c7c:	60e0      	str	r0, [r4, #12]
}
   b8c7e:	4620      	mov	r0, r4
   b8c80:	bd38      	pop	{r3, r4, r5, pc}
   b8c82:	bf00      	nop
   b8c84:	000bba1c 	.word	0x000bba1c

000b8c88 <_Z22__fetch_global_Serial1v>:
{
   b8c88:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c8a:	4d0e      	ldr	r5, [pc, #56]	; (b8cc4 <_Z22__fetch_global_Serial1v+0x3c>)
   b8c8c:	7829      	ldrb	r1, [r5, #0]
   b8c8e:	f3bf 8f5b 	dmb	ish
   b8c92:	f011 0401 	ands.w	r4, r1, #1
{
   b8c96:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c98:	d111      	bne.n	b8cbe <_Z22__fetch_global_Serial1v+0x36>
   b8c9a:	4628      	mov	r0, r5
   b8c9c:	f7fb fef3 	bl	b4a86 <__cxa_guard_acquire>
   b8ca0:	b168      	cbz	r0, b8cbe <_Z22__fetch_global_Serial1v+0x36>
   b8ca2:	a801      	add	r0, sp, #4
   b8ca4:	f7ff ffd6 	bl	b8c54 <_Z20acquireSerial1Bufferv>
   b8ca8:	aa01      	add	r2, sp, #4
   b8caa:	4621      	mov	r1, r4
   b8cac:	4806      	ldr	r0, [pc, #24]	; (b8cc8 <_Z22__fetch_global_Serial1v+0x40>)
   b8cae:	f7ff fd6b 	bl	b8788 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8cb2:	4628      	mov	r0, r5
   b8cb4:	f7fb feec 	bl	b4a90 <__cxa_guard_release>
   b8cb8:	4804      	ldr	r0, [pc, #16]	; (b8ccc <_Z22__fetch_global_Serial1v+0x44>)
   b8cba:	f000 f95d 	bl	b8f78 <atexit>
    return serial1;
}
   b8cbe:	4802      	ldr	r0, [pc, #8]	; (b8cc8 <_Z22__fetch_global_Serial1v+0x40>)
   b8cc0:	b007      	add	sp, #28
   b8cc2:	bd30      	pop	{r4, r5, pc}
   b8cc4:	2003e72c 	.word	0x2003e72c
   b8cc8:	2003e730 	.word	0x2003e730
   b8ccc:	000b8c53 	.word	0x000b8c53

000b8cd0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8cd0:	4770      	bx	lr
	...

000b8cd4 <_Z17acquireWireBufferv>:
{
   b8cd4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8cd6:	2520      	movs	r5, #32
   b8cd8:	2314      	movs	r3, #20
{
   b8cda:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8cdc:	6003      	str	r3, [r0, #0]
   b8cde:	6085      	str	r5, [r0, #8]
   b8ce0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8ce2:	4906      	ldr	r1, [pc, #24]	; (b8cfc <_Z17acquireWireBufferv+0x28>)
   b8ce4:	4628      	mov	r0, r5
   b8ce6:	f000 f82f 	bl	b8d48 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8cea:	4904      	ldr	r1, [pc, #16]	; (b8cfc <_Z17acquireWireBufferv+0x28>)
	};
   b8cec:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8cee:	4628      	mov	r0, r5
   b8cf0:	f000 f82a 	bl	b8d48 <_ZnajRKSt9nothrow_t>
	};
   b8cf4:	60e0      	str	r0, [r4, #12]
}
   b8cf6:	4620      	mov	r0, r4
   b8cf8:	bd38      	pop	{r3, r4, r5, pc}
   b8cfa:	bf00      	nop
   b8cfc:	000bba1c 	.word	0x000bba1c

000b8d00 <_Z19__fetch_global_Wirev>:
{
   b8d00:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d02:	4d0e      	ldr	r5, [pc, #56]	; (b8d3c <_Z19__fetch_global_Wirev+0x3c>)
   b8d04:	7829      	ldrb	r1, [r5, #0]
   b8d06:	f3bf 8f5b 	dmb	ish
   b8d0a:	f011 0401 	ands.w	r4, r1, #1
{
   b8d0e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d10:	d111      	bne.n	b8d36 <_Z19__fetch_global_Wirev+0x36>
   b8d12:	4628      	mov	r0, r5
   b8d14:	f7fb feb7 	bl	b4a86 <__cxa_guard_acquire>
   b8d18:	b168      	cbz	r0, b8d36 <_Z19__fetch_global_Wirev+0x36>
   b8d1a:	a801      	add	r0, sp, #4
   b8d1c:	f7ff ffda 	bl	b8cd4 <_Z17acquireWireBufferv>
   b8d20:	aa01      	add	r2, sp, #4
   b8d22:	4621      	mov	r1, r4
   b8d24:	4806      	ldr	r0, [pc, #24]	; (b8d40 <_Z19__fetch_global_Wirev+0x40>)
   b8d26:	f7ff fd83 	bl	b8830 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8d2a:	4628      	mov	r0, r5
   b8d2c:	f7fb feb0 	bl	b4a90 <__cxa_guard_release>
   b8d30:	4804      	ldr	r0, [pc, #16]	; (b8d44 <_Z19__fetch_global_Wirev+0x44>)
   b8d32:	f000 f921 	bl	b8f78 <atexit>
	return wire;
}
   b8d36:	4802      	ldr	r0, [pc, #8]	; (b8d40 <_Z19__fetch_global_Wirev+0x40>)
   b8d38:	b007      	add	sp, #28
   b8d3a:	bd30      	pop	{r4, r5, pc}
   b8d3c:	2003e748 	.word	0x2003e748
   b8d40:	2003e74c 	.word	0x2003e74c
   b8d44:	000b8cd1 	.word	0x000b8cd1

000b8d48 <_ZnajRKSt9nothrow_t>:
   b8d48:	f7fb be99 	b.w	b4a7e <_Znaj>

000b8d4c <_ZSt25__throw_bad_function_callv>:
   b8d4c:	b508      	push	{r3, lr}
   b8d4e:	f7fd fafd 	bl	b634c <abort>
	...

000b8d54 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8d54:	4901      	ldr	r1, [pc, #4]	; (b8d5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8d56:	f000 b8f9 	b.w	b8f4c <_ZNKSt9type_infoeqERKS_>
   b8d5a:	bf00      	nop
   b8d5c:	000bba38 	.word	0x000bba38

000b8d60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8d60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8d62:	2400      	movs	r4, #0
   b8d64:	2310      	movs	r3, #16
   b8d66:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8d6a:	6803      	ldr	r3, [r0, #0]
   b8d6c:	4615      	mov	r5, r2
   b8d6e:	699e      	ldr	r6, [r3, #24]
   b8d70:	6812      	ldr	r2, [r2, #0]
   b8d72:	466b      	mov	r3, sp
   b8d74:	e9cd 4400 	strd	r4, r4, [sp]
   b8d78:	47b0      	blx	r6
   b8d7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8d7e:	f003 0306 	and.w	r3, r3, #6
   b8d82:	2b06      	cmp	r3, #6
   b8d84:	bf03      	ittte	eq
   b8d86:	9b00      	ldreq	r3, [sp, #0]
   b8d88:	602b      	streq	r3, [r5, #0]
   b8d8a:	2001      	moveq	r0, #1
   b8d8c:	4620      	movne	r0, r4
   b8d8e:	b004      	add	sp, #16
   b8d90:	bd70      	pop	{r4, r5, r6, pc}

000b8d92 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8d92:	9800      	ldr	r0, [sp, #0]
   b8d94:	4290      	cmp	r0, r2
   b8d96:	bf14      	ite	ne
   b8d98:	2001      	movne	r0, #1
   b8d9a:	2006      	moveq	r0, #6
   b8d9c:	4770      	bx	lr
	...

000b8da0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8da0:	b510      	push	{r4, lr}
   b8da2:	4b03      	ldr	r3, [pc, #12]	; (b8db0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8da4:	6003      	str	r3, [r0, #0]
   b8da6:	4604      	mov	r4, r0
   b8da8:	f000 f8cd 	bl	b8f46 <_ZNSt9type_infoD1Ev>
   b8dac:	4620      	mov	r0, r4
   b8dae:	bd10      	pop	{r4, pc}
   b8db0:	000bba78 	.word	0x000bba78

000b8db4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8db4:	b510      	push	{r4, lr}
   b8db6:	4604      	mov	r4, r0
   b8db8:	f7ff fff2 	bl	b8da0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8dbc:	4620      	mov	r0, r4
   b8dbe:	2108      	movs	r1, #8
   b8dc0:	f7fb fe5f 	bl	b4a82 <_ZdlPvj>
   b8dc4:	4620      	mov	r0, r4
   b8dc6:	bd10      	pop	{r4, pc}

000b8dc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8dcc:	461f      	mov	r7, r3
   b8dce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8dd2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8dd6:	4598      	cmp	r8, r3
   b8dd8:	4606      	mov	r6, r0
   b8dda:	4615      	mov	r5, r2
   b8ddc:	d107      	bne.n	b8dee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8dde:	9907      	ldr	r1, [sp, #28]
   b8de0:	f000 f8b4 	bl	b8f4c <_ZNKSt9type_infoeqERKS_>
   b8de4:	b118      	cbz	r0, b8dee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8de6:	7165      	strb	r5, [r4, #5]
   b8de8:	2000      	movs	r0, #0
   b8dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8dee:	4639      	mov	r1, r7
   b8df0:	4630      	mov	r0, r6
   b8df2:	f000 f8ab 	bl	b8f4c <_ZNKSt9type_infoeqERKS_>
   b8df6:	2800      	cmp	r0, #0
   b8df8:	d0f6      	beq.n	b8de8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8dfa:	2301      	movs	r3, #1
   b8dfc:	f8c4 8000 	str.w	r8, [r4]
   b8e00:	7125      	strb	r5, [r4, #4]
   b8e02:	71a3      	strb	r3, [r4, #6]
   b8e04:	e7f0      	b.n	b8de8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8e06 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8e06:	b538      	push	{r3, r4, r5, lr}
   b8e08:	4615      	mov	r5, r2
   b8e0a:	461c      	mov	r4, r3
   b8e0c:	f000 f89e 	bl	b8f4c <_ZNKSt9type_infoeqERKS_>
   b8e10:	b120      	cbz	r0, b8e1c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8e12:	2308      	movs	r3, #8
   b8e14:	60e3      	str	r3, [r4, #12]
   b8e16:	2306      	movs	r3, #6
   b8e18:	6025      	str	r5, [r4, #0]
   b8e1a:	7123      	strb	r3, [r4, #4]
   b8e1c:	bd38      	pop	{r3, r4, r5, pc}

000b8e1e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8e20:	4605      	mov	r5, r0
   b8e22:	460c      	mov	r4, r1
   b8e24:	9201      	str	r2, [sp, #4]
   b8e26:	461e      	mov	r6, r3
   b8e28:	f000 f890 	bl	b8f4c <_ZNKSt9type_infoeqERKS_>
   b8e2c:	b950      	cbnz	r0, b8e44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8e2e:	2e03      	cmp	r6, #3
   b8e30:	d808      	bhi.n	b8e44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8e32:	6823      	ldr	r3, [r4, #0]
   b8e34:	9a01      	ldr	r2, [sp, #4]
   b8e36:	695b      	ldr	r3, [r3, #20]
   b8e38:	4629      	mov	r1, r5
   b8e3a:	4620      	mov	r0, r4
   b8e3c:	b002      	add	sp, #8
   b8e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8e42:	4718      	bx	r3
   b8e44:	b002      	add	sp, #8
   b8e46:	bd70      	pop	{r4, r5, r6, pc}

000b8e48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8e48:	b510      	push	{r4, lr}
   b8e4a:	4b03      	ldr	r3, [pc, #12]	; (b8e58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8e4c:	6003      	str	r3, [r0, #0]
   b8e4e:	4604      	mov	r4, r0
   b8e50:	f7ff ffa6 	bl	b8da0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8e54:	4620      	mov	r0, r4
   b8e56:	bd10      	pop	{r4, pc}
   b8e58:	000bbad8 	.word	0x000bbad8

000b8e5c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8e5c:	b510      	push	{r4, lr}
   b8e5e:	4604      	mov	r4, r0
   b8e60:	f7ff fff2 	bl	b8e48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8e64:	4620      	mov	r0, r4
   b8e66:	210c      	movs	r1, #12
   b8e68:	f7fb fe0b 	bl	b4a82 <_ZdlPvj>
   b8e6c:	4620      	mov	r0, r4
   b8e6e:	bd10      	pop	{r4, pc}

000b8e70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8e72:	9f08      	ldr	r7, [sp, #32]
   b8e74:	4297      	cmp	r7, r2
   b8e76:	4605      	mov	r5, r0
   b8e78:	460e      	mov	r6, r1
   b8e7a:	4614      	mov	r4, r2
   b8e7c:	d00a      	beq.n	b8e94 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8e7e:	68a8      	ldr	r0, [r5, #8]
   b8e80:	6802      	ldr	r2, [r0, #0]
   b8e82:	9708      	str	r7, [sp, #32]
   b8e84:	6a15      	ldr	r5, [r2, #32]
   b8e86:	4631      	mov	r1, r6
   b8e88:	4622      	mov	r2, r4
   b8e8a:	46ac      	mov	ip, r5
   b8e8c:	b003      	add	sp, #12
   b8e8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8e92:	4760      	bx	ip
   b8e94:	4619      	mov	r1, r3
   b8e96:	9301      	str	r3, [sp, #4]
   b8e98:	f000 f858 	bl	b8f4c <_ZNKSt9type_infoeqERKS_>
   b8e9c:	9b01      	ldr	r3, [sp, #4]
   b8e9e:	2800      	cmp	r0, #0
   b8ea0:	d0ed      	beq.n	b8e7e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8ea2:	2006      	movs	r0, #6
   b8ea4:	b003      	add	sp, #12
   b8ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8ea8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8ea8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8eac:	460d      	mov	r5, r1
   b8eae:	4619      	mov	r1, r3
   b8eb0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8eb4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8eb8:	4681      	mov	r9, r0
   b8eba:	4617      	mov	r7, r2
   b8ebc:	4698      	mov	r8, r3
   b8ebe:	f000 f845 	bl	b8f4c <_ZNKSt9type_infoeqERKS_>
   b8ec2:	b190      	cbz	r0, b8eea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8ec4:	2d00      	cmp	r5, #0
   b8ec6:	6034      	str	r4, [r6, #0]
   b8ec8:	7137      	strb	r7, [r6, #4]
   b8eca:	db09      	blt.n	b8ee0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8ecc:	1961      	adds	r1, r4, r5
   b8ece:	458a      	cmp	sl, r1
   b8ed0:	bf0c      	ite	eq
   b8ed2:	2106      	moveq	r1, #6
   b8ed4:	2101      	movne	r1, #1
   b8ed6:	71b1      	strb	r1, [r6, #6]
   b8ed8:	2000      	movs	r0, #0
   b8eda:	b001      	add	sp, #4
   b8edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8ee0:	3502      	adds	r5, #2
   b8ee2:	d1f9      	bne.n	b8ed8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8ee4:	2301      	movs	r3, #1
   b8ee6:	71b3      	strb	r3, [r6, #6]
   b8ee8:	e7f6      	b.n	b8ed8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8eea:	4554      	cmp	r4, sl
   b8eec:	d106      	bne.n	b8efc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8eee:	4659      	mov	r1, fp
   b8ef0:	4648      	mov	r0, r9
   b8ef2:	f000 f82b 	bl	b8f4c <_ZNKSt9type_infoeqERKS_>
   b8ef6:	b108      	cbz	r0, b8efc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8ef8:	7177      	strb	r7, [r6, #5]
   b8efa:	e7ed      	b.n	b8ed8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8efc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8f00:	6803      	ldr	r3, [r0, #0]
   b8f02:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8f06:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8f0a:	69dc      	ldr	r4, [r3, #28]
   b8f0c:	463a      	mov	r2, r7
   b8f0e:	4643      	mov	r3, r8
   b8f10:	4629      	mov	r1, r5
   b8f12:	46a4      	mov	ip, r4
   b8f14:	b001      	add	sp, #4
   b8f16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f1a:	4760      	bx	ip

000b8f1c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f20:	4607      	mov	r7, r0
   b8f22:	460c      	mov	r4, r1
   b8f24:	4615      	mov	r5, r2
   b8f26:	461e      	mov	r6, r3
   b8f28:	f7ff ff6d 	bl	b8e06 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8f2c:	b948      	cbnz	r0, b8f42 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8f2e:	68b8      	ldr	r0, [r7, #8]
   b8f30:	6803      	ldr	r3, [r0, #0]
   b8f32:	699f      	ldr	r7, [r3, #24]
   b8f34:	462a      	mov	r2, r5
   b8f36:	4633      	mov	r3, r6
   b8f38:	4621      	mov	r1, r4
   b8f3a:	46bc      	mov	ip, r7
   b8f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8f40:	4760      	bx	ip
   b8f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8f46 <_ZNSt9type_infoD1Ev>:
   b8f46:	4770      	bx	lr

000b8f48 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8f48:	2000      	movs	r0, #0
   b8f4a:	4770      	bx	lr

000b8f4c <_ZNKSt9type_infoeqERKS_>:
   b8f4c:	4281      	cmp	r1, r0
   b8f4e:	b508      	push	{r3, lr}
   b8f50:	d00e      	beq.n	b8f70 <_ZNKSt9type_infoeqERKS_+0x24>
   b8f52:	6840      	ldr	r0, [r0, #4]
   b8f54:	7803      	ldrb	r3, [r0, #0]
   b8f56:	2b2a      	cmp	r3, #42	; 0x2a
   b8f58:	d00c      	beq.n	b8f74 <_ZNKSt9type_infoeqERKS_+0x28>
   b8f5a:	6849      	ldr	r1, [r1, #4]
   b8f5c:	780b      	ldrb	r3, [r1, #0]
   b8f5e:	2b2a      	cmp	r3, #42	; 0x2a
   b8f60:	bf08      	it	eq
   b8f62:	3101      	addeq	r1, #1
   b8f64:	f7fb fd24 	bl	b49b0 <strcmp>
   b8f68:	fab0 f080 	clz	r0, r0
   b8f6c:	0940      	lsrs	r0, r0, #5
   b8f6e:	bd08      	pop	{r3, pc}
   b8f70:	2001      	movs	r0, #1
   b8f72:	e7fc      	b.n	b8f6e <_ZNKSt9type_infoeqERKS_+0x22>
   b8f74:	2000      	movs	r0, #0
   b8f76:	e7fa      	b.n	b8f6e <_ZNKSt9type_infoeqERKS_+0x22>

000b8f78 <atexit>:
   b8f78:	2300      	movs	r3, #0
   b8f7a:	4601      	mov	r1, r0
   b8f7c:	461a      	mov	r2, r3
   b8f7e:	4618      	mov	r0, r3
   b8f80:	f000 bfe4 	b.w	b9f4c <__register_exitproc>

000b8f84 <atof>:
   b8f84:	2100      	movs	r1, #0
   b8f86:	f000 beed 	b.w	b9d64 <strtod>

000b8f8a <atoi>:
   b8f8a:	220a      	movs	r2, #10
   b8f8c:	2100      	movs	r1, #0
   b8f8e:	f000 bfd3 	b.w	b9f38 <strtol>

000b8f92 <memcmp>:
   b8f92:	b510      	push	{r4, lr}
   b8f94:	3901      	subs	r1, #1
   b8f96:	4402      	add	r2, r0
   b8f98:	4290      	cmp	r0, r2
   b8f9a:	d101      	bne.n	b8fa0 <memcmp+0xe>
   b8f9c:	2000      	movs	r0, #0
   b8f9e:	e005      	b.n	b8fac <memcmp+0x1a>
   b8fa0:	7803      	ldrb	r3, [r0, #0]
   b8fa2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8fa6:	42a3      	cmp	r3, r4
   b8fa8:	d001      	beq.n	b8fae <memcmp+0x1c>
   b8faa:	1b18      	subs	r0, r3, r4
   b8fac:	bd10      	pop	{r4, pc}
   b8fae:	3001      	adds	r0, #1
   b8fb0:	e7f2      	b.n	b8f98 <memcmp+0x6>

000b8fb2 <memcpy>:
   b8fb2:	440a      	add	r2, r1
   b8fb4:	4291      	cmp	r1, r2
   b8fb6:	f100 33ff 	add.w	r3, r0, #4294967295
   b8fba:	d100      	bne.n	b8fbe <memcpy+0xc>
   b8fbc:	4770      	bx	lr
   b8fbe:	b510      	push	{r4, lr}
   b8fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8fc8:	4291      	cmp	r1, r2
   b8fca:	d1f9      	bne.n	b8fc0 <memcpy+0xe>
   b8fcc:	bd10      	pop	{r4, pc}

000b8fce <memmove>:
   b8fce:	4288      	cmp	r0, r1
   b8fd0:	b510      	push	{r4, lr}
   b8fd2:	eb01 0402 	add.w	r4, r1, r2
   b8fd6:	d902      	bls.n	b8fde <memmove+0x10>
   b8fd8:	4284      	cmp	r4, r0
   b8fda:	4623      	mov	r3, r4
   b8fdc:	d807      	bhi.n	b8fee <memmove+0x20>
   b8fde:	1e43      	subs	r3, r0, #1
   b8fe0:	42a1      	cmp	r1, r4
   b8fe2:	d008      	beq.n	b8ff6 <memmove+0x28>
   b8fe4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8fe8:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8fec:	e7f8      	b.n	b8fe0 <memmove+0x12>
   b8fee:	4402      	add	r2, r0
   b8ff0:	4601      	mov	r1, r0
   b8ff2:	428a      	cmp	r2, r1
   b8ff4:	d100      	bne.n	b8ff8 <memmove+0x2a>
   b8ff6:	bd10      	pop	{r4, pc}
   b8ff8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8ffc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9000:	e7f7      	b.n	b8ff2 <memmove+0x24>

000b9002 <memset>:
   b9002:	4402      	add	r2, r0
   b9004:	4603      	mov	r3, r0
   b9006:	4293      	cmp	r3, r2
   b9008:	d100      	bne.n	b900c <memset+0xa>
   b900a:	4770      	bx	lr
   b900c:	f803 1b01 	strb.w	r1, [r3], #1
   b9010:	e7f9      	b.n	b9006 <memset+0x4>
	...

000b9014 <srand>:
   b9014:	b538      	push	{r3, r4, r5, lr}
   b9016:	4b10      	ldr	r3, [pc, #64]	; (b9058 <srand+0x44>)
   b9018:	681d      	ldr	r5, [r3, #0]
   b901a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b901c:	4604      	mov	r4, r0
   b901e:	b9b3      	cbnz	r3, b904e <srand+0x3a>
   b9020:	2018      	movs	r0, #24
   b9022:	f7fd f96b 	bl	b62fc <malloc>
   b9026:	4602      	mov	r2, r0
   b9028:	63a8      	str	r0, [r5, #56]	; 0x38
   b902a:	b920      	cbnz	r0, b9036 <srand+0x22>
   b902c:	4b0b      	ldr	r3, [pc, #44]	; (b905c <srand+0x48>)
   b902e:	480c      	ldr	r0, [pc, #48]	; (b9060 <srand+0x4c>)
   b9030:	2142      	movs	r1, #66	; 0x42
   b9032:	f7fd f9a3 	bl	b637c <__assert_func>
   b9036:	490b      	ldr	r1, [pc, #44]	; (b9064 <srand+0x50>)
   b9038:	4b0b      	ldr	r3, [pc, #44]	; (b9068 <srand+0x54>)
   b903a:	e9c0 1300 	strd	r1, r3, [r0]
   b903e:	4b0b      	ldr	r3, [pc, #44]	; (b906c <srand+0x58>)
   b9040:	6083      	str	r3, [r0, #8]
   b9042:	230b      	movs	r3, #11
   b9044:	8183      	strh	r3, [r0, #12]
   b9046:	2100      	movs	r1, #0
   b9048:	2001      	movs	r0, #1
   b904a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b904e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9050:	2200      	movs	r2, #0
   b9052:	611c      	str	r4, [r3, #16]
   b9054:	615a      	str	r2, [r3, #20]
   b9056:	bd38      	pop	{r3, r4, r5, pc}
   b9058:	2003da3c 	.word	0x2003da3c
   b905c:	000bbb11 	.word	0x000bbb11
   b9060:	000bbb28 	.word	0x000bbb28
   b9064:	abcd330e 	.word	0xabcd330e
   b9068:	e66d1234 	.word	0xe66d1234
   b906c:	0005deec 	.word	0x0005deec

000b9070 <strcat>:
   b9070:	b510      	push	{r4, lr}
   b9072:	4602      	mov	r2, r0
   b9074:	7814      	ldrb	r4, [r2, #0]
   b9076:	4613      	mov	r3, r2
   b9078:	3201      	adds	r2, #1
   b907a:	2c00      	cmp	r4, #0
   b907c:	d1fa      	bne.n	b9074 <strcat+0x4>
   b907e:	3b01      	subs	r3, #1
   b9080:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9084:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9088:	2a00      	cmp	r2, #0
   b908a:	d1f9      	bne.n	b9080 <strcat+0x10>
   b908c:	bd10      	pop	{r4, pc}

000b908e <strcpy>:
   b908e:	4603      	mov	r3, r0
   b9090:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9094:	f803 2b01 	strb.w	r2, [r3], #1
   b9098:	2a00      	cmp	r2, #0
   b909a:	d1f9      	bne.n	b9090 <strcpy+0x2>
   b909c:	4770      	bx	lr
	...

000b90a0 <strdup>:
   b90a0:	4b02      	ldr	r3, [pc, #8]	; (b90ac <strdup+0xc>)
   b90a2:	4601      	mov	r1, r0
   b90a4:	6818      	ldr	r0, [r3, #0]
   b90a6:	f000 b803 	b.w	b90b0 <_strdup_r>
   b90aa:	bf00      	nop
   b90ac:	2003da3c 	.word	0x2003da3c

000b90b0 <_strdup_r>:
   b90b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90b2:	4604      	mov	r4, r0
   b90b4:	4608      	mov	r0, r1
   b90b6:	460d      	mov	r5, r1
   b90b8:	f7fb fc84 	bl	b49c4 <strlen>
   b90bc:	1c42      	adds	r2, r0, #1
   b90be:	4611      	mov	r1, r2
   b90c0:	4620      	mov	r0, r4
   b90c2:	9201      	str	r2, [sp, #4]
   b90c4:	f7fd f94a 	bl	b635c <_malloc_r>
   b90c8:	4604      	mov	r4, r0
   b90ca:	b118      	cbz	r0, b90d4 <_strdup_r+0x24>
   b90cc:	9a01      	ldr	r2, [sp, #4]
   b90ce:	4629      	mov	r1, r5
   b90d0:	f7ff ff6f 	bl	b8fb2 <memcpy>
   b90d4:	4620      	mov	r0, r4
   b90d6:	b003      	add	sp, #12
   b90d8:	bd30      	pop	{r4, r5, pc}

000b90da <strncmp>:
   b90da:	b510      	push	{r4, lr}
   b90dc:	b17a      	cbz	r2, b90fe <strncmp+0x24>
   b90de:	4603      	mov	r3, r0
   b90e0:	3901      	subs	r1, #1
   b90e2:	1884      	adds	r4, r0, r2
   b90e4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b90e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b90ec:	4290      	cmp	r0, r2
   b90ee:	d101      	bne.n	b90f4 <strncmp+0x1a>
   b90f0:	42a3      	cmp	r3, r4
   b90f2:	d101      	bne.n	b90f8 <strncmp+0x1e>
   b90f4:	1a80      	subs	r0, r0, r2
   b90f6:	bd10      	pop	{r4, pc}
   b90f8:	2800      	cmp	r0, #0
   b90fa:	d1f3      	bne.n	b90e4 <strncmp+0xa>
   b90fc:	e7fa      	b.n	b90f4 <strncmp+0x1a>
   b90fe:	4610      	mov	r0, r2
   b9100:	e7f9      	b.n	b90f6 <strncmp+0x1c>

000b9102 <strnlen>:
   b9102:	b510      	push	{r4, lr}
   b9104:	4602      	mov	r2, r0
   b9106:	4401      	add	r1, r0
   b9108:	428a      	cmp	r2, r1
   b910a:	4613      	mov	r3, r2
   b910c:	d003      	beq.n	b9116 <strnlen+0x14>
   b910e:	781c      	ldrb	r4, [r3, #0]
   b9110:	3201      	adds	r2, #1
   b9112:	2c00      	cmp	r4, #0
   b9114:	d1f8      	bne.n	b9108 <strnlen+0x6>
   b9116:	1a18      	subs	r0, r3, r0
   b9118:	bd10      	pop	{r4, pc}

000b911a <sulp>:
   b911a:	b570      	push	{r4, r5, r6, lr}
   b911c:	4604      	mov	r4, r0
   b911e:	460d      	mov	r5, r1
   b9120:	ec45 4b10 	vmov	d0, r4, r5
   b9124:	4616      	mov	r6, r2
   b9126:	f001 fe6b 	bl	bae00 <__ulp>
   b912a:	ec51 0b10 	vmov	r0, r1, d0
   b912e:	b17e      	cbz	r6, b9150 <sulp+0x36>
   b9130:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b9134:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9138:	2b00      	cmp	r3, #0
   b913a:	dd09      	ble.n	b9150 <sulp+0x36>
   b913c:	051b      	lsls	r3, r3, #20
   b913e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b9142:	2400      	movs	r4, #0
   b9144:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b9148:	4622      	mov	r2, r4
   b914a:	462b      	mov	r3, r5
   b914c:	f7fb f924 	bl	b4398 <__aeabi_dmul>
   b9150:	bd70      	pop	{r4, r5, r6, pc}
   b9152:	0000      	movs	r0, r0
   b9154:	0000      	movs	r0, r0
	...

000b9158 <_strtod_l>:
   b9158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b915c:	ed2d 8b02 	vpush	{d8}
   b9160:	b09d      	sub	sp, #116	; 0x74
   b9162:	461f      	mov	r7, r3
   b9164:	2300      	movs	r3, #0
   b9166:	9318      	str	r3, [sp, #96]	; 0x60
   b9168:	4ba2      	ldr	r3, [pc, #648]	; (b93f4 <_strtod_l+0x29c>)
   b916a:	9213      	str	r2, [sp, #76]	; 0x4c
   b916c:	681b      	ldr	r3, [r3, #0]
   b916e:	9305      	str	r3, [sp, #20]
   b9170:	4604      	mov	r4, r0
   b9172:	4618      	mov	r0, r3
   b9174:	4688      	mov	r8, r1
   b9176:	f7fb fc25 	bl	b49c4 <strlen>
   b917a:	f04f 0a00 	mov.w	sl, #0
   b917e:	4605      	mov	r5, r0
   b9180:	f04f 0b00 	mov.w	fp, #0
   b9184:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b918a:	781a      	ldrb	r2, [r3, #0]
   b918c:	2a2b      	cmp	r2, #43	; 0x2b
   b918e:	d04e      	beq.n	b922e <_strtod_l+0xd6>
   b9190:	d83b      	bhi.n	b920a <_strtod_l+0xb2>
   b9192:	2a0d      	cmp	r2, #13
   b9194:	d834      	bhi.n	b9200 <_strtod_l+0xa8>
   b9196:	2a08      	cmp	r2, #8
   b9198:	d834      	bhi.n	b9204 <_strtod_l+0xac>
   b919a:	2a00      	cmp	r2, #0
   b919c:	d03e      	beq.n	b921c <_strtod_l+0xc4>
   b919e:	2300      	movs	r3, #0
   b91a0:	930a      	str	r3, [sp, #40]	; 0x28
   b91a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b91a4:	7833      	ldrb	r3, [r6, #0]
   b91a6:	2b30      	cmp	r3, #48	; 0x30
   b91a8:	f040 80b0 	bne.w	b930c <_strtod_l+0x1b4>
   b91ac:	7873      	ldrb	r3, [r6, #1]
   b91ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b91b2:	2b58      	cmp	r3, #88	; 0x58
   b91b4:	d168      	bne.n	b9288 <_strtod_l+0x130>
   b91b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b91b8:	9301      	str	r3, [sp, #4]
   b91ba:	ab18      	add	r3, sp, #96	; 0x60
   b91bc:	9702      	str	r7, [sp, #8]
   b91be:	9300      	str	r3, [sp, #0]
   b91c0:	4a8d      	ldr	r2, [pc, #564]	; (b93f8 <_strtod_l+0x2a0>)
   b91c2:	ab19      	add	r3, sp, #100	; 0x64
   b91c4:	a917      	add	r1, sp, #92	; 0x5c
   b91c6:	4620      	mov	r0, r4
   b91c8:	f000 ff8a 	bl	ba0e0 <__gethex>
   b91cc:	f010 0707 	ands.w	r7, r0, #7
   b91d0:	4605      	mov	r5, r0
   b91d2:	d005      	beq.n	b91e0 <_strtod_l+0x88>
   b91d4:	2f06      	cmp	r7, #6
   b91d6:	d12c      	bne.n	b9232 <_strtod_l+0xda>
   b91d8:	3601      	adds	r6, #1
   b91da:	2300      	movs	r3, #0
   b91dc:	9617      	str	r6, [sp, #92]	; 0x5c
   b91de:	930a      	str	r3, [sp, #40]	; 0x28
   b91e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b91e2:	2b00      	cmp	r3, #0
   b91e4:	f040 8590 	bne.w	b9d08 <_strtod_l+0xbb0>
   b91e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b91ea:	b1eb      	cbz	r3, b9228 <_strtod_l+0xd0>
   b91ec:	4652      	mov	r2, sl
   b91ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b91f2:	ec43 2b10 	vmov	d0, r2, r3
   b91f6:	b01d      	add	sp, #116	; 0x74
   b91f8:	ecbd 8b02 	vpop	{d8}
   b91fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9200:	2a20      	cmp	r2, #32
   b9202:	d1cc      	bne.n	b919e <_strtod_l+0x46>
   b9204:	3301      	adds	r3, #1
   b9206:	9317      	str	r3, [sp, #92]	; 0x5c
   b9208:	e7be      	b.n	b9188 <_strtod_l+0x30>
   b920a:	2a2d      	cmp	r2, #45	; 0x2d
   b920c:	d1c7      	bne.n	b919e <_strtod_l+0x46>
   b920e:	2201      	movs	r2, #1
   b9210:	920a      	str	r2, [sp, #40]	; 0x28
   b9212:	1c5a      	adds	r2, r3, #1
   b9214:	9217      	str	r2, [sp, #92]	; 0x5c
   b9216:	785b      	ldrb	r3, [r3, #1]
   b9218:	2b00      	cmp	r3, #0
   b921a:	d1c2      	bne.n	b91a2 <_strtod_l+0x4a>
   b921c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b921e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9222:	2b00      	cmp	r3, #0
   b9224:	f040 856e 	bne.w	b9d04 <_strtod_l+0xbac>
   b9228:	4652      	mov	r2, sl
   b922a:	465b      	mov	r3, fp
   b922c:	e7e1      	b.n	b91f2 <_strtod_l+0x9a>
   b922e:	2200      	movs	r2, #0
   b9230:	e7ee      	b.n	b9210 <_strtod_l+0xb8>
   b9232:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9234:	b13a      	cbz	r2, b9246 <_strtod_l+0xee>
   b9236:	2135      	movs	r1, #53	; 0x35
   b9238:	a81a      	add	r0, sp, #104	; 0x68
   b923a:	f001 feec 	bl	bb016 <__copybits>
   b923e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9240:	4620      	mov	r0, r4
   b9242:	f001 faab 	bl	ba79c <_Bfree>
   b9246:	3f01      	subs	r7, #1
   b9248:	2f04      	cmp	r7, #4
   b924a:	d806      	bhi.n	b925a <_strtod_l+0x102>
   b924c:	e8df f007 	tbb	[pc, r7]
   b9250:	1714030a 	.word	0x1714030a
   b9254:	0a          	.byte	0x0a
   b9255:	00          	.byte	0x00
   b9256:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b925a:	0728      	lsls	r0, r5, #28
   b925c:	d5c0      	bpl.n	b91e0 <_strtod_l+0x88>
   b925e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b9262:	e7bd      	b.n	b91e0 <_strtod_l+0x88>
   b9264:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9268:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b926a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b926e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b9272:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b9276:	e7f0      	b.n	b925a <_strtod_l+0x102>
   b9278:	f8df b180 	ldr.w	fp, [pc, #384]	; b93fc <_strtod_l+0x2a4>
   b927c:	e7ed      	b.n	b925a <_strtod_l+0x102>
   b927e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b9282:	f04f 3aff 	mov.w	sl, #4294967295
   b9286:	e7e8      	b.n	b925a <_strtod_l+0x102>
   b9288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b928a:	1c5a      	adds	r2, r3, #1
   b928c:	9217      	str	r2, [sp, #92]	; 0x5c
   b928e:	785b      	ldrb	r3, [r3, #1]
   b9290:	2b30      	cmp	r3, #48	; 0x30
   b9292:	d0f9      	beq.n	b9288 <_strtod_l+0x130>
   b9294:	2b00      	cmp	r3, #0
   b9296:	d0a3      	beq.n	b91e0 <_strtod_l+0x88>
   b9298:	2301      	movs	r3, #1
   b929a:	f04f 0900 	mov.w	r9, #0
   b929e:	9304      	str	r3, [sp, #16]
   b92a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92a2:	9308      	str	r3, [sp, #32]
   b92a4:	f8cd 901c 	str.w	r9, [sp, #28]
   b92a8:	464f      	mov	r7, r9
   b92aa:	220a      	movs	r2, #10
   b92ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b92ae:	7806      	ldrb	r6, [r0, #0]
   b92b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b92b4:	b2d9      	uxtb	r1, r3
   b92b6:	2909      	cmp	r1, #9
   b92b8:	d92a      	bls.n	b9310 <_strtod_l+0x1b8>
   b92ba:	9905      	ldr	r1, [sp, #20]
   b92bc:	462a      	mov	r2, r5
   b92be:	f7ff ff0c 	bl	b90da <strncmp>
   b92c2:	b398      	cbz	r0, b932c <_strtod_l+0x1d4>
   b92c4:	2000      	movs	r0, #0
   b92c6:	4632      	mov	r2, r6
   b92c8:	463d      	mov	r5, r7
   b92ca:	9005      	str	r0, [sp, #20]
   b92cc:	4603      	mov	r3, r0
   b92ce:	2a65      	cmp	r2, #101	; 0x65
   b92d0:	d001      	beq.n	b92d6 <_strtod_l+0x17e>
   b92d2:	2a45      	cmp	r2, #69	; 0x45
   b92d4:	d118      	bne.n	b9308 <_strtod_l+0x1b0>
   b92d6:	b91d      	cbnz	r5, b92e0 <_strtod_l+0x188>
   b92d8:	9a04      	ldr	r2, [sp, #16]
   b92da:	4302      	orrs	r2, r0
   b92dc:	d09e      	beq.n	b921c <_strtod_l+0xc4>
   b92de:	2500      	movs	r5, #0
   b92e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b92e4:	f108 0201 	add.w	r2, r8, #1
   b92e8:	9217      	str	r2, [sp, #92]	; 0x5c
   b92ea:	f898 2001 	ldrb.w	r2, [r8, #1]
   b92ee:	2a2b      	cmp	r2, #43	; 0x2b
   b92f0:	d075      	beq.n	b93de <_strtod_l+0x286>
   b92f2:	2a2d      	cmp	r2, #45	; 0x2d
   b92f4:	d07b      	beq.n	b93ee <_strtod_l+0x296>
   b92f6:	f04f 0c00 	mov.w	ip, #0
   b92fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b92fe:	2909      	cmp	r1, #9
   b9300:	f240 8082 	bls.w	b9408 <_strtod_l+0x2b0>
   b9304:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9308:	2600      	movs	r6, #0
   b930a:	e09d      	b.n	b9448 <_strtod_l+0x2f0>
   b930c:	2300      	movs	r3, #0
   b930e:	e7c4      	b.n	b929a <_strtod_l+0x142>
   b9310:	2f08      	cmp	r7, #8
   b9312:	bfd8      	it	le
   b9314:	9907      	ldrle	r1, [sp, #28]
   b9316:	f100 0001 	add.w	r0, r0, #1
   b931a:	bfda      	itte	le
   b931c:	fb02 3301 	mlale	r3, r2, r1, r3
   b9320:	9307      	strle	r3, [sp, #28]
   b9322:	fb02 3909 	mlagt	r9, r2, r9, r3
   b9326:	3701      	adds	r7, #1
   b9328:	9017      	str	r0, [sp, #92]	; 0x5c
   b932a:	e7bf      	b.n	b92ac <_strtod_l+0x154>
   b932c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b932e:	195a      	adds	r2, r3, r5
   b9330:	9217      	str	r2, [sp, #92]	; 0x5c
   b9332:	5d5a      	ldrb	r2, [r3, r5]
   b9334:	2f00      	cmp	r7, #0
   b9336:	d037      	beq.n	b93a8 <_strtod_l+0x250>
   b9338:	9005      	str	r0, [sp, #20]
   b933a:	463d      	mov	r5, r7
   b933c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9340:	2b09      	cmp	r3, #9
   b9342:	d912      	bls.n	b936a <_strtod_l+0x212>
   b9344:	2301      	movs	r3, #1
   b9346:	e7c2      	b.n	b92ce <_strtod_l+0x176>
   b9348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b934a:	1c5a      	adds	r2, r3, #1
   b934c:	9217      	str	r2, [sp, #92]	; 0x5c
   b934e:	785a      	ldrb	r2, [r3, #1]
   b9350:	3001      	adds	r0, #1
   b9352:	2a30      	cmp	r2, #48	; 0x30
   b9354:	d0f8      	beq.n	b9348 <_strtod_l+0x1f0>
   b9356:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b935a:	2b08      	cmp	r3, #8
   b935c:	f200 84d9 	bhi.w	b9d12 <_strtod_l+0xbba>
   b9360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9362:	9005      	str	r0, [sp, #20]
   b9364:	2000      	movs	r0, #0
   b9366:	9308      	str	r3, [sp, #32]
   b9368:	4605      	mov	r5, r0
   b936a:	3a30      	subs	r2, #48	; 0x30
   b936c:	f100 0301 	add.w	r3, r0, #1
   b9370:	d014      	beq.n	b939c <_strtod_l+0x244>
   b9372:	9905      	ldr	r1, [sp, #20]
   b9374:	4419      	add	r1, r3
   b9376:	9105      	str	r1, [sp, #20]
   b9378:	462b      	mov	r3, r5
   b937a:	eb00 0e05 	add.w	lr, r0, r5
   b937e:	210a      	movs	r1, #10
   b9380:	4573      	cmp	r3, lr
   b9382:	d113      	bne.n	b93ac <_strtod_l+0x254>
   b9384:	182b      	adds	r3, r5, r0
   b9386:	2b08      	cmp	r3, #8
   b9388:	f105 0501 	add.w	r5, r5, #1
   b938c:	4405      	add	r5, r0
   b938e:	dc1c      	bgt.n	b93ca <_strtod_l+0x272>
   b9390:	9907      	ldr	r1, [sp, #28]
   b9392:	230a      	movs	r3, #10
   b9394:	fb03 2301 	mla	r3, r3, r1, r2
   b9398:	9307      	str	r3, [sp, #28]
   b939a:	2300      	movs	r3, #0
   b939c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b939e:	1c51      	adds	r1, r2, #1
   b93a0:	9117      	str	r1, [sp, #92]	; 0x5c
   b93a2:	7852      	ldrb	r2, [r2, #1]
   b93a4:	4618      	mov	r0, r3
   b93a6:	e7c9      	b.n	b933c <_strtod_l+0x1e4>
   b93a8:	4638      	mov	r0, r7
   b93aa:	e7d2      	b.n	b9352 <_strtod_l+0x1fa>
   b93ac:	2b08      	cmp	r3, #8
   b93ae:	dc04      	bgt.n	b93ba <_strtod_l+0x262>
   b93b0:	9e07      	ldr	r6, [sp, #28]
   b93b2:	434e      	muls	r6, r1
   b93b4:	9607      	str	r6, [sp, #28]
   b93b6:	3301      	adds	r3, #1
   b93b8:	e7e2      	b.n	b9380 <_strtod_l+0x228>
   b93ba:	f103 0c01 	add.w	ip, r3, #1
   b93be:	f1bc 0f10 	cmp.w	ip, #16
   b93c2:	bfd8      	it	le
   b93c4:	fb01 f909 	mulle.w	r9, r1, r9
   b93c8:	e7f5      	b.n	b93b6 <_strtod_l+0x25e>
   b93ca:	2d10      	cmp	r5, #16
   b93cc:	bfdc      	itt	le
   b93ce:	230a      	movle	r3, #10
   b93d0:	fb03 2909 	mlale	r9, r3, r9, r2
   b93d4:	e7e1      	b.n	b939a <_strtod_l+0x242>
   b93d6:	2300      	movs	r3, #0
   b93d8:	9305      	str	r3, [sp, #20]
   b93da:	2301      	movs	r3, #1
   b93dc:	e77c      	b.n	b92d8 <_strtod_l+0x180>
   b93de:	f04f 0c00 	mov.w	ip, #0
   b93e2:	f108 0202 	add.w	r2, r8, #2
   b93e6:	9217      	str	r2, [sp, #92]	; 0x5c
   b93e8:	f898 2002 	ldrb.w	r2, [r8, #2]
   b93ec:	e785      	b.n	b92fa <_strtod_l+0x1a2>
   b93ee:	f04f 0c01 	mov.w	ip, #1
   b93f2:	e7f6      	b.n	b93e2 <_strtod_l+0x28a>
   b93f4:	000bbe20 	.word	0x000bbe20
   b93f8:	000bbbb4 	.word	0x000bbbb4
   b93fc:	7ff00000 	.word	0x7ff00000
   b9400:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9402:	1c51      	adds	r1, r2, #1
   b9404:	9117      	str	r1, [sp, #92]	; 0x5c
   b9406:	7852      	ldrb	r2, [r2, #1]
   b9408:	2a30      	cmp	r2, #48	; 0x30
   b940a:	d0f9      	beq.n	b9400 <_strtod_l+0x2a8>
   b940c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9410:	2908      	cmp	r1, #8
   b9412:	f63f af79 	bhi.w	b9308 <_strtod_l+0x1b0>
   b9416:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b941a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b941c:	9206      	str	r2, [sp, #24]
   b941e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9420:	1c51      	adds	r1, r2, #1
   b9422:	9117      	str	r1, [sp, #92]	; 0x5c
   b9424:	7852      	ldrb	r2, [r2, #1]
   b9426:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b942a:	2e09      	cmp	r6, #9
   b942c:	d937      	bls.n	b949e <_strtod_l+0x346>
   b942e:	9e06      	ldr	r6, [sp, #24]
   b9430:	1b89      	subs	r1, r1, r6
   b9432:	2908      	cmp	r1, #8
   b9434:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9438:	dc02      	bgt.n	b9440 <_strtod_l+0x2e8>
   b943a:	4576      	cmp	r6, lr
   b943c:	bfa8      	it	ge
   b943e:	4676      	movge	r6, lr
   b9440:	f1bc 0f00 	cmp.w	ip, #0
   b9444:	d000      	beq.n	b9448 <_strtod_l+0x2f0>
   b9446:	4276      	negs	r6, r6
   b9448:	2d00      	cmp	r5, #0
   b944a:	d14d      	bne.n	b94e8 <_strtod_l+0x390>
   b944c:	9904      	ldr	r1, [sp, #16]
   b944e:	4301      	orrs	r1, r0
   b9450:	f47f aec6 	bne.w	b91e0 <_strtod_l+0x88>
   b9454:	2b00      	cmp	r3, #0
   b9456:	f47f aee1 	bne.w	b921c <_strtod_l+0xc4>
   b945a:	2a69      	cmp	r2, #105	; 0x69
   b945c:	d027      	beq.n	b94ae <_strtod_l+0x356>
   b945e:	dc24      	bgt.n	b94aa <_strtod_l+0x352>
   b9460:	2a49      	cmp	r2, #73	; 0x49
   b9462:	d024      	beq.n	b94ae <_strtod_l+0x356>
   b9464:	2a4e      	cmp	r2, #78	; 0x4e
   b9466:	f47f aed9 	bne.w	b921c <_strtod_l+0xc4>
   b946a:	499f      	ldr	r1, [pc, #636]	; (b96e8 <_strtod_l+0x590>)
   b946c:	a817      	add	r0, sp, #92	; 0x5c
   b946e:	f001 f88f 	bl	ba590 <__match>
   b9472:	2800      	cmp	r0, #0
   b9474:	f43f aed2 	beq.w	b921c <_strtod_l+0xc4>
   b9478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b947a:	781b      	ldrb	r3, [r3, #0]
   b947c:	2b28      	cmp	r3, #40	; 0x28
   b947e:	d12d      	bne.n	b94dc <_strtod_l+0x384>
   b9480:	499a      	ldr	r1, [pc, #616]	; (b96ec <_strtod_l+0x594>)
   b9482:	aa1a      	add	r2, sp, #104	; 0x68
   b9484:	a817      	add	r0, sp, #92	; 0x5c
   b9486:	f001 f897 	bl	ba5b8 <__hexnan>
   b948a:	2805      	cmp	r0, #5
   b948c:	d126      	bne.n	b94dc <_strtod_l+0x384>
   b948e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9490:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b9494:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9498:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b949c:	e6a0      	b.n	b91e0 <_strtod_l+0x88>
   b949e:	210a      	movs	r1, #10
   b94a0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b94a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b94a8:	e7b9      	b.n	b941e <_strtod_l+0x2c6>
   b94aa:	2a6e      	cmp	r2, #110	; 0x6e
   b94ac:	e7db      	b.n	b9466 <_strtod_l+0x30e>
   b94ae:	4990      	ldr	r1, [pc, #576]	; (b96f0 <_strtod_l+0x598>)
   b94b0:	a817      	add	r0, sp, #92	; 0x5c
   b94b2:	f001 f86d 	bl	ba590 <__match>
   b94b6:	2800      	cmp	r0, #0
   b94b8:	f43f aeb0 	beq.w	b921c <_strtod_l+0xc4>
   b94bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b94be:	498d      	ldr	r1, [pc, #564]	; (b96f4 <_strtod_l+0x59c>)
   b94c0:	3b01      	subs	r3, #1
   b94c2:	a817      	add	r0, sp, #92	; 0x5c
   b94c4:	9317      	str	r3, [sp, #92]	; 0x5c
   b94c6:	f001 f863 	bl	ba590 <__match>
   b94ca:	b910      	cbnz	r0, b94d2 <_strtod_l+0x37a>
   b94cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b94ce:	3301      	adds	r3, #1
   b94d0:	9317      	str	r3, [sp, #92]	; 0x5c
   b94d2:	f8df b230 	ldr.w	fp, [pc, #560]	; b9704 <_strtod_l+0x5ac>
   b94d6:	f04f 0a00 	mov.w	sl, #0
   b94da:	e681      	b.n	b91e0 <_strtod_l+0x88>
   b94dc:	4886      	ldr	r0, [pc, #536]	; (b96f8 <_strtod_l+0x5a0>)
   b94de:	f001 fdef 	bl	bb0c0 <nan>
   b94e2:	ec5b ab10 	vmov	sl, fp, d0
   b94e6:	e67b      	b.n	b91e0 <_strtod_l+0x88>
   b94e8:	9b05      	ldr	r3, [sp, #20]
   b94ea:	9807      	ldr	r0, [sp, #28]
   b94ec:	1af3      	subs	r3, r6, r3
   b94ee:	2f00      	cmp	r7, #0
   b94f0:	bf08      	it	eq
   b94f2:	462f      	moveq	r7, r5
   b94f4:	2d10      	cmp	r5, #16
   b94f6:	9306      	str	r3, [sp, #24]
   b94f8:	46a8      	mov	r8, r5
   b94fa:	bfa8      	it	ge
   b94fc:	f04f 0810 	movge.w	r8, #16
   b9500:	f7fa fed0 	bl	b42a4 <__aeabi_ui2d>
   b9504:	2d09      	cmp	r5, #9
   b9506:	4682      	mov	sl, r0
   b9508:	468b      	mov	fp, r1
   b950a:	dd13      	ble.n	b9534 <_strtod_l+0x3dc>
   b950c:	4b7b      	ldr	r3, [pc, #492]	; (b96fc <_strtod_l+0x5a4>)
   b950e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b9512:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b9516:	f7fa ff3f 	bl	b4398 <__aeabi_dmul>
   b951a:	4682      	mov	sl, r0
   b951c:	4648      	mov	r0, r9
   b951e:	468b      	mov	fp, r1
   b9520:	f7fa fec0 	bl	b42a4 <__aeabi_ui2d>
   b9524:	4602      	mov	r2, r0
   b9526:	460b      	mov	r3, r1
   b9528:	4650      	mov	r0, sl
   b952a:	4659      	mov	r1, fp
   b952c:	f7fa fd7e 	bl	b402c <__adddf3>
   b9530:	4682      	mov	sl, r0
   b9532:	468b      	mov	fp, r1
   b9534:	2d0f      	cmp	r5, #15
   b9536:	dc38      	bgt.n	b95aa <_strtod_l+0x452>
   b9538:	9b06      	ldr	r3, [sp, #24]
   b953a:	2b00      	cmp	r3, #0
   b953c:	f43f ae50 	beq.w	b91e0 <_strtod_l+0x88>
   b9540:	dd24      	ble.n	b958c <_strtod_l+0x434>
   b9542:	2b16      	cmp	r3, #22
   b9544:	dc0b      	bgt.n	b955e <_strtod_l+0x406>
   b9546:	496d      	ldr	r1, [pc, #436]	; (b96fc <_strtod_l+0x5a4>)
   b9548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b954c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9550:	4652      	mov	r2, sl
   b9552:	465b      	mov	r3, fp
   b9554:	f7fa ff20 	bl	b4398 <__aeabi_dmul>
   b9558:	4682      	mov	sl, r0
   b955a:	468b      	mov	fp, r1
   b955c:	e640      	b.n	b91e0 <_strtod_l+0x88>
   b955e:	9a06      	ldr	r2, [sp, #24]
   b9560:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9564:	4293      	cmp	r3, r2
   b9566:	db20      	blt.n	b95aa <_strtod_l+0x452>
   b9568:	4c64      	ldr	r4, [pc, #400]	; (b96fc <_strtod_l+0x5a4>)
   b956a:	f1c5 050f 	rsb	r5, r5, #15
   b956e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9572:	4652      	mov	r2, sl
   b9574:	465b      	mov	r3, fp
   b9576:	e9d1 0100 	ldrd	r0, r1, [r1]
   b957a:	f7fa ff0d 	bl	b4398 <__aeabi_dmul>
   b957e:	9b06      	ldr	r3, [sp, #24]
   b9580:	1b5d      	subs	r5, r3, r5
   b9582:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9586:	e9d4 2300 	ldrd	r2, r3, [r4]
   b958a:	e7e3      	b.n	b9554 <_strtod_l+0x3fc>
   b958c:	9b06      	ldr	r3, [sp, #24]
   b958e:	3316      	adds	r3, #22
   b9590:	db0b      	blt.n	b95aa <_strtod_l+0x452>
   b9592:	9b05      	ldr	r3, [sp, #20]
   b9594:	1b9e      	subs	r6, r3, r6
   b9596:	4b59      	ldr	r3, [pc, #356]	; (b96fc <_strtod_l+0x5a4>)
   b9598:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b959c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b95a0:	4650      	mov	r0, sl
   b95a2:	4659      	mov	r1, fp
   b95a4:	f7fb f822 	bl	b45ec <__aeabi_ddiv>
   b95a8:	e7d6      	b.n	b9558 <_strtod_l+0x400>
   b95aa:	9b06      	ldr	r3, [sp, #24]
   b95ac:	eba5 0808 	sub.w	r8, r5, r8
   b95b0:	4498      	add	r8, r3
   b95b2:	f1b8 0f00 	cmp.w	r8, #0
   b95b6:	dd74      	ble.n	b96a2 <_strtod_l+0x54a>
   b95b8:	f018 030f 	ands.w	r3, r8, #15
   b95bc:	d00a      	beq.n	b95d4 <_strtod_l+0x47c>
   b95be:	494f      	ldr	r1, [pc, #316]	; (b96fc <_strtod_l+0x5a4>)
   b95c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b95c4:	4652      	mov	r2, sl
   b95c6:	465b      	mov	r3, fp
   b95c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b95cc:	f7fa fee4 	bl	b4398 <__aeabi_dmul>
   b95d0:	4682      	mov	sl, r0
   b95d2:	468b      	mov	fp, r1
   b95d4:	f038 080f 	bics.w	r8, r8, #15
   b95d8:	d04f      	beq.n	b967a <_strtod_l+0x522>
   b95da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b95de:	dd22      	ble.n	b9626 <_strtod_l+0x4ce>
   b95e0:	2500      	movs	r5, #0
   b95e2:	462e      	mov	r6, r5
   b95e4:	9507      	str	r5, [sp, #28]
   b95e6:	9505      	str	r5, [sp, #20]
   b95e8:	2322      	movs	r3, #34	; 0x22
   b95ea:	f8df b118 	ldr.w	fp, [pc, #280]	; b9704 <_strtod_l+0x5ac>
   b95ee:	6023      	str	r3, [r4, #0]
   b95f0:	f04f 0a00 	mov.w	sl, #0
   b95f4:	9b07      	ldr	r3, [sp, #28]
   b95f6:	2b00      	cmp	r3, #0
   b95f8:	f43f adf2 	beq.w	b91e0 <_strtod_l+0x88>
   b95fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   b95fe:	4620      	mov	r0, r4
   b9600:	f001 f8cc 	bl	ba79c <_Bfree>
   b9604:	9905      	ldr	r1, [sp, #20]
   b9606:	4620      	mov	r0, r4
   b9608:	f001 f8c8 	bl	ba79c <_Bfree>
   b960c:	4631      	mov	r1, r6
   b960e:	4620      	mov	r0, r4
   b9610:	f001 f8c4 	bl	ba79c <_Bfree>
   b9614:	9907      	ldr	r1, [sp, #28]
   b9616:	4620      	mov	r0, r4
   b9618:	f001 f8c0 	bl	ba79c <_Bfree>
   b961c:	4629      	mov	r1, r5
   b961e:	4620      	mov	r0, r4
   b9620:	f001 f8bc 	bl	ba79c <_Bfree>
   b9624:	e5dc      	b.n	b91e0 <_strtod_l+0x88>
   b9626:	4b36      	ldr	r3, [pc, #216]	; (b9700 <_strtod_l+0x5a8>)
   b9628:	9304      	str	r3, [sp, #16]
   b962a:	2300      	movs	r3, #0
   b962c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9630:	4650      	mov	r0, sl
   b9632:	4659      	mov	r1, fp
   b9634:	4699      	mov	r9, r3
   b9636:	f1b8 0f01 	cmp.w	r8, #1
   b963a:	dc21      	bgt.n	b9680 <_strtod_l+0x528>
   b963c:	b10b      	cbz	r3, b9642 <_strtod_l+0x4ea>
   b963e:	4682      	mov	sl, r0
   b9640:	468b      	mov	fp, r1
   b9642:	4b2f      	ldr	r3, [pc, #188]	; (b9700 <_strtod_l+0x5a8>)
   b9644:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9648:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b964c:	4652      	mov	r2, sl
   b964e:	465b      	mov	r3, fp
   b9650:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9654:	f7fa fea0 	bl	b4398 <__aeabi_dmul>
   b9658:	4b2a      	ldr	r3, [pc, #168]	; (b9704 <_strtod_l+0x5ac>)
   b965a:	460a      	mov	r2, r1
   b965c:	400b      	ands	r3, r1
   b965e:	492a      	ldr	r1, [pc, #168]	; (b9708 <_strtod_l+0x5b0>)
   b9660:	428b      	cmp	r3, r1
   b9662:	4682      	mov	sl, r0
   b9664:	d8bc      	bhi.n	b95e0 <_strtod_l+0x488>
   b9666:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b966a:	428b      	cmp	r3, r1
   b966c:	bf86      	itte	hi
   b966e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b970c <_strtod_l+0x5b4>
   b9672:	f04f 3aff 	movhi.w	sl, #4294967295
   b9676:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b967a:	2300      	movs	r3, #0
   b967c:	9304      	str	r3, [sp, #16]
   b967e:	e084      	b.n	b978a <_strtod_l+0x632>
   b9680:	f018 0f01 	tst.w	r8, #1
   b9684:	d005      	beq.n	b9692 <_strtod_l+0x53a>
   b9686:	9b04      	ldr	r3, [sp, #16]
   b9688:	e9d3 2300 	ldrd	r2, r3, [r3]
   b968c:	f7fa fe84 	bl	b4398 <__aeabi_dmul>
   b9690:	2301      	movs	r3, #1
   b9692:	9a04      	ldr	r2, [sp, #16]
   b9694:	3208      	adds	r2, #8
   b9696:	f109 0901 	add.w	r9, r9, #1
   b969a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b969e:	9204      	str	r2, [sp, #16]
   b96a0:	e7c9      	b.n	b9636 <_strtod_l+0x4de>
   b96a2:	d0ea      	beq.n	b967a <_strtod_l+0x522>
   b96a4:	f1c8 0800 	rsb	r8, r8, #0
   b96a8:	f018 020f 	ands.w	r2, r8, #15
   b96ac:	d00a      	beq.n	b96c4 <_strtod_l+0x56c>
   b96ae:	4b13      	ldr	r3, [pc, #76]	; (b96fc <_strtod_l+0x5a4>)
   b96b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b96b4:	4650      	mov	r0, sl
   b96b6:	4659      	mov	r1, fp
   b96b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b96bc:	f7fa ff96 	bl	b45ec <__aeabi_ddiv>
   b96c0:	4682      	mov	sl, r0
   b96c2:	468b      	mov	fp, r1
   b96c4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b96c8:	d0d7      	beq.n	b967a <_strtod_l+0x522>
   b96ca:	f1b8 0f1f 	cmp.w	r8, #31
   b96ce:	dd1f      	ble.n	b9710 <_strtod_l+0x5b8>
   b96d0:	2500      	movs	r5, #0
   b96d2:	462e      	mov	r6, r5
   b96d4:	9507      	str	r5, [sp, #28]
   b96d6:	9505      	str	r5, [sp, #20]
   b96d8:	2322      	movs	r3, #34	; 0x22
   b96da:	f04f 0a00 	mov.w	sl, #0
   b96de:	f04f 0b00 	mov.w	fp, #0
   b96e2:	6023      	str	r3, [r4, #0]
   b96e4:	e786      	b.n	b95f4 <_strtod_l+0x49c>
   b96e6:	bf00      	nop
   b96e8:	000bbbae 	.word	0x000bbbae
   b96ec:	000bbbc8 	.word	0x000bbbc8
   b96f0:	000bbba5 	.word	0x000bbba5
   b96f4:	000bbba8 	.word	0x000bbba8
   b96f8:	000bb499 	.word	0x000bb499
   b96fc:	000bbee0 	.word	0x000bbee0
   b9700:	000bbeb8 	.word	0x000bbeb8
   b9704:	7ff00000 	.word	0x7ff00000
   b9708:	7ca00000 	.word	0x7ca00000
   b970c:	7fefffff 	.word	0x7fefffff
   b9710:	f018 0310 	ands.w	r3, r8, #16
   b9714:	bf18      	it	ne
   b9716:	236a      	movne	r3, #106	; 0x6a
   b9718:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9ac8 <_strtod_l+0x970>
   b971c:	9304      	str	r3, [sp, #16]
   b971e:	4650      	mov	r0, sl
   b9720:	4659      	mov	r1, fp
   b9722:	2300      	movs	r3, #0
   b9724:	f018 0f01 	tst.w	r8, #1
   b9728:	d004      	beq.n	b9734 <_strtod_l+0x5dc>
   b972a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b972e:	f7fa fe33 	bl	b4398 <__aeabi_dmul>
   b9732:	2301      	movs	r3, #1
   b9734:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9738:	f109 0908 	add.w	r9, r9, #8
   b973c:	d1f2      	bne.n	b9724 <_strtod_l+0x5cc>
   b973e:	b10b      	cbz	r3, b9744 <_strtod_l+0x5ec>
   b9740:	4682      	mov	sl, r0
   b9742:	468b      	mov	fp, r1
   b9744:	9b04      	ldr	r3, [sp, #16]
   b9746:	b1c3      	cbz	r3, b977a <_strtod_l+0x622>
   b9748:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b974c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9750:	2b00      	cmp	r3, #0
   b9752:	4659      	mov	r1, fp
   b9754:	dd11      	ble.n	b977a <_strtod_l+0x622>
   b9756:	2b1f      	cmp	r3, #31
   b9758:	f340 8124 	ble.w	b99a4 <_strtod_l+0x84c>
   b975c:	2b34      	cmp	r3, #52	; 0x34
   b975e:	bfde      	ittt	le
   b9760:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9764:	f04f 33ff 	movle.w	r3, #4294967295
   b9768:	fa03 f202 	lslle.w	r2, r3, r2
   b976c:	f04f 0a00 	mov.w	sl, #0
   b9770:	bfcc      	ite	gt
   b9772:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9776:	ea02 0b01 	andle.w	fp, r2, r1
   b977a:	2200      	movs	r2, #0
   b977c:	2300      	movs	r3, #0
   b977e:	4650      	mov	r0, sl
   b9780:	4659      	mov	r1, fp
   b9782:	f7fb f871 	bl	b4868 <__aeabi_dcmpeq>
   b9786:	2800      	cmp	r0, #0
   b9788:	d1a2      	bne.n	b96d0 <_strtod_l+0x578>
   b978a:	9b07      	ldr	r3, [sp, #28]
   b978c:	9300      	str	r3, [sp, #0]
   b978e:	9908      	ldr	r1, [sp, #32]
   b9790:	462b      	mov	r3, r5
   b9792:	463a      	mov	r2, r7
   b9794:	4620      	mov	r0, r4
   b9796:	f001 f869 	bl	ba86c <__s2b>
   b979a:	9007      	str	r0, [sp, #28]
   b979c:	2800      	cmp	r0, #0
   b979e:	f43f af1f 	beq.w	b95e0 <_strtod_l+0x488>
   b97a2:	9b05      	ldr	r3, [sp, #20]
   b97a4:	1b9e      	subs	r6, r3, r6
   b97a6:	9b06      	ldr	r3, [sp, #24]
   b97a8:	2b00      	cmp	r3, #0
   b97aa:	bfb4      	ite	lt
   b97ac:	4633      	movlt	r3, r6
   b97ae:	2300      	movge	r3, #0
   b97b0:	930c      	str	r3, [sp, #48]	; 0x30
   b97b2:	9b06      	ldr	r3, [sp, #24]
   b97b4:	2500      	movs	r5, #0
   b97b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b97ba:	9312      	str	r3, [sp, #72]	; 0x48
   b97bc:	462e      	mov	r6, r5
   b97be:	9b07      	ldr	r3, [sp, #28]
   b97c0:	4620      	mov	r0, r4
   b97c2:	6859      	ldr	r1, [r3, #4]
   b97c4:	f000 ffaa 	bl	ba71c <_Balloc>
   b97c8:	9005      	str	r0, [sp, #20]
   b97ca:	2800      	cmp	r0, #0
   b97cc:	f43f af0c 	beq.w	b95e8 <_strtod_l+0x490>
   b97d0:	9b07      	ldr	r3, [sp, #28]
   b97d2:	691a      	ldr	r2, [r3, #16]
   b97d4:	3202      	adds	r2, #2
   b97d6:	f103 010c 	add.w	r1, r3, #12
   b97da:	0092      	lsls	r2, r2, #2
   b97dc:	300c      	adds	r0, #12
   b97de:	f7ff fbe8 	bl	b8fb2 <memcpy>
   b97e2:	ec4b ab10 	vmov	d0, sl, fp
   b97e6:	aa1a      	add	r2, sp, #104	; 0x68
   b97e8:	a919      	add	r1, sp, #100	; 0x64
   b97ea:	4620      	mov	r0, r4
   b97ec:	f001 fb84 	bl	baef8 <__d2b>
   b97f0:	ec4b ab18 	vmov	d8, sl, fp
   b97f4:	9018      	str	r0, [sp, #96]	; 0x60
   b97f6:	2800      	cmp	r0, #0
   b97f8:	f43f aef6 	beq.w	b95e8 <_strtod_l+0x490>
   b97fc:	2101      	movs	r1, #1
   b97fe:	4620      	mov	r0, r4
   b9800:	f001 f8ce 	bl	ba9a0 <__i2b>
   b9804:	4606      	mov	r6, r0
   b9806:	2800      	cmp	r0, #0
   b9808:	f43f aeee 	beq.w	b95e8 <_strtod_l+0x490>
   b980c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b980e:	9904      	ldr	r1, [sp, #16]
   b9810:	2b00      	cmp	r3, #0
   b9812:	bfab      	itete	ge
   b9814:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9816:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9818:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b981a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b981e:	bfac      	ite	ge
   b9820:	eb03 0902 	addge.w	r9, r3, r2
   b9824:	1ad7      	sublt	r7, r2, r3
   b9826:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9828:	eba3 0801 	sub.w	r8, r3, r1
   b982c:	4490      	add	r8, r2
   b982e:	4ba1      	ldr	r3, [pc, #644]	; (b9ab4 <_strtod_l+0x95c>)
   b9830:	f108 38ff 	add.w	r8, r8, #4294967295
   b9834:	4598      	cmp	r8, r3
   b9836:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b983a:	f280 80c7 	bge.w	b99cc <_strtod_l+0x874>
   b983e:	eba3 0308 	sub.w	r3, r3, r8
   b9842:	2b1f      	cmp	r3, #31
   b9844:	eba2 0203 	sub.w	r2, r2, r3
   b9848:	f04f 0101 	mov.w	r1, #1
   b984c:	f300 80b1 	bgt.w	b99b2 <_strtod_l+0x85a>
   b9850:	fa01 f303 	lsl.w	r3, r1, r3
   b9854:	930d      	str	r3, [sp, #52]	; 0x34
   b9856:	2300      	movs	r3, #0
   b9858:	9308      	str	r3, [sp, #32]
   b985a:	eb09 0802 	add.w	r8, r9, r2
   b985e:	9b04      	ldr	r3, [sp, #16]
   b9860:	45c1      	cmp	r9, r8
   b9862:	4417      	add	r7, r2
   b9864:	441f      	add	r7, r3
   b9866:	464b      	mov	r3, r9
   b9868:	bfa8      	it	ge
   b986a:	4643      	movge	r3, r8
   b986c:	42bb      	cmp	r3, r7
   b986e:	bfa8      	it	ge
   b9870:	463b      	movge	r3, r7
   b9872:	2b00      	cmp	r3, #0
   b9874:	bfc2      	ittt	gt
   b9876:	eba8 0803 	subgt.w	r8, r8, r3
   b987a:	1aff      	subgt	r7, r7, r3
   b987c:	eba9 0903 	subgt.w	r9, r9, r3
   b9880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9882:	2b00      	cmp	r3, #0
   b9884:	dd17      	ble.n	b98b6 <_strtod_l+0x75e>
   b9886:	4631      	mov	r1, r6
   b9888:	461a      	mov	r2, r3
   b988a:	4620      	mov	r0, r4
   b988c:	f001 f948 	bl	bab20 <__pow5mult>
   b9890:	4606      	mov	r6, r0
   b9892:	2800      	cmp	r0, #0
   b9894:	f43f aea8 	beq.w	b95e8 <_strtod_l+0x490>
   b9898:	4601      	mov	r1, r0
   b989a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b989c:	4620      	mov	r0, r4
   b989e:	f001 f895 	bl	ba9cc <__multiply>
   b98a2:	900b      	str	r0, [sp, #44]	; 0x2c
   b98a4:	2800      	cmp	r0, #0
   b98a6:	f43f ae9f 	beq.w	b95e8 <_strtod_l+0x490>
   b98aa:	9918      	ldr	r1, [sp, #96]	; 0x60
   b98ac:	4620      	mov	r0, r4
   b98ae:	f000 ff75 	bl	ba79c <_Bfree>
   b98b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b98b4:	9318      	str	r3, [sp, #96]	; 0x60
   b98b6:	f1b8 0f00 	cmp.w	r8, #0
   b98ba:	f300 808c 	bgt.w	b99d6 <_strtod_l+0x87e>
   b98be:	9b06      	ldr	r3, [sp, #24]
   b98c0:	2b00      	cmp	r3, #0
   b98c2:	dd08      	ble.n	b98d6 <_strtod_l+0x77e>
   b98c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b98c6:	9905      	ldr	r1, [sp, #20]
   b98c8:	4620      	mov	r0, r4
   b98ca:	f001 f929 	bl	bab20 <__pow5mult>
   b98ce:	9005      	str	r0, [sp, #20]
   b98d0:	2800      	cmp	r0, #0
   b98d2:	f43f ae89 	beq.w	b95e8 <_strtod_l+0x490>
   b98d6:	2f00      	cmp	r7, #0
   b98d8:	dd08      	ble.n	b98ec <_strtod_l+0x794>
   b98da:	9905      	ldr	r1, [sp, #20]
   b98dc:	463a      	mov	r2, r7
   b98de:	4620      	mov	r0, r4
   b98e0:	f001 f978 	bl	babd4 <__lshift>
   b98e4:	9005      	str	r0, [sp, #20]
   b98e6:	2800      	cmp	r0, #0
   b98e8:	f43f ae7e 	beq.w	b95e8 <_strtod_l+0x490>
   b98ec:	f1b9 0f00 	cmp.w	r9, #0
   b98f0:	dd08      	ble.n	b9904 <_strtod_l+0x7ac>
   b98f2:	4631      	mov	r1, r6
   b98f4:	464a      	mov	r2, r9
   b98f6:	4620      	mov	r0, r4
   b98f8:	f001 f96c 	bl	babd4 <__lshift>
   b98fc:	4606      	mov	r6, r0
   b98fe:	2800      	cmp	r0, #0
   b9900:	f43f ae72 	beq.w	b95e8 <_strtod_l+0x490>
   b9904:	9a05      	ldr	r2, [sp, #20]
   b9906:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9908:	4620      	mov	r0, r4
   b990a:	f001 f9ef 	bl	bacec <__mdiff>
   b990e:	4605      	mov	r5, r0
   b9910:	2800      	cmp	r0, #0
   b9912:	f43f ae69 	beq.w	b95e8 <_strtod_l+0x490>
   b9916:	68c3      	ldr	r3, [r0, #12]
   b9918:	930b      	str	r3, [sp, #44]	; 0x2c
   b991a:	2300      	movs	r3, #0
   b991c:	60c3      	str	r3, [r0, #12]
   b991e:	4631      	mov	r1, r6
   b9920:	f001 f9c8 	bl	bacb4 <__mcmp>
   b9924:	2800      	cmp	r0, #0
   b9926:	da60      	bge.n	b99ea <_strtod_l+0x892>
   b9928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b992a:	ea53 030a 	orrs.w	r3, r3, sl
   b992e:	f040 8082 	bne.w	b9a36 <_strtod_l+0x8de>
   b9932:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9936:	2b00      	cmp	r3, #0
   b9938:	d17d      	bne.n	b9a36 <_strtod_l+0x8de>
   b993a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b993e:	0d1b      	lsrs	r3, r3, #20
   b9940:	051b      	lsls	r3, r3, #20
   b9942:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9946:	d976      	bls.n	b9a36 <_strtod_l+0x8de>
   b9948:	696b      	ldr	r3, [r5, #20]
   b994a:	b913      	cbnz	r3, b9952 <_strtod_l+0x7fa>
   b994c:	692b      	ldr	r3, [r5, #16]
   b994e:	2b01      	cmp	r3, #1
   b9950:	dd71      	ble.n	b9a36 <_strtod_l+0x8de>
   b9952:	4629      	mov	r1, r5
   b9954:	2201      	movs	r2, #1
   b9956:	4620      	mov	r0, r4
   b9958:	f001 f93c 	bl	babd4 <__lshift>
   b995c:	4631      	mov	r1, r6
   b995e:	4605      	mov	r5, r0
   b9960:	f001 f9a8 	bl	bacb4 <__mcmp>
   b9964:	2800      	cmp	r0, #0
   b9966:	dd66      	ble.n	b9a36 <_strtod_l+0x8de>
   b9968:	9904      	ldr	r1, [sp, #16]
   b996a:	4a53      	ldr	r2, [pc, #332]	; (b9ab8 <_strtod_l+0x960>)
   b996c:	465b      	mov	r3, fp
   b996e:	2900      	cmp	r1, #0
   b9970:	f000 8081 	beq.w	b9a76 <_strtod_l+0x91e>
   b9974:	ea02 010b 	and.w	r1, r2, fp
   b9978:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b997c:	dc7b      	bgt.n	b9a76 <_strtod_l+0x91e>
   b997e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b9982:	f77f aea9 	ble.w	b96d8 <_strtod_l+0x580>
   b9986:	4b4d      	ldr	r3, [pc, #308]	; (b9abc <_strtod_l+0x964>)
   b9988:	4650      	mov	r0, sl
   b998a:	4659      	mov	r1, fp
   b998c:	2200      	movs	r2, #0
   b998e:	f7fa fd03 	bl	b4398 <__aeabi_dmul>
   b9992:	460b      	mov	r3, r1
   b9994:	4303      	orrs	r3, r0
   b9996:	bf08      	it	eq
   b9998:	2322      	moveq	r3, #34	; 0x22
   b999a:	4682      	mov	sl, r0
   b999c:	468b      	mov	fp, r1
   b999e:	bf08      	it	eq
   b99a0:	6023      	streq	r3, [r4, #0]
   b99a2:	e62b      	b.n	b95fc <_strtod_l+0x4a4>
   b99a4:	f04f 32ff 	mov.w	r2, #4294967295
   b99a8:	fa02 f303 	lsl.w	r3, r2, r3
   b99ac:	ea03 0a0a 	and.w	sl, r3, sl
   b99b0:	e6e3      	b.n	b977a <_strtod_l+0x622>
   b99b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b99b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b99ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b99be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b99c2:	fa01 f308 	lsl.w	r3, r1, r8
   b99c6:	9308      	str	r3, [sp, #32]
   b99c8:	910d      	str	r1, [sp, #52]	; 0x34
   b99ca:	e746      	b.n	b985a <_strtod_l+0x702>
   b99cc:	2300      	movs	r3, #0
   b99ce:	9308      	str	r3, [sp, #32]
   b99d0:	2301      	movs	r3, #1
   b99d2:	930d      	str	r3, [sp, #52]	; 0x34
   b99d4:	e741      	b.n	b985a <_strtod_l+0x702>
   b99d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b99d8:	4642      	mov	r2, r8
   b99da:	4620      	mov	r0, r4
   b99dc:	f001 f8fa 	bl	babd4 <__lshift>
   b99e0:	9018      	str	r0, [sp, #96]	; 0x60
   b99e2:	2800      	cmp	r0, #0
   b99e4:	f47f af6b 	bne.w	b98be <_strtod_l+0x766>
   b99e8:	e5fe      	b.n	b95e8 <_strtod_l+0x490>
   b99ea:	465f      	mov	r7, fp
   b99ec:	d16e      	bne.n	b9acc <_strtod_l+0x974>
   b99ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b99f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b99f4:	b342      	cbz	r2, b9a48 <_strtod_l+0x8f0>
   b99f6:	4a32      	ldr	r2, [pc, #200]	; (b9ac0 <_strtod_l+0x968>)
   b99f8:	4293      	cmp	r3, r2
   b99fa:	d128      	bne.n	b9a4e <_strtod_l+0x8f6>
   b99fc:	9b04      	ldr	r3, [sp, #16]
   b99fe:	4651      	mov	r1, sl
   b9a00:	b1eb      	cbz	r3, b9a3e <_strtod_l+0x8e6>
   b9a02:	4b2d      	ldr	r3, [pc, #180]	; (b9ab8 <_strtod_l+0x960>)
   b9a04:	403b      	ands	r3, r7
   b9a06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9a0a:	f04f 32ff 	mov.w	r2, #4294967295
   b9a0e:	d819      	bhi.n	b9a44 <_strtod_l+0x8ec>
   b9a10:	0d1b      	lsrs	r3, r3, #20
   b9a12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9a16:	fa02 f303 	lsl.w	r3, r2, r3
   b9a1a:	4299      	cmp	r1, r3
   b9a1c:	d117      	bne.n	b9a4e <_strtod_l+0x8f6>
   b9a1e:	4b29      	ldr	r3, [pc, #164]	; (b9ac4 <_strtod_l+0x96c>)
   b9a20:	429f      	cmp	r7, r3
   b9a22:	d102      	bne.n	b9a2a <_strtod_l+0x8d2>
   b9a24:	3101      	adds	r1, #1
   b9a26:	f43f addf 	beq.w	b95e8 <_strtod_l+0x490>
   b9a2a:	4b23      	ldr	r3, [pc, #140]	; (b9ab8 <_strtod_l+0x960>)
   b9a2c:	403b      	ands	r3, r7
   b9a2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9a32:	f04f 0a00 	mov.w	sl, #0
   b9a36:	9b04      	ldr	r3, [sp, #16]
   b9a38:	2b00      	cmp	r3, #0
   b9a3a:	d1a4      	bne.n	b9986 <_strtod_l+0x82e>
   b9a3c:	e5de      	b.n	b95fc <_strtod_l+0x4a4>
   b9a3e:	f04f 33ff 	mov.w	r3, #4294967295
   b9a42:	e7ea      	b.n	b9a1a <_strtod_l+0x8c2>
   b9a44:	4613      	mov	r3, r2
   b9a46:	e7e8      	b.n	b9a1a <_strtod_l+0x8c2>
   b9a48:	ea53 030a 	orrs.w	r3, r3, sl
   b9a4c:	d08c      	beq.n	b9968 <_strtod_l+0x810>
   b9a4e:	9b08      	ldr	r3, [sp, #32]
   b9a50:	b1db      	cbz	r3, b9a8a <_strtod_l+0x932>
   b9a52:	423b      	tst	r3, r7
   b9a54:	d0ef      	beq.n	b9a36 <_strtod_l+0x8de>
   b9a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9a58:	9a04      	ldr	r2, [sp, #16]
   b9a5a:	4650      	mov	r0, sl
   b9a5c:	4659      	mov	r1, fp
   b9a5e:	b1c3      	cbz	r3, b9a92 <_strtod_l+0x93a>
   b9a60:	f7ff fb5b 	bl	b911a <sulp>
   b9a64:	4602      	mov	r2, r0
   b9a66:	460b      	mov	r3, r1
   b9a68:	ec51 0b18 	vmov	r0, r1, d8
   b9a6c:	f7fa fade 	bl	b402c <__adddf3>
   b9a70:	4682      	mov	sl, r0
   b9a72:	468b      	mov	fp, r1
   b9a74:	e7df      	b.n	b9a36 <_strtod_l+0x8de>
   b9a76:	4013      	ands	r3, r2
   b9a78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9a7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9a80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9a84:	f04f 3aff 	mov.w	sl, #4294967295
   b9a88:	e7d5      	b.n	b9a36 <_strtod_l+0x8de>
   b9a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9a8c:	ea13 0f0a 	tst.w	r3, sl
   b9a90:	e7e0      	b.n	b9a54 <_strtod_l+0x8fc>
   b9a92:	f7ff fb42 	bl	b911a <sulp>
   b9a96:	4602      	mov	r2, r0
   b9a98:	460b      	mov	r3, r1
   b9a9a:	ec51 0b18 	vmov	r0, r1, d8
   b9a9e:	f7fa fac3 	bl	b4028 <__aeabi_dsub>
   b9aa2:	2200      	movs	r2, #0
   b9aa4:	2300      	movs	r3, #0
   b9aa6:	4682      	mov	sl, r0
   b9aa8:	468b      	mov	fp, r1
   b9aaa:	f7fa fedd 	bl	b4868 <__aeabi_dcmpeq>
   b9aae:	2800      	cmp	r0, #0
   b9ab0:	d0c1      	beq.n	b9a36 <_strtod_l+0x8de>
   b9ab2:	e611      	b.n	b96d8 <_strtod_l+0x580>
   b9ab4:	fffffc02 	.word	0xfffffc02
   b9ab8:	7ff00000 	.word	0x7ff00000
   b9abc:	39500000 	.word	0x39500000
   b9ac0:	000fffff 	.word	0x000fffff
   b9ac4:	7fefffff 	.word	0x7fefffff
   b9ac8:	000bbbe0 	.word	0x000bbbe0
   b9acc:	4631      	mov	r1, r6
   b9ace:	4628      	mov	r0, r5
   b9ad0:	f001 fa6e 	bl	bafb0 <__ratio>
   b9ad4:	ec59 8b10 	vmov	r8, r9, d0
   b9ad8:	ee10 0a10 	vmov	r0, s0
   b9adc:	2200      	movs	r2, #0
   b9ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9ae2:	4649      	mov	r1, r9
   b9ae4:	f7fa fed4 	bl	b4890 <__aeabi_dcmple>
   b9ae8:	2800      	cmp	r0, #0
   b9aea:	d07a      	beq.n	b9be2 <_strtod_l+0xa8a>
   b9aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9aee:	2b00      	cmp	r3, #0
   b9af0:	d04a      	beq.n	b9b88 <_strtod_l+0xa30>
   b9af2:	4b95      	ldr	r3, [pc, #596]	; (b9d48 <_strtod_l+0xbf0>)
   b9af4:	2200      	movs	r2, #0
   b9af6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9afa:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9d48 <_strtod_l+0xbf0>
   b9afe:	f04f 0800 	mov.w	r8, #0
   b9b02:	4b92      	ldr	r3, [pc, #584]	; (b9d4c <_strtod_l+0xbf4>)
   b9b04:	403b      	ands	r3, r7
   b9b06:	930d      	str	r3, [sp, #52]	; 0x34
   b9b08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9b0a:	4b91      	ldr	r3, [pc, #580]	; (b9d50 <_strtod_l+0xbf8>)
   b9b0c:	429a      	cmp	r2, r3
   b9b0e:	f040 80b0 	bne.w	b9c72 <_strtod_l+0xb1a>
   b9b12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9b16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9b1a:	ec4b ab10 	vmov	d0, sl, fp
   b9b1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9b22:	f001 f96d 	bl	bae00 <__ulp>
   b9b26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9b2a:	ec53 2b10 	vmov	r2, r3, d0
   b9b2e:	f7fa fc33 	bl	b4398 <__aeabi_dmul>
   b9b32:	4652      	mov	r2, sl
   b9b34:	465b      	mov	r3, fp
   b9b36:	f7fa fa79 	bl	b402c <__adddf3>
   b9b3a:	460b      	mov	r3, r1
   b9b3c:	4983      	ldr	r1, [pc, #524]	; (b9d4c <_strtod_l+0xbf4>)
   b9b3e:	4a85      	ldr	r2, [pc, #532]	; (b9d54 <_strtod_l+0xbfc>)
   b9b40:	4019      	ands	r1, r3
   b9b42:	4291      	cmp	r1, r2
   b9b44:	4682      	mov	sl, r0
   b9b46:	d960      	bls.n	b9c0a <_strtod_l+0xab2>
   b9b48:	ee18 3a90 	vmov	r3, s17
   b9b4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9b50:	4293      	cmp	r3, r2
   b9b52:	d104      	bne.n	b9b5e <_strtod_l+0xa06>
   b9b54:	ee18 3a10 	vmov	r3, s16
   b9b58:	3301      	adds	r3, #1
   b9b5a:	f43f ad45 	beq.w	b95e8 <_strtod_l+0x490>
   b9b5e:	f8df b200 	ldr.w	fp, [pc, #512]	; b9d60 <_strtod_l+0xc08>
   b9b62:	f04f 3aff 	mov.w	sl, #4294967295
   b9b66:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9b68:	4620      	mov	r0, r4
   b9b6a:	f000 fe17 	bl	ba79c <_Bfree>
   b9b6e:	9905      	ldr	r1, [sp, #20]
   b9b70:	4620      	mov	r0, r4
   b9b72:	f000 fe13 	bl	ba79c <_Bfree>
   b9b76:	4631      	mov	r1, r6
   b9b78:	4620      	mov	r0, r4
   b9b7a:	f000 fe0f 	bl	ba79c <_Bfree>
   b9b7e:	4629      	mov	r1, r5
   b9b80:	4620      	mov	r0, r4
   b9b82:	f000 fe0b 	bl	ba79c <_Bfree>
   b9b86:	e61a      	b.n	b97be <_strtod_l+0x666>
   b9b88:	f1ba 0f00 	cmp.w	sl, #0
   b9b8c:	d11b      	bne.n	b9bc6 <_strtod_l+0xa6e>
   b9b8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9b92:	b9f3      	cbnz	r3, b9bd2 <_strtod_l+0xa7a>
   b9b94:	4b6c      	ldr	r3, [pc, #432]	; (b9d48 <_strtod_l+0xbf0>)
   b9b96:	2200      	movs	r2, #0
   b9b98:	4640      	mov	r0, r8
   b9b9a:	4649      	mov	r1, r9
   b9b9c:	f7fa fe6e 	bl	b487c <__aeabi_dcmplt>
   b9ba0:	b9d0      	cbnz	r0, b9bd8 <_strtod_l+0xa80>
   b9ba2:	4640      	mov	r0, r8
   b9ba4:	4649      	mov	r1, r9
   b9ba6:	4b6c      	ldr	r3, [pc, #432]	; (b9d58 <_strtod_l+0xc00>)
   b9ba8:	2200      	movs	r2, #0
   b9baa:	f7fa fbf5 	bl	b4398 <__aeabi_dmul>
   b9bae:	4680      	mov	r8, r0
   b9bb0:	4689      	mov	r9, r1
   b9bb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b9bb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b9bba:	9315      	str	r3, [sp, #84]	; 0x54
   b9bbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9bc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9bc4:	e79d      	b.n	b9b02 <_strtod_l+0x9aa>
   b9bc6:	f1ba 0f01 	cmp.w	sl, #1
   b9bca:	d102      	bne.n	b9bd2 <_strtod_l+0xa7a>
   b9bcc:	2f00      	cmp	r7, #0
   b9bce:	f43f ad83 	beq.w	b96d8 <_strtod_l+0x580>
   b9bd2:	4b62      	ldr	r3, [pc, #392]	; (b9d5c <_strtod_l+0xc04>)
   b9bd4:	2200      	movs	r2, #0
   b9bd6:	e78e      	b.n	b9af6 <_strtod_l+0x99e>
   b9bd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9d58 <_strtod_l+0xc00>
   b9bdc:	f04f 0800 	mov.w	r8, #0
   b9be0:	e7e7      	b.n	b9bb2 <_strtod_l+0xa5a>
   b9be2:	4b5d      	ldr	r3, [pc, #372]	; (b9d58 <_strtod_l+0xc00>)
   b9be4:	4640      	mov	r0, r8
   b9be6:	4649      	mov	r1, r9
   b9be8:	2200      	movs	r2, #0
   b9bea:	f7fa fbd5 	bl	b4398 <__aeabi_dmul>
   b9bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9bf0:	4680      	mov	r8, r0
   b9bf2:	4689      	mov	r9, r1
   b9bf4:	b933      	cbnz	r3, b9c04 <_strtod_l+0xaac>
   b9bf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9bfa:	900e      	str	r0, [sp, #56]	; 0x38
   b9bfc:	930f      	str	r3, [sp, #60]	; 0x3c
   b9bfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9c02:	e7dd      	b.n	b9bc0 <_strtod_l+0xa68>
   b9c04:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9c08:	e7f9      	b.n	b9bfe <_strtod_l+0xaa6>
   b9c0a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9c0e:	9b04      	ldr	r3, [sp, #16]
   b9c10:	2b00      	cmp	r3, #0
   b9c12:	d1a8      	bne.n	b9b66 <_strtod_l+0xa0e>
   b9c14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9c18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9c1a:	0d1b      	lsrs	r3, r3, #20
   b9c1c:	051b      	lsls	r3, r3, #20
   b9c1e:	429a      	cmp	r2, r3
   b9c20:	d1a1      	bne.n	b9b66 <_strtod_l+0xa0e>
   b9c22:	4640      	mov	r0, r8
   b9c24:	4649      	mov	r1, r9
   b9c26:	f7fa fed5 	bl	b49d4 <__aeabi_d2lz>
   b9c2a:	f7fa fb87 	bl	b433c <__aeabi_l2d>
   b9c2e:	4602      	mov	r2, r0
   b9c30:	460b      	mov	r3, r1
   b9c32:	4640      	mov	r0, r8
   b9c34:	4649      	mov	r1, r9
   b9c36:	f7fa f9f7 	bl	b4028 <__aeabi_dsub>
   b9c3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9c40:	ea43 030a 	orr.w	r3, r3, sl
   b9c44:	4313      	orrs	r3, r2
   b9c46:	4680      	mov	r8, r0
   b9c48:	4689      	mov	r9, r1
   b9c4a:	d055      	beq.n	b9cf8 <_strtod_l+0xba0>
   b9c4c:	a336      	add	r3, pc, #216	; (adr r3, b9d28 <_strtod_l+0xbd0>)
   b9c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c52:	f7fa fe13 	bl	b487c <__aeabi_dcmplt>
   b9c56:	2800      	cmp	r0, #0
   b9c58:	f47f acd0 	bne.w	b95fc <_strtod_l+0x4a4>
   b9c5c:	a334      	add	r3, pc, #208	; (adr r3, b9d30 <_strtod_l+0xbd8>)
   b9c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c62:	4640      	mov	r0, r8
   b9c64:	4649      	mov	r1, r9
   b9c66:	f7fa fe27 	bl	b48b8 <__aeabi_dcmpgt>
   b9c6a:	2800      	cmp	r0, #0
   b9c6c:	f43f af7b 	beq.w	b9b66 <_strtod_l+0xa0e>
   b9c70:	e4c4      	b.n	b95fc <_strtod_l+0x4a4>
   b9c72:	9b04      	ldr	r3, [sp, #16]
   b9c74:	b333      	cbz	r3, b9cc4 <_strtod_l+0xb6c>
   b9c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9c78:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9c7c:	d822      	bhi.n	b9cc4 <_strtod_l+0xb6c>
   b9c7e:	a32e      	add	r3, pc, #184	; (adr r3, b9d38 <_strtod_l+0xbe0>)
   b9c80:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c84:	4640      	mov	r0, r8
   b9c86:	4649      	mov	r1, r9
   b9c88:	f7fa fe02 	bl	b4890 <__aeabi_dcmple>
   b9c8c:	b1a0      	cbz	r0, b9cb8 <_strtod_l+0xb60>
   b9c8e:	4649      	mov	r1, r9
   b9c90:	4640      	mov	r0, r8
   b9c92:	f7fa fe1b 	bl	b48cc <__aeabi_d2uiz>
   b9c96:	2801      	cmp	r0, #1
   b9c98:	bf38      	it	cc
   b9c9a:	2001      	movcc	r0, #1
   b9c9c:	f7fa fb02 	bl	b42a4 <__aeabi_ui2d>
   b9ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9ca2:	4680      	mov	r8, r0
   b9ca4:	4689      	mov	r9, r1
   b9ca6:	bb23      	cbnz	r3, b9cf2 <_strtod_l+0xb9a>
   b9ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9cac:	9010      	str	r0, [sp, #64]	; 0x40
   b9cae:	9311      	str	r3, [sp, #68]	; 0x44
   b9cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b9cb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9cba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9cbc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9cc0:	1a9b      	subs	r3, r3, r2
   b9cc2:	9309      	str	r3, [sp, #36]	; 0x24
   b9cc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9cc8:	eeb0 0a48 	vmov.f32	s0, s16
   b9ccc:	eef0 0a68 	vmov.f32	s1, s17
   b9cd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9cd4:	f001 f894 	bl	bae00 <__ulp>
   b9cd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9cdc:	ec53 2b10 	vmov	r2, r3, d0
   b9ce0:	f7fa fb5a 	bl	b4398 <__aeabi_dmul>
   b9ce4:	ec53 2b18 	vmov	r2, r3, d8
   b9ce8:	f7fa f9a0 	bl	b402c <__adddf3>
   b9cec:	4682      	mov	sl, r0
   b9cee:	468b      	mov	fp, r1
   b9cf0:	e78d      	b.n	b9c0e <_strtod_l+0xab6>
   b9cf2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9cf6:	e7db      	b.n	b9cb0 <_strtod_l+0xb58>
   b9cf8:	a311      	add	r3, pc, #68	; (adr r3, b9d40 <_strtod_l+0xbe8>)
   b9cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9cfe:	f7fa fdbd 	bl	b487c <__aeabi_dcmplt>
   b9d02:	e7b2      	b.n	b9c6a <_strtod_l+0xb12>
   b9d04:	2300      	movs	r3, #0
   b9d06:	930a      	str	r3, [sp, #40]	; 0x28
   b9d08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9d0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9d0c:	6013      	str	r3, [r2, #0]
   b9d0e:	f7ff ba6b 	b.w	b91e8 <_strtod_l+0x90>
   b9d12:	2a65      	cmp	r2, #101	; 0x65
   b9d14:	f43f ab5f 	beq.w	b93d6 <_strtod_l+0x27e>
   b9d18:	2a45      	cmp	r2, #69	; 0x45
   b9d1a:	f43f ab5c 	beq.w	b93d6 <_strtod_l+0x27e>
   b9d1e:	2301      	movs	r3, #1
   b9d20:	f7ff bb94 	b.w	b944c <_strtod_l+0x2f4>
   b9d24:	f3af 8000 	nop.w
   b9d28:	94a03595 	.word	0x94a03595
   b9d2c:	3fdfffff 	.word	0x3fdfffff
   b9d30:	35afe535 	.word	0x35afe535
   b9d34:	3fe00000 	.word	0x3fe00000
   b9d38:	ffc00000 	.word	0xffc00000
   b9d3c:	41dfffff 	.word	0x41dfffff
   b9d40:	94a03595 	.word	0x94a03595
   b9d44:	3fcfffff 	.word	0x3fcfffff
   b9d48:	3ff00000 	.word	0x3ff00000
   b9d4c:	7ff00000 	.word	0x7ff00000
   b9d50:	7fe00000 	.word	0x7fe00000
   b9d54:	7c9fffff 	.word	0x7c9fffff
   b9d58:	3fe00000 	.word	0x3fe00000
   b9d5c:	bff00000 	.word	0xbff00000
   b9d60:	7fefffff 	.word	0x7fefffff

000b9d64 <strtod>:
   b9d64:	460a      	mov	r2, r1
   b9d66:	4601      	mov	r1, r0
   b9d68:	4802      	ldr	r0, [pc, #8]	; (b9d74 <strtod+0x10>)
   b9d6a:	4b03      	ldr	r3, [pc, #12]	; (b9d78 <strtod+0x14>)
   b9d6c:	6800      	ldr	r0, [r0, #0]
   b9d6e:	f7ff b9f3 	b.w	b9158 <_strtod_l>
   b9d72:	bf00      	nop
   b9d74:	2003da3c 	.word	0x2003da3c
   b9d78:	2003daa8 	.word	0x2003daa8

000b9d7c <strtok>:
   b9d7c:	4b16      	ldr	r3, [pc, #88]	; (b9dd8 <strtok+0x5c>)
   b9d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9d80:	681e      	ldr	r6, [r3, #0]
   b9d82:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b9d84:	4605      	mov	r5, r0
   b9d86:	b9fc      	cbnz	r4, b9dc8 <strtok+0x4c>
   b9d88:	2050      	movs	r0, #80	; 0x50
   b9d8a:	9101      	str	r1, [sp, #4]
   b9d8c:	f7fc fab6 	bl	b62fc <malloc>
   b9d90:	9901      	ldr	r1, [sp, #4]
   b9d92:	65b0      	str	r0, [r6, #88]	; 0x58
   b9d94:	4602      	mov	r2, r0
   b9d96:	b920      	cbnz	r0, b9da2 <strtok+0x26>
   b9d98:	4b10      	ldr	r3, [pc, #64]	; (b9ddc <strtok+0x60>)
   b9d9a:	4811      	ldr	r0, [pc, #68]	; (b9de0 <strtok+0x64>)
   b9d9c:	2157      	movs	r1, #87	; 0x57
   b9d9e:	f7fc faed 	bl	b637c <__assert_func>
   b9da2:	e9c0 4400 	strd	r4, r4, [r0]
   b9da6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b9daa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b9dae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b9db2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b9db6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b9dba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b9dbe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b9dc2:	6184      	str	r4, [r0, #24]
   b9dc4:	7704      	strb	r4, [r0, #28]
   b9dc6:	6244      	str	r4, [r0, #36]	; 0x24
   b9dc8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b9dca:	2301      	movs	r3, #1
   b9dcc:	4628      	mov	r0, r5
   b9dce:	b002      	add	sp, #8
   b9dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9dd4:	f000 b806 	b.w	b9de4 <__strtok_r>
   b9dd8:	2003da3c 	.word	0x2003da3c
   b9ddc:	000bbb11 	.word	0x000bbb11
   b9de0:	000bbc08 	.word	0x000bbc08

000b9de4 <__strtok_r>:
   b9de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9de6:	b908      	cbnz	r0, b9dec <__strtok_r+0x8>
   b9de8:	6810      	ldr	r0, [r2, #0]
   b9dea:	b188      	cbz	r0, b9e10 <__strtok_r+0x2c>
   b9dec:	4604      	mov	r4, r0
   b9dee:	4620      	mov	r0, r4
   b9df0:	f814 5b01 	ldrb.w	r5, [r4], #1
   b9df4:	460f      	mov	r7, r1
   b9df6:	f817 6b01 	ldrb.w	r6, [r7], #1
   b9dfa:	b91e      	cbnz	r6, b9e04 <__strtok_r+0x20>
   b9dfc:	b965      	cbnz	r5, b9e18 <__strtok_r+0x34>
   b9dfe:	6015      	str	r5, [r2, #0]
   b9e00:	4628      	mov	r0, r5
   b9e02:	e005      	b.n	b9e10 <__strtok_r+0x2c>
   b9e04:	42b5      	cmp	r5, r6
   b9e06:	d1f6      	bne.n	b9df6 <__strtok_r+0x12>
   b9e08:	2b00      	cmp	r3, #0
   b9e0a:	d1f0      	bne.n	b9dee <__strtok_r+0xa>
   b9e0c:	6014      	str	r4, [r2, #0]
   b9e0e:	7003      	strb	r3, [r0, #0]
   b9e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9e12:	461c      	mov	r4, r3
   b9e14:	e00c      	b.n	b9e30 <__strtok_r+0x4c>
   b9e16:	b915      	cbnz	r5, b9e1e <__strtok_r+0x3a>
   b9e18:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9e1c:	460e      	mov	r6, r1
   b9e1e:	f816 5b01 	ldrb.w	r5, [r6], #1
   b9e22:	42ab      	cmp	r3, r5
   b9e24:	d1f7      	bne.n	b9e16 <__strtok_r+0x32>
   b9e26:	2b00      	cmp	r3, #0
   b9e28:	d0f3      	beq.n	b9e12 <__strtok_r+0x2e>
   b9e2a:	2300      	movs	r3, #0
   b9e2c:	f804 3c01 	strb.w	r3, [r4, #-1]
   b9e30:	6014      	str	r4, [r2, #0]
   b9e32:	e7ed      	b.n	b9e10 <__strtok_r+0x2c>

000b9e34 <_strtol_l.constprop.0>:
   b9e34:	2b01      	cmp	r3, #1
   b9e36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9e3a:	d001      	beq.n	b9e40 <_strtol_l.constprop.0+0xc>
   b9e3c:	2b24      	cmp	r3, #36	; 0x24
   b9e3e:	d906      	bls.n	b9e4e <_strtol_l.constprop.0+0x1a>
   b9e40:	f7fc fa94 	bl	b636c <__errno>
   b9e44:	2316      	movs	r3, #22
   b9e46:	6003      	str	r3, [r0, #0]
   b9e48:	2000      	movs	r0, #0
   b9e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9e4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9f34 <_strtol_l.constprop.0+0x100>
   b9e52:	460d      	mov	r5, r1
   b9e54:	462e      	mov	r6, r5
   b9e56:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9e5a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9e5e:	f017 0708 	ands.w	r7, r7, #8
   b9e62:	d1f7      	bne.n	b9e54 <_strtol_l.constprop.0+0x20>
   b9e64:	2c2d      	cmp	r4, #45	; 0x2d
   b9e66:	d132      	bne.n	b9ece <_strtol_l.constprop.0+0x9a>
   b9e68:	782c      	ldrb	r4, [r5, #0]
   b9e6a:	2701      	movs	r7, #1
   b9e6c:	1cb5      	adds	r5, r6, #2
   b9e6e:	2b00      	cmp	r3, #0
   b9e70:	d05b      	beq.n	b9f2a <_strtol_l.constprop.0+0xf6>
   b9e72:	2b10      	cmp	r3, #16
   b9e74:	d109      	bne.n	b9e8a <_strtol_l.constprop.0+0x56>
   b9e76:	2c30      	cmp	r4, #48	; 0x30
   b9e78:	d107      	bne.n	b9e8a <_strtol_l.constprop.0+0x56>
   b9e7a:	782c      	ldrb	r4, [r5, #0]
   b9e7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9e80:	2c58      	cmp	r4, #88	; 0x58
   b9e82:	d14d      	bne.n	b9f20 <_strtol_l.constprop.0+0xec>
   b9e84:	786c      	ldrb	r4, [r5, #1]
   b9e86:	2310      	movs	r3, #16
   b9e88:	3502      	adds	r5, #2
   b9e8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9e8e:	f108 38ff 	add.w	r8, r8, #4294967295
   b9e92:	f04f 0c00 	mov.w	ip, #0
   b9e96:	fbb8 f9f3 	udiv	r9, r8, r3
   b9e9a:	4666      	mov	r6, ip
   b9e9c:	fb03 8a19 	mls	sl, r3, r9, r8
   b9ea0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9ea4:	f1be 0f09 	cmp.w	lr, #9
   b9ea8:	d816      	bhi.n	b9ed8 <_strtol_l.constprop.0+0xa4>
   b9eaa:	4674      	mov	r4, lr
   b9eac:	42a3      	cmp	r3, r4
   b9eae:	dd24      	ble.n	b9efa <_strtol_l.constprop.0+0xc6>
   b9eb0:	f1bc 0f00 	cmp.w	ip, #0
   b9eb4:	db1e      	blt.n	b9ef4 <_strtol_l.constprop.0+0xc0>
   b9eb6:	45b1      	cmp	r9, r6
   b9eb8:	d31c      	bcc.n	b9ef4 <_strtol_l.constprop.0+0xc0>
   b9eba:	d101      	bne.n	b9ec0 <_strtol_l.constprop.0+0x8c>
   b9ebc:	45a2      	cmp	sl, r4
   b9ebe:	db19      	blt.n	b9ef4 <_strtol_l.constprop.0+0xc0>
   b9ec0:	fb06 4603 	mla	r6, r6, r3, r4
   b9ec4:	f04f 0c01 	mov.w	ip, #1
   b9ec8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9ecc:	e7e8      	b.n	b9ea0 <_strtol_l.constprop.0+0x6c>
   b9ece:	2c2b      	cmp	r4, #43	; 0x2b
   b9ed0:	bf04      	itt	eq
   b9ed2:	782c      	ldrbeq	r4, [r5, #0]
   b9ed4:	1cb5      	addeq	r5, r6, #2
   b9ed6:	e7ca      	b.n	b9e6e <_strtol_l.constprop.0+0x3a>
   b9ed8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9edc:	f1be 0f19 	cmp.w	lr, #25
   b9ee0:	d801      	bhi.n	b9ee6 <_strtol_l.constprop.0+0xb2>
   b9ee2:	3c37      	subs	r4, #55	; 0x37
   b9ee4:	e7e2      	b.n	b9eac <_strtol_l.constprop.0+0x78>
   b9ee6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9eea:	f1be 0f19 	cmp.w	lr, #25
   b9eee:	d804      	bhi.n	b9efa <_strtol_l.constprop.0+0xc6>
   b9ef0:	3c57      	subs	r4, #87	; 0x57
   b9ef2:	e7db      	b.n	b9eac <_strtol_l.constprop.0+0x78>
   b9ef4:	f04f 3cff 	mov.w	ip, #4294967295
   b9ef8:	e7e6      	b.n	b9ec8 <_strtol_l.constprop.0+0x94>
   b9efa:	f1bc 0f00 	cmp.w	ip, #0
   b9efe:	da05      	bge.n	b9f0c <_strtol_l.constprop.0+0xd8>
   b9f00:	2322      	movs	r3, #34	; 0x22
   b9f02:	6003      	str	r3, [r0, #0]
   b9f04:	4646      	mov	r6, r8
   b9f06:	b942      	cbnz	r2, b9f1a <_strtol_l.constprop.0+0xe6>
   b9f08:	4630      	mov	r0, r6
   b9f0a:	e79e      	b.n	b9e4a <_strtol_l.constprop.0+0x16>
   b9f0c:	b107      	cbz	r7, b9f10 <_strtol_l.constprop.0+0xdc>
   b9f0e:	4276      	negs	r6, r6
   b9f10:	2a00      	cmp	r2, #0
   b9f12:	d0f9      	beq.n	b9f08 <_strtol_l.constprop.0+0xd4>
   b9f14:	f1bc 0f00 	cmp.w	ip, #0
   b9f18:	d000      	beq.n	b9f1c <_strtol_l.constprop.0+0xe8>
   b9f1a:	1e69      	subs	r1, r5, #1
   b9f1c:	6011      	str	r1, [r2, #0]
   b9f1e:	e7f3      	b.n	b9f08 <_strtol_l.constprop.0+0xd4>
   b9f20:	2430      	movs	r4, #48	; 0x30
   b9f22:	2b00      	cmp	r3, #0
   b9f24:	d1b1      	bne.n	b9e8a <_strtol_l.constprop.0+0x56>
   b9f26:	2308      	movs	r3, #8
   b9f28:	e7af      	b.n	b9e8a <_strtol_l.constprop.0+0x56>
   b9f2a:	2c30      	cmp	r4, #48	; 0x30
   b9f2c:	d0a5      	beq.n	b9e7a <_strtol_l.constprop.0+0x46>
   b9f2e:	230a      	movs	r3, #10
   b9f30:	e7ab      	b.n	b9e8a <_strtol_l.constprop.0+0x56>
   b9f32:	bf00      	nop
   b9f34:	000bbc88 	.word	0x000bbc88

000b9f38 <strtol>:
   b9f38:	4613      	mov	r3, r2
   b9f3a:	460a      	mov	r2, r1
   b9f3c:	4601      	mov	r1, r0
   b9f3e:	4802      	ldr	r0, [pc, #8]	; (b9f48 <strtol+0x10>)
   b9f40:	6800      	ldr	r0, [r0, #0]
   b9f42:	f7ff bf77 	b.w	b9e34 <_strtol_l.constprop.0>
   b9f46:	bf00      	nop
   b9f48:	2003da3c 	.word	0x2003da3c

000b9f4c <__register_exitproc>:
   b9f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9f50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba00c <__register_exitproc+0xc0>
   b9f54:	4606      	mov	r6, r0
   b9f56:	f8d8 0000 	ldr.w	r0, [r8]
   b9f5a:	461f      	mov	r7, r3
   b9f5c:	460d      	mov	r5, r1
   b9f5e:	4691      	mov	r9, r2
   b9f60:	f000 fbc6 	bl	ba6f0 <__retarget_lock_acquire_recursive>
   b9f64:	4b25      	ldr	r3, [pc, #148]	; (b9ffc <__register_exitproc+0xb0>)
   b9f66:	681c      	ldr	r4, [r3, #0]
   b9f68:	b934      	cbnz	r4, b9f78 <__register_exitproc+0x2c>
   b9f6a:	4c25      	ldr	r4, [pc, #148]	; (ba000 <__register_exitproc+0xb4>)
   b9f6c:	601c      	str	r4, [r3, #0]
   b9f6e:	4b25      	ldr	r3, [pc, #148]	; (ba004 <__register_exitproc+0xb8>)
   b9f70:	b113      	cbz	r3, b9f78 <__register_exitproc+0x2c>
   b9f72:	681b      	ldr	r3, [r3, #0]
   b9f74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9f78:	6863      	ldr	r3, [r4, #4]
   b9f7a:	2b1f      	cmp	r3, #31
   b9f7c:	dd07      	ble.n	b9f8e <__register_exitproc+0x42>
   b9f7e:	f8d8 0000 	ldr.w	r0, [r8]
   b9f82:	f000 fbb7 	bl	ba6f4 <__retarget_lock_release_recursive>
   b9f86:	f04f 30ff 	mov.w	r0, #4294967295
   b9f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9f8e:	b34e      	cbz	r6, b9fe4 <__register_exitproc+0x98>
   b9f90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9f94:	b988      	cbnz	r0, b9fba <__register_exitproc+0x6e>
   b9f96:	4b1c      	ldr	r3, [pc, #112]	; (ba008 <__register_exitproc+0xbc>)
   b9f98:	b923      	cbnz	r3, b9fa4 <__register_exitproc+0x58>
   b9f9a:	f8d8 0000 	ldr.w	r0, [r8]
   b9f9e:	f000 fba8 	bl	ba6f2 <__retarget_lock_release>
   b9fa2:	e7f0      	b.n	b9f86 <__register_exitproc+0x3a>
   b9fa4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9fa8:	f7fc f9a8 	bl	b62fc <malloc>
   b9fac:	2800      	cmp	r0, #0
   b9fae:	d0f4      	beq.n	b9f9a <__register_exitproc+0x4e>
   b9fb0:	2300      	movs	r3, #0
   b9fb2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9fb6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9fba:	6863      	ldr	r3, [r4, #4]
   b9fbc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9fc0:	2201      	movs	r2, #1
   b9fc2:	409a      	lsls	r2, r3
   b9fc4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9fc8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9fcc:	4313      	orrs	r3, r2
   b9fce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9fd2:	2e02      	cmp	r6, #2
   b9fd4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9fd8:	bf02      	ittt	eq
   b9fda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9fde:	4313      	orreq	r3, r2
   b9fe0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9fe4:	6863      	ldr	r3, [r4, #4]
   b9fe6:	f8d8 0000 	ldr.w	r0, [r8]
   b9fea:	1c5a      	adds	r2, r3, #1
   b9fec:	3302      	adds	r3, #2
   b9fee:	6062      	str	r2, [r4, #4]
   b9ff0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9ff4:	f000 fb7e 	bl	ba6f4 <__retarget_lock_release_recursive>
   b9ff8:	2000      	movs	r0, #0
   b9ffa:	e7c6      	b.n	b9f8a <__register_exitproc+0x3e>
   b9ffc:	2003e7ec 	.word	0x2003e7ec
   ba000:	2003e760 	.word	0x2003e760
   ba004:	00000000 	.word	0x00000000
   ba008:	000b62fd 	.word	0x000b62fd
   ba00c:	2003daa0 	.word	0x2003daa0

000ba010 <rshift>:
   ba010:	6903      	ldr	r3, [r0, #16]
   ba012:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba01a:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba01e:	f100 0414 	add.w	r4, r0, #20
   ba022:	dd45      	ble.n	ba0b0 <rshift+0xa0>
   ba024:	f011 011f 	ands.w	r1, r1, #31
   ba028:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba02c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba030:	d10c      	bne.n	ba04c <rshift+0x3c>
   ba032:	f100 0710 	add.w	r7, r0, #16
   ba036:	4629      	mov	r1, r5
   ba038:	42b1      	cmp	r1, r6
   ba03a:	d334      	bcc.n	ba0a6 <rshift+0x96>
   ba03c:	1a9b      	subs	r3, r3, r2
   ba03e:	009b      	lsls	r3, r3, #2
   ba040:	1eea      	subs	r2, r5, #3
   ba042:	4296      	cmp	r6, r2
   ba044:	bf38      	it	cc
   ba046:	2300      	movcc	r3, #0
   ba048:	4423      	add	r3, r4
   ba04a:	e015      	b.n	ba078 <rshift+0x68>
   ba04c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba050:	f1c1 0820 	rsb	r8, r1, #32
   ba054:	40cf      	lsrs	r7, r1
   ba056:	f105 0e04 	add.w	lr, r5, #4
   ba05a:	46a1      	mov	r9, r4
   ba05c:	4576      	cmp	r6, lr
   ba05e:	46f4      	mov	ip, lr
   ba060:	d815      	bhi.n	ba08e <rshift+0x7e>
   ba062:	1a9a      	subs	r2, r3, r2
   ba064:	0092      	lsls	r2, r2, #2
   ba066:	3a04      	subs	r2, #4
   ba068:	3501      	adds	r5, #1
   ba06a:	42ae      	cmp	r6, r5
   ba06c:	bf38      	it	cc
   ba06e:	2200      	movcc	r2, #0
   ba070:	18a3      	adds	r3, r4, r2
   ba072:	50a7      	str	r7, [r4, r2]
   ba074:	b107      	cbz	r7, ba078 <rshift+0x68>
   ba076:	3304      	adds	r3, #4
   ba078:	1b1a      	subs	r2, r3, r4
   ba07a:	42a3      	cmp	r3, r4
   ba07c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba080:	bf08      	it	eq
   ba082:	2300      	moveq	r3, #0
   ba084:	6102      	str	r2, [r0, #16]
   ba086:	bf08      	it	eq
   ba088:	6143      	streq	r3, [r0, #20]
   ba08a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba08e:	f8dc c000 	ldr.w	ip, [ip]
   ba092:	fa0c fc08 	lsl.w	ip, ip, r8
   ba096:	ea4c 0707 	orr.w	r7, ip, r7
   ba09a:	f849 7b04 	str.w	r7, [r9], #4
   ba09e:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba0a2:	40cf      	lsrs	r7, r1
   ba0a4:	e7da      	b.n	ba05c <rshift+0x4c>
   ba0a6:	f851 cb04 	ldr.w	ip, [r1], #4
   ba0aa:	f847 cf04 	str.w	ip, [r7, #4]!
   ba0ae:	e7c3      	b.n	ba038 <rshift+0x28>
   ba0b0:	4623      	mov	r3, r4
   ba0b2:	e7e1      	b.n	ba078 <rshift+0x68>

000ba0b4 <__hexdig_fun>:
   ba0b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba0b8:	2b09      	cmp	r3, #9
   ba0ba:	d802      	bhi.n	ba0c2 <__hexdig_fun+0xe>
   ba0bc:	3820      	subs	r0, #32
   ba0be:	b2c0      	uxtb	r0, r0
   ba0c0:	4770      	bx	lr
   ba0c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba0c6:	2b05      	cmp	r3, #5
   ba0c8:	d801      	bhi.n	ba0ce <__hexdig_fun+0x1a>
   ba0ca:	3847      	subs	r0, #71	; 0x47
   ba0cc:	e7f7      	b.n	ba0be <__hexdig_fun+0xa>
   ba0ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba0d2:	2b05      	cmp	r3, #5
   ba0d4:	d801      	bhi.n	ba0da <__hexdig_fun+0x26>
   ba0d6:	3827      	subs	r0, #39	; 0x27
   ba0d8:	e7f1      	b.n	ba0be <__hexdig_fun+0xa>
   ba0da:	2000      	movs	r0, #0
   ba0dc:	4770      	bx	lr
	...

000ba0e0 <__gethex>:
   ba0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba0e4:	ed2d 8b02 	vpush	{d8}
   ba0e8:	b089      	sub	sp, #36	; 0x24
   ba0ea:	ee08 0a10 	vmov	s16, r0
   ba0ee:	9304      	str	r3, [sp, #16]
   ba0f0:	4bb4      	ldr	r3, [pc, #720]	; (ba3c4 <__gethex+0x2e4>)
   ba0f2:	681b      	ldr	r3, [r3, #0]
   ba0f4:	9301      	str	r3, [sp, #4]
   ba0f6:	4618      	mov	r0, r3
   ba0f8:	468b      	mov	fp, r1
   ba0fa:	4690      	mov	r8, r2
   ba0fc:	f7fa fc62 	bl	b49c4 <strlen>
   ba100:	9b01      	ldr	r3, [sp, #4]
   ba102:	f8db 2000 	ldr.w	r2, [fp]
   ba106:	4403      	add	r3, r0
   ba108:	4682      	mov	sl, r0
   ba10a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba10e:	9305      	str	r3, [sp, #20]
   ba110:	1c93      	adds	r3, r2, #2
   ba112:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba116:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba11a:	32fe      	adds	r2, #254	; 0xfe
   ba11c:	18d1      	adds	r1, r2, r3
   ba11e:	461f      	mov	r7, r3
   ba120:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba124:	9100      	str	r1, [sp, #0]
   ba126:	2830      	cmp	r0, #48	; 0x30
   ba128:	d0f8      	beq.n	ba11c <__gethex+0x3c>
   ba12a:	f7ff ffc3 	bl	ba0b4 <__hexdig_fun>
   ba12e:	4604      	mov	r4, r0
   ba130:	2800      	cmp	r0, #0
   ba132:	d13a      	bne.n	ba1aa <__gethex+0xca>
   ba134:	9901      	ldr	r1, [sp, #4]
   ba136:	4652      	mov	r2, sl
   ba138:	4638      	mov	r0, r7
   ba13a:	f7fe ffce 	bl	b90da <strncmp>
   ba13e:	4605      	mov	r5, r0
   ba140:	2800      	cmp	r0, #0
   ba142:	d168      	bne.n	ba216 <__gethex+0x136>
   ba144:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba148:	eb07 060a 	add.w	r6, r7, sl
   ba14c:	f7ff ffb2 	bl	ba0b4 <__hexdig_fun>
   ba150:	2800      	cmp	r0, #0
   ba152:	d062      	beq.n	ba21a <__gethex+0x13a>
   ba154:	4633      	mov	r3, r6
   ba156:	7818      	ldrb	r0, [r3, #0]
   ba158:	2830      	cmp	r0, #48	; 0x30
   ba15a:	461f      	mov	r7, r3
   ba15c:	f103 0301 	add.w	r3, r3, #1
   ba160:	d0f9      	beq.n	ba156 <__gethex+0x76>
   ba162:	f7ff ffa7 	bl	ba0b4 <__hexdig_fun>
   ba166:	2301      	movs	r3, #1
   ba168:	fab0 f480 	clz	r4, r0
   ba16c:	0964      	lsrs	r4, r4, #5
   ba16e:	4635      	mov	r5, r6
   ba170:	9300      	str	r3, [sp, #0]
   ba172:	463a      	mov	r2, r7
   ba174:	4616      	mov	r6, r2
   ba176:	3201      	adds	r2, #1
   ba178:	7830      	ldrb	r0, [r6, #0]
   ba17a:	f7ff ff9b 	bl	ba0b4 <__hexdig_fun>
   ba17e:	2800      	cmp	r0, #0
   ba180:	d1f8      	bne.n	ba174 <__gethex+0x94>
   ba182:	9901      	ldr	r1, [sp, #4]
   ba184:	4652      	mov	r2, sl
   ba186:	4630      	mov	r0, r6
   ba188:	f7fe ffa7 	bl	b90da <strncmp>
   ba18c:	b980      	cbnz	r0, ba1b0 <__gethex+0xd0>
   ba18e:	b94d      	cbnz	r5, ba1a4 <__gethex+0xc4>
   ba190:	eb06 050a 	add.w	r5, r6, sl
   ba194:	462a      	mov	r2, r5
   ba196:	4616      	mov	r6, r2
   ba198:	3201      	adds	r2, #1
   ba19a:	7830      	ldrb	r0, [r6, #0]
   ba19c:	f7ff ff8a 	bl	ba0b4 <__hexdig_fun>
   ba1a0:	2800      	cmp	r0, #0
   ba1a2:	d1f8      	bne.n	ba196 <__gethex+0xb6>
   ba1a4:	1bad      	subs	r5, r5, r6
   ba1a6:	00ad      	lsls	r5, r5, #2
   ba1a8:	e004      	b.n	ba1b4 <__gethex+0xd4>
   ba1aa:	2400      	movs	r4, #0
   ba1ac:	4625      	mov	r5, r4
   ba1ae:	e7e0      	b.n	ba172 <__gethex+0x92>
   ba1b0:	2d00      	cmp	r5, #0
   ba1b2:	d1f7      	bne.n	ba1a4 <__gethex+0xc4>
   ba1b4:	7833      	ldrb	r3, [r6, #0]
   ba1b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba1ba:	2b50      	cmp	r3, #80	; 0x50
   ba1bc:	d13b      	bne.n	ba236 <__gethex+0x156>
   ba1be:	7873      	ldrb	r3, [r6, #1]
   ba1c0:	2b2b      	cmp	r3, #43	; 0x2b
   ba1c2:	d02c      	beq.n	ba21e <__gethex+0x13e>
   ba1c4:	2b2d      	cmp	r3, #45	; 0x2d
   ba1c6:	d02e      	beq.n	ba226 <__gethex+0x146>
   ba1c8:	1c71      	adds	r1, r6, #1
   ba1ca:	f04f 0900 	mov.w	r9, #0
   ba1ce:	7808      	ldrb	r0, [r1, #0]
   ba1d0:	f7ff ff70 	bl	ba0b4 <__hexdig_fun>
   ba1d4:	1e43      	subs	r3, r0, #1
   ba1d6:	b2db      	uxtb	r3, r3
   ba1d8:	2b18      	cmp	r3, #24
   ba1da:	d82c      	bhi.n	ba236 <__gethex+0x156>
   ba1dc:	f1a0 0210 	sub.w	r2, r0, #16
   ba1e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba1e4:	f7ff ff66 	bl	ba0b4 <__hexdig_fun>
   ba1e8:	1e43      	subs	r3, r0, #1
   ba1ea:	b2db      	uxtb	r3, r3
   ba1ec:	2b18      	cmp	r3, #24
   ba1ee:	d91d      	bls.n	ba22c <__gethex+0x14c>
   ba1f0:	f1b9 0f00 	cmp.w	r9, #0
   ba1f4:	d000      	beq.n	ba1f8 <__gethex+0x118>
   ba1f6:	4252      	negs	r2, r2
   ba1f8:	4415      	add	r5, r2
   ba1fa:	f8cb 1000 	str.w	r1, [fp]
   ba1fe:	b1e4      	cbz	r4, ba23a <__gethex+0x15a>
   ba200:	9b00      	ldr	r3, [sp, #0]
   ba202:	2b00      	cmp	r3, #0
   ba204:	bf14      	ite	ne
   ba206:	2700      	movne	r7, #0
   ba208:	2706      	moveq	r7, #6
   ba20a:	4638      	mov	r0, r7
   ba20c:	b009      	add	sp, #36	; 0x24
   ba20e:	ecbd 8b02 	vpop	{d8}
   ba212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba216:	463e      	mov	r6, r7
   ba218:	4625      	mov	r5, r4
   ba21a:	2401      	movs	r4, #1
   ba21c:	e7ca      	b.n	ba1b4 <__gethex+0xd4>
   ba21e:	f04f 0900 	mov.w	r9, #0
   ba222:	1cb1      	adds	r1, r6, #2
   ba224:	e7d3      	b.n	ba1ce <__gethex+0xee>
   ba226:	f04f 0901 	mov.w	r9, #1
   ba22a:	e7fa      	b.n	ba222 <__gethex+0x142>
   ba22c:	230a      	movs	r3, #10
   ba22e:	fb03 0202 	mla	r2, r3, r2, r0
   ba232:	3a10      	subs	r2, #16
   ba234:	e7d4      	b.n	ba1e0 <__gethex+0x100>
   ba236:	4631      	mov	r1, r6
   ba238:	e7df      	b.n	ba1fa <__gethex+0x11a>
   ba23a:	1bf3      	subs	r3, r6, r7
   ba23c:	3b01      	subs	r3, #1
   ba23e:	4621      	mov	r1, r4
   ba240:	2b07      	cmp	r3, #7
   ba242:	dc0b      	bgt.n	ba25c <__gethex+0x17c>
   ba244:	ee18 0a10 	vmov	r0, s16
   ba248:	f000 fa68 	bl	ba71c <_Balloc>
   ba24c:	4604      	mov	r4, r0
   ba24e:	b940      	cbnz	r0, ba262 <__gethex+0x182>
   ba250:	4b5d      	ldr	r3, [pc, #372]	; (ba3c8 <__gethex+0x2e8>)
   ba252:	4602      	mov	r2, r0
   ba254:	21de      	movs	r1, #222	; 0xde
   ba256:	485d      	ldr	r0, [pc, #372]	; (ba3cc <__gethex+0x2ec>)
   ba258:	f7fc f890 	bl	b637c <__assert_func>
   ba25c:	3101      	adds	r1, #1
   ba25e:	105b      	asrs	r3, r3, #1
   ba260:	e7ee      	b.n	ba240 <__gethex+0x160>
   ba262:	f100 0914 	add.w	r9, r0, #20
   ba266:	f04f 0b00 	mov.w	fp, #0
   ba26a:	f1ca 0301 	rsb	r3, sl, #1
   ba26e:	f8cd 9008 	str.w	r9, [sp, #8]
   ba272:	f8cd b000 	str.w	fp, [sp]
   ba276:	9306      	str	r3, [sp, #24]
   ba278:	42b7      	cmp	r7, r6
   ba27a:	d340      	bcc.n	ba2fe <__gethex+0x21e>
   ba27c:	9802      	ldr	r0, [sp, #8]
   ba27e:	9b00      	ldr	r3, [sp, #0]
   ba280:	f840 3b04 	str.w	r3, [r0], #4
   ba284:	eba0 0009 	sub.w	r0, r0, r9
   ba288:	1080      	asrs	r0, r0, #2
   ba28a:	0146      	lsls	r6, r0, #5
   ba28c:	6120      	str	r0, [r4, #16]
   ba28e:	4618      	mov	r0, r3
   ba290:	f000 fb36 	bl	ba900 <__hi0bits>
   ba294:	1a30      	subs	r0, r6, r0
   ba296:	f8d8 6000 	ldr.w	r6, [r8]
   ba29a:	42b0      	cmp	r0, r6
   ba29c:	dd63      	ble.n	ba366 <__gethex+0x286>
   ba29e:	1b87      	subs	r7, r0, r6
   ba2a0:	4639      	mov	r1, r7
   ba2a2:	4620      	mov	r0, r4
   ba2a4:	f000 feda 	bl	bb05c <__any_on>
   ba2a8:	4682      	mov	sl, r0
   ba2aa:	b1a8      	cbz	r0, ba2d8 <__gethex+0x1f8>
   ba2ac:	1e7b      	subs	r3, r7, #1
   ba2ae:	1159      	asrs	r1, r3, #5
   ba2b0:	f003 021f 	and.w	r2, r3, #31
   ba2b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba2b8:	f04f 0a01 	mov.w	sl, #1
   ba2bc:	fa0a f202 	lsl.w	r2, sl, r2
   ba2c0:	420a      	tst	r2, r1
   ba2c2:	d009      	beq.n	ba2d8 <__gethex+0x1f8>
   ba2c4:	4553      	cmp	r3, sl
   ba2c6:	dd05      	ble.n	ba2d4 <__gethex+0x1f4>
   ba2c8:	1eb9      	subs	r1, r7, #2
   ba2ca:	4620      	mov	r0, r4
   ba2cc:	f000 fec6 	bl	bb05c <__any_on>
   ba2d0:	2800      	cmp	r0, #0
   ba2d2:	d145      	bne.n	ba360 <__gethex+0x280>
   ba2d4:	f04f 0a02 	mov.w	sl, #2
   ba2d8:	4639      	mov	r1, r7
   ba2da:	4620      	mov	r0, r4
   ba2dc:	f7ff fe98 	bl	ba010 <rshift>
   ba2e0:	443d      	add	r5, r7
   ba2e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba2e6:	42ab      	cmp	r3, r5
   ba2e8:	da4c      	bge.n	ba384 <__gethex+0x2a4>
   ba2ea:	ee18 0a10 	vmov	r0, s16
   ba2ee:	4621      	mov	r1, r4
   ba2f0:	f000 fa54 	bl	ba79c <_Bfree>
   ba2f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba2f6:	2300      	movs	r3, #0
   ba2f8:	6013      	str	r3, [r2, #0]
   ba2fa:	27a3      	movs	r7, #163	; 0xa3
   ba2fc:	e785      	b.n	ba20a <__gethex+0x12a>
   ba2fe:	1e73      	subs	r3, r6, #1
   ba300:	9a05      	ldr	r2, [sp, #20]
   ba302:	9303      	str	r3, [sp, #12]
   ba304:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba308:	4293      	cmp	r3, r2
   ba30a:	d019      	beq.n	ba340 <__gethex+0x260>
   ba30c:	f1bb 0f20 	cmp.w	fp, #32
   ba310:	d107      	bne.n	ba322 <__gethex+0x242>
   ba312:	9b02      	ldr	r3, [sp, #8]
   ba314:	9a00      	ldr	r2, [sp, #0]
   ba316:	f843 2b04 	str.w	r2, [r3], #4
   ba31a:	9302      	str	r3, [sp, #8]
   ba31c:	2300      	movs	r3, #0
   ba31e:	9300      	str	r3, [sp, #0]
   ba320:	469b      	mov	fp, r3
   ba322:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba326:	f7ff fec5 	bl	ba0b4 <__hexdig_fun>
   ba32a:	9b00      	ldr	r3, [sp, #0]
   ba32c:	f000 000f 	and.w	r0, r0, #15
   ba330:	fa00 f00b 	lsl.w	r0, r0, fp
   ba334:	4303      	orrs	r3, r0
   ba336:	9300      	str	r3, [sp, #0]
   ba338:	f10b 0b04 	add.w	fp, fp, #4
   ba33c:	9b03      	ldr	r3, [sp, #12]
   ba33e:	e00d      	b.n	ba35c <__gethex+0x27c>
   ba340:	9b03      	ldr	r3, [sp, #12]
   ba342:	9a06      	ldr	r2, [sp, #24]
   ba344:	4413      	add	r3, r2
   ba346:	42bb      	cmp	r3, r7
   ba348:	d3e0      	bcc.n	ba30c <__gethex+0x22c>
   ba34a:	4618      	mov	r0, r3
   ba34c:	9901      	ldr	r1, [sp, #4]
   ba34e:	9307      	str	r3, [sp, #28]
   ba350:	4652      	mov	r2, sl
   ba352:	f7fe fec2 	bl	b90da <strncmp>
   ba356:	9b07      	ldr	r3, [sp, #28]
   ba358:	2800      	cmp	r0, #0
   ba35a:	d1d7      	bne.n	ba30c <__gethex+0x22c>
   ba35c:	461e      	mov	r6, r3
   ba35e:	e78b      	b.n	ba278 <__gethex+0x198>
   ba360:	f04f 0a03 	mov.w	sl, #3
   ba364:	e7b8      	b.n	ba2d8 <__gethex+0x1f8>
   ba366:	da0a      	bge.n	ba37e <__gethex+0x29e>
   ba368:	1a37      	subs	r7, r6, r0
   ba36a:	4621      	mov	r1, r4
   ba36c:	ee18 0a10 	vmov	r0, s16
   ba370:	463a      	mov	r2, r7
   ba372:	f000 fc2f 	bl	babd4 <__lshift>
   ba376:	1bed      	subs	r5, r5, r7
   ba378:	4604      	mov	r4, r0
   ba37a:	f100 0914 	add.w	r9, r0, #20
   ba37e:	f04f 0a00 	mov.w	sl, #0
   ba382:	e7ae      	b.n	ba2e2 <__gethex+0x202>
   ba384:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba388:	42a8      	cmp	r0, r5
   ba38a:	dd72      	ble.n	ba472 <__gethex+0x392>
   ba38c:	1b45      	subs	r5, r0, r5
   ba38e:	42ae      	cmp	r6, r5
   ba390:	dc36      	bgt.n	ba400 <__gethex+0x320>
   ba392:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba396:	2b02      	cmp	r3, #2
   ba398:	d02a      	beq.n	ba3f0 <__gethex+0x310>
   ba39a:	2b03      	cmp	r3, #3
   ba39c:	d02c      	beq.n	ba3f8 <__gethex+0x318>
   ba39e:	2b01      	cmp	r3, #1
   ba3a0:	d11c      	bne.n	ba3dc <__gethex+0x2fc>
   ba3a2:	42ae      	cmp	r6, r5
   ba3a4:	d11a      	bne.n	ba3dc <__gethex+0x2fc>
   ba3a6:	2e01      	cmp	r6, #1
   ba3a8:	d112      	bne.n	ba3d0 <__gethex+0x2f0>
   ba3aa:	9a04      	ldr	r2, [sp, #16]
   ba3ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba3b0:	6013      	str	r3, [r2, #0]
   ba3b2:	2301      	movs	r3, #1
   ba3b4:	6123      	str	r3, [r4, #16]
   ba3b6:	f8c9 3000 	str.w	r3, [r9]
   ba3ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba3bc:	2762      	movs	r7, #98	; 0x62
   ba3be:	601c      	str	r4, [r3, #0]
   ba3c0:	e723      	b.n	ba20a <__gethex+0x12a>
   ba3c2:	bf00      	nop
   ba3c4:	000bbe20 	.word	0x000bbe20
   ba3c8:	000bbd88 	.word	0x000bbd88
   ba3cc:	000bbd99 	.word	0x000bbd99
   ba3d0:	1e71      	subs	r1, r6, #1
   ba3d2:	4620      	mov	r0, r4
   ba3d4:	f000 fe42 	bl	bb05c <__any_on>
   ba3d8:	2800      	cmp	r0, #0
   ba3da:	d1e6      	bne.n	ba3aa <__gethex+0x2ca>
   ba3dc:	ee18 0a10 	vmov	r0, s16
   ba3e0:	4621      	mov	r1, r4
   ba3e2:	f000 f9db 	bl	ba79c <_Bfree>
   ba3e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba3e8:	2300      	movs	r3, #0
   ba3ea:	6013      	str	r3, [r2, #0]
   ba3ec:	2750      	movs	r7, #80	; 0x50
   ba3ee:	e70c      	b.n	ba20a <__gethex+0x12a>
   ba3f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba3f2:	2b00      	cmp	r3, #0
   ba3f4:	d1f2      	bne.n	ba3dc <__gethex+0x2fc>
   ba3f6:	e7d8      	b.n	ba3aa <__gethex+0x2ca>
   ba3f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba3fa:	2b00      	cmp	r3, #0
   ba3fc:	d1d5      	bne.n	ba3aa <__gethex+0x2ca>
   ba3fe:	e7ed      	b.n	ba3dc <__gethex+0x2fc>
   ba400:	1e6f      	subs	r7, r5, #1
   ba402:	f1ba 0f00 	cmp.w	sl, #0
   ba406:	d131      	bne.n	ba46c <__gethex+0x38c>
   ba408:	b127      	cbz	r7, ba414 <__gethex+0x334>
   ba40a:	4639      	mov	r1, r7
   ba40c:	4620      	mov	r0, r4
   ba40e:	f000 fe25 	bl	bb05c <__any_on>
   ba412:	4682      	mov	sl, r0
   ba414:	117b      	asrs	r3, r7, #5
   ba416:	2101      	movs	r1, #1
   ba418:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba41c:	f007 071f 	and.w	r7, r7, #31
   ba420:	fa01 f707 	lsl.w	r7, r1, r7
   ba424:	421f      	tst	r7, r3
   ba426:	4629      	mov	r1, r5
   ba428:	4620      	mov	r0, r4
   ba42a:	bf18      	it	ne
   ba42c:	f04a 0a02 	orrne.w	sl, sl, #2
   ba430:	1b76      	subs	r6, r6, r5
   ba432:	f7ff fded 	bl	ba010 <rshift>
   ba436:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba43a:	2702      	movs	r7, #2
   ba43c:	f1ba 0f00 	cmp.w	sl, #0
   ba440:	d048      	beq.n	ba4d4 <__gethex+0x3f4>
   ba442:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba446:	2b02      	cmp	r3, #2
   ba448:	d015      	beq.n	ba476 <__gethex+0x396>
   ba44a:	2b03      	cmp	r3, #3
   ba44c:	d017      	beq.n	ba47e <__gethex+0x39e>
   ba44e:	2b01      	cmp	r3, #1
   ba450:	d109      	bne.n	ba466 <__gethex+0x386>
   ba452:	f01a 0f02 	tst.w	sl, #2
   ba456:	d006      	beq.n	ba466 <__gethex+0x386>
   ba458:	f8d9 0000 	ldr.w	r0, [r9]
   ba45c:	ea4a 0a00 	orr.w	sl, sl, r0
   ba460:	f01a 0f01 	tst.w	sl, #1
   ba464:	d10e      	bne.n	ba484 <__gethex+0x3a4>
   ba466:	f047 0710 	orr.w	r7, r7, #16
   ba46a:	e033      	b.n	ba4d4 <__gethex+0x3f4>
   ba46c:	f04f 0a01 	mov.w	sl, #1
   ba470:	e7d0      	b.n	ba414 <__gethex+0x334>
   ba472:	2701      	movs	r7, #1
   ba474:	e7e2      	b.n	ba43c <__gethex+0x35c>
   ba476:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba478:	f1c3 0301 	rsb	r3, r3, #1
   ba47c:	9315      	str	r3, [sp, #84]	; 0x54
   ba47e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba480:	2b00      	cmp	r3, #0
   ba482:	d0f0      	beq.n	ba466 <__gethex+0x386>
   ba484:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba488:	f104 0314 	add.w	r3, r4, #20
   ba48c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba490:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba494:	f04f 0c00 	mov.w	ip, #0
   ba498:	4618      	mov	r0, r3
   ba49a:	f853 2b04 	ldr.w	r2, [r3], #4
   ba49e:	f1b2 3fff 	cmp.w	r2, #4294967295
   ba4a2:	d01c      	beq.n	ba4de <__gethex+0x3fe>
   ba4a4:	3201      	adds	r2, #1
   ba4a6:	6002      	str	r2, [r0, #0]
   ba4a8:	2f02      	cmp	r7, #2
   ba4aa:	f104 0314 	add.w	r3, r4, #20
   ba4ae:	d13f      	bne.n	ba530 <__gethex+0x450>
   ba4b0:	f8d8 2000 	ldr.w	r2, [r8]
   ba4b4:	3a01      	subs	r2, #1
   ba4b6:	42b2      	cmp	r2, r6
   ba4b8:	d10a      	bne.n	ba4d0 <__gethex+0x3f0>
   ba4ba:	1171      	asrs	r1, r6, #5
   ba4bc:	2201      	movs	r2, #1
   ba4be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba4c2:	f006 061f 	and.w	r6, r6, #31
   ba4c6:	fa02 f606 	lsl.w	r6, r2, r6
   ba4ca:	421e      	tst	r6, r3
   ba4cc:	bf18      	it	ne
   ba4ce:	4617      	movne	r7, r2
   ba4d0:	f047 0720 	orr.w	r7, r7, #32
   ba4d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba4d6:	601c      	str	r4, [r3, #0]
   ba4d8:	9b04      	ldr	r3, [sp, #16]
   ba4da:	601d      	str	r5, [r3, #0]
   ba4dc:	e695      	b.n	ba20a <__gethex+0x12a>
   ba4de:	4299      	cmp	r1, r3
   ba4e0:	f843 cc04 	str.w	ip, [r3, #-4]
   ba4e4:	d8d8      	bhi.n	ba498 <__gethex+0x3b8>
   ba4e6:	68a3      	ldr	r3, [r4, #8]
   ba4e8:	459b      	cmp	fp, r3
   ba4ea:	db19      	blt.n	ba520 <__gethex+0x440>
   ba4ec:	6861      	ldr	r1, [r4, #4]
   ba4ee:	ee18 0a10 	vmov	r0, s16
   ba4f2:	3101      	adds	r1, #1
   ba4f4:	f000 f912 	bl	ba71c <_Balloc>
   ba4f8:	4681      	mov	r9, r0
   ba4fa:	b918      	cbnz	r0, ba504 <__gethex+0x424>
   ba4fc:	4b1a      	ldr	r3, [pc, #104]	; (ba568 <__gethex+0x488>)
   ba4fe:	4602      	mov	r2, r0
   ba500:	2184      	movs	r1, #132	; 0x84
   ba502:	e6a8      	b.n	ba256 <__gethex+0x176>
   ba504:	6922      	ldr	r2, [r4, #16]
   ba506:	3202      	adds	r2, #2
   ba508:	f104 010c 	add.w	r1, r4, #12
   ba50c:	0092      	lsls	r2, r2, #2
   ba50e:	300c      	adds	r0, #12
   ba510:	f7fe fd4f 	bl	b8fb2 <memcpy>
   ba514:	4621      	mov	r1, r4
   ba516:	ee18 0a10 	vmov	r0, s16
   ba51a:	f000 f93f 	bl	ba79c <_Bfree>
   ba51e:	464c      	mov	r4, r9
   ba520:	6923      	ldr	r3, [r4, #16]
   ba522:	1c5a      	adds	r2, r3, #1
   ba524:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba528:	6122      	str	r2, [r4, #16]
   ba52a:	2201      	movs	r2, #1
   ba52c:	615a      	str	r2, [r3, #20]
   ba52e:	e7bb      	b.n	ba4a8 <__gethex+0x3c8>
   ba530:	6922      	ldr	r2, [r4, #16]
   ba532:	455a      	cmp	r2, fp
   ba534:	dd0b      	ble.n	ba54e <__gethex+0x46e>
   ba536:	2101      	movs	r1, #1
   ba538:	4620      	mov	r0, r4
   ba53a:	f7ff fd69 	bl	ba010 <rshift>
   ba53e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba542:	3501      	adds	r5, #1
   ba544:	42ab      	cmp	r3, r5
   ba546:	f6ff aed0 	blt.w	ba2ea <__gethex+0x20a>
   ba54a:	2701      	movs	r7, #1
   ba54c:	e7c0      	b.n	ba4d0 <__gethex+0x3f0>
   ba54e:	f016 061f 	ands.w	r6, r6, #31
   ba552:	d0fa      	beq.n	ba54a <__gethex+0x46a>
   ba554:	4453      	add	r3, sl
   ba556:	f1c6 0620 	rsb	r6, r6, #32
   ba55a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba55e:	f000 f9cf 	bl	ba900 <__hi0bits>
   ba562:	42b0      	cmp	r0, r6
   ba564:	dbe7      	blt.n	ba536 <__gethex+0x456>
   ba566:	e7f0      	b.n	ba54a <__gethex+0x46a>
   ba568:	000bbd88 	.word	0x000bbd88

000ba56c <L_shift>:
   ba56c:	f1c2 0208 	rsb	r2, r2, #8
   ba570:	0092      	lsls	r2, r2, #2
   ba572:	b570      	push	{r4, r5, r6, lr}
   ba574:	f1c2 0620 	rsb	r6, r2, #32
   ba578:	6843      	ldr	r3, [r0, #4]
   ba57a:	6804      	ldr	r4, [r0, #0]
   ba57c:	fa03 f506 	lsl.w	r5, r3, r6
   ba580:	432c      	orrs	r4, r5
   ba582:	40d3      	lsrs	r3, r2
   ba584:	6004      	str	r4, [r0, #0]
   ba586:	f840 3f04 	str.w	r3, [r0, #4]!
   ba58a:	4288      	cmp	r0, r1
   ba58c:	d3f4      	bcc.n	ba578 <L_shift+0xc>
   ba58e:	bd70      	pop	{r4, r5, r6, pc}

000ba590 <__match>:
   ba590:	b530      	push	{r4, r5, lr}
   ba592:	6803      	ldr	r3, [r0, #0]
   ba594:	3301      	adds	r3, #1
   ba596:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba59a:	b914      	cbnz	r4, ba5a2 <__match+0x12>
   ba59c:	6003      	str	r3, [r0, #0]
   ba59e:	2001      	movs	r0, #1
   ba5a0:	bd30      	pop	{r4, r5, pc}
   ba5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba5a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba5aa:	2d19      	cmp	r5, #25
   ba5ac:	bf98      	it	ls
   ba5ae:	3220      	addls	r2, #32
   ba5b0:	42a2      	cmp	r2, r4
   ba5b2:	d0f0      	beq.n	ba596 <__match+0x6>
   ba5b4:	2000      	movs	r0, #0
   ba5b6:	e7f3      	b.n	ba5a0 <__match+0x10>

000ba5b8 <__hexnan>:
   ba5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba5bc:	680b      	ldr	r3, [r1, #0]
   ba5be:	115e      	asrs	r6, r3, #5
   ba5c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba5c4:	f013 031f 	ands.w	r3, r3, #31
   ba5c8:	b087      	sub	sp, #28
   ba5ca:	bf18      	it	ne
   ba5cc:	3604      	addne	r6, #4
   ba5ce:	2500      	movs	r5, #0
   ba5d0:	1f37      	subs	r7, r6, #4
   ba5d2:	4690      	mov	r8, r2
   ba5d4:	6802      	ldr	r2, [r0, #0]
   ba5d6:	9301      	str	r3, [sp, #4]
   ba5d8:	4682      	mov	sl, r0
   ba5da:	f846 5c04 	str.w	r5, [r6, #-4]
   ba5de:	46b9      	mov	r9, r7
   ba5e0:	463c      	mov	r4, r7
   ba5e2:	9502      	str	r5, [sp, #8]
   ba5e4:	46ab      	mov	fp, r5
   ba5e6:	7851      	ldrb	r1, [r2, #1]
   ba5e8:	1c53      	adds	r3, r2, #1
   ba5ea:	9303      	str	r3, [sp, #12]
   ba5ec:	b341      	cbz	r1, ba640 <__hexnan+0x88>
   ba5ee:	4608      	mov	r0, r1
   ba5f0:	9205      	str	r2, [sp, #20]
   ba5f2:	9104      	str	r1, [sp, #16]
   ba5f4:	f7ff fd5e 	bl	ba0b4 <__hexdig_fun>
   ba5f8:	2800      	cmp	r0, #0
   ba5fa:	d14f      	bne.n	ba69c <__hexnan+0xe4>
   ba5fc:	9904      	ldr	r1, [sp, #16]
   ba5fe:	9a05      	ldr	r2, [sp, #20]
   ba600:	2920      	cmp	r1, #32
   ba602:	d818      	bhi.n	ba636 <__hexnan+0x7e>
   ba604:	9b02      	ldr	r3, [sp, #8]
   ba606:	459b      	cmp	fp, r3
   ba608:	dd13      	ble.n	ba632 <__hexnan+0x7a>
   ba60a:	454c      	cmp	r4, r9
   ba60c:	d206      	bcs.n	ba61c <__hexnan+0x64>
   ba60e:	2d07      	cmp	r5, #7
   ba610:	dc04      	bgt.n	ba61c <__hexnan+0x64>
   ba612:	462a      	mov	r2, r5
   ba614:	4649      	mov	r1, r9
   ba616:	4620      	mov	r0, r4
   ba618:	f7ff ffa8 	bl	ba56c <L_shift>
   ba61c:	4544      	cmp	r4, r8
   ba61e:	d950      	bls.n	ba6c2 <__hexnan+0x10a>
   ba620:	2300      	movs	r3, #0
   ba622:	f1a4 0904 	sub.w	r9, r4, #4
   ba626:	f844 3c04 	str.w	r3, [r4, #-4]
   ba62a:	f8cd b008 	str.w	fp, [sp, #8]
   ba62e:	464c      	mov	r4, r9
   ba630:	461d      	mov	r5, r3
   ba632:	9a03      	ldr	r2, [sp, #12]
   ba634:	e7d7      	b.n	ba5e6 <__hexnan+0x2e>
   ba636:	2929      	cmp	r1, #41	; 0x29
   ba638:	d156      	bne.n	ba6e8 <__hexnan+0x130>
   ba63a:	3202      	adds	r2, #2
   ba63c:	f8ca 2000 	str.w	r2, [sl]
   ba640:	f1bb 0f00 	cmp.w	fp, #0
   ba644:	d050      	beq.n	ba6e8 <__hexnan+0x130>
   ba646:	454c      	cmp	r4, r9
   ba648:	d206      	bcs.n	ba658 <__hexnan+0xa0>
   ba64a:	2d07      	cmp	r5, #7
   ba64c:	dc04      	bgt.n	ba658 <__hexnan+0xa0>
   ba64e:	462a      	mov	r2, r5
   ba650:	4649      	mov	r1, r9
   ba652:	4620      	mov	r0, r4
   ba654:	f7ff ff8a 	bl	ba56c <L_shift>
   ba658:	4544      	cmp	r4, r8
   ba65a:	d934      	bls.n	ba6c6 <__hexnan+0x10e>
   ba65c:	f1a8 0204 	sub.w	r2, r8, #4
   ba660:	4623      	mov	r3, r4
   ba662:	f853 1b04 	ldr.w	r1, [r3], #4
   ba666:	f842 1f04 	str.w	r1, [r2, #4]!
   ba66a:	429f      	cmp	r7, r3
   ba66c:	d2f9      	bcs.n	ba662 <__hexnan+0xaa>
   ba66e:	1b3b      	subs	r3, r7, r4
   ba670:	f023 0303 	bic.w	r3, r3, #3
   ba674:	3304      	adds	r3, #4
   ba676:	3401      	adds	r4, #1
   ba678:	3e03      	subs	r6, #3
   ba67a:	42b4      	cmp	r4, r6
   ba67c:	bf88      	it	hi
   ba67e:	2304      	movhi	r3, #4
   ba680:	4443      	add	r3, r8
   ba682:	2200      	movs	r2, #0
   ba684:	f843 2b04 	str.w	r2, [r3], #4
   ba688:	429f      	cmp	r7, r3
   ba68a:	d2fb      	bcs.n	ba684 <__hexnan+0xcc>
   ba68c:	683b      	ldr	r3, [r7, #0]
   ba68e:	b91b      	cbnz	r3, ba698 <__hexnan+0xe0>
   ba690:	4547      	cmp	r7, r8
   ba692:	d127      	bne.n	ba6e4 <__hexnan+0x12c>
   ba694:	2301      	movs	r3, #1
   ba696:	603b      	str	r3, [r7, #0]
   ba698:	2005      	movs	r0, #5
   ba69a:	e026      	b.n	ba6ea <__hexnan+0x132>
   ba69c:	3501      	adds	r5, #1
   ba69e:	2d08      	cmp	r5, #8
   ba6a0:	f10b 0b01 	add.w	fp, fp, #1
   ba6a4:	dd06      	ble.n	ba6b4 <__hexnan+0xfc>
   ba6a6:	4544      	cmp	r4, r8
   ba6a8:	d9c3      	bls.n	ba632 <__hexnan+0x7a>
   ba6aa:	2300      	movs	r3, #0
   ba6ac:	f844 3c04 	str.w	r3, [r4, #-4]
   ba6b0:	2501      	movs	r5, #1
   ba6b2:	3c04      	subs	r4, #4
   ba6b4:	6822      	ldr	r2, [r4, #0]
   ba6b6:	f000 000f 	and.w	r0, r0, #15
   ba6ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ba6be:	6022      	str	r2, [r4, #0]
   ba6c0:	e7b7      	b.n	ba632 <__hexnan+0x7a>
   ba6c2:	2508      	movs	r5, #8
   ba6c4:	e7b5      	b.n	ba632 <__hexnan+0x7a>
   ba6c6:	9b01      	ldr	r3, [sp, #4]
   ba6c8:	2b00      	cmp	r3, #0
   ba6ca:	d0df      	beq.n	ba68c <__hexnan+0xd4>
   ba6cc:	f04f 32ff 	mov.w	r2, #4294967295
   ba6d0:	f1c3 0320 	rsb	r3, r3, #32
   ba6d4:	fa22 f303 	lsr.w	r3, r2, r3
   ba6d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ba6dc:	401a      	ands	r2, r3
   ba6de:	f846 2c04 	str.w	r2, [r6, #-4]
   ba6e2:	e7d3      	b.n	ba68c <__hexnan+0xd4>
   ba6e4:	3f04      	subs	r7, #4
   ba6e6:	e7d1      	b.n	ba68c <__hexnan+0xd4>
   ba6e8:	2004      	movs	r0, #4
   ba6ea:	b007      	add	sp, #28
   ba6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba6f0 <__retarget_lock_acquire_recursive>:
   ba6f0:	4770      	bx	lr

000ba6f2 <__retarget_lock_release>:
   ba6f2:	4770      	bx	lr

000ba6f4 <__retarget_lock_release_recursive>:
   ba6f4:	4770      	bx	lr

000ba6f6 <__ascii_mbtowc>:
   ba6f6:	b082      	sub	sp, #8
   ba6f8:	b901      	cbnz	r1, ba6fc <__ascii_mbtowc+0x6>
   ba6fa:	a901      	add	r1, sp, #4
   ba6fc:	b142      	cbz	r2, ba710 <__ascii_mbtowc+0x1a>
   ba6fe:	b14b      	cbz	r3, ba714 <__ascii_mbtowc+0x1e>
   ba700:	7813      	ldrb	r3, [r2, #0]
   ba702:	600b      	str	r3, [r1, #0]
   ba704:	7812      	ldrb	r2, [r2, #0]
   ba706:	1e10      	subs	r0, r2, #0
   ba708:	bf18      	it	ne
   ba70a:	2001      	movne	r0, #1
   ba70c:	b002      	add	sp, #8
   ba70e:	4770      	bx	lr
   ba710:	4610      	mov	r0, r2
   ba712:	e7fb      	b.n	ba70c <__ascii_mbtowc+0x16>
   ba714:	f06f 0001 	mvn.w	r0, #1
   ba718:	e7f8      	b.n	ba70c <__ascii_mbtowc+0x16>
	...

000ba71c <_Balloc>:
   ba71c:	b570      	push	{r4, r5, r6, lr}
   ba71e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba720:	4604      	mov	r4, r0
   ba722:	460d      	mov	r5, r1
   ba724:	b976      	cbnz	r6, ba744 <_Balloc+0x28>
   ba726:	2010      	movs	r0, #16
   ba728:	f7fb fde8 	bl	b62fc <malloc>
   ba72c:	4602      	mov	r2, r0
   ba72e:	6260      	str	r0, [r4, #36]	; 0x24
   ba730:	b920      	cbnz	r0, ba73c <_Balloc+0x20>
   ba732:	4b18      	ldr	r3, [pc, #96]	; (ba794 <_Balloc+0x78>)
   ba734:	4818      	ldr	r0, [pc, #96]	; (ba798 <_Balloc+0x7c>)
   ba736:	2166      	movs	r1, #102	; 0x66
   ba738:	f7fb fe20 	bl	b637c <__assert_func>
   ba73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba740:	6006      	str	r6, [r0, #0]
   ba742:	60c6      	str	r6, [r0, #12]
   ba744:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba746:	68f3      	ldr	r3, [r6, #12]
   ba748:	b183      	cbz	r3, ba76c <_Balloc+0x50>
   ba74a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba74c:	68db      	ldr	r3, [r3, #12]
   ba74e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ba752:	b9b8      	cbnz	r0, ba784 <_Balloc+0x68>
   ba754:	2101      	movs	r1, #1
   ba756:	fa01 f605 	lsl.w	r6, r1, r5
   ba75a:	1d72      	adds	r2, r6, #5
   ba75c:	0092      	lsls	r2, r2, #2
   ba75e:	4620      	mov	r0, r4
   ba760:	f000 fc9d 	bl	bb09e <_calloc_r>
   ba764:	b160      	cbz	r0, ba780 <_Balloc+0x64>
   ba766:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ba76a:	e00e      	b.n	ba78a <_Balloc+0x6e>
   ba76c:	2221      	movs	r2, #33	; 0x21
   ba76e:	2104      	movs	r1, #4
   ba770:	4620      	mov	r0, r4
   ba772:	f000 fc94 	bl	bb09e <_calloc_r>
   ba776:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba778:	60f0      	str	r0, [r6, #12]
   ba77a:	68db      	ldr	r3, [r3, #12]
   ba77c:	2b00      	cmp	r3, #0
   ba77e:	d1e4      	bne.n	ba74a <_Balloc+0x2e>
   ba780:	2000      	movs	r0, #0
   ba782:	bd70      	pop	{r4, r5, r6, pc}
   ba784:	6802      	ldr	r2, [r0, #0]
   ba786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ba78a:	2300      	movs	r3, #0
   ba78c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ba790:	e7f7      	b.n	ba782 <_Balloc+0x66>
   ba792:	bf00      	nop
   ba794:	000bbb11 	.word	0x000bbb11
   ba798:	000bbe34 	.word	0x000bbe34

000ba79c <_Bfree>:
   ba79c:	b570      	push	{r4, r5, r6, lr}
   ba79e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba7a0:	4605      	mov	r5, r0
   ba7a2:	460c      	mov	r4, r1
   ba7a4:	b976      	cbnz	r6, ba7c4 <_Bfree+0x28>
   ba7a6:	2010      	movs	r0, #16
   ba7a8:	f7fb fda8 	bl	b62fc <malloc>
   ba7ac:	4602      	mov	r2, r0
   ba7ae:	6268      	str	r0, [r5, #36]	; 0x24
   ba7b0:	b920      	cbnz	r0, ba7bc <_Bfree+0x20>
   ba7b2:	4b09      	ldr	r3, [pc, #36]	; (ba7d8 <_Bfree+0x3c>)
   ba7b4:	4809      	ldr	r0, [pc, #36]	; (ba7dc <_Bfree+0x40>)
   ba7b6:	218a      	movs	r1, #138	; 0x8a
   ba7b8:	f7fb fde0 	bl	b637c <__assert_func>
   ba7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba7c0:	6006      	str	r6, [r0, #0]
   ba7c2:	60c6      	str	r6, [r0, #12]
   ba7c4:	b13c      	cbz	r4, ba7d6 <_Bfree+0x3a>
   ba7c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ba7c8:	6862      	ldr	r2, [r4, #4]
   ba7ca:	68db      	ldr	r3, [r3, #12]
   ba7cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ba7d0:	6021      	str	r1, [r4, #0]
   ba7d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ba7d6:	bd70      	pop	{r4, r5, r6, pc}
   ba7d8:	000bbb11 	.word	0x000bbb11
   ba7dc:	000bbe34 	.word	0x000bbe34

000ba7e0 <__multadd>:
   ba7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba7e4:	690d      	ldr	r5, [r1, #16]
   ba7e6:	4607      	mov	r7, r0
   ba7e8:	460c      	mov	r4, r1
   ba7ea:	461e      	mov	r6, r3
   ba7ec:	f101 0c14 	add.w	ip, r1, #20
   ba7f0:	2000      	movs	r0, #0
   ba7f2:	f8dc 3000 	ldr.w	r3, [ip]
   ba7f6:	b299      	uxth	r1, r3
   ba7f8:	fb02 6101 	mla	r1, r2, r1, r6
   ba7fc:	0c1e      	lsrs	r6, r3, #16
   ba7fe:	0c0b      	lsrs	r3, r1, #16
   ba800:	fb02 3306 	mla	r3, r2, r6, r3
   ba804:	b289      	uxth	r1, r1
   ba806:	3001      	adds	r0, #1
   ba808:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   ba80c:	4285      	cmp	r5, r0
   ba80e:	f84c 1b04 	str.w	r1, [ip], #4
   ba812:	ea4f 4613 	mov.w	r6, r3, lsr #16
   ba816:	dcec      	bgt.n	ba7f2 <__multadd+0x12>
   ba818:	b30e      	cbz	r6, ba85e <__multadd+0x7e>
   ba81a:	68a3      	ldr	r3, [r4, #8]
   ba81c:	42ab      	cmp	r3, r5
   ba81e:	dc19      	bgt.n	ba854 <__multadd+0x74>
   ba820:	6861      	ldr	r1, [r4, #4]
   ba822:	4638      	mov	r0, r7
   ba824:	3101      	adds	r1, #1
   ba826:	f7ff ff79 	bl	ba71c <_Balloc>
   ba82a:	4680      	mov	r8, r0
   ba82c:	b928      	cbnz	r0, ba83a <__multadd+0x5a>
   ba82e:	4602      	mov	r2, r0
   ba830:	4b0c      	ldr	r3, [pc, #48]	; (ba864 <__multadd+0x84>)
   ba832:	480d      	ldr	r0, [pc, #52]	; (ba868 <__multadd+0x88>)
   ba834:	21b5      	movs	r1, #181	; 0xb5
   ba836:	f7fb fda1 	bl	b637c <__assert_func>
   ba83a:	6922      	ldr	r2, [r4, #16]
   ba83c:	3202      	adds	r2, #2
   ba83e:	f104 010c 	add.w	r1, r4, #12
   ba842:	0092      	lsls	r2, r2, #2
   ba844:	300c      	adds	r0, #12
   ba846:	f7fe fbb4 	bl	b8fb2 <memcpy>
   ba84a:	4621      	mov	r1, r4
   ba84c:	4638      	mov	r0, r7
   ba84e:	f7ff ffa5 	bl	ba79c <_Bfree>
   ba852:	4644      	mov	r4, r8
   ba854:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ba858:	3501      	adds	r5, #1
   ba85a:	615e      	str	r6, [r3, #20]
   ba85c:	6125      	str	r5, [r4, #16]
   ba85e:	4620      	mov	r0, r4
   ba860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba864:	000bbd88 	.word	0x000bbd88
   ba868:	000bbe34 	.word	0x000bbe34

000ba86c <__s2b>:
   ba86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba870:	460c      	mov	r4, r1
   ba872:	4615      	mov	r5, r2
   ba874:	461f      	mov	r7, r3
   ba876:	2209      	movs	r2, #9
   ba878:	3308      	adds	r3, #8
   ba87a:	4606      	mov	r6, r0
   ba87c:	fb93 f3f2 	sdiv	r3, r3, r2
   ba880:	2100      	movs	r1, #0
   ba882:	2201      	movs	r2, #1
   ba884:	429a      	cmp	r2, r3
   ba886:	db09      	blt.n	ba89c <__s2b+0x30>
   ba888:	4630      	mov	r0, r6
   ba88a:	f7ff ff47 	bl	ba71c <_Balloc>
   ba88e:	b940      	cbnz	r0, ba8a2 <__s2b+0x36>
   ba890:	4602      	mov	r2, r0
   ba892:	4b19      	ldr	r3, [pc, #100]	; (ba8f8 <__s2b+0x8c>)
   ba894:	4819      	ldr	r0, [pc, #100]	; (ba8fc <__s2b+0x90>)
   ba896:	21ce      	movs	r1, #206	; 0xce
   ba898:	f7fb fd70 	bl	b637c <__assert_func>
   ba89c:	0052      	lsls	r2, r2, #1
   ba89e:	3101      	adds	r1, #1
   ba8a0:	e7f0      	b.n	ba884 <__s2b+0x18>
   ba8a2:	9b08      	ldr	r3, [sp, #32]
   ba8a4:	6143      	str	r3, [r0, #20]
   ba8a6:	2d09      	cmp	r5, #9
   ba8a8:	f04f 0301 	mov.w	r3, #1
   ba8ac:	6103      	str	r3, [r0, #16]
   ba8ae:	dd16      	ble.n	ba8de <__s2b+0x72>
   ba8b0:	f104 0909 	add.w	r9, r4, #9
   ba8b4:	46c8      	mov	r8, r9
   ba8b6:	442c      	add	r4, r5
   ba8b8:	f818 3b01 	ldrb.w	r3, [r8], #1
   ba8bc:	4601      	mov	r1, r0
   ba8be:	3b30      	subs	r3, #48	; 0x30
   ba8c0:	220a      	movs	r2, #10
   ba8c2:	4630      	mov	r0, r6
   ba8c4:	f7ff ff8c 	bl	ba7e0 <__multadd>
   ba8c8:	45a0      	cmp	r8, r4
   ba8ca:	d1f5      	bne.n	ba8b8 <__s2b+0x4c>
   ba8cc:	f1a5 0408 	sub.w	r4, r5, #8
   ba8d0:	444c      	add	r4, r9
   ba8d2:	1b2d      	subs	r5, r5, r4
   ba8d4:	1963      	adds	r3, r4, r5
   ba8d6:	42bb      	cmp	r3, r7
   ba8d8:	db04      	blt.n	ba8e4 <__s2b+0x78>
   ba8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba8de:	340a      	adds	r4, #10
   ba8e0:	2509      	movs	r5, #9
   ba8e2:	e7f6      	b.n	ba8d2 <__s2b+0x66>
   ba8e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba8e8:	4601      	mov	r1, r0
   ba8ea:	3b30      	subs	r3, #48	; 0x30
   ba8ec:	220a      	movs	r2, #10
   ba8ee:	4630      	mov	r0, r6
   ba8f0:	f7ff ff76 	bl	ba7e0 <__multadd>
   ba8f4:	e7ee      	b.n	ba8d4 <__s2b+0x68>
   ba8f6:	bf00      	nop
   ba8f8:	000bbd88 	.word	0x000bbd88
   ba8fc:	000bbe34 	.word	0x000bbe34

000ba900 <__hi0bits>:
   ba900:	0c03      	lsrs	r3, r0, #16
   ba902:	041b      	lsls	r3, r3, #16
   ba904:	b9d3      	cbnz	r3, ba93c <__hi0bits+0x3c>
   ba906:	0400      	lsls	r0, r0, #16
   ba908:	2310      	movs	r3, #16
   ba90a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ba90e:	bf04      	itt	eq
   ba910:	0200      	lsleq	r0, r0, #8
   ba912:	3308      	addeq	r3, #8
   ba914:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ba918:	bf04      	itt	eq
   ba91a:	0100      	lsleq	r0, r0, #4
   ba91c:	3304      	addeq	r3, #4
   ba91e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ba922:	bf04      	itt	eq
   ba924:	0080      	lsleq	r0, r0, #2
   ba926:	3302      	addeq	r3, #2
   ba928:	2800      	cmp	r0, #0
   ba92a:	db05      	blt.n	ba938 <__hi0bits+0x38>
   ba92c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ba930:	f103 0301 	add.w	r3, r3, #1
   ba934:	bf08      	it	eq
   ba936:	2320      	moveq	r3, #32
   ba938:	4618      	mov	r0, r3
   ba93a:	4770      	bx	lr
   ba93c:	2300      	movs	r3, #0
   ba93e:	e7e4      	b.n	ba90a <__hi0bits+0xa>

000ba940 <__lo0bits>:
   ba940:	6803      	ldr	r3, [r0, #0]
   ba942:	f013 0207 	ands.w	r2, r3, #7
   ba946:	4601      	mov	r1, r0
   ba948:	d00b      	beq.n	ba962 <__lo0bits+0x22>
   ba94a:	07da      	lsls	r2, r3, #31
   ba94c:	d423      	bmi.n	ba996 <__lo0bits+0x56>
   ba94e:	0798      	lsls	r0, r3, #30
   ba950:	bf49      	itett	mi
   ba952:	085b      	lsrmi	r3, r3, #1
   ba954:	089b      	lsrpl	r3, r3, #2
   ba956:	2001      	movmi	r0, #1
   ba958:	600b      	strmi	r3, [r1, #0]
   ba95a:	bf5c      	itt	pl
   ba95c:	600b      	strpl	r3, [r1, #0]
   ba95e:	2002      	movpl	r0, #2
   ba960:	4770      	bx	lr
   ba962:	b298      	uxth	r0, r3
   ba964:	b9a8      	cbnz	r0, ba992 <__lo0bits+0x52>
   ba966:	0c1b      	lsrs	r3, r3, #16
   ba968:	2010      	movs	r0, #16
   ba96a:	b2da      	uxtb	r2, r3
   ba96c:	b90a      	cbnz	r2, ba972 <__lo0bits+0x32>
   ba96e:	3008      	adds	r0, #8
   ba970:	0a1b      	lsrs	r3, r3, #8
   ba972:	071a      	lsls	r2, r3, #28
   ba974:	bf04      	itt	eq
   ba976:	091b      	lsreq	r3, r3, #4
   ba978:	3004      	addeq	r0, #4
   ba97a:	079a      	lsls	r2, r3, #30
   ba97c:	bf04      	itt	eq
   ba97e:	089b      	lsreq	r3, r3, #2
   ba980:	3002      	addeq	r0, #2
   ba982:	07da      	lsls	r2, r3, #31
   ba984:	d403      	bmi.n	ba98e <__lo0bits+0x4e>
   ba986:	085b      	lsrs	r3, r3, #1
   ba988:	f100 0001 	add.w	r0, r0, #1
   ba98c:	d005      	beq.n	ba99a <__lo0bits+0x5a>
   ba98e:	600b      	str	r3, [r1, #0]
   ba990:	4770      	bx	lr
   ba992:	4610      	mov	r0, r2
   ba994:	e7e9      	b.n	ba96a <__lo0bits+0x2a>
   ba996:	2000      	movs	r0, #0
   ba998:	4770      	bx	lr
   ba99a:	2020      	movs	r0, #32
   ba99c:	4770      	bx	lr
	...

000ba9a0 <__i2b>:
   ba9a0:	b510      	push	{r4, lr}
   ba9a2:	460c      	mov	r4, r1
   ba9a4:	2101      	movs	r1, #1
   ba9a6:	f7ff feb9 	bl	ba71c <_Balloc>
   ba9aa:	4602      	mov	r2, r0
   ba9ac:	b928      	cbnz	r0, ba9ba <__i2b+0x1a>
   ba9ae:	4b05      	ldr	r3, [pc, #20]	; (ba9c4 <__i2b+0x24>)
   ba9b0:	4805      	ldr	r0, [pc, #20]	; (ba9c8 <__i2b+0x28>)
   ba9b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   ba9b6:	f7fb fce1 	bl	b637c <__assert_func>
   ba9ba:	2301      	movs	r3, #1
   ba9bc:	6144      	str	r4, [r0, #20]
   ba9be:	6103      	str	r3, [r0, #16]
   ba9c0:	bd10      	pop	{r4, pc}
   ba9c2:	bf00      	nop
   ba9c4:	000bbd88 	.word	0x000bbd88
   ba9c8:	000bbe34 	.word	0x000bbe34

000ba9cc <__multiply>:
   ba9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba9d0:	4691      	mov	r9, r2
   ba9d2:	690a      	ldr	r2, [r1, #16]
   ba9d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba9d8:	429a      	cmp	r2, r3
   ba9da:	bfb8      	it	lt
   ba9dc:	460b      	movlt	r3, r1
   ba9de:	460c      	mov	r4, r1
   ba9e0:	bfbc      	itt	lt
   ba9e2:	464c      	movlt	r4, r9
   ba9e4:	4699      	movlt	r9, r3
   ba9e6:	6927      	ldr	r7, [r4, #16]
   ba9e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba9ec:	68a3      	ldr	r3, [r4, #8]
   ba9ee:	6861      	ldr	r1, [r4, #4]
   ba9f0:	eb07 060a 	add.w	r6, r7, sl
   ba9f4:	42b3      	cmp	r3, r6
   ba9f6:	b085      	sub	sp, #20
   ba9f8:	bfb8      	it	lt
   ba9fa:	3101      	addlt	r1, #1
   ba9fc:	f7ff fe8e 	bl	ba71c <_Balloc>
   baa00:	b930      	cbnz	r0, baa10 <__multiply+0x44>
   baa02:	4602      	mov	r2, r0
   baa04:	4b44      	ldr	r3, [pc, #272]	; (bab18 <__multiply+0x14c>)
   baa06:	4845      	ldr	r0, [pc, #276]	; (bab1c <__multiply+0x150>)
   baa08:	f240 115d 	movw	r1, #349	; 0x15d
   baa0c:	f7fb fcb6 	bl	b637c <__assert_func>
   baa10:	f100 0514 	add.w	r5, r0, #20
   baa14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   baa18:	462b      	mov	r3, r5
   baa1a:	2200      	movs	r2, #0
   baa1c:	4543      	cmp	r3, r8
   baa1e:	d321      	bcc.n	baa64 <__multiply+0x98>
   baa20:	f104 0314 	add.w	r3, r4, #20
   baa24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   baa28:	f109 0314 	add.w	r3, r9, #20
   baa2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   baa30:	9202      	str	r2, [sp, #8]
   baa32:	1b3a      	subs	r2, r7, r4
   baa34:	3a15      	subs	r2, #21
   baa36:	f022 0203 	bic.w	r2, r2, #3
   baa3a:	3204      	adds	r2, #4
   baa3c:	f104 0115 	add.w	r1, r4, #21
   baa40:	428f      	cmp	r7, r1
   baa42:	bf38      	it	cc
   baa44:	2204      	movcc	r2, #4
   baa46:	9201      	str	r2, [sp, #4]
   baa48:	9a02      	ldr	r2, [sp, #8]
   baa4a:	9303      	str	r3, [sp, #12]
   baa4c:	429a      	cmp	r2, r3
   baa4e:	d80c      	bhi.n	baa6a <__multiply+0x9e>
   baa50:	2e00      	cmp	r6, #0
   baa52:	dd03      	ble.n	baa5c <__multiply+0x90>
   baa54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   baa58:	2b00      	cmp	r3, #0
   baa5a:	d05a      	beq.n	bab12 <__multiply+0x146>
   baa5c:	6106      	str	r6, [r0, #16]
   baa5e:	b005      	add	sp, #20
   baa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   baa64:	f843 2b04 	str.w	r2, [r3], #4
   baa68:	e7d8      	b.n	baa1c <__multiply+0x50>
   baa6a:	f8b3 a000 	ldrh.w	sl, [r3]
   baa6e:	f1ba 0f00 	cmp.w	sl, #0
   baa72:	d024      	beq.n	baabe <__multiply+0xf2>
   baa74:	f104 0e14 	add.w	lr, r4, #20
   baa78:	46a9      	mov	r9, r5
   baa7a:	f04f 0c00 	mov.w	ip, #0
   baa7e:	f85e 2b04 	ldr.w	r2, [lr], #4
   baa82:	f8d9 1000 	ldr.w	r1, [r9]
   baa86:	fa1f fb82 	uxth.w	fp, r2
   baa8a:	b289      	uxth	r1, r1
   baa8c:	fb0a 110b 	mla	r1, sl, fp, r1
   baa90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   baa94:	f8d9 2000 	ldr.w	r2, [r9]
   baa98:	4461      	add	r1, ip
   baa9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baa9e:	fb0a c20b 	mla	r2, sl, fp, ip
   baaa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   baaa6:	b289      	uxth	r1, r1
   baaa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   baaac:	4577      	cmp	r7, lr
   baaae:	f849 1b04 	str.w	r1, [r9], #4
   baab2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baab6:	d8e2      	bhi.n	baa7e <__multiply+0xb2>
   baab8:	9a01      	ldr	r2, [sp, #4]
   baaba:	f845 c002 	str.w	ip, [r5, r2]
   baabe:	9a03      	ldr	r2, [sp, #12]
   baac0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   baac4:	3304      	adds	r3, #4
   baac6:	f1b9 0f00 	cmp.w	r9, #0
   baaca:	d020      	beq.n	bab0e <__multiply+0x142>
   baacc:	6829      	ldr	r1, [r5, #0]
   baace:	f104 0c14 	add.w	ip, r4, #20
   baad2:	46ae      	mov	lr, r5
   baad4:	f04f 0a00 	mov.w	sl, #0
   baad8:	f8bc b000 	ldrh.w	fp, [ip]
   baadc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   baae0:	fb09 220b 	mla	r2, r9, fp, r2
   baae4:	4492      	add	sl, r2
   baae6:	b289      	uxth	r1, r1
   baae8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   baaec:	f84e 1b04 	str.w	r1, [lr], #4
   baaf0:	f85c 2b04 	ldr.w	r2, [ip], #4
   baaf4:	f8be 1000 	ldrh.w	r1, [lr]
   baaf8:	0c12      	lsrs	r2, r2, #16
   baafa:	fb09 1102 	mla	r1, r9, r2, r1
   baafe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bab02:	4567      	cmp	r7, ip
   bab04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bab08:	d8e6      	bhi.n	baad8 <__multiply+0x10c>
   bab0a:	9a01      	ldr	r2, [sp, #4]
   bab0c:	50a9      	str	r1, [r5, r2]
   bab0e:	3504      	adds	r5, #4
   bab10:	e79a      	b.n	baa48 <__multiply+0x7c>
   bab12:	3e01      	subs	r6, #1
   bab14:	e79c      	b.n	baa50 <__multiply+0x84>
   bab16:	bf00      	nop
   bab18:	000bbd88 	.word	0x000bbd88
   bab1c:	000bbe34 	.word	0x000bbe34

000bab20 <__pow5mult>:
   bab20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bab24:	4615      	mov	r5, r2
   bab26:	f012 0203 	ands.w	r2, r2, #3
   bab2a:	4606      	mov	r6, r0
   bab2c:	460f      	mov	r7, r1
   bab2e:	d007      	beq.n	bab40 <__pow5mult+0x20>
   bab30:	4c25      	ldr	r4, [pc, #148]	; (babc8 <__pow5mult+0xa8>)
   bab32:	3a01      	subs	r2, #1
   bab34:	2300      	movs	r3, #0
   bab36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bab3a:	f7ff fe51 	bl	ba7e0 <__multadd>
   bab3e:	4607      	mov	r7, r0
   bab40:	10ad      	asrs	r5, r5, #2
   bab42:	d03d      	beq.n	babc0 <__pow5mult+0xa0>
   bab44:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bab46:	b97c      	cbnz	r4, bab68 <__pow5mult+0x48>
   bab48:	2010      	movs	r0, #16
   bab4a:	f7fb fbd7 	bl	b62fc <malloc>
   bab4e:	4602      	mov	r2, r0
   bab50:	6270      	str	r0, [r6, #36]	; 0x24
   bab52:	b928      	cbnz	r0, bab60 <__pow5mult+0x40>
   bab54:	4b1d      	ldr	r3, [pc, #116]	; (babcc <__pow5mult+0xac>)
   bab56:	481e      	ldr	r0, [pc, #120]	; (babd0 <__pow5mult+0xb0>)
   bab58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bab5c:	f7fb fc0e 	bl	b637c <__assert_func>
   bab60:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bab64:	6004      	str	r4, [r0, #0]
   bab66:	60c4      	str	r4, [r0, #12]
   bab68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bab6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bab70:	b94c      	cbnz	r4, bab86 <__pow5mult+0x66>
   bab72:	f240 2171 	movw	r1, #625	; 0x271
   bab76:	4630      	mov	r0, r6
   bab78:	f7ff ff12 	bl	ba9a0 <__i2b>
   bab7c:	2300      	movs	r3, #0
   bab7e:	f8c8 0008 	str.w	r0, [r8, #8]
   bab82:	4604      	mov	r4, r0
   bab84:	6003      	str	r3, [r0, #0]
   bab86:	f04f 0900 	mov.w	r9, #0
   bab8a:	07eb      	lsls	r3, r5, #31
   bab8c:	d50a      	bpl.n	baba4 <__pow5mult+0x84>
   bab8e:	4639      	mov	r1, r7
   bab90:	4622      	mov	r2, r4
   bab92:	4630      	mov	r0, r6
   bab94:	f7ff ff1a 	bl	ba9cc <__multiply>
   bab98:	4639      	mov	r1, r7
   bab9a:	4680      	mov	r8, r0
   bab9c:	4630      	mov	r0, r6
   bab9e:	f7ff fdfd 	bl	ba79c <_Bfree>
   baba2:	4647      	mov	r7, r8
   baba4:	106d      	asrs	r5, r5, #1
   baba6:	d00b      	beq.n	babc0 <__pow5mult+0xa0>
   baba8:	6820      	ldr	r0, [r4, #0]
   babaa:	b938      	cbnz	r0, babbc <__pow5mult+0x9c>
   babac:	4622      	mov	r2, r4
   babae:	4621      	mov	r1, r4
   babb0:	4630      	mov	r0, r6
   babb2:	f7ff ff0b 	bl	ba9cc <__multiply>
   babb6:	6020      	str	r0, [r4, #0]
   babb8:	f8c0 9000 	str.w	r9, [r0]
   babbc:	4604      	mov	r4, r0
   babbe:	e7e4      	b.n	bab8a <__pow5mult+0x6a>
   babc0:	4638      	mov	r0, r7
   babc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   babc6:	bf00      	nop
   babc8:	000bbfa8 	.word	0x000bbfa8
   babcc:	000bbb11 	.word	0x000bbb11
   babd0:	000bbe34 	.word	0x000bbe34

000babd4 <__lshift>:
   babd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   babd8:	460c      	mov	r4, r1
   babda:	6849      	ldr	r1, [r1, #4]
   babdc:	6923      	ldr	r3, [r4, #16]
   babde:	eb03 1862 	add.w	r8, r3, r2, asr #5
   babe2:	68a3      	ldr	r3, [r4, #8]
   babe4:	4607      	mov	r7, r0
   babe6:	4691      	mov	r9, r2
   babe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   babec:	f108 0601 	add.w	r6, r8, #1
   babf0:	42b3      	cmp	r3, r6
   babf2:	db0b      	blt.n	bac0c <__lshift+0x38>
   babf4:	4638      	mov	r0, r7
   babf6:	f7ff fd91 	bl	ba71c <_Balloc>
   babfa:	4605      	mov	r5, r0
   babfc:	b948      	cbnz	r0, bac12 <__lshift+0x3e>
   babfe:	4602      	mov	r2, r0
   bac00:	4b2a      	ldr	r3, [pc, #168]	; (bacac <__lshift+0xd8>)
   bac02:	482b      	ldr	r0, [pc, #172]	; (bacb0 <__lshift+0xdc>)
   bac04:	f240 11d9 	movw	r1, #473	; 0x1d9
   bac08:	f7fb fbb8 	bl	b637c <__assert_func>
   bac0c:	3101      	adds	r1, #1
   bac0e:	005b      	lsls	r3, r3, #1
   bac10:	e7ee      	b.n	babf0 <__lshift+0x1c>
   bac12:	2300      	movs	r3, #0
   bac14:	f100 0114 	add.w	r1, r0, #20
   bac18:	f100 0210 	add.w	r2, r0, #16
   bac1c:	4618      	mov	r0, r3
   bac1e:	4553      	cmp	r3, sl
   bac20:	db37      	blt.n	bac92 <__lshift+0xbe>
   bac22:	6920      	ldr	r0, [r4, #16]
   bac24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bac28:	f104 0314 	add.w	r3, r4, #20
   bac2c:	f019 091f 	ands.w	r9, r9, #31
   bac30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bac34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bac38:	d02f      	beq.n	bac9a <__lshift+0xc6>
   bac3a:	f1c9 0e20 	rsb	lr, r9, #32
   bac3e:	468a      	mov	sl, r1
   bac40:	f04f 0c00 	mov.w	ip, #0
   bac44:	681a      	ldr	r2, [r3, #0]
   bac46:	fa02 f209 	lsl.w	r2, r2, r9
   bac4a:	ea42 020c 	orr.w	r2, r2, ip
   bac4e:	f84a 2b04 	str.w	r2, [sl], #4
   bac52:	f853 2b04 	ldr.w	r2, [r3], #4
   bac56:	4298      	cmp	r0, r3
   bac58:	fa22 fc0e 	lsr.w	ip, r2, lr
   bac5c:	d8f2      	bhi.n	bac44 <__lshift+0x70>
   bac5e:	1b03      	subs	r3, r0, r4
   bac60:	3b15      	subs	r3, #21
   bac62:	f023 0303 	bic.w	r3, r3, #3
   bac66:	3304      	adds	r3, #4
   bac68:	f104 0215 	add.w	r2, r4, #21
   bac6c:	4290      	cmp	r0, r2
   bac6e:	bf38      	it	cc
   bac70:	2304      	movcc	r3, #4
   bac72:	f841 c003 	str.w	ip, [r1, r3]
   bac76:	f1bc 0f00 	cmp.w	ip, #0
   bac7a:	d001      	beq.n	bac80 <__lshift+0xac>
   bac7c:	f108 0602 	add.w	r6, r8, #2
   bac80:	3e01      	subs	r6, #1
   bac82:	4638      	mov	r0, r7
   bac84:	612e      	str	r6, [r5, #16]
   bac86:	4621      	mov	r1, r4
   bac88:	f7ff fd88 	bl	ba79c <_Bfree>
   bac8c:	4628      	mov	r0, r5
   bac8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bac92:	f842 0f04 	str.w	r0, [r2, #4]!
   bac96:	3301      	adds	r3, #1
   bac98:	e7c1      	b.n	bac1e <__lshift+0x4a>
   bac9a:	3904      	subs	r1, #4
   bac9c:	f853 2b04 	ldr.w	r2, [r3], #4
   baca0:	f841 2f04 	str.w	r2, [r1, #4]!
   baca4:	4298      	cmp	r0, r3
   baca6:	d8f9      	bhi.n	bac9c <__lshift+0xc8>
   baca8:	e7ea      	b.n	bac80 <__lshift+0xac>
   bacaa:	bf00      	nop
   bacac:	000bbd88 	.word	0x000bbd88
   bacb0:	000bbe34 	.word	0x000bbe34

000bacb4 <__mcmp>:
   bacb4:	b530      	push	{r4, r5, lr}
   bacb6:	6902      	ldr	r2, [r0, #16]
   bacb8:	690c      	ldr	r4, [r1, #16]
   bacba:	1b12      	subs	r2, r2, r4
   bacbc:	d10e      	bne.n	bacdc <__mcmp+0x28>
   bacbe:	f100 0314 	add.w	r3, r0, #20
   bacc2:	3114      	adds	r1, #20
   bacc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bacc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   baccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bacd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bacd4:	42a5      	cmp	r5, r4
   bacd6:	d003      	beq.n	bace0 <__mcmp+0x2c>
   bacd8:	d305      	bcc.n	bace6 <__mcmp+0x32>
   bacda:	2201      	movs	r2, #1
   bacdc:	4610      	mov	r0, r2
   bacde:	bd30      	pop	{r4, r5, pc}
   bace0:	4283      	cmp	r3, r0
   bace2:	d3f3      	bcc.n	baccc <__mcmp+0x18>
   bace4:	e7fa      	b.n	bacdc <__mcmp+0x28>
   bace6:	f04f 32ff 	mov.w	r2, #4294967295
   bacea:	e7f7      	b.n	bacdc <__mcmp+0x28>

000bacec <__mdiff>:
   bacec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bacf0:	460c      	mov	r4, r1
   bacf2:	4606      	mov	r6, r0
   bacf4:	4611      	mov	r1, r2
   bacf6:	4620      	mov	r0, r4
   bacf8:	4690      	mov	r8, r2
   bacfa:	f7ff ffdb 	bl	bacb4 <__mcmp>
   bacfe:	1e05      	subs	r5, r0, #0
   bad00:	d110      	bne.n	bad24 <__mdiff+0x38>
   bad02:	4629      	mov	r1, r5
   bad04:	4630      	mov	r0, r6
   bad06:	f7ff fd09 	bl	ba71c <_Balloc>
   bad0a:	b930      	cbnz	r0, bad1a <__mdiff+0x2e>
   bad0c:	4b3a      	ldr	r3, [pc, #232]	; (badf8 <__mdiff+0x10c>)
   bad0e:	4602      	mov	r2, r0
   bad10:	f240 2132 	movw	r1, #562	; 0x232
   bad14:	4839      	ldr	r0, [pc, #228]	; (badfc <__mdiff+0x110>)
   bad16:	f7fb fb31 	bl	b637c <__assert_func>
   bad1a:	2301      	movs	r3, #1
   bad1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bad20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bad24:	bfa4      	itt	ge
   bad26:	4643      	movge	r3, r8
   bad28:	46a0      	movge	r8, r4
   bad2a:	4630      	mov	r0, r6
   bad2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bad30:	bfa6      	itte	ge
   bad32:	461c      	movge	r4, r3
   bad34:	2500      	movge	r5, #0
   bad36:	2501      	movlt	r5, #1
   bad38:	f7ff fcf0 	bl	ba71c <_Balloc>
   bad3c:	b920      	cbnz	r0, bad48 <__mdiff+0x5c>
   bad3e:	4b2e      	ldr	r3, [pc, #184]	; (badf8 <__mdiff+0x10c>)
   bad40:	4602      	mov	r2, r0
   bad42:	f44f 7110 	mov.w	r1, #576	; 0x240
   bad46:	e7e5      	b.n	bad14 <__mdiff+0x28>
   bad48:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bad4c:	6926      	ldr	r6, [r4, #16]
   bad4e:	60c5      	str	r5, [r0, #12]
   bad50:	f104 0914 	add.w	r9, r4, #20
   bad54:	f108 0514 	add.w	r5, r8, #20
   bad58:	f100 0e14 	add.w	lr, r0, #20
   bad5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bad60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bad64:	f108 0210 	add.w	r2, r8, #16
   bad68:	46f2      	mov	sl, lr
   bad6a:	2100      	movs	r1, #0
   bad6c:	f859 3b04 	ldr.w	r3, [r9], #4
   bad70:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bad74:	fa1f f883 	uxth.w	r8, r3
   bad78:	fa11 f18b 	uxtah	r1, r1, fp
   bad7c:	0c1b      	lsrs	r3, r3, #16
   bad7e:	eba1 0808 	sub.w	r8, r1, r8
   bad82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bad86:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bad8a:	fa1f f888 	uxth.w	r8, r8
   bad8e:	1419      	asrs	r1, r3, #16
   bad90:	454e      	cmp	r6, r9
   bad92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bad96:	f84a 3b04 	str.w	r3, [sl], #4
   bad9a:	d8e7      	bhi.n	bad6c <__mdiff+0x80>
   bad9c:	1b33      	subs	r3, r6, r4
   bad9e:	3b15      	subs	r3, #21
   bada0:	f023 0303 	bic.w	r3, r3, #3
   bada4:	3304      	adds	r3, #4
   bada6:	3415      	adds	r4, #21
   bada8:	42a6      	cmp	r6, r4
   badaa:	bf38      	it	cc
   badac:	2304      	movcc	r3, #4
   badae:	441d      	add	r5, r3
   badb0:	4473      	add	r3, lr
   badb2:	469e      	mov	lr, r3
   badb4:	462e      	mov	r6, r5
   badb6:	4566      	cmp	r6, ip
   badb8:	d30e      	bcc.n	badd8 <__mdiff+0xec>
   badba:	f10c 0203 	add.w	r2, ip, #3
   badbe:	1b52      	subs	r2, r2, r5
   badc0:	f022 0203 	bic.w	r2, r2, #3
   badc4:	3d03      	subs	r5, #3
   badc6:	45ac      	cmp	ip, r5
   badc8:	bf38      	it	cc
   badca:	2200      	movcc	r2, #0
   badcc:	441a      	add	r2, r3
   badce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   badd2:	b17b      	cbz	r3, badf4 <__mdiff+0x108>
   badd4:	6107      	str	r7, [r0, #16]
   badd6:	e7a3      	b.n	bad20 <__mdiff+0x34>
   badd8:	f856 8b04 	ldr.w	r8, [r6], #4
   baddc:	fa11 f288 	uxtah	r2, r1, r8
   bade0:	1414      	asrs	r4, r2, #16
   bade2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bade6:	b292      	uxth	r2, r2
   bade8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   badec:	f84e 2b04 	str.w	r2, [lr], #4
   badf0:	1421      	asrs	r1, r4, #16
   badf2:	e7e0      	b.n	badb6 <__mdiff+0xca>
   badf4:	3f01      	subs	r7, #1
   badf6:	e7ea      	b.n	badce <__mdiff+0xe2>
   badf8:	000bbd88 	.word	0x000bbd88
   badfc:	000bbe34 	.word	0x000bbe34

000bae00 <__ulp>:
   bae00:	b082      	sub	sp, #8
   bae02:	ed8d 0b00 	vstr	d0, [sp]
   bae06:	9b01      	ldr	r3, [sp, #4]
   bae08:	4912      	ldr	r1, [pc, #72]	; (bae54 <__ulp+0x54>)
   bae0a:	4019      	ands	r1, r3
   bae0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bae10:	2900      	cmp	r1, #0
   bae12:	dd05      	ble.n	bae20 <__ulp+0x20>
   bae14:	2200      	movs	r2, #0
   bae16:	460b      	mov	r3, r1
   bae18:	ec43 2b10 	vmov	d0, r2, r3
   bae1c:	b002      	add	sp, #8
   bae1e:	4770      	bx	lr
   bae20:	4249      	negs	r1, r1
   bae22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bae26:	ea4f 5021 	mov.w	r0, r1, asr #20
   bae2a:	f04f 0200 	mov.w	r2, #0
   bae2e:	f04f 0300 	mov.w	r3, #0
   bae32:	da04      	bge.n	bae3e <__ulp+0x3e>
   bae34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bae38:	fa41 f300 	asr.w	r3, r1, r0
   bae3c:	e7ec      	b.n	bae18 <__ulp+0x18>
   bae3e:	f1a0 0114 	sub.w	r1, r0, #20
   bae42:	291e      	cmp	r1, #30
   bae44:	bfda      	itte	le
   bae46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bae4a:	fa20 f101 	lsrle.w	r1, r0, r1
   bae4e:	2101      	movgt	r1, #1
   bae50:	460a      	mov	r2, r1
   bae52:	e7e1      	b.n	bae18 <__ulp+0x18>
   bae54:	7ff00000 	.word	0x7ff00000

000bae58 <__b2d>:
   bae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bae5a:	6905      	ldr	r5, [r0, #16]
   bae5c:	f100 0714 	add.w	r7, r0, #20
   bae60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bae64:	1f2e      	subs	r6, r5, #4
   bae66:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bae6a:	4620      	mov	r0, r4
   bae6c:	f7ff fd48 	bl	ba900 <__hi0bits>
   bae70:	f1c0 0320 	rsb	r3, r0, #32
   bae74:	280a      	cmp	r0, #10
   bae76:	f8df c07c 	ldr.w	ip, [pc, #124]	; baef4 <__b2d+0x9c>
   bae7a:	600b      	str	r3, [r1, #0]
   bae7c:	dc14      	bgt.n	baea8 <__b2d+0x50>
   bae7e:	f1c0 0e0b 	rsb	lr, r0, #11
   bae82:	fa24 f10e 	lsr.w	r1, r4, lr
   bae86:	42b7      	cmp	r7, r6
   bae88:	ea41 030c 	orr.w	r3, r1, ip
   bae8c:	bf34      	ite	cc
   bae8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bae92:	2100      	movcs	r1, #0
   bae94:	3015      	adds	r0, #21
   bae96:	fa04 f000 	lsl.w	r0, r4, r0
   bae9a:	fa21 f10e 	lsr.w	r1, r1, lr
   bae9e:	ea40 0201 	orr.w	r2, r0, r1
   baea2:	ec43 2b10 	vmov	d0, r2, r3
   baea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   baea8:	42b7      	cmp	r7, r6
   baeaa:	bf3a      	itte	cc
   baeac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   baeb0:	f1a5 0608 	subcc.w	r6, r5, #8
   baeb4:	2100      	movcs	r1, #0
   baeb6:	380b      	subs	r0, #11
   baeb8:	d017      	beq.n	baeea <__b2d+0x92>
   baeba:	f1c0 0c20 	rsb	ip, r0, #32
   baebe:	fa04 f500 	lsl.w	r5, r4, r0
   baec2:	42be      	cmp	r6, r7
   baec4:	fa21 f40c 	lsr.w	r4, r1, ip
   baec8:	ea45 0504 	orr.w	r5, r5, r4
   baecc:	bf8c      	ite	hi
   baece:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   baed2:	2400      	movls	r4, #0
   baed4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   baed8:	fa01 f000 	lsl.w	r0, r1, r0
   baedc:	fa24 f40c 	lsr.w	r4, r4, ip
   baee0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   baee4:	ea40 0204 	orr.w	r2, r0, r4
   baee8:	e7db      	b.n	baea2 <__b2d+0x4a>
   baeea:	ea44 030c 	orr.w	r3, r4, ip
   baeee:	460a      	mov	r2, r1
   baef0:	e7d7      	b.n	baea2 <__b2d+0x4a>
   baef2:	bf00      	nop
   baef4:	3ff00000 	.word	0x3ff00000

000baef8 <__d2b>:
   baef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   baefc:	4689      	mov	r9, r1
   baefe:	2101      	movs	r1, #1
   baf00:	ec57 6b10 	vmov	r6, r7, d0
   baf04:	4690      	mov	r8, r2
   baf06:	f7ff fc09 	bl	ba71c <_Balloc>
   baf0a:	4604      	mov	r4, r0
   baf0c:	b930      	cbnz	r0, baf1c <__d2b+0x24>
   baf0e:	4602      	mov	r2, r0
   baf10:	4b25      	ldr	r3, [pc, #148]	; (bafa8 <__d2b+0xb0>)
   baf12:	4826      	ldr	r0, [pc, #152]	; (bafac <__d2b+0xb4>)
   baf14:	f240 310a 	movw	r1, #778	; 0x30a
   baf18:	f7fb fa30 	bl	b637c <__assert_func>
   baf1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   baf20:	f3c7 0313 	ubfx	r3, r7, #0, #20
   baf24:	bb35      	cbnz	r5, baf74 <__d2b+0x7c>
   baf26:	2e00      	cmp	r6, #0
   baf28:	9301      	str	r3, [sp, #4]
   baf2a:	d028      	beq.n	baf7e <__d2b+0x86>
   baf2c:	4668      	mov	r0, sp
   baf2e:	9600      	str	r6, [sp, #0]
   baf30:	f7ff fd06 	bl	ba940 <__lo0bits>
   baf34:	9900      	ldr	r1, [sp, #0]
   baf36:	b300      	cbz	r0, baf7a <__d2b+0x82>
   baf38:	9a01      	ldr	r2, [sp, #4]
   baf3a:	f1c0 0320 	rsb	r3, r0, #32
   baf3e:	fa02 f303 	lsl.w	r3, r2, r3
   baf42:	430b      	orrs	r3, r1
   baf44:	40c2      	lsrs	r2, r0
   baf46:	6163      	str	r3, [r4, #20]
   baf48:	9201      	str	r2, [sp, #4]
   baf4a:	9b01      	ldr	r3, [sp, #4]
   baf4c:	61a3      	str	r3, [r4, #24]
   baf4e:	2b00      	cmp	r3, #0
   baf50:	bf14      	ite	ne
   baf52:	2202      	movne	r2, #2
   baf54:	2201      	moveq	r2, #1
   baf56:	6122      	str	r2, [r4, #16]
   baf58:	b1d5      	cbz	r5, baf90 <__d2b+0x98>
   baf5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   baf5e:	4405      	add	r5, r0
   baf60:	f8c9 5000 	str.w	r5, [r9]
   baf64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   baf68:	f8c8 0000 	str.w	r0, [r8]
   baf6c:	4620      	mov	r0, r4
   baf6e:	b003      	add	sp, #12
   baf70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   baf74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baf78:	e7d5      	b.n	baf26 <__d2b+0x2e>
   baf7a:	6161      	str	r1, [r4, #20]
   baf7c:	e7e5      	b.n	baf4a <__d2b+0x52>
   baf7e:	a801      	add	r0, sp, #4
   baf80:	f7ff fcde 	bl	ba940 <__lo0bits>
   baf84:	9b01      	ldr	r3, [sp, #4]
   baf86:	6163      	str	r3, [r4, #20]
   baf88:	2201      	movs	r2, #1
   baf8a:	6122      	str	r2, [r4, #16]
   baf8c:	3020      	adds	r0, #32
   baf8e:	e7e3      	b.n	baf58 <__d2b+0x60>
   baf90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   baf94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   baf98:	f8c9 0000 	str.w	r0, [r9]
   baf9c:	6918      	ldr	r0, [r3, #16]
   baf9e:	f7ff fcaf 	bl	ba900 <__hi0bits>
   bafa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bafa6:	e7df      	b.n	baf68 <__d2b+0x70>
   bafa8:	000bbd88 	.word	0x000bbd88
   bafac:	000bbe34 	.word	0x000bbe34

000bafb0 <__ratio>:
   bafb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bafb4:	4688      	mov	r8, r1
   bafb6:	4669      	mov	r1, sp
   bafb8:	4681      	mov	r9, r0
   bafba:	f7ff ff4d 	bl	bae58 <__b2d>
   bafbe:	a901      	add	r1, sp, #4
   bafc0:	4640      	mov	r0, r8
   bafc2:	ec55 4b10 	vmov	r4, r5, d0
   bafc6:	f7ff ff47 	bl	bae58 <__b2d>
   bafca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bafce:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bafd2:	eba3 0c02 	sub.w	ip, r3, r2
   bafd6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bafda:	1a9b      	subs	r3, r3, r2
   bafdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bafe0:	ec51 0b10 	vmov	r0, r1, d0
   bafe4:	2b00      	cmp	r3, #0
   bafe6:	bfd6      	itet	le
   bafe8:	460a      	movle	r2, r1
   bafea:	462a      	movgt	r2, r5
   bafec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   baff0:	468b      	mov	fp, r1
   baff2:	462f      	mov	r7, r5
   baff4:	bfd4      	ite	le
   baff6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   baffa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   baffe:	4620      	mov	r0, r4
   bb000:	ee10 2a10 	vmov	r2, s0
   bb004:	465b      	mov	r3, fp
   bb006:	4639      	mov	r1, r7
   bb008:	f7f9 faf0 	bl	b45ec <__aeabi_ddiv>
   bb00c:	ec41 0b10 	vmov	d0, r0, r1
   bb010:	b003      	add	sp, #12
   bb012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb016 <__copybits>:
   bb016:	3901      	subs	r1, #1
   bb018:	b570      	push	{r4, r5, r6, lr}
   bb01a:	1149      	asrs	r1, r1, #5
   bb01c:	6914      	ldr	r4, [r2, #16]
   bb01e:	3101      	adds	r1, #1
   bb020:	f102 0314 	add.w	r3, r2, #20
   bb024:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb028:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb02c:	1f05      	subs	r5, r0, #4
   bb02e:	42a3      	cmp	r3, r4
   bb030:	d30c      	bcc.n	bb04c <__copybits+0x36>
   bb032:	1aa3      	subs	r3, r4, r2
   bb034:	3b11      	subs	r3, #17
   bb036:	f023 0303 	bic.w	r3, r3, #3
   bb03a:	3211      	adds	r2, #17
   bb03c:	42a2      	cmp	r2, r4
   bb03e:	bf88      	it	hi
   bb040:	2300      	movhi	r3, #0
   bb042:	4418      	add	r0, r3
   bb044:	2300      	movs	r3, #0
   bb046:	4288      	cmp	r0, r1
   bb048:	d305      	bcc.n	bb056 <__copybits+0x40>
   bb04a:	bd70      	pop	{r4, r5, r6, pc}
   bb04c:	f853 6b04 	ldr.w	r6, [r3], #4
   bb050:	f845 6f04 	str.w	r6, [r5, #4]!
   bb054:	e7eb      	b.n	bb02e <__copybits+0x18>
   bb056:	f840 3b04 	str.w	r3, [r0], #4
   bb05a:	e7f4      	b.n	bb046 <__copybits+0x30>

000bb05c <__any_on>:
   bb05c:	f100 0214 	add.w	r2, r0, #20
   bb060:	6900      	ldr	r0, [r0, #16]
   bb062:	114b      	asrs	r3, r1, #5
   bb064:	4298      	cmp	r0, r3
   bb066:	b510      	push	{r4, lr}
   bb068:	db11      	blt.n	bb08e <__any_on+0x32>
   bb06a:	dd0a      	ble.n	bb082 <__any_on+0x26>
   bb06c:	f011 011f 	ands.w	r1, r1, #31
   bb070:	d007      	beq.n	bb082 <__any_on+0x26>
   bb072:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb076:	fa24 f001 	lsr.w	r0, r4, r1
   bb07a:	fa00 f101 	lsl.w	r1, r0, r1
   bb07e:	428c      	cmp	r4, r1
   bb080:	d10b      	bne.n	bb09a <__any_on+0x3e>
   bb082:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb086:	4293      	cmp	r3, r2
   bb088:	d803      	bhi.n	bb092 <__any_on+0x36>
   bb08a:	2000      	movs	r0, #0
   bb08c:	bd10      	pop	{r4, pc}
   bb08e:	4603      	mov	r3, r0
   bb090:	e7f7      	b.n	bb082 <__any_on+0x26>
   bb092:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb096:	2900      	cmp	r1, #0
   bb098:	d0f5      	beq.n	bb086 <__any_on+0x2a>
   bb09a:	2001      	movs	r0, #1
   bb09c:	e7f6      	b.n	bb08c <__any_on+0x30>

000bb09e <_calloc_r>:
   bb09e:	b513      	push	{r0, r1, r4, lr}
   bb0a0:	434a      	muls	r2, r1
   bb0a2:	4611      	mov	r1, r2
   bb0a4:	9201      	str	r2, [sp, #4]
   bb0a6:	f7fb f959 	bl	b635c <_malloc_r>
   bb0aa:	4604      	mov	r4, r0
   bb0ac:	b118      	cbz	r0, bb0b6 <_calloc_r+0x18>
   bb0ae:	9a01      	ldr	r2, [sp, #4]
   bb0b0:	2100      	movs	r1, #0
   bb0b2:	f7fd ffa6 	bl	b9002 <memset>
   bb0b6:	4620      	mov	r0, r4
   bb0b8:	b002      	add	sp, #8
   bb0ba:	bd10      	pop	{r4, pc}
   bb0bc:	0000      	movs	r0, r0
	...

000bb0c0 <nan>:
   bb0c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb0c8 <nan+0x8>
   bb0c4:	4770      	bx	lr
   bb0c6:	bf00      	nop
   bb0c8:	00000000 	.word	0x00000000
   bb0cc:	7ff80000 	.word	0x7ff80000

000bb0d0 <__ascii_wctomb>:
   bb0d0:	b149      	cbz	r1, bb0e6 <__ascii_wctomb+0x16>
   bb0d2:	2aff      	cmp	r2, #255	; 0xff
   bb0d4:	bf85      	ittet	hi
   bb0d6:	238a      	movhi	r3, #138	; 0x8a
   bb0d8:	6003      	strhi	r3, [r0, #0]
   bb0da:	700a      	strbls	r2, [r1, #0]
   bb0dc:	f04f 30ff 	movhi.w	r0, #4294967295
   bb0e0:	bf98      	it	ls
   bb0e2:	2001      	movls	r0, #1
   bb0e4:	4770      	bx	lr
   bb0e6:	4608      	mov	r0, r1
   bb0e8:	4770      	bx	lr

000bb0ea <link_code_end>:
	...

000bb0ec <link_const_data_start>:
   bb0ec:	00000000 	.word	0x00000000
   bb0f0:	34fb0000 	.word	0x34fb0000
   bb0f4:	00805f9b 	.word	0x00805f9b
   bb0f8:	10008000 	.word	0x10008000
	...

000bb104 <dynalib_user>:
   bb104:	000b4a05 000b4a41 000b4a69 000b4a6d     .J..AJ..iJ..mJ..
   bb114:	00000000 74206e69 63206568 626c6c61     ....in the callb
   bb124:	006b6361 63697270 002f7365 000a7325     ack.prices/.%s..
   bb134:	5700212c 69746961 6620676e 4220726f     ,!.Waiting for B
   bb144:	6c63454c 746e6569 6e6f6320 7463656e     LEclient connect
   bb154:	2e6e6f69 6c002e2e 725f776f 65676e61     ion....low_range
   bb164:	756f685f 64255b72 25203a5d 48000a64     _hour[%d]: %d..H
   bb174:	65686769 70207473 65636972 20666f20     ighest price of 
   bb184:	20656874 3a796164 0a662520 776f4c00     the day: %f..Low
   bb194:	20747365 63697270 666f2065 65687420     est price of the
   bb1a4:	79616420 6625203a 6f48000a 20737275      day: %f..Hours 
   bb1b4:	7420666f 64206568 77207961 65726568     of the day where
   bb1c4:	656c6520 69727463 79746963 20736920      electricity is 
   bb1d4:	68746977 61206e69 70656363 20646574     within accepted 
   bb1e4:	676e6172 000a3a65 64323025 206f7420     range:..%02d to 
   bb1f4:	64323025 227b000a 5f726857 61646f74     %02d..{"Whr_toda
   bb204:	5b3a2279 7b002c00 69727022 79736563     y":[.,.{"pricesy
   bb214:	65747365 79616472 005b3a22 6c322e25     esterday":[.%.2l
   bb224:	227b0066 63697270 6f747365 22796164     f.{"pricestoday"
   bb234:	7b005b3a 69727022 74736563 726f6d6f     :[.{"pricestomor
   bb244:	22776f72 7b005b3a 72485722 7365795f     row":[.{"WHr_yes
   bb254:	64726574 3a227961 227b005b 5f724857     terday":[.{"WHr_
   bb264:	61646f74 5b3a2279 69614600 2064656c     today":[.Failed 
   bb274:	61206f74 636f6c6c 20657461 6f6d656d     to allocate memo
   bb284:	66207972 6320726f 5f74736f 74736579     ry for cost_yest
   bb294:	61647265 46000a79 656c6961 6f742064     erday..Failed to
   bb2a4:	6c6c6120 7461636f 656d2065 79726f6d      allocate memory
   bb2b4:	726f6620 736f6320 6f745f74 0a796164      for cost_today.
   bb2c4:	69614600 2064656c 61206f74 636f6c6c     .Failed to alloc
   bb2d4:	20657461 6f6d656d 66207972 6320726f     ate memory for c
   bb2e4:	5f74736f 6f6d6f74 776f7272 654d000a     ost_tomorrow..Me
   bb2f4:	79726f6d 6c6c6120 7461636f 66206465     mory allocated f
   bb304:	7020726f 65636972 25203a73 79622064     or prices: %d by
   bb314:	20736574 6420666f 6c62756f 000a7365     tes of doubles..
   bb324:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   bb334:	6d206574 726f6d65 6f662079 68772072     te memory for wh
   bb344:	646f745f 000a7961 6c696146 74206465     _today..Failed t
   bb354:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
   bb364:	6f662079 68772072 7365795f 64726574     y for wh_yesterd
   bb374:	000a7961 6f6d654d 61207972 636f6c6c     ay..Memory alloc
   bb384:	64657461 726f6620 3a687720 20642520     ated for wh: %d 
   bb394:	65747962 666f2073 746e6920 41000a73     bytes of ints..A
   bb3a4:	72657466 756c2520 207b000a 61657922     fter %lu..{ "yea
   bb3b4:	203a2272 22642522 6d22202c 68746e6f     r": "%d", "month
   bb3c4:	25223a22 22643230 6422202c 3a227961     ":"%02d", "day":
   bb3d4:	30252220 7d226432 706c6500 65736972      "%02d"}.elprise
   bb3e4:	72700072 73656369 72754300 746e6572     r.prices.Current
   bb3f4:	3a484820 203a4d4d 64323025 3230253a      HH:MM: %02d:%02
   bb404:	52000a64 3d495353 47006425 69747465     d..RSSI=%d.Getti
   bb414:	7020676e 65636972 74616420 6f662061     ng price data fo
   bb424:	65792072 72657473 0a796164 756f4300     r yesterday..Cou
   bb434:	3d31746e 6425203a 6547000a 6e697474     nt1=: %d..Gettin
   bb444:	72702067 20656369 61746164 726f6620     g price data for
   bb454:	646f7420 000a7961 6e756f43 3a3d3274      today..Count2=:
   bb464:	0a642520 65685400 69727020 20736563      %d..The prices 
   bb474:	20726f66 6f6d6f74 766f7272 6c697720     for tomorrov wil
   bb484:	6562206c 6c757020 2064656c 25207461     l be pulled at %
   bb494:	30303a64 6e49000a 726f7720 43000a6b     d:00..In work..C
   bb4a4:	70616568 68736928 6f682029 20737275     heap(ish) hours 
   bb4b4:	7420666f 64206568 203a7961 32302500     of the day: .%02
   bb4c4:	6f742064 32302520 00202c64 20776f4c     d to %02d, .Low 
   bb4d4:	63697270 6f682065 00737275 65636552     price hours.Rece
   bb4e4:	64657669 776f7020 672f7265 000a7465     ived power/get..
   bb4f4:	6177227b 3a227474 007d6425 7270227b     {"watt":%d}.{"pr
   bb504:	73656369 61646f74 5b3a2279 2c322c31     icestoday":[1,2,
   bb514:	2c342c33 2c362c35 2c382c37 30312c39     3,4,5,6,7,8,9,10
   bb524:	2c31312c 312c3231 34312c33 2c35312c     ,11,12,13,14,15,
   bb534:	312c3631 38312c37 2c39312c 322c3032     16,17,18,19,20,2
   bb544:	32322c31 2c33322c 7d5d3432 656c6200     1,22,23,24]}.ble
   bb554:	6e6f635f 7463656e 000a6465 74746157     _connected..Watt
   bb564:	776f6e20 4b4b4400 73655920 64726574      now.DKK Yesterd
   bb574:	44007961 54204b4b 7961646f 4b4b4400     ay.DKK Today.DKK
   bb584:	6d6f5420 6f72726f 68570077 6f542072      Tomorrow.Whr To
   bb594:	00796164 20726857 74736559 61647265     day.Whr Yesterda
   bb5a4:	00000079                                y...

000bb5a8 <_ZTV5Timer>:
	...
   bb5b0:	000b4de9 000b4e2d 000b4b05 35323462     .M..-N...K..b425
   bb5c0:	35303430 3462662d 37342d62 622d3634     0405-fb4b-4746-b
   bb5d0:	2d306232 30663339 31313665 36633232     2b0-93f0e61122c6
   bb5e0:	32346200 30343035 62662d34 342d6234     .b4250404-fb4b-4
   bb5f0:	2d363437 30623262 6633392d 31366530     746-b2b0-93f0e61
   bb600:	63323231 34620036 34303532 662d3330     122c6.b4250403-f
   bb610:	2d623462 36343734 6232622d 33392d30     b4b-4746-b2b0-93
   bb620:	36653066 32323131 62003663 30353234     f0e61122c6.b4250
   bb630:	2d323034 62346266 3437342d 32622d36     402-fb4b-4746-b2
   bb640:	392d3062 65306633 32313136 00366332     b0-93f0e61122c6.
   bb650:	35323462 36303430 3462662d 37342d62     b4250406-fb4b-47
   bb660:	622d3634 2d306232 30663339 31313665     46-b2b0-93f0e611
   bb670:	36633232 32346200 30343035 62662d31     22c6.b4250401-fb
   bb680:	342d6234 2d363437 30623262 6633392d     4b-4746-b2b0-93f
   bb690:	31366530 63323231 66330036 35316131     0e61122c6.3f1a15
   bb6a0:	652d3639 2d663765 64623234 6434382d     96-ee7f-42bd-84d
   bb6b0:	31622d31 34393261 65323866 41006663     1-b1a294f82ecf.A
   bb6c0:	6e6f6772 00004d50                       rgonPM..

000bb6c8 <_ZTVN5spark13EthernetClassE>:
	...
   bb6d0:	000b640b 000b6401 000b63f7 000b63ed     .d...d...c...c..
   bb6e0:	000b63e1 000b63d5 000b8a91 000b8a99     .c...c..........
   bb6f0:	000b63c9 000b63c1 000b63b7 000b63ad     .c...c...c...c..
   bb700:	000b8ac9 65737341 6f697472 6961466e     ....AssertionFai
   bb710:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   bb720:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   bb730:	7265766f 20676e69 76726573 73656369     overing services
   bb740:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   bb750:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   bb760:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   bb770:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   bb780:	00454e4f 72656550 76656420 20656369     ONE.Peer device 
   bb790:	6d207369 69737369 0021676e 6c696146     is missing!.Fail
   bb7a0:	74206465 7061206f 646e6570 65657020     ed to append pee
   bb7b0:	65432072 6172746e 6564206c 65636976     r Central device
   bb7c0:	6f43002e 63656e6e 00646574 63736944     ..Connected.Disc
   bb7d0:	656e6e6f 64657463 70754400 6163696c     onnected.Duplica
   bb7e0:	20646574 72616863 65746361 74736972     ted characterist
   bb7f0:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   bb800:	002e6465 6c696146 74206465 7061206f     ed..Failed to ap
   bb810:	646e6570 636f6c20 63206c61 61726168     pend local chara
   bb820:	72657463 69747369 00002e63              cteristic...

000bb82c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb834:	000b671f 000b6781 000b68a1 000b67ab     .g...g...h...g..
   bb844:	000b6721                                !g..

000bb848 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb850:	000b671b 000b678f 000b671d 000b67b1     .g...g...g...g..
   bb860:	000b6741                                Ag..

000bb864 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb86c:	000b6719 000b679d 000b7061 000b67b7     .g...g..ap...g..
   bb87c:	000b6761                                ag..

000bb880 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bb888 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bb888:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bb898 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bb898:	5f9b34fb 80000080 00001000 00000000     .4._............
   bb8a8:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bb8b8:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bb8c8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb8d0:	000b7f85 000b7f8b 000b7fc9 000b7f99     ................
   bb8e0:	000b7f87                                ....

000bb8e4 <_ZTV9IPAddress>:
	...
   bb8ec:	000b84c5 000b84b5 000b84b7              ............

000bb8f8 <_ZTV9USBSerial>:
	...
   bb900:	000b85bb 000b8623 000b85f9 000b7b35     ....#.......5{..
   bb910:	000b85eb 000b85bd 000b85cd 000b861d     ................
   bb920:	000b85dd 000b85b5                       ........

000bb928 <_ZTV11USARTSerial>:
	...
   bb930:	000b870d 000b8779 000b8751 000b7b35     ....y...Q...5{..
   bb940:	000b8721 000b873d 000b872f 000b874b     !...=.../...K...
   bb950:	000b870f 000b8713                       ........

000bb958 <_ZTV7TwoWire>:
	...
   bb960:	000b87d9 000b8823 000b87fb 000b87db     ....#...........
   bb970:	000b8803 000b880b 000b8813 000b881b     ................

000bb980 <_ZTVN5spark9WiFiClassE>:
	...
   bb988:	000b88c7 000b88bd 000b88b3 000b885b     ............[...
   bb998:	000b88a7 000b889b 000b8a91 000b8a99     ................
   bb9a8:	000b888f 000b8887 000b887d 000b8873     ........}...s...
   bb9b8:	000b8ac9                                ....

000bb9bc <_ZTV10WiFiSignal>:
	...
   bb9c4:	000b8855 000b8865 000b8857 000b88d1     U...e...W.......
   bb9d4:	000b8905 000b8931 000b8965              ....1...e...

000bb9e0 <_ZTVN5spark12NetworkClassE>:
	...
   bb9e8:	000b8a51 000b8a5b 000b8a65 000b8a6f     Q...[...e...o...
   bb9f8:	000b8a79 000b8a85 000b8a91 000b8a99     y...............
   bba08:	000b8aa1 000b8aad 000b8ab5 000b8abf     ................
   bba18:	000b8ac9                                ....

000bba1c <_ZSt7nothrow>:
	...

000bba1d <_ZTSSt19_Sp_make_shared_tag>:
   bba1d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bba2d:	5f646572 00676174                        red_tag....

000bba38 <_ZTISt19_Sp_make_shared_tag>:
   bba38:	000bba78 000bba1d                       x.......

000bba40 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bba40:	000bbad8 000bba4c 000bbafc              ....L.......

000bba4c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bba4c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bba5c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bba6c:	00000045                                E...

000bba70 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bba70:	00000000 000bba40 000b8da1 000b8db5     ....@...........
   bba80:	000b8f49 000b8f49 000b8e1f 000b8d61     I...I.......a...
   bba90:	000b8e07 000b8dc9 000b8d93              ............

000bba9c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bba9c:	000bbad8 000bbaa8 000bba40              ........@...

000bbaa8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bbaa8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bbab8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bbac8:	456f666e 00000000                       nfoE....

000bbad0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bbad0:	00000000 000bba9c 000b8e49 000b8e5d     ........I...]...
   bbae0:	000b8f49 000b8f49 000b8e1f 000b8d61     I...I.......a...
   bbaf0:	000b8f1d 000b8ea9 000b8e71              ........q...

000bbafc <_ZTISt9type_info>:
   bbafc:	000bba78 000bbb04                       x.......

000bbb04 <_ZTSSt9type_info>:
   bbb04:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bbb14:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bbb24:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   bbb34:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bbb44:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bbb54:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bbb64:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bbb74:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bbb84:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bbb94:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   bbba4:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000bbbb4 <fpi.1>:
   bbbb4:	00000035 fffffbce 000003cb 00000001     5...............
   bbbc4:	00000000                                ....

000bbbc8 <fpinan.0>:
   bbbc8:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bbbe0 <tinytens>:
   bbbe0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bbbf0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bbc00:	64ac6f43 11680628 746e6d2f 726f772f     Co.d(.h./mnt/wor
   bbc10:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   bbc20:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   bbc30:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   bbc40:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   bbc50:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   bbc60:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   bbc70:	696c2f62 732f6362 6e697274 74732f67     b/libc/string/st
   bbc80:	6b6f7472                                 rtok.c.

000bbc87 <_ctype_>:
   bbc87:	20202000 20202020 28282020 20282828     .         ((((( 
   bbc97:	20202020 20202020 20202020 20202020                     
   bbca7:	10108820 10101010 10101010 10101010      ...............
   bbcb7:	04040410 04040404 10040404 10101010     ................
   bbcc7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bbcd7:	01010101 01010101 01010101 10101010     ................
   bbce7:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bbcf7:	02020202 02020202 02020202 10101010     ................
   bbd07:	00000020 00000000 00000000 00000000      ...............
	...
   bbd87:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bbd97:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bbda7:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bbdb7:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bbdc7:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bbdd7:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bbde7:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bbdf7:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bbe07:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bbe17:	78656874 0000632e                        thex.c...

000bbe20 <_C_numeric_locale>:
   bbe20:	000bb159 000bb499 2003daa4 4f500043     Y.......... C.PO
   bbe30:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bbe40:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bbe50:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bbe60:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bbe70:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bbe80:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bbe90:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bbea0:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bbeb0:	00000063 00000000                       c.......

000bbeb8 <__mprec_bigtens>:
   bbeb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bbec8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bbed8:	7f73bf3c 75154fdd                       <.s..O.u

000bbee0 <__mprec_tens>:
   bbee0:	00000000 3ff00000 00000000 40240000     .......?......$@
   bbef0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bbf00:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bbf10:	00000000 412e8480 00000000 416312d0     .......A......cA
   bbf20:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bbf30:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bbf40:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bbf50:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bbf60:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bbf70:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bbf80:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bbf90:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bbfa0:	79d99db4 44ea7843                       ...yCx.D

000bbfa8 <p05.0>:
   bbfa8:	00000005 00000019 0000007d              ........}...

000bbfb4 <link_const_data_end>:
   bbfb4:	000b5a15 	.word	0x000b5a15
   bbfb8:	000b5d35 	.word	0x000b5d35
   bbfbc:	000b6415 	.word	0x000b6415
   bbfc0:	000b6461 	.word	0x000b6461
   bbfc4:	000b7b25 	.word	0x000b7b25
   bbfc8:	000b7c55 	.word	0x000b7c55
   bbfcc:	000b7e25 	.word	0x000b7e25
   bbfd0:	000b7e41 	.word	0x000b7e41
   bbfd4:	000b8a3d 	.word	0x000b8a3d
   bbfd8:	000b8ba1 	.word	0x000b8ba1
