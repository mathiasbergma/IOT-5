
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/5.1.0/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000aafc  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000beb1c  000beb1c  0000eb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000022c  2003d12c  000beb40  0001d12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001498  2003d358  2003d358  0003d358  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bed6c  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bed70  000bed70  0002ed70  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bed76  000bed76  0002ed76  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bed9a  000bed9a  0002ed9a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0017f055  00000000  00000000  0002ed9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001ae5a  00000000  00000000  001addf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000484a2  00000000  00000000  001c8c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003dc0  00000000  00000000  002110ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c8e0  00000000  00000000  00214eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004794f  00000000  00000000  0022178f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005addb  00000000  00000000  002690de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001448f2  00000000  00000000  002c3eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b808  00000000  00000000  004087ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2uiz>:
   b491c:	004a      	lsls	r2, r1, #1
   b491e:	d211      	bcs.n	b4944 <__aeabi_d2uiz+0x28>
   b4920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4924:	d211      	bcs.n	b494a <__aeabi_d2uiz+0x2e>
   b4926:	d50d      	bpl.n	b4944 <__aeabi_d2uiz+0x28>
   b4928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b492c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4930:	d40e      	bmi.n	b4950 <__aeabi_d2uiz+0x34>
   b4932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b493a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b493e:	fa23 f002 	lsr.w	r0, r3, r2
   b4942:	4770      	bx	lr
   b4944:	f04f 0000 	mov.w	r0, #0
   b4948:	4770      	bx	lr
   b494a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b494e:	d102      	bne.n	b4956 <__aeabi_d2uiz+0x3a>
   b4950:	f04f 30ff 	mov.w	r0, #4294967295
   b4954:	4770      	bx	lr
   b4956:	f04f 0000 	mov.w	r0, #0
   b495a:	4770      	bx	lr

000b495c <__aeabi_f2lz>:
   b495c:	ee07 0a90 	vmov	s15, r0
   b4960:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4968:	d401      	bmi.n	b496e <__aeabi_f2lz+0x12>
   b496a:	f000 b80b 	b.w	b4984 <__aeabi_f2ulz>
   b496e:	eef1 7a67 	vneg.f32	s15, s15
   b4972:	b508      	push	{r3, lr}
   b4974:	ee17 0a90 	vmov	r0, s15
   b4978:	f000 f804 	bl	b4984 <__aeabi_f2ulz>
   b497c:	4240      	negs	r0, r0
   b497e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4982:	bd08      	pop	{r3, pc}

000b4984 <__aeabi_f2ulz>:
   b4984:	b5d0      	push	{r4, r6, r7, lr}
   b4986:	f7ff fcaf 	bl	b42e8 <__aeabi_f2d>
   b498a:	4b0c      	ldr	r3, [pc, #48]	; (b49bc <__aeabi_f2ulz+0x38>)
   b498c:	2200      	movs	r2, #0
   b498e:	4606      	mov	r6, r0
   b4990:	460f      	mov	r7, r1
   b4992:	f7ff fd01 	bl	b4398 <__aeabi_dmul>
   b4996:	f7ff ffc1 	bl	b491c <__aeabi_d2uiz>
   b499a:	4604      	mov	r4, r0
   b499c:	f7ff fc82 	bl	b42a4 <__aeabi_ui2d>
   b49a0:	4b07      	ldr	r3, [pc, #28]	; (b49c0 <__aeabi_f2ulz+0x3c>)
   b49a2:	2200      	movs	r2, #0
   b49a4:	f7ff fcf8 	bl	b4398 <__aeabi_dmul>
   b49a8:	4602      	mov	r2, r0
   b49aa:	460b      	mov	r3, r1
   b49ac:	4630      	mov	r0, r6
   b49ae:	4639      	mov	r1, r7
   b49b0:	f7ff fb3a 	bl	b4028 <__aeabi_dsub>
   b49b4:	f7ff ffb2 	bl	b491c <__aeabi_d2uiz>
   b49b8:	4621      	mov	r1, r4
   b49ba:	bdd0      	pop	{r4, r6, r7, pc}
   b49bc:	3df00000 	.word	0x3df00000
   b49c0:	41f00000 	.word	0x41f00000

000b49c4 <__aeabi_d2ulz>:
   b49c4:	b5d0      	push	{r4, r6, r7, lr}
   b49c6:	4b0c      	ldr	r3, [pc, #48]	; (b49f8 <__aeabi_d2ulz+0x34>)
   b49c8:	2200      	movs	r2, #0
   b49ca:	4606      	mov	r6, r0
   b49cc:	460f      	mov	r7, r1
   b49ce:	f7ff fce3 	bl	b4398 <__aeabi_dmul>
   b49d2:	f7ff ffa3 	bl	b491c <__aeabi_d2uiz>
   b49d6:	4604      	mov	r4, r0
   b49d8:	f7ff fc64 	bl	b42a4 <__aeabi_ui2d>
   b49dc:	4b07      	ldr	r3, [pc, #28]	; (b49fc <__aeabi_d2ulz+0x38>)
   b49de:	2200      	movs	r2, #0
   b49e0:	f7ff fcda 	bl	b4398 <__aeabi_dmul>
   b49e4:	4602      	mov	r2, r0
   b49e6:	460b      	mov	r3, r1
   b49e8:	4630      	mov	r0, r6
   b49ea:	4639      	mov	r1, r7
   b49ec:	f7ff fb1c 	bl	b4028 <__aeabi_dsub>
   b49f0:	f7ff ff94 	bl	b491c <__aeabi_d2uiz>
   b49f4:	4621      	mov	r1, r4
   b49f6:	bdd0      	pop	{r4, r6, r7, pc}
   b49f8:	3df00000 	.word	0x3df00000
   b49fc:	41f00000 	.word	0x41f00000

000b4a00 <strcmp>:
   b4a00:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a04:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a08:	2a01      	cmp	r2, #1
   b4a0a:	bf28      	it	cs
   b4a0c:	429a      	cmpcs	r2, r3
   b4a0e:	d0f7      	beq.n	b4a00 <strcmp>
   b4a10:	1ad0      	subs	r0, r2, r3
   b4a12:	4770      	bx	lr

000b4a14 <strlen>:
   b4a14:	4603      	mov	r3, r0
   b4a16:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a1a:	2a00      	cmp	r2, #0
   b4a1c:	d1fb      	bne.n	b4a16 <strlen+0x2>
   b4a1e:	1a18      	subs	r0, r3, r0
   b4a20:	3801      	subs	r0, #1
   b4a22:	4770      	bx	lr

000b4a24 <__aeabi_d2lz>:
   b4a24:	b538      	push	{r3, r4, r5, lr}
   b4a26:	2200      	movs	r2, #0
   b4a28:	2300      	movs	r3, #0
   b4a2a:	4604      	mov	r4, r0
   b4a2c:	460d      	mov	r5, r1
   b4a2e:	f7ff ff25 	bl	b487c <__aeabi_dcmplt>
   b4a32:	b928      	cbnz	r0, b4a40 <__aeabi_d2lz+0x1c>
   b4a34:	4620      	mov	r0, r4
   b4a36:	4629      	mov	r1, r5
   b4a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a3c:	f7ff bfc2 	b.w	b49c4 <__aeabi_d2ulz>
   b4a40:	4620      	mov	r0, r4
   b4a42:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a46:	f7ff ffbd 	bl	b49c4 <__aeabi_d2ulz>
   b4a4a:	4240      	negs	r0, r0
   b4a4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a50:	bd38      	pop	{r3, r4, r5, pc}
   b4a52:	bf00      	nop

000b4a54 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a54:	4809      	ldr	r0, [pc, #36]	; (b4a7c <module_user_pre_init+0x28>)
   b4a56:	490a      	ldr	r1, [pc, #40]	; (b4a80 <module_user_pre_init+0x2c>)
   b4a58:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a5a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a5c:	d005      	beq.n	b4a6a <module_user_pre_init+0x16>
   b4a5e:	4a09      	ldr	r2, [pc, #36]	; (b4a84 <module_user_pre_init+0x30>)
   b4a60:	4282      	cmp	r2, r0
   b4a62:	d002      	beq.n	b4a6a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a64:	1a12      	subs	r2, r2, r0
   b4a66:	f006 fdba 	bl	bb5de <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a6a:	4807      	ldr	r0, [pc, #28]	; (b4a88 <module_user_pre_init+0x34>)
   b4a6c:	4a07      	ldr	r2, [pc, #28]	; (b4a8c <module_user_pre_init+0x38>)
   b4a6e:	2100      	movs	r1, #0
   b4a70:	1a12      	subs	r2, r2, r0
   b4a72:	f006 fddc 	bl	bb62e <memset>
    return &link_global_data_start;
}
   b4a76:	4801      	ldr	r0, [pc, #4]	; (b4a7c <module_user_pre_init+0x28>)
   b4a78:	bd08      	pop	{r3, pc}
   b4a7a:	bf00      	nop
   b4a7c:	2003d12c 	.word	0x2003d12c
   b4a80:	000beb40 	.word	0x000beb40
   b4a84:	2003d358 	.word	0x2003d358
   b4a88:	2003d358 	.word	0x2003d358
   b4a8c:	2003e7f0 	.word	0x2003e7f0

000b4a90 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a90:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a92:	4e07      	ldr	r6, [pc, #28]	; (b4ab0 <module_user_init+0x20>)
   b4a94:	4c07      	ldr	r4, [pc, #28]	; (b4ab4 <module_user_init+0x24>)
    module_user_init_hook();
   b4a96:	f005 fa4d 	bl	b9f34 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a9a:	1ba4      	subs	r4, r4, r6
   b4a9c:	08a4      	lsrs	r4, r4, #2
   b4a9e:	2500      	movs	r5, #0
   b4aa0:	42ac      	cmp	r4, r5
   b4aa2:	d100      	bne.n	b4aa6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4aa4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4aa6:	f856 3b04 	ldr.w	r3, [r6], #4
   b4aaa:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4aac:	3501      	adds	r5, #1
   b4aae:	e7f7      	b.n	b4aa0 <module_user_init+0x10>
   b4ab0:	000beaec 	.word	0x000beaec
   b4ab4:	000beb1c 	.word	0x000beb1c

000b4ab8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4ab8:	f002 b8be 	b.w	b6c38 <setup>

000b4abc <module_user_loop>:
}

void module_user_loop() {
   b4abc:	b508      	push	{r3, lr}
    loop();
   b4abe:	f002 f95f 	bl	b6d80 <loop>
    _post_loop();
}
   b4ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4ac6:	f005 b9ed 	b.w	b9ea4 <_post_loop>

000b4aca <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4aca:	f003 ba77 	b.w	b7fbc <malloc>

000b4ace <_Znaj>:
   b4ace:	f003 ba75 	b.w	b7fbc <malloc>

000b4ad2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4ad2:	f003 ba7b 	b.w	b7fcc <free>

000b4ad6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ad6:	7800      	ldrb	r0, [r0, #0]
   b4ad8:	fab0 f080 	clz	r0, r0
   b4adc:	0940      	lsrs	r0, r0, #5
   b4ade:	4770      	bx	lr

000b4ae0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ae0:	2301      	movs	r3, #1
   b4ae2:	7003      	strb	r3, [r0, #0]
   b4ae4:	4770      	bx	lr

000b4ae6 <parse_hex4>:
static unsigned parse_hex4(const unsigned char * const input)
{
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
   b4ae6:	2200      	movs	r2, #0
{
   b4ae8:	b510      	push	{r4, lr}
   b4aea:	4604      	mov	r4, r0
    unsigned int h = 0;
   b4aec:	4610      	mov	r0, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
   b4aee:	5ca1      	ldrb	r1, [r4, r2]
   b4af0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   b4af4:	2b09      	cmp	r3, #9
   b4af6:	d80b      	bhi.n	b4b10 <parse_hex4+0x2a>
        {
            h += (unsigned int) input[i] - '0';
   b4af8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
   b4afc:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   b4afe:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   b4b02:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
   b4b06:	bf18      	it	ne
   b4b08:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   b4b0a:	2a04      	cmp	r2, #4
   b4b0c:	d1ef      	bne.n	b4aee <parse_hex4+0x8>
        }
    }

    return h;
}
   b4b0e:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   b4b10:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   b4b14:	2b05      	cmp	r3, #5
   b4b16:	d802      	bhi.n	b4b1e <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   b4b18:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   b4b1c:	e7ee      	b.n	b4afc <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   b4b1e:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   b4b22:	2b05      	cmp	r3, #5
   b4b24:	d802      	bhi.n	b4b2c <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   b4b26:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   b4b2a:	e7e7      	b.n	b4afc <parse_hex4+0x16>
            return 0;
   b4b2c:	2000      	movs	r0, #0
   b4b2e:	e7ee      	b.n	b4b0e <parse_hex4+0x28>

000b4b30 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
   b4b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b4b34:	680a      	ldr	r2, [r1, #0]
   b4b36:	688b      	ldr	r3, [r1, #8]
{
   b4b38:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b4b3a:	1c5d      	adds	r5, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
   b4b3c:	18d0      	adds	r0, r2, r3
   b4b3e:	5cd3      	ldrb	r3, [r2, r3]
   b4b40:	2b22      	cmp	r3, #34	; 0x22
{
   b4b42:	468a      	mov	sl, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b4b44:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   b4b46:	f040 80dd 	bne.w	b4d04 <parse_string+0x1d4>

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   b4b4a:	684c      	ldr	r4, [r1, #4]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b4b4c:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   b4b4e:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   b4b50:	1ab9      	subs	r1, r7, r2
   b4b52:	42a1      	cmp	r1, r4
   b4b54:	f080 80d6 	bcs.w	b4d04 <parse_string+0x1d4>
   b4b58:	7839      	ldrb	r1, [r7, #0]
   b4b5a:	2922      	cmp	r1, #34	; 0x22
   b4b5c:	d10e      	bne.n	b4b7c <parse_string+0x4c>
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   b4b5e:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   b4b62:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   b4b64:	f8da 2010 	ldr.w	r2, [sl, #16]
   b4b68:	4418      	add	r0, r3
   b4b6a:	4790      	blx	r2
        if (output == NULL)
   b4b6c:	4683      	mov	fp, r0
   b4b6e:	2800      	cmp	r0, #0
   b4b70:	f000 80c8 	beq.w	b4d04 <parse_string+0x1d4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   b4b74:	f8df 9198 	ldr.w	r9, [pc, #408]	; b4d10 <parse_string+0x1e0>
   b4b78:	4604      	mov	r4, r0
   b4b7a:	e00f      	b.n	b4b9c <parse_string+0x6c>
            if (input_end[0] == '\\')
   b4b7c:	295c      	cmp	r1, #92	; 0x5c
   b4b7e:	d105      	bne.n	b4b8c <parse_string+0x5c>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   b4b80:	3701      	adds	r7, #1
   b4b82:	1ab9      	subs	r1, r7, r2
   b4b84:	428c      	cmp	r4, r1
   b4b86:	f240 80bd 	bls.w	b4d04 <parse_string+0x1d4>
                skipped_bytes++;
   b4b8a:	3301      	adds	r3, #1
            input_end++;
   b4b8c:	3701      	adds	r7, #1
   b4b8e:	e7df      	b.n	b4b50 <parse_string+0x20>

    output_pointer = output;
    /* loop through the string literal */
    while (input_pointer < input_end)
    {
        if (*input_pointer != '\\')
   b4b90:	782b      	ldrb	r3, [r5, #0]
   b4b92:	2b5c      	cmp	r3, #92	; 0x5c
   b4b94:	d012      	beq.n	b4bbc <parse_string+0x8c>
        {
            *output_pointer++ = *input_pointer++;
   b4b96:	f804 3b01 	strb.w	r3, [r4], #1
   b4b9a:	3501      	adds	r5, #1
    while (input_pointer < input_end)
   b4b9c:	42bd      	cmp	r5, r7
   b4b9e:	d3f7      	bcc.n	b4b90 <parse_string+0x60>
            input_pointer += sequence_length;
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
   b4ba0:	2300      	movs	r3, #0
   b4ba2:	7023      	strb	r3, [r4, #0]

    item->type = cJSON_String;
   b4ba4:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
   b4ba6:	e9c8 3b03 	strd	r3, fp, [r8, #12]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   b4baa:	f8da 3000 	ldr.w	r3, [sl]
   b4bae:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
   b4bb0:	3301      	adds	r3, #1
   b4bb2:	f8ca 3008 	str.w	r3, [sl, #8]

    return true;
   b4bb6:	2001      	movs	r0, #1
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
}
   b4bb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   b4bbc:	1b7a      	subs	r2, r7, r5
   b4bbe:	2a00      	cmp	r2, #0
   b4bc0:	dd0d      	ble.n	b4bde <parse_string+0xae>
            switch (input_pointer[1])
   b4bc2:	786b      	ldrb	r3, [r5, #1]
   b4bc4:	2b75      	cmp	r3, #117	; 0x75
   b4bc6:	d80a      	bhi.n	b4bde <parse_string+0xae>
   b4bc8:	2b6d      	cmp	r3, #109	; 0x6d
   b4bca:	d812      	bhi.n	b4bf2 <parse_string+0xc2>
   b4bcc:	2b62      	cmp	r3, #98	; 0x62
   b4bce:	d02b      	beq.n	b4c28 <parse_string+0xf8>
   b4bd0:	d826      	bhi.n	b4c20 <parse_string+0xf0>
   b4bd2:	2b2f      	cmp	r3, #47	; 0x2f
   b4bd4:	d029      	beq.n	b4c2a <parse_string+0xfa>
   b4bd6:	2b5c      	cmp	r3, #92	; 0x5c
   b4bd8:	d027      	beq.n	b4c2a <parse_string+0xfa>
   b4bda:	2b22      	cmp	r3, #34	; 0x22
   b4bdc:	d025      	beq.n	b4c2a <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   b4bde:	f8da 3014 	ldr.w	r3, [sl, #20]
   b4be2:	4658      	mov	r0, fp
   b4be4:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   b4be6:	f8da 0000 	ldr.w	r0, [sl]
   b4bea:	1a28      	subs	r0, r5, r0
   b4bec:	f8ca 0008 	str.w	r0, [sl, #8]
   b4bf0:	e08b      	b.n	b4d0a <parse_string+0x1da>
   b4bf2:	3b6e      	subs	r3, #110	; 0x6e
   b4bf4:	2b07      	cmp	r3, #7
   b4bf6:	d8f2      	bhi.n	b4bde <parse_string+0xae>
   b4bf8:	a101      	add	r1, pc, #4	; (adr r1, b4c00 <parse_string+0xd0>)
   b4bfa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   b4bfe:	bf00      	nop
   b4c00:	000b4c35 	.word	0x000b4c35
   b4c04:	000b4bdf 	.word	0x000b4bdf
   b4c08:	000b4bdf 	.word	0x000b4bdf
   b4c0c:	000b4bdf 	.word	0x000b4bdf
   b4c10:	000b4c39 	.word	0x000b4c39
   b4c14:	000b4bdf 	.word	0x000b4bdf
   b4c18:	000b4c3d 	.word	0x000b4c3d
   b4c1c:	000b4c41 	.word	0x000b4c41
            switch (input_pointer[1])
   b4c20:	2b66      	cmp	r3, #102	; 0x66
   b4c22:	d1dc      	bne.n	b4bde <parse_string+0xae>
                    *output_pointer++ = '\f';
   b4c24:	230c      	movs	r3, #12
   b4c26:	e000      	b.n	b4c2a <parse_string+0xfa>
                    *output_pointer++ = '\b';
   b4c28:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   b4c2a:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   b4c2e:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   b4c30:	441d      	add	r5, r3
   b4c32:	e7b3      	b.n	b4b9c <parse_string+0x6c>
                    *output_pointer++ = '\n';
   b4c34:	230a      	movs	r3, #10
   b4c36:	e7f8      	b.n	b4c2a <parse_string+0xfa>
                    *output_pointer++ = '\r';
   b4c38:	230d      	movs	r3, #13
   b4c3a:	e7f6      	b.n	b4c2a <parse_string+0xfa>
                    *output_pointer++ = '\t';
   b4c3c:	2309      	movs	r3, #9
   b4c3e:	e7f4      	b.n	b4c2a <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   b4c40:	2a05      	cmp	r2, #5
   b4c42:	ddcc      	ble.n	b4bde <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   b4c44:	1ca8      	adds	r0, r5, #2
   b4c46:	f7ff ff4e 	bl	b4ae6 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   b4c4a:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   b4c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   b4c52:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   b4c54:	d3c3      	bcc.n	b4bde <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   b4c56:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   b4c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b4c5e:	d22d      	bcs.n	b4cbc <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   b4c60:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   b4c62:	1afb      	subs	r3, r7, r3
   b4c64:	2b05      	cmp	r3, #5
   b4c66:	ddba      	ble.n	b4bde <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   b4c68:	79ab      	ldrb	r3, [r5, #6]
   b4c6a:	2b5c      	cmp	r3, #92	; 0x5c
   b4c6c:	d1b7      	bne.n	b4bde <parse_string+0xae>
   b4c6e:	79eb      	ldrb	r3, [r5, #7]
   b4c70:	2b75      	cmp	r3, #117	; 0x75
   b4c72:	d1b4      	bne.n	b4bde <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   b4c74:	f105 0008 	add.w	r0, r5, #8
   b4c78:	f7ff ff35 	bl	b4ae6 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   b4c7c:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   b4c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b4c84:	d2ab      	bcs.n	b4bde <parse_string+0xae>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   b4c86:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   b4c8a:	f3c0 0009 	ubfx	r0, r0, #0, #10
   b4c8e:	4330      	orrs	r0, r6
   b4c90:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
   b4c94:	230c      	movs	r3, #12
        first_byte_mark = 0xF0; /* 11110000 */
   b4c96:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   b4c9a:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b4c9c:	f100 3eff 	add.w	lr, r0, #4294967295
   b4ca0:	fa54 fe8e 	uxtab	lr, r4, lr
   b4ca4:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   b4ca6:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b4ca8:	d124      	bne.n	b4cf4 <parse_string+0x1c4>
    if (utf8_length > 1)
   b4caa:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   b4cac:	bf14      	ite	ne
   b4cae:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   b4cb2:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   b4cb6:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   b4cb8:	4404      	add	r4, r0
                    if (sequence_length == 0)
   b4cba:	e7b9      	b.n	b4c30 <parse_string+0x100>
    if (codepoint < 0x80)
   b4cbc:	287f      	cmp	r0, #127	; 0x7f
   b4cbe:	d90a      	bls.n	b4cd6 <parse_string+0x1a6>
    else if (codepoint < 0x800)
   b4cc0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   b4cc4:	d30c      	bcc.n	b4ce0 <parse_string+0x1b0>
    else if (codepoint < 0x10000)
   b4cc6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   b4cca:	d30e      	bcc.n	b4cea <parse_string+0x1ba>
    else if (codepoint <= 0x10FFFF)
   b4ccc:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   b4cd0:	d285      	bcs.n	b4bde <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   b4cd2:	2306      	movs	r3, #6
   b4cd4:	e7df      	b.n	b4c96 <parse_string+0x166>
   b4cd6:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   b4cd8:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   b4cdc:	2001      	movs	r0, #1
   b4cde:	e7dd      	b.n	b4c9c <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   b4ce0:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   b4ce2:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   b4ce6:	2002      	movs	r0, #2
   b4ce8:	e7d8      	b.n	b4c9c <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   b4cea:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   b4cec:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   b4cf0:	2003      	movs	r0, #3
   b4cf2:	e7d3      	b.n	b4c9c <parse_string+0x16c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   b4cf4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   b4cf8:	f062 017f 	orn	r1, r2, #127	; 0x7f
   b4cfc:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
   b4d00:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b4d02:	e7cf      	b.n	b4ca4 <parse_string+0x174>
    if (input_pointer != NULL)
   b4d04:	2d00      	cmp	r5, #0
   b4d06:	f47f af6e 	bne.w	b4be6 <parse_string+0xb6>
    return false;
   b4d0a:	2000      	movs	r0, #0
   b4d0c:	e754      	b.n	b4bb8 <parse_string+0x88>
   b4d0e:	bf00      	nop
   b4d10:	000ffc00 	.word	0x000ffc00

000b4d14 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
   b4d14:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   b4d16:	b140      	cbz	r0, b4d2a <buffer_skip_whitespace+0x16>
   b4d18:	6801      	ldr	r1, [r0, #0]
   b4d1a:	b171      	cbz	r1, b4d3a <buffer_skip_whitespace+0x26>
    {
        return NULL;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   b4d1c:	6842      	ldr	r2, [r0, #4]
   b4d1e:	6883      	ldr	r3, [r0, #8]
   b4d20:	4293      	cmp	r3, r2
   b4d22:	d206      	bcs.n	b4d32 <buffer_skip_whitespace+0x1e>
   b4d24:	5ccc      	ldrb	r4, [r1, r3]
   b4d26:	2c20      	cmp	r4, #32
   b4d28:	d900      	bls.n	b4d2c <buffer_skip_whitespace+0x18>
    {
        buffer->offset--;
    }

    return buffer;
}
   b4d2a:	bd10      	pop	{r4, pc}
       buffer->offset++;
   b4d2c:	3301      	adds	r3, #1
   b4d2e:	6083      	str	r3, [r0, #8]
   b4d30:	e7f5      	b.n	b4d1e <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   b4d32:	d1fa      	bne.n	b4d2a <buffer_skip_whitespace+0x16>
        buffer->offset--;
   b4d34:	3a01      	subs	r2, #1
   b4d36:	6082      	str	r2, [r0, #8]
   b4d38:	e7f7      	b.n	b4d2a <buffer_skip_whitespace+0x16>
        return NULL;
   b4d3a:	4608      	mov	r0, r1
   b4d3c:	e7f5      	b.n	b4d2a <buffer_skip_whitespace+0x16>

000b4d3e <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
    cJSON *current_child = NULL;

    if (array == NULL)
   b4d3e:	b110      	cbz	r0, b4d46 <get_array_item+0x8>
    {
        return NULL;
    }

    current_child = array->child;
   b4d40:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   b4d42:	b100      	cbz	r0, b4d46 <get_array_item+0x8>
   b4d44:	b901      	cbnz	r1, b4d48 <get_array_item+0xa>
        index--;
        current_child = current_child->next;
    }

    return current_child;
}
   b4d46:	4770      	bx	lr
        current_child = current_child->next;
   b4d48:	6800      	ldr	r0, [r0, #0]
        index--;
   b4d4a:	3901      	subs	r1, #1
        current_child = current_child->next;
   b4d4c:	e7f9      	b.n	b4d42 <get_array_item+0x4>

000b4d4e <update_offset>:
{
   b4d4e:	b538      	push	{r3, r4, r5, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   b4d50:	4604      	mov	r4, r0
   b4d52:	b138      	cbz	r0, b4d64 <update_offset+0x16>
   b4d54:	6800      	ldr	r0, [r0, #0]
   b4d56:	b128      	cbz	r0, b4d64 <update_offset+0x16>
    buffer_pointer = buffer->buffer + buffer->offset;
   b4d58:	68a5      	ldr	r5, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   b4d5a:	4428      	add	r0, r5
   b4d5c:	f7ff fe5a 	bl	b4a14 <strlen>
   b4d60:	4428      	add	r0, r5
   b4d62:	60a0      	str	r0, [r4, #8]
}
   b4d64:	bd38      	pop	{r3, r4, r5, pc}

000b4d66 <ensure>:
{
   b4d66:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   b4d68:	4604      	mov	r4, r0
   b4d6a:	b1b8      	cbz	r0, b4d9c <ensure+0x36>
   b4d6c:	6805      	ldr	r5, [r0, #0]
   b4d6e:	b165      	cbz	r5, b4d8a <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   b4d70:	6843      	ldr	r3, [r0, #4]
   b4d72:	b113      	cbz	r3, b4d7a <ensure+0x14>
   b4d74:	6882      	ldr	r2, [r0, #8]
   b4d76:	4293      	cmp	r3, r2
   b4d78:	d910      	bls.n	b4d9c <ensure+0x36>
    if (needed > INT_MAX)
   b4d7a:	2900      	cmp	r1, #0
   b4d7c:	db0e      	blt.n	b4d9c <ensure+0x36>
    needed += p->offset + 1;
   b4d7e:	68a2      	ldr	r2, [r4, #8]
   b4d80:	1c4e      	adds	r6, r1, #1
   b4d82:	4416      	add	r6, r2
    if (needed <= p->length)
   b4d84:	42b3      	cmp	r3, r6
   b4d86:	d302      	bcc.n	b4d8e <ensure+0x28>
        return p->buffer + p->offset;
   b4d88:	4415      	add	r5, r2
}
   b4d8a:	4628      	mov	r0, r5
   b4d8c:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   b4d8e:	6923      	ldr	r3, [r4, #16]
   b4d90:	b923      	cbnz	r3, b4d9c <ensure+0x36>
    if (needed > (INT_MAX / 2))
   b4d92:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   b4d96:	d303      	bcc.n	b4da0 <ensure+0x3a>
        if (needed <= INT_MAX)
   b4d98:	2e00      	cmp	r6, #0
   b4d9a:	da0f      	bge.n	b4dbc <ensure+0x56>
        return NULL;
   b4d9c:	2500      	movs	r5, #0
   b4d9e:	e7f4      	b.n	b4d8a <ensure+0x24>
        newsize = needed * 2;
   b4da0:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   b4da2:	6a23      	ldr	r3, [r4, #32]
   b4da4:	b16b      	cbz	r3, b4dc2 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   b4da6:	4628      	mov	r0, r5
   b4da8:	4631      	mov	r1, r6
   b4daa:	4798      	blx	r3
        if (newbuffer == NULL)
   b4dac:	4605      	mov	r5, r0
   b4dae:	b9b0      	cbnz	r0, b4dde <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   b4db0:	69e3      	ldr	r3, [r4, #28]
   b4db2:	6820      	ldr	r0, [r4, #0]
   b4db4:	4798      	blx	r3
            p->buffer = NULL;
   b4db6:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   b4dba:	e7e6      	b.n	b4d8a <ensure+0x24>
            newsize = INT_MAX;
   b4dbc:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   b4dc0:	e7ef      	b.n	b4da2 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   b4dc2:	69a3      	ldr	r3, [r4, #24]
   b4dc4:	4630      	mov	r0, r6
   b4dc6:	4798      	blx	r3
        if (!newbuffer)
   b4dc8:	4605      	mov	r5, r0
   b4dca:	2800      	cmp	r0, #0
   b4dcc:	d0f0      	beq.n	b4db0 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   b4dce:	68a2      	ldr	r2, [r4, #8]
   b4dd0:	6821      	ldr	r1, [r4, #0]
   b4dd2:	3201      	adds	r2, #1
   b4dd4:	f006 fc03 	bl	bb5de <memcpy>
        p->hooks.deallocate(p->buffer);
   b4dd8:	69e3      	ldr	r3, [r4, #28]
   b4dda:	6820      	ldr	r0, [r4, #0]
   b4ddc:	4798      	blx	r3
    return newbuffer + p->offset;
   b4dde:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   b4de0:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   b4de4:	441d      	add	r5, r3
   b4de6:	e7d0      	b.n	b4d8a <ensure+0x24>

000b4de8 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
   b4de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dea:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
   b4dec:	4604      	mov	r4, r0
   b4dee:	2800      	cmp	r0, #0
   b4df0:	d034      	beq.n	b4e5c <get_object_item+0x74>
   b4df2:	2900      	cmp	r1, #0
   b4df4:	d031      	beq.n	b4e5a <get_object_item+0x72>
    {
        return NULL;
    }

    current_element = object->child;
   b4df6:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   b4df8:	b9fa      	cbnz	r2, b4e3a <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   b4dfa:	4e19      	ldr	r6, [pc, #100]	; (b4e60 <get_object_item+0x78>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   b4dfc:	b374      	cbz	r4, b4e5c <get_object_item+0x74>
   b4dfe:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   b4e00:	b1c3      	cbz	r3, b4e34 <get_object_item+0x4c>
    if (string1 == string2)
   b4e02:	42ab      	cmp	r3, r5
   b4e04:	d021      	beq.n	b4e4a <get_object_item+0x62>
   b4e06:	f105 3cff 	add.w	ip, r5, #4294967295
   b4e0a:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   b4e0c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   b4e10:	5d8a      	ldrb	r2, [r1, r6]
   b4e12:	f002 0203 	and.w	r2, r2, #3
   b4e16:	2a01      	cmp	r2, #1
   b4e18:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   b4e1c:	5cb0      	ldrb	r0, [r6, r2]
   b4e1e:	f000 0003 	and.w	r0, r0, #3
   b4e22:	460f      	mov	r7, r1
   b4e24:	bf08      	it	eq
   b4e26:	f101 0720 	addeq.w	r7, r1, #32
   b4e2a:	2801      	cmp	r0, #1
   b4e2c:	bf08      	it	eq
   b4e2e:	3220      	addeq	r2, #32
   b4e30:	4297      	cmp	r7, r2
   b4e32:	d00f      	beq.n	b4e54 <get_object_item+0x6c>
        {
            current_element = current_element->next;
   b4e34:	6824      	ldr	r4, [r4, #0]
   b4e36:	e7e1      	b.n	b4dfc <get_object_item+0x14>
            current_element = current_element->next;
   b4e38:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   b4e3a:	b17c      	cbz	r4, b4e5c <get_object_item+0x74>
   b4e3c:	6a21      	ldr	r1, [r4, #32]
   b4e3e:	b121      	cbz	r1, b4e4a <get_object_item+0x62>
   b4e40:	4628      	mov	r0, r5
   b4e42:	f7ff fddd 	bl	b4a00 <strcmp>
   b4e46:	2800      	cmp	r0, #0
   b4e48:	d1f6      	bne.n	b4e38 <get_object_item+0x50>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
   b4e4a:	6a23      	ldr	r3, [r4, #32]
        return NULL;
   b4e4c:	2b00      	cmp	r3, #0
   b4e4e:	bf08      	it	eq
   b4e50:	2400      	moveq	r4, #0
   b4e52:	e003      	b.n	b4e5c <get_object_item+0x74>
        if (*string1 == '\0')
   b4e54:	2900      	cmp	r1, #0
   b4e56:	d1d9      	bne.n	b4e0c <get_object_item+0x24>
   b4e58:	e7f7      	b.n	b4e4a <get_object_item+0x62>
        return NULL;
   b4e5a:	460c      	mov	r4, r1
        return NULL;
    }

    return current_element;
}
   b4e5c:	4620      	mov	r0, r4
   b4e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4e60:	000be64f 	.word	0x000be64f

000b4e64 <add_item_to_array>:

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
    cJSON *child = NULL;

    if ((item == NULL) || (array == NULL))
   b4e64:	b161      	cbz	r1, b4e80 <add_item_to_array+0x1c>
   b4e66:	b160      	cbz	r0, b4e82 <add_item_to_array+0x1e>
    {
        return false;
    }

    child = array->child;
   b4e68:	6883      	ldr	r3, [r0, #8]

    if (child == NULL)
   b4e6a:	b913      	cbnz	r3, b4e72 <add_item_to_array+0xe>
    {
        /* list is empty, start new one */
        array->child = item;
   b4e6c:	6081      	str	r1, [r0, #8]
}
   b4e6e:	2001      	movs	r0, #1
   b4e70:	4770      	bx	lr
    }
    else
    {
        /* append to the end */
        while (child->next)
   b4e72:	461a      	mov	r2, r3
   b4e74:	681b      	ldr	r3, [r3, #0]
   b4e76:	2b00      	cmp	r3, #0
   b4e78:	d1fb      	bne.n	b4e72 <add_item_to_array+0xe>
    prev->next = item;
   b4e7a:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   b4e7c:	604a      	str	r2, [r1, #4]
   b4e7e:	e7f6      	b.n	b4e6e <add_item_to_array+0xa>
        return false;
   b4e80:	4608      	mov	r0, r1
        }
        suffix_object(child, item);
    }

    return true;
}
   b4e82:	4770      	bx	lr

000b4e84 <print_string_ptr>:
{
   b4e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e88:	4606      	mov	r6, r0
    if (output_buffer == NULL)
   b4e8a:	4608      	mov	r0, r1
   b4e8c:	b911      	cbnz	r1, b4e94 <print_string_ptr+0x10>
        return false;
   b4e8e:	2000      	movs	r0, #0
}
   b4e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   b4e94:	b336      	cbz	r6, b4ee4 <print_string_ptr+0x60>
   b4e96:	4f44      	ldr	r7, [pc, #272]	; (b4fa8 <print_string_ptr+0x124>)
   b4e98:	4631      	mov	r1, r6
    size_t escape_characters = 0;
   b4e9a:	f04f 0a00 	mov.w	sl, #0
   b4e9e:	2401      	movs	r4, #1
   b4ea0:	460d      	mov	r5, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   b4ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ea6:	bb3b      	cbnz	r3, b4ef8 <print_string_ptr+0x74>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   b4ea8:	1bad      	subs	r5, r5, r6
   b4eaa:	4455      	add	r5, sl
    output = ensure(output_buffer, output_length + sizeof("\"\""));
   b4eac:	1ce9      	adds	r1, r5, #3
   b4eae:	f7ff ff5a 	bl	b4d66 <ensure>
    if (output == NULL)
   b4eb2:	4607      	mov	r7, r0
   b4eb4:	2800      	cmp	r0, #0
   b4eb6:	d0ea      	beq.n	b4e8e <print_string_ptr+0xa>
    if (escape_characters == 0)
   b4eb8:	f04f 0b22 	mov.w	fp, #34	; 0x22
        memcpy(output + 1, input, output_length);
   b4ebc:	1c44      	adds	r4, r0, #1
        output[output_length + 1] = '\"';
   b4ebe:	f105 0901 	add.w	r9, r5, #1
        output[output_length + 2] = '\0';
   b4ec2:	f105 0802 	add.w	r8, r5, #2
        output[0] = '\"';
   b4ec6:	f880 b000 	strb.w	fp, [r0]
    if (escape_characters == 0)
   b4eca:	f1ba 0f00 	cmp.w	sl, #0
   b4ece:	d129      	bne.n	b4f24 <print_string_ptr+0xa0>
        memcpy(output + 1, input, output_length);
   b4ed0:	462a      	mov	r2, r5
   b4ed2:	4631      	mov	r1, r6
   b4ed4:	4620      	mov	r0, r4
   b4ed6:	f006 fb82 	bl	bb5de <memcpy>
        output[output_length + 1] = '\"';
   b4eda:	f807 b009 	strb.w	fp, [r7, r9]
        output[output_length + 2] = '\0';
   b4ede:	f807 a008 	strb.w	sl, [r7, r8]
        return true;
   b4ee2:	e007      	b.n	b4ef4 <print_string_ptr+0x70>
        output = ensure(output_buffer, sizeof("\"\""));
   b4ee4:	2103      	movs	r1, #3
   b4ee6:	f7ff ff3e 	bl	b4d66 <ensure>
        if (output == NULL)
   b4eea:	2800      	cmp	r0, #0
   b4eec:	d0cf      	beq.n	b4e8e <print_string_ptr+0xa>
        strcpy((char*)output, "\"\"");
   b4eee:	492f      	ldr	r1, [pc, #188]	; (b4fac <print_string_ptr+0x128>)
   b4ef0:	f006 fbe3 	bl	bb6ba <strcpy>
    return true;
   b4ef4:	2001      	movs	r0, #1
   b4ef6:	e7cb      	b.n	b4e90 <print_string_ptr+0xc>
        switch (*input_pointer)
   b4ef8:	2b22      	cmp	r3, #34	; 0x22
   b4efa:	d80b      	bhi.n	b4f14 <print_string_ptr+0x90>
   b4efc:	2b07      	cmp	r3, #7
   b4efe:	d90c      	bls.n	b4f1a <print_string_ptr+0x96>
   b4f00:	f1a3 0208 	sub.w	r2, r3, #8
   b4f04:	b2d2      	uxtb	r2, r2
   b4f06:	fa04 f202 	lsl.w	r2, r4, r2
   b4f0a:	423a      	tst	r2, r7
   b4f0c:	d005      	beq.n	b4f1a <print_string_ptr+0x96>
                escape_characters++;
   b4f0e:	f10a 0a01 	add.w	sl, sl, #1
                break;
   b4f12:	e7c5      	b.n	b4ea0 <print_string_ptr+0x1c>
        switch (*input_pointer)
   b4f14:	2b5c      	cmp	r3, #92	; 0x5c
   b4f16:	d1c3      	bne.n	b4ea0 <print_string_ptr+0x1c>
   b4f18:	e7f9      	b.n	b4f0e <print_string_ptr+0x8a>
                if (*input_pointer < 32)
   b4f1a:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   b4f1c:	bf98      	it	ls
   b4f1e:	f10a 0a05 	addls.w	sl, sl, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   b4f22:	e7bd      	b.n	b4ea0 <print_string_ptr+0x1c>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b4f24:	f8df b088 	ldr.w	fp, [pc, #136]	; b4fb0 <print_string_ptr+0x12c>
   b4f28:	3e01      	subs	r6, #1
            *output_pointer++ = '\\';
   b4f2a:	255c      	movs	r5, #92	; 0x5c
                    *output_pointer = 't';
   b4f2c:	f04f 0a74 	mov.w	sl, #116	; 0x74
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b4f30:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   b4f34:	b92b      	cbnz	r3, b4f42 <print_string_ptr+0xbe>
    output[output_length + 1] = '\"';
   b4f36:	2222      	movs	r2, #34	; 0x22
   b4f38:	f807 2009 	strb.w	r2, [r7, r9]
    output[output_length + 2] = '\0';
   b4f3c:	f807 3008 	strb.w	r3, [r7, r8]
   b4f40:	e7d8      	b.n	b4ef4 <print_string_ptr+0x70>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   b4f42:	2b1f      	cmp	r3, #31
   b4f44:	d907      	bls.n	b4f56 <print_string_ptr+0xd2>
   b4f46:	2b22      	cmp	r3, #34	; 0x22
   b4f48:	d005      	beq.n	b4f56 <print_string_ptr+0xd2>
   b4f4a:	2b5c      	cmp	r3, #92	; 0x5c
   b4f4c:	d003      	beq.n	b4f56 <print_string_ptr+0xd2>
            *output_pointer = *input_pointer;
   b4f4e:	7023      	strb	r3, [r4, #0]
   b4f50:	4620      	mov	r0, r4
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b4f52:	1c44      	adds	r4, r0, #1
   b4f54:	e7ec      	b.n	b4f30 <print_string_ptr+0xac>
            *output_pointer++ = '\\';
   b4f56:	4620      	mov	r0, r4
   b4f58:	f800 5b01 	strb.w	r5, [r0], #1
            switch (*input_pointer)
   b4f5c:	7832      	ldrb	r2, [r6, #0]
   b4f5e:	2a0d      	cmp	r2, #13
   b4f60:	d80a      	bhi.n	b4f78 <print_string_ptr+0xf4>
   b4f62:	2a07      	cmp	r2, #7
   b4f64:	d91a      	bls.n	b4f9c <print_string_ptr+0x118>
   b4f66:	f1a2 0308 	sub.w	r3, r2, #8
   b4f6a:	2b05      	cmp	r3, #5
   b4f6c:	d816      	bhi.n	b4f9c <print_string_ptr+0x118>
   b4f6e:	e8df f003 	tbb	[pc, r3]
   b4f72:	1209      	.short	0x1209
   b4f74:	100c150e 	.word	0x100c150e
   b4f78:	2a22      	cmp	r2, #34	; 0x22
   b4f7a:	d001      	beq.n	b4f80 <print_string_ptr+0xfc>
   b4f7c:	2a5c      	cmp	r2, #92	; 0x5c
   b4f7e:	d10d      	bne.n	b4f9c <print_string_ptr+0x118>
                    *output_pointer = '\"';
   b4f80:	7062      	strb	r2, [r4, #1]
                    break;
   b4f82:	e7e6      	b.n	b4f52 <print_string_ptr+0xce>
                    *output_pointer = 'b';
   b4f84:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 'f';
   b4f86:	7063      	strb	r3, [r4, #1]
                    break;
   b4f88:	e7e3      	b.n	b4f52 <print_string_ptr+0xce>
                    *output_pointer = 'f';
   b4f8a:	2366      	movs	r3, #102	; 0x66
   b4f8c:	e7fb      	b.n	b4f86 <print_string_ptr+0x102>
                    *output_pointer = 'n';
   b4f8e:	236e      	movs	r3, #110	; 0x6e
   b4f90:	e7f9      	b.n	b4f86 <print_string_ptr+0x102>
                    *output_pointer = 'r';
   b4f92:	2372      	movs	r3, #114	; 0x72
   b4f94:	e7f7      	b.n	b4f86 <print_string_ptr+0x102>
                    *output_pointer = 't';
   b4f96:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   b4f9a:	e7da      	b.n	b4f52 <print_string_ptr+0xce>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b4f9c:	4659      	mov	r1, fp
   b4f9e:	f003 f825 	bl	b7fec <sprintf>
                    output_pointer += 4;
   b4fa2:	1d60      	adds	r0, r4, #5
                    break;
   b4fa4:	e7d5      	b.n	b4f52 <print_string_ptr+0xce>
   b4fa6:	bf00      	nop
   b4fa8:	04000037 	.word	0x04000037
   b4fac:	000bd8b0 	.word	0x000bd8b0
   b4fb0:	000bd8b3 	.word	0x000bd8b3

000b4fb4 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   b4fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   b4fb6:	4605      	mov	r5, r0
   b4fb8:	b180      	cbz	r0, b4fdc <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   b4fba:	f7ff fd2b 	bl	b4a14 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   b4fbe:	4b08      	ldr	r3, [pc, #32]	; (b4fe0 <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   b4fc0:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   b4fc2:	681b      	ldr	r3, [r3, #0]
   b4fc4:	9201      	str	r2, [sp, #4]
   b4fc6:	4610      	mov	r0, r2
   b4fc8:	4798      	blx	r3
    if (copy == NULL)
   b4fca:	4604      	mov	r4, r0
   b4fcc:	b118      	cbz	r0, b4fd6 <cJSON_strdup.constprop.0+0x22>
    memcpy(copy, string, length);
   b4fce:	9a01      	ldr	r2, [sp, #4]
   b4fd0:	4629      	mov	r1, r5
   b4fd2:	f006 fb04 	bl	bb5de <memcpy>
}
   b4fd6:	4620      	mov	r0, r4
   b4fd8:	b003      	add	sp, #12
   b4fda:	bd30      	pop	{r4, r5, pc}
        return NULL;
   b4fdc:	4604      	mov	r4, r0
   b4fde:	e7fa      	b.n	b4fd6 <cJSON_strdup.constprop.0+0x22>
   b4fe0:	2003d12c 	.word	0x2003d12c

000b4fe4 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   b4fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4fe6:	460d      	mov	r5, r1
   b4fe8:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   b4fea:	4607      	mov	r7, r0
   b4fec:	b1f0      	cbz	r0, b502c <add_item_to_object.constprop.0+0x48>
   b4fee:	b1e9      	cbz	r1, b502c <add_item_to_object.constprop.0+0x48>
   b4ff0:	b1e2      	cbz	r2, b502c <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   b4ff2:	b193      	cbz	r3, b501a <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   b4ff4:	68d6      	ldr	r6, [r2, #12]
   b4ff6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b4ffa:	68e3      	ldr	r3, [r4, #12]
   b4ffc:	059b      	lsls	r3, r3, #22
   b4ffe:	d404      	bmi.n	b500a <add_item_to_object.constprop.0+0x26>
   b5000:	6a20      	ldr	r0, [r4, #32]
   b5002:	b110      	cbz	r0, b500a <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   b5004:	4b0a      	ldr	r3, [pc, #40]	; (b5030 <add_item_to_object.constprop.0+0x4c>)
   b5006:	685b      	ldr	r3, [r3, #4]
   b5008:	4798      	blx	r3
    }

    item->string = new_key;
   b500a:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   b500c:	60e6      	str	r6, [r4, #12]

    return add_item_to_array(object, item);
   b500e:	4621      	mov	r1, r4
   b5010:	4638      	mov	r0, r7
}
   b5012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   b5016:	f7ff bf25 	b.w	b4e64 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   b501a:	4608      	mov	r0, r1
   b501c:	f7ff ffca 	bl	b4fb4 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   b5020:	4605      	mov	r5, r0
   b5022:	b118      	cbz	r0, b502c <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   b5024:	68e6      	ldr	r6, [r4, #12]
   b5026:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   b502a:	e7e6      	b.n	b4ffa <add_item_to_object.constprop.0+0x16>
}
   b502c:	2000      	movs	r0, #0
   b502e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5030:	2003d12c 	.word	0x2003d12c

000b5034 <print_value>:
{
   b5034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5038:	460c      	mov	r4, r1
   b503a:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   b503c:	4606      	mov	r6, r0
   b503e:	b908      	cbnz	r0, b5044 <print_value+0x10>
    switch ((item->type) & 0xFF)
   b5040:	2500      	movs	r5, #0
   b5042:	e05d      	b.n	b5100 <print_value+0xcc>
    if ((item == NULL) || (output_buffer == NULL))
   b5044:	2900      	cmp	r1, #0
   b5046:	d0fb      	beq.n	b5040 <print_value+0xc>
    switch ((item->type) & 0xFF)
   b5048:	7b05      	ldrb	r5, [r0, #12]
   b504a:	2d10      	cmp	r5, #16
   b504c:	f000 80c1 	beq.w	b51d2 <print_value+0x19e>
   b5050:	dc18      	bgt.n	b5084 <print_value+0x50>
   b5052:	1e6b      	subs	r3, r5, #1
   b5054:	2b07      	cmp	r3, #7
   b5056:	d8f3      	bhi.n	b5040 <print_value+0xc>
   b5058:	2b07      	cmp	r3, #7
   b505a:	d8f1      	bhi.n	b5040 <print_value+0xc>
   b505c:	a201      	add	r2, pc, #4	; (adr r2, b5064 <print_value+0x30>)
   b505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   b5062:	bf00      	nop
   b5064:	000b50ef 	.word	0x000b50ef
   b5068:	000b5109 	.word	0x000b5109
   b506c:	000b5041 	.word	0x000b5041
   b5070:	000b50d9 	.word	0x000b50d9
   b5074:	000b5041 	.word	0x000b5041
   b5078:	000b5041 	.word	0x000b5041
   b507c:	000b5041 	.word	0x000b5041
   b5080:	000b5119 	.word	0x000b5119
   b5084:	2d40      	cmp	r5, #64	; 0x40
   b5086:	f000 80d3 	beq.w	b5230 <print_value+0x1fc>
   b508a:	2d80      	cmp	r5, #128	; 0x80
   b508c:	f000 808d 	beq.w	b51aa <print_value+0x176>
   b5090:	2d20      	cmp	r5, #32
   b5092:	d1d5      	bne.n	b5040 <print_value+0xc>
            return print_array(item, output_buffer);
   b5094:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   b5096:	2101      	movs	r1, #1
   b5098:	4620      	mov	r0, r4
   b509a:	f7ff fe64 	bl	b4d66 <ensure>
    if (output_pointer == NULL)
   b509e:	2800      	cmp	r0, #0
   b50a0:	d0ce      	beq.n	b5040 <print_value+0xc>
    *output_pointer = '[';
   b50a2:	235b      	movs	r3, #91	; 0x5b
   b50a4:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   b50a6:	68a3      	ldr	r3, [r4, #8]
   b50a8:	3301      	adds	r3, #1
   b50aa:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   b50ac:	68e3      	ldr	r3, [r4, #12]
   b50ae:	3301      	adds	r3, #1
   b50b0:	60e3      	str	r3, [r4, #12]
            *output_pointer++ = ',';
   b50b2:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   b50b4:	f04f 0800 	mov.w	r8, #0
    while (current_element != NULL)
   b50b8:	2e00      	cmp	r6, #0
   b50ba:	f040 8090 	bne.w	b51de <print_value+0x1aa>
    output_pointer = ensure(output_buffer, 2);
   b50be:	2102      	movs	r1, #2
   b50c0:	4620      	mov	r0, r4
   b50c2:	f7ff fe50 	bl	b4d66 <ensure>
    if (output_pointer == NULL)
   b50c6:	2800      	cmp	r0, #0
   b50c8:	d0ba      	beq.n	b5040 <print_value+0xc>
    *output_pointer++ = ']';
   b50ca:	235d      	movs	r3, #93	; 0x5d
   b50cc:	7003      	strb	r3, [r0, #0]
    *output_pointer = '\0';
   b50ce:	7046      	strb	r6, [r0, #1]
    output_buffer->depth--;
   b50d0:	68e3      	ldr	r3, [r4, #12]
   b50d2:	3b01      	subs	r3, #1
   b50d4:	60e3      	str	r3, [r4, #12]
   b50d6:	e008      	b.n	b50ea <print_value+0xb6>
            output = ensure(output_buffer, 5);
   b50d8:	2105      	movs	r1, #5
   b50da:	4620      	mov	r0, r4
   b50dc:	f7ff fe43 	bl	b4d66 <ensure>
            if (output == NULL)
   b50e0:	2800      	cmp	r0, #0
   b50e2:	d0ad      	beq.n	b5040 <print_value+0xc>
            strcpy((char*)output, "null");
   b50e4:	49a1      	ldr	r1, [pc, #644]	; (b536c <print_value+0x338>)
            strcpy((char*)output, "true");
   b50e6:	f006 fae8 	bl	bb6ba <strcpy>
    return true;
   b50ea:	2501      	movs	r5, #1
   b50ec:	e008      	b.n	b5100 <print_value+0xcc>
            output = ensure(output_buffer, 6);
   b50ee:	2106      	movs	r1, #6
   b50f0:	4620      	mov	r0, r4
   b50f2:	f7ff fe38 	bl	b4d66 <ensure>
            if (output == NULL)
   b50f6:	2800      	cmp	r0, #0
   b50f8:	d0a2      	beq.n	b5040 <print_value+0xc>
            strcpy((char*)output, "false");
   b50fa:	499d      	ldr	r1, [pc, #628]	; (b5370 <print_value+0x33c>)
   b50fc:	f006 fadd 	bl	bb6ba <strcpy>
}
   b5100:	4628      	mov	r0, r5
   b5102:	b00d      	add	sp, #52	; 0x34
   b5104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            output = ensure(output_buffer, 5);
   b5108:	2105      	movs	r1, #5
   b510a:	4620      	mov	r0, r4
   b510c:	f7ff fe2b 	bl	b4d66 <ensure>
            if (output == NULL)
   b5110:	2800      	cmp	r0, #0
   b5112:	d095      	beq.n	b5040 <print_value+0xc>
            strcpy((char*)output, "true");
   b5114:	4997      	ldr	r1, [pc, #604]	; (b5374 <print_value+0x340>)
   b5116:	e7e6      	b.n	b50e6 <print_value+0xb2>
    double d = item->valuedouble;
   b5118:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    if ((d * 0) != 0)
   b511c:	2200      	movs	r2, #0
   b511e:	2300      	movs	r3, #0
   b5120:	4630      	mov	r0, r6
   b5122:	4639      	mov	r1, r7
   b5124:	f7ff f938 	bl	b4398 <__aeabi_dmul>
   b5128:	2200      	movs	r2, #0
   b512a:	2300      	movs	r3, #0
   b512c:	f7ff fb9c 	bl	b4868 <__aeabi_dcmpeq>
   b5130:	b9b0      	cbnz	r0, b5160 <print_value+0x12c>
        length = sprintf((char*)number_buffer, "null");
   b5132:	498e      	ldr	r1, [pc, #568]	; (b536c <print_value+0x338>)
   b5134:	a805      	add	r0, sp, #20
   b5136:	f006 fac0 	bl	bb6ba <strcpy>
   b513a:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   b513c:	1c69      	adds	r1, r5, #1
   b513e:	4620      	mov	r0, r4
   b5140:	f7ff fe11 	bl	b4d66 <ensure>
    if (output_pointer == NULL)
   b5144:	2800      	cmp	r0, #0
   b5146:	f43f af7b 	beq.w	b5040 <print_value+0xc>
   b514a:	4602      	mov	r2, r0
   b514c:	ab05      	add	r3, sp, #20
   b514e:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   b5150:	4296      	cmp	r6, r2
   b5152:	d125      	bne.n	b51a0 <print_value+0x16c>
    output_pointer[i] = '\0';
   b5154:	2300      	movs	r3, #0
   b5156:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   b5158:	68a0      	ldr	r0, [r4, #8]
   b515a:	4428      	add	r0, r5
   b515c:	60a0      	str	r0, [r4, #8]
    return true;
   b515e:	e7c4      	b.n	b50ea <print_value+0xb6>
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b5160:	4985      	ldr	r1, [pc, #532]	; (b5378 <print_value+0x344>)
   b5162:	4632      	mov	r2, r6
   b5164:	463b      	mov	r3, r7
   b5166:	a805      	add	r0, sp, #20
   b5168:	f002 ff40 	bl	b7fec <sprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b516c:	4983      	ldr	r1, [pc, #524]	; (b537c <print_value+0x348>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b516e:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b5170:	aa02      	add	r2, sp, #8
   b5172:	a805      	add	r0, sp, #20
   b5174:	f002 ff4a 	bl	b800c <sscanf>
   b5178:	2801      	cmp	r0, #1
   b517a:	d106      	bne.n	b518a <print_value+0x156>
   b517c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b5180:	4630      	mov	r0, r6
   b5182:	4639      	mov	r1, r7
   b5184:	f7ff fb70 	bl	b4868 <__aeabi_dcmpeq>
   b5188:	b930      	cbnz	r0, b5198 <print_value+0x164>
            length = sprintf((char*)number_buffer, "%1.17g", d);
   b518a:	497d      	ldr	r1, [pc, #500]	; (b5380 <print_value+0x34c>)
   b518c:	4632      	mov	r2, r6
   b518e:	463b      	mov	r3, r7
   b5190:	a805      	add	r0, sp, #20
   b5192:	f002 ff2b 	bl	b7fec <sprintf>
   b5196:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   b5198:	2d19      	cmp	r5, #25
   b519a:	f63f af51 	bhi.w	b5040 <print_value+0xc>
   b519e:	e7cd      	b.n	b513c <print_value+0x108>
        if (number_buffer[i] == decimal_point)
   b51a0:	f813 1b01 	ldrb.w	r1, [r3], #1
            output_pointer[i] = '.';
   b51a4:	7011      	strb	r1, [r2, #0]
    for (i = 0; i < ((size_t)length); i++)
   b51a6:	3201      	adds	r2, #1
   b51a8:	e7d2      	b.n	b5150 <print_value+0x11c>
            if (item->valuestring == NULL)
   b51aa:	6900      	ldr	r0, [r0, #16]
   b51ac:	2800      	cmp	r0, #0
   b51ae:	f43f af47 	beq.w	b5040 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   b51b2:	f7ff fc2f 	bl	b4a14 <strlen>
   b51b6:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   b51b8:	4611      	mov	r1, r2
   b51ba:	4620      	mov	r0, r4
   b51bc:	9201      	str	r2, [sp, #4]
   b51be:	f7ff fdd2 	bl	b4d66 <ensure>
            if (output == NULL)
   b51c2:	2800      	cmp	r0, #0
   b51c4:	f43f af3c 	beq.w	b5040 <print_value+0xc>
            memcpy(output, item->valuestring, raw_length);
   b51c8:	9a01      	ldr	r2, [sp, #4]
   b51ca:	6931      	ldr	r1, [r6, #16]
   b51cc:	f006 fa07 	bl	bb5de <memcpy>
            return true;
   b51d0:	e78b      	b.n	b50ea <print_value+0xb6>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b51d2:	6900      	ldr	r0, [r0, #16]
}
   b51d4:	b00d      	add	sp, #52	; 0x34
   b51d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b51da:	f7ff be53 	b.w	b4e84 <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   b51de:	4621      	mov	r1, r4
   b51e0:	4630      	mov	r0, r6
   b51e2:	f7ff ff27 	bl	b5034 <print_value>
   b51e6:	2800      	cmp	r0, #0
   b51e8:	f43f af2a 	beq.w	b5040 <print_value+0xc>
        update_offset(output_buffer);
   b51ec:	4620      	mov	r0, r4
   b51ee:	f7ff fdae 	bl	b4d4e <update_offset>
        if (current_element->next)
   b51f2:	6833      	ldr	r3, [r6, #0]
   b51f4:	b1bb      	cbz	r3, b5226 <print_value+0x1f2>
            length = (size_t) (output_buffer->format ? 2 : 1);
   b51f6:	6963      	ldr	r3, [r4, #20]
   b51f8:	2b00      	cmp	r3, #0
   b51fa:	bf14      	ite	ne
   b51fc:	f04f 0902 	movne.w	r9, #2
   b5200:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   b5204:	f109 0101 	add.w	r1, r9, #1
   b5208:	4620      	mov	r0, r4
   b520a:	f7ff fdac 	bl	b4d66 <ensure>
            if (output_pointer == NULL)
   b520e:	2800      	cmp	r0, #0
   b5210:	f43f af16 	beq.w	b5040 <print_value+0xc>
            *output_pointer++ = ',';
   b5214:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   b5216:	6963      	ldr	r3, [r4, #20]
   b5218:	b93b      	cbnz	r3, b522a <print_value+0x1f6>
            *output_pointer++ = ',';
   b521a:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   b521c:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   b5220:	68a3      	ldr	r3, [r4, #8]
   b5222:	444b      	add	r3, r9
   b5224:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   b5226:	6836      	ldr	r6, [r6, #0]
   b5228:	e746      	b.n	b50b8 <print_value+0x84>
                *output_pointer++ = ' ';
   b522a:	1c83      	adds	r3, r0, #2
   b522c:	7045      	strb	r5, [r0, #1]
   b522e:	e7f5      	b.n	b521c <print_value+0x1e8>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   b5230:	694b      	ldr	r3, [r1, #20]
   b5232:	6885      	ldr	r5, [r0, #8]
   b5234:	2b00      	cmp	r3, #0
   b5236:	bf14      	ite	ne
   b5238:	2702      	movne	r7, #2
   b523a:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   b523c:	1c79      	adds	r1, r7, #1
   b523e:	4620      	mov	r0, r4
   b5240:	f7ff fd91 	bl	b4d66 <ensure>
    if (output_pointer == NULL)
   b5244:	2800      	cmp	r0, #0
   b5246:	f43f aefb 	beq.w	b5040 <print_value+0xc>
    *output_pointer++ = '{';
   b524a:	237b      	movs	r3, #123	; 0x7b
   b524c:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   b524e:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   b5250:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   b5252:	3201      	adds	r2, #1
   b5254:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   b5256:	b10b      	cbz	r3, b525c <print_value+0x228>
        *output_pointer++ = '\n';
   b5258:	230a      	movs	r3, #10
   b525a:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   b525c:	68a3      	ldr	r3, [r4, #8]
   b525e:	443b      	add	r3, r7
   b5260:	60a3      	str	r3, [r4, #8]
                *output_pointer++ = '\t';
   b5262:	2609      	movs	r6, #9
        *output_pointer++ = ':';
   b5264:	273a      	movs	r7, #58	; 0x3a
        if (output_buffer->format)
   b5266:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   b5268:	b995      	cbnz	r5, b5290 <print_value+0x25c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b526a:	2b00      	cmp	r3, #0
   b526c:	d070      	beq.n	b5350 <print_value+0x31c>
   b526e:	68e1      	ldr	r1, [r4, #12]
   b5270:	3101      	adds	r1, #1
   b5272:	4620      	mov	r0, r4
   b5274:	f7ff fd77 	bl	b4d66 <ensure>
    if (output_pointer == NULL)
   b5278:	2800      	cmp	r0, #0
   b527a:	f43f aee1 	beq.w	b5040 <print_value+0xc>
    if (output_buffer->format)
   b527e:	6963      	ldr	r3, [r4, #20]
   b5280:	2b00      	cmp	r3, #0
   b5282:	d16f      	bne.n	b5364 <print_value+0x330>
   b5284:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   b5286:	227d      	movs	r2, #125	; 0x7d
   b5288:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   b528a:	2200      	movs	r2, #0
   b528c:	705a      	strb	r2, [r3, #1]
   b528e:	e71f      	b.n	b50d0 <print_value+0x9c>
        if (output_buffer->format)
   b5290:	b173      	cbz	r3, b52b0 <print_value+0x27c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   b5292:	68e1      	ldr	r1, [r4, #12]
   b5294:	4620      	mov	r0, r4
   b5296:	f7ff fd66 	bl	b4d66 <ensure>
            if (output_pointer == NULL)
   b529a:	2800      	cmp	r0, #0
   b529c:	f43f aed0 	beq.w	b5040 <print_value+0xc>
   b52a0:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   b52a2:	68e1      	ldr	r1, [r4, #12]
   b52a4:	1a13      	subs	r3, r2, r0
   b52a6:	4299      	cmp	r1, r3
   b52a8:	d84f      	bhi.n	b534a <print_value+0x316>
            output_buffer->offset += output_buffer->depth;
   b52aa:	68a3      	ldr	r3, [r4, #8]
   b52ac:	440b      	add	r3, r1
   b52ae:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   b52b0:	6a28      	ldr	r0, [r5, #32]
   b52b2:	4621      	mov	r1, r4
   b52b4:	f7ff fde6 	bl	b4e84 <print_string_ptr>
   b52b8:	2800      	cmp	r0, #0
   b52ba:	f43f aec1 	beq.w	b5040 <print_value+0xc>
        update_offset(output_buffer);
   b52be:	4620      	mov	r0, r4
   b52c0:	f7ff fd45 	bl	b4d4e <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   b52c4:	6963      	ldr	r3, [r4, #20]
   b52c6:	2b00      	cmp	r3, #0
   b52c8:	bf14      	ite	ne
   b52ca:	f04f 0802 	movne.w	r8, #2
   b52ce:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   b52d2:	4641      	mov	r1, r8
   b52d4:	4620      	mov	r0, r4
   b52d6:	f7ff fd46 	bl	b4d66 <ensure>
        if (output_pointer == NULL)
   b52da:	2800      	cmp	r0, #0
   b52dc:	f43f aeb0 	beq.w	b5040 <print_value+0xc>
        *output_pointer++ = ':';
   b52e0:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   b52e2:	6963      	ldr	r3, [r4, #20]
   b52e4:	b103      	cbz	r3, b52e8 <print_value+0x2b4>
            *output_pointer++ = '\t';
   b52e6:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   b52e8:	68a3      	ldr	r3, [r4, #8]
   b52ea:	4443      	add	r3, r8
   b52ec:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   b52ee:	4621      	mov	r1, r4
   b52f0:	4628      	mov	r0, r5
   b52f2:	f7ff fe9f 	bl	b5034 <print_value>
   b52f6:	2800      	cmp	r0, #0
   b52f8:	f43f aea2 	beq.w	b5040 <print_value+0xc>
        update_offset(output_buffer);
   b52fc:	4620      	mov	r0, r4
   b52fe:	f7ff fd26 	bl	b4d4e <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   b5302:	682b      	ldr	r3, [r5, #0]
   b5304:	6962      	ldr	r2, [r4, #20]
   b5306:	f1b3 0800 	subs.w	r8, r3, #0
   b530a:	bf18      	it	ne
   b530c:	f04f 0801 	movne.w	r8, #1
   b5310:	2a00      	cmp	r2, #0
   b5312:	bf18      	it	ne
   b5314:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   b5318:	f108 0101 	add.w	r1, r8, #1
   b531c:	4620      	mov	r0, r4
   b531e:	f7ff fd22 	bl	b4d66 <ensure>
        if (output_pointer == NULL)
   b5322:	2800      	cmp	r0, #0
   b5324:	f43f ae8c 	beq.w	b5040 <print_value+0xc>
        if (current_item->next)
   b5328:	682b      	ldr	r3, [r5, #0]
   b532a:	b113      	cbz	r3, b5332 <print_value+0x2fe>
            *output_pointer++ = ',';
   b532c:	232c      	movs	r3, #44	; 0x2c
   b532e:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   b5332:	6963      	ldr	r3, [r4, #20]
   b5334:	b113      	cbz	r3, b533c <print_value+0x308>
            *output_pointer++ = '\n';
   b5336:	230a      	movs	r3, #10
   b5338:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   b533c:	2300      	movs	r3, #0
   b533e:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   b5340:	68a3      	ldr	r3, [r4, #8]
   b5342:	4443      	add	r3, r8
   b5344:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   b5346:	682d      	ldr	r5, [r5, #0]
   b5348:	e78d      	b.n	b5266 <print_value+0x232>
                *output_pointer++ = '\t';
   b534a:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   b534e:	e7a8      	b.n	b52a2 <print_value+0x26e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b5350:	2102      	movs	r1, #2
   b5352:	e78e      	b.n	b5272 <print_value+0x23e>
            *output_pointer++ = '\t';
   b5354:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   b5358:	68e2      	ldr	r2, [r4, #12]
   b535a:	1a19      	subs	r1, r3, r0
   b535c:	3a01      	subs	r2, #1
   b535e:	4291      	cmp	r1, r2
   b5360:	d3f8      	bcc.n	b5354 <print_value+0x320>
   b5362:	e790      	b.n	b5286 <print_value+0x252>
   b5364:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   b5366:	2509      	movs	r5, #9
   b5368:	e7f6      	b.n	b5358 <print_value+0x324>
   b536a:	bf00      	nop
   b536c:	000bd8b9 	.word	0x000bd8b9
   b5370:	000be169 	.word	0x000be169
   b5374:	000bd8be 	.word	0x000bd8be
   b5378:	000bd8c3 	.word	0x000bd8c3
   b537c:	000bd8ca 	.word	0x000bd8ca
   b5380:	000bd8ce 	.word	0x000bd8ce

000b5384 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5384:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5386:	4d23      	ldr	r5, [pc, #140]	; (b5414 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5388:	b08a      	sub	sp, #40	; 0x28
   b538a:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   b538c:	2224      	movs	r2, #36	; 0x24
   b538e:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5390:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   b5392:	a801      	add	r0, sp, #4
   b5394:	f006 f94b 	bl	bb62e <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5398:	682b      	ldr	r3, [r5, #0]
   b539a:	f44f 7080 	mov.w	r0, #256	; 0x100
   b539e:	4798      	blx	r3
    buffer->length = default_buffer_size;
   b53a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b53a4:	4603      	mov	r3, r0
   b53a6:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   b53a8:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   b53aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    buffer->format = format;
   b53ae:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   b53b0:	ae0a      	add	r6, sp, #40	; 0x28
   b53b2:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   b53b6:	b17b      	cbz	r3, b53d8 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   b53b8:	a901      	add	r1, sp, #4
   b53ba:	4620      	mov	r0, r4
   b53bc:	f7ff fe3a 	bl	b5034 <print_value>
   b53c0:	b150      	cbz	r0, b53d8 <print.constprop.0+0x54>
    update_offset(buffer);
   b53c2:	a801      	add	r0, sp, #4
   b53c4:	f7ff fcc3 	bl	b4d4e <update_offset>
    if (hooks->reallocate != NULL)
   b53c8:	68ae      	ldr	r6, [r5, #8]
   b53ca:	9903      	ldr	r1, [sp, #12]
   b53cc:	b15e      	cbz	r6, b53e6 <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   b53ce:	9801      	ldr	r0, [sp, #4]
   b53d0:	3101      	adds	r1, #1
   b53d2:	47b0      	blx	r6
        if (printed == NULL) {
   b53d4:	4604      	mov	r4, r0
   b53d6:	b9d0      	cbnz	r0, b540e <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   b53d8:	9c01      	ldr	r4, [sp, #4]
   b53da:	b1c4      	cbz	r4, b540e <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   b53dc:	4620      	mov	r0, r4
   b53de:	686b      	ldr	r3, [r5, #4]
   b53e0:	4798      	blx	r3
    return NULL;
   b53e2:	2400      	movs	r4, #0
   b53e4:	e013      	b.n	b540e <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   b53e6:	682b      	ldr	r3, [r5, #0]
   b53e8:	1c48      	adds	r0, r1, #1
   b53ea:	4798      	blx	r3
        if (printed == NULL)
   b53ec:	4604      	mov	r4, r0
   b53ee:	2800      	cmp	r0, #0
   b53f0:	d0f2      	beq.n	b53d8 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   b53f2:	9a03      	ldr	r2, [sp, #12]
   b53f4:	9b02      	ldr	r3, [sp, #8]
   b53f6:	9901      	ldr	r1, [sp, #4]
   b53f8:	3201      	adds	r2, #1
   b53fa:	429a      	cmp	r2, r3
   b53fc:	bf28      	it	cs
   b53fe:	461a      	movcs	r2, r3
   b5400:	f006 f8ed 	bl	bb5de <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   b5404:	9b03      	ldr	r3, [sp, #12]
   b5406:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   b5408:	9801      	ldr	r0, [sp, #4]
   b540a:	686b      	ldr	r3, [r5, #4]
   b540c:	4798      	blx	r3
}
   b540e:	4620      	mov	r0, r4
   b5410:	b00a      	add	sp, #40	; 0x28
   b5412:	bd70      	pop	{r4, r5, r6, pc}
   b5414:	2003d12c 	.word	0x2003d12c

000b5418 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   b5418:	b510      	push	{r4, lr}
   b541a:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   b541c:	2028      	movs	r0, #40	; 0x28
   b541e:	4798      	blx	r3
    if (node)
   b5420:	4604      	mov	r4, r0
   b5422:	b118      	cbz	r0, b542c <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
   b5424:	2228      	movs	r2, #40	; 0x28
   b5426:	2100      	movs	r1, #0
   b5428:	f006 f901 	bl	bb62e <memset>
}
   b542c:	4620      	mov	r0, r4
   b542e:	bd10      	pop	{r4, pc}

000b5430 <cJSON_Delete>:
{
   b5430:	b570      	push	{r4, r5, r6, lr}
   b5432:	4d10      	ldr	r5, [pc, #64]	; (b5474 <cJSON_Delete+0x44>)
   b5434:	4604      	mov	r4, r0
    while (item != NULL)
   b5436:	b904      	cbnz	r4, b543a <cJSON_Delete+0xa>
}
   b5438:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b543a:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   b543c:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b543e:	05d9      	lsls	r1, r3, #23
   b5440:	d403      	bmi.n	b544a <cJSON_Delete+0x1a>
   b5442:	68a0      	ldr	r0, [r4, #8]
   b5444:	b968      	cbnz	r0, b5462 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b5446:	6920      	ldr	r0, [r4, #16]
   b5448:	b988      	cbnz	r0, b546e <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b544a:	68e3      	ldr	r3, [r4, #12]
   b544c:	059b      	lsls	r3, r3, #22
   b544e:	d403      	bmi.n	b5458 <cJSON_Delete+0x28>
   b5450:	6a20      	ldr	r0, [r4, #32]
   b5452:	b108      	cbz	r0, b5458 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   b5454:	686b      	ldr	r3, [r5, #4]
   b5456:	4798      	blx	r3
        global_hooks.deallocate(item);
   b5458:	4620      	mov	r0, r4
   b545a:	686b      	ldr	r3, [r5, #4]
   b545c:	4798      	blx	r3
        item = next;
   b545e:	4634      	mov	r4, r6
   b5460:	e7e9      	b.n	b5436 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   b5462:	f7ff ffe5 	bl	b5430 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b5466:	68e3      	ldr	r3, [r4, #12]
   b5468:	05da      	lsls	r2, r3, #23
   b546a:	d5ec      	bpl.n	b5446 <cJSON_Delete+0x16>
   b546c:	e7ed      	b.n	b544a <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   b546e:	686b      	ldr	r3, [r5, #4]
   b5470:	4798      	blx	r3
   b5472:	e7ea      	b.n	b544a <cJSON_Delete+0x1a>
   b5474:	2003d12c 	.word	0x2003d12c

000b5478 <parse_value>:
{
   b5478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b547c:	4606      	mov	r6, r0
   b547e:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   b5480:	460c      	mov	r4, r1
   b5482:	b909      	cbnz	r1, b5488 <parse_value+0x10>
    return false;
   b5484:	2000      	movs	r0, #0
   b5486:	e023      	b.n	b54d0 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   b5488:	680f      	ldr	r7, [r1, #0]
   b548a:	2f00      	cmp	r7, #0
   b548c:	d0fa      	beq.n	b5484 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   b548e:	688d      	ldr	r5, [r1, #8]
   b5490:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b5494:	f105 0904 	add.w	r9, r5, #4
   b5498:	45c1      	cmp	r9, r8
   b549a:	d80b      	bhi.n	b54b4 <parse_value+0x3c>
   b549c:	4990      	ldr	r1, [pc, #576]	; (b56e0 <parse_value+0x268>)
   b549e:	2204      	movs	r2, #4
   b54a0:	1978      	adds	r0, r7, r5
   b54a2:	f006 f930 	bl	bb706 <strncmp>
   b54a6:	b928      	cbnz	r0, b54b4 <parse_value+0x3c>
        item->type = cJSON_NULL;
   b54a8:	2304      	movs	r3, #4
   b54aa:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   b54ac:	68a3      	ldr	r3, [r4, #8]
   b54ae:	3304      	adds	r3, #4
    input_buffer->offset++;
   b54b0:	60a3      	str	r3, [r4, #8]
   b54b2:	e082      	b.n	b55ba <parse_value+0x142>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   b54b4:	1d6b      	adds	r3, r5, #5
   b54b6:	4598      	cmp	r8, r3
   b54b8:	d30d      	bcc.n	b54d6 <parse_value+0x5e>
   b54ba:	498a      	ldr	r1, [pc, #552]	; (b56e4 <parse_value+0x26c>)
   b54bc:	2205      	movs	r2, #5
   b54be:	1978      	adds	r0, r7, r5
   b54c0:	f006 f921 	bl	bb706 <strncmp>
   b54c4:	b938      	cbnz	r0, b54d6 <parse_value+0x5e>
        item->type = cJSON_False;
   b54c6:	2001      	movs	r0, #1
   b54c8:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   b54ca:	68a2      	ldr	r2, [r4, #8]
   b54cc:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   b54ce:	60a2      	str	r2, [r4, #8]
}
   b54d0:	b012      	add	sp, #72	; 0x48
   b54d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   b54d6:	45c1      	cmp	r9, r8
   b54d8:	d80c      	bhi.n	b54f4 <parse_value+0x7c>
   b54da:	4983      	ldr	r1, [pc, #524]	; (b56e8 <parse_value+0x270>)
   b54dc:	2204      	movs	r2, #4
   b54de:	1978      	adds	r0, r7, r5
   b54e0:	f006 f911 	bl	bb706 <strncmp>
   b54e4:	b930      	cbnz	r0, b54f4 <parse_value+0x7c>
        item->type = cJSON_True;
   b54e6:	2302      	movs	r3, #2
        item->valueint = 1;
   b54e8:	2001      	movs	r0, #1
        item->type = cJSON_True;
   b54ea:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   b54ec:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   b54ee:	68a2      	ldr	r2, [r4, #8]
   b54f0:	3204      	adds	r2, #4
   b54f2:	e7ec      	b.n	b54ce <parse_value+0x56>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   b54f4:	4545      	cmp	r5, r8
   b54f6:	d2c5      	bcs.n	b5484 <parse_value+0xc>
   b54f8:	5d7b      	ldrb	r3, [r7, r5]
   b54fa:	2b22      	cmp	r3, #34	; 0x22
   b54fc:	eb07 0005 	add.w	r0, r7, r5
   b5500:	d106      	bne.n	b5510 <parse_value+0x98>
        return parse_string(item, input_buffer);
   b5502:	4621      	mov	r1, r4
   b5504:	4630      	mov	r0, r6
}
   b5506:	b012      	add	sp, #72	; 0x48
   b5508:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
   b550c:	f7ff bb10 	b.w	b4b30 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   b5510:	2b2d      	cmp	r3, #45	; 0x2d
   b5512:	d003      	beq.n	b551c <parse_value+0xa4>
   b5514:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b5518:	2a09      	cmp	r2, #9
   b551a:	d863      	bhi.n	b55e4 <parse_value+0x16c>
    unsigned char *after_end = NULL;
   b551c:	2300      	movs	r3, #0
   b551e:	aa02      	add	r2, sp, #8
   b5520:	9301      	str	r3, [sp, #4]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   b5522:	eba8 0505 	sub.w	r5, r8, r5
   b5526:	4617      	mov	r7, r2
                number_c_string[i] = decimal_point;
   b5528:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
        switch (buffer_at_offset(input_buffer)[i])
   b552c:	f810 1b01 	ldrb.w	r1, [r0], #1
   b5530:	2939      	cmp	r1, #57	; 0x39
   b5532:	d810      	bhi.n	b5556 <parse_value+0xde>
   b5534:	292a      	cmp	r1, #42	; 0x2a
   b5536:	d91b      	bls.n	b5570 <parse_value+0xf8>
   b5538:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
   b553c:	f1bc 0f0e 	cmp.w	ip, #14
   b5540:	d816      	bhi.n	b5570 <parse_value+0xf8>
   b5542:	e8df f00c 	tbb	[pc, ip]
   b5546:	150d      	.short	0x150d
   b5548:	0d153c0d 	.word	0x0d153c0d
   b554c:	0d0d0d0d 	.word	0x0d0d0d0d
   b5550:	0d0d0d0d 	.word	0x0d0d0d0d
   b5554:	0d          	.byte	0x0d
   b5555:	00          	.byte	0x00
   b5556:	f001 0cdf 	and.w	ip, r1, #223	; 0xdf
   b555a:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   b555e:	d107      	bne.n	b5570 <parse_value+0xf8>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   b5560:	7011      	strb	r1, [r2, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   b5562:	3301      	adds	r3, #1
   b5564:	2b3f      	cmp	r3, #63	; 0x3f
   b5566:	f102 0201 	add.w	r2, r2, #1
   b556a:	d001      	beq.n	b5570 <parse_value+0xf8>
   b556c:	42ab      	cmp	r3, r5
   b556e:	d1dd      	bne.n	b552c <parse_value+0xb4>
    number_c_string[i] = '\0';
   b5570:	aa12      	add	r2, sp, #72	; 0x48
   b5572:	4413      	add	r3, r2
   b5574:	2500      	movs	r5, #0
   b5576:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   b557a:	a901      	add	r1, sp, #4
   b557c:	4638      	mov	r0, r7
   b557e:	f006 ff2d 	bl	bc3dc <strtod>
    if (number_c_string == after_end)
   b5582:	f8dd a004 	ldr.w	sl, [sp, #4]
   b5586:	45ba      	cmp	sl, r7
    number = strtod((const char*)number_c_string, (char**)&after_end);
   b5588:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   b558c:	f43f af7a 	beq.w	b5484 <parse_value+0xc>
    item->valuedouble = number;
   b5590:	ed86 0b06 	vstr	d0, [r6, #24]
    if (number >= INT_MAX)
   b5594:	a350      	add	r3, pc, #320	; (adr r3, b56d8 <parse_value+0x260>)
   b5596:	e9d3 2300 	ldrd	r2, r3, [r3]
   b559a:	ee10 0a10 	vmov	r0, s0
   b559e:	4649      	mov	r1, r9
   b55a0:	f7ff f980 	bl	b48a4 <__aeabi_dcmpge>
   b55a4:	b170      	cbz	r0, b55c4 <parse_value+0x14c>
        item->valueint = INT_MAX;
   b55a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   b55aa:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   b55ac:	2308      	movs	r3, #8
   b55ae:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   b55b0:	ebaa 0a07 	sub.w	sl, sl, r7
   b55b4:	68a7      	ldr	r7, [r4, #8]
   b55b6:	4457      	add	r7, sl
   b55b8:	60a7      	str	r7, [r4, #8]
    return true;
   b55ba:	2001      	movs	r0, #1
   b55bc:	e788      	b.n	b54d0 <parse_value+0x58>
                number_c_string[i] = decimal_point;
   b55be:	f882 e000 	strb.w	lr, [r2]
                break;
   b55c2:	e7ce      	b.n	b5562 <parse_value+0xea>
    else if (number <= (double)INT_MIN)
   b55c4:	4b49      	ldr	r3, [pc, #292]	; (b56ec <parse_value+0x274>)
   b55c6:	2200      	movs	r2, #0
   b55c8:	4640      	mov	r0, r8
   b55ca:	4649      	mov	r1, r9
   b55cc:	f7ff f960 	bl	b4890 <__aeabi_dcmple>
   b55d0:	b110      	cbz	r0, b55d8 <parse_value+0x160>
        item->valueint = INT_MIN;
   b55d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   b55d6:	e7e8      	b.n	b55aa <parse_value+0x132>
        item->valueint = (int)number;
   b55d8:	4640      	mov	r0, r8
   b55da:	4649      	mov	r1, r9
   b55dc:	f7ff f976 	bl	b48cc <__aeabi_d2iz>
   b55e0:	6170      	str	r0, [r6, #20]
   b55e2:	e7e3      	b.n	b55ac <parse_value+0x134>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   b55e4:	2b5b      	cmp	r3, #91	; 0x5b
   b55e6:	d150      	bne.n	b568a <parse_value+0x212>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   b55e8:	68e3      	ldr	r3, [r4, #12]
   b55ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b55ee:	f4bf af49 	bcs.w	b5484 <parse_value+0xc>
    input_buffer->depth++;
   b55f2:	3301      	adds	r3, #1
   b55f4:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   b55f6:	5d7b      	ldrb	r3, [r7, r5]
   b55f8:	2b5b      	cmp	r3, #91	; 0x5b
   b55fa:	f47f af43 	bne.w	b5484 <parse_value+0xc>
    input_buffer->offset++;
   b55fe:	3501      	adds	r5, #1
   b5600:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   b5602:	4620      	mov	r0, r4
   b5604:	f7ff fb86 	bl	b4d14 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   b5608:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b560c:	4293      	cmp	r3, r2
   b560e:	d25d      	bcs.n	b56cc <parse_value+0x254>
   b5610:	6822      	ldr	r2, [r4, #0]
   b5612:	5cd2      	ldrb	r2, [r2, r3]
   b5614:	2a5d      	cmp	r2, #93	; 0x5d
   b5616:	d109      	bne.n	b562c <parse_value+0x1b4>
    cJSON *head = NULL; /* head of the linked list */
   b5618:	2700      	movs	r7, #0
    input_buffer->depth--;
   b561a:	68e3      	ldr	r3, [r4, #12]
   b561c:	3b01      	subs	r3, #1
   b561e:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   b5620:	2320      	movs	r3, #32
    item->child = head;
   b5622:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   b5626:	68a3      	ldr	r3, [r4, #8]
   b5628:	3301      	adds	r3, #1
   b562a:	e741      	b.n	b54b0 <parse_value+0x38>
    input_buffer->offset--;
   b562c:	3b01      	subs	r3, #1
    cJSON *current_item = NULL;
   b562e:	2500      	movs	r5, #0
    input_buffer->offset--;
   b5630:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* head of the linked list */
   b5632:	462f      	mov	r7, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   b5634:	6920      	ldr	r0, [r4, #16]
   b5636:	f7ff feef 	bl	b5418 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   b563a:	46a8      	mov	r8, r5
   b563c:	4605      	mov	r5, r0
   b563e:	2800      	cmp	r0, #0
   b5640:	f000 809b 	beq.w	b577a <parse_value+0x302>
        if (head == NULL)
   b5644:	b1ff      	cbz	r7, b5686 <parse_value+0x20e>
            current_item->next = new_item;
   b5646:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   b564a:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   b564e:	68a3      	ldr	r3, [r4, #8]
   b5650:	3301      	adds	r3, #1
   b5652:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b5654:	4620      	mov	r0, r4
   b5656:	f7ff fb5d 	bl	b4d14 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   b565a:	4621      	mov	r1, r4
   b565c:	4628      	mov	r0, r5
   b565e:	f7ff ff0b 	bl	b5478 <parse_value>
   b5662:	2800      	cmp	r0, #0
   b5664:	f000 808c 	beq.w	b5780 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b5668:	4620      	mov	r0, r4
   b566a:	f7ff fb53 	bl	b4d14 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   b566e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b5672:	4293      	cmp	r3, r2
   b5674:	f080 8084 	bcs.w	b5780 <parse_value+0x308>
   b5678:	6822      	ldr	r2, [r4, #0]
   b567a:	5cd3      	ldrb	r3, [r2, r3]
   b567c:	2b2c      	cmp	r3, #44	; 0x2c
   b567e:	d0d9      	beq.n	b5634 <parse_value+0x1bc>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   b5680:	2b5d      	cmp	r3, #93	; 0x5d
   b5682:	d17d      	bne.n	b5780 <parse_value+0x308>
   b5684:	e7c9      	b.n	b561a <parse_value+0x1a2>
   b5686:	4607      	mov	r7, r0
   b5688:	e7e1      	b.n	b564e <parse_value+0x1d6>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   b568a:	2b7b      	cmp	r3, #123	; 0x7b
   b568c:	f47f aefa 	bne.w	b5484 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   b5690:	68e3      	ldr	r3, [r4, #12]
   b5692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b5696:	f4bf aef5 	bcs.w	b5484 <parse_value+0xc>
    input_buffer->depth++;
   b569a:	3301      	adds	r3, #1
   b569c:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   b569e:	5d7b      	ldrb	r3, [r7, r5]
   b56a0:	2b7b      	cmp	r3, #123	; 0x7b
   b56a2:	f47f aeef 	bne.w	b5484 <parse_value+0xc>
    input_buffer->offset++;
   b56a6:	3501      	adds	r5, #1
   b56a8:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   b56aa:	4620      	mov	r0, r4
   b56ac:	f7ff fb32 	bl	b4d14 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   b56b0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b56b4:	4293      	cmp	r3, r2
   b56b6:	d209      	bcs.n	b56cc <parse_value+0x254>
   b56b8:	6822      	ldr	r2, [r4, #0]
   b56ba:	5cd2      	ldrb	r2, [r2, r3]
   b56bc:	2a7d      	cmp	r2, #125	; 0x7d
   b56be:	d117      	bne.n	b56f0 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
   b56c0:	2700      	movs	r7, #0
    input_buffer->depth--;
   b56c2:	68e3      	ldr	r3, [r4, #12]
   b56c4:	3b01      	subs	r3, #1
   b56c6:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   b56c8:	2340      	movs	r3, #64	; 0x40
   b56ca:	e7aa      	b.n	b5622 <parse_value+0x1aa>
        input_buffer->offset--;
   b56cc:	3b01      	subs	r3, #1
   b56ce:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   b56d0:	e6d8      	b.n	b5484 <parse_value+0xc>
   b56d2:	bf00      	nop
   b56d4:	f3af 8000 	nop.w
   b56d8:	ffc00000 	.word	0xffc00000
   b56dc:	41dfffff 	.word	0x41dfffff
   b56e0:	000bd8b9 	.word	0x000bd8b9
   b56e4:	000be169 	.word	0x000be169
   b56e8:	000bd8be 	.word	0x000bd8be
   b56ec:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   b56f0:	2500      	movs	r5, #0
    input_buffer->offset--;
   b56f2:	3b01      	subs	r3, #1
   b56f4:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* linked list head */
   b56f6:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   b56f8:	46a8      	mov	r8, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   b56fa:	6920      	ldr	r0, [r4, #16]
   b56fc:	f7ff fe8c 	bl	b5418 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   b5700:	46a9      	mov	r9, r5
   b5702:	4605      	mov	r5, r0
   b5704:	2800      	cmp	r0, #0
   b5706:	d038      	beq.n	b577a <parse_value+0x302>
        if (head == NULL)
   b5708:	b3af      	cbz	r7, b5776 <parse_value+0x2fe>
            current_item->next = new_item;
   b570a:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   b570e:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   b5712:	68a3      	ldr	r3, [r4, #8]
   b5714:	3301      	adds	r3, #1
   b5716:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b5718:	4620      	mov	r0, r4
   b571a:	f7ff fafb 	bl	b4d14 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   b571e:	4621      	mov	r1, r4
   b5720:	4628      	mov	r0, r5
   b5722:	f7ff fa05 	bl	b4b30 <parse_string>
   b5726:	b358      	cbz	r0, b5780 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b5728:	4620      	mov	r0, r4
   b572a:	f7ff faf3 	bl	b4d14 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   b572e:	692b      	ldr	r3, [r5, #16]
   b5730:	622b      	str	r3, [r5, #32]
        current_item->valuestring = NULL;
   b5732:	f8c5 8010 	str.w	r8, [r5, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   b5736:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b573a:	4293      	cmp	r3, r2
   b573c:	d220      	bcs.n	b5780 <parse_value+0x308>
   b573e:	6822      	ldr	r2, [r4, #0]
   b5740:	5cd2      	ldrb	r2, [r2, r3]
   b5742:	2a3a      	cmp	r2, #58	; 0x3a
   b5744:	d11c      	bne.n	b5780 <parse_value+0x308>
        input_buffer->offset++;
   b5746:	3301      	adds	r3, #1
   b5748:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b574a:	4620      	mov	r0, r4
   b574c:	f7ff fae2 	bl	b4d14 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   b5750:	4621      	mov	r1, r4
   b5752:	4628      	mov	r0, r5
   b5754:	f7ff fe90 	bl	b5478 <parse_value>
   b5758:	b190      	cbz	r0, b5780 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b575a:	4620      	mov	r0, r4
   b575c:	f7ff fada 	bl	b4d14 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   b5760:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b5764:	4293      	cmp	r3, r2
   b5766:	d20b      	bcs.n	b5780 <parse_value+0x308>
   b5768:	6822      	ldr	r2, [r4, #0]
   b576a:	5cd3      	ldrb	r3, [r2, r3]
   b576c:	2b2c      	cmp	r3, #44	; 0x2c
   b576e:	d0c4      	beq.n	b56fa <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   b5770:	2b7d      	cmp	r3, #125	; 0x7d
   b5772:	d105      	bne.n	b5780 <parse_value+0x308>
   b5774:	e7a5      	b.n	b56c2 <parse_value+0x24a>
   b5776:	4607      	mov	r7, r0
   b5778:	e7cb      	b.n	b5712 <parse_value+0x29a>
    if (head != NULL)
   b577a:	2f00      	cmp	r7, #0
   b577c:	f43f ae82 	beq.w	b5484 <parse_value+0xc>
        cJSON_Delete(head);
   b5780:	4638      	mov	r0, r7
   b5782:	f7ff fe55 	bl	b5430 <cJSON_Delete>
   b5786:	e67d      	b.n	b5484 <parse_value+0xc>

000b5788 <cJSON_ParseWithOpts>:
{
   b5788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    global_error.json = NULL;
   b578c:	4f30      	ldr	r7, [pc, #192]	; (b5850 <cJSON_ParseWithOpts+0xc8>)
{
   b578e:	b089      	sub	sp, #36	; 0x24
   b5790:	4605      	mov	r5, r0
   b5792:	460e      	mov	r6, r1
   b5794:	4690      	mov	r8, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   b5796:	2100      	movs	r1, #0
   b5798:	221c      	movs	r2, #28
   b579a:	a801      	add	r0, sp, #4
    global_error.json = NULL;
   b579c:	f04f 0900 	mov.w	r9, #0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   b57a0:	f005 ff45 	bl	bb62e <memset>
    global_error.position = 0;
   b57a4:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL)
   b57a8:	2d00      	cmp	r5, #0
   b57aa:	d048      	beq.n	b583e <cJSON_ParseWithOpts+0xb6>
    buffer.length = strlen((const char*)value) + sizeof("");
   b57ac:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   b57ae:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   b57b0:	f7ff f930 	bl	b4a14 <strlen>
    buffer.hooks = global_hooks;
   b57b4:	4b27      	ldr	r3, [pc, #156]	; (b5854 <cJSON_ParseWithOpts+0xcc>)
    buffer.length = strlen((const char*)value) + sizeof("");
   b57b6:	3001      	adds	r0, #1
   b57b8:	9002      	str	r0, [sp, #8]
    buffer.hooks = global_hooks;
   b57ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b57be:	ab08      	add	r3, sp, #32
   b57c0:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   b57c4:	f7ff fe28 	bl	b5418 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   b57c8:	4604      	mov	r4, r0
   b57ca:	b368      	cbz	r0, b5828 <cJSON_ParseWithOpts+0xa0>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   b57cc:	9801      	ldr	r0, [sp, #4]
   b57ce:	b170      	cbz	r0, b57ee <cJSON_ParseWithOpts+0x66>
   b57d0:	9b03      	ldr	r3, [sp, #12]
   b57d2:	b95b      	cbnz	r3, b57ec <cJSON_ParseWithOpts+0x64>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   b57d4:	9b02      	ldr	r3, [sp, #8]
   b57d6:	2b04      	cmp	r3, #4
   b57d8:	d906      	bls.n	b57e8 <cJSON_ParseWithOpts+0x60>
   b57da:	491f      	ldr	r1, [pc, #124]	; (b5858 <cJSON_ParseWithOpts+0xd0>)
   b57dc:	2203      	movs	r2, #3
   b57de:	f005 ff92 	bl	bb706 <strncmp>
   b57e2:	b908      	cbnz	r0, b57e8 <cJSON_ParseWithOpts+0x60>
        buffer->offset += 3;
   b57e4:	2303      	movs	r3, #3
   b57e6:	9303      	str	r3, [sp, #12]
    return buffer;
   b57e8:	a801      	add	r0, sp, #4
   b57ea:	e000      	b.n	b57ee <cJSON_ParseWithOpts+0x66>
        return NULL;
   b57ec:	4648      	mov	r0, r9
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   b57ee:	f7ff fa91 	bl	b4d14 <buffer_skip_whitespace>
   b57f2:	4601      	mov	r1, r0
   b57f4:	4620      	mov	r0, r4
   b57f6:	f7ff fe3f 	bl	b5478 <parse_value>
   b57fa:	b190      	cbz	r0, b5822 <cJSON_ParseWithOpts+0x9a>
    if (require_null_terminated)
   b57fc:	f1b8 0f00 	cmp.w	r8, #0
   b5800:	d104      	bne.n	b580c <cJSON_ParseWithOpts+0x84>
    if (return_parse_end)
   b5802:	b9f6      	cbnz	r6, b5842 <cJSON_ParseWithOpts+0xba>
}
   b5804:	4620      	mov	r0, r4
   b5806:	b009      	add	sp, #36	; 0x24
   b5808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buffer_skip_whitespace(&buffer);
   b580c:	a801      	add	r0, sp, #4
   b580e:	f7ff fa81 	bl	b4d14 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   b5812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b5816:	4293      	cmp	r3, r2
   b5818:	d203      	bcs.n	b5822 <cJSON_ParseWithOpts+0x9a>
   b581a:	9a01      	ldr	r2, [sp, #4]
   b581c:	5cd3      	ldrb	r3, [r2, r3]
   b581e:	2b00      	cmp	r3, #0
   b5820:	d0ef      	beq.n	b5802 <cJSON_ParseWithOpts+0x7a>
        cJSON_Delete(item);
   b5822:	4620      	mov	r0, r4
   b5824:	f7ff fe04 	bl	b5430 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   b5828:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b582c:	429a      	cmp	r2, r3
   b582e:	d30d      	bcc.n	b584c <cJSON_ParseWithOpts+0xc4>
        else if (buffer.length > 0)
   b5830:	b103      	cbz	r3, b5834 <cJSON_ParseWithOpts+0xac>
            local_error.position = buffer.length - 1;
   b5832:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   b5834:	b10e      	cbz	r6, b583a <cJSON_ParseWithOpts+0xb2>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   b5836:	18ea      	adds	r2, r5, r3
   b5838:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   b583a:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   b583e:	2400      	movs	r4, #0
   b5840:	e7e0      	b.n	b5804 <cJSON_ParseWithOpts+0x7c>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   b5842:	9b01      	ldr	r3, [sp, #4]
   b5844:	9a03      	ldr	r2, [sp, #12]
   b5846:	4413      	add	r3, r2
   b5848:	6033      	str	r3, [r6, #0]
   b584a:	e7db      	b.n	b5804 <cJSON_ParseWithOpts+0x7c>
   b584c:	4613      	mov	r3, r2
   b584e:	e7f1      	b.n	b5834 <cJSON_ParseWithOpts+0xac>
   b5850:	2003d358 	.word	0x2003d358
   b5854:	2003d12c 	.word	0x2003d12c
   b5858:	000bd8d5 	.word	0x000bd8d5

000b585c <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   b585c:	2200      	movs	r2, #0
   b585e:	4611      	mov	r1, r2
   b5860:	f7ff bf92 	b.w	b5788 <cJSON_ParseWithOpts>

000b5864 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   b5864:	2100      	movs	r1, #0
   b5866:	f7ff bd8d 	b.w	b5384 <print.constprop.0>

000b586a <cJSON_GetArraySize>:
    if (array == NULL)
   b586a:	b110      	cbz	r0, b5872 <cJSON_GetArraySize+0x8>
    child = array->child;
   b586c:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   b586e:	2000      	movs	r0, #0
    while(child != NULL)
   b5870:	b903      	cbnz	r3, b5874 <cJSON_GetArraySize+0xa>
}
   b5872:	4770      	bx	lr
        child = child->next;
   b5874:	681b      	ldr	r3, [r3, #0]
        size++;
   b5876:	3001      	adds	r0, #1
        child = child->next;
   b5878:	e7fa      	b.n	b5870 <cJSON_GetArraySize+0x6>

000b587a <cJSON_GetArrayItem>:
    if (index < 0)
   b587a:	2900      	cmp	r1, #0
   b587c:	db01      	blt.n	b5882 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   b587e:	f7ff ba5e 	b.w	b4d3e <get_array_item>
}
   b5882:	2000      	movs	r0, #0
   b5884:	4770      	bx	lr

000b5886 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
   b5886:	2201      	movs	r2, #1
   b5888:	f7ff baae 	b.w	b4de8 <get_object_item>

000b588c <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   b588c:	f7ff baea 	b.w	b4e64 <add_item_to_array>

000b5890 <cJSON_ReplaceItemViaPointer>:
        newitem->prev->next = newitem;
    }
}

CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
{
   b5890:	b510      	push	{r4, lr}
    if ((parent == NULL) || (replacement == NULL) || (item == NULL))
   b5892:	b1d0      	cbz	r0, b58ca <cJSON_ReplaceItemViaPointer+0x3a>
   b5894:	b1c2      	cbz	r2, b58c8 <cJSON_ReplaceItemViaPointer+0x38>
   b5896:	b1c9      	cbz	r1, b58cc <cJSON_ReplaceItemViaPointer+0x3c>
    {
        return false;
    }

    if (replacement == item)
   b5898:	428a      	cmp	r2, r1
   b589a:	d013      	beq.n	b58c4 <cJSON_ReplaceItemViaPointer+0x34>
    {
        return true;
    }

    replacement->next = item->next;
   b589c:	680b      	ldr	r3, [r1, #0]
   b589e:	6013      	str	r3, [r2, #0]
    replacement->prev = item->prev;
   b58a0:	684c      	ldr	r4, [r1, #4]
   b58a2:	6054      	str	r4, [r2, #4]

    if (replacement->next != NULL)
   b58a4:	b103      	cbz	r3, b58a8 <cJSON_ReplaceItemViaPointer+0x18>
    {
        replacement->next->prev = replacement;
   b58a6:	605a      	str	r2, [r3, #4]
    }
    if (replacement->prev != NULL)
   b58a8:	6853      	ldr	r3, [r2, #4]
   b58aa:	b103      	cbz	r3, b58ae <cJSON_ReplaceItemViaPointer+0x1e>
    {
        replacement->prev->next = replacement;
   b58ac:	601a      	str	r2, [r3, #0]
    }
    if (parent->child == item)
   b58ae:	6883      	ldr	r3, [r0, #8]
   b58b0:	4299      	cmp	r1, r3
    {
        parent->child = replacement;
    }

    item->next = NULL;
   b58b2:	f04f 0300 	mov.w	r3, #0
        parent->child = replacement;
   b58b6:	bf08      	it	eq
   b58b8:	6082      	streq	r2, [r0, #8]
    item->prev = NULL;
   b58ba:	e9c1 3300 	strd	r3, r3, [r1]
    cJSON_Delete(item);
   b58be:	4608      	mov	r0, r1
   b58c0:	f7ff fdb6 	bl	b5430 <cJSON_Delete>
        return true;
   b58c4:	2001      	movs	r0, #1
   b58c6:	e000      	b.n	b58ca <cJSON_ReplaceItemViaPointer+0x3a>
        return false;
   b58c8:	4610      	mov	r0, r2

    return true;
}
   b58ca:	bd10      	pop	{r4, pc}
        return false;
   b58cc:	4608      	mov	r0, r1
   b58ce:	e7fc      	b.n	b58ca <cJSON_ReplaceItemViaPointer+0x3a>

000b58d0 <cJSON_CreateNull>:
    replace_item_in_object(object, string, newitem, true);
}

/* Create basic types: */
CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)
{
   b58d0:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b58d2:	4b04      	ldr	r3, [pc, #16]	; (b58e4 <cJSON_CreateNull+0x14>)
   b58d4:	6818      	ldr	r0, [r3, #0]
   b58d6:	f7ff fd9f 	bl	b5418 <cJSON_New_Item.isra.0>
    if(item)
   b58da:	b108      	cbz	r0, b58e0 <cJSON_CreateNull+0x10>
    {
        item->type = cJSON_NULL;
   b58dc:	2304      	movs	r3, #4
   b58de:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b58e0:	bd08      	pop	{r3, pc}
   b58e2:	bf00      	nop
   b58e4:	2003d12c 	.word	0x2003d12c

000b58e8 <cJSON_AddNullToObject>:
{
   b58e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58ea:	4605      	mov	r5, r0
   b58ec:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   b58ee:	f7ff ffef 	bl	b58d0 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, false))
   b58f2:	9901      	ldr	r1, [sp, #4]
   b58f4:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   b58f6:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, false))
   b58f8:	2300      	movs	r3, #0
   b58fa:	4628      	mov	r0, r5
   b58fc:	f7ff fb72 	bl	b4fe4 <add_item_to_object.constprop.0>
   b5900:	4605      	mov	r5, r0
   b5902:	b918      	cbnz	r0, b590c <cJSON_AddNullToObject+0x24>
    cJSON_Delete(null);
   b5904:	4620      	mov	r0, r4
   b5906:	f7ff fd93 	bl	b5430 <cJSON_Delete>
    return NULL;
   b590a:	462c      	mov	r4, r5
}
   b590c:	4620      	mov	r0, r4
   b590e:	b003      	add	sp, #12
   b5910:	bd30      	pop	{r4, r5, pc}
	...

000b5914 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   b5914:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b5916:	4b04      	ldr	r3, [pc, #16]	; (b5928 <cJSON_CreateArray+0x14>)
   b5918:	6818      	ldr	r0, [r3, #0]
   b591a:	f7ff fd7d 	bl	b5418 <cJSON_New_Item.isra.0>
    if(item)
   b591e:	b108      	cbz	r0, b5924 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   b5920:	2320      	movs	r3, #32
   b5922:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b5924:	bd08      	pop	{r3, pc}
   b5926:	bf00      	nop
   b5928:	2003d12c 	.word	0x2003d12c

000b592c <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   b592c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b592e:	4b04      	ldr	r3, [pc, #16]	; (b5940 <cJSON_CreateObject+0x14>)
   b5930:	6818      	ldr	r0, [r3, #0]
   b5932:	f7ff fd71 	bl	b5418 <cJSON_New_Item.isra.0>
    if (item)
   b5936:	b108      	cbz	r0, b593c <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   b5938:	2340      	movs	r3, #64	; 0x40
   b593a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b593c:	bd08      	pop	{r3, pc}
   b593e:	bf00      	nop
   b5940:	2003d12c 	.word	0x2003d12c

000b5944 <cJSON_IsInvalid>:
    *into = '\0';
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)
{
    if (item == NULL)
   b5944:	b118      	cbz	r0, b594e <cJSON_IsInvalid+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Invalid;
   b5946:	7b00      	ldrb	r0, [r0, #12]
   b5948:	fab0 f080 	clz	r0, r0
   b594c:	0940      	lsrs	r0, r0, #5
}
   b594e:	4770      	bx	lr

000b5950 <cJSON_IsBool>:
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   b5950:	b120      	cbz	r0, b595c <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   b5952:	68c0      	ldr	r0, [r0, #12]
   b5954:	f010 0003 	ands.w	r0, r0, #3
   b5958:	bf18      	it	ne
   b595a:	2001      	movne	r0, #1
}
   b595c:	4770      	bx	lr

000b595e <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   b595e:	b118      	cbz	r0, b5968 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   b5960:	7b00      	ldrb	r0, [r0, #12]
   b5962:	1f03      	subs	r3, r0, #4
   b5964:	4258      	negs	r0, r3
   b5966:	4158      	adcs	r0, r3
}
   b5968:	4770      	bx	lr

000b596a <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   b596a:	b120      	cbz	r0, b5976 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   b596c:	7b00      	ldrb	r0, [r0, #12]
   b596e:	f1a0 0308 	sub.w	r3, r0, #8
   b5972:	4258      	negs	r0, r3
   b5974:	4158      	adcs	r0, r3
}
   b5976:	4770      	bx	lr

000b5978 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   b5978:	b120      	cbz	r0, b5984 <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   b597a:	7b00      	ldrb	r0, [r0, #12]
   b597c:	f1a0 0310 	sub.w	r3, r0, #16
   b5980:	4258      	negs	r0, r3
   b5982:	4158      	adcs	r0, r3
}
   b5984:	4770      	bx	lr

000b5986 <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
    if (item == NULL)
   b5986:	b120      	cbz	r0, b5992 <cJSON_IsArray+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Array;
   b5988:	7b00      	ldrb	r0, [r0, #12]
   b598a:	f1a0 0320 	sub.w	r3, r0, #32
   b598e:	4258      	negs	r0, r3
   b5990:	4158      	adcs	r0, r3
}
   b5992:	4770      	bx	lr

000b5994 <cJSON_IsObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   b5994:	b120      	cbz	r0, b59a0 <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   b5996:	7b00      	ldrb	r0, [r0, #12]
   b5998:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   b599c:	4258      	negs	r0, r3
   b599e:	4158      	adcs	r0, r3
}
   b59a0:	4770      	bx	lr
	...

000b59a4 <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   b59a4:	4b01      	ldr	r3, [pc, #4]	; (b59ac <cJSON_free+0x8>)
   b59a6:	685b      	ldr	r3, [r3, #4]
   b59a8:	4718      	bx	r3
   b59aa:	bf00      	nop
   b59ac:	2003d12c 	.word	0x2003d12c

000b59b0 <replace_item_in_object.isra.0>:
static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
   b59b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59b2:	4606      	mov	r6, r0
   b59b4:	460d      	mov	r5, r1
   b59b6:	461f      	mov	r7, r3
    if ((replacement == NULL) || (string == NULL))
   b59b8:	4614      	mov	r4, r2
   b59ba:	b1da      	cbz	r2, b59f4 <replace_item_in_object.isra.0+0x44>
   b59bc:	b1d1      	cbz	r1, b59f4 <replace_item_in_object.isra.0+0x44>
    if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
   b59be:	68d3      	ldr	r3, [r2, #12]
   b59c0:	059b      	lsls	r3, r3, #22
   b59c2:	d403      	bmi.n	b59cc <replace_item_in_object.isra.0+0x1c>
   b59c4:	6a10      	ldr	r0, [r2, #32]
   b59c6:	b108      	cbz	r0, b59cc <replace_item_in_object.isra.0+0x1c>
        cJSON_free(replacement->string);
   b59c8:	f7ff ffec 	bl	b59a4 <cJSON_free>
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   b59cc:	4628      	mov	r0, r5
   b59ce:	f7ff faf1 	bl	b4fb4 <cJSON_strdup.constprop.0>
    replacement->type &= ~cJSON_StringIsConst;
   b59d2:	68e3      	ldr	r3, [r4, #12]
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   b59d4:	6220      	str	r0, [r4, #32]
    replacement->type &= ~cJSON_StringIsConst;
   b59d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b59da:	463a      	mov	r2, r7
   b59dc:	4629      	mov	r1, r5
    replacement->type &= ~cJSON_StringIsConst;
   b59de:	60e3      	str	r3, [r4, #12]
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b59e0:	4630      	mov	r0, r6
   b59e2:	f7ff fa01 	bl	b4de8 <get_object_item>
   b59e6:	4622      	mov	r2, r4
   b59e8:	4601      	mov	r1, r0
   b59ea:	4630      	mov	r0, r6
}
   b59ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b59f0:	f7ff bf4e 	b.w	b5890 <cJSON_ReplaceItemViaPointer>
}
   b59f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59f6 <cJSON_ReplaceItemInObjectCaseSensitive>:
    replace_item_in_object(object, string, newitem, true);
   b59f6:	2301      	movs	r3, #1
   b59f8:	f7ff bfda 	b.w	b59b0 <replace_item_in_object.isra.0>

000b59fc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
}
/**
 * @brief    Sets a flag when a new BLE connection is established
 */
void BLEOnConnectcallback(const BlePeerDevice &peer, void *context)
{
   b59fc:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b59fe:	4b04      	ldr	r3, [pc, #16]	; (b5a10 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b5a00:	2201      	movs	r2, #1
   b5a02:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5a04:	f001 ffc4 	bl	b7990 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b5a08:	4b02      	ldr	r3, [pc, #8]	; (b5a14 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b5a0a:	6018      	str	r0, [r3, #0]
}
   b5a0c:	bd08      	pop	{r3, pc}
   b5a0e:	bf00      	nop
   b5a10:	2003d37d 	.word	0x2003d37d
   b5a14:	2003dce8 	.word	0x2003dce8

000b5a18 <_Z13handle_sensorv>:
/**
 * @brief    IRQ handler for the KW sensor. This function is called every time the KW sensor detects a pulse.
 */
void handle_sensor(void)
{
   b5a18:	b508      	push	{r3, lr}
   b5a1a:	f001 ffb9 	bl	b7990 <HAL_Timer_Get_Milli_Seconds>
    static unsigned long last_read = 0;
    unsigned long current_reading = millis();
    unsigned long delta = current_reading - last_read;
   b5a1e:	490c      	ldr	r1, [pc, #48]	; (b5a50 <_Z13handle_sensorv+0x38>)
   b5a20:	680b      	ldr	r3, [r1, #0]
   b5a22:	1ac3      	subs	r3, r0, r3

    // Check if we have a valid reading. I.e. at least 100 ms since last reading, which is equal to 36kW
    if (delta > 100)
   b5a24:	2b64      	cmp	r3, #100	; 0x64
   b5a26:	d911      	bls.n	b5a4c <_Z13handle_sensorv+0x34>
    {
        // We have a valid reading
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b5a28:	4a0a      	ldr	r2, [pc, #40]	; (b5a54 <_Z13handle_sensorv+0x3c>)
   b5a2a:	fbb2 f3f3 	udiv	r3, r2, r3
   b5a2e:	4a0a      	ldr	r2, [pc, #40]	; (b5a58 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b5a30:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b5a32:	6013      	str	r3, [r2, #0]

        // One flash from sensor equals 1 Whr - Add to total
        wh_today[currentHour] += 1;
   b5a34:	4b09      	ldr	r3, [pc, #36]	; (b5a5c <_Z13handle_sensorv+0x44>)
   b5a36:	7819      	ldrb	r1, [r3, #0]
   b5a38:	4b09      	ldr	r3, [pc, #36]	; (b5a60 <_Z13handle_sensorv+0x48>)
   b5a3a:	681a      	ldr	r2, [r3, #0]
   b5a3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b5a40:	3301      	adds	r3, #1
   b5a42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update flag - Transmit sensor values
        TRANSMIT_SENSOR = true;
   b5a46:	4b07      	ldr	r3, [pc, #28]	; (b5a64 <_Z13handle_sensorv+0x4c>)
   b5a48:	2201      	movs	r2, #1
   b5a4a:	701a      	strb	r2, [r3, #0]
    }
}
   b5a4c:	bd08      	pop	{r3, pc}
   b5a4e:	bf00      	nop
   b5a50:	2003d42c 	.word	0x2003d42c
   b5a54:	0036ee80 	.word	0x0036ee80
   b5a58:	2003d494 	.word	0x2003d494
   b5a5c:	2003d4a4 	.word	0x2003d4a4
   b5a60:	2003e19c 	.word	0x2003e19c
   b5a64:	2003d382 	.word	0x2003d382

000b5a68 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b5a68:	6943      	ldr	r3, [r0, #20]
   b5a6a:	b113      	cbz	r3, b5a72 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5a6c:	6983      	ldr	r3, [r0, #24]
   b5a6e:	300c      	adds	r0, #12
   b5a70:	4718      	bx	r3
            callback();
        }
    }
   b5a72:	4770      	bx	lr

000b5a74 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b5a74:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b5a76:	2100      	movs	r1, #0
   b5a78:	4604      	mov	r4, r0
   b5a7a:	4608      	mov	r0, r1
   b5a7c:	f002 f85a 	bl	b7b34 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b5a80:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b5a82:	4620      	mov	r0, r4
   b5a84:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b5a86:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b5a88:	f002 f86c 	bl	b7b64 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b5a8c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b5a8e:	b10c      	cbz	r4, b5a94 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b5a90:	2301      	movs	r3, #1
   b5a92:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b5a94:	2100      	movs	r1, #0
   b5a96:	2001      	movs	r0, #1
   b5a98:	f002 f84c 	bl	b7b34 <os_thread_scheduling>
            }
        }
        if (t) {
   b5a9c:	b12c      	cbz	r4, b5aaa <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b5a9e:	6823      	ldr	r3, [r4, #0]
   b5aa0:	4620      	mov	r0, r4
   b5aa2:	689b      	ldr	r3, [r3, #8]
   b5aa4:	4798      	blx	r3
            t->running = false;
   b5aa6:	2300      	movs	r3, #0
   b5aa8:	7123      	strb	r3, [r4, #4]
        }
    }
   b5aaa:	b002      	add	sp, #8
   b5aac:	bd10      	pop	{r4, pc}

000b5aae <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b5aae:	2a01      	cmp	r2, #1
   b5ab0:	d102      	bne.n	b5ab8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5ab2:	6001      	str	r1, [r0, #0]
      }
   b5ab4:	2000      	movs	r0, #0
   b5ab6:	4770      	bx	lr
	  switch (__op)
   b5ab8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5aba:	bf04      	itt	eq
   b5abc:	680b      	ldreq	r3, [r1, #0]
   b5abe:	6003      	streq	r3, [r0, #0]
	      break;
   b5ac0:	e7f8      	b.n	b5ab4 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b5ac2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5ac2:	6803      	ldr	r3, [r0, #0]
   b5ac4:	4718      	bx	r3

000b5ac6 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b5ac6:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b5ac8:	6880      	ldr	r0, [r0, #8]
   b5aca:	b130      	cbz	r0, b5ada <_ZN5Timer4stopEj.isra.0+0x14>
   b5acc:	2300      	movs	r3, #0
   b5ace:	e9cd 1300 	strd	r1, r3, [sp]
   b5ad2:	461a      	mov	r2, r3
   b5ad4:	2102      	movs	r1, #2
   b5ad6:	f002 f84d 	bl	b7b74 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b5ada:	b003      	add	sp, #12
   b5adc:	f85d fb04 	ldr.w	pc, [sp], #4

000b5ae0 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b5ae0:	b530      	push	{r4, r5, lr}
   b5ae2:	4605      	mov	r5, r0
   b5ae4:	b085      	sub	sp, #20
   b5ae6:	460c      	mov	r4, r1
        stop(fromISR);
   b5ae8:	4611      	mov	r1, r2
   b5aea:	9203      	str	r2, [sp, #12]
   b5aec:	f7ff ffeb 	bl	b5ac6 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b5af0:	68a8      	ldr	r0, [r5, #8]
   b5af2:	b130      	cbz	r0, b5b02 <_ZN5Timer6_startEjb.isra.0+0x22>
   b5af4:	2300      	movs	r3, #0
   b5af6:	e9cd 4300 	strd	r4, r3, [sp]
   b5afa:	9a03      	ldr	r2, [sp, #12]
   b5afc:	4619      	mov	r1, r3
   b5afe:	f002 f839 	bl	b7b74 <os_timer_change>
    }
   b5b02:	b005      	add	sp, #20
   b5b04:	bd30      	pop	{r4, r5, pc}
	...

000b5b08 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b5b08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b5b0c:	f004 f93a 	bl	b9d84 <_ZN9TimeClass4hourEv>
   b5b10:	4f26      	ldr	r7, [pc, #152]	; (b5bac <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b5b12:	f8df 809c 	ldr.w	r8, [pc, #156]	; b5bb0 <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b5b16:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b5b18:	f004 f940 	bl	b9d9c <_ZN9TimeClass6minuteEv>
   b5b1c:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b5b1e:	f004 f949 	bl	b9db4 <_ZN9TimeClass6secondEv>
   b5b22:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b5b24:	f004 f952 	bl	b9dcc <_ZN9TimeClass3dayEv>
    timer.stop();
   b5b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b5b2c:	4604      	mov	r4, r0
    timer.stop();
   b5b2e:	4640      	mov	r0, r8
   b5b30:	f7ff ffc9 	bl	b5ac6 <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b5b34:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b5b38:	b178      	cbz	r0, b5b5a <_Z10check_timev+0x52>
   b5b3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b5b3e:	b2ed      	uxtb	r5, r5
   b5b40:	2200      	movs	r2, #0
   b5b42:	e9cd 1200 	strd	r1, r2, [sp]
   b5b46:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b5b4a:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5b4e:	43ed      	mvns	r5, r5
   b5b50:	fb01 5303 	mla	r3, r1, r3, r5
   b5b54:	2103      	movs	r1, #3
   b5b56:	f002 f80d 	bl	b7b74 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b5b5a:	4815      	ldr	r0, [pc, #84]	; (b5bb0 <_Z10check_timev+0xa8>)
   b5b5c:	2200      	movs	r2, #0
   b5b5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5b62:	f7ff ffbd 	bl	b5ae0 <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b5b66:	783b      	ldrb	r3, [r7, #0]
   b5b68:	2b0d      	cmp	r3, #13
   b5b6a:	d114      	bne.n	b5b96 <_Z10check_timev+0x8e>
   b5b6c:	4a11      	ldr	r2, [pc, #68]	; (b5bb4 <_Z10check_timev+0xac>)
   b5b6e:	6811      	ldr	r1, [r2, #0]
   b5b70:	b2e4      	uxtb	r4, r4
   b5b72:	42a1      	cmp	r1, r4
   b5b74:	d003      	beq.n	b5b7e <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b5b76:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b5b78:	4a0f      	ldr	r2, [pc, #60]	; (b5bb8 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b5b7a:	2101      	movs	r1, #1
   b5b7c:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b5b7e:	b93e      	cbnz	r6, b5b90 <_Z10check_timev+0x88>
   b5b80:	4a0e      	ldr	r2, [pc, #56]	; (b5bbc <_Z10check_timev+0xb4>)
   b5b82:	6811      	ldr	r1, [r2, #0]
   b5b84:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b5b86:	bf1f      	itttt	ne
   b5b88:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b5b8a:	4b0d      	ldrne	r3, [pc, #52]	; (b5bc0 <_Z10check_timev+0xb8>)
   b5b8c:	2201      	movne	r2, #1
   b5b8e:	701a      	strbne	r2, [r3, #0]
    }
   b5b90:	b002      	add	sp, #8
   b5b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b5b96:	2b00      	cmp	r3, #0
   b5b98:	d1f1      	bne.n	b5b7e <_Z10check_timev+0x76>
   b5b9a:	4a0a      	ldr	r2, [pc, #40]	; (b5bc4 <_Z10check_timev+0xbc>)
   b5b9c:	6811      	ldr	r1, [r2, #0]
   b5b9e:	b2e4      	uxtb	r4, r4
   b5ba0:	42a1      	cmp	r1, r4
   b5ba2:	d0ec      	beq.n	b5b7e <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b5ba4:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b5ba6:	4a08      	ldr	r2, [pc, #32]	; (b5bc8 <_Z10check_timev+0xc0>)
   b5ba8:	e7e7      	b.n	b5b7a <_Z10check_timev+0x72>
   b5baa:	bf00      	nop
   b5bac:	2003d4a4 	.word	0x2003d4a4
   b5bb0:	2003e180 	.word	0x2003e180
   b5bb4:	2003d168 	.word	0x2003d168
   b5bb8:	2003d37c 	.word	0x2003d37c
   b5bbc:	2003d170 	.word	0x2003d170
   b5bc0:	2003d383 	.word	0x2003d383
   b5bc4:	2003d16c 	.word	0x2003d16c
   b5bc8:	2003d37e 	.word	0x2003d37e

000b5bcc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5bcc:	b40e      	push	{r1, r2, r3}
   b5bce:	b503      	push	{r0, r1, lr}
   b5bd0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b5bd2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5bd4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5bd8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5bda:	f003 ff16 	bl	b9a0a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b5bde:	b002      	add	sp, #8
   b5be0:	f85d eb04 	ldr.w	lr, [sp], #4
   b5be4:	b003      	add	sp, #12
   b5be6:	4770      	bx	lr

000b5be8 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b5be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b5bec:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b5bee:	4608      	mov	r0, r1
{
   b5bf0:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b5bf2:	f7fe ff0f 	bl	b4a14 <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b5bf6:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b5bf8:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b5bfa:	a801      	add	r0, sp, #4
   b5bfc:	f005 fd5d 	bl	bb6ba <strcpy>
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    Serial.println("in the callback");
   b5c00:	f004 fd52 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b5c04:	493c      	ldr	r1, [pc, #240]	; (b5cf8 <_Z9myHandlerPKcS0_+0x110>)
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b5c06:	4d3d      	ldr	r5, [pc, #244]	; (b5cfc <_Z9myHandlerPKcS0_+0x114>)
    Serial.println("in the callback");
   b5c08:	f003 fecd 	bl	b99a6 <_ZN5Print7printlnEPKc>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b5c0c:	493c      	ldr	r1, [pc, #240]	; (b5d00 <_Z9myHandlerPKcS0_+0x118>)
   b5c0e:	a801      	add	r0, sp, #4
   b5c10:	f006 fbf0 	bl	bc3f4 <strtok>
   b5c14:	f005 fccb 	bl	bb5ae <atoi>
   b5c18:	4621      	mov	r1, r4
   b5c1a:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b5c1e:	f005 fd3d 	bl	bb69c <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b5c22:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5c26:	d214      	bcs.n	b5c52 <_Z9myHandlerPKcS0_+0x6a>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b5c28:	f004 fd3e 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b5c2c:	4935      	ldr	r1, [pc, #212]	; (b5d04 <_Z9myHandlerPKcS0_+0x11c>)
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b5c2e:	4f36      	ldr	r7, [pc, #216]	; (b5d08 <_Z9myHandlerPKcS0_+0x120>)
        Serial.printf("%s\n", temp);
   b5c30:	462a      	mov	r2, r5
   b5c32:	f7ff ffcb 	bl	b5bcc <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b5c36:	4935      	ldr	r1, [pc, #212]	; (b5d0c <_Z9myHandlerPKcS0_+0x124>)
   b5c38:	4628      	mov	r0, r5
   b5c3a:	f006 fbdb 	bl	bc3f4 <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b5c3e:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
   b5c42:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b5c46:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b5c48:	2600      	movs	r6, #0
            if (token == NULL)
   b5c4a:	b928      	cbnz	r0, b5c58 <_Z9myHandlerPKcS0_+0x70>
            }
            token = strtok(NULL, ",!");

        }
        CALCULATE = true;
   b5c4c:	4b30      	ldr	r3, [pc, #192]	; (b5d10 <_Z9myHandlerPKcS0_+0x128>)
   b5c4e:	2201      	movs	r2, #1
   b5c50:	701a      	strb	r2, [r3, #0]
    }
   b5c52:	b004      	add	sp, #16
   b5c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i >= 0 && i < 7)
   b5c58:	2c06      	cmp	r4, #6
   b5c5a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b5d14 <_Z9myHandlerPKcS0_+0x12c>
   b5c5e:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b5c62:	dc19      	bgt.n	b5c98 <_Z9myHandlerPKcS0_+0xb0>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b5c64:	f005 fca0 	bl	bb5a8 <atof>
   b5c68:	f8da 3000 	ldr.w	r3, [sl]
   b5c6c:	4632      	mov	r2, r6
   b5c6e:	ec51 0b10 	vmov	r0, r1, d0
   b5c72:	441d      	add	r5, r3
   b5c74:	463b      	mov	r3, r7
   b5c76:	f7fe fcb9 	bl	b45ec <__aeabi_ddiv>
   b5c7a:	a31b      	add	r3, pc, #108	; (adr r3, b5ce8 <_Z9myHandlerPKcS0_+0x100>)
   b5c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b5c80:	f7fe f9d4 	bl	b402c <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b5c84:	3401      	adds	r4, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b5c86:	e9c5 0100 	strd	r0, r1, [r5]
            token = strtok(NULL, ",!");
   b5c8a:	4920      	ldr	r1, [pc, #128]	; (b5d0c <_Z9myHandlerPKcS0_+0x124>)
   b5c8c:	2000      	movs	r0, #0
   b5c8e:	f006 fbb1 	bl	bc3f4 <strtok>
        for (int i = 0; i < MAX_RANGE; i++)
   b5c92:	2c18      	cmp	r4, #24
   b5c94:	d1d9      	bne.n	b5c4a <_Z9myHandlerPKcS0_+0x62>
   b5c96:	e7d9      	b.n	b5c4c <_Z9myHandlerPKcS0_+0x64>
            else if (i > 16 && i < 22)
   b5c98:	f1a4 0311 	sub.w	r3, r4, #17
   b5c9c:	2b04      	cmp	r3, #4
   b5c9e:	d80d      	bhi.n	b5cbc <_Z9myHandlerPKcS0_+0xd4>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b5ca0:	f005 fc82 	bl	bb5a8 <atof>
   b5ca4:	f8da 3000 	ldr.w	r3, [sl]
   b5ca8:	4632      	mov	r2, r6
   b5caa:	ec51 0b10 	vmov	r0, r1, d0
   b5cae:	441d      	add	r5, r3
   b5cb0:	463b      	mov	r3, r7
   b5cb2:	f7fe fc9b 	bl	b45ec <__aeabi_ddiv>
   b5cb6:	4642      	mov	r2, r8
   b5cb8:	464b      	mov	r3, r9
   b5cba:	e7e1      	b.n	b5c80 <_Z9myHandlerPKcS0_+0x98>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b5cbc:	f005 fc74 	bl	bb5a8 <atof>
   b5cc0:	f8da 3000 	ldr.w	r3, [sl]
   b5cc4:	4632      	mov	r2, r6
   b5cc6:	ec51 0b10 	vmov	r0, r1, d0
   b5cca:	441d      	add	r5, r3
   b5ccc:	463b      	mov	r3, r7
   b5cce:	f7fe fc8d 	bl	b45ec <__aeabi_ddiv>
   b5cd2:	a307      	add	r3, pc, #28	; (adr r3, b5cf0 <_Z9myHandlerPKcS0_+0x108>)
   b5cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5cd8:	e7d2      	b.n	b5c80 <_Z9myHandlerPKcS0_+0x98>
   b5cda:	bf00      	nop
   b5cdc:	f3af 8000 	nop.w
   b5ce0:	2d0e5604 	.word	0x2d0e5604
   b5ce4:	3ffe9db2 	.word	0x3ffe9db2
   b5ce8:	ebedfa44 	.word	0xebedfa44
   b5cec:	3fcb39c0 	.word	0x3fcb39c0
   b5cf0:	42c3c9ef 	.word	0x42c3c9ef
   b5cf4:	3fe469ad 	.word	0x3fe469ad
   b5cf8:	000bd8d9 	.word	0x000bd8d9
   b5cfc:	2003dd7c 	.word	0x2003dd7c
   b5d00:	000bd8e9 	.word	0x000bd8e9
   b5d04:	000bd8f1 	.word	0x000bd8f1
   b5d08:	408f4000 	.word	0x408f4000
   b5d0c:	000bd8f5 	.word	0x000bd8f5
   b5d10:	2003d361 	.word	0x2003d361
   b5d14:	2003d49c 	.word	0x2003d49c

000b5d18 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5d18:	b40e      	push	{r1, r2, r3}
   b5d1a:	b503      	push	{r0, r1, lr}
   b5d1c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b5d1e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5d20:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5d24:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b5d26:	f003 fe70 	bl	b9a0a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b5d2a:	b002      	add	sp, #8
   b5d2c:	f85d eb04 	ldr.w	lr, [sp], #4
   b5d30:	b003      	add	sp, #12
   b5d32:	4770      	bx	lr

000b5d34 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5d34:	b510      	push	{r4, lr}
      if (_M_manager)
   b5d36:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5d38:	4604      	mov	r4, r0
      if (_M_manager)
   b5d3a:	b113      	cbz	r3, b5d42 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5d3c:	2203      	movs	r2, #3
   b5d3e:	4601      	mov	r1, r0
   b5d40:	4798      	blx	r3
    }
   b5d42:	4620      	mov	r0, r4
   b5d44:	bd10      	pop	{r4, pc}
	...

000b5d48 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b5d48:	b538      	push	{r3, r4, r5, lr}
   b5d4a:	4b0f      	ldr	r3, [pc, #60]	; (b5d88 <_ZN5TimerD1Ev+0x40>)
   b5d4c:	6003      	str	r3, [r0, #0]
        if (handle) {
   b5d4e:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b5d50:	4604      	mov	r4, r0
        if (handle) {
   b5d52:	b19b      	cbz	r3, b5d7c <_ZN5TimerD1Ev+0x34>
            stop();
   b5d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5d58:	f7ff feb5 	bl	b5ac6 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b5d5c:	68a0      	ldr	r0, [r4, #8]
   b5d5e:	2100      	movs	r1, #0
   b5d60:	f001 ff28 	bl	b7bb4 <os_timer_set_id>
            while (running) {
   b5d64:	7923      	ldrb	r3, [r4, #4]
   b5d66:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b5d6a:	b113      	cbz	r3, b5d72 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b5d6c:	f001 feda 	bl	b7b24 <os_thread_yield>
            while (running) {
   b5d70:	e7f8      	b.n	b5d64 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b5d72:	68a0      	ldr	r0, [r4, #8]
   b5d74:	4629      	mov	r1, r5
   b5d76:	f001 feed 	bl	b7b54 <os_timer_destroy>
            handle = nullptr;
   b5d7a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b5d7c:	f104 000c 	add.w	r0, r4, #12
   b5d80:	f7ff ffd8 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
    }
   b5d84:	4620      	mov	r0, r4
   b5d86:	bd38      	pop	{r3, r4, r5, pc}
   b5d88:	000bde34 	.word	0x000bde34

000b5d8c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b5d8c:	b510      	push	{r4, lr}
   b5d8e:	4604      	mov	r4, r0
    }
   b5d90:	f7ff ffda 	bl	b5d48 <_ZN5TimerD1Ev>
   b5d94:	4620      	mov	r0, r4
   b5d96:	211c      	movs	r1, #28
   b5d98:	f7fe fe9b 	bl	b4ad2 <_ZdlPvj>
   b5d9c:	4620      	mov	r0, r4
   b5d9e:	bd10      	pop	{r4, pc}

000b5da0 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b5da0:	b570      	push	{r4, r5, r6, lr}
   b5da2:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b5da4:	f002 ff24 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5da8:	2102      	movs	r1, #2
   b5daa:	f002 ff72 	bl	b8c92 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b5dae:	f002 ff1f 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5db2:	f002 ff67 	bl	b8c84 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b5db6:	f002 ff1b 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dba:	4a3e      	ldr	r2, [pc, #248]	; (b5eb4 <_Z9ble_setupv+0x114>)
   b5dbc:	4c3e      	ldr	r4, [pc, #248]	; (b5eb8 <_Z9ble_setupv+0x118>)
   b5dbe:	4601      	mov	r1, r0
   b5dc0:	a80b      	add	r0, sp, #44	; 0x2c
   b5dc2:	f003 fc9f 	bl	b9704 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5dc6:	a80b      	add	r0, sp, #44	; 0x2c
   b5dc8:	f003 f817 	bl	b8dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b5dcc:	f002 ff10 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dd0:	4a3a      	ldr	r2, [pc, #232]	; (b5ebc <_Z9ble_setupv+0x11c>)
   b5dd2:	4601      	mov	r1, r0
   b5dd4:	a80b      	add	r0, sp, #44	; 0x2c
   b5dd6:	f003 fc95 	bl	b9704 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5dda:	a80b      	add	r0, sp, #44	; 0x2c
   b5ddc:	f003 f80d 	bl	b8dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b5de0:	f002 ff06 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5de4:	4a36      	ldr	r2, [pc, #216]	; (b5ec0 <_Z9ble_setupv+0x120>)
   b5de6:	4601      	mov	r1, r0
   b5de8:	a80b      	add	r0, sp, #44	; 0x2c
   b5dea:	f003 fc8b 	bl	b9704 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5dee:	a80b      	add	r0, sp, #44	; 0x2c
   b5df0:	f003 f803 	bl	b8dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b5df4:	f002 fefc 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5df8:	4a32      	ldr	r2, [pc, #200]	; (b5ec4 <_Z9ble_setupv+0x124>)
   b5dfa:	4601      	mov	r1, r0
   b5dfc:	a80b      	add	r0, sp, #44	; 0x2c
   b5dfe:	f003 fc81 	bl	b9704 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e02:	a80b      	add	r0, sp, #44	; 0x2c
   b5e04:	f002 fff9 	bl	b8dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b5e08:	f002 fef2 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e0c:	4a2e      	ldr	r2, [pc, #184]	; (b5ec8 <_Z9ble_setupv+0x128>)
   b5e0e:	4601      	mov	r1, r0
   b5e10:	a80b      	add	r0, sp, #44	; 0x2c
   b5e12:	f003 fc77 	bl	b9704 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e16:	a80b      	add	r0, sp, #44	; 0x2c
   b5e18:	f002 ffef 	bl	b8dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b5e1c:	f002 fee8 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e20:	4a2a      	ldr	r2, [pc, #168]	; (b5ecc <_Z9ble_setupv+0x12c>)
   b5e22:	4601      	mov	r1, r0
   b5e24:	a80b      	add	r0, sp, #44	; 0x2c
   b5e26:	f003 fc6d 	bl	b9704 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e2a:	a80b      	add	r0, sp, #44	; 0x2c
   b5e2c:	f002 ffe5 	bl	b8dfa <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b5e30:	a803      	add	r0, sp, #12
   b5e32:	f003 f918 	bl	b9066 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b5e36:	4b26      	ldr	r3, [pc, #152]	; (b5ed0 <_Z9ble_setupv+0x130>)
   b5e38:	a803      	add	r0, sp, #12
   b5e3a:	6819      	ldr	r1, [r3, #0]
   b5e3c:	f003 f926 	bl	b908c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b5e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5e42:	ad06      	add	r5, sp, #24
   b5e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b5e46:	ad06      	add	r5, sp, #24
   b5e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e4a:	6826      	ldr	r6, [r4, #0]
   b5e4c:	ac0b      	add	r4, sp, #44	; 0x2c
   b5e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e50:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b5e52:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e54:	f002 fcda 	bl	b880c <_ZNK8particle7BleUuid4typeEv>
   b5e58:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5e5a:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e5c:	bb0c      	cbnz	r4, b5ea2 <_Z9ble_setupv+0x102>
            uint16_t uuid16 = tempUUID.shorted();
   b5e5e:	f002 fcf1 	bl	b8844 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5e62:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5e64:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5e68:	2302      	movs	r3, #2
   b5e6a:	f10d 020a 	add.w	r2, sp, #10
   b5e6e:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5e70:	a803      	add	r0, sp, #12
   b5e72:	f003 f8ed 	bl	b9050 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b5e76:	f002 febb 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e7a:	2200      	movs	r2, #0
   b5e7c:	a903      	add	r1, sp, #12
   b5e7e:	f002 ff4f 	bl	b8d20 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b5e82:	f004 fc11 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b5e86:	4913      	ldr	r1, [pc, #76]	; (b5ed4 <_Z9ble_setupv+0x134>)
   b5e88:	f003 fd8d 	bl	b99a6 <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b5e8c:	f002 feb0 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e90:	4911      	ldr	r1, [pc, #68]	; (b5ed8 <_Z9ble_setupv+0x138>)
   b5e92:	2200      	movs	r2, #0
   b5e94:	f003 fb38 	bl	b9508 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5e98:	9803      	ldr	r0, [sp, #12]
   b5e9a:	f002 f897 	bl	b7fcc <free>

}
   b5e9e:	b010      	add	sp, #64	; 0x40
   b5ea0:	bd70      	pop	{r4, r5, r6, pc}
   b5ea2:	f002 fcd1 	bl	b8848 <_ZNK8particle7BleUuid8rawBytesEv>
   b5ea6:	2300      	movs	r3, #0
   b5ea8:	9300      	str	r3, [sp, #0]
   b5eaa:	4602      	mov	r2, r0
   b5eac:	2310      	movs	r3, #16
   b5eae:	2107      	movs	r1, #7
   b5eb0:	e7de      	b.n	b5e70 <_Z9ble_setupv+0xd0>
   b5eb2:	bf00      	nop
   b5eb4:	2003d384 	.word	0x2003d384
   b5eb8:	2003d3b0 	.word	0x2003d3b0
   b5ebc:	2003d374 	.word	0x2003d374
   b5ec0:	2003d364 	.word	0x2003d364
   b5ec4:	2003d36c 	.word	0x2003d36c
   b5ec8:	2003d38c 	.word	0x2003d38c
   b5ecc:	2003d394 	.word	0x2003d394
   b5ed0:	2003d14c 	.word	0x2003d14c
   b5ed4:	000bd8f8 	.word	0x000bd8f8
   b5ed8:	000b59fd 	.word	0x000b59fd
   b5edc:	00000000 	.word	0x00000000

000b5ee0 <_Z8calc_lowPA2_iPdi>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int size)
{
   b5ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ee4:	ed2d 8b02 	vpush	{d8}
    int cnt = 0;
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0.0;
   b5ee8:	ed9f 7b51 	vldr	d7, [pc, #324]	; b6030 <_Z8calc_lowPA2_iPdi+0x150>
{
   b5eec:	b09b      	sub	sp, #108	; 0x6c
    double last_small = 1000.0; // Assign any absurdly high value
   b5eee:	f8df 9164 	ldr.w	r9, [pc, #356]	; b6054 <_Z8calc_lowPA2_iPdi+0x174>
{
   b5ef2:	9201      	str	r2, [sp, #4]
   b5ef4:	4606      	mov	r6, r0
   b5ef6:	460f      	mov	r7, r1
   b5ef8:	468b      	mov	fp, r1

    for (int i = 0; i < size; i++)
   b5efa:	f04f 0a00 	mov.w	sl, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b5efe:	f04f 0800 	mov.w	r8, #0
    double last_big = 0.0;
   b5f02:	eeb0 8a47 	vmov.f32	s16, s14
   b5f06:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < size; i++)
   b5f0a:	9b01      	ldr	r3, [sp, #4]
   b5f0c:	459a      	cmp	sl, r3
   b5f0e:	da16      	bge.n	b5f3e <_Z8calc_lowPA2_iPdi+0x5e>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b5f10:	e8fb 4502 	ldrd	r4, r5, [fp], #8
   b5f14:	ec53 2b18 	vmov	r2, r3, d8
   b5f18:	4620      	mov	r0, r4
   b5f1a:	4629      	mov	r1, r5
   b5f1c:	f7fe fccc 	bl	b48b8 <__aeabi_dcmpgt>
   b5f20:	b108      	cbz	r0, b5f26 <_Z8calc_lowPA2_iPdi+0x46>
        {
            last_big = cost[i];
   b5f22:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b5f26:	4642      	mov	r2, r8
   b5f28:	464b      	mov	r3, r9
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	4629      	mov	r1, r5
   b5f2e:	f7fe fca5 	bl	b487c <__aeabi_dcmplt>
   b5f32:	b108      	cbz	r0, b5f38 <_Z8calc_lowPA2_iPdi+0x58>
        {
            last_small = cost[i];
   b5f34:	46a0      	mov	r8, r4
   b5f36:	46a9      	mov	r9, r5
    for (int i = 0; i < size; i++)
   b5f38:	f10a 0a01 	add.w	sl, sl, #1
   b5f3c:	e7e5      	b.n	b5f0a <_Z8calc_lowPA2_iPdi+0x2a>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b5f3e:	4642      	mov	r2, r8
   b5f40:	464b      	mov	r3, r9
   b5f42:	ec51 0b18 	vmov	r0, r1, d8
   b5f46:	f7fe f86f 	bl	b4028 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b5f4a:	a340      	add	r3, pc, #256	; (adr r3, b604c <_Z8calc_lowPA2_iPdi+0x16c>)
   b5f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f50:	f7fe fa22 	bl	b4398 <__aeabi_dmul>
   b5f54:	4642      	mov	r2, r8
   b5f56:	464b      	mov	r3, r9
   b5f58:	f7fe f868 	bl	b402c <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i < size; i++)
   b5f5c:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b5f5e:	4682      	mov	sl, r0
   b5f60:	468b      	mov	fp, r1
    int idx = 0;
   b5f62:	462c      	mov	r4, r5
    for (int i = 0; i < size; i++)
   b5f64:	9b01      	ldr	r3, [sp, #4]
   b5f66:	429d      	cmp	r5, r3
   b5f68:	da15      	bge.n	b5f96 <_Z8calc_lowPA2_iPdi+0xb6>
    {
        
        if (cost[i] < small_offset)
   b5f6a:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b5f6e:	4652      	mov	r2, sl
   b5f70:	465b      	mov	r3, fp
   b5f72:	f7fe fc83 	bl	b487c <__aeabi_dcmplt>
   b5f76:	b160      	cbz	r0, b5f92 <_Z8calc_lowPA2_iPdi+0xb2>
        {
            low_range_hour[idx] = i;
   b5f78:	ab1a      	add	r3, sp, #104	; 0x68
   b5f7a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b5f7e:	f843 5c60 	str.w	r5, [r3, #-96]
            Serial.printf("low_range_hour[%d]: %d\n",idx, low_range_hour[idx]);
   b5f82:	f004 fb91 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b5f86:	4622      	mov	r2, r4
   b5f88:	492b      	ldr	r1, [pc, #172]	; (b6038 <_Z8calc_lowPA2_iPdi+0x158>)
   b5f8a:	462b      	mov	r3, r5
   b5f8c:	f7ff fe1e 	bl	b5bcc <_ZN5Print6printfEPKcz>
            idx++;
   b5f90:	3401      	adds	r4, #1
    for (int i = 0; i < size; i++)
   b5f92:	3501      	adds	r5, #1
   b5f94:	e7e6      	b.n	b5f64 <_Z8calc_lowPA2_iPdi+0x84>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b5f96:	f004 fb87 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b5f9a:	ec53 2b18 	vmov	r2, r3, d8
   b5f9e:	4927      	ldr	r1, [pc, #156]	; (b603c <_Z8calc_lowPA2_iPdi+0x15c>)
   b5fa0:	f7ff fe14 	bl	b5bcc <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b5fa4:	f004 fb80 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b5fa8:	4925      	ldr	r1, [pc, #148]	; (b6040 <_Z8calc_lowPA2_iPdi+0x160>)
   b5faa:	4642      	mov	r2, r8
   b5fac:	464b      	mov	r3, r9
   b5fae:	f7ff fe0d 	bl	b5bcc <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b5fb2:	f004 fb79 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b5fb6:	4923      	ldr	r1, [pc, #140]	; (b6044 <_Z8calc_lowPA2_iPdi+0x164>)
   b5fb8:	f7ff fe08 	bl	b5bcc <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b5fbc:	b36c      	cbz	r4, b601a <_Z8calc_lowPA2_iPdi+0x13a>
    int i = 0;
   b5fbe:	2300      	movs	r3, #0
    int cnt = 0;
   b5fc0:	461d      	mov	r5, r3
   b5fc2:	1d37      	adds	r7, r6, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b5fc4:	aa1a      	add	r2, sp, #104	; 0x68
   b5fc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b5fca:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b5fce:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
   b5fd2:	aa02      	add	r2, sp, #8
   b5fd4:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b5fd8:	6802      	ldr	r2, [r0, #0]
   b5fda:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b5fde:	3901      	subs	r1, #1
   b5fe0:	428a      	cmp	r2, r1
   b5fe2:	f103 0301 	add.w	r3, r3, #1
   b5fe6:	d0f7      	beq.n	b5fd8 <_Z8calc_lowPA2_iPdi+0xf8>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b5fe8:	3201      	adds	r2, #1
        while (i <= idx)
   b5fea:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b5fec:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
            
            cnt++;
   b5ff0:	f105 0201 	add.w	r2, r5, #1
        while (i <= idx)
   b5ff4:	dd0f      	ble.n	b6016 <_Z8calc_lowPA2_iPdi+0x136>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b5ff6:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6058 <_Z8calc_lowPA2_iPdi+0x178>
    for (int z = 0; z < cnt; z++)
   b5ffa:	2400      	movs	r4, #0
   b5ffc:	42ac      	cmp	r4, r5
   b5ffe:	d00c      	beq.n	b601a <_Z8calc_lowPA2_iPdi+0x13a>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b6000:	f004 fb52 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6004:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b6008:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
   b600c:	4641      	mov	r1, r8
   b600e:	f7ff fddd 	bl	b5bcc <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b6012:	3401      	adds	r4, #1
   b6014:	e7f2      	b.n	b5ffc <_Z8calc_lowPA2_iPdi+0x11c>
            cnt++;
   b6016:	4615      	mov	r5, r2
   b6018:	e7d4      	b.n	b5fc4 <_Z8calc_lowPA2_iPdi+0xe4>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b601a:	4b0b      	ldr	r3, [pc, #44]	; (b6048 <_Z8calc_lowPA2_iPdi+0x168>)
   b601c:	2201      	movs	r2, #1

    return cnt;
}
   b601e:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b6020:	701a      	strb	r2, [r3, #0]
}
   b6022:	b01b      	add	sp, #108	; 0x6c
   b6024:	ecbd 8b02 	vpop	{d8}
   b6028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b602c:	f3af 8000 	nop.w
	...
   b6038:	000bd91c 	.word	0x000bd91c
   b603c:	000bd934 	.word	0x000bd934
   b6040:	000bd952 	.word	0x000bd952
   b6044:	000bd96f 	.word	0x000bd96f
   b6048:	2003d381 	.word	0x2003d381
   b604c:	33333333 	.word	0x33333333
   b6050:	3fd33333 	.word	0x3fd33333
   b6054:	408f4000 	.word	0x408f4000
   b6058:	000bd9ad 	.word	0x000bd9ad

000b605c <_Z18hourly_JSON_updatev>:
extern String pricestoday_Json;
extern String pricesyesterday_Json;
extern String pricestomorrow_Json;

void hourly_JSON_update()
{
   b605c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b605e:	491d      	ldr	r1, [pc, #116]	; (b60d4 <_Z18hourly_JSON_updatev+0x78>)
   b6060:	481d      	ldr	r0, [pc, #116]	; (b60d8 <_Z18hourly_JSON_updatev+0x7c>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b6062:	4e1e      	ldr	r6, [pc, #120]	; (b60dc <_Z18hourly_JSON_updatev+0x80>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6064:	4d1c      	ldr	r5, [pc, #112]	; (b60d8 <_Z18hourly_JSON_updatev+0x7c>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b6066:	4f1e      	ldr	r7, [pc, #120]	; (b60e0 <_Z18hourly_JSON_updatev+0x84>)
{
   b6068:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b606a:	f002 f980 	bl	b836e <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b606e:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b6070:	6833      	ldr	r3, [r6, #0]
   b6072:	220a      	movs	r2, #10
   b6074:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b6078:	4668      	mov	r0, sp
   b607a:	f002 f98a 	bl	b8392 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b607e:	4669      	mov	r1, sp
   b6080:	4628      	mov	r0, r5
   b6082:	f002 f9b0 	bl	b83e6 <_ZN6String6concatERKS_>
   b6086:	4668      	mov	r0, sp
   b6088:	f002 f8c8 	bl	b821c <_ZN6StringD1Ev>
        if (i < 23)
   b608c:	2c17      	cmp	r4, #23
   b608e:	d003      	beq.n	b6098 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b6090:	4639      	mov	r1, r7
   b6092:	4628      	mov	r0, r5
   b6094:	f002 f9ab 	bl	b83ee <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b6098:	3401      	adds	r4, #1
   b609a:	2c18      	cmp	r4, #24
   b609c:	d1e8      	bne.n	b6070 <_Z18hourly_JSON_updatev+0x14>
   b609e:	4911      	ldr	r1, [pc, #68]	; (b60e4 <_Z18hourly_JSON_updatev+0x88>)
   b60a0:	480d      	ldr	r0, [pc, #52]	; (b60d8 <_Z18hourly_JSON_updatev+0x7c>)
   b60a2:	f002 f9a4 	bl	b83ee <_ZN6String6concatEPKc>
        }
    }
    wh_today_Json += "]}";

    // Write to storage
    if (!writeWhToday(wh_today_Json))
   b60a6:	490c      	ldr	r1, [pc, #48]	; (b60d8 <_Z18hourly_JSON_updatev+0x7c>)
   b60a8:	4668      	mov	r0, sp
   b60aa:	f002 f94d 	bl	b8348 <_ZN6StringC1ERKS_>
   b60ae:	4668      	mov	r0, sp
   b60b0:	f001 fc0a 	bl	b78c8 <_Z12writeWhToday6String>
   b60b4:	4604      	mov	r4, r0
   b60b6:	4668      	mov	r0, sp
   b60b8:	f002 f8b0 	bl	b821c <_ZN6StringD1Ev>
   b60bc:	b93c      	cbnz	r4, b60ce <_Z18hourly_JSON_updatev+0x72>
        Serial.println("Writing wh_today_Json failed.");
   b60be:	f004 faf3 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b60c2:	4909      	ldr	r1, [pc, #36]	; (b60e8 <_Z18hourly_JSON_updatev+0x8c>)
}
   b60c4:	b005      	add	sp, #20
   b60c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Writing wh_today_Json failed.");
   b60ca:	f003 bc6c 	b.w	b99a6 <_ZN5Print7printlnEPKc>
}
   b60ce:	b005      	add	sp, #20
   b60d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b60d2:	bf00      	nop
   b60d4:	000bd9bb 	.word	0x000bd9bb
   b60d8:	2003e1a0 	.word	0x2003e1a0
   b60dc:	2003e19c 	.word	0x2003e19c
   b60e0:	000bd9ca 	.word	0x000bd9ca
   b60e4:	000bd9cc 	.word	0x000bd9cc
   b60e8:	000bd9cf 	.word	0x000bd9cf

000b60ec <_Z11update_JSONv>:
void update_JSON()
{
   b60ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b60ee:	b089      	sub	sp, #36	; 0x24
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b60f0:	49a0      	ldr	r1, [pc, #640]	; (b6374 <_Z11update_JSONv+0x288>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b60f2:	4ea1      	ldr	r6, [pc, #644]	; (b6378 <_Z11update_JSONv+0x28c>)
   b60f4:	4fa1      	ldr	r7, [pc, #644]	; (b637c <_Z11update_JSONv+0x290>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b60f6:	4da2      	ldr	r5, [pc, #648]	; (b6380 <_Z11update_JSONv+0x294>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b60f8:	a804      	add	r0, sp, #16
   b60fa:	f002 f9d9 	bl	b84b0 <_ZN6String6formatEPKcz>
   b60fe:	a904      	add	r1, sp, #16
   b6100:	489f      	ldr	r0, [pc, #636]	; (b6380 <_Z11update_JSONv+0x294>)
   b6102:	f002 f92c 	bl	b835e <_ZN6StringaSEOS_>
   b6106:	a804      	add	r0, sp, #16
   b6108:	f002 f888 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b610c:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b610e:	6833      	ldr	r3, [r6, #0]
   b6110:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b6114:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6118:	4639      	mov	r1, r7
   b611a:	a804      	add	r0, sp, #16
   b611c:	f002 f9c8 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6120:	a904      	add	r1, sp, #16
   b6122:	4628      	mov	r0, r5
   b6124:	f002 f95f 	bl	b83e6 <_ZN6String6concatERKS_>
   b6128:	a804      	add	r0, sp, #16
   b612a:	f002 f877 	bl	b821c <_ZN6StringD1Ev>
        if (i < 23)
   b612e:	2c17      	cmp	r4, #23
   b6130:	d00a      	beq.n	b6148 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b6132:	4994      	ldr	r1, [pc, #592]	; (b6384 <_Z11update_JSONv+0x298>)
   b6134:	a804      	add	r0, sp, #16
   b6136:	f002 f9bb 	bl	b84b0 <_ZN6String6formatEPKcz>
   b613a:	a904      	add	r1, sp, #16
   b613c:	4628      	mov	r0, r5
   b613e:	f002 f952 	bl	b83e6 <_ZN6String6concatERKS_>
   b6142:	a804      	add	r0, sp, #16
   b6144:	f002 f86a 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b6148:	3401      	adds	r4, #1
   b614a:	2c18      	cmp	r4, #24
   b614c:	d1df      	bne.n	b610e <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b614e:	498e      	ldr	r1, [pc, #568]	; (b6388 <_Z11update_JSONv+0x29c>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b6150:	4e8e      	ldr	r6, [pc, #568]	; (b638c <_Z11update_JSONv+0x2a0>)
   b6152:	4f8a      	ldr	r7, [pc, #552]	; (b637c <_Z11update_JSONv+0x290>)
   b6154:	4d8e      	ldr	r5, [pc, #568]	; (b6390 <_Z11update_JSONv+0x2a4>)
    pricesyesterday_Json += String::format("]}");
   b6156:	a804      	add	r0, sp, #16
   b6158:	f002 f9aa 	bl	b84b0 <_ZN6String6formatEPKcz>
   b615c:	a904      	add	r1, sp, #16
   b615e:	4888      	ldr	r0, [pc, #544]	; (b6380 <_Z11update_JSONv+0x294>)
   b6160:	f002 f941 	bl	b83e6 <_ZN6String6concatERKS_>
   b6164:	a804      	add	r0, sp, #16
   b6166:	f002 f859 	bl	b821c <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b616a:	498a      	ldr	r1, [pc, #552]	; (b6394 <_Z11update_JSONv+0x2a8>)
   b616c:	a804      	add	r0, sp, #16
   b616e:	f002 f99f 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6172:	a904      	add	r1, sp, #16
   b6174:	4886      	ldr	r0, [pc, #536]	; (b6390 <_Z11update_JSONv+0x2a4>)
   b6176:	f002 f8f2 	bl	b835e <_ZN6StringaSEOS_>
   b617a:	a804      	add	r0, sp, #16
   b617c:	f002 f84e 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b6180:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b6182:	6833      	ldr	r3, [r6, #0]
   b6184:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b6188:	e9d3 2300 	ldrd	r2, r3, [r3]
   b618c:	4639      	mov	r1, r7
   b618e:	a804      	add	r0, sp, #16
   b6190:	f002 f98e 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6194:	a904      	add	r1, sp, #16
   b6196:	4628      	mov	r0, r5
   b6198:	f002 f925 	bl	b83e6 <_ZN6String6concatERKS_>
   b619c:	a804      	add	r0, sp, #16
   b619e:	f002 f83d 	bl	b821c <_ZN6StringD1Ev>
        if (i < 23)
   b61a2:	2c17      	cmp	r4, #23
   b61a4:	d00a      	beq.n	b61bc <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b61a6:	4977      	ldr	r1, [pc, #476]	; (b6384 <_Z11update_JSONv+0x298>)
   b61a8:	a804      	add	r0, sp, #16
   b61aa:	f002 f981 	bl	b84b0 <_ZN6String6formatEPKcz>
   b61ae:	a904      	add	r1, sp, #16
   b61b0:	4628      	mov	r0, r5
   b61b2:	f002 f918 	bl	b83e6 <_ZN6String6concatERKS_>
   b61b6:	a804      	add	r0, sp, #16
   b61b8:	f002 f830 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b61bc:	3401      	adds	r4, #1
   b61be:	2c18      	cmp	r4, #24
   b61c0:	d1df      	bne.n	b6182 <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b61c2:	4971      	ldr	r1, [pc, #452]	; (b6388 <_Z11update_JSONv+0x29c>)

    // Updating prices today JSON string
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b61c4:	4e74      	ldr	r6, [pc, #464]	; (b6398 <_Z11update_JSONv+0x2ac>)
   b61c6:	4f6d      	ldr	r7, [pc, #436]	; (b637c <_Z11update_JSONv+0x290>)
   b61c8:	4d74      	ldr	r5, [pc, #464]	; (b639c <_Z11update_JSONv+0x2b0>)
    pricestoday_Json += String::format("]}");
   b61ca:	a804      	add	r0, sp, #16
   b61cc:	f002 f970 	bl	b84b0 <_ZN6String6formatEPKcz>
   b61d0:	a904      	add	r1, sp, #16
   b61d2:	486f      	ldr	r0, [pc, #444]	; (b6390 <_Z11update_JSONv+0x2a4>)
   b61d4:	f002 f907 	bl	b83e6 <_ZN6String6concatERKS_>
   b61d8:	a804      	add	r0, sp, #16
   b61da:	f002 f81f 	bl	b821c <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b61de:	4970      	ldr	r1, [pc, #448]	; (b63a0 <_Z11update_JSONv+0x2b4>)
   b61e0:	a804      	add	r0, sp, #16
   b61e2:	f002 f965 	bl	b84b0 <_ZN6String6formatEPKcz>
   b61e6:	a904      	add	r1, sp, #16
   b61e8:	486c      	ldr	r0, [pc, #432]	; (b639c <_Z11update_JSONv+0x2b0>)
   b61ea:	f002 f8b8 	bl	b835e <_ZN6StringaSEOS_>
   b61ee:	a804      	add	r0, sp, #16
   b61f0:	f002 f814 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b61f4:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b61f6:	6833      	ldr	r3, [r6, #0]
   b61f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b61fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6200:	4639      	mov	r1, r7
   b6202:	a804      	add	r0, sp, #16
   b6204:	f002 f954 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6208:	a904      	add	r1, sp, #16
   b620a:	4628      	mov	r0, r5
   b620c:	f002 f8eb 	bl	b83e6 <_ZN6String6concatERKS_>
   b6210:	a804      	add	r0, sp, #16
   b6212:	f002 f803 	bl	b821c <_ZN6StringD1Ev>
        if (i < 23)
   b6216:	2c17      	cmp	r4, #23
   b6218:	d00a      	beq.n	b6230 <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b621a:	495a      	ldr	r1, [pc, #360]	; (b6384 <_Z11update_JSONv+0x298>)
   b621c:	a804      	add	r0, sp, #16
   b621e:	f002 f947 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6222:	a904      	add	r1, sp, #16
   b6224:	4628      	mov	r0, r5
   b6226:	f002 f8de 	bl	b83e6 <_ZN6String6concatERKS_>
   b622a:	a804      	add	r0, sp, #16
   b622c:	f001 fff6 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b6230:	3401      	adds	r4, #1
   b6232:	2c18      	cmp	r4, #24
   b6234:	d1df      	bne.n	b61f6 <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b6236:	4954      	ldr	r1, [pc, #336]	; (b6388 <_Z11update_JSONv+0x29c>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b6238:	4e5a      	ldr	r6, [pc, #360]	; (b63a4 <_Z11update_JSONv+0x2b8>)
   b623a:	4f5b      	ldr	r7, [pc, #364]	; (b63a8 <_Z11update_JSONv+0x2bc>)
   b623c:	4d5b      	ldr	r5, [pc, #364]	; (b63ac <_Z11update_JSONv+0x2c0>)
    pricestomorrow_Json += String::format("]}");
   b623e:	a804      	add	r0, sp, #16
   b6240:	f002 f936 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6244:	a904      	add	r1, sp, #16
   b6246:	4855      	ldr	r0, [pc, #340]	; (b639c <_Z11update_JSONv+0x2b0>)
   b6248:	f002 f8cd 	bl	b83e6 <_ZN6String6concatERKS_>
   b624c:	a804      	add	r0, sp, #16
   b624e:	f001 ffe5 	bl	b821c <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b6252:	4957      	ldr	r1, [pc, #348]	; (b63b0 <_Z11update_JSONv+0x2c4>)
   b6254:	a804      	add	r0, sp, #16
   b6256:	f002 f92b 	bl	b84b0 <_ZN6String6formatEPKcz>
   b625a:	a904      	add	r1, sp, #16
   b625c:	4853      	ldr	r0, [pc, #332]	; (b63ac <_Z11update_JSONv+0x2c0>)
   b625e:	f002 f87e 	bl	b835e <_ZN6StringaSEOS_>
   b6262:	a804      	add	r0, sp, #16
   b6264:	f001 ffda 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b6268:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b626a:	6833      	ldr	r3, [r6, #0]
   b626c:	4639      	mov	r1, r7
   b626e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b6272:	a804      	add	r0, sp, #16
   b6274:	f002 f91c 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6278:	a904      	add	r1, sp, #16
   b627a:	4628      	mov	r0, r5
   b627c:	f002 f8b3 	bl	b83e6 <_ZN6String6concatERKS_>
   b6280:	a804      	add	r0, sp, #16
   b6282:	f001 ffcb 	bl	b821c <_ZN6StringD1Ev>
        if (i < 23)
   b6286:	2c17      	cmp	r4, #23
   b6288:	d00a      	beq.n	b62a0 <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b628a:	493e      	ldr	r1, [pc, #248]	; (b6384 <_Z11update_JSONv+0x298>)
   b628c:	a804      	add	r0, sp, #16
   b628e:	f002 f90f 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6292:	a904      	add	r1, sp, #16
   b6294:	4628      	mov	r0, r5
   b6296:	f002 f8a6 	bl	b83e6 <_ZN6String6concatERKS_>
   b629a:	a804      	add	r0, sp, #16
   b629c:	f001 ffbe 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b62a0:	3401      	adds	r4, #1
   b62a2:	2c18      	cmp	r4, #24
   b62a4:	d1e1      	bne.n	b626a <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b62a6:	4938      	ldr	r1, [pc, #224]	; (b6388 <_Z11update_JSONv+0x29c>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b62a8:	4e42      	ldr	r6, [pc, #264]	; (b63b4 <_Z11update_JSONv+0x2c8>)
   b62aa:	4f3f      	ldr	r7, [pc, #252]	; (b63a8 <_Z11update_JSONv+0x2bc>)
   b62ac:	4d42      	ldr	r5, [pc, #264]	; (b63b8 <_Z11update_JSONv+0x2cc>)
    wh_yesterday_Json += String::format("]}");
   b62ae:	a804      	add	r0, sp, #16
   b62b0:	f002 f8fe 	bl	b84b0 <_ZN6String6formatEPKcz>
   b62b4:	a904      	add	r1, sp, #16
   b62b6:	483d      	ldr	r0, [pc, #244]	; (b63ac <_Z11update_JSONv+0x2c0>)
   b62b8:	f002 f895 	bl	b83e6 <_ZN6String6concatERKS_>
   b62bc:	a804      	add	r0, sp, #16
   b62be:	f001 ffad 	bl	b821c <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b62c2:	493e      	ldr	r1, [pc, #248]	; (b63bc <_Z11update_JSONv+0x2d0>)
   b62c4:	a804      	add	r0, sp, #16
   b62c6:	f002 f8f3 	bl	b84b0 <_ZN6String6formatEPKcz>
   b62ca:	a904      	add	r1, sp, #16
   b62cc:	483a      	ldr	r0, [pc, #232]	; (b63b8 <_Z11update_JSONv+0x2cc>)
   b62ce:	f002 f846 	bl	b835e <_ZN6StringaSEOS_>
   b62d2:	a804      	add	r0, sp, #16
   b62d4:	f001 ffa2 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b62d8:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b62da:	6833      	ldr	r3, [r6, #0]
   b62dc:	4639      	mov	r1, r7
   b62de:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b62e2:	a804      	add	r0, sp, #16
   b62e4:	f002 f8e4 	bl	b84b0 <_ZN6String6formatEPKcz>
   b62e8:	a904      	add	r1, sp, #16
   b62ea:	4628      	mov	r0, r5
   b62ec:	f002 f87b 	bl	b83e6 <_ZN6String6concatERKS_>
   b62f0:	a804      	add	r0, sp, #16
   b62f2:	f001 ff93 	bl	b821c <_ZN6StringD1Ev>
        if (i < 23)
   b62f6:	2c17      	cmp	r4, #23
   b62f8:	d00a      	beq.n	b6310 <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b62fa:	4922      	ldr	r1, [pc, #136]	; (b6384 <_Z11update_JSONv+0x298>)
   b62fc:	a804      	add	r0, sp, #16
   b62fe:	f002 f8d7 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6302:	a904      	add	r1, sp, #16
   b6304:	4628      	mov	r0, r5
   b6306:	f002 f86e 	bl	b83e6 <_ZN6String6concatERKS_>
   b630a:	a804      	add	r0, sp, #16
   b630c:	f001 ff86 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b6310:	3401      	adds	r4, #1
   b6312:	2c18      	cmp	r4, #24
   b6314:	d1e1      	bne.n	b62da <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b6316:	491c      	ldr	r1, [pc, #112]	; (b6388 <_Z11update_JSONv+0x29c>)
   b6318:	a804      	add	r0, sp, #16
   b631a:	f002 f8c9 	bl	b84b0 <_ZN6String6formatEPKcz>
   b631e:	a904      	add	r1, sp, #16
   b6320:	4825      	ldr	r0, [pc, #148]	; (b63b8 <_Z11update_JSONv+0x2cc>)
   b6322:	f002 f860 	bl	b83e6 <_ZN6String6concatERKS_>
   b6326:	a804      	add	r0, sp, #16
   b6328:	f001 ff78 	bl	b821c <_ZN6StringD1Ev>

    // Write to storage
    if (!writeWhToday(wh_today_Json) || writeWhYesterday(wh_yesterday_Json))
   b632c:	4922      	ldr	r1, [pc, #136]	; (b63b8 <_Z11update_JSONv+0x2cc>)
   b632e:	4668      	mov	r0, sp
   b6330:	f002 f80a 	bl	b8348 <_ZN6StringC1ERKS_>
   b6334:	4668      	mov	r0, sp
   b6336:	f001 fac7 	bl	b78c8 <_Z12writeWhToday6String>
   b633a:	b1b0      	cbz	r0, b636a <_Z11update_JSONv+0x27e>
   b633c:	491b      	ldr	r1, [pc, #108]	; (b63ac <_Z11update_JSONv+0x2c0>)
   b633e:	a804      	add	r0, sp, #16
   b6340:	f002 f802 	bl	b8348 <_ZN6StringC1ERKS_>
   b6344:	a804      	add	r0, sp, #16
   b6346:	f001 fad1 	bl	b78ec <_Z16writeWhYesterday6String>
   b634a:	4604      	mov	r4, r0
   b634c:	a804      	add	r0, sp, #16
   b634e:	f001 ff65 	bl	b821c <_ZN6StringD1Ev>
   b6352:	4668      	mov	r0, sp
   b6354:	f001 ff62 	bl	b821c <_ZN6StringD1Ev>
   b6358:	b14c      	cbz	r4, b636e <_Z11update_JSONv+0x282>
        Serial.println("Writing watt hours failed.");
   b635a:	f004 f9a5 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b635e:	4918      	ldr	r1, [pc, #96]	; (b63c0 <_Z11update_JSONv+0x2d4>)
}
   b6360:	b009      	add	sp, #36	; 0x24
   b6362:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Writing watt hours failed.");
   b6366:	f003 bb1e 	b.w	b99a6 <_ZN5Print7printlnEPKc>
    if (!writeWhToday(wh_today_Json) || writeWhYesterday(wh_yesterday_Json))
   b636a:	2401      	movs	r4, #1
   b636c:	e7f1      	b.n	b6352 <_Z11update_JSONv+0x266>
}
   b636e:	b009      	add	sp, #36	; 0x24
   b6370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6372:	bf00      	nop
   b6374:	000bd9ed 	.word	0x000bd9ed
   b6378:	2003d4a0 	.word	0x2003d4a0
   b637c:	000bda02 	.word	0x000bda02
   b6380:	2003dd0c 	.word	0x2003dd0c
   b6384:	000bd9ca 	.word	0x000bd9ca
   b6388:	000bd9cc 	.word	0x000bd9cc
   b638c:	2003d498 	.word	0x2003d498
   b6390:	2003dcec 	.word	0x2003dcec
   b6394:	000bda08 	.word	0x000bda08
   b6398:	2003d49c 	.word	0x2003d49c
   b639c:	2003dcfc 	.word	0x2003dcfc
   b63a0:	000bda19 	.word	0x000bda19
   b63a4:	2003e1b0 	.word	0x2003e1b0
   b63a8:	000be0cc 	.word	0x000be0cc
   b63ac:	2003e1b4 	.word	0x2003e1b4
   b63b0:	000bda2d 	.word	0x000bda2d
   b63b4:	2003e19c 	.word	0x2003e19c
   b63b8:	2003e1a0 	.word	0x2003e1a0
   b63bc:	000bda40 	.word	0x000bda40
   b63c0:	000bda4f 	.word	0x000bda4f

000b63c4 <_Z21update_Whr_Today_JSONv>:
String update_Whr_Today_JSON()
{
   b63c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
   b63c8:	4929      	ldr	r1, [pc, #164]	; (b6470 <_Z21update_Whr_Today_JSONv+0xac>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b63ca:	4f2a      	ldr	r7, [pc, #168]	; (b6474 <_Z21update_Whr_Today_JSONv+0xb0>)
   b63cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6488 <_Z21update_Whr_Today_JSONv+0xc4>
   b63d0:	4e29      	ldr	r6, [pc, #164]	; (b6478 <_Z21update_Whr_Today_JSONv+0xb4>)
{
   b63d2:	4605      	mov	r5, r0
    wh_today_Json = String::format("{\"WHr_today\":[");
   b63d4:	4668      	mov	r0, sp
   b63d6:	f002 f86b 	bl	b84b0 <_ZN6String6formatEPKcz>
   b63da:	4669      	mov	r1, sp
   b63dc:	4826      	ldr	r0, [pc, #152]	; (b6478 <_Z21update_Whr_Today_JSONv+0xb4>)
   b63de:	f001 ffbe 	bl	b835e <_ZN6StringaSEOS_>
   b63e2:	4668      	mov	r0, sp
   b63e4:	f001 ff1a 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b63e8:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b63ea:	683b      	ldr	r3, [r7, #0]
   b63ec:	4641      	mov	r1, r8
   b63ee:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b63f2:	4668      	mov	r0, sp
   b63f4:	f002 f85c 	bl	b84b0 <_ZN6String6formatEPKcz>
   b63f8:	4669      	mov	r1, sp
   b63fa:	4630      	mov	r0, r6
   b63fc:	f001 fff3 	bl	b83e6 <_ZN6String6concatERKS_>
   b6400:	4668      	mov	r0, sp
   b6402:	f001 ff0b 	bl	b821c <_ZN6StringD1Ev>
        if (i < 23)
   b6406:	2c17      	cmp	r4, #23
   b6408:	d00a      	beq.n	b6420 <_Z21update_Whr_Today_JSONv+0x5c>
        {
            wh_today_Json += String::format(",");
   b640a:	491c      	ldr	r1, [pc, #112]	; (b647c <_Z21update_Whr_Today_JSONv+0xb8>)
   b640c:	4668      	mov	r0, sp
   b640e:	f002 f84f 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6412:	4669      	mov	r1, sp
   b6414:	4630      	mov	r0, r6
   b6416:	f001 ffe6 	bl	b83e6 <_ZN6String6concatERKS_>
   b641a:	4668      	mov	r0, sp
   b641c:	f001 fefe 	bl	b821c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b6420:	3401      	adds	r4, #1
   b6422:	2c18      	cmp	r4, #24
   b6424:	d1e1      	bne.n	b63ea <_Z21update_Whr_Today_JSONv+0x26>
        }
    }
    wh_today_Json += String::format("]}");
   b6426:	4916      	ldr	r1, [pc, #88]	; (b6480 <_Z21update_Whr_Today_JSONv+0xbc>)
   b6428:	4668      	mov	r0, sp
   b642a:	f002 f841 	bl	b84b0 <_ZN6String6formatEPKcz>
   b642e:	4669      	mov	r1, sp
   b6430:	4811      	ldr	r0, [pc, #68]	; (b6478 <_Z21update_Whr_Today_JSONv+0xb4>)
   b6432:	f001 ffd8 	bl	b83e6 <_ZN6String6concatERKS_>
   b6436:	4668      	mov	r0, sp
   b6438:	f001 fef0 	bl	b821c <_ZN6StringD1Ev>

    // Write to storage
    if (!writeWhToday(wh_today_Json))
   b643c:	490e      	ldr	r1, [pc, #56]	; (b6478 <_Z21update_Whr_Today_JSONv+0xb4>)
   b643e:	4668      	mov	r0, sp
   b6440:	f001 ff82 	bl	b8348 <_ZN6StringC1ERKS_>
   b6444:	4668      	mov	r0, sp
   b6446:	f001 fa3f 	bl	b78c8 <_Z12writeWhToday6String>
   b644a:	4604      	mov	r4, r0
   b644c:	4668      	mov	r0, sp
   b644e:	f001 fee5 	bl	b821c <_ZN6StringD1Ev>
   b6452:	b924      	cbnz	r4, b645e <_Z21update_Whr_Today_JSONv+0x9a>
        Serial.println("Writing wh_today_Json failed.");
   b6454:	f004 f928 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6458:	490a      	ldr	r1, [pc, #40]	; (b6484 <_Z21update_Whr_Today_JSONv+0xc0>)
   b645a:	f003 faa4 	bl	b99a6 <_ZN5Print7printlnEPKc>

    return wh_today_Json;
   b645e:	4906      	ldr	r1, [pc, #24]	; (b6478 <_Z21update_Whr_Today_JSONv+0xb4>)
   b6460:	4628      	mov	r0, r5
   b6462:	f001 ff71 	bl	b8348 <_ZN6StringC1ERKS_>
   b6466:	4628      	mov	r0, r5
   b6468:	b004      	add	sp, #16
   b646a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b646e:	bf00      	nop
   b6470:	000bda40 	.word	0x000bda40
   b6474:	2003e19c 	.word	0x2003e19c
   b6478:	2003e1a0 	.word	0x2003e1a0
   b647c:	000bd9ca 	.word	0x000bd9ca
   b6480:	000bd9cc 	.word	0x000bd9cc
   b6484:	000bd9cf 	.word	0x000bd9cf
   b6488:	000be0cc 	.word	0x000be0cc

000b648c <_Z11init_memoryv>:
{
   b648c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b6490:	20c0      	movs	r0, #192	; 0xc0
   b6492:	f001 fd93 	bl	b7fbc <malloc>
   b6496:	4d38      	ldr	r5, [pc, #224]	; (b6578 <_Z11init_memoryv+0xec>)
   b6498:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b649a:	b928      	cbnz	r0, b64a8 <_Z11init_memoryv+0x1c>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b649c:	f004 f904 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b64a0:	4936      	ldr	r1, [pc, #216]	; (b657c <_Z11init_memoryv+0xf0>)
   b64a2:	f7ff fb93 	bl	b5bcc <_ZN5Print6printfEPKcz>
        while (1)
   b64a6:	e7fe      	b.n	b64a6 <_Z11init_memoryv+0x1a>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b64a8:	20c0      	movs	r0, #192	; 0xc0
   b64aa:	f001 fd87 	bl	b7fbc <malloc>
   b64ae:	4c34      	ldr	r4, [pc, #208]	; (b6580 <_Z11init_memoryv+0xf4>)
   b64b0:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b64b2:	b928      	cbnz	r0, b64c0 <_Z11init_memoryv+0x34>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b64b4:	f004 f8f8 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b64b8:	4932      	ldr	r1, [pc, #200]	; (b6584 <_Z11init_memoryv+0xf8>)
   b64ba:	f7ff fb87 	bl	b5bcc <_ZN5Print6printfEPKcz>
        while (1)
   b64be:	e7fe      	b.n	b64be <_Z11init_memoryv+0x32>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b64c0:	20c0      	movs	r0, #192	; 0xc0
   b64c2:	f001 fd7b 	bl	b7fbc <malloc>
   b64c6:	4e30      	ldr	r6, [pc, #192]	; (b6588 <_Z11init_memoryv+0xfc>)
   b64c8:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b64ca:	b928      	cbnz	r0, b64d8 <_Z11init_memoryv+0x4c>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b64cc:	f004 f8ec 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b64d0:	492e      	ldr	r1, [pc, #184]	; (b658c <_Z11init_memoryv+0x100>)
   b64d2:	f7ff fb7b 	bl	b5bcc <_ZN5Print6printfEPKcz>
        while (1)
   b64d6:	e7fe      	b.n	b64d6 <_Z11init_memoryv+0x4a>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b64d8:	f004 f8e6 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b64dc:	492c      	ldr	r1, [pc, #176]	; (b6590 <_Z11init_memoryv+0x104>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b64de:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b65a4 <_Z11init_memoryv+0x118>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b64e2:	f44f 7210 	mov.w	r2, #576	; 0x240
   b64e6:	f7ff fb71 	bl	b5bcc <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b64ea:	2060      	movs	r0, #96	; 0x60
   b64ec:	f001 fd66 	bl	b7fbc <malloc>
   b64f0:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b64f4:	b928      	cbnz	r0, b6502 <_Z11init_memoryv+0x76>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b64f6:	f004 f8d7 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b64fa:	4926      	ldr	r1, [pc, #152]	; (b6594 <_Z11init_memoryv+0x108>)
   b64fc:	f7ff fb66 	bl	b5bcc <_ZN5Print6printfEPKcz>
        while (1)
   b6500:	e7fe      	b.n	b6500 <_Z11init_memoryv+0x74>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b6502:	2060      	movs	r0, #96	; 0x60
   b6504:	f001 fd5a 	bl	b7fbc <malloc>
   b6508:	f8df 909c 	ldr.w	r9, [pc, #156]	; b65a8 <_Z11init_memoryv+0x11c>
   b650c:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b6510:	b928      	cbnz	r0, b651e <_Z11init_memoryv+0x92>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b6512:	f004 f8c9 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6516:	4920      	ldr	r1, [pc, #128]	; (b6598 <_Z11init_memoryv+0x10c>)
   b6518:	f7ff fb58 	bl	b5bcc <_ZN5Print6printfEPKcz>
        while (1)
   b651c:	e7fe      	b.n	b651c <_Z11init_memoryv+0x90>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b651e:	f004 f8c3 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6522:	491e      	ldr	r1, [pc, #120]	; (b659c <_Z11init_memoryv+0x110>)
   b6524:	22c0      	movs	r2, #192	; 0xc0
   b6526:	f7ff fb51 	bl	b5bcc <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b652a:	f004 f8bd 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b652e:	4607      	mov	r7, r0
   b6530:	f001 fe04 	bl	b813c <_ZN11SystemClass10freeMemoryEv>
   b6534:	491a      	ldr	r1, [pc, #104]	; (b65a0 <_Z11init_memoryv+0x114>)
   b6536:	4602      	mov	r2, r0
   b6538:	4638      	mov	r0, r7
   b653a:	f7ff fb47 	bl	b5bcc <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b653e:	6828      	ldr	r0, [r5, #0]
   b6540:	22c0      	movs	r2, #192	; 0xc0
   b6542:	2100      	movs	r1, #0
   b6544:	f005 f873 	bl	bb62e <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b6548:	6820      	ldr	r0, [r4, #0]
   b654a:	22c0      	movs	r2, #192	; 0xc0
   b654c:	2100      	movs	r1, #0
   b654e:	f005 f86e 	bl	bb62e <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b6552:	6830      	ldr	r0, [r6, #0]
   b6554:	22c0      	movs	r2, #192	; 0xc0
   b6556:	2100      	movs	r1, #0
   b6558:	f005 f869 	bl	bb62e <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b655c:	f8d8 0000 	ldr.w	r0, [r8]
   b6560:	2260      	movs	r2, #96	; 0x60
   b6562:	2100      	movs	r1, #0
   b6564:	f005 f863 	bl	bb62e <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b6568:	f8d9 0000 	ldr.w	r0, [r9]
   b656c:	2260      	movs	r2, #96	; 0x60
}
   b656e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b6572:	2100      	movs	r1, #0
   b6574:	f005 b85b 	b.w	bb62e <memset>
   b6578:	2003d4a0 	.word	0x2003d4a0
   b657c:	000bda6a 	.word	0x000bda6a
   b6580:	2003d498 	.word	0x2003d498
   b6584:	000bda98 	.word	0x000bda98
   b6588:	2003d49c 	.word	0x2003d49c
   b658c:	000bdac2 	.word	0x000bdac2
   b6590:	000bdaef 	.word	0x000bdaef
   b6594:	000bdb21 	.word	0x000bdb21
   b6598:	000bdb49 	.word	0x000bdb49
   b659c:	000bdb75 	.word	0x000bdb75
   b65a0:	000bdba0 	.word	0x000bdba0
   b65a4:	2003e19c 	.word	0x2003e19c
   b65a8:	2003e1b0 	.word	0x2003e1b0

000b65ac <_Z13rotate_pricesv>:
{
   b65ac:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b65ae:	4a0c      	ldr	r2, [pc, #48]	; (b65e0 <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b65b0:	4b0c      	ldr	r3, [pc, #48]	; (b65e4 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b65b2:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b65b4:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b65b6:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b65b8:	4b0b      	ldr	r3, [pc, #44]	; (b65e8 <_Z13rotate_pricesv+0x3c>)
   b65ba:	6819      	ldr	r1, [r3, #0]
   b65bc:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b65be:	22c0      	movs	r2, #192	; 0xc0
   b65c0:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b65c2:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b65c4:	f005 f833 	bl	bb62e <memset>
    int *temp2 = wh_yesterday;
   b65c8:	4a08      	ldr	r2, [pc, #32]	; (b65ec <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b65ca:	4b09      	ldr	r3, [pc, #36]	; (b65f0 <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b65cc:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b65ce:	6819      	ldr	r1, [r3, #0]
   b65d0:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b65d2:	6018      	str	r0, [r3, #0]
}
   b65d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b65d8:	2260      	movs	r2, #96	; 0x60
   b65da:	2100      	movs	r1, #0
   b65dc:	f005 b827 	b.w	bb62e <memset>
   b65e0:	2003d498 	.word	0x2003d498
   b65e4:	2003d4a0 	.word	0x2003d4a0
   b65e8:	2003d49c 	.word	0x2003d49c
   b65ec:	2003e1b0 	.word	0x2003e1b0
   b65f0:	2003e19c 	.word	0x2003e19c

000b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b65f4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b65f6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b65f8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b65fa:	b17c      	cbz	r4, b661c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b65fc:	6863      	ldr	r3, [r4, #4]
   b65fe:	3b01      	subs	r3, #1
   b6600:	6063      	str	r3, [r4, #4]
   b6602:	b95b      	cbnz	r3, b661c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b6604:	6823      	ldr	r3, [r4, #0]
   b6606:	4620      	mov	r0, r4
   b6608:	689b      	ldr	r3, [r3, #8]
   b660a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b660c:	68a3      	ldr	r3, [r4, #8]
   b660e:	3b01      	subs	r3, #1
   b6610:	60a3      	str	r3, [r4, #8]
   b6612:	b91b      	cbnz	r3, b661c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b6614:	6823      	ldr	r3, [r4, #0]
   b6616:	4620      	mov	r0, r4
   b6618:	68db      	ldr	r3, [r3, #12]
   b661a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b661c:	4628      	mov	r0, r5
   b661e:	bd38      	pop	{r3, r4, r5, pc}

000b6620 <_Z15transmit_pricesPA2_ii>:
{
   b6620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6624:	b08a      	sub	sp, #40	; 0x28
   b6626:	4605      	mov	r5, r0
   b6628:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b662a:	f004 f83d 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b662e:	4918      	ldr	r1, [pc, #96]	; (b6690 <_Z15transmit_pricesPA2_ii+0x70>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b6630:	4f18      	ldr	r7, [pc, #96]	; (b6694 <_Z15transmit_pricesPA2_ii+0x74>)
    Serial.printf("In work\n");
   b6632:	f7ff facb 	bl	b5bcc <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b6636:	4918      	ldr	r1, [pc, #96]	; (b6698 <_Z15transmit_pricesPA2_ii+0x78>)
   b6638:	a802      	add	r0, sp, #8
   b663a:	f001 fe3a 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b663e:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b6640:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b6644:	42b4      	cmp	r4, r6
   b6646:	da10      	bge.n	b666a <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b6648:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b664c:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b6650:	4639      	mov	r1, r7
   b6652:	a806      	add	r0, sp, #24
   b6654:	f001 ff2c 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6658:	a906      	add	r1, sp, #24
   b665a:	a802      	add	r0, sp, #8
   b665c:	f001 fec3 	bl	b83e6 <_ZN6String6concatERKS_>
   b6660:	a806      	add	r0, sp, #24
   b6662:	f001 fddb 	bl	b821c <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b6666:	3401      	adds	r4, #1
   b6668:	e7ec      	b.n	b6644 <_Z15transmit_pricesPA2_ii+0x24>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b666a:	4b0c      	ldr	r3, [pc, #48]	; (b669c <_Z15transmit_pricesPA2_ii+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b666c:	9a02      	ldr	r2, [sp, #8]
   b666e:	781b      	ldrb	r3, [r3, #0]
   b6670:	490b      	ldr	r1, [pc, #44]	; (b66a0 <_Z15transmit_pricesPA2_ii+0x80>)
   b6672:	f88d 3000 	strb.w	r3, [sp]
   b6676:	a806      	add	r0, sp, #24
   b6678:	233c      	movs	r3, #60	; 0x3c
   b667a:	f003 fdb9 	bl	ba1f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b667e:	a807      	add	r0, sp, #28
   b6680:	f7ff ffb8 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String data = "Cheap(ish) hours of the day: ";
   b6684:	a802      	add	r0, sp, #8
   b6686:	f001 fdc9 	bl	b821c <_ZN6StringD1Ev>
}
   b668a:	b00a      	add	sp, #40	; 0x28
   b668c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6690:	000bdbab 	.word	0x000bdbab
   b6694:	000bdbd2 	.word	0x000bdbd2
   b6698:	000bdbb4 	.word	0x000bdbb4
   b669c:	2003d428 	.word	0x2003d428
   b66a0:	000bdbe1 	.word	0x000bdbe1

000b66a4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b66a4:	b082      	sub	sp, #8
   b66a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b66a8:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b66aa:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b66ac:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b66ae:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b66b0:	e9c0 3300 	strd	r3, r3, [r0]
   b66b4:	4606      	mov	r6, r0
   b66b6:	4694      	mov	ip, r2
   b66b8:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b66ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66bc:	ac04      	add	r4, sp, #16
   b66be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66c0:	682b      	ldr	r3, [r5, #0]
   b66c2:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b66c4:	ad1a      	add	r5, sp, #104	; 0x68
   b66c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66c8:	ac09      	add	r4, sp, #36	; 0x24
   b66ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66cc:	682b      	ldr	r3, [r5, #0]
   b66ce:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b66d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b66d2:	9302      	str	r3, [sp, #8]
   b66d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b66d6:	9301      	str	r3, [sp, #4]
   b66d8:	ab09      	add	r3, sp, #36	; 0x24
   b66da:	9300      	str	r3, [sp, #0]
   b66dc:	4630      	mov	r0, r6
   b66de:	ab04      	add	r3, sp, #16
   b66e0:	4662      	mov	r2, ip
   b66e2:	4639      	mov	r1, r7
   b66e4:	f002 feb6 	bl	b9454 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b66e8:	4630      	mov	r0, r6
   b66ea:	b00f      	add	sp, #60	; 0x3c
   b66ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b66f0:	b002      	add	sp, #8
   b66f2:	4770      	bx	lr

000b66f4 <_GLOBAL__sub_I_argonName>:
   b66f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b66f8:	4b90      	ldr	r3, [pc, #576]	; (b693c <_GLOBAL__sub_I_argonName+0x248>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b66fa:	4d91      	ldr	r5, [pc, #580]	; (b6940 <_GLOBAL__sub_I_argonName+0x24c>)
const BleUuid wattcharacteristicUuid(watt_c);
   b66fc:	f8df b2dc 	ldr.w	fp, [pc, #732]	; b69dc <_GLOBAL__sub_I_argonName+0x2e8>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b6700:	f8df a2dc 	ldr.w	sl, [pc, #732]	; b69e0 <_GLOBAL__sub_I_argonName+0x2ec>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b6704:	f8df 92dc 	ldr.w	r9, [pc, #732]	; b69e4 <_GLOBAL__sub_I_argonName+0x2f0>
   b6708:	f04f 0801 	mov.w	r8, #1
   b670c:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b6710:	4b8c      	ldr	r3, [pc, #560]	; (b6944 <_GLOBAL__sub_I_argonName+0x250>)
   b6712:	b093      	sub	sp, #76	; 0x4c
   b6714:	6819      	ldr	r1, [r3, #0]
   b6716:	4628      	mov	r0, r5
   b6718:	f002 f916 	bl	b8948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b671c:	4b8a      	ldr	r3, [pc, #552]	; (b6948 <_GLOBAL__sub_I_argonName+0x254>)
   b671e:	4658      	mov	r0, fp
   b6720:	6819      	ldr	r1, [r3, #0]
   b6722:	f002 f911 	bl	b8948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b6726:	4b89      	ldr	r3, [pc, #548]	; (b694c <_GLOBAL__sub_I_argonName+0x258>)
   b6728:	4650      	mov	r0, sl
   b672a:	6819      	ldr	r1, [r3, #0]
   b672c:	f002 f90c 	bl	b8948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b6730:	4b87      	ldr	r3, [pc, #540]	; (b6950 <_GLOBAL__sub_I_argonName+0x25c>)
   b6732:	4648      	mov	r0, r9
   b6734:	6819      	ldr	r1, [r3, #0]
   b6736:	f002 f907 	bl	b8948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b673a:	4b86      	ldr	r3, [pc, #536]	; (b6954 <_GLOBAL__sub_I_argonName+0x260>)
   b673c:	4886      	ldr	r0, [pc, #536]	; (b6958 <_GLOBAL__sub_I_argonName+0x264>)
   b673e:	6819      	ldr	r1, [r3, #0]
   b6740:	f002 f902 	bl	b8948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b6744:	4b85      	ldr	r3, [pc, #532]	; (b695c <_GLOBAL__sub_I_argonName+0x268>)
   b6746:	4886      	ldr	r0, [pc, #536]	; (b6960 <_GLOBAL__sub_I_argonName+0x26c>)
   b6748:	6819      	ldr	r1, [r3, #0]
   b674a:	f002 f8fd 	bl	b8948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b674e:	4b85      	ldr	r3, [pc, #532]	; (b6964 <_GLOBAL__sub_I_argonName+0x270>)
   b6750:	4885      	ldr	r0, [pc, #532]	; (b6968 <_GLOBAL__sub_I_argonName+0x274>)
   b6752:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b6754:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b6756:	f002 f8f7 	bl	b8948 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b675a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b675e:	462e      	mov	r6, r5
   b6760:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6762:	2710      	movs	r7, #16
   b6764:	eb0d 0c07 	add.w	ip, sp, r7
   b6768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b676c:	6833      	ldr	r3, [r6, #0]
   b676e:	f8cc 3000 	str.w	r3, [ip]
   b6772:	f10b 0304 	add.w	r3, fp, #4
   b6776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b6778:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b677c:	f8db 3000 	ldr.w	r3, [fp]
   b6780:	497a      	ldr	r1, [pc, #488]	; (b696c <_GLOBAL__sub_I_argonName+0x278>)
   b6782:	487b      	ldr	r0, [pc, #492]	; (b6970 <_GLOBAL__sub_I_argonName+0x27c>)
   b6784:	463a      	mov	r2, r7
   b6786:	f7ff ff8d 	bl	b66a4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b678a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b678e:	46ae      	mov	lr, r5
   b6790:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b6794:	eb0d 0c07 	add.w	ip, sp, r7
   b6798:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b679c:	6833      	ldr	r3, [r6, #0]
   b679e:	f8cc 3000 	str.w	r3, [ip]
   b67a2:	f10a 0304 	add.w	r3, sl, #4
   b67a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b67a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b67ac:	f8da 3000 	ldr.w	r3, [sl]
   b67b0:	4970      	ldr	r1, [pc, #448]	; (b6974 <_GLOBAL__sub_I_argonName+0x280>)
   b67b2:	4871      	ldr	r0, [pc, #452]	; (b6978 <_GLOBAL__sub_I_argonName+0x284>)
   b67b4:	463a      	mov	r2, r7
   b67b6:	f7ff ff75 	bl	b66a4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b67ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b67be:	46ae      	mov	lr, r5
   b67c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b67c4:	eb0d 0c07 	add.w	ip, sp, r7
   b67c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b67cc:	6833      	ldr	r3, [r6, #0]
   b67ce:	f8cc 3000 	str.w	r3, [ip]
   b67d2:	f109 0304 	add.w	r3, r9, #4
   b67d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b67d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b67dc:	f8d9 3000 	ldr.w	r3, [r9]
   b67e0:	4966      	ldr	r1, [pc, #408]	; (b697c <_GLOBAL__sub_I_argonName+0x288>)
   b67e2:	4867      	ldr	r0, [pc, #412]	; (b6980 <_GLOBAL__sub_I_argonName+0x28c>)
   b67e4:	463a      	mov	r2, r7
   b67e6:	f7ff ff5d 	bl	b66a4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b67ea:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b67ee:	46ae      	mov	lr, r5
   b67f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b67f4:	eb0d 0c07 	add.w	ip, sp, r7
   b67f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b67fc:	6833      	ldr	r3, [r6, #0]
   b67fe:	f8cc 3000 	str.w	r3, [ip]
   b6802:	4b55      	ldr	r3, [pc, #340]	; (b6958 <_GLOBAL__sub_I_argonName+0x264>)
   b6804:	3304      	adds	r3, #4
   b6806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b6808:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b680c:	4b52      	ldr	r3, [pc, #328]	; (b6958 <_GLOBAL__sub_I_argonName+0x264>)
   b680e:	495d      	ldr	r1, [pc, #372]	; (b6984 <_GLOBAL__sub_I_argonName+0x290>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	485d      	ldr	r0, [pc, #372]	; (b6988 <_GLOBAL__sub_I_argonName+0x294>)
   b6814:	463a      	mov	r2, r7
   b6816:	f7ff ff45 	bl	b66a4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b681a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b681e:	46ae      	mov	lr, r5
   b6820:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b6824:	eb0d 0c07 	add.w	ip, sp, r7
   b6828:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b682c:	6833      	ldr	r3, [r6, #0]
   b682e:	f8cc 3000 	str.w	r3, [ip]
   b6832:	4b4b      	ldr	r3, [pc, #300]	; (b6960 <_GLOBAL__sub_I_argonName+0x26c>)
   b6834:	3304      	adds	r3, #4
   b6836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b6838:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b683c:	4b48      	ldr	r3, [pc, #288]	; (b6960 <_GLOBAL__sub_I_argonName+0x26c>)
   b683e:	4953      	ldr	r1, [pc, #332]	; (b698c <_GLOBAL__sub_I_argonName+0x298>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	4853      	ldr	r0, [pc, #332]	; (b6990 <_GLOBAL__sub_I_argonName+0x29c>)
   b6844:	463a      	mov	r2, r7
   b6846:	f7ff ff2d 	bl	b66a4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b684a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b684e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6850:	eb0d 0c07 	add.w	ip, sp, r7
   b6854:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6858:	4d43      	ldr	r5, [pc, #268]	; (b6968 <_GLOBAL__sub_I_argonName+0x274>)
   b685a:	6833      	ldr	r3, [r6, #0]
   b685c:	f8cc 3000 	str.w	r3, [ip]
   b6860:	1d2b      	adds	r3, r5, #4
   b6862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b6864:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b6868:	4e4a      	ldr	r6, [pc, #296]	; (b6994 <_GLOBAL__sub_I_argonName+0x2a0>)
   b686a:	682b      	ldr	r3, [r5, #0]
   b686c:	494a      	ldr	r1, [pc, #296]	; (b6998 <_GLOBAL__sub_I_argonName+0x2a4>)
   b686e:	4d4b      	ldr	r5, [pc, #300]	; (b699c <_GLOBAL__sub_I_argonName+0x2a8>)
   b6870:	484b      	ldr	r0, [pc, #300]	; (b69a0 <_GLOBAL__sub_I_argonName+0x2ac>)
   b6872:	463a      	mov	r2, r7
   b6874:	f7ff ff16 	bl	b66a4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
extern const struct transport_t transport;
/**
 * Declaring the variables.
 */
unsigned int nextTime = 0; // Next time to contact the server
HttpClient http;
   b6878:	484a      	ldr	r0, [pc, #296]	; (b69a4 <_GLOBAL__sub_I_argonName+0x2b0>)
   b687a:	f000 fb75 	bl	b6f68 <_ZN10HttpClientC1Ev>
   b687e:	4629      	mov	r1, r5
   b6880:	4630      	mov	r0, r6
   b6882:	f001 fd16 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6886:	19f0      	adds	r0, r6, r7
   b6888:	f003 fe58 	bl	ba53c <_ZN9IPAddressC1Ev>
   b688c:	4629      	mov	r1, r5
   b688e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   b6892:	f001 fd0e 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6896:	4629      	mov	r1, r5
   b6898:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   b689c:	f001 fd09 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b68a0:	4629      	mov	r1, r5
   b68a2:	4841      	ldr	r0, [pc, #260]	; (b69a8 <_GLOBAL__sub_I_argonName+0x2b4>)
   b68a4:	f001 fd05 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
uint8_t currentHour = Time.hour();
   b68a8:	f003 fa6c 	bl	b9d84 <_ZN9TimeClass4hourEv>
   b68ac:	4b3f      	ldr	r3, [pc, #252]	; (b69ac <_GLOBAL__sub_I_argonName+0x2b8>)
String pricestoday_Json;
   b68ae:	4629      	mov	r1, r5
uint8_t currentHour = Time.hour();
   b68b0:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b68b2:	483f      	ldr	r0, [pc, #252]	; (b69b0 <_GLOBAL__sub_I_argonName+0x2bc>)
   b68b4:	f001 fcfd 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b68b8:	4629      	mov	r1, r5
   b68ba:	483e      	ldr	r0, [pc, #248]	; (b69b4 <_GLOBAL__sub_I_argonName+0x2c0>)
   b68bc:	f001 fcf9 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b68c0:	4629      	mov	r1, r5
   b68c2:	483d      	ldr	r0, [pc, #244]	; (b69b8 <_GLOBAL__sub_I_argonName+0x2c4>)
   b68c4:	f001 fcf5 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b68c8:	4629      	mov	r1, r5
   b68ca:	483c      	ldr	r0, [pc, #240]	; (b69bc <_GLOBAL__sub_I_argonName+0x2c8>)
   b68cc:	f001 fcf1 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b68d0:	4629      	mov	r1, r5
   b68d2:	483b      	ldr	r0, [pc, #236]	; (b69c0 <_GLOBAL__sub_I_argonName+0x2cc>)
   b68d4:	f001 fced 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b68d8:	4b3a      	ldr	r3, [pc, #232]	; (b69c4 <_GLOBAL__sub_I_argonName+0x2d0>)
   b68da:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68dc:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b68de:	4b3a      	ldr	r3, [pc, #232]	; (b69c8 <_GLOBAL__sub_I_argonName+0x2d4>)
   b68e0:	4a3a      	ldr	r2, [pc, #232]	; (b69cc <_GLOBAL__sub_I_argonName+0x2d8>)
   b68e2:	601a      	str	r2, [r3, #0]
   b68e4:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b68e8:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68ec:	ae0c      	add	r6, sp, #48	; 0x30
   b68ee:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b68f2:	e892 0003 	ldmia.w	r2, {r0, r1}
   b68f6:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b68fa:	e896 0003 	ldmia.w	r6, {r0, r1}
   b68fe:	e882 0003 	stmia.w	r2, {r0, r1}
   b6902:	4a33      	ldr	r2, [pc, #204]	; (b69d0 <_GLOBAL__sub_I_argonName+0x2dc>)
   b6904:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6906:	699a      	ldr	r2, [r3, #24]
   b6908:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b690a:	4a32      	ldr	r2, [pc, #200]	; (b69d4 <_GLOBAL__sub_I_argonName+0x2e0>)
   b690c:	619a      	str	r2, [r3, #24]
   b690e:	711c      	strb	r4, [r3, #4]
   b6910:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b6912:	4a31      	ldr	r2, [pc, #196]	; (b69d8 <_GLOBAL__sub_I_argonName+0x2e4>)
      __a = _GLIBCXX_MOVE(__b);
   b6914:	9410      	str	r4, [sp, #64]	; 0x40
   b6916:	f64e 2160 	movw	r1, #60000	; 0xea60
   b691a:	f103 0008 	add.w	r0, r3, #8
   b691e:	e9cd 8400 	strd	r8, r4, [sp]
   b6922:	f001 f90f 	bl	b7b44 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b6926:	4628      	mov	r0, r5
   b6928:	f7ff fa04 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
SYSTEM_THREAD(ENABLED);
   b692c:	4621      	mov	r1, r4
   b692e:	4640      	mov	r0, r8
   b6930:	b013      	add	sp, #76	; 0x4c
   b6932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b6936:	f001 ba75 	b.w	b7e24 <system_thread_set_state>
   b693a:	bf00      	nop
   b693c:	2003d428 	.word	0x2003d428
   b6940:	2003d3b0 	.word	0x2003d3b0
   b6944:	2003d174 	.word	0x2003d174
   b6948:	2003d178 	.word	0x2003d178
   b694c:	2003d140 	.word	0x2003d140
   b6950:	2003d138 	.word	0x2003d138
   b6954:	2003d13c 	.word	0x2003d13c
   b6958:	2003d3ec 	.word	0x2003d3ec
   b695c:	2003d144 	.word	0x2003d144
   b6960:	2003d3d8 	.word	0x2003d3d8
   b6964:	2003d148 	.word	0x2003d148
   b6968:	2003d414 	.word	0x2003d414
   b696c:	000bdbf1 	.word	0x000bdbf1
   b6970:	2003d384 	.word	0x2003d384
   b6974:	000bdbfa 	.word	0x000bdbfa
   b6978:	2003d374 	.word	0x2003d374
   b697c:	000bdc08 	.word	0x000bdc08
   b6980:	2003d364 	.word	0x2003d364
   b6984:	000bdc12 	.word	0x000bdc12
   b6988:	2003d36c 	.word	0x2003d36c
   b698c:	000bdc1f 	.word	0x000bdc1f
   b6990:	2003d38c 	.word	0x2003d38c
   b6994:	2003dd1c 	.word	0x2003dd1c
   b6998:	000bdc29 	.word	0x000bdc29
   b699c:	000bdf9d 	.word	0x000bdf9d
   b69a0:	2003d394 	.word	0x2003d394
   b69a4:	2003d4a8 	.word	0x2003d4a8
   b69a8:	2003dd6c 	.word	0x2003dd6c
   b69ac:	2003d4a4 	.word	0x2003d4a4
   b69b0:	2003dcec 	.word	0x2003dcec
   b69b4:	2003dcfc 	.word	0x2003dcfc
   b69b8:	2003dd0c 	.word	0x2003dd0c
   b69bc:	2003e1a0 	.word	0x2003e1a0
   b69c0:	2003e1b4 	.word	0x2003e1b4
   b69c4:	000b5b09 	.word	0x000b5b09
   b69c8:	2003e180 	.word	0x2003e180
   b69cc:	000bde34 	.word	0x000bde34
   b69d0:	000b5aaf 	.word	0x000b5aaf
   b69d4:	000b5ac3 	.word	0x000b5ac3
   b69d8:	000b5a75 	.word	0x000b5a75
   b69dc:	2003d39c 	.word	0x2003d39c
   b69e0:	2003d400 	.word	0x2003d400
   b69e4:	2003d3c4 	.word	0x2003d3c4

000b69e8 <_Z13get_data_httpi>:

// to get a verbose output from these actions
#define LOGGING

bool get_data_http(int day)
{
   b69e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b69ec:	b099      	sub	sp, #100	; 0x64

    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b69ee:	497e      	ldr	r1, [pc, #504]	; (b6be8 <_Z13get_data_httpi+0x200>)
    path_s += String::format("%d-%02d-%02d", Time.year(), Time.month(), day);
    path_s += "T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk";
    // Request path and body can be set at runtime or at setup.
    request.hostname = "api.energidataservice.dk";
   b69f0:	4d7e      	ldr	r5, [pc, #504]	; (b6bec <_Z13get_data_httpi+0x204>)
{
   b69f2:	4604      	mov	r4, r0
    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b69f4:	a810      	add	r0, sp, #64	; 0x40
   b69f6:	f001 fc5c 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
    path_s += String::format("%d-%02d-%02d", Time.year(), Time.month(), day);
   b69fa:	f003 f9fb 	bl	b9df4 <_ZN9TimeClass4yearEv>
   b69fe:	9003      	str	r0, [sp, #12]
   b6a00:	f003 f9f0 	bl	b9de4 <_ZN9TimeClass5monthEv>
   b6a04:	9a03      	ldr	r2, [sp, #12]
   b6a06:	497a      	ldr	r1, [pc, #488]	; (b6bf0 <_Z13get_data_httpi+0x208>)
   b6a08:	9400      	str	r4, [sp, #0]
   b6a0a:	4603      	mov	r3, r0
   b6a0c:	a814      	add	r0, sp, #80	; 0x50
   b6a0e:	f001 fd4f 	bl	b84b0 <_ZN6String6formatEPKcz>
   b6a12:	a914      	add	r1, sp, #80	; 0x50
   b6a14:	a810      	add	r0, sp, #64	; 0x40
   b6a16:	f001 fce6 	bl	b83e6 <_ZN6String6concatERKS_>
   b6a1a:	a814      	add	r0, sp, #80	; 0x50
   b6a1c:	f001 fbfe 	bl	b821c <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b6a20:	4974      	ldr	r1, [pc, #464]	; (b6bf4 <_Z13get_data_httpi+0x20c>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b6a22:	4c75      	ldr	r4, [pc, #468]	; (b6bf8 <_Z13get_data_httpi+0x210>)
   b6a24:	a810      	add	r0, sp, #64	; 0x40
   b6a26:	f001 fce2 	bl	b83ee <_ZN6String6concatEPKc>
    request.hostname = "api.energidataservice.dk";
   b6a2a:	4974      	ldr	r1, [pc, #464]	; (b6bfc <_Z13get_data_httpi+0x214>)
   b6a2c:	4628      	mov	r0, r5
   b6a2e:	f001 fc9e 	bl	b836e <_ZN6StringaSEPKc>
    request.port = 80;
   b6a32:	2350      	movs	r3, #80	; 0x50
    request.path = path_s.c_str();
   b6a34:	9910      	ldr	r1, [sp, #64]	; 0x40
    request.port = 80;
   b6a36:	63ab      	str	r3, [r5, #56]	; 0x38
    request.path = path_s.c_str();
   b6a38:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b6a3c:	f001 fc97 	bl	b836e <_ZN6StringaSEPKc>
   b6a40:	4b6f      	ldr	r3, [pc, #444]	; (b6c00 <_Z13get_data_httpi+0x218>)
   b6a42:	9300      	str	r3, [sp, #0]
   b6a44:	486f      	ldr	r0, [pc, #444]	; (b6c04 <_Z13get_data_httpi+0x21c>)
   b6a46:	4b70      	ldr	r3, [pc, #448]	; (b6c08 <_Z13get_data_httpi+0x220>)
   b6a48:	4622      	mov	r2, r4
   b6a4a:	4629      	mov	r1, r5
   b6a4c:	f000 fac2 	bl	b6fd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    // Get request
    http.get(request, response, headers);
    // Serial.print("Application>\tResponse status: ");
    // Serial.println(response.status);
    if (response.status == 200)
   b6a50:	6823      	ldr	r3, [r4, #0]
   b6a52:	2bc8      	cmp	r3, #200	; 0xc8
   b6a54:	d126      	bne.n	b6aa4 <_Z13get_data_httpi+0xbc>
    {
        Serial.println("success response code 200");
   b6a56:	f003 fe27 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6a5a:	496c      	ldr	r1, [pc, #432]	; (b6c0c <_Z13get_data_httpi+0x224>)
   b6a5c:	f002 ffa3 	bl	b99a6 <_ZN5Print7printlnEPKc>
    {
        Serial.println("bad response");
        return false;
    }

    Serial.println(response.body);
   b6a60:	f003 fe22 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6a64:	6861      	ldr	r1, [r4, #4]
   b6a66:	f002 ff9e 	bl	b99a6 <_ZN5Print7printlnEPKc>

    JSONVar myObject = JSON.parse(response.body);
   b6a6a:	1d22      	adds	r2, r4, #4
   b6a6c:	4968      	ldr	r1, [pc, #416]	; (b6c10 <_Z13get_data_httpi+0x228>)
   b6a6e:	a804      	add	r0, sp, #16
   b6a70:	f000 fbe0 	bl	b7234 <_ZN9JSONClass5parseERK6String>
    if (JSON.typeof(myObject) == "undefined")
   b6a74:	4966      	ldr	r1, [pc, #408]	; (b6c10 <_Z13get_data_httpi+0x228>)
   b6a76:	aa04      	add	r2, sp, #16
   b6a78:	a814      	add	r0, sp, #80	; 0x50
   b6a7a:	f000 fbe2 	bl	b7242 <_ZN9JSONClass7typeof_ERK7JSONVar>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6a7e:	4965      	ldr	r1, [pc, #404]	; (b6c14 <_Z13get_data_httpi+0x22c>)
   b6a80:	a814      	add	r0, sp, #80	; 0x50
   b6a82:	f001 fcc5 	bl	b8410 <_ZNK6String6equalsEPKc>
   b6a86:	4604      	mov	r4, r0
   b6a88:	a814      	add	r0, sp, #80	; 0x50
   b6a8a:	f001 fbc7 	bl	b821c <_ZN6StringD1Ev>
   b6a8e:	b1b4      	cbz	r4, b6abe <_Z13get_data_httpi+0xd6>
    {
        Serial.println("Parsing input failed!");
   b6a90:	f003 fe0a 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6a94:	4960      	ldr	r1, [pc, #384]	; (b6c18 <_Z13get_data_httpi+0x230>)
   b6a96:	f002 ff86 	bl	b99a6 <_ZN5Print7printlnEPKc>
            JSONVar myHour = myArray[i];

            if (JSON.typeof(myHour["SpotPriceDKK"]) == "undefined")
            {
                Serial.println("parsing failed 2");
                return false;
   b6a9a:	2400      	movs	r4, #0
    JSONVar myObject = JSON.parse(response.body);
   b6a9c:	a804      	add	r0, sp, #16
   b6a9e:	f000 fbdf 	bl	b7260 <_ZN7JSONVarD1Ev>
   b6aa2:	e005      	b.n	b6ab0 <_Z13get_data_httpi+0xc8>
        Serial.println("bad response");
   b6aa4:	f003 fe00 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6aa8:	495c      	ldr	r1, [pc, #368]	; (b6c1c <_Z13get_data_httpi+0x234>)
   b6aaa:	f002 ff7c 	bl	b99a6 <_ZN5Print7printlnEPKc>
        return false;
   b6aae:	2400      	movs	r4, #0
    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b6ab0:	a810      	add	r0, sp, #64	; 0x40
   b6ab2:	f001 fbb3 	bl	b821c <_ZN6StringD1Ev>
            }
        }
    }
    CALCULATE = true;
    return true;
   b6ab6:	4620      	mov	r0, r4
   b6ab8:	b019      	add	sp, #100	; 0x64
   b6aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (myObject.hasOwnProperty("records"))
   b6abe:	4958      	ldr	r1, [pc, #352]	; (b6c20 <_Z13get_data_httpi+0x238>)
   b6ac0:	a804      	add	r0, sp, #16
   b6ac2:	f000 fc0d 	bl	b72e0 <_ZNK7JSONVar14hasOwnPropertyEPKc>
   b6ac6:	2800      	cmp	r0, #0
   b6ac8:	d070      	beq.n	b6bac <_Z13get_data_httpi+0x1c4>
        JSONVar myArray = myObject["records"];
   b6aca:	4a55      	ldr	r2, [pc, #340]	; (b6c20 <_Z13get_data_httpi+0x238>)
   b6acc:	a904      	add	r1, sp, #16
   b6ace:	a807      	add	r0, sp, #28
   b6ad0:	f000 fc8c 	bl	b73ec <_ZN7JSONVarixEPKc>
        Serial.println(myArray[0]);
   b6ad4:	f003 fde8 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6ad8:	4622      	mov	r2, r4
   b6ada:	4605      	mov	r5, r0
   b6adc:	a907      	add	r1, sp, #28
   b6ade:	a814      	add	r0, sp, #80	; 0x50
   b6ae0:	f000 fca4 	bl	b742c <_ZN7JSONVarixEi>
   b6ae4:	a914      	add	r1, sp, #80	; 0x50
   b6ae6:	4628      	mov	r0, r5
   b6ae8:	f002 ff67 	bl	b99ba <_ZN5Print7printlnERK9Printable>
   b6aec:	a814      	add	r0, sp, #80	; 0x50
   b6aee:	f000 fbb7 	bl	b7260 <_ZN7JSONVarD1Ev>
                    cost_tomorrow[i] += transport.medium;
   b6af2:	a737      	add	r7, pc, #220	; (adr r7, b6bd0 <_Z13get_data_httpi+0x1e8>)
   b6af4:	e9d7 6700 	ldrd	r6, r7, [r7]
                    cost_tomorrow[i] += transport.high;
   b6af8:	f20f 09dc 	addw	r9, pc, #220	; 0xdc
   b6afc:	e9d9 8900 	ldrd	r8, r9, [r9]
            JSONVar myHour = myArray[i];
   b6b00:	4622      	mov	r2, r4
   b6b02:	a907      	add	r1, sp, #28
   b6b04:	a80a      	add	r0, sp, #40	; 0x28
   b6b06:	f000 fc91 	bl	b742c <_ZN7JSONVarixEi>
            if (JSON.typeof(myHour["SpotPriceDKK"]) == "undefined")
   b6b0a:	4a46      	ldr	r2, [pc, #280]	; (b6c24 <_Z13get_data_httpi+0x23c>)
   b6b0c:	a90a      	add	r1, sp, #40	; 0x28
   b6b0e:	a80d      	add	r0, sp, #52	; 0x34
   b6b10:	f000 fc6c 	bl	b73ec <_ZN7JSONVarixEPKc>
   b6b14:	aa0d      	add	r2, sp, #52	; 0x34
   b6b16:	493e      	ldr	r1, [pc, #248]	; (b6c10 <_Z13get_data_httpi+0x228>)
   b6b18:	a814      	add	r0, sp, #80	; 0x50
   b6b1a:	f000 fb92 	bl	b7242 <_ZN9JSONClass7typeof_ERK7JSONVar>
   b6b1e:	493d      	ldr	r1, [pc, #244]	; (b6c14 <_Z13get_data_httpi+0x22c>)
   b6b20:	a814      	add	r0, sp, #80	; 0x50
   b6b22:	f001 fc75 	bl	b8410 <_ZNK6String6equalsEPKc>
   b6b26:	4605      	mov	r5, r0
   b6b28:	a814      	add	r0, sp, #80	; 0x50
   b6b2a:	f001 fb77 	bl	b821c <_ZN6StringD1Ev>
   b6b2e:	a80d      	add	r0, sp, #52	; 0x34
   b6b30:	f000 fb96 	bl	b7260 <_ZN7JSONVarD1Ev>
   b6b34:	b15d      	cbz	r5, b6b4e <_Z13get_data_httpi+0x166>
                Serial.println("parsing failed 2");
   b6b36:	f003 fdb7 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6b3a:	493b      	ldr	r1, [pc, #236]	; (b6c28 <_Z13get_data_httpi+0x240>)
   b6b3c:	f002 ff33 	bl	b99a6 <_ZN5Print7printlnEPKc>
                return false;
   b6b40:	a80a      	add	r0, sp, #40	; 0x28
   b6b42:	f000 fb8d 	bl	b7260 <_ZN7JSONVarD1Ev>
   b6b46:	a807      	add	r0, sp, #28
   b6b48:	f000 fb8a 	bl	b7260 <_ZN7JSONVarD1Ev>
   b6b4c:	e7a5      	b.n	b6a9a <_Z13get_data_httpi+0xb2>
                cost_tomorrow[i] = (double)myHour["SpotPriceDKK"]/1000.0;
   b6b4e:	4a35      	ldr	r2, [pc, #212]	; (b6c24 <_Z13get_data_httpi+0x23c>)
   b6b50:	4d36      	ldr	r5, [pc, #216]	; (b6c2c <_Z13get_data_httpi+0x244>)
   b6b52:	a90a      	add	r1, sp, #40	; 0x28
   b6b54:	a814      	add	r0, sp, #80	; 0x50
   b6b56:	f000 fc49 	bl	b73ec <_ZN7JSONVarixEPKc>
   b6b5a:	a814      	add	r0, sp, #80	; 0x50
   b6b5c:	f000 fbac 	bl	b72b8 <_ZNK7JSONVarcvdEv>
   b6b60:	682b      	ldr	r3, [r5, #0]
   b6b62:	ec51 0b10 	vmov	r0, r1, d0
   b6b66:	eb03 0ac4 	add.w	sl, r3, r4, lsl #3
   b6b6a:	2200      	movs	r2, #0
   b6b6c:	4b30      	ldr	r3, [pc, #192]	; (b6c30 <_Z13get_data_httpi+0x248>)
   b6b6e:	f7fd fd3d 	bl	b45ec <__aeabi_ddiv>
   b6b72:	e9ca 0100 	strd	r0, r1, [sl]
   b6b76:	a814      	add	r0, sp, #80	; 0x50
   b6b78:	f000 fb72 	bl	b7260 <_ZN7JSONVarD1Ev>
                    cost_tomorrow[i] += transport.low;
   b6b7c:	682b      	ldr	r3, [r5, #0]
   b6b7e:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
                if (i >= 0 && i < 7)
   b6b82:	2c06      	cmp	r4, #6
                    cost_tomorrow[i] += transport.low;
   b6b84:	449b      	add	fp, r3
                if (i >= 0 && i < 7)
   b6b86:	dc15      	bgt.n	b6bb4 <_Z13get_data_httpi+0x1cc>
                    cost_tomorrow[i] += transport.low;
   b6b88:	a315      	add	r3, pc, #84	; (adr r3, b6be0 <_Z13get_data_httpi+0x1f8>)
   b6b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b8e:	e9db 0100 	ldrd	r0, r1, [fp]
                    cost_tomorrow[i] += transport.medium;
   b6b92:	f7fd fa4b 	bl	b402c <__adddf3>
        for (int i = 0; i < 24; i++)
   b6b96:	3401      	adds	r4, #1
                    cost_tomorrow[i] += transport.medium;
   b6b98:	e9cb 0100 	strd	r0, r1, [fp]
            JSONVar myHour = myArray[i];
   b6b9c:	a80a      	add	r0, sp, #40	; 0x28
   b6b9e:	f000 fb5f 	bl	b7260 <_ZN7JSONVarD1Ev>
        for (int i = 0; i < 24; i++)
   b6ba2:	2c18      	cmp	r4, #24
   b6ba4:	d1ac      	bne.n	b6b00 <_Z13get_data_httpi+0x118>
        JSONVar myArray = myObject["records"];
   b6ba6:	a807      	add	r0, sp, #28
   b6ba8:	f000 fb5a 	bl	b7260 <_ZN7JSONVarD1Ev>
    CALCULATE = true;
   b6bac:	4b21      	ldr	r3, [pc, #132]	; (b6c34 <_Z13get_data_httpi+0x24c>)
   b6bae:	2401      	movs	r4, #1
   b6bb0:	701c      	strb	r4, [r3, #0]
    return true;
   b6bb2:	e773      	b.n	b6a9c <_Z13get_data_httpi+0xb4>
                else if (i > 16 && i < 22)
   b6bb4:	f1a4 0311 	sub.w	r3, r4, #17
   b6bb8:	2b04      	cmp	r3, #4
                    cost_tomorrow[i] += transport.high;
   b6bba:	e9db 0100 	ldrd	r0, r1, [fp]
   b6bbe:	bf99      	ittee	ls
   b6bc0:	4642      	movls	r2, r8
   b6bc2:	464b      	movls	r3, r9
                    cost_tomorrow[i] += transport.medium;
   b6bc4:	4632      	movhi	r2, r6
   b6bc6:	463b      	movhi	r3, r7
   b6bc8:	e7e3      	b.n	b6b92 <_Z13get_data_httpi+0x1aa>
   b6bca:	bf00      	nop
   b6bcc:	f3af 8000 	nop.w
   b6bd0:	42c3c9ef 	.word	0x42c3c9ef
   b6bd4:	3fe469ad 	.word	0x3fe469ad
   b6bd8:	2d0e5604 	.word	0x2d0e5604
   b6bdc:	3ffe9db2 	.word	0x3ffe9db2
   b6be0:	ebedfa44 	.word	0xebedfa44
   b6be4:	3fcb39c0 	.word	0x3fcb39c0
   b6be8:	000bdc37 	.word	0x000bdc37
   b6bec:	2003dd1c 	.word	0x2003dd1c
   b6bf0:	000bdc7d 	.word	0x000bdc7d
   b6bf4:	000bdc8a 	.word	0x000bdc8a
   b6bf8:	2003dd68 	.word	0x2003dd68
   b6bfc:	000bdcd8 	.word	0x000bdcd8
   b6c00:	000bdcf1 	.word	0x000bdcf1
   b6c04:	2003d4a8 	.word	0x2003d4a8
   b6c08:	2003d150 	.word	0x2003d150
   b6c0c:	000bdcf5 	.word	0x000bdcf5
   b6c10:	2003e1c4 	.word	0x2003e1c4
   b6c14:	000bdd0f 	.word	0x000bdd0f
   b6c18:	000bdd26 	.word	0x000bdd26
   b6c1c:	000bdd19 	.word	0x000bdd19
   b6c20:	000bdd3c 	.word	0x000bdd3c
   b6c24:	000bdd44 	.word	0x000bdd44
   b6c28:	000bdd51 	.word	0x000bdd51
   b6c2c:	2003d49c 	.word	0x2003d49c
   b6c30:	408f4000 	.word	0x408f4000
   b6c34:	2003d361 	.word	0x2003d361

000b6c38 <setup>:
{
   b6c38:	b530      	push	{r4, r5, lr}
    STARTUP = true;
   b6c3a:	4b41      	ldr	r3, [pc, #260]	; (b6d40 <setup+0x108>)
   b6c3c:	2201      	movs	r2, #1
{
   b6c3e:	b08f      	sub	sp, #60	; 0x3c
    STARTUP = true;
   b6c40:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6c42:	f001 f98b 	bl	b7f5c <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6c46:	b910      	cbnz	r0, b6c4e <setup+0x16>
            spark_process();
   b6c48:	f001 f980 	bl	b7f4c <spark_process>
        while (_while() && !_condition()) {
   b6c4c:	e7f9      	b.n	b6c42 <setup+0xa>
   b6c4e:	f001 f985 	bl	b7f5c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
   b6c52:	2000      	movs	r0, #0
   b6c54:	f001 f99a 	bl	b7f8c <spark_unsubscribe>
    ble_setup();
   b6c58:	f7ff f8a2 	bl	b5da0 <_Z9ble_setupv>
    init_memory();
   b6c5c:	f7ff fc16 	bl	b648c <_Z11init_memoryv>
    Time.zone(1);
   b6c60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b6c64:	f002 ff58 	bl	b9b18 <_ZN9TimeClass4zoneEf>
    currentHour = Time.hour();
   b6c68:	f003 f88c 	bl	b9d84 <_ZN9TimeClass4hourEv>
   b6c6c:	4b35      	ldr	r3, [pc, #212]	; (b6d44 <setup+0x10c>)
    initStorage(&wh_today_Json, &wh_yesterday_Json);
   b6c6e:	4936      	ldr	r1, [pc, #216]	; (b6d48 <setup+0x110>)
    currentHour = Time.hour();
   b6c70:	7018      	strb	r0, [r3, #0]
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b6c72:	2400      	movs	r4, #0
    initStorage(&wh_today_Json, &wh_yesterday_Json);
   b6c74:	4835      	ldr	r0, [pc, #212]	; (b6d4c <setup+0x114>)
   b6c76:	f000 fdab 	bl	b77d0 <_Z11initStorageP6StringS0_>
   b6c7a:	4935      	ldr	r1, [pc, #212]	; (b6d50 <setup+0x118>)
   b6c7c:	4835      	ldr	r0, [pc, #212]	; (b6d54 <setup+0x11c>)
   b6c7e:	2301      	movs	r3, #1
   b6c80:	4622      	mov	r2, r4
   b6c82:	e9cd 4400 	strd	r4, r4, [sp]
   b6c86:	f001 f979 	bl	b7f7c <spark_subscribe>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b6c8a:	f003 fd0d 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6c8e:	4605      	mov	r5, r0
   b6c90:	f003 f878 	bl	b9d84 <_ZN9TimeClass4hourEv>
   b6c94:	9003      	str	r0, [sp, #12]
   b6c96:	f003 f881 	bl	b9d9c <_ZN9TimeClass6minuteEv>
   b6c9a:	9a03      	ldr	r2, [sp, #12]
   b6c9c:	492e      	ldr	r1, [pc, #184]	; (b6d58 <setup+0x120>)
   b6c9e:	4603      	mov	r3, r0
   b6ca0:	4628      	mov	r0, r5
   b6ca2:	f7fe ff93 	bl	b5bcc <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b6ca6:	4622      	mov	r2, r4
   b6ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6cac:	482b      	ldr	r0, [pc, #172]	; (b6d5c <setup+0x124>)
   b6cae:	f7fe ff17 	bl	b5ae0 <_ZN5Timer6_startEjb.isra.0>
    Serial.printlnf("RSSI=%d", (int8_t)WiFi.RSSI());
   b6cb2:	f003 fcf9 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6cb6:	492a      	ldr	r1, [pc, #168]	; (b6d60 <setup+0x128>)
   b6cb8:	4605      	mov	r5, r0
   b6cba:	a805      	add	r0, sp, #20
   b6cbc:	f004 f978 	bl	bafb0 <_ZN5spark9WiFiClass4RSSIEv>
   b6cc0:	a805      	add	r0, sp, #20
   b6cc2:	f004 f951 	bl	baf68 <_ZNK10WiFiSignalcvaEv>
   b6cc6:	4927      	ldr	r1, [pc, #156]	; (b6d64 <setup+0x12c>)
   b6cc8:	4602      	mov	r2, r0
   b6cca:	4628      	mov	r0, r5
   b6ccc:	f7ff f824 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
    Serial.printf("Getting price data for yesterday\n");
   b6cd0:	f003 fcea 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6cd4:	4924      	ldr	r1, [pc, #144]	; (b6d68 <setup+0x130>)
   b6cd6:	4d25      	ldr	r5, [pc, #148]	; (b6d6c <setup+0x134>)
   b6cd8:	f7fe ff78 	bl	b5bcc <_ZN5Print6printfEPKcz>
    get_data_http(Time.day() - 1);
   b6cdc:	f003 f876 	bl	b9dcc <_ZN9TimeClass3dayEv>
   b6ce0:	3801      	subs	r0, #1
   b6ce2:	f7ff fe81 	bl	b69e8 <_Z13get_data_httpi>
    rotate_prices();
   b6ce6:	f7ff fc61 	bl	b65ac <_Z13rotate_pricesv>
    Serial.printf("Getting price data for today\n");
   b6cea:	f003 fcdd 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6cee:	4920      	ldr	r1, [pc, #128]	; (b6d70 <setup+0x138>)
   b6cf0:	f7fe ff6c 	bl	b5bcc <_ZN5Print6printfEPKcz>
    get_data_http(Time.day());
   b6cf4:	f003 f86a 	bl	b9dcc <_ZN9TimeClass3dayEv>
   b6cf8:	f7ff fe76 	bl	b69e8 <_Z13get_data_httpi>
    rotate_prices();
   b6cfc:	f7ff fc56 	bl	b65ac <_Z13rotate_pricesv>
    if (Time.hour() >= PULL_TIME_1)
   b6d00:	f003 f840 	bl	b9d84 <_ZN9TimeClass4hourEv>
   b6d04:	280c      	cmp	r0, #12
   b6d06:	dd12      	ble.n	b6d2e <setup+0xf6>
        GET_DATA = true;
   b6d08:	4b1a      	ldr	r3, [pc, #104]	; (b6d74 <setup+0x13c>)
        CALCULATE = false;
   b6d0a:	702c      	strb	r4, [r5, #0]
        GET_DATA = true;
   b6d0c:	2201      	movs	r2, #1
   b6d0e:	701a      	strb	r2, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b6d10:	2103      	movs	r1, #3
   b6d12:	2008      	movs	r0, #8
   b6d14:	f004 fa78 	bl	bb208 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b6d18:	2300      	movs	r3, #0
   b6d1a:	9300      	str	r3, [sp, #0]
   b6d1c:	4916      	ldr	r1, [pc, #88]	; (b6d78 <setup+0x140>)
   b6d1e:	f04f 33ff 	mov.w	r3, #4294967295
   b6d22:	2201      	movs	r2, #1
   b6d24:	2008      	movs	r0, #8
   b6d26:	f003 fce7 	bl	ba6f8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b6d2a:	b00f      	add	sp, #60	; 0x3c
   b6d2c:	bd30      	pop	{r4, r5, pc}
        Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b6d2e:	f003 fcbb 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6d32:	4912      	ldr	r1, [pc, #72]	; (b6d7c <setup+0x144>)
   b6d34:	220d      	movs	r2, #13
   b6d36:	f7fe ff49 	bl	b5bcc <_ZN5Print6printfEPKcz>
        CALCULATE = true;
   b6d3a:	2301      	movs	r3, #1
   b6d3c:	702b      	strb	r3, [r5, #0]
   b6d3e:	e7e7      	b.n	b6d10 <setup+0xd8>
   b6d40:	2003d380 	.word	0x2003d380
   b6d44:	2003d4a4 	.word	0x2003d4a4
   b6d48:	2003e1b4 	.word	0x2003e1b4
   b6d4c:	2003e1a0 	.word	0x2003e1a0
   b6d50:	000b5be9 	.word	0x000b5be9
   b6d54:	000bdd62 	.word	0x000bdd62
   b6d58:	000bdd69 	.word	0x000bdd69
   b6d5c:	2003e180 	.word	0x2003e180
   b6d60:	2003e708 	.word	0x2003e708
   b6d64:	000bdd83 	.word	0x000bdd83
   b6d68:	000bdd8b 	.word	0x000bdd8b
   b6d6c:	2003d361 	.word	0x2003d361
   b6d70:	000bddad 	.word	0x000bddad
   b6d74:	2003d37c 	.word	0x2003d37c
   b6d78:	000b5a19 	.word	0x000b5a19
   b6d7c:	000bddcb 	.word	0x000bddcb

000b6d80 <loop>:
{
   b6d80:	b570      	push	{r4, r5, r6, lr}
    if (GET_DATA)
   b6d82:	4c5b      	ldr	r4, [pc, #364]	; (b6ef0 <loop+0x170>)
   b6d84:	7823      	ldrb	r3, [r4, #0]
{
   b6d86:	b0c6      	sub	sp, #280	; 0x118
    if (GET_DATA)
   b6d88:	b14b      	cbz	r3, b6d9e <loop+0x1e>
        AWAITING_DATA = true;
   b6d8a:	4b5a      	ldr	r3, [pc, #360]	; (b6ef4 <loop+0x174>)
   b6d8c:	2201      	movs	r2, #1
   b6d8e:	701a      	strb	r2, [r3, #0]
        get_data_http(Time.day() + 1);
   b6d90:	f003 f81c 	bl	b9dcc <_ZN9TimeClass3dayEv>
   b6d94:	3001      	adds	r0, #1
   b6d96:	f7ff fe27 	bl	b69e8 <_Z13get_data_httpi>
        GET_DATA = false;
   b6d9a:	2300      	movs	r3, #0
   b6d9c:	7023      	strb	r3, [r4, #0]
    if (CALCULATE)
   b6d9e:	4c56      	ldr	r4, [pc, #344]	; (b6ef8 <loop+0x178>)
   b6da0:	4d56      	ldr	r5, [pc, #344]	; (b6efc <loop+0x17c>)
   b6da2:	7823      	ldrb	r3, [r4, #0]
   b6da4:	b333      	cbz	r3, b6df4 <loop+0x74>
        update_JSON();
   b6da6:	f7ff f9a1 	bl	b60ec <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b6daa:	4b55      	ldr	r3, [pc, #340]	; (b6f00 <loop+0x180>)
   b6dac:	4855      	ldr	r0, [pc, #340]	; (b6f04 <loop+0x184>)
   b6dae:	6819      	ldr	r1, [r3, #0]
   b6db0:	2218      	movs	r2, #24
   b6db2:	f7ff f895 	bl	b5ee0 <_Z8calc_lowPA2_iPdi>
   b6db6:	4b54      	ldr	r3, [pc, #336]	; (b6f08 <loop+0x188>)
   b6db8:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b6dba:	f003 fc75 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6dbe:	4606      	mov	r6, r0
   b6dc0:	f002 ffe0 	bl	b9d84 <_ZN9TimeClass4hourEv>
   b6dc4:	9001      	str	r0, [sp, #4]
   b6dc6:	f002 ffe9 	bl	b9d9c <_ZN9TimeClass6minuteEv>
   b6dca:	9a01      	ldr	r2, [sp, #4]
   b6dcc:	494f      	ldr	r1, [pc, #316]	; (b6f0c <loop+0x18c>)
   b6dce:	4603      	mov	r3, r0
   b6dd0:	4630      	mov	r0, r6
   b6dd2:	f7fe fefb 	bl	b5bcc <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b6dd6:	2301      	movs	r3, #1
   b6dd8:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b6dda:	2300      	movs	r3, #0
   b6ddc:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b6dde:	4b4a      	ldr	r3, [pc, #296]	; (b6f08 <loop+0x188>)
   b6de0:	4848      	ldr	r0, [pc, #288]	; (b6f04 <loop+0x184>)
   b6de2:	6819      	ldr	r1, [r3, #0]
   b6de4:	f7ff fc1c 	bl	b6620 <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b6de8:	4b49      	ldr	r3, [pc, #292]	; (b6f10 <loop+0x190>)
   b6dea:	2201      	movs	r2, #1
   b6dec:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b6dee:	2300      	movs	r3, #0
   b6df0:	702b      	strb	r3, [r5, #0]
   b6df2:	e002      	b.n	b6dfa <loop+0x7a>
    if (TRANSMIT_PRICE)
   b6df4:	782b      	ldrb	r3, [r5, #0]
   b6df6:	2b00      	cmp	r3, #0
   b6df8:	d1f1      	bne.n	b6dde <loop+0x5e>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b6dfa:	4d46      	ldr	r5, [pc, #280]	; (b6f14 <loop+0x194>)
   b6dfc:	782b      	ldrb	r3, [r5, #0]
   b6dfe:	b333      	cbz	r3, b6e4e <loop+0xce>
        Serial.printf("Received power/get\n");
   b6e00:	f003 fc52 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6e04:	4944      	ldr	r1, [pc, #272]	; (b6f18 <loop+0x198>)
   b6e06:	f7fe fee1 	bl	b5bcc <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b6e0a:	4b44      	ldr	r3, [pc, #272]	; (b6f1c <loop+0x19c>)
   b6e0c:	681e      	ldr	r6, [r3, #0]
   b6e0e:	f002 ffb9 	bl	b9d84 <_ZN9TimeClass4hourEv>
   b6e12:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b6e16:	4942      	ldr	r1, [pc, #264]	; (b6f20 <loop+0x1a0>)
        wh_today[Time.hour()] += 1;
   b6e18:	3301      	adds	r3, #1
   b6e1a:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b6e1e:	4b41      	ldr	r3, [pc, #260]	; (b6f24 <loop+0x1a4>)
   b6e20:	a806      	add	r0, sp, #24
   b6e22:	681a      	ldr	r2, [r3, #0]
   b6e24:	f001 f8e2 	bl	b7fec <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b6e28:	2300      	movs	r3, #0
   b6e2a:	22ff      	movs	r2, #255	; 0xff
   b6e2c:	a906      	add	r1, sp, #24
   b6e2e:	483e      	ldr	r0, [pc, #248]	; (b6f28 <loop+0x1a8>)
   b6e30:	f001 fdc8 	bl	b89c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(update_Whr_Today_JSON());
   b6e34:	a802      	add	r0, sp, #8
   b6e36:	f7ff fac5 	bl	b63c4 <_Z21update_Whr_Today_JSONv>
   b6e3a:	2200      	movs	r2, #0
   b6e3c:	a902      	add	r1, sp, #8
   b6e3e:	483b      	ldr	r0, [pc, #236]	; (b6f2c <loop+0x1ac>)
   b6e40:	f001 fe20 	bl	b8a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b6e44:	a802      	add	r0, sp, #8
   b6e46:	f001 f9e9 	bl	b821c <_ZN6StringD1Ev>
        TRANSMIT_SENSOR = false;
   b6e4a:	2300      	movs	r3, #0
   b6e4c:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b6e4e:	4d38      	ldr	r5, [pc, #224]	; (b6f30 <loop+0x1b0>)
   b6e50:	782b      	ldrb	r3, [r5, #0]
   b6e52:	b12b      	cbz	r3, b6e60 <loop+0xe0>
        rotate_prices();
   b6e54:	f7ff fbaa 	bl	b65ac <_Z13rotate_pricesv>
        ROTATE = false;
   b6e58:	2300      	movs	r3, #0
   b6e5a:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b6e5c:	2301      	movs	r3, #1
   b6e5e:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b6e60:	4c34      	ldr	r4, [pc, #208]	; (b6f34 <loop+0x1b4>)
   b6e62:	7823      	ldrb	r3, [r4, #0]
   b6e64:	b11b      	cbz	r3, b6e6e <loop+0xee>
        hourly_JSON_update();
   b6e66:	f7ff f8f9 	bl	b605c <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b6e6a:	2300      	movs	r3, #0
   b6e6c:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 3000))
   b6e6e:	4c32      	ldr	r4, [pc, #200]	; (b6f38 <loop+0x1b8>)
   b6e70:	7825      	ldrb	r5, [r4, #0]
   b6e72:	f000 fd8d 	bl	b7990 <HAL_Timer_Get_Milli_Seconds>
   b6e76:	4b31      	ldr	r3, [pc, #196]	; (b6f3c <loop+0x1bc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	1ac0      	subs	r0, r0, r3
   b6e7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b6e80:	4298      	cmp	r0, r3
   b6e82:	d92e      	bls.n	b6ee2 <loop+0x162>
   b6e84:	b36d      	cbz	r5, b6ee2 <loop+0x162>
        update_JSON();
   b6e86:	f7ff f931 	bl	b60ec <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b6e8a:	4b26      	ldr	r3, [pc, #152]	; (b6f24 <loop+0x1a4>)
   b6e8c:	4924      	ldr	r1, [pc, #144]	; (b6f20 <loop+0x1a0>)
   b6e8e:	681a      	ldr	r2, [r3, #0]
   b6e90:	a806      	add	r0, sp, #24
   b6e92:	f001 f8ab 	bl	b7fec <sprintf>
   b6e96:	2300      	movs	r3, #0
   b6e98:	22ff      	movs	r2, #255	; 0xff
   b6e9a:	a906      	add	r1, sp, #24
   b6e9c:	4822      	ldr	r0, [pc, #136]	; (b6f28 <loop+0x1a8>)
   b6e9e:	f001 fd91 	bl	b89c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b6ea2:	4927      	ldr	r1, [pc, #156]	; (b6f40 <loop+0x1c0>)
   b6ea4:	4827      	ldr	r0, [pc, #156]	; (b6f44 <loop+0x1c4>)
   b6ea6:	2200      	movs	r2, #0
   b6ea8:	f001 fdec 	bl	b8a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b6eac:	4926      	ldr	r1, [pc, #152]	; (b6f48 <loop+0x1c8>)
   b6eae:	4827      	ldr	r0, [pc, #156]	; (b6f4c <loop+0x1cc>)
   b6eb0:	2200      	movs	r2, #0
   b6eb2:	f001 fde7 	bl	b8a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b6eb6:	4926      	ldr	r1, [pc, #152]	; (b6f50 <loop+0x1d0>)
   b6eb8:	4826      	ldr	r0, [pc, #152]	; (b6f54 <loop+0x1d4>)
   b6eba:	2200      	movs	r2, #0
   b6ebc:	f001 fde2 	bl	b8a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b6ec0:	4925      	ldr	r1, [pc, #148]	; (b6f58 <loop+0x1d8>)
   b6ec2:	4826      	ldr	r0, [pc, #152]	; (b6f5c <loop+0x1dc>)
   b6ec4:	2200      	movs	r2, #0
   b6ec6:	f001 fddd 	bl	b8a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b6eca:	4925      	ldr	r1, [pc, #148]	; (b6f60 <loop+0x1e0>)
   b6ecc:	4817      	ldr	r0, [pc, #92]	; (b6f2c <loop+0x1ac>)
   b6ece:	2200      	movs	r2, #0
   b6ed0:	f001 fdd8 	bl	b8a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b6ed4:	2300      	movs	r3, #0
   b6ed6:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b6ed8:	f003 fbe6 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b6edc:	4921      	ldr	r1, [pc, #132]	; (b6f64 <loop+0x1e4>)
   b6ede:	f7fe fe75 	bl	b5bcc <_ZN5Print6printfEPKcz>
    delay(1000);
   b6ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b6ee6:	b046      	add	sp, #280	; 0x118
   b6ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
   b6eec:	f002 bf98 	b.w	b9e20 <delay>
   b6ef0:	2003d37c 	.word	0x2003d37c
   b6ef4:	2003d360 	.word	0x2003d360
   b6ef8:	2003d361 	.word	0x2003d361
   b6efc:	2003d381 	.word	0x2003d381
   b6f00:	2003d498 	.word	0x2003d498
   b6f04:	2003d430 	.word	0x2003d430
   b6f08:	2003d490 	.word	0x2003d490
   b6f0c:	000bdd69 	.word	0x000bdd69
   b6f10:	2003d37f 	.word	0x2003d37f
   b6f14:	2003d382 	.word	0x2003d382
   b6f18:	000bddfc 	.word	0x000bddfc
   b6f1c:	2003e19c 	.word	0x2003e19c
   b6f20:	000bde10 	.word	0x000bde10
   b6f24:	2003d494 	.word	0x2003d494
   b6f28:	2003d384 	.word	0x2003d384
   b6f2c:	2003d38c 	.word	0x2003d38c
   b6f30:	2003d37e 	.word	0x2003d37e
   b6f34:	2003d383 	.word	0x2003d383
   b6f38:	2003d37d 	.word	0x2003d37d
   b6f3c:	2003dce8 	.word	0x2003dce8
   b6f40:	2003dd0c 	.word	0x2003dd0c
   b6f44:	2003d374 	.word	0x2003d374
   b6f48:	2003dcec 	.word	0x2003dcec
   b6f4c:	2003d364 	.word	0x2003d364
   b6f50:	2003dcfc 	.word	0x2003dcfc
   b6f54:	2003d36c 	.word	0x2003d36c
   b6f58:	2003e1b4 	.word	0x2003e1b4
   b6f5c:	2003d394 	.word	0x2003d394
   b6f60:	2003e1a0 	.word	0x2003e1a0
   b6f64:	000bde1c 	.word	0x000bde1c

000b6f68 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b6f68:	b510      	push	{r4, lr}
   b6f6a:	4604      	mov	r4, r0
   b6f6c:	f003 ff4a 	bl	bae04 <_ZN9TCPClientC1Ev>
{

}
   b6f70:	4620      	mov	r0, r4
   b6f72:	bd10      	pop	{r4, pc}

000b6f74 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6f74:	b538      	push	{r3, r4, r5, lr}
   b6f76:	4604      	mov	r4, r0
   b6f78:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b6f7a:	f002 fcfb 	bl	b9974 <_ZN5Print5printEPKc>
    client.print(": ");
   b6f7e:	4905      	ldr	r1, [pc, #20]	; (b6f94 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b6f80:	4620      	mov	r0, r4
   b6f82:	f002 fcf7 	bl	b9974 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b6f86:	4629      	mov	r1, r5
   b6f88:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6f8e:	f002 bd0a 	b.w	b99a6 <_ZN5Print7printlnEPKc>
   b6f92:	bf00      	nop
   b6f94:	000bdbcf 	.word	0x000bdbcf

000b6f98 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b6f98:	b538      	push	{r3, r4, r5, lr}
   b6f9a:	4605      	mov	r5, r0
   b6f9c:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b6f9e:	f002 fce9 	bl	b9974 <_ZN5Print5printEPKc>
    client.print(": ");
   b6fa2:	490b      	ldr	r1, [pc, #44]	; (b6fd0 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b6fa4:	4628      	mov	r0, r5
   b6fa6:	f002 fce5 	bl	b9974 <_ZN5Print5printEPKc>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b6faa:	2c00      	cmp	r4, #0
   b6fac:	da0d      	bge.n	b6fca <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b6fae:	212d      	movs	r1, #45	; 0x2d
   b6fb0:	4628      	mov	r0, r5
   b6fb2:	f002 fce3 	bl	b997c <_ZN5Print5printEc>
            val = -n;
   b6fb6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6fb8:	4628      	mov	r0, r5
   b6fba:	220a      	movs	r2, #10
   b6fbc:	f002 fd07 	bl	b99ce <_ZN5Print11printNumberEmh>
        n += println();
   b6fc0:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6fc6:	f002 bce2 	b.w	b998e <_ZN5Print7printlnEv>
            val = n;
   b6fca:	4621      	mov	r1, r4
   b6fcc:	e7f4      	b.n	b6fb8 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b6fce:	bf00      	nop
   b6fd0:	000bdbcf 	.word	0x000bdbcf

000b6fd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6fd8:	460e      	mov	r6, r1
   b6fda:	b091      	sub	sp, #68	; 0x44
   b6fdc:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b6fde:	f04f 33ff 	mov.w	r3, #4294967295
   b6fe2:	6013      	str	r3, [r2, #0]
{
   b6fe4:	4604      	mov	r4, r0
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6fe6:	2100      	movs	r1, #0
   b6fe8:	4630      	mov	r0, r6
   b6fea:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b6fee:	4617      	mov	r7, r2
   b6ff0:	f001 fa0e 	bl	b8410 <_ZNK6String6equalsEPKc>
   b6ff4:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b6ff8:	4603      	mov	r3, r0
   b6ffa:	b998      	cbnz	r0, b7024 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6ffc:	f1be 0f00 	cmp.w	lr, #0
   b7000:	bf14      	ite	ne
   b7002:	4672      	movne	r2, lr
   b7004:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b7006:	6831      	ldr	r1, [r6, #0]
   b7008:	b292      	uxth	r2, r2
   b700a:	4620      	mov	r0, r4
   b700c:	f003 fcfa 	bl	baa04 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7010:	1e05      	subs	r5, r0, #0
   b7012:	bf18      	it	ne
   b7014:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b7016:	b9c5      	cbnz	r5, b704a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b7018:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b701a:	b011      	add	sp, #68	; 0x44
   b701c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7020:	f003 bea6 	b.w	bad70 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7024:	4b75      	ldr	r3, [pc, #468]	; (b71fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   b7026:	930a      	str	r3, [sp, #40]	; 0x28
   b7028:	f106 0c14 	add.w	ip, r6, #20
   b702c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7030:	ad0b      	add	r5, sp, #44	; 0x2c
   b7032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7034:	f8dc 3000 	ldr.w	r3, [ip]
   b7038:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b703a:	fa1f f28e 	uxth.w	r2, lr
   b703e:	2300      	movs	r3, #0
   b7040:	a90a      	add	r1, sp, #40	; 0x28
   b7042:	4620      	mov	r0, r4
   b7044:	f003 fdbe 	bl	babc4 <_ZN9TCPClient7connectE9IPAddresstm>
   b7048:	e7e2      	b.n	b7010 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b704a:	4649      	mov	r1, r9
   b704c:	4620      	mov	r0, r4
   b704e:	f002 fc91 	bl	b9974 <_ZN5Print5printEPKc>
    client.print(" ");
   b7052:	496b      	ldr	r1, [pc, #428]	; (b7200 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b7054:	4620      	mov	r0, r4
   b7056:	f002 fc8d 	bl	b9974 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b705a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b705c:	4620      	mov	r0, r4
   b705e:	f002 fc89 	bl	b9974 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b7062:	4968      	ldr	r1, [pc, #416]	; (b7204 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b7064:	4620      	mov	r0, r4
   b7066:	f002 fc85 	bl	b9974 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b706a:	4967      	ldr	r1, [pc, #412]	; (b7208 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b706c:	4a67      	ldr	r2, [pc, #412]	; (b720c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b706e:	4620      	mov	r0, r4
   b7070:	f7ff ff80 	bl	b6f74 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7074:	2100      	movs	r1, #0
   b7076:	4630      	mov	r0, r6
   b7078:	f001 f9ca 	bl	b8410 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b707c:	b920      	cbnz	r0, b7088 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b707e:	6832      	ldr	r2, [r6, #0]
   b7080:	4963      	ldr	r1, [pc, #396]	; (b7210 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b7082:	4620      	mov	r0, r4
   b7084:	f7ff ff76 	bl	b6f74 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b7088:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b708c:	2100      	movs	r1, #0
   b708e:	4650      	mov	r0, sl
   b7090:	f001 f9be 	bl	b8410 <_ZNK6String6equalsEPKc>
   b7094:	b928      	cbnz	r0, b70a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7096:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7098:	495e      	ldr	r1, [pc, #376]	; (b7214 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b709a:	4620      	mov	r0, r4
   b709c:	f7ff ff7c 	bl	b6f98 <_ZN10HttpClient10sendHeaderEPKci>
   b70a0:	e006      	b.n	b70b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b70a2:	495d      	ldr	r1, [pc, #372]	; (b7218 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b70a4:	4648      	mov	r0, r9
   b70a6:	f7fd fcab 	bl	b4a00 <strcmp>
   b70aa:	4602      	mov	r2, r0
   b70ac:	2800      	cmp	r0, #0
   b70ae:	d0f3      	beq.n	b7098 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b70b0:	f1b8 0f00 	cmp.w	r8, #0
   b70b4:	d00e      	beq.n	b70d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b70b6:	f8d8 1000 	ldr.w	r1, [r8]
   b70ba:	b159      	cbz	r1, b70d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b70bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b70c0:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b70c2:	b122      	cbz	r2, b70ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b70c4:	f7ff ff56 	bl	b6f74 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b70c8:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b70cc:	e7f3      	b.n	b70b6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b70ce:	f002 fc6a 	bl	b99a6 <_ZN5Print7printlnEPKc>
}
   b70d2:	e7f9      	b.n	b70c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b70d4:	4620      	mov	r0, r4
   b70d6:	f002 fc5a 	bl	b998e <_ZN5Print7printlnEv>
    client.flush();
   b70da:	4620      	mov	r0, r4
   b70dc:	f003 fc16 	bl	ba90c <_ZN9TCPClient5flushEv>
   b70e0:	2100      	movs	r1, #0
   b70e2:	4650      	mov	r0, sl
   b70e4:	f001 f994 	bl	b8410 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b70e8:	b918      	cbnz	r0, b70f2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b70ea:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b70ec:	4620      	mov	r0, r4
   b70ee:	f002 fc5a 	bl	b99a6 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b70f2:	f104 0a1c 	add.w	sl, r4, #28
   b70f6:	f640 0224 	movw	r2, #2084	; 0x824
   b70fa:	2100      	movs	r1, #0
   b70fc:	4650      	mov	r0, sl
   b70fe:	f004 fa96 	bl	bb62e <memset>
   b7102:	f000 fc45 	bl	b7990 <HAL_Timer_Get_Milli_Seconds>
   b7106:	9001      	str	r0, [sp, #4]
   b7108:	f000 fc42 	bl	b7990 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b710c:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7110:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7112:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b7116:	4620      	mov	r0, r4
   b7118:	f003 fdd0 	bl	bacbc <_ZN9TCPClient9availableEv>
   b711c:	b1d8      	cbz	r0, b7156 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
   b711e:	4620      	mov	r0, r4
   b7120:	f003 fbda 	bl	ba8d8 <_ZN9TCPClient4readEv>
   b7124:	4681      	mov	r9, r0
   b7126:	f000 fc33 	bl	b7990 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b712a:	f640 0322 	movw	r3, #2082	; 0x822
   b712e:	429e      	cmp	r6, r3
   b7130:	9001      	str	r0, [sp, #4]
   b7132:	d804      	bhi.n	b713e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7134:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b7136:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b713a:	3601      	adds	r6, #1
        while (client.available()) {
   b713c:	e7eb      	b.n	b7116 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b713e:	f640 0323 	movw	r3, #2083	; 0x823
   b7142:	429e      	cmp	r6, r3
   b7144:	d1f9      	bne.n	b713a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7146:	2300      	movs	r3, #0
   b7148:	f884 383f 	strb.w	r3, [r4, #2111]	; 0x83f
                client.stop();
   b714c:	4620      	mov	r0, r4
   b714e:	f003 fe0f 	bl	bad70 <_ZN9TCPClient4stopEv>
                error = true;
   b7152:	46a8      	mov	r8, r5
   b7154:	e7f1      	b.n	b713a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7156:	19a3      	adds	r3, r4, r6
   b7158:	7718      	strb	r0, [r3, #28]
   b715a:	f000 fc19 	bl	b7990 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b715e:	9b01      	ldr	r3, [sp, #4]
   b7160:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7164:	f1b8 0f00 	cmp.w	r8, #0
   b7168:	d104      	bne.n	b7174 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
   b716a:	45d9      	cmp	r9, fp
   b716c:	d802      	bhi.n	b7174 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
   b716e:	20c8      	movs	r0, #200	; 0xc8
   b7170:	f002 fe56 	bl	b9e20 <delay>
    } while (client.connected() && !timeout && !error);
   b7174:	4620      	mov	r0, r4
   b7176:	f003 fcc3 	bl	bab00 <_ZN9TCPClient9connectedEv>
   b717a:	b120      	cbz	r0, b7186 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b717c:	45d9      	cmp	r9, fp
   b717e:	d802      	bhi.n	b7186 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b7180:	f1b8 0f00 	cmp.w	r8, #0
   b7184:	d0c7      	beq.n	b7116 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b7186:	4620      	mov	r0, r4
   b7188:	f003 fdf2 	bl	bad70 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b718c:	4651      	mov	r1, sl
   b718e:	a802      	add	r0, sp, #8
   b7190:	f001 f88f 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7194:	230c      	movs	r3, #12
   b7196:	2209      	movs	r2, #9
   b7198:	a902      	add	r1, sp, #8
   b719a:	a806      	add	r0, sp, #24
   b719c:	f001 f95c 	bl	b8458 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b71a0:	491e      	ldr	r1, [pc, #120]	; (b721c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b71a2:	a80a      	add	r0, sp, #40	; 0x28
   b71a4:	f001 f885 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b71a8:	a90a      	add	r1, sp, #40	; 0x28
   b71aa:	a802      	add	r0, sp, #8
   b71ac:	f001 f951 	bl	b8452 <_ZNK6String7indexOfERKS_>
   b71b0:	4604      	mov	r4, r0
   b71b2:	a80a      	add	r0, sp, #40	; 0x28
   b71b4:	f001 f832 	bl	b821c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b71b8:	1c63      	adds	r3, r4, #1
   b71ba:	d108      	bne.n	b71ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
    String statusCode = raw_response.substring(9,12);
   b71bc:	a806      	add	r0, sp, #24
   b71be:	f001 f82d 	bl	b821c <_ZN6StringD1Ev>
    String raw_response(buffer);
   b71c2:	a802      	add	r0, sp, #8
   b71c4:	f001 f82a 	bl	b821c <_ZN6StringD1Ev>
}
   b71c8:	b011      	add	sp, #68	; 0x44
   b71ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b71ce:	1d3d      	adds	r5, r7, #4
   b71d0:	4913      	ldr	r1, [pc, #76]	; (b7220 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b71d2:	4628      	mov	r0, r5
   b71d4:	f001 f8cb 	bl	b836e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b71d8:	1d22      	adds	r2, r4, #4
   b71da:	a902      	add	r1, sp, #8
   b71dc:	a80a      	add	r0, sp, #40	; 0x28
   b71de:	f001 f95b 	bl	b8498 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b71e2:	a90a      	add	r1, sp, #40	; 0x28
   b71e4:	4628      	mov	r0, r5
   b71e6:	f001 f8fe 	bl	b83e6 <_ZN6String6concatERKS_>
   b71ea:	a80a      	add	r0, sp, #40	; 0x28
   b71ec:	f001 f816 	bl	b821c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b71f0:	9806      	ldr	r0, [sp, #24]
   b71f2:	f004 f9dc 	bl	bb5ae <atoi>
   b71f6:	6038      	str	r0, [r7, #0]
   b71f8:	e7e0      	b.n	b71bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
   b71fa:	bf00      	nop
   b71fc:	000be350 	.word	0x000be350
   b7200:	000bdbdf 	.word	0x000bdbdf
   b7204:	000bdf72 	.word	0x000bdf72
   b7208:	000bdf84 	.word	0x000bdf84
   b720c:	000bdf7e 	.word	0x000bdf7e
   b7210:	000bdf8f 	.word	0x000bdf8f
   b7214:	000bde40 	.word	0x000bde40
   b7218:	000bdf94 	.word	0x000bdf94
   b721c:	000bdf99 	.word	0x000bdf99
   b7220:	000bdf9d 	.word	0x000bdf9d

000b7224 <_ZN9JSONClassD1Ev>:
#endif
}

JSONClass::~JSONClass()
{
}
   b7224:	4770      	bx	lr

000b7226 <_ZN9JSONClassD0Ev>:
JSONClass::~JSONClass()
   b7226:	b510      	push	{r4, lr}
}
   b7228:	2104      	movs	r1, #4
JSONClass::~JSONClass()
   b722a:	4604      	mov	r4, r0
}
   b722c:	f7fd fc51 	bl	b4ad2 <_ZdlPvj>
   b7230:	4620      	mov	r0, r4
   b7232:	bd10      	pop	{r4, pc}

000b7234 <_ZN9JSONClass5parseERK6String>:
{
  return JSONVar::parse(s);
}

JSONVar JSONClass::parse(const String& s)
{
   b7234:	b510      	push	{r4, lr}
  return JSONVar::parse(s);
   b7236:	4611      	mov	r1, r2
{
   b7238:	4604      	mov	r4, r0
  return JSONVar::parse(s);
   b723a:	f000 f861 	bl	b7300 <_ZN7JSONVar5parseERK6String>
}
   b723e:	4620      	mov	r0, r4
   b7240:	bd10      	pop	{r4, pc}

000b7242 <_ZN9JSONClass7typeof_ERK7JSONVar>:
{
  return JSONVar::stringify(value);
}

String JSONClass::typeof(const JSONVar& value)
{
   b7242:	b510      	push	{r4, lr}
  return JSONVar::typeof(value);
   b7244:	4611      	mov	r1, r2
{
   b7246:	4604      	mov	r4, r0
  return JSONVar::typeof(value);
   b7248:	f000 f868 	bl	b731c <_ZN7JSONVar7typeof_ERKS_>
}
   b724c:	4620      	mov	r0, r4
   b724e:	bd10      	pop	{r4, pc}

000b7250 <_GLOBAL__sub_I__ZN9JSONClassC2Ev>:
JSONClass::JSONClass()
   b7250:	4b01      	ldr	r3, [pc, #4]	; (b7258 <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0x8>)
   b7252:	4a02      	ldr	r2, [pc, #8]	; (b725c <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0xc>)
   b7254:	601a      	str	r2, [r3, #0]

JSONClass JSON;
   b7256:	4770      	bx	lr
   b7258:	2003e1c4 	.word	0x2003e1c4
   b725c:	000bdfa8 	.word	0x000bdfa8

000b7260 <_ZN7JSONVarD1Ev>:
JSONVar::JSONVar() :
  JSONVar(NULL, NULL)
{
}

JSONVar::~JSONVar()
   b7260:	b510      	push	{r4, lr}
   b7262:	4b05      	ldr	r3, [pc, #20]	; (b7278 <_ZN7JSONVarD1Ev+0x18>)
   b7264:	6003      	str	r3, [r0, #0]
   b7266:	4604      	mov	r4, r0
{
  if (_json != NULL && _parent == NULL) {
   b7268:	6840      	ldr	r0, [r0, #4]
   b726a:	b118      	cbz	r0, b7274 <_ZN7JSONVarD1Ev+0x14>
   b726c:	68a3      	ldr	r3, [r4, #8]
   b726e:	b90b      	cbnz	r3, b7274 <_ZN7JSONVarD1Ev+0x14>
    cJSON_Delete(_json);
   b7270:	f7fe f8de 	bl	b5430 <cJSON_Delete>

    _json = NULL;
  }
}
   b7274:	4620      	mov	r0, r4
   b7276:	bd10      	pop	{r4, pc}
   b7278:	000bdfe4 	.word	0x000bdfe4

000b727c <_ZN7JSONVarD0Ev>:
JSONVar::~JSONVar()
   b727c:	b510      	push	{r4, lr}
   b727e:	4604      	mov	r4, r0
}
   b7280:	f7ff ffee 	bl	b7260 <_ZN7JSONVarD1Ev>
   b7284:	4620      	mov	r0, r4
   b7286:	210c      	movs	r1, #12
   b7288:	f7fd fc23 	bl	b4ad2 <_ZdlPvj>
   b728c:	4620      	mov	r0, r4
   b728e:	bd10      	pop	{r4, pc}

000b7290 <_ZNK7JSONVar7printToER5Print>:

size_t JSONVar::printTo(Print& p) const
{
   b7290:	b538      	push	{r3, r4, r5, lr}
  if (_json == NULL) {
   b7292:	6840      	ldr	r0, [r0, #4]
{
   b7294:	460c      	mov	r4, r1
  if (_json == NULL) {
   b7296:	b160      	cbz	r0, b72b2 <_ZNK7JSONVar7printToER5Print+0x22>
    return 0;
  }

  char* s = cJSON_PrintUnformatted(_json);
   b7298:	f7fe fae4 	bl	b5864 <cJSON_PrintUnformatted>
   b729c:	4605      	mov	r5, r0

  size_t writen = p.print(s);
   b729e:	4601      	mov	r1, r0
   b72a0:	4620      	mov	r0, r4
   b72a2:	f002 fb67 	bl	b9974 <_ZN5Print5printEPKc>
   b72a6:	4604      	mov	r4, r0

  cJSON_free(s);
   b72a8:	4628      	mov	r0, r5
   b72aa:	f7fe fb7b 	bl	b59a4 <cJSON_free>

  return writen;
}
   b72ae:	4620      	mov	r0, r4
   b72b0:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   b72b2:	4604      	mov	r4, r0
   b72b4:	e7fb      	b.n	b72ae <_ZNK7JSONVar7printToER5Print+0x1e>
	...

000b72b8 <_ZNK7JSONVarcvdEv>:
{
  return cJSON_IsNumber(_json) ? _json->valueint : 0;
}

JSONVar::operator double() const
{
   b72b8:	b510      	push	{r4, lr}
   b72ba:	4604      	mov	r4, r0
  return cJSON_IsNumber(_json) ? _json->valuedouble : NAN;
   b72bc:	6840      	ldr	r0, [r0, #4]
   b72be:	f7fe fb54 	bl	b596a <cJSON_IsNumber>
   b72c2:	b118      	cbz	r0, b72cc <_ZNK7JSONVarcvdEv+0x14>
   b72c4:	6863      	ldr	r3, [r4, #4]
   b72c6:	ed93 0b06 	vldr	d0, [r3, #24]
}
   b72ca:	bd10      	pop	{r4, pc}
  return cJSON_IsNumber(_json) ? _json->valuedouble : NAN;
   b72cc:	ed9f 0b02 	vldr	d0, [pc, #8]	; b72d8 <_ZNK7JSONVarcvdEv+0x20>
   b72d0:	e7fb      	b.n	b72ca <_ZNK7JSONVarcvdEv+0x12>
   b72d2:	bf00      	nop
   b72d4:	f3af 8000 	nop.w
   b72d8:	00000000 	.word	0x00000000
   b72dc:	7ff80000 	.word	0x7ff80000

000b72e0 <_ZNK7JSONVar14hasOwnPropertyEPKc>:

  return JSONVar(cJSON_CreateStringArray(keys, length), NULL);
}

bool JSONVar::hasOwnProperty(const char* key) const
{
   b72e0:	b513      	push	{r0, r1, r4, lr}
   b72e2:	4604      	mov	r4, r0
  if (!cJSON_IsObject(_json)) {
   b72e4:	6840      	ldr	r0, [r0, #4]
{
   b72e6:	9101      	str	r1, [sp, #4]
  if (!cJSON_IsObject(_json)) {
   b72e8:	f7fe fb54 	bl	b5994 <cJSON_IsObject>
   b72ec:	b130      	cbz	r0, b72fc <_ZNK7JSONVar14hasOwnPropertyEPKc+0x1c>
    return false;
  }

  cJSON* json = cJSON_GetObjectItemCaseSensitive(_json, key);
   b72ee:	9901      	ldr	r1, [sp, #4]
   b72f0:	6860      	ldr	r0, [r4, #4]
   b72f2:	f7fe fac8 	bl	b5886 <cJSON_GetObjectItemCaseSensitive>

  return (json != NULL);
   b72f6:	3800      	subs	r0, #0
   b72f8:	bf18      	it	ne
   b72fa:	2001      	movne	r0, #1
}
   b72fc:	b002      	add	sp, #8
   b72fe:	bd10      	pop	{r4, pc}

000b7300 <_ZN7JSONVar5parseERK6String>:

  return JSONVar(json, NULL);
}

JSONVar JSONVar::parse(const String& s)
{
   b7300:	b510      	push	{r4, lr}
   b7302:	4604      	mov	r4, r0
  cJSON* json = cJSON_Parse(s);
   b7304:	6808      	ldr	r0, [r1, #0]
   b7306:	f7fe faa9 	bl	b585c <cJSON_Parse>
  _parent(parent)
   b730a:	4b03      	ldr	r3, [pc, #12]	; (b7318 <_ZN7JSONVar5parseERK6String+0x18>)
   b730c:	e9c4 3000 	strd	r3, r0, [r4]
   b7310:	2300      	movs	r3, #0
   b7312:	60a3      	str	r3, [r4, #8]
  return parse(s.c_str());
}
   b7314:	4620      	mov	r0, r4
   b7316:	bd10      	pop	{r4, pc}
   b7318:	000bdfe4 	.word	0x000bdfe4

000b731c <_ZN7JSONVar7typeof_ERKS_>:

  return str;
}

String JSONVar::typeof_(const JSONVar& value)
{
   b731c:	b538      	push	{r3, r4, r5, lr}
  struct cJSON* json = value._json;
   b731e:	684d      	ldr	r5, [r1, #4]
{
   b7320:	4604      	mov	r4, r0

  if (json == NULL ||  cJSON_IsInvalid(json)) {
   b7322:	b92d      	cbnz	r5, b7330 <_ZN7JSONVar7typeof_ERKS_+0x14>
    return "undefined";
   b7324:	4918      	ldr	r1, [pc, #96]	; (b7388 <_ZN7JSONVar7typeof_ERKS_+0x6c>)
  } else if (cJSON_IsArray(json)) {
    return "array"; // TODO: should this return "object" to be more JS like?
  } else if (cJSON_IsObject(json)) {
    return "object";
  } else {
    return "unknown";
   b7326:	4620      	mov	r0, r4
   b7328:	f000 ffc3 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
  }
}
   b732c:	4620      	mov	r0, r4
   b732e:	bd38      	pop	{r3, r4, r5, pc}
  if (json == NULL ||  cJSON_IsInvalid(json)) {
   b7330:	4628      	mov	r0, r5
   b7332:	f7fe fb07 	bl	b5944 <cJSON_IsInvalid>
   b7336:	2800      	cmp	r0, #0
   b7338:	d1f4      	bne.n	b7324 <_ZN7JSONVar7typeof_ERKS_+0x8>
  } else if (cJSON_IsBool(json)) {
   b733a:	4628      	mov	r0, r5
   b733c:	f7fe fb08 	bl	b5950 <cJSON_IsBool>
   b7340:	b108      	cbz	r0, b7346 <_ZN7JSONVar7typeof_ERKS_+0x2a>
    return "boolean";
   b7342:	4912      	ldr	r1, [pc, #72]	; (b738c <_ZN7JSONVar7typeof_ERKS_+0x70>)
   b7344:	e7ef      	b.n	b7326 <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsNull(json)) {
   b7346:	4628      	mov	r0, r5
   b7348:	f7fe fb09 	bl	b595e <cJSON_IsNull>
   b734c:	b108      	cbz	r0, b7352 <_ZN7JSONVar7typeof_ERKS_+0x36>
    return "null"; // TODO: should this return "object" to be more JS like?
   b734e:	4910      	ldr	r1, [pc, #64]	; (b7390 <_ZN7JSONVar7typeof_ERKS_+0x74>)
   b7350:	e7e9      	b.n	b7326 <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsNumber(json)) {
   b7352:	4628      	mov	r0, r5
   b7354:	f7fe fb09 	bl	b596a <cJSON_IsNumber>
   b7358:	b108      	cbz	r0, b735e <_ZN7JSONVar7typeof_ERKS_+0x42>
    return "number";
   b735a:	490e      	ldr	r1, [pc, #56]	; (b7394 <_ZN7JSONVar7typeof_ERKS_+0x78>)
   b735c:	e7e3      	b.n	b7326 <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsString(json)) {
   b735e:	4628      	mov	r0, r5
   b7360:	f7fe fb0a 	bl	b5978 <cJSON_IsString>
   b7364:	b108      	cbz	r0, b736a <_ZN7JSONVar7typeof_ERKS_+0x4e>
    return "string";
   b7366:	490c      	ldr	r1, [pc, #48]	; (b7398 <_ZN7JSONVar7typeof_ERKS_+0x7c>)
   b7368:	e7dd      	b.n	b7326 <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsArray(json)) {
   b736a:	4628      	mov	r0, r5
   b736c:	f7fe fb0b 	bl	b5986 <cJSON_IsArray>
   b7370:	b108      	cbz	r0, b7376 <_ZN7JSONVar7typeof_ERKS_+0x5a>
    return "array"; // TODO: should this return "object" to be more JS like?
   b7372:	490a      	ldr	r1, [pc, #40]	; (b739c <_ZN7JSONVar7typeof_ERKS_+0x80>)
   b7374:	e7d7      	b.n	b7326 <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsObject(json)) {
   b7376:	4628      	mov	r0, r5
   b7378:	f7fe fb0c 	bl	b5994 <cJSON_IsObject>
   b737c:	b108      	cbz	r0, b7382 <_ZN7JSONVar7typeof_ERKS_+0x66>
    return "object";
   b737e:	4908      	ldr	r1, [pc, #32]	; (b73a0 <_ZN7JSONVar7typeof_ERKS_+0x84>)
   b7380:	e7d1      	b.n	b7326 <_ZN7JSONVar7typeof_ERKS_+0xa>
    return "unknown";
   b7382:	4908      	ldr	r1, [pc, #32]	; (b73a4 <_ZN7JSONVar7typeof_ERKS_+0x88>)
   b7384:	e7cf      	b.n	b7326 <_ZN7JSONVar7typeof_ERKS_+0xa>
   b7386:	bf00      	nop
   b7388:	000bdd0f 	.word	0x000bdd0f
   b738c:	000bdfb0 	.word	0x000bdfb0
   b7390:	000bd8b9 	.word	0x000bd8b9
   b7394:	000bdfb8 	.word	0x000bdfb8
   b7398:	000bdfbf 	.word	0x000bdfbf
   b739c:	000bdfc6 	.word	0x000bdfc6
   b73a0:	000bdfcc 	.word	0x000bdfcc
   b73a4:	000bdfd3 	.word	0x000bdfd3

000b73a8 <_ZN7JSONVar11replaceJsonEP5cJSON>:

void JSONVar::replaceJson(struct cJSON* json)
{
   b73a8:	b538      	push	{r3, r4, r5, lr}
  cJSON* old = _json;
   b73aa:	6845      	ldr	r5, [r0, #4]

  _json = json;
   b73ac:	6041      	str	r1, [r0, #4]
{
   b73ae:	4604      	mov	r4, r0

  if (old) {
   b73b0:	b1dd      	cbz	r5, b73ea <_ZN7JSONVar11replaceJsonEP5cJSON+0x42>
    if (_parent) {
   b73b2:	6880      	ldr	r0, [r0, #8]
   b73b4:	b1a0      	cbz	r0, b73e0 <_ZN7JSONVar11replaceJsonEP5cJSON+0x38>
      if (cJSON_IsObject(_parent)) {
   b73b6:	f7fe faed 	bl	b5994 <cJSON_IsObject>
   b73ba:	b130      	cbz	r0, b73ca <_ZN7JSONVar11replaceJsonEP5cJSON+0x22>
        cJSON_ReplaceItemInObjectCaseSensitive(_parent, old->string, _json);
   b73bc:	6862      	ldr	r2, [r4, #4]
   b73be:	6a29      	ldr	r1, [r5, #32]
   b73c0:	68a0      	ldr	r0, [r4, #8]
      }
    } else {
      cJSON_Delete(old);
    }
  }
}
   b73c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        cJSON_ReplaceItemInObjectCaseSensitive(_parent, old->string, _json);
   b73c6:	f7fe bb16 	b.w	b59f6 <cJSON_ReplaceItemInObjectCaseSensitive>
      } else if (cJSON_IsArray(_parent)) {
   b73ca:	68a0      	ldr	r0, [r4, #8]
   b73cc:	f7fe fadb 	bl	b5986 <cJSON_IsArray>
   b73d0:	b158      	cbz	r0, b73ea <_ZN7JSONVar11replaceJsonEP5cJSON+0x42>
        cJSON_ReplaceItemViaPointer(_parent, old, _json);
   b73d2:	6862      	ldr	r2, [r4, #4]
   b73d4:	68a0      	ldr	r0, [r4, #8]
   b73d6:	4629      	mov	r1, r5
}
   b73d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        cJSON_ReplaceItemViaPointer(_parent, old, _json);
   b73dc:	f7fe ba58 	b.w	b5890 <cJSON_ReplaceItemViaPointer>
      cJSON_Delete(old);
   b73e0:	4628      	mov	r0, r5
}
   b73e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      cJSON_Delete(old);
   b73e6:	f7fe b823 	b.w	b5430 <cJSON_Delete>
}
   b73ea:	bd38      	pop	{r3, r4, r5, pc}

000b73ec <_ZN7JSONVarixEPKc>:
{
   b73ec:	b570      	push	{r4, r5, r6, lr}
   b73ee:	4605      	mov	r5, r0
  if (!cJSON_IsObject(_json)) {
   b73f0:	6848      	ldr	r0, [r1, #4]
{
   b73f2:	460c      	mov	r4, r1
   b73f4:	4616      	mov	r6, r2
  if (!cJSON_IsObject(_json)) {
   b73f6:	f7fe facd 	bl	b5994 <cJSON_IsObject>
   b73fa:	b928      	cbnz	r0, b7408 <_ZN7JSONVarixEPKc+0x1c>
    replaceJson(cJSON_CreateObject());
   b73fc:	f7fe fa96 	bl	b592c <cJSON_CreateObject>
   b7400:	4601      	mov	r1, r0
   b7402:	4620      	mov	r0, r4
   b7404:	f7ff ffd0 	bl	b73a8 <_ZN7JSONVar11replaceJsonEP5cJSON>
  cJSON* json = cJSON_GetObjectItemCaseSensitive(_json, key);
   b7408:	6860      	ldr	r0, [r4, #4]
   b740a:	4631      	mov	r1, r6
   b740c:	f7fe fa3b 	bl	b5886 <cJSON_GetObjectItemCaseSensitive>
  if (json == NULL) {
   b7410:	b918      	cbnz	r0, b741a <_ZN7JSONVarixEPKc+0x2e>
    json = cJSON_AddNullToObject(_json, key);
   b7412:	6860      	ldr	r0, [r4, #4]
   b7414:	4631      	mov	r1, r6
   b7416:	f7fe fa67 	bl	b58e8 <cJSON_AddNullToObject>
  _parent(parent)
   b741a:	4a03      	ldr	r2, [pc, #12]	; (b7428 <_ZN7JSONVarixEPKc+0x3c>)
  return JSONVar(json, _json);    
   b741c:	6863      	ldr	r3, [r4, #4]
  _parent(parent)
   b741e:	60ab      	str	r3, [r5, #8]
   b7420:	e9c5 2000 	strd	r2, r0, [r5]
}
   b7424:	4628      	mov	r0, r5
   b7426:	bd70      	pop	{r4, r5, r6, pc}
   b7428:	000bdfe4 	.word	0x000bdfe4

000b742c <_ZN7JSONVarixEi>:
{
   b742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b742e:	4606      	mov	r6, r0
  if (!cJSON_IsArray(_json)) {
   b7430:	6848      	ldr	r0, [r1, #4]
{
   b7432:	460d      	mov	r5, r1
   b7434:	4617      	mov	r7, r2
  if (!cJSON_IsArray(_json)) {
   b7436:	f7fe faa6 	bl	b5986 <cJSON_IsArray>
   b743a:	b928      	cbnz	r0, b7448 <_ZN7JSONVarixEi+0x1c>
    replaceJson(cJSON_CreateArray());
   b743c:	f7fe fa6a 	bl	b5914 <cJSON_CreateArray>
   b7440:	4601      	mov	r1, r0
   b7442:	4628      	mov	r0, r5
   b7444:	f7ff ffb0 	bl	b73a8 <_ZN7JSONVar11replaceJsonEP5cJSON>
  cJSON* json = cJSON_GetArrayItem(_json, index);
   b7448:	6868      	ldr	r0, [r5, #4]
   b744a:	4639      	mov	r1, r7
   b744c:	f7fe fa15 	bl	b587a <cJSON_GetArrayItem>
  if (json == NULL) {
   b7450:	4604      	mov	r4, r0
   b7452:	b960      	cbnz	r0, b746e <_ZN7JSONVarixEi+0x42>
    while (index >= cJSON_GetArraySize(_json)) {
   b7454:	6868      	ldr	r0, [r5, #4]
   b7456:	f7fe fa08 	bl	b586a <cJSON_GetArraySize>
   b745a:	42b8      	cmp	r0, r7
   b745c:	dc07      	bgt.n	b746e <_ZN7JSONVarixEi+0x42>
      json = cJSON_CreateNull();
   b745e:	f7fe fa37 	bl	b58d0 <cJSON_CreateNull>
   b7462:	4604      	mov	r4, r0
      cJSON_AddItemToArray(_json, json);
   b7464:	4601      	mov	r1, r0
   b7466:	6868      	ldr	r0, [r5, #4]
   b7468:	f7fe fa10 	bl	b588c <cJSON_AddItemToArray>
    while (index >= cJSON_GetArraySize(_json)) {
   b746c:	e7f2      	b.n	b7454 <_ZN7JSONVarixEi+0x28>
  _parent(parent)
   b746e:	4a03      	ldr	r2, [pc, #12]	; (b747c <_ZN7JSONVarixEi+0x50>)
  return JSONVar(json, _json);
   b7470:	686b      	ldr	r3, [r5, #4]
  _parent(parent)
   b7472:	60b3      	str	r3, [r6, #8]
   b7474:	e9c6 2400 	strd	r2, r4, [r6]
}
   b7478:	4630      	mov	r0, r6
   b747a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b747c:	000bdfe4 	.word	0x000bdfe4

000b7480 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_>:
  _parent(parent)
   b7480:	4b03      	ldr	r3, [pc, #12]	; (b7490 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x10>)
   b7482:	4a04      	ldr	r2, [pc, #16]	; (b7494 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x14>)
   b7484:	601a      	str	r2, [r3, #0]
   b7486:	2200      	movs	r2, #0
   b7488:	e9c3 2201 	strd	r2, r2, [r3, #4]

JSONVar undefined;
   b748c:	4770      	bx	lr
   b748e:	bf00      	nop
   b7490:	2003e1c8 	.word	0x2003e1c8
   b7494:	000bdfe4 	.word	0x000bdfe4

000b7498 <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b7498:	b570      	push	{r4, r5, r6, lr}
   b749a:	4604      	mov	r4, r0
   b749c:	4605      	mov	r5, r0
   b749e:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b74a2:	4628      	mov	r0, r5
   b74a4:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b74a8:	f000 f815 	bl	b74d6 <_ZN12mDNSResolver8ResponseC1Ev>
   b74ac:	42ae      	cmp	r6, r5
   b74ae:	d1f8      	bne.n	b74a2 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b74b0:	2300      	movs	r3, #0
   b74b2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b74b6:	4620      	mov	r0, r4
   b74b8:	bd70      	pop	{r4, r5, r6, pc}

000b74ba <_ZN9IPAddressaSImEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b74ba:	b530      	push	{r4, r5, lr}
   b74bc:	b087      	sub	sp, #28
   b74be:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b74c0:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b74c2:	4668      	mov	r0, sp
   b74c4:	f003 f85a 	bl	ba57c <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b74c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74ca:	3404      	adds	r4, #4
   b74cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b74ce:	682b      	ldr	r3, [r5, #0]
   b74d0:	7023      	strb	r3, [r4, #0]
    }
   b74d2:	b007      	add	sp, #28
   b74d4:	bd30      	pop	{r4, r5, pc}

000b74d6 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b74d6:	b538      	push	{r3, r4, r5, lr}
   b74d8:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b74dc:	4604      	mov	r4, r0
   b74de:	4628      	mov	r0, r5
   b74e0:	f003 f82c 	bl	ba53c <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b74e4:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b74e6:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b74e8:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b74ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b74ee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b74f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b74f6:	f04f 31ff 	mov.w	r1, #4294967295
   b74fa:	f7ff ffde 	bl	b74ba <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b74fe:	4620      	mov	r0, r4
   b7500:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7504 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
#ifdef TEST
#include <stdlib.h>
#endif

namespace mDNSResolver {
  Cache cache;
   b7504:	4801      	ldr	r0, [pc, #4]	; (b750c <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b7506:	f7ff bfc7 	b.w	b7498 <_ZN12mDNSResolver5CacheC1Ev>
   b750a:	bf00      	nop
   b750c:	2003e1d4 	.word	0x2003e1d4

000b7510 <_Z13initLastWritev>:
// Function initializes the lastWrite.txt file to "0"
// It's holding the current day number of the year,
// i.e. 1 - 364
// ###################################################
bool initLastWrite()
{
   b7510:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bool initOK = true;

    // Open file (r/w). Create if not existing.
    int fdLastWrite = open("/lastWrite.txt", O_RDWR | O_CREAT);
   b7512:	4818      	ldr	r0, [pc, #96]	; (b7574 <_Z13initLastWritev+0x64>)
   b7514:	f240 2102 	movw	r1, #514	; 0x202
   b7518:	f005 f864 	bl	bc5e4 <open>

    // Check for errors.
    if (fdLastWrite == -1)
   b751c:	1c43      	adds	r3, r0, #1
    int fdLastWrite = open("/lastWrite.txt", O_RDWR | O_CREAT);
   b751e:	4605      	mov	r5, r0
    if (fdLastWrite == -1)
   b7520:	d110      	bne.n	b7544 <_Z13initLastWritev+0x34>
    {

        Serial.printlnf("Error initializing lastWrite.txt file %d", errno);
   b7522:	f003 f8c1 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b7526:	4604      	mov	r4, r0
   b7528:	f000 fd98 	bl	b805c <__errno>
   b752c:	4912      	ldr	r1, [pc, #72]	; (b7578 <_Z13initLastWritev+0x68>)
   b752e:	6802      	ldr	r2, [r0, #0]
   b7530:	4620      	mov	r0, r4
   b7532:	f7fe fbf1 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
        initOK = false;
   b7536:	2400      	movs	r4, #0
        {
            Serial.printlnf("Error writing initial data to lastWrite.txt: %d", errno);
            initOK = false;
        }
    }
    close(fdLastWrite);
   b7538:	4628      	mov	r0, r5
   b753a:	f005 f843 	bl	bc5c4 <close>
    return initOK;
}
   b753e:	4620      	mov	r0, r4
   b7540:	b002      	add	sp, #8
   b7542:	bd70      	pop	{r4, r5, r6, pc}
        uint16_t initData = 0;
   b7544:	2400      	movs	r4, #0
        if (write(fdLastWrite, &initData, sizeof(initData)) == -1)
   b7546:	2202      	movs	r2, #2
   b7548:	f10d 0106 	add.w	r1, sp, #6
        uint16_t initData = 0;
   b754c:	f8ad 4006 	strh.w	r4, [sp, #6]
        if (write(fdLastWrite, &initData, sizeof(initData)) == -1)
   b7550:	f005 f866 	bl	bc620 <write>
   b7554:	3001      	adds	r0, #1
   b7556:	d10a      	bne.n	b756e <_Z13initLastWritev+0x5e>
            Serial.printlnf("Error writing initial data to lastWrite.txt: %d", errno);
   b7558:	f003 f8a6 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b755c:	4606      	mov	r6, r0
   b755e:	f000 fd7d 	bl	b805c <__errno>
   b7562:	4906      	ldr	r1, [pc, #24]	; (b757c <_Z13initLastWritev+0x6c>)
   b7564:	6802      	ldr	r2, [r0, #0]
   b7566:	4630      	mov	r0, r6
   b7568:	f7fe fbd6 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
            initOK = false;
   b756c:	e7e4      	b.n	b7538 <_Z13initLastWritev+0x28>
    bool initOK = true;
   b756e:	2401      	movs	r4, #1
   b7570:	e7e2      	b.n	b7538 <_Z13initLastWritev+0x28>
   b7572:	bf00      	nop
   b7574:	000bdff0 	.word	0x000bdff0
   b7578:	000bdfff 	.word	0x000bdfff
   b757c:	000be028 	.word	0x000be028

000b7580 <_Z11initWhFilesv>:
// ##############################################
// Function initializes the wattHour files.
// Creates them if not existing.
// ##############################################
bool initWhFiles()
{
   b7580:	b570      	push	{r4, r5, r6, lr}
    bool initOK = true;

    // Open files (r/w). Create if not existing.
    int fdWhToday = open("/wattHourToday.txt", O_RDWR | O_CREAT);
   b7582:	f240 2102 	movw	r1, #514	; 0x202
   b7586:	4811      	ldr	r0, [pc, #68]	; (b75cc <_Z11initWhFilesv+0x4c>)
   b7588:	f005 f82c 	bl	bc5e4 <open>
    int fdWhYesterday = open("/wattHourYesterday.txt", O_RDWR | O_CREAT);
   b758c:	f240 2102 	movw	r1, #514	; 0x202
    int fdWhToday = open("/wattHourToday.txt", O_RDWR | O_CREAT);
   b7590:	4605      	mov	r5, r0
    int fdWhYesterday = open("/wattHourYesterday.txt", O_RDWR | O_CREAT);
   b7592:	480f      	ldr	r0, [pc, #60]	; (b75d0 <_Z11initWhFilesv+0x50>)
   b7594:	f005 f826 	bl	bc5e4 <open>

    // Check for errors.
    if (fdWhToday == -1 || fdWhYesterday == -1)
   b7598:	1c6a      	adds	r2, r5, #1
    int fdWhYesterday = open("/wattHourYesterday.txt", O_RDWR | O_CREAT);
   b759a:	4604      	mov	r4, r0
    if (fdWhToday == -1 || fdWhYesterday == -1)
   b759c:	d001      	beq.n	b75a2 <_Z11initWhFilesv+0x22>
   b759e:	1c43      	adds	r3, r0, #1
   b75a0:	d112      	bne.n	b75c8 <_Z11initWhFilesv+0x48>
    {
        Serial.printlnf("Error opening file %d", errno);
   b75a2:	f003 f881 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b75a6:	4606      	mov	r6, r0
   b75a8:	f000 fd58 	bl	b805c <__errno>
   b75ac:	4909      	ldr	r1, [pc, #36]	; (b75d4 <_Z11initWhFilesv+0x54>)
   b75ae:	6802      	ldr	r2, [r0, #0]
   b75b0:	4630      	mov	r0, r6
   b75b2:	f7fe fbb1 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
        initOK = false;
   b75b6:	2600      	movs	r6, #0
    }
    close(fdWhToday);
   b75b8:	4628      	mov	r0, r5
   b75ba:	f005 f803 	bl	bc5c4 <close>
    close(fdWhYesterday);
   b75be:	4620      	mov	r0, r4
   b75c0:	f005 f800 	bl	bc5c4 <close>
    return initOK;
}
   b75c4:	4630      	mov	r0, r6
   b75c6:	bd70      	pop	{r4, r5, r6, pc}
    bool initOK = true;
   b75c8:	2601      	movs	r6, #1
   b75ca:	e7f5      	b.n	b75b8 <_Z11initWhFilesv+0x38>
   b75cc:	000be058 	.word	0x000be058
   b75d0:	000be06b 	.word	0x000be06b
   b75d4:	000be082 	.word	0x000be082

000b75d8 <_Z12getLastWritev>:

// ###################################################
// Function that returns the last day# of saving data.
// ###################################################
uint16_t getLastWrite()
{
   b75d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // String returnString;
    uint16_t day;

    // Open file
    int fdLastWrite = open("/lastWrite.txt", O_RDONLY);
   b75da:	4816      	ldr	r0, [pc, #88]	; (b7634 <_Z12getLastWritev+0x5c>)
   b75dc:	2100      	movs	r1, #0
   b75de:	f005 f801 	bl	bc5e4 <open>

    // Check for errors.
    if (fdLastWrite == -1)
   b75e2:	1c43      	adds	r3, r0, #1
    int fdLastWrite = open("/lastWrite.txt", O_RDONLY);
   b75e4:	4604      	mov	r4, r0
    if (fdLastWrite == -1)
   b75e6:	d114      	bne.n	b7612 <_Z12getLastWritev+0x3a>
        Serial.printlnf("Error opening lastWrite.txt: %d", errno);
   b75e8:	f003 f85e 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b75ec:	4605      	mov	r5, r0
   b75ee:	f000 fd35 	bl	b805c <__errno>
   b75f2:	4911      	ldr	r1, [pc, #68]	; (b7638 <_Z12getLastWritev+0x60>)
   b75f4:	6802      	ldr	r2, [r0, #0]
    else
    {
        // Read data.
        if (read(fdLastWrite, &day, sizeof(day)) == -1)
            Serial.printlnf("Error reading file: %d", errno);
   b75f6:	4628      	mov	r0, r5
   b75f8:	f7fe fb8e 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
    }

    close(fdLastWrite);
   b75fc:	4620      	mov	r0, r4
   b75fe:	f004 ffe1 	bl	bc5c4 <close>

    // If no errors, return data.
    if (errno)
   b7602:	f000 fd2b 	bl	b805c <__errno>
   b7606:	6803      	ldr	r3, [r0, #0]
   b7608:	b993      	cbnz	r3, b7630 <_Z12getLastWritev+0x58>
        return 0;
    else
        return day;
   b760a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   b760e:	b003      	add	sp, #12
   b7610:	bd30      	pop	{r4, r5, pc}
        if (read(fdLastWrite, &day, sizeof(day)) == -1)
   b7612:	2202      	movs	r2, #2
   b7614:	f10d 0106 	add.w	r1, sp, #6
   b7618:	f004 fff8 	bl	bc60c <read>
   b761c:	3001      	adds	r0, #1
   b761e:	d1ed      	bne.n	b75fc <_Z12getLastWritev+0x24>
            Serial.printlnf("Error reading file: %d", errno);
   b7620:	f003 f842 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b7624:	4605      	mov	r5, r0
   b7626:	f000 fd19 	bl	b805c <__errno>
   b762a:	4904      	ldr	r1, [pc, #16]	; (b763c <_Z12getLastWritev+0x64>)
   b762c:	6802      	ldr	r2, [r0, #0]
   b762e:	e7e2      	b.n	b75f6 <_Z12getLastWritev+0x1e>
        return 0;
   b7630:	2000      	movs	r0, #0
   b7632:	e7ec      	b.n	b760e <_Z12getLastWritev+0x36>
   b7634:	000bdff0 	.word	0x000bdff0
   b7638:	000be098 	.word	0x000be098
   b763c:	000be0b8 	.word	0x000be0b8

000b7640 <_Z15updateLastWritev>:

// #############################################################
// Write current time to the lastWrite.txt file.
// #############################################################
bool updateLastWrite()
{
   b7640:	b530      	push	{r4, r5, lr}
    // Open file - truncate length to zero.
    int fdLastWrite = open("/lastWrite.txt", O_WRONLY | O_TRUNC);
   b7642:	4820      	ldr	r0, [pc, #128]	; (b76c4 <_Z15updateLastWritev+0x84>)
{
   b7644:	b089      	sub	sp, #36	; 0x24
    int fdLastWrite = open("/lastWrite.txt", O_WRONLY | O_TRUNC);
   b7646:	f240 4101 	movw	r1, #1025	; 0x401
   b764a:	f004 ffcb 	bl	bc5e4 <open>

    // Check for errors.
    if (fdLastWrite == -1)
   b764e:	1c43      	adds	r3, r0, #1
    int fdLastWrite = open("/lastWrite.txt", O_WRONLY | O_TRUNC);
   b7650:	4604      	mov	r4, r0
    if (fdLastWrite == -1)
   b7652:	d114      	bne.n	b767e <_Z15updateLastWritev+0x3e>
        Serial.printlnf("Error opening lastWrite.txt: %d", errno);
   b7654:	f003 f828 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b7658:	4605      	mov	r5, r0
   b765a:	f000 fcff 	bl	b805c <__errno>
   b765e:	491a      	ldr	r1, [pc, #104]	; (b76c8 <_Z15updateLastWritev+0x88>)
   b7660:	6802      	ldr	r2, [r0, #0]
    {
        // Get current day number.
        uint16_t day = Time.format(Time.now(), "%j").toInt();

        if (write(fdLastWrite, &day, sizeof(day)) == -1)
            Serial.printlnf("Error writing to file: %d", errno);
   b7662:	4628      	mov	r0, r5
   b7664:	f7fe fb58 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
    }

    close(fdLastWrite);
   b7668:	4620      	mov	r0, r4
   b766a:	f004 ffab 	bl	bc5c4 <close>

    // Return true, if no errors
    if (errno)
   b766e:	f000 fcf5 	bl	b805c <__errno>
   b7672:	6800      	ldr	r0, [r0, #0]
        return false;
    else
        return true;
}
   b7674:	fab0 f080 	clz	r0, r0
   b7678:	0940      	lsrs	r0, r0, #5
   b767a:	b009      	add	sp, #36	; 0x24
   b767c:	bd30      	pop	{r4, r5, pc}
        uint16_t day = Time.format(Time.now(), "%j").toInt();
   b767e:	f002 fb70 	bl	b9d62 <_ZN9TimeClass3nowEv>
   b7682:	4b12      	ldr	r3, [pc, #72]	; (b76cc <_Z15updateLastWritev+0x8c>)
   b7684:	4912      	ldr	r1, [pc, #72]	; (b76d0 <_Z15updateLastWritev+0x90>)
   b7686:	9300      	str	r3, [sp, #0]
   b7688:	4602      	mov	r2, r0
   b768a:	17c3      	asrs	r3, r0, #31
   b768c:	a804      	add	r0, sp, #16
   b768e:	f002 fb09 	bl	b9ca4 <_ZN9TimeClass6formatExPKc>
   b7692:	a804      	add	r0, sp, #16
   b7694:	f000 ff07 	bl	b84a6 <_ZNK6String5toIntEv>
   b7698:	f8ad 000e 	strh.w	r0, [sp, #14]
   b769c:	a804      	add	r0, sp, #16
   b769e:	f000 fdbd 	bl	b821c <_ZN6StringD1Ev>
        if (write(fdLastWrite, &day, sizeof(day)) == -1)
   b76a2:	2202      	movs	r2, #2
   b76a4:	f10d 010e 	add.w	r1, sp, #14
   b76a8:	4620      	mov	r0, r4
   b76aa:	f004 ffb9 	bl	bc620 <write>
   b76ae:	3001      	adds	r0, #1
   b76b0:	d1da      	bne.n	b7668 <_Z15updateLastWritev+0x28>
            Serial.printlnf("Error writing to file: %d", errno);
   b76b2:	f002 fff9 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b76b6:	4605      	mov	r5, r0
   b76b8:	f000 fcd0 	bl	b805c <__errno>
   b76bc:	4905      	ldr	r1, [pc, #20]	; (b76d4 <_Z15updateLastWritev+0x94>)
   b76be:	6802      	ldr	r2, [r0, #0]
   b76c0:	e7cf      	b.n	b7662 <_Z15updateLastWritev+0x22>
   b76c2:	bf00      	nop
   b76c4:	000bdff0 	.word	0x000bdff0
   b76c8:	000be098 	.word	0x000be098
   b76cc:	000be0cf 	.word	0x000be0cf
   b76d0:	2003e694 	.word	0x2003e694
   b76d4:	000be0d2 	.word	0x000be0d2

000b76d8 <_Z12loadFileDataPKc>:

// #############################################################
// Function for fetching data in the indicated file.
// #############################################################
String loadFileData(const char *filePathName)
{
   b76d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76dc:	b09a      	sub	sp, #104	; 0x68
   b76de:	af00      	add	r7, sp, #0
   b76e0:	460d      	mov	r5, r1
   b76e2:	4604      	mov	r4, r0
    String returnString;
   b76e4:	492c      	ldr	r1, [pc, #176]	; (b7798 <_Z12loadFileDataPKc+0xc0>)
   b76e6:	4638      	mov	r0, r7
   b76e8:	f000 fde3 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>

    // Open file
    int fileDescriptor = open(filePathName, O_RDONLY);
   b76ec:	4628      	mov	r0, r5
   b76ee:	2100      	movs	r1, #0
   b76f0:	f004 ff78 	bl	bc5e4 <open>

    // Check for errors.
    if (fileDescriptor == -1)
   b76f4:	1c43      	adds	r3, r0, #1
    int fileDescriptor = open(filePathName, O_RDONLY);
   b76f6:	4605      	mov	r5, r0
    if (fileDescriptor == -1)
   b76f8:	d11c      	bne.n	b7734 <_Z12loadFileDataPKc+0x5c>
        Serial.printlnf("Error opening file: %d", errno);
   b76fa:	f002 ffd5 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b76fe:	4606      	mov	r6, r0
   b7700:	f000 fcac 	bl	b805c <__errno>
   b7704:	4925      	ldr	r1, [pc, #148]	; (b779c <_Z12loadFileDataPKc+0xc4>)
   b7706:	6802      	ldr	r2, [r0, #0]
    else
    {
        // Use fstat to determine file size
        struct stat statBuffer;
        if (fstat(fileDescriptor, &statBuffer) == -1)
            Serial.printlnf("Error getting stats: %d", errno);
   b7708:	4630      	mov	r0, r6
   b770a:	f7fe fb05 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
            else
                returnString = data;
        }
    }

    close(fileDescriptor);
   b770e:	4628      	mov	r0, r5
   b7710:	f004 ff58 	bl	bc5c4 <close>

    // If no errors, return data.
    if (errno)
   b7714:	f000 fca2 	bl	b805c <__errno>
   b7718:	6803      	ldr	r3, [r0, #0]
   b771a:	b3bb      	cbz	r3, b778c <_Z12loadFileDataPKc+0xb4>
        return "";
   b771c:	491e      	ldr	r1, [pc, #120]	; (b7798 <_Z12loadFileDataPKc+0xc0>)
   b771e:	4620      	mov	r0, r4
   b7720:	f000 fdc7 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
    String returnString;
   b7724:	4638      	mov	r0, r7
   b7726:	f000 fd79 	bl	b821c <_ZN6StringD1Ev>
    else
        return returnString;
}
   b772a:	4620      	mov	r0, r4
   b772c:	3768      	adds	r7, #104	; 0x68
   b772e:	46bd      	mov	sp, r7
   b7730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (fstat(fileDescriptor, &statBuffer) == -1)
   b7734:	f107 0110 	add.w	r1, r7, #16
   b7738:	f004 ff4c 	bl	bc5d4 <fstat>
   b773c:	3001      	adds	r0, #1
   b773e:	d107      	bne.n	b7750 <_Z12loadFileDataPKc+0x78>
            Serial.printlnf("Error getting stats: %d", errno);
   b7740:	f002 ffb2 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b7744:	4606      	mov	r6, r0
   b7746:	f000 fc89 	bl	b805c <__errno>
   b774a:	4915      	ldr	r1, [pc, #84]	; (b77a0 <_Z12loadFileDataPKc+0xc8>)
   b774c:	6802      	ldr	r2, [r0, #0]
   b774e:	e7db      	b.n	b7708 <_Z12loadFileDataPKc+0x30>
   b7750:	6a3a      	ldr	r2, [r7, #32]
            char data[statBuffer.st_size];
   b7752:	1dd3      	adds	r3, r2, #7
   b7754:	f023 0307 	bic.w	r3, r3, #7
                returnString = data;
   b7758:	46e8      	mov	r8, sp
            char data[statBuffer.st_size];
   b775a:	ebad 0d03 	sub.w	sp, sp, r3
            if (read(fileDescriptor, data, statBuffer.st_size) == -1)
   b775e:	4669      	mov	r1, sp
   b7760:	4628      	mov	r0, r5
   b7762:	f004 ff53 	bl	bc60c <read>
   b7766:	3001      	adds	r0, #1
   b7768:	d10b      	bne.n	b7782 <_Z12loadFileDataPKc+0xaa>
                Serial.printlnf("Error reading file: %d", errno);
   b776a:	f002 ff9d 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b776e:	4606      	mov	r6, r0
   b7770:	f000 fc74 	bl	b805c <__errno>
   b7774:	490b      	ldr	r1, [pc, #44]	; (b77a4 <_Z12loadFileDataPKc+0xcc>)
   b7776:	6802      	ldr	r2, [r0, #0]
   b7778:	4630      	mov	r0, r6
   b777a:	f7fe facd 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
   b777e:	46c5      	mov	sp, r8
   b7780:	e7c5      	b.n	b770e <_Z12loadFileDataPKc+0x36>
                returnString = data;
   b7782:	4669      	mov	r1, sp
   b7784:	4638      	mov	r0, r7
   b7786:	f000 fdf2 	bl	b836e <_ZN6StringaSEPKc>
   b778a:	e7f8      	b.n	b777e <_Z12loadFileDataPKc+0xa6>
        return returnString;
   b778c:	4639      	mov	r1, r7
   b778e:	4620      	mov	r0, r4
   b7790:	f000 fdc0 	bl	b8314 <_ZN6StringC1EOS_>
   b7794:	e7c6      	b.n	b7724 <_Z12loadFileDataPKc+0x4c>
   b7796:	bf00      	nop
   b7798:	000bdf9d 	.word	0x000bdf9d
   b779c:	000be0ec 	.word	0x000be0ec
   b77a0:	000be103 	.word	0x000be103
   b77a4:	000be0b8 	.word	0x000be0b8

000b77a8 <_Z11loadWhTodayv>:
{
   b77a8:	b510      	push	{r4, lr}
    return loadFileData("/wattHourToday.txt");
   b77aa:	4903      	ldr	r1, [pc, #12]	; (b77b8 <_Z11loadWhTodayv+0x10>)
{
   b77ac:	4604      	mov	r4, r0
    return loadFileData("/wattHourToday.txt");
   b77ae:	f7ff ff93 	bl	b76d8 <_Z12loadFileDataPKc>
}
   b77b2:	4620      	mov	r0, r4
   b77b4:	bd10      	pop	{r4, pc}
   b77b6:	bf00      	nop
   b77b8:	000be058 	.word	0x000be058

000b77bc <_Z15loadWhYesterdayv>:
{
   b77bc:	b510      	push	{r4, lr}
    return loadFileData("/wattHourYesterday.txt");
   b77be:	4903      	ldr	r1, [pc, #12]	; (b77cc <_Z15loadWhYesterdayv+0x10>)
{
   b77c0:	4604      	mov	r4, r0
    return loadFileData("/wattHourYesterday.txt");
   b77c2:	f7ff ff89 	bl	b76d8 <_Z12loadFileDataPKc>
}
   b77c6:	4620      	mov	r0, r4
   b77c8:	bd10      	pop	{r4, pc}
   b77ca:	bf00      	nop
   b77cc:	000be06b 	.word	0x000be06b

000b77d0 <_Z11initStorageP6StringS0_>:
{
   b77d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77d4:	b086      	sub	sp, #24
   b77d6:	4680      	mov	r8, r0
   b77d8:	460e      	mov	r6, r1
    if (initLastWrite() && initWhFiles())
   b77da:	f7ff fe99 	bl	b7510 <_Z13initLastWritev>
   b77de:	b920      	cbnz	r0, b77ea <_Z11initStorageP6StringS0_+0x1a>
        return false;
   b77e0:	2500      	movs	r5, #0
}
   b77e2:	4628      	mov	r0, r5
   b77e4:	b006      	add	sp, #24
   b77e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (initLastWrite() && initWhFiles())
   b77ea:	f7ff fec9 	bl	b7580 <_Z11initWhFilesv>
   b77ee:	4605      	mov	r5, r0
   b77f0:	2800      	cmp	r0, #0
   b77f2:	d0f5      	beq.n	b77e0 <_Z11initStorageP6StringS0_+0x10>
        uint16_t lastWriteDay = getLastWrite();
   b77f4:	f7ff fef0 	bl	b75d8 <_Z12getLastWritev>
   b77f8:	4607      	mov	r7, r0
        uint16_t dayNow = Time.format(Time.now(), "%j").toInt();
   b77fa:	f002 fab2 	bl	b9d62 <_ZN9TimeClass3nowEv>
   b77fe:	4b17      	ldr	r3, [pc, #92]	; (b785c <_Z11initStorageP6StringS0_+0x8c>)
   b7800:	4917      	ldr	r1, [pc, #92]	; (b7860 <_Z11initStorageP6StringS0_+0x90>)
   b7802:	9300      	str	r3, [sp, #0]
   b7804:	4602      	mov	r2, r0
   b7806:	17c3      	asrs	r3, r0, #31
   b7808:	a802      	add	r0, sp, #8
   b780a:	f002 fa4b 	bl	b9ca4 <_ZN9TimeClass6formatExPKc>
   b780e:	a802      	add	r0, sp, #8
   b7810:	f000 fe49 	bl	b84a6 <_ZNK6String5toIntEv>
   b7814:	4604      	mov	r4, r0
   b7816:	a802      	add	r0, sp, #8
   b7818:	f000 fd00 	bl	b821c <_ZN6StringD1Ev>
        if (lastWriteDay == dayNow)
   b781c:	b2a3      	uxth	r3, r4
   b781e:	429f      	cmp	r7, r3
   b7820:	d114      	bne.n	b784c <_Z11initStorageP6StringS0_+0x7c>
            *whToday = loadWhToday();
   b7822:	a802      	add	r0, sp, #8
   b7824:	f7ff ffc0 	bl	b77a8 <_Z11loadWhTodayv>
   b7828:	a902      	add	r1, sp, #8
   b782a:	4640      	mov	r0, r8
   b782c:	f000 fd97 	bl	b835e <_ZN6StringaSEOS_>
   b7830:	a802      	add	r0, sp, #8
   b7832:	f000 fcf3 	bl	b821c <_ZN6StringD1Ev>
            *whYesterday = loadWhYesterday();
   b7836:	a802      	add	r0, sp, #8
   b7838:	f7ff ffc0 	bl	b77bc <_Z15loadWhYesterdayv>
            *whYesterday = loadWhToday();
   b783c:	a902      	add	r1, sp, #8
   b783e:	4630      	mov	r0, r6
   b7840:	f000 fd8d 	bl	b835e <_ZN6StringaSEOS_>
   b7844:	a802      	add	r0, sp, #8
   b7846:	f000 fce9 	bl	b821c <_ZN6StringD1Ev>
   b784a:	e7ca      	b.n	b77e2 <_Z11initStorageP6StringS0_+0x12>
        else if (lastWriteDay == dayNow - 1)
   b784c:	b2a4      	uxth	r4, r4
   b784e:	3c01      	subs	r4, #1
   b7850:	42a7      	cmp	r7, r4
   b7852:	d1c6      	bne.n	b77e2 <_Z11initStorageP6StringS0_+0x12>
            *whYesterday = loadWhToday();
   b7854:	a802      	add	r0, sp, #8
   b7856:	f7ff ffa7 	bl	b77a8 <_Z11loadWhTodayv>
   b785a:	e7ef      	b.n	b783c <_Z11initStorageP6StringS0_+0x6c>
   b785c:	000be0cf 	.word	0x000be0cf
   b7860:	2003e694 	.word	0x2003e694

000b7864 <_Z14writeWattHoursPKc6String>:

// #############################################################
// Function for writing data to the indicated file.
// #############################################################
bool writeWattHours(const char *filePathName, String data)
{
   b7864:	b538      	push	{r3, r4, r5, lr}
   b7866:	460d      	mov	r5, r1
    // Open file for writing (truncate to zero length).
    int fileDescriptor = open(filePathName, O_WRONLY | O_TRUNC);
   b7868:	f240 4101 	movw	r1, #1025	; 0x401
   b786c:	f004 feba 	bl	bc5e4 <open>

    // Check for errors.
    if (fileDescriptor == -1)
   b7870:	1c43      	adds	r3, r0, #1
    int fileDescriptor = open(filePathName, O_WRONLY | O_TRUNC);
   b7872:	4604      	mov	r4, r0
    if (fileDescriptor == -1)
   b7874:	d114      	bne.n	b78a0 <_Z14writeWattHoursPKc6String+0x3c>
        Serial.printlnf("Error opening file: %d", errno);
   b7876:	f002 ff17 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b787a:	4605      	mov	r5, r0
   b787c:	f000 fbee 	bl	b805c <__errno>
   b7880:	490f      	ldr	r1, [pc, #60]	; (b78c0 <_Z14writeWattHoursPKc6String+0x5c>)
   b7882:	6802      	ldr	r2, [r0, #0]
    else
    {
        if (write(fileDescriptor, data.c_str(), data.length()) == -1)
            Serial.printlnf("Error writing to file: %d", errno);
   b7884:	4628      	mov	r0, r5
   b7886:	f7fe fa47 	bl	b5d18 <_ZN5Print8printlnfEPKcz>
    }

    close(fileDescriptor);
   b788a:	4620      	mov	r0, r4
   b788c:	f004 fe9a 	bl	bc5c4 <close>

    // Return true, if no errors
    if (errno)
   b7890:	f000 fbe4 	bl	b805c <__errno>
   b7894:	6803      	ldr	r3, [r0, #0]
   b7896:	b98b      	cbnz	r3, b78bc <_Z14writeWattHoursPKc6String+0x58>
        return false;
    else
    {
        // Update "lastWrite" file, then return.
        updateLastWrite();
   b7898:	f7ff fed2 	bl	b7640 <_Z15updateLastWritev>
        return true;
   b789c:	2001      	movs	r0, #1
    }
}
   b789e:	bd38      	pop	{r3, r4, r5, pc}
        if (write(fileDescriptor, data.c_str(), data.length()) == -1)
   b78a0:	68aa      	ldr	r2, [r5, #8]
   b78a2:	6829      	ldr	r1, [r5, #0]
   b78a4:	f004 febc 	bl	bc620 <write>
   b78a8:	3001      	adds	r0, #1
   b78aa:	d1ee      	bne.n	b788a <_Z14writeWattHoursPKc6String+0x26>
            Serial.printlnf("Error writing to file: %d", errno);
   b78ac:	f002 fefc 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b78b0:	4605      	mov	r5, r0
   b78b2:	f000 fbd3 	bl	b805c <__errno>
   b78b6:	4903      	ldr	r1, [pc, #12]	; (b78c4 <_Z14writeWattHoursPKc6String+0x60>)
   b78b8:	6802      	ldr	r2, [r0, #0]
   b78ba:	e7e3      	b.n	b7884 <_Z14writeWattHoursPKc6String+0x20>
        return false;
   b78bc:	2000      	movs	r0, #0
   b78be:	e7ee      	b.n	b789e <_Z14writeWattHoursPKc6String+0x3a>
   b78c0:	000be0ec 	.word	0x000be0ec
   b78c4:	000be0d2 	.word	0x000be0d2

000b78c8 <_Z12writeWhToday6String>:
{
   b78c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b78ca:	4601      	mov	r1, r0
    return (writeWattHours("/wattHourToday.txt", whToday));
   b78cc:	4668      	mov	r0, sp
   b78ce:	f000 fd3b 	bl	b8348 <_ZN6StringC1ERKS_>
   b78d2:	4669      	mov	r1, sp
   b78d4:	4804      	ldr	r0, [pc, #16]	; (b78e8 <_Z12writeWhToday6String+0x20>)
   b78d6:	f7ff ffc5 	bl	b7864 <_Z14writeWattHoursPKc6String>
   b78da:	4604      	mov	r4, r0
   b78dc:	4668      	mov	r0, sp
   b78de:	f000 fc9d 	bl	b821c <_ZN6StringD1Ev>
}
   b78e2:	4620      	mov	r0, r4
   b78e4:	b004      	add	sp, #16
   b78e6:	bd10      	pop	{r4, pc}
   b78e8:	000be058 	.word	0x000be058

000b78ec <_Z16writeWhYesterday6String>:
{
   b78ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b78ee:	4601      	mov	r1, r0
    return (writeWattHours("/wattHourYesterday.txt", whYesterday));
   b78f0:	4668      	mov	r0, sp
   b78f2:	f000 fd29 	bl	b8348 <_ZN6StringC1ERKS_>
   b78f6:	4669      	mov	r1, sp
   b78f8:	4804      	ldr	r0, [pc, #16]	; (b790c <_Z16writeWhYesterday6String+0x20>)
   b78fa:	f7ff ffb3 	bl	b7864 <_Z14writeWattHoursPKc6String>
   b78fe:	4604      	mov	r4, r0
   b7900:	4668      	mov	r0, sp
   b7902:	f000 fc8b 	bl	b821c <_ZN6StringD1Ev>
}
   b7906:	4620      	mov	r0, r4
   b7908:	b004      	add	sp, #16
   b790a:	bd10      	pop	{r4, pc}
   b790c:	000be06b 	.word	0x000be06b

000b7910 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7910:	b508      	push	{r3, lr}
   b7912:	4b02      	ldr	r3, [pc, #8]	; (b791c <netdb_freeaddrinfo+0xc>)
   b7914:	681b      	ldr	r3, [r3, #0]
   b7916:	689b      	ldr	r3, [r3, #8]
   b7918:	9301      	str	r3, [sp, #4]
   b791a:	bd08      	pop	{r3, pc}
   b791c:	00030268 	.word	0x00030268

000b7920 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7920:	b508      	push	{r3, lr}
   b7922:	4b02      	ldr	r3, [pc, #8]	; (b792c <netdb_getaddrinfo+0xc>)
   b7924:	681b      	ldr	r3, [r3, #0]
   b7926:	68db      	ldr	r3, [r3, #12]
   b7928:	9301      	str	r3, [sp, #4]
   b792a:	bd08      	pop	{r3, pc}
   b792c:	00030268 	.word	0x00030268

000b7930 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b7930:	b508      	push	{r3, lr}
   b7932:	4b02      	ldr	r3, [pc, #8]	; (b793c <hal_gpio_mode+0xc>)
   b7934:	681b      	ldr	r3, [r3, #0]
   b7936:	689b      	ldr	r3, [r3, #8]
   b7938:	9301      	str	r3, [sp, #4]
   b793a:	bd08      	pop	{r3, pc}
   b793c:	0003022c 	.word	0x0003022c

000b7940 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b7940:	b508      	push	{r3, lr}
   b7942:	4b02      	ldr	r3, [pc, #8]	; (b794c <hal_interrupt_attach+0xc>)
   b7944:	681b      	ldr	r3, [r3, #0]
   b7946:	699b      	ldr	r3, [r3, #24]
   b7948:	9301      	str	r3, [sp, #4]
   b794a:	bd08      	pop	{r3, pc}
   b794c:	0003022c 	.word	0x0003022c

000b7950 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b7950:	b508      	push	{r3, lr}
   b7952:	4b02      	ldr	r3, [pc, #8]	; (b795c <hal_interrupt_detach+0xc>)
   b7954:	681b      	ldr	r3, [r3, #0]
   b7956:	69db      	ldr	r3, [r3, #28]
   b7958:	9301      	str	r3, [sp, #4]
   b795a:	bd08      	pop	{r3, pc}
   b795c:	0003022c 	.word	0x0003022c

000b7960 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7960:	b508      	push	{r3, lr}
   b7962:	4b02      	ldr	r3, [pc, #8]	; (b796c <if_index_to_name+0xc>)
   b7964:	681b      	ldr	r3, [r3, #0]
   b7966:	695b      	ldr	r3, [r3, #20]
   b7968:	9301      	str	r3, [sp, #4]
   b796a:	bd08      	pop	{r3, pc}
   b796c:	0003026c 	.word	0x0003026c

000b7970 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7970:	b508      	push	{r3, lr}
   b7972:	4b02      	ldr	r3, [pc, #8]	; (b797c <HAL_RNG_GetRandomNumber+0xc>)
   b7974:	681b      	ldr	r3, [r3, #0]
   b7976:	685b      	ldr	r3, [r3, #4]
   b7978:	9301      	str	r3, [sp, #4]
   b797a:	bd08      	pop	{r3, pc}
   b797c:	00030218 	.word	0x00030218

000b7980 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7980:	b508      	push	{r3, lr}
   b7982:	4b02      	ldr	r3, [pc, #8]	; (b798c <HAL_Delay_Microseconds+0xc>)
   b7984:	681b      	ldr	r3, [r3, #0]
   b7986:	68db      	ldr	r3, [r3, #12]
   b7988:	9301      	str	r3, [sp, #4]
   b798a:	bd08      	pop	{r3, pc}
   b798c:	00030218 	.word	0x00030218

000b7990 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7990:	b508      	push	{r3, lr}
   b7992:	4b02      	ldr	r3, [pc, #8]	; (b799c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7994:	681b      	ldr	r3, [r3, #0]
   b7996:	695b      	ldr	r3, [r3, #20]
   b7998:	9301      	str	r3, [sp, #4]
   b799a:	bd08      	pop	{r3, pc}
   b799c:	00030218 	.word	0x00030218

000b79a0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b79a0:	b508      	push	{r3, lr}
   b79a2:	4b02      	ldr	r3, [pc, #8]	; (b79ac <hal_rtc_time_is_valid+0xc>)
   b79a4:	681b      	ldr	r3, [r3, #0]
   b79a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b79a8:	9301      	str	r3, [sp, #4]
   b79aa:	bd08      	pop	{r3, pc}
   b79ac:	00030218 	.word	0x00030218

000b79b0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b79b0:	b508      	push	{r3, lr}
   b79b2:	4b02      	ldr	r3, [pc, #8]	; (b79bc <hal_rtc_get_time+0xc>)
   b79b4:	681b      	ldr	r3, [r3, #0]
   b79b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b79b8:	9301      	str	r3, [sp, #4]
   b79ba:	bd08      	pop	{r3, pc}
   b79bc:	00030218 	.word	0x00030218

000b79c0 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b79c0:	b508      	push	{r3, lr}
   b79c2:	4b02      	ldr	r3, [pc, #8]	; (b79cc <HAL_Core_Runtime_Info+0xc>)
   b79c4:	681b      	ldr	r3, [r3, #0]
   b79c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b79c8:	9301      	str	r3, [sp, #4]
   b79ca:	bd08      	pop	{r3, pc}
   b79cc:	00030234 	.word	0x00030234

000b79d0 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   b79d0:	b508      	push	{r3, lr}
   b79d2:	4b02      	ldr	r3, [pc, #8]	; (b79dc <_open+0xc>)
   b79d4:	681b      	ldr	r3, [r3, #0]
   b79d6:	681b      	ldr	r3, [r3, #0]
   b79d8:	9301      	str	r3, [sp, #4]
   b79da:	bd08      	pop	{r3, pc}
   b79dc:	00030284 	.word	0x00030284

000b79e0 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   b79e0:	b508      	push	{r3, lr}
   b79e2:	4b02      	ldr	r3, [pc, #8]	; (b79ec <_write+0xc>)
   b79e4:	681b      	ldr	r3, [r3, #0]
   b79e6:	685b      	ldr	r3, [r3, #4]
   b79e8:	9301      	str	r3, [sp, #4]
   b79ea:	bd08      	pop	{r3, pc}
   b79ec:	00030284 	.word	0x00030284

000b79f0 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   b79f0:	b508      	push	{r3, lr}
   b79f2:	4b02      	ldr	r3, [pc, #8]	; (b79fc <_read+0xc>)
   b79f4:	681b      	ldr	r3, [r3, #0]
   b79f6:	689b      	ldr	r3, [r3, #8]
   b79f8:	9301      	str	r3, [sp, #4]
   b79fa:	bd08      	pop	{r3, pc}
   b79fc:	00030284 	.word	0x00030284

000b7a00 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   b7a00:	b508      	push	{r3, lr}
   b7a02:	4b02      	ldr	r3, [pc, #8]	; (b7a0c <_close+0xc>)
   b7a04:	681b      	ldr	r3, [r3, #0]
   b7a06:	68db      	ldr	r3, [r3, #12]
   b7a08:	9301      	str	r3, [sp, #4]
   b7a0a:	bd08      	pop	{r3, pc}
   b7a0c:	00030284 	.word	0x00030284

000b7a10 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   b7a10:	b508      	push	{r3, lr}
   b7a12:	4b02      	ldr	r3, [pc, #8]	; (b7a1c <_fstat+0xc>)
   b7a14:	681b      	ldr	r3, [r3, #0]
   b7a16:	695b      	ldr	r3, [r3, #20]
   b7a18:	9301      	str	r3, [sp, #4]
   b7a1a:	bd08      	pop	{r3, pc}
   b7a1c:	00030284 	.word	0x00030284

000b7a20 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7a20:	b508      	push	{r3, lr}
   b7a22:	4b02      	ldr	r3, [pc, #8]	; (b7a2c <hal_ble_stack_init+0xc>)
   b7a24:	681b      	ldr	r3, [r3, #0]
   b7a26:	689b      	ldr	r3, [r3, #8]
   b7a28:	9301      	str	r3, [sp, #4]
   b7a2a:	bd08      	pop	{r3, pc}
   b7a2c:	00030278 	.word	0x00030278

000b7a30 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b7a30:	b508      	push	{r3, lr}
   b7a32:	4b02      	ldr	r3, [pc, #8]	; (b7a3c <hal_ble_select_antenna+0xc>)
   b7a34:	681b      	ldr	r3, [r3, #0]
   b7a36:	691b      	ldr	r3, [r3, #16]
   b7a38:	9301      	str	r3, [sp, #4]
   b7a3a:	bd08      	pop	{r3, pc}
   b7a3c:	00030278 	.word	0x00030278

000b7a40 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7a40:	b508      	push	{r3, lr}
   b7a42:	4b02      	ldr	r3, [pc, #8]	; (b7a4c <hal_ble_gap_set_advertising_data+0xc>)
   b7a44:	681b      	ldr	r3, [r3, #0]
   b7a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7a48:	9301      	str	r3, [sp, #4]
   b7a4a:	bd08      	pop	{r3, pc}
   b7a4c:	00030278 	.word	0x00030278

000b7a50 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7a50:	b508      	push	{r3, lr}
   b7a52:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <hal_ble_gap_set_scan_response_data+0xc>)
   b7a54:	681b      	ldr	r3, [r3, #0]
   b7a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7a58:	9301      	str	r3, [sp, #4]
   b7a5a:	bd08      	pop	{r3, pc}
   b7a5c:	00030278 	.word	0x00030278

000b7a60 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7a60:	b508      	push	{r3, lr}
   b7a62:	4b02      	ldr	r3, [pc, #8]	; (b7a6c <hal_ble_gap_start_advertising+0xc>)
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b7a68:	9301      	str	r3, [sp, #4]
   b7a6a:	bd08      	pop	{r3, pc}
   b7a6c:	00030278 	.word	0x00030278

000b7a70 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b7a70:	b508      	push	{r3, lr}
   b7a72:	4b03      	ldr	r3, [pc, #12]	; (b7a80 <hal_ble_gap_disconnect+0x10>)
   b7a74:	681b      	ldr	r3, [r3, #0]
   b7a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7a7a:	9301      	str	r3, [sp, #4]
   b7a7c:	bd08      	pop	{r3, pc}
   b7a7e:	0000      	.short	0x0000
   b7a80:	00030278 	.word	0x00030278

000b7a84 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b7a84:	b508      	push	{r3, lr}
   b7a86:	4b03      	ldr	r3, [pc, #12]	; (b7a94 <hal_ble_gatt_server_add_service+0x10>)
   b7a88:	681b      	ldr	r3, [r3, #0]
   b7a8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b7a8e:	9301      	str	r3, [sp, #4]
   b7a90:	bd08      	pop	{r3, pc}
   b7a92:	0000      	.short	0x0000
   b7a94:	00030278 	.word	0x00030278

000b7a98 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7a98:	b508      	push	{r3, lr}
   b7a9a:	4b03      	ldr	r3, [pc, #12]	; (b7aa8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b7a9c:	681b      	ldr	r3, [r3, #0]
   b7a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b7aa2:	9301      	str	r3, [sp, #4]
   b7aa4:	bd08      	pop	{r3, pc}
   b7aa6:	0000      	.short	0x0000
   b7aa8:	00030278 	.word	0x00030278

000b7aac <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7aac:	b508      	push	{r3, lr}
   b7aae:	4b03      	ldr	r3, [pc, #12]	; (b7abc <hal_ble_gatt_client_write_with_response+0x10>)
   b7ab0:	681b      	ldr	r3, [r3, #0]
   b7ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b7ab6:	9301      	str	r3, [sp, #4]
   b7ab8:	bd08      	pop	{r3, pc}
   b7aba:	0000      	.short	0x0000
   b7abc:	00030278 	.word	0x00030278

000b7ac0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7ac0:	b508      	push	{r3, lr}
   b7ac2:	4b03      	ldr	r3, [pc, #12]	; (b7ad0 <hal_ble_gatt_client_write_without_response+0x10>)
   b7ac4:	681b      	ldr	r3, [r3, #0]
   b7ac6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b7aca:	9301      	str	r3, [sp, #4]
   b7acc:	bd08      	pop	{r3, pc}
   b7ace:	0000      	.short	0x0000
   b7ad0:	00030278 	.word	0x00030278

000b7ad4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7ad4:	b508      	push	{r3, lr}
   b7ad6:	4b03      	ldr	r3, [pc, #12]	; (b7ae4 <hal_ble_gatt_server_add_characteristic+0x10>)
   b7ad8:	681b      	ldr	r3, [r3, #0]
   b7ada:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b7ade:	9301      	str	r3, [sp, #4]
   b7ae0:	bd08      	pop	{r3, pc}
   b7ae2:	0000      	.short	0x0000
   b7ae4:	00030278 	.word	0x00030278

000b7ae8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b7ae8:	b508      	push	{r3, lr}
   b7aea:	4b03      	ldr	r3, [pc, #12]	; (b7af8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7aec:	681b      	ldr	r3, [r3, #0]
   b7aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7af2:	9301      	str	r3, [sp, #4]
   b7af4:	bd08      	pop	{r3, pc}
   b7af6:	0000      	.short	0x0000
   b7af8:	00030278 	.word	0x00030278

000b7afc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b03      	ldr	r3, [pc, #12]	; (b7b0c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b7b06:	9301      	str	r3, [sp, #4]
   b7b08:	bd08      	pop	{r3, pc}
   b7b0a:	0000      	.short	0x0000
   b7b0c:	00030278 	.word	0x00030278

000b7b10 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7b10:	b508      	push	{r3, lr}
   b7b12:	4b03      	ldr	r3, [pc, #12]	; (b7b20 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b7b14:	681b      	ldr	r3, [r3, #0]
   b7b16:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b7b1a:	9301      	str	r3, [sp, #4]
   b7b1c:	bd08      	pop	{r3, pc}
   b7b1e:	0000      	.short	0x0000
   b7b20:	00030278 	.word	0x00030278

000b7b24 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b7b24:	b508      	push	{r3, lr}
   b7b26:	4b02      	ldr	r3, [pc, #8]	; (b7b30 <os_thread_yield+0xc>)
   b7b28:	681b      	ldr	r3, [r3, #0]
   b7b2a:	68db      	ldr	r3, [r3, #12]
   b7b2c:	9301      	str	r3, [sp, #4]
   b7b2e:	bd08      	pop	{r3, pc}
   b7b30:	00030248 	.word	0x00030248

000b7b34 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b7b34:	b508      	push	{r3, lr}
   b7b36:	4b02      	ldr	r3, [pc, #8]	; (b7b40 <os_thread_scheduling+0xc>)
   b7b38:	681b      	ldr	r3, [r3, #0]
   b7b3a:	69db      	ldr	r3, [r3, #28]
   b7b3c:	9301      	str	r3, [sp, #4]
   b7b3e:	bd08      	pop	{r3, pc}
   b7b40:	00030248 	.word	0x00030248

000b7b44 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b7b44:	b508      	push	{r3, lr}
   b7b46:	4b02      	ldr	r3, [pc, #8]	; (b7b50 <os_timer_create+0xc>)
   b7b48:	681b      	ldr	r3, [r3, #0]
   b7b4a:	6a1b      	ldr	r3, [r3, #32]
   b7b4c:	9301      	str	r3, [sp, #4]
   b7b4e:	bd08      	pop	{r3, pc}
   b7b50:	00030248 	.word	0x00030248

000b7b54 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b7b54:	b508      	push	{r3, lr}
   b7b56:	4b02      	ldr	r3, [pc, #8]	; (b7b60 <os_timer_destroy+0xc>)
   b7b58:	681b      	ldr	r3, [r3, #0]
   b7b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b5c:	9301      	str	r3, [sp, #4]
   b7b5e:	bd08      	pop	{r3, pc}
   b7b60:	00030248 	.word	0x00030248

000b7b64 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b7b64:	b508      	push	{r3, lr}
   b7b66:	4b02      	ldr	r3, [pc, #8]	; (b7b70 <os_timer_get_id+0xc>)
   b7b68:	681b      	ldr	r3, [r3, #0]
   b7b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7b6c:	9301      	str	r3, [sp, #4]
   b7b6e:	bd08      	pop	{r3, pc}
   b7b70:	00030248 	.word	0x00030248

000b7b74 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b7b74:	b508      	push	{r3, lr}
   b7b76:	4b02      	ldr	r3, [pc, #8]	; (b7b80 <os_timer_change+0xc>)
   b7b78:	681b      	ldr	r3, [r3, #0]
   b7b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b7c:	9301      	str	r3, [sp, #4]
   b7b7e:	bd08      	pop	{r3, pc}
   b7b80:	00030248 	.word	0x00030248

000b7b84 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7b84:	b508      	push	{r3, lr}
   b7b86:	4b02      	ldr	r3, [pc, #8]	; (b7b90 <os_mutex_recursive_create+0xc>)
   b7b88:	681b      	ldr	r3, [r3, #0]
   b7b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7b8c:	9301      	str	r3, [sp, #4]
   b7b8e:	bd08      	pop	{r3, pc}
   b7b90:	00030248 	.word	0x00030248

000b7b94 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7b94:	b508      	push	{r3, lr}
   b7b96:	4b02      	ldr	r3, [pc, #8]	; (b7ba0 <os_mutex_recursive_lock+0xc>)
   b7b98:	681b      	ldr	r3, [r3, #0]
   b7b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7b9c:	9301      	str	r3, [sp, #4]
   b7b9e:	bd08      	pop	{r3, pc}
   b7ba0:	00030248 	.word	0x00030248

000b7ba4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7ba4:	b508      	push	{r3, lr}
   b7ba6:	4b02      	ldr	r3, [pc, #8]	; (b7bb0 <os_mutex_recursive_unlock+0xc>)
   b7ba8:	681b      	ldr	r3, [r3, #0]
   b7baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7bac:	9301      	str	r3, [sp, #4]
   b7bae:	bd08      	pop	{r3, pc}
   b7bb0:	00030248 	.word	0x00030248

000b7bb4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b7bb4:	b508      	push	{r3, lr}
   b7bb6:	4b02      	ldr	r3, [pc, #8]	; (b7bc0 <os_timer_set_id+0xc>)
   b7bb8:	681b      	ldr	r3, [r3, #0]
   b7bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7bbc:	9301      	str	r3, [sp, #4]
   b7bbe:	bd08      	pop	{r3, pc}
   b7bc0:	00030248 	.word	0x00030248

000b7bc4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7bc4:	b508      	push	{r3, lr}
   b7bc6:	4b02      	ldr	r3, [pc, #8]	; (b7bd0 <inet_inet_ntop+0xc>)
   b7bc8:	681b      	ldr	r3, [r3, #0]
   b7bca:	695b      	ldr	r3, [r3, #20]
   b7bcc:	9301      	str	r3, [sp, #4]
   b7bce:	bd08      	pop	{r3, pc}
   b7bd0:	00030264 	.word	0x00030264

000b7bd4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7bd4:	b508      	push	{r3, lr}
   b7bd6:	4b02      	ldr	r3, [pc, #8]	; (b7be0 <inet_htonl+0xc>)
   b7bd8:	681b      	ldr	r3, [r3, #0]
   b7bda:	6a1b      	ldr	r3, [r3, #32]
   b7bdc:	9301      	str	r3, [sp, #4]
   b7bde:	bd08      	pop	{r3, pc}
   b7be0:	00030264 	.word	0x00030264

000b7be4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7be4:	b508      	push	{r3, lr}
   b7be6:	4b02      	ldr	r3, [pc, #8]	; (b7bf0 <inet_htons+0xc>)
   b7be8:	681b      	ldr	r3, [r3, #0]
   b7bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7bec:	9301      	str	r3, [sp, #4]
   b7bee:	bd08      	pop	{r3, pc}
   b7bf0:	00030264 	.word	0x00030264

000b7bf4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7bf4:	b508      	push	{r3, lr}
   b7bf6:	4b02      	ldr	r3, [pc, #8]	; (b7c00 <hal_usart_write+0xc>)
   b7bf8:	681b      	ldr	r3, [r3, #0]
   b7bfa:	68db      	ldr	r3, [r3, #12]
   b7bfc:	9301      	str	r3, [sp, #4]
   b7bfe:	bd08      	pop	{r3, pc}
   b7c00:	0003023c 	.word	0x0003023c

000b7c04 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7c04:	b508      	push	{r3, lr}
   b7c06:	4b02      	ldr	r3, [pc, #8]	; (b7c10 <hal_usart_available+0xc>)
   b7c08:	681b      	ldr	r3, [r3, #0]
   b7c0a:	691b      	ldr	r3, [r3, #16]
   b7c0c:	9301      	str	r3, [sp, #4]
   b7c0e:	bd08      	pop	{r3, pc}
   b7c10:	0003023c 	.word	0x0003023c

000b7c14 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7c14:	b508      	push	{r3, lr}
   b7c16:	4b02      	ldr	r3, [pc, #8]	; (b7c20 <hal_usart_read+0xc>)
   b7c18:	681b      	ldr	r3, [r3, #0]
   b7c1a:	695b      	ldr	r3, [r3, #20]
   b7c1c:	9301      	str	r3, [sp, #4]
   b7c1e:	bd08      	pop	{r3, pc}
   b7c20:	0003023c 	.word	0x0003023c

000b7c24 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7c24:	b508      	push	{r3, lr}
   b7c26:	4b02      	ldr	r3, [pc, #8]	; (b7c30 <hal_usart_peek+0xc>)
   b7c28:	681b      	ldr	r3, [r3, #0]
   b7c2a:	699b      	ldr	r3, [r3, #24]
   b7c2c:	9301      	str	r3, [sp, #4]
   b7c2e:	bd08      	pop	{r3, pc}
   b7c30:	0003023c 	.word	0x0003023c

000b7c34 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7c34:	b508      	push	{r3, lr}
   b7c36:	4b02      	ldr	r3, [pc, #8]	; (b7c40 <hal_usart_flush+0xc>)
   b7c38:	681b      	ldr	r3, [r3, #0]
   b7c3a:	69db      	ldr	r3, [r3, #28]
   b7c3c:	9301      	str	r3, [sp, #4]
   b7c3e:	bd08      	pop	{r3, pc}
   b7c40:	0003023c 	.word	0x0003023c

000b7c44 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7c44:	b508      	push	{r3, lr}
   b7c46:	4b02      	ldr	r3, [pc, #8]	; (b7c50 <hal_usart_is_enabled+0xc>)
   b7c48:	681b      	ldr	r3, [r3, #0]
   b7c4a:	6a1b      	ldr	r3, [r3, #32]
   b7c4c:	9301      	str	r3, [sp, #4]
   b7c4e:	bd08      	pop	{r3, pc}
   b7c50:	0003023c 	.word	0x0003023c

000b7c54 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7c54:	b508      	push	{r3, lr}
   b7c56:	4b02      	ldr	r3, [pc, #8]	; (b7c60 <hal_usart_available_data_for_write+0xc>)
   b7c58:	681b      	ldr	r3, [r3, #0]
   b7c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7c5c:	9301      	str	r3, [sp, #4]
   b7c5e:	bd08      	pop	{r3, pc}
   b7c60:	0003023c 	.word	0x0003023c

000b7c64 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7c64:	b508      	push	{r3, lr}
   b7c66:	4b02      	ldr	r3, [pc, #8]	; (b7c70 <hal_usart_init_ex+0xc>)
   b7c68:	681b      	ldr	r3, [r3, #0]
   b7c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c6c:	9301      	str	r3, [sp, #4]
   b7c6e:	bd08      	pop	{r3, pc}
   b7c70:	0003023c 	.word	0x0003023c

000b7c74 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7c74:	b508      	push	{r3, lr}
   b7c76:	4b02      	ldr	r3, [pc, #8]	; (b7c80 <hal_i2c_write+0xc>)
   b7c78:	681b      	ldr	r3, [r3, #0]
   b7c7a:	6a1b      	ldr	r3, [r3, #32]
   b7c7c:	9301      	str	r3, [sp, #4]
   b7c7e:	bd08      	pop	{r3, pc}
   b7c80:	00030228 	.word	0x00030228

000b7c84 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7c84:	b508      	push	{r3, lr}
   b7c86:	4b02      	ldr	r3, [pc, #8]	; (b7c90 <hal_i2c_available+0xc>)
   b7c88:	681b      	ldr	r3, [r3, #0]
   b7c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c8c:	9301      	str	r3, [sp, #4]
   b7c8e:	bd08      	pop	{r3, pc}
   b7c90:	00030228 	.word	0x00030228

000b7c94 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7c94:	b508      	push	{r3, lr}
   b7c96:	4b02      	ldr	r3, [pc, #8]	; (b7ca0 <hal_i2c_read+0xc>)
   b7c98:	681b      	ldr	r3, [r3, #0]
   b7c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7c9c:	9301      	str	r3, [sp, #4]
   b7c9e:	bd08      	pop	{r3, pc}
   b7ca0:	00030228 	.word	0x00030228

000b7ca4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7ca4:	b508      	push	{r3, lr}
   b7ca6:	4b02      	ldr	r3, [pc, #8]	; (b7cb0 <hal_i2c_peek+0xc>)
   b7ca8:	681b      	ldr	r3, [r3, #0]
   b7caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7cac:	9301      	str	r3, [sp, #4]
   b7cae:	bd08      	pop	{r3, pc}
   b7cb0:	00030228 	.word	0x00030228

000b7cb4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7cb4:	b508      	push	{r3, lr}
   b7cb6:	4b02      	ldr	r3, [pc, #8]	; (b7cc0 <hal_i2c_flush+0xc>)
   b7cb8:	681b      	ldr	r3, [r3, #0]
   b7cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7cbc:	9301      	str	r3, [sp, #4]
   b7cbe:	bd08      	pop	{r3, pc}
   b7cc0:	00030228 	.word	0x00030228

000b7cc4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7cc4:	b508      	push	{r3, lr}
   b7cc6:	4b02      	ldr	r3, [pc, #8]	; (b7cd0 <hal_i2c_is_enabled+0xc>)
   b7cc8:	681b      	ldr	r3, [r3, #0]
   b7cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7ccc:	9301      	str	r3, [sp, #4]
   b7cce:	bd08      	pop	{r3, pc}
   b7cd0:	00030228 	.word	0x00030228

000b7cd4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7cd4:	b508      	push	{r3, lr}
   b7cd6:	4b02      	ldr	r3, [pc, #8]	; (b7ce0 <hal_i2c_init+0xc>)
   b7cd8:	681b      	ldr	r3, [r3, #0]
   b7cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7cdc:	9301      	str	r3, [sp, #4]
   b7cde:	bd08      	pop	{r3, pc}
   b7ce0:	00030228 	.word	0x00030228

000b7ce4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7ce4:	b508      	push	{r3, lr}
   b7ce6:	4b02      	ldr	r3, [pc, #8]	; (b7cf0 <sock_setsockopt+0xc>)
   b7ce8:	681b      	ldr	r3, [r3, #0]
   b7cea:	699b      	ldr	r3, [r3, #24]
   b7cec:	9301      	str	r3, [sp, #4]
   b7cee:	bd08      	pop	{r3, pc}
   b7cf0:	00030238 	.word	0x00030238

000b7cf4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7cf4:	b508      	push	{r3, lr}
   b7cf6:	4b02      	ldr	r3, [pc, #8]	; (b7d00 <sock_close+0xc>)
   b7cf8:	681b      	ldr	r3, [r3, #0]
   b7cfa:	69db      	ldr	r3, [r3, #28]
   b7cfc:	9301      	str	r3, [sp, #4]
   b7cfe:	bd08      	pop	{r3, pc}
   b7d00:	00030238 	.word	0x00030238

000b7d04 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7d04:	b508      	push	{r3, lr}
   b7d06:	4b02      	ldr	r3, [pc, #8]	; (b7d10 <sock_connect+0xc>)
   b7d08:	681b      	ldr	r3, [r3, #0]
   b7d0a:	6a1b      	ldr	r3, [r3, #32]
   b7d0c:	9301      	str	r3, [sp, #4]
   b7d0e:	bd08      	pop	{r3, pc}
   b7d10:	00030238 	.word	0x00030238

000b7d14 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7d14:	b508      	push	{r3, lr}
   b7d16:	4b02      	ldr	r3, [pc, #8]	; (b7d20 <sock_recv+0xc>)
   b7d18:	681b      	ldr	r3, [r3, #0]
   b7d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7d1c:	9301      	str	r3, [sp, #4]
   b7d1e:	bd08      	pop	{r3, pc}
   b7d20:	00030238 	.word	0x00030238

000b7d24 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7d24:	b508      	push	{r3, lr}
   b7d26:	4b02      	ldr	r3, [pc, #8]	; (b7d30 <sock_send+0xc>)
   b7d28:	681b      	ldr	r3, [r3, #0]
   b7d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d2c:	9301      	str	r3, [sp, #4]
   b7d2e:	bd08      	pop	{r3, pc}
   b7d30:	00030238 	.word	0x00030238

000b7d34 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7d34:	b508      	push	{r3, lr}
   b7d36:	4b02      	ldr	r3, [pc, #8]	; (b7d40 <sock_socket+0xc>)
   b7d38:	681b      	ldr	r3, [r3, #0]
   b7d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7d3c:	9301      	str	r3, [sp, #4]
   b7d3e:	bd08      	pop	{r3, pc}
   b7d40:	00030238 	.word	0x00030238

000b7d44 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7d44:	b508      	push	{r3, lr}
   b7d46:	4b02      	ldr	r3, [pc, #8]	; (b7d50 <hal_spi_init+0xc>)
   b7d48:	681b      	ldr	r3, [r3, #0]
   b7d4a:	69db      	ldr	r3, [r3, #28]
   b7d4c:	9301      	str	r3, [sp, #4]
   b7d4e:	bd08      	pop	{r3, pc}
   b7d50:	00030230 	.word	0x00030230

000b7d54 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7d54:	b508      	push	{r3, lr}
   b7d56:	4b02      	ldr	r3, [pc, #8]	; (b7d60 <hal_spi_is_enabled+0xc>)
   b7d58:	681b      	ldr	r3, [r3, #0]
   b7d5a:	6a1b      	ldr	r3, [r3, #32]
   b7d5c:	9301      	str	r3, [sp, #4]
   b7d5e:	bd08      	pop	{r3, pc}
   b7d60:	00030230 	.word	0x00030230

000b7d64 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7d64:	b508      	push	{r3, lr}
   b7d66:	4b02      	ldr	r3, [pc, #8]	; (b7d70 <HAL_USB_USART_Init+0xc>)
   b7d68:	681b      	ldr	r3, [r3, #0]
   b7d6a:	681b      	ldr	r3, [r3, #0]
   b7d6c:	9301      	str	r3, [sp, #4]
   b7d6e:	bd08      	pop	{r3, pc}
   b7d70:	0003024c 	.word	0x0003024c

000b7d74 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7d74:	b508      	push	{r3, lr}
   b7d76:	4b02      	ldr	r3, [pc, #8]	; (b7d80 <HAL_USB_USART_Available_Data+0xc>)
   b7d78:	681b      	ldr	r3, [r3, #0]
   b7d7a:	691b      	ldr	r3, [r3, #16]
   b7d7c:	9301      	str	r3, [sp, #4]
   b7d7e:	bd08      	pop	{r3, pc}
   b7d80:	0003024c 	.word	0x0003024c

000b7d84 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7d84:	b508      	push	{r3, lr}
   b7d86:	4b02      	ldr	r3, [pc, #8]	; (b7d90 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7d88:	681b      	ldr	r3, [r3, #0]
   b7d8a:	695b      	ldr	r3, [r3, #20]
   b7d8c:	9301      	str	r3, [sp, #4]
   b7d8e:	bd08      	pop	{r3, pc}
   b7d90:	0003024c 	.word	0x0003024c

000b7d94 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7d94:	b508      	push	{r3, lr}
   b7d96:	4b02      	ldr	r3, [pc, #8]	; (b7da0 <HAL_USB_USART_Receive_Data+0xc>)
   b7d98:	681b      	ldr	r3, [r3, #0]
   b7d9a:	699b      	ldr	r3, [r3, #24]
   b7d9c:	9301      	str	r3, [sp, #4]
   b7d9e:	bd08      	pop	{r3, pc}
   b7da0:	0003024c 	.word	0x0003024c

000b7da4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7da4:	b508      	push	{r3, lr}
   b7da6:	4b02      	ldr	r3, [pc, #8]	; (b7db0 <HAL_USB_USART_Send_Data+0xc>)
   b7da8:	681b      	ldr	r3, [r3, #0]
   b7daa:	69db      	ldr	r3, [r3, #28]
   b7dac:	9301      	str	r3, [sp, #4]
   b7dae:	bd08      	pop	{r3, pc}
   b7db0:	0003024c 	.word	0x0003024c

000b7db4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7db4:	b508      	push	{r3, lr}
   b7db6:	4b02      	ldr	r3, [pc, #8]	; (b7dc0 <HAL_USB_USART_Flush_Data+0xc>)
   b7db8:	681b      	ldr	r3, [r3, #0]
   b7dba:	6a1b      	ldr	r3, [r3, #32]
   b7dbc:	9301      	str	r3, [sp, #4]
   b7dbe:	bd08      	pop	{r3, pc}
   b7dc0:	0003024c 	.word	0x0003024c

000b7dc4 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b7dc4:	b508      	push	{r3, lr}
   b7dc6:	4b02      	ldr	r3, [pc, #8]	; (b7dd0 <wlan_connected_info+0xc>)
   b7dc8:	681b      	ldr	r3, [r3, #0]
   b7dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b7dcc:	9301      	str	r3, [sp, #4]
   b7dce:	bd08      	pop	{r3, pc}
   b7dd0:	00030274 	.word	0x00030274

000b7dd4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7dd4:	b508      	push	{r3, lr}
   b7dd6:	4b02      	ldr	r3, [pc, #8]	; (b7de0 <panic_+0xc>)
   b7dd8:	681b      	ldr	r3, [r3, #0]
   b7dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7ddc:	9301      	str	r3, [sp, #4]
   b7dde:	bd08      	pop	{r3, pc}
   b7de0:	00030260 	.word	0x00030260

000b7de4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7de4:	b508      	push	{r3, lr}
   b7de6:	4b02      	ldr	r3, [pc, #8]	; (b7df0 <log_message+0xc>)
   b7de8:	681b      	ldr	r3, [r3, #0]
   b7dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7dec:	9301      	str	r3, [sp, #4]
   b7dee:	bd08      	pop	{r3, pc}
   b7df0:	00030260 	.word	0x00030260

000b7df4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7df4:	b508      	push	{r3, lr}
   b7df6:	4b02      	ldr	r3, [pc, #8]	; (b7e00 <system_mode+0xc>)
   b7df8:	681b      	ldr	r3, [r3, #0]
   b7dfa:	681b      	ldr	r3, [r3, #0]
   b7dfc:	9301      	str	r3, [sp, #4]
   b7dfe:	bd08      	pop	{r3, pc}
   b7e00:	00030220 	.word	0x00030220

000b7e04 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7e04:	b508      	push	{r3, lr}
   b7e06:	4b02      	ldr	r3, [pc, #8]	; (b7e10 <set_system_mode+0xc>)
   b7e08:	681b      	ldr	r3, [r3, #0]
   b7e0a:	685b      	ldr	r3, [r3, #4]
   b7e0c:	9301      	str	r3, [sp, #4]
   b7e0e:	bd08      	pop	{r3, pc}
   b7e10:	00030220 	.word	0x00030220

000b7e14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7e14:	b508      	push	{r3, lr}
   b7e16:	4b02      	ldr	r3, [pc, #8]	; (b7e20 <system_delay_ms+0xc>)
   b7e18:	681b      	ldr	r3, [r3, #0]
   b7e1a:	695b      	ldr	r3, [r3, #20]
   b7e1c:	9301      	str	r3, [sp, #4]
   b7e1e:	bd08      	pop	{r3, pc}
   b7e20:	00030220 	.word	0x00030220

000b7e24 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7e24:	b508      	push	{r3, lr}
   b7e26:	4b02      	ldr	r3, [pc, #8]	; (b7e30 <system_thread_set_state+0xc>)
   b7e28:	681b      	ldr	r3, [r3, #0]
   b7e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e2c:	9301      	str	r3, [sp, #4]
   b7e2e:	bd08      	pop	{r3, pc}
   b7e30:	00030220 	.word	0x00030220

000b7e34 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7e34:	b508      	push	{r3, lr}
   b7e36:	4b02      	ldr	r3, [pc, #8]	; (b7e40 <application_thread_current+0xc>)
   b7e38:	681b      	ldr	r3, [r3, #0]
   b7e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7e3c:	9301      	str	r3, [sp, #4]
   b7e3e:	bd08      	pop	{r3, pc}
   b7e40:	00030220 	.word	0x00030220

000b7e44 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7e44:	b508      	push	{r3, lr}
   b7e46:	4b02      	ldr	r3, [pc, #8]	; (b7e50 <application_thread_invoke+0xc>)
   b7e48:	681b      	ldr	r3, [r3, #0]
   b7e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7e4c:	9301      	str	r3, [sp, #4]
   b7e4e:	bd08      	pop	{r3, pc}
   b7e50:	00030220 	.word	0x00030220

000b7e54 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7e54:	b508      	push	{r3, lr}
   b7e56:	4b02      	ldr	r3, [pc, #8]	; (b7e60 <system_thread_get_state+0xc>)
   b7e58:	681b      	ldr	r3, [r3, #0]
   b7e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7e5c:	9301      	str	r3, [sp, #4]
   b7e5e:	bd08      	pop	{r3, pc}
   b7e60:	00030220 	.word	0x00030220

000b7e64 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7e64:	b508      	push	{r3, lr}
   b7e66:	4b03      	ldr	r3, [pc, #12]	; (b7e74 <system_ctrl_set_app_request_handler+0x10>)
   b7e68:	681b      	ldr	r3, [r3, #0]
   b7e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7e6e:	9301      	str	r3, [sp, #4]
   b7e70:	bd08      	pop	{r3, pc}
   b7e72:	0000      	.short	0x0000
   b7e74:	00030220 	.word	0x00030220

000b7e78 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7e78:	b508      	push	{r3, lr}
   b7e7a:	4b03      	ldr	r3, [pc, #12]	; (b7e88 <system_ctrl_set_result+0x10>)
   b7e7c:	681b      	ldr	r3, [r3, #0]
   b7e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7e82:	9301      	str	r3, [sp, #4]
   b7e84:	bd08      	pop	{r3, pc}
   b7e86:	0000      	.short	0x0000
   b7e88:	00030220 	.word	0x00030220

000b7e8c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7e8c:	b508      	push	{r3, lr}
   b7e8e:	4b02      	ldr	r3, [pc, #8]	; (b7e98 <network_connect+0xc>)
   b7e90:	681b      	ldr	r3, [r3, #0]
   b7e92:	685b      	ldr	r3, [r3, #4]
   b7e94:	9301      	str	r3, [sp, #4]
   b7e96:	bd08      	pop	{r3, pc}
   b7e98:	00030240 	.word	0x00030240

000b7e9c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7e9c:	b508      	push	{r3, lr}
   b7e9e:	4b02      	ldr	r3, [pc, #8]	; (b7ea8 <network_connecting+0xc>)
   b7ea0:	681b      	ldr	r3, [r3, #0]
   b7ea2:	689b      	ldr	r3, [r3, #8]
   b7ea4:	9301      	str	r3, [sp, #4]
   b7ea6:	bd08      	pop	{r3, pc}
   b7ea8:	00030240 	.word	0x00030240

000b7eac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7eac:	b508      	push	{r3, lr}
   b7eae:	4b02      	ldr	r3, [pc, #8]	; (b7eb8 <network_disconnect+0xc>)
   b7eb0:	681b      	ldr	r3, [r3, #0]
   b7eb2:	68db      	ldr	r3, [r3, #12]
   b7eb4:	9301      	str	r3, [sp, #4]
   b7eb6:	bd08      	pop	{r3, pc}
   b7eb8:	00030240 	.word	0x00030240

000b7ebc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7ebc:	b508      	push	{r3, lr}
   b7ebe:	4b02      	ldr	r3, [pc, #8]	; (b7ec8 <network_ready+0xc>)
   b7ec0:	681b      	ldr	r3, [r3, #0]
   b7ec2:	691b      	ldr	r3, [r3, #16]
   b7ec4:	9301      	str	r3, [sp, #4]
   b7ec6:	bd08      	pop	{r3, pc}
   b7ec8:	00030240 	.word	0x00030240

000b7ecc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7ecc:	b508      	push	{r3, lr}
   b7ece:	4b02      	ldr	r3, [pc, #8]	; (b7ed8 <network_on+0xc>)
   b7ed0:	681b      	ldr	r3, [r3, #0]
   b7ed2:	695b      	ldr	r3, [r3, #20]
   b7ed4:	9301      	str	r3, [sp, #4]
   b7ed6:	bd08      	pop	{r3, pc}
   b7ed8:	00030240 	.word	0x00030240

000b7edc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7edc:	b508      	push	{r3, lr}
   b7ede:	4b02      	ldr	r3, [pc, #8]	; (b7ee8 <network_off+0xc>)
   b7ee0:	681b      	ldr	r3, [r3, #0]
   b7ee2:	699b      	ldr	r3, [r3, #24]
   b7ee4:	9301      	str	r3, [sp, #4]
   b7ee6:	bd08      	pop	{r3, pc}
   b7ee8:	00030240 	.word	0x00030240

000b7eec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7eec:	b508      	push	{r3, lr}
   b7eee:	4b02      	ldr	r3, [pc, #8]	; (b7ef8 <network_listen+0xc>)
   b7ef0:	681b      	ldr	r3, [r3, #0]
   b7ef2:	69db      	ldr	r3, [r3, #28]
   b7ef4:	9301      	str	r3, [sp, #4]
   b7ef6:	bd08      	pop	{r3, pc}
   b7ef8:	00030240 	.word	0x00030240

000b7efc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7efc:	b508      	push	{r3, lr}
   b7efe:	4b02      	ldr	r3, [pc, #8]	; (b7f08 <network_listening+0xc>)
   b7f00:	681b      	ldr	r3, [r3, #0]
   b7f02:	6a1b      	ldr	r3, [r3, #32]
   b7f04:	9301      	str	r3, [sp, #4]
   b7f06:	bd08      	pop	{r3, pc}
   b7f08:	00030240 	.word	0x00030240

000b7f0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7f0c:	b508      	push	{r3, lr}
   b7f0e:	4b02      	ldr	r3, [pc, #8]	; (b7f18 <network_set_listen_timeout+0xc>)
   b7f10:	681b      	ldr	r3, [r3, #0]
   b7f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7f14:	9301      	str	r3, [sp, #4]
   b7f16:	bd08      	pop	{r3, pc}
   b7f18:	00030240 	.word	0x00030240

000b7f1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7f1c:	b508      	push	{r3, lr}
   b7f1e:	4b02      	ldr	r3, [pc, #8]	; (b7f28 <network_get_listen_timeout+0xc>)
   b7f20:	681b      	ldr	r3, [r3, #0]
   b7f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7f24:	9301      	str	r3, [sp, #4]
   b7f26:	bd08      	pop	{r3, pc}
   b7f28:	00030240 	.word	0x00030240

000b7f2c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7f2c:	b508      	push	{r3, lr}
   b7f2e:	4b02      	ldr	r3, [pc, #8]	; (b7f38 <network_is_on+0xc>)
   b7f30:	681b      	ldr	r3, [r3, #0]
   b7f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7f34:	9301      	str	r3, [sp, #4]
   b7f36:	bd08      	pop	{r3, pc}
   b7f38:	00030240 	.word	0x00030240

000b7f3c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7f3c:	b508      	push	{r3, lr}
   b7f3e:	4b02      	ldr	r3, [pc, #8]	; (b7f48 <network_is_off+0xc>)
   b7f40:	681b      	ldr	r3, [r3, #0]
   b7f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7f44:	9301      	str	r3, [sp, #4]
   b7f46:	bd08      	pop	{r3, pc}
   b7f48:	00030240 	.word	0x00030240

000b7f4c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7f4c:	b508      	push	{r3, lr}
   b7f4e:	4b02      	ldr	r3, [pc, #8]	; (b7f58 <spark_process+0xc>)
   b7f50:	681b      	ldr	r3, [r3, #0]
   b7f52:	689b      	ldr	r3, [r3, #8]
   b7f54:	9301      	str	r3, [sp, #4]
   b7f56:	bd08      	pop	{r3, pc}
   b7f58:	00030244 	.word	0x00030244

000b7f5c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7f5c:	b508      	push	{r3, lr}
   b7f5e:	4b02      	ldr	r3, [pc, #8]	; (b7f68 <spark_cloud_flag_connected+0xc>)
   b7f60:	681b      	ldr	r3, [r3, #0]
   b7f62:	695b      	ldr	r3, [r3, #20]
   b7f64:	9301      	str	r3, [sp, #4]
   b7f66:	bd08      	pop	{r3, pc}
   b7f68:	00030244 	.word	0x00030244

000b7f6c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7f6c:	b508      	push	{r3, lr}
   b7f6e:	4b02      	ldr	r3, [pc, #8]	; (b7f78 <spark_send_event+0xc>)
   b7f70:	681b      	ldr	r3, [r3, #0]
   b7f72:	6a1b      	ldr	r3, [r3, #32]
   b7f74:	9301      	str	r3, [sp, #4]
   b7f76:	bd08      	pop	{r3, pc}
   b7f78:	00030244 	.word	0x00030244

000b7f7c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b7f7c:	b508      	push	{r3, lr}
   b7f7e:	4b02      	ldr	r3, [pc, #8]	; (b7f88 <spark_subscribe+0xc>)
   b7f80:	681b      	ldr	r3, [r3, #0]
   b7f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7f84:	9301      	str	r3, [sp, #4]
   b7f86:	bd08      	pop	{r3, pc}
   b7f88:	00030244 	.word	0x00030244

000b7f8c <spark_unsubscribe>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
   b7f8c:	b508      	push	{r3, lr}
   b7f8e:	4b02      	ldr	r3, [pc, #8]	; (b7f98 <spark_unsubscribe+0xc>)
   b7f90:	681b      	ldr	r3, [r3, #0]
   b7f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7f94:	9301      	str	r3, [sp, #4]
   b7f96:	bd08      	pop	{r3, pc}
   b7f98:	00030244 	.word	0x00030244

000b7f9c <spark_sync_time_pending>:
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7f9c:	b508      	push	{r3, lr}
   b7f9e:	4b02      	ldr	r3, [pc, #8]	; (b7fa8 <spark_sync_time_pending+0xc>)
   b7fa0:	681b      	ldr	r3, [r3, #0]
   b7fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7fa4:	9301      	str	r3, [sp, #4]
   b7fa6:	bd08      	pop	{r3, pc}
   b7fa8:	00030244 	.word	0x00030244

000b7fac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7fac:	b508      	push	{r3, lr}
   b7fae:	4b02      	ldr	r3, [pc, #8]	; (b7fb8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7fb0:	681b      	ldr	r3, [r3, #0]
   b7fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7fb4:	9301      	str	r3, [sp, #4]
   b7fb6:	bd08      	pop	{r3, pc}
   b7fb8:	00030244 	.word	0x00030244

000b7fbc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7fbc:	b508      	push	{r3, lr}
   b7fbe:	4b02      	ldr	r3, [pc, #8]	; (b7fc8 <malloc+0xc>)
   b7fc0:	681b      	ldr	r3, [r3, #0]
   b7fc2:	681b      	ldr	r3, [r3, #0]
   b7fc4:	9301      	str	r3, [sp, #4]
   b7fc6:	bd08      	pop	{r3, pc}
   b7fc8:	0003021c 	.word	0x0003021c

000b7fcc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7fcc:	b508      	push	{r3, lr}
   b7fce:	4b02      	ldr	r3, [pc, #8]	; (b7fd8 <free+0xc>)
   b7fd0:	681b      	ldr	r3, [r3, #0]
   b7fd2:	685b      	ldr	r3, [r3, #4]
   b7fd4:	9301      	str	r3, [sp, #4]
   b7fd6:	bd08      	pop	{r3, pc}
   b7fd8:	0003021c 	.word	0x0003021c

000b7fdc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7fdc:	b508      	push	{r3, lr}
   b7fde:	4b02      	ldr	r3, [pc, #8]	; (b7fe8 <realloc+0xc>)
   b7fe0:	681b      	ldr	r3, [r3, #0]
   b7fe2:	689b      	ldr	r3, [r3, #8]
   b7fe4:	9301      	str	r3, [sp, #4]
   b7fe6:	bd08      	pop	{r3, pc}
   b7fe8:	0003021c 	.word	0x0003021c

000b7fec <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7fec:	b508      	push	{r3, lr}
   b7fee:	4b02      	ldr	r3, [pc, #8]	; (b7ff8 <sprintf+0xc>)
   b7ff0:	681b      	ldr	r3, [r3, #0]
   b7ff2:	68db      	ldr	r3, [r3, #12]
   b7ff4:	9301      	str	r3, [sp, #4]
   b7ff6:	bd08      	pop	{r3, pc}
   b7ff8:	0003021c 	.word	0x0003021c

000b7ffc <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b7ffc:	b508      	push	{r3, lr}
   b7ffe:	4b02      	ldr	r3, [pc, #8]	; (b8008 <siprintf+0xc>)
   b8000:	681b      	ldr	r3, [r3, #0]
   b8002:	691b      	ldr	r3, [r3, #16]
   b8004:	9301      	str	r3, [sp, #4]
   b8006:	bd08      	pop	{r3, pc}
   b8008:	0003021c 	.word	0x0003021c

000b800c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b800c:	b508      	push	{r3, lr}
   b800e:	4b02      	ldr	r3, [pc, #8]	; (b8018 <sscanf+0xc>)
   b8010:	681b      	ldr	r3, [r3, #0]
   b8012:	695b      	ldr	r3, [r3, #20]
   b8014:	9301      	str	r3, [sp, #4]
   b8016:	bd08      	pop	{r3, pc}
   b8018:	0003021c 	.word	0x0003021c

000b801c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b801c:	b508      	push	{r3, lr}
   b801e:	4b02      	ldr	r3, [pc, #8]	; (b8028 <snprintf+0xc>)
   b8020:	681b      	ldr	r3, [r3, #0]
   b8022:	69db      	ldr	r3, [r3, #28]
   b8024:	9301      	str	r3, [sp, #4]
   b8026:	bd08      	pop	{r3, pc}
   b8028:	0003021c 	.word	0x0003021c

000b802c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b802c:	b508      	push	{r3, lr}
   b802e:	4b02      	ldr	r3, [pc, #8]	; (b8038 <vsnprintf+0xc>)
   b8030:	681b      	ldr	r3, [r3, #0]
   b8032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8034:	9301      	str	r3, [sp, #4]
   b8036:	bd08      	pop	{r3, pc}
   b8038:	0003021c 	.word	0x0003021c

000b803c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b803c:	b508      	push	{r3, lr}
   b803e:	4b02      	ldr	r3, [pc, #8]	; (b8048 <abort+0xc>)
   b8040:	681b      	ldr	r3, [r3, #0]
   b8042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8044:	9301      	str	r3, [sp, #4]
   b8046:	bd08      	pop	{r3, pc}
   b8048:	0003021c 	.word	0x0003021c

000b804c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b804c:	b508      	push	{r3, lr}
   b804e:	4b02      	ldr	r3, [pc, #8]	; (b8058 <_malloc_r+0xc>)
   b8050:	681b      	ldr	r3, [r3, #0]
   b8052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8054:	9301      	str	r3, [sp, #4]
   b8056:	bd08      	pop	{r3, pc}
   b8058:	0003021c 	.word	0x0003021c

000b805c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b805c:	b508      	push	{r3, lr}
   b805e:	4b02      	ldr	r3, [pc, #8]	; (b8068 <__errno+0xc>)
   b8060:	681b      	ldr	r3, [r3, #0]
   b8062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8064:	9301      	str	r3, [sp, #4]
   b8066:	bd08      	pop	{r3, pc}
   b8068:	0003021c 	.word	0x0003021c

000b806c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b806c:	b508      	push	{r3, lr}
   b806e:	4b02      	ldr	r3, [pc, #8]	; (b8078 <__assert_func+0xc>)
   b8070:	681b      	ldr	r3, [r3, #0]
   b8072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8074:	9301      	str	r3, [sp, #4]
   b8076:	bd08      	pop	{r3, pc}
   b8078:	0003021c 	.word	0x0003021c

000b807c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b807c:	b508      	push	{r3, lr}
   b807e:	4b02      	ldr	r3, [pc, #8]	; (b8088 <newlib_impure_ptr_callback+0xc>)
   b8080:	681b      	ldr	r3, [r3, #0]
   b8082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8084:	9301      	str	r3, [sp, #4]
   b8086:	bd08      	pop	{r3, pc}
   b8088:	0003021c 	.word	0x0003021c

000b808c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b808c:	b508      	push	{r3, lr}
   b808e:	4b02      	ldr	r3, [pc, #8]	; (b8098 <strftime+0xc>)
   b8090:	681b      	ldr	r3, [r3, #0]
   b8092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8094:	9301      	str	r3, [sp, #4]
   b8096:	bd08      	pop	{r3, pc}
   b8098:	0003021c 	.word	0x0003021c

000b809c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b809c:	b508      	push	{r3, lr}
   b809e:	4b02      	ldr	r3, [pc, #8]	; (b80a8 <localtime_r+0xc>)
   b80a0:	681b      	ldr	r3, [r3, #0]
   b80a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b80a4:	9301      	str	r3, [sp, #4]
   b80a6:	bd08      	pop	{r3, pc}
   b80a8:	0003021c 	.word	0x0003021c

000b80ac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b80ac:	2200      	movs	r2, #0
   b80ae:	6840      	ldr	r0, [r0, #4]
   b80b0:	4611      	mov	r1, r2
   b80b2:	f7ff bf23 	b.w	b7efc <network_listening>

000b80b6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b80b6:	2200      	movs	r2, #0
   b80b8:	6840      	ldr	r0, [r0, #4]
   b80ba:	4611      	mov	r1, r2
   b80bc:	f7ff bf2e 	b.w	b7f1c <network_get_listen_timeout>

000b80c0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b80c0:	6840      	ldr	r0, [r0, #4]
   b80c2:	2200      	movs	r2, #0
   b80c4:	f7ff bf22 	b.w	b7f0c <network_set_listen_timeout>

000b80c8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b80c8:	6840      	ldr	r0, [r0, #4]
   b80ca:	2200      	movs	r2, #0
   b80cc:	f081 0101 	eor.w	r1, r1, #1
   b80d0:	f7ff bf0c 	b.w	b7eec <network_listen>

000b80d4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b80d4:	2300      	movs	r3, #0
   b80d6:	6840      	ldr	r0, [r0, #4]
   b80d8:	461a      	mov	r2, r3
   b80da:	4619      	mov	r1, r3
   b80dc:	f7ff befe 	b.w	b7edc <network_off>

000b80e0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b80e0:	2300      	movs	r3, #0
   b80e2:	6840      	ldr	r0, [r0, #4]
   b80e4:	461a      	mov	r2, r3
   b80e6:	4619      	mov	r1, r3
   b80e8:	f7ff bef0 	b.w	b7ecc <network_on>

000b80ec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b80ec:	2200      	movs	r2, #0
   b80ee:	6840      	ldr	r0, [r0, #4]
   b80f0:	4611      	mov	r1, r2
   b80f2:	f7ff bee3 	b.w	b7ebc <network_ready>

000b80f6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b80f6:	2200      	movs	r2, #0
   b80f8:	6840      	ldr	r0, [r0, #4]
   b80fa:	4611      	mov	r1, r2
   b80fc:	f7ff bece 	b.w	b7e9c <network_connecting>

000b8100 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8100:	6840      	ldr	r0, [r0, #4]
   b8102:	2200      	movs	r2, #0
   b8104:	2102      	movs	r1, #2
   b8106:	f7ff bed1 	b.w	b7eac <network_disconnect>

000b810a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b810a:	2300      	movs	r3, #0
   b810c:	6840      	ldr	r0, [r0, #4]
   b810e:	461a      	mov	r2, r3
   b8110:	f7ff bebc 	b.w	b7e8c <network_connect>

000b8114 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8114:	4b02      	ldr	r3, [pc, #8]	; (b8120 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8116:	2203      	movs	r2, #3
   b8118:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b811a:	4a02      	ldr	r2, [pc, #8]	; (b8124 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b811c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b811e:	4770      	bx	lr
   b8120:	2003e668 	.word	0x2003e668
   b8124:	000be124 	.word	0x000be124

000b8128 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8128:	b510      	push	{r4, lr}
   b812a:	4604      	mov	r4, r0
   b812c:	4608      	mov	r0, r1
{
    _spi = spi;
   b812e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8130:	f7ff fe08 	bl	b7d44 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8134:	2300      	movs	r3, #0
   b8136:	6063      	str	r3, [r4, #4]
}
   b8138:	4620      	mov	r0, r4
   b813a:	bd10      	pop	{r4, pc}

000b813c <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b813c:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b813e:	2420      	movs	r4, #32
{
   b8140:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b8142:	4622      	mov	r2, r4
   b8144:	2100      	movs	r1, #0
   b8146:	4668      	mov	r0, sp
   b8148:	f003 fa71 	bl	bb62e <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b814c:	2100      	movs	r1, #0
   b814e:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b8150:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b8154:	f7ff fc34 	bl	b79c0 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b8158:	9801      	ldr	r0, [sp, #4]
   b815a:	b008      	add	sp, #32
   b815c:	bd10      	pop	{r4, pc}
	...

000b8160 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8160:	4b05      	ldr	r3, [pc, #20]	; (b8178 <_GLOBAL__sub_I_System+0x18>)
   b8162:	2202      	movs	r2, #2
   b8164:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8166:	4b05      	ldr	r3, [pc, #20]	; (b817c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8168:	4a05      	ldr	r2, [pc, #20]	; (b8180 <_GLOBAL__sub_I_System+0x20>)
   b816a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b816c:	2000      	movs	r0, #0
   b816e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8172:	f7ff be47 	b.w	b7e04 <set_system_mode>
   b8176:	bf00      	nop
   b8178:	2003e67c 	.word	0x2003e67c
   b817c:	2003e670 	.word	0x2003e670
   b8180:	ffff0000 	.word	0xffff0000

000b8184 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8184:	b510      	push	{r4, lr}
   b8186:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8188:	f7fc fc44 	bl	b4a14 <strlen>
   b818c:	3801      	subs	r0, #1
   b818e:	1823      	adds	r3, r4, r0
   b8190:	4620      	mov	r0, r4
	while(i<j){
   b8192:	4283      	cmp	r3, r0
   b8194:	d906      	bls.n	b81a4 <_Z11str_reversePc+0x20>
		c = *i;
   b8196:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8198:	7819      	ldrb	r1, [r3, #0]
   b819a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b819e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b81a2:	e7f6      	b.n	b8192 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b81a4:	bd10      	pop	{r4, pc}

000b81a6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b81a6:	b570      	push	{r4, r5, r6, lr}
   b81a8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b81aa:	1e91      	subs	r1, r2, #2
   b81ac:	2922      	cmp	r1, #34	; 0x22
   b81ae:	d81d      	bhi.n	b81ec <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b81b0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b81b2:	b930      	cbnz	r0, b81c2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b81b4:	4423      	add	r3, r4
            *ptr++ = '0';
   b81b6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b81b8:	429d      	cmp	r5, r3
   b81ba:	d210      	bcs.n	b81de <ultoa+0x38>
            *ptr++ = '0';
   b81bc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b81c0:	e7fa      	b.n	b81b8 <ultoa+0x12>
            result.quot = a/radix;
   b81c2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b81c6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b81ca:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b81cc:	2809      	cmp	r0, #9
                *ptr += '0';
   b81ce:	bf94      	ite	ls
   b81d0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b81d2:	3157      	addhi	r1, #87	; 0x57
   b81d4:	b2c9      	uxtb	r1, r1
   b81d6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b81da:	4630      	mov	r0, r6
	while(a){
   b81dc:	e7e9      	b.n	b81b2 <ultoa+0xc>

	*ptr = '\0';
   b81de:	2300      	movs	r3, #0
	str_reverse(buffer);
   b81e0:	4620      	mov	r0, r4
	*ptr = '\0';
   b81e2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b81e4:	f7ff ffce 	bl	b8184 <_Z11str_reversePc>
	return buffer;
   b81e8:	4620      	mov	r0, r4
}
   b81ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b81ec:	2000      	movs	r0, #0
   b81ee:	e7fc      	b.n	b81ea <ultoa+0x44>

000b81f0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b81f0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b81f2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b81f4:	460c      	mov	r4, r1
   b81f6:	4615      	mov	r5, r2
	if(a<0){
   b81f8:	da0e      	bge.n	b8218 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b81fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b81fe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8202:	bf14      	ite	ne
   b8204:	4258      	negne	r0, r3
   b8206:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8208:	2301      	movs	r3, #1
		*buffer = '-';
   b820a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b820c:	462a      	mov	r2, r5
   b820e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8210:	f7ff ffc9 	bl	b81a6 <ultoa>
	}
	return buffer;
}
   b8214:	4620      	mov	r0, r4
   b8216:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8218:	2301      	movs	r3, #1
   b821a:	e7f9      	b.n	b8210 <itoa+0x20>

000b821c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b821c:	b510      	push	{r4, lr}
   b821e:	4604      	mov	r4, r0
{
	free(buffer);
   b8220:	6800      	ldr	r0, [r0, #0]
   b8222:	f7ff fed3 	bl	b7fcc <free>
}
   b8226:	4620      	mov	r0, r4
   b8228:	bd10      	pop	{r4, pc}

000b822a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b822a:	b510      	push	{r4, lr}
   b822c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b822e:	6800      	ldr	r0, [r0, #0]
   b8230:	b108      	cbz	r0, b8236 <_ZN6String10invalidateEv+0xc>
   b8232:	f7ff fecb 	bl	b7fcc <free>
	buffer = NULL;
   b8236:	2300      	movs	r3, #0
	capacity = len = 0;
   b8238:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b823c:	6023      	str	r3, [r4, #0]
}
   b823e:	bd10      	pop	{r4, pc}

000b8240 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8240:	b538      	push	{r3, r4, r5, lr}
   b8242:	4604      	mov	r4, r0
   b8244:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8246:	6800      	ldr	r0, [r0, #0]
   b8248:	3101      	adds	r1, #1
   b824a:	f7ff fec7 	bl	b7fdc <realloc>
	if (newbuffer) {
   b824e:	b110      	cbz	r0, b8256 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8250:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8254:	2001      	movs	r0, #1
	}
	return 0;
}
   b8256:	bd38      	pop	{r3, r4, r5, pc}

000b8258 <_ZN6String7reserveEj>:
{
   b8258:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b825a:	6803      	ldr	r3, [r0, #0]
{
   b825c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b825e:	b123      	cbz	r3, b826a <_ZN6String7reserveEj+0x12>
   b8260:	6843      	ldr	r3, [r0, #4]
   b8262:	428b      	cmp	r3, r1
   b8264:	d301      	bcc.n	b826a <_ZN6String7reserveEj+0x12>
   b8266:	2001      	movs	r0, #1
}
   b8268:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b826a:	4620      	mov	r0, r4
   b826c:	f7ff ffe8 	bl	b8240 <_ZN6String12changeBufferEj>
   b8270:	2800      	cmp	r0, #0
   b8272:	d0f9      	beq.n	b8268 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8274:	68a3      	ldr	r3, [r4, #8]
   b8276:	2b00      	cmp	r3, #0
   b8278:	d1f5      	bne.n	b8266 <_ZN6String7reserveEj+0xe>
   b827a:	6822      	ldr	r2, [r4, #0]
   b827c:	7013      	strb	r3, [r2, #0]
   b827e:	e7f2      	b.n	b8266 <_ZN6String7reserveEj+0xe>

000b8280 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8280:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8282:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8284:	4611      	mov	r1, r2
   b8286:	9201      	str	r2, [sp, #4]
{
   b8288:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b828a:	f7ff ffe5 	bl	b8258 <_ZN6String7reserveEj>
   b828e:	9a01      	ldr	r2, [sp, #4]
   b8290:	b928      	cbnz	r0, b829e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8292:	4620      	mov	r0, r4
   b8294:	f7ff ffc9 	bl	b822a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8298:	4620      	mov	r0, r4
   b829a:	b003      	add	sp, #12
   b829c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b829e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b82a0:	4629      	mov	r1, r5
   b82a2:	6820      	ldr	r0, [r4, #0]
   b82a4:	f003 f99b 	bl	bb5de <memcpy>
	buffer[len] = 0;
   b82a8:	6822      	ldr	r2, [r4, #0]
   b82aa:	68a3      	ldr	r3, [r4, #8]
   b82ac:	2100      	movs	r1, #0
   b82ae:	54d1      	strb	r1, [r2, r3]
	return *this;
   b82b0:	e7f2      	b.n	b8298 <_ZN6String4copyEPKcj+0x18>

000b82b2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b82b2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b82b4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b82b6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b82ba:	4604      	mov	r4, r0
	len = 0;
   b82bc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b82be:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b82c0:	b141      	cbz	r1, b82d4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b82c2:	4608      	mov	r0, r1
   b82c4:	9101      	str	r1, [sp, #4]
   b82c6:	f7fc fba5 	bl	b4a14 <strlen>
   b82ca:	9901      	ldr	r1, [sp, #4]
   b82cc:	4602      	mov	r2, r0
   b82ce:	4620      	mov	r0, r4
   b82d0:	f7ff ffd6 	bl	b8280 <_ZN6String4copyEPKcj>
}
   b82d4:	4620      	mov	r0, r4
   b82d6:	b002      	add	sp, #8
   b82d8:	bd10      	pop	{r4, pc}

000b82da <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b82da:	b538      	push	{r3, r4, r5, lr}
   b82dc:	4605      	mov	r5, r0
	if (buffer) {
   b82de:	6800      	ldr	r0, [r0, #0]
{
   b82e0:	460c      	mov	r4, r1
	if (buffer) {
   b82e2:	b168      	cbz	r0, b8300 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b82e4:	686a      	ldr	r2, [r5, #4]
   b82e6:	688b      	ldr	r3, [r1, #8]
   b82e8:	429a      	cmp	r2, r3
   b82ea:	d307      	bcc.n	b82fc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b82ec:	6809      	ldr	r1, [r1, #0]
   b82ee:	f003 f9e4 	bl	bb6ba <strcpy>
			len = rhs.len;
   b82f2:	68a3      	ldr	r3, [r4, #8]
   b82f4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b82f6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b82f8:	60a3      	str	r3, [r4, #8]
}
   b82fa:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b82fc:	f7ff fe66 	bl	b7fcc <free>
	buffer = rhs.buffer;
   b8300:	6823      	ldr	r3, [r4, #0]
   b8302:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8304:	6863      	ldr	r3, [r4, #4]
   b8306:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8308:	68a3      	ldr	r3, [r4, #8]
   b830a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b830c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b830e:	e9c4 3300 	strd	r3, r3, [r4]
   b8312:	e7f1      	b.n	b82f8 <_ZN6String4moveERS_+0x1e>

000b8314 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b8314:	b510      	push	{r4, lr}
	buffer = NULL;
   b8316:	2300      	movs	r3, #0
	capacity = 0;
   b8318:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b831c:	4604      	mov	r4, r0
	len = 0;
   b831e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8320:	7303      	strb	r3, [r0, #12]
	move(rval);
   b8322:	f7ff ffda 	bl	b82da <_ZN6String4moveERS_>
}
   b8326:	4620      	mov	r0, r4
   b8328:	bd10      	pop	{r4, pc}

000b832a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b832a:	4288      	cmp	r0, r1
{
   b832c:	b510      	push	{r4, lr}
   b832e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8330:	d005      	beq.n	b833e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8332:	680b      	ldr	r3, [r1, #0]
   b8334:	b12b      	cbz	r3, b8342 <_ZN6StringaSERKS_+0x18>
   b8336:	688a      	ldr	r2, [r1, #8]
   b8338:	4619      	mov	r1, r3
   b833a:	f7ff ffa1 	bl	b8280 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b833e:	4620      	mov	r0, r4
   b8340:	bd10      	pop	{r4, pc}
	else invalidate();
   b8342:	f7ff ff72 	bl	b822a <_ZN6String10invalidateEv>
   b8346:	e7fa      	b.n	b833e <_ZN6StringaSERKS_+0x14>

000b8348 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8348:	b510      	push	{r4, lr}
	buffer = NULL;
   b834a:	2300      	movs	r3, #0
String::String(const String &value)
   b834c:	4604      	mov	r4, r0
	capacity = 0;
   b834e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8352:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8354:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8356:	f7ff ffe8 	bl	b832a <_ZN6StringaSERKS_>
}
   b835a:	4620      	mov	r0, r4
   b835c:	bd10      	pop	{r4, pc}

000b835e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b835e:	4288      	cmp	r0, r1
{
   b8360:	b510      	push	{r4, lr}
   b8362:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b8364:	d001      	beq.n	b836a <_ZN6StringaSEOS_+0xc>
   b8366:	f7ff ffb8 	bl	b82da <_ZN6String4moveERS_>
	return *this;
}
   b836a:	4620      	mov	r0, r4
   b836c:	bd10      	pop	{r4, pc}

000b836e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b836e:	b513      	push	{r0, r1, r4, lr}
   b8370:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8372:	b159      	cbz	r1, b838c <_ZN6StringaSEPKc+0x1e>
   b8374:	4608      	mov	r0, r1
   b8376:	9101      	str	r1, [sp, #4]
   b8378:	f7fc fb4c 	bl	b4a14 <strlen>
   b837c:	9901      	ldr	r1, [sp, #4]
   b837e:	4602      	mov	r2, r0
   b8380:	4620      	mov	r0, r4
   b8382:	f7ff ff7d 	bl	b8280 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8386:	4620      	mov	r0, r4
   b8388:	b002      	add	sp, #8
   b838a:	bd10      	pop	{r4, pc}
	else invalidate();
   b838c:	f7ff ff4d 	bl	b822a <_ZN6String10invalidateEv>
   b8390:	e7f9      	b.n	b8386 <_ZN6StringaSEPKc+0x18>

000b8392 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8392:	b510      	push	{r4, lr}
   b8394:	4604      	mov	r4, r0
   b8396:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8398:	2300      	movs	r3, #0
	capacity = 0;
   b839a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b839e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b83a0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b83a2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b83a4:	a901      	add	r1, sp, #4
   b83a6:	f7ff ff23 	bl	b81f0 <itoa>
	*this = buf;
   b83aa:	a901      	add	r1, sp, #4
   b83ac:	4620      	mov	r0, r4
   b83ae:	f7ff ffde 	bl	b836e <_ZN6StringaSEPKc>
}
   b83b2:	4620      	mov	r0, r4
   b83b4:	b00a      	add	sp, #40	; 0x28
   b83b6:	bd10      	pop	{r4, pc}

000b83b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b83b8:	b570      	push	{r4, r5, r6, lr}
   b83ba:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b83bc:	460e      	mov	r6, r1
   b83be:	b909      	cbnz	r1, b83c4 <_ZN6String6concatEPKcj+0xc>
   b83c0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b83c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b83c4:	b16a      	cbz	r2, b83e2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b83c6:	6884      	ldr	r4, [r0, #8]
   b83c8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b83ca:	4621      	mov	r1, r4
   b83cc:	f7ff ff44 	bl	b8258 <_ZN6String7reserveEj>
   b83d0:	2800      	cmp	r0, #0
   b83d2:	d0f5      	beq.n	b83c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b83d4:	6828      	ldr	r0, [r5, #0]
   b83d6:	68ab      	ldr	r3, [r5, #8]
   b83d8:	4631      	mov	r1, r6
   b83da:	4418      	add	r0, r3
   b83dc:	f003 f96d 	bl	bb6ba <strcpy>
	len = newlen;
   b83e0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b83e2:	2001      	movs	r0, #1
   b83e4:	e7ed      	b.n	b83c2 <_ZN6String6concatEPKcj+0xa>

000b83e6 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b83e6:	688a      	ldr	r2, [r1, #8]
   b83e8:	6809      	ldr	r1, [r1, #0]
   b83ea:	f7ff bfe5 	b.w	b83b8 <_ZN6String6concatEPKcj>

000b83ee <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b83ee:	b513      	push	{r0, r1, r4, lr}
   b83f0:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b83f2:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b83f4:	b151      	cbz	r1, b840c <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b83f6:	9101      	str	r1, [sp, #4]
   b83f8:	f7fc fb0c 	bl	b4a14 <strlen>
   b83fc:	9901      	ldr	r1, [sp, #4]
   b83fe:	4602      	mov	r2, r0
   b8400:	4620      	mov	r0, r4
}
   b8402:	b002      	add	sp, #8
   b8404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b8408:	f7ff bfd6 	b.w	b83b8 <_ZN6String6concatEPKcj>
}
   b840c:	b002      	add	sp, #8
   b840e:	bd10      	pop	{r4, pc}

000b8410 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8410:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8412:	6882      	ldr	r2, [r0, #8]
   b8414:	b93a      	cbnz	r2, b8426 <_ZNK6String6equalsEPKc+0x16>
   b8416:	b121      	cbz	r1, b8422 <_ZNK6String6equalsEPKc+0x12>
   b8418:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b841a:	fab0 f080 	clz	r0, r0
   b841e:	0940      	lsrs	r0, r0, #5
   b8420:	e000      	b.n	b8424 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8422:	2001      	movs	r0, #1
}
   b8424:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8426:	6800      	ldr	r0, [r0, #0]
   b8428:	b909      	cbnz	r1, b842e <_ZNK6String6equalsEPKc+0x1e>
   b842a:	7800      	ldrb	r0, [r0, #0]
   b842c:	e7f5      	b.n	b841a <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b842e:	f7fc fae7 	bl	b4a00 <strcmp>
   b8432:	e7f2      	b.n	b841a <_ZNK6String6equalsEPKc+0xa>

000b8434 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b8434:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b8436:	6883      	ldr	r3, [r0, #8]
   b8438:	4293      	cmp	r3, r2
   b843a:	d907      	bls.n	b844c <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b843c:	6804      	ldr	r4, [r0, #0]
   b843e:	6809      	ldr	r1, [r1, #0]
   b8440:	18a0      	adds	r0, r4, r2
   b8442:	f003 f993 	bl	bb76c <strstr>
	if (found == NULL) return -1;
   b8446:	b108      	cbz	r0, b844c <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b8448:	1b00      	subs	r0, r0, r4
}
   b844a:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b844c:	f04f 30ff 	mov.w	r0, #4294967295
   b8450:	e7fb      	b.n	b844a <_ZNK6String7indexOfERKS_j+0x16>

000b8452 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b8452:	2200      	movs	r2, #0
   b8454:	f7ff bfee 	b.w	b8434 <_ZNK6String7indexOfERKS_j>

000b8458 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b845a:	429a      	cmp	r2, r3
{
   b845c:	460f      	mov	r7, r1
   b845e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b8460:	490c      	ldr	r1, [pc, #48]	; (b8494 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b8462:	bf88      	it	hi
   b8464:	4613      	movhi	r3, r2
{
   b8466:	4614      	mov	r4, r2
   b8468:	4606      	mov	r6, r0
	if (left > right) {
   b846a:	bf84      	itt	hi
   b846c:	462c      	movhi	r4, r5
   b846e:	461d      	movhi	r5, r3
	String out;
   b8470:	f7ff ff1f 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b8474:	68bb      	ldr	r3, [r7, #8]
   b8476:	42a3      	cmp	r3, r4
   b8478:	d30a      	bcc.n	b8490 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b847a:	6839      	ldr	r1, [r7, #0]
   b847c:	42ab      	cmp	r3, r5
   b847e:	bf94      	ite	ls
   b8480:	ebc4 0203 	rsbls	r2, r4, r3
   b8484:	ebc4 0205 	rsbhi	r2, r4, r5
   b8488:	4421      	add	r1, r4
   b848a:	4630      	mov	r0, r6
   b848c:	f7ff fef8 	bl	b8280 <_ZN6String4copyEPKcj>
	return out;
}
   b8490:	4630      	mov	r0, r6
   b8492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8494:	000bdf9d 	.word	0x000bdf9d

000b8498 <_ZNK6String9substringEj>:
{
   b8498:	b510      	push	{r4, lr}
   b849a:	4604      	mov	r4, r0
	return substring(left, len);
   b849c:	688b      	ldr	r3, [r1, #8]
   b849e:	f7ff ffdb 	bl	b8458 <_ZNK6String9substringEjj>
}
   b84a2:	4620      	mov	r0, r4
   b84a4:	bd10      	pop	{r4, pc}

000b84a6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b84a6:	6800      	ldr	r0, [r0, #0]
   b84a8:	b108      	cbz	r0, b84ae <_ZNK6String5toIntEv+0x8>
   b84aa:	f003 b884 	b.w	bb5b6 <atol>
	return 0;
}
   b84ae:	4770      	bx	lr

000b84b0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b84b0:	b40e      	push	{r1, r2, r3}
   b84b2:	b570      	push	{r4, r5, r6, lr}
   b84b4:	b087      	sub	sp, #28
   b84b6:	ad0b      	add	r5, sp, #44	; 0x2c
   b84b8:	4604      	mov	r4, r0
   b84ba:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b84be:	9201      	str	r2, [sp, #4]
   b84c0:	462b      	mov	r3, r5
   b84c2:	2105      	movs	r1, #5
   b84c4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b84c6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b84c8:	f7ff fdb0 	bl	b802c <vsnprintf>
    va_end(marker);

    String result;
   b84cc:	490b      	ldr	r1, [pc, #44]	; (b84fc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b84ce:	4606      	mov	r6, r0
    String result;
   b84d0:	4620      	mov	r0, r4
   b84d2:	f7ff feee 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b84d6:	4631      	mov	r1, r6
   b84d8:	4620      	mov	r0, r4
   b84da:	f7ff febd 	bl	b8258 <_ZN6String7reserveEj>
    if (result.buffer) {
   b84de:	6820      	ldr	r0, [r4, #0]
   b84e0:	b130      	cbz	r0, b84f0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b84e2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b84e4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b84e6:	462b      	mov	r3, r5
   b84e8:	1c71      	adds	r1, r6, #1
   b84ea:	f7ff fd9f 	bl	b802c <vsnprintf>
        va_end(marker);
        result.len = n;
   b84ee:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b84f0:	4620      	mov	r0, r4
   b84f2:	b007      	add	sp, #28
   b84f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b84f8:	b003      	add	sp, #12
   b84fa:	4770      	bx	lr
   b84fc:	000bdf9d 	.word	0x000bdf9d

000b8500 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8500:	4770      	bx	lr

000b8502 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b8502:	4770      	bx	lr

000b8504 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b8504:	4770      	bx	lr

000b8506 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8506:	4770      	bx	lr

000b8508 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8508:	4b06      	ldr	r3, [pc, #24]	; (b8524 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b850a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b850c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b850e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8512:	d005      	beq.n	b8520 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8514:	4608      	mov	r0, r1
   b8516:	f002 ff09 	bl	bb32c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b851a:	2800      	cmp	r0, #0
   b851c:	bf08      	it	eq
   b851e:	2400      	moveq	r4, #0
      }
   b8520:	4620      	mov	r0, r4
   b8522:	bd10      	pop	{r4, pc}
   b8524:	000be2d4 	.word	0x000be2d4

000b8528 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8528:	4b06      	ldr	r3, [pc, #24]	; (b8544 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b852a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b852c:	b510      	push	{r4, lr}
   b852e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8532:	d005      	beq.n	b8540 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8534:	4608      	mov	r0, r1
   b8536:	f002 fef9 	bl	bb32c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b853a:	2800      	cmp	r0, #0
   b853c:	bf08      	it	eq
   b853e:	2400      	moveq	r4, #0
      }
   b8540:	4620      	mov	r0, r4
   b8542:	bd10      	pop	{r4, pc}
   b8544:	000be2d4 	.word	0x000be2d4

000b8548 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8548:	4b06      	ldr	r3, [pc, #24]	; (b8564 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b854a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b854c:	b510      	push	{r4, lr}
   b854e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8552:	d005      	beq.n	b8560 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8554:	4608      	mov	r0, r1
   b8556:	f002 fee9 	bl	bb32c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b855a:	2800      	cmp	r0, #0
   b855c:	bf08      	it	eq
   b855e:	2400      	moveq	r4, #0
      }
   b8560:	4620      	mov	r0, r4
   b8562:	bd10      	pop	{r4, pc}
   b8564:	000be2d4 	.word	0x000be2d4

000b8568 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8568:	b510      	push	{r4, lr}
   b856a:	2168      	movs	r1, #104	; 0x68
   b856c:	4604      	mov	r4, r0
   b856e:	f7fc fab0 	bl	b4ad2 <_ZdlPvj>
   b8572:	4620      	mov	r0, r4
   b8574:	bd10      	pop	{r4, pc}

000b8576 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8576:	b510      	push	{r4, lr}
   b8578:	2128      	movs	r1, #40	; 0x28
   b857a:	4604      	mov	r4, r0
   b857c:	f7fc faa9 	bl	b4ad2 <_ZdlPvj>
   b8580:	4620      	mov	r0, r4
   b8582:	bd10      	pop	{r4, pc}

000b8584 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8584:	b510      	push	{r4, lr}
   b8586:	2130      	movs	r1, #48	; 0x30
   b8588:	4604      	mov	r4, r0
   b858a:	f7fc faa2 	bl	b4ad2 <_ZdlPvj>
   b858e:	4620      	mov	r0, r4
   b8590:	bd10      	pop	{r4, pc}

000b8592 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b8592:	2168      	movs	r1, #104	; 0x68
   b8594:	f7fc ba9d 	b.w	b4ad2 <_ZdlPvj>

000b8598 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8598:	2128      	movs	r1, #40	; 0x28
   b859a:	f7fc ba9a 	b.w	b4ad2 <_ZdlPvj>

000b859e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b859e:	2130      	movs	r1, #48	; 0x30
   b85a0:	f7fc ba97 	b.w	b4ad2 <_ZdlPvj>

000b85a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b85a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b85a6:	2500      	movs	r5, #0
   b85a8:	1cec      	adds	r4, r5, #3
   b85aa:	428c      	cmp	r4, r1
   b85ac:	d80d      	bhi.n	b85ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b85ae:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b85b0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b85b2:	5d87      	ldrb	r7, [r0, r6]
   b85b4:	4297      	cmp	r7, r2
   b85b6:	d105      	bne.n	b85c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b85b8:	4426      	add	r6, r4
   b85ba:	42b1      	cmp	r1, r6
   b85bc:	d305      	bcc.n	b85ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b85be:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b85c0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b85c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b85c4:	3401      	adds	r4, #1
   b85c6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b85c8:	e7ee      	b.n	b85a8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b85ca:	2000      	movs	r0, #0
   b85cc:	e7f9      	b.n	b85c2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b85d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b85d0:	4a02      	ldr	r2, [pc, #8]	; (b85dc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b85d2:	4903      	ldr	r1, [pc, #12]	; (b85e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b85d4:	200a      	movs	r0, #10
   b85d6:	f7ff bbfd 	b.w	b7dd4 <panic_>
   b85da:	bf00      	nop
   b85dc:	000b7981 	.word	0x000b7981
   b85e0:	000be158 	.word	0x000be158

000b85e4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b85e4:	4603      	mov	r3, r0
   b85e6:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b85e8:	681b      	ldr	r3, [r3, #0]
   b85ea:	e9d3 2100 	ldrd	r2, r1, [r3]
   b85ee:	4710      	bx	r2

000b85f0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b85f0:	b430      	push	{r4, r5}
   b85f2:	460d      	mov	r5, r1
   b85f4:	4611      	mov	r1, r2
   b85f6:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b85f8:	6803      	ldr	r3, [r0, #0]
   b85fa:	6809      	ldr	r1, [r1, #0]
   b85fc:	6828      	ldr	r0, [r5, #0]
   b85fe:	e9d3 4300 	ldrd	r4, r3, [r3]
   b8602:	46a4      	mov	ip, r4
      }
   b8604:	bc30      	pop	{r4, r5}
   b8606:	4760      	bx	ip

000b8608 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b8608:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b860a:	b538      	push	{r3, r4, r5, lr}
   b860c:	4604      	mov	r4, r0
	switch (__op)
   b860e:	d102      	bne.n	b8616 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b8610:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b8612:	6023      	str	r3, [r4, #0]
	}
   b8614:	e003      	b.n	b861e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b8616:	2a02      	cmp	r2, #2
   b8618:	d003      	beq.n	b8622 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b861a:	2a03      	cmp	r2, #3
   b861c:	d00d      	beq.n	b863a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b861e:	2000      	movs	r0, #0
   b8620:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b8622:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8624:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8626:	f7fc fa50 	bl	b4aca <_Znwj>
   b862a:	4603      	mov	r3, r0
   b862c:	2800      	cmp	r0, #0
   b862e:	d0f0      	beq.n	b8612 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b8630:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8634:	e883 0003 	stmia.w	r3, {r0, r1}
   b8638:	e7eb      	b.n	b8612 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b863a:	6800      	ldr	r0, [r0, #0]
   b863c:	2800      	cmp	r0, #0
   b863e:	d0ee      	beq.n	b861e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b8640:	2108      	movs	r1, #8
   b8642:	f7fc fa46 	bl	b4ad2 <_ZdlPvj>
   b8646:	e7ea      	b.n	b861e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b8648 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b8648:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b864a:	b538      	push	{r3, r4, r5, lr}
   b864c:	4604      	mov	r4, r0
	switch (__op)
   b864e:	d102      	bne.n	b8656 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b8650:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b8652:	6023      	str	r3, [r4, #0]
	}
   b8654:	e003      	b.n	b865e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b8656:	2a02      	cmp	r2, #2
   b8658:	d003      	beq.n	b8662 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b865a:	2a03      	cmp	r2, #3
   b865c:	d00d      	beq.n	b867a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b865e:	2000      	movs	r0, #0
   b8660:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b8662:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8664:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8666:	f7fc fa30 	bl	b4aca <_Znwj>
   b866a:	4603      	mov	r3, r0
   b866c:	2800      	cmp	r0, #0
   b866e:	d0f0      	beq.n	b8652 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b8670:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8674:	e883 0003 	stmia.w	r3, {r0, r1}
   b8678:	e7eb      	b.n	b8652 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b867a:	6800      	ldr	r0, [r0, #0]
   b867c:	2800      	cmp	r0, #0
   b867e:	d0ee      	beq.n	b865e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b8680:	2108      	movs	r1, #8
   b8682:	f7fc fa26 	bl	b4ad2 <_ZdlPvj>
   b8686:	e7ea      	b.n	b865e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8688 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8688:	b510      	push	{r4, lr}
   b868a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b868c:	3058      	adds	r0, #88	; 0x58
   b868e:	f7fd fb51 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b8692:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b869a:	f7ff bdbf 	b.w	b821c <_ZN6StringD1Ev>

000b869e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b869e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b86a0:	6843      	ldr	r3, [r0, #4]
   b86a2:	3b01      	subs	r3, #1
    {
   b86a4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b86a6:	6043      	str	r3, [r0, #4]
   b86a8:	b963      	cbnz	r3, b86c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b86aa:	6803      	ldr	r3, [r0, #0]
   b86ac:	689b      	ldr	r3, [r3, #8]
   b86ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b86b0:	68a3      	ldr	r3, [r4, #8]
   b86b2:	3b01      	subs	r3, #1
   b86b4:	60a3      	str	r3, [r4, #8]
   b86b6:	b92b      	cbnz	r3, b86c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b86b8:	6823      	ldr	r3, [r4, #0]
   b86ba:	4620      	mov	r0, r4
   b86bc:	68db      	ldr	r3, [r3, #12]
    }
   b86be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b86c2:	4718      	bx	r3
    }
   b86c4:	bd10      	pop	{r4, pc}

000b86c6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b86c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b86ca:	b2da      	uxtb	r2, r3
   b86cc:	2a09      	cmp	r2, #9
   b86ce:	d801      	bhi.n	b86d4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b86d0:	4618      	mov	r0, r3
   b86d2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b86d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b86d8:	2b05      	cmp	r3, #5
   b86da:	d801      	bhi.n	b86e0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b86dc:	3857      	subs	r0, #87	; 0x57
   b86de:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b86e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b86e4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b86e6:	bf94      	ite	ls
   b86e8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b86ea:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b86ee:	4770      	bx	lr

000b86f0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b86f0:	b510      	push	{r4, lr}
            locked_(false) {
   b86f2:	2300      	movs	r3, #0
   b86f4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b86f6:	4b04      	ldr	r3, [pc, #16]	; (b8708 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b86f8:	4604      	mov	r4, r0
   b86fa:	6818      	ldr	r0, [r3, #0]
   b86fc:	f7ff fa4a 	bl	b7b94 <os_mutex_recursive_lock>
        locked_ = true;
   b8700:	2301      	movs	r3, #1
   b8702:	7023      	strb	r3, [r4, #0]
    }
   b8704:	4620      	mov	r0, r4
   b8706:	bd10      	pop	{r4, pc}
   b8708:	2003e688 	.word	0x2003e688

000b870c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b870c:	b510      	push	{r4, lr}
        if (locked_) {
   b870e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b8710:	4604      	mov	r4, r0
        if (locked_) {
   b8712:	b11b      	cbz	r3, b871c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8714:	4b02      	ldr	r3, [pc, #8]	; (b8720 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b8716:	6818      	ldr	r0, [r3, #0]
   b8718:	f7ff fa44 	bl	b7ba4 <os_mutex_recursive_unlock>
    }
   b871c:	4620      	mov	r0, r4
   b871e:	bd10      	pop	{r4, pc}
   b8720:	2003e688 	.word	0x2003e688

000b8724 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b8724:	b082      	sub	sp, #8
   b8726:	4603      	mov	r3, r0
    address_ = addr;
   b8728:	6808      	ldr	r0, [r1, #0]
   b872a:	6849      	ldr	r1, [r1, #4]
   b872c:	466a      	mov	r2, sp
   b872e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b8730:	466a      	mov	r2, sp
   b8732:	ca03      	ldmia	r2!, {r0, r1}
   b8734:	6018      	str	r0, [r3, #0]
}
   b8736:	4618      	mov	r0, r3
    address_ = addr.address_;
   b8738:	6059      	str	r1, [r3, #4]
}
   b873a:	b002      	add	sp, #8
   b873c:	4770      	bx	lr

000b873e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b873e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b8740:	7982      	ldrb	r2, [r0, #6]
   b8742:	798b      	ldrb	r3, [r1, #6]
   b8744:	429a      	cmp	r2, r3
   b8746:	d106      	bne.n	b8756 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8748:	2206      	movs	r2, #6
   b874a:	f002 ff38 	bl	bb5be <memcmp>
   b874e:	fab0 f080 	clz	r0, r0
   b8752:	0940      	lsrs	r0, r0, #5
}
   b8754:	bd08      	pop	{r3, pc}
    return false;
   b8756:	2000      	movs	r0, #0
   b8758:	e7fc      	b.n	b8754 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b875a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b875a:	f04f 33ff 	mov.w	r3, #4294967295
   b875e:	6003      	str	r3, [r0, #0]
   b8760:	8083      	strh	r3, [r0, #4]
}
   b8762:	2000      	movs	r0, #0
   b8764:	4770      	bx	lr

000b8766 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8766:	b508      	push	{r3, lr}
   b8768:	4602      	mov	r2, r0
        : address_{} {
   b876a:	2100      	movs	r1, #0
   b876c:	6001      	str	r1, [r0, #0]
   b876e:	6041      	str	r1, [r0, #4]
    clear();
   b8770:	f7ff fff3 	bl	b875a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8774:	7191      	strb	r1, [r2, #6]
}
   b8776:	4610      	mov	r0, r2
   b8778:	bd08      	pop	{r3, pc}
	...

000b877c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b877c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b877e:	2301      	movs	r3, #1
   b8780:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8782:	4b05      	ldr	r3, [pc, #20]	; (b8798 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8784:	4602      	mov	r2, r0
   b8786:	f103 0110 	add.w	r1, r3, #16
   b878a:	f853 4b04 	ldr.w	r4, [r3], #4
   b878e:	f842 4b04 	str.w	r4, [r2], #4
   b8792:	428b      	cmp	r3, r1
   b8794:	d1f9      	bne.n	b878a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8796:	bd10      	pop	{r4, pc}
   b8798:	000bd88a 	.word	0x000bd88a

000b879c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b879c:	b510      	push	{r4, lr}
    if (uuid128) {
   b879e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b87a0:	4604      	mov	r4, r0
    if (uuid128) {
   b87a2:	b1b1      	cbz	r1, b87d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b87a4:	2a01      	cmp	r2, #1
   b87a6:	f101 0210 	add.w	r2, r1, #16
   b87aa:	d10a      	bne.n	b87c2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b87ac:	4601      	mov	r1, r0
   b87ae:	f853 0b04 	ldr.w	r0, [r3], #4
   b87b2:	f841 0b04 	str.w	r0, [r1], #4
   b87b6:	4293      	cmp	r3, r2
   b87b8:	d1f9      	bne.n	b87ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b87ba:	2301      	movs	r3, #1
   b87bc:	6123      	str	r3, [r4, #16]
}
   b87be:	4620      	mov	r0, r4
   b87c0:	bd10      	pop	{r4, pc}
   b87c2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b87c4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b87c8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b87cc:	429a      	cmp	r2, r3
   b87ce:	d1f9      	bne.n	b87c4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b87d0:	e7f3      	b.n	b87ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b87d2:	2210      	movs	r2, #16
   b87d4:	f002 ff2b 	bl	bb62e <memset>
   b87d8:	e7f1      	b.n	b87be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b87da <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b87da:	b538      	push	{r3, r4, r5, lr}
   b87dc:	4604      	mov	r4, r0
   b87de:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b87e0:	461a      	mov	r2, r3
   b87e2:	f7ff ffdb 	bl	b879c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b87e6:	81a5      	strh	r5, [r4, #12]
}
   b87e8:	4620      	mov	r0, r4
   b87ea:	bd38      	pop	{r3, r4, r5, pc}

000b87ec <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b87ec:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b87ee:	6902      	ldr	r2, [r0, #16]
   b87f0:	b922      	cbnz	r2, b87fc <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b87f2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b87f4:	3800      	subs	r0, #0
   b87f6:	bf18      	it	ne
   b87f8:	2001      	movne	r0, #1
}
   b87fa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b87fc:	4902      	ldr	r1, [pc, #8]	; (b8808 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b87fe:	2210      	movs	r2, #16
   b8800:	f002 fedd 	bl	bb5be <memcmp>
   b8804:	e7f6      	b.n	b87f4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b8806:	bf00      	nop
   b8808:	000be2ec 	.word	0x000be2ec

000b880c <_ZNK8particle7BleUuid4typeEv>:
}
   b880c:	6900      	ldr	r0, [r0, #16]
   b880e:	4770      	bx	lr

000b8810 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b8810:	b538      	push	{r3, r4, r5, lr}
   b8812:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b8814:	2214      	movs	r2, #20
   b8816:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b8818:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b881a:	f002 ff08 	bl	bb62e <memset>
    if (type_ == BleUuidType::SHORT) {
   b881e:	6923      	ldr	r3, [r4, #16]
   b8820:	b91b      	cbnz	r3, b882a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b8822:	89a3      	ldrh	r3, [r4, #12]
   b8824:	802b      	strh	r3, [r5, #0]
}
   b8826:	4628      	mov	r0, r5
   b8828:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b882a:	2301      	movs	r3, #1
   b882c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b882e:	4621      	mov	r1, r4
   b8830:	462b      	mov	r3, r5
   b8832:	f104 0210 	add.w	r2, r4, #16
   b8836:	f851 0b04 	ldr.w	r0, [r1], #4
   b883a:	f843 0b04 	str.w	r0, [r3], #4
   b883e:	4291      	cmp	r1, r2
   b8840:	d1f9      	bne.n	b8836 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b8842:	e7f0      	b.n	b8826 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b8844 <_ZNK8particle7BleUuid7shortedEv>:
}
   b8844:	8980      	ldrh	r0, [r0, #12]
   b8846:	4770      	bx	lr

000b8848 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8848:	4770      	bx	lr

000b884a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b884a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b884c:	6902      	ldr	r2, [r0, #16]
   b884e:	690b      	ldr	r3, [r1, #16]
   b8850:	429a      	cmp	r2, r3
   b8852:	d106      	bne.n	b8862 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8854:	2210      	movs	r2, #16
   b8856:	f002 feb2 	bl	bb5be <memcmp>
   b885a:	fab0 f080 	clz	r0, r0
   b885e:	0940      	lsrs	r0, r0, #5
}
   b8860:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8862:	2000      	movs	r0, #0
   b8864:	e7fc      	b.n	b8860 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8868 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8868:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b886a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b886e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8870:	4b34      	ldr	r3, [pc, #208]	; (b8944 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b8872:	460c      	mov	r4, r1
   b8874:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8876:	4602      	mov	r2, r0
   b8878:	f103 0110 	add.w	r1, r3, #16
   b887c:	f853 0b04 	ldr.w	r0, [r3], #4
   b8880:	f842 0b04 	str.w	r0, [r2], #4
   b8884:	428b      	cmp	r3, r1
   b8886:	d1f9      	bne.n	b887c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8888:	b344      	cbz	r4, b88dc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b888a:	2124      	movs	r1, #36	; 0x24
   b888c:	4620      	mov	r0, r4
   b888e:	f002 ff61 	bl	bb754 <strnlen>
   b8892:	2804      	cmp	r0, #4
   b8894:	f04f 0500 	mov.w	r5, #0
   b8898:	d123      	bne.n	b88e2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b889a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b889e:	af01      	add	r7, sp, #4
   b88a0:	1ca5      	adds	r5, r4, #2
   b88a2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b88a4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b88a8:	f7ff ff0d 	bl	b86c6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b88ac:	f1b0 0800 	subs.w	r8, r0, #0
   b88b0:	db12      	blt.n	b88d8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b88b2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b88b6:	f7ff ff06 	bl	b86c6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b88ba:	2800      	cmp	r0, #0
   b88bc:	db0c      	blt.n	b88d8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b88be:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b88c0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b88c4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b88c6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b88ca:	d1eb      	bne.n	b88a4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b88cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b88d0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b88d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b88d6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b88d8:	2300      	movs	r3, #0
   b88da:	6133      	str	r3, [r6, #16]
}
   b88dc:	b002      	add	sp, #8
   b88de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b88e2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b88e6:	2124      	movs	r1, #36	; 0x24
   b88e8:	4620      	mov	r0, r4
   b88ea:	f002 ff33 	bl	bb754 <strnlen>
   b88ee:	42a8      	cmp	r0, r5
   b88f0:	d807      	bhi.n	b8902 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b88f2:	4642      	mov	r2, r8
   b88f4:	2100      	movs	r1, #0
   b88f6:	4630      	mov	r0, r6
}
   b88f8:	b002      	add	sp, #8
   b88fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b88fe:	f002 be96 	b.w	bb62e <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8902:	f1b8 0f00 	cmp.w	r8, #0
   b8906:	d0e9      	beq.n	b88dc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8908:	5d60      	ldrb	r0, [r4, r5]
   b890a:	f7ff fedc 	bl	b86c6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b890e:	0603      	lsls	r3, r0, #24
   b8910:	d415      	bmi.n	b893e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b8912:	0100      	lsls	r0, r0, #4
   b8914:	f108 38ff 	add.w	r8, r8, #4294967295
   b8918:	b2c7      	uxtb	r7, r0
   b891a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b891e:	2124      	movs	r1, #36	; 0x24
   b8920:	4620      	mov	r0, r4
   b8922:	f002 ff17 	bl	bb754 <strnlen>
   b8926:	3501      	adds	r5, #1
   b8928:	42a8      	cmp	r0, r5
   b892a:	d908      	bls.n	b893e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b892c:	5d60      	ldrb	r0, [r4, r5]
   b892e:	f7ff feca 	bl	b86c6 <_ZN8particle11hexToNibbleEc>
   b8932:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8934:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b8936:	bfa4      	itt	ge
   b8938:	4338      	orrge	r0, r7
   b893a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b893e:	3501      	adds	r5, #1
   b8940:	e7d1      	b.n	b88e6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b8942:	bf00      	nop
   b8944:	000bd88a 	.word	0x000bd88a

000b8948 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8948:	b513      	push	{r0, r1, r4, lr}
   b894a:	4604      	mov	r4, r0
   b894c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b894e:	f7ff ff15 	bl	b877c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b8952:	4620      	mov	r0, r4
   b8954:	9901      	ldr	r1, [sp, #4]
   b8956:	f7ff ff87 	bl	b8868 <_ZN8particle7BleUuid9constructEPKc>
}
   b895a:	4620      	mov	r0, r4
   b895c:	b002      	add	sp, #8
   b895e:	bd10      	pop	{r4, pc}

000b8960 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8960:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8962:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8966:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8968:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b896a:	8043      	strh	r3, [r0, #2]
   b896c:	220e      	movs	r2, #14
   b896e:	4629      	mov	r1, r5
   b8970:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8972:	7105      	strb	r5, [r0, #4]
   b8974:	3006      	adds	r0, #6
   b8976:	f002 fe5a 	bl	bb62e <memset>
   b897a:	f104 0014 	add.w	r0, r4, #20
   b897e:	f7ff fefd 	bl	b877c <_ZN8particle7BleUuidC1Ev>
   b8982:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8986:	f7ff fef9 	bl	b877c <_ZN8particle7BleUuidC1Ev>
   b898a:	4904      	ldr	r1, [pc, #16]	; (b899c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b898c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8990:	f7ff fc8f 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8994:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8996:	4620      	mov	r0, r4
   b8998:	bd38      	pop	{r3, r4, r5, pc}
   b899a:	bf00      	nop
   b899c:	000bdf9d 	.word	0x000bdf9d

000b89a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b89a0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b89a2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b89a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b89aa:	4293      	cmp	r3, r2
   b89ac:	4618      	mov	r0, r3
   b89ae:	d006      	beq.n	b89be <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b89b0:	6804      	ldr	r4, [r0, #0]
   b89b2:	8824      	ldrh	r4, [r4, #0]
   b89b4:	428c      	cmp	r4, r1
   b89b6:	f103 0308 	add.w	r3, r3, #8
   b89ba:	d1f6      	bne.n	b89aa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b89bc:	bd10      	pop	{r4, pc}
        return nullptr;
   b89be:	2000      	movs	r0, #0
   b89c0:	e7fc      	b.n	b89bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b89c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b89c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b89c6:	4606      	mov	r6, r0
   b89c8:	b085      	sub	sp, #20
   b89ca:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b89cc:	460d      	mov	r5, r1
   b89ce:	2900      	cmp	r1, #0
   b89d0:	d050      	beq.n	b8a74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b89d2:	2a00      	cmp	r2, #0
   b89d4:	d04e      	beq.n	b8a74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b89d6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b89d8:	7823      	ldrb	r3, [r4, #0]
   b89da:	2af4      	cmp	r2, #244	; 0xf4
   b89dc:	bf28      	it	cs
   b89de:	22f4      	movcs	r2, #244	; 0xf4
   b89e0:	b343      	cbz	r3, b8a34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b89e2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b89e4:	0798      	lsls	r0, r3, #30
   b89e6:	d509      	bpl.n	b89fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b89e8:	89a0      	ldrh	r0, [r4, #12]
   b89ea:	9203      	str	r2, [sp, #12]
   b89ec:	2300      	movs	r3, #0
   b89ee:	f7ff f853 	bl	b7a98 <hal_ble_gatt_server_set_characteristic_value>
   b89f2:	2800      	cmp	r0, #0
   b89f4:	9a03      	ldr	r2, [sp, #12]
   b89f6:	da03      	bge.n	b8a00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b89f8:	b005      	add	sp, #20
   b89fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b89fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8a00:	6834      	ldr	r4, [r6, #0]
   b8a02:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b8a04:	06d9      	lsls	r1, r3, #27
   b8a06:	d509      	bpl.n	b8a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b8a08:	2f01      	cmp	r7, #1
   b8a0a:	d007      	beq.n	b8a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8a0c:	89a0      	ldrh	r0, [r4, #12]
   b8a0e:	2300      	movs	r3, #0
   b8a10:	4629      	mov	r1, r5
}
   b8a12:	b005      	add	sp, #20
   b8a14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8a18:	f7ff b870 	b.w	b7afc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b8a1c:	069b      	lsls	r3, r3, #26
   b8a1e:	d5eb      	bpl.n	b89f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8a20:	2f02      	cmp	r7, #2
   b8a22:	d0e9      	beq.n	b89f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8a24:	89a0      	ldrh	r0, [r4, #12]
   b8a26:	2300      	movs	r3, #0
   b8a28:	4629      	mov	r1, r5
}
   b8a2a:	b005      	add	sp, #20
   b8a2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8a30:	f7ff b86e 	b.w	b7b10 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b8a34:	8860      	ldrh	r0, [r4, #2]
   b8a36:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8a3a:	4288      	cmp	r0, r1
   b8a3c:	d01c      	beq.n	b8a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b8a3e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b8a40:	074e      	lsls	r6, r1, #29
   b8a42:	d501      	bpl.n	b8a48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b8a44:	2f01      	cmp	r7, #1
   b8a46:	d104      	bne.n	b8a52 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8a48:	070b      	lsls	r3, r1, #28
   b8a4a:	d409      	bmi.n	b8a60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b8a4c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8a50:	e7d2      	b.n	b89f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8a52:	89a1      	ldrh	r1, [r4, #12]
   b8a54:	9300      	str	r3, [sp, #0]
   b8a56:	4613      	mov	r3, r2
   b8a58:	462a      	mov	r2, r5
   b8a5a:	f7ff f831 	bl	b7ac0 <hal_ble_gatt_client_write_without_response>
   b8a5e:	e7cb      	b.n	b89f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8a60:	2f02      	cmp	r7, #2
   b8a62:	d0f3      	beq.n	b8a4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8a64:	2300      	movs	r3, #0
   b8a66:	89a1      	ldrh	r1, [r4, #12]
   b8a68:	9300      	str	r3, [sp, #0]
   b8a6a:	4613      	mov	r3, r2
   b8a6c:	462a      	mov	r2, r5
   b8a6e:	f7ff f81d 	bl	b7aac <hal_ble_gatt_client_write_with_response>
   b8a72:	e7c1      	b.n	b89f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8a74:	4802      	ldr	r0, [pc, #8]	; (b8a80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b8a76:	e7bf      	b.n	b89f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b8a78:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8a7c:	e7bc      	b.n	b89f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8a7e:	bf00      	nop
   b8a80:	fffffef2 	.word	0xfffffef2

000b8a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b8a84:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b8a86:	688a      	ldr	r2, [r1, #8]
   b8a88:	6809      	ldr	r1, [r1, #0]
   b8a8a:	f7ff bf9b 	b.w	b89c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b8a90 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8a94:	2600      	movs	r6, #0
   b8a96:	6006      	str	r6, [r0, #0]
   b8a98:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8a9a:	2028      	movs	r0, #40	; 0x28
   b8a9c:	460c      	mov	r4, r1
   b8a9e:	f7fc f814 	bl	b4aca <_Znwj>
	  auto __pi = ::new (__mem)
   b8aa2:	1e05      	subs	r5, r0, #0
   b8aa4:	f105 080c 	add.w	r8, r5, #12
   b8aa8:	d00f      	beq.n	b8aca <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b8aaa:	2301      	movs	r3, #1
   b8aac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8ab0:	4b08      	ldr	r3, [pc, #32]	; (b8ad4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8ab2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8ab4:	4640      	mov	r0, r8
   b8ab6:	f7ff fe61 	bl	b877c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b8aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8abc:	622e      	str	r6, [r5, #32]
   b8abe:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8ac2:	4646      	mov	r6, r8
   b8ac4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b8ac6:	6823      	ldr	r3, [r4, #0]
   b8ac8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b8aca:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8ace:	4638      	mov	r0, r7
   b8ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8ad4:	000be2a4 	.word	0x000be2a4

000b8ad8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8ad8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8ada:	2500      	movs	r5, #0
   b8adc:	6005      	str	r5, [r0, #0]
   b8ade:	4606      	mov	r6, r0
   b8ae0:	2030      	movs	r0, #48	; 0x30
   b8ae2:	f7fb fff2 	bl	b4aca <_Znwj>
	  auto __pi = ::new (__mem)
   b8ae6:	4604      	mov	r4, r0
   b8ae8:	b188      	cbz	r0, b8b0e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b8aea:	2301      	movs	r3, #1
   b8aec:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b8af0:	4b09      	ldr	r3, [pc, #36]	; (b8b18 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b8af2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8af8:	8183      	strh	r3, [r0, #12]
   b8afa:	300e      	adds	r0, #14
   b8afc:	f7ff fe33 	bl	b8766 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b8b00:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b8b04:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b8b08:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b8b0c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b8b0e:	6074      	str	r4, [r6, #4]
   b8b10:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b8b12:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8b14:	4630      	mov	r0, r6
   b8b16:	bd70      	pop	{r4, r5, r6, pc}
   b8b18:	000be2c0 	.word	0x000be2c0

000b8b1c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b8b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b1e:	460d      	mov	r5, r1
   b8b20:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8b22:	a801      	add	r0, sp, #4
   b8b24:	f7ff fde4 	bl	b86f0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8b28:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8b2a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b8b2e:	6023      	str	r3, [r4, #0]
   b8b30:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8b34:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8b36:	a801      	add	r0, sp, #4
   b8b38:	f7ff fde8 	bl	b870c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8b3c:	4620      	mov	r0, r4
   b8b3e:	b003      	add	sp, #12
   b8b40:	bd30      	pop	{r4, r5, pc}

000b8b42 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b8b42:	b530      	push	{r4, r5, lr}
   b8b44:	4605      	mov	r5, r0
   b8b46:	b087      	sub	sp, #28
   b8b48:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8b4a:	a801      	add	r0, sp, #4
   b8b4c:	f7ff fdd0 	bl	b86f0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8b50:	682a      	ldr	r2, [r5, #0]
   b8b52:	6823      	ldr	r3, [r4, #0]
   b8b54:	8812      	ldrh	r2, [r2, #0]
   b8b56:	881b      	ldrh	r3, [r3, #0]
   b8b58:	429a      	cmp	r2, r3
   b8b5a:	d10d      	bne.n	b8b78 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8b5c:	4629      	mov	r1, r5
   b8b5e:	a802      	add	r0, sp, #8
   b8b60:	f7ff ffdc 	bl	b8b1c <_ZNK8particle13BlePeerDevice7addressEv>
   b8b64:	4621      	mov	r1, r4
   b8b66:	a804      	add	r0, sp, #16
   b8b68:	f7ff ffd8 	bl	b8b1c <_ZNK8particle13BlePeerDevice7addressEv>
   b8b6c:	a904      	add	r1, sp, #16
   b8b6e:	a802      	add	r0, sp, #8
   b8b70:	f7ff fde5 	bl	b873e <_ZNK8particle10BleAddresseqERKS0_>
   b8b74:	4604      	mov	r4, r0
   b8b76:	b900      	cbnz	r0, b8b7a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8b78:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8b7a:	a801      	add	r0, sp, #4
   b8b7c:	f7ff fdc6 	bl	b870c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8b80:	4620      	mov	r0, r4
   b8b82:	b007      	add	sp, #28
   b8b84:	bd30      	pop	{r4, r5, pc}
	...

000b8b88 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8b88:	b510      	push	{r4, lr}
   b8b8a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8b8c:	2064      	movs	r0, #100	; 0x64
   b8b8e:	f7fb ff9c 	bl	b4aca <_Znwj>
   b8b92:	b168      	cbz	r0, b8bb0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8b94:	2300      	movs	r3, #0
   b8b96:	e9c0 3300 	strd	r3, r3, [r0]
   b8b9a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8ba2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b8ba6:	6203      	str	r3, [r0, #32]
   b8ba8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b8baa:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8bac:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8bae:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8bb0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8bb2:	b920      	cbnz	r0, b8bbe <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8bb4:	4a0a      	ldr	r2, [pc, #40]	; (b8be0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8bb6:	490b      	ldr	r1, [pc, #44]	; (b8be4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8bb8:	200a      	movs	r0, #10
   b8bba:	f7ff f90b 	bl	b7dd4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8bbe:	2000      	movs	r0, #0
   b8bc0:	f7fe ff2e 	bl	b7a20 <hal_ble_stack_init>
   b8bc4:	b120      	cbz	r0, b8bd0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b8bc6:	4a06      	ldr	r2, [pc, #24]	; (b8be0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8bc8:	4907      	ldr	r1, [pc, #28]	; (b8be8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b8bca:	200a      	movs	r0, #10
   b8bcc:	f7ff f902 	bl	b7dd4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8bd0:	6821      	ldr	r1, [r4, #0]
   b8bd2:	4806      	ldr	r0, [pc, #24]	; (b8bec <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8bd4:	2200      	movs	r2, #0
   b8bd6:	f7fe ff87 	bl	b7ae8 <hal_ble_set_callback_on_periph_link_events>
}
   b8bda:	4620      	mov	r0, r4
   b8bdc:	bd10      	pop	{r4, pc}
   b8bde:	bf00      	nop
   b8be0:	000b7981 	.word	0x000b7981
   b8be4:	000be158 	.word	0x000be158
   b8be8:	000be196 	.word	0x000be196
   b8bec:	000b91bd 	.word	0x000b91bd

000b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8bf0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b8bf2:	4c0a      	ldr	r4, [pc, #40]	; (b8c1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8bf4:	7823      	ldrb	r3, [r4, #0]
   b8bf6:	f3bf 8f5b 	dmb	ish
   b8bfa:	07db      	lsls	r3, r3, #31
   b8bfc:	d40c      	bmi.n	b8c18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8bfe:	4620      	mov	r0, r4
   b8c00:	f7fb ff69 	bl	b4ad6 <__cxa_guard_acquire>
   b8c04:	b140      	cbz	r0, b8c18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8c06:	4806      	ldr	r0, [pc, #24]	; (b8c20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8c08:	f7ff ffbe 	bl	b8b88 <_ZN8particle14BleLocalDeviceC1Ev>
   b8c0c:	4620      	mov	r0, r4
   b8c0e:	f7fb ff67 	bl	b4ae0 <__cxa_guard_release>
   b8c12:	4804      	ldr	r0, [pc, #16]	; (b8c24 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8c14:	f002 fcc2 	bl	bb59c <atexit>
    return instance;
}
   b8c18:	4801      	ldr	r0, [pc, #4]	; (b8c20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8c1a:	bd10      	pop	{r4, pc}
   b8c1c:	2003e680 	.word	0x2003e680
   b8c20:	2003e68c 	.word	0x2003e68c
   b8c24:	000b8e65 	.word	0x000b8e65

000b8c28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8c28:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b8c2a:	6803      	ldr	r3, [r0, #0]
   b8c2c:	3b09      	subs	r3, #9
   b8c2e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8c30:	b08d      	sub	sp, #52	; 0x34
   b8c32:	4604      	mov	r4, r0
   b8c34:	460d      	mov	r5, r1
    switch (event->type) {
   b8c36:	d811      	bhi.n	b8c5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8c38:	f7ff ffda 	bl	b8bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8c3c:	88a1      	ldrh	r1, [r4, #4]
   b8c3e:	6800      	ldr	r0, [r0, #0]
   b8c40:	f7ff feae 	bl	b89a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8c44:	4603      	mov	r3, r0
   b8c46:	b958      	cbnz	r0, b8c60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8c48:	2220      	movs	r2, #32
   b8c4a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b8c4e:	4a0b      	ldr	r2, [pc, #44]	; (b8c7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8c50:	9200      	str	r2, [sp, #0]
   b8c52:	490b      	ldr	r1, [pc, #44]	; (b8c80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8c54:	aa04      	add	r2, sp, #16
   b8c56:	2032      	movs	r0, #50	; 0x32
   b8c58:	f7ff f8c4 	bl	b7de4 <log_message>
}
   b8c5c:	b00d      	add	sp, #52	; 0x34
   b8c5e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8c60:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b8c62:	2a00      	cmp	r2, #0
   b8c64:	d0fa      	beq.n	b8c5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8c66:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8c6a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b8c6e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8c72:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8c74:	aa04      	add	r2, sp, #16
   b8c76:	a903      	add	r1, sp, #12
   b8c78:	47a0      	blx	r4
}
   b8c7a:	e7ef      	b.n	b8c5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8c7c:	000be1d8 	.word	0x000be1d8
   b8c80:	000be16f 	.word	0x000be16f

000b8c84 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8c84:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b8c86:	2000      	movs	r0, #0
   b8c88:	f7fe feca 	bl	b7a20 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8c8c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8c90:	bd08      	pop	{r3, pc}

000b8c92 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b8c92:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b8c94:	2100      	movs	r1, #0
   b8c96:	f7fe becb 	b.w	b7a30 <hal_ble_select_antenna>

000b8c9a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b8c9a:	b919      	cbnz	r1, b8ca4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8c9c:	460a      	mov	r2, r1
   b8c9e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8ca0:	f7fe bece 	b.w	b7a40 <hal_ble_gap_set_advertising_data>
   b8ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8ca8:	2200      	movs	r2, #0
   b8caa:	e7f9      	b.n	b8ca0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8cac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8cac:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8cae:	1e14      	subs	r4, r2, #0
   b8cb0:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8cb2:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8cb4:	db02      	blt.n	b8cbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8cb6:	1862      	adds	r2, r4, r1
   b8cb8:	429a      	cmp	r2, r3
   b8cba:	dd00      	ble.n	b8cbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8cbc:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8cbe:	682a      	ldr	r2, [r5, #0]
   b8cc0:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8cc2:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8cc4:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8cc6:	1a52      	subs	r2, r2, r1
   b8cc8:	f002 fc97 	bl	bb5fa <memmove>
    size_ -= n;
   b8ccc:	686a      	ldr	r2, [r5, #4]
   b8cce:	1b12      	subs	r2, r2, r4
   b8cd0:	606a      	str	r2, [r5, #4]
}
   b8cd2:	bd38      	pop	{r3, r4, r5, pc}

000b8cd4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b8cd6:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8cd8:	4604      	mov	r4, r0
   b8cda:	460d      	mov	r5, r1
   b8cdc:	ab01      	add	r3, sp, #4
   b8cde:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8ce2:	f7ff fc5f 	bl	b85a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b8ce6:	4602      	mov	r2, r0
   b8ce8:	b138      	cbz	r0, b8cfa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b8cea:	9901      	ldr	r1, [sp, #4]
   b8cec:	4620      	mov	r0, r4
   b8cee:	f7ff ffdd 	bl	b8cac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b8cf2:	4629      	mov	r1, r5
   b8cf4:	4620      	mov	r0, r4
   b8cf6:	f7ff ffed 	bl	b8cd4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b8cfa:	b003      	add	sp, #12
   b8cfc:	bd30      	pop	{r4, r5, pc}

000b8cfe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b8cfe:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b8d00:	460c      	mov	r4, r1
   b8d02:	b929      	cbnz	r1, b8d10 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b8d04:	460a      	mov	r2, r1
   b8d06:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b8d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8d0c:	f7fe bea0 	b.w	b7a50 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b8d10:	2101      	movs	r1, #1
   b8d12:	4620      	mov	r0, r4
   b8d14:	f7ff ffde 	bl	b8cd4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8d18:	e9d4 0100 	ldrd	r0, r1, [r4]
   b8d1c:	2200      	movs	r2, #0
   b8d1e:	e7f3      	b.n	b8d08 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b8d20 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b8d20:	b538      	push	{r3, r4, r5, lr}
   b8d22:	4604      	mov	r4, r0
   b8d24:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b8d26:	f7ff ffb8 	bl	b8c9a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b8d2a:	2800      	cmp	r0, #0
   b8d2c:	db0a      	blt.n	b8d44 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b8d2e:	4629      	mov	r1, r5
   b8d30:	4620      	mov	r0, r4
   b8d32:	f7ff ffe4 	bl	b8cfe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b8d36:	2800      	cmp	r0, #0
   b8d38:	db04      	blt.n	b8d44 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b8d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b8d3e:	2000      	movs	r0, #0
   b8d40:	f7fe be8e 	b.w	b7a60 <hal_ble_gap_start_advertising>
}
   b8d44:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8d48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8d48:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8d4a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8d4c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8d4e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8d50:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8d52:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8d54:	f7fb feb9 	bl	b4aca <_Znwj>
   b8d58:	b118      	cbz	r0, b8d62 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b8d5a:	682b      	ldr	r3, [r5, #0]
   b8d5c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8d5e:	686b      	ldr	r3, [r5, #4]
   b8d60:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8d62:	4b03      	ldr	r3, [pc, #12]	; (b8d70 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8d64:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8d66:	4b03      	ldr	r3, [pc, #12]	; (b8d74 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8d68:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8d6a:	60a3      	str	r3, [r4, #8]
      }
   b8d6c:	4620      	mov	r0, r4
   b8d6e:	bd38      	pop	{r3, r4, r5, pc}
   b8d70:	000b85f1 	.word	0x000b85f1
   b8d74:	000b8649 	.word	0x000b8649

000b8d78 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8d78:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8d7a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8d7c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8d7e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8d80:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8d82:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8d84:	f7fb fea1 	bl	b4aca <_Znwj>
   b8d88:	b118      	cbz	r0, b8d92 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b8d8a:	682b      	ldr	r3, [r5, #0]
   b8d8c:	6003      	str	r3, [r0, #0]
   b8d8e:	686b      	ldr	r3, [r5, #4]
   b8d90:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8d92:	4b03      	ldr	r3, [pc, #12]	; (b8da0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b8d94:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8d96:	4b03      	ldr	r3, [pc, #12]	; (b8da4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8d98:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8d9a:	60a3      	str	r3, [r4, #8]
      }
   b8d9c:	4620      	mov	r0, r4
   b8d9e:	bd38      	pop	{r3, r4, r5, pc}
   b8da0:	000b85e5 	.word	0x000b85e5
   b8da4:	000b8609 	.word	0x000b8609

000b8da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8da8:	680b      	ldr	r3, [r1, #0]
   b8daa:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8dac:	b113      	cbz	r3, b8db4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8dae:	685a      	ldr	r2, [r3, #4]
   b8db0:	3201      	adds	r2, #1
   b8db2:	605a      	str	r2, [r3, #4]
      }
   b8db4:	4770      	bx	lr

000b8db6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8db6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8db8:	f851 3b04 	ldr.w	r3, [r1], #4
   b8dbc:	4604      	mov	r4, r0
   b8dbe:	f840 3b04 	str.w	r3, [r0], #4
   b8dc2:	f7ff fff1 	bl	b8da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8dc6:	6823      	ldr	r3, [r4, #0]
   b8dc8:	b90b      	cbnz	r3, b8dce <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8dca:	f7ff fc01 	bl	b85d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8dce:	4620      	mov	r0, r4
   b8dd0:	bd10      	pop	{r4, pc}

000b8dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8dd2:	b510      	push	{r4, lr}
   b8dd4:	f851 3b04 	ldr.w	r3, [r1], #4
   b8dd8:	4604      	mov	r4, r0
   b8dda:	f840 3b04 	str.w	r3, [r0], #4
   b8dde:	f7ff ffe3 	bl	b8da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8de2:	4620      	mov	r0, r4
   b8de4:	bd10      	pop	{r4, pc}

000b8de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8de6:	b510      	push	{r4, lr}
   b8de8:	f851 3b04 	ldr.w	r3, [r1], #4
   b8dec:	4604      	mov	r4, r0
   b8dee:	f840 3b04 	str.w	r3, [r0], #4
   b8df2:	f7ff ffd9 	bl	b8da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8df6:	4620      	mov	r0, r4
   b8df8:	bd10      	pop	{r4, pc}

000b8dfa <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8dfa:	b510      	push	{r4, lr}
   b8dfc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8dfe:	3004      	adds	r0, #4
   b8e00:	f7fd fbf8 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8e04:	4620      	mov	r0, r4
   b8e06:	bd10      	pop	{r4, pc}

000b8e08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8e08:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8e0a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8e0e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8e10:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8e14:	42ae      	cmp	r6, r5
   b8e16:	d004      	beq.n	b8e22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8e18:	1d28      	adds	r0, r5, #4
   b8e1a:	f7fd fbeb 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e1e:	3508      	adds	r5, #8
   b8e20:	e7f8      	b.n	b8e14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8e22:	6820      	ldr	r0, [r4, #0]
   b8e24:	f7ff f8d2 	bl	b7fcc <free>
}
   b8e28:	4620      	mov	r0, r4
   b8e2a:	bd70      	pop	{r4, r5, r6, pc}

000b8e2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8e2c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8e2e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8e32:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8e34:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8e38:	42ae      	cmp	r6, r5
   b8e3a:	d004      	beq.n	b8e46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8e3c:	1d28      	adds	r0, r5, #4
   b8e3e:	f7fd fbd9 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e42:	3508      	adds	r5, #8
   b8e44:	e7f8      	b.n	b8e38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8e46:	6820      	ldr	r0, [r4, #0]
   b8e48:	f7ff f8c0 	bl	b7fcc <free>
}
   b8e4c:	4620      	mov	r0, r4
   b8e4e:	bd70      	pop	{r4, r5, r6, pc}

000b8e50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8e50:	b510      	push	{r4, lr}
   b8e52:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8e54:	3024      	adds	r0, #36	; 0x24
   b8e56:	f7ff ffe9 	bl	b8e2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8e5a:	f104 0018 	add.w	r0, r4, #24
   b8e5e:	f7ff ffd3 	bl	b8e08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8e62:	bd10      	pop	{r4, pc}

000b8e64 <__tcf_0>:
    static BleLocalDevice instance;
   b8e64:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8e66:	4b17      	ldr	r3, [pc, #92]	; (b8ec4 <__tcf_0+0x60>)
   b8e68:	681c      	ldr	r4, [r3, #0]
   b8e6a:	b354      	cbz	r4, b8ec2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8e6c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8e70:	f7fc ff60 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b8e74:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8e78:	f7fc ff5c 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b8e7c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8e80:	f7fc ff58 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b8e84:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8e88:	f7fc ff54 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8e8c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8e90:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8e94:	42ae      	cmp	r6, r5
   b8e96:	d004      	beq.n	b8ea2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8e98:	1d28      	adds	r0, r5, #4
   b8e9a:	f7fd fbab 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e9e:	3508      	adds	r5, #8
   b8ea0:	e7f8      	b.n	b8e94 <__tcf_0+0x30>
    ::free(ptr);
   b8ea2:	69a0      	ldr	r0, [r4, #24]
   b8ea4:	f7ff f892 	bl	b7fcc <free>
    ~BleLocalDeviceImpl() = default;
   b8ea8:	f104 000c 	add.w	r0, r4, #12
   b8eac:	f7ff ffbe 	bl	b8e2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8eb0:	4620      	mov	r0, r4
   b8eb2:	f7ff ffa9 	bl	b8e08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8eb6:	4620      	mov	r0, r4
   b8eb8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8ebe:	f7fb be08 	b.w	b4ad2 <_ZdlPvj>
   b8ec2:	bd70      	pop	{r4, r5, r6, pc}
   b8ec4:	2003e68c 	.word	0x2003e68c

000b8ec8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8ec8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8eca:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8ecc:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8ed0:	e9c1 3300 	strd	r3, r3, [r1]
   b8ed4:	6803      	ldr	r3, [r0, #0]
   b8ed6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8ed8:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8eda:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8edc:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b8ede:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8ee0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b8ee2:	f7fd fb87 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8ee6:	b002      	add	sp, #8
   b8ee8:	bd10      	pop	{r4, pc}

000b8eea <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8eea:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8eec:	b510      	push	{r4, lr}
      if (_M_empty())
   b8eee:	b90a      	cbnz	r2, b8ef4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8ef0:	f002 fa18 	bl	bb324 <_ZSt25__throw_bad_function_callv>
    }
   b8ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8ef8:	68c3      	ldr	r3, [r0, #12]
   b8efa:	4718      	bx	r3

000b8efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8efc:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8efe:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8f00:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8f02:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8f04:	dd03      	ble.n	b8f0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8f06:	f7ff f869 	bl	b7fdc <realloc>
            if (!d) {
   b8f0a:	b918      	cbnz	r0, b8f14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8f0c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8f0e:	f7ff f85d 	bl	b7fcc <free>
        T* d = nullptr;
   b8f12:	2000      	movs	r0, #0
        data_ = d;
   b8f14:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8f16:	60a5      	str	r5, [r4, #8]
        return true;
   b8f18:	2001      	movs	r0, #1
   b8f1a:	e7f7      	b.n	b8f0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8f1c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8f1e:	6883      	ldr	r3, [r0, #8]
   b8f20:	428b      	cmp	r3, r1
   b8f22:	da02      	bge.n	b8f2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8f24:	f7ff ffea 	bl	b8efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8f28:	bd08      	pop	{r3, pc}
    return true;
   b8f2a:	2001      	movs	r0, #1
   b8f2c:	e7fc      	b.n	b8f28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8f2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f32:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8f34:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8f36:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8f38:	4419      	add	r1, r3
   b8f3a:	6883      	ldr	r3, [r0, #8]
   b8f3c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8f3e:	4604      	mov	r4, r0
   b8f40:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8f42:	dc12      	bgt.n	b8f6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8f44:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8f46:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8f48:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8f4a:	1bd2      	subs	r2, r2, r7
   b8f4c:	4631      	mov	r1, r6
   b8f4e:	1970      	adds	r0, r6, r5
   b8f50:	f002 fb53 	bl	bb5fa <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8f54:	462a      	mov	r2, r5
   b8f56:	4641      	mov	r1, r8
   b8f58:	4630      	mov	r0, r6
   b8f5a:	f002 fb40 	bl	bb5de <memcpy>
    size_ += n;
   b8f5e:	6863      	ldr	r3, [r4, #4]
   b8f60:	442b      	add	r3, r5
   b8f62:	6063      	str	r3, [r4, #4]
    return true;
   b8f64:	2001      	movs	r0, #1
}
   b8f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8f6a:	f7ff ffc7 	bl	b8efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8f6e:	2800      	cmp	r0, #0
   b8f70:	d1e8      	bne.n	b8f44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8f72:	e7f8      	b.n	b8f66 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f76:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f78:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8f7c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8f7e:	4604      	mov	r4, r0
   b8f80:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f82:	da0b      	bge.n	b8f9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8f84:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8f86:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8f88:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8f8a:	1b52      	subs	r2, r2, r5
   b8f8c:	1c48      	adds	r0, r1, #1
   b8f8e:	f002 fb34 	bl	bb5fa <memmove>
    new(p) T(std::move(value));
   b8f92:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8f94:	6863      	ldr	r3, [r4, #4]
   b8f96:	3301      	adds	r3, #1
   b8f98:	6063      	str	r3, [r4, #4]
}
   b8f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f9c:	3101      	adds	r1, #1
   b8f9e:	f7ff ffad 	bl	b8efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8fa2:	2800      	cmp	r0, #0
   b8fa4:	d1ee      	bne.n	b8f84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8fa6:	e7f8      	b.n	b8f9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8fa8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8fa8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8faa:	6841      	ldr	r1, [r0, #4]
   b8fac:	f7ff bfe2 	b.w	b8f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8fb0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8fb4:	4604      	mov	r4, r0
   b8fb6:	461d      	mov	r5, r3
   b8fb8:	460f      	mov	r7, r1
   b8fba:	ab01      	add	r3, sp, #4
   b8fbc:	4690      	mov	r8, r2
   b8fbe:	460a      	mov	r2, r1
   b8fc0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8fc4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8fc8:	f7ff faec 	bl	b85a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8fcc:	1cae      	adds	r6, r5, #2
   b8fce:	6863      	ldr	r3, [r4, #4]
   b8fd0:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8fd2:	f1b9 0f00 	cmp.w	r9, #0
   b8fd6:	d126      	bne.n	b9026 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8fd8:	b328      	cbz	r0, b9026 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8fda:	4433      	add	r3, r6
   b8fdc:	1a1b      	subs	r3, r3, r0
   b8fde:	2bff      	cmp	r3, #255	; 0xff
   b8fe0:	d809      	bhi.n	b8ff6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8fe2:	9901      	ldr	r1, [sp, #4]
   b8fe4:	4620      	mov	r0, r4
   b8fe6:	f7ff fe61 	bl	b8cac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8fea:	6861      	ldr	r1, [r4, #4]
   b8fec:	4620      	mov	r0, r4
   b8fee:	4431      	add	r1, r6
   b8ff0:	f7ff ff94 	bl	b8f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8ff4:	b918      	cbnz	r0, b8ffe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8ff6:	6860      	ldr	r0, [r4, #4]
}
   b8ff8:	b003      	add	sp, #12
   b8ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8ffe:	1c6a      	adds	r2, r5, #1
   b9000:	9901      	ldr	r1, [sp, #4]
   b9002:	b2d2      	uxtb	r2, r2
   b9004:	4620      	mov	r0, r4
   b9006:	f7ff ffb5 	bl	b8f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b900a:	9901      	ldr	r1, [sp, #4]
   b900c:	463a      	mov	r2, r7
   b900e:	3101      	adds	r1, #1
   b9010:	4620      	mov	r0, r4
   b9012:	f7ff ffaf 	bl	b8f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b9016:	9901      	ldr	r1, [sp, #4]
   b9018:	462b      	mov	r3, r5
   b901a:	4642      	mov	r2, r8
   b901c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b901e:	4620      	mov	r0, r4
   b9020:	f7ff ff85 	bl	b8f2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b9024:	e7e7      	b.n	b8ff6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b9026:	18f1      	adds	r1, r6, r3
   b9028:	29ff      	cmp	r1, #255	; 0xff
   b902a:	d8e4      	bhi.n	b8ff6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b902c:	4620      	mov	r0, r4
   b902e:	f7ff ff75 	bl	b8f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b9032:	2800      	cmp	r0, #0
   b9034:	d0df      	beq.n	b8ff6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b9036:	1c69      	adds	r1, r5, #1
   b9038:	b2c9      	uxtb	r1, r1
   b903a:	4620      	mov	r0, r4
   b903c:	f7ff ffb4 	bl	b8fa8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b9040:	4639      	mov	r1, r7
   b9042:	4620      	mov	r0, r4
   b9044:	f7ff ffb0 	bl	b8fa8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b9048:	6861      	ldr	r1, [r4, #4]
   b904a:	462b      	mov	r3, r5
   b904c:	4642      	mov	r2, r8
   b904e:	e7e6      	b.n	b901e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b9050 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9050:	b430      	push	{r4, r5}
   b9052:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b9056:	b11a      	cbz	r2, b9060 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b9058:	9502      	str	r5, [sp, #8]
}
   b905a:	bc30      	pop	{r4, r5}
   b905c:	f7ff bfa8 	b.w	b8fb0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b9060:	6840      	ldr	r0, [r0, #4]
}
   b9062:	bc30      	pop	{r4, r5}
   b9064:	4770      	bx	lr

000b9066 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b9066:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b9068:	2300      	movs	r3, #0
   b906a:	e9c0 3300 	strd	r3, r3, [r0]
   b906e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9070:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9072:	9300      	str	r3, [sp, #0]
   b9074:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9076:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b907a:	4619      	mov	r1, r3
   b907c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b9080:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9082:	f7ff ffe5 	bl	b9050 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b9086:	4620      	mov	r0, r4
   b9088:	b004      	add	sp, #16
   b908a:	bd10      	pop	{r4, pc}

000b908c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b908c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b908e:	460a      	mov	r2, r1
   b9090:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b9092:	2114      	movs	r1, #20
   b9094:	4610      	mov	r0, r2
   b9096:	9203      	str	r2, [sp, #12]
   b9098:	f002 fb5c 	bl	bb754 <strnlen>
   b909c:	2100      	movs	r1, #0
   b909e:	4603      	mov	r3, r0
   b90a0:	9100      	str	r1, [sp, #0]
   b90a2:	9a03      	ldr	r2, [sp, #12]
   b90a4:	2109      	movs	r1, #9
   b90a6:	4620      	mov	r0, r4
   b90a8:	f7ff ffd2 	bl	b9050 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b90ac:	b004      	add	sp, #16
   b90ae:	bd10      	pop	{r4, pc}

000b90b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b90b0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b90b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b90b4:	4604      	mov	r4, r0
   b90b6:	460d      	mov	r5, r1
   b90b8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b90ba:	d914      	bls.n	b90e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b90bc:	4290      	cmp	r0, r2
   b90be:	d213      	bcs.n	b90e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b90c0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b90c4:	1a75      	subs	r5, r6, r1
   b90c6:	f1a1 0708 	sub.w	r7, r1, #8
   b90ca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b90cc:	42b7      	cmp	r7, r6
   b90ce:	d018      	beq.n	b9102 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b90d0:	b11c      	cbz	r4, b90da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b90d2:	4631      	mov	r1, r6
   b90d4:	4620      	mov	r0, r4
   b90d6:	f7ff fe86 	bl	b8de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b90da:	1d30      	adds	r0, r6, #4
   b90dc:	f7fd fa8a 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b90e0:	3e08      	subs	r6, #8
   b90e2:	3c08      	subs	r4, #8
   b90e4:	e7f2      	b.n	b90cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b90e6:	d00c      	beq.n	b9102 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b90e8:	42b5      	cmp	r5, r6
   b90ea:	d00a      	beq.n	b9102 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b90ec:	b11c      	cbz	r4, b90f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b90ee:	4629      	mov	r1, r5
   b90f0:	4620      	mov	r0, r4
   b90f2:	f7ff fe78 	bl	b8de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b90f6:	1d28      	adds	r0, r5, #4
   b90f8:	f7fd fa7c 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b90fc:	3508      	adds	r5, #8
   b90fe:	3408      	adds	r4, #8
   b9100:	e7f2      	b.n	b90e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9104 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9106:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9108:	6846      	ldr	r6, [r0, #4]
   b910a:	4668      	mov	r0, sp
   b910c:	f7ff fe6b 	bl	b8de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9110:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b9114:	429f      	cmp	r7, r3
   b9116:	db12      	blt.n	b913e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b9118:	3701      	adds	r7, #1
        if (n > 0) {
   b911a:	2f00      	cmp	r7, #0
   b911c:	dd29      	ble.n	b9172 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b911e:	00f8      	lsls	r0, r7, #3
   b9120:	f7fe ff4c 	bl	b7fbc <malloc>
            if (!d) {
   b9124:	4605      	mov	r5, r0
   b9126:	b1f0      	cbz	r0, b9166 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b9128:	e9d4 1200 	ldrd	r1, r2, [r4]
   b912c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9130:	f7ff ffbe 	bl	b90b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9134:	6820      	ldr	r0, [r4, #0]
   b9136:	f7fe ff49 	bl	b7fcc <free>
        data_ = d;
   b913a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b913c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b913e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9140:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9142:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b9146:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b914a:	4631      	mov	r1, r6
   b914c:	f106 0008 	add.w	r0, r6, #8
   b9150:	f7ff ffae 	bl	b90b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9154:	b11e      	cbz	r6, b915e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b9156:	4669      	mov	r1, sp
   b9158:	4630      	mov	r0, r6
   b915a:	f7ff fe44 	bl	b8de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b915e:	6863      	ldr	r3, [r4, #4]
   b9160:	3301      	adds	r3, #1
   b9162:	6063      	str	r3, [r4, #4]
    return true;
   b9164:	2501      	movs	r5, #1
   b9166:	a801      	add	r0, sp, #4
   b9168:	f7fd fa44 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b916c:	4628      	mov	r0, r5
   b916e:	b003      	add	sp, #12
   b9170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9172:	2500      	movs	r5, #0
   b9174:	e7de      	b.n	b9134 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b9176 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b9178:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b917c:	4605      	mov	r5, r0
   b917e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b9180:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9184:	42a6      	cmp	r6, r4
   b9186:	d005      	beq.n	b9194 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b9188:	4639      	mov	r1, r7
   b918a:	4620      	mov	r0, r4
   b918c:	f7ff fcd9 	bl	b8b42 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9190:	b108      	cbz	r0, b9196 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9192:	b914      	cbnz	r4, b919a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b9196:	3408      	adds	r4, #8
   b9198:	e7f4      	b.n	b9184 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b919a:	1d20      	adds	r0, r4, #4
   b919c:	f7fd fa2a 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b91a0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b91a4:	f104 0108 	add.w	r1, r4, #8
   b91a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b91ac:	4620      	mov	r0, r4
   b91ae:	f7ff ff7f 	bl	b90b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b91b2:	686b      	ldr	r3, [r5, #4]
   b91b4:	3b01      	subs	r3, #1
   b91b6:	606b      	str	r3, [r5, #4]
    return true;
   b91b8:	e7ec      	b.n	b9194 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b91bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b91bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b91c0:	4605      	mov	r5, r0
   b91c2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b91c4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b91c6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b91c8:	f7ff fa92 	bl	b86f0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b91cc:	682e      	ldr	r6, [r5, #0]
   b91ce:	1ef3      	subs	r3, r6, #3
   b91d0:	2b0d      	cmp	r3, #13
   b91d2:	d83c      	bhi.n	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b91d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b91d8:	0057000e 	.word	0x0057000e
   b91dc:	00d3003b 	.word	0x00d3003b
   b91e0:	003b003b 	.word	0x003b003b
   b91e4:	003b003b 	.word	0x003b003b
   b91e8:	009d003b 	.word	0x009d003b
   b91ec:	009d009d 	.word	0x009d009d
   b91f0:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b91f4:	a804      	add	r0, sp, #16
   b91f6:	f7ff fc6f 	bl	b8ad8 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b91fa:	9b04      	ldr	r3, [sp, #16]
   b91fc:	89aa      	ldrh	r2, [r5, #12]
   b91fe:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b9200:	6869      	ldr	r1, [r5, #4]
   b9202:	9804      	ldr	r0, [sp, #16]
   b9204:	3108      	adds	r1, #8
   b9206:	3002      	adds	r0, #2
   b9208:	f7ff fa8c 	bl	b8724 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b920c:	a904      	add	r1, sp, #16
   b920e:	a806      	add	r0, sp, #24
   b9210:	f7ff fde9 	bl	b8de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b9214:	a906      	add	r1, sp, #24
   b9216:	f104 0018 	add.w	r0, r4, #24
   b921a:	f7ff ff73 	bl	b9104 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b921e:	4605      	mov	r5, r0
   b9220:	a807      	add	r0, sp, #28
   b9222:	f7fd f9e7 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9226:	b9c5      	cbnz	r5, b925a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b9228:	2320      	movs	r3, #32
   b922a:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b922e:	4b5e      	ldr	r3, [pc, #376]	; (b93a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9230:	495e      	ldr	r1, [pc, #376]	; (b93ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b9232:	9300      	str	r3, [sp, #0]
   b9234:	aa06      	add	r2, sp, #24
   b9236:	462b      	mov	r3, r5
   b9238:	2001      	movs	r0, #1
   b923a:	f7fe fdd3 	bl	b7de4 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b923e:	9b04      	ldr	r3, [sp, #16]
   b9240:	4629      	mov	r1, r5
   b9242:	8818      	ldrh	r0, [r3, #0]
   b9244:	f7fe fc14 	bl	b7a70 <hal_ble_gap_disconnect>
   b9248:	a805      	add	r0, sp, #20
   b924a:	f7fd f9d3 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b924e:	a803      	add	r0, sp, #12
   b9250:	f7ff fa5c 	bl	b870c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b9254:	b00e      	add	sp, #56	; 0x38
   b9256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b925a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b925c:	b123      	cbz	r3, b9268 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b925e:	a904      	add	r1, sp, #16
   b9260:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9264:	f7ff fe41 	bl	b8eea <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b9268:	a805      	add	r0, sp, #20
   b926a:	f7fd f9c3 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b926e:	2120      	movs	r1, #32
   b9270:	2300      	movs	r3, #0
   b9272:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b9276:	4a4e      	ldr	r2, [pc, #312]	; (b93b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b9278:	9200      	str	r2, [sp, #0]
   b927a:	494c      	ldr	r1, [pc, #304]	; (b93ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b927c:	aa06      	add	r2, sp, #24
   b927e:	2001      	movs	r0, #1
   b9280:	f7fe fdb0 	bl	b7de4 <log_message>
   b9284:	e7e3      	b.n	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9286:	89a9      	ldrh	r1, [r5, #12]
   b9288:	4620      	mov	r0, r4
   b928a:	f7ff fb89 	bl	b89a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b928e:	4606      	mov	r6, r0
   b9290:	2800      	cmp	r0, #0
   b9292:	d0dc      	beq.n	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b9294:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b9296:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b929a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b929e:	8029      	strh	r1, [r5, #0]
   b92a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b92a4:	429a      	cmp	r2, r3
   b92a6:	d003      	beq.n	b92b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b92a8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b92ac:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b92ae:	e7f9      	b.n	b92a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b92b0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b92b4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b92b8:	45b8      	cmp	r8, r7
   b92ba:	d004      	beq.n	b92c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b92bc:	1d38      	adds	r0, r7, #4
   b92be:	f7fd f999 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92c2:	3708      	adds	r7, #8
   b92c4:	e7f8      	b.n	b92b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b92c6:	2300      	movs	r3, #0
   b92c8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b92ca:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b92ce:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b92d2:	45b8      	cmp	r8, r7
   b92d4:	d004      	beq.n	b92e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b92d6:	1d38      	adds	r0, r7, #4
   b92d8:	f7fd f98c 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92dc:	3708      	adds	r7, #8
   b92de:	e7f8      	b.n	b92d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b92e0:	2300      	movs	r3, #0
   b92e2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b92e4:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b92e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b92e8:	b123      	cbz	r3, b92f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b92ea:	4631      	mov	r1, r6
   b92ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b92f0:	f7ff fdfb 	bl	b8eea <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b92f4:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b92f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b92fa:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b92fc:	4631      	mov	r1, r6
   b92fe:	f104 0018 	add.w	r0, r4, #24
   b9302:	f7ff ff38 	bl	b9176 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b9306:	2220      	movs	r2, #32
   b9308:	2300      	movs	r3, #0
   b930a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b930e:	4a29      	ldr	r2, [pc, #164]	; (b93b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b9310:	e7b2      	b.n	b9278 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9312:	89a9      	ldrh	r1, [r5, #12]
   b9314:	4620      	mov	r0, r4
   b9316:	f7ff fb43 	bl	b89a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b931a:	2800      	cmp	r0, #0
   b931c:	d097      	beq.n	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b931e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9320:	2b00      	cmp	r3, #0
   b9322:	d094      	beq.n	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b9324:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9326:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b9328:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b932c:	d001      	beq.n	b9332 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b932e:	2e10      	cmp	r6, #16
   b9330:	d117      	bne.n	b9362 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b9332:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b9334:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b9336:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b9338:	2506      	movs	r5, #6
                        };
   b933a:	f88d 3015 	strb.w	r3, [sp, #21]
   b933e:	9104      	str	r1, [sp, #16]
   b9340:	f88d 2014 	strb.w	r2, [sp, #20]
   b9344:	9006      	str	r0, [sp, #24]
   b9346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b934a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b934c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b9350:	9508      	str	r5, [sp, #32]
   b9352:	e883 0003 	stmia.w	r3, {r0, r1}
   b9356:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9358:	a906      	add	r1, sp, #24
   b935a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b935e:	4798      	blx	r3
   b9360:	e775      	b.n	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b9362:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9364:	bf01      	itttt	eq
   b9366:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b9368:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b936a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b936e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b9370:	bf0f      	iteee	eq
   b9372:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b9376:	461a      	movne	r2, r3
   b9378:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b937a:	461d      	movne	r5, r3
   b937c:	e7dd      	b.n	b933a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b937e:	89a9      	ldrh	r1, [r5, #12]
   b9380:	4620      	mov	r0, r4
   b9382:	f7ff fb0d 	bl	b89a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9386:	4601      	mov	r1, r0
   b9388:	2800      	cmp	r0, #0
   b938a:	f43f af60 	beq.w	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b938e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9390:	2b00      	cmp	r3, #0
   b9392:	f43f af5c 	beq.w	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9396:	686b      	ldr	r3, [r5, #4]
   b9398:	9306      	str	r3, [sp, #24]
   b939a:	aa06      	add	r2, sp, #24
   b939c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b939e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b93a2:	4798      	blx	r3
   b93a4:	e753      	b.n	b924e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b93a6:	bf00      	nop
   b93a8:	000be1f0 	.word	0x000be1f0
   b93ac:	000be16f 	.word	0x000be16f
   b93b0:	000be216 	.word	0x000be216
   b93b4:	000be220 	.word	0x000be220

000b93b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b93b8:	b513      	push	{r0, r1, r4, lr}
   b93ba:	460b      	mov	r3, r1
   b93bc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93be:	e9d0 0100 	ldrd	r0, r1, [r0]
   b93c2:	466c      	mov	r4, sp
   b93c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b93c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b93cc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b93d0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b93d4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b93d8:	b002      	add	sp, #8
   b93da:	bd10      	pop	{r4, pc}

000b93dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b93dc:	b538      	push	{r3, r4, r5, lr}
   b93de:	4605      	mov	r5, r0
   b93e0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b93e2:	f7ff ffe9 	bl	b93b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93e6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b93e8:	68a2      	ldr	r2, [r4, #8]
   b93ea:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b93ec:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b93ee:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b93f0:	68e2      	ldr	r2, [r4, #12]
   b93f2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b93f4:	60e3      	str	r3, [r4, #12]
      }
   b93f6:	bd38      	pop	{r3, r4, r5, pc}

000b93f8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b93f8:	b570      	push	{r4, r5, r6, lr}
   b93fa:	4604      	mov	r4, r0
   b93fc:	b08c      	sub	sp, #48	; 0x30
   b93fe:	460e      	mov	r6, r1
   b9400:	9201      	str	r2, [sp, #4]
   b9402:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b9404:	f7ff faac 	bl	b8960 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b9408:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b940a:	9901      	ldr	r1, [sp, #4]
   b940c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9410:	f7fe ffad 	bl	b836e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9414:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b9418:	b1cd      	cbz	r5, b944e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b941a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b941c:	9502      	str	r5, [sp, #8]
   b941e:	a902      	add	r1, sp, #8
   b9420:	a804      	add	r0, sp, #16
   b9422:	9303      	str	r3, [sp, #12]
   b9424:	f7ff fc90 	bl	b8d48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b9428:	2300      	movs	r3, #0
	__x.swap(*this);
   b942a:	a908      	add	r1, sp, #32
   b942c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b942e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b9430:	f7ff ffd4 	bl	b93dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b9434:	4631      	mov	r1, r6
   b9436:	a808      	add	r0, sp, #32
   b9438:	f7ff ffd0 	bl	b93dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b943c:	a808      	add	r0, sp, #32
   b943e:	f7fc fc79 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b9442:	a804      	add	r0, sp, #16
   b9444:	f7fc fc76 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
    }
   b9448:	4620      	mov	r0, r4
   b944a:	b00c      	add	sp, #48	; 0x30
   b944c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b944e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b9450:	e7ea      	b.n	b9428 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b9454 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b9454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9458:	b087      	sub	sp, #28
   b945a:	461d      	mov	r5, r3
   b945c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b9460:	4680      	mov	r8, r0
   b9462:	468b      	mov	fp, r1
   b9464:	4692      	mov	sl, r2
   b9466:	9912      	ldr	r1, [sp, #72]	; 0x48
   b9468:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b946a:	2200      	movs	r2, #0
   b946c:	2068      	movs	r0, #104	; 0x68
   b946e:	9102      	str	r1, [sp, #8]
   b9470:	9204      	str	r2, [sp, #16]
   b9472:	f7fb fb2a 	bl	b4aca <_Znwj>
	  auto __pi = ::new (__mem)
   b9476:	1e06      	subs	r6, r0, #0
   b9478:	f106 090c 	add.w	r9, r6, #12
   b947c:	d018      	beq.n	b94b0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b947e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b9480:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b9482:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9486:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9488:	4a15      	ldr	r2, [pc, #84]	; (b94e0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b948a:	f847 2b20 	str.w	r2, [r7], #32
   b948e:	9b03      	ldr	r3, [sp, #12]
   b9490:	9100      	str	r1, [sp, #0]
   b9492:	465a      	mov	r2, fp
   b9494:	4651      	mov	r1, sl
   b9496:	4648      	mov	r0, r9
   b9498:	f7ff ffae 	bl	b93f8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b949c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b949e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b94a0:	682b      	ldr	r3, [r5, #0]
   b94a2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b94a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b94a6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b94aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b94ac:	6823      	ldr	r3, [r4, #0]
   b94ae:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b94b0:	a904      	add	r1, sp, #16
   b94b2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b94b4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b94b8:	f7ff fd06 	bl	b8ec8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b94bc:	a805      	add	r0, sp, #20
   b94be:	f7fd f899 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b94c2:	f8d8 3000 	ldr.w	r3, [r8]
   b94c6:	b93b      	cbnz	r3, b94d8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b94c8:	4a06      	ldr	r2, [pc, #24]	; (b94e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b94ca:	4907      	ldr	r1, [pc, #28]	; (b94e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b94cc:	200a      	movs	r0, #10
}
   b94ce:	b007      	add	sp, #28
   b94d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b94d4:	f7fe bc7e 	b.w	b7dd4 <panic_>
}
   b94d8:	b007      	add	sp, #28
   b94da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b94de:	bf00      	nop
   b94e0:	000be288 	.word	0x000be288
   b94e4:	000b7981 	.word	0x000b7981
   b94e8:	000be158 	.word	0x000be158

000b94ec <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b94ec:	b538      	push	{r3, r4, r5, lr}
   b94ee:	4605      	mov	r5, r0
   b94f0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b94f2:	f7ff ff61 	bl	b93b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b94f6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b94f8:	68a2      	ldr	r2, [r4, #8]
   b94fa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b94fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b94fe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9500:	68e2      	ldr	r2, [r4, #12]
   b9502:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9504:	60e3      	str	r3, [r4, #12]
      }
   b9506:	bd38      	pop	{r3, r4, r5, pc}

000b9508 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b9508:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b950a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b950c:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b950e:	3424      	adds	r4, #36	; 0x24
   b9510:	b1b9      	cbz	r1, b9542 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b9512:	e9cd 1200 	strd	r1, r2, [sp]
   b9516:	a802      	add	r0, sp, #8
   b9518:	4669      	mov	r1, sp
   b951a:	f7ff fc2d 	bl	b8d78 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b951e:	2300      	movs	r3, #0
	__x.swap(*this);
   b9520:	a906      	add	r1, sp, #24
   b9522:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b9524:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b9526:	f7ff ffe1 	bl	b94ec <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b952a:	4621      	mov	r1, r4
   b952c:	a806      	add	r0, sp, #24
   b952e:	f7ff ffdd 	bl	b94ec <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b9532:	a806      	add	r0, sp, #24
   b9534:	f7fc fbfe 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b9538:	a802      	add	r0, sp, #8
   b953a:	f7fc fbfb 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
}
   b953e:	b00a      	add	sp, #40	; 0x28
   b9540:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b9542:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b9544:	e7eb      	b.n	b951e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b9546 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9546:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b954a:	4604      	mov	r4, r0
   b954c:	460d      	mov	r5, r1
   b954e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9550:	d914      	bls.n	b957c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9552:	4290      	cmp	r0, r2
   b9554:	d213      	bcs.n	b957e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9556:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b955a:	1a75      	subs	r5, r6, r1
   b955c:	f1a1 0708 	sub.w	r7, r1, #8
   b9560:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9562:	42b7      	cmp	r7, r6
   b9564:	d018      	beq.n	b9598 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9566:	b11c      	cbz	r4, b9570 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9568:	4631      	mov	r1, r6
   b956a:	4620      	mov	r0, r4
   b956c:	f7ff fc31 	bl	b8dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9570:	1d30      	adds	r0, r6, #4
   b9572:	f7fd f83f 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9576:	3e08      	subs	r6, #8
   b9578:	3c08      	subs	r4, #8
   b957a:	e7f2      	b.n	b9562 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b957c:	d00c      	beq.n	b9598 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b957e:	42b5      	cmp	r5, r6
   b9580:	d00a      	beq.n	b9598 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9582:	b11c      	cbz	r4, b958c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9584:	4629      	mov	r1, r5
   b9586:	4620      	mov	r0, r4
   b9588:	f7ff fc23 	bl	b8dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b958c:	1d28      	adds	r0, r5, #4
   b958e:	f7fd f831 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9592:	3508      	adds	r5, #8
   b9594:	3408      	adds	r4, #8
   b9596:	e7f2      	b.n	b957e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b959a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b959a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b959c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b959e:	4605      	mov	r5, r0
        if (n > 0) {
   b95a0:	dd11      	ble.n	b95c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b95a2:	00f0      	lsls	r0, r6, #3
   b95a4:	f7fe fd0a 	bl	b7fbc <malloc>
            if (!d) {
   b95a8:	4604      	mov	r4, r0
   b95aa:	b158      	cbz	r0, b95c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b95ac:	e9d5 1200 	ldrd	r1, r2, [r5]
   b95b0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b95b4:	f7ff ffc7 	bl	b9546 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b95b8:	6828      	ldr	r0, [r5, #0]
   b95ba:	f7fe fd07 	bl	b7fcc <free>
        data_ = d;
   b95be:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b95c0:	60ae      	str	r6, [r5, #8]
        return true;
   b95c2:	2001      	movs	r0, #1
    }
   b95c4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b95c6:	2400      	movs	r4, #0
   b95c8:	e7f6      	b.n	b95b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b95ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b95ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b95cc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b95ce:	6845      	ldr	r5, [r0, #4]
   b95d0:	4668      	mov	r0, sp
   b95d2:	f7ff fbfe 	bl	b8dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b95d6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b95da:	4299      	cmp	r1, r3
   b95dc:	da10      	bge.n	b9600 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b95de:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b95e0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b95e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b95e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b95ea:	4629      	mov	r1, r5
   b95ec:	f105 0008 	add.w	r0, r5, #8
   b95f0:	f7ff ffa9 	bl	b9546 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b95f4:	b98d      	cbnz	r5, b961a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b95f6:	6863      	ldr	r3, [r4, #4]
   b95f8:	3301      	adds	r3, #1
   b95fa:	6063      	str	r3, [r4, #4]
    return true;
   b95fc:	2601      	movs	r6, #1
   b95fe:	e006      	b.n	b960e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9600:	3101      	adds	r1, #1
   b9602:	4620      	mov	r0, r4
   b9604:	f7ff ffc9 	bl	b959a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9608:	4606      	mov	r6, r0
   b960a:	2800      	cmp	r0, #0
   b960c:	d1e7      	bne.n	b95de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b960e:	a801      	add	r0, sp, #4
   b9610:	f7fc fff0 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9614:	4630      	mov	r0, r6
   b9616:	b002      	add	sp, #8
   b9618:	bd70      	pop	{r4, r5, r6, pc}
   b961a:	4669      	mov	r1, sp
   b961c:	4628      	mov	r0, r5
   b961e:	f7ff fbd8 	bl	b8dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9622:	e7e8      	b.n	b95f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9624 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9624:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9628:	4604      	mov	r4, r0
   b962a:	460d      	mov	r5, r1
   b962c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b962e:	d914      	bls.n	b965a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9630:	4290      	cmp	r0, r2
   b9632:	d213      	bcs.n	b965c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9634:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9638:	1a75      	subs	r5, r6, r1
   b963a:	f1a1 0708 	sub.w	r7, r1, #8
   b963e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9640:	42b7      	cmp	r7, r6
   b9642:	d018      	beq.n	b9676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9644:	b11c      	cbz	r4, b964e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9646:	4631      	mov	r1, r6
   b9648:	4620      	mov	r0, r4
   b964a:	f7ff fbb4 	bl	b8db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b964e:	1d30      	adds	r0, r6, #4
   b9650:	f7fc ffd0 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9654:	3e08      	subs	r6, #8
   b9656:	3c08      	subs	r4, #8
   b9658:	e7f2      	b.n	b9640 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b965a:	d00c      	beq.n	b9676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b965c:	42b5      	cmp	r5, r6
   b965e:	d00a      	beq.n	b9676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9660:	b11c      	cbz	r4, b966a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9662:	4629      	mov	r1, r5
   b9664:	4620      	mov	r0, r4
   b9666:	f7ff fba6 	bl	b8db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b966a:	1d28      	adds	r0, r5, #4
   b966c:	f7fc ffc2 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9670:	3508      	adds	r5, #8
   b9672:	3408      	adds	r4, #8
   b9674:	e7f2      	b.n	b965c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9678 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9678:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b967a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b967c:	4605      	mov	r5, r0
        if (n > 0) {
   b967e:	dd11      	ble.n	b96a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9680:	00f0      	lsls	r0, r6, #3
   b9682:	f7fe fc9b 	bl	b7fbc <malloc>
            if (!d) {
   b9686:	4604      	mov	r4, r0
   b9688:	b158      	cbz	r0, b96a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b968a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b968e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9692:	f7ff ffc7 	bl	b9624 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9696:	6828      	ldr	r0, [r5, #0]
   b9698:	f7fe fc98 	bl	b7fcc <free>
        data_ = d;
   b969c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b969e:	60ae      	str	r6, [r5, #8]
        return true;
   b96a0:	2001      	movs	r0, #1
    }
   b96a2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b96a4:	2400      	movs	r4, #0
   b96a6:	e7f6      	b.n	b9696 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b96a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b96a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b96aa:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b96ac:	6845      	ldr	r5, [r0, #4]
   b96ae:	4668      	mov	r0, sp
   b96b0:	f7ff fb81 	bl	b8db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b96b4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b96b8:	4299      	cmp	r1, r3
   b96ba:	da10      	bge.n	b96de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b96bc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b96be:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b96c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b96c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b96c8:	4629      	mov	r1, r5
   b96ca:	f105 0008 	add.w	r0, r5, #8
   b96ce:	f7ff ffa9 	bl	b9624 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b96d2:	b98d      	cbnz	r5, b96f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b96d4:	6863      	ldr	r3, [r4, #4]
   b96d6:	3301      	adds	r3, #1
   b96d8:	6063      	str	r3, [r4, #4]
    return true;
   b96da:	2601      	movs	r6, #1
   b96dc:	e006      	b.n	b96ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b96de:	3101      	adds	r1, #1
   b96e0:	4620      	mov	r0, r4
   b96e2:	f7ff ffc9 	bl	b9678 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b96e6:	4606      	mov	r6, r0
   b96e8:	2800      	cmp	r0, #0
   b96ea:	d1e7      	bne.n	b96bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b96ec:	a801      	add	r0, sp, #4
   b96ee:	f7fc ff81 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b96f2:	4630      	mov	r0, r6
   b96f4:	b002      	add	sp, #8
   b96f6:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b96f8:	4669      	mov	r1, sp
   b96fa:	4628      	mov	r0, r5
   b96fc:	f7ff fb5b 	bl	b8db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9700:	e7e8      	b.n	b96d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b9704 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9708:	4617      	mov	r7, r2
   b970a:	b0a1      	sub	sp, #132	; 0x84
   b970c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b970e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9710:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9712:	f7fe ffed 	bl	b86f0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9716:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9718:	7923      	ldrb	r3, [r4, #4]
   b971a:	b953      	cbnz	r3, b9732 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b971c:	4639      	mov	r1, r7
   b971e:	4640      	mov	r0, r8
   b9720:	f7ff fb49 	bl	b8db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9724:	a80a      	add	r0, sp, #40	; 0x28
   b9726:	f7fe fff1 	bl	b870c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b972a:	4640      	mov	r0, r8
   b972c:	b021      	add	sp, #132	; 0x84
   b972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9732:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b9734:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b9738:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b973c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b973e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b9742:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b9746:	9b03      	ldr	r3, [sp, #12]
   b9748:	429d      	cmp	r5, r3
   b974a:	d021      	beq.n	b9790 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b974c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b9750:	4658      	mov	r0, fp
   b9752:	f109 0114 	add.w	r1, r9, #20
   b9756:	f7ff f878 	bl	b884a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b975a:	b1b8      	cbz	r0, b978c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b975c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b9760:	4650      	mov	r0, sl
   b9762:	f7ff f872 	bl	b884a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b9766:	b188      	cbz	r0, b978c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b9768:	6823      	ldr	r3, [r4, #0]
   b976a:	f8d9 2000 	ldr.w	r2, [r9]
   b976e:	4053      	eors	r3, r2
   b9770:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b9774:	d10a      	bne.n	b978c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b9776:	2220      	movs	r2, #32
   b9778:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b977c:	4a5e      	ldr	r2, [pc, #376]	; (b98f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b977e:	9200      	str	r2, [sp, #0]
   b9780:	aa15      	add	r2, sp, #84	; 0x54
   b9782:	495e      	ldr	r1, [pc, #376]	; (b98fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b9784:	2032      	movs	r0, #50	; 0x32
   b9786:	f7fe fb2d 	bl	b7de4 <log_message>
   b978a:	e7c7      	b.n	b971c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b978c:	3508      	adds	r5, #8
   b978e:	e7da      	b.n	b9746 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b9790:	4650      	mov	r0, sl
   b9792:	f7ff f82b 	bl	b87ec <_ZNK8particle7BleUuid7isValidEv>
   b9796:	b960      	cbnz	r0, b97b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b9798:	4959      	ldr	r1, [pc, #356]	; (b9900 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b979a:	2201      	movs	r2, #1
   b979c:	a815      	add	r0, sp, #84	; 0x54
   b979e:	ad15      	add	r5, sp, #84	; 0x54
   b97a0:	f7fe fffc 	bl	b879c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b97a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b97a6:	46d4      	mov	ip, sl
   b97a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b97ac:	682b      	ldr	r3, [r5, #0]
   b97ae:	f8cc 3000 	str.w	r3, [ip]
   b97b2:	6833      	ldr	r3, [r6, #0]
   b97b4:	e9d3 5300 	ldrd	r5, r3, [r3]
   b97b8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b97bc:	455d      	cmp	r5, fp
   b97be:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b97c0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b97c2:	d06e      	beq.n	b98a2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b97c4:	f855 0b08 	ldr.w	r0, [r5], #8
   b97c8:	f7ff f83f 	bl	b884a <_ZNK8particle7BleUuideqERKS0_>
   b97cc:	2800      	cmp	r0, #0
   b97ce:	d0f5      	beq.n	b97bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b97d0:	f104 0a14 	add.w	sl, r4, #20
   b97d4:	4650      	mov	r0, sl
   b97d6:	f7ff f809 	bl	b87ec <_ZNK8particle7BleUuid7isValidEv>
   b97da:	b988      	cbnz	r0, b9800 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b97dc:	4b49      	ldr	r3, [pc, #292]	; (b9904 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b97de:	4948      	ldr	r1, [pc, #288]	; (b9900 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b97e0:	881a      	ldrh	r2, [r3, #0]
   b97e2:	3201      	adds	r2, #1
   b97e4:	b292      	uxth	r2, r2
   b97e6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b97e8:	a815      	add	r0, sp, #84	; 0x54
   b97ea:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b97ec:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b97ee:	f7fe fff4 	bl	b87da <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b97f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b97f4:	46d4      	mov	ip, sl
   b97f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b97fa:	682b      	ldr	r3, [r5, #0]
   b97fc:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9800:	4b41      	ldr	r3, [pc, #260]	; (b9908 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9802:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9804:	2228      	movs	r2, #40	; 0x28
   b9806:	2100      	movs	r1, #0
   b9808:	a816      	add	r0, sp, #88	; 0x58
   b980a:	f001 ff10 	bl	bb62e <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b980e:	4651      	mov	r1, sl
   b9810:	a804      	add	r0, sp, #16
   b9812:	f7fe fffd 	bl	b8810 <_ZN8particle7BleUuid7halUUIDEv>
   b9816:	ab04      	add	r3, sp, #16
   b9818:	aa18      	add	r2, sp, #96	; 0x60
   b981a:	f10d 0c20 	add.w	ip, sp, #32
   b981e:	6818      	ldr	r0, [r3, #0]
   b9820:	6859      	ldr	r1, [r3, #4]
   b9822:	4615      	mov	r5, r2
   b9824:	c503      	stmia	r5!, {r0, r1}
   b9826:	3308      	adds	r3, #8
   b9828:	4563      	cmp	r3, ip
   b982a:	462a      	mov	r2, r5
   b982c:	d1f7      	bne.n	b981e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b982e:	6818      	ldr	r0, [r3, #0]
   b9830:	6028      	str	r0, [r5, #0]
    return value_;
   b9832:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9834:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9838:	f8d9 3000 	ldr.w	r3, [r9]
   b983c:	8a9b      	ldrh	r3, [r3, #20]
   b983e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b9842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9844:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b9846:	4b31      	ldr	r3, [pc, #196]	; (b990c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9848:	2200      	movs	r2, #0
   b984a:	1da1      	adds	r1, r4, #6
   b984c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b984e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9852:	f7fe f93f 	bl	b7ad4 <hal_ble_gatt_server_add_characteristic>
   b9856:	2800      	cmp	r0, #0
   b9858:	f47f af60 	bne.w	b971c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b985c:	2301      	movs	r3, #1
   b985e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b9860:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b9862:	4639      	mov	r1, r7
        return characteristics_;
   b9864:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b9866:	a80d      	add	r0, sp, #52	; 0x34
   b9868:	f7ff faa5 	bl	b8db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b986c:	4620      	mov	r0, r4
   b986e:	a90d      	add	r1, sp, #52	; 0x34
   b9870:	f7ff ff1a 	bl	b96a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9874:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9876:	a80e      	add	r0, sp, #56	; 0x38
   b9878:	f7fc febc 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b987c:	2c00      	cmp	r4, #0
   b987e:	f47f af4d 	bne.w	b971c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b9882:	2320      	movs	r3, #32
   b9884:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b9888:	4b21      	ldr	r3, [pc, #132]	; (b9910 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b988a:	9300      	str	r3, [sp, #0]
   b988c:	aa0d      	add	r2, sp, #52	; 0x34
   b988e:	4623      	mov	r3, r4
   b9890:	e777      	b.n	b9782 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b9892:	4639      	mov	r1, r7
   b9894:	4640      	mov	r0, r8
   b9896:	f7ff fa8e 	bl	b8db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b989a:	a80c      	add	r0, sp, #48	; 0x30
   b989c:	f7fc feaa 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98a0:	e740      	b.n	b9724 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b98a2:	a80b      	add	r0, sp, #44	; 0x2c
   b98a4:	f7ff f8f4 	bl	b8a90 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b98a8:	4651      	mov	r1, sl
   b98aa:	a815      	add	r0, sp, #84	; 0x54
   b98ac:	f7fe ffb0 	bl	b8810 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b98b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b98b2:	2300      	movs	r3, #0
   b98b4:	3214      	adds	r2, #20
   b98b6:	a915      	add	r1, sp, #84	; 0x54
   b98b8:	2001      	movs	r0, #1
   b98ba:	f7fe f8e3 	bl	b7a84 <hal_ble_gatt_server_add_service>
   b98be:	2800      	cmp	r0, #0
   b98c0:	d1e7      	bne.n	b9892 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b98c2:	6835      	ldr	r5, [r6, #0]
   b98c4:	a90b      	add	r1, sp, #44	; 0x2c
   b98c6:	a80d      	add	r0, sp, #52	; 0x34
   b98c8:	f7ff fa83 	bl	b8dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b98cc:	4628      	mov	r0, r5
   b98ce:	a90d      	add	r1, sp, #52	; 0x34
   b98d0:	f7ff fe7b 	bl	b95ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b98d4:	4605      	mov	r5, r0
   b98d6:	a80e      	add	r0, sp, #56	; 0x38
   b98d8:	f7fc fe8c 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98dc:	2d00      	cmp	r5, #0
   b98de:	d0d8      	beq.n	b9892 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b98e0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b98e2:	6853      	ldr	r3, [r2, #4]
   b98e4:	6812      	ldr	r2, [r2, #0]
   b98e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b98ea:	3b01      	subs	r3, #1
   b98ec:	a80c      	add	r0, sp, #48	; 0x30
   b98ee:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b98f2:	f7fc fe7f 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98f6:	e76b      	b.n	b97d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b98f8:	000be22d 	.word	0x000be22d
   b98fc:	000be16f 	.word	0x000be16f
   b9900:	000be2dc 	.word	0x000be2dc
   b9904:	2003e684 	.word	0x2003e684
   b9908:	002c0003 	.word	0x002c0003
   b990c:	000b8c29 	.word	0x000b8c29
   b9910:	000be258 	.word	0x000be258

000b9914 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9914:	4802      	ldr	r0, [pc, #8]	; (b9920 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9916:	2300      	movs	r3, #0
   b9918:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b991a:	f7fe b933 	b.w	b7b84 <os_mutex_recursive_create>
   b991e:	bf00      	nop
   b9920:	2003e688 	.word	0x2003e688

000b9924 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9926:	4606      	mov	r6, r0
   b9928:	460d      	mov	r5, r1
  size_t n = 0;
   b992a:	188f      	adds	r7, r1, r2
   b992c:	2400      	movs	r4, #0
  while (size--) {
   b992e:	42bd      	cmp	r5, r7
   b9930:	d00c      	beq.n	b994c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9932:	6833      	ldr	r3, [r6, #0]
   b9934:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9938:	689b      	ldr	r3, [r3, #8]
   b993a:	4630      	mov	r0, r6
   b993c:	4798      	blx	r3
     if (chunk>=0)
   b993e:	1e03      	subs	r3, r0, #0
   b9940:	db01      	blt.n	b9946 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9942:	441c      	add	r4, r3
  while (size--) {
   b9944:	e7f3      	b.n	b992e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9946:	2c00      	cmp	r4, #0
   b9948:	bf08      	it	eq
   b994a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b994c:	4620      	mov	r0, r4
   b994e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9950 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b9950:	b513      	push	{r0, r1, r4, lr}
   b9952:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b9954:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9956:	b159      	cbz	r1, b9970 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9958:	9101      	str	r1, [sp, #4]
   b995a:	f7fb f85b 	bl	b4a14 <strlen>
   b995e:	6823      	ldr	r3, [r4, #0]
   b9960:	9901      	ldr	r1, [sp, #4]
   b9962:	68db      	ldr	r3, [r3, #12]
   b9964:	4602      	mov	r2, r0
   b9966:	4620      	mov	r0, r4
    }
   b9968:	b002      	add	sp, #8
   b996a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b996e:	4718      	bx	r3
    }
   b9970:	b002      	add	sp, #8
   b9972:	bd10      	pop	{r4, pc}

000b9974 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9974:	b508      	push	{r3, lr}
  return write(str);
   b9976:	f7ff ffeb 	bl	b9950 <_ZN5Print5writeEPKc>
}
   b997a:	bd08      	pop	{r3, pc}

000b997c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b997c:	6803      	ldr	r3, [r0, #0]
   b997e:	689b      	ldr	r3, [r3, #8]
   b9980:	4718      	bx	r3

000b9982 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b9982:	680a      	ldr	r2, [r1, #0]
 {
   b9984:	460b      	mov	r3, r1
   return x.printTo(*this);
   b9986:	6812      	ldr	r2, [r2, #0]
   b9988:	4601      	mov	r1, r0
   b998a:	4618      	mov	r0, r3
   b998c:	4710      	bx	r2

000b998e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b998e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9990:	210d      	movs	r1, #13
{
   b9992:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9994:	f7ff fff2 	bl	b997c <_ZN5Print5printEc>
  n += print('\n');
   b9998:	210a      	movs	r1, #10
  size_t n = print('\r');
   b999a:	4604      	mov	r4, r0
  n += print('\n');
   b999c:	4628      	mov	r0, r5
   b999e:	f7ff ffed 	bl	b997c <_ZN5Print5printEc>
  return n;
}
   b99a2:	4420      	add	r0, r4
   b99a4:	bd38      	pop	{r3, r4, r5, pc}

000b99a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b99a6:	b538      	push	{r3, r4, r5, lr}
   b99a8:	4605      	mov	r5, r0
  return write(str);
   b99aa:	f7ff ffd1 	bl	b9950 <_ZN5Print5writeEPKc>
   b99ae:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b99b0:	4628      	mov	r0, r5
   b99b2:	f7ff ffec 	bl	b998e <_ZN5Print7printlnEv>
  return n;
}
   b99b6:	4420      	add	r0, r4
   b99b8:	bd38      	pop	{r3, r4, r5, pc}

000b99ba <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   b99ba:	b538      	push	{r3, r4, r5, lr}
   b99bc:	4605      	mov	r5, r0
   size_t n = print(x);
   b99be:	f7ff ffe0 	bl	b9982 <_ZN5Print5printERK9Printable>
   b99c2:	4604      	mov	r4, r0
   n += println();
   b99c4:	4628      	mov	r0, r5
   b99c6:	f7ff ffe2 	bl	b998e <_ZN5Print7printlnEv>
   return n;
 }
   b99ca:	4420      	add	r0, r4
   b99cc:	bd38      	pop	{r3, r4, r5, pc}

000b99ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b99ce:	b530      	push	{r4, r5, lr}
   b99d0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b99d2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b99d4:	2a01      	cmp	r2, #1
  *str = '\0';
   b99d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b99da:	bf98      	it	ls
   b99dc:	220a      	movls	r2, #10
   b99de:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b99e0:	460d      	mov	r5, r1
   b99e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b99e6:	fb01 5312 	mls	r3, r1, r2, r5
   b99ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b99ee:	2b09      	cmp	r3, #9
   b99f0:	bf94      	ite	ls
   b99f2:	3330      	addls	r3, #48	; 0x30
   b99f4:	3337      	addhi	r3, #55	; 0x37
   b99f6:	b2db      	uxtb	r3, r3
  } while(n);
   b99f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b99fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b99fe:	d9ef      	bls.n	b99e0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9a00:	4621      	mov	r1, r4
   b9a02:	f7ff ffa5 	bl	b9950 <_ZN5Print5writeEPKc>
}
   b9a06:	b00b      	add	sp, #44	; 0x2c
   b9a08:	bd30      	pop	{r4, r5, pc}

000b9a0a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a0e:	b086      	sub	sp, #24
   b9a10:	af00      	add	r7, sp, #0
   b9a12:	4605      	mov	r5, r0
   b9a14:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9a16:	1d38      	adds	r0, r7, #4
   b9a18:	2114      	movs	r1, #20
{
   b9a1a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9a1c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9a1e:	f7fe fb05 	bl	b802c <vsnprintf>

    if (n<bufsize)
   b9a22:	2813      	cmp	r0, #19
   b9a24:	d80e      	bhi.n	b9a44 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9a26:	1d39      	adds	r1, r7, #4
   b9a28:	4628      	mov	r0, r5
   b9a2a:	f7ff ff91 	bl	b9950 <_ZN5Print5writeEPKc>
   b9a2e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9a30:	b11e      	cbz	r6, b9a3a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9a32:	4628      	mov	r0, r5
   b9a34:	f7ff ffab 	bl	b998e <_ZN5Print7printlnEv>
   b9a38:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9a3a:	4620      	mov	r0, r4
   b9a3c:	3718      	adds	r7, #24
   b9a3e:	46bd      	mov	sp, r7
   b9a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9a44:	f100 0308 	add.w	r3, r0, #8
   b9a48:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9a4c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9a4e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9a52:	4622      	mov	r2, r4
   b9a54:	1c41      	adds	r1, r0, #1
   b9a56:	683b      	ldr	r3, [r7, #0]
   b9a58:	4668      	mov	r0, sp
   b9a5a:	f7fe fae7 	bl	b802c <vsnprintf>
  return write(str);
   b9a5e:	4669      	mov	r1, sp
   b9a60:	4628      	mov	r0, r5
   b9a62:	f7ff ff75 	bl	b9950 <_ZN5Print5writeEPKc>
   b9a66:	4604      	mov	r4, r0
   b9a68:	46c5      	mov	sp, r8
   b9a6a:	e7e1      	b.n	b9a30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9a6c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9a6c:	4b01      	ldr	r3, [pc, #4]	; (b9a74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9a6e:	4a02      	ldr	r2, [pc, #8]	; (b9a78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9a70:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9a72:	4770      	bx	lr
   b9a74:	2003e690 	.word	0x2003e690
   b9a78:	000be2fc 	.word	0x000be2fc

000b9a7c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b9a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b9a80:	4a15      	ldr	r2, [pc, #84]	; (b9ad8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b9a82:	f8df 8060 	ldr.w	r8, [pc, #96]	; b9ae4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b9a86:	e9d2 6300 	ldrd	r6, r3, [r2]
   b9a8a:	1980      	adds	r0, r0, r6
   b9a8c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b9a90:	4b12      	ldr	r3, [pc, #72]	; (b9adc <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b9a92:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b9a96:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b9a9a:	1986      	adds	r6, r0, r6
   b9a9c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b9aa0:	42bb      	cmp	r3, r7
   b9aa2:	bf08      	it	eq
   b9aa4:	42b2      	cmpeq	r2, r6
{
   b9aa6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b9aa8:	d013      	beq.n	b9ad2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b9aaa:	a903      	add	r1, sp, #12
   b9aac:	4668      	mov	r0, sp
   b9aae:	e9cd 6700 	strd	r6, r7, [sp]
   b9ab2:	f7fe faf3 	bl	b809c <localtime_r>
	calendar_time.tm_year += 1900;
   b9ab6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9ab8:	4d09      	ldr	r5, [pc, #36]	; (b9ae0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b9aba:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9abe:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b9ac0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b9aca:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9ace:	6823      	ldr	r3, [r4, #0]
   b9ad0:	602b      	str	r3, [r5, #0]
    }
}
   b9ad2:	b00c      	add	sp, #48	; 0x30
   b9ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ad8:	2003e6c8 	.word	0x2003e6c8
   b9adc:	2003e6c0 	.word	0x2003e6c0
   b9ae0:	2003e69c 	.word	0x2003e69c
   b9ae4:	2003e6d0 	.word	0x2003e6d0

000b9ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b9ae8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9aea:	2000      	movs	r0, #0
   b9aec:	f7fe fa56 	bl	b7f9c <spark_sync_time_pending>
   b9af0:	b128      	cbz	r0, b9afe <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9af2:	f7fe fa33 	bl	b7f5c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9af6:	f080 0001 	eor.w	r0, r0, #1
   b9afa:	b2c0      	uxtb	r0, r0
    }
   b9afc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9afe:	2001      	movs	r0, #1
   b9b00:	e7fc      	b.n	b9afc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b9b04 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b9b04:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b9b06:	f7ff ffb9 	bl	b9a7c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b9b0a:	4b02      	ldr	r3, [pc, #8]	; (b9b14 <_ZN9TimeClass5monthEx+0x10>)
   b9b0c:	6918      	ldr	r0, [r3, #16]
}
   b9b0e:	3001      	adds	r0, #1
   b9b10:	bd08      	pop	{r3, pc}
   b9b12:	bf00      	nop
   b9b14:	2003e69c 	.word	0x2003e69c

000b9b18 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b9b18:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b9b1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b9b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b9b24:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b9b26:	d411      	bmi.n	b9b4c <_ZN9TimeClass4zoneEf+0x34>
   b9b28:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b9b2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b9b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9b34:	dc0a      	bgt.n	b9b4c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b9b36:	eddf 7a06 	vldr	s15, [pc, #24]	; b9b50 <_ZN9TimeClass4zoneEf+0x38>
   b9b3a:	ee60 7a27 	vmul.f32	s15, s0, s15
   b9b3e:	ee17 0a90 	vmov	r0, s15
   b9b42:	f7fa ff0b 	bl	b495c <__aeabi_f2lz>
   b9b46:	4b03      	ldr	r3, [pc, #12]	; (b9b54 <_ZN9TimeClass4zoneEf+0x3c>)
   b9b48:	e9c3 0100 	strd	r0, r1, [r3]
}
   b9b4c:	bd08      	pop	{r3, pc}
   b9b4e:	bf00      	nop
   b9b50:	45610000 	.word	0x45610000
   b9b54:	2003e6c8 	.word	0x2003e6c8

000b9b58 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b9b58:	b530      	push	{r4, r5, lr}
   b9b5a:	b093      	sub	sp, #76	; 0x4c
   b9b5c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b9b60:	4b19      	ldr	r3, [pc, #100]	; (b9bc8 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b9b62:	4604      	mov	r4, r0
    t += time_zone_cache;
   b9b64:	e9d3 1000 	ldrd	r1, r0, [r3]
   b9b68:	9b01      	ldr	r3, [sp, #4]
   b9b6a:	1852      	adds	r2, r2, r1
   b9b6c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b9b70:	4816      	ldr	r0, [pc, #88]	; (b9bcc <_ZN9TimeClass7timeStrEx+0x74>)
   b9b72:	e9d0 1000 	ldrd	r1, r0, [r0]
   b9b76:	1852      	adds	r2, r2, r1
   b9b78:	eb43 0300 	adc.w	r3, r3, r0
   b9b7c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b9b80:	2224      	movs	r2, #36	; 0x24
   b9b82:	eb0d 0002 	add.w	r0, sp, r2
   b9b86:	2100      	movs	r1, #0
   b9b88:	f001 fd51 	bl	bb62e <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b9b8c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b9b8e:	a909      	add	r1, sp, #36	; 0x24
   b9b90:	4668      	mov	r0, sp
   b9b92:	f7fe fa83 	bl	b809c <localtime_r>
    char ascstr[26] = {};
   b9b96:	2216      	movs	r2, #22
   b9b98:	4629      	mov	r1, r5
   b9b9a:	a803      	add	r0, sp, #12
   b9b9c:	9502      	str	r5, [sp, #8]
   b9b9e:	f001 fd46 	bl	bb62e <memset>
    asctime_r(&calendar_time, ascstr);
   b9ba2:	a902      	add	r1, sp, #8
   b9ba4:	a809      	add	r0, sp, #36	; 0x24
   b9ba6:	f001 fcd3 	bl	bb550 <asctime_r>
    int len = strlen(ascstr);
   b9baa:	a802      	add	r0, sp, #8
   b9bac:	f7fa ff32 	bl	b4a14 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b9bb0:	ab12      	add	r3, sp, #72	; 0x48
   b9bb2:	4418      	add	r0, r3
    return String(ascstr);
   b9bb4:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b9bb6:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b9bba:	4620      	mov	r0, r4
   b9bbc:	f7fe fb79 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9bc0:	4620      	mov	r0, r4
   b9bc2:	b013      	add	sp, #76	; 0x4c
   b9bc4:	bd30      	pop	{r4, r5, pc}
   b9bc6:	bf00      	nop
   b9bc8:	2003e6c8 	.word	0x2003e6c8
   b9bcc:	2003e6c0 	.word	0x2003e6c0

000b9bd0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b9bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9bd4:	b0a4      	sub	sp, #144	; 0x90
   b9bd6:	4607      	mov	r7, r0
   b9bd8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9bda:	a814      	add	r0, sp, #80	; 0x50
{
   b9bdc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9bde:	223f      	movs	r2, #63	; 0x3f
{
   b9be0:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9be2:	f001 fda4 	bl	bb72e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9be6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9be8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9bea:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9bee:	f7fa ff11 	bl	b4a14 <strlen>
   b9bf2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b9bf4:	bb4c      	cbnz	r4, b9c4a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b9bf6:	4929      	ldr	r1, [pc, #164]	; (b9c9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b9bf8:	a803      	add	r0, sp, #12
   b9bfa:	f001 fd5e 	bl	bb6ba <strcpy>
   b9bfe:	ac14      	add	r4, sp, #80	; 0x50
{
   b9c00:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b9c02:	f105 39ff 	add.w	r9, r5, #4294967295
   b9c06:	45b1      	cmp	r9, r6
   b9c08:	d934      	bls.n	b9c74 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b9c0a:	7823      	ldrb	r3, [r4, #0]
   b9c0c:	2b25      	cmp	r3, #37	; 0x25
   b9c0e:	f106 0a01 	add.w	sl, r6, #1
   b9c12:	d117      	bne.n	b9c44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b9c14:	7863      	ldrb	r3, [r4, #1]
   b9c16:	2b7a      	cmp	r3, #122	; 0x7a
   b9c18:	d114      	bne.n	b9c44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b9c1a:	a803      	add	r0, sp, #12
   b9c1c:	f7fa fefa 	bl	b4a14 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9c20:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b9c22:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9c24:	1830      	adds	r0, r6, r0
   b9c26:	4418      	add	r0, r3
   b9c28:	eba9 0206 	sub.w	r2, r9, r6
   b9c2c:	1ca1      	adds	r1, r4, #2
   b9c2e:	f001 fcd6 	bl	bb5de <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b9c32:	462a      	mov	r2, r5
   b9c34:	a903      	add	r1, sp, #12
   b9c36:	4620      	mov	r0, r4
   b9c38:	f001 fcd1 	bl	bb5de <memcpy>
            len = strlen(format_str);
   b9c3c:	a814      	add	r0, sp, #80	; 0x50
   b9c3e:	f7fa fee9 	bl	b4a14 <strlen>
   b9c42:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b9c44:	3401      	adds	r4, #1
   b9c46:	4656      	mov	r6, sl
   b9c48:	e7db      	b.n	b9c02 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b9c4a:	233c      	movs	r3, #60	; 0x3c
   b9c4c:	fb94 f2f3 	sdiv	r2, r4, r3
   b9c50:	2a00      	cmp	r2, #0
   b9c52:	bfb8      	it	lt
   b9c54:	4252      	neglt	r2, r2
   b9c56:	fbb2 f1f3 	udiv	r1, r2, r3
   b9c5a:	fb03 2211 	mls	r2, r3, r1, r2
   b9c5e:	9200      	str	r2, [sp, #0]
   b9c60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b9c64:	4a0e      	ldr	r2, [pc, #56]	; (b9ca0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b9c66:	fb94 f3f3 	sdiv	r3, r4, r3
   b9c6a:	2110      	movs	r1, #16
   b9c6c:	a803      	add	r0, sp, #12
   b9c6e:	f7fe f9d5 	bl	b801c <snprintf>
   b9c72:	e7c4      	b.n	b9bfe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b9c74:	2100      	movs	r1, #0
   b9c76:	222e      	movs	r2, #46	; 0x2e
   b9c78:	a808      	add	r0, sp, #32
   b9c7a:	9107      	str	r1, [sp, #28]
   b9c7c:	f001 fcd7 	bl	bb62e <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b9c80:	4643      	mov	r3, r8
   b9c82:	aa14      	add	r2, sp, #80	; 0x50
   b9c84:	2132      	movs	r1, #50	; 0x32
   b9c86:	a807      	add	r0, sp, #28
   b9c88:	f7fe fa00 	bl	b808c <strftime>
    return String(buf);
   b9c8c:	a907      	add	r1, sp, #28
   b9c8e:	4638      	mov	r0, r7
   b9c90:	f7fe fb0f 	bl	b82b2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9c94:	4638      	mov	r0, r7
   b9c96:	b024      	add	sp, #144	; 0x90
   b9c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9c9c:	000be300 	.word	0x000be300
   b9ca0:	000be302 	.word	0x000be302

000b9ca4 <_ZN9TimeClass6formatExPKc>:
{
   b9ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9ca6:	b08d      	sub	sp, #52	; 0x34
   b9ca8:	e9cd 2300 	strd	r2, r3, [sp]
   b9cac:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b9cae:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b9cb0:	b915      	cbnz	r5, b9cb8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b9cb2:	4b19      	ldr	r3, [pc, #100]	; (b9d18 <_ZN9TimeClass6formatExPKc+0x74>)
   b9cb4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b9cb6:	b12d      	cbz	r5, b9cc4 <_ZN9TimeClass6formatExPKc+0x20>
   b9cb8:	4b18      	ldr	r3, [pc, #96]	; (b9d1c <_ZN9TimeClass6formatExPKc+0x78>)
   b9cba:	4628      	mov	r0, r5
   b9cbc:	6819      	ldr	r1, [r3, #0]
   b9cbe:	f7fa fe9f 	bl	b4a00 <strcmp>
   b9cc2:	b938      	cbnz	r0, b9cd4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b9cc4:	e9dd 2300 	ldrd	r2, r3, [sp]
   b9cc8:	4620      	mov	r0, r4
   b9cca:	f7ff ff45 	bl	b9b58 <_ZN9TimeClass7timeStrEx>
}
   b9cce:	4620      	mov	r0, r4
   b9cd0:	b00d      	add	sp, #52	; 0x34
   b9cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b9cd4:	4e12      	ldr	r6, [pc, #72]	; (b9d20 <_ZN9TimeClass6formatExPKc+0x7c>)
   b9cd6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b9cd8:	4f12      	ldr	r7, [pc, #72]	; (b9d24 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b9cda:	e9d6 3200 	ldrd	r3, r2, [r6]
   b9cde:	185b      	adds	r3, r3, r1
   b9ce0:	9901      	ldr	r1, [sp, #4]
   b9ce2:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b9ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
   b9cea:	181b      	adds	r3, r3, r0
   b9cec:	eb42 0201 	adc.w	r2, r2, r1
   b9cf0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b9cf4:	2100      	movs	r1, #0
   b9cf6:	2224      	movs	r2, #36	; 0x24
   b9cf8:	a803      	add	r0, sp, #12
   b9cfa:	f001 fc98 	bl	bb62e <memset>
    localtime_r(&t, &calendar_time);
   b9cfe:	a903      	add	r1, sp, #12
   b9d00:	4668      	mov	r0, sp
   b9d02:	f7fe f9cb 	bl	b809c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b9d06:	6832      	ldr	r2, [r6, #0]
   b9d08:	683b      	ldr	r3, [r7, #0]
   b9d0a:	a903      	add	r1, sp, #12
   b9d0c:	4413      	add	r3, r2
   b9d0e:	4620      	mov	r0, r4
   b9d10:	462a      	mov	r2, r5
   b9d12:	f7ff ff5d 	bl	b9bd0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b9d16:	e7da      	b.n	b9cce <_ZN9TimeClass6formatExPKc+0x2a>
   b9d18:	2003e698 	.word	0x2003e698
   b9d1c:	2003d17c 	.word	0x2003d17c
   b9d20:	2003e6c8 	.word	0x2003e6c8
   b9d24:	2003e6c0 	.word	0x2003e6c0

000b9d28 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b9d28:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b9d2a:	2000      	movs	r0, #0
   b9d2c:	f7fd fe38 	bl	b79a0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b9d30:	4604      	mov	r4, r0
   b9d32:	b9a0      	cbnz	r0, b9d5e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b9d34:	f7fe f85e 	bl	b7df4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b9d38:	2801      	cmp	r0, #1
   b9d3a:	d110      	bne.n	b9d5e <_ZN9TimeClass7isValidEv+0x36>
   b9d3c:	4620      	mov	r0, r4
   b9d3e:	f7fe f889 	bl	b7e54 <system_thread_get_state>
   b9d42:	b960      	cbnz	r0, b9d5e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b9d44:	f7ff fed0 	bl	b9ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b9d48:	b910      	cbnz	r0, b9d50 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b9d4a:	f7fe f8ff 	bl	b7f4c <spark_process>
        while (_while() && !_condition()) {
   b9d4e:	e7f9      	b.n	b9d44 <_ZN9TimeClass7isValidEv+0x1c>
   b9d50:	f7ff feca 	bl	b9ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b9d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b9d58:	2000      	movs	r0, #0
   b9d5a:	f7fd be21 	b.w	b79a0 <hal_rtc_time_is_valid>
}
   b9d5e:	4620      	mov	r0, r4
   b9d60:	bd10      	pop	{r4, pc}

000b9d62 <_ZN9TimeClass3nowEv>:
{
   b9d62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b9d64:	f7ff ffe0 	bl	b9d28 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b9d68:	2210      	movs	r2, #16
   b9d6a:	2100      	movs	r1, #0
   b9d6c:	4668      	mov	r0, sp
   b9d6e:	f001 fc5e 	bl	bb62e <memset>
    hal_rtc_get_time(&tv, nullptr);
   b9d72:	2100      	movs	r1, #0
   b9d74:	4668      	mov	r0, sp
   b9d76:	f7fd fe1b 	bl	b79b0 <hal_rtc_get_time>
}
   b9d7a:	9800      	ldr	r0, [sp, #0]
   b9d7c:	b005      	add	sp, #20
   b9d7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9d84 <_ZN9TimeClass4hourEv>:
{
   b9d84:	b508      	push	{r3, lr}
	return hour(now());
   b9d86:	f7ff ffec 	bl	b9d62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9d8a:	17c1      	asrs	r1, r0, #31
   b9d8c:	f7ff fe76 	bl	b9a7c <_ZL22Refresh_UnixTime_Cachex>
}
   b9d90:	4b01      	ldr	r3, [pc, #4]	; (b9d98 <_ZN9TimeClass4hourEv+0x14>)
   b9d92:	6898      	ldr	r0, [r3, #8]
   b9d94:	bd08      	pop	{r3, pc}
   b9d96:	bf00      	nop
   b9d98:	2003e69c 	.word	0x2003e69c

000b9d9c <_ZN9TimeClass6minuteEv>:
{
   b9d9c:	b508      	push	{r3, lr}
	return minute(now());
   b9d9e:	f7ff ffe0 	bl	b9d62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9da2:	17c1      	asrs	r1, r0, #31
   b9da4:	f7ff fe6a 	bl	b9a7c <_ZL22Refresh_UnixTime_Cachex>
}
   b9da8:	4b01      	ldr	r3, [pc, #4]	; (b9db0 <_ZN9TimeClass6minuteEv+0x14>)
   b9daa:	6858      	ldr	r0, [r3, #4]
   b9dac:	bd08      	pop	{r3, pc}
   b9dae:	bf00      	nop
   b9db0:	2003e69c 	.word	0x2003e69c

000b9db4 <_ZN9TimeClass6secondEv>:
{
   b9db4:	b508      	push	{r3, lr}
	return second(now());
   b9db6:	f7ff ffd4 	bl	b9d62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9dba:	17c1      	asrs	r1, r0, #31
   b9dbc:	f7ff fe5e 	bl	b9a7c <_ZL22Refresh_UnixTime_Cachex>
}
   b9dc0:	4b01      	ldr	r3, [pc, #4]	; (b9dc8 <_ZN9TimeClass6secondEv+0x14>)
   b9dc2:	6818      	ldr	r0, [r3, #0]
   b9dc4:	bd08      	pop	{r3, pc}
   b9dc6:	bf00      	nop
   b9dc8:	2003e69c 	.word	0x2003e69c

000b9dcc <_ZN9TimeClass3dayEv>:
{
   b9dcc:	b508      	push	{r3, lr}
	return day(now());
   b9dce:	f7ff ffc8 	bl	b9d62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9dd2:	17c1      	asrs	r1, r0, #31
   b9dd4:	f7ff fe52 	bl	b9a7c <_ZL22Refresh_UnixTime_Cachex>
}
   b9dd8:	4b01      	ldr	r3, [pc, #4]	; (b9de0 <_ZN9TimeClass3dayEv+0x14>)
   b9dda:	68d8      	ldr	r0, [r3, #12]
   b9ddc:	bd08      	pop	{r3, pc}
   b9dde:	bf00      	nop
   b9de0:	2003e69c 	.word	0x2003e69c

000b9de4 <_ZN9TimeClass5monthEv>:
{
   b9de4:	b508      	push	{r3, lr}
	return month(now());
   b9de6:	f7ff ffbc 	bl	b9d62 <_ZN9TimeClass3nowEv>
}
   b9dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b9dee:	17c1      	asrs	r1, r0, #31
   b9df0:	f7ff be88 	b.w	b9b04 <_ZN9TimeClass5monthEx>

000b9df4 <_ZN9TimeClass4yearEv>:
{
   b9df4:	b508      	push	{r3, lr}
	return year(now());
   b9df6:	f7ff ffb4 	bl	b9d62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9dfa:	17c1      	asrs	r1, r0, #31
   b9dfc:	f7ff fe3e 	bl	b9a7c <_ZL22Refresh_UnixTime_Cachex>
}
   b9e00:	4b01      	ldr	r3, [pc, #4]	; (b9e08 <_ZN9TimeClass4yearEv+0x14>)
   b9e02:	6958      	ldr	r0, [r3, #20]
   b9e04:	bd08      	pop	{r3, pc}
   b9e06:	bf00      	nop
   b9e08:	2003e69c 	.word	0x2003e69c

000b9e0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9e0c:	4b02      	ldr	r3, [pc, #8]	; (b9e18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9e0e:	681a      	ldr	r2, [r3, #0]
   b9e10:	4b02      	ldr	r3, [pc, #8]	; (b9e1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9e12:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9e14:	4770      	bx	lr
   b9e16:	bf00      	nop
   b9e18:	2003d17c 	.word	0x2003d17c
   b9e1c:	2003e698 	.word	0x2003e698

000b9e20 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9e20:	2100      	movs	r1, #0
   b9e22:	f7fd bff7 	b.w	b7e14 <system_delay_ms>
	...

000b9e28 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9e28:	b510      	push	{r4, lr}
   b9e2a:	4b04      	ldr	r3, [pc, #16]	; (b9e3c <_ZN9TCPClientD1Ev+0x14>)
   b9e2c:	6003      	str	r3, [r0, #0]
   b9e2e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b9e30:	6980      	ldr	r0, [r0, #24]
   b9e32:	b108      	cbz	r0, b9e38 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b9e34:	f7fe fc33 	bl	b869e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b9e38:	4620      	mov	r0, r4
   b9e3a:	bd10      	pop	{r4, pc}
   b9e3c:	000be420 	.word	0x000be420

000b9e40 <_ZN9TCPClientD0Ev>:
   b9e40:	b510      	push	{r4, lr}
   b9e42:	4604      	mov	r4, r0
   b9e44:	f7ff fff0 	bl	b9e28 <_ZN9TCPClientD1Ev>
   b9e48:	4620      	mov	r0, r4
   b9e4a:	211c      	movs	r1, #28
   b9e4c:	f7fa fe41 	bl	b4ad2 <_ZdlPvj>
   b9e50:	4620      	mov	r0, r4
   b9e52:	bd10      	pop	{r4, pc}

000b9e54 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9e54:	4b01      	ldr	r3, [pc, #4]	; (b9e5c <_GLOBAL__sub_I_RGB+0x8>)
   b9e56:	2200      	movs	r2, #0
   b9e58:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9e5a:	4770      	bx	lr
   b9e5c:	2003e6d8 	.word	0x2003e6d8

000b9e60 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9e60:	4b01      	ldr	r3, [pc, #4]	; (b9e68 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9e62:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9e64:	4770      	bx	lr
   b9e66:	bf00      	nop
   b9e68:	2003d180 	.word	0x2003d180

000b9e6c <serialEventRun>:
{
   b9e6c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9e6e:	4b0b      	ldr	r3, [pc, #44]	; (b9e9c <serialEventRun+0x30>)
   b9e70:	b143      	cbz	r3, b9e84 <serialEventRun+0x18>
   b9e72:	f000 fc19 	bl	ba6a8 <_Z16_fetch_usbserialv>
   b9e76:	6803      	ldr	r3, [r0, #0]
   b9e78:	691b      	ldr	r3, [r3, #16]
   b9e7a:	4798      	blx	r3
   b9e7c:	2800      	cmp	r0, #0
   b9e7e:	dd01      	ble.n	b9e84 <serialEventRun+0x18>
        serialEvent();
   b9e80:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9e84:	4b06      	ldr	r3, [pc, #24]	; (b9ea0 <serialEventRun+0x34>)
   b9e86:	b143      	cbz	r3, b9e9a <serialEventRun+0x2e>
   b9e88:	f001 f9ea 	bl	bb260 <_Z22__fetch_global_Serial1v>
   b9e8c:	6803      	ldr	r3, [r0, #0]
   b9e8e:	691b      	ldr	r3, [r3, #16]
   b9e90:	4798      	blx	r3
   b9e92:	2800      	cmp	r0, #0
   b9e94:	dd01      	ble.n	b9e9a <serialEventRun+0x2e>
        serialEvent1();
   b9e96:	f3af 8000 	nop.w
}
   b9e9a:	bd08      	pop	{r3, pc}
	...

000b9ea4 <_post_loop>:
{
   b9ea4:	b508      	push	{r3, lr}
	serialEventRun();
   b9ea6:	f7ff ffe1 	bl	b9e6c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9eaa:	f7fd fd71 	bl	b7990 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9eae:	4b01      	ldr	r3, [pc, #4]	; (b9eb4 <_post_loop+0x10>)
   b9eb0:	6018      	str	r0, [r3, #0]
}
   b9eb2:	bd08      	pop	{r3, pc}
   b9eb4:	2003e73c 	.word	0x2003e73c

000b9eb8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9eb8:	4805      	ldr	r0, [pc, #20]	; (b9ed0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9eba:	4a06      	ldr	r2, [pc, #24]	; (b9ed4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9ebc:	4906      	ldr	r1, [pc, #24]	; (b9ed8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9ebe:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9ec0:	1a12      	subs	r2, r2, r0
   b9ec2:	f001 fb8c 	bl	bb5de <memcpy>
    __backup_sram_signature = signature;
   b9ec6:	4b05      	ldr	r3, [pc, #20]	; (b9edc <_Z33system_initialize_user_backup_ramv+0x24>)
   b9ec8:	4a05      	ldr	r2, [pc, #20]	; (b9ee0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b9eca:	601a      	str	r2, [r3, #0]
}
   b9ecc:	bd08      	pop	{r3, pc}
   b9ece:	bf00      	nop
   b9ed0:	2003f400 	.word	0x2003f400
   b9ed4:	2003f404 	.word	0x2003f404
   b9ed8:	000bed6c 	.word	0x000bed6c
   b9edc:	2003f400 	.word	0x2003f400
   b9ee0:	9a271c1e 	.word	0x9a271c1e

000b9ee4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9ee4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9ee6:	2300      	movs	r3, #0
   b9ee8:	9300      	str	r3, [sp, #0]
   b9eea:	461a      	mov	r2, r3
   b9eec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9ef0:	f7fd ffc2 	bl	b7e78 <system_ctrl_set_result>
}
   b9ef4:	b003      	add	sp, #12
   b9ef6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9efc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9efc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9efe:	8843      	ldrh	r3, [r0, #2]
   b9f00:	2b0a      	cmp	r3, #10
   b9f02:	d008      	beq.n	b9f16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9f04:	2b50      	cmp	r3, #80	; 0x50
   b9f06:	d10b      	bne.n	b9f20 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9f08:	4b09      	ldr	r3, [pc, #36]	; (b9f30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9f0a:	681b      	ldr	r3, [r3, #0]
   b9f0c:	b14b      	cbz	r3, b9f22 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9f0e:	b003      	add	sp, #12
   b9f10:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9f14:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9f16:	f7ff ffe5 	bl	b9ee4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9f1a:	b003      	add	sp, #12
   b9f1c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9f20:	2300      	movs	r3, #0
   b9f22:	9300      	str	r3, [sp, #0]
   b9f24:	461a      	mov	r2, r3
   b9f26:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9f2a:	f7fd ffa5 	bl	b7e78 <system_ctrl_set_result>
}
   b9f2e:	e7f4      	b.n	b9f1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9f30:	2003e6ec 	.word	0x2003e6ec

000b9f34 <module_user_init_hook>:
{
   b9f34:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9f36:	4812      	ldr	r0, [pc, #72]	; (b9f80 <module_user_init_hook+0x4c>)
   b9f38:	2100      	movs	r1, #0
   b9f3a:	f7fe f89f 	bl	b807c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9f3e:	4b11      	ldr	r3, [pc, #68]	; (b9f84 <module_user_init_hook+0x50>)
   b9f40:	681a      	ldr	r2, [r3, #0]
   b9f42:	4b11      	ldr	r3, [pc, #68]	; (b9f88 <module_user_init_hook+0x54>)
   b9f44:	429a      	cmp	r2, r3
   b9f46:	4b11      	ldr	r3, [pc, #68]	; (b9f8c <module_user_init_hook+0x58>)
   b9f48:	bf0c      	ite	eq
   b9f4a:	2201      	moveq	r2, #1
   b9f4c:	2200      	movne	r2, #0
   b9f4e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9f50:	d001      	beq.n	b9f56 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9f52:	f7ff ffb1 	bl	b9eb8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9f56:	f7fd fd0b 	bl	b7970 <HAL_RNG_GetRandomNumber>
   b9f5a:	4604      	mov	r4, r0
    srand(seed);
   b9f5c:	f001 fb70 	bl	bb640 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9f60:	4b0b      	ldr	r3, [pc, #44]	; (b9f90 <module_user_init_hook+0x5c>)
   b9f62:	b113      	cbz	r3, b9f6a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9f64:	4620      	mov	r0, r4
   b9f66:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9f6a:	2100      	movs	r1, #0
   b9f6c:	4808      	ldr	r0, [pc, #32]	; (b9f90 <module_user_init_hook+0x5c>)
   b9f6e:	f7fe f81d 	bl	b7fac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9f76:	4807      	ldr	r0, [pc, #28]	; (b9f94 <module_user_init_hook+0x60>)
   b9f78:	2100      	movs	r1, #0
   b9f7a:	f7fd bf73 	b.w	b7e64 <system_ctrl_set_app_request_handler>
   b9f7e:	bf00      	nop
   b9f80:	000b9e61 	.word	0x000b9e61
   b9f84:	2003f400 	.word	0x2003f400
   b9f88:	9a271c1e 	.word	0x9a271c1e
   b9f8c:	2003e6e8 	.word	0x2003e6e8
   b9f90:	00000000 	.word	0x00000000
   b9f94:	000b9efd 	.word	0x000b9efd

000b9f98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9f98:	4770      	bx	lr

000b9f9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b9f9a:	2000      	movs	r0, #0
   b9f9c:	4770      	bx	lr

000b9f9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9f9e:	b510      	push	{r4, lr}
   b9fa0:	2110      	movs	r1, #16
   b9fa2:	4604      	mov	r4, r0
   b9fa4:	f7fa fd95 	bl	b4ad2 <_ZdlPvj>
   b9fa8:	4620      	mov	r0, r4
   b9faa:	bd10      	pop	{r4, pc}

000b9fac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b9fac:	b508      	push	{r3, lr}
      { delete this; }
   b9fae:	f7ff fff6 	bl	b9f9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b9fb2:	bd08      	pop	{r3, pc}

000b9fb4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b9fb4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b9fb6:	2200      	movs	r2, #0
   b9fb8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b9fbc:	6002      	str	r2, [r0, #0]
   b9fbe:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9fc0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b9fc2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9fc4:	680c      	ldr	r4, [r1, #0]
   b9fc6:	8085      	strh	r5, [r0, #4]
   b9fc8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9fca:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b9fcc:	bd30      	pop	{r4, r5, pc}

000b9fce <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b9fce:	b510      	push	{r4, lr}
   b9fd0:	4604      	mov	r4, r0
    free((void*)msg_);
   b9fd2:	6800      	ldr	r0, [r0, #0]
   b9fd4:	f7fd fffa 	bl	b7fcc <free>
}
   b9fd8:	4620      	mov	r0, r4
   b9fda:	bd10      	pop	{r4, pc}

000b9fdc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9fdc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b9fde:	68c4      	ldr	r4, [r0, #12]
   b9fe0:	b1f4      	cbz	r4, ba020 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b9fe2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b9fe4:	2b02      	cmp	r3, #2
   b9fe6:	d103      	bne.n	b9ff0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b9fe8:	f104 000c 	add.w	r0, r4, #12
   b9fec:	f7ff ffef 	bl	b9fce <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b9ff0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b9ff2:	b135      	cbz	r5, ba002 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b9ff4:	4628      	mov	r0, r5
   b9ff6:	f7fb fe9d 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b9ffa:	2110      	movs	r1, #16
   b9ffc:	4628      	mov	r0, r5
   b9ffe:	f7fa fd68 	bl	b4ad2 <_ZdlPvj>
   ba002:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   ba004:	b135      	cbz	r5, ba014 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   ba006:	4628      	mov	r0, r5
   ba008:	f7fb fe94 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   ba00c:	2110      	movs	r1, #16
   ba00e:	4628      	mov	r0, r5
   ba010:	f7fa fd5f 	bl	b4ad2 <_ZdlPvj>
   ba014:	4620      	mov	r0, r4
   ba016:	2114      	movs	r1, #20
   ba018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba01c:	f7fa bd59 	b.w	b4ad2 <_ZdlPvj>
   ba020:	bd38      	pop	{r3, r4, r5, pc}

000ba022 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba022:	680b      	ldr	r3, [r1, #0]
   ba024:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   ba026:	684b      	ldr	r3, [r1, #4]
   ba028:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   ba02a:	b113      	cbz	r3, ba032 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   ba02c:	685a      	ldr	r2, [r3, #4]
   ba02e:	3201      	adds	r2, #1
   ba030:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba032:	4770      	bx	lr

000ba034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   ba034:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba036:	4604      	mov	r4, r0
   ba038:	4668      	mov	r0, sp
   ba03a:	460d      	mov	r5, r1
   ba03c:	f7ff fff1 	bl	ba022 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba040:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba042:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba044:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   ba046:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   ba048:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba04a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   ba04c:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   ba04e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   ba050:	f7fc fad0 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   ba054:	b135      	cbz	r5, ba064 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   ba056:	1d28      	adds	r0, r5, #4
   ba058:	f7fc facc 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba05c:	2108      	movs	r1, #8
   ba05e:	4628      	mov	r0, r5
   ba060:	f7fa fd37 	bl	b4ad2 <_ZdlPvj>
        return p;
    }
   ba064:	4620      	mov	r0, r4
   ba066:	b003      	add	sp, #12
   ba068:	bd30      	pop	{r4, r5, pc}

000ba06a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   ba06a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba06c:	b510      	push	{r4, lr}
      if (_M_empty())
   ba06e:	b90a      	cbnz	r2, ba074 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   ba070:	f001 f958 	bl	bb324 <_ZSt25__throw_bad_function_callv>
    }
   ba074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba078:	68c3      	ldr	r3, [r0, #12]
   ba07a:	4718      	bx	r3

000ba07c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba07c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba07e:	6800      	ldr	r0, [r0, #0]
   ba080:	f100 0110 	add.w	r1, r0, #16
   ba084:	f7ff fff1 	bl	ba06a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   ba088:	bd08      	pop	{r3, pc}

000ba08a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   ba08a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba08c:	b510      	push	{r4, lr}
      if (_M_empty())
   ba08e:	b90a      	cbnz	r2, ba094 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   ba090:	f001 f948 	bl	bb324 <_ZSt25__throw_bad_function_callv>
    }
   ba094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba098:	68c3      	ldr	r3, [r0, #12]
   ba09a:	4718      	bx	r3

000ba09c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba09c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba09e:	6800      	ldr	r0, [r0, #0]
   ba0a0:	f100 0110 	add.w	r1, r0, #16
   ba0a4:	f7ff fff1 	bl	ba08a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   ba0a8:	bd08      	pop	{r3, pc}
	...

000ba0ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   ba0ac:	b538      	push	{r3, r4, r5, lr}
   ba0ae:	2300      	movs	r3, #0
   ba0b0:	4604      	mov	r4, r0
   ba0b2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba0b4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   ba0b6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba0b8:	f7fa fd07 	bl	b4aca <_Znwj>
   ba0bc:	b128      	cbz	r0, ba0ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   ba0be:	2301      	movs	r3, #1
   ba0c0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   ba0c4:	4b02      	ldr	r3, [pc, #8]	; (ba0d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   ba0c6:	6003      	str	r3, [r0, #0]
   ba0c8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba0ca:	6020      	str	r0, [r4, #0]
	}
   ba0cc:	4620      	mov	r0, r4
   ba0ce:	bd38      	pop	{r3, r4, r5, pc}
   ba0d0:	000be334 	.word	0x000be334

000ba0d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   ba0d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba0d6:	2300      	movs	r3, #0
   ba0d8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba0da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   ba0dc:	4604      	mov	r4, r0
   ba0de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   ba0e0:	b12b      	cbz	r3, ba0ee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba0e2:	2202      	movs	r2, #2
   ba0e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba0e6:	68eb      	ldr	r3, [r5, #12]
   ba0e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba0ea:	68ab      	ldr	r3, [r5, #8]
   ba0ec:	60a3      	str	r3, [r4, #8]
    }
   ba0ee:	4620      	mov	r0, r4
   ba0f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000ba0f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   ba0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba0f6:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   ba0f8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   ba0fa:	4668      	mov	r0, sp
   ba0fc:	f7ff ff5a 	bl	b9fb4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba100:	f04f 0302 	mov.w	r3, #2
   ba104:	e8d4 2f4f 	ldrexb	r2, [r4]
   ba108:	2a00      	cmp	r2, #0
   ba10a:	d103      	bne.n	ba114 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   ba10c:	e8c4 3f41 	strexb	r1, r3, [r4]
   ba110:	2900      	cmp	r1, #0
   ba112:	d1f7      	bne.n	ba104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   ba114:	d125      	bne.n	ba162 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   ba116:	f104 050c 	add.w	r5, r4, #12
   ba11a:	4669      	mov	r1, sp
   ba11c:	4628      	mov	r0, r5
   ba11e:	f7ff ff49 	bl	b9fb4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   ba122:	f3bf 8f5b 	dmb	ish
   ba126:	2301      	movs	r3, #1
   ba128:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba12a:	2000      	movs	r0, #0
   ba12c:	f104 0308 	add.w	r3, r4, #8
   ba130:	f3bf 8f5b 	dmb	ish
   ba134:	e853 6f00 	ldrex	r6, [r3]
   ba138:	e843 0200 	strex	r2, r0, [r3]
   ba13c:	2a00      	cmp	r2, #0
   ba13e:	d1f9      	bne.n	ba134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   ba140:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba144:	b16e      	cbz	r6, ba162 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   ba146:	f7fd fe75 	bl	b7e34 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba14a:	b178      	cbz	r0, ba16c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba14c:	4629      	mov	r1, r5
   ba14e:	4630      	mov	r0, r6
   ba150:	f7ff ff8b 	bl	ba06a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   ba154:	4630      	mov	r0, r6
   ba156:	f7fb fded 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba15a:	2110      	movs	r1, #16
   ba15c:	4630      	mov	r0, r6
   ba15e:	f7fa fcb8 	bl	b4ad2 <_ZdlPvj>
        p_->setError(std::move(error));
   ba162:	4668      	mov	r0, sp
   ba164:	f7ff ff33 	bl	b9fce <_ZN8particle5ErrorD1Ev>
    }
   ba168:	b009      	add	sp, #36	; 0x24
   ba16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba16c:	4631      	mov	r1, r6
   ba16e:	a802      	add	r0, sp, #8
   ba170:	f7ff ffb0 	bl	ba0d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   ba174:	68e0      	ldr	r0, [r4, #12]
   ba176:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba17a:	b108      	cbz	r0, ba180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   ba17c:	f001 faa6 	bl	bb6cc <strdup>
        type_(type) {
   ba180:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba182:	2010      	movs	r0, #16
   ba184:	f8ad 501c 	strh.w	r5, [sp, #28]
   ba188:	f7fa fc9f 	bl	b4aca <_Znwj>
   ba18c:	4605      	mov	r5, r0
   ba18e:	b1e8      	cbz	r0, ba1cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   ba190:	2700      	movs	r7, #0
   ba192:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba194:	2018      	movs	r0, #24
   ba196:	f7fa fc98 	bl	b4aca <_Znwj>
   ba19a:	4604      	mov	r4, r0
   ba19c:	b188      	cbz	r0, ba1c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   ba19e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   ba1a0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba1a2:	a802      	add	r0, sp, #8
   ba1a4:	f7ff f908 	bl	b93b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1a8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba1aa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba1ac:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1ae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba1b0:	9204      	str	r2, [sp, #16]
   ba1b2:	a906      	add	r1, sp, #24
   ba1b4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba1b6:	60e3      	str	r3, [r4, #12]
   ba1b8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   ba1bc:	9205      	str	r2, [sp, #20]
   ba1be:	f7ff fef9 	bl	b9fb4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   ba1c2:	4b08      	ldr	r3, [pc, #32]	; (ba1e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   ba1c4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba1c6:	4b08      	ldr	r3, [pc, #32]	; (ba1e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba1c8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba1ca:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   ba1cc:	a806      	add	r0, sp, #24
   ba1ce:	f7ff fefe 	bl	b9fce <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   ba1d2:	a802      	add	r0, sp, #8
   ba1d4:	f7fb fdae 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba1d8:	2200      	movs	r2, #0
   ba1da:	4629      	mov	r1, r5
   ba1dc:	4803      	ldr	r0, [pc, #12]	; (ba1ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   ba1de:	f7fd fe31 	bl	b7e44 <application_thread_invoke>
   ba1e2:	e7b7      	b.n	ba154 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   ba1e4:	000ba07d 	.word	0x000ba07d
   ba1e8:	000ba301 	.word	0x000ba301
   ba1ec:	000ba7f1 	.word	0x000ba7f1

000ba1f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   ba1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba1f4:	b08b      	sub	sp, #44	; 0x2c
   ba1f6:	4605      	mov	r5, r0
   ba1f8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   ba1fc:	460f      	mov	r7, r1
   ba1fe:	4690      	mov	r8, r2
   ba200:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba202:	f7fd feab 	bl	b7f5c <spark_cloud_flag_connected>
   ba206:	ae07      	add	r6, sp, #28
    if (!connected()) {
   ba208:	4683      	mov	fp, r0
   ba20a:	bb38      	cbnz	r0, ba25c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   ba20c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   ba210:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba212:	a905      	add	r1, sp, #20
   ba214:	4630      	mov	r0, r6
   ba216:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba21a:	f7ff fecb 	bl	b9fb4 <_ZN8particle5ErrorC1EOS0_>
   ba21e:	2014      	movs	r0, #20
   ba220:	f7fa fc53 	bl	b4aca <_Znwj>
   ba224:	4604      	mov	r4, r0
   ba226:	b148      	cbz	r0, ba23c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   ba228:	2302      	movs	r3, #2
   ba22a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba22c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba22e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba232:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   ba234:	4631      	mov	r1, r6
   ba236:	300c      	adds	r0, #12
   ba238:	f7ff febc 	bl	b9fb4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba23c:	4628      	mov	r0, r5
	: __shared_count(__p)
   ba23e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba240:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   ba244:	f7ff ff32 	bl	ba0ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba248:	4630      	mov	r0, r6
   ba24a:	f7ff fec0 	bl	b9fce <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   ba24e:	a805      	add	r0, sp, #20
   ba250:	f7ff febd 	bl	b9fce <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   ba254:	4628      	mov	r0, r5
   ba256:	b00b      	add	sp, #44	; 0x2c
   ba258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   ba25c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   ba25e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   ba260:	2014      	movs	r0, #20
   ba262:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   ba266:	9307      	str	r3, [sp, #28]
   ba268:	f7fa fc2f 	bl	b4aca <_Znwj>
   ba26c:	4601      	mov	r1, r0
   ba26e:	b118      	cbz	r0, ba278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba270:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba274:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba276:	7044      	strb	r4, [r0, #1]
   ba278:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba27a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   ba27c:	f7ff ff16 	bl	ba0ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   ba280:	4b1e      	ldr	r3, [pc, #120]	; (ba2fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   ba282:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   ba284:	2008      	movs	r0, #8
   ba286:	f7fa fc20 	bl	b4aca <_Znwj>
   ba28a:	4604      	mov	r4, r0
   ba28c:	b110      	cbz	r0, ba294 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   ba28e:	a903      	add	r1, sp, #12
   ba290:	f7ff fec7 	bl	ba022 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba294:	9600      	str	r6, [sp, #0]
   ba296:	fa5f f38a 	uxtb.w	r3, sl
   ba29a:	464a      	mov	r2, r9
   ba29c:	4641      	mov	r1, r8
   ba29e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   ba2a0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba2a2:	f7fd fe63 	bl	b7f6c <spark_send_event>
   ba2a6:	b9b8      	cbnz	r0, ba2d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   ba2a8:	9b03      	ldr	r3, [sp, #12]
   ba2aa:	785b      	ldrb	r3, [r3, #1]
   ba2ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   ba2b0:	b993      	cbnz	r3, ba2d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   ba2b2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   ba2b6:	a905      	add	r1, sp, #20
   ba2b8:	a803      	add	r0, sp, #12
   ba2ba:	9205      	str	r2, [sp, #20]
   ba2bc:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba2c0:	f7ff ff18 	bl	ba0f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba2c4:	a805      	add	r0, sp, #20
   ba2c6:	f7ff fe82 	bl	b9fce <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   ba2ca:	a805      	add	r0, sp, #20
   ba2cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   ba2ce:	f7ff feb1 	bl	ba034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   ba2d2:	a806      	add	r0, sp, #24
   ba2d4:	f7fc f98e 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba2d8:	a903      	add	r1, sp, #12
   ba2da:	a805      	add	r0, sp, #20
   ba2dc:	f7ff fea1 	bl	ba022 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba2e0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba2e2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba2e4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   ba2e6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   ba2e8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba2ea:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   ba2ec:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   ba2ee:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   ba2f0:	f7fc f980 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba2f4:	a804      	add	r0, sp, #16
   ba2f6:	f7fc f97d 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   ba2fa:	e7ab      	b.n	ba254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   ba2fc:	000ba37d 	.word	0x000ba37d

000ba300 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   ba300:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba304:	4605      	mov	r5, r0
	switch (__op)
   ba306:	d103      	bne.n	ba310 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba308:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba30a:	6003      	str	r3, [r0, #0]
      }
   ba30c:	2000      	movs	r0, #0
   ba30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   ba310:	2a02      	cmp	r2, #2
   ba312:	d010      	beq.n	ba336 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   ba314:	2a03      	cmp	r2, #3
   ba316:	d1f9      	bne.n	ba30c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba318:	6804      	ldr	r4, [r0, #0]
   ba31a:	2c00      	cmp	r4, #0
   ba31c:	d0f6      	beq.n	ba30c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   ba31e:	f104 0010 	add.w	r0, r4, #16
   ba322:	f7ff fe54 	bl	b9fce <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   ba326:	4620      	mov	r0, r4
   ba328:	f7fb fd04 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba32c:	2118      	movs	r1, #24
   ba32e:	4620      	mov	r0, r4
   ba330:	f7fa fbcf 	bl	b4ad2 <_ZdlPvj>
   ba334:	e7ea      	b.n	ba30c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba336:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   ba338:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba33a:	f7fa fbc6 	bl	b4aca <_Znwj>
   ba33e:	4604      	mov	r4, r0
   ba340:	b150      	cbz	r0, ba358 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   ba342:	4631      	mov	r1, r6
   ba344:	f7ff fec6 	bl	ba0d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   ba348:	6930      	ldr	r0, [r6, #16]
   ba34a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba34e:	b108      	cbz	r0, ba354 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   ba350:	f001 f9bc 	bl	bb6cc <strdup>
        type_(type) {
   ba354:	6120      	str	r0, [r4, #16]
   ba356:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   ba358:	602c      	str	r4, [r5, #0]
	}
   ba35a:	e7d7      	b.n	ba30c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000ba35c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   ba35c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba35e:	2300      	movs	r3, #0
   ba360:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba362:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   ba364:	4604      	mov	r4, r0
   ba366:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   ba368:	b12b      	cbz	r3, ba376 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba36a:	2202      	movs	r2, #2
   ba36c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba36e:	68eb      	ldr	r3, [r5, #12]
   ba370:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba372:	68ab      	ldr	r3, [r5, #8]
   ba374:	60a3      	str	r3, [r4, #8]
    }
   ba376:	4620      	mov	r0, r4
   ba378:	bd38      	pop	{r3, r4, r5, pc}
	...

000ba37c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   ba37c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba37e:	b089      	sub	sp, #36	; 0x24
   ba380:	4604      	mov	r4, r0
   ba382:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   ba384:	a801      	add	r0, sp, #4
   ba386:	4611      	mov	r1, r2
   ba388:	f7ff fe54 	bl	ba034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   ba38c:	b1a4      	cbz	r4, ba3b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   ba38e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba390:	b11d      	cbz	r5, ba39a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   ba392:	4628      	mov	r0, r5
   ba394:	f001 f99a 	bl	bb6cc <strdup>
   ba398:	4605      	mov	r5, r0
   ba39a:	a801      	add	r0, sp, #4
   ba39c:	a903      	add	r1, sp, #12
        type_(type) {
   ba39e:	9503      	str	r5, [sp, #12]
   ba3a0:	f8ad 4010 	strh.w	r4, [sp, #16]
   ba3a4:	f7ff fea6 	bl	ba0f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba3a8:	a803      	add	r0, sp, #12
   ba3aa:	f7ff fe10 	bl	b9fce <_ZN8particle5ErrorD1Ev>
   ba3ae:	a802      	add	r0, sp, #8
   ba3b0:	f7fc f920 	bl	b65f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba3b4:	b009      	add	sp, #36	; 0x24
   ba3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   ba3b8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba3ba:	2301      	movs	r3, #1
   ba3bc:	e8d5 2f4f 	ldrexb	r2, [r5]
   ba3c0:	2a00      	cmp	r2, #0
   ba3c2:	d103      	bne.n	ba3cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   ba3c4:	e8c5 3f41 	strexb	r1, r3, [r5]
   ba3c8:	2900      	cmp	r1, #0
   ba3ca:	d1f7      	bne.n	ba3bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   ba3cc:	d1ef      	bne.n	ba3ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   ba3ce:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   ba3d0:	f3bf 8f5b 	dmb	ish
   ba3d4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba3d6:	1d2b      	adds	r3, r5, #4
   ba3d8:	f3bf 8f5b 	dmb	ish
   ba3dc:	e853 6f00 	ldrex	r6, [r3]
   ba3e0:	e843 4200 	strex	r2, r4, [r3]
   ba3e4:	2a00      	cmp	r2, #0
   ba3e6:	d1f9      	bne.n	ba3dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   ba3e8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba3ec:	2e00      	cmp	r6, #0
   ba3ee:	d0de      	beq.n	ba3ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   ba3f0:	4620      	mov	r0, r4
   ba3f2:	f7fd fd1f 	bl	b7e34 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba3f6:	4607      	mov	r7, r0
   ba3f8:	b160      	cbz	r0, ba414 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba3fa:	f105 010c 	add.w	r1, r5, #12
   ba3fe:	4630      	mov	r0, r6
   ba400:	f7ff fe43 	bl	ba08a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   ba404:	4630      	mov	r0, r6
   ba406:	f7fb fc95 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba40a:	2110      	movs	r1, #16
   ba40c:	4630      	mov	r0, r6
   ba40e:	f7fa fb60 	bl	b4ad2 <_ZdlPvj>
   ba412:	e7cc      	b.n	ba3ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba414:	4631      	mov	r1, r6
   ba416:	a803      	add	r0, sp, #12
   ba418:	f7ff ffa0 	bl	ba35c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba41c:	7b2b      	ldrb	r3, [r5, #12]
   ba41e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba422:	2010      	movs	r0, #16
   ba424:	f7fa fb51 	bl	b4aca <_Znwj>
   ba428:	4605      	mov	r5, r0
   ba42a:	b1d0      	cbz	r0, ba462 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   ba42c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba42e:	2014      	movs	r0, #20
   ba430:	f7fa fb4b 	bl	b4aca <_Znwj>
   ba434:	4604      	mov	r4, r0
   ba436:	b178      	cbz	r0, ba458 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   ba438:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba43a:	4601      	mov	r1, r0
   ba43c:	a803      	add	r0, sp, #12
   ba43e:	f7fe ffbb 	bl	b93b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba442:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba444:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba446:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba448:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   ba44a:	9205      	str	r2, [sp, #20]
   ba44c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba44e:	60e3      	str	r3, [r4, #12]
   ba450:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   ba454:	9206      	str	r2, [sp, #24]
   ba456:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba458:	4b06      	ldr	r3, [pc, #24]	; (ba474 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   ba45a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba45c:	4b06      	ldr	r3, [pc, #24]	; (ba478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba45e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba460:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   ba462:	a803      	add	r0, sp, #12
   ba464:	f7fb fc66 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba468:	2200      	movs	r2, #0
   ba46a:	4629      	mov	r1, r5
   ba46c:	4803      	ldr	r0, [pc, #12]	; (ba47c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   ba46e:	f7fd fce9 	bl	b7e44 <application_thread_invoke>
   ba472:	e7c7      	b.n	ba404 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   ba474:	000ba09d 	.word	0x000ba09d
   ba478:	000ba481 	.word	0x000ba481
   ba47c:	000ba7f1 	.word	0x000ba7f1

000ba480 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   ba480:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba482:	b570      	push	{r4, r5, r6, lr}
   ba484:	4604      	mov	r4, r0
	switch (__op)
   ba486:	d103      	bne.n	ba490 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba488:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba48a:	6003      	str	r3, [r0, #0]
      }
   ba48c:	2000      	movs	r0, #0
   ba48e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   ba490:	2a02      	cmp	r2, #2
   ba492:	d00c      	beq.n	ba4ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   ba494:	2a03      	cmp	r2, #3
   ba496:	d1f9      	bne.n	ba48c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba498:	6804      	ldr	r4, [r0, #0]
   ba49a:	2c00      	cmp	r4, #0
   ba49c:	d0f6      	beq.n	ba48c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   ba49e:	4620      	mov	r0, r4
   ba4a0:	f7fb fc48 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba4a4:	2114      	movs	r1, #20
   ba4a6:	4620      	mov	r0, r4
   ba4a8:	f7fa fb13 	bl	b4ad2 <_ZdlPvj>
   ba4ac:	e7ee      	b.n	ba48c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba4ae:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   ba4b0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba4b2:	f7fa fb0a 	bl	b4aca <_Znwj>
   ba4b6:	4605      	mov	r5, r0
   ba4b8:	b120      	cbz	r0, ba4c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   ba4ba:	4631      	mov	r1, r6
   ba4bc:	f7ff ff4e 	bl	ba35c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   ba4c0:	7c33      	ldrb	r3, [r6, #16]
   ba4c2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   ba4c4:	6025      	str	r5, [r4, #0]
	}
   ba4c6:	e7e1      	b.n	ba48c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000ba4c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba4c8:	4770      	bx	lr

000ba4ca <_ZN9IPAddressD0Ev>:
   ba4ca:	b510      	push	{r4, lr}
   ba4cc:	2118      	movs	r1, #24
   ba4ce:	4604      	mov	r4, r0
   ba4d0:	f7fa faff 	bl	b4ad2 <_ZdlPvj>
   ba4d4:	4620      	mov	r0, r4
   ba4d6:	bd10      	pop	{r4, pc}

000ba4d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba4da:	7d03      	ldrb	r3, [r0, #20]
   ba4dc:	2b06      	cmp	r3, #6
{
   ba4de:	b08d      	sub	sp, #52	; 0x34
   ba4e0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba4e2:	f100 0704 	add.w	r7, r0, #4
   ba4e6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba4ea:	d012      	beq.n	ba512 <_ZNK9IPAddress7printToER5Print+0x3a>
   ba4ec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba4f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba4f4:	220a      	movs	r2, #10
   ba4f6:	4630      	mov	r0, r6
   ba4f8:	f7ff fa69 	bl	b99ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba4fc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba4fe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba500:	d019      	beq.n	ba536 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba502:	2c00      	cmp	r4, #0
   ba504:	d0f4      	beq.n	ba4f0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba506:	212e      	movs	r1, #46	; 0x2e
   ba508:	4630      	mov	r0, r6
   ba50a:	f7ff fa37 	bl	b997c <_ZN5Print5printEc>
   ba50e:	4404      	add	r4, r0
   ba510:	e7ee      	b.n	ba4f0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba512:	232f      	movs	r3, #47	; 0x2f
   ba514:	466a      	mov	r2, sp
   ba516:	4639      	mov	r1, r7
   ba518:	200a      	movs	r0, #10
		buf[0] = 0;
   ba51a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba51e:	f7fd fb51 	bl	b7bc4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba522:	4668      	mov	r0, sp
   ba524:	f7fa fa76 	bl	b4a14 <strlen>
   ba528:	6833      	ldr	r3, [r6, #0]
   ba52a:	4602      	mov	r2, r0
   ba52c:	68db      	ldr	r3, [r3, #12]
   ba52e:	4669      	mov	r1, sp
   ba530:	4630      	mov	r0, r6
   ba532:	4798      	blx	r3
   ba534:	4604      	mov	r4, r0
    }
    return n;
}
   ba536:	4620      	mov	r0, r4
   ba538:	b00d      	add	sp, #52	; 0x34
   ba53a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba53c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba53c:	b510      	push	{r4, lr}
   ba53e:	4b05      	ldr	r3, [pc, #20]	; (ba554 <_ZN9IPAddressC1Ev+0x18>)
   ba540:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba542:	2211      	movs	r2, #17
   ba544:	f840 3b04 	str.w	r3, [r0], #4
   ba548:	2100      	movs	r1, #0
   ba54a:	f001 f870 	bl	bb62e <memset>
}
   ba54e:	4620      	mov	r0, r4
   ba550:	bd10      	pop	{r4, pc}
   ba552:	bf00      	nop
   ba554:	000be350 	.word	0x000be350

000ba558 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba558:	4603      	mov	r3, r0
   ba55a:	4a07      	ldr	r2, [pc, #28]	; (ba578 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba55c:	b510      	push	{r4, lr}
   ba55e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba562:	f101 0210 	add.w	r2, r1, #16
   ba566:	f851 4b04 	ldr.w	r4, [r1], #4
   ba56a:	f843 4b04 	str.w	r4, [r3], #4
   ba56e:	4291      	cmp	r1, r2
   ba570:	d1f9      	bne.n	ba566 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba572:	780a      	ldrb	r2, [r1, #0]
   ba574:	701a      	strb	r2, [r3, #0]
}
   ba576:	bd10      	pop	{r4, pc}
   ba578:	000be350 	.word	0x000be350

000ba57c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   ba57c:	4a02      	ldr	r2, [pc, #8]	; (ba588 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   ba57e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   ba582:	2204      	movs	r2, #4
   ba584:	7502      	strb	r2, [r0, #20]
}
   ba586:	4770      	bx	lr
   ba588:	000be350 	.word	0x000be350

000ba58c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   ba58c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   ba58e:	2b04      	cmp	r3, #4
   ba590:	d104      	bne.n	ba59c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   ba592:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba594:	3800      	subs	r0, #0
   ba596:	bf18      	it	ne
   ba598:	2001      	movne	r0, #1
   ba59a:	4770      	bx	lr
    } else if (version() == 6) {
   ba59c:	2b06      	cmp	r3, #6
   ba59e:	d107      	bne.n	ba5b0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba5a0:	6843      	ldr	r3, [r0, #4]
   ba5a2:	b93b      	cbnz	r3, ba5b4 <_ZNK9IPAddresscvbEv+0x28>
   ba5a4:	6883      	ldr	r3, [r0, #8]
   ba5a6:	b92b      	cbnz	r3, ba5b4 <_ZNK9IPAddresscvbEv+0x28>
   ba5a8:	68c3      	ldr	r3, [r0, #12]
   ba5aa:	b91b      	cbnz	r3, ba5b4 <_ZNK9IPAddresscvbEv+0x28>
   ba5ac:	6900      	ldr	r0, [r0, #16]
   ba5ae:	e7f1      	b.n	ba594 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   ba5b0:	2000      	movs	r0, #0
   ba5b2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba5b4:	2001      	movs	r0, #1
}
   ba5b6:	4770      	bx	lr

000ba5b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba5b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba5ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba5be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba5c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba5c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba5ca:	2304      	movs	r3, #4
   ba5cc:	6041      	str	r1, [r0, #4]
   ba5ce:	7503      	strb	r3, [r0, #20]
}
   ba5d0:	bd10      	pop	{r4, pc}
	...

000ba5d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba5d4:	b507      	push	{r0, r1, r2, lr}
   ba5d6:	4b06      	ldr	r3, [pc, #24]	; (ba5f0 <_ZN9IPAddressC1EPKh+0x1c>)
   ba5d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba5da:	78cb      	ldrb	r3, [r1, #3]
   ba5dc:	9300      	str	r3, [sp, #0]
   ba5de:	788b      	ldrb	r3, [r1, #2]
   ba5e0:	784a      	ldrb	r2, [r1, #1]
   ba5e2:	7809      	ldrb	r1, [r1, #0]
   ba5e4:	f7ff ffe8 	bl	ba5b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba5e8:	b003      	add	sp, #12
   ba5ea:	f85d fb04 	ldr.w	pc, [sp], #4
   ba5ee:	bf00      	nop
   ba5f0:	000be350 	.word	0x000be350

000ba5f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba5f4:	7441      	strb	r1, [r0, #17]
}
   ba5f6:	4770      	bx	lr

000ba5f8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba5f8:	4770      	bx	lr

000ba5fa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba5fa:	4770      	bx	lr

000ba5fc <_ZN9USBSerial4readEv>:
{
   ba5fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba5fe:	2100      	movs	r1, #0
   ba600:	7c00      	ldrb	r0, [r0, #16]
   ba602:	f7fd fbc7 	bl	b7d94 <HAL_USB_USART_Receive_Data>
}
   ba606:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba60a:	bd08      	pop	{r3, pc}

000ba60c <_ZN9USBSerial4peekEv>:
{
   ba60c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba60e:	2101      	movs	r1, #1
   ba610:	7c00      	ldrb	r0, [r0, #16]
   ba612:	f7fd fbbf 	bl	b7d94 <HAL_USB_USART_Receive_Data>
}
   ba616:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba61a:	bd08      	pop	{r3, pc}

000ba61c <_ZN9USBSerial17availableForWriteEv>:
{
   ba61c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba61e:	7c00      	ldrb	r0, [r0, #16]
   ba620:	f7fd fbb0 	bl	b7d84 <HAL_USB_USART_Available_Data_For_Write>
}
   ba624:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba628:	bd08      	pop	{r3, pc}

000ba62a <_ZN9USBSerial9availableEv>:
{
   ba62a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba62c:	7c00      	ldrb	r0, [r0, #16]
   ba62e:	f7fd fba1 	bl	b7d74 <HAL_USB_USART_Available_Data>
}
   ba632:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba636:	bd08      	pop	{r3, pc}

000ba638 <_ZN9USBSerial5writeEh>:
{
   ba638:	b513      	push	{r0, r1, r4, lr}
   ba63a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba63c:	7c00      	ldrb	r0, [r0, #16]
{
   ba63e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba640:	f7fd fba0 	bl	b7d84 <HAL_USB_USART_Available_Data_For_Write>
   ba644:	2800      	cmp	r0, #0
   ba646:	9901      	ldr	r1, [sp, #4]
   ba648:	dc01      	bgt.n	ba64e <_ZN9USBSerial5writeEh+0x16>
   ba64a:	7c60      	ldrb	r0, [r4, #17]
   ba64c:	b120      	cbz	r0, ba658 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba64e:	7c20      	ldrb	r0, [r4, #16]
   ba650:	f7fd fba8 	bl	b7da4 <HAL_USB_USART_Send_Data>
   ba654:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba658:	b002      	add	sp, #8
   ba65a:	bd10      	pop	{r4, pc}

000ba65c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba65c:	7c00      	ldrb	r0, [r0, #16]
   ba65e:	f7fd bba9 	b.w	b7db4 <HAL_USB_USART_Flush_Data>

000ba662 <_ZN9USBSerialD0Ev>:
   ba662:	b510      	push	{r4, lr}
   ba664:	2114      	movs	r1, #20
   ba666:	4604      	mov	r4, r0
   ba668:	f7fa fa33 	bl	b4ad2 <_ZdlPvj>
   ba66c:	4620      	mov	r0, r4
   ba66e:	bd10      	pop	{r4, pc}

000ba670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba670:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba676:	4604      	mov	r4, r0
   ba678:	4608      	mov	r0, r1
   ba67a:	2100      	movs	r1, #0
   ba67c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba680:	4b04      	ldr	r3, [pc, #16]	; (ba694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba682:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba684:	2301      	movs	r3, #1
  _serial = serial;
   ba686:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba688:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba68a:	4611      	mov	r1, r2
   ba68c:	f7fd fb6a 	bl	b7d64 <HAL_USB_USART_Init>
}
   ba690:	4620      	mov	r0, r4
   ba692:	bd10      	pop	{r4, pc}
   ba694:	000be364 	.word	0x000be364

000ba698 <_Z19acquireSerialBufferv>:
{
   ba698:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba69a:	2214      	movs	r2, #20
{
   ba69c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba69e:	2100      	movs	r1, #0
   ba6a0:	f000 ffc5 	bl	bb62e <memset>
}
   ba6a4:	4620      	mov	r0, r4
   ba6a6:	bd10      	pop	{r4, pc}

000ba6a8 <_Z16_fetch_usbserialv>:
{
   ba6a8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba6aa:	4c0f      	ldr	r4, [pc, #60]	; (ba6e8 <_Z16_fetch_usbserialv+0x40>)
{
   ba6ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba6ae:	a803      	add	r0, sp, #12
   ba6b0:	f7ff fff2 	bl	ba698 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba6b4:	7821      	ldrb	r1, [r4, #0]
   ba6b6:	f3bf 8f5b 	dmb	ish
   ba6ba:	f011 0101 	ands.w	r1, r1, #1
   ba6be:	d10f      	bne.n	ba6e0 <_Z16_fetch_usbserialv+0x38>
   ba6c0:	4620      	mov	r0, r4
   ba6c2:	9101      	str	r1, [sp, #4]
   ba6c4:	f7fa fa07 	bl	b4ad6 <__cxa_guard_acquire>
   ba6c8:	9901      	ldr	r1, [sp, #4]
   ba6ca:	b148      	cbz	r0, ba6e0 <_Z16_fetch_usbserialv+0x38>
   ba6cc:	aa03      	add	r2, sp, #12
   ba6ce:	4807      	ldr	r0, [pc, #28]	; (ba6ec <_Z16_fetch_usbserialv+0x44>)
   ba6d0:	f7ff ffce 	bl	ba670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba6d4:	4620      	mov	r0, r4
   ba6d6:	f7fa fa03 	bl	b4ae0 <__cxa_guard_release>
   ba6da:	4805      	ldr	r0, [pc, #20]	; (ba6f0 <_Z16_fetch_usbserialv+0x48>)
   ba6dc:	f000 ff5e 	bl	bb59c <atexit>
	return _usbserial;
}
   ba6e0:	4802      	ldr	r0, [pc, #8]	; (ba6ec <_Z16_fetch_usbserialv+0x44>)
   ba6e2:	b008      	add	sp, #32
   ba6e4:	bd10      	pop	{r4, pc}
   ba6e6:	bf00      	nop
   ba6e8:	2003e6f0 	.word	0x2003e6f0
   ba6ec:	2003e6f4 	.word	0x2003e6f4
   ba6f0:	000ba5f9 	.word	0x000ba5f9

000ba6f4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   ba6f4:	4700      	bx	r0
	...

000ba6f8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   ba6f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   ba6fc:	2400      	movs	r4, #0
{
   ba6fe:	461d      	mov	r5, r3
   ba700:	460f      	mov	r7, r1
   ba702:	4690      	mov	r8, r2
   ba704:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   ba706:	f7fd f923 	bl	b7950 <hal_interrupt_detach>
  if (priority >= 0) {
   ba70a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   ba70c:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   ba710:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   ba714:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   ba718:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   ba71c:	bfa2      	ittt	ge
   ba71e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   ba722:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   ba726:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   ba728:	4907      	ldr	r1, [pc, #28]	; (ba748 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   ba72a:	9400      	str	r4, [sp, #0]
   ba72c:	4643      	mov	r3, r8
   ba72e:	463a      	mov	r2, r7
   ba730:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   ba732:	bfa8      	it	ge
   ba734:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   ba738:	f7fd f902 	bl	b7940 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   ba73c:	fab0 f080 	clz	r0, r0
   ba740:	0940      	lsrs	r0, r0, #5
   ba742:	b004      	add	sp, #16
   ba744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba748:	000ba6f5 	.word	0x000ba6f5

000ba74c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba74c:	4770      	bx	lr

000ba74e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba74e:	7441      	strb	r1, [r0, #17]
}
   ba750:	4770      	bx	lr

000ba752 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba752:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba754:	7c00      	ldrb	r0, [r0, #16]
   ba756:	f7fd fa7d 	bl	b7c54 <hal_usart_available_data_for_write>
}
   ba75a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba75e:	bd08      	pop	{r3, pc}

000ba760 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba760:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba762:	7c00      	ldrb	r0, [r0, #16]
   ba764:	f7fd fa4e 	bl	b7c04 <hal_usart_available>
}
   ba768:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba76c:	bd08      	pop	{r3, pc}

000ba76e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba76e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba770:	7c00      	ldrb	r0, [r0, #16]
   ba772:	f7fd fa57 	bl	b7c24 <hal_usart_peek>
}
   ba776:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba77a:	bd08      	pop	{r3, pc}

000ba77c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba77c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba77e:	7c00      	ldrb	r0, [r0, #16]
   ba780:	f7fd fa48 	bl	b7c14 <hal_usart_read>
}
   ba784:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba788:	bd08      	pop	{r3, pc}

000ba78a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba78a:	7c00      	ldrb	r0, [r0, #16]
   ba78c:	f7fd ba52 	b.w	b7c34 <hal_usart_flush>

000ba790 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba790:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba792:	7c45      	ldrb	r5, [r0, #17]
{
   ba794:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba796:	b12d      	cbz	r5, ba7a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba798:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba79a:	b003      	add	sp, #12
   ba79c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba7a0:	f7fd ba28 	b.w	b7bf4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba7a4:	7c00      	ldrb	r0, [r0, #16]
   ba7a6:	9101      	str	r1, [sp, #4]
   ba7a8:	f7fd fa54 	bl	b7c54 <hal_usart_available_data_for_write>
   ba7ac:	2800      	cmp	r0, #0
   ba7ae:	9901      	ldr	r1, [sp, #4]
   ba7b0:	dcf2      	bgt.n	ba798 <_ZN11USARTSerial5writeEh+0x8>
}
   ba7b2:	4628      	mov	r0, r5
   ba7b4:	b003      	add	sp, #12
   ba7b6:	bd30      	pop	{r4, r5, pc}

000ba7b8 <_ZN11USARTSerialD0Ev>:
   ba7b8:	b510      	push	{r4, lr}
   ba7ba:	2114      	movs	r1, #20
   ba7bc:	4604      	mov	r4, r0
   ba7be:	f7fa f988 	bl	b4ad2 <_ZdlPvj>
   ba7c2:	4620      	mov	r0, r4
   ba7c4:	bd10      	pop	{r4, pc}
	...

000ba7c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba7c8:	b510      	push	{r4, lr}
   ba7ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba7ce:	4604      	mov	r4, r0
   ba7d0:	4608      	mov	r0, r1
   ba7d2:	4611      	mov	r1, r2
   ba7d4:	2200      	movs	r2, #0
   ba7d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba7da:	4b04      	ldr	r3, [pc, #16]	; (ba7ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba7dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba7de:	2301      	movs	r3, #1
  _serial = serial;
   ba7e0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba7e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba7e4:	f7fd fa3e 	bl	b7c64 <hal_usart_init_ex>
}
   ba7e8:	4620      	mov	r0, r4
   ba7ea:	bd10      	pop	{r4, pc}
   ba7ec:	000be394 	.word	0x000be394

000ba7f0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   ba7f0:	b510      	push	{r4, lr}
      if (_M_empty())
   ba7f2:	6883      	ldr	r3, [r0, #8]
   ba7f4:	4604      	mov	r4, r0
   ba7f6:	b90b      	cbnz	r3, ba7fc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   ba7f8:	f000 fd94 	bl	bb324 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba7fc:	68c3      	ldr	r3, [r0, #12]
   ba7fe:	4798      	blx	r3
      if (_M_manager)
   ba800:	68a3      	ldr	r3, [r4, #8]
   ba802:	b11b      	cbz	r3, ba80c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ba804:	2203      	movs	r2, #3
   ba806:	4621      	mov	r1, r4
   ba808:	4620      	mov	r0, r4
   ba80a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ba80c:	4620      	mov	r0, r4
   ba80e:	2110      	movs	r1, #16
}
   ba810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   ba814:	f7fa b95d 	b.w	b4ad2 <_ZdlPvj>

000ba818 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba818:	4770      	bx	lr

000ba81a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba81c:	4606      	mov	r6, r0
   ba81e:	4615      	mov	r5, r2
   ba820:	460c      	mov	r4, r1
   ba822:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba824:	42bc      	cmp	r4, r7
   ba826:	d006      	beq.n	ba836 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba828:	6833      	ldr	r3, [r6, #0]
   ba82a:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba82e:	689b      	ldr	r3, [r3, #8]
   ba830:	4630      	mov	r0, r6
   ba832:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba834:	e7f6      	b.n	ba824 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba836:	4628      	mov	r0, r5
   ba838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba83a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba83a:	7c00      	ldrb	r0, [r0, #16]
   ba83c:	2200      	movs	r2, #0
   ba83e:	f7fd ba19 	b.w	b7c74 <hal_i2c_write>

000ba842 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba842:	7c00      	ldrb	r0, [r0, #16]
   ba844:	2100      	movs	r1, #0
   ba846:	f7fd ba1d 	b.w	b7c84 <hal_i2c_available>

000ba84a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba84a:	7c00      	ldrb	r0, [r0, #16]
   ba84c:	2100      	movs	r1, #0
   ba84e:	f7fd ba21 	b.w	b7c94 <hal_i2c_read>

000ba852 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba852:	7c00      	ldrb	r0, [r0, #16]
   ba854:	2100      	movs	r1, #0
   ba856:	f7fd ba25 	b.w	b7ca4 <hal_i2c_peek>

000ba85a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba85a:	7c00      	ldrb	r0, [r0, #16]
   ba85c:	2100      	movs	r1, #0
   ba85e:	f7fd ba29 	b.w	b7cb4 <hal_i2c_flush>

000ba862 <_ZN7TwoWireD0Ev>:
   ba862:	b510      	push	{r4, lr}
   ba864:	2114      	movs	r1, #20
   ba866:	4604      	mov	r4, r0
   ba868:	f7fa f933 	bl	b4ad2 <_ZdlPvj>
   ba86c:	4620      	mov	r0, r4
   ba86e:	bd10      	pop	{r4, pc}

000ba870 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba870:	b510      	push	{r4, lr}
   ba872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba876:	4604      	mov	r4, r0
   ba878:	4608      	mov	r0, r1
   ba87a:	2100      	movs	r1, #0
   ba87c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba880:	4b03      	ldr	r3, [pc, #12]	; (ba890 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ba882:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ba884:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ba886:	4611      	mov	r1, r2
   ba888:	f7fd fa24 	bl	b7cd4 <hal_i2c_init>
}
   ba88c:	4620      	mov	r0, r4
   ba88e:	bd10      	pop	{r4, pc}
   ba890:	000be3c4 	.word	0x000be3c4

000ba894 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   ba894:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba896:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   ba898:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba89c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba89e:	2201      	movs	r2, #1
   ba8a0:	f04f 33ff 	mov.w	r3, #4294967295
   ba8a4:	f10d 0107 	add.w	r1, sp, #7
   ba8a8:	47a0      	blx	r4
}
   ba8aa:	b002      	add	sp, #8
   ba8ac:	bd10      	pop	{r4, pc}

000ba8ae <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   ba8ae:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba8b0:	6803      	ldr	r3, [r0, #0]
   ba8b2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba8b4:	f04f 33ff 	mov.w	r3, #4294967295
   ba8b8:	46a4      	mov	ip, r4
}
   ba8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba8be:	4760      	bx	ip

000ba8c0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba8c0:	b513      	push	{r0, r1, r4, lr}
   ba8c2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   ba8c4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba8c6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   ba8ca:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   ba8cc:	f10d 0107 	add.w	r1, sp, #7
   ba8d0:	2201      	movs	r2, #1
   ba8d2:	47a0      	blx	r4
}
   ba8d4:	b002      	add	sp, #8
   ba8d6:	bd10      	pop	{r4, pc}

000ba8d8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   ba8d8:	b510      	push	{r4, lr}
   ba8da:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba8dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba8e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba8e4:	429a      	cmp	r2, r3
int TCPClient::read() {
   ba8e6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba8e8:	d008      	beq.n	ba8fc <_ZN9TCPClient4readEv+0x24>
   ba8ea:	6963      	ldr	r3, [r4, #20]
   ba8ec:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   ba8f0:	1c51      	adds	r1, r2, #1
   ba8f2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   ba8f6:	4413      	add	r3, r2
   ba8f8:	7918      	ldrb	r0, [r3, #4]
}
   ba8fa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba8fc:	6803      	ldr	r3, [r0, #0]
   ba8fe:	691b      	ldr	r3, [r3, #16]
   ba900:	4798      	blx	r3
   ba902:	2800      	cmp	r0, #0
   ba904:	d1f1      	bne.n	ba8ea <_ZN9TCPClient4readEv+0x12>
   ba906:	f04f 30ff 	mov.w	r0, #4294967295
   ba90a:	e7f6      	b.n	ba8fa <_ZN9TCPClient4readEv+0x22>

000ba90c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   ba90c:	4770      	bx	lr

000ba90e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   ba90e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   ba910:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   ba912:	43c0      	mvns	r0, r0
   ba914:	0fc0      	lsrs	r0, r0, #31
   ba916:	4770      	bx	lr

000ba918 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba918:	4770      	bx	lr
	...

000ba91c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba91c:	4b06      	ldr	r3, [pc, #24]	; (ba938 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba91e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba920:	b510      	push	{r4, lr}
   ba922:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba926:	d005      	beq.n	ba934 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba928:	4608      	mov	r0, r1
   ba92a:	f000 fcff 	bl	bb32c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba92e:	2800      	cmp	r0, #0
   ba930:	bf08      	it	eq
   ba932:	2400      	moveq	r4, #0
      }
   ba934:	4620      	mov	r0, r4
   ba936:	bd10      	pop	{r4, pc}
   ba938:	000be2d4 	.word	0x000be2d4

000ba93c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba93c:	b510      	push	{r4, lr}
   ba93e:	21ac      	movs	r1, #172	; 0xac
   ba940:	4604      	mov	r4, r0
   ba942:	f7fa f8c6 	bl	b4ad2 <_ZdlPvj>
   ba946:	4620      	mov	r0, r4
   ba948:	bd10      	pop	{r4, pc}

000ba94a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba94a:	21ac      	movs	r1, #172	; 0xac
   ba94c:	f7fa b8c1 	b.w	b4ad2 <_ZdlPvj>

000ba950 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   ba950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   ba954:	f04f 0800 	mov.w	r8, #0
   ba958:	b086      	sub	sp, #24
   ba95a:	461c      	mov	r4, r3
   ba95c:	f8c0 8004 	str.w	r8, [r0, #4]
   ba960:	4605      	mov	r5, r0
   ba962:	460e      	mov	r6, r1
   ba964:	4617      	mov	r7, r2
    struct timeval tv = {};
   ba966:	4641      	mov	r1, r8
   ba968:	2210      	movs	r2, #16
   ba96a:	a802      	add	r0, sp, #8
   ba96c:	f000 fe5f 	bl	bb62e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   ba970:	1c63      	adds	r3, r4, #1
   ba972:	d009      	beq.n	ba988 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   ba974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba978:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   ba97c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   ba980:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   ba984:	435c      	muls	r4, r3
   ba986:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   ba988:	6968      	ldr	r0, [r5, #20]
   ba98a:	2310      	movs	r3, #16
   ba98c:	9300      	str	r3, [sp, #0]
   ba98e:	6800      	ldr	r0, [r0, #0]
   ba990:	ab02      	add	r3, sp, #8
   ba992:	f241 0205 	movw	r2, #4101	; 0x1005
   ba996:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba99a:	f7fd f9a3 	bl	b7ce4 <sock_setsockopt>
    if (ret < 0) {
   ba99e:	2800      	cmp	r0, #0
   ba9a0:	da07      	bge.n	ba9b2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   ba9a2:	f7fd fb5b 	bl	b805c <__errno>
   ba9a6:	6803      	ldr	r3, [r0, #0]
   ba9a8:	606b      	str	r3, [r5, #4]
        return 0;
   ba9aa:	2000      	movs	r0, #0
}
   ba9ac:	b006      	add	sp, #24
   ba9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   ba9b2:	6968      	ldr	r0, [r5, #20]
   ba9b4:	2300      	movs	r3, #0
   ba9b6:	6800      	ldr	r0, [r0, #0]
   ba9b8:	463a      	mov	r2, r7
   ba9ba:	4631      	mov	r1, r6
   ba9bc:	f7fd f9b2 	bl	b7d24 <sock_send>
    if (ret < 0) {
   ba9c0:	1e03      	subs	r3, r0, #0
   ba9c2:	dbee      	blt.n	ba9a2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   ba9c4:	4618      	mov	r0, r3
   ba9c6:	e7f1      	b.n	ba9ac <_ZN9TCPClient5writeEPKhjm+0x5c>

000ba9c8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   ba9c8:	b530      	push	{r4, r5, lr}
   ba9ca:	b087      	sub	sp, #28
   ba9cc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   ba9ce:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   ba9d0:	4668      	mov	r0, sp
   ba9d2:	f7ff fdff 	bl	ba5d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba9d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba9d8:	3404      	adds	r4, #4
   ba9da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba9dc:	682b      	ldr	r3, [r5, #0]
   ba9de:	7023      	strb	r3, [r4, #0]
    }
   ba9e0:	b007      	add	sp, #28
   ba9e2:	bd30      	pop	{r4, r5, pc}

000ba9e4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   ba9e4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   ba9e6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   ba9e8:	4b05      	ldr	r3, [pc, #20]	; (baa00 <_ZN9TCPClient8remoteIPEv+0x1c>)
   ba9ea:	4604      	mov	r4, r0
   ba9ec:	358c      	adds	r5, #140	; 0x8c
   ba9ee:	f844 3b04 	str.w	r3, [r4], #4
   ba9f2:	4606      	mov	r6, r0
   ba9f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba9f8:	682b      	ldr	r3, [r5, #0]
   ba9fa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   ba9fc:	4630      	mov	r0, r6
   ba9fe:	bd70      	pop	{r4, r5, r6, pc}
   baa00:	000be350 	.word	0x000be350

000baa04 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   baa04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baa08:	4698      	mov	r8, r3
    stop();
   baa0a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   baa0c:	b093      	sub	sp, #76	; 0x4c
   baa0e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   baa10:	2400      	movs	r4, #0
    stop();
   baa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   baa14:	4606      	mov	r6, r0
   baa16:	4617      	mov	r7, r2
    stop();
   baa18:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   baa1a:	4628      	mov	r0, r5
   baa1c:	466b      	mov	r3, sp
   baa1e:	4622      	mov	r2, r4
   baa20:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   baa22:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   baa24:	f7fc ff7c 	bl	b7920 <netdb_getaddrinfo>
   baa28:	4605      	mov	r5, r0
   baa2a:	2800      	cmp	r0, #0
   baa2c:	d163      	bne.n	baaf6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   baa2e:	9b00      	ldr	r3, [sp, #0]
   baa30:	2b00      	cmp	r3, #0
   baa32:	d04b      	beq.n	baacc <_ZN9TCPClient7connectEPKctm+0xc8>
   baa34:	695b      	ldr	r3, [r3, #20]
   baa36:	2b00      	cmp	r3, #0
   baa38:	d048      	beq.n	baacc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   baa3a:	a806      	add	r0, sp, #24
   baa3c:	f7ff fd7e 	bl	ba53c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   baa40:	9b00      	ldr	r3, [sp, #0]
   baa42:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   baa44:	7863      	ldrb	r3, [r4, #1]
   baa46:	2b02      	cmp	r3, #2
   baa48:	d104      	bne.n	baa54 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   baa4a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   baa4c:	a806      	add	r0, sp, #24
   baa4e:	f7ff ffbb 	bl	ba9c8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   baa52:	e026      	b.n	baaa2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   baa54:	2b0a      	cmp	r3, #10
   baa56:	d124      	bne.n	baaa2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   baa58:	2211      	movs	r2, #17
   baa5a:	4629      	mov	r1, r5
   baa5c:	a801      	add	r0, sp, #4
   baa5e:	f000 fde6 	bl	bb62e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   baa62:	68a3      	ldr	r3, [r4, #8]
   baa64:	2b00      	cmp	r3, #0
   baa66:	d038      	beq.n	baada <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   baa68:	f104 0308 	add.w	r3, r4, #8
   baa6c:	f10d 0c04 	add.w	ip, sp, #4
   baa70:	3418      	adds	r4, #24
   baa72:	6818      	ldr	r0, [r3, #0]
   baa74:	6859      	ldr	r1, [r3, #4]
   baa76:	4662      	mov	r2, ip
   baa78:	c203      	stmia	r2!, {r0, r1}
   baa7a:	3308      	adds	r3, #8
   baa7c:	42a3      	cmp	r3, r4
   baa7e:	4694      	mov	ip, r2
   baa80:	d1f7      	bne.n	baa72 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   baa82:	2306      	movs	r3, #6
            addr = IPAddress(a);
   baa84:	a901      	add	r1, sp, #4
   baa86:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   baa88:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   baa8c:	f7ff fd64 	bl	ba558 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   baa90:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   baa94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   baa98:	ac07      	add	r4, sp, #28
   baa9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baa9c:	f8dc 3000 	ldr.w	r3, [ip]
   baaa0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   baaa2:	a806      	add	r0, sp, #24
   baaa4:	f7ff fd72 	bl	ba58c <_ZNK9IPAddresscvbEv>
        if (addr) {
   baaa8:	b180      	cbz	r0, baacc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   baaaa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   baaac:	ad07      	add	r5, sp, #28
   baaae:	f8d3 9020 	ldr.w	r9, [r3, #32]
   baab2:	4b12      	ldr	r3, [pc, #72]	; (baafc <_ZN9TCPClient7connectEPKctm+0xf8>)
   baab4:	930c      	str	r3, [sp, #48]	; 0x30
   baab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baab8:	ac0d      	add	r4, sp, #52	; 0x34
   baaba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baabc:	682b      	ldr	r3, [r5, #0]
   baabe:	7023      	strb	r3, [r4, #0]
   baac0:	463a      	mov	r2, r7
   baac2:	4643      	mov	r3, r8
   baac4:	a90c      	add	r1, sp, #48	; 0x30
   baac6:	4630      	mov	r0, r6
   baac8:	47c8      	blx	r9
   baaca:	4605      	mov	r5, r0
    SCOPE_GUARD({
   baacc:	9800      	ldr	r0, [sp, #0]
   baace:	f7fc ff1f 	bl	b7910 <netdb_freeaddrinfo>
}
   baad2:	4628      	mov	r0, r5
   baad4:	b013      	add	sp, #76	; 0x4c
   baad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   baada:	68e3      	ldr	r3, [r4, #12]
   baadc:	2b00      	cmp	r3, #0
   baade:	d1c3      	bne.n	baa68 <_ZN9TCPClient7connectEPKctm+0x64>
   baae0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   baae4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   baae8:	f7fd f874 	bl	b7bd4 <inet_htonl>
   baaec:	4581      	cmp	r9, r0
   baaee:	d1bb      	bne.n	baa68 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   baaf0:	f104 0114 	add.w	r1, r4, #20
   baaf4:	e7aa      	b.n	baa4c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   baaf6:	4625      	mov	r5, r4
   baaf8:	e7e8      	b.n	baacc <_ZN9TCPClient7connectEPKctm+0xc8>
   baafa:	bf00      	nop
   baafc:	000be350 	.word	0x000be350

000bab00 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   bab00:	b538      	push	{r3, r4, r5, lr}
   bab02:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   bab04:	681a      	ldr	r2, [r3, #0]
   bab06:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   bab08:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   bab0a:	da10      	bge.n	bab2e <_ZN9TCPClient9connectedEv+0x2e>
   bab0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bab10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bab14:	429a      	cmp	r2, r3
   bab16:	d10a      	bne.n	bab2e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   bab18:	6803      	ldr	r3, [r0, #0]
   bab1a:	691b      	ldr	r3, [r3, #16]
   bab1c:	4798      	blx	r3
        if (!rv) {
   bab1e:	4604      	mov	r4, r0
   bab20:	b928      	cbnz	r0, bab2e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   bab22:	682b      	ldr	r3, [r5, #0]
   bab24:	4628      	mov	r0, r5
   bab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bab28:	4798      	blx	r3
        rv = available();
   bab2a:	4620      	mov	r0, r4
}
   bab2c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   bab2e:	2001      	movs	r0, #1
   bab30:	e7fc      	b.n	bab2c <_ZN9TCPClient9connectedEv+0x2c>

000bab32 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   bab32:	b510      	push	{r4, lr}
   bab34:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bab36:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bab3a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bab3e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   bab40:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bab42:	d005      	beq.n	bab50 <_ZN9TCPClient4peekEv+0x1e>
   bab44:	6963      	ldr	r3, [r4, #20]
   bab46:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bab4a:	4413      	add	r3, r2
   bab4c:	7918      	ldrb	r0, [r3, #4]
}
   bab4e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bab50:	6803      	ldr	r3, [r0, #0]
   bab52:	691b      	ldr	r3, [r3, #16]
   bab54:	4798      	blx	r3
   bab56:	2800      	cmp	r0, #0
   bab58:	d1f4      	bne.n	bab44 <_ZN9TCPClient4peekEv+0x12>
   bab5a:	f04f 30ff 	mov.w	r0, #4294967295
   bab5e:	e7f6      	b.n	bab4e <_ZN9TCPClient4peekEv+0x1c>

000bab60 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   bab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bab62:	6943      	ldr	r3, [r0, #20]
   bab64:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   bab66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bab6a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bab6e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   bab70:	4605      	mov	r5, r0
   bab72:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   bab74:	d016      	beq.n	baba4 <_ZN9TCPClient4readEPhj+0x44>
   bab76:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   bab78:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   bab7c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   bab80:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   bab82:	42bc      	cmp	r4, r7
   bab84:	bf28      	it	cs
   bab86:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   bab88:	3304      	adds	r3, #4
   bab8a:	4622      	mov	r2, r4
   bab8c:	4419      	add	r1, r3
   bab8e:	4630      	mov	r0, r6
   bab90:	f000 fd25 	bl	bb5de <memcpy>
   bab94:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   bab96:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   bab9a:	4423      	add	r3, r4
   bab9c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   baba0:	4620      	mov	r0, r4
   baba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   baba4:	6803      	ldr	r3, [r0, #0]
   baba6:	691b      	ldr	r3, [r3, #16]
   baba8:	4798      	blx	r3
   babaa:	2800      	cmp	r0, #0
   babac:	d1e3      	bne.n	bab76 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   babae:	f04f 34ff 	mov.w	r4, #4294967295
   babb2:	e7f5      	b.n	baba0 <_ZN9TCPClient4readEPhj+0x40>

000babb4 <_ZN9TCPClient12flush_bufferEv>:
   babb4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   babb6:	2300      	movs	r3, #0
   babb8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   babbc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   babbe:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   babc2:	4770      	bx	lr

000babc4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   babc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   babc8:	461f      	mov	r7, r3
    stop();
   babca:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   babcc:	460c      	mov	r4, r1
    stop();
   babce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   babd0:	b08a      	sub	sp, #40	; 0x28
   babd2:	4605      	mov	r5, r0
   babd4:	4616      	mov	r6, r2
    stop();
   babd6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   babd8:	7d23      	ldrb	r3, [r4, #20]
   babda:	f8d5 8014 	ldr.w	r8, [r5, #20]
   babde:	2b04      	cmp	r3, #4
   babe0:	bf0c      	ite	eq
   babe2:	2002      	moveq	r0, #2
   babe4:	200a      	movne	r0, #10
   babe6:	2206      	movs	r2, #6
   babe8:	2101      	movs	r1, #1
   babea:	f7fd f8a3 	bl	b7d34 <sock_socket>
   babee:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   babf2:	696b      	ldr	r3, [r5, #20]
   babf4:	681b      	ldr	r3, [r3, #0]
   babf6:	2b00      	cmp	r3, #0
   babf8:	da08      	bge.n	bac0c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   babfa:	682b      	ldr	r3, [r5, #0]
   babfc:	4628      	mov	r0, r5
   babfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bac00:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   bac02:	4798      	blx	r3
}
   bac04:	4620      	mov	r0, r4
   bac06:	b00a      	add	sp, #40	; 0x28
   bac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   bac0c:	4628      	mov	r0, r5
   bac0e:	f7ff ffd1 	bl	babb4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   bac12:	b1b7      	cbz	r7, bac42 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   bac14:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bac16:	a903      	add	r1, sp, #12
   bac18:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   bac1a:	9303      	str	r3, [sp, #12]
   bac1c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bac20:	f7fc fe9e 	bl	b7960 <if_index_to_name>
   bac24:	2800      	cmp	r0, #0
   bac26:	d1e8      	bne.n	babfa <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   bac28:	6968      	ldr	r0, [r5, #20]
   bac2a:	2306      	movs	r3, #6
   bac2c:	9300      	str	r3, [sp, #0]
   bac2e:	6800      	ldr	r0, [r0, #0]
   bac30:	ab03      	add	r3, sp, #12
   bac32:	f241 020b 	movw	r2, #4107	; 0x100b
   bac36:	f640 71ff 	movw	r1, #4095	; 0xfff
   bac3a:	f7fd f853 	bl	b7ce4 <sock_setsockopt>
   bac3e:	2800      	cmp	r0, #0
   bac40:	d1db      	bne.n	babfa <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   bac42:	221c      	movs	r2, #28
   bac44:	2100      	movs	r1, #0
   bac46:	a803      	add	r0, sp, #12
   bac48:	f000 fcf1 	bl	bb62e <memset>
    if (ip.version() == 4) {
   bac4c:	7d23      	ldrb	r3, [r4, #20]
   bac4e:	2b04      	cmp	r3, #4
   bac50:	d11d      	bne.n	bac8e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   bac52:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   bac56:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   bac58:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   bac5c:	f7fc ffc2 	bl	b7be4 <inet_htons>
   bac60:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   bac64:	6860      	ldr	r0, [r4, #4]
   bac66:	f7fc ffb5 	bl	b7bd4 <inet_htonl>
   bac6a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   bac6c:	696b      	ldr	r3, [r5, #20]
   bac6e:	221c      	movs	r2, #28
   bac70:	6818      	ldr	r0, [r3, #0]
   bac72:	a903      	add	r1, sp, #12
   bac74:	f7fd f846 	bl	b7d04 <sock_connect>
   bac78:	2800      	cmp	r0, #0
   bac7a:	d1be      	bne.n	babfa <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   bac7c:	3404      	adds	r4, #4
   bac7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bac80:	696d      	ldr	r5, [r5, #20]
   bac82:	358c      	adds	r5, #140	; 0x8c
   bac84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bac86:	6823      	ldr	r3, [r4, #0]
   bac88:	702b      	strb	r3, [r5, #0]
    return 1; // success
   bac8a:	2401      	movs	r4, #1
   bac8c:	e7ba      	b.n	bac04 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   bac8e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   bac92:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   bac94:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   bac98:	f7fc ffa4 	bl	b7be4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bac9c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   bac9e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   baca2:	1d23      	adds	r3, r4, #4
   baca4:	f104 0714 	add.w	r7, r4, #20
   baca8:	6818      	ldr	r0, [r3, #0]
   bacaa:	6859      	ldr	r1, [r3, #4]
   bacac:	4632      	mov	r2, r6
   bacae:	c203      	stmia	r2!, {r0, r1}
   bacb0:	3308      	adds	r3, #8
   bacb2:	42bb      	cmp	r3, r7
   bacb4:	4616      	mov	r6, r2
   bacb6:	d1f7      	bne.n	baca8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   bacb8:	e7d8      	b.n	bac6c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000bacbc <_ZN9TCPClient9availableEv>:
{
   bacbc:	b530      	push	{r4, r5, lr}
   bacbe:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   bacc0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   bacc4:	b08b      	sub	sp, #44	; 0x2c
   bacc6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   bacc8:	b12b      	cbz	r3, bacd6 <_ZN9TCPClient9availableEv+0x1a>
   bacca:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bacce:	429a      	cmp	r2, r3
   bacd0:	d101      	bne.n	bacd6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bacd2:	f7ff ff6f 	bl	babb4 <_ZN9TCPClient12flush_bufferEv>
   bacd6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bacd8:	6808      	ldr	r0, [r1, #0]
   bacda:	2800      	cmp	r0, #0
   bacdc:	db18      	blt.n	bad10 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bacde:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bace2:	2d7f      	cmp	r5, #127	; 0x7f
   bace4:	d814      	bhi.n	bad10 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bace6:	3104      	adds	r1, #4
   bace8:	2308      	movs	r3, #8
   bacea:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   bacee:	4429      	add	r1, r5
   bacf0:	f7fd f810 	bl	b7d14 <sock_recv>
            if (ret > 0) {
   bacf4:	2800      	cmp	r0, #0
   bacf6:	dd13      	ble.n	bad20 <_ZN9TCPClient9availableEv+0x64>
   bacf8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   bacfa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bacfe:	b90a      	cbnz	r2, bad04 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bad00:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bad04:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bad06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bad0a:	4410      	add	r0, r2
   bad0c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bad10:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bad12:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bad16:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bad1a:	1ac0      	subs	r0, r0, r3
   bad1c:	b00b      	add	sp, #44	; 0x2c
   bad1e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bad20:	f7fd f99c 	bl	b805c <__errno>
   bad24:	6803      	ldr	r3, [r0, #0]
   bad26:	2b0b      	cmp	r3, #11
   bad28:	d0f2      	beq.n	bad10 <_ZN9TCPClient9availableEv+0x54>
   bad2a:	f7fd f997 	bl	b805c <__errno>
   bad2e:	6803      	ldr	r3, [r0, #0]
   bad30:	2b0b      	cmp	r3, #11
   bad32:	d0ed      	beq.n	bad10 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bad34:	2320      	movs	r3, #32
   bad36:	2500      	movs	r5, #0
   bad38:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bad3c:	f7fd f98e 	bl	b805c <__errno>
   bad40:	6803      	ldr	r3, [r0, #0]
   bad42:	9301      	str	r3, [sp, #4]
   bad44:	4b08      	ldr	r3, [pc, #32]	; (bad68 <_ZN9TCPClient9availableEv+0xac>)
   bad46:	4909      	ldr	r1, [pc, #36]	; (bad6c <_ZN9TCPClient9availableEv+0xb0>)
   bad48:	9300      	str	r3, [sp, #0]
   bad4a:	aa02      	add	r2, sp, #8
   bad4c:	462b      	mov	r3, r5
   bad4e:	2032      	movs	r0, #50	; 0x32
   bad50:	f7fd f848 	bl	b7de4 <log_message>
                    sock_close(d_->sock);
   bad54:	6963      	ldr	r3, [r4, #20]
   bad56:	6818      	ldr	r0, [r3, #0]
   bad58:	f7fc ffcc 	bl	b7cf4 <sock_close>
   bad5c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bad5e:	f04f 32ff 	mov.w	r2, #4294967295
   bad62:	601a      	str	r2, [r3, #0]
   bad64:	e7d4      	b.n	bad10 <_ZN9TCPClient9availableEv+0x54>
   bad66:	bf00      	nop
   bad68:	000be3eb 	.word	0x000be3eb
   bad6c:	000be3e4 	.word	0x000be3e4

000bad70 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   bad70:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   bad72:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   bad74:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bad76:	6818      	ldr	r0, [r3, #0]
   bad78:	2800      	cmp	r0, #0
   bad7a:	db01      	blt.n	bad80 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bad7c:	f7fc ffba 	bl	b7cf4 <sock_close>
   bad80:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bad82:	f04f 32ff 	mov.w	r2, #4294967295
   bad86:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bad88:	6960      	ldr	r0, [r4, #20]
   bad8a:	2211      	movs	r2, #17
   bad8c:	2100      	movs	r1, #0
   bad8e:	308c      	adds	r0, #140	; 0x8c
   bad90:	f000 fc4d 	bl	bb62e <memset>
    flush_buffer();
   bad94:	4620      	mov	r0, r4
}
   bad96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bad9a:	f7ff bf0b 	b.w	babb4 <_ZN9TCPClient12flush_bufferEv>

000bad9e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bad9e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bada0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bada2:	4604      	mov	r4, r0
          total(0) {
   bada4:	6001      	str	r1, [r0, #0]
   bada6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   badaa:	3088      	adds	r0, #136	; 0x88
   badac:	f7ff fbc6 	bl	ba53c <_ZN9IPAddressC1Ev>
}
   badb0:	4620      	mov	r0, r4
   badb2:	bd10      	pop	{r4, pc}

000badb4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   badb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   badb6:	2300      	movs	r3, #0
   badb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   badbc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   badc0:	4a0e      	ldr	r2, [pc, #56]	; (badfc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   badc2:	6103      	str	r3, [r0, #16]
   badc4:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   badc6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   badc8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   badca:	20ac      	movs	r0, #172	; 0xac
   badcc:	9101      	str	r1, [sp, #4]
   badce:	f7f9 fe7c 	bl	b4aca <_Znwj>
	  auto __pi = ::new (__mem)
   badd2:	1e05      	subs	r5, r0, #0
   badd4:	f105 060c 	add.w	r6, r5, #12
   badd8:	d008      	beq.n	badec <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   badda:	2301      	movs	r3, #1
   baddc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bade0:	4b07      	ldr	r3, [pc, #28]	; (bae00 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bade2:	9901      	ldr	r1, [sp, #4]
   bade4:	602b      	str	r3, [r5, #0]
   bade6:	4630      	mov	r0, r6
   bade8:	f7ff ffd9 	bl	bad9e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   badec:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   badee:	e9c4 6505 	strd	r6, r5, [r4, #20]
   badf2:	f7ff fedf 	bl	babb4 <_ZN9TCPClient12flush_bufferEv>
}
   badf6:	b002      	add	sp, #8
   badf8:	bd70      	pop	{r4, r5, r6, pc}
   badfa:	bf00      	nop
   badfc:	000be420 	.word	0x000be420
   bae00:	000be404 	.word	0x000be404

000bae04 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bae04:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bae06:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   bae0a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bae0c:	f7ff ffd2 	bl	badb4 <_ZN9TCPClientC1Ei>
}
   bae10:	4620      	mov	r0, r4
   bae12:	bd10      	pop	{r4, pc}

000bae14 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bae14:	b510      	push	{r4, lr}
   bae16:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bae18:	6800      	ldr	r0, [r0, #0]
   bae1a:	2800      	cmp	r0, #0
   bae1c:	db01      	blt.n	bae22 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bae1e:	f7fc ff69 	bl	b7cf4 <sock_close>
    }
}
   bae22:	4620      	mov	r0, r4
   bae24:	bd10      	pop	{r4, pc}

000bae26 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bae26:	300c      	adds	r0, #12
   bae28:	f7ff bff4 	b.w	bae14 <_ZN9TCPClient4DataD1Ev>

000bae2c <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   bae2c:	4770      	bx	lr

000bae2e <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   bae2e:	2001      	movs	r0, #1
   bae30:	4770      	bx	lr

000bae32 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bae32:	2200      	movs	r2, #0
   bae34:	6840      	ldr	r0, [r0, #4]
   bae36:	4611      	mov	r1, r2
   bae38:	f7fd b840 	b.w	b7ebc <network_ready>

000bae3c <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   bae3c:	b510      	push	{r4, lr}
   bae3e:	2124      	movs	r1, #36	; 0x24
   bae40:	4604      	mov	r4, r0
   bae42:	f7f9 fe46 	bl	b4ad2 <_ZdlPvj>
   bae46:	4620      	mov	r0, r4
   bae48:	bd10      	pop	{r4, pc}

000bae4a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bae4a:	2200      	movs	r2, #0
   bae4c:	6840      	ldr	r0, [r0, #4]
   bae4e:	4611      	mov	r1, r2
   bae50:	f7fd b854 	b.w	b7efc <network_listening>

000bae54 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bae54:	2200      	movs	r2, #0
   bae56:	6840      	ldr	r0, [r0, #4]
   bae58:	4611      	mov	r1, r2
   bae5a:	f7fd b85f 	b.w	b7f1c <network_get_listen_timeout>

000bae5e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bae5e:	6840      	ldr	r0, [r0, #4]
   bae60:	2200      	movs	r2, #0
   bae62:	f7fd b853 	b.w	b7f0c <network_set_listen_timeout>

000bae66 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bae66:	6840      	ldr	r0, [r0, #4]
   bae68:	2200      	movs	r2, #0
   bae6a:	f081 0101 	eor.w	r1, r1, #1
   bae6e:	f7fd b83d 	b.w	b7eec <network_listen>

000bae72 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bae72:	2300      	movs	r3, #0
   bae74:	6840      	ldr	r0, [r0, #4]
   bae76:	461a      	mov	r2, r3
   bae78:	4619      	mov	r1, r3
   bae7a:	f7fd b82f 	b.w	b7edc <network_off>

000bae7e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bae7e:	2300      	movs	r3, #0
   bae80:	6840      	ldr	r0, [r0, #4]
   bae82:	461a      	mov	r2, r3
   bae84:	4619      	mov	r1, r3
   bae86:	f7fd b821 	b.w	b7ecc <network_on>

000bae8a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bae8a:	2200      	movs	r2, #0
   bae8c:	6840      	ldr	r0, [r0, #4]
   bae8e:	4611      	mov	r1, r2
   bae90:	f7fd b804 	b.w	b7e9c <network_connecting>

000bae94 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bae94:	6840      	ldr	r0, [r0, #4]
   bae96:	2200      	movs	r2, #0
   bae98:	2102      	movs	r1, #2
   bae9a:	f7fd b807 	b.w	b7eac <network_disconnect>

000bae9e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bae9e:	2300      	movs	r3, #0
   baea0:	6840      	ldr	r0, [r0, #4]
   baea2:	461a      	mov	r2, r3
   baea4:	f7fc bff2 	b.w	b7e8c <network_connect>

000baea8 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   baea8:	8983      	ldrh	r3, [r0, #12]
   baeaa:	b17b      	cbz	r3, baecc <_ZNK10WiFiSignal11getStrengthEv+0x24>
   baeac:	6943      	ldr	r3, [r0, #20]
   baeae:	2b00      	cmp	r3, #0
   baeb0:	db0c      	blt.n	baecc <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   baeb2:	ee07 3a90 	vmov	s15, r3
   baeb6:	ed9f 7a07 	vldr	s14, [pc, #28]	; baed4 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   baeba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   baebe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   baec2:	eddf 7a05 	vldr	s15, [pc, #20]	; baed8 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   baec6:	ee20 0a27 	vmul.f32	s0, s0, s15
   baeca:	4770      	bx	lr
    }
    return -1.0f;
   baecc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   baed0:	4770      	bx	lr
   baed2:	bf00      	nop
   baed4:	477fff00 	.word	0x477fff00
   baed8:	42c80000 	.word	0x42c80000

000baedc <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   baedc:	8983      	ldrh	r3, [r0, #12]
   baede:	b163      	cbz	r3, baefa <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   baee0:	6903      	ldr	r3, [r0, #16]
   baee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   baee6:	d008      	beq.n	baefa <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   baee8:	ee07 3a90 	vmov	s15, r3
   baeec:	ed9f 7a04 	vldr	s14, [pc, #16]	; baf00 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   baef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   baef4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   baef8:	4770      	bx	lr
    }
    return 0.0f;
   baefa:	ed9f 0a02 	vldr	s0, [pc, #8]	; baf04 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   baefe:	4770      	bx	lr
   baf00:	42c80000 	.word	0x42c80000
   baf04:	00000000 	.word	0x00000000

000baf08 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   baf08:	8983      	ldrh	r3, [r0, #12]
   baf0a:	b17b      	cbz	r3, baf2c <_ZNK10WiFiSignal10getQualityEv+0x24>
   baf0c:	6a03      	ldr	r3, [r0, #32]
   baf0e:	2b00      	cmp	r3, #0
   baf10:	db0c      	blt.n	baf2c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   baf12:	ee07 3a90 	vmov	s15, r3
   baf16:	ed9f 7a07 	vldr	s14, [pc, #28]	; baf34 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   baf1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   baf1e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   baf22:	eddf 7a05 	vldr	s15, [pc, #20]	; baf38 <_ZNK10WiFiSignal10getQualityEv+0x30>
   baf26:	ee20 0a27 	vmul.f32	s0, s0, s15
   baf2a:	4770      	bx	lr
    }
    return -1.0f;
   baf2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   baf30:	4770      	bx	lr
   baf32:	bf00      	nop
   baf34:	477fff00 	.word	0x477fff00
   baf38:	42c80000 	.word	0x42c80000

000baf3c <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   baf3c:	8983      	ldrh	r3, [r0, #12]
   baf3e:	b163      	cbz	r3, baf5a <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   baf40:	6983      	ldr	r3, [r0, #24]
   baf42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   baf46:	d008      	beq.n	baf5a <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   baf48:	ee07 3a90 	vmov	s15, r3
   baf4c:	ed9f 7a04 	vldr	s14, [pc, #16]	; baf60 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   baf50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   baf54:	ee87 0a87 	vdiv.f32	s0, s15, s14
   baf58:	4770      	bx	lr
    }
    return 0.0f;
   baf5a:	ed9f 0a02 	vldr	s0, [pc, #8]	; baf64 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   baf5e:	4770      	bx	lr
   baf60:	42c80000 	.word	0x42c80000
   baf64:	00000000 	.word	0x00000000

000baf68 <_ZNK10WiFiSignalcvaEv>:
}
   baf68:	f990 0004 	ldrsb.w	r0, [r0, #4]
   baf6c:	4770      	bx	lr

000baf6e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   baf6e:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   baf70:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   baf72:	4606      	mov	r6, r0
    inf_ = inf;
   baf74:	f100 050c 	add.w	r5, r0, #12
   baf78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   baf7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   baf7c:	e894 0003 	ldmia.w	r4, {r0, r1}
   baf80:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   baf84:	6933      	ldr	r3, [r6, #16]
   baf86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   baf8a:	bf0e      	itee	eq
   baf8c:	2302      	moveq	r3, #2
   baf8e:	2264      	movne	r2, #100	; 0x64
   baf90:	fb93 f3f2 	sdivne	r3, r3, r2
   baf94:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   baf96:	69b3      	ldr	r3, [r6, #24]
   baf98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   baf9c:	bf0c      	ite	eq
   baf9e:	2300      	moveq	r3, #0
   bafa0:	2264      	movne	r2, #100	; 0x64
}
   bafa2:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   bafa6:	bf18      	it	ne
   bafa8:	fb93 f3f2 	sdivne	r3, r3, r2
   bafac:	60b3      	str	r3, [r6, #8]
}
   bafae:	bd70      	pop	{r4, r5, r6, pc}

000bafb0 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   bafb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   bafb4:	4b16      	ldr	r3, [pc, #88]	; (bb010 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   bafb6:	6003      	str	r3, [r0, #0]
   bafb8:	2500      	movs	r5, #0
   bafba:	460f      	mov	r7, r1
   bafbc:	f04f 0802 	mov.w	r8, #2
   bafc0:	2618      	movs	r6, #24
   bafc2:	e9c0 8501 	strd	r8, r5, [r0, #4]
   bafc6:	b086      	sub	sp, #24
   bafc8:	4632      	mov	r2, r6
   bafca:	4629      	mov	r1, r5
   bafcc:	4604      	mov	r4, r0
   bafce:	300c      	adds	r0, #12
   bafd0:	f000 fb2d 	bl	bb62e <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bafd4:	6878      	ldr	r0, [r7, #4]
   bafd6:	462a      	mov	r2, r5
   bafd8:	4629      	mov	r1, r5
   bafda:	f7fc ff6f 	bl	b7ebc <network_ready>
   bafde:	b180      	cbz	r0, bb002 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
   bafe0:	4632      	mov	r2, r6
   bafe2:	4629      	mov	r1, r5
   bafe4:	4668      	mov	r0, sp
   bafe6:	f000 fb22 	bl	bb62e <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   bafea:	462a      	mov	r2, r5
   bafec:	4669      	mov	r1, sp
   bafee:	4628      	mov	r0, r5
        info.size = sizeof(info);
   baff0:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   baff4:	f7fc fee6 	bl	b7dc4 <wlan_connected_info>
        if (r == 0) {
   baff8:	b938      	cbnz	r0, bb00a <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   baffa:	4669      	mov	r1, sp
   baffc:	4620      	mov	r0, r4
   baffe:	f7ff ffb6 	bl	baf6e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
   bb002:	4620      	mov	r0, r4
   bb004:	b006      	add	sp, #24
   bb006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   bb00a:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   bb00e:	e7f8      	b.n	bb002 <_ZN5spark9WiFiClass4RSSIEv+0x52>
   bb010:	000be4a8 	.word	0x000be4a8

000bb014 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb014:	4b02      	ldr	r3, [pc, #8]	; (bb020 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb016:	2204      	movs	r2, #4
   bb018:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb01a:	4a02      	ldr	r2, [pc, #8]	; (bb024 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb01c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb01e:	4770      	bx	lr
   bb020:	2003e708 	.word	0x2003e708
   bb024:	000be46c 	.word	0x000be46c

000bb028 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb028:	2300      	movs	r3, #0
   bb02a:	6840      	ldr	r0, [r0, #4]
   bb02c:	461a      	mov	r2, r3
   bb02e:	f7fc bf2d 	b.w	b7e8c <network_connect>

000bb032 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb032:	6840      	ldr	r0, [r0, #4]
   bb034:	2200      	movs	r2, #0
   bb036:	2102      	movs	r1, #2
   bb038:	f7fc bf38 	b.w	b7eac <network_disconnect>

000bb03c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb03c:	2200      	movs	r2, #0
   bb03e:	6840      	ldr	r0, [r0, #4]
   bb040:	4611      	mov	r1, r2
   bb042:	f7fc bf2b 	b.w	b7e9c <network_connecting>

000bb046 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb046:	2200      	movs	r2, #0
   bb048:	6840      	ldr	r0, [r0, #4]
   bb04a:	4611      	mov	r1, r2
   bb04c:	f7fc bf36 	b.w	b7ebc <network_ready>

000bb050 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb050:	2300      	movs	r3, #0
   bb052:	6840      	ldr	r0, [r0, #4]
   bb054:	461a      	mov	r2, r3
   bb056:	4619      	mov	r1, r3
   bb058:	f7fc bf38 	b.w	b7ecc <network_on>

000bb05c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb05c:	2300      	movs	r3, #0
   bb05e:	6840      	ldr	r0, [r0, #4]
   bb060:	461a      	mov	r2, r3
   bb062:	4619      	mov	r1, r3
   bb064:	f7fc bf3a 	b.w	b7edc <network_off>

000bb068 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb068:	6840      	ldr	r0, [r0, #4]
   bb06a:	2100      	movs	r1, #0
   bb06c:	f7fc bf5e 	b.w	b7f2c <network_is_on>

000bb070 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb070:	6840      	ldr	r0, [r0, #4]
   bb072:	2100      	movs	r1, #0
   bb074:	f7fc bf62 	b.w	b7f3c <network_is_off>

000bb078 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb078:	6840      	ldr	r0, [r0, #4]
   bb07a:	2200      	movs	r2, #0
   bb07c:	f081 0101 	eor.w	r1, r1, #1
   bb080:	f7fc bf34 	b.w	b7eec <network_listen>

000bb084 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb084:	6840      	ldr	r0, [r0, #4]
   bb086:	2200      	movs	r2, #0
   bb088:	f7fc bf40 	b.w	b7f0c <network_set_listen_timeout>

000bb08c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb08c:	2200      	movs	r2, #0
   bb08e:	6840      	ldr	r0, [r0, #4]
   bb090:	4611      	mov	r1, r2
   bb092:	f7fc bf43 	b.w	b7f1c <network_get_listen_timeout>

000bb096 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb096:	2200      	movs	r2, #0
   bb098:	6840      	ldr	r0, [r0, #4]
   bb09a:	4611      	mov	r1, r2
   bb09c:	f7fc bf2e 	b.w	b7efc <network_listening>

000bb0a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb0a4:	b095      	sub	sp, #84	; 0x54
   bb0a6:	4614      	mov	r4, r2
   bb0a8:	460d      	mov	r5, r1
   bb0aa:	4607      	mov	r7, r0
    IPAddress addr;
   bb0ac:	f7ff fa46 	bl	ba53c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb0b0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb0b2:	221c      	movs	r2, #28
   bb0b4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb0b6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb0b8:	f000 fab9 	bl	bb62e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb0bc:	2340      	movs	r3, #64	; 0x40
   bb0be:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb0c0:	4620      	mov	r0, r4
   bb0c2:	466b      	mov	r3, sp
   bb0c4:	aa0c      	add	r2, sp, #48	; 0x30
   bb0c6:	2100      	movs	r1, #0
   bb0c8:	f7fc fc2a 	bl	b7920 <netdb_getaddrinfo>
    if (!r) {
   bb0cc:	4604      	mov	r4, r0
   bb0ce:	2800      	cmp	r0, #0
   bb0d0:	d14b      	bne.n	bb16a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb0d2:	4602      	mov	r2, r0
   bb0d4:	2101      	movs	r1, #1
   bb0d6:	6868      	ldr	r0, [r5, #4]
   bb0d8:	f7fc fef0 	bl	b7ebc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb0dc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb0de:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb0e0:	4622      	mov	r2, r4
   bb0e2:	6868      	ldr	r0, [r5, #4]
   bb0e4:	f7fc feea 	bl	b7ebc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb0e8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb0ea:	4681      	mov	r9, r0
        bool ok = false;
   bb0ec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb0ee:	2e00      	cmp	r6, #0
   bb0f0:	d03b      	beq.n	bb16a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb0f2:	2900      	cmp	r1, #0
   bb0f4:	d139      	bne.n	bb16a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb0f6:	6873      	ldr	r3, [r6, #4]
   bb0f8:	2b02      	cmp	r3, #2
   bb0fa:	d003      	beq.n	bb104 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb0fc:	2b0a      	cmp	r3, #10
   bb0fe:	d011      	beq.n	bb124 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb100:	69f6      	ldr	r6, [r6, #28]
   bb102:	e7f4      	b.n	bb0ee <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb104:	f1b8 0f00 	cmp.w	r8, #0
   bb108:	d0fa      	beq.n	bb100 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb10a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb10c:	a806      	add	r0, sp, #24
   bb10e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb110:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb112:	f7ff fa5f 	bl	ba5d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb118:	1d3c      	adds	r4, r7, #4
   bb11a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb11c:	682b      	ldr	r3, [r5, #0]
   bb11e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb120:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb122:	e7ed      	b.n	bb100 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb124:	f1b9 0f00 	cmp.w	r9, #0
   bb128:	d0ea      	beq.n	bb100 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb12a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb12c:	2210      	movs	r2, #16
   bb12e:	a801      	add	r0, sp, #4
   bb130:	f000 fa7d 	bl	bb62e <memset>
                    a.v = 6;
   bb134:	2306      	movs	r3, #6
   bb136:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb13a:	ad01      	add	r5, sp, #4
   bb13c:	f104 0308 	add.w	r3, r4, #8
   bb140:	3418      	adds	r4, #24
   bb142:	6818      	ldr	r0, [r3, #0]
   bb144:	6859      	ldr	r1, [r3, #4]
   bb146:	462a      	mov	r2, r5
   bb148:	c203      	stmia	r2!, {r0, r1}
   bb14a:	3308      	adds	r3, #8
   bb14c:	42a3      	cmp	r3, r4
   bb14e:	4615      	mov	r5, r2
   bb150:	d1f7      	bne.n	bb142 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb152:	a901      	add	r1, sp, #4
   bb154:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb156:	ad07      	add	r5, sp, #28
   bb158:	f7ff f9fe 	bl	ba558 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb15c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb15e:	1d3c      	adds	r4, r7, #4
   bb160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb162:	682b      	ldr	r3, [r5, #0]
   bb164:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb166:	4649      	mov	r1, r9
   bb168:	e7ca      	b.n	bb100 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb16a:	9800      	ldr	r0, [sp, #0]
   bb16c:	f7fc fbd0 	bl	b7910 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb170:	4638      	mov	r0, r7
   bb172:	b015      	add	sp, #84	; 0x54
   bb174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb178 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb178:	4b02      	ldr	r3, [pc, #8]	; (bb184 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb17a:	4a03      	ldr	r2, [pc, #12]	; (bb188 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb17c:	601a      	str	r2, [r3, #0]
   bb17e:	2200      	movs	r2, #0
   bb180:	605a      	str	r2, [r3, #4]

} // spark
   bb182:	4770      	bx	lr
   bb184:	2003e710 	.word	0x2003e710
   bb188:	000be4cc 	.word	0x000be4cc

000bb18c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb18c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb18e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb190:	d902      	bls.n	bb198 <pinAvailable+0xc>
    return false;
   bb192:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb194:	b002      	add	sp, #8
   bb196:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb198:	f1a0 030b 	sub.w	r3, r0, #11
   bb19c:	2b02      	cmp	r3, #2
   bb19e:	d81a      	bhi.n	bb1d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb1a0:	4c17      	ldr	r4, [pc, #92]	; (bb200 <pinAvailable+0x74>)
   bb1a2:	7821      	ldrb	r1, [r4, #0]
   bb1a4:	f3bf 8f5b 	dmb	ish
   bb1a8:	f011 0101 	ands.w	r1, r1, #1
   bb1ac:	d10b      	bne.n	bb1c6 <pinAvailable+0x3a>
   bb1ae:	4620      	mov	r0, r4
   bb1b0:	9101      	str	r1, [sp, #4]
   bb1b2:	f7f9 fc90 	bl	b4ad6 <__cxa_guard_acquire>
   bb1b6:	9901      	ldr	r1, [sp, #4]
   bb1b8:	b128      	cbz	r0, bb1c6 <pinAvailable+0x3a>
   bb1ba:	4812      	ldr	r0, [pc, #72]	; (bb204 <pinAvailable+0x78>)
   bb1bc:	f7fc ffb4 	bl	b8128 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb1c0:	4620      	mov	r0, r4
   bb1c2:	f7f9 fc8d 	bl	b4ae0 <__cxa_guard_release>
   bb1c6:	4b0f      	ldr	r3, [pc, #60]	; (bb204 <pinAvailable+0x78>)
   bb1c8:	7818      	ldrb	r0, [r3, #0]
   bb1ca:	f7fc fdc3 	bl	b7d54 <hal_spi_is_enabled>
   bb1ce:	2800      	cmp	r0, #0
   bb1d0:	d1df      	bne.n	bb192 <pinAvailable+0x6>
  return true; // 'pin' is available
   bb1d2:	2001      	movs	r0, #1
   bb1d4:	e7de      	b.n	bb194 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb1d6:	2801      	cmp	r0, #1
   bb1d8:	d809      	bhi.n	bb1ee <pinAvailable+0x62>
   bb1da:	f000 f87d 	bl	bb2d8 <_Z19__fetch_global_Wirev>
   bb1de:	2100      	movs	r1, #0
   bb1e0:	7c00      	ldrb	r0, [r0, #16]
   bb1e2:	f7fc fd6f 	bl	b7cc4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb1e6:	f080 0001 	eor.w	r0, r0, #1
   bb1ea:	b2c0      	uxtb	r0, r0
   bb1ec:	e7d2      	b.n	bb194 <pinAvailable+0x8>
   bb1ee:	3809      	subs	r0, #9
   bb1f0:	2801      	cmp	r0, #1
   bb1f2:	d8ee      	bhi.n	bb1d2 <pinAvailable+0x46>
   bb1f4:	f000 f834 	bl	bb260 <_Z22__fetch_global_Serial1v>
   bb1f8:	7c00      	ldrb	r0, [r0, #16]
   bb1fa:	f7fc fd23 	bl	b7c44 <hal_usart_is_enabled>
   bb1fe:	e7f2      	b.n	bb1e6 <pinAvailable+0x5a>
   bb200:	2003e718 	.word	0x2003e718
   bb204:	2003e71c 	.word	0x2003e71c

000bb208 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb208:	2823      	cmp	r0, #35	; 0x23
{
   bb20a:	b538      	push	{r3, r4, r5, lr}
   bb20c:	4604      	mov	r4, r0
   bb20e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb210:	d80a      	bhi.n	bb228 <pinMode+0x20>
   bb212:	29ff      	cmp	r1, #255	; 0xff
   bb214:	d008      	beq.n	bb228 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb216:	f7ff ffb9 	bl	bb18c <pinAvailable>
   bb21a:	b128      	cbz	r0, bb228 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bb21c:	4629      	mov	r1, r5
   bb21e:	4620      	mov	r0, r4
}
   bb220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bb224:	f7fc bb84 	b.w	b7930 <hal_gpio_mode>
}
   bb228:	bd38      	pop	{r3, r4, r5, pc}

000bb22a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb22a:	4770      	bx	lr

000bb22c <_Z20acquireSerial1Bufferv>:
{
   bb22c:	b538      	push	{r3, r4, r5, lr}
   bb22e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb230:	2514      	movs	r5, #20
   bb232:	462a      	mov	r2, r5
   bb234:	2100      	movs	r1, #0
   bb236:	f000 f9fa 	bl	bb62e <memset>
   bb23a:	8025      	strh	r5, [r4, #0]
   bb23c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb23e:	4907      	ldr	r1, [pc, #28]	; (bb25c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb240:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb242:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb244:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb246:	f000 f86b 	bl	bb320 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb24a:	4904      	ldr	r1, [pc, #16]	; (bb25c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb24c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb24e:	4628      	mov	r0, r5
   bb250:	f000 f866 	bl	bb320 <_ZnajRKSt9nothrow_t>
    };
   bb254:	60e0      	str	r0, [r4, #12]
}
   bb256:	4620      	mov	r0, r4
   bb258:	bd38      	pop	{r3, r4, r5, pc}
   bb25a:	bf00      	nop
   bb25c:	000be500 	.word	0x000be500

000bb260 <_Z22__fetch_global_Serial1v>:
{
   bb260:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb262:	4d0e      	ldr	r5, [pc, #56]	; (bb29c <_Z22__fetch_global_Serial1v+0x3c>)
   bb264:	7829      	ldrb	r1, [r5, #0]
   bb266:	f3bf 8f5b 	dmb	ish
   bb26a:	f011 0401 	ands.w	r4, r1, #1
{
   bb26e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb270:	d111      	bne.n	bb296 <_Z22__fetch_global_Serial1v+0x36>
   bb272:	4628      	mov	r0, r5
   bb274:	f7f9 fc2f 	bl	b4ad6 <__cxa_guard_acquire>
   bb278:	b168      	cbz	r0, bb296 <_Z22__fetch_global_Serial1v+0x36>
   bb27a:	a801      	add	r0, sp, #4
   bb27c:	f7ff ffd6 	bl	bb22c <_Z20acquireSerial1Bufferv>
   bb280:	aa01      	add	r2, sp, #4
   bb282:	4621      	mov	r1, r4
   bb284:	4806      	ldr	r0, [pc, #24]	; (bb2a0 <_Z22__fetch_global_Serial1v+0x40>)
   bb286:	f7ff fa9f 	bl	ba7c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb28a:	4628      	mov	r0, r5
   bb28c:	f7f9 fc28 	bl	b4ae0 <__cxa_guard_release>
   bb290:	4804      	ldr	r0, [pc, #16]	; (bb2a4 <_Z22__fetch_global_Serial1v+0x44>)
   bb292:	f000 f983 	bl	bb59c <atexit>
    return serial1;
}
   bb296:	4802      	ldr	r0, [pc, #8]	; (bb2a0 <_Z22__fetch_global_Serial1v+0x40>)
   bb298:	b007      	add	sp, #28
   bb29a:	bd30      	pop	{r4, r5, pc}
   bb29c:	2003e724 	.word	0x2003e724
   bb2a0:	2003e728 	.word	0x2003e728
   bb2a4:	000bb22b 	.word	0x000bb22b

000bb2a8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb2a8:	4770      	bx	lr
	...

000bb2ac <_Z17acquireWireBufferv>:
{
   bb2ac:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb2ae:	2520      	movs	r5, #32
   bb2b0:	2314      	movs	r3, #20
{
   bb2b2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb2b4:	6003      	str	r3, [r0, #0]
   bb2b6:	6085      	str	r5, [r0, #8]
   bb2b8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb2ba:	4906      	ldr	r1, [pc, #24]	; (bb2d4 <_Z17acquireWireBufferv+0x28>)
   bb2bc:	4628      	mov	r0, r5
   bb2be:	f000 f82f 	bl	bb320 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb2c2:	4904      	ldr	r1, [pc, #16]	; (bb2d4 <_Z17acquireWireBufferv+0x28>)
	};
   bb2c4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb2c6:	4628      	mov	r0, r5
   bb2c8:	f000 f82a 	bl	bb320 <_ZnajRKSt9nothrow_t>
	};
   bb2cc:	60e0      	str	r0, [r4, #12]
}
   bb2ce:	4620      	mov	r0, r4
   bb2d0:	bd38      	pop	{r3, r4, r5, pc}
   bb2d2:	bf00      	nop
   bb2d4:	000be500 	.word	0x000be500

000bb2d8 <_Z19__fetch_global_Wirev>:
{
   bb2d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb2da:	4d0e      	ldr	r5, [pc, #56]	; (bb314 <_Z19__fetch_global_Wirev+0x3c>)
   bb2dc:	7829      	ldrb	r1, [r5, #0]
   bb2de:	f3bf 8f5b 	dmb	ish
   bb2e2:	f011 0401 	ands.w	r4, r1, #1
{
   bb2e6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb2e8:	d111      	bne.n	bb30e <_Z19__fetch_global_Wirev+0x36>
   bb2ea:	4628      	mov	r0, r5
   bb2ec:	f7f9 fbf3 	bl	b4ad6 <__cxa_guard_acquire>
   bb2f0:	b168      	cbz	r0, bb30e <_Z19__fetch_global_Wirev+0x36>
   bb2f2:	a801      	add	r0, sp, #4
   bb2f4:	f7ff ffda 	bl	bb2ac <_Z17acquireWireBufferv>
   bb2f8:	aa01      	add	r2, sp, #4
   bb2fa:	4621      	mov	r1, r4
   bb2fc:	4806      	ldr	r0, [pc, #24]	; (bb318 <_Z19__fetch_global_Wirev+0x40>)
   bb2fe:	f7ff fab7 	bl	ba870 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb302:	4628      	mov	r0, r5
   bb304:	f7f9 fbec 	bl	b4ae0 <__cxa_guard_release>
   bb308:	4804      	ldr	r0, [pc, #16]	; (bb31c <_Z19__fetch_global_Wirev+0x44>)
   bb30a:	f000 f947 	bl	bb59c <atexit>
	return wire;
}
   bb30e:	4802      	ldr	r0, [pc, #8]	; (bb318 <_Z19__fetch_global_Wirev+0x40>)
   bb310:	b007      	add	sp, #28
   bb312:	bd30      	pop	{r4, r5, pc}
   bb314:	2003e740 	.word	0x2003e740
   bb318:	2003e744 	.word	0x2003e744
   bb31c:	000bb2a9 	.word	0x000bb2a9

000bb320 <_ZnajRKSt9nothrow_t>:
   bb320:	f7f9 bbd5 	b.w	b4ace <_Znaj>

000bb324 <_ZSt25__throw_bad_function_callv>:
   bb324:	b508      	push	{r3, lr}
   bb326:	f7fc fe89 	bl	b803c <abort>
	...

000bb32c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb32c:	4901      	ldr	r1, [pc, #4]	; (bb334 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb32e:	f000 b8f9 	b.w	bb524 <_ZNKSt9type_infoeqERKS_>
   bb332:	bf00      	nop
   bb334:	000be51c 	.word	0x000be51c

000bb338 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb33a:	2400      	movs	r4, #0
   bb33c:	2310      	movs	r3, #16
   bb33e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb342:	6803      	ldr	r3, [r0, #0]
   bb344:	4615      	mov	r5, r2
   bb346:	699e      	ldr	r6, [r3, #24]
   bb348:	6812      	ldr	r2, [r2, #0]
   bb34a:	466b      	mov	r3, sp
   bb34c:	e9cd 4400 	strd	r4, r4, [sp]
   bb350:	47b0      	blx	r6
   bb352:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb356:	f003 0306 	and.w	r3, r3, #6
   bb35a:	2b06      	cmp	r3, #6
   bb35c:	bf03      	ittte	eq
   bb35e:	9b00      	ldreq	r3, [sp, #0]
   bb360:	602b      	streq	r3, [r5, #0]
   bb362:	2001      	moveq	r0, #1
   bb364:	4620      	movne	r0, r4
   bb366:	b004      	add	sp, #16
   bb368:	bd70      	pop	{r4, r5, r6, pc}

000bb36a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb36a:	9800      	ldr	r0, [sp, #0]
   bb36c:	4290      	cmp	r0, r2
   bb36e:	bf14      	ite	ne
   bb370:	2001      	movne	r0, #1
   bb372:	2006      	moveq	r0, #6
   bb374:	4770      	bx	lr
	...

000bb378 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb378:	b510      	push	{r4, lr}
   bb37a:	4b03      	ldr	r3, [pc, #12]	; (bb388 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb37c:	6003      	str	r3, [r0, #0]
   bb37e:	4604      	mov	r4, r0
   bb380:	f000 f8cd 	bl	bb51e <_ZNSt9type_infoD1Ev>
   bb384:	4620      	mov	r0, r4
   bb386:	bd10      	pop	{r4, pc}
   bb388:	000be55c 	.word	0x000be55c

000bb38c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb38c:	b510      	push	{r4, lr}
   bb38e:	4604      	mov	r4, r0
   bb390:	f7ff fff2 	bl	bb378 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb394:	4620      	mov	r0, r4
   bb396:	2108      	movs	r1, #8
   bb398:	f7f9 fb9b 	bl	b4ad2 <_ZdlPvj>
   bb39c:	4620      	mov	r0, r4
   bb39e:	bd10      	pop	{r4, pc}

000bb3a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb3a4:	461f      	mov	r7, r3
   bb3a6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb3aa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb3ae:	4598      	cmp	r8, r3
   bb3b0:	4606      	mov	r6, r0
   bb3b2:	4615      	mov	r5, r2
   bb3b4:	d107      	bne.n	bb3c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb3b6:	9907      	ldr	r1, [sp, #28]
   bb3b8:	f000 f8b4 	bl	bb524 <_ZNKSt9type_infoeqERKS_>
   bb3bc:	b118      	cbz	r0, bb3c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb3be:	7165      	strb	r5, [r4, #5]
   bb3c0:	2000      	movs	r0, #0
   bb3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb3c6:	4639      	mov	r1, r7
   bb3c8:	4630      	mov	r0, r6
   bb3ca:	f000 f8ab 	bl	bb524 <_ZNKSt9type_infoeqERKS_>
   bb3ce:	2800      	cmp	r0, #0
   bb3d0:	d0f6      	beq.n	bb3c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb3d2:	2301      	movs	r3, #1
   bb3d4:	f8c4 8000 	str.w	r8, [r4]
   bb3d8:	7125      	strb	r5, [r4, #4]
   bb3da:	71a3      	strb	r3, [r4, #6]
   bb3dc:	e7f0      	b.n	bb3c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb3de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb3de:	b538      	push	{r3, r4, r5, lr}
   bb3e0:	4615      	mov	r5, r2
   bb3e2:	461c      	mov	r4, r3
   bb3e4:	f000 f89e 	bl	bb524 <_ZNKSt9type_infoeqERKS_>
   bb3e8:	b120      	cbz	r0, bb3f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb3ea:	2308      	movs	r3, #8
   bb3ec:	60e3      	str	r3, [r4, #12]
   bb3ee:	2306      	movs	r3, #6
   bb3f0:	6025      	str	r5, [r4, #0]
   bb3f2:	7123      	strb	r3, [r4, #4]
   bb3f4:	bd38      	pop	{r3, r4, r5, pc}

000bb3f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb3f8:	4605      	mov	r5, r0
   bb3fa:	460c      	mov	r4, r1
   bb3fc:	9201      	str	r2, [sp, #4]
   bb3fe:	461e      	mov	r6, r3
   bb400:	f000 f890 	bl	bb524 <_ZNKSt9type_infoeqERKS_>
   bb404:	b950      	cbnz	r0, bb41c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb406:	2e03      	cmp	r6, #3
   bb408:	d808      	bhi.n	bb41c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb40a:	6823      	ldr	r3, [r4, #0]
   bb40c:	9a01      	ldr	r2, [sp, #4]
   bb40e:	695b      	ldr	r3, [r3, #20]
   bb410:	4629      	mov	r1, r5
   bb412:	4620      	mov	r0, r4
   bb414:	b002      	add	sp, #8
   bb416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb41a:	4718      	bx	r3
   bb41c:	b002      	add	sp, #8
   bb41e:	bd70      	pop	{r4, r5, r6, pc}

000bb420 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb420:	b510      	push	{r4, lr}
   bb422:	4b03      	ldr	r3, [pc, #12]	; (bb430 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb424:	6003      	str	r3, [r0, #0]
   bb426:	4604      	mov	r4, r0
   bb428:	f7ff ffa6 	bl	bb378 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb42c:	4620      	mov	r0, r4
   bb42e:	bd10      	pop	{r4, pc}
   bb430:	000be5bc 	.word	0x000be5bc

000bb434 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb434:	b510      	push	{r4, lr}
   bb436:	4604      	mov	r4, r0
   bb438:	f7ff fff2 	bl	bb420 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb43c:	4620      	mov	r0, r4
   bb43e:	210c      	movs	r1, #12
   bb440:	f7f9 fb47 	bl	b4ad2 <_ZdlPvj>
   bb444:	4620      	mov	r0, r4
   bb446:	bd10      	pop	{r4, pc}

000bb448 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb44a:	9f08      	ldr	r7, [sp, #32]
   bb44c:	4297      	cmp	r7, r2
   bb44e:	4605      	mov	r5, r0
   bb450:	460e      	mov	r6, r1
   bb452:	4614      	mov	r4, r2
   bb454:	d00a      	beq.n	bb46c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb456:	68a8      	ldr	r0, [r5, #8]
   bb458:	6802      	ldr	r2, [r0, #0]
   bb45a:	9708      	str	r7, [sp, #32]
   bb45c:	6a15      	ldr	r5, [r2, #32]
   bb45e:	4631      	mov	r1, r6
   bb460:	4622      	mov	r2, r4
   bb462:	46ac      	mov	ip, r5
   bb464:	b003      	add	sp, #12
   bb466:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb46a:	4760      	bx	ip
   bb46c:	4619      	mov	r1, r3
   bb46e:	9301      	str	r3, [sp, #4]
   bb470:	f000 f858 	bl	bb524 <_ZNKSt9type_infoeqERKS_>
   bb474:	9b01      	ldr	r3, [sp, #4]
   bb476:	2800      	cmp	r0, #0
   bb478:	d0ed      	beq.n	bb456 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb47a:	2006      	movs	r0, #6
   bb47c:	b003      	add	sp, #12
   bb47e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb480 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb480:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb484:	460d      	mov	r5, r1
   bb486:	4619      	mov	r1, r3
   bb488:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb48c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb490:	4681      	mov	r9, r0
   bb492:	4617      	mov	r7, r2
   bb494:	4698      	mov	r8, r3
   bb496:	f000 f845 	bl	bb524 <_ZNKSt9type_infoeqERKS_>
   bb49a:	b190      	cbz	r0, bb4c2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb49c:	2d00      	cmp	r5, #0
   bb49e:	6034      	str	r4, [r6, #0]
   bb4a0:	7137      	strb	r7, [r6, #4]
   bb4a2:	db09      	blt.n	bb4b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb4a4:	1961      	adds	r1, r4, r5
   bb4a6:	458a      	cmp	sl, r1
   bb4a8:	bf0c      	ite	eq
   bb4aa:	2106      	moveq	r1, #6
   bb4ac:	2101      	movne	r1, #1
   bb4ae:	71b1      	strb	r1, [r6, #6]
   bb4b0:	2000      	movs	r0, #0
   bb4b2:	b001      	add	sp, #4
   bb4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb4b8:	3502      	adds	r5, #2
   bb4ba:	d1f9      	bne.n	bb4b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb4bc:	2301      	movs	r3, #1
   bb4be:	71b3      	strb	r3, [r6, #6]
   bb4c0:	e7f6      	b.n	bb4b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb4c2:	4554      	cmp	r4, sl
   bb4c4:	d106      	bne.n	bb4d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb4c6:	4659      	mov	r1, fp
   bb4c8:	4648      	mov	r0, r9
   bb4ca:	f000 f82b 	bl	bb524 <_ZNKSt9type_infoeqERKS_>
   bb4ce:	b108      	cbz	r0, bb4d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb4d0:	7177      	strb	r7, [r6, #5]
   bb4d2:	e7ed      	b.n	bb4b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb4d4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb4d8:	6803      	ldr	r3, [r0, #0]
   bb4da:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb4de:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb4e2:	69dc      	ldr	r4, [r3, #28]
   bb4e4:	463a      	mov	r2, r7
   bb4e6:	4643      	mov	r3, r8
   bb4e8:	4629      	mov	r1, r5
   bb4ea:	46a4      	mov	ip, r4
   bb4ec:	b001      	add	sp, #4
   bb4ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb4f2:	4760      	bx	ip

000bb4f4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb4f8:	4607      	mov	r7, r0
   bb4fa:	460c      	mov	r4, r1
   bb4fc:	4615      	mov	r5, r2
   bb4fe:	461e      	mov	r6, r3
   bb500:	f7ff ff6d 	bl	bb3de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb504:	b948      	cbnz	r0, bb51a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb506:	68b8      	ldr	r0, [r7, #8]
   bb508:	6803      	ldr	r3, [r0, #0]
   bb50a:	699f      	ldr	r7, [r3, #24]
   bb50c:	462a      	mov	r2, r5
   bb50e:	4633      	mov	r3, r6
   bb510:	4621      	mov	r1, r4
   bb512:	46bc      	mov	ip, r7
   bb514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb518:	4760      	bx	ip
   bb51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb51e <_ZNSt9type_infoD1Ev>:
   bb51e:	4770      	bx	lr

000bb520 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb520:	2000      	movs	r0, #0
   bb522:	4770      	bx	lr

000bb524 <_ZNKSt9type_infoeqERKS_>:
   bb524:	4281      	cmp	r1, r0
   bb526:	b508      	push	{r3, lr}
   bb528:	d00e      	beq.n	bb548 <_ZNKSt9type_infoeqERKS_+0x24>
   bb52a:	6840      	ldr	r0, [r0, #4]
   bb52c:	7803      	ldrb	r3, [r0, #0]
   bb52e:	2b2a      	cmp	r3, #42	; 0x2a
   bb530:	d00c      	beq.n	bb54c <_ZNKSt9type_infoeqERKS_+0x28>
   bb532:	6849      	ldr	r1, [r1, #4]
   bb534:	780b      	ldrb	r3, [r1, #0]
   bb536:	2b2a      	cmp	r3, #42	; 0x2a
   bb538:	bf08      	it	eq
   bb53a:	3101      	addeq	r1, #1
   bb53c:	f7f9 fa60 	bl	b4a00 <strcmp>
   bb540:	fab0 f080 	clz	r0, r0
   bb544:	0940      	lsrs	r0, r0, #5
   bb546:	bd08      	pop	{r3, pc}
   bb548:	2001      	movs	r0, #1
   bb54a:	e7fc      	b.n	bb546 <_ZNKSt9type_infoeqERKS_+0x22>
   bb54c:	2000      	movs	r0, #0
   bb54e:	e7fa      	b.n	bb546 <_ZNKSt9type_infoeqERKS_+0x22>

000bb550 <asctime_r>:
   bb550:	b510      	push	{r4, lr}
   bb552:	460c      	mov	r4, r1
   bb554:	6941      	ldr	r1, [r0, #20]
   bb556:	6903      	ldr	r3, [r0, #16]
   bb558:	6982      	ldr	r2, [r0, #24]
   bb55a:	b086      	sub	sp, #24
   bb55c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bb560:	9104      	str	r1, [sp, #16]
   bb562:	6801      	ldr	r1, [r0, #0]
   bb564:	9103      	str	r1, [sp, #12]
   bb566:	6841      	ldr	r1, [r0, #4]
   bb568:	9102      	str	r1, [sp, #8]
   bb56a:	6881      	ldr	r1, [r0, #8]
   bb56c:	9101      	str	r1, [sp, #4]
   bb56e:	68c1      	ldr	r1, [r0, #12]
   bb570:	9100      	str	r1, [sp, #0]
   bb572:	4907      	ldr	r1, [pc, #28]	; (bb590 <asctime_r+0x40>)
   bb574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb578:	440b      	add	r3, r1
   bb57a:	4906      	ldr	r1, [pc, #24]	; (bb594 <asctime_r+0x44>)
   bb57c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb580:	440a      	add	r2, r1
   bb582:	4620      	mov	r0, r4
   bb584:	4904      	ldr	r1, [pc, #16]	; (bb598 <asctime_r+0x48>)
   bb586:	f7fc fd39 	bl	b7ffc <siprintf>
   bb58a:	4620      	mov	r0, r4
   bb58c:	b006      	add	sp, #24
   bb58e:	bd10      	pop	{r4, pc}
   bb590:	000be62a 	.word	0x000be62a
   bb594:	000be615 	.word	0x000be615
   bb598:	000be5f5 	.word	0x000be5f5

000bb59c <atexit>:
   bb59c:	2300      	movs	r3, #0
   bb59e:	4601      	mov	r1, r0
   bb5a0:	461a      	mov	r2, r3
   bb5a2:	4618      	mov	r0, r3
   bb5a4:	f001 b858 	b.w	bc658 <__register_exitproc>

000bb5a8 <atof>:
   bb5a8:	2100      	movs	r1, #0
   bb5aa:	f000 bf17 	b.w	bc3dc <strtod>

000bb5ae <atoi>:
   bb5ae:	220a      	movs	r2, #10
   bb5b0:	2100      	movs	r1, #0
   bb5b2:	f000 bffd 	b.w	bc5b0 <strtol>

000bb5b6 <atol>:
   bb5b6:	220a      	movs	r2, #10
   bb5b8:	2100      	movs	r1, #0
   bb5ba:	f000 bff9 	b.w	bc5b0 <strtol>

000bb5be <memcmp>:
   bb5be:	b510      	push	{r4, lr}
   bb5c0:	3901      	subs	r1, #1
   bb5c2:	4402      	add	r2, r0
   bb5c4:	4290      	cmp	r0, r2
   bb5c6:	d101      	bne.n	bb5cc <memcmp+0xe>
   bb5c8:	2000      	movs	r0, #0
   bb5ca:	e005      	b.n	bb5d8 <memcmp+0x1a>
   bb5cc:	7803      	ldrb	r3, [r0, #0]
   bb5ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb5d2:	42a3      	cmp	r3, r4
   bb5d4:	d001      	beq.n	bb5da <memcmp+0x1c>
   bb5d6:	1b18      	subs	r0, r3, r4
   bb5d8:	bd10      	pop	{r4, pc}
   bb5da:	3001      	adds	r0, #1
   bb5dc:	e7f2      	b.n	bb5c4 <memcmp+0x6>

000bb5de <memcpy>:
   bb5de:	440a      	add	r2, r1
   bb5e0:	4291      	cmp	r1, r2
   bb5e2:	f100 33ff 	add.w	r3, r0, #4294967295
   bb5e6:	d100      	bne.n	bb5ea <memcpy+0xc>
   bb5e8:	4770      	bx	lr
   bb5ea:	b510      	push	{r4, lr}
   bb5ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb5f4:	4291      	cmp	r1, r2
   bb5f6:	d1f9      	bne.n	bb5ec <memcpy+0xe>
   bb5f8:	bd10      	pop	{r4, pc}

000bb5fa <memmove>:
   bb5fa:	4288      	cmp	r0, r1
   bb5fc:	b510      	push	{r4, lr}
   bb5fe:	eb01 0402 	add.w	r4, r1, r2
   bb602:	d902      	bls.n	bb60a <memmove+0x10>
   bb604:	4284      	cmp	r4, r0
   bb606:	4623      	mov	r3, r4
   bb608:	d807      	bhi.n	bb61a <memmove+0x20>
   bb60a:	1e43      	subs	r3, r0, #1
   bb60c:	42a1      	cmp	r1, r4
   bb60e:	d008      	beq.n	bb622 <memmove+0x28>
   bb610:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb614:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb618:	e7f8      	b.n	bb60c <memmove+0x12>
   bb61a:	4402      	add	r2, r0
   bb61c:	4601      	mov	r1, r0
   bb61e:	428a      	cmp	r2, r1
   bb620:	d100      	bne.n	bb624 <memmove+0x2a>
   bb622:	bd10      	pop	{r4, pc}
   bb624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb628:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb62c:	e7f7      	b.n	bb61e <memmove+0x24>

000bb62e <memset>:
   bb62e:	4402      	add	r2, r0
   bb630:	4603      	mov	r3, r0
   bb632:	4293      	cmp	r3, r2
   bb634:	d100      	bne.n	bb638 <memset+0xa>
   bb636:	4770      	bx	lr
   bb638:	f803 1b01 	strb.w	r1, [r3], #1
   bb63c:	e7f9      	b.n	bb632 <memset+0x4>
	...

000bb640 <srand>:
   bb640:	b538      	push	{r3, r4, r5, lr}
   bb642:	4b10      	ldr	r3, [pc, #64]	; (bb684 <srand+0x44>)
   bb644:	681d      	ldr	r5, [r3, #0]
   bb646:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb648:	4604      	mov	r4, r0
   bb64a:	b9b3      	cbnz	r3, bb67a <srand+0x3a>
   bb64c:	2018      	movs	r0, #24
   bb64e:	f7fc fcb5 	bl	b7fbc <malloc>
   bb652:	4602      	mov	r2, r0
   bb654:	63a8      	str	r0, [r5, #56]	; 0x38
   bb656:	b920      	cbnz	r0, bb662 <srand+0x22>
   bb658:	4b0b      	ldr	r3, [pc, #44]	; (bb688 <srand+0x48>)
   bb65a:	480c      	ldr	r0, [pc, #48]	; (bb68c <srand+0x4c>)
   bb65c:	2142      	movs	r1, #66	; 0x42
   bb65e:	f7fc fd05 	bl	b806c <__assert_func>
   bb662:	490b      	ldr	r1, [pc, #44]	; (bb690 <srand+0x50>)
   bb664:	4b0b      	ldr	r3, [pc, #44]	; (bb694 <srand+0x54>)
   bb666:	e9c0 1300 	strd	r1, r3, [r0]
   bb66a:	4b0b      	ldr	r3, [pc, #44]	; (bb698 <srand+0x58>)
   bb66c:	6083      	str	r3, [r0, #8]
   bb66e:	230b      	movs	r3, #11
   bb670:	8183      	strh	r3, [r0, #12]
   bb672:	2100      	movs	r1, #0
   bb674:	2001      	movs	r0, #1
   bb676:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb67a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb67c:	2200      	movs	r2, #0
   bb67e:	611c      	str	r4, [r3, #16]
   bb680:	615a      	str	r2, [r3, #20]
   bb682:	bd38      	pop	{r3, r4, r5, pc}
   bb684:	2003d180 	.word	0x2003d180
   bb688:	000be74f 	.word	0x000be74f
   bb68c:	000be766 	.word	0x000be766
   bb690:	abcd330e 	.word	0xabcd330e
   bb694:	e66d1234 	.word	0xe66d1234
   bb698:	0005deec 	.word	0x0005deec

000bb69c <strcat>:
   bb69c:	b510      	push	{r4, lr}
   bb69e:	4602      	mov	r2, r0
   bb6a0:	7814      	ldrb	r4, [r2, #0]
   bb6a2:	4613      	mov	r3, r2
   bb6a4:	3201      	adds	r2, #1
   bb6a6:	2c00      	cmp	r4, #0
   bb6a8:	d1fa      	bne.n	bb6a0 <strcat+0x4>
   bb6aa:	3b01      	subs	r3, #1
   bb6ac:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb6b0:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb6b4:	2a00      	cmp	r2, #0
   bb6b6:	d1f9      	bne.n	bb6ac <strcat+0x10>
   bb6b8:	bd10      	pop	{r4, pc}

000bb6ba <strcpy>:
   bb6ba:	4603      	mov	r3, r0
   bb6bc:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb6c0:	f803 2b01 	strb.w	r2, [r3], #1
   bb6c4:	2a00      	cmp	r2, #0
   bb6c6:	d1f9      	bne.n	bb6bc <strcpy+0x2>
   bb6c8:	4770      	bx	lr
	...

000bb6cc <strdup>:
   bb6cc:	4b02      	ldr	r3, [pc, #8]	; (bb6d8 <strdup+0xc>)
   bb6ce:	4601      	mov	r1, r0
   bb6d0:	6818      	ldr	r0, [r3, #0]
   bb6d2:	f000 b803 	b.w	bb6dc <_strdup_r>
   bb6d6:	bf00      	nop
   bb6d8:	2003d180 	.word	0x2003d180

000bb6dc <_strdup_r>:
   bb6dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb6de:	4604      	mov	r4, r0
   bb6e0:	4608      	mov	r0, r1
   bb6e2:	460d      	mov	r5, r1
   bb6e4:	f7f9 f996 	bl	b4a14 <strlen>
   bb6e8:	1c42      	adds	r2, r0, #1
   bb6ea:	4611      	mov	r1, r2
   bb6ec:	4620      	mov	r0, r4
   bb6ee:	9201      	str	r2, [sp, #4]
   bb6f0:	f7fc fcac 	bl	b804c <_malloc_r>
   bb6f4:	4604      	mov	r4, r0
   bb6f6:	b118      	cbz	r0, bb700 <_strdup_r+0x24>
   bb6f8:	9a01      	ldr	r2, [sp, #4]
   bb6fa:	4629      	mov	r1, r5
   bb6fc:	f7ff ff6f 	bl	bb5de <memcpy>
   bb700:	4620      	mov	r0, r4
   bb702:	b003      	add	sp, #12
   bb704:	bd30      	pop	{r4, r5, pc}

000bb706 <strncmp>:
   bb706:	b510      	push	{r4, lr}
   bb708:	b17a      	cbz	r2, bb72a <strncmp+0x24>
   bb70a:	4603      	mov	r3, r0
   bb70c:	3901      	subs	r1, #1
   bb70e:	1884      	adds	r4, r0, r2
   bb710:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb714:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb718:	4290      	cmp	r0, r2
   bb71a:	d101      	bne.n	bb720 <strncmp+0x1a>
   bb71c:	42a3      	cmp	r3, r4
   bb71e:	d101      	bne.n	bb724 <strncmp+0x1e>
   bb720:	1a80      	subs	r0, r0, r2
   bb722:	bd10      	pop	{r4, pc}
   bb724:	2800      	cmp	r0, #0
   bb726:	d1f3      	bne.n	bb710 <strncmp+0xa>
   bb728:	e7fa      	b.n	bb720 <strncmp+0x1a>
   bb72a:	4610      	mov	r0, r2
   bb72c:	e7f9      	b.n	bb722 <strncmp+0x1c>

000bb72e <strncpy>:
   bb72e:	b510      	push	{r4, lr}
   bb730:	3901      	subs	r1, #1
   bb732:	4603      	mov	r3, r0
   bb734:	b132      	cbz	r2, bb744 <strncpy+0x16>
   bb736:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb73a:	f803 4b01 	strb.w	r4, [r3], #1
   bb73e:	3a01      	subs	r2, #1
   bb740:	2c00      	cmp	r4, #0
   bb742:	d1f7      	bne.n	bb734 <strncpy+0x6>
   bb744:	441a      	add	r2, r3
   bb746:	2100      	movs	r1, #0
   bb748:	4293      	cmp	r3, r2
   bb74a:	d100      	bne.n	bb74e <strncpy+0x20>
   bb74c:	bd10      	pop	{r4, pc}
   bb74e:	f803 1b01 	strb.w	r1, [r3], #1
   bb752:	e7f9      	b.n	bb748 <strncpy+0x1a>

000bb754 <strnlen>:
   bb754:	b510      	push	{r4, lr}
   bb756:	4602      	mov	r2, r0
   bb758:	4401      	add	r1, r0
   bb75a:	428a      	cmp	r2, r1
   bb75c:	4613      	mov	r3, r2
   bb75e:	d003      	beq.n	bb768 <strnlen+0x14>
   bb760:	781c      	ldrb	r4, [r3, #0]
   bb762:	3201      	adds	r2, #1
   bb764:	2c00      	cmp	r4, #0
   bb766:	d1f8      	bne.n	bb75a <strnlen+0x6>
   bb768:	1a18      	subs	r0, r3, r0
   bb76a:	bd10      	pop	{r4, pc}

000bb76c <strstr>:
   bb76c:	780a      	ldrb	r2, [r1, #0]
   bb76e:	b570      	push	{r4, r5, r6, lr}
   bb770:	b96a      	cbnz	r2, bb78e <strstr+0x22>
   bb772:	bd70      	pop	{r4, r5, r6, pc}
   bb774:	429a      	cmp	r2, r3
   bb776:	d109      	bne.n	bb78c <strstr+0x20>
   bb778:	460c      	mov	r4, r1
   bb77a:	4605      	mov	r5, r0
   bb77c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb780:	2b00      	cmp	r3, #0
   bb782:	d0f6      	beq.n	bb772 <strstr+0x6>
   bb784:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb788:	429e      	cmp	r6, r3
   bb78a:	d0f7      	beq.n	bb77c <strstr+0x10>
   bb78c:	3001      	adds	r0, #1
   bb78e:	7803      	ldrb	r3, [r0, #0]
   bb790:	2b00      	cmp	r3, #0
   bb792:	d1ef      	bne.n	bb774 <strstr+0x8>
   bb794:	4618      	mov	r0, r3
   bb796:	e7ec      	b.n	bb772 <strstr+0x6>

000bb798 <sulp>:
   bb798:	b570      	push	{r4, r5, r6, lr}
   bb79a:	4604      	mov	r4, r0
   bb79c:	460d      	mov	r5, r1
   bb79e:	ec45 4b10 	vmov	d0, r4, r5
   bb7a2:	4616      	mov	r6, r2
   bb7a4:	f001 fed4 	bl	bd550 <__ulp>
   bb7a8:	ec51 0b10 	vmov	r0, r1, d0
   bb7ac:	b17e      	cbz	r6, bb7ce <sulp+0x36>
   bb7ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb7b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb7b6:	2b00      	cmp	r3, #0
   bb7b8:	dd09      	ble.n	bb7ce <sulp+0x36>
   bb7ba:	051b      	lsls	r3, r3, #20
   bb7bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb7c0:	2400      	movs	r4, #0
   bb7c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb7c6:	4622      	mov	r2, r4
   bb7c8:	462b      	mov	r3, r5
   bb7ca:	f7f8 fde5 	bl	b4398 <__aeabi_dmul>
   bb7ce:	bd70      	pop	{r4, r5, r6, pc}

000bb7d0 <_strtod_l>:
   bb7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb7d4:	ed2d 8b02 	vpush	{d8}
   bb7d8:	b09d      	sub	sp, #116	; 0x74
   bb7da:	461f      	mov	r7, r3
   bb7dc:	2300      	movs	r3, #0
   bb7de:	9318      	str	r3, [sp, #96]	; 0x60
   bb7e0:	4ba2      	ldr	r3, [pc, #648]	; (bba6c <_strtod_l+0x29c>)
   bb7e2:	9213      	str	r2, [sp, #76]	; 0x4c
   bb7e4:	681b      	ldr	r3, [r3, #0]
   bb7e6:	9305      	str	r3, [sp, #20]
   bb7e8:	4604      	mov	r4, r0
   bb7ea:	4618      	mov	r0, r3
   bb7ec:	4688      	mov	r8, r1
   bb7ee:	f7f9 f911 	bl	b4a14 <strlen>
   bb7f2:	f04f 0a00 	mov.w	sl, #0
   bb7f6:	4605      	mov	r5, r0
   bb7f8:	f04f 0b00 	mov.w	fp, #0
   bb7fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb802:	781a      	ldrb	r2, [r3, #0]
   bb804:	2a2b      	cmp	r2, #43	; 0x2b
   bb806:	d04e      	beq.n	bb8a6 <_strtod_l+0xd6>
   bb808:	d83b      	bhi.n	bb882 <_strtod_l+0xb2>
   bb80a:	2a0d      	cmp	r2, #13
   bb80c:	d834      	bhi.n	bb878 <_strtod_l+0xa8>
   bb80e:	2a08      	cmp	r2, #8
   bb810:	d834      	bhi.n	bb87c <_strtod_l+0xac>
   bb812:	2a00      	cmp	r2, #0
   bb814:	d03e      	beq.n	bb894 <_strtod_l+0xc4>
   bb816:	2300      	movs	r3, #0
   bb818:	930a      	str	r3, [sp, #40]	; 0x28
   bb81a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb81c:	7833      	ldrb	r3, [r6, #0]
   bb81e:	2b30      	cmp	r3, #48	; 0x30
   bb820:	f040 80b0 	bne.w	bb984 <_strtod_l+0x1b4>
   bb824:	7873      	ldrb	r3, [r6, #1]
   bb826:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb82a:	2b58      	cmp	r3, #88	; 0x58
   bb82c:	d168      	bne.n	bb900 <_strtod_l+0x130>
   bb82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb830:	9301      	str	r3, [sp, #4]
   bb832:	ab18      	add	r3, sp, #96	; 0x60
   bb834:	9702      	str	r7, [sp, #8]
   bb836:	9300      	str	r3, [sp, #0]
   bb838:	4a8d      	ldr	r2, [pc, #564]	; (bba70 <_strtod_l+0x2a0>)
   bb83a:	ab19      	add	r3, sp, #100	; 0x64
   bb83c:	a917      	add	r1, sp, #92	; 0x5c
   bb83e:	4620      	mov	r0, r4
   bb840:	f000 fff6 	bl	bc830 <__gethex>
   bb844:	f010 0707 	ands.w	r7, r0, #7
   bb848:	4605      	mov	r5, r0
   bb84a:	d005      	beq.n	bb858 <_strtod_l+0x88>
   bb84c:	2f06      	cmp	r7, #6
   bb84e:	d12c      	bne.n	bb8aa <_strtod_l+0xda>
   bb850:	3601      	adds	r6, #1
   bb852:	2300      	movs	r3, #0
   bb854:	9617      	str	r6, [sp, #92]	; 0x5c
   bb856:	930a      	str	r3, [sp, #40]	; 0x28
   bb858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb85a:	2b00      	cmp	r3, #0
   bb85c:	f040 8590 	bne.w	bc380 <_strtod_l+0xbb0>
   bb860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb862:	b1eb      	cbz	r3, bb8a0 <_strtod_l+0xd0>
   bb864:	4652      	mov	r2, sl
   bb866:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb86a:	ec43 2b10 	vmov	d0, r2, r3
   bb86e:	b01d      	add	sp, #116	; 0x74
   bb870:	ecbd 8b02 	vpop	{d8}
   bb874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb878:	2a20      	cmp	r2, #32
   bb87a:	d1cc      	bne.n	bb816 <_strtod_l+0x46>
   bb87c:	3301      	adds	r3, #1
   bb87e:	9317      	str	r3, [sp, #92]	; 0x5c
   bb880:	e7be      	b.n	bb800 <_strtod_l+0x30>
   bb882:	2a2d      	cmp	r2, #45	; 0x2d
   bb884:	d1c7      	bne.n	bb816 <_strtod_l+0x46>
   bb886:	2201      	movs	r2, #1
   bb888:	920a      	str	r2, [sp, #40]	; 0x28
   bb88a:	1c5a      	adds	r2, r3, #1
   bb88c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb88e:	785b      	ldrb	r3, [r3, #1]
   bb890:	2b00      	cmp	r3, #0
   bb892:	d1c2      	bne.n	bb81a <_strtod_l+0x4a>
   bb894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb896:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb89a:	2b00      	cmp	r3, #0
   bb89c:	f040 856e 	bne.w	bc37c <_strtod_l+0xbac>
   bb8a0:	4652      	mov	r2, sl
   bb8a2:	465b      	mov	r3, fp
   bb8a4:	e7e1      	b.n	bb86a <_strtod_l+0x9a>
   bb8a6:	2200      	movs	r2, #0
   bb8a8:	e7ee      	b.n	bb888 <_strtod_l+0xb8>
   bb8aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb8ac:	b13a      	cbz	r2, bb8be <_strtod_l+0xee>
   bb8ae:	2135      	movs	r1, #53	; 0x35
   bb8b0:	a81a      	add	r0, sp, #104	; 0x68
   bb8b2:	f001 ff58 	bl	bd766 <__copybits>
   bb8b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb8b8:	4620      	mov	r0, r4
   bb8ba:	f001 fb17 	bl	bceec <_Bfree>
   bb8be:	3f01      	subs	r7, #1
   bb8c0:	2f04      	cmp	r7, #4
   bb8c2:	d806      	bhi.n	bb8d2 <_strtod_l+0x102>
   bb8c4:	e8df f007 	tbb	[pc, r7]
   bb8c8:	1714030a 	.word	0x1714030a
   bb8cc:	0a          	.byte	0x0a
   bb8cd:	00          	.byte	0x00
   bb8ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb8d2:	0728      	lsls	r0, r5, #28
   bb8d4:	d5c0      	bpl.n	bb858 <_strtod_l+0x88>
   bb8d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb8da:	e7bd      	b.n	bb858 <_strtod_l+0x88>
   bb8dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb8e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb8e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb8e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb8ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb8ee:	e7f0      	b.n	bb8d2 <_strtod_l+0x102>
   bb8f0:	f8df b180 	ldr.w	fp, [pc, #384]	; bba74 <_strtod_l+0x2a4>
   bb8f4:	e7ed      	b.n	bb8d2 <_strtod_l+0x102>
   bb8f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb8fa:	f04f 3aff 	mov.w	sl, #4294967295
   bb8fe:	e7e8      	b.n	bb8d2 <_strtod_l+0x102>
   bb900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb902:	1c5a      	adds	r2, r3, #1
   bb904:	9217      	str	r2, [sp, #92]	; 0x5c
   bb906:	785b      	ldrb	r3, [r3, #1]
   bb908:	2b30      	cmp	r3, #48	; 0x30
   bb90a:	d0f9      	beq.n	bb900 <_strtod_l+0x130>
   bb90c:	2b00      	cmp	r3, #0
   bb90e:	d0a3      	beq.n	bb858 <_strtod_l+0x88>
   bb910:	2301      	movs	r3, #1
   bb912:	f04f 0900 	mov.w	r9, #0
   bb916:	9304      	str	r3, [sp, #16]
   bb918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb91a:	9308      	str	r3, [sp, #32]
   bb91c:	f8cd 901c 	str.w	r9, [sp, #28]
   bb920:	464f      	mov	r7, r9
   bb922:	220a      	movs	r2, #10
   bb924:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb926:	7806      	ldrb	r6, [r0, #0]
   bb928:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb92c:	b2d9      	uxtb	r1, r3
   bb92e:	2909      	cmp	r1, #9
   bb930:	d92a      	bls.n	bb988 <_strtod_l+0x1b8>
   bb932:	9905      	ldr	r1, [sp, #20]
   bb934:	462a      	mov	r2, r5
   bb936:	f7ff fee6 	bl	bb706 <strncmp>
   bb93a:	b398      	cbz	r0, bb9a4 <_strtod_l+0x1d4>
   bb93c:	2000      	movs	r0, #0
   bb93e:	4632      	mov	r2, r6
   bb940:	463d      	mov	r5, r7
   bb942:	9005      	str	r0, [sp, #20]
   bb944:	4603      	mov	r3, r0
   bb946:	2a65      	cmp	r2, #101	; 0x65
   bb948:	d001      	beq.n	bb94e <_strtod_l+0x17e>
   bb94a:	2a45      	cmp	r2, #69	; 0x45
   bb94c:	d118      	bne.n	bb980 <_strtod_l+0x1b0>
   bb94e:	b91d      	cbnz	r5, bb958 <_strtod_l+0x188>
   bb950:	9a04      	ldr	r2, [sp, #16]
   bb952:	4302      	orrs	r2, r0
   bb954:	d09e      	beq.n	bb894 <_strtod_l+0xc4>
   bb956:	2500      	movs	r5, #0
   bb958:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb95c:	f108 0201 	add.w	r2, r8, #1
   bb960:	9217      	str	r2, [sp, #92]	; 0x5c
   bb962:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb966:	2a2b      	cmp	r2, #43	; 0x2b
   bb968:	d075      	beq.n	bba56 <_strtod_l+0x286>
   bb96a:	2a2d      	cmp	r2, #45	; 0x2d
   bb96c:	d07b      	beq.n	bba66 <_strtod_l+0x296>
   bb96e:	f04f 0c00 	mov.w	ip, #0
   bb972:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb976:	2909      	cmp	r1, #9
   bb978:	f240 8082 	bls.w	bba80 <_strtod_l+0x2b0>
   bb97c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb980:	2600      	movs	r6, #0
   bb982:	e09d      	b.n	bbac0 <_strtod_l+0x2f0>
   bb984:	2300      	movs	r3, #0
   bb986:	e7c4      	b.n	bb912 <_strtod_l+0x142>
   bb988:	2f08      	cmp	r7, #8
   bb98a:	bfd8      	it	le
   bb98c:	9907      	ldrle	r1, [sp, #28]
   bb98e:	f100 0001 	add.w	r0, r0, #1
   bb992:	bfda      	itte	le
   bb994:	fb02 3301 	mlale	r3, r2, r1, r3
   bb998:	9307      	strle	r3, [sp, #28]
   bb99a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb99e:	3701      	adds	r7, #1
   bb9a0:	9017      	str	r0, [sp, #92]	; 0x5c
   bb9a2:	e7bf      	b.n	bb924 <_strtod_l+0x154>
   bb9a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9a6:	195a      	adds	r2, r3, r5
   bb9a8:	9217      	str	r2, [sp, #92]	; 0x5c
   bb9aa:	5d5a      	ldrb	r2, [r3, r5]
   bb9ac:	2f00      	cmp	r7, #0
   bb9ae:	d037      	beq.n	bba20 <_strtod_l+0x250>
   bb9b0:	9005      	str	r0, [sp, #20]
   bb9b2:	463d      	mov	r5, r7
   bb9b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb9b8:	2b09      	cmp	r3, #9
   bb9ba:	d912      	bls.n	bb9e2 <_strtod_l+0x212>
   bb9bc:	2301      	movs	r3, #1
   bb9be:	e7c2      	b.n	bb946 <_strtod_l+0x176>
   bb9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9c2:	1c5a      	adds	r2, r3, #1
   bb9c4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb9c6:	785a      	ldrb	r2, [r3, #1]
   bb9c8:	3001      	adds	r0, #1
   bb9ca:	2a30      	cmp	r2, #48	; 0x30
   bb9cc:	d0f8      	beq.n	bb9c0 <_strtod_l+0x1f0>
   bb9ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb9d2:	2b08      	cmp	r3, #8
   bb9d4:	f200 84d9 	bhi.w	bc38a <_strtod_l+0xbba>
   bb9d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9da:	9005      	str	r0, [sp, #20]
   bb9dc:	2000      	movs	r0, #0
   bb9de:	9308      	str	r3, [sp, #32]
   bb9e0:	4605      	mov	r5, r0
   bb9e2:	3a30      	subs	r2, #48	; 0x30
   bb9e4:	f100 0301 	add.w	r3, r0, #1
   bb9e8:	d014      	beq.n	bba14 <_strtod_l+0x244>
   bb9ea:	9905      	ldr	r1, [sp, #20]
   bb9ec:	4419      	add	r1, r3
   bb9ee:	9105      	str	r1, [sp, #20]
   bb9f0:	462b      	mov	r3, r5
   bb9f2:	eb00 0e05 	add.w	lr, r0, r5
   bb9f6:	210a      	movs	r1, #10
   bb9f8:	4573      	cmp	r3, lr
   bb9fa:	d113      	bne.n	bba24 <_strtod_l+0x254>
   bb9fc:	182b      	adds	r3, r5, r0
   bb9fe:	2b08      	cmp	r3, #8
   bba00:	f105 0501 	add.w	r5, r5, #1
   bba04:	4405      	add	r5, r0
   bba06:	dc1c      	bgt.n	bba42 <_strtod_l+0x272>
   bba08:	9907      	ldr	r1, [sp, #28]
   bba0a:	230a      	movs	r3, #10
   bba0c:	fb03 2301 	mla	r3, r3, r1, r2
   bba10:	9307      	str	r3, [sp, #28]
   bba12:	2300      	movs	r3, #0
   bba14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba16:	1c51      	adds	r1, r2, #1
   bba18:	9117      	str	r1, [sp, #92]	; 0x5c
   bba1a:	7852      	ldrb	r2, [r2, #1]
   bba1c:	4618      	mov	r0, r3
   bba1e:	e7c9      	b.n	bb9b4 <_strtod_l+0x1e4>
   bba20:	4638      	mov	r0, r7
   bba22:	e7d2      	b.n	bb9ca <_strtod_l+0x1fa>
   bba24:	2b08      	cmp	r3, #8
   bba26:	dc04      	bgt.n	bba32 <_strtod_l+0x262>
   bba28:	9e07      	ldr	r6, [sp, #28]
   bba2a:	434e      	muls	r6, r1
   bba2c:	9607      	str	r6, [sp, #28]
   bba2e:	3301      	adds	r3, #1
   bba30:	e7e2      	b.n	bb9f8 <_strtod_l+0x228>
   bba32:	f103 0c01 	add.w	ip, r3, #1
   bba36:	f1bc 0f10 	cmp.w	ip, #16
   bba3a:	bfd8      	it	le
   bba3c:	fb01 f909 	mulle.w	r9, r1, r9
   bba40:	e7f5      	b.n	bba2e <_strtod_l+0x25e>
   bba42:	2d10      	cmp	r5, #16
   bba44:	bfdc      	itt	le
   bba46:	230a      	movle	r3, #10
   bba48:	fb03 2909 	mlale	r9, r3, r9, r2
   bba4c:	e7e1      	b.n	bba12 <_strtod_l+0x242>
   bba4e:	2300      	movs	r3, #0
   bba50:	9305      	str	r3, [sp, #20]
   bba52:	2301      	movs	r3, #1
   bba54:	e77c      	b.n	bb950 <_strtod_l+0x180>
   bba56:	f04f 0c00 	mov.w	ip, #0
   bba5a:	f108 0202 	add.w	r2, r8, #2
   bba5e:	9217      	str	r2, [sp, #92]	; 0x5c
   bba60:	f898 2002 	ldrb.w	r2, [r8, #2]
   bba64:	e785      	b.n	bb972 <_strtod_l+0x1a2>
   bba66:	f04f 0c01 	mov.w	ip, #1
   bba6a:	e7f6      	b.n	bba5a <_strtod_l+0x28a>
   bba6c:	000be958 	.word	0x000be958
   bba70:	000be7ec 	.word	0x000be7ec
   bba74:	7ff00000 	.word	0x7ff00000
   bba78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba7a:	1c51      	adds	r1, r2, #1
   bba7c:	9117      	str	r1, [sp, #92]	; 0x5c
   bba7e:	7852      	ldrb	r2, [r2, #1]
   bba80:	2a30      	cmp	r2, #48	; 0x30
   bba82:	d0f9      	beq.n	bba78 <_strtod_l+0x2a8>
   bba84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bba88:	2908      	cmp	r1, #8
   bba8a:	f63f af79 	bhi.w	bb980 <_strtod_l+0x1b0>
   bba8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bba92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba94:	9206      	str	r2, [sp, #24]
   bba96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba98:	1c51      	adds	r1, r2, #1
   bba9a:	9117      	str	r1, [sp, #92]	; 0x5c
   bba9c:	7852      	ldrb	r2, [r2, #1]
   bba9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bbaa2:	2e09      	cmp	r6, #9
   bbaa4:	d937      	bls.n	bbb16 <_strtod_l+0x346>
   bbaa6:	9e06      	ldr	r6, [sp, #24]
   bbaa8:	1b89      	subs	r1, r1, r6
   bbaaa:	2908      	cmp	r1, #8
   bbaac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bbab0:	dc02      	bgt.n	bbab8 <_strtod_l+0x2e8>
   bbab2:	4576      	cmp	r6, lr
   bbab4:	bfa8      	it	ge
   bbab6:	4676      	movge	r6, lr
   bbab8:	f1bc 0f00 	cmp.w	ip, #0
   bbabc:	d000      	beq.n	bbac0 <_strtod_l+0x2f0>
   bbabe:	4276      	negs	r6, r6
   bbac0:	2d00      	cmp	r5, #0
   bbac2:	d14d      	bne.n	bbb60 <_strtod_l+0x390>
   bbac4:	9904      	ldr	r1, [sp, #16]
   bbac6:	4301      	orrs	r1, r0
   bbac8:	f47f aec6 	bne.w	bb858 <_strtod_l+0x88>
   bbacc:	2b00      	cmp	r3, #0
   bbace:	f47f aee1 	bne.w	bb894 <_strtod_l+0xc4>
   bbad2:	2a69      	cmp	r2, #105	; 0x69
   bbad4:	d027      	beq.n	bbb26 <_strtod_l+0x356>
   bbad6:	dc24      	bgt.n	bbb22 <_strtod_l+0x352>
   bbad8:	2a49      	cmp	r2, #73	; 0x49
   bbada:	d024      	beq.n	bbb26 <_strtod_l+0x356>
   bbadc:	2a4e      	cmp	r2, #78	; 0x4e
   bbade:	f47f aed9 	bne.w	bb894 <_strtod_l+0xc4>
   bbae2:	499f      	ldr	r1, [pc, #636]	; (bbd60 <_strtod_l+0x590>)
   bbae4:	a817      	add	r0, sp, #92	; 0x5c
   bbae6:	f001 f8fb 	bl	bcce0 <__match>
   bbaea:	2800      	cmp	r0, #0
   bbaec:	f43f aed2 	beq.w	bb894 <_strtod_l+0xc4>
   bbaf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbaf2:	781b      	ldrb	r3, [r3, #0]
   bbaf4:	2b28      	cmp	r3, #40	; 0x28
   bbaf6:	d12d      	bne.n	bbb54 <_strtod_l+0x384>
   bbaf8:	499a      	ldr	r1, [pc, #616]	; (bbd64 <_strtod_l+0x594>)
   bbafa:	aa1a      	add	r2, sp, #104	; 0x68
   bbafc:	a817      	add	r0, sp, #92	; 0x5c
   bbafe:	f001 f903 	bl	bcd08 <__hexnan>
   bbb02:	2805      	cmp	r0, #5
   bbb04:	d126      	bne.n	bbb54 <_strtod_l+0x384>
   bbb06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bbb08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bbb0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bbb10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bbb14:	e6a0      	b.n	bb858 <_strtod_l+0x88>
   bbb16:	210a      	movs	r1, #10
   bbb18:	fb01 2e0e 	mla	lr, r1, lr, r2
   bbb1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bbb20:	e7b9      	b.n	bba96 <_strtod_l+0x2c6>
   bbb22:	2a6e      	cmp	r2, #110	; 0x6e
   bbb24:	e7db      	b.n	bbade <_strtod_l+0x30e>
   bbb26:	4990      	ldr	r1, [pc, #576]	; (bbd68 <_strtod_l+0x598>)
   bbb28:	a817      	add	r0, sp, #92	; 0x5c
   bbb2a:	f001 f8d9 	bl	bcce0 <__match>
   bbb2e:	2800      	cmp	r0, #0
   bbb30:	f43f aeb0 	beq.w	bb894 <_strtod_l+0xc4>
   bbb34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbb36:	498d      	ldr	r1, [pc, #564]	; (bbd6c <_strtod_l+0x59c>)
   bbb38:	3b01      	subs	r3, #1
   bbb3a:	a817      	add	r0, sp, #92	; 0x5c
   bbb3c:	9317      	str	r3, [sp, #92]	; 0x5c
   bbb3e:	f001 f8cf 	bl	bcce0 <__match>
   bbb42:	b910      	cbnz	r0, bbb4a <_strtod_l+0x37a>
   bbb44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbb46:	3301      	adds	r3, #1
   bbb48:	9317      	str	r3, [sp, #92]	; 0x5c
   bbb4a:	f8df b230 	ldr.w	fp, [pc, #560]	; bbd7c <_strtod_l+0x5ac>
   bbb4e:	f04f 0a00 	mov.w	sl, #0
   bbb52:	e681      	b.n	bb858 <_strtod_l+0x88>
   bbb54:	4886      	ldr	r0, [pc, #536]	; (bbd70 <_strtod_l+0x5a0>)
   bbb56:	f001 fe7f 	bl	bd858 <nan>
   bbb5a:	ec5b ab10 	vmov	sl, fp, d0
   bbb5e:	e67b      	b.n	bb858 <_strtod_l+0x88>
   bbb60:	9b05      	ldr	r3, [sp, #20]
   bbb62:	9807      	ldr	r0, [sp, #28]
   bbb64:	1af3      	subs	r3, r6, r3
   bbb66:	2f00      	cmp	r7, #0
   bbb68:	bf08      	it	eq
   bbb6a:	462f      	moveq	r7, r5
   bbb6c:	2d10      	cmp	r5, #16
   bbb6e:	9306      	str	r3, [sp, #24]
   bbb70:	46a8      	mov	r8, r5
   bbb72:	bfa8      	it	ge
   bbb74:	f04f 0810 	movge.w	r8, #16
   bbb78:	f7f8 fb94 	bl	b42a4 <__aeabi_ui2d>
   bbb7c:	2d09      	cmp	r5, #9
   bbb7e:	4682      	mov	sl, r0
   bbb80:	468b      	mov	fp, r1
   bbb82:	dd13      	ble.n	bbbac <_strtod_l+0x3dc>
   bbb84:	4b7b      	ldr	r3, [pc, #492]	; (bbd74 <_strtod_l+0x5a4>)
   bbb86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bbb8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bbb8e:	f7f8 fc03 	bl	b4398 <__aeabi_dmul>
   bbb92:	4682      	mov	sl, r0
   bbb94:	4648      	mov	r0, r9
   bbb96:	468b      	mov	fp, r1
   bbb98:	f7f8 fb84 	bl	b42a4 <__aeabi_ui2d>
   bbb9c:	4602      	mov	r2, r0
   bbb9e:	460b      	mov	r3, r1
   bbba0:	4650      	mov	r0, sl
   bbba2:	4659      	mov	r1, fp
   bbba4:	f7f8 fa42 	bl	b402c <__adddf3>
   bbba8:	4682      	mov	sl, r0
   bbbaa:	468b      	mov	fp, r1
   bbbac:	2d0f      	cmp	r5, #15
   bbbae:	dc38      	bgt.n	bbc22 <_strtod_l+0x452>
   bbbb0:	9b06      	ldr	r3, [sp, #24]
   bbbb2:	2b00      	cmp	r3, #0
   bbbb4:	f43f ae50 	beq.w	bb858 <_strtod_l+0x88>
   bbbb8:	dd24      	ble.n	bbc04 <_strtod_l+0x434>
   bbbba:	2b16      	cmp	r3, #22
   bbbbc:	dc0b      	bgt.n	bbbd6 <_strtod_l+0x406>
   bbbbe:	496d      	ldr	r1, [pc, #436]	; (bbd74 <_strtod_l+0x5a4>)
   bbbc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbbc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbc8:	4652      	mov	r2, sl
   bbbca:	465b      	mov	r3, fp
   bbbcc:	f7f8 fbe4 	bl	b4398 <__aeabi_dmul>
   bbbd0:	4682      	mov	sl, r0
   bbbd2:	468b      	mov	fp, r1
   bbbd4:	e640      	b.n	bb858 <_strtod_l+0x88>
   bbbd6:	9a06      	ldr	r2, [sp, #24]
   bbbd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bbbdc:	4293      	cmp	r3, r2
   bbbde:	db20      	blt.n	bbc22 <_strtod_l+0x452>
   bbbe0:	4c64      	ldr	r4, [pc, #400]	; (bbd74 <_strtod_l+0x5a4>)
   bbbe2:	f1c5 050f 	rsb	r5, r5, #15
   bbbe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bbbea:	4652      	mov	r2, sl
   bbbec:	465b      	mov	r3, fp
   bbbee:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbf2:	f7f8 fbd1 	bl	b4398 <__aeabi_dmul>
   bbbf6:	9b06      	ldr	r3, [sp, #24]
   bbbf8:	1b5d      	subs	r5, r3, r5
   bbbfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bbbfe:	e9d4 2300 	ldrd	r2, r3, [r4]
   bbc02:	e7e3      	b.n	bbbcc <_strtod_l+0x3fc>
   bbc04:	9b06      	ldr	r3, [sp, #24]
   bbc06:	3316      	adds	r3, #22
   bbc08:	db0b      	blt.n	bbc22 <_strtod_l+0x452>
   bbc0a:	9b05      	ldr	r3, [sp, #20]
   bbc0c:	1b9e      	subs	r6, r3, r6
   bbc0e:	4b59      	ldr	r3, [pc, #356]	; (bbd74 <_strtod_l+0x5a4>)
   bbc10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bbc14:	e9d6 2300 	ldrd	r2, r3, [r6]
   bbc18:	4650      	mov	r0, sl
   bbc1a:	4659      	mov	r1, fp
   bbc1c:	f7f8 fce6 	bl	b45ec <__aeabi_ddiv>
   bbc20:	e7d6      	b.n	bbbd0 <_strtod_l+0x400>
   bbc22:	9b06      	ldr	r3, [sp, #24]
   bbc24:	eba5 0808 	sub.w	r8, r5, r8
   bbc28:	4498      	add	r8, r3
   bbc2a:	f1b8 0f00 	cmp.w	r8, #0
   bbc2e:	dd74      	ble.n	bbd1a <_strtod_l+0x54a>
   bbc30:	f018 030f 	ands.w	r3, r8, #15
   bbc34:	d00a      	beq.n	bbc4c <_strtod_l+0x47c>
   bbc36:	494f      	ldr	r1, [pc, #316]	; (bbd74 <_strtod_l+0x5a4>)
   bbc38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbc3c:	4652      	mov	r2, sl
   bbc3e:	465b      	mov	r3, fp
   bbc40:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbc44:	f7f8 fba8 	bl	b4398 <__aeabi_dmul>
   bbc48:	4682      	mov	sl, r0
   bbc4a:	468b      	mov	fp, r1
   bbc4c:	f038 080f 	bics.w	r8, r8, #15
   bbc50:	d04f      	beq.n	bbcf2 <_strtod_l+0x522>
   bbc52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bbc56:	dd22      	ble.n	bbc9e <_strtod_l+0x4ce>
   bbc58:	2500      	movs	r5, #0
   bbc5a:	462e      	mov	r6, r5
   bbc5c:	9507      	str	r5, [sp, #28]
   bbc5e:	9505      	str	r5, [sp, #20]
   bbc60:	2322      	movs	r3, #34	; 0x22
   bbc62:	f8df b118 	ldr.w	fp, [pc, #280]	; bbd7c <_strtod_l+0x5ac>
   bbc66:	6023      	str	r3, [r4, #0]
   bbc68:	f04f 0a00 	mov.w	sl, #0
   bbc6c:	9b07      	ldr	r3, [sp, #28]
   bbc6e:	2b00      	cmp	r3, #0
   bbc70:	f43f adf2 	beq.w	bb858 <_strtod_l+0x88>
   bbc74:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbc76:	4620      	mov	r0, r4
   bbc78:	f001 f938 	bl	bceec <_Bfree>
   bbc7c:	9905      	ldr	r1, [sp, #20]
   bbc7e:	4620      	mov	r0, r4
   bbc80:	f001 f934 	bl	bceec <_Bfree>
   bbc84:	4631      	mov	r1, r6
   bbc86:	4620      	mov	r0, r4
   bbc88:	f001 f930 	bl	bceec <_Bfree>
   bbc8c:	9907      	ldr	r1, [sp, #28]
   bbc8e:	4620      	mov	r0, r4
   bbc90:	f001 f92c 	bl	bceec <_Bfree>
   bbc94:	4629      	mov	r1, r5
   bbc96:	4620      	mov	r0, r4
   bbc98:	f001 f928 	bl	bceec <_Bfree>
   bbc9c:	e5dc      	b.n	bb858 <_strtod_l+0x88>
   bbc9e:	4b36      	ldr	r3, [pc, #216]	; (bbd78 <_strtod_l+0x5a8>)
   bbca0:	9304      	str	r3, [sp, #16]
   bbca2:	2300      	movs	r3, #0
   bbca4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bbca8:	4650      	mov	r0, sl
   bbcaa:	4659      	mov	r1, fp
   bbcac:	4699      	mov	r9, r3
   bbcae:	f1b8 0f01 	cmp.w	r8, #1
   bbcb2:	dc21      	bgt.n	bbcf8 <_strtod_l+0x528>
   bbcb4:	b10b      	cbz	r3, bbcba <_strtod_l+0x4ea>
   bbcb6:	4682      	mov	sl, r0
   bbcb8:	468b      	mov	fp, r1
   bbcba:	4b2f      	ldr	r3, [pc, #188]	; (bbd78 <_strtod_l+0x5a8>)
   bbcbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bbcc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bbcc4:	4652      	mov	r2, sl
   bbcc6:	465b      	mov	r3, fp
   bbcc8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bbccc:	f7f8 fb64 	bl	b4398 <__aeabi_dmul>
   bbcd0:	4b2a      	ldr	r3, [pc, #168]	; (bbd7c <_strtod_l+0x5ac>)
   bbcd2:	460a      	mov	r2, r1
   bbcd4:	400b      	ands	r3, r1
   bbcd6:	492a      	ldr	r1, [pc, #168]	; (bbd80 <_strtod_l+0x5b0>)
   bbcd8:	428b      	cmp	r3, r1
   bbcda:	4682      	mov	sl, r0
   bbcdc:	d8bc      	bhi.n	bbc58 <_strtod_l+0x488>
   bbcde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bbce2:	428b      	cmp	r3, r1
   bbce4:	bf86      	itte	hi
   bbce6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bbd84 <_strtod_l+0x5b4>
   bbcea:	f04f 3aff 	movhi.w	sl, #4294967295
   bbcee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bbcf2:	2300      	movs	r3, #0
   bbcf4:	9304      	str	r3, [sp, #16]
   bbcf6:	e084      	b.n	bbe02 <_strtod_l+0x632>
   bbcf8:	f018 0f01 	tst.w	r8, #1
   bbcfc:	d005      	beq.n	bbd0a <_strtod_l+0x53a>
   bbcfe:	9b04      	ldr	r3, [sp, #16]
   bbd00:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd04:	f7f8 fb48 	bl	b4398 <__aeabi_dmul>
   bbd08:	2301      	movs	r3, #1
   bbd0a:	9a04      	ldr	r2, [sp, #16]
   bbd0c:	3208      	adds	r2, #8
   bbd0e:	f109 0901 	add.w	r9, r9, #1
   bbd12:	ea4f 0868 	mov.w	r8, r8, asr #1
   bbd16:	9204      	str	r2, [sp, #16]
   bbd18:	e7c9      	b.n	bbcae <_strtod_l+0x4de>
   bbd1a:	d0ea      	beq.n	bbcf2 <_strtod_l+0x522>
   bbd1c:	f1c8 0800 	rsb	r8, r8, #0
   bbd20:	f018 020f 	ands.w	r2, r8, #15
   bbd24:	d00a      	beq.n	bbd3c <_strtod_l+0x56c>
   bbd26:	4b13      	ldr	r3, [pc, #76]	; (bbd74 <_strtod_l+0x5a4>)
   bbd28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bbd2c:	4650      	mov	r0, sl
   bbd2e:	4659      	mov	r1, fp
   bbd30:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd34:	f7f8 fc5a 	bl	b45ec <__aeabi_ddiv>
   bbd38:	4682      	mov	sl, r0
   bbd3a:	468b      	mov	fp, r1
   bbd3c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bbd40:	d0d7      	beq.n	bbcf2 <_strtod_l+0x522>
   bbd42:	f1b8 0f1f 	cmp.w	r8, #31
   bbd46:	dd1f      	ble.n	bbd88 <_strtod_l+0x5b8>
   bbd48:	2500      	movs	r5, #0
   bbd4a:	462e      	mov	r6, r5
   bbd4c:	9507      	str	r5, [sp, #28]
   bbd4e:	9505      	str	r5, [sp, #20]
   bbd50:	2322      	movs	r3, #34	; 0x22
   bbd52:	f04f 0a00 	mov.w	sl, #0
   bbd56:	f04f 0b00 	mov.w	fp, #0
   bbd5a:	6023      	str	r3, [r4, #0]
   bbd5c:	e786      	b.n	bbc6c <_strtod_l+0x49c>
   bbd5e:	bf00      	nop
   bbd60:	000bdfb5 	.word	0x000bdfb5
   bbd64:	000be800 	.word	0x000be800
   bbd68:	000be7e3 	.word	0x000be7e3
   bbd6c:	000be7e6 	.word	0x000be7e6
   bbd70:	000bdf9d 	.word	0x000bdf9d
   bbd74:	000bea18 	.word	0x000bea18
   bbd78:	000be9f0 	.word	0x000be9f0
   bbd7c:	7ff00000 	.word	0x7ff00000
   bbd80:	7ca00000 	.word	0x7ca00000
   bbd84:	7fefffff 	.word	0x7fefffff
   bbd88:	f018 0310 	ands.w	r3, r8, #16
   bbd8c:	bf18      	it	ne
   bbd8e:	236a      	movne	r3, #106	; 0x6a
   bbd90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc140 <_strtod_l+0x970>
   bbd94:	9304      	str	r3, [sp, #16]
   bbd96:	4650      	mov	r0, sl
   bbd98:	4659      	mov	r1, fp
   bbd9a:	2300      	movs	r3, #0
   bbd9c:	f018 0f01 	tst.w	r8, #1
   bbda0:	d004      	beq.n	bbdac <_strtod_l+0x5dc>
   bbda2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bbda6:	f7f8 faf7 	bl	b4398 <__aeabi_dmul>
   bbdaa:	2301      	movs	r3, #1
   bbdac:	ea5f 0868 	movs.w	r8, r8, asr #1
   bbdb0:	f109 0908 	add.w	r9, r9, #8
   bbdb4:	d1f2      	bne.n	bbd9c <_strtod_l+0x5cc>
   bbdb6:	b10b      	cbz	r3, bbdbc <_strtod_l+0x5ec>
   bbdb8:	4682      	mov	sl, r0
   bbdba:	468b      	mov	fp, r1
   bbdbc:	9b04      	ldr	r3, [sp, #16]
   bbdbe:	b1c3      	cbz	r3, bbdf2 <_strtod_l+0x622>
   bbdc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bbdc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bbdc8:	2b00      	cmp	r3, #0
   bbdca:	4659      	mov	r1, fp
   bbdcc:	dd11      	ble.n	bbdf2 <_strtod_l+0x622>
   bbdce:	2b1f      	cmp	r3, #31
   bbdd0:	f340 8124 	ble.w	bc01c <_strtod_l+0x84c>
   bbdd4:	2b34      	cmp	r3, #52	; 0x34
   bbdd6:	bfde      	ittt	le
   bbdd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bbddc:	f04f 33ff 	movle.w	r3, #4294967295
   bbde0:	fa03 f202 	lslle.w	r2, r3, r2
   bbde4:	f04f 0a00 	mov.w	sl, #0
   bbde8:	bfcc      	ite	gt
   bbdea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bbdee:	ea02 0b01 	andle.w	fp, r2, r1
   bbdf2:	2200      	movs	r2, #0
   bbdf4:	2300      	movs	r3, #0
   bbdf6:	4650      	mov	r0, sl
   bbdf8:	4659      	mov	r1, fp
   bbdfa:	f7f8 fd35 	bl	b4868 <__aeabi_dcmpeq>
   bbdfe:	2800      	cmp	r0, #0
   bbe00:	d1a2      	bne.n	bbd48 <_strtod_l+0x578>
   bbe02:	9b07      	ldr	r3, [sp, #28]
   bbe04:	9300      	str	r3, [sp, #0]
   bbe06:	9908      	ldr	r1, [sp, #32]
   bbe08:	462b      	mov	r3, r5
   bbe0a:	463a      	mov	r2, r7
   bbe0c:	4620      	mov	r0, r4
   bbe0e:	f001 f8d5 	bl	bcfbc <__s2b>
   bbe12:	9007      	str	r0, [sp, #28]
   bbe14:	2800      	cmp	r0, #0
   bbe16:	f43f af1f 	beq.w	bbc58 <_strtod_l+0x488>
   bbe1a:	9b05      	ldr	r3, [sp, #20]
   bbe1c:	1b9e      	subs	r6, r3, r6
   bbe1e:	9b06      	ldr	r3, [sp, #24]
   bbe20:	2b00      	cmp	r3, #0
   bbe22:	bfb4      	ite	lt
   bbe24:	4633      	movlt	r3, r6
   bbe26:	2300      	movge	r3, #0
   bbe28:	930c      	str	r3, [sp, #48]	; 0x30
   bbe2a:	9b06      	ldr	r3, [sp, #24]
   bbe2c:	2500      	movs	r5, #0
   bbe2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bbe32:	9312      	str	r3, [sp, #72]	; 0x48
   bbe34:	462e      	mov	r6, r5
   bbe36:	9b07      	ldr	r3, [sp, #28]
   bbe38:	4620      	mov	r0, r4
   bbe3a:	6859      	ldr	r1, [r3, #4]
   bbe3c:	f001 f816 	bl	bce6c <_Balloc>
   bbe40:	9005      	str	r0, [sp, #20]
   bbe42:	2800      	cmp	r0, #0
   bbe44:	f43f af0c 	beq.w	bbc60 <_strtod_l+0x490>
   bbe48:	9b07      	ldr	r3, [sp, #28]
   bbe4a:	691a      	ldr	r2, [r3, #16]
   bbe4c:	3202      	adds	r2, #2
   bbe4e:	f103 010c 	add.w	r1, r3, #12
   bbe52:	0092      	lsls	r2, r2, #2
   bbe54:	300c      	adds	r0, #12
   bbe56:	f7ff fbc2 	bl	bb5de <memcpy>
   bbe5a:	ec4b ab10 	vmov	d0, sl, fp
   bbe5e:	aa1a      	add	r2, sp, #104	; 0x68
   bbe60:	a919      	add	r1, sp, #100	; 0x64
   bbe62:	4620      	mov	r0, r4
   bbe64:	f001 fbf0 	bl	bd648 <__d2b>
   bbe68:	ec4b ab18 	vmov	d8, sl, fp
   bbe6c:	9018      	str	r0, [sp, #96]	; 0x60
   bbe6e:	2800      	cmp	r0, #0
   bbe70:	f43f aef6 	beq.w	bbc60 <_strtod_l+0x490>
   bbe74:	2101      	movs	r1, #1
   bbe76:	4620      	mov	r0, r4
   bbe78:	f001 f93a 	bl	bd0f0 <__i2b>
   bbe7c:	4606      	mov	r6, r0
   bbe7e:	2800      	cmp	r0, #0
   bbe80:	f43f aeee 	beq.w	bbc60 <_strtod_l+0x490>
   bbe84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bbe86:	9904      	ldr	r1, [sp, #16]
   bbe88:	2b00      	cmp	r3, #0
   bbe8a:	bfab      	itete	ge
   bbe8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bbe8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bbe90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bbe92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bbe96:	bfac      	ite	ge
   bbe98:	eb03 0902 	addge.w	r9, r3, r2
   bbe9c:	1ad7      	sublt	r7, r2, r3
   bbe9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bbea0:	eba3 0801 	sub.w	r8, r3, r1
   bbea4:	4490      	add	r8, r2
   bbea6:	4ba1      	ldr	r3, [pc, #644]	; (bc12c <_strtod_l+0x95c>)
   bbea8:	f108 38ff 	add.w	r8, r8, #4294967295
   bbeac:	4598      	cmp	r8, r3
   bbeae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bbeb2:	f280 80c7 	bge.w	bc044 <_strtod_l+0x874>
   bbeb6:	eba3 0308 	sub.w	r3, r3, r8
   bbeba:	2b1f      	cmp	r3, #31
   bbebc:	eba2 0203 	sub.w	r2, r2, r3
   bbec0:	f04f 0101 	mov.w	r1, #1
   bbec4:	f300 80b1 	bgt.w	bc02a <_strtod_l+0x85a>
   bbec8:	fa01 f303 	lsl.w	r3, r1, r3
   bbecc:	930d      	str	r3, [sp, #52]	; 0x34
   bbece:	2300      	movs	r3, #0
   bbed0:	9308      	str	r3, [sp, #32]
   bbed2:	eb09 0802 	add.w	r8, r9, r2
   bbed6:	9b04      	ldr	r3, [sp, #16]
   bbed8:	45c1      	cmp	r9, r8
   bbeda:	4417      	add	r7, r2
   bbedc:	441f      	add	r7, r3
   bbede:	464b      	mov	r3, r9
   bbee0:	bfa8      	it	ge
   bbee2:	4643      	movge	r3, r8
   bbee4:	42bb      	cmp	r3, r7
   bbee6:	bfa8      	it	ge
   bbee8:	463b      	movge	r3, r7
   bbeea:	2b00      	cmp	r3, #0
   bbeec:	bfc2      	ittt	gt
   bbeee:	eba8 0803 	subgt.w	r8, r8, r3
   bbef2:	1aff      	subgt	r7, r7, r3
   bbef4:	eba9 0903 	subgt.w	r9, r9, r3
   bbef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bbefa:	2b00      	cmp	r3, #0
   bbefc:	dd17      	ble.n	bbf2e <_strtod_l+0x75e>
   bbefe:	4631      	mov	r1, r6
   bbf00:	461a      	mov	r2, r3
   bbf02:	4620      	mov	r0, r4
   bbf04:	f001 f9b4 	bl	bd270 <__pow5mult>
   bbf08:	4606      	mov	r6, r0
   bbf0a:	2800      	cmp	r0, #0
   bbf0c:	f43f aea8 	beq.w	bbc60 <_strtod_l+0x490>
   bbf10:	4601      	mov	r1, r0
   bbf12:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbf14:	4620      	mov	r0, r4
   bbf16:	f001 f901 	bl	bd11c <__multiply>
   bbf1a:	900b      	str	r0, [sp, #44]	; 0x2c
   bbf1c:	2800      	cmp	r0, #0
   bbf1e:	f43f ae9f 	beq.w	bbc60 <_strtod_l+0x490>
   bbf22:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf24:	4620      	mov	r0, r4
   bbf26:	f000 ffe1 	bl	bceec <_Bfree>
   bbf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbf2c:	9318      	str	r3, [sp, #96]	; 0x60
   bbf2e:	f1b8 0f00 	cmp.w	r8, #0
   bbf32:	f300 808c 	bgt.w	bc04e <_strtod_l+0x87e>
   bbf36:	9b06      	ldr	r3, [sp, #24]
   bbf38:	2b00      	cmp	r3, #0
   bbf3a:	dd08      	ble.n	bbf4e <_strtod_l+0x77e>
   bbf3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbf3e:	9905      	ldr	r1, [sp, #20]
   bbf40:	4620      	mov	r0, r4
   bbf42:	f001 f995 	bl	bd270 <__pow5mult>
   bbf46:	9005      	str	r0, [sp, #20]
   bbf48:	2800      	cmp	r0, #0
   bbf4a:	f43f ae89 	beq.w	bbc60 <_strtod_l+0x490>
   bbf4e:	2f00      	cmp	r7, #0
   bbf50:	dd08      	ble.n	bbf64 <_strtod_l+0x794>
   bbf52:	9905      	ldr	r1, [sp, #20]
   bbf54:	463a      	mov	r2, r7
   bbf56:	4620      	mov	r0, r4
   bbf58:	f001 f9e4 	bl	bd324 <__lshift>
   bbf5c:	9005      	str	r0, [sp, #20]
   bbf5e:	2800      	cmp	r0, #0
   bbf60:	f43f ae7e 	beq.w	bbc60 <_strtod_l+0x490>
   bbf64:	f1b9 0f00 	cmp.w	r9, #0
   bbf68:	dd08      	ble.n	bbf7c <_strtod_l+0x7ac>
   bbf6a:	4631      	mov	r1, r6
   bbf6c:	464a      	mov	r2, r9
   bbf6e:	4620      	mov	r0, r4
   bbf70:	f001 f9d8 	bl	bd324 <__lshift>
   bbf74:	4606      	mov	r6, r0
   bbf76:	2800      	cmp	r0, #0
   bbf78:	f43f ae72 	beq.w	bbc60 <_strtod_l+0x490>
   bbf7c:	9a05      	ldr	r2, [sp, #20]
   bbf7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf80:	4620      	mov	r0, r4
   bbf82:	f001 fa5b 	bl	bd43c <__mdiff>
   bbf86:	4605      	mov	r5, r0
   bbf88:	2800      	cmp	r0, #0
   bbf8a:	f43f ae69 	beq.w	bbc60 <_strtod_l+0x490>
   bbf8e:	68c3      	ldr	r3, [r0, #12]
   bbf90:	930b      	str	r3, [sp, #44]	; 0x2c
   bbf92:	2300      	movs	r3, #0
   bbf94:	60c3      	str	r3, [r0, #12]
   bbf96:	4631      	mov	r1, r6
   bbf98:	f001 fa34 	bl	bd404 <__mcmp>
   bbf9c:	2800      	cmp	r0, #0
   bbf9e:	da60      	bge.n	bc062 <_strtod_l+0x892>
   bbfa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbfa2:	ea53 030a 	orrs.w	r3, r3, sl
   bbfa6:	f040 8082 	bne.w	bc0ae <_strtod_l+0x8de>
   bbfaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbfae:	2b00      	cmp	r3, #0
   bbfb0:	d17d      	bne.n	bc0ae <_strtod_l+0x8de>
   bbfb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbfb6:	0d1b      	lsrs	r3, r3, #20
   bbfb8:	051b      	lsls	r3, r3, #20
   bbfba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbfbe:	d976      	bls.n	bc0ae <_strtod_l+0x8de>
   bbfc0:	696b      	ldr	r3, [r5, #20]
   bbfc2:	b913      	cbnz	r3, bbfca <_strtod_l+0x7fa>
   bbfc4:	692b      	ldr	r3, [r5, #16]
   bbfc6:	2b01      	cmp	r3, #1
   bbfc8:	dd71      	ble.n	bc0ae <_strtod_l+0x8de>
   bbfca:	4629      	mov	r1, r5
   bbfcc:	2201      	movs	r2, #1
   bbfce:	4620      	mov	r0, r4
   bbfd0:	f001 f9a8 	bl	bd324 <__lshift>
   bbfd4:	4631      	mov	r1, r6
   bbfd6:	4605      	mov	r5, r0
   bbfd8:	f001 fa14 	bl	bd404 <__mcmp>
   bbfdc:	2800      	cmp	r0, #0
   bbfde:	dd66      	ble.n	bc0ae <_strtod_l+0x8de>
   bbfe0:	9904      	ldr	r1, [sp, #16]
   bbfe2:	4a53      	ldr	r2, [pc, #332]	; (bc130 <_strtod_l+0x960>)
   bbfe4:	465b      	mov	r3, fp
   bbfe6:	2900      	cmp	r1, #0
   bbfe8:	f000 8081 	beq.w	bc0ee <_strtod_l+0x91e>
   bbfec:	ea02 010b 	and.w	r1, r2, fp
   bbff0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbff4:	dc7b      	bgt.n	bc0ee <_strtod_l+0x91e>
   bbff6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbffa:	f77f aea9 	ble.w	bbd50 <_strtod_l+0x580>
   bbffe:	4b4d      	ldr	r3, [pc, #308]	; (bc134 <_strtod_l+0x964>)
   bc000:	4650      	mov	r0, sl
   bc002:	4659      	mov	r1, fp
   bc004:	2200      	movs	r2, #0
   bc006:	f7f8 f9c7 	bl	b4398 <__aeabi_dmul>
   bc00a:	460b      	mov	r3, r1
   bc00c:	4303      	orrs	r3, r0
   bc00e:	bf08      	it	eq
   bc010:	2322      	moveq	r3, #34	; 0x22
   bc012:	4682      	mov	sl, r0
   bc014:	468b      	mov	fp, r1
   bc016:	bf08      	it	eq
   bc018:	6023      	streq	r3, [r4, #0]
   bc01a:	e62b      	b.n	bbc74 <_strtod_l+0x4a4>
   bc01c:	f04f 32ff 	mov.w	r2, #4294967295
   bc020:	fa02 f303 	lsl.w	r3, r2, r3
   bc024:	ea03 0a0a 	and.w	sl, r3, sl
   bc028:	e6e3      	b.n	bbdf2 <_strtod_l+0x622>
   bc02a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc02e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc032:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc036:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc03a:	fa01 f308 	lsl.w	r3, r1, r8
   bc03e:	9308      	str	r3, [sp, #32]
   bc040:	910d      	str	r1, [sp, #52]	; 0x34
   bc042:	e746      	b.n	bbed2 <_strtod_l+0x702>
   bc044:	2300      	movs	r3, #0
   bc046:	9308      	str	r3, [sp, #32]
   bc048:	2301      	movs	r3, #1
   bc04a:	930d      	str	r3, [sp, #52]	; 0x34
   bc04c:	e741      	b.n	bbed2 <_strtod_l+0x702>
   bc04e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc050:	4642      	mov	r2, r8
   bc052:	4620      	mov	r0, r4
   bc054:	f001 f966 	bl	bd324 <__lshift>
   bc058:	9018      	str	r0, [sp, #96]	; 0x60
   bc05a:	2800      	cmp	r0, #0
   bc05c:	f47f af6b 	bne.w	bbf36 <_strtod_l+0x766>
   bc060:	e5fe      	b.n	bbc60 <_strtod_l+0x490>
   bc062:	465f      	mov	r7, fp
   bc064:	d16e      	bne.n	bc144 <_strtod_l+0x974>
   bc066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc068:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc06c:	b342      	cbz	r2, bc0c0 <_strtod_l+0x8f0>
   bc06e:	4a32      	ldr	r2, [pc, #200]	; (bc138 <_strtod_l+0x968>)
   bc070:	4293      	cmp	r3, r2
   bc072:	d128      	bne.n	bc0c6 <_strtod_l+0x8f6>
   bc074:	9b04      	ldr	r3, [sp, #16]
   bc076:	4651      	mov	r1, sl
   bc078:	b1eb      	cbz	r3, bc0b6 <_strtod_l+0x8e6>
   bc07a:	4b2d      	ldr	r3, [pc, #180]	; (bc130 <_strtod_l+0x960>)
   bc07c:	403b      	ands	r3, r7
   bc07e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc082:	f04f 32ff 	mov.w	r2, #4294967295
   bc086:	d819      	bhi.n	bc0bc <_strtod_l+0x8ec>
   bc088:	0d1b      	lsrs	r3, r3, #20
   bc08a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc08e:	fa02 f303 	lsl.w	r3, r2, r3
   bc092:	4299      	cmp	r1, r3
   bc094:	d117      	bne.n	bc0c6 <_strtod_l+0x8f6>
   bc096:	4b29      	ldr	r3, [pc, #164]	; (bc13c <_strtod_l+0x96c>)
   bc098:	429f      	cmp	r7, r3
   bc09a:	d102      	bne.n	bc0a2 <_strtod_l+0x8d2>
   bc09c:	3101      	adds	r1, #1
   bc09e:	f43f addf 	beq.w	bbc60 <_strtod_l+0x490>
   bc0a2:	4b23      	ldr	r3, [pc, #140]	; (bc130 <_strtod_l+0x960>)
   bc0a4:	403b      	ands	r3, r7
   bc0a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc0aa:	f04f 0a00 	mov.w	sl, #0
   bc0ae:	9b04      	ldr	r3, [sp, #16]
   bc0b0:	2b00      	cmp	r3, #0
   bc0b2:	d1a4      	bne.n	bbffe <_strtod_l+0x82e>
   bc0b4:	e5de      	b.n	bbc74 <_strtod_l+0x4a4>
   bc0b6:	f04f 33ff 	mov.w	r3, #4294967295
   bc0ba:	e7ea      	b.n	bc092 <_strtod_l+0x8c2>
   bc0bc:	4613      	mov	r3, r2
   bc0be:	e7e8      	b.n	bc092 <_strtod_l+0x8c2>
   bc0c0:	ea53 030a 	orrs.w	r3, r3, sl
   bc0c4:	d08c      	beq.n	bbfe0 <_strtod_l+0x810>
   bc0c6:	9b08      	ldr	r3, [sp, #32]
   bc0c8:	b1db      	cbz	r3, bc102 <_strtod_l+0x932>
   bc0ca:	423b      	tst	r3, r7
   bc0cc:	d0ef      	beq.n	bc0ae <_strtod_l+0x8de>
   bc0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc0d0:	9a04      	ldr	r2, [sp, #16]
   bc0d2:	4650      	mov	r0, sl
   bc0d4:	4659      	mov	r1, fp
   bc0d6:	b1c3      	cbz	r3, bc10a <_strtod_l+0x93a>
   bc0d8:	f7ff fb5e 	bl	bb798 <sulp>
   bc0dc:	4602      	mov	r2, r0
   bc0de:	460b      	mov	r3, r1
   bc0e0:	ec51 0b18 	vmov	r0, r1, d8
   bc0e4:	f7f7 ffa2 	bl	b402c <__adddf3>
   bc0e8:	4682      	mov	sl, r0
   bc0ea:	468b      	mov	fp, r1
   bc0ec:	e7df      	b.n	bc0ae <_strtod_l+0x8de>
   bc0ee:	4013      	ands	r3, r2
   bc0f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc0f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc0f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc0fc:	f04f 3aff 	mov.w	sl, #4294967295
   bc100:	e7d5      	b.n	bc0ae <_strtod_l+0x8de>
   bc102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc104:	ea13 0f0a 	tst.w	r3, sl
   bc108:	e7e0      	b.n	bc0cc <_strtod_l+0x8fc>
   bc10a:	f7ff fb45 	bl	bb798 <sulp>
   bc10e:	4602      	mov	r2, r0
   bc110:	460b      	mov	r3, r1
   bc112:	ec51 0b18 	vmov	r0, r1, d8
   bc116:	f7f7 ff87 	bl	b4028 <__aeabi_dsub>
   bc11a:	2200      	movs	r2, #0
   bc11c:	2300      	movs	r3, #0
   bc11e:	4682      	mov	sl, r0
   bc120:	468b      	mov	fp, r1
   bc122:	f7f8 fba1 	bl	b4868 <__aeabi_dcmpeq>
   bc126:	2800      	cmp	r0, #0
   bc128:	d0c1      	beq.n	bc0ae <_strtod_l+0x8de>
   bc12a:	e611      	b.n	bbd50 <_strtod_l+0x580>
   bc12c:	fffffc02 	.word	0xfffffc02
   bc130:	7ff00000 	.word	0x7ff00000
   bc134:	39500000 	.word	0x39500000
   bc138:	000fffff 	.word	0x000fffff
   bc13c:	7fefffff 	.word	0x7fefffff
   bc140:	000be818 	.word	0x000be818
   bc144:	4631      	mov	r1, r6
   bc146:	4628      	mov	r0, r5
   bc148:	f001 fada 	bl	bd700 <__ratio>
   bc14c:	ec59 8b10 	vmov	r8, r9, d0
   bc150:	ee10 0a10 	vmov	r0, s0
   bc154:	2200      	movs	r2, #0
   bc156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc15a:	4649      	mov	r1, r9
   bc15c:	f7f8 fb98 	bl	b4890 <__aeabi_dcmple>
   bc160:	2800      	cmp	r0, #0
   bc162:	d07a      	beq.n	bc25a <_strtod_l+0xa8a>
   bc164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc166:	2b00      	cmp	r3, #0
   bc168:	d04a      	beq.n	bc200 <_strtod_l+0xa30>
   bc16a:	4b95      	ldr	r3, [pc, #596]	; (bc3c0 <_strtod_l+0xbf0>)
   bc16c:	2200      	movs	r2, #0
   bc16e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc172:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc3c0 <_strtod_l+0xbf0>
   bc176:	f04f 0800 	mov.w	r8, #0
   bc17a:	4b92      	ldr	r3, [pc, #584]	; (bc3c4 <_strtod_l+0xbf4>)
   bc17c:	403b      	ands	r3, r7
   bc17e:	930d      	str	r3, [sp, #52]	; 0x34
   bc180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc182:	4b91      	ldr	r3, [pc, #580]	; (bc3c8 <_strtod_l+0xbf8>)
   bc184:	429a      	cmp	r2, r3
   bc186:	f040 80b0 	bne.w	bc2ea <_strtod_l+0xb1a>
   bc18a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc18e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc192:	ec4b ab10 	vmov	d0, sl, fp
   bc196:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc19a:	f001 f9d9 	bl	bd550 <__ulp>
   bc19e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc1a2:	ec53 2b10 	vmov	r2, r3, d0
   bc1a6:	f7f8 f8f7 	bl	b4398 <__aeabi_dmul>
   bc1aa:	4652      	mov	r2, sl
   bc1ac:	465b      	mov	r3, fp
   bc1ae:	f7f7 ff3d 	bl	b402c <__adddf3>
   bc1b2:	460b      	mov	r3, r1
   bc1b4:	4983      	ldr	r1, [pc, #524]	; (bc3c4 <_strtod_l+0xbf4>)
   bc1b6:	4a85      	ldr	r2, [pc, #532]	; (bc3cc <_strtod_l+0xbfc>)
   bc1b8:	4019      	ands	r1, r3
   bc1ba:	4291      	cmp	r1, r2
   bc1bc:	4682      	mov	sl, r0
   bc1be:	d960      	bls.n	bc282 <_strtod_l+0xab2>
   bc1c0:	ee18 3a90 	vmov	r3, s17
   bc1c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc1c8:	4293      	cmp	r3, r2
   bc1ca:	d104      	bne.n	bc1d6 <_strtod_l+0xa06>
   bc1cc:	ee18 3a10 	vmov	r3, s16
   bc1d0:	3301      	adds	r3, #1
   bc1d2:	f43f ad45 	beq.w	bbc60 <_strtod_l+0x490>
   bc1d6:	f8df b200 	ldr.w	fp, [pc, #512]	; bc3d8 <_strtod_l+0xc08>
   bc1da:	f04f 3aff 	mov.w	sl, #4294967295
   bc1de:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc1e0:	4620      	mov	r0, r4
   bc1e2:	f000 fe83 	bl	bceec <_Bfree>
   bc1e6:	9905      	ldr	r1, [sp, #20]
   bc1e8:	4620      	mov	r0, r4
   bc1ea:	f000 fe7f 	bl	bceec <_Bfree>
   bc1ee:	4631      	mov	r1, r6
   bc1f0:	4620      	mov	r0, r4
   bc1f2:	f000 fe7b 	bl	bceec <_Bfree>
   bc1f6:	4629      	mov	r1, r5
   bc1f8:	4620      	mov	r0, r4
   bc1fa:	f000 fe77 	bl	bceec <_Bfree>
   bc1fe:	e61a      	b.n	bbe36 <_strtod_l+0x666>
   bc200:	f1ba 0f00 	cmp.w	sl, #0
   bc204:	d11b      	bne.n	bc23e <_strtod_l+0xa6e>
   bc206:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc20a:	b9f3      	cbnz	r3, bc24a <_strtod_l+0xa7a>
   bc20c:	4b6c      	ldr	r3, [pc, #432]	; (bc3c0 <_strtod_l+0xbf0>)
   bc20e:	2200      	movs	r2, #0
   bc210:	4640      	mov	r0, r8
   bc212:	4649      	mov	r1, r9
   bc214:	f7f8 fb32 	bl	b487c <__aeabi_dcmplt>
   bc218:	b9d0      	cbnz	r0, bc250 <_strtod_l+0xa80>
   bc21a:	4640      	mov	r0, r8
   bc21c:	4649      	mov	r1, r9
   bc21e:	4b6c      	ldr	r3, [pc, #432]	; (bc3d0 <_strtod_l+0xc00>)
   bc220:	2200      	movs	r2, #0
   bc222:	f7f8 f8b9 	bl	b4398 <__aeabi_dmul>
   bc226:	4680      	mov	r8, r0
   bc228:	4689      	mov	r9, r1
   bc22a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc22e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc232:	9315      	str	r3, [sp, #84]	; 0x54
   bc234:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc238:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc23c:	e79d      	b.n	bc17a <_strtod_l+0x9aa>
   bc23e:	f1ba 0f01 	cmp.w	sl, #1
   bc242:	d102      	bne.n	bc24a <_strtod_l+0xa7a>
   bc244:	2f00      	cmp	r7, #0
   bc246:	f43f ad83 	beq.w	bbd50 <_strtod_l+0x580>
   bc24a:	4b62      	ldr	r3, [pc, #392]	; (bc3d4 <_strtod_l+0xc04>)
   bc24c:	2200      	movs	r2, #0
   bc24e:	e78e      	b.n	bc16e <_strtod_l+0x99e>
   bc250:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc3d0 <_strtod_l+0xc00>
   bc254:	f04f 0800 	mov.w	r8, #0
   bc258:	e7e7      	b.n	bc22a <_strtod_l+0xa5a>
   bc25a:	4b5d      	ldr	r3, [pc, #372]	; (bc3d0 <_strtod_l+0xc00>)
   bc25c:	4640      	mov	r0, r8
   bc25e:	4649      	mov	r1, r9
   bc260:	2200      	movs	r2, #0
   bc262:	f7f8 f899 	bl	b4398 <__aeabi_dmul>
   bc266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc268:	4680      	mov	r8, r0
   bc26a:	4689      	mov	r9, r1
   bc26c:	b933      	cbnz	r3, bc27c <_strtod_l+0xaac>
   bc26e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc272:	900e      	str	r0, [sp, #56]	; 0x38
   bc274:	930f      	str	r3, [sp, #60]	; 0x3c
   bc276:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc27a:	e7dd      	b.n	bc238 <_strtod_l+0xa68>
   bc27c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc280:	e7f9      	b.n	bc276 <_strtod_l+0xaa6>
   bc282:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc286:	9b04      	ldr	r3, [sp, #16]
   bc288:	2b00      	cmp	r3, #0
   bc28a:	d1a8      	bne.n	bc1de <_strtod_l+0xa0e>
   bc28c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc290:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc292:	0d1b      	lsrs	r3, r3, #20
   bc294:	051b      	lsls	r3, r3, #20
   bc296:	429a      	cmp	r2, r3
   bc298:	d1a1      	bne.n	bc1de <_strtod_l+0xa0e>
   bc29a:	4640      	mov	r0, r8
   bc29c:	4649      	mov	r1, r9
   bc29e:	f7f8 fbc1 	bl	b4a24 <__aeabi_d2lz>
   bc2a2:	f7f8 f84b 	bl	b433c <__aeabi_l2d>
   bc2a6:	4602      	mov	r2, r0
   bc2a8:	460b      	mov	r3, r1
   bc2aa:	4640      	mov	r0, r8
   bc2ac:	4649      	mov	r1, r9
   bc2ae:	f7f7 febb 	bl	b4028 <__aeabi_dsub>
   bc2b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc2b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc2b8:	ea43 030a 	orr.w	r3, r3, sl
   bc2bc:	4313      	orrs	r3, r2
   bc2be:	4680      	mov	r8, r0
   bc2c0:	4689      	mov	r9, r1
   bc2c2:	d055      	beq.n	bc370 <_strtod_l+0xba0>
   bc2c4:	a336      	add	r3, pc, #216	; (adr r3, bc3a0 <_strtod_l+0xbd0>)
   bc2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2ca:	f7f8 fad7 	bl	b487c <__aeabi_dcmplt>
   bc2ce:	2800      	cmp	r0, #0
   bc2d0:	f47f acd0 	bne.w	bbc74 <_strtod_l+0x4a4>
   bc2d4:	a334      	add	r3, pc, #208	; (adr r3, bc3a8 <_strtod_l+0xbd8>)
   bc2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2da:	4640      	mov	r0, r8
   bc2dc:	4649      	mov	r1, r9
   bc2de:	f7f8 faeb 	bl	b48b8 <__aeabi_dcmpgt>
   bc2e2:	2800      	cmp	r0, #0
   bc2e4:	f43f af7b 	beq.w	bc1de <_strtod_l+0xa0e>
   bc2e8:	e4c4      	b.n	bbc74 <_strtod_l+0x4a4>
   bc2ea:	9b04      	ldr	r3, [sp, #16]
   bc2ec:	b333      	cbz	r3, bc33c <_strtod_l+0xb6c>
   bc2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc2f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc2f4:	d822      	bhi.n	bc33c <_strtod_l+0xb6c>
   bc2f6:	a32e      	add	r3, pc, #184	; (adr r3, bc3b0 <_strtod_l+0xbe0>)
   bc2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2fc:	4640      	mov	r0, r8
   bc2fe:	4649      	mov	r1, r9
   bc300:	f7f8 fac6 	bl	b4890 <__aeabi_dcmple>
   bc304:	b1a0      	cbz	r0, bc330 <_strtod_l+0xb60>
   bc306:	4649      	mov	r1, r9
   bc308:	4640      	mov	r0, r8
   bc30a:	f7f8 fb07 	bl	b491c <__aeabi_d2uiz>
   bc30e:	2801      	cmp	r0, #1
   bc310:	bf38      	it	cc
   bc312:	2001      	movcc	r0, #1
   bc314:	f7f7 ffc6 	bl	b42a4 <__aeabi_ui2d>
   bc318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc31a:	4680      	mov	r8, r0
   bc31c:	4689      	mov	r9, r1
   bc31e:	bb23      	cbnz	r3, bc36a <_strtod_l+0xb9a>
   bc320:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc324:	9010      	str	r0, [sp, #64]	; 0x40
   bc326:	9311      	str	r3, [sp, #68]	; 0x44
   bc328:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc32c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc330:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc334:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc338:	1a9b      	subs	r3, r3, r2
   bc33a:	9309      	str	r3, [sp, #36]	; 0x24
   bc33c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc340:	eeb0 0a48 	vmov.f32	s0, s16
   bc344:	eef0 0a68 	vmov.f32	s1, s17
   bc348:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc34c:	f001 f900 	bl	bd550 <__ulp>
   bc350:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc354:	ec53 2b10 	vmov	r2, r3, d0
   bc358:	f7f8 f81e 	bl	b4398 <__aeabi_dmul>
   bc35c:	ec53 2b18 	vmov	r2, r3, d8
   bc360:	f7f7 fe64 	bl	b402c <__adddf3>
   bc364:	4682      	mov	sl, r0
   bc366:	468b      	mov	fp, r1
   bc368:	e78d      	b.n	bc286 <_strtod_l+0xab6>
   bc36a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc36e:	e7db      	b.n	bc328 <_strtod_l+0xb58>
   bc370:	a311      	add	r3, pc, #68	; (adr r3, bc3b8 <_strtod_l+0xbe8>)
   bc372:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc376:	f7f8 fa81 	bl	b487c <__aeabi_dcmplt>
   bc37a:	e7b2      	b.n	bc2e2 <_strtod_l+0xb12>
   bc37c:	2300      	movs	r3, #0
   bc37e:	930a      	str	r3, [sp, #40]	; 0x28
   bc380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc384:	6013      	str	r3, [r2, #0]
   bc386:	f7ff ba6b 	b.w	bb860 <_strtod_l+0x90>
   bc38a:	2a65      	cmp	r2, #101	; 0x65
   bc38c:	f43f ab5f 	beq.w	bba4e <_strtod_l+0x27e>
   bc390:	2a45      	cmp	r2, #69	; 0x45
   bc392:	f43f ab5c 	beq.w	bba4e <_strtod_l+0x27e>
   bc396:	2301      	movs	r3, #1
   bc398:	f7ff bb94 	b.w	bbac4 <_strtod_l+0x2f4>
   bc39c:	f3af 8000 	nop.w
   bc3a0:	94a03595 	.word	0x94a03595
   bc3a4:	3fdfffff 	.word	0x3fdfffff
   bc3a8:	35afe535 	.word	0x35afe535
   bc3ac:	3fe00000 	.word	0x3fe00000
   bc3b0:	ffc00000 	.word	0xffc00000
   bc3b4:	41dfffff 	.word	0x41dfffff
   bc3b8:	94a03595 	.word	0x94a03595
   bc3bc:	3fcfffff 	.word	0x3fcfffff
   bc3c0:	3ff00000 	.word	0x3ff00000
   bc3c4:	7ff00000 	.word	0x7ff00000
   bc3c8:	7fe00000 	.word	0x7fe00000
   bc3cc:	7c9fffff 	.word	0x7c9fffff
   bc3d0:	3fe00000 	.word	0x3fe00000
   bc3d4:	bff00000 	.word	0xbff00000
   bc3d8:	7fefffff 	.word	0x7fefffff

000bc3dc <strtod>:
   bc3dc:	460a      	mov	r2, r1
   bc3de:	4601      	mov	r1, r0
   bc3e0:	4802      	ldr	r0, [pc, #8]	; (bc3ec <strtod+0x10>)
   bc3e2:	4b03      	ldr	r3, [pc, #12]	; (bc3f0 <strtod+0x14>)
   bc3e4:	6800      	ldr	r0, [r0, #0]
   bc3e6:	f7ff b9f3 	b.w	bb7d0 <_strtod_l>
   bc3ea:	bf00      	nop
   bc3ec:	2003d180 	.word	0x2003d180
   bc3f0:	2003d1ec 	.word	0x2003d1ec

000bc3f4 <strtok>:
   bc3f4:	4b16      	ldr	r3, [pc, #88]	; (bc450 <strtok+0x5c>)
   bc3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc3f8:	681e      	ldr	r6, [r3, #0]
   bc3fa:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bc3fc:	4605      	mov	r5, r0
   bc3fe:	b9fc      	cbnz	r4, bc440 <strtok+0x4c>
   bc400:	2050      	movs	r0, #80	; 0x50
   bc402:	9101      	str	r1, [sp, #4]
   bc404:	f7fb fdda 	bl	b7fbc <malloc>
   bc408:	9901      	ldr	r1, [sp, #4]
   bc40a:	65b0      	str	r0, [r6, #88]	; 0x58
   bc40c:	4602      	mov	r2, r0
   bc40e:	b920      	cbnz	r0, bc41a <strtok+0x26>
   bc410:	4b10      	ldr	r3, [pc, #64]	; (bc454 <strtok+0x60>)
   bc412:	4811      	ldr	r0, [pc, #68]	; (bc458 <strtok+0x64>)
   bc414:	2157      	movs	r1, #87	; 0x57
   bc416:	f7fb fe29 	bl	b806c <__assert_func>
   bc41a:	e9c0 4400 	strd	r4, r4, [r0]
   bc41e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bc422:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bc426:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bc42a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bc42e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bc432:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bc436:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bc43a:	6184      	str	r4, [r0, #24]
   bc43c:	7704      	strb	r4, [r0, #28]
   bc43e:	6244      	str	r4, [r0, #36]	; 0x24
   bc440:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bc442:	2301      	movs	r3, #1
   bc444:	4628      	mov	r0, r5
   bc446:	b002      	add	sp, #8
   bc448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bc44c:	f000 b806 	b.w	bc45c <__strtok_r>
   bc450:	2003d180 	.word	0x2003d180
   bc454:	000be74f 	.word	0x000be74f
   bc458:	000be840 	.word	0x000be840

000bc45c <__strtok_r>:
   bc45c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc45e:	b908      	cbnz	r0, bc464 <__strtok_r+0x8>
   bc460:	6810      	ldr	r0, [r2, #0]
   bc462:	b188      	cbz	r0, bc488 <__strtok_r+0x2c>
   bc464:	4604      	mov	r4, r0
   bc466:	4620      	mov	r0, r4
   bc468:	f814 5b01 	ldrb.w	r5, [r4], #1
   bc46c:	460f      	mov	r7, r1
   bc46e:	f817 6b01 	ldrb.w	r6, [r7], #1
   bc472:	b91e      	cbnz	r6, bc47c <__strtok_r+0x20>
   bc474:	b965      	cbnz	r5, bc490 <__strtok_r+0x34>
   bc476:	6015      	str	r5, [r2, #0]
   bc478:	4628      	mov	r0, r5
   bc47a:	e005      	b.n	bc488 <__strtok_r+0x2c>
   bc47c:	42b5      	cmp	r5, r6
   bc47e:	d1f6      	bne.n	bc46e <__strtok_r+0x12>
   bc480:	2b00      	cmp	r3, #0
   bc482:	d1f0      	bne.n	bc466 <__strtok_r+0xa>
   bc484:	6014      	str	r4, [r2, #0]
   bc486:	7003      	strb	r3, [r0, #0]
   bc488:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc48a:	461c      	mov	r4, r3
   bc48c:	e00c      	b.n	bc4a8 <__strtok_r+0x4c>
   bc48e:	b915      	cbnz	r5, bc496 <__strtok_r+0x3a>
   bc490:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc494:	460e      	mov	r6, r1
   bc496:	f816 5b01 	ldrb.w	r5, [r6], #1
   bc49a:	42ab      	cmp	r3, r5
   bc49c:	d1f7      	bne.n	bc48e <__strtok_r+0x32>
   bc49e:	2b00      	cmp	r3, #0
   bc4a0:	d0f3      	beq.n	bc48a <__strtok_r+0x2e>
   bc4a2:	2300      	movs	r3, #0
   bc4a4:	f804 3c01 	strb.w	r3, [r4, #-1]
   bc4a8:	6014      	str	r4, [r2, #0]
   bc4aa:	e7ed      	b.n	bc488 <__strtok_r+0x2c>

000bc4ac <_strtol_l.constprop.0>:
   bc4ac:	2b01      	cmp	r3, #1
   bc4ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc4b2:	d001      	beq.n	bc4b8 <_strtol_l.constprop.0+0xc>
   bc4b4:	2b24      	cmp	r3, #36	; 0x24
   bc4b6:	d906      	bls.n	bc4c6 <_strtol_l.constprop.0+0x1a>
   bc4b8:	f7fb fdd0 	bl	b805c <__errno>
   bc4bc:	2316      	movs	r3, #22
   bc4be:	6003      	str	r3, [r0, #0]
   bc4c0:	2000      	movs	r0, #0
   bc4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc4c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc5ac <_strtol_l.constprop.0+0x100>
   bc4ca:	460d      	mov	r5, r1
   bc4cc:	462e      	mov	r6, r5
   bc4ce:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc4d2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc4d6:	f017 0708 	ands.w	r7, r7, #8
   bc4da:	d1f7      	bne.n	bc4cc <_strtol_l.constprop.0+0x20>
   bc4dc:	2c2d      	cmp	r4, #45	; 0x2d
   bc4de:	d132      	bne.n	bc546 <_strtol_l.constprop.0+0x9a>
   bc4e0:	782c      	ldrb	r4, [r5, #0]
   bc4e2:	2701      	movs	r7, #1
   bc4e4:	1cb5      	adds	r5, r6, #2
   bc4e6:	2b00      	cmp	r3, #0
   bc4e8:	d05b      	beq.n	bc5a2 <_strtol_l.constprop.0+0xf6>
   bc4ea:	2b10      	cmp	r3, #16
   bc4ec:	d109      	bne.n	bc502 <_strtol_l.constprop.0+0x56>
   bc4ee:	2c30      	cmp	r4, #48	; 0x30
   bc4f0:	d107      	bne.n	bc502 <_strtol_l.constprop.0+0x56>
   bc4f2:	782c      	ldrb	r4, [r5, #0]
   bc4f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc4f8:	2c58      	cmp	r4, #88	; 0x58
   bc4fa:	d14d      	bne.n	bc598 <_strtol_l.constprop.0+0xec>
   bc4fc:	786c      	ldrb	r4, [r5, #1]
   bc4fe:	2310      	movs	r3, #16
   bc500:	3502      	adds	r5, #2
   bc502:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc506:	f108 38ff 	add.w	r8, r8, #4294967295
   bc50a:	f04f 0c00 	mov.w	ip, #0
   bc50e:	fbb8 f9f3 	udiv	r9, r8, r3
   bc512:	4666      	mov	r6, ip
   bc514:	fb03 8a19 	mls	sl, r3, r9, r8
   bc518:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc51c:	f1be 0f09 	cmp.w	lr, #9
   bc520:	d816      	bhi.n	bc550 <_strtol_l.constprop.0+0xa4>
   bc522:	4674      	mov	r4, lr
   bc524:	42a3      	cmp	r3, r4
   bc526:	dd24      	ble.n	bc572 <_strtol_l.constprop.0+0xc6>
   bc528:	f1bc 0f00 	cmp.w	ip, #0
   bc52c:	db1e      	blt.n	bc56c <_strtol_l.constprop.0+0xc0>
   bc52e:	45b1      	cmp	r9, r6
   bc530:	d31c      	bcc.n	bc56c <_strtol_l.constprop.0+0xc0>
   bc532:	d101      	bne.n	bc538 <_strtol_l.constprop.0+0x8c>
   bc534:	45a2      	cmp	sl, r4
   bc536:	db19      	blt.n	bc56c <_strtol_l.constprop.0+0xc0>
   bc538:	fb06 4603 	mla	r6, r6, r3, r4
   bc53c:	f04f 0c01 	mov.w	ip, #1
   bc540:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc544:	e7e8      	b.n	bc518 <_strtol_l.constprop.0+0x6c>
   bc546:	2c2b      	cmp	r4, #43	; 0x2b
   bc548:	bf04      	itt	eq
   bc54a:	782c      	ldrbeq	r4, [r5, #0]
   bc54c:	1cb5      	addeq	r5, r6, #2
   bc54e:	e7ca      	b.n	bc4e6 <_strtol_l.constprop.0+0x3a>
   bc550:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc554:	f1be 0f19 	cmp.w	lr, #25
   bc558:	d801      	bhi.n	bc55e <_strtol_l.constprop.0+0xb2>
   bc55a:	3c37      	subs	r4, #55	; 0x37
   bc55c:	e7e2      	b.n	bc524 <_strtol_l.constprop.0+0x78>
   bc55e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc562:	f1be 0f19 	cmp.w	lr, #25
   bc566:	d804      	bhi.n	bc572 <_strtol_l.constprop.0+0xc6>
   bc568:	3c57      	subs	r4, #87	; 0x57
   bc56a:	e7db      	b.n	bc524 <_strtol_l.constprop.0+0x78>
   bc56c:	f04f 3cff 	mov.w	ip, #4294967295
   bc570:	e7e6      	b.n	bc540 <_strtol_l.constprop.0+0x94>
   bc572:	f1bc 0f00 	cmp.w	ip, #0
   bc576:	da05      	bge.n	bc584 <_strtol_l.constprop.0+0xd8>
   bc578:	2322      	movs	r3, #34	; 0x22
   bc57a:	6003      	str	r3, [r0, #0]
   bc57c:	4646      	mov	r6, r8
   bc57e:	b942      	cbnz	r2, bc592 <_strtol_l.constprop.0+0xe6>
   bc580:	4630      	mov	r0, r6
   bc582:	e79e      	b.n	bc4c2 <_strtol_l.constprop.0+0x16>
   bc584:	b107      	cbz	r7, bc588 <_strtol_l.constprop.0+0xdc>
   bc586:	4276      	negs	r6, r6
   bc588:	2a00      	cmp	r2, #0
   bc58a:	d0f9      	beq.n	bc580 <_strtol_l.constprop.0+0xd4>
   bc58c:	f1bc 0f00 	cmp.w	ip, #0
   bc590:	d000      	beq.n	bc594 <_strtol_l.constprop.0+0xe8>
   bc592:	1e69      	subs	r1, r5, #1
   bc594:	6011      	str	r1, [r2, #0]
   bc596:	e7f3      	b.n	bc580 <_strtol_l.constprop.0+0xd4>
   bc598:	2430      	movs	r4, #48	; 0x30
   bc59a:	2b00      	cmp	r3, #0
   bc59c:	d1b1      	bne.n	bc502 <_strtol_l.constprop.0+0x56>
   bc59e:	2308      	movs	r3, #8
   bc5a0:	e7af      	b.n	bc502 <_strtol_l.constprop.0+0x56>
   bc5a2:	2c30      	cmp	r4, #48	; 0x30
   bc5a4:	d0a5      	beq.n	bc4f2 <_strtol_l.constprop.0+0x46>
   bc5a6:	230a      	movs	r3, #10
   bc5a8:	e7ab      	b.n	bc502 <_strtol_l.constprop.0+0x56>
   bc5aa:	bf00      	nop
   bc5ac:	000be64f 	.word	0x000be64f

000bc5b0 <strtol>:
   bc5b0:	4613      	mov	r3, r2
   bc5b2:	460a      	mov	r2, r1
   bc5b4:	4601      	mov	r1, r0
   bc5b6:	4802      	ldr	r0, [pc, #8]	; (bc5c0 <strtol+0x10>)
   bc5b8:	6800      	ldr	r0, [r0, #0]
   bc5ba:	f7ff bf77 	b.w	bc4ac <_strtol_l.constprop.0>
   bc5be:	bf00      	nop
   bc5c0:	2003d180 	.word	0x2003d180

000bc5c4 <close>:
   bc5c4:	4b02      	ldr	r3, [pc, #8]	; (bc5d0 <close+0xc>)
   bc5c6:	4601      	mov	r1, r0
   bc5c8:	6818      	ldr	r0, [r3, #0]
   bc5ca:	f000 b8a7 	b.w	bc71c <_close_r>
   bc5ce:	bf00      	nop
   bc5d0:	2003d180 	.word	0x2003d180

000bc5d4 <fstat>:
   bc5d4:	4b02      	ldr	r3, [pc, #8]	; (bc5e0 <fstat+0xc>)
   bc5d6:	460a      	mov	r2, r1
   bc5d8:	4601      	mov	r1, r0
   bc5da:	6818      	ldr	r0, [r3, #0]
   bc5dc:	f000 b8ae 	b.w	bc73c <_fstat_r>
   bc5e0:	2003d180 	.word	0x2003d180

000bc5e4 <open>:
   bc5e4:	b40e      	push	{r1, r2, r3}
   bc5e6:	b503      	push	{r0, r1, lr}
   bc5e8:	ab03      	add	r3, sp, #12
   bc5ea:	4601      	mov	r1, r0
   bc5ec:	4806      	ldr	r0, [pc, #24]	; (bc608 <open+0x24>)
   bc5ee:	f853 2b04 	ldr.w	r2, [r3], #4
   bc5f2:	9301      	str	r3, [sp, #4]
   bc5f4:	6800      	ldr	r0, [r0, #0]
   bc5f6:	9b04      	ldr	r3, [sp, #16]
   bc5f8:	f001 f908 	bl	bd80c <_open_r>
   bc5fc:	b002      	add	sp, #8
   bc5fe:	f85d eb04 	ldr.w	lr, [sp], #4
   bc602:	b003      	add	sp, #12
   bc604:	4770      	bx	lr
   bc606:	bf00      	nop
   bc608:	2003d180 	.word	0x2003d180

000bc60c <read>:
   bc60c:	4613      	mov	r3, r2
   bc60e:	460a      	mov	r2, r1
   bc610:	4601      	mov	r1, r0
   bc612:	4802      	ldr	r0, [pc, #8]	; (bc61c <read+0x10>)
   bc614:	6800      	ldr	r0, [r0, #0]
   bc616:	f001 b90b 	b.w	bd830 <_read_r>
   bc61a:	bf00      	nop
   bc61c:	2003d180 	.word	0x2003d180

000bc620 <write>:
   bc620:	4613      	mov	r3, r2
   bc622:	460a      	mov	r2, r1
   bc624:	4601      	mov	r1, r0
   bc626:	4802      	ldr	r0, [pc, #8]	; (bc630 <write+0x10>)
   bc628:	6800      	ldr	r0, [r0, #0]
   bc62a:	f000 b803 	b.w	bc634 <_write_r>
   bc62e:	bf00      	nop
   bc630:	2003d180 	.word	0x2003d180

000bc634 <_write_r>:
   bc634:	b538      	push	{r3, r4, r5, lr}
   bc636:	4d07      	ldr	r5, [pc, #28]	; (bc654 <_write_r+0x20>)
   bc638:	4604      	mov	r4, r0
   bc63a:	4608      	mov	r0, r1
   bc63c:	4611      	mov	r1, r2
   bc63e:	2200      	movs	r2, #0
   bc640:	602a      	str	r2, [r5, #0]
   bc642:	461a      	mov	r2, r3
   bc644:	f7fb f9cc 	bl	b79e0 <_write>
   bc648:	1c43      	adds	r3, r0, #1
   bc64a:	d102      	bne.n	bc652 <_write_r+0x1e>
   bc64c:	682b      	ldr	r3, [r5, #0]
   bc64e:	b103      	cbz	r3, bc652 <_write_r+0x1e>
   bc650:	6023      	str	r3, [r4, #0]
   bc652:	bd38      	pop	{r3, r4, r5, pc}
   bc654:	2003e7ec 	.word	0x2003e7ec

000bc658 <__register_exitproc>:
   bc658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc65c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc718 <__register_exitproc+0xc0>
   bc660:	4606      	mov	r6, r0
   bc662:	f8d8 0000 	ldr.w	r0, [r8]
   bc666:	461f      	mov	r7, r3
   bc668:	460d      	mov	r5, r1
   bc66a:	4691      	mov	r9, r2
   bc66c:	f000 fbe8 	bl	bce40 <__retarget_lock_acquire_recursive>
   bc670:	4b25      	ldr	r3, [pc, #148]	; (bc708 <__register_exitproc+0xb0>)
   bc672:	681c      	ldr	r4, [r3, #0]
   bc674:	b934      	cbnz	r4, bc684 <__register_exitproc+0x2c>
   bc676:	4c25      	ldr	r4, [pc, #148]	; (bc70c <__register_exitproc+0xb4>)
   bc678:	601c      	str	r4, [r3, #0]
   bc67a:	4b25      	ldr	r3, [pc, #148]	; (bc710 <__register_exitproc+0xb8>)
   bc67c:	b113      	cbz	r3, bc684 <__register_exitproc+0x2c>
   bc67e:	681b      	ldr	r3, [r3, #0]
   bc680:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc684:	6863      	ldr	r3, [r4, #4]
   bc686:	2b1f      	cmp	r3, #31
   bc688:	dd07      	ble.n	bc69a <__register_exitproc+0x42>
   bc68a:	f8d8 0000 	ldr.w	r0, [r8]
   bc68e:	f000 fbd9 	bl	bce44 <__retarget_lock_release_recursive>
   bc692:	f04f 30ff 	mov.w	r0, #4294967295
   bc696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc69a:	b34e      	cbz	r6, bc6f0 <__register_exitproc+0x98>
   bc69c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc6a0:	b988      	cbnz	r0, bc6c6 <__register_exitproc+0x6e>
   bc6a2:	4b1c      	ldr	r3, [pc, #112]	; (bc714 <__register_exitproc+0xbc>)
   bc6a4:	b923      	cbnz	r3, bc6b0 <__register_exitproc+0x58>
   bc6a6:	f8d8 0000 	ldr.w	r0, [r8]
   bc6aa:	f000 fbca 	bl	bce42 <__retarget_lock_release>
   bc6ae:	e7f0      	b.n	bc692 <__register_exitproc+0x3a>
   bc6b0:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc6b4:	f7fb fc82 	bl	b7fbc <malloc>
   bc6b8:	2800      	cmp	r0, #0
   bc6ba:	d0f4      	beq.n	bc6a6 <__register_exitproc+0x4e>
   bc6bc:	2300      	movs	r3, #0
   bc6be:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc6c2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc6c6:	6863      	ldr	r3, [r4, #4]
   bc6c8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc6cc:	2201      	movs	r2, #1
   bc6ce:	409a      	lsls	r2, r3
   bc6d0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc6d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc6d8:	4313      	orrs	r3, r2
   bc6da:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc6de:	2e02      	cmp	r6, #2
   bc6e0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc6e4:	bf02      	ittt	eq
   bc6e6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc6ea:	4313      	orreq	r3, r2
   bc6ec:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc6f0:	6863      	ldr	r3, [r4, #4]
   bc6f2:	f8d8 0000 	ldr.w	r0, [r8]
   bc6f6:	1c5a      	adds	r2, r3, #1
   bc6f8:	3302      	adds	r3, #2
   bc6fa:	6062      	str	r2, [r4, #4]
   bc6fc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc700:	f000 fba0 	bl	bce44 <__retarget_lock_release_recursive>
   bc704:	2000      	movs	r0, #0
   bc706:	e7c6      	b.n	bc696 <__register_exitproc+0x3e>
   bc708:	2003e7e4 	.word	0x2003e7e4
   bc70c:	2003e758 	.word	0x2003e758
   bc710:	00000000 	.word	0x00000000
   bc714:	000b7fbd 	.word	0x000b7fbd
   bc718:	2003d1e4 	.word	0x2003d1e4

000bc71c <_close_r>:
   bc71c:	b538      	push	{r3, r4, r5, lr}
   bc71e:	4d06      	ldr	r5, [pc, #24]	; (bc738 <_close_r+0x1c>)
   bc720:	2300      	movs	r3, #0
   bc722:	4604      	mov	r4, r0
   bc724:	4608      	mov	r0, r1
   bc726:	602b      	str	r3, [r5, #0]
   bc728:	f7fb f96a 	bl	b7a00 <_close>
   bc72c:	1c43      	adds	r3, r0, #1
   bc72e:	d102      	bne.n	bc736 <_close_r+0x1a>
   bc730:	682b      	ldr	r3, [r5, #0]
   bc732:	b103      	cbz	r3, bc736 <_close_r+0x1a>
   bc734:	6023      	str	r3, [r4, #0]
   bc736:	bd38      	pop	{r3, r4, r5, pc}
   bc738:	2003e7ec 	.word	0x2003e7ec

000bc73c <_fstat_r>:
   bc73c:	b538      	push	{r3, r4, r5, lr}
   bc73e:	4d07      	ldr	r5, [pc, #28]	; (bc75c <_fstat_r+0x20>)
   bc740:	2300      	movs	r3, #0
   bc742:	4604      	mov	r4, r0
   bc744:	4608      	mov	r0, r1
   bc746:	4611      	mov	r1, r2
   bc748:	602b      	str	r3, [r5, #0]
   bc74a:	f7fb f961 	bl	b7a10 <_fstat>
   bc74e:	1c43      	adds	r3, r0, #1
   bc750:	d102      	bne.n	bc758 <_fstat_r+0x1c>
   bc752:	682b      	ldr	r3, [r5, #0]
   bc754:	b103      	cbz	r3, bc758 <_fstat_r+0x1c>
   bc756:	6023      	str	r3, [r4, #0]
   bc758:	bd38      	pop	{r3, r4, r5, pc}
   bc75a:	bf00      	nop
   bc75c:	2003e7ec 	.word	0x2003e7ec

000bc760 <rshift>:
   bc760:	6903      	ldr	r3, [r0, #16]
   bc762:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc76a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc76e:	f100 0414 	add.w	r4, r0, #20
   bc772:	dd45      	ble.n	bc800 <rshift+0xa0>
   bc774:	f011 011f 	ands.w	r1, r1, #31
   bc778:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc77c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc780:	d10c      	bne.n	bc79c <rshift+0x3c>
   bc782:	f100 0710 	add.w	r7, r0, #16
   bc786:	4629      	mov	r1, r5
   bc788:	42b1      	cmp	r1, r6
   bc78a:	d334      	bcc.n	bc7f6 <rshift+0x96>
   bc78c:	1a9b      	subs	r3, r3, r2
   bc78e:	009b      	lsls	r3, r3, #2
   bc790:	1eea      	subs	r2, r5, #3
   bc792:	4296      	cmp	r6, r2
   bc794:	bf38      	it	cc
   bc796:	2300      	movcc	r3, #0
   bc798:	4423      	add	r3, r4
   bc79a:	e015      	b.n	bc7c8 <rshift+0x68>
   bc79c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc7a0:	f1c1 0820 	rsb	r8, r1, #32
   bc7a4:	40cf      	lsrs	r7, r1
   bc7a6:	f105 0e04 	add.w	lr, r5, #4
   bc7aa:	46a1      	mov	r9, r4
   bc7ac:	4576      	cmp	r6, lr
   bc7ae:	46f4      	mov	ip, lr
   bc7b0:	d815      	bhi.n	bc7de <rshift+0x7e>
   bc7b2:	1a9a      	subs	r2, r3, r2
   bc7b4:	0092      	lsls	r2, r2, #2
   bc7b6:	3a04      	subs	r2, #4
   bc7b8:	3501      	adds	r5, #1
   bc7ba:	42ae      	cmp	r6, r5
   bc7bc:	bf38      	it	cc
   bc7be:	2200      	movcc	r2, #0
   bc7c0:	18a3      	adds	r3, r4, r2
   bc7c2:	50a7      	str	r7, [r4, r2]
   bc7c4:	b107      	cbz	r7, bc7c8 <rshift+0x68>
   bc7c6:	3304      	adds	r3, #4
   bc7c8:	1b1a      	subs	r2, r3, r4
   bc7ca:	42a3      	cmp	r3, r4
   bc7cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc7d0:	bf08      	it	eq
   bc7d2:	2300      	moveq	r3, #0
   bc7d4:	6102      	str	r2, [r0, #16]
   bc7d6:	bf08      	it	eq
   bc7d8:	6143      	streq	r3, [r0, #20]
   bc7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc7de:	f8dc c000 	ldr.w	ip, [ip]
   bc7e2:	fa0c fc08 	lsl.w	ip, ip, r8
   bc7e6:	ea4c 0707 	orr.w	r7, ip, r7
   bc7ea:	f849 7b04 	str.w	r7, [r9], #4
   bc7ee:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc7f2:	40cf      	lsrs	r7, r1
   bc7f4:	e7da      	b.n	bc7ac <rshift+0x4c>
   bc7f6:	f851 cb04 	ldr.w	ip, [r1], #4
   bc7fa:	f847 cf04 	str.w	ip, [r7, #4]!
   bc7fe:	e7c3      	b.n	bc788 <rshift+0x28>
   bc800:	4623      	mov	r3, r4
   bc802:	e7e1      	b.n	bc7c8 <rshift+0x68>

000bc804 <__hexdig_fun>:
   bc804:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc808:	2b09      	cmp	r3, #9
   bc80a:	d802      	bhi.n	bc812 <__hexdig_fun+0xe>
   bc80c:	3820      	subs	r0, #32
   bc80e:	b2c0      	uxtb	r0, r0
   bc810:	4770      	bx	lr
   bc812:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc816:	2b05      	cmp	r3, #5
   bc818:	d801      	bhi.n	bc81e <__hexdig_fun+0x1a>
   bc81a:	3847      	subs	r0, #71	; 0x47
   bc81c:	e7f7      	b.n	bc80e <__hexdig_fun+0xa>
   bc81e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc822:	2b05      	cmp	r3, #5
   bc824:	d801      	bhi.n	bc82a <__hexdig_fun+0x26>
   bc826:	3827      	subs	r0, #39	; 0x27
   bc828:	e7f1      	b.n	bc80e <__hexdig_fun+0xa>
   bc82a:	2000      	movs	r0, #0
   bc82c:	4770      	bx	lr
	...

000bc830 <__gethex>:
   bc830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc834:	ed2d 8b02 	vpush	{d8}
   bc838:	b089      	sub	sp, #36	; 0x24
   bc83a:	ee08 0a10 	vmov	s16, r0
   bc83e:	9304      	str	r3, [sp, #16]
   bc840:	4bb4      	ldr	r3, [pc, #720]	; (bcb14 <__gethex+0x2e4>)
   bc842:	681b      	ldr	r3, [r3, #0]
   bc844:	9301      	str	r3, [sp, #4]
   bc846:	4618      	mov	r0, r3
   bc848:	468b      	mov	fp, r1
   bc84a:	4690      	mov	r8, r2
   bc84c:	f7f8 f8e2 	bl	b4a14 <strlen>
   bc850:	9b01      	ldr	r3, [sp, #4]
   bc852:	f8db 2000 	ldr.w	r2, [fp]
   bc856:	4403      	add	r3, r0
   bc858:	4682      	mov	sl, r0
   bc85a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc85e:	9305      	str	r3, [sp, #20]
   bc860:	1c93      	adds	r3, r2, #2
   bc862:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc866:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc86a:	32fe      	adds	r2, #254	; 0xfe
   bc86c:	18d1      	adds	r1, r2, r3
   bc86e:	461f      	mov	r7, r3
   bc870:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc874:	9100      	str	r1, [sp, #0]
   bc876:	2830      	cmp	r0, #48	; 0x30
   bc878:	d0f8      	beq.n	bc86c <__gethex+0x3c>
   bc87a:	f7ff ffc3 	bl	bc804 <__hexdig_fun>
   bc87e:	4604      	mov	r4, r0
   bc880:	2800      	cmp	r0, #0
   bc882:	d13a      	bne.n	bc8fa <__gethex+0xca>
   bc884:	9901      	ldr	r1, [sp, #4]
   bc886:	4652      	mov	r2, sl
   bc888:	4638      	mov	r0, r7
   bc88a:	f7fe ff3c 	bl	bb706 <strncmp>
   bc88e:	4605      	mov	r5, r0
   bc890:	2800      	cmp	r0, #0
   bc892:	d168      	bne.n	bc966 <__gethex+0x136>
   bc894:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc898:	eb07 060a 	add.w	r6, r7, sl
   bc89c:	f7ff ffb2 	bl	bc804 <__hexdig_fun>
   bc8a0:	2800      	cmp	r0, #0
   bc8a2:	d062      	beq.n	bc96a <__gethex+0x13a>
   bc8a4:	4633      	mov	r3, r6
   bc8a6:	7818      	ldrb	r0, [r3, #0]
   bc8a8:	2830      	cmp	r0, #48	; 0x30
   bc8aa:	461f      	mov	r7, r3
   bc8ac:	f103 0301 	add.w	r3, r3, #1
   bc8b0:	d0f9      	beq.n	bc8a6 <__gethex+0x76>
   bc8b2:	f7ff ffa7 	bl	bc804 <__hexdig_fun>
   bc8b6:	2301      	movs	r3, #1
   bc8b8:	fab0 f480 	clz	r4, r0
   bc8bc:	0964      	lsrs	r4, r4, #5
   bc8be:	4635      	mov	r5, r6
   bc8c0:	9300      	str	r3, [sp, #0]
   bc8c2:	463a      	mov	r2, r7
   bc8c4:	4616      	mov	r6, r2
   bc8c6:	3201      	adds	r2, #1
   bc8c8:	7830      	ldrb	r0, [r6, #0]
   bc8ca:	f7ff ff9b 	bl	bc804 <__hexdig_fun>
   bc8ce:	2800      	cmp	r0, #0
   bc8d0:	d1f8      	bne.n	bc8c4 <__gethex+0x94>
   bc8d2:	9901      	ldr	r1, [sp, #4]
   bc8d4:	4652      	mov	r2, sl
   bc8d6:	4630      	mov	r0, r6
   bc8d8:	f7fe ff15 	bl	bb706 <strncmp>
   bc8dc:	b980      	cbnz	r0, bc900 <__gethex+0xd0>
   bc8de:	b94d      	cbnz	r5, bc8f4 <__gethex+0xc4>
   bc8e0:	eb06 050a 	add.w	r5, r6, sl
   bc8e4:	462a      	mov	r2, r5
   bc8e6:	4616      	mov	r6, r2
   bc8e8:	3201      	adds	r2, #1
   bc8ea:	7830      	ldrb	r0, [r6, #0]
   bc8ec:	f7ff ff8a 	bl	bc804 <__hexdig_fun>
   bc8f0:	2800      	cmp	r0, #0
   bc8f2:	d1f8      	bne.n	bc8e6 <__gethex+0xb6>
   bc8f4:	1bad      	subs	r5, r5, r6
   bc8f6:	00ad      	lsls	r5, r5, #2
   bc8f8:	e004      	b.n	bc904 <__gethex+0xd4>
   bc8fa:	2400      	movs	r4, #0
   bc8fc:	4625      	mov	r5, r4
   bc8fe:	e7e0      	b.n	bc8c2 <__gethex+0x92>
   bc900:	2d00      	cmp	r5, #0
   bc902:	d1f7      	bne.n	bc8f4 <__gethex+0xc4>
   bc904:	7833      	ldrb	r3, [r6, #0]
   bc906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc90a:	2b50      	cmp	r3, #80	; 0x50
   bc90c:	d13b      	bne.n	bc986 <__gethex+0x156>
   bc90e:	7873      	ldrb	r3, [r6, #1]
   bc910:	2b2b      	cmp	r3, #43	; 0x2b
   bc912:	d02c      	beq.n	bc96e <__gethex+0x13e>
   bc914:	2b2d      	cmp	r3, #45	; 0x2d
   bc916:	d02e      	beq.n	bc976 <__gethex+0x146>
   bc918:	1c71      	adds	r1, r6, #1
   bc91a:	f04f 0900 	mov.w	r9, #0
   bc91e:	7808      	ldrb	r0, [r1, #0]
   bc920:	f7ff ff70 	bl	bc804 <__hexdig_fun>
   bc924:	1e43      	subs	r3, r0, #1
   bc926:	b2db      	uxtb	r3, r3
   bc928:	2b18      	cmp	r3, #24
   bc92a:	d82c      	bhi.n	bc986 <__gethex+0x156>
   bc92c:	f1a0 0210 	sub.w	r2, r0, #16
   bc930:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc934:	f7ff ff66 	bl	bc804 <__hexdig_fun>
   bc938:	1e43      	subs	r3, r0, #1
   bc93a:	b2db      	uxtb	r3, r3
   bc93c:	2b18      	cmp	r3, #24
   bc93e:	d91d      	bls.n	bc97c <__gethex+0x14c>
   bc940:	f1b9 0f00 	cmp.w	r9, #0
   bc944:	d000      	beq.n	bc948 <__gethex+0x118>
   bc946:	4252      	negs	r2, r2
   bc948:	4415      	add	r5, r2
   bc94a:	f8cb 1000 	str.w	r1, [fp]
   bc94e:	b1e4      	cbz	r4, bc98a <__gethex+0x15a>
   bc950:	9b00      	ldr	r3, [sp, #0]
   bc952:	2b00      	cmp	r3, #0
   bc954:	bf14      	ite	ne
   bc956:	2700      	movne	r7, #0
   bc958:	2706      	moveq	r7, #6
   bc95a:	4638      	mov	r0, r7
   bc95c:	b009      	add	sp, #36	; 0x24
   bc95e:	ecbd 8b02 	vpop	{d8}
   bc962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc966:	463e      	mov	r6, r7
   bc968:	4625      	mov	r5, r4
   bc96a:	2401      	movs	r4, #1
   bc96c:	e7ca      	b.n	bc904 <__gethex+0xd4>
   bc96e:	f04f 0900 	mov.w	r9, #0
   bc972:	1cb1      	adds	r1, r6, #2
   bc974:	e7d3      	b.n	bc91e <__gethex+0xee>
   bc976:	f04f 0901 	mov.w	r9, #1
   bc97a:	e7fa      	b.n	bc972 <__gethex+0x142>
   bc97c:	230a      	movs	r3, #10
   bc97e:	fb03 0202 	mla	r2, r3, r2, r0
   bc982:	3a10      	subs	r2, #16
   bc984:	e7d4      	b.n	bc930 <__gethex+0x100>
   bc986:	4631      	mov	r1, r6
   bc988:	e7df      	b.n	bc94a <__gethex+0x11a>
   bc98a:	1bf3      	subs	r3, r6, r7
   bc98c:	3b01      	subs	r3, #1
   bc98e:	4621      	mov	r1, r4
   bc990:	2b07      	cmp	r3, #7
   bc992:	dc0b      	bgt.n	bc9ac <__gethex+0x17c>
   bc994:	ee18 0a10 	vmov	r0, s16
   bc998:	f000 fa68 	bl	bce6c <_Balloc>
   bc99c:	4604      	mov	r4, r0
   bc99e:	b940      	cbnz	r0, bc9b2 <__gethex+0x182>
   bc9a0:	4b5d      	ldr	r3, [pc, #372]	; (bcb18 <__gethex+0x2e8>)
   bc9a2:	4602      	mov	r2, r0
   bc9a4:	21de      	movs	r1, #222	; 0xde
   bc9a6:	485d      	ldr	r0, [pc, #372]	; (bcb1c <__gethex+0x2ec>)
   bc9a8:	f7fb fb60 	bl	b806c <__assert_func>
   bc9ac:	3101      	adds	r1, #1
   bc9ae:	105b      	asrs	r3, r3, #1
   bc9b0:	e7ee      	b.n	bc990 <__gethex+0x160>
   bc9b2:	f100 0914 	add.w	r9, r0, #20
   bc9b6:	f04f 0b00 	mov.w	fp, #0
   bc9ba:	f1ca 0301 	rsb	r3, sl, #1
   bc9be:	f8cd 9008 	str.w	r9, [sp, #8]
   bc9c2:	f8cd b000 	str.w	fp, [sp]
   bc9c6:	9306      	str	r3, [sp, #24]
   bc9c8:	42b7      	cmp	r7, r6
   bc9ca:	d340      	bcc.n	bca4e <__gethex+0x21e>
   bc9cc:	9802      	ldr	r0, [sp, #8]
   bc9ce:	9b00      	ldr	r3, [sp, #0]
   bc9d0:	f840 3b04 	str.w	r3, [r0], #4
   bc9d4:	eba0 0009 	sub.w	r0, r0, r9
   bc9d8:	1080      	asrs	r0, r0, #2
   bc9da:	0146      	lsls	r6, r0, #5
   bc9dc:	6120      	str	r0, [r4, #16]
   bc9de:	4618      	mov	r0, r3
   bc9e0:	f000 fb36 	bl	bd050 <__hi0bits>
   bc9e4:	1a30      	subs	r0, r6, r0
   bc9e6:	f8d8 6000 	ldr.w	r6, [r8]
   bc9ea:	42b0      	cmp	r0, r6
   bc9ec:	dd63      	ble.n	bcab6 <__gethex+0x286>
   bc9ee:	1b87      	subs	r7, r0, r6
   bc9f0:	4639      	mov	r1, r7
   bc9f2:	4620      	mov	r0, r4
   bc9f4:	f000 feda 	bl	bd7ac <__any_on>
   bc9f8:	4682      	mov	sl, r0
   bc9fa:	b1a8      	cbz	r0, bca28 <__gethex+0x1f8>
   bc9fc:	1e7b      	subs	r3, r7, #1
   bc9fe:	1159      	asrs	r1, r3, #5
   bca00:	f003 021f 	and.w	r2, r3, #31
   bca04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bca08:	f04f 0a01 	mov.w	sl, #1
   bca0c:	fa0a f202 	lsl.w	r2, sl, r2
   bca10:	420a      	tst	r2, r1
   bca12:	d009      	beq.n	bca28 <__gethex+0x1f8>
   bca14:	4553      	cmp	r3, sl
   bca16:	dd05      	ble.n	bca24 <__gethex+0x1f4>
   bca18:	1eb9      	subs	r1, r7, #2
   bca1a:	4620      	mov	r0, r4
   bca1c:	f000 fec6 	bl	bd7ac <__any_on>
   bca20:	2800      	cmp	r0, #0
   bca22:	d145      	bne.n	bcab0 <__gethex+0x280>
   bca24:	f04f 0a02 	mov.w	sl, #2
   bca28:	4639      	mov	r1, r7
   bca2a:	4620      	mov	r0, r4
   bca2c:	f7ff fe98 	bl	bc760 <rshift>
   bca30:	443d      	add	r5, r7
   bca32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bca36:	42ab      	cmp	r3, r5
   bca38:	da4c      	bge.n	bcad4 <__gethex+0x2a4>
   bca3a:	ee18 0a10 	vmov	r0, s16
   bca3e:	4621      	mov	r1, r4
   bca40:	f000 fa54 	bl	bceec <_Bfree>
   bca44:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bca46:	2300      	movs	r3, #0
   bca48:	6013      	str	r3, [r2, #0]
   bca4a:	27a3      	movs	r7, #163	; 0xa3
   bca4c:	e785      	b.n	bc95a <__gethex+0x12a>
   bca4e:	1e73      	subs	r3, r6, #1
   bca50:	9a05      	ldr	r2, [sp, #20]
   bca52:	9303      	str	r3, [sp, #12]
   bca54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bca58:	4293      	cmp	r3, r2
   bca5a:	d019      	beq.n	bca90 <__gethex+0x260>
   bca5c:	f1bb 0f20 	cmp.w	fp, #32
   bca60:	d107      	bne.n	bca72 <__gethex+0x242>
   bca62:	9b02      	ldr	r3, [sp, #8]
   bca64:	9a00      	ldr	r2, [sp, #0]
   bca66:	f843 2b04 	str.w	r2, [r3], #4
   bca6a:	9302      	str	r3, [sp, #8]
   bca6c:	2300      	movs	r3, #0
   bca6e:	9300      	str	r3, [sp, #0]
   bca70:	469b      	mov	fp, r3
   bca72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bca76:	f7ff fec5 	bl	bc804 <__hexdig_fun>
   bca7a:	9b00      	ldr	r3, [sp, #0]
   bca7c:	f000 000f 	and.w	r0, r0, #15
   bca80:	fa00 f00b 	lsl.w	r0, r0, fp
   bca84:	4303      	orrs	r3, r0
   bca86:	9300      	str	r3, [sp, #0]
   bca88:	f10b 0b04 	add.w	fp, fp, #4
   bca8c:	9b03      	ldr	r3, [sp, #12]
   bca8e:	e00d      	b.n	bcaac <__gethex+0x27c>
   bca90:	9b03      	ldr	r3, [sp, #12]
   bca92:	9a06      	ldr	r2, [sp, #24]
   bca94:	4413      	add	r3, r2
   bca96:	42bb      	cmp	r3, r7
   bca98:	d3e0      	bcc.n	bca5c <__gethex+0x22c>
   bca9a:	4618      	mov	r0, r3
   bca9c:	9901      	ldr	r1, [sp, #4]
   bca9e:	9307      	str	r3, [sp, #28]
   bcaa0:	4652      	mov	r2, sl
   bcaa2:	f7fe fe30 	bl	bb706 <strncmp>
   bcaa6:	9b07      	ldr	r3, [sp, #28]
   bcaa8:	2800      	cmp	r0, #0
   bcaaa:	d1d7      	bne.n	bca5c <__gethex+0x22c>
   bcaac:	461e      	mov	r6, r3
   bcaae:	e78b      	b.n	bc9c8 <__gethex+0x198>
   bcab0:	f04f 0a03 	mov.w	sl, #3
   bcab4:	e7b8      	b.n	bca28 <__gethex+0x1f8>
   bcab6:	da0a      	bge.n	bcace <__gethex+0x29e>
   bcab8:	1a37      	subs	r7, r6, r0
   bcaba:	4621      	mov	r1, r4
   bcabc:	ee18 0a10 	vmov	r0, s16
   bcac0:	463a      	mov	r2, r7
   bcac2:	f000 fc2f 	bl	bd324 <__lshift>
   bcac6:	1bed      	subs	r5, r5, r7
   bcac8:	4604      	mov	r4, r0
   bcaca:	f100 0914 	add.w	r9, r0, #20
   bcace:	f04f 0a00 	mov.w	sl, #0
   bcad2:	e7ae      	b.n	bca32 <__gethex+0x202>
   bcad4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bcad8:	42a8      	cmp	r0, r5
   bcada:	dd72      	ble.n	bcbc2 <__gethex+0x392>
   bcadc:	1b45      	subs	r5, r0, r5
   bcade:	42ae      	cmp	r6, r5
   bcae0:	dc36      	bgt.n	bcb50 <__gethex+0x320>
   bcae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bcae6:	2b02      	cmp	r3, #2
   bcae8:	d02a      	beq.n	bcb40 <__gethex+0x310>
   bcaea:	2b03      	cmp	r3, #3
   bcaec:	d02c      	beq.n	bcb48 <__gethex+0x318>
   bcaee:	2b01      	cmp	r3, #1
   bcaf0:	d11c      	bne.n	bcb2c <__gethex+0x2fc>
   bcaf2:	42ae      	cmp	r6, r5
   bcaf4:	d11a      	bne.n	bcb2c <__gethex+0x2fc>
   bcaf6:	2e01      	cmp	r6, #1
   bcaf8:	d112      	bne.n	bcb20 <__gethex+0x2f0>
   bcafa:	9a04      	ldr	r2, [sp, #16]
   bcafc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bcb00:	6013      	str	r3, [r2, #0]
   bcb02:	2301      	movs	r3, #1
   bcb04:	6123      	str	r3, [r4, #16]
   bcb06:	f8c9 3000 	str.w	r3, [r9]
   bcb0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bcb0c:	2762      	movs	r7, #98	; 0x62
   bcb0e:	601c      	str	r4, [r3, #0]
   bcb10:	e723      	b.n	bc95a <__gethex+0x12a>
   bcb12:	bf00      	nop
   bcb14:	000be958 	.word	0x000be958
   bcb18:	000be8bf 	.word	0x000be8bf
   bcb1c:	000be8d0 	.word	0x000be8d0
   bcb20:	1e71      	subs	r1, r6, #1
   bcb22:	4620      	mov	r0, r4
   bcb24:	f000 fe42 	bl	bd7ac <__any_on>
   bcb28:	2800      	cmp	r0, #0
   bcb2a:	d1e6      	bne.n	bcafa <__gethex+0x2ca>
   bcb2c:	ee18 0a10 	vmov	r0, s16
   bcb30:	4621      	mov	r1, r4
   bcb32:	f000 f9db 	bl	bceec <_Bfree>
   bcb36:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bcb38:	2300      	movs	r3, #0
   bcb3a:	6013      	str	r3, [r2, #0]
   bcb3c:	2750      	movs	r7, #80	; 0x50
   bcb3e:	e70c      	b.n	bc95a <__gethex+0x12a>
   bcb40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcb42:	2b00      	cmp	r3, #0
   bcb44:	d1f2      	bne.n	bcb2c <__gethex+0x2fc>
   bcb46:	e7d8      	b.n	bcafa <__gethex+0x2ca>
   bcb48:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcb4a:	2b00      	cmp	r3, #0
   bcb4c:	d1d5      	bne.n	bcafa <__gethex+0x2ca>
   bcb4e:	e7ed      	b.n	bcb2c <__gethex+0x2fc>
   bcb50:	1e6f      	subs	r7, r5, #1
   bcb52:	f1ba 0f00 	cmp.w	sl, #0
   bcb56:	d131      	bne.n	bcbbc <__gethex+0x38c>
   bcb58:	b127      	cbz	r7, bcb64 <__gethex+0x334>
   bcb5a:	4639      	mov	r1, r7
   bcb5c:	4620      	mov	r0, r4
   bcb5e:	f000 fe25 	bl	bd7ac <__any_on>
   bcb62:	4682      	mov	sl, r0
   bcb64:	117b      	asrs	r3, r7, #5
   bcb66:	2101      	movs	r1, #1
   bcb68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bcb6c:	f007 071f 	and.w	r7, r7, #31
   bcb70:	fa01 f707 	lsl.w	r7, r1, r7
   bcb74:	421f      	tst	r7, r3
   bcb76:	4629      	mov	r1, r5
   bcb78:	4620      	mov	r0, r4
   bcb7a:	bf18      	it	ne
   bcb7c:	f04a 0a02 	orrne.w	sl, sl, #2
   bcb80:	1b76      	subs	r6, r6, r5
   bcb82:	f7ff fded 	bl	bc760 <rshift>
   bcb86:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bcb8a:	2702      	movs	r7, #2
   bcb8c:	f1ba 0f00 	cmp.w	sl, #0
   bcb90:	d048      	beq.n	bcc24 <__gethex+0x3f4>
   bcb92:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bcb96:	2b02      	cmp	r3, #2
   bcb98:	d015      	beq.n	bcbc6 <__gethex+0x396>
   bcb9a:	2b03      	cmp	r3, #3
   bcb9c:	d017      	beq.n	bcbce <__gethex+0x39e>
   bcb9e:	2b01      	cmp	r3, #1
   bcba0:	d109      	bne.n	bcbb6 <__gethex+0x386>
   bcba2:	f01a 0f02 	tst.w	sl, #2
   bcba6:	d006      	beq.n	bcbb6 <__gethex+0x386>
   bcba8:	f8d9 0000 	ldr.w	r0, [r9]
   bcbac:	ea4a 0a00 	orr.w	sl, sl, r0
   bcbb0:	f01a 0f01 	tst.w	sl, #1
   bcbb4:	d10e      	bne.n	bcbd4 <__gethex+0x3a4>
   bcbb6:	f047 0710 	orr.w	r7, r7, #16
   bcbba:	e033      	b.n	bcc24 <__gethex+0x3f4>
   bcbbc:	f04f 0a01 	mov.w	sl, #1
   bcbc0:	e7d0      	b.n	bcb64 <__gethex+0x334>
   bcbc2:	2701      	movs	r7, #1
   bcbc4:	e7e2      	b.n	bcb8c <__gethex+0x35c>
   bcbc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcbc8:	f1c3 0301 	rsb	r3, r3, #1
   bcbcc:	9315      	str	r3, [sp, #84]	; 0x54
   bcbce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcbd0:	2b00      	cmp	r3, #0
   bcbd2:	d0f0      	beq.n	bcbb6 <__gethex+0x386>
   bcbd4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bcbd8:	f104 0314 	add.w	r3, r4, #20
   bcbdc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bcbe0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bcbe4:	f04f 0c00 	mov.w	ip, #0
   bcbe8:	4618      	mov	r0, r3
   bcbea:	f853 2b04 	ldr.w	r2, [r3], #4
   bcbee:	f1b2 3fff 	cmp.w	r2, #4294967295
   bcbf2:	d01c      	beq.n	bcc2e <__gethex+0x3fe>
   bcbf4:	3201      	adds	r2, #1
   bcbf6:	6002      	str	r2, [r0, #0]
   bcbf8:	2f02      	cmp	r7, #2
   bcbfa:	f104 0314 	add.w	r3, r4, #20
   bcbfe:	d13f      	bne.n	bcc80 <__gethex+0x450>
   bcc00:	f8d8 2000 	ldr.w	r2, [r8]
   bcc04:	3a01      	subs	r2, #1
   bcc06:	42b2      	cmp	r2, r6
   bcc08:	d10a      	bne.n	bcc20 <__gethex+0x3f0>
   bcc0a:	1171      	asrs	r1, r6, #5
   bcc0c:	2201      	movs	r2, #1
   bcc0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bcc12:	f006 061f 	and.w	r6, r6, #31
   bcc16:	fa02 f606 	lsl.w	r6, r2, r6
   bcc1a:	421e      	tst	r6, r3
   bcc1c:	bf18      	it	ne
   bcc1e:	4617      	movne	r7, r2
   bcc20:	f047 0720 	orr.w	r7, r7, #32
   bcc24:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bcc26:	601c      	str	r4, [r3, #0]
   bcc28:	9b04      	ldr	r3, [sp, #16]
   bcc2a:	601d      	str	r5, [r3, #0]
   bcc2c:	e695      	b.n	bc95a <__gethex+0x12a>
   bcc2e:	4299      	cmp	r1, r3
   bcc30:	f843 cc04 	str.w	ip, [r3, #-4]
   bcc34:	d8d8      	bhi.n	bcbe8 <__gethex+0x3b8>
   bcc36:	68a3      	ldr	r3, [r4, #8]
   bcc38:	459b      	cmp	fp, r3
   bcc3a:	db19      	blt.n	bcc70 <__gethex+0x440>
   bcc3c:	6861      	ldr	r1, [r4, #4]
   bcc3e:	ee18 0a10 	vmov	r0, s16
   bcc42:	3101      	adds	r1, #1
   bcc44:	f000 f912 	bl	bce6c <_Balloc>
   bcc48:	4681      	mov	r9, r0
   bcc4a:	b918      	cbnz	r0, bcc54 <__gethex+0x424>
   bcc4c:	4b1a      	ldr	r3, [pc, #104]	; (bccb8 <__gethex+0x488>)
   bcc4e:	4602      	mov	r2, r0
   bcc50:	2184      	movs	r1, #132	; 0x84
   bcc52:	e6a8      	b.n	bc9a6 <__gethex+0x176>
   bcc54:	6922      	ldr	r2, [r4, #16]
   bcc56:	3202      	adds	r2, #2
   bcc58:	f104 010c 	add.w	r1, r4, #12
   bcc5c:	0092      	lsls	r2, r2, #2
   bcc5e:	300c      	adds	r0, #12
   bcc60:	f7fe fcbd 	bl	bb5de <memcpy>
   bcc64:	4621      	mov	r1, r4
   bcc66:	ee18 0a10 	vmov	r0, s16
   bcc6a:	f000 f93f 	bl	bceec <_Bfree>
   bcc6e:	464c      	mov	r4, r9
   bcc70:	6923      	ldr	r3, [r4, #16]
   bcc72:	1c5a      	adds	r2, r3, #1
   bcc74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bcc78:	6122      	str	r2, [r4, #16]
   bcc7a:	2201      	movs	r2, #1
   bcc7c:	615a      	str	r2, [r3, #20]
   bcc7e:	e7bb      	b.n	bcbf8 <__gethex+0x3c8>
   bcc80:	6922      	ldr	r2, [r4, #16]
   bcc82:	455a      	cmp	r2, fp
   bcc84:	dd0b      	ble.n	bcc9e <__gethex+0x46e>
   bcc86:	2101      	movs	r1, #1
   bcc88:	4620      	mov	r0, r4
   bcc8a:	f7ff fd69 	bl	bc760 <rshift>
   bcc8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcc92:	3501      	adds	r5, #1
   bcc94:	42ab      	cmp	r3, r5
   bcc96:	f6ff aed0 	blt.w	bca3a <__gethex+0x20a>
   bcc9a:	2701      	movs	r7, #1
   bcc9c:	e7c0      	b.n	bcc20 <__gethex+0x3f0>
   bcc9e:	f016 061f 	ands.w	r6, r6, #31
   bcca2:	d0fa      	beq.n	bcc9a <__gethex+0x46a>
   bcca4:	4453      	add	r3, sl
   bcca6:	f1c6 0620 	rsb	r6, r6, #32
   bccaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bccae:	f000 f9cf 	bl	bd050 <__hi0bits>
   bccb2:	42b0      	cmp	r0, r6
   bccb4:	dbe7      	blt.n	bcc86 <__gethex+0x456>
   bccb6:	e7f0      	b.n	bcc9a <__gethex+0x46a>
   bccb8:	000be8bf 	.word	0x000be8bf

000bccbc <L_shift>:
   bccbc:	f1c2 0208 	rsb	r2, r2, #8
   bccc0:	0092      	lsls	r2, r2, #2
   bccc2:	b570      	push	{r4, r5, r6, lr}
   bccc4:	f1c2 0620 	rsb	r6, r2, #32
   bccc8:	6843      	ldr	r3, [r0, #4]
   bccca:	6804      	ldr	r4, [r0, #0]
   bcccc:	fa03 f506 	lsl.w	r5, r3, r6
   bccd0:	432c      	orrs	r4, r5
   bccd2:	40d3      	lsrs	r3, r2
   bccd4:	6004      	str	r4, [r0, #0]
   bccd6:	f840 3f04 	str.w	r3, [r0, #4]!
   bccda:	4288      	cmp	r0, r1
   bccdc:	d3f4      	bcc.n	bccc8 <L_shift+0xc>
   bccde:	bd70      	pop	{r4, r5, r6, pc}

000bcce0 <__match>:
   bcce0:	b530      	push	{r4, r5, lr}
   bcce2:	6803      	ldr	r3, [r0, #0]
   bcce4:	3301      	adds	r3, #1
   bcce6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bccea:	b914      	cbnz	r4, bccf2 <__match+0x12>
   bccec:	6003      	str	r3, [r0, #0]
   bccee:	2001      	movs	r0, #1
   bccf0:	bd30      	pop	{r4, r5, pc}
   bccf2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bccf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bccfa:	2d19      	cmp	r5, #25
   bccfc:	bf98      	it	ls
   bccfe:	3220      	addls	r2, #32
   bcd00:	42a2      	cmp	r2, r4
   bcd02:	d0f0      	beq.n	bcce6 <__match+0x6>
   bcd04:	2000      	movs	r0, #0
   bcd06:	e7f3      	b.n	bccf0 <__match+0x10>

000bcd08 <__hexnan>:
   bcd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd0c:	680b      	ldr	r3, [r1, #0]
   bcd0e:	115e      	asrs	r6, r3, #5
   bcd10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bcd14:	f013 031f 	ands.w	r3, r3, #31
   bcd18:	b087      	sub	sp, #28
   bcd1a:	bf18      	it	ne
   bcd1c:	3604      	addne	r6, #4
   bcd1e:	2500      	movs	r5, #0
   bcd20:	1f37      	subs	r7, r6, #4
   bcd22:	4690      	mov	r8, r2
   bcd24:	6802      	ldr	r2, [r0, #0]
   bcd26:	9301      	str	r3, [sp, #4]
   bcd28:	4682      	mov	sl, r0
   bcd2a:	f846 5c04 	str.w	r5, [r6, #-4]
   bcd2e:	46b9      	mov	r9, r7
   bcd30:	463c      	mov	r4, r7
   bcd32:	9502      	str	r5, [sp, #8]
   bcd34:	46ab      	mov	fp, r5
   bcd36:	7851      	ldrb	r1, [r2, #1]
   bcd38:	1c53      	adds	r3, r2, #1
   bcd3a:	9303      	str	r3, [sp, #12]
   bcd3c:	b341      	cbz	r1, bcd90 <__hexnan+0x88>
   bcd3e:	4608      	mov	r0, r1
   bcd40:	9205      	str	r2, [sp, #20]
   bcd42:	9104      	str	r1, [sp, #16]
   bcd44:	f7ff fd5e 	bl	bc804 <__hexdig_fun>
   bcd48:	2800      	cmp	r0, #0
   bcd4a:	d14f      	bne.n	bcdec <__hexnan+0xe4>
   bcd4c:	9904      	ldr	r1, [sp, #16]
   bcd4e:	9a05      	ldr	r2, [sp, #20]
   bcd50:	2920      	cmp	r1, #32
   bcd52:	d818      	bhi.n	bcd86 <__hexnan+0x7e>
   bcd54:	9b02      	ldr	r3, [sp, #8]
   bcd56:	459b      	cmp	fp, r3
   bcd58:	dd13      	ble.n	bcd82 <__hexnan+0x7a>
   bcd5a:	454c      	cmp	r4, r9
   bcd5c:	d206      	bcs.n	bcd6c <__hexnan+0x64>
   bcd5e:	2d07      	cmp	r5, #7
   bcd60:	dc04      	bgt.n	bcd6c <__hexnan+0x64>
   bcd62:	462a      	mov	r2, r5
   bcd64:	4649      	mov	r1, r9
   bcd66:	4620      	mov	r0, r4
   bcd68:	f7ff ffa8 	bl	bccbc <L_shift>
   bcd6c:	4544      	cmp	r4, r8
   bcd6e:	d950      	bls.n	bce12 <__hexnan+0x10a>
   bcd70:	2300      	movs	r3, #0
   bcd72:	f1a4 0904 	sub.w	r9, r4, #4
   bcd76:	f844 3c04 	str.w	r3, [r4, #-4]
   bcd7a:	f8cd b008 	str.w	fp, [sp, #8]
   bcd7e:	464c      	mov	r4, r9
   bcd80:	461d      	mov	r5, r3
   bcd82:	9a03      	ldr	r2, [sp, #12]
   bcd84:	e7d7      	b.n	bcd36 <__hexnan+0x2e>
   bcd86:	2929      	cmp	r1, #41	; 0x29
   bcd88:	d156      	bne.n	bce38 <__hexnan+0x130>
   bcd8a:	3202      	adds	r2, #2
   bcd8c:	f8ca 2000 	str.w	r2, [sl]
   bcd90:	f1bb 0f00 	cmp.w	fp, #0
   bcd94:	d050      	beq.n	bce38 <__hexnan+0x130>
   bcd96:	454c      	cmp	r4, r9
   bcd98:	d206      	bcs.n	bcda8 <__hexnan+0xa0>
   bcd9a:	2d07      	cmp	r5, #7
   bcd9c:	dc04      	bgt.n	bcda8 <__hexnan+0xa0>
   bcd9e:	462a      	mov	r2, r5
   bcda0:	4649      	mov	r1, r9
   bcda2:	4620      	mov	r0, r4
   bcda4:	f7ff ff8a 	bl	bccbc <L_shift>
   bcda8:	4544      	cmp	r4, r8
   bcdaa:	d934      	bls.n	bce16 <__hexnan+0x10e>
   bcdac:	f1a8 0204 	sub.w	r2, r8, #4
   bcdb0:	4623      	mov	r3, r4
   bcdb2:	f853 1b04 	ldr.w	r1, [r3], #4
   bcdb6:	f842 1f04 	str.w	r1, [r2, #4]!
   bcdba:	429f      	cmp	r7, r3
   bcdbc:	d2f9      	bcs.n	bcdb2 <__hexnan+0xaa>
   bcdbe:	1b3b      	subs	r3, r7, r4
   bcdc0:	f023 0303 	bic.w	r3, r3, #3
   bcdc4:	3304      	adds	r3, #4
   bcdc6:	3401      	adds	r4, #1
   bcdc8:	3e03      	subs	r6, #3
   bcdca:	42b4      	cmp	r4, r6
   bcdcc:	bf88      	it	hi
   bcdce:	2304      	movhi	r3, #4
   bcdd0:	4443      	add	r3, r8
   bcdd2:	2200      	movs	r2, #0
   bcdd4:	f843 2b04 	str.w	r2, [r3], #4
   bcdd8:	429f      	cmp	r7, r3
   bcdda:	d2fb      	bcs.n	bcdd4 <__hexnan+0xcc>
   bcddc:	683b      	ldr	r3, [r7, #0]
   bcdde:	b91b      	cbnz	r3, bcde8 <__hexnan+0xe0>
   bcde0:	4547      	cmp	r7, r8
   bcde2:	d127      	bne.n	bce34 <__hexnan+0x12c>
   bcde4:	2301      	movs	r3, #1
   bcde6:	603b      	str	r3, [r7, #0]
   bcde8:	2005      	movs	r0, #5
   bcdea:	e026      	b.n	bce3a <__hexnan+0x132>
   bcdec:	3501      	adds	r5, #1
   bcdee:	2d08      	cmp	r5, #8
   bcdf0:	f10b 0b01 	add.w	fp, fp, #1
   bcdf4:	dd06      	ble.n	bce04 <__hexnan+0xfc>
   bcdf6:	4544      	cmp	r4, r8
   bcdf8:	d9c3      	bls.n	bcd82 <__hexnan+0x7a>
   bcdfa:	2300      	movs	r3, #0
   bcdfc:	f844 3c04 	str.w	r3, [r4, #-4]
   bce00:	2501      	movs	r5, #1
   bce02:	3c04      	subs	r4, #4
   bce04:	6822      	ldr	r2, [r4, #0]
   bce06:	f000 000f 	and.w	r0, r0, #15
   bce0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bce0e:	6022      	str	r2, [r4, #0]
   bce10:	e7b7      	b.n	bcd82 <__hexnan+0x7a>
   bce12:	2508      	movs	r5, #8
   bce14:	e7b5      	b.n	bcd82 <__hexnan+0x7a>
   bce16:	9b01      	ldr	r3, [sp, #4]
   bce18:	2b00      	cmp	r3, #0
   bce1a:	d0df      	beq.n	bcddc <__hexnan+0xd4>
   bce1c:	f04f 32ff 	mov.w	r2, #4294967295
   bce20:	f1c3 0320 	rsb	r3, r3, #32
   bce24:	fa22 f303 	lsr.w	r3, r2, r3
   bce28:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bce2c:	401a      	ands	r2, r3
   bce2e:	f846 2c04 	str.w	r2, [r6, #-4]
   bce32:	e7d3      	b.n	bcddc <__hexnan+0xd4>
   bce34:	3f04      	subs	r7, #4
   bce36:	e7d1      	b.n	bcddc <__hexnan+0xd4>
   bce38:	2004      	movs	r0, #4
   bce3a:	b007      	add	sp, #28
   bce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bce40 <__retarget_lock_acquire_recursive>:
   bce40:	4770      	bx	lr

000bce42 <__retarget_lock_release>:
   bce42:	4770      	bx	lr

000bce44 <__retarget_lock_release_recursive>:
   bce44:	4770      	bx	lr

000bce46 <__ascii_mbtowc>:
   bce46:	b082      	sub	sp, #8
   bce48:	b901      	cbnz	r1, bce4c <__ascii_mbtowc+0x6>
   bce4a:	a901      	add	r1, sp, #4
   bce4c:	b142      	cbz	r2, bce60 <__ascii_mbtowc+0x1a>
   bce4e:	b14b      	cbz	r3, bce64 <__ascii_mbtowc+0x1e>
   bce50:	7813      	ldrb	r3, [r2, #0]
   bce52:	600b      	str	r3, [r1, #0]
   bce54:	7812      	ldrb	r2, [r2, #0]
   bce56:	1e10      	subs	r0, r2, #0
   bce58:	bf18      	it	ne
   bce5a:	2001      	movne	r0, #1
   bce5c:	b002      	add	sp, #8
   bce5e:	4770      	bx	lr
   bce60:	4610      	mov	r0, r2
   bce62:	e7fb      	b.n	bce5c <__ascii_mbtowc+0x16>
   bce64:	f06f 0001 	mvn.w	r0, #1
   bce68:	e7f8      	b.n	bce5c <__ascii_mbtowc+0x16>
	...

000bce6c <_Balloc>:
   bce6c:	b570      	push	{r4, r5, r6, lr}
   bce6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bce70:	4604      	mov	r4, r0
   bce72:	460d      	mov	r5, r1
   bce74:	b976      	cbnz	r6, bce94 <_Balloc+0x28>
   bce76:	2010      	movs	r0, #16
   bce78:	f7fb f8a0 	bl	b7fbc <malloc>
   bce7c:	4602      	mov	r2, r0
   bce7e:	6260      	str	r0, [r4, #36]	; 0x24
   bce80:	b920      	cbnz	r0, bce8c <_Balloc+0x20>
   bce82:	4b18      	ldr	r3, [pc, #96]	; (bcee4 <_Balloc+0x78>)
   bce84:	4818      	ldr	r0, [pc, #96]	; (bcee8 <_Balloc+0x7c>)
   bce86:	2166      	movs	r1, #102	; 0x66
   bce88:	f7fb f8f0 	bl	b806c <__assert_func>
   bce8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bce90:	6006      	str	r6, [r0, #0]
   bce92:	60c6      	str	r6, [r0, #12]
   bce94:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bce96:	68f3      	ldr	r3, [r6, #12]
   bce98:	b183      	cbz	r3, bcebc <_Balloc+0x50>
   bce9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bce9c:	68db      	ldr	r3, [r3, #12]
   bce9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bcea2:	b9b8      	cbnz	r0, bced4 <_Balloc+0x68>
   bcea4:	2101      	movs	r1, #1
   bcea6:	fa01 f605 	lsl.w	r6, r1, r5
   bceaa:	1d72      	adds	r2, r6, #5
   bceac:	0092      	lsls	r2, r2, #2
   bceae:	4620      	mov	r0, r4
   bceb0:	f000 fc9d 	bl	bd7ee <_calloc_r>
   bceb4:	b160      	cbz	r0, bced0 <_Balloc+0x64>
   bceb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bceba:	e00e      	b.n	bceda <_Balloc+0x6e>
   bcebc:	2221      	movs	r2, #33	; 0x21
   bcebe:	2104      	movs	r1, #4
   bcec0:	4620      	mov	r0, r4
   bcec2:	f000 fc94 	bl	bd7ee <_calloc_r>
   bcec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcec8:	60f0      	str	r0, [r6, #12]
   bceca:	68db      	ldr	r3, [r3, #12]
   bcecc:	2b00      	cmp	r3, #0
   bcece:	d1e4      	bne.n	bce9a <_Balloc+0x2e>
   bced0:	2000      	movs	r0, #0
   bced2:	bd70      	pop	{r4, r5, r6, pc}
   bced4:	6802      	ldr	r2, [r0, #0]
   bced6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bceda:	2300      	movs	r3, #0
   bcedc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bcee0:	e7f7      	b.n	bced2 <_Balloc+0x66>
   bcee2:	bf00      	nop
   bcee4:	000be74f 	.word	0x000be74f
   bcee8:	000be96c 	.word	0x000be96c

000bceec <_Bfree>:
   bceec:	b570      	push	{r4, r5, r6, lr}
   bceee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcef0:	4605      	mov	r5, r0
   bcef2:	460c      	mov	r4, r1
   bcef4:	b976      	cbnz	r6, bcf14 <_Bfree+0x28>
   bcef6:	2010      	movs	r0, #16
   bcef8:	f7fb f860 	bl	b7fbc <malloc>
   bcefc:	4602      	mov	r2, r0
   bcefe:	6268      	str	r0, [r5, #36]	; 0x24
   bcf00:	b920      	cbnz	r0, bcf0c <_Bfree+0x20>
   bcf02:	4b09      	ldr	r3, [pc, #36]	; (bcf28 <_Bfree+0x3c>)
   bcf04:	4809      	ldr	r0, [pc, #36]	; (bcf2c <_Bfree+0x40>)
   bcf06:	218a      	movs	r1, #138	; 0x8a
   bcf08:	f7fb f8b0 	bl	b806c <__assert_func>
   bcf0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcf10:	6006      	str	r6, [r0, #0]
   bcf12:	60c6      	str	r6, [r0, #12]
   bcf14:	b13c      	cbz	r4, bcf26 <_Bfree+0x3a>
   bcf16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bcf18:	6862      	ldr	r2, [r4, #4]
   bcf1a:	68db      	ldr	r3, [r3, #12]
   bcf1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bcf20:	6021      	str	r1, [r4, #0]
   bcf22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bcf26:	bd70      	pop	{r4, r5, r6, pc}
   bcf28:	000be74f 	.word	0x000be74f
   bcf2c:	000be96c 	.word	0x000be96c

000bcf30 <__multadd>:
   bcf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcf34:	690d      	ldr	r5, [r1, #16]
   bcf36:	4607      	mov	r7, r0
   bcf38:	460c      	mov	r4, r1
   bcf3a:	461e      	mov	r6, r3
   bcf3c:	f101 0c14 	add.w	ip, r1, #20
   bcf40:	2000      	movs	r0, #0
   bcf42:	f8dc 3000 	ldr.w	r3, [ip]
   bcf46:	b299      	uxth	r1, r3
   bcf48:	fb02 6101 	mla	r1, r2, r1, r6
   bcf4c:	0c1e      	lsrs	r6, r3, #16
   bcf4e:	0c0b      	lsrs	r3, r1, #16
   bcf50:	fb02 3306 	mla	r3, r2, r6, r3
   bcf54:	b289      	uxth	r1, r1
   bcf56:	3001      	adds	r0, #1
   bcf58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bcf5c:	4285      	cmp	r5, r0
   bcf5e:	f84c 1b04 	str.w	r1, [ip], #4
   bcf62:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bcf66:	dcec      	bgt.n	bcf42 <__multadd+0x12>
   bcf68:	b30e      	cbz	r6, bcfae <__multadd+0x7e>
   bcf6a:	68a3      	ldr	r3, [r4, #8]
   bcf6c:	42ab      	cmp	r3, r5
   bcf6e:	dc19      	bgt.n	bcfa4 <__multadd+0x74>
   bcf70:	6861      	ldr	r1, [r4, #4]
   bcf72:	4638      	mov	r0, r7
   bcf74:	3101      	adds	r1, #1
   bcf76:	f7ff ff79 	bl	bce6c <_Balloc>
   bcf7a:	4680      	mov	r8, r0
   bcf7c:	b928      	cbnz	r0, bcf8a <__multadd+0x5a>
   bcf7e:	4602      	mov	r2, r0
   bcf80:	4b0c      	ldr	r3, [pc, #48]	; (bcfb4 <__multadd+0x84>)
   bcf82:	480d      	ldr	r0, [pc, #52]	; (bcfb8 <__multadd+0x88>)
   bcf84:	21b5      	movs	r1, #181	; 0xb5
   bcf86:	f7fb f871 	bl	b806c <__assert_func>
   bcf8a:	6922      	ldr	r2, [r4, #16]
   bcf8c:	3202      	adds	r2, #2
   bcf8e:	f104 010c 	add.w	r1, r4, #12
   bcf92:	0092      	lsls	r2, r2, #2
   bcf94:	300c      	adds	r0, #12
   bcf96:	f7fe fb22 	bl	bb5de <memcpy>
   bcf9a:	4621      	mov	r1, r4
   bcf9c:	4638      	mov	r0, r7
   bcf9e:	f7ff ffa5 	bl	bceec <_Bfree>
   bcfa2:	4644      	mov	r4, r8
   bcfa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bcfa8:	3501      	adds	r5, #1
   bcfaa:	615e      	str	r6, [r3, #20]
   bcfac:	6125      	str	r5, [r4, #16]
   bcfae:	4620      	mov	r0, r4
   bcfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcfb4:	000be8bf 	.word	0x000be8bf
   bcfb8:	000be96c 	.word	0x000be96c

000bcfbc <__s2b>:
   bcfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcfc0:	460c      	mov	r4, r1
   bcfc2:	4615      	mov	r5, r2
   bcfc4:	461f      	mov	r7, r3
   bcfc6:	2209      	movs	r2, #9
   bcfc8:	3308      	adds	r3, #8
   bcfca:	4606      	mov	r6, r0
   bcfcc:	fb93 f3f2 	sdiv	r3, r3, r2
   bcfd0:	2100      	movs	r1, #0
   bcfd2:	2201      	movs	r2, #1
   bcfd4:	429a      	cmp	r2, r3
   bcfd6:	db09      	blt.n	bcfec <__s2b+0x30>
   bcfd8:	4630      	mov	r0, r6
   bcfda:	f7ff ff47 	bl	bce6c <_Balloc>
   bcfde:	b940      	cbnz	r0, bcff2 <__s2b+0x36>
   bcfe0:	4602      	mov	r2, r0
   bcfe2:	4b19      	ldr	r3, [pc, #100]	; (bd048 <__s2b+0x8c>)
   bcfe4:	4819      	ldr	r0, [pc, #100]	; (bd04c <__s2b+0x90>)
   bcfe6:	21ce      	movs	r1, #206	; 0xce
   bcfe8:	f7fb f840 	bl	b806c <__assert_func>
   bcfec:	0052      	lsls	r2, r2, #1
   bcfee:	3101      	adds	r1, #1
   bcff0:	e7f0      	b.n	bcfd4 <__s2b+0x18>
   bcff2:	9b08      	ldr	r3, [sp, #32]
   bcff4:	6143      	str	r3, [r0, #20]
   bcff6:	2d09      	cmp	r5, #9
   bcff8:	f04f 0301 	mov.w	r3, #1
   bcffc:	6103      	str	r3, [r0, #16]
   bcffe:	dd16      	ble.n	bd02e <__s2b+0x72>
   bd000:	f104 0909 	add.w	r9, r4, #9
   bd004:	46c8      	mov	r8, r9
   bd006:	442c      	add	r4, r5
   bd008:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd00c:	4601      	mov	r1, r0
   bd00e:	3b30      	subs	r3, #48	; 0x30
   bd010:	220a      	movs	r2, #10
   bd012:	4630      	mov	r0, r6
   bd014:	f7ff ff8c 	bl	bcf30 <__multadd>
   bd018:	45a0      	cmp	r8, r4
   bd01a:	d1f5      	bne.n	bd008 <__s2b+0x4c>
   bd01c:	f1a5 0408 	sub.w	r4, r5, #8
   bd020:	444c      	add	r4, r9
   bd022:	1b2d      	subs	r5, r5, r4
   bd024:	1963      	adds	r3, r4, r5
   bd026:	42bb      	cmp	r3, r7
   bd028:	db04      	blt.n	bd034 <__s2b+0x78>
   bd02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd02e:	340a      	adds	r4, #10
   bd030:	2509      	movs	r5, #9
   bd032:	e7f6      	b.n	bd022 <__s2b+0x66>
   bd034:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd038:	4601      	mov	r1, r0
   bd03a:	3b30      	subs	r3, #48	; 0x30
   bd03c:	220a      	movs	r2, #10
   bd03e:	4630      	mov	r0, r6
   bd040:	f7ff ff76 	bl	bcf30 <__multadd>
   bd044:	e7ee      	b.n	bd024 <__s2b+0x68>
   bd046:	bf00      	nop
   bd048:	000be8bf 	.word	0x000be8bf
   bd04c:	000be96c 	.word	0x000be96c

000bd050 <__hi0bits>:
   bd050:	0c03      	lsrs	r3, r0, #16
   bd052:	041b      	lsls	r3, r3, #16
   bd054:	b9d3      	cbnz	r3, bd08c <__hi0bits+0x3c>
   bd056:	0400      	lsls	r0, r0, #16
   bd058:	2310      	movs	r3, #16
   bd05a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd05e:	bf04      	itt	eq
   bd060:	0200      	lsleq	r0, r0, #8
   bd062:	3308      	addeq	r3, #8
   bd064:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd068:	bf04      	itt	eq
   bd06a:	0100      	lsleq	r0, r0, #4
   bd06c:	3304      	addeq	r3, #4
   bd06e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd072:	bf04      	itt	eq
   bd074:	0080      	lsleq	r0, r0, #2
   bd076:	3302      	addeq	r3, #2
   bd078:	2800      	cmp	r0, #0
   bd07a:	db05      	blt.n	bd088 <__hi0bits+0x38>
   bd07c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd080:	f103 0301 	add.w	r3, r3, #1
   bd084:	bf08      	it	eq
   bd086:	2320      	moveq	r3, #32
   bd088:	4618      	mov	r0, r3
   bd08a:	4770      	bx	lr
   bd08c:	2300      	movs	r3, #0
   bd08e:	e7e4      	b.n	bd05a <__hi0bits+0xa>

000bd090 <__lo0bits>:
   bd090:	6803      	ldr	r3, [r0, #0]
   bd092:	f013 0207 	ands.w	r2, r3, #7
   bd096:	4601      	mov	r1, r0
   bd098:	d00b      	beq.n	bd0b2 <__lo0bits+0x22>
   bd09a:	07da      	lsls	r2, r3, #31
   bd09c:	d423      	bmi.n	bd0e6 <__lo0bits+0x56>
   bd09e:	0798      	lsls	r0, r3, #30
   bd0a0:	bf49      	itett	mi
   bd0a2:	085b      	lsrmi	r3, r3, #1
   bd0a4:	089b      	lsrpl	r3, r3, #2
   bd0a6:	2001      	movmi	r0, #1
   bd0a8:	600b      	strmi	r3, [r1, #0]
   bd0aa:	bf5c      	itt	pl
   bd0ac:	600b      	strpl	r3, [r1, #0]
   bd0ae:	2002      	movpl	r0, #2
   bd0b0:	4770      	bx	lr
   bd0b2:	b298      	uxth	r0, r3
   bd0b4:	b9a8      	cbnz	r0, bd0e2 <__lo0bits+0x52>
   bd0b6:	0c1b      	lsrs	r3, r3, #16
   bd0b8:	2010      	movs	r0, #16
   bd0ba:	b2da      	uxtb	r2, r3
   bd0bc:	b90a      	cbnz	r2, bd0c2 <__lo0bits+0x32>
   bd0be:	3008      	adds	r0, #8
   bd0c0:	0a1b      	lsrs	r3, r3, #8
   bd0c2:	071a      	lsls	r2, r3, #28
   bd0c4:	bf04      	itt	eq
   bd0c6:	091b      	lsreq	r3, r3, #4
   bd0c8:	3004      	addeq	r0, #4
   bd0ca:	079a      	lsls	r2, r3, #30
   bd0cc:	bf04      	itt	eq
   bd0ce:	089b      	lsreq	r3, r3, #2
   bd0d0:	3002      	addeq	r0, #2
   bd0d2:	07da      	lsls	r2, r3, #31
   bd0d4:	d403      	bmi.n	bd0de <__lo0bits+0x4e>
   bd0d6:	085b      	lsrs	r3, r3, #1
   bd0d8:	f100 0001 	add.w	r0, r0, #1
   bd0dc:	d005      	beq.n	bd0ea <__lo0bits+0x5a>
   bd0de:	600b      	str	r3, [r1, #0]
   bd0e0:	4770      	bx	lr
   bd0e2:	4610      	mov	r0, r2
   bd0e4:	e7e9      	b.n	bd0ba <__lo0bits+0x2a>
   bd0e6:	2000      	movs	r0, #0
   bd0e8:	4770      	bx	lr
   bd0ea:	2020      	movs	r0, #32
   bd0ec:	4770      	bx	lr
	...

000bd0f0 <__i2b>:
   bd0f0:	b510      	push	{r4, lr}
   bd0f2:	460c      	mov	r4, r1
   bd0f4:	2101      	movs	r1, #1
   bd0f6:	f7ff feb9 	bl	bce6c <_Balloc>
   bd0fa:	4602      	mov	r2, r0
   bd0fc:	b928      	cbnz	r0, bd10a <__i2b+0x1a>
   bd0fe:	4b05      	ldr	r3, [pc, #20]	; (bd114 <__i2b+0x24>)
   bd100:	4805      	ldr	r0, [pc, #20]	; (bd118 <__i2b+0x28>)
   bd102:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd106:	f7fa ffb1 	bl	b806c <__assert_func>
   bd10a:	2301      	movs	r3, #1
   bd10c:	6144      	str	r4, [r0, #20]
   bd10e:	6103      	str	r3, [r0, #16]
   bd110:	bd10      	pop	{r4, pc}
   bd112:	bf00      	nop
   bd114:	000be8bf 	.word	0x000be8bf
   bd118:	000be96c 	.word	0x000be96c

000bd11c <__multiply>:
   bd11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd120:	4691      	mov	r9, r2
   bd122:	690a      	ldr	r2, [r1, #16]
   bd124:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd128:	429a      	cmp	r2, r3
   bd12a:	bfb8      	it	lt
   bd12c:	460b      	movlt	r3, r1
   bd12e:	460c      	mov	r4, r1
   bd130:	bfbc      	itt	lt
   bd132:	464c      	movlt	r4, r9
   bd134:	4699      	movlt	r9, r3
   bd136:	6927      	ldr	r7, [r4, #16]
   bd138:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd13c:	68a3      	ldr	r3, [r4, #8]
   bd13e:	6861      	ldr	r1, [r4, #4]
   bd140:	eb07 060a 	add.w	r6, r7, sl
   bd144:	42b3      	cmp	r3, r6
   bd146:	b085      	sub	sp, #20
   bd148:	bfb8      	it	lt
   bd14a:	3101      	addlt	r1, #1
   bd14c:	f7ff fe8e 	bl	bce6c <_Balloc>
   bd150:	b930      	cbnz	r0, bd160 <__multiply+0x44>
   bd152:	4602      	mov	r2, r0
   bd154:	4b44      	ldr	r3, [pc, #272]	; (bd268 <__multiply+0x14c>)
   bd156:	4845      	ldr	r0, [pc, #276]	; (bd26c <__multiply+0x150>)
   bd158:	f240 115d 	movw	r1, #349	; 0x15d
   bd15c:	f7fa ff86 	bl	b806c <__assert_func>
   bd160:	f100 0514 	add.w	r5, r0, #20
   bd164:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd168:	462b      	mov	r3, r5
   bd16a:	2200      	movs	r2, #0
   bd16c:	4543      	cmp	r3, r8
   bd16e:	d321      	bcc.n	bd1b4 <__multiply+0x98>
   bd170:	f104 0314 	add.w	r3, r4, #20
   bd174:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd178:	f109 0314 	add.w	r3, r9, #20
   bd17c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd180:	9202      	str	r2, [sp, #8]
   bd182:	1b3a      	subs	r2, r7, r4
   bd184:	3a15      	subs	r2, #21
   bd186:	f022 0203 	bic.w	r2, r2, #3
   bd18a:	3204      	adds	r2, #4
   bd18c:	f104 0115 	add.w	r1, r4, #21
   bd190:	428f      	cmp	r7, r1
   bd192:	bf38      	it	cc
   bd194:	2204      	movcc	r2, #4
   bd196:	9201      	str	r2, [sp, #4]
   bd198:	9a02      	ldr	r2, [sp, #8]
   bd19a:	9303      	str	r3, [sp, #12]
   bd19c:	429a      	cmp	r2, r3
   bd19e:	d80c      	bhi.n	bd1ba <__multiply+0x9e>
   bd1a0:	2e00      	cmp	r6, #0
   bd1a2:	dd03      	ble.n	bd1ac <__multiply+0x90>
   bd1a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd1a8:	2b00      	cmp	r3, #0
   bd1aa:	d05a      	beq.n	bd262 <__multiply+0x146>
   bd1ac:	6106      	str	r6, [r0, #16]
   bd1ae:	b005      	add	sp, #20
   bd1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd1b4:	f843 2b04 	str.w	r2, [r3], #4
   bd1b8:	e7d8      	b.n	bd16c <__multiply+0x50>
   bd1ba:	f8b3 a000 	ldrh.w	sl, [r3]
   bd1be:	f1ba 0f00 	cmp.w	sl, #0
   bd1c2:	d024      	beq.n	bd20e <__multiply+0xf2>
   bd1c4:	f104 0e14 	add.w	lr, r4, #20
   bd1c8:	46a9      	mov	r9, r5
   bd1ca:	f04f 0c00 	mov.w	ip, #0
   bd1ce:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd1d2:	f8d9 1000 	ldr.w	r1, [r9]
   bd1d6:	fa1f fb82 	uxth.w	fp, r2
   bd1da:	b289      	uxth	r1, r1
   bd1dc:	fb0a 110b 	mla	r1, sl, fp, r1
   bd1e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd1e4:	f8d9 2000 	ldr.w	r2, [r9]
   bd1e8:	4461      	add	r1, ip
   bd1ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd1ee:	fb0a c20b 	mla	r2, sl, fp, ip
   bd1f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd1f6:	b289      	uxth	r1, r1
   bd1f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd1fc:	4577      	cmp	r7, lr
   bd1fe:	f849 1b04 	str.w	r1, [r9], #4
   bd202:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd206:	d8e2      	bhi.n	bd1ce <__multiply+0xb2>
   bd208:	9a01      	ldr	r2, [sp, #4]
   bd20a:	f845 c002 	str.w	ip, [r5, r2]
   bd20e:	9a03      	ldr	r2, [sp, #12]
   bd210:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd214:	3304      	adds	r3, #4
   bd216:	f1b9 0f00 	cmp.w	r9, #0
   bd21a:	d020      	beq.n	bd25e <__multiply+0x142>
   bd21c:	6829      	ldr	r1, [r5, #0]
   bd21e:	f104 0c14 	add.w	ip, r4, #20
   bd222:	46ae      	mov	lr, r5
   bd224:	f04f 0a00 	mov.w	sl, #0
   bd228:	f8bc b000 	ldrh.w	fp, [ip]
   bd22c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd230:	fb09 220b 	mla	r2, r9, fp, r2
   bd234:	4492      	add	sl, r2
   bd236:	b289      	uxth	r1, r1
   bd238:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd23c:	f84e 1b04 	str.w	r1, [lr], #4
   bd240:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd244:	f8be 1000 	ldrh.w	r1, [lr]
   bd248:	0c12      	lsrs	r2, r2, #16
   bd24a:	fb09 1102 	mla	r1, r9, r2, r1
   bd24e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd252:	4567      	cmp	r7, ip
   bd254:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd258:	d8e6      	bhi.n	bd228 <__multiply+0x10c>
   bd25a:	9a01      	ldr	r2, [sp, #4]
   bd25c:	50a9      	str	r1, [r5, r2]
   bd25e:	3504      	adds	r5, #4
   bd260:	e79a      	b.n	bd198 <__multiply+0x7c>
   bd262:	3e01      	subs	r6, #1
   bd264:	e79c      	b.n	bd1a0 <__multiply+0x84>
   bd266:	bf00      	nop
   bd268:	000be8bf 	.word	0x000be8bf
   bd26c:	000be96c 	.word	0x000be96c

000bd270 <__pow5mult>:
   bd270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd274:	4615      	mov	r5, r2
   bd276:	f012 0203 	ands.w	r2, r2, #3
   bd27a:	4606      	mov	r6, r0
   bd27c:	460f      	mov	r7, r1
   bd27e:	d007      	beq.n	bd290 <__pow5mult+0x20>
   bd280:	4c25      	ldr	r4, [pc, #148]	; (bd318 <__pow5mult+0xa8>)
   bd282:	3a01      	subs	r2, #1
   bd284:	2300      	movs	r3, #0
   bd286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd28a:	f7ff fe51 	bl	bcf30 <__multadd>
   bd28e:	4607      	mov	r7, r0
   bd290:	10ad      	asrs	r5, r5, #2
   bd292:	d03d      	beq.n	bd310 <__pow5mult+0xa0>
   bd294:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd296:	b97c      	cbnz	r4, bd2b8 <__pow5mult+0x48>
   bd298:	2010      	movs	r0, #16
   bd29a:	f7fa fe8f 	bl	b7fbc <malloc>
   bd29e:	4602      	mov	r2, r0
   bd2a0:	6270      	str	r0, [r6, #36]	; 0x24
   bd2a2:	b928      	cbnz	r0, bd2b0 <__pow5mult+0x40>
   bd2a4:	4b1d      	ldr	r3, [pc, #116]	; (bd31c <__pow5mult+0xac>)
   bd2a6:	481e      	ldr	r0, [pc, #120]	; (bd320 <__pow5mult+0xb0>)
   bd2a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd2ac:	f7fa fede 	bl	b806c <__assert_func>
   bd2b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd2b4:	6004      	str	r4, [r0, #0]
   bd2b6:	60c4      	str	r4, [r0, #12]
   bd2b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd2bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd2c0:	b94c      	cbnz	r4, bd2d6 <__pow5mult+0x66>
   bd2c2:	f240 2171 	movw	r1, #625	; 0x271
   bd2c6:	4630      	mov	r0, r6
   bd2c8:	f7ff ff12 	bl	bd0f0 <__i2b>
   bd2cc:	2300      	movs	r3, #0
   bd2ce:	f8c8 0008 	str.w	r0, [r8, #8]
   bd2d2:	4604      	mov	r4, r0
   bd2d4:	6003      	str	r3, [r0, #0]
   bd2d6:	f04f 0900 	mov.w	r9, #0
   bd2da:	07eb      	lsls	r3, r5, #31
   bd2dc:	d50a      	bpl.n	bd2f4 <__pow5mult+0x84>
   bd2de:	4639      	mov	r1, r7
   bd2e0:	4622      	mov	r2, r4
   bd2e2:	4630      	mov	r0, r6
   bd2e4:	f7ff ff1a 	bl	bd11c <__multiply>
   bd2e8:	4639      	mov	r1, r7
   bd2ea:	4680      	mov	r8, r0
   bd2ec:	4630      	mov	r0, r6
   bd2ee:	f7ff fdfd 	bl	bceec <_Bfree>
   bd2f2:	4647      	mov	r7, r8
   bd2f4:	106d      	asrs	r5, r5, #1
   bd2f6:	d00b      	beq.n	bd310 <__pow5mult+0xa0>
   bd2f8:	6820      	ldr	r0, [r4, #0]
   bd2fa:	b938      	cbnz	r0, bd30c <__pow5mult+0x9c>
   bd2fc:	4622      	mov	r2, r4
   bd2fe:	4621      	mov	r1, r4
   bd300:	4630      	mov	r0, r6
   bd302:	f7ff ff0b 	bl	bd11c <__multiply>
   bd306:	6020      	str	r0, [r4, #0]
   bd308:	f8c0 9000 	str.w	r9, [r0]
   bd30c:	4604      	mov	r4, r0
   bd30e:	e7e4      	b.n	bd2da <__pow5mult+0x6a>
   bd310:	4638      	mov	r0, r7
   bd312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd316:	bf00      	nop
   bd318:	000beae0 	.word	0x000beae0
   bd31c:	000be74f 	.word	0x000be74f
   bd320:	000be96c 	.word	0x000be96c

000bd324 <__lshift>:
   bd324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd328:	460c      	mov	r4, r1
   bd32a:	6849      	ldr	r1, [r1, #4]
   bd32c:	6923      	ldr	r3, [r4, #16]
   bd32e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd332:	68a3      	ldr	r3, [r4, #8]
   bd334:	4607      	mov	r7, r0
   bd336:	4691      	mov	r9, r2
   bd338:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd33c:	f108 0601 	add.w	r6, r8, #1
   bd340:	42b3      	cmp	r3, r6
   bd342:	db0b      	blt.n	bd35c <__lshift+0x38>
   bd344:	4638      	mov	r0, r7
   bd346:	f7ff fd91 	bl	bce6c <_Balloc>
   bd34a:	4605      	mov	r5, r0
   bd34c:	b948      	cbnz	r0, bd362 <__lshift+0x3e>
   bd34e:	4602      	mov	r2, r0
   bd350:	4b2a      	ldr	r3, [pc, #168]	; (bd3fc <__lshift+0xd8>)
   bd352:	482b      	ldr	r0, [pc, #172]	; (bd400 <__lshift+0xdc>)
   bd354:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd358:	f7fa fe88 	bl	b806c <__assert_func>
   bd35c:	3101      	adds	r1, #1
   bd35e:	005b      	lsls	r3, r3, #1
   bd360:	e7ee      	b.n	bd340 <__lshift+0x1c>
   bd362:	2300      	movs	r3, #0
   bd364:	f100 0114 	add.w	r1, r0, #20
   bd368:	f100 0210 	add.w	r2, r0, #16
   bd36c:	4618      	mov	r0, r3
   bd36e:	4553      	cmp	r3, sl
   bd370:	db37      	blt.n	bd3e2 <__lshift+0xbe>
   bd372:	6920      	ldr	r0, [r4, #16]
   bd374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd378:	f104 0314 	add.w	r3, r4, #20
   bd37c:	f019 091f 	ands.w	r9, r9, #31
   bd380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd384:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd388:	d02f      	beq.n	bd3ea <__lshift+0xc6>
   bd38a:	f1c9 0e20 	rsb	lr, r9, #32
   bd38e:	468a      	mov	sl, r1
   bd390:	f04f 0c00 	mov.w	ip, #0
   bd394:	681a      	ldr	r2, [r3, #0]
   bd396:	fa02 f209 	lsl.w	r2, r2, r9
   bd39a:	ea42 020c 	orr.w	r2, r2, ip
   bd39e:	f84a 2b04 	str.w	r2, [sl], #4
   bd3a2:	f853 2b04 	ldr.w	r2, [r3], #4
   bd3a6:	4298      	cmp	r0, r3
   bd3a8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd3ac:	d8f2      	bhi.n	bd394 <__lshift+0x70>
   bd3ae:	1b03      	subs	r3, r0, r4
   bd3b0:	3b15      	subs	r3, #21
   bd3b2:	f023 0303 	bic.w	r3, r3, #3
   bd3b6:	3304      	adds	r3, #4
   bd3b8:	f104 0215 	add.w	r2, r4, #21
   bd3bc:	4290      	cmp	r0, r2
   bd3be:	bf38      	it	cc
   bd3c0:	2304      	movcc	r3, #4
   bd3c2:	f841 c003 	str.w	ip, [r1, r3]
   bd3c6:	f1bc 0f00 	cmp.w	ip, #0
   bd3ca:	d001      	beq.n	bd3d0 <__lshift+0xac>
   bd3cc:	f108 0602 	add.w	r6, r8, #2
   bd3d0:	3e01      	subs	r6, #1
   bd3d2:	4638      	mov	r0, r7
   bd3d4:	612e      	str	r6, [r5, #16]
   bd3d6:	4621      	mov	r1, r4
   bd3d8:	f7ff fd88 	bl	bceec <_Bfree>
   bd3dc:	4628      	mov	r0, r5
   bd3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd3e2:	f842 0f04 	str.w	r0, [r2, #4]!
   bd3e6:	3301      	adds	r3, #1
   bd3e8:	e7c1      	b.n	bd36e <__lshift+0x4a>
   bd3ea:	3904      	subs	r1, #4
   bd3ec:	f853 2b04 	ldr.w	r2, [r3], #4
   bd3f0:	f841 2f04 	str.w	r2, [r1, #4]!
   bd3f4:	4298      	cmp	r0, r3
   bd3f6:	d8f9      	bhi.n	bd3ec <__lshift+0xc8>
   bd3f8:	e7ea      	b.n	bd3d0 <__lshift+0xac>
   bd3fa:	bf00      	nop
   bd3fc:	000be8bf 	.word	0x000be8bf
   bd400:	000be96c 	.word	0x000be96c

000bd404 <__mcmp>:
   bd404:	b530      	push	{r4, r5, lr}
   bd406:	6902      	ldr	r2, [r0, #16]
   bd408:	690c      	ldr	r4, [r1, #16]
   bd40a:	1b12      	subs	r2, r2, r4
   bd40c:	d10e      	bne.n	bd42c <__mcmp+0x28>
   bd40e:	f100 0314 	add.w	r3, r0, #20
   bd412:	3114      	adds	r1, #20
   bd414:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd418:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd41c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd420:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd424:	42a5      	cmp	r5, r4
   bd426:	d003      	beq.n	bd430 <__mcmp+0x2c>
   bd428:	d305      	bcc.n	bd436 <__mcmp+0x32>
   bd42a:	2201      	movs	r2, #1
   bd42c:	4610      	mov	r0, r2
   bd42e:	bd30      	pop	{r4, r5, pc}
   bd430:	4283      	cmp	r3, r0
   bd432:	d3f3      	bcc.n	bd41c <__mcmp+0x18>
   bd434:	e7fa      	b.n	bd42c <__mcmp+0x28>
   bd436:	f04f 32ff 	mov.w	r2, #4294967295
   bd43a:	e7f7      	b.n	bd42c <__mcmp+0x28>

000bd43c <__mdiff>:
   bd43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd440:	460c      	mov	r4, r1
   bd442:	4606      	mov	r6, r0
   bd444:	4611      	mov	r1, r2
   bd446:	4620      	mov	r0, r4
   bd448:	4690      	mov	r8, r2
   bd44a:	f7ff ffdb 	bl	bd404 <__mcmp>
   bd44e:	1e05      	subs	r5, r0, #0
   bd450:	d110      	bne.n	bd474 <__mdiff+0x38>
   bd452:	4629      	mov	r1, r5
   bd454:	4630      	mov	r0, r6
   bd456:	f7ff fd09 	bl	bce6c <_Balloc>
   bd45a:	b930      	cbnz	r0, bd46a <__mdiff+0x2e>
   bd45c:	4b3a      	ldr	r3, [pc, #232]	; (bd548 <__mdiff+0x10c>)
   bd45e:	4602      	mov	r2, r0
   bd460:	f240 2132 	movw	r1, #562	; 0x232
   bd464:	4839      	ldr	r0, [pc, #228]	; (bd54c <__mdiff+0x110>)
   bd466:	f7fa fe01 	bl	b806c <__assert_func>
   bd46a:	2301      	movs	r3, #1
   bd46c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd474:	bfa4      	itt	ge
   bd476:	4643      	movge	r3, r8
   bd478:	46a0      	movge	r8, r4
   bd47a:	4630      	mov	r0, r6
   bd47c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd480:	bfa6      	itte	ge
   bd482:	461c      	movge	r4, r3
   bd484:	2500      	movge	r5, #0
   bd486:	2501      	movlt	r5, #1
   bd488:	f7ff fcf0 	bl	bce6c <_Balloc>
   bd48c:	b920      	cbnz	r0, bd498 <__mdiff+0x5c>
   bd48e:	4b2e      	ldr	r3, [pc, #184]	; (bd548 <__mdiff+0x10c>)
   bd490:	4602      	mov	r2, r0
   bd492:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd496:	e7e5      	b.n	bd464 <__mdiff+0x28>
   bd498:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd49c:	6926      	ldr	r6, [r4, #16]
   bd49e:	60c5      	str	r5, [r0, #12]
   bd4a0:	f104 0914 	add.w	r9, r4, #20
   bd4a4:	f108 0514 	add.w	r5, r8, #20
   bd4a8:	f100 0e14 	add.w	lr, r0, #20
   bd4ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd4b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd4b4:	f108 0210 	add.w	r2, r8, #16
   bd4b8:	46f2      	mov	sl, lr
   bd4ba:	2100      	movs	r1, #0
   bd4bc:	f859 3b04 	ldr.w	r3, [r9], #4
   bd4c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd4c4:	fa1f f883 	uxth.w	r8, r3
   bd4c8:	fa11 f18b 	uxtah	r1, r1, fp
   bd4cc:	0c1b      	lsrs	r3, r3, #16
   bd4ce:	eba1 0808 	sub.w	r8, r1, r8
   bd4d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd4d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd4da:	fa1f f888 	uxth.w	r8, r8
   bd4de:	1419      	asrs	r1, r3, #16
   bd4e0:	454e      	cmp	r6, r9
   bd4e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd4e6:	f84a 3b04 	str.w	r3, [sl], #4
   bd4ea:	d8e7      	bhi.n	bd4bc <__mdiff+0x80>
   bd4ec:	1b33      	subs	r3, r6, r4
   bd4ee:	3b15      	subs	r3, #21
   bd4f0:	f023 0303 	bic.w	r3, r3, #3
   bd4f4:	3304      	adds	r3, #4
   bd4f6:	3415      	adds	r4, #21
   bd4f8:	42a6      	cmp	r6, r4
   bd4fa:	bf38      	it	cc
   bd4fc:	2304      	movcc	r3, #4
   bd4fe:	441d      	add	r5, r3
   bd500:	4473      	add	r3, lr
   bd502:	469e      	mov	lr, r3
   bd504:	462e      	mov	r6, r5
   bd506:	4566      	cmp	r6, ip
   bd508:	d30e      	bcc.n	bd528 <__mdiff+0xec>
   bd50a:	f10c 0203 	add.w	r2, ip, #3
   bd50e:	1b52      	subs	r2, r2, r5
   bd510:	f022 0203 	bic.w	r2, r2, #3
   bd514:	3d03      	subs	r5, #3
   bd516:	45ac      	cmp	ip, r5
   bd518:	bf38      	it	cc
   bd51a:	2200      	movcc	r2, #0
   bd51c:	441a      	add	r2, r3
   bd51e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd522:	b17b      	cbz	r3, bd544 <__mdiff+0x108>
   bd524:	6107      	str	r7, [r0, #16]
   bd526:	e7a3      	b.n	bd470 <__mdiff+0x34>
   bd528:	f856 8b04 	ldr.w	r8, [r6], #4
   bd52c:	fa11 f288 	uxtah	r2, r1, r8
   bd530:	1414      	asrs	r4, r2, #16
   bd532:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd536:	b292      	uxth	r2, r2
   bd538:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd53c:	f84e 2b04 	str.w	r2, [lr], #4
   bd540:	1421      	asrs	r1, r4, #16
   bd542:	e7e0      	b.n	bd506 <__mdiff+0xca>
   bd544:	3f01      	subs	r7, #1
   bd546:	e7ea      	b.n	bd51e <__mdiff+0xe2>
   bd548:	000be8bf 	.word	0x000be8bf
   bd54c:	000be96c 	.word	0x000be96c

000bd550 <__ulp>:
   bd550:	b082      	sub	sp, #8
   bd552:	ed8d 0b00 	vstr	d0, [sp]
   bd556:	9b01      	ldr	r3, [sp, #4]
   bd558:	4912      	ldr	r1, [pc, #72]	; (bd5a4 <__ulp+0x54>)
   bd55a:	4019      	ands	r1, r3
   bd55c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd560:	2900      	cmp	r1, #0
   bd562:	dd05      	ble.n	bd570 <__ulp+0x20>
   bd564:	2200      	movs	r2, #0
   bd566:	460b      	mov	r3, r1
   bd568:	ec43 2b10 	vmov	d0, r2, r3
   bd56c:	b002      	add	sp, #8
   bd56e:	4770      	bx	lr
   bd570:	4249      	negs	r1, r1
   bd572:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd576:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd57a:	f04f 0200 	mov.w	r2, #0
   bd57e:	f04f 0300 	mov.w	r3, #0
   bd582:	da04      	bge.n	bd58e <__ulp+0x3e>
   bd584:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd588:	fa41 f300 	asr.w	r3, r1, r0
   bd58c:	e7ec      	b.n	bd568 <__ulp+0x18>
   bd58e:	f1a0 0114 	sub.w	r1, r0, #20
   bd592:	291e      	cmp	r1, #30
   bd594:	bfda      	itte	le
   bd596:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd59a:	fa20 f101 	lsrle.w	r1, r0, r1
   bd59e:	2101      	movgt	r1, #1
   bd5a0:	460a      	mov	r2, r1
   bd5a2:	e7e1      	b.n	bd568 <__ulp+0x18>
   bd5a4:	7ff00000 	.word	0x7ff00000

000bd5a8 <__b2d>:
   bd5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd5aa:	6905      	ldr	r5, [r0, #16]
   bd5ac:	f100 0714 	add.w	r7, r0, #20
   bd5b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd5b4:	1f2e      	subs	r6, r5, #4
   bd5b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd5ba:	4620      	mov	r0, r4
   bd5bc:	f7ff fd48 	bl	bd050 <__hi0bits>
   bd5c0:	f1c0 0320 	rsb	r3, r0, #32
   bd5c4:	280a      	cmp	r0, #10
   bd5c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd644 <__b2d+0x9c>
   bd5ca:	600b      	str	r3, [r1, #0]
   bd5cc:	dc14      	bgt.n	bd5f8 <__b2d+0x50>
   bd5ce:	f1c0 0e0b 	rsb	lr, r0, #11
   bd5d2:	fa24 f10e 	lsr.w	r1, r4, lr
   bd5d6:	42b7      	cmp	r7, r6
   bd5d8:	ea41 030c 	orr.w	r3, r1, ip
   bd5dc:	bf34      	ite	cc
   bd5de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd5e2:	2100      	movcs	r1, #0
   bd5e4:	3015      	adds	r0, #21
   bd5e6:	fa04 f000 	lsl.w	r0, r4, r0
   bd5ea:	fa21 f10e 	lsr.w	r1, r1, lr
   bd5ee:	ea40 0201 	orr.w	r2, r0, r1
   bd5f2:	ec43 2b10 	vmov	d0, r2, r3
   bd5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd5f8:	42b7      	cmp	r7, r6
   bd5fa:	bf3a      	itte	cc
   bd5fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd600:	f1a5 0608 	subcc.w	r6, r5, #8
   bd604:	2100      	movcs	r1, #0
   bd606:	380b      	subs	r0, #11
   bd608:	d017      	beq.n	bd63a <__b2d+0x92>
   bd60a:	f1c0 0c20 	rsb	ip, r0, #32
   bd60e:	fa04 f500 	lsl.w	r5, r4, r0
   bd612:	42be      	cmp	r6, r7
   bd614:	fa21 f40c 	lsr.w	r4, r1, ip
   bd618:	ea45 0504 	orr.w	r5, r5, r4
   bd61c:	bf8c      	ite	hi
   bd61e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd622:	2400      	movls	r4, #0
   bd624:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd628:	fa01 f000 	lsl.w	r0, r1, r0
   bd62c:	fa24 f40c 	lsr.w	r4, r4, ip
   bd630:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd634:	ea40 0204 	orr.w	r2, r0, r4
   bd638:	e7db      	b.n	bd5f2 <__b2d+0x4a>
   bd63a:	ea44 030c 	orr.w	r3, r4, ip
   bd63e:	460a      	mov	r2, r1
   bd640:	e7d7      	b.n	bd5f2 <__b2d+0x4a>
   bd642:	bf00      	nop
   bd644:	3ff00000 	.word	0x3ff00000

000bd648 <__d2b>:
   bd648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd64c:	4689      	mov	r9, r1
   bd64e:	2101      	movs	r1, #1
   bd650:	ec57 6b10 	vmov	r6, r7, d0
   bd654:	4690      	mov	r8, r2
   bd656:	f7ff fc09 	bl	bce6c <_Balloc>
   bd65a:	4604      	mov	r4, r0
   bd65c:	b930      	cbnz	r0, bd66c <__d2b+0x24>
   bd65e:	4602      	mov	r2, r0
   bd660:	4b25      	ldr	r3, [pc, #148]	; (bd6f8 <__d2b+0xb0>)
   bd662:	4826      	ldr	r0, [pc, #152]	; (bd6fc <__d2b+0xb4>)
   bd664:	f240 310a 	movw	r1, #778	; 0x30a
   bd668:	f7fa fd00 	bl	b806c <__assert_func>
   bd66c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd670:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd674:	bb35      	cbnz	r5, bd6c4 <__d2b+0x7c>
   bd676:	2e00      	cmp	r6, #0
   bd678:	9301      	str	r3, [sp, #4]
   bd67a:	d028      	beq.n	bd6ce <__d2b+0x86>
   bd67c:	4668      	mov	r0, sp
   bd67e:	9600      	str	r6, [sp, #0]
   bd680:	f7ff fd06 	bl	bd090 <__lo0bits>
   bd684:	9900      	ldr	r1, [sp, #0]
   bd686:	b300      	cbz	r0, bd6ca <__d2b+0x82>
   bd688:	9a01      	ldr	r2, [sp, #4]
   bd68a:	f1c0 0320 	rsb	r3, r0, #32
   bd68e:	fa02 f303 	lsl.w	r3, r2, r3
   bd692:	430b      	orrs	r3, r1
   bd694:	40c2      	lsrs	r2, r0
   bd696:	6163      	str	r3, [r4, #20]
   bd698:	9201      	str	r2, [sp, #4]
   bd69a:	9b01      	ldr	r3, [sp, #4]
   bd69c:	61a3      	str	r3, [r4, #24]
   bd69e:	2b00      	cmp	r3, #0
   bd6a0:	bf14      	ite	ne
   bd6a2:	2202      	movne	r2, #2
   bd6a4:	2201      	moveq	r2, #1
   bd6a6:	6122      	str	r2, [r4, #16]
   bd6a8:	b1d5      	cbz	r5, bd6e0 <__d2b+0x98>
   bd6aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd6ae:	4405      	add	r5, r0
   bd6b0:	f8c9 5000 	str.w	r5, [r9]
   bd6b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd6b8:	f8c8 0000 	str.w	r0, [r8]
   bd6bc:	4620      	mov	r0, r4
   bd6be:	b003      	add	sp, #12
   bd6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd6c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd6c8:	e7d5      	b.n	bd676 <__d2b+0x2e>
   bd6ca:	6161      	str	r1, [r4, #20]
   bd6cc:	e7e5      	b.n	bd69a <__d2b+0x52>
   bd6ce:	a801      	add	r0, sp, #4
   bd6d0:	f7ff fcde 	bl	bd090 <__lo0bits>
   bd6d4:	9b01      	ldr	r3, [sp, #4]
   bd6d6:	6163      	str	r3, [r4, #20]
   bd6d8:	2201      	movs	r2, #1
   bd6da:	6122      	str	r2, [r4, #16]
   bd6dc:	3020      	adds	r0, #32
   bd6de:	e7e3      	b.n	bd6a8 <__d2b+0x60>
   bd6e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd6e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd6e8:	f8c9 0000 	str.w	r0, [r9]
   bd6ec:	6918      	ldr	r0, [r3, #16]
   bd6ee:	f7ff fcaf 	bl	bd050 <__hi0bits>
   bd6f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd6f6:	e7df      	b.n	bd6b8 <__d2b+0x70>
   bd6f8:	000be8bf 	.word	0x000be8bf
   bd6fc:	000be96c 	.word	0x000be96c

000bd700 <__ratio>:
   bd700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd704:	4688      	mov	r8, r1
   bd706:	4669      	mov	r1, sp
   bd708:	4681      	mov	r9, r0
   bd70a:	f7ff ff4d 	bl	bd5a8 <__b2d>
   bd70e:	a901      	add	r1, sp, #4
   bd710:	4640      	mov	r0, r8
   bd712:	ec55 4b10 	vmov	r4, r5, d0
   bd716:	f7ff ff47 	bl	bd5a8 <__b2d>
   bd71a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd71e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd722:	eba3 0c02 	sub.w	ip, r3, r2
   bd726:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd72a:	1a9b      	subs	r3, r3, r2
   bd72c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd730:	ec51 0b10 	vmov	r0, r1, d0
   bd734:	2b00      	cmp	r3, #0
   bd736:	bfd6      	itet	le
   bd738:	460a      	movle	r2, r1
   bd73a:	462a      	movgt	r2, r5
   bd73c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd740:	468b      	mov	fp, r1
   bd742:	462f      	mov	r7, r5
   bd744:	bfd4      	ite	le
   bd746:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd74a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd74e:	4620      	mov	r0, r4
   bd750:	ee10 2a10 	vmov	r2, s0
   bd754:	465b      	mov	r3, fp
   bd756:	4639      	mov	r1, r7
   bd758:	f7f6 ff48 	bl	b45ec <__aeabi_ddiv>
   bd75c:	ec41 0b10 	vmov	d0, r0, r1
   bd760:	b003      	add	sp, #12
   bd762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd766 <__copybits>:
   bd766:	3901      	subs	r1, #1
   bd768:	b570      	push	{r4, r5, r6, lr}
   bd76a:	1149      	asrs	r1, r1, #5
   bd76c:	6914      	ldr	r4, [r2, #16]
   bd76e:	3101      	adds	r1, #1
   bd770:	f102 0314 	add.w	r3, r2, #20
   bd774:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd778:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd77c:	1f05      	subs	r5, r0, #4
   bd77e:	42a3      	cmp	r3, r4
   bd780:	d30c      	bcc.n	bd79c <__copybits+0x36>
   bd782:	1aa3      	subs	r3, r4, r2
   bd784:	3b11      	subs	r3, #17
   bd786:	f023 0303 	bic.w	r3, r3, #3
   bd78a:	3211      	adds	r2, #17
   bd78c:	42a2      	cmp	r2, r4
   bd78e:	bf88      	it	hi
   bd790:	2300      	movhi	r3, #0
   bd792:	4418      	add	r0, r3
   bd794:	2300      	movs	r3, #0
   bd796:	4288      	cmp	r0, r1
   bd798:	d305      	bcc.n	bd7a6 <__copybits+0x40>
   bd79a:	bd70      	pop	{r4, r5, r6, pc}
   bd79c:	f853 6b04 	ldr.w	r6, [r3], #4
   bd7a0:	f845 6f04 	str.w	r6, [r5, #4]!
   bd7a4:	e7eb      	b.n	bd77e <__copybits+0x18>
   bd7a6:	f840 3b04 	str.w	r3, [r0], #4
   bd7aa:	e7f4      	b.n	bd796 <__copybits+0x30>

000bd7ac <__any_on>:
   bd7ac:	f100 0214 	add.w	r2, r0, #20
   bd7b0:	6900      	ldr	r0, [r0, #16]
   bd7b2:	114b      	asrs	r3, r1, #5
   bd7b4:	4298      	cmp	r0, r3
   bd7b6:	b510      	push	{r4, lr}
   bd7b8:	db11      	blt.n	bd7de <__any_on+0x32>
   bd7ba:	dd0a      	ble.n	bd7d2 <__any_on+0x26>
   bd7bc:	f011 011f 	ands.w	r1, r1, #31
   bd7c0:	d007      	beq.n	bd7d2 <__any_on+0x26>
   bd7c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd7c6:	fa24 f001 	lsr.w	r0, r4, r1
   bd7ca:	fa00 f101 	lsl.w	r1, r0, r1
   bd7ce:	428c      	cmp	r4, r1
   bd7d0:	d10b      	bne.n	bd7ea <__any_on+0x3e>
   bd7d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd7d6:	4293      	cmp	r3, r2
   bd7d8:	d803      	bhi.n	bd7e2 <__any_on+0x36>
   bd7da:	2000      	movs	r0, #0
   bd7dc:	bd10      	pop	{r4, pc}
   bd7de:	4603      	mov	r3, r0
   bd7e0:	e7f7      	b.n	bd7d2 <__any_on+0x26>
   bd7e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd7e6:	2900      	cmp	r1, #0
   bd7e8:	d0f5      	beq.n	bd7d6 <__any_on+0x2a>
   bd7ea:	2001      	movs	r0, #1
   bd7ec:	e7f6      	b.n	bd7dc <__any_on+0x30>

000bd7ee <_calloc_r>:
   bd7ee:	b513      	push	{r0, r1, r4, lr}
   bd7f0:	434a      	muls	r2, r1
   bd7f2:	4611      	mov	r1, r2
   bd7f4:	9201      	str	r2, [sp, #4]
   bd7f6:	f7fa fc29 	bl	b804c <_malloc_r>
   bd7fa:	4604      	mov	r4, r0
   bd7fc:	b118      	cbz	r0, bd806 <_calloc_r+0x18>
   bd7fe:	9a01      	ldr	r2, [sp, #4]
   bd800:	2100      	movs	r1, #0
   bd802:	f7fd ff14 	bl	bb62e <memset>
   bd806:	4620      	mov	r0, r4
   bd808:	b002      	add	sp, #8
   bd80a:	bd10      	pop	{r4, pc}

000bd80c <_open_r>:
   bd80c:	b538      	push	{r3, r4, r5, lr}
   bd80e:	4d07      	ldr	r5, [pc, #28]	; (bd82c <_open_r+0x20>)
   bd810:	4604      	mov	r4, r0
   bd812:	4608      	mov	r0, r1
   bd814:	4611      	mov	r1, r2
   bd816:	2200      	movs	r2, #0
   bd818:	602a      	str	r2, [r5, #0]
   bd81a:	461a      	mov	r2, r3
   bd81c:	f7fa f8d8 	bl	b79d0 <_open>
   bd820:	1c43      	adds	r3, r0, #1
   bd822:	d102      	bne.n	bd82a <_open_r+0x1e>
   bd824:	682b      	ldr	r3, [r5, #0]
   bd826:	b103      	cbz	r3, bd82a <_open_r+0x1e>
   bd828:	6023      	str	r3, [r4, #0]
   bd82a:	bd38      	pop	{r3, r4, r5, pc}
   bd82c:	2003e7ec 	.word	0x2003e7ec

000bd830 <_read_r>:
   bd830:	b538      	push	{r3, r4, r5, lr}
   bd832:	4d07      	ldr	r5, [pc, #28]	; (bd850 <_read_r+0x20>)
   bd834:	4604      	mov	r4, r0
   bd836:	4608      	mov	r0, r1
   bd838:	4611      	mov	r1, r2
   bd83a:	2200      	movs	r2, #0
   bd83c:	602a      	str	r2, [r5, #0]
   bd83e:	461a      	mov	r2, r3
   bd840:	f7fa f8d6 	bl	b79f0 <_read>
   bd844:	1c43      	adds	r3, r0, #1
   bd846:	d102      	bne.n	bd84e <_read_r+0x1e>
   bd848:	682b      	ldr	r3, [r5, #0]
   bd84a:	b103      	cbz	r3, bd84e <_read_r+0x1e>
   bd84c:	6023      	str	r3, [r4, #0]
   bd84e:	bd38      	pop	{r3, r4, r5, pc}
   bd850:	2003e7ec 	.word	0x2003e7ec
   bd854:	00000000 	.word	0x00000000

000bd858 <nan>:
   bd858:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd860 <nan+0x8>
   bd85c:	4770      	bx	lr
   bd85e:	bf00      	nop
   bd860:	00000000 	.word	0x00000000
   bd864:	7ff80000 	.word	0x7ff80000

000bd868 <__ascii_wctomb>:
   bd868:	b149      	cbz	r1, bd87e <__ascii_wctomb+0x16>
   bd86a:	2aff      	cmp	r2, #255	; 0xff
   bd86c:	bf85      	ittet	hi
   bd86e:	238a      	movhi	r3, #138	; 0x8a
   bd870:	6003      	strhi	r3, [r0, #0]
   bd872:	700a      	strbls	r2, [r1, #0]
   bd874:	f04f 30ff 	movhi.w	r0, #4294967295
   bd878:	bf98      	it	ls
   bd87a:	2001      	movls	r0, #1
   bd87c:	4770      	bx	lr
   bd87e:	4608      	mov	r0, r1
   bd880:	4770      	bx	lr

000bd882 <link_code_end>:
	...

000bd884 <link_const_data_start>:
   bd884:	00000000 	.word	0x00000000
   bd888:	34fb0000 	.word	0x34fb0000
   bd88c:	00805f9b 	.word	0x00805f9b
   bd890:	10008000 	.word	0x10008000
	...

000bd89c <dynalib_user>:
   bd89c:	000b4a55 000b4a91 000b4ab9 000b4abd     UJ...J...J...J..
   bd8ac:	00000000 75002222 78343025 6c756e00     ...."".u%04x.nul
   bd8bc:	7274006c 25006575 35312e31 6c250067     l.true.%1.15g.%l
   bd8cc:	31250067 6737312e bfbbef00 206e6900     g.%1.17g.....in 
   bd8dc:	20656874 6c6c6163 6b636162 69727000     the callback.pri
   bd8ec:	2f736563 0a732500 00212c00 74696157     ces/.%s..,!.Wait
   bd8fc:	20676e69 20726f66 63454c42 6e65696c     ing for BLEclien
   bd90c:	6f632074 63656e6e 6e6f6974 002e2e2e     t connection....
   bd91c:	5f776f6c 676e6172 6f685f65 255b7275     low_range_hour[%
   bd92c:	203a5d64 000a6425 68676948 20747365     d]: %d..Highest 
   bd93c:	63697270 666f2065 65687420 79616420     price of the day
   bd94c:	6625203a 6f4c000a 74736577 69727020     : %f..Lowest pri
   bd95c:	6f206563 68742066 61642065 25203a79     ce of the day: %
   bd96c:	48000a66 7372756f 20666f20 20656874     f..Hours of the 
   bd97c:	20796164 72656877 6c652065 72746365     day where electr
   bd98c:	74696369 73692079 74697720 206e6968     icity is within 
   bd99c:	65636361 64657470 6e617220 0a3a6567     accepted range:.
   bd9ac:	32302500 6f742064 32302520 7b000a64     .%02d to %02d..{
   bd9bc:	72685722 646f745f 3a227961 002c005b     "Whr_today":[.,.
   bd9cc:	57007d5d 69746972 7720676e 6f745f68     ]}.Writing wh_to
   bd9dc:	5f796164 6e6f734a 69616620 2e64656c     day_Json failed.
   bd9ec:	70227b00 65636972 73657973 64726574     .{"pricesyesterd
   bd9fc:	3a227961 2e25005b 00666c32 7270227b     ay":[.%.2lf.{"pr
   bda0c:	73656369 61646f74 5b3a2279 70227b00     icestoday":[.{"p
   bda1c:	65636972 6d6f7473 6f72726f 5b3a2277     ricestomorrow":[
   bda2c:	57227b00 795f7248 65747365 79616472     .{"WHr_yesterday
   bda3c:	005b3a22 4857227b 6f745f72 22796164     ":[.{"WHr_today"
   bda4c:	57005b3a 69746972 7720676e 20747461     :[.Writing watt 
   bda5c:	72756f68 61662073 64656c69 6146002e     hours failed..Fa
   bda6c:	64656c69 206f7420 6f6c6c61 65746163     iled to allocate
   bda7c:	6d656d20 2079726f 20726f66 74736f63      memory for cost
   bda8c:	7365795f 64726574 000a7961 6c696146     _yesterday..Fail
   bda9c:	74206465 6c61206f 61636f6c 6d206574     ed to allocate m
   bdaac:	726f6d65 6f662079 6f632072 745f7473     emory for cost_t
   bdabc:	7961646f 6146000a 64656c69 206f7420     oday..Failed to 
   bdacc:	6f6c6c61 65746163 6d656d20 2079726f     allocate memory 
   bdadc:	20726f66 74736f63 6d6f745f 6f72726f     for cost_tomorro
   bdaec:	4d000a77 726f6d65 6c612079 61636f6c     w..Memory alloca
   bdafc:	20646574 20726f66 63697270 203a7365     ted for prices: 
   bdb0c:	62206425 73657479 20666f20 62756f64     %d bytes of doub
   bdb1c:	0a73656c 69614600 2064656c 61206f74     les..Failed to a
   bdb2c:	636f6c6c 20657461 6f6d656d 66207972     llocate memory f
   bdb3c:	7720726f 6f745f68 0a796164 69614600     or wh_today..Fai
   bdb4c:	2064656c 61206f74 636f6c6c 20657461     led to allocate 
   bdb5c:	6f6d656d 66207972 7720726f 65795f68     memory for wh_ye
   bdb6c:	72657473 0a796164 6d654d00 2079726f     sterday..Memory 
   bdb7c:	6f6c6c61 65746163 6f662064 68772072     allocated for wh
   bdb8c:	6425203a 74796220 6f207365 6e692066     : %d bytes of in
   bdb9c:	000a7374 65746641 6c252072 49000a75     ts..After %lu..I
   bdbac:	6f77206e 000a6b72 61656843 73692870     n work..Cheap(is
   bdbbc:	68202968 7372756f 20666f20 20656874     h) hours of the 
   bdbcc:	3a796164 30250020 74206432 3025206f     day: .%02d to %0
   bdbdc:	202c6432 776f4c00 69727020 68206563     2d, .Low price h
   bdbec:	7372756f 74615700 6f6e2074 4b440077     ours.Watt now.DK
   bdbfc:	6559204b 72657473 00796164 204b4b44     K Yesterday.DKK 
   bdc0c:	61646f54 4b440079 6f54204b 72726f6d     Today.DKK Tomorr
   bdc1c:	5700776f 54207268 7961646f 72685700     ow.Whr Today.Whr
   bdc2c:	73655920 64726574 2f007961 61746164      Yesterday./data
   bdc3c:	2f746573 70736c45 7270746f 73656369     set/Elspotprices
   bdc4c:	6c69663f 3d726574 25423725 72503232     ?filter=%7B%22Pr
   bdc5c:	41656369 25616572 33253232 32322541     iceArea%22%3A%22
   bdc6c:	25324b44 37253232 74732644 3d747261     DK2%22%7D&start=
   bdc7c:	2d642500 64323025 3230252d 30540064     .%d-%02d-%02d.T0
   bdc8c:	41332530 6f263030 65736666 26303d74     0%3A00&offset=0&
   bdc9c:	696d696c 34323d74 6c6f6326 736e6d75     limit=24&columns
   bdcac:	6f70533d 69725074 4b446563 6f73264b     =SpotPriceDKK&so
   bdcbc:	483d7472 4472756f 3032254b 26435341     rt=HourDK%20ASC&
   bdccc:	656d6974 656e6f7a 006b643d 2e697061     timezone=dk.api.
   bdcdc:	72656e65 61646967 65736174 63697672     energidataservic
   bdcec:	6b642e65 54454700 63757300 73736563     e.dk.GET.success
   bdcfc:	73657220 736e6f70 6f632065 32206564      response code 2
   bdd0c:	75003030 6665646e 64656e69 64616200     00.undefined.bad
   bdd1c:	73657220 736e6f70 61500065 6e697372      response.Parsin
   bdd2c:	6e692067 20747570 6c696166 00216465     g input failed!.
   bdd3c:	6f636572 00736472 746f7053 63697250     records.SpotPric
   bdd4c:	4b4b4465 72617000 676e6973 69616620     eDKK.parsing fai
   bdd5c:	2064656c 72700032 73656369 72754300     led 2.prices.Cur
   bdd6c:	746e6572 3a484820 203a4d4d 64323025     rent HH:MM: %02d
   bdd7c:	3230253a 52000a64 3d495353 47006425     :%02d..RSSI=%d.G
   bdd8c:	69747465 7020676e 65636972 74616420     etting price dat
   bdd9c:	6f662061 65792072 72657473 0a796164     a for yesterday.
   bddac:	74654700 676e6974 69727020 64206563     .Getting price d
   bddbc:	20617461 20726f66 61646f74 54000a79     ata for today..T
   bddcc:	70206568 65636972 6f662073 6f742072     he prices for to
   bdddc:	72726f6d 7720766f 206c6c69 70206562     morrov will be p
   bddec:	656c6c75 74612064 3a642520 000a3030     ulled at %d:00..
   bddfc:	65636552 64657669 776f7020 672f7265     Received power/g
   bde0c:	000a7465 6177227b 3a227474 007d6425     et..{"watt":%d}.
   bde1c:	5f656c62 6e6e6f63 65746365 00000a64     ble_connected...

000bde2c <_ZTV5Timer>:
	...
   bde34:	000b5d49 000b5d8d 000b5a69 746e6f43     I]...]..iZ..Cont
   bde44:	2d746e65 676e654c 41006874 70656363     ent-Length.Accep
   bde54:	70610074 63696c70 6f697461 736a2f6e     t.application/js
   bde64:	62006e6f 30353234 2d353034 62346266     on.b4250405-fb4b
   bde74:	3437342d 32622d36 392d3062 65306633     -4746-b2b0-93f0e
   bde84:	32313136 00366332 35323462 34303430     61122c6.b4250404
   bde94:	3462662d 37342d62 622d3634 2d306232     -fb4b-4746-b2b0-
   bdea4:	30663339 31313665 36633232 32346200     93f0e61122c6.b42
   bdeb4:	30343035 62662d33 342d6234 2d363437     50403-fb4b-4746-
   bdec4:	30623262 6633392d 31366530 63323231     b2b0-93f0e61122c
   bded4:	34620036 34303532 662d3230 2d623462     6.b4250402-fb4b-
   bdee4:	36343734 6232622d 33392d30 36653066     4746-b2b0-93f0e6
   bdef4:	32323131 62003663 30353234 2d363034     1122c6.b4250406-
   bdf04:	62346266 3437342d 32622d36 392d3062     fb4b-4746-b2b0-9
   bdf14:	65306633 32313136 00366332 35323462     3f0e61122c6.b425
   bdf24:	31303430 3462662d 37342d62 622d3634     0401-fb4b-4746-b
   bdf34:	2d306232 30663339 31313665 36633232     2b0-93f0e61122c6
   bdf44:	31663300 39353161 65652d36 342d6637     .3f1a1596-ee7f-4
   bdf54:	2d646232 31643438 6131622d 66343932     2bd-84d1-b1a294f
   bdf64:	63653238 72410066 506e6f67 4820004d     82ecf.ArgonPM. H
   bdf74:	2f505454 0d302e31 6c63000a 0065736f     TTP/1.0...close.
   bdf84:	6e6e6f43 69746365 48006e6f 0054534f     Connection.HOST.
   bdf94:	54534f50 0d0a0d00 0000000a              POST........

000bdfa0 <_ZTV9JSONClass>:
	...
   bdfa8:	000b7225 000b7227 6c6f6f62 006e6165     %r..'r..boolean.
   bdfb8:	626d756e 73007265 6e697274 72610067     number.string.ar
   bdfc8:	00796172 656a626f 75007463 6f6e6b6e     ray.object.unkno
   bdfd8:	00006e77                                wn..

000bdfdc <_ZTV7JSONVar>:
	...
   bdfe4:	000b7291 000b7261 000b727d 73616c2f     .r..ar..}r../las
   bdff4:	69725774 742e6574 45007478 726f7272     tWrite.txt.Error
   be004:	696e6920 6c616974 6e697a69 616c2067      initializing la
   be014:	72577473 2e657469 20747874 656c6966     stWrite.txt file
   be024:	00642520 6f727245 72772072 6e697469      %d.Error writin
   be034:	6e692067 61697469 6164206c 74206174     g initial data t
   be044:	616c206f 72577473 2e657469 3a747874     o lastWrite.txt:
   be054:	00642520 7461772f 756f4874 646f5472      %d./wattHourTod
   be064:	742e7961 2f007478 74746177 72756f48     ay.txt./wattHour
   be074:	74736559 61647265 78742e79 72450074     Yesterday.txt.Er
   be084:	20726f72 6e65706f 20676e69 656c6966     ror opening file
   be094:	00642520 6f727245 706f2072 6e696e65      %d.Error openin
   be0a4:	616c2067 72577473 2e657469 3a747874     g lastWrite.txt:
   be0b4:	00642520 6f727245 65722072 6e696461      %d.Error readin
   be0c4:	69662067 203a656c 25006425 7245006a     g file: %d.%j.Er
   be0d4:	20726f72 74697277 20676e69 66206f74     ror writing to f
   be0e4:	3a656c69 00642520 6f727245 706f2072     ile: %d.Error op
   be0f4:	6e696e65 69662067 203a656c 45006425     ening file: %d.E
   be104:	726f7272 74656720 676e6974 61747320     rror getting sta
   be114:	203a7374 00006425                       ts: %d..

000be11c <_ZTVN5spark13EthernetClassE>:
	...
   be124:	000b810b 000b8101 000b80f7 000b80ed     ................
   be134:	000b80e1 000b80d5 000bb069 000bb071     ........i...q...
   be144:	000b80c9 000b80c1 000b80b7 000b80ad     ................
   be154:	000bb0a1 65737341 6f697472 6961466e     ....AssertionFai
   be164:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   be174:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   be184:	7265766f 20676e69 76726573 73656369     overing services
   be194:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   be1a4:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   be1b4:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   be1c4:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   be1d4:	00454e4f 72656550 76656420 20656369     ONE.Peer device 
   be1e4:	6d207369 69737369 0021676e 6c696146     is missing!.Fail
   be1f4:	74206465 7061206f 646e6570 65657020     ed to append pee
   be204:	65432072 6172746e 6564206c 65636976     r Central device
   be214:	6f43002e 63656e6e 00646574 63736944     ..Connected.Disc
   be224:	656e6e6f 64657463 70754400 6163696c     onnected.Duplica
   be234:	20646574 72616863 65746361 74736972     ted characterist
   be244:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   be254:	002e6465 6c696146 74206465 7061206f     ed..Failed to ap
   be264:	646e6570 636f6c20 63206c61 61726168     pend local chara
   be274:	72657463 69747369 00002e63              cteristic...

000be280 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be288:	000b8507 000b8569 000b8689 000b8593     ....i...........
   be298:	000b8509                                ....

000be29c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be2a4:	000b8503 000b8577 000b8505 000b8599     ....w...........
   be2b4:	000b8529                                )...

000be2b8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be2c0:	000b8501 000b8585 000b8e51 000b859f     ........Q.......
   be2d0:	000b8549                                I...

000be2d4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000be2dc <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   be2dc:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000be2ec <_ZN8particle7BleUuid9BASE_UUIDE>:
   be2ec:	5f9b34fb 80000080 00001000 00000000     .4._............
   be2fc:	00707061 2b25005a 3a643330 75323025     app.Z.%+03d:%02u
   be30c:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
   be31c:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

000be32c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be334:	000b9f99 000b9f9f 000b9fdd 000b9fad     ................
   be344:	000b9f9b                                ....

000be348 <_ZTV9IPAddress>:
	...
   be350:	000ba4d9 000ba4c9 000ba4cb              ............

000be35c <_ZTV9USBSerial>:
	...
   be364:	000ba5fb 000ba663 000ba639 000b9925     ....c...9...%...
   be374:	000ba62b 000ba5fd 000ba60d 000ba65d     +...........]...
   be384:	000ba61d 000ba5f5                       ........

000be38c <_ZTV11USARTSerial>:
	...
   be394:	000ba74d 000ba7b9 000ba791 000b9925     M...........%...
   be3a4:	000ba761 000ba77d 000ba76f 000ba78b     a...}...o.......
   be3b4:	000ba74f 000ba753                       O...S...

000be3bc <_ZTV7TwoWire>:
	...
   be3c4:	000ba819 000ba863 000ba83b 000ba81b     ....c...;.......
   be3d4:	000ba843 000ba84b 000ba853 000ba85b     C...K...S...[...
   be3e4:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   be3f4:	203d2072 00006425                       r = %d..

000be3fc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be404:	000ba919 000ba93d 000bae27 000ba94b     ....=...'...K...
   be414:	000ba91d                                ....

000be418 <_ZTV9TCPClient>:
	...
   be420:	000b9e29 000b9e41 000ba895 000ba8af     )...A...........
   be430:	000bacbd 000ba8d9 000bab33 000ba90d     ........3.......
   be440:	000babc5 000baa05 000bab61 000bad71     ........a...q...
   be450:	000bab01 000ba90f 000ba8c1 000ba951     ............Q...
   be460:	000ba9e5                                ....

000be464 <_ZTVN5spark9WiFiClassE>:
	...
   be46c:	000bae9f 000bae95 000bae8b 000bae33     ............3...
   be47c:	000bae7f 000bae73 000bb069 000bb071     ....s...i...q...
   be48c:	000bae67 000bae5f 000bae55 000bae4b     g..._...U...K...
   be49c:	000bb0a1                                ....

000be4a0 <_ZTV10WiFiSignal>:
	...
   be4a8:	000bae2d 000bae3d 000bae2f 000baea9     -...=.../.......
   be4b8:	000baedd 000baf09 000baf3d              ........=...

000be4c4 <_ZTVN5spark12NetworkClassE>:
	...
   be4cc:	000bb029 000bb033 000bb03d 000bb047     )...3...=...G...
   be4dc:	000bb051 000bb05d 000bb069 000bb071     Q...]...i...q...
   be4ec:	000bb079 000bb085 000bb08d 000bb097     y...............
   be4fc:	000bb0a1                                ....

000be500 <_ZSt7nothrow>:
	...

000be501 <_ZTSSt19_Sp_make_shared_tag>:
   be501:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   be511:	5f646572 00676174                        red_tag....

000be51c <_ZTISt19_Sp_make_shared_tag>:
   be51c:	000be55c 000be501                       \.......

000be524 <_ZTIN10__cxxabiv117__class_type_infoE>:
   be524:	000be5bc 000be530 000be5e0              ....0.......

000be530 <_ZTSN10__cxxabiv117__class_type_infoE>:
   be530:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   be540:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   be550:	00000045                                E...

000be554 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be554:	00000000 000be524 000bb379 000bb38d     ....$...y.......
   be564:	000bb521 000bb521 000bb3f7 000bb339     !...!.......9...
   be574:	000bb3df 000bb3a1 000bb36b              ........k...

000be580 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be580:	000be5bc 000be58c 000be524              ........$...

000be58c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be58c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   be59c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   be5ac:	456f666e 00000000                       nfoE....

000be5b4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be5b4:	00000000 000be580 000bb421 000bb435     ........!...5...
   be5c4:	000bb521 000bb521 000bb3f7 000bb339     !...!.......9...
   be5d4:	000bb4f5 000bb481 000bb449              ........I...

000be5e0 <_ZTISt9type_info>:
   be5e0:	000be55c 000be5e8                       \.......

000be5e8 <_ZTSSt9type_info>:
   be5e8:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   be5f8:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   be608:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000be615 <day_name.1>:
   be615:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   be625:	61536972                                 riSat

000be62a <mon_name.0>:
   be62a:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   be63a:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   be64a:	63654476                                vDec

000be64e <_ctype_>:
   be64e:	20202000 20202020 28282020 20282828     .         ((((( 
   be65e:	20202020 20202020 20202020 20202020                     
   be66e:	10108820 10101010 10101010 10101010      ...............
   be67e:	04040410 04040404 10040404 10101010     ................
   be68e:	41411010 41414141 01010101 01010101     ..AAAAAA........
   be69e:	01010101 01010101 01010101 10101010     ................
   be6ae:	42421010 42424242 02020202 02020202     ..BBBBBB........
   be6be:	02020202 02020202 02020202 10101010     ................
   be6ce:	00000020 00000000 00000000 00000000      ...............
	...
   be74e:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
   be75e:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
   be76e:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   be77e:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   be78e:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   be79e:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   be7ae:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   be7be:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   be7ce:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
   be7de:	632e646e 00666e00 74696e69               nd.c.nf.inity.

000be7ec <fpi.1>:
   be7ec:	00000035 fffffbce 000003cb 00000001     5...............
   be7fc:	00000000                                ....

000be800 <fpinan.0>:
   be800:	00000034 fffffbce 000003cb 00000001     4...............
	...

000be818 <tinytens>:
   be818:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   be828:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   be838:	64ac6f43 11680628 746e6d2f 726f772f     Co.d(.h./mnt/wor
   be848:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   be858:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   be868:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   be878:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   be888:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   be898:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   be8a8:	696c2f62 732f6362 6e697274 74732f67     b/libc/string/st
   be8b8:	6b6f7472 4200632e 6f6c6c61 75732063     rtok.c.Balloc su
   be8c8:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
   be8d8:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   be8e8:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   be8f8:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   be908:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   be918:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   be928:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   be938:	696c2f62 732f6362 696c6474 64672f62     b/libc/stdlib/gd
   be948:	2d616f74 68746567 632e7865 00000000     toa-gethex.c....

000be958 <_C_numeric_locale>:
   be958:	000bd91a 000bdf9d 2003d1e8 4f500043     ........... C.PO
   be968:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   be978:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   be988:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   be998:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   be9a8:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   be9b8:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   be9c8:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   be9d8:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   be9e8:	00000063 00000000                       c.......

000be9f0 <__mprec_bigtens>:
   be9f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bea00:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bea10:	7f73bf3c 75154fdd                       <.s..O.u

000bea18 <__mprec_tens>:
   bea18:	00000000 3ff00000 00000000 40240000     .......?......$@
   bea28:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bea38:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bea48:	00000000 412e8480 00000000 416312d0     .......A......cA
   bea58:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bea68:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bea78:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bea88:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bea98:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   beaa8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   beab8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   beac8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bead8:	79d99db4 44ea7843                       ...yCx.D

000beae0 <p05.0>:
   beae0:	00000005 00000019 0000007d              ........}...

000beaec <link_const_data_end>:
   beaec:	000b66f5 	.word	0x000b66f5
   beaf0:	000b7251 	.word	0x000b7251
   beaf4:	000b7481 	.word	0x000b7481
   beaf8:	000b7505 	.word	0x000b7505
   beafc:	000b8115 	.word	0x000b8115
   beb00:	000b8161 	.word	0x000b8161
   beb04:	000b9915 	.word	0x000b9915
   beb08:	000b9a6d 	.word	0x000b9a6d
   beb0c:	000b9e0d 	.word	0x000b9e0d
   beb10:	000b9e55 	.word	0x000b9e55
   beb14:	000bb015 	.word	0x000bb015
   beb18:	000bb179 	.word	0x000bb179
