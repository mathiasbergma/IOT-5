
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/4.0.0/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009890  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd8b0  000bd8b0  0000d8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd8d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000204  2003d128  000bd8d8  0001d128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000014c4  2003d330  2003d330  0002d330  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bdadc  000bdadc  0001dadc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bdb04  000bdb04  0001db04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001685c7  00000000  00000000  0001db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019c6a  00000000  00000000  001860cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000448da  00000000  00000000  0019fd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000036e0  00000000  00000000  001e4613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c000  00000000  00000000  001e7cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000426e5  00000000  00000000  001f3cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00053181  00000000  00000000  002363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d063  00000000  00000000  00289559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a4ec  00000000  00000000  003c65bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fb6c 	bl	ba70e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fb8e 	bl	ba75e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d128 	.word	0x2003d128
   b404c:	000bd8d8 	.word	0x000bd8d8
   b4050:	2003d32c 	.word	0x2003d32c
   b4054:	2003d330 	.word	0x2003d330
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fc35 	bl	b88d0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd87c 	.word	0x000bd87c
   b4080:	000bd8a4 	.word	0x000bd8a4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bbea 	b.w	b485c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fb27 	bl	b46dc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bbd5 	b.w	b8840 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 baa3 	b.w	b65e0 <malloc>

000b409a <_Znaj>:
   b409a:	f002 baa1 	b.w	b65e0 <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 baa7 	b.w	b65f0 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 baa5 	b.w	b65f0 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z14myPriceHandlerPKcS0_>:
void myPriceHandler(const char *event, const char *data)
{
#ifdef STATEDEBUG
    digitalWrite(state, LOW);
#endif
    state = GET_DATA;
   b40b8:	4b01      	ldr	r3, [pc, #4]	; (b40c0 <_Z14myPriceHandlerPKcS0_+0x8>)
   b40ba:	2201      	movs	r2, #1
   b40bc:	701a      	strb	r2, [r3, #0]
#ifdef STATEDEBUG
    digitalWrite(state, HIGH);
#endif
}
   b40be:	4770      	bx	lr
   b40c0:	2003d78c 	.word	0x2003d78c

000b40c4 <_Z8callbackPcPhj>:
void callback(char *topic, byte *payload, unsigned int length)
{
#ifdef STATEDEBUG
    digitalWrite(state, LOW);
#endif
    state = GET_DATA;
   b40c4:	4b01      	ldr	r3, [pc, #4]	; (b40cc <_Z8callbackPcPhj+0x8>)
   b40c6:	2201      	movs	r2, #1
   b40c8:	701a      	strb	r2, [r3, #0]
#ifdef STATEDEBUG
    digitalWrite(state, HIGH);
#endif
}
   b40ca:	4770      	bx	lr
   b40cc:	2003d78c 	.word	0x2003d78c

000b40d0 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context){
   b40d0:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40d2:	4b04      	ldr	r3, [pc, #16]	; (b40e4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40d4:	2201      	movs	r2, #1
   b40d6:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40d8:	f001 ffb4 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40dc:	4b02      	ldr	r3, [pc, #8]	; (b40e8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40de:	6018      	str	r0, [r3, #0]
}
   b40e0:	bd08      	pop	{r3, pc}
   b40e2:	bf00      	nop
   b40e4:	2003d348 	.word	0x2003d348
   b40e8:	2003d718 	.word	0x2003d718

000b40ec <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ec:	b40e      	push	{r1, r2, r3}
   b40ee:	b503      	push	{r0, r1, lr}
   b40f0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40f2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40f8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40fa:	f004 fa6c 	bl	b85d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40fe:	b002      	add	sp, #8
   b4100:	f85d eb04 	ldr.w	lr, [sp], #4
   b4104:	b003      	add	sp, #12
   b4106:	4770      	bx	lr

000b4108 <_Z9myHandlerPKcS0_>:
{
   b4108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b410c:	4605      	mov	r5, r0
   b410e:	b087      	sub	sp, #28
    int transmission_size = strlen(data);
   b4110:	4608      	mov	r0, r1
{
   b4112:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b4114:	f006 fb99 	bl	ba84a <strlen>
    strcpy(event_str, event);
   b4118:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b411a:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b411c:	a803      	add	r0, sp, #12
   b411e:	f006 fb6e 	bl	ba7fe <strcpy>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b4122:	493f      	ldr	r1, [pc, #252]	; (b4220 <_Z9myHandlerPKcS0_+0x118>)
   b4124:	4d3f      	ldr	r5, [pc, #252]	; (b4224 <_Z9myHandlerPKcS0_+0x11c>)
   b4126:	a803      	add	r0, sp, #12
   b4128:	f007 f9f8 	bl	bb51c <strtok>
   b412c:	f006 fac7 	bl	ba6be <atoi>
   b4130:	4621      	mov	r1, r4
   b4132:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b4136:	f006 fb49 	bl	ba7cc <strcat>
    if (transmission_size < 512)
   b413a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b413e:	d243      	bcs.n	b41c8 <_Z9myHandlerPKcS0_+0xc0>
        Serial.printf("%s\n", temp);
   b4140:	f004 ff8c 	bl	b905c <_Z16_fetch_usbserialv>
   b4144:	462a      	mov	r2, r5
   b4146:	4938      	ldr	r1, [pc, #224]	; (b4228 <_Z9myHandlerPKcS0_+0x120>)
   b4148:	4c38      	ldr	r4, [pc, #224]	; (b422c <_Z9myHandlerPKcS0_+0x124>)
   b414a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; b4240 <_Z9myHandlerPKcS0_+0x138>
                cost[i] = (atof(token) / 1000)+transport.medium;
   b414e:	4f38      	ldr	r7, [pc, #224]	; (b4230 <_Z9myHandlerPKcS0_+0x128>)
        Serial.printf("%s\n", temp);
   b4150:	f7ff ffcc 	bl	b40ec <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b4154:	4628      	mov	r0, r5
   b4156:	4937      	ldr	r1, [pc, #220]	; (b4234 <_Z9myHandlerPKcS0_+0x12c>)
   b4158:	f007 f9e0 	bl	bb51c <strtok>
                cost[i] = (atof(token) / 1000)+transport.high;
   b415c:	f20f 09a8 	addw	r9, pc, #168	; 0xa8
   b4160:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < range; i++)
   b4164:	2500      	movs	r5, #0
                cost[i] = (atof(token) / 1000)+transport.medium;
   b4166:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b4168:	f8df b0d8 	ldr.w	fp, [pc, #216]	; b4244 <_Z9myHandlerPKcS0_+0x13c>
   b416c:	f8db 3000 	ldr.w	r3, [fp]
   b4170:	42ab      	cmp	r3, r5
   b4172:	dd26      	ble.n	b41c2 <_Z9myHandlerPKcS0_+0xba>
            sscanf(token, "%*d-%*d-%*dT%d:%*d:%*d", &cost_hour[i]);
   b4174:	4652      	mov	r2, sl
   b4176:	4930      	ldr	r1, [pc, #192]	; (b4238 <_Z9myHandlerPKcS0_+0x130>)
   b4178:	f8cd a004 	str.w	sl, [sp, #4]
   b417c:	f002 fa50 	bl	b6620 <sscanf>
            token = strtok(NULL, ",!");
   b4180:	492c      	ldr	r1, [pc, #176]	; (b4234 <_Z9myHandlerPKcS0_+0x12c>)
   b4182:	2000      	movs	r0, #0
   b4184:	f007 f9ca 	bl	bb51c <strtok>
            if (cost_hour[i] >= 0 && cost_hour[i] < 7)
   b4188:	9b01      	ldr	r3, [sp, #4]
   b418a:	681b      	ldr	r3, [r3, #0]
   b418c:	2b06      	cmp	r3, #6
   b418e:	f10a 0a04 	add.w	sl, sl, #4
   b4192:	d81c      	bhi.n	b41ce <_Z9myHandlerPKcS0_+0xc6>
                 cost[i] = (atof(token) / 1000)+transport.low;
   b4194:	f006 fa90 	bl	ba6b8 <atof>
   b4198:	4632      	mov	r2, r6
   b419a:	463b      	mov	r3, r7
   b419c:	ec51 0b10 	vmov	r0, r1, d0
   b41a0:	f006 f8d6 	bl	ba350 <__aeabi_ddiv>
   b41a4:	a31a      	add	r3, pc, #104	; (adr r3, b4210 <_Z9myHandlerPKcS0_+0x108>)
   b41a6:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost[i] = (atof(token) / 1000)+transport.medium;
   b41aa:	f005 fdf1 	bl	b9d90 <__adddf3>
   b41ae:	e9c4 0100 	strd	r0, r1, [r4]
            if ((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b41b2:	4920      	ldr	r1, [pc, #128]	; (b4234 <_Z9myHandlerPKcS0_+0x12c>)
   b41b4:	2000      	movs	r0, #0
   b41b6:	f007 f9b1 	bl	bb51c <strtok>
   b41ba:	3408      	adds	r4, #8
   b41bc:	bb08      	cbnz	r0, b4202 <_Z9myHandlerPKcS0_+0xfa>
                range = i; // Update range, such that the rest of program flow is aware of size
   b41be:	f8cb 5000 	str.w	r5, [fp]
        state = CALCULATE;
   b41c2:	4b1e      	ldr	r3, [pc, #120]	; (b423c <_Z9myHandlerPKcS0_+0x134>)
   b41c4:	2202      	movs	r2, #2
   b41c6:	701a      	strb	r2, [r3, #0]
}
   b41c8:	b007      	add	sp, #28
   b41ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if (cost_hour[i] > 16 && cost_hour[i] < 22)
   b41ce:	3b11      	subs	r3, #17
   b41d0:	2b04      	cmp	r3, #4
   b41d2:	d80a      	bhi.n	b41ea <_Z9myHandlerPKcS0_+0xe2>
                cost[i] = (atof(token) / 1000)+transport.high;
   b41d4:	f006 fa70 	bl	ba6b8 <atof>
   b41d8:	4632      	mov	r2, r6
   b41da:	463b      	mov	r3, r7
   b41dc:	ec51 0b10 	vmov	r0, r1, d0
   b41e0:	f006 f8b6 	bl	ba350 <__aeabi_ddiv>
   b41e4:	4642      	mov	r2, r8
   b41e6:	464b      	mov	r3, r9
   b41e8:	e7df      	b.n	b41aa <_Z9myHandlerPKcS0_+0xa2>
                cost[i] = (atof(token) / 1000)+transport.medium;
   b41ea:	f006 fa65 	bl	ba6b8 <atof>
   b41ee:	4632      	mov	r2, r6
   b41f0:	463b      	mov	r3, r7
   b41f2:	ec51 0b10 	vmov	r0, r1, d0
   b41f6:	f006 f8ab 	bl	ba350 <__aeabi_ddiv>
   b41fa:	a307      	add	r3, pc, #28	; (adr r3, b4218 <_Z9myHandlerPKcS0_+0x110>)
   b41fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4200:	e7d3      	b.n	b41aa <_Z9myHandlerPKcS0_+0xa2>
        for (int i = 0; i < range; i++)
   b4202:	3501      	adds	r5, #1
   b4204:	e7b0      	b.n	b4168 <_Z9myHandlerPKcS0_+0x60>
   b4206:	bf00      	nop
   b4208:	2d0e5604 	.word	0x2d0e5604
   b420c:	3ffe9db2 	.word	0x3ffe9db2
   b4210:	ebedfa44 	.word	0xebedfa44
   b4214:	3fcb39c0 	.word	0x3fcb39c0
   b4218:	42c3c9ef 	.word	0x42c3c9ef
   b421c:	3fe469ad 	.word	0x3fe469ad
   b4220:	000bc8d0 	.word	0x000bc8d0
   b4224:	2003d78d 	.word	0x2003d78d
   b4228:	000bc8d8 	.word	0x000bc8d8
   b422c:	2003d4d8 	.word	0x2003d4d8
   b4230:	408f4000 	.word	0x408f4000
   b4234:	000bc8dc 	.word	0x000bc8dc
   b4238:	000bc8df 	.word	0x000bc8df
   b423c:	2003d78c 	.word	0x2003d78c
   b4240:	2003d658 	.word	0x2003d658
   b4244:	2003d144 	.word	0x2003d144

000b4248 <_Z13handle_sensorv>:
{
   b4248:	b570      	push	{r4, r5, r6, lr}
    if ((delta = current_reading - last_read) > 100)
   b424a:	4e0b      	ldr	r6, [pc, #44]	; (b4278 <_Z13handle_sensorv+0x30>)
   b424c:	f001 fefa 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
   b4250:	6835      	ldr	r5, [r6, #0]
   b4252:	1b45      	subs	r5, r0, r5
   b4254:	2d64      	cmp	r5, #100	; 0x64
   b4256:	4604      	mov	r4, r0
   b4258:	d90d      	bls.n	b4276 <_Z13handle_sensorv+0x2e>
        Serial.printf("In interrupt\n");
   b425a:	f004 feff 	bl	b905c <_Z16_fetch_usbserialv>
   b425e:	4907      	ldr	r1, [pc, #28]	; (b427c <_Z13handle_sensorv+0x34>)
   b4260:	f7ff ff44 	bl	b40ec <_ZN5Print6printfEPKcz>
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4264:	4b06      	ldr	r3, [pc, #24]	; (b4280 <_Z13handle_sensorv+0x38>)
   b4266:	fbb3 f5f5 	udiv	r5, r3, r5
   b426a:	4b06      	ldr	r3, [pc, #24]	; (b4284 <_Z13handle_sensorv+0x3c>)
        last_read = current_reading;
   b426c:	6034      	str	r4, [r6, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b426e:	601d      	str	r5, [r3, #0]
        state = TRANSMIT_SENSOR;
   b4270:	4b05      	ldr	r3, [pc, #20]	; (b4288 <_Z13handle_sensorv+0x40>)
   b4272:	2204      	movs	r2, #4
   b4274:	701a      	strb	r2, [r3, #0]
}
   b4276:	bd70      	pop	{r4, r5, r6, pc}
   b4278:	2003d3f4 	.word	0x2003d3f4
   b427c:	000bc8f6 	.word	0x000bc8f6
   b4280:	0036ee80 	.word	0x0036ee80
   b4284:	2003d45c 	.word	0x2003d45c
   b4288:	2003d78c 	.word	0x2003d78c
   b428c:	00000000 	.word	0x00000000

000b4290 <_Z8calc_lowPA2_iPdPii>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int * cost_hour, int size)
{
   b4290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4294:	ed2d 8b02 	vpush	{d8}
   b4298:	b09d      	sub	sp, #116	; 0x74
   b429a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value
   b429e:	4f50      	ldr	r7, [pc, #320]	; (b43e0 <_Z8calc_lowPA2_iPdPii+0x150>)
{
   b42a0:	4605      	mov	r5, r0
   b42a2:	468b      	mov	fp, r1
   b42a4:	468a      	mov	sl, r1

    for (int i = 0; i < size; i++)
   b42a6:	2400      	movs	r4, #0
    double last_small = 100; // Assign any absurdly high value
   b42a8:	2600      	movs	r6, #0
    double last_big = 0;
   b42aa:	f04f 0800 	mov.w	r8, #0
   b42ae:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < size; i++)
   b42b2:	9b02      	ldr	r3, [sp, #8]
   b42b4:	429c      	cmp	r4, r3
   b42b6:	da17      	bge.n	b42e8 <_Z8calc_lowPA2_iPdPii+0x58>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b42b8:	ecba 7b02 	vldmia	sl!, {d7}
   b42bc:	4642      	mov	r2, r8
   b42be:	ec51 0b17 	vmov	r0, r1, d7
   b42c2:	464b      	mov	r3, r9
   b42c4:	ed8d 7b00 	vstr	d7, [sp]
   b42c8:	f006 f9a8 	bl	ba61c <__aeabi_dcmpgt>
   b42cc:	b108      	cbz	r0, b42d2 <_Z8calc_lowPA2_iPdPii+0x42>
        {
            last_big = cost[i];
   b42ce:	e9dd 8900 	ldrd	r8, r9, [sp]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b42d2:	e9dd 0100 	ldrd	r0, r1, [sp]
   b42d6:	4632      	mov	r2, r6
   b42d8:	463b      	mov	r3, r7
   b42da:	f006 f981 	bl	ba5e0 <__aeabi_dcmplt>
   b42de:	b108      	cbz	r0, b42e4 <_Z8calc_lowPA2_iPdPii+0x54>
        {
            last_small = cost[i];
   b42e0:	e9dd 6700 	ldrd	r6, r7, [sp]
    for (int i = 0; i < size; i++)
   b42e4:	3401      	adds	r4, #1
   b42e6:	e7e4      	b.n	b42b2 <_Z8calc_lowPA2_iPdPii+0x22>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b42e8:	4632      	mov	r2, r6
   b42ea:	463b      	mov	r3, r7
   b42ec:	4640      	mov	r0, r8
   b42ee:	4649      	mov	r1, r9
   b42f0:	f005 fd4c 	bl	b9d8c <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b42f4:	a338      	add	r3, pc, #224	; (adr r3, b43d8 <_Z8calc_lowPA2_iPdPii+0x148>)
   b42f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42fa:	f005 feff 	bl	ba0fc <__aeabi_dmul>
   b42fe:	4632      	mov	r2, r6
   b4300:	463b      	mov	r3, r7
   b4302:	f005 fd45 	bl	b9d90 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= size; i++)
   b4306:	f04f 0a00 	mov.w	sl, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b430a:	ec41 0b18 	vmov	d8, r0, r1
    int idx = 0;
   b430e:	4654      	mov	r4, sl
    for (int i = 0; i <= size; i++)
   b4310:	9b02      	ldr	r3, [sp, #8]
   b4312:	459a      	cmp	sl, r3
   b4314:	dc12      	bgt.n	b433c <_Z8calc_lowPA2_iPdPii+0xac>
    {
        
        if (cost[i] < small_offset)
   b4316:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   b431a:	ec53 2b18 	vmov	r2, r3, d8
   b431e:	f006 f95f 	bl	ba5e0 <__aeabi_dcmplt>
   b4322:	b140      	cbz	r0, b4336 <_Z8calc_lowPA2_iPdPii+0xa6>
        {
            low_range_hour[idx] = cost_hour[i];
   b4324:	9a03      	ldr	r2, [sp, #12]
   b4326:	ab1c      	add	r3, sp, #112	; 0x70
   b4328:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b432c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
   b4330:	f843 2c60 	str.w	r2, [r3, #-96]
            
            idx++;
   b4334:	3401      	adds	r4, #1
    for (int i = 0; i <= size; i++)
   b4336:	f10a 0a01 	add.w	sl, sl, #1
   b433a:	e7e9      	b.n	b4310 <_Z8calc_lowPA2_iPdPii+0x80>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b433c:	f004 fe8e 	bl	b905c <_Z16_fetch_usbserialv>
   b4340:	4928      	ldr	r1, [pc, #160]	; (b43e4 <_Z8calc_lowPA2_iPdPii+0x154>)
   b4342:	4642      	mov	r2, r8
   b4344:	464b      	mov	r3, r9
   b4346:	f7ff fed1 	bl	b40ec <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b434a:	f004 fe87 	bl	b905c <_Z16_fetch_usbserialv>
   b434e:	4926      	ldr	r1, [pc, #152]	; (b43e8 <_Z8calc_lowPA2_iPdPii+0x158>)
   b4350:	4632      	mov	r2, r6
   b4352:	463b      	mov	r3, r7
   b4354:	f7ff feca 	bl	b40ec <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4358:	f004 fe80 	bl	b905c <_Z16_fetch_usbserialv>
   b435c:	4923      	ldr	r1, [pc, #140]	; (b43ec <_Z8calc_lowPA2_iPdPii+0x15c>)
   b435e:	f7ff fec5 	bl	b40ec <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b4362:	b36c      	cbz	r4, b43c0 <_Z8calc_lowPA2_iPdPii+0x130>
    int i = 0;
   b4364:	2300      	movs	r3, #0
    int cnt = 0;
   b4366:	461e      	mov	r6, r3
   b4368:	1d2f      	adds	r7, r5, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b436a:	aa1c      	add	r2, sp, #112	; 0x70
   b436c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4370:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b4374:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
   b4378:	aa04      	add	r2, sp, #16
   b437a:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b437e:	6802      	ldr	r2, [r0, #0]
   b4380:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b4384:	3901      	subs	r1, #1
   b4386:	428a      	cmp	r2, r1
   b4388:	f103 0301 	add.w	r3, r3, #1
   b438c:	d0f7      	beq.n	b437e <_Z8calc_lowPA2_iPdPii+0xee>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b438e:	3201      	adds	r2, #1
        while (i <= idx)
   b4390:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b4392:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
            
            cnt++;
   b4396:	f106 0201 	add.w	r2, r6, #1
        while (i <= idx)
   b439a:	dd0f      	ble.n	b43bc <_Z8calc_lowPA2_iPdPii+0x12c>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b439c:	f8df 8054 	ldr.w	r8, [pc, #84]	; b43f4 <_Z8calc_lowPA2_iPdPii+0x164>
    for (int z = 0; z < cnt; z++)
   b43a0:	2400      	movs	r4, #0
   b43a2:	42b4      	cmp	r4, r6
   b43a4:	d00c      	beq.n	b43c0 <_Z8calc_lowPA2_iPdPii+0x130>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b43a6:	f004 fe59 	bl	b905c <_Z16_fetch_usbserialv>
   b43aa:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b43ae:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b43b2:	4641      	mov	r1, r8
   b43b4:	f7ff fe9a 	bl	b40ec <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b43b8:	3401      	adds	r4, #1
   b43ba:	e7f2      	b.n	b43a2 <_Z8calc_lowPA2_iPdPii+0x112>
            cnt++;
   b43bc:	4616      	mov	r6, r2
   b43be:	e7d4      	b.n	b436a <_Z8calc_lowPA2_iPdPii+0xda>

    // Calculations are done - set state
    #ifdef STATEDEBUG
            digitalWrite(state, LOW);
    #endif
    state = TRANSMIT_PRICE;
   b43c0:	4b0b      	ldr	r3, [pc, #44]	; (b43f0 <_Z8calc_lowPA2_iPdPii+0x160>)
   b43c2:	2203      	movs	r2, #3
    #ifdef STATEDEBUG
            digitalWrite(state, HIGH);
    #endif

    return cnt;
}
   b43c4:	4620      	mov	r0, r4
    state = TRANSMIT_PRICE;
   b43c6:	701a      	strb	r2, [r3, #0]
}
   b43c8:	b01d      	add	sp, #116	; 0x74
   b43ca:	ecbd 8b02 	vpop	{d8}
   b43ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b43d2:	bf00      	nop
   b43d4:	f3af 8000 	nop.w
   b43d8:	33333333 	.word	0x33333333
   b43dc:	3fd33333 	.word	0x3fd33333
   b43e0:	40590000 	.word	0x40590000
   b43e4:	000bc904 	.word	0x000bc904
   b43e8:	000bc922 	.word	0x000bc922
   b43ec:	000bc93f 	.word	0x000bc93f
   b43f0:	2003d78c 	.word	0x2003d78c
   b43f4:	000bc97d 	.word	0x000bc97d

000b43f8 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b43f8:	b570      	push	{r4, r5, r6, lr}
   b43fa:	b090      	sub	sp, #64	; 0x40
    //BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
    BLE.on();
   b43fc:	f003 f9f8 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4400:	f003 fa40 	bl	b7884 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4404:	f003 f9f4 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4408:	4a3d      	ldr	r2, [pc, #244]	; (b4500 <_Z9ble_setupv+0x108>)
   b440a:	4c3e      	ldr	r4, [pc, #248]	; (b4504 <_Z9ble_setupv+0x10c>)
   b440c:	4601      	mov	r1, r0
   b440e:	a80b      	add	r0, sp, #44	; 0x2c
   b4410:	f003 ff72 	bl	b82f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4414:	a80b      	add	r0, sp, #44	; 0x2c
   b4416:	f003 faec 	bl	b79f2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b441a:	f003 f9e9 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b441e:	4a3a      	ldr	r2, [pc, #232]	; (b4508 <_Z9ble_setupv+0x110>)
   b4420:	4601      	mov	r1, r0
   b4422:	a80b      	add	r0, sp, #44	; 0x2c
   b4424:	f003 ff68 	bl	b82f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4428:	a80b      	add	r0, sp, #44	; 0x2c
   b442a:	f003 fae2 	bl	b79f2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b442e:	f003 f9df 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4432:	4a36      	ldr	r2, [pc, #216]	; (b450c <_Z9ble_setupv+0x114>)
   b4434:	4601      	mov	r1, r0
   b4436:	a80b      	add	r0, sp, #44	; 0x2c
   b4438:	f003 ff5e 	bl	b82f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b443c:	a80b      	add	r0, sp, #44	; 0x2c
   b443e:	f003 fad8 	bl	b79f2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4442:	f003 f9d5 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4446:	4a32      	ldr	r2, [pc, #200]	; (b4510 <_Z9ble_setupv+0x118>)
   b4448:	4601      	mov	r1, r0
   b444a:	a80b      	add	r0, sp, #44	; 0x2c
   b444c:	f003 ff54 	bl	b82f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4450:	a80b      	add	r0, sp, #44	; 0x2c
   b4452:	f003 face 	bl	b79f2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b4456:	f003 f9cb 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b445a:	4a2e      	ldr	r2, [pc, #184]	; (b4514 <_Z9ble_setupv+0x11c>)
   b445c:	4601      	mov	r1, r0
   b445e:	a80b      	add	r0, sp, #44	; 0x2c
   b4460:	f003 ff4a 	bl	b82f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4464:	a80b      	add	r0, sp, #44	; 0x2c
   b4466:	f003 fac4 	bl	b79f2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b446a:	f003 f9c1 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b446e:	4a2a      	ldr	r2, [pc, #168]	; (b4518 <_Z9ble_setupv+0x120>)
   b4470:	4601      	mov	r1, r0
   b4472:	a80b      	add	r0, sp, #44	; 0x2c
   b4474:	f003 ff40 	bl	b82f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4478:	a80b      	add	r0, sp, #44	; 0x2c
   b447a:	f003 faba 	bl	b79f2 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b447e:	a803      	add	r0, sp, #12
   b4480:	f003 fbed 	bl	b7c5e <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b4484:	4b25      	ldr	r3, [pc, #148]	; (b451c <_Z9ble_setupv+0x124>)
   b4486:	a803      	add	r0, sp, #12
   b4488:	6819      	ldr	r1, [r3, #0]
   b448a:	f003 fbfb 	bl	b7c84 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b448e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4490:	ad06      	add	r5, sp, #24
   b4492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4494:	ad06      	add	r5, sp, #24
   b4496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4498:	6826      	ldr	r6, [r4, #0]
   b449a:	ac0b      	add	r4, sp, #44	; 0x2c
   b449c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b449e:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b44a0:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44a2:	f002 ffa7 	bl	b73f4 <_ZNK8particle7BleUuid4typeEv>
   b44a6:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b44a8:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44aa:	bb0c      	cbnz	r4, b44f0 <_Z9ble_setupv+0xf8>
            uint16_t uuid16 = tempUUID.shorted();
   b44ac:	f002 ffbe 	bl	b742c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b44b0:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b44b2:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b44b6:	2302      	movs	r3, #2
   b44b8:	f10d 020a 	add.w	r2, sp, #10
   b44bc:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b44be:	a803      	add	r0, sp, #12
   b44c0:	f003 fbc2 	bl	b7c48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b44c4:	f003 f994 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44c8:	2200      	movs	r2, #0
   b44ca:	a903      	add	r1, sp, #12
   b44cc:	f003 fa24 	bl	b7918 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b44d0:	f004 fdc4 	bl	b905c <_Z16_fetch_usbserialv>
   b44d4:	4912      	ldr	r1, [pc, #72]	; (b4520 <_Z9ble_setupv+0x128>)
   b44d6:	f004 f856 	bl	b8586 <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b44da:	f003 f989 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44de:	4911      	ldr	r1, [pc, #68]	; (b4524 <_Z9ble_setupv+0x12c>)
   b44e0:	2200      	movs	r2, #0
   b44e2:	f003 fe0b 	bl	b80fc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b44e6:	9803      	ldr	r0, [sp, #12]
   b44e8:	f002 f882 	bl	b65f0 <free>

}
   b44ec:	b010      	add	sp, #64	; 0x40
   b44ee:	bd70      	pop	{r4, r5, r6, pc}
   b44f0:	f002 ff9e 	bl	b7430 <_ZNK8particle7BleUuid8rawBytesEv>
   b44f4:	2300      	movs	r3, #0
   b44f6:	9300      	str	r3, [sp, #0]
   b44f8:	4602      	mov	r2, r0
   b44fa:	2310      	movs	r3, #16
   b44fc:	2107      	movs	r1, #7
   b44fe:	e7de      	b.n	b44be <_Z9ble_setupv+0xc6>
   b4500:	2003d34c 	.word	0x2003d34c
   b4504:	2003d378 	.word	0x2003d378
   b4508:	2003d340 	.word	0x2003d340
   b450c:	2003d330 	.word	0x2003d330
   b4510:	2003d338 	.word	0x2003d338
   b4514:	2003d354 	.word	0x2003d354
   b4518:	2003d35c 	.word	0x2003d35c
   b451c:	2003d13c 	.word	0x2003d13c
   b4520:	000bc98b 	.word	0x000bc98b
   b4524:	000b40d1 	.word	0x000b40d1

000b4528 <_Z9init_GPIOv>:
{
   b4528:	b508      	push	{r3, lr}
    pinMode(SENSOR_READ, OUTPUT);
   b452a:	2101      	movs	r1, #1
   b452c:	2000      	movs	r0, #0
   b452e:	f005 fa85 	bl	b9a3c <pinMode>
    pinMode(GET_DATA, OUTPUT);
   b4532:	2101      	movs	r1, #1
   b4534:	4608      	mov	r0, r1
   b4536:	f005 fa81 	bl	b9a3c <pinMode>
    pinMode(CALCULATE, OUTPUT);
   b453a:	2101      	movs	r1, #1
   b453c:	2002      	movs	r0, #2
   b453e:	f005 fa7d 	bl	b9a3c <pinMode>
    pinMode(TRANSMIT_PRICE, OUTPUT);
   b4542:	2101      	movs	r1, #1
   b4544:	2003      	movs	r0, #3
   b4546:	f005 fa79 	bl	b9a3c <pinMode>
    pinMode(TRANSMIT_SENSOR, OUTPUT);
   b454a:	2101      	movs	r1, #1
   b454c:	2004      	movs	r0, #4
   b454e:	f005 fa75 	bl	b9a3c <pinMode>
    pinMode(SLEEP_STATE, OUTPUT);
   b4552:	2101      	movs	r1, #1
   b4554:	2005      	movs	r0, #5
   b4556:	f005 fa71 	bl	b9a3c <pinMode>
    pinMode(AWAITING_DATA, OUTPUT);
   b455a:	2101      	movs	r1, #1
   b455c:	2006      	movs	r0, #6
   b455e:	f005 fa6d 	bl	b9a3c <pinMode>
}
   b4562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pinMode(STARTUP, OUTPUT);
   b4566:	2101      	movs	r1, #1
   b4568:	200a      	movs	r0, #10
   b456a:	f005 ba67 	b.w	b9a3c <pinMode>
	...

000b4570 <_Z10check_timev>:
#ifdef STATEDEBUG
    digitalWrite(state, HIGH);
#endif
}
void check_time(void)
{
   b4570:	b508      	push	{r3, lr}
    int currentHour = Time.hour();
   b4572:	f004 f8e5 	bl	b8740 <_ZN9TimeClass4hourEv>
    if ((currentHour == PULL_TIME_1 || currentHour == PULL_TIME_2) && currentHour != oneShotGuard)
   b4576:	2817      	cmp	r0, #23
   b4578:	d001      	beq.n	b457e <_Z10check_timev+0xe>
   b457a:	280b      	cmp	r0, #11
   b457c:	d107      	bne.n	b458e <_Z10check_timev+0x1e>
   b457e:	4b04      	ldr	r3, [pc, #16]	; (b4590 <_Z10check_timev+0x20>)
   b4580:	681a      	ldr	r2, [r3, #0]
   b4582:	4282      	cmp	r2, r0
    {
        oneShotGuard = currentHour;
   b4584:	bf1f      	itttt	ne
   b4586:	6018      	strne	r0, [r3, #0]
#ifdef STATEDEBUG
        digitalWrite(state, LOW);
#endif
        state = GET_DATA;
   b4588:	4b02      	ldrne	r3, [pc, #8]	; (b4594 <_Z10check_timev+0x24>)
   b458a:	2201      	movne	r2, #1
   b458c:	701a      	strbne	r2, [r3, #0]
#ifdef STATEDEBUG
        digitalWrite(state, HIGH);
#endif
    }
   b458e:	bd08      	pop	{r3, pc}
   b4590:	2003d140 	.word	0x2003d140
   b4594:	2003d78c 	.word	0x2003d78c

000b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4598:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b459a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b459c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b459e:	b17c      	cbz	r4, b45c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b45a0:	6863      	ldr	r3, [r4, #4]
   b45a2:	3b01      	subs	r3, #1
   b45a4:	6063      	str	r3, [r4, #4]
   b45a6:	b95b      	cbnz	r3, b45c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b45a8:	6823      	ldr	r3, [r4, #0]
   b45aa:	4620      	mov	r0, r4
   b45ac:	689b      	ldr	r3, [r3, #8]
   b45ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b45b0:	68a3      	ldr	r3, [r4, #8]
   b45b2:	3b01      	subs	r3, #1
   b45b4:	60a3      	str	r3, [r4, #8]
   b45b6:	b91b      	cbnz	r3, b45c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b45b8:	6823      	ldr	r3, [r4, #0]
   b45ba:	4620      	mov	r0, r4
   b45bc:	68db      	ldr	r3, [r3, #12]
   b45be:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b45c0:	4628      	mov	r0, r5
   b45c2:	bd38      	pop	{r3, r4, r5, pc}

000b45c4 <_Z8get_datai>:
{
   b45c4:	b510      	push	{r4, lr}
    range = MAX_RANGE;
   b45c6:	4b16      	ldr	r3, [pc, #88]	; (b4620 <_Z8get_datai+0x5c>)
   b45c8:	2230      	movs	r2, #48	; 0x30
   b45ca:	601a      	str	r2, [r3, #0]
    temp[0] = 0;
   b45cc:	4b15      	ldr	r3, [pc, #84]	; (b4624 <_Z8get_datai+0x60>)
   b45ce:	2200      	movs	r2, #0
{
   b45d0:	b08c      	sub	sp, #48	; 0x30
    temp[0] = 0;
   b45d2:	701a      	strb	r2, [r3, #0]
{
   b45d4:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
   b45d6:	f004 f8df 	bl	b8798 <_ZN9TimeClass4yearEv>
   b45da:	9005      	str	r0, [sp, #20]
   b45dc:	f004 f8d4 	bl	b8788 <_ZN9TimeClass5monthEv>
   b45e0:	9004      	str	r0, [sp, #16]
   b45e2:	f004 f8ad 	bl	b8740 <_ZN9TimeClass4hourEv>
   b45e6:	1ca1      	adds	r1, r4, #2
   b45e8:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b45ec:	e9cd 4100 	strd	r4, r1, [sp]
   b45f0:	9002      	str	r0, [sp, #8]
   b45f2:	490d      	ldr	r1, [pc, #52]	; (b4628 <_Z8get_datai+0x64>)
   b45f4:	a808      	add	r0, sp, #32
   b45f6:	f002 fd45 	bl	b7084 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b45fa:	4b0c      	ldr	r3, [pc, #48]	; (b462c <_Z8get_datai+0x68>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b45fc:	9a08      	ldr	r2, [sp, #32]
   b45fe:	781b      	ldrb	r3, [r3, #0]
   b4600:	490b      	ldr	r1, [pc, #44]	; (b4630 <_Z8get_datai+0x6c>)
   b4602:	f88d 3000 	strb.w	r3, [sp]
   b4606:	a806      	add	r0, sp, #24
   b4608:	233c      	movs	r3, #60	; 0x3c
   b460a:	f004 fabf 	bl	b8b8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b460e:	a807      	add	r0, sp, #28
   b4610:	f7ff ffc2 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4614:	a808      	add	r0, sp, #32
   b4616:	f002 fc53 	bl	b6ec0 <_ZN6StringD1Ev>
}
   b461a:	b00c      	add	sp, #48	; 0x30
   b461c:	bd10      	pop	{r4, pc}
   b461e:	bf00      	nop
   b4620:	2003d144 	.word	0x2003d144
   b4624:	2003d78d 	.word	0x2003d78d
   b4628:	000bc9ea 	.word	0x000bc9ea
   b462c:	2003d3f1 	.word	0x2003d3f1
   b4630:	000bca3d 	.word	0x000bca3d

000b4634 <_Z15transmit_pricesPA2_ii>:
{
   b4634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4638:	b08a      	sub	sp, #40	; 0x28
   b463a:	4605      	mov	r5, r0
   b463c:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b463e:	f004 fd0d 	bl	b905c <_Z16_fetch_usbserialv>
   b4642:	491e      	ldr	r1, [pc, #120]	; (b46bc <_Z15transmit_pricesPA2_ii+0x88>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4644:	4f1e      	ldr	r7, [pc, #120]	; (b46c0 <_Z15transmit_pricesPA2_ii+0x8c>)
    Serial.printf("In work\n");
   b4646:	f7ff fd51 	bl	b40ec <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b464a:	491e      	ldr	r1, [pc, #120]	; (b46c4 <_Z15transmit_pricesPA2_ii+0x90>)
   b464c:	a802      	add	r0, sp, #8
   b464e:	f002 fc82 	bl	b6f56 <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4652:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4654:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b4658:	42b4      	cmp	r4, r6
   b465a:	da10      	bge.n	b467e <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b465c:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4660:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4664:	4639      	mov	r1, r7
   b4666:	a806      	add	r0, sp, #24
   b4668:	f002 fd0c 	bl	b7084 <_ZN6String6formatEPKcz>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b466c:	a906      	add	r1, sp, #24
   b466e:	a802      	add	r0, sp, #8
   b4670:	f002 fcc1 	bl	b6ff6 <_ZN6String6concatERKS_>
   b4674:	a806      	add	r0, sp, #24
   b4676:	f002 fc23 	bl	b6ec0 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b467a:	3401      	adds	r4, #1
   b467c:	e7ec      	b.n	b4658 <_Z15transmit_pricesPA2_ii+0x24>
   b467e:	4b12      	ldr	r3, [pc, #72]	; (b46c8 <_Z15transmit_pricesPA2_ii+0x94>)
   b4680:	9a02      	ldr	r2, [sp, #8]
   b4682:	781b      	ldrb	r3, [r3, #0]
   b4684:	4911      	ldr	r1, [pc, #68]	; (b46cc <_Z15transmit_pricesPA2_ii+0x98>)
   b4686:	f88d 3000 	strb.w	r3, [sp]
   b468a:	a806      	add	r0, sp, #24
   b468c:	233c      	movs	r3, #60	; 0x3c
   b468e:	f004 fa7d 	bl	b8b8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4692:	a807      	add	r0, sp, #28
   b4694:	f7ff ff80 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    client.publish("prices", data);
   b4698:	9a02      	ldr	r2, [sp, #8]
   b469a:	490d      	ldr	r1, [pc, #52]	; (b46d0 <_Z15transmit_pricesPA2_ii+0x9c>)
   b469c:	480d      	ldr	r0, [pc, #52]	; (b46d4 <_Z15transmit_pricesPA2_ii+0xa0>)
   b469e:	f000 fdb4 	bl	b520a <_ZN4MQTT7publishEPKcS1_>
    client.loop();
   b46a2:	480c      	ldr	r0, [pc, #48]	; (b46d4 <_Z15transmit_pricesPA2_ii+0xa0>)
   b46a4:	f000 fe0d 	bl	b52c2 <_ZN4MQTT4loopEv>
    state = SLEEP_STATE;
   b46a8:	4b0b      	ldr	r3, [pc, #44]	; (b46d8 <_Z15transmit_pricesPA2_ii+0xa4>)
   b46aa:	2205      	movs	r2, #5
    String data = "Cheap(ish) hours of the day: ";
   b46ac:	a802      	add	r0, sp, #8
    state = SLEEP_STATE;
   b46ae:	701a      	strb	r2, [r3, #0]
    String data = "Cheap(ish) hours of the day: ";
   b46b0:	f002 fc06 	bl	b6ec0 <_ZN6StringD1Ev>
}
   b46b4:	b00a      	add	sp, #40	; 0x28
   b46b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b46ba:	bf00      	nop
   b46bc:	000bca46 	.word	0x000bca46
   b46c0:	000bca6d 	.word	0x000bca6d
   b46c4:	000bca4f 	.word	0x000bca4f
   b46c8:	2003d3f1 	.word	0x2003d3f1
   b46cc:	000bca7c 	.word	0x000bca7c
   b46d0:	000bccd4 	.word	0x000bccd4
   b46d4:	2003d460 	.word	0x2003d460
   b46d8:	2003d78c 	.word	0x2003d78c

000b46dc <loop>:
{
   b46dc:	b570      	push	{r4, r5, r6, lr}
    if (state == GET_DATA)
   b46de:	4c44      	ldr	r4, [pc, #272]	; (b47f0 <loop+0x114>)
{
   b46e0:	b0c4      	sub	sp, #272	; 0x110
    check_time();
   b46e2:	f7ff ff45 	bl	b4570 <_Z10check_timev>
    if (state == GET_DATA)
   b46e6:	7823      	ldrb	r3, [r4, #0]
   b46e8:	2b01      	cmp	r3, #1
   b46ea:	d105      	bne.n	b46f8 <loop+0x1c>
        state = AWAITING_DATA;
   b46ec:	2306      	movs	r3, #6
   b46ee:	7023      	strb	r3, [r4, #0]
        get_data(Time.day());
   b46f0:	f004 f83e 	bl	b8770 <_ZN9TimeClass3dayEv>
   b46f4:	f7ff ff66 	bl	b45c4 <_Z8get_datai>
    if (state == CALCULATE)
   b46f8:	7823      	ldrb	r3, [r4, #0]
   b46fa:	2b02      	cmp	r3, #2
   b46fc:	d116      	bne.n	b472c <loop+0x50>
        cnt = calc_low(start_stop, cost, cost_hour, range);
   b46fe:	4b3d      	ldr	r3, [pc, #244]	; (b47f4 <loop+0x118>)
   b4700:	4a3d      	ldr	r2, [pc, #244]	; (b47f8 <loop+0x11c>)
   b4702:	493e      	ldr	r1, [pc, #248]	; (b47fc <loop+0x120>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	483e      	ldr	r0, [pc, #248]	; (b4800 <loop+0x124>)
   b4708:	f7ff fdc2 	bl	b4290 <_Z8calc_lowPA2_iPdPii>
   b470c:	4b3d      	ldr	r3, [pc, #244]	; (b4804 <loop+0x128>)
   b470e:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b4710:	f004 fca4 	bl	b905c <_Z16_fetch_usbserialv>
   b4714:	4605      	mov	r5, r0
   b4716:	f004 f813 	bl	b8740 <_ZN9TimeClass4hourEv>
   b471a:	4606      	mov	r6, r0
   b471c:	f004 f81c 	bl	b8758 <_ZN9TimeClass6minuteEv>
   b4720:	4939      	ldr	r1, [pc, #228]	; (b4808 <loop+0x12c>)
   b4722:	4603      	mov	r3, r0
   b4724:	1cb2      	adds	r2, r6, #2
   b4726:	4628      	mov	r0, r5
   b4728:	f7ff fce0 	bl	b40ec <_ZN5Print6printfEPKcz>
    if (state == TRANSMIT_PRICE)
   b472c:	7823      	ldrb	r3, [r4, #0]
   b472e:	2b03      	cmp	r3, #3
   b4730:	d104      	bne.n	b473c <loop+0x60>
        transmit_prices(start_stop, cnt);
   b4732:	4b34      	ldr	r3, [pc, #208]	; (b4804 <loop+0x128>)
   b4734:	4832      	ldr	r0, [pc, #200]	; (b4800 <loop+0x124>)
   b4736:	6819      	ldr	r1, [r3, #0]
   b4738:	f7ff ff7c 	bl	b4634 <_Z15transmit_pricesPA2_ii>
    if (state == TRANSMIT_SENSOR) // Did we receive a request for updated values
   b473c:	7823      	ldrb	r3, [r4, #0]
   b473e:	2b04      	cmp	r3, #4
   b4740:	d11c      	bne.n	b477c <loop+0xa0>
        sprintf(values, "%d", calc_power);
   b4742:	4d32      	ldr	r5, [pc, #200]	; (b480c <loop+0x130>)
        Serial.printf("Received power/get\n");
   b4744:	f004 fc8a 	bl	b905c <_Z16_fetch_usbserialv>
   b4748:	4931      	ldr	r1, [pc, #196]	; (b4810 <loop+0x134>)
   b474a:	f7ff fccf 	bl	b40ec <_ZN5Print6printfEPKcz>
        sprintf(values, "%d", calc_power);
   b474e:	682a      	ldr	r2, [r5, #0]
   b4750:	4930      	ldr	r1, [pc, #192]	; (b4814 <loop+0x138>)
   b4752:	4668      	mov	r0, sp
   b4754:	f001 ff5c 	bl	b6610 <sprintf>
        client.publish("power", values);
   b4758:	492f      	ldr	r1, [pc, #188]	; (b4818 <loop+0x13c>)
   b475a:	4830      	ldr	r0, [pc, #192]	; (b481c <loop+0x140>)
   b475c:	466a      	mov	r2, sp
   b475e:	f000 fd54 	bl	b520a <_ZN4MQTT7publishEPKcS1_>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4762:	682a      	ldr	r2, [r5, #0]
   b4764:	492e      	ldr	r1, [pc, #184]	; (b4820 <loop+0x144>)
   b4766:	a804      	add	r0, sp, #16
   b4768:	f001 ff52 	bl	b6610 <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b476c:	2300      	movs	r3, #0
   b476e:	482d      	ldr	r0, [pc, #180]	; (b4824 <loop+0x148>)
   b4770:	22ff      	movs	r2, #255	; 0xff
   b4772:	a904      	add	r1, sp, #16
   b4774:	f002 ff1a 	bl	b75ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        state = SLEEP_STATE;
   b4778:	2305      	movs	r3, #5
   b477a:	7023      	strb	r3, [r4, #0]
    if(NewBLEConnection & ((millis()-last_connect)>1400)){
   b477c:	4c2a      	ldr	r4, [pc, #168]	; (b4828 <loop+0x14c>)
   b477e:	7825      	ldrb	r5, [r4, #0]
   b4780:	f001 fc60 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
   b4784:	4b29      	ldr	r3, [pc, #164]	; (b482c <loop+0x150>)
   b4786:	681b      	ldr	r3, [r3, #0]
   b4788:	1ac0      	subs	r0, r0, r3
   b478a:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   b478e:	d92c      	bls.n	b47ea <loop+0x10e>
   b4790:	b35d      	cbz	r5, b47ea <loop+0x10e>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4792:	4b1e      	ldr	r3, [pc, #120]	; (b480c <loop+0x130>)
   b4794:	4922      	ldr	r1, [pc, #136]	; (b4820 <loop+0x144>)
   b4796:	681a      	ldr	r2, [r3, #0]
   b4798:	a804      	add	r0, sp, #16
   b479a:	f001 ff39 	bl	b6610 <sprintf>
   b479e:	2300      	movs	r3, #0
   b47a0:	22ff      	movs	r2, #255	; 0xff
   b47a2:	a904      	add	r1, sp, #16
   b47a4:	481f      	ldr	r0, [pc, #124]	; (b4824 <loop+0x148>)
   b47a6:	f002 ff01 	bl	b75ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue("{\"pricesyesterday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,24]}");
   b47aa:	4921      	ldr	r1, [pc, #132]	; (b4830 <loop+0x154>)
   b47ac:	4821      	ldr	r0, [pc, #132]	; (b4834 <loop+0x158>)
   b47ae:	2200      	movs	r2, #0
   b47b0:	f002 ff5c 	bl	b766c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue("{\"pricestoday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,24]}");  // string mKr/kwhr
   b47b4:	4920      	ldr	r1, [pc, #128]	; (b4838 <loop+0x15c>)
   b47b6:	4821      	ldr	r0, [pc, #132]	; (b483c <loop+0x160>)
   b47b8:	2200      	movs	r2, #0
   b47ba:	f002 ff57 	bl	b766c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue("{\"pricestomorrow\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}"); // string mKr/kwhr
   b47be:	4920      	ldr	r1, [pc, #128]	; (b4840 <loop+0x164>)
   b47c0:	4820      	ldr	r0, [pc, #128]	; (b4844 <loop+0x168>)
   b47c2:	2200      	movs	r2, #0
   b47c4:	f002 ff52 	bl	b766c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue("{\"WHr_yesterday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b47c8:	491f      	ldr	r1, [pc, #124]	; (b4848 <loop+0x16c>)
   b47ca:	4820      	ldr	r0, [pc, #128]	; (b484c <loop+0x170>)
   b47cc:	2200      	movs	r2, #0
   b47ce:	f002 ff4d 	bl	b766c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue("{\"WHr_today\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}"); // Whr used in the corrisponding hour
   b47d2:	491f      	ldr	r1, [pc, #124]	; (b4850 <loop+0x174>)
   b47d4:	481f      	ldr	r0, [pc, #124]	; (b4854 <loop+0x178>)
   b47d6:	2200      	movs	r2, #0
   b47d8:	f002 ff48 	bl	b766c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b47dc:	2300      	movs	r3, #0
   b47de:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected");
   b47e0:	f004 fc3c 	bl	b905c <_Z16_fetch_usbserialv>
   b47e4:	491c      	ldr	r1, [pc, #112]	; (b4858 <loop+0x17c>)
   b47e6:	f7ff fc81 	bl	b40ec <_ZN5Print6printfEPKcz>
}
   b47ea:	b044      	add	sp, #272	; 0x110
   b47ec:	bd70      	pop	{r4, r5, r6, pc}
   b47ee:	bf00      	nop
   b47f0:	2003d78c 	.word	0x2003d78c
   b47f4:	2003d144 	.word	0x2003d144
   b47f8:	2003d658 	.word	0x2003d658
   b47fc:	2003d4d8 	.word	0x2003d4d8
   b4800:	2003d3f8 	.word	0x2003d3f8
   b4804:	2003d458 	.word	0x2003d458
   b4808:	000bca8c 	.word	0x000bca8c
   b480c:	2003d45c 	.word	0x2003d45c
   b4810:	000bcaa6 	.word	0x000bcaa6
   b4814:	000bccb5 	.word	0x000bccb5
   b4818:	000bcaba 	.word	0x000bcaba
   b481c:	2003d460 	.word	0x2003d460
   b4820:	000bcac0 	.word	0x000bcac0
   b4824:	2003d34c 	.word	0x2003d34c
   b4828:	2003d348 	.word	0x2003d348
   b482c:	2003d718 	.word	0x2003d718
   b4830:	000bcacc 	.word	0x000bcacc
   b4834:	2003d340 	.word	0x2003d340
   b4838:	000bcb24 	.word	0x000bcb24
   b483c:	2003d330 	.word	0x2003d330
   b4840:	000bcb78 	.word	0x000bcb78
   b4844:	2003d338 	.word	0x2003d338
   b4848:	000bcbcc 	.word	0x000bcbcc
   b484c:	2003d35c 	.word	0x2003d35c
   b4850:	000bcc1f 	.word	0x000bcc1f
   b4854:	2003d354 	.word	0x2003d354
   b4858:	000bcc6e 	.word	0x000bcc6e

000b485c <setup>:
{
   b485c:	b570      	push	{r4, r5, r6, lr}
    state = STARTUP;
   b485e:	4d47      	ldr	r5, [pc, #284]	; (b497c <setup+0x120>)
{
   b4860:	b090      	sub	sp, #64	; 0x40
    init_GPIO();
   b4862:	f7ff fe61 	bl	b4528 <_Z9init_GPIOv>
    ble_setup();
   b4866:	f7ff fdc7 	bl	b43f8 <_Z9ble_setupv>
    state = STARTUP;
   b486a:	230a      	movs	r3, #10
   b486c:	702b      	strb	r3, [r5, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b486e:	f001 fe8f 	bl	b6590 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4872:	b910      	cbnz	r0, b487a <setup+0x1e>
            spark_process();
   b4874:	f001 fe84 	bl	b6580 <spark_process>
        while (_while() && !_condition()) {
   b4878:	e7f9      	b.n	b486e <setup+0x12>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b487a:	2400      	movs	r4, #0
   b487c:	f001 fe88 	bl	b6590 <spark_cloud_flag_connected>
    state = GET_DATA;
   b4880:	2601      	movs	r6, #1
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b4882:	2103      	movs	r1, #3
   b4884:	2008      	movs	r0, #8
    state = GET_DATA;
   b4886:	702e      	strb	r6, [r5, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b4888:	f005 f8d8 	bl	b9a3c <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b488c:	f04f 33ff 	mov.w	r3, #4294967295
   b4890:	493b      	ldr	r1, [pc, #236]	; (b4980 <setup+0x124>)
   b4892:	9400      	str	r4, [sp, #0]
   b4894:	4632      	mov	r2, r6
   b4896:	2008      	movs	r0, #8
   b4898:	f004 fc08 	bl	b90ac <_Z15attachInterrupttPFvvE13InterruptModeah>
    IPAddress IP = resolver.search("homeassistant.local");
   b489c:	4a39      	ldr	r2, [pc, #228]	; (b4984 <setup+0x128>)
   b489e:	493a      	ldr	r1, [pc, #232]	; (b4988 <setup+0x12c>)
   b48a0:	a80a      	add	r0, sp, #40	; 0x28
   b48a2:	f001 faed 	bl	b5e80 <_ZN12mDNSResolver8Resolver6searchEPKc>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b48a6:	a90a      	add	r1, sp, #40	; 0x28
   b48a8:	a806      	add	r0, sp, #24
   b48aa:	f002 fbd1 	bl	b7050 <_ZN6StringC1ERK9Printable>
   b48ae:	4b37      	ldr	r3, [pc, #220]	; (b498c <setup+0x130>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b48b0:	9a06      	ldr	r2, [sp, #24]
   b48b2:	781b      	ldrb	r3, [r3, #0]
   b48b4:	4936      	ldr	r1, [pc, #216]	; (b4990 <setup+0x134>)
   b48b6:	f88d 3000 	strb.w	r3, [sp]
   b48ba:	a802      	add	r0, sp, #8
   b48bc:	233c      	movs	r3, #60	; 0x3c
   b48be:	f004 f965 	bl	b8b8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b48c2:	a803      	add	r0, sp, #12
   b48c4:	f7ff fe68 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("HA IP", IP.toString());
   b48c8:	a806      	add	r0, sp, #24
   b48ca:	f002 faf9 	bl	b6ec0 <_ZN6StringD1Ev>
   b48ce:	a90a      	add	r1, sp, #40	; 0x28
   b48d0:	a806      	add	r0, sp, #24
   b48d2:	f002 fbbd 	bl	b7050 <_ZN6StringC1ERK9Printable>
    client.setBroker(IP.toString(), PORT);
   b48d6:	9906      	ldr	r1, [sp, #24]
   b48d8:	482e      	ldr	r0, [pc, #184]	; (b4994 <setup+0x138>)
   b48da:	f240 725b 	movw	r2, #1883	; 0x75b
   b48de:	f000 fb12 	bl	b4f06 <_ZN4MQTT9setBrokerEPKct>
   b48e2:	a806      	add	r0, sp, #24
   b48e4:	f002 faec 	bl	b6ec0 <_ZN6StringD1Ev>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b48e8:	4623      	mov	r3, r4
   b48ea:	4622      	mov	r2, r4
   b48ec:	e9cd 4400 	strd	r4, r4, [sp]
   b48f0:	4929      	ldr	r1, [pc, #164]	; (b4998 <setup+0x13c>)
   b48f2:	482a      	ldr	r0, [pc, #168]	; (b499c <setup+0x140>)
   b48f4:	f001 fe5c 	bl	b65b0 <spark_subscribe>
   b48f8:	4623      	mov	r3, r4
   b48fa:	4622      	mov	r2, r4
   b48fc:	e9cd 4400 	strd	r4, r4, [sp]
   b4900:	4927      	ldr	r1, [pc, #156]	; (b49a0 <setup+0x144>)
   b4902:	4828      	ldr	r0, [pc, #160]	; (b49a4 <setup+0x148>)
   b4904:	f001 fe54 	bl	b65b0 <spark_subscribe>
        return _variable(name, std::forward<ArgsT>(args)...);
   b4908:	782b      	ldrb	r3, [r5, #0]
   b490a:	9306      	str	r3, [sp, #24]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b490c:	2202      	movs	r2, #2
   b490e:	4623      	mov	r3, r4
   b4910:	a906      	add	r1, sp, #24
   b4912:	4825      	ldr	r0, [pc, #148]	; (b49a8 <setup+0x14c>)
   b4914:	f001 fe2c 	bl	b6570 <spark_variable>
    Serial.printf("Return value: %d", client.connect("client_" + String(Time.now()), "mqtt", "mqtt"));
   b4918:	f004 fba0 	bl	b905c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b491c:	4923      	ldr	r1, [pc, #140]	; (b49ac <setup+0x150>)
   b491e:	4604      	mov	r4, r0
   b4920:	a806      	add	r0, sp, #24
   b4922:	f002 fb18 	bl	b6f56 <_ZN6StringC1EPK19__FlashStringHelper>
   b4926:	f003 fefa 	bl	b871e <_ZN9TimeClass3nowEv>
   b492a:	220a      	movs	r2, #10
   b492c:	4601      	mov	r1, r0
   b492e:	a802      	add	r0, sp, #8
   b4930:	f002 fb37 	bl	b6fa2 <_ZN6StringC1Elh>
   b4934:	a902      	add	r1, sp, #8
   b4936:	a806      	add	r0, sp, #24
   b4938:	f002 fb7d 	bl	b7036 <_ZplRK15StringSumHelperRK6String>
   b493c:	4b1c      	ldr	r3, [pc, #112]	; (b49b0 <setup+0x154>)
   b493e:	6801      	ldr	r1, [r0, #0]
   b4940:	4814      	ldr	r0, [pc, #80]	; (b4994 <setup+0x138>)
   b4942:	461a      	mov	r2, r3
   b4944:	f000 fbd6 	bl	b50f4 <_ZN4MQTT7connectEPKcS1_S1_>
   b4948:	491a      	ldr	r1, [pc, #104]	; (b49b4 <setup+0x158>)
   b494a:	4602      	mov	r2, r0
   b494c:	4620      	mov	r0, r4
   b494e:	f7ff fbcd 	bl	b40ec <_ZN5Print6printfEPKcz>
   b4952:	a802      	add	r0, sp, #8
   b4954:	f002 fab4 	bl	b6ec0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4958:	a806      	add	r0, sp, #24
   b495a:	f002 fab1 	bl	b6ec0 <_ZN6StringD1Ev>
    if (client.isConnected())
   b495e:	480d      	ldr	r0, [pc, #52]	; (b4994 <setup+0x138>)
   b4960:	f000 fac3 	bl	b4eea <_ZN4MQTT11isConnectedEv>
   b4964:	b140      	cbz	r0, b4978 <setup+0x11c>
        client.publish("power/get", "hello world");
   b4966:	4914      	ldr	r1, [pc, #80]	; (b49b8 <setup+0x15c>)
   b4968:	4a14      	ldr	r2, [pc, #80]	; (b49bc <setup+0x160>)
   b496a:	480a      	ldr	r0, [pc, #40]	; (b4994 <setup+0x138>)
   b496c:	f000 fc4d 	bl	b520a <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b4970:	4913      	ldr	r1, [pc, #76]	; (b49c0 <setup+0x164>)
   b4972:	4808      	ldr	r0, [pc, #32]	; (b4994 <setup+0x138>)
   b4974:	f000 fded 	bl	b5552 <_ZN4MQTT9subscribeEPKc>
}
   b4978:	b010      	add	sp, #64	; 0x40
   b497a:	bd70      	pop	{r4, r5, r6, pc}
   b497c:	2003d78c 	.word	0x2003d78c
   b4980:	000b4249 	.word	0x000b4249
   b4984:	000bcc7c 	.word	0x000bcc7c
   b4988:	2003d71c 	.word	0x2003d71c
   b498c:	2003d3f0 	.word	0x2003d3f0
   b4990:	000bcc90 	.word	0x000bcc90
   b4994:	2003d460 	.word	0x2003d460
   b4998:	000b4109 	.word	0x000b4109
   b499c:	000bccd4 	.word	0x000bccd4
   b49a0:	000b40b9 	.word	0x000b40b9
   b49a4:	000bcc96 	.word	0x000bcc96
   b49a8:	000bcca1 	.word	0x000bcca1
   b49ac:	000bc9c9 	.word	0x000bc9c9
   b49b0:	000bc9d1 	.word	0x000bc9d1
   b49b4:	000bcca7 	.word	0x000bcca7
   b49b8:	000bccc4 	.word	0x000bccc4
   b49bc:	000bccb8 	.word	0x000bccb8
   b49c0:	000bccce 	.word	0x000bccce

000b49c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b49c4:	b082      	sub	sp, #8
   b49c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b49c8:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b49ca:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b49cc:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b49ce:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b49d0:	e9c0 3300 	strd	r3, r3, [r0]
   b49d4:	4606      	mov	r6, r0
   b49d6:	4694      	mov	ip, r2
   b49d8:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b49da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b49dc:	ac04      	add	r4, sp, #16
   b49de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b49e0:	682b      	ldr	r3, [r5, #0]
   b49e2:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b49e4:	ad1a      	add	r5, sp, #104	; 0x68
   b49e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b49e8:	ac09      	add	r4, sp, #36	; 0x24
   b49ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b49ec:	682b      	ldr	r3, [r5, #0]
   b49ee:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b49f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b49f2:	9302      	str	r3, [sp, #8]
   b49f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b49f6:	9301      	str	r3, [sp, #4]
   b49f8:	ab09      	add	r3, sp, #36	; 0x24
   b49fa:	9300      	str	r3, [sp, #0]
   b49fc:	4630      	mov	r0, r6
   b49fe:	ab04      	add	r3, sp, #16
   b4a00:	4662      	mov	r2, ip
   b4a02:	4639      	mov	r1, r7
   b4a04:	f003 fb20 	bl	b8048 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4a08:	4630      	mov	r0, r6
   b4a0a:	b00f      	add	sp, #60	; 0x3c
   b4a0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4a10:	b002      	add	sp, #8
   b4a12:	4770      	bx	lr

000b4a14 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii>:
        val_(val) {
   b4a14:	4b73      	ldr	r3, [pc, #460]	; (b4be4 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1d0>)
   b4a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a1a:	2400      	movs	r4, #0
   b4a1c:	701c      	strb	r4, [r3, #0]
   b4a1e:	4b72      	ldr	r3, [pc, #456]	; (b4be8 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1d4>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b4a20:	4d72      	ldr	r5, [pc, #456]	; (b4bec <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1d8>)
const BleUuid wattcharacteristicUuid(watt_c);
   b4a22:	f8df b240 	ldr.w	fp, [pc, #576]	; b4c64 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x250>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b4a26:	f8df a240 	ldr.w	sl, [pc, #576]	; b4c68 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x254>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b4a2a:	f8df 9240 	ldr.w	r9, [pc, #576]	; b4c6c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x258>
   b4a2e:	f04f 0801 	mov.w	r8, #1
   b4a32:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b4a36:	4b6e      	ldr	r3, [pc, #440]	; (b4bf0 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1dc>)
   b4a38:	b08d      	sub	sp, #52	; 0x34
   b4a3a:	6819      	ldr	r1, [r3, #0]
   b4a3c:	4628      	mov	r0, r5
   b4a3e:	f002 fd77 	bl	b7530 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b4a42:	4b6c      	ldr	r3, [pc, #432]	; (b4bf4 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1e0>)
   b4a44:	4658      	mov	r0, fp
   b4a46:	6819      	ldr	r1, [r3, #0]
   b4a48:	f002 fd72 	bl	b7530 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b4a4c:	4b6a      	ldr	r3, [pc, #424]	; (b4bf8 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1e4>)
   b4a4e:	4650      	mov	r0, sl
   b4a50:	6819      	ldr	r1, [r3, #0]
   b4a52:	f002 fd6d 	bl	b7530 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b4a56:	4b69      	ldr	r3, [pc, #420]	; (b4bfc <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1e8>)
   b4a58:	4648      	mov	r0, r9
   b4a5a:	6819      	ldr	r1, [r3, #0]
   b4a5c:	f002 fd68 	bl	b7530 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b4a60:	4b67      	ldr	r3, [pc, #412]	; (b4c00 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1ec>)
   b4a62:	4868      	ldr	r0, [pc, #416]	; (b4c04 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1f0>)
   b4a64:	6819      	ldr	r1, [r3, #0]
   b4a66:	f002 fd63 	bl	b7530 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b4a6a:	4b67      	ldr	r3, [pc, #412]	; (b4c08 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1f4>)
   b4a6c:	4867      	ldr	r0, [pc, #412]	; (b4c0c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1f8>)
   b4a6e:	6819      	ldr	r1, [r3, #0]
   b4a70:	f002 fd5e 	bl	b7530 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b4a74:	4b66      	ldr	r3, [pc, #408]	; (b4c10 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1fc>)
   b4a76:	4867      	ldr	r0, [pc, #412]	; (b4c14 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x200>)
   b4a78:	6819      	ldr	r1, [r3, #0]
   b4a7a:	f002 fd59 	bl	b7530 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4a7e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4a82:	462e      	mov	r6, r5
   b4a84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4a86:	2710      	movs	r7, #16
   b4a88:	eb0d 0c07 	add.w	ip, sp, r7
   b4a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4a90:	6833      	ldr	r3, [r6, #0]
   b4a92:	f8cc 3000 	str.w	r3, [ip]
   b4a96:	f10b 0304 	add.w	r3, fp, #4
   b4a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4a9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4aa0:	f8db 3000 	ldr.w	r3, [fp]
   b4aa4:	495c      	ldr	r1, [pc, #368]	; (b4c18 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x204>)
   b4aa6:	485d      	ldr	r0, [pc, #372]	; (b4c1c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x208>)
   b4aa8:	463a      	mov	r2, r7
   b4aaa:	f7ff ff8b 	bl	b49c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b4aae:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4ab2:	46ae      	mov	lr, r5
   b4ab4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4ab8:	eb0d 0c07 	add.w	ip, sp, r7
   b4abc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4ac0:	6833      	ldr	r3, [r6, #0]
   b4ac2:	f8cc 3000 	str.w	r3, [ip]
   b4ac6:	f10a 0304 	add.w	r3, sl, #4
   b4aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4acc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4ad0:	f8da 3000 	ldr.w	r3, [sl]
   b4ad4:	4952      	ldr	r1, [pc, #328]	; (b4c20 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x20c>)
   b4ad6:	4853      	ldr	r0, [pc, #332]	; (b4c24 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x210>)
   b4ad8:	463a      	mov	r2, r7
   b4ada:	f7ff ff73 	bl	b49c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4ade:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4ae2:	46ae      	mov	lr, r5
   b4ae4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4ae8:	eb0d 0c07 	add.w	ip, sp, r7
   b4aec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4af0:	6833      	ldr	r3, [r6, #0]
   b4af2:	f8cc 3000 	str.w	r3, [ip]
   b4af6:	f109 0304 	add.w	r3, r9, #4
   b4afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4afc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4b00:	f8d9 3000 	ldr.w	r3, [r9]
   b4b04:	4948      	ldr	r1, [pc, #288]	; (b4c28 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x214>)
   b4b06:	4849      	ldr	r0, [pc, #292]	; (b4c2c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x218>)
   b4b08:	463a      	mov	r2, r7
   b4b0a:	f7ff ff5b 	bl	b49c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b4b0e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4b12:	46ae      	mov	lr, r5
   b4b14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4b18:	eb0d 0c07 	add.w	ip, sp, r7
   b4b1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4b20:	6833      	ldr	r3, [r6, #0]
   b4b22:	f8cc 3000 	str.w	r3, [ip]
   b4b26:	4b37      	ldr	r3, [pc, #220]	; (b4c04 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1f0>)
   b4b28:	3304      	adds	r3, #4
   b4b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4b2c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4b30:	4b34      	ldr	r3, [pc, #208]	; (b4c04 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1f0>)
   b4b32:	493f      	ldr	r1, [pc, #252]	; (b4c30 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x21c>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	483f      	ldr	r0, [pc, #252]	; (b4c34 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x220>)
   b4b38:	463a      	mov	r2, r7
   b4b3a:	f7ff ff43 	bl	b49c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b4b3e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4b42:	46ae      	mov	lr, r5
   b4b44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4b48:	eb0d 0c07 	add.w	ip, sp, r7
   b4b4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4b50:	6833      	ldr	r3, [r6, #0]
   b4b52:	f8cc 3000 	str.w	r3, [ip]
   b4b56:	4b2d      	ldr	r3, [pc, #180]	; (b4c0c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1f8>)
   b4b58:	3304      	adds	r3, #4
   b4b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4b5c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4b60:	4b2a      	ldr	r3, [pc, #168]	; (b4c0c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x1f8>)
   b4b62:	4935      	ldr	r1, [pc, #212]	; (b4c38 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x224>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	4835      	ldr	r0, [pc, #212]	; (b4c3c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x228>)
   b4b68:	463a      	mov	r2, r7
   b4b6a:	f7ff ff2b 	bl	b49c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b4b6e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b74:	eb0d 0c07 	add.w	ip, sp, r7
   b4b78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4b7c:	4d25      	ldr	r5, [pc, #148]	; (b4c14 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x200>)
   b4b7e:	6833      	ldr	r3, [r6, #0]
   b4b80:	f8cc 3000 	str.w	r3, [ip]
   b4b84:	1d2b      	adds	r3, r5, #4
   b4b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4b88:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4b8c:	463a      	mov	r2, r7
   b4b8e:	682b      	ldr	r3, [r5, #0]
   b4b90:	492b      	ldr	r1, [pc, #172]	; (b4c40 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x22c>)
   b4b92:	482c      	ldr	r0, [pc, #176]	; (b4c44 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x230>)
   b4b94:	f7ff ff16 	bl	b49c4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
MQTT client("192.168.110.6", PORT, 512, 30, callback);
   b4b98:	4b2b      	ldr	r3, [pc, #172]	; (b4c48 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x234>)
   b4b9a:	9301      	str	r3, [sp, #4]
   b4b9c:	231e      	movs	r3, #30
   b4b9e:	9300      	str	r3, [sp, #0]
   b4ba0:	492a      	ldr	r1, [pc, #168]	; (b4c4c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x238>)
   b4ba2:	9402      	str	r4, [sp, #8]
   b4ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
   b4ba8:	f240 725b 	movw	r2, #1883	; 0x75b
   b4bac:	4828      	ldr	r0, [pc, #160]	; (b4c50 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x23c>)
   b4bae:	f000 f8a3 	bl	b4cf8 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b4bb2:	4b28      	ldr	r3, [pc, #160]	; (b4c54 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x240>)
UDP udp;
   b4bb4:	4928      	ldr	r1, [pc, #160]	; (b4c58 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x244>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   b4bb6:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b4bb8:	1d1a      	adds	r2, r3, #4
   b4bba:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4bbc:	4a27      	ldr	r2, [pc, #156]	; (b4c5c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x248>)
   b4bbe:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4bc0:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4bc4:	f883 8014 	strb.w	r8, [r3, #20]
   b4bc8:	4608      	mov	r0, r1
   b4bca:	f002 f8ad 	bl	b6d28 <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b4bce:	4922      	ldr	r1, [pc, #136]	; (b4c58 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x244>)
   b4bd0:	4823      	ldr	r0, [pc, #140]	; (b4c60 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x24c>)
   b4bd2:	f001 f88d 	bl	b5cf0 <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b4bd6:	4621      	mov	r1, r4
   b4bd8:	4640      	mov	r0, r8
   b4bda:	b00d      	add	sp, #52	; 0x34
   b4bdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b4be0:	f001 bc32 	b.w	b6448 <system_thread_set_state>
   b4be4:	2003d3f0 	.word	0x2003d3f0
   b4be8:	2003d3f1 	.word	0x2003d3f1
   b4bec:	2003d378 	.word	0x2003d378
   b4bf0:	2003d148 	.word	0x2003d148
   b4bf4:	2003d14c 	.word	0x2003d14c
   b4bf8:	2003d130 	.word	0x2003d130
   b4bfc:	2003d128 	.word	0x2003d128
   b4c00:	2003d12c 	.word	0x2003d12c
   b4c04:	2003d3b4 	.word	0x2003d3b4
   b4c08:	2003d134 	.word	0x2003d134
   b4c0c:	2003d3a0 	.word	0x2003d3a0
   b4c10:	2003d138 	.word	0x2003d138
   b4c14:	2003d3dc 	.word	0x2003d3dc
   b4c18:	000bccdb 	.word	0x000bccdb
   b4c1c:	2003d34c 	.word	0x2003d34c
   b4c20:	000bcce4 	.word	0x000bcce4
   b4c24:	2003d340 	.word	0x2003d340
   b4c28:	000bccf2 	.word	0x000bccf2
   b4c2c:	2003d330 	.word	0x2003d330
   b4c30:	000bccfc 	.word	0x000bccfc
   b4c34:	2003d338 	.word	0x2003d338
   b4c38:	000bcd09 	.word	0x000bcd09
   b4c3c:	2003d354 	.word	0x2003d354
   b4c40:	000bcd13 	.word	0x000bcd13
   b4c44:	2003d35c 	.word	0x2003d35c
   b4c48:	000b40c5 	.word	0x000b40c5
   b4c4c:	000bcd21 	.word	0x000bcd21
   b4c50:	2003d460 	.word	0x2003d460
   b4c54:	2003d4c0 	.word	0x2003d4c0
   b4c58:	2003e194 	.word	0x2003e194
   b4c5c:	00030010 	.word	0x00030010
   b4c60:	2003d71c 	.word	0x2003d71c
   b4c64:	2003d364 	.word	0x2003d364
   b4c68:	2003d3c8 	.word	0x2003d3c8
   b4c6c:	2003d38c 	.word	0x2003d38c

000b4c70 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4c70:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4c74:	b510      	push	{r4, lr}
   b4c76:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4c78:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4c7a:	b113      	cbz	r3, b4c82 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4c7c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4c7e:	f001 fa7b 	bl	b6178 <os_mutex_lock>
#endif
#endif
#endif
        }
   b4c82:	4620      	mov	r0, r4
   b4c84:	bd10      	pop	{r4, pc}

000b4c86 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b4c86:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4c88:	6803      	ldr	r3, [r0, #0]
   b4c8a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4c8e:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4c90:	b112      	cbz	r2, b4c98 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b4c92:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4c94:	f001 fa78 	bl	b6188 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4c98:	4620      	mov	r0, r4
   b4c9a:	bd10      	pop	{r4, pc}

000b4c9c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c9e:	461f      	mov	r7, r3
   b4ca0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4ca4:	4604      	mov	r4, r0
   b4ca6:	460d      	mov	r5, r1
   b4ca8:	4616      	mov	r6, r2
    if (thread) {
   b4caa:	b12b      	cbz	r3, b4cb8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4cac:	2301      	movs	r3, #1
   b4cae:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4cb2:	3058      	adds	r0, #88	; 0x58
   b4cb4:	f001 fa58 	bl	b6168 <os_mutex_create>
    }
    this->callback = callback;
   b4cb8:	9b08      	ldr	r3, [sp, #32]
   b4cba:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4cbc:	2300      	movs	r3, #0
   b4cbe:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4cc0:	b106      	cbz	r6, b4cc4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b4cc2:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4cc4:	b125      	cbz	r5, b4cd0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b4cc6:	4629      	mov	r1, r5
   b4cc8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4ccc:	f002 f957 	bl	b6f7e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4cd0:	9b06      	ldr	r3, [sp, #24]
   b4cd2:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4cd4:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b4cd6:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b4cd8:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4cdc:	2bff      	cmp	r3, #255	; 0xff
   b4cde:	bfb8      	it	lt
   b4ce0:	23ff      	movlt	r3, #255	; 0xff
   b4ce2:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b4ce6:	b108      	cbz	r0, b4cec <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b4ce8:	f7ff f9d9 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4cec:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4cf0:	f7ff f9d3 	bl	b409a <_Znaj>
   b4cf4:	61e0      	str	r0, [r4, #28]
}
   b4cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4cf8 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b4cf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4cfc:	4604      	mov	r4, r0
            bool thread) {
   b4cfe:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b4d00:	4617      	mov	r7, r2
   b4d02:	4698      	mov	r8, r3
   b4d04:	460e      	mov	r6, r1
            bool thread) {
   b4d06:	f004 fd57 	bl	b97b8 <_ZN9TCPClientC1Ev>
   b4d0a:	490d      	ldr	r1, [pc, #52]	; (b4d40 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b4d0c:	61e5      	str	r5, [r4, #28]
   b4d0e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4d12:	f002 f920 	bl	b6f56 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4d16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b4d1a:	9303      	str	r3, [sp, #12]
   b4d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b4d1e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4d20:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b4d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4d26:	9300      	str	r3, [sp, #0]
   b4d28:	4620      	mov	r0, r4
            bool thread) {
   b4d2a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4d2e:	463b      	mov	r3, r7
   b4d30:	462a      	mov	r2, r5
   b4d32:	4631      	mov	r1, r6
   b4d34:	f7ff ffb2 	bl	b4c9c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4d38:	4620      	mov	r0, r4
   b4d3a:	b004      	add	sp, #16
   b4d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4d40:	000bc97c 	.word	0x000bc97c

000b4d44 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4d44:	b510      	push	{r4, lr}
   b4d46:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4d48:	4620      	mov	r0, r4
   b4d4a:	f004 fc91 	bl	b9670 <_ZN9TCPClient9availableEv>
   b4d4e:	2800      	cmp	r0, #0
   b4d50:	d0fa      	beq.n	b4d48 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b4d52:	4620      	mov	r0, r4
   b4d54:	f004 fa9a 	bl	b928c <_ZN9TCPClient4readEv>
}
   b4d58:	b2c0      	uxtb	r0, r0
   b4d5a:	bd10      	pop	{r4, pc}

000b4d5c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4d60:	4605      	mov	r5, r0
   b4d62:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4d64:	f7ff ffee 	bl	b4d44 <_ZN4MQTT8readByteEv>
   b4d68:	69eb      	ldr	r3, [r5, #28]
   b4d6a:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4d6c:	69eb      	ldr	r3, [r5, #28]
   b4d6e:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b4d72:	f04f 0901 	mov.w	r9, #1
   b4d76:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4d7a:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4d7c:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4d7e:	4628      	mov	r0, r5
   b4d80:	f7ff ffe0 	bl	b4d44 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4d84:	4626      	mov	r6, r4
   b4d86:	69eb      	ldr	r3, [r5, #28]
   b4d88:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4d8a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b4d8e:	fb13 f309 	smulbb	r3, r3, r9
   b4d92:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4d94:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b4d96:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b4d98:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b4d9a:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4d9c:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b4da0:	d4ed      	bmi.n	b4d7e <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b4da2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4da4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b4da8:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4dac:	d11e      	bne.n	b4dec <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b4dae:	4628      	mov	r0, r5
   b4db0:	f7ff ffc8 	bl	b4d44 <_ZN4MQTT8readByteEv>
   b4db4:	69eb      	ldr	r3, [r5, #28]
   b4db6:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b4db8:	4628      	mov	r0, r5
   b4dba:	f7ff ffc3 	bl	b4d44 <_ZN4MQTT8readByteEv>
   b4dbe:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b4dc0:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b4dc2:	b2b6      	uxth	r6, r6
   b4dc4:	69eb      	ldr	r3, [r5, #28]
   b4dc6:	b2a4      	uxth	r4, r4
   b4dc8:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b4dca:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4dcc:	b2b6      	uxth	r6, r6
   b4dce:	42be      	cmp	r6, r7
   b4dd0:	d20e      	bcs.n	b4df0 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b4dd2:	4628      	mov	r0, r5
   b4dd4:	f7ff ffb6 	bl	b4d44 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b4dd8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4ddc:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b4dde:	bf84      	itt	hi
   b4de0:	69eb      	ldrhi	r3, [r5, #28]
   b4de2:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4de4:	3401      	adds	r4, #1
   b4de6:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b4de8:	3601      	adds	r6, #1
   b4dea:	e7ef      	b.n	b4dcc <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4dec:	2600      	movs	r6, #0
   b4dee:	e7ed      	b.n	b4dcc <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4df0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b4df4:	42a3      	cmp	r3, r4
   b4df6:	bf2c      	ite	cs
   b4df8:	4620      	movcs	r0, r4
   b4dfa:	2000      	movcc	r0, #0
   b4dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4e00 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4e04:	4615      	mov	r5, r2
   b4e06:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b4e08:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4e0a:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4e0c:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4e0e:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4e10:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4e12:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b4e16:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4e1a:	f103 0401 	add.w	r4, r3, #1
   b4e1e:	4403      	add	r3, r0
            digit |= 0x80;
   b4e20:	bf88      	it	hi
   b4e22:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b4e26:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4e2a:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4e2e:	b2e4      	uxtb	r4, r4
   b4e30:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4e34:	d81e      	bhi.n	b4e74 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b4e36:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b4e3a:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4e3e:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4e40:	4622      	mov	r2, r4
   b4e42:	a901      	add	r1, sp, #4
   b4e44:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4e46:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4e4a:	f005 fc60 	bl	ba70e <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4e4e:	1c72      	adds	r2, r6, #1
   b4e50:	4422      	add	r2, r4
   b4e52:	4641      	mov	r1, r8
   b4e54:	4638      	mov	r0, r7
   b4e56:	f004 fa04 	bl	b9262 <_ZN9TCPClient5writeEPKhj>
   b4e5a:	4605      	mov	r5, r0
   b4e5c:	f001 f8f2 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4e60:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b4e62:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4e64:	4432      	add	r2, r6
   b4e66:	b2a8      	uxth	r0, r5
}
   b4e68:	1a13      	subs	r3, r2, r0
   b4e6a:	4258      	negs	r0, r3
   b4e6c:	4158      	adcs	r0, r3
   b4e6e:	b002      	add	sp, #8
   b4e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4e74:	4623      	mov	r3, r4
   b4e76:	e7ca      	b.n	b4e0e <_ZN4MQTT5writeEhPht+0xe>

000b4e78 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b4e78:	b513      	push	{r0, r1, r4, lr}
   b4e7a:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b4e7c:	4601      	mov	r1, r0
   b4e7e:	a801      	add	r0, sp, #4
   b4e80:	f7ff fef6 	bl	b4c70 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b4e84:	69e3      	ldr	r3, [r4, #28]
   b4e86:	22e0      	movs	r2, #224	; 0xe0
   b4e88:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b4e8a:	69e3      	ldr	r3, [r4, #28]
   b4e8c:	2200      	movs	r2, #0
   b4e8e:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b4e90:	69e1      	ldr	r1, [r4, #28]
   b4e92:	2202      	movs	r2, #2
   b4e94:	4620      	mov	r0, r4
   b4e96:	f004 f9e4 	bl	b9262 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b4e9a:	4620      	mov	r0, r4
   b4e9c:	f004 fc42 	bl	b9724 <_ZN9TCPClient4stopEv>
   b4ea0:	f001 f8d0 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b4ea4:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b4ea8:	a801      	add	r0, sp, #4
   b4eaa:	f7ff feec 	bl	b4c86 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4eae:	b002      	add	sp, #8
   b4eb0:	bd10      	pop	{r4, pc}

000b4eb2 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4eb2:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4eb6:	4605      	mov	r5, r0
    pos += 2;
   b4eb8:	b298      	uxth	r0, r3
   b4eba:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b4ebc:	5cce      	ldrb	r6, [r1, r3]
   b4ebe:	b29c      	uxth	r4, r3
   b4ec0:	b156      	cbz	r6, b4ed8 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4ec2:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4ec6:	4584      	cmp	ip, r0
   b4ec8:	f103 0701 	add.w	r7, r3, #1
   b4ecc:	d904      	bls.n	b4ed8 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b4ece:	1c44      	adds	r4, r0, #1
   b4ed0:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b4ed2:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b4ed4:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4ed6:	e7f1      	b.n	b4ebc <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b4ed8:	b299      	uxth	r1, r3
   b4eda:	1a41      	subs	r1, r0, r1
   b4edc:	440a      	add	r2, r1
   b4ede:	0a21      	lsrs	r1, r4, #8
   b4ee0:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4ee4:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b4ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4eea <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4eea:	b538      	push	{r3, r4, r5, lr}
   b4eec:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4eee:	f004 fae1 	bl	b94b4 <_ZN9TCPClient9connectedEv>
   b4ef2:	2800      	cmp	r0, #0
   b4ef4:	bf14      	ite	ne
   b4ef6:	2501      	movne	r5, #1
   b4ef8:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4efa:	d102      	bne.n	b4f02 <_ZN4MQTT11isConnectedEv+0x18>
   b4efc:	4620      	mov	r0, r4
   b4efe:	f004 fc11 	bl	b9724 <_ZN9TCPClient4stopEv>
    return rc;
}
   b4f02:	4628      	mov	r0, r5
   b4f04:	bd38      	pop	{r3, r4, r5, pc}

000b4f06 <_ZN4MQTT9setBrokerEPKct>:
void MQTT::setBroker(const char* domain, uint16_t port) {
   b4f06:	b570      	push	{r4, r5, r6, lr}
   b4f08:	4604      	mov	r4, r0
   b4f0a:	460e      	mov	r6, r1
   b4f0c:	4615      	mov	r5, r2
    if(isConnected()) {
   b4f0e:	f7ff ffec 	bl	b4eea <_ZN4MQTT11isConnectedEv>
   b4f12:	b110      	cbz	r0, b4f1a <_ZN4MQTT9setBrokerEPKct+0x14>
        disconnect();
   b4f14:	4620      	mov	r0, r4
   b4f16:	f7ff ffaf 	bl	b4e78 <_ZN4MQTT10disconnectEv>
    this->domain = domain;
   b4f1a:	4631      	mov	r1, r6
   b4f1c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4f20:	f002 f82d 	bl	b6f7e <_ZN6StringaSEPKc>
    this->ip = NULL;
   b4f24:	2300      	movs	r3, #0
   b4f26:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   b4f28:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
}
   b4f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4f30 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4f34:	b088      	sub	sp, #32
   b4f36:	4604      	mov	r4, r0
   b4f38:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4f3c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4f40:	4689      	mov	r9, r1
   b4f42:	4617      	mov	r7, r2
   b4f44:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4f46:	f7ff ffd0 	bl	b4eea <_ZN4MQTT11isConnectedEv>
   b4f4a:	4605      	mov	r5, r0
   b4f4c:	2800      	cmp	r0, #0
   b4f4e:	f040 80cd 	bne.w	b50ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4f52:	4621      	mov	r1, r4
   b4f54:	a801      	add	r0, sp, #4
   b4f56:	f7ff fe8b 	bl	b4c70 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4f5a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4f5c:	2900      	cmp	r1, #0
   b4f5e:	f040 8088 	bne.w	b5072 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4f62:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4f66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4f68:	462b      	mov	r3, r5
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	f004 fa24 	bl	b93b8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4f70:	2800      	cmp	r0, #0
   b4f72:	d07a      	beq.n	b506a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4f74:	2301      	movs	r3, #1
   b4f76:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4f78:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4f7c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4f7e:	2b04      	cmp	r3, #4
   b4f80:	4b5b      	ldr	r3, [pc, #364]	; (b50f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4f82:	f040 8081 	bne.w	b5088 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4f86:	6818      	ldr	r0, [r3, #0]
   b4f88:	8899      	ldrh	r1, [r3, #4]
   b4f8a:	799b      	ldrb	r3, [r3, #6]
   b4f8c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4f90:	f88d 300e 	strb.w	r3, [sp, #14]
   b4f94:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4f96:	f8c2 0005 	str.w	r0, [r2, #5]
   b4f9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4f9e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4fa2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4fa6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4fa8:	230c      	movs	r3, #12
            if (willTopic) {
   b4faa:	f1b8 0f00 	cmp.w	r8, #0
   b4fae:	f000 8081 	beq.w	b50b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4fb2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b4fb6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4fba:	0140      	lsls	r0, r0, #5
   b4fbc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4fc0:	f040 0006 	orr.w	r0, r0, #6
   b4fc4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b4fc6:	f1ba 0f00 	cmp.w	sl, #0
   b4fca:	d101      	bne.n	b4fd0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4fcc:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4fd0:	b11f      	cbz	r7, b4fda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4fd2:	2e00      	cmp	r6, #0
   b4fd4:	d170      	bne.n	b50b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b4fd6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4fda:	69e2      	ldr	r2, [r4, #28]
   b4fdc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4fde:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4fe0:	69e1      	ldr	r1, [r4, #28]
   b4fe2:	1c58      	adds	r0, r3, #1
   b4fe4:	1212      	asrs	r2, r2, #8
   b4fe6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b4fe8:	1c9a      	adds	r2, r3, #2
   b4fea:	69e1      	ldr	r1, [r4, #28]
   b4fec:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4fee:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4ff0:	3303      	adds	r3, #3
   b4ff2:	69e2      	ldr	r2, [r4, #28]
   b4ff4:	4649      	mov	r1, r9
   b4ff6:	4620      	mov	r0, r4
   b4ff8:	f7ff ff5b 	bl	b4eb2 <_ZN4MQTT11writeStringEPKcPht>
   b4ffc:	4603      	mov	r3, r0
            if (willTopic) {
   b4ffe:	f1b8 0f00 	cmp.w	r8, #0
   b5002:	d00b      	beq.n	b501c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5004:	69e2      	ldr	r2, [r4, #28]
   b5006:	4641      	mov	r1, r8
   b5008:	4620      	mov	r0, r4
   b500a:	f7ff ff52 	bl	b4eb2 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b500e:	69e2      	ldr	r2, [r4, #28]
   b5010:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b5012:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b5014:	4620      	mov	r0, r4
   b5016:	f7ff ff4c 	bl	b4eb2 <_ZN4MQTT11writeStringEPKcPht>
   b501a:	4603      	mov	r3, r0
            if(user != NULL) {
   b501c:	b167      	cbz	r7, b5038 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b501e:	69e2      	ldr	r2, [r4, #28]
   b5020:	4639      	mov	r1, r7
   b5022:	4620      	mov	r0, r4
   b5024:	f7ff ff45 	bl	b4eb2 <_ZN4MQTT11writeStringEPKcPht>
   b5028:	4603      	mov	r3, r0
                if(pass != NULL) {
   b502a:	b12e      	cbz	r6, b5038 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b502c:	69e2      	ldr	r2, [r4, #28]
   b502e:	4631      	mov	r1, r6
   b5030:	4620      	mov	r0, r4
   b5032:	f7ff ff3e 	bl	b4eb2 <_ZN4MQTT11writeStringEPKcPht>
   b5036:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5038:	3b05      	subs	r3, #5
   b503a:	69e2      	ldr	r2, [r4, #28]
   b503c:	b29b      	uxth	r3, r3
   b503e:	2110      	movs	r1, #16
   b5040:	4620      	mov	r0, r4
   b5042:	f7ff fedd 	bl	b4e00 <_ZN4MQTT5writeEhPht>
   b5046:	f000 fffd 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b504a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b504e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5052:	4620      	mov	r0, r4
   b5054:	f004 fb0c 	bl	b9670 <_ZN9TCPClient9availableEv>
   b5058:	bb88      	cbnz	r0, b50be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b505a:	f000 fff3 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b505e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5060:	1ac0      	subs	r0, r0, r3
   b5062:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5064:	4373      	muls	r3, r6
   b5066:	4298      	cmp	r0, r3
   b5068:	d9f3      	bls.n	b5052 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b506a:	4620      	mov	r0, r4
   b506c:	f004 fb5a 	bl	b9724 <_ZN9TCPClient4stopEv>
   b5070:	e035      	b.n	b50de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5072:	a802      	add	r0, sp, #8
   b5074:	f003 ff88 	bl	b8f88 <_ZN9IPAddressC1EPKh>
   b5078:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b507c:	462b      	mov	r3, r5
   b507e:	a902      	add	r1, sp, #8
   b5080:	4620      	mov	r0, r4
   b5082:	f004 fa79 	bl	b9578 <_ZN9TCPClient7connectE9IPAddresstm>
    virtual ~IPAddress() {}
   b5086:	e773      	b.n	b4f70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5088:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b508c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5090:	7bdb      	ldrb	r3, [r3, #15]
   b5092:	f10d 0c08 	add.w	ip, sp, #8
   b5096:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b509a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b509e:	ab02      	add	r3, sp, #8
   b50a0:	cb03      	ldmia	r3!, {r0, r1}
   b50a2:	f8c2 0005 	str.w	r0, [r2, #5]
   b50a6:	f8c2 1009 	str.w	r1, [r2, #9]
   b50aa:	f89c 3000 	ldrb.w	r3, [ip]
   b50ae:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b50b0:	230e      	movs	r3, #14
   b50b2:	e77a      	b.n	b4faa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b50b4:	2002      	movs	r0, #2
   b50b6:	e786      	b.n	b4fc6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b50b8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b50bc:	e78d      	b.n	b4fda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b50be:	a902      	add	r1, sp, #8
   b50c0:	4620      	mov	r0, r4
   b50c2:	f7ff fe4b 	bl	b4d5c <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b50c6:	2804      	cmp	r0, #4
   b50c8:	d1cf      	bne.n	b506a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b50ca:	69e3      	ldr	r3, [r4, #28]
   b50cc:	78de      	ldrb	r6, [r3, #3]
   b50ce:	2e00      	cmp	r6, #0
   b50d0:	d1cb      	bne.n	b506a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b50d2:	f000 ffb7 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b50d6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b50d8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b50da:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b50de:	a801      	add	r0, sp, #4
   b50e0:	f7ff fdd1 	bl	b4c86 <_ZN4MQTT11MutexLockerD1Ev>
}
   b50e4:	4628      	mov	r0, r5
   b50e6:	b008      	add	sp, #32
   b50e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b50ec:	2500      	movs	r5, #0
   b50ee:	e7f9      	b.n	b50e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b50f0:	000bce3a 	.word	0x000bce3a

000b50f4 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b50f4:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b50f6:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b50fa:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b50fc:	2401      	movs	r4, #1
   b50fe:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b5102:	2400      	movs	r4, #0
   b5104:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b5108:	e9cd 4400 	strd	r4, r4, [sp]
   b510c:	f7ff ff10 	bl	b4f30 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b5110:	b006      	add	sp, #24
   b5112:	bd10      	pop	{r4, pc}

000b5114 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5118:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b511c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5120:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b5124:	4604      	mov	r4, r0
   b5126:	468b      	mov	fp, r1
   b5128:	4616      	mov	r6, r2
   b512a:	461f      	mov	r7, r3
    if (isConnected()) {
   b512c:	f7ff fedd 	bl	b4eea <_ZN4MQTT11isConnectedEv>
   b5130:	4682      	mov	sl, r0
   b5132:	2800      	cmp	r0, #0
   b5134:	d051      	beq.n	b51da <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b5136:	4621      	mov	r1, r4
   b5138:	a801      	add	r0, sp, #4
   b513a:	f7ff fd99 	bl	b4c70 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b513e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b5142:	69e0      	ldr	r0, [r4, #28]
   b5144:	2100      	movs	r1, #0
   b5146:	f005 fb0a 	bl	ba75e <memset>
        length = writeString(topic, buffer, length);
   b514a:	2305      	movs	r3, #5
   b514c:	69e2      	ldr	r2, [r4, #28]
   b514e:	4659      	mov	r1, fp
   b5150:	4620      	mov	r0, r4
   b5152:	f7ff feae 	bl	b4eb2 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b5156:	1e6b      	subs	r3, r5, #1
   b5158:	2b01      	cmp	r3, #1
   b515a:	d815      	bhi.n	b5188 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b515c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b515e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5160:	3101      	adds	r1, #1
   b5162:	b289      	uxth	r1, r1
   b5164:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5166:	0a09      	lsrs	r1, r1, #8
   b5168:	5419      	strb	r1, [r3, r0]
   b516a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b516c:	69e3      	ldr	r3, [r4, #28]
   b516e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5170:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5172:	3002      	adds	r0, #2
   b5174:	5499      	strb	r1, [r3, r2]
   b5176:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5178:	f1b8 0f00 	cmp.w	r8, #0
   b517c:	d004      	beq.n	b5188 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b517e:	8c23      	ldrh	r3, [r4, #32]
   b5180:	1c5a      	adds	r2, r3, #1
   b5182:	8422      	strh	r2, [r4, #32]
   b5184:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5188:	2100      	movs	r1, #0
   b518a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b518c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b518e:	69e2      	ldr	r2, [r4, #28]
   b5190:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5192:	d90a      	bls.n	b51aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5194:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5198:	459c      	cmp	ip, r3
   b519a:	d906      	bls.n	b51aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b519c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b51a0:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b51a4:	3101      	adds	r1, #1
   b51a6:	b289      	uxth	r1, r1
   b51a8:	e7ef      	b.n	b518a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b51aa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b51ae:	2900      	cmp	r1, #0
   b51b0:	bf0c      	ite	eq
   b51b2:	2130      	moveq	r1, #48	; 0x30
   b51b4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b51b6:	f1b9 0f00 	cmp.w	r9, #0
   b51ba:	d001      	beq.n	b51c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b51bc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b51c0:	2d02      	cmp	r5, #2
   b51c2:	d10e      	bne.n	b51e2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b51c4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b51c8:	3b05      	subs	r3, #5
   b51ca:	b29b      	uxth	r3, r3
   b51cc:	4620      	mov	r0, r4
   b51ce:	f7ff fe17 	bl	b4e00 <_ZN4MQTT5writeEhPht>
   b51d2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b51d4:	a801      	add	r0, sp, #4
   b51d6:	f7ff fd56 	bl	b4c86 <_ZN4MQTT11MutexLockerD1Ev>
}
   b51da:	4650      	mov	r0, sl
   b51dc:	b003      	add	sp, #12
   b51de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b51e2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b51e4:	bf08      	it	eq
   b51e6:	f041 0102 	orreq.w	r1, r1, #2
   b51ea:	e7ed      	b.n	b51c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b51ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b51ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b51ee:	9c08      	ldr	r4, [sp, #32]
   b51f0:	9403      	str	r4, [sp, #12]
   b51f2:	2400      	movs	r4, #0
   b51f4:	9402      	str	r4, [sp, #8]
   b51f6:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b51fa:	9401      	str	r4, [sp, #4]
   b51fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b5200:	9400      	str	r4, [sp, #0]
   b5202:	f7ff ff87 	bl	b5114 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b5206:	b004      	add	sp, #16
   b5208:	bd10      	pop	{r4, pc}

000b520a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b520a:	b530      	push	{r4, r5, lr}
   b520c:	b087      	sub	sp, #28
   b520e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5210:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b5212:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5214:	9204      	str	r2, [sp, #16]
   b5216:	f005 fb18 	bl	ba84a <strlen>
   b521a:	2500      	movs	r5, #0
   b521c:	4603      	mov	r3, r0
   b521e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5222:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b5226:	9500      	str	r5, [sp, #0]
   b5228:	4620      	mov	r0, r4
   b522a:	f7ff ffdf 	bl	b51ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b522e:	b007      	add	sp, #28
   b5230:	bd30      	pop	{r4, r5, pc}

000b5232 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b5232:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5234:	4604      	mov	r4, r0
   b5236:	460e      	mov	r6, r1
    if (isConnected()) {
   b5238:	f7ff fe57 	bl	b4eea <_ZN4MQTT11isConnectedEv>
   b523c:	4605      	mov	r5, r0
   b523e:	b1c8      	cbz	r0, b5274 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5240:	4621      	mov	r1, r4
   b5242:	a801      	add	r0, sp, #4
   b5244:	f7ff fd14 	bl	b4c70 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5248:	69e3      	ldr	r3, [r4, #28]
   b524a:	2262      	movs	r2, #98	; 0x62
   b524c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b524e:	69e3      	ldr	r3, [r4, #28]
   b5250:	2202      	movs	r2, #2
   b5252:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5254:	69e3      	ldr	r3, [r4, #28]
   b5256:	0a32      	lsrs	r2, r6, #8
   b5258:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b525a:	69e3      	ldr	r3, [r4, #28]
   b525c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b525e:	69e1      	ldr	r1, [r4, #28]
   b5260:	2204      	movs	r2, #4
   b5262:	4620      	mov	r0, r4
   b5264:	f003 fffd 	bl	b9262 <_ZN9TCPClient5writeEPKhj>
   b5268:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b526a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b526c:	bf18      	it	ne
   b526e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5270:	f7ff fd09 	bl	b4c86 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5274:	4628      	mov	r0, r5
   b5276:	b002      	add	sp, #8
   b5278:	bd70      	pop	{r4, r5, r6, pc}

000b527a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b527a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b527c:	4604      	mov	r4, r0
   b527e:	460e      	mov	r6, r1
    if (isConnected()) {
   b5280:	f7ff fe33 	bl	b4eea <_ZN4MQTT11isConnectedEv>
   b5284:	4605      	mov	r5, r0
   b5286:	b1c8      	cbz	r0, b52bc <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5288:	4621      	mov	r1, r4
   b528a:	a801      	add	r0, sp, #4
   b528c:	f7ff fcf0 	bl	b4c70 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5290:	69e3      	ldr	r3, [r4, #28]
   b5292:	2272      	movs	r2, #114	; 0x72
   b5294:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5296:	69e3      	ldr	r3, [r4, #28]
   b5298:	2202      	movs	r2, #2
   b529a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b529c:	69e3      	ldr	r3, [r4, #28]
   b529e:	0a32      	lsrs	r2, r6, #8
   b52a0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b52a2:	69e3      	ldr	r3, [r4, #28]
   b52a4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b52a6:	69e1      	ldr	r1, [r4, #28]
   b52a8:	2204      	movs	r2, #4
   b52aa:	4620      	mov	r0, r4
   b52ac:	f003 ffd9 	bl	b9262 <_ZN9TCPClient5writeEPKhj>
   b52b0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b52b2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b52b4:	bf18      	it	ne
   b52b6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b52b8:	f7ff fce5 	bl	b4c86 <_ZN4MQTT11MutexLockerD1Ev>
}
   b52bc:	4628      	mov	r0, r5
   b52be:	b002      	add	sp, #8
   b52c0:	bd70      	pop	{r4, r5, r6, pc}

000b52c2 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b52c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52c6:	ed2d 8b02 	vpush	{d8}
   b52ca:	b087      	sub	sp, #28
   b52cc:	af00      	add	r7, sp, #0
   b52ce:	4604      	mov	r4, r0
    if (isConnected()) {
   b52d0:	f7ff fe0b 	bl	b4eea <_ZN4MQTT11isConnectedEv>
   b52d4:	4681      	mov	r9, r0
   b52d6:	b1f8      	cbz	r0, b5318 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b52d8:	4621      	mov	r1, r4
   b52da:	f107 0014 	add.w	r0, r7, #20
   b52de:	f7ff fcc7 	bl	b4c70 <_ZN4MQTT11MutexLockerC1EPS_>
   b52e2:	f000 feaf 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b52e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b52e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b52ec:	4353      	muls	r3, r2
   b52ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b52f0:	1a82      	subs	r2, r0, r2
   b52f2:	429a      	cmp	r2, r3
   b52f4:	4606      	mov	r6, r0
   b52f6:	d803      	bhi.n	b5300 <_ZN4MQTT4loopEv+0x3e>
   b52f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b52fa:	1a82      	subs	r2, r0, r2
   b52fc:	4293      	cmp	r3, r2
   b52fe:	d221      	bcs.n	b5344 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5300:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5304:	b17b      	cbz	r3, b5326 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5306:	4620      	mov	r0, r4
   b5308:	f004 fa0c 	bl	b9724 <_ZN9TCPClient4stopEv>
                return false;
   b530c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5310:	f107 0014 	add.w	r0, r7, #20
   b5314:	f7ff fcb7 	bl	b4c86 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5318:	4648      	mov	r0, r9
   b531a:	371c      	adds	r7, #28
   b531c:	46bd      	mov	sp, r7
   b531e:	ecbd 8b02 	vpop	{d8}
   b5322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5326:	69e2      	ldr	r2, [r4, #28]
   b5328:	21c0      	movs	r1, #192	; 0xc0
   b532a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b532c:	69e2      	ldr	r2, [r4, #28]
   b532e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5330:	69e1      	ldr	r1, [r4, #28]
   b5332:	2202      	movs	r2, #2
   b5334:	4620      	mov	r0, r4
   b5336:	f003 ff94 	bl	b9262 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b533a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b533e:	2301      	movs	r3, #1
   b5340:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5344:	4620      	mov	r0, r4
   b5346:	f004 f993 	bl	b9670 <_ZN9TCPClient9availableEv>
   b534a:	2800      	cmp	r0, #0
   b534c:	d0e0      	beq.n	b5310 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b534e:	f107 0113 	add.w	r1, r7, #19
   b5352:	4620      	mov	r0, r4
   b5354:	f7ff fd02 	bl	b4d5c <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5358:	4683      	mov	fp, r0
   b535a:	2800      	cmp	r0, #0
   b535c:	d0d8      	beq.n	b5310 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b535e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5360:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5362:	7819      	ldrb	r1, [r3, #0]
   b5364:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5368:	2a30      	cmp	r2, #48	; 0x30
   b536a:	d17f      	bne.n	b546c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b536c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5370:	f1ba 0f00 	cmp.w	sl, #0
   b5374:	d0cc      	beq.n	b5310 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5376:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b537a:	466a      	mov	r2, sp
   b537c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5380:	eb03 020c 	add.w	r2, r3, ip
   b5384:	7851      	ldrb	r1, [r2, #1]
   b5386:	7895      	ldrb	r5, [r2, #2]
   b5388:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b538c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b538e:	f105 0208 	add.w	r2, r5, #8
   b5392:	4669      	mov	r1, sp
   b5394:	08d2      	lsrs	r2, r2, #3
   b5396:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b539a:	4695      	mov	sp, r2
   b539c:	f10c 0203 	add.w	r2, ip, #3
   b53a0:	60fa      	str	r2, [r7, #12]
   b53a2:	eb03 0e02 	add.w	lr, r3, r2
   b53a6:	eb0d 0205 	add.w	r2, sp, r5
   b53aa:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b53ac:	f8c7 d008 	str.w	sp, [r7, #8]
   b53b0:	607a      	str	r2, [r7, #4]
   b53b2:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b53b6:	428a      	cmp	r2, r1
   b53b8:	d006      	beq.n	b53c8 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b53ba:	460a      	mov	r2, r1
   b53bc:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b53c0:	f802 8b01 	strb.w	r8, [r2], #1
   b53c4:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b53c6:	e7f4      	b.n	b53b2 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b53c8:	2200      	movs	r2, #0
   b53ca:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b53cc:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53d0:	68f9      	ldr	r1, [r7, #12]
   b53d2:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b53d6:	ebab 020c 	sub.w	r2, fp, ip
   b53da:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b53dc:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b53e0:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53e4:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b53e6:	d125      	bne.n	b5434 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53e8:	f813 e001 	ldrb.w	lr, [r3, r1]
   b53ec:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b53ee:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53f0:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b53f4:	f10c 0105 	add.w	r1, ip, #5
   b53f8:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b53fa:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53fc:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5400:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5402:	69e3      	ldr	r3, [r4, #28]
   b5404:	2240      	movs	r2, #64	; 0x40
   b5406:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5408:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b540a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b540e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5412:	69e3      	ldr	r3, [r4, #28]
   b5414:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5418:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b541a:	69e3      	ldr	r3, [r4, #28]
   b541c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5420:	69e1      	ldr	r1, [r4, #28]
   b5422:	2204      	movs	r2, #4
   b5424:	4620      	mov	r0, r4
   b5426:	f003 ff1c 	bl	b9262 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b542a:	6266      	str	r6, [r4, #36]	; 0x24
   b542c:	ee18 3a10 	vmov	r3, s16
   b5430:	469d      	mov	sp, r3
   b5432:	e76d      	b.n	b5310 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5434:	f1b8 0f04 	cmp.w	r8, #4
   b5438:	d115      	bne.n	b5466 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b543a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b543e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5440:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5442:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5446:	f10c 0105 	add.w	r1, ip, #5
   b544a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b544c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b544e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5452:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5454:	69e3      	ldr	r3, [r4, #28]
   b5456:	2250      	movs	r2, #80	; 0x50
   b5458:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b545a:	69e3      	ldr	r3, [r4, #28]
   b545c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b545e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5462:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5464:	e7d5      	b.n	b5412 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5466:	4419      	add	r1, r3
   b5468:	47d0      	blx	sl
   b546a:	e7df      	b.n	b542c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b546c:	2a50      	cmp	r2, #80	; 0x50
   b546e:	d108      	bne.n	b5482 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5470:	789a      	ldrb	r2, [r3, #2]
   b5472:	78d9      	ldrb	r1, [r3, #3]
   b5474:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5478:	b289      	uxth	r1, r1
   b547a:	4620      	mov	r0, r4
   b547c:	f7ff fed9 	bl	b5232 <_ZN4MQTT14publishReleaseEt>
   b5480:	e746      	b.n	b5310 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5482:	2a40      	cmp	r2, #64	; 0x40
   b5484:	d112      	bne.n	b54ac <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5486:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5488:	2a00      	cmp	r2, #0
   b548a:	f43f af41 	beq.w	b5310 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b548e:	f1bb 0f04 	cmp.w	fp, #4
   b5492:	f47f af3d 	bne.w	b5310 <_ZN4MQTT4loopEv+0x4e>
   b5496:	f011 0f06 	tst.w	r1, #6
   b549a:	f47f af39 	bne.w	b5310 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b549e:	7899      	ldrb	r1, [r3, #2]
   b54a0:	78d8      	ldrb	r0, [r3, #3]
   b54a2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b54a6:	b280      	uxth	r0, r0
   b54a8:	4790      	blx	r2
   b54aa:	e731      	b.n	b5310 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b54ac:	2a60      	cmp	r2, #96	; 0x60
   b54ae:	d108      	bne.n	b54c2 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b54b0:	789a      	ldrb	r2, [r3, #2]
   b54b2:	78d9      	ldrb	r1, [r3, #3]
   b54b4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b54b8:	b289      	uxth	r1, r1
   b54ba:	4620      	mov	r0, r4
   b54bc:	f7ff fedd 	bl	b527a <_ZN4MQTT15publishCompleteEt>
   b54c0:	e726      	b.n	b5310 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b54c2:	2a70      	cmp	r2, #112	; 0x70
   b54c4:	d0df      	beq.n	b5486 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b54c6:	2a90      	cmp	r2, #144	; 0x90
   b54c8:	f43f af22 	beq.w	b5310 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b54cc:	2ac0      	cmp	r2, #192	; 0xc0
   b54ce:	d10a      	bne.n	b54e6 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b54d0:	22d0      	movs	r2, #208	; 0xd0
   b54d2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b54d4:	69e3      	ldr	r3, [r4, #28]
   b54d6:	2200      	movs	r2, #0
   b54d8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b54da:	69e1      	ldr	r1, [r4, #28]
   b54dc:	2202      	movs	r2, #2
   b54de:	4620      	mov	r0, r4
   b54e0:	f003 febf 	bl	b9262 <_ZN9TCPClient5writeEPKhj>
   b54e4:	e714      	b.n	b5310 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b54e6:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b54e8:	bf04      	itt	eq
   b54ea:	2300      	moveq	r3, #0
   b54ec:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b54f0:	e70e      	b.n	b5310 <_ZN4MQTT4loopEv+0x4e>

000b54f2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b54f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b54f4:	4604      	mov	r4, r0
   b54f6:	460f      	mov	r7, r1
   b54f8:	4616      	mov	r6, r2
    if (isConnected()) {
   b54fa:	f7ff fcf6 	bl	b4eea <_ZN4MQTT11isConnectedEv>
   b54fe:	4605      	mov	r5, r0
   b5500:	b310      	cbz	r0, b5548 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5502:	4621      	mov	r1, r4
   b5504:	a801      	add	r0, sp, #4
   b5506:	f7ff fbb3 	bl	b4c70 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b550a:	8c23      	ldrh	r3, [r4, #32]
   b550c:	3301      	adds	r3, #1
   b550e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5510:	b1eb      	cbz	r3, b554e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5512:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5514:	8c23      	ldrh	r3, [r4, #32]
   b5516:	69e2      	ldr	r2, [r4, #28]
   b5518:	0a1b      	lsrs	r3, r3, #8
   b551a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b551c:	69e3      	ldr	r3, [r4, #28]
   b551e:	8c22      	ldrh	r2, [r4, #32]
   b5520:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5522:	69e2      	ldr	r2, [r4, #28]
   b5524:	2307      	movs	r3, #7
   b5526:	4639      	mov	r1, r7
   b5528:	4620      	mov	r0, r4
   b552a:	f7ff fcc2 	bl	b4eb2 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b552e:	69e3      	ldr	r3, [r4, #28]
   b5530:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5532:	3804      	subs	r0, #4
   b5534:	b283      	uxth	r3, r0
   b5536:	69e2      	ldr	r2, [r4, #28]
   b5538:	2182      	movs	r1, #130	; 0x82
   b553a:	4620      	mov	r0, r4
   b553c:	f7ff fc60 	bl	b4e00 <_ZN4MQTT5writeEhPht>
   b5540:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5542:	a801      	add	r0, sp, #4
   b5544:	f7ff fb9f 	bl	b4c86 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5548:	4628      	mov	r0, r5
   b554a:	b003      	add	sp, #12
   b554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b554e:	2301      	movs	r3, #1
   b5550:	e7df      	b.n	b5512 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5552 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5552:	2200      	movs	r2, #0
   b5554:	f7ff bfcd 	b.w	b54f2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5558 <_ZN12mDNSResolver5QueryC1EPKc>:
#include "Query.h"

namespace mDNSResolver {
  Query::Query(const char* name) {
    this->name = name;
   b5558:	6001      	str	r1, [r0, #0]
  }
   b555a:	4770      	bx	lr

000b555c <_ZN12mDNSResolver5QueryD1Ev>:

  Query::~Query() {}
   b555c:	4770      	bx	lr

000b555e <_ZN12mDNSResolver5Query12buildDNSNameEPhj>:
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
    buffer[bufferIndex++] = qclass & 0xFF;
  }

  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
    int wordstart = 0, wordend = 0;
   b555e:	2300      	movs	r3, #0
  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
   b5560:	b5f0      	push	{r4, r5, r6, r7, lr}
    int wordstart = 0, wordend = 0;
   b5562:	461c      	mov	r4, r3

    do {
      if(this->name[wordend] == '.' || this->name[wordend] == '\0') {
   b5564:	6805      	ldr	r5, [r0, #0]
   b5566:	5ced      	ldrb	r5, [r5, r3]
   b5568:	2d2e      	cmp	r5, #46	; 0x2e
   b556a:	d000      	beq.n	b556e <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x10>
   b556c:	b9bd      	cbnz	r5, b559e <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x40>
        const int wordlen = wordend - wordstart;
   b556e:	1b1d      	subs	r5, r3, r4
        buffer[bufferIndex++] = (unsigned char)wordlen;
   b5570:	548d      	strb	r5, [r1, r2]
   b5572:	f102 0c01 	add.w	ip, r2, #1

        for(int i = wordstart; i < wordend; i++) {
   b5576:	4626      	mov	r6, r4
   b5578:	440a      	add	r2, r1
   b557a:	42b3      	cmp	r3, r6
          buffer[bufferIndex++] = this->name[i];
   b557c:	6807      	ldr	r7, [r0, #0]
        for(int i = wordstart; i < wordend; i++) {
   b557e:	dd04      	ble.n	b558a <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x2c>
          buffer[bufferIndex++] = this->name[i];
   b5580:	5dbf      	ldrb	r7, [r7, r6]
   b5582:	f802 7f01 	strb.w	r7, [r2, #1]!
        for(int i = wordstart; i < wordend; i++) {
   b5586:	3601      	adds	r6, #1
   b5588:	e7f7      	b.n	b557a <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x1c>
   b558a:	429c      	cmp	r4, r3
   b558c:	bfc8      	it	gt
   b558e:	2500      	movgt	r5, #0
        }

        if(this->name[wordend] == '.') {
   b5590:	5cfc      	ldrb	r4, [r7, r3]
   b5592:	2c2e      	cmp	r4, #46	; 0x2e
          wordend++;
   b5594:	bf08      	it	eq
   b5596:	3301      	addeq	r3, #1
   b5598:	eb05 020c 	add.w	r2, r5, ip
        if(this->name[wordend] == '.') {
   b559c:	461c      	mov	r4, r3
        }
        wordstart = wordend;
      }

      wordend++;
    } while(this->name[wordstart] != '\0');
   b559e:	6805      	ldr	r5, [r0, #0]
   b55a0:	5d2d      	ldrb	r5, [r5, r4]
      wordend++;
   b55a2:	3301      	adds	r3, #1
    } while(this->name[wordstart] != '\0');
   b55a4:	2d00      	cmp	r5, #0
   b55a6:	d1dd      	bne.n	b5564 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x6>

    return bufferIndex;
  }
   b55a8:	4610      	mov	r0, r2
   b55aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b55ac <_ZN12mDNSResolver5Query14assemblePacketEPhi>:
  void Query::assemblePacket(unsigned char *buffer, int bufferLength) {
   b55ac:	b538      	push	{r3, r4, r5, lr}
   b55ae:	460b      	mov	r3, r1
   b55b0:	4605      	mov	r5, r0
      buffer[i] = 0;
   b55b2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   b55b6:	4618      	mov	r0, r3
   b55b8:	2100      	movs	r1, #0
   b55ba:	f005 f8d0 	bl	ba75e <memset>
    buffer[5] = 0x01;
   b55be:	2401      	movs	r4, #1
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b55c0:	4601      	mov	r1, r0
    buffer[5] = 0x01;
   b55c2:	7144      	strb	r4, [r0, #5]
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b55c4:	220c      	movs	r2, #12
   b55c6:	4628      	mov	r0, r5
   b55c8:	f7ff ffc9 	bl	b555e <_ZN12mDNSResolver5Query12buildDNSNameEPhj>
    buffer[bufferIndex++] = '\0';
   b55cc:	2300      	movs	r3, #0
   b55ce:	540b      	strb	r3, [r1, r0]
    buffer[bufferIndex++] = (qtype & 0xFF00) >> 8;
   b55d0:	4401      	add	r1, r0
   b55d2:	704b      	strb	r3, [r1, #1]
    buffer[bufferIndex++] = qtype & 0xFF;
   b55d4:	708c      	strb	r4, [r1, #2]
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
   b55d6:	70cb      	strb	r3, [r1, #3]
    buffer[bufferIndex++] = qclass & 0xFF;
   b55d8:	710c      	strb	r4, [r1, #4]
  }
   b55da:	bd38      	pop	{r3, r4, r5, pc}

000b55dc <_ZN12mDNSResolver5Query10sendPacketER3UDP>:
  void Query::sendPacket(UDP& socket) {
   b55dc:	b5b0      	push	{r4, r5, r7, lr}
   b55de:	b082      	sub	sp, #8
   b55e0:	4605      	mov	r5, r0
   b55e2:	af00      	add	r7, sp, #0
    int bufferLength = strlen(this->name) + 18;
   b55e4:	6800      	ldr	r0, [r0, #0]
  void Query::sendPacket(UDP& socket) {
   b55e6:	460c      	mov	r4, r1
    int bufferLength = strlen(this->name) + 18;
   b55e8:	f005 f92f 	bl	ba84a <strlen>
    unsigned char buffer[bufferLength];
   b55ec:	f100 0319 	add.w	r3, r0, #25
   b55f0:	f023 0307 	bic.w	r3, r3, #7
   b55f4:	ebad 0d03 	sub.w	sp, sp, r3
    int bufferLength = strlen(this->name) + 18;
   b55f8:	f100 0212 	add.w	r2, r0, #18
    assemblePacket(buffer, bufferLength);
   b55fc:	4669      	mov	r1, sp
   b55fe:	4628      	mov	r0, r5
   b5600:	607a      	str	r2, [r7, #4]
   b5602:	f7ff ffd3 	bl	b55ac <_ZN12mDNSResolver5Query14assemblePacketEPhi>
    socket.write(buffer, bufferLength);
   b5606:	6823      	ldr	r3, [r4, #0]
   b5608:	687a      	ldr	r2, [r7, #4]
   b560a:	68db      	ldr	r3, [r3, #12]
   b560c:	4669      	mov	r1, sp
   b560e:	4620      	mov	r0, r4
   b5610:	4798      	blx	r3
	socket.endPacket();
   b5612:	6823      	ldr	r3, [r4, #0]
   b5614:	4620      	mov	r0, r4
   b5616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5618:	4798      	blx	r3
  }
   b561a:	3708      	adds	r7, #8
   b561c:	46bd      	mov	sp, r7
   b561e:	bdb0      	pop	{r4, r5, r7, pc}

000b5620 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>:
    resolveCnames(cache);

    return answerResult;
  }

  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b5620:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5622:	b089      	sub	sp, #36	; 0x24
   b5624:	461c      	mov	r4, r3
   b5626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if(dataLen == 4) {
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5628:	6816      	ldr	r6, [r2, #0]
    if(dataLen == 4) {
   b562a:	2b04      	cmp	r3, #4
  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b562c:	4615      	mov	r5, r2
    if(dataLen == 4) {
   b562e:	d11f      	bne.n	b5670 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x50>
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5630:	1c72      	adds	r2, r6, #1
   b5632:	602a      	str	r2, [r5, #0]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5634:	1cb3      	adds	r3, r6, #2
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5636:	5d81      	ldrb	r1, [r0, r6]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5638:	602b      	str	r3, [r5, #0]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b563a:	1cf7      	adds	r7, r6, #3
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b563c:	5c82      	ldrb	r2, [r0, r2]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b563e:	602f      	str	r7, [r5, #0]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5640:	3604      	adds	r6, #4
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5642:	5cc3      	ldrb	r3, [r0, r3]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5644:	602e      	str	r6, [r5, #0]

      response.resolved = true;
   b5646:	2501      	movs	r5, #1
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5648:	5dc0      	ldrb	r0, [r0, r7]
      response.resolved = true;
   b564a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
      response.ttl = ttl;
   b564e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b5650:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
      response.ipAddress = IPAddress(a, b, c, d);
   b5654:	9000      	str	r0, [sp, #0]
class IPAddress : public Printable {
   b5656:	ad03      	add	r5, sp, #12
   b5658:	a802      	add	r0, sp, #8
   b565a:	f003 fc89 	bl	b8f70 <_ZN9IPAddressC1Ehhhh>
   b565e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5660:	f504 7486 	add.w	r4, r4, #268	; 0x10c
   b5664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5666:	682b      	ldr	r3, [r5, #0]
   b5668:	7023      	strb	r3, [r4, #0]
    } else {
      (*offset) += dataLen;
    }

    return E_MDNS_OK;
  }
   b566a:	2020      	movs	r0, #32
   b566c:	b009      	add	sp, #36	; 0x24
   b566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*offset) += dataLen;
   b5670:	4433      	add	r3, r6
   b5672:	6013      	str	r3, [r2, #0]
   b5674:	e7f9      	b.n	b566a <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x4a>

000b5676 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>:

    free(assembled);
    return E_MDNS_OK;
  }

  MDNS_RESULT Answer::parseName(char** name, const char* mapped, unsigned int len) {
   b5676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned int namePointer = 0;
    unsigned int mapPointer = 0;
   b567a:	2500      	movs	r5, #0
    unsigned int namePointer = 0;
   b567c:	462b      	mov	r3, r5

      if(labelLength > 0x3f) {
        return E_MDNS_INVALID_LABEL_LENGTH;
      }

      if(namePointer + labelLength > len - 1) {
   b567e:	f102 3eff 	add.w	lr, r2, #4294967295
        return E_MDNS_PACKET_ERROR;
      }

      if(namePointer != 0) {
        (*name)[namePointer++] = '.';
   b5682:	f04f 082e 	mov.w	r8, #46	; 0x2e
    while(mapPointer < len) {
   b5686:	4295      	cmp	r5, r2
   b5688:	d21d      	bcs.n	b56c6 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x50>
      int labelLength = mapped[mapPointer++];
   b568a:	5d4c      	ldrb	r4, [r1, r5]
      if(labelLength > 0x3f) {
   b568c:	2c3f      	cmp	r4, #63	; 0x3f
      int labelLength = mapped[mapPointer++];
   b568e:	eb01 0705 	add.w	r7, r1, r5
      if(labelLength > 0x3f) {
   b5692:	dc20      	bgt.n	b56d6 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x60>
      if(namePointer + labelLength > len - 1) {
   b5694:	18e6      	adds	r6, r4, r3
   b5696:	4576      	cmp	r6, lr
   b5698:	d81f      	bhi.n	b56da <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x64>
      if(namePointer != 0) {
   b569a:	b11b      	cbz	r3, b56a4 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x2e>
        (*name)[namePointer++] = '.';
   b569c:	6806      	ldr	r6, [r0, #0]
   b569e:	f806 8003 	strb.w	r8, [r6, r3]
   b56a2:	3301      	adds	r3, #1
   b56a4:	46ba      	mov	sl, r7
   b56a6:	2600      	movs	r6, #0
      }

      for(int i = 0; i < labelLength; i++) {
   b56a8:	42a6      	cmp	r6, r4
   b56aa:	eb06 0c03 	add.w	ip, r6, r3
   b56ae:	db03      	blt.n	b56b8 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x42>
   b56b0:	4423      	add	r3, r4
   b56b2:	3401      	adds	r4, #1
   b56b4:	4425      	add	r5, r4
   b56b6:	e7e6      	b.n	b5686 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x10>
        (*name)[namePointer++] = mapped[mapPointer++];
   b56b8:	6807      	ldr	r7, [r0, #0]
   b56ba:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
   b56be:	f807 900c 	strb.w	r9, [r7, ip]
      for(int i = 0; i < labelLength; i++) {
   b56c2:	3601      	adds	r6, #1
   b56c4:	e7f0      	b.n	b56a8 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x32>
      }
    }

    (*name)[len - 1] = '\0';
   b56c6:	6803      	ldr	r3, [r0, #0]
   b56c8:	441a      	add	r2, r3
   b56ca:	2300      	movs	r3, #0
   b56cc:	f802 3c01 	strb.w	r3, [r2, #-1]

    return E_MDNS_OK;
   b56d0:	2020      	movs	r0, #32
  }
   b56d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return E_MDNS_INVALID_LABEL_LENGTH;
   b56d6:	2026      	movs	r0, #38	; 0x26
   b56d8:	e7fb      	b.n	b56d2 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>
        return E_MDNS_PACKET_ERROR;
   b56da:	2023      	movs	r0, #35	; 0x23
   b56dc:	e7f9      	b.n	b56d2 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>

000b56de <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name, unsigned int maxlen) {
   b56de:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b56e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    unsigned int index = 0;
   b56e4:	2500      	movs	r5, #0
    unsigned int nameLength = 0;

    while(index < maxlen) {
   b56e6:	42a5      	cmp	r5, r4
   b56e8:	d025      	beq.n	b5736 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b56ea:	6816      	ldr	r6, [r2, #0]
   b56ec:	f810 8006 	ldrb.w	r8, [r0, r6]
   b56f0:	f008 0cc0 	and.w	ip, r8, #192	; 0xc0
   b56f4:	f1bc 0fc0 	cmp.w	ip, #192	; 0xc0
   b56f8:	eb00 0e06 	add.w	lr, r0, r6
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b56fc:	f106 0701 	add.w	r7, r6, #1
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b5700:	d120      	bne.n	b5744 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x66>
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5702:	6017      	str	r7, [r2, #0]
   b5704:	f89e 4000 	ldrb.w	r4, [lr]
   b5708:	3602      	adds	r6, #2
   b570a:	6016      	str	r6, [r2, #0]
   b570c:	5dc2      	ldrb	r2, [r0, r7]
   b570e:	0224      	lsls	r4, r4, #8
   b5710:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
   b5714:	4414      	add	r4, r2
        if(pointerOffset > len) {
   b5716:	428c      	cmp	r4, r1
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5718:	9402      	str	r4, [sp, #8]
        if(pointerOffset > len) {
   b571a:	d80e      	bhi.n	b573a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x5c>
          // Points to somewhere beyond the packet
          return -1 * E_MDNS_POINTER_OVERFLOW;
        }

        char *namePointer = *name + nameLength;
   b571c:	681b      	ldr	r3, [r3, #0]
   b571e:	442b      	add	r3, r5
   b5720:	9303      	str	r3, [sp, #12]
        int pointerLen = assembleName(buffer, len, &pointerOffset, &namePointer, MDNS_MAX_NAME_LEN - nameLength);
   b5722:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
   b5726:	9300      	str	r3, [sp, #0]
   b5728:	aa02      	add	r2, sp, #8
   b572a:	ab03      	add	r3, sp, #12
   b572c:	f7ff ffd7 	bl	b56de <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>

        if(pointerLen < 0) {
   b5730:	2800      	cmp	r0, #0
   b5732:	db04      	blt.n	b573e <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return pointerLen;
        }

        nameLength += pointerLen;
   b5734:	1944      	adds	r4, r0, r5
        (*name)[nameLength++] = buffer[(*offset)++];
      }
      index++;
    }

    return nameLength;
   b5736:	4620      	mov	r0, r4
   b5738:	e001      	b.n	b573e <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return -1 * E_MDNS_POINTER_OVERFLOW;
   b573a:	f06f 0021 	mvn.w	r0, #33	; 0x21
  }
   b573e:	b004      	add	sp, #16
   b5740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (*name)[nameLength++] = buffer[(*offset)++];
   b5744:	f105 0c01 	add.w	ip, r5, #1
   b5748:	6017      	str	r7, [r2, #0]
      } else if(buffer[*offset] == '\0') {
   b574a:	f1b8 0f00 	cmp.w	r8, #0
   b574e:	d105      	bne.n	b575c <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x7e>
        (*name)[nameLength++] = buffer[(*offset)++];
   b5750:	681b      	ldr	r3, [r3, #0]
   b5752:	f89e 2000 	ldrb.w	r2, [lr]
   b5756:	555a      	strb	r2, [r3, r5]
   b5758:	4664      	mov	r4, ip
        break;
   b575a:	e7ec      	b.n	b5736 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
        (*name)[nameLength++] = buffer[(*offset)++];
   b575c:	5d87      	ldrb	r7, [r0, r6]
   b575e:	681e      	ldr	r6, [r3, #0]
   b5760:	5577      	strb	r7, [r6, r5]
        (*name)[nameLength++] = buffer[(*offset)++];
   b5762:	4665      	mov	r5, ip
    while(index < maxlen) {
   b5764:	e7bf      	b.n	b56e6 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x8>

000b5766 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name) {
   b5766:	b513      	push	{r0, r1, r4, lr}
    return assembleName(buffer, len, offset, name, MDNS_MAX_NAME_LEN);
   b5768:	24ff      	movs	r4, #255	; 0xff
   b576a:	9400      	str	r4, [sp, #0]
   b576c:	f7ff ffb7 	bl	b56de <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
  }
   b5770:	b002      	add	sp, #8
   b5772:	bd10      	pop	{r4, pc}

000b5774 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>:
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b5774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5778:	4605      	mov	r5, r0
   b577a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b577e:	20ff      	movs	r0, #255	; 0xff
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b5780:	4688      	mov	r8, r1
   b5782:	4614      	mov	r4, r2
   b5784:	461e      	mov	r6, r3
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b5786:	f000 ff2b 	bl	b65e0 <malloc>
   b578a:	9004      	str	r0, [sp, #16]
    if(assembled == NULL) {
   b578c:	b1b8      	cbz	r0, b57be <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4a>
    int nameLen = Answer::assembleName(buffer, len, offset, &assembled);
   b578e:	ab04      	add	r3, sp, #16
   b5790:	4622      	mov	r2, r4
   b5792:	4641      	mov	r1, r8
   b5794:	4628      	mov	r0, r5
   b5796:	f7ff ffe6 	bl	b5766 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>
    if(nameLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b579a:	f110 0f22 	cmn.w	r0, #34	; 0x22
   b579e:	d107      	bne.n	b57b0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x3c>
        free(assembled);
   b57a0:	9804      	ldr	r0, [sp, #16]
   b57a2:	f000 ff25 	bl	b65f0 <free>
        return -1 * dataLen;
   b57a6:	2022      	movs	r0, #34	; 0x22
  }
   b57a8:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   b57ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    char *name = (char *)malloc(sizeof(char) * nameLen);
   b57b0:	f000 ff16 	bl	b65e0 <malloc>
   b57b4:	9005      	str	r0, [sp, #20]
    if(name == NULL) {
   b57b6:	b920      	cbnz	r0, b57c2 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4e>
      free(assembled);
   b57b8:	9804      	ldr	r0, [sp, #16]
   b57ba:	f000 ff19 	bl	b65f0 <free>
      return E_MDNS_OUT_OF_MEMORY;
   b57be:	2027      	movs	r0, #39	; 0x27
   b57c0:	e7f2      	b.n	b57a8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    parseName(&name, assembled, strlen(assembled));
   b57c2:	9904      	ldr	r1, [sp, #16]
   b57c4:	9103      	str	r1, [sp, #12]
   b57c6:	4608      	mov	r0, r1
   b57c8:	f005 f83f 	bl	ba84a <strlen>
   b57cc:	9903      	ldr	r1, [sp, #12]
   b57ce:	4602      	mov	r2, r0
   b57d0:	a805      	add	r0, sp, #20
   b57d2:	f7ff ff50 	bl	b5676 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
    int cacheIndex = cache.search(name);
   b57d6:	9905      	ldr	r1, [sp, #20]
   b57d8:	4630      	mov	r0, r6
   b57da:	f000 f987 	bl	b5aec <_ZN12mDNSResolver5Cache6searchEPKc>
   b57de:	4607      	mov	r7, r0
    free(name);
   b57e0:	9805      	ldr	r0, [sp, #20]
   b57e2:	f000 ff05 	bl	b65f0 <free>
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b57e6:	6822      	ldr	r2, [r4, #0]
   b57e8:	1c53      	adds	r3, r2, #1
   b57ea:	6023      	str	r3, [r4, #0]
   b57ec:	1c91      	adds	r1, r2, #2
   b57ee:	5ca8      	ldrb	r0, [r5, r2]
   b57f0:	6021      	str	r1, [r4, #0]
   b57f2:	5ce9      	ldrb	r1, [r5, r3]
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b57f4:	1d53      	adds	r3, r2, #5
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b57f6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b57fa:	18a8      	adds	r0, r5, r2
   b57fc:	6023      	str	r3, [r4, #0]
   b57fe:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5802:	1d90      	adds	r0, r2, #6
   b5804:	6020      	str	r0, [r4, #0]
   b5806:	5ceb      	ldrb	r3, [r5, r3]
   b5808:	041b      	lsls	r3, r3, #16
   b580a:	eb03 630c 	add.w	r3, r3, ip, lsl #24
   b580e:	f102 0c07 	add.w	ip, r2, #7
   b5812:	f8c4 c000 	str.w	ip, [r4]
   b5816:	5c28      	ldrb	r0, [r5, r0]
   b5818:	eb03 2300 	add.w	r3, r3, r0, lsl #8
   b581c:	f102 0008 	add.w	r0, r2, #8
   b5820:	6020      	str	r0, [r4, #0]
   b5822:	f815 900c 	ldrb.w	r9, [r5, ip]
   b5826:	4499      	add	r9, r3
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5828:	f102 0309 	add.w	r3, r2, #9
   b582c:	6023      	str	r3, [r4, #0]
   b582e:	320a      	adds	r2, #10
   b5830:	5c28      	ldrb	r0, [r5, r0]
   b5832:	6022      	str	r2, [r4, #0]
   b5834:	f815 a003 	ldrb.w	sl, [r5, r3]
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b5838:	2901      	cmp	r1, #1
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b583a:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b583e:	d112      	bne.n	b5866 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xf2>
   b5840:	1c78      	adds	r0, r7, #1
   b5842:	d077      	beq.n	b5934 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      resolveAName(buffer, len, offset, cache[cacheIndex], ttl, dataLen);
   b5844:	4639      	mov	r1, r7
   b5846:	4630      	mov	r0, r6
   b5848:	f000 f94b 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b584c:	e9cd 9a00 	strd	r9, sl, [sp]
   b5850:	4603      	mov	r3, r0
   b5852:	4622      	mov	r2, r4
   b5854:	4641      	mov	r1, r8
   b5856:	4628      	mov	r0, r5
   b5858:	f7ff fee2 	bl	b5620 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>
    free(assembled);
   b585c:	9804      	ldr	r0, [sp, #16]
   b585e:	f000 fec7 	bl	b65f0 <free>
    return E_MDNS_OK;
   b5862:	2020      	movs	r0, #32
   b5864:	e7a0      	b.n	b57a8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    } else if(type == MDNS_CNAME_RECORD && cacheIndex != -1) {
   b5866:	2905      	cmp	r1, #5
   b5868:	d164      	bne.n	b5934 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
   b586a:	1c79      	adds	r1, r7, #1
   b586c:	d062      	beq.n	b5934 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      cache[cacheIndex].resolved = false;
   b586e:	4639      	mov	r1, r7
   b5870:	4630      	mov	r0, r6
   b5872:	f000 f936 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b5876:	2300      	movs	r3, #0
   b5878:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
      cache[cacheIndex].ttl = ttl;
   b587c:	4639      	mov	r1, r7
   b587e:	4630      	mov	r0, r6
   b5880:	f000 f92f 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b5884:	f8c0 9100 	str.w	r9, [r0, #256]	; 0x100
      unsigned int dataOffset = (*offset);
   b5888:	6823      	ldr	r3, [r4, #0]
   b588a:	9306      	str	r3, [sp, #24]
      (*offset) += dataLen;
   b588c:	4453      	add	r3, sl
   b588e:	6023      	str	r3, [r4, #0]
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b5890:	4628      	mov	r0, r5
   b5892:	f8cd a000 	str.w	sl, [sp]
   b5896:	ab04      	add	r3, sp, #16
   b5898:	aa06      	add	r2, sp, #24
   b589a:	4641      	mov	r1, r8
   b589c:	f7ff ff1f 	bl	b56de <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b58a0:	f110 0f22 	cmn.w	r0, #34	; 0x22
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b58a4:	4605      	mov	r5, r0
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b58a6:	f43f af7b 	beq.w	b57a0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x2c>
      Response r;
   b58aa:	ac08      	add	r4, sp, #32
   b58ac:	4620      	mov	r0, r4
   b58ae:	f000 f9e1 	bl	b5c74 <_ZN12mDNSResolver8ResponseC1Ev>
      parseName(&responseName, assembled, dataLen - 1);
   b58b2:	9904      	ldr	r1, [sp, #16]
      char* responseName = &*r.name;
   b58b4:	9407      	str	r4, [sp, #28]
      parseName(&responseName, assembled, dataLen - 1);
   b58b6:	1e6a      	subs	r2, r5, #1
   b58b8:	a807      	add	r0, sp, #28
   b58ba:	f7ff fedc 	bl	b5676 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
      int cnameIndex = cache.search(r);
   b58be:	4621      	mov	r1, r4
   b58c0:	4630      	mov	r0, r6
   b58c2:	f000 f92b 	bl	b5b1c <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      if(cnameIndex == -1) {
   b58c6:	1c43      	adds	r3, r0, #1
   b58c8:	d125      	bne.n	b5916 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1a2>
#include "Constants.h"
#include "Particle.h"
// #include <mDNSResolver/IPAddress.h>

namespace mDNSResolver {
  class Response {
   b58ca:	f44f 7280 	mov.w	r2, #256	; 0x100
   b58ce:	4621      	mov	r1, r4
   b58d0:	a851      	add	r0, sp, #324	; 0x144
   b58d2:	f004 ff1c 	bl	ba70e <memcpy>
   b58d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   b58da:	9391      	str	r3, [sp, #580]	; 0x244
   b58dc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   b58e0:	f88d 3248 	strb.w	r3, [sp, #584]	; 0x248
   b58e4:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   b58e8:	4b14      	ldr	r3, [pc, #80]	; (b593c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c8>)
   b58ea:	9393      	str	r3, [sp, #588]	; 0x24c
   b58ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b58f0:	ad94      	add	r5, sp, #592	; 0x250
   b58f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b58f4:	f8dc 3000 	ldr.w	r3, [ip]
   b58f8:	702b      	strb	r3, [r5, #0]
        cache.insert(r);
   b58fa:	a951      	add	r1, sp, #324	; 0x144
   b58fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   b5900:	9399      	str	r3, [sp, #612]	; 0x264
   b5902:	4630      	mov	r0, r6
   b5904:	f000 f957 	bl	b5bb6 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b5908:	a851      	add	r0, sp, #324	; 0x144
   b590a:	f000 f9e7 	bl	b5cdc <_ZN12mDNSResolver8ResponseD1Ev>
        cnameIndex = cache.search(r);
   b590e:	4621      	mov	r1, r4
   b5910:	4630      	mov	r0, r6
   b5912:	f000 f903 	bl	b5b1c <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b5916:	4601      	mov	r1, r0
   b5918:	4630      	mov	r0, r6
   b591a:	f000 f8e2 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b591e:	4639      	mov	r1, r7
   b5920:	4605      	mov	r5, r0
   b5922:	4630      	mov	r0, r6
   b5924:	f000 f8dd 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b5928:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
      Response r;
   b592c:	4620      	mov	r0, r4
   b592e:	f000 f9d5 	bl	b5cdc <_ZN12mDNSResolver8ResponseD1Ev>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b5932:	e793      	b.n	b585c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
      (*offset) += dataLen;
   b5934:	4452      	add	r2, sl
   b5936:	6022      	str	r2, [r4, #0]
   b5938:	e790      	b.n	b585c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
   b593a:	bf00      	nop
   b593c:	000bd15c 	.word	0x000bd15c

000b5940 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>:

  // Work out how many bytes are dedicated to questions. Since we aren't answering questions, they can be skipped
  // buffer: The mDNS packet we are parsing
  // len: Length of the packet
  // offset: the byte we are up to in the parsing process
  MDNS_RESULT Answer::skipQuestions(unsigned char* buffer, unsigned int len, unsigned int* offset) {
   b5940:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int questionCount = (buffer[4] << 8) + buffer[5];
   b5942:	7903      	ldrb	r3, [r0, #4]
   b5944:	7946      	ldrb	r6, [r0, #5]
   b5946:	eb06 2603 	add.w	r6, r6, r3, lsl #8

    *offset += 12;
   b594a:	6813      	ldr	r3, [r2, #0]
   b594c:	330c      	adds	r3, #12
   b594e:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b5950:	2500      	movs	r5, #0
   b5952:	42ae      	cmp	r6, r5
   b5954:	d016      	beq.n	b5984 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x44>

      while(buffer[*offset] != '\0') {
   b5956:	6813      	ldr	r3, [r2, #0]
   b5958:	5cc4      	ldrb	r4, [r0, r3]
   b595a:	b12c      	cbz	r4, b5968 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x28>
        // If it's a pointer, add two to the counter
        if((buffer[*offset] & 0xc0) == 0xc0) {
   b595c:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   b5960:	2fc0      	cmp	r7, #192	; 0xc0
   b5962:	d106      	bne.n	b5972 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x32>
          (*offset) += 2;
   b5964:	3302      	adds	r3, #2
   b5966:	6013      	str	r3, [r2, #0]
            return E_MDNS_PACKET_ERROR;
          }
        }
      }

      (*offset) += 5; // 2 bytes for the qtypes and 2 bytes qclass + plus one to land us on the next bit
   b5968:	6813      	ldr	r3, [r2, #0]
   b596a:	3305      	adds	r3, #5
   b596c:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b596e:	3501      	adds	r5, #1
   b5970:	e7ef      	b.n	b5952 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x12>
          if(labelLength > 0x3f) {
   b5972:	2c3f      	cmp	r4, #63	; 0x3f
   b5974:	d80c      	bhi.n	b5990 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x50>
          (*offset) += 1; // Increment to move to the next byte
   b5976:	3301      	adds	r3, #1
          (*offset) += labelLength;
   b5978:	4423      	add	r3, r4
          if(*offset > len) {
   b597a:	428b      	cmp	r3, r1
          (*offset) += labelLength;
   b597c:	6013      	str	r3, [r2, #0]
          if(*offset > len) {
   b597e:	d9ea      	bls.n	b5956 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x16>
    }

    if(*offset > len + 1) {
      return E_MDNS_PACKET_ERROR;
   b5980:	2023      	movs	r0, #35	; 0x23
    }

    return E_MDNS_OK;
  }
   b5982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*offset > len + 1) {
   b5984:	6813      	ldr	r3, [r2, #0]
   b5986:	3101      	adds	r1, #1
   b5988:	428b      	cmp	r3, r1
   b598a:	d8f9      	bhi.n	b5980 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x40>
    return E_MDNS_OK;
   b598c:	2020      	movs	r0, #32
   b598e:	e7f8      	b.n	b5982 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>
            return E_MDNS_INVALID_LABEL_LENGTH;
   b5990:	2026      	movs	r0, #38	; 0x26
   b5992:	e7f6      	b.n	b5982 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>

000b5994 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>:

  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b5994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for(int i = 0; i < cache.length(); i++) {
   b5998:	2400      	movs	r4, #0
  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b599a:	4605      	mov	r5, r0
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
        cache[i].ipAddress = cache[i].cname->ipAddress;
        cache[i].resolved = true;
   b599c:	f04f 0801 	mov.w	r8, #1
        cache[i].cname = NULL;
   b59a0:	46a1      	mov	r9, r4
    for(int i = 0; i < cache.length(); i++) {
   b59a2:	4628      	mov	r0, r5
   b59a4:	f000 f8bc 	bl	b5b20 <_ZN12mDNSResolver5Cache6lengthEv>
   b59a8:	42a0      	cmp	r0, r4
   b59aa:	dd2f      	ble.n	b5a0c <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x78>
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
   b59ac:	4621      	mov	r1, r4
   b59ae:	4628      	mov	r0, r5
   b59b0:	f000 f897 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b59b4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b59b8:	b333      	cbz	r3, b5a08 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
   b59ba:	4621      	mov	r1, r4
   b59bc:	4628      	mov	r0, r5
   b59be:	f000 f890 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b59c2:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b59c6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
   b59ca:	b1eb      	cbz	r3, b5a08 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
        cache[i].ipAddress = cache[i].cname->ipAddress;
   b59cc:	4621      	mov	r1, r4
   b59ce:	4628      	mov	r0, r5
   b59d0:	f000 f887 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b59d4:	4621      	mov	r1, r4
   b59d6:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   b59da:	4628      	mov	r0, r5
   b59dc:	f000 f881 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b59e0:	f507 7786 	add.w	r7, r7, #268	; 0x10c
   b59e4:	f500 7686 	add.w	r6, r0, #268	; 0x10c
   b59e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b59ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b59ec:	683b      	ldr	r3, [r7, #0]
   b59ee:	7033      	strb	r3, [r6, #0]
        cache[i].resolved = true;
   b59f0:	4621      	mov	r1, r4
   b59f2:	4628      	mov	r0, r5
   b59f4:	f000 f875 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
        cache[i].cname = NULL;
   b59f8:	4621      	mov	r1, r4
        cache[i].resolved = true;
   b59fa:	f880 8104 	strb.w	r8, [r0, #260]	; 0x104
        cache[i].cname = NULL;
   b59fe:	4628      	mov	r0, r5
   b5a00:	f000 f86f 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b5a04:	f8c0 9120 	str.w	r9, [r0, #288]	; 0x120
    for(int i = 0; i < cache.length(); i++) {
   b5a08:	3401      	adds	r4, #1
   b5a0a:	e7ca      	b.n	b59a2 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0xe>
      }
    }
    return E_MDNS_OK;
  }
   b5a0c:	2020      	movs	r0, #32
   b5a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5a12 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>:
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b5a12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5a16:	4691      	mov	r9, r2
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b5a18:	f990 2002 	ldrsb.w	r2, [r0, #2]
   b5a1c:	7883      	ldrb	r3, [r0, #2]
   b5a1e:	2a00      	cmp	r2, #0
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b5a20:	4606      	mov	r6, r0
   b5a22:	4688      	mov	r8, r1
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b5a24:	da28      	bge.n	b5a78 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    if(buffer[2] & 0b00000010) {
   b5a26:	079b      	lsls	r3, r3, #30
   b5a28:	d422      	bmi.n	b5a70 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x5e>
    if (buffer[3] & 0b00001111) {
   b5a2a:	78c5      	ldrb	r5, [r0, #3]
   b5a2c:	f015 050f 	ands.w	r5, r5, #15
   b5a30:	d120      	bne.n	b5a74 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x62>
    unsigned int answerCount = (buffer[6] << 8) + buffer[7];
   b5a32:	7983      	ldrb	r3, [r0, #6]
   b5a34:	79c7      	ldrb	r7, [r0, #7]
    if(answerCount == 0) {
   b5a36:	eb17 2703 	adds.w	r7, r7, r3, lsl #8
   b5a3a:	d01d      	beq.n	b5a78 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b5a3c:	aa01      	add	r2, sp, #4
    unsigned int offset = 0;
   b5a3e:	9501      	str	r5, [sp, #4]
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b5a40:	f7ff ff7e 	bl	b5940 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>
    if(questionResult != E_MDNS_OK) {
   b5a44:	2820      	cmp	r0, #32
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b5a46:	4604      	mov	r4, r0
    if(questionResult != E_MDNS_OK) {
   b5a48:	d10e      	bne.n	b5a68 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      answerResult = resolve(buffer, len, &offset, cache);
   b5a4a:	464b      	mov	r3, r9
   b5a4c:	aa01      	add	r2, sp, #4
   b5a4e:	4641      	mov	r1, r8
   b5a50:	4630      	mov	r0, r6
   b5a52:	f7ff fe8f 	bl	b5774 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>
      if(answerResult != E_MDNS_OK) {
   b5a56:	2820      	cmp	r0, #32
      answerResult = resolve(buffer, len, &offset, cache);
   b5a58:	4604      	mov	r4, r0
      if(answerResult != E_MDNS_OK) {
   b5a5a:	d105      	bne.n	b5a68 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
    for(int i = 0; i < answerCount; i++) {
   b5a5c:	3501      	adds	r5, #1
   b5a5e:	42af      	cmp	r7, r5
   b5a60:	d1f3      	bne.n	b5a4a <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x38>
    resolveCnames(cache);
   b5a62:	4648      	mov	r0, r9
   b5a64:	f7ff ff96 	bl	b5994 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>
  }
   b5a68:	4620      	mov	r0, r4
   b5a6a:	b003      	add	sp, #12
   b5a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return E_MDNS_TRUNCATED;
   b5a70:	2425      	movs	r4, #37	; 0x25
   b5a72:	e7f9      	b.n	b5a68 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_PACKET_ERROR;
   b5a74:	2423      	movs	r4, #35	; 0x23
   b5a76:	e7f7      	b.n	b5a68 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_OK;
   b5a78:	2420      	movs	r4, #32
   b5a7a:	e7f5      	b.n	b5a68 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>

000b5a7c <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>:
   b5a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5a7e:	1e4a      	subs	r2, r1, #1
   b5a80:	460d      	mov	r5, r1
   b5a82:	4604      	mov	r4, r0
   b5a84:	4603      	mov	r3, r0
   b5a86:	f500 7180 	add.w	r1, r0, #256	; 0x100
   b5a8a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   b5a8e:	f803 0b01 	strb.w	r0, [r3], #1
   b5a92:	428b      	cmp	r3, r1
   b5a94:	d1f9      	bne.n	b5a8a <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0+0xe>
   b5a96:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b5a9a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   b5a9e:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   b5aa2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   b5aa6:	f505 7786 	add.w	r7, r5, #268	; 0x10c
   b5aaa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5aac:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   b5ab0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5ab2:	683b      	ldr	r3, [r7, #0]
   b5ab4:	7033      	strb	r3, [r6, #0]
   b5ab6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   b5aba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   b5abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5ac0 <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b5ac0:	b570      	push	{r4, r5, r6, lr}
   b5ac2:	4604      	mov	r4, r0
   b5ac4:	4605      	mov	r5, r0
   b5ac6:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5aca:	4628      	mov	r0, r5
   b5acc:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b5ad0:	f000 f8d0 	bl	b5c74 <_ZN12mDNSResolver8ResponseC1Ev>
   b5ad4:	42ae      	cmp	r6, r5
   b5ad6:	d1f8      	bne.n	b5aca <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b5ad8:	2300      	movs	r3, #0
   b5ada:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5ade:	4620      	mov	r0, r4
   b5ae0:	bd70      	pop	{r4, r5, r6, pc}

000b5ae2 <_ZN12mDNSResolver5CacheixEi>:
  Cache::~Cache() {
  }

  Response& Cache::operator[] (const int index) {
    return this->list[index];
  }
   b5ae2:	f44f 7392 	mov.w	r3, #292	; 0x124
   b5ae6:	fb03 0001 	mla	r0, r3, r1, r0
   b5aea:	4770      	bx	lr

000b5aec <_ZN12mDNSResolver5Cache6searchEPKc>:

  int Cache::search(Response& response) {
    return search(response.name);
  }

  int Cache::search(const char* name) {
   b5aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < this->size; i++) {
   b5af0:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
  int Cache::search(const char* name) {
   b5af4:	4605      	mov	r5, r0
   b5af6:	4688      	mov	r8, r1
    for(int i = 0; i < this->size; i++) {
   b5af8:	2400      	movs	r4, #0
      if(strcmp(this->list[i].name, name) == 0) {
   b5afa:	f44f 7792 	mov.w	r7, #292	; 0x124
    for(int i = 0; i < this->size; i++) {
   b5afe:	42a6      	cmp	r6, r4
   b5b00:	dd07      	ble.n	b5b12 <_ZN12mDNSResolver5Cache6searchEPKc+0x26>
      if(strcmp(this->list[i].name, name) == 0) {
   b5b02:	4641      	mov	r1, r8
   b5b04:	fb07 5004 	mla	r0, r7, r4, r5
   b5b08:	f004 fe6f 	bl	ba7ea <strcmp>
   b5b0c:	b118      	cbz	r0, b5b16 <_ZN12mDNSResolver5Cache6searchEPKc+0x2a>
    for(int i = 0; i < this->size; i++) {
   b5b0e:	3401      	adds	r4, #1
   b5b10:	e7f5      	b.n	b5afe <_ZN12mDNSResolver5Cache6searchEPKc+0x12>
        return i;
      }
    }
    return -1;
   b5b12:	f04f 34ff 	mov.w	r4, #4294967295
  }
   b5b16:	4620      	mov	r0, r4
   b5b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5b1c <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>:
    return search(response.name);
   b5b1c:	f7ff bfe6 	b.w	b5aec <_ZN12mDNSResolver5Cache6searchEPKc>

000b5b20 <_ZN12mDNSResolver5Cache6lengthEv>:
    }
  }

  int Cache::length() {
    return this->size;
  }
   b5b20:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
   b5b24:	4770      	bx	lr

000b5b26 <_ZN12mDNSResolver5Cache6oldestEv>:

  int Cache::oldest() {
   b5b26:	b570      	push	{r4, r5, r6, lr}
    if(this->size == 0) {
   b5b28:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
   b5b2c:	b1a4      	cbz	r4, b5b58 <_ZN12mDNSResolver5Cache6oldestEv+0x32>
      return -1;
    }

    unsigned long oldestTTL = this->list[0].ttl;
   b5b2e:	f8d0 5100 	ldr.w	r5, [r0, #256]	; 0x100
    unsigned int oldestIndex = 0;

    for(int i = 1; i < this->size; i++) {
   b5b32:	2101      	movs	r1, #1
    unsigned int oldestIndex = 0;
   b5b34:	2200      	movs	r2, #0
      if(this->list[i].ttl < oldestTTL) {
   b5b36:	f500 7380 	add.w	r3, r0, #256	; 0x100
   b5b3a:	f44f 7692 	mov.w	r6, #292	; 0x124
    for(int i = 1; i < this->size; i++) {
   b5b3e:	428c      	cmp	r4, r1
   b5b40:	dd08      	ble.n	b5b54 <_ZN12mDNSResolver5Cache6oldestEv+0x2e>
      if(this->list[i].ttl < oldestTTL) {
   b5b42:	fb06 f001 	mul.w	r0, r6, r1
   b5b46:	5818      	ldr	r0, [r3, r0]
   b5b48:	42a8      	cmp	r0, r5
        oldestTTL = this->list[i].ttl;
        oldestIndex = i;
   b5b4a:	bf3c      	itt	cc
   b5b4c:	460a      	movcc	r2, r1
      if(this->list[i].ttl < oldestTTL) {
   b5b4e:	4605      	movcc	r5, r0
    for(int i = 1; i < this->size; i++) {
   b5b50:	3101      	adds	r1, #1
   b5b52:	e7f4      	b.n	b5b3e <_ZN12mDNSResolver5Cache6oldestEv+0x18>
      }
    }

    return oldestIndex;
   b5b54:	4610      	mov	r0, r2
  }
   b5b56:	bd70      	pop	{r4, r5, r6, pc}
      return -1;
   b5b58:	f04f 30ff 	mov.w	r0, #4294967295
   b5b5c:	e7fb      	b.n	b5b56 <_ZN12mDNSResolver5Cache6oldestEv+0x30>

000b5b5e <_ZN12mDNSResolver5Cache11removeCnameEi>:

  void Cache::removeCname(int index) {
    Response *response = &this->list[index];
   b5b5e:	f44f 7392 	mov.w	r3, #292	; 0x124
   b5b62:	fb03 0101 	mla	r1, r3, r1, r0
    return this->size;
   b5b66:	f8d0 2490 	ldr.w	r2, [r0, #1168]	; 0x490

    for(int i = 0; i < length(); i++) {
   b5b6a:	2300      	movs	r3, #0
  void Cache::removeCname(int index) {
   b5b6c:	b530      	push	{r4, r5, lr}
      if(this->list[i].cname == response) {
        this->list[i].cname = NULL;
   b5b6e:	461c      	mov	r4, r3
    for(int i = 0; i < length(); i++) {
   b5b70:	4293      	cmp	r3, r2
   b5b72:	da09      	bge.n	b5b88 <_ZN12mDNSResolver5Cache11removeCnameEi+0x2a>
      if(this->list[i].cname == response) {
   b5b74:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   b5b78:	428d      	cmp	r5, r1
        this->list[i].cname = NULL;
   b5b7a:	bf08      	it	eq
   b5b7c:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
    for(int i = 0; i < length(); i++) {
   b5b80:	3301      	adds	r3, #1
   b5b82:	f500 7092 	add.w	r0, r0, #292	; 0x124
   b5b86:	e7f3      	b.n	b5b70 <_ZN12mDNSResolver5Cache11removeCnameEi+0x12>
      }
    }
  }
   b5b88:	bd30      	pop	{r4, r5, pc}

000b5b8a <_ZN12mDNSResolver5Cache6removeEi>:

  void Cache::remove(int index) {
   b5b8a:	b538      	push	{r3, r4, r5, lr}
   b5b8c:	4604      	mov	r4, r0
   b5b8e:	460d      	mov	r5, r1
    removeCname(index);
   b5b90:	f7ff ffe5 	bl	b5b5e <_ZN12mDNSResolver5Cache11removeCnameEi>
    this->list[index] = this->list[this->size - 1];
   b5b94:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
   b5b98:	f44f 7092 	mov.w	r0, #292	; 0x124
   b5b9c:	3901      	subs	r1, #1
   b5b9e:	fb00 4101 	mla	r1, r0, r1, r4
   b5ba2:	fb00 4005 	mla	r0, r0, r5, r4
   b5ba6:	f7ff ff69 	bl	b5a7c <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size -= 1;
   b5baa:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5bae:	3b01      	subs	r3, #1
   b5bb0:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5bb4:	bd38      	pop	{r3, r4, r5, pc}

000b5bb6 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>:
  void Cache::insert(Response response) {
   b5bb6:	b538      	push	{r3, r4, r5, lr}
   b5bb8:	4604      	mov	r4, r0
   b5bba:	460d      	mov	r5, r1
    return search(response.name);
   b5bbc:	f7ff ff96 	bl	b5aec <_ZN12mDNSResolver5Cache6searchEPKc>
    if(existing != -1) {
   b5bc0:	1c43      	adds	r3, r0, #1
   b5bc2:	d008      	beq.n	b5bd6 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x20>
      this->list[existing] = response;
   b5bc4:	f44f 7392 	mov.w	r3, #292	; 0x124
   b5bc8:	4629      	mov	r1, r5
   b5bca:	fb03 4000 	mla	r0, r3, r0, r4
  }
   b5bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      this->list[existing] = response;
   b5bd2:	f7ff bf53 	b.w	b5a7c <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    if(this->size == MDNS_RESOLVER_MAX_CACHE) {
   b5bd6:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5bda:	2b04      	cmp	r3, #4
   b5bdc:	d106      	bne.n	b5bec <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x36>
      int i = oldest();
   b5bde:	4620      	mov	r0, r4
   b5be0:	f7ff ffa1 	bl	b5b26 <_ZN12mDNSResolver5Cache6oldestEv>
   b5be4:	4601      	mov	r1, r0
      remove(i);
   b5be6:	4620      	mov	r0, r4
   b5be8:	f7ff ffcf 	bl	b5b8a <_ZN12mDNSResolver5Cache6removeEi>
    this->list[this->size] = response;
   b5bec:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5bf0:	f44f 7092 	mov.w	r0, #292	; 0x124
   b5bf4:	fb00 4003 	mla	r0, r0, r3, r4
   b5bf8:	4629      	mov	r1, r5
   b5bfa:	f7ff ff3f 	bl	b5a7c <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size += 1;
   b5bfe:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5c02:	3301      	adds	r3, #1
   b5c04:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5c08:	bd38      	pop	{r3, r4, r5, pc}

000b5c0a <_ZN12mDNSResolver5Cache6expireEv>:
  void Cache::expire() {
   b5c0a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5c0e:	466e      	mov	r6, sp
   b5c10:	4604      	mov	r4, r0
   b5c12:	4605      	mov	r5, r0
   b5c14:	46b0      	mov	r8, r6
    for(int i = 0; i < this->size; i++) {
   b5c16:	2700      	movs	r7, #0
   b5c18:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5c1c:	42bb      	cmp	r3, r7
   b5c1e:	dd0a      	ble.n	b5c36 <_ZN12mDNSResolver5Cache6expireEv+0x2c>
      this->list[i].decrementTTL();
   b5c20:	4628      	mov	r0, r5
   b5c22:	f000 f85c 	bl	b5cde <_ZN12mDNSResolver8Response12decrementTTLEv>
      ttls[i] = this->list[i].ttl;
   b5c26:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b5c2a:	f848 3b04 	str.w	r3, [r8], #4
    for(int i = 0; i < this->size; i++) {
   b5c2e:	3701      	adds	r7, #1
   b5c30:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b5c34:	e7f0      	b.n	b5c18 <_ZN12mDNSResolver5Cache6expireEv+0xe>
    for(int i = 0; i < this->size; i++) {
   b5c36:	2500      	movs	r5, #0
   b5c38:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5c3c:	42ab      	cmp	r3, r5
   b5c3e:	dd08      	ble.n	b5c52 <_ZN12mDNSResolver5Cache6expireEv+0x48>
      if(ttls[i] == 0) {
   b5c40:	f856 3b04 	ldr.w	r3, [r6], #4
   b5c44:	b91b      	cbnz	r3, b5c4e <_ZN12mDNSResolver5Cache6expireEv+0x44>
        remove(i);
   b5c46:	4629      	mov	r1, r5
   b5c48:	4620      	mov	r0, r4
   b5c4a:	f7ff ff9e 	bl	b5b8a <_ZN12mDNSResolver5Cache6removeEi>
    for(int i = 0; i < this->size; i++) {
   b5c4e:	3501      	adds	r5, #1
   b5c50:	e7f2      	b.n	b5c38 <_ZN12mDNSResolver5Cache6expireEv+0x2e>
  }
   b5c52:	b004      	add	sp, #16
   b5c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5c58 <_ZN9IPAddressaSImEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5c58:	b530      	push	{r4, r5, lr}
   b5c5a:	b087      	sub	sp, #28
   b5c5c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5c5e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5c60:	4668      	mov	r0, sp
   b5c62:	f003 f959 	bl	b8f18 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b5c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c68:	3404      	adds	r4, #4
   b5c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c6c:	682b      	ldr	r3, [r5, #0]
   b5c6e:	7023      	strb	r3, [r4, #0]
    }
   b5c70:	b007      	add	sp, #28
   b5c72:	bd30      	pop	{r4, r5, pc}

000b5c74 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b5c74:	b538      	push	{r3, r4, r5, lr}
   b5c76:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b5c7a:	4604      	mov	r4, r0
   b5c7c:	4628      	mov	r0, r5
   b5c7e:	f003 f92b 	bl	b8ed8 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b5c82:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b5c84:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b5c86:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b5c88:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b5c8c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b5c90:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b5c94:	f04f 31ff 	mov.w	r1, #4294967295
   b5c98:	f7ff ffde 	bl	b5c58 <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b5c9c:	4620      	mov	r0, r4
   b5c9e:	bd38      	pop	{r3, r4, r5, pc}

000b5ca0 <_ZN12mDNSResolver8ResponseC1EPKcm>:
    this->resolved = false;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
  }

  Response::Response(const char* name, unsigned long ttl) {
   b5ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ca2:	f500 7684 	add.w	r6, r0, #264	; 0x108
   b5ca6:	4604      	mov	r4, r0
   b5ca8:	4630      	mov	r0, r6
   b5caa:	4615      	mov	r5, r2
   b5cac:	9101      	str	r1, [sp, #4]
   b5cae:	f003 f913 	bl	b8ed8 <_ZN9IPAddressC1Ev>
    strncpy(this->name, name, MDNS_MAX_NAME_LEN + 1);
   b5cb2:	9901      	ldr	r1, [sp, #4]
   b5cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
   b5cb8:	4620      	mov	r0, r4
   b5cba:	f004 fde2 	bl	ba882 <strncpy>
    this->name[MDNS_MAX_NAME_LEN + 1] = '\0';
    this->ttl = ttl;
    this->resolved = false;
   b5cbe:	2300      	movs	r3, #0
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b5cc0:	4630      	mov	r0, r6
    this->ttl = ttl;
   b5cc2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    this->resolved = false;
   b5cc6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->cname = NULL;
   b5cca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b5cce:	f04f 31ff 	mov.w	r1, #4294967295
   b5cd2:	f7ff ffc1 	bl	b5c58 <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b5cd6:	4620      	mov	r0, r4
   b5cd8:	b002      	add	sp, #8
   b5cda:	bd70      	pop	{r4, r5, r6, pc}

000b5cdc <_ZN12mDNSResolver8ResponseD1Ev>:

  Response::~Response() {
  }
   b5cdc:	4770      	bx	lr

000b5cde <_ZN12mDNSResolver8Response12decrementTTLEv>:

  void Response::decrementTTL() {
    if(this->ttl > 0) {
   b5cde:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5ce2:	2b00      	cmp	r3, #0
      this->ttl--;
   b5ce4:	bfc4      	itt	gt
   b5ce6:	f103 33ff 	addgt.w	r3, r3, #4294967295
   b5cea:	f8c0 3100 	strgt.w	r3, [r0, #256]	; 0x100
    }
  }
   b5cee:	4770      	bx	lr

000b5cf0 <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b5cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cf2:	4604      	mov	r4, r0
   b5cf4:	3004      	adds	r0, #4
   b5cf6:	460d      	mov	r5, r1
   b5cf8:	f001 f816 	bl	b6d28 <_ZN3UDPC1Ev>
   b5cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5d00:	f003 f8ea 	bl	b8ed8 <_ZN9IPAddressC1Ev>
    timeout = 0;
   b5d04:	2300      	movs	r3, #0
   b5d06:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b5d08:	686b      	ldr	r3, [r5, #4]
   b5d0a:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b5d0c:	68ab      	ldr	r3, [r5, #8]
   b5d0e:	60e3      	str	r3, [r4, #12]
   b5d10:	68eb      	ldr	r3, [r5, #12]
   b5d12:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b5d14:	696b      	ldr	r3, [r5, #20]
   b5d16:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b5d18:	f105 0720 	add.w	r7, r5, #32
   b5d1c:	8b2b      	ldrh	r3, [r5, #24]
   b5d1e:	83a3      	strh	r3, [r4, #28]
   b5d20:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5d22:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b5d26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5d28:	683b      	ldr	r3, [r7, #0]
   b5d2a:	7033      	strb	r3, [r6, #0]
   b5d2c:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b5d2e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b5d30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b5d32:	6423      	str	r3, [r4, #64]	; 0x40
   b5d34:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b5d36:	6463      	str	r3, [r4, #68]	; 0x44
   b5d38:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b5d3a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b5d3c:	64a3      	str	r3, [r4, #72]	; 0x48
   b5d3e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b5d42:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b5d44:	4620      	mov	r0, r4
   b5d46:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b5d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d4c <_ZN12mDNSResolver8Resolver5queryEPKc>:
	init = false;
	// Serial.println("Search return 2");
    return INADDR_NONE;
  }

  void Resolver::query(const char* name) {
   b5d4c:	b510      	push	{r4, lr}
   b5d4e:	b08a      	sub	sp, #40	; 0x28
   b5d50:	4604      	mov	r4, r0
	  // Serial.println("Query");
    Query query(name);
   b5d52:	a803      	add	r0, sp, #12
   b5d54:	f7ff fc00 	bl	b5558 <_ZN12mDNSResolver5QueryC1EPKc>
    udp.beginPacket(MDNS_BROADCAST_IP, MDNS_PORT);		//Peet
   b5d58:	23fb      	movs	r3, #251	; 0xfb
   b5d5a:	9300      	str	r3, [sp, #0]
   b5d5c:	2300      	movs	r3, #0
   b5d5e:	461a      	mov	r2, r3
   b5d60:	3404      	adds	r4, #4
   b5d62:	21e0      	movs	r1, #224	; 0xe0
   b5d64:	a804      	add	r0, sp, #16
   b5d66:	f003 f903 	bl	b8f70 <_ZN9IPAddressC1Ehhhh>
   b5d6a:	f241 42e9 	movw	r2, #5353	; 0x14e9
   b5d6e:	a904      	add	r1, sp, #16
   b5d70:	4620      	mov	r0, r4
   b5d72:	f001 f827 	bl	b6dc4 <_ZN3UDP11beginPacketE9IPAddresst>
    query.sendPacket(udp);
   b5d76:	4621      	mov	r1, r4
   b5d78:	a803      	add	r0, sp, #12
   b5d7a:	f7ff fc2f 	bl	b55dc <_ZN12mDNSResolver5Query10sendPacketER3UDP>
    udp.endPacket();
   b5d7e:	4620      	mov	r0, r4
   b5d80:	f000 fd3c 	bl	b67fc <_ZN3UDP9endPacketEv>
    Query query(name);
   b5d84:	a803      	add	r0, sp, #12
   b5d86:	f7ff fbe9 	bl	b555c <_ZN12mDNSResolver5QueryD1Ev>
  }
   b5d8a:	b00a      	add	sp, #40	; 0x28
   b5d8c:	bd10      	pop	{r4, pc}
	...

000b5d90 <_ZN12mDNSResolver8Resolver4readEv>:
      free(buffer);
    }
	// Serial.println("mDNS2");
  }

  MDNS_RESULT Resolver::read() {
   b5d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d92:	4605      	mov	r5, r0
   b5d94:	b089      	sub	sp, #36	; 0x24
    cache.expire();
   b5d96:	482d      	ldr	r0, [pc, #180]	; (b5e4c <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b5d98:	f7ff ff37 	bl	b5c0a <_ZN12mDNSResolver5Cache6expireEv>

    if(!init) {
   b5d9c:	f895 4068 	ldrb.w	r4, [r5, #104]	; 0x68
      init = true;
	  Serial.println("Begin Multicast");
	  udp.begin(5353);
   b5da0:	1d2f      	adds	r7, r5, #4
    if(!init) {
   b5da2:	bb54      	cbnz	r4, b5dfa <_ZN12mDNSResolver8Resolver4readEv+0x6a>
      init = true;
   b5da4:	2301      	movs	r3, #1
   b5da6:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	  Serial.println("Begin Multicast");
   b5daa:	f003 f957 	bl	b905c <_Z16_fetch_usbserialv>
   b5dae:	4928      	ldr	r1, [pc, #160]	; (b5e50 <_ZN12mDNSResolver8Resolver4readEv+0xc0>)
   b5db0:	f002 fbe9 	bl	b8586 <_ZN5Print7printlnEPKc>
	  udp.begin(5353);
   b5db4:	4622      	mov	r2, r4
   b5db6:	f241 41e9 	movw	r1, #5353	; 0x14e9
   b5dba:	4638      	mov	r0, r7
   b5dbc:	f000 fd78 	bl	b68b0 <_ZN3UDP5beginEtm>
      Serial.println(udp.joinMulticast(MDNS_BROADCAST_IP));	  //Peet
   b5dc0:	f003 f94c 	bl	b905c <_Z16_fetch_usbserialv>
   b5dc4:	23fb      	movs	r3, #251	; 0xfb
   b5dc6:	4622      	mov	r2, r4
   b5dc8:	9300      	str	r3, [sp, #0]
   b5dca:	21e0      	movs	r1, #224	; 0xe0
   b5dcc:	4623      	mov	r3, r4
   b5dce:	4606      	mov	r6, r0
   b5dd0:	a802      	add	r0, sp, #8
   b5dd2:	f003 f8cd 	bl	b8f70 <_ZN9IPAddressC1Ehhhh>
   b5dd6:	a902      	add	r1, sp, #8
   b5dd8:	4638      	mov	r0, r7
   b5dda:	f001 f847 	bl	b6e6c <_ZN3UDP13joinMulticastERK9IPAddress>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b5dde:	1e04      	subs	r4, r0, #0
   b5de0:	da1d      	bge.n	b5e1e <_ZN12mDNSResolver8Resolver4readEv+0x8e>
            t = print('-');
   b5de2:	212d      	movs	r1, #45	; 0x2d
   b5de4:	4630      	mov	r0, r6
   b5de6:	f002 fbbf 	bl	b8568 <_ZN5Print5printEc>
            val = -n;
   b5dea:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5dec:	220a      	movs	r2, #10
   b5dee:	4630      	mov	r0, r6
   b5df0:	f002 fbd3 	bl	b859a <_ZN5Print11printNumberEmh>
        n += println();
   b5df4:	4630      	mov	r0, r6
   b5df6:	f002 fbba 	bl	b856e <_ZN5Print7printlnEv>
    }

    unsigned int len = udp.parsePacket();
   b5dfa:	2100      	movs	r1, #0
   b5dfc:	4638      	mov	r0, r7
   b5dfe:	f000 fff8 	bl	b6df2 <_ZN3UDP11parsePacketEm>

    if(len > 0) {
   b5e02:	4606      	mov	r6, r0
   b5e04:	b300      	cbz	r0, b5e48 <_ZN12mDNSResolver8Resolver4readEv+0xb8>
      unsigned char *buffer = (unsigned char *)malloc(sizeof(unsigned char) * len);
   b5e06:	f000 fbeb 	bl	b65e0 <malloc>

      if(buffer == NULL) {
   b5e0a:	4604      	mov	r4, r0
   b5e0c:	b948      	cbnz	r0, b5e22 <_ZN12mDNSResolver8Resolver4readEv+0x92>
        // Out of memory - the packet is probably too big to parse. Probably.
        // Silently bombing out, possibly isn't great, but it'll do for the moment.
		Serial.println("Out of memory");
   b5e0e:	f003 f925 	bl	b905c <_Z16_fetch_usbserialv>
   b5e12:	4910      	ldr	r1, [pc, #64]	; (b5e54 <_ZN12mDNSResolver8Resolver4readEv+0xc4>)
   b5e14:	f002 fbb7 	bl	b8586 <_ZN5Print7printlnEPKc>
        return E_MDNS_OUT_OF_MEMORY;
   b5e18:	2027      	movs	r0, #39	; 0x27
      return lastResult;
    }
	// Serial.println("Read return 2");
	// init = false;
    return E_MDNS_OK;
  }
   b5e1a:	b009      	add	sp, #36	; 0x24
   b5e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b5e1e:	4621      	mov	r1, r4
   b5e20:	e7e4      	b.n	b5dec <_ZN12mDNSResolver8Resolver4readEv+0x5c>
      udp.read(buffer, len);
   b5e22:	4601      	mov	r1, r0
   b5e24:	4632      	mov	r2, r6
   b5e26:	4638      	mov	r0, r7
   b5e28:	f000 fdb1 	bl	b698e <_ZN3UDP4readEPhj>
	  udp.flush();
   b5e2c:	4638      	mov	r0, r7
   b5e2e:	f000 fd2d 	bl	b688c <_ZN3UDP5flushEv>
      lastResult = Answer::process(buffer, len, cache);
   b5e32:	4a06      	ldr	r2, [pc, #24]	; (b5e4c <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b5e34:	4631      	mov	r1, r6
   b5e36:	4620      	mov	r0, r4
   b5e38:	f7ff fdeb 	bl	b5a12 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>
   b5e3c:	6028      	str	r0, [r5, #0]
      free(buffer);
   b5e3e:	4620      	mov	r0, r4
   b5e40:	f000 fbd6 	bl	b65f0 <free>
      return lastResult;
   b5e44:	6828      	ldr	r0, [r5, #0]
   b5e46:	e7e8      	b.n	b5e1a <_ZN12mDNSResolver8Resolver4readEv+0x8a>
    return E_MDNS_OK;
   b5e48:	2020      	movs	r0, #32
   b5e4a:	e7e6      	b.n	b5e1a <_ZN12mDNSResolver8Resolver4readEv+0x8a>
   b5e4c:	2003e1e0 	.word	0x2003e1e0
   b5e50:	000bce4a 	.word	0x000bce4a
   b5e54:	000bce5a 	.word	0x000bce5a

000b5e58 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>:

  bool Resolver::isMDNSName(const char* name) {
   b5e58:	b510      	push	{r4, lr}
    int len = strlen(name);
   b5e5a:	4608      	mov	r0, r1
  bool Resolver::isMDNSName(const char* name) {
   b5e5c:	460c      	mov	r4, r1
    int len = strlen(name);
   b5e5e:	f004 fcf4 	bl	ba84a <strlen>
    int tldLen = strlen(MDNS_TLD);
	
	// Serial.println("LOll");
    if(len < tldLen) {
   b5e62:	2805      	cmp	r0, #5
   b5e64:	d908      	bls.n	b5e78 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x20>
      return false;
    }
	// Serial.println("LOLO");
    return strcmp(name + len - tldLen, MDNS_TLD) == 0;
   b5e66:	3806      	subs	r0, #6
   b5e68:	4904      	ldr	r1, [pc, #16]	; (b5e7c <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x24>)
   b5e6a:	4420      	add	r0, r4
   b5e6c:	f004 fcbd 	bl	ba7ea <strcmp>
   b5e70:	fab0 f080 	clz	r0, r0
   b5e74:	0940      	lsrs	r0, r0, #5
  }
   b5e76:	bd10      	pop	{r4, pc}
      return false;
   b5e78:	2000      	movs	r0, #0
   b5e7a:	e7fc      	b.n	b5e76 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x1e>
   b5e7c:	000bcc89 	.word	0x000bcc89

000b5e80 <_ZN12mDNSResolver8Resolver6searchEPKc>:
  IPAddress Resolver::search(const char* name) {
   b5e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e84:	460c      	mov	r4, r1
   b5e86:	b0cd      	sub	sp, #308	; 0x134
   b5e88:	4606      	mov	r6, r0
    if(!isMDNSName(name)) {
   b5e8a:	4611      	mov	r1, r2
   b5e8c:	4620      	mov	r0, r4
  IPAddress Resolver::search(const char* name) {
   b5e8e:	4615      	mov	r5, r2
    if(!isMDNSName(name)) {
   b5e90:	f7ff ffe2 	bl	b5e58 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>
   b5e94:	b950      	cbnz	r0, b5eac <_ZN12mDNSResolver8Resolver6searchEPKc+0x2c>
	Serial.println("not valid");
   b5e96:	f003 f8e1 	bl	b905c <_Z16_fetch_usbserialv>
   b5e9a:	4938      	ldr	r1, [pc, #224]	; (b5f7c <_ZN12mDNSResolver8Resolver6searchEPKc+0xfc>)
   b5e9c:	f002 fb73 	bl	b8586 <_ZN5Print7printlnEPKc>
    return INADDR_NONE;
   b5ea0:	f04f 31ff 	mov.w	r1, #4294967295
   b5ea4:	4630      	mov	r0, r6
   b5ea6:	f003 f837 	bl	b8f18 <_ZN9IPAddressC1Em>
   b5eaa:	e04d      	b.n	b5f48 <_ZN12mDNSResolver8Resolver6searchEPKc+0xc8>
    cache.expire();
   b5eac:	4834      	ldr	r0, [pc, #208]	; (b5f80 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
      int index = cache.search(name);
   b5eae:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b5f80 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>
    cache.expire();
   b5eb2:	f7ff feaa 	bl	b5c0a <_ZN12mDNSResolver5Cache6expireEv>
    int attempts = 0;
   b5eb6:	f04f 0800 	mov.w	r8, #0
      int index = cache.search(name);
   b5eba:	4629      	mov	r1, r5
   b5ebc:	4648      	mov	r0, r9
   b5ebe:	f7ff fe15 	bl	b5aec <_ZN12mDNSResolver5Cache6searchEPKc>
      if(index == -1) {
   b5ec2:	1c43      	adds	r3, r0, #1
      int index = cache.search(name);
   b5ec4:	4607      	mov	r7, r0
      if(index == -1) {
   b5ec6:	d11e      	bne.n	b5f06 <_ZN12mDNSResolver8Resolver6searchEPKc+0x86>
        cache.insert(Response(name, 5));			//ttl = 5
   b5ec8:	2205      	movs	r2, #5
   b5eca:	4629      	mov	r1, r5
   b5ecc:	a803      	add	r0, sp, #12
   b5ece:	f7ff fee7 	bl	b5ca0 <_ZN12mDNSResolver8ResponseC1EPKcm>
   b5ed2:	4648      	mov	r0, r9
   b5ed4:	a903      	add	r1, sp, #12
   b5ed6:	f7ff fe6e 	bl	b5bb6 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b5eda:	a803      	add	r0, sp, #12
   b5edc:	f7ff fefe 	bl	b5cdc <_ZN12mDNSResolver8ResponseD1Ev>
    while(attempts < MDNS_ATTEMPTS) {
   b5ee0:	f1b8 0f05 	cmp.w	r8, #5
   b5ee4:	d1e9      	bne.n	b5eba <_ZN12mDNSResolver8Resolver6searchEPKc+0x3a>
	udp.leaveMulticast(MDNS_BROADCAST_IP);
   b5ee6:	23fb      	movs	r3, #251	; 0xfb
   b5ee8:	9300      	str	r3, [sp, #0]
   b5eea:	2300      	movs	r3, #0
   b5eec:	461a      	mov	r2, r3
   b5eee:	21e0      	movs	r1, #224	; 0xe0
   b5ef0:	a803      	add	r0, sp, #12
   b5ef2:	f003 f83d 	bl	b8f70 <_ZN9IPAddressC1Ehhhh>
   b5ef6:	a903      	add	r1, sp, #12
   b5ef8:	1d20      	adds	r0, r4, #4
   b5efa:	f000 ffc8 	bl	b6e8e <_ZN3UDP14leaveMulticastERK9IPAddress>
	init = false;
   b5efe:	2300      	movs	r3, #0
   b5f00:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b5f04:	e7cc      	b.n	b5ea0 <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
      } else if(cache[index].resolved) {
   b5f06:	4601      	mov	r1, r0
   b5f08:	4648      	mov	r0, r9
   b5f0a:	f7ff fdea 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b5f0e:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   b5f12:	b1eb      	cbz	r3, b5f50 <_ZN12mDNSResolver8Resolver6searchEPKc+0xd0>
		  udp.leaveMulticast(MDNS_BROADCAST_IP);
   b5f14:	23fb      	movs	r3, #251	; 0xfb
   b5f16:	9300      	str	r3, [sp, #0]
   b5f18:	2300      	movs	r3, #0
   b5f1a:	461a      	mov	r2, r3
   b5f1c:	21e0      	movs	r1, #224	; 0xe0
   b5f1e:	a803      	add	r0, sp, #12
   b5f20:	f003 f826 	bl	b8f70 <_ZN9IPAddressC1Ehhhh>
   b5f24:	a903      	add	r1, sp, #12
   b5f26:	1d20      	adds	r0, r4, #4
   b5f28:	f000 ffb1 	bl	b6e8e <_ZN3UDP14leaveMulticastERK9IPAddress>
        return cache[index].ipAddress;
   b5f2c:	4639      	mov	r1, r7
   b5f2e:	4814      	ldr	r0, [pc, #80]	; (b5f80 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
   b5f30:	f7ff fdd7 	bl	b5ae2 <_ZN12mDNSResolver5CacheixEi>
   b5f34:	4634      	mov	r4, r6
   b5f36:	4b13      	ldr	r3, [pc, #76]	; (b5f84 <_ZN12mDNSResolver8Resolver6searchEPKc+0x104>)
   b5f38:	f844 3b04 	str.w	r3, [r4], #4
   b5f3c:	f500 7586 	add.w	r5, r0, #268	; 0x10c
   b5f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f44:	682b      	ldr	r3, [r5, #0]
   b5f46:	7023      	strb	r3, [r4, #0]
  }
   b5f48:	4630      	mov	r0, r6
   b5f4a:	b04d      	add	sp, #308	; 0x134
   b5f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5f50:	f000 f878 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
      if(now - timeout > MDNS_RETRY) {
   b5f54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b5f56:	1ac3      	subs	r3, r0, r3
   b5f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b5f5c:	4607      	mov	r7, r0
   b5f5e:	dd06      	ble.n	b5f6e <_ZN12mDNSResolver8Resolver6searchEPKc+0xee>
        query(name);
   b5f60:	4629      	mov	r1, r5
   b5f62:	4620      	mov	r0, r4
   b5f64:	f7ff fef2 	bl	b5d4c <_ZN12mDNSResolver8Resolver5queryEPKc>
        attempts++;
   b5f68:	f108 0801 	add.w	r8, r8, #1
        timeout = now;
   b5f6c:	66e7      	str	r7, [r4, #108]	; 0x6c
      MDNS_RESULT result = read();
   b5f6e:	4620      	mov	r0, r4
   b5f70:	f7ff ff0e 	bl	b5d90 <_ZN12mDNSResolver8Resolver4readEv>
      if(result != E_MDNS_OK) {
   b5f74:	2820      	cmp	r0, #32
   b5f76:	d0b3      	beq.n	b5ee0 <_ZN12mDNSResolver8Resolver6searchEPKc+0x60>
   b5f78:	e792      	b.n	b5ea0 <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
   b5f7a:	bf00      	nop
   b5f7c:	000bce68 	.word	0x000bce68
   b5f80:	2003e1e0 	.word	0x2003e1e0
   b5f84:	000bd15c 	.word	0x000bd15c

000b5f88 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b5f88:	4801      	ldr	r0, [pc, #4]	; (b5f90 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b5f8a:	f7ff bd99 	b.w	b5ac0 <_ZN12mDNSResolver5CacheC1Ev>
   b5f8e:	bf00      	nop
   b5f90:	2003e1e0 	.word	0x2003e1e0

000b5f94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5f94:	b508      	push	{r3, lr}
   b5f96:	4b02      	ldr	r3, [pc, #8]	; (b5fa0 <netdb_freeaddrinfo+0xc>)
   b5f98:	681b      	ldr	r3, [r3, #0]
   b5f9a:	689b      	ldr	r3, [r3, #8]
   b5f9c:	9301      	str	r3, [sp, #4]
   b5f9e:	bd08      	pop	{r3, pc}
   b5fa0:	00030268 	.word	0x00030268

000b5fa4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5fa4:	b508      	push	{r3, lr}
   b5fa6:	4b02      	ldr	r3, [pc, #8]	; (b5fb0 <netdb_getaddrinfo+0xc>)
   b5fa8:	681b      	ldr	r3, [r3, #0]
   b5faa:	68db      	ldr	r3, [r3, #12]
   b5fac:	9301      	str	r3, [sp, #4]
   b5fae:	bd08      	pop	{r3, pc}
   b5fb0:	00030268 	.word	0x00030268

000b5fb4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5fb4:	b508      	push	{r3, lr}
   b5fb6:	4b02      	ldr	r3, [pc, #8]	; (b5fc0 <HAL_Pin_Mode+0xc>)
   b5fb8:	681b      	ldr	r3, [r3, #0]
   b5fba:	689b      	ldr	r3, [r3, #8]
   b5fbc:	9301      	str	r3, [sp, #4]
   b5fbe:	bd08      	pop	{r3, pc}
   b5fc0:	0003022c 	.word	0x0003022c

000b5fc4 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5fc4:	b508      	push	{r3, lr}
   b5fc6:	4b02      	ldr	r3, [pc, #8]	; (b5fd0 <HAL_Interrupts_Attach+0xc>)
   b5fc8:	681b      	ldr	r3, [r3, #0]
   b5fca:	699b      	ldr	r3, [r3, #24]
   b5fcc:	9301      	str	r3, [sp, #4]
   b5fce:	bd08      	pop	{r3, pc}
   b5fd0:	0003022c 	.word	0x0003022c

000b5fd4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5fd4:	b508      	push	{r3, lr}
   b5fd6:	4b02      	ldr	r3, [pc, #8]	; (b5fe0 <HAL_Interrupts_Detach+0xc>)
   b5fd8:	681b      	ldr	r3, [r3, #0]
   b5fda:	69db      	ldr	r3, [r3, #28]
   b5fdc:	9301      	str	r3, [sp, #4]
   b5fde:	bd08      	pop	{r3, pc}
   b5fe0:	0003022c 	.word	0x0003022c

000b5fe4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5fe4:	b508      	push	{r3, lr}
   b5fe6:	4b02      	ldr	r3, [pc, #8]	; (b5ff0 <if_index_to_name+0xc>)
   b5fe8:	681b      	ldr	r3, [r3, #0]
   b5fea:	695b      	ldr	r3, [r3, #20]
   b5fec:	9301      	str	r3, [sp, #4]
   b5fee:	bd08      	pop	{r3, pc}
   b5ff0:	0003026c 	.word	0x0003026c

000b5ff4 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   b5ff4:	b508      	push	{r3, lr}
   b5ff6:	4b02      	ldr	r3, [pc, #8]	; (b6000 <if_get_by_index+0xc>)
   b5ff8:	681b      	ldr	r3, [r3, #0]
   b5ffa:	699b      	ldr	r3, [r3, #24]
   b5ffc:	9301      	str	r3, [sp, #4]
   b5ffe:	bd08      	pop	{r3, pc}
   b6000:	0003026c 	.word	0x0003026c

000b6004 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b02      	ldr	r3, [pc, #8]	; (b6010 <if_get_addrs+0xc>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b600c:	9301      	str	r3, [sp, #4]
   b600e:	bd08      	pop	{r3, pc}
   b6010:	0003026c 	.word	0x0003026c

000b6014 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   b6014:	b508      	push	{r3, lr}
   b6016:	4b02      	ldr	r3, [pc, #8]	; (b6020 <if_free_if_addrs+0xc>)
   b6018:	681b      	ldr	r3, [r3, #0]
   b601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b601c:	9301      	str	r3, [sp, #4]
   b601e:	bd08      	pop	{r3, pc}
   b6020:	0003026c 	.word	0x0003026c

000b6024 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6024:	b508      	push	{r3, lr}
   b6026:	4b02      	ldr	r3, [pc, #8]	; (b6030 <HAL_RNG_GetRandomNumber+0xc>)
   b6028:	681b      	ldr	r3, [r3, #0]
   b602a:	685b      	ldr	r3, [r3, #4]
   b602c:	9301      	str	r3, [sp, #4]
   b602e:	bd08      	pop	{r3, pc}
   b6030:	00030218 	.word	0x00030218

000b6034 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6034:	b508      	push	{r3, lr}
   b6036:	4b02      	ldr	r3, [pc, #8]	; (b6040 <HAL_Delay_Microseconds+0xc>)
   b6038:	681b      	ldr	r3, [r3, #0]
   b603a:	68db      	ldr	r3, [r3, #12]
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	bd08      	pop	{r3, pc}
   b6040:	00030218 	.word	0x00030218

000b6044 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b02      	ldr	r3, [pc, #8]	; (b6050 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	695b      	ldr	r3, [r3, #20]
   b604c:	9301      	str	r3, [sp, #4]
   b604e:	bd08      	pop	{r3, pc}
   b6050:	00030218 	.word	0x00030218

000b6054 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b02      	ldr	r3, [pc, #8]	; (b6060 <hal_rtc_time_is_valid+0xc>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b605c:	9301      	str	r3, [sp, #4]
   b605e:	bd08      	pop	{r3, pc}
   b6060:	00030218 	.word	0x00030218

000b6064 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6064:	b508      	push	{r3, lr}
   b6066:	4b02      	ldr	r3, [pc, #8]	; (b6070 <hal_rtc_get_time+0xc>)
   b6068:	681b      	ldr	r3, [r3, #0]
   b606a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b606c:	9301      	str	r3, [sp, #4]
   b606e:	bd08      	pop	{r3, pc}
   b6070:	00030218 	.word	0x00030218

000b6074 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6074:	b508      	push	{r3, lr}
   b6076:	4b02      	ldr	r3, [pc, #8]	; (b6080 <hal_ble_stack_init+0xc>)
   b6078:	681b      	ldr	r3, [r3, #0]
   b607a:	689b      	ldr	r3, [r3, #8]
   b607c:	9301      	str	r3, [sp, #4]
   b607e:	bd08      	pop	{r3, pc}
   b6080:	00030278 	.word	0x00030278

000b6084 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6084:	b508      	push	{r3, lr}
   b6086:	4b02      	ldr	r3, [pc, #8]	; (b6090 <hal_ble_gap_set_advertising_data+0xc>)
   b6088:	681b      	ldr	r3, [r3, #0]
   b608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b608c:	9301      	str	r3, [sp, #4]
   b608e:	bd08      	pop	{r3, pc}
   b6090:	00030278 	.word	0x00030278

000b6094 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6094:	b508      	push	{r3, lr}
   b6096:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <hal_ble_gap_set_scan_response_data+0xc>)
   b6098:	681b      	ldr	r3, [r3, #0]
   b609a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b609c:	9301      	str	r3, [sp, #4]
   b609e:	bd08      	pop	{r3, pc}
   b60a0:	00030278 	.word	0x00030278

000b60a4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <hal_ble_gap_start_advertising+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	00030278 	.word	0x00030278

000b60b4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b03      	ldr	r3, [pc, #12]	; (b60c4 <hal_ble_gap_disconnect+0x10>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b60be:	9301      	str	r3, [sp, #4]
   b60c0:	bd08      	pop	{r3, pc}
   b60c2:	0000      	.short	0x0000
   b60c4:	00030278 	.word	0x00030278

000b60c8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b03      	ldr	r3, [pc, #12]	; (b60d8 <hal_ble_gatt_server_add_service+0x10>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b60d2:	9301      	str	r3, [sp, #4]
   b60d4:	bd08      	pop	{r3, pc}
   b60d6:	0000      	.short	0x0000
   b60d8:	00030278 	.word	0x00030278

000b60dc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b60dc:	b508      	push	{r3, lr}
   b60de:	4b03      	ldr	r3, [pc, #12]	; (b60ec <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b60e0:	681b      	ldr	r3, [r3, #0]
   b60e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b60e6:	9301      	str	r3, [sp, #4]
   b60e8:	bd08      	pop	{r3, pc}
   b60ea:	0000      	.short	0x0000
   b60ec:	00030278 	.word	0x00030278

000b60f0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b03      	ldr	r3, [pc, #12]	; (b6100 <hal_ble_gatt_client_write_with_response+0x10>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b60fa:	9301      	str	r3, [sp, #4]
   b60fc:	bd08      	pop	{r3, pc}
   b60fe:	0000      	.short	0x0000
   b6100:	00030278 	.word	0x00030278

000b6104 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b03      	ldr	r3, [pc, #12]	; (b6114 <hal_ble_gatt_client_write_without_response+0x10>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b610e:	9301      	str	r3, [sp, #4]
   b6110:	bd08      	pop	{r3, pc}
   b6112:	0000      	.short	0x0000
   b6114:	00030278 	.word	0x00030278

000b6118 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b03      	ldr	r3, [pc, #12]	; (b6128 <hal_ble_gatt_server_add_characteristic+0x10>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b6122:	9301      	str	r3, [sp, #4]
   b6124:	bd08      	pop	{r3, pc}
   b6126:	0000      	.short	0x0000
   b6128:	00030278 	.word	0x00030278

000b612c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b612c:	b508      	push	{r3, lr}
   b612e:	4b03      	ldr	r3, [pc, #12]	; (b613c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6130:	681b      	ldr	r3, [r3, #0]
   b6132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6136:	9301      	str	r3, [sp, #4]
   b6138:	bd08      	pop	{r3, pc}
   b613a:	0000      	.short	0x0000
   b613c:	00030278 	.word	0x00030278

000b6140 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b03      	ldr	r3, [pc, #12]	; (b6150 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b614a:	9301      	str	r3, [sp, #4]
   b614c:	bd08      	pop	{r3, pc}
   b614e:	0000      	.short	0x0000
   b6150:	00030278 	.word	0x00030278

000b6154 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b03      	ldr	r3, [pc, #12]	; (b6164 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b615e:	9301      	str	r3, [sp, #4]
   b6160:	bd08      	pop	{r3, pc}
   b6162:	0000      	.short	0x0000
   b6164:	00030278 	.word	0x00030278

000b6168 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <os_mutex_create+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	00030248 	.word	0x00030248

000b6178 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <os_mutex_lock+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	00030248 	.word	0x00030248

000b6188 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <os_mutex_unlock+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	00030248 	.word	0x00030248

000b6198 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <os_mutex_recursive_create+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	00030248 	.word	0x00030248

000b61a8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <os_mutex_recursive_lock+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	00030248 	.word	0x00030248

000b61b8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <os_mutex_recursive_unlock+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	00030248 	.word	0x00030248

000b61c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <inet_inet_ntop+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	695b      	ldr	r3, [r3, #20]
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	00030264 	.word	0x00030264

000b61d8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <inet_htonl+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	6a1b      	ldr	r3, [r3, #32]
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	00030264 	.word	0x00030264

000b61e8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <inet_ntohs+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	00030264 	.word	0x00030264

000b61f8 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <inet_htons+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	00030264 	.word	0x00030264

000b6208 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <hal_usart_write+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	68db      	ldr	r3, [r3, #12]
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	0003023c 	.word	0x0003023c

000b6218 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <hal_usart_available+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	691b      	ldr	r3, [r3, #16]
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	0003023c 	.word	0x0003023c

000b6228 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <hal_usart_read+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	695b      	ldr	r3, [r3, #20]
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	0003023c 	.word	0x0003023c

000b6238 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <hal_usart_peek+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	699b      	ldr	r3, [r3, #24]
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	0003023c 	.word	0x0003023c

000b6248 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <hal_usart_flush+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	69db      	ldr	r3, [r3, #28]
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	0003023c 	.word	0x0003023c

000b6258 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <hal_usart_is_enabled+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	6a1b      	ldr	r3, [r3, #32]
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	0003023c 	.word	0x0003023c

000b6268 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <hal_usart_available_data_for_write+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	0003023c 	.word	0x0003023c

000b6278 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <hal_usart_init_ex+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	0003023c 	.word	0x0003023c

000b6288 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <hal_i2c_write+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	6a1b      	ldr	r3, [r3, #32]
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	00030228 	.word	0x00030228

000b6298 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <hal_i2c_available+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	00030228 	.word	0x00030228

000b62a8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <hal_i2c_read+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	00030228 	.word	0x00030228

000b62b8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <hal_i2c_peek+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	00030228 	.word	0x00030228

000b62c8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <hal_i2c_flush+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	00030228 	.word	0x00030228

000b62d8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <hal_i2c_is_enabled+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	00030228 	.word	0x00030228

000b62e8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <hal_i2c_init+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	00030228 	.word	0x00030228

000b62f8 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <sock_bind+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	685b      	ldr	r3, [r3, #4]
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	00030238 	.word	0x00030238

000b6308 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <sock_setsockopt+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	699b      	ldr	r3, [r3, #24]
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	00030238 	.word	0x00030238

000b6318 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <sock_close+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	69db      	ldr	r3, [r3, #28]
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	00030238 	.word	0x00030238

000b6328 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <sock_connect+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	6a1b      	ldr	r3, [r3, #32]
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	00030238 	.word	0x00030238

000b6338 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6338:	b508      	push	{r3, lr}
   b633a:	4b02      	ldr	r3, [pc, #8]	; (b6344 <sock_recv+0xc>)
   b633c:	681b      	ldr	r3, [r3, #0]
   b633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6340:	9301      	str	r3, [sp, #4]
   b6342:	bd08      	pop	{r3, pc}
   b6344:	00030238 	.word	0x00030238

000b6348 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b6348:	b508      	push	{r3, lr}
   b634a:	4b02      	ldr	r3, [pc, #8]	; (b6354 <sock_recvfrom+0xc>)
   b634c:	681b      	ldr	r3, [r3, #0]
   b634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6350:	9301      	str	r3, [sp, #4]
   b6352:	bd08      	pop	{r3, pc}
   b6354:	00030238 	.word	0x00030238

000b6358 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6358:	b508      	push	{r3, lr}
   b635a:	4b02      	ldr	r3, [pc, #8]	; (b6364 <sock_send+0xc>)
   b635c:	681b      	ldr	r3, [r3, #0]
   b635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6360:	9301      	str	r3, [sp, #4]
   b6362:	bd08      	pop	{r3, pc}
   b6364:	00030238 	.word	0x00030238

000b6368 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b6368:	b508      	push	{r3, lr}
   b636a:	4b02      	ldr	r3, [pc, #8]	; (b6374 <sock_sendto+0xc>)
   b636c:	681b      	ldr	r3, [r3, #0]
   b636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6370:	9301      	str	r3, [sp, #4]
   b6372:	bd08      	pop	{r3, pc}
   b6374:	00030238 	.word	0x00030238

000b6378 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6378:	b508      	push	{r3, lr}
   b637a:	4b02      	ldr	r3, [pc, #8]	; (b6384 <sock_socket+0xc>)
   b637c:	681b      	ldr	r3, [r3, #0]
   b637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6380:	9301      	str	r3, [sp, #4]
   b6382:	bd08      	pop	{r3, pc}
   b6384:	00030238 	.word	0x00030238

000b6388 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6388:	b508      	push	{r3, lr}
   b638a:	4b02      	ldr	r3, [pc, #8]	; (b6394 <hal_spi_init+0xc>)
   b638c:	681b      	ldr	r3, [r3, #0]
   b638e:	69db      	ldr	r3, [r3, #28]
   b6390:	9301      	str	r3, [sp, #4]
   b6392:	bd08      	pop	{r3, pc}
   b6394:	00030230 	.word	0x00030230

000b6398 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6398:	b508      	push	{r3, lr}
   b639a:	4b02      	ldr	r3, [pc, #8]	; (b63a4 <hal_spi_is_enabled+0xc>)
   b639c:	681b      	ldr	r3, [r3, #0]
   b639e:	6a1b      	ldr	r3, [r3, #32]
   b63a0:	9301      	str	r3, [sp, #4]
   b63a2:	bd08      	pop	{r3, pc}
   b63a4:	00030230 	.word	0x00030230

000b63a8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b02      	ldr	r3, [pc, #8]	; (b63b4 <HAL_USB_USART_Init+0xc>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	681b      	ldr	r3, [r3, #0]
   b63b0:	9301      	str	r3, [sp, #4]
   b63b2:	bd08      	pop	{r3, pc}
   b63b4:	0003024c 	.word	0x0003024c

000b63b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b63b8:	b508      	push	{r3, lr}
   b63ba:	4b02      	ldr	r3, [pc, #8]	; (b63c4 <HAL_USB_USART_Available_Data+0xc>)
   b63bc:	681b      	ldr	r3, [r3, #0]
   b63be:	691b      	ldr	r3, [r3, #16]
   b63c0:	9301      	str	r3, [sp, #4]
   b63c2:	bd08      	pop	{r3, pc}
   b63c4:	0003024c 	.word	0x0003024c

000b63c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b63c8:	b508      	push	{r3, lr}
   b63ca:	4b02      	ldr	r3, [pc, #8]	; (b63d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b63cc:	681b      	ldr	r3, [r3, #0]
   b63ce:	695b      	ldr	r3, [r3, #20]
   b63d0:	9301      	str	r3, [sp, #4]
   b63d2:	bd08      	pop	{r3, pc}
   b63d4:	0003024c 	.word	0x0003024c

000b63d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63d8:	b508      	push	{r3, lr}
   b63da:	4b02      	ldr	r3, [pc, #8]	; (b63e4 <HAL_USB_USART_Receive_Data+0xc>)
   b63dc:	681b      	ldr	r3, [r3, #0]
   b63de:	699b      	ldr	r3, [r3, #24]
   b63e0:	9301      	str	r3, [sp, #4]
   b63e2:	bd08      	pop	{r3, pc}
   b63e4:	0003024c 	.word	0x0003024c

000b63e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63e8:	b508      	push	{r3, lr}
   b63ea:	4b02      	ldr	r3, [pc, #8]	; (b63f4 <HAL_USB_USART_Send_Data+0xc>)
   b63ec:	681b      	ldr	r3, [r3, #0]
   b63ee:	69db      	ldr	r3, [r3, #28]
   b63f0:	9301      	str	r3, [sp, #4]
   b63f2:	bd08      	pop	{r3, pc}
   b63f4:	0003024c 	.word	0x0003024c

000b63f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b63f8:	b508      	push	{r3, lr}
   b63fa:	4b02      	ldr	r3, [pc, #8]	; (b6404 <HAL_USB_USART_Flush_Data+0xc>)
   b63fc:	681b      	ldr	r3, [r3, #0]
   b63fe:	6a1b      	ldr	r3, [r3, #32]
   b6400:	9301      	str	r3, [sp, #4]
   b6402:	bd08      	pop	{r3, pc}
   b6404:	0003024c 	.word	0x0003024c

000b6408 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6408:	b508      	push	{r3, lr}
   b640a:	4b02      	ldr	r3, [pc, #8]	; (b6414 <panic_+0xc>)
   b640c:	681b      	ldr	r3, [r3, #0]
   b640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6410:	9301      	str	r3, [sp, #4]
   b6412:	bd08      	pop	{r3, pc}
   b6414:	00030260 	.word	0x00030260

000b6418 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6418:	b508      	push	{r3, lr}
   b641a:	4b02      	ldr	r3, [pc, #8]	; (b6424 <log_message+0xc>)
   b641c:	681b      	ldr	r3, [r3, #0]
   b641e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6420:	9301      	str	r3, [sp, #4]
   b6422:	bd08      	pop	{r3, pc}
   b6424:	00030260 	.word	0x00030260

000b6428 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6428:	b508      	push	{r3, lr}
   b642a:	4b02      	ldr	r3, [pc, #8]	; (b6434 <system_mode+0xc>)
   b642c:	681b      	ldr	r3, [r3, #0]
   b642e:	681b      	ldr	r3, [r3, #0]
   b6430:	9301      	str	r3, [sp, #4]
   b6432:	bd08      	pop	{r3, pc}
   b6434:	00030220 	.word	0x00030220

000b6438 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6438:	b508      	push	{r3, lr}
   b643a:	4b02      	ldr	r3, [pc, #8]	; (b6444 <set_system_mode+0xc>)
   b643c:	681b      	ldr	r3, [r3, #0]
   b643e:	685b      	ldr	r3, [r3, #4]
   b6440:	9301      	str	r3, [sp, #4]
   b6442:	bd08      	pop	{r3, pc}
   b6444:	00030220 	.word	0x00030220

000b6448 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6448:	b508      	push	{r3, lr}
   b644a:	4b02      	ldr	r3, [pc, #8]	; (b6454 <system_thread_set_state+0xc>)
   b644c:	681b      	ldr	r3, [r3, #0]
   b644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6450:	9301      	str	r3, [sp, #4]
   b6452:	bd08      	pop	{r3, pc}
   b6454:	00030220 	.word	0x00030220

000b6458 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6458:	b508      	push	{r3, lr}
   b645a:	4b02      	ldr	r3, [pc, #8]	; (b6464 <application_thread_current+0xc>)
   b645c:	681b      	ldr	r3, [r3, #0]
   b645e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6460:	9301      	str	r3, [sp, #4]
   b6462:	bd08      	pop	{r3, pc}
   b6464:	00030220 	.word	0x00030220

000b6468 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6468:	b508      	push	{r3, lr}
   b646a:	4b02      	ldr	r3, [pc, #8]	; (b6474 <application_thread_invoke+0xc>)
   b646c:	681b      	ldr	r3, [r3, #0]
   b646e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6470:	9301      	str	r3, [sp, #4]
   b6472:	bd08      	pop	{r3, pc}
   b6474:	00030220 	.word	0x00030220

000b6478 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b02      	ldr	r3, [pc, #8]	; (b6484 <system_thread_get_state+0xc>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6480:	9301      	str	r3, [sp, #4]
   b6482:	bd08      	pop	{r3, pc}
   b6484:	00030220 	.word	0x00030220

000b6488 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6488:	b508      	push	{r3, lr}
   b648a:	4b03      	ldr	r3, [pc, #12]	; (b6498 <system_ctrl_set_app_request_handler+0x10>)
   b648c:	681b      	ldr	r3, [r3, #0]
   b648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6492:	9301      	str	r3, [sp, #4]
   b6494:	bd08      	pop	{r3, pc}
   b6496:	0000      	.short	0x0000
   b6498:	00030220 	.word	0x00030220

000b649c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b649c:	b508      	push	{r3, lr}
   b649e:	4b03      	ldr	r3, [pc, #12]	; (b64ac <system_ctrl_set_result+0x10>)
   b64a0:	681b      	ldr	r3, [r3, #0]
   b64a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b64a6:	9301      	str	r3, [sp, #4]
   b64a8:	bd08      	pop	{r3, pc}
   b64aa:	0000      	.short	0x0000
   b64ac:	00030220 	.word	0x00030220

000b64b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <network_connect+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	685b      	ldr	r3, [r3, #4]
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	00030240 	.word	0x00030240

000b64c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <network_connecting+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	689b      	ldr	r3, [r3, #8]
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	00030240 	.word	0x00030240

000b64d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <network_disconnect+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	68db      	ldr	r3, [r3, #12]
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	00030240 	.word	0x00030240

000b64e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <network_ready+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	691b      	ldr	r3, [r3, #16]
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	00030240 	.word	0x00030240

000b64f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <network_on+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	695b      	ldr	r3, [r3, #20]
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	00030240 	.word	0x00030240

000b6500 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <network_off+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	699b      	ldr	r3, [r3, #24]
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	00030240 	.word	0x00030240

000b6510 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <network_listen+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	69db      	ldr	r3, [r3, #28]
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	00030240 	.word	0x00030240

000b6520 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <network_listening+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	6a1b      	ldr	r3, [r3, #32]
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	00030240 	.word	0x00030240

000b6530 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <network_set_listen_timeout+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	00030240 	.word	0x00030240

000b6540 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <network_get_listen_timeout+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	00030240 	.word	0x00030240

000b6550 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <network_is_on+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	00030240 	.word	0x00030240

000b6560 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <network_is_off+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	00030240 	.word	0x00030240

000b6570 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <spark_variable+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	681b      	ldr	r3, [r3, #0]
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	00030244 	.word	0x00030244

000b6580 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6580:	b508      	push	{r3, lr}
   b6582:	4b02      	ldr	r3, [pc, #8]	; (b658c <spark_process+0xc>)
   b6584:	681b      	ldr	r3, [r3, #0]
   b6586:	689b      	ldr	r3, [r3, #8]
   b6588:	9301      	str	r3, [sp, #4]
   b658a:	bd08      	pop	{r3, pc}
   b658c:	00030244 	.word	0x00030244

000b6590 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6590:	b508      	push	{r3, lr}
   b6592:	4b02      	ldr	r3, [pc, #8]	; (b659c <spark_cloud_flag_connected+0xc>)
   b6594:	681b      	ldr	r3, [r3, #0]
   b6596:	695b      	ldr	r3, [r3, #20]
   b6598:	9301      	str	r3, [sp, #4]
   b659a:	bd08      	pop	{r3, pc}
   b659c:	00030244 	.word	0x00030244

000b65a0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b65a0:	b508      	push	{r3, lr}
   b65a2:	4b02      	ldr	r3, [pc, #8]	; (b65ac <spark_send_event+0xc>)
   b65a4:	681b      	ldr	r3, [r3, #0]
   b65a6:	6a1b      	ldr	r3, [r3, #32]
   b65a8:	9301      	str	r3, [sp, #4]
   b65aa:	bd08      	pop	{r3, pc}
   b65ac:	00030244 	.word	0x00030244

000b65b0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b65b0:	b508      	push	{r3, lr}
   b65b2:	4b02      	ldr	r3, [pc, #8]	; (b65bc <spark_subscribe+0xc>)
   b65b4:	681b      	ldr	r3, [r3, #0]
   b65b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65b8:	9301      	str	r3, [sp, #4]
   b65ba:	bd08      	pop	{r3, pc}
   b65bc:	00030244 	.word	0x00030244

000b65c0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b65c0:	b508      	push	{r3, lr}
   b65c2:	4b02      	ldr	r3, [pc, #8]	; (b65cc <spark_sync_time_pending+0xc>)
   b65c4:	681b      	ldr	r3, [r3, #0]
   b65c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65c8:	9301      	str	r3, [sp, #4]
   b65ca:	bd08      	pop	{r3, pc}
   b65cc:	00030244 	.word	0x00030244

000b65d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b65d0:	b508      	push	{r3, lr}
   b65d2:	4b02      	ldr	r3, [pc, #8]	; (b65dc <spark_set_random_seed_from_cloud_handler+0xc>)
   b65d4:	681b      	ldr	r3, [r3, #0]
   b65d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65d8:	9301      	str	r3, [sp, #4]
   b65da:	bd08      	pop	{r3, pc}
   b65dc:	00030244 	.word	0x00030244

000b65e0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b65e0:	b508      	push	{r3, lr}
   b65e2:	4b02      	ldr	r3, [pc, #8]	; (b65ec <malloc+0xc>)
   b65e4:	681b      	ldr	r3, [r3, #0]
   b65e6:	681b      	ldr	r3, [r3, #0]
   b65e8:	9301      	str	r3, [sp, #4]
   b65ea:	bd08      	pop	{r3, pc}
   b65ec:	0003021c 	.word	0x0003021c

000b65f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b65f0:	b508      	push	{r3, lr}
   b65f2:	4b02      	ldr	r3, [pc, #8]	; (b65fc <free+0xc>)
   b65f4:	681b      	ldr	r3, [r3, #0]
   b65f6:	685b      	ldr	r3, [r3, #4]
   b65f8:	9301      	str	r3, [sp, #4]
   b65fa:	bd08      	pop	{r3, pc}
   b65fc:	0003021c 	.word	0x0003021c

000b6600 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6600:	b508      	push	{r3, lr}
   b6602:	4b02      	ldr	r3, [pc, #8]	; (b660c <realloc+0xc>)
   b6604:	681b      	ldr	r3, [r3, #0]
   b6606:	689b      	ldr	r3, [r3, #8]
   b6608:	9301      	str	r3, [sp, #4]
   b660a:	bd08      	pop	{r3, pc}
   b660c:	0003021c 	.word	0x0003021c

000b6610 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6610:	b508      	push	{r3, lr}
   b6612:	4b02      	ldr	r3, [pc, #8]	; (b661c <sprintf+0xc>)
   b6614:	681b      	ldr	r3, [r3, #0]
   b6616:	68db      	ldr	r3, [r3, #12]
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	bd08      	pop	{r3, pc}
   b661c:	0003021c 	.word	0x0003021c

000b6620 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6620:	b508      	push	{r3, lr}
   b6622:	4b02      	ldr	r3, [pc, #8]	; (b662c <sscanf+0xc>)
   b6624:	681b      	ldr	r3, [r3, #0]
   b6626:	695b      	ldr	r3, [r3, #20]
   b6628:	9301      	str	r3, [sp, #4]
   b662a:	bd08      	pop	{r3, pc}
   b662c:	0003021c 	.word	0x0003021c

000b6630 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6630:	b508      	push	{r3, lr}
   b6632:	4b02      	ldr	r3, [pc, #8]	; (b663c <vsnprintf+0xc>)
   b6634:	681b      	ldr	r3, [r3, #0]
   b6636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6638:	9301      	str	r3, [sp, #4]
   b663a:	bd08      	pop	{r3, pc}
   b663c:	0003021c 	.word	0x0003021c

000b6640 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6640:	b508      	push	{r3, lr}
   b6642:	4b02      	ldr	r3, [pc, #8]	; (b664c <abort+0xc>)
   b6644:	681b      	ldr	r3, [r3, #0]
   b6646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6648:	9301      	str	r3, [sp, #4]
   b664a:	bd08      	pop	{r3, pc}
   b664c:	0003021c 	.word	0x0003021c

000b6650 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6650:	b508      	push	{r3, lr}
   b6652:	4b02      	ldr	r3, [pc, #8]	; (b665c <_malloc_r+0xc>)
   b6654:	681b      	ldr	r3, [r3, #0]
   b6656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6658:	9301      	str	r3, [sp, #4]
   b665a:	bd08      	pop	{r3, pc}
   b665c:	0003021c 	.word	0x0003021c

000b6660 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6660:	b508      	push	{r3, lr}
   b6662:	4b02      	ldr	r3, [pc, #8]	; (b666c <__errno+0xc>)
   b6664:	681b      	ldr	r3, [r3, #0]
   b6666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6668:	9301      	str	r3, [sp, #4]
   b666a:	bd08      	pop	{r3, pc}
   b666c:	0003021c 	.word	0x0003021c

000b6670 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6670:	b508      	push	{r3, lr}
   b6672:	4b02      	ldr	r3, [pc, #8]	; (b667c <__assert_func+0xc>)
   b6674:	681b      	ldr	r3, [r3, #0]
   b6676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6678:	9301      	str	r3, [sp, #4]
   b667a:	bd08      	pop	{r3, pc}
   b667c:	0003021c 	.word	0x0003021c

000b6680 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6680:	b508      	push	{r3, lr}
   b6682:	4b02      	ldr	r3, [pc, #8]	; (b668c <newlib_impure_ptr_callback+0xc>)
   b6684:	681b      	ldr	r3, [r3, #0]
   b6686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6688:	9301      	str	r3, [sp, #4]
   b668a:	bd08      	pop	{r3, pc}
   b668c:	0003021c 	.word	0x0003021c

000b6690 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6690:	b508      	push	{r3, lr}
   b6692:	4b02      	ldr	r3, [pc, #8]	; (b669c <localtime_r+0xc>)
   b6694:	681b      	ldr	r3, [r3, #0]
   b6696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6698:	9301      	str	r3, [sp, #4]
   b669a:	bd08      	pop	{r3, pc}
   b669c:	0003021c 	.word	0x0003021c

000b66a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b66a0:	2200      	movs	r2, #0
   b66a2:	6840      	ldr	r0, [r0, #4]
   b66a4:	4611      	mov	r1, r2
   b66a6:	f7ff bf3b 	b.w	b6520 <network_listening>

000b66aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b66aa:	2200      	movs	r2, #0
   b66ac:	6840      	ldr	r0, [r0, #4]
   b66ae:	4611      	mov	r1, r2
   b66b0:	f7ff bf46 	b.w	b6540 <network_get_listen_timeout>

000b66b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b66b4:	6840      	ldr	r0, [r0, #4]
   b66b6:	2200      	movs	r2, #0
   b66b8:	f7ff bf3a 	b.w	b6530 <network_set_listen_timeout>

000b66bc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b66bc:	6840      	ldr	r0, [r0, #4]
   b66be:	2200      	movs	r2, #0
   b66c0:	f081 0101 	eor.w	r1, r1, #1
   b66c4:	f7ff bf24 	b.w	b6510 <network_listen>

000b66c8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b66c8:	2300      	movs	r3, #0
   b66ca:	6840      	ldr	r0, [r0, #4]
   b66cc:	461a      	mov	r2, r3
   b66ce:	4619      	mov	r1, r3
   b66d0:	f7ff bf16 	b.w	b6500 <network_off>

000b66d4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b66d4:	2300      	movs	r3, #0
   b66d6:	6840      	ldr	r0, [r0, #4]
   b66d8:	461a      	mov	r2, r3
   b66da:	4619      	mov	r1, r3
   b66dc:	f7ff bf08 	b.w	b64f0 <network_on>

000b66e0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b66e0:	2200      	movs	r2, #0
   b66e2:	6840      	ldr	r0, [r0, #4]
   b66e4:	4611      	mov	r1, r2
   b66e6:	f7ff befb 	b.w	b64e0 <network_ready>

000b66ea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b66ea:	2200      	movs	r2, #0
   b66ec:	6840      	ldr	r0, [r0, #4]
   b66ee:	4611      	mov	r1, r2
   b66f0:	f7ff bee6 	b.w	b64c0 <network_connecting>

000b66f4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b66f4:	6840      	ldr	r0, [r0, #4]
   b66f6:	2200      	movs	r2, #0
   b66f8:	2102      	movs	r1, #2
   b66fa:	f7ff bee9 	b.w	b64d0 <network_disconnect>

000b66fe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b66fe:	2300      	movs	r3, #0
   b6700:	6840      	ldr	r0, [r0, #4]
   b6702:	461a      	mov	r2, r3
   b6704:	f7ff bed4 	b.w	b64b0 <network_connect>

000b6708 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6708:	4b02      	ldr	r3, [pc, #8]	; (b6714 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b670a:	2203      	movs	r2, #3
   b670c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b670e:	4a02      	ldr	r2, [pc, #8]	; (b6718 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6710:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6712:	4770      	bx	lr
   b6714:	2003e674 	.word	0x2003e674
   b6718:	000bce7c 	.word	0x000bce7c

000b671c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b671c:	b510      	push	{r4, lr}
   b671e:	4604      	mov	r4, r0
   b6720:	4608      	mov	r0, r1
{
    _spi = spi;
   b6722:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6724:	f7ff fe30 	bl	b6388 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6728:	2300      	movs	r3, #0
   b672a:	6063      	str	r3, [r4, #4]
}
   b672c:	4620      	mov	r0, r4
   b672e:	bd10      	pop	{r4, pc}

000b6730 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6730:	4b05      	ldr	r3, [pc, #20]	; (b6748 <_GLOBAL__sub_I_System+0x18>)
   b6732:	2202      	movs	r2, #2
   b6734:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6736:	4b05      	ldr	r3, [pc, #20]	; (b674c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6738:	4a05      	ldr	r2, [pc, #20]	; (b6750 <_GLOBAL__sub_I_System+0x20>)
   b673a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b673c:	2000      	movs	r0, #0
   b673e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6742:	f7ff be79 	b.w	b6438 <set_system_mode>
   b6746:	bf00      	nop
   b6748:	2003e688 	.word	0x2003e688
   b674c:	2003e67c 	.word	0x2003e67c
   b6750:	ffff0000 	.word	0xffff0000

000b6754 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b6754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b6758:	1e93      	subs	r3, r2, #2
{
   b675a:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b675c:	2b22      	cmp	r3, #34	; 0x22
   b675e:	f04f 0300 	mov.w	r3, #0
{
   b6762:	460d      	mov	r5, r1
   b6764:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b6766:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b676a:	d927      	bls.n	b67bc <ltoa+0x68>

      if (10 == base && N < 0L)
   b676c:	2800      	cmp	r0, #0
   b676e:	da2a      	bge.n	b67c6 <ltoa+0x72>
      {
            *head++ = '-';
   b6770:	462e      	mov	r6, r5
   b6772:	232d      	movs	r3, #45	; 0x2d
   b6774:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b6778:	4240      	negs	r0, r0
   b677a:	240a      	movs	r4, #10
      *tail-- = '\0';
   b677c:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b6780:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b6784:	4622      	mov	r2, r4
   b6786:	4601      	mov	r1, r0
   b6788:	a801      	add	r0, sp, #4
   b678a:	f003 ff9c 	bl	ba6c6 <ldiv>
   b678e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b6790:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b6792:	2b09      	cmp	r3, #9
   b6794:	bfcc      	ite	gt
   b6796:	2237      	movgt	r2, #55	; 0x37
   b6798:	2230      	movle	r2, #48	; 0x30
   b679a:	fa52 f383 	uxtab	r3, r2, r3
   b679e:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b67a2:	f108 0801 	add.w	r8, r8, #1
   b67a6:	2800      	cmp	r0, #0
   b67a8:	d1ec      	bne.n	b6784 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b67aa:	4642      	mov	r2, r8
   b67ac:	1c79      	adds	r1, r7, #1
   b67ae:	4630      	mov	r0, r6
   b67b0:	f003 ffad 	bl	ba70e <memcpy>
      return str;
}
   b67b4:	4628      	mov	r0, r5
   b67b6:	b00c      	add	sp, #48	; 0x30
   b67b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b67bc:	2a0a      	cmp	r2, #10
   b67be:	d0d5      	beq.n	b676c <ltoa+0x18>
      if (uarg)
   b67c0:	b118      	cbz	r0, b67ca <ltoa+0x76>
   b67c2:	462e      	mov	r6, r5
   b67c4:	e7da      	b.n	b677c <ltoa+0x28>
   b67c6:	240a      	movs	r4, #10
   b67c8:	e7fa      	b.n	b67c0 <ltoa+0x6c>
      else  *tail-- = '0';
   b67ca:	2330      	movs	r3, #48	; 0x30
   b67cc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b67d0:	462e      	mov	r6, r5
   b67d2:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b67d6:	f04f 0802 	mov.w	r8, #2
   b67da:	e7e6      	b.n	b67aa <ltoa+0x56>

000b67dc <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b67dc:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b67de:	6804      	ldr	r4, [r0, #0]
   b67e0:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b67e2:	46a4      	mov	ip, r4
    }
   b67e4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b67e8:	4760      	bx	ip

000b67ea <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b67ea:	6803      	ldr	r3, [r0, #0]
   b67ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b67ee:	4718      	bx	r3

000b67f0 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b67f0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b67f2:	4770      	bx	lr

000b67f4 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b67f4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b67f6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b67f8:	1a10      	subs	r0, r2, r0
   b67fa:	4770      	bx	lr

000b67fc <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b67fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b67fe:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b6800:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6802:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6804:	4b0c      	ldr	r3, [pc, #48]	; (b6838 <_ZN3UDP9endPacketEv+0x3c>)
   b6806:	9302      	str	r3, [sp, #8]
   b6808:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b680c:	4604      	mov	r4, r0
   b680e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6810:	ad03      	add	r5, sp, #12
   b6812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6814:	6833      	ldr	r3, [r6, #0]
   b6816:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6818:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b681a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b681c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b681e:	9300      	str	r3, [sp, #0]
   b6820:	4620      	mov	r0, r4
   b6822:	ab02      	add	r3, sp, #8
   b6824:	47b8      	blx	r7
    flush(); // wait for send to complete
   b6826:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6828:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b682a:	69db      	ldr	r3, [r3, #28]
   b682c:	4620      	mov	r0, r4
   b682e:	4798      	blx	r3
    return result;
}
   b6830:	4628      	mov	r0, r5
   b6832:	b009      	add	sp, #36	; 0x24
   b6834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6836:	bf00      	nop
   b6838:	000bd15c 	.word	0x000bd15c

000b683c <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b683c:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b683e:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b6840:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b6844:	68db      	ldr	r3, [r3, #12]
   b6846:	2201      	movs	r2, #1
   b6848:	f10d 0107 	add.w	r1, sp, #7
   b684c:	4798      	blx	r3
}
   b684e:	b003      	add	sp, #12
   b6850:	f85d fb04 	ldr.w	pc, [sp], #4

000b6854 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b6854:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b6856:	6803      	ldr	r3, [r0, #0]
   b6858:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b685a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b685c:	4798      	blx	r3
   b685e:	b128      	cbz	r0, b686c <_ZN3UDP4readEv+0x18>
   b6860:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b6862:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6864:	1c59      	adds	r1, r3, #1
   b6866:	86e1      	strh	r1, [r4, #54]	; 0x36
   b6868:	5cd0      	ldrb	r0, [r2, r3]
}
   b686a:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b686c:	f04f 30ff 	mov.w	r0, #4294967295
   b6870:	e7fb      	b.n	b686a <_ZN3UDP4readEv+0x16>

000b6872 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b6872:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b6874:	6803      	ldr	r3, [r0, #0]
   b6876:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b6878:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b687a:	4798      	blx	r3
   b687c:	b118      	cbz	r0, b6886 <_ZN3UDP4peekEv+0x14>
   b687e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b6880:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6882:	5cd0      	ldrb	r0, [r2, r3]
}
   b6884:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b6886:	f04f 30ff 	mov.w	r0, #4294967295
   b688a:	e7fb      	b.n	b6884 <_ZN3UDP4peekEv+0x12>

000b688c <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b688c:	4770      	bx	lr

000b688e <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b688e:	b410      	push	{r4}
   b6890:	4603      	mov	r3, r0
   b6892:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b6894:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b6896:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b6898:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b689a:	6803      	ldr	r3, [r0, #0]
   b689c:	1a52      	subs	r2, r2, r1
   b689e:	68db      	ldr	r3, [r3, #12]
   b68a0:	4421      	add	r1, r4
}
   b68a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b68a6:	4718      	bx	r3

000b68a8 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b68a8:	f1a0 0010 	sub.w	r0, r0, #16
   b68ac:	f7ff bfef 	b.w	b688e <_ZNK3UDP7printToER5Print>

000b68b0 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b68b0:	b570      	push	{r4, r5, r6, lr}
    stop();
   b68b2:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b68b4:	b08c      	sub	sp, #48	; 0x30
    stop();
   b68b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b68b8:	4604      	mov	r4, r0
   b68ba:	460e      	mov	r6, r1
   b68bc:	4615      	mov	r5, r2
    stop();
   b68be:	4798      	blx	r3
    const int one = 1;
   b68c0:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b68c2:	221c      	movs	r2, #28
   b68c4:	2100      	movs	r1, #0
   b68c6:	a805      	add	r0, sp, #20
    const int one = 1;
   b68c8:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b68ca:	f003 ff48 	bl	ba75e <memset>
    saddr.sin6_len = sizeof(saddr);
   b68ce:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b68d2:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b68d4:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b68d8:	f7ff fc8e 	bl	b61f8 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b68dc:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b68de:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b68e2:	2102      	movs	r1, #2
   b68e4:	200a      	movs	r0, #10
   b68e6:	f7ff fd47 	bl	b6378 <sock_socket>
    if (_sock < 0) {
   b68ea:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b68ec:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b68ee:	db25      	blt.n	b693c <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b68f0:	2204      	movs	r2, #4
   b68f2:	9200      	str	r2, [sp, #0]
   b68f4:	ab02      	add	r3, sp, #8
   b68f6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b68fa:	f7ff fd05 	bl	b6308 <sock_setsockopt>
   b68fe:	b9e8      	cbnz	r0, b693c <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b6900:	b195      	cbz	r5, b6928 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b6902:	9003      	str	r0, [sp, #12]
   b6904:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b6908:	a903      	add	r1, sp, #12
   b690a:	b2e8      	uxtb	r0, r5
   b690c:	f7ff fb6a 	bl	b5fe4 <if_index_to_name>
   b6910:	b9a0      	cbnz	r0, b693c <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b6912:	2306      	movs	r3, #6
   b6914:	9300      	str	r3, [sp, #0]
   b6916:	6960      	ldr	r0, [r4, #20]
   b6918:	ab03      	add	r3, sp, #12
   b691a:	f241 020b 	movw	r2, #4107	; 0x100b
   b691e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6922:	f7ff fcf1 	bl	b6308 <sock_setsockopt>
   b6926:	b948      	cbnz	r0, b693c <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b6928:	6960      	ldr	r0, [r4, #20]
   b692a:	221c      	movs	r2, #28
   b692c:	a905      	add	r1, sp, #20
   b692e:	f7ff fce3 	bl	b62f8 <sock_bind>
   b6932:	b918      	cbnz	r0, b693c <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b6934:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b6936:	2001      	movs	r0, #1
}
   b6938:	b00c      	add	sp, #48	; 0x30
   b693a:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b693c:	6823      	ldr	r3, [r4, #0]
   b693e:	4620      	mov	r0, r4
   b6940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6942:	4798      	blx	r3
   b6944:	2000      	movs	r0, #0
   b6946:	e7f7      	b.n	b6938 <_ZN3UDP5beginEtm+0x88>

000b6948 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b6948:	b510      	push	{r4, lr}
   b694a:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b694c:	6940      	ldr	r0, [r0, #20]
   b694e:	2800      	cmp	r0, #0
   b6950:	db01      	blt.n	b6956 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b6952:	f7ff fce1 	bl	b6318 <sock_close>
    _sock = -1;
   b6956:	f04f 33ff 	mov.w	r3, #4294967295
   b695a:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b695c:	2300      	movs	r3, #0
   b695e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b6960:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b6962:	bd10      	pop	{r4, pc}

000b6964 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b6964:	b570      	push	{r4, r5, r6, lr}
   b6966:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b6968:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b696a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b696c:	b168      	cbz	r0, b698a <_ZN3UDP5writeEPKhj+0x26>
   b696e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b6970:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b6972:	4294      	cmp	r4, r2
   b6974:	bf28      	it	cs
   b6976:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b6978:	4622      	mov	r2, r4
   b697a:	4430      	add	r0, r6
   b697c:	f003 fec7 	bl	ba70e <memcpy>
    _offset += size;
   b6980:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b6982:	4423      	add	r3, r4
   b6984:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b6986:	4620      	mov	r0, r4
   b6988:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b698a:	4604      	mov	r4, r0
   b698c:	e7f1      	b.n	b6972 <_ZN3UDP5writeEPKhj+0xe>

000b698e <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b698e:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b6990:	6803      	ldr	r3, [r0, #0]
   b6992:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b6994:	4604      	mov	r4, r0
   b6996:	460f      	mov	r7, r1
   b6998:	4616      	mov	r6, r2
    if (available()) {
   b699a:	4798      	blx	r3
   b699c:	b190      	cbz	r0, b69c4 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b699e:	6823      	ldr	r3, [r4, #0]
   b69a0:	4620      	mov	r0, r4
   b69a2:	691b      	ldr	r3, [r3, #16]
   b69a4:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b69a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b69a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b69aa:	4286      	cmp	r6, r0
   b69ac:	bfa8      	it	ge
   b69ae:	4606      	movge	r6, r0
   b69b0:	4419      	add	r1, r3
   b69b2:	4632      	mov	r2, r6
   b69b4:	4638      	mov	r0, r7
   b69b6:	f003 feaa 	bl	ba70e <memcpy>
        _offset += read;
   b69ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b69bc:	4433      	add	r3, r6
   b69be:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b69c0:	4630      	mov	r0, r6
   b69c2:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b69c4:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b69c8:	e7fa      	b.n	b69c0 <_ZN3UDP4readEPhj+0x32>

000b69ca <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b69ca:	b530      	push	{r4, r5, lr}
   b69cc:	b087      	sub	sp, #28
   b69ce:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b69d0:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b69d2:	4668      	mov	r0, sp
   b69d4:	f002 fad8 	bl	b8f88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b69d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69da:	3404      	adds	r4, #4
   b69dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69de:	682b      	ldr	r3, [r5, #0]
   b69e0:	7023      	strb	r3, [r4, #0]
    }
   b69e2:	b007      	add	sp, #28
   b69e4:	bd30      	pop	{r4, r5, pc}
	...

000b69e8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b69e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b69ea:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b69ec:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b69ee:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b69f0:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b69f2:	4a0a      	ldr	r2, [pc, #40]	; (b6a1c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b69f4:	9202      	str	r2, [sp, #8]
   b69f6:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b69f8:	468c      	mov	ip, r1
   b69fa:	4606      	mov	r6, r0
   b69fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b69fe:	ad03      	add	r5, sp, #12
   b6a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6a02:	6823      	ldr	r3, [r4, #0]
   b6a04:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b6a06:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b6a0a:	9300      	str	r3, [sp, #0]
   b6a0c:	4672      	mov	r2, lr
   b6a0e:	ab02      	add	r3, sp, #8
   b6a10:	4661      	mov	r1, ip
   b6a12:	4630      	mov	r0, r6
   b6a14:	47b8      	blx	r7
    }
   b6a16:	b009      	add	sp, #36	; 0x24
   b6a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6a1a:	bf00      	nop
   b6a1c:	000bd15c 	.word	0x000bd15c

000b6a20 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b6a20:	b570      	push	{r4, r5, r6, lr}
   b6a22:	4604      	mov	r4, r0
   b6a24:	4b05      	ldr	r3, [pc, #20]	; (b6a3c <_ZN3UDP8remoteIPEv+0x1c>)
   b6a26:	f844 3b04 	str.w	r3, [r4], #4
   b6a2a:	f101 0520 	add.w	r5, r1, #32
   b6a2e:	4606      	mov	r6, r0
   b6a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a34:	682b      	ldr	r3, [r5, #0]
   b6a36:	7023      	strb	r3, [r4, #0]
   b6a38:	4630      	mov	r0, r6
   b6a3a:	bd70      	pop	{r4, r5, r6, pc}
   b6a3c:	000bd15c 	.word	0x000bd15c

000b6a40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b6a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b6a42:	7843      	ldrb	r3, [r0, #1]
   b6a44:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b6a46:	b08d      	sub	sp, #52	; 0x34
   b6a48:	4605      	mov	r5, r0
   b6a4a:	460c      	mov	r4, r1
   b6a4c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b6a4e:	d104      	bne.n	b6a5a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6a50:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6a52:	4620      	mov	r0, r4
   b6a54:	f7ff ffb9 	bl	b69ca <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b6a58:	e022      	b.n	b6aa0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b6a5a:	2b0a      	cmp	r3, #10
   b6a5c:	d125      	bne.n	b6aaa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b6a5e:	2211      	movs	r2, #17
   b6a60:	2100      	movs	r1, #0
   b6a62:	a801      	add	r0, sp, #4
   b6a64:	f003 fe7b 	bl	ba75e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6a68:	68ab      	ldr	r3, [r5, #8]
   b6a6a:	b303      	cbz	r3, b6aae <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6a6c:	f105 0308 	add.w	r3, r5, #8
   b6a70:	ae01      	add	r6, sp, #4
   b6a72:	f105 0c18 	add.w	ip, r5, #24
   b6a76:	6818      	ldr	r0, [r3, #0]
   b6a78:	6859      	ldr	r1, [r3, #4]
   b6a7a:	4632      	mov	r2, r6
   b6a7c:	c203      	stmia	r2!, {r0, r1}
   b6a7e:	3308      	adds	r3, #8
   b6a80:	4563      	cmp	r3, ip
   b6a82:	4616      	mov	r6, r2
   b6a84:	d1f7      	bne.n	b6a76 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b6a86:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6a88:	a901      	add	r1, sp, #4
   b6a8a:	a806      	add	r0, sp, #24
   b6a8c:	ae07      	add	r6, sp, #28
            a.v = 6;
   b6a8e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6a92:	f002 fa2f 	bl	b8ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6a96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6a98:	3404      	adds	r4, #4
   b6a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a9c:	6833      	ldr	r3, [r6, #0]
   b6a9e:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b6aa0:	b11f      	cbz	r7, b6aaa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b6aa2:	8868      	ldrh	r0, [r5, #2]
   b6aa4:	f7ff fba0 	bl	b61e8 <inet_ntohs>
   b6aa8:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b6aaa:	b00d      	add	sp, #52	; 0x34
   b6aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6aae:	68eb      	ldr	r3, [r5, #12]
   b6ab0:	2b00      	cmp	r3, #0
   b6ab2:	d1db      	bne.n	b6a6c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b6ab4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6ab8:	692e      	ldr	r6, [r5, #16]
   b6aba:	f7ff fb8d 	bl	b61d8 <inet_htonl>
   b6abe:	4286      	cmp	r6, r0
   b6ac0:	d1d4      	bne.n	b6a6c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b6ac2:	f105 0114 	add.w	r1, r5, #20
   b6ac6:	e7c4      	b.n	b6a52 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b6ac8 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b6ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6acc:	4617      	mov	r7, r2
   b6ace:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b6ad0:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b6ad2:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6ad4:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b6ad6:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6ad8:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b6ada:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6adc:	f7ff fa62 	bl	b5fa4 <netdb_getaddrinfo>
   b6ae0:	1e04      	subs	r4, r0, #0
   b6ae2:	db20      	blt.n	b6b26 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b6ae4:	9b01      	ldr	r3, [sp, #4]
   b6ae6:	b32b      	cbz	r3, b6b34 <_ZN3UDP11beginPacketEPKct+0x6c>
   b6ae8:	695b      	ldr	r3, [r3, #20]
   b6aea:	b31b      	cbz	r3, b6b34 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b6aec:	a802      	add	r0, sp, #8
   b6aee:	f002 f9f3 	bl	b8ed8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6af2:	9b01      	ldr	r3, [sp, #4]
   b6af4:	2200      	movs	r2, #0
   b6af6:	6958      	ldr	r0, [r3, #20]
   b6af8:	a902      	add	r1, sp, #8
   b6afa:	f7ff ffa1 	bl	b6a40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b6afe:	a802      	add	r0, sp, #8
   b6b00:	f002 fa12 	bl	b8f28 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6b04:	b1b0      	cbz	r0, b6b34 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b6b06:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6b08:	ad03      	add	r5, sp, #12
   b6b0a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b6b0e:	4b0b      	ldr	r3, [pc, #44]	; (b6b3c <_ZN3UDP11beginPacketEPKct+0x74>)
   b6b10:	9308      	str	r3, [sp, #32]
   b6b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b14:	ac09      	add	r4, sp, #36	; 0x24
   b6b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b18:	682b      	ldr	r3, [r5, #0]
   b6b1a:	7023      	strb	r3, [r4, #0]
   b6b1c:	463a      	mov	r2, r7
   b6b1e:	a908      	add	r1, sp, #32
   b6b20:	4630      	mov	r0, r6
   b6b22:	47c0      	blx	r8
   b6b24:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b6b26:	9801      	ldr	r0, [sp, #4]
   b6b28:	f7ff fa34 	bl	b5f94 <netdb_freeaddrinfo>
}
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	b00e      	add	sp, #56	; 0x38
   b6b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b6b34:	f04f 34ff 	mov.w	r4, #4294967295
   b6b38:	e7f5      	b.n	b6b26 <_ZN3UDP11beginPacketEPKct+0x5e>
   b6b3a:	bf00      	nop
   b6b3c:	000bd15c 	.word	0x000bd15c

000b6b40 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b6b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b6b44:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b6b48:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b6b4c:	b090      	sub	sp, #64	; 0x40
   b6b4e:	4605      	mov	r5, r0
   b6b50:	460e      	mov	r6, r1
   b6b52:	4690      	mov	r8, r2
   b6b54:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b6b56:	db3c      	blt.n	b6bd2 <_ZN3UDP13receivePacketEPhjm+0x92>
   b6b58:	2900      	cmp	r1, #0
   b6b5a:	d03a      	beq.n	b6bd2 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b6b5c:	f04f 0a1c 	mov.w	sl, #28
   b6b60:	af09      	add	r7, sp, #36	; 0x24
   b6b62:	4652      	mov	r2, sl
   b6b64:	2100      	movs	r1, #0
   b6b66:	4638      	mov	r0, r7
   b6b68:	f003 fdf9 	bl	ba75e <memset>
        socklen_t slen = sizeof(saddr);
   b6b6c:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b6b70:	b1dc      	cbz	r4, b6baa <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b6b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6b76:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b6b7a:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b6b7e:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b6b80:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6b82:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b6b84:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b6b88:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6b8a:	9300      	str	r3, [sp, #0]
   b6b8c:	f241 0206 	movw	r2, #4102	; 0x1006
   b6b90:	446b      	add	r3, sp
   b6b92:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6b96:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b6b98:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6b9a:	f7ff fbb5 	bl	b6308 <sock_setsockopt>
            if (ret) {
   b6b9e:	4604      	mov	r4, r0
   b6ba0:	b120      	cbz	r0, b6bac <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	b010      	add	sp, #64	; 0x40
   b6ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b6baa:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b6bac:	ab03      	add	r3, sp, #12
   b6bae:	e9cd 7300 	strd	r7, r3, [sp]
   b6bb2:	6968      	ldr	r0, [r5, #20]
   b6bb4:	4623      	mov	r3, r4
   b6bb6:	4642      	mov	r2, r8
   b6bb8:	4631      	mov	r1, r6
   b6bba:	f7ff fbc5 	bl	b6348 <sock_recvfrom>
        if (ret >= 0) {
   b6bbe:	1e04      	subs	r4, r0, #0
   b6bc0:	dbef      	blt.n	b6ba2 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b6bc2:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b6bc6:	f105 011c 	add.w	r1, r5, #28
   b6bca:	4638      	mov	r0, r7
   b6bcc:	f7ff ff38 	bl	b6a40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b6bd0:	e7e7      	b.n	b6ba2 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b6bd2:	f04f 34ff 	mov.w	r4, #4294967295
   b6bd6:	e7e4      	b.n	b6ba2 <_ZN3UDP13receivePacketEPhjm+0x62>

000b6bd8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b6bd8:	b538      	push	{r3, r4, r5, lr}
   b6bda:	4605      	mov	r5, r0
   b6bdc:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6bde:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b6be0:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b6be2:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b6be4:	d110      	bne.n	b6c08 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b6be6:	f640 231c 	movw	r3, #2588	; 0xa1c
   b6bea:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b6bec:	f7ff fb04 	bl	b61f8 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b6bf0:	3408      	adds	r4, #8
   b6bf2:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b6bf4:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b6bf8:	3514      	adds	r5, #20
   b6bfa:	f853 2b04 	ldr.w	r2, [r3], #4
   b6bfe:	f844 2b04 	str.w	r2, [r4], #4
   b6c02:	42ab      	cmp	r3, r5
   b6c04:	d1f9      	bne.n	b6bfa <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b6c06:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b6c08:	2b04      	cmp	r3, #4
   b6c0a:	d1fc      	bne.n	b6c06 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b6c0c:	f44f 7304 	mov.w	r3, #528	; 0x210
   b6c10:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b6c12:	f7ff faf1 	bl	b61f8 <inet_htons>
   b6c16:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b6c18:	6868      	ldr	r0, [r5, #4]
   b6c1a:	f7ff fadd 	bl	b61d8 <inet_htonl>
   b6c1e:	6060      	str	r0, [r4, #4]
}
   b6c20:	e7f1      	b.n	b6c06 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b6c22 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b6c22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c26:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b6c28:	af03      	add	r7, sp, #12
   b6c2a:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b6c2e:	4698      	mov	r8, r3
   b6c30:	4604      	mov	r4, r0
   b6c32:	460d      	mov	r5, r1
   b6c34:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b6c36:	2100      	movs	r1, #0
   b6c38:	464a      	mov	r2, r9
   b6c3a:	4638      	mov	r0, r7
   b6c3c:	f003 fd8f 	bl	ba75e <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b6c40:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b6c44:	463a      	mov	r2, r7
   b6c46:	4640      	mov	r0, r8
   b6c48:	f7ff ffc6 	bl	b6bd8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b6c4c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b6c50:	b153      	cbz	r3, b6c68 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b6c52:	e9cd 7900 	strd	r7, r9, [sp]
   b6c56:	6960      	ldr	r0, [r4, #20]
   b6c58:	2300      	movs	r3, #0
   b6c5a:	4632      	mov	r2, r6
   b6c5c:	4629      	mov	r1, r5
   b6c5e:	f7ff fb83 	bl	b6368 <sock_sendto>
}
   b6c62:	b00b      	add	sp, #44	; 0x2c
   b6c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b6c68:	f04f 30ff 	mov.w	r0, #4294967295
   b6c6c:	e7f9      	b.n	b6c62 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>

000b6c6e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>:
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b6c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c70:	b091      	sub	sp, #68	; 0x44
   b6c72:	460c      	mov	r4, r1
   b6c74:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   b6c76:	2100      	movs	r1, #0
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b6c78:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   b6c7a:	a809      	add	r0, sp, #36	; 0x24
   b6c7c:	221c      	movs	r2, #28
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b6c7e:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   b6c80:	f003 fd6d 	bl	ba75e <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   b6c84:	aa09      	add	r2, sp, #36	; 0x24
   b6c86:	2100      	movs	r1, #0
   b6c88:	4620      	mov	r0, r4
   b6c8a:	f7ff ffa5 	bl	b6bd8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   b6c8e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b6c92:	2b02      	cmp	r3, #2
   b6c94:	d12d      	bne.n	b6cf2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x84>
        struct ip_mreq mreq = {};
   b6c96:	2300      	movs	r3, #0
   b6c98:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   b6c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6c9c:	9304      	str	r3, [sp, #16]
        if (ifindex != 0) {
   b6c9e:	b1bd      	cbz	r5, b6cd0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
            if (!if_get_by_index(ifindex, &iface)) {
   b6ca0:	a902      	add	r1, sp, #8
   b6ca2:	4628      	mov	r0, r5
   b6ca4:	f7ff f9a6 	bl	b5ff4 <if_get_by_index>
   b6ca8:	b990      	cbnz	r0, b6cd0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
                struct if_addrs* addrs = nullptr;
   b6caa:	9003      	str	r0, [sp, #12]
                if (!if_get_addrs(iface, &addrs)) {
   b6cac:	a903      	add	r1, sp, #12
   b6cae:	9802      	ldr	r0, [sp, #8]
   b6cb0:	f7ff f9a8 	bl	b6004 <if_get_addrs>
   b6cb4:	b948      	cbnz	r0, b6cca <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b6cb6:	9b03      	ldr	r3, [sp, #12]
   b6cb8:	b13b      	cbz	r3, b6cca <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                        auto ifaddr = a->if_addr->addr;
   b6cba:	68da      	ldr	r2, [r3, #12]
   b6cbc:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   b6cbe:	7851      	ldrb	r1, [r2, #1]
   b6cc0:	2902      	cmp	r1, #2
   b6cc2:	d114      	bne.n	b6cee <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   b6cc4:	6852      	ldr	r2, [r2, #4]
   b6cc6:	b192      	cbz	r2, b6cee <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   b6cc8:	9205      	str	r2, [sp, #20]
                SCOPE_GUARD({
   b6cca:	9803      	ldr	r0, [sp, #12]
   b6ccc:	f7ff f9a2 	bl	b6014 <if_free_if_addrs>
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   b6cd0:	2f00      	cmp	r7, #0
   b6cd2:	f04f 0308 	mov.w	r3, #8
   b6cd6:	9300      	str	r3, [sp, #0]
   b6cd8:	bf18      	it	ne
   b6cda:	2203      	movne	r2, #3
   b6cdc:	ab04      	add	r3, sp, #16
   b6cde:	bf08      	it	eq
   b6ce0:	2204      	moveq	r2, #4
   b6ce2:	2100      	movs	r1, #0
   b6ce4:	4630      	mov	r0, r6
   b6ce6:	f7ff fb0f 	bl	b6308 <sock_setsockopt>
}
   b6cea:	b011      	add	sp, #68	; 0x44
   b6cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b6cee:	681b      	ldr	r3, [r3, #0]
   b6cf0:	e7e2      	b.n	b6cb8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x4a>
    } else if (s.ss_family == AF_INET6) {
   b6cf2:	2b0a      	cmp	r3, #10
   b6cf4:	d115      	bne.n	b6d22 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0xb4>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   b6cf6:	ab0b      	add	r3, sp, #44	; 0x2c
   b6cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b6cfa:	ac04      	add	r4, sp, #16
   b6cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b6d00:	2f00      	cmp	r7, #0
   b6d02:	f04f 0314 	mov.w	r3, #20
   b6d06:	9300      	str	r3, [sp, #0]
   b6d08:	bf18      	it	ne
   b6d0a:	220c      	movne	r2, #12
   b6d0c:	4623      	mov	r3, r4
   b6d0e:	bf08      	it	eq
   b6d10:	220d      	moveq	r2, #13
   b6d12:	2129      	movs	r1, #41	; 0x29
   b6d14:	4630      	mov	r0, r6
        mreq.ipv6mr_interface = ifindex;
   b6d16:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b6d18:	f7ff faf6 	bl	b6308 <sock_setsockopt>
   b6d1c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6d20:	e7e3      	b.n	b6cea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>
    return -1;
   b6d22:	f04f 30ff 	mov.w	r0, #4294967295
   b6d26:	e7e0      	b.n	b6cea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>

000b6d28 <_ZN3UDPC1Ev>:
UDP::UDP()
   b6d28:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6d2a:	2500      	movs	r5, #0
   b6d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d30:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b6d34:	4b0b      	ldr	r3, [pc, #44]	; (b6d64 <_ZN3UDPC1Ev+0x3c>)
   b6d36:	f103 0208 	add.w	r2, r3, #8
   b6d3a:	336c      	adds	r3, #108	; 0x6c
   b6d3c:	6103      	str	r3, [r0, #16]
   b6d3e:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b6d42:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b6d44:	6002      	str	r2, [r0, #0]
   b6d46:	6143      	str	r3, [r0, #20]
   b6d48:	301c      	adds	r0, #28
   b6d4a:	f002 f8c5 	bl	b8ed8 <_ZN9IPAddressC1Ev>
   b6d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
   b6d52:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b6d56:	86e5      	strh	r5, [r4, #54]	; 0x36
   b6d58:	8725      	strh	r5, [r4, #56]	; 0x38
   b6d5a:	63e5      	str	r5, [r4, #60]	; 0x3c
   b6d5c:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b6d60:	4620      	mov	r0, r4
   b6d62:	bd38      	pop	{r3, r4, r5, pc}
   b6d64:	000bceb0 	.word	0x000bceb0

000b6d68 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b6d68:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b6d6a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b6d6e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b6d70:	b123      	cbz	r3, b6d7c <_ZN3UDP13releaseBufferEv+0x14>
   b6d72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b6d74:	b110      	cbz	r0, b6d7c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b6d76:	2101      	movs	r1, #1
   b6d78:	f7fd f993 	bl	b40a2 <_ZdlPvj>
    _buffer = NULL;
   b6d7c:	2300      	movs	r3, #0
   b6d7e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b6d80:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b6d84:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b6d86:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b6d88:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b6d8a:	bd10      	pop	{r4, pc}

000b6d8c <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b6d8c:	b570      	push	{r4, r5, r6, lr}
   b6d8e:	4604      	mov	r4, r0
   b6d90:	4616      	mov	r6, r2
   b6d92:	460d      	mov	r5, r1
    releaseBuffer();
   b6d94:	f7ff ffe8 	bl	b6d68 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b6d98:	2300      	movs	r3, #0
    _buffer = buffer;
   b6d9a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b6d9c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b6d9e:	b12e      	cbz	r6, b6dac <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b6da0:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b6da2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b6da4:	3800      	subs	r0, #0
   b6da6:	bf18      	it	ne
   b6da8:	2001      	movne	r0, #1
   b6daa:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b6dac:	2d00      	cmp	r5, #0
   b6dae:	d0f8      	beq.n	b6da2 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b6db0:	4628      	mov	r0, r5
   b6db2:	f7fd f972 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b6db6:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b6db8:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b6dba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b6dbe:	2800      	cmp	r0, #0
   b6dc0:	d0ef      	beq.n	b6da2 <_ZN3UDP9setBufferEjPh+0x16>
   b6dc2:	e7ed      	b.n	b6da0 <_ZN3UDP9setBufferEjPh+0x14>

000b6dc4 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b6dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6dc6:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b6dc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b6dca:	4605      	mov	r5, r0
   b6dcc:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b6dce:	b91a      	cbnz	r2, b6dd8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b6dd0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b6dd2:	b109      	cbz	r1, b6dd8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b6dd4:	f7ff ffda 	bl	b6d8c <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b6dd8:	3404      	adds	r4, #4
   b6dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6ddc:	f105 0620 	add.w	r6, r5, #32
   b6de0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6de2:	6823      	ldr	r3, [r4, #0]
   b6de4:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b6de6:	2300      	movs	r3, #0
}
   b6de8:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b6dea:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b6dec:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b6dee:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b6df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6df2 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b6df2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b6df4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b6df6:	4604      	mov	r4, r0
   b6df8:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b6dfa:	b92a      	cbnz	r2, b6e08 <_ZN3UDP11parsePacketEm+0x16>
   b6dfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b6dfe:	b119      	cbz	r1, b6e08 <_ZN3UDP11parsePacketEm+0x16>
   b6e00:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b6e02:	f7ff ffc3 	bl	b6d8c <_ZN3UDP9setBufferEjPh>
   b6e06:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b6e08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b6e0a:	2200      	movs	r2, #0
   b6e0c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b6e0e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b6e10:	b141      	cbz	r1, b6e24 <_ZN3UDP11parsePacketEm+0x32>
   b6e12:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b6e14:	b132      	cbz	r2, b6e24 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b6e16:	6820      	ldr	r0, [r4, #0]
   b6e18:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b6e1a:	4620      	mov	r0, r4
   b6e1c:	47a8      	blx	r5
        if (result > 0) {
   b6e1e:	2800      	cmp	r0, #0
            _total = result;
   b6e20:	bfc8      	it	gt
   b6e22:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b6e24:	6823      	ldr	r3, [r4, #0]
   b6e26:	691b      	ldr	r3, [r3, #16]
   b6e28:	4620      	mov	r0, r4
}
   b6e2a:	b003      	add	sp, #12
   b6e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b6e30:	4718      	bx	r3
	...

000b6e34 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b6e34:	b510      	push	{r4, lr}
   b6e36:	4b07      	ldr	r3, [pc, #28]	; (b6e54 <_ZN3UDPD1Ev+0x20>)
   b6e38:	f103 0208 	add.w	r2, r3, #8
   b6e3c:	336c      	adds	r3, #108	; 0x6c
   b6e3e:	4604      	mov	r4, r0
   b6e40:	6002      	str	r2, [r0, #0]
   b6e42:	6103      	str	r3, [r0, #16]
   b6e44:	f7ff fd80 	bl	b6948 <_ZN3UDP4stopEv>
   b6e48:	4620      	mov	r0, r4
   b6e4a:	f7ff ff8d 	bl	b6d68 <_ZN3UDP13releaseBufferEv>
   b6e4e:	4620      	mov	r0, r4
   b6e50:	bd10      	pop	{r4, pc}
   b6e52:	bf00      	nop
   b6e54:	000bceb0 	.word	0x000bceb0

000b6e58 <_ZN3UDPD0Ev>:
   b6e58:	b510      	push	{r4, lr}
   b6e5a:	4604      	mov	r4, r0
   b6e5c:	f7ff ffea 	bl	b6e34 <_ZN3UDPD1Ev>
   b6e60:	4620      	mov	r0, r4
   b6e62:	214c      	movs	r1, #76	; 0x4c
   b6e64:	f7fd f91d 	bl	b40a2 <_ZdlPvj>
   b6e68:	4620      	mov	r0, r4
   b6e6a:	bd10      	pop	{r4, pc}

000b6e6c <_ZN3UDP13joinMulticastERK9IPAddress>:

int UDP::joinMulticast(const IPAddress& ip) {
   b6e6c:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b6e6e:	6944      	ldr	r4, [r0, #20]
   b6e70:	2c00      	cmp	r4, #0
   b6e72:	db07      	blt.n	b6e84 <_ZN3UDP13joinMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b6e74:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b6e78:	2301      	movs	r3, #1
   b6e7a:	4620      	mov	r0, r4
}
   b6e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b6e80:	f7ff bef5 	b.w	b6c6e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b6e84:	f04f 30ff 	mov.w	r0, #4294967295
   b6e88:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6e8c:	4770      	bx	lr

000b6e8e <_ZN3UDP14leaveMulticastERK9IPAddress>:

int UDP::leaveMulticast(const IPAddress& ip) {
   b6e8e:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b6e90:	6944      	ldr	r4, [r0, #20]
   b6e92:	2c00      	cmp	r4, #0
   b6e94:	db07      	blt.n	b6ea6 <_ZN3UDP14leaveMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b6e96:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b6e9a:	2300      	movs	r3, #0
   b6e9c:	4620      	mov	r0, r4
}
   b6e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b6ea2:	f7ff bee4 	b.w	b6c6e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b6ea6:	f04f 30ff 	mov.w	r0, #4294967295
   b6eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6eae:	4770      	bx	lr

000b6eb0 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b6eb0:	4770      	bx	lr

000b6eb2 <_ZN21StringPrintableHelperD0Ev>:
   b6eb2:	b510      	push	{r4, lr}
   b6eb4:	210c      	movs	r1, #12
   b6eb6:	4604      	mov	r4, r0
   b6eb8:	f7fd f8f3 	bl	b40a2 <_ZdlPvj>
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	bd10      	pop	{r4, pc}

000b6ec0 <_ZN6StringD1Ev>:
String::~String()
   b6ec0:	b510      	push	{r4, lr}
   b6ec2:	4604      	mov	r4, r0
	free(buffer);
   b6ec4:	6800      	ldr	r0, [r0, #0]
   b6ec6:	f7ff fb93 	bl	b65f0 <free>
}
   b6eca:	4620      	mov	r0, r4
   b6ecc:	bd10      	pop	{r4, pc}

000b6ece <_ZN6String10invalidateEv>:
{
   b6ece:	b510      	push	{r4, lr}
   b6ed0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6ed2:	6800      	ldr	r0, [r0, #0]
   b6ed4:	b108      	cbz	r0, b6eda <_ZN6String10invalidateEv+0xc>
   b6ed6:	f7ff fb8b 	bl	b65f0 <free>
	buffer = NULL;
   b6eda:	2300      	movs	r3, #0
	capacity = len = 0;
   b6edc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6ee0:	6023      	str	r3, [r4, #0]
}
   b6ee2:	bd10      	pop	{r4, pc}

000b6ee4 <_ZN6String12changeBufferEj>:
{
   b6ee4:	b538      	push	{r3, r4, r5, lr}
   b6ee6:	4604      	mov	r4, r0
   b6ee8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6eea:	6800      	ldr	r0, [r0, #0]
   b6eec:	3101      	adds	r1, #1
   b6eee:	f7ff fb87 	bl	b6600 <realloc>
	if (newbuffer) {
   b6ef2:	b110      	cbz	r0, b6efa <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b6ef4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6ef8:	2001      	movs	r0, #1
}
   b6efa:	bd38      	pop	{r3, r4, r5, pc}

000b6efc <_ZN6String7reserveEj>:
{
   b6efc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6efe:	6803      	ldr	r3, [r0, #0]
{
   b6f00:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6f02:	b123      	cbz	r3, b6f0e <_ZN6String7reserveEj+0x12>
   b6f04:	6843      	ldr	r3, [r0, #4]
   b6f06:	428b      	cmp	r3, r1
   b6f08:	d301      	bcc.n	b6f0e <_ZN6String7reserveEj+0x12>
   b6f0a:	2001      	movs	r0, #1
}
   b6f0c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6f0e:	4620      	mov	r0, r4
   b6f10:	f7ff ffe8 	bl	b6ee4 <_ZN6String12changeBufferEj>
   b6f14:	2800      	cmp	r0, #0
   b6f16:	d0f9      	beq.n	b6f0c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6f18:	68a3      	ldr	r3, [r4, #8]
   b6f1a:	2b00      	cmp	r3, #0
   b6f1c:	d1f5      	bne.n	b6f0a <_ZN6String7reserveEj+0xe>
   b6f1e:	6822      	ldr	r2, [r4, #0]
   b6f20:	7013      	strb	r3, [r2, #0]
   b6f22:	e7f2      	b.n	b6f0a <_ZN6String7reserveEj+0xe>

000b6f24 <_ZN6String4copyEPKcj>:
{
   b6f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6f26:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6f28:	4611      	mov	r1, r2
   b6f2a:	9201      	str	r2, [sp, #4]
{
   b6f2c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6f2e:	f7ff ffe5 	bl	b6efc <_ZN6String7reserveEj>
   b6f32:	9a01      	ldr	r2, [sp, #4]
   b6f34:	b928      	cbnz	r0, b6f42 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6f36:	4620      	mov	r0, r4
   b6f38:	f7ff ffc9 	bl	b6ece <_ZN6String10invalidateEv>
}
   b6f3c:	4620      	mov	r0, r4
   b6f3e:	b003      	add	sp, #12
   b6f40:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6f42:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6f44:	4629      	mov	r1, r5
   b6f46:	6820      	ldr	r0, [r4, #0]
   b6f48:	f003 fbe1 	bl	ba70e <memcpy>
	buffer[len] = 0;
   b6f4c:	6822      	ldr	r2, [r4, #0]
   b6f4e:	68a3      	ldr	r3, [r4, #8]
   b6f50:	2100      	movs	r1, #0
   b6f52:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6f54:	e7f2      	b.n	b6f3c <_ZN6String4copyEPKcj+0x18>

000b6f56 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6f56:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6f58:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6f5a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6f5e:	4604      	mov	r4, r0
	len = 0;
   b6f60:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6f62:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6f64:	b141      	cbz	r1, b6f78 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6f66:	4608      	mov	r0, r1
   b6f68:	9101      	str	r1, [sp, #4]
   b6f6a:	f003 fc6e 	bl	ba84a <strlen>
   b6f6e:	9901      	ldr	r1, [sp, #4]
   b6f70:	4602      	mov	r2, r0
   b6f72:	4620      	mov	r0, r4
   b6f74:	f7ff ffd6 	bl	b6f24 <_ZN6String4copyEPKcj>
}
   b6f78:	4620      	mov	r0, r4
   b6f7a:	b002      	add	sp, #8
   b6f7c:	bd10      	pop	{r4, pc}

000b6f7e <_ZN6StringaSEPKc>:
{
   b6f7e:	b513      	push	{r0, r1, r4, lr}
   b6f80:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6f82:	b159      	cbz	r1, b6f9c <_ZN6StringaSEPKc+0x1e>
   b6f84:	4608      	mov	r0, r1
   b6f86:	9101      	str	r1, [sp, #4]
   b6f88:	f003 fc5f 	bl	ba84a <strlen>
   b6f8c:	9901      	ldr	r1, [sp, #4]
   b6f8e:	4602      	mov	r2, r0
   b6f90:	4620      	mov	r0, r4
   b6f92:	f7ff ffc7 	bl	b6f24 <_ZN6String4copyEPKcj>
}
   b6f96:	4620      	mov	r0, r4
   b6f98:	b002      	add	sp, #8
   b6f9a:	bd10      	pop	{r4, pc}
	else invalidate();
   b6f9c:	f7ff ff97 	bl	b6ece <_ZN6String10invalidateEv>
   b6fa0:	e7f9      	b.n	b6f96 <_ZN6StringaSEPKc+0x18>

000b6fa2 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b6fa2:	b510      	push	{r4, lr}
   b6fa4:	4604      	mov	r4, r0
   b6fa6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6fa8:	2300      	movs	r3, #0
	capacity = 0;
   b6faa:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6fae:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6fb0:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b6fb2:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b6fb4:	a901      	add	r1, sp, #4
   b6fb6:	f7ff fbcd 	bl	b6754 <ltoa>
	*this = buf;
   b6fba:	a901      	add	r1, sp, #4
   b6fbc:	4620      	mov	r0, r4
   b6fbe:	f7ff ffde 	bl	b6f7e <_ZN6StringaSEPKc>
}
   b6fc2:	4620      	mov	r0, r4
   b6fc4:	b00a      	add	sp, #40	; 0x28
   b6fc6:	bd10      	pop	{r4, pc}

000b6fc8 <_ZN6String6concatEPKcj>:
{
   b6fc8:	b570      	push	{r4, r5, r6, lr}
   b6fca:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b6fcc:	460e      	mov	r6, r1
   b6fce:	b909      	cbnz	r1, b6fd4 <_ZN6String6concatEPKcj+0xc>
   b6fd0:	2000      	movs	r0, #0
}
   b6fd2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6fd4:	b16a      	cbz	r2, b6ff2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6fd6:	6884      	ldr	r4, [r0, #8]
   b6fd8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6fda:	4621      	mov	r1, r4
   b6fdc:	f7ff ff8e 	bl	b6efc <_ZN6String7reserveEj>
   b6fe0:	2800      	cmp	r0, #0
   b6fe2:	d0f5      	beq.n	b6fd0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6fe4:	6828      	ldr	r0, [r5, #0]
   b6fe6:	68ab      	ldr	r3, [r5, #8]
   b6fe8:	4631      	mov	r1, r6
   b6fea:	4418      	add	r0, r3
   b6fec:	f003 fc07 	bl	ba7fe <strcpy>
	len = newlen;
   b6ff0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6ff2:	2001      	movs	r0, #1
   b6ff4:	e7ed      	b.n	b6fd2 <_ZN6String6concatEPKcj+0xa>

000b6ff6 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b6ff6:	688a      	ldr	r2, [r1, #8]
   b6ff8:	6809      	ldr	r1, [r1, #0]
   b6ffa:	f7ff bfe5 	b.w	b6fc8 <_ZN6String6concatEPKcj>

000b6ffe <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b6ffe:	b538      	push	{r3, r4, r5, lr}
   b7000:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b7002:	6880      	ldr	r0, [r0, #8]
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b7004:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b7006:	f7ff ffdf 	bl	b6fc8 <_ZN6String6concatEPKcj>
   b700a:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b700c:	6898      	ldr	r0, [r3, #8]
    }
   b700e:	1b40      	subs	r0, r0, r5
   b7010:	bd38      	pop	{r3, r4, r5, pc}

000b7012 <_ZN6String6concatEc>:
{
   b7012:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b7014:	2300      	movs	r3, #0
	buf[0] = c;
   b7016:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b701a:	2201      	movs	r2, #1
   b701c:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b701e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7022:	f7ff ffd1 	bl	b6fc8 <_ZN6String6concatEPKcj>
}
   b7026:	b003      	add	sp, #12
   b7028:	f85d fb04 	ldr.w	pc, [sp], #4

000b702c <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b702c:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b702e:	6880      	ldr	r0, [r0, #8]
   b7030:	f7ff ffef 	bl	b7012 <_ZN6String6concatEc>
    }
   b7034:	bd08      	pop	{r3, pc}

000b7036 <_ZplRK15StringSumHelperRK6String>:
{
   b7036:	b510      	push	{r4, lr}
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7038:	688a      	ldr	r2, [r1, #8]
   b703a:	6809      	ldr	r1, [r1, #0]
{
   b703c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b703e:	f7ff ffc3 	bl	b6fc8 <_ZN6String6concatEPKcj>
   b7042:	b910      	cbnz	r0, b704a <_ZplRK15StringSumHelperRK6String+0x14>
   b7044:	4620      	mov	r0, r4
   b7046:	f7ff ff42 	bl	b6ece <_ZN6String10invalidateEv>
}
   b704a:	4620      	mov	r0, r4
   b704c:	bd10      	pop	{r4, pc}
	...

000b7050 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b7050:	b530      	push	{r4, r5, lr}
   b7052:	b085      	sub	sp, #20
	buffer = NULL;
   b7054:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b7056:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b7058:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b705a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b705e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7060:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b7062:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b7064:	4b06      	ldr	r3, [pc, #24]	; (b7080 <_ZN6StringC1ERK9Printable+0x30>)
   b7066:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b7068:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b706a:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b706c:	f7ff ff46 	bl	b6efc <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b7070:	682b      	ldr	r3, [r5, #0]
   b7072:	a901      	add	r1, sp, #4
   b7074:	681b      	ldr	r3, [r3, #0]
   b7076:	4628      	mov	r0, r5
   b7078:	4798      	blx	r3
}
   b707a:	4620      	mov	r0, r4
   b707c:	b005      	add	sp, #20
   b707e:	bd30      	pop	{r4, r5, pc}
   b7080:	000bcf28 	.word	0x000bcf28

000b7084 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
   b7084:	b40e      	push	{r1, r2, r3}
   b7086:	b570      	push	{r4, r5, r6, lr}
   b7088:	b087      	sub	sp, #28
   b708a:	ad0b      	add	r5, sp, #44	; 0x2c
   b708c:	4604      	mov	r4, r0
   b708e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7092:	9201      	str	r2, [sp, #4]
   b7094:	462b      	mov	r3, r5
   b7096:	2105      	movs	r1, #5
   b7098:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b709a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b709c:	f7ff fac8 	bl	b6630 <vsnprintf>
    va_end(marker);

    String result;
   b70a0:	490b      	ldr	r1, [pc, #44]	; (b70d0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b70a2:	4606      	mov	r6, r0
    String result;
   b70a4:	4620      	mov	r0, r4
   b70a6:	f7ff ff56 	bl	b6f56 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b70aa:	4631      	mov	r1, r6
   b70ac:	4620      	mov	r0, r4
   b70ae:	f7ff ff25 	bl	b6efc <_ZN6String7reserveEj>
    if (result.buffer) {
   b70b2:	6820      	ldr	r0, [r4, #0]
   b70b4:	b130      	cbz	r0, b70c4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b70b6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b70b8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b70ba:	462b      	mov	r3, r5
   b70bc:	1c71      	adds	r1, r6, #1
   b70be:	f7ff fab7 	bl	b6630 <vsnprintf>
        va_end(marker);
        result.len = n;
   b70c2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b70c4:	4620      	mov	r0, r4
   b70c6:	b007      	add	sp, #28
   b70c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b70cc:	b003      	add	sp, #12
   b70ce:	4770      	bx	lr
   b70d0:	000bc97c 	.word	0x000bc97c

000b70d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b70d4:	4770      	bx	lr

000b70d6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b70d6:	4770      	bx	lr

000b70d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b70d8:	4770      	bx	lr

000b70da <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b70da:	4770      	bx	lr

000b70dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b70dc:	4b06      	ldr	r3, [pc, #24]	; (b70f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b70de:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b70e0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b70e2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b70e6:	d005      	beq.n	b70f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b70e8:	4608      	mov	r0, r1
   b70ea:	f002 fd39 	bl	b9b60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b70ee:	2800      	cmp	r0, #0
   b70f0:	bf08      	it	eq
   b70f2:	2400      	moveq	r4, #0
      }
   b70f4:	4620      	mov	r0, r4
   b70f6:	bd10      	pop	{r4, pc}
   b70f8:	000bd0d8 	.word	0x000bd0d8

000b70fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b70fc:	4b06      	ldr	r3, [pc, #24]	; (b7118 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b70fe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7100:	b510      	push	{r4, lr}
   b7102:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7106:	d005      	beq.n	b7114 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7108:	4608      	mov	r0, r1
   b710a:	f002 fd29 	bl	b9b60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b710e:	2800      	cmp	r0, #0
   b7110:	bf08      	it	eq
   b7112:	2400      	moveq	r4, #0
      }
   b7114:	4620      	mov	r0, r4
   b7116:	bd10      	pop	{r4, pc}
   b7118:	000bd0d8 	.word	0x000bd0d8

000b711c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b711c:	4b06      	ldr	r3, [pc, #24]	; (b7138 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b711e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7120:	b510      	push	{r4, lr}
   b7122:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7126:	d005      	beq.n	b7134 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7128:	4608      	mov	r0, r1
   b712a:	f002 fd19 	bl	b9b60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b712e:	2800      	cmp	r0, #0
   b7130:	bf08      	it	eq
   b7132:	2400      	moveq	r4, #0
      }
   b7134:	4620      	mov	r0, r4
   b7136:	bd10      	pop	{r4, pc}
   b7138:	000bd0d8 	.word	0x000bd0d8

000b713c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b713c:	b510      	push	{r4, lr}
   b713e:	2168      	movs	r1, #104	; 0x68
   b7140:	4604      	mov	r4, r0
   b7142:	f7fc ffae 	bl	b40a2 <_ZdlPvj>
   b7146:	4620      	mov	r0, r4
   b7148:	bd10      	pop	{r4, pc}

000b714a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b714a:	b510      	push	{r4, lr}
   b714c:	2128      	movs	r1, #40	; 0x28
   b714e:	4604      	mov	r4, r0
   b7150:	f7fc ffa7 	bl	b40a2 <_ZdlPvj>
   b7154:	4620      	mov	r0, r4
   b7156:	bd10      	pop	{r4, pc}

000b7158 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7158:	b510      	push	{r4, lr}
   b715a:	2130      	movs	r1, #48	; 0x30
   b715c:	4604      	mov	r4, r0
   b715e:	f7fc ffa0 	bl	b40a2 <_ZdlPvj>
   b7162:	4620      	mov	r0, r4
   b7164:	bd10      	pop	{r4, pc}

000b7166 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7166:	2168      	movs	r1, #104	; 0x68
   b7168:	f7fc bf9b 	b.w	b40a2 <_ZdlPvj>

000b716c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b716c:	2128      	movs	r1, #40	; 0x28
   b716e:	f7fc bf98 	b.w	b40a2 <_ZdlPvj>

000b7172 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7172:	2130      	movs	r1, #48	; 0x30
   b7174:	f7fc bf95 	b.w	b40a2 <_ZdlPvj>

000b7178 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7178:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b717a:	2500      	movs	r5, #0
   b717c:	1cec      	adds	r4, r5, #3
   b717e:	428c      	cmp	r4, r1
   b7180:	d80d      	bhi.n	b719e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7182:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7184:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7186:	5d87      	ldrb	r7, [r0, r6]
   b7188:	4297      	cmp	r7, r2
   b718a:	d105      	bne.n	b7198 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b718c:	4426      	add	r6, r4
   b718e:	42b1      	cmp	r1, r6
   b7190:	d305      	bcc.n	b719e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7192:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7194:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7196:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7198:	3401      	adds	r4, #1
   b719a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b719c:	e7ee      	b.n	b717c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b719e:	2000      	movs	r0, #0
   b71a0:	e7f9      	b.n	b7196 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b71a4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b71a4:	4a02      	ldr	r2, [pc, #8]	; (b71b0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b71a6:	4903      	ldr	r1, [pc, #12]	; (b71b4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b71a8:	200a      	movs	r0, #10
   b71aa:	f7ff b92d 	b.w	b6408 <panic_>
   b71ae:	bf00      	nop
   b71b0:	000b6035 	.word	0x000b6035
   b71b4:	000bcf38 	.word	0x000bcf38

000b71b8 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b71b8:	4603      	mov	r3, r0
   b71ba:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b71bc:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b71be:	e9d3 2100 	ldrd	r2, r1, [r3]
   b71c2:	4710      	bx	r2

000b71c4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b71c4:	b430      	push	{r4, r5}
   b71c6:	460d      	mov	r5, r1
   b71c8:	4611      	mov	r1, r2
   b71ca:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b71cc:	6803      	ldr	r3, [r0, #0]
   b71ce:	6809      	ldr	r1, [r1, #0]
   b71d0:	6828      	ldr	r0, [r5, #0]
   b71d2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b71d6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b71d8:	bc30      	pop	{r4, r5}
   b71da:	4760      	bx	ip

000b71dc <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b71dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b71de:	b538      	push	{r3, r4, r5, lr}
   b71e0:	4604      	mov	r4, r0
	switch (__op)
   b71e2:	d102      	bne.n	b71ea <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b71e4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b71e6:	6023      	str	r3, [r4, #0]
	}
   b71e8:	e003      	b.n	b71f2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b71ea:	2a02      	cmp	r2, #2
   b71ec:	d003      	beq.n	b71f6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b71ee:	2a03      	cmp	r2, #3
   b71f0:	d00d      	beq.n	b720e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b71f2:	2000      	movs	r0, #0
   b71f4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b71f6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b71f8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b71fa:	f7fc ff4c 	bl	b4096 <_Znwj>
   b71fe:	4603      	mov	r3, r0
   b7200:	2800      	cmp	r0, #0
   b7202:	d0f0      	beq.n	b71e6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b7204:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7208:	e883 0003 	stmia.w	r3, {r0, r1}
   b720c:	e7eb      	b.n	b71e6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b720e:	6800      	ldr	r0, [r0, #0]
   b7210:	2800      	cmp	r0, #0
   b7212:	d0ee      	beq.n	b71f2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b7214:	2108      	movs	r1, #8
   b7216:	f7fc ff44 	bl	b40a2 <_ZdlPvj>
   b721a:	e7ea      	b.n	b71f2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b721c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b721c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b721e:	b538      	push	{r3, r4, r5, lr}
   b7220:	4604      	mov	r4, r0
	switch (__op)
   b7222:	d102      	bne.n	b722a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7224:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7226:	6023      	str	r3, [r4, #0]
	}
   b7228:	e003      	b.n	b7232 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b722a:	2a02      	cmp	r2, #2
   b722c:	d003      	beq.n	b7236 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b722e:	2a03      	cmp	r2, #3
   b7230:	d00d      	beq.n	b724e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7232:	2000      	movs	r0, #0
   b7234:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7236:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7238:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b723a:	f7fc ff2c 	bl	b4096 <_Znwj>
   b723e:	4603      	mov	r3, r0
   b7240:	2800      	cmp	r0, #0
   b7242:	d0f0      	beq.n	b7226 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7244:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7248:	e883 0003 	stmia.w	r3, {r0, r1}
   b724c:	e7eb      	b.n	b7226 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b724e:	6800      	ldr	r0, [r0, #0]
   b7250:	2800      	cmp	r0, #0
   b7252:	d0ee      	beq.n	b7232 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7254:	2108      	movs	r1, #8
   b7256:	f7fc ff24 	bl	b40a2 <_ZdlPvj>
   b725a:	e7ea      	b.n	b7232 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b725c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b725c:	b510      	push	{r4, lr}
      if (_M_manager)
   b725e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7260:	4604      	mov	r4, r0
      if (_M_manager)
   b7262:	b113      	cbz	r3, b726a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7264:	2203      	movs	r2, #3
   b7266:	4601      	mov	r1, r0
   b7268:	4798      	blx	r3
    }
   b726a:	4620      	mov	r0, r4
   b726c:	bd10      	pop	{r4, pc}

000b726e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b726e:	b510      	push	{r4, lr}
   b7270:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7272:	3058      	adds	r0, #88	; 0x58
   b7274:	f7ff fff2 	bl	b725c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7278:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b727c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7280:	f7ff be1e 	b.w	b6ec0 <_ZN6StringD1Ev>

000b7284 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7284:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7286:	6843      	ldr	r3, [r0, #4]
   b7288:	3b01      	subs	r3, #1
    {
   b728a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b728c:	6043      	str	r3, [r0, #4]
   b728e:	b963      	cbnz	r3, b72aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7290:	6803      	ldr	r3, [r0, #0]
   b7292:	689b      	ldr	r3, [r3, #8]
   b7294:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7296:	68a3      	ldr	r3, [r4, #8]
   b7298:	3b01      	subs	r3, #1
   b729a:	60a3      	str	r3, [r4, #8]
   b729c:	b92b      	cbnz	r3, b72aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b729e:	6823      	ldr	r3, [r4, #0]
   b72a0:	4620      	mov	r0, r4
   b72a2:	68db      	ldr	r3, [r3, #12]
    }
   b72a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b72a8:	4718      	bx	r3
    }
   b72aa:	bd10      	pop	{r4, pc}

000b72ac <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b72ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b72b0:	b2da      	uxtb	r2, r3
   b72b2:	2a09      	cmp	r2, #9
   b72b4:	d801      	bhi.n	b72ba <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b72b6:	4618      	mov	r0, r3
   b72b8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b72ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b72be:	2b05      	cmp	r3, #5
   b72c0:	d801      	bhi.n	b72c6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b72c2:	3857      	subs	r0, #87	; 0x57
   b72c4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b72c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b72ca:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b72cc:	bf94      	ite	ls
   b72ce:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b72d0:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b72d4:	4770      	bx	lr
	...

000b72d8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b72d8:	b510      	push	{r4, lr}
            locked_(false) {
   b72da:	2300      	movs	r3, #0
   b72dc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b72de:	4b04      	ldr	r3, [pc, #16]	; (b72f0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b72e0:	4604      	mov	r4, r0
   b72e2:	6818      	ldr	r0, [r3, #0]
   b72e4:	f7fe ff60 	bl	b61a8 <os_mutex_recursive_lock>
        locked_ = true;
   b72e8:	2301      	movs	r3, #1
   b72ea:	7023      	strb	r3, [r4, #0]
    }
   b72ec:	4620      	mov	r0, r4
   b72ee:	bd10      	pop	{r4, pc}
   b72f0:	2003e694 	.word	0x2003e694

000b72f4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b72f4:	b510      	push	{r4, lr}
        if (locked_) {
   b72f6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b72f8:	4604      	mov	r4, r0
        if (locked_) {
   b72fa:	b11b      	cbz	r3, b7304 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b72fc:	4b02      	ldr	r3, [pc, #8]	; (b7308 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b72fe:	6818      	ldr	r0, [r3, #0]
   b7300:	f7fe ff5a 	bl	b61b8 <os_mutex_recursive_unlock>
    }
   b7304:	4620      	mov	r0, r4
   b7306:	bd10      	pop	{r4, pc}
   b7308:	2003e694 	.word	0x2003e694

000b730c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b730c:	b082      	sub	sp, #8
   b730e:	4603      	mov	r3, r0
    address_ = addr;
   b7310:	6808      	ldr	r0, [r1, #0]
   b7312:	6849      	ldr	r1, [r1, #4]
   b7314:	466a      	mov	r2, sp
   b7316:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7318:	466a      	mov	r2, sp
   b731a:	ca03      	ldmia	r2!, {r0, r1}
   b731c:	6018      	str	r0, [r3, #0]
}
   b731e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7320:	6059      	str	r1, [r3, #4]
}
   b7322:	b002      	add	sp, #8
   b7324:	4770      	bx	lr

000b7326 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7326:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7328:	7982      	ldrb	r2, [r0, #6]
   b732a:	798b      	ldrb	r3, [r1, #6]
   b732c:	429a      	cmp	r2, r3
   b732e:	d106      	bne.n	b733e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7330:	2206      	movs	r2, #6
   b7332:	f003 f9dc 	bl	ba6ee <memcmp>
   b7336:	fab0 f080 	clz	r0, r0
   b733a:	0940      	lsrs	r0, r0, #5
}
   b733c:	bd08      	pop	{r3, pc}
    return false;
   b733e:	2000      	movs	r0, #0
   b7340:	e7fc      	b.n	b733c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7342 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7342:	f04f 33ff 	mov.w	r3, #4294967295
   b7346:	6003      	str	r3, [r0, #0]
   b7348:	8083      	strh	r3, [r0, #4]
}
   b734a:	2000      	movs	r0, #0
   b734c:	4770      	bx	lr

000b734e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b734e:	b508      	push	{r3, lr}
   b7350:	4602      	mov	r2, r0
        : address_{} {
   b7352:	2100      	movs	r1, #0
   b7354:	6001      	str	r1, [r0, #0]
   b7356:	6041      	str	r1, [r0, #4]
    clear();
   b7358:	f7ff fff3 	bl	b7342 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b735c:	7191      	strb	r1, [r2, #6]
}
   b735e:	4610      	mov	r0, r2
   b7360:	bd08      	pop	{r3, pc}
	...

000b7364 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7364:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7366:	2301      	movs	r3, #1
   b7368:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b736a:	4b05      	ldr	r3, [pc, #20]	; (b7380 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b736c:	4602      	mov	r2, r0
   b736e:	f103 0110 	add.w	r1, r3, #16
   b7372:	f853 4b04 	ldr.w	r4, [r3], #4
   b7376:	f842 4b04 	str.w	r4, [r2], #4
   b737a:	428b      	cmp	r3, r1
   b737c:	d1f9      	bne.n	b7372 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b737e:	bd10      	pop	{r4, pc}
   b7380:	000bd0e6 	.word	0x000bd0e6

000b7384 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7384:	b510      	push	{r4, lr}
    if (uuid128) {
   b7386:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7388:	4604      	mov	r4, r0
    if (uuid128) {
   b738a:	b1b1      	cbz	r1, b73ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b738c:	2a01      	cmp	r2, #1
   b738e:	f101 0210 	add.w	r2, r1, #16
   b7392:	d10a      	bne.n	b73aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7394:	4601      	mov	r1, r0
   b7396:	f853 0b04 	ldr.w	r0, [r3], #4
   b739a:	f841 0b04 	str.w	r0, [r1], #4
   b739e:	4293      	cmp	r3, r2
   b73a0:	d1f9      	bne.n	b7396 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b73a2:	2301      	movs	r3, #1
   b73a4:	6123      	str	r3, [r4, #16]
}
   b73a6:	4620      	mov	r0, r4
   b73a8:	bd10      	pop	{r4, pc}
   b73aa:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b73ac:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b73b0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b73b4:	429a      	cmp	r2, r3
   b73b6:	d1f9      	bne.n	b73ac <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b73b8:	e7f3      	b.n	b73a2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b73ba:	2210      	movs	r2, #16
   b73bc:	f003 f9cf 	bl	ba75e <memset>
   b73c0:	e7f1      	b.n	b73a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b73c2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b73c2:	b538      	push	{r3, r4, r5, lr}
   b73c4:	4604      	mov	r4, r0
   b73c6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b73c8:	461a      	mov	r2, r3
   b73ca:	f7ff ffdb 	bl	b7384 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b73ce:	81a5      	strh	r5, [r4, #12]
}
   b73d0:	4620      	mov	r0, r4
   b73d2:	bd38      	pop	{r3, r4, r5, pc}

000b73d4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b73d4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b73d6:	6902      	ldr	r2, [r0, #16]
   b73d8:	b922      	cbnz	r2, b73e4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b73da:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b73dc:	3800      	subs	r0, #0
   b73de:	bf18      	it	ne
   b73e0:	2001      	movne	r0, #1
}
   b73e2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b73e4:	4902      	ldr	r1, [pc, #8]	; (b73f0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b73e6:	2210      	movs	r2, #16
   b73e8:	f003 f981 	bl	ba6ee <memcmp>
   b73ec:	e7f6      	b.n	b73dc <_ZNK8particle7BleUuid7isValidEv+0x8>
   b73ee:	bf00      	nop
   b73f0:	000bd106 	.word	0x000bd106

000b73f4 <_ZNK8particle7BleUuid4typeEv>:
}
   b73f4:	6900      	ldr	r0, [r0, #16]
   b73f6:	4770      	bx	lr

000b73f8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b73f8:	b538      	push	{r3, r4, r5, lr}
   b73fa:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b73fc:	2214      	movs	r2, #20
   b73fe:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7400:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7402:	f003 f9ac 	bl	ba75e <memset>
    if (type_ == BleUuidType::SHORT) {
   b7406:	6923      	ldr	r3, [r4, #16]
   b7408:	b91b      	cbnz	r3, b7412 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b740a:	89a3      	ldrh	r3, [r4, #12]
   b740c:	802b      	strh	r3, [r5, #0]
}
   b740e:	4628      	mov	r0, r5
   b7410:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7412:	2301      	movs	r3, #1
   b7414:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7416:	4621      	mov	r1, r4
   b7418:	462b      	mov	r3, r5
   b741a:	f104 0210 	add.w	r2, r4, #16
   b741e:	f851 0b04 	ldr.w	r0, [r1], #4
   b7422:	f843 0b04 	str.w	r0, [r3], #4
   b7426:	4291      	cmp	r1, r2
   b7428:	d1f9      	bne.n	b741e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b742a:	e7f0      	b.n	b740e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b742c <_ZNK8particle7BleUuid7shortedEv>:
}
   b742c:	8980      	ldrh	r0, [r0, #12]
   b742e:	4770      	bx	lr

000b7430 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7430:	4770      	bx	lr

000b7432 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7432:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7434:	6902      	ldr	r2, [r0, #16]
   b7436:	690b      	ldr	r3, [r1, #16]
   b7438:	429a      	cmp	r2, r3
   b743a:	d106      	bne.n	b744a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b743c:	2210      	movs	r2, #16
   b743e:	f003 f956 	bl	ba6ee <memcmp>
   b7442:	fab0 f080 	clz	r0, r0
   b7446:	0940      	lsrs	r0, r0, #5
}
   b7448:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b744a:	2000      	movs	r0, #0
   b744c:	e7fc      	b.n	b7448 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7450 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7450:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7452:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7456:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7458:	4b34      	ldr	r3, [pc, #208]	; (b752c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b745a:	460c      	mov	r4, r1
   b745c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b745e:	4602      	mov	r2, r0
   b7460:	f103 0110 	add.w	r1, r3, #16
   b7464:	f853 0b04 	ldr.w	r0, [r3], #4
   b7468:	f842 0b04 	str.w	r0, [r2], #4
   b746c:	428b      	cmp	r3, r1
   b746e:	d1f9      	bne.n	b7464 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7470:	b344      	cbz	r4, b74c4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7472:	2124      	movs	r1, #36	; 0x24
   b7474:	4620      	mov	r0, r4
   b7476:	f003 fa17 	bl	ba8a8 <strnlen>
   b747a:	2804      	cmp	r0, #4
   b747c:	f04f 0500 	mov.w	r5, #0
   b7480:	d123      	bne.n	b74ca <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7482:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7486:	af01      	add	r7, sp, #4
   b7488:	1ca5      	adds	r5, r4, #2
   b748a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b748c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7490:	f7ff ff0c 	bl	b72ac <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7494:	f1b0 0800 	subs.w	r8, r0, #0
   b7498:	db12      	blt.n	b74c0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b749a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b749e:	f7ff ff05 	bl	b72ac <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b74a2:	2800      	cmp	r0, #0
   b74a4:	db0c      	blt.n	b74c0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b74a6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b74a8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b74ac:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b74ae:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b74b2:	d1eb      	bne.n	b748c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b74b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b74b8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b74ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b74be:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b74c0:	2300      	movs	r3, #0
   b74c2:	6133      	str	r3, [r6, #16]
}
   b74c4:	b002      	add	sp, #8
   b74c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b74ca:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b74ce:	2124      	movs	r1, #36	; 0x24
   b74d0:	4620      	mov	r0, r4
   b74d2:	f003 f9e9 	bl	ba8a8 <strnlen>
   b74d6:	42a8      	cmp	r0, r5
   b74d8:	d807      	bhi.n	b74ea <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b74da:	4642      	mov	r2, r8
   b74dc:	2100      	movs	r1, #0
   b74de:	4630      	mov	r0, r6
}
   b74e0:	b002      	add	sp, #8
   b74e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b74e6:	f003 b93a 	b.w	ba75e <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b74ea:	f1b8 0f00 	cmp.w	r8, #0
   b74ee:	d0e9      	beq.n	b74c4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b74f0:	5d60      	ldrb	r0, [r4, r5]
   b74f2:	f7ff fedb 	bl	b72ac <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b74f6:	0603      	lsls	r3, r0, #24
   b74f8:	d415      	bmi.n	b7526 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b74fa:	0100      	lsls	r0, r0, #4
   b74fc:	f108 38ff 	add.w	r8, r8, #4294967295
   b7500:	b2c7      	uxtb	r7, r0
   b7502:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7506:	2124      	movs	r1, #36	; 0x24
   b7508:	4620      	mov	r0, r4
   b750a:	f003 f9cd 	bl	ba8a8 <strnlen>
   b750e:	3501      	adds	r5, #1
   b7510:	42a8      	cmp	r0, r5
   b7512:	d908      	bls.n	b7526 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7514:	5d60      	ldrb	r0, [r4, r5]
   b7516:	f7ff fec9 	bl	b72ac <_ZN8particle11hexToNibbleEc>
   b751a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b751c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b751e:	bfa4      	itt	ge
   b7520:	4338      	orrge	r0, r7
   b7522:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7526:	3501      	adds	r5, #1
   b7528:	e7d1      	b.n	b74ce <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b752a:	bf00      	nop
   b752c:	000bd0e6 	.word	0x000bd0e6

000b7530 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7530:	b513      	push	{r0, r1, r4, lr}
   b7532:	4604      	mov	r4, r0
   b7534:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7536:	f7ff ff15 	bl	b7364 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b753a:	4620      	mov	r0, r4
   b753c:	9901      	ldr	r1, [sp, #4]
   b753e:	f7ff ff87 	bl	b7450 <_ZN8particle7BleUuid9constructEPKc>
}
   b7542:	4620      	mov	r0, r4
   b7544:	b002      	add	sp, #8
   b7546:	bd10      	pop	{r4, pc}

000b7548 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7548:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b754a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b754e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7550:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7552:	8043      	strh	r3, [r0, #2]
   b7554:	220e      	movs	r2, #14
   b7556:	4629      	mov	r1, r5
   b7558:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b755a:	7105      	strb	r5, [r0, #4]
   b755c:	3006      	adds	r0, #6
   b755e:	f003 f8fe 	bl	ba75e <memset>
   b7562:	f104 0014 	add.w	r0, r4, #20
   b7566:	f7ff fefd 	bl	b7364 <_ZN8particle7BleUuidC1Ev>
   b756a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b756e:	f7ff fef9 	bl	b7364 <_ZN8particle7BleUuidC1Ev>
   b7572:	4904      	ldr	r1, [pc, #16]	; (b7584 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7574:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7578:	f7ff fced 	bl	b6f56 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b757c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b757e:	4620      	mov	r0, r4
   b7580:	bd38      	pop	{r3, r4, r5, pc}
   b7582:	bf00      	nop
   b7584:	000bc97c 	.word	0x000bc97c

000b7588 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7588:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b758a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b758e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7592:	4293      	cmp	r3, r2
   b7594:	4618      	mov	r0, r3
   b7596:	d006      	beq.n	b75a6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7598:	6804      	ldr	r4, [r0, #0]
   b759a:	8824      	ldrh	r4, [r4, #0]
   b759c:	428c      	cmp	r4, r1
   b759e:	f103 0308 	add.w	r3, r3, #8
   b75a2:	d1f6      	bne.n	b7592 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b75a4:	bd10      	pop	{r4, pc}
        return nullptr;
   b75a6:	2000      	movs	r0, #0
   b75a8:	e7fc      	b.n	b75a4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b75ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b75ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b75ae:	4606      	mov	r6, r0
   b75b0:	b085      	sub	sp, #20
   b75b2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b75b4:	460d      	mov	r5, r1
   b75b6:	2900      	cmp	r1, #0
   b75b8:	d050      	beq.n	b765c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b75ba:	2a00      	cmp	r2, #0
   b75bc:	d04e      	beq.n	b765c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b75be:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b75c0:	7823      	ldrb	r3, [r4, #0]
   b75c2:	2af4      	cmp	r2, #244	; 0xf4
   b75c4:	bf28      	it	cs
   b75c6:	22f4      	movcs	r2, #244	; 0xf4
   b75c8:	b343      	cbz	r3, b761c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b75ca:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b75cc:	0798      	lsls	r0, r3, #30
   b75ce:	d509      	bpl.n	b75e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b75d0:	89a0      	ldrh	r0, [r4, #12]
   b75d2:	9203      	str	r2, [sp, #12]
   b75d4:	2300      	movs	r3, #0
   b75d6:	f7fe fd81 	bl	b60dc <hal_ble_gatt_server_set_characteristic_value>
   b75da:	2800      	cmp	r0, #0
   b75dc:	9a03      	ldr	r2, [sp, #12]
   b75de:	da03      	bge.n	b75e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b75e0:	b005      	add	sp, #20
   b75e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b75e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b75e8:	6834      	ldr	r4, [r6, #0]
   b75ea:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b75ec:	06d9      	lsls	r1, r3, #27
   b75ee:	d509      	bpl.n	b7604 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b75f0:	2f01      	cmp	r7, #1
   b75f2:	d007      	beq.n	b7604 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b75f4:	89a0      	ldrh	r0, [r4, #12]
   b75f6:	2300      	movs	r3, #0
   b75f8:	4629      	mov	r1, r5
}
   b75fa:	b005      	add	sp, #20
   b75fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7600:	f7fe bd9e 	b.w	b6140 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7604:	069b      	lsls	r3, r3, #26
   b7606:	d5eb      	bpl.n	b75e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7608:	2f02      	cmp	r7, #2
   b760a:	d0e9      	beq.n	b75e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b760c:	89a0      	ldrh	r0, [r4, #12]
   b760e:	2300      	movs	r3, #0
   b7610:	4629      	mov	r1, r5
}
   b7612:	b005      	add	sp, #20
   b7614:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7618:	f7fe bd9c 	b.w	b6154 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b761c:	8860      	ldrh	r0, [r4, #2]
   b761e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7622:	4288      	cmp	r0, r1
   b7624:	d01c      	beq.n	b7660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7626:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7628:	074e      	lsls	r6, r1, #29
   b762a:	d501      	bpl.n	b7630 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b762c:	2f01      	cmp	r7, #1
   b762e:	d104      	bne.n	b763a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7630:	070b      	lsls	r3, r1, #28
   b7632:	d409      	bmi.n	b7648 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7634:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7638:	e7d2      	b.n	b75e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b763a:	89a1      	ldrh	r1, [r4, #12]
   b763c:	9300      	str	r3, [sp, #0]
   b763e:	4613      	mov	r3, r2
   b7640:	462a      	mov	r2, r5
   b7642:	f7fe fd5f 	bl	b6104 <hal_ble_gatt_client_write_without_response>
   b7646:	e7cb      	b.n	b75e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7648:	2f02      	cmp	r7, #2
   b764a:	d0f3      	beq.n	b7634 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b764c:	2300      	movs	r3, #0
   b764e:	89a1      	ldrh	r1, [r4, #12]
   b7650:	9300      	str	r3, [sp, #0]
   b7652:	4613      	mov	r3, r2
   b7654:	462a      	mov	r2, r5
   b7656:	f7fe fd4b 	bl	b60f0 <hal_ble_gatt_client_write_with_response>
   b765a:	e7c1      	b.n	b75e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b765c:	4802      	ldr	r0, [pc, #8]	; (b7668 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b765e:	e7bf      	b.n	b75e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7660:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7664:	e7bc      	b.n	b75e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7666:	bf00      	nop
   b7668:	fffffef2 	.word	0xfffffef2

000b766c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b766c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b766e:	460c      	mov	r4, r1
   b7670:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7672:	21f4      	movs	r1, #244	; 0xf4
   b7674:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7676:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7678:	f003 f916 	bl	ba8a8 <strnlen>
   b767c:	9b01      	ldr	r3, [sp, #4]
   b767e:	4602      	mov	r2, r0
   b7680:	4621      	mov	r1, r4
   b7682:	4628      	mov	r0, r5
}
   b7684:	b003      	add	sp, #12
   b7686:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b768a:	f7ff bf8f 	b.w	b75ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b7690 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7694:	2600      	movs	r6, #0
   b7696:	6006      	str	r6, [r0, #0]
   b7698:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b769a:	2028      	movs	r0, #40	; 0x28
   b769c:	460c      	mov	r4, r1
   b769e:	f7fc fcfa 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b76a2:	1e05      	subs	r5, r0, #0
   b76a4:	f105 080c 	add.w	r8, r5, #12
   b76a8:	d00f      	beq.n	b76ca <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b76aa:	2301      	movs	r3, #1
   b76ac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b76b0:	4b08      	ldr	r3, [pc, #32]	; (b76d4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b76b2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b76b4:	4640      	mov	r0, r8
   b76b6:	f7ff fe55 	bl	b7364 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b76ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b76bc:	622e      	str	r6, [r5, #32]
   b76be:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b76c2:	4646      	mov	r6, r8
   b76c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b76c6:	6823      	ldr	r3, [r4, #0]
   b76c8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b76ca:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b76ce:	4638      	mov	r0, r7
   b76d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b76d4:	000bd0a8 	.word	0x000bd0a8

000b76d8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b76d8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b76da:	2500      	movs	r5, #0
   b76dc:	6005      	str	r5, [r0, #0]
   b76de:	4606      	mov	r6, r0
   b76e0:	2030      	movs	r0, #48	; 0x30
   b76e2:	f7fc fcd8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b76e6:	4604      	mov	r4, r0
   b76e8:	b188      	cbz	r0, b770e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b76ea:	2301      	movs	r3, #1
   b76ec:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b76f0:	4b09      	ldr	r3, [pc, #36]	; (b7718 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b76f2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b76f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b76f8:	8183      	strh	r3, [r0, #12]
   b76fa:	300e      	adds	r0, #14
   b76fc:	f7ff fe27 	bl	b734e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7700:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7704:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7708:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b770c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b770e:	6074      	str	r4, [r6, #4]
   b7710:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7712:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7714:	4630      	mov	r0, r6
   b7716:	bd70      	pop	{r4, r5, r6, pc}
   b7718:	000bd0c4 	.word	0x000bd0c4

000b771c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b771c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b771e:	460d      	mov	r5, r1
   b7720:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7722:	a801      	add	r0, sp, #4
   b7724:	f7ff fdd8 	bl	b72d8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7728:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b772a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b772e:	6023      	str	r3, [r4, #0]
   b7730:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7734:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7736:	a801      	add	r0, sp, #4
   b7738:	f7ff fddc 	bl	b72f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b773c:	4620      	mov	r0, r4
   b773e:	b003      	add	sp, #12
   b7740:	bd30      	pop	{r4, r5, pc}

000b7742 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7742:	b530      	push	{r4, r5, lr}
   b7744:	4605      	mov	r5, r0
   b7746:	b087      	sub	sp, #28
   b7748:	460c      	mov	r4, r1
    WiringBleLock lk;
   b774a:	a801      	add	r0, sp, #4
   b774c:	f7ff fdc4 	bl	b72d8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7750:	682a      	ldr	r2, [r5, #0]
   b7752:	6823      	ldr	r3, [r4, #0]
   b7754:	8812      	ldrh	r2, [r2, #0]
   b7756:	881b      	ldrh	r3, [r3, #0]
   b7758:	429a      	cmp	r2, r3
   b775a:	d10d      	bne.n	b7778 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b775c:	4629      	mov	r1, r5
   b775e:	a802      	add	r0, sp, #8
   b7760:	f7ff ffdc 	bl	b771c <_ZNK8particle13BlePeerDevice7addressEv>
   b7764:	4621      	mov	r1, r4
   b7766:	a804      	add	r0, sp, #16
   b7768:	f7ff ffd8 	bl	b771c <_ZNK8particle13BlePeerDevice7addressEv>
   b776c:	a904      	add	r1, sp, #16
   b776e:	a802      	add	r0, sp, #8
   b7770:	f7ff fdd9 	bl	b7326 <_ZNK8particle10BleAddresseqERKS0_>
   b7774:	4604      	mov	r4, r0
   b7776:	b900      	cbnz	r0, b777a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7778:	2400      	movs	r4, #0
    WiringBleLock lk;
   b777a:	a801      	add	r0, sp, #4
   b777c:	f7ff fdba 	bl	b72f4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7780:	4620      	mov	r0, r4
   b7782:	b007      	add	sp, #28
   b7784:	bd30      	pop	{r4, r5, pc}
	...

000b7788 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7788:	b510      	push	{r4, lr}
   b778a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b778c:	2064      	movs	r0, #100	; 0x64
   b778e:	f7fc fc82 	bl	b4096 <_Znwj>
   b7792:	b168      	cbz	r0, b77b0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7794:	2300      	movs	r3, #0
   b7796:	e9c0 3300 	strd	r3, r3, [r0]
   b779a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b779e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b77a2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b77a6:	6203      	str	r3, [r0, #32]
   b77a8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b77aa:	63c3      	str	r3, [r0, #60]	; 0x3c
   b77ac:	64c3      	str	r3, [r0, #76]	; 0x4c
   b77ae:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b77b0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b77b2:	b920      	cbnz	r0, b77be <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b77b4:	4a0a      	ldr	r2, [pc, #40]	; (b77e0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b77b6:	490b      	ldr	r1, [pc, #44]	; (b77e4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b77b8:	200a      	movs	r0, #10
   b77ba:	f7fe fe25 	bl	b6408 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b77be:	2000      	movs	r0, #0
   b77c0:	f7fe fc58 	bl	b6074 <hal_ble_stack_init>
   b77c4:	b120      	cbz	r0, b77d0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b77c6:	4a06      	ldr	r2, [pc, #24]	; (b77e0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b77c8:	4907      	ldr	r1, [pc, #28]	; (b77e8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b77ca:	200a      	movs	r0, #10
   b77cc:	f7fe fe1c 	bl	b6408 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b77d0:	6821      	ldr	r1, [r4, #0]
   b77d2:	4806      	ldr	r0, [pc, #24]	; (b77ec <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b77d4:	2200      	movs	r2, #0
   b77d6:	f7fe fca9 	bl	b612c <hal_ble_set_callback_on_periph_link_events>
}
   b77da:	4620      	mov	r0, r4
   b77dc:	bd10      	pop	{r4, pc}
   b77de:	bf00      	nop
   b77e0:	000b6035 	.word	0x000b6035
   b77e4:	000bcf38 	.word	0x000bcf38
   b77e8:	000bcf76 	.word	0x000bcf76
   b77ec:	000b7db5 	.word	0x000b7db5

000b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b77f0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b77f2:	4c0a      	ldr	r4, [pc, #40]	; (b781c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b77f4:	7823      	ldrb	r3, [r4, #0]
   b77f6:	f3bf 8f5b 	dmb	ish
   b77fa:	07db      	lsls	r3, r3, #31
   b77fc:	d40c      	bmi.n	b7818 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b77fe:	4620      	mov	r0, r4
   b7800:	f7fc fc51 	bl	b40a6 <__cxa_guard_acquire>
   b7804:	b140      	cbz	r0, b7818 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7806:	4806      	ldr	r0, [pc, #24]	; (b7820 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7808:	f7ff ffbe 	bl	b7788 <_ZN8particle14BleLocalDeviceC1Ev>
   b780c:	4620      	mov	r0, r4
   b780e:	f7fc fc4f 	bl	b40b0 <__cxa_guard_release>
   b7812:	4804      	ldr	r0, [pc, #16]	; (b7824 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7814:	f002 ff4a 	bl	ba6ac <atexit>
    return instance;
}
   b7818:	4801      	ldr	r0, [pc, #4]	; (b7820 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b781a:	bd10      	pop	{r4, pc}
   b781c:	2003e68c 	.word	0x2003e68c
   b7820:	2003e698 	.word	0x2003e698
   b7824:	000b7a5d 	.word	0x000b7a5d

000b7828 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7828:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b782a:	6803      	ldr	r3, [r0, #0]
   b782c:	3b09      	subs	r3, #9
   b782e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7830:	b08d      	sub	sp, #52	; 0x34
   b7832:	4604      	mov	r4, r0
   b7834:	460d      	mov	r5, r1
    switch (event->type) {
   b7836:	d811      	bhi.n	b785c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7838:	f7ff ffda 	bl	b77f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b783c:	88a1      	ldrh	r1, [r4, #4]
   b783e:	6800      	ldr	r0, [r0, #0]
   b7840:	f7ff fea2 	bl	b7588 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7844:	4603      	mov	r3, r0
   b7846:	b958      	cbnz	r0, b7860 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7848:	2220      	movs	r2, #32
   b784a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b784e:	4a0b      	ldr	r2, [pc, #44]	; (b787c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7850:	9200      	str	r2, [sp, #0]
   b7852:	490b      	ldr	r1, [pc, #44]	; (b7880 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7854:	aa04      	add	r2, sp, #16
   b7856:	2032      	movs	r0, #50	; 0x32
   b7858:	f7fe fdde 	bl	b6418 <log_message>
}
   b785c:	b00d      	add	sp, #52	; 0x34
   b785e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7860:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7862:	2a00      	cmp	r2, #0
   b7864:	d0fa      	beq.n	b785c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7866:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b786a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b786e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7872:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7874:	aa04      	add	r2, sp, #16
   b7876:	a903      	add	r1, sp, #12
   b7878:	47a0      	blx	r4
}
   b787a:	e7ef      	b.n	b785c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b787c:	000bcfb8 	.word	0x000bcfb8
   b7880:	000bcf4f 	.word	0x000bcf4f

000b7884 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7884:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7886:	2000      	movs	r0, #0
   b7888:	f7fe fbf4 	bl	b6074 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b788c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7890:	bd08      	pop	{r3, pc}

000b7892 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b7892:	b919      	cbnz	r1, b789c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7894:	460a      	mov	r2, r1
   b7896:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7898:	f7fe bbf4 	b.w	b6084 <hal_ble_gap_set_advertising_data>
   b789c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b78a0:	2200      	movs	r2, #0
   b78a2:	e7f9      	b.n	b7898 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b78a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b78a4:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b78a6:	1e14      	subs	r4, r2, #0
   b78a8:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b78aa:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b78ac:	db02      	blt.n	b78b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b78ae:	1862      	adds	r2, r4, r1
   b78b0:	429a      	cmp	r2, r3
   b78b2:	dd00      	ble.n	b78b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b78b4:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b78b6:	682a      	ldr	r2, [r5, #0]
   b78b8:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b78ba:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b78bc:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78be:	1a52      	subs	r2, r2, r1
   b78c0:	f002 ff33 	bl	ba72a <memmove>
    size_ -= n;
   b78c4:	686a      	ldr	r2, [r5, #4]
   b78c6:	1b12      	subs	r2, r2, r4
   b78c8:	606a      	str	r2, [r5, #4]
}
   b78ca:	bd38      	pop	{r3, r4, r5, pc}

000b78cc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b78cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b78ce:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b78d0:	4604      	mov	r4, r0
   b78d2:	460d      	mov	r5, r1
   b78d4:	ab01      	add	r3, sp, #4
   b78d6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b78da:	f7ff fc4d 	bl	b7178 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b78de:	4602      	mov	r2, r0
   b78e0:	b138      	cbz	r0, b78f2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b78e2:	9901      	ldr	r1, [sp, #4]
   b78e4:	4620      	mov	r0, r4
   b78e6:	f7ff ffdd 	bl	b78a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b78ea:	4629      	mov	r1, r5
   b78ec:	4620      	mov	r0, r4
   b78ee:	f7ff ffed 	bl	b78cc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b78f2:	b003      	add	sp, #12
   b78f4:	bd30      	pop	{r4, r5, pc}

000b78f6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b78f6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b78f8:	460c      	mov	r4, r1
   b78fa:	b929      	cbnz	r1, b7908 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b78fc:	460a      	mov	r2, r1
   b78fe:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7904:	f7fe bbc6 	b.w	b6094 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7908:	2101      	movs	r1, #1
   b790a:	4620      	mov	r0, r4
   b790c:	f7ff ffde 	bl	b78cc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7910:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7914:	2200      	movs	r2, #0
   b7916:	e7f3      	b.n	b7900 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7918 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7918:	b538      	push	{r3, r4, r5, lr}
   b791a:	4604      	mov	r4, r0
   b791c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b791e:	f7ff ffb8 	bl	b7892 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7922:	2800      	cmp	r0, #0
   b7924:	db0a      	blt.n	b793c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7926:	4629      	mov	r1, r5
   b7928:	4620      	mov	r0, r4
   b792a:	f7ff ffe4 	bl	b78f6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b792e:	2800      	cmp	r0, #0
   b7930:	db04      	blt.n	b793c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7936:	2000      	movs	r0, #0
   b7938:	f7fe bbb4 	b.w	b60a4 <hal_ble_gap_start_advertising>
}
   b793c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7940 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7940:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7942:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7944:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7946:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7948:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b794a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b794c:	f7fc fba3 	bl	b4096 <_Znwj>
   b7950:	b118      	cbz	r0, b795a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7952:	682b      	ldr	r3, [r5, #0]
   b7954:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7956:	686b      	ldr	r3, [r5, #4]
   b7958:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b795a:	4b03      	ldr	r3, [pc, #12]	; (b7968 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b795c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b795e:	4b03      	ldr	r3, [pc, #12]	; (b796c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7960:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7962:	60a3      	str	r3, [r4, #8]
      }
   b7964:	4620      	mov	r0, r4
   b7966:	bd38      	pop	{r3, r4, r5, pc}
   b7968:	000b71c5 	.word	0x000b71c5
   b796c:	000b721d 	.word	0x000b721d

000b7970 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7970:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7972:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7974:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7976:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7978:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b797a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b797c:	f7fc fb8b 	bl	b4096 <_Znwj>
   b7980:	b118      	cbz	r0, b798a <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b7982:	682b      	ldr	r3, [r5, #0]
   b7984:	6003      	str	r3, [r0, #0]
   b7986:	686b      	ldr	r3, [r5, #4]
   b7988:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b798a:	4b03      	ldr	r3, [pc, #12]	; (b7998 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b798c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b798e:	4b03      	ldr	r3, [pc, #12]	; (b799c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7990:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7992:	60a3      	str	r3, [r4, #8]
      }
   b7994:	4620      	mov	r0, r4
   b7996:	bd38      	pop	{r3, r4, r5, pc}
   b7998:	000b71b9 	.word	0x000b71b9
   b799c:	000b71dd 	.word	0x000b71dd

000b79a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b79a0:	680b      	ldr	r3, [r1, #0]
   b79a2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b79a4:	b113      	cbz	r3, b79ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b79a6:	685a      	ldr	r2, [r3, #4]
   b79a8:	3201      	adds	r2, #1
   b79aa:	605a      	str	r2, [r3, #4]
      }
   b79ac:	4770      	bx	lr

000b79ae <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b79ae:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b79b0:	f851 3b04 	ldr.w	r3, [r1], #4
   b79b4:	4604      	mov	r4, r0
   b79b6:	f840 3b04 	str.w	r3, [r0], #4
   b79ba:	f7ff fff1 	bl	b79a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b79be:	6823      	ldr	r3, [r4, #0]
   b79c0:	b90b      	cbnz	r3, b79c6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b79c2:	f7ff fbef 	bl	b71a4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b79c6:	4620      	mov	r0, r4
   b79c8:	bd10      	pop	{r4, pc}

000b79ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b79ca:	b510      	push	{r4, lr}
   b79cc:	f851 3b04 	ldr.w	r3, [r1], #4
   b79d0:	4604      	mov	r4, r0
   b79d2:	f840 3b04 	str.w	r3, [r0], #4
   b79d6:	f7ff ffe3 	bl	b79a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b79da:	4620      	mov	r0, r4
   b79dc:	bd10      	pop	{r4, pc}

000b79de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b79de:	b510      	push	{r4, lr}
   b79e0:	f851 3b04 	ldr.w	r3, [r1], #4
   b79e4:	4604      	mov	r4, r0
   b79e6:	f840 3b04 	str.w	r3, [r0], #4
   b79ea:	f7ff ffd9 	bl	b79a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b79ee:	4620      	mov	r0, r4
   b79f0:	bd10      	pop	{r4, pc}

000b79f2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b79f2:	b510      	push	{r4, lr}
   b79f4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b79f6:	3004      	adds	r0, #4
   b79f8:	f7fc fdce 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b79fc:	4620      	mov	r0, r4
   b79fe:	bd10      	pop	{r4, pc}

000b7a00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7a00:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7a02:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7a06:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7a08:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7a0c:	42ae      	cmp	r6, r5
   b7a0e:	d004      	beq.n	b7a1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7a10:	1d28      	adds	r0, r5, #4
   b7a12:	f7fc fdc1 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a16:	3508      	adds	r5, #8
   b7a18:	e7f8      	b.n	b7a0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7a1a:	6820      	ldr	r0, [r4, #0]
   b7a1c:	f7fe fde8 	bl	b65f0 <free>
}
   b7a20:	4620      	mov	r0, r4
   b7a22:	bd70      	pop	{r4, r5, r6, pc}

000b7a24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7a24:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7a26:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7a2a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7a2c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7a30:	42ae      	cmp	r6, r5
   b7a32:	d004      	beq.n	b7a3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7a34:	1d28      	adds	r0, r5, #4
   b7a36:	f7fc fdaf 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a3a:	3508      	adds	r5, #8
   b7a3c:	e7f8      	b.n	b7a30 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7a3e:	6820      	ldr	r0, [r4, #0]
   b7a40:	f7fe fdd6 	bl	b65f0 <free>
}
   b7a44:	4620      	mov	r0, r4
   b7a46:	bd70      	pop	{r4, r5, r6, pc}

000b7a48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7a48:	b510      	push	{r4, lr}
   b7a4a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7a4c:	3024      	adds	r0, #36	; 0x24
   b7a4e:	f7ff ffe9 	bl	b7a24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7a52:	f104 0018 	add.w	r0, r4, #24
   b7a56:	f7ff ffd3 	bl	b7a00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7a5a:	bd10      	pop	{r4, pc}

000b7a5c <__tcf_0>:
    static BleLocalDevice instance;
   b7a5c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7a5e:	4b17      	ldr	r3, [pc, #92]	; (b7abc <__tcf_0+0x60>)
   b7a60:	681c      	ldr	r4, [r3, #0]
   b7a62:	b354      	cbz	r4, b7aba <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7a64:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7a68:	f7ff fbf8 	bl	b725c <_ZNSt14_Function_baseD1Ev>
   b7a6c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7a70:	f7ff fbf4 	bl	b725c <_ZNSt14_Function_baseD1Ev>
   b7a74:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7a78:	f7ff fbf0 	bl	b725c <_ZNSt14_Function_baseD1Ev>
   b7a7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7a80:	f7ff fbec 	bl	b725c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7a84:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7a88:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7a8c:	42ae      	cmp	r6, r5
   b7a8e:	d004      	beq.n	b7a9a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7a90:	1d28      	adds	r0, r5, #4
   b7a92:	f7fc fd81 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a96:	3508      	adds	r5, #8
   b7a98:	e7f8      	b.n	b7a8c <__tcf_0+0x30>
    ::free(ptr);
   b7a9a:	69a0      	ldr	r0, [r4, #24]
   b7a9c:	f7fe fda8 	bl	b65f0 <free>
    ~BleLocalDeviceImpl() = default;
   b7aa0:	f104 000c 	add.w	r0, r4, #12
   b7aa4:	f7ff ffbe 	bl	b7a24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7aa8:	4620      	mov	r0, r4
   b7aaa:	f7ff ffa9 	bl	b7a00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7aae:	4620      	mov	r0, r4
   b7ab0:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b7ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7ab6:	f7fc baf4 	b.w	b40a2 <_ZdlPvj>
   b7aba:	bd70      	pop	{r4, r5, r6, pc}
   b7abc:	2003e698 	.word	0x2003e698

000b7ac0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b7ac0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b7ac2:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7ac4:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7ac8:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b7acc:	6803      	ldr	r3, [r0, #0]
   b7ace:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ad0:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7ad2:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7ad4:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7ad6:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7ad8:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7ada:	f7fc fd5d 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7ade:	b002      	add	sp, #8
   b7ae0:	bd10      	pop	{r4, pc}

000b7ae2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7ae2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7ae4:	b510      	push	{r4, lr}
      if (_M_empty())
   b7ae6:	b90a      	cbnz	r2, b7aec <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7ae8:	f002 f836 	bl	b9b58 <_ZSt25__throw_bad_function_callv>
    }
   b7aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7af0:	68c3      	ldr	r3, [r0, #12]
   b7af2:	4718      	bx	r3

000b7af4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7af4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7af6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7af8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7afa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7afc:	dd03      	ble.n	b7b06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7afe:	f7fe fd7f 	bl	b6600 <realloc>
            if (!d) {
   b7b02:	b918      	cbnz	r0, b7b0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7b04:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7b06:	f7fe fd73 	bl	b65f0 <free>
        T* d = nullptr;
   b7b0a:	2000      	movs	r0, #0
        data_ = d;
   b7b0c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7b0e:	60a5      	str	r5, [r4, #8]
        return true;
   b7b10:	2001      	movs	r0, #1
   b7b12:	e7f7      	b.n	b7b04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7b14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7b14:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7b16:	6883      	ldr	r3, [r0, #8]
   b7b18:	428b      	cmp	r3, r1
   b7b1a:	da02      	bge.n	b7b22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7b1c:	f7ff ffea 	bl	b7af4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7b20:	bd08      	pop	{r3, pc}
    return true;
   b7b22:	2001      	movs	r0, #1
   b7b24:	e7fc      	b.n	b7b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7b26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b2a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7b2c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7b2e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7b30:	4419      	add	r1, r3
   b7b32:	6883      	ldr	r3, [r0, #8]
   b7b34:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7b36:	4604      	mov	r4, r0
   b7b38:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7b3a:	dc12      	bgt.n	b7b62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7b3c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b3e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7b40:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b42:	1bd2      	subs	r2, r2, r7
   b7b44:	4631      	mov	r1, r6
   b7b46:	1970      	adds	r0, r6, r5
   b7b48:	f002 fdef 	bl	ba72a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7b4c:	462a      	mov	r2, r5
   b7b4e:	4641      	mov	r1, r8
   b7b50:	4630      	mov	r0, r6
   b7b52:	f002 fddc 	bl	ba70e <memcpy>
    size_ += n;
   b7b56:	6863      	ldr	r3, [r4, #4]
   b7b58:	442b      	add	r3, r5
   b7b5a:	6063      	str	r3, [r4, #4]
    return true;
   b7b5c:	2001      	movs	r0, #1
}
   b7b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7b62:	f7ff ffc7 	bl	b7af4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7b66:	2800      	cmp	r0, #0
   b7b68:	d1e8      	bne.n	b7b3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7b6a:	e7f8      	b.n	b7b5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7b6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b6e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b70:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7b74:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7b76:	4604      	mov	r4, r0
   b7b78:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b7a:	da0b      	bge.n	b7b94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7b7c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b7e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7b80:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b82:	1b52      	subs	r2, r2, r5
   b7b84:	1c48      	adds	r0, r1, #1
   b7b86:	f002 fdd0 	bl	ba72a <memmove>
    new(p) T(std::move(value));
   b7b8a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7b8c:	6863      	ldr	r3, [r4, #4]
   b7b8e:	3301      	adds	r3, #1
   b7b90:	6063      	str	r3, [r4, #4]
}
   b7b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b94:	3101      	adds	r1, #1
   b7b96:	f7ff ffad 	bl	b7af4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7b9a:	2800      	cmp	r0, #0
   b7b9c:	d1ee      	bne.n	b7b7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7b9e:	e7f8      	b.n	b7b92 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7ba0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7ba0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7ba2:	6841      	ldr	r1, [r0, #4]
   b7ba4:	f7ff bfe2 	b.w	b7b6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7ba8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7bac:	4604      	mov	r4, r0
   b7bae:	461d      	mov	r5, r3
   b7bb0:	460f      	mov	r7, r1
   b7bb2:	ab01      	add	r3, sp, #4
   b7bb4:	4690      	mov	r8, r2
   b7bb6:	460a      	mov	r2, r1
   b7bb8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7bbc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7bc0:	f7ff fada 	bl	b7178 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7bc4:	1cae      	adds	r6, r5, #2
   b7bc6:	6863      	ldr	r3, [r4, #4]
   b7bc8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7bca:	f1b9 0f00 	cmp.w	r9, #0
   b7bce:	d126      	bne.n	b7c1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7bd0:	b328      	cbz	r0, b7c1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7bd2:	4433      	add	r3, r6
   b7bd4:	1a1b      	subs	r3, r3, r0
   b7bd6:	2bff      	cmp	r3, #255	; 0xff
   b7bd8:	d809      	bhi.n	b7bee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7bda:	9901      	ldr	r1, [sp, #4]
   b7bdc:	4620      	mov	r0, r4
   b7bde:	f7ff fe61 	bl	b78a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7be2:	6861      	ldr	r1, [r4, #4]
   b7be4:	4620      	mov	r0, r4
   b7be6:	4431      	add	r1, r6
   b7be8:	f7ff ff94 	bl	b7b14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7bec:	b918      	cbnz	r0, b7bf6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7bee:	6860      	ldr	r0, [r4, #4]
}
   b7bf0:	b003      	add	sp, #12
   b7bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7bf6:	1c6a      	adds	r2, r5, #1
   b7bf8:	9901      	ldr	r1, [sp, #4]
   b7bfa:	b2d2      	uxtb	r2, r2
   b7bfc:	4620      	mov	r0, r4
   b7bfe:	f7ff ffb5 	bl	b7b6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7c02:	9901      	ldr	r1, [sp, #4]
   b7c04:	463a      	mov	r2, r7
   b7c06:	3101      	adds	r1, #1
   b7c08:	4620      	mov	r0, r4
   b7c0a:	f7ff ffaf 	bl	b7b6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7c0e:	9901      	ldr	r1, [sp, #4]
   b7c10:	462b      	mov	r3, r5
   b7c12:	4642      	mov	r2, r8
   b7c14:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7c16:	4620      	mov	r0, r4
   b7c18:	f7ff ff85 	bl	b7b26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7c1c:	e7e7      	b.n	b7bee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7c1e:	18f1      	adds	r1, r6, r3
   b7c20:	29ff      	cmp	r1, #255	; 0xff
   b7c22:	d8e4      	bhi.n	b7bee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7c24:	4620      	mov	r0, r4
   b7c26:	f7ff ff75 	bl	b7b14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7c2a:	2800      	cmp	r0, #0
   b7c2c:	d0df      	beq.n	b7bee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7c2e:	1c69      	adds	r1, r5, #1
   b7c30:	b2c9      	uxtb	r1, r1
   b7c32:	4620      	mov	r0, r4
   b7c34:	f7ff ffb4 	bl	b7ba0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7c38:	4639      	mov	r1, r7
   b7c3a:	4620      	mov	r0, r4
   b7c3c:	f7ff ffb0 	bl	b7ba0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7c40:	6861      	ldr	r1, [r4, #4]
   b7c42:	462b      	mov	r3, r5
   b7c44:	4642      	mov	r2, r8
   b7c46:	e7e6      	b.n	b7c16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7c48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7c48:	b430      	push	{r4, r5}
   b7c4a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7c4e:	b11a      	cbz	r2, b7c58 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7c50:	9502      	str	r5, [sp, #8]
}
   b7c52:	bc30      	pop	{r4, r5}
   b7c54:	f7ff bfa8 	b.w	b7ba8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7c58:	6840      	ldr	r0, [r0, #4]
}
   b7c5a:	bc30      	pop	{r4, r5}
   b7c5c:	4770      	bx	lr

000b7c5e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7c5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7c60:	2300      	movs	r3, #0
   b7c62:	e9c0 3300 	strd	r3, r3, [r0]
   b7c66:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7c68:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7c6a:	9300      	str	r3, [sp, #0]
   b7c6c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7c6e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7c72:	4619      	mov	r1, r3
   b7c74:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7c78:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7c7a:	f7ff ffe5 	bl	b7c48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7c7e:	4620      	mov	r0, r4
   b7c80:	b004      	add	sp, #16
   b7c82:	bd10      	pop	{r4, pc}

000b7c84 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7c86:	460a      	mov	r2, r1
   b7c88:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b7c8a:	2114      	movs	r1, #20
   b7c8c:	4610      	mov	r0, r2
   b7c8e:	9203      	str	r2, [sp, #12]
   b7c90:	f002 fe0a 	bl	ba8a8 <strnlen>
   b7c94:	2100      	movs	r1, #0
   b7c96:	4603      	mov	r3, r0
   b7c98:	9100      	str	r1, [sp, #0]
   b7c9a:	9a03      	ldr	r2, [sp, #12]
   b7c9c:	2109      	movs	r1, #9
   b7c9e:	4620      	mov	r0, r4
   b7ca0:	f7ff ffd2 	bl	b7c48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7ca4:	b004      	add	sp, #16
   b7ca6:	bd10      	pop	{r4, pc}

000b7ca8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7ca8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7cac:	4604      	mov	r4, r0
   b7cae:	460d      	mov	r5, r1
   b7cb0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7cb2:	d914      	bls.n	b7cde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7cb4:	4290      	cmp	r0, r2
   b7cb6:	d213      	bcs.n	b7ce0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7cb8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7cbc:	1a75      	subs	r5, r6, r1
   b7cbe:	f1a1 0708 	sub.w	r7, r1, #8
   b7cc2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7cc4:	42b7      	cmp	r7, r6
   b7cc6:	d018      	beq.n	b7cfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7cc8:	b11c      	cbz	r4, b7cd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7cca:	4631      	mov	r1, r6
   b7ccc:	4620      	mov	r0, r4
   b7cce:	f7ff fe86 	bl	b79de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7cd2:	1d30      	adds	r0, r6, #4
   b7cd4:	f7fc fc60 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7cd8:	3e08      	subs	r6, #8
   b7cda:	3c08      	subs	r4, #8
   b7cdc:	e7f2      	b.n	b7cc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7cde:	d00c      	beq.n	b7cfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7ce0:	42b5      	cmp	r5, r6
   b7ce2:	d00a      	beq.n	b7cfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7ce4:	b11c      	cbz	r4, b7cee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7ce6:	4629      	mov	r1, r5
   b7ce8:	4620      	mov	r0, r4
   b7cea:	f7ff fe78 	bl	b79de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7cee:	1d28      	adds	r0, r5, #4
   b7cf0:	f7fc fc52 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7cf4:	3508      	adds	r5, #8
   b7cf6:	3408      	adds	r4, #8
   b7cf8:	e7f2      	b.n	b7ce0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7cfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7cfe:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7d00:	6846      	ldr	r6, [r0, #4]
   b7d02:	4668      	mov	r0, sp
   b7d04:	f7ff fe6b 	bl	b79de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7d08:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7d0c:	429f      	cmp	r7, r3
   b7d0e:	db12      	blt.n	b7d36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7d10:	3701      	adds	r7, #1
        if (n > 0) {
   b7d12:	2f00      	cmp	r7, #0
   b7d14:	dd29      	ble.n	b7d6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7d16:	00f8      	lsls	r0, r7, #3
   b7d18:	f7fe fc62 	bl	b65e0 <malloc>
            if (!d) {
   b7d1c:	4605      	mov	r5, r0
   b7d1e:	b1f0      	cbz	r0, b7d5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7d20:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7d24:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7d28:	f7ff ffbe 	bl	b7ca8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7d2c:	6820      	ldr	r0, [r4, #0]
   b7d2e:	f7fe fc5f 	bl	b65f0 <free>
        data_ = d;
   b7d32:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7d34:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7d36:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7d38:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7d3a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7d3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7d42:	4631      	mov	r1, r6
   b7d44:	f106 0008 	add.w	r0, r6, #8
   b7d48:	f7ff ffae 	bl	b7ca8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7d4c:	b11e      	cbz	r6, b7d56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7d4e:	4669      	mov	r1, sp
   b7d50:	4630      	mov	r0, r6
   b7d52:	f7ff fe44 	bl	b79de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7d56:	6863      	ldr	r3, [r4, #4]
   b7d58:	3301      	adds	r3, #1
   b7d5a:	6063      	str	r3, [r4, #4]
    return true;
   b7d5c:	2501      	movs	r5, #1
   b7d5e:	a801      	add	r0, sp, #4
   b7d60:	f7fc fc1a 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7d64:	4628      	mov	r0, r5
   b7d66:	b003      	add	sp, #12
   b7d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7d6a:	2500      	movs	r5, #0
   b7d6c:	e7de      	b.n	b7d2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7d6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7d70:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7d74:	4605      	mov	r5, r0
   b7d76:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7d78:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7d7c:	42a6      	cmp	r6, r4
   b7d7e:	d005      	beq.n	b7d8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7d80:	4639      	mov	r1, r7
   b7d82:	4620      	mov	r0, r4
   b7d84:	f7ff fcdd 	bl	b7742 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7d88:	b108      	cbz	r0, b7d8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7d8a:	b914      	cbnz	r4, b7d92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7d8e:	3408      	adds	r4, #8
   b7d90:	e7f4      	b.n	b7d7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7d92:	1d20      	adds	r0, r4, #4
   b7d94:	f7fc fc00 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7d98:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7d9c:	f104 0108 	add.w	r1, r4, #8
   b7da0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7da4:	4620      	mov	r0, r4
   b7da6:	f7ff ff7f 	bl	b7ca8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7daa:	686b      	ldr	r3, [r5, #4]
   b7dac:	3b01      	subs	r3, #1
   b7dae:	606b      	str	r3, [r5, #4]
    return true;
   b7db0:	e7ec      	b.n	b7d8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7db4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7db8:	4605      	mov	r5, r0
   b7dba:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7dbc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7dbe:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7dc0:	f7ff fa8a 	bl	b72d8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7dc4:	682e      	ldr	r6, [r5, #0]
   b7dc6:	1ef3      	subs	r3, r6, #3
   b7dc8:	2b0d      	cmp	r3, #13
   b7dca:	d83c      	bhi.n	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7dcc:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7dd0:	0053000e 	.word	0x0053000e
   b7dd4:	00d1003b 	.word	0x00d1003b
   b7dd8:	003b003b 	.word	0x003b003b
   b7ddc:	003b003b 	.word	0x003b003b
   b7de0:	009b003b 	.word	0x009b003b
   b7de4:	009b009b 	.word	0x009b009b
   b7de8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7dec:	a804      	add	r0, sp, #16
   b7dee:	f7ff fc73 	bl	b76d8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7df2:	9b04      	ldr	r3, [sp, #16]
   b7df4:	89aa      	ldrh	r2, [r5, #12]
   b7df6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7df8:	6869      	ldr	r1, [r5, #4]
   b7dfa:	9804      	ldr	r0, [sp, #16]
   b7dfc:	3108      	adds	r1, #8
   b7dfe:	3002      	adds	r0, #2
   b7e00:	f7ff fa84 	bl	b730c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7e04:	a904      	add	r1, sp, #16
   b7e06:	a806      	add	r0, sp, #24
   b7e08:	f7ff fde9 	bl	b79de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7e0c:	a906      	add	r1, sp, #24
   b7e0e:	f104 0018 	add.w	r0, r4, #24
   b7e12:	f7ff ff73 	bl	b7cfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7e16:	4605      	mov	r5, r0
   b7e18:	a807      	add	r0, sp, #28
   b7e1a:	f7fc fbbd 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e1e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7e20:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7e22:	b9b5      	cbnz	r5, b7e52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7e24:	4b5d      	ldr	r3, [pc, #372]	; (b7f9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b7e26:	495e      	ldr	r1, [pc, #376]	; (b7fa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7e28:	9300      	str	r3, [sp, #0]
   b7e2a:	2032      	movs	r0, #50	; 0x32
   b7e2c:	462b      	mov	r3, r5
   b7e2e:	aa06      	add	r2, sp, #24
   b7e30:	9507      	str	r5, [sp, #28]
   b7e32:	f7fe faf1 	bl	b6418 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7e36:	9b04      	ldr	r3, [sp, #16]
   b7e38:	4629      	mov	r1, r5
   b7e3a:	8818      	ldrh	r0, [r3, #0]
   b7e3c:	f7fe f93a 	bl	b60b4 <hal_ble_gap_disconnect>
   b7e40:	a805      	add	r0, sp, #20
   b7e42:	f7fc fba9 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7e46:	a803      	add	r0, sp, #12
   b7e48:	f7ff fa54 	bl	b72f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7e4c:	b00e      	add	sp, #56	; 0x38
   b7e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7e52:	4a54      	ldr	r2, [pc, #336]	; (b7fa4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7e54:	9200      	str	r2, [sp, #0]
   b7e56:	2300      	movs	r3, #0
   b7e58:	4951      	ldr	r1, [pc, #324]	; (b7fa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7e5a:	9307      	str	r3, [sp, #28]
   b7e5c:	aa06      	add	r2, sp, #24
   b7e5e:	2001      	movs	r0, #1
   b7e60:	f7fe fada 	bl	b6418 <log_message>
                if (impl->connectedCallback_) {
   b7e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7e66:	2b00      	cmp	r3, #0
   b7e68:	d0ea      	beq.n	b7e40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b7e6a:	a904      	add	r1, sp, #16
   b7e6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7e70:	f7ff fe37 	bl	b7ae2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7e74:	e7e4      	b.n	b7e40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7e76:	89a9      	ldrh	r1, [r5, #12]
   b7e78:	4620      	mov	r0, r4
   b7e7a:	f7ff fb85 	bl	b7588 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7e7e:	4606      	mov	r6, r0
   b7e80:	2800      	cmp	r0, #0
   b7e82:	d0e0      	beq.n	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7e84:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7e86:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7e8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7e8e:	8029      	strh	r1, [r5, #0]
   b7e90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7e94:	429a      	cmp	r2, r3
   b7e96:	d003      	beq.n	b7ea0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7e98:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7e9c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7e9e:	e7f9      	b.n	b7e94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b7ea0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7ea4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7ea8:	45b8      	cmp	r8, r7
   b7eaa:	d004      	beq.n	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7eac:	1d38      	adds	r0, r7, #4
   b7eae:	f7fc fb73 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7eb2:	3708      	adds	r7, #8
   b7eb4:	e7f8      	b.n	b7ea8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7eb6:	2300      	movs	r3, #0
   b7eb8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7eba:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7ebe:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7ec2:	45b8      	cmp	r8, r7
   b7ec4:	d004      	beq.n	b7ed0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7ec6:	1d38      	adds	r0, r7, #4
   b7ec8:	f7fc fb66 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ecc:	3708      	adds	r7, #8
   b7ece:	e7f8      	b.n	b7ec2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7ed0:	2300      	movs	r3, #0
   b7ed2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7ed4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7ed6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7ed8:	b123      	cbz	r3, b7ee4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7eda:	4631      	mov	r1, r6
   b7edc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7ee0:	f7ff fdff 	bl	b7ae2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7ee4:	2300      	movs	r3, #0
   b7ee6:	2220      	movs	r2, #32
   b7ee8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7eec:	4a2e      	ldr	r2, [pc, #184]	; (b7fa8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7eee:	9200      	str	r2, [sp, #0]
   b7ef0:	492b      	ldr	r1, [pc, #172]	; (b7fa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7ef2:	aa06      	add	r2, sp, #24
   b7ef4:	2001      	movs	r0, #1
   b7ef6:	f7fe fa8f 	bl	b6418 <log_message>
                    impl->peers_.removeOne(*peer);
   b7efa:	4631      	mov	r1, r6
   b7efc:	f104 0018 	add.w	r0, r4, #24
   b7f00:	f7ff ff35 	bl	b7d6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7f04:	e79f      	b.n	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7f06:	89a9      	ldrh	r1, [r5, #12]
   b7f08:	4620      	mov	r0, r4
   b7f0a:	f7ff fb3d 	bl	b7588 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7f0e:	2800      	cmp	r0, #0
   b7f10:	d099      	beq.n	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7f12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7f14:	2b00      	cmp	r3, #0
   b7f16:	d096      	beq.n	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7f18:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7f1a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7f1c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7f20:	d001      	beq.n	b7f26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7f22:	2e10      	cmp	r6, #16
   b7f24:	d117      	bne.n	b7f56 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b7f26:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7f28:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7f2a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7f2c:	2506      	movs	r5, #6
                        };
   b7f2e:	f88d 3015 	strb.w	r3, [sp, #21]
   b7f32:	9104      	str	r1, [sp, #16]
   b7f34:	f88d 2014 	strb.w	r2, [sp, #20]
   b7f38:	9006      	str	r0, [sp, #24]
   b7f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7f3e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7f40:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7f44:	9508      	str	r5, [sp, #32]
   b7f46:	e883 0003 	stmia.w	r3, {r0, r1}
   b7f4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7f4c:	a906      	add	r1, sp, #24
   b7f4e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7f52:	4798      	blx	r3
   b7f54:	e777      	b.n	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7f56:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7f58:	bf01      	itttt	eq
   b7f5a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7f5c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7f5e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7f62:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7f64:	bf0f      	iteee	eq
   b7f66:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7f6a:	461a      	movne	r2, r3
   b7f6c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7f6e:	461d      	movne	r5, r3
   b7f70:	e7dd      	b.n	b7f2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7f72:	89a9      	ldrh	r1, [r5, #12]
   b7f74:	4620      	mov	r0, r4
   b7f76:	f7ff fb07 	bl	b7588 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7f7a:	4601      	mov	r1, r0
   b7f7c:	2800      	cmp	r0, #0
   b7f7e:	f43f af62 	beq.w	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7f82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7f84:	2b00      	cmp	r3, #0
   b7f86:	f43f af5e 	beq.w	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7f8a:	686b      	ldr	r3, [r5, #4]
   b7f8c:	9306      	str	r3, [sp, #24]
   b7f8e:	aa06      	add	r2, sp, #24
   b7f90:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7f92:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7f96:	4798      	blx	r3
   b7f98:	e755      	b.n	b7e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7f9a:	bf00      	nop
   b7f9c:	000bcfd0 	.word	0x000bcfd0
   b7fa0:	000bcf4f 	.word	0x000bcf4f
   b7fa4:	000bcff6 	.word	0x000bcff6
   b7fa8:	000bd013 	.word	0x000bd013

000b7fac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7fac:	b513      	push	{r0, r1, r4, lr}
   b7fae:	460b      	mov	r3, r1
   b7fb0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fb2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7fb6:	466c      	mov	r4, sp
   b7fb8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7fc0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7fc8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7fcc:	b002      	add	sp, #8
   b7fce:	bd10      	pop	{r4, pc}

000b7fd0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7fd0:	b538      	push	{r3, r4, r5, lr}
   b7fd2:	4605      	mov	r5, r0
   b7fd4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7fd6:	f7ff ffe9 	bl	b7fac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fda:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7fdc:	68a2      	ldr	r2, [r4, #8]
   b7fde:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fe0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fe2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7fe4:	68e2      	ldr	r2, [r4, #12]
   b7fe6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fe8:	60e3      	str	r3, [r4, #12]
      }
   b7fea:	bd38      	pop	{r3, r4, r5, pc}

000b7fec <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7fec:	b570      	push	{r4, r5, r6, lr}
   b7fee:	4604      	mov	r4, r0
   b7ff0:	b08c      	sub	sp, #48	; 0x30
   b7ff2:	460e      	mov	r6, r1
   b7ff4:	9201      	str	r2, [sp, #4]
   b7ff6:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7ff8:	f7ff faa6 	bl	b7548 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7ffc:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7ffe:	9901      	ldr	r1, [sp, #4]
   b8000:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8004:	f7fe ffbb 	bl	b6f7e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8008:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b800c:	b1cd      	cbz	r5, b8042 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b800e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8010:	9502      	str	r5, [sp, #8]
   b8012:	a902      	add	r1, sp, #8
   b8014:	a804      	add	r0, sp, #16
   b8016:	9303      	str	r3, [sp, #12]
   b8018:	f7ff fc92 	bl	b7940 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b801c:	2300      	movs	r3, #0
	__x.swap(*this);
   b801e:	a908      	add	r1, sp, #32
   b8020:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8022:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8024:	f7ff ffd4 	bl	b7fd0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8028:	4631      	mov	r1, r6
   b802a:	a808      	add	r0, sp, #32
   b802c:	f7ff ffd0 	bl	b7fd0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8030:	a808      	add	r0, sp, #32
   b8032:	f7ff f913 	bl	b725c <_ZNSt14_Function_baseD1Ev>
   b8036:	a804      	add	r0, sp, #16
   b8038:	f7ff f910 	bl	b725c <_ZNSt14_Function_baseD1Ev>
    }
   b803c:	4620      	mov	r0, r4
   b803e:	b00c      	add	sp, #48	; 0x30
   b8040:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8042:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8044:	e7ea      	b.n	b801c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8048 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b804c:	b087      	sub	sp, #28
   b804e:	461d      	mov	r5, r3
   b8050:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8054:	4680      	mov	r8, r0
   b8056:	468b      	mov	fp, r1
   b8058:	4692      	mov	sl, r2
   b805a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b805c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b805e:	2200      	movs	r2, #0
   b8060:	2068      	movs	r0, #104	; 0x68
   b8062:	9102      	str	r1, [sp, #8]
   b8064:	9204      	str	r2, [sp, #16]
   b8066:	f7fc f816 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b806a:	1e06      	subs	r6, r0, #0
   b806c:	f106 090c 	add.w	r9, r6, #12
   b8070:	d018      	beq.n	b80a4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8072:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8074:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8076:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b807a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b807c:	4a15      	ldr	r2, [pc, #84]	; (b80d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b807e:	f847 2b20 	str.w	r2, [r7], #32
   b8082:	9b03      	ldr	r3, [sp, #12]
   b8084:	9100      	str	r1, [sp, #0]
   b8086:	465a      	mov	r2, fp
   b8088:	4651      	mov	r1, sl
   b808a:	4648      	mov	r0, r9
   b808c:	f7ff ffae 	bl	b7fec <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8092:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8094:	682b      	ldr	r3, [r5, #0]
   b8096:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b809a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b809e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b80a0:	6823      	ldr	r3, [r4, #0]
   b80a2:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b80a4:	a904      	add	r1, sp, #16
   b80a6:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b80a8:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b80ac:	f7ff fd08 	bl	b7ac0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b80b0:	a805      	add	r0, sp, #20
   b80b2:	f7fc fa71 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b80b6:	f8d8 3000 	ldr.w	r3, [r8]
   b80ba:	b93b      	cbnz	r3, b80cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b80bc:	4a06      	ldr	r2, [pc, #24]	; (b80d8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b80be:	4907      	ldr	r1, [pc, #28]	; (b80dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b80c0:	200a      	movs	r0, #10
}
   b80c2:	b007      	add	sp, #28
   b80c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b80c8:	f7fe b99e 	b.w	b6408 <panic_>
}
   b80cc:	b007      	add	sp, #28
   b80ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b80d2:	bf00      	nop
   b80d4:	000bd08c 	.word	0x000bd08c
   b80d8:	000b6035 	.word	0x000b6035
   b80dc:	000bcf38 	.word	0x000bcf38

000b80e0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b80e0:	b538      	push	{r3, r4, r5, lr}
   b80e2:	4605      	mov	r5, r0
   b80e4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b80e6:	f7ff ff61 	bl	b7fac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b80ea:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b80ec:	68a2      	ldr	r2, [r4, #8]
   b80ee:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b80f0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b80f2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b80f4:	68e2      	ldr	r2, [r4, #12]
   b80f6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b80f8:	60e3      	str	r3, [r4, #12]
      }
   b80fa:	bd38      	pop	{r3, r4, r5, pc}

000b80fc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b80fc:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b80fe:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b8100:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b8102:	3424      	adds	r4, #36	; 0x24
   b8104:	b1b9      	cbz	r1, b8136 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b8106:	e9cd 1200 	strd	r1, r2, [sp]
   b810a:	a802      	add	r0, sp, #8
   b810c:	4669      	mov	r1, sp
   b810e:	f7ff fc2f 	bl	b7970 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8112:	2300      	movs	r3, #0
	__x.swap(*this);
   b8114:	a906      	add	r1, sp, #24
   b8116:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b8118:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b811a:	f7ff ffe1 	bl	b80e0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b811e:	4621      	mov	r1, r4
   b8120:	a806      	add	r0, sp, #24
   b8122:	f7ff ffdd 	bl	b80e0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b8126:	a806      	add	r0, sp, #24
   b8128:	f7ff f898 	bl	b725c <_ZNSt14_Function_baseD1Ev>
   b812c:	a802      	add	r0, sp, #8
   b812e:	f7ff f895 	bl	b725c <_ZNSt14_Function_baseD1Ev>
}
   b8132:	b00a      	add	sp, #40	; 0x28
   b8134:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8136:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b8138:	e7eb      	b.n	b8112 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b813a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b813a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b813e:	4604      	mov	r4, r0
   b8140:	460d      	mov	r5, r1
   b8142:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8144:	d914      	bls.n	b8170 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8146:	4290      	cmp	r0, r2
   b8148:	d213      	bcs.n	b8172 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b814a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b814e:	1a75      	subs	r5, r6, r1
   b8150:	f1a1 0708 	sub.w	r7, r1, #8
   b8154:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8156:	42b7      	cmp	r7, r6
   b8158:	d018      	beq.n	b818c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b815a:	b11c      	cbz	r4, b8164 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b815c:	4631      	mov	r1, r6
   b815e:	4620      	mov	r0, r4
   b8160:	f7ff fc33 	bl	b79ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8164:	1d30      	adds	r0, r6, #4
   b8166:	f7fc fa17 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b816a:	3e08      	subs	r6, #8
   b816c:	3c08      	subs	r4, #8
   b816e:	e7f2      	b.n	b8156 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8170:	d00c      	beq.n	b818c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8172:	42b5      	cmp	r5, r6
   b8174:	d00a      	beq.n	b818c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8176:	b11c      	cbz	r4, b8180 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8178:	4629      	mov	r1, r5
   b817a:	4620      	mov	r0, r4
   b817c:	f7ff fc25 	bl	b79ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8180:	1d28      	adds	r0, r5, #4
   b8182:	f7fc fa09 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8186:	3508      	adds	r5, #8
   b8188:	3408      	adds	r4, #8
   b818a:	e7f2      	b.n	b8172 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b818e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b818e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8190:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8192:	4605      	mov	r5, r0
        if (n > 0) {
   b8194:	dd11      	ble.n	b81ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8196:	00f0      	lsls	r0, r6, #3
   b8198:	f7fe fa22 	bl	b65e0 <malloc>
            if (!d) {
   b819c:	4604      	mov	r4, r0
   b819e:	b158      	cbz	r0, b81b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b81a0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b81a4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b81a8:	f7ff ffc7 	bl	b813a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b81ac:	6828      	ldr	r0, [r5, #0]
   b81ae:	f7fe fa1f 	bl	b65f0 <free>
        data_ = d;
   b81b2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b81b4:	60ae      	str	r6, [r5, #8]
        return true;
   b81b6:	2001      	movs	r0, #1
    }
   b81b8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b81ba:	2400      	movs	r4, #0
   b81bc:	e7f6      	b.n	b81ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b81be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b81be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b81c0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b81c2:	6845      	ldr	r5, [r0, #4]
   b81c4:	4668      	mov	r0, sp
   b81c6:	f7ff fc00 	bl	b79ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b81ca:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b81ce:	4299      	cmp	r1, r3
   b81d0:	da10      	bge.n	b81f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b81d2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b81d4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b81d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b81da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b81de:	4629      	mov	r1, r5
   b81e0:	f105 0008 	add.w	r0, r5, #8
   b81e4:	f7ff ffa9 	bl	b813a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b81e8:	b98d      	cbnz	r5, b820e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b81ea:	6863      	ldr	r3, [r4, #4]
   b81ec:	3301      	adds	r3, #1
   b81ee:	6063      	str	r3, [r4, #4]
    return true;
   b81f0:	2601      	movs	r6, #1
   b81f2:	e006      	b.n	b8202 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b81f4:	3101      	adds	r1, #1
   b81f6:	4620      	mov	r0, r4
   b81f8:	f7ff ffc9 	bl	b818e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b81fc:	4606      	mov	r6, r0
   b81fe:	2800      	cmp	r0, #0
   b8200:	d1e7      	bne.n	b81d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8202:	a801      	add	r0, sp, #4
   b8204:	f7fc f9c8 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8208:	4630      	mov	r0, r6
   b820a:	b002      	add	sp, #8
   b820c:	bd70      	pop	{r4, r5, r6, pc}
   b820e:	4669      	mov	r1, sp
   b8210:	4628      	mov	r0, r5
   b8212:	f7ff fbda 	bl	b79ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8216:	e7e8      	b.n	b81ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8218 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8218:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b821a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b821c:	4604      	mov	r4, r0
   b821e:	460d      	mov	r5, r1
   b8220:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8222:	d914      	bls.n	b824e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8224:	4290      	cmp	r0, r2
   b8226:	d213      	bcs.n	b8250 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8228:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b822c:	1a75      	subs	r5, r6, r1
   b822e:	f1a1 0708 	sub.w	r7, r1, #8
   b8232:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8234:	42b7      	cmp	r7, r6
   b8236:	d018      	beq.n	b826a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8238:	b11c      	cbz	r4, b8242 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b823a:	4631      	mov	r1, r6
   b823c:	4620      	mov	r0, r4
   b823e:	f7ff fbb6 	bl	b79ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8242:	1d30      	adds	r0, r6, #4
   b8244:	f7fc f9a8 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8248:	3e08      	subs	r6, #8
   b824a:	3c08      	subs	r4, #8
   b824c:	e7f2      	b.n	b8234 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b824e:	d00c      	beq.n	b826a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8250:	42b5      	cmp	r5, r6
   b8252:	d00a      	beq.n	b826a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8254:	b11c      	cbz	r4, b825e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8256:	4629      	mov	r1, r5
   b8258:	4620      	mov	r0, r4
   b825a:	f7ff fba8 	bl	b79ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b825e:	1d28      	adds	r0, r5, #4
   b8260:	f7fc f99a 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8264:	3508      	adds	r5, #8
   b8266:	3408      	adds	r4, #8
   b8268:	e7f2      	b.n	b8250 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b826a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b826c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b826c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b826e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8270:	4605      	mov	r5, r0
        if (n > 0) {
   b8272:	dd11      	ble.n	b8298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8274:	00f0      	lsls	r0, r6, #3
   b8276:	f7fe f9b3 	bl	b65e0 <malloc>
            if (!d) {
   b827a:	4604      	mov	r4, r0
   b827c:	b158      	cbz	r0, b8296 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b827e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8282:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8286:	f7ff ffc7 	bl	b8218 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b828a:	6828      	ldr	r0, [r5, #0]
   b828c:	f7fe f9b0 	bl	b65f0 <free>
        data_ = d;
   b8290:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8292:	60ae      	str	r6, [r5, #8]
        return true;
   b8294:	2001      	movs	r0, #1
    }
   b8296:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8298:	2400      	movs	r4, #0
   b829a:	e7f6      	b.n	b828a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b829c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b829c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b829e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b82a0:	6845      	ldr	r5, [r0, #4]
   b82a2:	4668      	mov	r0, sp
   b82a4:	f7ff fb83 	bl	b79ae <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b82a8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b82ac:	4299      	cmp	r1, r3
   b82ae:	da10      	bge.n	b82d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b82b0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b82b2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b82b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b82b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b82bc:	4629      	mov	r1, r5
   b82be:	f105 0008 	add.w	r0, r5, #8
   b82c2:	f7ff ffa9 	bl	b8218 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b82c6:	b98d      	cbnz	r5, b82ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b82c8:	6863      	ldr	r3, [r4, #4]
   b82ca:	3301      	adds	r3, #1
   b82cc:	6063      	str	r3, [r4, #4]
    return true;
   b82ce:	2601      	movs	r6, #1
   b82d0:	e006      	b.n	b82e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b82d2:	3101      	adds	r1, #1
   b82d4:	4620      	mov	r0, r4
   b82d6:	f7ff ffc9 	bl	b826c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b82da:	4606      	mov	r6, r0
   b82dc:	2800      	cmp	r0, #0
   b82de:	d1e7      	bne.n	b82b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b82e0:	a801      	add	r0, sp, #4
   b82e2:	f7fc f959 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b82e6:	4630      	mov	r0, r6
   b82e8:	b002      	add	sp, #8
   b82ea:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b82ec:	4669      	mov	r1, sp
   b82ee:	4628      	mov	r0, r5
   b82f0:	f7ff fb5d 	bl	b79ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b82f4:	e7e8      	b.n	b82c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b82f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b82f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b82fc:	4617      	mov	r7, r2
   b82fe:	b0a1      	sub	sp, #132	; 0x84
   b8300:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8302:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8304:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8306:	f7fe ffe7 	bl	b72d8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b830a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b830c:	7923      	ldrb	r3, [r4, #4]
   b830e:	b953      	cbnz	r3, b8326 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8310:	4639      	mov	r1, r7
   b8312:	4640      	mov	r0, r8
   b8314:	f7ff fb4b 	bl	b79ae <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8318:	a80a      	add	r0, sp, #40	; 0x28
   b831a:	f7fe ffeb 	bl	b72f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b831e:	4640      	mov	r0, r8
   b8320:	b021      	add	sp, #132	; 0x84
   b8322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8326:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8328:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b832c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8330:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8332:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8336:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b833a:	9b03      	ldr	r3, [sp, #12]
   b833c:	429d      	cmp	r5, r3
   b833e:	d021      	beq.n	b8384 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8340:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8344:	4658      	mov	r0, fp
   b8346:	f109 0114 	add.w	r1, r9, #20
   b834a:	f7ff f872 	bl	b7432 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b834e:	b1b8      	cbz	r0, b8380 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8350:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8354:	4650      	mov	r0, sl
   b8356:	f7ff f86c 	bl	b7432 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b835a:	b188      	cbz	r0, b8380 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b835c:	6823      	ldr	r3, [r4, #0]
   b835e:	f8d9 2000 	ldr.w	r2, [r9]
   b8362:	4053      	eors	r3, r2
   b8364:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8368:	d10a      	bne.n	b8380 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b836a:	2220      	movs	r2, #32
   b836c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8370:	4a5e      	ldr	r2, [pc, #376]	; (b84ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8372:	9200      	str	r2, [sp, #0]
   b8374:	aa15      	add	r2, sp, #84	; 0x54
   b8376:	495e      	ldr	r1, [pc, #376]	; (b84f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8378:	2032      	movs	r0, #50	; 0x32
   b837a:	f7fe f84d 	bl	b6418 <log_message>
   b837e:	e7c7      	b.n	b8310 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8380:	3508      	adds	r5, #8
   b8382:	e7da      	b.n	b833a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8384:	4650      	mov	r0, sl
   b8386:	f7ff f825 	bl	b73d4 <_ZNK8particle7BleUuid7isValidEv>
   b838a:	b960      	cbnz	r0, b83a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b838c:	4959      	ldr	r1, [pc, #356]	; (b84f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b838e:	2201      	movs	r2, #1
   b8390:	a815      	add	r0, sp, #84	; 0x54
   b8392:	ad15      	add	r5, sp, #84	; 0x54
   b8394:	f7fe fff6 	bl	b7384 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b839a:	46d4      	mov	ip, sl
   b839c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b83a0:	682b      	ldr	r3, [r5, #0]
   b83a2:	f8cc 3000 	str.w	r3, [ip]
   b83a6:	6833      	ldr	r3, [r6, #0]
   b83a8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b83ac:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b83b0:	455d      	cmp	r5, fp
   b83b2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b83b4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b83b6:	d06e      	beq.n	b8496 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b83b8:	f855 0b08 	ldr.w	r0, [r5], #8
   b83bc:	f7ff f839 	bl	b7432 <_ZNK8particle7BleUuideqERKS0_>
   b83c0:	2800      	cmp	r0, #0
   b83c2:	d0f5      	beq.n	b83b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b83c4:	f104 0a14 	add.w	sl, r4, #20
   b83c8:	4650      	mov	r0, sl
   b83ca:	f7ff f803 	bl	b73d4 <_ZNK8particle7BleUuid7isValidEv>
   b83ce:	b988      	cbnz	r0, b83f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b83d0:	4b49      	ldr	r3, [pc, #292]	; (b84f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b83d2:	4948      	ldr	r1, [pc, #288]	; (b84f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b83d4:	881a      	ldrh	r2, [r3, #0]
   b83d6:	3201      	adds	r2, #1
   b83d8:	b292      	uxth	r2, r2
   b83da:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b83dc:	a815      	add	r0, sp, #84	; 0x54
   b83de:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b83e0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b83e2:	f7fe ffee 	bl	b73c2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b83e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b83e8:	46d4      	mov	ip, sl
   b83ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b83ee:	682b      	ldr	r3, [r5, #0]
   b83f0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b83f4:	4b41      	ldr	r3, [pc, #260]	; (b84fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b83f6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b83f8:	2228      	movs	r2, #40	; 0x28
   b83fa:	2100      	movs	r1, #0
   b83fc:	a816      	add	r0, sp, #88	; 0x58
   b83fe:	f002 f9ae 	bl	ba75e <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8402:	4651      	mov	r1, sl
   b8404:	a804      	add	r0, sp, #16
   b8406:	f7fe fff7 	bl	b73f8 <_ZN8particle7BleUuid7halUUIDEv>
   b840a:	ab04      	add	r3, sp, #16
   b840c:	aa18      	add	r2, sp, #96	; 0x60
   b840e:	f10d 0c20 	add.w	ip, sp, #32
   b8412:	6818      	ldr	r0, [r3, #0]
   b8414:	6859      	ldr	r1, [r3, #4]
   b8416:	4615      	mov	r5, r2
   b8418:	c503      	stmia	r5!, {r0, r1}
   b841a:	3308      	adds	r3, #8
   b841c:	4563      	cmp	r3, ip
   b841e:	462a      	mov	r2, r5
   b8420:	d1f7      	bne.n	b8412 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8422:	6818      	ldr	r0, [r3, #0]
   b8424:	6028      	str	r0, [r5, #0]
    return value_;
   b8426:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8428:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b842c:	f8d9 3000 	ldr.w	r3, [r9]
   b8430:	8a9b      	ldrh	r3, [r3, #20]
   b8432:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8438:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b843a:	4b31      	ldr	r3, [pc, #196]	; (b8500 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b843c:	2200      	movs	r2, #0
   b843e:	1da1      	adds	r1, r4, #6
   b8440:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8442:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8446:	f7fd fe67 	bl	b6118 <hal_ble_gatt_server_add_characteristic>
   b844a:	2800      	cmp	r0, #0
   b844c:	f47f af60 	bne.w	b8310 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8450:	2301      	movs	r3, #1
   b8452:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8454:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8456:	4639      	mov	r1, r7
        return characteristics_;
   b8458:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b845a:	a80d      	add	r0, sp, #52	; 0x34
   b845c:	f7ff faa7 	bl	b79ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8460:	4620      	mov	r0, r4
   b8462:	a90d      	add	r1, sp, #52	; 0x34
   b8464:	f7ff ff1a 	bl	b829c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8468:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b846a:	a80e      	add	r0, sp, #56	; 0x38
   b846c:	f7fc f894 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8470:	2c00      	cmp	r4, #0
   b8472:	f47f af4d 	bne.w	b8310 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8476:	2320      	movs	r3, #32
   b8478:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b847c:	4b21      	ldr	r3, [pc, #132]	; (b8504 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b847e:	9300      	str	r3, [sp, #0]
   b8480:	aa0d      	add	r2, sp, #52	; 0x34
   b8482:	4623      	mov	r3, r4
   b8484:	e777      	b.n	b8376 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8486:	4639      	mov	r1, r7
   b8488:	4640      	mov	r0, r8
   b848a:	f7ff fa90 	bl	b79ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b848e:	a80c      	add	r0, sp, #48	; 0x30
   b8490:	f7fc f882 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8494:	e740      	b.n	b8318 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8496:	a80b      	add	r0, sp, #44	; 0x2c
   b8498:	f7ff f8fa 	bl	b7690 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b849c:	4651      	mov	r1, sl
   b849e:	a815      	add	r0, sp, #84	; 0x54
   b84a0:	f7fe ffaa 	bl	b73f8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b84a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b84a6:	2300      	movs	r3, #0
   b84a8:	3214      	adds	r2, #20
   b84aa:	a915      	add	r1, sp, #84	; 0x54
   b84ac:	2001      	movs	r0, #1
   b84ae:	f7fd fe0b 	bl	b60c8 <hal_ble_gatt_server_add_service>
   b84b2:	2800      	cmp	r0, #0
   b84b4:	d1e7      	bne.n	b8486 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b84b6:	6835      	ldr	r5, [r6, #0]
   b84b8:	a90b      	add	r1, sp, #44	; 0x2c
   b84ba:	a80d      	add	r0, sp, #52	; 0x34
   b84bc:	f7ff fa85 	bl	b79ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b84c0:	4628      	mov	r0, r5
   b84c2:	a90d      	add	r1, sp, #52	; 0x34
   b84c4:	f7ff fe7b 	bl	b81be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b84c8:	4605      	mov	r5, r0
   b84ca:	a80e      	add	r0, sp, #56	; 0x38
   b84cc:	f7fc f864 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84d0:	2d00      	cmp	r5, #0
   b84d2:	d0d8      	beq.n	b8486 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b84d4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b84d6:	6853      	ldr	r3, [r2, #4]
   b84d8:	6812      	ldr	r2, [r2, #0]
   b84da:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b84de:	3b01      	subs	r3, #1
   b84e0:	a80c      	add	r0, sp, #48	; 0x30
   b84e2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b84e6:	f7fc f857 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84ea:	e76b      	b.n	b83c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b84ec:	000bd032 	.word	0x000bd032
   b84f0:	000bcf4f 	.word	0x000bcf4f
   b84f4:	000bd0f6 	.word	0x000bd0f6
   b84f8:	2003e690 	.word	0x2003e690
   b84fc:	002c0003 	.word	0x002c0003
   b8500:	000b7829 	.word	0x000b7829
   b8504:	000bd05d 	.word	0x000bd05d

000b8508 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8508:	4802      	ldr	r0, [pc, #8]	; (b8514 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b850a:	2300      	movs	r3, #0
   b850c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b850e:	f7fd be43 	b.w	b6198 <os_mutex_recursive_create>
   b8512:	bf00      	nop
   b8514:	2003e694 	.word	0x2003e694

000b8518 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b851a:	4606      	mov	r6, r0
   b851c:	460d      	mov	r5, r1
  size_t n = 0;
   b851e:	188f      	adds	r7, r1, r2
   b8520:	2400      	movs	r4, #0
  while (size--) {
   b8522:	42bd      	cmp	r5, r7
   b8524:	d00c      	beq.n	b8540 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8526:	6833      	ldr	r3, [r6, #0]
   b8528:	f815 1b01 	ldrb.w	r1, [r5], #1
   b852c:	689b      	ldr	r3, [r3, #8]
   b852e:	4630      	mov	r0, r6
   b8530:	4798      	blx	r3
     if (chunk>=0)
   b8532:	1e03      	subs	r3, r0, #0
   b8534:	db01      	blt.n	b853a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8536:	441c      	add	r4, r3
  while (size--) {
   b8538:	e7f3      	b.n	b8522 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b853a:	2c00      	cmp	r4, #0
   b853c:	bf08      	it	eq
   b853e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8540:	4620      	mov	r0, r4
   b8542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8544 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8544:	b513      	push	{r0, r1, r4, lr}
   b8546:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8548:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b854a:	b159      	cbz	r1, b8564 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b854c:	9101      	str	r1, [sp, #4]
   b854e:	f002 f97c 	bl	ba84a <strlen>
   b8552:	6823      	ldr	r3, [r4, #0]
   b8554:	9901      	ldr	r1, [sp, #4]
   b8556:	68db      	ldr	r3, [r3, #12]
   b8558:	4602      	mov	r2, r0
   b855a:	4620      	mov	r0, r4
    }
   b855c:	b002      	add	sp, #8
   b855e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8562:	4718      	bx	r3
    }
   b8564:	b002      	add	sp, #8
   b8566:	bd10      	pop	{r4, pc}

000b8568 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8568:	6803      	ldr	r3, [r0, #0]
   b856a:	689b      	ldr	r3, [r3, #8]
   b856c:	4718      	bx	r3

000b856e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b856e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8570:	210d      	movs	r1, #13
{
   b8572:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8574:	f7ff fff8 	bl	b8568 <_ZN5Print5printEc>
  n += print('\n');
   b8578:	210a      	movs	r1, #10
  size_t n = print('\r');
   b857a:	4604      	mov	r4, r0
  n += print('\n');
   b857c:	4628      	mov	r0, r5
   b857e:	f7ff fff3 	bl	b8568 <_ZN5Print5printEc>
  return n;
}
   b8582:	4420      	add	r0, r4
   b8584:	bd38      	pop	{r3, r4, r5, pc}

000b8586 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8586:	b538      	push	{r3, r4, r5, lr}
   b8588:	4605      	mov	r5, r0
  return write(str);
   b858a:	f7ff ffdb 	bl	b8544 <_ZN5Print5writeEPKc>
   b858e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8590:	4628      	mov	r0, r5
   b8592:	f7ff ffec 	bl	b856e <_ZN5Print7printlnEv>
  return n;
}
   b8596:	4420      	add	r0, r4
   b8598:	bd38      	pop	{r3, r4, r5, pc}

000b859a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b859a:	b530      	push	{r4, r5, lr}
   b859c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b859e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b85a0:	2a01      	cmp	r2, #1
  *str = '\0';
   b85a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b85a6:	bf98      	it	ls
   b85a8:	220a      	movls	r2, #10
   b85aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b85ac:	460d      	mov	r5, r1
   b85ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b85b2:	fb01 5312 	mls	r3, r1, r2, r5
   b85b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b85ba:	2b09      	cmp	r3, #9
   b85bc:	bf94      	ite	ls
   b85be:	3330      	addls	r3, #48	; 0x30
   b85c0:	3337      	addhi	r3, #55	; 0x37
   b85c2:	b2db      	uxtb	r3, r3
  } while(n);
   b85c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b85c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b85ca:	d9ef      	bls.n	b85ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b85cc:	4621      	mov	r1, r4
   b85ce:	f7ff ffb9 	bl	b8544 <_ZN5Print5writeEPKc>
}
   b85d2:	b00b      	add	sp, #44	; 0x2c
   b85d4:	bd30      	pop	{r4, r5, pc}

000b85d6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b85d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b85da:	b086      	sub	sp, #24
   b85dc:	af00      	add	r7, sp, #0
   b85de:	4605      	mov	r5, r0
   b85e0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b85e2:	1d38      	adds	r0, r7, #4
   b85e4:	2114      	movs	r1, #20
{
   b85e6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b85e8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b85ea:	f7fe f821 	bl	b6630 <vsnprintf>

    if (n<bufsize)
   b85ee:	2813      	cmp	r0, #19
   b85f0:	d80e      	bhi.n	b8610 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b85f2:	1d39      	adds	r1, r7, #4
   b85f4:	4628      	mov	r0, r5
   b85f6:	f7ff ffa5 	bl	b8544 <_ZN5Print5writeEPKc>
   b85fa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b85fc:	b11e      	cbz	r6, b8606 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b85fe:	4628      	mov	r0, r5
   b8600:	f7ff ffb5 	bl	b856e <_ZN5Print7printlnEv>
   b8604:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8606:	4620      	mov	r0, r4
   b8608:	3718      	adds	r7, #24
   b860a:	46bd      	mov	sp, r7
   b860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8610:	f100 0308 	add.w	r3, r0, #8
   b8614:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8618:	46e8      	mov	r8, sp
        char bigger[n+1];
   b861a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b861e:	4622      	mov	r2, r4
   b8620:	1c41      	adds	r1, r0, #1
   b8622:	683b      	ldr	r3, [r7, #0]
   b8624:	4668      	mov	r0, sp
   b8626:	f7fe f803 	bl	b6630 <vsnprintf>
  return write(str);
   b862a:	4669      	mov	r1, sp
   b862c:	4628      	mov	r0, r5
   b862e:	f7ff ff89 	bl	b8544 <_ZN5Print5writeEPKc>
   b8632:	4604      	mov	r4, r0
   b8634:	46c5      	mov	sp, r8
   b8636:	e7e1      	b.n	b85fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8638 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8638:	4b01      	ldr	r3, [pc, #4]	; (b8640 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b863a:	4a02      	ldr	r2, [pc, #8]	; (b8644 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b863c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b863e:	4770      	bx	lr
   b8640:	2003e69c 	.word	0x2003e69c
   b8644:	000bd116 	.word	0x000bd116

000b8648 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b864c:	4a15      	ldr	r2, [pc, #84]	; (b86a4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b864e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b86b0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b8652:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8656:	1980      	adds	r0, r0, r6
   b8658:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b865c:	4b12      	ldr	r3, [pc, #72]	; (b86a8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b865e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b8662:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8666:	1986      	adds	r6, r0, r6
   b8668:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b866c:	42bb      	cmp	r3, r7
   b866e:	bf08      	it	eq
   b8670:	42b2      	cmpeq	r2, r6
{
   b8672:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8674:	d013      	beq.n	b869e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8676:	a903      	add	r1, sp, #12
   b8678:	4668      	mov	r0, sp
   b867a:	e9cd 6700 	strd	r6, r7, [sp]
   b867e:	f7fe f807 	bl	b6690 <localtime_r>
	calendar_time.tm_year += 1900;
   b8682:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8684:	4d09      	ldr	r5, [pc, #36]	; (b86ac <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8686:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b868a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b868c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b868e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8696:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b869a:	6823      	ldr	r3, [r4, #0]
   b869c:	602b      	str	r3, [r5, #0]
    }
}
   b869e:	b00c      	add	sp, #48	; 0x30
   b86a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b86a4:	2003e6d0 	.word	0x2003e6d0
   b86a8:	2003e6c8 	.word	0x2003e6c8
   b86ac:	2003e6a4 	.word	0x2003e6a4
   b86b0:	2003e6d8 	.word	0x2003e6d8

000b86b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b86b4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b86b6:	2000      	movs	r0, #0
   b86b8:	f7fd ff82 	bl	b65c0 <spark_sync_time_pending>
   b86bc:	b128      	cbz	r0, b86ca <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b86be:	f7fd ff67 	bl	b6590 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b86c2:	f080 0001 	eor.w	r0, r0, #1
   b86c6:	b2c0      	uxtb	r0, r0
    }
   b86c8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b86ca:	2001      	movs	r0, #1
   b86cc:	e7fc      	b.n	b86c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b86d0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b86d0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b86d2:	f7ff ffb9 	bl	b8648 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b86d6:	4b02      	ldr	r3, [pc, #8]	; (b86e0 <_ZN9TimeClass5monthEx+0x10>)
   b86d8:	6918      	ldr	r0, [r3, #16]
}
   b86da:	3001      	adds	r0, #1
   b86dc:	bd08      	pop	{r3, pc}
   b86de:	bf00      	nop
   b86e0:	2003e6a4 	.word	0x2003e6a4

000b86e4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b86e4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b86e6:	2000      	movs	r0, #0
   b86e8:	f7fd fcb4 	bl	b6054 <hal_rtc_time_is_valid>
    if (rtcstate)
   b86ec:	4604      	mov	r4, r0
   b86ee:	b9a0      	cbnz	r0, b871a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b86f0:	f7fd fe9a 	bl	b6428 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b86f4:	2801      	cmp	r0, #1
   b86f6:	d110      	bne.n	b871a <_ZN9TimeClass7isValidEv+0x36>
   b86f8:	4620      	mov	r0, r4
   b86fa:	f7fd febd 	bl	b6478 <system_thread_get_state>
   b86fe:	b960      	cbnz	r0, b871a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8700:	f7ff ffd8 	bl	b86b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8704:	b910      	cbnz	r0, b870c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8706:	f7fd ff3b 	bl	b6580 <spark_process>
        while (_while() && !_condition()) {
   b870a:	e7f9      	b.n	b8700 <_ZN9TimeClass7isValidEv+0x1c>
   b870c:	f7ff ffd2 	bl	b86b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8714:	2000      	movs	r0, #0
   b8716:	f7fd bc9d 	b.w	b6054 <hal_rtc_time_is_valid>
}
   b871a:	4620      	mov	r0, r4
   b871c:	bd10      	pop	{r4, pc}

000b871e <_ZN9TimeClass3nowEv>:
{
   b871e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8720:	f7ff ffe0 	bl	b86e4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8724:	2210      	movs	r2, #16
   b8726:	2100      	movs	r1, #0
   b8728:	4668      	mov	r0, sp
   b872a:	f002 f818 	bl	ba75e <memset>
    hal_rtc_get_time(&tv, nullptr);
   b872e:	2100      	movs	r1, #0
   b8730:	4668      	mov	r0, sp
   b8732:	f7fd fc97 	bl	b6064 <hal_rtc_get_time>
}
   b8736:	9800      	ldr	r0, [sp, #0]
   b8738:	b005      	add	sp, #20
   b873a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8740 <_ZN9TimeClass4hourEv>:
{
   b8740:	b508      	push	{r3, lr}
	return hour(now());
   b8742:	f7ff ffec 	bl	b871e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8746:	17c1      	asrs	r1, r0, #31
   b8748:	f7ff ff7e 	bl	b8648 <_ZL22Refresh_UnixTime_Cachex>
}
   b874c:	4b01      	ldr	r3, [pc, #4]	; (b8754 <_ZN9TimeClass4hourEv+0x14>)
   b874e:	6898      	ldr	r0, [r3, #8]
   b8750:	bd08      	pop	{r3, pc}
   b8752:	bf00      	nop
   b8754:	2003e6a4 	.word	0x2003e6a4

000b8758 <_ZN9TimeClass6minuteEv>:
{
   b8758:	b508      	push	{r3, lr}
	return minute(now());
   b875a:	f7ff ffe0 	bl	b871e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b875e:	17c1      	asrs	r1, r0, #31
   b8760:	f7ff ff72 	bl	b8648 <_ZL22Refresh_UnixTime_Cachex>
}
   b8764:	4b01      	ldr	r3, [pc, #4]	; (b876c <_ZN9TimeClass6minuteEv+0x14>)
   b8766:	6858      	ldr	r0, [r3, #4]
   b8768:	bd08      	pop	{r3, pc}
   b876a:	bf00      	nop
   b876c:	2003e6a4 	.word	0x2003e6a4

000b8770 <_ZN9TimeClass3dayEv>:
{
   b8770:	b508      	push	{r3, lr}
	return day(now());
   b8772:	f7ff ffd4 	bl	b871e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8776:	17c1      	asrs	r1, r0, #31
   b8778:	f7ff ff66 	bl	b8648 <_ZL22Refresh_UnixTime_Cachex>
}
   b877c:	4b01      	ldr	r3, [pc, #4]	; (b8784 <_ZN9TimeClass3dayEv+0x14>)
   b877e:	68d8      	ldr	r0, [r3, #12]
   b8780:	bd08      	pop	{r3, pc}
   b8782:	bf00      	nop
   b8784:	2003e6a4 	.word	0x2003e6a4

000b8788 <_ZN9TimeClass5monthEv>:
{
   b8788:	b508      	push	{r3, lr}
	return month(now());
   b878a:	f7ff ffc8 	bl	b871e <_ZN9TimeClass3nowEv>
}
   b878e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b8792:	17c1      	asrs	r1, r0, #31
   b8794:	f7ff bf9c 	b.w	b86d0 <_ZN9TimeClass5monthEx>

000b8798 <_ZN9TimeClass4yearEv>:
{
   b8798:	b508      	push	{r3, lr}
	return year(now());
   b879a:	f7ff ffc0 	bl	b871e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b879e:	17c1      	asrs	r1, r0, #31
   b87a0:	f7ff ff52 	bl	b8648 <_ZL22Refresh_UnixTime_Cachex>
}
   b87a4:	4b01      	ldr	r3, [pc, #4]	; (b87ac <_ZN9TimeClass4yearEv+0x14>)
   b87a6:	6958      	ldr	r0, [r3, #20]
   b87a8:	bd08      	pop	{r3, pc}
   b87aa:	bf00      	nop
   b87ac:	2003e6a4 	.word	0x2003e6a4

000b87b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b87b0:	4b02      	ldr	r3, [pc, #8]	; (b87bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b87b2:	681a      	ldr	r2, [r3, #0]
   b87b4:	4b02      	ldr	r3, [pc, #8]	; (b87c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b87b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b87b8:	4770      	bx	lr
   b87ba:	bf00      	nop
   b87bc:	2003d150 	.word	0x2003d150
   b87c0:	2003e6a0 	.word	0x2003e6a0

000b87c4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b87c4:	b510      	push	{r4, lr}
   b87c6:	4b04      	ldr	r3, [pc, #16]	; (b87d8 <_ZN9TCPClientD1Ev+0x14>)
   b87c8:	6003      	str	r3, [r0, #0]
   b87ca:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b87cc:	6980      	ldr	r0, [r0, #24]
   b87ce:	b108      	cbz	r0, b87d4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b87d0:	f7fe fd58 	bl	b7284 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b87d4:	4620      	mov	r0, r4
   b87d6:	bd10      	pop	{r4, pc}
   b87d8:	000bd22c 	.word	0x000bd22c

000b87dc <_ZN9TCPClientD0Ev>:
   b87dc:	b510      	push	{r4, lr}
   b87de:	4604      	mov	r4, r0
   b87e0:	f7ff fff0 	bl	b87c4 <_ZN9TCPClientD1Ev>
   b87e4:	4620      	mov	r0, r4
   b87e6:	211c      	movs	r1, #28
   b87e8:	f7fb fc5b 	bl	b40a2 <_ZdlPvj>
   b87ec:	4620      	mov	r0, r4
   b87ee:	bd10      	pop	{r4, pc}

000b87f0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b87f0:	4b01      	ldr	r3, [pc, #4]	; (b87f8 <_GLOBAL__sub_I_RGB+0x8>)
   b87f2:	2200      	movs	r2, #0
   b87f4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b87f6:	4770      	bx	lr
   b87f8:	2003e6e0 	.word	0x2003e6e0

000b87fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b87fc:	4b01      	ldr	r3, [pc, #4]	; (b8804 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b87fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8800:	4770      	bx	lr
   b8802:	bf00      	nop
   b8804:	2003d154 	.word	0x2003d154

000b8808 <serialEventRun>:
{
   b8808:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b880a:	4b0b      	ldr	r3, [pc, #44]	; (b8838 <serialEventRun+0x30>)
   b880c:	b143      	cbz	r3, b8820 <serialEventRun+0x18>
   b880e:	f000 fc25 	bl	b905c <_Z16_fetch_usbserialv>
   b8812:	6803      	ldr	r3, [r0, #0]
   b8814:	691b      	ldr	r3, [r3, #16]
   b8816:	4798      	blx	r3
   b8818:	2800      	cmp	r0, #0
   b881a:	dd01      	ble.n	b8820 <serialEventRun+0x18>
        serialEvent();
   b881c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8820:	4b06      	ldr	r3, [pc, #24]	; (b883c <serialEventRun+0x34>)
   b8822:	b143      	cbz	r3, b8836 <serialEventRun+0x2e>
   b8824:	f001 f936 	bl	b9a94 <_Z22__fetch_global_Serial1v>
   b8828:	6803      	ldr	r3, [r0, #0]
   b882a:	691b      	ldr	r3, [r3, #16]
   b882c:	4798      	blx	r3
   b882e:	2800      	cmp	r0, #0
   b8830:	dd01      	ble.n	b8836 <serialEventRun+0x2e>
        serialEvent1();
   b8832:	f3af 8000 	nop.w
}
   b8836:	bd08      	pop	{r3, pc}
	...

000b8840 <_post_loop>:
{
   b8840:	b508      	push	{r3, lr}
	serialEventRun();
   b8842:	f7ff ffe1 	bl	b8808 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8846:	f7fd fbfd 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b884a:	4b01      	ldr	r3, [pc, #4]	; (b8850 <_post_loop+0x10>)
   b884c:	6018      	str	r0, [r3, #0]
}
   b884e:	bd08      	pop	{r3, pc}
   b8850:	2003e744 	.word	0x2003e744

000b8854 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8854:	4805      	ldr	r0, [pc, #20]	; (b886c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8856:	4a06      	ldr	r2, [pc, #24]	; (b8870 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8858:	4906      	ldr	r1, [pc, #24]	; (b8874 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b885a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b885c:	1a12      	subs	r2, r2, r0
   b885e:	f001 ff56 	bl	ba70e <memcpy>
    __backup_sram_signature = signature;
   b8862:	4b05      	ldr	r3, [pc, #20]	; (b8878 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8864:	4a05      	ldr	r2, [pc, #20]	; (b887c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8866:	601a      	str	r2, [r3, #0]
}
   b8868:	bd08      	pop	{r3, pc}
   b886a:	bf00      	nop
   b886c:	2003f400 	.word	0x2003f400
   b8870:	2003f404 	.word	0x2003f404
   b8874:	000bd8d4 	.word	0x000bd8d4
   b8878:	2003f400 	.word	0x2003f400
   b887c:	9a271c1e 	.word	0x9a271c1e

000b8880 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8880:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8882:	2300      	movs	r3, #0
   b8884:	9300      	str	r3, [sp, #0]
   b8886:	461a      	mov	r2, r3
   b8888:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b888c:	f7fd fe06 	bl	b649c <system_ctrl_set_result>
}
   b8890:	b003      	add	sp, #12
   b8892:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8898 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8898:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b889a:	8843      	ldrh	r3, [r0, #2]
   b889c:	2b0a      	cmp	r3, #10
   b889e:	d008      	beq.n	b88b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b88a0:	2b50      	cmp	r3, #80	; 0x50
   b88a2:	d10b      	bne.n	b88bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b88a4:	4b09      	ldr	r3, [pc, #36]	; (b88cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b88a6:	681b      	ldr	r3, [r3, #0]
   b88a8:	b14b      	cbz	r3, b88be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b88aa:	b003      	add	sp, #12
   b88ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b88b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b88b2:	f7ff ffe5 	bl	b8880 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b88b6:	b003      	add	sp, #12
   b88b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b88bc:	2300      	movs	r3, #0
   b88be:	9300      	str	r3, [sp, #0]
   b88c0:	461a      	mov	r2, r3
   b88c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b88c6:	f7fd fde9 	bl	b649c <system_ctrl_set_result>
}
   b88ca:	e7f4      	b.n	b88b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b88cc:	2003e6f4 	.word	0x2003e6f4

000b88d0 <module_user_init_hook>:
{
   b88d0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b88d2:	4812      	ldr	r0, [pc, #72]	; (b891c <module_user_init_hook+0x4c>)
   b88d4:	2100      	movs	r1, #0
   b88d6:	f7fd fed3 	bl	b6680 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b88da:	4b11      	ldr	r3, [pc, #68]	; (b8920 <module_user_init_hook+0x50>)
   b88dc:	681a      	ldr	r2, [r3, #0]
   b88de:	4b11      	ldr	r3, [pc, #68]	; (b8924 <module_user_init_hook+0x54>)
   b88e0:	429a      	cmp	r2, r3
   b88e2:	4b11      	ldr	r3, [pc, #68]	; (b8928 <module_user_init_hook+0x58>)
   b88e4:	bf0c      	ite	eq
   b88e6:	2201      	moveq	r2, #1
   b88e8:	2200      	movne	r2, #0
   b88ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b88ec:	d001      	beq.n	b88f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b88ee:	f7ff ffb1 	bl	b8854 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b88f2:	f7fd fb97 	bl	b6024 <HAL_RNG_GetRandomNumber>
   b88f6:	4604      	mov	r4, r0
    srand(seed);
   b88f8:	f001 ff3a 	bl	ba770 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b88fc:	4b0b      	ldr	r3, [pc, #44]	; (b892c <module_user_init_hook+0x5c>)
   b88fe:	b113      	cbz	r3, b8906 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8900:	4620      	mov	r0, r4
   b8902:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8906:	2100      	movs	r1, #0
   b8908:	4808      	ldr	r0, [pc, #32]	; (b892c <module_user_init_hook+0x5c>)
   b890a:	f7fd fe61 	bl	b65d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b890e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8912:	4807      	ldr	r0, [pc, #28]	; (b8930 <module_user_init_hook+0x60>)
   b8914:	2100      	movs	r1, #0
   b8916:	f7fd bdb7 	b.w	b6488 <system_ctrl_set_app_request_handler>
   b891a:	bf00      	nop
   b891c:	000b87fd 	.word	0x000b87fd
   b8920:	2003f400 	.word	0x2003f400
   b8924:	9a271c1e 	.word	0x9a271c1e
   b8928:	2003e6f0 	.word	0x2003e6f0
   b892c:	00000000 	.word	0x00000000
   b8930:	000b8899 	.word	0x000b8899

000b8934 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8934:	4770      	bx	lr

000b8936 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b8936:	2000      	movs	r0, #0
   b8938:	4770      	bx	lr

000b893a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b893a:	b510      	push	{r4, lr}
   b893c:	2110      	movs	r1, #16
   b893e:	4604      	mov	r4, r0
   b8940:	f7fb fbaf 	bl	b40a2 <_ZdlPvj>
   b8944:	4620      	mov	r0, r4
   b8946:	bd10      	pop	{r4, pc}

000b8948 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b8948:	b508      	push	{r3, lr}
      { delete this; }
   b894a:	f7ff fff6 	bl	b893a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b894e:	bd08      	pop	{r3, pc}

000b8950 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b8950:	b530      	push	{r4, r5, lr}
        type_(type) {
   b8952:	2200      	movs	r2, #0
   b8954:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b8958:	6002      	str	r2, [r0, #0]
   b895a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b895c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b895e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8960:	680c      	ldr	r4, [r1, #0]
   b8962:	8085      	strh	r5, [r0, #4]
   b8964:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8966:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b8968:	bd30      	pop	{r4, r5, pc}

000b896a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b896a:	b510      	push	{r4, lr}
   b896c:	4604      	mov	r4, r0
    free((void*)msg_);
   b896e:	6800      	ldr	r0, [r0, #0]
   b8970:	f7fd fe3e 	bl	b65f0 <free>
}
   b8974:	4620      	mov	r0, r4
   b8976:	bd10      	pop	{r4, pc}

000b8978 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8978:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b897a:	68c4      	ldr	r4, [r0, #12]
   b897c:	b1f4      	cbz	r4, b89bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b897e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b8980:	2b02      	cmp	r3, #2
   b8982:	d103      	bne.n	b898c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b8984:	f104 000c 	add.w	r0, r4, #12
   b8988:	f7ff ffef 	bl	b896a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b898c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b898e:	b135      	cbz	r5, b899e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b8990:	4628      	mov	r0, r5
   b8992:	f7fe fc63 	bl	b725c <_ZNSt14_Function_baseD1Ev>
   b8996:	2110      	movs	r1, #16
   b8998:	4628      	mov	r0, r5
   b899a:	f7fb fb82 	bl	b40a2 <_ZdlPvj>
   b899e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b89a0:	b135      	cbz	r5, b89b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b89a2:	4628      	mov	r0, r5
   b89a4:	f7fe fc5a 	bl	b725c <_ZNSt14_Function_baseD1Ev>
   b89a8:	2110      	movs	r1, #16
   b89aa:	4628      	mov	r0, r5
   b89ac:	f7fb fb79 	bl	b40a2 <_ZdlPvj>
   b89b0:	4620      	mov	r0, r4
   b89b2:	2114      	movs	r1, #20
   b89b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b89b8:	f7fb bb73 	b.w	b40a2 <_ZdlPvj>
   b89bc:	bd38      	pop	{r3, r4, r5, pc}

000b89be <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b89be:	680b      	ldr	r3, [r1, #0]
   b89c0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b89c2:	684b      	ldr	r3, [r1, #4]
   b89c4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b89c6:	b113      	cbz	r3, b89ce <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b89c8:	685a      	ldr	r2, [r3, #4]
   b89ca:	3201      	adds	r2, #1
   b89cc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b89ce:	4770      	bx	lr

000b89d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b89d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b89d2:	4604      	mov	r4, r0
   b89d4:	4668      	mov	r0, sp
   b89d6:	460d      	mov	r5, r1
   b89d8:	f7ff fff1 	bl	b89be <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b89dc:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b89de:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b89e0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b89e2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b89e4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b89e6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b89e8:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b89ea:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b89ec:	f7fb fdd4 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b89f0:	b135      	cbz	r5, b8a00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b89f2:	1d28      	adds	r0, r5, #4
   b89f4:	f7fb fdd0 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89f8:	2108      	movs	r1, #8
   b89fa:	4628      	mov	r0, r5
   b89fc:	f7fb fb51 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b8a00:	4620      	mov	r0, r4
   b8a02:	b003      	add	sp, #12
   b8a04:	bd30      	pop	{r4, r5, pc}

000b8a06 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b8a06:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8a08:	b510      	push	{r4, lr}
      if (_M_empty())
   b8a0a:	b90a      	cbnz	r2, b8a10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b8a0c:	f001 f8a4 	bl	b9b58 <_ZSt25__throw_bad_function_callv>
    }
   b8a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8a14:	68c3      	ldr	r3, [r0, #12]
   b8a16:	4718      	bx	r3

000b8a18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8a18:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8a1a:	6800      	ldr	r0, [r0, #0]
   b8a1c:	f100 0110 	add.w	r1, r0, #16
   b8a20:	f7ff fff1 	bl	b8a06 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8a24:	bd08      	pop	{r3, pc}

000b8a26 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b8a26:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8a28:	b510      	push	{r4, lr}
      if (_M_empty())
   b8a2a:	b90a      	cbnz	r2, b8a30 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8a2c:	f001 f894 	bl	b9b58 <_ZSt25__throw_bad_function_callv>
    }
   b8a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8a34:	68c3      	ldr	r3, [r0, #12]
   b8a36:	4718      	bx	r3

000b8a38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8a38:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8a3a:	6800      	ldr	r0, [r0, #0]
   b8a3c:	f100 0110 	add.w	r1, r0, #16
   b8a40:	f7ff fff1 	bl	b8a26 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8a44:	bd08      	pop	{r3, pc}
	...

000b8a48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8a48:	b538      	push	{r3, r4, r5, lr}
   b8a4a:	2300      	movs	r3, #0
   b8a4c:	4604      	mov	r4, r0
   b8a4e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8a50:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b8a52:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8a54:	f7fb fb1f 	bl	b4096 <_Znwj>
   b8a58:	b128      	cbz	r0, b8a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8a5a:	2301      	movs	r3, #1
   b8a5c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8a60:	4b02      	ldr	r3, [pc, #8]	; (b8a6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b8a62:	6003      	str	r3, [r0, #0]
   b8a64:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8a66:	6020      	str	r0, [r4, #0]
	}
   b8a68:	4620      	mov	r0, r4
   b8a6a:	bd38      	pop	{r3, r4, r5, pc}
   b8a6c:	000bd140 	.word	0x000bd140

000b8a70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8a70:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8a72:	2300      	movs	r3, #0
   b8a74:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8a76:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8a78:	4604      	mov	r4, r0
   b8a7a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8a7c:	b12b      	cbz	r3, b8a8a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8a7e:	2202      	movs	r2, #2
   b8a80:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8a82:	68eb      	ldr	r3, [r5, #12]
   b8a84:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8a86:	68ab      	ldr	r3, [r5, #8]
   b8a88:	60a3      	str	r3, [r4, #8]
    }
   b8a8a:	4620      	mov	r0, r4
   b8a8c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8a90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a92:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b8a94:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b8a96:	4668      	mov	r0, sp
   b8a98:	f7ff ff5a 	bl	b8950 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8a9c:	f04f 0302 	mov.w	r3, #2
   b8aa0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b8aa4:	2a00      	cmp	r2, #0
   b8aa6:	d103      	bne.n	b8ab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b8aa8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8aac:	2900      	cmp	r1, #0
   b8aae:	d1f7      	bne.n	b8aa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8ab0:	d125      	bne.n	b8afe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b8ab2:	f104 050c 	add.w	r5, r4, #12
   b8ab6:	4669      	mov	r1, sp
   b8ab8:	4628      	mov	r0, r5
   b8aba:	f7ff ff49 	bl	b8950 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b8abe:	f3bf 8f5b 	dmb	ish
   b8ac2:	2301      	movs	r3, #1
   b8ac4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8ac6:	2000      	movs	r0, #0
   b8ac8:	f104 0308 	add.w	r3, r4, #8
   b8acc:	f3bf 8f5b 	dmb	ish
   b8ad0:	e853 6f00 	ldrex	r6, [r3]
   b8ad4:	e843 0200 	strex	r2, r0, [r3]
   b8ad8:	2a00      	cmp	r2, #0
   b8ada:	d1f9      	bne.n	b8ad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8adc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8ae0:	b16e      	cbz	r6, b8afe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b8ae2:	f7fd fcb9 	bl	b6458 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8ae6:	b178      	cbz	r0, b8b08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8ae8:	4629      	mov	r1, r5
   b8aea:	4630      	mov	r0, r6
   b8aec:	f7ff ff8b 	bl	b8a06 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b8af0:	4630      	mov	r0, r6
   b8af2:	f7fe fbb3 	bl	b725c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8af6:	2110      	movs	r1, #16
   b8af8:	4630      	mov	r0, r6
   b8afa:	f7fb fad2 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b8afe:	4668      	mov	r0, sp
   b8b00:	f7ff ff33 	bl	b896a <_ZN8particle5ErrorD1Ev>
    }
   b8b04:	b009      	add	sp, #36	; 0x24
   b8b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8b08:	4631      	mov	r1, r6
   b8b0a:	a802      	add	r0, sp, #8
   b8b0c:	f7ff ffb0 	bl	b8a70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8b10:	68e0      	ldr	r0, [r4, #12]
   b8b12:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8b16:	b108      	cbz	r0, b8b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b8b18:	f001 fe7a 	bl	ba810 <strdup>
        type_(type) {
   b8b1c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8b1e:	2010      	movs	r0, #16
   b8b20:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8b24:	f7fb fab7 	bl	b4096 <_Znwj>
   b8b28:	4605      	mov	r5, r0
   b8b2a:	b1e8      	cbz	r0, b8b68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8b2c:	2700      	movs	r7, #0
   b8b2e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8b30:	2018      	movs	r0, #24
   b8b32:	f7fb fab0 	bl	b4096 <_Znwj>
   b8b36:	4604      	mov	r4, r0
   b8b38:	b188      	cbz	r0, b8b5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b8b3a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8b3c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8b3e:	a802      	add	r0, sp, #8
   b8b40:	f7ff fa34 	bl	b7fac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8b44:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8b46:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8b48:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8b4a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8b4c:	9204      	str	r2, [sp, #16]
   b8b4e:	a906      	add	r1, sp, #24
   b8b50:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8b52:	60e3      	str	r3, [r4, #12]
   b8b54:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8b58:	9205      	str	r2, [sp, #20]
   b8b5a:	f7ff fef9 	bl	b8950 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8b5e:	4b08      	ldr	r3, [pc, #32]	; (b8b80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8b60:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8b62:	4b08      	ldr	r3, [pc, #32]	; (b8b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8b64:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8b66:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8b68:	a806      	add	r0, sp, #24
   b8b6a:	f7ff fefe 	bl	b896a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8b6e:	a802      	add	r0, sp, #8
   b8b70:	f7fe fb74 	bl	b725c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8b74:	2200      	movs	r2, #0
   b8b76:	4629      	mov	r1, r5
   b8b78:	4803      	ldr	r0, [pc, #12]	; (b8b88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b8b7a:	f7fd fc75 	bl	b6468 <application_thread_invoke>
   b8b7e:	e7b7      	b.n	b8af0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8b80:	000b8a19 	.word	0x000b8a19
   b8b84:	000b8c9d 	.word	0x000b8c9d
   b8b88:	000b91a5 	.word	0x000b91a5

000b8b8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b90:	b08b      	sub	sp, #44	; 0x2c
   b8b92:	4605      	mov	r5, r0
   b8b94:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8b98:	460f      	mov	r7, r1
   b8b9a:	4690      	mov	r8, r2
   b8b9c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8b9e:	f7fd fcf7 	bl	b6590 <spark_cloud_flag_connected>
   b8ba2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b8ba4:	4683      	mov	fp, r0
   b8ba6:	bb38      	cbnz	r0, b8bf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8ba8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8bac:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8bae:	a905      	add	r1, sp, #20
   b8bb0:	4630      	mov	r0, r6
   b8bb2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8bb6:	f7ff fecb 	bl	b8950 <_ZN8particle5ErrorC1EOS0_>
   b8bba:	2014      	movs	r0, #20
   b8bbc:	f7fb fa6b 	bl	b4096 <_Znwj>
   b8bc0:	4604      	mov	r4, r0
   b8bc2:	b148      	cbz	r0, b8bd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b8bc4:	2302      	movs	r3, #2
   b8bc6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8bc8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8bca:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8bce:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8bd0:	4631      	mov	r1, r6
   b8bd2:	300c      	adds	r0, #12
   b8bd4:	f7ff febc 	bl	b8950 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8bd8:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8bda:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8bdc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8be0:	f7ff ff32 	bl	b8a48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8be4:	4630      	mov	r0, r6
   b8be6:	f7ff fec0 	bl	b896a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8bea:	a805      	add	r0, sp, #20
   b8bec:	f7ff febd 	bl	b896a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8bf0:	4628      	mov	r0, r5
   b8bf2:	b00b      	add	sp, #44	; 0x2c
   b8bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8bf8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8bfa:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8bfc:	2014      	movs	r0, #20
   b8bfe:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b8c02:	9307      	str	r3, [sp, #28]
   b8c04:	f7fb fa47 	bl	b4096 <_Znwj>
   b8c08:	4601      	mov	r1, r0
   b8c0a:	b118      	cbz	r0, b8c14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8c10:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8c12:	7044      	strb	r4, [r0, #1]
   b8c14:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8c16:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8c18:	f7ff ff16 	bl	b8a48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8c1c:	4b1e      	ldr	r3, [pc, #120]	; (b8c98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8c1e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8c20:	2008      	movs	r0, #8
   b8c22:	f7fb fa38 	bl	b4096 <_Znwj>
   b8c26:	4604      	mov	r4, r0
   b8c28:	b110      	cbz	r0, b8c30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b8c2a:	a903      	add	r1, sp, #12
   b8c2c:	f7ff fec7 	bl	b89be <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8c30:	9600      	str	r6, [sp, #0]
   b8c32:	fa5f f38a 	uxtb.w	r3, sl
   b8c36:	464a      	mov	r2, r9
   b8c38:	4641      	mov	r1, r8
   b8c3a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8c3c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8c3e:	f7fd fcaf 	bl	b65a0 <spark_send_event>
   b8c42:	b9b8      	cbnz	r0, b8c74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8c44:	9b03      	ldr	r3, [sp, #12]
   b8c46:	785b      	ldrb	r3, [r3, #1]
   b8c48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8c4c:	b993      	cbnz	r3, b8c74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8c4e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8c52:	a905      	add	r1, sp, #20
   b8c54:	a803      	add	r0, sp, #12
   b8c56:	9205      	str	r2, [sp, #20]
   b8c58:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8c5c:	f7ff ff18 	bl	b8a90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8c60:	a805      	add	r0, sp, #20
   b8c62:	f7ff fe82 	bl	b896a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b8c66:	a805      	add	r0, sp, #20
   b8c68:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8c6a:	f7ff feb1 	bl	b89d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8c6e:	a806      	add	r0, sp, #24
   b8c70:	f7fb fc92 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8c74:	a903      	add	r1, sp, #12
   b8c76:	a805      	add	r0, sp, #20
   b8c78:	f7ff fea1 	bl	b89be <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8c7c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8c7e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8c80:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b8c82:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8c84:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8c86:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8c88:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8c8a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8c8c:	f7fb fc84 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8c90:	a804      	add	r0, sp, #16
   b8c92:	f7fb fc81 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b8c96:	e7ab      	b.n	b8bf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8c98:	000b8d19 	.word	0x000b8d19

000b8c9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8c9c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ca0:	4605      	mov	r5, r0
	switch (__op)
   b8ca2:	d103      	bne.n	b8cac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8ca4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8ca6:	6003      	str	r3, [r0, #0]
      }
   b8ca8:	2000      	movs	r0, #0
   b8caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8cac:	2a02      	cmp	r2, #2
   b8cae:	d010      	beq.n	b8cd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8cb0:	2a03      	cmp	r2, #3
   b8cb2:	d1f9      	bne.n	b8ca8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8cb4:	6804      	ldr	r4, [r0, #0]
   b8cb6:	2c00      	cmp	r4, #0
   b8cb8:	d0f6      	beq.n	b8ca8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8cba:	f104 0010 	add.w	r0, r4, #16
   b8cbe:	f7ff fe54 	bl	b896a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8cc2:	4620      	mov	r0, r4
   b8cc4:	f7fe faca 	bl	b725c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8cc8:	2118      	movs	r1, #24
   b8cca:	4620      	mov	r0, r4
   b8ccc:	f7fb f9e9 	bl	b40a2 <_ZdlPvj>
   b8cd0:	e7ea      	b.n	b8ca8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8cd2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b8cd4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8cd6:	f7fb f9de 	bl	b4096 <_Znwj>
   b8cda:	4604      	mov	r4, r0
   b8cdc:	b150      	cbz	r0, b8cf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b8cde:	4631      	mov	r1, r6
   b8ce0:	f7ff fec6 	bl	b8a70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8ce4:	6930      	ldr	r0, [r6, #16]
   b8ce6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8cea:	b108      	cbz	r0, b8cf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8cec:	f001 fd90 	bl	ba810 <strdup>
        type_(type) {
   b8cf0:	6120      	str	r0, [r4, #16]
   b8cf2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b8cf4:	602c      	str	r4, [r5, #0]
	}
   b8cf6:	e7d7      	b.n	b8ca8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8cf8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8cf8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8cfa:	2300      	movs	r3, #0
   b8cfc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8cfe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8d00:	4604      	mov	r4, r0
   b8d02:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8d04:	b12b      	cbz	r3, b8d12 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8d06:	2202      	movs	r2, #2
   b8d08:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8d0a:	68eb      	ldr	r3, [r5, #12]
   b8d0c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8d0e:	68ab      	ldr	r3, [r5, #8]
   b8d10:	60a3      	str	r3, [r4, #8]
    }
   b8d12:	4620      	mov	r0, r4
   b8d14:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8d18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8d1a:	b089      	sub	sp, #36	; 0x24
   b8d1c:	4604      	mov	r4, r0
   b8d1e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8d20:	a801      	add	r0, sp, #4
   b8d22:	4611      	mov	r1, r2
   b8d24:	f7ff fe54 	bl	b89d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b8d28:	b1a4      	cbz	r4, b8d54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b8d2a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8d2c:	b11d      	cbz	r5, b8d36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b8d2e:	4628      	mov	r0, r5
   b8d30:	f001 fd6e 	bl	ba810 <strdup>
   b8d34:	4605      	mov	r5, r0
   b8d36:	a801      	add	r0, sp, #4
   b8d38:	a903      	add	r1, sp, #12
        type_(type) {
   b8d3a:	9503      	str	r5, [sp, #12]
   b8d3c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8d40:	f7ff fea6 	bl	b8a90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8d44:	a803      	add	r0, sp, #12
   b8d46:	f7ff fe10 	bl	b896a <_ZN8particle5ErrorD1Ev>
   b8d4a:	a802      	add	r0, sp, #8
   b8d4c:	f7fb fc24 	bl	b4598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8d50:	b009      	add	sp, #36	; 0x24
   b8d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b8d54:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8d56:	2301      	movs	r3, #1
   b8d58:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8d5c:	2a00      	cmp	r2, #0
   b8d5e:	d103      	bne.n	b8d68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8d60:	e8c5 3f41 	strexb	r1, r3, [r5]
   b8d64:	2900      	cmp	r1, #0
   b8d66:	d1f7      	bne.n	b8d58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8d68:	d1ef      	bne.n	b8d4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8d6a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8d6c:	f3bf 8f5b 	dmb	ish
   b8d70:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8d72:	1d2b      	adds	r3, r5, #4
   b8d74:	f3bf 8f5b 	dmb	ish
   b8d78:	e853 6f00 	ldrex	r6, [r3]
   b8d7c:	e843 4200 	strex	r2, r4, [r3]
   b8d80:	2a00      	cmp	r2, #0
   b8d82:	d1f9      	bne.n	b8d78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8d84:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8d88:	2e00      	cmp	r6, #0
   b8d8a:	d0de      	beq.n	b8d4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8d8c:	4620      	mov	r0, r4
   b8d8e:	f7fd fb63 	bl	b6458 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8d92:	4607      	mov	r7, r0
   b8d94:	b160      	cbz	r0, b8db0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8d96:	f105 010c 	add.w	r1, r5, #12
   b8d9a:	4630      	mov	r0, r6
   b8d9c:	f7ff fe43 	bl	b8a26 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8da0:	4630      	mov	r0, r6
   b8da2:	f7fe fa5b 	bl	b725c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8da6:	2110      	movs	r1, #16
   b8da8:	4630      	mov	r0, r6
   b8daa:	f7fb f97a 	bl	b40a2 <_ZdlPvj>
   b8dae:	e7cc      	b.n	b8d4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8db0:	4631      	mov	r1, r6
   b8db2:	a803      	add	r0, sp, #12
   b8db4:	f7ff ffa0 	bl	b8cf8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8db8:	7b2b      	ldrb	r3, [r5, #12]
   b8dba:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8dbe:	2010      	movs	r0, #16
   b8dc0:	f7fb f969 	bl	b4096 <_Znwj>
   b8dc4:	4605      	mov	r5, r0
   b8dc6:	b1d0      	cbz	r0, b8dfe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8dc8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8dca:	2014      	movs	r0, #20
   b8dcc:	f7fb f963 	bl	b4096 <_Znwj>
   b8dd0:	4604      	mov	r4, r0
   b8dd2:	b178      	cbz	r0, b8df4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b8dd4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8dd6:	4601      	mov	r1, r0
   b8dd8:	a803      	add	r0, sp, #12
   b8dda:	f7ff f8e7 	bl	b7fac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8dde:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8de0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8de2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8de4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8de6:	9205      	str	r2, [sp, #20]
   b8de8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8dea:	60e3      	str	r3, [r4, #12]
   b8dec:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8df0:	9206      	str	r2, [sp, #24]
   b8df2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8df4:	4b06      	ldr	r3, [pc, #24]	; (b8e10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b8df6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8df8:	4b06      	ldr	r3, [pc, #24]	; (b8e14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8dfa:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8dfc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b8dfe:	a803      	add	r0, sp, #12
   b8e00:	f7fe fa2c 	bl	b725c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8e04:	2200      	movs	r2, #0
   b8e06:	4629      	mov	r1, r5
   b8e08:	4803      	ldr	r0, [pc, #12]	; (b8e18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b8e0a:	f7fd fb2d 	bl	b6468 <application_thread_invoke>
   b8e0e:	e7c7      	b.n	b8da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b8e10:	000b8a39 	.word	0x000b8a39
   b8e14:	000b8e1d 	.word	0x000b8e1d
   b8e18:	000b91a5 	.word	0x000b91a5

000b8e1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8e1c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8e1e:	b570      	push	{r4, r5, r6, lr}
   b8e20:	4604      	mov	r4, r0
	switch (__op)
   b8e22:	d103      	bne.n	b8e2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8e24:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8e26:	6003      	str	r3, [r0, #0]
      }
   b8e28:	2000      	movs	r0, #0
   b8e2a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b8e2c:	2a02      	cmp	r2, #2
   b8e2e:	d00c      	beq.n	b8e4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8e30:	2a03      	cmp	r2, #3
   b8e32:	d1f9      	bne.n	b8e28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8e34:	6804      	ldr	r4, [r0, #0]
   b8e36:	2c00      	cmp	r4, #0
   b8e38:	d0f6      	beq.n	b8e28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b8e3a:	4620      	mov	r0, r4
   b8e3c:	f7fe fa0e 	bl	b725c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8e40:	2114      	movs	r1, #20
   b8e42:	4620      	mov	r0, r4
   b8e44:	f7fb f92d 	bl	b40a2 <_ZdlPvj>
   b8e48:	e7ee      	b.n	b8e28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8e4a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8e4c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8e4e:	f7fb f922 	bl	b4096 <_Znwj>
   b8e52:	4605      	mov	r5, r0
   b8e54:	b120      	cbz	r0, b8e60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b8e56:	4631      	mov	r1, r6
   b8e58:	f7ff ff4e 	bl	b8cf8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8e5c:	7c33      	ldrb	r3, [r6, #16]
   b8e5e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8e60:	6025      	str	r5, [r4, #0]
	}
   b8e62:	e7e1      	b.n	b8e28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b8e64 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b8e64:	4770      	bx	lr

000b8e66 <_ZN9IPAddressD0Ev>:
   b8e66:	b510      	push	{r4, lr}
   b8e68:	2118      	movs	r1, #24
   b8e6a:	4604      	mov	r4, r0
   b8e6c:	f7fb f919 	bl	b40a2 <_ZdlPvj>
   b8e70:	4620      	mov	r0, r4
   b8e72:	bd10      	pop	{r4, pc}

000b8e74 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8e74:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8e76:	7d03      	ldrb	r3, [r0, #20]
   b8e78:	2b06      	cmp	r3, #6
{
   b8e7a:	b08d      	sub	sp, #52	; 0x34
   b8e7c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8e7e:	f100 0704 	add.w	r7, r0, #4
   b8e82:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8e86:	d012      	beq.n	b8eae <_ZNK9IPAddress7printToER5Print+0x3a>
   b8e88:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8e8c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8e90:	220a      	movs	r2, #10
   b8e92:	4630      	mov	r0, r6
   b8e94:	f7ff fb81 	bl	b859a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8e98:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8e9a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8e9c:	d019      	beq.n	b8ed2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8e9e:	2c00      	cmp	r4, #0
   b8ea0:	d0f4      	beq.n	b8e8c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8ea2:	212e      	movs	r1, #46	; 0x2e
   b8ea4:	4630      	mov	r0, r6
   b8ea6:	f7ff fb5f 	bl	b8568 <_ZN5Print5printEc>
   b8eaa:	4404      	add	r4, r0
   b8eac:	e7ee      	b.n	b8e8c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8eae:	232f      	movs	r3, #47	; 0x2f
   b8eb0:	466a      	mov	r2, sp
   b8eb2:	4639      	mov	r1, r7
   b8eb4:	200a      	movs	r0, #10
		buf[0] = 0;
   b8eb6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8eba:	f7fd f985 	bl	b61c8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8ebe:	4668      	mov	r0, sp
   b8ec0:	f001 fcc3 	bl	ba84a <strlen>
   b8ec4:	6833      	ldr	r3, [r6, #0]
   b8ec6:	4602      	mov	r2, r0
   b8ec8:	68db      	ldr	r3, [r3, #12]
   b8eca:	4669      	mov	r1, sp
   b8ecc:	4630      	mov	r0, r6
   b8ece:	4798      	blx	r3
   b8ed0:	4604      	mov	r4, r0
    }
    return n;
}
   b8ed2:	4620      	mov	r0, r4
   b8ed4:	b00d      	add	sp, #52	; 0x34
   b8ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8ed8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8ed8:	b510      	push	{r4, lr}
   b8eda:	4b05      	ldr	r3, [pc, #20]	; (b8ef0 <_ZN9IPAddressC1Ev+0x18>)
   b8edc:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b8ede:	2211      	movs	r2, #17
   b8ee0:	f840 3b04 	str.w	r3, [r0], #4
   b8ee4:	2100      	movs	r1, #0
   b8ee6:	f001 fc3a 	bl	ba75e <memset>
}
   b8eea:	4620      	mov	r0, r4
   b8eec:	bd10      	pop	{r4, pc}
   b8eee:	bf00      	nop
   b8ef0:	000bd15c 	.word	0x000bd15c

000b8ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8ef4:	4603      	mov	r3, r0
   b8ef6:	4a07      	ldr	r2, [pc, #28]	; (b8f14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8ef8:	b510      	push	{r4, lr}
   b8efa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8efe:	f101 0210 	add.w	r2, r1, #16
   b8f02:	f851 4b04 	ldr.w	r4, [r1], #4
   b8f06:	f843 4b04 	str.w	r4, [r3], #4
   b8f0a:	4291      	cmp	r1, r2
   b8f0c:	d1f9      	bne.n	b8f02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8f0e:	780a      	ldrb	r2, [r1, #0]
   b8f10:	701a      	strb	r2, [r3, #0]
}
   b8f12:	bd10      	pop	{r4, pc}
   b8f14:	000bd15c 	.word	0x000bd15c

000b8f18 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b8f18:	4a02      	ldr	r2, [pc, #8]	; (b8f24 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b8f1a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b8f1e:	2204      	movs	r2, #4
   b8f20:	7502      	strb	r2, [r0, #20]
}
   b8f22:	4770      	bx	lr
   b8f24:	000bd15c 	.word	0x000bd15c

000b8f28 <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b8f28:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8f2a:	2b04      	cmp	r3, #4
   b8f2c:	d104      	bne.n	b8f38 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8f2e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8f30:	3800      	subs	r0, #0
   b8f32:	bf18      	it	ne
   b8f34:	2001      	movne	r0, #1
   b8f36:	4770      	bx	lr
    } else if (version() == 6) {
   b8f38:	2b06      	cmp	r3, #6
   b8f3a:	d107      	bne.n	b8f4c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8f3c:	6843      	ldr	r3, [r0, #4]
   b8f3e:	b93b      	cbnz	r3, b8f50 <_ZNK9IPAddresscvbEv+0x28>
   b8f40:	6883      	ldr	r3, [r0, #8]
   b8f42:	b92b      	cbnz	r3, b8f50 <_ZNK9IPAddresscvbEv+0x28>
   b8f44:	68c3      	ldr	r3, [r0, #12]
   b8f46:	b91b      	cbnz	r3, b8f50 <_ZNK9IPAddresscvbEv+0x28>
   b8f48:	6900      	ldr	r0, [r0, #16]
   b8f4a:	e7f1      	b.n	b8f30 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8f4c:	2000      	movs	r0, #0
   b8f4e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8f50:	2001      	movs	r0, #1
}
   b8f52:	4770      	bx	lr

000b8f54 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8f54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8f56:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8f5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8f5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8f62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8f66:	2304      	movs	r3, #4
   b8f68:	6041      	str	r1, [r0, #4]
   b8f6a:	7503      	strb	r3, [r0, #20]
}
   b8f6c:	bd10      	pop	{r4, pc}
	...

000b8f70 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b8f70:	b513      	push	{r0, r1, r4, lr}
   b8f72:	4c04      	ldr	r4, [pc, #16]	; (b8f84 <_ZN9IPAddressC1Ehhhh+0x14>)
   b8f74:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b8f76:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b8f7a:	9400      	str	r4, [sp, #0]
   b8f7c:	f7ff ffea 	bl	b8f54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8f80:	b002      	add	sp, #8
   b8f82:	bd10      	pop	{r4, pc}
   b8f84:	000bd15c 	.word	0x000bd15c

000b8f88 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8f88:	b507      	push	{r0, r1, r2, lr}
   b8f8a:	4b06      	ldr	r3, [pc, #24]	; (b8fa4 <_ZN9IPAddressC1EPKh+0x1c>)
   b8f8c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8f8e:	78cb      	ldrb	r3, [r1, #3]
   b8f90:	9300      	str	r3, [sp, #0]
   b8f92:	788b      	ldrb	r3, [r1, #2]
   b8f94:	784a      	ldrb	r2, [r1, #1]
   b8f96:	7809      	ldrb	r1, [r1, #0]
   b8f98:	f7ff ffdc 	bl	b8f54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8f9c:	b003      	add	sp, #12
   b8f9e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8fa2:	bf00      	nop
   b8fa4:	000bd15c 	.word	0x000bd15c

000b8fa8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8fa8:	7441      	strb	r1, [r0, #17]
}
   b8faa:	4770      	bx	lr

000b8fac <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8fac:	4770      	bx	lr

000b8fae <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8fae:	4770      	bx	lr

000b8fb0 <_ZN9USBSerial4readEv>:
{
   b8fb0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8fb2:	2100      	movs	r1, #0
   b8fb4:	7c00      	ldrb	r0, [r0, #16]
   b8fb6:	f7fd fa0f 	bl	b63d8 <HAL_USB_USART_Receive_Data>
}
   b8fba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8fbe:	bd08      	pop	{r3, pc}

000b8fc0 <_ZN9USBSerial4peekEv>:
{
   b8fc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8fc2:	2101      	movs	r1, #1
   b8fc4:	7c00      	ldrb	r0, [r0, #16]
   b8fc6:	f7fd fa07 	bl	b63d8 <HAL_USB_USART_Receive_Data>
}
   b8fca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8fce:	bd08      	pop	{r3, pc}

000b8fd0 <_ZN9USBSerial17availableForWriteEv>:
{
   b8fd0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8fd2:	7c00      	ldrb	r0, [r0, #16]
   b8fd4:	f7fd f9f8 	bl	b63c8 <HAL_USB_USART_Available_Data_For_Write>
}
   b8fd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8fdc:	bd08      	pop	{r3, pc}

000b8fde <_ZN9USBSerial9availableEv>:
{
   b8fde:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8fe0:	7c00      	ldrb	r0, [r0, #16]
   b8fe2:	f7fd f9e9 	bl	b63b8 <HAL_USB_USART_Available_Data>
}
   b8fe6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8fea:	bd08      	pop	{r3, pc}

000b8fec <_ZN9USBSerial5writeEh>:
{
   b8fec:	b513      	push	{r0, r1, r4, lr}
   b8fee:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8ff0:	7c00      	ldrb	r0, [r0, #16]
{
   b8ff2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8ff4:	f7fd f9e8 	bl	b63c8 <HAL_USB_USART_Available_Data_For_Write>
   b8ff8:	2800      	cmp	r0, #0
   b8ffa:	9901      	ldr	r1, [sp, #4]
   b8ffc:	dc01      	bgt.n	b9002 <_ZN9USBSerial5writeEh+0x16>
   b8ffe:	7c60      	ldrb	r0, [r4, #17]
   b9000:	b120      	cbz	r0, b900c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9002:	7c20      	ldrb	r0, [r4, #16]
   b9004:	f7fd f9f0 	bl	b63e8 <HAL_USB_USART_Send_Data>
   b9008:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b900c:	b002      	add	sp, #8
   b900e:	bd10      	pop	{r4, pc}

000b9010 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9010:	7c00      	ldrb	r0, [r0, #16]
   b9012:	f7fd b9f1 	b.w	b63f8 <HAL_USB_USART_Flush_Data>

000b9016 <_ZN9USBSerialD0Ev>:
   b9016:	b510      	push	{r4, lr}
   b9018:	2114      	movs	r1, #20
   b901a:	4604      	mov	r4, r0
   b901c:	f7fb f841 	bl	b40a2 <_ZdlPvj>
   b9020:	4620      	mov	r0, r4
   b9022:	bd10      	pop	{r4, pc}

000b9024 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9024:	b510      	push	{r4, lr}
   b9026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b902a:	4604      	mov	r4, r0
   b902c:	4608      	mov	r0, r1
   b902e:	2100      	movs	r1, #0
   b9030:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9034:	4b04      	ldr	r3, [pc, #16]	; (b9048 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9036:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9038:	2301      	movs	r3, #1
  _serial = serial;
   b903a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b903c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b903e:	4611      	mov	r1, r2
   b9040:	f7fd f9b2 	bl	b63a8 <HAL_USB_USART_Init>
}
   b9044:	4620      	mov	r0, r4
   b9046:	bd10      	pop	{r4, pc}
   b9048:	000bd170 	.word	0x000bd170

000b904c <_Z19acquireSerialBufferv>:
{
   b904c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b904e:	2214      	movs	r2, #20
{
   b9050:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9052:	2100      	movs	r1, #0
   b9054:	f001 fb83 	bl	ba75e <memset>
}
   b9058:	4620      	mov	r0, r4
   b905a:	bd10      	pop	{r4, pc}

000b905c <_Z16_fetch_usbserialv>:
{
   b905c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b905e:	4c0f      	ldr	r4, [pc, #60]	; (b909c <_Z16_fetch_usbserialv+0x40>)
{
   b9060:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9062:	a803      	add	r0, sp, #12
   b9064:	f7ff fff2 	bl	b904c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9068:	7821      	ldrb	r1, [r4, #0]
   b906a:	f3bf 8f5b 	dmb	ish
   b906e:	f011 0101 	ands.w	r1, r1, #1
   b9072:	d10f      	bne.n	b9094 <_Z16_fetch_usbserialv+0x38>
   b9074:	4620      	mov	r0, r4
   b9076:	9101      	str	r1, [sp, #4]
   b9078:	f7fb f815 	bl	b40a6 <__cxa_guard_acquire>
   b907c:	9901      	ldr	r1, [sp, #4]
   b907e:	b148      	cbz	r0, b9094 <_Z16_fetch_usbserialv+0x38>
   b9080:	aa03      	add	r2, sp, #12
   b9082:	4807      	ldr	r0, [pc, #28]	; (b90a0 <_Z16_fetch_usbserialv+0x44>)
   b9084:	f7ff ffce 	bl	b9024 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9088:	4620      	mov	r0, r4
   b908a:	f7fb f811 	bl	b40b0 <__cxa_guard_release>
   b908e:	4805      	ldr	r0, [pc, #20]	; (b90a4 <_Z16_fetch_usbserialv+0x48>)
   b9090:	f001 fb0c 	bl	ba6ac <atexit>
	return _usbserial;
}
   b9094:	4802      	ldr	r0, [pc, #8]	; (b90a0 <_Z16_fetch_usbserialv+0x44>)
   b9096:	b008      	add	sp, #32
   b9098:	bd10      	pop	{r4, pc}
   b909a:	bf00      	nop
   b909c:	2003e6f8 	.word	0x2003e6f8
   b90a0:	2003e6fc 	.word	0x2003e6fc
   b90a4:	000b8fad 	.word	0x000b8fad

000b90a8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b90a8:	4700      	bx	r0
	...

000b90ac <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b90ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b90b0:	2400      	movs	r4, #0
{
   b90b2:	461d      	mov	r5, r3
   b90b4:	460f      	mov	r7, r1
   b90b6:	4690      	mov	r8, r2
   b90b8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b90ba:	f7fc ff8b 	bl	b5fd4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b90be:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b90c0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b90c4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b90c8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b90cc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b90d0:	bfa2      	ittt	ge
   b90d2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b90d6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b90da:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b90dc:	4907      	ldr	r1, [pc, #28]	; (b90fc <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b90de:	9400      	str	r4, [sp, #0]
   b90e0:	4643      	mov	r3, r8
   b90e2:	463a      	mov	r2, r7
   b90e4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b90e6:	bfa8      	it	ge
   b90e8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b90ec:	f7fc ff6a 	bl	b5fc4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b90f0:	fab0 f080 	clz	r0, r0
   b90f4:	0940      	lsrs	r0, r0, #5
   b90f6:	b004      	add	sp, #16
   b90f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b90fc:	000b90a9 	.word	0x000b90a9

000b9100 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9100:	4770      	bx	lr

000b9102 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9102:	7441      	strb	r1, [r0, #17]
}
   b9104:	4770      	bx	lr

000b9106 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9106:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9108:	7c00      	ldrb	r0, [r0, #16]
   b910a:	f7fd f8ad 	bl	b6268 <hal_usart_available_data_for_write>
}
   b910e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9112:	bd08      	pop	{r3, pc}

000b9114 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9114:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9116:	7c00      	ldrb	r0, [r0, #16]
   b9118:	f7fd f87e 	bl	b6218 <hal_usart_available>
}
   b911c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9120:	bd08      	pop	{r3, pc}

000b9122 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9122:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9124:	7c00      	ldrb	r0, [r0, #16]
   b9126:	f7fd f887 	bl	b6238 <hal_usart_peek>
}
   b912a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b912e:	bd08      	pop	{r3, pc}

000b9130 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9130:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9132:	7c00      	ldrb	r0, [r0, #16]
   b9134:	f7fd f878 	bl	b6228 <hal_usart_read>
}
   b9138:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b913c:	bd08      	pop	{r3, pc}

000b913e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b913e:	7c00      	ldrb	r0, [r0, #16]
   b9140:	f7fd b882 	b.w	b6248 <hal_usart_flush>

000b9144 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9144:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9146:	7c45      	ldrb	r5, [r0, #17]
{
   b9148:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b914a:	b12d      	cbz	r5, b9158 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b914c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b914e:	b003      	add	sp, #12
   b9150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9154:	f7fd b858 	b.w	b6208 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9158:	7c00      	ldrb	r0, [r0, #16]
   b915a:	9101      	str	r1, [sp, #4]
   b915c:	f7fd f884 	bl	b6268 <hal_usart_available_data_for_write>
   b9160:	2800      	cmp	r0, #0
   b9162:	9901      	ldr	r1, [sp, #4]
   b9164:	dcf2      	bgt.n	b914c <_ZN11USARTSerial5writeEh+0x8>
}
   b9166:	4628      	mov	r0, r5
   b9168:	b003      	add	sp, #12
   b916a:	bd30      	pop	{r4, r5, pc}

000b916c <_ZN11USARTSerialD0Ev>:
   b916c:	b510      	push	{r4, lr}
   b916e:	2114      	movs	r1, #20
   b9170:	4604      	mov	r4, r0
   b9172:	f7fa ff96 	bl	b40a2 <_ZdlPvj>
   b9176:	4620      	mov	r0, r4
   b9178:	bd10      	pop	{r4, pc}
	...

000b917c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b917c:	b510      	push	{r4, lr}
   b917e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9182:	4604      	mov	r4, r0
   b9184:	4608      	mov	r0, r1
   b9186:	4611      	mov	r1, r2
   b9188:	2200      	movs	r2, #0
   b918a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b918e:	4b04      	ldr	r3, [pc, #16]	; (b91a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9190:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9192:	2301      	movs	r3, #1
  _serial = serial;
   b9194:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9196:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9198:	f7fd f86e 	bl	b6278 <hal_usart_init_ex>
}
   b919c:	4620      	mov	r0, r4
   b919e:	bd10      	pop	{r4, pc}
   b91a0:	000bd1a0 	.word	0x000bd1a0

000b91a4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b91a4:	b510      	push	{r4, lr}
      if (_M_empty())
   b91a6:	6883      	ldr	r3, [r0, #8]
   b91a8:	4604      	mov	r4, r0
   b91aa:	b90b      	cbnz	r3, b91b0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b91ac:	f000 fcd4 	bl	b9b58 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b91b0:	68c3      	ldr	r3, [r0, #12]
   b91b2:	4798      	blx	r3
      if (_M_manager)
   b91b4:	68a3      	ldr	r3, [r4, #8]
   b91b6:	b11b      	cbz	r3, b91c0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b91b8:	2203      	movs	r2, #3
   b91ba:	4621      	mov	r1, r4
   b91bc:	4620      	mov	r0, r4
   b91be:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b91c0:	4620      	mov	r0, r4
   b91c2:	2110      	movs	r1, #16
}
   b91c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b91c8:	f7fa bf6b 	b.w	b40a2 <_ZdlPvj>

000b91cc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b91cc:	4770      	bx	lr

000b91ce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b91ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b91d0:	4606      	mov	r6, r0
   b91d2:	4615      	mov	r5, r2
   b91d4:	460c      	mov	r4, r1
   b91d6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b91d8:	42bc      	cmp	r4, r7
   b91da:	d006      	beq.n	b91ea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b91dc:	6833      	ldr	r3, [r6, #0]
   b91de:	f814 1b01 	ldrb.w	r1, [r4], #1
   b91e2:	689b      	ldr	r3, [r3, #8]
   b91e4:	4630      	mov	r0, r6
   b91e6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b91e8:	e7f6      	b.n	b91d8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b91ea:	4628      	mov	r0, r5
   b91ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b91ee <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b91ee:	7c00      	ldrb	r0, [r0, #16]
   b91f0:	2200      	movs	r2, #0
   b91f2:	f7fd b849 	b.w	b6288 <hal_i2c_write>

000b91f6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b91f6:	7c00      	ldrb	r0, [r0, #16]
   b91f8:	2100      	movs	r1, #0
   b91fa:	f7fd b84d 	b.w	b6298 <hal_i2c_available>

000b91fe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b91fe:	7c00      	ldrb	r0, [r0, #16]
   b9200:	2100      	movs	r1, #0
   b9202:	f7fd b851 	b.w	b62a8 <hal_i2c_read>

000b9206 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9206:	7c00      	ldrb	r0, [r0, #16]
   b9208:	2100      	movs	r1, #0
   b920a:	f7fd b855 	b.w	b62b8 <hal_i2c_peek>

000b920e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b920e:	7c00      	ldrb	r0, [r0, #16]
   b9210:	2100      	movs	r1, #0
   b9212:	f7fd b859 	b.w	b62c8 <hal_i2c_flush>

000b9216 <_ZN7TwoWireD0Ev>:
   b9216:	b510      	push	{r4, lr}
   b9218:	2114      	movs	r1, #20
   b921a:	4604      	mov	r4, r0
   b921c:	f7fa ff41 	bl	b40a2 <_ZdlPvj>
   b9220:	4620      	mov	r0, r4
   b9222:	bd10      	pop	{r4, pc}

000b9224 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9224:	b510      	push	{r4, lr}
   b9226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b922a:	4604      	mov	r4, r0
   b922c:	4608      	mov	r0, r1
   b922e:	2100      	movs	r1, #0
   b9230:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9234:	4b03      	ldr	r3, [pc, #12]	; (b9244 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9236:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9238:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b923a:	4611      	mov	r1, r2
   b923c:	f7fd f854 	bl	b62e8 <hal_i2c_init>
}
   b9240:	4620      	mov	r0, r4
   b9242:	bd10      	pop	{r4, pc}
   b9244:	000bd1d0 	.word	0x000bd1d0

000b9248 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9248:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b924a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b924c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9250:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9252:	2201      	movs	r2, #1
   b9254:	f04f 33ff 	mov.w	r3, #4294967295
   b9258:	f10d 0107 	add.w	r1, sp, #7
   b925c:	47a0      	blx	r4
}
   b925e:	b002      	add	sp, #8
   b9260:	bd10      	pop	{r4, pc}

000b9262 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9262:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9264:	6803      	ldr	r3, [r0, #0]
   b9266:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9268:	f04f 33ff 	mov.w	r3, #4294967295
   b926c:	46a4      	mov	ip, r4
}
   b926e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9272:	4760      	bx	ip

000b9274 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9274:	b513      	push	{r0, r1, r4, lr}
   b9276:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9278:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b927a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b927e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9280:	f10d 0107 	add.w	r1, sp, #7
   b9284:	2201      	movs	r2, #1
   b9286:	47a0      	blx	r4
}
   b9288:	b002      	add	sp, #8
   b928a:	bd10      	pop	{r4, pc}

000b928c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b928c:	b510      	push	{r4, lr}
   b928e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9290:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9294:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9298:	429a      	cmp	r2, r3
int TCPClient::read() {
   b929a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b929c:	d008      	beq.n	b92b0 <_ZN9TCPClient4readEv+0x24>
   b929e:	6963      	ldr	r3, [r4, #20]
   b92a0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b92a4:	1c51      	adds	r1, r2, #1
   b92a6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b92aa:	4413      	add	r3, r2
   b92ac:	7918      	ldrb	r0, [r3, #4]
}
   b92ae:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b92b0:	6803      	ldr	r3, [r0, #0]
   b92b2:	691b      	ldr	r3, [r3, #16]
   b92b4:	4798      	blx	r3
   b92b6:	2800      	cmp	r0, #0
   b92b8:	d1f1      	bne.n	b929e <_ZN9TCPClient4readEv+0x12>
   b92ba:	f04f 30ff 	mov.w	r0, #4294967295
   b92be:	e7f6      	b.n	b92ae <_ZN9TCPClient4readEv+0x22>

000b92c0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b92c0:	4770      	bx	lr

000b92c2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b92c2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b92c4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b92c6:	43c0      	mvns	r0, r0
   b92c8:	0fc0      	lsrs	r0, r0, #31
   b92ca:	4770      	bx	lr

000b92cc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b92cc:	4770      	bx	lr
	...

000b92d0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b92d0:	4b06      	ldr	r3, [pc, #24]	; (b92ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b92d2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b92d4:	b510      	push	{r4, lr}
   b92d6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b92da:	d005      	beq.n	b92e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b92dc:	4608      	mov	r0, r1
   b92de:	f000 fc3f 	bl	b9b60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b92e2:	2800      	cmp	r0, #0
   b92e4:	bf08      	it	eq
   b92e6:	2400      	moveq	r4, #0
      }
   b92e8:	4620      	mov	r0, r4
   b92ea:	bd10      	pop	{r4, pc}
   b92ec:	000bd0d8 	.word	0x000bd0d8

000b92f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b92f0:	b510      	push	{r4, lr}
   b92f2:	21ac      	movs	r1, #172	; 0xac
   b92f4:	4604      	mov	r4, r0
   b92f6:	f7fa fed4 	bl	b40a2 <_ZdlPvj>
   b92fa:	4620      	mov	r0, r4
   b92fc:	bd10      	pop	{r4, pc}

000b92fe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b92fe:	21ac      	movs	r1, #172	; 0xac
   b9300:	f7fa becf 	b.w	b40a2 <_ZdlPvj>

000b9304 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9308:	f04f 0800 	mov.w	r8, #0
   b930c:	b086      	sub	sp, #24
   b930e:	461c      	mov	r4, r3
   b9310:	f8c0 8004 	str.w	r8, [r0, #4]
   b9314:	4605      	mov	r5, r0
   b9316:	460e      	mov	r6, r1
   b9318:	4617      	mov	r7, r2
    struct timeval tv = {};
   b931a:	4641      	mov	r1, r8
   b931c:	2210      	movs	r2, #16
   b931e:	a802      	add	r0, sp, #8
   b9320:	f001 fa1d 	bl	ba75e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9324:	1c63      	adds	r3, r4, #1
   b9326:	d009      	beq.n	b933c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b932c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9330:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9334:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9338:	435c      	muls	r4, r3
   b933a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b933c:	6968      	ldr	r0, [r5, #20]
   b933e:	2310      	movs	r3, #16
   b9340:	9300      	str	r3, [sp, #0]
   b9342:	6800      	ldr	r0, [r0, #0]
   b9344:	ab02      	add	r3, sp, #8
   b9346:	f241 0205 	movw	r2, #4101	; 0x1005
   b934a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b934e:	f7fc ffdb 	bl	b6308 <sock_setsockopt>
    if (ret < 0) {
   b9352:	2800      	cmp	r0, #0
   b9354:	da07      	bge.n	b9366 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9356:	f7fd f983 	bl	b6660 <__errno>
   b935a:	6803      	ldr	r3, [r0, #0]
   b935c:	606b      	str	r3, [r5, #4]
        return 0;
   b935e:	2000      	movs	r0, #0
}
   b9360:	b006      	add	sp, #24
   b9362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9366:	6968      	ldr	r0, [r5, #20]
   b9368:	2300      	movs	r3, #0
   b936a:	6800      	ldr	r0, [r0, #0]
   b936c:	463a      	mov	r2, r7
   b936e:	4631      	mov	r1, r6
   b9370:	f7fc fff2 	bl	b6358 <sock_send>
    if (ret < 0) {
   b9374:	1e03      	subs	r3, r0, #0
   b9376:	dbee      	blt.n	b9356 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9378:	4618      	mov	r0, r3
   b937a:	e7f1      	b.n	b9360 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b937c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b937c:	b530      	push	{r4, r5, lr}
   b937e:	b087      	sub	sp, #28
   b9380:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9382:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9384:	4668      	mov	r0, sp
   b9386:	f7ff fdff 	bl	b8f88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b938a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b938c:	3404      	adds	r4, #4
   b938e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9390:	682b      	ldr	r3, [r5, #0]
   b9392:	7023      	strb	r3, [r4, #0]
    }
   b9394:	b007      	add	sp, #28
   b9396:	bd30      	pop	{r4, r5, pc}

000b9398 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9398:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b939a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b939c:	4b05      	ldr	r3, [pc, #20]	; (b93b4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b939e:	4604      	mov	r4, r0
   b93a0:	358c      	adds	r5, #140	; 0x8c
   b93a2:	f844 3b04 	str.w	r3, [r4], #4
   b93a6:	4606      	mov	r6, r0
   b93a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b93aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b93ac:	682b      	ldr	r3, [r5, #0]
   b93ae:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b93b0:	4630      	mov	r0, r6
   b93b2:	bd70      	pop	{r4, r5, r6, pc}
   b93b4:	000bd15c 	.word	0x000bd15c

000b93b8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b93b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b93bc:	4698      	mov	r8, r3
    stop();
   b93be:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b93c0:	b093      	sub	sp, #76	; 0x4c
   b93c2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b93c4:	2400      	movs	r4, #0
    stop();
   b93c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b93c8:	4606      	mov	r6, r0
   b93ca:	4617      	mov	r7, r2
    stop();
   b93cc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b93ce:	4628      	mov	r0, r5
   b93d0:	466b      	mov	r3, sp
   b93d2:	4622      	mov	r2, r4
   b93d4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b93d6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b93d8:	f7fc fde4 	bl	b5fa4 <netdb_getaddrinfo>
   b93dc:	4605      	mov	r5, r0
   b93de:	2800      	cmp	r0, #0
   b93e0:	d163      	bne.n	b94aa <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b93e2:	9b00      	ldr	r3, [sp, #0]
   b93e4:	2b00      	cmp	r3, #0
   b93e6:	d04b      	beq.n	b9480 <_ZN9TCPClient7connectEPKctm+0xc8>
   b93e8:	695b      	ldr	r3, [r3, #20]
   b93ea:	2b00      	cmp	r3, #0
   b93ec:	d048      	beq.n	b9480 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b93ee:	a806      	add	r0, sp, #24
   b93f0:	f7ff fd72 	bl	b8ed8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b93f4:	9b00      	ldr	r3, [sp, #0]
   b93f6:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   b93f8:	7863      	ldrb	r3, [r4, #1]
   b93fa:	2b02      	cmp	r3, #2
   b93fc:	d104      	bne.n	b9408 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b93fe:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   b9400:	a806      	add	r0, sp, #24
   b9402:	f7ff ffbb 	bl	b937c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        if (port) {
   b9406:	e026      	b.n	b9456 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9408:	2b0a      	cmp	r3, #10
   b940a:	d124      	bne.n	b9456 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b940c:	2211      	movs	r2, #17
   b940e:	4629      	mov	r1, r5
   b9410:	a801      	add	r0, sp, #4
   b9412:	f001 f9a4 	bl	ba75e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9416:	68a3      	ldr	r3, [r4, #8]
   b9418:	2b00      	cmp	r3, #0
   b941a:	d038      	beq.n	b948e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b941c:	f104 0308 	add.w	r3, r4, #8
   b9420:	f10d 0c04 	add.w	ip, sp, #4
   b9424:	3418      	adds	r4, #24
   b9426:	6818      	ldr	r0, [r3, #0]
   b9428:	6859      	ldr	r1, [r3, #4]
   b942a:	4662      	mov	r2, ip
   b942c:	c203      	stmia	r2!, {r0, r1}
   b942e:	3308      	adds	r3, #8
   b9430:	42a3      	cmp	r3, r4
   b9432:	4694      	mov	ip, r2
   b9434:	d1f7      	bne.n	b9426 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9436:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9438:	a901      	add	r1, sp, #4
   b943a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b943c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9440:	f7ff fd58 	bl	b8ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9444:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9448:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b944c:	ac07      	add	r4, sp, #28
   b944e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9450:	f8dc 3000 	ldr.w	r3, [ip]
   b9454:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9456:	a806      	add	r0, sp, #24
   b9458:	f7ff fd66 	bl	b8f28 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b945c:	b180      	cbz	r0, b9480 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b945e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9460:	ad07      	add	r5, sp, #28
   b9462:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9466:	4b12      	ldr	r3, [pc, #72]	; (b94b0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9468:	930c      	str	r3, [sp, #48]	; 0x30
   b946a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b946c:	ac0d      	add	r4, sp, #52	; 0x34
   b946e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9470:	682b      	ldr	r3, [r5, #0]
   b9472:	7023      	strb	r3, [r4, #0]
   b9474:	463a      	mov	r2, r7
   b9476:	4643      	mov	r3, r8
   b9478:	a90c      	add	r1, sp, #48	; 0x30
   b947a:	4630      	mov	r0, r6
   b947c:	47c8      	blx	r9
   b947e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9480:	9800      	ldr	r0, [sp, #0]
   b9482:	f7fc fd87 	bl	b5f94 <netdb_freeaddrinfo>
}
   b9486:	4628      	mov	r0, r5
   b9488:	b013      	add	sp, #76	; 0x4c
   b948a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b948e:	68e3      	ldr	r3, [r4, #12]
   b9490:	2b00      	cmp	r3, #0
   b9492:	d1c3      	bne.n	b941c <_ZN9TCPClient7connectEPKctm+0x64>
   b9494:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9498:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b949c:	f7fc fe9c 	bl	b61d8 <inet_htonl>
   b94a0:	4581      	cmp	r9, r0
   b94a2:	d1bb      	bne.n	b941c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b94a4:	f104 0114 	add.w	r1, r4, #20
   b94a8:	e7aa      	b.n	b9400 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b94aa:	4625      	mov	r5, r4
   b94ac:	e7e8      	b.n	b9480 <_ZN9TCPClient7connectEPKctm+0xc8>
   b94ae:	bf00      	nop
   b94b0:	000bd15c 	.word	0x000bd15c

000b94b4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b94b4:	b538      	push	{r3, r4, r5, lr}
   b94b6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b94b8:	681a      	ldr	r2, [r3, #0]
   b94ba:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b94bc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b94be:	da10      	bge.n	b94e2 <_ZN9TCPClient9connectedEv+0x2e>
   b94c0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b94c4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b94c8:	429a      	cmp	r2, r3
   b94ca:	d10a      	bne.n	b94e2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b94cc:	6803      	ldr	r3, [r0, #0]
   b94ce:	691b      	ldr	r3, [r3, #16]
   b94d0:	4798      	blx	r3
        if (!rv) {
   b94d2:	4604      	mov	r4, r0
   b94d4:	b928      	cbnz	r0, b94e2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b94d6:	682b      	ldr	r3, [r5, #0]
   b94d8:	4628      	mov	r0, r5
   b94da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b94dc:	4798      	blx	r3
        rv = available();
   b94de:	4620      	mov	r0, r4
}
   b94e0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b94e2:	2001      	movs	r0, #1
   b94e4:	e7fc      	b.n	b94e0 <_ZN9TCPClient9connectedEv+0x2c>

000b94e6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b94e6:	b510      	push	{r4, lr}
   b94e8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b94ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b94ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b94f2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b94f4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b94f6:	d005      	beq.n	b9504 <_ZN9TCPClient4peekEv+0x1e>
   b94f8:	6963      	ldr	r3, [r4, #20]
   b94fa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b94fe:	4413      	add	r3, r2
   b9500:	7918      	ldrb	r0, [r3, #4]
}
   b9502:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9504:	6803      	ldr	r3, [r0, #0]
   b9506:	691b      	ldr	r3, [r3, #16]
   b9508:	4798      	blx	r3
   b950a:	2800      	cmp	r0, #0
   b950c:	d1f4      	bne.n	b94f8 <_ZN9TCPClient4peekEv+0x12>
   b950e:	f04f 30ff 	mov.w	r0, #4294967295
   b9512:	e7f6      	b.n	b9502 <_ZN9TCPClient4peekEv+0x1c>

000b9514 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9516:	6943      	ldr	r3, [r0, #20]
   b9518:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b951a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b951e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9522:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9524:	4605      	mov	r5, r0
   b9526:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9528:	d016      	beq.n	b9558 <_ZN9TCPClient4readEPhj+0x44>
   b952a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b952c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9530:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9534:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9536:	42bc      	cmp	r4, r7
   b9538:	bf28      	it	cs
   b953a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b953c:	3304      	adds	r3, #4
   b953e:	4622      	mov	r2, r4
   b9540:	4419      	add	r1, r3
   b9542:	4630      	mov	r0, r6
   b9544:	f001 f8e3 	bl	ba70e <memcpy>
   b9548:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b954a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b954e:	4423      	add	r3, r4
   b9550:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9554:	4620      	mov	r0, r4
   b9556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9558:	6803      	ldr	r3, [r0, #0]
   b955a:	691b      	ldr	r3, [r3, #16]
   b955c:	4798      	blx	r3
   b955e:	2800      	cmp	r0, #0
   b9560:	d1e3      	bne.n	b952a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9562:	f04f 34ff 	mov.w	r4, #4294967295
   b9566:	e7f5      	b.n	b9554 <_ZN9TCPClient4readEPhj+0x40>

000b9568 <_ZN9TCPClient12flush_bufferEv>:
   b9568:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b956a:	2300      	movs	r3, #0
   b956c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9570:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9572:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9576:	4770      	bx	lr

000b9578 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b957c:	461f      	mov	r7, r3
    stop();
   b957e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9580:	460c      	mov	r4, r1
    stop();
   b9582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9584:	b08a      	sub	sp, #40	; 0x28
   b9586:	4605      	mov	r5, r0
   b9588:	4616      	mov	r6, r2
    stop();
   b958a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b958c:	7d23      	ldrb	r3, [r4, #20]
   b958e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9592:	2b04      	cmp	r3, #4
   b9594:	bf0c      	ite	eq
   b9596:	2002      	moveq	r0, #2
   b9598:	200a      	movne	r0, #10
   b959a:	2206      	movs	r2, #6
   b959c:	2101      	movs	r1, #1
   b959e:	f7fc feeb 	bl	b6378 <sock_socket>
   b95a2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b95a6:	696b      	ldr	r3, [r5, #20]
   b95a8:	681b      	ldr	r3, [r3, #0]
   b95aa:	2b00      	cmp	r3, #0
   b95ac:	da08      	bge.n	b95c0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b95ae:	682b      	ldr	r3, [r5, #0]
   b95b0:	4628      	mov	r0, r5
   b95b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b95b4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b95b6:	4798      	blx	r3
}
   b95b8:	4620      	mov	r0, r4
   b95ba:	b00a      	add	sp, #40	; 0x28
   b95bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b95c0:	4628      	mov	r0, r5
   b95c2:	f7ff ffd1 	bl	b9568 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b95c6:	b1b7      	cbz	r7, b95f6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b95c8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b95ca:	a903      	add	r1, sp, #12
   b95cc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b95ce:	9303      	str	r3, [sp, #12]
   b95d0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b95d4:	f7fc fd06 	bl	b5fe4 <if_index_to_name>
   b95d8:	2800      	cmp	r0, #0
   b95da:	d1e8      	bne.n	b95ae <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b95dc:	6968      	ldr	r0, [r5, #20]
   b95de:	2306      	movs	r3, #6
   b95e0:	9300      	str	r3, [sp, #0]
   b95e2:	6800      	ldr	r0, [r0, #0]
   b95e4:	ab03      	add	r3, sp, #12
   b95e6:	f241 020b 	movw	r2, #4107	; 0x100b
   b95ea:	f640 71ff 	movw	r1, #4095	; 0xfff
   b95ee:	f7fc fe8b 	bl	b6308 <sock_setsockopt>
   b95f2:	2800      	cmp	r0, #0
   b95f4:	d1db      	bne.n	b95ae <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b95f6:	221c      	movs	r2, #28
   b95f8:	2100      	movs	r1, #0
   b95fa:	a803      	add	r0, sp, #12
   b95fc:	f001 f8af 	bl	ba75e <memset>
    if (ip.version() == 4) {
   b9600:	7d23      	ldrb	r3, [r4, #20]
   b9602:	2b04      	cmp	r3, #4
   b9604:	d11d      	bne.n	b9642 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9606:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b960a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b960c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9610:	f7fc fdf2 	bl	b61f8 <inet_htons>
   b9614:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9618:	6860      	ldr	r0, [r4, #4]
   b961a:	f7fc fddd 	bl	b61d8 <inet_htonl>
   b961e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9620:	696b      	ldr	r3, [r5, #20]
   b9622:	221c      	movs	r2, #28
   b9624:	6818      	ldr	r0, [r3, #0]
   b9626:	a903      	add	r1, sp, #12
   b9628:	f7fc fe7e 	bl	b6328 <sock_connect>
   b962c:	2800      	cmp	r0, #0
   b962e:	d1be      	bne.n	b95ae <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9630:	3404      	adds	r4, #4
   b9632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9634:	696d      	ldr	r5, [r5, #20]
   b9636:	358c      	adds	r5, #140	; 0x8c
   b9638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b963a:	6823      	ldr	r3, [r4, #0]
   b963c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b963e:	2401      	movs	r4, #1
   b9640:	e7ba      	b.n	b95b8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9642:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9646:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9648:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b964c:	f7fc fdd4 	bl	b61f8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9650:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9652:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9656:	1d23      	adds	r3, r4, #4
   b9658:	f104 0714 	add.w	r7, r4, #20
   b965c:	6818      	ldr	r0, [r3, #0]
   b965e:	6859      	ldr	r1, [r3, #4]
   b9660:	4632      	mov	r2, r6
   b9662:	c203      	stmia	r2!, {r0, r1}
   b9664:	3308      	adds	r3, #8
   b9666:	42bb      	cmp	r3, r7
   b9668:	4616      	mov	r6, r2
   b966a:	d1f7      	bne.n	b965c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b966c:	e7d8      	b.n	b9620 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9670 <_ZN9TCPClient9availableEv>:
{
   b9670:	b530      	push	{r4, r5, lr}
   b9672:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9674:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9678:	b08b      	sub	sp, #44	; 0x2c
   b967a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b967c:	b12b      	cbz	r3, b968a <_ZN9TCPClient9availableEv+0x1a>
   b967e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9682:	429a      	cmp	r2, r3
   b9684:	d101      	bne.n	b968a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9686:	f7ff ff6f 	bl	b9568 <_ZN9TCPClient12flush_bufferEv>
   b968a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b968c:	6808      	ldr	r0, [r1, #0]
   b968e:	2800      	cmp	r0, #0
   b9690:	db18      	blt.n	b96c4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9692:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9696:	2d7f      	cmp	r5, #127	; 0x7f
   b9698:	d814      	bhi.n	b96c4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b969a:	3104      	adds	r1, #4
   b969c:	2308      	movs	r3, #8
   b969e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b96a2:	4429      	add	r1, r5
   b96a4:	f7fc fe48 	bl	b6338 <sock_recv>
            if (ret > 0) {
   b96a8:	2800      	cmp	r0, #0
   b96aa:	dd13      	ble.n	b96d4 <_ZN9TCPClient9availableEv+0x64>
   b96ac:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b96ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b96b2:	b90a      	cbnz	r2, b96b8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b96b4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b96b8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b96ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b96be:	4410      	add	r0, r2
   b96c0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b96c4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b96c6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b96ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b96ce:	1ac0      	subs	r0, r0, r3
   b96d0:	b00b      	add	sp, #44	; 0x2c
   b96d2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b96d4:	f7fc ffc4 	bl	b6660 <__errno>
   b96d8:	6803      	ldr	r3, [r0, #0]
   b96da:	2b0b      	cmp	r3, #11
   b96dc:	d0f2      	beq.n	b96c4 <_ZN9TCPClient9availableEv+0x54>
   b96de:	f7fc ffbf 	bl	b6660 <__errno>
   b96e2:	6803      	ldr	r3, [r0, #0]
   b96e4:	2b0b      	cmp	r3, #11
   b96e6:	d0ed      	beq.n	b96c4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b96e8:	2320      	movs	r3, #32
   b96ea:	2500      	movs	r5, #0
   b96ec:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b96f0:	f7fc ffb6 	bl	b6660 <__errno>
   b96f4:	6803      	ldr	r3, [r0, #0]
   b96f6:	9301      	str	r3, [sp, #4]
   b96f8:	4b08      	ldr	r3, [pc, #32]	; (b971c <_ZN9TCPClient9availableEv+0xac>)
   b96fa:	4909      	ldr	r1, [pc, #36]	; (b9720 <_ZN9TCPClient9availableEv+0xb0>)
   b96fc:	9300      	str	r3, [sp, #0]
   b96fe:	aa02      	add	r2, sp, #8
   b9700:	462b      	mov	r3, r5
   b9702:	2032      	movs	r0, #50	; 0x32
   b9704:	f7fc fe88 	bl	b6418 <log_message>
                    sock_close(d_->sock);
   b9708:	6963      	ldr	r3, [r4, #20]
   b970a:	6818      	ldr	r0, [r3, #0]
   b970c:	f7fc fe04 	bl	b6318 <sock_close>
   b9710:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9712:	f04f 32ff 	mov.w	r2, #4294967295
   b9716:	601a      	str	r2, [r3, #0]
   b9718:	e7d4      	b.n	b96c4 <_ZN9TCPClient9availableEv+0x54>
   b971a:	bf00      	nop
   b971c:	000bd1f7 	.word	0x000bd1f7
   b9720:	000bd1f0 	.word	0x000bd1f0

000b9724 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9724:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9726:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9728:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b972a:	6818      	ldr	r0, [r3, #0]
   b972c:	2800      	cmp	r0, #0
   b972e:	db01      	blt.n	b9734 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9730:	f7fc fdf2 	bl	b6318 <sock_close>
   b9734:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9736:	f04f 32ff 	mov.w	r2, #4294967295
   b973a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b973c:	6960      	ldr	r0, [r4, #20]
   b973e:	2211      	movs	r2, #17
   b9740:	2100      	movs	r1, #0
   b9742:	308c      	adds	r0, #140	; 0x8c
   b9744:	f001 f80b 	bl	ba75e <memset>
    flush_buffer();
   b9748:	4620      	mov	r0, r4
}
   b974a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b974e:	f7ff bf0b 	b.w	b9568 <_ZN9TCPClient12flush_bufferEv>

000b9752 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9752:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9754:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9756:	4604      	mov	r4, r0
          total(0) {
   b9758:	6001      	str	r1, [r0, #0]
   b975a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b975e:	3088      	adds	r0, #136	; 0x88
   b9760:	f7ff fbba 	bl	b8ed8 <_ZN9IPAddressC1Ev>
}
   b9764:	4620      	mov	r0, r4
   b9766:	bd10      	pop	{r4, pc}

000b9768 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9768:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b976a:	2300      	movs	r3, #0
   b976c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9770:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9774:	4a0e      	ldr	r2, [pc, #56]	; (b97b0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9776:	6103      	str	r3, [r0, #16]
   b9778:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b977a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b977c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b977e:	20ac      	movs	r0, #172	; 0xac
   b9780:	9101      	str	r1, [sp, #4]
   b9782:	f7fa fc88 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9786:	1e05      	subs	r5, r0, #0
   b9788:	f105 060c 	add.w	r6, r5, #12
   b978c:	d008      	beq.n	b97a0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b978e:	2301      	movs	r3, #1
   b9790:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9794:	4b07      	ldr	r3, [pc, #28]	; (b97b4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9796:	9901      	ldr	r1, [sp, #4]
   b9798:	602b      	str	r3, [r5, #0]
   b979a:	4630      	mov	r0, r6
   b979c:	f7ff ffd9 	bl	b9752 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b97a0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b97a2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b97a6:	f7ff fedf 	bl	b9568 <_ZN9TCPClient12flush_bufferEv>
}
   b97aa:	b002      	add	sp, #8
   b97ac:	bd70      	pop	{r4, r5, r6, pc}
   b97ae:	bf00      	nop
   b97b0:	000bd22c 	.word	0x000bd22c
   b97b4:	000bd210 	.word	0x000bd210

000b97b8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b97b8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b97ba:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b97be:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b97c0:	f7ff ffd2 	bl	b9768 <_ZN9TCPClientC1Ei>
}
   b97c4:	4620      	mov	r0, r4
   b97c6:	bd10      	pop	{r4, pc}

000b97c8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b97c8:	b510      	push	{r4, lr}
   b97ca:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b97cc:	6800      	ldr	r0, [r0, #0]
   b97ce:	2800      	cmp	r0, #0
   b97d0:	db01      	blt.n	b97d6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b97d2:	f7fc fda1 	bl	b6318 <sock_close>
    }
}
   b97d6:	4620      	mov	r0, r4
   b97d8:	bd10      	pop	{r4, pc}

000b97da <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b97da:	300c      	adds	r0, #12
   b97dc:	f7ff bff4 	b.w	b97c8 <_ZN9TCPClient4DataD1Ev>

000b97e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b97e0:	2200      	movs	r2, #0
   b97e2:	6840      	ldr	r0, [r0, #4]
   b97e4:	4611      	mov	r1, r2
   b97e6:	f7fc be7b 	b.w	b64e0 <network_ready>

000b97ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b97ea:	2200      	movs	r2, #0
   b97ec:	6840      	ldr	r0, [r0, #4]
   b97ee:	4611      	mov	r1, r2
   b97f0:	f7fc be96 	b.w	b6520 <network_listening>

000b97f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b97f4:	2200      	movs	r2, #0
   b97f6:	6840      	ldr	r0, [r0, #4]
   b97f8:	4611      	mov	r1, r2
   b97fa:	f7fc bea1 	b.w	b6540 <network_get_listen_timeout>

000b97fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b97fe:	6840      	ldr	r0, [r0, #4]
   b9800:	2200      	movs	r2, #0
   b9802:	f7fc be95 	b.w	b6530 <network_set_listen_timeout>

000b9806 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9806:	6840      	ldr	r0, [r0, #4]
   b9808:	2200      	movs	r2, #0
   b980a:	f081 0101 	eor.w	r1, r1, #1
   b980e:	f7fc be7f 	b.w	b6510 <network_listen>

000b9812 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9812:	2300      	movs	r3, #0
   b9814:	6840      	ldr	r0, [r0, #4]
   b9816:	461a      	mov	r2, r3
   b9818:	4619      	mov	r1, r3
   b981a:	f7fc be71 	b.w	b6500 <network_off>

000b981e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b981e:	2300      	movs	r3, #0
   b9820:	6840      	ldr	r0, [r0, #4]
   b9822:	461a      	mov	r2, r3
   b9824:	4619      	mov	r1, r3
   b9826:	f7fc be63 	b.w	b64f0 <network_on>

000b982a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b982a:	2200      	movs	r2, #0
   b982c:	6840      	ldr	r0, [r0, #4]
   b982e:	4611      	mov	r1, r2
   b9830:	f7fc be46 	b.w	b64c0 <network_connecting>

000b9834 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9834:	6840      	ldr	r0, [r0, #4]
   b9836:	2200      	movs	r2, #0
   b9838:	2102      	movs	r1, #2
   b983a:	f7fc be49 	b.w	b64d0 <network_disconnect>

000b983e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b983e:	2300      	movs	r3, #0
   b9840:	6840      	ldr	r0, [r0, #4]
   b9842:	461a      	mov	r2, r3
   b9844:	f7fc be34 	b.w	b64b0 <network_connect>

000b9848 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9848:	4b02      	ldr	r3, [pc, #8]	; (b9854 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b984a:	2204      	movs	r2, #4
   b984c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b984e:	4a02      	ldr	r2, [pc, #8]	; (b9858 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9850:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9852:	4770      	bx	lr
   b9854:	2003e710 	.word	0x2003e710
   b9858:	000bd278 	.word	0x000bd278

000b985c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b985c:	2300      	movs	r3, #0
   b985e:	6840      	ldr	r0, [r0, #4]
   b9860:	461a      	mov	r2, r3
   b9862:	f7fc be25 	b.w	b64b0 <network_connect>

000b9866 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9866:	6840      	ldr	r0, [r0, #4]
   b9868:	2200      	movs	r2, #0
   b986a:	2102      	movs	r1, #2
   b986c:	f7fc be30 	b.w	b64d0 <network_disconnect>

000b9870 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9870:	2200      	movs	r2, #0
   b9872:	6840      	ldr	r0, [r0, #4]
   b9874:	4611      	mov	r1, r2
   b9876:	f7fc be23 	b.w	b64c0 <network_connecting>

000b987a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b987a:	2200      	movs	r2, #0
   b987c:	6840      	ldr	r0, [r0, #4]
   b987e:	4611      	mov	r1, r2
   b9880:	f7fc be2e 	b.w	b64e0 <network_ready>

000b9884 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9884:	2300      	movs	r3, #0
   b9886:	6840      	ldr	r0, [r0, #4]
   b9888:	461a      	mov	r2, r3
   b988a:	4619      	mov	r1, r3
   b988c:	f7fc be30 	b.w	b64f0 <network_on>

000b9890 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9890:	2300      	movs	r3, #0
   b9892:	6840      	ldr	r0, [r0, #4]
   b9894:	461a      	mov	r2, r3
   b9896:	4619      	mov	r1, r3
   b9898:	f7fc be32 	b.w	b6500 <network_off>

000b989c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b989c:	6840      	ldr	r0, [r0, #4]
   b989e:	2100      	movs	r1, #0
   b98a0:	f7fc be56 	b.w	b6550 <network_is_on>

000b98a4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b98a4:	6840      	ldr	r0, [r0, #4]
   b98a6:	2100      	movs	r1, #0
   b98a8:	f7fc be5a 	b.w	b6560 <network_is_off>

000b98ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b98ac:	6840      	ldr	r0, [r0, #4]
   b98ae:	2200      	movs	r2, #0
   b98b0:	f081 0101 	eor.w	r1, r1, #1
   b98b4:	f7fc be2c 	b.w	b6510 <network_listen>

000b98b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b98b8:	6840      	ldr	r0, [r0, #4]
   b98ba:	2200      	movs	r2, #0
   b98bc:	f7fc be38 	b.w	b6530 <network_set_listen_timeout>

000b98c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b98c0:	2200      	movs	r2, #0
   b98c2:	6840      	ldr	r0, [r0, #4]
   b98c4:	4611      	mov	r1, r2
   b98c6:	f7fc be3b 	b.w	b6540 <network_get_listen_timeout>

000b98ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b98ca:	2200      	movs	r2, #0
   b98cc:	6840      	ldr	r0, [r0, #4]
   b98ce:	4611      	mov	r1, r2
   b98d0:	f7fc be26 	b.w	b6520 <network_listening>

000b98d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b98d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b98d8:	b095      	sub	sp, #84	; 0x54
   b98da:	4614      	mov	r4, r2
   b98dc:	460d      	mov	r5, r1
   b98de:	4607      	mov	r7, r0
    IPAddress addr;
   b98e0:	f7ff fafa 	bl	b8ed8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b98e4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b98e6:	221c      	movs	r2, #28
   b98e8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b98ea:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b98ec:	f000 ff37 	bl	ba75e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b98f0:	2340      	movs	r3, #64	; 0x40
   b98f2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b98f4:	4620      	mov	r0, r4
   b98f6:	466b      	mov	r3, sp
   b98f8:	aa0c      	add	r2, sp, #48	; 0x30
   b98fa:	2100      	movs	r1, #0
   b98fc:	f7fc fb52 	bl	b5fa4 <netdb_getaddrinfo>
    if (!r) {
   b9900:	4604      	mov	r4, r0
   b9902:	2800      	cmp	r0, #0
   b9904:	d14b      	bne.n	b999e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9906:	4602      	mov	r2, r0
   b9908:	2101      	movs	r1, #1
   b990a:	6868      	ldr	r0, [r5, #4]
   b990c:	f7fc fde8 	bl	b64e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9910:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9912:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9914:	4622      	mov	r2, r4
   b9916:	6868      	ldr	r0, [r5, #4]
   b9918:	f7fc fde2 	bl	b64e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b991c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b991e:	4681      	mov	r9, r0
        bool ok = false;
   b9920:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9922:	2e00      	cmp	r6, #0
   b9924:	d03b      	beq.n	b999e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9926:	2900      	cmp	r1, #0
   b9928:	d139      	bne.n	b999e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b992a:	6873      	ldr	r3, [r6, #4]
   b992c:	2b02      	cmp	r3, #2
   b992e:	d003      	beq.n	b9938 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9930:	2b0a      	cmp	r3, #10
   b9932:	d011      	beq.n	b9958 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9934:	69f6      	ldr	r6, [r6, #28]
   b9936:	e7f4      	b.n	b9922 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9938:	f1b8 0f00 	cmp.w	r8, #0
   b993c:	d0fa      	beq.n	b9934 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b993e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9940:	a806      	add	r0, sp, #24
   b9942:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9944:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9946:	f7ff fb1f 	bl	b8f88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b994a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b994c:	1d3c      	adds	r4, r7, #4
   b994e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9950:	682b      	ldr	r3, [r5, #0]
   b9952:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9954:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9956:	e7ed      	b.n	b9934 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9958:	f1b9 0f00 	cmp.w	r9, #0
   b995c:	d0ea      	beq.n	b9934 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b995e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9960:	2210      	movs	r2, #16
   b9962:	a801      	add	r0, sp, #4
   b9964:	f000 fefb 	bl	ba75e <memset>
                    a.v = 6;
   b9968:	2306      	movs	r3, #6
   b996a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b996e:	ad01      	add	r5, sp, #4
   b9970:	f104 0308 	add.w	r3, r4, #8
   b9974:	3418      	adds	r4, #24
   b9976:	6818      	ldr	r0, [r3, #0]
   b9978:	6859      	ldr	r1, [r3, #4]
   b997a:	462a      	mov	r2, r5
   b997c:	c203      	stmia	r2!, {r0, r1}
   b997e:	3308      	adds	r3, #8
   b9980:	42a3      	cmp	r3, r4
   b9982:	4615      	mov	r5, r2
   b9984:	d1f7      	bne.n	b9976 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9986:	a901      	add	r1, sp, #4
   b9988:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b998a:	ad07      	add	r5, sp, #28
   b998c:	f7ff fab2 	bl	b8ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9992:	1d3c      	adds	r4, r7, #4
   b9994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9996:	682b      	ldr	r3, [r5, #0]
   b9998:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b999a:	4649      	mov	r1, r9
   b999c:	e7ca      	b.n	b9934 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b999e:	9800      	ldr	r0, [sp, #0]
   b99a0:	f7fc faf8 	bl	b5f94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b99a4:	4638      	mov	r0, r7
   b99a6:	b015      	add	sp, #84	; 0x54
   b99a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b99ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b99ac:	4b02      	ldr	r3, [pc, #8]	; (b99b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b99ae:	4a03      	ldr	r2, [pc, #12]	; (b99bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b99b0:	601a      	str	r2, [r3, #0]
   b99b2:	2200      	movs	r2, #0
   b99b4:	605a      	str	r2, [r3, #4]

} // spark
   b99b6:	4770      	bx	lr
   b99b8:	2003e718 	.word	0x2003e718
   b99bc:	000bd2b4 	.word	0x000bd2b4

000b99c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b99c0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b99c2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b99c4:	d902      	bls.n	b99cc <pinAvailable+0xc>
    return false;
   b99c6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b99c8:	b002      	add	sp, #8
   b99ca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b99cc:	f1a0 030b 	sub.w	r3, r0, #11
   b99d0:	2b02      	cmp	r3, #2
   b99d2:	d81a      	bhi.n	b9a0a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b99d4:	4c17      	ldr	r4, [pc, #92]	; (b9a34 <pinAvailable+0x74>)
   b99d6:	7821      	ldrb	r1, [r4, #0]
   b99d8:	f3bf 8f5b 	dmb	ish
   b99dc:	f011 0101 	ands.w	r1, r1, #1
   b99e0:	d10b      	bne.n	b99fa <pinAvailable+0x3a>
   b99e2:	4620      	mov	r0, r4
   b99e4:	9101      	str	r1, [sp, #4]
   b99e6:	f7fa fb5e 	bl	b40a6 <__cxa_guard_acquire>
   b99ea:	9901      	ldr	r1, [sp, #4]
   b99ec:	b128      	cbz	r0, b99fa <pinAvailable+0x3a>
   b99ee:	4812      	ldr	r0, [pc, #72]	; (b9a38 <pinAvailable+0x78>)
   b99f0:	f7fc fe94 	bl	b671c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b99f4:	4620      	mov	r0, r4
   b99f6:	f7fa fb5b 	bl	b40b0 <__cxa_guard_release>
   b99fa:	4b0f      	ldr	r3, [pc, #60]	; (b9a38 <pinAvailable+0x78>)
   b99fc:	7818      	ldrb	r0, [r3, #0]
   b99fe:	f7fc fccb 	bl	b6398 <hal_spi_is_enabled>
   b9a02:	2800      	cmp	r0, #0
   b9a04:	d1df      	bne.n	b99c6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9a06:	2001      	movs	r0, #1
   b9a08:	e7de      	b.n	b99c8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9a0a:	2801      	cmp	r0, #1
   b9a0c:	d809      	bhi.n	b9a22 <pinAvailable+0x62>
   b9a0e:	f000 f87d 	bl	b9b0c <_Z19__fetch_global_Wirev>
   b9a12:	2100      	movs	r1, #0
   b9a14:	7c00      	ldrb	r0, [r0, #16]
   b9a16:	f7fc fc5f 	bl	b62d8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9a1a:	f080 0001 	eor.w	r0, r0, #1
   b9a1e:	b2c0      	uxtb	r0, r0
   b9a20:	e7d2      	b.n	b99c8 <pinAvailable+0x8>
   b9a22:	3809      	subs	r0, #9
   b9a24:	2801      	cmp	r0, #1
   b9a26:	d8ee      	bhi.n	b9a06 <pinAvailable+0x46>
   b9a28:	f000 f834 	bl	b9a94 <_Z22__fetch_global_Serial1v>
   b9a2c:	7c00      	ldrb	r0, [r0, #16]
   b9a2e:	f7fc fc13 	bl	b6258 <hal_usart_is_enabled>
   b9a32:	e7f2      	b.n	b9a1a <pinAvailable+0x5a>
   b9a34:	2003e720 	.word	0x2003e720
   b9a38:	2003e724 	.word	0x2003e724

000b9a3c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9a3c:	2823      	cmp	r0, #35	; 0x23
{
   b9a3e:	b538      	push	{r3, r4, r5, lr}
   b9a40:	4604      	mov	r4, r0
   b9a42:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9a44:	d80a      	bhi.n	b9a5c <pinMode+0x20>
   b9a46:	29ff      	cmp	r1, #255	; 0xff
   b9a48:	d008      	beq.n	b9a5c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9a4a:	f7ff ffb9 	bl	b99c0 <pinAvailable>
   b9a4e:	b128      	cbz	r0, b9a5c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9a50:	4629      	mov	r1, r5
   b9a52:	4620      	mov	r0, r4
}
   b9a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9a58:	f7fc baac 	b.w	b5fb4 <HAL_Pin_Mode>
}
   b9a5c:	bd38      	pop	{r3, r4, r5, pc}

000b9a5e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9a5e:	4770      	bx	lr

000b9a60 <_Z20acquireSerial1Bufferv>:
{
   b9a60:	b538      	push	{r3, r4, r5, lr}
   b9a62:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9a64:	2514      	movs	r5, #20
   b9a66:	462a      	mov	r2, r5
   b9a68:	2100      	movs	r1, #0
   b9a6a:	f000 fe78 	bl	ba75e <memset>
   b9a6e:	8025      	strh	r5, [r4, #0]
   b9a70:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a72:	4907      	ldr	r1, [pc, #28]	; (b9a90 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9a74:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a76:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9a78:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a7a:	f000 f86b 	bl	b9b54 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a7e:	4904      	ldr	r1, [pc, #16]	; (b9a90 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9a80:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a82:	4628      	mov	r0, r5
   b9a84:	f000 f866 	bl	b9b54 <_ZnajRKSt9nothrow_t>
    };
   b9a88:	60e0      	str	r0, [r4, #12]
}
   b9a8a:	4620      	mov	r0, r4
   b9a8c:	bd38      	pop	{r3, r4, r5, pc}
   b9a8e:	bf00      	nop
   b9a90:	000bd2e8 	.word	0x000bd2e8

000b9a94 <_Z22__fetch_global_Serial1v>:
{
   b9a94:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9a96:	4d0e      	ldr	r5, [pc, #56]	; (b9ad0 <_Z22__fetch_global_Serial1v+0x3c>)
   b9a98:	7829      	ldrb	r1, [r5, #0]
   b9a9a:	f3bf 8f5b 	dmb	ish
   b9a9e:	f011 0401 	ands.w	r4, r1, #1
{
   b9aa2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9aa4:	d111      	bne.n	b9aca <_Z22__fetch_global_Serial1v+0x36>
   b9aa6:	4628      	mov	r0, r5
   b9aa8:	f7fa fafd 	bl	b40a6 <__cxa_guard_acquire>
   b9aac:	b168      	cbz	r0, b9aca <_Z22__fetch_global_Serial1v+0x36>
   b9aae:	a801      	add	r0, sp, #4
   b9ab0:	f7ff ffd6 	bl	b9a60 <_Z20acquireSerial1Bufferv>
   b9ab4:	aa01      	add	r2, sp, #4
   b9ab6:	4621      	mov	r1, r4
   b9ab8:	4806      	ldr	r0, [pc, #24]	; (b9ad4 <_Z22__fetch_global_Serial1v+0x40>)
   b9aba:	f7ff fb5f 	bl	b917c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9abe:	4628      	mov	r0, r5
   b9ac0:	f7fa faf6 	bl	b40b0 <__cxa_guard_release>
   b9ac4:	4804      	ldr	r0, [pc, #16]	; (b9ad8 <_Z22__fetch_global_Serial1v+0x44>)
   b9ac6:	f000 fdf1 	bl	ba6ac <atexit>
    return serial1;
}
   b9aca:	4802      	ldr	r0, [pc, #8]	; (b9ad4 <_Z22__fetch_global_Serial1v+0x40>)
   b9acc:	b007      	add	sp, #28
   b9ace:	bd30      	pop	{r4, r5, pc}
   b9ad0:	2003e72c 	.word	0x2003e72c
   b9ad4:	2003e730 	.word	0x2003e730
   b9ad8:	000b9a5f 	.word	0x000b9a5f

000b9adc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9adc:	4770      	bx	lr
	...

000b9ae0 <_Z17acquireWireBufferv>:
{
   b9ae0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9ae2:	2520      	movs	r5, #32
   b9ae4:	2314      	movs	r3, #20
{
   b9ae6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9ae8:	6003      	str	r3, [r0, #0]
   b9aea:	6085      	str	r5, [r0, #8]
   b9aec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9aee:	4906      	ldr	r1, [pc, #24]	; (b9b08 <_Z17acquireWireBufferv+0x28>)
   b9af0:	4628      	mov	r0, r5
   b9af2:	f000 f82f 	bl	b9b54 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9af6:	4904      	ldr	r1, [pc, #16]	; (b9b08 <_Z17acquireWireBufferv+0x28>)
	};
   b9af8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9afa:	4628      	mov	r0, r5
   b9afc:	f000 f82a 	bl	b9b54 <_ZnajRKSt9nothrow_t>
	};
   b9b00:	60e0      	str	r0, [r4, #12]
}
   b9b02:	4620      	mov	r0, r4
   b9b04:	bd38      	pop	{r3, r4, r5, pc}
   b9b06:	bf00      	nop
   b9b08:	000bd2e8 	.word	0x000bd2e8

000b9b0c <_Z19__fetch_global_Wirev>:
{
   b9b0c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9b0e:	4d0e      	ldr	r5, [pc, #56]	; (b9b48 <_Z19__fetch_global_Wirev+0x3c>)
   b9b10:	7829      	ldrb	r1, [r5, #0]
   b9b12:	f3bf 8f5b 	dmb	ish
   b9b16:	f011 0401 	ands.w	r4, r1, #1
{
   b9b1a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9b1c:	d111      	bne.n	b9b42 <_Z19__fetch_global_Wirev+0x36>
   b9b1e:	4628      	mov	r0, r5
   b9b20:	f7fa fac1 	bl	b40a6 <__cxa_guard_acquire>
   b9b24:	b168      	cbz	r0, b9b42 <_Z19__fetch_global_Wirev+0x36>
   b9b26:	a801      	add	r0, sp, #4
   b9b28:	f7ff ffda 	bl	b9ae0 <_Z17acquireWireBufferv>
   b9b2c:	aa01      	add	r2, sp, #4
   b9b2e:	4621      	mov	r1, r4
   b9b30:	4806      	ldr	r0, [pc, #24]	; (b9b4c <_Z19__fetch_global_Wirev+0x40>)
   b9b32:	f7ff fb77 	bl	b9224 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9b36:	4628      	mov	r0, r5
   b9b38:	f7fa faba 	bl	b40b0 <__cxa_guard_release>
   b9b3c:	4804      	ldr	r0, [pc, #16]	; (b9b50 <_Z19__fetch_global_Wirev+0x44>)
   b9b3e:	f000 fdb5 	bl	ba6ac <atexit>
	return wire;
}
   b9b42:	4802      	ldr	r0, [pc, #8]	; (b9b4c <_Z19__fetch_global_Wirev+0x40>)
   b9b44:	b007      	add	sp, #28
   b9b46:	bd30      	pop	{r4, r5, pc}
   b9b48:	2003e748 	.word	0x2003e748
   b9b4c:	2003e74c 	.word	0x2003e74c
   b9b50:	000b9add 	.word	0x000b9add

000b9b54 <_ZnajRKSt9nothrow_t>:
   b9b54:	f7fa baa1 	b.w	b409a <_Znaj>

000b9b58 <_ZSt25__throw_bad_function_callv>:
   b9b58:	b508      	push	{r3, lr}
   b9b5a:	f7fc fd71 	bl	b6640 <abort>
	...

000b9b60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9b60:	4901      	ldr	r1, [pc, #4]	; (b9b68 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9b62:	f000 b8f9 	b.w	b9d58 <_ZNKSt9type_infoeqERKS_>
   b9b66:	bf00      	nop
   b9b68:	000bd304 	.word	0x000bd304

000b9b6c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9b6e:	2400      	movs	r4, #0
   b9b70:	2310      	movs	r3, #16
   b9b72:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9b76:	6803      	ldr	r3, [r0, #0]
   b9b78:	4615      	mov	r5, r2
   b9b7a:	699e      	ldr	r6, [r3, #24]
   b9b7c:	6812      	ldr	r2, [r2, #0]
   b9b7e:	466b      	mov	r3, sp
   b9b80:	e9cd 4400 	strd	r4, r4, [sp]
   b9b84:	47b0      	blx	r6
   b9b86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9b8a:	f003 0306 	and.w	r3, r3, #6
   b9b8e:	2b06      	cmp	r3, #6
   b9b90:	bf03      	ittte	eq
   b9b92:	9b00      	ldreq	r3, [sp, #0]
   b9b94:	602b      	streq	r3, [r5, #0]
   b9b96:	2001      	moveq	r0, #1
   b9b98:	4620      	movne	r0, r4
   b9b9a:	b004      	add	sp, #16
   b9b9c:	bd70      	pop	{r4, r5, r6, pc}

000b9b9e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9b9e:	9800      	ldr	r0, [sp, #0]
   b9ba0:	4290      	cmp	r0, r2
   b9ba2:	bf14      	ite	ne
   b9ba4:	2001      	movne	r0, #1
   b9ba6:	2006      	moveq	r0, #6
   b9ba8:	4770      	bx	lr
	...

000b9bac <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9bac:	b510      	push	{r4, lr}
   b9bae:	4b03      	ldr	r3, [pc, #12]	; (b9bbc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9bb0:	6003      	str	r3, [r0, #0]
   b9bb2:	4604      	mov	r4, r0
   b9bb4:	f000 f8cd 	bl	b9d52 <_ZNSt9type_infoD1Ev>
   b9bb8:	4620      	mov	r0, r4
   b9bba:	bd10      	pop	{r4, pc}
   b9bbc:	000bd344 	.word	0x000bd344

000b9bc0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9bc0:	b510      	push	{r4, lr}
   b9bc2:	4604      	mov	r4, r0
   b9bc4:	f7ff fff2 	bl	b9bac <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9bc8:	4620      	mov	r0, r4
   b9bca:	2108      	movs	r1, #8
   b9bcc:	f7fa fa69 	bl	b40a2 <_ZdlPvj>
   b9bd0:	4620      	mov	r0, r4
   b9bd2:	bd10      	pop	{r4, pc}

000b9bd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9bd8:	461f      	mov	r7, r3
   b9bda:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9bde:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9be2:	4598      	cmp	r8, r3
   b9be4:	4606      	mov	r6, r0
   b9be6:	4615      	mov	r5, r2
   b9be8:	d107      	bne.n	b9bfa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9bea:	9907      	ldr	r1, [sp, #28]
   b9bec:	f000 f8b4 	bl	b9d58 <_ZNKSt9type_infoeqERKS_>
   b9bf0:	b118      	cbz	r0, b9bfa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9bf2:	7165      	strb	r5, [r4, #5]
   b9bf4:	2000      	movs	r0, #0
   b9bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9bfa:	4639      	mov	r1, r7
   b9bfc:	4630      	mov	r0, r6
   b9bfe:	f000 f8ab 	bl	b9d58 <_ZNKSt9type_infoeqERKS_>
   b9c02:	2800      	cmp	r0, #0
   b9c04:	d0f6      	beq.n	b9bf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9c06:	2301      	movs	r3, #1
   b9c08:	f8c4 8000 	str.w	r8, [r4]
   b9c0c:	7125      	strb	r5, [r4, #4]
   b9c0e:	71a3      	strb	r3, [r4, #6]
   b9c10:	e7f0      	b.n	b9bf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9c12 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9c12:	b538      	push	{r3, r4, r5, lr}
   b9c14:	4615      	mov	r5, r2
   b9c16:	461c      	mov	r4, r3
   b9c18:	f000 f89e 	bl	b9d58 <_ZNKSt9type_infoeqERKS_>
   b9c1c:	b120      	cbz	r0, b9c28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9c1e:	2308      	movs	r3, #8
   b9c20:	60e3      	str	r3, [r4, #12]
   b9c22:	2306      	movs	r3, #6
   b9c24:	6025      	str	r5, [r4, #0]
   b9c26:	7123      	strb	r3, [r4, #4]
   b9c28:	bd38      	pop	{r3, r4, r5, pc}

000b9c2a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9c2c:	4605      	mov	r5, r0
   b9c2e:	460c      	mov	r4, r1
   b9c30:	9201      	str	r2, [sp, #4]
   b9c32:	461e      	mov	r6, r3
   b9c34:	f000 f890 	bl	b9d58 <_ZNKSt9type_infoeqERKS_>
   b9c38:	b950      	cbnz	r0, b9c50 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9c3a:	2e03      	cmp	r6, #3
   b9c3c:	d808      	bhi.n	b9c50 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9c3e:	6823      	ldr	r3, [r4, #0]
   b9c40:	9a01      	ldr	r2, [sp, #4]
   b9c42:	695b      	ldr	r3, [r3, #20]
   b9c44:	4629      	mov	r1, r5
   b9c46:	4620      	mov	r0, r4
   b9c48:	b002      	add	sp, #8
   b9c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9c4e:	4718      	bx	r3
   b9c50:	b002      	add	sp, #8
   b9c52:	bd70      	pop	{r4, r5, r6, pc}

000b9c54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9c54:	b510      	push	{r4, lr}
   b9c56:	4b03      	ldr	r3, [pc, #12]	; (b9c64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9c58:	6003      	str	r3, [r0, #0]
   b9c5a:	4604      	mov	r4, r0
   b9c5c:	f7ff ffa6 	bl	b9bac <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9c60:	4620      	mov	r0, r4
   b9c62:	bd10      	pop	{r4, pc}
   b9c64:	000bd3a4 	.word	0x000bd3a4

000b9c68 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9c68:	b510      	push	{r4, lr}
   b9c6a:	4604      	mov	r4, r0
   b9c6c:	f7ff fff2 	bl	b9c54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9c70:	4620      	mov	r0, r4
   b9c72:	210c      	movs	r1, #12
   b9c74:	f7fa fa15 	bl	b40a2 <_ZdlPvj>
   b9c78:	4620      	mov	r0, r4
   b9c7a:	bd10      	pop	{r4, pc}

000b9c7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9c7e:	9f08      	ldr	r7, [sp, #32]
   b9c80:	4297      	cmp	r7, r2
   b9c82:	4605      	mov	r5, r0
   b9c84:	460e      	mov	r6, r1
   b9c86:	4614      	mov	r4, r2
   b9c88:	d00a      	beq.n	b9ca0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9c8a:	68a8      	ldr	r0, [r5, #8]
   b9c8c:	6802      	ldr	r2, [r0, #0]
   b9c8e:	9708      	str	r7, [sp, #32]
   b9c90:	6a15      	ldr	r5, [r2, #32]
   b9c92:	4631      	mov	r1, r6
   b9c94:	4622      	mov	r2, r4
   b9c96:	46ac      	mov	ip, r5
   b9c98:	b003      	add	sp, #12
   b9c9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9c9e:	4760      	bx	ip
   b9ca0:	4619      	mov	r1, r3
   b9ca2:	9301      	str	r3, [sp, #4]
   b9ca4:	f000 f858 	bl	b9d58 <_ZNKSt9type_infoeqERKS_>
   b9ca8:	9b01      	ldr	r3, [sp, #4]
   b9caa:	2800      	cmp	r0, #0
   b9cac:	d0ed      	beq.n	b9c8a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9cae:	2006      	movs	r0, #6
   b9cb0:	b003      	add	sp, #12
   b9cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9cb4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9cb4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9cb8:	460d      	mov	r5, r1
   b9cba:	4619      	mov	r1, r3
   b9cbc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9cc0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9cc4:	4681      	mov	r9, r0
   b9cc6:	4617      	mov	r7, r2
   b9cc8:	4698      	mov	r8, r3
   b9cca:	f000 f845 	bl	b9d58 <_ZNKSt9type_infoeqERKS_>
   b9cce:	b190      	cbz	r0, b9cf6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9cd0:	2d00      	cmp	r5, #0
   b9cd2:	6034      	str	r4, [r6, #0]
   b9cd4:	7137      	strb	r7, [r6, #4]
   b9cd6:	db09      	blt.n	b9cec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9cd8:	1961      	adds	r1, r4, r5
   b9cda:	458a      	cmp	sl, r1
   b9cdc:	bf0c      	ite	eq
   b9cde:	2106      	moveq	r1, #6
   b9ce0:	2101      	movne	r1, #1
   b9ce2:	71b1      	strb	r1, [r6, #6]
   b9ce4:	2000      	movs	r0, #0
   b9ce6:	b001      	add	sp, #4
   b9ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9cec:	3502      	adds	r5, #2
   b9cee:	d1f9      	bne.n	b9ce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9cf0:	2301      	movs	r3, #1
   b9cf2:	71b3      	strb	r3, [r6, #6]
   b9cf4:	e7f6      	b.n	b9ce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9cf6:	4554      	cmp	r4, sl
   b9cf8:	d106      	bne.n	b9d08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9cfa:	4659      	mov	r1, fp
   b9cfc:	4648      	mov	r0, r9
   b9cfe:	f000 f82b 	bl	b9d58 <_ZNKSt9type_infoeqERKS_>
   b9d02:	b108      	cbz	r0, b9d08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9d04:	7177      	strb	r7, [r6, #5]
   b9d06:	e7ed      	b.n	b9ce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9d08:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9d0c:	6803      	ldr	r3, [r0, #0]
   b9d0e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9d12:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9d16:	69dc      	ldr	r4, [r3, #28]
   b9d18:	463a      	mov	r2, r7
   b9d1a:	4643      	mov	r3, r8
   b9d1c:	4629      	mov	r1, r5
   b9d1e:	46a4      	mov	ip, r4
   b9d20:	b001      	add	sp, #4
   b9d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d26:	4760      	bx	ip

000b9d28 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9d2c:	4607      	mov	r7, r0
   b9d2e:	460c      	mov	r4, r1
   b9d30:	4615      	mov	r5, r2
   b9d32:	461e      	mov	r6, r3
   b9d34:	f7ff ff6d 	bl	b9c12 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9d38:	b948      	cbnz	r0, b9d4e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9d3a:	68b8      	ldr	r0, [r7, #8]
   b9d3c:	6803      	ldr	r3, [r0, #0]
   b9d3e:	699f      	ldr	r7, [r3, #24]
   b9d40:	462a      	mov	r2, r5
   b9d42:	4633      	mov	r3, r6
   b9d44:	4621      	mov	r1, r4
   b9d46:	46bc      	mov	ip, r7
   b9d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9d4c:	4760      	bx	ip
   b9d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9d52 <_ZNSt9type_infoD1Ev>:
   b9d52:	4770      	bx	lr

000b9d54 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9d54:	2000      	movs	r0, #0
   b9d56:	4770      	bx	lr

000b9d58 <_ZNKSt9type_infoeqERKS_>:
   b9d58:	4281      	cmp	r1, r0
   b9d5a:	b508      	push	{r3, lr}
   b9d5c:	d00e      	beq.n	b9d7c <_ZNKSt9type_infoeqERKS_+0x24>
   b9d5e:	6840      	ldr	r0, [r0, #4]
   b9d60:	7803      	ldrb	r3, [r0, #0]
   b9d62:	2b2a      	cmp	r3, #42	; 0x2a
   b9d64:	d00c      	beq.n	b9d80 <_ZNKSt9type_infoeqERKS_+0x28>
   b9d66:	6849      	ldr	r1, [r1, #4]
   b9d68:	780b      	ldrb	r3, [r1, #0]
   b9d6a:	2b2a      	cmp	r3, #42	; 0x2a
   b9d6c:	bf08      	it	eq
   b9d6e:	3101      	addeq	r1, #1
   b9d70:	f000 fd3b 	bl	ba7ea <strcmp>
   b9d74:	fab0 f080 	clz	r0, r0
   b9d78:	0940      	lsrs	r0, r0, #5
   b9d7a:	bd08      	pop	{r3, pc}
   b9d7c:	2001      	movs	r0, #1
   b9d7e:	e7fc      	b.n	b9d7a <_ZNKSt9type_infoeqERKS_+0x22>
   b9d80:	2000      	movs	r0, #0
   b9d82:	e7fa      	b.n	b9d7a <_ZNKSt9type_infoeqERKS_+0x22>

000b9d84 <__aeabi_drsub>:
   b9d84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9d88:	e002      	b.n	b9d90 <__adddf3>
   b9d8a:	bf00      	nop

000b9d8c <__aeabi_dsub>:
   b9d8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9d90 <__adddf3>:
   b9d90:	b530      	push	{r4, r5, lr}
   b9d92:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9d96:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9d9a:	ea94 0f05 	teq	r4, r5
   b9d9e:	bf08      	it	eq
   b9da0:	ea90 0f02 	teqeq	r0, r2
   b9da4:	bf1f      	itttt	ne
   b9da6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9daa:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9dae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9db2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9db6:	f000 80e2 	beq.w	b9f7e <__adddf3+0x1ee>
   b9dba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9dbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9dc2:	bfb8      	it	lt
   b9dc4:	426d      	neglt	r5, r5
   b9dc6:	dd0c      	ble.n	b9de2 <__adddf3+0x52>
   b9dc8:	442c      	add	r4, r5
   b9dca:	ea80 0202 	eor.w	r2, r0, r2
   b9dce:	ea81 0303 	eor.w	r3, r1, r3
   b9dd2:	ea82 0000 	eor.w	r0, r2, r0
   b9dd6:	ea83 0101 	eor.w	r1, r3, r1
   b9dda:	ea80 0202 	eor.w	r2, r0, r2
   b9dde:	ea81 0303 	eor.w	r3, r1, r3
   b9de2:	2d36      	cmp	r5, #54	; 0x36
   b9de4:	bf88      	it	hi
   b9de6:	bd30      	pophi	{r4, r5, pc}
   b9de8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9dec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9df0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9df4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9df8:	d002      	beq.n	b9e00 <__adddf3+0x70>
   b9dfa:	4240      	negs	r0, r0
   b9dfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9e00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9e04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9e08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9e0c:	d002      	beq.n	b9e14 <__adddf3+0x84>
   b9e0e:	4252      	negs	r2, r2
   b9e10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9e14:	ea94 0f05 	teq	r4, r5
   b9e18:	f000 80a7 	beq.w	b9f6a <__adddf3+0x1da>
   b9e1c:	f1a4 0401 	sub.w	r4, r4, #1
   b9e20:	f1d5 0e20 	rsbs	lr, r5, #32
   b9e24:	db0d      	blt.n	b9e42 <__adddf3+0xb2>
   b9e26:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9e2a:	fa22 f205 	lsr.w	r2, r2, r5
   b9e2e:	1880      	adds	r0, r0, r2
   b9e30:	f141 0100 	adc.w	r1, r1, #0
   b9e34:	fa03 f20e 	lsl.w	r2, r3, lr
   b9e38:	1880      	adds	r0, r0, r2
   b9e3a:	fa43 f305 	asr.w	r3, r3, r5
   b9e3e:	4159      	adcs	r1, r3
   b9e40:	e00e      	b.n	b9e60 <__adddf3+0xd0>
   b9e42:	f1a5 0520 	sub.w	r5, r5, #32
   b9e46:	f10e 0e20 	add.w	lr, lr, #32
   b9e4a:	2a01      	cmp	r2, #1
   b9e4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9e50:	bf28      	it	cs
   b9e52:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9e56:	fa43 f305 	asr.w	r3, r3, r5
   b9e5a:	18c0      	adds	r0, r0, r3
   b9e5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9e60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9e64:	d507      	bpl.n	b9e76 <__adddf3+0xe6>
   b9e66:	f04f 0e00 	mov.w	lr, #0
   b9e6a:	f1dc 0c00 	rsbs	ip, ip, #0
   b9e6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9e72:	eb6e 0101 	sbc.w	r1, lr, r1
   b9e76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9e7a:	d31b      	bcc.n	b9eb4 <__adddf3+0x124>
   b9e7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9e80:	d30c      	bcc.n	b9e9c <__adddf3+0x10c>
   b9e82:	0849      	lsrs	r1, r1, #1
   b9e84:	ea5f 0030 	movs.w	r0, r0, rrx
   b9e88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9e8c:	f104 0401 	add.w	r4, r4, #1
   b9e90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9e94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9e98:	f080 809a 	bcs.w	b9fd0 <__adddf3+0x240>
   b9e9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9ea0:	bf08      	it	eq
   b9ea2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9ea6:	f150 0000 	adcs.w	r0, r0, #0
   b9eaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9eae:	ea41 0105 	orr.w	r1, r1, r5
   b9eb2:	bd30      	pop	{r4, r5, pc}
   b9eb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9eb8:	4140      	adcs	r0, r0
   b9eba:	eb41 0101 	adc.w	r1, r1, r1
   b9ebe:	3c01      	subs	r4, #1
   b9ec0:	bf28      	it	cs
   b9ec2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9ec6:	d2e9      	bcs.n	b9e9c <__adddf3+0x10c>
   b9ec8:	f091 0f00 	teq	r1, #0
   b9ecc:	bf04      	itt	eq
   b9ece:	4601      	moveq	r1, r0
   b9ed0:	2000      	moveq	r0, #0
   b9ed2:	fab1 f381 	clz	r3, r1
   b9ed6:	bf08      	it	eq
   b9ed8:	3320      	addeq	r3, #32
   b9eda:	f1a3 030b 	sub.w	r3, r3, #11
   b9ede:	f1b3 0220 	subs.w	r2, r3, #32
   b9ee2:	da0c      	bge.n	b9efe <__adddf3+0x16e>
   b9ee4:	320c      	adds	r2, #12
   b9ee6:	dd08      	ble.n	b9efa <__adddf3+0x16a>
   b9ee8:	f102 0c14 	add.w	ip, r2, #20
   b9eec:	f1c2 020c 	rsb	r2, r2, #12
   b9ef0:	fa01 f00c 	lsl.w	r0, r1, ip
   b9ef4:	fa21 f102 	lsr.w	r1, r1, r2
   b9ef8:	e00c      	b.n	b9f14 <__adddf3+0x184>
   b9efa:	f102 0214 	add.w	r2, r2, #20
   b9efe:	bfd8      	it	le
   b9f00:	f1c2 0c20 	rsble	ip, r2, #32
   b9f04:	fa01 f102 	lsl.w	r1, r1, r2
   b9f08:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9f0c:	bfdc      	itt	le
   b9f0e:	ea41 010c 	orrle.w	r1, r1, ip
   b9f12:	4090      	lslle	r0, r2
   b9f14:	1ae4      	subs	r4, r4, r3
   b9f16:	bfa2      	ittt	ge
   b9f18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9f1c:	4329      	orrge	r1, r5
   b9f1e:	bd30      	popge	{r4, r5, pc}
   b9f20:	ea6f 0404 	mvn.w	r4, r4
   b9f24:	3c1f      	subs	r4, #31
   b9f26:	da1c      	bge.n	b9f62 <__adddf3+0x1d2>
   b9f28:	340c      	adds	r4, #12
   b9f2a:	dc0e      	bgt.n	b9f4a <__adddf3+0x1ba>
   b9f2c:	f104 0414 	add.w	r4, r4, #20
   b9f30:	f1c4 0220 	rsb	r2, r4, #32
   b9f34:	fa20 f004 	lsr.w	r0, r0, r4
   b9f38:	fa01 f302 	lsl.w	r3, r1, r2
   b9f3c:	ea40 0003 	orr.w	r0, r0, r3
   b9f40:	fa21 f304 	lsr.w	r3, r1, r4
   b9f44:	ea45 0103 	orr.w	r1, r5, r3
   b9f48:	bd30      	pop	{r4, r5, pc}
   b9f4a:	f1c4 040c 	rsb	r4, r4, #12
   b9f4e:	f1c4 0220 	rsb	r2, r4, #32
   b9f52:	fa20 f002 	lsr.w	r0, r0, r2
   b9f56:	fa01 f304 	lsl.w	r3, r1, r4
   b9f5a:	ea40 0003 	orr.w	r0, r0, r3
   b9f5e:	4629      	mov	r1, r5
   b9f60:	bd30      	pop	{r4, r5, pc}
   b9f62:	fa21 f004 	lsr.w	r0, r1, r4
   b9f66:	4629      	mov	r1, r5
   b9f68:	bd30      	pop	{r4, r5, pc}
   b9f6a:	f094 0f00 	teq	r4, #0
   b9f6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9f72:	bf06      	itte	eq
   b9f74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9f78:	3401      	addeq	r4, #1
   b9f7a:	3d01      	subne	r5, #1
   b9f7c:	e74e      	b.n	b9e1c <__adddf3+0x8c>
   b9f7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9f82:	bf18      	it	ne
   b9f84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9f88:	d029      	beq.n	b9fde <__adddf3+0x24e>
   b9f8a:	ea94 0f05 	teq	r4, r5
   b9f8e:	bf08      	it	eq
   b9f90:	ea90 0f02 	teqeq	r0, r2
   b9f94:	d005      	beq.n	b9fa2 <__adddf3+0x212>
   b9f96:	ea54 0c00 	orrs.w	ip, r4, r0
   b9f9a:	bf04      	itt	eq
   b9f9c:	4619      	moveq	r1, r3
   b9f9e:	4610      	moveq	r0, r2
   b9fa0:	bd30      	pop	{r4, r5, pc}
   b9fa2:	ea91 0f03 	teq	r1, r3
   b9fa6:	bf1e      	ittt	ne
   b9fa8:	2100      	movne	r1, #0
   b9faa:	2000      	movne	r0, #0
   b9fac:	bd30      	popne	{r4, r5, pc}
   b9fae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9fb2:	d105      	bne.n	b9fc0 <__adddf3+0x230>
   b9fb4:	0040      	lsls	r0, r0, #1
   b9fb6:	4149      	adcs	r1, r1
   b9fb8:	bf28      	it	cs
   b9fba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9fbe:	bd30      	pop	{r4, r5, pc}
   b9fc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9fc4:	bf3c      	itt	cc
   b9fc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9fca:	bd30      	popcc	{r4, r5, pc}
   b9fcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9fd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9fd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9fd8:	f04f 0000 	mov.w	r0, #0
   b9fdc:	bd30      	pop	{r4, r5, pc}
   b9fde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9fe2:	bf1a      	itte	ne
   b9fe4:	4619      	movne	r1, r3
   b9fe6:	4610      	movne	r0, r2
   b9fe8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9fec:	bf1c      	itt	ne
   b9fee:	460b      	movne	r3, r1
   b9ff0:	4602      	movne	r2, r0
   b9ff2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9ff6:	bf06      	itte	eq
   b9ff8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9ffc:	ea91 0f03 	teqeq	r1, r3
   ba000:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba004:	bd30      	pop	{r4, r5, pc}
   ba006:	bf00      	nop

000ba008 <__aeabi_ui2d>:
   ba008:	f090 0f00 	teq	r0, #0
   ba00c:	bf04      	itt	eq
   ba00e:	2100      	moveq	r1, #0
   ba010:	4770      	bxeq	lr
   ba012:	b530      	push	{r4, r5, lr}
   ba014:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba018:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba01c:	f04f 0500 	mov.w	r5, #0
   ba020:	f04f 0100 	mov.w	r1, #0
   ba024:	e750      	b.n	b9ec8 <__adddf3+0x138>
   ba026:	bf00      	nop

000ba028 <__aeabi_i2d>:
   ba028:	f090 0f00 	teq	r0, #0
   ba02c:	bf04      	itt	eq
   ba02e:	2100      	moveq	r1, #0
   ba030:	4770      	bxeq	lr
   ba032:	b530      	push	{r4, r5, lr}
   ba034:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba038:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba03c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba040:	bf48      	it	mi
   ba042:	4240      	negmi	r0, r0
   ba044:	f04f 0100 	mov.w	r1, #0
   ba048:	e73e      	b.n	b9ec8 <__adddf3+0x138>
   ba04a:	bf00      	nop

000ba04c <__aeabi_f2d>:
   ba04c:	0042      	lsls	r2, r0, #1
   ba04e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba052:	ea4f 0131 	mov.w	r1, r1, rrx
   ba056:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba05a:	bf1f      	itttt	ne
   ba05c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba060:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba064:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba068:	4770      	bxne	lr
   ba06a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba06e:	bf08      	it	eq
   ba070:	4770      	bxeq	lr
   ba072:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba076:	bf04      	itt	eq
   ba078:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba07c:	4770      	bxeq	lr
   ba07e:	b530      	push	{r4, r5, lr}
   ba080:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba084:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba088:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba08c:	e71c      	b.n	b9ec8 <__adddf3+0x138>
   ba08e:	bf00      	nop

000ba090 <__aeabi_ul2d>:
   ba090:	ea50 0201 	orrs.w	r2, r0, r1
   ba094:	bf08      	it	eq
   ba096:	4770      	bxeq	lr
   ba098:	b530      	push	{r4, r5, lr}
   ba09a:	f04f 0500 	mov.w	r5, #0
   ba09e:	e00a      	b.n	ba0b6 <__aeabi_l2d+0x16>

000ba0a0 <__aeabi_l2d>:
   ba0a0:	ea50 0201 	orrs.w	r2, r0, r1
   ba0a4:	bf08      	it	eq
   ba0a6:	4770      	bxeq	lr
   ba0a8:	b530      	push	{r4, r5, lr}
   ba0aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba0ae:	d502      	bpl.n	ba0b6 <__aeabi_l2d+0x16>
   ba0b0:	4240      	negs	r0, r0
   ba0b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba0b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba0ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba0be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba0c2:	f43f aed8 	beq.w	b9e76 <__adddf3+0xe6>
   ba0c6:	f04f 0203 	mov.w	r2, #3
   ba0ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba0ce:	bf18      	it	ne
   ba0d0:	3203      	addne	r2, #3
   ba0d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba0d6:	bf18      	it	ne
   ba0d8:	3203      	addne	r2, #3
   ba0da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba0de:	f1c2 0320 	rsb	r3, r2, #32
   ba0e2:	fa00 fc03 	lsl.w	ip, r0, r3
   ba0e6:	fa20 f002 	lsr.w	r0, r0, r2
   ba0ea:	fa01 fe03 	lsl.w	lr, r1, r3
   ba0ee:	ea40 000e 	orr.w	r0, r0, lr
   ba0f2:	fa21 f102 	lsr.w	r1, r1, r2
   ba0f6:	4414      	add	r4, r2
   ba0f8:	e6bd      	b.n	b9e76 <__adddf3+0xe6>
   ba0fa:	bf00      	nop

000ba0fc <__aeabi_dmul>:
   ba0fc:	b570      	push	{r4, r5, r6, lr}
   ba0fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba102:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba106:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba10a:	bf1d      	ittte	ne
   ba10c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba110:	ea94 0f0c 	teqne	r4, ip
   ba114:	ea95 0f0c 	teqne	r5, ip
   ba118:	f000 f8de 	bleq	ba2d8 <__aeabi_dmul+0x1dc>
   ba11c:	442c      	add	r4, r5
   ba11e:	ea81 0603 	eor.w	r6, r1, r3
   ba122:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba126:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba12a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba12e:	bf18      	it	ne
   ba130:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba13c:	d038      	beq.n	ba1b0 <__aeabi_dmul+0xb4>
   ba13e:	fba0 ce02 	umull	ip, lr, r0, r2
   ba142:	f04f 0500 	mov.w	r5, #0
   ba146:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba14a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba14e:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba152:	f04f 0600 	mov.w	r6, #0
   ba156:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba15a:	f09c 0f00 	teq	ip, #0
   ba15e:	bf18      	it	ne
   ba160:	f04e 0e01 	orrne.w	lr, lr, #1
   ba164:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba168:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba16c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba170:	d204      	bcs.n	ba17c <__aeabi_dmul+0x80>
   ba172:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba176:	416d      	adcs	r5, r5
   ba178:	eb46 0606 	adc.w	r6, r6, r6
   ba17c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba180:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba184:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba188:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba18c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba190:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba194:	bf88      	it	hi
   ba196:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba19a:	d81e      	bhi.n	ba1da <__aeabi_dmul+0xde>
   ba19c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba1a0:	bf08      	it	eq
   ba1a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba1a6:	f150 0000 	adcs.w	r0, r0, #0
   ba1aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba1ae:	bd70      	pop	{r4, r5, r6, pc}
   ba1b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba1b4:	ea46 0101 	orr.w	r1, r6, r1
   ba1b8:	ea40 0002 	orr.w	r0, r0, r2
   ba1bc:	ea81 0103 	eor.w	r1, r1, r3
   ba1c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba1c4:	bfc2      	ittt	gt
   ba1c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba1ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba1ce:	bd70      	popgt	{r4, r5, r6, pc}
   ba1d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba1d4:	f04f 0e00 	mov.w	lr, #0
   ba1d8:	3c01      	subs	r4, #1
   ba1da:	f300 80ab 	bgt.w	ba334 <__aeabi_dmul+0x238>
   ba1de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba1e2:	bfde      	ittt	le
   ba1e4:	2000      	movle	r0, #0
   ba1e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba1ea:	bd70      	pople	{r4, r5, r6, pc}
   ba1ec:	f1c4 0400 	rsb	r4, r4, #0
   ba1f0:	3c20      	subs	r4, #32
   ba1f2:	da35      	bge.n	ba260 <__aeabi_dmul+0x164>
   ba1f4:	340c      	adds	r4, #12
   ba1f6:	dc1b      	bgt.n	ba230 <__aeabi_dmul+0x134>
   ba1f8:	f104 0414 	add.w	r4, r4, #20
   ba1fc:	f1c4 0520 	rsb	r5, r4, #32
   ba200:	fa00 f305 	lsl.w	r3, r0, r5
   ba204:	fa20 f004 	lsr.w	r0, r0, r4
   ba208:	fa01 f205 	lsl.w	r2, r1, r5
   ba20c:	ea40 0002 	orr.w	r0, r0, r2
   ba210:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba214:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba218:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba21c:	fa21 f604 	lsr.w	r6, r1, r4
   ba220:	eb42 0106 	adc.w	r1, r2, r6
   ba224:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba228:	bf08      	it	eq
   ba22a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba22e:	bd70      	pop	{r4, r5, r6, pc}
   ba230:	f1c4 040c 	rsb	r4, r4, #12
   ba234:	f1c4 0520 	rsb	r5, r4, #32
   ba238:	fa00 f304 	lsl.w	r3, r0, r4
   ba23c:	fa20 f005 	lsr.w	r0, r0, r5
   ba240:	fa01 f204 	lsl.w	r2, r1, r4
   ba244:	ea40 0002 	orr.w	r0, r0, r2
   ba248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba24c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba250:	f141 0100 	adc.w	r1, r1, #0
   ba254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba258:	bf08      	it	eq
   ba25a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba25e:	bd70      	pop	{r4, r5, r6, pc}
   ba260:	f1c4 0520 	rsb	r5, r4, #32
   ba264:	fa00 f205 	lsl.w	r2, r0, r5
   ba268:	ea4e 0e02 	orr.w	lr, lr, r2
   ba26c:	fa20 f304 	lsr.w	r3, r0, r4
   ba270:	fa01 f205 	lsl.w	r2, r1, r5
   ba274:	ea43 0302 	orr.w	r3, r3, r2
   ba278:	fa21 f004 	lsr.w	r0, r1, r4
   ba27c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba280:	fa21 f204 	lsr.w	r2, r1, r4
   ba284:	ea20 0002 	bic.w	r0, r0, r2
   ba288:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba28c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba290:	bf08      	it	eq
   ba292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba296:	bd70      	pop	{r4, r5, r6, pc}
   ba298:	f094 0f00 	teq	r4, #0
   ba29c:	d10f      	bne.n	ba2be <__aeabi_dmul+0x1c2>
   ba29e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba2a2:	0040      	lsls	r0, r0, #1
   ba2a4:	eb41 0101 	adc.w	r1, r1, r1
   ba2a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba2ac:	bf08      	it	eq
   ba2ae:	3c01      	subeq	r4, #1
   ba2b0:	d0f7      	beq.n	ba2a2 <__aeabi_dmul+0x1a6>
   ba2b2:	ea41 0106 	orr.w	r1, r1, r6
   ba2b6:	f095 0f00 	teq	r5, #0
   ba2ba:	bf18      	it	ne
   ba2bc:	4770      	bxne	lr
   ba2be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba2c2:	0052      	lsls	r2, r2, #1
   ba2c4:	eb43 0303 	adc.w	r3, r3, r3
   ba2c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba2cc:	bf08      	it	eq
   ba2ce:	3d01      	subeq	r5, #1
   ba2d0:	d0f7      	beq.n	ba2c2 <__aeabi_dmul+0x1c6>
   ba2d2:	ea43 0306 	orr.w	r3, r3, r6
   ba2d6:	4770      	bx	lr
   ba2d8:	ea94 0f0c 	teq	r4, ip
   ba2dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba2e0:	bf18      	it	ne
   ba2e2:	ea95 0f0c 	teqne	r5, ip
   ba2e6:	d00c      	beq.n	ba302 <__aeabi_dmul+0x206>
   ba2e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba2ec:	bf18      	it	ne
   ba2ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba2f2:	d1d1      	bne.n	ba298 <__aeabi_dmul+0x19c>
   ba2f4:	ea81 0103 	eor.w	r1, r1, r3
   ba2f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba2fc:	f04f 0000 	mov.w	r0, #0
   ba300:	bd70      	pop	{r4, r5, r6, pc}
   ba302:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba306:	bf06      	itte	eq
   ba308:	4610      	moveq	r0, r2
   ba30a:	4619      	moveq	r1, r3
   ba30c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba310:	d019      	beq.n	ba346 <__aeabi_dmul+0x24a>
   ba312:	ea94 0f0c 	teq	r4, ip
   ba316:	d102      	bne.n	ba31e <__aeabi_dmul+0x222>
   ba318:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba31c:	d113      	bne.n	ba346 <__aeabi_dmul+0x24a>
   ba31e:	ea95 0f0c 	teq	r5, ip
   ba322:	d105      	bne.n	ba330 <__aeabi_dmul+0x234>
   ba324:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba328:	bf1c      	itt	ne
   ba32a:	4610      	movne	r0, r2
   ba32c:	4619      	movne	r1, r3
   ba32e:	d10a      	bne.n	ba346 <__aeabi_dmul+0x24a>
   ba330:	ea81 0103 	eor.w	r1, r1, r3
   ba334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba338:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba33c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba340:	f04f 0000 	mov.w	r0, #0
   ba344:	bd70      	pop	{r4, r5, r6, pc}
   ba346:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba34a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba34e:	bd70      	pop	{r4, r5, r6, pc}

000ba350 <__aeabi_ddiv>:
   ba350:	b570      	push	{r4, r5, r6, lr}
   ba352:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba356:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba35a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba35e:	bf1d      	ittte	ne
   ba360:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba364:	ea94 0f0c 	teqne	r4, ip
   ba368:	ea95 0f0c 	teqne	r5, ip
   ba36c:	f000 f8a7 	bleq	ba4be <__aeabi_ddiv+0x16e>
   ba370:	eba4 0405 	sub.w	r4, r4, r5
   ba374:	ea81 0e03 	eor.w	lr, r1, r3
   ba378:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba37c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba380:	f000 8088 	beq.w	ba494 <__aeabi_ddiv+0x144>
   ba384:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba388:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba38c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba390:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba394:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba398:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba39c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba3a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba3a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba3a8:	429d      	cmp	r5, r3
   ba3aa:	bf08      	it	eq
   ba3ac:	4296      	cmpeq	r6, r2
   ba3ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba3b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba3b6:	d202      	bcs.n	ba3be <__aeabi_ddiv+0x6e>
   ba3b8:	085b      	lsrs	r3, r3, #1
   ba3ba:	ea4f 0232 	mov.w	r2, r2, rrx
   ba3be:	1ab6      	subs	r6, r6, r2
   ba3c0:	eb65 0503 	sbc.w	r5, r5, r3
   ba3c4:	085b      	lsrs	r3, r3, #1
   ba3c6:	ea4f 0232 	mov.w	r2, r2, rrx
   ba3ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba3ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba3d2:	ebb6 0e02 	subs.w	lr, r6, r2
   ba3d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba3da:	bf22      	ittt	cs
   ba3dc:	1ab6      	subcs	r6, r6, r2
   ba3de:	4675      	movcs	r5, lr
   ba3e0:	ea40 000c 	orrcs.w	r0, r0, ip
   ba3e4:	085b      	lsrs	r3, r3, #1
   ba3e6:	ea4f 0232 	mov.w	r2, r2, rrx
   ba3ea:	ebb6 0e02 	subs.w	lr, r6, r2
   ba3ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba3f2:	bf22      	ittt	cs
   ba3f4:	1ab6      	subcs	r6, r6, r2
   ba3f6:	4675      	movcs	r5, lr
   ba3f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   ba3fc:	085b      	lsrs	r3, r3, #1
   ba3fe:	ea4f 0232 	mov.w	r2, r2, rrx
   ba402:	ebb6 0e02 	subs.w	lr, r6, r2
   ba406:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba40a:	bf22      	ittt	cs
   ba40c:	1ab6      	subcs	r6, r6, r2
   ba40e:	4675      	movcs	r5, lr
   ba410:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   ba414:	085b      	lsrs	r3, r3, #1
   ba416:	ea4f 0232 	mov.w	r2, r2, rrx
   ba41a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba41e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba422:	bf22      	ittt	cs
   ba424:	1ab6      	subcs	r6, r6, r2
   ba426:	4675      	movcs	r5, lr
   ba428:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ba42c:	ea55 0e06 	orrs.w	lr, r5, r6
   ba430:	d018      	beq.n	ba464 <__aeabi_ddiv+0x114>
   ba432:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ba436:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ba43a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ba43e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ba442:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ba446:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ba44a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ba44e:	d1c0      	bne.n	ba3d2 <__aeabi_ddiv+0x82>
   ba450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba454:	d10b      	bne.n	ba46e <__aeabi_ddiv+0x11e>
   ba456:	ea41 0100 	orr.w	r1, r1, r0
   ba45a:	f04f 0000 	mov.w	r0, #0
   ba45e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ba462:	e7b6      	b.n	ba3d2 <__aeabi_ddiv+0x82>
   ba464:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba468:	bf04      	itt	eq
   ba46a:	4301      	orreq	r1, r0
   ba46c:	2000      	moveq	r0, #0
   ba46e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba472:	bf88      	it	hi
   ba474:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba478:	f63f aeaf 	bhi.w	ba1da <__aeabi_dmul+0xde>
   ba47c:	ebb5 0c03 	subs.w	ip, r5, r3
   ba480:	bf04      	itt	eq
   ba482:	ebb6 0c02 	subseq.w	ip, r6, r2
   ba486:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba48a:	f150 0000 	adcs.w	r0, r0, #0
   ba48e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba492:	bd70      	pop	{r4, r5, r6, pc}
   ba494:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ba498:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ba49c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ba4a0:	bfc2      	ittt	gt
   ba4a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba4a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba4aa:	bd70      	popgt	{r4, r5, r6, pc}
   ba4ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba4b0:	f04f 0e00 	mov.w	lr, #0
   ba4b4:	3c01      	subs	r4, #1
   ba4b6:	e690      	b.n	ba1da <__aeabi_dmul+0xde>
   ba4b8:	ea45 0e06 	orr.w	lr, r5, r6
   ba4bc:	e68d      	b.n	ba1da <__aeabi_dmul+0xde>
   ba4be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba4c2:	ea94 0f0c 	teq	r4, ip
   ba4c6:	bf08      	it	eq
   ba4c8:	ea95 0f0c 	teqeq	r5, ip
   ba4cc:	f43f af3b 	beq.w	ba346 <__aeabi_dmul+0x24a>
   ba4d0:	ea94 0f0c 	teq	r4, ip
   ba4d4:	d10a      	bne.n	ba4ec <__aeabi_ddiv+0x19c>
   ba4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba4da:	f47f af34 	bne.w	ba346 <__aeabi_dmul+0x24a>
   ba4de:	ea95 0f0c 	teq	r5, ip
   ba4e2:	f47f af25 	bne.w	ba330 <__aeabi_dmul+0x234>
   ba4e6:	4610      	mov	r0, r2
   ba4e8:	4619      	mov	r1, r3
   ba4ea:	e72c      	b.n	ba346 <__aeabi_dmul+0x24a>
   ba4ec:	ea95 0f0c 	teq	r5, ip
   ba4f0:	d106      	bne.n	ba500 <__aeabi_ddiv+0x1b0>
   ba4f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba4f6:	f43f aefd 	beq.w	ba2f4 <__aeabi_dmul+0x1f8>
   ba4fa:	4610      	mov	r0, r2
   ba4fc:	4619      	mov	r1, r3
   ba4fe:	e722      	b.n	ba346 <__aeabi_dmul+0x24a>
   ba500:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba504:	bf18      	it	ne
   ba506:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba50a:	f47f aec5 	bne.w	ba298 <__aeabi_dmul+0x19c>
   ba50e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba512:	f47f af0d 	bne.w	ba330 <__aeabi_dmul+0x234>
   ba516:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba51a:	f47f aeeb 	bne.w	ba2f4 <__aeabi_dmul+0x1f8>
   ba51e:	e712      	b.n	ba346 <__aeabi_dmul+0x24a>

000ba520 <__gedf2>:
   ba520:	f04f 3cff 	mov.w	ip, #4294967295
   ba524:	e006      	b.n	ba534 <__cmpdf2+0x4>
   ba526:	bf00      	nop

000ba528 <__ledf2>:
   ba528:	f04f 0c01 	mov.w	ip, #1
   ba52c:	e002      	b.n	ba534 <__cmpdf2+0x4>
   ba52e:	bf00      	nop

000ba530 <__cmpdf2>:
   ba530:	f04f 0c01 	mov.w	ip, #1
   ba534:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba53c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba540:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba544:	bf18      	it	ne
   ba546:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba54a:	d01b      	beq.n	ba584 <__cmpdf2+0x54>
   ba54c:	b001      	add	sp, #4
   ba54e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba552:	bf0c      	ite	eq
   ba554:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba558:	ea91 0f03 	teqne	r1, r3
   ba55c:	bf02      	ittt	eq
   ba55e:	ea90 0f02 	teqeq	r0, r2
   ba562:	2000      	moveq	r0, #0
   ba564:	4770      	bxeq	lr
   ba566:	f110 0f00 	cmn.w	r0, #0
   ba56a:	ea91 0f03 	teq	r1, r3
   ba56e:	bf58      	it	pl
   ba570:	4299      	cmppl	r1, r3
   ba572:	bf08      	it	eq
   ba574:	4290      	cmpeq	r0, r2
   ba576:	bf2c      	ite	cs
   ba578:	17d8      	asrcs	r0, r3, #31
   ba57a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba57e:	f040 0001 	orr.w	r0, r0, #1
   ba582:	4770      	bx	lr
   ba584:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba588:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba58c:	d102      	bne.n	ba594 <__cmpdf2+0x64>
   ba58e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba592:	d107      	bne.n	ba5a4 <__cmpdf2+0x74>
   ba594:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba59c:	d1d6      	bne.n	ba54c <__cmpdf2+0x1c>
   ba59e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba5a2:	d0d3      	beq.n	ba54c <__cmpdf2+0x1c>
   ba5a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba5a8:	4770      	bx	lr
   ba5aa:	bf00      	nop

000ba5ac <__aeabi_cdrcmple>:
   ba5ac:	4684      	mov	ip, r0
   ba5ae:	4610      	mov	r0, r2
   ba5b0:	4662      	mov	r2, ip
   ba5b2:	468c      	mov	ip, r1
   ba5b4:	4619      	mov	r1, r3
   ba5b6:	4663      	mov	r3, ip
   ba5b8:	e000      	b.n	ba5bc <__aeabi_cdcmpeq>
   ba5ba:	bf00      	nop

000ba5bc <__aeabi_cdcmpeq>:
   ba5bc:	b501      	push	{r0, lr}
   ba5be:	f7ff ffb7 	bl	ba530 <__cmpdf2>
   ba5c2:	2800      	cmp	r0, #0
   ba5c4:	bf48      	it	mi
   ba5c6:	f110 0f00 	cmnmi.w	r0, #0
   ba5ca:	bd01      	pop	{r0, pc}

000ba5cc <__aeabi_dcmpeq>:
   ba5cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba5d0:	f7ff fff4 	bl	ba5bc <__aeabi_cdcmpeq>
   ba5d4:	bf0c      	ite	eq
   ba5d6:	2001      	moveq	r0, #1
   ba5d8:	2000      	movne	r0, #0
   ba5da:	f85d fb08 	ldr.w	pc, [sp], #8
   ba5de:	bf00      	nop

000ba5e0 <__aeabi_dcmplt>:
   ba5e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba5e4:	f7ff ffea 	bl	ba5bc <__aeabi_cdcmpeq>
   ba5e8:	bf34      	ite	cc
   ba5ea:	2001      	movcc	r0, #1
   ba5ec:	2000      	movcs	r0, #0
   ba5ee:	f85d fb08 	ldr.w	pc, [sp], #8
   ba5f2:	bf00      	nop

000ba5f4 <__aeabi_dcmple>:
   ba5f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba5f8:	f7ff ffe0 	bl	ba5bc <__aeabi_cdcmpeq>
   ba5fc:	bf94      	ite	ls
   ba5fe:	2001      	movls	r0, #1
   ba600:	2000      	movhi	r0, #0
   ba602:	f85d fb08 	ldr.w	pc, [sp], #8
   ba606:	bf00      	nop

000ba608 <__aeabi_dcmpge>:
   ba608:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba60c:	f7ff ffce 	bl	ba5ac <__aeabi_cdrcmple>
   ba610:	bf94      	ite	ls
   ba612:	2001      	movls	r0, #1
   ba614:	2000      	movhi	r0, #0
   ba616:	f85d fb08 	ldr.w	pc, [sp], #8
   ba61a:	bf00      	nop

000ba61c <__aeabi_dcmpgt>:
   ba61c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba620:	f7ff ffc4 	bl	ba5ac <__aeabi_cdrcmple>
   ba624:	bf34      	ite	cc
   ba626:	2001      	movcc	r0, #1
   ba628:	2000      	movcs	r0, #0
   ba62a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba62e:	bf00      	nop

000ba630 <__aeabi_d2uiz>:
   ba630:	004a      	lsls	r2, r1, #1
   ba632:	d211      	bcs.n	ba658 <__aeabi_d2uiz+0x28>
   ba634:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba638:	d211      	bcs.n	ba65e <__aeabi_d2uiz+0x2e>
   ba63a:	d50d      	bpl.n	ba658 <__aeabi_d2uiz+0x28>
   ba63c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba640:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba644:	d40e      	bmi.n	ba664 <__aeabi_d2uiz+0x34>
   ba646:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba64a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba64e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba652:	fa23 f002 	lsr.w	r0, r3, r2
   ba656:	4770      	bx	lr
   ba658:	f04f 0000 	mov.w	r0, #0
   ba65c:	4770      	bx	lr
   ba65e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba662:	d102      	bne.n	ba66a <__aeabi_d2uiz+0x3a>
   ba664:	f04f 30ff 	mov.w	r0, #4294967295
   ba668:	4770      	bx	lr
   ba66a:	f04f 0000 	mov.w	r0, #0
   ba66e:	4770      	bx	lr

000ba670 <__aeabi_d2ulz>:
   ba670:	b5d0      	push	{r4, r6, r7, lr}
   ba672:	4b0c      	ldr	r3, [pc, #48]	; (ba6a4 <__aeabi_d2ulz+0x34>)
   ba674:	2200      	movs	r2, #0
   ba676:	4606      	mov	r6, r0
   ba678:	460f      	mov	r7, r1
   ba67a:	f7ff fd3f 	bl	ba0fc <__aeabi_dmul>
   ba67e:	f7ff ffd7 	bl	ba630 <__aeabi_d2uiz>
   ba682:	4604      	mov	r4, r0
   ba684:	f7ff fcc0 	bl	ba008 <__aeabi_ui2d>
   ba688:	4b07      	ldr	r3, [pc, #28]	; (ba6a8 <__aeabi_d2ulz+0x38>)
   ba68a:	2200      	movs	r2, #0
   ba68c:	f7ff fd36 	bl	ba0fc <__aeabi_dmul>
   ba690:	4602      	mov	r2, r0
   ba692:	460b      	mov	r3, r1
   ba694:	4630      	mov	r0, r6
   ba696:	4639      	mov	r1, r7
   ba698:	f7ff fb78 	bl	b9d8c <__aeabi_dsub>
   ba69c:	f7ff ffc8 	bl	ba630 <__aeabi_d2uiz>
   ba6a0:	4621      	mov	r1, r4
   ba6a2:	bdd0      	pop	{r4, r6, r7, pc}
   ba6a4:	3df00000 	.word	0x3df00000
   ba6a8:	41f00000 	.word	0x41f00000

000ba6ac <atexit>:
   ba6ac:	2300      	movs	r3, #0
   ba6ae:	4601      	mov	r1, r0
   ba6b0:	461a      	mov	r2, r3
   ba6b2:	4618      	mov	r0, r3
   ba6b4:	f001 b81a 	b.w	bb6ec <__register_exitproc>

000ba6b8 <atof>:
   ba6b8:	2100      	movs	r1, #0
   ba6ba:	f000 bf23 	b.w	bb504 <strtod>

000ba6be <atoi>:
   ba6be:	220a      	movs	r2, #10
   ba6c0:	2100      	movs	r1, #0
   ba6c2:	f001 b809 	b.w	bb6d8 <strtol>

000ba6c6 <ldiv>:
   ba6c6:	2900      	cmp	r1, #0
   ba6c8:	b510      	push	{r4, lr}
   ba6ca:	fb91 f4f2 	sdiv	r4, r1, r2
   ba6ce:	fb02 1314 	mls	r3, r2, r4, r1
   ba6d2:	db06      	blt.n	ba6e2 <ldiv+0x1c>
   ba6d4:	2b00      	cmp	r3, #0
   ba6d6:	da01      	bge.n	ba6dc <ldiv+0x16>
   ba6d8:	3401      	adds	r4, #1
   ba6da:	1a9b      	subs	r3, r3, r2
   ba6dc:	e9c0 4300 	strd	r4, r3, [r0]
   ba6e0:	bd10      	pop	{r4, pc}
   ba6e2:	2b00      	cmp	r3, #0
   ba6e4:	bfc4      	itt	gt
   ba6e6:	f104 34ff 	addgt.w	r4, r4, #4294967295
   ba6ea:	189b      	addgt	r3, r3, r2
   ba6ec:	e7f6      	b.n	ba6dc <ldiv+0x16>

000ba6ee <memcmp>:
   ba6ee:	b510      	push	{r4, lr}
   ba6f0:	3901      	subs	r1, #1
   ba6f2:	4402      	add	r2, r0
   ba6f4:	4290      	cmp	r0, r2
   ba6f6:	d101      	bne.n	ba6fc <memcmp+0xe>
   ba6f8:	2000      	movs	r0, #0
   ba6fa:	e005      	b.n	ba708 <memcmp+0x1a>
   ba6fc:	7803      	ldrb	r3, [r0, #0]
   ba6fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba702:	42a3      	cmp	r3, r4
   ba704:	d001      	beq.n	ba70a <memcmp+0x1c>
   ba706:	1b18      	subs	r0, r3, r4
   ba708:	bd10      	pop	{r4, pc}
   ba70a:	3001      	adds	r0, #1
   ba70c:	e7f2      	b.n	ba6f4 <memcmp+0x6>

000ba70e <memcpy>:
   ba70e:	440a      	add	r2, r1
   ba710:	4291      	cmp	r1, r2
   ba712:	f100 33ff 	add.w	r3, r0, #4294967295
   ba716:	d100      	bne.n	ba71a <memcpy+0xc>
   ba718:	4770      	bx	lr
   ba71a:	b510      	push	{r4, lr}
   ba71c:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba720:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba724:	4291      	cmp	r1, r2
   ba726:	d1f9      	bne.n	ba71c <memcpy+0xe>
   ba728:	bd10      	pop	{r4, pc}

000ba72a <memmove>:
   ba72a:	4288      	cmp	r0, r1
   ba72c:	b510      	push	{r4, lr}
   ba72e:	eb01 0402 	add.w	r4, r1, r2
   ba732:	d902      	bls.n	ba73a <memmove+0x10>
   ba734:	4284      	cmp	r4, r0
   ba736:	4623      	mov	r3, r4
   ba738:	d807      	bhi.n	ba74a <memmove+0x20>
   ba73a:	1e43      	subs	r3, r0, #1
   ba73c:	42a1      	cmp	r1, r4
   ba73e:	d008      	beq.n	ba752 <memmove+0x28>
   ba740:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba744:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba748:	e7f8      	b.n	ba73c <memmove+0x12>
   ba74a:	4402      	add	r2, r0
   ba74c:	4601      	mov	r1, r0
   ba74e:	428a      	cmp	r2, r1
   ba750:	d100      	bne.n	ba754 <memmove+0x2a>
   ba752:	bd10      	pop	{r4, pc}
   ba754:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba758:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba75c:	e7f7      	b.n	ba74e <memmove+0x24>

000ba75e <memset>:
   ba75e:	4402      	add	r2, r0
   ba760:	4603      	mov	r3, r0
   ba762:	4293      	cmp	r3, r2
   ba764:	d100      	bne.n	ba768 <memset+0xa>
   ba766:	4770      	bx	lr
   ba768:	f803 1b01 	strb.w	r1, [r3], #1
   ba76c:	e7f9      	b.n	ba762 <memset+0x4>
	...

000ba770 <srand>:
   ba770:	b538      	push	{r3, r4, r5, lr}
   ba772:	4b10      	ldr	r3, [pc, #64]	; (ba7b4 <srand+0x44>)
   ba774:	681d      	ldr	r5, [r3, #0]
   ba776:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba778:	4604      	mov	r4, r0
   ba77a:	b9b3      	cbnz	r3, ba7aa <srand+0x3a>
   ba77c:	2018      	movs	r0, #24
   ba77e:	f7fb ff2f 	bl	b65e0 <malloc>
   ba782:	4602      	mov	r2, r0
   ba784:	63a8      	str	r0, [r5, #56]	; 0x38
   ba786:	b920      	cbnz	r0, ba792 <srand+0x22>
   ba788:	4b0b      	ldr	r3, [pc, #44]	; (ba7b8 <srand+0x48>)
   ba78a:	480c      	ldr	r0, [pc, #48]	; (ba7bc <srand+0x4c>)
   ba78c:	2142      	movs	r1, #66	; 0x42
   ba78e:	f7fb ff6f 	bl	b6670 <__assert_func>
   ba792:	490b      	ldr	r1, [pc, #44]	; (ba7c0 <srand+0x50>)
   ba794:	4b0b      	ldr	r3, [pc, #44]	; (ba7c4 <srand+0x54>)
   ba796:	e9c0 1300 	strd	r1, r3, [r0]
   ba79a:	4b0b      	ldr	r3, [pc, #44]	; (ba7c8 <srand+0x58>)
   ba79c:	6083      	str	r3, [r0, #8]
   ba79e:	230b      	movs	r3, #11
   ba7a0:	8183      	strh	r3, [r0, #12]
   ba7a2:	2100      	movs	r1, #0
   ba7a4:	2001      	movs	r0, #1
   ba7a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba7aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba7ac:	2200      	movs	r2, #0
   ba7ae:	611c      	str	r4, [r3, #16]
   ba7b0:	615a      	str	r2, [r3, #20]
   ba7b2:	bd38      	pop	{r3, r4, r5, pc}
   ba7b4:	2003d154 	.word	0x2003d154
   ba7b8:	000bd3dd 	.word	0x000bd3dd
   ba7bc:	000bd3f4 	.word	0x000bd3f4
   ba7c0:	abcd330e 	.word	0xabcd330e
   ba7c4:	e66d1234 	.word	0xe66d1234
   ba7c8:	0005deec 	.word	0x0005deec

000ba7cc <strcat>:
   ba7cc:	b510      	push	{r4, lr}
   ba7ce:	4602      	mov	r2, r0
   ba7d0:	7814      	ldrb	r4, [r2, #0]
   ba7d2:	4613      	mov	r3, r2
   ba7d4:	3201      	adds	r2, #1
   ba7d6:	2c00      	cmp	r4, #0
   ba7d8:	d1fa      	bne.n	ba7d0 <strcat+0x4>
   ba7da:	3b01      	subs	r3, #1
   ba7dc:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba7e0:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba7e4:	2a00      	cmp	r2, #0
   ba7e6:	d1f9      	bne.n	ba7dc <strcat+0x10>
   ba7e8:	bd10      	pop	{r4, pc}

000ba7ea <strcmp>:
   ba7ea:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba7f2:	2a01      	cmp	r2, #1
   ba7f4:	bf28      	it	cs
   ba7f6:	429a      	cmpcs	r2, r3
   ba7f8:	d0f7      	beq.n	ba7ea <strcmp>
   ba7fa:	1ad0      	subs	r0, r2, r3
   ba7fc:	4770      	bx	lr

000ba7fe <strcpy>:
   ba7fe:	4603      	mov	r3, r0
   ba800:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba804:	f803 2b01 	strb.w	r2, [r3], #1
   ba808:	2a00      	cmp	r2, #0
   ba80a:	d1f9      	bne.n	ba800 <strcpy+0x2>
   ba80c:	4770      	bx	lr
	...

000ba810 <strdup>:
   ba810:	4b02      	ldr	r3, [pc, #8]	; (ba81c <strdup+0xc>)
   ba812:	4601      	mov	r1, r0
   ba814:	6818      	ldr	r0, [r3, #0]
   ba816:	f000 b803 	b.w	ba820 <_strdup_r>
   ba81a:	bf00      	nop
   ba81c:	2003d154 	.word	0x2003d154

000ba820 <_strdup_r>:
   ba820:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba822:	4604      	mov	r4, r0
   ba824:	4608      	mov	r0, r1
   ba826:	460d      	mov	r5, r1
   ba828:	f000 f80f 	bl	ba84a <strlen>
   ba82c:	1c42      	adds	r2, r0, #1
   ba82e:	4611      	mov	r1, r2
   ba830:	4620      	mov	r0, r4
   ba832:	9201      	str	r2, [sp, #4]
   ba834:	f7fb ff0c 	bl	b6650 <_malloc_r>
   ba838:	4604      	mov	r4, r0
   ba83a:	b118      	cbz	r0, ba844 <_strdup_r+0x24>
   ba83c:	9a01      	ldr	r2, [sp, #4]
   ba83e:	4629      	mov	r1, r5
   ba840:	f7ff ff65 	bl	ba70e <memcpy>
   ba844:	4620      	mov	r0, r4
   ba846:	b003      	add	sp, #12
   ba848:	bd30      	pop	{r4, r5, pc}

000ba84a <strlen>:
   ba84a:	4603      	mov	r3, r0
   ba84c:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba850:	2a00      	cmp	r2, #0
   ba852:	d1fb      	bne.n	ba84c <strlen+0x2>
   ba854:	1a18      	subs	r0, r3, r0
   ba856:	3801      	subs	r0, #1
   ba858:	4770      	bx	lr

000ba85a <strncmp>:
   ba85a:	b510      	push	{r4, lr}
   ba85c:	b17a      	cbz	r2, ba87e <strncmp+0x24>
   ba85e:	4603      	mov	r3, r0
   ba860:	3901      	subs	r1, #1
   ba862:	1884      	adds	r4, r0, r2
   ba864:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba868:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba86c:	4290      	cmp	r0, r2
   ba86e:	d101      	bne.n	ba874 <strncmp+0x1a>
   ba870:	42a3      	cmp	r3, r4
   ba872:	d101      	bne.n	ba878 <strncmp+0x1e>
   ba874:	1a80      	subs	r0, r0, r2
   ba876:	bd10      	pop	{r4, pc}
   ba878:	2800      	cmp	r0, #0
   ba87a:	d1f3      	bne.n	ba864 <strncmp+0xa>
   ba87c:	e7fa      	b.n	ba874 <strncmp+0x1a>
   ba87e:	4610      	mov	r0, r2
   ba880:	e7f9      	b.n	ba876 <strncmp+0x1c>

000ba882 <strncpy>:
   ba882:	b510      	push	{r4, lr}
   ba884:	3901      	subs	r1, #1
   ba886:	4603      	mov	r3, r0
   ba888:	b132      	cbz	r2, ba898 <strncpy+0x16>
   ba88a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba88e:	f803 4b01 	strb.w	r4, [r3], #1
   ba892:	3a01      	subs	r2, #1
   ba894:	2c00      	cmp	r4, #0
   ba896:	d1f7      	bne.n	ba888 <strncpy+0x6>
   ba898:	441a      	add	r2, r3
   ba89a:	2100      	movs	r1, #0
   ba89c:	4293      	cmp	r3, r2
   ba89e:	d100      	bne.n	ba8a2 <strncpy+0x20>
   ba8a0:	bd10      	pop	{r4, pc}
   ba8a2:	f803 1b01 	strb.w	r1, [r3], #1
   ba8a6:	e7f9      	b.n	ba89c <strncpy+0x1a>

000ba8a8 <strnlen>:
   ba8a8:	b510      	push	{r4, lr}
   ba8aa:	4602      	mov	r2, r0
   ba8ac:	4401      	add	r1, r0
   ba8ae:	428a      	cmp	r2, r1
   ba8b0:	4613      	mov	r3, r2
   ba8b2:	d003      	beq.n	ba8bc <strnlen+0x14>
   ba8b4:	781c      	ldrb	r4, [r3, #0]
   ba8b6:	3201      	adds	r2, #1
   ba8b8:	2c00      	cmp	r4, #0
   ba8ba:	d1f8      	bne.n	ba8ae <strnlen+0x6>
   ba8bc:	1a18      	subs	r0, r3, r0
   ba8be:	bd10      	pop	{r4, pc}

000ba8c0 <sulp>:
   ba8c0:	b570      	push	{r4, r5, r6, lr}
   ba8c2:	4604      	mov	r4, r0
   ba8c4:	460d      	mov	r5, r1
   ba8c6:	ec45 4b10 	vmov	d0, r4, r5
   ba8ca:	4616      	mov	r6, r2
   ba8cc:	f001 fe68 	bl	bc5a0 <__ulp>
   ba8d0:	ec51 0b10 	vmov	r0, r1, d0
   ba8d4:	b17e      	cbz	r6, ba8f6 <sulp+0x36>
   ba8d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba8da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba8de:	2b00      	cmp	r3, #0
   ba8e0:	dd09      	ble.n	ba8f6 <sulp+0x36>
   ba8e2:	051b      	lsls	r3, r3, #20
   ba8e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba8e8:	2400      	movs	r4, #0
   ba8ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba8ee:	4622      	mov	r2, r4
   ba8f0:	462b      	mov	r3, r5
   ba8f2:	f7ff fc03 	bl	ba0fc <__aeabi_dmul>
   ba8f6:	bd70      	pop	{r4, r5, r6, pc}

000ba8f8 <_strtod_l>:
   ba8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba8fc:	ed2d 8b02 	vpush	{d8}
   ba900:	b09d      	sub	sp, #116	; 0x74
   ba902:	461f      	mov	r7, r3
   ba904:	2300      	movs	r3, #0
   ba906:	9318      	str	r3, [sp, #96]	; 0x60
   ba908:	4ba2      	ldr	r3, [pc, #648]	; (bab94 <_strtod_l+0x29c>)
   ba90a:	9213      	str	r2, [sp, #76]	; 0x4c
   ba90c:	681b      	ldr	r3, [r3, #0]
   ba90e:	9305      	str	r3, [sp, #20]
   ba910:	4604      	mov	r4, r0
   ba912:	4618      	mov	r0, r3
   ba914:	4688      	mov	r8, r1
   ba916:	f7ff ff98 	bl	ba84a <strlen>
   ba91a:	f04f 0a00 	mov.w	sl, #0
   ba91e:	4605      	mov	r5, r0
   ba920:	f04f 0b00 	mov.w	fp, #0
   ba924:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba92a:	781a      	ldrb	r2, [r3, #0]
   ba92c:	2a2b      	cmp	r2, #43	; 0x2b
   ba92e:	d04e      	beq.n	ba9ce <_strtod_l+0xd6>
   ba930:	d83b      	bhi.n	ba9aa <_strtod_l+0xb2>
   ba932:	2a0d      	cmp	r2, #13
   ba934:	d834      	bhi.n	ba9a0 <_strtod_l+0xa8>
   ba936:	2a08      	cmp	r2, #8
   ba938:	d834      	bhi.n	ba9a4 <_strtod_l+0xac>
   ba93a:	2a00      	cmp	r2, #0
   ba93c:	d03e      	beq.n	ba9bc <_strtod_l+0xc4>
   ba93e:	2300      	movs	r3, #0
   ba940:	930a      	str	r3, [sp, #40]	; 0x28
   ba942:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba944:	7833      	ldrb	r3, [r6, #0]
   ba946:	2b30      	cmp	r3, #48	; 0x30
   ba948:	f040 80b0 	bne.w	baaac <_strtod_l+0x1b4>
   ba94c:	7873      	ldrb	r3, [r6, #1]
   ba94e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba952:	2b58      	cmp	r3, #88	; 0x58
   ba954:	d168      	bne.n	baa28 <_strtod_l+0x130>
   ba956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba958:	9301      	str	r3, [sp, #4]
   ba95a:	ab18      	add	r3, sp, #96	; 0x60
   ba95c:	9702      	str	r7, [sp, #8]
   ba95e:	9300      	str	r3, [sp, #0]
   ba960:	4a8d      	ldr	r2, [pc, #564]	; (bab98 <_strtod_l+0x2a0>)
   ba962:	ab19      	add	r3, sp, #100	; 0x64
   ba964:	a917      	add	r1, sp, #92	; 0x5c
   ba966:	4620      	mov	r0, r4
   ba968:	f000 ff8a 	bl	bb880 <__gethex>
   ba96c:	f010 0707 	ands.w	r7, r0, #7
   ba970:	4605      	mov	r5, r0
   ba972:	d005      	beq.n	ba980 <_strtod_l+0x88>
   ba974:	2f06      	cmp	r7, #6
   ba976:	d12c      	bne.n	ba9d2 <_strtod_l+0xda>
   ba978:	3601      	adds	r6, #1
   ba97a:	2300      	movs	r3, #0
   ba97c:	9617      	str	r6, [sp, #92]	; 0x5c
   ba97e:	930a      	str	r3, [sp, #40]	; 0x28
   ba980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba982:	2b00      	cmp	r3, #0
   ba984:	f040 8590 	bne.w	bb4a8 <_strtod_l+0xbb0>
   ba988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba98a:	b1eb      	cbz	r3, ba9c8 <_strtod_l+0xd0>
   ba98c:	4652      	mov	r2, sl
   ba98e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba992:	ec43 2b10 	vmov	d0, r2, r3
   ba996:	b01d      	add	sp, #116	; 0x74
   ba998:	ecbd 8b02 	vpop	{d8}
   ba99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba9a0:	2a20      	cmp	r2, #32
   ba9a2:	d1cc      	bne.n	ba93e <_strtod_l+0x46>
   ba9a4:	3301      	adds	r3, #1
   ba9a6:	9317      	str	r3, [sp, #92]	; 0x5c
   ba9a8:	e7be      	b.n	ba928 <_strtod_l+0x30>
   ba9aa:	2a2d      	cmp	r2, #45	; 0x2d
   ba9ac:	d1c7      	bne.n	ba93e <_strtod_l+0x46>
   ba9ae:	2201      	movs	r2, #1
   ba9b0:	920a      	str	r2, [sp, #40]	; 0x28
   ba9b2:	1c5a      	adds	r2, r3, #1
   ba9b4:	9217      	str	r2, [sp, #92]	; 0x5c
   ba9b6:	785b      	ldrb	r3, [r3, #1]
   ba9b8:	2b00      	cmp	r3, #0
   ba9ba:	d1c2      	bne.n	ba942 <_strtod_l+0x4a>
   ba9bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba9be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba9c2:	2b00      	cmp	r3, #0
   ba9c4:	f040 856e 	bne.w	bb4a4 <_strtod_l+0xbac>
   ba9c8:	4652      	mov	r2, sl
   ba9ca:	465b      	mov	r3, fp
   ba9cc:	e7e1      	b.n	ba992 <_strtod_l+0x9a>
   ba9ce:	2200      	movs	r2, #0
   ba9d0:	e7ee      	b.n	ba9b0 <_strtod_l+0xb8>
   ba9d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba9d4:	b13a      	cbz	r2, ba9e6 <_strtod_l+0xee>
   ba9d6:	2135      	movs	r1, #53	; 0x35
   ba9d8:	a81a      	add	r0, sp, #104	; 0x68
   ba9da:	f001 feec 	bl	bc7b6 <__copybits>
   ba9de:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba9e0:	4620      	mov	r0, r4
   ba9e2:	f001 faab 	bl	bbf3c <_Bfree>
   ba9e6:	3f01      	subs	r7, #1
   ba9e8:	2f04      	cmp	r7, #4
   ba9ea:	d806      	bhi.n	ba9fa <_strtod_l+0x102>
   ba9ec:	e8df f007 	tbb	[pc, r7]
   ba9f0:	1714030a 	.word	0x1714030a
   ba9f4:	0a          	.byte	0x0a
   ba9f5:	00          	.byte	0x00
   ba9f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba9fa:	0728      	lsls	r0, r5, #28
   ba9fc:	d5c0      	bpl.n	ba980 <_strtod_l+0x88>
   ba9fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   baa02:	e7bd      	b.n	ba980 <_strtod_l+0x88>
   baa04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   baa08:	9a19      	ldr	r2, [sp, #100]	; 0x64
   baa0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   baa0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   baa12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   baa16:	e7f0      	b.n	ba9fa <_strtod_l+0x102>
   baa18:	f8df b180 	ldr.w	fp, [pc, #384]	; bab9c <_strtod_l+0x2a4>
   baa1c:	e7ed      	b.n	ba9fa <_strtod_l+0x102>
   baa1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   baa22:	f04f 3aff 	mov.w	sl, #4294967295
   baa26:	e7e8      	b.n	ba9fa <_strtod_l+0x102>
   baa28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baa2a:	1c5a      	adds	r2, r3, #1
   baa2c:	9217      	str	r2, [sp, #92]	; 0x5c
   baa2e:	785b      	ldrb	r3, [r3, #1]
   baa30:	2b30      	cmp	r3, #48	; 0x30
   baa32:	d0f9      	beq.n	baa28 <_strtod_l+0x130>
   baa34:	2b00      	cmp	r3, #0
   baa36:	d0a3      	beq.n	ba980 <_strtod_l+0x88>
   baa38:	2301      	movs	r3, #1
   baa3a:	f04f 0900 	mov.w	r9, #0
   baa3e:	9304      	str	r3, [sp, #16]
   baa40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baa42:	9308      	str	r3, [sp, #32]
   baa44:	f8cd 901c 	str.w	r9, [sp, #28]
   baa48:	464f      	mov	r7, r9
   baa4a:	220a      	movs	r2, #10
   baa4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   baa4e:	7806      	ldrb	r6, [r0, #0]
   baa50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   baa54:	b2d9      	uxtb	r1, r3
   baa56:	2909      	cmp	r1, #9
   baa58:	d92a      	bls.n	baab0 <_strtod_l+0x1b8>
   baa5a:	9905      	ldr	r1, [sp, #20]
   baa5c:	462a      	mov	r2, r5
   baa5e:	f7ff fefc 	bl	ba85a <strncmp>
   baa62:	b398      	cbz	r0, baacc <_strtod_l+0x1d4>
   baa64:	2000      	movs	r0, #0
   baa66:	4632      	mov	r2, r6
   baa68:	463d      	mov	r5, r7
   baa6a:	9005      	str	r0, [sp, #20]
   baa6c:	4603      	mov	r3, r0
   baa6e:	2a65      	cmp	r2, #101	; 0x65
   baa70:	d001      	beq.n	baa76 <_strtod_l+0x17e>
   baa72:	2a45      	cmp	r2, #69	; 0x45
   baa74:	d118      	bne.n	baaa8 <_strtod_l+0x1b0>
   baa76:	b91d      	cbnz	r5, baa80 <_strtod_l+0x188>
   baa78:	9a04      	ldr	r2, [sp, #16]
   baa7a:	4302      	orrs	r2, r0
   baa7c:	d09e      	beq.n	ba9bc <_strtod_l+0xc4>
   baa7e:	2500      	movs	r5, #0
   baa80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   baa84:	f108 0201 	add.w	r2, r8, #1
   baa88:	9217      	str	r2, [sp, #92]	; 0x5c
   baa8a:	f898 2001 	ldrb.w	r2, [r8, #1]
   baa8e:	2a2b      	cmp	r2, #43	; 0x2b
   baa90:	d075      	beq.n	bab7e <_strtod_l+0x286>
   baa92:	2a2d      	cmp	r2, #45	; 0x2d
   baa94:	d07b      	beq.n	bab8e <_strtod_l+0x296>
   baa96:	f04f 0c00 	mov.w	ip, #0
   baa9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   baa9e:	2909      	cmp	r1, #9
   baaa0:	f240 8082 	bls.w	baba8 <_strtod_l+0x2b0>
   baaa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   baaa8:	2600      	movs	r6, #0
   baaaa:	e09d      	b.n	babe8 <_strtod_l+0x2f0>
   baaac:	2300      	movs	r3, #0
   baaae:	e7c4      	b.n	baa3a <_strtod_l+0x142>
   baab0:	2f08      	cmp	r7, #8
   baab2:	bfd8      	it	le
   baab4:	9907      	ldrle	r1, [sp, #28]
   baab6:	f100 0001 	add.w	r0, r0, #1
   baaba:	bfda      	itte	le
   baabc:	fb02 3301 	mlale	r3, r2, r1, r3
   baac0:	9307      	strle	r3, [sp, #28]
   baac2:	fb02 3909 	mlagt	r9, r2, r9, r3
   baac6:	3701      	adds	r7, #1
   baac8:	9017      	str	r0, [sp, #92]	; 0x5c
   baaca:	e7bf      	b.n	baa4c <_strtod_l+0x154>
   baacc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baace:	195a      	adds	r2, r3, r5
   baad0:	9217      	str	r2, [sp, #92]	; 0x5c
   baad2:	5d5a      	ldrb	r2, [r3, r5]
   baad4:	2f00      	cmp	r7, #0
   baad6:	d037      	beq.n	bab48 <_strtod_l+0x250>
   baad8:	9005      	str	r0, [sp, #20]
   baada:	463d      	mov	r5, r7
   baadc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   baae0:	2b09      	cmp	r3, #9
   baae2:	d912      	bls.n	bab0a <_strtod_l+0x212>
   baae4:	2301      	movs	r3, #1
   baae6:	e7c2      	b.n	baa6e <_strtod_l+0x176>
   baae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baaea:	1c5a      	adds	r2, r3, #1
   baaec:	9217      	str	r2, [sp, #92]	; 0x5c
   baaee:	785a      	ldrb	r2, [r3, #1]
   baaf0:	3001      	adds	r0, #1
   baaf2:	2a30      	cmp	r2, #48	; 0x30
   baaf4:	d0f8      	beq.n	baae8 <_strtod_l+0x1f0>
   baaf6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   baafa:	2b08      	cmp	r3, #8
   baafc:	f200 84d9 	bhi.w	bb4b2 <_strtod_l+0xbba>
   bab00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bab02:	9005      	str	r0, [sp, #20]
   bab04:	2000      	movs	r0, #0
   bab06:	9308      	str	r3, [sp, #32]
   bab08:	4605      	mov	r5, r0
   bab0a:	3a30      	subs	r2, #48	; 0x30
   bab0c:	f100 0301 	add.w	r3, r0, #1
   bab10:	d014      	beq.n	bab3c <_strtod_l+0x244>
   bab12:	9905      	ldr	r1, [sp, #20]
   bab14:	4419      	add	r1, r3
   bab16:	9105      	str	r1, [sp, #20]
   bab18:	462b      	mov	r3, r5
   bab1a:	eb00 0e05 	add.w	lr, r0, r5
   bab1e:	210a      	movs	r1, #10
   bab20:	4573      	cmp	r3, lr
   bab22:	d113      	bne.n	bab4c <_strtod_l+0x254>
   bab24:	182b      	adds	r3, r5, r0
   bab26:	2b08      	cmp	r3, #8
   bab28:	f105 0501 	add.w	r5, r5, #1
   bab2c:	4405      	add	r5, r0
   bab2e:	dc1c      	bgt.n	bab6a <_strtod_l+0x272>
   bab30:	9907      	ldr	r1, [sp, #28]
   bab32:	230a      	movs	r3, #10
   bab34:	fb03 2301 	mla	r3, r3, r1, r2
   bab38:	9307      	str	r3, [sp, #28]
   bab3a:	2300      	movs	r3, #0
   bab3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bab3e:	1c51      	adds	r1, r2, #1
   bab40:	9117      	str	r1, [sp, #92]	; 0x5c
   bab42:	7852      	ldrb	r2, [r2, #1]
   bab44:	4618      	mov	r0, r3
   bab46:	e7c9      	b.n	baadc <_strtod_l+0x1e4>
   bab48:	4638      	mov	r0, r7
   bab4a:	e7d2      	b.n	baaf2 <_strtod_l+0x1fa>
   bab4c:	2b08      	cmp	r3, #8
   bab4e:	dc04      	bgt.n	bab5a <_strtod_l+0x262>
   bab50:	9e07      	ldr	r6, [sp, #28]
   bab52:	434e      	muls	r6, r1
   bab54:	9607      	str	r6, [sp, #28]
   bab56:	3301      	adds	r3, #1
   bab58:	e7e2      	b.n	bab20 <_strtod_l+0x228>
   bab5a:	f103 0c01 	add.w	ip, r3, #1
   bab5e:	f1bc 0f10 	cmp.w	ip, #16
   bab62:	bfd8      	it	le
   bab64:	fb01 f909 	mulle.w	r9, r1, r9
   bab68:	e7f5      	b.n	bab56 <_strtod_l+0x25e>
   bab6a:	2d10      	cmp	r5, #16
   bab6c:	bfdc      	itt	le
   bab6e:	230a      	movle	r3, #10
   bab70:	fb03 2909 	mlale	r9, r3, r9, r2
   bab74:	e7e1      	b.n	bab3a <_strtod_l+0x242>
   bab76:	2300      	movs	r3, #0
   bab78:	9305      	str	r3, [sp, #20]
   bab7a:	2301      	movs	r3, #1
   bab7c:	e77c      	b.n	baa78 <_strtod_l+0x180>
   bab7e:	f04f 0c00 	mov.w	ip, #0
   bab82:	f108 0202 	add.w	r2, r8, #2
   bab86:	9217      	str	r2, [sp, #92]	; 0x5c
   bab88:	f898 2002 	ldrb.w	r2, [r8, #2]
   bab8c:	e785      	b.n	baa9a <_strtod_l+0x1a2>
   bab8e:	f04f 0c01 	mov.w	ip, #1
   bab92:	e7f6      	b.n	bab82 <_strtod_l+0x28a>
   bab94:	000bd6e8 	.word	0x000bd6e8
   bab98:	000bd480 	.word	0x000bd480
   bab9c:	7ff00000 	.word	0x7ff00000
   baba0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   baba2:	1c51      	adds	r1, r2, #1
   baba4:	9117      	str	r1, [sp, #92]	; 0x5c
   baba6:	7852      	ldrb	r2, [r2, #1]
   baba8:	2a30      	cmp	r2, #48	; 0x30
   babaa:	d0f9      	beq.n	baba0 <_strtod_l+0x2a8>
   babac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   babb0:	2908      	cmp	r1, #8
   babb2:	f63f af79 	bhi.w	baaa8 <_strtod_l+0x1b0>
   babb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   babba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   babbc:	9206      	str	r2, [sp, #24]
   babbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   babc0:	1c51      	adds	r1, r2, #1
   babc2:	9117      	str	r1, [sp, #92]	; 0x5c
   babc4:	7852      	ldrb	r2, [r2, #1]
   babc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   babca:	2e09      	cmp	r6, #9
   babcc:	d937      	bls.n	bac3e <_strtod_l+0x346>
   babce:	9e06      	ldr	r6, [sp, #24]
   babd0:	1b89      	subs	r1, r1, r6
   babd2:	2908      	cmp	r1, #8
   babd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   babd8:	dc02      	bgt.n	babe0 <_strtod_l+0x2e8>
   babda:	4576      	cmp	r6, lr
   babdc:	bfa8      	it	ge
   babde:	4676      	movge	r6, lr
   babe0:	f1bc 0f00 	cmp.w	ip, #0
   babe4:	d000      	beq.n	babe8 <_strtod_l+0x2f0>
   babe6:	4276      	negs	r6, r6
   babe8:	2d00      	cmp	r5, #0
   babea:	d14d      	bne.n	bac88 <_strtod_l+0x390>
   babec:	9904      	ldr	r1, [sp, #16]
   babee:	4301      	orrs	r1, r0
   babf0:	f47f aec6 	bne.w	ba980 <_strtod_l+0x88>
   babf4:	2b00      	cmp	r3, #0
   babf6:	f47f aee1 	bne.w	ba9bc <_strtod_l+0xc4>
   babfa:	2a69      	cmp	r2, #105	; 0x69
   babfc:	d027      	beq.n	bac4e <_strtod_l+0x356>
   babfe:	dc24      	bgt.n	bac4a <_strtod_l+0x352>
   bac00:	2a49      	cmp	r2, #73	; 0x49
   bac02:	d024      	beq.n	bac4e <_strtod_l+0x356>
   bac04:	2a4e      	cmp	r2, #78	; 0x4e
   bac06:	f47f aed9 	bne.w	ba9bc <_strtod_l+0xc4>
   bac0a:	499f      	ldr	r1, [pc, #636]	; (bae88 <_strtod_l+0x590>)
   bac0c:	a817      	add	r0, sp, #92	; 0x5c
   bac0e:	f001 f88f 	bl	bbd30 <__match>
   bac12:	2800      	cmp	r0, #0
   bac14:	f43f aed2 	beq.w	ba9bc <_strtod_l+0xc4>
   bac18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bac1a:	781b      	ldrb	r3, [r3, #0]
   bac1c:	2b28      	cmp	r3, #40	; 0x28
   bac1e:	d12d      	bne.n	bac7c <_strtod_l+0x384>
   bac20:	499a      	ldr	r1, [pc, #616]	; (bae8c <_strtod_l+0x594>)
   bac22:	aa1a      	add	r2, sp, #104	; 0x68
   bac24:	a817      	add	r0, sp, #92	; 0x5c
   bac26:	f001 f897 	bl	bbd58 <__hexnan>
   bac2a:	2805      	cmp	r0, #5
   bac2c:	d126      	bne.n	bac7c <_strtod_l+0x384>
   bac2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bac30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bac34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bac38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bac3c:	e6a0      	b.n	ba980 <_strtod_l+0x88>
   bac3e:	210a      	movs	r1, #10
   bac40:	fb01 2e0e 	mla	lr, r1, lr, r2
   bac44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bac48:	e7b9      	b.n	babbe <_strtod_l+0x2c6>
   bac4a:	2a6e      	cmp	r2, #110	; 0x6e
   bac4c:	e7db      	b.n	bac06 <_strtod_l+0x30e>
   bac4e:	4990      	ldr	r1, [pc, #576]	; (bae90 <_strtod_l+0x598>)
   bac50:	a817      	add	r0, sp, #92	; 0x5c
   bac52:	f001 f86d 	bl	bbd30 <__match>
   bac56:	2800      	cmp	r0, #0
   bac58:	f43f aeb0 	beq.w	ba9bc <_strtod_l+0xc4>
   bac5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bac5e:	498d      	ldr	r1, [pc, #564]	; (bae94 <_strtod_l+0x59c>)
   bac60:	3b01      	subs	r3, #1
   bac62:	a817      	add	r0, sp, #92	; 0x5c
   bac64:	9317      	str	r3, [sp, #92]	; 0x5c
   bac66:	f001 f863 	bl	bbd30 <__match>
   bac6a:	b910      	cbnz	r0, bac72 <_strtod_l+0x37a>
   bac6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bac6e:	3301      	adds	r3, #1
   bac70:	9317      	str	r3, [sp, #92]	; 0x5c
   bac72:	f8df b230 	ldr.w	fp, [pc, #560]	; baea4 <_strtod_l+0x5ac>
   bac76:	f04f 0a00 	mov.w	sl, #0
   bac7a:	e681      	b.n	ba980 <_strtod_l+0x88>
   bac7c:	4886      	ldr	r0, [pc, #536]	; (bae98 <_strtod_l+0x5a0>)
   bac7e:	f001 fdef 	bl	bc860 <nan>
   bac82:	ec5b ab10 	vmov	sl, fp, d0
   bac86:	e67b      	b.n	ba980 <_strtod_l+0x88>
   bac88:	9b05      	ldr	r3, [sp, #20]
   bac8a:	9807      	ldr	r0, [sp, #28]
   bac8c:	1af3      	subs	r3, r6, r3
   bac8e:	2f00      	cmp	r7, #0
   bac90:	bf08      	it	eq
   bac92:	462f      	moveq	r7, r5
   bac94:	2d10      	cmp	r5, #16
   bac96:	9306      	str	r3, [sp, #24]
   bac98:	46a8      	mov	r8, r5
   bac9a:	bfa8      	it	ge
   bac9c:	f04f 0810 	movge.w	r8, #16
   baca0:	f7ff f9b2 	bl	ba008 <__aeabi_ui2d>
   baca4:	2d09      	cmp	r5, #9
   baca6:	4682      	mov	sl, r0
   baca8:	468b      	mov	fp, r1
   bacaa:	dd13      	ble.n	bacd4 <_strtod_l+0x3dc>
   bacac:	4b7b      	ldr	r3, [pc, #492]	; (bae9c <_strtod_l+0x5a4>)
   bacae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bacb2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bacb6:	f7ff fa21 	bl	ba0fc <__aeabi_dmul>
   bacba:	4682      	mov	sl, r0
   bacbc:	4648      	mov	r0, r9
   bacbe:	468b      	mov	fp, r1
   bacc0:	f7ff f9a2 	bl	ba008 <__aeabi_ui2d>
   bacc4:	4602      	mov	r2, r0
   bacc6:	460b      	mov	r3, r1
   bacc8:	4650      	mov	r0, sl
   bacca:	4659      	mov	r1, fp
   baccc:	f7ff f860 	bl	b9d90 <__adddf3>
   bacd0:	4682      	mov	sl, r0
   bacd2:	468b      	mov	fp, r1
   bacd4:	2d0f      	cmp	r5, #15
   bacd6:	dc38      	bgt.n	bad4a <_strtod_l+0x452>
   bacd8:	9b06      	ldr	r3, [sp, #24]
   bacda:	2b00      	cmp	r3, #0
   bacdc:	f43f ae50 	beq.w	ba980 <_strtod_l+0x88>
   bace0:	dd24      	ble.n	bad2c <_strtod_l+0x434>
   bace2:	2b16      	cmp	r3, #22
   bace4:	dc0b      	bgt.n	bacfe <_strtod_l+0x406>
   bace6:	496d      	ldr	r1, [pc, #436]	; (bae9c <_strtod_l+0x5a4>)
   bace8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bacec:	e9d1 0100 	ldrd	r0, r1, [r1]
   bacf0:	4652      	mov	r2, sl
   bacf2:	465b      	mov	r3, fp
   bacf4:	f7ff fa02 	bl	ba0fc <__aeabi_dmul>
   bacf8:	4682      	mov	sl, r0
   bacfa:	468b      	mov	fp, r1
   bacfc:	e640      	b.n	ba980 <_strtod_l+0x88>
   bacfe:	9a06      	ldr	r2, [sp, #24]
   bad00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bad04:	4293      	cmp	r3, r2
   bad06:	db20      	blt.n	bad4a <_strtod_l+0x452>
   bad08:	4c64      	ldr	r4, [pc, #400]	; (bae9c <_strtod_l+0x5a4>)
   bad0a:	f1c5 050f 	rsb	r5, r5, #15
   bad0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bad12:	4652      	mov	r2, sl
   bad14:	465b      	mov	r3, fp
   bad16:	e9d1 0100 	ldrd	r0, r1, [r1]
   bad1a:	f7ff f9ef 	bl	ba0fc <__aeabi_dmul>
   bad1e:	9b06      	ldr	r3, [sp, #24]
   bad20:	1b5d      	subs	r5, r3, r5
   bad22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bad26:	e9d4 2300 	ldrd	r2, r3, [r4]
   bad2a:	e7e3      	b.n	bacf4 <_strtod_l+0x3fc>
   bad2c:	9b06      	ldr	r3, [sp, #24]
   bad2e:	3316      	adds	r3, #22
   bad30:	db0b      	blt.n	bad4a <_strtod_l+0x452>
   bad32:	9b05      	ldr	r3, [sp, #20]
   bad34:	1b9e      	subs	r6, r3, r6
   bad36:	4b59      	ldr	r3, [pc, #356]	; (bae9c <_strtod_l+0x5a4>)
   bad38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bad3c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bad40:	4650      	mov	r0, sl
   bad42:	4659      	mov	r1, fp
   bad44:	f7ff fb04 	bl	ba350 <__aeabi_ddiv>
   bad48:	e7d6      	b.n	bacf8 <_strtod_l+0x400>
   bad4a:	9b06      	ldr	r3, [sp, #24]
   bad4c:	eba5 0808 	sub.w	r8, r5, r8
   bad50:	4498      	add	r8, r3
   bad52:	f1b8 0f00 	cmp.w	r8, #0
   bad56:	dd74      	ble.n	bae42 <_strtod_l+0x54a>
   bad58:	f018 030f 	ands.w	r3, r8, #15
   bad5c:	d00a      	beq.n	bad74 <_strtod_l+0x47c>
   bad5e:	494f      	ldr	r1, [pc, #316]	; (bae9c <_strtod_l+0x5a4>)
   bad60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bad64:	4652      	mov	r2, sl
   bad66:	465b      	mov	r3, fp
   bad68:	e9d1 0100 	ldrd	r0, r1, [r1]
   bad6c:	f7ff f9c6 	bl	ba0fc <__aeabi_dmul>
   bad70:	4682      	mov	sl, r0
   bad72:	468b      	mov	fp, r1
   bad74:	f038 080f 	bics.w	r8, r8, #15
   bad78:	d04f      	beq.n	bae1a <_strtod_l+0x522>
   bad7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bad7e:	dd22      	ble.n	badc6 <_strtod_l+0x4ce>
   bad80:	2500      	movs	r5, #0
   bad82:	462e      	mov	r6, r5
   bad84:	9507      	str	r5, [sp, #28]
   bad86:	9505      	str	r5, [sp, #20]
   bad88:	2322      	movs	r3, #34	; 0x22
   bad8a:	f8df b118 	ldr.w	fp, [pc, #280]	; baea4 <_strtod_l+0x5ac>
   bad8e:	6023      	str	r3, [r4, #0]
   bad90:	f04f 0a00 	mov.w	sl, #0
   bad94:	9b07      	ldr	r3, [sp, #28]
   bad96:	2b00      	cmp	r3, #0
   bad98:	f43f adf2 	beq.w	ba980 <_strtod_l+0x88>
   bad9c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bad9e:	4620      	mov	r0, r4
   bada0:	f001 f8cc 	bl	bbf3c <_Bfree>
   bada4:	9905      	ldr	r1, [sp, #20]
   bada6:	4620      	mov	r0, r4
   bada8:	f001 f8c8 	bl	bbf3c <_Bfree>
   badac:	4631      	mov	r1, r6
   badae:	4620      	mov	r0, r4
   badb0:	f001 f8c4 	bl	bbf3c <_Bfree>
   badb4:	9907      	ldr	r1, [sp, #28]
   badb6:	4620      	mov	r0, r4
   badb8:	f001 f8c0 	bl	bbf3c <_Bfree>
   badbc:	4629      	mov	r1, r5
   badbe:	4620      	mov	r0, r4
   badc0:	f001 f8bc 	bl	bbf3c <_Bfree>
   badc4:	e5dc      	b.n	ba980 <_strtod_l+0x88>
   badc6:	4b36      	ldr	r3, [pc, #216]	; (baea0 <_strtod_l+0x5a8>)
   badc8:	9304      	str	r3, [sp, #16]
   badca:	2300      	movs	r3, #0
   badcc:	ea4f 1828 	mov.w	r8, r8, asr #4
   badd0:	4650      	mov	r0, sl
   badd2:	4659      	mov	r1, fp
   badd4:	4699      	mov	r9, r3
   badd6:	f1b8 0f01 	cmp.w	r8, #1
   badda:	dc21      	bgt.n	bae20 <_strtod_l+0x528>
   baddc:	b10b      	cbz	r3, bade2 <_strtod_l+0x4ea>
   badde:	4682      	mov	sl, r0
   bade0:	468b      	mov	fp, r1
   bade2:	4b2f      	ldr	r3, [pc, #188]	; (baea0 <_strtod_l+0x5a8>)
   bade4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bade8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   badec:	4652      	mov	r2, sl
   badee:	465b      	mov	r3, fp
   badf0:	e9d9 0100 	ldrd	r0, r1, [r9]
   badf4:	f7ff f982 	bl	ba0fc <__aeabi_dmul>
   badf8:	4b2a      	ldr	r3, [pc, #168]	; (baea4 <_strtod_l+0x5ac>)
   badfa:	460a      	mov	r2, r1
   badfc:	400b      	ands	r3, r1
   badfe:	492a      	ldr	r1, [pc, #168]	; (baea8 <_strtod_l+0x5b0>)
   bae00:	428b      	cmp	r3, r1
   bae02:	4682      	mov	sl, r0
   bae04:	d8bc      	bhi.n	bad80 <_strtod_l+0x488>
   bae06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bae0a:	428b      	cmp	r3, r1
   bae0c:	bf86      	itte	hi
   bae0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; baeac <_strtod_l+0x5b4>
   bae12:	f04f 3aff 	movhi.w	sl, #4294967295
   bae16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bae1a:	2300      	movs	r3, #0
   bae1c:	9304      	str	r3, [sp, #16]
   bae1e:	e084      	b.n	baf2a <_strtod_l+0x632>
   bae20:	f018 0f01 	tst.w	r8, #1
   bae24:	d005      	beq.n	bae32 <_strtod_l+0x53a>
   bae26:	9b04      	ldr	r3, [sp, #16]
   bae28:	e9d3 2300 	ldrd	r2, r3, [r3]
   bae2c:	f7ff f966 	bl	ba0fc <__aeabi_dmul>
   bae30:	2301      	movs	r3, #1
   bae32:	9a04      	ldr	r2, [sp, #16]
   bae34:	3208      	adds	r2, #8
   bae36:	f109 0901 	add.w	r9, r9, #1
   bae3a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bae3e:	9204      	str	r2, [sp, #16]
   bae40:	e7c9      	b.n	badd6 <_strtod_l+0x4de>
   bae42:	d0ea      	beq.n	bae1a <_strtod_l+0x522>
   bae44:	f1c8 0800 	rsb	r8, r8, #0
   bae48:	f018 020f 	ands.w	r2, r8, #15
   bae4c:	d00a      	beq.n	bae64 <_strtod_l+0x56c>
   bae4e:	4b13      	ldr	r3, [pc, #76]	; (bae9c <_strtod_l+0x5a4>)
   bae50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bae54:	4650      	mov	r0, sl
   bae56:	4659      	mov	r1, fp
   bae58:	e9d3 2300 	ldrd	r2, r3, [r3]
   bae5c:	f7ff fa78 	bl	ba350 <__aeabi_ddiv>
   bae60:	4682      	mov	sl, r0
   bae62:	468b      	mov	fp, r1
   bae64:	ea5f 1828 	movs.w	r8, r8, asr #4
   bae68:	d0d7      	beq.n	bae1a <_strtod_l+0x522>
   bae6a:	f1b8 0f1f 	cmp.w	r8, #31
   bae6e:	dd1f      	ble.n	baeb0 <_strtod_l+0x5b8>
   bae70:	2500      	movs	r5, #0
   bae72:	462e      	mov	r6, r5
   bae74:	9507      	str	r5, [sp, #28]
   bae76:	9505      	str	r5, [sp, #20]
   bae78:	2322      	movs	r3, #34	; 0x22
   bae7a:	f04f 0a00 	mov.w	sl, #0
   bae7e:	f04f 0b00 	mov.w	fp, #0
   bae82:	6023      	str	r3, [r4, #0]
   bae84:	e786      	b.n	bad94 <_strtod_l+0x49c>
   bae86:	bf00      	nop
   bae88:	000bd47a 	.word	0x000bd47a
   bae8c:	000bd494 	.word	0x000bd494
   bae90:	000bd471 	.word	0x000bd471
   bae94:	000bd474 	.word	0x000bd474
   bae98:	000bc97c 	.word	0x000bc97c
   bae9c:	000bd7a8 	.word	0x000bd7a8
   baea0:	000bd780 	.word	0x000bd780
   baea4:	7ff00000 	.word	0x7ff00000
   baea8:	7ca00000 	.word	0x7ca00000
   baeac:	7fefffff 	.word	0x7fefffff
   baeb0:	f018 0310 	ands.w	r3, r8, #16
   baeb4:	bf18      	it	ne
   baeb6:	236a      	movne	r3, #106	; 0x6a
   baeb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bb268 <_strtod_l+0x970>
   baebc:	9304      	str	r3, [sp, #16]
   baebe:	4650      	mov	r0, sl
   baec0:	4659      	mov	r1, fp
   baec2:	2300      	movs	r3, #0
   baec4:	f018 0f01 	tst.w	r8, #1
   baec8:	d004      	beq.n	baed4 <_strtod_l+0x5dc>
   baeca:	e9d9 2300 	ldrd	r2, r3, [r9]
   baece:	f7ff f915 	bl	ba0fc <__aeabi_dmul>
   baed2:	2301      	movs	r3, #1
   baed4:	ea5f 0868 	movs.w	r8, r8, asr #1
   baed8:	f109 0908 	add.w	r9, r9, #8
   baedc:	d1f2      	bne.n	baec4 <_strtod_l+0x5cc>
   baede:	b10b      	cbz	r3, baee4 <_strtod_l+0x5ec>
   baee0:	4682      	mov	sl, r0
   baee2:	468b      	mov	fp, r1
   baee4:	9b04      	ldr	r3, [sp, #16]
   baee6:	b1c3      	cbz	r3, baf1a <_strtod_l+0x622>
   baee8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   baeec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   baef0:	2b00      	cmp	r3, #0
   baef2:	4659      	mov	r1, fp
   baef4:	dd11      	ble.n	baf1a <_strtod_l+0x622>
   baef6:	2b1f      	cmp	r3, #31
   baef8:	f340 8124 	ble.w	bb144 <_strtod_l+0x84c>
   baefc:	2b34      	cmp	r3, #52	; 0x34
   baefe:	bfde      	ittt	le
   baf00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   baf04:	f04f 33ff 	movle.w	r3, #4294967295
   baf08:	fa03 f202 	lslle.w	r2, r3, r2
   baf0c:	f04f 0a00 	mov.w	sl, #0
   baf10:	bfcc      	ite	gt
   baf12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   baf16:	ea02 0b01 	andle.w	fp, r2, r1
   baf1a:	2200      	movs	r2, #0
   baf1c:	2300      	movs	r3, #0
   baf1e:	4650      	mov	r0, sl
   baf20:	4659      	mov	r1, fp
   baf22:	f7ff fb53 	bl	ba5cc <__aeabi_dcmpeq>
   baf26:	2800      	cmp	r0, #0
   baf28:	d1a2      	bne.n	bae70 <_strtod_l+0x578>
   baf2a:	9b07      	ldr	r3, [sp, #28]
   baf2c:	9300      	str	r3, [sp, #0]
   baf2e:	9908      	ldr	r1, [sp, #32]
   baf30:	462b      	mov	r3, r5
   baf32:	463a      	mov	r2, r7
   baf34:	4620      	mov	r0, r4
   baf36:	f001 f869 	bl	bc00c <__s2b>
   baf3a:	9007      	str	r0, [sp, #28]
   baf3c:	2800      	cmp	r0, #0
   baf3e:	f43f af1f 	beq.w	bad80 <_strtod_l+0x488>
   baf42:	9b05      	ldr	r3, [sp, #20]
   baf44:	1b9e      	subs	r6, r3, r6
   baf46:	9b06      	ldr	r3, [sp, #24]
   baf48:	2b00      	cmp	r3, #0
   baf4a:	bfb4      	ite	lt
   baf4c:	4633      	movlt	r3, r6
   baf4e:	2300      	movge	r3, #0
   baf50:	930c      	str	r3, [sp, #48]	; 0x30
   baf52:	9b06      	ldr	r3, [sp, #24]
   baf54:	2500      	movs	r5, #0
   baf56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   baf5a:	9312      	str	r3, [sp, #72]	; 0x48
   baf5c:	462e      	mov	r6, r5
   baf5e:	9b07      	ldr	r3, [sp, #28]
   baf60:	4620      	mov	r0, r4
   baf62:	6859      	ldr	r1, [r3, #4]
   baf64:	f000 ffaa 	bl	bbebc <_Balloc>
   baf68:	9005      	str	r0, [sp, #20]
   baf6a:	2800      	cmp	r0, #0
   baf6c:	f43f af0c 	beq.w	bad88 <_strtod_l+0x490>
   baf70:	9b07      	ldr	r3, [sp, #28]
   baf72:	691a      	ldr	r2, [r3, #16]
   baf74:	3202      	adds	r2, #2
   baf76:	f103 010c 	add.w	r1, r3, #12
   baf7a:	0092      	lsls	r2, r2, #2
   baf7c:	300c      	adds	r0, #12
   baf7e:	f7ff fbc6 	bl	ba70e <memcpy>
   baf82:	ec4b ab10 	vmov	d0, sl, fp
   baf86:	aa1a      	add	r2, sp, #104	; 0x68
   baf88:	a919      	add	r1, sp, #100	; 0x64
   baf8a:	4620      	mov	r0, r4
   baf8c:	f001 fb84 	bl	bc698 <__d2b>
   baf90:	ec4b ab18 	vmov	d8, sl, fp
   baf94:	9018      	str	r0, [sp, #96]	; 0x60
   baf96:	2800      	cmp	r0, #0
   baf98:	f43f aef6 	beq.w	bad88 <_strtod_l+0x490>
   baf9c:	2101      	movs	r1, #1
   baf9e:	4620      	mov	r0, r4
   bafa0:	f001 f8ce 	bl	bc140 <__i2b>
   bafa4:	4606      	mov	r6, r0
   bafa6:	2800      	cmp	r0, #0
   bafa8:	f43f aeee 	beq.w	bad88 <_strtod_l+0x490>
   bafac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bafae:	9904      	ldr	r1, [sp, #16]
   bafb0:	2b00      	cmp	r3, #0
   bafb2:	bfab      	itete	ge
   bafb4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bafb6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bafb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bafba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bafbe:	bfac      	ite	ge
   bafc0:	eb03 0902 	addge.w	r9, r3, r2
   bafc4:	1ad7      	sublt	r7, r2, r3
   bafc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bafc8:	eba3 0801 	sub.w	r8, r3, r1
   bafcc:	4490      	add	r8, r2
   bafce:	4ba1      	ldr	r3, [pc, #644]	; (bb254 <_strtod_l+0x95c>)
   bafd0:	f108 38ff 	add.w	r8, r8, #4294967295
   bafd4:	4598      	cmp	r8, r3
   bafd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bafda:	f280 80c7 	bge.w	bb16c <_strtod_l+0x874>
   bafde:	eba3 0308 	sub.w	r3, r3, r8
   bafe2:	2b1f      	cmp	r3, #31
   bafe4:	eba2 0203 	sub.w	r2, r2, r3
   bafe8:	f04f 0101 	mov.w	r1, #1
   bafec:	f300 80b1 	bgt.w	bb152 <_strtod_l+0x85a>
   baff0:	fa01 f303 	lsl.w	r3, r1, r3
   baff4:	930d      	str	r3, [sp, #52]	; 0x34
   baff6:	2300      	movs	r3, #0
   baff8:	9308      	str	r3, [sp, #32]
   baffa:	eb09 0802 	add.w	r8, r9, r2
   baffe:	9b04      	ldr	r3, [sp, #16]
   bb000:	45c1      	cmp	r9, r8
   bb002:	4417      	add	r7, r2
   bb004:	441f      	add	r7, r3
   bb006:	464b      	mov	r3, r9
   bb008:	bfa8      	it	ge
   bb00a:	4643      	movge	r3, r8
   bb00c:	42bb      	cmp	r3, r7
   bb00e:	bfa8      	it	ge
   bb010:	463b      	movge	r3, r7
   bb012:	2b00      	cmp	r3, #0
   bb014:	bfc2      	ittt	gt
   bb016:	eba8 0803 	subgt.w	r8, r8, r3
   bb01a:	1aff      	subgt	r7, r7, r3
   bb01c:	eba9 0903 	subgt.w	r9, r9, r3
   bb020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb022:	2b00      	cmp	r3, #0
   bb024:	dd17      	ble.n	bb056 <_strtod_l+0x75e>
   bb026:	4631      	mov	r1, r6
   bb028:	461a      	mov	r2, r3
   bb02a:	4620      	mov	r0, r4
   bb02c:	f001 f948 	bl	bc2c0 <__pow5mult>
   bb030:	4606      	mov	r6, r0
   bb032:	2800      	cmp	r0, #0
   bb034:	f43f aea8 	beq.w	bad88 <_strtod_l+0x490>
   bb038:	4601      	mov	r1, r0
   bb03a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb03c:	4620      	mov	r0, r4
   bb03e:	f001 f895 	bl	bc16c <__multiply>
   bb042:	900b      	str	r0, [sp, #44]	; 0x2c
   bb044:	2800      	cmp	r0, #0
   bb046:	f43f ae9f 	beq.w	bad88 <_strtod_l+0x490>
   bb04a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb04c:	4620      	mov	r0, r4
   bb04e:	f000 ff75 	bl	bbf3c <_Bfree>
   bb052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb054:	9318      	str	r3, [sp, #96]	; 0x60
   bb056:	f1b8 0f00 	cmp.w	r8, #0
   bb05a:	f300 808c 	bgt.w	bb176 <_strtod_l+0x87e>
   bb05e:	9b06      	ldr	r3, [sp, #24]
   bb060:	2b00      	cmp	r3, #0
   bb062:	dd08      	ble.n	bb076 <_strtod_l+0x77e>
   bb064:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb066:	9905      	ldr	r1, [sp, #20]
   bb068:	4620      	mov	r0, r4
   bb06a:	f001 f929 	bl	bc2c0 <__pow5mult>
   bb06e:	9005      	str	r0, [sp, #20]
   bb070:	2800      	cmp	r0, #0
   bb072:	f43f ae89 	beq.w	bad88 <_strtod_l+0x490>
   bb076:	2f00      	cmp	r7, #0
   bb078:	dd08      	ble.n	bb08c <_strtod_l+0x794>
   bb07a:	9905      	ldr	r1, [sp, #20]
   bb07c:	463a      	mov	r2, r7
   bb07e:	4620      	mov	r0, r4
   bb080:	f001 f978 	bl	bc374 <__lshift>
   bb084:	9005      	str	r0, [sp, #20]
   bb086:	2800      	cmp	r0, #0
   bb088:	f43f ae7e 	beq.w	bad88 <_strtod_l+0x490>
   bb08c:	f1b9 0f00 	cmp.w	r9, #0
   bb090:	dd08      	ble.n	bb0a4 <_strtod_l+0x7ac>
   bb092:	4631      	mov	r1, r6
   bb094:	464a      	mov	r2, r9
   bb096:	4620      	mov	r0, r4
   bb098:	f001 f96c 	bl	bc374 <__lshift>
   bb09c:	4606      	mov	r6, r0
   bb09e:	2800      	cmp	r0, #0
   bb0a0:	f43f ae72 	beq.w	bad88 <_strtod_l+0x490>
   bb0a4:	9a05      	ldr	r2, [sp, #20]
   bb0a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb0a8:	4620      	mov	r0, r4
   bb0aa:	f001 f9ef 	bl	bc48c <__mdiff>
   bb0ae:	4605      	mov	r5, r0
   bb0b0:	2800      	cmp	r0, #0
   bb0b2:	f43f ae69 	beq.w	bad88 <_strtod_l+0x490>
   bb0b6:	68c3      	ldr	r3, [r0, #12]
   bb0b8:	930b      	str	r3, [sp, #44]	; 0x2c
   bb0ba:	2300      	movs	r3, #0
   bb0bc:	60c3      	str	r3, [r0, #12]
   bb0be:	4631      	mov	r1, r6
   bb0c0:	f001 f9c8 	bl	bc454 <__mcmp>
   bb0c4:	2800      	cmp	r0, #0
   bb0c6:	da60      	bge.n	bb18a <_strtod_l+0x892>
   bb0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb0ca:	ea53 030a 	orrs.w	r3, r3, sl
   bb0ce:	f040 8082 	bne.w	bb1d6 <_strtod_l+0x8de>
   bb0d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb0d6:	2b00      	cmp	r3, #0
   bb0d8:	d17d      	bne.n	bb1d6 <_strtod_l+0x8de>
   bb0da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb0de:	0d1b      	lsrs	r3, r3, #20
   bb0e0:	051b      	lsls	r3, r3, #20
   bb0e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bb0e6:	d976      	bls.n	bb1d6 <_strtod_l+0x8de>
   bb0e8:	696b      	ldr	r3, [r5, #20]
   bb0ea:	b913      	cbnz	r3, bb0f2 <_strtod_l+0x7fa>
   bb0ec:	692b      	ldr	r3, [r5, #16]
   bb0ee:	2b01      	cmp	r3, #1
   bb0f0:	dd71      	ble.n	bb1d6 <_strtod_l+0x8de>
   bb0f2:	4629      	mov	r1, r5
   bb0f4:	2201      	movs	r2, #1
   bb0f6:	4620      	mov	r0, r4
   bb0f8:	f001 f93c 	bl	bc374 <__lshift>
   bb0fc:	4631      	mov	r1, r6
   bb0fe:	4605      	mov	r5, r0
   bb100:	f001 f9a8 	bl	bc454 <__mcmp>
   bb104:	2800      	cmp	r0, #0
   bb106:	dd66      	ble.n	bb1d6 <_strtod_l+0x8de>
   bb108:	9904      	ldr	r1, [sp, #16]
   bb10a:	4a53      	ldr	r2, [pc, #332]	; (bb258 <_strtod_l+0x960>)
   bb10c:	465b      	mov	r3, fp
   bb10e:	2900      	cmp	r1, #0
   bb110:	f000 8081 	beq.w	bb216 <_strtod_l+0x91e>
   bb114:	ea02 010b 	and.w	r1, r2, fp
   bb118:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bb11c:	dc7b      	bgt.n	bb216 <_strtod_l+0x91e>
   bb11e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bb122:	f77f aea9 	ble.w	bae78 <_strtod_l+0x580>
   bb126:	4b4d      	ldr	r3, [pc, #308]	; (bb25c <_strtod_l+0x964>)
   bb128:	4650      	mov	r0, sl
   bb12a:	4659      	mov	r1, fp
   bb12c:	2200      	movs	r2, #0
   bb12e:	f7fe ffe5 	bl	ba0fc <__aeabi_dmul>
   bb132:	460b      	mov	r3, r1
   bb134:	4303      	orrs	r3, r0
   bb136:	bf08      	it	eq
   bb138:	2322      	moveq	r3, #34	; 0x22
   bb13a:	4682      	mov	sl, r0
   bb13c:	468b      	mov	fp, r1
   bb13e:	bf08      	it	eq
   bb140:	6023      	streq	r3, [r4, #0]
   bb142:	e62b      	b.n	bad9c <_strtod_l+0x4a4>
   bb144:	f04f 32ff 	mov.w	r2, #4294967295
   bb148:	fa02 f303 	lsl.w	r3, r2, r3
   bb14c:	ea03 0a0a 	and.w	sl, r3, sl
   bb150:	e6e3      	b.n	baf1a <_strtod_l+0x622>
   bb152:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bb156:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bb15a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bb15e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bb162:	fa01 f308 	lsl.w	r3, r1, r8
   bb166:	9308      	str	r3, [sp, #32]
   bb168:	910d      	str	r1, [sp, #52]	; 0x34
   bb16a:	e746      	b.n	baffa <_strtod_l+0x702>
   bb16c:	2300      	movs	r3, #0
   bb16e:	9308      	str	r3, [sp, #32]
   bb170:	2301      	movs	r3, #1
   bb172:	930d      	str	r3, [sp, #52]	; 0x34
   bb174:	e741      	b.n	baffa <_strtod_l+0x702>
   bb176:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb178:	4642      	mov	r2, r8
   bb17a:	4620      	mov	r0, r4
   bb17c:	f001 f8fa 	bl	bc374 <__lshift>
   bb180:	9018      	str	r0, [sp, #96]	; 0x60
   bb182:	2800      	cmp	r0, #0
   bb184:	f47f af6b 	bne.w	bb05e <_strtod_l+0x766>
   bb188:	e5fe      	b.n	bad88 <_strtod_l+0x490>
   bb18a:	465f      	mov	r7, fp
   bb18c:	d16e      	bne.n	bb26c <_strtod_l+0x974>
   bb18e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb190:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb194:	b342      	cbz	r2, bb1e8 <_strtod_l+0x8f0>
   bb196:	4a32      	ldr	r2, [pc, #200]	; (bb260 <_strtod_l+0x968>)
   bb198:	4293      	cmp	r3, r2
   bb19a:	d128      	bne.n	bb1ee <_strtod_l+0x8f6>
   bb19c:	9b04      	ldr	r3, [sp, #16]
   bb19e:	4651      	mov	r1, sl
   bb1a0:	b1eb      	cbz	r3, bb1de <_strtod_l+0x8e6>
   bb1a2:	4b2d      	ldr	r3, [pc, #180]	; (bb258 <_strtod_l+0x960>)
   bb1a4:	403b      	ands	r3, r7
   bb1a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb1aa:	f04f 32ff 	mov.w	r2, #4294967295
   bb1ae:	d819      	bhi.n	bb1e4 <_strtod_l+0x8ec>
   bb1b0:	0d1b      	lsrs	r3, r3, #20
   bb1b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb1b6:	fa02 f303 	lsl.w	r3, r2, r3
   bb1ba:	4299      	cmp	r1, r3
   bb1bc:	d117      	bne.n	bb1ee <_strtod_l+0x8f6>
   bb1be:	4b29      	ldr	r3, [pc, #164]	; (bb264 <_strtod_l+0x96c>)
   bb1c0:	429f      	cmp	r7, r3
   bb1c2:	d102      	bne.n	bb1ca <_strtod_l+0x8d2>
   bb1c4:	3101      	adds	r1, #1
   bb1c6:	f43f addf 	beq.w	bad88 <_strtod_l+0x490>
   bb1ca:	4b23      	ldr	r3, [pc, #140]	; (bb258 <_strtod_l+0x960>)
   bb1cc:	403b      	ands	r3, r7
   bb1ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bb1d2:	f04f 0a00 	mov.w	sl, #0
   bb1d6:	9b04      	ldr	r3, [sp, #16]
   bb1d8:	2b00      	cmp	r3, #0
   bb1da:	d1a4      	bne.n	bb126 <_strtod_l+0x82e>
   bb1dc:	e5de      	b.n	bad9c <_strtod_l+0x4a4>
   bb1de:	f04f 33ff 	mov.w	r3, #4294967295
   bb1e2:	e7ea      	b.n	bb1ba <_strtod_l+0x8c2>
   bb1e4:	4613      	mov	r3, r2
   bb1e6:	e7e8      	b.n	bb1ba <_strtod_l+0x8c2>
   bb1e8:	ea53 030a 	orrs.w	r3, r3, sl
   bb1ec:	d08c      	beq.n	bb108 <_strtod_l+0x810>
   bb1ee:	9b08      	ldr	r3, [sp, #32]
   bb1f0:	b1db      	cbz	r3, bb22a <_strtod_l+0x932>
   bb1f2:	423b      	tst	r3, r7
   bb1f4:	d0ef      	beq.n	bb1d6 <_strtod_l+0x8de>
   bb1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb1f8:	9a04      	ldr	r2, [sp, #16]
   bb1fa:	4650      	mov	r0, sl
   bb1fc:	4659      	mov	r1, fp
   bb1fe:	b1c3      	cbz	r3, bb232 <_strtod_l+0x93a>
   bb200:	f7ff fb5e 	bl	ba8c0 <sulp>
   bb204:	4602      	mov	r2, r0
   bb206:	460b      	mov	r3, r1
   bb208:	ec51 0b18 	vmov	r0, r1, d8
   bb20c:	f7fe fdc0 	bl	b9d90 <__adddf3>
   bb210:	4682      	mov	sl, r0
   bb212:	468b      	mov	fp, r1
   bb214:	e7df      	b.n	bb1d6 <_strtod_l+0x8de>
   bb216:	4013      	ands	r3, r2
   bb218:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bb21c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bb220:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bb224:	f04f 3aff 	mov.w	sl, #4294967295
   bb228:	e7d5      	b.n	bb1d6 <_strtod_l+0x8de>
   bb22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb22c:	ea13 0f0a 	tst.w	r3, sl
   bb230:	e7e0      	b.n	bb1f4 <_strtod_l+0x8fc>
   bb232:	f7ff fb45 	bl	ba8c0 <sulp>
   bb236:	4602      	mov	r2, r0
   bb238:	460b      	mov	r3, r1
   bb23a:	ec51 0b18 	vmov	r0, r1, d8
   bb23e:	f7fe fda5 	bl	b9d8c <__aeabi_dsub>
   bb242:	2200      	movs	r2, #0
   bb244:	2300      	movs	r3, #0
   bb246:	4682      	mov	sl, r0
   bb248:	468b      	mov	fp, r1
   bb24a:	f7ff f9bf 	bl	ba5cc <__aeabi_dcmpeq>
   bb24e:	2800      	cmp	r0, #0
   bb250:	d0c1      	beq.n	bb1d6 <_strtod_l+0x8de>
   bb252:	e611      	b.n	bae78 <_strtod_l+0x580>
   bb254:	fffffc02 	.word	0xfffffc02
   bb258:	7ff00000 	.word	0x7ff00000
   bb25c:	39500000 	.word	0x39500000
   bb260:	000fffff 	.word	0x000fffff
   bb264:	7fefffff 	.word	0x7fefffff
   bb268:	000bd4a8 	.word	0x000bd4a8
   bb26c:	4631      	mov	r1, r6
   bb26e:	4628      	mov	r0, r5
   bb270:	f001 fa6e 	bl	bc750 <__ratio>
   bb274:	ec59 8b10 	vmov	r8, r9, d0
   bb278:	ee10 0a10 	vmov	r0, s0
   bb27c:	2200      	movs	r2, #0
   bb27e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb282:	4649      	mov	r1, r9
   bb284:	f7ff f9b6 	bl	ba5f4 <__aeabi_dcmple>
   bb288:	2800      	cmp	r0, #0
   bb28a:	d07a      	beq.n	bb382 <_strtod_l+0xa8a>
   bb28c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb28e:	2b00      	cmp	r3, #0
   bb290:	d04a      	beq.n	bb328 <_strtod_l+0xa30>
   bb292:	4b95      	ldr	r3, [pc, #596]	; (bb4e8 <_strtod_l+0xbf0>)
   bb294:	2200      	movs	r2, #0
   bb296:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb29a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb4e8 <_strtod_l+0xbf0>
   bb29e:	f04f 0800 	mov.w	r8, #0
   bb2a2:	4b92      	ldr	r3, [pc, #584]	; (bb4ec <_strtod_l+0xbf4>)
   bb2a4:	403b      	ands	r3, r7
   bb2a6:	930d      	str	r3, [sp, #52]	; 0x34
   bb2a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb2aa:	4b91      	ldr	r3, [pc, #580]	; (bb4f0 <_strtod_l+0xbf8>)
   bb2ac:	429a      	cmp	r2, r3
   bb2ae:	f040 80b0 	bne.w	bb412 <_strtod_l+0xb1a>
   bb2b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb2b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bb2ba:	ec4b ab10 	vmov	d0, sl, fp
   bb2be:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb2c2:	f001 f96d 	bl	bc5a0 <__ulp>
   bb2c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb2ca:	ec53 2b10 	vmov	r2, r3, d0
   bb2ce:	f7fe ff15 	bl	ba0fc <__aeabi_dmul>
   bb2d2:	4652      	mov	r2, sl
   bb2d4:	465b      	mov	r3, fp
   bb2d6:	f7fe fd5b 	bl	b9d90 <__adddf3>
   bb2da:	460b      	mov	r3, r1
   bb2dc:	4983      	ldr	r1, [pc, #524]	; (bb4ec <_strtod_l+0xbf4>)
   bb2de:	4a85      	ldr	r2, [pc, #532]	; (bb4f4 <_strtod_l+0xbfc>)
   bb2e0:	4019      	ands	r1, r3
   bb2e2:	4291      	cmp	r1, r2
   bb2e4:	4682      	mov	sl, r0
   bb2e6:	d960      	bls.n	bb3aa <_strtod_l+0xab2>
   bb2e8:	ee18 3a90 	vmov	r3, s17
   bb2ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bb2f0:	4293      	cmp	r3, r2
   bb2f2:	d104      	bne.n	bb2fe <_strtod_l+0xa06>
   bb2f4:	ee18 3a10 	vmov	r3, s16
   bb2f8:	3301      	adds	r3, #1
   bb2fa:	f43f ad45 	beq.w	bad88 <_strtod_l+0x490>
   bb2fe:	f8df b200 	ldr.w	fp, [pc, #512]	; bb500 <_strtod_l+0xc08>
   bb302:	f04f 3aff 	mov.w	sl, #4294967295
   bb306:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb308:	4620      	mov	r0, r4
   bb30a:	f000 fe17 	bl	bbf3c <_Bfree>
   bb30e:	9905      	ldr	r1, [sp, #20]
   bb310:	4620      	mov	r0, r4
   bb312:	f000 fe13 	bl	bbf3c <_Bfree>
   bb316:	4631      	mov	r1, r6
   bb318:	4620      	mov	r0, r4
   bb31a:	f000 fe0f 	bl	bbf3c <_Bfree>
   bb31e:	4629      	mov	r1, r5
   bb320:	4620      	mov	r0, r4
   bb322:	f000 fe0b 	bl	bbf3c <_Bfree>
   bb326:	e61a      	b.n	baf5e <_strtod_l+0x666>
   bb328:	f1ba 0f00 	cmp.w	sl, #0
   bb32c:	d11b      	bne.n	bb366 <_strtod_l+0xa6e>
   bb32e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb332:	b9f3      	cbnz	r3, bb372 <_strtod_l+0xa7a>
   bb334:	4b6c      	ldr	r3, [pc, #432]	; (bb4e8 <_strtod_l+0xbf0>)
   bb336:	2200      	movs	r2, #0
   bb338:	4640      	mov	r0, r8
   bb33a:	4649      	mov	r1, r9
   bb33c:	f7ff f950 	bl	ba5e0 <__aeabi_dcmplt>
   bb340:	b9d0      	cbnz	r0, bb378 <_strtod_l+0xa80>
   bb342:	4640      	mov	r0, r8
   bb344:	4649      	mov	r1, r9
   bb346:	4b6c      	ldr	r3, [pc, #432]	; (bb4f8 <_strtod_l+0xc00>)
   bb348:	2200      	movs	r2, #0
   bb34a:	f7fe fed7 	bl	ba0fc <__aeabi_dmul>
   bb34e:	4680      	mov	r8, r0
   bb350:	4689      	mov	r9, r1
   bb352:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bb356:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bb35a:	9315      	str	r3, [sp, #84]	; 0x54
   bb35c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bb360:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb364:	e79d      	b.n	bb2a2 <_strtod_l+0x9aa>
   bb366:	f1ba 0f01 	cmp.w	sl, #1
   bb36a:	d102      	bne.n	bb372 <_strtod_l+0xa7a>
   bb36c:	2f00      	cmp	r7, #0
   bb36e:	f43f ad83 	beq.w	bae78 <_strtod_l+0x580>
   bb372:	4b62      	ldr	r3, [pc, #392]	; (bb4fc <_strtod_l+0xc04>)
   bb374:	2200      	movs	r2, #0
   bb376:	e78e      	b.n	bb296 <_strtod_l+0x99e>
   bb378:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb4f8 <_strtod_l+0xc00>
   bb37c:	f04f 0800 	mov.w	r8, #0
   bb380:	e7e7      	b.n	bb352 <_strtod_l+0xa5a>
   bb382:	4b5d      	ldr	r3, [pc, #372]	; (bb4f8 <_strtod_l+0xc00>)
   bb384:	4640      	mov	r0, r8
   bb386:	4649      	mov	r1, r9
   bb388:	2200      	movs	r2, #0
   bb38a:	f7fe feb7 	bl	ba0fc <__aeabi_dmul>
   bb38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb390:	4680      	mov	r8, r0
   bb392:	4689      	mov	r9, r1
   bb394:	b933      	cbnz	r3, bb3a4 <_strtod_l+0xaac>
   bb396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb39a:	900e      	str	r0, [sp, #56]	; 0x38
   bb39c:	930f      	str	r3, [sp, #60]	; 0x3c
   bb39e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bb3a2:	e7dd      	b.n	bb360 <_strtod_l+0xa68>
   bb3a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bb3a8:	e7f9      	b.n	bb39e <_strtod_l+0xaa6>
   bb3aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bb3ae:	9b04      	ldr	r3, [sp, #16]
   bb3b0:	2b00      	cmp	r3, #0
   bb3b2:	d1a8      	bne.n	bb306 <_strtod_l+0xa0e>
   bb3b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb3b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb3ba:	0d1b      	lsrs	r3, r3, #20
   bb3bc:	051b      	lsls	r3, r3, #20
   bb3be:	429a      	cmp	r2, r3
   bb3c0:	d1a1      	bne.n	bb306 <_strtod_l+0xa0e>
   bb3c2:	4640      	mov	r0, r8
   bb3c4:	4649      	mov	r1, r9
   bb3c6:	f001 fa61 	bl	bc88c <__aeabi_d2lz>
   bb3ca:	f7fe fe69 	bl	ba0a0 <__aeabi_l2d>
   bb3ce:	4602      	mov	r2, r0
   bb3d0:	460b      	mov	r3, r1
   bb3d2:	4640      	mov	r0, r8
   bb3d4:	4649      	mov	r1, r9
   bb3d6:	f7fe fcd9 	bl	b9d8c <__aeabi_dsub>
   bb3da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb3dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb3e0:	ea43 030a 	orr.w	r3, r3, sl
   bb3e4:	4313      	orrs	r3, r2
   bb3e6:	4680      	mov	r8, r0
   bb3e8:	4689      	mov	r9, r1
   bb3ea:	d055      	beq.n	bb498 <_strtod_l+0xba0>
   bb3ec:	a336      	add	r3, pc, #216	; (adr r3, bb4c8 <_strtod_l+0xbd0>)
   bb3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb3f2:	f7ff f8f5 	bl	ba5e0 <__aeabi_dcmplt>
   bb3f6:	2800      	cmp	r0, #0
   bb3f8:	f47f acd0 	bne.w	bad9c <_strtod_l+0x4a4>
   bb3fc:	a334      	add	r3, pc, #208	; (adr r3, bb4d0 <_strtod_l+0xbd8>)
   bb3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb402:	4640      	mov	r0, r8
   bb404:	4649      	mov	r1, r9
   bb406:	f7ff f909 	bl	ba61c <__aeabi_dcmpgt>
   bb40a:	2800      	cmp	r0, #0
   bb40c:	f43f af7b 	beq.w	bb306 <_strtod_l+0xa0e>
   bb410:	e4c4      	b.n	bad9c <_strtod_l+0x4a4>
   bb412:	9b04      	ldr	r3, [sp, #16]
   bb414:	b333      	cbz	r3, bb464 <_strtod_l+0xb6c>
   bb416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb418:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb41c:	d822      	bhi.n	bb464 <_strtod_l+0xb6c>
   bb41e:	a32e      	add	r3, pc, #184	; (adr r3, bb4d8 <_strtod_l+0xbe0>)
   bb420:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb424:	4640      	mov	r0, r8
   bb426:	4649      	mov	r1, r9
   bb428:	f7ff f8e4 	bl	ba5f4 <__aeabi_dcmple>
   bb42c:	b1a0      	cbz	r0, bb458 <_strtod_l+0xb60>
   bb42e:	4649      	mov	r1, r9
   bb430:	4640      	mov	r0, r8
   bb432:	f7ff f8fd 	bl	ba630 <__aeabi_d2uiz>
   bb436:	2801      	cmp	r0, #1
   bb438:	bf38      	it	cc
   bb43a:	2001      	movcc	r0, #1
   bb43c:	f7fe fde4 	bl	ba008 <__aeabi_ui2d>
   bb440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb442:	4680      	mov	r8, r0
   bb444:	4689      	mov	r9, r1
   bb446:	bb23      	cbnz	r3, bb492 <_strtod_l+0xb9a>
   bb448:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb44c:	9010      	str	r0, [sp, #64]	; 0x40
   bb44e:	9311      	str	r3, [sp, #68]	; 0x44
   bb450:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb454:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb458:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb45a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb45c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb460:	1a9b      	subs	r3, r3, r2
   bb462:	9309      	str	r3, [sp, #36]	; 0x24
   bb464:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb468:	eeb0 0a48 	vmov.f32	s0, s16
   bb46c:	eef0 0a68 	vmov.f32	s1, s17
   bb470:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb474:	f001 f894 	bl	bc5a0 <__ulp>
   bb478:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb47c:	ec53 2b10 	vmov	r2, r3, d0
   bb480:	f7fe fe3c 	bl	ba0fc <__aeabi_dmul>
   bb484:	ec53 2b18 	vmov	r2, r3, d8
   bb488:	f7fe fc82 	bl	b9d90 <__adddf3>
   bb48c:	4682      	mov	sl, r0
   bb48e:	468b      	mov	fp, r1
   bb490:	e78d      	b.n	bb3ae <_strtod_l+0xab6>
   bb492:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb496:	e7db      	b.n	bb450 <_strtod_l+0xb58>
   bb498:	a311      	add	r3, pc, #68	; (adr r3, bb4e0 <_strtod_l+0xbe8>)
   bb49a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb49e:	f7ff f89f 	bl	ba5e0 <__aeabi_dcmplt>
   bb4a2:	e7b2      	b.n	bb40a <_strtod_l+0xb12>
   bb4a4:	2300      	movs	r3, #0
   bb4a6:	930a      	str	r3, [sp, #40]	; 0x28
   bb4a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb4aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4ac:	6013      	str	r3, [r2, #0]
   bb4ae:	f7ff ba6b 	b.w	ba988 <_strtod_l+0x90>
   bb4b2:	2a65      	cmp	r2, #101	; 0x65
   bb4b4:	f43f ab5f 	beq.w	bab76 <_strtod_l+0x27e>
   bb4b8:	2a45      	cmp	r2, #69	; 0x45
   bb4ba:	f43f ab5c 	beq.w	bab76 <_strtod_l+0x27e>
   bb4be:	2301      	movs	r3, #1
   bb4c0:	f7ff bb94 	b.w	babec <_strtod_l+0x2f4>
   bb4c4:	f3af 8000 	nop.w
   bb4c8:	94a03595 	.word	0x94a03595
   bb4cc:	3fdfffff 	.word	0x3fdfffff
   bb4d0:	35afe535 	.word	0x35afe535
   bb4d4:	3fe00000 	.word	0x3fe00000
   bb4d8:	ffc00000 	.word	0xffc00000
   bb4dc:	41dfffff 	.word	0x41dfffff
   bb4e0:	94a03595 	.word	0x94a03595
   bb4e4:	3fcfffff 	.word	0x3fcfffff
   bb4e8:	3ff00000 	.word	0x3ff00000
   bb4ec:	7ff00000 	.word	0x7ff00000
   bb4f0:	7fe00000 	.word	0x7fe00000
   bb4f4:	7c9fffff 	.word	0x7c9fffff
   bb4f8:	3fe00000 	.word	0x3fe00000
   bb4fc:	bff00000 	.word	0xbff00000
   bb500:	7fefffff 	.word	0x7fefffff

000bb504 <strtod>:
   bb504:	460a      	mov	r2, r1
   bb506:	4601      	mov	r1, r0
   bb508:	4802      	ldr	r0, [pc, #8]	; (bb514 <strtod+0x10>)
   bb50a:	4b03      	ldr	r3, [pc, #12]	; (bb518 <strtod+0x14>)
   bb50c:	6800      	ldr	r0, [r0, #0]
   bb50e:	f7ff b9f3 	b.w	ba8f8 <_strtod_l>
   bb512:	bf00      	nop
   bb514:	2003d154 	.word	0x2003d154
   bb518:	2003d1c0 	.word	0x2003d1c0

000bb51c <strtok>:
   bb51c:	4b16      	ldr	r3, [pc, #88]	; (bb578 <strtok+0x5c>)
   bb51e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb520:	681e      	ldr	r6, [r3, #0]
   bb522:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bb524:	4605      	mov	r5, r0
   bb526:	b9fc      	cbnz	r4, bb568 <strtok+0x4c>
   bb528:	2050      	movs	r0, #80	; 0x50
   bb52a:	9101      	str	r1, [sp, #4]
   bb52c:	f7fb f858 	bl	b65e0 <malloc>
   bb530:	9901      	ldr	r1, [sp, #4]
   bb532:	65b0      	str	r0, [r6, #88]	; 0x58
   bb534:	4602      	mov	r2, r0
   bb536:	b920      	cbnz	r0, bb542 <strtok+0x26>
   bb538:	4b10      	ldr	r3, [pc, #64]	; (bb57c <strtok+0x60>)
   bb53a:	4811      	ldr	r0, [pc, #68]	; (bb580 <strtok+0x64>)
   bb53c:	2157      	movs	r1, #87	; 0x57
   bb53e:	f7fb f897 	bl	b6670 <__assert_func>
   bb542:	e9c0 4400 	strd	r4, r4, [r0]
   bb546:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bb54a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bb54e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bb552:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bb556:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bb55a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bb55e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bb562:	6184      	str	r4, [r0, #24]
   bb564:	7704      	strb	r4, [r0, #28]
   bb566:	6244      	str	r4, [r0, #36]	; 0x24
   bb568:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bb56a:	2301      	movs	r3, #1
   bb56c:	4628      	mov	r0, r5
   bb56e:	b002      	add	sp, #8
   bb570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb574:	f000 b806 	b.w	bb584 <__strtok_r>
   bb578:	2003d154 	.word	0x2003d154
   bb57c:	000bd3dd 	.word	0x000bd3dd
   bb580:	000bd4d0 	.word	0x000bd4d0

000bb584 <__strtok_r>:
   bb584:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb586:	b908      	cbnz	r0, bb58c <__strtok_r+0x8>
   bb588:	6810      	ldr	r0, [r2, #0]
   bb58a:	b188      	cbz	r0, bb5b0 <__strtok_r+0x2c>
   bb58c:	4604      	mov	r4, r0
   bb58e:	4620      	mov	r0, r4
   bb590:	f814 5b01 	ldrb.w	r5, [r4], #1
   bb594:	460f      	mov	r7, r1
   bb596:	f817 6b01 	ldrb.w	r6, [r7], #1
   bb59a:	b91e      	cbnz	r6, bb5a4 <__strtok_r+0x20>
   bb59c:	b965      	cbnz	r5, bb5b8 <__strtok_r+0x34>
   bb59e:	6015      	str	r5, [r2, #0]
   bb5a0:	4628      	mov	r0, r5
   bb5a2:	e005      	b.n	bb5b0 <__strtok_r+0x2c>
   bb5a4:	42b5      	cmp	r5, r6
   bb5a6:	d1f6      	bne.n	bb596 <__strtok_r+0x12>
   bb5a8:	2b00      	cmp	r3, #0
   bb5aa:	d1f0      	bne.n	bb58e <__strtok_r+0xa>
   bb5ac:	6014      	str	r4, [r2, #0]
   bb5ae:	7003      	strb	r3, [r0, #0]
   bb5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb5b2:	461c      	mov	r4, r3
   bb5b4:	e00c      	b.n	bb5d0 <__strtok_r+0x4c>
   bb5b6:	b915      	cbnz	r5, bb5be <__strtok_r+0x3a>
   bb5b8:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb5bc:	460e      	mov	r6, r1
   bb5be:	f816 5b01 	ldrb.w	r5, [r6], #1
   bb5c2:	42ab      	cmp	r3, r5
   bb5c4:	d1f7      	bne.n	bb5b6 <__strtok_r+0x32>
   bb5c6:	2b00      	cmp	r3, #0
   bb5c8:	d0f3      	beq.n	bb5b2 <__strtok_r+0x2e>
   bb5ca:	2300      	movs	r3, #0
   bb5cc:	f804 3c01 	strb.w	r3, [r4, #-1]
   bb5d0:	6014      	str	r4, [r2, #0]
   bb5d2:	e7ed      	b.n	bb5b0 <__strtok_r+0x2c>

000bb5d4 <_strtol_l.constprop.0>:
   bb5d4:	2b01      	cmp	r3, #1
   bb5d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb5da:	d001      	beq.n	bb5e0 <_strtol_l.constprop.0+0xc>
   bb5dc:	2b24      	cmp	r3, #36	; 0x24
   bb5de:	d906      	bls.n	bb5ee <_strtol_l.constprop.0+0x1a>
   bb5e0:	f7fb f83e 	bl	b6660 <__errno>
   bb5e4:	2316      	movs	r3, #22
   bb5e6:	6003      	str	r3, [r0, #0]
   bb5e8:	2000      	movs	r0, #0
   bb5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb5ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb6d4 <_strtol_l.constprop.0+0x100>
   bb5f2:	460d      	mov	r5, r1
   bb5f4:	462e      	mov	r6, r5
   bb5f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb5fa:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb5fe:	f017 0708 	ands.w	r7, r7, #8
   bb602:	d1f7      	bne.n	bb5f4 <_strtol_l.constprop.0+0x20>
   bb604:	2c2d      	cmp	r4, #45	; 0x2d
   bb606:	d132      	bne.n	bb66e <_strtol_l.constprop.0+0x9a>
   bb608:	782c      	ldrb	r4, [r5, #0]
   bb60a:	2701      	movs	r7, #1
   bb60c:	1cb5      	adds	r5, r6, #2
   bb60e:	2b00      	cmp	r3, #0
   bb610:	d05b      	beq.n	bb6ca <_strtol_l.constprop.0+0xf6>
   bb612:	2b10      	cmp	r3, #16
   bb614:	d109      	bne.n	bb62a <_strtol_l.constprop.0+0x56>
   bb616:	2c30      	cmp	r4, #48	; 0x30
   bb618:	d107      	bne.n	bb62a <_strtol_l.constprop.0+0x56>
   bb61a:	782c      	ldrb	r4, [r5, #0]
   bb61c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb620:	2c58      	cmp	r4, #88	; 0x58
   bb622:	d14d      	bne.n	bb6c0 <_strtol_l.constprop.0+0xec>
   bb624:	786c      	ldrb	r4, [r5, #1]
   bb626:	2310      	movs	r3, #16
   bb628:	3502      	adds	r5, #2
   bb62a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb62e:	f108 38ff 	add.w	r8, r8, #4294967295
   bb632:	f04f 0c00 	mov.w	ip, #0
   bb636:	fbb8 f9f3 	udiv	r9, r8, r3
   bb63a:	4666      	mov	r6, ip
   bb63c:	fb03 8a19 	mls	sl, r3, r9, r8
   bb640:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb644:	f1be 0f09 	cmp.w	lr, #9
   bb648:	d816      	bhi.n	bb678 <_strtol_l.constprop.0+0xa4>
   bb64a:	4674      	mov	r4, lr
   bb64c:	42a3      	cmp	r3, r4
   bb64e:	dd24      	ble.n	bb69a <_strtol_l.constprop.0+0xc6>
   bb650:	f1bc 0f00 	cmp.w	ip, #0
   bb654:	db1e      	blt.n	bb694 <_strtol_l.constprop.0+0xc0>
   bb656:	45b1      	cmp	r9, r6
   bb658:	d31c      	bcc.n	bb694 <_strtol_l.constprop.0+0xc0>
   bb65a:	d101      	bne.n	bb660 <_strtol_l.constprop.0+0x8c>
   bb65c:	45a2      	cmp	sl, r4
   bb65e:	db19      	blt.n	bb694 <_strtol_l.constprop.0+0xc0>
   bb660:	fb06 4603 	mla	r6, r6, r3, r4
   bb664:	f04f 0c01 	mov.w	ip, #1
   bb668:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb66c:	e7e8      	b.n	bb640 <_strtol_l.constprop.0+0x6c>
   bb66e:	2c2b      	cmp	r4, #43	; 0x2b
   bb670:	bf04      	itt	eq
   bb672:	782c      	ldrbeq	r4, [r5, #0]
   bb674:	1cb5      	addeq	r5, r6, #2
   bb676:	e7ca      	b.n	bb60e <_strtol_l.constprop.0+0x3a>
   bb678:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb67c:	f1be 0f19 	cmp.w	lr, #25
   bb680:	d801      	bhi.n	bb686 <_strtol_l.constprop.0+0xb2>
   bb682:	3c37      	subs	r4, #55	; 0x37
   bb684:	e7e2      	b.n	bb64c <_strtol_l.constprop.0+0x78>
   bb686:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb68a:	f1be 0f19 	cmp.w	lr, #25
   bb68e:	d804      	bhi.n	bb69a <_strtol_l.constprop.0+0xc6>
   bb690:	3c57      	subs	r4, #87	; 0x57
   bb692:	e7db      	b.n	bb64c <_strtol_l.constprop.0+0x78>
   bb694:	f04f 3cff 	mov.w	ip, #4294967295
   bb698:	e7e6      	b.n	bb668 <_strtol_l.constprop.0+0x94>
   bb69a:	f1bc 0f00 	cmp.w	ip, #0
   bb69e:	da05      	bge.n	bb6ac <_strtol_l.constprop.0+0xd8>
   bb6a0:	2322      	movs	r3, #34	; 0x22
   bb6a2:	6003      	str	r3, [r0, #0]
   bb6a4:	4646      	mov	r6, r8
   bb6a6:	b942      	cbnz	r2, bb6ba <_strtol_l.constprop.0+0xe6>
   bb6a8:	4630      	mov	r0, r6
   bb6aa:	e79e      	b.n	bb5ea <_strtol_l.constprop.0+0x16>
   bb6ac:	b107      	cbz	r7, bb6b0 <_strtol_l.constprop.0+0xdc>
   bb6ae:	4276      	negs	r6, r6
   bb6b0:	2a00      	cmp	r2, #0
   bb6b2:	d0f9      	beq.n	bb6a8 <_strtol_l.constprop.0+0xd4>
   bb6b4:	f1bc 0f00 	cmp.w	ip, #0
   bb6b8:	d000      	beq.n	bb6bc <_strtol_l.constprop.0+0xe8>
   bb6ba:	1e69      	subs	r1, r5, #1
   bb6bc:	6011      	str	r1, [r2, #0]
   bb6be:	e7f3      	b.n	bb6a8 <_strtol_l.constprop.0+0xd4>
   bb6c0:	2430      	movs	r4, #48	; 0x30
   bb6c2:	2b00      	cmp	r3, #0
   bb6c4:	d1b1      	bne.n	bb62a <_strtol_l.constprop.0+0x56>
   bb6c6:	2308      	movs	r3, #8
   bb6c8:	e7af      	b.n	bb62a <_strtol_l.constprop.0+0x56>
   bb6ca:	2c30      	cmp	r4, #48	; 0x30
   bb6cc:	d0a5      	beq.n	bb61a <_strtol_l.constprop.0+0x46>
   bb6ce:	230a      	movs	r3, #10
   bb6d0:	e7ab      	b.n	bb62a <_strtol_l.constprop.0+0x56>
   bb6d2:	bf00      	nop
   bb6d4:	000bd550 	.word	0x000bd550

000bb6d8 <strtol>:
   bb6d8:	4613      	mov	r3, r2
   bb6da:	460a      	mov	r2, r1
   bb6dc:	4601      	mov	r1, r0
   bb6de:	4802      	ldr	r0, [pc, #8]	; (bb6e8 <strtol+0x10>)
   bb6e0:	6800      	ldr	r0, [r0, #0]
   bb6e2:	f7ff bf77 	b.w	bb5d4 <_strtol_l.constprop.0>
   bb6e6:	bf00      	nop
   bb6e8:	2003d154 	.word	0x2003d154

000bb6ec <__register_exitproc>:
   bb6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb6f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb7ac <__register_exitproc+0xc0>
   bb6f4:	4606      	mov	r6, r0
   bb6f6:	f8d8 0000 	ldr.w	r0, [r8]
   bb6fa:	461f      	mov	r7, r3
   bb6fc:	460d      	mov	r5, r1
   bb6fe:	4691      	mov	r9, r2
   bb700:	f000 fbc6 	bl	bbe90 <__retarget_lock_acquire_recursive>
   bb704:	4b25      	ldr	r3, [pc, #148]	; (bb79c <__register_exitproc+0xb0>)
   bb706:	681c      	ldr	r4, [r3, #0]
   bb708:	b934      	cbnz	r4, bb718 <__register_exitproc+0x2c>
   bb70a:	4c25      	ldr	r4, [pc, #148]	; (bb7a0 <__register_exitproc+0xb4>)
   bb70c:	601c      	str	r4, [r3, #0]
   bb70e:	4b25      	ldr	r3, [pc, #148]	; (bb7a4 <__register_exitproc+0xb8>)
   bb710:	b113      	cbz	r3, bb718 <__register_exitproc+0x2c>
   bb712:	681b      	ldr	r3, [r3, #0]
   bb714:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb718:	6863      	ldr	r3, [r4, #4]
   bb71a:	2b1f      	cmp	r3, #31
   bb71c:	dd07      	ble.n	bb72e <__register_exitproc+0x42>
   bb71e:	f8d8 0000 	ldr.w	r0, [r8]
   bb722:	f000 fbb7 	bl	bbe94 <__retarget_lock_release_recursive>
   bb726:	f04f 30ff 	mov.w	r0, #4294967295
   bb72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb72e:	b34e      	cbz	r6, bb784 <__register_exitproc+0x98>
   bb730:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb734:	b988      	cbnz	r0, bb75a <__register_exitproc+0x6e>
   bb736:	4b1c      	ldr	r3, [pc, #112]	; (bb7a8 <__register_exitproc+0xbc>)
   bb738:	b923      	cbnz	r3, bb744 <__register_exitproc+0x58>
   bb73a:	f8d8 0000 	ldr.w	r0, [r8]
   bb73e:	f000 fba8 	bl	bbe92 <__retarget_lock_release>
   bb742:	e7f0      	b.n	bb726 <__register_exitproc+0x3a>
   bb744:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb748:	f7fa ff4a 	bl	b65e0 <malloc>
   bb74c:	2800      	cmp	r0, #0
   bb74e:	d0f4      	beq.n	bb73a <__register_exitproc+0x4e>
   bb750:	2300      	movs	r3, #0
   bb752:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb756:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb75a:	6863      	ldr	r3, [r4, #4]
   bb75c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb760:	2201      	movs	r2, #1
   bb762:	409a      	lsls	r2, r3
   bb764:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb768:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb76c:	4313      	orrs	r3, r2
   bb76e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb772:	2e02      	cmp	r6, #2
   bb774:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb778:	bf02      	ittt	eq
   bb77a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb77e:	4313      	orreq	r3, r2
   bb780:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb784:	6863      	ldr	r3, [r4, #4]
   bb786:	f8d8 0000 	ldr.w	r0, [r8]
   bb78a:	1c5a      	adds	r2, r3, #1
   bb78c:	3302      	adds	r3, #2
   bb78e:	6062      	str	r2, [r4, #4]
   bb790:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb794:	f000 fb7e 	bl	bbe94 <__retarget_lock_release_recursive>
   bb798:	2000      	movs	r0, #0
   bb79a:	e7c6      	b.n	bb72a <__register_exitproc+0x3e>
   bb79c:	2003e7ec 	.word	0x2003e7ec
   bb7a0:	2003e760 	.word	0x2003e760
   bb7a4:	00000000 	.word	0x00000000
   bb7a8:	000b65e1 	.word	0x000b65e1
   bb7ac:	2003d1b8 	.word	0x2003d1b8

000bb7b0 <rshift>:
   bb7b0:	6903      	ldr	r3, [r0, #16]
   bb7b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb7b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb7ba:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb7be:	f100 0414 	add.w	r4, r0, #20
   bb7c2:	dd45      	ble.n	bb850 <rshift+0xa0>
   bb7c4:	f011 011f 	ands.w	r1, r1, #31
   bb7c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb7cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb7d0:	d10c      	bne.n	bb7ec <rshift+0x3c>
   bb7d2:	f100 0710 	add.w	r7, r0, #16
   bb7d6:	4629      	mov	r1, r5
   bb7d8:	42b1      	cmp	r1, r6
   bb7da:	d334      	bcc.n	bb846 <rshift+0x96>
   bb7dc:	1a9b      	subs	r3, r3, r2
   bb7de:	009b      	lsls	r3, r3, #2
   bb7e0:	1eea      	subs	r2, r5, #3
   bb7e2:	4296      	cmp	r6, r2
   bb7e4:	bf38      	it	cc
   bb7e6:	2300      	movcc	r3, #0
   bb7e8:	4423      	add	r3, r4
   bb7ea:	e015      	b.n	bb818 <rshift+0x68>
   bb7ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb7f0:	f1c1 0820 	rsb	r8, r1, #32
   bb7f4:	40cf      	lsrs	r7, r1
   bb7f6:	f105 0e04 	add.w	lr, r5, #4
   bb7fa:	46a1      	mov	r9, r4
   bb7fc:	4576      	cmp	r6, lr
   bb7fe:	46f4      	mov	ip, lr
   bb800:	d815      	bhi.n	bb82e <rshift+0x7e>
   bb802:	1a9a      	subs	r2, r3, r2
   bb804:	0092      	lsls	r2, r2, #2
   bb806:	3a04      	subs	r2, #4
   bb808:	3501      	adds	r5, #1
   bb80a:	42ae      	cmp	r6, r5
   bb80c:	bf38      	it	cc
   bb80e:	2200      	movcc	r2, #0
   bb810:	18a3      	adds	r3, r4, r2
   bb812:	50a7      	str	r7, [r4, r2]
   bb814:	b107      	cbz	r7, bb818 <rshift+0x68>
   bb816:	3304      	adds	r3, #4
   bb818:	1b1a      	subs	r2, r3, r4
   bb81a:	42a3      	cmp	r3, r4
   bb81c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb820:	bf08      	it	eq
   bb822:	2300      	moveq	r3, #0
   bb824:	6102      	str	r2, [r0, #16]
   bb826:	bf08      	it	eq
   bb828:	6143      	streq	r3, [r0, #20]
   bb82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb82e:	f8dc c000 	ldr.w	ip, [ip]
   bb832:	fa0c fc08 	lsl.w	ip, ip, r8
   bb836:	ea4c 0707 	orr.w	r7, ip, r7
   bb83a:	f849 7b04 	str.w	r7, [r9], #4
   bb83e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb842:	40cf      	lsrs	r7, r1
   bb844:	e7da      	b.n	bb7fc <rshift+0x4c>
   bb846:	f851 cb04 	ldr.w	ip, [r1], #4
   bb84a:	f847 cf04 	str.w	ip, [r7, #4]!
   bb84e:	e7c3      	b.n	bb7d8 <rshift+0x28>
   bb850:	4623      	mov	r3, r4
   bb852:	e7e1      	b.n	bb818 <rshift+0x68>

000bb854 <__hexdig_fun>:
   bb854:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb858:	2b09      	cmp	r3, #9
   bb85a:	d802      	bhi.n	bb862 <__hexdig_fun+0xe>
   bb85c:	3820      	subs	r0, #32
   bb85e:	b2c0      	uxtb	r0, r0
   bb860:	4770      	bx	lr
   bb862:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb866:	2b05      	cmp	r3, #5
   bb868:	d801      	bhi.n	bb86e <__hexdig_fun+0x1a>
   bb86a:	3847      	subs	r0, #71	; 0x47
   bb86c:	e7f7      	b.n	bb85e <__hexdig_fun+0xa>
   bb86e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb872:	2b05      	cmp	r3, #5
   bb874:	d801      	bhi.n	bb87a <__hexdig_fun+0x26>
   bb876:	3827      	subs	r0, #39	; 0x27
   bb878:	e7f1      	b.n	bb85e <__hexdig_fun+0xa>
   bb87a:	2000      	movs	r0, #0
   bb87c:	4770      	bx	lr
	...

000bb880 <__gethex>:
   bb880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb884:	ed2d 8b02 	vpush	{d8}
   bb888:	b089      	sub	sp, #36	; 0x24
   bb88a:	ee08 0a10 	vmov	s16, r0
   bb88e:	9304      	str	r3, [sp, #16]
   bb890:	4bb4      	ldr	r3, [pc, #720]	; (bbb64 <__gethex+0x2e4>)
   bb892:	681b      	ldr	r3, [r3, #0]
   bb894:	9301      	str	r3, [sp, #4]
   bb896:	4618      	mov	r0, r3
   bb898:	468b      	mov	fp, r1
   bb89a:	4690      	mov	r8, r2
   bb89c:	f7fe ffd5 	bl	ba84a <strlen>
   bb8a0:	9b01      	ldr	r3, [sp, #4]
   bb8a2:	f8db 2000 	ldr.w	r2, [fp]
   bb8a6:	4403      	add	r3, r0
   bb8a8:	4682      	mov	sl, r0
   bb8aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb8ae:	9305      	str	r3, [sp, #20]
   bb8b0:	1c93      	adds	r3, r2, #2
   bb8b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb8b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb8ba:	32fe      	adds	r2, #254	; 0xfe
   bb8bc:	18d1      	adds	r1, r2, r3
   bb8be:	461f      	mov	r7, r3
   bb8c0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb8c4:	9100      	str	r1, [sp, #0]
   bb8c6:	2830      	cmp	r0, #48	; 0x30
   bb8c8:	d0f8      	beq.n	bb8bc <__gethex+0x3c>
   bb8ca:	f7ff ffc3 	bl	bb854 <__hexdig_fun>
   bb8ce:	4604      	mov	r4, r0
   bb8d0:	2800      	cmp	r0, #0
   bb8d2:	d13a      	bne.n	bb94a <__gethex+0xca>
   bb8d4:	9901      	ldr	r1, [sp, #4]
   bb8d6:	4652      	mov	r2, sl
   bb8d8:	4638      	mov	r0, r7
   bb8da:	f7fe ffbe 	bl	ba85a <strncmp>
   bb8de:	4605      	mov	r5, r0
   bb8e0:	2800      	cmp	r0, #0
   bb8e2:	d168      	bne.n	bb9b6 <__gethex+0x136>
   bb8e4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb8e8:	eb07 060a 	add.w	r6, r7, sl
   bb8ec:	f7ff ffb2 	bl	bb854 <__hexdig_fun>
   bb8f0:	2800      	cmp	r0, #0
   bb8f2:	d062      	beq.n	bb9ba <__gethex+0x13a>
   bb8f4:	4633      	mov	r3, r6
   bb8f6:	7818      	ldrb	r0, [r3, #0]
   bb8f8:	2830      	cmp	r0, #48	; 0x30
   bb8fa:	461f      	mov	r7, r3
   bb8fc:	f103 0301 	add.w	r3, r3, #1
   bb900:	d0f9      	beq.n	bb8f6 <__gethex+0x76>
   bb902:	f7ff ffa7 	bl	bb854 <__hexdig_fun>
   bb906:	2301      	movs	r3, #1
   bb908:	fab0 f480 	clz	r4, r0
   bb90c:	0964      	lsrs	r4, r4, #5
   bb90e:	4635      	mov	r5, r6
   bb910:	9300      	str	r3, [sp, #0]
   bb912:	463a      	mov	r2, r7
   bb914:	4616      	mov	r6, r2
   bb916:	3201      	adds	r2, #1
   bb918:	7830      	ldrb	r0, [r6, #0]
   bb91a:	f7ff ff9b 	bl	bb854 <__hexdig_fun>
   bb91e:	2800      	cmp	r0, #0
   bb920:	d1f8      	bne.n	bb914 <__gethex+0x94>
   bb922:	9901      	ldr	r1, [sp, #4]
   bb924:	4652      	mov	r2, sl
   bb926:	4630      	mov	r0, r6
   bb928:	f7fe ff97 	bl	ba85a <strncmp>
   bb92c:	b980      	cbnz	r0, bb950 <__gethex+0xd0>
   bb92e:	b94d      	cbnz	r5, bb944 <__gethex+0xc4>
   bb930:	eb06 050a 	add.w	r5, r6, sl
   bb934:	462a      	mov	r2, r5
   bb936:	4616      	mov	r6, r2
   bb938:	3201      	adds	r2, #1
   bb93a:	7830      	ldrb	r0, [r6, #0]
   bb93c:	f7ff ff8a 	bl	bb854 <__hexdig_fun>
   bb940:	2800      	cmp	r0, #0
   bb942:	d1f8      	bne.n	bb936 <__gethex+0xb6>
   bb944:	1bad      	subs	r5, r5, r6
   bb946:	00ad      	lsls	r5, r5, #2
   bb948:	e004      	b.n	bb954 <__gethex+0xd4>
   bb94a:	2400      	movs	r4, #0
   bb94c:	4625      	mov	r5, r4
   bb94e:	e7e0      	b.n	bb912 <__gethex+0x92>
   bb950:	2d00      	cmp	r5, #0
   bb952:	d1f7      	bne.n	bb944 <__gethex+0xc4>
   bb954:	7833      	ldrb	r3, [r6, #0]
   bb956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb95a:	2b50      	cmp	r3, #80	; 0x50
   bb95c:	d13b      	bne.n	bb9d6 <__gethex+0x156>
   bb95e:	7873      	ldrb	r3, [r6, #1]
   bb960:	2b2b      	cmp	r3, #43	; 0x2b
   bb962:	d02c      	beq.n	bb9be <__gethex+0x13e>
   bb964:	2b2d      	cmp	r3, #45	; 0x2d
   bb966:	d02e      	beq.n	bb9c6 <__gethex+0x146>
   bb968:	1c71      	adds	r1, r6, #1
   bb96a:	f04f 0900 	mov.w	r9, #0
   bb96e:	7808      	ldrb	r0, [r1, #0]
   bb970:	f7ff ff70 	bl	bb854 <__hexdig_fun>
   bb974:	1e43      	subs	r3, r0, #1
   bb976:	b2db      	uxtb	r3, r3
   bb978:	2b18      	cmp	r3, #24
   bb97a:	d82c      	bhi.n	bb9d6 <__gethex+0x156>
   bb97c:	f1a0 0210 	sub.w	r2, r0, #16
   bb980:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb984:	f7ff ff66 	bl	bb854 <__hexdig_fun>
   bb988:	1e43      	subs	r3, r0, #1
   bb98a:	b2db      	uxtb	r3, r3
   bb98c:	2b18      	cmp	r3, #24
   bb98e:	d91d      	bls.n	bb9cc <__gethex+0x14c>
   bb990:	f1b9 0f00 	cmp.w	r9, #0
   bb994:	d000      	beq.n	bb998 <__gethex+0x118>
   bb996:	4252      	negs	r2, r2
   bb998:	4415      	add	r5, r2
   bb99a:	f8cb 1000 	str.w	r1, [fp]
   bb99e:	b1e4      	cbz	r4, bb9da <__gethex+0x15a>
   bb9a0:	9b00      	ldr	r3, [sp, #0]
   bb9a2:	2b00      	cmp	r3, #0
   bb9a4:	bf14      	ite	ne
   bb9a6:	2700      	movne	r7, #0
   bb9a8:	2706      	moveq	r7, #6
   bb9aa:	4638      	mov	r0, r7
   bb9ac:	b009      	add	sp, #36	; 0x24
   bb9ae:	ecbd 8b02 	vpop	{d8}
   bb9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb9b6:	463e      	mov	r6, r7
   bb9b8:	4625      	mov	r5, r4
   bb9ba:	2401      	movs	r4, #1
   bb9bc:	e7ca      	b.n	bb954 <__gethex+0xd4>
   bb9be:	f04f 0900 	mov.w	r9, #0
   bb9c2:	1cb1      	adds	r1, r6, #2
   bb9c4:	e7d3      	b.n	bb96e <__gethex+0xee>
   bb9c6:	f04f 0901 	mov.w	r9, #1
   bb9ca:	e7fa      	b.n	bb9c2 <__gethex+0x142>
   bb9cc:	230a      	movs	r3, #10
   bb9ce:	fb03 0202 	mla	r2, r3, r2, r0
   bb9d2:	3a10      	subs	r2, #16
   bb9d4:	e7d4      	b.n	bb980 <__gethex+0x100>
   bb9d6:	4631      	mov	r1, r6
   bb9d8:	e7df      	b.n	bb99a <__gethex+0x11a>
   bb9da:	1bf3      	subs	r3, r6, r7
   bb9dc:	3b01      	subs	r3, #1
   bb9de:	4621      	mov	r1, r4
   bb9e0:	2b07      	cmp	r3, #7
   bb9e2:	dc0b      	bgt.n	bb9fc <__gethex+0x17c>
   bb9e4:	ee18 0a10 	vmov	r0, s16
   bb9e8:	f000 fa68 	bl	bbebc <_Balloc>
   bb9ec:	4604      	mov	r4, r0
   bb9ee:	b940      	cbnz	r0, bba02 <__gethex+0x182>
   bb9f0:	4b5d      	ldr	r3, [pc, #372]	; (bbb68 <__gethex+0x2e8>)
   bb9f2:	4602      	mov	r2, r0
   bb9f4:	21de      	movs	r1, #222	; 0xde
   bb9f6:	485d      	ldr	r0, [pc, #372]	; (bbb6c <__gethex+0x2ec>)
   bb9f8:	f7fa fe3a 	bl	b6670 <__assert_func>
   bb9fc:	3101      	adds	r1, #1
   bb9fe:	105b      	asrs	r3, r3, #1
   bba00:	e7ee      	b.n	bb9e0 <__gethex+0x160>
   bba02:	f100 0914 	add.w	r9, r0, #20
   bba06:	f04f 0b00 	mov.w	fp, #0
   bba0a:	f1ca 0301 	rsb	r3, sl, #1
   bba0e:	f8cd 9008 	str.w	r9, [sp, #8]
   bba12:	f8cd b000 	str.w	fp, [sp]
   bba16:	9306      	str	r3, [sp, #24]
   bba18:	42b7      	cmp	r7, r6
   bba1a:	d340      	bcc.n	bba9e <__gethex+0x21e>
   bba1c:	9802      	ldr	r0, [sp, #8]
   bba1e:	9b00      	ldr	r3, [sp, #0]
   bba20:	f840 3b04 	str.w	r3, [r0], #4
   bba24:	eba0 0009 	sub.w	r0, r0, r9
   bba28:	1080      	asrs	r0, r0, #2
   bba2a:	0146      	lsls	r6, r0, #5
   bba2c:	6120      	str	r0, [r4, #16]
   bba2e:	4618      	mov	r0, r3
   bba30:	f000 fb36 	bl	bc0a0 <__hi0bits>
   bba34:	1a30      	subs	r0, r6, r0
   bba36:	f8d8 6000 	ldr.w	r6, [r8]
   bba3a:	42b0      	cmp	r0, r6
   bba3c:	dd63      	ble.n	bbb06 <__gethex+0x286>
   bba3e:	1b87      	subs	r7, r0, r6
   bba40:	4639      	mov	r1, r7
   bba42:	4620      	mov	r0, r4
   bba44:	f000 feda 	bl	bc7fc <__any_on>
   bba48:	4682      	mov	sl, r0
   bba4a:	b1a8      	cbz	r0, bba78 <__gethex+0x1f8>
   bba4c:	1e7b      	subs	r3, r7, #1
   bba4e:	1159      	asrs	r1, r3, #5
   bba50:	f003 021f 	and.w	r2, r3, #31
   bba54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bba58:	f04f 0a01 	mov.w	sl, #1
   bba5c:	fa0a f202 	lsl.w	r2, sl, r2
   bba60:	420a      	tst	r2, r1
   bba62:	d009      	beq.n	bba78 <__gethex+0x1f8>
   bba64:	4553      	cmp	r3, sl
   bba66:	dd05      	ble.n	bba74 <__gethex+0x1f4>
   bba68:	1eb9      	subs	r1, r7, #2
   bba6a:	4620      	mov	r0, r4
   bba6c:	f000 fec6 	bl	bc7fc <__any_on>
   bba70:	2800      	cmp	r0, #0
   bba72:	d145      	bne.n	bbb00 <__gethex+0x280>
   bba74:	f04f 0a02 	mov.w	sl, #2
   bba78:	4639      	mov	r1, r7
   bba7a:	4620      	mov	r0, r4
   bba7c:	f7ff fe98 	bl	bb7b0 <rshift>
   bba80:	443d      	add	r5, r7
   bba82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bba86:	42ab      	cmp	r3, r5
   bba88:	da4c      	bge.n	bbb24 <__gethex+0x2a4>
   bba8a:	ee18 0a10 	vmov	r0, s16
   bba8e:	4621      	mov	r1, r4
   bba90:	f000 fa54 	bl	bbf3c <_Bfree>
   bba94:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bba96:	2300      	movs	r3, #0
   bba98:	6013      	str	r3, [r2, #0]
   bba9a:	27a3      	movs	r7, #163	; 0xa3
   bba9c:	e785      	b.n	bb9aa <__gethex+0x12a>
   bba9e:	1e73      	subs	r3, r6, #1
   bbaa0:	9a05      	ldr	r2, [sp, #20]
   bbaa2:	9303      	str	r3, [sp, #12]
   bbaa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bbaa8:	4293      	cmp	r3, r2
   bbaaa:	d019      	beq.n	bbae0 <__gethex+0x260>
   bbaac:	f1bb 0f20 	cmp.w	fp, #32
   bbab0:	d107      	bne.n	bbac2 <__gethex+0x242>
   bbab2:	9b02      	ldr	r3, [sp, #8]
   bbab4:	9a00      	ldr	r2, [sp, #0]
   bbab6:	f843 2b04 	str.w	r2, [r3], #4
   bbaba:	9302      	str	r3, [sp, #8]
   bbabc:	2300      	movs	r3, #0
   bbabe:	9300      	str	r3, [sp, #0]
   bbac0:	469b      	mov	fp, r3
   bbac2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bbac6:	f7ff fec5 	bl	bb854 <__hexdig_fun>
   bbaca:	9b00      	ldr	r3, [sp, #0]
   bbacc:	f000 000f 	and.w	r0, r0, #15
   bbad0:	fa00 f00b 	lsl.w	r0, r0, fp
   bbad4:	4303      	orrs	r3, r0
   bbad6:	9300      	str	r3, [sp, #0]
   bbad8:	f10b 0b04 	add.w	fp, fp, #4
   bbadc:	9b03      	ldr	r3, [sp, #12]
   bbade:	e00d      	b.n	bbafc <__gethex+0x27c>
   bbae0:	9b03      	ldr	r3, [sp, #12]
   bbae2:	9a06      	ldr	r2, [sp, #24]
   bbae4:	4413      	add	r3, r2
   bbae6:	42bb      	cmp	r3, r7
   bbae8:	d3e0      	bcc.n	bbaac <__gethex+0x22c>
   bbaea:	4618      	mov	r0, r3
   bbaec:	9901      	ldr	r1, [sp, #4]
   bbaee:	9307      	str	r3, [sp, #28]
   bbaf0:	4652      	mov	r2, sl
   bbaf2:	f7fe feb2 	bl	ba85a <strncmp>
   bbaf6:	9b07      	ldr	r3, [sp, #28]
   bbaf8:	2800      	cmp	r0, #0
   bbafa:	d1d7      	bne.n	bbaac <__gethex+0x22c>
   bbafc:	461e      	mov	r6, r3
   bbafe:	e78b      	b.n	bba18 <__gethex+0x198>
   bbb00:	f04f 0a03 	mov.w	sl, #3
   bbb04:	e7b8      	b.n	bba78 <__gethex+0x1f8>
   bbb06:	da0a      	bge.n	bbb1e <__gethex+0x29e>
   bbb08:	1a37      	subs	r7, r6, r0
   bbb0a:	4621      	mov	r1, r4
   bbb0c:	ee18 0a10 	vmov	r0, s16
   bbb10:	463a      	mov	r2, r7
   bbb12:	f000 fc2f 	bl	bc374 <__lshift>
   bbb16:	1bed      	subs	r5, r5, r7
   bbb18:	4604      	mov	r4, r0
   bbb1a:	f100 0914 	add.w	r9, r0, #20
   bbb1e:	f04f 0a00 	mov.w	sl, #0
   bbb22:	e7ae      	b.n	bba82 <__gethex+0x202>
   bbb24:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bbb28:	42a8      	cmp	r0, r5
   bbb2a:	dd72      	ble.n	bbc12 <__gethex+0x392>
   bbb2c:	1b45      	subs	r5, r0, r5
   bbb2e:	42ae      	cmp	r6, r5
   bbb30:	dc36      	bgt.n	bbba0 <__gethex+0x320>
   bbb32:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbb36:	2b02      	cmp	r3, #2
   bbb38:	d02a      	beq.n	bbb90 <__gethex+0x310>
   bbb3a:	2b03      	cmp	r3, #3
   bbb3c:	d02c      	beq.n	bbb98 <__gethex+0x318>
   bbb3e:	2b01      	cmp	r3, #1
   bbb40:	d11c      	bne.n	bbb7c <__gethex+0x2fc>
   bbb42:	42ae      	cmp	r6, r5
   bbb44:	d11a      	bne.n	bbb7c <__gethex+0x2fc>
   bbb46:	2e01      	cmp	r6, #1
   bbb48:	d112      	bne.n	bbb70 <__gethex+0x2f0>
   bbb4a:	9a04      	ldr	r2, [sp, #16]
   bbb4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bbb50:	6013      	str	r3, [r2, #0]
   bbb52:	2301      	movs	r3, #1
   bbb54:	6123      	str	r3, [r4, #16]
   bbb56:	f8c9 3000 	str.w	r3, [r9]
   bbb5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbb5c:	2762      	movs	r7, #98	; 0x62
   bbb5e:	601c      	str	r4, [r3, #0]
   bbb60:	e723      	b.n	bb9aa <__gethex+0x12a>
   bbb62:	bf00      	nop
   bbb64:	000bd6e8 	.word	0x000bd6e8
   bbb68:	000bd650 	.word	0x000bd650
   bbb6c:	000bd661 	.word	0x000bd661
   bbb70:	1e71      	subs	r1, r6, #1
   bbb72:	4620      	mov	r0, r4
   bbb74:	f000 fe42 	bl	bc7fc <__any_on>
   bbb78:	2800      	cmp	r0, #0
   bbb7a:	d1e6      	bne.n	bbb4a <__gethex+0x2ca>
   bbb7c:	ee18 0a10 	vmov	r0, s16
   bbb80:	4621      	mov	r1, r4
   bbb82:	f000 f9db 	bl	bbf3c <_Bfree>
   bbb86:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bbb88:	2300      	movs	r3, #0
   bbb8a:	6013      	str	r3, [r2, #0]
   bbb8c:	2750      	movs	r7, #80	; 0x50
   bbb8e:	e70c      	b.n	bb9aa <__gethex+0x12a>
   bbb90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbb92:	2b00      	cmp	r3, #0
   bbb94:	d1f2      	bne.n	bbb7c <__gethex+0x2fc>
   bbb96:	e7d8      	b.n	bbb4a <__gethex+0x2ca>
   bbb98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbb9a:	2b00      	cmp	r3, #0
   bbb9c:	d1d5      	bne.n	bbb4a <__gethex+0x2ca>
   bbb9e:	e7ed      	b.n	bbb7c <__gethex+0x2fc>
   bbba0:	1e6f      	subs	r7, r5, #1
   bbba2:	f1ba 0f00 	cmp.w	sl, #0
   bbba6:	d131      	bne.n	bbc0c <__gethex+0x38c>
   bbba8:	b127      	cbz	r7, bbbb4 <__gethex+0x334>
   bbbaa:	4639      	mov	r1, r7
   bbbac:	4620      	mov	r0, r4
   bbbae:	f000 fe25 	bl	bc7fc <__any_on>
   bbbb2:	4682      	mov	sl, r0
   bbbb4:	117b      	asrs	r3, r7, #5
   bbbb6:	2101      	movs	r1, #1
   bbbb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bbbbc:	f007 071f 	and.w	r7, r7, #31
   bbbc0:	fa01 f707 	lsl.w	r7, r1, r7
   bbbc4:	421f      	tst	r7, r3
   bbbc6:	4629      	mov	r1, r5
   bbbc8:	4620      	mov	r0, r4
   bbbca:	bf18      	it	ne
   bbbcc:	f04a 0a02 	orrne.w	sl, sl, #2
   bbbd0:	1b76      	subs	r6, r6, r5
   bbbd2:	f7ff fded 	bl	bb7b0 <rshift>
   bbbd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bbbda:	2702      	movs	r7, #2
   bbbdc:	f1ba 0f00 	cmp.w	sl, #0
   bbbe0:	d048      	beq.n	bbc74 <__gethex+0x3f4>
   bbbe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbbe6:	2b02      	cmp	r3, #2
   bbbe8:	d015      	beq.n	bbc16 <__gethex+0x396>
   bbbea:	2b03      	cmp	r3, #3
   bbbec:	d017      	beq.n	bbc1e <__gethex+0x39e>
   bbbee:	2b01      	cmp	r3, #1
   bbbf0:	d109      	bne.n	bbc06 <__gethex+0x386>
   bbbf2:	f01a 0f02 	tst.w	sl, #2
   bbbf6:	d006      	beq.n	bbc06 <__gethex+0x386>
   bbbf8:	f8d9 0000 	ldr.w	r0, [r9]
   bbbfc:	ea4a 0a00 	orr.w	sl, sl, r0
   bbc00:	f01a 0f01 	tst.w	sl, #1
   bbc04:	d10e      	bne.n	bbc24 <__gethex+0x3a4>
   bbc06:	f047 0710 	orr.w	r7, r7, #16
   bbc0a:	e033      	b.n	bbc74 <__gethex+0x3f4>
   bbc0c:	f04f 0a01 	mov.w	sl, #1
   bbc10:	e7d0      	b.n	bbbb4 <__gethex+0x334>
   bbc12:	2701      	movs	r7, #1
   bbc14:	e7e2      	b.n	bbbdc <__gethex+0x35c>
   bbc16:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbc18:	f1c3 0301 	rsb	r3, r3, #1
   bbc1c:	9315      	str	r3, [sp, #84]	; 0x54
   bbc1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbc20:	2b00      	cmp	r3, #0
   bbc22:	d0f0      	beq.n	bbc06 <__gethex+0x386>
   bbc24:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bbc28:	f104 0314 	add.w	r3, r4, #20
   bbc2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bbc30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bbc34:	f04f 0c00 	mov.w	ip, #0
   bbc38:	4618      	mov	r0, r3
   bbc3a:	f853 2b04 	ldr.w	r2, [r3], #4
   bbc3e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bbc42:	d01c      	beq.n	bbc7e <__gethex+0x3fe>
   bbc44:	3201      	adds	r2, #1
   bbc46:	6002      	str	r2, [r0, #0]
   bbc48:	2f02      	cmp	r7, #2
   bbc4a:	f104 0314 	add.w	r3, r4, #20
   bbc4e:	d13f      	bne.n	bbcd0 <__gethex+0x450>
   bbc50:	f8d8 2000 	ldr.w	r2, [r8]
   bbc54:	3a01      	subs	r2, #1
   bbc56:	42b2      	cmp	r2, r6
   bbc58:	d10a      	bne.n	bbc70 <__gethex+0x3f0>
   bbc5a:	1171      	asrs	r1, r6, #5
   bbc5c:	2201      	movs	r2, #1
   bbc5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bbc62:	f006 061f 	and.w	r6, r6, #31
   bbc66:	fa02 f606 	lsl.w	r6, r2, r6
   bbc6a:	421e      	tst	r6, r3
   bbc6c:	bf18      	it	ne
   bbc6e:	4617      	movne	r7, r2
   bbc70:	f047 0720 	orr.w	r7, r7, #32
   bbc74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbc76:	601c      	str	r4, [r3, #0]
   bbc78:	9b04      	ldr	r3, [sp, #16]
   bbc7a:	601d      	str	r5, [r3, #0]
   bbc7c:	e695      	b.n	bb9aa <__gethex+0x12a>
   bbc7e:	4299      	cmp	r1, r3
   bbc80:	f843 cc04 	str.w	ip, [r3, #-4]
   bbc84:	d8d8      	bhi.n	bbc38 <__gethex+0x3b8>
   bbc86:	68a3      	ldr	r3, [r4, #8]
   bbc88:	459b      	cmp	fp, r3
   bbc8a:	db19      	blt.n	bbcc0 <__gethex+0x440>
   bbc8c:	6861      	ldr	r1, [r4, #4]
   bbc8e:	ee18 0a10 	vmov	r0, s16
   bbc92:	3101      	adds	r1, #1
   bbc94:	f000 f912 	bl	bbebc <_Balloc>
   bbc98:	4681      	mov	r9, r0
   bbc9a:	b918      	cbnz	r0, bbca4 <__gethex+0x424>
   bbc9c:	4b1a      	ldr	r3, [pc, #104]	; (bbd08 <__gethex+0x488>)
   bbc9e:	4602      	mov	r2, r0
   bbca0:	2184      	movs	r1, #132	; 0x84
   bbca2:	e6a8      	b.n	bb9f6 <__gethex+0x176>
   bbca4:	6922      	ldr	r2, [r4, #16]
   bbca6:	3202      	adds	r2, #2
   bbca8:	f104 010c 	add.w	r1, r4, #12
   bbcac:	0092      	lsls	r2, r2, #2
   bbcae:	300c      	adds	r0, #12
   bbcb0:	f7fe fd2d 	bl	ba70e <memcpy>
   bbcb4:	4621      	mov	r1, r4
   bbcb6:	ee18 0a10 	vmov	r0, s16
   bbcba:	f000 f93f 	bl	bbf3c <_Bfree>
   bbcbe:	464c      	mov	r4, r9
   bbcc0:	6923      	ldr	r3, [r4, #16]
   bbcc2:	1c5a      	adds	r2, r3, #1
   bbcc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bbcc8:	6122      	str	r2, [r4, #16]
   bbcca:	2201      	movs	r2, #1
   bbccc:	615a      	str	r2, [r3, #20]
   bbcce:	e7bb      	b.n	bbc48 <__gethex+0x3c8>
   bbcd0:	6922      	ldr	r2, [r4, #16]
   bbcd2:	455a      	cmp	r2, fp
   bbcd4:	dd0b      	ble.n	bbcee <__gethex+0x46e>
   bbcd6:	2101      	movs	r1, #1
   bbcd8:	4620      	mov	r0, r4
   bbcda:	f7ff fd69 	bl	bb7b0 <rshift>
   bbcde:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bbce2:	3501      	adds	r5, #1
   bbce4:	42ab      	cmp	r3, r5
   bbce6:	f6ff aed0 	blt.w	bba8a <__gethex+0x20a>
   bbcea:	2701      	movs	r7, #1
   bbcec:	e7c0      	b.n	bbc70 <__gethex+0x3f0>
   bbcee:	f016 061f 	ands.w	r6, r6, #31
   bbcf2:	d0fa      	beq.n	bbcea <__gethex+0x46a>
   bbcf4:	4453      	add	r3, sl
   bbcf6:	f1c6 0620 	rsb	r6, r6, #32
   bbcfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bbcfe:	f000 f9cf 	bl	bc0a0 <__hi0bits>
   bbd02:	42b0      	cmp	r0, r6
   bbd04:	dbe7      	blt.n	bbcd6 <__gethex+0x456>
   bbd06:	e7f0      	b.n	bbcea <__gethex+0x46a>
   bbd08:	000bd650 	.word	0x000bd650

000bbd0c <L_shift>:
   bbd0c:	f1c2 0208 	rsb	r2, r2, #8
   bbd10:	0092      	lsls	r2, r2, #2
   bbd12:	b570      	push	{r4, r5, r6, lr}
   bbd14:	f1c2 0620 	rsb	r6, r2, #32
   bbd18:	6843      	ldr	r3, [r0, #4]
   bbd1a:	6804      	ldr	r4, [r0, #0]
   bbd1c:	fa03 f506 	lsl.w	r5, r3, r6
   bbd20:	432c      	orrs	r4, r5
   bbd22:	40d3      	lsrs	r3, r2
   bbd24:	6004      	str	r4, [r0, #0]
   bbd26:	f840 3f04 	str.w	r3, [r0, #4]!
   bbd2a:	4288      	cmp	r0, r1
   bbd2c:	d3f4      	bcc.n	bbd18 <L_shift+0xc>
   bbd2e:	bd70      	pop	{r4, r5, r6, pc}

000bbd30 <__match>:
   bbd30:	b530      	push	{r4, r5, lr}
   bbd32:	6803      	ldr	r3, [r0, #0]
   bbd34:	3301      	adds	r3, #1
   bbd36:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbd3a:	b914      	cbnz	r4, bbd42 <__match+0x12>
   bbd3c:	6003      	str	r3, [r0, #0]
   bbd3e:	2001      	movs	r0, #1
   bbd40:	bd30      	pop	{r4, r5, pc}
   bbd42:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbd46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bbd4a:	2d19      	cmp	r5, #25
   bbd4c:	bf98      	it	ls
   bbd4e:	3220      	addls	r2, #32
   bbd50:	42a2      	cmp	r2, r4
   bbd52:	d0f0      	beq.n	bbd36 <__match+0x6>
   bbd54:	2000      	movs	r0, #0
   bbd56:	e7f3      	b.n	bbd40 <__match+0x10>

000bbd58 <__hexnan>:
   bbd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbd5c:	680b      	ldr	r3, [r1, #0]
   bbd5e:	115e      	asrs	r6, r3, #5
   bbd60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bbd64:	f013 031f 	ands.w	r3, r3, #31
   bbd68:	b087      	sub	sp, #28
   bbd6a:	bf18      	it	ne
   bbd6c:	3604      	addne	r6, #4
   bbd6e:	2500      	movs	r5, #0
   bbd70:	1f37      	subs	r7, r6, #4
   bbd72:	4690      	mov	r8, r2
   bbd74:	6802      	ldr	r2, [r0, #0]
   bbd76:	9301      	str	r3, [sp, #4]
   bbd78:	4682      	mov	sl, r0
   bbd7a:	f846 5c04 	str.w	r5, [r6, #-4]
   bbd7e:	46b9      	mov	r9, r7
   bbd80:	463c      	mov	r4, r7
   bbd82:	9502      	str	r5, [sp, #8]
   bbd84:	46ab      	mov	fp, r5
   bbd86:	7851      	ldrb	r1, [r2, #1]
   bbd88:	1c53      	adds	r3, r2, #1
   bbd8a:	9303      	str	r3, [sp, #12]
   bbd8c:	b341      	cbz	r1, bbde0 <__hexnan+0x88>
   bbd8e:	4608      	mov	r0, r1
   bbd90:	9205      	str	r2, [sp, #20]
   bbd92:	9104      	str	r1, [sp, #16]
   bbd94:	f7ff fd5e 	bl	bb854 <__hexdig_fun>
   bbd98:	2800      	cmp	r0, #0
   bbd9a:	d14f      	bne.n	bbe3c <__hexnan+0xe4>
   bbd9c:	9904      	ldr	r1, [sp, #16]
   bbd9e:	9a05      	ldr	r2, [sp, #20]
   bbda0:	2920      	cmp	r1, #32
   bbda2:	d818      	bhi.n	bbdd6 <__hexnan+0x7e>
   bbda4:	9b02      	ldr	r3, [sp, #8]
   bbda6:	459b      	cmp	fp, r3
   bbda8:	dd13      	ble.n	bbdd2 <__hexnan+0x7a>
   bbdaa:	454c      	cmp	r4, r9
   bbdac:	d206      	bcs.n	bbdbc <__hexnan+0x64>
   bbdae:	2d07      	cmp	r5, #7
   bbdb0:	dc04      	bgt.n	bbdbc <__hexnan+0x64>
   bbdb2:	462a      	mov	r2, r5
   bbdb4:	4649      	mov	r1, r9
   bbdb6:	4620      	mov	r0, r4
   bbdb8:	f7ff ffa8 	bl	bbd0c <L_shift>
   bbdbc:	4544      	cmp	r4, r8
   bbdbe:	d950      	bls.n	bbe62 <__hexnan+0x10a>
   bbdc0:	2300      	movs	r3, #0
   bbdc2:	f1a4 0904 	sub.w	r9, r4, #4
   bbdc6:	f844 3c04 	str.w	r3, [r4, #-4]
   bbdca:	f8cd b008 	str.w	fp, [sp, #8]
   bbdce:	464c      	mov	r4, r9
   bbdd0:	461d      	mov	r5, r3
   bbdd2:	9a03      	ldr	r2, [sp, #12]
   bbdd4:	e7d7      	b.n	bbd86 <__hexnan+0x2e>
   bbdd6:	2929      	cmp	r1, #41	; 0x29
   bbdd8:	d156      	bne.n	bbe88 <__hexnan+0x130>
   bbdda:	3202      	adds	r2, #2
   bbddc:	f8ca 2000 	str.w	r2, [sl]
   bbde0:	f1bb 0f00 	cmp.w	fp, #0
   bbde4:	d050      	beq.n	bbe88 <__hexnan+0x130>
   bbde6:	454c      	cmp	r4, r9
   bbde8:	d206      	bcs.n	bbdf8 <__hexnan+0xa0>
   bbdea:	2d07      	cmp	r5, #7
   bbdec:	dc04      	bgt.n	bbdf8 <__hexnan+0xa0>
   bbdee:	462a      	mov	r2, r5
   bbdf0:	4649      	mov	r1, r9
   bbdf2:	4620      	mov	r0, r4
   bbdf4:	f7ff ff8a 	bl	bbd0c <L_shift>
   bbdf8:	4544      	cmp	r4, r8
   bbdfa:	d934      	bls.n	bbe66 <__hexnan+0x10e>
   bbdfc:	f1a8 0204 	sub.w	r2, r8, #4
   bbe00:	4623      	mov	r3, r4
   bbe02:	f853 1b04 	ldr.w	r1, [r3], #4
   bbe06:	f842 1f04 	str.w	r1, [r2, #4]!
   bbe0a:	429f      	cmp	r7, r3
   bbe0c:	d2f9      	bcs.n	bbe02 <__hexnan+0xaa>
   bbe0e:	1b3b      	subs	r3, r7, r4
   bbe10:	f023 0303 	bic.w	r3, r3, #3
   bbe14:	3304      	adds	r3, #4
   bbe16:	3401      	adds	r4, #1
   bbe18:	3e03      	subs	r6, #3
   bbe1a:	42b4      	cmp	r4, r6
   bbe1c:	bf88      	it	hi
   bbe1e:	2304      	movhi	r3, #4
   bbe20:	4443      	add	r3, r8
   bbe22:	2200      	movs	r2, #0
   bbe24:	f843 2b04 	str.w	r2, [r3], #4
   bbe28:	429f      	cmp	r7, r3
   bbe2a:	d2fb      	bcs.n	bbe24 <__hexnan+0xcc>
   bbe2c:	683b      	ldr	r3, [r7, #0]
   bbe2e:	b91b      	cbnz	r3, bbe38 <__hexnan+0xe0>
   bbe30:	4547      	cmp	r7, r8
   bbe32:	d127      	bne.n	bbe84 <__hexnan+0x12c>
   bbe34:	2301      	movs	r3, #1
   bbe36:	603b      	str	r3, [r7, #0]
   bbe38:	2005      	movs	r0, #5
   bbe3a:	e026      	b.n	bbe8a <__hexnan+0x132>
   bbe3c:	3501      	adds	r5, #1
   bbe3e:	2d08      	cmp	r5, #8
   bbe40:	f10b 0b01 	add.w	fp, fp, #1
   bbe44:	dd06      	ble.n	bbe54 <__hexnan+0xfc>
   bbe46:	4544      	cmp	r4, r8
   bbe48:	d9c3      	bls.n	bbdd2 <__hexnan+0x7a>
   bbe4a:	2300      	movs	r3, #0
   bbe4c:	f844 3c04 	str.w	r3, [r4, #-4]
   bbe50:	2501      	movs	r5, #1
   bbe52:	3c04      	subs	r4, #4
   bbe54:	6822      	ldr	r2, [r4, #0]
   bbe56:	f000 000f 	and.w	r0, r0, #15
   bbe5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bbe5e:	6022      	str	r2, [r4, #0]
   bbe60:	e7b7      	b.n	bbdd2 <__hexnan+0x7a>
   bbe62:	2508      	movs	r5, #8
   bbe64:	e7b5      	b.n	bbdd2 <__hexnan+0x7a>
   bbe66:	9b01      	ldr	r3, [sp, #4]
   bbe68:	2b00      	cmp	r3, #0
   bbe6a:	d0df      	beq.n	bbe2c <__hexnan+0xd4>
   bbe6c:	f04f 32ff 	mov.w	r2, #4294967295
   bbe70:	f1c3 0320 	rsb	r3, r3, #32
   bbe74:	fa22 f303 	lsr.w	r3, r2, r3
   bbe78:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bbe7c:	401a      	ands	r2, r3
   bbe7e:	f846 2c04 	str.w	r2, [r6, #-4]
   bbe82:	e7d3      	b.n	bbe2c <__hexnan+0xd4>
   bbe84:	3f04      	subs	r7, #4
   bbe86:	e7d1      	b.n	bbe2c <__hexnan+0xd4>
   bbe88:	2004      	movs	r0, #4
   bbe8a:	b007      	add	sp, #28
   bbe8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbe90 <__retarget_lock_acquire_recursive>:
   bbe90:	4770      	bx	lr

000bbe92 <__retarget_lock_release>:
   bbe92:	4770      	bx	lr

000bbe94 <__retarget_lock_release_recursive>:
   bbe94:	4770      	bx	lr

000bbe96 <__ascii_mbtowc>:
   bbe96:	b082      	sub	sp, #8
   bbe98:	b901      	cbnz	r1, bbe9c <__ascii_mbtowc+0x6>
   bbe9a:	a901      	add	r1, sp, #4
   bbe9c:	b142      	cbz	r2, bbeb0 <__ascii_mbtowc+0x1a>
   bbe9e:	b14b      	cbz	r3, bbeb4 <__ascii_mbtowc+0x1e>
   bbea0:	7813      	ldrb	r3, [r2, #0]
   bbea2:	600b      	str	r3, [r1, #0]
   bbea4:	7812      	ldrb	r2, [r2, #0]
   bbea6:	1e10      	subs	r0, r2, #0
   bbea8:	bf18      	it	ne
   bbeaa:	2001      	movne	r0, #1
   bbeac:	b002      	add	sp, #8
   bbeae:	4770      	bx	lr
   bbeb0:	4610      	mov	r0, r2
   bbeb2:	e7fb      	b.n	bbeac <__ascii_mbtowc+0x16>
   bbeb4:	f06f 0001 	mvn.w	r0, #1
   bbeb8:	e7f8      	b.n	bbeac <__ascii_mbtowc+0x16>
	...

000bbebc <_Balloc>:
   bbebc:	b570      	push	{r4, r5, r6, lr}
   bbebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbec0:	4604      	mov	r4, r0
   bbec2:	460d      	mov	r5, r1
   bbec4:	b976      	cbnz	r6, bbee4 <_Balloc+0x28>
   bbec6:	2010      	movs	r0, #16
   bbec8:	f7fa fb8a 	bl	b65e0 <malloc>
   bbecc:	4602      	mov	r2, r0
   bbece:	6260      	str	r0, [r4, #36]	; 0x24
   bbed0:	b920      	cbnz	r0, bbedc <_Balloc+0x20>
   bbed2:	4b18      	ldr	r3, [pc, #96]	; (bbf34 <_Balloc+0x78>)
   bbed4:	4818      	ldr	r0, [pc, #96]	; (bbf38 <_Balloc+0x7c>)
   bbed6:	2166      	movs	r1, #102	; 0x66
   bbed8:	f7fa fbca 	bl	b6670 <__assert_func>
   bbedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbee0:	6006      	str	r6, [r0, #0]
   bbee2:	60c6      	str	r6, [r0, #12]
   bbee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bbee6:	68f3      	ldr	r3, [r6, #12]
   bbee8:	b183      	cbz	r3, bbf0c <_Balloc+0x50>
   bbeea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbeec:	68db      	ldr	r3, [r3, #12]
   bbeee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bbef2:	b9b8      	cbnz	r0, bbf24 <_Balloc+0x68>
   bbef4:	2101      	movs	r1, #1
   bbef6:	fa01 f605 	lsl.w	r6, r1, r5
   bbefa:	1d72      	adds	r2, r6, #5
   bbefc:	0092      	lsls	r2, r2, #2
   bbefe:	4620      	mov	r0, r4
   bbf00:	f000 fc9d 	bl	bc83e <_calloc_r>
   bbf04:	b160      	cbz	r0, bbf20 <_Balloc+0x64>
   bbf06:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bbf0a:	e00e      	b.n	bbf2a <_Balloc+0x6e>
   bbf0c:	2221      	movs	r2, #33	; 0x21
   bbf0e:	2104      	movs	r1, #4
   bbf10:	4620      	mov	r0, r4
   bbf12:	f000 fc94 	bl	bc83e <_calloc_r>
   bbf16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbf18:	60f0      	str	r0, [r6, #12]
   bbf1a:	68db      	ldr	r3, [r3, #12]
   bbf1c:	2b00      	cmp	r3, #0
   bbf1e:	d1e4      	bne.n	bbeea <_Balloc+0x2e>
   bbf20:	2000      	movs	r0, #0
   bbf22:	bd70      	pop	{r4, r5, r6, pc}
   bbf24:	6802      	ldr	r2, [r0, #0]
   bbf26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bbf2a:	2300      	movs	r3, #0
   bbf2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bbf30:	e7f7      	b.n	bbf22 <_Balloc+0x66>
   bbf32:	bf00      	nop
   bbf34:	000bd3dd 	.word	0x000bd3dd
   bbf38:	000bd6fc 	.word	0x000bd6fc

000bbf3c <_Bfree>:
   bbf3c:	b570      	push	{r4, r5, r6, lr}
   bbf3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbf40:	4605      	mov	r5, r0
   bbf42:	460c      	mov	r4, r1
   bbf44:	b976      	cbnz	r6, bbf64 <_Bfree+0x28>
   bbf46:	2010      	movs	r0, #16
   bbf48:	f7fa fb4a 	bl	b65e0 <malloc>
   bbf4c:	4602      	mov	r2, r0
   bbf4e:	6268      	str	r0, [r5, #36]	; 0x24
   bbf50:	b920      	cbnz	r0, bbf5c <_Bfree+0x20>
   bbf52:	4b09      	ldr	r3, [pc, #36]	; (bbf78 <_Bfree+0x3c>)
   bbf54:	4809      	ldr	r0, [pc, #36]	; (bbf7c <_Bfree+0x40>)
   bbf56:	218a      	movs	r1, #138	; 0x8a
   bbf58:	f7fa fb8a 	bl	b6670 <__assert_func>
   bbf5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbf60:	6006      	str	r6, [r0, #0]
   bbf62:	60c6      	str	r6, [r0, #12]
   bbf64:	b13c      	cbz	r4, bbf76 <_Bfree+0x3a>
   bbf66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bbf68:	6862      	ldr	r2, [r4, #4]
   bbf6a:	68db      	ldr	r3, [r3, #12]
   bbf6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bbf70:	6021      	str	r1, [r4, #0]
   bbf72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bbf76:	bd70      	pop	{r4, r5, r6, pc}
   bbf78:	000bd3dd 	.word	0x000bd3dd
   bbf7c:	000bd6fc 	.word	0x000bd6fc

000bbf80 <__multadd>:
   bbf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbf84:	690d      	ldr	r5, [r1, #16]
   bbf86:	4607      	mov	r7, r0
   bbf88:	460c      	mov	r4, r1
   bbf8a:	461e      	mov	r6, r3
   bbf8c:	f101 0c14 	add.w	ip, r1, #20
   bbf90:	2000      	movs	r0, #0
   bbf92:	f8dc 3000 	ldr.w	r3, [ip]
   bbf96:	b299      	uxth	r1, r3
   bbf98:	fb02 6101 	mla	r1, r2, r1, r6
   bbf9c:	0c1e      	lsrs	r6, r3, #16
   bbf9e:	0c0b      	lsrs	r3, r1, #16
   bbfa0:	fb02 3306 	mla	r3, r2, r6, r3
   bbfa4:	b289      	uxth	r1, r1
   bbfa6:	3001      	adds	r0, #1
   bbfa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bbfac:	4285      	cmp	r5, r0
   bbfae:	f84c 1b04 	str.w	r1, [ip], #4
   bbfb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bbfb6:	dcec      	bgt.n	bbf92 <__multadd+0x12>
   bbfb8:	b30e      	cbz	r6, bbffe <__multadd+0x7e>
   bbfba:	68a3      	ldr	r3, [r4, #8]
   bbfbc:	42ab      	cmp	r3, r5
   bbfbe:	dc19      	bgt.n	bbff4 <__multadd+0x74>
   bbfc0:	6861      	ldr	r1, [r4, #4]
   bbfc2:	4638      	mov	r0, r7
   bbfc4:	3101      	adds	r1, #1
   bbfc6:	f7ff ff79 	bl	bbebc <_Balloc>
   bbfca:	4680      	mov	r8, r0
   bbfcc:	b928      	cbnz	r0, bbfda <__multadd+0x5a>
   bbfce:	4602      	mov	r2, r0
   bbfd0:	4b0c      	ldr	r3, [pc, #48]	; (bc004 <__multadd+0x84>)
   bbfd2:	480d      	ldr	r0, [pc, #52]	; (bc008 <__multadd+0x88>)
   bbfd4:	21b5      	movs	r1, #181	; 0xb5
   bbfd6:	f7fa fb4b 	bl	b6670 <__assert_func>
   bbfda:	6922      	ldr	r2, [r4, #16]
   bbfdc:	3202      	adds	r2, #2
   bbfde:	f104 010c 	add.w	r1, r4, #12
   bbfe2:	0092      	lsls	r2, r2, #2
   bbfe4:	300c      	adds	r0, #12
   bbfe6:	f7fe fb92 	bl	ba70e <memcpy>
   bbfea:	4621      	mov	r1, r4
   bbfec:	4638      	mov	r0, r7
   bbfee:	f7ff ffa5 	bl	bbf3c <_Bfree>
   bbff2:	4644      	mov	r4, r8
   bbff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bbff8:	3501      	adds	r5, #1
   bbffa:	615e      	str	r6, [r3, #20]
   bbffc:	6125      	str	r5, [r4, #16]
   bbffe:	4620      	mov	r0, r4
   bc000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc004:	000bd650 	.word	0x000bd650
   bc008:	000bd6fc 	.word	0x000bd6fc

000bc00c <__s2b>:
   bc00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc010:	460c      	mov	r4, r1
   bc012:	4615      	mov	r5, r2
   bc014:	461f      	mov	r7, r3
   bc016:	2209      	movs	r2, #9
   bc018:	3308      	adds	r3, #8
   bc01a:	4606      	mov	r6, r0
   bc01c:	fb93 f3f2 	sdiv	r3, r3, r2
   bc020:	2100      	movs	r1, #0
   bc022:	2201      	movs	r2, #1
   bc024:	429a      	cmp	r2, r3
   bc026:	db09      	blt.n	bc03c <__s2b+0x30>
   bc028:	4630      	mov	r0, r6
   bc02a:	f7ff ff47 	bl	bbebc <_Balloc>
   bc02e:	b940      	cbnz	r0, bc042 <__s2b+0x36>
   bc030:	4602      	mov	r2, r0
   bc032:	4b19      	ldr	r3, [pc, #100]	; (bc098 <__s2b+0x8c>)
   bc034:	4819      	ldr	r0, [pc, #100]	; (bc09c <__s2b+0x90>)
   bc036:	21ce      	movs	r1, #206	; 0xce
   bc038:	f7fa fb1a 	bl	b6670 <__assert_func>
   bc03c:	0052      	lsls	r2, r2, #1
   bc03e:	3101      	adds	r1, #1
   bc040:	e7f0      	b.n	bc024 <__s2b+0x18>
   bc042:	9b08      	ldr	r3, [sp, #32]
   bc044:	6143      	str	r3, [r0, #20]
   bc046:	2d09      	cmp	r5, #9
   bc048:	f04f 0301 	mov.w	r3, #1
   bc04c:	6103      	str	r3, [r0, #16]
   bc04e:	dd16      	ble.n	bc07e <__s2b+0x72>
   bc050:	f104 0909 	add.w	r9, r4, #9
   bc054:	46c8      	mov	r8, r9
   bc056:	442c      	add	r4, r5
   bc058:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc05c:	4601      	mov	r1, r0
   bc05e:	3b30      	subs	r3, #48	; 0x30
   bc060:	220a      	movs	r2, #10
   bc062:	4630      	mov	r0, r6
   bc064:	f7ff ff8c 	bl	bbf80 <__multadd>
   bc068:	45a0      	cmp	r8, r4
   bc06a:	d1f5      	bne.n	bc058 <__s2b+0x4c>
   bc06c:	f1a5 0408 	sub.w	r4, r5, #8
   bc070:	444c      	add	r4, r9
   bc072:	1b2d      	subs	r5, r5, r4
   bc074:	1963      	adds	r3, r4, r5
   bc076:	42bb      	cmp	r3, r7
   bc078:	db04      	blt.n	bc084 <__s2b+0x78>
   bc07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc07e:	340a      	adds	r4, #10
   bc080:	2509      	movs	r5, #9
   bc082:	e7f6      	b.n	bc072 <__s2b+0x66>
   bc084:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc088:	4601      	mov	r1, r0
   bc08a:	3b30      	subs	r3, #48	; 0x30
   bc08c:	220a      	movs	r2, #10
   bc08e:	4630      	mov	r0, r6
   bc090:	f7ff ff76 	bl	bbf80 <__multadd>
   bc094:	e7ee      	b.n	bc074 <__s2b+0x68>
   bc096:	bf00      	nop
   bc098:	000bd650 	.word	0x000bd650
   bc09c:	000bd6fc 	.word	0x000bd6fc

000bc0a0 <__hi0bits>:
   bc0a0:	0c03      	lsrs	r3, r0, #16
   bc0a2:	041b      	lsls	r3, r3, #16
   bc0a4:	b9d3      	cbnz	r3, bc0dc <__hi0bits+0x3c>
   bc0a6:	0400      	lsls	r0, r0, #16
   bc0a8:	2310      	movs	r3, #16
   bc0aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bc0ae:	bf04      	itt	eq
   bc0b0:	0200      	lsleq	r0, r0, #8
   bc0b2:	3308      	addeq	r3, #8
   bc0b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bc0b8:	bf04      	itt	eq
   bc0ba:	0100      	lsleq	r0, r0, #4
   bc0bc:	3304      	addeq	r3, #4
   bc0be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bc0c2:	bf04      	itt	eq
   bc0c4:	0080      	lsleq	r0, r0, #2
   bc0c6:	3302      	addeq	r3, #2
   bc0c8:	2800      	cmp	r0, #0
   bc0ca:	db05      	blt.n	bc0d8 <__hi0bits+0x38>
   bc0cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bc0d0:	f103 0301 	add.w	r3, r3, #1
   bc0d4:	bf08      	it	eq
   bc0d6:	2320      	moveq	r3, #32
   bc0d8:	4618      	mov	r0, r3
   bc0da:	4770      	bx	lr
   bc0dc:	2300      	movs	r3, #0
   bc0de:	e7e4      	b.n	bc0aa <__hi0bits+0xa>

000bc0e0 <__lo0bits>:
   bc0e0:	6803      	ldr	r3, [r0, #0]
   bc0e2:	f013 0207 	ands.w	r2, r3, #7
   bc0e6:	4601      	mov	r1, r0
   bc0e8:	d00b      	beq.n	bc102 <__lo0bits+0x22>
   bc0ea:	07da      	lsls	r2, r3, #31
   bc0ec:	d423      	bmi.n	bc136 <__lo0bits+0x56>
   bc0ee:	0798      	lsls	r0, r3, #30
   bc0f0:	bf49      	itett	mi
   bc0f2:	085b      	lsrmi	r3, r3, #1
   bc0f4:	089b      	lsrpl	r3, r3, #2
   bc0f6:	2001      	movmi	r0, #1
   bc0f8:	600b      	strmi	r3, [r1, #0]
   bc0fa:	bf5c      	itt	pl
   bc0fc:	600b      	strpl	r3, [r1, #0]
   bc0fe:	2002      	movpl	r0, #2
   bc100:	4770      	bx	lr
   bc102:	b298      	uxth	r0, r3
   bc104:	b9a8      	cbnz	r0, bc132 <__lo0bits+0x52>
   bc106:	0c1b      	lsrs	r3, r3, #16
   bc108:	2010      	movs	r0, #16
   bc10a:	b2da      	uxtb	r2, r3
   bc10c:	b90a      	cbnz	r2, bc112 <__lo0bits+0x32>
   bc10e:	3008      	adds	r0, #8
   bc110:	0a1b      	lsrs	r3, r3, #8
   bc112:	071a      	lsls	r2, r3, #28
   bc114:	bf04      	itt	eq
   bc116:	091b      	lsreq	r3, r3, #4
   bc118:	3004      	addeq	r0, #4
   bc11a:	079a      	lsls	r2, r3, #30
   bc11c:	bf04      	itt	eq
   bc11e:	089b      	lsreq	r3, r3, #2
   bc120:	3002      	addeq	r0, #2
   bc122:	07da      	lsls	r2, r3, #31
   bc124:	d403      	bmi.n	bc12e <__lo0bits+0x4e>
   bc126:	085b      	lsrs	r3, r3, #1
   bc128:	f100 0001 	add.w	r0, r0, #1
   bc12c:	d005      	beq.n	bc13a <__lo0bits+0x5a>
   bc12e:	600b      	str	r3, [r1, #0]
   bc130:	4770      	bx	lr
   bc132:	4610      	mov	r0, r2
   bc134:	e7e9      	b.n	bc10a <__lo0bits+0x2a>
   bc136:	2000      	movs	r0, #0
   bc138:	4770      	bx	lr
   bc13a:	2020      	movs	r0, #32
   bc13c:	4770      	bx	lr
	...

000bc140 <__i2b>:
   bc140:	b510      	push	{r4, lr}
   bc142:	460c      	mov	r4, r1
   bc144:	2101      	movs	r1, #1
   bc146:	f7ff feb9 	bl	bbebc <_Balloc>
   bc14a:	4602      	mov	r2, r0
   bc14c:	b928      	cbnz	r0, bc15a <__i2b+0x1a>
   bc14e:	4b05      	ldr	r3, [pc, #20]	; (bc164 <__i2b+0x24>)
   bc150:	4805      	ldr	r0, [pc, #20]	; (bc168 <__i2b+0x28>)
   bc152:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bc156:	f7fa fa8b 	bl	b6670 <__assert_func>
   bc15a:	2301      	movs	r3, #1
   bc15c:	6144      	str	r4, [r0, #20]
   bc15e:	6103      	str	r3, [r0, #16]
   bc160:	bd10      	pop	{r4, pc}
   bc162:	bf00      	nop
   bc164:	000bd650 	.word	0x000bd650
   bc168:	000bd6fc 	.word	0x000bd6fc

000bc16c <__multiply>:
   bc16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc170:	4691      	mov	r9, r2
   bc172:	690a      	ldr	r2, [r1, #16]
   bc174:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc178:	429a      	cmp	r2, r3
   bc17a:	bfb8      	it	lt
   bc17c:	460b      	movlt	r3, r1
   bc17e:	460c      	mov	r4, r1
   bc180:	bfbc      	itt	lt
   bc182:	464c      	movlt	r4, r9
   bc184:	4699      	movlt	r9, r3
   bc186:	6927      	ldr	r7, [r4, #16]
   bc188:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bc18c:	68a3      	ldr	r3, [r4, #8]
   bc18e:	6861      	ldr	r1, [r4, #4]
   bc190:	eb07 060a 	add.w	r6, r7, sl
   bc194:	42b3      	cmp	r3, r6
   bc196:	b085      	sub	sp, #20
   bc198:	bfb8      	it	lt
   bc19a:	3101      	addlt	r1, #1
   bc19c:	f7ff fe8e 	bl	bbebc <_Balloc>
   bc1a0:	b930      	cbnz	r0, bc1b0 <__multiply+0x44>
   bc1a2:	4602      	mov	r2, r0
   bc1a4:	4b44      	ldr	r3, [pc, #272]	; (bc2b8 <__multiply+0x14c>)
   bc1a6:	4845      	ldr	r0, [pc, #276]	; (bc2bc <__multiply+0x150>)
   bc1a8:	f240 115d 	movw	r1, #349	; 0x15d
   bc1ac:	f7fa fa60 	bl	b6670 <__assert_func>
   bc1b0:	f100 0514 	add.w	r5, r0, #20
   bc1b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bc1b8:	462b      	mov	r3, r5
   bc1ba:	2200      	movs	r2, #0
   bc1bc:	4543      	cmp	r3, r8
   bc1be:	d321      	bcc.n	bc204 <__multiply+0x98>
   bc1c0:	f104 0314 	add.w	r3, r4, #20
   bc1c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bc1c8:	f109 0314 	add.w	r3, r9, #20
   bc1cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bc1d0:	9202      	str	r2, [sp, #8]
   bc1d2:	1b3a      	subs	r2, r7, r4
   bc1d4:	3a15      	subs	r2, #21
   bc1d6:	f022 0203 	bic.w	r2, r2, #3
   bc1da:	3204      	adds	r2, #4
   bc1dc:	f104 0115 	add.w	r1, r4, #21
   bc1e0:	428f      	cmp	r7, r1
   bc1e2:	bf38      	it	cc
   bc1e4:	2204      	movcc	r2, #4
   bc1e6:	9201      	str	r2, [sp, #4]
   bc1e8:	9a02      	ldr	r2, [sp, #8]
   bc1ea:	9303      	str	r3, [sp, #12]
   bc1ec:	429a      	cmp	r2, r3
   bc1ee:	d80c      	bhi.n	bc20a <__multiply+0x9e>
   bc1f0:	2e00      	cmp	r6, #0
   bc1f2:	dd03      	ble.n	bc1fc <__multiply+0x90>
   bc1f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bc1f8:	2b00      	cmp	r3, #0
   bc1fa:	d05a      	beq.n	bc2b2 <__multiply+0x146>
   bc1fc:	6106      	str	r6, [r0, #16]
   bc1fe:	b005      	add	sp, #20
   bc200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc204:	f843 2b04 	str.w	r2, [r3], #4
   bc208:	e7d8      	b.n	bc1bc <__multiply+0x50>
   bc20a:	f8b3 a000 	ldrh.w	sl, [r3]
   bc20e:	f1ba 0f00 	cmp.w	sl, #0
   bc212:	d024      	beq.n	bc25e <__multiply+0xf2>
   bc214:	f104 0e14 	add.w	lr, r4, #20
   bc218:	46a9      	mov	r9, r5
   bc21a:	f04f 0c00 	mov.w	ip, #0
   bc21e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bc222:	f8d9 1000 	ldr.w	r1, [r9]
   bc226:	fa1f fb82 	uxth.w	fp, r2
   bc22a:	b289      	uxth	r1, r1
   bc22c:	fb0a 110b 	mla	r1, sl, fp, r1
   bc230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bc234:	f8d9 2000 	ldr.w	r2, [r9]
   bc238:	4461      	add	r1, ip
   bc23a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc23e:	fb0a c20b 	mla	r2, sl, fp, ip
   bc242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bc246:	b289      	uxth	r1, r1
   bc248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bc24c:	4577      	cmp	r7, lr
   bc24e:	f849 1b04 	str.w	r1, [r9], #4
   bc252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc256:	d8e2      	bhi.n	bc21e <__multiply+0xb2>
   bc258:	9a01      	ldr	r2, [sp, #4]
   bc25a:	f845 c002 	str.w	ip, [r5, r2]
   bc25e:	9a03      	ldr	r2, [sp, #12]
   bc260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bc264:	3304      	adds	r3, #4
   bc266:	f1b9 0f00 	cmp.w	r9, #0
   bc26a:	d020      	beq.n	bc2ae <__multiply+0x142>
   bc26c:	6829      	ldr	r1, [r5, #0]
   bc26e:	f104 0c14 	add.w	ip, r4, #20
   bc272:	46ae      	mov	lr, r5
   bc274:	f04f 0a00 	mov.w	sl, #0
   bc278:	f8bc b000 	ldrh.w	fp, [ip]
   bc27c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bc280:	fb09 220b 	mla	r2, r9, fp, r2
   bc284:	4492      	add	sl, r2
   bc286:	b289      	uxth	r1, r1
   bc288:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bc28c:	f84e 1b04 	str.w	r1, [lr], #4
   bc290:	f85c 2b04 	ldr.w	r2, [ip], #4
   bc294:	f8be 1000 	ldrh.w	r1, [lr]
   bc298:	0c12      	lsrs	r2, r2, #16
   bc29a:	fb09 1102 	mla	r1, r9, r2, r1
   bc29e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bc2a2:	4567      	cmp	r7, ip
   bc2a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bc2a8:	d8e6      	bhi.n	bc278 <__multiply+0x10c>
   bc2aa:	9a01      	ldr	r2, [sp, #4]
   bc2ac:	50a9      	str	r1, [r5, r2]
   bc2ae:	3504      	adds	r5, #4
   bc2b0:	e79a      	b.n	bc1e8 <__multiply+0x7c>
   bc2b2:	3e01      	subs	r6, #1
   bc2b4:	e79c      	b.n	bc1f0 <__multiply+0x84>
   bc2b6:	bf00      	nop
   bc2b8:	000bd650 	.word	0x000bd650
   bc2bc:	000bd6fc 	.word	0x000bd6fc

000bc2c0 <__pow5mult>:
   bc2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc2c4:	4615      	mov	r5, r2
   bc2c6:	f012 0203 	ands.w	r2, r2, #3
   bc2ca:	4606      	mov	r6, r0
   bc2cc:	460f      	mov	r7, r1
   bc2ce:	d007      	beq.n	bc2e0 <__pow5mult+0x20>
   bc2d0:	4c25      	ldr	r4, [pc, #148]	; (bc368 <__pow5mult+0xa8>)
   bc2d2:	3a01      	subs	r2, #1
   bc2d4:	2300      	movs	r3, #0
   bc2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bc2da:	f7ff fe51 	bl	bbf80 <__multadd>
   bc2de:	4607      	mov	r7, r0
   bc2e0:	10ad      	asrs	r5, r5, #2
   bc2e2:	d03d      	beq.n	bc360 <__pow5mult+0xa0>
   bc2e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc2e6:	b97c      	cbnz	r4, bc308 <__pow5mult+0x48>
   bc2e8:	2010      	movs	r0, #16
   bc2ea:	f7fa f979 	bl	b65e0 <malloc>
   bc2ee:	4602      	mov	r2, r0
   bc2f0:	6270      	str	r0, [r6, #36]	; 0x24
   bc2f2:	b928      	cbnz	r0, bc300 <__pow5mult+0x40>
   bc2f4:	4b1d      	ldr	r3, [pc, #116]	; (bc36c <__pow5mult+0xac>)
   bc2f6:	481e      	ldr	r0, [pc, #120]	; (bc370 <__pow5mult+0xb0>)
   bc2f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bc2fc:	f7fa f9b8 	bl	b6670 <__assert_func>
   bc300:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc304:	6004      	str	r4, [r0, #0]
   bc306:	60c4      	str	r4, [r0, #12]
   bc308:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bc30c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bc310:	b94c      	cbnz	r4, bc326 <__pow5mult+0x66>
   bc312:	f240 2171 	movw	r1, #625	; 0x271
   bc316:	4630      	mov	r0, r6
   bc318:	f7ff ff12 	bl	bc140 <__i2b>
   bc31c:	2300      	movs	r3, #0
   bc31e:	f8c8 0008 	str.w	r0, [r8, #8]
   bc322:	4604      	mov	r4, r0
   bc324:	6003      	str	r3, [r0, #0]
   bc326:	f04f 0900 	mov.w	r9, #0
   bc32a:	07eb      	lsls	r3, r5, #31
   bc32c:	d50a      	bpl.n	bc344 <__pow5mult+0x84>
   bc32e:	4639      	mov	r1, r7
   bc330:	4622      	mov	r2, r4
   bc332:	4630      	mov	r0, r6
   bc334:	f7ff ff1a 	bl	bc16c <__multiply>
   bc338:	4639      	mov	r1, r7
   bc33a:	4680      	mov	r8, r0
   bc33c:	4630      	mov	r0, r6
   bc33e:	f7ff fdfd 	bl	bbf3c <_Bfree>
   bc342:	4647      	mov	r7, r8
   bc344:	106d      	asrs	r5, r5, #1
   bc346:	d00b      	beq.n	bc360 <__pow5mult+0xa0>
   bc348:	6820      	ldr	r0, [r4, #0]
   bc34a:	b938      	cbnz	r0, bc35c <__pow5mult+0x9c>
   bc34c:	4622      	mov	r2, r4
   bc34e:	4621      	mov	r1, r4
   bc350:	4630      	mov	r0, r6
   bc352:	f7ff ff0b 	bl	bc16c <__multiply>
   bc356:	6020      	str	r0, [r4, #0]
   bc358:	f8c0 9000 	str.w	r9, [r0]
   bc35c:	4604      	mov	r4, r0
   bc35e:	e7e4      	b.n	bc32a <__pow5mult+0x6a>
   bc360:	4638      	mov	r0, r7
   bc362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc366:	bf00      	nop
   bc368:	000bd870 	.word	0x000bd870
   bc36c:	000bd3dd 	.word	0x000bd3dd
   bc370:	000bd6fc 	.word	0x000bd6fc

000bc374 <__lshift>:
   bc374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc378:	460c      	mov	r4, r1
   bc37a:	6849      	ldr	r1, [r1, #4]
   bc37c:	6923      	ldr	r3, [r4, #16]
   bc37e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bc382:	68a3      	ldr	r3, [r4, #8]
   bc384:	4607      	mov	r7, r0
   bc386:	4691      	mov	r9, r2
   bc388:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bc38c:	f108 0601 	add.w	r6, r8, #1
   bc390:	42b3      	cmp	r3, r6
   bc392:	db0b      	blt.n	bc3ac <__lshift+0x38>
   bc394:	4638      	mov	r0, r7
   bc396:	f7ff fd91 	bl	bbebc <_Balloc>
   bc39a:	4605      	mov	r5, r0
   bc39c:	b948      	cbnz	r0, bc3b2 <__lshift+0x3e>
   bc39e:	4602      	mov	r2, r0
   bc3a0:	4b2a      	ldr	r3, [pc, #168]	; (bc44c <__lshift+0xd8>)
   bc3a2:	482b      	ldr	r0, [pc, #172]	; (bc450 <__lshift+0xdc>)
   bc3a4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bc3a8:	f7fa f962 	bl	b6670 <__assert_func>
   bc3ac:	3101      	adds	r1, #1
   bc3ae:	005b      	lsls	r3, r3, #1
   bc3b0:	e7ee      	b.n	bc390 <__lshift+0x1c>
   bc3b2:	2300      	movs	r3, #0
   bc3b4:	f100 0114 	add.w	r1, r0, #20
   bc3b8:	f100 0210 	add.w	r2, r0, #16
   bc3bc:	4618      	mov	r0, r3
   bc3be:	4553      	cmp	r3, sl
   bc3c0:	db37      	blt.n	bc432 <__lshift+0xbe>
   bc3c2:	6920      	ldr	r0, [r4, #16]
   bc3c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bc3c8:	f104 0314 	add.w	r3, r4, #20
   bc3cc:	f019 091f 	ands.w	r9, r9, #31
   bc3d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bc3d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bc3d8:	d02f      	beq.n	bc43a <__lshift+0xc6>
   bc3da:	f1c9 0e20 	rsb	lr, r9, #32
   bc3de:	468a      	mov	sl, r1
   bc3e0:	f04f 0c00 	mov.w	ip, #0
   bc3e4:	681a      	ldr	r2, [r3, #0]
   bc3e6:	fa02 f209 	lsl.w	r2, r2, r9
   bc3ea:	ea42 020c 	orr.w	r2, r2, ip
   bc3ee:	f84a 2b04 	str.w	r2, [sl], #4
   bc3f2:	f853 2b04 	ldr.w	r2, [r3], #4
   bc3f6:	4298      	cmp	r0, r3
   bc3f8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc3fc:	d8f2      	bhi.n	bc3e4 <__lshift+0x70>
   bc3fe:	1b03      	subs	r3, r0, r4
   bc400:	3b15      	subs	r3, #21
   bc402:	f023 0303 	bic.w	r3, r3, #3
   bc406:	3304      	adds	r3, #4
   bc408:	f104 0215 	add.w	r2, r4, #21
   bc40c:	4290      	cmp	r0, r2
   bc40e:	bf38      	it	cc
   bc410:	2304      	movcc	r3, #4
   bc412:	f841 c003 	str.w	ip, [r1, r3]
   bc416:	f1bc 0f00 	cmp.w	ip, #0
   bc41a:	d001      	beq.n	bc420 <__lshift+0xac>
   bc41c:	f108 0602 	add.w	r6, r8, #2
   bc420:	3e01      	subs	r6, #1
   bc422:	4638      	mov	r0, r7
   bc424:	612e      	str	r6, [r5, #16]
   bc426:	4621      	mov	r1, r4
   bc428:	f7ff fd88 	bl	bbf3c <_Bfree>
   bc42c:	4628      	mov	r0, r5
   bc42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc432:	f842 0f04 	str.w	r0, [r2, #4]!
   bc436:	3301      	adds	r3, #1
   bc438:	e7c1      	b.n	bc3be <__lshift+0x4a>
   bc43a:	3904      	subs	r1, #4
   bc43c:	f853 2b04 	ldr.w	r2, [r3], #4
   bc440:	f841 2f04 	str.w	r2, [r1, #4]!
   bc444:	4298      	cmp	r0, r3
   bc446:	d8f9      	bhi.n	bc43c <__lshift+0xc8>
   bc448:	e7ea      	b.n	bc420 <__lshift+0xac>
   bc44a:	bf00      	nop
   bc44c:	000bd650 	.word	0x000bd650
   bc450:	000bd6fc 	.word	0x000bd6fc

000bc454 <__mcmp>:
   bc454:	b530      	push	{r4, r5, lr}
   bc456:	6902      	ldr	r2, [r0, #16]
   bc458:	690c      	ldr	r4, [r1, #16]
   bc45a:	1b12      	subs	r2, r2, r4
   bc45c:	d10e      	bne.n	bc47c <__mcmp+0x28>
   bc45e:	f100 0314 	add.w	r3, r0, #20
   bc462:	3114      	adds	r1, #20
   bc464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bc468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bc46c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bc470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bc474:	42a5      	cmp	r5, r4
   bc476:	d003      	beq.n	bc480 <__mcmp+0x2c>
   bc478:	d305      	bcc.n	bc486 <__mcmp+0x32>
   bc47a:	2201      	movs	r2, #1
   bc47c:	4610      	mov	r0, r2
   bc47e:	bd30      	pop	{r4, r5, pc}
   bc480:	4283      	cmp	r3, r0
   bc482:	d3f3      	bcc.n	bc46c <__mcmp+0x18>
   bc484:	e7fa      	b.n	bc47c <__mcmp+0x28>
   bc486:	f04f 32ff 	mov.w	r2, #4294967295
   bc48a:	e7f7      	b.n	bc47c <__mcmp+0x28>

000bc48c <__mdiff>:
   bc48c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc490:	460c      	mov	r4, r1
   bc492:	4606      	mov	r6, r0
   bc494:	4611      	mov	r1, r2
   bc496:	4620      	mov	r0, r4
   bc498:	4690      	mov	r8, r2
   bc49a:	f7ff ffdb 	bl	bc454 <__mcmp>
   bc49e:	1e05      	subs	r5, r0, #0
   bc4a0:	d110      	bne.n	bc4c4 <__mdiff+0x38>
   bc4a2:	4629      	mov	r1, r5
   bc4a4:	4630      	mov	r0, r6
   bc4a6:	f7ff fd09 	bl	bbebc <_Balloc>
   bc4aa:	b930      	cbnz	r0, bc4ba <__mdiff+0x2e>
   bc4ac:	4b3a      	ldr	r3, [pc, #232]	; (bc598 <__mdiff+0x10c>)
   bc4ae:	4602      	mov	r2, r0
   bc4b0:	f240 2132 	movw	r1, #562	; 0x232
   bc4b4:	4839      	ldr	r0, [pc, #228]	; (bc59c <__mdiff+0x110>)
   bc4b6:	f7fa f8db 	bl	b6670 <__assert_func>
   bc4ba:	2301      	movs	r3, #1
   bc4bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc4c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc4c4:	bfa4      	itt	ge
   bc4c6:	4643      	movge	r3, r8
   bc4c8:	46a0      	movge	r8, r4
   bc4ca:	4630      	mov	r0, r6
   bc4cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc4d0:	bfa6      	itte	ge
   bc4d2:	461c      	movge	r4, r3
   bc4d4:	2500      	movge	r5, #0
   bc4d6:	2501      	movlt	r5, #1
   bc4d8:	f7ff fcf0 	bl	bbebc <_Balloc>
   bc4dc:	b920      	cbnz	r0, bc4e8 <__mdiff+0x5c>
   bc4de:	4b2e      	ldr	r3, [pc, #184]	; (bc598 <__mdiff+0x10c>)
   bc4e0:	4602      	mov	r2, r0
   bc4e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc4e6:	e7e5      	b.n	bc4b4 <__mdiff+0x28>
   bc4e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc4ec:	6926      	ldr	r6, [r4, #16]
   bc4ee:	60c5      	str	r5, [r0, #12]
   bc4f0:	f104 0914 	add.w	r9, r4, #20
   bc4f4:	f108 0514 	add.w	r5, r8, #20
   bc4f8:	f100 0e14 	add.w	lr, r0, #20
   bc4fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc504:	f108 0210 	add.w	r2, r8, #16
   bc508:	46f2      	mov	sl, lr
   bc50a:	2100      	movs	r1, #0
   bc50c:	f859 3b04 	ldr.w	r3, [r9], #4
   bc510:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc514:	fa1f f883 	uxth.w	r8, r3
   bc518:	fa11 f18b 	uxtah	r1, r1, fp
   bc51c:	0c1b      	lsrs	r3, r3, #16
   bc51e:	eba1 0808 	sub.w	r8, r1, r8
   bc522:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc526:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc52a:	fa1f f888 	uxth.w	r8, r8
   bc52e:	1419      	asrs	r1, r3, #16
   bc530:	454e      	cmp	r6, r9
   bc532:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc536:	f84a 3b04 	str.w	r3, [sl], #4
   bc53a:	d8e7      	bhi.n	bc50c <__mdiff+0x80>
   bc53c:	1b33      	subs	r3, r6, r4
   bc53e:	3b15      	subs	r3, #21
   bc540:	f023 0303 	bic.w	r3, r3, #3
   bc544:	3304      	adds	r3, #4
   bc546:	3415      	adds	r4, #21
   bc548:	42a6      	cmp	r6, r4
   bc54a:	bf38      	it	cc
   bc54c:	2304      	movcc	r3, #4
   bc54e:	441d      	add	r5, r3
   bc550:	4473      	add	r3, lr
   bc552:	469e      	mov	lr, r3
   bc554:	462e      	mov	r6, r5
   bc556:	4566      	cmp	r6, ip
   bc558:	d30e      	bcc.n	bc578 <__mdiff+0xec>
   bc55a:	f10c 0203 	add.w	r2, ip, #3
   bc55e:	1b52      	subs	r2, r2, r5
   bc560:	f022 0203 	bic.w	r2, r2, #3
   bc564:	3d03      	subs	r5, #3
   bc566:	45ac      	cmp	ip, r5
   bc568:	bf38      	it	cc
   bc56a:	2200      	movcc	r2, #0
   bc56c:	441a      	add	r2, r3
   bc56e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc572:	b17b      	cbz	r3, bc594 <__mdiff+0x108>
   bc574:	6107      	str	r7, [r0, #16]
   bc576:	e7a3      	b.n	bc4c0 <__mdiff+0x34>
   bc578:	f856 8b04 	ldr.w	r8, [r6], #4
   bc57c:	fa11 f288 	uxtah	r2, r1, r8
   bc580:	1414      	asrs	r4, r2, #16
   bc582:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc586:	b292      	uxth	r2, r2
   bc588:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc58c:	f84e 2b04 	str.w	r2, [lr], #4
   bc590:	1421      	asrs	r1, r4, #16
   bc592:	e7e0      	b.n	bc556 <__mdiff+0xca>
   bc594:	3f01      	subs	r7, #1
   bc596:	e7ea      	b.n	bc56e <__mdiff+0xe2>
   bc598:	000bd650 	.word	0x000bd650
   bc59c:	000bd6fc 	.word	0x000bd6fc

000bc5a0 <__ulp>:
   bc5a0:	b082      	sub	sp, #8
   bc5a2:	ed8d 0b00 	vstr	d0, [sp]
   bc5a6:	9b01      	ldr	r3, [sp, #4]
   bc5a8:	4912      	ldr	r1, [pc, #72]	; (bc5f4 <__ulp+0x54>)
   bc5aa:	4019      	ands	r1, r3
   bc5ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc5b0:	2900      	cmp	r1, #0
   bc5b2:	dd05      	ble.n	bc5c0 <__ulp+0x20>
   bc5b4:	2200      	movs	r2, #0
   bc5b6:	460b      	mov	r3, r1
   bc5b8:	ec43 2b10 	vmov	d0, r2, r3
   bc5bc:	b002      	add	sp, #8
   bc5be:	4770      	bx	lr
   bc5c0:	4249      	negs	r1, r1
   bc5c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc5c6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc5ca:	f04f 0200 	mov.w	r2, #0
   bc5ce:	f04f 0300 	mov.w	r3, #0
   bc5d2:	da04      	bge.n	bc5de <__ulp+0x3e>
   bc5d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc5d8:	fa41 f300 	asr.w	r3, r1, r0
   bc5dc:	e7ec      	b.n	bc5b8 <__ulp+0x18>
   bc5de:	f1a0 0114 	sub.w	r1, r0, #20
   bc5e2:	291e      	cmp	r1, #30
   bc5e4:	bfda      	itte	le
   bc5e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc5ea:	fa20 f101 	lsrle.w	r1, r0, r1
   bc5ee:	2101      	movgt	r1, #1
   bc5f0:	460a      	mov	r2, r1
   bc5f2:	e7e1      	b.n	bc5b8 <__ulp+0x18>
   bc5f4:	7ff00000 	.word	0x7ff00000

000bc5f8 <__b2d>:
   bc5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc5fa:	6905      	ldr	r5, [r0, #16]
   bc5fc:	f100 0714 	add.w	r7, r0, #20
   bc600:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc604:	1f2e      	subs	r6, r5, #4
   bc606:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc60a:	4620      	mov	r0, r4
   bc60c:	f7ff fd48 	bl	bc0a0 <__hi0bits>
   bc610:	f1c0 0320 	rsb	r3, r0, #32
   bc614:	280a      	cmp	r0, #10
   bc616:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc694 <__b2d+0x9c>
   bc61a:	600b      	str	r3, [r1, #0]
   bc61c:	dc14      	bgt.n	bc648 <__b2d+0x50>
   bc61e:	f1c0 0e0b 	rsb	lr, r0, #11
   bc622:	fa24 f10e 	lsr.w	r1, r4, lr
   bc626:	42b7      	cmp	r7, r6
   bc628:	ea41 030c 	orr.w	r3, r1, ip
   bc62c:	bf34      	ite	cc
   bc62e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc632:	2100      	movcs	r1, #0
   bc634:	3015      	adds	r0, #21
   bc636:	fa04 f000 	lsl.w	r0, r4, r0
   bc63a:	fa21 f10e 	lsr.w	r1, r1, lr
   bc63e:	ea40 0201 	orr.w	r2, r0, r1
   bc642:	ec43 2b10 	vmov	d0, r2, r3
   bc646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc648:	42b7      	cmp	r7, r6
   bc64a:	bf3a      	itte	cc
   bc64c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc650:	f1a5 0608 	subcc.w	r6, r5, #8
   bc654:	2100      	movcs	r1, #0
   bc656:	380b      	subs	r0, #11
   bc658:	d017      	beq.n	bc68a <__b2d+0x92>
   bc65a:	f1c0 0c20 	rsb	ip, r0, #32
   bc65e:	fa04 f500 	lsl.w	r5, r4, r0
   bc662:	42be      	cmp	r6, r7
   bc664:	fa21 f40c 	lsr.w	r4, r1, ip
   bc668:	ea45 0504 	orr.w	r5, r5, r4
   bc66c:	bf8c      	ite	hi
   bc66e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc672:	2400      	movls	r4, #0
   bc674:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc678:	fa01 f000 	lsl.w	r0, r1, r0
   bc67c:	fa24 f40c 	lsr.w	r4, r4, ip
   bc680:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc684:	ea40 0204 	orr.w	r2, r0, r4
   bc688:	e7db      	b.n	bc642 <__b2d+0x4a>
   bc68a:	ea44 030c 	orr.w	r3, r4, ip
   bc68e:	460a      	mov	r2, r1
   bc690:	e7d7      	b.n	bc642 <__b2d+0x4a>
   bc692:	bf00      	nop
   bc694:	3ff00000 	.word	0x3ff00000

000bc698 <__d2b>:
   bc698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc69c:	4689      	mov	r9, r1
   bc69e:	2101      	movs	r1, #1
   bc6a0:	ec57 6b10 	vmov	r6, r7, d0
   bc6a4:	4690      	mov	r8, r2
   bc6a6:	f7ff fc09 	bl	bbebc <_Balloc>
   bc6aa:	4604      	mov	r4, r0
   bc6ac:	b930      	cbnz	r0, bc6bc <__d2b+0x24>
   bc6ae:	4602      	mov	r2, r0
   bc6b0:	4b25      	ldr	r3, [pc, #148]	; (bc748 <__d2b+0xb0>)
   bc6b2:	4826      	ldr	r0, [pc, #152]	; (bc74c <__d2b+0xb4>)
   bc6b4:	f240 310a 	movw	r1, #778	; 0x30a
   bc6b8:	f7f9 ffda 	bl	b6670 <__assert_func>
   bc6bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc6c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc6c4:	bb35      	cbnz	r5, bc714 <__d2b+0x7c>
   bc6c6:	2e00      	cmp	r6, #0
   bc6c8:	9301      	str	r3, [sp, #4]
   bc6ca:	d028      	beq.n	bc71e <__d2b+0x86>
   bc6cc:	4668      	mov	r0, sp
   bc6ce:	9600      	str	r6, [sp, #0]
   bc6d0:	f7ff fd06 	bl	bc0e0 <__lo0bits>
   bc6d4:	9900      	ldr	r1, [sp, #0]
   bc6d6:	b300      	cbz	r0, bc71a <__d2b+0x82>
   bc6d8:	9a01      	ldr	r2, [sp, #4]
   bc6da:	f1c0 0320 	rsb	r3, r0, #32
   bc6de:	fa02 f303 	lsl.w	r3, r2, r3
   bc6e2:	430b      	orrs	r3, r1
   bc6e4:	40c2      	lsrs	r2, r0
   bc6e6:	6163      	str	r3, [r4, #20]
   bc6e8:	9201      	str	r2, [sp, #4]
   bc6ea:	9b01      	ldr	r3, [sp, #4]
   bc6ec:	61a3      	str	r3, [r4, #24]
   bc6ee:	2b00      	cmp	r3, #0
   bc6f0:	bf14      	ite	ne
   bc6f2:	2202      	movne	r2, #2
   bc6f4:	2201      	moveq	r2, #1
   bc6f6:	6122      	str	r2, [r4, #16]
   bc6f8:	b1d5      	cbz	r5, bc730 <__d2b+0x98>
   bc6fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc6fe:	4405      	add	r5, r0
   bc700:	f8c9 5000 	str.w	r5, [r9]
   bc704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc708:	f8c8 0000 	str.w	r0, [r8]
   bc70c:	4620      	mov	r0, r4
   bc70e:	b003      	add	sp, #12
   bc710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc718:	e7d5      	b.n	bc6c6 <__d2b+0x2e>
   bc71a:	6161      	str	r1, [r4, #20]
   bc71c:	e7e5      	b.n	bc6ea <__d2b+0x52>
   bc71e:	a801      	add	r0, sp, #4
   bc720:	f7ff fcde 	bl	bc0e0 <__lo0bits>
   bc724:	9b01      	ldr	r3, [sp, #4]
   bc726:	6163      	str	r3, [r4, #20]
   bc728:	2201      	movs	r2, #1
   bc72a:	6122      	str	r2, [r4, #16]
   bc72c:	3020      	adds	r0, #32
   bc72e:	e7e3      	b.n	bc6f8 <__d2b+0x60>
   bc730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc738:	f8c9 0000 	str.w	r0, [r9]
   bc73c:	6918      	ldr	r0, [r3, #16]
   bc73e:	f7ff fcaf 	bl	bc0a0 <__hi0bits>
   bc742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc746:	e7df      	b.n	bc708 <__d2b+0x70>
   bc748:	000bd650 	.word	0x000bd650
   bc74c:	000bd6fc 	.word	0x000bd6fc

000bc750 <__ratio>:
   bc750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc754:	4688      	mov	r8, r1
   bc756:	4669      	mov	r1, sp
   bc758:	4681      	mov	r9, r0
   bc75a:	f7ff ff4d 	bl	bc5f8 <__b2d>
   bc75e:	a901      	add	r1, sp, #4
   bc760:	4640      	mov	r0, r8
   bc762:	ec55 4b10 	vmov	r4, r5, d0
   bc766:	f7ff ff47 	bl	bc5f8 <__b2d>
   bc76a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc76e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc772:	eba3 0c02 	sub.w	ip, r3, r2
   bc776:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc77a:	1a9b      	subs	r3, r3, r2
   bc77c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc780:	ec51 0b10 	vmov	r0, r1, d0
   bc784:	2b00      	cmp	r3, #0
   bc786:	bfd6      	itet	le
   bc788:	460a      	movle	r2, r1
   bc78a:	462a      	movgt	r2, r5
   bc78c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc790:	468b      	mov	fp, r1
   bc792:	462f      	mov	r7, r5
   bc794:	bfd4      	ite	le
   bc796:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc79a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc79e:	4620      	mov	r0, r4
   bc7a0:	ee10 2a10 	vmov	r2, s0
   bc7a4:	465b      	mov	r3, fp
   bc7a6:	4639      	mov	r1, r7
   bc7a8:	f7fd fdd2 	bl	ba350 <__aeabi_ddiv>
   bc7ac:	ec41 0b10 	vmov	d0, r0, r1
   bc7b0:	b003      	add	sp, #12
   bc7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc7b6 <__copybits>:
   bc7b6:	3901      	subs	r1, #1
   bc7b8:	b570      	push	{r4, r5, r6, lr}
   bc7ba:	1149      	asrs	r1, r1, #5
   bc7bc:	6914      	ldr	r4, [r2, #16]
   bc7be:	3101      	adds	r1, #1
   bc7c0:	f102 0314 	add.w	r3, r2, #20
   bc7c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc7c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc7cc:	1f05      	subs	r5, r0, #4
   bc7ce:	42a3      	cmp	r3, r4
   bc7d0:	d30c      	bcc.n	bc7ec <__copybits+0x36>
   bc7d2:	1aa3      	subs	r3, r4, r2
   bc7d4:	3b11      	subs	r3, #17
   bc7d6:	f023 0303 	bic.w	r3, r3, #3
   bc7da:	3211      	adds	r2, #17
   bc7dc:	42a2      	cmp	r2, r4
   bc7de:	bf88      	it	hi
   bc7e0:	2300      	movhi	r3, #0
   bc7e2:	4418      	add	r0, r3
   bc7e4:	2300      	movs	r3, #0
   bc7e6:	4288      	cmp	r0, r1
   bc7e8:	d305      	bcc.n	bc7f6 <__copybits+0x40>
   bc7ea:	bd70      	pop	{r4, r5, r6, pc}
   bc7ec:	f853 6b04 	ldr.w	r6, [r3], #4
   bc7f0:	f845 6f04 	str.w	r6, [r5, #4]!
   bc7f4:	e7eb      	b.n	bc7ce <__copybits+0x18>
   bc7f6:	f840 3b04 	str.w	r3, [r0], #4
   bc7fa:	e7f4      	b.n	bc7e6 <__copybits+0x30>

000bc7fc <__any_on>:
   bc7fc:	f100 0214 	add.w	r2, r0, #20
   bc800:	6900      	ldr	r0, [r0, #16]
   bc802:	114b      	asrs	r3, r1, #5
   bc804:	4298      	cmp	r0, r3
   bc806:	b510      	push	{r4, lr}
   bc808:	db11      	blt.n	bc82e <__any_on+0x32>
   bc80a:	dd0a      	ble.n	bc822 <__any_on+0x26>
   bc80c:	f011 011f 	ands.w	r1, r1, #31
   bc810:	d007      	beq.n	bc822 <__any_on+0x26>
   bc812:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc816:	fa24 f001 	lsr.w	r0, r4, r1
   bc81a:	fa00 f101 	lsl.w	r1, r0, r1
   bc81e:	428c      	cmp	r4, r1
   bc820:	d10b      	bne.n	bc83a <__any_on+0x3e>
   bc822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc826:	4293      	cmp	r3, r2
   bc828:	d803      	bhi.n	bc832 <__any_on+0x36>
   bc82a:	2000      	movs	r0, #0
   bc82c:	bd10      	pop	{r4, pc}
   bc82e:	4603      	mov	r3, r0
   bc830:	e7f7      	b.n	bc822 <__any_on+0x26>
   bc832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc836:	2900      	cmp	r1, #0
   bc838:	d0f5      	beq.n	bc826 <__any_on+0x2a>
   bc83a:	2001      	movs	r0, #1
   bc83c:	e7f6      	b.n	bc82c <__any_on+0x30>

000bc83e <_calloc_r>:
   bc83e:	b513      	push	{r0, r1, r4, lr}
   bc840:	434a      	muls	r2, r1
   bc842:	4611      	mov	r1, r2
   bc844:	9201      	str	r2, [sp, #4]
   bc846:	f7f9 ff03 	bl	b6650 <_malloc_r>
   bc84a:	4604      	mov	r4, r0
   bc84c:	b118      	cbz	r0, bc856 <_calloc_r+0x18>
   bc84e:	9a01      	ldr	r2, [sp, #4]
   bc850:	2100      	movs	r1, #0
   bc852:	f7fd ff84 	bl	ba75e <memset>
   bc856:	4620      	mov	r0, r4
   bc858:	b002      	add	sp, #8
   bc85a:	bd10      	pop	{r4, pc}
   bc85c:	0000      	movs	r0, r0
	...

000bc860 <nan>:
   bc860:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc868 <nan+0x8>
   bc864:	4770      	bx	lr
   bc866:	bf00      	nop
   bc868:	00000000 	.word	0x00000000
   bc86c:	7ff80000 	.word	0x7ff80000

000bc870 <__ascii_wctomb>:
   bc870:	b149      	cbz	r1, bc886 <__ascii_wctomb+0x16>
   bc872:	2aff      	cmp	r2, #255	; 0xff
   bc874:	bf85      	ittet	hi
   bc876:	238a      	movhi	r3, #138	; 0x8a
   bc878:	6003      	strhi	r3, [r0, #0]
   bc87a:	700a      	strbls	r2, [r1, #0]
   bc87c:	f04f 30ff 	movhi.w	r0, #4294967295
   bc880:	bf98      	it	ls
   bc882:	2001      	movls	r0, #1
   bc884:	4770      	bx	lr
   bc886:	4608      	mov	r0, r1
   bc888:	4770      	bx	lr
	...

000bc88c <__aeabi_d2lz>:
   bc88c:	b538      	push	{r3, r4, r5, lr}
   bc88e:	2200      	movs	r2, #0
   bc890:	2300      	movs	r3, #0
   bc892:	4604      	mov	r4, r0
   bc894:	460d      	mov	r5, r1
   bc896:	f7fd fea3 	bl	ba5e0 <__aeabi_dcmplt>
   bc89a:	b928      	cbnz	r0, bc8a8 <__aeabi_d2lz+0x1c>
   bc89c:	4620      	mov	r0, r4
   bc89e:	4629      	mov	r1, r5
   bc8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc8a4:	f7fd bee4 	b.w	ba670 <__aeabi_d2ulz>
   bc8a8:	4620      	mov	r0, r4
   bc8aa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc8ae:	f7fd fedf 	bl	ba670 <__aeabi_d2ulz>
   bc8b2:	4240      	negs	r0, r0
   bc8b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc8b8:	bd38      	pop	{r3, r4, r5, pc}
   bc8ba:	bf00      	nop

000bc8bc <dynalib_user>:
   bc8bc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc8cc:	0000 0000 7270 6369 7365 002f 7325 000a     ....prices/.%s..
   bc8dc:	212c 2500 642a 252d 642a 252d 642a 2554     ,!.%*d-%*d-%*dT%
   bc8ec:	3a64 2a25 3a64 2a25 0064 6e49 6920 746e     d:%*d:%*d.In int
   bc8fc:	7265 7572 7470 000a 6948 6867 7365 2074     errupt..Highest 
   bc90c:	7270 6369 2065 666f 7420 6568 6420 7961     price of the day
   bc91c:	203a 6625 000a 6f4c 6577 7473 7020 6972     : %f..Lowest pri
   bc92c:	6563 6f20 2066 6874 2065 6164 3a79 2520     ce of the day: %
   bc93c:	0a66 4800 756f 7372 6f20 2066 6874 2065     f..Hours of the 
   bc94c:	6164 2079 6877 7265 2065 6c65 6365 7274     day where electr
   bc95c:	6369 7469 2079 7369 7720 7469 6968 206e     icity is within 
   bc96c:	6361 6563 7470 6465 7220 6e61 6567 0a3a     accepted range:.
   bc97c:	2500 3230 2064 6f74 2520 3230 0a64 5700     .%02d to %02d..W
   bc98c:	6961 6974 676e 6620 726f 4220 454c 6c63     aiting for BLEcl
   bc99c:	6569 746e 6320 6e6f 656e 7463 6f69 2e6e     ient connection.
   bc9ac:	2e2e 4300 696c 6e65 2074 6964 6373 6e6f     ...Client discon
   bc9bc:	656e 7463 6465 000a 7073 7261 636b 696c     nected..sparkcli
   bc9cc:	6e65 5f74 6d00 7471 0074 6c43 6569 746e     ent_.mqtt.Client
   bc9dc:	7220 6365 6e6f 656e 7463 6465 000a 207b      reconnected..{ 
   bc9ec:	7922 6165 2272 203a 2522 2264 202c 6d22     "year": "%d", "m
   bc9fc:	6e6f 6874 3a22 2522 3230 2264 202c 6422     onth":"%02d", "d
   bca0c:	7961 3a22 2220 3025 6432 2c22 2220 6164     ay": "%02d", "da
   bca1c:	5f79 7774 226f 203a 2522 3230 2264 202c     y_two": "%02d", 
   bca2c:	6822 756f 2272 203a 2522 3230 2264 7d20     "hour": "%02d" }
   bca3c:	6500 706c 6972 6573 0072 6e49 7720 726f     .elpriser.In wor
   bca4c:	0a6b 4300 6568 7061 6928 6873 2029 6f68     k..Cheap(ish) ho
   bca5c:	7275 2073 666f 7420 6568 6420 7961 203a     urs of the day: 
   bca6c:	2500 3230 2064 6f74 2520 3230 2c64 0020     .%02d to %02d, .
   bca7c:	6f4c 2077 7270 6369 2065 6f68 7275 0073     Low price hours.
   bca8c:	7543 7272 6e65 2074 4848 4d3a 3a4d 2520     Current HH:MM: %
   bca9c:	3230 3a64 3025 6432 000a 6552 6563 7669     02d:%02d..Receiv
   bcaac:	6465 7020 776f 7265 672f 7465 000a 6f70     ed power/get..po
   bcabc:	6577 0072 227b 6177 7474 3a22 6425 007d     wer.{"watt":%d}.
   bcacc:	227b 7270 6369 7365 6579 7473 7265 6164     {"pricesyesterda
   bcadc:	2279 5b3a 2c31 2c32 2c33 2c34 2c35 2c36     y":[1,2,3,4,5,6,
   bcaec:	2c37 2c38 2c39 3031 312c 2c31 3231 312c     7,8,9,10,11,12,1
   bcafc:	2c33 3431 312c 2c35 3631 312c 2c37 3831     3,14,15,16,17,18
   bcb0c:	312c 2c39 3032 322c 2c31 3232 322c 2c33     ,19,20,21,22,23,
   bcb1c:	3432 322c 5d34 007d 227b 7270 6369 7365     24,24]}.{"prices
   bcb2c:	6f74 6164 2279 5b3a 2c31 2c32 2c33 2c34     today":[1,2,3,4,
   bcb3c:	2c35 2c36 2c37 2c38 2c39 3031 312c 2c31     5,6,7,8,9,10,11,
   bcb4c:	3231 312c 2c33 3431 312c 2c35 3631 312c     12,13,14,15,16,1
   bcb5c:	2c37 3831 312c 2c39 3032 322c 2c31 3232     7,18,19,20,21,22
   bcb6c:	322c 2c33 3432 322c 5d34 007d 227b 7270     ,23,24,24]}.{"pr
   bcb7c:	6369 7365 6f74 6f6d 7272 776f 3a22 315b     icestomorrow":[1
   bcb8c:	322c 332c 342c 352c 362c 372c 382c 392c     ,2,3,4,5,6,7,8,9
   bcb9c:	312c 2c30 3131 312c 2c32 3331 312c 2c34     ,10,11,12,13,14,
   bcbac:	3531 312c 2c36 3731 312c 2c38 3931 322c     15,16,17,18,19,2
   bcbbc:	2c30 3132 322c 2c32 3332 322c 5d34 007d     0,21,22,23,24]}.
   bcbcc:	227b 4857 5f72 6579 7473 7265 6164 2279     {"WHr_yesterday"
   bcbdc:	5b3a 2c31 2c32 2c33 2c34 2c35 2c36 2c37     :[1,2,3,4,5,6,7,
   bcbec:	2c38 2c39 3031 312c 2c31 3231 312c 2c33     8,9,10,11,12,13,
   bcbfc:	3431 312c 2c35 3631 312c 2c37 3831 312c     14,15,16,17,18,1
   bcc0c:	2c39 3032 322c 2c31 3232 322c 2c33 3432     9,20,21,22,23,24
   bcc1c:	7d5d 7b00 5722 7248 745f 646f 7961 3a22     ]}.{"WHr_today":
   bcc2c:	315b 322c 332c 342c 352c 362c 372c 382c     [1,2,3,4,5,6,7,8
   bcc3c:	392c 312c 2c30 3131 312c 2c32 3331 312c     ,9,10,11,12,13,1
   bcc4c:	2c34 3531 312c 2c36 3731 312c 2c38 3931     4,15,16,17,18,19
   bcc5c:	322c 2c30 3132 322c 2c32 3332 322c 5d34     ,20,21,22,23,24]
   bcc6c:	007d 6c62 5f65 6f63 6e6e 6365 6574 0064     }.ble_connected.
   bcc7c:	6f68 656d 7361 6973 7473 6e61 2e74 6f6c     homeassistant.lo
   bcc8c:	6163 006c 4148 4920 0050 6567 5f74 7270     cal.HA IP.get_pr
   bcc9c:	6369 7365 5300 6174 6574 5200 7465 7275     ices.State.Retur
   bccac:	206e 6176 756c 3a65 2520 0064 6568 6c6c     n value: %d.hell
   bccbc:	206f 6f77 6c72 0064 6f70 6577 2f72 6567     o world.power/ge
   bcccc:	0074 6f70 6577 2f72 7270 6369 7365 5700     t.power/prices.W
   bccdc:	7461 2074 6f6e 0077 4b44 204b 6559 7473     att now.DKK Yest
   bccec:	7265 6164 0079 4b44 204b 6f54 6164 0079     erday.DKK Today.
   bccfc:	4b44 204b 6f54 6f6d 7272 776f 5700 7268     DKK Tomorrow.Whr
   bcd0c:	5420 646f 7961 5700 7268 5920 7365 6574      Today.Whr Yeste
   bcd1c:	6472 7961 3100 3239 312e 3836 312e 3031     rday.192.168.110
   bcd2c:	362e 6200 3234 3035 3034 2d35 6266 6234     .6.b4250405-fb4b
   bcd3c:	342d 3437 2d36 3262 3062 392d 6633 6530     -4746-b2b0-93f0e
   bcd4c:	3136 3231 6332 0036 3462 3532 3430 3430     61122c6.b4250404
   bcd5c:	662d 3462 2d62 3734 3634 622d 6232 2d30     -fb4b-4746-b2b0-
   bcd6c:	3339 3066 3665 3131 3232 3663 6200 3234     93f0e61122c6.b42
   bcd7c:	3035 3034 2d33 6266 6234 342d 3437 2d36     50403-fb4b-4746-
   bcd8c:	3262 3062 392d 6633 6530 3136 3231 6332     b2b0-93f0e61122c
   bcd9c:	0036 3462 3532 3430 3230 662d 3462 2d62     6.b4250402-fb4b-
   bcdac:	3734 3634 622d 6232 2d30 3339 3066 3665     4746-b2b0-93f0e6
   bcdbc:	3131 3232 3663 6200 3234 3035 3034 2d36     1122c6.b4250406-
   bcdcc:	6266 6234 342d 3437 2d36 3262 3062 392d     fb4b-4746-b2b0-9
   bcddc:	6633 6530 3136 3231 6332 0036 3462 3532     3f0e61122c6.b425
   bcdec:	3430 3130 662d 3462 2d62 3734 3634 622d     0401-fb4b-4746-b
   bcdfc:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bce0c:	3300 3166 3161 3935 2d36 6565 6637 342d     .3f1a1596-ee7f-4
   bce1c:	6232 2d64 3438 3164 622d 6131 3932 6634     2bd-84d1-b1a294f
   bce2c:	3238 6365 0066 7241 6f67 506e 004d 0400     82ecf.ArgonPM...
   bce3c:	514d 5454 0004 4d06 4951 6473 0370 6542     MQTT...MQIsdp.Be
   bce4c:	6967 206e 754d 746c 6369 7361 0074 754f     gin Multicast.Ou
   bce5c:	2074 666f 6d20 6d65 726f 0079 6f6e 2074     t of memory.not 
   bce6c:	6176 696c 0064 0000                         valid...

000bce74 <_ZTVN5spark13EthernetClassE>:
	...
   bce7c:	66ff 000b 66f5 000b 66eb 000b 66e1 000b     .f...f...f...f..
   bce8c:	66d5 000b 66c9 000b 989d 000b 98a5 000b     .f...f..........
   bce9c:	66bd 000b 66b5 000b 66ab 000b 66a1 000b     .f...f...f...f..
   bceac:	98d5 000b                                   ....

000bceb0 <_ZTV3UDP>:
	...
   bceb8:	6e35 000b 6e59 000b 683d 000b 6965 000b     5n..Yn..=h..ei..
   bcec8:	67f5 000b 6855 000b 6873 000b 688d 000b     .g..Uh..sh...h..
   bced8:	68b1 000b 6949 000b 6c23 000b 69e9 000b     .h..Ii..#l...i..
   bcee8:	6b41 000b 67dd 000b 6dc5 000b 6ac9 000b     Ak...g...m...j..
   bcef8:	67fd 000b 6df3 000b 698f 000b 67eb 000b     .g...m...i...g..
   bcf08:	6a21 000b 67f1 000b 688f 000b fff0 ffff     !j...g...h......
   bcf18:	0000 0000 68a9 000b                         .....h..

000bcf20 <_ZTV21StringPrintableHelper>:
	...
   bcf28:	6eb1 000b 6eb3 000b 702d 000b 6fff 000b     .n...n..-p...o..
   bcf38:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   bcf48:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   bcf58:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   bcf68:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   bcf78:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   bcf88:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   bcf98:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   bcfa8:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   bcfb8:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   bcfc8:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   bcfd8:	206f 7061 6570 646e 7020 6565 2072 6543     o append peer Ce
   bcfe8:	746e 6172 206c 6564 6976 6563 002e 6f43     ntral device..Co
   bcff8:	6e6e 6365 6574 2064 7962 4320 6e65 7274     nnected by Centr
   bd008:	6c61 6420 7665 6369 2e65 4400 7369 6f63     al device..Disco
   bd018:	6e6e 6365 6574 2064 7962 7220 6d65 746f     nnected by remot
   bd028:	2065 6564 6976 6563 002e 7544 6c70 6369     e device..Duplic
   bd038:	7461 6465 6320 6168 6172 7463 7265 7369     ated characteris
   bd048:	6974 2063 6163 6e6e 746f 6220 2065 6461     tic cannot be ad
   bd058:	6564 2e64 4600 6961 656c 2064 6f74 6120     ded..Failed to a
   bd068:	7070 6e65 2064 6f6c 6163 206c 6863 7261     ppend local char
   bd078:	6361 6574 6972 7473 6369 002e               acteristic..

000bd084 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd08c:	70db 000b 713d 000b 726f 000b 7167 000b     .p..=q..or..gq..
   bd09c:	70dd 000b                                   .p..

000bd0a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd0a8:	70d7 000b 714b 000b 70d9 000b 716d 000b     .p..Kq...p..mq..
   bd0b8:	70fd 000b                                   .p..

000bd0bc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd0c4:	70d5 000b 7159 000b 7a49 000b 7173 000b     .p..Yq..Iz..sq..
   bd0d4:	711d 000b                                   .q..

000bd0d8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd0e4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd0f6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd0f6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd106 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd106:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bd116:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bd126:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bd138 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd140:	8935 000b 893b 000b 8979 000b 8949 000b     5...;...y...I...
   bd150:	8937 000b                                   7...

000bd154 <_ZTV9IPAddress>:
	...
   bd15c:	8e75 000b 8e65 000b 8e67 000b               u...e...g...

000bd168 <_ZTV9USBSerial>:
	...
   bd170:	8faf 000b 9017 000b 8fed 000b 8519 000b     ................
   bd180:	8fdf 000b 8fb1 000b 8fc1 000b 9011 000b     ................
   bd190:	8fd1 000b 8fa9 000b                         ........

000bd198 <_ZTV11USARTSerial>:
	...
   bd1a0:	9101 000b 916d 000b 9145 000b 8519 000b     ....m...E.......
   bd1b0:	9115 000b 9131 000b 9123 000b 913f 000b     ....1...#...?...
   bd1c0:	9103 000b 9107 000b                         ........

000bd1c8 <_ZTV7TwoWire>:
	...
   bd1d0:	91cd 000b 9217 000b 91ef 000b 91cf 000b     ................
   bd1e0:	91f7 000b 91ff 000b 9207 000b 920f 000b     ................
   bd1f0:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bd200:	2072 203d 6425 0000                         r = %d..

000bd208 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd210:	92cd 000b 92f1 000b 97db 000b 92ff 000b     ................
   bd220:	92d1 000b                                   ....

000bd224 <_ZTV9TCPClient>:
	...
   bd22c:	87c5 000b 87dd 000b 9249 000b 9263 000b     ........I...c...
   bd23c:	9671 000b 928d 000b 94e7 000b 92c1 000b     q...............
   bd24c:	9579 000b 93b9 000b 9515 000b 9725 000b     y...........%...
   bd25c:	94b5 000b 92c3 000b 9275 000b 9305 000b     ........u.......
   bd26c:	9399 000b                                   ....

000bd270 <_ZTVN5spark9WiFiClassE>:
	...
   bd278:	983f 000b 9835 000b 982b 000b 97e1 000b     ?...5...+.......
   bd288:	981f 000b 9813 000b 989d 000b 98a5 000b     ................
   bd298:	9807 000b 97ff 000b 97f5 000b 97eb 000b     ................
   bd2a8:	98d5 000b                                   ....

000bd2ac <_ZTVN5spark12NetworkClassE>:
	...
   bd2b4:	985d 000b 9867 000b 9871 000b 987b 000b     ]...g...q...{...
   bd2c4:	9885 000b 9891 000b 989d 000b 98a5 000b     ................
   bd2d4:	98ad 000b 98b9 000b 98c1 000b 98cb 000b     ................
   bd2e4:	98d5 000b                                   ....

000bd2e8 <_ZSt7nothrow>:
	...

000bd2e9 <_ZTSSt19_Sp_make_shared_tag>:
   bd2e9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd2f9:	6572 5f64 6174 0067 0000                     red_tag....

000bd304 <_ZTISt19_Sp_make_shared_tag>:
   bd304:	d344 000b d2e9 000b                         D.......

000bd30c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd30c:	d3a4 000b d318 000b d3c8 000b               ............

000bd318 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd318:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd328:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd338:	0045 0000                                   E...

000bd33c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd33c:	0000 0000 d30c 000b 9bad 000b 9bc1 000b     ................
   bd34c:	9d55 000b 9d55 000b 9c2b 000b 9b6d 000b     U...U...+...m...
   bd35c:	9c13 000b 9bd5 000b 9b9f 000b               ............

000bd368 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd368:	d3a4 000b d374 000b d30c 000b               ....t.......

000bd374 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd374:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd384:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd394:	666e 456f 0000 0000                         nfoE....

000bd39c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd39c:	0000 0000 d368 000b 9c55 000b 9c69 000b     ....h...U...i...
   bd3ac:	9d55 000b 9d55 000b 9c2b 000b 9b6d 000b     U...U...+...m...
   bd3bc:	9d29 000b 9cb5 000b 9c7d 000b               ).......}...

000bd3c8 <_ZTISt9type_info>:
   bd3c8:	d344 000b d3d0 000b                         D.......

000bd3d0 <_ZTSSt9type_info>:
   bd3d0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bd3e0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bd3f0:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bd400:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd410:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd420:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd430:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd440:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd450:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd460:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bd470:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bd480 <fpi.1>:
   bd480:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd490:	0000 0000                                   ....

000bd494 <fpinan.0>:
   bd494:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bd4a4:	0000 0000                                   ....

000bd4a8 <tinytens>:
   bd4a8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd4b8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd4c8:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bd4d8:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd4e8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd4f8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd508:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd518:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd528:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd538:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bd548:	7472 6b6f 632e                               rtok.c.

000bd54f <_ctype_>:
   bd54f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd55f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd56f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd57f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd58f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd59f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd5af:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd5bf:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd5cf:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd64f:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bd65f:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bd66f:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bd67f:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bd68f:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bd69f:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bd6af:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bd6bf:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bd6cf:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bd6df:	6874 7865 632e 0000                          thex.c...

000bd6e8 <_C_numeric_locale>:
   bd6e8:	c9ad 000b c97c 000b d1bc 2003 0043 4f50     ....|...... C.PO
   bd6f8:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bd708:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd718:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd728:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd738:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd748:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd758:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd768:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bd778:	0063 0000 0000 0000                         c.......

000bd780 <__mprec_bigtens>:
   bd780:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd790:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd7a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd7a8 <__mprec_tens>:
   bd7a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd7b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd7c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd7d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd7e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd7f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd808:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd818:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd828:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd838:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd848:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd858:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd868:	9db4 79d9 7843 44ea                         ...yCx.D

000bd870 <p05.0>:
   bd870:	0005 0000 0019 0000 007d 0000               ........}...

000bd87c <link_const_variable_data_end>:
   bd87c:	000b4a15 	.word	0x000b4a15
   bd880:	000b5f89 	.word	0x000b5f89
   bd884:	000b6709 	.word	0x000b6709
   bd888:	000b6731 	.word	0x000b6731
   bd88c:	000b8509 	.word	0x000b8509
   bd890:	000b8639 	.word	0x000b8639
   bd894:	000b87b1 	.word	0x000b87b1
   bd898:	000b87f1 	.word	0x000b87f1
   bd89c:	000b9849 	.word	0x000b9849
   bd8a0:	000b99ad 	.word	0x000b99ad

000bd8a4 <link_constructors_end>:
	...
