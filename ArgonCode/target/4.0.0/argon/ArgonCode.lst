
c:/Users/mathi/Desktop/IOT/ElecPrice/ArgonCode/target/4.0.0/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a3a0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be3c0  000be3c0  0000e3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be3e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000020c  2003d890  000be3e8  0001d890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000d54  2003daa0  2003daa0  0002daa0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000be5f4  000be5f4  0001e5f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be61c  000be61c  0001e61c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00170615  00000000  00000000  0001e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001a60a  00000000  00000000  0018ec35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00045561  00000000  00000000  001a923f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000038e8  00000000  00000000  001ee7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c440  00000000  00000000  001f2088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00043bec  00000000  00000000  001fe4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00055cfe  00000000  00000000  002420b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e8fe  00000000  00000000  00297db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a9d4  00000000  00000000  003d66b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 f88a 	bl	bb14a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 f8ac 	bl	bb19a <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d890 	.word	0x2003d890
   b404c:	000be3e8 	.word	0x000be3e8
   b4050:	2003da9c 	.word	0x2003da9c
   b4054:	2003daa0 	.word	0x2003daa0
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 f91f 	bl	b92a4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be38c 	.word	0x000be38c
   b4080:	000be3b4 	.word	0x000be3b4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bd16 	b.w	b4ab4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 feb5 	bl	b4df8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 b8bf 	b.w	b9214 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bec1 	b.w	b6e1c <malloc>

000b409a <_Znaj>:
   b409a:	f002 bebf 	b.w	b6e1c <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 bec5 	b.w	b6e2c <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 bec3 	b.w	b6e2c <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z8callbackPcPhj>:
    }
}

void callback(char *topic, byte *payload, unsigned int length)
{
    GET_DATA = true;    
   b40b8:	4b01      	ldr	r3, [pc, #4]	; (b40c0 <_Z8callbackPcPhj+0x8>)
   b40ba:	2201      	movs	r2, #1
   b40bc:	701a      	strb	r2, [r3, #0]
}
   b40be:	4770      	bx	lr
   b40c0:	2003dabc 	.word	0x2003dabc

000b40c4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
{
   b40c4:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40c6:	4b04      	ldr	r3, [pc, #16]	; (b40d8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40c8:	2201      	movs	r2, #1
   b40ca:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40cc:	f002 fb98 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40d0:	4b02      	ldr	r3, [pc, #8]	; (b40dc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40d2:	6018      	str	r0, [r3, #0]
}
   b40d4:	bd08      	pop	{r3, pc}
   b40d6:	bf00      	nop
   b40d8:	2003dabd 	.word	0x2003dabd
   b40dc:	2003dca8 	.word	0x2003dca8

000b40e0 <_Z13handle_sensorv>:
{
   b40e0:	b508      	push	{r3, lr}
   b40e2:	f002 fb8d 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta = current_reading - last_read;
   b40e6:	490c      	ldr	r1, [pc, #48]	; (b4118 <_Z13handle_sensorv+0x38>)
   b40e8:	680b      	ldr	r3, [r1, #0]
   b40ea:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b40ec:	2b64      	cmp	r3, #100	; 0x64
   b40ee:	d911      	bls.n	b4114 <_Z13handle_sensorv+0x34>
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40f0:	4a0a      	ldr	r2, [pc, #40]	; (b411c <_Z13handle_sensorv+0x3c>)
   b40f2:	fbb2 f3f3 	udiv	r3, r2, r3
   b40f6:	4a0a      	ldr	r2, [pc, #40]	; (b4120 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b40f8:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40fa:	6013      	str	r3, [r2, #0]
        wh_today[currentHour] += 1;
   b40fc:	4b09      	ldr	r3, [pc, #36]	; (b4124 <_Z13handle_sensorv+0x44>)
   b40fe:	7819      	ldrb	r1, [r3, #0]
   b4100:	4b09      	ldr	r3, [pc, #36]	; (b4128 <_Z13handle_sensorv+0x48>)
   b4102:	681a      	ldr	r2, [r3, #0]
   b4104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b4108:	3301      	adds	r3, #1
   b410a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        TRANSMIT_SENSOR = true;
   b410e:	4b07      	ldr	r3, [pc, #28]	; (b412c <_Z13handle_sensorv+0x4c>)
   b4110:	2201      	movs	r2, #1
   b4112:	701a      	strb	r2, [r3, #0]
}
   b4114:	bd08      	pop	{r3, pc}
   b4116:	bf00      	nop
   b4118:	2003db6c 	.word	0x2003db6c
   b411c:	0036ee80 	.word	0x0036ee80
   b4120:	2003dbd4 	.word	0x2003dbd4
   b4124:	2003dca4 	.word	0x2003dca4
   b4128:	2003e1b8 	.word	0x2003e1b8
   b412c:	2003dac2 	.word	0x2003dac2

000b4130 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4130:	6943      	ldr	r3, [r0, #20]
   b4132:	b113      	cbz	r3, b413a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4134:	6983      	ldr	r3, [r0, #24]
   b4136:	300c      	adds	r0, #12
   b4138:	4718      	bx	r3
            callback();
        }
    }
   b413a:	4770      	bx	lr

000b413c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b413c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b413e:	2100      	movs	r1, #0
   b4140:	4604      	mov	r4, r0
   b4142:	4608      	mov	r0, r1
   b4144:	f002 fbfe 	bl	b6944 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4148:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b414a:	4620      	mov	r0, r4
   b414c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b414e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4150:	f002 fc10 	bl	b6974 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4154:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4156:	b10c      	cbz	r4, b415c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4158:	2301      	movs	r3, #1
   b415a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b415c:	2100      	movs	r1, #0
   b415e:	2001      	movs	r0, #1
   b4160:	f002 fbf0 	bl	b6944 <os_thread_scheduling>
            }
        }
        if (t) {
   b4164:	b12c      	cbz	r4, b4172 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4166:	6823      	ldr	r3, [r4, #0]
   b4168:	4620      	mov	r0, r4
   b416a:	689b      	ldr	r3, [r3, #8]
   b416c:	4798      	blx	r3
            t->running = false;
   b416e:	2300      	movs	r3, #0
   b4170:	7123      	strb	r3, [r4, #4]
        }
    }
   b4172:	b002      	add	sp, #8
   b4174:	bd10      	pop	{r4, pc}

000b4176 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4176:	2a01      	cmp	r2, #1
   b4178:	d102      	bne.n	b4180 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b417a:	6001      	str	r1, [r0, #0]
      }
   b417c:	2000      	movs	r0, #0
   b417e:	4770      	bx	lr
	  switch (__op)
   b4180:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4182:	bf04      	itt	eq
   b4184:	680b      	ldreq	r3, [r1, #0]
   b4186:	6003      	streq	r3, [r0, #0]
	      break;
   b4188:	e7f8      	b.n	b417c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b418a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b418a:	6803      	ldr	r3, [r0, #0]
   b418c:	4718      	bx	r3

000b418e <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b418e:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4190:	6880      	ldr	r0, [r0, #8]
   b4192:	b130      	cbz	r0, b41a2 <_ZN5Timer4stopEj.isra.0+0x14>
   b4194:	2300      	movs	r3, #0
   b4196:	e9cd 1300 	strd	r1, r3, [sp]
   b419a:	461a      	mov	r2, r3
   b419c:	2102      	movs	r1, #2
   b419e:	f002 fbf1 	bl	b6984 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b41a2:	b003      	add	sp, #12
   b41a4:	f85d fb04 	ldr.w	pc, [sp], #4

000b41a8 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b41a8:	b530      	push	{r4, r5, lr}
   b41aa:	4605      	mov	r5, r0
   b41ac:	b085      	sub	sp, #20
   b41ae:	460c      	mov	r4, r1
        stop(fromISR);
   b41b0:	4611      	mov	r1, r2
   b41b2:	9203      	str	r2, [sp, #12]
   b41b4:	f7ff ffeb 	bl	b418e <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41b8:	68a8      	ldr	r0, [r5, #8]
   b41ba:	b130      	cbz	r0, b41ca <_ZN5Timer6_startEjb.isra.0+0x22>
   b41bc:	2300      	movs	r3, #0
   b41be:	e9cd 4300 	strd	r4, r3, [sp]
   b41c2:	9a03      	ldr	r2, [sp, #12]
   b41c4:	4619      	mov	r1, r3
   b41c6:	f002 fbdd 	bl	b6984 <os_timer_change>
    }
   b41ca:	b005      	add	sp, #20
   b41cc:	bd30      	pop	{r4, r5, pc}
	...

000b41d0 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b41d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b41d4:	f004 ff8e 	bl	b90f4 <_ZN9TimeClass4hourEv>
   b41d8:	4f26      	ldr	r7, [pc, #152]	; (b4274 <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b41da:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4278 <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b41de:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b41e0:	f004 ff94 	bl	b910c <_ZN9TimeClass6minuteEv>
   b41e4:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b41e6:	f004 ff9d 	bl	b9124 <_ZN9TimeClass6secondEv>
   b41ea:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b41ec:	f004 ffa6 	bl	b913c <_ZN9TimeClass3dayEv>
    timer.stop();
   b41f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b41f4:	4604      	mov	r4, r0
    timer.stop();
   b41f6:	4640      	mov	r0, r8
   b41f8:	f7ff ffc9 	bl	b418e <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b41fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b4200:	b178      	cbz	r0, b4222 <_Z10check_timev+0x52>
   b4202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b4206:	b2ed      	uxtb	r5, r5
   b4208:	2200      	movs	r2, #0
   b420a:	e9cd 1200 	strd	r1, r2, [sp]
   b420e:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4212:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4216:	43ed      	mvns	r5, r5
   b4218:	fb01 5303 	mla	r3, r1, r3, r5
   b421c:	2103      	movs	r1, #3
   b421e:	f002 fbb1 	bl	b6984 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4222:	4815      	ldr	r0, [pc, #84]	; (b4278 <_Z10check_timev+0xa8>)
   b4224:	2200      	movs	r2, #0
   b4226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b422a:	f7ff ffbd 	bl	b41a8 <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b422e:	783b      	ldrb	r3, [r7, #0]
   b4230:	2b0d      	cmp	r3, #13
   b4232:	d114      	bne.n	b425e <_Z10check_timev+0x8e>
   b4234:	4a11      	ldr	r2, [pc, #68]	; (b427c <_Z10check_timev+0xac>)
   b4236:	6811      	ldr	r1, [r2, #0]
   b4238:	b2e4      	uxtb	r4, r4
   b423a:	42a1      	cmp	r1, r4
   b423c:	d003      	beq.n	b4246 <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b423e:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4240:	4a0f      	ldr	r2, [pc, #60]	; (b4280 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b4242:	2101      	movs	r1, #1
   b4244:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4246:	b93e      	cbnz	r6, b4258 <_Z10check_timev+0x88>
   b4248:	4a0e      	ldr	r2, [pc, #56]	; (b4284 <_Z10check_timev+0xb4>)
   b424a:	6811      	ldr	r1, [r2, #0]
   b424c:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b424e:	bf1f      	itttt	ne
   b4250:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4252:	4b0d      	ldrne	r3, [pc, #52]	; (b4288 <_Z10check_timev+0xb8>)
   b4254:	2201      	movne	r2, #1
   b4256:	701a      	strbne	r2, [r3, #0]
    }
   b4258:	b002      	add	sp, #8
   b425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b425e:	2b00      	cmp	r3, #0
   b4260:	d1f1      	bne.n	b4246 <_Z10check_timev+0x76>
   b4262:	4a0a      	ldr	r2, [pc, #40]	; (b428c <_Z10check_timev+0xbc>)
   b4264:	6811      	ldr	r1, [r2, #0]
   b4266:	b2e4      	uxtb	r4, r4
   b4268:	42a1      	cmp	r1, r4
   b426a:	d0ec      	beq.n	b4246 <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b426c:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b426e:	4a08      	ldr	r2, [pc, #32]	; (b4290 <_Z10check_timev+0xc0>)
   b4270:	e7e7      	b.n	b4242 <_Z10check_timev+0x72>
   b4272:	bf00      	nop
   b4274:	2003dca4 	.word	0x2003dca4
   b4278:	2003e150 	.word	0x2003e150
   b427c:	2003d8a8 	.word	0x2003d8a8
   b4280:	2003dabc 	.word	0x2003dabc
   b4284:	2003d8b0 	.word	0x2003d8b0
   b4288:	2003dac3 	.word	0x2003dac3
   b428c:	2003d8ac 	.word	0x2003d8ac
   b4290:	2003dabe 	.word	0x2003dabe

000b4294 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4294:	b40e      	push	{r1, r2, r3}
   b4296:	b503      	push	{r0, r1, lr}
   b4298:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b429a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b429c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42a0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42a2:	f004 fe52 	bl	b8f4a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42a6:	b002      	add	sp, #8
   b42a8:	f85d eb04 	ldr.w	lr, [sp], #4
   b42ac:	b003      	add	sp, #12
   b42ae:	4770      	bx	lr

000b42b0 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b42b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b42b4:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b42b6:	4608      	mov	r0, r1
{
   b42b8:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b42ba:	f006 ffe4 	bl	bb286 <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b42be:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b42c0:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b42c2:	a801      	add	r0, sp, #4
   b42c4:	f006 ffb9 	bl	bb23a <strcpy>
    Serial.printf("event_str: %s\n", event_str);
   b42c8:	f005 fbb2 	bl	b9a30 <_Z16_fetch_usbserialv>
   b42cc:	aa01      	add	r2, sp, #4
   b42ce:	4942      	ldr	r1, [pc, #264]	; (b43d8 <_Z9myHandlerPKcS0_+0x128>)
    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42d0:	4d42      	ldr	r5, [pc, #264]	; (b43dc <_Z9myHandlerPKcS0_+0x12c>)
    Serial.printf("event_str: %s\n", event_str);
   b42d2:	f7ff ffdf 	bl	b4294 <_ZN5Print6printfEPKcz>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42d6:	4942      	ldr	r1, [pc, #264]	; (b43e0 <_Z9myHandlerPKcS0_+0x130>)
   b42d8:	a801      	add	r0, sp, #4
   b42da:	f007 fe3f 	bl	bbf5c <strtok>
   b42de:	f006 ff0c 	bl	bb0fa <atoi>
   b42e2:	4621      	mov	r1, r4
   b42e4:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b42e8:	f006 ff8e 	bl	bb208 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b42ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b42f0:	d240      	bcs.n	b4374 <_Z9myHandlerPKcS0_+0xc4>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b42f2:	f005 fb9d 	bl	b9a30 <_Z16_fetch_usbserialv>
   b42f6:	462a      	mov	r2, r5
   b42f8:	493a      	ldr	r1, [pc, #232]	; (b43e4 <_Z9myHandlerPKcS0_+0x134>)
            {
                cost_tomorrow[i] = (atof(token) / 1000)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000)+transport.medium;
   b42fa:	4f3b      	ldr	r7, [pc, #236]	; (b43e8 <_Z9myHandlerPKcS0_+0x138>)
        Serial.printf("%s\n", temp);
   b42fc:	f7ff ffca 	bl	b4294 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b4300:	4628      	mov	r0, r5
   b4302:	493a      	ldr	r1, [pc, #232]	; (b43ec <_Z9myHandlerPKcS0_+0x13c>)
   b4304:	4d3a      	ldr	r5, [pc, #232]	; (b43f0 <_Z9myHandlerPKcS0_+0x140>)
   b4306:	f007 fe29 	bl	bbf5c <strtok>
        for (int i = 0; i < range; i++)
   b430a:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000)+transport.medium;
   b430c:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b430e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; b43fc <_Z9myHandlerPKcS0_+0x14c>
   b4312:	f8da 3000 	ldr.w	r3, [sl]
   b4316:	42a3      	cmp	r3, r4
   b4318:	dd29      	ble.n	b436e <_Z9myHandlerPKcS0_+0xbe>
            sscanf(token, "%*d-%*d-%*dT%d:%*d:%*d", &cost_hour[i]);
   b431a:	462a      	mov	r2, r5
   b431c:	4935      	ldr	r1, [pc, #212]	; (b43f4 <_Z9myHandlerPKcS0_+0x144>)
   b431e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b4400 <_Z9myHandlerPKcS0_+0x150>
   b4322:	f002 fd9b 	bl	b6e5c <sscanf>
            token = strtok(NULL, ",!");
   b4326:	4931      	ldr	r1, [pc, #196]	; (b43ec <_Z9myHandlerPKcS0_+0x13c>)
   b4328:	2000      	movs	r0, #0
   b432a:	f007 fe17 	bl	bbf5c <strtok>
            if (cost_hour[i] >= 0 && cost_hour[i] < 7)
   b432e:	682b      	ldr	r3, [r5, #0]
   b4330:	2b06      	cmp	r3, #6
   b4332:	f105 0504 	add.w	r5, r5, #4
   b4336:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   b433a:	d81e      	bhi.n	b437a <_Z9myHandlerPKcS0_+0xca>
                 cost_tomorrow[i] = (atof(token) / 1000)+transport.low;
   b433c:	f006 feda 	bl	bb0f4 <atof>
   b4340:	f8d9 3000 	ldr.w	r3, [r9]
   b4344:	4632      	mov	r2, r6
   b4346:	ec51 0b10 	vmov	r0, r1, d0
   b434a:	4498      	add	r8, r3
   b434c:	463b      	mov	r3, r7
   b434e:	f006 fce9 	bl	bad24 <__aeabi_ddiv>
   b4352:	a31b      	add	r3, pc, #108	; (adr r3, b43c0 <_Z9myHandlerPKcS0_+0x110>)
   b4354:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000)+transport.medium;
   b4358:	f006 fa04 	bl	ba764 <__adddf3>
   b435c:	e9c8 0100 	strd	r0, r1, [r8]
            }

            if ((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 24.
   b4360:	4922      	ldr	r1, [pc, #136]	; (b43ec <_Z9myHandlerPKcS0_+0x13c>)
   b4362:	2000      	movs	r0, #0
   b4364:	f007 fdfa 	bl	bbf5c <strtok>
   b4368:	bb40      	cbnz	r0, b43bc <_Z9myHandlerPKcS0_+0x10c>
            {
                range = i; // Update range, such that the rest of program flow is aware of size
   b436a:	f8ca 4000 	str.w	r4, [sl]
                break;     // Break the while loop
            }
        }
        CALCULATE = true;
   b436e:	4b22      	ldr	r3, [pc, #136]	; (b43f8 <_Z9myHandlerPKcS0_+0x148>)
   b4370:	2201      	movs	r2, #1
   b4372:	701a      	strb	r2, [r3, #0]
    }
   b4374:	b004      	add	sp, #16
   b4376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if (cost_hour[i] > 16 && cost_hour[i] < 22)
   b437a:	3b11      	subs	r3, #17
   b437c:	2b04      	cmp	r3, #4
   b437e:	d80e      	bhi.n	b439e <_Z9myHandlerPKcS0_+0xee>
                cost_tomorrow[i] = (atof(token) / 1000)+transport.high;
   b4380:	f006 feb8 	bl	bb0f4 <atof>
   b4384:	f8d9 3000 	ldr.w	r3, [r9]
   b4388:	4632      	mov	r2, r6
   b438a:	ec51 0b10 	vmov	r0, r1, d0
   b438e:	4498      	add	r8, r3
   b4390:	463b      	mov	r3, r7
   b4392:	f006 fcc7 	bl	bad24 <__aeabi_ddiv>
   b4396:	a30c      	add	r3, pc, #48	; (adr r3, b43c8 <_Z9myHandlerPKcS0_+0x118>)
   b4398:	e9d3 2300 	ldrd	r2, r3, [r3]
   b439c:	e7dc      	b.n	b4358 <_Z9myHandlerPKcS0_+0xa8>
                cost_tomorrow[i] = (atof(token) / 1000)+transport.medium;
   b439e:	f006 fea9 	bl	bb0f4 <atof>
   b43a2:	f8d9 3000 	ldr.w	r3, [r9]
   b43a6:	4632      	mov	r2, r6
   b43a8:	ec51 0b10 	vmov	r0, r1, d0
   b43ac:	4498      	add	r8, r3
   b43ae:	463b      	mov	r3, r7
   b43b0:	f006 fcb8 	bl	bad24 <__aeabi_ddiv>
   b43b4:	a306      	add	r3, pc, #24	; (adr r3, b43d0 <_Z9myHandlerPKcS0_+0x120>)
   b43b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43ba:	e7cd      	b.n	b4358 <_Z9myHandlerPKcS0_+0xa8>
        for (int i = 0; i < range; i++)
   b43bc:	3401      	adds	r4, #1
   b43be:	e7a6      	b.n	b430e <_Z9myHandlerPKcS0_+0x5e>
   b43c0:	ebedfa44 	.word	0xebedfa44
   b43c4:	3fcb39c0 	.word	0x3fcb39c0
   b43c8:	2d0e5604 	.word	0x2d0e5604
   b43cc:	3ffe9db2 	.word	0x3ffe9db2
   b43d0:	42c3c9ef 	.word	0x42c3c9ef
   b43d4:	3fe469ad 	.word	0x3fe469ad
   b43d8:	000bd310 	.word	0x000bd310
   b43dc:	2003dd4c 	.word	0x2003dd4c
   b43e0:	000bd31f 	.word	0x000bd31f
   b43e4:	000bd31b 	.word	0x000bd31b
   b43e8:	408f4000 	.word	0x408f4000
   b43ec:	000bd327 	.word	0x000bd327
   b43f0:	2003dc38 	.word	0x2003dc38
   b43f4:	000bd32a 	.word	0x000bd32a
   b43f8:	2003daa1 	.word	0x2003daa1
   b43fc:	2003d8b4 	.word	0x2003d8b4
   b4400:	2003dc9c 	.word	0x2003dc9c

000b4404 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4404:	b510      	push	{r4, lr}
      if (_M_manager)
   b4406:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4408:	4604      	mov	r4, r0
      if (_M_manager)
   b440a:	b113      	cbz	r3, b4412 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b440c:	2203      	movs	r2, #3
   b440e:	4601      	mov	r1, r0
   b4410:	4798      	blx	r3
    }
   b4412:	4620      	mov	r0, r4
   b4414:	bd10      	pop	{r4, pc}
	...

000b4418 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4418:	b538      	push	{r3, r4, r5, lr}
   b441a:	4b0f      	ldr	r3, [pc, #60]	; (b4458 <_ZN5TimerD1Ev+0x40>)
   b441c:	6003      	str	r3, [r0, #0]
        if (handle) {
   b441e:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4420:	4604      	mov	r4, r0
        if (handle) {
   b4422:	b19b      	cbz	r3, b444c <_ZN5TimerD1Ev+0x34>
            stop();
   b4424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4428:	f7ff feb1 	bl	b418e <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b442c:	68a0      	ldr	r0, [r4, #8]
   b442e:	2100      	movs	r1, #0
   b4430:	f002 fae0 	bl	b69f4 <os_timer_set_id>
            while (running) {
   b4434:	7923      	ldrb	r3, [r4, #4]
   b4436:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b443a:	b113      	cbz	r3, b4442 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b443c:	f002 fa7a 	bl	b6934 <os_thread_yield>
            while (running) {
   b4440:	e7f8      	b.n	b4434 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b4442:	68a0      	ldr	r0, [r4, #8]
   b4444:	4629      	mov	r1, r5
   b4446:	f002 fa8d 	bl	b6964 <os_timer_destroy>
            handle = nullptr;
   b444a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b444c:	f104 000c 	add.w	r0, r4, #12
   b4450:	f7ff ffd8 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
    }
   b4454:	4620      	mov	r0, r4
   b4456:	bd38      	pop	{r3, r4, r5, pc}
   b4458:	000bd830 	.word	0x000bd830

000b445c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b445c:	b510      	push	{r4, lr}
   b445e:	4604      	mov	r4, r0
    }
   b4460:	f7ff ffda 	bl	b4418 <_ZN5TimerD1Ev>
   b4464:	4620      	mov	r0, r4
   b4466:	211c      	movs	r1, #28
   b4468:	f7ff fe1b 	bl	b40a2 <_ZdlPvj>
   b446c:	4620      	mov	r0, r4
   b446e:	bd10      	pop	{r4, pc}

000b4470 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b4470:	b570      	push	{r4, r5, r6, lr}
   b4472:	b090      	sub	sp, #64	; 0x40
    //BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
    BLE.on();
   b4474:	f003 fe76 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4478:	f003 febe 	bl	b81f8 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b447c:	f003 fe72 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4480:	4a3d      	ldr	r2, [pc, #244]	; (b4578 <_Z9ble_setupv+0x108>)
   b4482:	4c3e      	ldr	r4, [pc, #248]	; (b457c <_Z9ble_setupv+0x10c>)
   b4484:	4601      	mov	r1, r0
   b4486:	a80b      	add	r0, sp, #44	; 0x2c
   b4488:	f004 fbf0 	bl	b8c6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b448c:	a80b      	add	r0, sp, #44	; 0x2c
   b448e:	f003 ff6a 	bl	b8366 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4492:	f003 fe67 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4496:	4a3a      	ldr	r2, [pc, #232]	; (b4580 <_Z9ble_setupv+0x110>)
   b4498:	4601      	mov	r1, r0
   b449a:	a80b      	add	r0, sp, #44	; 0x2c
   b449c:	f004 fbe6 	bl	b8c6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44a0:	a80b      	add	r0, sp, #44	; 0x2c
   b44a2:	f003 ff60 	bl	b8366 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b44a6:	f003 fe5d 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44aa:	4a36      	ldr	r2, [pc, #216]	; (b4584 <_Z9ble_setupv+0x114>)
   b44ac:	4601      	mov	r1, r0
   b44ae:	a80b      	add	r0, sp, #44	; 0x2c
   b44b0:	f004 fbdc 	bl	b8c6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44b4:	a80b      	add	r0, sp, #44	; 0x2c
   b44b6:	f003 ff56 	bl	b8366 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b44ba:	f003 fe53 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44be:	4a32      	ldr	r2, [pc, #200]	; (b4588 <_Z9ble_setupv+0x118>)
   b44c0:	4601      	mov	r1, r0
   b44c2:	a80b      	add	r0, sp, #44	; 0x2c
   b44c4:	f004 fbd2 	bl	b8c6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44c8:	a80b      	add	r0, sp, #44	; 0x2c
   b44ca:	f003 ff4c 	bl	b8366 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b44ce:	f003 fe49 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44d2:	4a2e      	ldr	r2, [pc, #184]	; (b458c <_Z9ble_setupv+0x11c>)
   b44d4:	4601      	mov	r1, r0
   b44d6:	a80b      	add	r0, sp, #44	; 0x2c
   b44d8:	f004 fbc8 	bl	b8c6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44dc:	a80b      	add	r0, sp, #44	; 0x2c
   b44de:	f003 ff42 	bl	b8366 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b44e2:	f003 fe3f 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44e6:	4a2a      	ldr	r2, [pc, #168]	; (b4590 <_Z9ble_setupv+0x120>)
   b44e8:	4601      	mov	r1, r0
   b44ea:	a80b      	add	r0, sp, #44	; 0x2c
   b44ec:	f004 fbbe 	bl	b8c6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44f0:	a80b      	add	r0, sp, #44	; 0x2c
   b44f2:	f003 ff38 	bl	b8366 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b44f6:	a803      	add	r0, sp, #12
   b44f8:	f004 f86b 	bl	b85d2 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b44fc:	4b25      	ldr	r3, [pc, #148]	; (b4594 <_Z9ble_setupv+0x124>)
   b44fe:	a803      	add	r0, sp, #12
   b4500:	6819      	ldr	r1, [r3, #0]
   b4502:	f004 f879 	bl	b85f8 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4508:	ad06      	add	r5, sp, #24
   b450a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b450c:	ad06      	add	r5, sp, #24
   b450e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4510:	6826      	ldr	r6, [r4, #0]
   b4512:	ac0b      	add	r4, sp, #44	; 0x2c
   b4514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4516:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4518:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b451a:	f003 fc25 	bl	b7d68 <_ZNK8particle7BleUuid4typeEv>
   b451e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4520:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4522:	bb0c      	cbnz	r4, b4568 <_Z9ble_setupv+0xf8>
            uint16_t uuid16 = tempUUID.shorted();
   b4524:	f003 fc3c 	bl	b7da0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4528:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b452a:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b452e:	2302      	movs	r3, #2
   b4530:	f10d 020a 	add.w	r2, sp, #10
   b4534:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4536:	a803      	add	r0, sp, #12
   b4538:	f004 f840 	bl	b85bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b453c:	f003 fe12 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4540:	2200      	movs	r2, #0
   b4542:	a903      	add	r1, sp, #12
   b4544:	f003 fea2 	bl	b828c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4548:	f005 fa72 	bl	b9a30 <_Z16_fetch_usbserialv>
   b454c:	4912      	ldr	r1, [pc, #72]	; (b4598 <_Z9ble_setupv+0x128>)
   b454e:	f004 fcd4 	bl	b8efa <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4552:	f003 fe07 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4556:	4911      	ldr	r1, [pc, #68]	; (b459c <_Z9ble_setupv+0x12c>)
   b4558:	2200      	movs	r2, #0
   b455a:	f004 fa89 	bl	b8a70 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b455e:	9803      	ldr	r0, [sp, #12]
   b4560:	f002 fc64 	bl	b6e2c <free>

}
   b4564:	b010      	add	sp, #64	; 0x40
   b4566:	bd70      	pop	{r4, r5, r6, pc}
   b4568:	f003 fc1c 	bl	b7da4 <_ZNK8particle7BleUuid8rawBytesEv>
   b456c:	2300      	movs	r3, #0
   b456e:	9300      	str	r3, [sp, #0]
   b4570:	4602      	mov	r2, r0
   b4572:	2310      	movs	r3, #16
   b4574:	2107      	movs	r1, #7
   b4576:	e7de      	b.n	b4536 <_Z9ble_setupv+0xc6>
   b4578:	2003dac4 	.word	0x2003dac4
   b457c:	2003daf0 	.word	0x2003daf0
   b4580:	2003dab4 	.word	0x2003dab4
   b4584:	2003daa4 	.word	0x2003daa4
   b4588:	2003daac 	.word	0x2003daac
   b458c:	2003dacc 	.word	0x2003dacc
   b4590:	2003dad4 	.word	0x2003dad4
   b4594:	2003d8a4 	.word	0x2003d8a4
   b4598:	000bd341 	.word	0x000bd341
   b459c:	000b40c5 	.word	0x000b40c5

000b45a0 <_Z8calc_lowPA2_iPdPii>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int * cost_hour, int size)
{
   b45a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b45a4:	ed2d 8b02 	vpush	{d8}
   b45a8:	b09d      	sub	sp, #116	; 0x74
   b45aa:	e9cd 3202 	strd	r3, r2, [sp, #8]
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value
   b45ae:	4f50      	ldr	r7, [pc, #320]	; (b46f0 <_Z8calc_lowPA2_iPdPii+0x150>)
{
   b45b0:	4605      	mov	r5, r0
   b45b2:	468b      	mov	fp, r1
   b45b4:	468a      	mov	sl, r1

    for (int i = 0; i < size; i++)
   b45b6:	2400      	movs	r4, #0
    double last_small = 100; // Assign any absurdly high value
   b45b8:	2600      	movs	r6, #0
    double last_big = 0;
   b45ba:	f04f 0800 	mov.w	r8, #0
   b45be:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < size; i++)
   b45c2:	9b02      	ldr	r3, [sp, #8]
   b45c4:	429c      	cmp	r4, r3
   b45c6:	da17      	bge.n	b45f8 <_Z8calc_lowPA2_iPdPii+0x58>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b45c8:	ecba 7b02 	vldmia	sl!, {d7}
   b45cc:	4642      	mov	r2, r8
   b45ce:	ec51 0b17 	vmov	r0, r1, d7
   b45d2:	464b      	mov	r3, r9
   b45d4:	ed8d 7b00 	vstr	d7, [sp]
   b45d8:	f006 fd0a 	bl	baff0 <__aeabi_dcmpgt>
   b45dc:	b108      	cbz	r0, b45e2 <_Z8calc_lowPA2_iPdPii+0x42>
        {
            last_big = cost[i];
   b45de:	e9dd 8900 	ldrd	r8, r9, [sp]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b45e2:	e9dd 0100 	ldrd	r0, r1, [sp]
   b45e6:	4632      	mov	r2, r6
   b45e8:	463b      	mov	r3, r7
   b45ea:	f006 fce3 	bl	bafb4 <__aeabi_dcmplt>
   b45ee:	b108      	cbz	r0, b45f4 <_Z8calc_lowPA2_iPdPii+0x54>
        {
            last_small = cost[i];
   b45f0:	e9dd 6700 	ldrd	r6, r7, [sp]
    for (int i = 0; i < size; i++)
   b45f4:	3401      	adds	r4, #1
   b45f6:	e7e4      	b.n	b45c2 <_Z8calc_lowPA2_iPdPii+0x22>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b45f8:	4632      	mov	r2, r6
   b45fa:	463b      	mov	r3, r7
   b45fc:	4640      	mov	r0, r8
   b45fe:	4649      	mov	r1, r9
   b4600:	f006 f8ae 	bl	ba760 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4604:	a338      	add	r3, pc, #224	; (adr r3, b46e8 <_Z8calc_lowPA2_iPdPii+0x148>)
   b4606:	e9d3 2300 	ldrd	r2, r3, [r3]
   b460a:	f006 fa61 	bl	baad0 <__aeabi_dmul>
   b460e:	4632      	mov	r2, r6
   b4610:	463b      	mov	r3, r7
   b4612:	f006 f8a7 	bl	ba764 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= size; i++)
   b4616:	f04f 0a00 	mov.w	sl, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b461a:	ec41 0b18 	vmov	d8, r0, r1
    int idx = 0;
   b461e:	4654      	mov	r4, sl
    for (int i = 0; i <= size; i++)
   b4620:	9b02      	ldr	r3, [sp, #8]
   b4622:	459a      	cmp	sl, r3
   b4624:	dc12      	bgt.n	b464c <_Z8calc_lowPA2_iPdPii+0xac>
    {
        
        if (cost[i] < small_offset)
   b4626:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   b462a:	ec53 2b18 	vmov	r2, r3, d8
   b462e:	f006 fcc1 	bl	bafb4 <__aeabi_dcmplt>
   b4632:	b140      	cbz	r0, b4646 <_Z8calc_lowPA2_iPdPii+0xa6>
        {
            low_range_hour[idx] = cost_hour[i];
   b4634:	9a03      	ldr	r2, [sp, #12]
   b4636:	ab1c      	add	r3, sp, #112	; 0x70
   b4638:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b463c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
   b4640:	f843 2c60 	str.w	r2, [r3, #-96]
            
            idx++;
   b4644:	3401      	adds	r4, #1
    for (int i = 0; i <= size; i++)
   b4646:	f10a 0a01 	add.w	sl, sl, #1
   b464a:	e7e9      	b.n	b4620 <_Z8calc_lowPA2_iPdPii+0x80>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b464c:	f005 f9f0 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4650:	4928      	ldr	r1, [pc, #160]	; (b46f4 <_Z8calc_lowPA2_iPdPii+0x154>)
   b4652:	4642      	mov	r2, r8
   b4654:	464b      	mov	r3, r9
   b4656:	f7ff fe1d 	bl	b4294 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b465a:	f005 f9e9 	bl	b9a30 <_Z16_fetch_usbserialv>
   b465e:	4926      	ldr	r1, [pc, #152]	; (b46f8 <_Z8calc_lowPA2_iPdPii+0x158>)
   b4660:	4632      	mov	r2, r6
   b4662:	463b      	mov	r3, r7
   b4664:	f7ff fe16 	bl	b4294 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4668:	f005 f9e2 	bl	b9a30 <_Z16_fetch_usbserialv>
   b466c:	4923      	ldr	r1, [pc, #140]	; (b46fc <_Z8calc_lowPA2_iPdPii+0x15c>)
   b466e:	f7ff fe11 	bl	b4294 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b4672:	b36c      	cbz	r4, b46d0 <_Z8calc_lowPA2_iPdPii+0x130>
    int i = 0;
   b4674:	2300      	movs	r3, #0
    int cnt = 0;
   b4676:	461e      	mov	r6, r3
   b4678:	1d2f      	adds	r7, r5, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b467a:	aa1c      	add	r2, sp, #112	; 0x70
   b467c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4680:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b4684:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
   b4688:	aa04      	add	r2, sp, #16
   b468a:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b468e:	6802      	ldr	r2, [r0, #0]
   b4690:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b4694:	3901      	subs	r1, #1
   b4696:	428a      	cmp	r2, r1
   b4698:	f103 0301 	add.w	r3, r3, #1
   b469c:	d0f7      	beq.n	b468e <_Z8calc_lowPA2_iPdPii+0xee>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b469e:	3201      	adds	r2, #1
        while (i <= idx)
   b46a0:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b46a2:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
            
            cnt++;
   b46a6:	f106 0201 	add.w	r2, r6, #1
        while (i <= idx)
   b46aa:	dd0f      	ble.n	b46cc <_Z8calc_lowPA2_iPdPii+0x12c>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b46ac:	f8df 8054 	ldr.w	r8, [pc, #84]	; b4704 <_Z8calc_lowPA2_iPdPii+0x164>
    for (int z = 0; z < cnt; z++)
   b46b0:	2400      	movs	r4, #0
   b46b2:	42b4      	cmp	r4, r6
   b46b4:	d00c      	beq.n	b46d0 <_Z8calc_lowPA2_iPdPii+0x130>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b46b6:	f005 f9bb 	bl	b9a30 <_Z16_fetch_usbserialv>
   b46ba:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b46be:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b46c2:	4641      	mov	r1, r8
   b46c4:	f7ff fde6 	bl	b4294 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b46c8:	3401      	adds	r4, #1
   b46ca:	e7f2      	b.n	b46b2 <_Z8calc_lowPA2_iPdPii+0x112>
            cnt++;
   b46cc:	4616      	mov	r6, r2
   b46ce:	e7d4      	b.n	b467a <_Z8calc_lowPA2_iPdPii+0xda>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b46d0:	4b0b      	ldr	r3, [pc, #44]	; (b4700 <_Z8calc_lowPA2_iPdPii+0x160>)
   b46d2:	2201      	movs	r2, #1

    return cnt;
}
   b46d4:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b46d6:	701a      	strb	r2, [r3, #0]
}
   b46d8:	b01d      	add	sp, #116	; 0x74
   b46da:	ecbd 8b02 	vpop	{d8}
   b46de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46e2:	bf00      	nop
   b46e4:	f3af 8000 	nop.w
   b46e8:	33333333 	.word	0x33333333
   b46ec:	3fd33333 	.word	0x3fd33333
   b46f0:	40590000 	.word	0x40590000
   b46f4:	000bd365 	.word	0x000bd365
   b46f8:	000bd383 	.word	0x000bd383
   b46fc:	000bd3a0 	.word	0x000bd3a0
   b4700:	2003dac1 	.word	0x2003dac1
   b4704:	000bd3de 	.word	0x000bd3de

000b4708 <_Z18hourly_JSON_updatev>:
extern String wh_yesterday_Json;
extern String pricestoday_Json;
extern String pricesyesterday_Json;

void hourly_JSON_update()
{
   b4708:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b470a:	4913      	ldr	r1, [pc, #76]	; (b4758 <_Z18hourly_JSON_updatev+0x50>)
   b470c:	4813      	ldr	r0, [pc, #76]	; (b475c <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b470e:	4e14      	ldr	r6, [pc, #80]	; (b4760 <_Z18hourly_JSON_updatev+0x58>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4710:	4d12      	ldr	r5, [pc, #72]	; (b475c <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b4712:	4f14      	ldr	r7, [pc, #80]	; (b4764 <_Z18hourly_JSON_updatev+0x5c>)
{
   b4714:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b4716:	f003 f8d3 	bl	b78c0 <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b471a:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b471c:	6833      	ldr	r3, [r6, #0]
   b471e:	220a      	movs	r2, #10
   b4720:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4724:	4668      	mov	r0, sp
   b4726:	f003 f8dd 	bl	b78e4 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b472a:	4669      	mov	r1, sp
   b472c:	4628      	mov	r0, r5
   b472e:	f003 f916 	bl	b795e <_ZN6String6concatERKS_>
   b4732:	4668      	mov	r0, sp
   b4734:	f003 f840 	bl	b77b8 <_ZN6StringD1Ev>
        if (i < 23)
   b4738:	2c17      	cmp	r4, #23
   b473a:	d003      	beq.n	b4744 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b473c:	4639      	mov	r1, r7
   b473e:	4628      	mov	r0, r5
   b4740:	f003 f91b 	bl	b797a <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b4744:	3401      	adds	r4, #1
   b4746:	2c18      	cmp	r4, #24
   b4748:	d1e8      	bne.n	b471c <_Z18hourly_JSON_updatev+0x14>
   b474a:	4907      	ldr	r1, [pc, #28]	; (b4768 <_Z18hourly_JSON_updatev+0x60>)
   b474c:	4803      	ldr	r0, [pc, #12]	; (b475c <_Z18hourly_JSON_updatev+0x54>)
        {
            wh_today_Json += ",";
        }
    }
    wh_today_Json += "]}";
}
   b474e:	b005      	add	sp, #20
   b4750:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4754:	f003 b911 	b.w	b797a <_ZN6String6concatEPKc>
   b4758:	000bd3ec 	.word	0x000bd3ec
   b475c:	2003e1bc 	.word	0x2003e1bc
   b4760:	2003e1b8 	.word	0x2003e1b8
   b4764:	000bd3fb 	.word	0x000bd3fb
   b4768:	000bd3fd 	.word	0x000bd3fd

000b476c <_Z11update_JSONv>:
void update_JSON()
{
   b476c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b476e:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4770:	4972      	ldr	r1, [pc, #456]	; (b493c <_Z11update_JSONv+0x1d0>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b4772:	4e73      	ldr	r6, [pc, #460]	; (b4940 <_Z11update_JSONv+0x1d4>)
   b4774:	4f73      	ldr	r7, [pc, #460]	; (b4944 <_Z11update_JSONv+0x1d8>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4776:	4d74      	ldr	r5, [pc, #464]	; (b4948 <_Z11update_JSONv+0x1dc>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4778:	4668      	mov	r0, sp
   b477a:	f003 f947 	bl	b7a0c <_ZN6String6formatEPKcz>
   b477e:	4669      	mov	r1, sp
   b4780:	4871      	ldr	r0, [pc, #452]	; (b4948 <_Z11update_JSONv+0x1dc>)
   b4782:	f003 f895 	bl	b78b0 <_ZN6StringaSEOS_>
   b4786:	4668      	mov	r0, sp
   b4788:	f003 f816 	bl	b77b8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b478c:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b478e:	6833      	ldr	r3, [r6, #0]
   b4790:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4794:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4798:	4639      	mov	r1, r7
   b479a:	4668      	mov	r0, sp
   b479c:	f003 f936 	bl	b7a0c <_ZN6String6formatEPKcz>
   b47a0:	4669      	mov	r1, sp
   b47a2:	4628      	mov	r0, r5
   b47a4:	f003 f8db 	bl	b795e <_ZN6String6concatERKS_>
   b47a8:	4668      	mov	r0, sp
   b47aa:	f003 f805 	bl	b77b8 <_ZN6StringD1Ev>
        if (i < 23)
   b47ae:	2c17      	cmp	r4, #23
   b47b0:	d00a      	beq.n	b47c8 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b47b2:	4966      	ldr	r1, [pc, #408]	; (b494c <_Z11update_JSONv+0x1e0>)
   b47b4:	4668      	mov	r0, sp
   b47b6:	f003 f929 	bl	b7a0c <_ZN6String6formatEPKcz>
   b47ba:	4669      	mov	r1, sp
   b47bc:	4628      	mov	r0, r5
   b47be:	f003 f8ce 	bl	b795e <_ZN6String6concatERKS_>
   b47c2:	4668      	mov	r0, sp
   b47c4:	f002 fff8 	bl	b77b8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47c8:	3401      	adds	r4, #1
   b47ca:	2c18      	cmp	r4, #24
   b47cc:	d1df      	bne.n	b478e <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b47ce:	4960      	ldr	r1, [pc, #384]	; (b4950 <_Z11update_JSONv+0x1e4>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b47d0:	4e60      	ldr	r6, [pc, #384]	; (b4954 <_Z11update_JSONv+0x1e8>)
   b47d2:	4f5c      	ldr	r7, [pc, #368]	; (b4944 <_Z11update_JSONv+0x1d8>)
   b47d4:	4d60      	ldr	r5, [pc, #384]	; (b4958 <_Z11update_JSONv+0x1ec>)
    pricesyesterday_Json += String::format("]}");
   b47d6:	4668      	mov	r0, sp
   b47d8:	f003 f918 	bl	b7a0c <_ZN6String6formatEPKcz>
   b47dc:	4669      	mov	r1, sp
   b47de:	485a      	ldr	r0, [pc, #360]	; (b4948 <_Z11update_JSONv+0x1dc>)
   b47e0:	f003 f8bd 	bl	b795e <_ZN6String6concatERKS_>
   b47e4:	4668      	mov	r0, sp
   b47e6:	f002 ffe7 	bl	b77b8 <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b47ea:	495c      	ldr	r1, [pc, #368]	; (b495c <_Z11update_JSONv+0x1f0>)
   b47ec:	4668      	mov	r0, sp
   b47ee:	f003 f90d 	bl	b7a0c <_ZN6String6formatEPKcz>
   b47f2:	4669      	mov	r1, sp
   b47f4:	4858      	ldr	r0, [pc, #352]	; (b4958 <_Z11update_JSONv+0x1ec>)
   b47f6:	f003 f85b 	bl	b78b0 <_ZN6StringaSEOS_>
   b47fa:	4668      	mov	r0, sp
   b47fc:	f002 ffdc 	bl	b77b8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4800:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b4802:	6833      	ldr	r3, [r6, #0]
   b4804:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4808:	e9d3 2300 	ldrd	r2, r3, [r3]
   b480c:	4639      	mov	r1, r7
   b480e:	4668      	mov	r0, sp
   b4810:	f003 f8fc 	bl	b7a0c <_ZN6String6formatEPKcz>
   b4814:	4669      	mov	r1, sp
   b4816:	4628      	mov	r0, r5
   b4818:	f003 f8a1 	bl	b795e <_ZN6String6concatERKS_>
   b481c:	4668      	mov	r0, sp
   b481e:	f002 ffcb 	bl	b77b8 <_ZN6StringD1Ev>
        if (i < 23)
   b4822:	2c17      	cmp	r4, #23
   b4824:	d00a      	beq.n	b483c <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b4826:	4949      	ldr	r1, [pc, #292]	; (b494c <_Z11update_JSONv+0x1e0>)
   b4828:	4668      	mov	r0, sp
   b482a:	f003 f8ef 	bl	b7a0c <_ZN6String6formatEPKcz>
   b482e:	4669      	mov	r1, sp
   b4830:	4628      	mov	r0, r5
   b4832:	f003 f894 	bl	b795e <_ZN6String6concatERKS_>
   b4836:	4668      	mov	r0, sp
   b4838:	f002 ffbe 	bl	b77b8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b483c:	3401      	adds	r4, #1
   b483e:	2c18      	cmp	r4, #24
   b4840:	d1df      	bne.n	b4802 <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b4842:	4943      	ldr	r1, [pc, #268]	; (b4950 <_Z11update_JSONv+0x1e4>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b4844:	4e46      	ldr	r6, [pc, #280]	; (b4960 <_Z11update_JSONv+0x1f4>)
   b4846:	4f47      	ldr	r7, [pc, #284]	; (b4964 <_Z11update_JSONv+0x1f8>)
   b4848:	4d47      	ldr	r5, [pc, #284]	; (b4968 <_Z11update_JSONv+0x1fc>)
    pricestoday_Json += String::format("]}");
   b484a:	4668      	mov	r0, sp
   b484c:	f003 f8de 	bl	b7a0c <_ZN6String6formatEPKcz>
   b4850:	4669      	mov	r1, sp
   b4852:	4841      	ldr	r0, [pc, #260]	; (b4958 <_Z11update_JSONv+0x1ec>)
   b4854:	f003 f883 	bl	b795e <_ZN6String6concatERKS_>
   b4858:	4668      	mov	r0, sp
   b485a:	f002 ffad 	bl	b77b8 <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b485e:	4943      	ldr	r1, [pc, #268]	; (b496c <_Z11update_JSONv+0x200>)
   b4860:	4668      	mov	r0, sp
   b4862:	f003 f8d3 	bl	b7a0c <_ZN6String6formatEPKcz>
   b4866:	4669      	mov	r1, sp
   b4868:	483f      	ldr	r0, [pc, #252]	; (b4968 <_Z11update_JSONv+0x1fc>)
   b486a:	f003 f821 	bl	b78b0 <_ZN6StringaSEOS_>
   b486e:	4668      	mov	r0, sp
   b4870:	f002 ffa2 	bl	b77b8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4874:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b4876:	6833      	ldr	r3, [r6, #0]
   b4878:	4639      	mov	r1, r7
   b487a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b487e:	4668      	mov	r0, sp
   b4880:	f003 f8c4 	bl	b7a0c <_ZN6String6formatEPKcz>
   b4884:	4669      	mov	r1, sp
   b4886:	4628      	mov	r0, r5
   b4888:	f003 f869 	bl	b795e <_ZN6String6concatERKS_>
   b488c:	4668      	mov	r0, sp
   b488e:	f002 ff93 	bl	b77b8 <_ZN6StringD1Ev>
        if (i < 23)
   b4892:	2c17      	cmp	r4, #23
   b4894:	d00a      	beq.n	b48ac <_Z11update_JSONv+0x140>
        {
            wh_yesterday_Json += String::format(",");
   b4896:	492d      	ldr	r1, [pc, #180]	; (b494c <_Z11update_JSONv+0x1e0>)
   b4898:	4668      	mov	r0, sp
   b489a:	f003 f8b7 	bl	b7a0c <_ZN6String6formatEPKcz>
   b489e:	4669      	mov	r1, sp
   b48a0:	4628      	mov	r0, r5
   b48a2:	f003 f85c 	bl	b795e <_ZN6String6concatERKS_>
   b48a6:	4668      	mov	r0, sp
   b48a8:	f002 ff86 	bl	b77b8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48ac:	3401      	adds	r4, #1
   b48ae:	2c18      	cmp	r4, #24
   b48b0:	d1e1      	bne.n	b4876 <_Z11update_JSONv+0x10a>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b48b2:	4927      	ldr	r1, [pc, #156]	; (b4950 <_Z11update_JSONv+0x1e4>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b48b4:	4e2e      	ldr	r6, [pc, #184]	; (b4970 <_Z11update_JSONv+0x204>)
   b48b6:	4f2b      	ldr	r7, [pc, #172]	; (b4964 <_Z11update_JSONv+0x1f8>)
   b48b8:	4d2e      	ldr	r5, [pc, #184]	; (b4974 <_Z11update_JSONv+0x208>)
    wh_yesterday_Json += String::format("]}");
   b48ba:	4668      	mov	r0, sp
   b48bc:	f003 f8a6 	bl	b7a0c <_ZN6String6formatEPKcz>
   b48c0:	4669      	mov	r1, sp
   b48c2:	4829      	ldr	r0, [pc, #164]	; (b4968 <_Z11update_JSONv+0x1fc>)
   b48c4:	f003 f84b 	bl	b795e <_ZN6String6concatERKS_>
   b48c8:	4668      	mov	r0, sp
   b48ca:	f002 ff75 	bl	b77b8 <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b48ce:	492a      	ldr	r1, [pc, #168]	; (b4978 <_Z11update_JSONv+0x20c>)
   b48d0:	4668      	mov	r0, sp
   b48d2:	f003 f89b 	bl	b7a0c <_ZN6String6formatEPKcz>
   b48d6:	4669      	mov	r1, sp
   b48d8:	4826      	ldr	r0, [pc, #152]	; (b4974 <_Z11update_JSONv+0x208>)
   b48da:	f002 ffe9 	bl	b78b0 <_ZN6StringaSEOS_>
   b48de:	4668      	mov	r0, sp
   b48e0:	f002 ff6a 	bl	b77b8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48e4:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b48e6:	6833      	ldr	r3, [r6, #0]
   b48e8:	4639      	mov	r1, r7
   b48ea:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b48ee:	4668      	mov	r0, sp
   b48f0:	f003 f88c 	bl	b7a0c <_ZN6String6formatEPKcz>
   b48f4:	4669      	mov	r1, sp
   b48f6:	4628      	mov	r0, r5
   b48f8:	f003 f831 	bl	b795e <_ZN6String6concatERKS_>
   b48fc:	4668      	mov	r0, sp
   b48fe:	f002 ff5b 	bl	b77b8 <_ZN6StringD1Ev>
        if (i < 23)
   b4902:	2c17      	cmp	r4, #23
   b4904:	d00a      	beq.n	b491c <_Z11update_JSONv+0x1b0>
        {
            wh_today_Json += String::format(",");
   b4906:	4911      	ldr	r1, [pc, #68]	; (b494c <_Z11update_JSONv+0x1e0>)
   b4908:	4668      	mov	r0, sp
   b490a:	f003 f87f 	bl	b7a0c <_ZN6String6formatEPKcz>
   b490e:	4669      	mov	r1, sp
   b4910:	4628      	mov	r0, r5
   b4912:	f003 f824 	bl	b795e <_ZN6String6concatERKS_>
   b4916:	4668      	mov	r0, sp
   b4918:	f002 ff4e 	bl	b77b8 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b491c:	3401      	adds	r4, #1
   b491e:	2c18      	cmp	r4, #24
   b4920:	d1e1      	bne.n	b48e6 <_Z11update_JSONv+0x17a>
        }
    }
    wh_today_Json += String::format("]}");
   b4922:	4668      	mov	r0, sp
   b4924:	490a      	ldr	r1, [pc, #40]	; (b4950 <_Z11update_JSONv+0x1e4>)
   b4926:	f003 f871 	bl	b7a0c <_ZN6String6formatEPKcz>
   b492a:	4669      	mov	r1, sp
   b492c:	4811      	ldr	r0, [pc, #68]	; (b4974 <_Z11update_JSONv+0x208>)
   b492e:	f003 f816 	bl	b795e <_ZN6String6concatERKS_>
   b4932:	4668      	mov	r0, sp
   b4934:	f002 ff40 	bl	b77b8 <_ZN6StringD1Ev>

   b4938:	b005      	add	sp, #20
   b493a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b493c:	000bd400 	.word	0x000bd400
   b4940:	2003dca0 	.word	0x2003dca0
   b4944:	000bd415 	.word	0x000bd415
   b4948:	2003dccc 	.word	0x2003dccc
   b494c:	000bd3fb 	.word	0x000bd3fb
   b4950:	000bd3fd 	.word	0x000bd3fd
   b4954:	2003dc98 	.word	0x2003dc98
   b4958:	2003dcac 	.word	0x2003dcac
   b495c:	000bd41b 	.word	0x000bd41b
   b4960:	2003e1cc 	.word	0x2003e1cc
   b4964:	000bd5c2 	.word	0x000bd5c2
   b4968:	2003e1d0 	.word	0x2003e1d0
   b496c:	000bd42c 	.word	0x000bd42c
   b4970:	2003e1b8 	.word	0x2003e1b8
   b4974:	2003e1bc 	.word	0x2003e1bc
   b4978:	000bd43f 	.word	0x000bd43f

000b497c <_Z11init_memoryv>:
{
   b497c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Serial.printf("before %lu\n", System.freeMemory());
   b4980:	f005 f856 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4984:	4604      	mov	r4, r0
   b4986:	f002 faf1 	bl	b6f6c <_ZN11SystemClass10freeMemoryEv>
   b498a:	493c      	ldr	r1, [pc, #240]	; (b4a7c <_Z11init_memoryv+0x100>)
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b498c:	4d3c      	ldr	r5, [pc, #240]	; (b4a80 <_Z11init_memoryv+0x104>)
    Serial.printf("before %lu\n", System.freeMemory());
   b498e:	4602      	mov	r2, r0
   b4990:	4620      	mov	r0, r4
   b4992:	f7ff fc7f 	bl	b4294 <_ZN5Print6printfEPKcz>
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b4996:	20c0      	movs	r0, #192	; 0xc0
   b4998:	f002 fa40 	bl	b6e1c <malloc>
   b499c:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b499e:	b928      	cbnz	r0, b49ac <_Z11init_memoryv+0x30>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b49a0:	f005 f846 	bl	b9a30 <_Z16_fetch_usbserialv>
   b49a4:	4937      	ldr	r1, [pc, #220]	; (b4a84 <_Z11init_memoryv+0x108>)
   b49a6:	f7ff fc75 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b49aa:	e7fe      	b.n	b49aa <_Z11init_memoryv+0x2e>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b49ac:	20c0      	movs	r0, #192	; 0xc0
   b49ae:	f002 fa35 	bl	b6e1c <malloc>
   b49b2:	4c35      	ldr	r4, [pc, #212]	; (b4a88 <_Z11init_memoryv+0x10c>)
   b49b4:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b49b6:	b928      	cbnz	r0, b49c4 <_Z11init_memoryv+0x48>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b49b8:	f005 f83a 	bl	b9a30 <_Z16_fetch_usbserialv>
   b49bc:	4933      	ldr	r1, [pc, #204]	; (b4a8c <_Z11init_memoryv+0x110>)
   b49be:	f7ff fc69 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b49c2:	e7fe      	b.n	b49c2 <_Z11init_memoryv+0x46>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b49c4:	20c0      	movs	r0, #192	; 0xc0
   b49c6:	f002 fa29 	bl	b6e1c <malloc>
   b49ca:	4e31      	ldr	r6, [pc, #196]	; (b4a90 <_Z11init_memoryv+0x114>)
   b49cc:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b49ce:	b928      	cbnz	r0, b49dc <_Z11init_memoryv+0x60>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b49d0:	f005 f82e 	bl	b9a30 <_Z16_fetch_usbserialv>
   b49d4:	492f      	ldr	r1, [pc, #188]	; (b4a94 <_Z11init_memoryv+0x118>)
   b49d6:	f7ff fc5d 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b49da:	e7fe      	b.n	b49da <_Z11init_memoryv+0x5e>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b49dc:	f005 f828 	bl	b9a30 <_Z16_fetch_usbserialv>
   b49e0:	492d      	ldr	r1, [pc, #180]	; (b4a98 <_Z11init_memoryv+0x11c>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b49e2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b4aac <_Z11init_memoryv+0x130>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b49e6:	f44f 7210 	mov.w	r2, #576	; 0x240
   b49ea:	f7ff fc53 	bl	b4294 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b49ee:	2060      	movs	r0, #96	; 0x60
   b49f0:	f002 fa14 	bl	b6e1c <malloc>
   b49f4:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b49f8:	b928      	cbnz	r0, b4a06 <_Z11init_memoryv+0x8a>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b49fa:	f005 f819 	bl	b9a30 <_Z16_fetch_usbserialv>
   b49fe:	4927      	ldr	r1, [pc, #156]	; (b4a9c <_Z11init_memoryv+0x120>)
   b4a00:	f7ff fc48 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b4a04:	e7fe      	b.n	b4a04 <_Z11init_memoryv+0x88>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b4a06:	2060      	movs	r0, #96	; 0x60
   b4a08:	f002 fa08 	bl	b6e1c <malloc>
   b4a0c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b4ab0 <_Z11init_memoryv+0x134>
   b4a10:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b4a14:	b928      	cbnz	r0, b4a22 <_Z11init_memoryv+0xa6>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b4a16:	f005 f80b 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4a1a:	4921      	ldr	r1, [pc, #132]	; (b4aa0 <_Z11init_memoryv+0x124>)
   b4a1c:	f7ff fc3a 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b4a20:	e7fe      	b.n	b4a20 <_Z11init_memoryv+0xa4>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b4a22:	f005 f805 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4a26:	491f      	ldr	r1, [pc, #124]	; (b4aa4 <_Z11init_memoryv+0x128>)
   b4a28:	22c0      	movs	r2, #192	; 0xc0
   b4a2a:	f7ff fc33 	bl	b4294 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b4a2e:	f004 ffff 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4a32:	4607      	mov	r7, r0
   b4a34:	f002 fa9a 	bl	b6f6c <_ZN11SystemClass10freeMemoryEv>
   b4a38:	491b      	ldr	r1, [pc, #108]	; (b4aa8 <_Z11init_memoryv+0x12c>)
   b4a3a:	4602      	mov	r2, r0
   b4a3c:	4638      	mov	r0, r7
   b4a3e:	f7ff fc29 	bl	b4294 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b4a42:	6828      	ldr	r0, [r5, #0]
   b4a44:	22c0      	movs	r2, #192	; 0xc0
   b4a46:	2100      	movs	r1, #0
   b4a48:	f006 fba7 	bl	bb19a <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b4a4c:	6820      	ldr	r0, [r4, #0]
   b4a4e:	22c0      	movs	r2, #192	; 0xc0
   b4a50:	2100      	movs	r1, #0
   b4a52:	f006 fba2 	bl	bb19a <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4a56:	6830      	ldr	r0, [r6, #0]
   b4a58:	22c0      	movs	r2, #192	; 0xc0
   b4a5a:	2100      	movs	r1, #0
   b4a5c:	f006 fb9d 	bl	bb19a <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4a60:	f8d8 0000 	ldr.w	r0, [r8]
   b4a64:	2260      	movs	r2, #96	; 0x60
   b4a66:	2100      	movs	r1, #0
   b4a68:	f006 fb97 	bl	bb19a <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4a6c:	f8d9 0000 	ldr.w	r0, [r9]
   b4a70:	2260      	movs	r2, #96	; 0x60
}
   b4a72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4a76:	2100      	movs	r1, #0
   b4a78:	f006 bb8f 	b.w	bb19a <memset>
   b4a7c:	000bd44e 	.word	0x000bd44e
   b4a80:	2003dca0 	.word	0x2003dca0
   b4a84:	000bd45a 	.word	0x000bd45a
   b4a88:	2003dc98 	.word	0x2003dc98
   b4a8c:	000bd488 	.word	0x000bd488
   b4a90:	2003dc9c 	.word	0x2003dc9c
   b4a94:	000bd4b2 	.word	0x000bd4b2
   b4a98:	000bd4df 	.word	0x000bd4df
   b4a9c:	000bd511 	.word	0x000bd511
   b4aa0:	000bd539 	.word	0x000bd539
   b4aa4:	000bd565 	.word	0x000bd565
   b4aa8:	000bd590 	.word	0x000bd590
   b4aac:	2003e1b8 	.word	0x2003e1b8
   b4ab0:	2003e1cc 	.word	0x2003e1cc

000b4ab4 <setup>:
{
   b4ab4:	b510      	push	{r4, lr}
    STARTUP = true;
   b4ab6:	4b43      	ldr	r3, [pc, #268]	; (b4bc4 <setup+0x110>)
   b4ab8:	2201      	movs	r2, #1
{
   b4aba:	b092      	sub	sp, #72	; 0x48
    STARTUP = true;
   b4abc:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4abe:	f002 f985 	bl	b6dcc <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4ac2:	b910      	cbnz	r0, b4aca <setup+0x16>
            spark_process();
   b4ac4:	f002 f97a 	bl	b6dbc <spark_process>
        while (_while() && !_condition()) {
   b4ac8:	e7f9      	b.n	b4abe <setup+0xa>
   b4aca:	f002 f97f 	bl	b6dcc <spark_cloud_flag_connected>
    ble_setup();
   b4ace:	f7ff fccf 	bl	b4470 <_Z9ble_setupv>
    init_memory();
   b4ad2:	f7ff ff53 	bl	b497c <_Z11init_memoryv>
    Time.zone(1);
   b4ad6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b4ada:	f004 fabd 	bl	b9058 <_ZN9TimeClass4zoneEf>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4ade:	2400      	movs	r4, #0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b4ae0:	2103      	movs	r1, #3
   b4ae2:	2008      	movs	r0, #8
   b4ae4:	f005 fc94 	bl	ba410 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4ae8:	f04f 33ff 	mov.w	r3, #4294967295
   b4aec:	4936      	ldr	r1, [pc, #216]	; (b4bc8 <setup+0x114>)
   b4aee:	9400      	str	r4, [sp, #0]
   b4af0:	2201      	movs	r2, #1
   b4af2:	2008      	movs	r0, #8
   b4af4:	f004 ffc4 	bl	b9a80 <_Z15attachInterrupttPFvvE13InterruptModeah>
    IPAddress IP = resolver.search("homeassistant.local");
   b4af8:	4a34      	ldr	r2, [pc, #208]	; (b4bcc <setup+0x118>)
   b4afa:	4935      	ldr	r1, [pc, #212]	; (b4bd0 <setup+0x11c>)
   b4afc:	a80c      	add	r0, sp, #48	; 0x30
   b4afe:	f001 fd9d 	bl	b663c <_ZN12mDNSResolver8Resolver6searchEPKc>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b4b02:	a90c      	add	r1, sp, #48	; 0x30
   b4b04:	a808      	add	r0, sp, #32
   b4b06:	f002 ff67 	bl	b79d8 <_ZN6StringC1ERK9Printable>
    client.setBroker(IP.toString(), PORT);
   b4b0a:	9908      	ldr	r1, [sp, #32]
   b4b0c:	4831      	ldr	r0, [pc, #196]	; (b4bd4 <setup+0x120>)
   b4b0e:	f240 725b 	movw	r2, #1883	; 0x75b
   b4b12:	f000 fdd6 	bl	b56c2 <_ZN4MQTT9setBrokerEPKct>
   b4b16:	a808      	add	r0, sp, #32
   b4b18:	f002 fe4e 	bl	b77b8 <_ZN6StringD1Ev>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4b1c:	4623      	mov	r3, r4
   b4b1e:	4622      	mov	r2, r4
   b4b20:	492d      	ldr	r1, [pc, #180]	; (b4bd8 <setup+0x124>)
   b4b22:	482e      	ldr	r0, [pc, #184]	; (b4bdc <setup+0x128>)
   b4b24:	e9cd 4400 	strd	r4, r4, [sp]
   b4b28:	f002 f960 	bl	b6dec <spark_subscribe>
    Serial.printf("Return value: %d", client.connect("client_" + String(Time.now()), "mqtt", "mqtt"));
   b4b2c:	f004 ff80 	bl	b9a30 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4b30:	492b      	ldr	r1, [pc, #172]	; (b4be0 <setup+0x12c>)
   b4b32:	4604      	mov	r4, r0
   b4b34:	a808      	add	r0, sp, #32
   b4b36:	f002 fe8a 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
   b4b3a:	f004 faca 	bl	b90d2 <_ZN9TimeClass3nowEv>
   b4b3e:	220a      	movs	r2, #10
   b4b40:	4601      	mov	r1, r0
   b4b42:	a804      	add	r0, sp, #16
   b4b44:	f002 fee1 	bl	b790a <_ZN6StringC1Elh>
   b4b48:	a904      	add	r1, sp, #16
   b4b4a:	a808      	add	r0, sp, #32
   b4b4c:	f002 ff38 	bl	b79c0 <_ZplRK15StringSumHelperRK6String>
   b4b50:	4b24      	ldr	r3, [pc, #144]	; (b4be4 <setup+0x130>)
   b4b52:	6801      	ldr	r1, [r0, #0]
   b4b54:	481f      	ldr	r0, [pc, #124]	; (b4bd4 <setup+0x120>)
   b4b56:	461a      	mov	r2, r3
   b4b58:	f000 feaa 	bl	b58b0 <_ZN4MQTT7connectEPKcS1_S1_>
   b4b5c:	4922      	ldr	r1, [pc, #136]	; (b4be8 <setup+0x134>)
   b4b5e:	4602      	mov	r2, r0
   b4b60:	4620      	mov	r0, r4
   b4b62:	f7ff fb97 	bl	b4294 <_ZN5Print6printfEPKcz>
   b4b66:	a804      	add	r0, sp, #16
   b4b68:	f002 fe26 	bl	b77b8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4b6c:	a808      	add	r0, sp, #32
   b4b6e:	f002 fe23 	bl	b77b8 <_ZN6StringD1Ev>
    if (client.isConnected())
   b4b72:	4818      	ldr	r0, [pc, #96]	; (b4bd4 <setup+0x120>)
   b4b74:	f000 fd97 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b4b78:	b168      	cbz	r0, b4b96 <setup+0xe2>
        Serial.printf("Connected to MQTT broker\n");
   b4b7a:	f004 ff59 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4b7e:	491b      	ldr	r1, [pc, #108]	; (b4bec <setup+0x138>)
   b4b80:	f7ff fb88 	bl	b4294 <_ZN5Print6printfEPKcz>
        client.publish("power/get", "hello world");
   b4b84:	491a      	ldr	r1, [pc, #104]	; (b4bf0 <setup+0x13c>)
   b4b86:	4a1b      	ldr	r2, [pc, #108]	; (b4bf4 <setup+0x140>)
   b4b88:	4812      	ldr	r0, [pc, #72]	; (b4bd4 <setup+0x120>)
   b4b8a:	f000 ff1c 	bl	b59c6 <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b4b8e:	491a      	ldr	r1, [pc, #104]	; (b4bf8 <setup+0x144>)
   b4b90:	4810      	ldr	r0, [pc, #64]	; (b4bd4 <setup+0x120>)
   b4b92:	f001 f8bc 	bl	b5d0e <_ZN4MQTT9subscribeEPKc>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4b96:	f004 ff4b 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4b9a:	4604      	mov	r4, r0
   b4b9c:	f004 faaa 	bl	b90f4 <_ZN9TimeClass4hourEv>
   b4ba0:	9003      	str	r0, [sp, #12]
   b4ba2:	f004 fab3 	bl	b910c <_ZN9TimeClass6minuteEv>
   b4ba6:	9a03      	ldr	r2, [sp, #12]
   b4ba8:	4914      	ldr	r1, [pc, #80]	; (b4bfc <setup+0x148>)
   b4baa:	4603      	mov	r3, r0
   b4bac:	4620      	mov	r0, r4
   b4bae:	f7ff fb71 	bl	b4294 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4bb2:	4813      	ldr	r0, [pc, #76]	; (b4c00 <setup+0x14c>)
   b4bb4:	2200      	movs	r2, #0
   b4bb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4bba:	f7ff faf5 	bl	b41a8 <_ZN5Timer6_startEjb.isra.0>
}
   b4bbe:	b012      	add	sp, #72	; 0x48
   b4bc0:	bd10      	pop	{r4, pc}
   b4bc2:	bf00      	nop
   b4bc4:	2003dac0 	.word	0x2003dac0
   b4bc8:	000b40e1 	.word	0x000b40e1
   b4bcc:	000bd59b 	.word	0x000bd59b
   b4bd0:	2003dcdc 	.word	0x2003dcdc
   b4bd4:	2003dbd8 	.word	0x2003dbd8
   b4bd8:	000b42b1 	.word	0x000b42b1
   b4bdc:	000bd5fb 	.word	0x000bd5fb
   b4be0:	000bd636 	.word	0x000bd636
   b4be4:	000bd5af 	.word	0x000bd5af
   b4be8:	000bd5b4 	.word	0x000bd5b4
   b4bec:	000bd5c5 	.word	0x000bd5c5
   b4bf0:	000bd5eb 	.word	0x000bd5eb
   b4bf4:	000bd5df 	.word	0x000bd5df
   b4bf8:	000bd5f5 	.word	0x000bd5f5
   b4bfc:	000bd602 	.word	0x000bd602
   b4c00:	2003e150 	.word	0x2003e150

000b4c04 <_Z13rotate_pricesv>:
{
   b4c04:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b4c06:	4a0c      	ldr	r2, [pc, #48]	; (b4c38 <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b4c08:	4b0c      	ldr	r3, [pc, #48]	; (b4c3c <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b4c0a:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b4c0c:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b4c0e:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b4c10:	4b0b      	ldr	r3, [pc, #44]	; (b4c40 <_Z13rotate_pricesv+0x3c>)
   b4c12:	6819      	ldr	r1, [r3, #0]
   b4c14:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4c16:	22c0      	movs	r2, #192	; 0xc0
   b4c18:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b4c1a:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4c1c:	f006 fabd 	bl	bb19a <memset>
    int *temp2 = wh_yesterday;
   b4c20:	4a08      	ldr	r2, [pc, #32]	; (b4c44 <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b4c22:	4b09      	ldr	r3, [pc, #36]	; (b4c48 <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b4c24:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b4c26:	6819      	ldr	r1, [r3, #0]
   b4c28:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b4c2a:	6018      	str	r0, [r3, #0]
}
   b4c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4c30:	2260      	movs	r2, #96	; 0x60
   b4c32:	2100      	movs	r1, #0
   b4c34:	f006 bab1 	b.w	bb19a <memset>
   b4c38:	2003dc98 	.word	0x2003dc98
   b4c3c:	2003dca0 	.word	0x2003dca0
   b4c40:	2003dc9c 	.word	0x2003dc9c
   b4c44:	2003e1cc 	.word	0x2003e1cc
   b4c48:	2003e1b8 	.word	0x2003e1b8

000b4c4c <_Z10check_mqttv>:
{
   b4c4c:	b500      	push	{lr}
    if (client.isConnected())
   b4c4e:	481b      	ldr	r0, [pc, #108]	; (b4cbc <_Z10check_mqttv+0x70>)
{
   b4c50:	b089      	sub	sp, #36	; 0x24
    if (client.isConnected())
   b4c52:	f000 fd28 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b4c56:	b128      	cbz	r0, b4c64 <_Z10check_mqttv+0x18>
        client.loop();
   b4c58:	4818      	ldr	r0, [pc, #96]	; (b4cbc <_Z10check_mqttv+0x70>)
}
   b4c5a:	b009      	add	sp, #36	; 0x24
   b4c5c:	f85d eb04 	ldr.w	lr, [sp], #4
        client.loop();
   b4c60:	f000 bf0d 	b.w	b5a7e <_ZN4MQTT4loopEv>
        Serial.printf("Client disconnected\n");
   b4c64:	f004 fee4 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4c68:	4915      	ldr	r1, [pc, #84]	; (b4cc0 <_Z10check_mqttv+0x74>)
   b4c6a:	f7ff fb13 	bl	b4294 <_ZN5Print6printfEPKcz>
	StringSumHelper(const char *p) : String(p) {}
   b4c6e:	4915      	ldr	r1, [pc, #84]	; (b4cc4 <_Z10check_mqttv+0x78>)
   b4c70:	4668      	mov	r0, sp
   b4c72:	f002 fdec 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
        client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b4c76:	f004 fa2c 	bl	b90d2 <_ZN9TimeClass3nowEv>
   b4c7a:	220a      	movs	r2, #10
   b4c7c:	4601      	mov	r1, r0
   b4c7e:	a804      	add	r0, sp, #16
   b4c80:	f002 fe43 	bl	b790a <_ZN6StringC1Elh>
   b4c84:	a904      	add	r1, sp, #16
   b4c86:	4668      	mov	r0, sp
   b4c88:	f002 fe9a 	bl	b79c0 <_ZplRK15StringSumHelperRK6String>
   b4c8c:	4b0e      	ldr	r3, [pc, #56]	; (b4cc8 <_Z10check_mqttv+0x7c>)
   b4c8e:	6801      	ldr	r1, [r0, #0]
   b4c90:	480a      	ldr	r0, [pc, #40]	; (b4cbc <_Z10check_mqttv+0x70>)
   b4c92:	461a      	mov	r2, r3
   b4c94:	f000 fe0c 	bl	b58b0 <_ZN4MQTT7connectEPKcS1_S1_>
   b4c98:	a804      	add	r0, sp, #16
   b4c9a:	f002 fd8d 	bl	b77b8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4c9e:	4668      	mov	r0, sp
   b4ca0:	f002 fd8a 	bl	b77b8 <_ZN6StringD1Ev>
        if (client.isConnected())
   b4ca4:	4805      	ldr	r0, [pc, #20]	; (b4cbc <_Z10check_mqttv+0x70>)
   b4ca6:	f000 fcfe 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b4caa:	b120      	cbz	r0, b4cb6 <_Z10check_mqttv+0x6a>
            Serial.printf("Client reconnected\n");
   b4cac:	f004 fec0 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4cb0:	4906      	ldr	r1, [pc, #24]	; (b4ccc <_Z10check_mqttv+0x80>)
   b4cb2:	f7ff faef 	bl	b4294 <_ZN5Print6printfEPKcz>
}
   b4cb6:	b009      	add	sp, #36	; 0x24
   b4cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   b4cbc:	2003dbd8 	.word	0x2003dbd8
   b4cc0:	000bd61c 	.word	0x000bd61c
   b4cc4:	000bd631 	.word	0x000bd631
   b4cc8:	000bd5af 	.word	0x000bd5af
   b4ccc:	000bd63e 	.word	0x000bd63e

000b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4cd0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4cd2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4cd4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4cd6:	b17c      	cbz	r4, b4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4cd8:	6863      	ldr	r3, [r4, #4]
   b4cda:	3b01      	subs	r3, #1
   b4cdc:	6063      	str	r3, [r4, #4]
   b4cde:	b95b      	cbnz	r3, b4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4ce0:	6823      	ldr	r3, [r4, #0]
   b4ce2:	4620      	mov	r0, r4
   b4ce4:	689b      	ldr	r3, [r3, #8]
   b4ce6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ce8:	68a3      	ldr	r3, [r4, #8]
   b4cea:	3b01      	subs	r3, #1
   b4cec:	60a3      	str	r3, [r4, #8]
   b4cee:	b91b      	cbnz	r3, b4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4cf0:	6823      	ldr	r3, [r4, #0]
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	68db      	ldr	r3, [r3, #12]
   b4cf6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4cf8:	4628      	mov	r0, r5
   b4cfa:	bd38      	pop	{r3, r4, r5, pc}

000b4cfc <_Z8get_datai>:
{
   b4cfc:	b530      	push	{r4, r5, lr}
    temp[0] = 0;
   b4cfe:	4b13      	ldr	r3, [pc, #76]	; (b4d4c <_Z8get_datai+0x50>)
   b4d00:	2500      	movs	r5, #0
{
   b4d02:	b08d      	sub	sp, #52	; 0x34
    temp[0] = 0;
   b4d04:	701d      	strb	r5, [r3, #0]
{
   b4d06:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 1, 0);
   b4d08:	f004 fa2c 	bl	b9164 <_ZN9TimeClass4yearEv>
   b4d0c:	9005      	str	r0, [sp, #20]
   b4d0e:	f004 fa21 	bl	b9154 <_ZN9TimeClass5monthEv>
   b4d12:	1c61      	adds	r1, r4, #1
   b4d14:	e9cd 4100 	strd	r4, r1, [sp]
   b4d18:	9a05      	ldr	r2, [sp, #20]
   b4d1a:	490d      	ldr	r1, [pc, #52]	; (b4d50 <_Z8get_datai+0x54>)
   b4d1c:	9502      	str	r5, [sp, #8]
   b4d1e:	4603      	mov	r3, r0
   b4d20:	a808      	add	r0, sp, #32
   b4d22:	f002 fe73 	bl	b7a0c <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4d26:	4b0b      	ldr	r3, [pc, #44]	; (b4d54 <_Z8get_datai+0x58>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4d28:	9a08      	ldr	r2, [sp, #32]
   b4d2a:	781b      	ldrb	r3, [r3, #0]
   b4d2c:	490a      	ldr	r1, [pc, #40]	; (b4d58 <_Z8get_datai+0x5c>)
   b4d2e:	f88d 3000 	strb.w	r3, [sp]
   b4d32:	a806      	add	r0, sp, #24
   b4d34:	233c      	movs	r3, #60	; 0x3c
   b4d36:	f004 fc13 	bl	b9560 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4d3a:	a807      	add	r0, sp, #28
   b4d3c:	f7ff ffc8 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4d40:	a808      	add	r0, sp, #32
   b4d42:	f002 fd39 	bl	b77b8 <_ZN6StringD1Ev>
}
   b4d46:	b00d      	add	sp, #52	; 0x34
   b4d48:	bd30      	pop	{r4, r5, pc}
   b4d4a:	bf00      	nop
   b4d4c:	2003dd4c 	.word	0x2003dd4c
   b4d50:	000bd652 	.word	0x000bd652
   b4d54:	2003db68 	.word	0x2003db68
   b4d58:	000bd6a5 	.word	0x000bd6a5

000b4d5c <_Z15transmit_pricesPA2_ii>:
{
   b4d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4d60:	b08a      	sub	sp, #40	; 0x28
   b4d62:	4605      	mov	r5, r0
   b4d64:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b4d66:	f004 fe63 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4d6a:	491c      	ldr	r1, [pc, #112]	; (b4ddc <_Z15transmit_pricesPA2_ii+0x80>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4d6c:	4f1c      	ldr	r7, [pc, #112]	; (b4de0 <_Z15transmit_pricesPA2_ii+0x84>)
    Serial.printf("In work\n");
   b4d6e:	f7ff fa91 	bl	b4294 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b4d72:	491c      	ldr	r1, [pc, #112]	; (b4de4 <_Z15transmit_pricesPA2_ii+0x88>)
   b4d74:	a802      	add	r0, sp, #8
   b4d76:	f002 fd6a 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4d7a:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4d7c:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b4d80:	42b4      	cmp	r4, r6
   b4d82:	da10      	bge.n	b4da6 <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4d84:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4d88:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4d8c:	4639      	mov	r1, r7
   b4d8e:	a806      	add	r0, sp, #24
   b4d90:	f002 fe3c 	bl	b7a0c <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4d94:	a906      	add	r1, sp, #24
   b4d96:	a802      	add	r0, sp, #8
   b4d98:	f002 fde1 	bl	b795e <_ZN6String6concatERKS_>
   b4d9c:	a806      	add	r0, sp, #24
   b4d9e:	f002 fd0b 	bl	b77b8 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b4da2:	3401      	adds	r4, #1
   b4da4:	e7ec      	b.n	b4d80 <_Z15transmit_pricesPA2_ii+0x24>
   b4da6:	4b10      	ldr	r3, [pc, #64]	; (b4de8 <_Z15transmit_pricesPA2_ii+0x8c>)
   b4da8:	9a02      	ldr	r2, [sp, #8]
   b4daa:	781b      	ldrb	r3, [r3, #0]
   b4dac:	490f      	ldr	r1, [pc, #60]	; (b4dec <_Z15transmit_pricesPA2_ii+0x90>)
   b4dae:	f88d 3000 	strb.w	r3, [sp]
   b4db2:	a806      	add	r0, sp, #24
   b4db4:	233c      	movs	r3, #60	; 0x3c
   b4db6:	f004 fbd3 	bl	b9560 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4dba:	a807      	add	r0, sp, #28
   b4dbc:	f7ff ff88 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    client.publish("prices", data);
   b4dc0:	9a02      	ldr	r2, [sp, #8]
   b4dc2:	490b      	ldr	r1, [pc, #44]	; (b4df0 <_Z15transmit_pricesPA2_ii+0x94>)
   b4dc4:	480b      	ldr	r0, [pc, #44]	; (b4df4 <_Z15transmit_pricesPA2_ii+0x98>)
   b4dc6:	f000 fdfe 	bl	b59c6 <_ZN4MQTT7publishEPKcS1_>
    client.loop();
   b4dca:	480a      	ldr	r0, [pc, #40]	; (b4df4 <_Z15transmit_pricesPA2_ii+0x98>)
   b4dcc:	f000 fe57 	bl	b5a7e <_ZN4MQTT4loopEv>
    String data = "Cheap(ish) hours of the day: ";
   b4dd0:	a802      	add	r0, sp, #8
   b4dd2:	f002 fcf1 	bl	b77b8 <_ZN6StringD1Ev>
}
   b4dd6:	b00a      	add	sp, #40	; 0x28
   b4dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4ddc:	000bd6ae 	.word	0x000bd6ae
   b4de0:	000bd6d5 	.word	0x000bd6d5
   b4de4:	000bd6b7 	.word	0x000bd6b7
   b4de8:	2003db68 	.word	0x2003db68
   b4dec:	000bd6e4 	.word	0x000bd6e4
   b4df0:	000bd5fb 	.word	0x000bd5fb
   b4df4:	2003dbd8 	.word	0x2003dbd8

000b4df8 <loop>:
{
   b4df8:	b570      	push	{r4, r5, r6, lr}
    if (STARTUP)
   b4dfa:	4d92      	ldr	r5, [pc, #584]	; (b5044 <loop+0x24c>)
   b4dfc:	4c92      	ldr	r4, [pc, #584]	; (b5048 <loop+0x250>)
   b4dfe:	782b      	ldrb	r3, [r5, #0]
{
   b4e00:	b0c6      	sub	sp, #280	; 0x118
    if (STARTUP)
   b4e02:	2b00      	cmp	r3, #0
   b4e04:	d049      	beq.n	b4e9a <loop+0xa2>
        Serial.printf("Getting price data for yesterday\n");
   b4e06:	f004 fe13 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4e0a:	4990      	ldr	r1, [pc, #576]	; (b504c <loop+0x254>)
            Serial.printf("CALCULATE=: %d\n", CALCULATE);
   b4e0c:	4e90      	ldr	r6, [pc, #576]	; (b5050 <loop+0x258>)
        Serial.printf("Getting price data for yesterday\n");
   b4e0e:	f7ff fa41 	bl	b4294 <_ZN5Print6printfEPKcz>
        get_data(Time.day() - 1);
   b4e12:	f004 f993 	bl	b913c <_ZN9TimeClass3dayEv>
   b4e16:	3801      	subs	r0, #1
   b4e18:	f7ff ff70 	bl	b4cfc <_Z8get_datai>
        while (!CALCULATE)
   b4e1c:	7823      	ldrb	r3, [r4, #0]
   b4e1e:	b953      	cbnz	r3, b4e36 <loop+0x3e>
            delay(500);
   b4e20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4e24:	f004 f9b4 	bl	b9190 <delay>
            Serial.printf("CALCULATE=: %d\n", CALCULATE);
   b4e28:	f004 fe02 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4e2c:	7822      	ldrb	r2, [r4, #0]
   b4e2e:	4631      	mov	r1, r6
   b4e30:	f7ff fa30 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (!CALCULATE)
   b4e34:	e7f2      	b.n	b4e1c <loop+0x24>
        CALCULATE = false;
   b4e36:	2300      	movs	r3, #0
   b4e38:	7023      	strb	r3, [r4, #0]
        rotate_prices();
   b4e3a:	f7ff fee3 	bl	b4c04 <_Z13rotate_pricesv>
        Serial.printf("Getting price data for today\n");
   b4e3e:	f004 fdf7 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4e42:	4984      	ldr	r1, [pc, #528]	; (b5054 <loop+0x25c>)
            Serial.printf("CALCULATE=: %d\n", CALCULATE);
   b4e44:	4e82      	ldr	r6, [pc, #520]	; (b5050 <loop+0x258>)
        Serial.printf("Getting price data for today\n");
   b4e46:	f7ff fa25 	bl	b4294 <_ZN5Print6printfEPKcz>
        get_data(Time.day());
   b4e4a:	f004 f977 	bl	b913c <_ZN9TimeClass3dayEv>
   b4e4e:	f7ff ff55 	bl	b4cfc <_Z8get_datai>
        while (!CALCULATE)
   b4e52:	7823      	ldrb	r3, [r4, #0]
   b4e54:	b953      	cbnz	r3, b4e6c <loop+0x74>
            delay(500);
   b4e56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4e5a:	f004 f999 	bl	b9190 <delay>
            Serial.printf("CALCULATE=: %d\n", CALCULATE);
   b4e5e:	f004 fde7 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4e62:	7822      	ldrb	r2, [r4, #0]
   b4e64:	4631      	mov	r1, r6
   b4e66:	f7ff fa15 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (!CALCULATE)
   b4e6a:	e7f2      	b.n	b4e52 <loop+0x5a>
        rotate_prices();
   b4e6c:	f7ff feca 	bl	b4c04 <_Z13rotate_pricesv>
        if (Time.hour() > PULL_TIME_1)
   b4e70:	f004 f940 	bl	b90f4 <_ZN9TimeClass4hourEv>
   b4e74:	280d      	cmp	r0, #13
   b4e76:	dd4c      	ble.n	b4f12 <loop+0x11a>
            Serial.printf("Getting price data for tomorrow\n");
   b4e78:	f004 fdda 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4e7c:	4976      	ldr	r1, [pc, #472]	; (b5058 <loop+0x260>)
   b4e7e:	f7ff fa09 	bl	b4294 <_ZN5Print6printfEPKcz>
            get_data(Time.day() + 1);
   b4e82:	f004 f95b 	bl	b913c <_ZN9TimeClass3dayEv>
   b4e86:	3001      	adds	r0, #1
   b4e88:	f7ff ff38 	bl	b4cfc <_Z8get_datai>
            AWAITING_DATA = true;
   b4e8c:	4b73      	ldr	r3, [pc, #460]	; (b505c <loop+0x264>)
   b4e8e:	2201      	movs	r2, #1
   b4e90:	701a      	strb	r2, [r3, #0]
            CALCULATE = false;
   b4e92:	2300      	movs	r3, #0
            CALCULATE = true;
   b4e94:	7023      	strb	r3, [r4, #0]
        STARTUP = false;
   b4e96:	2300      	movs	r3, #0
   b4e98:	702b      	strb	r3, [r5, #0]
    if (GET_DATA)
   b4e9a:	4d71      	ldr	r5, [pc, #452]	; (b5060 <loop+0x268>)
    check_mqtt();
   b4e9c:	f7ff fed6 	bl	b4c4c <_Z10check_mqttv>
    if (GET_DATA)
   b4ea0:	782b      	ldrb	r3, [r5, #0]
   b4ea2:	b14b      	cbz	r3, b4eb8 <loop+0xc0>
        AWAITING_DATA = true;
   b4ea4:	4b6d      	ldr	r3, [pc, #436]	; (b505c <loop+0x264>)
   b4ea6:	2201      	movs	r2, #1
   b4ea8:	701a      	strb	r2, [r3, #0]
        get_data(Time.day() + 1);
   b4eaa:	f004 f947 	bl	b913c <_ZN9TimeClass3dayEv>
   b4eae:	3001      	adds	r0, #1
   b4eb0:	f7ff ff24 	bl	b4cfc <_Z8get_datai>
        GET_DATA = false;
   b4eb4:	2300      	movs	r3, #0
   b4eb6:	702b      	strb	r3, [r5, #0]
    if (CALCULATE)
   b4eb8:	7823      	ldrb	r3, [r4, #0]
   b4eba:	4d6a      	ldr	r5, [pc, #424]	; (b5064 <loop+0x26c>)
   b4ebc:	2b00      	cmp	r3, #0
   b4ebe:	d030      	beq.n	b4f22 <loop+0x12a>
        update_JSON();
   b4ec0:	f7ff fc54 	bl	b476c <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, cost_hour, range);
   b4ec4:	4b68      	ldr	r3, [pc, #416]	; (b5068 <loop+0x270>)
   b4ec6:	4969      	ldr	r1, [pc, #420]	; (b506c <loop+0x274>)
   b4ec8:	4a69      	ldr	r2, [pc, #420]	; (b5070 <loop+0x278>)
   b4eca:	6809      	ldr	r1, [r1, #0]
   b4ecc:	681b      	ldr	r3, [r3, #0]
   b4ece:	4869      	ldr	r0, [pc, #420]	; (b5074 <loop+0x27c>)
   b4ed0:	f7ff fb66 	bl	b45a0 <_Z8calc_lowPA2_iPdPii>
   b4ed4:	4b68      	ldr	r3, [pc, #416]	; (b5078 <loop+0x280>)
   b4ed6:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4ed8:	f004 fdaa 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4edc:	4606      	mov	r6, r0
   b4ede:	f004 f909 	bl	b90f4 <_ZN9TimeClass4hourEv>
   b4ee2:	9001      	str	r0, [sp, #4]
   b4ee4:	f004 f912 	bl	b910c <_ZN9TimeClass6minuteEv>
   b4ee8:	9a01      	ldr	r2, [sp, #4]
   b4eea:	4964      	ldr	r1, [pc, #400]	; (b507c <loop+0x284>)
   b4eec:	4603      	mov	r3, r0
   b4eee:	4630      	mov	r0, r6
   b4ef0:	f7ff f9d0 	bl	b4294 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b4ef4:	2301      	movs	r3, #1
   b4ef6:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b4ef8:	2300      	movs	r3, #0
   b4efa:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b4efc:	4b5e      	ldr	r3, [pc, #376]	; (b5078 <loop+0x280>)
   b4efe:	485d      	ldr	r0, [pc, #372]	; (b5074 <loop+0x27c>)
   b4f00:	6819      	ldr	r1, [r3, #0]
   b4f02:	f7ff ff2b 	bl	b4d5c <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b4f06:	4b5e      	ldr	r3, [pc, #376]	; (b5080 <loop+0x288>)
   b4f08:	2201      	movs	r2, #1
   b4f0a:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b4f0c:	2300      	movs	r3, #0
   b4f0e:	702b      	strb	r3, [r5, #0]
   b4f10:	e00a      	b.n	b4f28 <loop+0x130>
            Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b4f12:	f004 fd8d 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4f16:	495b      	ldr	r1, [pc, #364]	; (b5084 <loop+0x28c>)
   b4f18:	220d      	movs	r2, #13
   b4f1a:	f7ff f9bb 	bl	b4294 <_ZN5Print6printfEPKcz>
            CALCULATE = true;
   b4f1e:	2301      	movs	r3, #1
   b4f20:	e7b8      	b.n	b4e94 <loop+0x9c>
    if (TRANSMIT_PRICE)
   b4f22:	782b      	ldrb	r3, [r5, #0]
   b4f24:	2b00      	cmp	r3, #0
   b4f26:	d1e9      	bne.n	b4efc <loop+0x104>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b4f28:	4c57      	ldr	r4, [pc, #348]	; (b5088 <loop+0x290>)
   b4f2a:	7823      	ldrb	r3, [r4, #0]
   b4f2c:	b32b      	cbz	r3, b4f7a <loop+0x182>
        Serial.printf("Received power/get\n");
   b4f2e:	f004 fd7f 	bl	b9a30 <_Z16_fetch_usbserialv>
   b4f32:	4956      	ldr	r1, [pc, #344]	; (b508c <loop+0x294>)
   b4f34:	f7ff f9ae 	bl	b4294 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b4f38:	4b55      	ldr	r3, [pc, #340]	; (b5090 <loop+0x298>)
   b4f3a:	681d      	ldr	r5, [r3, #0]
   b4f3c:	f004 f8da 	bl	b90f4 <_ZN9TimeClass4hourEv>
   b4f40:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
        sprintf(values, "%d", calc_power);
   b4f44:	4953      	ldr	r1, [pc, #332]	; (b5094 <loop+0x29c>)
        wh_today[Time.hour()] += 1;
   b4f46:	3301      	adds	r3, #1
   b4f48:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
        sprintf(values, "%d", calc_power);
   b4f4c:	4d52      	ldr	r5, [pc, #328]	; (b5098 <loop+0x2a0>)
   b4f4e:	a802      	add	r0, sp, #8
   b4f50:	682a      	ldr	r2, [r5, #0]
   b4f52:	f001 ff7b 	bl	b6e4c <sprintf>
        client.publish("power", values);
   b4f56:	4951      	ldr	r1, [pc, #324]	; (b509c <loop+0x2a4>)
   b4f58:	4851      	ldr	r0, [pc, #324]	; (b50a0 <loop+0x2a8>)
   b4f5a:	aa02      	add	r2, sp, #8
   b4f5c:	f000 fd33 	bl	b59c6 <_ZN4MQTT7publishEPKcS1_>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4f60:	682a      	ldr	r2, [r5, #0]
   b4f62:	4950      	ldr	r1, [pc, #320]	; (b50a4 <loop+0x2ac>)
   b4f64:	a806      	add	r0, sp, #24
   b4f66:	f001 ff71 	bl	b6e4c <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4f6a:	2300      	movs	r3, #0
   b4f6c:	484e      	ldr	r0, [pc, #312]	; (b50a8 <loop+0x2b0>)
   b4f6e:	22ff      	movs	r2, #255	; 0xff
   b4f70:	a906      	add	r1, sp, #24
   b4f72:	f002 ffd5 	bl	b7f20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        TRANSMIT_SENSOR = false;
   b4f76:	2300      	movs	r3, #0
   b4f78:	7023      	strb	r3, [r4, #0]
    if (ROTATE)
   b4f7a:	4c4c      	ldr	r4, [pc, #304]	; (b50ac <loop+0x2b4>)
   b4f7c:	7823      	ldrb	r3, [r4, #0]
   b4f7e:	b11b      	cbz	r3, b4f88 <loop+0x190>
        rotate_prices();
   b4f80:	f7ff fe40 	bl	b4c04 <_Z13rotate_pricesv>
        ROTATE = false;
   b4f84:	2300      	movs	r3, #0
   b4f86:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b4f88:	4c49      	ldr	r4, [pc, #292]	; (b50b0 <loop+0x2b8>)
   b4f8a:	7823      	ldrb	r3, [r4, #0]
   b4f8c:	b1ab      	cbz	r3, b4fba <loop+0x1c2>
        sprintf(buffer, "%d", wh_today[Time.hour() - 1]);
   b4f8e:	4b40      	ldr	r3, [pc, #256]	; (b5090 <loop+0x298>)
   b4f90:	681d      	ldr	r5, [r3, #0]
   b4f92:	f004 f8af 	bl	b90f4 <_ZN9TimeClass4hourEv>
   b4f96:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   b4f9a:	3801      	subs	r0, #1
   b4f9c:	493d      	ldr	r1, [pc, #244]	; (b5094 <loop+0x29c>)
   b4f9e:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   b4fa2:	a806      	add	r0, sp, #24
   b4fa4:	f001 ff52 	bl	b6e4c <sprintf>
        client.publish("watthour", buffer);
   b4fa8:	4942      	ldr	r1, [pc, #264]	; (b50b4 <loop+0x2bc>)
   b4faa:	483d      	ldr	r0, [pc, #244]	; (b50a0 <loop+0x2a8>)
   b4fac:	aa06      	add	r2, sp, #24
   b4fae:	f000 fd0a 	bl	b59c6 <_ZN4MQTT7publishEPKcS1_>
        hourly_JSON_update();
   b4fb2:	f7ff fba9 	bl	b4708 <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b4fb6:	2300      	movs	r3, #0
   b4fb8:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 1400))
   b4fba:	4c3f      	ldr	r4, [pc, #252]	; (b50b8 <loop+0x2c0>)
   b4fbc:	7825      	ldrb	r5, [r4, #0]
   b4fbe:	f001 fc1f 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
   b4fc2:	4b3e      	ldr	r3, [pc, #248]	; (b50bc <loop+0x2c4>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	1ac0      	subs	r0, r0, r3
   b4fc8:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   b4fcc:	d932      	bls.n	b5034 <loop+0x23c>
   b4fce:	2d00      	cmp	r5, #0
   b4fd0:	d030      	beq.n	b5034 <loop+0x23c>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4fd2:	4b31      	ldr	r3, [pc, #196]	; (b5098 <loop+0x2a0>)
   b4fd4:	4933      	ldr	r1, [pc, #204]	; (b50a4 <loop+0x2ac>)
   b4fd6:	681a      	ldr	r2, [r3, #0]
   b4fd8:	a806      	add	r0, sp, #24
   b4fda:	f001 ff37 	bl	b6e4c <sprintf>
   b4fde:	2300      	movs	r3, #0
   b4fe0:	22ff      	movs	r2, #255	; 0xff
   b4fe2:	a906      	add	r1, sp, #24
   b4fe4:	4830      	ldr	r0, [pc, #192]	; (b50a8 <loop+0x2b0>)
   b4fe6:	f002 ff9b 	bl	b7f20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json.c_str());
   b4fea:	4b35      	ldr	r3, [pc, #212]	; (b50c0 <loop+0x2c8>)
   b4fec:	4835      	ldr	r0, [pc, #212]	; (b50c4 <loop+0x2cc>)
   b4fee:	6819      	ldr	r1, [r3, #0]
   b4ff0:	2200      	movs	r2, #0
   b4ff2:	f002 fff5 	bl	b7fe0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json.c_str());       // string Kr/kwhr
   b4ff6:	4b34      	ldr	r3, [pc, #208]	; (b50c8 <loop+0x2d0>)
   b4ff8:	4834      	ldr	r0, [pc, #208]	; (b50cc <loop+0x2d4>)
   b4ffa:	6819      	ldr	r1, [r3, #0]
   b4ffc:	2200      	movs	r2, #0
   b4ffe:	f002 ffef 	bl	b7fe0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json.c_str()); // string Kr/kwhr
   b5002:	4b33      	ldr	r3, [pc, #204]	; (b50d0 <loop+0x2d8>)
   b5004:	4833      	ldr	r0, [pc, #204]	; (b50d4 <loop+0x2dc>)
   b5006:	6819      	ldr	r1, [r3, #0]
   b5008:	2200      	movs	r2, #0
   b500a:	f002 ffe9 	bl	b7fe0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json.c_str());  // string Whr
   b500e:	4b32      	ldr	r3, [pc, #200]	; (b50d8 <loop+0x2e0>)
   b5010:	4832      	ldr	r0, [pc, #200]	; (b50dc <loop+0x2e4>)
   b5012:	6819      	ldr	r1, [r3, #0]
   b5014:	2200      	movs	r2, #0
   b5016:	f002 ffe3 	bl	b7fe0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json.c_str());          // Whr used in the corresponding hour
   b501a:	4b31      	ldr	r3, [pc, #196]	; (b50e0 <loop+0x2e8>)
   b501c:	4831      	ldr	r0, [pc, #196]	; (b50e4 <loop+0x2ec>)
   b501e:	6819      	ldr	r1, [r3, #0]
   b5020:	2200      	movs	r2, #0
   b5022:	f002 ffdd 	bl	b7fe0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b5026:	2300      	movs	r3, #0
   b5028:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b502a:	f004 fd01 	bl	b9a30 <_Z16_fetch_usbserialv>
   b502e:	492e      	ldr	r1, [pc, #184]	; (b50e8 <loop+0x2f0>)
   b5030:	f7ff f930 	bl	b4294 <_ZN5Print6printfEPKcz>
    delay(1000);
   b5034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b5038:	b046      	add	sp, #280	; 0x118
   b503a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
   b503e:	f004 b8a7 	b.w	b9190 <delay>
   b5042:	bf00      	nop
   b5044:	2003dac0 	.word	0x2003dac0
   b5048:	2003daa1 	.word	0x2003daa1
   b504c:	000bd6f4 	.word	0x000bd6f4
   b5050:	000bd716 	.word	0x000bd716
   b5054:	000bd726 	.word	0x000bd726
   b5058:	000bd744 	.word	0x000bd744
   b505c:	2003daa0 	.word	0x2003daa0
   b5060:	2003dabc 	.word	0x2003dabc
   b5064:	2003dac1 	.word	0x2003dac1
   b5068:	2003d8b4 	.word	0x2003d8b4
   b506c:	2003dc98 	.word	0x2003dc98
   b5070:	2003dc38 	.word	0x2003dc38
   b5074:	2003db70 	.word	0x2003db70
   b5078:	2003dbd0 	.word	0x2003dbd0
   b507c:	000bd602 	.word	0x000bd602
   b5080:	2003dabf 	.word	0x2003dabf
   b5084:	000bd765 	.word	0x000bd765
   b5088:	2003dac2 	.word	0x2003dac2
   b508c:	000bd796 	.word	0x000bd796
   b5090:	2003e1b8 	.word	0x2003e1b8
   b5094:	000bd5c2 	.word	0x000bd5c2
   b5098:	2003dbd4 	.word	0x2003dbd4
   b509c:	000bd7aa 	.word	0x000bd7aa
   b50a0:	2003dbd8 	.word	0x2003dbd8
   b50a4:	000bd7b0 	.word	0x000bd7b0
   b50a8:	2003dac4 	.word	0x2003dac4
   b50ac:	2003dabe 	.word	0x2003dabe
   b50b0:	2003dac3 	.word	0x2003dac3
   b50b4:	000bd7bc 	.word	0x000bd7bc
   b50b8:	2003dabd 	.word	0x2003dabd
   b50bc:	2003dca8 	.word	0x2003dca8
   b50c0:	2003dccc 	.word	0x2003dccc
   b50c4:	2003dab4 	.word	0x2003dab4
   b50c8:	2003dcac 	.word	0x2003dcac
   b50cc:	2003daa4 	.word	0x2003daa4
   b50d0:	2003dcbc 	.word	0x2003dcbc
   b50d4:	2003daac 	.word	0x2003daac
   b50d8:	2003e1d0 	.word	0x2003e1d0
   b50dc:	2003dad4 	.word	0x2003dad4
   b50e0:	2003e1bc 	.word	0x2003e1bc
   b50e4:	2003dacc 	.word	0x2003dacc
   b50e8:	000bd7c5 	.word	0x000bd7c5

000b50ec <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b50ec:	b082      	sub	sp, #8
   b50ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   b50f0:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b50f2:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b50f4:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b50f6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b50f8:	e9c0 3300 	strd	r3, r3, [r0]
   b50fc:	4606      	mov	r6, r0
   b50fe:	4694      	mov	ip, r2
   b5100:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b5102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5104:	ac04      	add	r4, sp, #16
   b5106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5108:	682b      	ldr	r3, [r5, #0]
   b510a:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b510c:	ad1a      	add	r5, sp, #104	; 0x68
   b510e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5110:	ac09      	add	r4, sp, #36	; 0x24
   b5112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5114:	682b      	ldr	r3, [r5, #0]
   b5116:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5118:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b511a:	9302      	str	r3, [sp, #8]
   b511c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b511e:	9301      	str	r3, [sp, #4]
   b5120:	ab09      	add	r3, sp, #36	; 0x24
   b5122:	9300      	str	r3, [sp, #0]
   b5124:	4630      	mov	r0, r6
   b5126:	ab04      	add	r3, sp, #16
   b5128:	4662      	mov	r2, ip
   b512a:	4639      	mov	r1, r7
   b512c:	f003 fc46 	bl	b89bc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5130:	4630      	mov	r0, r6
   b5132:	b00f      	add	sp, #60	; 0x3c
   b5134:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5138:	b002      	add	sp, #8
   b513a:	4770      	bx	lr

000b513c <_GLOBAL__sub_I_argonName>:
   b513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b5140:	4b8d      	ldr	r3, [pc, #564]	; (b5378 <_GLOBAL__sub_I_argonName+0x23c>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5142:	4d8e      	ldr	r5, [pc, #568]	; (b537c <_GLOBAL__sub_I_argonName+0x240>)
const BleUuid wattcharacteristicUuid(watt_c);
   b5144:	f8df b2d8 	ldr.w	fp, [pc, #728]	; b5420 <_GLOBAL__sub_I_argonName+0x2e4>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b5148:	f8df a2d8 	ldr.w	sl, [pc, #728]	; b5424 <_GLOBAL__sub_I_argonName+0x2e8>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b514c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; b5428 <_GLOBAL__sub_I_argonName+0x2ec>
   b5150:	f04f 0801 	mov.w	r8, #1
   b5154:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5158:	4b89      	ldr	r3, [pc, #548]	; (b5380 <_GLOBAL__sub_I_argonName+0x244>)
   b515a:	b093      	sub	sp, #76	; 0x4c
   b515c:	6819      	ldr	r1, [r3, #0]
   b515e:	4628      	mov	r0, r5
   b5160:	f002 fea0 	bl	b7ea4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b5164:	4b87      	ldr	r3, [pc, #540]	; (b5384 <_GLOBAL__sub_I_argonName+0x248>)
   b5166:	4658      	mov	r0, fp
   b5168:	6819      	ldr	r1, [r3, #0]
   b516a:	f002 fe9b 	bl	b7ea4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b516e:	4b86      	ldr	r3, [pc, #536]	; (b5388 <_GLOBAL__sub_I_argonName+0x24c>)
   b5170:	4650      	mov	r0, sl
   b5172:	6819      	ldr	r1, [r3, #0]
   b5174:	f002 fe96 	bl	b7ea4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b5178:	4b84      	ldr	r3, [pc, #528]	; (b538c <_GLOBAL__sub_I_argonName+0x250>)
   b517a:	4648      	mov	r0, r9
   b517c:	6819      	ldr	r1, [r3, #0]
   b517e:	f002 fe91 	bl	b7ea4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b5182:	4b83      	ldr	r3, [pc, #524]	; (b5390 <_GLOBAL__sub_I_argonName+0x254>)
   b5184:	4883      	ldr	r0, [pc, #524]	; (b5394 <_GLOBAL__sub_I_argonName+0x258>)
   b5186:	6819      	ldr	r1, [r3, #0]
   b5188:	f002 fe8c 	bl	b7ea4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b518c:	4b82      	ldr	r3, [pc, #520]	; (b5398 <_GLOBAL__sub_I_argonName+0x25c>)
   b518e:	4883      	ldr	r0, [pc, #524]	; (b539c <_GLOBAL__sub_I_argonName+0x260>)
   b5190:	6819      	ldr	r1, [r3, #0]
   b5192:	f002 fe87 	bl	b7ea4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b5196:	4b82      	ldr	r3, [pc, #520]	; (b53a0 <_GLOBAL__sub_I_argonName+0x264>)
   b5198:	4882      	ldr	r0, [pc, #520]	; (b53a4 <_GLOBAL__sub_I_argonName+0x268>)
   b519a:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b519c:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b519e:	f002 fe81 	bl	b7ea4 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b51a2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b51a6:	462e      	mov	r6, r5
   b51a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b51aa:	2710      	movs	r7, #16
   b51ac:	eb0d 0c07 	add.w	ip, sp, r7
   b51b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b51b4:	6833      	ldr	r3, [r6, #0]
   b51b6:	f8cc 3000 	str.w	r3, [ip]
   b51ba:	f10b 0304 	add.w	r3, fp, #4
   b51be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b51c0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b51c4:	f8db 3000 	ldr.w	r3, [fp]
   b51c8:	4977      	ldr	r1, [pc, #476]	; (b53a8 <_GLOBAL__sub_I_argonName+0x26c>)
   b51ca:	4878      	ldr	r0, [pc, #480]	; (b53ac <_GLOBAL__sub_I_argonName+0x270>)
   b51cc:	463a      	mov	r2, r7
   b51ce:	f7ff ff8d 	bl	b50ec <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b51d2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b51d6:	46ae      	mov	lr, r5
   b51d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b51dc:	eb0d 0c07 	add.w	ip, sp, r7
   b51e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b51e4:	6833      	ldr	r3, [r6, #0]
   b51e6:	f8cc 3000 	str.w	r3, [ip]
   b51ea:	f10a 0304 	add.w	r3, sl, #4
   b51ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b51f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b51f4:	f8da 3000 	ldr.w	r3, [sl]
   b51f8:	496d      	ldr	r1, [pc, #436]	; (b53b0 <_GLOBAL__sub_I_argonName+0x274>)
   b51fa:	486e      	ldr	r0, [pc, #440]	; (b53b4 <_GLOBAL__sub_I_argonName+0x278>)
   b51fc:	463a      	mov	r2, r7
   b51fe:	f7ff ff75 	bl	b50ec <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b5202:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5206:	46ae      	mov	lr, r5
   b5208:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b520c:	eb0d 0c07 	add.w	ip, sp, r7
   b5210:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5214:	6833      	ldr	r3, [r6, #0]
   b5216:	f8cc 3000 	str.w	r3, [ip]
   b521a:	f109 0304 	add.w	r3, r9, #4
   b521e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5220:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5224:	f8d9 3000 	ldr.w	r3, [r9]
   b5228:	4963      	ldr	r1, [pc, #396]	; (b53b8 <_GLOBAL__sub_I_argonName+0x27c>)
   b522a:	4864      	ldr	r0, [pc, #400]	; (b53bc <_GLOBAL__sub_I_argonName+0x280>)
   b522c:	463a      	mov	r2, r7
   b522e:	f7ff ff5d 	bl	b50ec <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b5232:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5236:	46ae      	mov	lr, r5
   b5238:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b523c:	eb0d 0c07 	add.w	ip, sp, r7
   b5240:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5244:	6833      	ldr	r3, [r6, #0]
   b5246:	f8cc 3000 	str.w	r3, [ip]
   b524a:	4b52      	ldr	r3, [pc, #328]	; (b5394 <_GLOBAL__sub_I_argonName+0x258>)
   b524c:	3304      	adds	r3, #4
   b524e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5250:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5254:	4b4f      	ldr	r3, [pc, #316]	; (b5394 <_GLOBAL__sub_I_argonName+0x258>)
   b5256:	495a      	ldr	r1, [pc, #360]	; (b53c0 <_GLOBAL__sub_I_argonName+0x284>)
   b5258:	681b      	ldr	r3, [r3, #0]
   b525a:	485a      	ldr	r0, [pc, #360]	; (b53c4 <_GLOBAL__sub_I_argonName+0x288>)
   b525c:	463a      	mov	r2, r7
   b525e:	f7ff ff45 	bl	b50ec <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b5262:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5266:	46ae      	mov	lr, r5
   b5268:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b526c:	eb0d 0c07 	add.w	ip, sp, r7
   b5270:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5274:	6833      	ldr	r3, [r6, #0]
   b5276:	f8cc 3000 	str.w	r3, [ip]
   b527a:	4b48      	ldr	r3, [pc, #288]	; (b539c <_GLOBAL__sub_I_argonName+0x260>)
   b527c:	3304      	adds	r3, #4
   b527e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5280:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5284:	4b45      	ldr	r3, [pc, #276]	; (b539c <_GLOBAL__sub_I_argonName+0x260>)
   b5286:	4950      	ldr	r1, [pc, #320]	; (b53c8 <_GLOBAL__sub_I_argonName+0x28c>)
   b5288:	681b      	ldr	r3, [r3, #0]
   b528a:	4850      	ldr	r0, [pc, #320]	; (b53cc <_GLOBAL__sub_I_argonName+0x290>)
   b528c:	463a      	mov	r2, r7
   b528e:	f7ff ff2d 	bl	b50ec <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b5292:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5298:	eb0d 0c07 	add.w	ip, sp, r7
   b529c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b52a0:	4d40      	ldr	r5, [pc, #256]	; (b53a4 <_GLOBAL__sub_I_argonName+0x268>)
   b52a2:	6833      	ldr	r3, [r6, #0]
   b52a4:	f8cc 3000 	str.w	r3, [ip]
   b52a8:	1d2b      	adds	r3, r5, #4
   b52aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52ac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b52b0:	463a      	mov	r2, r7
   b52b2:	682b      	ldr	r3, [r5, #0]
   b52b4:	4946      	ldr	r1, [pc, #280]	; (b53d0 <_GLOBAL__sub_I_argonName+0x294>)
   b52b6:	4847      	ldr	r0, [pc, #284]	; (b53d4 <_GLOBAL__sub_I_argonName+0x298>)
   b52b8:	f7ff ff18 	bl	b50ec <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
uint8_t currentHour = Time.hour();
   b52bc:	f003 ff1a 	bl	b90f4 <_ZN9TimeClass4hourEv>
   b52c0:	4b45      	ldr	r3, [pc, #276]	; (b53d8 <_GLOBAL__sub_I_argonName+0x29c>)
String pricestoday_Json;
   b52c2:	4946      	ldr	r1, [pc, #280]	; (b53dc <_GLOBAL__sub_I_argonName+0x2a0>)
uint8_t currentHour = Time.hour();
   b52c4:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b52c6:	4846      	ldr	r0, [pc, #280]	; (b53e0 <_GLOBAL__sub_I_argonName+0x2a4>)
   b52c8:	f002 fac1 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b52cc:	4943      	ldr	r1, [pc, #268]	; (b53dc <_GLOBAL__sub_I_argonName+0x2a0>)
   b52ce:	4845      	ldr	r0, [pc, #276]	; (b53e4 <_GLOBAL__sub_I_argonName+0x2a8>)
   b52d0:	f002 fabd 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b52d4:	4941      	ldr	r1, [pc, #260]	; (b53dc <_GLOBAL__sub_I_argonName+0x2a0>)
   b52d6:	4844      	ldr	r0, [pc, #272]	; (b53e8 <_GLOBAL__sub_I_argonName+0x2ac>)
   b52d8:	f002 fab9 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b52dc:	493f      	ldr	r1, [pc, #252]	; (b53dc <_GLOBAL__sub_I_argonName+0x2a0>)
   b52de:	4843      	ldr	r0, [pc, #268]	; (b53ec <_GLOBAL__sub_I_argonName+0x2b0>)
   b52e0:	f002 fab5 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b52e4:	493d      	ldr	r1, [pc, #244]	; (b53dc <_GLOBAL__sub_I_argonName+0x2a0>)
   b52e6:	4842      	ldr	r0, [pc, #264]	; (b53f0 <_GLOBAL__sub_I_argonName+0x2b4>)
   b52e8:	f002 fab1 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b52ec:	4b41      	ldr	r3, [pc, #260]	; (b53f4 <_GLOBAL__sub_I_argonName+0x2b8>)
   b52ee:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52f0:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b52f2:	4b41      	ldr	r3, [pc, #260]	; (b53f8 <_GLOBAL__sub_I_argonName+0x2bc>)
   b52f4:	4a41      	ldr	r2, [pc, #260]	; (b53fc <_GLOBAL__sub_I_argonName+0x2c0>)
   b52f6:	601a      	str	r2, [r3, #0]
   b52f8:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b52fc:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5300:	ae0c      	add	r6, sp, #48	; 0x30
   b5302:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5306:	e892 0003 	ldmia.w	r2, {r0, r1}
   b530a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b530e:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5312:	e882 0003 	stmia.w	r2, {r0, r1}
   b5316:	4a3a      	ldr	r2, [pc, #232]	; (b5400 <_GLOBAL__sub_I_argonName+0x2c4>)
   b5318:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b531a:	699a      	ldr	r2, [r3, #24]
   b531c:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b531e:	4a39      	ldr	r2, [pc, #228]	; (b5404 <_GLOBAL__sub_I_argonName+0x2c8>)
   b5320:	711c      	strb	r4, [r3, #4]
   b5322:	609c      	str	r4, [r3, #8]
   b5324:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5326:	f64e 2160 	movw	r1, #60000	; 0xea60
   b532a:	4a37      	ldr	r2, [pc, #220]	; (b5408 <_GLOBAL__sub_I_argonName+0x2cc>)
      __a = _GLIBCXX_MOVE(__b);
   b532c:	9410      	str	r4, [sp, #64]	; 0x40
   b532e:	f103 0008 	add.w	r0, r3, #8
   b5332:	e9cd 8400 	strd	r8, r4, [sp]
   b5336:	f001 fb0d 	bl	b6954 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b533a:	4628      	mov	r0, r5
   b533c:	f7ff f862 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
MQTT client("192.168.110.6", PORT, 512, 30, callback);
   b5340:	4b32      	ldr	r3, [pc, #200]	; (b540c <_GLOBAL__sub_I_argonName+0x2d0>)
   b5342:	9301      	str	r3, [sp, #4]
   b5344:	231e      	movs	r3, #30
   b5346:	f240 725b 	movw	r2, #1883	; 0x75b
   b534a:	9300      	str	r3, [sp, #0]
   b534c:	4930      	ldr	r1, [pc, #192]	; (b5410 <_GLOBAL__sub_I_argonName+0x2d4>)
   b534e:	9402      	str	r4, [sp, #8]
   b5350:	f44f 7300 	mov.w	r3, #512	; 0x200
   b5354:	482f      	ldr	r0, [pc, #188]	; (b5414 <_GLOBAL__sub_I_argonName+0x2d8>)
   b5356:	f000 f8ad 	bl	b54b4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
UDP udp;
   b535a:	492f      	ldr	r1, [pc, #188]	; (b5418 <_GLOBAL__sub_I_argonName+0x2dc>)
   b535c:	4608      	mov	r0, r1
   b535e:	f002 f95f 	bl	b7620 <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b5362:	492d      	ldr	r1, [pc, #180]	; (b5418 <_GLOBAL__sub_I_argonName+0x2dc>)
   b5364:	482d      	ldr	r0, [pc, #180]	; (b541c <_GLOBAL__sub_I_argonName+0x2e0>)
   b5366:	f001 f8a1 	bl	b64ac <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b536a:	4621      	mov	r1, r4
   b536c:	4640      	mov	r0, r8
   b536e:	b013      	add	sp, #76	; 0x4c
   b5370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b5374:	f001 bc8e 	b.w	b6c94 <system_thread_set_state>
   b5378:	2003db68 	.word	0x2003db68
   b537c:	2003daf0 	.word	0x2003daf0
   b5380:	2003d8b8 	.word	0x2003d8b8
   b5384:	2003d8bc 	.word	0x2003d8bc
   b5388:	2003d898 	.word	0x2003d898
   b538c:	2003d890 	.word	0x2003d890
   b5390:	2003d894 	.word	0x2003d894
   b5394:	2003db2c 	.word	0x2003db2c
   b5398:	2003d89c 	.word	0x2003d89c
   b539c:	2003db18 	.word	0x2003db18
   b53a0:	2003d8a0 	.word	0x2003d8a0
   b53a4:	2003db54 	.word	0x2003db54
   b53a8:	000bd7d4 	.word	0x000bd7d4
   b53ac:	2003dac4 	.word	0x2003dac4
   b53b0:	000bd7dd 	.word	0x000bd7dd
   b53b4:	2003dab4 	.word	0x2003dab4
   b53b8:	000bd7eb 	.word	0x000bd7eb
   b53bc:	2003daa4 	.word	0x2003daa4
   b53c0:	000bd7f5 	.word	0x000bd7f5
   b53c4:	2003daac 	.word	0x2003daac
   b53c8:	000bd802 	.word	0x000bd802
   b53cc:	2003dacc 	.word	0x2003dacc
   b53d0:	000bd80c 	.word	0x000bd80c
   b53d4:	2003dad4 	.word	0x2003dad4
   b53d8:	2003dca4 	.word	0x2003dca4
   b53dc:	000bd795 	.word	0x000bd795
   b53e0:	2003dcac 	.word	0x2003dcac
   b53e4:	2003dcbc 	.word	0x2003dcbc
   b53e8:	2003dccc 	.word	0x2003dccc
   b53ec:	2003e1bc 	.word	0x2003e1bc
   b53f0:	2003e1d0 	.word	0x2003e1d0
   b53f4:	000b41d1 	.word	0x000b41d1
   b53f8:	2003e150 	.word	0x2003e150
   b53fc:	000bd830 	.word	0x000bd830
   b5400:	000b4177 	.word	0x000b4177
   b5404:	000b418b 	.word	0x000b418b
   b5408:	000b413d 	.word	0x000b413d
   b540c:	000b40b9 	.word	0x000b40b9
   b5410:	000bd81a 	.word	0x000bd81a
   b5414:	2003dbd8 	.word	0x2003dbd8
   b5418:	2003e16c 	.word	0x2003e16c
   b541c:	2003dcdc 	.word	0x2003dcdc
   b5420:	2003dadc 	.word	0x2003dadc
   b5424:	2003db40 	.word	0x2003db40
   b5428:	2003db04 	.word	0x2003db04

000b542c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b542c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5430:	b510      	push	{r4, lr}
   b5432:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5434:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5436:	b113      	cbz	r3, b543e <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5438:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b543a:	f001 fab3 	bl	b69a4 <os_mutex_lock>
#endif
#endif
#endif
        }
   b543e:	4620      	mov	r0, r4
   b5440:	bd10      	pop	{r4, pc}

000b5442 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5442:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5444:	6803      	ldr	r3, [r0, #0]
   b5446:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b544a:	4604      	mov	r4, r0
            if (mqtt->thread)
   b544c:	b112      	cbz	r2, b5454 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b544e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5450:	f001 fab0 	bl	b69b4 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5454:	4620      	mov	r0, r4
   b5456:	bd10      	pop	{r4, pc}

000b5458 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b545a:	461f      	mov	r7, r3
   b545c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5460:	4604      	mov	r4, r0
   b5462:	460d      	mov	r5, r1
   b5464:	4616      	mov	r6, r2
    if (thread) {
   b5466:	b12b      	cbz	r3, b5474 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5468:	2301      	movs	r3, #1
   b546a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b546e:	3058      	adds	r0, #88	; 0x58
   b5470:	f001 fa90 	bl	b6994 <os_mutex_create>
    }
    this->callback = callback;
   b5474:	9b08      	ldr	r3, [sp, #32]
   b5476:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5478:	2300      	movs	r3, #0
   b547a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b547c:	b106      	cbz	r6, b5480 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b547e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5480:	b125      	cbz	r5, b548c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5482:	4629      	mov	r1, r5
   b5484:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5488:	f002 fa1a 	bl	b78c0 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b548c:	9b06      	ldr	r3, [sp, #24]
   b548e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5490:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5492:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5494:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5498:	2bff      	cmp	r3, #255	; 0xff
   b549a:	bfb8      	it	lt
   b549c:	23ff      	movlt	r3, #255	; 0xff
   b549e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b54a2:	b108      	cbz	r0, b54a8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b54a4:	f7fe fdfb 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b54a8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b54ac:	f7fe fdf5 	bl	b409a <_Znaj>
   b54b0:	61e0      	str	r0, [r4, #28]
}
   b54b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54b4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b54b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b54b8:	4604      	mov	r4, r0
            bool thread) {
   b54ba:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b54bc:	4617      	mov	r7, r2
   b54be:	4698      	mov	r8, r3
   b54c0:	460e      	mov	r6, r1
            bool thread) {
   b54c2:	f004 fe63 	bl	ba18c <_ZN9TCPClientC1Ev>
   b54c6:	490d      	ldr	r1, [pc, #52]	; (b54fc <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b54c8:	61e5      	str	r5, [r4, #28]
   b54ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b54ce:	f002 f9be 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b54d2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b54d6:	9303      	str	r3, [sp, #12]
   b54d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b54da:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b54dc:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b54e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b54e2:	9300      	str	r3, [sp, #0]
   b54e4:	4620      	mov	r0, r4
            bool thread) {
   b54e6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b54ea:	463b      	mov	r3, r7
   b54ec:	462a      	mov	r2, r5
   b54ee:	4631      	mov	r1, r6
   b54f0:	f7ff ffb2 	bl	b5458 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b54f4:	4620      	mov	r0, r4
   b54f6:	b004      	add	sp, #16
   b54f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b54fc:	000bd795 	.word	0x000bd795

000b5500 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5500:	b510      	push	{r4, lr}
   b5502:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5504:	4620      	mov	r0, r4
   b5506:	f004 fd9d 	bl	ba044 <_ZN9TCPClient9availableEv>
   b550a:	2800      	cmp	r0, #0
   b550c:	d0fa      	beq.n	b5504 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b550e:	4620      	mov	r0, r4
   b5510:	f004 fba6 	bl	b9c60 <_ZN9TCPClient4readEv>
}
   b5514:	b2c0      	uxtb	r0, r0
   b5516:	bd10      	pop	{r4, pc}

000b5518 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b551c:	4605      	mov	r5, r0
   b551e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5520:	f7ff ffee 	bl	b5500 <_ZN4MQTT8readByteEv>
   b5524:	69eb      	ldr	r3, [r5, #28]
   b5526:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5528:	69eb      	ldr	r3, [r5, #28]
   b552a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b552e:	f04f 0901 	mov.w	r9, #1
   b5532:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5536:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5538:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b553a:	4628      	mov	r0, r5
   b553c:	f7ff ffe0 	bl	b5500 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5540:	4626      	mov	r6, r4
   b5542:	69eb      	ldr	r3, [r5, #28]
   b5544:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5546:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b554a:	fb13 f309 	smulbb	r3, r3, r9
   b554e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5550:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5552:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5554:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5556:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5558:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b555c:	d4ed      	bmi.n	b553a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b555e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5560:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5564:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5568:	d11e      	bne.n	b55a8 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b556a:	4628      	mov	r0, r5
   b556c:	f7ff ffc8 	bl	b5500 <_ZN4MQTT8readByteEv>
   b5570:	69eb      	ldr	r3, [r5, #28]
   b5572:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5574:	4628      	mov	r0, r5
   b5576:	f7ff ffc3 	bl	b5500 <_ZN4MQTT8readByteEv>
   b557a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b557c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b557e:	b2b6      	uxth	r6, r6
   b5580:	69eb      	ldr	r3, [r5, #28]
   b5582:	b2a4      	uxth	r4, r4
   b5584:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5586:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5588:	b2b6      	uxth	r6, r6
   b558a:	42be      	cmp	r6, r7
   b558c:	d20e      	bcs.n	b55ac <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b558e:	4628      	mov	r0, r5
   b5590:	f7ff ffb6 	bl	b5500 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5594:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5598:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b559a:	bf84      	itt	hi
   b559c:	69eb      	ldrhi	r3, [r5, #28]
   b559e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b55a0:	3401      	adds	r4, #1
   b55a2:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b55a4:	3601      	adds	r6, #1
   b55a6:	e7ef      	b.n	b5588 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b55a8:	2600      	movs	r6, #0
   b55aa:	e7ed      	b.n	b5588 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b55ac:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b55b0:	42a3      	cmp	r3, r4
   b55b2:	bf2c      	ite	cs
   b55b4:	4620      	movcs	r0, r4
   b55b6:	2000      	movcc	r0, #0
   b55b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b55bc <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b55bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b55c0:	4615      	mov	r5, r2
   b55c2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b55c4:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b55c6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b55c8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b55ca:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b55cc:	a802      	add	r0, sp, #8
        digit = len % 128;
   b55ce:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b55d2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b55d6:	f103 0401 	add.w	r4, r3, #1
   b55da:	4403      	add	r3, r0
            digit |= 0x80;
   b55dc:	bf88      	it	hi
   b55de:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b55e2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b55e6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b55ea:	b2e4      	uxtb	r4, r4
   b55ec:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b55f0:	d81e      	bhi.n	b5630 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b55f2:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b55f6:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b55fa:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b55fc:	4622      	mov	r2, r4
   b55fe:	a901      	add	r1, sp, #4
   b5600:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5602:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5606:	f005 fda0 	bl	bb14a <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b560a:	1c72      	adds	r2, r6, #1
   b560c:	4422      	add	r2, r4
   b560e:	4641      	mov	r1, r8
   b5610:	4638      	mov	r0, r7
   b5612:	f004 fb10 	bl	b9c36 <_ZN9TCPClient5writeEPKhj>
   b5616:	4605      	mov	r5, r0
   b5618:	f001 f8f2 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b561c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b561e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5620:	4432      	add	r2, r6
   b5622:	b2a8      	uxth	r0, r5
}
   b5624:	1a13      	subs	r3, r2, r0
   b5626:	4258      	negs	r0, r3
   b5628:	4158      	adcs	r0, r3
   b562a:	b002      	add	sp, #8
   b562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5630:	4623      	mov	r3, r4
   b5632:	e7ca      	b.n	b55ca <_ZN4MQTT5writeEhPht+0xe>

000b5634 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b5634:	b513      	push	{r0, r1, r4, lr}
   b5636:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b5638:	4601      	mov	r1, r0
   b563a:	a801      	add	r0, sp, #4
   b563c:	f7ff fef6 	bl	b542c <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b5640:	69e3      	ldr	r3, [r4, #28]
   b5642:	22e0      	movs	r2, #224	; 0xe0
   b5644:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b5646:	69e3      	ldr	r3, [r4, #28]
   b5648:	2200      	movs	r2, #0
   b564a:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b564c:	69e1      	ldr	r1, [r4, #28]
   b564e:	2202      	movs	r2, #2
   b5650:	4620      	mov	r0, r4
   b5652:	f004 faf0 	bl	b9c36 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b5656:	4620      	mov	r0, r4
   b5658:	f004 fd4e 	bl	ba0f8 <_ZN9TCPClient4stopEv>
   b565c:	f001 f8d0 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b5660:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b5664:	a801      	add	r0, sp, #4
   b5666:	f7ff feec 	bl	b5442 <_ZN4MQTT11MutexLockerD1Ev>
}
   b566a:	b002      	add	sp, #8
   b566c:	bd10      	pop	{r4, pc}

000b566e <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b566e:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5670:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5672:	4605      	mov	r5, r0
    pos += 2;
   b5674:	b298      	uxth	r0, r3
   b5676:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5678:	5cce      	ldrb	r6, [r1, r3]
   b567a:	b29c      	uxth	r4, r3
   b567c:	b156      	cbz	r6, b5694 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b567e:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b5682:	4584      	cmp	ip, r0
   b5684:	f103 0701 	add.w	r7, r3, #1
   b5688:	d904      	bls.n	b5694 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b568a:	1c44      	adds	r4, r0, #1
   b568c:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b568e:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b5690:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b5692:	e7f1      	b.n	b5678 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b5694:	b299      	uxth	r1, r3
   b5696:	1a41      	subs	r1, r0, r1
   b5698:	440a      	add	r2, r1
   b569a:	0a21      	lsrs	r1, r4, #8
   b569c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b56a0:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b56a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b56a6 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b56a6:	b538      	push	{r3, r4, r5, lr}
   b56a8:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b56aa:	f004 fbed 	bl	b9e88 <_ZN9TCPClient9connectedEv>
   b56ae:	2800      	cmp	r0, #0
   b56b0:	bf14      	ite	ne
   b56b2:	2501      	movne	r5, #1
   b56b4:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b56b6:	d102      	bne.n	b56be <_ZN4MQTT11isConnectedEv+0x18>
   b56b8:	4620      	mov	r0, r4
   b56ba:	f004 fd1d 	bl	ba0f8 <_ZN9TCPClient4stopEv>
    return rc;
}
   b56be:	4628      	mov	r0, r5
   b56c0:	bd38      	pop	{r3, r4, r5, pc}

000b56c2 <_ZN4MQTT9setBrokerEPKct>:
void MQTT::setBroker(const char* domain, uint16_t port) {
   b56c2:	b570      	push	{r4, r5, r6, lr}
   b56c4:	4604      	mov	r4, r0
   b56c6:	460e      	mov	r6, r1
   b56c8:	4615      	mov	r5, r2
    if(isConnected()) {
   b56ca:	f7ff ffec 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b56ce:	b110      	cbz	r0, b56d6 <_ZN4MQTT9setBrokerEPKct+0x14>
        disconnect();
   b56d0:	4620      	mov	r0, r4
   b56d2:	f7ff ffaf 	bl	b5634 <_ZN4MQTT10disconnectEv>
    this->domain = domain;
   b56d6:	4631      	mov	r1, r6
   b56d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b56dc:	f002 f8f0 	bl	b78c0 <_ZN6StringaSEPKc>
    this->ip = NULL;
   b56e0:	2300      	movs	r3, #0
   b56e2:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   b56e4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
}
   b56e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b56ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b56ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b56f0:	b088      	sub	sp, #32
   b56f2:	4604      	mov	r4, r0
   b56f4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b56f8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b56fc:	4689      	mov	r9, r1
   b56fe:	4617      	mov	r7, r2
   b5700:	461e      	mov	r6, r3
    if (!isConnected()) {
   b5702:	f7ff ffd0 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b5706:	4605      	mov	r5, r0
   b5708:	2800      	cmp	r0, #0
   b570a:	f040 80cd 	bne.w	b58a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b570e:	4621      	mov	r1, r4
   b5710:	a801      	add	r0, sp, #4
   b5712:	f7ff fe8b 	bl	b542c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b5716:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5718:	2900      	cmp	r1, #0
   b571a:	f040 8088 	bne.w	b582e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b571e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5722:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5724:	462b      	mov	r3, r5
   b5726:	4620      	mov	r0, r4
   b5728:	f004 fb30 	bl	b9d8c <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b572c:	2800      	cmp	r0, #0
   b572e:	d07a      	beq.n	b5826 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5730:	2301      	movs	r3, #1
   b5732:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5734:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5738:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b573a:	2b04      	cmp	r3, #4
   b573c:	4b5b      	ldr	r3, [pc, #364]	; (b58ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b573e:	f040 8081 	bne.w	b5844 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b5742:	6818      	ldr	r0, [r3, #0]
   b5744:	8899      	ldrh	r1, [r3, #4]
   b5746:	799b      	ldrb	r3, [r3, #6]
   b5748:	f8ad 100c 	strh.w	r1, [sp, #12]
   b574c:	f88d 300e 	strb.w	r3, [sp, #14]
   b5750:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5752:	f8c2 0005 	str.w	r0, [r2, #5]
   b5756:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b575a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b575e:	f8a2 1009 	strh.w	r1, [r2, #9]
   b5762:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5764:	230c      	movs	r3, #12
            if (willTopic) {
   b5766:	f1b8 0f00 	cmp.w	r8, #0
   b576a:	f000 8081 	beq.w	b5870 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b576e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b5772:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b5776:	0140      	lsls	r0, r0, #5
   b5778:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b577c:	f040 0006 	orr.w	r0, r0, #6
   b5780:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b5782:	f1ba 0f00 	cmp.w	sl, #0
   b5786:	d101      	bne.n	b578c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5788:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b578c:	b11f      	cbz	r7, b5796 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b578e:	2e00      	cmp	r6, #0
   b5790:	d170      	bne.n	b5874 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b5792:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b5796:	69e2      	ldr	r2, [r4, #28]
   b5798:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b579a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b579c:	69e1      	ldr	r1, [r4, #28]
   b579e:	1c58      	adds	r0, r3, #1
   b57a0:	1212      	asrs	r2, r2, #8
   b57a2:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b57a4:	1c9a      	adds	r2, r3, #2
   b57a6:	69e1      	ldr	r1, [r4, #28]
   b57a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b57aa:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b57ac:	3303      	adds	r3, #3
   b57ae:	69e2      	ldr	r2, [r4, #28]
   b57b0:	4649      	mov	r1, r9
   b57b2:	4620      	mov	r0, r4
   b57b4:	f7ff ff5b 	bl	b566e <_ZN4MQTT11writeStringEPKcPht>
   b57b8:	4603      	mov	r3, r0
            if (willTopic) {
   b57ba:	f1b8 0f00 	cmp.w	r8, #0
   b57be:	d00b      	beq.n	b57d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b57c0:	69e2      	ldr	r2, [r4, #28]
   b57c2:	4641      	mov	r1, r8
   b57c4:	4620      	mov	r0, r4
   b57c6:	f7ff ff52 	bl	b566e <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b57ca:	69e2      	ldr	r2, [r4, #28]
   b57cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b57ce:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b57d0:	4620      	mov	r0, r4
   b57d2:	f7ff ff4c 	bl	b566e <_ZN4MQTT11writeStringEPKcPht>
   b57d6:	4603      	mov	r3, r0
            if(user != NULL) {
   b57d8:	b167      	cbz	r7, b57f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b57da:	69e2      	ldr	r2, [r4, #28]
   b57dc:	4639      	mov	r1, r7
   b57de:	4620      	mov	r0, r4
   b57e0:	f7ff ff45 	bl	b566e <_ZN4MQTT11writeStringEPKcPht>
   b57e4:	4603      	mov	r3, r0
                if(pass != NULL) {
   b57e6:	b12e      	cbz	r6, b57f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b57e8:	69e2      	ldr	r2, [r4, #28]
   b57ea:	4631      	mov	r1, r6
   b57ec:	4620      	mov	r0, r4
   b57ee:	f7ff ff3e 	bl	b566e <_ZN4MQTT11writeStringEPKcPht>
   b57f2:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b57f4:	3b05      	subs	r3, #5
   b57f6:	69e2      	ldr	r2, [r4, #28]
   b57f8:	b29b      	uxth	r3, r3
   b57fa:	2110      	movs	r1, #16
   b57fc:	4620      	mov	r0, r4
   b57fe:	f7ff fedd 	bl	b55bc <_ZN4MQTT5writeEhPht>
   b5802:	f000 fffd 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5806:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b580a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b580e:	4620      	mov	r0, r4
   b5810:	f004 fc18 	bl	ba044 <_ZN9TCPClient9availableEv>
   b5814:	bb88      	cbnz	r0, b587a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5816:	f000 fff3 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b581a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b581c:	1ac0      	subs	r0, r0, r3
   b581e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5820:	4373      	muls	r3, r6
   b5822:	4298      	cmp	r0, r3
   b5824:	d9f3      	bls.n	b580e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5826:	4620      	mov	r0, r4
   b5828:	f004 fc66 	bl	ba0f8 <_ZN9TCPClient4stopEv>
   b582c:	e035      	b.n	b589a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b582e:	a802      	add	r0, sp, #8
   b5830:	f004 f894 	bl	b995c <_ZN9IPAddressC1EPKh>
   b5834:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5838:	462b      	mov	r3, r5
   b583a:	a902      	add	r1, sp, #8
   b583c:	4620      	mov	r0, r4
   b583e:	f004 fb85 	bl	b9f4c <_ZN9TCPClient7connectE9IPAddresstm>
    virtual ~IPAddress() {}
   b5842:	e773      	b.n	b572c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5844:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5848:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b584c:	7bdb      	ldrb	r3, [r3, #15]
   b584e:	f10d 0c08 	add.w	ip, sp, #8
   b5852:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5856:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b585a:	ab02      	add	r3, sp, #8
   b585c:	cb03      	ldmia	r3!, {r0, r1}
   b585e:	f8c2 0005 	str.w	r0, [r2, #5]
   b5862:	f8c2 1009 	str.w	r1, [r2, #9]
   b5866:	f89c 3000 	ldrb.w	r3, [ip]
   b586a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b586c:	230e      	movs	r3, #14
   b586e:	e77a      	b.n	b5766 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5870:	2002      	movs	r0, #2
   b5872:	e786      	b.n	b5782 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5874:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5878:	e78d      	b.n	b5796 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b587a:	a902      	add	r1, sp, #8
   b587c:	4620      	mov	r0, r4
   b587e:	f7ff fe4b 	bl	b5518 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b5882:	2804      	cmp	r0, #4
   b5884:	d1cf      	bne.n	b5826 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b5886:	69e3      	ldr	r3, [r4, #28]
   b5888:	78de      	ldrb	r6, [r3, #3]
   b588a:	2e00      	cmp	r6, #0
   b588c:	d1cb      	bne.n	b5826 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b588e:	f000 ffb7 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b5892:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b5894:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b5896:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b589a:	a801      	add	r0, sp, #4
   b589c:	f7ff fdd1 	bl	b5442 <_ZN4MQTT11MutexLockerD1Ev>
}
   b58a0:	4628      	mov	r0, r5
   b58a2:	b008      	add	sp, #32
   b58a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b58a8:	2500      	movs	r5, #0
   b58aa:	e7f9      	b.n	b58a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b58ac:	000bd947 	.word	0x000bd947

000b58b0 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b58b0:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b58b2:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b58b6:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b58b8:	2401      	movs	r4, #1
   b58ba:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b58be:	2400      	movs	r4, #0
   b58c0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b58c4:	e9cd 4400 	strd	r4, r4, [sp]
   b58c8:	f7ff ff10 	bl	b56ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b58cc:	b006      	add	sp, #24
   b58ce:	bd10      	pop	{r4, pc}

000b58d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b58d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58d4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b58d8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b58dc:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b58e0:	4604      	mov	r4, r0
   b58e2:	468b      	mov	fp, r1
   b58e4:	4616      	mov	r6, r2
   b58e6:	461f      	mov	r7, r3
    if (isConnected()) {
   b58e8:	f7ff fedd 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b58ec:	4682      	mov	sl, r0
   b58ee:	2800      	cmp	r0, #0
   b58f0:	d051      	beq.n	b5996 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b58f2:	4621      	mov	r1, r4
   b58f4:	a801      	add	r0, sp, #4
   b58f6:	f7ff fd99 	bl	b542c <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b58fa:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b58fe:	69e0      	ldr	r0, [r4, #28]
   b5900:	2100      	movs	r1, #0
   b5902:	f005 fc4a 	bl	bb19a <memset>
        length = writeString(topic, buffer, length);
   b5906:	2305      	movs	r3, #5
   b5908:	69e2      	ldr	r2, [r4, #28]
   b590a:	4659      	mov	r1, fp
   b590c:	4620      	mov	r0, r4
   b590e:	f7ff feae 	bl	b566e <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b5912:	1e6b      	subs	r3, r5, #1
   b5914:	2b01      	cmp	r3, #1
   b5916:	d815      	bhi.n	b5944 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5918:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b591a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b591c:	3101      	adds	r1, #1
   b591e:	b289      	uxth	r1, r1
   b5920:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5922:	0a09      	lsrs	r1, r1, #8
   b5924:	5419      	strb	r1, [r3, r0]
   b5926:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5928:	69e3      	ldr	r3, [r4, #28]
   b592a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b592c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b592e:	3002      	adds	r0, #2
   b5930:	5499      	strb	r1, [r3, r2]
   b5932:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5934:	f1b8 0f00 	cmp.w	r8, #0
   b5938:	d004      	beq.n	b5944 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b593a:	8c23      	ldrh	r3, [r4, #32]
   b593c:	1c5a      	adds	r2, r3, #1
   b593e:	8422      	strh	r2, [r4, #32]
   b5940:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5944:	2100      	movs	r1, #0
   b5946:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5948:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b594a:	69e2      	ldr	r2, [r4, #28]
   b594c:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b594e:	d90a      	bls.n	b5966 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5950:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5954:	459c      	cmp	ip, r3
   b5956:	d906      	bls.n	b5966 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5958:	f816 c001 	ldrb.w	ip, [r6, r1]
   b595c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5960:	3101      	adds	r1, #1
   b5962:	b289      	uxth	r1, r1
   b5964:	e7ef      	b.n	b5946 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b5966:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b596a:	2900      	cmp	r1, #0
   b596c:	bf0c      	ite	eq
   b596e:	2130      	moveq	r1, #48	; 0x30
   b5970:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b5972:	f1b9 0f00 	cmp.w	r9, #0
   b5976:	d001      	beq.n	b597c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5978:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b597c:	2d02      	cmp	r5, #2
   b597e:	d10e      	bne.n	b599e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b5980:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b5984:	3b05      	subs	r3, #5
   b5986:	b29b      	uxth	r3, r3
   b5988:	4620      	mov	r0, r4
   b598a:	f7ff fe17 	bl	b55bc <_ZN4MQTT5writeEhPht>
   b598e:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b5990:	a801      	add	r0, sp, #4
   b5992:	f7ff fd56 	bl	b5442 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5996:	4650      	mov	r0, sl
   b5998:	b003      	add	sp, #12
   b599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b599e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b59a0:	bf08      	it	eq
   b59a2:	f041 0102 	orreq.w	r1, r1, #2
   b59a6:	e7ed      	b.n	b5984 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b59a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b59a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b59aa:	9c08      	ldr	r4, [sp, #32]
   b59ac:	9403      	str	r4, [sp, #12]
   b59ae:	2400      	movs	r4, #0
   b59b0:	9402      	str	r4, [sp, #8]
   b59b2:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b59b6:	9401      	str	r4, [sp, #4]
   b59b8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b59bc:	9400      	str	r4, [sp, #0]
   b59be:	f7ff ff87 	bl	b58d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b59c2:	b004      	add	sp, #16
   b59c4:	bd10      	pop	{r4, pc}

000b59c6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b59c6:	b530      	push	{r4, r5, lr}
   b59c8:	b087      	sub	sp, #28
   b59ca:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b59cc:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b59ce:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b59d0:	9204      	str	r2, [sp, #16]
   b59d2:	f005 fc58 	bl	bb286 <strlen>
   b59d6:	2500      	movs	r5, #0
   b59d8:	4603      	mov	r3, r0
   b59da:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b59de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b59e2:	9500      	str	r5, [sp, #0]
   b59e4:	4620      	mov	r0, r4
   b59e6:	f7ff ffdf 	bl	b59a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b59ea:	b007      	add	sp, #28
   b59ec:	bd30      	pop	{r4, r5, pc}

000b59ee <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b59ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b59f0:	4604      	mov	r4, r0
   b59f2:	460e      	mov	r6, r1
    if (isConnected()) {
   b59f4:	f7ff fe57 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b59f8:	4605      	mov	r5, r0
   b59fa:	b1c8      	cbz	r0, b5a30 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b59fc:	4621      	mov	r1, r4
   b59fe:	a801      	add	r0, sp, #4
   b5a00:	f7ff fd14 	bl	b542c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5a04:	69e3      	ldr	r3, [r4, #28]
   b5a06:	2262      	movs	r2, #98	; 0x62
   b5a08:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a0a:	69e3      	ldr	r3, [r4, #28]
   b5a0c:	2202      	movs	r2, #2
   b5a0e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a10:	69e3      	ldr	r3, [r4, #28]
   b5a12:	0a32      	lsrs	r2, r6, #8
   b5a14:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a16:	69e3      	ldr	r3, [r4, #28]
   b5a18:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a1a:	69e1      	ldr	r1, [r4, #28]
   b5a1c:	2204      	movs	r2, #4
   b5a1e:	4620      	mov	r0, r4
   b5a20:	f004 f909 	bl	b9c36 <_ZN9TCPClient5writeEPKhj>
   b5a24:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a26:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a28:	bf18      	it	ne
   b5a2a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a2c:	f7ff fd09 	bl	b5442 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a30:	4628      	mov	r0, r5
   b5a32:	b002      	add	sp, #8
   b5a34:	bd70      	pop	{r4, r5, r6, pc}

000b5a36 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a38:	4604      	mov	r4, r0
   b5a3a:	460e      	mov	r6, r1
    if (isConnected()) {
   b5a3c:	f7ff fe33 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b5a40:	4605      	mov	r5, r0
   b5a42:	b1c8      	cbz	r0, b5a78 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5a44:	4621      	mov	r1, r4
   b5a46:	a801      	add	r0, sp, #4
   b5a48:	f7ff fcf0 	bl	b542c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5a4c:	69e3      	ldr	r3, [r4, #28]
   b5a4e:	2272      	movs	r2, #114	; 0x72
   b5a50:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a52:	69e3      	ldr	r3, [r4, #28]
   b5a54:	2202      	movs	r2, #2
   b5a56:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a58:	69e3      	ldr	r3, [r4, #28]
   b5a5a:	0a32      	lsrs	r2, r6, #8
   b5a5c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a5e:	69e3      	ldr	r3, [r4, #28]
   b5a60:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a62:	69e1      	ldr	r1, [r4, #28]
   b5a64:	2204      	movs	r2, #4
   b5a66:	4620      	mov	r0, r4
   b5a68:	f004 f8e5 	bl	b9c36 <_ZN9TCPClient5writeEPKhj>
   b5a6c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a6e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a70:	bf18      	it	ne
   b5a72:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a74:	f7ff fce5 	bl	b5442 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a78:	4628      	mov	r0, r5
   b5a7a:	b002      	add	sp, #8
   b5a7c:	bd70      	pop	{r4, r5, r6, pc}

000b5a7e <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5a7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a82:	ed2d 8b02 	vpush	{d8}
   b5a86:	b087      	sub	sp, #28
   b5a88:	af00      	add	r7, sp, #0
   b5a8a:	4604      	mov	r4, r0
    if (isConnected()) {
   b5a8c:	f7ff fe0b 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b5a90:	4681      	mov	r9, r0
   b5a92:	b1f8      	cbz	r0, b5ad4 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5a94:	4621      	mov	r1, r4
   b5a96:	f107 0014 	add.w	r0, r7, #20
   b5a9a:	f7ff fcc7 	bl	b542c <_ZN4MQTT11MutexLockerC1EPS_>
   b5a9e:	f000 feaf 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5aa2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5aa8:	4353      	muls	r3, r2
   b5aaa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5aac:	1a82      	subs	r2, r0, r2
   b5aae:	429a      	cmp	r2, r3
   b5ab0:	4606      	mov	r6, r0
   b5ab2:	d803      	bhi.n	b5abc <_ZN4MQTT4loopEv+0x3e>
   b5ab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5ab6:	1a82      	subs	r2, r0, r2
   b5ab8:	4293      	cmp	r3, r2
   b5aba:	d221      	bcs.n	b5b00 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5abc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5ac0:	b17b      	cbz	r3, b5ae2 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5ac2:	4620      	mov	r0, r4
   b5ac4:	f004 fb18 	bl	ba0f8 <_ZN9TCPClient4stopEv>
                return false;
   b5ac8:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5acc:	f107 0014 	add.w	r0, r7, #20
   b5ad0:	f7ff fcb7 	bl	b5442 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5ad4:	4648      	mov	r0, r9
   b5ad6:	371c      	adds	r7, #28
   b5ad8:	46bd      	mov	sp, r7
   b5ada:	ecbd 8b02 	vpop	{d8}
   b5ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5ae2:	69e2      	ldr	r2, [r4, #28]
   b5ae4:	21c0      	movs	r1, #192	; 0xc0
   b5ae6:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5ae8:	69e2      	ldr	r2, [r4, #28]
   b5aea:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5aec:	69e1      	ldr	r1, [r4, #28]
   b5aee:	2202      	movs	r2, #2
   b5af0:	4620      	mov	r0, r4
   b5af2:	f004 f8a0 	bl	b9c36 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5af6:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5afa:	2301      	movs	r3, #1
   b5afc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5b00:	4620      	mov	r0, r4
   b5b02:	f004 fa9f 	bl	ba044 <_ZN9TCPClient9availableEv>
   b5b06:	2800      	cmp	r0, #0
   b5b08:	d0e0      	beq.n	b5acc <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5b0a:	f107 0113 	add.w	r1, r7, #19
   b5b0e:	4620      	mov	r0, r4
   b5b10:	f7ff fd02 	bl	b5518 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5b14:	4683      	mov	fp, r0
   b5b16:	2800      	cmp	r0, #0
   b5b18:	d0d8      	beq.n	b5acc <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5b1a:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5b1c:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5b1e:	7819      	ldrb	r1, [r3, #0]
   b5b20:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5b24:	2a30      	cmp	r2, #48	; 0x30
   b5b26:	d17f      	bne.n	b5c28 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5b28:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5b2c:	f1ba 0f00 	cmp.w	sl, #0
   b5b30:	d0cc      	beq.n	b5acc <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b32:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5b36:	466a      	mov	r2, sp
   b5b38:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b3c:	eb03 020c 	add.w	r2, r3, ip
   b5b40:	7851      	ldrb	r1, [r2, #1]
   b5b42:	7895      	ldrb	r5, [r2, #2]
   b5b44:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5b48:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5b4a:	f105 0208 	add.w	r2, r5, #8
   b5b4e:	4669      	mov	r1, sp
   b5b50:	08d2      	lsrs	r2, r2, #3
   b5b52:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5b56:	4695      	mov	sp, r2
   b5b58:	f10c 0203 	add.w	r2, ip, #3
   b5b5c:	60fa      	str	r2, [r7, #12]
   b5b5e:	eb03 0e02 	add.w	lr, r3, r2
   b5b62:	eb0d 0205 	add.w	r2, sp, r5
   b5b66:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5b68:	f8c7 d008 	str.w	sp, [r7, #8]
   b5b6c:	607a      	str	r2, [r7, #4]
   b5b6e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5b72:	428a      	cmp	r2, r1
   b5b74:	d006      	beq.n	b5b84 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5b76:	460a      	mov	r2, r1
   b5b78:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5b7c:	f802 8b01 	strb.w	r8, [r2], #1
   b5b80:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5b82:	e7f4      	b.n	b5b6e <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5b84:	2200      	movs	r2, #0
   b5b86:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b88:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b8c:	68f9      	ldr	r1, [r7, #12]
   b5b8e:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5b92:	ebab 020c 	sub.w	r2, fp, ip
   b5b96:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b98:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5b9c:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5ba0:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5ba2:	d125      	bne.n	b5bf0 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5ba4:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5ba8:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5baa:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bac:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5bb0:	f10c 0105 	add.w	r1, ip, #5
   b5bb4:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5bb6:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bb8:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5bbc:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5bbe:	69e3      	ldr	r3, [r4, #28]
   b5bc0:	2240      	movs	r2, #64	; 0x40
   b5bc2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5bc4:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bc6:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5bca:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5bce:	69e3      	ldr	r3, [r4, #28]
   b5bd0:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5bd4:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5bd6:	69e3      	ldr	r3, [r4, #28]
   b5bd8:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5bdc:	69e1      	ldr	r1, [r4, #28]
   b5bde:	2204      	movs	r2, #4
   b5be0:	4620      	mov	r0, r4
   b5be2:	f004 f828 	bl	b9c36 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5be6:	6266      	str	r6, [r4, #36]	; 0x24
   b5be8:	ee18 3a10 	vmov	r3, s16
   b5bec:	469d      	mov	sp, r3
   b5bee:	e76d      	b.n	b5acc <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5bf0:	f1b8 0f04 	cmp.w	r8, #4
   b5bf4:	d115      	bne.n	b5c22 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bf6:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5bfa:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5bfc:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bfe:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5c02:	f10c 0105 	add.w	r1, ip, #5
   b5c06:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c08:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c0a:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c0e:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5c10:	69e3      	ldr	r3, [r4, #28]
   b5c12:	2250      	movs	r2, #80	; 0x50
   b5c14:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5c16:	69e3      	ldr	r3, [r4, #28]
   b5c18:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c1a:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5c1e:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5c20:	e7d5      	b.n	b5bce <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5c22:	4419      	add	r1, r3
   b5c24:	47d0      	blx	sl
   b5c26:	e7df      	b.n	b5be8 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5c28:	2a50      	cmp	r2, #80	; 0x50
   b5c2a:	d108      	bne.n	b5c3e <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5c2c:	789a      	ldrb	r2, [r3, #2]
   b5c2e:	78d9      	ldrb	r1, [r3, #3]
   b5c30:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5c34:	b289      	uxth	r1, r1
   b5c36:	4620      	mov	r0, r4
   b5c38:	f7ff fed9 	bl	b59ee <_ZN4MQTT14publishReleaseEt>
   b5c3c:	e746      	b.n	b5acc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5c3e:	2a40      	cmp	r2, #64	; 0x40
   b5c40:	d112      	bne.n	b5c68 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5c42:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5c44:	2a00      	cmp	r2, #0
   b5c46:	f43f af41 	beq.w	b5acc <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5c4a:	f1bb 0f04 	cmp.w	fp, #4
   b5c4e:	f47f af3d 	bne.w	b5acc <_ZN4MQTT4loopEv+0x4e>
   b5c52:	f011 0f06 	tst.w	r1, #6
   b5c56:	f47f af39 	bne.w	b5acc <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5c5a:	7899      	ldrb	r1, [r3, #2]
   b5c5c:	78d8      	ldrb	r0, [r3, #3]
   b5c5e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5c62:	b280      	uxth	r0, r0
   b5c64:	4790      	blx	r2
   b5c66:	e731      	b.n	b5acc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5c68:	2a60      	cmp	r2, #96	; 0x60
   b5c6a:	d108      	bne.n	b5c7e <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5c6c:	789a      	ldrb	r2, [r3, #2]
   b5c6e:	78d9      	ldrb	r1, [r3, #3]
   b5c70:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5c74:	b289      	uxth	r1, r1
   b5c76:	4620      	mov	r0, r4
   b5c78:	f7ff fedd 	bl	b5a36 <_ZN4MQTT15publishCompleteEt>
   b5c7c:	e726      	b.n	b5acc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5c7e:	2a70      	cmp	r2, #112	; 0x70
   b5c80:	d0df      	beq.n	b5c42 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5c82:	2a90      	cmp	r2, #144	; 0x90
   b5c84:	f43f af22 	beq.w	b5acc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5c88:	2ac0      	cmp	r2, #192	; 0xc0
   b5c8a:	d10a      	bne.n	b5ca2 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5c8c:	22d0      	movs	r2, #208	; 0xd0
   b5c8e:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5c90:	69e3      	ldr	r3, [r4, #28]
   b5c92:	2200      	movs	r2, #0
   b5c94:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5c96:	69e1      	ldr	r1, [r4, #28]
   b5c98:	2202      	movs	r2, #2
   b5c9a:	4620      	mov	r0, r4
   b5c9c:	f003 ffcb 	bl	b9c36 <_ZN9TCPClient5writeEPKhj>
   b5ca0:	e714      	b.n	b5acc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5ca2:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5ca4:	bf04      	itt	eq
   b5ca6:	2300      	moveq	r3, #0
   b5ca8:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5cac:	e70e      	b.n	b5acc <_ZN4MQTT4loopEv+0x4e>

000b5cae <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5cb0:	4604      	mov	r4, r0
   b5cb2:	460f      	mov	r7, r1
   b5cb4:	4616      	mov	r6, r2
    if (isConnected()) {
   b5cb6:	f7ff fcf6 	bl	b56a6 <_ZN4MQTT11isConnectedEv>
   b5cba:	4605      	mov	r5, r0
   b5cbc:	b310      	cbz	r0, b5d04 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5cbe:	4621      	mov	r1, r4
   b5cc0:	a801      	add	r0, sp, #4
   b5cc2:	f7ff fbb3 	bl	b542c <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5cc6:	8c23      	ldrh	r3, [r4, #32]
   b5cc8:	3301      	adds	r3, #1
   b5cca:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5ccc:	b1eb      	cbz	r3, b5d0a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5cce:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5cd0:	8c23      	ldrh	r3, [r4, #32]
   b5cd2:	69e2      	ldr	r2, [r4, #28]
   b5cd4:	0a1b      	lsrs	r3, r3, #8
   b5cd6:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5cd8:	69e3      	ldr	r3, [r4, #28]
   b5cda:	8c22      	ldrh	r2, [r4, #32]
   b5cdc:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5cde:	69e2      	ldr	r2, [r4, #28]
   b5ce0:	2307      	movs	r3, #7
   b5ce2:	4639      	mov	r1, r7
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	f7ff fcc2 	bl	b566e <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5cea:	69e3      	ldr	r3, [r4, #28]
   b5cec:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5cee:	3804      	subs	r0, #4
   b5cf0:	b283      	uxth	r3, r0
   b5cf2:	69e2      	ldr	r2, [r4, #28]
   b5cf4:	2182      	movs	r1, #130	; 0x82
   b5cf6:	4620      	mov	r0, r4
   b5cf8:	f7ff fc60 	bl	b55bc <_ZN4MQTT5writeEhPht>
   b5cfc:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5cfe:	a801      	add	r0, sp, #4
   b5d00:	f7ff fb9f 	bl	b5442 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5d04:	4628      	mov	r0, r5
   b5d06:	b003      	add	sp, #12
   b5d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5d0a:	2301      	movs	r3, #1
   b5d0c:	e7df      	b.n	b5cce <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5d0e <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5d0e:	2200      	movs	r2, #0
   b5d10:	f7ff bfcd 	b.w	b5cae <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5d14 <_ZN12mDNSResolver5QueryC1EPKc>:
#include "Query.h"

namespace mDNSResolver {
  Query::Query(const char* name) {
    this->name = name;
   b5d14:	6001      	str	r1, [r0, #0]
  }
   b5d16:	4770      	bx	lr

000b5d18 <_ZN12mDNSResolver5QueryD1Ev>:

  Query::~Query() {}
   b5d18:	4770      	bx	lr

000b5d1a <_ZN12mDNSResolver5Query12buildDNSNameEPhj>:
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
    buffer[bufferIndex++] = qclass & 0xFF;
  }

  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
    int wordstart = 0, wordend = 0;
   b5d1a:	2300      	movs	r3, #0
  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
   b5d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int wordstart = 0, wordend = 0;
   b5d1e:	461c      	mov	r4, r3

    do {
      if(this->name[wordend] == '.' || this->name[wordend] == '\0') {
   b5d20:	6805      	ldr	r5, [r0, #0]
   b5d22:	5ced      	ldrb	r5, [r5, r3]
   b5d24:	2d2e      	cmp	r5, #46	; 0x2e
   b5d26:	d000      	beq.n	b5d2a <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x10>
   b5d28:	b9bd      	cbnz	r5, b5d5a <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x40>
        const int wordlen = wordend - wordstart;
   b5d2a:	1b1d      	subs	r5, r3, r4
        buffer[bufferIndex++] = (unsigned char)wordlen;
   b5d2c:	548d      	strb	r5, [r1, r2]
   b5d2e:	f102 0c01 	add.w	ip, r2, #1

        for(int i = wordstart; i < wordend; i++) {
   b5d32:	4626      	mov	r6, r4
   b5d34:	440a      	add	r2, r1
   b5d36:	42b3      	cmp	r3, r6
          buffer[bufferIndex++] = this->name[i];
   b5d38:	6807      	ldr	r7, [r0, #0]
        for(int i = wordstart; i < wordend; i++) {
   b5d3a:	dd04      	ble.n	b5d46 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x2c>
          buffer[bufferIndex++] = this->name[i];
   b5d3c:	5dbf      	ldrb	r7, [r7, r6]
   b5d3e:	f802 7f01 	strb.w	r7, [r2, #1]!
        for(int i = wordstart; i < wordend; i++) {
   b5d42:	3601      	adds	r6, #1
   b5d44:	e7f7      	b.n	b5d36 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x1c>
   b5d46:	429c      	cmp	r4, r3
   b5d48:	bfc8      	it	gt
   b5d4a:	2500      	movgt	r5, #0
        }

        if(this->name[wordend] == '.') {
   b5d4c:	5cfc      	ldrb	r4, [r7, r3]
   b5d4e:	2c2e      	cmp	r4, #46	; 0x2e
          wordend++;
   b5d50:	bf08      	it	eq
   b5d52:	3301      	addeq	r3, #1
   b5d54:	eb05 020c 	add.w	r2, r5, ip
        if(this->name[wordend] == '.') {
   b5d58:	461c      	mov	r4, r3
        }
        wordstart = wordend;
      }

      wordend++;
    } while(this->name[wordstart] != '\0');
   b5d5a:	6805      	ldr	r5, [r0, #0]
   b5d5c:	5d2d      	ldrb	r5, [r5, r4]
      wordend++;
   b5d5e:	3301      	adds	r3, #1
    } while(this->name[wordstart] != '\0');
   b5d60:	2d00      	cmp	r5, #0
   b5d62:	d1dd      	bne.n	b5d20 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x6>

    return bufferIndex;
  }
   b5d64:	4610      	mov	r0, r2
   b5d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5d68 <_ZN12mDNSResolver5Query14assemblePacketEPhi>:
  void Query::assemblePacket(unsigned char *buffer, int bufferLength) {
   b5d68:	b538      	push	{r3, r4, r5, lr}
   b5d6a:	460b      	mov	r3, r1
   b5d6c:	4605      	mov	r5, r0
      buffer[i] = 0;
   b5d6e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   b5d72:	4618      	mov	r0, r3
   b5d74:	2100      	movs	r1, #0
   b5d76:	f005 fa10 	bl	bb19a <memset>
    buffer[5] = 0x01;
   b5d7a:	2401      	movs	r4, #1
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b5d7c:	4601      	mov	r1, r0
    buffer[5] = 0x01;
   b5d7e:	7144      	strb	r4, [r0, #5]
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b5d80:	220c      	movs	r2, #12
   b5d82:	4628      	mov	r0, r5
   b5d84:	f7ff ffc9 	bl	b5d1a <_ZN12mDNSResolver5Query12buildDNSNameEPhj>
    buffer[bufferIndex++] = '\0';
   b5d88:	2300      	movs	r3, #0
   b5d8a:	540b      	strb	r3, [r1, r0]
    buffer[bufferIndex++] = (qtype & 0xFF00) >> 8;
   b5d8c:	4401      	add	r1, r0
   b5d8e:	704b      	strb	r3, [r1, #1]
    buffer[bufferIndex++] = qtype & 0xFF;
   b5d90:	708c      	strb	r4, [r1, #2]
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
   b5d92:	70cb      	strb	r3, [r1, #3]
    buffer[bufferIndex++] = qclass & 0xFF;
   b5d94:	710c      	strb	r4, [r1, #4]
  }
   b5d96:	bd38      	pop	{r3, r4, r5, pc}

000b5d98 <_ZN12mDNSResolver5Query10sendPacketER3UDP>:
  void Query::sendPacket(UDP& socket) {
   b5d98:	b5b0      	push	{r4, r5, r7, lr}
   b5d9a:	b082      	sub	sp, #8
   b5d9c:	4605      	mov	r5, r0
   b5d9e:	af00      	add	r7, sp, #0
    int bufferLength = strlen(this->name) + 18;
   b5da0:	6800      	ldr	r0, [r0, #0]
  void Query::sendPacket(UDP& socket) {
   b5da2:	460c      	mov	r4, r1
    int bufferLength = strlen(this->name) + 18;
   b5da4:	f005 fa6f 	bl	bb286 <strlen>
    unsigned char buffer[bufferLength];
   b5da8:	f100 0319 	add.w	r3, r0, #25
   b5dac:	f023 0307 	bic.w	r3, r3, #7
   b5db0:	ebad 0d03 	sub.w	sp, sp, r3
    int bufferLength = strlen(this->name) + 18;
   b5db4:	f100 0212 	add.w	r2, r0, #18
    assemblePacket(buffer, bufferLength);
   b5db8:	4669      	mov	r1, sp
   b5dba:	4628      	mov	r0, r5
   b5dbc:	607a      	str	r2, [r7, #4]
   b5dbe:	f7ff ffd3 	bl	b5d68 <_ZN12mDNSResolver5Query14assemblePacketEPhi>
    socket.write(buffer, bufferLength);
   b5dc2:	6823      	ldr	r3, [r4, #0]
   b5dc4:	687a      	ldr	r2, [r7, #4]
   b5dc6:	68db      	ldr	r3, [r3, #12]
   b5dc8:	4669      	mov	r1, sp
   b5dca:	4620      	mov	r0, r4
   b5dcc:	4798      	blx	r3
	socket.endPacket();
   b5dce:	6823      	ldr	r3, [r4, #0]
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5dd4:	4798      	blx	r3
  }
   b5dd6:	3708      	adds	r7, #8
   b5dd8:	46bd      	mov	sp, r7
   b5dda:	bdb0      	pop	{r4, r5, r7, pc}

000b5ddc <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>:
    resolveCnames(cache);

    return answerResult;
  }

  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b5ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5dde:	b089      	sub	sp, #36	; 0x24
   b5de0:	461c      	mov	r4, r3
   b5de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if(dataLen == 4) {
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5de4:	6816      	ldr	r6, [r2, #0]
    if(dataLen == 4) {
   b5de6:	2b04      	cmp	r3, #4
  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b5de8:	4615      	mov	r5, r2
    if(dataLen == 4) {
   b5dea:	d11f      	bne.n	b5e2c <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x50>
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5dec:	1c72      	adds	r2, r6, #1
   b5dee:	602a      	str	r2, [r5, #0]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5df0:	1cb3      	adds	r3, r6, #2
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5df2:	5d81      	ldrb	r1, [r0, r6]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5df4:	602b      	str	r3, [r5, #0]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5df6:	1cf7      	adds	r7, r6, #3
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5df8:	5c82      	ldrb	r2, [r0, r2]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5dfa:	602f      	str	r7, [r5, #0]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5dfc:	3604      	adds	r6, #4
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5dfe:	5cc3      	ldrb	r3, [r0, r3]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5e00:	602e      	str	r6, [r5, #0]

      response.resolved = true;
   b5e02:	2501      	movs	r5, #1
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5e04:	5dc0      	ldrb	r0, [r0, r7]
      response.resolved = true;
   b5e06:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
      response.ttl = ttl;
   b5e0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b5e0c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
      response.ipAddress = IPAddress(a, b, c, d);
   b5e10:	9000      	str	r0, [sp, #0]
class IPAddress : public Printable {
   b5e12:	ad03      	add	r5, sp, #12
   b5e14:	a802      	add	r0, sp, #8
   b5e16:	f003 fd95 	bl	b9944 <_ZN9IPAddressC1Ehhhh>
   b5e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e1c:	f504 7486 	add.w	r4, r4, #268	; 0x10c
   b5e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e22:	682b      	ldr	r3, [r5, #0]
   b5e24:	7023      	strb	r3, [r4, #0]
    } else {
      (*offset) += dataLen;
    }

    return E_MDNS_OK;
  }
   b5e26:	2020      	movs	r0, #32
   b5e28:	b009      	add	sp, #36	; 0x24
   b5e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*offset) += dataLen;
   b5e2c:	4433      	add	r3, r6
   b5e2e:	6013      	str	r3, [r2, #0]
   b5e30:	e7f9      	b.n	b5e26 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x4a>

000b5e32 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>:

    free(assembled);
    return E_MDNS_OK;
  }

  MDNS_RESULT Answer::parseName(char** name, const char* mapped, unsigned int len) {
   b5e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned int namePointer = 0;
    unsigned int mapPointer = 0;
   b5e36:	2500      	movs	r5, #0
    unsigned int namePointer = 0;
   b5e38:	462b      	mov	r3, r5

      if(labelLength > 0x3f) {
        return E_MDNS_INVALID_LABEL_LENGTH;
      }

      if(namePointer + labelLength > len - 1) {
   b5e3a:	f102 3eff 	add.w	lr, r2, #4294967295
        return E_MDNS_PACKET_ERROR;
      }

      if(namePointer != 0) {
        (*name)[namePointer++] = '.';
   b5e3e:	f04f 082e 	mov.w	r8, #46	; 0x2e
    while(mapPointer < len) {
   b5e42:	4295      	cmp	r5, r2
   b5e44:	d21d      	bcs.n	b5e82 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x50>
      int labelLength = mapped[mapPointer++];
   b5e46:	5d4c      	ldrb	r4, [r1, r5]
      if(labelLength > 0x3f) {
   b5e48:	2c3f      	cmp	r4, #63	; 0x3f
      int labelLength = mapped[mapPointer++];
   b5e4a:	eb01 0705 	add.w	r7, r1, r5
      if(labelLength > 0x3f) {
   b5e4e:	dc20      	bgt.n	b5e92 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x60>
      if(namePointer + labelLength > len - 1) {
   b5e50:	18e6      	adds	r6, r4, r3
   b5e52:	4576      	cmp	r6, lr
   b5e54:	d81f      	bhi.n	b5e96 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x64>
      if(namePointer != 0) {
   b5e56:	b11b      	cbz	r3, b5e60 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x2e>
        (*name)[namePointer++] = '.';
   b5e58:	6806      	ldr	r6, [r0, #0]
   b5e5a:	f806 8003 	strb.w	r8, [r6, r3]
   b5e5e:	3301      	adds	r3, #1
   b5e60:	46ba      	mov	sl, r7
   b5e62:	2600      	movs	r6, #0
      }

      for(int i = 0; i < labelLength; i++) {
   b5e64:	42a6      	cmp	r6, r4
   b5e66:	eb06 0c03 	add.w	ip, r6, r3
   b5e6a:	db03      	blt.n	b5e74 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x42>
   b5e6c:	4423      	add	r3, r4
   b5e6e:	3401      	adds	r4, #1
   b5e70:	4425      	add	r5, r4
   b5e72:	e7e6      	b.n	b5e42 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x10>
        (*name)[namePointer++] = mapped[mapPointer++];
   b5e74:	6807      	ldr	r7, [r0, #0]
   b5e76:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
   b5e7a:	f807 900c 	strb.w	r9, [r7, ip]
      for(int i = 0; i < labelLength; i++) {
   b5e7e:	3601      	adds	r6, #1
   b5e80:	e7f0      	b.n	b5e64 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x32>
      }
    }

    (*name)[len - 1] = '\0';
   b5e82:	6803      	ldr	r3, [r0, #0]
   b5e84:	441a      	add	r2, r3
   b5e86:	2300      	movs	r3, #0
   b5e88:	f802 3c01 	strb.w	r3, [r2, #-1]

    return E_MDNS_OK;
   b5e8c:	2020      	movs	r0, #32
  }
   b5e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return E_MDNS_INVALID_LABEL_LENGTH;
   b5e92:	2026      	movs	r0, #38	; 0x26
   b5e94:	e7fb      	b.n	b5e8e <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>
        return E_MDNS_PACKET_ERROR;
   b5e96:	2023      	movs	r0, #35	; 0x23
   b5e98:	e7f9      	b.n	b5e8e <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>

000b5e9a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name, unsigned int maxlen) {
   b5e9a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5e9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    unsigned int index = 0;
   b5ea0:	2500      	movs	r5, #0
    unsigned int nameLength = 0;

    while(index < maxlen) {
   b5ea2:	42a5      	cmp	r5, r4
   b5ea4:	d025      	beq.n	b5ef2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b5ea6:	6816      	ldr	r6, [r2, #0]
   b5ea8:	f810 8006 	ldrb.w	r8, [r0, r6]
   b5eac:	f008 0cc0 	and.w	ip, r8, #192	; 0xc0
   b5eb0:	f1bc 0fc0 	cmp.w	ip, #192	; 0xc0
   b5eb4:	eb00 0e06 	add.w	lr, r0, r6
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5eb8:	f106 0701 	add.w	r7, r6, #1
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b5ebc:	d120      	bne.n	b5f00 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x66>
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5ebe:	6017      	str	r7, [r2, #0]
   b5ec0:	f89e 4000 	ldrb.w	r4, [lr]
   b5ec4:	3602      	adds	r6, #2
   b5ec6:	6016      	str	r6, [r2, #0]
   b5ec8:	5dc2      	ldrb	r2, [r0, r7]
   b5eca:	0224      	lsls	r4, r4, #8
   b5ecc:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
   b5ed0:	4414      	add	r4, r2
        if(pointerOffset > len) {
   b5ed2:	428c      	cmp	r4, r1
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5ed4:	9402      	str	r4, [sp, #8]
        if(pointerOffset > len) {
   b5ed6:	d80e      	bhi.n	b5ef6 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x5c>
          // Points to somewhere beyond the packet
          return -1 * E_MDNS_POINTER_OVERFLOW;
        }

        char *namePointer = *name + nameLength;
   b5ed8:	681b      	ldr	r3, [r3, #0]
   b5eda:	442b      	add	r3, r5
   b5edc:	9303      	str	r3, [sp, #12]
        int pointerLen = assembleName(buffer, len, &pointerOffset, &namePointer, MDNS_MAX_NAME_LEN - nameLength);
   b5ede:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
   b5ee2:	9300      	str	r3, [sp, #0]
   b5ee4:	aa02      	add	r2, sp, #8
   b5ee6:	ab03      	add	r3, sp, #12
   b5ee8:	f7ff ffd7 	bl	b5e9a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>

        if(pointerLen < 0) {
   b5eec:	2800      	cmp	r0, #0
   b5eee:	db04      	blt.n	b5efa <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return pointerLen;
        }

        nameLength += pointerLen;
   b5ef0:	1944      	adds	r4, r0, r5
        (*name)[nameLength++] = buffer[(*offset)++];
      }
      index++;
    }

    return nameLength;
   b5ef2:	4620      	mov	r0, r4
   b5ef4:	e001      	b.n	b5efa <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return -1 * E_MDNS_POINTER_OVERFLOW;
   b5ef6:	f06f 0021 	mvn.w	r0, #33	; 0x21
  }
   b5efa:	b004      	add	sp, #16
   b5efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (*name)[nameLength++] = buffer[(*offset)++];
   b5f00:	f105 0c01 	add.w	ip, r5, #1
   b5f04:	6017      	str	r7, [r2, #0]
      } else if(buffer[*offset] == '\0') {
   b5f06:	f1b8 0f00 	cmp.w	r8, #0
   b5f0a:	d105      	bne.n	b5f18 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x7e>
        (*name)[nameLength++] = buffer[(*offset)++];
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	f89e 2000 	ldrb.w	r2, [lr]
   b5f12:	555a      	strb	r2, [r3, r5]
   b5f14:	4664      	mov	r4, ip
        break;
   b5f16:	e7ec      	b.n	b5ef2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
        (*name)[nameLength++] = buffer[(*offset)++];
   b5f18:	5d87      	ldrb	r7, [r0, r6]
   b5f1a:	681e      	ldr	r6, [r3, #0]
   b5f1c:	5577      	strb	r7, [r6, r5]
        (*name)[nameLength++] = buffer[(*offset)++];
   b5f1e:	4665      	mov	r5, ip
    while(index < maxlen) {
   b5f20:	e7bf      	b.n	b5ea2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x8>

000b5f22 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name) {
   b5f22:	b513      	push	{r0, r1, r4, lr}
    return assembleName(buffer, len, offset, name, MDNS_MAX_NAME_LEN);
   b5f24:	24ff      	movs	r4, #255	; 0xff
   b5f26:	9400      	str	r4, [sp, #0]
   b5f28:	f7ff ffb7 	bl	b5e9a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
  }
   b5f2c:	b002      	add	sp, #8
   b5f2e:	bd10      	pop	{r4, pc}

000b5f30 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>:
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b5f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f34:	4605      	mov	r5, r0
   b5f36:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b5f3a:	20ff      	movs	r0, #255	; 0xff
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b5f3c:	4688      	mov	r8, r1
   b5f3e:	4614      	mov	r4, r2
   b5f40:	461e      	mov	r6, r3
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b5f42:	f000 ff6b 	bl	b6e1c <malloc>
   b5f46:	9004      	str	r0, [sp, #16]
    if(assembled == NULL) {
   b5f48:	b1b8      	cbz	r0, b5f7a <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4a>
    int nameLen = Answer::assembleName(buffer, len, offset, &assembled);
   b5f4a:	ab04      	add	r3, sp, #16
   b5f4c:	4622      	mov	r2, r4
   b5f4e:	4641      	mov	r1, r8
   b5f50:	4628      	mov	r0, r5
   b5f52:	f7ff ffe6 	bl	b5f22 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>
    if(nameLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b5f56:	f110 0f22 	cmn.w	r0, #34	; 0x22
   b5f5a:	d107      	bne.n	b5f6c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x3c>
        free(assembled);
   b5f5c:	9804      	ldr	r0, [sp, #16]
   b5f5e:	f000 ff65 	bl	b6e2c <free>
        return -1 * dataLen;
   b5f62:	2022      	movs	r0, #34	; 0x22
  }
   b5f64:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   b5f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    char *name = (char *)malloc(sizeof(char) * nameLen);
   b5f6c:	f000 ff56 	bl	b6e1c <malloc>
   b5f70:	9005      	str	r0, [sp, #20]
    if(name == NULL) {
   b5f72:	b920      	cbnz	r0, b5f7e <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4e>
      free(assembled);
   b5f74:	9804      	ldr	r0, [sp, #16]
   b5f76:	f000 ff59 	bl	b6e2c <free>
      return E_MDNS_OUT_OF_MEMORY;
   b5f7a:	2027      	movs	r0, #39	; 0x27
   b5f7c:	e7f2      	b.n	b5f64 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    parseName(&name, assembled, strlen(assembled));
   b5f7e:	9904      	ldr	r1, [sp, #16]
   b5f80:	9103      	str	r1, [sp, #12]
   b5f82:	4608      	mov	r0, r1
   b5f84:	f005 f97f 	bl	bb286 <strlen>
   b5f88:	9903      	ldr	r1, [sp, #12]
   b5f8a:	4602      	mov	r2, r0
   b5f8c:	a805      	add	r0, sp, #20
   b5f8e:	f7ff ff50 	bl	b5e32 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
    int cacheIndex = cache.search(name);
   b5f92:	9905      	ldr	r1, [sp, #20]
   b5f94:	4630      	mov	r0, r6
   b5f96:	f000 f987 	bl	b62a8 <_ZN12mDNSResolver5Cache6searchEPKc>
   b5f9a:	4607      	mov	r7, r0
    free(name);
   b5f9c:	9805      	ldr	r0, [sp, #20]
   b5f9e:	f000 ff45 	bl	b6e2c <free>
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5fa2:	6822      	ldr	r2, [r4, #0]
   b5fa4:	1c53      	adds	r3, r2, #1
   b5fa6:	6023      	str	r3, [r4, #0]
   b5fa8:	1c91      	adds	r1, r2, #2
   b5faa:	5ca8      	ldrb	r0, [r5, r2]
   b5fac:	6021      	str	r1, [r4, #0]
   b5fae:	5ce9      	ldrb	r1, [r5, r3]
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5fb0:	1d53      	adds	r3, r2, #5
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5fb2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5fb6:	18a8      	adds	r0, r5, r2
   b5fb8:	6023      	str	r3, [r4, #0]
   b5fba:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5fbe:	1d90      	adds	r0, r2, #6
   b5fc0:	6020      	str	r0, [r4, #0]
   b5fc2:	5ceb      	ldrb	r3, [r5, r3]
   b5fc4:	041b      	lsls	r3, r3, #16
   b5fc6:	eb03 630c 	add.w	r3, r3, ip, lsl #24
   b5fca:	f102 0c07 	add.w	ip, r2, #7
   b5fce:	f8c4 c000 	str.w	ip, [r4]
   b5fd2:	5c28      	ldrb	r0, [r5, r0]
   b5fd4:	eb03 2300 	add.w	r3, r3, r0, lsl #8
   b5fd8:	f102 0008 	add.w	r0, r2, #8
   b5fdc:	6020      	str	r0, [r4, #0]
   b5fde:	f815 900c 	ldrb.w	r9, [r5, ip]
   b5fe2:	4499      	add	r9, r3
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5fe4:	f102 0309 	add.w	r3, r2, #9
   b5fe8:	6023      	str	r3, [r4, #0]
   b5fea:	320a      	adds	r2, #10
   b5fec:	5c28      	ldrb	r0, [r5, r0]
   b5fee:	6022      	str	r2, [r4, #0]
   b5ff0:	f815 a003 	ldrb.w	sl, [r5, r3]
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b5ff4:	2901      	cmp	r1, #1
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5ff6:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b5ffa:	d112      	bne.n	b6022 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xf2>
   b5ffc:	1c78      	adds	r0, r7, #1
   b5ffe:	d077      	beq.n	b60f0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      resolveAName(buffer, len, offset, cache[cacheIndex], ttl, dataLen);
   b6000:	4639      	mov	r1, r7
   b6002:	4630      	mov	r0, r6
   b6004:	f000 f94b 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b6008:	e9cd 9a00 	strd	r9, sl, [sp]
   b600c:	4603      	mov	r3, r0
   b600e:	4622      	mov	r2, r4
   b6010:	4641      	mov	r1, r8
   b6012:	4628      	mov	r0, r5
   b6014:	f7ff fee2 	bl	b5ddc <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>
    free(assembled);
   b6018:	9804      	ldr	r0, [sp, #16]
   b601a:	f000 ff07 	bl	b6e2c <free>
    return E_MDNS_OK;
   b601e:	2020      	movs	r0, #32
   b6020:	e7a0      	b.n	b5f64 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    } else if(type == MDNS_CNAME_RECORD && cacheIndex != -1) {
   b6022:	2905      	cmp	r1, #5
   b6024:	d164      	bne.n	b60f0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
   b6026:	1c79      	adds	r1, r7, #1
   b6028:	d062      	beq.n	b60f0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      cache[cacheIndex].resolved = false;
   b602a:	4639      	mov	r1, r7
   b602c:	4630      	mov	r0, r6
   b602e:	f000 f936 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b6032:	2300      	movs	r3, #0
   b6034:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
      cache[cacheIndex].ttl = ttl;
   b6038:	4639      	mov	r1, r7
   b603a:	4630      	mov	r0, r6
   b603c:	f000 f92f 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b6040:	f8c0 9100 	str.w	r9, [r0, #256]	; 0x100
      unsigned int dataOffset = (*offset);
   b6044:	6823      	ldr	r3, [r4, #0]
   b6046:	9306      	str	r3, [sp, #24]
      (*offset) += dataLen;
   b6048:	4453      	add	r3, sl
   b604a:	6023      	str	r3, [r4, #0]
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b604c:	4628      	mov	r0, r5
   b604e:	f8cd a000 	str.w	sl, [sp]
   b6052:	ab04      	add	r3, sp, #16
   b6054:	aa06      	add	r2, sp, #24
   b6056:	4641      	mov	r1, r8
   b6058:	f7ff ff1f 	bl	b5e9a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b605c:	f110 0f22 	cmn.w	r0, #34	; 0x22
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b6060:	4605      	mov	r5, r0
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b6062:	f43f af7b 	beq.w	b5f5c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x2c>
      Response r;
   b6066:	ac08      	add	r4, sp, #32
   b6068:	4620      	mov	r0, r4
   b606a:	f000 f9e1 	bl	b6430 <_ZN12mDNSResolver8ResponseC1Ev>
      parseName(&responseName, assembled, dataLen - 1);
   b606e:	9904      	ldr	r1, [sp, #16]
      char* responseName = &*r.name;
   b6070:	9407      	str	r4, [sp, #28]
      parseName(&responseName, assembled, dataLen - 1);
   b6072:	1e6a      	subs	r2, r5, #1
   b6074:	a807      	add	r0, sp, #28
   b6076:	f7ff fedc 	bl	b5e32 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
      int cnameIndex = cache.search(r);
   b607a:	4621      	mov	r1, r4
   b607c:	4630      	mov	r0, r6
   b607e:	f000 f92b 	bl	b62d8 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      if(cnameIndex == -1) {
   b6082:	1c43      	adds	r3, r0, #1
   b6084:	d125      	bne.n	b60d2 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1a2>
#include "Constants.h"
#include "Particle.h"
// #include <mDNSResolver/IPAddress.h>

namespace mDNSResolver {
  class Response {
   b6086:	f44f 7280 	mov.w	r2, #256	; 0x100
   b608a:	4621      	mov	r1, r4
   b608c:	a851      	add	r0, sp, #324	; 0x144
   b608e:	f005 f85c 	bl	bb14a <memcpy>
   b6092:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   b6096:	9391      	str	r3, [sp, #580]	; 0x244
   b6098:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   b609c:	f88d 3248 	strb.w	r3, [sp, #584]	; 0x248
   b60a0:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   b60a4:	4b14      	ldr	r3, [pc, #80]	; (b60f8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c8>)
   b60a6:	9393      	str	r3, [sp, #588]	; 0x24c
   b60a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b60ac:	ad94      	add	r5, sp, #592	; 0x250
   b60ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b60b0:	f8dc 3000 	ldr.w	r3, [ip]
   b60b4:	702b      	strb	r3, [r5, #0]
        cache.insert(r);
   b60b6:	a951      	add	r1, sp, #324	; 0x144
   b60b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   b60bc:	9399      	str	r3, [sp, #612]	; 0x264
   b60be:	4630      	mov	r0, r6
   b60c0:	f000 f957 	bl	b6372 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b60c4:	a851      	add	r0, sp, #324	; 0x144
   b60c6:	f000 f9e7 	bl	b6498 <_ZN12mDNSResolver8ResponseD1Ev>
        cnameIndex = cache.search(r);
   b60ca:	4621      	mov	r1, r4
   b60cc:	4630      	mov	r0, r6
   b60ce:	f000 f903 	bl	b62d8 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b60d2:	4601      	mov	r1, r0
   b60d4:	4630      	mov	r0, r6
   b60d6:	f000 f8e2 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b60da:	4639      	mov	r1, r7
   b60dc:	4605      	mov	r5, r0
   b60de:	4630      	mov	r0, r6
   b60e0:	f000 f8dd 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b60e4:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
      Response r;
   b60e8:	4620      	mov	r0, r4
   b60ea:	f000 f9d5 	bl	b6498 <_ZN12mDNSResolver8ResponseD1Ev>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b60ee:	e793      	b.n	b6018 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
      (*offset) += dataLen;
   b60f0:	4452      	add	r2, sl
   b60f2:	6022      	str	r2, [r4, #0]
   b60f4:	e790      	b.n	b6018 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
   b60f6:	bf00      	nop
   b60f8:	000bdc68 	.word	0x000bdc68

000b60fc <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>:

  // Work out how many bytes are dedicated to questions. Since we aren't answering questions, they can be skipped
  // buffer: The mDNS packet we are parsing
  // len: Length of the packet
  // offset: the byte we are up to in the parsing process
  MDNS_RESULT Answer::skipQuestions(unsigned char* buffer, unsigned int len, unsigned int* offset) {
   b60fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int questionCount = (buffer[4] << 8) + buffer[5];
   b60fe:	7903      	ldrb	r3, [r0, #4]
   b6100:	7946      	ldrb	r6, [r0, #5]
   b6102:	eb06 2603 	add.w	r6, r6, r3, lsl #8

    *offset += 12;
   b6106:	6813      	ldr	r3, [r2, #0]
   b6108:	330c      	adds	r3, #12
   b610a:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b610c:	2500      	movs	r5, #0
   b610e:	42ae      	cmp	r6, r5
   b6110:	d016      	beq.n	b6140 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x44>

      while(buffer[*offset] != '\0') {
   b6112:	6813      	ldr	r3, [r2, #0]
   b6114:	5cc4      	ldrb	r4, [r0, r3]
   b6116:	b12c      	cbz	r4, b6124 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x28>
        // If it's a pointer, add two to the counter
        if((buffer[*offset] & 0xc0) == 0xc0) {
   b6118:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   b611c:	2fc0      	cmp	r7, #192	; 0xc0
   b611e:	d106      	bne.n	b612e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x32>
          (*offset) += 2;
   b6120:	3302      	adds	r3, #2
   b6122:	6013      	str	r3, [r2, #0]
            return E_MDNS_PACKET_ERROR;
          }
        }
      }

      (*offset) += 5; // 2 bytes for the qtypes and 2 bytes qclass + plus one to land us on the next bit
   b6124:	6813      	ldr	r3, [r2, #0]
   b6126:	3305      	adds	r3, #5
   b6128:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b612a:	3501      	adds	r5, #1
   b612c:	e7ef      	b.n	b610e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x12>
          if(labelLength > 0x3f) {
   b612e:	2c3f      	cmp	r4, #63	; 0x3f
   b6130:	d80c      	bhi.n	b614c <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x50>
          (*offset) += 1; // Increment to move to the next byte
   b6132:	3301      	adds	r3, #1
          (*offset) += labelLength;
   b6134:	4423      	add	r3, r4
          if(*offset > len) {
   b6136:	428b      	cmp	r3, r1
          (*offset) += labelLength;
   b6138:	6013      	str	r3, [r2, #0]
          if(*offset > len) {
   b613a:	d9ea      	bls.n	b6112 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x16>
    }

    if(*offset > len + 1) {
      return E_MDNS_PACKET_ERROR;
   b613c:	2023      	movs	r0, #35	; 0x23
    }

    return E_MDNS_OK;
  }
   b613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*offset > len + 1) {
   b6140:	6813      	ldr	r3, [r2, #0]
   b6142:	3101      	adds	r1, #1
   b6144:	428b      	cmp	r3, r1
   b6146:	d8f9      	bhi.n	b613c <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x40>
    return E_MDNS_OK;
   b6148:	2020      	movs	r0, #32
   b614a:	e7f8      	b.n	b613e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>
            return E_MDNS_INVALID_LABEL_LENGTH;
   b614c:	2026      	movs	r0, #38	; 0x26
   b614e:	e7f6      	b.n	b613e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>

000b6150 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>:

  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b6150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for(int i = 0; i < cache.length(); i++) {
   b6154:	2400      	movs	r4, #0
  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b6156:	4605      	mov	r5, r0
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
        cache[i].ipAddress = cache[i].cname->ipAddress;
        cache[i].resolved = true;
   b6158:	f04f 0801 	mov.w	r8, #1
        cache[i].cname = NULL;
   b615c:	46a1      	mov	r9, r4
    for(int i = 0; i < cache.length(); i++) {
   b615e:	4628      	mov	r0, r5
   b6160:	f000 f8bc 	bl	b62dc <_ZN12mDNSResolver5Cache6lengthEv>
   b6164:	42a0      	cmp	r0, r4
   b6166:	dd2f      	ble.n	b61c8 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x78>
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
   b6168:	4621      	mov	r1, r4
   b616a:	4628      	mov	r0, r5
   b616c:	f000 f897 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b6170:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b6174:	b333      	cbz	r3, b61c4 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
   b6176:	4621      	mov	r1, r4
   b6178:	4628      	mov	r0, r5
   b617a:	f000 f890 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b617e:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b6182:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
   b6186:	b1eb      	cbz	r3, b61c4 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
        cache[i].ipAddress = cache[i].cname->ipAddress;
   b6188:	4621      	mov	r1, r4
   b618a:	4628      	mov	r0, r5
   b618c:	f000 f887 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b6190:	4621      	mov	r1, r4
   b6192:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   b6196:	4628      	mov	r0, r5
   b6198:	f000 f881 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b619c:	f507 7786 	add.w	r7, r7, #268	; 0x10c
   b61a0:	f500 7686 	add.w	r6, r0, #268	; 0x10c
   b61a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b61a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b61a8:	683b      	ldr	r3, [r7, #0]
   b61aa:	7033      	strb	r3, [r6, #0]
        cache[i].resolved = true;
   b61ac:	4621      	mov	r1, r4
   b61ae:	4628      	mov	r0, r5
   b61b0:	f000 f875 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
        cache[i].cname = NULL;
   b61b4:	4621      	mov	r1, r4
        cache[i].resolved = true;
   b61b6:	f880 8104 	strb.w	r8, [r0, #260]	; 0x104
        cache[i].cname = NULL;
   b61ba:	4628      	mov	r0, r5
   b61bc:	f000 f86f 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b61c0:	f8c0 9120 	str.w	r9, [r0, #288]	; 0x120
    for(int i = 0; i < cache.length(); i++) {
   b61c4:	3401      	adds	r4, #1
   b61c6:	e7ca      	b.n	b615e <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0xe>
      }
    }
    return E_MDNS_OK;
  }
   b61c8:	2020      	movs	r0, #32
   b61ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b61ce <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>:
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b61ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b61d2:	4691      	mov	r9, r2
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b61d4:	f990 2002 	ldrsb.w	r2, [r0, #2]
   b61d8:	7883      	ldrb	r3, [r0, #2]
   b61da:	2a00      	cmp	r2, #0
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b61dc:	4606      	mov	r6, r0
   b61de:	4688      	mov	r8, r1
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b61e0:	da28      	bge.n	b6234 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    if(buffer[2] & 0b00000010) {
   b61e2:	079b      	lsls	r3, r3, #30
   b61e4:	d422      	bmi.n	b622c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x5e>
    if (buffer[3] & 0b00001111) {
   b61e6:	78c5      	ldrb	r5, [r0, #3]
   b61e8:	f015 050f 	ands.w	r5, r5, #15
   b61ec:	d120      	bne.n	b6230 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x62>
    unsigned int answerCount = (buffer[6] << 8) + buffer[7];
   b61ee:	7983      	ldrb	r3, [r0, #6]
   b61f0:	79c7      	ldrb	r7, [r0, #7]
    if(answerCount == 0) {
   b61f2:	eb17 2703 	adds.w	r7, r7, r3, lsl #8
   b61f6:	d01d      	beq.n	b6234 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b61f8:	aa01      	add	r2, sp, #4
    unsigned int offset = 0;
   b61fa:	9501      	str	r5, [sp, #4]
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b61fc:	f7ff ff7e 	bl	b60fc <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>
    if(questionResult != E_MDNS_OK) {
   b6200:	2820      	cmp	r0, #32
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b6202:	4604      	mov	r4, r0
    if(questionResult != E_MDNS_OK) {
   b6204:	d10e      	bne.n	b6224 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      answerResult = resolve(buffer, len, &offset, cache);
   b6206:	464b      	mov	r3, r9
   b6208:	aa01      	add	r2, sp, #4
   b620a:	4641      	mov	r1, r8
   b620c:	4630      	mov	r0, r6
   b620e:	f7ff fe8f 	bl	b5f30 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>
      if(answerResult != E_MDNS_OK) {
   b6212:	2820      	cmp	r0, #32
      answerResult = resolve(buffer, len, &offset, cache);
   b6214:	4604      	mov	r4, r0
      if(answerResult != E_MDNS_OK) {
   b6216:	d105      	bne.n	b6224 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
    for(int i = 0; i < answerCount; i++) {
   b6218:	3501      	adds	r5, #1
   b621a:	42af      	cmp	r7, r5
   b621c:	d1f3      	bne.n	b6206 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x38>
    resolveCnames(cache);
   b621e:	4648      	mov	r0, r9
   b6220:	f7ff ff96 	bl	b6150 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>
  }
   b6224:	4620      	mov	r0, r4
   b6226:	b003      	add	sp, #12
   b6228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return E_MDNS_TRUNCATED;
   b622c:	2425      	movs	r4, #37	; 0x25
   b622e:	e7f9      	b.n	b6224 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_PACKET_ERROR;
   b6230:	2423      	movs	r4, #35	; 0x23
   b6232:	e7f7      	b.n	b6224 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_OK;
   b6234:	2420      	movs	r4, #32
   b6236:	e7f5      	b.n	b6224 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>

000b6238 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>:
   b6238:	b5f0      	push	{r4, r5, r6, r7, lr}
   b623a:	1e4a      	subs	r2, r1, #1
   b623c:	460d      	mov	r5, r1
   b623e:	4604      	mov	r4, r0
   b6240:	4603      	mov	r3, r0
   b6242:	f500 7180 	add.w	r1, r0, #256	; 0x100
   b6246:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   b624a:	f803 0b01 	strb.w	r0, [r3], #1
   b624e:	428b      	cmp	r3, r1
   b6250:	d1f9      	bne.n	b6246 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0+0xe>
   b6252:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b6256:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   b625a:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   b625e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   b6262:	f505 7786 	add.w	r7, r5, #268	; 0x10c
   b6266:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b6268:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   b626c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b626e:	683b      	ldr	r3, [r7, #0]
   b6270:	7033      	strb	r3, [r6, #0]
   b6272:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   b6276:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   b627a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b627c <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b627c:	b570      	push	{r4, r5, r6, lr}
   b627e:	4604      	mov	r4, r0
   b6280:	4605      	mov	r5, r0
   b6282:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b6286:	4628      	mov	r0, r5
   b6288:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b628c:	f000 f8d0 	bl	b6430 <_ZN12mDNSResolver8ResponseC1Ev>
   b6290:	42ae      	cmp	r6, r5
   b6292:	d1f8      	bne.n	b6286 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b6294:	2300      	movs	r3, #0
   b6296:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b629a:	4620      	mov	r0, r4
   b629c:	bd70      	pop	{r4, r5, r6, pc}

000b629e <_ZN12mDNSResolver5CacheixEi>:
  Cache::~Cache() {
  }

  Response& Cache::operator[] (const int index) {
    return this->list[index];
  }
   b629e:	f44f 7392 	mov.w	r3, #292	; 0x124
   b62a2:	fb03 0001 	mla	r0, r3, r1, r0
   b62a6:	4770      	bx	lr

000b62a8 <_ZN12mDNSResolver5Cache6searchEPKc>:

  int Cache::search(Response& response) {
    return search(response.name);
  }

  int Cache::search(const char* name) {
   b62a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < this->size; i++) {
   b62ac:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
  int Cache::search(const char* name) {
   b62b0:	4605      	mov	r5, r0
   b62b2:	4688      	mov	r8, r1
    for(int i = 0; i < this->size; i++) {
   b62b4:	2400      	movs	r4, #0
      if(strcmp(this->list[i].name, name) == 0) {
   b62b6:	f44f 7792 	mov.w	r7, #292	; 0x124
    for(int i = 0; i < this->size; i++) {
   b62ba:	42a6      	cmp	r6, r4
   b62bc:	dd07      	ble.n	b62ce <_ZN12mDNSResolver5Cache6searchEPKc+0x26>
      if(strcmp(this->list[i].name, name) == 0) {
   b62be:	4641      	mov	r1, r8
   b62c0:	fb07 5004 	mla	r0, r7, r4, r5
   b62c4:	f004 ffaf 	bl	bb226 <strcmp>
   b62c8:	b118      	cbz	r0, b62d2 <_ZN12mDNSResolver5Cache6searchEPKc+0x2a>
    for(int i = 0; i < this->size; i++) {
   b62ca:	3401      	adds	r4, #1
   b62cc:	e7f5      	b.n	b62ba <_ZN12mDNSResolver5Cache6searchEPKc+0x12>
        return i;
      }
    }
    return -1;
   b62ce:	f04f 34ff 	mov.w	r4, #4294967295
  }
   b62d2:	4620      	mov	r0, r4
   b62d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b62d8 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>:
    return search(response.name);
   b62d8:	f7ff bfe6 	b.w	b62a8 <_ZN12mDNSResolver5Cache6searchEPKc>

000b62dc <_ZN12mDNSResolver5Cache6lengthEv>:
    }
  }

  int Cache::length() {
    return this->size;
  }
   b62dc:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
   b62e0:	4770      	bx	lr

000b62e2 <_ZN12mDNSResolver5Cache6oldestEv>:

  int Cache::oldest() {
   b62e2:	b570      	push	{r4, r5, r6, lr}
    if(this->size == 0) {
   b62e4:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
   b62e8:	b1a4      	cbz	r4, b6314 <_ZN12mDNSResolver5Cache6oldestEv+0x32>
      return -1;
    }

    unsigned long oldestTTL = this->list[0].ttl;
   b62ea:	f8d0 5100 	ldr.w	r5, [r0, #256]	; 0x100
    unsigned int oldestIndex = 0;

    for(int i = 1; i < this->size; i++) {
   b62ee:	2101      	movs	r1, #1
    unsigned int oldestIndex = 0;
   b62f0:	2200      	movs	r2, #0
      if(this->list[i].ttl < oldestTTL) {
   b62f2:	f500 7380 	add.w	r3, r0, #256	; 0x100
   b62f6:	f44f 7692 	mov.w	r6, #292	; 0x124
    for(int i = 1; i < this->size; i++) {
   b62fa:	428c      	cmp	r4, r1
   b62fc:	dd08      	ble.n	b6310 <_ZN12mDNSResolver5Cache6oldestEv+0x2e>
      if(this->list[i].ttl < oldestTTL) {
   b62fe:	fb06 f001 	mul.w	r0, r6, r1
   b6302:	5818      	ldr	r0, [r3, r0]
   b6304:	42a8      	cmp	r0, r5
        oldestTTL = this->list[i].ttl;
        oldestIndex = i;
   b6306:	bf3c      	itt	cc
   b6308:	460a      	movcc	r2, r1
      if(this->list[i].ttl < oldestTTL) {
   b630a:	4605      	movcc	r5, r0
    for(int i = 1; i < this->size; i++) {
   b630c:	3101      	adds	r1, #1
   b630e:	e7f4      	b.n	b62fa <_ZN12mDNSResolver5Cache6oldestEv+0x18>
      }
    }

    return oldestIndex;
   b6310:	4610      	mov	r0, r2
  }
   b6312:	bd70      	pop	{r4, r5, r6, pc}
      return -1;
   b6314:	f04f 30ff 	mov.w	r0, #4294967295
   b6318:	e7fb      	b.n	b6312 <_ZN12mDNSResolver5Cache6oldestEv+0x30>

000b631a <_ZN12mDNSResolver5Cache11removeCnameEi>:

  void Cache::removeCname(int index) {
    Response *response = &this->list[index];
   b631a:	f44f 7392 	mov.w	r3, #292	; 0x124
   b631e:	fb03 0101 	mla	r1, r3, r1, r0
    return this->size;
   b6322:	f8d0 2490 	ldr.w	r2, [r0, #1168]	; 0x490

    for(int i = 0; i < length(); i++) {
   b6326:	2300      	movs	r3, #0
  void Cache::removeCname(int index) {
   b6328:	b530      	push	{r4, r5, lr}
      if(this->list[i].cname == response) {
        this->list[i].cname = NULL;
   b632a:	461c      	mov	r4, r3
    for(int i = 0; i < length(); i++) {
   b632c:	4293      	cmp	r3, r2
   b632e:	da09      	bge.n	b6344 <_ZN12mDNSResolver5Cache11removeCnameEi+0x2a>
      if(this->list[i].cname == response) {
   b6330:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   b6334:	428d      	cmp	r5, r1
        this->list[i].cname = NULL;
   b6336:	bf08      	it	eq
   b6338:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
    for(int i = 0; i < length(); i++) {
   b633c:	3301      	adds	r3, #1
   b633e:	f500 7092 	add.w	r0, r0, #292	; 0x124
   b6342:	e7f3      	b.n	b632c <_ZN12mDNSResolver5Cache11removeCnameEi+0x12>
      }
    }
  }
   b6344:	bd30      	pop	{r4, r5, pc}

000b6346 <_ZN12mDNSResolver5Cache6removeEi>:

  void Cache::remove(int index) {
   b6346:	b538      	push	{r3, r4, r5, lr}
   b6348:	4604      	mov	r4, r0
   b634a:	460d      	mov	r5, r1
    removeCname(index);
   b634c:	f7ff ffe5 	bl	b631a <_ZN12mDNSResolver5Cache11removeCnameEi>
    this->list[index] = this->list[this->size - 1];
   b6350:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
   b6354:	f44f 7092 	mov.w	r0, #292	; 0x124
   b6358:	3901      	subs	r1, #1
   b635a:	fb00 4101 	mla	r1, r0, r1, r4
   b635e:	fb00 4005 	mla	r0, r0, r5, r4
   b6362:	f7ff ff69 	bl	b6238 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size -= 1;
   b6366:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b636a:	3b01      	subs	r3, #1
   b636c:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b6370:	bd38      	pop	{r3, r4, r5, pc}

000b6372 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>:
  void Cache::insert(Response response) {
   b6372:	b538      	push	{r3, r4, r5, lr}
   b6374:	4604      	mov	r4, r0
   b6376:	460d      	mov	r5, r1
    return search(response.name);
   b6378:	f7ff ff96 	bl	b62a8 <_ZN12mDNSResolver5Cache6searchEPKc>
    if(existing != -1) {
   b637c:	1c43      	adds	r3, r0, #1
   b637e:	d008      	beq.n	b6392 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x20>
      this->list[existing] = response;
   b6380:	f44f 7392 	mov.w	r3, #292	; 0x124
   b6384:	4629      	mov	r1, r5
   b6386:	fb03 4000 	mla	r0, r3, r0, r4
  }
   b638a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      this->list[existing] = response;
   b638e:	f7ff bf53 	b.w	b6238 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    if(this->size == MDNS_RESOLVER_MAX_CACHE) {
   b6392:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b6396:	2b04      	cmp	r3, #4
   b6398:	d106      	bne.n	b63a8 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x36>
      int i = oldest();
   b639a:	4620      	mov	r0, r4
   b639c:	f7ff ffa1 	bl	b62e2 <_ZN12mDNSResolver5Cache6oldestEv>
   b63a0:	4601      	mov	r1, r0
      remove(i);
   b63a2:	4620      	mov	r0, r4
   b63a4:	f7ff ffcf 	bl	b6346 <_ZN12mDNSResolver5Cache6removeEi>
    this->list[this->size] = response;
   b63a8:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b63ac:	f44f 7092 	mov.w	r0, #292	; 0x124
   b63b0:	fb00 4003 	mla	r0, r0, r3, r4
   b63b4:	4629      	mov	r1, r5
   b63b6:	f7ff ff3f 	bl	b6238 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size += 1;
   b63ba:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b63be:	3301      	adds	r3, #1
   b63c0:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b63c4:	bd38      	pop	{r3, r4, r5, pc}

000b63c6 <_ZN12mDNSResolver5Cache6expireEv>:
  void Cache::expire() {
   b63c6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b63ca:	466e      	mov	r6, sp
   b63cc:	4604      	mov	r4, r0
   b63ce:	4605      	mov	r5, r0
   b63d0:	46b0      	mov	r8, r6
    for(int i = 0; i < this->size; i++) {
   b63d2:	2700      	movs	r7, #0
   b63d4:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b63d8:	42bb      	cmp	r3, r7
   b63da:	dd0a      	ble.n	b63f2 <_ZN12mDNSResolver5Cache6expireEv+0x2c>
      this->list[i].decrementTTL();
   b63dc:	4628      	mov	r0, r5
   b63de:	f000 f85c 	bl	b649a <_ZN12mDNSResolver8Response12decrementTTLEv>
      ttls[i] = this->list[i].ttl;
   b63e2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b63e6:	f848 3b04 	str.w	r3, [r8], #4
    for(int i = 0; i < this->size; i++) {
   b63ea:	3701      	adds	r7, #1
   b63ec:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b63f0:	e7f0      	b.n	b63d4 <_ZN12mDNSResolver5Cache6expireEv+0xe>
    for(int i = 0; i < this->size; i++) {
   b63f2:	2500      	movs	r5, #0
   b63f4:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b63f8:	42ab      	cmp	r3, r5
   b63fa:	dd08      	ble.n	b640e <_ZN12mDNSResolver5Cache6expireEv+0x48>
      if(ttls[i] == 0) {
   b63fc:	f856 3b04 	ldr.w	r3, [r6], #4
   b6400:	b91b      	cbnz	r3, b640a <_ZN12mDNSResolver5Cache6expireEv+0x44>
        remove(i);
   b6402:	4629      	mov	r1, r5
   b6404:	4620      	mov	r0, r4
   b6406:	f7ff ff9e 	bl	b6346 <_ZN12mDNSResolver5Cache6removeEi>
    for(int i = 0; i < this->size; i++) {
   b640a:	3501      	adds	r5, #1
   b640c:	e7f2      	b.n	b63f4 <_ZN12mDNSResolver5Cache6expireEv+0x2e>
  }
   b640e:	b004      	add	sp, #16
   b6410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6414 <_ZN9IPAddressaSImEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6414:	b530      	push	{r4, r5, lr}
   b6416:	b087      	sub	sp, #28
   b6418:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b641a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b641c:	4668      	mov	r0, sp
   b641e:	f003 fa65 	bl	b98ec <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b6422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6424:	3404      	adds	r4, #4
   b6426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6428:	682b      	ldr	r3, [r5, #0]
   b642a:	7023      	strb	r3, [r4, #0]
    }
   b642c:	b007      	add	sp, #28
   b642e:	bd30      	pop	{r4, r5, pc}

000b6430 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b6430:	b538      	push	{r3, r4, r5, lr}
   b6432:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b6436:	4604      	mov	r4, r0
   b6438:	4628      	mov	r0, r5
   b643a:	f003 fa37 	bl	b98ac <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b643e:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b6440:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b6442:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b6444:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b6448:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b644c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b6450:	f04f 31ff 	mov.w	r1, #4294967295
   b6454:	f7ff ffde 	bl	b6414 <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b6458:	4620      	mov	r0, r4
   b645a:	bd38      	pop	{r3, r4, r5, pc}

000b645c <_ZN12mDNSResolver8ResponseC1EPKcm>:
    this->resolved = false;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
  }

  Response::Response(const char* name, unsigned long ttl) {
   b645c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b645e:	f500 7684 	add.w	r6, r0, #264	; 0x108
   b6462:	4604      	mov	r4, r0
   b6464:	4630      	mov	r0, r6
   b6466:	4615      	mov	r5, r2
   b6468:	9101      	str	r1, [sp, #4]
   b646a:	f003 fa1f 	bl	b98ac <_ZN9IPAddressC1Ev>
    strncpy(this->name, name, MDNS_MAX_NAME_LEN + 1);
   b646e:	9901      	ldr	r1, [sp, #4]
   b6470:	f44f 7280 	mov.w	r2, #256	; 0x100
   b6474:	4620      	mov	r0, r4
   b6476:	f004 ff22 	bl	bb2be <strncpy>
    this->name[MDNS_MAX_NAME_LEN + 1] = '\0';
    this->ttl = ttl;
    this->resolved = false;
   b647a:	2300      	movs	r3, #0
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b647c:	4630      	mov	r0, r6
    this->ttl = ttl;
   b647e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    this->resolved = false;
   b6482:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->cname = NULL;
   b6486:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b648a:	f04f 31ff 	mov.w	r1, #4294967295
   b648e:	f7ff ffc1 	bl	b6414 <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b6492:	4620      	mov	r0, r4
   b6494:	b002      	add	sp, #8
   b6496:	bd70      	pop	{r4, r5, r6, pc}

000b6498 <_ZN12mDNSResolver8ResponseD1Ev>:

  Response::~Response() {
  }
   b6498:	4770      	bx	lr

000b649a <_ZN12mDNSResolver8Response12decrementTTLEv>:

  void Response::decrementTTL() {
    if(this->ttl > 0) {
   b649a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b649e:	2b00      	cmp	r3, #0
      this->ttl--;
   b64a0:	bfc4      	itt	gt
   b64a2:	f103 33ff 	addgt.w	r3, r3, #4294967295
   b64a6:	f8c0 3100 	strgt.w	r3, [r0, #256]	; 0x100
    }
  }
   b64aa:	4770      	bx	lr

000b64ac <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b64ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64ae:	4604      	mov	r4, r0
   b64b0:	3004      	adds	r0, #4
   b64b2:	460d      	mov	r5, r1
   b64b4:	f001 f8b4 	bl	b7620 <_ZN3UDPC1Ev>
   b64b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b64bc:	f003 f9f6 	bl	b98ac <_ZN9IPAddressC1Ev>
    timeout = 0;
   b64c0:	2300      	movs	r3, #0
   b64c2:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b64c4:	686b      	ldr	r3, [r5, #4]
   b64c6:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b64c8:	68ab      	ldr	r3, [r5, #8]
   b64ca:	60e3      	str	r3, [r4, #12]
   b64cc:	68eb      	ldr	r3, [r5, #12]
   b64ce:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b64d0:	696b      	ldr	r3, [r5, #20]
   b64d2:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b64d4:	f105 0720 	add.w	r7, r5, #32
   b64d8:	8b2b      	ldrh	r3, [r5, #24]
   b64da:	83a3      	strh	r3, [r4, #28]
   b64dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b64de:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b64e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b64e4:	683b      	ldr	r3, [r7, #0]
   b64e6:	7033      	strb	r3, [r6, #0]
   b64e8:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b64ea:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b64ec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b64ee:	6423      	str	r3, [r4, #64]	; 0x40
   b64f0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b64f2:	6463      	str	r3, [r4, #68]	; 0x44
   b64f4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b64f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b64f8:	64a3      	str	r3, [r4, #72]	; 0x48
   b64fa:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b64fe:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b6500:	4620      	mov	r0, r4
   b6502:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b6506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6508 <_ZN12mDNSResolver8Resolver5queryEPKc>:
	init = false;
	// Serial.println("Search return 2");
    return INADDR_NONE;
  }

  void Resolver::query(const char* name) {
   b6508:	b510      	push	{r4, lr}
   b650a:	b08a      	sub	sp, #40	; 0x28
   b650c:	4604      	mov	r4, r0
	  // Serial.println("Query");
    Query query(name);
   b650e:	a803      	add	r0, sp, #12
   b6510:	f7ff fc00 	bl	b5d14 <_ZN12mDNSResolver5QueryC1EPKc>
    udp.beginPacket(MDNS_BROADCAST_IP, MDNS_PORT);		//Peet
   b6514:	23fb      	movs	r3, #251	; 0xfb
   b6516:	9300      	str	r3, [sp, #0]
   b6518:	2300      	movs	r3, #0
   b651a:	461a      	mov	r2, r3
   b651c:	3404      	adds	r4, #4
   b651e:	21e0      	movs	r1, #224	; 0xe0
   b6520:	a804      	add	r0, sp, #16
   b6522:	f003 fa0f 	bl	b9944 <_ZN9IPAddressC1Ehhhh>
   b6526:	f241 42e9 	movw	r2, #5353	; 0x14e9
   b652a:	a904      	add	r1, sp, #16
   b652c:	4620      	mov	r0, r4
   b652e:	f001 f8c5 	bl	b76bc <_ZN3UDP11beginPacketE9IPAddresst>
    query.sendPacket(udp);
   b6532:	4621      	mov	r1, r4
   b6534:	a803      	add	r0, sp, #12
   b6536:	f7ff fc2f 	bl	b5d98 <_ZN12mDNSResolver5Query10sendPacketER3UDP>
    udp.endPacket();
   b653a:	4620      	mov	r0, r4
   b653c:	f000 fdda 	bl	b70f4 <_ZN3UDP9endPacketEv>
    Query query(name);
   b6540:	a803      	add	r0, sp, #12
   b6542:	f7ff fbe9 	bl	b5d18 <_ZN12mDNSResolver5QueryD1Ev>
  }
   b6546:	b00a      	add	sp, #40	; 0x28
   b6548:	bd10      	pop	{r4, pc}
	...

000b654c <_ZN12mDNSResolver8Resolver4readEv>:
      free(buffer);
    }
	// Serial.println("mDNS2");
  }

  MDNS_RESULT Resolver::read() {
   b654c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b654e:	4605      	mov	r5, r0
   b6550:	b089      	sub	sp, #36	; 0x24
    cache.expire();
   b6552:	482d      	ldr	r0, [pc, #180]	; (b6608 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b6554:	f7ff ff37 	bl	b63c6 <_ZN12mDNSResolver5Cache6expireEv>

    if(!init) {
   b6558:	f895 4068 	ldrb.w	r4, [r5, #104]	; 0x68
      init = true;
	  Serial.println("Begin Multicast");
	  udp.begin(5353);
   b655c:	1d2f      	adds	r7, r5, #4
    if(!init) {
   b655e:	bb54      	cbnz	r4, b65b6 <_ZN12mDNSResolver8Resolver4readEv+0x6a>
      init = true;
   b6560:	2301      	movs	r3, #1
   b6562:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	  Serial.println("Begin Multicast");
   b6566:	f003 fa63 	bl	b9a30 <_Z16_fetch_usbserialv>
   b656a:	4928      	ldr	r1, [pc, #160]	; (b660c <_ZN12mDNSResolver8Resolver4readEv+0xc0>)
   b656c:	f002 fcc5 	bl	b8efa <_ZN5Print7printlnEPKc>
	  udp.begin(5353);
   b6570:	4622      	mov	r2, r4
   b6572:	f241 41e9 	movw	r1, #5353	; 0x14e9
   b6576:	4638      	mov	r0, r7
   b6578:	f000 fe16 	bl	b71a8 <_ZN3UDP5beginEtm>
      Serial.println(udp.joinMulticast(MDNS_BROADCAST_IP));	  //Peet
   b657c:	f003 fa58 	bl	b9a30 <_Z16_fetch_usbserialv>
   b6580:	23fb      	movs	r3, #251	; 0xfb
   b6582:	4622      	mov	r2, r4
   b6584:	9300      	str	r3, [sp, #0]
   b6586:	21e0      	movs	r1, #224	; 0xe0
   b6588:	4623      	mov	r3, r4
   b658a:	4606      	mov	r6, r0
   b658c:	a802      	add	r0, sp, #8
   b658e:	f003 f9d9 	bl	b9944 <_ZN9IPAddressC1Ehhhh>
   b6592:	a902      	add	r1, sp, #8
   b6594:	4638      	mov	r0, r7
   b6596:	f001 f8e5 	bl	b7764 <_ZN3UDP13joinMulticastERK9IPAddress>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b659a:	1e04      	subs	r4, r0, #0
   b659c:	da1d      	bge.n	b65da <_ZN12mDNSResolver8Resolver4readEv+0x8e>
            t = print('-');
   b659e:	212d      	movs	r1, #45	; 0x2d
   b65a0:	4630      	mov	r0, r6
   b65a2:	f002 fc9b 	bl	b8edc <_ZN5Print5printEc>
            val = -n;
   b65a6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b65a8:	220a      	movs	r2, #10
   b65aa:	4630      	mov	r0, r6
   b65ac:	f002 fcaf 	bl	b8f0e <_ZN5Print11printNumberEmh>
        n += println();
   b65b0:	4630      	mov	r0, r6
   b65b2:	f002 fc96 	bl	b8ee2 <_ZN5Print7printlnEv>
    }

    unsigned int len = udp.parsePacket();
   b65b6:	2100      	movs	r1, #0
   b65b8:	4638      	mov	r0, r7
   b65ba:	f001 f896 	bl	b76ea <_ZN3UDP11parsePacketEm>

    if(len > 0) {
   b65be:	4606      	mov	r6, r0
   b65c0:	b300      	cbz	r0, b6604 <_ZN12mDNSResolver8Resolver4readEv+0xb8>
      unsigned char *buffer = (unsigned char *)malloc(sizeof(unsigned char) * len);
   b65c2:	f000 fc2b 	bl	b6e1c <malloc>

      if(buffer == NULL) {
   b65c6:	4604      	mov	r4, r0
   b65c8:	b948      	cbnz	r0, b65de <_ZN12mDNSResolver8Resolver4readEv+0x92>
        // Out of memory - the packet is probably too big to parse. Probably.
        // Silently bombing out, possibly isn't great, but it'll do for the moment.
		Serial.println("Out of memory");
   b65ca:	f003 fa31 	bl	b9a30 <_Z16_fetch_usbserialv>
   b65ce:	4910      	ldr	r1, [pc, #64]	; (b6610 <_ZN12mDNSResolver8Resolver4readEv+0xc4>)
   b65d0:	f002 fc93 	bl	b8efa <_ZN5Print7printlnEPKc>
        return E_MDNS_OUT_OF_MEMORY;
   b65d4:	2027      	movs	r0, #39	; 0x27
      return lastResult;
    }
	// Serial.println("Read return 2");
	// init = false;
    return E_MDNS_OK;
  }
   b65d6:	b009      	add	sp, #36	; 0x24
   b65d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b65da:	4621      	mov	r1, r4
   b65dc:	e7e4      	b.n	b65a8 <_ZN12mDNSResolver8Resolver4readEv+0x5c>
      udp.read(buffer, len);
   b65de:	4601      	mov	r1, r0
   b65e0:	4632      	mov	r2, r6
   b65e2:	4638      	mov	r0, r7
   b65e4:	f000 fe4f 	bl	b7286 <_ZN3UDP4readEPhj>
	  udp.flush();
   b65e8:	4638      	mov	r0, r7
   b65ea:	f000 fdcb 	bl	b7184 <_ZN3UDP5flushEv>
      lastResult = Answer::process(buffer, len, cache);
   b65ee:	4a06      	ldr	r2, [pc, #24]	; (b6608 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b65f0:	4631      	mov	r1, r6
   b65f2:	4620      	mov	r0, r4
   b65f4:	f7ff fdeb 	bl	b61ce <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>
   b65f8:	6028      	str	r0, [r5, #0]
      free(buffer);
   b65fa:	4620      	mov	r0, r4
   b65fc:	f000 fc16 	bl	b6e2c <free>
      return lastResult;
   b6600:	6828      	ldr	r0, [r5, #0]
   b6602:	e7e8      	b.n	b65d6 <_ZN12mDNSResolver8Resolver4readEv+0x8a>
    return E_MDNS_OK;
   b6604:	2020      	movs	r0, #32
   b6606:	e7e6      	b.n	b65d6 <_ZN12mDNSResolver8Resolver4readEv+0x8a>
   b6608:	2003e1e0 	.word	0x2003e1e0
   b660c:	000bd957 	.word	0x000bd957
   b6610:	000bd967 	.word	0x000bd967

000b6614 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>:

  bool Resolver::isMDNSName(const char* name) {
   b6614:	b510      	push	{r4, lr}
    int len = strlen(name);
   b6616:	4608      	mov	r0, r1
  bool Resolver::isMDNSName(const char* name) {
   b6618:	460c      	mov	r4, r1
    int len = strlen(name);
   b661a:	f004 fe34 	bl	bb286 <strlen>
    int tldLen = strlen(MDNS_TLD);
	
	// Serial.println("LOll");
    if(len < tldLen) {
   b661e:	2805      	cmp	r0, #5
   b6620:	d908      	bls.n	b6634 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x20>
      return false;
    }
	// Serial.println("LOLO");
    return strcmp(name + len - tldLen, MDNS_TLD) == 0;
   b6622:	3806      	subs	r0, #6
   b6624:	4904      	ldr	r1, [pc, #16]	; (b6638 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x24>)
   b6626:	4420      	add	r0, r4
   b6628:	f004 fdfd 	bl	bb226 <strcmp>
   b662c:	fab0 f080 	clz	r0, r0
   b6630:	0940      	lsrs	r0, r0, #5
  }
   b6632:	bd10      	pop	{r4, pc}
      return false;
   b6634:	2000      	movs	r0, #0
   b6636:	e7fc      	b.n	b6632 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x1e>
   b6638:	000bd5a8 	.word	0x000bd5a8

000b663c <_ZN12mDNSResolver8Resolver6searchEPKc>:
  IPAddress Resolver::search(const char* name) {
   b663c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6640:	460c      	mov	r4, r1
   b6642:	b0cd      	sub	sp, #308	; 0x134
   b6644:	4606      	mov	r6, r0
    if(!isMDNSName(name)) {
   b6646:	4611      	mov	r1, r2
   b6648:	4620      	mov	r0, r4
  IPAddress Resolver::search(const char* name) {
   b664a:	4615      	mov	r5, r2
    if(!isMDNSName(name)) {
   b664c:	f7ff ffe2 	bl	b6614 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>
   b6650:	b950      	cbnz	r0, b6668 <_ZN12mDNSResolver8Resolver6searchEPKc+0x2c>
	Serial.println("not valid");
   b6652:	f003 f9ed 	bl	b9a30 <_Z16_fetch_usbserialv>
   b6656:	4938      	ldr	r1, [pc, #224]	; (b6738 <_ZN12mDNSResolver8Resolver6searchEPKc+0xfc>)
   b6658:	f002 fc4f 	bl	b8efa <_ZN5Print7printlnEPKc>
    return INADDR_NONE;
   b665c:	f04f 31ff 	mov.w	r1, #4294967295
   b6660:	4630      	mov	r0, r6
   b6662:	f003 f943 	bl	b98ec <_ZN9IPAddressC1Em>
   b6666:	e04d      	b.n	b6704 <_ZN12mDNSResolver8Resolver6searchEPKc+0xc8>
    cache.expire();
   b6668:	4834      	ldr	r0, [pc, #208]	; (b673c <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
      int index = cache.search(name);
   b666a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b673c <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>
    cache.expire();
   b666e:	f7ff feaa 	bl	b63c6 <_ZN12mDNSResolver5Cache6expireEv>
    int attempts = 0;
   b6672:	f04f 0800 	mov.w	r8, #0
      int index = cache.search(name);
   b6676:	4629      	mov	r1, r5
   b6678:	4648      	mov	r0, r9
   b667a:	f7ff fe15 	bl	b62a8 <_ZN12mDNSResolver5Cache6searchEPKc>
      if(index == -1) {
   b667e:	1c43      	adds	r3, r0, #1
      int index = cache.search(name);
   b6680:	4607      	mov	r7, r0
      if(index == -1) {
   b6682:	d11e      	bne.n	b66c2 <_ZN12mDNSResolver8Resolver6searchEPKc+0x86>
        cache.insert(Response(name, 5));			//ttl = 5
   b6684:	2205      	movs	r2, #5
   b6686:	4629      	mov	r1, r5
   b6688:	a803      	add	r0, sp, #12
   b668a:	f7ff fee7 	bl	b645c <_ZN12mDNSResolver8ResponseC1EPKcm>
   b668e:	4648      	mov	r0, r9
   b6690:	a903      	add	r1, sp, #12
   b6692:	f7ff fe6e 	bl	b6372 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b6696:	a803      	add	r0, sp, #12
   b6698:	f7ff fefe 	bl	b6498 <_ZN12mDNSResolver8ResponseD1Ev>
    while(attempts < MDNS_ATTEMPTS) {
   b669c:	f1b8 0f05 	cmp.w	r8, #5
   b66a0:	d1e9      	bne.n	b6676 <_ZN12mDNSResolver8Resolver6searchEPKc+0x3a>
	udp.leaveMulticast(MDNS_BROADCAST_IP);
   b66a2:	23fb      	movs	r3, #251	; 0xfb
   b66a4:	9300      	str	r3, [sp, #0]
   b66a6:	2300      	movs	r3, #0
   b66a8:	461a      	mov	r2, r3
   b66aa:	21e0      	movs	r1, #224	; 0xe0
   b66ac:	a803      	add	r0, sp, #12
   b66ae:	f003 f949 	bl	b9944 <_ZN9IPAddressC1Ehhhh>
   b66b2:	a903      	add	r1, sp, #12
   b66b4:	1d20      	adds	r0, r4, #4
   b66b6:	f001 f866 	bl	b7786 <_ZN3UDP14leaveMulticastERK9IPAddress>
	init = false;
   b66ba:	2300      	movs	r3, #0
   b66bc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b66c0:	e7cc      	b.n	b665c <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
      } else if(cache[index].resolved) {
   b66c2:	4601      	mov	r1, r0
   b66c4:	4648      	mov	r0, r9
   b66c6:	f7ff fdea 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b66ca:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   b66ce:	b1eb      	cbz	r3, b670c <_ZN12mDNSResolver8Resolver6searchEPKc+0xd0>
		  udp.leaveMulticast(MDNS_BROADCAST_IP);
   b66d0:	23fb      	movs	r3, #251	; 0xfb
   b66d2:	9300      	str	r3, [sp, #0]
   b66d4:	2300      	movs	r3, #0
   b66d6:	461a      	mov	r2, r3
   b66d8:	21e0      	movs	r1, #224	; 0xe0
   b66da:	a803      	add	r0, sp, #12
   b66dc:	f003 f932 	bl	b9944 <_ZN9IPAddressC1Ehhhh>
   b66e0:	a903      	add	r1, sp, #12
   b66e2:	1d20      	adds	r0, r4, #4
   b66e4:	f001 f84f 	bl	b7786 <_ZN3UDP14leaveMulticastERK9IPAddress>
        return cache[index].ipAddress;
   b66e8:	4639      	mov	r1, r7
   b66ea:	4814      	ldr	r0, [pc, #80]	; (b673c <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
   b66ec:	f7ff fdd7 	bl	b629e <_ZN12mDNSResolver5CacheixEi>
   b66f0:	4634      	mov	r4, r6
   b66f2:	4b13      	ldr	r3, [pc, #76]	; (b6740 <_ZN12mDNSResolver8Resolver6searchEPKc+0x104>)
   b66f4:	f844 3b04 	str.w	r3, [r4], #4
   b66f8:	f500 7586 	add.w	r5, r0, #268	; 0x10c
   b66fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6700:	682b      	ldr	r3, [r5, #0]
   b6702:	7023      	strb	r3, [r4, #0]
  }
   b6704:	4630      	mov	r0, r6
   b6706:	b04d      	add	sp, #308	; 0x134
   b6708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b670c:	f000 f878 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
      if(now - timeout > MDNS_RETRY) {
   b6710:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b6712:	1ac3      	subs	r3, r0, r3
   b6714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b6718:	4607      	mov	r7, r0
   b671a:	dd06      	ble.n	b672a <_ZN12mDNSResolver8Resolver6searchEPKc+0xee>
        query(name);
   b671c:	4629      	mov	r1, r5
   b671e:	4620      	mov	r0, r4
   b6720:	f7ff fef2 	bl	b6508 <_ZN12mDNSResolver8Resolver5queryEPKc>
        attempts++;
   b6724:	f108 0801 	add.w	r8, r8, #1
        timeout = now;
   b6728:	66e7      	str	r7, [r4, #108]	; 0x6c
      MDNS_RESULT result = read();
   b672a:	4620      	mov	r0, r4
   b672c:	f7ff ff0e 	bl	b654c <_ZN12mDNSResolver8Resolver4readEv>
      if(result != E_MDNS_OK) {
   b6730:	2820      	cmp	r0, #32
   b6732:	d0b3      	beq.n	b669c <_ZN12mDNSResolver8Resolver6searchEPKc+0x60>
   b6734:	e792      	b.n	b665c <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
   b6736:	bf00      	nop
   b6738:	000bd975 	.word	0x000bd975
   b673c:	2003e1e0 	.word	0x2003e1e0
   b6740:	000bdc68 	.word	0x000bdc68

000b6744 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b6744:	4801      	ldr	r0, [pc, #4]	; (b674c <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b6746:	f7ff bd99 	b.w	b627c <_ZN12mDNSResolver5CacheC1Ev>
   b674a:	bf00      	nop
   b674c:	2003e1e0 	.word	0x2003e1e0

000b6750 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6750:	b508      	push	{r3, lr}
   b6752:	4b02      	ldr	r3, [pc, #8]	; (b675c <netdb_freeaddrinfo+0xc>)
   b6754:	681b      	ldr	r3, [r3, #0]
   b6756:	689b      	ldr	r3, [r3, #8]
   b6758:	9301      	str	r3, [sp, #4]
   b675a:	bd08      	pop	{r3, pc}
   b675c:	00030268 	.word	0x00030268

000b6760 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6760:	b508      	push	{r3, lr}
   b6762:	4b02      	ldr	r3, [pc, #8]	; (b676c <netdb_getaddrinfo+0xc>)
   b6764:	681b      	ldr	r3, [r3, #0]
   b6766:	68db      	ldr	r3, [r3, #12]
   b6768:	9301      	str	r3, [sp, #4]
   b676a:	bd08      	pop	{r3, pc}
   b676c:	00030268 	.word	0x00030268

000b6770 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6770:	b508      	push	{r3, lr}
   b6772:	4b02      	ldr	r3, [pc, #8]	; (b677c <HAL_Pin_Mode+0xc>)
   b6774:	681b      	ldr	r3, [r3, #0]
   b6776:	689b      	ldr	r3, [r3, #8]
   b6778:	9301      	str	r3, [sp, #4]
   b677a:	bd08      	pop	{r3, pc}
   b677c:	0003022c 	.word	0x0003022c

000b6780 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b6780:	b508      	push	{r3, lr}
   b6782:	4b02      	ldr	r3, [pc, #8]	; (b678c <HAL_Interrupts_Attach+0xc>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	699b      	ldr	r3, [r3, #24]
   b6788:	9301      	str	r3, [sp, #4]
   b678a:	bd08      	pop	{r3, pc}
   b678c:	0003022c 	.word	0x0003022c

000b6790 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b02      	ldr	r3, [pc, #8]	; (b679c <HAL_Interrupts_Detach+0xc>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	69db      	ldr	r3, [r3, #28]
   b6798:	9301      	str	r3, [sp, #4]
   b679a:	bd08      	pop	{r3, pc}
   b679c:	0003022c 	.word	0x0003022c

000b67a0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b67a0:	b508      	push	{r3, lr}
   b67a2:	4b02      	ldr	r3, [pc, #8]	; (b67ac <if_index_to_name+0xc>)
   b67a4:	681b      	ldr	r3, [r3, #0]
   b67a6:	695b      	ldr	r3, [r3, #20]
   b67a8:	9301      	str	r3, [sp, #4]
   b67aa:	bd08      	pop	{r3, pc}
   b67ac:	0003026c 	.word	0x0003026c

000b67b0 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   b67b0:	b508      	push	{r3, lr}
   b67b2:	4b02      	ldr	r3, [pc, #8]	; (b67bc <if_get_by_index+0xc>)
   b67b4:	681b      	ldr	r3, [r3, #0]
   b67b6:	699b      	ldr	r3, [r3, #24]
   b67b8:	9301      	str	r3, [sp, #4]
   b67ba:	bd08      	pop	{r3, pc}
   b67bc:	0003026c 	.word	0x0003026c

000b67c0 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   b67c0:	b508      	push	{r3, lr}
   b67c2:	4b02      	ldr	r3, [pc, #8]	; (b67cc <if_get_addrs+0xc>)
   b67c4:	681b      	ldr	r3, [r3, #0]
   b67c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b67c8:	9301      	str	r3, [sp, #4]
   b67ca:	bd08      	pop	{r3, pc}
   b67cc:	0003026c 	.word	0x0003026c

000b67d0 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   b67d0:	b508      	push	{r3, lr}
   b67d2:	4b02      	ldr	r3, [pc, #8]	; (b67dc <if_free_if_addrs+0xc>)
   b67d4:	681b      	ldr	r3, [r3, #0]
   b67d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b67d8:	9301      	str	r3, [sp, #4]
   b67da:	bd08      	pop	{r3, pc}
   b67dc:	0003026c 	.word	0x0003026c

000b67e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b67e0:	b508      	push	{r3, lr}
   b67e2:	4b02      	ldr	r3, [pc, #8]	; (b67ec <HAL_RNG_GetRandomNumber+0xc>)
   b67e4:	681b      	ldr	r3, [r3, #0]
   b67e6:	685b      	ldr	r3, [r3, #4]
   b67e8:	9301      	str	r3, [sp, #4]
   b67ea:	bd08      	pop	{r3, pc}
   b67ec:	00030218 	.word	0x00030218

000b67f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b67f0:	b508      	push	{r3, lr}
   b67f2:	4b02      	ldr	r3, [pc, #8]	; (b67fc <HAL_Delay_Microseconds+0xc>)
   b67f4:	681b      	ldr	r3, [r3, #0]
   b67f6:	68db      	ldr	r3, [r3, #12]
   b67f8:	9301      	str	r3, [sp, #4]
   b67fa:	bd08      	pop	{r3, pc}
   b67fc:	00030218 	.word	0x00030218

000b6800 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6800:	b508      	push	{r3, lr}
   b6802:	4b02      	ldr	r3, [pc, #8]	; (b680c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6804:	681b      	ldr	r3, [r3, #0]
   b6806:	695b      	ldr	r3, [r3, #20]
   b6808:	9301      	str	r3, [sp, #4]
   b680a:	bd08      	pop	{r3, pc}
   b680c:	00030218 	.word	0x00030218

000b6810 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6810:	b508      	push	{r3, lr}
   b6812:	4b02      	ldr	r3, [pc, #8]	; (b681c <hal_rtc_time_is_valid+0xc>)
   b6814:	681b      	ldr	r3, [r3, #0]
   b6816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6818:	9301      	str	r3, [sp, #4]
   b681a:	bd08      	pop	{r3, pc}
   b681c:	00030218 	.word	0x00030218

000b6820 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6820:	b508      	push	{r3, lr}
   b6822:	4b02      	ldr	r3, [pc, #8]	; (b682c <hal_rtc_get_time+0xc>)
   b6824:	681b      	ldr	r3, [r3, #0]
   b6826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6828:	9301      	str	r3, [sp, #4]
   b682a:	bd08      	pop	{r3, pc}
   b682c:	00030218 	.word	0x00030218

000b6830 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b6830:	b508      	push	{r3, lr}
   b6832:	4b02      	ldr	r3, [pc, #8]	; (b683c <HAL_Core_Runtime_Info+0xc>)
   b6834:	681b      	ldr	r3, [r3, #0]
   b6836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6838:	9301      	str	r3, [sp, #4]
   b683a:	bd08      	pop	{r3, pc}
   b683c:	00030234 	.word	0x00030234

000b6840 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6840:	b508      	push	{r3, lr}
   b6842:	4b02      	ldr	r3, [pc, #8]	; (b684c <hal_ble_stack_init+0xc>)
   b6844:	681b      	ldr	r3, [r3, #0]
   b6846:	689b      	ldr	r3, [r3, #8]
   b6848:	9301      	str	r3, [sp, #4]
   b684a:	bd08      	pop	{r3, pc}
   b684c:	00030278 	.word	0x00030278

000b6850 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6850:	b508      	push	{r3, lr}
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <hal_ble_gap_set_advertising_data+0xc>)
   b6854:	681b      	ldr	r3, [r3, #0]
   b6856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6858:	9301      	str	r3, [sp, #4]
   b685a:	bd08      	pop	{r3, pc}
   b685c:	00030278 	.word	0x00030278

000b6860 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6860:	b508      	push	{r3, lr}
   b6862:	4b02      	ldr	r3, [pc, #8]	; (b686c <hal_ble_gap_set_scan_response_data+0xc>)
   b6864:	681b      	ldr	r3, [r3, #0]
   b6866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6868:	9301      	str	r3, [sp, #4]
   b686a:	bd08      	pop	{r3, pc}
   b686c:	00030278 	.word	0x00030278

000b6870 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b6870:	b508      	push	{r3, lr}
   b6872:	4b02      	ldr	r3, [pc, #8]	; (b687c <hal_ble_gap_start_advertising+0xc>)
   b6874:	681b      	ldr	r3, [r3, #0]
   b6876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6878:	9301      	str	r3, [sp, #4]
   b687a:	bd08      	pop	{r3, pc}
   b687c:	00030278 	.word	0x00030278

000b6880 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6880:	b508      	push	{r3, lr}
   b6882:	4b03      	ldr	r3, [pc, #12]	; (b6890 <hal_ble_gap_disconnect+0x10>)
   b6884:	681b      	ldr	r3, [r3, #0]
   b6886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b688a:	9301      	str	r3, [sp, #4]
   b688c:	bd08      	pop	{r3, pc}
   b688e:	0000      	.short	0x0000
   b6890:	00030278 	.word	0x00030278

000b6894 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6894:	b508      	push	{r3, lr}
   b6896:	4b03      	ldr	r3, [pc, #12]	; (b68a4 <hal_ble_gatt_server_add_service+0x10>)
   b6898:	681b      	ldr	r3, [r3, #0]
   b689a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b689e:	9301      	str	r3, [sp, #4]
   b68a0:	bd08      	pop	{r3, pc}
   b68a2:	0000      	.short	0x0000
   b68a4:	00030278 	.word	0x00030278

000b68a8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b68a8:	b508      	push	{r3, lr}
   b68aa:	4b03      	ldr	r3, [pc, #12]	; (b68b8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b68ac:	681b      	ldr	r3, [r3, #0]
   b68ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b68b2:	9301      	str	r3, [sp, #4]
   b68b4:	bd08      	pop	{r3, pc}
   b68b6:	0000      	.short	0x0000
   b68b8:	00030278 	.word	0x00030278

000b68bc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b68bc:	b508      	push	{r3, lr}
   b68be:	4b03      	ldr	r3, [pc, #12]	; (b68cc <hal_ble_gatt_client_write_with_response+0x10>)
   b68c0:	681b      	ldr	r3, [r3, #0]
   b68c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b68c6:	9301      	str	r3, [sp, #4]
   b68c8:	bd08      	pop	{r3, pc}
   b68ca:	0000      	.short	0x0000
   b68cc:	00030278 	.word	0x00030278

000b68d0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b68d0:	b508      	push	{r3, lr}
   b68d2:	4b03      	ldr	r3, [pc, #12]	; (b68e0 <hal_ble_gatt_client_write_without_response+0x10>)
   b68d4:	681b      	ldr	r3, [r3, #0]
   b68d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b68da:	9301      	str	r3, [sp, #4]
   b68dc:	bd08      	pop	{r3, pc}
   b68de:	0000      	.short	0x0000
   b68e0:	00030278 	.word	0x00030278

000b68e4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b68e4:	b508      	push	{r3, lr}
   b68e6:	4b03      	ldr	r3, [pc, #12]	; (b68f4 <hal_ble_gatt_server_add_characteristic+0x10>)
   b68e8:	681b      	ldr	r3, [r3, #0]
   b68ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b68ee:	9301      	str	r3, [sp, #4]
   b68f0:	bd08      	pop	{r3, pc}
   b68f2:	0000      	.short	0x0000
   b68f4:	00030278 	.word	0x00030278

000b68f8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b68f8:	b508      	push	{r3, lr}
   b68fa:	4b03      	ldr	r3, [pc, #12]	; (b6908 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b68fc:	681b      	ldr	r3, [r3, #0]
   b68fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6902:	9301      	str	r3, [sp, #4]
   b6904:	bd08      	pop	{r3, pc}
   b6906:	0000      	.short	0x0000
   b6908:	00030278 	.word	0x00030278

000b690c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b690c:	b508      	push	{r3, lr}
   b690e:	4b03      	ldr	r3, [pc, #12]	; (b691c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6916:	9301      	str	r3, [sp, #4]
   b6918:	bd08      	pop	{r3, pc}
   b691a:	0000      	.short	0x0000
   b691c:	00030278 	.word	0x00030278

000b6920 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b03      	ldr	r3, [pc, #12]	; (b6930 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b692a:	9301      	str	r3, [sp, #4]
   b692c:	bd08      	pop	{r3, pc}
   b692e:	0000      	.short	0x0000
   b6930:	00030278 	.word	0x00030278

000b6934 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6934:	b508      	push	{r3, lr}
   b6936:	4b02      	ldr	r3, [pc, #8]	; (b6940 <os_thread_yield+0xc>)
   b6938:	681b      	ldr	r3, [r3, #0]
   b693a:	68db      	ldr	r3, [r3, #12]
   b693c:	9301      	str	r3, [sp, #4]
   b693e:	bd08      	pop	{r3, pc}
   b6940:	00030248 	.word	0x00030248

000b6944 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6944:	b508      	push	{r3, lr}
   b6946:	4b02      	ldr	r3, [pc, #8]	; (b6950 <os_thread_scheduling+0xc>)
   b6948:	681b      	ldr	r3, [r3, #0]
   b694a:	69db      	ldr	r3, [r3, #28]
   b694c:	9301      	str	r3, [sp, #4]
   b694e:	bd08      	pop	{r3, pc}
   b6950:	00030248 	.word	0x00030248

000b6954 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b6954:	b508      	push	{r3, lr}
   b6956:	4b02      	ldr	r3, [pc, #8]	; (b6960 <os_timer_create+0xc>)
   b6958:	681b      	ldr	r3, [r3, #0]
   b695a:	6a1b      	ldr	r3, [r3, #32]
   b695c:	9301      	str	r3, [sp, #4]
   b695e:	bd08      	pop	{r3, pc}
   b6960:	00030248 	.word	0x00030248

000b6964 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6964:	b508      	push	{r3, lr}
   b6966:	4b02      	ldr	r3, [pc, #8]	; (b6970 <os_timer_destroy+0xc>)
   b6968:	681b      	ldr	r3, [r3, #0]
   b696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b696c:	9301      	str	r3, [sp, #4]
   b696e:	bd08      	pop	{r3, pc}
   b6970:	00030248 	.word	0x00030248

000b6974 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6974:	b508      	push	{r3, lr}
   b6976:	4b02      	ldr	r3, [pc, #8]	; (b6980 <os_timer_get_id+0xc>)
   b6978:	681b      	ldr	r3, [r3, #0]
   b697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b697c:	9301      	str	r3, [sp, #4]
   b697e:	bd08      	pop	{r3, pc}
   b6980:	00030248 	.word	0x00030248

000b6984 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6984:	b508      	push	{r3, lr}
   b6986:	4b02      	ldr	r3, [pc, #8]	; (b6990 <os_timer_change+0xc>)
   b6988:	681b      	ldr	r3, [r3, #0]
   b698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b698c:	9301      	str	r3, [sp, #4]
   b698e:	bd08      	pop	{r3, pc}
   b6990:	00030248 	.word	0x00030248

000b6994 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6994:	b508      	push	{r3, lr}
   b6996:	4b02      	ldr	r3, [pc, #8]	; (b69a0 <os_mutex_create+0xc>)
   b6998:	681b      	ldr	r3, [r3, #0]
   b699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b699c:	9301      	str	r3, [sp, #4]
   b699e:	bd08      	pop	{r3, pc}
   b69a0:	00030248 	.word	0x00030248

000b69a4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b69a4:	b508      	push	{r3, lr}
   b69a6:	4b02      	ldr	r3, [pc, #8]	; (b69b0 <os_mutex_lock+0xc>)
   b69a8:	681b      	ldr	r3, [r3, #0]
   b69aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b69ac:	9301      	str	r3, [sp, #4]
   b69ae:	bd08      	pop	{r3, pc}
   b69b0:	00030248 	.word	0x00030248

000b69b4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b69b4:	b508      	push	{r3, lr}
   b69b6:	4b02      	ldr	r3, [pc, #8]	; (b69c0 <os_mutex_unlock+0xc>)
   b69b8:	681b      	ldr	r3, [r3, #0]
   b69ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69bc:	9301      	str	r3, [sp, #4]
   b69be:	bd08      	pop	{r3, pc}
   b69c0:	00030248 	.word	0x00030248

000b69c4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b69c4:	b508      	push	{r3, lr}
   b69c6:	4b02      	ldr	r3, [pc, #8]	; (b69d0 <os_mutex_recursive_create+0xc>)
   b69c8:	681b      	ldr	r3, [r3, #0]
   b69ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b69cc:	9301      	str	r3, [sp, #4]
   b69ce:	bd08      	pop	{r3, pc}
   b69d0:	00030248 	.word	0x00030248

000b69d4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b69d4:	b508      	push	{r3, lr}
   b69d6:	4b02      	ldr	r3, [pc, #8]	; (b69e0 <os_mutex_recursive_lock+0xc>)
   b69d8:	681b      	ldr	r3, [r3, #0]
   b69da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b69dc:	9301      	str	r3, [sp, #4]
   b69de:	bd08      	pop	{r3, pc}
   b69e0:	00030248 	.word	0x00030248

000b69e4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b69e4:	b508      	push	{r3, lr}
   b69e6:	4b02      	ldr	r3, [pc, #8]	; (b69f0 <os_mutex_recursive_unlock+0xc>)
   b69e8:	681b      	ldr	r3, [r3, #0]
   b69ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b69ec:	9301      	str	r3, [sp, #4]
   b69ee:	bd08      	pop	{r3, pc}
   b69f0:	00030248 	.word	0x00030248

000b69f4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b69f4:	b508      	push	{r3, lr}
   b69f6:	4b02      	ldr	r3, [pc, #8]	; (b6a00 <os_timer_set_id+0xc>)
   b69f8:	681b      	ldr	r3, [r3, #0]
   b69fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b69fc:	9301      	str	r3, [sp, #4]
   b69fe:	bd08      	pop	{r3, pc}
   b6a00:	00030248 	.word	0x00030248

000b6a04 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6a04:	b508      	push	{r3, lr}
   b6a06:	4b02      	ldr	r3, [pc, #8]	; (b6a10 <inet_inet_ntop+0xc>)
   b6a08:	681b      	ldr	r3, [r3, #0]
   b6a0a:	695b      	ldr	r3, [r3, #20]
   b6a0c:	9301      	str	r3, [sp, #4]
   b6a0e:	bd08      	pop	{r3, pc}
   b6a10:	00030264 	.word	0x00030264

000b6a14 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6a14:	b508      	push	{r3, lr}
   b6a16:	4b02      	ldr	r3, [pc, #8]	; (b6a20 <inet_htonl+0xc>)
   b6a18:	681b      	ldr	r3, [r3, #0]
   b6a1a:	6a1b      	ldr	r3, [r3, #32]
   b6a1c:	9301      	str	r3, [sp, #4]
   b6a1e:	bd08      	pop	{r3, pc}
   b6a20:	00030264 	.word	0x00030264

000b6a24 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b6a24:	b508      	push	{r3, lr}
   b6a26:	4b02      	ldr	r3, [pc, #8]	; (b6a30 <inet_ntohs+0xc>)
   b6a28:	681b      	ldr	r3, [r3, #0]
   b6a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a2c:	9301      	str	r3, [sp, #4]
   b6a2e:	bd08      	pop	{r3, pc}
   b6a30:	00030264 	.word	0x00030264

000b6a34 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6a34:	b508      	push	{r3, lr}
   b6a36:	4b02      	ldr	r3, [pc, #8]	; (b6a40 <inet_htons+0xc>)
   b6a38:	681b      	ldr	r3, [r3, #0]
   b6a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a3c:	9301      	str	r3, [sp, #4]
   b6a3e:	bd08      	pop	{r3, pc}
   b6a40:	00030264 	.word	0x00030264

000b6a44 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6a44:	b508      	push	{r3, lr}
   b6a46:	4b02      	ldr	r3, [pc, #8]	; (b6a50 <hal_usart_write+0xc>)
   b6a48:	681b      	ldr	r3, [r3, #0]
   b6a4a:	68db      	ldr	r3, [r3, #12]
   b6a4c:	9301      	str	r3, [sp, #4]
   b6a4e:	bd08      	pop	{r3, pc}
   b6a50:	0003023c 	.word	0x0003023c

000b6a54 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6a54:	b508      	push	{r3, lr}
   b6a56:	4b02      	ldr	r3, [pc, #8]	; (b6a60 <hal_usart_available+0xc>)
   b6a58:	681b      	ldr	r3, [r3, #0]
   b6a5a:	691b      	ldr	r3, [r3, #16]
   b6a5c:	9301      	str	r3, [sp, #4]
   b6a5e:	bd08      	pop	{r3, pc}
   b6a60:	0003023c 	.word	0x0003023c

000b6a64 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6a64:	b508      	push	{r3, lr}
   b6a66:	4b02      	ldr	r3, [pc, #8]	; (b6a70 <hal_usart_read+0xc>)
   b6a68:	681b      	ldr	r3, [r3, #0]
   b6a6a:	695b      	ldr	r3, [r3, #20]
   b6a6c:	9301      	str	r3, [sp, #4]
   b6a6e:	bd08      	pop	{r3, pc}
   b6a70:	0003023c 	.word	0x0003023c

000b6a74 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6a74:	b508      	push	{r3, lr}
   b6a76:	4b02      	ldr	r3, [pc, #8]	; (b6a80 <hal_usart_peek+0xc>)
   b6a78:	681b      	ldr	r3, [r3, #0]
   b6a7a:	699b      	ldr	r3, [r3, #24]
   b6a7c:	9301      	str	r3, [sp, #4]
   b6a7e:	bd08      	pop	{r3, pc}
   b6a80:	0003023c 	.word	0x0003023c

000b6a84 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6a84:	b508      	push	{r3, lr}
   b6a86:	4b02      	ldr	r3, [pc, #8]	; (b6a90 <hal_usart_flush+0xc>)
   b6a88:	681b      	ldr	r3, [r3, #0]
   b6a8a:	69db      	ldr	r3, [r3, #28]
   b6a8c:	9301      	str	r3, [sp, #4]
   b6a8e:	bd08      	pop	{r3, pc}
   b6a90:	0003023c 	.word	0x0003023c

000b6a94 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6a94:	b508      	push	{r3, lr}
   b6a96:	4b02      	ldr	r3, [pc, #8]	; (b6aa0 <hal_usart_is_enabled+0xc>)
   b6a98:	681b      	ldr	r3, [r3, #0]
   b6a9a:	6a1b      	ldr	r3, [r3, #32]
   b6a9c:	9301      	str	r3, [sp, #4]
   b6a9e:	bd08      	pop	{r3, pc}
   b6aa0:	0003023c 	.word	0x0003023c

000b6aa4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6aa4:	b508      	push	{r3, lr}
   b6aa6:	4b02      	ldr	r3, [pc, #8]	; (b6ab0 <hal_usart_available_data_for_write+0xc>)
   b6aa8:	681b      	ldr	r3, [r3, #0]
   b6aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6aac:	9301      	str	r3, [sp, #4]
   b6aae:	bd08      	pop	{r3, pc}
   b6ab0:	0003023c 	.word	0x0003023c

000b6ab4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6ab4:	b508      	push	{r3, lr}
   b6ab6:	4b02      	ldr	r3, [pc, #8]	; (b6ac0 <hal_usart_init_ex+0xc>)
   b6ab8:	681b      	ldr	r3, [r3, #0]
   b6aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6abc:	9301      	str	r3, [sp, #4]
   b6abe:	bd08      	pop	{r3, pc}
   b6ac0:	0003023c 	.word	0x0003023c

000b6ac4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6ac4:	b508      	push	{r3, lr}
   b6ac6:	4b02      	ldr	r3, [pc, #8]	; (b6ad0 <hal_i2c_write+0xc>)
   b6ac8:	681b      	ldr	r3, [r3, #0]
   b6aca:	6a1b      	ldr	r3, [r3, #32]
   b6acc:	9301      	str	r3, [sp, #4]
   b6ace:	bd08      	pop	{r3, pc}
   b6ad0:	00030228 	.word	0x00030228

000b6ad4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6ad4:	b508      	push	{r3, lr}
   b6ad6:	4b02      	ldr	r3, [pc, #8]	; (b6ae0 <hal_i2c_available+0xc>)
   b6ad8:	681b      	ldr	r3, [r3, #0]
   b6ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6adc:	9301      	str	r3, [sp, #4]
   b6ade:	bd08      	pop	{r3, pc}
   b6ae0:	00030228 	.word	0x00030228

000b6ae4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6ae4:	b508      	push	{r3, lr}
   b6ae6:	4b02      	ldr	r3, [pc, #8]	; (b6af0 <hal_i2c_read+0xc>)
   b6ae8:	681b      	ldr	r3, [r3, #0]
   b6aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6aec:	9301      	str	r3, [sp, #4]
   b6aee:	bd08      	pop	{r3, pc}
   b6af0:	00030228 	.word	0x00030228

000b6af4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6af4:	b508      	push	{r3, lr}
   b6af6:	4b02      	ldr	r3, [pc, #8]	; (b6b00 <hal_i2c_peek+0xc>)
   b6af8:	681b      	ldr	r3, [r3, #0]
   b6afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6afc:	9301      	str	r3, [sp, #4]
   b6afe:	bd08      	pop	{r3, pc}
   b6b00:	00030228 	.word	0x00030228

000b6b04 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6b04:	b508      	push	{r3, lr}
   b6b06:	4b02      	ldr	r3, [pc, #8]	; (b6b10 <hal_i2c_flush+0xc>)
   b6b08:	681b      	ldr	r3, [r3, #0]
   b6b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b0c:	9301      	str	r3, [sp, #4]
   b6b0e:	bd08      	pop	{r3, pc}
   b6b10:	00030228 	.word	0x00030228

000b6b14 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6b14:	b508      	push	{r3, lr}
   b6b16:	4b02      	ldr	r3, [pc, #8]	; (b6b20 <hal_i2c_is_enabled+0xc>)
   b6b18:	681b      	ldr	r3, [r3, #0]
   b6b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b1c:	9301      	str	r3, [sp, #4]
   b6b1e:	bd08      	pop	{r3, pc}
   b6b20:	00030228 	.word	0x00030228

000b6b24 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6b24:	b508      	push	{r3, lr}
   b6b26:	4b02      	ldr	r3, [pc, #8]	; (b6b30 <hal_i2c_init+0xc>)
   b6b28:	681b      	ldr	r3, [r3, #0]
   b6b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b2c:	9301      	str	r3, [sp, #4]
   b6b2e:	bd08      	pop	{r3, pc}
   b6b30:	00030228 	.word	0x00030228

000b6b34 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b6b34:	b508      	push	{r3, lr}
   b6b36:	4b02      	ldr	r3, [pc, #8]	; (b6b40 <sock_bind+0xc>)
   b6b38:	681b      	ldr	r3, [r3, #0]
   b6b3a:	685b      	ldr	r3, [r3, #4]
   b6b3c:	9301      	str	r3, [sp, #4]
   b6b3e:	bd08      	pop	{r3, pc}
   b6b40:	00030238 	.word	0x00030238

000b6b44 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6b44:	b508      	push	{r3, lr}
   b6b46:	4b02      	ldr	r3, [pc, #8]	; (b6b50 <sock_setsockopt+0xc>)
   b6b48:	681b      	ldr	r3, [r3, #0]
   b6b4a:	699b      	ldr	r3, [r3, #24]
   b6b4c:	9301      	str	r3, [sp, #4]
   b6b4e:	bd08      	pop	{r3, pc}
   b6b50:	00030238 	.word	0x00030238

000b6b54 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6b54:	b508      	push	{r3, lr}
   b6b56:	4b02      	ldr	r3, [pc, #8]	; (b6b60 <sock_close+0xc>)
   b6b58:	681b      	ldr	r3, [r3, #0]
   b6b5a:	69db      	ldr	r3, [r3, #28]
   b6b5c:	9301      	str	r3, [sp, #4]
   b6b5e:	bd08      	pop	{r3, pc}
   b6b60:	00030238 	.word	0x00030238

000b6b64 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6b64:	b508      	push	{r3, lr}
   b6b66:	4b02      	ldr	r3, [pc, #8]	; (b6b70 <sock_connect+0xc>)
   b6b68:	681b      	ldr	r3, [r3, #0]
   b6b6a:	6a1b      	ldr	r3, [r3, #32]
   b6b6c:	9301      	str	r3, [sp, #4]
   b6b6e:	bd08      	pop	{r3, pc}
   b6b70:	00030238 	.word	0x00030238

000b6b74 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6b74:	b508      	push	{r3, lr}
   b6b76:	4b02      	ldr	r3, [pc, #8]	; (b6b80 <sock_recv+0xc>)
   b6b78:	681b      	ldr	r3, [r3, #0]
   b6b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b7c:	9301      	str	r3, [sp, #4]
   b6b7e:	bd08      	pop	{r3, pc}
   b6b80:	00030238 	.word	0x00030238

000b6b84 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b6b84:	b508      	push	{r3, lr}
   b6b86:	4b02      	ldr	r3, [pc, #8]	; (b6b90 <sock_recvfrom+0xc>)
   b6b88:	681b      	ldr	r3, [r3, #0]
   b6b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b8c:	9301      	str	r3, [sp, #4]
   b6b8e:	bd08      	pop	{r3, pc}
   b6b90:	00030238 	.word	0x00030238

000b6b94 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6b94:	b508      	push	{r3, lr}
   b6b96:	4b02      	ldr	r3, [pc, #8]	; (b6ba0 <sock_send+0xc>)
   b6b98:	681b      	ldr	r3, [r3, #0]
   b6b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b9c:	9301      	str	r3, [sp, #4]
   b6b9e:	bd08      	pop	{r3, pc}
   b6ba0:	00030238 	.word	0x00030238

000b6ba4 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b6ba4:	b508      	push	{r3, lr}
   b6ba6:	4b02      	ldr	r3, [pc, #8]	; (b6bb0 <sock_sendto+0xc>)
   b6ba8:	681b      	ldr	r3, [r3, #0]
   b6baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6bac:	9301      	str	r3, [sp, #4]
   b6bae:	bd08      	pop	{r3, pc}
   b6bb0:	00030238 	.word	0x00030238

000b6bb4 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6bb4:	b508      	push	{r3, lr}
   b6bb6:	4b02      	ldr	r3, [pc, #8]	; (b6bc0 <sock_socket+0xc>)
   b6bb8:	681b      	ldr	r3, [r3, #0]
   b6bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6bbc:	9301      	str	r3, [sp, #4]
   b6bbe:	bd08      	pop	{r3, pc}
   b6bc0:	00030238 	.word	0x00030238

000b6bc4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6bc4:	b508      	push	{r3, lr}
   b6bc6:	4b02      	ldr	r3, [pc, #8]	; (b6bd0 <hal_spi_init+0xc>)
   b6bc8:	681b      	ldr	r3, [r3, #0]
   b6bca:	69db      	ldr	r3, [r3, #28]
   b6bcc:	9301      	str	r3, [sp, #4]
   b6bce:	bd08      	pop	{r3, pc}
   b6bd0:	00030230 	.word	0x00030230

000b6bd4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6bd4:	b508      	push	{r3, lr}
   b6bd6:	4b02      	ldr	r3, [pc, #8]	; (b6be0 <hal_spi_is_enabled+0xc>)
   b6bd8:	681b      	ldr	r3, [r3, #0]
   b6bda:	6a1b      	ldr	r3, [r3, #32]
   b6bdc:	9301      	str	r3, [sp, #4]
   b6bde:	bd08      	pop	{r3, pc}
   b6be0:	00030230 	.word	0x00030230

000b6be4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6be4:	b508      	push	{r3, lr}
   b6be6:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <HAL_USB_USART_Init+0xc>)
   b6be8:	681b      	ldr	r3, [r3, #0]
   b6bea:	681b      	ldr	r3, [r3, #0]
   b6bec:	9301      	str	r3, [sp, #4]
   b6bee:	bd08      	pop	{r3, pc}
   b6bf0:	0003024c 	.word	0x0003024c

000b6bf4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <HAL_USB_USART_Available_Data+0xc>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	691b      	ldr	r3, [r3, #16]
   b6bfc:	9301      	str	r3, [sp, #4]
   b6bfe:	bd08      	pop	{r3, pc}
   b6c00:	0003024c 	.word	0x0003024c

000b6c04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6c04:	b508      	push	{r3, lr}
   b6c06:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6c08:	681b      	ldr	r3, [r3, #0]
   b6c0a:	695b      	ldr	r3, [r3, #20]
   b6c0c:	9301      	str	r3, [sp, #4]
   b6c0e:	bd08      	pop	{r3, pc}
   b6c10:	0003024c 	.word	0x0003024c

000b6c14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c14:	b508      	push	{r3, lr}
   b6c16:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <HAL_USB_USART_Receive_Data+0xc>)
   b6c18:	681b      	ldr	r3, [r3, #0]
   b6c1a:	699b      	ldr	r3, [r3, #24]
   b6c1c:	9301      	str	r3, [sp, #4]
   b6c1e:	bd08      	pop	{r3, pc}
   b6c20:	0003024c 	.word	0x0003024c

000b6c24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <HAL_USB_USART_Send_Data+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	69db      	ldr	r3, [r3, #28]
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	0003024c 	.word	0x0003024c

000b6c34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b02      	ldr	r3, [pc, #8]	; (b6c40 <HAL_USB_USART_Flush_Data+0xc>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	6a1b      	ldr	r3, [r3, #32]
   b6c3c:	9301      	str	r3, [sp, #4]
   b6c3e:	bd08      	pop	{r3, pc}
   b6c40:	0003024c 	.word	0x0003024c

000b6c44 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6c44:	b508      	push	{r3, lr}
   b6c46:	4b02      	ldr	r3, [pc, #8]	; (b6c50 <panic_+0xc>)
   b6c48:	681b      	ldr	r3, [r3, #0]
   b6c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c4c:	9301      	str	r3, [sp, #4]
   b6c4e:	bd08      	pop	{r3, pc}
   b6c50:	00030260 	.word	0x00030260

000b6c54 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6c54:	b508      	push	{r3, lr}
   b6c56:	4b02      	ldr	r3, [pc, #8]	; (b6c60 <log_message+0xc>)
   b6c58:	681b      	ldr	r3, [r3, #0]
   b6c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6c5c:	9301      	str	r3, [sp, #4]
   b6c5e:	bd08      	pop	{r3, pc}
   b6c60:	00030260 	.word	0x00030260

000b6c64 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6c64:	b508      	push	{r3, lr}
   b6c66:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <system_mode+0xc>)
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	681b      	ldr	r3, [r3, #0]
   b6c6c:	9301      	str	r3, [sp, #4]
   b6c6e:	bd08      	pop	{r3, pc}
   b6c70:	00030220 	.word	0x00030220

000b6c74 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6c74:	b508      	push	{r3, lr}
   b6c76:	4b02      	ldr	r3, [pc, #8]	; (b6c80 <set_system_mode+0xc>)
   b6c78:	681b      	ldr	r3, [r3, #0]
   b6c7a:	685b      	ldr	r3, [r3, #4]
   b6c7c:	9301      	str	r3, [sp, #4]
   b6c7e:	bd08      	pop	{r3, pc}
   b6c80:	00030220 	.word	0x00030220

000b6c84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6c84:	b508      	push	{r3, lr}
   b6c86:	4b02      	ldr	r3, [pc, #8]	; (b6c90 <system_delay_ms+0xc>)
   b6c88:	681b      	ldr	r3, [r3, #0]
   b6c8a:	695b      	ldr	r3, [r3, #20]
   b6c8c:	9301      	str	r3, [sp, #4]
   b6c8e:	bd08      	pop	{r3, pc}
   b6c90:	00030220 	.word	0x00030220

000b6c94 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6c94:	b508      	push	{r3, lr}
   b6c96:	4b02      	ldr	r3, [pc, #8]	; (b6ca0 <system_thread_set_state+0xc>)
   b6c98:	681b      	ldr	r3, [r3, #0]
   b6c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c9c:	9301      	str	r3, [sp, #4]
   b6c9e:	bd08      	pop	{r3, pc}
   b6ca0:	00030220 	.word	0x00030220

000b6ca4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6ca4:	b508      	push	{r3, lr}
   b6ca6:	4b02      	ldr	r3, [pc, #8]	; (b6cb0 <application_thread_current+0xc>)
   b6ca8:	681b      	ldr	r3, [r3, #0]
   b6caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6cac:	9301      	str	r3, [sp, #4]
   b6cae:	bd08      	pop	{r3, pc}
   b6cb0:	00030220 	.word	0x00030220

000b6cb4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6cb4:	b508      	push	{r3, lr}
   b6cb6:	4b02      	ldr	r3, [pc, #8]	; (b6cc0 <application_thread_invoke+0xc>)
   b6cb8:	681b      	ldr	r3, [r3, #0]
   b6cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6cbc:	9301      	str	r3, [sp, #4]
   b6cbe:	bd08      	pop	{r3, pc}
   b6cc0:	00030220 	.word	0x00030220

000b6cc4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6cc4:	b508      	push	{r3, lr}
   b6cc6:	4b02      	ldr	r3, [pc, #8]	; (b6cd0 <system_thread_get_state+0xc>)
   b6cc8:	681b      	ldr	r3, [r3, #0]
   b6cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6ccc:	9301      	str	r3, [sp, #4]
   b6cce:	bd08      	pop	{r3, pc}
   b6cd0:	00030220 	.word	0x00030220

000b6cd4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6cd4:	b508      	push	{r3, lr}
   b6cd6:	4b03      	ldr	r3, [pc, #12]	; (b6ce4 <system_ctrl_set_app_request_handler+0x10>)
   b6cd8:	681b      	ldr	r3, [r3, #0]
   b6cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6cde:	9301      	str	r3, [sp, #4]
   b6ce0:	bd08      	pop	{r3, pc}
   b6ce2:	0000      	.short	0x0000
   b6ce4:	00030220 	.word	0x00030220

000b6ce8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6ce8:	b508      	push	{r3, lr}
   b6cea:	4b03      	ldr	r3, [pc, #12]	; (b6cf8 <system_ctrl_set_result+0x10>)
   b6cec:	681b      	ldr	r3, [r3, #0]
   b6cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6cf2:	9301      	str	r3, [sp, #4]
   b6cf4:	bd08      	pop	{r3, pc}
   b6cf6:	0000      	.short	0x0000
   b6cf8:	00030220 	.word	0x00030220

000b6cfc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6cfc:	b508      	push	{r3, lr}
   b6cfe:	4b02      	ldr	r3, [pc, #8]	; (b6d08 <network_connect+0xc>)
   b6d00:	681b      	ldr	r3, [r3, #0]
   b6d02:	685b      	ldr	r3, [r3, #4]
   b6d04:	9301      	str	r3, [sp, #4]
   b6d06:	bd08      	pop	{r3, pc}
   b6d08:	00030240 	.word	0x00030240

000b6d0c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6d0c:	b508      	push	{r3, lr}
   b6d0e:	4b02      	ldr	r3, [pc, #8]	; (b6d18 <network_connecting+0xc>)
   b6d10:	681b      	ldr	r3, [r3, #0]
   b6d12:	689b      	ldr	r3, [r3, #8]
   b6d14:	9301      	str	r3, [sp, #4]
   b6d16:	bd08      	pop	{r3, pc}
   b6d18:	00030240 	.word	0x00030240

000b6d1c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6d1c:	b508      	push	{r3, lr}
   b6d1e:	4b02      	ldr	r3, [pc, #8]	; (b6d28 <network_disconnect+0xc>)
   b6d20:	681b      	ldr	r3, [r3, #0]
   b6d22:	68db      	ldr	r3, [r3, #12]
   b6d24:	9301      	str	r3, [sp, #4]
   b6d26:	bd08      	pop	{r3, pc}
   b6d28:	00030240 	.word	0x00030240

000b6d2c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6d2c:	b508      	push	{r3, lr}
   b6d2e:	4b02      	ldr	r3, [pc, #8]	; (b6d38 <network_ready+0xc>)
   b6d30:	681b      	ldr	r3, [r3, #0]
   b6d32:	691b      	ldr	r3, [r3, #16]
   b6d34:	9301      	str	r3, [sp, #4]
   b6d36:	bd08      	pop	{r3, pc}
   b6d38:	00030240 	.word	0x00030240

000b6d3c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d3c:	b508      	push	{r3, lr}
   b6d3e:	4b02      	ldr	r3, [pc, #8]	; (b6d48 <network_on+0xc>)
   b6d40:	681b      	ldr	r3, [r3, #0]
   b6d42:	695b      	ldr	r3, [r3, #20]
   b6d44:	9301      	str	r3, [sp, #4]
   b6d46:	bd08      	pop	{r3, pc}
   b6d48:	00030240 	.word	0x00030240

000b6d4c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d4c:	b508      	push	{r3, lr}
   b6d4e:	4b02      	ldr	r3, [pc, #8]	; (b6d58 <network_off+0xc>)
   b6d50:	681b      	ldr	r3, [r3, #0]
   b6d52:	699b      	ldr	r3, [r3, #24]
   b6d54:	9301      	str	r3, [sp, #4]
   b6d56:	bd08      	pop	{r3, pc}
   b6d58:	00030240 	.word	0x00030240

000b6d5c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6d5c:	b508      	push	{r3, lr}
   b6d5e:	4b02      	ldr	r3, [pc, #8]	; (b6d68 <network_listen+0xc>)
   b6d60:	681b      	ldr	r3, [r3, #0]
   b6d62:	69db      	ldr	r3, [r3, #28]
   b6d64:	9301      	str	r3, [sp, #4]
   b6d66:	bd08      	pop	{r3, pc}
   b6d68:	00030240 	.word	0x00030240

000b6d6c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6d6c:	b508      	push	{r3, lr}
   b6d6e:	4b02      	ldr	r3, [pc, #8]	; (b6d78 <network_listening+0xc>)
   b6d70:	681b      	ldr	r3, [r3, #0]
   b6d72:	6a1b      	ldr	r3, [r3, #32]
   b6d74:	9301      	str	r3, [sp, #4]
   b6d76:	bd08      	pop	{r3, pc}
   b6d78:	00030240 	.word	0x00030240

000b6d7c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6d7c:	b508      	push	{r3, lr}
   b6d7e:	4b02      	ldr	r3, [pc, #8]	; (b6d88 <network_set_listen_timeout+0xc>)
   b6d80:	681b      	ldr	r3, [r3, #0]
   b6d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d84:	9301      	str	r3, [sp, #4]
   b6d86:	bd08      	pop	{r3, pc}
   b6d88:	00030240 	.word	0x00030240

000b6d8c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6d8c:	b508      	push	{r3, lr}
   b6d8e:	4b02      	ldr	r3, [pc, #8]	; (b6d98 <network_get_listen_timeout+0xc>)
   b6d90:	681b      	ldr	r3, [r3, #0]
   b6d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6d94:	9301      	str	r3, [sp, #4]
   b6d96:	bd08      	pop	{r3, pc}
   b6d98:	00030240 	.word	0x00030240

000b6d9c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6d9c:	b508      	push	{r3, lr}
   b6d9e:	4b02      	ldr	r3, [pc, #8]	; (b6da8 <network_is_on+0xc>)
   b6da0:	681b      	ldr	r3, [r3, #0]
   b6da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6da4:	9301      	str	r3, [sp, #4]
   b6da6:	bd08      	pop	{r3, pc}
   b6da8:	00030240 	.word	0x00030240

000b6dac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6dac:	b508      	push	{r3, lr}
   b6dae:	4b02      	ldr	r3, [pc, #8]	; (b6db8 <network_is_off+0xc>)
   b6db0:	681b      	ldr	r3, [r3, #0]
   b6db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6db4:	9301      	str	r3, [sp, #4]
   b6db6:	bd08      	pop	{r3, pc}
   b6db8:	00030240 	.word	0x00030240

000b6dbc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6dbc:	b508      	push	{r3, lr}
   b6dbe:	4b02      	ldr	r3, [pc, #8]	; (b6dc8 <spark_process+0xc>)
   b6dc0:	681b      	ldr	r3, [r3, #0]
   b6dc2:	689b      	ldr	r3, [r3, #8]
   b6dc4:	9301      	str	r3, [sp, #4]
   b6dc6:	bd08      	pop	{r3, pc}
   b6dc8:	00030244 	.word	0x00030244

000b6dcc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6dcc:	b508      	push	{r3, lr}
   b6dce:	4b02      	ldr	r3, [pc, #8]	; (b6dd8 <spark_cloud_flag_connected+0xc>)
   b6dd0:	681b      	ldr	r3, [r3, #0]
   b6dd2:	695b      	ldr	r3, [r3, #20]
   b6dd4:	9301      	str	r3, [sp, #4]
   b6dd6:	bd08      	pop	{r3, pc}
   b6dd8:	00030244 	.word	0x00030244

000b6ddc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6ddc:	b508      	push	{r3, lr}
   b6dde:	4b02      	ldr	r3, [pc, #8]	; (b6de8 <spark_send_event+0xc>)
   b6de0:	681b      	ldr	r3, [r3, #0]
   b6de2:	6a1b      	ldr	r3, [r3, #32]
   b6de4:	9301      	str	r3, [sp, #4]
   b6de6:	bd08      	pop	{r3, pc}
   b6de8:	00030244 	.word	0x00030244

000b6dec <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6dec:	b508      	push	{r3, lr}
   b6dee:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <spark_subscribe+0xc>)
   b6df0:	681b      	ldr	r3, [r3, #0]
   b6df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6df4:	9301      	str	r3, [sp, #4]
   b6df6:	bd08      	pop	{r3, pc}
   b6df8:	00030244 	.word	0x00030244

000b6dfc <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6dfc:	b508      	push	{r3, lr}
   b6dfe:	4b02      	ldr	r3, [pc, #8]	; (b6e08 <spark_sync_time_pending+0xc>)
   b6e00:	681b      	ldr	r3, [r3, #0]
   b6e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e04:	9301      	str	r3, [sp, #4]
   b6e06:	bd08      	pop	{r3, pc}
   b6e08:	00030244 	.word	0x00030244

000b6e0c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b02      	ldr	r3, [pc, #8]	; (b6e18 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e14:	9301      	str	r3, [sp, #4]
   b6e16:	bd08      	pop	{r3, pc}
   b6e18:	00030244 	.word	0x00030244

000b6e1c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b02      	ldr	r3, [pc, #8]	; (b6e28 <malloc+0xc>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	681b      	ldr	r3, [r3, #0]
   b6e24:	9301      	str	r3, [sp, #4]
   b6e26:	bd08      	pop	{r3, pc}
   b6e28:	0003021c 	.word	0x0003021c

000b6e2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <free+0xc>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	685b      	ldr	r3, [r3, #4]
   b6e34:	9301      	str	r3, [sp, #4]
   b6e36:	bd08      	pop	{r3, pc}
   b6e38:	0003021c 	.word	0x0003021c

000b6e3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b02      	ldr	r3, [pc, #8]	; (b6e48 <realloc+0xc>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	689b      	ldr	r3, [r3, #8]
   b6e44:	9301      	str	r3, [sp, #4]
   b6e46:	bd08      	pop	{r3, pc}
   b6e48:	0003021c 	.word	0x0003021c

000b6e4c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6e4c:	b508      	push	{r3, lr}
   b6e4e:	4b02      	ldr	r3, [pc, #8]	; (b6e58 <sprintf+0xc>)
   b6e50:	681b      	ldr	r3, [r3, #0]
   b6e52:	68db      	ldr	r3, [r3, #12]
   b6e54:	9301      	str	r3, [sp, #4]
   b6e56:	bd08      	pop	{r3, pc}
   b6e58:	0003021c 	.word	0x0003021c

000b6e5c <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <sscanf+0xc>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	695b      	ldr	r3, [r3, #20]
   b6e64:	9301      	str	r3, [sp, #4]
   b6e66:	bd08      	pop	{r3, pc}
   b6e68:	0003021c 	.word	0x0003021c

000b6e6c <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b02      	ldr	r3, [pc, #8]	; (b6e78 <vsnprintf+0xc>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e74:	9301      	str	r3, [sp, #4]
   b6e76:	bd08      	pop	{r3, pc}
   b6e78:	0003021c 	.word	0x0003021c

000b6e7c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <abort+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	0003021c 	.word	0x0003021c

000b6e8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <_malloc_r+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	0003021c 	.word	0x0003021c

000b6e9c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <__errno+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	0003021c 	.word	0x0003021c

000b6eac <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <__assert_func+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	0003021c 	.word	0x0003021c

000b6ebc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <newlib_impure_ptr_callback+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	0003021c 	.word	0x0003021c

000b6ecc <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <localtime_r+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	0003021c 	.word	0x0003021c

000b6edc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6edc:	2200      	movs	r2, #0
   b6ede:	6840      	ldr	r0, [r0, #4]
   b6ee0:	4611      	mov	r1, r2
   b6ee2:	f7ff bf43 	b.w	b6d6c <network_listening>

000b6ee6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6ee6:	2200      	movs	r2, #0
   b6ee8:	6840      	ldr	r0, [r0, #4]
   b6eea:	4611      	mov	r1, r2
   b6eec:	f7ff bf4e 	b.w	b6d8c <network_get_listen_timeout>

000b6ef0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6ef0:	6840      	ldr	r0, [r0, #4]
   b6ef2:	2200      	movs	r2, #0
   b6ef4:	f7ff bf42 	b.w	b6d7c <network_set_listen_timeout>

000b6ef8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6ef8:	6840      	ldr	r0, [r0, #4]
   b6efa:	2200      	movs	r2, #0
   b6efc:	f081 0101 	eor.w	r1, r1, #1
   b6f00:	f7ff bf2c 	b.w	b6d5c <network_listen>

000b6f04 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f04:	2300      	movs	r3, #0
   b6f06:	6840      	ldr	r0, [r0, #4]
   b6f08:	461a      	mov	r2, r3
   b6f0a:	4619      	mov	r1, r3
   b6f0c:	f7ff bf1e 	b.w	b6d4c <network_off>

000b6f10 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6f10:	2300      	movs	r3, #0
   b6f12:	6840      	ldr	r0, [r0, #4]
   b6f14:	461a      	mov	r2, r3
   b6f16:	4619      	mov	r1, r3
   b6f18:	f7ff bf10 	b.w	b6d3c <network_on>

000b6f1c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6f1c:	2200      	movs	r2, #0
   b6f1e:	6840      	ldr	r0, [r0, #4]
   b6f20:	4611      	mov	r1, r2
   b6f22:	f7ff bf03 	b.w	b6d2c <network_ready>

000b6f26 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6f26:	2200      	movs	r2, #0
   b6f28:	6840      	ldr	r0, [r0, #4]
   b6f2a:	4611      	mov	r1, r2
   b6f2c:	f7ff beee 	b.w	b6d0c <network_connecting>

000b6f30 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6f30:	6840      	ldr	r0, [r0, #4]
   b6f32:	2200      	movs	r2, #0
   b6f34:	2102      	movs	r1, #2
   b6f36:	f7ff bef1 	b.w	b6d1c <network_disconnect>

000b6f3a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6f3a:	2300      	movs	r3, #0
   b6f3c:	6840      	ldr	r0, [r0, #4]
   b6f3e:	461a      	mov	r2, r3
   b6f40:	f7ff bedc 	b.w	b6cfc <network_connect>

000b6f44 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6f44:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6f46:	2203      	movs	r2, #3
   b6f48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6f4a:	4a02      	ldr	r2, [pc, #8]	; (b6f54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6f4c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6f4e:	4770      	bx	lr
   b6f50:	2003e674 	.word	0x2003e674
   b6f54:	000bd988 	.word	0x000bd988

000b6f58 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6f58:	b510      	push	{r4, lr}
   b6f5a:	4604      	mov	r4, r0
   b6f5c:	4608      	mov	r0, r1
{
    _spi = spi;
   b6f5e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6f60:	f7ff fe30 	bl	b6bc4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6f64:	2300      	movs	r3, #0
   b6f66:	6063      	str	r3, [r4, #4]
}
   b6f68:	4620      	mov	r0, r4
   b6f6a:	bd10      	pop	{r4, pc}

000b6f6c <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b6f6c:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b6f6e:	2420      	movs	r4, #32
{
   b6f70:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b6f72:	4622      	mov	r2, r4
   b6f74:	2100      	movs	r1, #0
   b6f76:	4668      	mov	r0, sp
   b6f78:	f004 f90f 	bl	bb19a <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b6f7c:	2100      	movs	r1, #0
   b6f7e:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b6f80:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b6f84:	f7ff fc54 	bl	b6830 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b6f88:	9801      	ldr	r0, [sp, #4]
   b6f8a:	b008      	add	sp, #32
   b6f8c:	bd10      	pop	{r4, pc}
	...

000b6f90 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6f90:	4b05      	ldr	r3, [pc, #20]	; (b6fa8 <_GLOBAL__sub_I_System+0x18>)
   b6f92:	2202      	movs	r2, #2
   b6f94:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6f96:	4b05      	ldr	r3, [pc, #20]	; (b6fac <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6f98:	4a05      	ldr	r2, [pc, #20]	; (b6fb0 <_GLOBAL__sub_I_System+0x20>)
   b6f9a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6f9c:	2000      	movs	r0, #0
   b6f9e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6fa2:	f7ff be67 	b.w	b6c74 <set_system_mode>
   b6fa6:	bf00      	nop
   b6fa8:	2003e688 	.word	0x2003e688
   b6fac:	2003e67c 	.word	0x2003e67c
   b6fb0:	ffff0000 	.word	0xffff0000

000b6fb4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6fb4:	b510      	push	{r4, lr}
   b6fb6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6fb8:	f004 f965 	bl	bb286 <strlen>
   b6fbc:	3801      	subs	r0, #1
   b6fbe:	1823      	adds	r3, r4, r0
   b6fc0:	4620      	mov	r0, r4
	while(i<j){
   b6fc2:	4283      	cmp	r3, r0
   b6fc4:	d906      	bls.n	b6fd4 <_Z11str_reversePc+0x20>
		c = *i;
   b6fc6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6fc8:	7819      	ldrb	r1, [r3, #0]
   b6fca:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6fce:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6fd2:	e7f6      	b.n	b6fc2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6fd4:	bd10      	pop	{r4, pc}

000b6fd6 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b6fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b6fda:	1e93      	subs	r3, r2, #2
{
   b6fdc:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b6fde:	2b22      	cmp	r3, #34	; 0x22
   b6fe0:	f04f 0300 	mov.w	r3, #0
{
   b6fe4:	460d      	mov	r5, r1
   b6fe6:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b6fe8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b6fec:	d927      	bls.n	b703e <ltoa+0x68>

      if (10 == base && N < 0L)
   b6fee:	2800      	cmp	r0, #0
   b6ff0:	da2a      	bge.n	b7048 <ltoa+0x72>
      {
            *head++ = '-';
   b6ff2:	462e      	mov	r6, r5
   b6ff4:	232d      	movs	r3, #45	; 0x2d
   b6ff6:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b6ffa:	4240      	negs	r0, r0
   b6ffc:	240a      	movs	r4, #10
      *tail-- = '\0';
   b6ffe:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b7002:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b7006:	4622      	mov	r2, r4
   b7008:	4601      	mov	r1, r0
   b700a:	a801      	add	r0, sp, #4
   b700c:	f004 f879 	bl	bb102 <ldiv>
   b7010:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b7012:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b7014:	2b09      	cmp	r3, #9
   b7016:	bfcc      	ite	gt
   b7018:	2237      	movgt	r2, #55	; 0x37
   b701a:	2230      	movle	r2, #48	; 0x30
   b701c:	fa52 f383 	uxtab	r3, r2, r3
   b7020:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b7024:	f108 0801 	add.w	r8, r8, #1
   b7028:	2800      	cmp	r0, #0
   b702a:	d1ec      	bne.n	b7006 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b702c:	4642      	mov	r2, r8
   b702e:	1c79      	adds	r1, r7, #1
   b7030:	4630      	mov	r0, r6
   b7032:	f004 f88a 	bl	bb14a <memcpy>
      return str;
}
   b7036:	4628      	mov	r0, r5
   b7038:	b00c      	add	sp, #48	; 0x30
   b703a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b703e:	2a0a      	cmp	r2, #10
   b7040:	d0d5      	beq.n	b6fee <ltoa+0x18>
      if (uarg)
   b7042:	b118      	cbz	r0, b704c <ltoa+0x76>
   b7044:	462e      	mov	r6, r5
   b7046:	e7da      	b.n	b6ffe <ltoa+0x28>
   b7048:	240a      	movs	r4, #10
   b704a:	e7fa      	b.n	b7042 <ltoa+0x6c>
      else  *tail-- = '0';
   b704c:	2330      	movs	r3, #48	; 0x30
   b704e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b7052:	462e      	mov	r6, r5
   b7054:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b7058:	f04f 0802 	mov.w	r8, #2
   b705c:	e7e6      	b.n	b702c <ltoa+0x56>

000b705e <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b705e:	b570      	push	{r4, r5, r6, lr}
   b7060:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7062:	1e91      	subs	r1, r2, #2
   b7064:	2922      	cmp	r1, #34	; 0x22
   b7066:	d81d      	bhi.n	b70a4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7068:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b706a:	b930      	cbnz	r0, b707a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b706c:	4423      	add	r3, r4
            *ptr++ = '0';
   b706e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7070:	429d      	cmp	r5, r3
   b7072:	d210      	bcs.n	b7096 <ultoa+0x38>
            *ptr++ = '0';
   b7074:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7078:	e7fa      	b.n	b7070 <ultoa+0x12>
            result.quot = a/radix;
   b707a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b707e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7082:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7084:	2809      	cmp	r0, #9
                *ptr += '0';
   b7086:	bf94      	ite	ls
   b7088:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b708a:	3157      	addhi	r1, #87	; 0x57
   b708c:	b2c9      	uxtb	r1, r1
   b708e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7092:	4630      	mov	r0, r6
	while(a){
   b7094:	e7e9      	b.n	b706a <ultoa+0xc>

	*ptr = '\0';
   b7096:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7098:	4620      	mov	r0, r4
	*ptr = '\0';
   b709a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b709c:	f7ff ff8a 	bl	b6fb4 <_Z11str_reversePc>
	return buffer;
   b70a0:	4620      	mov	r0, r4
}
   b70a2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b70a4:	2000      	movs	r0, #0
   b70a6:	e7fc      	b.n	b70a2 <ultoa+0x44>

000b70a8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b70a8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b70aa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b70ac:	460c      	mov	r4, r1
   b70ae:	4615      	mov	r5, r2
	if(a<0){
   b70b0:	da0e      	bge.n	b70d0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b70b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b70b6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b70ba:	bf14      	ite	ne
   b70bc:	4258      	negne	r0, r3
   b70be:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b70c0:	2301      	movs	r3, #1
		*buffer = '-';
   b70c2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b70c4:	462a      	mov	r2, r5
   b70c6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b70c8:	f7ff ffc9 	bl	b705e <ultoa>
	}
	return buffer;
}
   b70cc:	4620      	mov	r0, r4
   b70ce:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b70d0:	2301      	movs	r3, #1
   b70d2:	e7f9      	b.n	b70c8 <itoa+0x20>

000b70d4 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b70d4:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b70d6:	6804      	ldr	r4, [r0, #0]
   b70d8:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b70da:	46a4      	mov	ip, r4
    }
   b70dc:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b70e0:	4760      	bx	ip

000b70e2 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b70e2:	6803      	ldr	r3, [r0, #0]
   b70e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b70e6:	4718      	bx	r3

000b70e8 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b70e8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b70ea:	4770      	bx	lr

000b70ec <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b70ec:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b70ee:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b70f0:	1a10      	subs	r0, r2, r0
   b70f2:	4770      	bx	lr

000b70f4 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b70f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b70f6:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b70f8:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b70fa:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b70fc:	4b0c      	ldr	r3, [pc, #48]	; (b7130 <_ZN3UDP9endPacketEv+0x3c>)
   b70fe:	9302      	str	r3, [sp, #8]
   b7100:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b7104:	4604      	mov	r4, r0
   b7106:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7108:	ad03      	add	r5, sp, #12
   b710a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b710c:	6833      	ldr	r3, [r6, #0]
   b710e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7110:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b7112:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b7114:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b7116:	9300      	str	r3, [sp, #0]
   b7118:	4620      	mov	r0, r4
   b711a:	ab02      	add	r3, sp, #8
   b711c:	47b8      	blx	r7
    flush(); // wait for send to complete
   b711e:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7120:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b7122:	69db      	ldr	r3, [r3, #28]
   b7124:	4620      	mov	r0, r4
   b7126:	4798      	blx	r3
    return result;
}
   b7128:	4628      	mov	r0, r5
   b712a:	b009      	add	sp, #36	; 0x24
   b712c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b712e:	bf00      	nop
   b7130:	000bdc68 	.word	0x000bdc68

000b7134 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b7134:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b7136:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b7138:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b713c:	68db      	ldr	r3, [r3, #12]
   b713e:	2201      	movs	r2, #1
   b7140:	f10d 0107 	add.w	r1, sp, #7
   b7144:	4798      	blx	r3
}
   b7146:	b003      	add	sp, #12
   b7148:	f85d fb04 	ldr.w	pc, [sp], #4

000b714c <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b714c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b714e:	6803      	ldr	r3, [r0, #0]
   b7150:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b7152:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b7154:	4798      	blx	r3
   b7156:	b128      	cbz	r0, b7164 <_ZN3UDP4readEv+0x18>
   b7158:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b715a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b715c:	1c59      	adds	r1, r3, #1
   b715e:	86e1      	strh	r1, [r4, #54]	; 0x36
   b7160:	5cd0      	ldrb	r0, [r2, r3]
}
   b7162:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b7164:	f04f 30ff 	mov.w	r0, #4294967295
   b7168:	e7fb      	b.n	b7162 <_ZN3UDP4readEv+0x16>

000b716a <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b716a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b716c:	6803      	ldr	r3, [r0, #0]
   b716e:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b7170:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b7172:	4798      	blx	r3
   b7174:	b118      	cbz	r0, b717e <_ZN3UDP4peekEv+0x14>
   b7176:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b7178:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b717a:	5cd0      	ldrb	r0, [r2, r3]
}
   b717c:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b717e:	f04f 30ff 	mov.w	r0, #4294967295
   b7182:	e7fb      	b.n	b717c <_ZN3UDP4peekEv+0x12>

000b7184 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b7184:	4770      	bx	lr

000b7186 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b7186:	b410      	push	{r4}
   b7188:	4603      	mov	r3, r0
   b718a:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b718c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b718e:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b7190:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b7192:	6803      	ldr	r3, [r0, #0]
   b7194:	1a52      	subs	r2, r2, r1
   b7196:	68db      	ldr	r3, [r3, #12]
   b7198:	4421      	add	r1, r4
}
   b719a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b719e:	4718      	bx	r3

000b71a0 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b71a0:	f1a0 0010 	sub.w	r0, r0, #16
   b71a4:	f7ff bfef 	b.w	b7186 <_ZNK3UDP7printToER5Print>

000b71a8 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b71a8:	b570      	push	{r4, r5, r6, lr}
    stop();
   b71aa:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b71ac:	b08c      	sub	sp, #48	; 0x30
    stop();
   b71ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b71b0:	4604      	mov	r4, r0
   b71b2:	460e      	mov	r6, r1
   b71b4:	4615      	mov	r5, r2
    stop();
   b71b6:	4798      	blx	r3
    const int one = 1;
   b71b8:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b71ba:	221c      	movs	r2, #28
   b71bc:	2100      	movs	r1, #0
   b71be:	a805      	add	r0, sp, #20
    const int one = 1;
   b71c0:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b71c2:	f003 ffea 	bl	bb19a <memset>
    saddr.sin6_len = sizeof(saddr);
   b71c6:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b71ca:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b71cc:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b71d0:	f7ff fc30 	bl	b6a34 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b71d4:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b71d6:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b71da:	2102      	movs	r1, #2
   b71dc:	200a      	movs	r0, #10
   b71de:	f7ff fce9 	bl	b6bb4 <sock_socket>
    if (_sock < 0) {
   b71e2:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b71e4:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b71e6:	db25      	blt.n	b7234 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b71e8:	2204      	movs	r2, #4
   b71ea:	9200      	str	r2, [sp, #0]
   b71ec:	ab02      	add	r3, sp, #8
   b71ee:	f640 71ff 	movw	r1, #4095	; 0xfff
   b71f2:	f7ff fca7 	bl	b6b44 <sock_setsockopt>
   b71f6:	b9e8      	cbnz	r0, b7234 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b71f8:	b195      	cbz	r5, b7220 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b71fa:	9003      	str	r0, [sp, #12]
   b71fc:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b7200:	a903      	add	r1, sp, #12
   b7202:	b2e8      	uxtb	r0, r5
   b7204:	f7ff facc 	bl	b67a0 <if_index_to_name>
   b7208:	b9a0      	cbnz	r0, b7234 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b720a:	2306      	movs	r3, #6
   b720c:	9300      	str	r3, [sp, #0]
   b720e:	6960      	ldr	r0, [r4, #20]
   b7210:	ab03      	add	r3, sp, #12
   b7212:	f241 020b 	movw	r2, #4107	; 0x100b
   b7216:	f640 71ff 	movw	r1, #4095	; 0xfff
   b721a:	f7ff fc93 	bl	b6b44 <sock_setsockopt>
   b721e:	b948      	cbnz	r0, b7234 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b7220:	6960      	ldr	r0, [r4, #20]
   b7222:	221c      	movs	r2, #28
   b7224:	a905      	add	r1, sp, #20
   b7226:	f7ff fc85 	bl	b6b34 <sock_bind>
   b722a:	b918      	cbnz	r0, b7234 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b722c:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b722e:	2001      	movs	r0, #1
}
   b7230:	b00c      	add	sp, #48	; 0x30
   b7232:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b7234:	6823      	ldr	r3, [r4, #0]
   b7236:	4620      	mov	r0, r4
   b7238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b723a:	4798      	blx	r3
   b723c:	2000      	movs	r0, #0
   b723e:	e7f7      	b.n	b7230 <_ZN3UDP5beginEtm+0x88>

000b7240 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b7240:	b510      	push	{r4, lr}
   b7242:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b7244:	6940      	ldr	r0, [r0, #20]
   b7246:	2800      	cmp	r0, #0
   b7248:	db01      	blt.n	b724e <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b724a:	f7ff fc83 	bl	b6b54 <sock_close>
    _sock = -1;
   b724e:	f04f 33ff 	mov.w	r3, #4294967295
   b7252:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b7254:	2300      	movs	r3, #0
   b7256:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b7258:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b725a:	bd10      	pop	{r4, pc}

000b725c <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b725c:	b570      	push	{r4, r5, r6, lr}
   b725e:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b7260:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7262:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b7264:	b168      	cbz	r0, b7282 <_ZN3UDP5writeEPKhj+0x26>
   b7266:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b7268:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b726a:	4294      	cmp	r4, r2
   b726c:	bf28      	it	cs
   b726e:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b7270:	4622      	mov	r2, r4
   b7272:	4430      	add	r0, r6
   b7274:	f003 ff69 	bl	bb14a <memcpy>
    _offset += size;
   b7278:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b727a:	4423      	add	r3, r4
   b727c:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b727e:	4620      	mov	r0, r4
   b7280:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b7282:	4604      	mov	r4, r0
   b7284:	e7f1      	b.n	b726a <_ZN3UDP5writeEPKhj+0xe>

000b7286 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b7286:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b7288:	6803      	ldr	r3, [r0, #0]
   b728a:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b728c:	4604      	mov	r4, r0
   b728e:	460f      	mov	r7, r1
   b7290:	4616      	mov	r6, r2
    if (available()) {
   b7292:	4798      	blx	r3
   b7294:	b190      	cbz	r0, b72bc <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b7296:	6823      	ldr	r3, [r4, #0]
   b7298:	4620      	mov	r0, r4
   b729a:	691b      	ldr	r3, [r3, #16]
   b729c:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b729e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b72a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b72a2:	4286      	cmp	r6, r0
   b72a4:	bfa8      	it	ge
   b72a6:	4606      	movge	r6, r0
   b72a8:	4419      	add	r1, r3
   b72aa:	4632      	mov	r2, r6
   b72ac:	4638      	mov	r0, r7
   b72ae:	f003 ff4c 	bl	bb14a <memcpy>
        _offset += read;
   b72b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b72b4:	4433      	add	r3, r6
   b72b6:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b72b8:	4630      	mov	r0, r6
   b72ba:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b72bc:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b72c0:	e7fa      	b.n	b72b8 <_ZN3UDP4readEPhj+0x32>

000b72c2 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b72c2:	b530      	push	{r4, r5, lr}
   b72c4:	b087      	sub	sp, #28
   b72c6:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b72c8:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b72ca:	4668      	mov	r0, sp
   b72cc:	f002 fb46 	bl	b995c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b72d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72d2:	3404      	adds	r4, #4
   b72d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72d6:	682b      	ldr	r3, [r5, #0]
   b72d8:	7023      	strb	r3, [r4, #0]
    }
   b72da:	b007      	add	sp, #28
   b72dc:	bd30      	pop	{r4, r5, pc}
	...

000b72e0 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b72e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72e2:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b72e4:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b72e6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b72e8:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b72ea:	4a0a      	ldr	r2, [pc, #40]	; (b7314 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b72ec:	9202      	str	r2, [sp, #8]
   b72ee:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b72f0:	468c      	mov	ip, r1
   b72f2:	4606      	mov	r6, r0
   b72f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b72f6:	ad03      	add	r5, sp, #12
   b72f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b72fa:	6823      	ldr	r3, [r4, #0]
   b72fc:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b72fe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b7302:	9300      	str	r3, [sp, #0]
   b7304:	4672      	mov	r2, lr
   b7306:	ab02      	add	r3, sp, #8
   b7308:	4661      	mov	r1, ip
   b730a:	4630      	mov	r0, r6
   b730c:	47b8      	blx	r7
    }
   b730e:	b009      	add	sp, #36	; 0x24
   b7310:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7312:	bf00      	nop
   b7314:	000bdc68 	.word	0x000bdc68

000b7318 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b7318:	b570      	push	{r4, r5, r6, lr}
   b731a:	4604      	mov	r4, r0
   b731c:	4b05      	ldr	r3, [pc, #20]	; (b7334 <_ZN3UDP8remoteIPEv+0x1c>)
   b731e:	f844 3b04 	str.w	r3, [r4], #4
   b7322:	f101 0520 	add.w	r5, r1, #32
   b7326:	4606      	mov	r6, r0
   b7328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b732a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b732c:	682b      	ldr	r3, [r5, #0]
   b732e:	7023      	strb	r3, [r4, #0]
   b7330:	4630      	mov	r0, r6
   b7332:	bd70      	pop	{r4, r5, r6, pc}
   b7334:	000bdc68 	.word	0x000bdc68

000b7338 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b7338:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b733a:	7843      	ldrb	r3, [r0, #1]
   b733c:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b733e:	b08d      	sub	sp, #52	; 0x34
   b7340:	4605      	mov	r5, r0
   b7342:	460c      	mov	r4, r1
   b7344:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b7346:	d104      	bne.n	b7352 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7348:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b734a:	4620      	mov	r0, r4
   b734c:	f7ff ffb9 	bl	b72c2 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b7350:	e022      	b.n	b7398 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b7352:	2b0a      	cmp	r3, #10
   b7354:	d125      	bne.n	b73a2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b7356:	2211      	movs	r2, #17
   b7358:	2100      	movs	r1, #0
   b735a:	a801      	add	r0, sp, #4
   b735c:	f003 ff1d 	bl	bb19a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7360:	68ab      	ldr	r3, [r5, #8]
   b7362:	b303      	cbz	r3, b73a6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7364:	f105 0308 	add.w	r3, r5, #8
   b7368:	ae01      	add	r6, sp, #4
   b736a:	f105 0c18 	add.w	ip, r5, #24
   b736e:	6818      	ldr	r0, [r3, #0]
   b7370:	6859      	ldr	r1, [r3, #4]
   b7372:	4632      	mov	r2, r6
   b7374:	c203      	stmia	r2!, {r0, r1}
   b7376:	3308      	adds	r3, #8
   b7378:	4563      	cmp	r3, ip
   b737a:	4616      	mov	r6, r2
   b737c:	d1f7      	bne.n	b736e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b737e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7380:	a901      	add	r1, sp, #4
   b7382:	a806      	add	r0, sp, #24
   b7384:	ae07      	add	r6, sp, #28
            a.v = 6;
   b7386:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b738a:	f002 fa9d 	bl	b98c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b738e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7390:	3404      	adds	r4, #4
   b7392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7394:	6833      	ldr	r3, [r6, #0]
   b7396:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b7398:	b11f      	cbz	r7, b73a2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b739a:	8868      	ldrh	r0, [r5, #2]
   b739c:	f7ff fb42 	bl	b6a24 <inet_ntohs>
   b73a0:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b73a2:	b00d      	add	sp, #52	; 0x34
   b73a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b73a6:	68eb      	ldr	r3, [r5, #12]
   b73a8:	2b00      	cmp	r3, #0
   b73aa:	d1db      	bne.n	b7364 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b73ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b73b0:	692e      	ldr	r6, [r5, #16]
   b73b2:	f7ff fb2f 	bl	b6a14 <inet_htonl>
   b73b6:	4286      	cmp	r6, r0
   b73b8:	d1d4      	bne.n	b7364 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b73ba:	f105 0114 	add.w	r1, r5, #20
   b73be:	e7c4      	b.n	b734a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b73c0 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b73c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b73c4:	4617      	mov	r7, r2
   b73c6:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b73c8:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b73ca:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b73cc:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b73ce:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b73d0:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b73d2:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b73d4:	f7ff f9c4 	bl	b6760 <netdb_getaddrinfo>
   b73d8:	1e04      	subs	r4, r0, #0
   b73da:	db20      	blt.n	b741e <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b73dc:	9b01      	ldr	r3, [sp, #4]
   b73de:	b32b      	cbz	r3, b742c <_ZN3UDP11beginPacketEPKct+0x6c>
   b73e0:	695b      	ldr	r3, [r3, #20]
   b73e2:	b31b      	cbz	r3, b742c <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b73e4:	a802      	add	r0, sp, #8
   b73e6:	f002 fa61 	bl	b98ac <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b73ea:	9b01      	ldr	r3, [sp, #4]
   b73ec:	2200      	movs	r2, #0
   b73ee:	6958      	ldr	r0, [r3, #20]
   b73f0:	a902      	add	r1, sp, #8
   b73f2:	f7ff ffa1 	bl	b7338 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b73f6:	a802      	add	r0, sp, #8
   b73f8:	f002 fa80 	bl	b98fc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b73fc:	b1b0      	cbz	r0, b742c <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b73fe:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7400:	ad03      	add	r5, sp, #12
   b7402:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b7406:	4b0b      	ldr	r3, [pc, #44]	; (b7434 <_ZN3UDP11beginPacketEPKct+0x74>)
   b7408:	9308      	str	r3, [sp, #32]
   b740a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b740c:	ac09      	add	r4, sp, #36	; 0x24
   b740e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7410:	682b      	ldr	r3, [r5, #0]
   b7412:	7023      	strb	r3, [r4, #0]
   b7414:	463a      	mov	r2, r7
   b7416:	a908      	add	r1, sp, #32
   b7418:	4630      	mov	r0, r6
   b741a:	47c0      	blx	r8
   b741c:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b741e:	9801      	ldr	r0, [sp, #4]
   b7420:	f7ff f996 	bl	b6750 <netdb_freeaddrinfo>
}
   b7424:	4620      	mov	r0, r4
   b7426:	b00e      	add	sp, #56	; 0x38
   b7428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b742c:	f04f 34ff 	mov.w	r4, #4294967295
   b7430:	e7f5      	b.n	b741e <_ZN3UDP11beginPacketEPKct+0x5e>
   b7432:	bf00      	nop
   b7434:	000bdc68 	.word	0x000bdc68

000b7438 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b7438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b743c:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b7440:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b7444:	b090      	sub	sp, #64	; 0x40
   b7446:	4605      	mov	r5, r0
   b7448:	460e      	mov	r6, r1
   b744a:	4690      	mov	r8, r2
   b744c:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b744e:	db3c      	blt.n	b74ca <_ZN3UDP13receivePacketEPhjm+0x92>
   b7450:	2900      	cmp	r1, #0
   b7452:	d03a      	beq.n	b74ca <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b7454:	f04f 0a1c 	mov.w	sl, #28
   b7458:	af09      	add	r7, sp, #36	; 0x24
   b745a:	4652      	mov	r2, sl
   b745c:	2100      	movs	r1, #0
   b745e:	4638      	mov	r0, r7
   b7460:	f003 fe9b 	bl	bb19a <memset>
        socklen_t slen = sizeof(saddr);
   b7464:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b7468:	b1dc      	cbz	r4, b74a2 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b746a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b746e:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b7472:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b7476:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b7478:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b747a:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b747c:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b7480:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b7482:	9300      	str	r3, [sp, #0]
   b7484:	f241 0206 	movw	r2, #4102	; 0x1006
   b7488:	446b      	add	r3, sp
   b748a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b748e:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b7490:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b7492:	f7ff fb57 	bl	b6b44 <sock_setsockopt>
            if (ret) {
   b7496:	4604      	mov	r4, r0
   b7498:	b120      	cbz	r0, b74a4 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b749a:	4620      	mov	r0, r4
   b749c:	b010      	add	sp, #64	; 0x40
   b749e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b74a2:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b74a4:	ab03      	add	r3, sp, #12
   b74a6:	e9cd 7300 	strd	r7, r3, [sp]
   b74aa:	6968      	ldr	r0, [r5, #20]
   b74ac:	4623      	mov	r3, r4
   b74ae:	4642      	mov	r2, r8
   b74b0:	4631      	mov	r1, r6
   b74b2:	f7ff fb67 	bl	b6b84 <sock_recvfrom>
        if (ret >= 0) {
   b74b6:	1e04      	subs	r4, r0, #0
   b74b8:	dbef      	blt.n	b749a <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b74ba:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b74be:	f105 011c 	add.w	r1, r5, #28
   b74c2:	4638      	mov	r0, r7
   b74c4:	f7ff ff38 	bl	b7338 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b74c8:	e7e7      	b.n	b749a <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b74ca:	f04f 34ff 	mov.w	r4, #4294967295
   b74ce:	e7e4      	b.n	b749a <_ZN3UDP13receivePacketEPhjm+0x62>

000b74d0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b74d0:	b538      	push	{r3, r4, r5, lr}
   b74d2:	4605      	mov	r5, r0
   b74d4:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b74d6:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b74d8:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b74da:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b74dc:	d110      	bne.n	b7500 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b74de:	f640 231c 	movw	r3, #2588	; 0xa1c
   b74e2:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b74e4:	f7ff faa6 	bl	b6a34 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b74e8:	3408      	adds	r4, #8
   b74ea:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b74ec:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b74f0:	3514      	adds	r5, #20
   b74f2:	f853 2b04 	ldr.w	r2, [r3], #4
   b74f6:	f844 2b04 	str.w	r2, [r4], #4
   b74fa:	42ab      	cmp	r3, r5
   b74fc:	d1f9      	bne.n	b74f2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b74fe:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b7500:	2b04      	cmp	r3, #4
   b7502:	d1fc      	bne.n	b74fe <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b7504:	f44f 7304 	mov.w	r3, #528	; 0x210
   b7508:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b750a:	f7ff fa93 	bl	b6a34 <inet_htons>
   b750e:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b7510:	6868      	ldr	r0, [r5, #4]
   b7512:	f7ff fa7f 	bl	b6a14 <inet_htonl>
   b7516:	6060      	str	r0, [r4, #4]
}
   b7518:	e7f1      	b.n	b74fe <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b751a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b751a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b751e:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b7520:	af03      	add	r7, sp, #12
   b7522:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b7526:	4698      	mov	r8, r3
   b7528:	4604      	mov	r4, r0
   b752a:	460d      	mov	r5, r1
   b752c:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b752e:	2100      	movs	r1, #0
   b7530:	464a      	mov	r2, r9
   b7532:	4638      	mov	r0, r7
   b7534:	f003 fe31 	bl	bb19a <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b7538:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b753c:	463a      	mov	r2, r7
   b753e:	4640      	mov	r0, r8
   b7540:	f7ff ffc6 	bl	b74d0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b7544:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b7548:	b153      	cbz	r3, b7560 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b754a:	e9cd 7900 	strd	r7, r9, [sp]
   b754e:	6960      	ldr	r0, [r4, #20]
   b7550:	2300      	movs	r3, #0
   b7552:	4632      	mov	r2, r6
   b7554:	4629      	mov	r1, r5
   b7556:	f7ff fb25 	bl	b6ba4 <sock_sendto>
}
   b755a:	b00b      	add	sp, #44	; 0x2c
   b755c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b7560:	f04f 30ff 	mov.w	r0, #4294967295
   b7564:	e7f9      	b.n	b755a <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>

000b7566 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>:
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b7566:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7568:	b091      	sub	sp, #68	; 0x44
   b756a:	460c      	mov	r4, r1
   b756c:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   b756e:	2100      	movs	r1, #0
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b7570:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   b7572:	a809      	add	r0, sp, #36	; 0x24
   b7574:	221c      	movs	r2, #28
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b7576:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   b7578:	f003 fe0f 	bl	bb19a <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   b757c:	aa09      	add	r2, sp, #36	; 0x24
   b757e:	2100      	movs	r1, #0
   b7580:	4620      	mov	r0, r4
   b7582:	f7ff ffa5 	bl	b74d0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   b7586:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b758a:	2b02      	cmp	r3, #2
   b758c:	d12d      	bne.n	b75ea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x84>
        struct ip_mreq mreq = {};
   b758e:	2300      	movs	r3, #0
   b7590:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   b7592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7594:	9304      	str	r3, [sp, #16]
        if (ifindex != 0) {
   b7596:	b1bd      	cbz	r5, b75c8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
            if (!if_get_by_index(ifindex, &iface)) {
   b7598:	a902      	add	r1, sp, #8
   b759a:	4628      	mov	r0, r5
   b759c:	f7ff f908 	bl	b67b0 <if_get_by_index>
   b75a0:	b990      	cbnz	r0, b75c8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
                struct if_addrs* addrs = nullptr;
   b75a2:	9003      	str	r0, [sp, #12]
                if (!if_get_addrs(iface, &addrs)) {
   b75a4:	a903      	add	r1, sp, #12
   b75a6:	9802      	ldr	r0, [sp, #8]
   b75a8:	f7ff f90a 	bl	b67c0 <if_get_addrs>
   b75ac:	b948      	cbnz	r0, b75c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b75ae:	9b03      	ldr	r3, [sp, #12]
   b75b0:	b13b      	cbz	r3, b75c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                        auto ifaddr = a->if_addr->addr;
   b75b2:	68da      	ldr	r2, [r3, #12]
   b75b4:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   b75b6:	7851      	ldrb	r1, [r2, #1]
   b75b8:	2902      	cmp	r1, #2
   b75ba:	d114      	bne.n	b75e6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   b75bc:	6852      	ldr	r2, [r2, #4]
   b75be:	b192      	cbz	r2, b75e6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   b75c0:	9205      	str	r2, [sp, #20]
                SCOPE_GUARD({
   b75c2:	9803      	ldr	r0, [sp, #12]
   b75c4:	f7ff f904 	bl	b67d0 <if_free_if_addrs>
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   b75c8:	2f00      	cmp	r7, #0
   b75ca:	f04f 0308 	mov.w	r3, #8
   b75ce:	9300      	str	r3, [sp, #0]
   b75d0:	bf18      	it	ne
   b75d2:	2203      	movne	r2, #3
   b75d4:	ab04      	add	r3, sp, #16
   b75d6:	bf08      	it	eq
   b75d8:	2204      	moveq	r2, #4
   b75da:	2100      	movs	r1, #0
   b75dc:	4630      	mov	r0, r6
   b75de:	f7ff fab1 	bl	b6b44 <sock_setsockopt>
}
   b75e2:	b011      	add	sp, #68	; 0x44
   b75e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b75e6:	681b      	ldr	r3, [r3, #0]
   b75e8:	e7e2      	b.n	b75b0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x4a>
    } else if (s.ss_family == AF_INET6) {
   b75ea:	2b0a      	cmp	r3, #10
   b75ec:	d115      	bne.n	b761a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0xb4>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   b75ee:	ab0b      	add	r3, sp, #44	; 0x2c
   b75f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b75f2:	ac04      	add	r4, sp, #16
   b75f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b75f8:	2f00      	cmp	r7, #0
   b75fa:	f04f 0314 	mov.w	r3, #20
   b75fe:	9300      	str	r3, [sp, #0]
   b7600:	bf18      	it	ne
   b7602:	220c      	movne	r2, #12
   b7604:	4623      	mov	r3, r4
   b7606:	bf08      	it	eq
   b7608:	220d      	moveq	r2, #13
   b760a:	2129      	movs	r1, #41	; 0x29
   b760c:	4630      	mov	r0, r6
        mreq.ipv6mr_interface = ifindex;
   b760e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b7610:	f7ff fa98 	bl	b6b44 <sock_setsockopt>
   b7614:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7618:	e7e3      	b.n	b75e2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>
    return -1;
   b761a:	f04f 30ff 	mov.w	r0, #4294967295
   b761e:	e7e0      	b.n	b75e2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>

000b7620 <_ZN3UDPC1Ev>:
UDP::UDP()
   b7620:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7622:	2500      	movs	r5, #0
   b7624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7628:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b762c:	4b0b      	ldr	r3, [pc, #44]	; (b765c <_ZN3UDPC1Ev+0x3c>)
   b762e:	f103 0208 	add.w	r2, r3, #8
   b7632:	336c      	adds	r3, #108	; 0x6c
   b7634:	6103      	str	r3, [r0, #16]
   b7636:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b763a:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b763c:	6002      	str	r2, [r0, #0]
   b763e:	6143      	str	r3, [r0, #20]
   b7640:	301c      	adds	r0, #28
   b7642:	f002 f933 	bl	b98ac <_ZN9IPAddressC1Ev>
   b7646:	f44f 7300 	mov.w	r3, #512	; 0x200
   b764a:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b764e:	86e5      	strh	r5, [r4, #54]	; 0x36
   b7650:	8725      	strh	r5, [r4, #56]	; 0x38
   b7652:	63e5      	str	r5, [r4, #60]	; 0x3c
   b7654:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b7658:	4620      	mov	r0, r4
   b765a:	bd38      	pop	{r3, r4, r5, pc}
   b765c:	000bd9bc 	.word	0x000bd9bc

000b7660 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b7660:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b7662:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b7666:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b7668:	b123      	cbz	r3, b7674 <_ZN3UDP13releaseBufferEv+0x14>
   b766a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b766c:	b110      	cbz	r0, b7674 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b766e:	2101      	movs	r1, #1
   b7670:	f7fc fd17 	bl	b40a2 <_ZdlPvj>
    _buffer = NULL;
   b7674:	2300      	movs	r3, #0
   b7676:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b7678:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b767c:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b767e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b7680:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b7682:	bd10      	pop	{r4, pc}

000b7684 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b7684:	b570      	push	{r4, r5, r6, lr}
   b7686:	4604      	mov	r4, r0
   b7688:	4616      	mov	r6, r2
   b768a:	460d      	mov	r5, r1
    releaseBuffer();
   b768c:	f7ff ffe8 	bl	b7660 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b7690:	2300      	movs	r3, #0
    _buffer = buffer;
   b7692:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b7694:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b7696:	b12e      	cbz	r6, b76a4 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b7698:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b769a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b769c:	3800      	subs	r0, #0
   b769e:	bf18      	it	ne
   b76a0:	2001      	movne	r0, #1
   b76a2:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b76a4:	2d00      	cmp	r5, #0
   b76a6:	d0f8      	beq.n	b769a <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b76a8:	4628      	mov	r0, r5
   b76aa:	f7fc fcf6 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b76ae:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b76b0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b76b2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b76b6:	2800      	cmp	r0, #0
   b76b8:	d0ef      	beq.n	b769a <_ZN3UDP9setBufferEjPh+0x16>
   b76ba:	e7ed      	b.n	b7698 <_ZN3UDP9setBufferEjPh+0x14>

000b76bc <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b76bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b76be:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b76c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b76c2:	4605      	mov	r5, r0
   b76c4:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b76c6:	b91a      	cbnz	r2, b76d0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b76c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b76ca:	b109      	cbz	r1, b76d0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b76cc:	f7ff ffda 	bl	b7684 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b76d0:	3404      	adds	r4, #4
   b76d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b76d4:	f105 0620 	add.w	r6, r5, #32
   b76d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b76da:	6823      	ldr	r3, [r4, #0]
   b76dc:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b76de:	2300      	movs	r3, #0
}
   b76e0:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b76e2:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b76e4:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b76e6:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b76e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b76ea <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b76ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b76ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b76ee:	4604      	mov	r4, r0
   b76f0:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b76f2:	b92a      	cbnz	r2, b7700 <_ZN3UDP11parsePacketEm+0x16>
   b76f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b76f6:	b119      	cbz	r1, b7700 <_ZN3UDP11parsePacketEm+0x16>
   b76f8:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b76fa:	f7ff ffc3 	bl	b7684 <_ZN3UDP9setBufferEjPh>
   b76fe:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b7700:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b7702:	2200      	movs	r2, #0
   b7704:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b7706:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b7708:	b141      	cbz	r1, b771c <_ZN3UDP11parsePacketEm+0x32>
   b770a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b770c:	b132      	cbz	r2, b771c <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b770e:	6820      	ldr	r0, [r4, #0]
   b7710:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b7712:	4620      	mov	r0, r4
   b7714:	47a8      	blx	r5
        if (result > 0) {
   b7716:	2800      	cmp	r0, #0
            _total = result;
   b7718:	bfc8      	it	gt
   b771a:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b771c:	6823      	ldr	r3, [r4, #0]
   b771e:	691b      	ldr	r3, [r3, #16]
   b7720:	4620      	mov	r0, r4
}
   b7722:	b003      	add	sp, #12
   b7724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b7728:	4718      	bx	r3
	...

000b772c <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b772c:	b510      	push	{r4, lr}
   b772e:	4b07      	ldr	r3, [pc, #28]	; (b774c <_ZN3UDPD1Ev+0x20>)
   b7730:	f103 0208 	add.w	r2, r3, #8
   b7734:	336c      	adds	r3, #108	; 0x6c
   b7736:	4604      	mov	r4, r0
   b7738:	6002      	str	r2, [r0, #0]
   b773a:	6103      	str	r3, [r0, #16]
   b773c:	f7ff fd80 	bl	b7240 <_ZN3UDP4stopEv>
   b7740:	4620      	mov	r0, r4
   b7742:	f7ff ff8d 	bl	b7660 <_ZN3UDP13releaseBufferEv>
   b7746:	4620      	mov	r0, r4
   b7748:	bd10      	pop	{r4, pc}
   b774a:	bf00      	nop
   b774c:	000bd9bc 	.word	0x000bd9bc

000b7750 <_ZN3UDPD0Ev>:
   b7750:	b510      	push	{r4, lr}
   b7752:	4604      	mov	r4, r0
   b7754:	f7ff ffea 	bl	b772c <_ZN3UDPD1Ev>
   b7758:	4620      	mov	r0, r4
   b775a:	214c      	movs	r1, #76	; 0x4c
   b775c:	f7fc fca1 	bl	b40a2 <_ZdlPvj>
   b7760:	4620      	mov	r0, r4
   b7762:	bd10      	pop	{r4, pc}

000b7764 <_ZN3UDP13joinMulticastERK9IPAddress>:

int UDP::joinMulticast(const IPAddress& ip) {
   b7764:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b7766:	6944      	ldr	r4, [r0, #20]
   b7768:	2c00      	cmp	r4, #0
   b776a:	db07      	blt.n	b777c <_ZN3UDP13joinMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b776c:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b7770:	2301      	movs	r3, #1
   b7772:	4620      	mov	r0, r4
}
   b7774:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b7778:	f7ff bef5 	b.w	b7566 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b777c:	f04f 30ff 	mov.w	r0, #4294967295
   b7780:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7784:	4770      	bx	lr

000b7786 <_ZN3UDP14leaveMulticastERK9IPAddress>:

int UDP::leaveMulticast(const IPAddress& ip) {
   b7786:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b7788:	6944      	ldr	r4, [r0, #20]
   b778a:	2c00      	cmp	r4, #0
   b778c:	db07      	blt.n	b779e <_ZN3UDP14leaveMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b778e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b7792:	2300      	movs	r3, #0
   b7794:	4620      	mov	r0, r4
}
   b7796:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b779a:	f7ff bee4 	b.w	b7566 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b779e:	f04f 30ff 	mov.w	r0, #4294967295
   b77a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   b77a6:	4770      	bx	lr

000b77a8 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b77a8:	4770      	bx	lr

000b77aa <_ZN21StringPrintableHelperD0Ev>:
   b77aa:	b510      	push	{r4, lr}
   b77ac:	210c      	movs	r1, #12
   b77ae:	4604      	mov	r4, r0
   b77b0:	f7fc fc77 	bl	b40a2 <_ZdlPvj>
   b77b4:	4620      	mov	r0, r4
   b77b6:	bd10      	pop	{r4, pc}

000b77b8 <_ZN6StringD1Ev>:
String::~String()
   b77b8:	b510      	push	{r4, lr}
   b77ba:	4604      	mov	r4, r0
	free(buffer);
   b77bc:	6800      	ldr	r0, [r0, #0]
   b77be:	f7ff fb35 	bl	b6e2c <free>
}
   b77c2:	4620      	mov	r0, r4
   b77c4:	bd10      	pop	{r4, pc}

000b77c6 <_ZN6String10invalidateEv>:
{
   b77c6:	b510      	push	{r4, lr}
   b77c8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b77ca:	6800      	ldr	r0, [r0, #0]
   b77cc:	b108      	cbz	r0, b77d2 <_ZN6String10invalidateEv+0xc>
   b77ce:	f7ff fb2d 	bl	b6e2c <free>
	buffer = NULL;
   b77d2:	2300      	movs	r3, #0
	capacity = len = 0;
   b77d4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b77d8:	6023      	str	r3, [r4, #0]
}
   b77da:	bd10      	pop	{r4, pc}

000b77dc <_ZN6String12changeBufferEj>:
{
   b77dc:	b538      	push	{r3, r4, r5, lr}
   b77de:	4604      	mov	r4, r0
   b77e0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b77e2:	6800      	ldr	r0, [r0, #0]
   b77e4:	3101      	adds	r1, #1
   b77e6:	f7ff fb29 	bl	b6e3c <realloc>
	if (newbuffer) {
   b77ea:	b110      	cbz	r0, b77f2 <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b77ec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b77f0:	2001      	movs	r0, #1
}
   b77f2:	bd38      	pop	{r3, r4, r5, pc}

000b77f4 <_ZN6String7reserveEj>:
{
   b77f4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b77f6:	6803      	ldr	r3, [r0, #0]
{
   b77f8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b77fa:	b123      	cbz	r3, b7806 <_ZN6String7reserveEj+0x12>
   b77fc:	6843      	ldr	r3, [r0, #4]
   b77fe:	428b      	cmp	r3, r1
   b7800:	d301      	bcc.n	b7806 <_ZN6String7reserveEj+0x12>
   b7802:	2001      	movs	r0, #1
}
   b7804:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7806:	4620      	mov	r0, r4
   b7808:	f7ff ffe8 	bl	b77dc <_ZN6String12changeBufferEj>
   b780c:	2800      	cmp	r0, #0
   b780e:	d0f9      	beq.n	b7804 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7810:	68a3      	ldr	r3, [r4, #8]
   b7812:	2b00      	cmp	r3, #0
   b7814:	d1f5      	bne.n	b7802 <_ZN6String7reserveEj+0xe>
   b7816:	6822      	ldr	r2, [r4, #0]
   b7818:	7013      	strb	r3, [r2, #0]
   b781a:	e7f2      	b.n	b7802 <_ZN6String7reserveEj+0xe>

000b781c <_ZN6String4copyEPKcj>:
{
   b781c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b781e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7820:	4611      	mov	r1, r2
   b7822:	9201      	str	r2, [sp, #4]
{
   b7824:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7826:	f7ff ffe5 	bl	b77f4 <_ZN6String7reserveEj>
   b782a:	9a01      	ldr	r2, [sp, #4]
   b782c:	b928      	cbnz	r0, b783a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b782e:	4620      	mov	r0, r4
   b7830:	f7ff ffc9 	bl	b77c6 <_ZN6String10invalidateEv>
}
   b7834:	4620      	mov	r0, r4
   b7836:	b003      	add	sp, #12
   b7838:	bd30      	pop	{r4, r5, pc}
	len = length;
   b783a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b783c:	4629      	mov	r1, r5
   b783e:	6820      	ldr	r0, [r4, #0]
   b7840:	f003 fc83 	bl	bb14a <memcpy>
	buffer[len] = 0;
   b7844:	6822      	ldr	r2, [r4, #0]
   b7846:	68a3      	ldr	r3, [r4, #8]
   b7848:	2100      	movs	r1, #0
   b784a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b784c:	e7f2      	b.n	b7834 <_ZN6String4copyEPKcj+0x18>

000b784e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b784e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7850:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7852:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7856:	4604      	mov	r4, r0
	len = 0;
   b7858:	6083      	str	r3, [r0, #8]
	flags = 0;
   b785a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b785c:	b141      	cbz	r1, b7870 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b785e:	4608      	mov	r0, r1
   b7860:	9101      	str	r1, [sp, #4]
   b7862:	f003 fd10 	bl	bb286 <strlen>
   b7866:	9901      	ldr	r1, [sp, #4]
   b7868:	4602      	mov	r2, r0
   b786a:	4620      	mov	r0, r4
   b786c:	f7ff ffd6 	bl	b781c <_ZN6String4copyEPKcj>
}
   b7870:	4620      	mov	r0, r4
   b7872:	b002      	add	sp, #8
   b7874:	bd10      	pop	{r4, pc}

000b7876 <_ZN6String4moveERS_>:
{
   b7876:	b538      	push	{r3, r4, r5, lr}
   b7878:	4605      	mov	r5, r0
	if (buffer) {
   b787a:	6800      	ldr	r0, [r0, #0]
{
   b787c:	460c      	mov	r4, r1
	if (buffer) {
   b787e:	b168      	cbz	r0, b789c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7880:	686a      	ldr	r2, [r5, #4]
   b7882:	688b      	ldr	r3, [r1, #8]
   b7884:	429a      	cmp	r2, r3
   b7886:	d307      	bcc.n	b7898 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7888:	6809      	ldr	r1, [r1, #0]
   b788a:	f003 fcd6 	bl	bb23a <strcpy>
			len = rhs.len;
   b788e:	68a3      	ldr	r3, [r4, #8]
   b7890:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7892:	2300      	movs	r3, #0
	rhs.len = 0;
   b7894:	60a3      	str	r3, [r4, #8]
}
   b7896:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7898:	f7ff fac8 	bl	b6e2c <free>
	buffer = rhs.buffer;
   b789c:	6823      	ldr	r3, [r4, #0]
   b789e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b78a0:	6863      	ldr	r3, [r4, #4]
   b78a2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b78a4:	68a3      	ldr	r3, [r4, #8]
   b78a6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b78a8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b78aa:	e9c4 3300 	strd	r3, r3, [r4]
   b78ae:	e7f1      	b.n	b7894 <_ZN6String4moveERS_+0x1e>

000b78b0 <_ZN6StringaSEOS_>:
	if (this != &rval) move(rval);
   b78b0:	4288      	cmp	r0, r1
{
   b78b2:	b510      	push	{r4, lr}
   b78b4:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b78b6:	d001      	beq.n	b78bc <_ZN6StringaSEOS_+0xc>
   b78b8:	f7ff ffdd 	bl	b7876 <_ZN6String4moveERS_>
}
   b78bc:	4620      	mov	r0, r4
   b78be:	bd10      	pop	{r4, pc}

000b78c0 <_ZN6StringaSEPKc>:
{
   b78c0:	b513      	push	{r0, r1, r4, lr}
   b78c2:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b78c4:	b159      	cbz	r1, b78de <_ZN6StringaSEPKc+0x1e>
   b78c6:	4608      	mov	r0, r1
   b78c8:	9101      	str	r1, [sp, #4]
   b78ca:	f003 fcdc 	bl	bb286 <strlen>
   b78ce:	9901      	ldr	r1, [sp, #4]
   b78d0:	4602      	mov	r2, r0
   b78d2:	4620      	mov	r0, r4
   b78d4:	f7ff ffa2 	bl	b781c <_ZN6String4copyEPKcj>
}
   b78d8:	4620      	mov	r0, r4
   b78da:	b002      	add	sp, #8
   b78dc:	bd10      	pop	{r4, pc}
	else invalidate();
   b78de:	f7ff ff72 	bl	b77c6 <_ZN6String10invalidateEv>
   b78e2:	e7f9      	b.n	b78d8 <_ZN6StringaSEPKc+0x18>

000b78e4 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b78e4:	b510      	push	{r4, lr}
   b78e6:	4604      	mov	r4, r0
   b78e8:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b78ea:	2300      	movs	r3, #0
	capacity = 0;
   b78ec:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b78f0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b78f2:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b78f4:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b78f6:	a901      	add	r1, sp, #4
   b78f8:	f7ff fbd6 	bl	b70a8 <itoa>
	*this = buf;
   b78fc:	a901      	add	r1, sp, #4
   b78fe:	4620      	mov	r0, r4
   b7900:	f7ff ffde 	bl	b78c0 <_ZN6StringaSEPKc>
}
   b7904:	4620      	mov	r0, r4
   b7906:	b00a      	add	sp, #40	; 0x28
   b7908:	bd10      	pop	{r4, pc}

000b790a <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b790a:	b510      	push	{r4, lr}
   b790c:	4604      	mov	r4, r0
   b790e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7910:	2300      	movs	r3, #0
	capacity = 0;
   b7912:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7916:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7918:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b791a:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b791c:	a901      	add	r1, sp, #4
   b791e:	f7ff fb5a 	bl	b6fd6 <ltoa>
	*this = buf;
   b7922:	a901      	add	r1, sp, #4
   b7924:	4620      	mov	r0, r4
   b7926:	f7ff ffcb 	bl	b78c0 <_ZN6StringaSEPKc>
}
   b792a:	4620      	mov	r0, r4
   b792c:	b00a      	add	sp, #40	; 0x28
   b792e:	bd10      	pop	{r4, pc}

000b7930 <_ZN6String6concatEPKcj>:
{
   b7930:	b570      	push	{r4, r5, r6, lr}
   b7932:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b7934:	460e      	mov	r6, r1
   b7936:	b909      	cbnz	r1, b793c <_ZN6String6concatEPKcj+0xc>
   b7938:	2000      	movs	r0, #0
}
   b793a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b793c:	b16a      	cbz	r2, b795a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b793e:	6884      	ldr	r4, [r0, #8]
   b7940:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7942:	4621      	mov	r1, r4
   b7944:	f7ff ff56 	bl	b77f4 <_ZN6String7reserveEj>
   b7948:	2800      	cmp	r0, #0
   b794a:	d0f5      	beq.n	b7938 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b794c:	6828      	ldr	r0, [r5, #0]
   b794e:	68ab      	ldr	r3, [r5, #8]
   b7950:	4631      	mov	r1, r6
   b7952:	4418      	add	r0, r3
   b7954:	f003 fc71 	bl	bb23a <strcpy>
	len = newlen;
   b7958:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b795a:	2001      	movs	r0, #1
   b795c:	e7ed      	b.n	b793a <_ZN6String6concatEPKcj+0xa>

000b795e <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b795e:	688a      	ldr	r2, [r1, #8]
   b7960:	6809      	ldr	r1, [r1, #0]
   b7962:	f7ff bfe5 	b.w	b7930 <_ZN6String6concatEPKcj>

000b7966 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b7966:	b538      	push	{r3, r4, r5, lr}
   b7968:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b796a:	6880      	ldr	r0, [r0, #8]
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b796c:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b796e:	f7ff ffdf 	bl	b7930 <_ZN6String6concatEPKcj>
   b7972:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b7974:	6898      	ldr	r0, [r3, #8]
    }
   b7976:	1b40      	subs	r0, r0, r5
   b7978:	bd38      	pop	{r3, r4, r5, pc}

000b797a <_ZN6String6concatEPKc>:
{
   b797a:	b513      	push	{r0, r1, r4, lr}
   b797c:	4604      	mov	r4, r0
}
   b797e:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b7980:	b151      	cbz	r1, b7998 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b7982:	9101      	str	r1, [sp, #4]
   b7984:	f003 fc7f 	bl	bb286 <strlen>
   b7988:	9901      	ldr	r1, [sp, #4]
   b798a:	4602      	mov	r2, r0
   b798c:	4620      	mov	r0, r4
}
   b798e:	b002      	add	sp, #8
   b7990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b7994:	f7ff bfcc 	b.w	b7930 <_ZN6String6concatEPKcj>
}
   b7998:	b002      	add	sp, #8
   b799a:	bd10      	pop	{r4, pc}

000b799c <_ZN6String6concatEc>:
{
   b799c:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b799e:	2300      	movs	r3, #0
	buf[0] = c;
   b79a0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b79a4:	2201      	movs	r2, #1
   b79a6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b79a8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b79ac:	f7ff ffc0 	bl	b7930 <_ZN6String6concatEPKcj>
}
   b79b0:	b003      	add	sp, #12
   b79b2:	f85d fb04 	ldr.w	pc, [sp], #4

000b79b6 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b79b6:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b79b8:	6880      	ldr	r0, [r0, #8]
   b79ba:	f7ff ffef 	bl	b799c <_ZN6String6concatEc>
    }
   b79be:	bd08      	pop	{r3, pc}

000b79c0 <_ZplRK15StringSumHelperRK6String>:
{
   b79c0:	b510      	push	{r4, lr}
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b79c2:	688a      	ldr	r2, [r1, #8]
   b79c4:	6809      	ldr	r1, [r1, #0]
{
   b79c6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b79c8:	f7ff ffb2 	bl	b7930 <_ZN6String6concatEPKcj>
   b79cc:	b910      	cbnz	r0, b79d4 <_ZplRK15StringSumHelperRK6String+0x14>
   b79ce:	4620      	mov	r0, r4
   b79d0:	f7ff fef9 	bl	b77c6 <_ZN6String10invalidateEv>
}
   b79d4:	4620      	mov	r0, r4
   b79d6:	bd10      	pop	{r4, pc}

000b79d8 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b79d8:	b530      	push	{r4, r5, lr}
   b79da:	b085      	sub	sp, #20
	buffer = NULL;
   b79dc:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b79de:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b79e0:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b79e2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b79e6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b79e8:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b79ea:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b79ec:	4b06      	ldr	r3, [pc, #24]	; (b7a08 <_ZN6StringC1ERK9Printable+0x30>)
   b79ee:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b79f0:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b79f2:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b79f4:	f7ff fefe 	bl	b77f4 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b79f8:	682b      	ldr	r3, [r5, #0]
   b79fa:	a901      	add	r1, sp, #4
   b79fc:	681b      	ldr	r3, [r3, #0]
   b79fe:	4628      	mov	r0, r5
   b7a00:	4798      	blx	r3
}
   b7a02:	4620      	mov	r0, r4
   b7a04:	b005      	add	sp, #20
   b7a06:	bd30      	pop	{r4, r5, pc}
   b7a08:	000bda34 	.word	0x000bda34

000b7a0c <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
   b7a0c:	b40e      	push	{r1, r2, r3}
   b7a0e:	b570      	push	{r4, r5, r6, lr}
   b7a10:	b087      	sub	sp, #28
   b7a12:	ad0b      	add	r5, sp, #44	; 0x2c
   b7a14:	4604      	mov	r4, r0
   b7a16:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a1a:	9201      	str	r2, [sp, #4]
   b7a1c:	462b      	mov	r3, r5
   b7a1e:	2105      	movs	r1, #5
   b7a20:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b7a22:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a24:	f7ff fa22 	bl	b6e6c <vsnprintf>
    va_end(marker);

    String result;
   b7a28:	490b      	ldr	r1, [pc, #44]	; (b7a58 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a2a:	4606      	mov	r6, r0
    String result;
   b7a2c:	4620      	mov	r0, r4
   b7a2e:	f7ff ff0e 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b7a32:	4631      	mov	r1, r6
   b7a34:	4620      	mov	r0, r4
   b7a36:	f7ff fedd 	bl	b77f4 <_ZN6String7reserveEj>
    if (result.buffer) {
   b7a3a:	6820      	ldr	r0, [r4, #0]
   b7a3c:	b130      	cbz	r0, b7a4c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7a3e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b7a40:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7a42:	462b      	mov	r3, r5
   b7a44:	1c71      	adds	r1, r6, #1
   b7a46:	f7ff fa11 	bl	b6e6c <vsnprintf>
        va_end(marker);
        result.len = n;
   b7a4a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b7a4c:	4620      	mov	r0, r4
   b7a4e:	b007      	add	sp, #28
   b7a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7a54:	b003      	add	sp, #12
   b7a56:	4770      	bx	lr
   b7a58:	000bd795 	.word	0x000bd795

000b7a5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7a5c:	4770      	bx	lr

000b7a5e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7a5e:	4770      	bx	lr

000b7a60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7a60:	4770      	bx	lr

000b7a62 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7a62:	4770      	bx	lr

000b7a64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7a64:	4b06      	ldr	r3, [pc, #24]	; (b7a80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7a66:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7a68:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7a6a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7a6e:	d005      	beq.n	b7a7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7a70:	4608      	mov	r0, r1
   b7a72:	f002 fd5f 	bl	ba534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7a76:	2800      	cmp	r0, #0
   b7a78:	bf08      	it	eq
   b7a7a:	2400      	moveq	r4, #0
      }
   b7a7c:	4620      	mov	r0, r4
   b7a7e:	bd10      	pop	{r4, pc}
   b7a80:	000bdbe4 	.word	0x000bdbe4

000b7a84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7a84:	4b06      	ldr	r3, [pc, #24]	; (b7aa0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7a86:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7a88:	b510      	push	{r4, lr}
   b7a8a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7a8e:	d005      	beq.n	b7a9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7a90:	4608      	mov	r0, r1
   b7a92:	f002 fd4f 	bl	ba534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7a96:	2800      	cmp	r0, #0
   b7a98:	bf08      	it	eq
   b7a9a:	2400      	moveq	r4, #0
      }
   b7a9c:	4620      	mov	r0, r4
   b7a9e:	bd10      	pop	{r4, pc}
   b7aa0:	000bdbe4 	.word	0x000bdbe4

000b7aa4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7aa4:	4b06      	ldr	r3, [pc, #24]	; (b7ac0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7aa6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7aa8:	b510      	push	{r4, lr}
   b7aaa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7aae:	d005      	beq.n	b7abc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7ab0:	4608      	mov	r0, r1
   b7ab2:	f002 fd3f 	bl	ba534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7ab6:	2800      	cmp	r0, #0
   b7ab8:	bf08      	it	eq
   b7aba:	2400      	moveq	r4, #0
      }
   b7abc:	4620      	mov	r0, r4
   b7abe:	bd10      	pop	{r4, pc}
   b7ac0:	000bdbe4 	.word	0x000bdbe4

000b7ac4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7ac4:	b510      	push	{r4, lr}
   b7ac6:	2168      	movs	r1, #104	; 0x68
   b7ac8:	4604      	mov	r4, r0
   b7aca:	f7fc faea 	bl	b40a2 <_ZdlPvj>
   b7ace:	4620      	mov	r0, r4
   b7ad0:	bd10      	pop	{r4, pc}

000b7ad2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7ad2:	b510      	push	{r4, lr}
   b7ad4:	2128      	movs	r1, #40	; 0x28
   b7ad6:	4604      	mov	r4, r0
   b7ad8:	f7fc fae3 	bl	b40a2 <_ZdlPvj>
   b7adc:	4620      	mov	r0, r4
   b7ade:	bd10      	pop	{r4, pc}

000b7ae0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7ae0:	b510      	push	{r4, lr}
   b7ae2:	2130      	movs	r1, #48	; 0x30
   b7ae4:	4604      	mov	r4, r0
   b7ae6:	f7fc fadc 	bl	b40a2 <_ZdlPvj>
   b7aea:	4620      	mov	r0, r4
   b7aec:	bd10      	pop	{r4, pc}

000b7aee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7aee:	2168      	movs	r1, #104	; 0x68
   b7af0:	f7fc bad7 	b.w	b40a2 <_ZdlPvj>

000b7af4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7af4:	2128      	movs	r1, #40	; 0x28
   b7af6:	f7fc bad4 	b.w	b40a2 <_ZdlPvj>

000b7afa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7afa:	2130      	movs	r1, #48	; 0x30
   b7afc:	f7fc bad1 	b.w	b40a2 <_ZdlPvj>

000b7b00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7b02:	2500      	movs	r5, #0
   b7b04:	1cec      	adds	r4, r5, #3
   b7b06:	428c      	cmp	r4, r1
   b7b08:	d80d      	bhi.n	b7b26 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7b0a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7b0c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7b0e:	5d87      	ldrb	r7, [r0, r6]
   b7b10:	4297      	cmp	r7, r2
   b7b12:	d105      	bne.n	b7b20 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7b14:	4426      	add	r6, r4
   b7b16:	42b1      	cmp	r1, r6
   b7b18:	d305      	bcc.n	b7b26 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7b1a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7b1c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7b20:	3401      	adds	r4, #1
   b7b22:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7b24:	e7ee      	b.n	b7b04 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7b26:	2000      	movs	r0, #0
   b7b28:	e7f9      	b.n	b7b1e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7b2c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7b2c:	4a02      	ldr	r2, [pc, #8]	; (b7b38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7b2e:	4903      	ldr	r1, [pc, #12]	; (b7b3c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7b30:	200a      	movs	r0, #10
   b7b32:	f7ff b887 	b.w	b6c44 <panic_>
   b7b36:	bf00      	nop
   b7b38:	000b67f1 	.word	0x000b67f1
   b7b3c:	000bda44 	.word	0x000bda44

000b7b40 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7b40:	4603      	mov	r3, r0
   b7b42:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b7b44:	681b      	ldr	r3, [r3, #0]
   b7b46:	e9d3 2100 	ldrd	r2, r1, [r3]
   b7b4a:	4710      	bx	r2

000b7b4c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7b4c:	b430      	push	{r4, r5}
   b7b4e:	460d      	mov	r5, r1
   b7b50:	4611      	mov	r1, r2
   b7b52:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7b54:	6803      	ldr	r3, [r0, #0]
   b7b56:	6809      	ldr	r1, [r1, #0]
   b7b58:	6828      	ldr	r0, [r5, #0]
   b7b5a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7b5e:	46a4      	mov	ip, r4
      }
   b7b60:	bc30      	pop	{r4, r5}
   b7b62:	4760      	bx	ip

000b7b64 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b7b64:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7b66:	b538      	push	{r3, r4, r5, lr}
   b7b68:	4604      	mov	r4, r0
	switch (__op)
   b7b6a:	d102      	bne.n	b7b72 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7b6c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7b6e:	6023      	str	r3, [r4, #0]
	}
   b7b70:	e003      	b.n	b7b7a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b7b72:	2a02      	cmp	r2, #2
   b7b74:	d003      	beq.n	b7b7e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b7b76:	2a03      	cmp	r2, #3
   b7b78:	d00d      	beq.n	b7b96 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b7b7a:	2000      	movs	r0, #0
   b7b7c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7b7e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7b80:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7b82:	f7fc fa88 	bl	b4096 <_Znwj>
   b7b86:	4603      	mov	r3, r0
   b7b88:	2800      	cmp	r0, #0
   b7b8a:	d0f0      	beq.n	b7b6e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b7b8c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7b90:	e883 0003 	stmia.w	r3, {r0, r1}
   b7b94:	e7eb      	b.n	b7b6e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7b96:	6800      	ldr	r0, [r0, #0]
   b7b98:	2800      	cmp	r0, #0
   b7b9a:	d0ee      	beq.n	b7b7a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b7b9c:	2108      	movs	r1, #8
   b7b9e:	f7fc fa80 	bl	b40a2 <_ZdlPvj>
   b7ba2:	e7ea      	b.n	b7b7a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b7ba4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7ba4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7ba6:	b538      	push	{r3, r4, r5, lr}
   b7ba8:	4604      	mov	r4, r0
	switch (__op)
   b7baa:	d102      	bne.n	b7bb2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7bac:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7bae:	6023      	str	r3, [r4, #0]
	}
   b7bb0:	e003      	b.n	b7bba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7bb2:	2a02      	cmp	r2, #2
   b7bb4:	d003      	beq.n	b7bbe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7bb6:	2a03      	cmp	r2, #3
   b7bb8:	d00d      	beq.n	b7bd6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7bba:	2000      	movs	r0, #0
   b7bbc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7bbe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7bc0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7bc2:	f7fc fa68 	bl	b4096 <_Znwj>
   b7bc6:	4603      	mov	r3, r0
   b7bc8:	2800      	cmp	r0, #0
   b7bca:	d0f0      	beq.n	b7bae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7bcc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7bd0:	e883 0003 	stmia.w	r3, {r0, r1}
   b7bd4:	e7eb      	b.n	b7bae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7bd6:	6800      	ldr	r0, [r0, #0]
   b7bd8:	2800      	cmp	r0, #0
   b7bda:	d0ee      	beq.n	b7bba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7bdc:	2108      	movs	r1, #8
   b7bde:	f7fc fa60 	bl	b40a2 <_ZdlPvj>
   b7be2:	e7ea      	b.n	b7bba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7be4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7be4:	b510      	push	{r4, lr}
   b7be6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7be8:	3058      	adds	r0, #88	; 0x58
   b7bea:	f7fc fc0b 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7bee:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7bf6:	f7ff bddf 	b.w	b77b8 <_ZN6StringD1Ev>

000b7bfa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7bfa:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7bfc:	6843      	ldr	r3, [r0, #4]
   b7bfe:	3b01      	subs	r3, #1
    {
   b7c00:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7c02:	6043      	str	r3, [r0, #4]
   b7c04:	b963      	cbnz	r3, b7c20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7c06:	6803      	ldr	r3, [r0, #0]
   b7c08:	689b      	ldr	r3, [r3, #8]
   b7c0a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7c0c:	68a3      	ldr	r3, [r4, #8]
   b7c0e:	3b01      	subs	r3, #1
   b7c10:	60a3      	str	r3, [r4, #8]
   b7c12:	b92b      	cbnz	r3, b7c20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7c14:	6823      	ldr	r3, [r4, #0]
   b7c16:	4620      	mov	r0, r4
   b7c18:	68db      	ldr	r3, [r3, #12]
    }
   b7c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7c1e:	4718      	bx	r3
    }
   b7c20:	bd10      	pop	{r4, pc}

000b7c22 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7c22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7c26:	b2da      	uxtb	r2, r3
   b7c28:	2a09      	cmp	r2, #9
   b7c2a:	d801      	bhi.n	b7c30 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7c2c:	4618      	mov	r0, r3
   b7c2e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7c30:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7c34:	2b05      	cmp	r3, #5
   b7c36:	d801      	bhi.n	b7c3c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7c38:	3857      	subs	r0, #87	; 0x57
   b7c3a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7c3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7c40:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7c42:	bf94      	ite	ls
   b7c44:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7c46:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b7c4a:	4770      	bx	lr

000b7c4c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7c4c:	b510      	push	{r4, lr}
            locked_(false) {
   b7c4e:	2300      	movs	r3, #0
   b7c50:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7c52:	4b04      	ldr	r3, [pc, #16]	; (b7c64 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7c54:	4604      	mov	r4, r0
   b7c56:	6818      	ldr	r0, [r3, #0]
   b7c58:	f7fe febc 	bl	b69d4 <os_mutex_recursive_lock>
        locked_ = true;
   b7c5c:	2301      	movs	r3, #1
   b7c5e:	7023      	strb	r3, [r4, #0]
    }
   b7c60:	4620      	mov	r0, r4
   b7c62:	bd10      	pop	{r4, pc}
   b7c64:	2003e694 	.word	0x2003e694

000b7c68 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7c68:	b510      	push	{r4, lr}
        if (locked_) {
   b7c6a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7c6c:	4604      	mov	r4, r0
        if (locked_) {
   b7c6e:	b11b      	cbz	r3, b7c78 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7c70:	4b02      	ldr	r3, [pc, #8]	; (b7c7c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7c72:	6818      	ldr	r0, [r3, #0]
   b7c74:	f7fe feb6 	bl	b69e4 <os_mutex_recursive_unlock>
    }
   b7c78:	4620      	mov	r0, r4
   b7c7a:	bd10      	pop	{r4, pc}
   b7c7c:	2003e694 	.word	0x2003e694

000b7c80 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7c80:	b082      	sub	sp, #8
   b7c82:	4603      	mov	r3, r0
    address_ = addr;
   b7c84:	6808      	ldr	r0, [r1, #0]
   b7c86:	6849      	ldr	r1, [r1, #4]
   b7c88:	466a      	mov	r2, sp
   b7c8a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7c8c:	466a      	mov	r2, sp
   b7c8e:	ca03      	ldmia	r2!, {r0, r1}
   b7c90:	6018      	str	r0, [r3, #0]
}
   b7c92:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7c94:	6059      	str	r1, [r3, #4]
}
   b7c96:	b002      	add	sp, #8
   b7c98:	4770      	bx	lr

000b7c9a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7c9a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7c9c:	7982      	ldrb	r2, [r0, #6]
   b7c9e:	798b      	ldrb	r3, [r1, #6]
   b7ca0:	429a      	cmp	r2, r3
   b7ca2:	d106      	bne.n	b7cb2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7ca4:	2206      	movs	r2, #6
   b7ca6:	f003 fa40 	bl	bb12a <memcmp>
   b7caa:	fab0 f080 	clz	r0, r0
   b7cae:	0940      	lsrs	r0, r0, #5
}
   b7cb0:	bd08      	pop	{r3, pc}
    return false;
   b7cb2:	2000      	movs	r0, #0
   b7cb4:	e7fc      	b.n	b7cb0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7cb6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7cb6:	f04f 33ff 	mov.w	r3, #4294967295
   b7cba:	6003      	str	r3, [r0, #0]
   b7cbc:	8083      	strh	r3, [r0, #4]
}
   b7cbe:	2000      	movs	r0, #0
   b7cc0:	4770      	bx	lr

000b7cc2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7cc2:	b508      	push	{r3, lr}
   b7cc4:	4602      	mov	r2, r0
        : address_{} {
   b7cc6:	2100      	movs	r1, #0
   b7cc8:	6001      	str	r1, [r0, #0]
   b7cca:	6041      	str	r1, [r0, #4]
    clear();
   b7ccc:	f7ff fff3 	bl	b7cb6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7cd0:	7191      	strb	r1, [r2, #6]
}
   b7cd2:	4610      	mov	r0, r2
   b7cd4:	bd08      	pop	{r3, pc}
	...

000b7cd8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7cd8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7cda:	2301      	movs	r3, #1
   b7cdc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7cde:	4b05      	ldr	r3, [pc, #20]	; (b7cf4 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7ce0:	4602      	mov	r2, r0
   b7ce2:	f103 0110 	add.w	r1, r3, #16
   b7ce6:	f853 4b04 	ldr.w	r4, [r3], #4
   b7cea:	f842 4b04 	str.w	r4, [r2], #4
   b7cee:	428b      	cmp	r3, r1
   b7cf0:	d1f9      	bne.n	b7ce6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7cf2:	bd10      	pop	{r4, pc}
   b7cf4:	000bdbf2 	.word	0x000bdbf2

000b7cf8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7cf8:	b510      	push	{r4, lr}
    if (uuid128) {
   b7cfa:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7cfc:	4604      	mov	r4, r0
    if (uuid128) {
   b7cfe:	b1b1      	cbz	r1, b7d2e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7d00:	2a01      	cmp	r2, #1
   b7d02:	f101 0210 	add.w	r2, r1, #16
   b7d06:	d10a      	bne.n	b7d1e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7d08:	4601      	mov	r1, r0
   b7d0a:	f853 0b04 	ldr.w	r0, [r3], #4
   b7d0e:	f841 0b04 	str.w	r0, [r1], #4
   b7d12:	4293      	cmp	r3, r2
   b7d14:	d1f9      	bne.n	b7d0a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7d16:	2301      	movs	r3, #1
   b7d18:	6123      	str	r3, [r4, #16]
}
   b7d1a:	4620      	mov	r0, r4
   b7d1c:	bd10      	pop	{r4, pc}
   b7d1e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7d20:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7d24:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7d28:	429a      	cmp	r2, r3
   b7d2a:	d1f9      	bne.n	b7d20 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7d2c:	e7f3      	b.n	b7d16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7d2e:	2210      	movs	r2, #16
   b7d30:	f003 fa33 	bl	bb19a <memset>
   b7d34:	e7f1      	b.n	b7d1a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7d36 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7d36:	b538      	push	{r3, r4, r5, lr}
   b7d38:	4604      	mov	r4, r0
   b7d3a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7d3c:	461a      	mov	r2, r3
   b7d3e:	f7ff ffdb 	bl	b7cf8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7d42:	81a5      	strh	r5, [r4, #12]
}
   b7d44:	4620      	mov	r0, r4
   b7d46:	bd38      	pop	{r3, r4, r5, pc}

000b7d48 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7d48:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7d4a:	6902      	ldr	r2, [r0, #16]
   b7d4c:	b922      	cbnz	r2, b7d58 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7d4e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7d50:	3800      	subs	r0, #0
   b7d52:	bf18      	it	ne
   b7d54:	2001      	movne	r0, #1
}
   b7d56:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7d58:	4902      	ldr	r1, [pc, #8]	; (b7d64 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7d5a:	2210      	movs	r2, #16
   b7d5c:	f003 f9e5 	bl	bb12a <memcmp>
   b7d60:	e7f6      	b.n	b7d50 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7d62:	bf00      	nop
   b7d64:	000bdc12 	.word	0x000bdc12

000b7d68 <_ZNK8particle7BleUuid4typeEv>:
}
   b7d68:	6900      	ldr	r0, [r0, #16]
   b7d6a:	4770      	bx	lr

000b7d6c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7d6c:	b538      	push	{r3, r4, r5, lr}
   b7d6e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7d70:	2214      	movs	r2, #20
   b7d72:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7d74:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7d76:	f003 fa10 	bl	bb19a <memset>
    if (type_ == BleUuidType::SHORT) {
   b7d7a:	6923      	ldr	r3, [r4, #16]
   b7d7c:	b91b      	cbnz	r3, b7d86 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7d7e:	89a3      	ldrh	r3, [r4, #12]
   b7d80:	802b      	strh	r3, [r5, #0]
}
   b7d82:	4628      	mov	r0, r5
   b7d84:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7d86:	2301      	movs	r3, #1
   b7d88:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7d8a:	4621      	mov	r1, r4
   b7d8c:	462b      	mov	r3, r5
   b7d8e:	f104 0210 	add.w	r2, r4, #16
   b7d92:	f851 0b04 	ldr.w	r0, [r1], #4
   b7d96:	f843 0b04 	str.w	r0, [r3], #4
   b7d9a:	4291      	cmp	r1, r2
   b7d9c:	d1f9      	bne.n	b7d92 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7d9e:	e7f0      	b.n	b7d82 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7da0 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7da0:	8980      	ldrh	r0, [r0, #12]
   b7da2:	4770      	bx	lr

000b7da4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7da4:	4770      	bx	lr

000b7da6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7da6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7da8:	6902      	ldr	r2, [r0, #16]
   b7daa:	690b      	ldr	r3, [r1, #16]
   b7dac:	429a      	cmp	r2, r3
   b7dae:	d106      	bne.n	b7dbe <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7db0:	2210      	movs	r2, #16
   b7db2:	f003 f9ba 	bl	bb12a <memcmp>
   b7db6:	fab0 f080 	clz	r0, r0
   b7dba:	0940      	lsrs	r0, r0, #5
}
   b7dbc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7dbe:	2000      	movs	r0, #0
   b7dc0:	e7fc      	b.n	b7dbc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7dc4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7dc4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7dc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7dca:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7dcc:	4b34      	ldr	r3, [pc, #208]	; (b7ea0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7dce:	460c      	mov	r4, r1
   b7dd0:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7dd2:	4602      	mov	r2, r0
   b7dd4:	f103 0110 	add.w	r1, r3, #16
   b7dd8:	f853 0b04 	ldr.w	r0, [r3], #4
   b7ddc:	f842 0b04 	str.w	r0, [r2], #4
   b7de0:	428b      	cmp	r3, r1
   b7de2:	d1f9      	bne.n	b7dd8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7de4:	b344      	cbz	r4, b7e38 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7de6:	2124      	movs	r1, #36	; 0x24
   b7de8:	4620      	mov	r0, r4
   b7dea:	f003 fa7b 	bl	bb2e4 <strnlen>
   b7dee:	2804      	cmp	r0, #4
   b7df0:	f04f 0500 	mov.w	r5, #0
   b7df4:	d123      	bne.n	b7e3e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7df6:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7dfa:	af01      	add	r7, sp, #4
   b7dfc:	1ca5      	adds	r5, r4, #2
   b7dfe:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7e00:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7e04:	f7ff ff0d 	bl	b7c22 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7e08:	f1b0 0800 	subs.w	r8, r0, #0
   b7e0c:	db12      	blt.n	b7e34 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7e0e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7e12:	f7ff ff06 	bl	b7c22 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7e16:	2800      	cmp	r0, #0
   b7e18:	db0c      	blt.n	b7e34 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7e1a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7e1c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7e20:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7e22:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7e26:	d1eb      	bne.n	b7e00 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7e28:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7e2c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7e2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7e32:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7e34:	2300      	movs	r3, #0
   b7e36:	6133      	str	r3, [r6, #16]
}
   b7e38:	b002      	add	sp, #8
   b7e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7e3e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7e42:	2124      	movs	r1, #36	; 0x24
   b7e44:	4620      	mov	r0, r4
   b7e46:	f003 fa4d 	bl	bb2e4 <strnlen>
   b7e4a:	42a8      	cmp	r0, r5
   b7e4c:	d807      	bhi.n	b7e5e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7e4e:	4642      	mov	r2, r8
   b7e50:	2100      	movs	r1, #0
   b7e52:	4630      	mov	r0, r6
}
   b7e54:	b002      	add	sp, #8
   b7e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7e5a:	f003 b99e 	b.w	bb19a <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7e5e:	f1b8 0f00 	cmp.w	r8, #0
   b7e62:	d0e9      	beq.n	b7e38 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7e64:	5d60      	ldrb	r0, [r4, r5]
   b7e66:	f7ff fedc 	bl	b7c22 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7e6a:	0603      	lsls	r3, r0, #24
   b7e6c:	d415      	bmi.n	b7e9a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7e6e:	0100      	lsls	r0, r0, #4
   b7e70:	f108 38ff 	add.w	r8, r8, #4294967295
   b7e74:	b2c7      	uxtb	r7, r0
   b7e76:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7e7a:	2124      	movs	r1, #36	; 0x24
   b7e7c:	4620      	mov	r0, r4
   b7e7e:	f003 fa31 	bl	bb2e4 <strnlen>
   b7e82:	3501      	adds	r5, #1
   b7e84:	42a8      	cmp	r0, r5
   b7e86:	d908      	bls.n	b7e9a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7e88:	5d60      	ldrb	r0, [r4, r5]
   b7e8a:	f7ff feca 	bl	b7c22 <_ZN8particle11hexToNibbleEc>
   b7e8e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7e90:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7e92:	bfa4      	itt	ge
   b7e94:	4338      	orrge	r0, r7
   b7e96:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7e9a:	3501      	adds	r5, #1
   b7e9c:	e7d1      	b.n	b7e42 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7e9e:	bf00      	nop
   b7ea0:	000bdbf2 	.word	0x000bdbf2

000b7ea4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7ea4:	b513      	push	{r0, r1, r4, lr}
   b7ea6:	4604      	mov	r4, r0
   b7ea8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7eaa:	f7ff ff15 	bl	b7cd8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7eae:	4620      	mov	r0, r4
   b7eb0:	9901      	ldr	r1, [sp, #4]
   b7eb2:	f7ff ff87 	bl	b7dc4 <_ZN8particle7BleUuid9constructEPKc>
}
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	b002      	add	sp, #8
   b7eba:	bd10      	pop	{r4, pc}

000b7ebc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7ebc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7ec2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7ec4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7ec6:	8043      	strh	r3, [r0, #2]
   b7ec8:	220e      	movs	r2, #14
   b7eca:	4629      	mov	r1, r5
   b7ecc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7ece:	7105      	strb	r5, [r0, #4]
   b7ed0:	3006      	adds	r0, #6
   b7ed2:	f003 f962 	bl	bb19a <memset>
   b7ed6:	f104 0014 	add.w	r0, r4, #20
   b7eda:	f7ff fefd 	bl	b7cd8 <_ZN8particle7BleUuidC1Ev>
   b7ede:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7ee2:	f7ff fef9 	bl	b7cd8 <_ZN8particle7BleUuidC1Ev>
   b7ee6:	4904      	ldr	r1, [pc, #16]	; (b7ef8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7ee8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7eec:	f7ff fcaf 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7ef0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7ef2:	4620      	mov	r0, r4
   b7ef4:	bd38      	pop	{r3, r4, r5, pc}
   b7ef6:	bf00      	nop
   b7ef8:	000bd795 	.word	0x000bd795

000b7efc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7efc:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7efe:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7f02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7f06:	4293      	cmp	r3, r2
   b7f08:	4618      	mov	r0, r3
   b7f0a:	d006      	beq.n	b7f1a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7f0c:	6804      	ldr	r4, [r0, #0]
   b7f0e:	8824      	ldrh	r4, [r4, #0]
   b7f10:	428c      	cmp	r4, r1
   b7f12:	f103 0308 	add.w	r3, r3, #8
   b7f16:	d1f6      	bne.n	b7f06 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7f18:	bd10      	pop	{r4, pc}
        return nullptr;
   b7f1a:	2000      	movs	r0, #0
   b7f1c:	e7fc      	b.n	b7f18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7f20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f22:	4606      	mov	r6, r0
   b7f24:	b085      	sub	sp, #20
   b7f26:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7f28:	460d      	mov	r5, r1
   b7f2a:	2900      	cmp	r1, #0
   b7f2c:	d050      	beq.n	b7fd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7f2e:	2a00      	cmp	r2, #0
   b7f30:	d04e      	beq.n	b7fd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7f32:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7f34:	7823      	ldrb	r3, [r4, #0]
   b7f36:	2af4      	cmp	r2, #244	; 0xf4
   b7f38:	bf28      	it	cs
   b7f3a:	22f4      	movcs	r2, #244	; 0xf4
   b7f3c:	b343      	cbz	r3, b7f90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7f3e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7f40:	0798      	lsls	r0, r3, #30
   b7f42:	d509      	bpl.n	b7f58 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7f44:	89a0      	ldrh	r0, [r4, #12]
   b7f46:	9203      	str	r2, [sp, #12]
   b7f48:	2300      	movs	r3, #0
   b7f4a:	f7fe fcad 	bl	b68a8 <hal_ble_gatt_server_set_characteristic_value>
   b7f4e:	2800      	cmp	r0, #0
   b7f50:	9a03      	ldr	r2, [sp, #12]
   b7f52:	da03      	bge.n	b7f5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7f54:	b005      	add	sp, #20
   b7f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7f58:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7f5c:	6834      	ldr	r4, [r6, #0]
   b7f5e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7f60:	06d9      	lsls	r1, r3, #27
   b7f62:	d509      	bpl.n	b7f78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7f64:	2f01      	cmp	r7, #1
   b7f66:	d007      	beq.n	b7f78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7f68:	89a0      	ldrh	r0, [r4, #12]
   b7f6a:	2300      	movs	r3, #0
   b7f6c:	4629      	mov	r1, r5
}
   b7f6e:	b005      	add	sp, #20
   b7f70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7f74:	f7fe bcca 	b.w	b690c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7f78:	069b      	lsls	r3, r3, #26
   b7f7a:	d5eb      	bpl.n	b7f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7f7c:	2f02      	cmp	r7, #2
   b7f7e:	d0e9      	beq.n	b7f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7f80:	89a0      	ldrh	r0, [r4, #12]
   b7f82:	2300      	movs	r3, #0
   b7f84:	4629      	mov	r1, r5
}
   b7f86:	b005      	add	sp, #20
   b7f88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7f8c:	f7fe bcc8 	b.w	b6920 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7f90:	8860      	ldrh	r0, [r4, #2]
   b7f92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7f96:	4288      	cmp	r0, r1
   b7f98:	d01c      	beq.n	b7fd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7f9a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7f9c:	074e      	lsls	r6, r1, #29
   b7f9e:	d501      	bpl.n	b7fa4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7fa0:	2f01      	cmp	r7, #1
   b7fa2:	d104      	bne.n	b7fae <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7fa4:	070b      	lsls	r3, r1, #28
   b7fa6:	d409      	bmi.n	b7fbc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7fa8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7fac:	e7d2      	b.n	b7f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fae:	89a1      	ldrh	r1, [r4, #12]
   b7fb0:	9300      	str	r3, [sp, #0]
   b7fb2:	4613      	mov	r3, r2
   b7fb4:	462a      	mov	r2, r5
   b7fb6:	f7fe fc8b 	bl	b68d0 <hal_ble_gatt_client_write_without_response>
   b7fba:	e7cb      	b.n	b7f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7fbc:	2f02      	cmp	r7, #2
   b7fbe:	d0f3      	beq.n	b7fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fc0:	2300      	movs	r3, #0
   b7fc2:	89a1      	ldrh	r1, [r4, #12]
   b7fc4:	9300      	str	r3, [sp, #0]
   b7fc6:	4613      	mov	r3, r2
   b7fc8:	462a      	mov	r2, r5
   b7fca:	f7fe fc77 	bl	b68bc <hal_ble_gatt_client_write_with_response>
   b7fce:	e7c1      	b.n	b7f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7fd0:	4802      	ldr	r0, [pc, #8]	; (b7fdc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7fd2:	e7bf      	b.n	b7f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7fd4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7fd8:	e7bc      	b.n	b7f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7fda:	bf00      	nop
   b7fdc:	fffffef2 	.word	0xfffffef2

000b7fe0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7fe2:	460c      	mov	r4, r1
   b7fe4:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7fe6:	21f4      	movs	r1, #244	; 0xf4
   b7fe8:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7fea:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7fec:	f003 f97a 	bl	bb2e4 <strnlen>
   b7ff0:	9b01      	ldr	r3, [sp, #4]
   b7ff2:	4602      	mov	r2, r0
   b7ff4:	4621      	mov	r1, r4
   b7ff6:	4628      	mov	r0, r5
}
   b7ff8:	b003      	add	sp, #12
   b7ffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7ffe:	f7ff bf8f 	b.w	b7f20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b8004 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8008:	2600      	movs	r6, #0
   b800a:	6006      	str	r6, [r0, #0]
   b800c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b800e:	2028      	movs	r0, #40	; 0x28
   b8010:	460c      	mov	r4, r1
   b8012:	f7fc f840 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8016:	1e05      	subs	r5, r0, #0
   b8018:	f105 080c 	add.w	r8, r5, #12
   b801c:	d00f      	beq.n	b803e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b801e:	2301      	movs	r3, #1
   b8020:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8024:	4b08      	ldr	r3, [pc, #32]	; (b8048 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8026:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8028:	4640      	mov	r0, r8
   b802a:	f7ff fe55 	bl	b7cd8 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b802e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8030:	622e      	str	r6, [r5, #32]
   b8032:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8036:	4646      	mov	r6, r8
   b8038:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b803a:	6823      	ldr	r3, [r4, #0]
   b803c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b803e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8042:	4638      	mov	r0, r7
   b8044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8048:	000bdbb4 	.word	0x000bdbb4

000b804c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b804c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b804e:	2500      	movs	r5, #0
   b8050:	6005      	str	r5, [r0, #0]
   b8052:	4606      	mov	r6, r0
   b8054:	2030      	movs	r0, #48	; 0x30
   b8056:	f7fc f81e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b805a:	4604      	mov	r4, r0
   b805c:	b188      	cbz	r0, b8082 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b805e:	2301      	movs	r3, #1
   b8060:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b8064:	4b09      	ldr	r3, [pc, #36]	; (b808c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b8066:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8068:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b806c:	8183      	strh	r3, [r0, #12]
   b806e:	300e      	adds	r0, #14
   b8070:	f7ff fe27 	bl	b7cc2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b8074:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b8078:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b807c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b8080:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b8082:	6074      	str	r4, [r6, #4]
   b8084:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b8086:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8088:	4630      	mov	r0, r6
   b808a:	bd70      	pop	{r4, r5, r6, pc}
   b808c:	000bdbd0 	.word	0x000bdbd0

000b8090 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b8090:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8092:	460d      	mov	r5, r1
   b8094:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8096:	a801      	add	r0, sp, #4
   b8098:	f7ff fdd8 	bl	b7c4c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b809c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b809e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b80a2:	6023      	str	r3, [r4, #0]
   b80a4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b80a8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b80aa:	a801      	add	r0, sp, #4
   b80ac:	f7ff fddc 	bl	b7c68 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b80b0:	4620      	mov	r0, r4
   b80b2:	b003      	add	sp, #12
   b80b4:	bd30      	pop	{r4, r5, pc}

000b80b6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b80b6:	b530      	push	{r4, r5, lr}
   b80b8:	4605      	mov	r5, r0
   b80ba:	b087      	sub	sp, #28
   b80bc:	460c      	mov	r4, r1
    WiringBleLock lk;
   b80be:	a801      	add	r0, sp, #4
   b80c0:	f7ff fdc4 	bl	b7c4c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b80c4:	682a      	ldr	r2, [r5, #0]
   b80c6:	6823      	ldr	r3, [r4, #0]
   b80c8:	8812      	ldrh	r2, [r2, #0]
   b80ca:	881b      	ldrh	r3, [r3, #0]
   b80cc:	429a      	cmp	r2, r3
   b80ce:	d10d      	bne.n	b80ec <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b80d0:	4629      	mov	r1, r5
   b80d2:	a802      	add	r0, sp, #8
   b80d4:	f7ff ffdc 	bl	b8090 <_ZNK8particle13BlePeerDevice7addressEv>
   b80d8:	4621      	mov	r1, r4
   b80da:	a804      	add	r0, sp, #16
   b80dc:	f7ff ffd8 	bl	b8090 <_ZNK8particle13BlePeerDevice7addressEv>
   b80e0:	a904      	add	r1, sp, #16
   b80e2:	a802      	add	r0, sp, #8
   b80e4:	f7ff fdd9 	bl	b7c9a <_ZNK8particle10BleAddresseqERKS0_>
   b80e8:	4604      	mov	r4, r0
   b80ea:	b900      	cbnz	r0, b80ee <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b80ec:	2400      	movs	r4, #0
    WiringBleLock lk;
   b80ee:	a801      	add	r0, sp, #4
   b80f0:	f7ff fdba 	bl	b7c68 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b80f4:	4620      	mov	r0, r4
   b80f6:	b007      	add	sp, #28
   b80f8:	bd30      	pop	{r4, r5, pc}
	...

000b80fc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b80fc:	b510      	push	{r4, lr}
   b80fe:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8100:	2064      	movs	r0, #100	; 0x64
   b8102:	f7fb ffc8 	bl	b4096 <_Znwj>
   b8106:	b168      	cbz	r0, b8124 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8108:	2300      	movs	r3, #0
   b810a:	e9c0 3300 	strd	r3, r3, [r0]
   b810e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8112:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8116:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b811a:	6203      	str	r3, [r0, #32]
   b811c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b811e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8120:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8122:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8124:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8126:	b920      	cbnz	r0, b8132 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8128:	4a0a      	ldr	r2, [pc, #40]	; (b8154 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b812a:	490b      	ldr	r1, [pc, #44]	; (b8158 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b812c:	200a      	movs	r0, #10
   b812e:	f7fe fd89 	bl	b6c44 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8132:	2000      	movs	r0, #0
   b8134:	f7fe fb84 	bl	b6840 <hal_ble_stack_init>
   b8138:	b120      	cbz	r0, b8144 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b813a:	4a06      	ldr	r2, [pc, #24]	; (b8154 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b813c:	4907      	ldr	r1, [pc, #28]	; (b815c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b813e:	200a      	movs	r0, #10
   b8140:	f7fe fd80 	bl	b6c44 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8144:	6821      	ldr	r1, [r4, #0]
   b8146:	4806      	ldr	r0, [pc, #24]	; (b8160 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8148:	2200      	movs	r2, #0
   b814a:	f7fe fbd5 	bl	b68f8 <hal_ble_set_callback_on_periph_link_events>
}
   b814e:	4620      	mov	r0, r4
   b8150:	bd10      	pop	{r4, pc}
   b8152:	bf00      	nop
   b8154:	000b67f1 	.word	0x000b67f1
   b8158:	000bda44 	.word	0x000bda44
   b815c:	000bda82 	.word	0x000bda82
   b8160:	000b8729 	.word	0x000b8729

000b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8164:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b8166:	4c0a      	ldr	r4, [pc, #40]	; (b8190 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8168:	7823      	ldrb	r3, [r4, #0]
   b816a:	f3bf 8f5b 	dmb	ish
   b816e:	07db      	lsls	r3, r3, #31
   b8170:	d40c      	bmi.n	b818c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8172:	4620      	mov	r0, r4
   b8174:	f7fb ff97 	bl	b40a6 <__cxa_guard_acquire>
   b8178:	b140      	cbz	r0, b818c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b817a:	4806      	ldr	r0, [pc, #24]	; (b8194 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b817c:	f7ff ffbe 	bl	b80fc <_ZN8particle14BleLocalDeviceC1Ev>
   b8180:	4620      	mov	r0, r4
   b8182:	f7fb ff95 	bl	b40b0 <__cxa_guard_release>
   b8186:	4804      	ldr	r0, [pc, #16]	; (b8198 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8188:	f002 ffae 	bl	bb0e8 <atexit>
    return instance;
}
   b818c:	4801      	ldr	r0, [pc, #4]	; (b8194 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b818e:	bd10      	pop	{r4, pc}
   b8190:	2003e68c 	.word	0x2003e68c
   b8194:	2003e698 	.word	0x2003e698
   b8198:	000b83d1 	.word	0x000b83d1

000b819c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b819c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b819e:	6803      	ldr	r3, [r0, #0]
   b81a0:	3b09      	subs	r3, #9
   b81a2:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b81a4:	b08d      	sub	sp, #52	; 0x34
   b81a6:	4604      	mov	r4, r0
   b81a8:	460d      	mov	r5, r1
    switch (event->type) {
   b81aa:	d811      	bhi.n	b81d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b81ac:	f7ff ffda 	bl	b8164 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b81b0:	88a1      	ldrh	r1, [r4, #4]
   b81b2:	6800      	ldr	r0, [r0, #0]
   b81b4:	f7ff fea2 	bl	b7efc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b81b8:	4603      	mov	r3, r0
   b81ba:	b958      	cbnz	r0, b81d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b81bc:	2220      	movs	r2, #32
   b81be:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b81c2:	4a0b      	ldr	r2, [pc, #44]	; (b81f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b81c4:	9200      	str	r2, [sp, #0]
   b81c6:	490b      	ldr	r1, [pc, #44]	; (b81f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b81c8:	aa04      	add	r2, sp, #16
   b81ca:	2032      	movs	r0, #50	; 0x32
   b81cc:	f7fe fd42 	bl	b6c54 <log_message>
}
   b81d0:	b00d      	add	sp, #52	; 0x34
   b81d2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b81d4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b81d6:	2a00      	cmp	r2, #0
   b81d8:	d0fa      	beq.n	b81d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b81da:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b81de:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b81e2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b81e6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b81e8:	aa04      	add	r2, sp, #16
   b81ea:	a903      	add	r1, sp, #12
   b81ec:	47a0      	blx	r4
}
   b81ee:	e7ef      	b.n	b81d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b81f0:	000bdac4 	.word	0x000bdac4
   b81f4:	000bda5b 	.word	0x000bda5b

000b81f8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b81f8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b81fa:	2000      	movs	r0, #0
   b81fc:	f7fe fb20 	bl	b6840 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8200:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8204:	bd08      	pop	{r3, pc}

000b8206 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b8206:	b919      	cbnz	r1, b8210 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8208:	460a      	mov	r2, r1
   b820a:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b820c:	f7fe bb20 	b.w	b6850 <hal_ble_gap_set_advertising_data>
   b8210:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8214:	2200      	movs	r2, #0
   b8216:	e7f9      	b.n	b820c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8218 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8218:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b821a:	1e14      	subs	r4, r2, #0
   b821c:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b821e:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8220:	db02      	blt.n	b8228 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8222:	1862      	adds	r2, r4, r1
   b8224:	429a      	cmp	r2, r3
   b8226:	dd00      	ble.n	b822a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8228:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b822a:	682a      	ldr	r2, [r5, #0]
   b822c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b822e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8230:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8232:	1a52      	subs	r2, r2, r1
   b8234:	f002 ff97 	bl	bb166 <memmove>
    size_ -= n;
   b8238:	686a      	ldr	r2, [r5, #4]
   b823a:	1b12      	subs	r2, r2, r4
   b823c:	606a      	str	r2, [r5, #4]
}
   b823e:	bd38      	pop	{r3, r4, r5, pc}

000b8240 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8240:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b8242:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8244:	4604      	mov	r4, r0
   b8246:	460d      	mov	r5, r1
   b8248:	ab01      	add	r3, sp, #4
   b824a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b824e:	f7ff fc57 	bl	b7b00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b8252:	4602      	mov	r2, r0
   b8254:	b138      	cbz	r0, b8266 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b8256:	9901      	ldr	r1, [sp, #4]
   b8258:	4620      	mov	r0, r4
   b825a:	f7ff ffdd 	bl	b8218 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b825e:	4629      	mov	r1, r5
   b8260:	4620      	mov	r0, r4
   b8262:	f7ff ffed 	bl	b8240 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b8266:	b003      	add	sp, #12
   b8268:	bd30      	pop	{r4, r5, pc}

000b826a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b826a:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b826c:	460c      	mov	r4, r1
   b826e:	b929      	cbnz	r1, b827c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b8270:	460a      	mov	r2, r1
   b8272:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b8274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8278:	f7fe baf2 	b.w	b6860 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b827c:	2101      	movs	r1, #1
   b827e:	4620      	mov	r0, r4
   b8280:	f7ff ffde 	bl	b8240 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8284:	e9d4 0100 	ldrd	r0, r1, [r4]
   b8288:	2200      	movs	r2, #0
   b828a:	e7f3      	b.n	b8274 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b828c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b828c:	b538      	push	{r3, r4, r5, lr}
   b828e:	4604      	mov	r4, r0
   b8290:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b8292:	f7ff ffb8 	bl	b8206 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b8296:	2800      	cmp	r0, #0
   b8298:	db0a      	blt.n	b82b0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b829a:	4629      	mov	r1, r5
   b829c:	4620      	mov	r0, r4
   b829e:	f7ff ffe4 	bl	b826a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b82a2:	2800      	cmp	r0, #0
   b82a4:	db04      	blt.n	b82b0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b82a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b82aa:	2000      	movs	r0, #0
   b82ac:	f7fe bae0 	b.w	b6870 <hal_ble_gap_start_advertising>
}
   b82b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b82b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b82b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b82b6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b82b8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b82ba:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b82bc:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b82be:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b82c0:	f7fb fee9 	bl	b4096 <_Znwj>
   b82c4:	b118      	cbz	r0, b82ce <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b82c6:	682b      	ldr	r3, [r5, #0]
   b82c8:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b82ca:	686b      	ldr	r3, [r5, #4]
   b82cc:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b82ce:	4b03      	ldr	r3, [pc, #12]	; (b82dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b82d0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b82d2:	4b03      	ldr	r3, [pc, #12]	; (b82e0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b82d4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b82d6:	60a3      	str	r3, [r4, #8]
      }
   b82d8:	4620      	mov	r0, r4
   b82da:	bd38      	pop	{r3, r4, r5, pc}
   b82dc:	000b7b4d 	.word	0x000b7b4d
   b82e0:	000b7ba5 	.word	0x000b7ba5

000b82e4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b82e4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b82e6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b82e8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b82ea:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b82ec:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b82ee:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b82f0:	f7fb fed1 	bl	b4096 <_Znwj>
   b82f4:	b118      	cbz	r0, b82fe <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b82f6:	682b      	ldr	r3, [r5, #0]
   b82f8:	6003      	str	r3, [r0, #0]
   b82fa:	686b      	ldr	r3, [r5, #4]
   b82fc:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b82fe:	4b03      	ldr	r3, [pc, #12]	; (b830c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b8300:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8302:	4b03      	ldr	r3, [pc, #12]	; (b8310 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8304:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8306:	60a3      	str	r3, [r4, #8]
      }
   b8308:	4620      	mov	r0, r4
   b830a:	bd38      	pop	{r3, r4, r5, pc}
   b830c:	000b7b41 	.word	0x000b7b41
   b8310:	000b7b65 	.word	0x000b7b65

000b8314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8314:	680b      	ldr	r3, [r1, #0]
   b8316:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8318:	b113      	cbz	r3, b8320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b831a:	685a      	ldr	r2, [r3, #4]
   b831c:	3201      	adds	r2, #1
   b831e:	605a      	str	r2, [r3, #4]
      }
   b8320:	4770      	bx	lr

000b8322 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8322:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8324:	f851 3b04 	ldr.w	r3, [r1], #4
   b8328:	4604      	mov	r4, r0
   b832a:	f840 3b04 	str.w	r3, [r0], #4
   b832e:	f7ff fff1 	bl	b8314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8332:	6823      	ldr	r3, [r4, #0]
   b8334:	b90b      	cbnz	r3, b833a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8336:	f7ff fbf9 	bl	b7b2c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b833a:	4620      	mov	r0, r4
   b833c:	bd10      	pop	{r4, pc}

000b833e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b833e:	b510      	push	{r4, lr}
   b8340:	f851 3b04 	ldr.w	r3, [r1], #4
   b8344:	4604      	mov	r4, r0
   b8346:	f840 3b04 	str.w	r3, [r0], #4
   b834a:	f7ff ffe3 	bl	b8314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b834e:	4620      	mov	r0, r4
   b8350:	bd10      	pop	{r4, pc}

000b8352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8352:	b510      	push	{r4, lr}
   b8354:	f851 3b04 	ldr.w	r3, [r1], #4
   b8358:	4604      	mov	r4, r0
   b835a:	f840 3b04 	str.w	r3, [r0], #4
   b835e:	f7ff ffd9 	bl	b8314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8362:	4620      	mov	r0, r4
   b8364:	bd10      	pop	{r4, pc}

000b8366 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8366:	b510      	push	{r4, lr}
   b8368:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b836a:	3004      	adds	r0, #4
   b836c:	f7fc fcb0 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8370:	4620      	mov	r0, r4
   b8372:	bd10      	pop	{r4, pc}

000b8374 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8374:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8376:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b837a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b837c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8380:	42ae      	cmp	r6, r5
   b8382:	d004      	beq.n	b838e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8384:	1d28      	adds	r0, r5, #4
   b8386:	f7fc fca3 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b838a:	3508      	adds	r5, #8
   b838c:	e7f8      	b.n	b8380 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b838e:	6820      	ldr	r0, [r4, #0]
   b8390:	f7fe fd4c 	bl	b6e2c <free>
}
   b8394:	4620      	mov	r0, r4
   b8396:	bd70      	pop	{r4, r5, r6, pc}

000b8398 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8398:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b839a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b839e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b83a0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b83a4:	42ae      	cmp	r6, r5
   b83a6:	d004      	beq.n	b83b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b83a8:	1d28      	adds	r0, r5, #4
   b83aa:	f7fc fc91 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b83ae:	3508      	adds	r5, #8
   b83b0:	e7f8      	b.n	b83a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b83b2:	6820      	ldr	r0, [r4, #0]
   b83b4:	f7fe fd3a 	bl	b6e2c <free>
}
   b83b8:	4620      	mov	r0, r4
   b83ba:	bd70      	pop	{r4, r5, r6, pc}

000b83bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b83bc:	b510      	push	{r4, lr}
   b83be:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b83c0:	3024      	adds	r0, #36	; 0x24
   b83c2:	f7ff ffe9 	bl	b8398 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b83c6:	f104 0018 	add.w	r0, r4, #24
   b83ca:	f7ff ffd3 	bl	b8374 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b83ce:	bd10      	pop	{r4, pc}

000b83d0 <__tcf_0>:
    static BleLocalDevice instance;
   b83d0:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b83d2:	4b17      	ldr	r3, [pc, #92]	; (b8430 <__tcf_0+0x60>)
   b83d4:	681c      	ldr	r4, [r3, #0]
   b83d6:	b354      	cbz	r4, b842e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b83d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b83dc:	f7fc f812 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
   b83e0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b83e4:	f7fc f80e 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
   b83e8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b83ec:	f7fc f80a 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
   b83f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b83f4:	f7fc f806 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b83f8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b83fc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8400:	42ae      	cmp	r6, r5
   b8402:	d004      	beq.n	b840e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8404:	1d28      	adds	r0, r5, #4
   b8406:	f7fc fc63 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b840a:	3508      	adds	r5, #8
   b840c:	e7f8      	b.n	b8400 <__tcf_0+0x30>
    ::free(ptr);
   b840e:	69a0      	ldr	r0, [r4, #24]
   b8410:	f7fe fd0c 	bl	b6e2c <free>
    ~BleLocalDeviceImpl() = default;
   b8414:	f104 000c 	add.w	r0, r4, #12
   b8418:	f7ff ffbe 	bl	b8398 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b841c:	4620      	mov	r0, r4
   b841e:	f7ff ffa9 	bl	b8374 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8422:	4620      	mov	r0, r4
   b8424:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b842a:	f7fb be3a 	b.w	b40a2 <_ZdlPvj>
   b842e:	bd70      	pop	{r4, r5, r6, pc}
   b8430:	2003e698 	.word	0x2003e698

000b8434 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8434:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8436:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8438:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b843c:	e9c1 3300 	strd	r3, r3, [r1]
   b8440:	6803      	ldr	r3, [r0, #0]
   b8442:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8444:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8446:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8448:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b844a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b844c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b844e:	f7fc fc3f 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8452:	b002      	add	sp, #8
   b8454:	bd10      	pop	{r4, pc}

000b8456 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8456:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8458:	b510      	push	{r4, lr}
      if (_M_empty())
   b845a:	b90a      	cbnz	r2, b8460 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b845c:	f002 f866 	bl	ba52c <_ZSt25__throw_bad_function_callv>
    }
   b8460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8464:	68c3      	ldr	r3, [r0, #12]
   b8466:	4718      	bx	r3

000b8468 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8468:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b846a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b846c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b846e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8470:	dd03      	ble.n	b847a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8472:	f7fe fce3 	bl	b6e3c <realloc>
            if (!d) {
   b8476:	b918      	cbnz	r0, b8480 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8478:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b847a:	f7fe fcd7 	bl	b6e2c <free>
        T* d = nullptr;
   b847e:	2000      	movs	r0, #0
        data_ = d;
   b8480:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8482:	60a5      	str	r5, [r4, #8]
        return true;
   b8484:	2001      	movs	r0, #1
   b8486:	e7f7      	b.n	b8478 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8488 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8488:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b848a:	6883      	ldr	r3, [r0, #8]
   b848c:	428b      	cmp	r3, r1
   b848e:	da02      	bge.n	b8496 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8490:	f7ff ffea 	bl	b8468 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8494:	bd08      	pop	{r3, pc}
    return true;
   b8496:	2001      	movs	r0, #1
   b8498:	e7fc      	b.n	b8494 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b849a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b849a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b849e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84a0:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b84a2:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84a4:	4419      	add	r1, r3
   b84a6:	6883      	ldr	r3, [r0, #8]
   b84a8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b84aa:	4604      	mov	r4, r0
   b84ac:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84ae:	dc12      	bgt.n	b84d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b84b0:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b84b2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b84b4:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b84b6:	1bd2      	subs	r2, r2, r7
   b84b8:	4631      	mov	r1, r6
   b84ba:	1970      	adds	r0, r6, r5
   b84bc:	f002 fe53 	bl	bb166 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b84c0:	462a      	mov	r2, r5
   b84c2:	4641      	mov	r1, r8
   b84c4:	4630      	mov	r0, r6
   b84c6:	f002 fe40 	bl	bb14a <memcpy>
    size_ += n;
   b84ca:	6863      	ldr	r3, [r4, #4]
   b84cc:	442b      	add	r3, r5
   b84ce:	6063      	str	r3, [r4, #4]
    return true;
   b84d0:	2001      	movs	r0, #1
}
   b84d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84d6:	f7ff ffc7 	bl	b8468 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b84da:	2800      	cmp	r0, #0
   b84dc:	d1e8      	bne.n	b84b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b84de:	e7f8      	b.n	b84d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b84e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b84e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b84e2:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b84e4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b84e8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b84ea:	4604      	mov	r4, r0
   b84ec:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b84ee:	da0b      	bge.n	b8508 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b84f0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b84f2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b84f4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b84f6:	1b52      	subs	r2, r2, r5
   b84f8:	1c48      	adds	r0, r1, #1
   b84fa:	f002 fe34 	bl	bb166 <memmove>
    new(p) T(std::move(value));
   b84fe:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8500:	6863      	ldr	r3, [r4, #4]
   b8502:	3301      	adds	r3, #1
   b8504:	6063      	str	r3, [r4, #4]
}
   b8506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8508:	3101      	adds	r1, #1
   b850a:	f7ff ffad 	bl	b8468 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b850e:	2800      	cmp	r0, #0
   b8510:	d1ee      	bne.n	b84f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8512:	e7f8      	b.n	b8506 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8514:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8516:	6841      	ldr	r1, [r0, #4]
   b8518:	f7ff bfe2 	b.w	b84e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b851c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b851c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8520:	4604      	mov	r4, r0
   b8522:	461d      	mov	r5, r3
   b8524:	460f      	mov	r7, r1
   b8526:	ab01      	add	r3, sp, #4
   b8528:	4690      	mov	r8, r2
   b852a:	460a      	mov	r2, r1
   b852c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8530:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8534:	f7ff fae4 	bl	b7b00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8538:	1cae      	adds	r6, r5, #2
   b853a:	6863      	ldr	r3, [r4, #4]
   b853c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b853e:	f1b9 0f00 	cmp.w	r9, #0
   b8542:	d126      	bne.n	b8592 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8544:	b328      	cbz	r0, b8592 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8546:	4433      	add	r3, r6
   b8548:	1a1b      	subs	r3, r3, r0
   b854a:	2bff      	cmp	r3, #255	; 0xff
   b854c:	d809      	bhi.n	b8562 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b854e:	9901      	ldr	r1, [sp, #4]
   b8550:	4620      	mov	r0, r4
   b8552:	f7ff fe61 	bl	b8218 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8556:	6861      	ldr	r1, [r4, #4]
   b8558:	4620      	mov	r0, r4
   b855a:	4431      	add	r1, r6
   b855c:	f7ff ff94 	bl	b8488 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8560:	b918      	cbnz	r0, b856a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8562:	6860      	ldr	r0, [r4, #4]
}
   b8564:	b003      	add	sp, #12
   b8566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b856a:	1c6a      	adds	r2, r5, #1
   b856c:	9901      	ldr	r1, [sp, #4]
   b856e:	b2d2      	uxtb	r2, r2
   b8570:	4620      	mov	r0, r4
   b8572:	f7ff ffb5 	bl	b84e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8576:	9901      	ldr	r1, [sp, #4]
   b8578:	463a      	mov	r2, r7
   b857a:	3101      	adds	r1, #1
   b857c:	4620      	mov	r0, r4
   b857e:	f7ff ffaf 	bl	b84e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8582:	9901      	ldr	r1, [sp, #4]
   b8584:	462b      	mov	r3, r5
   b8586:	4642      	mov	r2, r8
   b8588:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b858a:	4620      	mov	r0, r4
   b858c:	f7ff ff85 	bl	b849a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8590:	e7e7      	b.n	b8562 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8592:	18f1      	adds	r1, r6, r3
   b8594:	29ff      	cmp	r1, #255	; 0xff
   b8596:	d8e4      	bhi.n	b8562 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8598:	4620      	mov	r0, r4
   b859a:	f7ff ff75 	bl	b8488 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b859e:	2800      	cmp	r0, #0
   b85a0:	d0df      	beq.n	b8562 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b85a2:	1c69      	adds	r1, r5, #1
   b85a4:	b2c9      	uxtb	r1, r1
   b85a6:	4620      	mov	r0, r4
   b85a8:	f7ff ffb4 	bl	b8514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b85ac:	4639      	mov	r1, r7
   b85ae:	4620      	mov	r0, r4
   b85b0:	f7ff ffb0 	bl	b8514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b85b4:	6861      	ldr	r1, [r4, #4]
   b85b6:	462b      	mov	r3, r5
   b85b8:	4642      	mov	r2, r8
   b85ba:	e7e6      	b.n	b858a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b85bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b85bc:	b430      	push	{r4, r5}
   b85be:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b85c2:	b11a      	cbz	r2, b85cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b85c4:	9502      	str	r5, [sp, #8]
}
   b85c6:	bc30      	pop	{r4, r5}
   b85c8:	f7ff bfa8 	b.w	b851c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b85cc:	6840      	ldr	r0, [r0, #4]
}
   b85ce:	bc30      	pop	{r4, r5}
   b85d0:	4770      	bx	lr

000b85d2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b85d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b85d4:	2300      	movs	r3, #0
   b85d6:	e9c0 3300 	strd	r3, r3, [r0]
   b85da:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b85dc:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b85de:	9300      	str	r3, [sp, #0]
   b85e0:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b85e2:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b85e6:	4619      	mov	r1, r3
   b85e8:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b85ec:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b85ee:	f7ff ffe5 	bl	b85bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b85f2:	4620      	mov	r0, r4
   b85f4:	b004      	add	sp, #16
   b85f6:	bd10      	pop	{r4, pc}

000b85f8 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b85f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b85fa:	460a      	mov	r2, r1
   b85fc:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b85fe:	2114      	movs	r1, #20
   b8600:	4610      	mov	r0, r2
   b8602:	9203      	str	r2, [sp, #12]
   b8604:	f002 fe6e 	bl	bb2e4 <strnlen>
   b8608:	2100      	movs	r1, #0
   b860a:	4603      	mov	r3, r0
   b860c:	9100      	str	r1, [sp, #0]
   b860e:	9a03      	ldr	r2, [sp, #12]
   b8610:	2109      	movs	r1, #9
   b8612:	4620      	mov	r0, r4
   b8614:	f7ff ffd2 	bl	b85bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8618:	b004      	add	sp, #16
   b861a:	bd10      	pop	{r4, pc}

000b861c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b861c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b861e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8620:	4604      	mov	r4, r0
   b8622:	460d      	mov	r5, r1
   b8624:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8626:	d914      	bls.n	b8652 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8628:	4290      	cmp	r0, r2
   b862a:	d213      	bcs.n	b8654 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b862c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8630:	1a75      	subs	r5, r6, r1
   b8632:	f1a1 0708 	sub.w	r7, r1, #8
   b8636:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8638:	42b7      	cmp	r7, r6
   b863a:	d018      	beq.n	b866e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b863c:	b11c      	cbz	r4, b8646 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b863e:	4631      	mov	r1, r6
   b8640:	4620      	mov	r0, r4
   b8642:	f7ff fe86 	bl	b8352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8646:	1d30      	adds	r0, r6, #4
   b8648:	f7fc fb42 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b864c:	3e08      	subs	r6, #8
   b864e:	3c08      	subs	r4, #8
   b8650:	e7f2      	b.n	b8638 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8652:	d00c      	beq.n	b866e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8654:	42b5      	cmp	r5, r6
   b8656:	d00a      	beq.n	b866e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8658:	b11c      	cbz	r4, b8662 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b865a:	4629      	mov	r1, r5
   b865c:	4620      	mov	r0, r4
   b865e:	f7ff fe78 	bl	b8352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8662:	1d28      	adds	r0, r5, #4
   b8664:	f7fc fb34 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8668:	3508      	adds	r5, #8
   b866a:	3408      	adds	r4, #8
   b866c:	e7f2      	b.n	b8654 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b866e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8670 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8672:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8674:	6846      	ldr	r6, [r0, #4]
   b8676:	4668      	mov	r0, sp
   b8678:	f7ff fe6b 	bl	b8352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b867c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8680:	429f      	cmp	r7, r3
   b8682:	db12      	blt.n	b86aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8684:	3701      	adds	r7, #1
        if (n > 0) {
   b8686:	2f00      	cmp	r7, #0
   b8688:	dd29      	ble.n	b86de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b868a:	00f8      	lsls	r0, r7, #3
   b868c:	f7fe fbc6 	bl	b6e1c <malloc>
            if (!d) {
   b8690:	4605      	mov	r5, r0
   b8692:	b1f0      	cbz	r0, b86d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8694:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8698:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b869c:	f7ff ffbe 	bl	b861c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b86a0:	6820      	ldr	r0, [r4, #0]
   b86a2:	f7fe fbc3 	bl	b6e2c <free>
        data_ = d;
   b86a6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b86a8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b86aa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b86ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b86ae:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b86b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b86b6:	4631      	mov	r1, r6
   b86b8:	f106 0008 	add.w	r0, r6, #8
   b86bc:	f7ff ffae 	bl	b861c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b86c0:	b11e      	cbz	r6, b86ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b86c2:	4669      	mov	r1, sp
   b86c4:	4630      	mov	r0, r6
   b86c6:	f7ff fe44 	bl	b8352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b86ca:	6863      	ldr	r3, [r4, #4]
   b86cc:	3301      	adds	r3, #1
   b86ce:	6063      	str	r3, [r4, #4]
    return true;
   b86d0:	2501      	movs	r5, #1
   b86d2:	a801      	add	r0, sp, #4
   b86d4:	f7fc fafc 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b86d8:	4628      	mov	r0, r5
   b86da:	b003      	add	sp, #12
   b86dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b86de:	2500      	movs	r5, #0
   b86e0:	e7de      	b.n	b86a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b86e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b86e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b86e4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b86e8:	4605      	mov	r5, r0
   b86ea:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b86ec:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b86f0:	42a6      	cmp	r6, r4
   b86f2:	d005      	beq.n	b8700 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b86f4:	4639      	mov	r1, r7
   b86f6:	4620      	mov	r0, r4
   b86f8:	f7ff fcdd 	bl	b80b6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b86fc:	b108      	cbz	r0, b8702 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b86fe:	b914      	cbnz	r4, b8706 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8702:	3408      	adds	r4, #8
   b8704:	e7f4      	b.n	b86f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8706:	1d20      	adds	r0, r4, #4
   b8708:	f7fc fae2 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b870c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8710:	f104 0108 	add.w	r1, r4, #8
   b8714:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8718:	4620      	mov	r0, r4
   b871a:	f7ff ff7f 	bl	b861c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b871e:	686b      	ldr	r3, [r5, #4]
   b8720:	3b01      	subs	r3, #1
   b8722:	606b      	str	r3, [r5, #4]
    return true;
   b8724:	e7ec      	b.n	b8700 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8728 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b872c:	4605      	mov	r5, r0
   b872e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8730:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8732:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8734:	f7ff fa8a 	bl	b7c4c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8738:	682e      	ldr	r6, [r5, #0]
   b873a:	1ef3      	subs	r3, r6, #3
   b873c:	2b0d      	cmp	r3, #13
   b873e:	d83c      	bhi.n	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8740:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8744:	0053000e 	.word	0x0053000e
   b8748:	00d1003b 	.word	0x00d1003b
   b874c:	003b003b 	.word	0x003b003b
   b8750:	003b003b 	.word	0x003b003b
   b8754:	009b003b 	.word	0x009b003b
   b8758:	009b009b 	.word	0x009b009b
   b875c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8760:	a804      	add	r0, sp, #16
   b8762:	f7ff fc73 	bl	b804c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8766:	9b04      	ldr	r3, [sp, #16]
   b8768:	89aa      	ldrh	r2, [r5, #12]
   b876a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b876c:	6869      	ldr	r1, [r5, #4]
   b876e:	9804      	ldr	r0, [sp, #16]
   b8770:	3108      	adds	r1, #8
   b8772:	3002      	adds	r0, #2
   b8774:	f7ff fa84 	bl	b7c80 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8778:	a904      	add	r1, sp, #16
   b877a:	a806      	add	r0, sp, #24
   b877c:	f7ff fde9 	bl	b8352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8780:	a906      	add	r1, sp, #24
   b8782:	f104 0018 	add.w	r0, r4, #24
   b8786:	f7ff ff73 	bl	b8670 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b878a:	4605      	mov	r5, r0
   b878c:	a807      	add	r0, sp, #28
   b878e:	f7fc fa9f 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8792:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8794:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8796:	b9b5      	cbnz	r5, b87c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8798:	4b5d      	ldr	r3, [pc, #372]	; (b8910 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b879a:	495e      	ldr	r1, [pc, #376]	; (b8914 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b879c:	9300      	str	r3, [sp, #0]
   b879e:	2032      	movs	r0, #50	; 0x32
   b87a0:	462b      	mov	r3, r5
   b87a2:	aa06      	add	r2, sp, #24
   b87a4:	9507      	str	r5, [sp, #28]
   b87a6:	f7fe fa55 	bl	b6c54 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b87aa:	9b04      	ldr	r3, [sp, #16]
   b87ac:	4629      	mov	r1, r5
   b87ae:	8818      	ldrh	r0, [r3, #0]
   b87b0:	f7fe f866 	bl	b6880 <hal_ble_gap_disconnect>
   b87b4:	a805      	add	r0, sp, #20
   b87b6:	f7fc fa8b 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b87ba:	a803      	add	r0, sp, #12
   b87bc:	f7ff fa54 	bl	b7c68 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b87c0:	b00e      	add	sp, #56	; 0x38
   b87c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b87c6:	4a54      	ldr	r2, [pc, #336]	; (b8918 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b87c8:	9200      	str	r2, [sp, #0]
   b87ca:	2300      	movs	r3, #0
   b87cc:	4951      	ldr	r1, [pc, #324]	; (b8914 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b87ce:	9307      	str	r3, [sp, #28]
   b87d0:	aa06      	add	r2, sp, #24
   b87d2:	2001      	movs	r0, #1
   b87d4:	f7fe fa3e 	bl	b6c54 <log_message>
                if (impl->connectedCallback_) {
   b87d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b87da:	2b00      	cmp	r3, #0
   b87dc:	d0ea      	beq.n	b87b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b87de:	a904      	add	r1, sp, #16
   b87e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b87e4:	f7ff fe37 	bl	b8456 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b87e8:	e7e4      	b.n	b87b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b87ea:	89a9      	ldrh	r1, [r5, #12]
   b87ec:	4620      	mov	r0, r4
   b87ee:	f7ff fb85 	bl	b7efc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b87f2:	4606      	mov	r6, r0
   b87f4:	2800      	cmp	r0, #0
   b87f6:	d0e0      	beq.n	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b87f8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b87fa:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b87fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8802:	8029      	strh	r1, [r5, #0]
   b8804:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8808:	429a      	cmp	r2, r3
   b880a:	d003      	beq.n	b8814 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b880c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8810:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8812:	e7f9      	b.n	b8808 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8814:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8818:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b881c:	45b8      	cmp	r8, r7
   b881e:	d004      	beq.n	b882a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8820:	1d38      	adds	r0, r7, #4
   b8822:	f7fc fa55 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8826:	3708      	adds	r7, #8
   b8828:	e7f8      	b.n	b881c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b882a:	2300      	movs	r3, #0
   b882c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b882e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8832:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8836:	45b8      	cmp	r8, r7
   b8838:	d004      	beq.n	b8844 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b883a:	1d38      	adds	r0, r7, #4
   b883c:	f7fc fa48 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8840:	3708      	adds	r7, #8
   b8842:	e7f8      	b.n	b8836 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8844:	2300      	movs	r3, #0
   b8846:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8848:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b884a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b884c:	b123      	cbz	r3, b8858 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b884e:	4631      	mov	r1, r6
   b8850:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8854:	f7ff fdff 	bl	b8456 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8858:	2300      	movs	r3, #0
   b885a:	2220      	movs	r2, #32
   b885c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8860:	4a2e      	ldr	r2, [pc, #184]	; (b891c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8862:	9200      	str	r2, [sp, #0]
   b8864:	492b      	ldr	r1, [pc, #172]	; (b8914 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8866:	aa06      	add	r2, sp, #24
   b8868:	2001      	movs	r0, #1
   b886a:	f7fe f9f3 	bl	b6c54 <log_message>
                    impl->peers_.removeOne(*peer);
   b886e:	4631      	mov	r1, r6
   b8870:	f104 0018 	add.w	r0, r4, #24
   b8874:	f7ff ff35 	bl	b86e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8878:	e79f      	b.n	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b887a:	89a9      	ldrh	r1, [r5, #12]
   b887c:	4620      	mov	r0, r4
   b887e:	f7ff fb3d 	bl	b7efc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8882:	2800      	cmp	r0, #0
   b8884:	d099      	beq.n	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8886:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8888:	2b00      	cmp	r3, #0
   b888a:	d096      	beq.n	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b888c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b888e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8890:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8894:	d001      	beq.n	b889a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8896:	2e10      	cmp	r6, #16
   b8898:	d117      	bne.n	b88ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b889a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b889c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b889e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b88a0:	2506      	movs	r5, #6
                        };
   b88a2:	f88d 3015 	strb.w	r3, [sp, #21]
   b88a6:	9104      	str	r1, [sp, #16]
   b88a8:	f88d 2014 	strb.w	r2, [sp, #20]
   b88ac:	9006      	str	r0, [sp, #24]
   b88ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b88b2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b88b4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b88b8:	9508      	str	r5, [sp, #32]
   b88ba:	e883 0003 	stmia.w	r3, {r0, r1}
   b88be:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b88c0:	a906      	add	r1, sp, #24
   b88c2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b88c6:	4798      	blx	r3
   b88c8:	e777      	b.n	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b88ca:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b88cc:	bf01      	itttt	eq
   b88ce:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b88d0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b88d2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b88d6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b88d8:	bf0f      	iteee	eq
   b88da:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b88de:	461a      	movne	r2, r3
   b88e0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b88e2:	461d      	movne	r5, r3
   b88e4:	e7dd      	b.n	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b88e6:	89a9      	ldrh	r1, [r5, #12]
   b88e8:	4620      	mov	r0, r4
   b88ea:	f7ff fb07 	bl	b7efc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b88ee:	4601      	mov	r1, r0
   b88f0:	2800      	cmp	r0, #0
   b88f2:	f43f af62 	beq.w	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b88f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b88f8:	2b00      	cmp	r3, #0
   b88fa:	f43f af5e 	beq.w	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b88fe:	686b      	ldr	r3, [r5, #4]
   b8900:	9306      	str	r3, [sp, #24]
   b8902:	aa06      	add	r2, sp, #24
   b8904:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8906:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b890a:	4798      	blx	r3
   b890c:	e755      	b.n	b87ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b890e:	bf00      	nop
   b8910:	000bdadc 	.word	0x000bdadc
   b8914:	000bda5b 	.word	0x000bda5b
   b8918:	000bdb02 	.word	0x000bdb02
   b891c:	000bdb1f 	.word	0x000bdb1f

000b8920 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8920:	b513      	push	{r0, r1, r4, lr}
   b8922:	460b      	mov	r3, r1
   b8924:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8926:	e9d0 0100 	ldrd	r0, r1, [r0]
   b892a:	466c      	mov	r4, sp
   b892c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8930:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8934:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8938:	e894 0003 	ldmia.w	r4, {r0, r1}
   b893c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8940:	b002      	add	sp, #8
   b8942:	bd10      	pop	{r4, pc}

000b8944 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8944:	b538      	push	{r3, r4, r5, lr}
   b8946:	4605      	mov	r5, r0
   b8948:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b894a:	f7ff ffe9 	bl	b8920 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b894e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8950:	68a2      	ldr	r2, [r4, #8]
   b8952:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8954:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8956:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8958:	68e2      	ldr	r2, [r4, #12]
   b895a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b895c:	60e3      	str	r3, [r4, #12]
      }
   b895e:	bd38      	pop	{r3, r4, r5, pc}

000b8960 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8960:	b570      	push	{r4, r5, r6, lr}
   b8962:	4604      	mov	r4, r0
   b8964:	b08c      	sub	sp, #48	; 0x30
   b8966:	460e      	mov	r6, r1
   b8968:	9201      	str	r2, [sp, #4]
   b896a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b896c:	f7ff faa6 	bl	b7ebc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8970:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8972:	9901      	ldr	r1, [sp, #4]
   b8974:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8978:	f7fe ffa2 	bl	b78c0 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b897c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8980:	b1cd      	cbz	r5, b89b6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8982:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8984:	9502      	str	r5, [sp, #8]
   b8986:	a902      	add	r1, sp, #8
   b8988:	a804      	add	r0, sp, #16
   b898a:	9303      	str	r3, [sp, #12]
   b898c:	f7ff fc92 	bl	b82b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8990:	2300      	movs	r3, #0
	__x.swap(*this);
   b8992:	a908      	add	r1, sp, #32
   b8994:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8996:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8998:	f7ff ffd4 	bl	b8944 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b899c:	4631      	mov	r1, r6
   b899e:	a808      	add	r0, sp, #32
   b89a0:	f7ff ffd0 	bl	b8944 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b89a4:	a808      	add	r0, sp, #32
   b89a6:	f7fb fd2d 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
   b89aa:	a804      	add	r0, sp, #16
   b89ac:	f7fb fd2a 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
    }
   b89b0:	4620      	mov	r0, r4
   b89b2:	b00c      	add	sp, #48	; 0x30
   b89b4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b89b6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b89b8:	e7ea      	b.n	b8990 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b89bc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b89bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b89c0:	b087      	sub	sp, #28
   b89c2:	461d      	mov	r5, r3
   b89c4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b89c8:	4680      	mov	r8, r0
   b89ca:	468b      	mov	fp, r1
   b89cc:	4692      	mov	sl, r2
   b89ce:	9912      	ldr	r1, [sp, #72]	; 0x48
   b89d0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b89d2:	2200      	movs	r2, #0
   b89d4:	2068      	movs	r0, #104	; 0x68
   b89d6:	9102      	str	r1, [sp, #8]
   b89d8:	9204      	str	r2, [sp, #16]
   b89da:	f7fb fb5c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b89de:	1e06      	subs	r6, r0, #0
   b89e0:	f106 090c 	add.w	r9, r6, #12
   b89e4:	d018      	beq.n	b8a18 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b89e6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b89e8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b89ea:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b89ee:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b89f0:	4a15      	ldr	r2, [pc, #84]	; (b8a48 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b89f2:	f847 2b20 	str.w	r2, [r7], #32
   b89f6:	9b03      	ldr	r3, [sp, #12]
   b89f8:	9100      	str	r1, [sp, #0]
   b89fa:	465a      	mov	r2, fp
   b89fc:	4651      	mov	r1, sl
   b89fe:	4648      	mov	r0, r9
   b8a00:	f7ff ffae 	bl	b8960 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a06:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8a08:	682b      	ldr	r3, [r5, #0]
   b8a0a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8a0e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8a14:	6823      	ldr	r3, [r4, #0]
   b8a16:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8a18:	a904      	add	r1, sp, #16
   b8a1a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8a1c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8a20:	f7ff fd08 	bl	b8434 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8a24:	a805      	add	r0, sp, #20
   b8a26:	f7fc f953 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8a2a:	f8d8 3000 	ldr.w	r3, [r8]
   b8a2e:	b93b      	cbnz	r3, b8a40 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8a30:	4a06      	ldr	r2, [pc, #24]	; (b8a4c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8a32:	4907      	ldr	r1, [pc, #28]	; (b8a50 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8a34:	200a      	movs	r0, #10
}
   b8a36:	b007      	add	sp, #28
   b8a38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8a3c:	f7fe b902 	b.w	b6c44 <panic_>
}
   b8a40:	b007      	add	sp, #28
   b8a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a46:	bf00      	nop
   b8a48:	000bdb98 	.word	0x000bdb98
   b8a4c:	000b67f1 	.word	0x000b67f1
   b8a50:	000bda44 	.word	0x000bda44

000b8a54 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b8a54:	b538      	push	{r3, r4, r5, lr}
   b8a56:	4605      	mov	r5, r0
   b8a58:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8a5a:	f7ff ff61 	bl	b8920 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a5e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8a60:	68a2      	ldr	r2, [r4, #8]
   b8a62:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a64:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a66:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8a68:	68e2      	ldr	r2, [r4, #12]
   b8a6a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a6c:	60e3      	str	r3, [r4, #12]
      }
   b8a6e:	bd38      	pop	{r3, r4, r5, pc}

000b8a70 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b8a70:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b8a72:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b8a74:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b8a76:	3424      	adds	r4, #36	; 0x24
   b8a78:	b1b9      	cbz	r1, b8aaa <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b8a7a:	e9cd 1200 	strd	r1, r2, [sp]
   b8a7e:	a802      	add	r0, sp, #8
   b8a80:	4669      	mov	r1, sp
   b8a82:	f7ff fc2f 	bl	b82e4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8a86:	2300      	movs	r3, #0
	__x.swap(*this);
   b8a88:	a906      	add	r1, sp, #24
   b8a8a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b8a8c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b8a8e:	f7ff ffe1 	bl	b8a54 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b8a92:	4621      	mov	r1, r4
   b8a94:	a806      	add	r0, sp, #24
   b8a96:	f7ff ffdd 	bl	b8a54 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b8a9a:	a806      	add	r0, sp, #24
   b8a9c:	f7fb fcb2 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
   b8aa0:	a802      	add	r0, sp, #8
   b8aa2:	f7fb fcaf 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
}
   b8aa6:	b00a      	add	sp, #40	; 0x28
   b8aa8:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8aaa:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b8aac:	e7eb      	b.n	b8a86 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b8aae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8aae:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ab2:	4604      	mov	r4, r0
   b8ab4:	460d      	mov	r5, r1
   b8ab6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8ab8:	d914      	bls.n	b8ae4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8aba:	4290      	cmp	r0, r2
   b8abc:	d213      	bcs.n	b8ae6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8abe:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8ac2:	1a75      	subs	r5, r6, r1
   b8ac4:	f1a1 0708 	sub.w	r7, r1, #8
   b8ac8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8aca:	42b7      	cmp	r7, r6
   b8acc:	d018      	beq.n	b8b00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8ace:	b11c      	cbz	r4, b8ad8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8ad0:	4631      	mov	r1, r6
   b8ad2:	4620      	mov	r0, r4
   b8ad4:	f7ff fc33 	bl	b833e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8ad8:	1d30      	adds	r0, r6, #4
   b8ada:	f7fc f8f9 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8ade:	3e08      	subs	r6, #8
   b8ae0:	3c08      	subs	r4, #8
   b8ae2:	e7f2      	b.n	b8aca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8ae4:	d00c      	beq.n	b8b00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8ae6:	42b5      	cmp	r5, r6
   b8ae8:	d00a      	beq.n	b8b00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8aea:	b11c      	cbz	r4, b8af4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8aec:	4629      	mov	r1, r5
   b8aee:	4620      	mov	r0, r4
   b8af0:	f7ff fc25 	bl	b833e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8af4:	1d28      	adds	r0, r5, #4
   b8af6:	f7fc f8eb 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8afa:	3508      	adds	r5, #8
   b8afc:	3408      	adds	r4, #8
   b8afe:	e7f2      	b.n	b8ae6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8b02:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8b04:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8b06:	4605      	mov	r5, r0
        if (n > 0) {
   b8b08:	dd11      	ble.n	b8b2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8b0a:	00f0      	lsls	r0, r6, #3
   b8b0c:	f7fe f986 	bl	b6e1c <malloc>
            if (!d) {
   b8b10:	4604      	mov	r4, r0
   b8b12:	b158      	cbz	r0, b8b2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8b14:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8b18:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8b1c:	f7ff ffc7 	bl	b8aae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8b20:	6828      	ldr	r0, [r5, #0]
   b8b22:	f7fe f983 	bl	b6e2c <free>
        data_ = d;
   b8b26:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8b28:	60ae      	str	r6, [r5, #8]
        return true;
   b8b2a:	2001      	movs	r0, #1
    }
   b8b2c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8b2e:	2400      	movs	r4, #0
   b8b30:	e7f6      	b.n	b8b20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8b32 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8b34:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8b36:	6845      	ldr	r5, [r0, #4]
   b8b38:	4668      	mov	r0, sp
   b8b3a:	f7ff fc00 	bl	b833e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b3e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8b42:	4299      	cmp	r1, r3
   b8b44:	da10      	bge.n	b8b68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8b46:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8b48:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8b4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8b4e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8b52:	4629      	mov	r1, r5
   b8b54:	f105 0008 	add.w	r0, r5, #8
   b8b58:	f7ff ffa9 	bl	b8aae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8b5c:	b98d      	cbnz	r5, b8b82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8b5e:	6863      	ldr	r3, [r4, #4]
   b8b60:	3301      	adds	r3, #1
   b8b62:	6063      	str	r3, [r4, #4]
    return true;
   b8b64:	2601      	movs	r6, #1
   b8b66:	e006      	b.n	b8b76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b68:	3101      	adds	r1, #1
   b8b6a:	4620      	mov	r0, r4
   b8b6c:	f7ff ffc9 	bl	b8b02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8b70:	4606      	mov	r6, r0
   b8b72:	2800      	cmp	r0, #0
   b8b74:	d1e7      	bne.n	b8b46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8b76:	a801      	add	r0, sp, #4
   b8b78:	f7fc f8aa 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8b7c:	4630      	mov	r0, r6
   b8b7e:	b002      	add	sp, #8
   b8b80:	bd70      	pop	{r4, r5, r6, pc}
   b8b82:	4669      	mov	r1, sp
   b8b84:	4628      	mov	r0, r5
   b8b86:	f7ff fbda 	bl	b833e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8b8a:	e7e8      	b.n	b8b5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8b8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8b8c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b90:	4604      	mov	r4, r0
   b8b92:	460d      	mov	r5, r1
   b8b94:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b96:	d914      	bls.n	b8bc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8b98:	4290      	cmp	r0, r2
   b8b9a:	d213      	bcs.n	b8bc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8b9c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8ba0:	1a75      	subs	r5, r6, r1
   b8ba2:	f1a1 0708 	sub.w	r7, r1, #8
   b8ba6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8ba8:	42b7      	cmp	r7, r6
   b8baa:	d018      	beq.n	b8bde <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8bac:	b11c      	cbz	r4, b8bb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8bae:	4631      	mov	r1, r6
   b8bb0:	4620      	mov	r0, r4
   b8bb2:	f7ff fbb6 	bl	b8322 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8bb6:	1d30      	adds	r0, r6, #4
   b8bb8:	f7fc f88a 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8bbc:	3e08      	subs	r6, #8
   b8bbe:	3c08      	subs	r4, #8
   b8bc0:	e7f2      	b.n	b8ba8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8bc2:	d00c      	beq.n	b8bde <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8bc4:	42b5      	cmp	r5, r6
   b8bc6:	d00a      	beq.n	b8bde <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8bc8:	b11c      	cbz	r4, b8bd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8bca:	4629      	mov	r1, r5
   b8bcc:	4620      	mov	r0, r4
   b8bce:	f7ff fba8 	bl	b8322 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8bd2:	1d28      	adds	r0, r5, #4
   b8bd4:	f7fc f87c 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8bd8:	3508      	adds	r5, #8
   b8bda:	3408      	adds	r4, #8
   b8bdc:	e7f2      	b.n	b8bc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8be0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8be0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8be2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8be4:	4605      	mov	r5, r0
        if (n > 0) {
   b8be6:	dd11      	ble.n	b8c0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8be8:	00f0      	lsls	r0, r6, #3
   b8bea:	f7fe f917 	bl	b6e1c <malloc>
            if (!d) {
   b8bee:	4604      	mov	r4, r0
   b8bf0:	b158      	cbz	r0, b8c0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8bf2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8bf6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8bfa:	f7ff ffc7 	bl	b8b8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8bfe:	6828      	ldr	r0, [r5, #0]
   b8c00:	f7fe f914 	bl	b6e2c <free>
        data_ = d;
   b8c04:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8c06:	60ae      	str	r6, [r5, #8]
        return true;
   b8c08:	2001      	movs	r0, #1
    }
   b8c0a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8c0c:	2400      	movs	r4, #0
   b8c0e:	e7f6      	b.n	b8bfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8c10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8c10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c12:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8c14:	6845      	ldr	r5, [r0, #4]
   b8c16:	4668      	mov	r0, sp
   b8c18:	f7ff fb83 	bl	b8322 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c1c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8c20:	4299      	cmp	r1, r3
   b8c22:	da10      	bge.n	b8c46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8c24:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8c26:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c28:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8c2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c30:	4629      	mov	r1, r5
   b8c32:	f105 0008 	add.w	r0, r5, #8
   b8c36:	f7ff ffa9 	bl	b8b8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8c3a:	b98d      	cbnz	r5, b8c60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8c3c:	6863      	ldr	r3, [r4, #4]
   b8c3e:	3301      	adds	r3, #1
   b8c40:	6063      	str	r3, [r4, #4]
    return true;
   b8c42:	2601      	movs	r6, #1
   b8c44:	e006      	b.n	b8c54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c46:	3101      	adds	r1, #1
   b8c48:	4620      	mov	r0, r4
   b8c4a:	f7ff ffc9 	bl	b8be0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c4e:	4606      	mov	r6, r0
   b8c50:	2800      	cmp	r0, #0
   b8c52:	d1e7      	bne.n	b8c24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8c54:	a801      	add	r0, sp, #4
   b8c56:	f7fc f83b 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c5a:	4630      	mov	r0, r6
   b8c5c:	b002      	add	sp, #8
   b8c5e:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8c60:	4669      	mov	r1, sp
   b8c62:	4628      	mov	r0, r5
   b8c64:	f7ff fb5d 	bl	b8322 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c68:	e7e8      	b.n	b8c3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b8c6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c70:	4617      	mov	r7, r2
   b8c72:	b0a1      	sub	sp, #132	; 0x84
   b8c74:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8c76:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8c78:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8c7a:	f7fe ffe7 	bl	b7c4c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8c7e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8c80:	7923      	ldrb	r3, [r4, #4]
   b8c82:	b953      	cbnz	r3, b8c9a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8c84:	4639      	mov	r1, r7
   b8c86:	4640      	mov	r0, r8
   b8c88:	f7ff fb4b 	bl	b8322 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8c8c:	a80a      	add	r0, sp, #40	; 0x28
   b8c8e:	f7fe ffeb 	bl	b7c68 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8c92:	4640      	mov	r0, r8
   b8c94:	b021      	add	sp, #132	; 0x84
   b8c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8c9a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8c9c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8ca0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8ca4:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8ca6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8caa:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8cae:	9b03      	ldr	r3, [sp, #12]
   b8cb0:	429d      	cmp	r5, r3
   b8cb2:	d021      	beq.n	b8cf8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8cb4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8cb8:	4658      	mov	r0, fp
   b8cba:	f109 0114 	add.w	r1, r9, #20
   b8cbe:	f7ff f872 	bl	b7da6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8cc2:	b1b8      	cbz	r0, b8cf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8cc4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8cc8:	4650      	mov	r0, sl
   b8cca:	f7ff f86c 	bl	b7da6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8cce:	b188      	cbz	r0, b8cf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8cd0:	6823      	ldr	r3, [r4, #0]
   b8cd2:	f8d9 2000 	ldr.w	r2, [r9]
   b8cd6:	4053      	eors	r3, r2
   b8cd8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8cdc:	d10a      	bne.n	b8cf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8cde:	2220      	movs	r2, #32
   b8ce0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8ce4:	4a5e      	ldr	r2, [pc, #376]	; (b8e60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8ce6:	9200      	str	r2, [sp, #0]
   b8ce8:	aa15      	add	r2, sp, #84	; 0x54
   b8cea:	495e      	ldr	r1, [pc, #376]	; (b8e64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8cec:	2032      	movs	r0, #50	; 0x32
   b8cee:	f7fd ffb1 	bl	b6c54 <log_message>
   b8cf2:	e7c7      	b.n	b8c84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8cf4:	3508      	adds	r5, #8
   b8cf6:	e7da      	b.n	b8cae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8cf8:	4650      	mov	r0, sl
   b8cfa:	f7ff f825 	bl	b7d48 <_ZNK8particle7BleUuid7isValidEv>
   b8cfe:	b960      	cbnz	r0, b8d1a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8d00:	4959      	ldr	r1, [pc, #356]	; (b8e68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8d02:	2201      	movs	r2, #1
   b8d04:	a815      	add	r0, sp, #84	; 0x54
   b8d06:	ad15      	add	r5, sp, #84	; 0x54
   b8d08:	f7fe fff6 	bl	b7cf8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d0e:	46d4      	mov	ip, sl
   b8d10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8d14:	682b      	ldr	r3, [r5, #0]
   b8d16:	f8cc 3000 	str.w	r3, [ip]
   b8d1a:	6833      	ldr	r3, [r6, #0]
   b8d1c:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8d20:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8d24:	455d      	cmp	r5, fp
   b8d26:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8d28:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8d2a:	d06e      	beq.n	b8e0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8d2c:	f855 0b08 	ldr.w	r0, [r5], #8
   b8d30:	f7ff f839 	bl	b7da6 <_ZNK8particle7BleUuideqERKS0_>
   b8d34:	2800      	cmp	r0, #0
   b8d36:	d0f5      	beq.n	b8d24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8d38:	f104 0a14 	add.w	sl, r4, #20
   b8d3c:	4650      	mov	r0, sl
   b8d3e:	f7ff f803 	bl	b7d48 <_ZNK8particle7BleUuid7isValidEv>
   b8d42:	b988      	cbnz	r0, b8d68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8d44:	4b49      	ldr	r3, [pc, #292]	; (b8e6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8d46:	4948      	ldr	r1, [pc, #288]	; (b8e68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8d48:	881a      	ldrh	r2, [r3, #0]
   b8d4a:	3201      	adds	r2, #1
   b8d4c:	b292      	uxth	r2, r2
   b8d4e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8d50:	a815      	add	r0, sp, #84	; 0x54
   b8d52:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8d54:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8d56:	f7fe ffee 	bl	b7d36 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d5c:	46d4      	mov	ip, sl
   b8d5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8d62:	682b      	ldr	r3, [r5, #0]
   b8d64:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8d68:	4b41      	ldr	r3, [pc, #260]	; (b8e70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8d6a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8d6c:	2228      	movs	r2, #40	; 0x28
   b8d6e:	2100      	movs	r1, #0
   b8d70:	a816      	add	r0, sp, #88	; 0x58
   b8d72:	f002 fa12 	bl	bb19a <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8d76:	4651      	mov	r1, sl
   b8d78:	a804      	add	r0, sp, #16
   b8d7a:	f7fe fff7 	bl	b7d6c <_ZN8particle7BleUuid7halUUIDEv>
   b8d7e:	ab04      	add	r3, sp, #16
   b8d80:	aa18      	add	r2, sp, #96	; 0x60
   b8d82:	f10d 0c20 	add.w	ip, sp, #32
   b8d86:	6818      	ldr	r0, [r3, #0]
   b8d88:	6859      	ldr	r1, [r3, #4]
   b8d8a:	4615      	mov	r5, r2
   b8d8c:	c503      	stmia	r5!, {r0, r1}
   b8d8e:	3308      	adds	r3, #8
   b8d90:	4563      	cmp	r3, ip
   b8d92:	462a      	mov	r2, r5
   b8d94:	d1f7      	bne.n	b8d86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8d96:	6818      	ldr	r0, [r3, #0]
   b8d98:	6028      	str	r0, [r5, #0]
    return value_;
   b8d9a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8d9c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8da0:	f8d9 3000 	ldr.w	r3, [r9]
   b8da4:	8a9b      	ldrh	r3, [r3, #20]
   b8da6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8daa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8dac:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8dae:	4b31      	ldr	r3, [pc, #196]	; (b8e74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8db0:	2200      	movs	r2, #0
   b8db2:	1da1      	adds	r1, r4, #6
   b8db4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8db6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8dba:	f7fd fd93 	bl	b68e4 <hal_ble_gatt_server_add_characteristic>
   b8dbe:	2800      	cmp	r0, #0
   b8dc0:	f47f af60 	bne.w	b8c84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8dc4:	2301      	movs	r3, #1
   b8dc6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8dc8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8dca:	4639      	mov	r1, r7
        return characteristics_;
   b8dcc:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8dce:	a80d      	add	r0, sp, #52	; 0x34
   b8dd0:	f7ff faa7 	bl	b8322 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8dd4:	4620      	mov	r0, r4
   b8dd6:	a90d      	add	r1, sp, #52	; 0x34
   b8dd8:	f7ff ff1a 	bl	b8c10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8ddc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8dde:	a80e      	add	r0, sp, #56	; 0x38
   b8de0:	f7fb ff76 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8de4:	2c00      	cmp	r4, #0
   b8de6:	f47f af4d 	bne.w	b8c84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8dea:	2320      	movs	r3, #32
   b8dec:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8df0:	4b21      	ldr	r3, [pc, #132]	; (b8e78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8df2:	9300      	str	r3, [sp, #0]
   b8df4:	aa0d      	add	r2, sp, #52	; 0x34
   b8df6:	4623      	mov	r3, r4
   b8df8:	e777      	b.n	b8cea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8dfa:	4639      	mov	r1, r7
   b8dfc:	4640      	mov	r0, r8
   b8dfe:	f7ff fa90 	bl	b8322 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8e02:	a80c      	add	r0, sp, #48	; 0x30
   b8e04:	f7fb ff64 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e08:	e740      	b.n	b8c8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8e0a:	a80b      	add	r0, sp, #44	; 0x2c
   b8e0c:	f7ff f8fa 	bl	b8004 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8e10:	4651      	mov	r1, sl
   b8e12:	a815      	add	r0, sp, #84	; 0x54
   b8e14:	f7fe ffaa 	bl	b7d6c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8e18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e1a:	2300      	movs	r3, #0
   b8e1c:	3214      	adds	r2, #20
   b8e1e:	a915      	add	r1, sp, #84	; 0x54
   b8e20:	2001      	movs	r0, #1
   b8e22:	f7fd fd37 	bl	b6894 <hal_ble_gatt_server_add_service>
   b8e26:	2800      	cmp	r0, #0
   b8e28:	d1e7      	bne.n	b8dfa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8e2a:	6835      	ldr	r5, [r6, #0]
   b8e2c:	a90b      	add	r1, sp, #44	; 0x2c
   b8e2e:	a80d      	add	r0, sp, #52	; 0x34
   b8e30:	f7ff fa85 	bl	b833e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8e34:	4628      	mov	r0, r5
   b8e36:	a90d      	add	r1, sp, #52	; 0x34
   b8e38:	f7ff fe7b 	bl	b8b32 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8e3c:	4605      	mov	r5, r0
   b8e3e:	a80e      	add	r0, sp, #56	; 0x38
   b8e40:	f7fb ff46 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e44:	2d00      	cmp	r5, #0
   b8e46:	d0d8      	beq.n	b8dfa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8e48:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8e4a:	6853      	ldr	r3, [r2, #4]
   b8e4c:	6812      	ldr	r2, [r2, #0]
   b8e4e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8e52:	3b01      	subs	r3, #1
   b8e54:	a80c      	add	r0, sp, #48	; 0x30
   b8e56:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8e5a:	f7fb ff39 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e5e:	e76b      	b.n	b8d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8e60:	000bdb3e 	.word	0x000bdb3e
   b8e64:	000bda5b 	.word	0x000bda5b
   b8e68:	000bdc02 	.word	0x000bdc02
   b8e6c:	2003e690 	.word	0x2003e690
   b8e70:	002c0003 	.word	0x002c0003
   b8e74:	000b819d 	.word	0x000b819d
   b8e78:	000bdb69 	.word	0x000bdb69

000b8e7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8e7c:	4802      	ldr	r0, [pc, #8]	; (b8e88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8e7e:	2300      	movs	r3, #0
   b8e80:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8e82:	f7fd bd9f 	b.w	b69c4 <os_mutex_recursive_create>
   b8e86:	bf00      	nop
   b8e88:	2003e694 	.word	0x2003e694

000b8e8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8e8e:	4606      	mov	r6, r0
   b8e90:	460d      	mov	r5, r1
  size_t n = 0;
   b8e92:	188f      	adds	r7, r1, r2
   b8e94:	2400      	movs	r4, #0
  while (size--) {
   b8e96:	42bd      	cmp	r5, r7
   b8e98:	d00c      	beq.n	b8eb4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8e9a:	6833      	ldr	r3, [r6, #0]
   b8e9c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8ea0:	689b      	ldr	r3, [r3, #8]
   b8ea2:	4630      	mov	r0, r6
   b8ea4:	4798      	blx	r3
     if (chunk>=0)
   b8ea6:	1e03      	subs	r3, r0, #0
   b8ea8:	db01      	blt.n	b8eae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8eaa:	441c      	add	r4, r3
  while (size--) {
   b8eac:	e7f3      	b.n	b8e96 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8eae:	2c00      	cmp	r4, #0
   b8eb0:	bf08      	it	eq
   b8eb2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8eb4:	4620      	mov	r0, r4
   b8eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8eb8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8eb8:	b513      	push	{r0, r1, r4, lr}
   b8eba:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8ebc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8ebe:	b159      	cbz	r1, b8ed8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8ec0:	9101      	str	r1, [sp, #4]
   b8ec2:	f002 f9e0 	bl	bb286 <strlen>
   b8ec6:	6823      	ldr	r3, [r4, #0]
   b8ec8:	9901      	ldr	r1, [sp, #4]
   b8eca:	68db      	ldr	r3, [r3, #12]
   b8ecc:	4602      	mov	r2, r0
   b8ece:	4620      	mov	r0, r4
    }
   b8ed0:	b002      	add	sp, #8
   b8ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8ed6:	4718      	bx	r3
    }
   b8ed8:	b002      	add	sp, #8
   b8eda:	bd10      	pop	{r4, pc}

000b8edc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8edc:	6803      	ldr	r3, [r0, #0]
   b8ede:	689b      	ldr	r3, [r3, #8]
   b8ee0:	4718      	bx	r3

000b8ee2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8ee2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8ee4:	210d      	movs	r1, #13
{
   b8ee6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8ee8:	f7ff fff8 	bl	b8edc <_ZN5Print5printEc>
  n += print('\n');
   b8eec:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8eee:	4604      	mov	r4, r0
  n += print('\n');
   b8ef0:	4628      	mov	r0, r5
   b8ef2:	f7ff fff3 	bl	b8edc <_ZN5Print5printEc>
  return n;
}
   b8ef6:	4420      	add	r0, r4
   b8ef8:	bd38      	pop	{r3, r4, r5, pc}

000b8efa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8efa:	b538      	push	{r3, r4, r5, lr}
   b8efc:	4605      	mov	r5, r0
  return write(str);
   b8efe:	f7ff ffdb 	bl	b8eb8 <_ZN5Print5writeEPKc>
   b8f02:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8f04:	4628      	mov	r0, r5
   b8f06:	f7ff ffec 	bl	b8ee2 <_ZN5Print7printlnEv>
  return n;
}
   b8f0a:	4420      	add	r0, r4
   b8f0c:	bd38      	pop	{r3, r4, r5, pc}

000b8f0e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8f0e:	b530      	push	{r4, r5, lr}
   b8f10:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8f12:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8f14:	2a01      	cmp	r2, #1
  *str = '\0';
   b8f16:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8f1a:	bf98      	it	ls
   b8f1c:	220a      	movls	r2, #10
   b8f1e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8f20:	460d      	mov	r5, r1
   b8f22:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8f26:	fb01 5312 	mls	r3, r1, r2, r5
   b8f2a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8f2e:	2b09      	cmp	r3, #9
   b8f30:	bf94      	ite	ls
   b8f32:	3330      	addls	r3, #48	; 0x30
   b8f34:	3337      	addhi	r3, #55	; 0x37
   b8f36:	b2db      	uxtb	r3, r3
  } while(n);
   b8f38:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8f3a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8f3e:	d9ef      	bls.n	b8f20 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8f40:	4621      	mov	r1, r4
   b8f42:	f7ff ffb9 	bl	b8eb8 <_ZN5Print5writeEPKc>
}
   b8f46:	b00b      	add	sp, #44	; 0x2c
   b8f48:	bd30      	pop	{r4, r5, pc}

000b8f4a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f4e:	b086      	sub	sp, #24
   b8f50:	af00      	add	r7, sp, #0
   b8f52:	4605      	mov	r5, r0
   b8f54:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8f56:	1d38      	adds	r0, r7, #4
   b8f58:	2114      	movs	r1, #20
{
   b8f5a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8f5c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8f5e:	f7fd ff85 	bl	b6e6c <vsnprintf>

    if (n<bufsize)
   b8f62:	2813      	cmp	r0, #19
   b8f64:	d80e      	bhi.n	b8f84 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8f66:	1d39      	adds	r1, r7, #4
   b8f68:	4628      	mov	r0, r5
   b8f6a:	f7ff ffa5 	bl	b8eb8 <_ZN5Print5writeEPKc>
   b8f6e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8f70:	b11e      	cbz	r6, b8f7a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8f72:	4628      	mov	r0, r5
   b8f74:	f7ff ffb5 	bl	b8ee2 <_ZN5Print7printlnEv>
   b8f78:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8f7a:	4620      	mov	r0, r4
   b8f7c:	3718      	adds	r7, #24
   b8f7e:	46bd      	mov	sp, r7
   b8f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8f84:	f100 0308 	add.w	r3, r0, #8
   b8f88:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8f8c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8f8e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8f92:	4622      	mov	r2, r4
   b8f94:	1c41      	adds	r1, r0, #1
   b8f96:	683b      	ldr	r3, [r7, #0]
   b8f98:	4668      	mov	r0, sp
   b8f9a:	f7fd ff67 	bl	b6e6c <vsnprintf>
  return write(str);
   b8f9e:	4669      	mov	r1, sp
   b8fa0:	4628      	mov	r0, r5
   b8fa2:	f7ff ff89 	bl	b8eb8 <_ZN5Print5writeEPKc>
   b8fa6:	4604      	mov	r4, r0
   b8fa8:	46c5      	mov	sp, r8
   b8faa:	e7e1      	b.n	b8f70 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8fac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8fac:	4b01      	ldr	r3, [pc, #4]	; (b8fb4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8fae:	4a02      	ldr	r2, [pc, #8]	; (b8fb8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8fb0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8fb2:	4770      	bx	lr
   b8fb4:	2003e69c 	.word	0x2003e69c
   b8fb8:	000bdc22 	.word	0x000bdc22

000b8fbc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b8fc0:	4a15      	ldr	r2, [pc, #84]	; (b9018 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b8fc2:	f8df 8060 	ldr.w	r8, [pc, #96]	; b9024 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b8fc6:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8fca:	1980      	adds	r0, r0, r6
   b8fcc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b8fd0:	4b12      	ldr	r3, [pc, #72]	; (b901c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b8fd2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b8fd6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8fda:	1986      	adds	r6, r0, r6
   b8fdc:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b8fe0:	42bb      	cmp	r3, r7
   b8fe2:	bf08      	it	eq
   b8fe4:	42b2      	cmpeq	r2, r6
{
   b8fe6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8fe8:	d013      	beq.n	b9012 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8fea:	a903      	add	r1, sp, #12
   b8fec:	4668      	mov	r0, sp
   b8fee:	e9cd 6700 	strd	r6, r7, [sp]
   b8ff2:	f7fd ff6b 	bl	b6ecc <localtime_r>
	calendar_time.tm_year += 1900;
   b8ff6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8ff8:	4d09      	ldr	r5, [pc, #36]	; (b9020 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8ffa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8ffe:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b9000:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b900a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b900e:	6823      	ldr	r3, [r4, #0]
   b9010:	602b      	str	r3, [r5, #0]
    }
}
   b9012:	b00c      	add	sp, #48	; 0x30
   b9014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9018:	2003e6d0 	.word	0x2003e6d0
   b901c:	2003e6c8 	.word	0x2003e6c8
   b9020:	2003e6a4 	.word	0x2003e6a4
   b9024:	2003e6d8 	.word	0x2003e6d8

000b9028 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b9028:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b902a:	2000      	movs	r0, #0
   b902c:	f7fd fee6 	bl	b6dfc <spark_sync_time_pending>
   b9030:	b128      	cbz	r0, b903e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9032:	f7fd fecb 	bl	b6dcc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9036:	f080 0001 	eor.w	r0, r0, #1
   b903a:	b2c0      	uxtb	r0, r0
    }
   b903c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b903e:	2001      	movs	r0, #1
   b9040:	e7fc      	b.n	b903c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b9044 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b9044:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b9046:	f7ff ffb9 	bl	b8fbc <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b904a:	4b02      	ldr	r3, [pc, #8]	; (b9054 <_ZN9TimeClass5monthEx+0x10>)
   b904c:	6918      	ldr	r0, [r3, #16]
}
   b904e:	3001      	adds	r0, #1
   b9050:	bd08      	pop	{r3, pc}
   b9052:	bf00      	nop
   b9054:	2003e6a4 	.word	0x2003e6a4

000b9058 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b9058:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b905c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b9060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b9064:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b9066:	d411      	bmi.n	b908c <_ZN9TimeClass4zoneEf+0x34>
   b9068:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b906c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b9070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9074:	dc0a      	bgt.n	b908c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b9076:	eddf 7a06 	vldr	s15, [pc, #24]	; b9090 <_ZN9TimeClass4zoneEf+0x38>
   b907a:	ee60 7a27 	vmul.f32	s15, s0, s15
   b907e:	ee17 0a90 	vmov	r0, s15
   b9082:	f001 ffdf 	bl	bb044 <__aeabi_f2lz>
   b9086:	4b03      	ldr	r3, [pc, #12]	; (b9094 <_ZN9TimeClass4zoneEf+0x3c>)
   b9088:	e9c3 0100 	strd	r0, r1, [r3]
}
   b908c:	bd08      	pop	{r3, pc}
   b908e:	bf00      	nop
   b9090:	45610000 	.word	0x45610000
   b9094:	2003e6d0 	.word	0x2003e6d0

000b9098 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b9098:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b909a:	2000      	movs	r0, #0
   b909c:	f7fd fbb8 	bl	b6810 <hal_rtc_time_is_valid>
    if (rtcstate)
   b90a0:	4604      	mov	r4, r0
   b90a2:	b9a0      	cbnz	r0, b90ce <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b90a4:	f7fd fdde 	bl	b6c64 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b90a8:	2801      	cmp	r0, #1
   b90aa:	d110      	bne.n	b90ce <_ZN9TimeClass7isValidEv+0x36>
   b90ac:	4620      	mov	r0, r4
   b90ae:	f7fd fe09 	bl	b6cc4 <system_thread_get_state>
   b90b2:	b960      	cbnz	r0, b90ce <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b90b4:	f7ff ffb8 	bl	b9028 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b90b8:	b910      	cbnz	r0, b90c0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b90ba:	f7fd fe7f 	bl	b6dbc <spark_process>
        while (_while() && !_condition()) {
   b90be:	e7f9      	b.n	b90b4 <_ZN9TimeClass7isValidEv+0x1c>
   b90c0:	f7ff ffb2 	bl	b9028 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b90c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b90c8:	2000      	movs	r0, #0
   b90ca:	f7fd bba1 	b.w	b6810 <hal_rtc_time_is_valid>
}
   b90ce:	4620      	mov	r0, r4
   b90d0:	bd10      	pop	{r4, pc}

000b90d2 <_ZN9TimeClass3nowEv>:
{
   b90d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b90d4:	f7ff ffe0 	bl	b9098 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b90d8:	2210      	movs	r2, #16
   b90da:	2100      	movs	r1, #0
   b90dc:	4668      	mov	r0, sp
   b90de:	f002 f85c 	bl	bb19a <memset>
    hal_rtc_get_time(&tv, nullptr);
   b90e2:	2100      	movs	r1, #0
   b90e4:	4668      	mov	r0, sp
   b90e6:	f7fd fb9b 	bl	b6820 <hal_rtc_get_time>
}
   b90ea:	9800      	ldr	r0, [sp, #0]
   b90ec:	b005      	add	sp, #20
   b90ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b90f4 <_ZN9TimeClass4hourEv>:
{
   b90f4:	b508      	push	{r3, lr}
	return hour(now());
   b90f6:	f7ff ffec 	bl	b90d2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b90fa:	17c1      	asrs	r1, r0, #31
   b90fc:	f7ff ff5e 	bl	b8fbc <_ZL22Refresh_UnixTime_Cachex>
}
   b9100:	4b01      	ldr	r3, [pc, #4]	; (b9108 <_ZN9TimeClass4hourEv+0x14>)
   b9102:	6898      	ldr	r0, [r3, #8]
   b9104:	bd08      	pop	{r3, pc}
   b9106:	bf00      	nop
   b9108:	2003e6a4 	.word	0x2003e6a4

000b910c <_ZN9TimeClass6minuteEv>:
{
   b910c:	b508      	push	{r3, lr}
	return minute(now());
   b910e:	f7ff ffe0 	bl	b90d2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9112:	17c1      	asrs	r1, r0, #31
   b9114:	f7ff ff52 	bl	b8fbc <_ZL22Refresh_UnixTime_Cachex>
}
   b9118:	4b01      	ldr	r3, [pc, #4]	; (b9120 <_ZN9TimeClass6minuteEv+0x14>)
   b911a:	6858      	ldr	r0, [r3, #4]
   b911c:	bd08      	pop	{r3, pc}
   b911e:	bf00      	nop
   b9120:	2003e6a4 	.word	0x2003e6a4

000b9124 <_ZN9TimeClass6secondEv>:
{
   b9124:	b508      	push	{r3, lr}
	return second(now());
   b9126:	f7ff ffd4 	bl	b90d2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b912a:	17c1      	asrs	r1, r0, #31
   b912c:	f7ff ff46 	bl	b8fbc <_ZL22Refresh_UnixTime_Cachex>
}
   b9130:	4b01      	ldr	r3, [pc, #4]	; (b9138 <_ZN9TimeClass6secondEv+0x14>)
   b9132:	6818      	ldr	r0, [r3, #0]
   b9134:	bd08      	pop	{r3, pc}
   b9136:	bf00      	nop
   b9138:	2003e6a4 	.word	0x2003e6a4

000b913c <_ZN9TimeClass3dayEv>:
{
   b913c:	b508      	push	{r3, lr}
	return day(now());
   b913e:	f7ff ffc8 	bl	b90d2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9142:	17c1      	asrs	r1, r0, #31
   b9144:	f7ff ff3a 	bl	b8fbc <_ZL22Refresh_UnixTime_Cachex>
}
   b9148:	4b01      	ldr	r3, [pc, #4]	; (b9150 <_ZN9TimeClass3dayEv+0x14>)
   b914a:	68d8      	ldr	r0, [r3, #12]
   b914c:	bd08      	pop	{r3, pc}
   b914e:	bf00      	nop
   b9150:	2003e6a4 	.word	0x2003e6a4

000b9154 <_ZN9TimeClass5monthEv>:
{
   b9154:	b508      	push	{r3, lr}
	return month(now());
   b9156:	f7ff ffbc 	bl	b90d2 <_ZN9TimeClass3nowEv>
}
   b915a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b915e:	17c1      	asrs	r1, r0, #31
   b9160:	f7ff bf70 	b.w	b9044 <_ZN9TimeClass5monthEx>

000b9164 <_ZN9TimeClass4yearEv>:
{
   b9164:	b508      	push	{r3, lr}
	return year(now());
   b9166:	f7ff ffb4 	bl	b90d2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b916a:	17c1      	asrs	r1, r0, #31
   b916c:	f7ff ff26 	bl	b8fbc <_ZL22Refresh_UnixTime_Cachex>
}
   b9170:	4b01      	ldr	r3, [pc, #4]	; (b9178 <_ZN9TimeClass4yearEv+0x14>)
   b9172:	6958      	ldr	r0, [r3, #20]
   b9174:	bd08      	pop	{r3, pc}
   b9176:	bf00      	nop
   b9178:	2003e6a4 	.word	0x2003e6a4

000b917c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b917c:	4b02      	ldr	r3, [pc, #8]	; (b9188 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b917e:	681a      	ldr	r2, [r3, #0]
   b9180:	4b02      	ldr	r3, [pc, #8]	; (b918c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9182:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9184:	4770      	bx	lr
   b9186:	bf00      	nop
   b9188:	2003d8c0 	.word	0x2003d8c0
   b918c:	2003e6a0 	.word	0x2003e6a0

000b9190 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9190:	2100      	movs	r1, #0
   b9192:	f7fd bd77 	b.w	b6c84 <system_delay_ms>
	...

000b9198 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9198:	b510      	push	{r4, lr}
   b919a:	4b04      	ldr	r3, [pc, #16]	; (b91ac <_ZN9TCPClientD1Ev+0x14>)
   b919c:	6003      	str	r3, [r0, #0]
   b919e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b91a0:	6980      	ldr	r0, [r0, #24]
   b91a2:	b108      	cbz	r0, b91a8 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b91a4:	f7fe fd29 	bl	b7bfa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b91a8:	4620      	mov	r0, r4
   b91aa:	bd10      	pop	{r4, pc}
   b91ac:	000bdd38 	.word	0x000bdd38

000b91b0 <_ZN9TCPClientD0Ev>:
   b91b0:	b510      	push	{r4, lr}
   b91b2:	4604      	mov	r4, r0
   b91b4:	f7ff fff0 	bl	b9198 <_ZN9TCPClientD1Ev>
   b91b8:	4620      	mov	r0, r4
   b91ba:	211c      	movs	r1, #28
   b91bc:	f7fa ff71 	bl	b40a2 <_ZdlPvj>
   b91c0:	4620      	mov	r0, r4
   b91c2:	bd10      	pop	{r4, pc}

000b91c4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b91c4:	4b01      	ldr	r3, [pc, #4]	; (b91cc <_GLOBAL__sub_I_RGB+0x8>)
   b91c6:	2200      	movs	r2, #0
   b91c8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b91ca:	4770      	bx	lr
   b91cc:	2003e6e0 	.word	0x2003e6e0

000b91d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b91d0:	4b01      	ldr	r3, [pc, #4]	; (b91d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b91d2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b91d4:	4770      	bx	lr
   b91d6:	bf00      	nop
   b91d8:	2003d8c4 	.word	0x2003d8c4

000b91dc <serialEventRun>:
{
   b91dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b91de:	4b0b      	ldr	r3, [pc, #44]	; (b920c <serialEventRun+0x30>)
   b91e0:	b143      	cbz	r3, b91f4 <serialEventRun+0x18>
   b91e2:	f000 fc25 	bl	b9a30 <_Z16_fetch_usbserialv>
   b91e6:	6803      	ldr	r3, [r0, #0]
   b91e8:	691b      	ldr	r3, [r3, #16]
   b91ea:	4798      	blx	r3
   b91ec:	2800      	cmp	r0, #0
   b91ee:	dd01      	ble.n	b91f4 <serialEventRun+0x18>
        serialEvent();
   b91f0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b91f4:	4b06      	ldr	r3, [pc, #24]	; (b9210 <serialEventRun+0x34>)
   b91f6:	b143      	cbz	r3, b920a <serialEventRun+0x2e>
   b91f8:	f001 f936 	bl	ba468 <_Z22__fetch_global_Serial1v>
   b91fc:	6803      	ldr	r3, [r0, #0]
   b91fe:	691b      	ldr	r3, [r3, #16]
   b9200:	4798      	blx	r3
   b9202:	2800      	cmp	r0, #0
   b9204:	dd01      	ble.n	b920a <serialEventRun+0x2e>
        serialEvent1();
   b9206:	f3af 8000 	nop.w
}
   b920a:	bd08      	pop	{r3, pc}
	...

000b9214 <_post_loop>:
{
   b9214:	b508      	push	{r3, lr}
	serialEventRun();
   b9216:	f7ff ffe1 	bl	b91dc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b921a:	f7fd faf1 	bl	b6800 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b921e:	4b01      	ldr	r3, [pc, #4]	; (b9224 <_post_loop+0x10>)
   b9220:	6018      	str	r0, [r3, #0]
}
   b9222:	bd08      	pop	{r3, pc}
   b9224:	2003e744 	.word	0x2003e744

000b9228 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9228:	4805      	ldr	r0, [pc, #20]	; (b9240 <_Z33system_initialize_user_backup_ramv+0x18>)
   b922a:	4a06      	ldr	r2, [pc, #24]	; (b9244 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b922c:	4906      	ldr	r1, [pc, #24]	; (b9248 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b922e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9230:	1a12      	subs	r2, r2, r0
   b9232:	f001 ff8a 	bl	bb14a <memcpy>
    __backup_sram_signature = signature;
   b9236:	4b05      	ldr	r3, [pc, #20]	; (b924c <_Z33system_initialize_user_backup_ramv+0x24>)
   b9238:	4a05      	ldr	r2, [pc, #20]	; (b9250 <_Z33system_initialize_user_backup_ramv+0x28>)
   b923a:	601a      	str	r2, [r3, #0]
}
   b923c:	bd08      	pop	{r3, pc}
   b923e:	bf00      	nop
   b9240:	2003f400 	.word	0x2003f400
   b9244:	2003f404 	.word	0x2003f404
   b9248:	000be3e4 	.word	0x000be3e4
   b924c:	2003f400 	.word	0x2003f400
   b9250:	9a271c1e 	.word	0x9a271c1e

000b9254 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9254:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9256:	2300      	movs	r3, #0
   b9258:	9300      	str	r3, [sp, #0]
   b925a:	461a      	mov	r2, r3
   b925c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9260:	f7fd fd42 	bl	b6ce8 <system_ctrl_set_result>
}
   b9264:	b003      	add	sp, #12
   b9266:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b926c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b926c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b926e:	8843      	ldrh	r3, [r0, #2]
   b9270:	2b0a      	cmp	r3, #10
   b9272:	d008      	beq.n	b9286 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9274:	2b50      	cmp	r3, #80	; 0x50
   b9276:	d10b      	bne.n	b9290 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9278:	4b09      	ldr	r3, [pc, #36]	; (b92a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b927a:	681b      	ldr	r3, [r3, #0]
   b927c:	b14b      	cbz	r3, b9292 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b927e:	b003      	add	sp, #12
   b9280:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9284:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9286:	f7ff ffe5 	bl	b9254 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b928a:	b003      	add	sp, #12
   b928c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9290:	2300      	movs	r3, #0
   b9292:	9300      	str	r3, [sp, #0]
   b9294:	461a      	mov	r2, r3
   b9296:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b929a:	f7fd fd25 	bl	b6ce8 <system_ctrl_set_result>
}
   b929e:	e7f4      	b.n	b928a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b92a0:	2003e6f4 	.word	0x2003e6f4

000b92a4 <module_user_init_hook>:
{
   b92a4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b92a6:	4812      	ldr	r0, [pc, #72]	; (b92f0 <module_user_init_hook+0x4c>)
   b92a8:	2100      	movs	r1, #0
   b92aa:	f7fd fe07 	bl	b6ebc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b92ae:	4b11      	ldr	r3, [pc, #68]	; (b92f4 <module_user_init_hook+0x50>)
   b92b0:	681a      	ldr	r2, [r3, #0]
   b92b2:	4b11      	ldr	r3, [pc, #68]	; (b92f8 <module_user_init_hook+0x54>)
   b92b4:	429a      	cmp	r2, r3
   b92b6:	4b11      	ldr	r3, [pc, #68]	; (b92fc <module_user_init_hook+0x58>)
   b92b8:	bf0c      	ite	eq
   b92ba:	2201      	moveq	r2, #1
   b92bc:	2200      	movne	r2, #0
   b92be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b92c0:	d001      	beq.n	b92c6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b92c2:	f7ff ffb1 	bl	b9228 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b92c6:	f7fd fa8b 	bl	b67e0 <HAL_RNG_GetRandomNumber>
   b92ca:	4604      	mov	r4, r0
    srand(seed);
   b92cc:	f001 ff6e 	bl	bb1ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b92d0:	4b0b      	ldr	r3, [pc, #44]	; (b9300 <module_user_init_hook+0x5c>)
   b92d2:	b113      	cbz	r3, b92da <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b92d4:	4620      	mov	r0, r4
   b92d6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b92da:	2100      	movs	r1, #0
   b92dc:	4808      	ldr	r0, [pc, #32]	; (b9300 <module_user_init_hook+0x5c>)
   b92de:	f7fd fd95 	bl	b6e0c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b92e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b92e6:	4807      	ldr	r0, [pc, #28]	; (b9304 <module_user_init_hook+0x60>)
   b92e8:	2100      	movs	r1, #0
   b92ea:	f7fd bcf3 	b.w	b6cd4 <system_ctrl_set_app_request_handler>
   b92ee:	bf00      	nop
   b92f0:	000b91d1 	.word	0x000b91d1
   b92f4:	2003f400 	.word	0x2003f400
   b92f8:	9a271c1e 	.word	0x9a271c1e
   b92fc:	2003e6f0 	.word	0x2003e6f0
   b9300:	00000000 	.word	0x00000000
   b9304:	000b926d 	.word	0x000b926d

000b9308 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9308:	4770      	bx	lr

000b930a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b930a:	2000      	movs	r0, #0
   b930c:	4770      	bx	lr

000b930e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b930e:	b510      	push	{r4, lr}
   b9310:	2110      	movs	r1, #16
   b9312:	4604      	mov	r4, r0
   b9314:	f7fa fec5 	bl	b40a2 <_ZdlPvj>
   b9318:	4620      	mov	r0, r4
   b931a:	bd10      	pop	{r4, pc}

000b931c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b931c:	b508      	push	{r3, lr}
      { delete this; }
   b931e:	f7ff fff6 	bl	b930e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b9322:	bd08      	pop	{r3, pc}

000b9324 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b9324:	b530      	push	{r4, r5, lr}
        type_(type) {
   b9326:	2200      	movs	r2, #0
   b9328:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b932c:	6002      	str	r2, [r0, #0]
   b932e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9330:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b9332:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9334:	680c      	ldr	r4, [r1, #0]
   b9336:	8085      	strh	r5, [r0, #4]
   b9338:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b933a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b933c:	bd30      	pop	{r4, r5, pc}

000b933e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b933e:	b510      	push	{r4, lr}
   b9340:	4604      	mov	r4, r0
    free((void*)msg_);
   b9342:	6800      	ldr	r0, [r0, #0]
   b9344:	f7fd fd72 	bl	b6e2c <free>
}
   b9348:	4620      	mov	r0, r4
   b934a:	bd10      	pop	{r4, pc}

000b934c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b934c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b934e:	68c4      	ldr	r4, [r0, #12]
   b9350:	b1f4      	cbz	r4, b9390 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b9352:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b9354:	2b02      	cmp	r3, #2
   b9356:	d103      	bne.n	b9360 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b9358:	f104 000c 	add.w	r0, r4, #12
   b935c:	f7ff ffef 	bl	b933e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b9360:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b9362:	b135      	cbz	r5, b9372 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b9364:	4628      	mov	r0, r5
   b9366:	f7fb f84d 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
   b936a:	2110      	movs	r1, #16
   b936c:	4628      	mov	r0, r5
   b936e:	f7fa fe98 	bl	b40a2 <_ZdlPvj>
   b9372:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b9374:	b135      	cbz	r5, b9384 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b9376:	4628      	mov	r0, r5
   b9378:	f7fb f844 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
   b937c:	2110      	movs	r1, #16
   b937e:	4628      	mov	r0, r5
   b9380:	f7fa fe8f 	bl	b40a2 <_ZdlPvj>
   b9384:	4620      	mov	r0, r4
   b9386:	2114      	movs	r1, #20
   b9388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b938c:	f7fa be89 	b.w	b40a2 <_ZdlPvj>
   b9390:	bd38      	pop	{r3, r4, r5, pc}

000b9392 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9392:	680b      	ldr	r3, [r1, #0]
   b9394:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9396:	684b      	ldr	r3, [r1, #4]
   b9398:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b939a:	b113      	cbz	r3, b93a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b939c:	685a      	ldr	r2, [r3, #4]
   b939e:	3201      	adds	r2, #1
   b93a0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b93a2:	4770      	bx	lr

000b93a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b93a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b93a6:	4604      	mov	r4, r0
   b93a8:	4668      	mov	r0, sp
   b93aa:	460d      	mov	r5, r1
   b93ac:	f7ff fff1 	bl	b9392 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b93b0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b93b2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b93b4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b93b6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b93b8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b93ba:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b93bc:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b93be:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b93c0:	f7fb fc86 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b93c4:	b135      	cbz	r5, b93d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b93c6:	1d28      	adds	r0, r5, #4
   b93c8:	f7fb fc82 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b93cc:	2108      	movs	r1, #8
   b93ce:	4628      	mov	r0, r5
   b93d0:	f7fa fe67 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b93d4:	4620      	mov	r0, r4
   b93d6:	b003      	add	sp, #12
   b93d8:	bd30      	pop	{r4, r5, pc}

000b93da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b93da:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b93dc:	b510      	push	{r4, lr}
      if (_M_empty())
   b93de:	b90a      	cbnz	r2, b93e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b93e0:	f001 f8a4 	bl	ba52c <_ZSt25__throw_bad_function_callv>
    }
   b93e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b93e8:	68c3      	ldr	r3, [r0, #12]
   b93ea:	4718      	bx	r3

000b93ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b93ec:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b93ee:	6800      	ldr	r0, [r0, #0]
   b93f0:	f100 0110 	add.w	r1, r0, #16
   b93f4:	f7ff fff1 	bl	b93da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b93f8:	bd08      	pop	{r3, pc}

000b93fa <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b93fa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b93fc:	b510      	push	{r4, lr}
      if (_M_empty())
   b93fe:	b90a      	cbnz	r2, b9404 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b9400:	f001 f894 	bl	ba52c <_ZSt25__throw_bad_function_callv>
    }
   b9404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9408:	68c3      	ldr	r3, [r0, #12]
   b940a:	4718      	bx	r3

000b940c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b940c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b940e:	6800      	ldr	r0, [r0, #0]
   b9410:	f100 0110 	add.w	r1, r0, #16
   b9414:	f7ff fff1 	bl	b93fa <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b9418:	bd08      	pop	{r3, pc}
	...

000b941c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b941c:	b538      	push	{r3, r4, r5, lr}
   b941e:	2300      	movs	r3, #0
   b9420:	4604      	mov	r4, r0
   b9422:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9424:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b9426:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9428:	f7fa fe35 	bl	b4096 <_Znwj>
   b942c:	b128      	cbz	r0, b943a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b942e:	2301      	movs	r3, #1
   b9430:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b9434:	4b02      	ldr	r3, [pc, #8]	; (b9440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b9436:	6003      	str	r3, [r0, #0]
   b9438:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b943a:	6020      	str	r0, [r4, #0]
	}
   b943c:	4620      	mov	r0, r4
   b943e:	bd38      	pop	{r3, r4, r5, pc}
   b9440:	000bdc4c 	.word	0x000bdc4c

000b9444 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b9444:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9446:	2300      	movs	r3, #0
   b9448:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b944a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b944c:	4604      	mov	r4, r0
   b944e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9450:	b12b      	cbz	r3, b945e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9452:	2202      	movs	r2, #2
   b9454:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9456:	68eb      	ldr	r3, [r5, #12]
   b9458:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b945a:	68ab      	ldr	r3, [r5, #8]
   b945c:	60a3      	str	r3, [r4, #8]
    }
   b945e:	4620      	mov	r0, r4
   b9460:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9464 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b9464:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9466:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b9468:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b946a:	4668      	mov	r0, sp
   b946c:	f7ff ff5a 	bl	b9324 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b9470:	f04f 0302 	mov.w	r3, #2
   b9474:	e8d4 2f4f 	ldrexb	r2, [r4]
   b9478:	2a00      	cmp	r2, #0
   b947a:	d103      	bne.n	b9484 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b947c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b9480:	2900      	cmp	r1, #0
   b9482:	d1f7      	bne.n	b9474 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b9484:	d125      	bne.n	b94d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b9486:	f104 050c 	add.w	r5, r4, #12
   b948a:	4669      	mov	r1, sp
   b948c:	4628      	mov	r0, r5
   b948e:	f7ff ff49 	bl	b9324 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b9492:	f3bf 8f5b 	dmb	ish
   b9496:	2301      	movs	r3, #1
   b9498:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b949a:	2000      	movs	r0, #0
   b949c:	f104 0308 	add.w	r3, r4, #8
   b94a0:	f3bf 8f5b 	dmb	ish
   b94a4:	e853 6f00 	ldrex	r6, [r3]
   b94a8:	e843 0200 	strex	r2, r0, [r3]
   b94ac:	2a00      	cmp	r2, #0
   b94ae:	d1f9      	bne.n	b94a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b94b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b94b4:	b16e      	cbz	r6, b94d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b94b6:	f7fd fbf5 	bl	b6ca4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b94ba:	b178      	cbz	r0, b94dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b94bc:	4629      	mov	r1, r5
   b94be:	4630      	mov	r0, r6
   b94c0:	f7ff ff8b 	bl	b93da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b94c4:	4630      	mov	r0, r6
   b94c6:	f7fa ff9d 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b94ca:	2110      	movs	r1, #16
   b94cc:	4630      	mov	r0, r6
   b94ce:	f7fa fde8 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b94d2:	4668      	mov	r0, sp
   b94d4:	f7ff ff33 	bl	b933e <_ZN8particle5ErrorD1Ev>
    }
   b94d8:	b009      	add	sp, #36	; 0x24
   b94da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b94dc:	4631      	mov	r1, r6
   b94de:	a802      	add	r0, sp, #8
   b94e0:	f7ff ffb0 	bl	b9444 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b94e4:	68e0      	ldr	r0, [r4, #12]
   b94e6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b94ea:	b108      	cbz	r0, b94f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b94ec:	f001 feae 	bl	bb24c <strdup>
        type_(type) {
   b94f0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b94f2:	2010      	movs	r0, #16
   b94f4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b94f8:	f7fa fdcd 	bl	b4096 <_Znwj>
   b94fc:	4605      	mov	r5, r0
   b94fe:	b1e8      	cbz	r0, b953c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b9500:	2700      	movs	r7, #0
   b9502:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9504:	2018      	movs	r0, #24
   b9506:	f7fa fdc6 	bl	b4096 <_Znwj>
   b950a:	4604      	mov	r4, r0
   b950c:	b188      	cbz	r0, b9532 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b950e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b9510:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9512:	a802      	add	r0, sp, #8
   b9514:	f7ff fa04 	bl	b8920 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9518:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b951a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b951c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b951e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9520:	9204      	str	r2, [sp, #16]
   b9522:	a906      	add	r1, sp, #24
   b9524:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9526:	60e3      	str	r3, [r4, #12]
   b9528:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b952c:	9205      	str	r2, [sp, #20]
   b952e:	f7ff fef9 	bl	b9324 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b9532:	4b08      	ldr	r3, [pc, #32]	; (b9554 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b9534:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9536:	4b08      	ldr	r3, [pc, #32]	; (b9558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9538:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b953a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b953c:	a806      	add	r0, sp, #24
   b953e:	f7ff fefe 	bl	b933e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9542:	a802      	add	r0, sp, #8
   b9544:	f7fa ff5e 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9548:	2200      	movs	r2, #0
   b954a:	4629      	mov	r1, r5
   b954c:	4803      	ldr	r0, [pc, #12]	; (b955c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b954e:	f7fd fbb1 	bl	b6cb4 <application_thread_invoke>
   b9552:	e7b7      	b.n	b94c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b9554:	000b93ed 	.word	0x000b93ed
   b9558:	000b9671 	.word	0x000b9671
   b955c:	000b9b79 	.word	0x000b9b79

000b9560 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b9560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9564:	b08b      	sub	sp, #44	; 0x2c
   b9566:	4605      	mov	r5, r0
   b9568:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b956c:	460f      	mov	r7, r1
   b956e:	4690      	mov	r8, r2
   b9570:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9572:	f7fd fc2b 	bl	b6dcc <spark_cloud_flag_connected>
   b9576:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b9578:	4683      	mov	fp, r0
   b957a:	bb38      	cbnz	r0, b95cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b957c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b9580:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9582:	a905      	add	r1, sp, #20
   b9584:	4630      	mov	r0, r6
   b9586:	f8ad 3018 	strh.w	r3, [sp, #24]
   b958a:	f7ff fecb 	bl	b9324 <_ZN8particle5ErrorC1EOS0_>
   b958e:	2014      	movs	r0, #20
   b9590:	f7fa fd81 	bl	b4096 <_Znwj>
   b9594:	4604      	mov	r4, r0
   b9596:	b148      	cbz	r0, b95ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b9598:	2302      	movs	r3, #2
   b959a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b959c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b959e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b95a2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b95a4:	4631      	mov	r1, r6
   b95a6:	300c      	adds	r0, #12
   b95a8:	f7ff febc 	bl	b9324 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b95ac:	4628      	mov	r0, r5
	: __shared_count(__p)
   b95ae:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b95b0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b95b4:	f7ff ff32 	bl	b941c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b95b8:	4630      	mov	r0, r6
   b95ba:	f7ff fec0 	bl	b933e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b95be:	a805      	add	r0, sp, #20
   b95c0:	f7ff febd 	bl	b933e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b95c4:	4628      	mov	r0, r5
   b95c6:	b00b      	add	sp, #44	; 0x2c
   b95c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b95cc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b95ce:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b95d0:	2014      	movs	r0, #20
   b95d2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b95d6:	9307      	str	r3, [sp, #28]
   b95d8:	f7fa fd5d 	bl	b4096 <_Znwj>
   b95dc:	4601      	mov	r1, r0
   b95de:	b118      	cbz	r0, b95e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b95e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b95e4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b95e6:	7044      	strb	r4, [r0, #1]
   b95e8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b95ea:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b95ec:	f7ff ff16 	bl	b941c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b95f0:	4b1e      	ldr	r3, [pc, #120]	; (b966c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b95f2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b95f4:	2008      	movs	r0, #8
   b95f6:	f7fa fd4e 	bl	b4096 <_Znwj>
   b95fa:	4604      	mov	r4, r0
   b95fc:	b110      	cbz	r0, b9604 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b95fe:	a903      	add	r1, sp, #12
   b9600:	f7ff fec7 	bl	b9392 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9604:	9600      	str	r6, [sp, #0]
   b9606:	fa5f f38a 	uxtb.w	r3, sl
   b960a:	464a      	mov	r2, r9
   b960c:	4641      	mov	r1, r8
   b960e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b9610:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9612:	f7fd fbe3 	bl	b6ddc <spark_send_event>
   b9616:	b9b8      	cbnz	r0, b9648 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b9618:	9b03      	ldr	r3, [sp, #12]
   b961a:	785b      	ldrb	r3, [r3, #1]
   b961c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b9620:	b993      	cbnz	r3, b9648 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b9622:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b9626:	a905      	add	r1, sp, #20
   b9628:	a803      	add	r0, sp, #12
   b962a:	9205      	str	r2, [sp, #20]
   b962c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b9630:	f7ff ff18 	bl	b9464 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9634:	a805      	add	r0, sp, #20
   b9636:	f7ff fe82 	bl	b933e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b963a:	a805      	add	r0, sp, #20
   b963c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b963e:	f7ff feb1 	bl	b93a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b9642:	a806      	add	r0, sp, #24
   b9644:	f7fb fb44 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9648:	a903      	add	r1, sp, #12
   b964a:	a805      	add	r0, sp, #20
   b964c:	f7ff fea1 	bl	b9392 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9650:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9652:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9654:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b9656:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b9658:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b965a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b965c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b965e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b9660:	f7fb fb36 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9664:	a804      	add	r0, sp, #16
   b9666:	f7fb fb33 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b966a:	e7ab      	b.n	b95c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b966c:	000b96ed 	.word	0x000b96ed

000b9670 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b9670:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9674:	4605      	mov	r5, r0
	switch (__op)
   b9676:	d103      	bne.n	b9680 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b9678:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b967a:	6003      	str	r3, [r0, #0]
      }
   b967c:	2000      	movs	r0, #0
   b967e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b9680:	2a02      	cmp	r2, #2
   b9682:	d010      	beq.n	b96a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b9684:	2a03      	cmp	r2, #3
   b9686:	d1f9      	bne.n	b967c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b9688:	6804      	ldr	r4, [r0, #0]
   b968a:	2c00      	cmp	r4, #0
   b968c:	d0f6      	beq.n	b967c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b968e:	f104 0010 	add.w	r0, r4, #16
   b9692:	f7ff fe54 	bl	b933e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9696:	4620      	mov	r0, r4
   b9698:	f7fa feb4 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b969c:	2118      	movs	r1, #24
   b969e:	4620      	mov	r0, r4
   b96a0:	f7fa fcff 	bl	b40a2 <_ZdlPvj>
   b96a4:	e7ea      	b.n	b967c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b96a6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b96a8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b96aa:	f7fa fcf4 	bl	b4096 <_Znwj>
   b96ae:	4604      	mov	r4, r0
   b96b0:	b150      	cbz	r0, b96c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b96b2:	4631      	mov	r1, r6
   b96b4:	f7ff fec6 	bl	b9444 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b96b8:	6930      	ldr	r0, [r6, #16]
   b96ba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b96be:	b108      	cbz	r0, b96c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b96c0:	f001 fdc4 	bl	bb24c <strdup>
        type_(type) {
   b96c4:	6120      	str	r0, [r4, #16]
   b96c6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b96c8:	602c      	str	r4, [r5, #0]
	}
   b96ca:	e7d7      	b.n	b967c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b96cc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b96cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b96ce:	2300      	movs	r3, #0
   b96d0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b96d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b96d4:	4604      	mov	r4, r0
   b96d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b96d8:	b12b      	cbz	r3, b96e6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b96da:	2202      	movs	r2, #2
   b96dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b96de:	68eb      	ldr	r3, [r5, #12]
   b96e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b96e2:	68ab      	ldr	r3, [r5, #8]
   b96e4:	60a3      	str	r3, [r4, #8]
    }
   b96e6:	4620      	mov	r0, r4
   b96e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b96ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b96ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b96ee:	b089      	sub	sp, #36	; 0x24
   b96f0:	4604      	mov	r4, r0
   b96f2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b96f4:	a801      	add	r0, sp, #4
   b96f6:	4611      	mov	r1, r2
   b96f8:	f7ff fe54 	bl	b93a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b96fc:	b1a4      	cbz	r4, b9728 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b96fe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9700:	b11d      	cbz	r5, b970a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b9702:	4628      	mov	r0, r5
   b9704:	f001 fda2 	bl	bb24c <strdup>
   b9708:	4605      	mov	r5, r0
   b970a:	a801      	add	r0, sp, #4
   b970c:	a903      	add	r1, sp, #12
        type_(type) {
   b970e:	9503      	str	r5, [sp, #12]
   b9710:	f8ad 4010 	strh.w	r4, [sp, #16]
   b9714:	f7ff fea6 	bl	b9464 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9718:	a803      	add	r0, sp, #12
   b971a:	f7ff fe10 	bl	b933e <_ZN8particle5ErrorD1Ev>
   b971e:	a802      	add	r0, sp, #8
   b9720:	f7fb fad6 	bl	b4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9724:	b009      	add	sp, #36	; 0x24
   b9726:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b9728:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b972a:	2301      	movs	r3, #1
   b972c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b9730:	2a00      	cmp	r2, #0
   b9732:	d103      	bne.n	b973c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b9734:	e8c5 3f41 	strexb	r1, r3, [r5]
   b9738:	2900      	cmp	r1, #0
   b973a:	d1f7      	bne.n	b972c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b973c:	d1ef      	bne.n	b971e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b973e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b9740:	f3bf 8f5b 	dmb	ish
   b9744:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b9746:	1d2b      	adds	r3, r5, #4
   b9748:	f3bf 8f5b 	dmb	ish
   b974c:	e853 6f00 	ldrex	r6, [r3]
   b9750:	e843 4200 	strex	r2, r4, [r3]
   b9754:	2a00      	cmp	r2, #0
   b9756:	d1f9      	bne.n	b974c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b9758:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b975c:	2e00      	cmp	r6, #0
   b975e:	d0de      	beq.n	b971e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b9760:	4620      	mov	r0, r4
   b9762:	f7fd fa9f 	bl	b6ca4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b9766:	4607      	mov	r7, r0
   b9768:	b160      	cbz	r0, b9784 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b976a:	f105 010c 	add.w	r1, r5, #12
   b976e:	4630      	mov	r0, r6
   b9770:	f7ff fe43 	bl	b93fa <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b9774:	4630      	mov	r0, r6
   b9776:	f7fa fe45 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b977a:	2110      	movs	r1, #16
   b977c:	4630      	mov	r0, r6
   b977e:	f7fa fc90 	bl	b40a2 <_ZdlPvj>
   b9782:	e7cc      	b.n	b971e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9784:	4631      	mov	r1, r6
   b9786:	a803      	add	r0, sp, #12
   b9788:	f7ff ffa0 	bl	b96cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b978c:	7b2b      	ldrb	r3, [r5, #12]
   b978e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b9792:	2010      	movs	r0, #16
   b9794:	f7fa fc7f 	bl	b4096 <_Znwj>
   b9798:	4605      	mov	r5, r0
   b979a:	b1d0      	cbz	r0, b97d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b979c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b979e:	2014      	movs	r0, #20
   b97a0:	f7fa fc79 	bl	b4096 <_Znwj>
   b97a4:	4604      	mov	r4, r0
   b97a6:	b178      	cbz	r0, b97c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b97a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b97aa:	4601      	mov	r1, r0
   b97ac:	a803      	add	r0, sp, #12
   b97ae:	f7ff f8b7 	bl	b8920 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b97b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b97b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b97b6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b97b8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b97ba:	9205      	str	r2, [sp, #20]
   b97bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b97be:	60e3      	str	r3, [r4, #12]
   b97c0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b97c4:	9206      	str	r2, [sp, #24]
   b97c6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b97c8:	4b06      	ldr	r3, [pc, #24]	; (b97e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b97ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b97cc:	4b06      	ldr	r3, [pc, #24]	; (b97e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b97ce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b97d0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b97d2:	a803      	add	r0, sp, #12
   b97d4:	f7fa fe16 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b97d8:	2200      	movs	r2, #0
   b97da:	4629      	mov	r1, r5
   b97dc:	4803      	ldr	r0, [pc, #12]	; (b97ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b97de:	f7fd fa69 	bl	b6cb4 <application_thread_invoke>
   b97e2:	e7c7      	b.n	b9774 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b97e4:	000b940d 	.word	0x000b940d
   b97e8:	000b97f1 	.word	0x000b97f1
   b97ec:	000b9b79 	.word	0x000b9b79

000b97f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b97f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b97f2:	b570      	push	{r4, r5, r6, lr}
   b97f4:	4604      	mov	r4, r0
	switch (__op)
   b97f6:	d103      	bne.n	b9800 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b97f8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b97fa:	6003      	str	r3, [r0, #0]
      }
   b97fc:	2000      	movs	r0, #0
   b97fe:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b9800:	2a02      	cmp	r2, #2
   b9802:	d00c      	beq.n	b981e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b9804:	2a03      	cmp	r2, #3
   b9806:	d1f9      	bne.n	b97fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b9808:	6804      	ldr	r4, [r0, #0]
   b980a:	2c00      	cmp	r4, #0
   b980c:	d0f6      	beq.n	b97fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b980e:	4620      	mov	r0, r4
   b9810:	f7fa fdf8 	bl	b4404 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9814:	2114      	movs	r1, #20
   b9816:	4620      	mov	r0, r4
   b9818:	f7fa fc43 	bl	b40a2 <_ZdlPvj>
   b981c:	e7ee      	b.n	b97fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b981e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b9820:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9822:	f7fa fc38 	bl	b4096 <_Znwj>
   b9826:	4605      	mov	r5, r0
   b9828:	b120      	cbz	r0, b9834 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b982a:	4631      	mov	r1, r6
   b982c:	f7ff ff4e 	bl	b96cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b9830:	7c33      	ldrb	r3, [r6, #16]
   b9832:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b9834:	6025      	str	r5, [r4, #0]
	}
   b9836:	e7e1      	b.n	b97fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b9838 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b9838:	4770      	bx	lr

000b983a <_ZN9IPAddressD0Ev>:
   b983a:	b510      	push	{r4, lr}
   b983c:	2118      	movs	r1, #24
   b983e:	4604      	mov	r4, r0
   b9840:	f7fa fc2f 	bl	b40a2 <_ZdlPvj>
   b9844:	4620      	mov	r0, r4
   b9846:	bd10      	pop	{r4, pc}

000b9848 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9848:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b984a:	7d03      	ldrb	r3, [r0, #20]
   b984c:	2b06      	cmp	r3, #6
{
   b984e:	b08d      	sub	sp, #52	; 0x34
   b9850:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9852:	f100 0704 	add.w	r7, r0, #4
   b9856:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b985a:	d012      	beq.n	b9882 <_ZNK9IPAddress7printToER5Print+0x3a>
   b985c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9860:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9864:	220a      	movs	r2, #10
   b9866:	4630      	mov	r0, r6
   b9868:	f7ff fb51 	bl	b8f0e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b986c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b986e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9870:	d019      	beq.n	b98a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9872:	2c00      	cmp	r4, #0
   b9874:	d0f4      	beq.n	b9860 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9876:	212e      	movs	r1, #46	; 0x2e
   b9878:	4630      	mov	r0, r6
   b987a:	f7ff fb2f 	bl	b8edc <_ZN5Print5printEc>
   b987e:	4404      	add	r4, r0
   b9880:	e7ee      	b.n	b9860 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9882:	232f      	movs	r3, #47	; 0x2f
   b9884:	466a      	mov	r2, sp
   b9886:	4639      	mov	r1, r7
   b9888:	200a      	movs	r0, #10
		buf[0] = 0;
   b988a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b988e:	f7fd f8b9 	bl	b6a04 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9892:	4668      	mov	r0, sp
   b9894:	f001 fcf7 	bl	bb286 <strlen>
   b9898:	6833      	ldr	r3, [r6, #0]
   b989a:	4602      	mov	r2, r0
   b989c:	68db      	ldr	r3, [r3, #12]
   b989e:	4669      	mov	r1, sp
   b98a0:	4630      	mov	r0, r6
   b98a2:	4798      	blx	r3
   b98a4:	4604      	mov	r4, r0
    }
    return n;
}
   b98a6:	4620      	mov	r0, r4
   b98a8:	b00d      	add	sp, #52	; 0x34
   b98aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b98ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b98ac:	b510      	push	{r4, lr}
   b98ae:	4b05      	ldr	r3, [pc, #20]	; (b98c4 <_ZN9IPAddressC1Ev+0x18>)
   b98b0:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b98b2:	2211      	movs	r2, #17
   b98b4:	f840 3b04 	str.w	r3, [r0], #4
   b98b8:	2100      	movs	r1, #0
   b98ba:	f001 fc6e 	bl	bb19a <memset>
}
   b98be:	4620      	mov	r0, r4
   b98c0:	bd10      	pop	{r4, pc}
   b98c2:	bf00      	nop
   b98c4:	000bdc68 	.word	0x000bdc68

000b98c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b98c8:	4603      	mov	r3, r0
   b98ca:	4a07      	ldr	r2, [pc, #28]	; (b98e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b98cc:	b510      	push	{r4, lr}
   b98ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b98d2:	f101 0210 	add.w	r2, r1, #16
   b98d6:	f851 4b04 	ldr.w	r4, [r1], #4
   b98da:	f843 4b04 	str.w	r4, [r3], #4
   b98de:	4291      	cmp	r1, r2
   b98e0:	d1f9      	bne.n	b98d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b98e2:	780a      	ldrb	r2, [r1, #0]
   b98e4:	701a      	strb	r2, [r3, #0]
}
   b98e6:	bd10      	pop	{r4, pc}
   b98e8:	000bdc68 	.word	0x000bdc68

000b98ec <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b98ec:	4a02      	ldr	r2, [pc, #8]	; (b98f8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b98ee:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b98f2:	2204      	movs	r2, #4
   b98f4:	7502      	strb	r2, [r0, #20]
}
   b98f6:	4770      	bx	lr
   b98f8:	000bdc68 	.word	0x000bdc68

000b98fc <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b98fc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b98fe:	2b04      	cmp	r3, #4
   b9900:	d104      	bne.n	b990c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b9902:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9904:	3800      	subs	r0, #0
   b9906:	bf18      	it	ne
   b9908:	2001      	movne	r0, #1
   b990a:	4770      	bx	lr
    } else if (version() == 6) {
   b990c:	2b06      	cmp	r3, #6
   b990e:	d107      	bne.n	b9920 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9910:	6843      	ldr	r3, [r0, #4]
   b9912:	b93b      	cbnz	r3, b9924 <_ZNK9IPAddresscvbEv+0x28>
   b9914:	6883      	ldr	r3, [r0, #8]
   b9916:	b92b      	cbnz	r3, b9924 <_ZNK9IPAddresscvbEv+0x28>
   b9918:	68c3      	ldr	r3, [r0, #12]
   b991a:	b91b      	cbnz	r3, b9924 <_ZNK9IPAddresscvbEv+0x28>
   b991c:	6900      	ldr	r0, [r0, #16]
   b991e:	e7f1      	b.n	b9904 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b9920:	2000      	movs	r0, #0
   b9922:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9924:	2001      	movs	r0, #1
}
   b9926:	4770      	bx	lr

000b9928 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9928:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b992a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b992e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9932:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9936:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b993a:	2304      	movs	r3, #4
   b993c:	6041      	str	r1, [r0, #4]
   b993e:	7503      	strb	r3, [r0, #20]
}
   b9940:	bd10      	pop	{r4, pc}
	...

000b9944 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b9944:	b513      	push	{r0, r1, r4, lr}
   b9946:	4c04      	ldr	r4, [pc, #16]	; (b9958 <_ZN9IPAddressC1Ehhhh+0x14>)
   b9948:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b994a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b994e:	9400      	str	r4, [sp, #0]
   b9950:	f7ff ffea 	bl	b9928 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9954:	b002      	add	sp, #8
   b9956:	bd10      	pop	{r4, pc}
   b9958:	000bdc68 	.word	0x000bdc68

000b995c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b995c:	b507      	push	{r0, r1, r2, lr}
   b995e:	4b06      	ldr	r3, [pc, #24]	; (b9978 <_ZN9IPAddressC1EPKh+0x1c>)
   b9960:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9962:	78cb      	ldrb	r3, [r1, #3]
   b9964:	9300      	str	r3, [sp, #0]
   b9966:	788b      	ldrb	r3, [r1, #2]
   b9968:	784a      	ldrb	r2, [r1, #1]
   b996a:	7809      	ldrb	r1, [r1, #0]
   b996c:	f7ff ffdc 	bl	b9928 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9970:	b003      	add	sp, #12
   b9972:	f85d fb04 	ldr.w	pc, [sp], #4
   b9976:	bf00      	nop
   b9978:	000bdc68 	.word	0x000bdc68

000b997c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b997c:	7441      	strb	r1, [r0, #17]
}
   b997e:	4770      	bx	lr

000b9980 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9980:	4770      	bx	lr

000b9982 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9982:	4770      	bx	lr

000b9984 <_ZN9USBSerial4readEv>:
{
   b9984:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9986:	2100      	movs	r1, #0
   b9988:	7c00      	ldrb	r0, [r0, #16]
   b998a:	f7fd f943 	bl	b6c14 <HAL_USB_USART_Receive_Data>
}
   b998e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9992:	bd08      	pop	{r3, pc}

000b9994 <_ZN9USBSerial4peekEv>:
{
   b9994:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9996:	2101      	movs	r1, #1
   b9998:	7c00      	ldrb	r0, [r0, #16]
   b999a:	f7fd f93b 	bl	b6c14 <HAL_USB_USART_Receive_Data>
}
   b999e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b99a2:	bd08      	pop	{r3, pc}

000b99a4 <_ZN9USBSerial17availableForWriteEv>:
{
   b99a4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b99a6:	7c00      	ldrb	r0, [r0, #16]
   b99a8:	f7fd f92c 	bl	b6c04 <HAL_USB_USART_Available_Data_For_Write>
}
   b99ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b99b0:	bd08      	pop	{r3, pc}

000b99b2 <_ZN9USBSerial9availableEv>:
{
   b99b2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b99b4:	7c00      	ldrb	r0, [r0, #16]
   b99b6:	f7fd f91d 	bl	b6bf4 <HAL_USB_USART_Available_Data>
}
   b99ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b99be:	bd08      	pop	{r3, pc}

000b99c0 <_ZN9USBSerial5writeEh>:
{
   b99c0:	b513      	push	{r0, r1, r4, lr}
   b99c2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b99c4:	7c00      	ldrb	r0, [r0, #16]
{
   b99c6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b99c8:	f7fd f91c 	bl	b6c04 <HAL_USB_USART_Available_Data_For_Write>
   b99cc:	2800      	cmp	r0, #0
   b99ce:	9901      	ldr	r1, [sp, #4]
   b99d0:	dc01      	bgt.n	b99d6 <_ZN9USBSerial5writeEh+0x16>
   b99d2:	7c60      	ldrb	r0, [r4, #17]
   b99d4:	b120      	cbz	r0, b99e0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b99d6:	7c20      	ldrb	r0, [r4, #16]
   b99d8:	f7fd f924 	bl	b6c24 <HAL_USB_USART_Send_Data>
   b99dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b99e0:	b002      	add	sp, #8
   b99e2:	bd10      	pop	{r4, pc}

000b99e4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b99e4:	7c00      	ldrb	r0, [r0, #16]
   b99e6:	f7fd b925 	b.w	b6c34 <HAL_USB_USART_Flush_Data>

000b99ea <_ZN9USBSerialD0Ev>:
   b99ea:	b510      	push	{r4, lr}
   b99ec:	2114      	movs	r1, #20
   b99ee:	4604      	mov	r4, r0
   b99f0:	f7fa fb57 	bl	b40a2 <_ZdlPvj>
   b99f4:	4620      	mov	r0, r4
   b99f6:	bd10      	pop	{r4, pc}

000b99f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b99f8:	b510      	push	{r4, lr}
   b99fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b99fe:	4604      	mov	r4, r0
   b9a00:	4608      	mov	r0, r1
   b9a02:	2100      	movs	r1, #0
   b9a04:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9a08:	4b04      	ldr	r3, [pc, #16]	; (b9a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9a0a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9a0c:	2301      	movs	r3, #1
  _serial = serial;
   b9a0e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9a10:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9a12:	4611      	mov	r1, r2
   b9a14:	f7fd f8e6 	bl	b6be4 <HAL_USB_USART_Init>
}
   b9a18:	4620      	mov	r0, r4
   b9a1a:	bd10      	pop	{r4, pc}
   b9a1c:	000bdc7c 	.word	0x000bdc7c

000b9a20 <_Z19acquireSerialBufferv>:
{
   b9a20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9a22:	2214      	movs	r2, #20
{
   b9a24:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9a26:	2100      	movs	r1, #0
   b9a28:	f001 fbb7 	bl	bb19a <memset>
}
   b9a2c:	4620      	mov	r0, r4
   b9a2e:	bd10      	pop	{r4, pc}

000b9a30 <_Z16_fetch_usbserialv>:
{
   b9a30:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9a32:	4c0f      	ldr	r4, [pc, #60]	; (b9a70 <_Z16_fetch_usbserialv+0x40>)
{
   b9a34:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9a36:	a803      	add	r0, sp, #12
   b9a38:	f7ff fff2 	bl	b9a20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9a3c:	7821      	ldrb	r1, [r4, #0]
   b9a3e:	f3bf 8f5b 	dmb	ish
   b9a42:	f011 0101 	ands.w	r1, r1, #1
   b9a46:	d10f      	bne.n	b9a68 <_Z16_fetch_usbserialv+0x38>
   b9a48:	4620      	mov	r0, r4
   b9a4a:	9101      	str	r1, [sp, #4]
   b9a4c:	f7fa fb2b 	bl	b40a6 <__cxa_guard_acquire>
   b9a50:	9901      	ldr	r1, [sp, #4]
   b9a52:	b148      	cbz	r0, b9a68 <_Z16_fetch_usbserialv+0x38>
   b9a54:	aa03      	add	r2, sp, #12
   b9a56:	4807      	ldr	r0, [pc, #28]	; (b9a74 <_Z16_fetch_usbserialv+0x44>)
   b9a58:	f7ff ffce 	bl	b99f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9a5c:	4620      	mov	r0, r4
   b9a5e:	f7fa fb27 	bl	b40b0 <__cxa_guard_release>
   b9a62:	4805      	ldr	r0, [pc, #20]	; (b9a78 <_Z16_fetch_usbserialv+0x48>)
   b9a64:	f001 fb40 	bl	bb0e8 <atexit>
	return _usbserial;
}
   b9a68:	4802      	ldr	r0, [pc, #8]	; (b9a74 <_Z16_fetch_usbserialv+0x44>)
   b9a6a:	b008      	add	sp, #32
   b9a6c:	bd10      	pop	{r4, pc}
   b9a6e:	bf00      	nop
   b9a70:	2003e6f8 	.word	0x2003e6f8
   b9a74:	2003e6fc 	.word	0x2003e6fc
   b9a78:	000b9981 	.word	0x000b9981

000b9a7c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9a7c:	4700      	bx	r0
	...

000b9a80 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9a80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9a84:	2400      	movs	r4, #0
{
   b9a86:	461d      	mov	r5, r3
   b9a88:	460f      	mov	r7, r1
   b9a8a:	4690      	mov	r8, r2
   b9a8c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b9a8e:	f7fc fe7f 	bl	b6790 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b9a92:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9a94:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b9a98:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9a9c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9aa0:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9aa4:	bfa2      	ittt	ge
   b9aa6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b9aaa:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9aae:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9ab0:	4907      	ldr	r1, [pc, #28]	; (b9ad0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9ab2:	9400      	str	r4, [sp, #0]
   b9ab4:	4643      	mov	r3, r8
   b9ab6:	463a      	mov	r2, r7
   b9ab8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b9aba:	bfa8      	it	ge
   b9abc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9ac0:	f7fc fe5e 	bl	b6780 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9ac4:	fab0 f080 	clz	r0, r0
   b9ac8:	0940      	lsrs	r0, r0, #5
   b9aca:	b004      	add	sp, #16
   b9acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ad0:	000b9a7d 	.word	0x000b9a7d

000b9ad4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9ad4:	4770      	bx	lr

000b9ad6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9ad6:	7441      	strb	r1, [r0, #17]
}
   b9ad8:	4770      	bx	lr

000b9ada <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9ada:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9adc:	7c00      	ldrb	r0, [r0, #16]
   b9ade:	f7fc ffe1 	bl	b6aa4 <hal_usart_available_data_for_write>
}
   b9ae2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9ae6:	bd08      	pop	{r3, pc}

000b9ae8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9ae8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9aea:	7c00      	ldrb	r0, [r0, #16]
   b9aec:	f7fc ffb2 	bl	b6a54 <hal_usart_available>
}
   b9af0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9af4:	bd08      	pop	{r3, pc}

000b9af6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9af6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9af8:	7c00      	ldrb	r0, [r0, #16]
   b9afa:	f7fc ffbb 	bl	b6a74 <hal_usart_peek>
}
   b9afe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b02:	bd08      	pop	{r3, pc}

000b9b04 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9b04:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9b06:	7c00      	ldrb	r0, [r0, #16]
   b9b08:	f7fc ffac 	bl	b6a64 <hal_usart_read>
}
   b9b0c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b10:	bd08      	pop	{r3, pc}

000b9b12 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9b12:	7c00      	ldrb	r0, [r0, #16]
   b9b14:	f7fc bfb6 	b.w	b6a84 <hal_usart_flush>

000b9b18 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b1a:	7c45      	ldrb	r5, [r0, #17]
{
   b9b1c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b1e:	b12d      	cbz	r5, b9b2c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9b20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9b22:	b003      	add	sp, #12
   b9b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9b28:	f7fc bf8c 	b.w	b6a44 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b2c:	7c00      	ldrb	r0, [r0, #16]
   b9b2e:	9101      	str	r1, [sp, #4]
   b9b30:	f7fc ffb8 	bl	b6aa4 <hal_usart_available_data_for_write>
   b9b34:	2800      	cmp	r0, #0
   b9b36:	9901      	ldr	r1, [sp, #4]
   b9b38:	dcf2      	bgt.n	b9b20 <_ZN11USARTSerial5writeEh+0x8>
}
   b9b3a:	4628      	mov	r0, r5
   b9b3c:	b003      	add	sp, #12
   b9b3e:	bd30      	pop	{r4, r5, pc}

000b9b40 <_ZN11USARTSerialD0Ev>:
   b9b40:	b510      	push	{r4, lr}
   b9b42:	2114      	movs	r1, #20
   b9b44:	4604      	mov	r4, r0
   b9b46:	f7fa faac 	bl	b40a2 <_ZdlPvj>
   b9b4a:	4620      	mov	r0, r4
   b9b4c:	bd10      	pop	{r4, pc}
	...

000b9b50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9b50:	b510      	push	{r4, lr}
   b9b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9b56:	4604      	mov	r4, r0
   b9b58:	4608      	mov	r0, r1
   b9b5a:	4611      	mov	r1, r2
   b9b5c:	2200      	movs	r2, #0
   b9b5e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9b62:	4b04      	ldr	r3, [pc, #16]	; (b9b74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9b64:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9b66:	2301      	movs	r3, #1
  _serial = serial;
   b9b68:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9b6a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9b6c:	f7fc ffa2 	bl	b6ab4 <hal_usart_init_ex>
}
   b9b70:	4620      	mov	r0, r4
   b9b72:	bd10      	pop	{r4, pc}
   b9b74:	000bdcac 	.word	0x000bdcac

000b9b78 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9b78:	b510      	push	{r4, lr}
      if (_M_empty())
   b9b7a:	6883      	ldr	r3, [r0, #8]
   b9b7c:	4604      	mov	r4, r0
   b9b7e:	b90b      	cbnz	r3, b9b84 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9b80:	f000 fcd4 	bl	ba52c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9b84:	68c3      	ldr	r3, [r0, #12]
   b9b86:	4798      	blx	r3
      if (_M_manager)
   b9b88:	68a3      	ldr	r3, [r4, #8]
   b9b8a:	b11b      	cbz	r3, b9b94 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9b8c:	2203      	movs	r2, #3
   b9b8e:	4621      	mov	r1, r4
   b9b90:	4620      	mov	r0, r4
   b9b92:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b9b94:	4620      	mov	r0, r4
   b9b96:	2110      	movs	r1, #16
}
   b9b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9b9c:	f7fa ba81 	b.w	b40a2 <_ZdlPvj>

000b9ba0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9ba0:	4770      	bx	lr

000b9ba2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ba4:	4606      	mov	r6, r0
   b9ba6:	4615      	mov	r5, r2
   b9ba8:	460c      	mov	r4, r1
   b9baa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9bac:	42bc      	cmp	r4, r7
   b9bae:	d006      	beq.n	b9bbe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9bb0:	6833      	ldr	r3, [r6, #0]
   b9bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9bb6:	689b      	ldr	r3, [r3, #8]
   b9bb8:	4630      	mov	r0, r6
   b9bba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9bbc:	e7f6      	b.n	b9bac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9bbe:	4628      	mov	r0, r5
   b9bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9bc2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9bc2:	7c00      	ldrb	r0, [r0, #16]
   b9bc4:	2200      	movs	r2, #0
   b9bc6:	f7fc bf7d 	b.w	b6ac4 <hal_i2c_write>

000b9bca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9bca:	7c00      	ldrb	r0, [r0, #16]
   b9bcc:	2100      	movs	r1, #0
   b9bce:	f7fc bf81 	b.w	b6ad4 <hal_i2c_available>

000b9bd2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9bd2:	7c00      	ldrb	r0, [r0, #16]
   b9bd4:	2100      	movs	r1, #0
   b9bd6:	f7fc bf85 	b.w	b6ae4 <hal_i2c_read>

000b9bda <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9bda:	7c00      	ldrb	r0, [r0, #16]
   b9bdc:	2100      	movs	r1, #0
   b9bde:	f7fc bf89 	b.w	b6af4 <hal_i2c_peek>

000b9be2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9be2:	7c00      	ldrb	r0, [r0, #16]
   b9be4:	2100      	movs	r1, #0
   b9be6:	f7fc bf8d 	b.w	b6b04 <hal_i2c_flush>

000b9bea <_ZN7TwoWireD0Ev>:
   b9bea:	b510      	push	{r4, lr}
   b9bec:	2114      	movs	r1, #20
   b9bee:	4604      	mov	r4, r0
   b9bf0:	f7fa fa57 	bl	b40a2 <_ZdlPvj>
   b9bf4:	4620      	mov	r0, r4
   b9bf6:	bd10      	pop	{r4, pc}

000b9bf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9bf8:	b510      	push	{r4, lr}
   b9bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9bfe:	4604      	mov	r4, r0
   b9c00:	4608      	mov	r0, r1
   b9c02:	2100      	movs	r1, #0
   b9c04:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9c08:	4b03      	ldr	r3, [pc, #12]	; (b9c18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9c0a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9c0c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9c0e:	4611      	mov	r1, r2
   b9c10:	f7fc ff88 	bl	b6b24 <hal_i2c_init>
}
   b9c14:	4620      	mov	r0, r4
   b9c16:	bd10      	pop	{r4, pc}
   b9c18:	000bdcdc 	.word	0x000bdcdc

000b9c1c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9c1c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9c1e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9c20:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9c24:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9c26:	2201      	movs	r2, #1
   b9c28:	f04f 33ff 	mov.w	r3, #4294967295
   b9c2c:	f10d 0107 	add.w	r1, sp, #7
   b9c30:	47a0      	blx	r4
}
   b9c32:	b002      	add	sp, #8
   b9c34:	bd10      	pop	{r4, pc}

000b9c36 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9c36:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9c38:	6803      	ldr	r3, [r0, #0]
   b9c3a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9c3c:	f04f 33ff 	mov.w	r3, #4294967295
   b9c40:	46a4      	mov	ip, r4
}
   b9c42:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9c46:	4760      	bx	ip

000b9c48 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9c48:	b513      	push	{r0, r1, r4, lr}
   b9c4a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9c4c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9c4e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9c52:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9c54:	f10d 0107 	add.w	r1, sp, #7
   b9c58:	2201      	movs	r2, #1
   b9c5a:	47a0      	blx	r4
}
   b9c5c:	b002      	add	sp, #8
   b9c5e:	bd10      	pop	{r4, pc}

000b9c60 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9c60:	b510      	push	{r4, lr}
   b9c62:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9c64:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9c68:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9c6c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9c6e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9c70:	d008      	beq.n	b9c84 <_ZN9TCPClient4readEv+0x24>
   b9c72:	6963      	ldr	r3, [r4, #20]
   b9c74:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9c78:	1c51      	adds	r1, r2, #1
   b9c7a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9c7e:	4413      	add	r3, r2
   b9c80:	7918      	ldrb	r0, [r3, #4]
}
   b9c82:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9c84:	6803      	ldr	r3, [r0, #0]
   b9c86:	691b      	ldr	r3, [r3, #16]
   b9c88:	4798      	blx	r3
   b9c8a:	2800      	cmp	r0, #0
   b9c8c:	d1f1      	bne.n	b9c72 <_ZN9TCPClient4readEv+0x12>
   b9c8e:	f04f 30ff 	mov.w	r0, #4294967295
   b9c92:	e7f6      	b.n	b9c82 <_ZN9TCPClient4readEv+0x22>

000b9c94 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9c94:	4770      	bx	lr

000b9c96 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9c96:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9c98:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9c9a:	43c0      	mvns	r0, r0
   b9c9c:	0fc0      	lsrs	r0, r0, #31
   b9c9e:	4770      	bx	lr

000b9ca0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9ca0:	4770      	bx	lr
	...

000b9ca4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9ca4:	4b06      	ldr	r3, [pc, #24]	; (b9cc0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9ca6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9ca8:	b510      	push	{r4, lr}
   b9caa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9cae:	d005      	beq.n	b9cbc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9cb0:	4608      	mov	r0, r1
   b9cb2:	f000 fc3f 	bl	ba534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9cb6:	2800      	cmp	r0, #0
   b9cb8:	bf08      	it	eq
   b9cba:	2400      	moveq	r4, #0
      }
   b9cbc:	4620      	mov	r0, r4
   b9cbe:	bd10      	pop	{r4, pc}
   b9cc0:	000bdbe4 	.word	0x000bdbe4

000b9cc4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9cc4:	b510      	push	{r4, lr}
   b9cc6:	21ac      	movs	r1, #172	; 0xac
   b9cc8:	4604      	mov	r4, r0
   b9cca:	f7fa f9ea 	bl	b40a2 <_ZdlPvj>
   b9cce:	4620      	mov	r0, r4
   b9cd0:	bd10      	pop	{r4, pc}

000b9cd2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9cd2:	21ac      	movs	r1, #172	; 0xac
   b9cd4:	f7fa b9e5 	b.w	b40a2 <_ZdlPvj>

000b9cd8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9cdc:	f04f 0800 	mov.w	r8, #0
   b9ce0:	b086      	sub	sp, #24
   b9ce2:	461c      	mov	r4, r3
   b9ce4:	f8c0 8004 	str.w	r8, [r0, #4]
   b9ce8:	4605      	mov	r5, r0
   b9cea:	460e      	mov	r6, r1
   b9cec:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9cee:	4641      	mov	r1, r8
   b9cf0:	2210      	movs	r2, #16
   b9cf2:	a802      	add	r0, sp, #8
   b9cf4:	f001 fa51 	bl	bb19a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9cf8:	1c63      	adds	r3, r4, #1
   b9cfa:	d009      	beq.n	b9d10 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d00:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9d04:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9d08:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9d0c:	435c      	muls	r4, r3
   b9d0e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9d10:	6968      	ldr	r0, [r5, #20]
   b9d12:	2310      	movs	r3, #16
   b9d14:	9300      	str	r3, [sp, #0]
   b9d16:	6800      	ldr	r0, [r0, #0]
   b9d18:	ab02      	add	r3, sp, #8
   b9d1a:	f241 0205 	movw	r2, #4101	; 0x1005
   b9d1e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9d22:	f7fc ff0f 	bl	b6b44 <sock_setsockopt>
    if (ret < 0) {
   b9d26:	2800      	cmp	r0, #0
   b9d28:	da07      	bge.n	b9d3a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9d2a:	f7fd f8b7 	bl	b6e9c <__errno>
   b9d2e:	6803      	ldr	r3, [r0, #0]
   b9d30:	606b      	str	r3, [r5, #4]
        return 0;
   b9d32:	2000      	movs	r0, #0
}
   b9d34:	b006      	add	sp, #24
   b9d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9d3a:	6968      	ldr	r0, [r5, #20]
   b9d3c:	2300      	movs	r3, #0
   b9d3e:	6800      	ldr	r0, [r0, #0]
   b9d40:	463a      	mov	r2, r7
   b9d42:	4631      	mov	r1, r6
   b9d44:	f7fc ff26 	bl	b6b94 <sock_send>
    if (ret < 0) {
   b9d48:	1e03      	subs	r3, r0, #0
   b9d4a:	dbee      	blt.n	b9d2a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9d4c:	4618      	mov	r0, r3
   b9d4e:	e7f1      	b.n	b9d34 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9d50 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9d50:	b530      	push	{r4, r5, lr}
   b9d52:	b087      	sub	sp, #28
   b9d54:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9d56:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9d58:	4668      	mov	r0, sp
   b9d5a:	f7ff fdff 	bl	b995c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d60:	3404      	adds	r4, #4
   b9d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d64:	682b      	ldr	r3, [r5, #0]
   b9d66:	7023      	strb	r3, [r4, #0]
    }
   b9d68:	b007      	add	sp, #28
   b9d6a:	bd30      	pop	{r4, r5, pc}

000b9d6c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9d6c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9d6e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9d70:	4b05      	ldr	r3, [pc, #20]	; (b9d88 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9d72:	4604      	mov	r4, r0
   b9d74:	358c      	adds	r5, #140	; 0x8c
   b9d76:	f844 3b04 	str.w	r3, [r4], #4
   b9d7a:	4606      	mov	r6, r0
   b9d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d80:	682b      	ldr	r3, [r5, #0]
   b9d82:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9d84:	4630      	mov	r0, r6
   b9d86:	bd70      	pop	{r4, r5, r6, pc}
   b9d88:	000bdc68 	.word	0x000bdc68

000b9d8c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9d90:	4698      	mov	r8, r3
    stop();
   b9d92:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d94:	b093      	sub	sp, #76	; 0x4c
   b9d96:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9d98:	2400      	movs	r4, #0
    stop();
   b9d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d9c:	4606      	mov	r6, r0
   b9d9e:	4617      	mov	r7, r2
    stop();
   b9da0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9da2:	4628      	mov	r0, r5
   b9da4:	466b      	mov	r3, sp
   b9da6:	4622      	mov	r2, r4
   b9da8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9daa:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9dac:	f7fc fcd8 	bl	b6760 <netdb_getaddrinfo>
   b9db0:	4605      	mov	r5, r0
   b9db2:	2800      	cmp	r0, #0
   b9db4:	d163      	bne.n	b9e7e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9db6:	9b00      	ldr	r3, [sp, #0]
   b9db8:	2b00      	cmp	r3, #0
   b9dba:	d04b      	beq.n	b9e54 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9dbc:	695b      	ldr	r3, [r3, #20]
   b9dbe:	2b00      	cmp	r3, #0
   b9dc0:	d048      	beq.n	b9e54 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9dc2:	a806      	add	r0, sp, #24
   b9dc4:	f7ff fd72 	bl	b98ac <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9dc8:	9b00      	ldr	r3, [sp, #0]
   b9dca:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   b9dcc:	7863      	ldrb	r3, [r4, #1]
   b9dce:	2b02      	cmp	r3, #2
   b9dd0:	d104      	bne.n	b9ddc <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9dd2:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   b9dd4:	a806      	add	r0, sp, #24
   b9dd6:	f7ff ffbb 	bl	b9d50 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        if (port) {
   b9dda:	e026      	b.n	b9e2a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9ddc:	2b0a      	cmp	r3, #10
   b9dde:	d124      	bne.n	b9e2a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9de0:	2211      	movs	r2, #17
   b9de2:	4629      	mov	r1, r5
   b9de4:	a801      	add	r0, sp, #4
   b9de6:	f001 f9d8 	bl	bb19a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9dea:	68a3      	ldr	r3, [r4, #8]
   b9dec:	2b00      	cmp	r3, #0
   b9dee:	d038      	beq.n	b9e62 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9df0:	f104 0308 	add.w	r3, r4, #8
   b9df4:	f10d 0c04 	add.w	ip, sp, #4
   b9df8:	3418      	adds	r4, #24
   b9dfa:	6818      	ldr	r0, [r3, #0]
   b9dfc:	6859      	ldr	r1, [r3, #4]
   b9dfe:	4662      	mov	r2, ip
   b9e00:	c203      	stmia	r2!, {r0, r1}
   b9e02:	3308      	adds	r3, #8
   b9e04:	42a3      	cmp	r3, r4
   b9e06:	4694      	mov	ip, r2
   b9e08:	d1f7      	bne.n	b9dfa <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9e0a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9e0c:	a901      	add	r1, sp, #4
   b9e0e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9e10:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9e14:	f7ff fd58 	bl	b98c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9e18:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9e1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9e20:	ac07      	add	r4, sp, #28
   b9e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e24:	f8dc 3000 	ldr.w	r3, [ip]
   b9e28:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9e2a:	a806      	add	r0, sp, #24
   b9e2c:	f7ff fd66 	bl	b98fc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9e30:	b180      	cbz	r0, b9e54 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9e32:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9e34:	ad07      	add	r5, sp, #28
   b9e36:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9e3a:	4b12      	ldr	r3, [pc, #72]	; (b9e84 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9e3c:	930c      	str	r3, [sp, #48]	; 0x30
   b9e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e40:	ac0d      	add	r4, sp, #52	; 0x34
   b9e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e44:	682b      	ldr	r3, [r5, #0]
   b9e46:	7023      	strb	r3, [r4, #0]
   b9e48:	463a      	mov	r2, r7
   b9e4a:	4643      	mov	r3, r8
   b9e4c:	a90c      	add	r1, sp, #48	; 0x30
   b9e4e:	4630      	mov	r0, r6
   b9e50:	47c8      	blx	r9
   b9e52:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9e54:	9800      	ldr	r0, [sp, #0]
   b9e56:	f7fc fc7b 	bl	b6750 <netdb_freeaddrinfo>
}
   b9e5a:	4628      	mov	r0, r5
   b9e5c:	b013      	add	sp, #76	; 0x4c
   b9e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9e62:	68e3      	ldr	r3, [r4, #12]
   b9e64:	2b00      	cmp	r3, #0
   b9e66:	d1c3      	bne.n	b9df0 <_ZN9TCPClient7connectEPKctm+0x64>
   b9e68:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9e6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9e70:	f7fc fdd0 	bl	b6a14 <inet_htonl>
   b9e74:	4581      	cmp	r9, r0
   b9e76:	d1bb      	bne.n	b9df0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9e78:	f104 0114 	add.w	r1, r4, #20
   b9e7c:	e7aa      	b.n	b9dd4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9e7e:	4625      	mov	r5, r4
   b9e80:	e7e8      	b.n	b9e54 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9e82:	bf00      	nop
   b9e84:	000bdc68 	.word	0x000bdc68

000b9e88 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9e88:	b538      	push	{r3, r4, r5, lr}
   b9e8a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9e8c:	681a      	ldr	r2, [r3, #0]
   b9e8e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9e90:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9e92:	da10      	bge.n	b9eb6 <_ZN9TCPClient9connectedEv+0x2e>
   b9e94:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9e98:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9e9c:	429a      	cmp	r2, r3
   b9e9e:	d10a      	bne.n	b9eb6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9ea0:	6803      	ldr	r3, [r0, #0]
   b9ea2:	691b      	ldr	r3, [r3, #16]
   b9ea4:	4798      	blx	r3
        if (!rv) {
   b9ea6:	4604      	mov	r4, r0
   b9ea8:	b928      	cbnz	r0, b9eb6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9eaa:	682b      	ldr	r3, [r5, #0]
   b9eac:	4628      	mov	r0, r5
   b9eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9eb0:	4798      	blx	r3
        rv = available();
   b9eb2:	4620      	mov	r0, r4
}
   b9eb4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9eb6:	2001      	movs	r0, #1
   b9eb8:	e7fc      	b.n	b9eb4 <_ZN9TCPClient9connectedEv+0x2c>

000b9eba <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9eba:	b510      	push	{r4, lr}
   b9ebc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9ebe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ec2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9ec6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9ec8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9eca:	d005      	beq.n	b9ed8 <_ZN9TCPClient4peekEv+0x1e>
   b9ecc:	6963      	ldr	r3, [r4, #20]
   b9ece:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9ed2:	4413      	add	r3, r2
   b9ed4:	7918      	ldrb	r0, [r3, #4]
}
   b9ed6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9ed8:	6803      	ldr	r3, [r0, #0]
   b9eda:	691b      	ldr	r3, [r3, #16]
   b9edc:	4798      	blx	r3
   b9ede:	2800      	cmp	r0, #0
   b9ee0:	d1f4      	bne.n	b9ecc <_ZN9TCPClient4peekEv+0x12>
   b9ee2:	f04f 30ff 	mov.w	r0, #4294967295
   b9ee6:	e7f6      	b.n	b9ed6 <_ZN9TCPClient4peekEv+0x1c>

000b9ee8 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9eea:	6943      	ldr	r3, [r0, #20]
   b9eec:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9eee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ef2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9ef6:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9ef8:	4605      	mov	r5, r0
   b9efa:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9efc:	d016      	beq.n	b9f2c <_ZN9TCPClient4readEPhj+0x44>
   b9efe:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9f00:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9f04:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9f08:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9f0a:	42bc      	cmp	r4, r7
   b9f0c:	bf28      	it	cs
   b9f0e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9f10:	3304      	adds	r3, #4
   b9f12:	4622      	mov	r2, r4
   b9f14:	4419      	add	r1, r3
   b9f16:	4630      	mov	r0, r6
   b9f18:	f001 f917 	bl	bb14a <memcpy>
   b9f1c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9f1e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9f22:	4423      	add	r3, r4
   b9f24:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9f28:	4620      	mov	r0, r4
   b9f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9f2c:	6803      	ldr	r3, [r0, #0]
   b9f2e:	691b      	ldr	r3, [r3, #16]
   b9f30:	4798      	blx	r3
   b9f32:	2800      	cmp	r0, #0
   b9f34:	d1e3      	bne.n	b9efe <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9f36:	f04f 34ff 	mov.w	r4, #4294967295
   b9f3a:	e7f5      	b.n	b9f28 <_ZN9TCPClient4readEPhj+0x40>

000b9f3c <_ZN9TCPClient12flush_bufferEv>:
   b9f3c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9f3e:	2300      	movs	r3, #0
   b9f40:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9f44:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9f46:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9f4a:	4770      	bx	lr

000b9f4c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9f50:	461f      	mov	r7, r3
    stop();
   b9f52:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f54:	460c      	mov	r4, r1
    stop();
   b9f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f58:	b08a      	sub	sp, #40	; 0x28
   b9f5a:	4605      	mov	r5, r0
   b9f5c:	4616      	mov	r6, r2
    stop();
   b9f5e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9f60:	7d23      	ldrb	r3, [r4, #20]
   b9f62:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9f66:	2b04      	cmp	r3, #4
   b9f68:	bf0c      	ite	eq
   b9f6a:	2002      	moveq	r0, #2
   b9f6c:	200a      	movne	r0, #10
   b9f6e:	2206      	movs	r2, #6
   b9f70:	2101      	movs	r1, #1
   b9f72:	f7fc fe1f 	bl	b6bb4 <sock_socket>
   b9f76:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9f7a:	696b      	ldr	r3, [r5, #20]
   b9f7c:	681b      	ldr	r3, [r3, #0]
   b9f7e:	2b00      	cmp	r3, #0
   b9f80:	da08      	bge.n	b9f94 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9f82:	682b      	ldr	r3, [r5, #0]
   b9f84:	4628      	mov	r0, r5
   b9f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f88:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9f8a:	4798      	blx	r3
}
   b9f8c:	4620      	mov	r0, r4
   b9f8e:	b00a      	add	sp, #40	; 0x28
   b9f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9f94:	4628      	mov	r0, r5
   b9f96:	f7ff ffd1 	bl	b9f3c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9f9a:	b1b7      	cbz	r7, b9fca <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9f9c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f9e:	a903      	add	r1, sp, #12
   b9fa0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9fa2:	9303      	str	r3, [sp, #12]
   b9fa4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9fa8:	f7fc fbfa 	bl	b67a0 <if_index_to_name>
   b9fac:	2800      	cmp	r0, #0
   b9fae:	d1e8      	bne.n	b9f82 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9fb0:	6968      	ldr	r0, [r5, #20]
   b9fb2:	2306      	movs	r3, #6
   b9fb4:	9300      	str	r3, [sp, #0]
   b9fb6:	6800      	ldr	r0, [r0, #0]
   b9fb8:	ab03      	add	r3, sp, #12
   b9fba:	f241 020b 	movw	r2, #4107	; 0x100b
   b9fbe:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9fc2:	f7fc fdbf 	bl	b6b44 <sock_setsockopt>
   b9fc6:	2800      	cmp	r0, #0
   b9fc8:	d1db      	bne.n	b9f82 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9fca:	221c      	movs	r2, #28
   b9fcc:	2100      	movs	r1, #0
   b9fce:	a803      	add	r0, sp, #12
   b9fd0:	f001 f8e3 	bl	bb19a <memset>
    if (ip.version() == 4) {
   b9fd4:	7d23      	ldrb	r3, [r4, #20]
   b9fd6:	2b04      	cmp	r3, #4
   b9fd8:	d11d      	bne.n	ba016 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9fda:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9fde:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9fe0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9fe4:	f7fc fd26 	bl	b6a34 <inet_htons>
   b9fe8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9fec:	6860      	ldr	r0, [r4, #4]
   b9fee:	f7fc fd11 	bl	b6a14 <inet_htonl>
   b9ff2:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9ff4:	696b      	ldr	r3, [r5, #20]
   b9ff6:	221c      	movs	r2, #28
   b9ff8:	6818      	ldr	r0, [r3, #0]
   b9ffa:	a903      	add	r1, sp, #12
   b9ffc:	f7fc fdb2 	bl	b6b64 <sock_connect>
   ba000:	2800      	cmp	r0, #0
   ba002:	d1be      	bne.n	b9f82 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   ba004:	3404      	adds	r4, #4
   ba006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba008:	696d      	ldr	r5, [r5, #20]
   ba00a:	358c      	adds	r5, #140	; 0x8c
   ba00c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba00e:	6823      	ldr	r3, [r4, #0]
   ba010:	702b      	strb	r3, [r5, #0]
    return 1; // success
   ba012:	2401      	movs	r4, #1
   ba014:	e7ba      	b.n	b9f8c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   ba016:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   ba01a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   ba01c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   ba020:	f7fc fd08 	bl	b6a34 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba024:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   ba026:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba02a:	1d23      	adds	r3, r4, #4
   ba02c:	f104 0714 	add.w	r7, r4, #20
   ba030:	6818      	ldr	r0, [r3, #0]
   ba032:	6859      	ldr	r1, [r3, #4]
   ba034:	4632      	mov	r2, r6
   ba036:	c203      	stmia	r2!, {r0, r1}
   ba038:	3308      	adds	r3, #8
   ba03a:	42bb      	cmp	r3, r7
   ba03c:	4616      	mov	r6, r2
   ba03e:	d1f7      	bne.n	ba030 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   ba040:	e7d8      	b.n	b9ff4 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000ba044 <_ZN9TCPClient9availableEv>:
{
   ba044:	b530      	push	{r4, r5, lr}
   ba046:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   ba048:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   ba04c:	b08b      	sub	sp, #44	; 0x2c
   ba04e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   ba050:	b12b      	cbz	r3, ba05e <_ZN9TCPClient9availableEv+0x1a>
   ba052:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   ba056:	429a      	cmp	r2, r3
   ba058:	d101      	bne.n	ba05e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   ba05a:	f7ff ff6f 	bl	b9f3c <_ZN9TCPClient12flush_bufferEv>
   ba05e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   ba060:	6808      	ldr	r0, [r1, #0]
   ba062:	2800      	cmp	r0, #0
   ba064:	db18      	blt.n	ba098 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   ba066:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   ba06a:	2d7f      	cmp	r5, #127	; 0x7f
   ba06c:	d814      	bhi.n	ba098 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   ba06e:	3104      	adds	r1, #4
   ba070:	2308      	movs	r3, #8
   ba072:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   ba076:	4429      	add	r1, r5
   ba078:	f7fc fd7c 	bl	b6b74 <sock_recv>
            if (ret > 0) {
   ba07c:	2800      	cmp	r0, #0
   ba07e:	dd13      	ble.n	ba0a8 <_ZN9TCPClient9availableEv+0x64>
   ba080:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   ba082:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba086:	b90a      	cbnz	r2, ba08c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   ba088:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   ba08c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   ba08e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba092:	4410      	add	r0, r2
   ba094:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   ba098:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   ba09a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   ba09e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   ba0a2:	1ac0      	subs	r0, r0, r3
   ba0a4:	b00b      	add	sp, #44	; 0x2c
   ba0a6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   ba0a8:	f7fc fef8 	bl	b6e9c <__errno>
   ba0ac:	6803      	ldr	r3, [r0, #0]
   ba0ae:	2b0b      	cmp	r3, #11
   ba0b0:	d0f2      	beq.n	ba098 <_ZN9TCPClient9availableEv+0x54>
   ba0b2:	f7fc fef3 	bl	b6e9c <__errno>
   ba0b6:	6803      	ldr	r3, [r0, #0]
   ba0b8:	2b0b      	cmp	r3, #11
   ba0ba:	d0ed      	beq.n	ba098 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   ba0bc:	2320      	movs	r3, #32
   ba0be:	2500      	movs	r5, #0
   ba0c0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   ba0c4:	f7fc feea 	bl	b6e9c <__errno>
   ba0c8:	6803      	ldr	r3, [r0, #0]
   ba0ca:	9301      	str	r3, [sp, #4]
   ba0cc:	4b08      	ldr	r3, [pc, #32]	; (ba0f0 <_ZN9TCPClient9availableEv+0xac>)
   ba0ce:	4909      	ldr	r1, [pc, #36]	; (ba0f4 <_ZN9TCPClient9availableEv+0xb0>)
   ba0d0:	9300      	str	r3, [sp, #0]
   ba0d2:	aa02      	add	r2, sp, #8
   ba0d4:	462b      	mov	r3, r5
   ba0d6:	2032      	movs	r0, #50	; 0x32
   ba0d8:	f7fc fdbc 	bl	b6c54 <log_message>
                    sock_close(d_->sock);
   ba0dc:	6963      	ldr	r3, [r4, #20]
   ba0de:	6818      	ldr	r0, [r3, #0]
   ba0e0:	f7fc fd38 	bl	b6b54 <sock_close>
   ba0e4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   ba0e6:	f04f 32ff 	mov.w	r2, #4294967295
   ba0ea:	601a      	str	r2, [r3, #0]
   ba0ec:	e7d4      	b.n	ba098 <_ZN9TCPClient9availableEv+0x54>
   ba0ee:	bf00      	nop
   ba0f0:	000bdd03 	.word	0x000bdd03
   ba0f4:	000bdcfc 	.word	0x000bdcfc

000ba0f8 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   ba0f8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   ba0fa:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   ba0fc:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   ba0fe:	6818      	ldr	r0, [r3, #0]
   ba100:	2800      	cmp	r0, #0
   ba102:	db01      	blt.n	ba108 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   ba104:	f7fc fd26 	bl	b6b54 <sock_close>
   ba108:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   ba10a:	f04f 32ff 	mov.w	r2, #4294967295
   ba10e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   ba110:	6960      	ldr	r0, [r4, #20]
   ba112:	2211      	movs	r2, #17
   ba114:	2100      	movs	r1, #0
   ba116:	308c      	adds	r0, #140	; 0x8c
   ba118:	f001 f83f 	bl	bb19a <memset>
    flush_buffer();
   ba11c:	4620      	mov	r0, r4
}
   ba11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   ba122:	f7ff bf0b 	b.w	b9f3c <_ZN9TCPClient12flush_bufferEv>

000ba126 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   ba126:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   ba128:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   ba12a:	4604      	mov	r4, r0
          total(0) {
   ba12c:	6001      	str	r1, [r0, #0]
   ba12e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   ba132:	3088      	adds	r0, #136	; 0x88
   ba134:	f7ff fbba 	bl	b98ac <_ZN9IPAddressC1Ev>
}
   ba138:	4620      	mov	r0, r4
   ba13a:	bd10      	pop	{r4, pc}

000ba13c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   ba13c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba13e:	2300      	movs	r3, #0
   ba140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba144:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   ba148:	4a0e      	ldr	r2, [pc, #56]	; (ba184 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   ba14a:	6103      	str	r3, [r0, #16]
   ba14c:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba14e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   ba150:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba152:	20ac      	movs	r0, #172	; 0xac
   ba154:	9101      	str	r1, [sp, #4]
   ba156:	f7f9 ff9e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba15a:	1e05      	subs	r5, r0, #0
   ba15c:	f105 060c 	add.w	r6, r5, #12
   ba160:	d008      	beq.n	ba174 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   ba162:	2301      	movs	r3, #1
   ba164:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   ba168:	4b07      	ldr	r3, [pc, #28]	; (ba188 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba16a:	9901      	ldr	r1, [sp, #4]
   ba16c:	602b      	str	r3, [r5, #0]
   ba16e:	4630      	mov	r0, r6
   ba170:	f7ff ffd9 	bl	ba126 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   ba174:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   ba176:	e9c4 6505 	strd	r6, r5, [r4, #20]
   ba17a:	f7ff fedf 	bl	b9f3c <_ZN9TCPClient12flush_bufferEv>
}
   ba17e:	b002      	add	sp, #8
   ba180:	bd70      	pop	{r4, r5, r6, pc}
   ba182:	bf00      	nop
   ba184:	000bdd38 	.word	0x000bdd38
   ba188:	000bdd1c 	.word	0x000bdd1c

000ba18c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   ba18c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   ba18e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   ba192:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ba194:	f7ff ffd2 	bl	ba13c <_ZN9TCPClientC1Ei>
}
   ba198:	4620      	mov	r0, r4
   ba19a:	bd10      	pop	{r4, pc}

000ba19c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   ba19c:	b510      	push	{r4, lr}
   ba19e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ba1a0:	6800      	ldr	r0, [r0, #0]
   ba1a2:	2800      	cmp	r0, #0
   ba1a4:	db01      	blt.n	ba1aa <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ba1a6:	f7fc fcd5 	bl	b6b54 <sock_close>
    }
}
   ba1aa:	4620      	mov	r0, r4
   ba1ac:	bd10      	pop	{r4, pc}

000ba1ae <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   ba1ae:	300c      	adds	r0, #12
   ba1b0:	f7ff bff4 	b.w	ba19c <_ZN9TCPClient4DataD1Ev>

000ba1b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba1b4:	2200      	movs	r2, #0
   ba1b6:	6840      	ldr	r0, [r0, #4]
   ba1b8:	4611      	mov	r1, r2
   ba1ba:	f7fc bdb7 	b.w	b6d2c <network_ready>

000ba1be <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba1be:	2200      	movs	r2, #0
   ba1c0:	6840      	ldr	r0, [r0, #4]
   ba1c2:	4611      	mov	r1, r2
   ba1c4:	f7fc bdd2 	b.w	b6d6c <network_listening>

000ba1c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba1c8:	2200      	movs	r2, #0
   ba1ca:	6840      	ldr	r0, [r0, #4]
   ba1cc:	4611      	mov	r1, r2
   ba1ce:	f7fc bddd 	b.w	b6d8c <network_get_listen_timeout>

000ba1d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba1d2:	6840      	ldr	r0, [r0, #4]
   ba1d4:	2200      	movs	r2, #0
   ba1d6:	f7fc bdd1 	b.w	b6d7c <network_set_listen_timeout>

000ba1da <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba1da:	6840      	ldr	r0, [r0, #4]
   ba1dc:	2200      	movs	r2, #0
   ba1de:	f081 0101 	eor.w	r1, r1, #1
   ba1e2:	f7fc bdbb 	b.w	b6d5c <network_listen>

000ba1e6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba1e6:	2300      	movs	r3, #0
   ba1e8:	6840      	ldr	r0, [r0, #4]
   ba1ea:	461a      	mov	r2, r3
   ba1ec:	4619      	mov	r1, r3
   ba1ee:	f7fc bdad 	b.w	b6d4c <network_off>

000ba1f2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba1f2:	2300      	movs	r3, #0
   ba1f4:	6840      	ldr	r0, [r0, #4]
   ba1f6:	461a      	mov	r2, r3
   ba1f8:	4619      	mov	r1, r3
   ba1fa:	f7fc bd9f 	b.w	b6d3c <network_on>

000ba1fe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba1fe:	2200      	movs	r2, #0
   ba200:	6840      	ldr	r0, [r0, #4]
   ba202:	4611      	mov	r1, r2
   ba204:	f7fc bd82 	b.w	b6d0c <network_connecting>

000ba208 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba208:	6840      	ldr	r0, [r0, #4]
   ba20a:	2200      	movs	r2, #0
   ba20c:	2102      	movs	r1, #2
   ba20e:	f7fc bd85 	b.w	b6d1c <network_disconnect>

000ba212 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba212:	2300      	movs	r3, #0
   ba214:	6840      	ldr	r0, [r0, #4]
   ba216:	461a      	mov	r2, r3
   ba218:	f7fc bd70 	b.w	b6cfc <network_connect>

000ba21c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba21c:	4b02      	ldr	r3, [pc, #8]	; (ba228 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba21e:	2204      	movs	r2, #4
   ba220:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba222:	4a02      	ldr	r2, [pc, #8]	; (ba22c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba224:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba226:	4770      	bx	lr
   ba228:	2003e710 	.word	0x2003e710
   ba22c:	000bdd84 	.word	0x000bdd84

000ba230 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba230:	2300      	movs	r3, #0
   ba232:	6840      	ldr	r0, [r0, #4]
   ba234:	461a      	mov	r2, r3
   ba236:	f7fc bd61 	b.w	b6cfc <network_connect>

000ba23a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba23a:	6840      	ldr	r0, [r0, #4]
   ba23c:	2200      	movs	r2, #0
   ba23e:	2102      	movs	r1, #2
   ba240:	f7fc bd6c 	b.w	b6d1c <network_disconnect>

000ba244 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba244:	2200      	movs	r2, #0
   ba246:	6840      	ldr	r0, [r0, #4]
   ba248:	4611      	mov	r1, r2
   ba24a:	f7fc bd5f 	b.w	b6d0c <network_connecting>

000ba24e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba24e:	2200      	movs	r2, #0
   ba250:	6840      	ldr	r0, [r0, #4]
   ba252:	4611      	mov	r1, r2
   ba254:	f7fc bd6a 	b.w	b6d2c <network_ready>

000ba258 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba258:	2300      	movs	r3, #0
   ba25a:	6840      	ldr	r0, [r0, #4]
   ba25c:	461a      	mov	r2, r3
   ba25e:	4619      	mov	r1, r3
   ba260:	f7fc bd6c 	b.w	b6d3c <network_on>

000ba264 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba264:	2300      	movs	r3, #0
   ba266:	6840      	ldr	r0, [r0, #4]
   ba268:	461a      	mov	r2, r3
   ba26a:	4619      	mov	r1, r3
   ba26c:	f7fc bd6e 	b.w	b6d4c <network_off>

000ba270 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba270:	6840      	ldr	r0, [r0, #4]
   ba272:	2100      	movs	r1, #0
   ba274:	f7fc bd92 	b.w	b6d9c <network_is_on>

000ba278 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba278:	6840      	ldr	r0, [r0, #4]
   ba27a:	2100      	movs	r1, #0
   ba27c:	f7fc bd96 	b.w	b6dac <network_is_off>

000ba280 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba280:	6840      	ldr	r0, [r0, #4]
   ba282:	2200      	movs	r2, #0
   ba284:	f081 0101 	eor.w	r1, r1, #1
   ba288:	f7fc bd68 	b.w	b6d5c <network_listen>

000ba28c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba28c:	6840      	ldr	r0, [r0, #4]
   ba28e:	2200      	movs	r2, #0
   ba290:	f7fc bd74 	b.w	b6d7c <network_set_listen_timeout>

000ba294 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba294:	2200      	movs	r2, #0
   ba296:	6840      	ldr	r0, [r0, #4]
   ba298:	4611      	mov	r1, r2
   ba29a:	f7fc bd77 	b.w	b6d8c <network_get_listen_timeout>

000ba29e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba29e:	2200      	movs	r2, #0
   ba2a0:	6840      	ldr	r0, [r0, #4]
   ba2a2:	4611      	mov	r1, r2
   ba2a4:	f7fc bd62 	b.w	b6d6c <network_listening>

000ba2a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba2ac:	b095      	sub	sp, #84	; 0x54
   ba2ae:	4614      	mov	r4, r2
   ba2b0:	460d      	mov	r5, r1
   ba2b2:	4607      	mov	r7, r0
    IPAddress addr;
   ba2b4:	f7ff fafa 	bl	b98ac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba2b8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba2ba:	221c      	movs	r2, #28
   ba2bc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba2be:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba2c0:	f000 ff6b 	bl	bb19a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba2c4:	2340      	movs	r3, #64	; 0x40
   ba2c6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba2c8:	4620      	mov	r0, r4
   ba2ca:	466b      	mov	r3, sp
   ba2cc:	aa0c      	add	r2, sp, #48	; 0x30
   ba2ce:	2100      	movs	r1, #0
   ba2d0:	f7fc fa46 	bl	b6760 <netdb_getaddrinfo>
    if (!r) {
   ba2d4:	4604      	mov	r4, r0
   ba2d6:	2800      	cmp	r0, #0
   ba2d8:	d14b      	bne.n	ba372 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba2da:	4602      	mov	r2, r0
   ba2dc:	2101      	movs	r1, #1
   ba2de:	6868      	ldr	r0, [r5, #4]
   ba2e0:	f7fc fd24 	bl	b6d2c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2e4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba2e6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2e8:	4622      	mov	r2, r4
   ba2ea:	6868      	ldr	r0, [r5, #4]
   ba2ec:	f7fc fd1e 	bl	b6d2c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2f0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2f2:	4681      	mov	r9, r0
        bool ok = false;
   ba2f4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2f6:	2e00      	cmp	r6, #0
   ba2f8:	d03b      	beq.n	ba372 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba2fa:	2900      	cmp	r1, #0
   ba2fc:	d139      	bne.n	ba372 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba2fe:	6873      	ldr	r3, [r6, #4]
   ba300:	2b02      	cmp	r3, #2
   ba302:	d003      	beq.n	ba30c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba304:	2b0a      	cmp	r3, #10
   ba306:	d011      	beq.n	ba32c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba308:	69f6      	ldr	r6, [r6, #28]
   ba30a:	e7f4      	b.n	ba2f6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba30c:	f1b8 0f00 	cmp.w	r8, #0
   ba310:	d0fa      	beq.n	ba308 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba312:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba314:	a806      	add	r0, sp, #24
   ba316:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba318:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba31a:	f7ff fb1f 	bl	b995c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba31e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba320:	1d3c      	adds	r4, r7, #4
   ba322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba324:	682b      	ldr	r3, [r5, #0]
   ba326:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba328:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba32a:	e7ed      	b.n	ba308 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba32c:	f1b9 0f00 	cmp.w	r9, #0
   ba330:	d0ea      	beq.n	ba308 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba332:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba334:	2210      	movs	r2, #16
   ba336:	a801      	add	r0, sp, #4
   ba338:	f000 ff2f 	bl	bb19a <memset>
                    a.v = 6;
   ba33c:	2306      	movs	r3, #6
   ba33e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba342:	ad01      	add	r5, sp, #4
   ba344:	f104 0308 	add.w	r3, r4, #8
   ba348:	3418      	adds	r4, #24
   ba34a:	6818      	ldr	r0, [r3, #0]
   ba34c:	6859      	ldr	r1, [r3, #4]
   ba34e:	462a      	mov	r2, r5
   ba350:	c203      	stmia	r2!, {r0, r1}
   ba352:	3308      	adds	r3, #8
   ba354:	42a3      	cmp	r3, r4
   ba356:	4615      	mov	r5, r2
   ba358:	d1f7      	bne.n	ba34a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba35a:	a901      	add	r1, sp, #4
   ba35c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba35e:	ad07      	add	r5, sp, #28
   ba360:	f7ff fab2 	bl	b98c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba366:	1d3c      	adds	r4, r7, #4
   ba368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba36a:	682b      	ldr	r3, [r5, #0]
   ba36c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba36e:	4649      	mov	r1, r9
   ba370:	e7ca      	b.n	ba308 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba372:	9800      	ldr	r0, [sp, #0]
   ba374:	f7fc f9ec 	bl	b6750 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba378:	4638      	mov	r0, r7
   ba37a:	b015      	add	sp, #84	; 0x54
   ba37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba380 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba380:	4b02      	ldr	r3, [pc, #8]	; (ba38c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba382:	4a03      	ldr	r2, [pc, #12]	; (ba390 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba384:	601a      	str	r2, [r3, #0]
   ba386:	2200      	movs	r2, #0
   ba388:	605a      	str	r2, [r3, #4]

} // spark
   ba38a:	4770      	bx	lr
   ba38c:	2003e718 	.word	0x2003e718
   ba390:	000bddc0 	.word	0x000bddc0

000ba394 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ba394:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ba396:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ba398:	d902      	bls.n	ba3a0 <pinAvailable+0xc>
    return false;
   ba39a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ba39c:	b002      	add	sp, #8
   ba39e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba3a0:	f1a0 030b 	sub.w	r3, r0, #11
   ba3a4:	2b02      	cmp	r3, #2
   ba3a6:	d81a      	bhi.n	ba3de <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ba3a8:	4c17      	ldr	r4, [pc, #92]	; (ba408 <pinAvailable+0x74>)
   ba3aa:	7821      	ldrb	r1, [r4, #0]
   ba3ac:	f3bf 8f5b 	dmb	ish
   ba3b0:	f011 0101 	ands.w	r1, r1, #1
   ba3b4:	d10b      	bne.n	ba3ce <pinAvailable+0x3a>
   ba3b6:	4620      	mov	r0, r4
   ba3b8:	9101      	str	r1, [sp, #4]
   ba3ba:	f7f9 fe74 	bl	b40a6 <__cxa_guard_acquire>
   ba3be:	9901      	ldr	r1, [sp, #4]
   ba3c0:	b128      	cbz	r0, ba3ce <pinAvailable+0x3a>
   ba3c2:	4812      	ldr	r0, [pc, #72]	; (ba40c <pinAvailable+0x78>)
   ba3c4:	f7fc fdc8 	bl	b6f58 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba3c8:	4620      	mov	r0, r4
   ba3ca:	f7f9 fe71 	bl	b40b0 <__cxa_guard_release>
   ba3ce:	4b0f      	ldr	r3, [pc, #60]	; (ba40c <pinAvailable+0x78>)
   ba3d0:	7818      	ldrb	r0, [r3, #0]
   ba3d2:	f7fc fbff 	bl	b6bd4 <hal_spi_is_enabled>
   ba3d6:	2800      	cmp	r0, #0
   ba3d8:	d1df      	bne.n	ba39a <pinAvailable+0x6>
  return true; // 'pin' is available
   ba3da:	2001      	movs	r0, #1
   ba3dc:	e7de      	b.n	ba39c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba3de:	2801      	cmp	r0, #1
   ba3e0:	d809      	bhi.n	ba3f6 <pinAvailable+0x62>
   ba3e2:	f000 f87d 	bl	ba4e0 <_Z19__fetch_global_Wirev>
   ba3e6:	2100      	movs	r1, #0
   ba3e8:	7c00      	ldrb	r0, [r0, #16]
   ba3ea:	f7fc fb93 	bl	b6b14 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba3ee:	f080 0001 	eor.w	r0, r0, #1
   ba3f2:	b2c0      	uxtb	r0, r0
   ba3f4:	e7d2      	b.n	ba39c <pinAvailable+0x8>
   ba3f6:	3809      	subs	r0, #9
   ba3f8:	2801      	cmp	r0, #1
   ba3fa:	d8ee      	bhi.n	ba3da <pinAvailable+0x46>
   ba3fc:	f000 f834 	bl	ba468 <_Z22__fetch_global_Serial1v>
   ba400:	7c00      	ldrb	r0, [r0, #16]
   ba402:	f7fc fb47 	bl	b6a94 <hal_usart_is_enabled>
   ba406:	e7f2      	b.n	ba3ee <pinAvailable+0x5a>
   ba408:	2003e720 	.word	0x2003e720
   ba40c:	2003e724 	.word	0x2003e724

000ba410 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba410:	2823      	cmp	r0, #35	; 0x23
{
   ba412:	b538      	push	{r3, r4, r5, lr}
   ba414:	4604      	mov	r4, r0
   ba416:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba418:	d80a      	bhi.n	ba430 <pinMode+0x20>
   ba41a:	29ff      	cmp	r1, #255	; 0xff
   ba41c:	d008      	beq.n	ba430 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba41e:	f7ff ffb9 	bl	ba394 <pinAvailable>
   ba422:	b128      	cbz	r0, ba430 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   ba424:	4629      	mov	r1, r5
   ba426:	4620      	mov	r0, r4
}
   ba428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   ba42c:	f7fc b9a0 	b.w	b6770 <HAL_Pin_Mode>
}
   ba430:	bd38      	pop	{r3, r4, r5, pc}

000ba432 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba432:	4770      	bx	lr

000ba434 <_Z20acquireSerial1Bufferv>:
{
   ba434:	b538      	push	{r3, r4, r5, lr}
   ba436:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba438:	2514      	movs	r5, #20
   ba43a:	462a      	mov	r2, r5
   ba43c:	2100      	movs	r1, #0
   ba43e:	f000 feac 	bl	bb19a <memset>
   ba442:	8025      	strh	r5, [r4, #0]
   ba444:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba446:	4907      	ldr	r1, [pc, #28]	; (ba464 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba448:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba44a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba44c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba44e:	f000 f86b 	bl	ba528 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba452:	4904      	ldr	r1, [pc, #16]	; (ba464 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba454:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba456:	4628      	mov	r0, r5
   ba458:	f000 f866 	bl	ba528 <_ZnajRKSt9nothrow_t>
    };
   ba45c:	60e0      	str	r0, [r4, #12]
}
   ba45e:	4620      	mov	r0, r4
   ba460:	bd38      	pop	{r3, r4, r5, pc}
   ba462:	bf00      	nop
   ba464:	000bddf4 	.word	0x000bddf4

000ba468 <_Z22__fetch_global_Serial1v>:
{
   ba468:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba46a:	4d0e      	ldr	r5, [pc, #56]	; (ba4a4 <_Z22__fetch_global_Serial1v+0x3c>)
   ba46c:	7829      	ldrb	r1, [r5, #0]
   ba46e:	f3bf 8f5b 	dmb	ish
   ba472:	f011 0401 	ands.w	r4, r1, #1
{
   ba476:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba478:	d111      	bne.n	ba49e <_Z22__fetch_global_Serial1v+0x36>
   ba47a:	4628      	mov	r0, r5
   ba47c:	f7f9 fe13 	bl	b40a6 <__cxa_guard_acquire>
   ba480:	b168      	cbz	r0, ba49e <_Z22__fetch_global_Serial1v+0x36>
   ba482:	a801      	add	r0, sp, #4
   ba484:	f7ff ffd6 	bl	ba434 <_Z20acquireSerial1Bufferv>
   ba488:	aa01      	add	r2, sp, #4
   ba48a:	4621      	mov	r1, r4
   ba48c:	4806      	ldr	r0, [pc, #24]	; (ba4a8 <_Z22__fetch_global_Serial1v+0x40>)
   ba48e:	f7ff fb5f 	bl	b9b50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba492:	4628      	mov	r0, r5
   ba494:	f7f9 fe0c 	bl	b40b0 <__cxa_guard_release>
   ba498:	4804      	ldr	r0, [pc, #16]	; (ba4ac <_Z22__fetch_global_Serial1v+0x44>)
   ba49a:	f000 fe25 	bl	bb0e8 <atexit>
    return serial1;
}
   ba49e:	4802      	ldr	r0, [pc, #8]	; (ba4a8 <_Z22__fetch_global_Serial1v+0x40>)
   ba4a0:	b007      	add	sp, #28
   ba4a2:	bd30      	pop	{r4, r5, pc}
   ba4a4:	2003e72c 	.word	0x2003e72c
   ba4a8:	2003e730 	.word	0x2003e730
   ba4ac:	000ba433 	.word	0x000ba433

000ba4b0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba4b0:	4770      	bx	lr
	...

000ba4b4 <_Z17acquireWireBufferv>:
{
   ba4b4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba4b6:	2520      	movs	r5, #32
   ba4b8:	2314      	movs	r3, #20
{
   ba4ba:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba4bc:	6003      	str	r3, [r0, #0]
   ba4be:	6085      	str	r5, [r0, #8]
   ba4c0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba4c2:	4906      	ldr	r1, [pc, #24]	; (ba4dc <_Z17acquireWireBufferv+0x28>)
   ba4c4:	4628      	mov	r0, r5
   ba4c6:	f000 f82f 	bl	ba528 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba4ca:	4904      	ldr	r1, [pc, #16]	; (ba4dc <_Z17acquireWireBufferv+0x28>)
	};
   ba4cc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba4ce:	4628      	mov	r0, r5
   ba4d0:	f000 f82a 	bl	ba528 <_ZnajRKSt9nothrow_t>
	};
   ba4d4:	60e0      	str	r0, [r4, #12]
}
   ba4d6:	4620      	mov	r0, r4
   ba4d8:	bd38      	pop	{r3, r4, r5, pc}
   ba4da:	bf00      	nop
   ba4dc:	000bddf4 	.word	0x000bddf4

000ba4e0 <_Z19__fetch_global_Wirev>:
{
   ba4e0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba4e2:	4d0e      	ldr	r5, [pc, #56]	; (ba51c <_Z19__fetch_global_Wirev+0x3c>)
   ba4e4:	7829      	ldrb	r1, [r5, #0]
   ba4e6:	f3bf 8f5b 	dmb	ish
   ba4ea:	f011 0401 	ands.w	r4, r1, #1
{
   ba4ee:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba4f0:	d111      	bne.n	ba516 <_Z19__fetch_global_Wirev+0x36>
   ba4f2:	4628      	mov	r0, r5
   ba4f4:	f7f9 fdd7 	bl	b40a6 <__cxa_guard_acquire>
   ba4f8:	b168      	cbz	r0, ba516 <_Z19__fetch_global_Wirev+0x36>
   ba4fa:	a801      	add	r0, sp, #4
   ba4fc:	f7ff ffda 	bl	ba4b4 <_Z17acquireWireBufferv>
   ba500:	aa01      	add	r2, sp, #4
   ba502:	4621      	mov	r1, r4
   ba504:	4806      	ldr	r0, [pc, #24]	; (ba520 <_Z19__fetch_global_Wirev+0x40>)
   ba506:	f7ff fb77 	bl	b9bf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba50a:	4628      	mov	r0, r5
   ba50c:	f7f9 fdd0 	bl	b40b0 <__cxa_guard_release>
   ba510:	4804      	ldr	r0, [pc, #16]	; (ba524 <_Z19__fetch_global_Wirev+0x44>)
   ba512:	f000 fde9 	bl	bb0e8 <atexit>
	return wire;
}
   ba516:	4802      	ldr	r0, [pc, #8]	; (ba520 <_Z19__fetch_global_Wirev+0x40>)
   ba518:	b007      	add	sp, #28
   ba51a:	bd30      	pop	{r4, r5, pc}
   ba51c:	2003e748 	.word	0x2003e748
   ba520:	2003e74c 	.word	0x2003e74c
   ba524:	000ba4b1 	.word	0x000ba4b1

000ba528 <_ZnajRKSt9nothrow_t>:
   ba528:	f7f9 bdb7 	b.w	b409a <_Znaj>

000ba52c <_ZSt25__throw_bad_function_callv>:
   ba52c:	b508      	push	{r3, lr}
   ba52e:	f7fc fca5 	bl	b6e7c <abort>
	...

000ba534 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba534:	4901      	ldr	r1, [pc, #4]	; (ba53c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba536:	f000 b8f9 	b.w	ba72c <_ZNKSt9type_infoeqERKS_>
   ba53a:	bf00      	nop
   ba53c:	000bde10 	.word	0x000bde10

000ba540 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba542:	2400      	movs	r4, #0
   ba544:	2310      	movs	r3, #16
   ba546:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba54a:	6803      	ldr	r3, [r0, #0]
   ba54c:	4615      	mov	r5, r2
   ba54e:	699e      	ldr	r6, [r3, #24]
   ba550:	6812      	ldr	r2, [r2, #0]
   ba552:	466b      	mov	r3, sp
   ba554:	e9cd 4400 	strd	r4, r4, [sp]
   ba558:	47b0      	blx	r6
   ba55a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba55e:	f003 0306 	and.w	r3, r3, #6
   ba562:	2b06      	cmp	r3, #6
   ba564:	bf03      	ittte	eq
   ba566:	9b00      	ldreq	r3, [sp, #0]
   ba568:	602b      	streq	r3, [r5, #0]
   ba56a:	2001      	moveq	r0, #1
   ba56c:	4620      	movne	r0, r4
   ba56e:	b004      	add	sp, #16
   ba570:	bd70      	pop	{r4, r5, r6, pc}

000ba572 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba572:	9800      	ldr	r0, [sp, #0]
   ba574:	4290      	cmp	r0, r2
   ba576:	bf14      	ite	ne
   ba578:	2001      	movne	r0, #1
   ba57a:	2006      	moveq	r0, #6
   ba57c:	4770      	bx	lr
	...

000ba580 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba580:	b510      	push	{r4, lr}
   ba582:	4b03      	ldr	r3, [pc, #12]	; (ba590 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba584:	6003      	str	r3, [r0, #0]
   ba586:	4604      	mov	r4, r0
   ba588:	f000 f8cd 	bl	ba726 <_ZNSt9type_infoD1Ev>
   ba58c:	4620      	mov	r0, r4
   ba58e:	bd10      	pop	{r4, pc}
   ba590:	000bde50 	.word	0x000bde50

000ba594 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba594:	b510      	push	{r4, lr}
   ba596:	4604      	mov	r4, r0
   ba598:	f7ff fff2 	bl	ba580 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba59c:	4620      	mov	r0, r4
   ba59e:	2108      	movs	r1, #8
   ba5a0:	f7f9 fd7f 	bl	b40a2 <_ZdlPvj>
   ba5a4:	4620      	mov	r0, r4
   ba5a6:	bd10      	pop	{r4, pc}

000ba5a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba5ac:	461f      	mov	r7, r3
   ba5ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba5b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba5b6:	4598      	cmp	r8, r3
   ba5b8:	4606      	mov	r6, r0
   ba5ba:	4615      	mov	r5, r2
   ba5bc:	d107      	bne.n	ba5ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba5be:	9907      	ldr	r1, [sp, #28]
   ba5c0:	f000 f8b4 	bl	ba72c <_ZNKSt9type_infoeqERKS_>
   ba5c4:	b118      	cbz	r0, ba5ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba5c6:	7165      	strb	r5, [r4, #5]
   ba5c8:	2000      	movs	r0, #0
   ba5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba5ce:	4639      	mov	r1, r7
   ba5d0:	4630      	mov	r0, r6
   ba5d2:	f000 f8ab 	bl	ba72c <_ZNKSt9type_infoeqERKS_>
   ba5d6:	2800      	cmp	r0, #0
   ba5d8:	d0f6      	beq.n	ba5c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba5da:	2301      	movs	r3, #1
   ba5dc:	f8c4 8000 	str.w	r8, [r4]
   ba5e0:	7125      	strb	r5, [r4, #4]
   ba5e2:	71a3      	strb	r3, [r4, #6]
   ba5e4:	e7f0      	b.n	ba5c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba5e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba5e6:	b538      	push	{r3, r4, r5, lr}
   ba5e8:	4615      	mov	r5, r2
   ba5ea:	461c      	mov	r4, r3
   ba5ec:	f000 f89e 	bl	ba72c <_ZNKSt9type_infoeqERKS_>
   ba5f0:	b120      	cbz	r0, ba5fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba5f2:	2308      	movs	r3, #8
   ba5f4:	60e3      	str	r3, [r4, #12]
   ba5f6:	2306      	movs	r3, #6
   ba5f8:	6025      	str	r5, [r4, #0]
   ba5fa:	7123      	strb	r3, [r4, #4]
   ba5fc:	bd38      	pop	{r3, r4, r5, pc}

000ba5fe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba5fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba600:	4605      	mov	r5, r0
   ba602:	460c      	mov	r4, r1
   ba604:	9201      	str	r2, [sp, #4]
   ba606:	461e      	mov	r6, r3
   ba608:	f000 f890 	bl	ba72c <_ZNKSt9type_infoeqERKS_>
   ba60c:	b950      	cbnz	r0, ba624 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba60e:	2e03      	cmp	r6, #3
   ba610:	d808      	bhi.n	ba624 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba612:	6823      	ldr	r3, [r4, #0]
   ba614:	9a01      	ldr	r2, [sp, #4]
   ba616:	695b      	ldr	r3, [r3, #20]
   ba618:	4629      	mov	r1, r5
   ba61a:	4620      	mov	r0, r4
   ba61c:	b002      	add	sp, #8
   ba61e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba622:	4718      	bx	r3
   ba624:	b002      	add	sp, #8
   ba626:	bd70      	pop	{r4, r5, r6, pc}

000ba628 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba628:	b510      	push	{r4, lr}
   ba62a:	4b03      	ldr	r3, [pc, #12]	; (ba638 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba62c:	6003      	str	r3, [r0, #0]
   ba62e:	4604      	mov	r4, r0
   ba630:	f7ff ffa6 	bl	ba580 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba634:	4620      	mov	r0, r4
   ba636:	bd10      	pop	{r4, pc}
   ba638:	000bdeb0 	.word	0x000bdeb0

000ba63c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba63c:	b510      	push	{r4, lr}
   ba63e:	4604      	mov	r4, r0
   ba640:	f7ff fff2 	bl	ba628 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba644:	4620      	mov	r0, r4
   ba646:	210c      	movs	r1, #12
   ba648:	f7f9 fd2b 	bl	b40a2 <_ZdlPvj>
   ba64c:	4620      	mov	r0, r4
   ba64e:	bd10      	pop	{r4, pc}

000ba650 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba652:	9f08      	ldr	r7, [sp, #32]
   ba654:	4297      	cmp	r7, r2
   ba656:	4605      	mov	r5, r0
   ba658:	460e      	mov	r6, r1
   ba65a:	4614      	mov	r4, r2
   ba65c:	d00a      	beq.n	ba674 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba65e:	68a8      	ldr	r0, [r5, #8]
   ba660:	6802      	ldr	r2, [r0, #0]
   ba662:	9708      	str	r7, [sp, #32]
   ba664:	6a15      	ldr	r5, [r2, #32]
   ba666:	4631      	mov	r1, r6
   ba668:	4622      	mov	r2, r4
   ba66a:	46ac      	mov	ip, r5
   ba66c:	b003      	add	sp, #12
   ba66e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba672:	4760      	bx	ip
   ba674:	4619      	mov	r1, r3
   ba676:	9301      	str	r3, [sp, #4]
   ba678:	f000 f858 	bl	ba72c <_ZNKSt9type_infoeqERKS_>
   ba67c:	9b01      	ldr	r3, [sp, #4]
   ba67e:	2800      	cmp	r0, #0
   ba680:	d0ed      	beq.n	ba65e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba682:	2006      	movs	r0, #6
   ba684:	b003      	add	sp, #12
   ba686:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba688 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba688:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba68c:	460d      	mov	r5, r1
   ba68e:	4619      	mov	r1, r3
   ba690:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba694:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba698:	4681      	mov	r9, r0
   ba69a:	4617      	mov	r7, r2
   ba69c:	4698      	mov	r8, r3
   ba69e:	f000 f845 	bl	ba72c <_ZNKSt9type_infoeqERKS_>
   ba6a2:	b190      	cbz	r0, ba6ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba6a4:	2d00      	cmp	r5, #0
   ba6a6:	6034      	str	r4, [r6, #0]
   ba6a8:	7137      	strb	r7, [r6, #4]
   ba6aa:	db09      	blt.n	ba6c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba6ac:	1961      	adds	r1, r4, r5
   ba6ae:	458a      	cmp	sl, r1
   ba6b0:	bf0c      	ite	eq
   ba6b2:	2106      	moveq	r1, #6
   ba6b4:	2101      	movne	r1, #1
   ba6b6:	71b1      	strb	r1, [r6, #6]
   ba6b8:	2000      	movs	r0, #0
   ba6ba:	b001      	add	sp, #4
   ba6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba6c0:	3502      	adds	r5, #2
   ba6c2:	d1f9      	bne.n	ba6b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba6c4:	2301      	movs	r3, #1
   ba6c6:	71b3      	strb	r3, [r6, #6]
   ba6c8:	e7f6      	b.n	ba6b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba6ca:	4554      	cmp	r4, sl
   ba6cc:	d106      	bne.n	ba6dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba6ce:	4659      	mov	r1, fp
   ba6d0:	4648      	mov	r0, r9
   ba6d2:	f000 f82b 	bl	ba72c <_ZNKSt9type_infoeqERKS_>
   ba6d6:	b108      	cbz	r0, ba6dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba6d8:	7177      	strb	r7, [r6, #5]
   ba6da:	e7ed      	b.n	ba6b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba6dc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba6e0:	6803      	ldr	r3, [r0, #0]
   ba6e2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba6e6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba6ea:	69dc      	ldr	r4, [r3, #28]
   ba6ec:	463a      	mov	r2, r7
   ba6ee:	4643      	mov	r3, r8
   ba6f0:	4629      	mov	r1, r5
   ba6f2:	46a4      	mov	ip, r4
   ba6f4:	b001      	add	sp, #4
   ba6f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba6fa:	4760      	bx	ip

000ba6fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba700:	4607      	mov	r7, r0
   ba702:	460c      	mov	r4, r1
   ba704:	4615      	mov	r5, r2
   ba706:	461e      	mov	r6, r3
   ba708:	f7ff ff6d 	bl	ba5e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba70c:	b948      	cbnz	r0, ba722 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba70e:	68b8      	ldr	r0, [r7, #8]
   ba710:	6803      	ldr	r3, [r0, #0]
   ba712:	699f      	ldr	r7, [r3, #24]
   ba714:	462a      	mov	r2, r5
   ba716:	4633      	mov	r3, r6
   ba718:	4621      	mov	r1, r4
   ba71a:	46bc      	mov	ip, r7
   ba71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba720:	4760      	bx	ip
   ba722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba726 <_ZNSt9type_infoD1Ev>:
   ba726:	4770      	bx	lr

000ba728 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba728:	2000      	movs	r0, #0
   ba72a:	4770      	bx	lr

000ba72c <_ZNKSt9type_infoeqERKS_>:
   ba72c:	4281      	cmp	r1, r0
   ba72e:	b508      	push	{r3, lr}
   ba730:	d00e      	beq.n	ba750 <_ZNKSt9type_infoeqERKS_+0x24>
   ba732:	6840      	ldr	r0, [r0, #4]
   ba734:	7803      	ldrb	r3, [r0, #0]
   ba736:	2b2a      	cmp	r3, #42	; 0x2a
   ba738:	d00c      	beq.n	ba754 <_ZNKSt9type_infoeqERKS_+0x28>
   ba73a:	6849      	ldr	r1, [r1, #4]
   ba73c:	780b      	ldrb	r3, [r1, #0]
   ba73e:	2b2a      	cmp	r3, #42	; 0x2a
   ba740:	bf08      	it	eq
   ba742:	3101      	addeq	r1, #1
   ba744:	f000 fd6f 	bl	bb226 <strcmp>
   ba748:	fab0 f080 	clz	r0, r0
   ba74c:	0940      	lsrs	r0, r0, #5
   ba74e:	bd08      	pop	{r3, pc}
   ba750:	2001      	movs	r0, #1
   ba752:	e7fc      	b.n	ba74e <_ZNKSt9type_infoeqERKS_+0x22>
   ba754:	2000      	movs	r0, #0
   ba756:	e7fa      	b.n	ba74e <_ZNKSt9type_infoeqERKS_+0x22>

000ba758 <__aeabi_drsub>:
   ba758:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba75c:	e002      	b.n	ba764 <__adddf3>
   ba75e:	bf00      	nop

000ba760 <__aeabi_dsub>:
   ba760:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba764 <__adddf3>:
   ba764:	b530      	push	{r4, r5, lr}
   ba766:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba76a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba76e:	ea94 0f05 	teq	r4, r5
   ba772:	bf08      	it	eq
   ba774:	ea90 0f02 	teqeq	r0, r2
   ba778:	bf1f      	itttt	ne
   ba77a:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba77e:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba782:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba786:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba78a:	f000 80e2 	beq.w	ba952 <__adddf3+0x1ee>
   ba78e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba792:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba796:	bfb8      	it	lt
   ba798:	426d      	neglt	r5, r5
   ba79a:	dd0c      	ble.n	ba7b6 <__adddf3+0x52>
   ba79c:	442c      	add	r4, r5
   ba79e:	ea80 0202 	eor.w	r2, r0, r2
   ba7a2:	ea81 0303 	eor.w	r3, r1, r3
   ba7a6:	ea82 0000 	eor.w	r0, r2, r0
   ba7aa:	ea83 0101 	eor.w	r1, r3, r1
   ba7ae:	ea80 0202 	eor.w	r2, r0, r2
   ba7b2:	ea81 0303 	eor.w	r3, r1, r3
   ba7b6:	2d36      	cmp	r5, #54	; 0x36
   ba7b8:	bf88      	it	hi
   ba7ba:	bd30      	pophi	{r4, r5, pc}
   ba7bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba7c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba7c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba7c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba7cc:	d002      	beq.n	ba7d4 <__adddf3+0x70>
   ba7ce:	4240      	negs	r0, r0
   ba7d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba7d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba7d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba7dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba7e0:	d002      	beq.n	ba7e8 <__adddf3+0x84>
   ba7e2:	4252      	negs	r2, r2
   ba7e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba7e8:	ea94 0f05 	teq	r4, r5
   ba7ec:	f000 80a7 	beq.w	ba93e <__adddf3+0x1da>
   ba7f0:	f1a4 0401 	sub.w	r4, r4, #1
   ba7f4:	f1d5 0e20 	rsbs	lr, r5, #32
   ba7f8:	db0d      	blt.n	ba816 <__adddf3+0xb2>
   ba7fa:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba7fe:	fa22 f205 	lsr.w	r2, r2, r5
   ba802:	1880      	adds	r0, r0, r2
   ba804:	f141 0100 	adc.w	r1, r1, #0
   ba808:	fa03 f20e 	lsl.w	r2, r3, lr
   ba80c:	1880      	adds	r0, r0, r2
   ba80e:	fa43 f305 	asr.w	r3, r3, r5
   ba812:	4159      	adcs	r1, r3
   ba814:	e00e      	b.n	ba834 <__adddf3+0xd0>
   ba816:	f1a5 0520 	sub.w	r5, r5, #32
   ba81a:	f10e 0e20 	add.w	lr, lr, #32
   ba81e:	2a01      	cmp	r2, #1
   ba820:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba824:	bf28      	it	cs
   ba826:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba82a:	fa43 f305 	asr.w	r3, r3, r5
   ba82e:	18c0      	adds	r0, r0, r3
   ba830:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba838:	d507      	bpl.n	ba84a <__adddf3+0xe6>
   ba83a:	f04f 0e00 	mov.w	lr, #0
   ba83e:	f1dc 0c00 	rsbs	ip, ip, #0
   ba842:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba846:	eb6e 0101 	sbc.w	r1, lr, r1
   ba84a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba84e:	d31b      	bcc.n	ba888 <__adddf3+0x124>
   ba850:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba854:	d30c      	bcc.n	ba870 <__adddf3+0x10c>
   ba856:	0849      	lsrs	r1, r1, #1
   ba858:	ea5f 0030 	movs.w	r0, r0, rrx
   ba85c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba860:	f104 0401 	add.w	r4, r4, #1
   ba864:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba868:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba86c:	f080 809a 	bcs.w	ba9a4 <__adddf3+0x240>
   ba870:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba874:	bf08      	it	eq
   ba876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba87a:	f150 0000 	adcs.w	r0, r0, #0
   ba87e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba882:	ea41 0105 	orr.w	r1, r1, r5
   ba886:	bd30      	pop	{r4, r5, pc}
   ba888:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba88c:	4140      	adcs	r0, r0
   ba88e:	eb41 0101 	adc.w	r1, r1, r1
   ba892:	3c01      	subs	r4, #1
   ba894:	bf28      	it	cs
   ba896:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba89a:	d2e9      	bcs.n	ba870 <__adddf3+0x10c>
   ba89c:	f091 0f00 	teq	r1, #0
   ba8a0:	bf04      	itt	eq
   ba8a2:	4601      	moveq	r1, r0
   ba8a4:	2000      	moveq	r0, #0
   ba8a6:	fab1 f381 	clz	r3, r1
   ba8aa:	bf08      	it	eq
   ba8ac:	3320      	addeq	r3, #32
   ba8ae:	f1a3 030b 	sub.w	r3, r3, #11
   ba8b2:	f1b3 0220 	subs.w	r2, r3, #32
   ba8b6:	da0c      	bge.n	ba8d2 <__adddf3+0x16e>
   ba8b8:	320c      	adds	r2, #12
   ba8ba:	dd08      	ble.n	ba8ce <__adddf3+0x16a>
   ba8bc:	f102 0c14 	add.w	ip, r2, #20
   ba8c0:	f1c2 020c 	rsb	r2, r2, #12
   ba8c4:	fa01 f00c 	lsl.w	r0, r1, ip
   ba8c8:	fa21 f102 	lsr.w	r1, r1, r2
   ba8cc:	e00c      	b.n	ba8e8 <__adddf3+0x184>
   ba8ce:	f102 0214 	add.w	r2, r2, #20
   ba8d2:	bfd8      	it	le
   ba8d4:	f1c2 0c20 	rsble	ip, r2, #32
   ba8d8:	fa01 f102 	lsl.w	r1, r1, r2
   ba8dc:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba8e0:	bfdc      	itt	le
   ba8e2:	ea41 010c 	orrle.w	r1, r1, ip
   ba8e6:	4090      	lslle	r0, r2
   ba8e8:	1ae4      	subs	r4, r4, r3
   ba8ea:	bfa2      	ittt	ge
   ba8ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba8f0:	4329      	orrge	r1, r5
   ba8f2:	bd30      	popge	{r4, r5, pc}
   ba8f4:	ea6f 0404 	mvn.w	r4, r4
   ba8f8:	3c1f      	subs	r4, #31
   ba8fa:	da1c      	bge.n	ba936 <__adddf3+0x1d2>
   ba8fc:	340c      	adds	r4, #12
   ba8fe:	dc0e      	bgt.n	ba91e <__adddf3+0x1ba>
   ba900:	f104 0414 	add.w	r4, r4, #20
   ba904:	f1c4 0220 	rsb	r2, r4, #32
   ba908:	fa20 f004 	lsr.w	r0, r0, r4
   ba90c:	fa01 f302 	lsl.w	r3, r1, r2
   ba910:	ea40 0003 	orr.w	r0, r0, r3
   ba914:	fa21 f304 	lsr.w	r3, r1, r4
   ba918:	ea45 0103 	orr.w	r1, r5, r3
   ba91c:	bd30      	pop	{r4, r5, pc}
   ba91e:	f1c4 040c 	rsb	r4, r4, #12
   ba922:	f1c4 0220 	rsb	r2, r4, #32
   ba926:	fa20 f002 	lsr.w	r0, r0, r2
   ba92a:	fa01 f304 	lsl.w	r3, r1, r4
   ba92e:	ea40 0003 	orr.w	r0, r0, r3
   ba932:	4629      	mov	r1, r5
   ba934:	bd30      	pop	{r4, r5, pc}
   ba936:	fa21 f004 	lsr.w	r0, r1, r4
   ba93a:	4629      	mov	r1, r5
   ba93c:	bd30      	pop	{r4, r5, pc}
   ba93e:	f094 0f00 	teq	r4, #0
   ba942:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba946:	bf06      	itte	eq
   ba948:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba94c:	3401      	addeq	r4, #1
   ba94e:	3d01      	subne	r5, #1
   ba950:	e74e      	b.n	ba7f0 <__adddf3+0x8c>
   ba952:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba956:	bf18      	it	ne
   ba958:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba95c:	d029      	beq.n	ba9b2 <__adddf3+0x24e>
   ba95e:	ea94 0f05 	teq	r4, r5
   ba962:	bf08      	it	eq
   ba964:	ea90 0f02 	teqeq	r0, r2
   ba968:	d005      	beq.n	ba976 <__adddf3+0x212>
   ba96a:	ea54 0c00 	orrs.w	ip, r4, r0
   ba96e:	bf04      	itt	eq
   ba970:	4619      	moveq	r1, r3
   ba972:	4610      	moveq	r0, r2
   ba974:	bd30      	pop	{r4, r5, pc}
   ba976:	ea91 0f03 	teq	r1, r3
   ba97a:	bf1e      	ittt	ne
   ba97c:	2100      	movne	r1, #0
   ba97e:	2000      	movne	r0, #0
   ba980:	bd30      	popne	{r4, r5, pc}
   ba982:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba986:	d105      	bne.n	ba994 <__adddf3+0x230>
   ba988:	0040      	lsls	r0, r0, #1
   ba98a:	4149      	adcs	r1, r1
   ba98c:	bf28      	it	cs
   ba98e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba992:	bd30      	pop	{r4, r5, pc}
   ba994:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba998:	bf3c      	itt	cc
   ba99a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba99e:	bd30      	popcc	{r4, r5, pc}
   ba9a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba9a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba9a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba9ac:	f04f 0000 	mov.w	r0, #0
   ba9b0:	bd30      	pop	{r4, r5, pc}
   ba9b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba9b6:	bf1a      	itte	ne
   ba9b8:	4619      	movne	r1, r3
   ba9ba:	4610      	movne	r0, r2
   ba9bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba9c0:	bf1c      	itt	ne
   ba9c2:	460b      	movne	r3, r1
   ba9c4:	4602      	movne	r2, r0
   ba9c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba9ca:	bf06      	itte	eq
   ba9cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba9d0:	ea91 0f03 	teqeq	r1, r3
   ba9d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba9d8:	bd30      	pop	{r4, r5, pc}
   ba9da:	bf00      	nop

000ba9dc <__aeabi_ui2d>:
   ba9dc:	f090 0f00 	teq	r0, #0
   ba9e0:	bf04      	itt	eq
   ba9e2:	2100      	moveq	r1, #0
   ba9e4:	4770      	bxeq	lr
   ba9e6:	b530      	push	{r4, r5, lr}
   ba9e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba9ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba9f0:	f04f 0500 	mov.w	r5, #0
   ba9f4:	f04f 0100 	mov.w	r1, #0
   ba9f8:	e750      	b.n	ba89c <__adddf3+0x138>
   ba9fa:	bf00      	nop

000ba9fc <__aeabi_i2d>:
   ba9fc:	f090 0f00 	teq	r0, #0
   baa00:	bf04      	itt	eq
   baa02:	2100      	moveq	r1, #0
   baa04:	4770      	bxeq	lr
   baa06:	b530      	push	{r4, r5, lr}
   baa08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   baa14:	bf48      	it	mi
   baa16:	4240      	negmi	r0, r0
   baa18:	f04f 0100 	mov.w	r1, #0
   baa1c:	e73e      	b.n	ba89c <__adddf3+0x138>
   baa1e:	bf00      	nop

000baa20 <__aeabi_f2d>:
   baa20:	0042      	lsls	r2, r0, #1
   baa22:	ea4f 01e2 	mov.w	r1, r2, asr #3
   baa26:	ea4f 0131 	mov.w	r1, r1, rrx
   baa2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baa2e:	bf1f      	itttt	ne
   baa30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baa34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baa38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baa3c:	4770      	bxne	lr
   baa3e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baa42:	bf08      	it	eq
   baa44:	4770      	bxeq	lr
   baa46:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baa4a:	bf04      	itt	eq
   baa4c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baa50:	4770      	bxeq	lr
   baa52:	b530      	push	{r4, r5, lr}
   baa54:	f44f 7460 	mov.w	r4, #896	; 0x380
   baa58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baa5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baa60:	e71c      	b.n	ba89c <__adddf3+0x138>
   baa62:	bf00      	nop

000baa64 <__aeabi_ul2d>:
   baa64:	ea50 0201 	orrs.w	r2, r0, r1
   baa68:	bf08      	it	eq
   baa6a:	4770      	bxeq	lr
   baa6c:	b530      	push	{r4, r5, lr}
   baa6e:	f04f 0500 	mov.w	r5, #0
   baa72:	e00a      	b.n	baa8a <__aeabi_l2d+0x16>

000baa74 <__aeabi_l2d>:
   baa74:	ea50 0201 	orrs.w	r2, r0, r1
   baa78:	bf08      	it	eq
   baa7a:	4770      	bxeq	lr
   baa7c:	b530      	push	{r4, r5, lr}
   baa7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baa82:	d502      	bpl.n	baa8a <__aeabi_l2d+0x16>
   baa84:	4240      	negs	r0, r0
   baa86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baa8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baa96:	f43f aed8 	beq.w	ba84a <__adddf3+0xe6>
   baa9a:	f04f 0203 	mov.w	r2, #3
   baa9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baaa2:	bf18      	it	ne
   baaa4:	3203      	addne	r2, #3
   baaa6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baaaa:	bf18      	it	ne
   baaac:	3203      	addne	r2, #3
   baaae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   baab2:	f1c2 0320 	rsb	r3, r2, #32
   baab6:	fa00 fc03 	lsl.w	ip, r0, r3
   baaba:	fa20 f002 	lsr.w	r0, r0, r2
   baabe:	fa01 fe03 	lsl.w	lr, r1, r3
   baac2:	ea40 000e 	orr.w	r0, r0, lr
   baac6:	fa21 f102 	lsr.w	r1, r1, r2
   baaca:	4414      	add	r4, r2
   baacc:	e6bd      	b.n	ba84a <__adddf3+0xe6>
   baace:	bf00      	nop

000baad0 <__aeabi_dmul>:
   baad0:	b570      	push	{r4, r5, r6, lr}
   baad2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baad6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baada:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   baade:	bf1d      	ittte	ne
   baae0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   baae4:	ea94 0f0c 	teqne	r4, ip
   baae8:	ea95 0f0c 	teqne	r5, ip
   baaec:	f000 f8de 	bleq	bacac <__aeabi_dmul+0x1dc>
   baaf0:	442c      	add	r4, r5
   baaf2:	ea81 0603 	eor.w	r6, r1, r3
   baaf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   baafa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   baafe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bab02:	bf18      	it	ne
   bab04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bab08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bab0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bab10:	d038      	beq.n	bab84 <__aeabi_dmul+0xb4>
   bab12:	fba0 ce02 	umull	ip, lr, r0, r2
   bab16:	f04f 0500 	mov.w	r5, #0
   bab1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bab1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bab22:	fbe0 e503 	umlal	lr, r5, r0, r3
   bab26:	f04f 0600 	mov.w	r6, #0
   bab2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bab2e:	f09c 0f00 	teq	ip, #0
   bab32:	bf18      	it	ne
   bab34:	f04e 0e01 	orrne.w	lr, lr, #1
   bab38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bab3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bab40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bab44:	d204      	bcs.n	bab50 <__aeabi_dmul+0x80>
   bab46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bab4a:	416d      	adcs	r5, r5
   bab4c:	eb46 0606 	adc.w	r6, r6, r6
   bab50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bab54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bab58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bab5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bab60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bab64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bab68:	bf88      	it	hi
   bab6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bab6e:	d81e      	bhi.n	babae <__aeabi_dmul+0xde>
   bab70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bab74:	bf08      	it	eq
   bab76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bab7a:	f150 0000 	adcs.w	r0, r0, #0
   bab7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bab82:	bd70      	pop	{r4, r5, r6, pc}
   bab84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bab88:	ea46 0101 	orr.w	r1, r6, r1
   bab8c:	ea40 0002 	orr.w	r0, r0, r2
   bab90:	ea81 0103 	eor.w	r1, r1, r3
   bab94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bab98:	bfc2      	ittt	gt
   bab9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bab9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   baba2:	bd70      	popgt	{r4, r5, r6, pc}
   baba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baba8:	f04f 0e00 	mov.w	lr, #0
   babac:	3c01      	subs	r4, #1
   babae:	f300 80ab 	bgt.w	bad08 <__aeabi_dmul+0x238>
   babb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   babb6:	bfde      	ittt	le
   babb8:	2000      	movle	r0, #0
   babba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   babbe:	bd70      	pople	{r4, r5, r6, pc}
   babc0:	f1c4 0400 	rsb	r4, r4, #0
   babc4:	3c20      	subs	r4, #32
   babc6:	da35      	bge.n	bac34 <__aeabi_dmul+0x164>
   babc8:	340c      	adds	r4, #12
   babca:	dc1b      	bgt.n	bac04 <__aeabi_dmul+0x134>
   babcc:	f104 0414 	add.w	r4, r4, #20
   babd0:	f1c4 0520 	rsb	r5, r4, #32
   babd4:	fa00 f305 	lsl.w	r3, r0, r5
   babd8:	fa20 f004 	lsr.w	r0, r0, r4
   babdc:	fa01 f205 	lsl.w	r2, r1, r5
   babe0:	ea40 0002 	orr.w	r0, r0, r2
   babe4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   babe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   babec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   babf0:	fa21 f604 	lsr.w	r6, r1, r4
   babf4:	eb42 0106 	adc.w	r1, r2, r6
   babf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   babfc:	bf08      	it	eq
   babfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac02:	bd70      	pop	{r4, r5, r6, pc}
   bac04:	f1c4 040c 	rsb	r4, r4, #12
   bac08:	f1c4 0520 	rsb	r5, r4, #32
   bac0c:	fa00 f304 	lsl.w	r3, r0, r4
   bac10:	fa20 f005 	lsr.w	r0, r0, r5
   bac14:	fa01 f204 	lsl.w	r2, r1, r4
   bac18:	ea40 0002 	orr.w	r0, r0, r2
   bac1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bac24:	f141 0100 	adc.w	r1, r1, #0
   bac28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac2c:	bf08      	it	eq
   bac2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac32:	bd70      	pop	{r4, r5, r6, pc}
   bac34:	f1c4 0520 	rsb	r5, r4, #32
   bac38:	fa00 f205 	lsl.w	r2, r0, r5
   bac3c:	ea4e 0e02 	orr.w	lr, lr, r2
   bac40:	fa20 f304 	lsr.w	r3, r0, r4
   bac44:	fa01 f205 	lsl.w	r2, r1, r5
   bac48:	ea43 0302 	orr.w	r3, r3, r2
   bac4c:	fa21 f004 	lsr.w	r0, r1, r4
   bac50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac54:	fa21 f204 	lsr.w	r2, r1, r4
   bac58:	ea20 0002 	bic.w	r0, r0, r2
   bac5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bac60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac64:	bf08      	it	eq
   bac66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac6a:	bd70      	pop	{r4, r5, r6, pc}
   bac6c:	f094 0f00 	teq	r4, #0
   bac70:	d10f      	bne.n	bac92 <__aeabi_dmul+0x1c2>
   bac72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bac76:	0040      	lsls	r0, r0, #1
   bac78:	eb41 0101 	adc.w	r1, r1, r1
   bac7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bac80:	bf08      	it	eq
   bac82:	3c01      	subeq	r4, #1
   bac84:	d0f7      	beq.n	bac76 <__aeabi_dmul+0x1a6>
   bac86:	ea41 0106 	orr.w	r1, r1, r6
   bac8a:	f095 0f00 	teq	r5, #0
   bac8e:	bf18      	it	ne
   bac90:	4770      	bxne	lr
   bac92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bac96:	0052      	lsls	r2, r2, #1
   bac98:	eb43 0303 	adc.w	r3, r3, r3
   bac9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   baca0:	bf08      	it	eq
   baca2:	3d01      	subeq	r5, #1
   baca4:	d0f7      	beq.n	bac96 <__aeabi_dmul+0x1c6>
   baca6:	ea43 0306 	orr.w	r3, r3, r6
   bacaa:	4770      	bx	lr
   bacac:	ea94 0f0c 	teq	r4, ip
   bacb0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bacb4:	bf18      	it	ne
   bacb6:	ea95 0f0c 	teqne	r5, ip
   bacba:	d00c      	beq.n	bacd6 <__aeabi_dmul+0x206>
   bacbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bacc0:	bf18      	it	ne
   bacc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bacc6:	d1d1      	bne.n	bac6c <__aeabi_dmul+0x19c>
   bacc8:	ea81 0103 	eor.w	r1, r1, r3
   baccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bacd0:	f04f 0000 	mov.w	r0, #0
   bacd4:	bd70      	pop	{r4, r5, r6, pc}
   bacd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bacda:	bf06      	itte	eq
   bacdc:	4610      	moveq	r0, r2
   bacde:	4619      	moveq	r1, r3
   bace0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bace4:	d019      	beq.n	bad1a <__aeabi_dmul+0x24a>
   bace6:	ea94 0f0c 	teq	r4, ip
   bacea:	d102      	bne.n	bacf2 <__aeabi_dmul+0x222>
   bacec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bacf0:	d113      	bne.n	bad1a <__aeabi_dmul+0x24a>
   bacf2:	ea95 0f0c 	teq	r5, ip
   bacf6:	d105      	bne.n	bad04 <__aeabi_dmul+0x234>
   bacf8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bacfc:	bf1c      	itt	ne
   bacfe:	4610      	movne	r0, r2
   bad00:	4619      	movne	r1, r3
   bad02:	d10a      	bne.n	bad1a <__aeabi_dmul+0x24a>
   bad04:	ea81 0103 	eor.w	r1, r1, r3
   bad08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bad0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bad10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bad14:	f04f 0000 	mov.w	r0, #0
   bad18:	bd70      	pop	{r4, r5, r6, pc}
   bad1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bad1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bad22:	bd70      	pop	{r4, r5, r6, pc}

000bad24 <__aeabi_ddiv>:
   bad24:	b570      	push	{r4, r5, r6, lr}
   bad26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bad2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bad2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bad32:	bf1d      	ittte	ne
   bad34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bad38:	ea94 0f0c 	teqne	r4, ip
   bad3c:	ea95 0f0c 	teqne	r5, ip
   bad40:	f000 f8a7 	bleq	bae92 <__aeabi_ddiv+0x16e>
   bad44:	eba4 0405 	sub.w	r4, r4, r5
   bad48:	ea81 0e03 	eor.w	lr, r1, r3
   bad4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bad50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bad54:	f000 8088 	beq.w	bae68 <__aeabi_ddiv+0x144>
   bad58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bad5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bad60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bad64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bad68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bad6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bad70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bad74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bad78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bad7c:	429d      	cmp	r5, r3
   bad7e:	bf08      	it	eq
   bad80:	4296      	cmpeq	r6, r2
   bad82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bad86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bad8a:	d202      	bcs.n	bad92 <__aeabi_ddiv+0x6e>
   bad8c:	085b      	lsrs	r3, r3, #1
   bad8e:	ea4f 0232 	mov.w	r2, r2, rrx
   bad92:	1ab6      	subs	r6, r6, r2
   bad94:	eb65 0503 	sbc.w	r5, r5, r3
   bad98:	085b      	lsrs	r3, r3, #1
   bad9a:	ea4f 0232 	mov.w	r2, r2, rrx
   bad9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bada2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bada6:	ebb6 0e02 	subs.w	lr, r6, r2
   badaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   badae:	bf22      	ittt	cs
   badb0:	1ab6      	subcs	r6, r6, r2
   badb2:	4675      	movcs	r5, lr
   badb4:	ea40 000c 	orrcs.w	r0, r0, ip
   badb8:	085b      	lsrs	r3, r3, #1
   badba:	ea4f 0232 	mov.w	r2, r2, rrx
   badbe:	ebb6 0e02 	subs.w	lr, r6, r2
   badc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   badc6:	bf22      	ittt	cs
   badc8:	1ab6      	subcs	r6, r6, r2
   badca:	4675      	movcs	r5, lr
   badcc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   badd0:	085b      	lsrs	r3, r3, #1
   badd2:	ea4f 0232 	mov.w	r2, r2, rrx
   badd6:	ebb6 0e02 	subs.w	lr, r6, r2
   badda:	eb75 0e03 	sbcs.w	lr, r5, r3
   badde:	bf22      	ittt	cs
   bade0:	1ab6      	subcs	r6, r6, r2
   bade2:	4675      	movcs	r5, lr
   bade4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bade8:	085b      	lsrs	r3, r3, #1
   badea:	ea4f 0232 	mov.w	r2, r2, rrx
   badee:	ebb6 0e02 	subs.w	lr, r6, r2
   badf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   badf6:	bf22      	ittt	cs
   badf8:	1ab6      	subcs	r6, r6, r2
   badfa:	4675      	movcs	r5, lr
   badfc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bae00:	ea55 0e06 	orrs.w	lr, r5, r6
   bae04:	d018      	beq.n	bae38 <__aeabi_ddiv+0x114>
   bae06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bae0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bae0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bae12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bae16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bae1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bae1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bae22:	d1c0      	bne.n	bada6 <__aeabi_ddiv+0x82>
   bae24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae28:	d10b      	bne.n	bae42 <__aeabi_ddiv+0x11e>
   bae2a:	ea41 0100 	orr.w	r1, r1, r0
   bae2e:	f04f 0000 	mov.w	r0, #0
   bae32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bae36:	e7b6      	b.n	bada6 <__aeabi_ddiv+0x82>
   bae38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae3c:	bf04      	itt	eq
   bae3e:	4301      	orreq	r1, r0
   bae40:	2000      	moveq	r0, #0
   bae42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bae46:	bf88      	it	hi
   bae48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bae4c:	f63f aeaf 	bhi.w	babae <__aeabi_dmul+0xde>
   bae50:	ebb5 0c03 	subs.w	ip, r5, r3
   bae54:	bf04      	itt	eq
   bae56:	ebb6 0c02 	subseq.w	ip, r6, r2
   bae5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bae5e:	f150 0000 	adcs.w	r0, r0, #0
   bae62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bae66:	bd70      	pop	{r4, r5, r6, pc}
   bae68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bae6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bae70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bae74:	bfc2      	ittt	gt
   bae76:	ebd4 050c 	rsbsgt	r5, r4, ip
   bae7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bae7e:	bd70      	popgt	{r4, r5, r6, pc}
   bae80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bae84:	f04f 0e00 	mov.w	lr, #0
   bae88:	3c01      	subs	r4, #1
   bae8a:	e690      	b.n	babae <__aeabi_dmul+0xde>
   bae8c:	ea45 0e06 	orr.w	lr, r5, r6
   bae90:	e68d      	b.n	babae <__aeabi_dmul+0xde>
   bae92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bae96:	ea94 0f0c 	teq	r4, ip
   bae9a:	bf08      	it	eq
   bae9c:	ea95 0f0c 	teqeq	r5, ip
   baea0:	f43f af3b 	beq.w	bad1a <__aeabi_dmul+0x24a>
   baea4:	ea94 0f0c 	teq	r4, ip
   baea8:	d10a      	bne.n	baec0 <__aeabi_ddiv+0x19c>
   baeaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baeae:	f47f af34 	bne.w	bad1a <__aeabi_dmul+0x24a>
   baeb2:	ea95 0f0c 	teq	r5, ip
   baeb6:	f47f af25 	bne.w	bad04 <__aeabi_dmul+0x234>
   baeba:	4610      	mov	r0, r2
   baebc:	4619      	mov	r1, r3
   baebe:	e72c      	b.n	bad1a <__aeabi_dmul+0x24a>
   baec0:	ea95 0f0c 	teq	r5, ip
   baec4:	d106      	bne.n	baed4 <__aeabi_ddiv+0x1b0>
   baec6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   baeca:	f43f aefd 	beq.w	bacc8 <__aeabi_dmul+0x1f8>
   baece:	4610      	mov	r0, r2
   baed0:	4619      	mov	r1, r3
   baed2:	e722      	b.n	bad1a <__aeabi_dmul+0x24a>
   baed4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baed8:	bf18      	it	ne
   baeda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baede:	f47f aec5 	bne.w	bac6c <__aeabi_dmul+0x19c>
   baee2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   baee6:	f47f af0d 	bne.w	bad04 <__aeabi_dmul+0x234>
   baeea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   baeee:	f47f aeeb 	bne.w	bacc8 <__aeabi_dmul+0x1f8>
   baef2:	e712      	b.n	bad1a <__aeabi_dmul+0x24a>

000baef4 <__gedf2>:
   baef4:	f04f 3cff 	mov.w	ip, #4294967295
   baef8:	e006      	b.n	baf08 <__cmpdf2+0x4>
   baefa:	bf00      	nop

000baefc <__ledf2>:
   baefc:	f04f 0c01 	mov.w	ip, #1
   baf00:	e002      	b.n	baf08 <__cmpdf2+0x4>
   baf02:	bf00      	nop

000baf04 <__cmpdf2>:
   baf04:	f04f 0c01 	mov.w	ip, #1
   baf08:	f84d cd04 	str.w	ip, [sp, #-4]!
   baf0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf18:	bf18      	it	ne
   baf1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   baf1e:	d01b      	beq.n	baf58 <__cmpdf2+0x54>
   baf20:	b001      	add	sp, #4
   baf22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   baf26:	bf0c      	ite	eq
   baf28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   baf2c:	ea91 0f03 	teqne	r1, r3
   baf30:	bf02      	ittt	eq
   baf32:	ea90 0f02 	teqeq	r0, r2
   baf36:	2000      	moveq	r0, #0
   baf38:	4770      	bxeq	lr
   baf3a:	f110 0f00 	cmn.w	r0, #0
   baf3e:	ea91 0f03 	teq	r1, r3
   baf42:	bf58      	it	pl
   baf44:	4299      	cmppl	r1, r3
   baf46:	bf08      	it	eq
   baf48:	4290      	cmpeq	r0, r2
   baf4a:	bf2c      	ite	cs
   baf4c:	17d8      	asrcs	r0, r3, #31
   baf4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   baf52:	f040 0001 	orr.w	r0, r0, #1
   baf56:	4770      	bx	lr
   baf58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf60:	d102      	bne.n	baf68 <__cmpdf2+0x64>
   baf62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   baf66:	d107      	bne.n	baf78 <__cmpdf2+0x74>
   baf68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf70:	d1d6      	bne.n	baf20 <__cmpdf2+0x1c>
   baf72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   baf76:	d0d3      	beq.n	baf20 <__cmpdf2+0x1c>
   baf78:	f85d 0b04 	ldr.w	r0, [sp], #4
   baf7c:	4770      	bx	lr
   baf7e:	bf00      	nop

000baf80 <__aeabi_cdrcmple>:
   baf80:	4684      	mov	ip, r0
   baf82:	4610      	mov	r0, r2
   baf84:	4662      	mov	r2, ip
   baf86:	468c      	mov	ip, r1
   baf88:	4619      	mov	r1, r3
   baf8a:	4663      	mov	r3, ip
   baf8c:	e000      	b.n	baf90 <__aeabi_cdcmpeq>
   baf8e:	bf00      	nop

000baf90 <__aeabi_cdcmpeq>:
   baf90:	b501      	push	{r0, lr}
   baf92:	f7ff ffb7 	bl	baf04 <__cmpdf2>
   baf96:	2800      	cmp	r0, #0
   baf98:	bf48      	it	mi
   baf9a:	f110 0f00 	cmnmi.w	r0, #0
   baf9e:	bd01      	pop	{r0, pc}

000bafa0 <__aeabi_dcmpeq>:
   bafa0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafa4:	f7ff fff4 	bl	baf90 <__aeabi_cdcmpeq>
   bafa8:	bf0c      	ite	eq
   bafaa:	2001      	moveq	r0, #1
   bafac:	2000      	movne	r0, #0
   bafae:	f85d fb08 	ldr.w	pc, [sp], #8
   bafb2:	bf00      	nop

000bafb4 <__aeabi_dcmplt>:
   bafb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafb8:	f7ff ffea 	bl	baf90 <__aeabi_cdcmpeq>
   bafbc:	bf34      	ite	cc
   bafbe:	2001      	movcc	r0, #1
   bafc0:	2000      	movcs	r0, #0
   bafc2:	f85d fb08 	ldr.w	pc, [sp], #8
   bafc6:	bf00      	nop

000bafc8 <__aeabi_dcmple>:
   bafc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafcc:	f7ff ffe0 	bl	baf90 <__aeabi_cdcmpeq>
   bafd0:	bf94      	ite	ls
   bafd2:	2001      	movls	r0, #1
   bafd4:	2000      	movhi	r0, #0
   bafd6:	f85d fb08 	ldr.w	pc, [sp], #8
   bafda:	bf00      	nop

000bafdc <__aeabi_dcmpge>:
   bafdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafe0:	f7ff ffce 	bl	baf80 <__aeabi_cdrcmple>
   bafe4:	bf94      	ite	ls
   bafe6:	2001      	movls	r0, #1
   bafe8:	2000      	movhi	r0, #0
   bafea:	f85d fb08 	ldr.w	pc, [sp], #8
   bafee:	bf00      	nop

000baff0 <__aeabi_dcmpgt>:
   baff0:	f84d ed08 	str.w	lr, [sp, #-8]!
   baff4:	f7ff ffc4 	bl	baf80 <__aeabi_cdrcmple>
   baff8:	bf34      	ite	cc
   baffa:	2001      	movcc	r0, #1
   baffc:	2000      	movcs	r0, #0
   baffe:	f85d fb08 	ldr.w	pc, [sp], #8
   bb002:	bf00      	nop

000bb004 <__aeabi_d2uiz>:
   bb004:	004a      	lsls	r2, r1, #1
   bb006:	d211      	bcs.n	bb02c <__aeabi_d2uiz+0x28>
   bb008:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb00c:	d211      	bcs.n	bb032 <__aeabi_d2uiz+0x2e>
   bb00e:	d50d      	bpl.n	bb02c <__aeabi_d2uiz+0x28>
   bb010:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb014:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb018:	d40e      	bmi.n	bb038 <__aeabi_d2uiz+0x34>
   bb01a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb01e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb022:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb026:	fa23 f002 	lsr.w	r0, r3, r2
   bb02a:	4770      	bx	lr
   bb02c:	f04f 0000 	mov.w	r0, #0
   bb030:	4770      	bx	lr
   bb032:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb036:	d102      	bne.n	bb03e <__aeabi_d2uiz+0x3a>
   bb038:	f04f 30ff 	mov.w	r0, #4294967295
   bb03c:	4770      	bx	lr
   bb03e:	f04f 0000 	mov.w	r0, #0
   bb042:	4770      	bx	lr

000bb044 <__aeabi_f2lz>:
   bb044:	ee07 0a90 	vmov	s15, r0
   bb048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb050:	d401      	bmi.n	bb056 <__aeabi_f2lz+0x12>
   bb052:	f000 b80b 	b.w	bb06c <__aeabi_f2ulz>
   bb056:	eef1 7a67 	vneg.f32	s15, s15
   bb05a:	b508      	push	{r3, lr}
   bb05c:	ee17 0a90 	vmov	r0, s15
   bb060:	f000 f804 	bl	bb06c <__aeabi_f2ulz>
   bb064:	4240      	negs	r0, r0
   bb066:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb06a:	bd08      	pop	{r3, pc}

000bb06c <__aeabi_f2ulz>:
   bb06c:	b5d0      	push	{r4, r6, r7, lr}
   bb06e:	f7ff fcd7 	bl	baa20 <__aeabi_f2d>
   bb072:	4b0c      	ldr	r3, [pc, #48]	; (bb0a4 <__aeabi_f2ulz+0x38>)
   bb074:	2200      	movs	r2, #0
   bb076:	4606      	mov	r6, r0
   bb078:	460f      	mov	r7, r1
   bb07a:	f7ff fd29 	bl	baad0 <__aeabi_dmul>
   bb07e:	f7ff ffc1 	bl	bb004 <__aeabi_d2uiz>
   bb082:	4604      	mov	r4, r0
   bb084:	f7ff fcaa 	bl	ba9dc <__aeabi_ui2d>
   bb088:	4b07      	ldr	r3, [pc, #28]	; (bb0a8 <__aeabi_f2ulz+0x3c>)
   bb08a:	2200      	movs	r2, #0
   bb08c:	f7ff fd20 	bl	baad0 <__aeabi_dmul>
   bb090:	4602      	mov	r2, r0
   bb092:	460b      	mov	r3, r1
   bb094:	4630      	mov	r0, r6
   bb096:	4639      	mov	r1, r7
   bb098:	f7ff fb62 	bl	ba760 <__aeabi_dsub>
   bb09c:	f7ff ffb2 	bl	bb004 <__aeabi_d2uiz>
   bb0a0:	4621      	mov	r1, r4
   bb0a2:	bdd0      	pop	{r4, r6, r7, pc}
   bb0a4:	3df00000 	.word	0x3df00000
   bb0a8:	41f00000 	.word	0x41f00000

000bb0ac <__aeabi_d2ulz>:
   bb0ac:	b5d0      	push	{r4, r6, r7, lr}
   bb0ae:	4b0c      	ldr	r3, [pc, #48]	; (bb0e0 <__aeabi_d2ulz+0x34>)
   bb0b0:	2200      	movs	r2, #0
   bb0b2:	4606      	mov	r6, r0
   bb0b4:	460f      	mov	r7, r1
   bb0b6:	f7ff fd0b 	bl	baad0 <__aeabi_dmul>
   bb0ba:	f7ff ffa3 	bl	bb004 <__aeabi_d2uiz>
   bb0be:	4604      	mov	r4, r0
   bb0c0:	f7ff fc8c 	bl	ba9dc <__aeabi_ui2d>
   bb0c4:	4b07      	ldr	r3, [pc, #28]	; (bb0e4 <__aeabi_d2ulz+0x38>)
   bb0c6:	2200      	movs	r2, #0
   bb0c8:	f7ff fd02 	bl	baad0 <__aeabi_dmul>
   bb0cc:	4602      	mov	r2, r0
   bb0ce:	460b      	mov	r3, r1
   bb0d0:	4630      	mov	r0, r6
   bb0d2:	4639      	mov	r1, r7
   bb0d4:	f7ff fb44 	bl	ba760 <__aeabi_dsub>
   bb0d8:	f7ff ff94 	bl	bb004 <__aeabi_d2uiz>
   bb0dc:	4621      	mov	r1, r4
   bb0de:	bdd0      	pop	{r4, r6, r7, pc}
   bb0e0:	3df00000 	.word	0x3df00000
   bb0e4:	41f00000 	.word	0x41f00000

000bb0e8 <atexit>:
   bb0e8:	2300      	movs	r3, #0
   bb0ea:	4601      	mov	r1, r0
   bb0ec:	461a      	mov	r2, r3
   bb0ee:	4618      	mov	r0, r3
   bb0f0:	f001 b81c 	b.w	bc12c <__register_exitproc>

000bb0f4 <atof>:
   bb0f4:	2100      	movs	r1, #0
   bb0f6:	f000 bf25 	b.w	bbf44 <strtod>

000bb0fa <atoi>:
   bb0fa:	220a      	movs	r2, #10
   bb0fc:	2100      	movs	r1, #0
   bb0fe:	f001 b80b 	b.w	bc118 <strtol>

000bb102 <ldiv>:
   bb102:	2900      	cmp	r1, #0
   bb104:	b510      	push	{r4, lr}
   bb106:	fb91 f4f2 	sdiv	r4, r1, r2
   bb10a:	fb02 1314 	mls	r3, r2, r4, r1
   bb10e:	db06      	blt.n	bb11e <ldiv+0x1c>
   bb110:	2b00      	cmp	r3, #0
   bb112:	da01      	bge.n	bb118 <ldiv+0x16>
   bb114:	3401      	adds	r4, #1
   bb116:	1a9b      	subs	r3, r3, r2
   bb118:	e9c0 4300 	strd	r4, r3, [r0]
   bb11c:	bd10      	pop	{r4, pc}
   bb11e:	2b00      	cmp	r3, #0
   bb120:	bfc4      	itt	gt
   bb122:	f104 34ff 	addgt.w	r4, r4, #4294967295
   bb126:	189b      	addgt	r3, r3, r2
   bb128:	e7f6      	b.n	bb118 <ldiv+0x16>

000bb12a <memcmp>:
   bb12a:	b510      	push	{r4, lr}
   bb12c:	3901      	subs	r1, #1
   bb12e:	4402      	add	r2, r0
   bb130:	4290      	cmp	r0, r2
   bb132:	d101      	bne.n	bb138 <memcmp+0xe>
   bb134:	2000      	movs	r0, #0
   bb136:	e005      	b.n	bb144 <memcmp+0x1a>
   bb138:	7803      	ldrb	r3, [r0, #0]
   bb13a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb13e:	42a3      	cmp	r3, r4
   bb140:	d001      	beq.n	bb146 <memcmp+0x1c>
   bb142:	1b18      	subs	r0, r3, r4
   bb144:	bd10      	pop	{r4, pc}
   bb146:	3001      	adds	r0, #1
   bb148:	e7f2      	b.n	bb130 <memcmp+0x6>

000bb14a <memcpy>:
   bb14a:	440a      	add	r2, r1
   bb14c:	4291      	cmp	r1, r2
   bb14e:	f100 33ff 	add.w	r3, r0, #4294967295
   bb152:	d100      	bne.n	bb156 <memcpy+0xc>
   bb154:	4770      	bx	lr
   bb156:	b510      	push	{r4, lr}
   bb158:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb15c:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb160:	4291      	cmp	r1, r2
   bb162:	d1f9      	bne.n	bb158 <memcpy+0xe>
   bb164:	bd10      	pop	{r4, pc}

000bb166 <memmove>:
   bb166:	4288      	cmp	r0, r1
   bb168:	b510      	push	{r4, lr}
   bb16a:	eb01 0402 	add.w	r4, r1, r2
   bb16e:	d902      	bls.n	bb176 <memmove+0x10>
   bb170:	4284      	cmp	r4, r0
   bb172:	4623      	mov	r3, r4
   bb174:	d807      	bhi.n	bb186 <memmove+0x20>
   bb176:	1e43      	subs	r3, r0, #1
   bb178:	42a1      	cmp	r1, r4
   bb17a:	d008      	beq.n	bb18e <memmove+0x28>
   bb17c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb180:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb184:	e7f8      	b.n	bb178 <memmove+0x12>
   bb186:	4402      	add	r2, r0
   bb188:	4601      	mov	r1, r0
   bb18a:	428a      	cmp	r2, r1
   bb18c:	d100      	bne.n	bb190 <memmove+0x2a>
   bb18e:	bd10      	pop	{r4, pc}
   bb190:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb194:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb198:	e7f7      	b.n	bb18a <memmove+0x24>

000bb19a <memset>:
   bb19a:	4402      	add	r2, r0
   bb19c:	4603      	mov	r3, r0
   bb19e:	4293      	cmp	r3, r2
   bb1a0:	d100      	bne.n	bb1a4 <memset+0xa>
   bb1a2:	4770      	bx	lr
   bb1a4:	f803 1b01 	strb.w	r1, [r3], #1
   bb1a8:	e7f9      	b.n	bb19e <memset+0x4>
	...

000bb1ac <srand>:
   bb1ac:	b538      	push	{r3, r4, r5, lr}
   bb1ae:	4b10      	ldr	r3, [pc, #64]	; (bb1f0 <srand+0x44>)
   bb1b0:	681d      	ldr	r5, [r3, #0]
   bb1b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb1b4:	4604      	mov	r4, r0
   bb1b6:	b9b3      	cbnz	r3, bb1e6 <srand+0x3a>
   bb1b8:	2018      	movs	r0, #24
   bb1ba:	f7fb fe2f 	bl	b6e1c <malloc>
   bb1be:	4602      	mov	r2, r0
   bb1c0:	63a8      	str	r0, [r5, #56]	; 0x38
   bb1c2:	b920      	cbnz	r0, bb1ce <srand+0x22>
   bb1c4:	4b0b      	ldr	r3, [pc, #44]	; (bb1f4 <srand+0x48>)
   bb1c6:	480c      	ldr	r0, [pc, #48]	; (bb1f8 <srand+0x4c>)
   bb1c8:	2142      	movs	r1, #66	; 0x42
   bb1ca:	f7fb fe6f 	bl	b6eac <__assert_func>
   bb1ce:	490b      	ldr	r1, [pc, #44]	; (bb1fc <srand+0x50>)
   bb1d0:	4b0b      	ldr	r3, [pc, #44]	; (bb200 <srand+0x54>)
   bb1d2:	e9c0 1300 	strd	r1, r3, [r0]
   bb1d6:	4b0b      	ldr	r3, [pc, #44]	; (bb204 <srand+0x58>)
   bb1d8:	6083      	str	r3, [r0, #8]
   bb1da:	230b      	movs	r3, #11
   bb1dc:	8183      	strh	r3, [r0, #12]
   bb1de:	2100      	movs	r1, #0
   bb1e0:	2001      	movs	r0, #1
   bb1e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb1e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb1e8:	2200      	movs	r2, #0
   bb1ea:	611c      	str	r4, [r3, #16]
   bb1ec:	615a      	str	r2, [r3, #20]
   bb1ee:	bd38      	pop	{r3, r4, r5, pc}
   bb1f0:	2003d8c4 	.word	0x2003d8c4
   bb1f4:	000bdee9 	.word	0x000bdee9
   bb1f8:	000bdf00 	.word	0x000bdf00
   bb1fc:	abcd330e 	.word	0xabcd330e
   bb200:	e66d1234 	.word	0xe66d1234
   bb204:	0005deec 	.word	0x0005deec

000bb208 <strcat>:
   bb208:	b510      	push	{r4, lr}
   bb20a:	4602      	mov	r2, r0
   bb20c:	7814      	ldrb	r4, [r2, #0]
   bb20e:	4613      	mov	r3, r2
   bb210:	3201      	adds	r2, #1
   bb212:	2c00      	cmp	r4, #0
   bb214:	d1fa      	bne.n	bb20c <strcat+0x4>
   bb216:	3b01      	subs	r3, #1
   bb218:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb21c:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb220:	2a00      	cmp	r2, #0
   bb222:	d1f9      	bne.n	bb218 <strcat+0x10>
   bb224:	bd10      	pop	{r4, pc}

000bb226 <strcmp>:
   bb226:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb22a:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb22e:	2a01      	cmp	r2, #1
   bb230:	bf28      	it	cs
   bb232:	429a      	cmpcs	r2, r3
   bb234:	d0f7      	beq.n	bb226 <strcmp>
   bb236:	1ad0      	subs	r0, r2, r3
   bb238:	4770      	bx	lr

000bb23a <strcpy>:
   bb23a:	4603      	mov	r3, r0
   bb23c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb240:	f803 2b01 	strb.w	r2, [r3], #1
   bb244:	2a00      	cmp	r2, #0
   bb246:	d1f9      	bne.n	bb23c <strcpy+0x2>
   bb248:	4770      	bx	lr
	...

000bb24c <strdup>:
   bb24c:	4b02      	ldr	r3, [pc, #8]	; (bb258 <strdup+0xc>)
   bb24e:	4601      	mov	r1, r0
   bb250:	6818      	ldr	r0, [r3, #0]
   bb252:	f000 b803 	b.w	bb25c <_strdup_r>
   bb256:	bf00      	nop
   bb258:	2003d8c4 	.word	0x2003d8c4

000bb25c <_strdup_r>:
   bb25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb25e:	4604      	mov	r4, r0
   bb260:	4608      	mov	r0, r1
   bb262:	460d      	mov	r5, r1
   bb264:	f000 f80f 	bl	bb286 <strlen>
   bb268:	1c42      	adds	r2, r0, #1
   bb26a:	4611      	mov	r1, r2
   bb26c:	4620      	mov	r0, r4
   bb26e:	9201      	str	r2, [sp, #4]
   bb270:	f7fb fe0c 	bl	b6e8c <_malloc_r>
   bb274:	4604      	mov	r4, r0
   bb276:	b118      	cbz	r0, bb280 <_strdup_r+0x24>
   bb278:	9a01      	ldr	r2, [sp, #4]
   bb27a:	4629      	mov	r1, r5
   bb27c:	f7ff ff65 	bl	bb14a <memcpy>
   bb280:	4620      	mov	r0, r4
   bb282:	b003      	add	sp, #12
   bb284:	bd30      	pop	{r4, r5, pc}

000bb286 <strlen>:
   bb286:	4603      	mov	r3, r0
   bb288:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb28c:	2a00      	cmp	r2, #0
   bb28e:	d1fb      	bne.n	bb288 <strlen+0x2>
   bb290:	1a18      	subs	r0, r3, r0
   bb292:	3801      	subs	r0, #1
   bb294:	4770      	bx	lr

000bb296 <strncmp>:
   bb296:	b510      	push	{r4, lr}
   bb298:	b17a      	cbz	r2, bb2ba <strncmp+0x24>
   bb29a:	4603      	mov	r3, r0
   bb29c:	3901      	subs	r1, #1
   bb29e:	1884      	adds	r4, r0, r2
   bb2a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb2a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb2a8:	4290      	cmp	r0, r2
   bb2aa:	d101      	bne.n	bb2b0 <strncmp+0x1a>
   bb2ac:	42a3      	cmp	r3, r4
   bb2ae:	d101      	bne.n	bb2b4 <strncmp+0x1e>
   bb2b0:	1a80      	subs	r0, r0, r2
   bb2b2:	bd10      	pop	{r4, pc}
   bb2b4:	2800      	cmp	r0, #0
   bb2b6:	d1f3      	bne.n	bb2a0 <strncmp+0xa>
   bb2b8:	e7fa      	b.n	bb2b0 <strncmp+0x1a>
   bb2ba:	4610      	mov	r0, r2
   bb2bc:	e7f9      	b.n	bb2b2 <strncmp+0x1c>

000bb2be <strncpy>:
   bb2be:	b510      	push	{r4, lr}
   bb2c0:	3901      	subs	r1, #1
   bb2c2:	4603      	mov	r3, r0
   bb2c4:	b132      	cbz	r2, bb2d4 <strncpy+0x16>
   bb2c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb2ca:	f803 4b01 	strb.w	r4, [r3], #1
   bb2ce:	3a01      	subs	r2, #1
   bb2d0:	2c00      	cmp	r4, #0
   bb2d2:	d1f7      	bne.n	bb2c4 <strncpy+0x6>
   bb2d4:	441a      	add	r2, r3
   bb2d6:	2100      	movs	r1, #0
   bb2d8:	4293      	cmp	r3, r2
   bb2da:	d100      	bne.n	bb2de <strncpy+0x20>
   bb2dc:	bd10      	pop	{r4, pc}
   bb2de:	f803 1b01 	strb.w	r1, [r3], #1
   bb2e2:	e7f9      	b.n	bb2d8 <strncpy+0x1a>

000bb2e4 <strnlen>:
   bb2e4:	b510      	push	{r4, lr}
   bb2e6:	4602      	mov	r2, r0
   bb2e8:	4401      	add	r1, r0
   bb2ea:	428a      	cmp	r2, r1
   bb2ec:	4613      	mov	r3, r2
   bb2ee:	d003      	beq.n	bb2f8 <strnlen+0x14>
   bb2f0:	781c      	ldrb	r4, [r3, #0]
   bb2f2:	3201      	adds	r2, #1
   bb2f4:	2c00      	cmp	r4, #0
   bb2f6:	d1f8      	bne.n	bb2ea <strnlen+0x6>
   bb2f8:	1a18      	subs	r0, r3, r0
   bb2fa:	bd10      	pop	{r4, pc}

000bb2fc <sulp>:
   bb2fc:	b570      	push	{r4, r5, r6, lr}
   bb2fe:	4604      	mov	r4, r0
   bb300:	460d      	mov	r5, r1
   bb302:	ec45 4b10 	vmov	d0, r4, r5
   bb306:	4616      	mov	r6, r2
   bb308:	f001 fe6a 	bl	bcfe0 <__ulp>
   bb30c:	ec51 0b10 	vmov	r0, r1, d0
   bb310:	b17e      	cbz	r6, bb332 <sulp+0x36>
   bb312:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb316:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb31a:	2b00      	cmp	r3, #0
   bb31c:	dd09      	ble.n	bb332 <sulp+0x36>
   bb31e:	051b      	lsls	r3, r3, #20
   bb320:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb324:	2400      	movs	r4, #0
   bb326:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb32a:	4622      	mov	r2, r4
   bb32c:	462b      	mov	r3, r5
   bb32e:	f7ff fbcf 	bl	baad0 <__aeabi_dmul>
   bb332:	bd70      	pop	{r4, r5, r6, pc}
   bb334:	0000      	movs	r0, r0
	...

000bb338 <_strtod_l>:
   bb338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb33c:	ed2d 8b02 	vpush	{d8}
   bb340:	b09d      	sub	sp, #116	; 0x74
   bb342:	461f      	mov	r7, r3
   bb344:	2300      	movs	r3, #0
   bb346:	9318      	str	r3, [sp, #96]	; 0x60
   bb348:	4ba2      	ldr	r3, [pc, #648]	; (bb5d4 <_strtod_l+0x29c>)
   bb34a:	9213      	str	r2, [sp, #76]	; 0x4c
   bb34c:	681b      	ldr	r3, [r3, #0]
   bb34e:	9305      	str	r3, [sp, #20]
   bb350:	4604      	mov	r4, r0
   bb352:	4618      	mov	r0, r3
   bb354:	4688      	mov	r8, r1
   bb356:	f7ff ff96 	bl	bb286 <strlen>
   bb35a:	f04f 0a00 	mov.w	sl, #0
   bb35e:	4605      	mov	r5, r0
   bb360:	f04f 0b00 	mov.w	fp, #0
   bb364:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb36a:	781a      	ldrb	r2, [r3, #0]
   bb36c:	2a2b      	cmp	r2, #43	; 0x2b
   bb36e:	d04e      	beq.n	bb40e <_strtod_l+0xd6>
   bb370:	d83b      	bhi.n	bb3ea <_strtod_l+0xb2>
   bb372:	2a0d      	cmp	r2, #13
   bb374:	d834      	bhi.n	bb3e0 <_strtod_l+0xa8>
   bb376:	2a08      	cmp	r2, #8
   bb378:	d834      	bhi.n	bb3e4 <_strtod_l+0xac>
   bb37a:	2a00      	cmp	r2, #0
   bb37c:	d03e      	beq.n	bb3fc <_strtod_l+0xc4>
   bb37e:	2300      	movs	r3, #0
   bb380:	930a      	str	r3, [sp, #40]	; 0x28
   bb382:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb384:	7833      	ldrb	r3, [r6, #0]
   bb386:	2b30      	cmp	r3, #48	; 0x30
   bb388:	f040 80b0 	bne.w	bb4ec <_strtod_l+0x1b4>
   bb38c:	7873      	ldrb	r3, [r6, #1]
   bb38e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb392:	2b58      	cmp	r3, #88	; 0x58
   bb394:	d168      	bne.n	bb468 <_strtod_l+0x130>
   bb396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb398:	9301      	str	r3, [sp, #4]
   bb39a:	ab18      	add	r3, sp, #96	; 0x60
   bb39c:	9702      	str	r7, [sp, #8]
   bb39e:	9300      	str	r3, [sp, #0]
   bb3a0:	4a8d      	ldr	r2, [pc, #564]	; (bb5d8 <_strtod_l+0x2a0>)
   bb3a2:	ab19      	add	r3, sp, #100	; 0x64
   bb3a4:	a917      	add	r1, sp, #92	; 0x5c
   bb3a6:	4620      	mov	r0, r4
   bb3a8:	f000 ff8a 	bl	bc2c0 <__gethex>
   bb3ac:	f010 0707 	ands.w	r7, r0, #7
   bb3b0:	4605      	mov	r5, r0
   bb3b2:	d005      	beq.n	bb3c0 <_strtod_l+0x88>
   bb3b4:	2f06      	cmp	r7, #6
   bb3b6:	d12c      	bne.n	bb412 <_strtod_l+0xda>
   bb3b8:	3601      	adds	r6, #1
   bb3ba:	2300      	movs	r3, #0
   bb3bc:	9617      	str	r6, [sp, #92]	; 0x5c
   bb3be:	930a      	str	r3, [sp, #40]	; 0x28
   bb3c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb3c2:	2b00      	cmp	r3, #0
   bb3c4:	f040 8590 	bne.w	bbee8 <_strtod_l+0xbb0>
   bb3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb3ca:	b1eb      	cbz	r3, bb408 <_strtod_l+0xd0>
   bb3cc:	4652      	mov	r2, sl
   bb3ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb3d2:	ec43 2b10 	vmov	d0, r2, r3
   bb3d6:	b01d      	add	sp, #116	; 0x74
   bb3d8:	ecbd 8b02 	vpop	{d8}
   bb3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb3e0:	2a20      	cmp	r2, #32
   bb3e2:	d1cc      	bne.n	bb37e <_strtod_l+0x46>
   bb3e4:	3301      	adds	r3, #1
   bb3e6:	9317      	str	r3, [sp, #92]	; 0x5c
   bb3e8:	e7be      	b.n	bb368 <_strtod_l+0x30>
   bb3ea:	2a2d      	cmp	r2, #45	; 0x2d
   bb3ec:	d1c7      	bne.n	bb37e <_strtod_l+0x46>
   bb3ee:	2201      	movs	r2, #1
   bb3f0:	920a      	str	r2, [sp, #40]	; 0x28
   bb3f2:	1c5a      	adds	r2, r3, #1
   bb3f4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb3f6:	785b      	ldrb	r3, [r3, #1]
   bb3f8:	2b00      	cmp	r3, #0
   bb3fa:	d1c2      	bne.n	bb382 <_strtod_l+0x4a>
   bb3fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb3fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb402:	2b00      	cmp	r3, #0
   bb404:	f040 856e 	bne.w	bbee4 <_strtod_l+0xbac>
   bb408:	4652      	mov	r2, sl
   bb40a:	465b      	mov	r3, fp
   bb40c:	e7e1      	b.n	bb3d2 <_strtod_l+0x9a>
   bb40e:	2200      	movs	r2, #0
   bb410:	e7ee      	b.n	bb3f0 <_strtod_l+0xb8>
   bb412:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb414:	b13a      	cbz	r2, bb426 <_strtod_l+0xee>
   bb416:	2135      	movs	r1, #53	; 0x35
   bb418:	a81a      	add	r0, sp, #104	; 0x68
   bb41a:	f001 feec 	bl	bd1f6 <__copybits>
   bb41e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb420:	4620      	mov	r0, r4
   bb422:	f001 faab 	bl	bc97c <_Bfree>
   bb426:	3f01      	subs	r7, #1
   bb428:	2f04      	cmp	r7, #4
   bb42a:	d806      	bhi.n	bb43a <_strtod_l+0x102>
   bb42c:	e8df f007 	tbb	[pc, r7]
   bb430:	1714030a 	.word	0x1714030a
   bb434:	0a          	.byte	0x0a
   bb435:	00          	.byte	0x00
   bb436:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb43a:	0728      	lsls	r0, r5, #28
   bb43c:	d5c0      	bpl.n	bb3c0 <_strtod_l+0x88>
   bb43e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb442:	e7bd      	b.n	bb3c0 <_strtod_l+0x88>
   bb444:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb448:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb44a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb44e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb452:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb456:	e7f0      	b.n	bb43a <_strtod_l+0x102>
   bb458:	f8df b180 	ldr.w	fp, [pc, #384]	; bb5dc <_strtod_l+0x2a4>
   bb45c:	e7ed      	b.n	bb43a <_strtod_l+0x102>
   bb45e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb462:	f04f 3aff 	mov.w	sl, #4294967295
   bb466:	e7e8      	b.n	bb43a <_strtod_l+0x102>
   bb468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb46a:	1c5a      	adds	r2, r3, #1
   bb46c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb46e:	785b      	ldrb	r3, [r3, #1]
   bb470:	2b30      	cmp	r3, #48	; 0x30
   bb472:	d0f9      	beq.n	bb468 <_strtod_l+0x130>
   bb474:	2b00      	cmp	r3, #0
   bb476:	d0a3      	beq.n	bb3c0 <_strtod_l+0x88>
   bb478:	2301      	movs	r3, #1
   bb47a:	f04f 0900 	mov.w	r9, #0
   bb47e:	9304      	str	r3, [sp, #16]
   bb480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb482:	9308      	str	r3, [sp, #32]
   bb484:	f8cd 901c 	str.w	r9, [sp, #28]
   bb488:	464f      	mov	r7, r9
   bb48a:	220a      	movs	r2, #10
   bb48c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb48e:	7806      	ldrb	r6, [r0, #0]
   bb490:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb494:	b2d9      	uxtb	r1, r3
   bb496:	2909      	cmp	r1, #9
   bb498:	d92a      	bls.n	bb4f0 <_strtod_l+0x1b8>
   bb49a:	9905      	ldr	r1, [sp, #20]
   bb49c:	462a      	mov	r2, r5
   bb49e:	f7ff fefa 	bl	bb296 <strncmp>
   bb4a2:	b398      	cbz	r0, bb50c <_strtod_l+0x1d4>
   bb4a4:	2000      	movs	r0, #0
   bb4a6:	4632      	mov	r2, r6
   bb4a8:	463d      	mov	r5, r7
   bb4aa:	9005      	str	r0, [sp, #20]
   bb4ac:	4603      	mov	r3, r0
   bb4ae:	2a65      	cmp	r2, #101	; 0x65
   bb4b0:	d001      	beq.n	bb4b6 <_strtod_l+0x17e>
   bb4b2:	2a45      	cmp	r2, #69	; 0x45
   bb4b4:	d118      	bne.n	bb4e8 <_strtod_l+0x1b0>
   bb4b6:	b91d      	cbnz	r5, bb4c0 <_strtod_l+0x188>
   bb4b8:	9a04      	ldr	r2, [sp, #16]
   bb4ba:	4302      	orrs	r2, r0
   bb4bc:	d09e      	beq.n	bb3fc <_strtod_l+0xc4>
   bb4be:	2500      	movs	r5, #0
   bb4c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb4c4:	f108 0201 	add.w	r2, r8, #1
   bb4c8:	9217      	str	r2, [sp, #92]	; 0x5c
   bb4ca:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb4ce:	2a2b      	cmp	r2, #43	; 0x2b
   bb4d0:	d075      	beq.n	bb5be <_strtod_l+0x286>
   bb4d2:	2a2d      	cmp	r2, #45	; 0x2d
   bb4d4:	d07b      	beq.n	bb5ce <_strtod_l+0x296>
   bb4d6:	f04f 0c00 	mov.w	ip, #0
   bb4da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb4de:	2909      	cmp	r1, #9
   bb4e0:	f240 8082 	bls.w	bb5e8 <_strtod_l+0x2b0>
   bb4e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb4e8:	2600      	movs	r6, #0
   bb4ea:	e09d      	b.n	bb628 <_strtod_l+0x2f0>
   bb4ec:	2300      	movs	r3, #0
   bb4ee:	e7c4      	b.n	bb47a <_strtod_l+0x142>
   bb4f0:	2f08      	cmp	r7, #8
   bb4f2:	bfd8      	it	le
   bb4f4:	9907      	ldrle	r1, [sp, #28]
   bb4f6:	f100 0001 	add.w	r0, r0, #1
   bb4fa:	bfda      	itte	le
   bb4fc:	fb02 3301 	mlale	r3, r2, r1, r3
   bb500:	9307      	strle	r3, [sp, #28]
   bb502:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb506:	3701      	adds	r7, #1
   bb508:	9017      	str	r0, [sp, #92]	; 0x5c
   bb50a:	e7bf      	b.n	bb48c <_strtod_l+0x154>
   bb50c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb50e:	195a      	adds	r2, r3, r5
   bb510:	9217      	str	r2, [sp, #92]	; 0x5c
   bb512:	5d5a      	ldrb	r2, [r3, r5]
   bb514:	2f00      	cmp	r7, #0
   bb516:	d037      	beq.n	bb588 <_strtod_l+0x250>
   bb518:	9005      	str	r0, [sp, #20]
   bb51a:	463d      	mov	r5, r7
   bb51c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb520:	2b09      	cmp	r3, #9
   bb522:	d912      	bls.n	bb54a <_strtod_l+0x212>
   bb524:	2301      	movs	r3, #1
   bb526:	e7c2      	b.n	bb4ae <_strtod_l+0x176>
   bb528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb52a:	1c5a      	adds	r2, r3, #1
   bb52c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb52e:	785a      	ldrb	r2, [r3, #1]
   bb530:	3001      	adds	r0, #1
   bb532:	2a30      	cmp	r2, #48	; 0x30
   bb534:	d0f8      	beq.n	bb528 <_strtod_l+0x1f0>
   bb536:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb53a:	2b08      	cmp	r3, #8
   bb53c:	f200 84d9 	bhi.w	bbef2 <_strtod_l+0xbba>
   bb540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb542:	9005      	str	r0, [sp, #20]
   bb544:	2000      	movs	r0, #0
   bb546:	9308      	str	r3, [sp, #32]
   bb548:	4605      	mov	r5, r0
   bb54a:	3a30      	subs	r2, #48	; 0x30
   bb54c:	f100 0301 	add.w	r3, r0, #1
   bb550:	d014      	beq.n	bb57c <_strtod_l+0x244>
   bb552:	9905      	ldr	r1, [sp, #20]
   bb554:	4419      	add	r1, r3
   bb556:	9105      	str	r1, [sp, #20]
   bb558:	462b      	mov	r3, r5
   bb55a:	eb00 0e05 	add.w	lr, r0, r5
   bb55e:	210a      	movs	r1, #10
   bb560:	4573      	cmp	r3, lr
   bb562:	d113      	bne.n	bb58c <_strtod_l+0x254>
   bb564:	182b      	adds	r3, r5, r0
   bb566:	2b08      	cmp	r3, #8
   bb568:	f105 0501 	add.w	r5, r5, #1
   bb56c:	4405      	add	r5, r0
   bb56e:	dc1c      	bgt.n	bb5aa <_strtod_l+0x272>
   bb570:	9907      	ldr	r1, [sp, #28]
   bb572:	230a      	movs	r3, #10
   bb574:	fb03 2301 	mla	r3, r3, r1, r2
   bb578:	9307      	str	r3, [sp, #28]
   bb57a:	2300      	movs	r3, #0
   bb57c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb57e:	1c51      	adds	r1, r2, #1
   bb580:	9117      	str	r1, [sp, #92]	; 0x5c
   bb582:	7852      	ldrb	r2, [r2, #1]
   bb584:	4618      	mov	r0, r3
   bb586:	e7c9      	b.n	bb51c <_strtod_l+0x1e4>
   bb588:	4638      	mov	r0, r7
   bb58a:	e7d2      	b.n	bb532 <_strtod_l+0x1fa>
   bb58c:	2b08      	cmp	r3, #8
   bb58e:	dc04      	bgt.n	bb59a <_strtod_l+0x262>
   bb590:	9e07      	ldr	r6, [sp, #28]
   bb592:	434e      	muls	r6, r1
   bb594:	9607      	str	r6, [sp, #28]
   bb596:	3301      	adds	r3, #1
   bb598:	e7e2      	b.n	bb560 <_strtod_l+0x228>
   bb59a:	f103 0c01 	add.w	ip, r3, #1
   bb59e:	f1bc 0f10 	cmp.w	ip, #16
   bb5a2:	bfd8      	it	le
   bb5a4:	fb01 f909 	mulle.w	r9, r1, r9
   bb5a8:	e7f5      	b.n	bb596 <_strtod_l+0x25e>
   bb5aa:	2d10      	cmp	r5, #16
   bb5ac:	bfdc      	itt	le
   bb5ae:	230a      	movle	r3, #10
   bb5b0:	fb03 2909 	mlale	r9, r3, r9, r2
   bb5b4:	e7e1      	b.n	bb57a <_strtod_l+0x242>
   bb5b6:	2300      	movs	r3, #0
   bb5b8:	9305      	str	r3, [sp, #20]
   bb5ba:	2301      	movs	r3, #1
   bb5bc:	e77c      	b.n	bb4b8 <_strtod_l+0x180>
   bb5be:	f04f 0c00 	mov.w	ip, #0
   bb5c2:	f108 0202 	add.w	r2, r8, #2
   bb5c6:	9217      	str	r2, [sp, #92]	; 0x5c
   bb5c8:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb5cc:	e785      	b.n	bb4da <_strtod_l+0x1a2>
   bb5ce:	f04f 0c01 	mov.w	ip, #1
   bb5d2:	e7f6      	b.n	bb5c2 <_strtod_l+0x28a>
   bb5d4:	000be1f8 	.word	0x000be1f8
   bb5d8:	000bdf8c 	.word	0x000bdf8c
   bb5dc:	7ff00000 	.word	0x7ff00000
   bb5e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb5e2:	1c51      	adds	r1, r2, #1
   bb5e4:	9117      	str	r1, [sp, #92]	; 0x5c
   bb5e6:	7852      	ldrb	r2, [r2, #1]
   bb5e8:	2a30      	cmp	r2, #48	; 0x30
   bb5ea:	d0f9      	beq.n	bb5e0 <_strtod_l+0x2a8>
   bb5ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb5f0:	2908      	cmp	r1, #8
   bb5f2:	f63f af79 	bhi.w	bb4e8 <_strtod_l+0x1b0>
   bb5f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb5fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb5fc:	9206      	str	r2, [sp, #24]
   bb5fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb600:	1c51      	adds	r1, r2, #1
   bb602:	9117      	str	r1, [sp, #92]	; 0x5c
   bb604:	7852      	ldrb	r2, [r2, #1]
   bb606:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb60a:	2e09      	cmp	r6, #9
   bb60c:	d937      	bls.n	bb67e <_strtod_l+0x346>
   bb60e:	9e06      	ldr	r6, [sp, #24]
   bb610:	1b89      	subs	r1, r1, r6
   bb612:	2908      	cmp	r1, #8
   bb614:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb618:	dc02      	bgt.n	bb620 <_strtod_l+0x2e8>
   bb61a:	4576      	cmp	r6, lr
   bb61c:	bfa8      	it	ge
   bb61e:	4676      	movge	r6, lr
   bb620:	f1bc 0f00 	cmp.w	ip, #0
   bb624:	d000      	beq.n	bb628 <_strtod_l+0x2f0>
   bb626:	4276      	negs	r6, r6
   bb628:	2d00      	cmp	r5, #0
   bb62a:	d14d      	bne.n	bb6c8 <_strtod_l+0x390>
   bb62c:	9904      	ldr	r1, [sp, #16]
   bb62e:	4301      	orrs	r1, r0
   bb630:	f47f aec6 	bne.w	bb3c0 <_strtod_l+0x88>
   bb634:	2b00      	cmp	r3, #0
   bb636:	f47f aee1 	bne.w	bb3fc <_strtod_l+0xc4>
   bb63a:	2a69      	cmp	r2, #105	; 0x69
   bb63c:	d027      	beq.n	bb68e <_strtod_l+0x356>
   bb63e:	dc24      	bgt.n	bb68a <_strtod_l+0x352>
   bb640:	2a49      	cmp	r2, #73	; 0x49
   bb642:	d024      	beq.n	bb68e <_strtod_l+0x356>
   bb644:	2a4e      	cmp	r2, #78	; 0x4e
   bb646:	f47f aed9 	bne.w	bb3fc <_strtod_l+0xc4>
   bb64a:	499f      	ldr	r1, [pc, #636]	; (bb8c8 <_strtod_l+0x590>)
   bb64c:	a817      	add	r0, sp, #92	; 0x5c
   bb64e:	f001 f88f 	bl	bc770 <__match>
   bb652:	2800      	cmp	r0, #0
   bb654:	f43f aed2 	beq.w	bb3fc <_strtod_l+0xc4>
   bb658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb65a:	781b      	ldrb	r3, [r3, #0]
   bb65c:	2b28      	cmp	r3, #40	; 0x28
   bb65e:	d12d      	bne.n	bb6bc <_strtod_l+0x384>
   bb660:	499a      	ldr	r1, [pc, #616]	; (bb8cc <_strtod_l+0x594>)
   bb662:	aa1a      	add	r2, sp, #104	; 0x68
   bb664:	a817      	add	r0, sp, #92	; 0x5c
   bb666:	f001 f897 	bl	bc798 <__hexnan>
   bb66a:	2805      	cmp	r0, #5
   bb66c:	d126      	bne.n	bb6bc <_strtod_l+0x384>
   bb66e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb670:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb674:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb678:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb67c:	e6a0      	b.n	bb3c0 <_strtod_l+0x88>
   bb67e:	210a      	movs	r1, #10
   bb680:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb684:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb688:	e7b9      	b.n	bb5fe <_strtod_l+0x2c6>
   bb68a:	2a6e      	cmp	r2, #110	; 0x6e
   bb68c:	e7db      	b.n	bb646 <_strtod_l+0x30e>
   bb68e:	4990      	ldr	r1, [pc, #576]	; (bb8d0 <_strtod_l+0x598>)
   bb690:	a817      	add	r0, sp, #92	; 0x5c
   bb692:	f001 f86d 	bl	bc770 <__match>
   bb696:	2800      	cmp	r0, #0
   bb698:	f43f aeb0 	beq.w	bb3fc <_strtod_l+0xc4>
   bb69c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb69e:	498d      	ldr	r1, [pc, #564]	; (bb8d4 <_strtod_l+0x59c>)
   bb6a0:	3b01      	subs	r3, #1
   bb6a2:	a817      	add	r0, sp, #92	; 0x5c
   bb6a4:	9317      	str	r3, [sp, #92]	; 0x5c
   bb6a6:	f001 f863 	bl	bc770 <__match>
   bb6aa:	b910      	cbnz	r0, bb6b2 <_strtod_l+0x37a>
   bb6ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb6ae:	3301      	adds	r3, #1
   bb6b0:	9317      	str	r3, [sp, #92]	; 0x5c
   bb6b2:	f8df b230 	ldr.w	fp, [pc, #560]	; bb8e4 <_strtod_l+0x5ac>
   bb6b6:	f04f 0a00 	mov.w	sl, #0
   bb6ba:	e681      	b.n	bb3c0 <_strtod_l+0x88>
   bb6bc:	4886      	ldr	r0, [pc, #536]	; (bb8d8 <_strtod_l+0x5a0>)
   bb6be:	f001 fdef 	bl	bd2a0 <nan>
   bb6c2:	ec5b ab10 	vmov	sl, fp, d0
   bb6c6:	e67b      	b.n	bb3c0 <_strtod_l+0x88>
   bb6c8:	9b05      	ldr	r3, [sp, #20]
   bb6ca:	9807      	ldr	r0, [sp, #28]
   bb6cc:	1af3      	subs	r3, r6, r3
   bb6ce:	2f00      	cmp	r7, #0
   bb6d0:	bf08      	it	eq
   bb6d2:	462f      	moveq	r7, r5
   bb6d4:	2d10      	cmp	r5, #16
   bb6d6:	9306      	str	r3, [sp, #24]
   bb6d8:	46a8      	mov	r8, r5
   bb6da:	bfa8      	it	ge
   bb6dc:	f04f 0810 	movge.w	r8, #16
   bb6e0:	f7ff f97c 	bl	ba9dc <__aeabi_ui2d>
   bb6e4:	2d09      	cmp	r5, #9
   bb6e6:	4682      	mov	sl, r0
   bb6e8:	468b      	mov	fp, r1
   bb6ea:	dd13      	ble.n	bb714 <_strtod_l+0x3dc>
   bb6ec:	4b7b      	ldr	r3, [pc, #492]	; (bb8dc <_strtod_l+0x5a4>)
   bb6ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb6f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb6f6:	f7ff f9eb 	bl	baad0 <__aeabi_dmul>
   bb6fa:	4682      	mov	sl, r0
   bb6fc:	4648      	mov	r0, r9
   bb6fe:	468b      	mov	fp, r1
   bb700:	f7ff f96c 	bl	ba9dc <__aeabi_ui2d>
   bb704:	4602      	mov	r2, r0
   bb706:	460b      	mov	r3, r1
   bb708:	4650      	mov	r0, sl
   bb70a:	4659      	mov	r1, fp
   bb70c:	f7ff f82a 	bl	ba764 <__adddf3>
   bb710:	4682      	mov	sl, r0
   bb712:	468b      	mov	fp, r1
   bb714:	2d0f      	cmp	r5, #15
   bb716:	dc38      	bgt.n	bb78a <_strtod_l+0x452>
   bb718:	9b06      	ldr	r3, [sp, #24]
   bb71a:	2b00      	cmp	r3, #0
   bb71c:	f43f ae50 	beq.w	bb3c0 <_strtod_l+0x88>
   bb720:	dd24      	ble.n	bb76c <_strtod_l+0x434>
   bb722:	2b16      	cmp	r3, #22
   bb724:	dc0b      	bgt.n	bb73e <_strtod_l+0x406>
   bb726:	496d      	ldr	r1, [pc, #436]	; (bb8dc <_strtod_l+0x5a4>)
   bb728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb72c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb730:	4652      	mov	r2, sl
   bb732:	465b      	mov	r3, fp
   bb734:	f7ff f9cc 	bl	baad0 <__aeabi_dmul>
   bb738:	4682      	mov	sl, r0
   bb73a:	468b      	mov	fp, r1
   bb73c:	e640      	b.n	bb3c0 <_strtod_l+0x88>
   bb73e:	9a06      	ldr	r2, [sp, #24]
   bb740:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb744:	4293      	cmp	r3, r2
   bb746:	db20      	blt.n	bb78a <_strtod_l+0x452>
   bb748:	4c64      	ldr	r4, [pc, #400]	; (bb8dc <_strtod_l+0x5a4>)
   bb74a:	f1c5 050f 	rsb	r5, r5, #15
   bb74e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb752:	4652      	mov	r2, sl
   bb754:	465b      	mov	r3, fp
   bb756:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb75a:	f7ff f9b9 	bl	baad0 <__aeabi_dmul>
   bb75e:	9b06      	ldr	r3, [sp, #24]
   bb760:	1b5d      	subs	r5, r3, r5
   bb762:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb766:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb76a:	e7e3      	b.n	bb734 <_strtod_l+0x3fc>
   bb76c:	9b06      	ldr	r3, [sp, #24]
   bb76e:	3316      	adds	r3, #22
   bb770:	db0b      	blt.n	bb78a <_strtod_l+0x452>
   bb772:	9b05      	ldr	r3, [sp, #20]
   bb774:	1b9e      	subs	r6, r3, r6
   bb776:	4b59      	ldr	r3, [pc, #356]	; (bb8dc <_strtod_l+0x5a4>)
   bb778:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb77c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb780:	4650      	mov	r0, sl
   bb782:	4659      	mov	r1, fp
   bb784:	f7ff face 	bl	bad24 <__aeabi_ddiv>
   bb788:	e7d6      	b.n	bb738 <_strtod_l+0x400>
   bb78a:	9b06      	ldr	r3, [sp, #24]
   bb78c:	eba5 0808 	sub.w	r8, r5, r8
   bb790:	4498      	add	r8, r3
   bb792:	f1b8 0f00 	cmp.w	r8, #0
   bb796:	dd74      	ble.n	bb882 <_strtod_l+0x54a>
   bb798:	f018 030f 	ands.w	r3, r8, #15
   bb79c:	d00a      	beq.n	bb7b4 <_strtod_l+0x47c>
   bb79e:	494f      	ldr	r1, [pc, #316]	; (bb8dc <_strtod_l+0x5a4>)
   bb7a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb7a4:	4652      	mov	r2, sl
   bb7a6:	465b      	mov	r3, fp
   bb7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb7ac:	f7ff f990 	bl	baad0 <__aeabi_dmul>
   bb7b0:	4682      	mov	sl, r0
   bb7b2:	468b      	mov	fp, r1
   bb7b4:	f038 080f 	bics.w	r8, r8, #15
   bb7b8:	d04f      	beq.n	bb85a <_strtod_l+0x522>
   bb7ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb7be:	dd22      	ble.n	bb806 <_strtod_l+0x4ce>
   bb7c0:	2500      	movs	r5, #0
   bb7c2:	462e      	mov	r6, r5
   bb7c4:	9507      	str	r5, [sp, #28]
   bb7c6:	9505      	str	r5, [sp, #20]
   bb7c8:	2322      	movs	r3, #34	; 0x22
   bb7ca:	f8df b118 	ldr.w	fp, [pc, #280]	; bb8e4 <_strtod_l+0x5ac>
   bb7ce:	6023      	str	r3, [r4, #0]
   bb7d0:	f04f 0a00 	mov.w	sl, #0
   bb7d4:	9b07      	ldr	r3, [sp, #28]
   bb7d6:	2b00      	cmp	r3, #0
   bb7d8:	f43f adf2 	beq.w	bb3c0 <_strtod_l+0x88>
   bb7dc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb7de:	4620      	mov	r0, r4
   bb7e0:	f001 f8cc 	bl	bc97c <_Bfree>
   bb7e4:	9905      	ldr	r1, [sp, #20]
   bb7e6:	4620      	mov	r0, r4
   bb7e8:	f001 f8c8 	bl	bc97c <_Bfree>
   bb7ec:	4631      	mov	r1, r6
   bb7ee:	4620      	mov	r0, r4
   bb7f0:	f001 f8c4 	bl	bc97c <_Bfree>
   bb7f4:	9907      	ldr	r1, [sp, #28]
   bb7f6:	4620      	mov	r0, r4
   bb7f8:	f001 f8c0 	bl	bc97c <_Bfree>
   bb7fc:	4629      	mov	r1, r5
   bb7fe:	4620      	mov	r0, r4
   bb800:	f001 f8bc 	bl	bc97c <_Bfree>
   bb804:	e5dc      	b.n	bb3c0 <_strtod_l+0x88>
   bb806:	4b36      	ldr	r3, [pc, #216]	; (bb8e0 <_strtod_l+0x5a8>)
   bb808:	9304      	str	r3, [sp, #16]
   bb80a:	2300      	movs	r3, #0
   bb80c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb810:	4650      	mov	r0, sl
   bb812:	4659      	mov	r1, fp
   bb814:	4699      	mov	r9, r3
   bb816:	f1b8 0f01 	cmp.w	r8, #1
   bb81a:	dc21      	bgt.n	bb860 <_strtod_l+0x528>
   bb81c:	b10b      	cbz	r3, bb822 <_strtod_l+0x4ea>
   bb81e:	4682      	mov	sl, r0
   bb820:	468b      	mov	fp, r1
   bb822:	4b2f      	ldr	r3, [pc, #188]	; (bb8e0 <_strtod_l+0x5a8>)
   bb824:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb828:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb82c:	4652      	mov	r2, sl
   bb82e:	465b      	mov	r3, fp
   bb830:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb834:	f7ff f94c 	bl	baad0 <__aeabi_dmul>
   bb838:	4b2a      	ldr	r3, [pc, #168]	; (bb8e4 <_strtod_l+0x5ac>)
   bb83a:	460a      	mov	r2, r1
   bb83c:	400b      	ands	r3, r1
   bb83e:	492a      	ldr	r1, [pc, #168]	; (bb8e8 <_strtod_l+0x5b0>)
   bb840:	428b      	cmp	r3, r1
   bb842:	4682      	mov	sl, r0
   bb844:	d8bc      	bhi.n	bb7c0 <_strtod_l+0x488>
   bb846:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb84a:	428b      	cmp	r3, r1
   bb84c:	bf86      	itte	hi
   bb84e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb8ec <_strtod_l+0x5b4>
   bb852:	f04f 3aff 	movhi.w	sl, #4294967295
   bb856:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb85a:	2300      	movs	r3, #0
   bb85c:	9304      	str	r3, [sp, #16]
   bb85e:	e084      	b.n	bb96a <_strtod_l+0x632>
   bb860:	f018 0f01 	tst.w	r8, #1
   bb864:	d005      	beq.n	bb872 <_strtod_l+0x53a>
   bb866:	9b04      	ldr	r3, [sp, #16]
   bb868:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb86c:	f7ff f930 	bl	baad0 <__aeabi_dmul>
   bb870:	2301      	movs	r3, #1
   bb872:	9a04      	ldr	r2, [sp, #16]
   bb874:	3208      	adds	r2, #8
   bb876:	f109 0901 	add.w	r9, r9, #1
   bb87a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb87e:	9204      	str	r2, [sp, #16]
   bb880:	e7c9      	b.n	bb816 <_strtod_l+0x4de>
   bb882:	d0ea      	beq.n	bb85a <_strtod_l+0x522>
   bb884:	f1c8 0800 	rsb	r8, r8, #0
   bb888:	f018 020f 	ands.w	r2, r8, #15
   bb88c:	d00a      	beq.n	bb8a4 <_strtod_l+0x56c>
   bb88e:	4b13      	ldr	r3, [pc, #76]	; (bb8dc <_strtod_l+0x5a4>)
   bb890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb894:	4650      	mov	r0, sl
   bb896:	4659      	mov	r1, fp
   bb898:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb89c:	f7ff fa42 	bl	bad24 <__aeabi_ddiv>
   bb8a0:	4682      	mov	sl, r0
   bb8a2:	468b      	mov	fp, r1
   bb8a4:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb8a8:	d0d7      	beq.n	bb85a <_strtod_l+0x522>
   bb8aa:	f1b8 0f1f 	cmp.w	r8, #31
   bb8ae:	dd1f      	ble.n	bb8f0 <_strtod_l+0x5b8>
   bb8b0:	2500      	movs	r5, #0
   bb8b2:	462e      	mov	r6, r5
   bb8b4:	9507      	str	r5, [sp, #28]
   bb8b6:	9505      	str	r5, [sp, #20]
   bb8b8:	2322      	movs	r3, #34	; 0x22
   bb8ba:	f04f 0a00 	mov.w	sl, #0
   bb8be:	f04f 0b00 	mov.w	fp, #0
   bb8c2:	6023      	str	r3, [r4, #0]
   bb8c4:	e786      	b.n	bb7d4 <_strtod_l+0x49c>
   bb8c6:	bf00      	nop
   bb8c8:	000bdf86 	.word	0x000bdf86
   bb8cc:	000bdfa0 	.word	0x000bdfa0
   bb8d0:	000bdf7d 	.word	0x000bdf7d
   bb8d4:	000bdf80 	.word	0x000bdf80
   bb8d8:	000bd795 	.word	0x000bd795
   bb8dc:	000be2b8 	.word	0x000be2b8
   bb8e0:	000be290 	.word	0x000be290
   bb8e4:	7ff00000 	.word	0x7ff00000
   bb8e8:	7ca00000 	.word	0x7ca00000
   bb8ec:	7fefffff 	.word	0x7fefffff
   bb8f0:	f018 0310 	ands.w	r3, r8, #16
   bb8f4:	bf18      	it	ne
   bb8f6:	236a      	movne	r3, #106	; 0x6a
   bb8f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbca8 <_strtod_l+0x970>
   bb8fc:	9304      	str	r3, [sp, #16]
   bb8fe:	4650      	mov	r0, sl
   bb900:	4659      	mov	r1, fp
   bb902:	2300      	movs	r3, #0
   bb904:	f018 0f01 	tst.w	r8, #1
   bb908:	d004      	beq.n	bb914 <_strtod_l+0x5dc>
   bb90a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb90e:	f7ff f8df 	bl	baad0 <__aeabi_dmul>
   bb912:	2301      	movs	r3, #1
   bb914:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb918:	f109 0908 	add.w	r9, r9, #8
   bb91c:	d1f2      	bne.n	bb904 <_strtod_l+0x5cc>
   bb91e:	b10b      	cbz	r3, bb924 <_strtod_l+0x5ec>
   bb920:	4682      	mov	sl, r0
   bb922:	468b      	mov	fp, r1
   bb924:	9b04      	ldr	r3, [sp, #16]
   bb926:	b1c3      	cbz	r3, bb95a <_strtod_l+0x622>
   bb928:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb92c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb930:	2b00      	cmp	r3, #0
   bb932:	4659      	mov	r1, fp
   bb934:	dd11      	ble.n	bb95a <_strtod_l+0x622>
   bb936:	2b1f      	cmp	r3, #31
   bb938:	f340 8124 	ble.w	bbb84 <_strtod_l+0x84c>
   bb93c:	2b34      	cmp	r3, #52	; 0x34
   bb93e:	bfde      	ittt	le
   bb940:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb944:	f04f 33ff 	movle.w	r3, #4294967295
   bb948:	fa03 f202 	lslle.w	r2, r3, r2
   bb94c:	f04f 0a00 	mov.w	sl, #0
   bb950:	bfcc      	ite	gt
   bb952:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb956:	ea02 0b01 	andle.w	fp, r2, r1
   bb95a:	2200      	movs	r2, #0
   bb95c:	2300      	movs	r3, #0
   bb95e:	4650      	mov	r0, sl
   bb960:	4659      	mov	r1, fp
   bb962:	f7ff fb1d 	bl	bafa0 <__aeabi_dcmpeq>
   bb966:	2800      	cmp	r0, #0
   bb968:	d1a2      	bne.n	bb8b0 <_strtod_l+0x578>
   bb96a:	9b07      	ldr	r3, [sp, #28]
   bb96c:	9300      	str	r3, [sp, #0]
   bb96e:	9908      	ldr	r1, [sp, #32]
   bb970:	462b      	mov	r3, r5
   bb972:	463a      	mov	r2, r7
   bb974:	4620      	mov	r0, r4
   bb976:	f001 f869 	bl	bca4c <__s2b>
   bb97a:	9007      	str	r0, [sp, #28]
   bb97c:	2800      	cmp	r0, #0
   bb97e:	f43f af1f 	beq.w	bb7c0 <_strtod_l+0x488>
   bb982:	9b05      	ldr	r3, [sp, #20]
   bb984:	1b9e      	subs	r6, r3, r6
   bb986:	9b06      	ldr	r3, [sp, #24]
   bb988:	2b00      	cmp	r3, #0
   bb98a:	bfb4      	ite	lt
   bb98c:	4633      	movlt	r3, r6
   bb98e:	2300      	movge	r3, #0
   bb990:	930c      	str	r3, [sp, #48]	; 0x30
   bb992:	9b06      	ldr	r3, [sp, #24]
   bb994:	2500      	movs	r5, #0
   bb996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb99a:	9312      	str	r3, [sp, #72]	; 0x48
   bb99c:	462e      	mov	r6, r5
   bb99e:	9b07      	ldr	r3, [sp, #28]
   bb9a0:	4620      	mov	r0, r4
   bb9a2:	6859      	ldr	r1, [r3, #4]
   bb9a4:	f000 ffaa 	bl	bc8fc <_Balloc>
   bb9a8:	9005      	str	r0, [sp, #20]
   bb9aa:	2800      	cmp	r0, #0
   bb9ac:	f43f af0c 	beq.w	bb7c8 <_strtod_l+0x490>
   bb9b0:	9b07      	ldr	r3, [sp, #28]
   bb9b2:	691a      	ldr	r2, [r3, #16]
   bb9b4:	3202      	adds	r2, #2
   bb9b6:	f103 010c 	add.w	r1, r3, #12
   bb9ba:	0092      	lsls	r2, r2, #2
   bb9bc:	300c      	adds	r0, #12
   bb9be:	f7ff fbc4 	bl	bb14a <memcpy>
   bb9c2:	ec4b ab10 	vmov	d0, sl, fp
   bb9c6:	aa1a      	add	r2, sp, #104	; 0x68
   bb9c8:	a919      	add	r1, sp, #100	; 0x64
   bb9ca:	4620      	mov	r0, r4
   bb9cc:	f001 fb84 	bl	bd0d8 <__d2b>
   bb9d0:	ec4b ab18 	vmov	d8, sl, fp
   bb9d4:	9018      	str	r0, [sp, #96]	; 0x60
   bb9d6:	2800      	cmp	r0, #0
   bb9d8:	f43f aef6 	beq.w	bb7c8 <_strtod_l+0x490>
   bb9dc:	2101      	movs	r1, #1
   bb9de:	4620      	mov	r0, r4
   bb9e0:	f001 f8ce 	bl	bcb80 <__i2b>
   bb9e4:	4606      	mov	r6, r0
   bb9e6:	2800      	cmp	r0, #0
   bb9e8:	f43f aeee 	beq.w	bb7c8 <_strtod_l+0x490>
   bb9ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb9ee:	9904      	ldr	r1, [sp, #16]
   bb9f0:	2b00      	cmp	r3, #0
   bb9f2:	bfab      	itete	ge
   bb9f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb9f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb9f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb9fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb9fe:	bfac      	ite	ge
   bba00:	eb03 0902 	addge.w	r9, r3, r2
   bba04:	1ad7      	sublt	r7, r2, r3
   bba06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bba08:	eba3 0801 	sub.w	r8, r3, r1
   bba0c:	4490      	add	r8, r2
   bba0e:	4ba1      	ldr	r3, [pc, #644]	; (bbc94 <_strtod_l+0x95c>)
   bba10:	f108 38ff 	add.w	r8, r8, #4294967295
   bba14:	4598      	cmp	r8, r3
   bba16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bba1a:	f280 80c7 	bge.w	bbbac <_strtod_l+0x874>
   bba1e:	eba3 0308 	sub.w	r3, r3, r8
   bba22:	2b1f      	cmp	r3, #31
   bba24:	eba2 0203 	sub.w	r2, r2, r3
   bba28:	f04f 0101 	mov.w	r1, #1
   bba2c:	f300 80b1 	bgt.w	bbb92 <_strtod_l+0x85a>
   bba30:	fa01 f303 	lsl.w	r3, r1, r3
   bba34:	930d      	str	r3, [sp, #52]	; 0x34
   bba36:	2300      	movs	r3, #0
   bba38:	9308      	str	r3, [sp, #32]
   bba3a:	eb09 0802 	add.w	r8, r9, r2
   bba3e:	9b04      	ldr	r3, [sp, #16]
   bba40:	45c1      	cmp	r9, r8
   bba42:	4417      	add	r7, r2
   bba44:	441f      	add	r7, r3
   bba46:	464b      	mov	r3, r9
   bba48:	bfa8      	it	ge
   bba4a:	4643      	movge	r3, r8
   bba4c:	42bb      	cmp	r3, r7
   bba4e:	bfa8      	it	ge
   bba50:	463b      	movge	r3, r7
   bba52:	2b00      	cmp	r3, #0
   bba54:	bfc2      	ittt	gt
   bba56:	eba8 0803 	subgt.w	r8, r8, r3
   bba5a:	1aff      	subgt	r7, r7, r3
   bba5c:	eba9 0903 	subgt.w	r9, r9, r3
   bba60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bba62:	2b00      	cmp	r3, #0
   bba64:	dd17      	ble.n	bba96 <_strtod_l+0x75e>
   bba66:	4631      	mov	r1, r6
   bba68:	461a      	mov	r2, r3
   bba6a:	4620      	mov	r0, r4
   bba6c:	f001 f948 	bl	bcd00 <__pow5mult>
   bba70:	4606      	mov	r6, r0
   bba72:	2800      	cmp	r0, #0
   bba74:	f43f aea8 	beq.w	bb7c8 <_strtod_l+0x490>
   bba78:	4601      	mov	r1, r0
   bba7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bba7c:	4620      	mov	r0, r4
   bba7e:	f001 f895 	bl	bcbac <__multiply>
   bba82:	900b      	str	r0, [sp, #44]	; 0x2c
   bba84:	2800      	cmp	r0, #0
   bba86:	f43f ae9f 	beq.w	bb7c8 <_strtod_l+0x490>
   bba8a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bba8c:	4620      	mov	r0, r4
   bba8e:	f000 ff75 	bl	bc97c <_Bfree>
   bba92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bba94:	9318      	str	r3, [sp, #96]	; 0x60
   bba96:	f1b8 0f00 	cmp.w	r8, #0
   bba9a:	f300 808c 	bgt.w	bbbb6 <_strtod_l+0x87e>
   bba9e:	9b06      	ldr	r3, [sp, #24]
   bbaa0:	2b00      	cmp	r3, #0
   bbaa2:	dd08      	ble.n	bbab6 <_strtod_l+0x77e>
   bbaa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbaa6:	9905      	ldr	r1, [sp, #20]
   bbaa8:	4620      	mov	r0, r4
   bbaaa:	f001 f929 	bl	bcd00 <__pow5mult>
   bbaae:	9005      	str	r0, [sp, #20]
   bbab0:	2800      	cmp	r0, #0
   bbab2:	f43f ae89 	beq.w	bb7c8 <_strtod_l+0x490>
   bbab6:	2f00      	cmp	r7, #0
   bbab8:	dd08      	ble.n	bbacc <_strtod_l+0x794>
   bbaba:	9905      	ldr	r1, [sp, #20]
   bbabc:	463a      	mov	r2, r7
   bbabe:	4620      	mov	r0, r4
   bbac0:	f001 f978 	bl	bcdb4 <__lshift>
   bbac4:	9005      	str	r0, [sp, #20]
   bbac6:	2800      	cmp	r0, #0
   bbac8:	f43f ae7e 	beq.w	bb7c8 <_strtod_l+0x490>
   bbacc:	f1b9 0f00 	cmp.w	r9, #0
   bbad0:	dd08      	ble.n	bbae4 <_strtod_l+0x7ac>
   bbad2:	4631      	mov	r1, r6
   bbad4:	464a      	mov	r2, r9
   bbad6:	4620      	mov	r0, r4
   bbad8:	f001 f96c 	bl	bcdb4 <__lshift>
   bbadc:	4606      	mov	r6, r0
   bbade:	2800      	cmp	r0, #0
   bbae0:	f43f ae72 	beq.w	bb7c8 <_strtod_l+0x490>
   bbae4:	9a05      	ldr	r2, [sp, #20]
   bbae6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbae8:	4620      	mov	r0, r4
   bbaea:	f001 f9ef 	bl	bcecc <__mdiff>
   bbaee:	4605      	mov	r5, r0
   bbaf0:	2800      	cmp	r0, #0
   bbaf2:	f43f ae69 	beq.w	bb7c8 <_strtod_l+0x490>
   bbaf6:	68c3      	ldr	r3, [r0, #12]
   bbaf8:	930b      	str	r3, [sp, #44]	; 0x2c
   bbafa:	2300      	movs	r3, #0
   bbafc:	60c3      	str	r3, [r0, #12]
   bbafe:	4631      	mov	r1, r6
   bbb00:	f001 f9c8 	bl	bce94 <__mcmp>
   bbb04:	2800      	cmp	r0, #0
   bbb06:	da60      	bge.n	bbbca <_strtod_l+0x892>
   bbb08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbb0a:	ea53 030a 	orrs.w	r3, r3, sl
   bbb0e:	f040 8082 	bne.w	bbc16 <_strtod_l+0x8de>
   bbb12:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbb16:	2b00      	cmp	r3, #0
   bbb18:	d17d      	bne.n	bbc16 <_strtod_l+0x8de>
   bbb1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbb1e:	0d1b      	lsrs	r3, r3, #20
   bbb20:	051b      	lsls	r3, r3, #20
   bbb22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbb26:	d976      	bls.n	bbc16 <_strtod_l+0x8de>
   bbb28:	696b      	ldr	r3, [r5, #20]
   bbb2a:	b913      	cbnz	r3, bbb32 <_strtod_l+0x7fa>
   bbb2c:	692b      	ldr	r3, [r5, #16]
   bbb2e:	2b01      	cmp	r3, #1
   bbb30:	dd71      	ble.n	bbc16 <_strtod_l+0x8de>
   bbb32:	4629      	mov	r1, r5
   bbb34:	2201      	movs	r2, #1
   bbb36:	4620      	mov	r0, r4
   bbb38:	f001 f93c 	bl	bcdb4 <__lshift>
   bbb3c:	4631      	mov	r1, r6
   bbb3e:	4605      	mov	r5, r0
   bbb40:	f001 f9a8 	bl	bce94 <__mcmp>
   bbb44:	2800      	cmp	r0, #0
   bbb46:	dd66      	ble.n	bbc16 <_strtod_l+0x8de>
   bbb48:	9904      	ldr	r1, [sp, #16]
   bbb4a:	4a53      	ldr	r2, [pc, #332]	; (bbc98 <_strtod_l+0x960>)
   bbb4c:	465b      	mov	r3, fp
   bbb4e:	2900      	cmp	r1, #0
   bbb50:	f000 8081 	beq.w	bbc56 <_strtod_l+0x91e>
   bbb54:	ea02 010b 	and.w	r1, r2, fp
   bbb58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbb5c:	dc7b      	bgt.n	bbc56 <_strtod_l+0x91e>
   bbb5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbb62:	f77f aea9 	ble.w	bb8b8 <_strtod_l+0x580>
   bbb66:	4b4d      	ldr	r3, [pc, #308]	; (bbc9c <_strtod_l+0x964>)
   bbb68:	4650      	mov	r0, sl
   bbb6a:	4659      	mov	r1, fp
   bbb6c:	2200      	movs	r2, #0
   bbb6e:	f7fe ffaf 	bl	baad0 <__aeabi_dmul>
   bbb72:	460b      	mov	r3, r1
   bbb74:	4303      	orrs	r3, r0
   bbb76:	bf08      	it	eq
   bbb78:	2322      	moveq	r3, #34	; 0x22
   bbb7a:	4682      	mov	sl, r0
   bbb7c:	468b      	mov	fp, r1
   bbb7e:	bf08      	it	eq
   bbb80:	6023      	streq	r3, [r4, #0]
   bbb82:	e62b      	b.n	bb7dc <_strtod_l+0x4a4>
   bbb84:	f04f 32ff 	mov.w	r2, #4294967295
   bbb88:	fa02 f303 	lsl.w	r3, r2, r3
   bbb8c:	ea03 0a0a 	and.w	sl, r3, sl
   bbb90:	e6e3      	b.n	bb95a <_strtod_l+0x622>
   bbb92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbb96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbb9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbb9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbba2:	fa01 f308 	lsl.w	r3, r1, r8
   bbba6:	9308      	str	r3, [sp, #32]
   bbba8:	910d      	str	r1, [sp, #52]	; 0x34
   bbbaa:	e746      	b.n	bba3a <_strtod_l+0x702>
   bbbac:	2300      	movs	r3, #0
   bbbae:	9308      	str	r3, [sp, #32]
   bbbb0:	2301      	movs	r3, #1
   bbbb2:	930d      	str	r3, [sp, #52]	; 0x34
   bbbb4:	e741      	b.n	bba3a <_strtod_l+0x702>
   bbbb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbbb8:	4642      	mov	r2, r8
   bbbba:	4620      	mov	r0, r4
   bbbbc:	f001 f8fa 	bl	bcdb4 <__lshift>
   bbbc0:	9018      	str	r0, [sp, #96]	; 0x60
   bbbc2:	2800      	cmp	r0, #0
   bbbc4:	f47f af6b 	bne.w	bba9e <_strtod_l+0x766>
   bbbc8:	e5fe      	b.n	bb7c8 <_strtod_l+0x490>
   bbbca:	465f      	mov	r7, fp
   bbbcc:	d16e      	bne.n	bbcac <_strtod_l+0x974>
   bbbce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbbd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbbd4:	b342      	cbz	r2, bbc28 <_strtod_l+0x8f0>
   bbbd6:	4a32      	ldr	r2, [pc, #200]	; (bbca0 <_strtod_l+0x968>)
   bbbd8:	4293      	cmp	r3, r2
   bbbda:	d128      	bne.n	bbc2e <_strtod_l+0x8f6>
   bbbdc:	9b04      	ldr	r3, [sp, #16]
   bbbde:	4651      	mov	r1, sl
   bbbe0:	b1eb      	cbz	r3, bbc1e <_strtod_l+0x8e6>
   bbbe2:	4b2d      	ldr	r3, [pc, #180]	; (bbc98 <_strtod_l+0x960>)
   bbbe4:	403b      	ands	r3, r7
   bbbe6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbbea:	f04f 32ff 	mov.w	r2, #4294967295
   bbbee:	d819      	bhi.n	bbc24 <_strtod_l+0x8ec>
   bbbf0:	0d1b      	lsrs	r3, r3, #20
   bbbf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbbf6:	fa02 f303 	lsl.w	r3, r2, r3
   bbbfa:	4299      	cmp	r1, r3
   bbbfc:	d117      	bne.n	bbc2e <_strtod_l+0x8f6>
   bbbfe:	4b29      	ldr	r3, [pc, #164]	; (bbca4 <_strtod_l+0x96c>)
   bbc00:	429f      	cmp	r7, r3
   bbc02:	d102      	bne.n	bbc0a <_strtod_l+0x8d2>
   bbc04:	3101      	adds	r1, #1
   bbc06:	f43f addf 	beq.w	bb7c8 <_strtod_l+0x490>
   bbc0a:	4b23      	ldr	r3, [pc, #140]	; (bbc98 <_strtod_l+0x960>)
   bbc0c:	403b      	ands	r3, r7
   bbc0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bbc12:	f04f 0a00 	mov.w	sl, #0
   bbc16:	9b04      	ldr	r3, [sp, #16]
   bbc18:	2b00      	cmp	r3, #0
   bbc1a:	d1a4      	bne.n	bbb66 <_strtod_l+0x82e>
   bbc1c:	e5de      	b.n	bb7dc <_strtod_l+0x4a4>
   bbc1e:	f04f 33ff 	mov.w	r3, #4294967295
   bbc22:	e7ea      	b.n	bbbfa <_strtod_l+0x8c2>
   bbc24:	4613      	mov	r3, r2
   bbc26:	e7e8      	b.n	bbbfa <_strtod_l+0x8c2>
   bbc28:	ea53 030a 	orrs.w	r3, r3, sl
   bbc2c:	d08c      	beq.n	bbb48 <_strtod_l+0x810>
   bbc2e:	9b08      	ldr	r3, [sp, #32]
   bbc30:	b1db      	cbz	r3, bbc6a <_strtod_l+0x932>
   bbc32:	423b      	tst	r3, r7
   bbc34:	d0ef      	beq.n	bbc16 <_strtod_l+0x8de>
   bbc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbc38:	9a04      	ldr	r2, [sp, #16]
   bbc3a:	4650      	mov	r0, sl
   bbc3c:	4659      	mov	r1, fp
   bbc3e:	b1c3      	cbz	r3, bbc72 <_strtod_l+0x93a>
   bbc40:	f7ff fb5c 	bl	bb2fc <sulp>
   bbc44:	4602      	mov	r2, r0
   bbc46:	460b      	mov	r3, r1
   bbc48:	ec51 0b18 	vmov	r0, r1, d8
   bbc4c:	f7fe fd8a 	bl	ba764 <__adddf3>
   bbc50:	4682      	mov	sl, r0
   bbc52:	468b      	mov	fp, r1
   bbc54:	e7df      	b.n	bbc16 <_strtod_l+0x8de>
   bbc56:	4013      	ands	r3, r2
   bbc58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bbc5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bbc60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bbc64:	f04f 3aff 	mov.w	sl, #4294967295
   bbc68:	e7d5      	b.n	bbc16 <_strtod_l+0x8de>
   bbc6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbc6c:	ea13 0f0a 	tst.w	r3, sl
   bbc70:	e7e0      	b.n	bbc34 <_strtod_l+0x8fc>
   bbc72:	f7ff fb43 	bl	bb2fc <sulp>
   bbc76:	4602      	mov	r2, r0
   bbc78:	460b      	mov	r3, r1
   bbc7a:	ec51 0b18 	vmov	r0, r1, d8
   bbc7e:	f7fe fd6f 	bl	ba760 <__aeabi_dsub>
   bbc82:	2200      	movs	r2, #0
   bbc84:	2300      	movs	r3, #0
   bbc86:	4682      	mov	sl, r0
   bbc88:	468b      	mov	fp, r1
   bbc8a:	f7ff f989 	bl	bafa0 <__aeabi_dcmpeq>
   bbc8e:	2800      	cmp	r0, #0
   bbc90:	d0c1      	beq.n	bbc16 <_strtod_l+0x8de>
   bbc92:	e611      	b.n	bb8b8 <_strtod_l+0x580>
   bbc94:	fffffc02 	.word	0xfffffc02
   bbc98:	7ff00000 	.word	0x7ff00000
   bbc9c:	39500000 	.word	0x39500000
   bbca0:	000fffff 	.word	0x000fffff
   bbca4:	7fefffff 	.word	0x7fefffff
   bbca8:	000bdfb8 	.word	0x000bdfb8
   bbcac:	4631      	mov	r1, r6
   bbcae:	4628      	mov	r0, r5
   bbcb0:	f001 fa6e 	bl	bd190 <__ratio>
   bbcb4:	ec59 8b10 	vmov	r8, r9, d0
   bbcb8:	ee10 0a10 	vmov	r0, s0
   bbcbc:	2200      	movs	r2, #0
   bbcbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bbcc2:	4649      	mov	r1, r9
   bbcc4:	f7ff f980 	bl	bafc8 <__aeabi_dcmple>
   bbcc8:	2800      	cmp	r0, #0
   bbcca:	d07a      	beq.n	bbdc2 <_strtod_l+0xa8a>
   bbccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbcce:	2b00      	cmp	r3, #0
   bbcd0:	d04a      	beq.n	bbd68 <_strtod_l+0xa30>
   bbcd2:	4b95      	ldr	r3, [pc, #596]	; (bbf28 <_strtod_l+0xbf0>)
   bbcd4:	2200      	movs	r2, #0
   bbcd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbcda:	f8df 924c 	ldr.w	r9, [pc, #588]	; bbf28 <_strtod_l+0xbf0>
   bbcde:	f04f 0800 	mov.w	r8, #0
   bbce2:	4b92      	ldr	r3, [pc, #584]	; (bbf2c <_strtod_l+0xbf4>)
   bbce4:	403b      	ands	r3, r7
   bbce6:	930d      	str	r3, [sp, #52]	; 0x34
   bbce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbcea:	4b91      	ldr	r3, [pc, #580]	; (bbf30 <_strtod_l+0xbf8>)
   bbcec:	429a      	cmp	r2, r3
   bbcee:	f040 80b0 	bne.w	bbe52 <_strtod_l+0xb1a>
   bbcf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbcf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bbcfa:	ec4b ab10 	vmov	d0, sl, fp
   bbcfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbd02:	f001 f96d 	bl	bcfe0 <__ulp>
   bbd06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbd0a:	ec53 2b10 	vmov	r2, r3, d0
   bbd0e:	f7fe fedf 	bl	baad0 <__aeabi_dmul>
   bbd12:	4652      	mov	r2, sl
   bbd14:	465b      	mov	r3, fp
   bbd16:	f7fe fd25 	bl	ba764 <__adddf3>
   bbd1a:	460b      	mov	r3, r1
   bbd1c:	4983      	ldr	r1, [pc, #524]	; (bbf2c <_strtod_l+0xbf4>)
   bbd1e:	4a85      	ldr	r2, [pc, #532]	; (bbf34 <_strtod_l+0xbfc>)
   bbd20:	4019      	ands	r1, r3
   bbd22:	4291      	cmp	r1, r2
   bbd24:	4682      	mov	sl, r0
   bbd26:	d960      	bls.n	bbdea <_strtod_l+0xab2>
   bbd28:	ee18 3a90 	vmov	r3, s17
   bbd2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bbd30:	4293      	cmp	r3, r2
   bbd32:	d104      	bne.n	bbd3e <_strtod_l+0xa06>
   bbd34:	ee18 3a10 	vmov	r3, s16
   bbd38:	3301      	adds	r3, #1
   bbd3a:	f43f ad45 	beq.w	bb7c8 <_strtod_l+0x490>
   bbd3e:	f8df b200 	ldr.w	fp, [pc, #512]	; bbf40 <_strtod_l+0xc08>
   bbd42:	f04f 3aff 	mov.w	sl, #4294967295
   bbd46:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbd48:	4620      	mov	r0, r4
   bbd4a:	f000 fe17 	bl	bc97c <_Bfree>
   bbd4e:	9905      	ldr	r1, [sp, #20]
   bbd50:	4620      	mov	r0, r4
   bbd52:	f000 fe13 	bl	bc97c <_Bfree>
   bbd56:	4631      	mov	r1, r6
   bbd58:	4620      	mov	r0, r4
   bbd5a:	f000 fe0f 	bl	bc97c <_Bfree>
   bbd5e:	4629      	mov	r1, r5
   bbd60:	4620      	mov	r0, r4
   bbd62:	f000 fe0b 	bl	bc97c <_Bfree>
   bbd66:	e61a      	b.n	bb99e <_strtod_l+0x666>
   bbd68:	f1ba 0f00 	cmp.w	sl, #0
   bbd6c:	d11b      	bne.n	bbda6 <_strtod_l+0xa6e>
   bbd6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbd72:	b9f3      	cbnz	r3, bbdb2 <_strtod_l+0xa7a>
   bbd74:	4b6c      	ldr	r3, [pc, #432]	; (bbf28 <_strtod_l+0xbf0>)
   bbd76:	2200      	movs	r2, #0
   bbd78:	4640      	mov	r0, r8
   bbd7a:	4649      	mov	r1, r9
   bbd7c:	f7ff f91a 	bl	bafb4 <__aeabi_dcmplt>
   bbd80:	b9d0      	cbnz	r0, bbdb8 <_strtod_l+0xa80>
   bbd82:	4640      	mov	r0, r8
   bbd84:	4649      	mov	r1, r9
   bbd86:	4b6c      	ldr	r3, [pc, #432]	; (bbf38 <_strtod_l+0xc00>)
   bbd88:	2200      	movs	r2, #0
   bbd8a:	f7fe fea1 	bl	baad0 <__aeabi_dmul>
   bbd8e:	4680      	mov	r8, r0
   bbd90:	4689      	mov	r9, r1
   bbd92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bbd96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bbd9a:	9315      	str	r3, [sp, #84]	; 0x54
   bbd9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bbda0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbda4:	e79d      	b.n	bbce2 <_strtod_l+0x9aa>
   bbda6:	f1ba 0f01 	cmp.w	sl, #1
   bbdaa:	d102      	bne.n	bbdb2 <_strtod_l+0xa7a>
   bbdac:	2f00      	cmp	r7, #0
   bbdae:	f43f ad83 	beq.w	bb8b8 <_strtod_l+0x580>
   bbdb2:	4b62      	ldr	r3, [pc, #392]	; (bbf3c <_strtod_l+0xc04>)
   bbdb4:	2200      	movs	r2, #0
   bbdb6:	e78e      	b.n	bbcd6 <_strtod_l+0x99e>
   bbdb8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bbf38 <_strtod_l+0xc00>
   bbdbc:	f04f 0800 	mov.w	r8, #0
   bbdc0:	e7e7      	b.n	bbd92 <_strtod_l+0xa5a>
   bbdc2:	4b5d      	ldr	r3, [pc, #372]	; (bbf38 <_strtod_l+0xc00>)
   bbdc4:	4640      	mov	r0, r8
   bbdc6:	4649      	mov	r1, r9
   bbdc8:	2200      	movs	r2, #0
   bbdca:	f7fe fe81 	bl	baad0 <__aeabi_dmul>
   bbdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbdd0:	4680      	mov	r8, r0
   bbdd2:	4689      	mov	r9, r1
   bbdd4:	b933      	cbnz	r3, bbde4 <_strtod_l+0xaac>
   bbdd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbdda:	900e      	str	r0, [sp, #56]	; 0x38
   bbddc:	930f      	str	r3, [sp, #60]	; 0x3c
   bbdde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bbde2:	e7dd      	b.n	bbda0 <_strtod_l+0xa68>
   bbde4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bbde8:	e7f9      	b.n	bbdde <_strtod_l+0xaa6>
   bbdea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bbdee:	9b04      	ldr	r3, [sp, #16]
   bbdf0:	2b00      	cmp	r3, #0
   bbdf2:	d1a8      	bne.n	bbd46 <_strtod_l+0xa0e>
   bbdf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbdf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbdfa:	0d1b      	lsrs	r3, r3, #20
   bbdfc:	051b      	lsls	r3, r3, #20
   bbdfe:	429a      	cmp	r2, r3
   bbe00:	d1a1      	bne.n	bbd46 <_strtod_l+0xa0e>
   bbe02:	4640      	mov	r0, r8
   bbe04:	4649      	mov	r1, r9
   bbe06:	f001 fa61 	bl	bd2cc <__aeabi_d2lz>
   bbe0a:	f7fe fe33 	bl	baa74 <__aeabi_l2d>
   bbe0e:	4602      	mov	r2, r0
   bbe10:	460b      	mov	r3, r1
   bbe12:	4640      	mov	r0, r8
   bbe14:	4649      	mov	r1, r9
   bbe16:	f7fe fca3 	bl	ba760 <__aeabi_dsub>
   bbe1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbe1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbe20:	ea43 030a 	orr.w	r3, r3, sl
   bbe24:	4313      	orrs	r3, r2
   bbe26:	4680      	mov	r8, r0
   bbe28:	4689      	mov	r9, r1
   bbe2a:	d055      	beq.n	bbed8 <_strtod_l+0xba0>
   bbe2c:	a336      	add	r3, pc, #216	; (adr r3, bbf08 <_strtod_l+0xbd0>)
   bbe2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe32:	f7ff f8bf 	bl	bafb4 <__aeabi_dcmplt>
   bbe36:	2800      	cmp	r0, #0
   bbe38:	f47f acd0 	bne.w	bb7dc <_strtod_l+0x4a4>
   bbe3c:	a334      	add	r3, pc, #208	; (adr r3, bbf10 <_strtod_l+0xbd8>)
   bbe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe42:	4640      	mov	r0, r8
   bbe44:	4649      	mov	r1, r9
   bbe46:	f7ff f8d3 	bl	baff0 <__aeabi_dcmpgt>
   bbe4a:	2800      	cmp	r0, #0
   bbe4c:	f43f af7b 	beq.w	bbd46 <_strtod_l+0xa0e>
   bbe50:	e4c4      	b.n	bb7dc <_strtod_l+0x4a4>
   bbe52:	9b04      	ldr	r3, [sp, #16]
   bbe54:	b333      	cbz	r3, bbea4 <_strtod_l+0xb6c>
   bbe56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbe58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbe5c:	d822      	bhi.n	bbea4 <_strtod_l+0xb6c>
   bbe5e:	a32e      	add	r3, pc, #184	; (adr r3, bbf18 <_strtod_l+0xbe0>)
   bbe60:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe64:	4640      	mov	r0, r8
   bbe66:	4649      	mov	r1, r9
   bbe68:	f7ff f8ae 	bl	bafc8 <__aeabi_dcmple>
   bbe6c:	b1a0      	cbz	r0, bbe98 <_strtod_l+0xb60>
   bbe6e:	4649      	mov	r1, r9
   bbe70:	4640      	mov	r0, r8
   bbe72:	f7ff f8c7 	bl	bb004 <__aeabi_d2uiz>
   bbe76:	2801      	cmp	r0, #1
   bbe78:	bf38      	it	cc
   bbe7a:	2001      	movcc	r0, #1
   bbe7c:	f7fe fdae 	bl	ba9dc <__aeabi_ui2d>
   bbe80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbe82:	4680      	mov	r8, r0
   bbe84:	4689      	mov	r9, r1
   bbe86:	bb23      	cbnz	r3, bbed2 <_strtod_l+0xb9a>
   bbe88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbe8c:	9010      	str	r0, [sp, #64]	; 0x40
   bbe8e:	9311      	str	r3, [sp, #68]	; 0x44
   bbe90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bbe94:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbe98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbe9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbe9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bbea0:	1a9b      	subs	r3, r3, r2
   bbea2:	9309      	str	r3, [sp, #36]	; 0x24
   bbea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbea8:	eeb0 0a48 	vmov.f32	s0, s16
   bbeac:	eef0 0a68 	vmov.f32	s1, s17
   bbeb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbeb4:	f001 f894 	bl	bcfe0 <__ulp>
   bbeb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbebc:	ec53 2b10 	vmov	r2, r3, d0
   bbec0:	f7fe fe06 	bl	baad0 <__aeabi_dmul>
   bbec4:	ec53 2b18 	vmov	r2, r3, d8
   bbec8:	f7fe fc4c 	bl	ba764 <__adddf3>
   bbecc:	4682      	mov	sl, r0
   bbece:	468b      	mov	fp, r1
   bbed0:	e78d      	b.n	bbdee <_strtod_l+0xab6>
   bbed2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bbed6:	e7db      	b.n	bbe90 <_strtod_l+0xb58>
   bbed8:	a311      	add	r3, pc, #68	; (adr r3, bbf20 <_strtod_l+0xbe8>)
   bbeda:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbede:	f7ff f869 	bl	bafb4 <__aeabi_dcmplt>
   bbee2:	e7b2      	b.n	bbe4a <_strtod_l+0xb12>
   bbee4:	2300      	movs	r3, #0
   bbee6:	930a      	str	r3, [sp, #40]	; 0x28
   bbee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bbeea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbeec:	6013      	str	r3, [r2, #0]
   bbeee:	f7ff ba6b 	b.w	bb3c8 <_strtod_l+0x90>
   bbef2:	2a65      	cmp	r2, #101	; 0x65
   bbef4:	f43f ab5f 	beq.w	bb5b6 <_strtod_l+0x27e>
   bbef8:	2a45      	cmp	r2, #69	; 0x45
   bbefa:	f43f ab5c 	beq.w	bb5b6 <_strtod_l+0x27e>
   bbefe:	2301      	movs	r3, #1
   bbf00:	f7ff bb94 	b.w	bb62c <_strtod_l+0x2f4>
   bbf04:	f3af 8000 	nop.w
   bbf08:	94a03595 	.word	0x94a03595
   bbf0c:	3fdfffff 	.word	0x3fdfffff
   bbf10:	35afe535 	.word	0x35afe535
   bbf14:	3fe00000 	.word	0x3fe00000
   bbf18:	ffc00000 	.word	0xffc00000
   bbf1c:	41dfffff 	.word	0x41dfffff
   bbf20:	94a03595 	.word	0x94a03595
   bbf24:	3fcfffff 	.word	0x3fcfffff
   bbf28:	3ff00000 	.word	0x3ff00000
   bbf2c:	7ff00000 	.word	0x7ff00000
   bbf30:	7fe00000 	.word	0x7fe00000
   bbf34:	7c9fffff 	.word	0x7c9fffff
   bbf38:	3fe00000 	.word	0x3fe00000
   bbf3c:	bff00000 	.word	0xbff00000
   bbf40:	7fefffff 	.word	0x7fefffff

000bbf44 <strtod>:
   bbf44:	460a      	mov	r2, r1
   bbf46:	4601      	mov	r1, r0
   bbf48:	4802      	ldr	r0, [pc, #8]	; (bbf54 <strtod+0x10>)
   bbf4a:	4b03      	ldr	r3, [pc, #12]	; (bbf58 <strtod+0x14>)
   bbf4c:	6800      	ldr	r0, [r0, #0]
   bbf4e:	f7ff b9f3 	b.w	bb338 <_strtod_l>
   bbf52:	bf00      	nop
   bbf54:	2003d8c4 	.word	0x2003d8c4
   bbf58:	2003d930 	.word	0x2003d930

000bbf5c <strtok>:
   bbf5c:	4b16      	ldr	r3, [pc, #88]	; (bbfb8 <strtok+0x5c>)
   bbf5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbf60:	681e      	ldr	r6, [r3, #0]
   bbf62:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bbf64:	4605      	mov	r5, r0
   bbf66:	b9fc      	cbnz	r4, bbfa8 <strtok+0x4c>
   bbf68:	2050      	movs	r0, #80	; 0x50
   bbf6a:	9101      	str	r1, [sp, #4]
   bbf6c:	f7fa ff56 	bl	b6e1c <malloc>
   bbf70:	9901      	ldr	r1, [sp, #4]
   bbf72:	65b0      	str	r0, [r6, #88]	; 0x58
   bbf74:	4602      	mov	r2, r0
   bbf76:	b920      	cbnz	r0, bbf82 <strtok+0x26>
   bbf78:	4b10      	ldr	r3, [pc, #64]	; (bbfbc <strtok+0x60>)
   bbf7a:	4811      	ldr	r0, [pc, #68]	; (bbfc0 <strtok+0x64>)
   bbf7c:	2157      	movs	r1, #87	; 0x57
   bbf7e:	f7fa ff95 	bl	b6eac <__assert_func>
   bbf82:	e9c0 4400 	strd	r4, r4, [r0]
   bbf86:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bbf8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bbf8e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bbf92:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bbf96:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bbf9a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bbf9e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bbfa2:	6184      	str	r4, [r0, #24]
   bbfa4:	7704      	strb	r4, [r0, #28]
   bbfa6:	6244      	str	r4, [r0, #36]	; 0x24
   bbfa8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bbfaa:	2301      	movs	r3, #1
   bbfac:	4628      	mov	r0, r5
   bbfae:	b002      	add	sp, #8
   bbfb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbfb4:	f000 b806 	b.w	bbfc4 <__strtok_r>
   bbfb8:	2003d8c4 	.word	0x2003d8c4
   bbfbc:	000bdee9 	.word	0x000bdee9
   bbfc0:	000bdfe0 	.word	0x000bdfe0

000bbfc4 <__strtok_r>:
   bbfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbfc6:	b908      	cbnz	r0, bbfcc <__strtok_r+0x8>
   bbfc8:	6810      	ldr	r0, [r2, #0]
   bbfca:	b188      	cbz	r0, bbff0 <__strtok_r+0x2c>
   bbfcc:	4604      	mov	r4, r0
   bbfce:	4620      	mov	r0, r4
   bbfd0:	f814 5b01 	ldrb.w	r5, [r4], #1
   bbfd4:	460f      	mov	r7, r1
   bbfd6:	f817 6b01 	ldrb.w	r6, [r7], #1
   bbfda:	b91e      	cbnz	r6, bbfe4 <__strtok_r+0x20>
   bbfdc:	b965      	cbnz	r5, bbff8 <__strtok_r+0x34>
   bbfde:	6015      	str	r5, [r2, #0]
   bbfe0:	4628      	mov	r0, r5
   bbfe2:	e005      	b.n	bbff0 <__strtok_r+0x2c>
   bbfe4:	42b5      	cmp	r5, r6
   bbfe6:	d1f6      	bne.n	bbfd6 <__strtok_r+0x12>
   bbfe8:	2b00      	cmp	r3, #0
   bbfea:	d1f0      	bne.n	bbfce <__strtok_r+0xa>
   bbfec:	6014      	str	r4, [r2, #0]
   bbfee:	7003      	strb	r3, [r0, #0]
   bbff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbff2:	461c      	mov	r4, r3
   bbff4:	e00c      	b.n	bc010 <__strtok_r+0x4c>
   bbff6:	b915      	cbnz	r5, bbffe <__strtok_r+0x3a>
   bbff8:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbffc:	460e      	mov	r6, r1
   bbffe:	f816 5b01 	ldrb.w	r5, [r6], #1
   bc002:	42ab      	cmp	r3, r5
   bc004:	d1f7      	bne.n	bbff6 <__strtok_r+0x32>
   bc006:	2b00      	cmp	r3, #0
   bc008:	d0f3      	beq.n	bbff2 <__strtok_r+0x2e>
   bc00a:	2300      	movs	r3, #0
   bc00c:	f804 3c01 	strb.w	r3, [r4, #-1]
   bc010:	6014      	str	r4, [r2, #0]
   bc012:	e7ed      	b.n	bbff0 <__strtok_r+0x2c>

000bc014 <_strtol_l.constprop.0>:
   bc014:	2b01      	cmp	r3, #1
   bc016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc01a:	d001      	beq.n	bc020 <_strtol_l.constprop.0+0xc>
   bc01c:	2b24      	cmp	r3, #36	; 0x24
   bc01e:	d906      	bls.n	bc02e <_strtol_l.constprop.0+0x1a>
   bc020:	f7fa ff3c 	bl	b6e9c <__errno>
   bc024:	2316      	movs	r3, #22
   bc026:	6003      	str	r3, [r0, #0]
   bc028:	2000      	movs	r0, #0
   bc02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc02e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc114 <_strtol_l.constprop.0+0x100>
   bc032:	460d      	mov	r5, r1
   bc034:	462e      	mov	r6, r5
   bc036:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc03a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc03e:	f017 0708 	ands.w	r7, r7, #8
   bc042:	d1f7      	bne.n	bc034 <_strtol_l.constprop.0+0x20>
   bc044:	2c2d      	cmp	r4, #45	; 0x2d
   bc046:	d132      	bne.n	bc0ae <_strtol_l.constprop.0+0x9a>
   bc048:	782c      	ldrb	r4, [r5, #0]
   bc04a:	2701      	movs	r7, #1
   bc04c:	1cb5      	adds	r5, r6, #2
   bc04e:	2b00      	cmp	r3, #0
   bc050:	d05b      	beq.n	bc10a <_strtol_l.constprop.0+0xf6>
   bc052:	2b10      	cmp	r3, #16
   bc054:	d109      	bne.n	bc06a <_strtol_l.constprop.0+0x56>
   bc056:	2c30      	cmp	r4, #48	; 0x30
   bc058:	d107      	bne.n	bc06a <_strtol_l.constprop.0+0x56>
   bc05a:	782c      	ldrb	r4, [r5, #0]
   bc05c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc060:	2c58      	cmp	r4, #88	; 0x58
   bc062:	d14d      	bne.n	bc100 <_strtol_l.constprop.0+0xec>
   bc064:	786c      	ldrb	r4, [r5, #1]
   bc066:	2310      	movs	r3, #16
   bc068:	3502      	adds	r5, #2
   bc06a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc06e:	f108 38ff 	add.w	r8, r8, #4294967295
   bc072:	f04f 0c00 	mov.w	ip, #0
   bc076:	fbb8 f9f3 	udiv	r9, r8, r3
   bc07a:	4666      	mov	r6, ip
   bc07c:	fb03 8a19 	mls	sl, r3, r9, r8
   bc080:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc084:	f1be 0f09 	cmp.w	lr, #9
   bc088:	d816      	bhi.n	bc0b8 <_strtol_l.constprop.0+0xa4>
   bc08a:	4674      	mov	r4, lr
   bc08c:	42a3      	cmp	r3, r4
   bc08e:	dd24      	ble.n	bc0da <_strtol_l.constprop.0+0xc6>
   bc090:	f1bc 0f00 	cmp.w	ip, #0
   bc094:	db1e      	blt.n	bc0d4 <_strtol_l.constprop.0+0xc0>
   bc096:	45b1      	cmp	r9, r6
   bc098:	d31c      	bcc.n	bc0d4 <_strtol_l.constprop.0+0xc0>
   bc09a:	d101      	bne.n	bc0a0 <_strtol_l.constprop.0+0x8c>
   bc09c:	45a2      	cmp	sl, r4
   bc09e:	db19      	blt.n	bc0d4 <_strtol_l.constprop.0+0xc0>
   bc0a0:	fb06 4603 	mla	r6, r6, r3, r4
   bc0a4:	f04f 0c01 	mov.w	ip, #1
   bc0a8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc0ac:	e7e8      	b.n	bc080 <_strtol_l.constprop.0+0x6c>
   bc0ae:	2c2b      	cmp	r4, #43	; 0x2b
   bc0b0:	bf04      	itt	eq
   bc0b2:	782c      	ldrbeq	r4, [r5, #0]
   bc0b4:	1cb5      	addeq	r5, r6, #2
   bc0b6:	e7ca      	b.n	bc04e <_strtol_l.constprop.0+0x3a>
   bc0b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc0bc:	f1be 0f19 	cmp.w	lr, #25
   bc0c0:	d801      	bhi.n	bc0c6 <_strtol_l.constprop.0+0xb2>
   bc0c2:	3c37      	subs	r4, #55	; 0x37
   bc0c4:	e7e2      	b.n	bc08c <_strtol_l.constprop.0+0x78>
   bc0c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc0ca:	f1be 0f19 	cmp.w	lr, #25
   bc0ce:	d804      	bhi.n	bc0da <_strtol_l.constprop.0+0xc6>
   bc0d0:	3c57      	subs	r4, #87	; 0x57
   bc0d2:	e7db      	b.n	bc08c <_strtol_l.constprop.0+0x78>
   bc0d4:	f04f 3cff 	mov.w	ip, #4294967295
   bc0d8:	e7e6      	b.n	bc0a8 <_strtol_l.constprop.0+0x94>
   bc0da:	f1bc 0f00 	cmp.w	ip, #0
   bc0de:	da05      	bge.n	bc0ec <_strtol_l.constprop.0+0xd8>
   bc0e0:	2322      	movs	r3, #34	; 0x22
   bc0e2:	6003      	str	r3, [r0, #0]
   bc0e4:	4646      	mov	r6, r8
   bc0e6:	b942      	cbnz	r2, bc0fa <_strtol_l.constprop.0+0xe6>
   bc0e8:	4630      	mov	r0, r6
   bc0ea:	e79e      	b.n	bc02a <_strtol_l.constprop.0+0x16>
   bc0ec:	b107      	cbz	r7, bc0f0 <_strtol_l.constprop.0+0xdc>
   bc0ee:	4276      	negs	r6, r6
   bc0f0:	2a00      	cmp	r2, #0
   bc0f2:	d0f9      	beq.n	bc0e8 <_strtol_l.constprop.0+0xd4>
   bc0f4:	f1bc 0f00 	cmp.w	ip, #0
   bc0f8:	d000      	beq.n	bc0fc <_strtol_l.constprop.0+0xe8>
   bc0fa:	1e69      	subs	r1, r5, #1
   bc0fc:	6011      	str	r1, [r2, #0]
   bc0fe:	e7f3      	b.n	bc0e8 <_strtol_l.constprop.0+0xd4>
   bc100:	2430      	movs	r4, #48	; 0x30
   bc102:	2b00      	cmp	r3, #0
   bc104:	d1b1      	bne.n	bc06a <_strtol_l.constprop.0+0x56>
   bc106:	2308      	movs	r3, #8
   bc108:	e7af      	b.n	bc06a <_strtol_l.constprop.0+0x56>
   bc10a:	2c30      	cmp	r4, #48	; 0x30
   bc10c:	d0a5      	beq.n	bc05a <_strtol_l.constprop.0+0x46>
   bc10e:	230a      	movs	r3, #10
   bc110:	e7ab      	b.n	bc06a <_strtol_l.constprop.0+0x56>
   bc112:	bf00      	nop
   bc114:	000be060 	.word	0x000be060

000bc118 <strtol>:
   bc118:	4613      	mov	r3, r2
   bc11a:	460a      	mov	r2, r1
   bc11c:	4601      	mov	r1, r0
   bc11e:	4802      	ldr	r0, [pc, #8]	; (bc128 <strtol+0x10>)
   bc120:	6800      	ldr	r0, [r0, #0]
   bc122:	f7ff bf77 	b.w	bc014 <_strtol_l.constprop.0>
   bc126:	bf00      	nop
   bc128:	2003d8c4 	.word	0x2003d8c4

000bc12c <__register_exitproc>:
   bc12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc130:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc1ec <__register_exitproc+0xc0>
   bc134:	4606      	mov	r6, r0
   bc136:	f8d8 0000 	ldr.w	r0, [r8]
   bc13a:	461f      	mov	r7, r3
   bc13c:	460d      	mov	r5, r1
   bc13e:	4691      	mov	r9, r2
   bc140:	f000 fbc6 	bl	bc8d0 <__retarget_lock_acquire_recursive>
   bc144:	4b25      	ldr	r3, [pc, #148]	; (bc1dc <__register_exitproc+0xb0>)
   bc146:	681c      	ldr	r4, [r3, #0]
   bc148:	b934      	cbnz	r4, bc158 <__register_exitproc+0x2c>
   bc14a:	4c25      	ldr	r4, [pc, #148]	; (bc1e0 <__register_exitproc+0xb4>)
   bc14c:	601c      	str	r4, [r3, #0]
   bc14e:	4b25      	ldr	r3, [pc, #148]	; (bc1e4 <__register_exitproc+0xb8>)
   bc150:	b113      	cbz	r3, bc158 <__register_exitproc+0x2c>
   bc152:	681b      	ldr	r3, [r3, #0]
   bc154:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc158:	6863      	ldr	r3, [r4, #4]
   bc15a:	2b1f      	cmp	r3, #31
   bc15c:	dd07      	ble.n	bc16e <__register_exitproc+0x42>
   bc15e:	f8d8 0000 	ldr.w	r0, [r8]
   bc162:	f000 fbb7 	bl	bc8d4 <__retarget_lock_release_recursive>
   bc166:	f04f 30ff 	mov.w	r0, #4294967295
   bc16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc16e:	b34e      	cbz	r6, bc1c4 <__register_exitproc+0x98>
   bc170:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc174:	b988      	cbnz	r0, bc19a <__register_exitproc+0x6e>
   bc176:	4b1c      	ldr	r3, [pc, #112]	; (bc1e8 <__register_exitproc+0xbc>)
   bc178:	b923      	cbnz	r3, bc184 <__register_exitproc+0x58>
   bc17a:	f8d8 0000 	ldr.w	r0, [r8]
   bc17e:	f000 fba8 	bl	bc8d2 <__retarget_lock_release>
   bc182:	e7f0      	b.n	bc166 <__register_exitproc+0x3a>
   bc184:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc188:	f7fa fe48 	bl	b6e1c <malloc>
   bc18c:	2800      	cmp	r0, #0
   bc18e:	d0f4      	beq.n	bc17a <__register_exitproc+0x4e>
   bc190:	2300      	movs	r3, #0
   bc192:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc196:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc19a:	6863      	ldr	r3, [r4, #4]
   bc19c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc1a0:	2201      	movs	r2, #1
   bc1a2:	409a      	lsls	r2, r3
   bc1a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc1a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc1ac:	4313      	orrs	r3, r2
   bc1ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc1b2:	2e02      	cmp	r6, #2
   bc1b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc1b8:	bf02      	ittt	eq
   bc1ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc1be:	4313      	orreq	r3, r2
   bc1c0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc1c4:	6863      	ldr	r3, [r4, #4]
   bc1c6:	f8d8 0000 	ldr.w	r0, [r8]
   bc1ca:	1c5a      	adds	r2, r3, #1
   bc1cc:	3302      	adds	r3, #2
   bc1ce:	6062      	str	r2, [r4, #4]
   bc1d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc1d4:	f000 fb7e 	bl	bc8d4 <__retarget_lock_release_recursive>
   bc1d8:	2000      	movs	r0, #0
   bc1da:	e7c6      	b.n	bc16a <__register_exitproc+0x3e>
   bc1dc:	2003e7ec 	.word	0x2003e7ec
   bc1e0:	2003e760 	.word	0x2003e760
   bc1e4:	00000000 	.word	0x00000000
   bc1e8:	000b6e1d 	.word	0x000b6e1d
   bc1ec:	2003d928 	.word	0x2003d928

000bc1f0 <rshift>:
   bc1f0:	6903      	ldr	r3, [r0, #16]
   bc1f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc1f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc1fa:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc1fe:	f100 0414 	add.w	r4, r0, #20
   bc202:	dd45      	ble.n	bc290 <rshift+0xa0>
   bc204:	f011 011f 	ands.w	r1, r1, #31
   bc208:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc20c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc210:	d10c      	bne.n	bc22c <rshift+0x3c>
   bc212:	f100 0710 	add.w	r7, r0, #16
   bc216:	4629      	mov	r1, r5
   bc218:	42b1      	cmp	r1, r6
   bc21a:	d334      	bcc.n	bc286 <rshift+0x96>
   bc21c:	1a9b      	subs	r3, r3, r2
   bc21e:	009b      	lsls	r3, r3, #2
   bc220:	1eea      	subs	r2, r5, #3
   bc222:	4296      	cmp	r6, r2
   bc224:	bf38      	it	cc
   bc226:	2300      	movcc	r3, #0
   bc228:	4423      	add	r3, r4
   bc22a:	e015      	b.n	bc258 <rshift+0x68>
   bc22c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc230:	f1c1 0820 	rsb	r8, r1, #32
   bc234:	40cf      	lsrs	r7, r1
   bc236:	f105 0e04 	add.w	lr, r5, #4
   bc23a:	46a1      	mov	r9, r4
   bc23c:	4576      	cmp	r6, lr
   bc23e:	46f4      	mov	ip, lr
   bc240:	d815      	bhi.n	bc26e <rshift+0x7e>
   bc242:	1a9a      	subs	r2, r3, r2
   bc244:	0092      	lsls	r2, r2, #2
   bc246:	3a04      	subs	r2, #4
   bc248:	3501      	adds	r5, #1
   bc24a:	42ae      	cmp	r6, r5
   bc24c:	bf38      	it	cc
   bc24e:	2200      	movcc	r2, #0
   bc250:	18a3      	adds	r3, r4, r2
   bc252:	50a7      	str	r7, [r4, r2]
   bc254:	b107      	cbz	r7, bc258 <rshift+0x68>
   bc256:	3304      	adds	r3, #4
   bc258:	1b1a      	subs	r2, r3, r4
   bc25a:	42a3      	cmp	r3, r4
   bc25c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc260:	bf08      	it	eq
   bc262:	2300      	moveq	r3, #0
   bc264:	6102      	str	r2, [r0, #16]
   bc266:	bf08      	it	eq
   bc268:	6143      	streq	r3, [r0, #20]
   bc26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc26e:	f8dc c000 	ldr.w	ip, [ip]
   bc272:	fa0c fc08 	lsl.w	ip, ip, r8
   bc276:	ea4c 0707 	orr.w	r7, ip, r7
   bc27a:	f849 7b04 	str.w	r7, [r9], #4
   bc27e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc282:	40cf      	lsrs	r7, r1
   bc284:	e7da      	b.n	bc23c <rshift+0x4c>
   bc286:	f851 cb04 	ldr.w	ip, [r1], #4
   bc28a:	f847 cf04 	str.w	ip, [r7, #4]!
   bc28e:	e7c3      	b.n	bc218 <rshift+0x28>
   bc290:	4623      	mov	r3, r4
   bc292:	e7e1      	b.n	bc258 <rshift+0x68>

000bc294 <__hexdig_fun>:
   bc294:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc298:	2b09      	cmp	r3, #9
   bc29a:	d802      	bhi.n	bc2a2 <__hexdig_fun+0xe>
   bc29c:	3820      	subs	r0, #32
   bc29e:	b2c0      	uxtb	r0, r0
   bc2a0:	4770      	bx	lr
   bc2a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc2a6:	2b05      	cmp	r3, #5
   bc2a8:	d801      	bhi.n	bc2ae <__hexdig_fun+0x1a>
   bc2aa:	3847      	subs	r0, #71	; 0x47
   bc2ac:	e7f7      	b.n	bc29e <__hexdig_fun+0xa>
   bc2ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc2b2:	2b05      	cmp	r3, #5
   bc2b4:	d801      	bhi.n	bc2ba <__hexdig_fun+0x26>
   bc2b6:	3827      	subs	r0, #39	; 0x27
   bc2b8:	e7f1      	b.n	bc29e <__hexdig_fun+0xa>
   bc2ba:	2000      	movs	r0, #0
   bc2bc:	4770      	bx	lr
	...

000bc2c0 <__gethex>:
   bc2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc2c4:	ed2d 8b02 	vpush	{d8}
   bc2c8:	b089      	sub	sp, #36	; 0x24
   bc2ca:	ee08 0a10 	vmov	s16, r0
   bc2ce:	9304      	str	r3, [sp, #16]
   bc2d0:	4bb4      	ldr	r3, [pc, #720]	; (bc5a4 <__gethex+0x2e4>)
   bc2d2:	681b      	ldr	r3, [r3, #0]
   bc2d4:	9301      	str	r3, [sp, #4]
   bc2d6:	4618      	mov	r0, r3
   bc2d8:	468b      	mov	fp, r1
   bc2da:	4690      	mov	r8, r2
   bc2dc:	f7fe ffd3 	bl	bb286 <strlen>
   bc2e0:	9b01      	ldr	r3, [sp, #4]
   bc2e2:	f8db 2000 	ldr.w	r2, [fp]
   bc2e6:	4403      	add	r3, r0
   bc2e8:	4682      	mov	sl, r0
   bc2ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc2ee:	9305      	str	r3, [sp, #20]
   bc2f0:	1c93      	adds	r3, r2, #2
   bc2f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc2f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc2fa:	32fe      	adds	r2, #254	; 0xfe
   bc2fc:	18d1      	adds	r1, r2, r3
   bc2fe:	461f      	mov	r7, r3
   bc300:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc304:	9100      	str	r1, [sp, #0]
   bc306:	2830      	cmp	r0, #48	; 0x30
   bc308:	d0f8      	beq.n	bc2fc <__gethex+0x3c>
   bc30a:	f7ff ffc3 	bl	bc294 <__hexdig_fun>
   bc30e:	4604      	mov	r4, r0
   bc310:	2800      	cmp	r0, #0
   bc312:	d13a      	bne.n	bc38a <__gethex+0xca>
   bc314:	9901      	ldr	r1, [sp, #4]
   bc316:	4652      	mov	r2, sl
   bc318:	4638      	mov	r0, r7
   bc31a:	f7fe ffbc 	bl	bb296 <strncmp>
   bc31e:	4605      	mov	r5, r0
   bc320:	2800      	cmp	r0, #0
   bc322:	d168      	bne.n	bc3f6 <__gethex+0x136>
   bc324:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc328:	eb07 060a 	add.w	r6, r7, sl
   bc32c:	f7ff ffb2 	bl	bc294 <__hexdig_fun>
   bc330:	2800      	cmp	r0, #0
   bc332:	d062      	beq.n	bc3fa <__gethex+0x13a>
   bc334:	4633      	mov	r3, r6
   bc336:	7818      	ldrb	r0, [r3, #0]
   bc338:	2830      	cmp	r0, #48	; 0x30
   bc33a:	461f      	mov	r7, r3
   bc33c:	f103 0301 	add.w	r3, r3, #1
   bc340:	d0f9      	beq.n	bc336 <__gethex+0x76>
   bc342:	f7ff ffa7 	bl	bc294 <__hexdig_fun>
   bc346:	2301      	movs	r3, #1
   bc348:	fab0 f480 	clz	r4, r0
   bc34c:	0964      	lsrs	r4, r4, #5
   bc34e:	4635      	mov	r5, r6
   bc350:	9300      	str	r3, [sp, #0]
   bc352:	463a      	mov	r2, r7
   bc354:	4616      	mov	r6, r2
   bc356:	3201      	adds	r2, #1
   bc358:	7830      	ldrb	r0, [r6, #0]
   bc35a:	f7ff ff9b 	bl	bc294 <__hexdig_fun>
   bc35e:	2800      	cmp	r0, #0
   bc360:	d1f8      	bne.n	bc354 <__gethex+0x94>
   bc362:	9901      	ldr	r1, [sp, #4]
   bc364:	4652      	mov	r2, sl
   bc366:	4630      	mov	r0, r6
   bc368:	f7fe ff95 	bl	bb296 <strncmp>
   bc36c:	b980      	cbnz	r0, bc390 <__gethex+0xd0>
   bc36e:	b94d      	cbnz	r5, bc384 <__gethex+0xc4>
   bc370:	eb06 050a 	add.w	r5, r6, sl
   bc374:	462a      	mov	r2, r5
   bc376:	4616      	mov	r6, r2
   bc378:	3201      	adds	r2, #1
   bc37a:	7830      	ldrb	r0, [r6, #0]
   bc37c:	f7ff ff8a 	bl	bc294 <__hexdig_fun>
   bc380:	2800      	cmp	r0, #0
   bc382:	d1f8      	bne.n	bc376 <__gethex+0xb6>
   bc384:	1bad      	subs	r5, r5, r6
   bc386:	00ad      	lsls	r5, r5, #2
   bc388:	e004      	b.n	bc394 <__gethex+0xd4>
   bc38a:	2400      	movs	r4, #0
   bc38c:	4625      	mov	r5, r4
   bc38e:	e7e0      	b.n	bc352 <__gethex+0x92>
   bc390:	2d00      	cmp	r5, #0
   bc392:	d1f7      	bne.n	bc384 <__gethex+0xc4>
   bc394:	7833      	ldrb	r3, [r6, #0]
   bc396:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc39a:	2b50      	cmp	r3, #80	; 0x50
   bc39c:	d13b      	bne.n	bc416 <__gethex+0x156>
   bc39e:	7873      	ldrb	r3, [r6, #1]
   bc3a0:	2b2b      	cmp	r3, #43	; 0x2b
   bc3a2:	d02c      	beq.n	bc3fe <__gethex+0x13e>
   bc3a4:	2b2d      	cmp	r3, #45	; 0x2d
   bc3a6:	d02e      	beq.n	bc406 <__gethex+0x146>
   bc3a8:	1c71      	adds	r1, r6, #1
   bc3aa:	f04f 0900 	mov.w	r9, #0
   bc3ae:	7808      	ldrb	r0, [r1, #0]
   bc3b0:	f7ff ff70 	bl	bc294 <__hexdig_fun>
   bc3b4:	1e43      	subs	r3, r0, #1
   bc3b6:	b2db      	uxtb	r3, r3
   bc3b8:	2b18      	cmp	r3, #24
   bc3ba:	d82c      	bhi.n	bc416 <__gethex+0x156>
   bc3bc:	f1a0 0210 	sub.w	r2, r0, #16
   bc3c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc3c4:	f7ff ff66 	bl	bc294 <__hexdig_fun>
   bc3c8:	1e43      	subs	r3, r0, #1
   bc3ca:	b2db      	uxtb	r3, r3
   bc3cc:	2b18      	cmp	r3, #24
   bc3ce:	d91d      	bls.n	bc40c <__gethex+0x14c>
   bc3d0:	f1b9 0f00 	cmp.w	r9, #0
   bc3d4:	d000      	beq.n	bc3d8 <__gethex+0x118>
   bc3d6:	4252      	negs	r2, r2
   bc3d8:	4415      	add	r5, r2
   bc3da:	f8cb 1000 	str.w	r1, [fp]
   bc3de:	b1e4      	cbz	r4, bc41a <__gethex+0x15a>
   bc3e0:	9b00      	ldr	r3, [sp, #0]
   bc3e2:	2b00      	cmp	r3, #0
   bc3e4:	bf14      	ite	ne
   bc3e6:	2700      	movne	r7, #0
   bc3e8:	2706      	moveq	r7, #6
   bc3ea:	4638      	mov	r0, r7
   bc3ec:	b009      	add	sp, #36	; 0x24
   bc3ee:	ecbd 8b02 	vpop	{d8}
   bc3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc3f6:	463e      	mov	r6, r7
   bc3f8:	4625      	mov	r5, r4
   bc3fa:	2401      	movs	r4, #1
   bc3fc:	e7ca      	b.n	bc394 <__gethex+0xd4>
   bc3fe:	f04f 0900 	mov.w	r9, #0
   bc402:	1cb1      	adds	r1, r6, #2
   bc404:	e7d3      	b.n	bc3ae <__gethex+0xee>
   bc406:	f04f 0901 	mov.w	r9, #1
   bc40a:	e7fa      	b.n	bc402 <__gethex+0x142>
   bc40c:	230a      	movs	r3, #10
   bc40e:	fb03 0202 	mla	r2, r3, r2, r0
   bc412:	3a10      	subs	r2, #16
   bc414:	e7d4      	b.n	bc3c0 <__gethex+0x100>
   bc416:	4631      	mov	r1, r6
   bc418:	e7df      	b.n	bc3da <__gethex+0x11a>
   bc41a:	1bf3      	subs	r3, r6, r7
   bc41c:	3b01      	subs	r3, #1
   bc41e:	4621      	mov	r1, r4
   bc420:	2b07      	cmp	r3, #7
   bc422:	dc0b      	bgt.n	bc43c <__gethex+0x17c>
   bc424:	ee18 0a10 	vmov	r0, s16
   bc428:	f000 fa68 	bl	bc8fc <_Balloc>
   bc42c:	4604      	mov	r4, r0
   bc42e:	b940      	cbnz	r0, bc442 <__gethex+0x182>
   bc430:	4b5d      	ldr	r3, [pc, #372]	; (bc5a8 <__gethex+0x2e8>)
   bc432:	4602      	mov	r2, r0
   bc434:	21de      	movs	r1, #222	; 0xde
   bc436:	485d      	ldr	r0, [pc, #372]	; (bc5ac <__gethex+0x2ec>)
   bc438:	f7fa fd38 	bl	b6eac <__assert_func>
   bc43c:	3101      	adds	r1, #1
   bc43e:	105b      	asrs	r3, r3, #1
   bc440:	e7ee      	b.n	bc420 <__gethex+0x160>
   bc442:	f100 0914 	add.w	r9, r0, #20
   bc446:	f04f 0b00 	mov.w	fp, #0
   bc44a:	f1ca 0301 	rsb	r3, sl, #1
   bc44e:	f8cd 9008 	str.w	r9, [sp, #8]
   bc452:	f8cd b000 	str.w	fp, [sp]
   bc456:	9306      	str	r3, [sp, #24]
   bc458:	42b7      	cmp	r7, r6
   bc45a:	d340      	bcc.n	bc4de <__gethex+0x21e>
   bc45c:	9802      	ldr	r0, [sp, #8]
   bc45e:	9b00      	ldr	r3, [sp, #0]
   bc460:	f840 3b04 	str.w	r3, [r0], #4
   bc464:	eba0 0009 	sub.w	r0, r0, r9
   bc468:	1080      	asrs	r0, r0, #2
   bc46a:	0146      	lsls	r6, r0, #5
   bc46c:	6120      	str	r0, [r4, #16]
   bc46e:	4618      	mov	r0, r3
   bc470:	f000 fb36 	bl	bcae0 <__hi0bits>
   bc474:	1a30      	subs	r0, r6, r0
   bc476:	f8d8 6000 	ldr.w	r6, [r8]
   bc47a:	42b0      	cmp	r0, r6
   bc47c:	dd63      	ble.n	bc546 <__gethex+0x286>
   bc47e:	1b87      	subs	r7, r0, r6
   bc480:	4639      	mov	r1, r7
   bc482:	4620      	mov	r0, r4
   bc484:	f000 feda 	bl	bd23c <__any_on>
   bc488:	4682      	mov	sl, r0
   bc48a:	b1a8      	cbz	r0, bc4b8 <__gethex+0x1f8>
   bc48c:	1e7b      	subs	r3, r7, #1
   bc48e:	1159      	asrs	r1, r3, #5
   bc490:	f003 021f 	and.w	r2, r3, #31
   bc494:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc498:	f04f 0a01 	mov.w	sl, #1
   bc49c:	fa0a f202 	lsl.w	r2, sl, r2
   bc4a0:	420a      	tst	r2, r1
   bc4a2:	d009      	beq.n	bc4b8 <__gethex+0x1f8>
   bc4a4:	4553      	cmp	r3, sl
   bc4a6:	dd05      	ble.n	bc4b4 <__gethex+0x1f4>
   bc4a8:	1eb9      	subs	r1, r7, #2
   bc4aa:	4620      	mov	r0, r4
   bc4ac:	f000 fec6 	bl	bd23c <__any_on>
   bc4b0:	2800      	cmp	r0, #0
   bc4b2:	d145      	bne.n	bc540 <__gethex+0x280>
   bc4b4:	f04f 0a02 	mov.w	sl, #2
   bc4b8:	4639      	mov	r1, r7
   bc4ba:	4620      	mov	r0, r4
   bc4bc:	f7ff fe98 	bl	bc1f0 <rshift>
   bc4c0:	443d      	add	r5, r7
   bc4c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc4c6:	42ab      	cmp	r3, r5
   bc4c8:	da4c      	bge.n	bc564 <__gethex+0x2a4>
   bc4ca:	ee18 0a10 	vmov	r0, s16
   bc4ce:	4621      	mov	r1, r4
   bc4d0:	f000 fa54 	bl	bc97c <_Bfree>
   bc4d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc4d6:	2300      	movs	r3, #0
   bc4d8:	6013      	str	r3, [r2, #0]
   bc4da:	27a3      	movs	r7, #163	; 0xa3
   bc4dc:	e785      	b.n	bc3ea <__gethex+0x12a>
   bc4de:	1e73      	subs	r3, r6, #1
   bc4e0:	9a05      	ldr	r2, [sp, #20]
   bc4e2:	9303      	str	r3, [sp, #12]
   bc4e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc4e8:	4293      	cmp	r3, r2
   bc4ea:	d019      	beq.n	bc520 <__gethex+0x260>
   bc4ec:	f1bb 0f20 	cmp.w	fp, #32
   bc4f0:	d107      	bne.n	bc502 <__gethex+0x242>
   bc4f2:	9b02      	ldr	r3, [sp, #8]
   bc4f4:	9a00      	ldr	r2, [sp, #0]
   bc4f6:	f843 2b04 	str.w	r2, [r3], #4
   bc4fa:	9302      	str	r3, [sp, #8]
   bc4fc:	2300      	movs	r3, #0
   bc4fe:	9300      	str	r3, [sp, #0]
   bc500:	469b      	mov	fp, r3
   bc502:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc506:	f7ff fec5 	bl	bc294 <__hexdig_fun>
   bc50a:	9b00      	ldr	r3, [sp, #0]
   bc50c:	f000 000f 	and.w	r0, r0, #15
   bc510:	fa00 f00b 	lsl.w	r0, r0, fp
   bc514:	4303      	orrs	r3, r0
   bc516:	9300      	str	r3, [sp, #0]
   bc518:	f10b 0b04 	add.w	fp, fp, #4
   bc51c:	9b03      	ldr	r3, [sp, #12]
   bc51e:	e00d      	b.n	bc53c <__gethex+0x27c>
   bc520:	9b03      	ldr	r3, [sp, #12]
   bc522:	9a06      	ldr	r2, [sp, #24]
   bc524:	4413      	add	r3, r2
   bc526:	42bb      	cmp	r3, r7
   bc528:	d3e0      	bcc.n	bc4ec <__gethex+0x22c>
   bc52a:	4618      	mov	r0, r3
   bc52c:	9901      	ldr	r1, [sp, #4]
   bc52e:	9307      	str	r3, [sp, #28]
   bc530:	4652      	mov	r2, sl
   bc532:	f7fe feb0 	bl	bb296 <strncmp>
   bc536:	9b07      	ldr	r3, [sp, #28]
   bc538:	2800      	cmp	r0, #0
   bc53a:	d1d7      	bne.n	bc4ec <__gethex+0x22c>
   bc53c:	461e      	mov	r6, r3
   bc53e:	e78b      	b.n	bc458 <__gethex+0x198>
   bc540:	f04f 0a03 	mov.w	sl, #3
   bc544:	e7b8      	b.n	bc4b8 <__gethex+0x1f8>
   bc546:	da0a      	bge.n	bc55e <__gethex+0x29e>
   bc548:	1a37      	subs	r7, r6, r0
   bc54a:	4621      	mov	r1, r4
   bc54c:	ee18 0a10 	vmov	r0, s16
   bc550:	463a      	mov	r2, r7
   bc552:	f000 fc2f 	bl	bcdb4 <__lshift>
   bc556:	1bed      	subs	r5, r5, r7
   bc558:	4604      	mov	r4, r0
   bc55a:	f100 0914 	add.w	r9, r0, #20
   bc55e:	f04f 0a00 	mov.w	sl, #0
   bc562:	e7ae      	b.n	bc4c2 <__gethex+0x202>
   bc564:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc568:	42a8      	cmp	r0, r5
   bc56a:	dd72      	ble.n	bc652 <__gethex+0x392>
   bc56c:	1b45      	subs	r5, r0, r5
   bc56e:	42ae      	cmp	r6, r5
   bc570:	dc36      	bgt.n	bc5e0 <__gethex+0x320>
   bc572:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc576:	2b02      	cmp	r3, #2
   bc578:	d02a      	beq.n	bc5d0 <__gethex+0x310>
   bc57a:	2b03      	cmp	r3, #3
   bc57c:	d02c      	beq.n	bc5d8 <__gethex+0x318>
   bc57e:	2b01      	cmp	r3, #1
   bc580:	d11c      	bne.n	bc5bc <__gethex+0x2fc>
   bc582:	42ae      	cmp	r6, r5
   bc584:	d11a      	bne.n	bc5bc <__gethex+0x2fc>
   bc586:	2e01      	cmp	r6, #1
   bc588:	d112      	bne.n	bc5b0 <__gethex+0x2f0>
   bc58a:	9a04      	ldr	r2, [sp, #16]
   bc58c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc590:	6013      	str	r3, [r2, #0]
   bc592:	2301      	movs	r3, #1
   bc594:	6123      	str	r3, [r4, #16]
   bc596:	f8c9 3000 	str.w	r3, [r9]
   bc59a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc59c:	2762      	movs	r7, #98	; 0x62
   bc59e:	601c      	str	r4, [r3, #0]
   bc5a0:	e723      	b.n	bc3ea <__gethex+0x12a>
   bc5a2:	bf00      	nop
   bc5a4:	000be1f8 	.word	0x000be1f8
   bc5a8:	000be160 	.word	0x000be160
   bc5ac:	000be171 	.word	0x000be171
   bc5b0:	1e71      	subs	r1, r6, #1
   bc5b2:	4620      	mov	r0, r4
   bc5b4:	f000 fe42 	bl	bd23c <__any_on>
   bc5b8:	2800      	cmp	r0, #0
   bc5ba:	d1e6      	bne.n	bc58a <__gethex+0x2ca>
   bc5bc:	ee18 0a10 	vmov	r0, s16
   bc5c0:	4621      	mov	r1, r4
   bc5c2:	f000 f9db 	bl	bc97c <_Bfree>
   bc5c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc5c8:	2300      	movs	r3, #0
   bc5ca:	6013      	str	r3, [r2, #0]
   bc5cc:	2750      	movs	r7, #80	; 0x50
   bc5ce:	e70c      	b.n	bc3ea <__gethex+0x12a>
   bc5d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc5d2:	2b00      	cmp	r3, #0
   bc5d4:	d1f2      	bne.n	bc5bc <__gethex+0x2fc>
   bc5d6:	e7d8      	b.n	bc58a <__gethex+0x2ca>
   bc5d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc5da:	2b00      	cmp	r3, #0
   bc5dc:	d1d5      	bne.n	bc58a <__gethex+0x2ca>
   bc5de:	e7ed      	b.n	bc5bc <__gethex+0x2fc>
   bc5e0:	1e6f      	subs	r7, r5, #1
   bc5e2:	f1ba 0f00 	cmp.w	sl, #0
   bc5e6:	d131      	bne.n	bc64c <__gethex+0x38c>
   bc5e8:	b127      	cbz	r7, bc5f4 <__gethex+0x334>
   bc5ea:	4639      	mov	r1, r7
   bc5ec:	4620      	mov	r0, r4
   bc5ee:	f000 fe25 	bl	bd23c <__any_on>
   bc5f2:	4682      	mov	sl, r0
   bc5f4:	117b      	asrs	r3, r7, #5
   bc5f6:	2101      	movs	r1, #1
   bc5f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc5fc:	f007 071f 	and.w	r7, r7, #31
   bc600:	fa01 f707 	lsl.w	r7, r1, r7
   bc604:	421f      	tst	r7, r3
   bc606:	4629      	mov	r1, r5
   bc608:	4620      	mov	r0, r4
   bc60a:	bf18      	it	ne
   bc60c:	f04a 0a02 	orrne.w	sl, sl, #2
   bc610:	1b76      	subs	r6, r6, r5
   bc612:	f7ff fded 	bl	bc1f0 <rshift>
   bc616:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc61a:	2702      	movs	r7, #2
   bc61c:	f1ba 0f00 	cmp.w	sl, #0
   bc620:	d048      	beq.n	bc6b4 <__gethex+0x3f4>
   bc622:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc626:	2b02      	cmp	r3, #2
   bc628:	d015      	beq.n	bc656 <__gethex+0x396>
   bc62a:	2b03      	cmp	r3, #3
   bc62c:	d017      	beq.n	bc65e <__gethex+0x39e>
   bc62e:	2b01      	cmp	r3, #1
   bc630:	d109      	bne.n	bc646 <__gethex+0x386>
   bc632:	f01a 0f02 	tst.w	sl, #2
   bc636:	d006      	beq.n	bc646 <__gethex+0x386>
   bc638:	f8d9 0000 	ldr.w	r0, [r9]
   bc63c:	ea4a 0a00 	orr.w	sl, sl, r0
   bc640:	f01a 0f01 	tst.w	sl, #1
   bc644:	d10e      	bne.n	bc664 <__gethex+0x3a4>
   bc646:	f047 0710 	orr.w	r7, r7, #16
   bc64a:	e033      	b.n	bc6b4 <__gethex+0x3f4>
   bc64c:	f04f 0a01 	mov.w	sl, #1
   bc650:	e7d0      	b.n	bc5f4 <__gethex+0x334>
   bc652:	2701      	movs	r7, #1
   bc654:	e7e2      	b.n	bc61c <__gethex+0x35c>
   bc656:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc658:	f1c3 0301 	rsb	r3, r3, #1
   bc65c:	9315      	str	r3, [sp, #84]	; 0x54
   bc65e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc660:	2b00      	cmp	r3, #0
   bc662:	d0f0      	beq.n	bc646 <__gethex+0x386>
   bc664:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc668:	f104 0314 	add.w	r3, r4, #20
   bc66c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc670:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc674:	f04f 0c00 	mov.w	ip, #0
   bc678:	4618      	mov	r0, r3
   bc67a:	f853 2b04 	ldr.w	r2, [r3], #4
   bc67e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bc682:	d01c      	beq.n	bc6be <__gethex+0x3fe>
   bc684:	3201      	adds	r2, #1
   bc686:	6002      	str	r2, [r0, #0]
   bc688:	2f02      	cmp	r7, #2
   bc68a:	f104 0314 	add.w	r3, r4, #20
   bc68e:	d13f      	bne.n	bc710 <__gethex+0x450>
   bc690:	f8d8 2000 	ldr.w	r2, [r8]
   bc694:	3a01      	subs	r2, #1
   bc696:	42b2      	cmp	r2, r6
   bc698:	d10a      	bne.n	bc6b0 <__gethex+0x3f0>
   bc69a:	1171      	asrs	r1, r6, #5
   bc69c:	2201      	movs	r2, #1
   bc69e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc6a2:	f006 061f 	and.w	r6, r6, #31
   bc6a6:	fa02 f606 	lsl.w	r6, r2, r6
   bc6aa:	421e      	tst	r6, r3
   bc6ac:	bf18      	it	ne
   bc6ae:	4617      	movne	r7, r2
   bc6b0:	f047 0720 	orr.w	r7, r7, #32
   bc6b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc6b6:	601c      	str	r4, [r3, #0]
   bc6b8:	9b04      	ldr	r3, [sp, #16]
   bc6ba:	601d      	str	r5, [r3, #0]
   bc6bc:	e695      	b.n	bc3ea <__gethex+0x12a>
   bc6be:	4299      	cmp	r1, r3
   bc6c0:	f843 cc04 	str.w	ip, [r3, #-4]
   bc6c4:	d8d8      	bhi.n	bc678 <__gethex+0x3b8>
   bc6c6:	68a3      	ldr	r3, [r4, #8]
   bc6c8:	459b      	cmp	fp, r3
   bc6ca:	db19      	blt.n	bc700 <__gethex+0x440>
   bc6cc:	6861      	ldr	r1, [r4, #4]
   bc6ce:	ee18 0a10 	vmov	r0, s16
   bc6d2:	3101      	adds	r1, #1
   bc6d4:	f000 f912 	bl	bc8fc <_Balloc>
   bc6d8:	4681      	mov	r9, r0
   bc6da:	b918      	cbnz	r0, bc6e4 <__gethex+0x424>
   bc6dc:	4b1a      	ldr	r3, [pc, #104]	; (bc748 <__gethex+0x488>)
   bc6de:	4602      	mov	r2, r0
   bc6e0:	2184      	movs	r1, #132	; 0x84
   bc6e2:	e6a8      	b.n	bc436 <__gethex+0x176>
   bc6e4:	6922      	ldr	r2, [r4, #16]
   bc6e6:	3202      	adds	r2, #2
   bc6e8:	f104 010c 	add.w	r1, r4, #12
   bc6ec:	0092      	lsls	r2, r2, #2
   bc6ee:	300c      	adds	r0, #12
   bc6f0:	f7fe fd2b 	bl	bb14a <memcpy>
   bc6f4:	4621      	mov	r1, r4
   bc6f6:	ee18 0a10 	vmov	r0, s16
   bc6fa:	f000 f93f 	bl	bc97c <_Bfree>
   bc6fe:	464c      	mov	r4, r9
   bc700:	6923      	ldr	r3, [r4, #16]
   bc702:	1c5a      	adds	r2, r3, #1
   bc704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc708:	6122      	str	r2, [r4, #16]
   bc70a:	2201      	movs	r2, #1
   bc70c:	615a      	str	r2, [r3, #20]
   bc70e:	e7bb      	b.n	bc688 <__gethex+0x3c8>
   bc710:	6922      	ldr	r2, [r4, #16]
   bc712:	455a      	cmp	r2, fp
   bc714:	dd0b      	ble.n	bc72e <__gethex+0x46e>
   bc716:	2101      	movs	r1, #1
   bc718:	4620      	mov	r0, r4
   bc71a:	f7ff fd69 	bl	bc1f0 <rshift>
   bc71e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc722:	3501      	adds	r5, #1
   bc724:	42ab      	cmp	r3, r5
   bc726:	f6ff aed0 	blt.w	bc4ca <__gethex+0x20a>
   bc72a:	2701      	movs	r7, #1
   bc72c:	e7c0      	b.n	bc6b0 <__gethex+0x3f0>
   bc72e:	f016 061f 	ands.w	r6, r6, #31
   bc732:	d0fa      	beq.n	bc72a <__gethex+0x46a>
   bc734:	4453      	add	r3, sl
   bc736:	f1c6 0620 	rsb	r6, r6, #32
   bc73a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc73e:	f000 f9cf 	bl	bcae0 <__hi0bits>
   bc742:	42b0      	cmp	r0, r6
   bc744:	dbe7      	blt.n	bc716 <__gethex+0x456>
   bc746:	e7f0      	b.n	bc72a <__gethex+0x46a>
   bc748:	000be160 	.word	0x000be160

000bc74c <L_shift>:
   bc74c:	f1c2 0208 	rsb	r2, r2, #8
   bc750:	0092      	lsls	r2, r2, #2
   bc752:	b570      	push	{r4, r5, r6, lr}
   bc754:	f1c2 0620 	rsb	r6, r2, #32
   bc758:	6843      	ldr	r3, [r0, #4]
   bc75a:	6804      	ldr	r4, [r0, #0]
   bc75c:	fa03 f506 	lsl.w	r5, r3, r6
   bc760:	432c      	orrs	r4, r5
   bc762:	40d3      	lsrs	r3, r2
   bc764:	6004      	str	r4, [r0, #0]
   bc766:	f840 3f04 	str.w	r3, [r0, #4]!
   bc76a:	4288      	cmp	r0, r1
   bc76c:	d3f4      	bcc.n	bc758 <L_shift+0xc>
   bc76e:	bd70      	pop	{r4, r5, r6, pc}

000bc770 <__match>:
   bc770:	b530      	push	{r4, r5, lr}
   bc772:	6803      	ldr	r3, [r0, #0]
   bc774:	3301      	adds	r3, #1
   bc776:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc77a:	b914      	cbnz	r4, bc782 <__match+0x12>
   bc77c:	6003      	str	r3, [r0, #0]
   bc77e:	2001      	movs	r0, #1
   bc780:	bd30      	pop	{r4, r5, pc}
   bc782:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc786:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc78a:	2d19      	cmp	r5, #25
   bc78c:	bf98      	it	ls
   bc78e:	3220      	addls	r2, #32
   bc790:	42a2      	cmp	r2, r4
   bc792:	d0f0      	beq.n	bc776 <__match+0x6>
   bc794:	2000      	movs	r0, #0
   bc796:	e7f3      	b.n	bc780 <__match+0x10>

000bc798 <__hexnan>:
   bc798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc79c:	680b      	ldr	r3, [r1, #0]
   bc79e:	115e      	asrs	r6, r3, #5
   bc7a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc7a4:	f013 031f 	ands.w	r3, r3, #31
   bc7a8:	b087      	sub	sp, #28
   bc7aa:	bf18      	it	ne
   bc7ac:	3604      	addne	r6, #4
   bc7ae:	2500      	movs	r5, #0
   bc7b0:	1f37      	subs	r7, r6, #4
   bc7b2:	4690      	mov	r8, r2
   bc7b4:	6802      	ldr	r2, [r0, #0]
   bc7b6:	9301      	str	r3, [sp, #4]
   bc7b8:	4682      	mov	sl, r0
   bc7ba:	f846 5c04 	str.w	r5, [r6, #-4]
   bc7be:	46b9      	mov	r9, r7
   bc7c0:	463c      	mov	r4, r7
   bc7c2:	9502      	str	r5, [sp, #8]
   bc7c4:	46ab      	mov	fp, r5
   bc7c6:	7851      	ldrb	r1, [r2, #1]
   bc7c8:	1c53      	adds	r3, r2, #1
   bc7ca:	9303      	str	r3, [sp, #12]
   bc7cc:	b341      	cbz	r1, bc820 <__hexnan+0x88>
   bc7ce:	4608      	mov	r0, r1
   bc7d0:	9205      	str	r2, [sp, #20]
   bc7d2:	9104      	str	r1, [sp, #16]
   bc7d4:	f7ff fd5e 	bl	bc294 <__hexdig_fun>
   bc7d8:	2800      	cmp	r0, #0
   bc7da:	d14f      	bne.n	bc87c <__hexnan+0xe4>
   bc7dc:	9904      	ldr	r1, [sp, #16]
   bc7de:	9a05      	ldr	r2, [sp, #20]
   bc7e0:	2920      	cmp	r1, #32
   bc7e2:	d818      	bhi.n	bc816 <__hexnan+0x7e>
   bc7e4:	9b02      	ldr	r3, [sp, #8]
   bc7e6:	459b      	cmp	fp, r3
   bc7e8:	dd13      	ble.n	bc812 <__hexnan+0x7a>
   bc7ea:	454c      	cmp	r4, r9
   bc7ec:	d206      	bcs.n	bc7fc <__hexnan+0x64>
   bc7ee:	2d07      	cmp	r5, #7
   bc7f0:	dc04      	bgt.n	bc7fc <__hexnan+0x64>
   bc7f2:	462a      	mov	r2, r5
   bc7f4:	4649      	mov	r1, r9
   bc7f6:	4620      	mov	r0, r4
   bc7f8:	f7ff ffa8 	bl	bc74c <L_shift>
   bc7fc:	4544      	cmp	r4, r8
   bc7fe:	d950      	bls.n	bc8a2 <__hexnan+0x10a>
   bc800:	2300      	movs	r3, #0
   bc802:	f1a4 0904 	sub.w	r9, r4, #4
   bc806:	f844 3c04 	str.w	r3, [r4, #-4]
   bc80a:	f8cd b008 	str.w	fp, [sp, #8]
   bc80e:	464c      	mov	r4, r9
   bc810:	461d      	mov	r5, r3
   bc812:	9a03      	ldr	r2, [sp, #12]
   bc814:	e7d7      	b.n	bc7c6 <__hexnan+0x2e>
   bc816:	2929      	cmp	r1, #41	; 0x29
   bc818:	d156      	bne.n	bc8c8 <__hexnan+0x130>
   bc81a:	3202      	adds	r2, #2
   bc81c:	f8ca 2000 	str.w	r2, [sl]
   bc820:	f1bb 0f00 	cmp.w	fp, #0
   bc824:	d050      	beq.n	bc8c8 <__hexnan+0x130>
   bc826:	454c      	cmp	r4, r9
   bc828:	d206      	bcs.n	bc838 <__hexnan+0xa0>
   bc82a:	2d07      	cmp	r5, #7
   bc82c:	dc04      	bgt.n	bc838 <__hexnan+0xa0>
   bc82e:	462a      	mov	r2, r5
   bc830:	4649      	mov	r1, r9
   bc832:	4620      	mov	r0, r4
   bc834:	f7ff ff8a 	bl	bc74c <L_shift>
   bc838:	4544      	cmp	r4, r8
   bc83a:	d934      	bls.n	bc8a6 <__hexnan+0x10e>
   bc83c:	f1a8 0204 	sub.w	r2, r8, #4
   bc840:	4623      	mov	r3, r4
   bc842:	f853 1b04 	ldr.w	r1, [r3], #4
   bc846:	f842 1f04 	str.w	r1, [r2, #4]!
   bc84a:	429f      	cmp	r7, r3
   bc84c:	d2f9      	bcs.n	bc842 <__hexnan+0xaa>
   bc84e:	1b3b      	subs	r3, r7, r4
   bc850:	f023 0303 	bic.w	r3, r3, #3
   bc854:	3304      	adds	r3, #4
   bc856:	3401      	adds	r4, #1
   bc858:	3e03      	subs	r6, #3
   bc85a:	42b4      	cmp	r4, r6
   bc85c:	bf88      	it	hi
   bc85e:	2304      	movhi	r3, #4
   bc860:	4443      	add	r3, r8
   bc862:	2200      	movs	r2, #0
   bc864:	f843 2b04 	str.w	r2, [r3], #4
   bc868:	429f      	cmp	r7, r3
   bc86a:	d2fb      	bcs.n	bc864 <__hexnan+0xcc>
   bc86c:	683b      	ldr	r3, [r7, #0]
   bc86e:	b91b      	cbnz	r3, bc878 <__hexnan+0xe0>
   bc870:	4547      	cmp	r7, r8
   bc872:	d127      	bne.n	bc8c4 <__hexnan+0x12c>
   bc874:	2301      	movs	r3, #1
   bc876:	603b      	str	r3, [r7, #0]
   bc878:	2005      	movs	r0, #5
   bc87a:	e026      	b.n	bc8ca <__hexnan+0x132>
   bc87c:	3501      	adds	r5, #1
   bc87e:	2d08      	cmp	r5, #8
   bc880:	f10b 0b01 	add.w	fp, fp, #1
   bc884:	dd06      	ble.n	bc894 <__hexnan+0xfc>
   bc886:	4544      	cmp	r4, r8
   bc888:	d9c3      	bls.n	bc812 <__hexnan+0x7a>
   bc88a:	2300      	movs	r3, #0
   bc88c:	f844 3c04 	str.w	r3, [r4, #-4]
   bc890:	2501      	movs	r5, #1
   bc892:	3c04      	subs	r4, #4
   bc894:	6822      	ldr	r2, [r4, #0]
   bc896:	f000 000f 	and.w	r0, r0, #15
   bc89a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc89e:	6022      	str	r2, [r4, #0]
   bc8a0:	e7b7      	b.n	bc812 <__hexnan+0x7a>
   bc8a2:	2508      	movs	r5, #8
   bc8a4:	e7b5      	b.n	bc812 <__hexnan+0x7a>
   bc8a6:	9b01      	ldr	r3, [sp, #4]
   bc8a8:	2b00      	cmp	r3, #0
   bc8aa:	d0df      	beq.n	bc86c <__hexnan+0xd4>
   bc8ac:	f04f 32ff 	mov.w	r2, #4294967295
   bc8b0:	f1c3 0320 	rsb	r3, r3, #32
   bc8b4:	fa22 f303 	lsr.w	r3, r2, r3
   bc8b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc8bc:	401a      	ands	r2, r3
   bc8be:	f846 2c04 	str.w	r2, [r6, #-4]
   bc8c2:	e7d3      	b.n	bc86c <__hexnan+0xd4>
   bc8c4:	3f04      	subs	r7, #4
   bc8c6:	e7d1      	b.n	bc86c <__hexnan+0xd4>
   bc8c8:	2004      	movs	r0, #4
   bc8ca:	b007      	add	sp, #28
   bc8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc8d0 <__retarget_lock_acquire_recursive>:
   bc8d0:	4770      	bx	lr

000bc8d2 <__retarget_lock_release>:
   bc8d2:	4770      	bx	lr

000bc8d4 <__retarget_lock_release_recursive>:
   bc8d4:	4770      	bx	lr

000bc8d6 <__ascii_mbtowc>:
   bc8d6:	b082      	sub	sp, #8
   bc8d8:	b901      	cbnz	r1, bc8dc <__ascii_mbtowc+0x6>
   bc8da:	a901      	add	r1, sp, #4
   bc8dc:	b142      	cbz	r2, bc8f0 <__ascii_mbtowc+0x1a>
   bc8de:	b14b      	cbz	r3, bc8f4 <__ascii_mbtowc+0x1e>
   bc8e0:	7813      	ldrb	r3, [r2, #0]
   bc8e2:	600b      	str	r3, [r1, #0]
   bc8e4:	7812      	ldrb	r2, [r2, #0]
   bc8e6:	1e10      	subs	r0, r2, #0
   bc8e8:	bf18      	it	ne
   bc8ea:	2001      	movne	r0, #1
   bc8ec:	b002      	add	sp, #8
   bc8ee:	4770      	bx	lr
   bc8f0:	4610      	mov	r0, r2
   bc8f2:	e7fb      	b.n	bc8ec <__ascii_mbtowc+0x16>
   bc8f4:	f06f 0001 	mvn.w	r0, #1
   bc8f8:	e7f8      	b.n	bc8ec <__ascii_mbtowc+0x16>
	...

000bc8fc <_Balloc>:
   bc8fc:	b570      	push	{r4, r5, r6, lr}
   bc8fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc900:	4604      	mov	r4, r0
   bc902:	460d      	mov	r5, r1
   bc904:	b976      	cbnz	r6, bc924 <_Balloc+0x28>
   bc906:	2010      	movs	r0, #16
   bc908:	f7fa fa88 	bl	b6e1c <malloc>
   bc90c:	4602      	mov	r2, r0
   bc90e:	6260      	str	r0, [r4, #36]	; 0x24
   bc910:	b920      	cbnz	r0, bc91c <_Balloc+0x20>
   bc912:	4b18      	ldr	r3, [pc, #96]	; (bc974 <_Balloc+0x78>)
   bc914:	4818      	ldr	r0, [pc, #96]	; (bc978 <_Balloc+0x7c>)
   bc916:	2166      	movs	r1, #102	; 0x66
   bc918:	f7fa fac8 	bl	b6eac <__assert_func>
   bc91c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc920:	6006      	str	r6, [r0, #0]
   bc922:	60c6      	str	r6, [r0, #12]
   bc924:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc926:	68f3      	ldr	r3, [r6, #12]
   bc928:	b183      	cbz	r3, bc94c <_Balloc+0x50>
   bc92a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc92c:	68db      	ldr	r3, [r3, #12]
   bc92e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc932:	b9b8      	cbnz	r0, bc964 <_Balloc+0x68>
   bc934:	2101      	movs	r1, #1
   bc936:	fa01 f605 	lsl.w	r6, r1, r5
   bc93a:	1d72      	adds	r2, r6, #5
   bc93c:	0092      	lsls	r2, r2, #2
   bc93e:	4620      	mov	r0, r4
   bc940:	f000 fc9d 	bl	bd27e <_calloc_r>
   bc944:	b160      	cbz	r0, bc960 <_Balloc+0x64>
   bc946:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc94a:	e00e      	b.n	bc96a <_Balloc+0x6e>
   bc94c:	2221      	movs	r2, #33	; 0x21
   bc94e:	2104      	movs	r1, #4
   bc950:	4620      	mov	r0, r4
   bc952:	f000 fc94 	bl	bd27e <_calloc_r>
   bc956:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc958:	60f0      	str	r0, [r6, #12]
   bc95a:	68db      	ldr	r3, [r3, #12]
   bc95c:	2b00      	cmp	r3, #0
   bc95e:	d1e4      	bne.n	bc92a <_Balloc+0x2e>
   bc960:	2000      	movs	r0, #0
   bc962:	bd70      	pop	{r4, r5, r6, pc}
   bc964:	6802      	ldr	r2, [r0, #0]
   bc966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc96a:	2300      	movs	r3, #0
   bc96c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc970:	e7f7      	b.n	bc962 <_Balloc+0x66>
   bc972:	bf00      	nop
   bc974:	000bdee9 	.word	0x000bdee9
   bc978:	000be20c 	.word	0x000be20c

000bc97c <_Bfree>:
   bc97c:	b570      	push	{r4, r5, r6, lr}
   bc97e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc980:	4605      	mov	r5, r0
   bc982:	460c      	mov	r4, r1
   bc984:	b976      	cbnz	r6, bc9a4 <_Bfree+0x28>
   bc986:	2010      	movs	r0, #16
   bc988:	f7fa fa48 	bl	b6e1c <malloc>
   bc98c:	4602      	mov	r2, r0
   bc98e:	6268      	str	r0, [r5, #36]	; 0x24
   bc990:	b920      	cbnz	r0, bc99c <_Bfree+0x20>
   bc992:	4b09      	ldr	r3, [pc, #36]	; (bc9b8 <_Bfree+0x3c>)
   bc994:	4809      	ldr	r0, [pc, #36]	; (bc9bc <_Bfree+0x40>)
   bc996:	218a      	movs	r1, #138	; 0x8a
   bc998:	f7fa fa88 	bl	b6eac <__assert_func>
   bc99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc9a0:	6006      	str	r6, [r0, #0]
   bc9a2:	60c6      	str	r6, [r0, #12]
   bc9a4:	b13c      	cbz	r4, bc9b6 <_Bfree+0x3a>
   bc9a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc9a8:	6862      	ldr	r2, [r4, #4]
   bc9aa:	68db      	ldr	r3, [r3, #12]
   bc9ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc9b0:	6021      	str	r1, [r4, #0]
   bc9b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc9b6:	bd70      	pop	{r4, r5, r6, pc}
   bc9b8:	000bdee9 	.word	0x000bdee9
   bc9bc:	000be20c 	.word	0x000be20c

000bc9c0 <__multadd>:
   bc9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc9c4:	690d      	ldr	r5, [r1, #16]
   bc9c6:	4607      	mov	r7, r0
   bc9c8:	460c      	mov	r4, r1
   bc9ca:	461e      	mov	r6, r3
   bc9cc:	f101 0c14 	add.w	ip, r1, #20
   bc9d0:	2000      	movs	r0, #0
   bc9d2:	f8dc 3000 	ldr.w	r3, [ip]
   bc9d6:	b299      	uxth	r1, r3
   bc9d8:	fb02 6101 	mla	r1, r2, r1, r6
   bc9dc:	0c1e      	lsrs	r6, r3, #16
   bc9de:	0c0b      	lsrs	r3, r1, #16
   bc9e0:	fb02 3306 	mla	r3, r2, r6, r3
   bc9e4:	b289      	uxth	r1, r1
   bc9e6:	3001      	adds	r0, #1
   bc9e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc9ec:	4285      	cmp	r5, r0
   bc9ee:	f84c 1b04 	str.w	r1, [ip], #4
   bc9f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc9f6:	dcec      	bgt.n	bc9d2 <__multadd+0x12>
   bc9f8:	b30e      	cbz	r6, bca3e <__multadd+0x7e>
   bc9fa:	68a3      	ldr	r3, [r4, #8]
   bc9fc:	42ab      	cmp	r3, r5
   bc9fe:	dc19      	bgt.n	bca34 <__multadd+0x74>
   bca00:	6861      	ldr	r1, [r4, #4]
   bca02:	4638      	mov	r0, r7
   bca04:	3101      	adds	r1, #1
   bca06:	f7ff ff79 	bl	bc8fc <_Balloc>
   bca0a:	4680      	mov	r8, r0
   bca0c:	b928      	cbnz	r0, bca1a <__multadd+0x5a>
   bca0e:	4602      	mov	r2, r0
   bca10:	4b0c      	ldr	r3, [pc, #48]	; (bca44 <__multadd+0x84>)
   bca12:	480d      	ldr	r0, [pc, #52]	; (bca48 <__multadd+0x88>)
   bca14:	21b5      	movs	r1, #181	; 0xb5
   bca16:	f7fa fa49 	bl	b6eac <__assert_func>
   bca1a:	6922      	ldr	r2, [r4, #16]
   bca1c:	3202      	adds	r2, #2
   bca1e:	f104 010c 	add.w	r1, r4, #12
   bca22:	0092      	lsls	r2, r2, #2
   bca24:	300c      	adds	r0, #12
   bca26:	f7fe fb90 	bl	bb14a <memcpy>
   bca2a:	4621      	mov	r1, r4
   bca2c:	4638      	mov	r0, r7
   bca2e:	f7ff ffa5 	bl	bc97c <_Bfree>
   bca32:	4644      	mov	r4, r8
   bca34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bca38:	3501      	adds	r5, #1
   bca3a:	615e      	str	r6, [r3, #20]
   bca3c:	6125      	str	r5, [r4, #16]
   bca3e:	4620      	mov	r0, r4
   bca40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bca44:	000be160 	.word	0x000be160
   bca48:	000be20c 	.word	0x000be20c

000bca4c <__s2b>:
   bca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bca50:	460c      	mov	r4, r1
   bca52:	4615      	mov	r5, r2
   bca54:	461f      	mov	r7, r3
   bca56:	2209      	movs	r2, #9
   bca58:	3308      	adds	r3, #8
   bca5a:	4606      	mov	r6, r0
   bca5c:	fb93 f3f2 	sdiv	r3, r3, r2
   bca60:	2100      	movs	r1, #0
   bca62:	2201      	movs	r2, #1
   bca64:	429a      	cmp	r2, r3
   bca66:	db09      	blt.n	bca7c <__s2b+0x30>
   bca68:	4630      	mov	r0, r6
   bca6a:	f7ff ff47 	bl	bc8fc <_Balloc>
   bca6e:	b940      	cbnz	r0, bca82 <__s2b+0x36>
   bca70:	4602      	mov	r2, r0
   bca72:	4b19      	ldr	r3, [pc, #100]	; (bcad8 <__s2b+0x8c>)
   bca74:	4819      	ldr	r0, [pc, #100]	; (bcadc <__s2b+0x90>)
   bca76:	21ce      	movs	r1, #206	; 0xce
   bca78:	f7fa fa18 	bl	b6eac <__assert_func>
   bca7c:	0052      	lsls	r2, r2, #1
   bca7e:	3101      	adds	r1, #1
   bca80:	e7f0      	b.n	bca64 <__s2b+0x18>
   bca82:	9b08      	ldr	r3, [sp, #32]
   bca84:	6143      	str	r3, [r0, #20]
   bca86:	2d09      	cmp	r5, #9
   bca88:	f04f 0301 	mov.w	r3, #1
   bca8c:	6103      	str	r3, [r0, #16]
   bca8e:	dd16      	ble.n	bcabe <__s2b+0x72>
   bca90:	f104 0909 	add.w	r9, r4, #9
   bca94:	46c8      	mov	r8, r9
   bca96:	442c      	add	r4, r5
   bca98:	f818 3b01 	ldrb.w	r3, [r8], #1
   bca9c:	4601      	mov	r1, r0
   bca9e:	3b30      	subs	r3, #48	; 0x30
   bcaa0:	220a      	movs	r2, #10
   bcaa2:	4630      	mov	r0, r6
   bcaa4:	f7ff ff8c 	bl	bc9c0 <__multadd>
   bcaa8:	45a0      	cmp	r8, r4
   bcaaa:	d1f5      	bne.n	bca98 <__s2b+0x4c>
   bcaac:	f1a5 0408 	sub.w	r4, r5, #8
   bcab0:	444c      	add	r4, r9
   bcab2:	1b2d      	subs	r5, r5, r4
   bcab4:	1963      	adds	r3, r4, r5
   bcab6:	42bb      	cmp	r3, r7
   bcab8:	db04      	blt.n	bcac4 <__s2b+0x78>
   bcaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcabe:	340a      	adds	r4, #10
   bcac0:	2509      	movs	r5, #9
   bcac2:	e7f6      	b.n	bcab2 <__s2b+0x66>
   bcac4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bcac8:	4601      	mov	r1, r0
   bcaca:	3b30      	subs	r3, #48	; 0x30
   bcacc:	220a      	movs	r2, #10
   bcace:	4630      	mov	r0, r6
   bcad0:	f7ff ff76 	bl	bc9c0 <__multadd>
   bcad4:	e7ee      	b.n	bcab4 <__s2b+0x68>
   bcad6:	bf00      	nop
   bcad8:	000be160 	.word	0x000be160
   bcadc:	000be20c 	.word	0x000be20c

000bcae0 <__hi0bits>:
   bcae0:	0c03      	lsrs	r3, r0, #16
   bcae2:	041b      	lsls	r3, r3, #16
   bcae4:	b9d3      	cbnz	r3, bcb1c <__hi0bits+0x3c>
   bcae6:	0400      	lsls	r0, r0, #16
   bcae8:	2310      	movs	r3, #16
   bcaea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bcaee:	bf04      	itt	eq
   bcaf0:	0200      	lsleq	r0, r0, #8
   bcaf2:	3308      	addeq	r3, #8
   bcaf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bcaf8:	bf04      	itt	eq
   bcafa:	0100      	lsleq	r0, r0, #4
   bcafc:	3304      	addeq	r3, #4
   bcafe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcb02:	bf04      	itt	eq
   bcb04:	0080      	lsleq	r0, r0, #2
   bcb06:	3302      	addeq	r3, #2
   bcb08:	2800      	cmp	r0, #0
   bcb0a:	db05      	blt.n	bcb18 <__hi0bits+0x38>
   bcb0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bcb10:	f103 0301 	add.w	r3, r3, #1
   bcb14:	bf08      	it	eq
   bcb16:	2320      	moveq	r3, #32
   bcb18:	4618      	mov	r0, r3
   bcb1a:	4770      	bx	lr
   bcb1c:	2300      	movs	r3, #0
   bcb1e:	e7e4      	b.n	bcaea <__hi0bits+0xa>

000bcb20 <__lo0bits>:
   bcb20:	6803      	ldr	r3, [r0, #0]
   bcb22:	f013 0207 	ands.w	r2, r3, #7
   bcb26:	4601      	mov	r1, r0
   bcb28:	d00b      	beq.n	bcb42 <__lo0bits+0x22>
   bcb2a:	07da      	lsls	r2, r3, #31
   bcb2c:	d423      	bmi.n	bcb76 <__lo0bits+0x56>
   bcb2e:	0798      	lsls	r0, r3, #30
   bcb30:	bf49      	itett	mi
   bcb32:	085b      	lsrmi	r3, r3, #1
   bcb34:	089b      	lsrpl	r3, r3, #2
   bcb36:	2001      	movmi	r0, #1
   bcb38:	600b      	strmi	r3, [r1, #0]
   bcb3a:	bf5c      	itt	pl
   bcb3c:	600b      	strpl	r3, [r1, #0]
   bcb3e:	2002      	movpl	r0, #2
   bcb40:	4770      	bx	lr
   bcb42:	b298      	uxth	r0, r3
   bcb44:	b9a8      	cbnz	r0, bcb72 <__lo0bits+0x52>
   bcb46:	0c1b      	lsrs	r3, r3, #16
   bcb48:	2010      	movs	r0, #16
   bcb4a:	b2da      	uxtb	r2, r3
   bcb4c:	b90a      	cbnz	r2, bcb52 <__lo0bits+0x32>
   bcb4e:	3008      	adds	r0, #8
   bcb50:	0a1b      	lsrs	r3, r3, #8
   bcb52:	071a      	lsls	r2, r3, #28
   bcb54:	bf04      	itt	eq
   bcb56:	091b      	lsreq	r3, r3, #4
   bcb58:	3004      	addeq	r0, #4
   bcb5a:	079a      	lsls	r2, r3, #30
   bcb5c:	bf04      	itt	eq
   bcb5e:	089b      	lsreq	r3, r3, #2
   bcb60:	3002      	addeq	r0, #2
   bcb62:	07da      	lsls	r2, r3, #31
   bcb64:	d403      	bmi.n	bcb6e <__lo0bits+0x4e>
   bcb66:	085b      	lsrs	r3, r3, #1
   bcb68:	f100 0001 	add.w	r0, r0, #1
   bcb6c:	d005      	beq.n	bcb7a <__lo0bits+0x5a>
   bcb6e:	600b      	str	r3, [r1, #0]
   bcb70:	4770      	bx	lr
   bcb72:	4610      	mov	r0, r2
   bcb74:	e7e9      	b.n	bcb4a <__lo0bits+0x2a>
   bcb76:	2000      	movs	r0, #0
   bcb78:	4770      	bx	lr
   bcb7a:	2020      	movs	r0, #32
   bcb7c:	4770      	bx	lr
	...

000bcb80 <__i2b>:
   bcb80:	b510      	push	{r4, lr}
   bcb82:	460c      	mov	r4, r1
   bcb84:	2101      	movs	r1, #1
   bcb86:	f7ff feb9 	bl	bc8fc <_Balloc>
   bcb8a:	4602      	mov	r2, r0
   bcb8c:	b928      	cbnz	r0, bcb9a <__i2b+0x1a>
   bcb8e:	4b05      	ldr	r3, [pc, #20]	; (bcba4 <__i2b+0x24>)
   bcb90:	4805      	ldr	r0, [pc, #20]	; (bcba8 <__i2b+0x28>)
   bcb92:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bcb96:	f7fa f989 	bl	b6eac <__assert_func>
   bcb9a:	2301      	movs	r3, #1
   bcb9c:	6144      	str	r4, [r0, #20]
   bcb9e:	6103      	str	r3, [r0, #16]
   bcba0:	bd10      	pop	{r4, pc}
   bcba2:	bf00      	nop
   bcba4:	000be160 	.word	0x000be160
   bcba8:	000be20c 	.word	0x000be20c

000bcbac <__multiply>:
   bcbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcbb0:	4691      	mov	r9, r2
   bcbb2:	690a      	ldr	r2, [r1, #16]
   bcbb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcbb8:	429a      	cmp	r2, r3
   bcbba:	bfb8      	it	lt
   bcbbc:	460b      	movlt	r3, r1
   bcbbe:	460c      	mov	r4, r1
   bcbc0:	bfbc      	itt	lt
   bcbc2:	464c      	movlt	r4, r9
   bcbc4:	4699      	movlt	r9, r3
   bcbc6:	6927      	ldr	r7, [r4, #16]
   bcbc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bcbcc:	68a3      	ldr	r3, [r4, #8]
   bcbce:	6861      	ldr	r1, [r4, #4]
   bcbd0:	eb07 060a 	add.w	r6, r7, sl
   bcbd4:	42b3      	cmp	r3, r6
   bcbd6:	b085      	sub	sp, #20
   bcbd8:	bfb8      	it	lt
   bcbda:	3101      	addlt	r1, #1
   bcbdc:	f7ff fe8e 	bl	bc8fc <_Balloc>
   bcbe0:	b930      	cbnz	r0, bcbf0 <__multiply+0x44>
   bcbe2:	4602      	mov	r2, r0
   bcbe4:	4b44      	ldr	r3, [pc, #272]	; (bccf8 <__multiply+0x14c>)
   bcbe6:	4845      	ldr	r0, [pc, #276]	; (bccfc <__multiply+0x150>)
   bcbe8:	f240 115d 	movw	r1, #349	; 0x15d
   bcbec:	f7fa f95e 	bl	b6eac <__assert_func>
   bcbf0:	f100 0514 	add.w	r5, r0, #20
   bcbf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bcbf8:	462b      	mov	r3, r5
   bcbfa:	2200      	movs	r2, #0
   bcbfc:	4543      	cmp	r3, r8
   bcbfe:	d321      	bcc.n	bcc44 <__multiply+0x98>
   bcc00:	f104 0314 	add.w	r3, r4, #20
   bcc04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bcc08:	f109 0314 	add.w	r3, r9, #20
   bcc0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bcc10:	9202      	str	r2, [sp, #8]
   bcc12:	1b3a      	subs	r2, r7, r4
   bcc14:	3a15      	subs	r2, #21
   bcc16:	f022 0203 	bic.w	r2, r2, #3
   bcc1a:	3204      	adds	r2, #4
   bcc1c:	f104 0115 	add.w	r1, r4, #21
   bcc20:	428f      	cmp	r7, r1
   bcc22:	bf38      	it	cc
   bcc24:	2204      	movcc	r2, #4
   bcc26:	9201      	str	r2, [sp, #4]
   bcc28:	9a02      	ldr	r2, [sp, #8]
   bcc2a:	9303      	str	r3, [sp, #12]
   bcc2c:	429a      	cmp	r2, r3
   bcc2e:	d80c      	bhi.n	bcc4a <__multiply+0x9e>
   bcc30:	2e00      	cmp	r6, #0
   bcc32:	dd03      	ble.n	bcc3c <__multiply+0x90>
   bcc34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bcc38:	2b00      	cmp	r3, #0
   bcc3a:	d05a      	beq.n	bccf2 <__multiply+0x146>
   bcc3c:	6106      	str	r6, [r0, #16]
   bcc3e:	b005      	add	sp, #20
   bcc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcc44:	f843 2b04 	str.w	r2, [r3], #4
   bcc48:	e7d8      	b.n	bcbfc <__multiply+0x50>
   bcc4a:	f8b3 a000 	ldrh.w	sl, [r3]
   bcc4e:	f1ba 0f00 	cmp.w	sl, #0
   bcc52:	d024      	beq.n	bcc9e <__multiply+0xf2>
   bcc54:	f104 0e14 	add.w	lr, r4, #20
   bcc58:	46a9      	mov	r9, r5
   bcc5a:	f04f 0c00 	mov.w	ip, #0
   bcc5e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bcc62:	f8d9 1000 	ldr.w	r1, [r9]
   bcc66:	fa1f fb82 	uxth.w	fp, r2
   bcc6a:	b289      	uxth	r1, r1
   bcc6c:	fb0a 110b 	mla	r1, sl, fp, r1
   bcc70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bcc74:	f8d9 2000 	ldr.w	r2, [r9]
   bcc78:	4461      	add	r1, ip
   bcc7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcc7e:	fb0a c20b 	mla	r2, sl, fp, ip
   bcc82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bcc86:	b289      	uxth	r1, r1
   bcc88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bcc8c:	4577      	cmp	r7, lr
   bcc8e:	f849 1b04 	str.w	r1, [r9], #4
   bcc92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcc96:	d8e2      	bhi.n	bcc5e <__multiply+0xb2>
   bcc98:	9a01      	ldr	r2, [sp, #4]
   bcc9a:	f845 c002 	str.w	ip, [r5, r2]
   bcc9e:	9a03      	ldr	r2, [sp, #12]
   bcca0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bcca4:	3304      	adds	r3, #4
   bcca6:	f1b9 0f00 	cmp.w	r9, #0
   bccaa:	d020      	beq.n	bccee <__multiply+0x142>
   bccac:	6829      	ldr	r1, [r5, #0]
   bccae:	f104 0c14 	add.w	ip, r4, #20
   bccb2:	46ae      	mov	lr, r5
   bccb4:	f04f 0a00 	mov.w	sl, #0
   bccb8:	f8bc b000 	ldrh.w	fp, [ip]
   bccbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bccc0:	fb09 220b 	mla	r2, r9, fp, r2
   bccc4:	4492      	add	sl, r2
   bccc6:	b289      	uxth	r1, r1
   bccc8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bcccc:	f84e 1b04 	str.w	r1, [lr], #4
   bccd0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bccd4:	f8be 1000 	ldrh.w	r1, [lr]
   bccd8:	0c12      	lsrs	r2, r2, #16
   bccda:	fb09 1102 	mla	r1, r9, r2, r1
   bccde:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bcce2:	4567      	cmp	r7, ip
   bcce4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bcce8:	d8e6      	bhi.n	bccb8 <__multiply+0x10c>
   bccea:	9a01      	ldr	r2, [sp, #4]
   bccec:	50a9      	str	r1, [r5, r2]
   bccee:	3504      	adds	r5, #4
   bccf0:	e79a      	b.n	bcc28 <__multiply+0x7c>
   bccf2:	3e01      	subs	r6, #1
   bccf4:	e79c      	b.n	bcc30 <__multiply+0x84>
   bccf6:	bf00      	nop
   bccf8:	000be160 	.word	0x000be160
   bccfc:	000be20c 	.word	0x000be20c

000bcd00 <__pow5mult>:
   bcd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcd04:	4615      	mov	r5, r2
   bcd06:	f012 0203 	ands.w	r2, r2, #3
   bcd0a:	4606      	mov	r6, r0
   bcd0c:	460f      	mov	r7, r1
   bcd0e:	d007      	beq.n	bcd20 <__pow5mult+0x20>
   bcd10:	4c25      	ldr	r4, [pc, #148]	; (bcda8 <__pow5mult+0xa8>)
   bcd12:	3a01      	subs	r2, #1
   bcd14:	2300      	movs	r3, #0
   bcd16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bcd1a:	f7ff fe51 	bl	bc9c0 <__multadd>
   bcd1e:	4607      	mov	r7, r0
   bcd20:	10ad      	asrs	r5, r5, #2
   bcd22:	d03d      	beq.n	bcda0 <__pow5mult+0xa0>
   bcd24:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bcd26:	b97c      	cbnz	r4, bcd48 <__pow5mult+0x48>
   bcd28:	2010      	movs	r0, #16
   bcd2a:	f7fa f877 	bl	b6e1c <malloc>
   bcd2e:	4602      	mov	r2, r0
   bcd30:	6270      	str	r0, [r6, #36]	; 0x24
   bcd32:	b928      	cbnz	r0, bcd40 <__pow5mult+0x40>
   bcd34:	4b1d      	ldr	r3, [pc, #116]	; (bcdac <__pow5mult+0xac>)
   bcd36:	481e      	ldr	r0, [pc, #120]	; (bcdb0 <__pow5mult+0xb0>)
   bcd38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bcd3c:	f7fa f8b6 	bl	b6eac <__assert_func>
   bcd40:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcd44:	6004      	str	r4, [r0, #0]
   bcd46:	60c4      	str	r4, [r0, #12]
   bcd48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bcd4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bcd50:	b94c      	cbnz	r4, bcd66 <__pow5mult+0x66>
   bcd52:	f240 2171 	movw	r1, #625	; 0x271
   bcd56:	4630      	mov	r0, r6
   bcd58:	f7ff ff12 	bl	bcb80 <__i2b>
   bcd5c:	2300      	movs	r3, #0
   bcd5e:	f8c8 0008 	str.w	r0, [r8, #8]
   bcd62:	4604      	mov	r4, r0
   bcd64:	6003      	str	r3, [r0, #0]
   bcd66:	f04f 0900 	mov.w	r9, #0
   bcd6a:	07eb      	lsls	r3, r5, #31
   bcd6c:	d50a      	bpl.n	bcd84 <__pow5mult+0x84>
   bcd6e:	4639      	mov	r1, r7
   bcd70:	4622      	mov	r2, r4
   bcd72:	4630      	mov	r0, r6
   bcd74:	f7ff ff1a 	bl	bcbac <__multiply>
   bcd78:	4639      	mov	r1, r7
   bcd7a:	4680      	mov	r8, r0
   bcd7c:	4630      	mov	r0, r6
   bcd7e:	f7ff fdfd 	bl	bc97c <_Bfree>
   bcd82:	4647      	mov	r7, r8
   bcd84:	106d      	asrs	r5, r5, #1
   bcd86:	d00b      	beq.n	bcda0 <__pow5mult+0xa0>
   bcd88:	6820      	ldr	r0, [r4, #0]
   bcd8a:	b938      	cbnz	r0, bcd9c <__pow5mult+0x9c>
   bcd8c:	4622      	mov	r2, r4
   bcd8e:	4621      	mov	r1, r4
   bcd90:	4630      	mov	r0, r6
   bcd92:	f7ff ff0b 	bl	bcbac <__multiply>
   bcd96:	6020      	str	r0, [r4, #0]
   bcd98:	f8c0 9000 	str.w	r9, [r0]
   bcd9c:	4604      	mov	r4, r0
   bcd9e:	e7e4      	b.n	bcd6a <__pow5mult+0x6a>
   bcda0:	4638      	mov	r0, r7
   bcda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcda6:	bf00      	nop
   bcda8:	000be380 	.word	0x000be380
   bcdac:	000bdee9 	.word	0x000bdee9
   bcdb0:	000be20c 	.word	0x000be20c

000bcdb4 <__lshift>:
   bcdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcdb8:	460c      	mov	r4, r1
   bcdba:	6849      	ldr	r1, [r1, #4]
   bcdbc:	6923      	ldr	r3, [r4, #16]
   bcdbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bcdc2:	68a3      	ldr	r3, [r4, #8]
   bcdc4:	4607      	mov	r7, r0
   bcdc6:	4691      	mov	r9, r2
   bcdc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bcdcc:	f108 0601 	add.w	r6, r8, #1
   bcdd0:	42b3      	cmp	r3, r6
   bcdd2:	db0b      	blt.n	bcdec <__lshift+0x38>
   bcdd4:	4638      	mov	r0, r7
   bcdd6:	f7ff fd91 	bl	bc8fc <_Balloc>
   bcdda:	4605      	mov	r5, r0
   bcddc:	b948      	cbnz	r0, bcdf2 <__lshift+0x3e>
   bcdde:	4602      	mov	r2, r0
   bcde0:	4b2a      	ldr	r3, [pc, #168]	; (bce8c <__lshift+0xd8>)
   bcde2:	482b      	ldr	r0, [pc, #172]	; (bce90 <__lshift+0xdc>)
   bcde4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bcde8:	f7fa f860 	bl	b6eac <__assert_func>
   bcdec:	3101      	adds	r1, #1
   bcdee:	005b      	lsls	r3, r3, #1
   bcdf0:	e7ee      	b.n	bcdd0 <__lshift+0x1c>
   bcdf2:	2300      	movs	r3, #0
   bcdf4:	f100 0114 	add.w	r1, r0, #20
   bcdf8:	f100 0210 	add.w	r2, r0, #16
   bcdfc:	4618      	mov	r0, r3
   bcdfe:	4553      	cmp	r3, sl
   bce00:	db37      	blt.n	bce72 <__lshift+0xbe>
   bce02:	6920      	ldr	r0, [r4, #16]
   bce04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bce08:	f104 0314 	add.w	r3, r4, #20
   bce0c:	f019 091f 	ands.w	r9, r9, #31
   bce10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bce14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bce18:	d02f      	beq.n	bce7a <__lshift+0xc6>
   bce1a:	f1c9 0e20 	rsb	lr, r9, #32
   bce1e:	468a      	mov	sl, r1
   bce20:	f04f 0c00 	mov.w	ip, #0
   bce24:	681a      	ldr	r2, [r3, #0]
   bce26:	fa02 f209 	lsl.w	r2, r2, r9
   bce2a:	ea42 020c 	orr.w	r2, r2, ip
   bce2e:	f84a 2b04 	str.w	r2, [sl], #4
   bce32:	f853 2b04 	ldr.w	r2, [r3], #4
   bce36:	4298      	cmp	r0, r3
   bce38:	fa22 fc0e 	lsr.w	ip, r2, lr
   bce3c:	d8f2      	bhi.n	bce24 <__lshift+0x70>
   bce3e:	1b03      	subs	r3, r0, r4
   bce40:	3b15      	subs	r3, #21
   bce42:	f023 0303 	bic.w	r3, r3, #3
   bce46:	3304      	adds	r3, #4
   bce48:	f104 0215 	add.w	r2, r4, #21
   bce4c:	4290      	cmp	r0, r2
   bce4e:	bf38      	it	cc
   bce50:	2304      	movcc	r3, #4
   bce52:	f841 c003 	str.w	ip, [r1, r3]
   bce56:	f1bc 0f00 	cmp.w	ip, #0
   bce5a:	d001      	beq.n	bce60 <__lshift+0xac>
   bce5c:	f108 0602 	add.w	r6, r8, #2
   bce60:	3e01      	subs	r6, #1
   bce62:	4638      	mov	r0, r7
   bce64:	612e      	str	r6, [r5, #16]
   bce66:	4621      	mov	r1, r4
   bce68:	f7ff fd88 	bl	bc97c <_Bfree>
   bce6c:	4628      	mov	r0, r5
   bce6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bce72:	f842 0f04 	str.w	r0, [r2, #4]!
   bce76:	3301      	adds	r3, #1
   bce78:	e7c1      	b.n	bcdfe <__lshift+0x4a>
   bce7a:	3904      	subs	r1, #4
   bce7c:	f853 2b04 	ldr.w	r2, [r3], #4
   bce80:	f841 2f04 	str.w	r2, [r1, #4]!
   bce84:	4298      	cmp	r0, r3
   bce86:	d8f9      	bhi.n	bce7c <__lshift+0xc8>
   bce88:	e7ea      	b.n	bce60 <__lshift+0xac>
   bce8a:	bf00      	nop
   bce8c:	000be160 	.word	0x000be160
   bce90:	000be20c 	.word	0x000be20c

000bce94 <__mcmp>:
   bce94:	b530      	push	{r4, r5, lr}
   bce96:	6902      	ldr	r2, [r0, #16]
   bce98:	690c      	ldr	r4, [r1, #16]
   bce9a:	1b12      	subs	r2, r2, r4
   bce9c:	d10e      	bne.n	bcebc <__mcmp+0x28>
   bce9e:	f100 0314 	add.w	r3, r0, #20
   bcea2:	3114      	adds	r1, #20
   bcea4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bcea8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bceac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bceb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bceb4:	42a5      	cmp	r5, r4
   bceb6:	d003      	beq.n	bcec0 <__mcmp+0x2c>
   bceb8:	d305      	bcc.n	bcec6 <__mcmp+0x32>
   bceba:	2201      	movs	r2, #1
   bcebc:	4610      	mov	r0, r2
   bcebe:	bd30      	pop	{r4, r5, pc}
   bcec0:	4283      	cmp	r3, r0
   bcec2:	d3f3      	bcc.n	bceac <__mcmp+0x18>
   bcec4:	e7fa      	b.n	bcebc <__mcmp+0x28>
   bcec6:	f04f 32ff 	mov.w	r2, #4294967295
   bceca:	e7f7      	b.n	bcebc <__mcmp+0x28>

000bcecc <__mdiff>:
   bcecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bced0:	460c      	mov	r4, r1
   bced2:	4606      	mov	r6, r0
   bced4:	4611      	mov	r1, r2
   bced6:	4620      	mov	r0, r4
   bced8:	4690      	mov	r8, r2
   bceda:	f7ff ffdb 	bl	bce94 <__mcmp>
   bcede:	1e05      	subs	r5, r0, #0
   bcee0:	d110      	bne.n	bcf04 <__mdiff+0x38>
   bcee2:	4629      	mov	r1, r5
   bcee4:	4630      	mov	r0, r6
   bcee6:	f7ff fd09 	bl	bc8fc <_Balloc>
   bceea:	b930      	cbnz	r0, bcefa <__mdiff+0x2e>
   bceec:	4b3a      	ldr	r3, [pc, #232]	; (bcfd8 <__mdiff+0x10c>)
   bceee:	4602      	mov	r2, r0
   bcef0:	f240 2132 	movw	r1, #562	; 0x232
   bcef4:	4839      	ldr	r0, [pc, #228]	; (bcfdc <__mdiff+0x110>)
   bcef6:	f7f9 ffd9 	bl	b6eac <__assert_func>
   bcefa:	2301      	movs	r3, #1
   bcefc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bcf00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcf04:	bfa4      	itt	ge
   bcf06:	4643      	movge	r3, r8
   bcf08:	46a0      	movge	r8, r4
   bcf0a:	4630      	mov	r0, r6
   bcf0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bcf10:	bfa6      	itte	ge
   bcf12:	461c      	movge	r4, r3
   bcf14:	2500      	movge	r5, #0
   bcf16:	2501      	movlt	r5, #1
   bcf18:	f7ff fcf0 	bl	bc8fc <_Balloc>
   bcf1c:	b920      	cbnz	r0, bcf28 <__mdiff+0x5c>
   bcf1e:	4b2e      	ldr	r3, [pc, #184]	; (bcfd8 <__mdiff+0x10c>)
   bcf20:	4602      	mov	r2, r0
   bcf22:	f44f 7110 	mov.w	r1, #576	; 0x240
   bcf26:	e7e5      	b.n	bcef4 <__mdiff+0x28>
   bcf28:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bcf2c:	6926      	ldr	r6, [r4, #16]
   bcf2e:	60c5      	str	r5, [r0, #12]
   bcf30:	f104 0914 	add.w	r9, r4, #20
   bcf34:	f108 0514 	add.w	r5, r8, #20
   bcf38:	f100 0e14 	add.w	lr, r0, #20
   bcf3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bcf40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bcf44:	f108 0210 	add.w	r2, r8, #16
   bcf48:	46f2      	mov	sl, lr
   bcf4a:	2100      	movs	r1, #0
   bcf4c:	f859 3b04 	ldr.w	r3, [r9], #4
   bcf50:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bcf54:	fa1f f883 	uxth.w	r8, r3
   bcf58:	fa11 f18b 	uxtah	r1, r1, fp
   bcf5c:	0c1b      	lsrs	r3, r3, #16
   bcf5e:	eba1 0808 	sub.w	r8, r1, r8
   bcf62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bcf66:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bcf6a:	fa1f f888 	uxth.w	r8, r8
   bcf6e:	1419      	asrs	r1, r3, #16
   bcf70:	454e      	cmp	r6, r9
   bcf72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bcf76:	f84a 3b04 	str.w	r3, [sl], #4
   bcf7a:	d8e7      	bhi.n	bcf4c <__mdiff+0x80>
   bcf7c:	1b33      	subs	r3, r6, r4
   bcf7e:	3b15      	subs	r3, #21
   bcf80:	f023 0303 	bic.w	r3, r3, #3
   bcf84:	3304      	adds	r3, #4
   bcf86:	3415      	adds	r4, #21
   bcf88:	42a6      	cmp	r6, r4
   bcf8a:	bf38      	it	cc
   bcf8c:	2304      	movcc	r3, #4
   bcf8e:	441d      	add	r5, r3
   bcf90:	4473      	add	r3, lr
   bcf92:	469e      	mov	lr, r3
   bcf94:	462e      	mov	r6, r5
   bcf96:	4566      	cmp	r6, ip
   bcf98:	d30e      	bcc.n	bcfb8 <__mdiff+0xec>
   bcf9a:	f10c 0203 	add.w	r2, ip, #3
   bcf9e:	1b52      	subs	r2, r2, r5
   bcfa0:	f022 0203 	bic.w	r2, r2, #3
   bcfa4:	3d03      	subs	r5, #3
   bcfa6:	45ac      	cmp	ip, r5
   bcfa8:	bf38      	it	cc
   bcfaa:	2200      	movcc	r2, #0
   bcfac:	441a      	add	r2, r3
   bcfae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bcfb2:	b17b      	cbz	r3, bcfd4 <__mdiff+0x108>
   bcfb4:	6107      	str	r7, [r0, #16]
   bcfb6:	e7a3      	b.n	bcf00 <__mdiff+0x34>
   bcfb8:	f856 8b04 	ldr.w	r8, [r6], #4
   bcfbc:	fa11 f288 	uxtah	r2, r1, r8
   bcfc0:	1414      	asrs	r4, r2, #16
   bcfc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bcfc6:	b292      	uxth	r2, r2
   bcfc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bcfcc:	f84e 2b04 	str.w	r2, [lr], #4
   bcfd0:	1421      	asrs	r1, r4, #16
   bcfd2:	e7e0      	b.n	bcf96 <__mdiff+0xca>
   bcfd4:	3f01      	subs	r7, #1
   bcfd6:	e7ea      	b.n	bcfae <__mdiff+0xe2>
   bcfd8:	000be160 	.word	0x000be160
   bcfdc:	000be20c 	.word	0x000be20c

000bcfe0 <__ulp>:
   bcfe0:	b082      	sub	sp, #8
   bcfe2:	ed8d 0b00 	vstr	d0, [sp]
   bcfe6:	9b01      	ldr	r3, [sp, #4]
   bcfe8:	4912      	ldr	r1, [pc, #72]	; (bd034 <__ulp+0x54>)
   bcfea:	4019      	ands	r1, r3
   bcfec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bcff0:	2900      	cmp	r1, #0
   bcff2:	dd05      	ble.n	bd000 <__ulp+0x20>
   bcff4:	2200      	movs	r2, #0
   bcff6:	460b      	mov	r3, r1
   bcff8:	ec43 2b10 	vmov	d0, r2, r3
   bcffc:	b002      	add	sp, #8
   bcffe:	4770      	bx	lr
   bd000:	4249      	negs	r1, r1
   bd002:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd006:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd00a:	f04f 0200 	mov.w	r2, #0
   bd00e:	f04f 0300 	mov.w	r3, #0
   bd012:	da04      	bge.n	bd01e <__ulp+0x3e>
   bd014:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd018:	fa41 f300 	asr.w	r3, r1, r0
   bd01c:	e7ec      	b.n	bcff8 <__ulp+0x18>
   bd01e:	f1a0 0114 	sub.w	r1, r0, #20
   bd022:	291e      	cmp	r1, #30
   bd024:	bfda      	itte	le
   bd026:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd02a:	fa20 f101 	lsrle.w	r1, r0, r1
   bd02e:	2101      	movgt	r1, #1
   bd030:	460a      	mov	r2, r1
   bd032:	e7e1      	b.n	bcff8 <__ulp+0x18>
   bd034:	7ff00000 	.word	0x7ff00000

000bd038 <__b2d>:
   bd038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd03a:	6905      	ldr	r5, [r0, #16]
   bd03c:	f100 0714 	add.w	r7, r0, #20
   bd040:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd044:	1f2e      	subs	r6, r5, #4
   bd046:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd04a:	4620      	mov	r0, r4
   bd04c:	f7ff fd48 	bl	bcae0 <__hi0bits>
   bd050:	f1c0 0320 	rsb	r3, r0, #32
   bd054:	280a      	cmp	r0, #10
   bd056:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd0d4 <__b2d+0x9c>
   bd05a:	600b      	str	r3, [r1, #0]
   bd05c:	dc14      	bgt.n	bd088 <__b2d+0x50>
   bd05e:	f1c0 0e0b 	rsb	lr, r0, #11
   bd062:	fa24 f10e 	lsr.w	r1, r4, lr
   bd066:	42b7      	cmp	r7, r6
   bd068:	ea41 030c 	orr.w	r3, r1, ip
   bd06c:	bf34      	ite	cc
   bd06e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd072:	2100      	movcs	r1, #0
   bd074:	3015      	adds	r0, #21
   bd076:	fa04 f000 	lsl.w	r0, r4, r0
   bd07a:	fa21 f10e 	lsr.w	r1, r1, lr
   bd07e:	ea40 0201 	orr.w	r2, r0, r1
   bd082:	ec43 2b10 	vmov	d0, r2, r3
   bd086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd088:	42b7      	cmp	r7, r6
   bd08a:	bf3a      	itte	cc
   bd08c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd090:	f1a5 0608 	subcc.w	r6, r5, #8
   bd094:	2100      	movcs	r1, #0
   bd096:	380b      	subs	r0, #11
   bd098:	d017      	beq.n	bd0ca <__b2d+0x92>
   bd09a:	f1c0 0c20 	rsb	ip, r0, #32
   bd09e:	fa04 f500 	lsl.w	r5, r4, r0
   bd0a2:	42be      	cmp	r6, r7
   bd0a4:	fa21 f40c 	lsr.w	r4, r1, ip
   bd0a8:	ea45 0504 	orr.w	r5, r5, r4
   bd0ac:	bf8c      	ite	hi
   bd0ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd0b2:	2400      	movls	r4, #0
   bd0b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd0b8:	fa01 f000 	lsl.w	r0, r1, r0
   bd0bc:	fa24 f40c 	lsr.w	r4, r4, ip
   bd0c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd0c4:	ea40 0204 	orr.w	r2, r0, r4
   bd0c8:	e7db      	b.n	bd082 <__b2d+0x4a>
   bd0ca:	ea44 030c 	orr.w	r3, r4, ip
   bd0ce:	460a      	mov	r2, r1
   bd0d0:	e7d7      	b.n	bd082 <__b2d+0x4a>
   bd0d2:	bf00      	nop
   bd0d4:	3ff00000 	.word	0x3ff00000

000bd0d8 <__d2b>:
   bd0d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd0dc:	4689      	mov	r9, r1
   bd0de:	2101      	movs	r1, #1
   bd0e0:	ec57 6b10 	vmov	r6, r7, d0
   bd0e4:	4690      	mov	r8, r2
   bd0e6:	f7ff fc09 	bl	bc8fc <_Balloc>
   bd0ea:	4604      	mov	r4, r0
   bd0ec:	b930      	cbnz	r0, bd0fc <__d2b+0x24>
   bd0ee:	4602      	mov	r2, r0
   bd0f0:	4b25      	ldr	r3, [pc, #148]	; (bd188 <__d2b+0xb0>)
   bd0f2:	4826      	ldr	r0, [pc, #152]	; (bd18c <__d2b+0xb4>)
   bd0f4:	f240 310a 	movw	r1, #778	; 0x30a
   bd0f8:	f7f9 fed8 	bl	b6eac <__assert_func>
   bd0fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd100:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd104:	bb35      	cbnz	r5, bd154 <__d2b+0x7c>
   bd106:	2e00      	cmp	r6, #0
   bd108:	9301      	str	r3, [sp, #4]
   bd10a:	d028      	beq.n	bd15e <__d2b+0x86>
   bd10c:	4668      	mov	r0, sp
   bd10e:	9600      	str	r6, [sp, #0]
   bd110:	f7ff fd06 	bl	bcb20 <__lo0bits>
   bd114:	9900      	ldr	r1, [sp, #0]
   bd116:	b300      	cbz	r0, bd15a <__d2b+0x82>
   bd118:	9a01      	ldr	r2, [sp, #4]
   bd11a:	f1c0 0320 	rsb	r3, r0, #32
   bd11e:	fa02 f303 	lsl.w	r3, r2, r3
   bd122:	430b      	orrs	r3, r1
   bd124:	40c2      	lsrs	r2, r0
   bd126:	6163      	str	r3, [r4, #20]
   bd128:	9201      	str	r2, [sp, #4]
   bd12a:	9b01      	ldr	r3, [sp, #4]
   bd12c:	61a3      	str	r3, [r4, #24]
   bd12e:	2b00      	cmp	r3, #0
   bd130:	bf14      	ite	ne
   bd132:	2202      	movne	r2, #2
   bd134:	2201      	moveq	r2, #1
   bd136:	6122      	str	r2, [r4, #16]
   bd138:	b1d5      	cbz	r5, bd170 <__d2b+0x98>
   bd13a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd13e:	4405      	add	r5, r0
   bd140:	f8c9 5000 	str.w	r5, [r9]
   bd144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd148:	f8c8 0000 	str.w	r0, [r8]
   bd14c:	4620      	mov	r0, r4
   bd14e:	b003      	add	sp, #12
   bd150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd158:	e7d5      	b.n	bd106 <__d2b+0x2e>
   bd15a:	6161      	str	r1, [r4, #20]
   bd15c:	e7e5      	b.n	bd12a <__d2b+0x52>
   bd15e:	a801      	add	r0, sp, #4
   bd160:	f7ff fcde 	bl	bcb20 <__lo0bits>
   bd164:	9b01      	ldr	r3, [sp, #4]
   bd166:	6163      	str	r3, [r4, #20]
   bd168:	2201      	movs	r2, #1
   bd16a:	6122      	str	r2, [r4, #16]
   bd16c:	3020      	adds	r0, #32
   bd16e:	e7e3      	b.n	bd138 <__d2b+0x60>
   bd170:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd174:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd178:	f8c9 0000 	str.w	r0, [r9]
   bd17c:	6918      	ldr	r0, [r3, #16]
   bd17e:	f7ff fcaf 	bl	bcae0 <__hi0bits>
   bd182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd186:	e7df      	b.n	bd148 <__d2b+0x70>
   bd188:	000be160 	.word	0x000be160
   bd18c:	000be20c 	.word	0x000be20c

000bd190 <__ratio>:
   bd190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd194:	4688      	mov	r8, r1
   bd196:	4669      	mov	r1, sp
   bd198:	4681      	mov	r9, r0
   bd19a:	f7ff ff4d 	bl	bd038 <__b2d>
   bd19e:	a901      	add	r1, sp, #4
   bd1a0:	4640      	mov	r0, r8
   bd1a2:	ec55 4b10 	vmov	r4, r5, d0
   bd1a6:	f7ff ff47 	bl	bd038 <__b2d>
   bd1aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd1ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd1b2:	eba3 0c02 	sub.w	ip, r3, r2
   bd1b6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd1ba:	1a9b      	subs	r3, r3, r2
   bd1bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd1c0:	ec51 0b10 	vmov	r0, r1, d0
   bd1c4:	2b00      	cmp	r3, #0
   bd1c6:	bfd6      	itet	le
   bd1c8:	460a      	movle	r2, r1
   bd1ca:	462a      	movgt	r2, r5
   bd1cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd1d0:	468b      	mov	fp, r1
   bd1d2:	462f      	mov	r7, r5
   bd1d4:	bfd4      	ite	le
   bd1d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd1da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd1de:	4620      	mov	r0, r4
   bd1e0:	ee10 2a10 	vmov	r2, s0
   bd1e4:	465b      	mov	r3, fp
   bd1e6:	4639      	mov	r1, r7
   bd1e8:	f7fd fd9c 	bl	bad24 <__aeabi_ddiv>
   bd1ec:	ec41 0b10 	vmov	d0, r0, r1
   bd1f0:	b003      	add	sp, #12
   bd1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd1f6 <__copybits>:
   bd1f6:	3901      	subs	r1, #1
   bd1f8:	b570      	push	{r4, r5, r6, lr}
   bd1fa:	1149      	asrs	r1, r1, #5
   bd1fc:	6914      	ldr	r4, [r2, #16]
   bd1fe:	3101      	adds	r1, #1
   bd200:	f102 0314 	add.w	r3, r2, #20
   bd204:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd208:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd20c:	1f05      	subs	r5, r0, #4
   bd20e:	42a3      	cmp	r3, r4
   bd210:	d30c      	bcc.n	bd22c <__copybits+0x36>
   bd212:	1aa3      	subs	r3, r4, r2
   bd214:	3b11      	subs	r3, #17
   bd216:	f023 0303 	bic.w	r3, r3, #3
   bd21a:	3211      	adds	r2, #17
   bd21c:	42a2      	cmp	r2, r4
   bd21e:	bf88      	it	hi
   bd220:	2300      	movhi	r3, #0
   bd222:	4418      	add	r0, r3
   bd224:	2300      	movs	r3, #0
   bd226:	4288      	cmp	r0, r1
   bd228:	d305      	bcc.n	bd236 <__copybits+0x40>
   bd22a:	bd70      	pop	{r4, r5, r6, pc}
   bd22c:	f853 6b04 	ldr.w	r6, [r3], #4
   bd230:	f845 6f04 	str.w	r6, [r5, #4]!
   bd234:	e7eb      	b.n	bd20e <__copybits+0x18>
   bd236:	f840 3b04 	str.w	r3, [r0], #4
   bd23a:	e7f4      	b.n	bd226 <__copybits+0x30>

000bd23c <__any_on>:
   bd23c:	f100 0214 	add.w	r2, r0, #20
   bd240:	6900      	ldr	r0, [r0, #16]
   bd242:	114b      	asrs	r3, r1, #5
   bd244:	4298      	cmp	r0, r3
   bd246:	b510      	push	{r4, lr}
   bd248:	db11      	blt.n	bd26e <__any_on+0x32>
   bd24a:	dd0a      	ble.n	bd262 <__any_on+0x26>
   bd24c:	f011 011f 	ands.w	r1, r1, #31
   bd250:	d007      	beq.n	bd262 <__any_on+0x26>
   bd252:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd256:	fa24 f001 	lsr.w	r0, r4, r1
   bd25a:	fa00 f101 	lsl.w	r1, r0, r1
   bd25e:	428c      	cmp	r4, r1
   bd260:	d10b      	bne.n	bd27a <__any_on+0x3e>
   bd262:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd266:	4293      	cmp	r3, r2
   bd268:	d803      	bhi.n	bd272 <__any_on+0x36>
   bd26a:	2000      	movs	r0, #0
   bd26c:	bd10      	pop	{r4, pc}
   bd26e:	4603      	mov	r3, r0
   bd270:	e7f7      	b.n	bd262 <__any_on+0x26>
   bd272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd276:	2900      	cmp	r1, #0
   bd278:	d0f5      	beq.n	bd266 <__any_on+0x2a>
   bd27a:	2001      	movs	r0, #1
   bd27c:	e7f6      	b.n	bd26c <__any_on+0x30>

000bd27e <_calloc_r>:
   bd27e:	b513      	push	{r0, r1, r4, lr}
   bd280:	434a      	muls	r2, r1
   bd282:	4611      	mov	r1, r2
   bd284:	9201      	str	r2, [sp, #4]
   bd286:	f7f9 fe01 	bl	b6e8c <_malloc_r>
   bd28a:	4604      	mov	r4, r0
   bd28c:	b118      	cbz	r0, bd296 <_calloc_r+0x18>
   bd28e:	9a01      	ldr	r2, [sp, #4]
   bd290:	2100      	movs	r1, #0
   bd292:	f7fd ff82 	bl	bb19a <memset>
   bd296:	4620      	mov	r0, r4
   bd298:	b002      	add	sp, #8
   bd29a:	bd10      	pop	{r4, pc}
   bd29c:	0000      	movs	r0, r0
	...

000bd2a0 <nan>:
   bd2a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd2a8 <nan+0x8>
   bd2a4:	4770      	bx	lr
   bd2a6:	bf00      	nop
   bd2a8:	00000000 	.word	0x00000000
   bd2ac:	7ff80000 	.word	0x7ff80000

000bd2b0 <__ascii_wctomb>:
   bd2b0:	b149      	cbz	r1, bd2c6 <__ascii_wctomb+0x16>
   bd2b2:	2aff      	cmp	r2, #255	; 0xff
   bd2b4:	bf85      	ittet	hi
   bd2b6:	238a      	movhi	r3, #138	; 0x8a
   bd2b8:	6003      	strhi	r3, [r0, #0]
   bd2ba:	700a      	strbls	r2, [r1, #0]
   bd2bc:	f04f 30ff 	movhi.w	r0, #4294967295
   bd2c0:	bf98      	it	ls
   bd2c2:	2001      	movls	r0, #1
   bd2c4:	4770      	bx	lr
   bd2c6:	4608      	mov	r0, r1
   bd2c8:	4770      	bx	lr
	...

000bd2cc <__aeabi_d2lz>:
   bd2cc:	b538      	push	{r3, r4, r5, lr}
   bd2ce:	2200      	movs	r2, #0
   bd2d0:	2300      	movs	r3, #0
   bd2d2:	4604      	mov	r4, r0
   bd2d4:	460d      	mov	r5, r1
   bd2d6:	f7fd fe6d 	bl	bafb4 <__aeabi_dcmplt>
   bd2da:	b928      	cbnz	r0, bd2e8 <__aeabi_d2lz+0x1c>
   bd2dc:	4620      	mov	r0, r4
   bd2de:	4629      	mov	r1, r5
   bd2e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd2e4:	f7fd bee2 	b.w	bb0ac <__aeabi_d2ulz>
   bd2e8:	4620      	mov	r0, r4
   bd2ea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd2ee:	f7fd fedd 	bl	bb0ac <__aeabi_d2ulz>
   bd2f2:	4240      	negs	r0, r0
   bd2f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd2f8:	bd38      	pop	{r3, r4, r5, pc}
   bd2fa:	bf00      	nop

000bd2fc <dynalib_user>:
   bd2fc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd30c:	0000 0000 7665 6e65 5f74 7473 3a72 2520     ....event_str: %
   bd31c:	0a73 7000 6972 6563 2f73 2c00 0021 2a25     s..prices/.,!.%*
   bd32c:	2d64 2a25 2d64 2a25 5464 6425 253a 642a     d-%*d-%*dT%d:%*d
   bd33c:	253a 642a 5700 6961 6974 676e 6620 726f     :%*d.Waiting for
   bd34c:	4220 454c 6c63 6569 746e 6320 6e6f 656e      BLEclient conne
   bd35c:	7463 6f69 2e6e 2e2e 4800 6769 6568 7473     ction....Highest
   bd36c:	7020 6972 6563 6f20 2066 6874 2065 6164      price of the da
   bd37c:	3a79 2520 0a66 4c00 776f 7365 2074 7270     y: %f..Lowest pr
   bd38c:	6369 2065 666f 7420 6568 6420 7961 203a     ice of the day: 
   bd39c:	6625 000a 6f48 7275 2073 666f 7420 6568     %f..Hours of the
   bd3ac:	6420 7961 7720 6568 6572 6520 656c 7463      day where elect
   bd3bc:	6972 6963 7974 6920 2073 6977 6874 6e69     ricity is within
   bd3cc:	6120 6363 7065 6574 2064 6172 676e 3a65      accepted range:
   bd3dc:	000a 3025 6432 7420 206f 3025 6432 000a     ..%02d to %02d..
   bd3ec:	227b 6857 5f72 6f74 6164 2279 5b3a 2c00     {"Whr_today":[.,
   bd3fc:	5d00 007d 227b 7270 6369 7365 6579 7473     .]}.{"pricesyest
   bd40c:	7265 6164 2279 5b3a 2500 322e 666c 7b00     erday":[.%.2lf.{
   bd41c:	7022 6972 6563 7473 646f 7961 3a22 005b     "pricestoday":[.
   bd42c:	227b 4857 5f72 6579 7473 7265 6164 2279     {"WHr_yesterday"
   bd43c:	5b3a 7b00 5722 7248 745f 646f 7961 3a22     :[.{"WHr_today":
   bd44c:	005b 6562 6f66 6572 2520 756c 000a 6146     [.before %lu..Fa
   bd45c:	6c69 6465 7420 206f 6c61 6f6c 6163 6574     iled to allocate
   bd46c:	6d20 6d65 726f 2079 6f66 2072 6f63 7473      memory for cost
   bd47c:	795f 7365 6574 6472 7961 000a 6146 6c69     _yesterday..Fail
   bd48c:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   bd49c:	6d65 726f 2079 6f66 2072 6f63 7473 745f     emory for cost_t
   bd4ac:	646f 7961 000a 6146 6c69 6465 7420 206f     oday..Failed to 
   bd4bc:	6c61 6f6c 6163 6574 6d20 6d65 726f 2079     allocate memory 
   bd4cc:	6f66 2072 6f63 7473 745f 6d6f 726f 6f72     for cost_tomorro
   bd4dc:	0a77 4d00 6d65 726f 2079 6c61 6f6c 6163     w..Memory alloca
   bd4ec:	6574 2064 6f66 2072 7270 6369 7365 203a     ted for prices: 
   bd4fc:	6425 6220 7479 7365 6f20 2066 6f64 6275     %d bytes of doub
   bd50c:	656c 0a73 4600 6961 656c 2064 6f74 6120     les..Failed to a
   bd51c:	6c6c 636f 7461 2065 656d 6f6d 7972 6620     llocate memory f
   bd52c:	726f 7720 5f68 6f74 6164 0a79 4600 6961     or wh_today..Fai
   bd53c:	656c 2064 6f74 6120 6c6c 636f 7461 2065     led to allocate 
   bd54c:	656d 6f6d 7972 6620 726f 7720 5f68 6579     memory for wh_ye
   bd55c:	7473 7265 6164 0a79 4d00 6d65 726f 2079     sterday..Memory 
   bd56c:	6c61 6f6c 6163 6574 2064 6f66 2072 6877     allocated for wh
   bd57c:	203a 6425 6220 7479 7365 6f20 2066 6e69     : %d bytes of in
   bd58c:	7374 000a 6641 6574 2072 6c25 0a75 6800     ts..After %lu..h
   bd59c:	6d6f 6165 7373 7369 6174 746e 6c2e 636f     omeassistant.loc
   bd5ac:	6c61 6d00 7471 0074 6552 7574 6e72 7620     al.mqtt.Return v
   bd5bc:	6c61 6575 203a 6425 4300 6e6f 656e 7463     alue: %d.Connect
   bd5cc:	6465 7420 206f 514d 5454 6220 6f72 656b     ed to MQTT broke
   bd5dc:	0a72 6800 6c65 6f6c 7720 726f 646c 7000     r..hello world.p
   bd5ec:	776f 7265 672f 7465 7000 776f 7265 702f     ower/get.power/p
   bd5fc:	6972 6563 0073 7543 7272 6e65 2074 4848     rices.Current HH
   bd60c:	4d3a 3a4d 2520 3230 3a64 3025 6432 000a     :MM: %02d:%02d..
   bd61c:	6c43 6569 746e 6420 7369 6f63 6e6e 6365     Client disconnec
   bd62c:	6574 0a64 7300 6170 6b72 6c63 6569 746e     ted..sparkclient
   bd63c:	005f 6c43 6569 746e 7220 6365 6e6f 656e     _.Client reconne
   bd64c:	7463 6465 000a 207b 7922 6165 2272 203a     cted..{ "year": 
   bd65c:	2522 2264 202c 6d22 6e6f 6874 3a22 2522     "%d", "month":"%
   bd66c:	3230 2264 202c 6422 7961 3a22 2220 3025     02d", "day": "%0
   bd67c:	6432 2c22 2220 6164 5f79 7774 226f 203a     2d", "day_two": 
   bd68c:	2522 3230 2264 202c 6822 756f 2272 203a     "%02d", "hour": 
   bd69c:	2522 3230 2264 7d20 6500 706c 6972 6573     "%02d" }.elprise
   bd6ac:	0072 6e49 7720 726f 0a6b 4300 6568 7061     r.In work..Cheap
   bd6bc:	6928 6873 2029 6f68 7275 2073 666f 7420     (ish) hours of t
   bd6cc:	6568 6420 7961 203a 2500 3230 2064 6f74     he day: .%02d to
   bd6dc:	2520 3230 2c64 0020 6f4c 2077 7270 6369      %02d, .Low pric
   bd6ec:	2065 6f68 7275 0073 6547 7474 6e69 2067     e hours.Getting 
   bd6fc:	7270 6369 2065 6164 6174 6620 726f 7920     price data for y
   bd70c:	7365 6574 6472 7961 000a 4143 434c 4c55     esterday..CALCUL
   bd71c:	5441 3d45 203a 6425 000a 6547 7474 6e69     ATE=: %d..Gettin
   bd72c:	2067 7270 6369 2065 6164 6174 6620 726f     g price data for
   bd73c:	7420 646f 7961 000a 6547 7474 6e69 2067      today..Getting 
   bd74c:	7270 6369 2065 6164 6174 6620 726f 7420     price data for t
   bd75c:	6d6f 726f 6f72 0a77 5400 6568 7020 6972     omorrow..The pri
   bd76c:	6563 2073 6f66 2072 6f74 6f6d 7272 766f     ces for tomorrov
   bd77c:	7720 6c69 206c 6562 7020 6c75 656c 2064      will be pulled 
   bd78c:	7461 2520 3a64 3030 000a 6552 6563 7669     at %d:00..Receiv
   bd79c:	6465 7020 776f 7265 672f 7465 000a 6f70     ed power/get..po
   bd7ac:	6577 0072 227b 6177 7474 3a22 6425 007d     wer.{"watt":%d}.
   bd7bc:	6177 7474 6f68 7275 6200 656c 635f 6e6f     watthour.ble_con
   bd7cc:	656e 7463 6465 000a 6157 7474 6e20 776f     nected..Watt now
   bd7dc:	4400 4b4b 5920 7365 6574 6472 7961 4400     .DKK Yesterday.D
   bd7ec:	4b4b 5420 646f 7961 4400 4b4b 5420 6d6f     KK Today.DKK Tom
   bd7fc:	726f 6f72 0077 6857 2072 6f54 6164 0079     orrow.Whr Today.
   bd80c:	6857 2072 6559 7473 7265 6164 0079 3931     Whr Yesterday.19
   bd81c:	2e32 3631 2e38 3131 2e30 0036               2.168.110.6.

000bd828 <_ZTV5Timer>:
	...
   bd830:	4419 000b 445d 000b 4131 000b 3462 3532     .D..]D..1A..b425
   bd840:	3430 3530 662d 3462 2d62 3734 3634 622d     0405-fb4b-4746-b
   bd850:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bd860:	6200 3234 3035 3034 2d34 6266 6234 342d     .b4250404-fb4b-4
   bd870:	3437 2d36 3262 3062 392d 6633 6530 3136     746-b2b0-93f0e61
   bd880:	3231 6332 0036 3462 3532 3430 3330 662d     122c6.b4250403-f
   bd890:	3462 2d62 3734 3634 622d 6232 2d30 3339     b4b-4746-b2b0-93
   bd8a0:	3066 3665 3131 3232 3663 6200 3234 3035     f0e61122c6.b4250
   bd8b0:	3034 2d32 6266 6234 342d 3437 2d36 3262     402-fb4b-4746-b2
   bd8c0:	3062 392d 6633 6530 3136 3231 6332 0036     b0-93f0e61122c6.
   bd8d0:	3462 3532 3430 3630 662d 3462 2d62 3734     b4250406-fb4b-47
   bd8e0:	3634 622d 6232 2d30 3339 3066 3665 3131     46-b2b0-93f0e611
   bd8f0:	3232 3663 6200 3234 3035 3034 2d31 6266     22c6.b4250401-fb
   bd900:	6234 342d 3437 2d36 3262 3062 392d 6633     4b-4746-b2b0-93f
   bd910:	6530 3136 3231 6332 0036 6633 6131 3531     0e61122c6.3f1a15
   bd920:	3639 652d 3765 2d66 3234 6462 382d 6434     96-ee7f-42bd-84d
   bd930:	2d31 3162 3261 3439 3866 6532 6663 4100     1-b1a294f82ecf.A
   bd940:	6772 6e6f 4d50 0000 4d04 5451 0454 0600     rgonPM...MQTT...
   bd950:	514d 7349 7064 4203 6765 6e69 4d20 6c75     MQIsdp.Begin Mul
   bd960:	6974 6163 7473 4f00 7475 6f20 2066 656d     ticast.Out of me
   bd970:	6f6d 7972 6e00 746f 7620 6c61 6469 0000     mory.not valid..

000bd980 <_ZTVN5spark13EthernetClassE>:
	...
   bd988:	6f3b 000b 6f31 000b 6f27 000b 6f1d 000b     ;o..1o..'o...o..
   bd998:	6f11 000b 6f05 000b a271 000b a279 000b     .o...o..q...y...
   bd9a8:	6ef9 000b 6ef1 000b 6ee7 000b 6edd 000b     .n...n...n...n..
   bd9b8:	a2a9 000b                                   ....

000bd9bc <_ZTV3UDP>:
	...
   bd9c4:	772d 000b 7751 000b 7135 000b 725d 000b     -w..Qw..5q..]r..
   bd9d4:	70ed 000b 714d 000b 716b 000b 7185 000b     .p..Mq..kq...q..
   bd9e4:	71a9 000b 7241 000b 751b 000b 72e1 000b     .q..Ar...u...r..
   bd9f4:	7439 000b 70d5 000b 76bd 000b 73c1 000b     9t...p...v...s..
   bda04:	70f5 000b 76eb 000b 7287 000b 70e3 000b     .p...v...r...p..
   bda14:	7319 000b 70e9 000b 7187 000b fff0 ffff     .s...p...q......
   bda24:	0000 0000 71a1 000b                         .....q..

000bda2c <_ZTV21StringPrintableHelper>:
	...
   bda34:	77a9 000b 77ab 000b 79b7 000b 7967 000b     .w...w...y..gy..
   bda44:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   bda54:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   bda64:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   bda74:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   bda84:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   bda94:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   bdaa4:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   bdab4:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   bdac4:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   bdad4:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   bdae4:	206f 7061 6570 646e 7020 6565 2072 6543     o append peer Ce
   bdaf4:	746e 6172 206c 6564 6976 6563 002e 6f43     ntral device..Co
   bdb04:	6e6e 6365 6574 2064 7962 4320 6e65 7274     nnected by Centr
   bdb14:	6c61 6420 7665 6369 2e65 4400 7369 6f63     al device..Disco
   bdb24:	6e6e 6365 6574 2064 7962 7220 6d65 746f     nnected by remot
   bdb34:	2065 6564 6976 6563 002e 7544 6c70 6369     e device..Duplic
   bdb44:	7461 6465 6320 6168 6172 7463 7265 7369     ated characteris
   bdb54:	6974 2063 6163 6e6e 746f 6220 2065 6461     tic cannot be ad
   bdb64:	6564 2e64 4600 6961 656c 2064 6f74 6120     ded..Failed to a
   bdb74:	7070 6e65 2064 6f6c 6163 206c 6863 7261     ppend local char
   bdb84:	6361 6574 6972 7473 6369 002e               acteristic..

000bdb90 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdb98:	7a63 000b 7ac5 000b 7be5 000b 7aef 000b     cz...z...{...z..
   bdba8:	7a65 000b                                   ez..

000bdbac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdbb4:	7a5f 000b 7ad3 000b 7a61 000b 7af5 000b     _z...z..az...z..
   bdbc4:	7a85 000b                                   .z..

000bdbc8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdbd0:	7a5d 000b 7ae1 000b 83bd 000b 7afb 000b     ]z...z.......z..
   bdbe0:	7aa5 000b                                   .z..

000bdbe4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bdbf0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bdc02 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bdc02:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bdc12 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bdc12:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bdc22:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bdc32:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bdc44 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdc4c:	9309 000b 930f 000b 934d 000b 931d 000b     ........M.......
   bdc5c:	930b 000b                                   ....

000bdc60 <_ZTV9IPAddress>:
	...
   bdc68:	9849 000b 9839 000b 983b 000b               I...9...;...

000bdc74 <_ZTV9USBSerial>:
	...
   bdc7c:	9983 000b 99eb 000b 99c1 000b 8e8d 000b     ................
   bdc8c:	99b3 000b 9985 000b 9995 000b 99e5 000b     ................
   bdc9c:	99a5 000b 997d 000b                         ....}...

000bdca4 <_ZTV11USARTSerial>:
	...
   bdcac:	9ad5 000b 9b41 000b 9b19 000b 8e8d 000b     ....A...........
   bdcbc:	9ae9 000b 9b05 000b 9af7 000b 9b13 000b     ................
   bdccc:	9ad7 000b 9adb 000b                         ........

000bdcd4 <_ZTV7TwoWire>:
	...
   bdcdc:	9ba1 000b 9beb 000b 9bc3 000b 9ba3 000b     ................
   bdcec:	9bcb 000b 9bd3 000b 9bdb 000b 9be3 000b     ................
   bdcfc:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bdd0c:	2072 203d 6425 0000                         r = %d..

000bdd14 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd1c:	9ca1 000b 9cc5 000b a1af 000b 9cd3 000b     ................
   bdd2c:	9ca5 000b                                   ....

000bdd30 <_ZTV9TCPClient>:
	...
   bdd38:	9199 000b 91b1 000b 9c1d 000b 9c37 000b     ............7...
   bdd48:	a045 000b 9c61 000b 9ebb 000b 9c95 000b     E...a...........
   bdd58:	9f4d 000b 9d8d 000b 9ee9 000b a0f9 000b     M...............
   bdd68:	9e89 000b 9c97 000b 9c49 000b 9cd9 000b     ........I.......
   bdd78:	9d6d 000b                                   m...

000bdd7c <_ZTVN5spark9WiFiClassE>:
	...
   bdd84:	a213 000b a209 000b a1ff 000b a1b5 000b     ................
   bdd94:	a1f3 000b a1e7 000b a271 000b a279 000b     ........q...y...
   bdda4:	a1db 000b a1d3 000b a1c9 000b a1bf 000b     ................
   bddb4:	a2a9 000b                                   ....

000bddb8 <_ZTVN5spark12NetworkClassE>:
	...
   bddc0:	a231 000b a23b 000b a245 000b a24f 000b     1...;...E...O...
   bddd0:	a259 000b a265 000b a271 000b a279 000b     Y...e...q...y...
   bdde0:	a281 000b a28d 000b a295 000b a29f 000b     ................
   bddf0:	a2a9 000b                                   ....

000bddf4 <_ZSt7nothrow>:
	...

000bddf5 <_ZTSSt19_Sp_make_shared_tag>:
   bddf5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bde05:	6572 5f64 6174 0067 0000                     red_tag....

000bde10 <_ZTISt19_Sp_make_shared_tag>:
   bde10:	de50 000b ddf5 000b                         P.......

000bde18 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bde18:	deb0 000b de24 000b ded4 000b               ....$.......

000bde24 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bde24:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bde34:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bde44:	0045 0000                                   E...

000bde48 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bde48:	0000 0000 de18 000b a581 000b a595 000b     ................
   bde58:	a729 000b a729 000b a5ff 000b a541 000b     )...).......A...
   bde68:	a5e7 000b a5a9 000b a573 000b               ........s...

000bde74 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bde74:	deb0 000b de80 000b de18 000b               ............

000bde80 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bde80:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bde90:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bdea0:	666e 456f 0000 0000                         nfoE....

000bdea8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bdea8:	0000 0000 de74 000b a629 000b a63d 000b     ....t...)...=...
   bdeb8:	a729 000b a729 000b a5ff 000b a541 000b     )...).......A...
   bdec8:	a6fd 000b a689 000b a651 000b               ........Q...

000bded4 <_ZTISt9type_info>:
   bded4:	de50 000b dedc 000b                         P.......

000bdedc <_ZTSSt9type_info>:
   bdedc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bdeec:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bdefc:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bdf0c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bdf1c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bdf2c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bdf3c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bdf4c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bdf5c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bdf6c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bdf7c:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bdf8c <fpi.1>:
   bdf8c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bdf9c:	0000 0000                                   ....

000bdfa0 <fpinan.0>:
   bdfa0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bdfb8 <tinytens>:
   bdfb8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bdfc8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bdfd8:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bdfe8:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bdff8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   be008:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   be018:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   be028:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   be038:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   be048:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   be058:	7472 6b6f 632e                               rtok.c.

000be05f <_ctype_>:
   be05f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be06f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be07f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be08f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be09f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be0af:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be0bf:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be0cf:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be0df:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   be15f:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   be16f:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   be17f:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   be18f:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   be19f:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   be1af:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   be1bf:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   be1cf:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   be1df:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   be1ef:	6874 7865 632e 0000                          thex.c...

000be1f8 <_C_numeric_locale>:
   be1f8:	d363 000b d795 000b d92c 2003 0043 4f50     c.......,.. C.PO
   be208:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   be218:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   be228:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   be238:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   be248:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   be258:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   be268:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   be278:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   be288:	0063 0000 0000 0000                         c.......

000be290 <__mprec_bigtens>:
   be290:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   be2a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   be2b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000be2b8 <__mprec_tens>:
   be2b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   be2c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   be2d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   be2e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   be2f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   be308:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   be318:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   be328:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   be338:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be348:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be358:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be368:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be378:	9db4 79d9 7843 44ea                         ...yCx.D

000be380 <p05.0>:
   be380:	0005 0000 0019 0000 007d 0000               ........}...

000be38c <link_const_variable_data_end>:
   be38c:	000b513d 	.word	0x000b513d
   be390:	000b6745 	.word	0x000b6745
   be394:	000b6f45 	.word	0x000b6f45
   be398:	000b6f91 	.word	0x000b6f91
   be39c:	000b8e7d 	.word	0x000b8e7d
   be3a0:	000b8fad 	.word	0x000b8fad
   be3a4:	000b917d 	.word	0x000b917d
   be3a8:	000b91c5 	.word	0x000b91c5
   be3ac:	000ba21d 	.word	0x000ba21d
   be3b0:	000ba381 	.word	0x000ba381

000be3b4 <link_constructors_end>:
	...
